Attribute VB_Name = "AboutSheet"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Relationship Visualizer.Sheets.About")
Option Explicit

Private Sub Worksheet_Activate()
    LastActiveWorksheet = ActiveSheet.Name
    SyncHelpToggleButtons
    ActivateTab (RIBBON_TAB_GRAPHVIZ)
End Sub

Attribute VB_Name = "DataSheet"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Relationship Visualizer.Sheets.Data")
Option Explicit

Private Sub Worksheet_Activate()
    LastActiveWorksheet = ActiveSheet.Name
    SyncHelpToggleButtons
    ActivateTab (RIBBON_TAB_GRAPHVIZ)
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    AutoDraw
End Sub

Attribute VB_Name = "GraphSheet"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Relationship Visualizer.Sheets.Graph")
Option Explicit

Private Sub Worksheet_Activate()
    LastActiveWorksheet = ActiveSheet.Name
    SyncHelpToggleButtons
    ActivateTab (RIBBON_TAB_GRAPHVIZ)
End Sub


Attribute VB_Name = "HelpAttributesSheet"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Relationship Visualizer.Sheets.Help Attributes")
Option Explicit



Attribute VB_Name = "HelpColorsSheet"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Relationship Visualizer.Sheets.Help Colors")
Option Explicit

Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
    On Error GoTo ErrorHandler
    SetStyleDesignerColorScheme (Target.TextToDisplay)
    Exit Sub

ErrorHandler:
    Err.Clear
    Resume Next
End Sub


Attribute VB_Name = "HelpShapesSheet"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Relationship Visualizer.Sheets.Help Shapes")
Option Explicit


Attribute VB_Name = "ListsSheet"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Relationship Visualizer.Sheets.Lists")
Option Explicit



Attribute VB_Name = "SettingsSheet"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Relationship Visualizer.Sheets.Settings")
Option Explicit

Private Sub Worksheet_Activate()
    LastActiveWorksheet = ActiveSheet.Name
    SyncHelpToggleButtons
    ActivateTab (RIBBON_TAB_GRAPHVIZ)
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

    On Error GoTo Whoa

    ' Detect changes in the settings dropdown lists
    If Not Intersect(Target, SettingsSheet.Range(SETTINGS_GRAPHVIZ_ENGINE)) Is Nothing Then
        Application.EnableEvents = False
        
        If Trim$(SettingsSheet.Range(SETTINGS_GRAPHVIZ_ENGINE).value) = "dot" Then
            SettingsSheet.Range(SETTINGS_GRAPH_LAYOUT_DIRECTION).value = "top to bottom"
        Else
            SettingsSheet.Range(SETTINGS_GRAPH_LAYOUT_DIRECTION).value = vbNullString
        End If
        
    ElseIf Not Intersect(Target, SettingsSheet.Range(SETTINGS_HELP_ATTRIBUTES)) Is Nothing Then
        Application.EnableEvents = False
        
        SyncHelpToggleButtons
        
        If LastActiveWorksheet = vbNullString Then
            LastActiveWorksheet = WORKSHEET_DATA
        End If
        
        If UCase$(Trim$(SettingsSheet.Range(SETTINGS_HELP_ATTRIBUTES).value)) = UCase$(TOGGLE_SHOW) Then
            HelpAttributesSheet.visible = True
            HelpAttributesSheet.Activate
        Else
            HelpAttributesSheet.visible = False
            ActiveWorkbook.Sheets(LastActiveWorksheet).Activate
        End If
    
    ElseIf Not Intersect(Target, SettingsSheet.Range(SETTINGS_HELP_COLORS)) Is Nothing Then
        Application.EnableEvents = False
        
        SyncHelpToggleButtons
        
        If LastActiveWorksheet = vbNullString Then
            LastActiveWorksheet = WORKSHEET_DATA
        End If
        
        If UCase$(Trim$(SettingsSheet.Range(SETTINGS_HELP_COLORS).value)) = UCase$(TOGGLE_SHOW) Then
            HelpColorsSheet.visible = True
            HelpColorsSheet.Activate
        Else
            HelpColorsSheet.visible = False
            ActiveWorkbook.Sheets(LastActiveWorksheet).Activate
        End If
    
    ElseIf Not Intersect(Target, SettingsSheet.Range(SETTINGS_HELP_SHAPES)) Is Nothing Then
        Application.EnableEvents = False
        
        If LastActiveWorksheet = vbNullString Then
            LastActiveWorksheet = WORKSHEET_DATA
        End If
        
        SyncHelpToggleButtons
        
        If UCase$(Trim$(SettingsSheet.Range(SETTINGS_HELP_SHAPES).value)) = UCase$(TOGGLE_SHOW) Then
            HelpShapesSheet.visible = True
            HelpShapesSheet.Activate
        Else
            HelpShapesSheet.visible = False
            ActiveWorkbook.Sheets(LastActiveWorksheet).Activate
        End If
    
    ElseIf Not Intersect(Target, SettingsSheet.Range(SETTINGS_OUTPUT_DIRECTORY)) Is Nothing Then
        Application.EnableEvents = False
        Call RefreshRibbon(tag:=RIBBON_TAB_GRAPHVIZ)
        
    ElseIf Not Intersect(Target, SettingsSheet.Range(SETTINGS_FILE_NAME)) Is Nothing Then
        Application.EnableEvents = False
        Call RefreshRibbon(tag:=RIBBON_TAB_GRAPHVIZ)
    
    ElseIf Not Intersect(Target, SettingsSheet.Range(SETTINGS_SOURCE_INDENT)) Is Nothing Then
        Application.EnableEvents = False
        Call RefreshRibbon(tag:=RIBBON_TAB_SOURCE)

    ElseIf Not Intersect(Target, SettingsSheet.Range("SourceWeb1Text,SourceWeb1Visible,SourceWeb1URL,SourceWeb1Screentip,SourceWeb1Supertip")) Is Nothing Then
        Application.EnableEvents = False
        Call RefreshRibbon(tag:=RIBBON_TAB_SOURCE)
    
    ElseIf Not Intersect(Target, SettingsSheet.Range("SourceWeb2Text,SourceWeb2Visible,SourceWeb2URL,SourceWeb2Screentip,SourceWeb2Supertip")) Is Nothing Then
        Application.EnableEvents = False
        Call RefreshRibbon(tag:=RIBBON_TAB_SOURCE)
    
    ElseIf Not Intersect(Target, SettingsSheet.Range("SourceWeb3Text,SourceWeb3Visible,SourceWeb3URL,SourceWeb3Screentip,SourceWeb3Supertip")) Is Nothing Then
        Application.EnableEvents = False
        Call RefreshRibbon(tag:=RIBBON_TAB_SOURCE)
    
    ElseIf Not Intersect(Target, SettingsSheet.Range("SourceWeb4Text,SourceWeb4Visible,SourceWeb4URL,SourceWeb4Screentip,SourceWeb4Supertip")) Is Nothing Then
        Application.EnableEvents = False
        Call RefreshRibbon(tag:=RIBBON_TAB_SOURCE)
    
    ElseIf Not Intersect(Target, SettingsSheet.Range("SourceWeb5Text,SourceWeb5Visible,SourceWeb5URL,SourceWeb5Screentip,SourceWeb5Supertip")) Is Nothing Then
        Application.EnableEvents = False
        Call RefreshRibbon(tag:=RIBBON_TAB_SOURCE)

    ElseIf Not Intersect(Target, SettingsSheet.Range("SourceWeb6Text,SourceWeb6Visible,SourceWeb6URL,SourceWeb6Screentip,SourceWeb6Supertip")) Is Nothing Then
        Application.EnableEvents = False
        Call RefreshRibbon(tag:=RIBBON_TAB_SOURCE)



    ElseIf Not Intersect(Target, SettingsSheet.Range("ExtCode1Text,ExtCode1Visible,ExtCode1Sub,ExtCode1Screentip,ExtCode1Supertip")) Is Nothing Then
        Application.EnableEvents = False
        Call RefreshRibbon(tag:=RIBBON_TAB_EXTENSIONS)
    
    ElseIf Not Intersect(Target, SettingsSheet.Range("ExtCode2Text,ExtCode2Visible,ExtCode2Sub,ExtCode2Screentip,ExtCode2Supertip")) Is Nothing Then
        Application.EnableEvents = False
        Call RefreshRibbon(tag:=RIBBON_TAB_EXTENSIONS)
    
    ElseIf Not Intersect(Target, SettingsSheet.Range("ExtCode3Text,ExtCode3Visible,ExtCode3Sub,ExtCode3Screentip,ExtCode3Supertip")) Is Nothing Then
        Application.EnableEvents = False
        Call RefreshRibbon(tag:=RIBBON_TAB_EXTENSIONS)
    
    ElseIf Not Intersect(Target, SettingsSheet.Range("ExtCode4Text,ExtCode4Visible,ExtCode4Sub,ExtCode4Screentip,ExtCode4Supertip")) Is Nothing Then
        Application.EnableEvents = False
        Call RefreshRibbon(tag:=RIBBON_TAB_EXTENSIONS)
    
    ElseIf Not Intersect(Target, SettingsSheet.Range("ExtCode5Text,ExtCode5Visible,ExtCode5Sub,ExtCode5Screentip,ExtCode5Supertip")) Is Nothing Then
        Application.EnableEvents = False
        Call RefreshRibbon(tag:=RIBBON_TAB_EXTENSIONS)
    
    ElseIf Not Intersect(Target, SettingsSheet.Range("ExtCode6Text,ExtCode6Visible,ExtCode6Sub,ExtCode6Screentip,ExtCode6Supertip")) Is Nothing Then
        Application.EnableEvents = False
        Call RefreshRibbon(tag:=RIBBON_TAB_EXTENSIONS)
    
    
    
    ElseIf Not Intersect(Target, SettingsSheet.Range("ExtWeb1Text,ExtWeb1Visible,ExtWeb1URL,ExtWeb1Screentip,ExtWeb1Supertip")) Is Nothing Then
        Application.EnableEvents = False
        Call RefreshRibbon(tag:=RIBBON_TAB_EXTENSIONS)
    
    ElseIf Not Intersect(Target, SettingsSheet.Range("ExtWeb2Text,ExtWeb2Visible,ExtWeb2URL,ExtWeb2Screentip,ExtWeb2Supertip")) Is Nothing Then
        Application.EnableEvents = False
        Call RefreshRibbon(tag:=RIBBON_TAB_EXTENSIONS)
    
    ElseIf Not Intersect(Target, SettingsSheet.Range("ExtWeb3Text,ExtWeb3Visible,ExtWeb3URL,ExtWeb3Screentip,ExtWeb3Supertip")) Is Nothing Then
        Application.EnableEvents = False
        Call RefreshRibbon(tag:=RIBBON_TAB_EXTENSIONS)
    
    ElseIf Not Intersect(Target, SettingsSheet.Range("ExtWeb4Text,ExtWeb4Visible,ExtWeb4URL,ExtWeb4Screentip,ExtWeb4Supertip")) Is Nothing Then
        Application.EnableEvents = False
        Call RefreshRibbon(tag:=RIBBON_TAB_EXTENSIONS)
    
    ElseIf Not Intersect(Target, SettingsSheet.Range("ExtWeb5Text,ExtWeb5Visible,ExtWeb5URL,ExtWeb5Screentip,ExtWeb5Supertip")) Is Nothing Then
        Application.EnableEvents = False
        Call RefreshRibbon(tag:=RIBBON_TAB_EXTENSIONS)
    
    ElseIf Not Intersect(Target, SettingsSheet.Range("ExtWeb6Text,ExtWeb6Visible,ExtWeb6URL,ExtWeb6Screentip,ExtWeb6Supertip")) Is Nothing Then
        Application.EnableEvents = False
        Call RefreshRibbon(tag:=RIBBON_TAB_EXTENSIONS)
   
    
    ElseIf Not Intersect(Target, SettingsSheet.Range("ExtTabName,ExttabGroupNameCode,ExtTabGroupNameWeb")) Is Nothing Then
        Application.EnableEvents = False
        Call RefreshRibbon(tag:=RIBBON_TAB_EXTENSIONS)
    End If
    
    
LetsContinue:
    Application.EnableEvents = True
    Exit Sub
Whoa:
    MsgBox Err.Number & " " & Err.Description
    
    Resume LetsContinue

End Sub

Attribute VB_Name = "SourceSheet"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Relationship Visualizer.Sheets.Source")
Option Explicit

Private Sub Worksheet_Activate()
    LastActiveWorksheet = ActiveSheet.Name
    SyncHelpToggleButtons
    ActivateTab (RIBBON_TAB_SOURCE)
    ActiveSheet.Range("A1").Select
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

    OptimizeCode_Begin
    UpdateSourceWorksheetLineNumbers
    OptimizeCode_End
    
End Sub

Attribute VB_Name = "SqlSheet"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Relationship Visualizer.Sheets.SQL")
Option Explicit

Private Sub Worksheet_Activate()
    LastActiveWorksheet = ActiveSheet.Name
    SyncHelpToggleButtons
    ActivateTab (RIBBON_TAB_SQL)
End Sub

Attribute VB_Name = "Style"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' Copyright (c) 2015-2018 Jeffrey J. Long. All rights reserved

'@Folder("Relationship Visualizer.Sheets.Styles")
'@Ignore MoveFieldCloserToUsage, EncapsulatePublicField
Public styleType As String
'@Ignore MoveFieldCloserToUsage, EncapsulatePublicField
Public styleFormat As String



Attribute VB_Name = "StyleDesignerSheet"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Relationship Visualizer.Sheets.Style Designer")
Option Explicit

Private Sub Worksheet_Activate()
    LastActiveWorksheet = ActiveSheet.Name
    SyncHelpToggleButtons
    ActivateTab (RIBBON_TAB_STYLE_DESIGNER)
    RenderPreview
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

    On Error GoTo Whoa

    ' Detect changes in the NodeFormatString text box
    If Not Intersect(Target, StyleDesignerSheet.Range(DESIGNER_LABEL_TEXT)) Is Nothing Then
        Application.EnableEvents = False
        RenderPreviewFromFormatString
        
    ElseIf Not Intersect(Target, StyleDesignerSheet.Range(DESIGNER_FORMAT_STRING)) Is Nothing Then
        Application.EnableEvents = False
        If StyleDesignerSheet.Range(DESIGNER_FORMAT_STRING).value = vbNullString Then
            ClearStyleRibbon
        Else
            RenderPreviewFromFormatString
        End If
        
    ElseIf Not Intersect(Target, StyleDesignerSheet.Range(DESIGNER_ADD_CAPTION)) Is Nothing Then
        Application.EnableEvents = False
        RenderPreview

    End If
    
LetsContinue:
    Application.EnableEvents = True
    Exit Sub
Whoa:
    MsgBox "StyleDesignerSheet " & Err.Number & " " & Err.Description
    
    Resume LetsContinue

End Sub

Attribute VB_Name = "StylesSheet"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Relationship Visualizer.Sheets.Styles")
Option Explicit

Private Sub Worksheet_Activate()
    LastActiveWorksheet = ActiveSheet.Name
    SyncHelpToggleButtons
    ActivateTab (RIBBON_TAB_GRAPHVIZ)
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

    On Error GoTo ErrorHandler

    ' Detect changes in the settings dropdown lists
    If Not Intersect(Target, StylesSheet.Range("A1:AZ1")) Is Nothing Then
        Application.EnableEvents = False
        RefreshRibbon tag:="GraphvizTab"
    End If
    
    Application.EnableEvents = True
    Exit Sub

ErrorHandler:
    If Err.Number > 0 Then
        MsgBox "Sheet: StylesSheet - " & Err.Number & " " & Err.Description
        Err.Clear
        Resume Next
    End If
End Sub

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Relationship Visualizer.Workbook")
Option Explicit

Private Sub Workbook_Open()
    Application.Calculation = xlCalculationAutomatic
    LastActiveWorksheet = ActiveSheet.Name
End Sub

'Private Sub Workbook_SheetActivate(ByVal Sh As Object)
'    Select Case Sh.Name
'    Case "about...": Call RefreshRibbon(tag:="")
'    Case "revisions": Call RefreshRibbon(tag:="")
'    Case "lists": Call RefreshRibbon(tag:="")
'    Case "vlookups": Call RefreshRibbon(tag:="")
'    Case "style designer": Call RefreshRibbon(tag:="*Tab")
'    Case Else: Call RefreshRibbon(tag:="GraphvizTab")
'    End Select
'End Sub

Attribute VB_Name = "modConstants"
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Relationship Visualizer.Bootstrap")
Option Explicit

' Worksheet names
Public Const WORKSHEET_DATA = "data"
Public Const WORKSHEET_GRAPH = "graph"
Public Const WORKSHEET_STYLES = "styles"
Public Const WORKSHEET_SETTINGS = "settings"
Public Const WORKSHEET_STYLE_DESIGNER = "style designer"
Public Const WORKSHEET_HELP_SHAPES = "HELP - shapes"
Public Const WORKSHEET_HELP_COLORS = "HELP - colors"
Public Const WORKSHEET_HELP_ATTRIBUTES = "HELP - attributes"
Public Const WORKSHEET_ABOUT = "about..."
Public Const WORKSHEET_REVISIONS = "revisions"
Public Const WORKSHEET_VLOOKUPS = "vlookups"
Public Const WORKSHEET_LISTS = "lists"
Public Const WORKSHEET_SOURCE = "source"
Public Const WORKSHEET_SQL = "sql"

' Row indicator characters
Public Const FLAG_ERROR = "!"
Public Const FLAG_COMMENT = "#"

' Commonly reused strings
Public Const NEWLINE = "\n"
Public Const COMMA = ","
Public Const SEMICOLON = ";"

' Keywords
Public Const KEYWORD_NODE = "NODE"
Public Const KEYWORD_EDGE = "EDGE"
Public Const KEYWORD_GRAPH = "GRAPH"
Public Const KEYWORD_CLUSTER = "CLUSTER"

' Row Types
Public Const TYPE_NODE = "NODE"
Public Const TYPE_EDGE = "EDGE"
Public Const TYPE_SUBGRAPH_OPEN = "SUBGRAPH-OPEN"
Public Const TYPE_SUBGRAPH_CLOSE = "SUBGRAPH-CLOSE"
Public Const TYPE_KEYWORD = "KEYWORD"
Public Const TYPE_NATIVE = "NATIVE"

' Toggle switch values
Public Const TOGGLE_INCLUDE = "Include"
Public Const TOGGLE_EXCLUDE = "Exclude"

Public Const TOGGLE_YES = "Yes"
Public Const TOGGLE_NO = "No"

Public Const TOGGLE_KEEP = "keep"
Public Const TOGGLE_DELETE = "delete"

Public Const TOGGLE_ON = "on"
Public Const TOGGLE_OFF = "off"

Public Const TOGGLE_SHOW = "show"
Public Const TOGGLE_HIDE = "hide"

Public Const TOGGLE_AUTO = "auto"
Public Const TOGGLE_MANUAL = "manual"

Public Const TOGGLE_DIRECTED = "directed"
Public Const TOGGLE_UNDIRECTED = "undirected"

Public Const TOGGLE_BREADTH_FIRST = "breadthfirst"
Public Const TOGGLE_NODES_FIRST = "nodesfirst"
Public Const TOGGLE_EDGES_FIRST = "edgesfirst"

Public Const TOGGLE_BLANK_USE_DEFAULT = "default"
Public Const TOGGLE_BLANK_USE_BLANK = "blank"

' Color scheme constants
Public Const COLOR_SCHEME_DEFAULT = "X11"
Public Const COLOR_SCHEME_PREFIX = "CS_"
Public Const COLOR_SCHEME_SVG = "SVG"
'@Ignore UseMeaningfulName
Public Const COLOR_SCHEME_X11 = "X11"

' Settings Cell Names
Public Const SETTINGS_APPEND_OPTIONS = "AppendOptions"
Public Const SETTINGS_APPEND_TIMESTAMP = "AppendTimestamp"
Public Const SETTINGS_BLANK_EDGE_LABELS = "BlankEdgeLabels"
Public Const SETTINGS_BLANK_NODE_LABELS = "BlankNodeLabels"
Public Const SETTINGS_COMMAND_LINE_PARAMETERS = "commandLineParameters"
Public Const SETTINGS_DEBUG = "Debug"
Public Const SETTINGS_EDGE_HEAD_LABELS = "EdgeHeadLabels"
Public Const SETTINGS_EDGE_LABELS = "EdgeLabels"
Public Const SETTINGS_EDGE_TAIL_LABELS = "EdgeTailLabels"
Public Const SETTINGS_EDGE_XLABELS = "EdgeXLabels"
Public Const SETTINGS_FILE_DISPOSITION = "FileDisposition"
Public Const SETTINGS_FILE_FORMAT = "FileFormat"
Public Const SETTINGS_FILE_NAME = "FileName"
Public Const SETTINGS_GRAPHVIZ_ENGINE = "GraphvizEngine"
Public Const SETTINGS_GRAPH_CENTER = "GraphCenter"
Public Const SETTINGS_GRAPH_COMPOUND = "GraphCompound"
Public Const SETTINGS_GRAPH_CONCENTRATE = "GraphConcentrate"
Public Const SETTINGS_GRAPH_FORCE_LABELS = "GraphForceLabels"
Public Const SETTINGS_GRAPH_LAYOUT_DIRECTION = "GraphLayoutDirection"
Public Const SETTINGS_GRAPH_NEWRANK = "GraphNewrank"
Public Const SETTINGS_GRAPH_OPTIONS = "GraphOptions"
Public Const SETTINGS_GRAPH_ORIENTATION = "GraphOrientation"
Public Const SETTINGS_GRAPH_OUTPUT_ORDER = "GraphOutputOrder"
Public Const SETTINGS_GRAPH_OVERLAP = "GraphOverlap"
Public Const SETTINGS_GRAPH_STRICT = "GraphStrict"
Public Const SETTINGS_GRAPH_TRANSPARENT = "GraphTransparent"
Public Const SETTINGS_GRAPH_TYPE = "GraphType"
Public Const SETTINGS_HELP_ATTRIBUTES = "HelpAttributes"
Public Const SETTINGS_HELP_COLORS = "HelpColors"
Public Const SETTINGS_HELP_SHAPES = "HelpShapes"
Public Const SETTINGS_IMAGE_PATH = "ImagePath"
Public Const SETTINGS_IMAGE_TYPE = "ImageType"
Public Const SETTINGS_IMAGE_WORKSHEET = "ImageWorksheet"
Public Const SETTINGS_INCLUDE_EXTRA_ATTRIBUTES = "IncludeExtraAttributes"
Public Const SETTINGS_INCLUDE_STYLE_FORMAT = "IncludeStyleFormat"
Public Const SETTINGS_MAX_SECONDS = "MaxSeconds"
Public Const SETTINGS_NODES_WITHOUT_RELATIONSHIPS = "NodesWithoutRelationships"
Public Const SETTINGS_NODE_LABELS = "NodeLabels"
Public Const SETTINGS_NODE_XLABELS = "NodeXLabels"
Public Const SETTINGS_OUTPUT_DIRECTORY = "OutputDirectory"
Public Const SETTINGS_PICTURE_NAME = "PictureName"
Public Const SETTINGS_RANKDIR = "Rankdir"
Public Const SETTINGS_RELATIONSHIPS_WITHOUT_NODES = "RelationshipsWithoutNodes"
Public Const SETTINGS_RUN_MODE = "RunMode"
Public Const SETTINGS_SPLINES = "Splines"
Public Const SETTINGS_VIEW_NAME = "ViewName"
Public Const SETTINGS_YES_NO_SWITCH_COLUMN = "YesNoSwitchColumn"

' Style Designer worksheet cell names
Public Const DESIGNER_ADD_CAPTION = "AddCaption"
Public Const DESIGNER_BORDER_COLOR = "BorderColor"
Public Const DESIGNER_BORDER_PEN_WIDTH = "BorderPenWidth"
Public Const DESIGNER_BORDER_PERIPHERIES = "BorderPeripheries"
'@Ignore UseMeaningfulName
Public Const DESIGNER_BORDER_STYLE1 = "BorderStyle1"
'@Ignore UseMeaningfulName
Public Const DESIGNER_BORDER_STYLE2 = "BorderStyle2"
'@Ignore UseMeaningfulName
Public Const DESIGNER_BORDER_STYLE3 = "BorderStyle3"
Public Const DESIGNER_COLOR_SCHEME = "ColorScheme"
'@Ignore UseMeaningfulName
Public Const DESIGNER_EDGE_ARROW_HEAD_1 = "EdgeArrowHead1"
'@Ignore UseMeaningfulName
Public Const DESIGNER_EDGE_ARROW_HEAD_2 = "EdgeArrowHead2"
'@Ignore UseMeaningfulName
Public Const DESIGNER_EDGE_ARROW_HEAD_3 = "EdgeArrowHead3"
Public Const DESIGNER_EDGE_ARROW_SIZE = "EdgeArrowSize"
'@Ignore UseMeaningfulName
Public Const DESIGNER_EDGE_ARROW_TAIL_1 = "EdgeArrowTail1"
'@Ignore UseMeaningfulName
Public Const DESIGNER_EDGE_ARROW_TAIL_2 = "EdgeArrowTail2"
'@Ignore UseMeaningfulName
Public Const DESIGNER_EDGE_ARROW_TAIL_3 = "EdgeArrowTail3"
'@Ignore UseMeaningfulName
Public Const DESIGNER_EDGE_COLOR_1 = "EdgeColor1"
'@Ignore UseMeaningfulName
Public Const DESIGNER_EDGE_COLOR_2 = "EdgeColor2"
'@Ignore UseMeaningfulName
Public Const DESIGNER_EDGE_COLOR_3 = "EdgeColor3"
Public Const DESIGNER_EDGE_DECORATE = "EdgeDecorate"
Public Const DESIGNER_EDGE_DIRECTION = "EdgeDirection"
Public Const DESIGNER_EDGE_HEAD_CLIP = "EdgeHeadClip"
Public Const DESIGNER_EDGE_HEAD_PORT = "EdgeHeadPort"
Public Const DESIGNER_EDGE_LABEL_ANGLE = "EdgeLabelAngle"
Public Const DESIGNER_EDGE_LABEL_DISTANCE = "EdgeLabelDistance"
Public Const DESIGNER_EDGE_LABEL_FLOAT = "EdgeLabelFloat"
Public Const DESIGNER_EDGE_PEN_WIDTH = "EdgePenWidth"
Public Const DESIGNER_EDGE_STYLE = "EdgeStyle"
Public Const DESIGNER_EDGE_TAIL_CLIP = "EdgeTailClip"
Public Const DESIGNER_EDGE_TAIL_PORT = "EdgeTailPort"
Public Const DESIGNER_EDGE_WEIGHT = "EdgeWeight"
Public Const DESIGNER_FILL_COLOR = "FillColor"
Public Const DESIGNER_FONT_BOLD = "FontBold"
Public Const DESIGNER_FONT_COLOR = "FontColor"
Public Const DESIGNER_FONT_ITALIC = "FontItalic"
Public Const DESIGNER_FONT_NAME = "FontName"
Public Const DESIGNER_FONT_SIZE = "FontSize"
Public Const DESIGNER_FORMAT_STRING = "FormatString"
Public Const DESIGNER_GRADIENT_FILL_ANGLE = "GradientFillAngle"
Public Const DESIGNER_GRADIENT_FILL_COLOR = "GradientFillColor"
Public Const DESIGNER_GRADIENT_FILL_TYPE = "GradientFillType"
Public Const DESIGNER_LABEL_JUSTIFICATION = "LabelJustification"
Public Const DESIGNER_LABEL_LOCATION = "LabelLocation"
Public Const DESIGNER_LABEL_TEXT = "LabelText"
Public Const DESIGNER_MODE = "StyleDesignerMode"
Public Const DESIGNER_NODE_DISTORTION = "NodeDistortion"
Public Const DESIGNER_NODE_FIXED_SIZE = "NodeFixedSize"
Public Const DESIGNER_NODE_HEIGHT = "NodeHeight"
Public Const DESIGNER_NODE_IMAGE_NAME = "NodeImageName"
Public Const DESIGNER_NODE_IMAGE_SCALE = "NodeImageScale"
Public Const DESIGNER_NODE_ORIENTATION = "NodeOrientation"
Public Const DESIGNER_NODE_REGULAR = "NodeRegular"
Public Const DESIGNER_NODE_SHAPE = "NodeShape"
Public Const DESIGNER_NODE_SIDES = "NodeSides"
Public Const DESIGNER_NODE_SKEW = "NodeSkew"
Public Const DESIGNER_NODE_WIDTH = "NodeWidth"
Public Const DESIGNER_PREVIEW_CELL = "DesignerPreviewCell"

' Default settings
Public Const SETTINGS_DEFAULT_TO_WORKSHEET_TYPE = "png"
Public Const SETTINGS_DEFAULT_TO_FILE_TYPE = "pdf"
Public Const SETTINGS_DEFAULT_GRAPHVIZ_ENGINE = "dot"

' Worksheet row and column mapping of cell names on the 'data' worksheet
Public Const SETTINGS_DATA_ROW_HEADING = "DataRowHeading"
Public Const SETTINGS_DATA_ROW_FIRST = "DataRowFirst"
Public Const SETTINGS_DATA_ROW_LAST = "DataRowLast"
Public Const SETTINGS_DATA_COL_COMMENT = "DataColComment"
Public Const SETTINGS_DATA_COL_STYLE = "DataColStyle"
Public Const SETTINGS_DATA_COL_ITEM = "DataColItem"
Public Const SETTINGS_DATA_COL_LABEL = "DataColLabel"
Public Const SETTINGS_DATA_COL_LABEL_X = "DataColXLabel"
Public Const SETTINGS_DATA_COL_LABEL_TAIL = "DataColTailLabel"
Public Const SETTINGS_DATA_COL_LABEL_HEAD = "DataColHeadLabel"
Public Const SETTINGS_DATA_COL_IS_RELATED_TO = "DataColIsRelatedTo"
Public Const SETTINGS_DATA_COL_EXTRA_ATTRIBUTES = "DataColExtraAttrs"
Public Const SETTINGS_DATA_COL_ERROR_MESSAGES = "DataColErrMessage"
Public Const SETTINGS_DATA_COL_GRAPH = "DataColGraph"

' Worksheet row and column mapping of cell names on the 'source' worksheet
Public Const SETTINGS_SOURCE_ROW_HEADING = "SourceRowHeading"
Public Const SETTINGS_SOURCE_ROW_FIRST = "SourceRowFirst"

Public Const SETTINGS_SOURCE_COL_LINE_NUMBER = "SourceColLineNumber"
Public Const SETTINGS_SOURCE_COL_SOURCE = "SourceColSource"
Public Const SETTINGS_SOURCE_INDENT = "SourceIndent"

' Worksheet row and column mapping of cell names on the 'styles' worksheet
Public Const SETTINGS_STYLES_ROW_FIRST = "StylesRowFirst"
Public Const SETTINGS_STYLES_ROW_LAST = "StylesRowLast"
Public Const SETTINGS_STYLES_ROW_HEADING = "StylesRowHeading"
Public Const SETTINGS_STYLES_COL_SHOW_STYLE = "StylesColShowStyle"
Public Const SETTINGS_STYLES_COL_COMMENT = "StylesColComment"
Public Const SETTINGS_STYLES_COL_STYLE = "StylesColStyle"
Public Const SETTINGS_STYLES_COL_FORMAT = "StylesColFormat"
Public Const SETTINGS_STYLES_COL_OBJECT_TYPE = "StylesColObjType"
Public Const SETTINGS_STYLES_COL_FIRST_YES_NO_VIEW = "StylesColFirstYesNoView"

' Worksheet row and column mapping of cell names on the 'sql' worksheet
Public Const SETTINGS_SQL_ROW_HEADING = "SqlRowHeading"
Public Const SETTINGS_SQL_ROW_FIRST = "SqlRowFirst"

Public Const SETTINGS_SQL_COL_COMMENT = "SqlColComment"
Public Const SETTINGS_SQL_COL_SQL_STATEMENT = "SqlColSqlStatement"
Public Const SETTINGS_SQL_COL_EXCEL_FILE = "SqlColExcelFile"
Public Const SETTINGS_SQL_COL_STATUS = "SqlColStatus"

' Names of Named Range lists used as dropdown values
Public Const LISTS_ANGLE = "Angle"
Public Const LISTS_ARROW_HEADS = "ArrowHeads"
Public Const LISTS_ARROW_SIZE = "ArrowSize"
Public Const LISTS_ARROW_TAILS = "ArrowTails"
Public Const LISTS_COLOR_SCHEMES = "ColorSchemes"
Public Const LISTS_DIRECTION = "Direction"
Public Const LISTS_EDGE_STYLES = "EdgeStyles"
Public Const LISTS_FIXED_SIZE = "FixedSize"
Public Const LISTS_FONT_SIZES = "FontSizes"
Public Const LISTS_GRADIENT_TYPE = "GradientType"
Public Const LISTS_IMAGE_SCALE = "ImageScale"
Public Const LISTS_PEN_WIDTH = "PenWidth"
Public Const LISTS_PERIPHERIES = "Peripheries"
Public Const LISTS_PORTS = "Ports"
Public Const LISTS_SHAPE_SIZES = "ShapeSizes"
Public Const LISTS_SHAPES = "Shapes"
Public Const LISTS_SIDES = "Sides"
Public Const LISTS_STYLES = "Styles"
Public Const LISTS_EDGE_ANGLES = "EdgeLabelAngles"
Public Const LISTS_EDGE_WEIGHTS = "Weight"
Public Const LISTS_EDGE_LABEL_DISTANCES = "EdgeDistances"

' Ribbon constants (control ids and group ids)
Public Const RIBBON_CTL_ALIGN_BOTTOM = "alignBottom"
Public Const RIBBON_CTL_ALIGN_TOP = "alignTop"
Public Const RIBBON_CTL_BORDER_COLOR = "borderColor"
Public Const RIBBON_CTL_BORDER_PERIPHERIES = "borderPeripheries"
'@Ignore UseMeaningfulName
Public Const RIBBON_CTL_BORDER_STYLE2 = "borderStyle2"
'@Ignore UseMeaningfulName
Public Const RIBBON_CTL_BORDER_STYLE3 = "borderStyle3"
Public Const RIBBON_CTL_COLOR_SCHEME = "colorScheme"
Public Const RIBBON_CTL_COPY_TO_CLIPBOARD = "copyToClipboard"
Public Const RIBBON_CTL_DESIGN_MODE_CLUSTER = "designModeCluster"
Public Const RIBBON_CTL_DESIGN_MODE_EDGE = "designModeEdge"
Public Const RIBBON_CTL_DESIGN_MODE_NODE = "designModeNode"
'@Ignore UseMeaningfulName
Public Const RIBBON_CTL_EDGE_ARROW_HEAD1 = "edgeArrowHead1"
'@Ignore UseMeaningfulName
Public Const RIBBON_CTL_EDGE_ARROW_HEAD2 = "edgeArrowHead2"
'@Ignore UseMeaningfulName
Public Const RIBBON_CTL_EDGE_ARROW_HEAD3 = "edgeArrowHead3"
Public Const RIBBON_CTL_EDGE_ARROW_SIZE = "edgeArrowSize"
'@Ignore UseMeaningfulName
Public Const RIBBON_CTL_EDGE_ARROW_TAIL1 = "edgeArrowTail1"
'@Ignore UseMeaningfulName
Public Const RIBBON_CTL_EDGE_ARROW_TAIL2 = "edgeArrowTail2"
'@Ignore UseMeaningfulName
Public Const RIBBON_CTL_EDGE_ARROW_TAIL3 = "edgeArrowTail3"
'@Ignore UseMeaningfulName
Public Const RIBBON_CTL_EDGE_COLOR1 = "edgeColor1"
'@Ignore UseMeaningfulName
Public Const RIBBON_CTL_EDGE_COLOR2 = "edgeColor2"
'@Ignore UseMeaningfulName
Public Const RIBBON_CTL_EDGE_COLOR3 = "edgeColor3"
Public Const RIBBON_CTL_EDGE_DIRECTION = "edgeDirection"
Public Const RIBBON_CTL_EDGE_LABELS_BLANK = "blankEdgeLabels"
Public Const RIBBON_CTL_EDGE_LABELS_DEFAULT = "defaultEdgeLabels"
Public Const RIBBON_CTL_EDGE_LABEL_ANGLE = "edgeLabelAngle"
Public Const RIBBON_CTL_EDGE_LABEL_DECORATE = "edgeLabelDecorate"
Public Const RIBBON_CTL_EDGE_LABEL_DISTANCE = "edgeLabelDistance"
Public Const RIBBON_CTL_EDGE_LABEL_FLOAT = "edgeLabelFloat"
Public Const RIBBON_CTL_FILL_COLOR = "fillColor"
Public Const RIBBON_CTL_FONT_COLOR = "fontColor"
Public Const RIBBON_CTL_GRADIENT_FILL_ANGLE = "gradientFillAngle"
Public Const RIBBON_CTL_GRADIENT_FILL_COLOR = "gradientFillColor"
Public Const RIBBON_CTL_GRADIENT_FILL_TYPE = "gradientFillType"
Public Const RIBBON_CTL_GRAPH_BREADTH_FIRST = "breadthFirst"
Public Const RIBBON_CTL_GRAPH_EDGES_FIRST = "edgesFirst"
Public Const RIBBON_CTL_GRAPH_NODES_FIRST = "nodesFirst"
Public Const RIBBON_CTL_GRAPH_OVERLAP_COMPRESS = "compress"
Public Const RIBBON_CTL_GRAPH_OVERLAP_PRISM = "prism"
Public Const RIBBON_CTL_GRAPH_OVERLAP_SCALE = "scale"
Public Const RIBBON_CTL_GRAPH_OVERLAP_SCALEXY = "scalexy"
Public Const RIBBON_CTL_GRAPH_OVERLAP_VORONOI = "voronoi"
Public Const RIBBON_CTL_HELP_ATTRIBUTES = "helpAttributes"
Public Const RIBBON_CTL_HELP_COLORS = "helpColors"
Public Const RIBBON_CTL_HELP_DESIGN_COLORS = "helpDesignColors"
Public Const RIBBON_CTL_HELP_DESIGN_SHAPES = "helpDesignShapes"
Public Const RIBBON_CTL_HELP_SHAPES = "helpShapes"
Public Const RIBBON_CTL_JUSTIFY_LEFT = "justifyLeft"
Public Const RIBBON_CTL_JUSTIFY_RIGHT = "justifyRight"
Public Const RIBBON_CTL_LABEL_JUSTIFICATION = "labelJustification"
Public Const RIBBON_CTL_LABEL_STYLE_SEPARATOR = "labelStyleSeparator"
Public Const RIBBON_CTL_NODE_DISTORTION = "nodeDistortion"
Public Const RIBBON_CTL_NODE_LABELS_BLANK = "blankNodeLabels"
Public Const RIBBON_CTL_NODE_LABELS_DEFAULT = "defaultNodeLabels"
Public Const RIBBON_CTL_NODE_REGULAR = "nodeRegular"
Public Const RIBBON_CTL_NODE_ROTATION = "nodeOrientation"
Public Const RIBBON_CTL_NODE_SHAPE = "nodeShape"
Public Const RIBBON_CTL_NODE_SIDES = "nodeSides"
Public Const RIBBON_CTL_NODE_SKEW = "nodeSkew"
Public Const RIBBON_CTL_POLYGON_SEPARATOR = "polygonSeparator"
Public Const RIBBON_CTL_SAVE_TO_STYLES_WORKSHEET = "saveToStylesWorksheet"

Public Const RIBBON_GRP_ALIGN = "buttonGroupAlign"
Public Const RIBBON_GRP_JUSTIFY = "buttonGroupJustify"
Public Const RIBBON_GRP_BORDERS = "designerGroupBorders"
Public Const RIBBON_GRP_EDGE_HEAD_TAIL = "designerGroupHeadTail"
Public Const RIBBON_GRP_EDGE_ARROW = "designerGroupEdgeArrow"
Public Const RIBBON_GRP_EDGE_ARROW_HEAD = "designerGroupEdgeArrowHead"
Public Const RIBBON_GRP_EDGE_ARROW_TAIL = "designerGroupEdgeArrowTail"
Public Const RIBBON_GRP_EDGE_COLORS = "designerGroupEdgeColors"
Public Const RIBBON_GRP_EDGE_STYLE = "designerGroupEdgeStyle"
Public Const RIBBON_GRP_FILL_COLOR = "designerGroupFillColor"
Public Const RIBBON_GRP_GRADIENT_FILL_COLOR = "designerGroupGradientFillColor"
Public Const RIBBON_GRP_LABELS = "designerGroupLabels"
Public Const RIBBON_GRP_NODE_DIMENSIONS = "designerGroupNodeDimensions"
Public Const RIBBON_GRP_NODE_IMAGE = "designerGroupNodeImage"
Public Const RIBBON_GRP_NODE_SHAPE = "designerGroupNodeShape"
Public Const RIBBON_GRP_NODE_POLYGON = "designerGroupPolygon"

Public Const RIBBON_TAB_GRAPHVIZ = "graphvizTab"
Public Const RIBBON_TAB_STYLE_DESIGNER = "styleDesignerTab"
Public Const RIBBON_TAB_SOURCE = "sourceTab"
Public Const RIBBON_TAB_EXTENSIONS = "ExtTab"
Public Const RIBBON_TAB_SQL = "sqlTab"

' Status Message constants
Public Const STATUS_SKIPPED As String = "SKIPPED"
Public Const STATUS_SUCCESS As String = "SUCCESS"
Public Const STATUS_FAILURE As String = "FAILURE"

Attribute VB_Name = "modCreateGraph"
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Relationship Visualizer.Sheets.Data")
Option Explicit

Public Sub AutoDraw()
    If SettingsSheet.Range(SETTINGS_IMAGE_WORKSHEET).value = WORKSHEET_DATA And _
        UCase$(SettingsSheet.Range(SETTINGS_RUN_MODE).value) = UCase$(TOGGLE_AUTO) Then
        OptimizeCode_Begin
        CreateGraphWorksheet
        OptimizeCode_End
    End If
End Sub

Public Sub ClearWorksheetGraphs()
    Dim dataSheetName As String
    Dim targetCell As String
      
    ' Delete pictures from 'data' worksheet
    dataSheetName = GetDataWorksheetName()           ' Name of the worksheet containing the data to graph
    targetCell = SettingsSheet.Range(SETTINGS_DATA_COL_GRAPH) & SettingsSheet.Range(SETTINGS_DATA_ROW_FIRST)
    DeletePictures dataSheetName, targetCell
            
    ' Delete pictures from the 'graph' worksheet
    DeletePictures WORKSHEET_GRAPH, "B2"
End Sub

Public Sub ClearErrors()

    ' Data worksheet variables
    Dim data As DataWorksheet
    data = GetSettingsForDataWorksheet(GetDataWorksheetName())
    
    ' Iterate through the rows
    Dim row As Long
    For row = data.firstRow To data.lastRow
        If GetCell(data.worksheetName, row, data.flagColumn) = FLAG_ERROR Then
            ClearCell data.worksheetName, row, data.flagColumn
            ClearCell data.worksheetName, row, data.errorMessageColumn
        End If
    Next row

End Sub

Public Sub CreateGraphWorksheet()

    ' Clear the status bar
    ClearStatusBar

    ' Read in the runtime settings
    Dim ini As Settings
    ini = GetSettings(GetDataWorksheetName())

    If Not WorksheetExists(ini.data.worksheetName) Then
        MsgBox "Unable to find a worksheet with data to graph"
        Exit Sub
    End If

    ' Remove any existing graph image from the target worksheet
    Dim displayDataSheetName As String
    Dim targetCell As String

    If ini.graph.imageWorksheet = "data" Then
        displayDataSheetName = ini.data.worksheetName
        targetCell = ini.data.graphDisplayColumnAsAlpha & ini.data.firstRow
    Else
        displayDataSheetName = WORKSHEET_GRAPH
        targetCell = "B2"
    End If
            
    ActiveWorkbook.Sheets(displayDataSheetName).Activate
    DeletePictures displayDataSheetName, targetCell

    ' Determine output directory, and build file names
    Dim outputDirectory As String
    outputDirectory = Environ$("temp")

    Dim filenameBase As String
    Dim graphvizFile As String
    Dim diagramFile As String

    ' Get the file name, minus the file extension
    filenameBase = outputDirectory & "\" & "RelationshipVisualizer"

    ' Add the file extensions
    graphvizFile = filenameBase & ".gv"
    diagramFile = filenameBase & "." & ini.graph.imageTypeWorksheet

    ' Remove any old files by the same name
    DeleteFile (graphvizFile)
    DeleteFile (diagramFile)

    ' Create the '.gv' Graphviz source code file from the relationships in the
    ' data worksheet
    If Not GenerateGraphFile(ini, graphvizFile, ini.styles.selectedViewColumn) Then
        ' Report errors to the user
        ShowColumn ini.data.worksheetName, ini.data.errorMessageColumn, True
        Exit Sub
    End If
    
    ' Pull the source code in to enable 'View Source' capapbility
    DisplayFileOnSourceWorksheet graphvizFile
    
    ' Hide the messages column
    ShowColumn ini.data.worksheetName, ini.data.errorMessageColumn, False

    ' Convert the Graphviz source code into a diagram
    Dim ret As Long
    ret = CreateGraphDiagram(graphvizFile, diagramFile, _
                             ini.graph.imageTypeWorksheet, ini.graph.engine, _
                             ini.commandLine.parameters, CLng(ini.graph.maxSeconds) * 1000)
    ' Show the graph image
    If ret = ShellAndWaitResult.success Then
        If FileExists(diagramFile) Then
            Dim shapeObject As Shape
            Set shapeObject = InsertPicture(diagramFile, ActiveSheet.Range(targetCell), False, True)
            If ini.graph.pictureName <> vbNullString Then
                ActiveSheet.Pictures(ActiveSheet.Pictures.count).Name = ini.graph.pictureName
            End If
            Set shapeObject = Nothing
        Else
            ShowColumn ini.data.worksheetName, ini.data.errorMessageColumn, True
            MsgBox "No graph was created. Check the data for errors.", vbOKOnly
        End If
    ElseIf ret < 0 Then                     ' Graphviz is not installed
        AlertGraphvizNotFound (ini.graph.engine)
    Else                                    ' Report errors to the user
        ShellAndWaitMessage ret
    End If

    ' Delete the temporary files
    DeleteFile (graphvizFile)
    DeleteFile (diagramFile)
    
End Sub

Public Sub CreateGraphFile(ByVal firstViewColumn As Long, ByVal lastViewColumn As Long)
    Dim viewColumn As Long
    
    Dim filenameBase As String
    Dim graphvizFile As String
    Dim ret As Long
    Dim diagramFile As String
    
    ' Clear the status bar
    ClearStatusBar
    
    ' Read in the runtime settings
    Dim ini As Settings
    ini = GetSettings(GetDataWorksheetName())

    If Not WorksheetExists(ini.data.worksheetName) Then
        MsgBox "Unable to find a worksheet with data to graph"
        Exit Sub
    End If

    ' Determine output directory, and build file names
    If ini.output.directory = vbNullString Then
        MsgBox "You must specify an Output Directory on the 'settings' worksheet to use the 'Graph to File' feature"
        SettingsSheet.Activate
        ActiveSheet.Range(SETTINGS_OUTPUT_DIRECTORY).Activate
        Exit Sub
    End If

    ' Hide the messages column
    ShowColumn ini.data.worksheetName, ini.data.errorMessageColumn, False

    For viewColumn = firstViewColumn To lastViewColumn
        ' Get the file name, minus the file extension
        filenameBase = GetFilenameBase(ini, viewColumn)

        ' Compose the filename
        If FileLocationProvided(ini) Then
            filenameBase = GetFilenameBase(ini, viewColumn)
        Else
            Exit Sub
        End If

        ' Create the filenames
        graphvizFile = filenameBase & ".gv"  ' Input (Graphviz) source code filename
        diagramFile = filenameBase & "." & ini.graph.imageTypeFile ' Output (diagram) filename

        ' Create Graphviz graph source code
        If Not GenerateGraphFile(ini, graphvizFile, viewColumn) Then
            Exit Sub
        End If
        
        ' We are running in a loop, so only show the source code for the last graph generated
        If viewColumn = lastViewColumn Then
            ' Pull the source code in to enable 'View Source' capapbility
            DisplayFileOnSourceWorksheet graphvizFile
        End If

        ' Convert source code into a graph diagram
        ret = CreateGraphDiagram(graphvizFile, diagramFile, ini.graph.imageTypeFile, _
                                 ini.graph.engine, ini.commandLine.parameters, CLng(ini.graph.maxSeconds) * 1000)
        
        If ret < 0 Then                                 ' Graphviz is not installed
            AlertGraphvizNotFound (ini.graph.engine)
        ElseIf ret <> ShellAndWaitResult.success Then   ' Inform user of failure
            ShellAndWaitMessage ret
        End If
        
        ' If the diagram file is not there, then Graphviz failed
        If FileExists(diagramFile) Then
            UpdateStatusBarForNSeconds "Graph filename is: " & diagramFile, 10
        Else
            MsgBox "No graph was created. Check the data for errors.", vbOKOnly
        End If

        ' Delete the command file if disposition is 'delete'
        If ini.graph.fileDisposition = "delete" Then
            DeleteFile graphvizFile
        End If
    Next viewColumn

End Sub

Public Sub CreateGraphSource()

    ' Read in the runtime settings
    Dim ini As Settings
    ini = GetSettings(GetDataWorksheetName())

    If Not WorksheetExists(ini.data.worksheetName) Then
        MsgBox "Unable to find a worksheet with data to graph"
        Exit Sub
    End If

    ' Determine output directory, and build file names
    Dim outputDirectory As String
    outputDirectory = Environ$("temp")

    Dim graphvizFile As String
    graphvizFile = outputDirectory & "\" & "RelationshipVisualizer.gv"

    ' Remove any old files by the same name
    DeleteFile graphvizFile

    ' Create the '.gv' Graphviz source code file from the relationships in the
    ' data worksheet
    If Not GenerateGraphFile(ini, graphvizFile, ini.styles.selectedViewColumn) Then
        Exit Sub
    End If

    ' Pull the source code in to enable 'View Source' capapbility
    DisplayFileOnSourceWorksheet graphvizFile
    
    ' Hide the messages column
    ShowColumn ini.data.worksheetName, ini.data.errorMessageColumn, False

    ' Delete the temporary files
    DeleteFile (graphvizFile)
    
End Sub

Public Function FileLocationProvided(ByRef ini As Settings) As Boolean
    FileLocationProvided = True
    
    ' Validate that the output directory exists
    If Not DirectoryExists(ini.output.directory) Then
        MsgBox "Output directory specified (" & ini.output.directory & ") does not exist. You must create this directory manually.", vbCritical
        FileLocationProvided = False
    End If

    ' Get the base value of the file name
    If ini.output.fileNamePrefix = vbNullString Then
        MsgBox "You must specify the 'File prefix' on the 'Graphviz' ribbon.", vbCritical
        FileLocationProvided = False
    End If

End Function

Public Function GetFilenameBase(ByRef ini As Settings, ByVal showStyleColumn As Long) As String

    GetFilenameBase = vbNullString
    
    Dim fileBase As String

    ' Build up the file name from the user-specified prefix
    fileBase = ini.output.fileNamePrefix
    
    ' Include Timestamp if desired
    If ini.output.appendTimeStamp Then
        If InStr(fileBase, "%D") Or InStr(fileBase, "%T") Then
            ' Substitute date for %D
            If InStr(fileBase, "%D") Then
                fileBase = Replace(fileBase, "%D", ini.output.date)
            End If
            
            ' Substitute time for %D
            If InStr(fileBase, "%T") Then
                fileBase = Replace(fileBase, "%T", ini.output.time)
            End If
        Else
            fileBase = fileBase & " " & ini.output.date & " " & ini.output.time
        End If
    End If

    ' Include the view name
    If InStr(fileBase, "%V") Then
        ' Substitute View name for %V
        fileBase = Replace(fileBase, "%V", StylesSheet.Cells(ini.styles.headingRow, showStyleColumn).value)
    Else
        fileBase = fileBase & " " & StylesSheet.Cells(ini.styles.headingRow, showStyleColumn).value
    End If

    ' Include Graphing Options if desired
    If ini.output.appendOptions Then
        If InStr(fileBase, "%E") Or InStr(fileBase, "%S") Then
            ' Substitute Graph engine for %E
            If InStr(fileBase, "%E") Then
                fileBase = Replace(fileBase, "%E", ini.graph.engine)
            End If
        
            ' Substitute Splines engine for %S
            If InStr(fileBase, "%S") Then
                fileBase = Replace(fileBase, "%S", ini.graph.splines)
            End If
        Else
            fileBase = fileBase & " [" & ini.graph.engine & COMMA & ini.graph.splines & "]"
        End If
    End If

    GetFilenameBase = Trim$(ini.output.directory & "\" & fileBase)

End Function

Public Function GetExcelToGraphvizImageDirectory() As String
    GetExcelToGraphvizImageDirectory = Trim$(Environ$("ExcelToGraphvizImages"))
End Function

Public Function GetImagePath() As String

    Dim imagePath As String
    imagePath = SettingsSheet.Range(SETTINGS_IMAGE_PATH)

    ' Include current directory on the image path
    If imagePath = vbNullString Then
        imagePath = Application.ActiveWorkbook.path
    Else
        imagePath = Application.ActiveWorkbook.path & SEMICOLON & imagePath
    End If

    ' Append the directory associated with the environment variable
    ' to the image path, if a path has been specified
    Dim envImagePath As String
    envImagePath = GetExcelToGraphvizImageDirectory()
    If envImagePath <> vbNullString Then
        imagePath = imagePath & SEMICOLON & envImagePath
    End If

    GetImagePath = imagePath
    
End Function

Private Function DetermineStyleName(ByRef ini As Settings, ByVal row As Long) As String

    Dim styleName As String
    styleName = vbNullString
    
    Dim dataItem As String
    dataItem = GetCell(ini.data.worksheetName, row, ini.data.itemColumn)

    If dataItem <> vbNullString Then
        If EndsWith(dataItem, "{") Then
            styleName = "subgraph-open"
        
        ElseIf dataItem = "}" Then
            styleName = "subgraph-close"
        
        ElseIf dataItem = ">" Then
            styleName = "native"
        
        Else
            Dim dataIsRelatedtoItem As String
            dataIsRelatedtoItem = GetCell(ini.data.worksheetName, row, ini.data.isRelatedToItemColumn)
            
            If dataIsRelatedtoItem = vbNullString Then
                If dataItem = KEYWORD_NODE Or dataItem = KEYWORD_EDGE Or dataItem = KEYWORD_GRAPH Then
                    styleName = "keyword"
                Else
                    styleName = "node"
                End If
            Else
                styleName = "edge"
            End If
        End If
    End If

    DetermineStyleName = styleName
    
End Function

Private Function RemovePort(ByVal nodeId As String) As String
    
    ' Strip off the port (if specified)
    If InStr(nodeId, ":") > 0 Then
        RemovePort = GetStringTokenAtPosition(nodeId, ":", 1)
    Else
        RemovePort = nodeId
    End If

End Function

Private Function GenerateGraphFile(ByRef ini As Settings, _
                                  ByVal graphvizFilename As String, _
                                  ByVal showStyleColumn As Long) As Boolean

    GenerateGraphFile = True

    ' Dictionaries to determine what data is referenced
    Dim nodeIds As Scripting.dictionary
    Set nodeIds = New Scripting.dictionary
    
    Dim edgeIds As Scripting.dictionary
    Set edgeIds = New Scripting.dictionary
    
    Dim nodeIdsInRelationships As Scripting.dictionary
    Set nodeIdsInRelationships = New Scripting.dictionary

    ' Cache the style definitions in the 'styles' worksheet
    Dim styles As Scripting.dictionary
    Set styles = CacheEnabledStyles(ini, showStyleColumn)
    
    ' Remove any error messages from a previous run
    Dim row As Long
    For row = ini.data.firstRow To ini.data.lastRow
        If GetCell(ini.data.worksheetName, row, ini.data.flagColumn) = FLAG_ERROR Then
            ClearCell ini.data.worksheetName, row, ini.data.flagColumn
            ClearCell ini.data.worksheetName, row, ini.data.errorMessageColumn
        End If
    Next row

    ' Inspect the data if we are to filter out orphan types
    If Not ini.graph.includeOrphanNodes Or Not ini.graph.includeOrphanEdges Then
        ' Iterate through the rows to determine what nodes and edges have valid
        ' style definitions, and collect this information in lists.
        ConfirmItemStyleIsValid ini, styles, nodeIds, edgeIds
        
        ' Determine if both the tail and head of the included relationships refer
        ' to nodes which have been included, and have style definitions
        DetermineWhatGraphShouldInclude ini, styles, nodeIds, nodeIdsInRelationships
    End If

    ' Generate the dot language Graphviz file
    Dim errorCount As Long
    errorCount = ValidateData(ini, styles)
                                
    If errorCount = 0 Then
        ' Generate the dot language Graphviz file
        GenerateGraphFile = WriteGraphvizSource(ini, graphvizFilename, styles, nodeIds, nodeIdsInRelationships)
    Else
        ' The file cannot be generated because there are errors in the data
        GenerateGraphFile = False
    End If
    
    ' Clean up so we don't have a memory leak
    Set styles = Nothing
    Set nodeIds = Nothing
    Set edgeIds = Nothing
    Set nodeIdsInRelationships = Nothing
    
End Function

Private Sub ConfirmItemStyleIsValid(ByRef ini As Settings, _
                                   ByVal styles As Scripting.dictionary, _
                                   ByVal nodeIds As Scripting.dictionary, _
                                   ByVal edgeIds As Scripting.dictionary)
    Dim row As Long
    Dim data As dataRow
    
    Dim nodeId As String
    Dim itemIdArray() As String
    
    Dim arrayIndex As Long
    
    For row = ini.data.firstRow To ini.data.lastRow
        If GetCell(ini.data.worksheetName, row, ini.data.flagColumn) <> FLAG_COMMENT Then ' line is not commented out
            data.styleName = GetCell(ini.data.worksheetName, row, ini.data.styleNameColumn)

            ' Try to determine the style if not supplied
            If data.styleName = vbNullString Then
                data.styleName = DetermineStyleName(ini, row)
            End If

            ' Get the style names in a consistent case
            data.styleName = UCase$(data.styleName)
            
            If data.styleName <> vbNullString Then ' a style was specified
                If styles.Exists(data.styleName) Then ' show this in the diagram

                    ' We want data of this style in the output file
                    data.item = GetCell(ini.data.worksheetName, row, ini.data.itemColumn)
                    data.relatedItem = GetCell(ini.data.worksheetName, row, ini.data.isRelatedToItemColumn)
                        
                    ' What type of row is it?
                    data.styleType = styles.item(data.styleName).styleType

                    If data.styleType = TYPE_NODE Then

                        If data.item <> vbNullString And UCase$(data.item) <> KEYWORD_NODE And data.relatedItem = vbNullString Then
                        
                            ' There are potentially multiple item IDs, so parse them from the data.item string
                            itemIdArray = Split(data.item, COMMA)
                            For arrayIndex = LBound(itemIdArray) To UBound(itemIdArray)
                                nodeId = RemovePort(itemIdArray(arrayIndex))
                                If Not nodeIds.Exists(nodeId) Then
                                    nodeIds.Add nodeId, True
                                End If
                            Next
                        End If

                    ElseIf data.styleType = TYPE_EDGE Then

                        If data.item <> vbNullString And UCase$(data.item) <> KEYWORD_EDGE And data.relatedItem <> vbNullString Then
                            ' There are potentially multiple item IDs, so parse them from the data.item string
                            itemIdArray = Split(data.item, COMMA)
                            For arrayIndex = LBound(itemIdArray) To UBound(itemIdArray)
                                nodeId = RemovePort(itemIdArray(arrayIndex))
                                If Not edgeIds.Exists(nodeId) Then
                                    edgeIds.Add nodeId, True
                                End If
                            Next
                            
                            ' There are potentially multiple related item IDs, so parse them from the data.relatedItem string
                            itemIdArray = Split(data.relatedItem, COMMA)
                            For arrayIndex = LBound(itemIdArray) To UBound(itemIdArray)
                                nodeId = RemovePort(itemIdArray(arrayIndex))

                                If Not edgeIds.Exists(nodeId) Then
                                    edgeIds.Add nodeId, True
                                End If
                            Next
                        End If                   ' if tail and head are non-blank
                    End If                       ' if NODE elseif EDGE
                End If                           ' style is to be included in output diagram
            End If                               ' style was specified
        End If                                   ' not a comment line
    Next row

End Sub

Private Sub DetermineWhatGraphShouldInclude(ByRef ini As Settings, _
                                           ByVal styles As Scripting.dictionary, _
                                           ByVal nodeIds As Scripting.dictionary, _
                                           ByVal nodeIdsInRelationships As Scripting.dictionary)
    Dim data As dataRow

    Dim itemID As String
    Dim relatedItemId As String
    
    Dim items() As String
    Dim itemIndex As Long
    
    Dim relatedItems() As String
    Dim relatedItemIndex As Long
    
    Dim row As Long
    For row = ini.data.firstRow To ini.data.lastRow
        If GetCell(ini.data.worksheetName, row, ini.data.flagColumn) <> FLAG_COMMENT Then ' row is not a comment
            ' Get the style of the item
            data.styleName = GetCell(ini.data.worksheetName, row, ini.data.styleNameColumn)

            ' Try to determine the style if not supplied
            If data.styleName = vbNullString Then
                data.styleName = DetermineStyleName(ini, row)
            End If

            ' Get the style names in a consistent case
            data.styleName = UCase$(data.styleName)
            
            If data.styleName <> vbNullString Then ' this is not a blank line
                If styles.Exists(data.styleName) Then ' this style should be shown in diagram

                    ' We want data of this style in the output file
                    data.item = GetCell(ini.data.worksheetName, row, ini.data.itemColumn)
                    data.relatedItem = GetCell(ini.data.worksheetName, row, ini.data.isRelatedToItemColumn)

                    If styles.item(data.styleName).styleType = TYPE_EDGE Then ' this line is a relationship

                        If data.item <> vbNullString And UCase$(data.item) <> KEYWORD_EDGE And data.relatedItem <> vbNullString Then ' a tail and head are present

                            items = Split(data.item, COMMA)
                            relatedItems = Split(data.relatedItem, COMMA)
                            
                            For itemIndex = LBound(items) To UBound(items)
                                For relatedItemIndex = LBound(relatedItems) To UBound(relatedItems)
                                    ' If both the tail and the head in the relationship refer
                                    ' to included nodes having style definitions, track the nodes
                                    ' as "Is Used" so that we later determine island nodes to exclude
                                    ' from the graph.
                                
                                    itemID = RemovePort(items(itemIndex))
                                    relatedItemId = RemovePort(relatedItems(relatedItemIndex))

                                    If nodeIds.Exists(itemID) And nodeIds.Exists(relatedItemId) Then
                                        If Not nodeIdsInRelationships.Exists(itemID) Then
                                            nodeIdsInRelationships.Add itemID, True
                                        End If
                                
                                        If Not nodeIdsInRelationships.Exists(relatedItemId) Then
                                            nodeIdsInRelationships.Add relatedItemId, True
                                        End If
                                    End If       ' tail and head relate to included nodes
                                Next
                            Next
                        End If                   ' tail and head are non-blank
                    End If                       ' data.styleName = EDGE
                End If                           ' show item = YES
            End If                               ' not a blank line
        End If                                   ' not commented out
    Next row

End Sub

Private Function ValidateData(ByRef ini As Settings, ByVal styles As Scripting.dictionary) As Long

    Dim data As dataRow
    
    Dim row As Long
    Dim openSubgraphs As Long
    Dim errCnt As Long

    ' Initializations
    openSubgraphs = 0
    errCnt = 0
    
    ' Iterate through the rows of data
    For row = ini.data.firstRow To ini.data.lastRow

        data = GetDataRow(ini, ini.data.worksheetName, row)

        If data.comment <> FLAG_COMMENT Then   ' Don't process the row if it has been commented out
            ' Try to determine the style if not supplied
            If data.styleName = vbNullString Then
                data.styleName = DetermineStyleName(ini, row)
            End If

            ' Get the style names in a consistent case
            data.styleName = UCase$(data.styleName)
            
            ' See if the row has data
            If data.styleName <> vbNullString Then
                ' Determine if this item should be shown in the diagram
                If styles.Exists(data.styleName) Then ' We want data of this style in the output file
                    
                    ' Look up processing attributes from cached stylesheet information
                    data.styleType = UCase$(styles.item(data.styleName).styleType)
                    
                    ' Validate the rows according to object type
                    If data.styleType = TYPE_NODE Then
                        If data.item = vbNullString Then
                            errCnt = LogError(ini, row, "This row defines a node, but no value is present in the 'Item' column", errCnt)
                        
                        ElseIf data.relatedItem <> vbNullString Then
                            errCnt = LogError(ini, row, "This row is 'node' style type but a value in the 'Is Related To Item' column implies that it is an 'edge' style type", errCnt)
                        End If
                       
                    ElseIf data.styleType = TYPE_EDGE Then
                        If UCase$(data.item) = KEYWORD_EDGE Then
                            ' No error
                        ElseIf data.item = vbNullString Then
                            errCnt = LogError(ini, row, "The format type for this row specifies an edge, but no value was specified in the 'Item' column", errCnt)
                        
                        ElseIf data.relatedItem = vbNullString Then
                            errCnt = LogError(ini, row, "The format type for this row specifies an edge, but no value was specified in the 'Is Related To Item' column", errCnt)
                        End If
                        
                    ElseIf data.styleType = TYPE_SUBGRAPH_OPEN Then
                        openSubgraphs = openSubgraphs + 1
                                                
                    ElseIf data.styleType = TYPE_SUBGRAPH_CLOSE Then
                        openSubgraphs = openSubgraphs - 1
    
                        If openSubgraphs < 0 Then
                            errCnt = LogError(ini, row, "Unbalanced braces. More close braces '}' than open braces '{' encountered.", errCnt)
                        End If
                    End If
                End If
            End If
        End If
    Next row

    ' Alert the user if it appears that the subgraphs open and close braces are out of balance
    If openSubgraphs > 0 Then
        errCnt = LogError(ini, row, "Unbalanced braces. " & openSubgraphs & " more open braces '{' than close braces '{' encountered.", errCnt)
    End If

    ' Return count of errors encountered
    ValidateData = errCnt
    
End Function

Private Sub ProcessGraphOptions(ByRef ini As Settings, ByVal fileNum As Long, ByVal indent As Long)

    Dim spaces As String
    
    ' Create the indentation string
    spaces = Space(indent * ini.source.indent)
    
    ' Make the background transparent if desired
    If ini.graph.transparentBackground Then
        Print #fileNum, spaces & Trim$(AddNameValue(vbNullString, "bgcolor", "transparent")) & SEMICOLON
    End If
    
    If ini.graph.center Then
        Print #fileNum, spaces & Trim$(AddNameValue(vbNullString, "center", "true")) & SEMICOLON
    End If
    
    ' If the graphing engine is "dot" add in the compound specification
    If UCase$(ini.graph.engine) = "DOT" Then
        If ini.graph.compound Then
            Print #fileNum, spaces & Trim$(AddNameValue(vbNullString, "compound", "true")) & SEMICOLON
        End If
    Else ' overlap keyword is not used by "DOT"
        If ini.graph.overlap <> vbNullString Then
            Print #fileNum, spaces & Trim$(AddNameValue(vbNullString, "overlap", ini.graph.overlap)) & SEMICOLON
        End If
    End If
    
    If ini.graph.concentrate Then
        Print #fileNum, spaces & Trim$(AddNameValue(vbNullString, "concentrate", "true")) & SEMICOLON
    End If
    
    If ini.graph.forceLabels Then
        Print #fileNum, spaces & Trim$(AddNameValue(vbNullString, "forcelabels", "true")) & SEMICOLON
    End If
    
    ' Specify the directory path where images are located
    If ini.graph.imagePath <> vbNullString Then
        Print #fileNum, spaces & Trim$(AddNameValue(vbNullString, "imagepath", ini.graph.imagePath)) & SEMICOLON
    End If

    If ini.graph.newrank Then
        Print #fileNum, spaces & Trim$(AddNameValue(vbNullString, "newrank", "true")) & SEMICOLON
    End If
    
    ' If the graphing engine is "dot" add in the direction specification
    If UCase$(ini.graph.engine) = "DOT" Then
        If Trim$(ini.graph.rankdir) <> vbNullString Then
            Print #fileNum, spaces & Trim$(AddNameValue(vbNullString, "rankdir", ini.graph.rankdir)) & SEMICOLON
        End If
    End If

    If ini.graph.orientation Then
        Print #fileNum, spaces & Trim$(AddNameValue(vbNullString, "rotate", "90")) & SEMICOLON
    End If
    
    If Trim$(ini.graph.outputOrder) <> vbNullString Then
        Print #fileNum, spaces & Trim$(AddNameValue(vbNullString, "orderoutput", ini.graph.outputOrder)) & SEMICOLON
    End If
    
    ' Specify how the edges should be drawn and include as the "spline" parameter
    If Trim$(ini.graph.splines) <> vbNullString Then
        Print #fileNum, spaces & Trim$(AddNameValue(vbNullString, "splines", ini.graph.splines)) & SEMICOLON
    End If
    
    ' Graph options from the settings worksheet come last to give the ability to override anything above
    Print #fileNum, spaces & Trim$(ini.graph.options)

End Sub

Private Function isKeyword(ByVal item As String) As Boolean
    isKeyword = (UCase$(item) = KEYWORD_NODE) Or (UCase$(item) = KEYWORD_EDGE) Or (UCase$(item) = KEYWORD_GRAPH)
End Function

Private Function WriteGraphvizSource(ByRef ini As Settings, _
                                    ByVal graphvizFile As String, _
                                    ByVal styles As Scripting.dictionary, _
                                    ByVal nodeIds As Scripting.dictionary, _
                                    ByVal relationshipIds As Scripting.dictionary) As Boolean
    WriteGraphvizSource = True
    
    ' Subgraph cluster counter
    Dim clusterCnt As Long
    clusterCnt = 0
    
    ' Error count
    Dim errCnt As Long
    errCnt = 0
    
    ' Trap any file system I/O-related errors
    On Error GoTo EndMacro:
    
    ' Output file handle
    Dim fileNum As Long
    fileNum = FreeFile

    ' Open file for output. Any existing file by the same name will be overwritten
    Open graphvizFile For Output Access Write As #fileNum
    
    ' Set the  Graphviz 'strict' directive
    Dim graphStrict As String
    If ini.graph.addStrict Then
        graphStrict = "strict"
    Else
        graphStrict = vbNullString
    End If
    
    ' Create the first lines of the dot graph program
    Print #fileNum, Trim$(graphStrict & " " & ini.graph.command & " " & AddQuotes("main"))
    Print #fileNum, "{"
    
    ' Establish source indentation
    Dim indent As Long
    indent = IncreaseIndent(0)
    
    ' Write out the graph directives before processing the rows of data
    ProcessGraphOptions ini, fileNum, indent
    
    ' Iterate through the rows of data
    Dim row As Long
    Dim data As dataRow
    For row = ini.data.firstRow To ini.data.lastRow

        data = GetDataRow(ini, ini.data.worksheetName, row)

        ' Don't process the row if it has been commented out
        If data.comment <> FLAG_COMMENT Then
        
            ' Try to determine the style if not supplied
            If data.styleName = vbNullString Then
                data.styleName = DetermineStyleName(ini, row)
            End If

            ' Treat all style names as uppercase for consistency
            data.styleName = UCase$(data.styleName)
            
            ' See if the row has data
            If data.styleName = vbNullString Then
                ' No style was specified, assume the row is blank and skip it.
            Else
                ' Determine if this item should be shown in the diagram
                Dim showStyle As Boolean
                showStyle = styles.Exists(data.styleName)
                
                Dim boolKeyword As Boolean
                boolKeyword = isKeyword(data.item)
                
                If showStyle Or boolKeyword Then ' We want data of this style in the output file
                    
                    ' Look up processing attributes from cached stylesheet information
                    data.styleType = styles.item(data.styleName).styleType
                    
                    If ini.graph.includeStyleFormat And showStyle Then
                        data.format = styles.item(data.styleName).styleFormat
                    Else
                        data.format = vbNullString
                    End If
                    
                    ' Append information to the label if debugging is enabled
                    If ini.graph.debug Then
                        data.label = FormatDebugLabel(row, data)
                        data.xLabel = FormatDebugXLabel(row, data)
                    End If

                    ' Process the rows according to object type
                    If boolKeyword Then
                        ProcessKeyword ini, data, fileNum, indent

                    ElseIf data.styleType = TYPE_NODE Then
                        ProcessNode ini, data, fileNum, indent, relationshipIds

                    ElseIf data.styleType = TYPE_EDGE Then
                        ProcessEdge ini, data, fileNum, indent, nodeIds

                    ElseIf data.styleType = TYPE_SUBGRAPH_OPEN Then
                        ProcessSubgraphOpen ini, data, fileNum, indent, clusterCnt
                        indent = IncreaseIndent(indent)
                        
                    ElseIf data.styleType = TYPE_SUBGRAPH_CLOSE Then
                        indent = DecreaseIndent(indent)
                        ProcessSubgraphClose ini, data, fileNum, indent

                    ElseIf data.styleType = TYPE_KEYWORD Then
                        ProcessKeyword ini, data, fileNum, indent

                    ElseIf data.styleType = TYPE_NATIVE Then
                        ProcessNative ini, data, fileNum, indent

                    Else
                        ' Not recognized, ignore it
                    End If
                End If
            End If
        End If
    Next row

    ' Write the last dot statement to terminate the dot source file
    indent = DecreaseIndent(indent)
    Print #fileNum, Space(indent * ini.source.indent) & "}"

EndMacro:
    If Err.Number > 0 Then
        MsgBox "WriteGraphvizSource() - " & Err.Number & " " & Err.Description
        Err.Clear
        WriteGraphvizSource = False
    End If
    
    On Error GoTo 0
    Close #fileNum
    
End Function

Private Function IncreaseIndent(ByVal indent As Long) As Long
    IncreaseIndent = indent + 1
End Function

Private Function DecreaseIndent(ByVal indent As Long) As Long
    DecreaseIndent = indent - 1
    If DecreaseIndent < 0 Then
        DecreaseIndent = 0
    End If
End Function

Private Function GetDataRow(ByRef ini As Settings, ByVal worksheetName As String, ByVal row As Long) As dataRow

    GetDataRow.comment = GetCell(worksheetName, row, ini.data.flagColumn)
    GetDataRow.item = GetCell(worksheetName, row, ini.data.itemColumn)
    GetDataRow.label = GetCell(worksheetName, row, ini.data.labelColumn)
    GetDataRow.xLabel = GetCell(worksheetName, row, ini.data.xLabelColumn)
    GetDataRow.tailLabel = GetCell(worksheetName, row, ini.data.tailLabelColumn)
    GetDataRow.headLabel = GetCell(worksheetName, row, ini.data.headLabelColumn)
    GetDataRow.relatedItem = GetCell(worksheetName, row, ini.data.isRelatedToItemColumn)
    GetDataRow.styleName = GetCell(worksheetName, row, ini.data.styleNameColumn)
    GetDataRow.extraAttrs = GetCell(worksheetName, row, ini.data.extraAttributesColumn)

End Function

Private Function CacheEnabledStyles(ByRef ini As Settings, ByVal showStyleColumn As Long) As Scripting.dictionary

    ' Dictionary to hold the key and associated values
    Dim dictionary As Object
    Set dictionary = CreateObject("Scripting.Dictionary")
    
    ' Loop through the specified range
    Dim row As Long
    Dim styleName As String
    
    For row = ini.styles.firstRow To ini.styles.lastRow
        If StylesSheet.Cells(row, ini.styles.flagColumn).value = FLAG_COMMENT Then
            ' Comment row, ignore it
        ElseIf UCase$(StylesSheet.Cells(row, showStyleColumn).value) = "YES" Then
            ' Retrieve the style name
            styleName = GetCellUCase(WORKSHEET_STYLES, row, ini.styles.nameColumn)

            If styleName <> vbNullString Then    ' a style name is present
                If Not dictionary.Exists(styleName) Then ' ignore duplicate style names
                    Set dictionary.item(styleName) = GetStyle(StylesSheet.Cells(row, ini.styles.typeColumn), _
                                                              StylesSheet.Cells(row, ini.styles.formatColumn))
                End If
            End If
        End If
    Next row

    Set CacheEnabledStyles = dictionary
    
End Function

Public Function GetStyle(ByVal styleType As String, ByVal styleFormat As String) As style

    Dim value As style
    Set value = New style
        
    value.styleType = UCase$(styleType)
    value.styleFormat = styleFormat
    
    Set GetStyle = value

End Function

Private Function LogError(ByRef ini As Settings, ByVal row As Long, ByVal errorMessage As String, ByVal errCnt As Long) As Long

    SetCell ini.data.worksheetName, row, ini.data.flagColumn, FLAG_ERROR
    SetCell ini.data.worksheetName, row, ini.data.errorMessageColumn, errorMessage

    LogError = errCnt + 1
    
End Function

Private Function FormatId(ByVal nodeId As String) As String

    Dim formattedId As String
    
    ' Build the id, taking ports into consideration
    If InStr(nodeId, ":") > 0 Then               ' nodeId specifies a port. Each side of the colon need to be wrapped in quotes
        formattedId = AddQuotes(GetStringTokenAtPosition(nodeId, ":", 1)) & ":" & AddQuotes(GetStringTokenAtPosition(nodeId, ":", 2))
    Else                                         ' no port was specified
        formattedId = AddQuotes(nodeId)
    End If

    FormatId = formattedId
    
End Function

Private Function FormatDebugLabel(ByVal row As Long, ByRef data As dataRow) As String
                        
    Dim debugStr As String

    FormatDebugLabel = data.label
    
    If Not IsLabelHTMLLike(data.label) Then
        If data.styleType = TYPE_EDGE Then
            debugStr = "(Row: " & row & " " & FormatId(data.item) & "->" & FormatId(data.relatedItem) & ")"
                        
            If data.label = vbNullString Then
                FormatDebugLabel = debugStr
            Else
                FormatDebugLabel = data.label & NEWLINE & debugStr
            End If
                        
        ElseIf data.styleType = TYPE_NODE Then
            debugStr = "(Row: " & row & " " & AddQuotes(data.item) & ")"
                            
            If data.label = vbNullString Then
                FormatDebugLabel = debugStr
            Else
                FormatDebugLabel = data.label & NEWLINE & debugStr
            End If
                        
        ElseIf data.styleType = TYPE_SUBGRAPH_OPEN Then
            debugStr = "(Row: " & row & ")"
                            
            If data.label = vbNullString Then
                FormatDebugLabel = debugStr
            Else
                FormatDebugLabel = data.label & NEWLINE & debugStr
            End If
        End If
    End If
    
End Function

Private Function FormatDebugXLabel(ByVal row As Long, ByRef data As dataRow) As String
                        
    Dim debugStr As String

    FormatDebugXLabel = data.xLabel

    If Not IsLabelHTMLLike(data.label) Then
        If data.styleType = TYPE_EDGE Then
            debugStr = "(Row: " & row & " " & AddQuotes(data.item) & "->" & AddQuotes(data.relatedItem) & ")"
            
            If data.xLabel <> vbNullString Then
                FormatDebugXLabel = data.xLabel & NEWLINE & debugStr
            End If
            
        ElseIf data.styleType = TYPE_NODE Then
            debugStr = "(Row: " & row & " " & AddQuotes(data.item) & ")"
                            
            If data.xLabel <> vbNullString Then
                FormatDebugXLabel = data.xLabel & NEWLINE & debugStr
            End If
        End If
    End If
    
End Function

Private Function FormatEdgeLabels(ByRef ini As Settings, ByRef data As dataRow) As String

    Dim edgeLabel As String
    edgeLabel = vbNullString
    
    If ini.graph.includeEdgeLabels Then
        If data.label = vbNullString Then
            If ini.graph.blankEdgeLabels Then
                ' True, label = edge id
                edgeLabel = " label=" & AddQuotes("\E")
            Else
                ' False = use default Graphviz behavior.
                edgeLabel = vbNullString
            End If
        Else
            edgeLabel = " label=" & FormatLabel(data.label)
        End If
    End If

    If ini.graph.includeEdgeXLabels And data.xLabel <> vbNullString Then
        edgeLabel = edgeLabel & " xlabel=" & FormatLabel(data.xLabel)
    End If
            
    If ini.graph.includeEdgeTailLabels And data.tailLabel <> vbNullString Then
        edgeLabel = edgeLabel & " taillabel=" & FormatLabel(data.tailLabel)
    End If
            
    If ini.graph.includeEdgeHeadLabels And data.headLabel <> vbNullString Then
        edgeLabel = edgeLabel & " headlabel=" & FormatLabel(data.headLabel)
    End If
    
    FormatEdgeLabels = edgeLabel
    
End Function

Private Function FormatNodeLabels(ByRef ini As Settings, ByRef data As dataRow) As String

    Dim nodeLabel As String
   
    If ini.graph.includeNodeLabels Then
        If data.label = vbNullString Then
            If ini.graph.blankNodeLabels Then    ' True = use default Graphviz behavior.
                nodeLabel = vbNullString
            Else                                 ' False, send null value as the label
                nodeLabel = " label=" & FormatLabel(vbNullString)
            End If
        Else
            nodeLabel = " label=" & FormatLabel(data.label)
        End If
    End If

    If ini.graph.includeNodeXLabels And data.xLabel <> vbNullString Then
        nodeLabel = nodeLabel & " xlabel=" & FormatLabel(data.xLabel)
    End If

    FormatNodeLabels = nodeLabel
    
End Function

Private Sub ProcessSubgraphOpen(ByRef ini As Settings, ByRef data As dataRow, ByVal fileNum As Long, ByVal indent As Long, ByRef clusterCnt As Long)

    Dim subgraphName As String
    subgraphName = Trim$(GetStringBetweenDelimiters(data.item, vbNullString, "{"))
                        
    If subgraphName = vbNullString Then          ' No subgraph name supplied
        ' Increment the cluster counter, and use it in the cluster name
        clusterCnt = clusterCnt + 1
        subgraphName = "cluster_" & clusterCnt
    End If

    Dim subgraphDirective As String
    subgraphDirective = Space(indent * ini.source.indent) & "subgraph " & AddQuotes(subgraphName) & " {" & " " & Trim$(data.format)

    ' Inclduing the extra style attributes can be turned on/off in the settings
    If data.extraAttrs <> vbNullString Then
        If ini.graph.includeExtraAttributes Then
            subgraphDirective = subgraphDirective & " " & data.extraAttrs
        End If
    End If

    ' The subgraph can have an optional label. Include it if specified
    If data.label <> vbNullString Then
        subgraphDirective = subgraphDirective & " label=" & FormatLabel(data.label)
    End If
                            
    Print #fileNum, subgraphDirective

End Sub

Private Sub ProcessNode(ByRef ini As Settings, ByRef data As dataRow, ByVal fileNum As Long, ByVal indent As Long, ByVal nodesUsedInRelationships As Scripting.dictionary)
                        
    Dim item As String
    Dim items() As String
    
    Dim arrayIndex As Long
    
    item = data.item
    items = Split(item, COMMA)
    
    For arrayIndex = LBound(items) To UBound(items)
        data.item = Trim$(items(arrayIndex))
                        
        ' Filter out nodes without node relationships
        If Not ini.graph.includeOrphanNodes Then
            If nodesUsedInRelationships.Exists(RemovePort(data.item)) Then
                WriteNode ini, data, fileNum, indent
            End If
        Else
            WriteNode ini, data, fileNum, indent
        End If
    Next

End Sub

Private Sub ProcessEdge(ByRef ini As Settings, ByRef data As dataRow, ByVal fileNum As Long, ByVal indent As Long, ByVal definedNodes As Scripting.dictionary)
                        
    Dim item As String
    Dim relatedItem As String
    Dim items() As String
    Dim relatedItems() As String
    
    Dim itemIndex As Long
    Dim relatedItemIndex As Long
    
    item = data.item
    items = Split(item, COMMA)
    
    relatedItem = data.relatedItem
    relatedItems = Split(relatedItem, COMMA)
    
    For itemIndex = LBound(items) To UBound(items)
        For relatedItemIndex = LBound(relatedItems) To UBound(relatedItems)
            data.item = Trim$(items(itemIndex))
            data.relatedItem = Trim$(relatedItems(relatedItemIndex))
            
            ' Filter out relationships without node definitions
            If Not ini.graph.includeOrphanEdges Then
                If definedNodes.Exists(RemovePort(data.item)) And definedNodes.Exists(RemovePort(data.relatedItem)) Then
                    WriteEdge ini, data, fileNum, indent
                End If
            Else
                WriteEdge ini, data, fileNum, indent
            End If
        Next
    Next

End Sub

Private Sub ProcessSubgraphClose(ByRef ini As Settings, ByRef data As dataRow, ByVal fileNum As Long, ByVal indent As Long)
    Print #fileNum, Space(indent * ini.source.indent) & data.item
End Sub

Private Sub WriteNode(ByRef ini As Settings, ByRef data As dataRow, ByVal fileNum As Long, ByVal indent As Long)

    Dim nodeLabel As String
    Dim styleAttributes As String
    
    Dim nodeId As String
    nodeId = data.item
    
    ' Strip off the port (if specified)
    If InStr(nodeId, ":") > 0 Then
        nodeId = GetStringTokenAtPosition(nodeId, ":", 1)
    End If

    styleAttributes = Trim$(data.format)

    ' Include the extra style attributes if enabled in the settings
    If ini.graph.includeExtraAttributes Then
        styleAttributes = Trim$(styleAttributes & " " & data.extraAttrs)
    End If

    ' If no style has been specified, assume the user wants the shape to be what the
    ' HTML will render. For this situation Graphviz has to be told the shape is "plaintext"
    If (IsLabelHTMLLike(data.label)) And styleAttributes = vbNullString Then
        styleAttributes = "shape=" & AddQuotes("plaintext") & " "
    End If

    ' Collect the label, and xlabel labels into name value pairs
    nodeLabel = FormatNodeLabels(ini, data)
    
    If Trim$(styleAttributes & nodeLabel) = vbNullString Then
        Print #fileNum, Space(indent * ini.source.indent) & AddQuotes(nodeId) & SEMICOLON
    Else
        Print #fileNum, Space(indent * ini.source.indent) & AddQuotes(nodeId) & "[ " & Trim$(styleAttributes & nodeLabel) & " ];"
    End If

End Sub

Private Sub WriteEdge(ByRef ini As Settings, ByRef data As dataRow, ByVal fileNum As Long, ByVal indent As Long)

    Dim styleAttributes As String
    styleAttributes = data.format

    ' Include the extra style attributes if enabled in the settings
    If ini.graph.includeExtraAttributes Then
        styleAttributes = styleAttributes & " " & data.extraAttrs
    End If

    styleAttributes = Trim$(styleAttributes)
    
    ' Collect the label, xlabel, taillabel, and headlabel labels into name value pairs
    Dim edgeLabel As String
    edgeLabel = FormatEdgeLabels(ini, data)

    ' Add the quotes to the id and (optional) port for the item, and the "is related to" item
    Dim tailId As String
    tailId = FormatId(data.item)
    
    Dim headId As String
    headId = FormatId(data.relatedItem)
    
    ' Write out the edge command
    If Trim$(styleAttributes & edgeLabel) = vbNullString Then
        Print #fileNum, Space(indent * ini.source.indent) & tailId & " " & ini.graph.edgeOperator & " " & headId & SEMICOLON
    Else
        Print #fileNum, Space(indent * ini.source.indent) & tailId & " " & ini.graph.edgeOperator & " " & headId & "[ " & Trim$(styleAttributes & edgeLabel) & " ];"
    End If
    
End Sub

Private Sub ProcessNative(ByRef ini As Settings, ByRef data As dataRow, ByVal fileNum As Long, ByVal indent As Long)
    Print #fileNum, Space(indent * ini.source.indent) & data.label
End Sub

Private Sub ProcessKeyword(ByRef ini As Settings, ByRef data As dataRow, ByVal fileNum As Long, ByVal indent As Long)

    Dim styleAttributes As String
    styleAttributes = Trim$(data.format)

    If ini.graph.includeExtraAttributes Then
        styleAttributes = Trim$(styleAttributes & " " & data.extraAttrs)
    End If

    Dim labelValue As String
    If UCase$(data.item) = KEYWORD_NODE Then
        labelValue = FormatNodeLabels(ini, data)
    
    ElseIf UCase$(data.item) = KEYWORD_EDGE Then
        labelValue = FormatEdgeLabels(ini, data)
    
    ElseIf UCase$(data.item) = KEYWORD_GRAPH Then
        If data.label <> vbNullString Then
            labelValue = labelValue & " label=" & FormatLabel(data.label)
        End If
    End If
        
    Print #fileNum, Space(indent * ini.source.indent) & data.item & "[ " & Trim$(styleAttributes & labelValue) & " ];"
    
End Sub

Private Function FormatLabel(ByVal labelValue As String) As String

    If IsLabelHTMLLike(labelValue) Then          ' just return it intact
        FormatLabel = labelValue
    Else
        FormatLabel = AddQuotes(ScrubText(labelValue))
    End If

End Function

Private Function ScrubText(ByVal rawData As String) As String
    If rawData = Chr$(34) & Chr$(34) Then
        ScrubText = vbNullString                 ' "" to blank a label
    Else
        ScrubText = Replace(rawData, Chr$(10), NEWLINE) ' Chr(10) 0x0a LF  Line Feed
        ScrubText = Replace(ScrubText, "\" & Chr$(34), Chr$(34)) ' In case they already escaped the double quote
        ScrubText = Replace(ScrubText, Chr$(34), "\" & Chr$(34)) ' Chr(34)      " Double quotes (or speech marks)
    End If
End Function

Private Function IsLabelHTMLLike(ByVal label As String) As Boolean

    IsLabelHTMLLike = False
    
    ' Remove newline characters to create a single line
    Dim singleLineLabel As String
    singleLineLabel = Replace(label, Chr$(10), vbNullString)

    ' HTML-like labels have to be wrapped in '<' and '>' characters
    ' Use process of elimination instead of 'and' conditions to improve performance
    If StartsWith(singleLineLabel, "<") Then
        If EndsWith(singleLineLabel, ">") Then   ' Label is wrapped in '<' and '>'
        
            ' Interrogate the string between the HTML-like indicators to see if
            ' it is also wrapped in '<' and '>' characters as HTML elements will begin and
            ' end with these characters. This is not a fool-proof determination that
            ' the label text contains valid HTML elements, but it is a fast assessment.
            ' If the HTML is not valid it will show up in the diagram, and the user can
            ' correct their label data.
            
            ' Pluck the label out from between the '<' and '>' characters
            singleLineLabel = Trim$(GetStringBetweenDelimiters(singleLineLabel, "<", ">"))
            If StartsWith(singleLineLabel, "<") Then ' Looks like an HTML open element could be present
                If EndsWith(singleLineLabel, ">") Then ' Looks like an HTML close element could be present.
        
                    If (InStr(singleLineLabel, "</") > 0) Or (InStr(singleLineLabel, "/>") > 0) Then ' At least one HTML close element is present.
                        IsLabelHTMLLike = True   ' label likely contains HTML-like content
                    End If
                End If
            End If
        End If
    End If
    
End Function

Public Function GetDataWorksheetName() As String

    Dim worksheetName As String
    worksheetName = ActiveSheet.Name
    
    ' Worksheets which are not allowed to hold graph data
    If worksheetName = WORKSHEET_DATA _
       Or worksheetName = WORKSHEET_GRAPH _
       Or worksheetName = WORKSHEET_STYLES _
       Or worksheetName = WORKSHEET_STYLE_DESIGNER _
       Or worksheetName = WORKSHEET_SETTINGS _
       Or worksheetName = WORKSHEET_HELP_SHAPES _
       Or worksheetName = WORKSHEET_HELP_COLORS _
       Or worksheetName = WORKSHEET_HELP_ATTRIBUTES _
       Or worksheetName = WORKSHEET_ABOUT _
       Or worksheetName = WORKSHEET_REVISIONS _
       Or worksheetName = WORKSHEET_VLOOKUPS _
       Or worksheetName = WORKSHEET_SOURCE _
       Or worksheetName = WORKSHEET_SQL _
       Or worksheetName = WORKSHEET_LISTS _
    Then
        worksheetName = WORKSHEET_DATA
    Else
        ' Ensure the worksheet has the same layout of the 'data' worksheet by comparing a few of the key headings
        Dim data As DataWorksheet
        data = GetSettingsForDataWorksheet(worksheetName)

        If GetCell(worksheetName, data.headingRow, data.itemColumn) <> GetCell(WORKSHEET_DATA, data.headingRow, data.itemColumn) Then
            worksheetName = WORKSHEET_DATA
        ElseIf GetCell(worksheetName, data.headingRow, data.labelColumn) <> GetCell(WORKSHEET_DATA, data.headingRow, data.labelColumn) Then
            worksheetName = WORKSHEET_DATA
        ElseIf GetCell(worksheetName, data.headingRow, data.isRelatedToItemColumn) <> GetCell(WORKSHEET_DATA, data.headingRow, data.isRelatedToItemColumn) Then
            worksheetName = WORKSHEET_DATA
        End If
    End If
    
    GetDataWorksheetName = worksheetName
End Function











































































Attribute VB_Name = "modDataTypes"
' Copyright (c) 2015-2018 Jeffrey J. Long. All rights reserved

'@Folder("Relationship Visualizer.Bootstrap")
Option Explicit

Public Type stylesWorksheet
    headingRow As Long                           ' "styles" worksheet heading row
    firstRow As Long                             ' First row of style definitions to use
    lastRow As Long                              ' Last row of style definitions to use. If = 0, use all rows

    flagColumn As Long                        ' Column number where comment indicator ('#') is located
    nameColumn As Long                           ' Column number where Style name is located
    formatColumn As Long                         ' Column number where style attributes such as font associated with the style is located
    typeColumn As Long                           ' Column number where Object Type (NODE/EDGE/NATIVE etc) is located
    firstYesNoColumn As Long                     ' Column number where Yes/No switches begin
    selectedViewColumn As Long                   ' Column number where Yes/No switch to include the Style during rendering is kept
End Type

Public Type DataWorksheet
    worksheetName As String                      ' Worksheet containing the data
    
    headingRow As Long                           ' "data" worksheet heading row
    firstRow As Long                             ' First row of data to use
    lastRow As Long                              ' Last row of data to use. If = 0, use all rows

    flagColumn As Long                        ' Column number where comment indicator ('#') is located
    itemColumn As Long                           ' Column number where Item ID is located
    labelColumn As Long                          ' Column number where Label is located
    xLabelColumn As Long                         ' Column number where External Label is located
    tailLabelColumn As Long                      ' Column number where Edge Tail Label is located
    headLabelColumn As Long                      ' Column number where Edge Head Label is located
    isRelatedToItemColumn As Long                ' Column number where related Item ID is located
    styleNameColumn As Long                      ' Column number where Style name is located
    extraAttributesColumn As Long                ' Column number where line item style attributes are located
    errorMessageColumn As Long                   ' Column number to write error messages to
    graphDisplayColumn As Long                   ' Column number where graph can be displayed in the data worksheet
    graphDisplayColumnAsAlpha As String          ' Column letter where graph can be displayed in the data worksheet
End Type

Public Type DataWorksheetHeadings
    flag As String                              ' Comment indicator ('#') column heading
    item As String                               ' Item ID column heading
    label As String                              ' Label column heading
    xLabel As String                             ' External Label column heading
    tailLabel As String                          ' Edge Tail Label column heading
    headLabel As String                          ' Edge Head Label column heading
    isRelatedToItem As String                    ' related Item ID column heading
    styleName As String                          ' Style name column heading
    extraAttributes As String                    ' line item style attributes column heading
    errorMessage As String                       ' error messages column heading
End Type

Public Type sqlWorksheet
    headingRow As Long                           ' "source" worksheet heading row
    firstRow As Long                             ' First row of source data

    flagColumn As Long                        ' Column number where comment indicator ('#') is located
    sqlStatementColumn As Long                   ' Column number where SQL statement is located
    excelFileColumn As Long                      ' Column number where full path to Excel data file is located
    statusColumn As Long                         ' Column number where status messages are located
End Type

Public Type sourceWorksheet
    headingRow As Long                           ' "sql" worksheet heading row
    firstRow As Long                             ' First row of sql data

    lineNumberColumn As Long                     ' Column number where line number is located
    sourceColumn As Long                         ' Column number where Graphviz source code is located
    indent As Long                               ' Number of spaces in a tab indent
End Type

Public Type FileOutput
    directory As String                          ' Where the diagram should be written to
    fileNamePrefix As String                     ' The base portion of the file name
    appendTimeStamp As Boolean                   ' Switch which controls if date and time is to be appended to file name
    appendOptions As Boolean                     ' Switch which controls if the engine and spline settings are appended to the file name
    date As String                               ' Date when the code was run
    time As String                               ' Time when the code was run
End Type

Public Type graphOptions
    engine As String                             ' The Graphviz executable which will draw the graph
    addStrict As Boolean                         ' Designates if the 'strict' keyword should be applied to the parent graph
    graphType As String                          ' Specifies if graph is directed or undirected
    splines As String                            ' The type of splines to draw
    imageTypeFile As String                      ' Type of image to create when "Graph to File" is pressed
    imageTypeWorksheet As String                 ' Type of image to create when "Graph to Worksheet" is pressed
    imageWorksheet As String                     ' Worksheet to display the graph in when "Graph to Worksheet" is pressed
    rankdir As String                            ' For dot engine, controls manner in which shapes are laid out. LR/RL/TB/BT
    includeOrphanNodes As Boolean                ' Switch which allows you to drop nodes without relationships
    includeOrphanEdges As Boolean                ' Switch which allows you to drop relationships without defined nodes
    blankEdgeLabels As Boolean                   ' How to handle blank edge labels. = TRUE -> use Graphviz default behavior
    blankNodeLabels As Boolean                   ' How to handle blank node labels. = TRUE -> use Graphviz default behavior
    includeStyleFormat As Boolean                ' On/off switch to include the "styles" worksheet Format information associated with the style
    includeExtraAttributes As Boolean            ' On/off switch to include the "data" worksheet "Extra Attributes" column with the style
    maxSeconds As Long                           ' Timeout limit for graphing
    transparentBackground As Boolean             ' Designates if the background color of the graph should be transparent
    fileDisposition As String                    ' What to do with the .gv file after graphing (keep/delete)
    imagePath As String                          ' Directory paths where images referenced in styles can be found
    options As String                            ' Additional (optional) Graphviz graph options the user may want
    debug As Boolean                             ' Turn debug tracing on/off
    pictureName As String                        ' Name of the graph image when inserted into a worksheet
    center As Boolean
    compound As Boolean
    concentrate As Boolean
    forceLabels As Boolean
    newrank As Boolean
    orientation As Boolean
    outputOrder As String
    overlap As String
    includeNodeLabels As Boolean                 ' On/off switch for node labels
    includeNodeXLabels As Boolean                ' On/off switch for node xlabels
    includeEdgeLabels As Boolean                 ' On/off switch for edge labels
    includeEdgeXLabels As Boolean                ' On/off switch for edge xlabels
    includeEdgeHeadLabels As Boolean             ' On/off switch for edge head labels
    includeEdgeTailLabels As Boolean             ' On/off switch for edge tail labels
    command As String                            ' Derived from graphType
    edgeOperator As String                       ' Derived from graphType
    strictKeyword As String                      ' Derived from addStrict
End Type

' Command Line Options section
Public Type commandLine
    parameters As String                         ' Custom parameters to pass to the graphing engine
End Type

' Working variables for the run-time options on the "settings" worksheet
Public Type Settings
    graph As graphOptions                        ' Runtime graph options
    styles As stylesWorksheet                    ' "styles" worksheet settings
    data As DataWorksheet                        ' "data" Worksheet settings
    source As sourceWorksheet                    ' "source" Worksheet settings
    sql As sqlWorksheet                          ' "sql" Worksheet settings
    output As FileOutput                         ' File output settings
    commandLine As commandLine                   ' Extra settings for the command line
End Type

' Working variables for row data on the "data" worksheet, and values derived from the "styles" worksheet
Public Type dataRow
    comment As String
    item As String
    relatedItem As String
    label As String
    xLabel As String
    tailLabel As String
    headLabel As String
    styleName As String
    extraAttrs As String
    styleType As String                          ' Not a column on "data" worksheet. Value is derived from the style associated with the style name.
    format As String                             ' Not a column on "data" worksheet. Value is derived from the format associated with the style name.
End Type

' Working variables for row data on the "stylesheet" worksheet
Public Type StylesRow
    comment As String
    styleName As String
    format As String
    styleType As String
    show As String
End Type

Attribute VB_Name = "modPublic"
' Copyright (c) 2015-2018 Jeffrey J. Long. All rights reserved

'@Folder("Relationship Visualizer.Bootstrap")
Option Explicit

' Get/Let to encapsulate LastActiveWorksheet
Private internalLastActiveWorksheet As String

Public Static Property Get LastActiveWorksheet() As String
    LastActiveWorksheet = internalLastActiveWorksheet
End Property

Public Static Property Let LastActiveWorksheet(ByVal worksheetName As String)
    internalLastActiveWorksheet = worksheetName
End Property

Attribute VB_Name = "modRibbon"
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Relationship Visualizer.Ribbon.Loader")
Option Explicit

' Note to future Jeff - Ideally the 'Graphviz' and 'Style Designer' tabs would
' show/hide/activate based on what worksheet is selected. When you implemented
' the code to do so it would take anywhere from 2-5 seconds for the 'style designer'
' ribbon to display because of how many entries have to be dynamically put in dropdown lists.
' Graphviz's default color scheme is X11 which has 656 colors. The 'style designer'
' ribbon has 4 color dropdowns for border color, font color, fill color, gradient fill color
' (656 X 4) = 2,624. There are also ~250 color schemes, and ~200 font names, so there are
' over 3,100 callbacks made every time the style designer ribbon has to be dynamically
' rebuilt. I didn't want to just delete all that nice dynamic tab code. If you can come
' up with a new idea to optimize the ribbon callbacks the dynamic tabs can be reactived
' by flipping the boolean value DYNAMIC_TABS_ENABLED back to True.
Private Const DYNAMIC_TABS_ENABLED = False

Private internalMyRibbon As IRibbonUI
Private internalMyTag As String

' Get/Let to encapsulate myTag
Public Static Property Get myTag() As String
    myTag = internalMyTag
End Property

Public Static Property Let myTag(ByVal tag As String)
    internalMyTag = tag
End Property

' Get/Let to encapsulate myRibbon
Public Static Property Get myRibbon() As IRibbonUI
    Set myRibbon = internalMyRibbon
End Property

Public Static Property Let myRibbon(ByVal ribbon As IRibbonUI)
    Set internalMyRibbon = ribbon
End Property

' Load the ribbon
Public Sub ribbon_onLoad(ByVal ribbon As IRibbonUI)
    '@Ignore ValueRequired
    myRibbon = ribbon
    Application.OnTime Now + TimeValue("00:00:01"), "ribbon_activateTab"
End Sub

Public Sub ribbon_activateTab()
    On Error GoTo ErrorHandler

    If DYNAMIC_TABS_ENABLED Then
        Select Case ActiveSheet.Name
            Case "about...":
                RefreshRibbon tag:=vbNullString
            Case "revisions":
                RefreshRibbon tag:=vbNullString
            Case "lists":
                RefreshRibbon tag:=vbNullString
            Case "vlookups":
                RefreshRibbon tag:=vbNullString
            Case "source":
                RefreshRibbon tag:="SourceTab"
                ActivateTab (RIBBON_TAB_SOURCE)
            Case "sql":
                RefreshRibbon tag:="sqlTab"
                ActivateTab (RIBBON_TAB_SQL)
            Case "style designer":
                RefreshRibbon tag:="*Tab" ' Wildcard causes all custom tabs to be shown
                ActivateTab (RIBBON_TAB_STYLE_DESIGNER)
            Case Else:
                RefreshRibbon tag:="GraphvizTab"
                ActivateTab (RIBBON_TAB_GRAPHVIZ)
        End Select
    Else
        If ActiveSheet.Name = WORKSHEET_STYLE_DESIGNER Then
            ActivateTab (RIBBON_TAB_STYLE_DESIGNER)
        ElseIf ActiveSheet.Name = WORKSHEET_SOURCE Then
            ActivateTab (RIBBON_TAB_SOURCE)
        ElseIf ActiveSheet.Name = WORKSHEET_SQL Then
            ActivateTab (RIBBON_TAB_SQL)
        Else
            ActivateTab (RIBBON_TAB_GRAPHVIZ)
        End If
    End If
    


    Exit Sub
ErrorHandler:
    If Err.Number > 0 Then
        Err.Clear
        Resume Next
    End If
End Sub

Public Sub ribbon_getVisible(ByVal control As IRibbonControl, ByRef visible As Variant)
    If DYNAMIC_TABS_ENABLED Then
        If myTag = TOGGLE_SHOW Then
            visible = True
        Else
            visible = control.tag Like myTag
        End If
    Else
        visible = True
    End If
End Sub

Public Sub RefreshRibbon(ByVal tag As String)
    On Error GoTo ErrorHandler
    myTag = tag
    If myRibbon Is Nothing Then
        MsgBox "Error refreshing the ribbon. Save and reopen this file."
    Else
        myRibbon.Invalidate
        If Err.Number <> 0 Then
            MsgBox "Lost the Ribbon object. Save and reload."
        End If
    End If

    Exit Sub
ErrorHandler:
    If Err.Number > 0 Then
        Err.Clear
        Resume Next
    End If
End Sub

Public Sub InvalidateRibbonControl(ByVal controlName As String)
    If myRibbon Is Nothing Then
        Application.StatusBar = "Error updating the ribbon. Save and reopen this file."
    Else
        myRibbon.InvalidateControl controlName
    End If
End Sub

Public Sub ActivateTab(ByVal tabName As String)
    If myRibbon Is Nothing Then
        Application.StatusBar = "Error activating a ribbon tab. Save and reopen this file."
    Else
        myRibbon.ActivateTab tabName
    End If
End Sub

Public Sub SyncHelpToggleButtons()

    ' Graphviz tab
    InvalidateRibbonControl RIBBON_CTL_HELP_SHAPES
    InvalidateRibbonControl RIBBON_CTL_HELP_COLORS
    InvalidateRibbonControl RIBBON_CTL_HELP_ATTRIBUTES
    
    ' Style Designer tab
    InvalidateRibbonControl RIBBON_CTL_HELP_DESIGN_SHAPES
    InvalidateRibbonControl RIBBON_CTL_HELP_DESIGN_COLORS

End Sub

' ===========================================================================
' Ribbon Callbacks for prefixed ribbon buttons

Public Sub button_getVisible(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetCellBoolean(WORKSHEET_SETTINGS, control.ID & "Visible")
End Sub

Public Sub button_getLabel(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = SettingsSheet.Range(control.ID & "Text")
End Sub

Public Sub button_getScreentip(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = SettingsSheet.Range(control.ID & "Screentip")
End Sub

Public Sub button_getSupertip(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = SettingsSheet.Range(control.ID & "Supertip")
End Sub

Attribute VB_Name = "modRibbonTabExtensions"
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Relationship Visualizer.Ribbon.Tabs")
Option Explicit

' ===========================================================================
' Extensions Tab

'@Ignore ParameterNotUsed
Public Sub extTab_getLabel(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = SettingsSheet.Range("ExtTabName")
End Sub

'@Ignore ParameterNotUsed
Public Sub extTab_getVisible(ByVal control As IRibbonControl, ByRef visible As Variant)
    visible = extTabGroup_getVisible("ExtCode", 6)
    If visible = False Then
        visible = extTabGroup_getVisible("ExtWeb", 6)
    End If
End Sub

' ===========================================================================
' Custom Code Group

' Group visibility
'@Ignore ParameterNotUsed
Public Sub extTab_codeGroup_getVisible(ByVal control As IRibbonControl, ByRef visible As Variant)
    visible = extTabGroup_getVisible("ExtCode", 6)
End Sub

' Group label
'@Ignore ParameterNotUsed
Public Sub extTab_codeGroup_getLabel(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = SettingsSheet.Range("ExtTabGroupNameCode")
End Sub

' Buttons which invoke subroutines
'@Ignore ParameterNotUsed
Public Sub extCode_onAction(ByVal control As IRibbonControl)
    Dim subroutine As String
    subroutine = SettingsSheet.Range(control.ID & "Sub")
    Application.Run subroutine
End Sub

'@Ignore ParameterNotUsed
Public Sub extCode_getEnabled(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = Not (SettingsSheet.Range(control.ID & "Sub").value = vbNullString)
End Sub

' ===========================================================================
' Web Resources Group

' Group visibility
'@Ignore ParameterNotUsed
Public Sub extTab_webGroup_getVisible(ByVal control As IRibbonControl, ByRef visible As Variant)
    visible = extTabGroup_getVisible("ExtWeb", 6)
End Sub

' Group label
'@Ignore ParameterNotUsed
Public Sub extTab_webGroup_getLabel(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = SettingsSheet.Range("ExtTabGroupNameWeb")
End Sub

' Buttons which invoke web hyperlinks
'@Ignore ParameterNotUsed
Public Sub extWeb_onAction(ByVal control As IRibbonControl)
    ActiveWorkbook.FollowHyperlink address:=SettingsSheet.Range(control.ID & "URL"), NewWindow:=True
End Sub

'@Ignore ParameterNotUsed
Public Sub extWeb_getEnabled(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = Not (SettingsSheet.Range(control.ID & "URL").value = vbNullString)
End Sub

' ===========================================================================
' Utility routines

Public Function extTabGroup_getVisible(ByVal prefix As String, ByVal numButtons As Long) As Boolean
    
    extTabGroup_getVisible = False
    
    ' Determines if the group has any enabled settings. If so,
    ' show the group. If not, hide the group.
    Dim buttonCount As Long
    For buttonCount = 1 To numButtons
        If GetCellBoolean(WORKSHEET_SETTINGS, prefix & buttonCount & "Visible") Then
            extTabGroup_getVisible = True
            Exit For
        End If
    Next buttonCount

End Function
Attribute VB_Name = "modRibbonTabGraphviz"
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Relationship Visualizer.Ribbon.Tabs")
Option Explicit

' ===========================================================================
' Callbacks for Show/Hide Labels

'@Ignore ParameterNotUsed
Public Sub showColumn_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    SettingsSheet.Range(control.ID).value = Toggle(pressed, TOGGLE_SHOW, TOGGLE_HIDE)
    ShowHideDataColumn (control.ID)
End Sub

'@Ignore ParameterNotUsed
Public Sub showColumn_getPressed(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    ShowHideDataColumn (control.ID)
    returnedVal = GetCellBoolean(WORKSHEET_SETTINGS, control.ID)
End Sub

Public Sub ShowHideDataColumn(ByVal columnId As String)
    Dim ShowColumn As Boolean
    Dim columnRange As String
    Dim col As String
    
    OptimizeCode_Begin
    
    ' Map the menu item to the column name
    Select Case columnId
        Case "ShowComment"
            col = SettingsSheet.Range(SETTINGS_DATA_COL_COMMENT)
        Case "ShowItem"
            col = SettingsSheet.Range(SETTINGS_DATA_COL_ITEM)
        Case "ShowLabel"
            col = SettingsSheet.Range(SETTINGS_DATA_COL_LABEL)
        Case "ShowOutsideLabel"
            col = SettingsSheet.Range(SETTINGS_DATA_COL_LABEL_X)
        Case "ShowTailLabel"
            col = SettingsSheet.Range(SETTINGS_DATA_COL_LABEL_TAIL)
        Case "ShowHeadLabel"
            col = SettingsSheet.Range(SETTINGS_DATA_COL_LABEL_HEAD)
        Case "ShowIsRelatedToItem"
            col = SettingsSheet.Range(SETTINGS_DATA_COL_IS_RELATED_TO)
        Case "ShowStyle"
            col = SettingsSheet.Range(SETTINGS_DATA_COL_STYLE)
        Case "ShowExtraStyleAttributes"
            col = SettingsSheet.Range(SETTINGS_DATA_COL_EXTRA_ATTRIBUTES)
        Case "ShowMessages"
            col = SettingsSheet.Range(SETTINGS_DATA_COL_ERROR_MESSAGES)
    End Select
    
    ' Activate the "data" worksheet
    ActiveWorkbook.Sheets(GetDataWorksheetName()).Activate
    
    ' Compose the column range to show/hide
    columnRange = col & ":" & col
    
    ' Show/Hide column according the saved value that corresponds to the check mark in the dropdown list
    ActiveSheet.Columns(columnRange).Select
    ShowColumn = GetCellBoolean(WORKSHEET_SETTINGS, columnId)
    Selection.EntireColumn.Hidden = Not ShowColumn
    
    ' Put the focus on the heading
    ActiveSheet.Range(col & CLng(SettingsSheet.Range(SETTINGS_STYLES_ROW_HEADING))).Select

    OptimizeCode_End
End Sub

' ===========================================================================
' Callbacks for data worksheet

'@Ignore ParameterNotUsed
Public Sub clearData_onAction(ByVal control As IRibbonControl)
    OptimizeCode_Begin
    
    Dim worksheetName As String
    worksheetName = GetDataWorksheetName()
    
    ActiveWorkbook.Sheets(worksheetName).Activate
    
    ClearDataWorksheet (worksheetName)
    ClearWorksheetGraphs
    ClearSourceWorksheet
    OptimizeCode_End
End Sub

' ===========================================================================
' Callbacks for addOptions

'@Ignore ParameterNotUsed
Public Sub addOptions_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    SettingsSheet.Range(SETTINGS_APPEND_OPTIONS).value = Toggle(pressed, TOGGLE_YES, TOGGLE_NO)
End Sub

'@Ignore ParameterNotUsed
Public Sub addOptions_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_APPEND_OPTIONS)
End Sub

' ===========================================================================
' Callbacks for addTimestamp

'@Ignore ParameterNotUsed
Public Sub addTimestamp_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    SettingsSheet.Range(SETTINGS_APPEND_TIMESTAMP).value = Toggle(pressed, TOGGLE_YES, TOGGLE_NO)
End Sub

'@Ignore ParameterNotUsed
Public Sub addTimestamp_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_APPEND_TIMESTAMP)
End Sub

' ===========================================================================
' Callbacks for blankNodeLabels

'@Ignore ParameterNotUsed
Public Sub blankNodeLabels_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    SettingsSheet.Range(SETTINGS_BLANK_NODE_LABELS).value = TOGGLE_BLANK_USE_BLANK

    InvalidateRibbonControl RIBBON_CTL_NODE_LABELS_BLANK
    InvalidateRibbonControl RIBBON_CTL_NODE_LABELS_DEFAULT
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub blankNodeLabels_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = getPressed(WORKSHEET_SETTINGS, SETTINGS_BLANK_NODE_LABELS, TOGGLE_BLANK_USE_BLANK)
End Sub

' ===========================================================================
' Callbacks for defaultNodeLabels

'@Ignore ParameterNotUsed
Public Sub defaultNodeLabels_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    SettingsSheet.Range(SETTINGS_BLANK_NODE_LABELS).value = TOGGLE_BLANK_USE_DEFAULT
    
    InvalidateRibbonControl RIBBON_CTL_NODE_LABELS_BLANK
    InvalidateRibbonControl RIBBON_CTL_NODE_LABELS_DEFAULT
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub defaultNodeLabels_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = getPressed(WORKSHEET_SETTINGS, SETTINGS_BLANK_NODE_LABELS, TOGGLE_BLANK_USE_DEFAULT)
End Sub

' ===========================================================================
' Callbacks for blankEdgeLabels

'@Ignore ParameterNotUsed
Public Sub blankEdgeLabels_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    SettingsSheet.Range(SETTINGS_BLANK_EDGE_LABELS).value = TOGGLE_BLANK_USE_BLANK
    
    InvalidateRibbonControl RIBBON_CTL_EDGE_LABELS_BLANK
    InvalidateRibbonControl RIBBON_CTL_EDGE_LABELS_DEFAULT
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub blankEdgeLabels_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = getPressed(WORKSHEET_SETTINGS, SETTINGS_BLANK_EDGE_LABELS, TOGGLE_BLANK_USE_BLANK)
End Sub

' ===========================================================================
' Callbacks for defaultEdgeLabels

'@Ignore ParameterNotUsed
Public Sub defaultEdgeLabels_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    SettingsSheet.Range(SETTINGS_BLANK_EDGE_LABELS).value = TOGGLE_BLANK_USE_DEFAULT
    
    InvalidateRibbonControl RIBBON_CTL_EDGE_LABELS_BLANK
    InvalidateRibbonControl RIBBON_CTL_EDGE_LABELS_DEFAULT
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub defaultEdgeLabels_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = getPressed(WORKSHEET_SETTINGS, SETTINGS_BLANK_EDGE_LABELS, TOGGLE_BLANK_USE_DEFAULT)
End Sub

' ===========================================================================
' Callbacks for clearMessages

'@Ignore ParameterNotUsed
Public Sub clearMessages_onAction(ByVal control As IRibbonControl)
    ClearErrors
End Sub

' ===========================================================================
' Callbacks for clearWorksheetGraphs

'@Ignore ParameterNotUsed
Public Sub clearWorksheetGraphs_onAction(ByVal control As IRibbonControl)
    ClearWorksheetGraphs
End Sub

' ===========================================================================
' Callbacks for directed

'@Ignore ParameterNotUsed
Public Sub directed_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    SettingsSheet.Range(SETTINGS_GRAPH_TYPE).value = Toggle(pressed, TOGGLE_DIRECTED, TOGGLE_UNDIRECTED)
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub directed_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = SettingsSheet.Range(SETTINGS_GRAPH_TYPE).value = TOGGLE_DIRECTED
End Sub

' ===========================================================================
' Callbacks for dirName

'@Ignore ParameterNotUsed
Public Sub dirName_getLabel(ByVal control As IRibbonControl, ByRef label As Variant)
    label = Trim$(SettingsSheet.Range(SETTINGS_OUTPUT_DIRECTORY))
    If label = vbNullString Then
        label = "Get Directory..."
    End If
End Sub

' ===========================================================================
' Callbacks for fileFormat

'@Ignore ParameterNotUsed
Public Sub fileFormat_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    SettingsSheet.Range(SETTINGS_FILE_FORMAT).value = controlId
End Sub

'@Ignore ParameterNotUsed
Public Sub fileFormat_GetSelectedItemID(ByVal control As IRibbonControl, ByRef itemID As Variant)
    itemID = SettingsSheet.Range(SETTINGS_FILE_FORMAT)
End Sub

' ===========================================================================
' Callbacks for filePrefix

'@Ignore ParameterNotUsed
Public Sub filePrefix_onChange(ByVal control As IRibbonControl, ByVal text As String)
    SettingsSheet.Range(SETTINGS_FILE_NAME).value = text
End Sub

'@Ignore ParameterNotUsed
Public Sub filePrefix_getText(ByVal control As IRibbonControl, ByRef text As Variant)
    text = Trim$(SettingsSheet.Range(SETTINGS_FILE_NAME))
End Sub

' ===========================================================================
' Callbacks for getDir

'@Ignore ParameterNotUsed
Public Sub getDir_onAction(ByVal control As IRibbonControl)
    SelectDirectoryToCell WORKSHEET_SETTINGS, SETTINGS_OUTPUT_DIRECTORY
    RefreshRibbon tag:="GraphvizTab"
End Sub

' ===========================================================================
' Callbacks for graphToFile

'@Ignore ParameterNotUsed
Public Sub graphToFile_onAction(ByVal control As IRibbonControl)
    Dim firstColumn As Long
    Dim lastColumn As Long
    firstColumn = GetSettingsColNum(SETTINGS_STYLES_COL_SHOW_STYLE)
    lastColumn = firstColumn
    
    CreateGraphFile firstColumn, lastColumn
End Sub

'@Ignore ParameterNotUsed
Public Sub graphToFile_getEnabled(ByVal control As IRibbonControl, ByRef pressed As Variant)
    Dim dirName As String
    dirName = SettingsSheet.Range(SETTINGS_OUTPUT_DIRECTORY)
    pressed = Not (dirName = vbNullString Or _
        SettingsSheet.Range(SETTINGS_FILE_NAME).value = vbNullString Or _
        DirectoryExists(dirName) = False Or _
        IsAViewSpecified() = False)
End Sub

' ===========================================================================
' Callbacks for graphAllViewsToFile

'@Ignore ParameterNotUsed
Public Sub graphAllViewsToFile_onAction(ByVal control As IRibbonControl)

    Dim nonEmptyCellCount As Long
    Dim row As Long
    Dim col As Long
    Dim columnName As String
    Dim firstColumn As Long
    Dim lastColumn As Long
    
    row = CLng(SettingsSheet.Range(SETTINGS_STYLES_ROW_HEADING))
    nonEmptyCellCount = 0
    
    ' Get the configured location of the first view name column
    firstColumn = GetSettingsColNum(SETTINGS_STYLES_COL_FIRST_YES_NO_VIEW)
    
    ' Count the non-empty cells beginning at the first view column
    For col = firstColumn To GetLastColumn(WORKSHEET_STYLES, row)
        columnName = StylesSheet.Cells(row, col)
        If columnName <> vbNullString Then
            nonEmptyCellCount = nonEmptyCellCount + 1
        End If
    Next col

    ' Calaculate the absolute column number of the last view column
    lastColumn = firstColumn + nonEmptyCellCount - 1
    
    ' Graph all the views
    CreateGraphFile firstColumn, lastColumn
End Sub

' ===========================================================================
' Callbacks for graphToWorksheet

'@Ignore ParameterNotUsed
Public Sub graphToWorksheet_onAction(ByVal control As IRibbonControl)
    OptimizeCode_Begin
    CreateGraphWorksheet
    OptimizeCode_End
End Sub

'@Ignore ParameterNotUsed
Public Sub graphToWorksheet_getEnabled(ByVal control As IRibbonControl, ByRef enabled As Variant)
    enabled = IsAViewSpecified()
End Sub

' ===========================================================================
' Callbacks for graphAuto

'@Ignore ParameterNotUsed
Public Sub graphAuto_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    SettingsSheet.Range(SETTINGS_RUN_MODE).value = Toggle(pressed, TOGGLE_AUTO, TOGGLE_MANUAL)
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub graphAuto_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = SettingsSheet.Range(SETTINGS_RUN_MODE).value = TOGGLE_AUTO
End Sub

' ===========================================================================
' Callbacks for graphWorksheet

'@Ignore ParameterNotUsed
Public Sub graphWorksheet_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    SettingsSheet.Range(SETTINGS_IMAGE_WORKSHEET).value = controlId
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub graphWorksheet_GetSelectedItemID(ByVal control As IRibbonControl, ByRef itemID As Variant)
    itemID = SettingsSheet.Range(SETTINGS_IMAGE_WORKSHEET)
End Sub

'@Ignore ParameterNotUsed
Public Sub helpAttributes_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    SettingsSheet.Range(SETTINGS_HELP_ATTRIBUTES).value = Toggle(pressed, TOGGLE_SHOW, TOGGLE_HIDE)
End Sub

' ===========================================================================
' Callbacks for helpAttributes

'@Ignore ParameterNotUsed
Public Sub helpAttributes_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_HELP_ATTRIBUTES)
End Sub

' ===========================================================================
' Callbacks for helpColors

'@Ignore ParameterNotUsed
Public Sub helpColors_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    SettingsSheet.Range(SETTINGS_HELP_COLORS).value = Toggle(pressed, TOGGLE_SHOW, TOGGLE_HIDE)
End Sub

'@Ignore ParameterNotUsed
Public Sub helpColors_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_HELP_COLORS)
End Sub

' ===========================================================================
' Callbacks for helpShapes

'@Ignore ParameterNotUsed
Public Sub helpShapes_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    SettingsSheet.Range(SETTINGS_HELP_SHAPES).value = Toggle(pressed, TOGGLE_SHOW, TOGGLE_HIDE)
End Sub

'@Ignore ParameterNotUsed
Public Sub helpShapes_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_HELP_SHAPES)
End Sub

' ===========================================================================
' Callbacks for imageFormat

'@Ignore ParameterNotUsed
Public Sub imageFormat_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    Dim imageFormat As String
    imageFormat = Mid$(controlId, Len("img_") + 1)
    SettingsSheet.Range(SETTINGS_IMAGE_TYPE).value = imageFormat
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub imageFormat_GetSelectedItemID(ByVal control As IRibbonControl, ByRef itemID As Variant)
    itemID = "img_" & SettingsSheet.Range(SETTINGS_IMAGE_TYPE)
End Sub

' ===========================================================================
' Callbacks for includeOrphanEdges

'@Ignore ParameterNotUsed
Public Sub includeOrphanEdges_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    SettingsSheet.Range(SETTINGS_RELATIONSHIPS_WITHOUT_NODES).value = Toggle(pressed, TOGGLE_INCLUDE, TOGGLE_EXCLUDE)
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub includeOrphanEdges_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_RELATIONSHIPS_WITHOUT_NODES)
End Sub

' ===========================================================================
' Callbacks for includeOrphanNodes

'@Ignore ParameterNotUsed
Public Sub includeOrphanNodes_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    SettingsSheet.Range(SETTINGS_NODES_WITHOUT_RELATIONSHIPS).value = Toggle(pressed, TOGGLE_INCLUDE, TOGGLE_EXCLUDE)
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub includeOrphanNodes_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_NODES_WITHOUT_RELATIONSHIPS)
End Sub

' ===========================================================================
' Callbacks for keepGvFile

'@Ignore ParameterNotUsed
Public Sub keepGvFile_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    SettingsSheet.Range(SETTINGS_FILE_DISPOSITION).value = Toggle(pressed, TOGGLE_KEEP, TOGGLE_DELETE)
End Sub

'@Ignore ParameterNotUsed
Public Sub keepGvFile_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = SettingsSheet.Range(SETTINGS_FILE_DISPOSITION).value = TOGGLE_KEEP
End Sub

' ===========================================================================
' Callbacks for layoutDirection

'@Ignore ParameterNotUsed
Public Sub layoutDirection_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)

    Select Case controlId
        Case "TB"
            SettingsSheet.Range(SETTINGS_GRAPH_LAYOUT_DIRECTION).value = "top to bottom"
        Case "BT"
            SettingsSheet.Range(SETTINGS_GRAPH_LAYOUT_DIRECTION).value = "bottom to top"
        Case "LR"
            SettingsSheet.Range(SETTINGS_GRAPH_LAYOUT_DIRECTION).value = "left to right"
        Case "RL"
            SettingsSheet.Range(SETTINGS_GRAPH_LAYOUT_DIRECTION).value = "right to left"
    End Select
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub layoutDirection_GetSelectedItemID(ByVal control As IRibbonControl, ByRef itemID As Variant)
    
    Select Case SettingsSheet.Range(SETTINGS_GRAPH_LAYOUT_DIRECTION)
        Case "top to bottom"
            itemID = "TB"
        Case "bottom to top"
            itemID = "BT"
        Case "left to right"
            itemID = "LR"
        Case "right to left"
            itemID = "RL"
        Case Else
            itemID = vbNullString
    End Select
    
End Sub

'@Ignore ParameterNotUsed
Public Sub layoutDirection_getVisible(ByVal control As IRibbonControl, ByRef visible As Variant)
    visible = UCase$(SettingsSheet.Range(SETTINGS_GRAPHVIZ_ENGINE).value) = "DOT"
End Sub

' ===========================================================================
' Callbacks for layoutEngine

'@Ignore ParameterNotUsed
Public Sub layoutEngine_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    SettingsSheet.Range(SETTINGS_GRAPHVIZ_ENGINE).value = controlId
    RefreshRibbon tag:="*Tab"
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub layoutEngine_GetSelectedItemID(ByVal control As IRibbonControl, ByRef itemID As Variant)
    itemID = SettingsSheet.Range(SETTINGS_GRAPHVIZ_ENGINE)
End Sub

' ===========================================================================
' Callbacks for showNodeLabels

'@Ignore ParameterNotUsed
Public Sub showNodeLabels_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    SettingsSheet.Range(SETTINGS_NODE_LABELS).value = Toggle(pressed, TOGGLE_INCLUDE, TOGGLE_EXCLUDE)
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub showNodeLabels_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_NODE_LABELS)
End Sub

' ===========================================================================
' Callbacks for showNodeXLabels

'@Ignore ParameterNotUsed
Public Sub showNodeXLabels_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    SettingsSheet.Range(SETTINGS_NODE_XLABELS).value = Toggle(pressed, TOGGLE_INCLUDE, TOGGLE_EXCLUDE)
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub showNodeXLabels_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_NODE_XLABELS)
End Sub

' ===========================================================================
' Callbacks for showEdgeLabels

'@Ignore ParameterNotUsed
Public Sub showEdgeLabels_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    SettingsSheet.Range(SETTINGS_EDGE_LABELS).value = Toggle(pressed, TOGGLE_INCLUDE, TOGGLE_EXCLUDE)
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub showEdgeLabels_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_EDGE_LABELS)
End Sub

' ===========================================================================
' Callbacks for showEdgeXLabels

'@Ignore ParameterNotUsed
Public Sub showEdgeXLabels_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    SettingsSheet.Range(SETTINGS_EDGE_XLABELS).value = Toggle(pressed, TOGGLE_INCLUDE, TOGGLE_EXCLUDE)
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub showEdgeXLabels_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_EDGE_XLABELS)
End Sub

' ===========================================================================
' Callbacks for showEdgeHeadLabels

'@Ignore ParameterNotUsed
Public Sub showEdgeHeadLabels_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    SettingsSheet.Range(SETTINGS_EDGE_HEAD_LABELS).value = Toggle(pressed, TOGGLE_INCLUDE, TOGGLE_EXCLUDE)
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub showEdgeHeadLabels_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_EDGE_HEAD_LABELS)
End Sub

' ===========================================================================
' Callbacks for showEdgeTailLabels

'@Ignore ParameterNotUsed
Public Sub showEdgeTailLabels_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    SettingsSheet.Range(SETTINGS_EDGE_TAIL_LABELS).value = Toggle(pressed, TOGGLE_INCLUDE, TOGGLE_EXCLUDE)
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub showEdgeTailLabels_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_EDGE_TAIL_LABELS)
End Sub

' ===========================================================================
' Callbacks for splines

'@Ignore ParameterNotUsed
Public Sub splines_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    SettingsSheet.Range(SETTINGS_SPLINES).value = controlId
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub splines_GetSelectedItemID(ByVal control As IRibbonControl, ByRef itemID As Variant)
    itemID = SettingsSheet.Range(SETTINGS_SPLINES)
End Sub

' ===========================================================================
' Callbacks for strict

'@Ignore ParameterNotUsed
Public Sub strict_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    SettingsSheet.Range(SETTINGS_GRAPH_STRICT).value = Toggle(pressed, TOGGLE_YES, TOGGLE_NO)
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub strict_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_GRAPH_STRICT)
End Sub

' ===========================================================================
' Callbacks for transparent

'@Ignore ParameterNotUsed
Public Sub transparent_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    SettingsSheet.Range(SETTINGS_GRAPH_TRANSPARENT).value = Toggle(pressed, TOGGLE_YES, TOGGLE_NO)
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub transparent_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_GRAPH_TRANSPARENT)
End Sub

' ===========================================================================
' Callbacks for center

'@Ignore ParameterNotUsed
Public Sub center_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    SettingsSheet.Range(SETTINGS_GRAPH_CENTER).value = Toggle(pressed, TOGGLE_YES, TOGGLE_NO)
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub center_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_GRAPH_CENTER)
End Sub

' ===========================================================================
' Callbacks for compound

'@Ignore ParameterNotUsed
Public Sub compound_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    SettingsSheet.Range(SETTINGS_GRAPH_COMPOUND).value = Toggle(pressed, TOGGLE_YES, TOGGLE_NO)
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub compound_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_GRAPH_COMPOUND)
End Sub

'@Ignore ParameterNotUsed
Public Sub compound_getVisible(ByVal control As IRibbonControl, ByRef visible As Variant)
    visible = UCase$(SettingsSheet.Range(SETTINGS_GRAPHVIZ_ENGINE).value) = "DOT"
End Sub

' ===========================================================================
' Callbacks for concentrate

'@Ignore ParameterNotUsed
Public Sub concentrate_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    SettingsSheet.Range(SETTINGS_GRAPH_CONCENTRATE).value = Toggle(pressed, TOGGLE_YES, TOGGLE_NO)
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub concentrate_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_GRAPH_CONCENTRATE)
End Sub

' ===========================================================================
' Callbacks for forceLabels

'@Ignore ParameterNotUsed
Public Sub forceLabels_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    SettingsSheet.Range(SETTINGS_GRAPH_FORCE_LABELS).value = Toggle(pressed, TOGGLE_YES, TOGGLE_NO)
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub forceLabels_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_GRAPH_FORCE_LABELS)
End Sub

' ===========================================================================
' Callbacks for newrank

'@Ignore ParameterNotUsed
Public Sub newrank_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    SettingsSheet.Range(SETTINGS_GRAPH_NEWRANK).value = Toggle(pressed, TOGGLE_YES, TOGGLE_NO)
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub newrank_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_GRAPH_NEWRANK)
End Sub

' ===========================================================================
' Callbacks for rotate

'@Ignore ParameterNotUsed
Public Sub rotate_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    SettingsSheet.Range(SETTINGS_GRAPH_ORIENTATION).value = Toggle(pressed, TOGGLE_YES, TOGGLE_NO)
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub rotate_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_GRAPH_ORIENTATION)
End Sub

' ===========================================================================
' Callbacks for breadthFirst

Public Function getPressed(ByVal worksheetName As String, ByVal keyword As String, ByVal matchValue As String) As Boolean
    getPressed = UCase$(GetCellString(worksheetName, keyword)) = UCase$(matchValue)
End Function

'@Ignore ParameterNotUsed
Public Sub breadthFirst_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    CycleSetting WORKSHEET_SETTINGS, SETTINGS_GRAPH_OUTPUT_ORDER, TOGGLE_BREADTH_FIRST, pressed
    
    InvalidateRibbonControl RIBBON_CTL_GRAPH_NODES_FIRST
    InvalidateRibbonControl RIBBON_CTL_GRAPH_EDGES_FIRST
    
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub breadthFirst_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = getPressed(WORKSHEET_SETTINGS, SETTINGS_GRAPH_OUTPUT_ORDER, TOGGLE_BREADTH_FIRST)
End Sub

' ===========================================================================
' Callbacks for nodesFirst

'@Ignore ParameterNotUsed
Public Sub nodesFirst_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    CycleSetting WORKSHEET_SETTINGS, SETTINGS_GRAPH_OUTPUT_ORDER, TOGGLE_NODES_FIRST, pressed
    
    InvalidateRibbonControl RIBBON_CTL_GRAPH_BREADTH_FIRST
    InvalidateRibbonControl RIBBON_CTL_GRAPH_EDGES_FIRST
    
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub nodesFirst_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = getPressed(WORKSHEET_SETTINGS, SETTINGS_GRAPH_OUTPUT_ORDER, TOGGLE_NODES_FIRST)
End Sub

' ===========================================================================
' Callbacks for edgesFirst

'@Ignore ParameterNotUsed
Public Sub edgesFirst_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)

    CycleSetting WORKSHEET_SETTINGS, SETTINGS_GRAPH_OUTPUT_ORDER, TOGGLE_EDGES_FIRST, pressed
    
    InvalidateRibbonControl RIBBON_CTL_GRAPH_BREADTH_FIRST
    InvalidateRibbonControl RIBBON_CTL_GRAPH_NODES_FIRST
    
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub edgesFirst_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = getPressed(WORKSHEET_SETTINGS, SETTINGS_GRAPH_OUTPUT_ORDER, TOGGLE_EDGES_FIRST)
End Sub

' ===========================================================================
' For checkbox menus. Removes check mark if already checked, otherwise
' updates the cell value with the new value

Public Sub CycleSetting(ByVal worksheetName As String, ByVal cellName As String, ByVal value As String, ByVal pressed As Boolean)

    Dim currentValue As String
    currentValue = GetCellString(worksheetName, cellName)
    
    If pressed Then
        If currentValue = value Then
            SetCellString worksheetName, cellName, vbNullString
        Else
            SetCellString worksheetName, cellName, value
        End If
    Else
        SetCellString worksheetName, cellName, vbNullString
    End If
    
End Sub

' ===========================================================================
' Callbacks for overlap

'@Ignore ParameterNotUsed
Public Sub overlap_getVisible(ByVal control As IRibbonControl, ByRef visible As Variant)
    visible = UCase$(SettingsSheet.Range(SETTINGS_GRAPHVIZ_ENGINE)) <> "DOT"
End Sub

'@Ignore ParameterNotUsed
Public Sub overlap_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)

    CycleSetting WORKSHEET_SETTINGS, SETTINGS_GRAPH_OVERLAP, control.ID, pressed
    
    InvalidateRibbonControl RIBBON_CTL_GRAPH_OVERLAP_COMPRESS
    InvalidateRibbonControl RIBBON_CTL_GRAPH_OVERLAP_PRISM
    InvalidateRibbonControl RIBBON_CTL_GRAPH_OVERLAP_SCALE
    InvalidateRibbonControl RIBBON_CTL_GRAPH_OVERLAP_SCALEXY
    InvalidateRibbonControl RIBBON_CTL_GRAPH_OVERLAP_VORONOI
    
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub overlap_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = SettingsSheet.Range(SETTINGS_GRAPH_OVERLAP).value = control.ID
End Sub

' ===========================================================================
' Callbacks for toggleDebugLabels

'@Ignore ParameterNotUsed
Public Sub toggleDebugLabels_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    SettingsSheet.Range(SETTINGS_DEBUG).value = Toggle(pressed, TOGGLE_ON, TOGGLE_OFF)
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub toggleDebugLabels_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_DEBUG)
End Sub

' ===========================================================================
' Callbacks for useDefinedStyles

'@Ignore ParameterNotUsed
Public Sub useDefinedStyles_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    SettingsSheet.Range(SETTINGS_INCLUDE_STYLE_FORMAT).value = Toggle(pressed, TOGGLE_INCLUDE, TOGGLE_EXCLUDE)
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub useDefinedStyles_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_INCLUDE_STYLE_FORMAT)
End Sub

' ===========================================================================
' Callbacks for useExtraStyles

'@Ignore ParameterNotUsed
Public Sub useExtraStyles_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    SettingsSheet.Range(SETTINGS_INCLUDE_EXTRA_ATTRIBUTES).value = Toggle(pressed, TOGGLE_INCLUDE, TOGGLE_EXCLUDE)
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub useExtraStyles_getPressed(ByVal control As IRibbonControl, ByRef pressed As Variant)
    pressed = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_INCLUDE_EXTRA_ATTRIBUTES)
End Sub

' ===========================================================================
' Callbacks for yesView

'Callback for yesNoView onAction
'@Ignore ParameterNotUsed
Public Sub yesNoView_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    Dim columnName As String
    columnName = ConvertColumnNumberToLetters(index + GetSettingsColNum(SETTINGS_STYLES_COL_FIRST_YES_NO_VIEW))
    SettingsSheet.Range(SETTINGS_YES_NO_SWITCH_COLUMN).value = columnName
    AutoDraw
End Sub

'Callback for yesNoView getItemCount
'@Ignore ParameterNotUsed
Public Sub yesNoView_getItemCount(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    Dim itemCount As Long
    Dim row As Long
    Dim col As Long
    Dim lastCol As Long
    Dim columnName As String
    
    row = CLng(SettingsSheet.Range(SETTINGS_STYLES_ROW_HEADING))
    itemCount = 0
    
    ' Count the non-empty cells beginning at the first view column
    For col = GetSettingsColNum(SETTINGS_STYLES_COL_FIRST_YES_NO_VIEW) To GetLastColumn(WORKSHEET_STYLES, row)
        columnName = StylesSheet.Cells(row, col)
        If columnName <> vbNullString Then
            itemCount = itemCount + 1
        End If
    Next col

    ' If the last view column is the currently selected column, and the user deletes the column then it
    ' is necessary to change the selection to the last column which will be present after the deletion occurs.
    lastCol = itemCount + GetSettingsColNum(SETTINGS_STYLES_COL_FIRST_YES_NO_VIEW) - 1
    
    If lastCol < GetSettingsColNum(SETTINGS_STYLES_COL_SHOW_STYLE) Then
        SettingsSheet.Range(SETTINGS_YES_NO_SWITCH_COLUMN).value = ConvertColumnNumberToLetters(lastCol)
        RefreshRibbon tag:="GraphvizTab"
    End If
    
    returnedVal = itemCount
End Sub

' Callback for yesNoView getItemLabel
'@Ignore ParameterNotUsed
Public Sub yesNoView_getItemLabel(ByVal control As IRibbonControl, ByVal index As Long, ByRef itemLabel As Variant)
    itemLabel = StylesSheet.Cells(CLng(SettingsSheet.Range(SETTINGS_STYLES_ROW_HEADING)), _
                            index + GetSettingsColNum(SETTINGS_STYLES_COL_FIRST_YES_NO_VIEW))
End Sub

'@Ignore ParameterNotUsed
Public Sub yesNoView_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef itemIndex As Variant)
    Dim indx As Long
    indx = GetSettingsColNum(SETTINGS_STYLES_COL_SHOW_STYLE) - GetSettingsColNum(SETTINGS_STYLES_COL_FIRST_YES_NO_VIEW)
    itemIndex = indx
End Sub

' Utility routines

Public Function IsAViewSpecified() As Boolean
    IsAViewSpecified = Not (SettingsSheet.Range(SETTINGS_VIEW_NAME) = "0")
End Function























Attribute VB_Name = "modRibbonTabSQL"
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Relationship Visualizer.Ribbon.Tabs")
Option Explicit

' ===========================================================================
' Ribbon callbacks for SQL Tab
' ===========================================================================

'@Ignore ParameterNotUsed
Public Sub sqlRun_onAction(ByVal control As IRibbonControl)
    OptimizeCode_Begin
    RunSQL
    OptimizeCode_End
    AutoDraw
End Sub

'@Ignore ParameterNotUsed
Public Sub sqlClearStatus_onAction(ByVal control As IRibbonControl)
    OptimizeCode_Begin
    ClearSQLStatus
    OptimizeCode_End
End Sub


Attribute VB_Name = "modRibbonTabSource"
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Relationship Visualizer.Ribbon.Tabs")
Option Explicit

' ===========================================================================
' Ribbon callbacks for source worksheet
' ===========================================================================

' ===========================================================================
' Callbacks for sourceCreate

'@Ignore ParameterNotUsed
Public Sub sourceCreate_onAction(ByVal control As IRibbonControl)
    OptimizeCode_Begin
    CreateGraphSource
    OptimizeCode_End
End Sub

'@Ignore ParameterNotUsed
Public Sub sourceCreate_getEnabled(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = True
End Sub

' ===========================================================================
' Callbacks for sourceIndent

'@Ignore ParameterNotUsed
Public Sub sourceIndent_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    OptimizeCode_Begin
    SettingsSheet.Range(SETTINGS_SOURCE_INDENT).value = Mid$(controlId, Len("source_") + 1)
    CreateGraphSource
    OptimizeCode_End
End Sub

'@Ignore ParameterNotUsed
Public Sub sourceIndent_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = CLng(SettingsSheet.Range(SETTINGS_SOURCE_INDENT))
End Sub

' ===========================================================================
' Callbacks for sourceCopy

'@Ignore ParameterNotUsed
Public Sub sourceCopy_onAction(ByVal control As IRibbonControl)
    CopySourceToClipboard
End Sub

'@Ignore ParameterNotUsed
Public Sub sourceCopy_getEnabled(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = True
End Sub

' ===========================================================================
' Callbacks for sourceClear

'@Ignore ParameterNotUsed
Public Sub sourceClear_onAction(ByVal control As IRibbonControl)
    OptimizeCode_Begin
    ClearSourceWorksheet
    OptimizeCode_End
End Sub

' ===========================================================================
' Callbacks for sourceSave

'@Ignore ParameterNotUsed
Public Sub sourceSave_onAction(ByVal control As IRibbonControl)
    Dim fileName As String
    fileName = GetSaveAsFilename()
    
    If fileName <> vbNullString Then
        fileName = Replace(fileName, ".txt", ".gv")
        fileName = Replace(fileName, ".gv.gv", ".gv")
        SourceWorksheetToFile (fileName)
        MsgBox "Saved to file: " & vbCrLf & fileName
    End If
End Sub

'@Ignore ParameterNotUsed
Public Sub sourceSave_getEnabled(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = True
End Sub

' ===========================================================================
' Callbacks for sourceNumber

'@Ignore ParameterNotUsed
Public Sub sourceNumber_onAction(ByVal control As IRibbonControl)
    OptimizeCode_Begin
    UpdateSourceWorksheetLineNumbers
    OptimizeCode_End
End Sub

' ===========================================================================
' Callbacks for sourceGraphToWorksheet

'@Ignore ParameterNotUsed
Public Sub sourceGraphToWorksheet_onAction(ByVal control As IRibbonControl)
    OptimizeCode_Begin
    CreateGraphFromSourceToWorksheet
    OptimizeCode_End
End Sub

' ===========================================================================
' Callbacks for sourceGraphToFile

'@Ignore ParameterNotUsed
Public Sub sourceGraphToFile_onAction(ByVal control As IRibbonControl)
    OptimizeCode_Begin
    CreateGraphFromSourceToFile
    OptimizeCode_End
End Sub

' ===========================================================================
' Callbacks for launchGVEdit

'@Ignore ParameterNotUsed
Public Sub launchGVEdit_onAction(ByVal control As IRibbonControl)
    LaunchGVEdit
End Sub

'@Ignore ParameterNotUsed
Public Sub launchGVEdit_getEnabled(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = SearchPathForFile("gvedit.exe")
End Sub

' ===========================================================================
' Callbacks for Web References

'@Ignore ParameterNotUsed
Public Sub source_web_getVisible(ByVal control As IRibbonControl, ByRef visible As Variant)
    visible = extTabGroup_getVisible("SourceWeb", 5)
End Sub

Attribute VB_Name = "modRibbonTabStyleDesigner"
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Relationship Visualizer.Ribbon.Tabs")
Option Explicit

Private fontList As Variant

' ===========================================================================
' Ribbon callbacks for "Style Designer" ribbon tab
' ===========================================================================

' ===========================================================================
' Callbacks for colorScheme

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub colorScheme_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    Dim colorScheme As String
    OptimizeCode_Begin
    
    If index = 0 Then
        colorScheme = vbNullString
    Else
        colorScheme = Mid$(controlId, Len("cs_") + 1)
    End If
    
    StyleDesignerSheet.Range(DESIGNER_COLOR_SCHEME).value = colorScheme
    StyleDesignerSheet.Range("FontColor,BorderColor,FillColor,GradientFillColor,GradientFillType,GradientFillAngle,EdgeColor1,EdgeColor2,EdgeColor3").ClearContents
    
    InvalidateRibbonControl RIBBON_CTL_FONT_COLOR
    InvalidateRibbonControl RIBBON_CTL_BORDER_COLOR
    InvalidateRibbonControl RIBBON_CTL_FILL_COLOR
    InvalidateRibbonControl RIBBON_CTL_GRADIENT_FILL_COLOR
    InvalidateRibbonControl RIBBON_CTL_GRADIENT_FILL_TYPE
    InvalidateRibbonControl RIBBON_CTL_GRADIENT_FILL_ANGLE
    InvalidateRibbonControl RIBBON_CTL_EDGE_COLOR1
    InvalidateRibbonControl RIBBON_CTL_EDGE_COLOR2
    InvalidateRibbonControl RIBBON_CTL_EDGE_COLOR3

    OptimizeCode_End
    
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub colorScheme_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef index As Variant)
    index = GetListIndex(LISTS_COLOR_SCHEMES, DESIGNER_COLOR_SCHEME)
End Sub

' ===========================================================================
' Callbacks for fontColor

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub fontColor_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    SaveColor index, DESIGNER_FONT_COLOR
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub color_getItemCount(ByVal control As IRibbonControl, ByRef count As Variant)
    Dim colorScheme As String
    
    colorScheme = StyleDesignerSheet.Range(DESIGNER_COLOR_SCHEME)
    If colorScheme = vbNullString Then
        colorScheme = COLOR_SCHEME_DEFAULT       ' X11 is Graphviz's default color scheme
    End If
    
    count = HelpColorsSheet.Range(COLOR_SCHEME_PREFIX & colorScheme).count + 1
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub color_getItemLabel(ByVal control As IRibbonControl, ByVal index As Long, ByRef label As Variant)
    If index = 0 Then
        label = vbNullString
    Else
        Dim colorScheme As String
        
        colorScheme = StyleDesignerSheet.Range(DESIGNER_COLOR_SCHEME)
        
        If colorScheme = vbNullString Then       ' No color scheme supplied
            colorScheme = COLOR_SCHEME_DEFAULT   ' X11 is Graphviz's default color scheme
        End If
        
        If colorScheme = COLOR_SCHEME_X11 Or colorScheme = COLOR_SCHEME_SVG Then
            ' Color list is in cells along a column
            label = HelpColorsSheet.Range(COLOR_SCHEME_PREFIX & colorScheme).Cells(index, 1).value
        Else
            ' Color list is in cells along a row
            label = HelpColorsSheet.Range(COLOR_SCHEME_PREFIX & colorScheme).Cells(1, index).value
        End If
    End If
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub fontColor_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef index As Variant)
    index = GetColorIndex(DESIGNER_FONT_COLOR)
End Sub

' ===========================================================================
' Callbacks for borderColor

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub borderColor_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef index As Variant)
    index = GetColorIndex(DESIGNER_BORDER_COLOR)
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub borderColor_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    SaveColor index, DESIGNER_BORDER_COLOR
    RenderPreview
End Sub

' ===========================================================================
' Callbacks for fontName

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub fontName_getItemCount(ByVal control As IRibbonControl, ByRef count As Variant)
    If IsEmpty(fontList) Then
        Set fontList = Application.CommandBars("Formatting").FindControl(ID:=1728)
        If fontList Is Nothing Then              ' If Font control is missing, create a temp CommandBar
            Dim TempBar As Variant
            Set TempBar = Application.CommandBars.Add
            Set fontList = TempBar.Controls.Add(ID:=1728)
            TempBar.Delete
        End If
    End If
    count = fontList.listCount
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub fontName_getItemLabel(ByVal control As IRibbonControl, ByVal index As Long, ByRef returnedVal As Variant)
   
    If index = 0 Then
        returnedVal = vbNullString
    Else
        returnedVal = fontList.List(index)
    End If
    
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub fontName_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    
    Dim fontName As String
    
    If index = 0 Then
        fontName = vbNullString
    Else
        fontName = fontList.List(index)
    End If

    StyleDesignerSheet.Range(DESIGNER_FONT_NAME).value = fontName
    RenderPreview
    
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub fontName_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)

    returnedVal = 0
    
    Dim fontName As String
    fontName = StyleDesignerSheet.Range(DESIGNER_FONT_NAME)
    
    If fontName <> vbNullString Then
        ' Find the font name
        Dim index As Long
        For index = 1 To fontList.listCount
            If fontName = fontList.List(index) Then
                returnedVal = index
                Exit For
            End If
        Next index
    End If
    
End Sub

' ===========================================================================
' Callbacks for fontSize

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub fontSize_getItemCount(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = ListsSheet.Range(LISTS_FONT_SIZES).count + 1
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub fontSize_getItemLabel(ByVal control As IRibbonControl, ByVal index As Long, ByRef returnedVal As Variant)
    If index = 0 Then
        returnedVal = vbNullString
    Else
        returnedVal = ListsSheet.Range(LISTS_FONT_SIZES).Cells(index, 1).value
    End If
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub fontSize_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    If index = 0 Then
        StyleDesignerSheet.Range(DESIGNER_FONT_SIZE).value = vbNullString
    Else
        StyleDesignerSheet.Range(DESIGNER_FONT_SIZE).value = ListsSheet.Range(LISTS_FONT_SIZES).Cells(index, 1).value
    End If
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub fontSize_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetListIndex(LISTS_FONT_SIZES, DESIGNER_FONT_SIZE)
End Sub

' ===========================================================================
' Callbacks for edgeWeight

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeWeight_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    StyleDesignerSheet.Range(DESIGNER_EDGE_WEIGHT).value = Mid$(controlId, Len("weight_") + 1)
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeWeight_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetListIndex(LISTS_EDGE_WEIGHTS, DESIGNER_EDGE_WEIGHT)
End Sub

' ===========================================================================
' Callbacks for edgeLabelAngle

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeLabelAngle_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    StyleDesignerSheet.Range(DESIGNER_EDGE_LABEL_ANGLE).value = Mid$(controlId, Len("angle_") + 1)
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeLabelAngle_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetListIndex(LISTS_EDGE_ANGLES, DESIGNER_EDGE_LABEL_ANGLE)
End Sub

' ===========================================================================
' Callbacks for edgeLabelDistance

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeLabelDistance_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    StyleDesignerSheet.Range(DESIGNER_EDGE_LABEL_DISTANCE).value = Mid$(controlId, Len("distance_") + 1)
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeLabelDistance_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetListIndex(LISTS_EDGE_LABEL_DISTANCES, DESIGNER_EDGE_LABEL_DISTANCE)
End Sub

' ===========================================================================
' Callbacks for borderPenWidth

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub borderPenWidth_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    StyleDesignerSheet.Range(DESIGNER_BORDER_PEN_WIDTH).value = Mid$(controlId, Len("bw_") + 1)
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub borderPenWidth_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetListIndex(LISTS_PEN_WIDTH, DESIGNER_BORDER_PEN_WIDTH)
End Sub

' ===========================================================================
' Callbacks for borderPeripheries

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub borderPeripheries_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    StyleDesignerSheet.Range(DESIGNER_BORDER_PERIPHERIES).value = Mid$(controlId, Len("p_") + 1)
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub borderPeripheries_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetListIndex(LISTS_PERIPHERIES, DESIGNER_BORDER_PERIPHERIES)
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub borderPeripheries_getVisible(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = StyleDesignerSheet.Range(DESIGNER_MODE).value = KEYWORD_NODE
End Sub

' ===========================================================================
' Callbacks for designModeNode

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub designModeNode_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    StyleDesignerSheet.Range(DESIGNER_MODE).value = KEYWORD_NODE
    InvalidateDesignMode
    RefreshStyleDesignerRibbon
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub designModeNode_getPressed(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = StyleDesignerSheet.Range(DESIGNER_MODE).value = KEYWORD_NODE
End Sub

Private Sub InvalidateDesignMode()
    InvalidateRibbonControl RIBBON_CTL_DESIGN_MODE_NODE
    InvalidateRibbonControl RIBBON_CTL_DESIGN_MODE_EDGE
    InvalidateRibbonControl RIBBON_CTL_DESIGN_MODE_CLUSTER
    InvalidateRibbonControl RIBBON_CTL_EDGE_LABEL_ANGLE
    InvalidateRibbonControl RIBBON_CTL_EDGE_LABEL_DECORATE
    InvalidateRibbonControl RIBBON_CTL_EDGE_LABEL_DISTANCE
    InvalidateRibbonControl RIBBON_CTL_EDGE_LABEL_FLOAT
    InvalidateRibbonControl RIBBON_CTL_LABEL_STYLE_SEPARATOR
End Sub

' ===========================================================================
' Callbacks for designModeEdge

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub designModeEdge_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    StyleDesignerSheet.Range(DESIGNER_MODE).value = KEYWORD_EDGE
    InvalidateDesignMode
    RefreshStyleDesignerRibbon
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub designModeEdge_getPressed(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = StyleDesignerSheet.Range(DESIGNER_MODE).value = KEYWORD_EDGE
End Sub

' ===========================================================================
' Callbacks for designModeCluster

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub designModeCluster_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    StyleDesignerSheet.Range(DESIGNER_MODE).value = KEYWORD_CLUSTER
    InvalidateDesignMode
    RefreshStyleDesignerRibbon
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub designModeCluster_getPressed(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = StyleDesignerSheet.Range(DESIGNER_MODE).value = KEYWORD_CLUSTER
End Sub

Private Sub RefreshStyleDesignerRibbon()
    InvalidateRibbonControl RIBBON_GRP_LABELS
    InvalidateRibbonControl RIBBON_CTL_LABEL_JUSTIFICATION
    InvalidateRibbonControl RIBBON_GRP_ALIGN
    InvalidateRibbonControl RIBBON_GRP_JUSTIFY
    InvalidateRibbonControl RIBBON_GRP_BORDERS
    InvalidateRibbonControl RIBBON_GRP_FILL_COLOR
    InvalidateRibbonControl RIBBON_GRP_GRADIENT_FILL_COLOR
    InvalidateRibbonControl RIBBON_GRP_NODE_SHAPE
    InvalidateRibbonControl RIBBON_CTL_BORDER_PERIPHERIES
    InvalidateRibbonControl RIBBON_GRP_NODE_DIMENSIONS
    InvalidateRibbonControl RIBBON_GRP_NODE_IMAGE
    InvalidateRibbonControl RIBBON_GRP_EDGE_STYLE
    InvalidateRibbonControl RIBBON_GRP_EDGE_COLORS
    InvalidateRibbonControl RIBBON_GRP_EDGE_HEAD_TAIL
    InvalidateRibbonControl RIBBON_GRP_EDGE_ARROW
    InvalidateRibbonControl RIBBON_GRP_EDGE_ARROW_HEAD
    InvalidateRibbonControl RIBBON_GRP_EDGE_ARROW_TAIL
End Sub

' ===========================================================================
' Callbacks for fillColor

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub fillColor_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetColorIndex(DESIGNER_FILL_COLOR)
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub fillColor_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    SaveColor index, DESIGNER_FILL_COLOR
    If StyleDesignerSheet.Range(DESIGNER_FILL_COLOR).value = vbNullString Then
        StyleDesignerSheet.Range("GradientFillColor,GradientFillType,GradientFillAngle").ClearContents
    End If
    InvalidateRibbonControl RIBBON_GRP_GRADIENT_FILL_COLOR
    RenderPreview
End Sub

' ===========================================================================
' Callbacks for gradientFillColor

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub gradientFillColor_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetColorIndex(DESIGNER_GRADIENT_FILL_COLOR)
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub gradientFillColor_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    SaveColor index, DESIGNER_GRADIENT_FILL_COLOR
    If StyleDesignerSheet.Range(DESIGNER_GRADIENT_FILL_COLOR).value = vbNullString Then
        StyleDesignerSheet.Range("GradientFillType,GradientFillAngle").ClearContents
    End If
    InvalidateRibbonControl RIBBON_CTL_GRADIENT_FILL_TYPE
    InvalidateRibbonControl RIBBON_CTL_GRADIENT_FILL_ANGLE
    RenderPreview
End Sub

' ===========================================================================
' Callbacks for gradientFillType

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub gradientFillType_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    StyleDesignerSheet.Range(DESIGNER_GRADIENT_FILL_TYPE).value = Mid$(controlId, Len("ft_") + 1)
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub gradientFillType_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetListIndex(LISTS_GRADIENT_TYPE, DESIGNER_GRADIENT_FILL_TYPE)
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub gradientFillType_getVisible(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = Not IsEmpty(StyleDesignerSheet.Range(DESIGNER_GRADIENT_FILL_COLOR))
End Sub

' ===========================================================================
' Callbacks for gradientFillAngle

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub gradientFillAngle_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    StyleDesignerSheet.Range(DESIGNER_GRADIENT_FILL_ANGLE).value = Mid$(controlId, Len("a_") + 1)
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub gradientFillAngle_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetListIndex(LISTS_ANGLE, DESIGNER_GRADIENT_FILL_ANGLE)
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub gradientFillAngle_getVisible(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = Not IsEmpty(StyleDesignerSheet.Range(DESIGNER_GRADIENT_FILL_COLOR))
End Sub

' ===========================================================================
' Callbacks for labelJustification

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub labelJustification_getVisible(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = StyleDesignerSheet.Range(DESIGNER_MODE).value = KEYWORD_CLUSTER
End Sub

' ===========================================================================
' Callbacks for headPort

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeHeadPort_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    StyleDesignerSheet.Range(DESIGNER_EDGE_HEAD_PORT).value = Mid$(controlId, Len("hp_") + 1)
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeHeadPort_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetListIndex(LISTS_PORTS, DESIGNER_EDGE_HEAD_PORT)
End Sub

' ===========================================================================
' Callbacks for tailPort

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeTailPort_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    StyleDesignerSheet.Range(DESIGNER_EDGE_TAIL_PORT).value = Mid$(controlId, Len("tp_") + 1)
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeTailPort_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetListIndex(LISTS_PORTS, DESIGNER_EDGE_TAIL_PORT)
End Sub

' ===========================================================================
' Callbacks for edgeStyle

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeStyle_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    StyleDesignerSheet.Range(DESIGNER_EDGE_STYLE).value = Mid$(controlId, Len("es_") + 1)
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeStyle_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetListIndex(LISTS_EDGE_STYLES, DESIGNER_EDGE_STYLE)
End Sub

' ===========================================================================
' Callbacks for nodeShape

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub nodeShape_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    StyleDesignerSheet.Range(DESIGNER_NODE_SHAPE).value = Mid$(controlId, Len("s_") + 1)
    StyleDesignerSheet.Range("NodeSides,NodeOrientation,NodeRegular,NodeSkew,NodeDistortion").ClearContents
    InvalidateRibbonControl RIBBON_GRP_NODE_POLYGON
    InvalidateRibbonControl RIBBON_CTL_NODE_SIDES
    InvalidateRibbonControl RIBBON_CTL_NODE_REGULAR
    InvalidateRibbonControl RIBBON_CTL_NODE_ROTATION
    InvalidateRibbonControl RIBBON_CTL_POLYGON_SEPARATOR
    InvalidateRibbonControl RIBBON_CTL_NODE_SKEW
    InvalidateRibbonControl RIBBON_CTL_NODE_DISTORTION
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub nodeShape_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetListIndex(LISTS_SHAPES, DESIGNER_NODE_SHAPE)
End Sub

' GetVisible callback for polygon shape

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub nodeShape_isPolygon(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = StyleDesignerSheet.Range(DESIGNER_NODE_SHAPE).value = "polygon"
End Sub

' ===========================================================================
' Callbacks for nodeSides

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub nodeSides_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    StyleDesignerSheet.Range(DESIGNER_NODE_SIDES).value = Mid$(controlId, Len("si_") + 1)
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub nodeSides_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetListIndex(LISTS_SIDES, DESIGNER_NODE_SIDES)
End Sub

' ===========================================================================
' Callbacks for nodeRotation

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub nodeRotation_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    StyleDesignerSheet.Range(DESIGNER_NODE_ORIENTATION).value = Mid$(controlId, Len("r_") + 1)
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub nodeRotation_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetListIndex(LISTS_ANGLE, DESIGNER_NODE_ORIENTATION)
End Sub

' ===========================================================================
' Callbacks for borderStyle1

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub borderStyle1_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    StyleDesignerSheet.Range(DESIGNER_BORDER_STYLE1).value = Mid$(controlId, Len("bs1_") + 1)
    If StyleDesignerSheet.Range(DESIGNER_BORDER_STYLE1).value = vbNullString Then
        StyleDesignerSheet.Range("BorderStyle2,BorderStyle3").ClearContents
    End If
    InvalidateRibbonControl RIBBON_CTL_BORDER_STYLE2
    InvalidateRibbonControl RIBBON_CTL_BORDER_STYLE3
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub borderStyle1_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetListIndex(LISTS_STYLES, DESIGNER_BORDER_STYLE1)
End Sub

' ===========================================================================
' Callbacks for BorderStyle2

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub borderStyle2_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    StyleDesignerSheet.Range(DESIGNER_BORDER_STYLE2).value = Mid$(controlId, Len("bs2_") + 1)
    If StyleDesignerSheet.Range(DESIGNER_BORDER_STYLE2).value = vbNullString Then
        StyleDesignerSheet.Range(DESIGNER_BORDER_STYLE3).ClearContents
    End If
    InvalidateRibbonControl RIBBON_CTL_BORDER_STYLE3
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub borderStyle2_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetListIndex(LISTS_STYLES, DESIGNER_BORDER_STYLE2)
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub borderStyle2_getVisible(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = Not IsEmpty(StyleDesignerSheet.Range(DESIGNER_BORDER_STYLE1))
End Sub

' ===========================================================================
' Callbacks for borderStyle3

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub borderStyle3_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    StyleDesignerSheet.Range(DESIGNER_BORDER_STYLE3).value = Mid$(controlId, Len("bs3_") + 1)
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub borderStyle3_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetListIndex(LISTS_STYLES, DESIGNER_BORDER_STYLE3)
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub borderStyle3_getVisible(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = Not IsEmpty(StyleDesignerSheet.Range(DESIGNER_BORDER_STYLE2))
End Sub

' ===========================================================================
' Callbacks for nodeHeight

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub nodeHeight_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    StyleDesignerSheet.Range(DESIGNER_NODE_HEIGHT).value = Mid$(controlId, Len("h_") + 1)
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub nodeHeight_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetListIndex(LISTS_SHAPE_SIZES, DESIGNER_NODE_HEIGHT)
End Sub

' ===========================================================================
' Callbacks for nodeWidth

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub nodeWidth_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    StyleDesignerSheet.Range(DESIGNER_NODE_WIDTH).value = Mid$(controlId, Len("w_") + 1)
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub nodeWidth_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetListIndex(LISTS_SHAPE_SIZES, DESIGNER_NODE_WIDTH)
End Sub

' ===========================================================================
' Callbacks for nodeFixedSize

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub nodeFixedSize_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    StyleDesignerSheet.Range(DESIGNER_NODE_FIXED_SIZE).value = Mid$(controlId, Len("fs_") + 1)
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub nodeFixedSize_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetListIndex(LISTS_FIXED_SIZE, DESIGNER_NODE_FIXED_SIZE)
End Sub

' ===========================================================================
' Callbacks for edgeColor1

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeColor1_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetColorIndex(DESIGNER_EDGE_COLOR_1)
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeColor1_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    Application.EnableEvents = False
    
    SaveColor index, DESIGNER_EDGE_COLOR_1
    
    If StyleDesignerSheet.Range(DESIGNER_EDGE_COLOR_1).value = vbNullString Then
        StyleDesignerSheet.Range("EdgeColor2,EdgeColor3").ClearContents
    End If
    
    InvalidateRibbonControl RIBBON_CTL_EDGE_COLOR2
    InvalidateRibbonControl RIBBON_CTL_EDGE_COLOR3
    
    Application.EnableEvents = True
    RenderPreview
End Sub

' ===========================================================================
' Callbacks for edgeColor2

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeColor2_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetColorIndex(DESIGNER_EDGE_COLOR_2)
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeColor2_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    Application.EnableEvents = False
    
    SaveColor index, DESIGNER_EDGE_COLOR_2
    
    If StyleDesignerSheet.Range(DESIGNER_EDGE_COLOR_2).value = vbNullString Then
        StyleDesignerSheet.Range(DESIGNER_EDGE_COLOR_3).ClearContents
    End If
    
    InvalidateRibbonControl RIBBON_CTL_EDGE_COLOR3
    Application.EnableEvents = True
    
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeColor2_getVisible(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = Not IsEmpty(StyleDesignerSheet.Range(DESIGNER_EDGE_COLOR_1))
End Sub

' ===========================================================================
' Callbacks for edgeColor3

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeColor3_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetColorIndex(DESIGNER_EDGE_COLOR_3)
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeColor3_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    SaveColor index, DESIGNER_EDGE_COLOR_3
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeColor3_getVisible(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = Not IsEmpty(StyleDesignerSheet.Range(DESIGNER_EDGE_COLOR_2))
End Sub

' ===========================================================================
' Callbacks for Arrow Tail

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub groupArrowHead_getVisible(ByVal control As IRibbonControl, ByRef visible As Variant)
    Dim direction As String
    Dim mode As String
    
    direction = UCase$(StyleDesignerSheet.Range(DESIGNER_EDGE_DIRECTION))
    mode = UCase$(StyleDesignerSheet.Range(DESIGNER_MODE))
    
    visible = mode = KEYWORD_EDGE And (direction = vbNullString Or direction = "FORWARD" Or direction = "BOTH")
End Sub

' ===========================================================================
' Callbacks for edgeArrowHead1

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeArrowHead1_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetListIndex(LISTS_ARROW_HEADS, DESIGNER_EDGE_ARROW_HEAD_1)
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeArrowHead1_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    StyleDesignerSheet.Range(DESIGNER_EDGE_ARROW_HEAD_1).value = Mid$(controlId, Len("h1_") + 1)
    If StyleDesignerSheet.Range(DESIGNER_EDGE_ARROW_HEAD_1).value = vbNullString Then
        StyleDesignerSheet.Range("EdgeArrowHead2,EdgeArrowHead3").ClearContents
    End If
    InvalidateRibbonControl RIBBON_CTL_EDGE_ARROW_HEAD2
    InvalidateRibbonControl RIBBON_CTL_EDGE_ARROW_HEAD3
    RenderPreview
End Sub

' ===========================================================================
' Callbacks for edgeArrowHead2

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeArrowHead2_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetListIndex(LISTS_ARROW_HEADS, DESIGNER_EDGE_ARROW_HEAD_2)
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeArrowHead2_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    StyleDesignerSheet.Range(DESIGNER_EDGE_ARROW_HEAD_2).value = Mid$(controlId, Len("h2_") + 1)
    If StyleDesignerSheet.Range(DESIGNER_EDGE_ARROW_HEAD_2).value = vbNullString Then
        StyleDesignerSheet.Range(DESIGNER_EDGE_ARROW_HEAD_3).ClearContents
    End If
    InvalidateRibbonControl RIBBON_CTL_EDGE_ARROW_HEAD3
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeArrowHead2_getVisible(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = Not IsEmpty(StyleDesignerSheet.Range(DESIGNER_EDGE_ARROW_HEAD_1))
End Sub

' ===========================================================================
' Callbacks for edgeArrowHead3

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeArrowHead3_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetListIndex(LISTS_ARROW_HEADS, DESIGNER_EDGE_ARROW_HEAD_3)
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeArrowHead3_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    StyleDesignerSheet.Range(DESIGNER_EDGE_ARROW_HEAD_3).value = Mid$(controlId, Len("h3_") + 1)
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeArrowHead3_getVisible(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = Not IsEmpty(StyleDesignerSheet.Range(DESIGNER_EDGE_ARROW_HEAD_2))
End Sub

' ===========================================================================
' Callbacks for Arrow Tail

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub groupArrowTail_getVisible(ByVal control As IRibbonControl, ByRef visible As Variant)
    Dim direction As String
    Dim mode As String
    
    direction = UCase$(StyleDesignerSheet.Range(DESIGNER_EDGE_DIRECTION))
    mode = UCase$(StyleDesignerSheet.Range(DESIGNER_MODE))
    
    visible = mode = KEYWORD_EDGE And (direction = "BACK" Or direction = "BOTH")
End Sub

' ===========================================================================
' Callbacks for edgeArrowTail1

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeArrowTail1_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetListIndex(LISTS_ARROW_TAILS, DESIGNER_EDGE_ARROW_TAIL_1)
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeArrowTail1_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    StyleDesignerSheet.Range(DESIGNER_EDGE_ARROW_TAIL_1).value = Mid$(controlId, Len("t1_") + 1)
    If StyleDesignerSheet.Range(DESIGNER_EDGE_ARROW_TAIL_1).value = vbNullString Then
        StyleDesignerSheet.Range("EdgeArrowTail2,EdgeArrowTail3").ClearContents
    End If
    InvalidateRibbonControl RIBBON_CTL_EDGE_ARROW_TAIL2
    InvalidateRibbonControl RIBBON_CTL_EDGE_ARROW_TAIL3
    InvalidateRibbonControl RIBBON_CTL_EDGE_DIRECTION
    RenderPreview
End Sub

' ===========================================================================
' Callbacks for edgeArrowTail2

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeArrowTail2_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetListIndex(LISTS_ARROW_TAILS, DESIGNER_EDGE_ARROW_TAIL_2)
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeArrowTail2_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    StyleDesignerSheet.Range(DESIGNER_EDGE_ARROW_TAIL_2).value = Mid$(controlId, Len("t2_") + 1)
    If StyleDesignerSheet.Range(DESIGNER_EDGE_ARROW_TAIL_2).value = vbNullString Then
        StyleDesignerSheet.Range(DESIGNER_EDGE_ARROW_TAIL_3).ClearContents
    End If
    InvalidateRibbonControl RIBBON_CTL_EDGE_ARROW_TAIL3
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeArrowTail2_getVisible(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = Not IsEmpty(StyleDesignerSheet.Range(DESIGNER_EDGE_ARROW_TAIL_1))
End Sub

' ===========================================================================
' Callbacks for edgeArrowTail3

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeArrowTail3_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetListIndex(LISTS_ARROW_TAILS, DESIGNER_EDGE_ARROW_TAIL_3)
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeArrowTail3_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    StyleDesignerSheet.Range(DESIGNER_EDGE_ARROW_TAIL_3).value = Mid$(controlId, Len("t3_") + 1)
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeArrowTail3_getVisible(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = Not IsEmpty(StyleDesignerSheet.Range(DESIGNER_EDGE_ARROW_TAIL_2))
End Sub

' ===========================================================================
' Callbacks for edgeDirection

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeDirection_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    Dim direction As String
    direction = Mid$(controlId, Len("ed_") + 1)
    
    StyleDesignerSheet.Range(DESIGNER_EDGE_DIRECTION).value = direction
    
    direction = UCase$(direction)
    
    If direction = vbNullString Then
        StyleDesignerSheet.Range("EdgeArrowTail1,EdgeArrowTail2,EdgeArrowTail3").ClearContents
    
    ElseIf direction = "BACK" Then
        StyleDesignerSheet.Range("EdgeArrowHead1,EdgeArrowHead2,EdgeArrowHead3").ClearContents
    
    ElseIf direction = "BOTH" Then
        ' No action to take
    
    ElseIf direction = "FORWARD" Then
        StyleDesignerSheet.Range("EdgeArrowTail1,EdgeArrowTail2,EdgeArrowTail3").ClearContents
   
    ElseIf direction = "NONE" Then
        StyleDesignerSheet.Range("EdgeArrowHead1,EdgeArrowHead2,EdgeArrowHead3,EdgeArrowTail1,EdgeArrowTail2,EdgeArrowTail3,EdgeArrowSize").ClearContents
    End If
    
    InvalidateRibbonControl RIBBON_CTL_EDGE_ARROW_SIZE
    
    InvalidateRibbonControl RIBBON_CTL_EDGE_ARROW_HEAD1
    InvalidateRibbonControl RIBBON_CTL_EDGE_ARROW_HEAD2
    InvalidateRibbonControl RIBBON_CTL_EDGE_ARROW_HEAD3
    InvalidateRibbonControl RIBBON_GRP_EDGE_ARROW_HEAD
    
    InvalidateRibbonControl RIBBON_CTL_EDGE_ARROW_TAIL1
    InvalidateRibbonControl RIBBON_CTL_EDGE_ARROW_TAIL2
    InvalidateRibbonControl RIBBON_CTL_EDGE_ARROW_TAIL3
    InvalidateRibbonControl RIBBON_GRP_EDGE_ARROW_TAIL
    
    InvalidateRibbonControl RIBBON_GRP_EDGE_ARROW
    
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeDirection_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetListIndex(LISTS_DIRECTION, DESIGNER_EDGE_DIRECTION)
End Sub

' ===========================================================================
' Callbacks for edgeArrowSize

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeArrowSize_getVisible(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    Dim direction As String
    direction = UCase$(StyleDesignerSheet.Range(DESIGNER_EDGE_DIRECTION))
    
    returnedVal = Not (direction = "NONE")
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeArrowSize_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    StyleDesignerSheet.Range(DESIGNER_EDGE_ARROW_SIZE).value = Mid$(controlId, Len("as_") + 1)
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeArrowSize_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetListIndex(LISTS_ARROW_SIZE, DESIGNER_EDGE_ARROW_SIZE)
End Sub

' ===========================================================================
' Callbacks for edgePenWidth

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgePenWidth_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    StyleDesignerSheet.Range(DESIGNER_EDGE_PEN_WIDTH).value = Mid$(controlId, Len("ew_") + 1)
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgePenWidth_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetListIndex(LISTS_PEN_WIDTH, DESIGNER_EDGE_PEN_WIDTH)
End Sub

' ===========================================================================
' Callbacks for nodeImageName

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub nodeImageName_onChange(ByVal control As IRibbonControl, ByVal text As String)
    StyleDesignerSheet.Range(DESIGNER_NODE_IMAGE_NAME).value = text
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub nodeImageName_getText(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = Trim$(StyleDesignerSheet.Range(DESIGNER_NODE_IMAGE_NAME))
End Sub

' ===========================================================================
' Callbacks for nodeRegular

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub regular_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    StyleDesignerSheet.Range(DESIGNER_NODE_REGULAR).value = Toggle(pressed, TOGGLE_YES, TOGGLE_NO)
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub regular_getPressed(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = StyleDesignerSheet.Range(DESIGNER_NODE_REGULAR).value = TOGGLE_YES
End Sub

' ===========================================================================
' Callbacks for nodeSkew

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub nodeSkew_onChange(ByVal control As IRibbonControl, ByVal text As String)
    StyleDesignerSheet.Range(DESIGNER_NODE_SKEW).value = text
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub nodeSkew_getText(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = Trim$(StyleDesignerSheet.Range(DESIGNER_NODE_SKEW))
End Sub

' ===========================================================================
' Callbacks for nodeDistortion

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub nodeDistortion_onChange(ByVal control As IRibbonControl, ByVal text As String)
    StyleDesignerSheet.Range(DESIGNER_NODE_DISTORTION).value = text
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub nodeDistortion_getText(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = Trim$(StyleDesignerSheet.Range(DESIGNER_NODE_DISTORTION))
End Sub

' ===========================================================================
' Callbacks for nodeImageSelect

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub nodeImageChoose_onAction(ByVal control As IRibbonControl)
    Dim fDialog As FileDialog
    Dim pathArray() As String
    Dim fileName As String
    Dim directoryName As String
    Dim settingsImagePath As String
    
    Dim choice As Long
    Dim index As Long
    
    Dim boolOnPath As Boolean
    boolOnPath = False
    
    ' Images can be consolidated in a directory reference of an enviornment variable
    Dim ExcelToGraphvizImageDirectory As String
    ExcelToGraphvizImageDirectory = Trim$(Environ$("ExcelToGraphvizImages"))
    
    ' Set the options for the file picker dialog
    Set fDialog = Application.FileDialog(msoFileDialogFilePicker)
    fDialog.AllowMultiSelect = False
    fDialog.Title = "Select an image file"
    fDialog.InitialFileName = ActiveWorkbook.path
    fDialog.Filters.Clear
    fDialog.Filters.Add "Image files", "*.bmp;*.gif;*.jpg;*.jpeg;*.png;*.ps;*.svg"
    fDialog.Filters.Add "All files", "*.*"
    
    'get the number of the button chosen
    choice = fDialog.show
    If choice <> -1 Then                         ' user selected cancel, do not continue any farther
        Exit Sub
    End If
    
    ' Split the complete file name into directory and filename components. The Graphviz image
    ' attribute only wants the filename specified, and looks to find the file on the image path
    Dim pathComponents() As String
    pathComponents = Split(fDialog.SelectedItems(1), "\")
    fileName = pathComponents(UBound(pathComponents))
    directoryName = Left$(fDialog.SelectedItems(1), Len(fDialog.SelectedItems(1)) - Len(fileName) - 1)
    
    If ImageFoundInEnvVariablePath(directoryName) Then
        ' No need to alter the saved image path
    ElseIf Not ImageFoundInCurrentDir(directoryName) Then ' Image is not in the workbook directory.
        ' All .gv files created by this tool specify the workbook path on the image path.
        ' If the image file is in the current workbook directory then nothing more needs
        ' to be done to make it render properly.
        
        settingsImagePath = SettingsSheet.Range(SETTINGS_IMAGE_PATH)
        If settingsImagePath = vbNullString Then
            ' If an image path has not been specified in the Settings worksheet the easiest thing
            ' to do is save the image directory there.
            SettingsSheet.Range(SETTINGS_IMAGE_PATH).value = directoryName
        Else
            ' One of more paths are already specified. We don't want to add duplicates, so run
            ' a test to see if the directory is already within the path concatenation
            pathArray = Split(settingsImagePath, SEMICOLON)
            For index = LBound(pathArray) To UBound(pathArray)
                If pathArray(index) = directoryName Then
                    ' The directory is in the path concatenation, no need to do any more checks
                    boolOnPath = True
                    Exit For
                End If
            Next index
            
            If Not boolOnPath Then
                ' Append the directory to the current ImagePath setting and save it to the Settings worksheet
                settingsImagePath = settingsImagePath & SEMICOLON & directoryName
                SettingsSheet.Range(SETTINGS_IMAGE_PATH).value = settingsImagePath
            End If
        End If
    End If
    
    ' Display the filename in the ribbon
    StyleDesignerSheet.Range(DESIGNER_NODE_IMAGE_NAME).value = fileName
    InvalidateRibbonControl "nodeImageName"
    
    ' Update the Node preview
    RenderPreview
    
    ' Clean up objects
    Set fDialog = Nothing
End Sub

Private Function ImageFoundInEnvVariablePath(ByVal directoryName As String) As Boolean
    ImageFoundInEnvVariablePath = UCase$(directoryName) = UCase$(Trim$(Environ$("ExcelToGraphvizImages")))
End Function

Private Function ImageFoundInCurrentDir(ByVal directoryName As String) As Boolean
    ImageFoundInCurrentDir = UCase$(directoryName) = UCase$(ActiveWorkbook.path)
End Function


' ===========================================================================
' Callbacks for nodeImageScale

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub nodeImageScale_onAction(ByVal control As IRibbonControl, ByVal controlId As String, ByVal index As Long)
    StyleDesignerSheet.Range(DESIGNER_NODE_IMAGE_SCALE).value = Mid$(controlId, Len("is_") + 1)
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub nodeImageScale_getSelectedItemIndex(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetListIndex(LISTS_IMAGE_SCALE, DESIGNER_NODE_IMAGE_SCALE)
End Sub

' ===========================================================================
' Callbacks for edgeHeadClip

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeHeadClip_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    If pressed Then
        StyleDesignerSheet.Range(DESIGNER_EDGE_HEAD_CLIP).ClearContents
    Else
        StyleDesignerSheet.Range(DESIGNER_EDGE_HEAD_CLIP).value = TOGGLE_NO
    End If
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeHeadClip_getPressed(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    If StyleDesignerSheet.Range(DESIGNER_EDGE_HEAD_CLIP).value = vbNullString Then
        returnedVal = True
    Else
        returnedVal = GetCellBoolean(WORKSHEET_STYLE_DESIGNER, DESIGNER_EDGE_HEAD_CLIP)
    End If
End Sub

' ===========================================================================
' Callbacks for edgeTailClip

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeTailClip_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    If pressed Then
        StyleDesignerSheet.Range(DESIGNER_EDGE_TAIL_CLIP).ClearContents
    Else
        StyleDesignerSheet.Range(DESIGNER_EDGE_TAIL_CLIP).value = TOGGLE_NO
    End If
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeTailClip_getPressed(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    If StyleDesignerSheet.Range(DESIGNER_EDGE_TAIL_CLIP).value = vbNullString Then
        returnedVal = True
    Else
        returnedVal = GetCellBoolean(WORKSHEET_STYLE_DESIGNER, DESIGNER_EDGE_TAIL_CLIP)
    End If
End Sub

' ===========================================================================
' Callbacks for edgeDecorate

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeDecorate_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    If pressed Then
        StyleDesignerSheet.Range(DESIGNER_EDGE_DECORATE).value = TOGGLE_YES
    Else
        StyleDesignerSheet.Range(DESIGNER_EDGE_DECORATE).ClearContents
    End If
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeDecorate_getPressed(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetCellBoolean(WORKSHEET_STYLE_DESIGNER, DESIGNER_EDGE_DECORATE)
End Sub

' ===========================================================================
' Callbacks for edgeLabelFloat

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeLabelFloat_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    If pressed Then
        StyleDesignerSheet.Range(DESIGNER_EDGE_LABEL_FLOAT).value = TOGGLE_YES
    Else
        StyleDesignerSheet.Range(DESIGNER_EDGE_LABEL_FLOAT).ClearContents
    End If
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub edgeLabelFloat_getPressed(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetCellBoolean(WORKSHEET_STYLE_DESIGNER, DESIGNER_EDGE_LABEL_FLOAT)
End Sub

' ===========================================================================
' Callbacks for clearStyleRibbon

Public Sub ClearStyleRibbon()
    OptimizeCode_Begin
    
    StyleDesignerSheet.Range("ColorScheme,FontName,FontSize,FontColor,BorderColor,BorderColor,BorderPenWidth,BorderPeripheries").ClearContents
    StyleDesignerSheet.Range("FillColor,GradientFillColor,GradientFillType,GradientFillAngle,LabelLocation,LabelJustification,EdgeStyle,EdgeHeadPort,EdgeTailPort,EdgeColor1,EdgeColor2,EdgeColor3").ClearContents
    StyleDesignerSheet.Range("NodeShape,NodeSides,NodeOrientation,NodeRegular,NodeSkew,NodeDistortion,BorderStyle1,BorderStyle2,BorderStyle3").ClearContents
    StyleDesignerSheet.Range("NodeHeight,NodeWidth,NodeFixedSize,EdgeArrowHead1,EdgeArrowHead2,EdgeArrowHead3,EdgeDecorate,EdgeLabelFloat").ClearContents
    StyleDesignerSheet.Range("EdgeArrowTail1,EdgeArrowTail2,EdgeArrowTail3,EdgeDirection,EdgeArrowSize,EdgeWeight,EdgeLabelAngle,EdgeLabelDistance").ClearContents
    StyleDesignerSheet.Range("EdgePenWidth,NodeImageName,NodeImageScale,EdgeHeadClip,EdgeTailClip").ClearContents
    StyleDesignerSheet.Range("FontBold,FontItalic").ClearContents
  
    RefreshRibbon tag:="*Tab"

    OptimizeCode_End
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub clearStyleRibbon_onAction(ByVal control As IRibbonControl)
    ClearStyleRibbon
End Sub

' ===========================================================================
' Callbacks for saveToStylesWorksheet

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub saveToStylesWorksheet_getEnabled(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = Not (StyleDesignerSheet.Range(DESIGNER_FORMAT_STRING).value = vbNullString)
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub saveToStylesWorksheet_onAction(ByVal control As IRibbonControl)
    Dim row As Long
    Dim rowFocus As Long
    Dim col As Long
    Dim styleType As String
    Dim defaultStyleName As String
    
    ' Obtain the layout of the "styles' worksheet
    Dim styles As stylesWorksheet
    styles = GetSettingsForStylesWorksheet()
    
    ' Map the 'Design Mode' dropdown value to the Object Type
    Select Case UCase$(StyleDesignerSheet.Range(DESIGNER_MODE))
        Case "NODE"
            styleType = "node"
        Case "EDGE"
            styleType = "edge"
        Case "CLUSTER"
            styleType = "subgraph-open"
    End Select
    
    ' Increment the count to reflect the style we are adding
    Dim objectCount As Long
    objectCount = GetStyleCount(styleType, styles) + 1
    
    ' Create default style name
    Select Case UCase$(StyleDesignerSheet.Range(DESIGNER_MODE))
        Case "NODE"
            defaultStyleName = "Node style " & objectCount
        Case "EDGE"
            defaultStyleName = "Edge style " & objectCount
        Case "CLUSTER"
            defaultStyleName = "Cluster style " & objectCount & " Begin"
    End Select
    
    ' Look for a row that does not have a style name
    For row = styles.firstRow To styles.lastRow
        If StylesSheet.Cells(row, styles.flagColumn) <> FLAG_COMMENT And _
           StylesSheet.Cells(row, styles.nameColumn).value = vbNullString Then
            Exit For
        End If
    Next row
    
    ' Save the row number so we know where to place the focus if the DESIGNER_MODE = CLUSTER
    rowFocus = row
    
    ' Set the format string and the object type
    
    StylesSheet.Cells(row, styles.nameColumn).value = defaultStyleName
    StylesSheet.Cells(row, styles.formatColumn).value = StyleDesignerSheet.Range(DESIGNER_FORMAT_STRING)
    StylesSheet.Cells(row, styles.typeColumn).value = styleType

    ' Loop through the columns which have column headings and put a value of 'yes' in the cell
    For col = styles.firstYesNoColumn To GetLastColumn(WORKSHEET_STYLES, styles.headingRow)
        If StylesSheet.Cells(styles.headingRow, col) <> vbNullString Then
            StylesSheet.Cells(row, col).value = "yes"
        End If
    Next col
    
    ' If the style is CLUSTER we want to add a row for the subgraph-close, as it improves filtering capabilities
    If UCase$(StyleDesignerSheet.Range(DESIGNER_MODE).value) = "CLUSTER" Then
        styleType = "subgraph-close"
        defaultStyleName = "Cluster style " & objectCount & " End"
   
        ' Look for a row that does not have a style name
        For row = styles.firstRow To styles.lastRow
            If StylesSheet.Cells(row, styles.flagColumn) <> FLAG_COMMENT And _
               StylesSheet.Cells(row, styles.nameColumn).value = vbNullString Then
                Exit For
            End If
        Next row

        ' Set the format string and the object type
        SetCell WORKSHEET_STYLES, row, styles.nameColumn, defaultStyleName
        SetCell WORKSHEET_STYLES, row, styles.formatColumn, vbNullString
        SetCell WORKSHEET_STYLES, row, styles.typeColumn, styleType

        ' Loop through the columns which have column headings and put a value of 'yes' in the cell
        For col = styles.firstYesNoColumn To GetLastColumn(WORKSHEET_STYLES, styles.headingRow)
            If StylesSheet.Cells(styles.headingRow, col) <> vbNullString Then
                SetCell WORKSHEET_STYLES, row, col, "yes"
            End If
        Next col
    End If
    
    ' Put the focus on the cell where the style name has to be entered
    StylesSheet.Activate
    ActiveSheet.Cells(rowFocus, styles.nameColumn).Select
    
End Sub

Private Function GetStyleCount(ByVal styleType As String, ByRef styles As stylesWorksheet) As Long
    Dim row As Long
    Dim styleCount As Long
    
    styleCount = 0
    
    For row = styles.firstRow To styles.lastRow
        If StylesSheet.Cells(row, styles.typeColumn).value = styleType Then
            styleCount = styleCount + 1
        End If
    Next row

    GetStyleCount = styleCount
End Function

' ===========================================================================
' Callbacks for copyToClipboard

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub copyToClipboard_onAction(ByVal control As IRibbonControl)
    CopyNodeFormatToClipboard
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub copyToClipboard_getEnabled(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = Not (StyleDesignerSheet.Range(DESIGNER_FORMAT_STRING).value = vbNullString)
End Sub

' ===========================================================================
' Callbacks for alignTop

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub alignTop_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    StyleDesignerSheet.Range(DESIGNER_LABEL_LOCATION).value = Toggle(pressed, "top", vbNullString)
    InvalidateRibbonControl RIBBON_CTL_ALIGN_BOTTOM
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub alignTop_getPressed(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = StyleDesignerSheet.Range(DESIGNER_LABEL_LOCATION).value = "top"
End Sub

' ===========================================================================
' Callbacks for alignBottom

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub alignBottom_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    StyleDesignerSheet.Range(DESIGNER_LABEL_LOCATION).value = Toggle(pressed, "bottom", vbNullString)
    InvalidateRibbonControl RIBBON_CTL_ALIGN_TOP
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub alignBottom_getPressed(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = StyleDesignerSheet.Range(DESIGNER_LABEL_LOCATION).value = "bottom"
End Sub

' ===========================================================================
' Callbacks for justifyLeft

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub justifyLeft_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    StyleDesignerSheet.Range(DESIGNER_LABEL_JUSTIFICATION).value = Toggle(pressed, "left", vbNullString)
    InvalidateRibbonControl RIBBON_CTL_JUSTIFY_RIGHT
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub justifyLeft_getPressed(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = StyleDesignerSheet.Range(DESIGNER_LABEL_JUSTIFICATION).value = "left"
End Sub

' ===========================================================================
' Callbacks for justifyRight

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub justifyRight_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    StyleDesignerSheet.Range(DESIGNER_LABEL_JUSTIFICATION).value = Toggle(pressed, "right", vbNullString)
    InvalidateRibbonControl RIBBON_CTL_JUSTIFY_LEFT
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub justifyRight_getPressed(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = StyleDesignerSheet.Range(DESIGNER_LABEL_JUSTIFICATION).value = "right"
End Sub

' ===========================================================================
' Callbacks for fontBold

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub fontBold_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    StyleDesignerSheet.Range(DESIGNER_FONT_BOLD).value = Toggle(pressed, TOGGLE_YES, TOGGLE_NO)
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub fontBold_getPressed(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetCellBoolean(WORKSHEET_STYLE_DESIGNER, DESIGNER_FONT_BOLD)
End Sub

' ===========================================================================
' Callbacks for fontItalic

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub fontItalic_onAction(ByVal control As IRibbonControl, ByVal pressed As Boolean)
    StyleDesignerSheet.Range(DESIGNER_FONT_ITALIC).value = Toggle(pressed, TOGGLE_YES, TOGGLE_NO)
    RenderPreview
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub fontItalic_getPressed(ByVal control As IRibbonControl, ByRef returnedVal As Variant)
    returnedVal = GetCellBoolean(WORKSHEET_STYLE_DESIGNER, DESIGNER_FONT_ITALIC)
End Sub

' ===========================================================================
' Group visibility callbacks

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub designerGroupLabels_getVisible(ByVal control As IRibbonControl, ByRef visible As Variant)
    visible = StyleDesignerSheet.Range(DESIGNER_MODE).value = KEYWORD_NODE Or _
              StyleDesignerSheet.Range(DESIGNER_MODE).value = KEYWORD_CLUSTER
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub designerGroupBorders_getVisible(ByVal control As IRibbonControl, ByRef visible As Variant)
    visible = StyleDesignerSheet.Range(DESIGNER_MODE).value = KEYWORD_NODE Or _
              StyleDesignerSheet.Range(DESIGNER_MODE).value = KEYWORD_CLUSTER
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub designerGroupFillColor_getVisible(ByVal control As IRibbonControl, ByRef visible As Variant)
    visible = StyleDesignerSheet.Range(DESIGNER_MODE).value = KEYWORD_NODE Or _
              StyleDesignerSheet.Range(DESIGNER_MODE).value = KEYWORD_CLUSTER
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub designerGroupGradientFillColor_getVisible(ByVal control As IRibbonControl, ByRef visible As Variant)
    visible = False
    
    If StyleDesignerSheet.Range(DESIGNER_MODE).value = KEYWORD_NODE Or _
       StyleDesignerSheet.Range(DESIGNER_MODE).value = KEYWORD_CLUSTER Then
        If StyleDesignerSheet.Range(DESIGNER_FILL_COLOR) <> vbNullString Then
            visible = True
        End If
    End If
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub designerGroupNodeShape_getVisible(ByVal control As IRibbonControl, ByRef visible As Variant)
    visible = StyleDesignerSheet.Range(DESIGNER_MODE).value = KEYWORD_NODE
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub designerGroupNodeDimensions_getVisible(ByVal control As IRibbonControl, ByRef visible As Variant)
    visible = StyleDesignerSheet.Range(DESIGNER_MODE).value = KEYWORD_NODE
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub designerGroupNodeImage_getVisible(ByVal control As IRibbonControl, ByRef visible As Variant)
    visible = StyleDesignerSheet.Range(DESIGNER_MODE).value = KEYWORD_NODE
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub designerGroupEdgeStyle_getVisible(ByVal control As IRibbonControl, ByRef visible As Variant)
    visible = StyleDesignerSheet.Range(DESIGNER_MODE).value = KEYWORD_EDGE
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub designerGroupEdgeColors_getVisible(ByVal control As IRibbonControl, ByRef visible As Variant)
    visible = StyleDesignerSheet.Range(DESIGNER_MODE).value = KEYWORD_EDGE
End Sub

'@Ignore ProcedureNotUsed, ParameterNotUsed
Private Sub designerGroupEdgeArrows_getVisible(ByVal control As IRibbonControl, ByRef visible As Variant)
    visible = StyleDesignerSheet.Range(DESIGNER_MODE).value = KEYWORD_EDGE
End Sub

' ===========================================================================
' Utility routines

Public Sub RenderPreview()
    StyleDesignerSheet.Activate
    OptimizeCode_Begin
    RenderPreviewFromLists
    OptimizeCode_End
End Sub

Private Function GetColorIndex(ByVal cellName As String) As Long
    
    GetColorIndex = 0
    
    Dim color As String
    color = StyleDesignerSheet.Range(cellName)
    
    If color <> vbNullString Then
        ' Colors are determined by color scheme
        Dim colorScheme As String
        colorScheme = StyleDesignerSheet.Range(DESIGNER_COLOR_SCHEME)
        
        'If no color scheme is specified Graphviz defaults to the X11 color scheme
        If colorScheme = vbNullString Then
            colorScheme = COLOR_SCHEME_DEFAULT
        End If
        
        ' All named ranges of color names for a given color scheme begin with the prefix "CS_"
        colorScheme = COLOR_SCHEME_PREFIX & colorScheme
        
        ' Determine how many colors there are in the named range.
        Dim colorCount As Long
        colorCount = HelpColorsSheet.Range(colorScheme).count
        
        ' The X11 and SVG color schemes are stored in columns on the Colors worksheet. All others
        ' are stored in cells along one row. Getting the value to compare has to take into account
        ' if you are looping through the values top to bottom or left to right.
        
        Dim index As Long
        If colorScheme = "CS_X11" Or colorScheme = "CS_SVG" Then
            ' Iterate top to bottom
            For index = 1 To colorCount
                If HelpColorsSheet.Range(colorScheme).Cells(index, 1).value = color Then
                    GetColorIndex = index
                    Exit For
                End If
            Next index
        Else
            ' Iterate left to right
            For index = 1 To colorCount
                If HelpColorsSheet.Range(colorScheme).Cells(1, index).value = color Then
                    GetColorIndex = index
                    Exit For
                End If
            Next index
        End If
    End If

End Function

Private Sub SaveColor(ByVal index As Long, ByVal cellName As String)
    Dim color As String
    If index = 0 Then
        color = vbNullString
    Else
        Dim colorScheme As String
        colorScheme = StyleDesignerSheet.Range(DESIGNER_COLOR_SCHEME)
        If colorScheme = vbNullString Then
            colorScheme = COLOR_SCHEME_DEFAULT
        End If
        
        If colorScheme = COLOR_SCHEME_X11 Or colorScheme = COLOR_SCHEME_SVG Then
            ' Color list is in cells along a column
            color = HelpColorsSheet.Range(COLOR_SCHEME_PREFIX & colorScheme).Cells(index, 1).value
        Else
            ' Color list is in cells along a row
            color = HelpColorsSheet.Range(COLOR_SCHEME_PREFIX & colorScheme).Cells(1, index).value
        End If
    End If
    StyleDesignerSheet.Range(cellName).value = color

End Sub

Private Function GetListIndex(ByVal listName As String, ByVal cellName As String) As Long
    Dim index As Long
    Dim listCount As Long
    Dim cellValue As String
    
    GetListIndex = 0
    
    cellValue = StyleDesignerSheet.Range(cellName)
    
    If cellValue <> vbNullString Then
        ' Determine how many cells there are in the named range.
        listCount = ListsSheet.Range(listName).count
               
        ' Iterate top to bottom
        For index = 1 To listCount
            If UCase$(Trim$(ListsSheet.Range(listName).Cells(index, 1).value)) = UCase$(cellValue) Then
                GetListIndex = index
                Exit For
            End If
        Next index
    End If

End Function

Public Sub SetStyleDesignerNodeShape(ByVal shapeName As String)

    SettingsSheet.Range(RIBBON_CTL_HELP_SHAPES).value = TOGGLE_HIDE
    StyleDesignerSheet.Activate
    
    OptimizeCode_Begin
    
    StyleDesignerSheet.Range(DESIGNER_NODE_SHAPE).value = shapeName
    If shapeName <> "polygon" Then
        StyleDesignerSheet.Range("NodeSides,NodeOrientation,NodeSkew,NodeDistortion").ClearContents
    End If
    
    InvalidateRibbonControl RIBBON_CTL_HELP_DESIGN_SHAPES
    InvalidateRibbonControl RIBBON_CTL_NODE_SHAPE
    InvalidateRibbonControl RIBBON_CTL_NODE_SIDES
    InvalidateRibbonControl RIBBON_CTL_POLYGON_SEPARATOR
    InvalidateRibbonControl RIBBON_CTL_NODE_ROTATION
    InvalidateRibbonControl RIBBON_CTL_NODE_SKEW
    InvalidateRibbonControl RIBBON_CTL_NODE_DISTORTION
    InvalidateRibbonControl RIBBON_GRP_NODE_POLYGON

    OptimizeCode_End
    
    RenderPreview
End Sub

Public Sub SetStyleDesignerColorScheme(ByVal colorScheme As String)
    
    SettingsSheet.Range(RIBBON_CTL_HELP_COLORS).value = TOGGLE_HIDE
    StyleDesignerSheet.Activate
    
    OptimizeCode_Begin
    
    StyleDesignerSheet.Range(DESIGNER_COLOR_SCHEME).value = colorScheme
    StyleDesignerSheet.Range("FontColor,BorderColor,FillColor,GradientFillColor,GradientFillType,GradientFillAngle,EdgeColor1,EdgeColor2,EdgeColor3").ClearContents
    
    InvalidateRibbonControl RIBBON_CTL_HELP_DESIGN_COLORS
    InvalidateRibbonControl RIBBON_CTL_COLOR_SCHEME
    InvalidateRibbonControl RIBBON_CTL_FONT_COLOR
    InvalidateRibbonControl RIBBON_CTL_BORDER_COLOR
    InvalidateRibbonControl RIBBON_CTL_FILL_COLOR
    InvalidateRibbonControl RIBBON_CTL_GRADIENT_FILL_COLOR
    InvalidateRibbonControl RIBBON_CTL_GRADIENT_FILL_TYPE
    InvalidateRibbonControl RIBBON_CTL_GRADIENT_FILL_ANGLE
    InvalidateRibbonControl RIBBON_CTL_EDGE_COLOR1
    InvalidateRibbonControl RIBBON_CTL_EDGE_COLOR2
    InvalidateRibbonControl RIBBON_CTL_EDGE_COLOR3

    OptimizeCode_End
    
    RenderPreview

End Sub

Public Sub RenderPreviewFromLists()
    RenderElement DESIGNER_FORMAT_STRING, _
                  DESIGNER_LABEL_TEXT, _
                  DESIGNER_PREVIEW_CELL, _
                  GetCellString(WORKSHEET_STYLE_DESIGNER, DESIGNER_MODE), _
                  True
    
    InvalidateRibbonControl RIBBON_CTL_SAVE_TO_STYLES_WORKSHEET
    InvalidateRibbonControl RIBBON_CTL_COPY_TO_CLIPBOARD
End Sub

Public Sub RenderPreviewFromFormatString()
    RenderElement DESIGNER_FORMAT_STRING, _
                  DESIGNER_LABEL_TEXT, _
                  DESIGNER_PREVIEW_CELL, _
                  GetCellString(WORKSHEET_STYLE_DESIGNER, DESIGNER_MODE), _
                  False
    
    InvalidateRibbonControl RIBBON_CTL_SAVE_TO_STYLES_WORKSHEET
    InvalidateRibbonControl RIBBON_CTL_COPY_TO_CLIPBOARD
End Sub




Attribute VB_Name = "modShellAndWait"
Option Explicit
Option Compare Text

'@Folder("Open Source")

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' modShellAndWait
' By Chip Pearson, chip@cpearson.com, www.cpearson.com
' This page on the web site: www.cpearson.com/Excel/ShellAndWait.aspx
' 9-September-2008
'
' This module contains code for the ShellAndWait function that will Shell to a process
' and wait for that process to end before returning to the caller.
'
' Source: www.cpearson.com/excel/ShellAndWait.aspx Copyright 2013, Charles H. Pearson
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#If VBA7 Then
    Private Declare PtrSafe Function WaitForSingleObject Lib "kernel32" ( _
    ByVal hHandle As Long, _
    ByVal dwMilliseconds As Long) As Long

    Private Declare PtrSafe Function OpenProcess Lib "kernel32.dll" ( _
    ByVal dwDesiredAccess As Long, _
    ByVal bInheritHandle As Long, _
    ByVal dwProcessId As Long) As Long

    Private Declare PtrSafe Function CloseHandle Lib "kernel32" ( _
    ByVal hObject As Long) As Long
#Else
    Private Declare Function WaitForSingleObject Lib "kernel32" ( _
                             ByVal hHandle As Long, _
                             ByVal dwMilliseconds As Long) As Long

    Private Declare Function OpenProcess Lib "kernel32.dll" ( _
                             ByVal dwDesiredAccess As Long, _
                             ByVal bInheritHandle As Long, _
                             ByVal dwProcessId As Long) As Long

    Private Declare Function CloseHandle Lib "kernel32" ( _
                             ByVal hObject As Long) As Long
#End If

Private Const SYNCHRONIZE = &H100000

Public Enum ShellAndWaitResult
    success = 0
    Failure = 1
    timeout = 2
    InvalidParameter = 3
    SysWaitAbandoned = 4
    UserWaitAbandoned = 5
    UserBreak = 6
End Enum

Public Enum ActionOnBreak
    IgnoreBreak = 0
    AbandonWait = 1
    PromptUser = 2
End Enum

Private Const STATUS_ABANDONED_WAIT_0 As Long = &H80
Private Const STATUS_WAIT_0 As Long = &H0
Private Const WAIT_ABANDONED As Long = (STATUS_ABANDONED_WAIT_0 + 0)
Private Const WAIT_OBJECT_0 As Long = (STATUS_WAIT_0 + 0)
Private Const WAIT_TIMEOUT As Long = 258&
Private Const WAIT_FAILED As Long = &HFFFFFFFF
Private Const WAIT_INFINITE = -1&

Public Function ShellAndWait(ByVal ShellCommand As String, _
                             ByVal TimeOutMs As Long, _
                             ByVal ShellWindowState As VbAppWinStyle, _
                             ByVal BreakKey As ActionOnBreak) As ShellAndWaitResult
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ' ShellAndWait
    '
    ' This function calls Shell and passes to it the command text in ShellCommand. The function
    ' then waits for TimeOutMs (in milliseconds) to expire.
    '
    '   Parameters:
    '       ShellCommand
    '           is the command text to pass to the Shell function.
    '
    '       TimeOutMs
    '           is the number of milliseconds to wait for the shell'd program to wait. If the
    '           shell'd program terminates before TimeOutMs has expired, the function returns
    '           ShellAndWaitResult.Success = 0. If TimeOutMs expires before the shell'd program
    '           terminates, the return value is ShellAndWaitResult.TimeOut = 2.
    '
    '       ShellWindowState
    '           is an item in VbAppWinStyle specifying the window state for the shell'd program.
    '
    '       BreakKey
    '           is an item in ActionOnBreak indicating how to handle the application's cancel key
    '           (Ctrl Break). If BreakKey is ActionOnBreak.AbandonWait and the user cancels, the
    '           wait is abandoned and the result is ShellAndWaitResult.UserWaitAbandoned = 5.
    '           If BreakKey is ActionOnBreak.IgnoreBreak, the cancel key is ignored. If
    '           BreakKey is ActionOnBreak.PromptUser, the user is given a ?Continue? message. If the
    '           user selects "do not continue", the function returns ShellAndWaitResult.UserBreak = 6.
    '           If the user selects "continue", the wait is continued.
    '
    '   Return values:
    '            ShellAndWaitResult.Success = 0
    '               indicates the the process completed successfully.
    '            ShellAndWaitResult.Failure = 1
    '               indicates that the Wait operation failed due to a Windows error.
    '            ShellAndWaitResult.TimeOut = 2
    '               indicates that the TimeOutMs interval timed out the Wait.
    '            ShellAndWaitResult.InvalidParameter = 3
    '               indicates that an invalid value was passed to the procedure.
    '            ShellAndWaitResult.SysWaitAbandoned = 4
    '               indicates that the system abandoned the wait.
    '            ShellAndWaitResult.UserWaitAbandoned = 5
    '               indicates that the user abandoned the wait via the cancel key (Ctrl+Break).
    '               This happens only if BreakKey is set to ActionOnBreak.AbandonWait.
    '            ShellAndWaitResult.UserBreak = 6
    '               indicates that the user broke out of the wait after being prompted with
    '               a ?Continue message. This happens only if BreakKey is set to
    '               ActionOnBreak.PromptUser.

    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

    Dim taskId As Long
    Dim ProcHandle As Long
    Dim WaitRes As Long
    Dim Ms As Long
    Dim MsgRes As VbMsgBoxResult
    Dim SaveCancelKey As XlEnableCancelKey
    Dim ElapsedTime As Long
    Dim Quit As Boolean
    Const ERR_BREAK_KEY = 18
    Const DEFAULT_POLL_INTERVAL = 500

    If Trim$(ShellCommand) = vbNullString Then
        ShellAndWait = ShellAndWaitResult.InvalidParameter
        Exit Function
    End If

    If TimeOutMs < 0 Then
        ShellAndWait = ShellAndWaitResult.InvalidParameter
        Exit Function
    ElseIf TimeOutMs = 0 Then
        Ms = WAIT_INFINITE
    Else
        Ms = TimeOutMs
    End If

    Select Case BreakKey
    Case AbandonWait, IgnoreBreak, PromptUser
        ' valid
    Case Else
        ShellAndWait = ShellAndWaitResult.InvalidParameter
        Exit Function
    End Select

    Select Case ShellWindowState
    Case vbHide, vbMaximizedFocus, vbMinimizedFocus, vbMinimizedNoFocus, vbNormalFocus, vbNormalNoFocus
        ' valid
    Case Else
        ShellAndWait = ShellAndWaitResult.InvalidParameter
        Exit Function
    End Select

    On Error Resume Next
    Err.Clear
    taskId = Shell(ShellCommand, ShellWindowState)
    If (Err.Number <> 0) Or (taskId = 0) Then
        ShellAndWait = ShellAndWaitResult.Failure
        Exit Function
    End If

    ProcHandle = OpenProcess(SYNCHRONIZE, False, taskId)
    If ProcHandle = 0 Then
        ShellAndWait = ShellAndWaitResult.Failure
        Exit Function
    End If


    On Error GoTo ErrH:
    SaveCancelKey = Application.EnableCancelKey
    Application.EnableCancelKey = xlErrorHandler
    WaitRes = WaitForSingleObject(ProcHandle, DEFAULT_POLL_INTERVAL)
    Do Until WaitRes = WAIT_OBJECT_0
        DoEvents
        Select Case WaitRes
        Case WAIT_ABANDONED
            ' Windows abandoned the wait
            ShellAndWait = ShellAndWaitResult.SysWaitAbandoned
            Exit Do
        Case WAIT_OBJECT_0
            ' Successful completion
            ShellAndWait = ShellAndWaitResult.success
            Exit Do
        Case WAIT_FAILED
            ' attach failed
            ShellAndWait = ShellAndWaitResult.success
            Exit Do
        Case WAIT_TIMEOUT
            ' Wait timed out. Here, this time out is on DEFAULT_POLL_INTERVAL.
            ' See if ElapsedTime is greater than the user specified wait
            ' time out. If we have exceed that, get out with a TimeOut status.
            ' Otherwise, reissue as wait and continue.
            ElapsedTime = ElapsedTime + DEFAULT_POLL_INTERVAL
            If Ms > 0 Then
                ' user specified timeout
                If ElapsedTime > Ms Then
                    ShellAndWait = ShellAndWaitResult.timeout
                    Exit Do
                Else
                    ' user defined timeout has not expired.
                End If
            Else
                ' infinite wait -- do nothing
            End If
            ' reissue the Wait on ProcHandle
            WaitRes = WaitForSingleObject(ProcHandle, DEFAULT_POLL_INTERVAL)
            
        Case Else
            ' unknown result, assume failure
            ShellAndWait = ShellAndWaitResult.Failure
            Quit = True
        End Select
    Loop

    CloseHandle ProcHandle
    Application.EnableCancelKey = SaveCancelKey
    Exit Function

ErrH:
    Debug.Print "ErrH: Cancel: " & Application.EnableCancelKey
    If Err.Number = ERR_BREAK_KEY Then
        If BreakKey = ActionOnBreak.AbandonWait Then
            CloseHandle ProcHandle
            ShellAndWait = ShellAndWaitResult.UserWaitAbandoned
            Application.EnableCancelKey = SaveCancelKey
            Exit Function
        ElseIf BreakKey = ActionOnBreak.IgnoreBreak Then
            Err.Clear
            Resume
        ElseIf BreakKey = ActionOnBreak.PromptUser Then
            MsgRes = MsgBox("User Process Break." & vbCrLf & _
                            "Continue to wait?", vbYesNo)
            If MsgRes = vbNo Then
                CloseHandle ProcHandle
                ShellAndWait = ShellAndWaitResult.UserBreak
                Application.EnableCancelKey = SaveCancelKey
            Else
                Err.Clear
                Resume Next
            End If
        Else
            'Debug.Print "Unknown value of 'BreakKey': " & CStr(BreakKey)
            CloseHandle ProcHandle
            Application.EnableCancelKey = SaveCancelKey
            ShellAndWait = ShellAndWaitResult.Failure
        End If
    Else
        ' some other error. assume failure
        CloseHandle ProcHandle
        ShellAndWait = ShellAndWaitResult.Failure
    End If

    Application.EnableCancelKey = SaveCancelKey

End Function


Attribute VB_Name = "modShellAndWaitMsgBox"
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Open Source")
Option Explicit

Public Sub ShellAndWaitMessage(ByVal ret As Long)

    Select Case ret
    Case ShellAndWaitResult.success
        ' No action

    Case ShellAndWaitResult.Failure
        MsgBox "ShellAndWait() failed", vbOKOnly

    Case ShellAndWaitResult.timeout
        MsgBox "Unable to create graph within timeout limit.", vbOKOnly

    Case ShellAndWaitResult.InvalidParameter
        MsgBox "ShellAndWait() invalid parameter", vbOKOnly

    Case ShellAndWaitResult.SysWaitAbandoned
        MsgBox "ShellAndWait() SysWaitAbandoned error", vbOKOnly

    Case ShellAndWaitResult.UserWaitAbandoned
        MsgBox "ShellAndWait() UserWaitAbandoned error", vbOKOnly

    Case ShellAndWaitResult.UserBreak
        MsgBox "ShellAndWait() UserBreak error", vbOKOnly

    Case Else
        MsgBox "ShellAndWait() Unknown error, code = " & ret, vbOKOnly

    End Select

End Sub

Attribute VB_Name = "modUtilityClipboard"
' Copyright (c) 2015-2018 Jeffrey J. Long. All rights reserved

'@Folder("Utility.Excel")
Option Explicit

Public Sub CopyTextToClipboard(ByVal text As String)
    Dim MSForms_DataObject As Object
    Set MSForms_DataObject = CreateObject("new:{1C3B4210-F441-11CE-B9EA-00AA006B1A69}")
    MSForms_DataObject.SetText text
    MSForms_DataObject.PutInClipboard
    Set MSForms_DataObject = Nothing
End Sub

Attribute VB_Name = "modUtilityDateTime"
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Utility.Date Time")
Option Explicit

Public Function GetDateTime() As String
    GetDateTime = format(date, "yyyy-mm-dd") & " " & format(time, "hh.mm.ss")
End Function

Public Function GetTime() As String
    GetTime = format(time, "hh.mm.ss")
End Function

Public Function GetDate() As String
    GetDate = format(date, "yyyy-mm-dd")
End Function

Attribute VB_Name = "modUtilityEnvironment"
' Copyright (c) 2015-2018 Jeffrey J. Long. All rights reserved

'@Folder("Utility.Environment")
Option Explicit

Public Function SearchPathForFile(ByVal fileName As String) As Boolean

    SearchPathForFile = False
    
    Dim path As String
    
    ' Pull the PATH environment variable setting into a string, and split it into
    ' an array of directory names
    Dim splitPath() As String
    splitPath = Split(Environ$("path"), SEMICOLON)
    
    ' Iterate through the array
    Dim index As Long
    For index = LBound(splitPath) To UBound(splitPath)
        path = Trim$(splitPath(index))
        If path <> vbNullString Then
            'Ensure path is not enclosed in quotes before concatenating the filename
            path = GetStringBetweenDelimiters(path, Chr$(34), Chr$(34))
            
            ' Add a directory delimiter to the end of the directory if not already present
            If Not EndsWith(path, "\") Then
                path = path & "\"
            End If
            
            ' Determine if the file exists in this directory
            If FileExists(path & fileName) Then
                SearchPathForFile = True
                Exit For
            End If
        End If
    Next index
    
End Function

Public Function FindFileOnPath(ByVal fileName As String) As String

    FindFileOnPath = vbNullString
    
    Dim path As String
    
    ' Pull the PATH environment variable setting into a string, and split it into
    ' an array of directory names
    Dim splitPath() As String
    splitPath = Split(Environ$("path"), SEMICOLON)
    
    ' Iterate through the array
    Dim index As Long
    For index = LBound(splitPath) To UBound(splitPath)
        path = Trim$(splitPath(index))
        If path <> vbNullString Then
            'Ensure path is not enclosed in quotes before concatenating the filename
            path = GetStringBetweenDelimiters(path, Chr$(34), Chr$(34))
            
            ' Add a directory delimiter to the end of the directory if not already present
            If Not EndsWith(path, "\") Then
                path = path & "\"
            End If
            
            ' Determine if the file exists in this directory
            If FileExists(path & fileName) Then
                FindFileOnPath = path & fileName
                Exit For
            End If
        End If
    Next index
    
End Function

Attribute VB_Name = "modUtilityExcelCell"
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Utility.Excel")
Option Explicit

Public Function GetCellLong(ByVal worksheetName As String, ByVal cellName As String) As Long
    GetCellLong = CLng(ActiveWorkbook.Worksheets(worksheetName).Range(cellName).value)
End Function

Public Function GetCellString(ByVal worksheetName As String, ByVal cellName As String) As String
    GetCellString = ActiveWorkbook.Worksheets(worksheetName).Range(cellName).value
End Function

Public Function GetCell(ByVal worksheetName As String, ByVal row As Long, ByVal col As Long) As String
    GetCell = Trim$(ActiveWorkbook.Sheets(worksheetName).Cells(row, col).value)
End Function

Public Sub SetCell(ByVal worksheetName As String, ByVal row As Long, ByVal col As Long, ByVal cellValue As Variant)
    ActiveWorkbook.Worksheets(worksheetName).Cells(row, col).value = cellValue
End Sub

Public Sub ClearCell(ByVal worksheetName As String, ByVal row As Long, ByVal col As Long)
    ActiveWorkbook.Worksheets(worksheetName).Cells(row, col).ClearContents
End Sub

Public Function GetCellUCase(ByVal worksheetName As String, ByVal row As Long, ByVal col As Long) As String
    GetCellUCase = UCase$(Trim$(ActiveWorkbook.Sheets(worksheetName).Cells(row, col).value))
End Function

Public Sub SetCellString(ByVal worksheetName As String, ByVal cellName As String, ByVal cellValue As String)
    ActiveWorkbook.Worksheets(worksheetName).Range(cellName).value = cellValue
End Sub

Public Sub ClearNamedCellContents(ByVal worksheetName As String, ByVal cellName As String)
    ActiveWorkbook.Worksheets(worksheetName).Range(cellName).ClearContents
End Sub

Public Function GetCellBoolean(ByVal worksheetName As String, ByVal cellName As String) As Boolean
    
    GetCellBoolean = False
    
    Select Case UCase$(GetCellString(worksheetName, cellName))
        Case "ON", "YES", "TRUE", "AUTO", "SHOW", "INCLUDE", "DEFAULT"
            GetCellBoolean = True
        Case Else
            GetCellBoolean = False
    End Select
    
End Function

Public Sub SelectDirectoryToCell(ByVal worksheetName As String, ByVal cellName As String)
    SetCellString worksheetName, cellName, ChooseDirectory(GetCellString(worksheetName, cellName))
End Sub

Public Sub ReadFileIntoCell(ByVal worksheetName As String, ByVal cellName As String, ByVal fileName As String)

    ' Clear out any previous data in the cell
    ActiveSheet.Range(cellName).ClearContents

    ' Make sure the file exists before attempting to read it
    If FileExists(fileName) Then
        
        ' Obtain a file handle
        Dim fileHandle As Long
        fileHandle = FreeFile()
        
        ' Open the file as binary
        Open fileName For Binary Access Read As #fileHandle

        Dim stringToHoldFile As String
        
        ' Create a string with enough space to hold the file contents
        '@Ignore AssignmentNotUsed
        stringToHoldFile = Space(FileLen(fileName))
        
        ' Read the entire file into the string
        Get #fileHandle, , stringToHoldFile

        ' Close the file
        Close #fileHandle
 
        ' Add to cell
        SetCellString worksheetName, cellName, stringToHoldFile
    End If
    
End Sub

Public Sub ToggleCell(ByVal Worksheet As String, ByVal cellName As String, ByVal bool As Boolean, ByVal trueValue As String, ByVal falseValue As String)
    SetCellString Worksheet, cellName, Toggle(bool, trueValue, falseValue)
End Sub

Public Function Toggle(ByVal bool As Boolean, ByVal trueValue As String, ByVal falseValue As String) As String
    
    If bool Then
        Toggle = trueValue
    Else
        Toggle = falseValue
    End If

End Function



Attribute VB_Name = "modUtilityExcelColumns"
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Utility.Excel")
Option Explicit

Public Function GetLastColumn(ByVal worksheetName As String, ByVal row As Long) As Long

    ' Determine which columns have data
    With ActiveWorkbook.Worksheets(worksheetName)
        GetLastColumn = .Cells(row, .Columns.count).End(xlToLeft).column
    End With

End Function

Public Sub ShowColumn(ByVal worksheetName As String, ByVal columnNumber As Long, ByVal show As Boolean)
    Dim alphabeticColumnName As String
    alphabeticColumnName = ConvertColumnNumberToLetters(columnNumber)
    ActiveWorkbook.Worksheets(worksheetName).Columns(alphabeticColumnName & ":" & alphabeticColumnName).AutoFit
    ActiveWorkbook.Worksheets(worksheetName).Range(alphabeticColumnName & ":" & alphabeticColumnName).EntireColumn.Hidden = Not show
End Sub

Public Function ConvertColumnNumberToLetters(ByVal columnNumber As Long) As String
    Dim alpha As Long
    Dim remainder As Long
    alpha = Int(columnNumber / 27)
    remainder = columnNumber - (alpha * 26)
    If alpha > 0 Then
        ConvertColumnNumberToLetters = Chr$(alpha + 64)
    End If
    If remainder > 0 Then
        ConvertColumnNumberToLetters = ConvertColumnNumberToLetters & Chr$(remainder + 64)
    End If
End Function


Attribute VB_Name = "modUtilityExcelDialogs"
' Copyright (c) 2015-2018 Jeffrey J. Long. All rights reserved

'@Folder("Utility.Excel")
Option Explicit

Public Function ChooseDirectory(ByVal startDir As String) As String
    ChooseDirectory = startDir
    
    Dim fileDialogHandle As FileDialog
    Set fileDialogHandle = Application.FileDialog(msoFileDialogFolderPicker)
    
    If Trim$(startDir) <> vbNullString Then
        If DirectoryExists(startDir) Then
            fileDialogHandle.InitialFileName = startDir
        End If
    End If
    
    'Get the number of the button chosen
    Dim selected As Long
    selected = fileDialogHandle.show
    If selected <> -1 Then
        'User clicked on CANCEL)
    Else
        'Set path of directory chosen
        ChooseDirectory = fileDialogHandle.SelectedItems(1)
    End If

    Set fileDialogHandle = Nothing
End Function

Public Function GetSaveAsFilename() As String
    GetSaveAsFilename = vbNullString
    
    Dim fileDialogHandle As FileDialog
    Set fileDialogHandle = Application.FileDialog(msoFileDialogSaveAs)
    fileDialogHandle.InitialFileName = vbNullString
    fileDialogHandle.FilterIndex = 19                          ' Kludge, FileDialog does not let you specify filters for SaveAs. 19 = Save as type: Text (MS-DOS) (*.txt)
    
    'Get the number of the button chosen
    Dim selected As Long
    selected = fileDialogHandle.show
    If selected <> 0 Then
        GetSaveAsFilename = Trim$(fileDialogHandle.SelectedItems(1))
    End If

    Set fileDialogHandle = Nothing
End Function

Attribute VB_Name = "modUtilityExcelOptimize"
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Utility.Excel")
Option Explicit

Private internalCalcState As Long
Private internalEventState As Boolean

' Get/Let to encapsulate CalcState
Private Static Property Get CalcState() As Long
    CalcState = internalCalcState
End Property

Private Static Property Let CalcState(ByVal state As Long)
    internalCalcState = state
End Property

' Get/Let to encapsulate EventState
Private Static Property Get EventState() As Boolean
    EventState = internalEventState
End Property

Private Static Property Let EventState(ByVal state As Boolean)
    internalEventState = state
End Property

' Public routines to turn code optimizations on and off
Public Sub OptimizeCode_Begin()
    Application.ScreenUpdating = False

    EventState = Application.EnableEvents
    Application.EnableEvents = False

    CalcState = Application.Calculation
    Application.Calculation = xlCalculationManual
End Sub

Public Sub OptimizeCode_End()
    Application.Calculation = CalcState
    Application.EnableEvents = EventState
    Application.ScreenUpdating = True
End Sub


Attribute VB_Name = "modUtilityExcelPicture"
Option Explicit
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Utility.Excel")
Public Function InsertPicture(ByVal FName As String, ByVal Where As Range, _
                              Optional ByVal LinkToFile As Boolean = False, _
                              Optional ByVal SaveWithDocument As Boolean = True) As Shape
   
    'Inserts the picture file FName as link or permanently into Where
    Dim shapeObject As Shape
    With Where
        'Insert in original size
        Set shapeObject = Where.Parent.Shapes.AddPicture( _
                          FName, _
                          LinkToFile, _
                          SaveWithDocument, _
                          .Left, _
                          .Top, _
                          -1, _
                          -1)
        shapeObject.Placement = xlMove           ' ( xlFreeFloating | xlMove | xlMoveAndSize )
    End With
   
    Set InsertPicture = shapeObject
    Set shapeObject = Nothing
End Function

Public Sub DeletePictures(ByVal targetSheet As String, ByVal targetCells As String)
    ' Removes any pictures within the specified range of cells

    Dim shapeObject As String
    Dim pictureImage As Picture
    Dim targetWorksheet As Worksheet
    Dim targetRange As Range

    Set targetWorksheet = ActiveWorkbook.Sheets(targetSheet)
    Set targetRange = targetWorksheet.Range(targetCells)

    For Each pictureImage In targetWorksheet.Pictures
        With pictureImage
            shapeObject = .TopLeftCell.address & ":" & .BottomRightCell.address
        End With
        If Not Intersect(targetRange, targetWorksheet.Range(shapeObject)) Is Nothing Then
            pictureImage.Delete
        End If
    Next
    
    Set targetWorksheet = Nothing
    Set targetRange = Nothing
    
End Sub



Attribute VB_Name = "modUtilityExcelRow"
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Utility.Excel")
Option Explicit

Public Function getLastRow(ByVal worksheetName As String) As Long

    ' Determine which rows have data
    With ActiveWorkbook.Worksheets(worksheetName).UsedRange
        getLastRow = .Cells(.Cells.count).row
    End With

End Function


Attribute VB_Name = "modUtilityExcelSheets"
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Utility.Excel")
Option Explicit

Public Function WorksheetExists(ByVal worksheetName As String) As Boolean
    Dim sheetTest As Worksheet
    On Error Resume Next
    Set sheetTest = ActiveWorkbook.Sheets(worksheetName)
    On Error GoTo 0
    WorksheetExists = Not sheetTest Is Nothing
End Function

Attribute VB_Name = "modUtilityExcelStatusBar"
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Utility.Excel")
Option Explicit

Public Sub UpdateStatusBar(ByVal statusMessage As String)
    Application.StatusBar = statusMessage
End Sub

Public Sub UpdateStatusBarForNSeconds(ByVal statusMessage As String, ByVal seconds As Long)
    Application.StatusBar = statusMessage
    Application.OnTime Now + TimeSerial(0, 0, seconds), "ClearStatusBar"
End Sub

Public Sub ClearStatusBar()
    Application.StatusBar = False
End Sub

Attribute VB_Name = "modUtilityFileSystem"
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Utility.File System")
Option Explicit

Public Function DirectoryExists(ByVal dirPath As String) As Boolean

    Dim FSO As FileSystemObject
    Set FSO = New FileSystemObject
    
    DirectoryExists = False
    
    If Len(dirPath) > 0 Then
        If FSO.FolderExists(dirPath) = True Then
            DirectoryExists = True
        End If
    End If

    Set FSO = Nothing
End Function

Public Function FileExists(ByVal dirPath As String) As Boolean

    Dim FSO As FileSystemObject
    Set FSO = New FileSystemObject
    
    FileExists = False
    
    If Len(dirPath) > 0 Then
        If FSO.FileExists(dirPath) = True Then
            FileExists = True
        End If
    End If

    Set FSO = Nothing
End Function

Public Sub DeleteFile(ByVal FileToDelete As String)
    If FileExists(FileToDelete) Then             'See above
        SetAttr FileToDelete, vbNormal
        Kill FileToDelete
    End If
End Sub

Public Sub WriteTextToFile(ByVal textToWrite As String, ByVal fileNameToWriteTo As String)
    
    ' Output file handle
    Dim fileNum As Long
    
    On Error GoTo EndMacro:
    fileNum = FreeFile

    ' Open file for output. Any existing file by the same name will be overwritten
    Open fileNameToWriteTo For Output Access Write As #fileNum

    ' Write the Graphviz commands to a file
    Print #fileNum, textToWrite

EndMacro:
    On Error GoTo 0
    Close #fileNum

End Sub

Attribute VB_Name = "modUtilityGraphviz"
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Relationship Visualizer.Sheets.Data")
Option Explicit

Public Function CreateGraphDiagram(ByVal filenameGraphviz As String, _
                                    ByVal diagramFile As String, _
                                    ByVal outputFormat As String, _
                                    ByVal graphEngine As String, _
                                    ByVal commandLineParameters As String, _
                                    ByVal timeout As Long) As Long
    
    On Error GoTo EndCreatePicture:
    
    ' Assume success
    CreateGraphDiagram = ShellAndWaitResult.success
    
    ' Show the hourglass cursor
    Application.Cursor = xlWait
    
    ' Locate the graphing program on the path
    Dim engine As String
    engine = FindFileOnPath(graphEngine & ".exe")
    
    If engine = vbNullString Then
        ' Not found, let the caller decide if a message is necessary
        CreateGraphDiagram = -1
    Else
        ' Generate the diagram which corresponds to the Graphviz file
        Dim graphvizCommand As String
        graphvizCommand = engine & " " & AddQuotes(filenameGraphviz) & _
            " -T" & outputFormat & " -o " & AddQuotes(diagramFile) & " " _
            & commandLineParameters
    
        ' Execute the command in syncronous fashion for up to "timeout" seconds.
        CreateGraphDiagram = ShellAndWait(graphvizCommand, timeout, vbHide, PromptUser)
    End If
    
EndCreatePicture:
    On Error GoTo 0
    
    ' Reset the cursor back to the default
    Application.Cursor = xlDefault
    
End Function

Public Sub AlertGraphvizNotFound(ByVal graphEngine As String)

    Dim errorMessage As String
    errorMessage = "The Layout Engine " & AddQuotes(graphEngine & ".exe") & " specified on the 'settings' worksheet could not be found." & vbCrLf & _
            vbCrLf & _
            "Things to check are:" & vbCrLf & _
            vbCrLf & _
            "1. Graphviz has been downloaded from http:\\www.graphviz.org and installed on this computer." & vbCrLf & _
            "2. The directory path to the Graphviz " & AddQuotes("bin") & " directory has been added to the PATH environment variable." & vbCrLf & _
            "3. Microsoft Excel was restarted after the Graphviz " & AddQuotes("bin") & " directory was added to the PATH environment variable." & vbCrLf & _
            vbCrLf & _
            "If those steps have been completed correctly and the problem persists, try restarting Microsoft Windows."
    MsgBox errorMessage

End Sub


' @method RangeToSubgraphWithRank
' @param {String} rankType How to rank the nodes. Valid values: min | max | same | sink | source
' @param {Range} rng A set of cells which should all have the same rank
' @return {String} Subgraph for the nodes in the cell range

Public Function RangeToSubgraphWithRank(ByVal itemIds As Range, ByVal rankType As String) As String

    ' Ensure valid rankType
    Dim rankTypeOut As String
    rankTypeOut = "same"
    
    Select Case UCase$(rankType)
        Case "MAX":     rankTypeOut = "max"
        Case "MIN":     rankTypeOut = "min"
        Case "SAME":    rankTypeOut = "same"
        Case "SINK":    rankTypeOut = "sink"
        Case "SOURCE":  rankTypeOut = "source"
    End Select

    Dim peers As String
    peers = vbNullString
    
    ' Iterate the range of cells
    Dim item As Range
    For Each item In itemIds.Cells
        peers = peers & "; " & AddQuotes(Trim$(item.value))
    Next item
    
    ' Build the rank statement
    RangeToSubgraphWithRank = "{rank=" & AddQuotes(rankTypeOut) & peers & ";}"
    
End Function


' @method RangeToSubgraph
' @param {Range} rng A set of cells which should be in the subgraph
' @return {String} Subgraph for the nodes in the cell range

Public Function RangeToSubgraph(ByVal itemIds As Range) As String

    Dim peers As String
    peers = vbNullString
    
    ' Iterate the range of cells
    Dim item As Range
    For Each item In itemIds.Cells
        peers = peers & "; " & AddQuotes(Trim$(item.value))
    Next item
    
    ' Build the rank statement
    RangeToSubgraph = "{ " & peers & ";}"
    
End Function

' @method RangeToHtml
' @param {Range} rng A set of cells which should be in the table
' @return {String} HTML-like string for the nodes in the cell range

Public Function RangeToHtml(ByVal tableCells As Range) As String

    Dim htmlLabel As String
    htmlLabel = "<<table>" & Chr$(10)
    
    Dim rowIndex As Long
    Dim columnIndex As Long
  
    For rowIndex = 1 To tableCells.Rows.count
        htmlLabel = htmlLabel & "<tr>"
        For columnIndex = 1 To tableCells.Columns.count
            htmlLabel = htmlLabel & "<td>" & tableCells.Cells(rowIndex, columnIndex).value & "</td>"
        Next columnIndex
        htmlLabel = htmlLabel & "</tr>" & Chr$(10)
    Next rowIndex

    htmlLabel = htmlLabel & "</table>>"
    RangeToHtml = htmlLabel
    
End Function












Attribute VB_Name = "modUtilityString"
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Utility.String")
Option Explicit

Public Function EndsWith(ByVal sourceString As String, ByVal endingString As String) As Boolean
    Dim endingLen As Long
    endingLen = Len(endingString)
    EndsWith = (Right$(Trim$(UCase$(sourceString)), endingLen) = UCase$(endingString))
End Function

Public Function StartsWith(ByVal sourceString As String, ByVal startingString As String) As Boolean
    Dim startLen As Long
    startLen = Len(startingString)
    StartsWith = (Left$(Trim$(UCase$(sourceString)), startLen) = UCase$(startingString))
End Function

Public Function AddQuotes(ByVal text As String) As String
    AddQuotes = Chr$(34) & text & Chr$(34)
End Function

Public Function GetStringBetweenDelimiters(ByVal inString As String, ByVal leftDelimiter As String, ByVal rightDelimiter As String) As String

    GetStringBetweenDelimiters = inString
    
    Dim outputString As String
    outputString = Trim$(inString)
    
    If Len(outputString) >= Len(leftDelimiter) + Len(rightDelimiter) Then
        If StartsWith(outputString, leftDelimiter) And EndsWith(outputString, rightDelimiter) Then
            outputString = Left$(outputString, Len(outputString) - Len(rightDelimiter))
            outputString = Right$(outputString, Len(outputString) - Len(leftDelimiter))
            GetStringBetweenDelimiters = outputString
        End If
    End If
    
End Function

Public Function GetStringTokenAtPosition(ByVal inputString As String, ByVal tokenSeparator As String, ByVal tokenPosition As Long) As String

    Dim token As String
    token = vbNullString
    
    If InStr(inputString, tokenSeparator) Then
        Dim tokenArray() As String
        tokenArray = Split(inputString, tokenSeparator)
        If tokenPosition - 1 <= UBound(tokenArray) Then
            token = tokenArray(tokenPosition - 1)
        End If
    End If
    
    GetStringTokenAtPosition = token
End Function

Public Function AddNameValue(ByVal styleAttributes As String, ByVal attrName As String, ByVal attrValue As String) As String

    AddNameValue = styleAttributes
    
    ' If a value is present, write it out as a name/value pair
    If Trim$(attrName) <> vbNullString Then
        AddNameValue = styleAttributes & " " & Trim$(attrName) & "=" & AddQuotes(attrValue)
    End If

End Function

Attribute VB_Name = "modWorksheetData"
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Relationship Visualizer.Sheets.Data")
Option Explicit

Public Sub ClearDataWorksheet(ByVal worksheetName As String)
    Dim lastColumn As Long
    Dim cellRange As String
    Dim lastRow As Long
    Dim dataLayout As DataWorksheet
    
    ' Get the layout of the 'data' worksheet
    dataLayout = GetSettingsForDataWorksheet(worksheetName)

    ' Determine the range of the cells which need to be cleared
    lastRow = getLastRow(worksheetName)
    
    ' If the worksheet is already empty we do not want to wipe out the heading row
    If lastRow < dataLayout.firstRow Then
        lastRow = dataLayout.firstRow
    End If
    
    ' Determine the columns to clear
    lastColumn = GetLastColumn(worksheetName, dataLayout.headingRow)

    ' Remove any existing content
    cellRange = "A" & dataLayout.firstRow & ":" & ConvertColumnNumberToLetters(lastColumn) & lastRow
    ActiveWorkbook.Worksheets(worksheetName).Range(cellRange).ClearContents
End Sub

Attribute VB_Name = "modWorksheetSQL"
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Relationship Visualizer.Sheets.SQL")
Option Explicit

''' Constants  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
'''  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

' Note to future Jeff...
' So here is the problem. We want to use ADODB capabilities to run SQL commands. If we
' use early binding the ADODB constants are available so long as a reference to the Microsoft
' ActiveX Data Objects x.x Library is added. This spreadsheet is used around the world by
' people with different versions of Excel all the way back to Excel 2007. It is not possible to
' specify an early binding reference for all users as it changes across versions of Excel.
' Instructions could be provided to tell the user how to go into Visual Basic and add the
' reference, but that is not ideal. The intent of this spreadsheet is to make things easy,
' not turn people into programmers, so early binding is out of the picture. We can use late
' binding without much difficulty, however since the objects are created at runtime there
' is no way for the compiler to know the enumeration constants the objects use, and compiler
' errors occur. The work around is to use the values the constants represent. I don't like
' magic numbers, so I've created constants for each object. Only 4 constants are used total,
' but if this code ever needs to be changed, the other contants are here. This is kind of
' a brittle solution, but these constants have been around for about 20 years so the risk
' of them being redefined is probably small.

' CursorTypeEnum
' https://docs.microsoft.com/en-us/sql/ado/reference/ado-api/cursortypeenum?view=sql-server-2017
Private Const adOpenForwardOnly = 0

' LockTypeEnum
' https://docs.microsoft.com/en-us/sql/ado/reference/ado-api/locktypeenum?view=sql-server-2017
Private Const adLockOptimistic = 3

' CommandTypeEnum
' https://docs.microsoft.com/en-us/sql/ado/reference/ado-api/commandtypeenum?view=sql-server-2017
Private Const adCmdText = 1

' ObjectStateEnum
' https://docs.microsoft.com/en-us/sql/ado/reference/ado-api/objectstateenum?view=sql-server-2017
Private Const adStateOpen = 1

''' Button Actions - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
'''  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Public Sub RunSQL()
    
    Dim sqlStatement As String
    Dim message As String
    Dim filePath As String
    
    
    Dim dataLayout As DataWorksheet
    dataLayout = GetSettingsForDataWorksheet(WORKSHEET_DATA)
    
    Dim headings As DataWorksheetHeadings
    headings.flag = Trim$(LCase$(DataSheet.Cells(dataLayout.headingRow, dataLayout.flagColumn).value))
    headings.item = Trim$(LCase$(DataSheet.Cells(dataLayout.headingRow, dataLayout.itemColumn).value))
    headings.label = Trim$(LCase$(DataSheet.Cells(dataLayout.headingRow, dataLayout.labelColumn).value))
    headings.xLabel = Trim$(LCase$(DataSheet.Cells(dataLayout.headingRow, dataLayout.xLabelColumn).value))
    headings.tailLabel = Trim$(LCase$(DataSheet.Cells(dataLayout.headingRow, dataLayout.tailLabelColumn).value))
    headings.headLabel = Trim$(LCase$(DataSheet.Cells(dataLayout.headingRow, dataLayout.headLabelColumn).value))
    headings.isRelatedToItem = Trim$(LCase$(DataSheet.Cells(dataLayout.headingRow, dataLayout.isRelatedToItemColumn).value))
    headings.styleName = Trim$(LCase$(DataSheet.Cells(dataLayout.headingRow, dataLayout.styleNameColumn).value))
    headings.extraAttributes = Trim$(LCase$(DataSheet.Cells(dataLayout.headingRow, dataLayout.extraAttributesColumn).value))
    headings.errorMessage = Trim$(LCase$(DataSheet.Cells(dataLayout.headingRow, dataLayout.errorMessageColumn).value))
                    
    Dim sqlLayout As sqlWorksheet
    sqlLayout = GetSettingsForSqlWorksheet()
    
    ' Determine the last row with data
    Dim lastRow As Long
    With SqlSheet.UsedRange
        lastRow = .Cells(.Cells.count).row
    End With
    
    ' Clear out the info from previous run
    ClearSQLStatus
    ClearDataWorksheet WORKSHEET_DATA
    
    Dim dataRow As Long
    dataRow = dataLayout.firstRow
    
    ' Loop through the data rows of SQL statements
    Dim sqlRow As Long
    For sqlRow = sqlLayout.firstRow To lastRow
    
        If SqlSheet.Cells(sqlRow, sqlLayout.flagColumn).value <> FLAG_COMMENT Then
            filePath = SqlSheet.Cells(sqlRow, sqlLayout.excelFileColumn).value
            
            If filePath = vbNullString Then
                filePath = ActiveWorkbook.FullName
            ElseIf Not InStr(filePath, "\") Then
                filePath = ActiveWorkbook.path & "\" & filePath
            End If
            
            If FileExists(filePath) Then
                sqlStatement = Trim$(SqlSheet.Cells(sqlRow, sqlLayout.sqlStatementColumn).value)
                
                If sqlStatement = vbNullString Then
                    message = STATUS_SKIPPED
                
                ElseIf StartsWith(UCase$(sqlStatement), "SELECT") Then
                    message = executeSQL(filePath, headings, sqlStatement, dataLayout, dataRow)
                
                Else
                    message = STATUS_SKIPPED & " - SQL statement does not begin with SELECT"
                End If
            Else
                message = STATUS_FAILURE & " - File '" & filePath & "' not found"
            End If
        Else
            message = STATUS_SKIPPED
        End If
        
        ' Display the status of the SQL query
        SqlSheet.Cells(sqlRow, sqlLayout.statusColumn).value = message
    Next sqlRow
   
End Sub

Public Sub ClearSQLStatus()
    Dim cellRange As String
    Dim sqlLayout As sqlWorksheet
    
    ' Get the layout of the 'sql' worksheet
    sqlLayout = GetSettingsForSqlWorksheet()
    
    ' Format the range to clear
    cellRange = ConvertColumnNumberToLetters(sqlLayout.statusColumn) & sqlLayout.firstRow & ":" & ConvertColumnNumberToLetters(sqlLayout.statusColumn) & getLastRow(WORKSHEET_SQL)
    SqlSheet.Range(cellRange).ClearContents
End Sub

''' SQL PROCESSING - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
'''  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

' https://technet.microsoft.com/en-us/library/ee692882.aspx

Private Function executeSQL(ByVal filePath As String, _
                            ByRef headings As DataWorksheetHeadings, _
                            ByVal sqlStatement As String, _
                            ByRef dataLayout As DataWorksheet, _
                            ByRef row As Long) As String
    
    On Error GoTo executeSQLError
    
    Dim connectionObject As Object      ' Connection
    Dim recordSetObject As Object   ' Record Set
    Dim fieldObject As Variant      ' Field object within a Record Set record Fields collection
    
    Dim fileExtension As String
    Dim provider As String
    Dim properties As String
    
    executeSQL = STATUS_SUCCESS

    ' Determine the connection string settings based upon the file extension
    ' of the file we will executed the query against
    
    fileExtension = Right$(filePath, Len(filePath) - InStrRev(filePath, "."))
  
    Select Case LCase$(fileExtension)
    Case "xlsx"
        provider = "Microsoft.ACE.OLEDB.12.0;"
        properties = "Excel 12.0 Xml;HDR=YES"
        
    Case "xlsb"
        provider = "Microsoft.ACE.OLEDB.12.0;"
        properties = "Excel 12.0;HDR=YES"
        
    Case "xlsm"
        provider = "Microsoft.ACE.OLEDB.12.0;"
        properties = "Excel 12.0 Macro;HDR=YES"
        
    Case "xls"
        provider = "Microsoft.ACE.OLEDB.12.0;"
        properties = "Excel 8.0;HDR=YES"
        
    Case Else
        executeSQL = STATUS_FAILURE & " - '" & fileExtension & "' is not a supported file type. File extension must be .xlsx, .xlsb, .xlsm, or .xls."
        Exit Function
    End Select
    
    ' Establish connection to the file containing the relational data using
    ' late binding as we do not know which version of Excel this spreadsheet
    ' will be running on
    Set connectionObject = CreateObject("ADODB.Connection")
    
    ' Specify connection options
    With connectionObject
        .provider = provider
        .properties("Extended Properties").value = properties
        .Open filePath
    End With
    
    ' Define a recordset for a SQL SELECT statement using late binding
    ' as we do not know which version of Excel this spreadsheet
    ' will be running on
    Set recordSetObject = CreateObject("ADODB.Recordset")
    
    ' Execute the SQL SELECT query
    recordSetObject.Open source:=sqlStatement, ActiveConnection:=connectionObject, CursorType:=adOpenForwardOnly, LockType:=adLockOptimistic, options:=adCmdText
    
    ' Ensure results were returned
    If Not recordSetObject.EOF Then
        ' Ensure we are at the first record in the result set
        recordSetObject.MoveFirst
    
        ' Iterate through the query results
        Do While recordSetObject.EOF = False
    
            ' Transfer the results to the specified location. Destination worksheet,
            ' row, and column are passed in as parameters
            For Each fieldObject In recordSetObject.Fields
                Select Case LCase$(fieldObject.Name)
                Case headings.flag
                    DataSheet.Cells(row, dataLayout.flagColumn) = fieldObject.value
                    
                Case headings.item
                    DataSheet.Cells(row, dataLayout.itemColumn) = fieldObject.value
                    
                Case headings.label
                    DataSheet.Cells(row, dataLayout.labelColumn) = fieldObject.value
                    
                Case headings.xLabel
                    DataSheet.Cells(row, dataLayout.xLabelColumn) = fieldObject.value
                    
                Case headings.tailLabel
                    DataSheet.Cells(row, dataLayout.tailLabelColumn) = fieldObject.value
                    
                Case headings.headLabel
                    DataSheet.Cells(row, dataLayout.headLabelColumn) = fieldObject.value
                    
                Case headings.isRelatedToItem
                    DataSheet.Cells(row, dataLayout.isRelatedToItemColumn) = fieldObject.value
                    
                Case headings.styleName
                    DataSheet.Cells(row, dataLayout.styleNameColumn) = fieldObject.value
                    
                Case headings.extraAttributes
                    DataSheet.Cells(row, dataLayout.extraAttributesColumn) = fieldObject.value
                
                Case headings.errorMessage
                    DataSheet.Cells(row, dataLayout.errorMessageColumn) = fieldObject.value
                End Select
            Next
            
            ' Advance to the next result record and row
            recordSetObject.MoveNext
            row = row + 1
        Loop
    End If
    
    executeSQL = STATUS_SUCCESS
    
executeSQLError:

    If Err.Number <> 0 Then
        executeSQL = STATUS_FAILURE & " - " & Err.Description
    End If
    
    On Error Resume Next
    
    ' Close the record set
    If recordSetObject.state = adStateOpen Then
        recordSetObject.Close
        Set recordSetObject = Nothing
    End If
    
    ' Close the connection
    If connectionObject.state = adStateOpen Then
        connectionObject.Close
        Set connectionObject = Nothing
    End If
    
    On Error GoTo 0
End Function



















Attribute VB_Name = "modWorksheetSettings"
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Relationship Visualizer.Sheets.Settings")
Option Explicit

Public Function GetSettings(ByVal DataWorksheet As String) As Settings
    GetSettings.graph = GetSettingsForGraph()
    GetSettings.data = GetSettingsForDataWorksheet(DataWorksheet)
    GetSettings.source = GetSettingsForSourceWorksheet()
    GetSettings.sql = GetSettingsForSqlWorksheet()
    GetSettings.styles = GetSettingsForStylesWorksheet()
    GetSettings.output = GetSettingsForFileOutput()
    GetSettings.commandLine = GetSettingsForCommandLine()
End Function

Public Function GetSettingsForStylesWorksheet() As stylesWorksheet
    GetSettingsForStylesWorksheet.headingRow = CLng(SettingsSheet.Range(SETTINGS_STYLES_ROW_HEADING))
    GetSettingsForStylesWorksheet.firstRow = CLng(SettingsSheet.Range(SETTINGS_STYLES_ROW_FIRST))
    
    GetSettingsForStylesWorksheet.lastRow = CLng(SettingsSheet.Range(SETTINGS_STYLES_ROW_LAST))
    If GetSettingsForStylesWorksheet.lastRow = 0 Then
        With StylesSheet.UsedRange
            GetSettingsForStylesWorksheet.lastRow = .Cells(.Cells.count).row
        End With
    End If
    
    GetSettingsForStylesWorksheet.flagColumn = GetSettingsColNum(SETTINGS_STYLES_COL_COMMENT)
    GetSettingsForStylesWorksheet.nameColumn = GetSettingsColNum(SETTINGS_STYLES_COL_STYLE)
    GetSettingsForStylesWorksheet.formatColumn = GetSettingsColNum(SETTINGS_STYLES_COL_FORMAT)
    GetSettingsForStylesWorksheet.typeColumn = GetSettingsColNum(SETTINGS_STYLES_COL_OBJECT_TYPE)
    GetSettingsForStylesWorksheet.firstYesNoColumn = GetSettingsColNum(SETTINGS_STYLES_COL_FIRST_YES_NO_VIEW)
    GetSettingsForStylesWorksheet.selectedViewColumn = GetSettingsColNum(SETTINGS_STYLES_COL_SHOW_STYLE)
End Function

Public Function GetSettingsColNum(ByVal namedRange As String) As Long
    GetSettingsColNum = ActiveSheet.Range(SettingsSheet.Range(namedRange) & 1).column
End Function

Public Function GetSettingsForDataWorksheet(ByVal worksheetName As String) As DataWorksheet
    GetSettingsForDataWorksheet.worksheetName = worksheetName
    
    GetSettingsForDataWorksheet.headingRow = CLng(SettingsSheet.Range(SETTINGS_DATA_ROW_HEADING))
    GetSettingsForDataWorksheet.firstRow = CLng(SettingsSheet.Range(SETTINGS_DATA_ROW_FIRST))
    GetSettingsForDataWorksheet.lastRow = CLng(SettingsSheet.Range(SETTINGS_DATA_ROW_LAST))
    If GetSettingsForDataWorksheet.lastRow = 0 Then
        GetSettingsForDataWorksheet.lastRow = getLastRow(worksheetName)
    End If

    GetSettingsForDataWorksheet.flagColumn = GetSettingsColNum(SETTINGS_DATA_COL_COMMENT)
    GetSettingsForDataWorksheet.styleNameColumn = GetSettingsColNum(SETTINGS_DATA_COL_STYLE)
    GetSettingsForDataWorksheet.itemColumn = GetSettingsColNum(SETTINGS_DATA_COL_ITEM)
    GetSettingsForDataWorksheet.labelColumn = GetSettingsColNum(SETTINGS_DATA_COL_LABEL)
    GetSettingsForDataWorksheet.xLabelColumn = GetSettingsColNum(SETTINGS_DATA_COL_LABEL_X)
    GetSettingsForDataWorksheet.tailLabelColumn = GetSettingsColNum(SETTINGS_DATA_COL_LABEL_TAIL)
    GetSettingsForDataWorksheet.headLabelColumn = GetSettingsColNum(SETTINGS_DATA_COL_LABEL_HEAD)
    GetSettingsForDataWorksheet.isRelatedToItemColumn = GetSettingsColNum(SETTINGS_DATA_COL_IS_RELATED_TO)
    GetSettingsForDataWorksheet.extraAttributesColumn = GetSettingsColNum(SETTINGS_DATA_COL_EXTRA_ATTRIBUTES)
    GetSettingsForDataWorksheet.errorMessageColumn = GetSettingsColNum(SETTINGS_DATA_COL_ERROR_MESSAGES)
    GetSettingsForDataWorksheet.graphDisplayColumn = GetSettingsColNum(SETTINGS_DATA_COL_GRAPH)
    GetSettingsForDataWorksheet.graphDisplayColumnAsAlpha = SettingsSheet.Range(SETTINGS_DATA_COL_GRAPH)
End Function

Public Function GetSettingsForSourceWorksheet() As sourceWorksheet
    GetSettingsForSourceWorksheet.headingRow = CLng(SettingsSheet.Range(SETTINGS_SOURCE_ROW_HEADING))
    GetSettingsForSourceWorksheet.firstRow = CLng(SettingsSheet.Range(SETTINGS_SOURCE_ROW_FIRST))

    GetSettingsForSourceWorksheet.lineNumberColumn = GetSettingsColNum(SETTINGS_SOURCE_COL_LINE_NUMBER)
    GetSettingsForSourceWorksheet.sourceColumn = GetSettingsColNum(SETTINGS_SOURCE_COL_SOURCE)
    GetSettingsForSourceWorksheet.indent = CLng(SettingsSheet.Range(SETTINGS_SOURCE_INDENT))
    
    If GetSettingsForSourceWorksheet.indent < 0 Then
        GetSettingsForSourceWorksheet.indent = 0
    ElseIf GetSettingsForSourceWorksheet.indent > 8 Then
        GetSettingsForSourceWorksheet.indent = 8
    End If
End Function

Public Function GetSettingsForSqlWorksheet() As sqlWorksheet
    GetSettingsForSqlWorksheet.headingRow = CLng(SettingsSheet.Range(SETTINGS_SQL_ROW_HEADING))
    GetSettingsForSqlWorksheet.firstRow = CLng(SettingsSheet.Range(SETTINGS_SQL_ROW_FIRST))

    GetSettingsForSqlWorksheet.flagColumn = GetSettingsColNum(SETTINGS_SQL_COL_COMMENT)
    GetSettingsForSqlWorksheet.sqlStatementColumn = GetSettingsColNum(SETTINGS_SQL_COL_SQL_STATEMENT)
    GetSettingsForSqlWorksheet.excelFileColumn = GetSettingsColNum(SETTINGS_SQL_COL_EXCEL_FILE)
    GetSettingsForSqlWorksheet.statusColumn = GetSettingsColNum(SETTINGS_SQL_COL_STATUS)
End Function

Public Function GetSettingsForFileOutput() As FileOutput
    GetSettingsForFileOutput.appendOptions = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_APPEND_OPTIONS)
    GetSettingsForFileOutput.appendTimeStamp = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_APPEND_TIMESTAMP)
    GetSettingsForFileOutput.directory = Trim$(SettingsSheet.Range(SETTINGS_OUTPUT_DIRECTORY))
    GetSettingsForFileOutput.fileNamePrefix = Trim$(SettingsSheet.Range(SETTINGS_FILE_NAME))
    GetSettingsForFileOutput.date = GetDate()
    GetSettingsForFileOutput.time = GetTime()
End Function

Public Function GetSettingsForGraph() As graphOptions
    GetSettingsForGraph.addStrict = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_GRAPH_STRICT)
    GetSettingsForGraph.center = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_GRAPH_CENTER)
    GetSettingsForGraph.compound = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_GRAPH_COMPOUND)
    GetSettingsForGraph.concentrate = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_GRAPH_CONCENTRATE)
    GetSettingsForGraph.debug = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_DEBUG)
    GetSettingsForGraph.fileDisposition = Trim$(SettingsSheet.Range(SETTINGS_FILE_DISPOSITION))
    GetSettingsForGraph.forceLabels = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_GRAPH_FORCE_LABELS)
    GetSettingsForGraph.blankEdgeLabels = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_BLANK_EDGE_LABELS)
    GetSettingsForGraph.blankNodeLabels = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_BLANK_NODE_LABELS)
    GetSettingsForGraph.includeExtraAttributes = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_INCLUDE_EXTRA_ATTRIBUTES)
    GetSettingsForGraph.includeOrphanEdges = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_RELATIONSHIPS_WITHOUT_NODES)
    GetSettingsForGraph.includeOrphanNodes = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_NODES_WITHOUT_RELATIONSHIPS)
    GetSettingsForGraph.includeStyleFormat = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_INCLUDE_STYLE_FORMAT)
    
    GetSettingsForGraph.includeEdgeLabels = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_EDGE_LABELS)
    GetSettingsForGraph.includeEdgeXLabels = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_EDGE_XLABELS)
    GetSettingsForGraph.includeEdgeHeadLabels = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_EDGE_HEAD_LABELS)
    GetSettingsForGraph.includeEdgeTailLabels = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_EDGE_TAIL_LABELS)
    
    GetSettingsForGraph.includeNodeLabels = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_NODE_LABELS)
    GetSettingsForGraph.includeNodeXLabels = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_NODE_XLABELS)
    
    GetSettingsForGraph.maxSeconds = CLng(SettingsSheet.Range(SETTINGS_MAX_SECONDS))
    GetSettingsForGraph.newrank = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_GRAPH_NEWRANK)
    GetSettingsForGraph.options = SettingsSheet.Range(SETTINGS_GRAPH_OPTIONS)
    GetSettingsForGraph.orientation = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_GRAPH_ORIENTATION)
    GetSettingsForGraph.outputOrder = SettingsSheet.Range(SETTINGS_GRAPH_OUTPUT_ORDER)
    GetSettingsForGraph.overlap = SettingsSheet.Range(SETTINGS_GRAPH_OVERLAP)
    GetSettingsForGraph.pictureName = SettingsSheet.Range(SETTINGS_PICTURE_NAME)
    GetSettingsForGraph.rankdir = SettingsSheet.Range(SETTINGS_RANKDIR)
    GetSettingsForGraph.splines = SettingsSheet.Range(SETTINGS_SPLINES)
    GetSettingsForGraph.transparentBackground = GetCellBoolean(WORKSHEET_SETTINGS, SETTINGS_GRAPH_TRANSPARENT)
    
    GetSettingsForGraph.engine = SettingsSheet.Range(SETTINGS_GRAPHVIZ_ENGINE)
    If Trim$(GetSettingsForGraph.engine) = vbNullString Then
        GetSettingsForGraph.engine = SETTINGS_DEFAULT_GRAPHVIZ_ENGINE
    End If
    
    GetSettingsForGraph.imageTypeFile = SettingsSheet.Range(SETTINGS_FILE_FORMAT)
    If Trim$(GetSettingsForGraph.imageTypeFile) = vbNullString Then
        GetSettingsForGraph.imageTypeFile = SETTINGS_DEFAULT_TO_FILE_TYPE
    End If
    
    GetSettingsForGraph.imageTypeWorksheet = SettingsSheet.Range(SETTINGS_IMAGE_TYPE)
    If Trim$(GetSettingsForGraph.imageTypeWorksheet) = vbNullString Then
        GetSettingsForGraph.imageTypeWorksheet = WORKSHEET_GRAPH
    End If
    
    GetSettingsForGraph.imageWorksheet = SettingsSheet.Range(SETTINGS_IMAGE_WORKSHEET)
    If Trim$(GetSettingsForGraph.imageWorksheet) = vbNullString Then
        GetSettingsForGraph.imageWorksheet = SETTINGS_DEFAULT_TO_WORKSHEET_TYPE
    End If
    
    GetSettingsForGraph.imagePath = GetImagePath()
    
    GetSettingsForGraph.graphType = SettingsSheet.Range(SETTINGS_GRAPH_TYPE)
    If GetSettingsForGraph.graphType = "undirected" Then
        GetSettingsForGraph.command = "graph"
        GetSettingsForGraph.edgeOperator = "--"
    ElseIf GetSettingsForGraph.graphType = "directed" Then
        GetSettingsForGraph.command = "digraph"
        GetSettingsForGraph.edgeOperator = "->"
    Else
        GetSettingsForGraph.command = "graph"
        GetSettingsForGraph.edgeOperator = "--"
    End If

End Function

Public Function GetSettingsForCommandLine() As commandLine
    GetSettingsForCommandLine.parameters = SettingsSheet.Range(SETTINGS_COMMAND_LINE_PARAMETERS)
End Function

Attribute VB_Name = "modWorksheetSource"
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved

'@Folder("Relationship Visualizer.Sheets.Source")
Option Explicit

Public Sub LaunchGVEdit()
    If SearchPathForFile("gvedit.exe") Then
        Dim taskId As Variant
        '@Ignore AssignmentNotUsed
        taskId = Shell("gvedit.exe", 1)
    End If
End Sub

Public Sub DisplayFileOnSourceWorksheet(ByVal fileName As String)
    Dim fileNum As Long
    Dim dataLine As String
    Dim row As Long
    Dim line As Long
    
    ' Remove any existing content
    ClearSourceWorksheet
        
    ' Get the layout of the "source" worksheet
    Dim source As sourceWorksheet
    source = GetSettingsForSourceWorksheet()
    
    ' Initialize row counters
    row = source.firstRow
    line = 1

    ' Create column headings
    SetCell WORKSHEET_SOURCE, source.headingRow, source.lineNumberColumn, "Line"
    SetCell WORKSHEET_SOURCE, source.headingRow, source.sourceColumn, "Graphviz Source"
    
    ' Open the file for read
    fileNum = FreeFile()
    Open fileName For Input As #fileNum

    ' Copy each row of the file into a cell
    Do While Not EOF(fileNum)
        Line Input #fileNum, dataLine            ' read in data 1 line at a time
        SetCell WORKSHEET_SOURCE, row, source.lineNumberColumn, line
        SetCell WORKSHEET_SOURCE, row, source.sourceColumn, dataLine
        row = row + 1
        line = line + 1
    Loop
        
    ' Close the file
    Close #fileNum

End Sub

Public Sub ClearSourceWorksheet()
    
    ' The sheet to be cleared
    Dim worksheetName As String
    worksheetName = WORKSHEET_SOURCE
    
    ' Get the layout of the 'data' worksheet
    Dim sourceLayout As sourceWorksheet
    sourceLayout = GetSettingsForSourceWorksheet()

    ' Determine the range of the cells which need to be cleared
    Dim lastRow As Long
    lastRow = getLastRow(worksheetName)
    
    ' If the worksheet is already empty we do not want to wipe out the heading row
    If lastRow < sourceLayout.firstRow Then
        lastRow = sourceLayout.firstRow
    End If
    
    ' Determine the columns to clear
    Dim lastColumn As Long
    lastColumn = GetLastColumn(worksheetName, sourceLayout.headingRow)

    ' Remove any existing content
    Dim cellRange As String
    cellRange = "A" & sourceLayout.firstRow & ":" & ConvertColumnNumberToLetters(lastColumn) & lastRow
    ActiveWorkbook.Worksheets(worksheetName).Range(cellRange).ClearContents
    
End Sub

Public Sub StringToSourceWorksheet(ByVal sourceText As String, ByVal delimiter As String)
    Dim row As Long
    Dim dataArr() As String
    Dim lineCnt As Long
    Dim item As Variant
    
    ' Remove any existing content
    ClearSourceWorksheet
    
    ' Get the layout of the "source" worksheet
    Dim source As sourceWorksheet
    source = GetSettingsForSourceWorksheet()
    
    ' Split the sourceText into and array of strings using the delimiter passed in
    dataArr = Split(sourceText, delimiter)

    row = source.firstRow
    lineCnt = 1
    For Each item In dataArr
        SetCell WORKSHEET_SOURCE, row, source.lineNumberColumn, lineCnt
        SetCell WORKSHEET_SOURCE, row, source.sourceColumn, item
        lineCnt = lineCnt + 1
        row = row + 1
    Next
    
End Sub

Public Sub SourceWorksheetToFile(ByVal fileName As String)
    ' Get the layout of the "source" worksheet
    Dim source As sourceWorksheet
    source = GetSettingsForSourceWorksheet()
    
    ' Write the contents to the file
    Dim fileNo As Long
    fileNo = FreeFile
    
    Open fileName For Output As #fileNo
    
    Dim rowNumber As Long
    For rowNumber = source.firstRow To getLastRow(WORKSHEET_SOURCE)
        Print #fileNo, GetCell(WORKSHEET_SOURCE, rowNumber, source.sourceColumn)
    Next rowNumber
    
    Close #fileNo
    
End Sub

Public Function getSourceWorksheetText() As String
    getSourceWorksheetText = vbNullString
    
    ' Get the layout of the "source" worksheet
    Dim source As sourceWorksheet
    source = GetSettingsForSourceWorksheet()
    
    ' Pull all the rows into a single string
    Dim rowNumber As Long
    For rowNumber = source.firstRow To getLastRow(WORKSHEET_SOURCE)
        getSourceWorksheetText = getSourceWorksheetText & vbCrLf & GetCell(WORKSHEET_SOURCE, rowNumber, source.sourceColumn)
    Next rowNumber
    
End Function

Public Sub CopySourceToClipboard()
    Dim cellRange As String
    
    ' Get the layout of the "source" worksheet
    Dim source As sourceWorksheet
    source = GetSettingsForSourceWorksheet()
    
    ' Determine the range of cells containing the source code
    cellRange = ConvertColumnNumberToLetters(source.sourceColumn) & source.firstRow & ":" & ConvertColumnNumberToLetters(source.sourceColumn) & getLastRow(WORKSHEET_SOURCE)

    ' Copy range to clipboard
    SourceSheet.Range(cellRange).Copy
End Sub

Public Sub CreateGraphFromSourceToWorksheet()

    ' Clear the status bar
    ClearStatusBar

    ' Read in the runtime settings
    Dim ini As Settings
    ini = GetSettings(WORKSHEET_DATA)

    ' Remove any existing graph image from the target worksheet
    Dim displayDataSheetName As String
    Dim targetCell As String

    displayDataSheetName = WORKSHEET_GRAPH
    targetCell = "B2"
            
    ActiveWorkbook.Sheets(displayDataSheetName).Activate
    DeletePictures displayDataSheetName, targetCell

    ' Determine output directory, and build file names
    Dim outputDirectory As String
    outputDirectory = Environ$("temp")

    Dim filenameBase As String
    Dim graphvizFile As String
    Dim diagramFile As String

    ' Get the file name, minus the file extension
    filenameBase = outputDirectory & "\" & "RelationshipVisualizer"

    ' Add the file extensions
    graphvizFile = filenameBase & ".gv"
    diagramFile = filenameBase & "." & ini.graph.imageTypeWorksheet

    ' Remove any old files by the same name
    DeleteFile (graphvizFile)
    DeleteFile (diagramFile)

    ' Create the '.gv' Graphviz source code file from the source worksheet
    SourceWorksheetToFile graphvizFile

    ' Convert the Graphviz source code into a diagram
    Dim ret As Long

    ret = CreateGraphDiagram(graphvizFile, diagramFile, _
                             ini.graph.imageTypeWorksheet, ini.graph.engine, _
                             ini.commandLine.parameters, CLng(ini.graph.maxSeconds) * 1000)
    
    
    If ret = ShellAndWaitResult.success Then    ' Show the graph image
        If FileExists(diagramFile) Then
            Dim shapeObject As Shape
            '@Ignore AssignmentNotUsed
            Set shapeObject = InsertPicture(diagramFile, ActiveSheet.Range(targetCell), False, True)
            Set shapeObject = Nothing
        Else
            MsgBox "No graph was created. Check the data for errors.", vbOKOnly
        End If
    ElseIf ret < 0 Then                         ' Graphviz is not installed
        AlertGraphvizNotFound (ini.graph.engine)
    Else                                        ' ShellAndWait failed
        ShellAndWaitMessage ret
    End If

    ' Delete the temporary files
    DeleteFile (graphvizFile)
    DeleteFile (diagramFile)
    
End Sub

Public Sub CreateGraphFromSourceToFile()
    Dim graphvizFile As String
    Dim ret As Long
    Dim diagramFile As String
    Dim styleColumn As Long
    
    Dim filenameBase As String

    ' Read in the runtime settings
    Dim ini As Settings
    ini = GetSettings(WORKSHEET_DATA)

    ' Determine output directory, and build file names
    If ini.output.directory = vbNullString Then
        MsgBox "You must specify an Output Directory on the 'settings' worksheet to use the 'Graph to File' feature"
        SettingsSheet.Activate
        ActiveSheet.Range("OutputDirectory").Activate
        Exit Sub
    End If

    ' Get the file name, minus the file extension
    styleColumn = GetSettingsColNum(SETTINGS_STYLES_COL_SHOW_STYLE)
    
    ' Compose the filename
    If FileLocationProvided(ini) Then
        filenameBase = GetFilenameBase(ini, styleColumn)
    Else
        Exit Sub
    End If

    ' Create the filenames
    graphvizFile = filenameBase & ".gv"      ' Input (Graphviz) source code filename
    diagramFile = filenameBase & "." & ini.graph.imageTypeFile ' Output (diagram) filename

    ' Remove any old files by the same name
    DeleteFile (graphvizFile)
    DeleteFile (diagramFile)

    ' Create the '.gv' Graphviz source code file from the source worksheet
    SourceWorksheetToFile graphvizFile
    If Not FileExists(graphvizFile) Then
        MsgBox "Graph .gv source file was not found. No graph can be created.", vbOKOnly
        Exit Sub
    End If

    ' Convert source code into a graph diagram
    ret = CreateGraphDiagram(graphvizFile, diagramFile, ini.graph.imageTypeFile, _
                             ini.graph.engine, ini.commandLine.parameters, CLng(ini.graph.maxSeconds) * 1000)
    
    If ret < 0 Then                                 ' Graphviz is not installed
        AlertGraphvizNotFound (ini.graph.engine)
    ElseIf ret <> ShellAndWaitResult.success Then   ' Inform user of failure
        ShellAndWaitMessage ret
    End If

    ' If the diagram file is not there, then Graphviz failed
    If FileExists(diagramFile) Then
        MsgBox "Graph filename is: " & diagramFile
    Else
        MsgBox "No graph was created. Check the data for errors.", vbOKOnly
    End If

    ' Delete the command file if disposition is 'delete'
    If ini.graph.fileDisposition = "delete" Then
        DeleteFile (graphvizFile)
    End If

End Sub

Public Sub UpdateSourceWorksheetLineNumbers()
    Dim cellRange As String
    Dim rowLast As Long
    Dim sourceLayout As sourceWorksheet
    Dim worksheetName As String
    Dim lineNumCol As String
    
    ' The sheet to be cleared
    worksheetName = WORKSHEET_SOURCE
    
    ' Get the layout of the 'data' worksheet
    sourceLayout = GetSettingsForSourceWorksheet()
    ' Determine the range of the cells which need to be cleared
    rowLast = getLastRow(worksheetName)
    
    ' If the worksheet is already empty we do not want to wipe out the heading row
    If rowLast < sourceLayout.firstRow Then
        rowLast = sourceLayout.firstRow
    End If
    
    ' Determine the columns to clear
    lineNumCol = ConvertColumnNumberToLetters(sourceLayout.lineNumberColumn)

    ' Remove any existing content
    cellRange = lineNumCol & sourceLayout.firstRow & ":" & lineNumCol & rowLast
    ActiveWorkbook.Worksheets(worksheetName).Range(cellRange).ClearContents
    
    ' Renumber the rows
    Dim rowNumber As Long
    Dim lineCnt As Long
    lineCnt = 1
    For rowNumber = sourceLayout.firstRow To getLastRow(WORKSHEET_SOURCE)
        SetCell WORKSHEET_SOURCE, rowNumber, sourceLayout.lineNumberColumn, lineCnt
        lineCnt = lineCnt + 1
    Next rowNumber

End Sub

















Attribute VB_Name = "modWorksheetStyleDesigner"
' Copyright (c) 2015-2018 Jeffrey J. Long. All rights reserved

'@Folder("Relationship Visualizer.Sheets.Style Designer")
Option Explicit


Public Sub CopyNodeFormatToClipboard()
    
    CopyTextToClipboard Trim$(GetCellString(ActiveSheet.Name, DESIGNER_FORMAT_STRING))
    
End Sub

Public Sub RenderElement(ByVal formatCellName As String, ByVal labelCellName As String, ByVal previewCellName As String, ByVal elementType As String, ByVal createFormat As Boolean)

    Dim label As String
    Dim styleAttributes As String
    Dim previewCell As String
    Dim gvData As String
    Dim addCaption As Boolean
    
    styleAttributes = vbNullString
    
    If createFormat Then
        ' Clear the Style cell
        StyleDesignerSheet.Range(formatCellName).value = vbNullString
        
        ' Generate the Style Definition from the dropdown lists
        Select Case elementType
            Case KEYWORD_NODE
                styleAttributes = GetNodeStyle()
            Case KEYWORD_EDGE
                styleAttributes = GetEdgeStyle()
            Case KEYWORD_CLUSTER
                styleAttributes = GetClusterStyle()
        End Select
        
        ' Display the style definition which was created
        StyleDesignerSheet.Range(formatCellName).value = styleAttributes
    Else
        ' The user has composed/edited the format. Use the value in the format cell
        styleAttributes = Trim$(StyleDesignerSheet.Range(formatCellName).value)
    End If
    
    ' Get text to be used as the label in the rendered node
    label = Trim$(StyleDesignerSheet.Range(labelCellName).value)

    ' Get the user-specified cell where the preview image should be displayed
    previewCell = Trim$(StyleDesignerSheet.Range(previewCellName).value)
    If previewCell <> vbNullString Then
        
        ' Find out if the user wants the graph options included in the preview
        If Trim$(UCase$(StyleDesignerSheet.Range(DESIGNER_ADD_CAPTION).value)) = "TRUE" Then
            addCaption = True
        End If
        
        ' Create the Graphviz statements which can preview the style
        gvData = GeneratePreviewGraph(elementType, label, styleAttributes, addCaption)
        
        ' Generate the image, and display it at the location specified
        PreviewStyle gvData, previewCell
    End If

End Sub

Public Function GeneratePreviewGraph(ByVal elementType As String, _
                                     ByVal label As String, _
                                     ByVal styleAttributes As String, _
                                     ByVal addCaption As Boolean) As String

    GeneratePreviewGraph = vbNullString
    
    Dim commandString As String
    commandString = vbNullString
    
    Dim graphSplines As String
    Dim graphOptions As String
    Dim imagePath As String
    Dim engine As String
    Dim direction As String
    
    ' =====================================================================
    ' Obtain the run time parameters from the 'settings' worksheet
    ' =====================================================================
    
    ' Graph Options section
    engine = SettingsSheet.Range(SETTINGS_GRAPHVIZ_ENGINE)
    graphSplines = SettingsSheet.Range(SETTINGS_SPLINES)
    imagePath = GetImagePath()
    direction = SettingsSheet.Range(SETTINGS_GRAPH_LAYOUT_DIRECTION)

    ' Tweak the graph options to give the previews a tiny border
    graphOptions = SettingsSheet.Range(SETTINGS_GRAPH_OPTIONS) & _
                                                               " pad=" & AddQuotes("0.03125,0.03125") & _
                                                               " ranksep=" & AddQuotes("1")
    
    ' If the graphing engine is "dot" add in the direction specification
    If UCase$(engine) = "DOT" Then
        Dim rankdir As String
        rankdir = SettingsSheet.Range("Rankdir")
        graphOptions = "rankdir=" & AddQuotes(rankdir) & "; " & graphOptions
    End If
    
    graphOptions = graphOptions & " imagepath=" & AddQuotes(imagePath) & SEMICOLON

    ' =====================================================================
    ' Convert the data to graphviz format
    ' =====================================================================
    
    commandString = commandString & "digraph g{ splines=" & AddQuotes(graphSplines) & "; " & graphOptions & Chr$(10)
   
    If addCaption Then
        commandString = commandString & " " & GetPreviewCaption(elementType, engine, graphSplines, direction) & Chr$(10)
    End If

    If elementType = KEYWORD_NODE Then
        commandString = commandString & "  " & AddQuotes("node1") & " [label=" & AddQuotes(label) & " " & styleAttributes & " ];" & Chr$(10)
        
    ElseIf elementType = KEYWORD_EDGE Then
        commandString = commandString & GetPreviewNodeEdge(GetPreviewNodeStyle("gray", "gray"))
        commandString = commandString & " [label=" & AddQuotes(label) & " headlabel=" & AddQuotes("Head Label") & " taillabel=" & AddQuotes("Tail Label") & " " & styleAttributes & " ];" & Chr$(10)
        
    ElseIf elementType = KEYWORD_CLUSTER Then
        commandString = commandString & " subgraph cluster_1{ " & Chr$(10)
        commandString = commandString & styleAttributes & " label=" & AddQuotes(label) & " " & Chr$(10)
        commandString = commandString & GetPreviewNodeEdge(GetPreviewNodeStyle("black", "black"))
        commandString = commandString & "}" & Chr$(10)
    End If
    
    commandString = commandString & "}"

    GeneratePreviewGraph = commandString
    
End Function

Public Function GetPreviewNodeEdge(ByVal nodeStyle As String) As String
    GetPreviewNodeEdge = GetPreviewNodeEdge & "  " & AddQuotes("TAIL") & "[" & nodeStyle & "];" & Chr$(10)
    GetPreviewNodeEdge = GetPreviewNodeEdge & "  " & AddQuotes("HEAD") & "[" & nodeStyle & "];" & Chr$(10)
    GetPreviewNodeEdge = GetPreviewNodeEdge & "  " & AddQuotes("TAIL") & "->" & AddQuotes("HEAD")
End Function

Public Function GetPreviewCaption(ByVal elementType As String, ByVal engine As String, ByVal graphSplines As String, ByVal direction As String) As String

    Dim label As String
    
    label = elementType & "\l\lLayout: " & engine & " \lSplines: " & graphSplines
    If UCase$(engine) = "DOT" Then
        label = label & "\lDirection: " & direction
    End If
    
    If UCase$(elementType) = KEYWORD_CLUSTER Then
        If UCase$(engine) = "CIRCO" Or UCase$(engine) = "PATCHWORK" Or UCase$(engine) = "SFDP" Or UCase$(engine) = "TWOPI" Then
            label = label & "\l\lNOTE: Graphing engine '" & engine & "'\ldoes not support clusters."
        End If
    End If

    GetPreviewCaption = AddQuotes("legend") & "["
    GetPreviewCaption = AddNameValue(GetPreviewCaption, "shape", "plaintext")
    GetPreviewCaption = AddNameValue(GetPreviewCaption, "fontname", "Arial")
    GetPreviewCaption = AddNameValue(GetPreviewCaption, "fontsize", "10")
    GetPreviewCaption = AddNameValue(GetPreviewCaption, "label", label)
    GetPreviewCaption = GetPreviewCaption & "];"
    
End Function

Public Function GetPreviewNodeStyle(ByVal pencolor As String, ByVal fontColor As String) As String

    Dim styleAttributes As String
    
    styleAttributes = AddNameValue(styleAttributes, "shape", "polygon")
    styleAttributes = AddNameValue(styleAttributes, "sides", "8")
    styleAttributes = AddNameValue(styleAttributes, "color", pencolor)
    styleAttributes = AddNameValue(styleAttributes, "fixedsize", "true")
    styleAttributes = AddNameValue(styleAttributes, "fontname", "Arial")
    styleAttributes = AddNameValue(styleAttributes, "fontsize", "10")
    styleAttributes = AddNameValue(styleAttributes, "fontcolor", fontColor)
    styleAttributes = AddNameValue(styleAttributes, "height", "0.50")
    styleAttributes = AddNameValue(styleAttributes, "width", "0.50")
    styleAttributes = AddNameValue(styleAttributes, "style", "filled")
    styleAttributes = AddNameValue(styleAttributes, "fillcolor", "white")

    GetPreviewNodeStyle = styleAttributes
End Function

Public Sub PreviewStyle(ByVal gvData As String, ByVal targetCell As String)
    
    ' The type of image to generate
    Dim outputFormat As String
    outputFormat = "png"
    
    ' =====================================================================
    ' Prepare the output files
    ' =====================================================================
    
    Dim outputDirectory As String
    outputDirectory = Environ$("temp")
    
    ' Determine if output directory exists
    If Len(Dir(outputDirectory, vbDirectory)) = 0 Then
        MsgBox "Output directory specified (" & outputDirectory & ") does not exist. You must create this directory manually.", vbCritical
        Exit Sub
    End If

    ' File name variables
    Dim graphvizFile As String
    Dim diagramFile As String
    
    graphvizFile = outputDirectory & "\PreviewStyle.gv"
    diagramFile = outputDirectory & "\PreviewStyle." & outputFormat
          
    ' Remove any image from a previous run of the macro
    DeletePictures WORKSHEET_STYLE_DESIGNER, targetCell
    DeleteFile graphvizFile
    DeleteFile diagramFile
    
    ' -----------------------------------------------------------------------------
    ' Obtain the run time parameters from the 'settings' worksheet
    ' -----------------------------------------------------------------------------
    
    ' "Graph Options" section
    Dim graphEngine As String
    graphEngine = SettingsSheet.Range(SETTINGS_GRAPHVIZ_ENGINE)
   
    ' "Command Line Options" section
    Dim commandLineParameters As String
    commandLineParameters = SettingsSheet.Range(SETTINGS_COMMAND_LINE_PARAMETERS)
        
    ' Write the Graphviz data to a file so it can be sent to a rendering engine
    WriteTextToFile gvData, graphvizFile
    
    ' Generate an image using grapviz
    Dim returnCode As Long
    returnCode = CreateGraphDiagram(graphvizFile, diagramFile, outputFormat, _
                                    graphEngine, commandLineParameters, 60000)
    Select Case returnCode
        Case ShellAndWaitResult.success
            If Dir(diagramFile) <> vbNullString Then
                ' Display the generated image
                Dim shapeObject As Shape
                '@Ignore AssignmentNotUsed
                Set shapeObject = InsertPicture(diagramFile, ActiveSheet.Range(targetCell), False, True)
                Set shapeObject = Nothing
            End If
       
        Case ShellAndWaitResult.timeout
            MsgBox "Unable to create preview image within timeout limit.", vbOKOnly
        
        Case Else
            MsgBox "Unable to create preview image. Graphviz command failed.", vbOKOnly
    End Select
              
    ' Delete the temporary files
    DeleteFile graphvizFile
    DeleteFile diagramFile
    
End Sub

Private Function AddAttribute(ByVal styleAttributes As String, _
                              ByVal attrName As String, _
                              ByVal cellName As String) As String
    ' Get the cell value
    Dim cellValue As String
    cellValue = Trim$(StyleDesignerSheet.Range(cellName).value)
    
    If cellValue = vbNullString Then
        AddAttribute = styleAttributes
    Else                                         ' If a value is present, write it out as a name/value pair
        AddAttribute = styleAttributes & " " & attrName & "=" & AddQuotes(cellValue)
    End If

End Function

'@Ignore UseMeaningfulName
Public Function AddAttributeGroup(ByVal styleAttributes As String, _
                                  ByVal attrName As String, _
                                  ByVal cellName1 As String, _
                                  ByVal cellName2 As String, _
                                  ByVal cellName3 As String, _
                                  ByVal separator As String) As String

    Dim cellValue As String

    AddAttributeGroup = styleAttributes
    
    ' Get first group attribute. If blank, ignore the others in the group
    cellValue = Trim$(StyleDesignerSheet.Range(cellName1).value)
    
    If cellValue <> vbNullString Then
        ' Start building the group attribute
        AddAttributeGroup = AddAttributeGroup & " " & attrName & "=" & Chr$(34) & cellValue
    
        ' Get the second attribute of the group
        cellValue = Trim$(StyleDesignerSheet.Range(cellName2).value)
        
        ' Add to set of attributes if not blank
        If cellValue <> vbNullString Then
            AddAttributeGroup = AddAttributeGroup & separator & cellValue
    
            ' Get the third group attribute
            cellValue = Trim$(StyleDesignerSheet.Range(cellName3).value)
            
            ' Add to set of attributes if not blank
            If cellValue <> vbNullString Then
                AddAttributeGroup = AddAttributeGroup & separator & cellValue
            End If
        End If
    
        ' Close the double quotes around the set of attributes
        AddAttributeGroup = AddAttributeGroup & Chr$(34)
    End If

End Function

'@Ignore UseMeaningfulName
Public Function AddStyleAttribute(ByVal styleAttributes As String, _
                                  ByVal cellName1 As String, _
                                  ByVal cellName2 As String, _
                                  ByVal cellName3 As String, _
                                  ByVal gradientType As String) As String
    Dim cellValue As String
    
    AddStyleAttribute = styleAttributes
    
    ' Get first style attribute. If blank, ignore the others
    cellValue = Trim$(StyleDesignerSheet.Range(cellName1).value)
    
    If cellValue <> vbNullString Then
        ' Start building the style attribute
        AddStyleAttribute = AddStyleAttribute & " style=" & Chr$(34) & cellValue
    
        ' Get the second style attribute
        cellValue = Trim$(StyleDesignerSheet.Range(cellName2).value)
        
        ' Add to set of styles if not blank
        If cellValue <> vbNullString Then
            AddStyleAttribute = AddStyleAttribute & COMMA & cellValue
    
            ' Get the third style attribute
            cellValue = Trim$(StyleDesignerSheet.Range(cellName3).value)
            
            ' Add to set of styles if not blank
            If cellValue <> vbNullString Then
                AddStyleAttribute = AddStyleAttribute & COMMA & cellValue
            End If
        End If
        
        ' If a fill color attribute was specified, a value of "filled" or "radial" must be included
        ' as one of the values in the 'style' attribute.
        If gradientType <> vbNullString Then
            AddStyleAttribute = AddStyleAttribute & COMMA & gradientType
        End If
    
        ' Close the double quotes around the style attributes
        AddStyleAttribute = AddStyleAttribute & Chr$(34)
    
        ' Even though the style attributes are blank, we still need to return a style attribute if a
        ' fill color was specified elsewhere. gradientType will tell us if this is required.
    ElseIf gradientType <> vbNullString Then
        AddStyleAttribute = AddStyleAttribute & " style=" & AddQuotes(gradientType)
    End If

End Function

'@Ignore UseMeaningfulName
Public Function AddFillColorAttribute(ByVal styleAttributes As String, _
                                      ByVal attrName As String, _
                                      ByVal cellNameFillColor1 As String, _
                                      ByVal cellNameFillColor2 As String, _
                                      ByVal cellNameGradientType As String, _
                                      ByVal cellNameGradientAngle As String) As String

    Dim fillColor As String
    Dim gradientColor As String
    Dim cellValue As String
    Dim gradientType As String

    AddFillColorAttribute = styleAttributes
    
    ' Get Fill Color first
    fillColor = Trim$(StyleDesignerSheet.Range(cellNameFillColor1).value)
    If fillColor <> vbNullString Then
        gradientType = "filled"
        
        ' Since we have a fill color, check for a gradient color
        gradientColor = Trim$(StyleDesignerSheet.Range(cellNameFillColor2).value)
        If gradientColor <> vbNullString Then
            fillColor = fillColor & ":" & gradientColor
            
            ' Gradient type attribute
            cellValue = Trim$(StyleDesignerSheet.Range(cellNameGradientType).value)
            If cellValue <> vbNullString Then
                gradientType = cellValue
            End If
            
            ' Gradient angle attribute
            AddFillColorAttribute = AddAttribute(styleAttributes, "gradientangle", cellNameGradientAngle)
        End If
        
        ' Complete the attribute statement and return
        AddFillColorAttribute = AddFillColorAttribute & " " & attrName & "=" & AddQuotes(fillColor)
    End If

End Function

'@Ignore UseMeaningfulName
Public Function GetGradientType(ByVal cellNameFillColor1 As String, _
                                ByVal cellNameFillColor2 As String, _
                                ByVal cellNameGradientType As String) As String

    GetGradientType = vbNullString
    
    ' Determine gradient type by process of elimination. First see if the gradient
    ' type cell has a value. If so, return that value
    Dim cellValue As String
    cellValue = Trim$(StyleDesignerSheet.Range(cellNameGradientType).value)
    
    If cellValue <> vbNullString Then
        GetGradientType = cellValue
    
        ' Gradient type cell is empty. If a gradient fill color has been specified, return "filled"
    ElseIf Trim$(StyleDesignerSheet.Range(cellNameFillColor2).value) <> vbNullString Then
        GetGradientType = "filled"
    
        ' Gradient type cell is empty. If a fill color has been specified, return "filled"
    ElseIf Trim$(StyleDesignerSheet.Range(cellNameFillColor1).value) <> vbNullString Then
        GetGradientType = "filled"
    End If
    
End Function

Private Function GetNodeStyle() As String
    
    Dim styleAttributes As String
    '@Ignore AssignmentNotUsed
    styleAttributes = vbNullString
    
    ' Label attributes
    styleAttributes = AddAttribute(styleAttributes, "labelloc", DESIGNER_LABEL_LOCATION)
    
    ' Color Scheme
    styleAttributes = AddAttribute(styleAttributes, "colorscheme", DESIGNER_COLOR_SCHEME)
    
    ' Shape attributes
    styleAttributes = AddAttribute(styleAttributes, "shape", DESIGNER_NODE_SHAPE)

    ' If the shape is 'polygon', get the number of polygon sides
    If Trim$(StyleDesignerSheet.Range(DESIGNER_NODE_SHAPE).value) = "polygon" Then
        styleAttributes = AddAttribute(styleAttributes, "sides", DESIGNER_NODE_SIDES)
        styleAttributes = AddAttribute(styleAttributes, "skew", DESIGNER_NODE_SKEW)
        styleAttributes = AddAttribute(styleAttributes, "distortion", DESIGNER_NODE_DISTORTION)
        styleAttributes = AddAttribute(styleAttributes, "regular", DESIGNER_NODE_REGULAR)
    End If
    
    styleAttributes = AddAttribute(styleAttributes, "height", DESIGNER_NODE_HEIGHT)
    styleAttributes = AddAttribute(styleAttributes, "width", DESIGNER_NODE_WIDTH)
    styleAttributes = AddAttribute(styleAttributes, "fixedsize", DESIGNER_NODE_FIXED_SIZE)
    styleAttributes = AddAttribute(styleAttributes, "orientation", DESIGNER_NODE_ORIENTATION)
    
    ' Fill Color attributes
    styleAttributes = AddFillColorAttribute(styleAttributes, "fillcolor", DESIGNER_FILL_COLOR, DESIGNER_GRADIENT_FILL_COLOR, DESIGNER_GRADIENT_FILL_TYPE, DESIGNER_GRADIENT_FILL_ANGLE)
    
    ' Border attributes
    styleAttributes = AddAttribute(styleAttributes, "color", DESIGNER_BORDER_COLOR)
    styleAttributes = AddAttribute(styleAttributes, "penwidth", DESIGNER_BORDER_PEN_WIDTH)
    styleAttributes = AddAttribute(styleAttributes, "peripheries", DESIGNER_BORDER_PERIPHERIES)
 
    ' Font attributes
    Dim fontName As String
    fontName = GetFontStyle(DESIGNER_FONT_BOLD, DESIGNER_FONT_ITALIC)
    If fontName <> vbNullString Then
        styleAttributes = styleAttributes & " fontname=" & AddQuotes(fontName)
    End If
    
    styleAttributes = AddAttribute(styleAttributes, "fontsize", DESIGNER_FONT_SIZE)
    styleAttributes = AddAttribute(styleAttributes, "fontcolor", DESIGNER_FONT_COLOR)
      
    ' Image attributes
    styleAttributes = AddAttribute(styleAttributes, "image", DESIGNER_NODE_IMAGE_NAME)
    styleAttributes = AddAttribute(styleAttributes, "imagescale", DESIGNER_NODE_IMAGE_SCALE)
    
    ' Style attributes
    styleAttributes = AddStyleAttribute(styleAttributes, DESIGNER_BORDER_STYLE1, DESIGNER_BORDER_STYLE2, DESIGNER_BORDER_STYLE3, _
                                        GetGradientType(DESIGNER_FILL_COLOR, DESIGNER_GRADIENT_FILL_COLOR, DESIGNER_GRADIENT_FILL_TYPE))
    
    ' Return the finished string of style attributes
    GetNodeStyle = Trim$(styleAttributes)
    
End Function

Private Function GetFontStyle(ByVal boldCell As String, ByVal italicCell As String) As String

    Dim fontStyle As String
    fontStyle = StyleDesignerSheet.Range(DESIGNER_FONT_NAME).value
    
    If UCase$(StyleDesignerSheet.Range(boldCell).value) = "YES" Then
        fontStyle = fontStyle & " Bold"
    End If
    
    If UCase$(StyleDesignerSheet.Range(italicCell).value) = "YES" Then
        fontStyle = fontStyle & " Italic"
    End If
    
    GetFontStyle = Trim$(fontStyle)

End Function

Private Function GetEdgeStyle() As String

    Dim fontName As String
    Dim styleAttributes As String
    
    styleAttributes = vbNullString

    GetEdgeStyle = styleAttributes
    
    ' Color Scheme
    styleAttributes = AddAttribute(styleAttributes, "colorscheme", DESIGNER_COLOR_SCHEME)
    
    ' Style attributes
    styleAttributes = AddAttribute(styleAttributes, "style", DESIGNER_EDGE_STYLE)
    styleAttributes = AddAttributeGroup(styleAttributes, "color", DESIGNER_EDGE_COLOR_1, DESIGNER_EDGE_COLOR_2, DESIGNER_EDGE_COLOR_3, ":")
    styleAttributes = AddAttribute(styleAttributes, "penwidth", DESIGNER_EDGE_PEN_WIDTH)
    styleAttributes = AddAttribute(styleAttributes, "dir", DESIGNER_EDGE_DIRECTION)
    styleAttributes = AddAttribute(styleAttributes, "weight", DESIGNER_EDGE_WEIGHT)
    
    ' Label attributes
    styleAttributes = AddAttribute(styleAttributes, "decorate", DESIGNER_EDGE_DECORATE)
    styleAttributes = AddAttribute(styleAttributes, "labelangle", DESIGNER_EDGE_LABEL_ANGLE)
    styleAttributes = AddAttribute(styleAttributes, "labelfloat", DESIGNER_EDGE_LABEL_FLOAT)
    styleAttributes = AddAttribute(styleAttributes, "labeldistance", DESIGNER_EDGE_LABEL_DISTANCE)

    ' Arrow attributes
    styleAttributes = AddAttributeGroup(styleAttributes, "arrowhead", DESIGNER_EDGE_ARROW_HEAD_1, DESIGNER_EDGE_ARROW_HEAD_2, DESIGNER_EDGE_ARROW_HEAD_3, vbNullString)
    styleAttributes = AddAttributeGroup(styleAttributes, "arrowtail", DESIGNER_EDGE_ARROW_TAIL_1, DESIGNER_EDGE_ARROW_TAIL_2, DESIGNER_EDGE_ARROW_TAIL_3, vbNullString)
    styleAttributes = AddAttribute(styleAttributes, "arrowsize", DESIGNER_EDGE_ARROW_SIZE)

    ' Font attributes
    fontName = GetFontStyle(DESIGNER_FONT_BOLD, DESIGNER_FONT_ITALIC)
    If fontName <> vbNullString Then
        styleAttributes = styleAttributes & " fontname=" & AddQuotes(fontName)
    End If
    styleAttributes = AddAttribute(styleAttributes, "fontsize", DESIGNER_FONT_SIZE)
    styleAttributes = AddAttribute(styleAttributes, "fontcolor", DESIGNER_FONT_COLOR)
    
    ' Port attributes
    styleAttributes = AddAttribute(styleAttributes, "headport", DESIGNER_EDGE_HEAD_PORT)
    styleAttributes = AddAttribute(styleAttributes, "tailport", DESIGNER_EDGE_TAIL_PORT)
    
    ' Clip attributes
    styleAttributes = AddAttribute(styleAttributes, "headclip", DESIGNER_EDGE_HEAD_CLIP)
    styleAttributes = AddAttribute(styleAttributes, "tailclip", DESIGNER_EDGE_TAIL_CLIP)
   
    GetEdgeStyle = Trim$(styleAttributes)
    
End Function

Private Function GetClusterStyle() As String

    Dim fontName As String
    Dim styleAttributes As String
    
    styleAttributes = vbNullString

    GetClusterStyle = styleAttributes
    
    ' Label attributes
    styleAttributes = AddAttribute(styleAttributes, "labeljust", DESIGNER_LABEL_JUSTIFICATION)
    styleAttributes = AddAttribute(styleAttributes, "labelloc", DESIGNER_LABEL_LOCATION)
    
    ' Color scheme
    styleAttributes = AddAttribute(styleAttributes, "colorscheme", DESIGNER_COLOR_SCHEME)
    
    ' Border attributes
    styleAttributes = AddAttribute(styleAttributes, "penwidth", DESIGNER_BORDER_PEN_WIDTH)
    styleAttributes = AddAttribute(styleAttributes, "pencolor", DESIGNER_BORDER_COLOR)
   
    ' Fill and Gradient Color attributes
    styleAttributes = AddFillColorAttribute(styleAttributes, "fillcolor", DESIGNER_FILL_COLOR, DESIGNER_GRADIENT_FILL_COLOR, DESIGNER_GRADIENT_FILL_TYPE, DESIGNER_GRADIENT_FILL_ANGLE)

    ' Font attributes
    fontName = GetFontStyle(DESIGNER_FONT_BOLD, DESIGNER_FONT_ITALIC)
    If fontName <> vbNullString Then
        styleAttributes = styleAttributes & " fontname=" & AddQuotes(fontName)
    End If
    styleAttributes = AddAttribute(styleAttributes, "fontsize", DESIGNER_FONT_SIZE)
    styleAttributes = AddAttribute(styleAttributes, "fontcolor", DESIGNER_FONT_COLOR)
        
    ' Style attributes
    styleAttributes = AddStyleAttribute(styleAttributes, DESIGNER_BORDER_STYLE1, DESIGNER_BORDER_STYLE2, DESIGNER_BORDER_STYLE3, _
                                        GetGradientType(DESIGNER_FILL_COLOR, DESIGNER_GRADIENT_FILL_COLOR, DESIGNER_GRADIENT_FILL_TYPE))
    
    GetClusterStyle = Trim$(styleAttributes)
    
End Function

Attribute VB_Name = "xmodPlantUML"
' Copyright (c) 2015-2019 Jeffrey J. Long. All rights reserved
' The extension module "xmodPlantUML" code is based an idea and code
' submission by Matthias Roth. Matthias Roth's code was modified by
' Jeffrey Long to work with the new "source' worksheet in version 3.0,
' and to expose it through the new extensions framework which is intended
' to allow users to write their own code extensions and expose them
' through a dedicated FluentUI ribbon tab and buttons. The Graphviz
' to PlantUML code only works for specific graph syntax, and is provided
' with no warranty or planned support on the part of Jeffrey Long. Rather,
' its inclusion here is to demonstrate how custom code can be added to the
' Relationship Visualizer.

Option Explicit

' Example extension code which reads the contents of the "source" worksheet
' and converts the contents to PlantUML format in the next column. To call
' the routines in this module you must specify the sub name on the "settings"
' worksheet as an extension, which will then allow the function to be called
' from a button on the ribbon.

Sub GraphvizToPlantUMLAsClass()
    Call GVtoPU("class")
End Sub

Sub GraphvizToPlantUMLAsSequence()
    Call GVtoPU("sequence")
End Sub

Sub GVtoPU(style As String)

    Dim rowGV As Integer
    Dim rowPU As Integer
    Dim rowFirst As Integer
    Dim rowLast As Integer
    Dim colSourceGV As Integer
    Dim colSourcePU As Integer
    Dim line As String
    Dim item As String
    Dim relatedItem As String
    Dim label As String
    Dim cellRange As String
    
    ' Get the layout of the "source" worksheet
    Dim source As sourceWorksheet
    source = GetSettingsForSourceWorksheet()
    
    ' Determine the worksheet layout
    rowLast = getLastRow(WORKSHEET_SOURCE)
    
    ' If the worksheet is empty, the heading row is rowLast and we don't want to clear it
    If rowLast < source.firstRow Then
        rowLast = source.firstRow
    End If
    
    ' Initialize row counters for each column
    rowGV = source.firstRow
    rowPU = source.firstRow
    
    ' Assume we will write the PlantUML source in the column right of the Graphviz source
    colSourceGV = source.sourceColumn
    colSourcePU = colSourceGV + 1

    ' Remove any existing PlantUML content
    cellRange = ConvertColumnNumberToLetters(colSourcePU) & source.headingRow & ":" & ConvertColumnNumberToLetters(colSourcePU) & rowLast
    Worksheets(WORKSHEET_SOURCE).Range(cellRange).ClearContents
    
    ' Give the PlantUML column a heading
    Sheets(WORKSHEET_SOURCE).Cells(source.headingRow, colSourcePU).value = "PlantUML Source"

    ' Initialize with @startuml tag
    Sheets(WORKSHEET_SOURCE).Cells(rowPU, colSourcePU).value = "@startuml"
    rowPU = rowPU + 1

    ' Loop through the Graphviz source, extracting data from the 'edge' lines
    For rowGV = source.firstRow To rowLast
        line = Sheets(WORKSHEET_SOURCE).Cells(rowGV, colSourceGV).value
        
        If InStr(line, "->") > 0 Then
            label = getLabel(line)
            item = Trim(Left(line, InStr(line, "->") - 1))
            relatedItem = Trim(Right(line, Len(line) - InStr(line, "->") - 1))
            relatedItem = Replace(relatedItem, ";", "")
            
            If InStr(relatedItem, "[") > 0 Then
                relatedItem = Left(relatedItem, InStr(relatedItem, "[") - 1)
            End If
            
            If UCase(style) = "CLASS" Then
                ' Format the line as UML class style
                line = "class " & item & " --> " & relatedItem
            Else
                ' Format the line as UML sequence diagram style
                line = item & " --> " & relatedItem
            End If
            
            ' Append the label text if present
            If label <> "" Then
                line = line & " : " & AddQuotes(label)
            End If
            
            ' Emit the PlantUML line to the source worksheet
            Sheets(WORKSHEET_SOURCE).Cells(rowPU, colSourcePU).value = line
            rowPU = rowPU + 1

        End If
    Next
    
    ' Finalize with @enduml tag
    Sheets(WORKSHEET_SOURCE).Cells(rowPU, colSourcePU).value = "@enduml"

End Sub

Function getLabel(line) As String
    getLabel = ""
    
    If InStr(line, "label=") > 0 Then
        getLabel = Trim(Right(line, Len(line) - InStr(line, "label=") - Len("label=")))
        getLabel = Left(getLabel, InStr(getLabel, """") - 1)
        getLabel = Trim(getLabel)
    End If
End Function

Sub PlantUMLtoClipboard()
    Dim colSourcePU As Integer
    Dim cellRange As String
    
    ' Get the layout of the "source" worksheet
    Dim source As sourceWorksheet
    source = GetSettingsForSourceWorksheet()
    
    ' Determine the range of cells containing the source code
    colSourcePU = source.sourceColumn + 1
    cellRange = ConvertColumnNumberToLetters(colSourcePU) & source.firstRow & ":" & ConvertColumnNumberToLetters(colSourcePU) & getLastRow(WORKSHEET_SOURCE)

    ' Copy range to clipboard
    Worksheets(WORKSHEET_SOURCE).Range(cellRange).Copy
End Sub


' InQuest injected base64 decoded content
' '!zg
' G`x*%
' G`y+r
' V+.jX
' :$zp->
' ]"w%
' ki+r
' j{T0

INQUEST-PP=macro
