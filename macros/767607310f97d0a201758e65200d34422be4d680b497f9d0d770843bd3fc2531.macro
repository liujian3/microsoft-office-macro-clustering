Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "modEqBS"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 1, 0, MSForms, CommandButton"
Attribute VB_Control = "CommandButton2, 3, 1, MSForms, CommandButton"
Option Explicit
Option Base 1
Option Compare Text

Private Sub generateOptions()
    Application.ScreenUpdating = False
    Dim i As Integer, j As Integer, counter As Integer: counter = 0
    clearSwaptions
    Dim invCom$: invCom = """"
    Dim asn$: asn = ActiveSheet.Name
    Dim rngIn As Range: Set rngIn = Range("NX_" & asn & "_M_SelectionGrid")
    Dim rngOt As Range: Set rngOt = Range("NX_" & asn & "_M_OptionDefs")
    Dim ID$
    Dim CcyAdd$: CcyAdd = Range("NX_" & asn & "_M_CurrencyValue").Address
    Dim prefixVal$: prefixVal = Range("NX_" & asn & "_M_PrefixValue")
    Dim equityVal$: equityVal = Range("NX_" & asn & "_M_EquityValue")
    Dim modelVal$: modelVal = Range("NX_" & asn & "_M_ModelValue")
    ' fill in the swaptions
    For j = 1 To rngIn.Rows.Count
        For i = 1 To rngIn.Columns.Count
            If rngIn.Cells(j, i) = "Y" Then
                counter = counter + 1
                rngOt.Cells(counter, 1) = rngIn.Cells(j, 1)
                rngOt.Cells(counter, 1).NumberFormat = "dd-mmm-yy"
                rngOt.Cells(counter, 2) = rngIn.Cells(1, i)
                ID = prefixVal & "." & equityVal & "." & modelVal & ".Opt" & counter
                rngOt.Cells(counter, 3).Formula = "=nxInstrumentEQEuropean(" & invCom & ID & invCom _
                    & ",NX_" & asn & "_M_CurrencyValue," _
                    & invCom & "Call" & invCom _
                    & ",NX_" & asn & "_M_VolCurveID," _
                    & rngOt.Cells(counter, 1).Address & ",," & rngOt.Cells(counter, 2).Address _
                    & ",,,NX_" & asn & "_M_ConventionValue)"
            End If
        Next
    Next
    If counter > 0 Then
        Range(rngOt.Cells(1, 1), rngOt.Cells(counter, 3)).Select
        ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_OptionDefs", RefersTo:=Selection
        Selection.HorizontalAlignment = xlCenter
        Selection.Interior.ColorIndex = 2
        With Selection.Borders(xlEdgeLeft)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeTop)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeRight)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        
        Range("NX_" & asn & "_M_InstCollection").Formula = "=nxInstrumentCollection(" & invCom _
            & prefixVal & "." & equityVal & "." & modelVal & ".Collection" & invCom & "," & CcyAdd & "," _
            & Range(rngOt.Cells(1, 3).Offset(-1, 0), rngOt.Cells(counter, 3)).Address & ")"
        
        Range("E11").Select
        ActiveSheet.Calculate
    Else
        Range("NX_" & asn & "_M_InstCollection") = "NO OPTIONS"
    End If
End Sub

Private Sub CommandButton1_Click()
    generateOptions
End Sub

Private Sub clearSwaptions()
    Dim rng As Range: Set rng = Range("NX_" & ActiveSheet.Name & "_M_OptionDefs")
    Range(rng.Cells(1, 1), rng.Cells(rng.Rows.Count, rng.Columns.Count)).Clear
End Sub

Private Sub CommandButton2_Click()
    ResizeTable
End Sub

Private Sub ResizeTable()
    Range("NX_" & Me.Name & "_M_SelectionGrid") = ""
    Dim anchor As Range: Set anchor = Range("NX_" & Me.Name & "_M_SelectionGrid").Cells(1, 1)
    Dim temp: temp = Application.Run("NxLibView", Range("NX_" & Me.Name & "_M_VolCurveID"))
    
    'Check that a valid volatility curve was returned
    On Error GoTo ResizeTable_BadVolCurve
    Dim ErrorCheck As Variant: ErrorCheck = LBound(temp, 1): ErrorCheck = LBound(temp, 2)
    On Error GoTo 0
    
    Dim i As Integer, dateCounter As Integer, strikeCounter As Integer
    dateCounter = 0
    strikeCounter = 0
    For i = 2 To UBound(temp)
        If temp(i, 1) = "" Then Exit For
        dateCounter = dateCounter + 1
        anchor.Offset(dateCounter, 0) = temp(i, 1)
        anchor.Offset(dateCounter, 0).NumberFormat = "dd-mmm-yy"
    Next
    
    For i = 2 To UBound(temp, 2)
        If Not IsNumeric(temp(1, i)) Or Len(temp(1, i)) = 0 Then Exit For
        strikeCounter = strikeCounter + 1
        anchor.Offset(0, strikeCounter) = temp(1, i)
    Next
    ActiveWorkbook.Names.Add Name:="NX_" & Me.Name & "_M_SelectionGrid", RefersTo:=Range(anchor, anchor.Offset(dateCounter, strikeCounter))
    Exit Sub

ResizeTable_BadVolCurve:
    MsgBox temp(1) & vbCrLf & "Check that your market data is properly loaded.", _
        vbExclamation, "Numerix Object Not Found"
End Sub




INQUEST-PP=macro
