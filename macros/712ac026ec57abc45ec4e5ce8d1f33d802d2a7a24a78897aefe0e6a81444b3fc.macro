Attribute VB_Name = "Class1"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private plngStart As Long

Private Declare Function timeGetTime Lib "winmm.dll" () As Long

Public Sub StartTimer()
    plngStart = timeGetTime
End Sub

Public Function EndTimer() As Long
    EndTimer = (timeGetTime - plngStart)
End Function


Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "frmAbout1"
Attribute VB_Base = "0{389466DD-73FC-11D5-90AC-0050BA0DF368}{389466AB-73FC-11D5-90AC-0050BA0DF368}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub OKButton_Click()
    Unload Me
End Sub

Private Sub UserForm_Activate()
    Dim T$

    T$ = AppName & "  " & AppVers & Chr(13) & Chr(10)
    T$ = T$ & Chr(13) & Chr(10) & "Copyright  " & Chr(169) & "   Nick Koutras  2001"

    Label2.Caption = T$

    Call MoveTitle
End Sub

Private Sub MoveTitle()
    On Error Resume Next
Again:
    Label1.Left = Label1.Left - 1
    DoEvents
    For j = 1 To 50000: Next
    If Label1.Left + Label1.Width < 0 Then Label1.Left = Me.Width
    GoTo Again
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    End
End Sub
Attribute VB_Name = "frmDays"
Attribute VB_Base = "0{389466BD-73FC-11D5-90AC-0050BA0DF368}{389466B3-73FC-11D5-90AC-0050BA0DF368}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




Private Sub OK_Click()
    Unload Me
End Sub

Private Sub UserForm_Initialize()
    Dim W$, T$, z$

    W$ = Chr(10) & Chr(13)
    z = varArr(15)

    Label1.Caption = AppName & "  " & AppVers
    T = "This is a functinal prerelease version"
    T = T & W
    T = T & "There are " & z & " days remaining in this"
    T = T & W
    T = T & "virgin version of LottoDesignerXL"
    T = T & W
    T = T & "For more information and the newest update "
    T = T & "please visit our web site at:"


    Label2.Caption = T

    'Label3.Caption = varArr(15)


End Sub

Attribute VB_Name = "frmExpired"
Attribute VB_Base = "0{389466D6-73FC-11D5-90AC-0050BA0DF368}{389466B5-73FC-11D5-90AC-0050BA0DF368}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub CommandButton1_Click()
    'Goto Lotto Desinger Web Site
    'sound

    'Got to my web site

    Unload Me

End Sub

Private Sub CommandButton2_Click()

    Unload Me

    End

End Sub


Attribute VB_Name = "modError"
Option Explicit
Option Private Module

Public Sub DisplayErrors(eID, Response)
    Dim Msg, Style, Title, Help, Ctxt, MyString
    Dim Wr$

    Wr$ = Chr(10) & Chr(13)


    Select Case eID

    Case 0
        Title = "Unforseen  Error..."
        Msg = "Some error took place" & Wr _
            & "Please correct them and try again"

        Style = vbCritical + vbDefaultButton2
        Help = "DEMO.HLP"
        Ctxt = 1000
        Response = MsgBox(Msg, Style, Title, Help, Ctxt)

    Case 1


        Title = "Error in your data..."
        Msg = "It seems that you have" & Wr _
            & "an error in your data" & Wr & Wr _
            & "Please correct them and try again"

        'Style = vbYesNo + vbCritical + vbDefaultButton2
        Style = vbCritical + vbDefaultButton2

        Help = "DEMO.HLP"
        Ctxt = 1000

        Response = MsgBox(Msg, Style, Title, Help, Ctxt)


    Case 2

        Title = "Error in your data..."
        Msg = "It seems that you have" & Wr _
            & "an error in your data" & Wr & Wr _
            & "Please correct them and try again"

        'Style = vbYesNo + vbCritical + vbDefaultButton2
        Style = vbCritical + vbDefaultButton2

        Help = "DEMO.HLP"
        Ctxt = 1000
        Response = MsgBox(Msg, Style, Title, Help, Ctxt)

        If Response = vbYes Then        ' User chose Yes.
            MyString = "Yes"        ' Perform some action.
        Else        ' User chose No.
            MyString = "No"        ' Perform some action.
        End If

    Case 3

        Title = "Error in your data..."
        Msg = "It seems that you have" & Wr _
            & "an error in your Constraints" & Wr & Wr _
            & "Please correct them and try again"


        Style = vbCritical + vbDefaultButton2

        Help = "DEMO.HLP"
        Ctxt = 1000
        Response = MsgBox(Msg, Style, Title, Help, Ctxt)

    Case 4

        Title = "Error in your data..."
        Msg = "It seems that you have" & Wr _
            & "an error in your Entered values" & Wr & Wr _
            & "Please try again"

        Style = vbCritical + vbDefaultButton2
        Help = ""
        Ctxt = 1000
        Response = MsgBox(Msg, Style, Title, Help, Ctxt)


    Case 31 To 36
        Title = "Error in your Parameters..."
        Msg = "It seems that you have" & Wr _
            & "entered a parameter outside" & Wr _
            & "of the limits of this Program" & Wr & Wr _
            & "Please correct and try again."

        'Style = vbYesNo + vbCritical + vbDefaultButton2
        Style = vbCritical + vbDefaultButton2

        Help = "DEMO.HLP"
        Ctxt = 1000
        Response = MsgBox(Msg, Style, Title, Help, Ctxt)

    Case 51
        Title = "Can not Randomize..."
        Msg = "When your Design includes Constraints" & Wr _
            & "it is not recommended to " & Wr _
            & "randomize your design since the" & Wr & Wr _
            & "constraints will alter."

        'Style = vbYesNo + vbCritical + vbDefaultButton2
        Style = vbCritical + vbDefaultButton2

        Help = "DEMO.HLP"
        Ctxt = 1000
        Response = MsgBox(Msg, Style, Title, Help, Ctxt)


    Case Else

    End Select

End Sub

Attribute VB_Name = "modFiles"
Option Explicit
Option Private Module

Sub SaveFile()
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Preapared by Nick Koutras
    '
    '
    'Last revised: Sep/14/00
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Dim fName As String
    Dim BxB()
    Dim oFactor

    Call ReadData

    MyDesign = oSht1.Range("B8").Resize(B, K).value
    Call MakeVxV(aVxV, aFrqs)
    Call MakeBxB(aBxB, BxB)
    ReDim Rz(5, 12)
    ReDim AN(3, 10)
    ReDim aNxN(1, 1)

    Call CountFactors(Method, aVxV, aBxB, aFrqs, aNxN, Rz)
    Call StoreFactors(Rz)

    oFactor = 0
    Call CalculateCostB(oFactor)
    oFactor = oFactor + Rz(1, 2)
    oFactor = Int(oFactor + 0.5)

    fName = "LD(" & Str(V) & "," & Str(K) & "," & Str(T) _
          & "," & Str(M) & ") =" & Str(B) & " -" & Str(oFactor)



    If fName = "" Then fName = "Q.txt"

    Path = ThisWorkbook.Path & "\MyDesigns"
    ChDir Path

    oSht1.Select
    Range(Cells(8, 2), Cells(8 + B - 1, 2 + K - 1)).Select
    ChDir Path

    Selection.Copy
    Workbooks.Add
    ActiveSheet.Paste
    Application.CutCopyMode = False
    Application.DisplayAlerts = False
    'ChDir "C:\My Documents\Lotteries\Designs"
    If K < 11 Then
        ActiveWorkbook.SaveAs Filename:=Path & "\" & fName _
                            , FileFormat:=xlText, CreateBackup:=False
    Else
        ActiveWorkbook.SaveAs Filename:=Path & "\" & fName _
                            , FileFormat:=xlCSV, CreateBackup:=False
    End If

    ActiveWindow.Close

    Path = ThisWorkbook.Path
    ChDir Path
    Application.DisplayAlerts = True
    Range("A1").Select


End Sub



'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

Sub ImportWheelXlDialogOpen()
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Preapared by Nick Koutras
    '
    'if p=100% then save as LDcv(...
    'Last revised: Sep/14/00
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    '\ use this approach to prompt user for text wizard values

    'Set oSht1 = ActiveWorkbook.Worksheets("Input")


    Application.ScreenUpdating = False
    Application.DisplayAlerts = False

    Call ReadData
    Path = ThisWorkbook.Path
    ChDir Path

    oSht1.Range("B8").Select
    Path = ThisWorkbook.Path & "\MyDesigns"
    ChDir Path

    On Error GoTo ErrMsg:
    '\ display open file dialog and copy to new (temporary workbook)
    If Application.Dialogs(xlDialogOpen).Show("*.txt") Then
        ActiveSheet.UsedRange.Select        '\ select imported text in temporary workbook
        Selection.Copy        '\ copy to clipboard
        MyDesign = Selection

        V = Application.WorksheetFunction.Max(MyDesign)
        K = Selection.Columns.Count
        B = Selection.Rows.Count
        ActiveWorkbook.Close        '\ close temporary workbook
        ActiveSheet.Paste        '\ paste text into your workbook
    End If


    'If K > 3 Then
    '    T = 3
    'Else: T = K - 1
    'End If

    'M = K

    oSht1.Range("A3") = V
    oSht1.Range("B3") = K
    oSht1.Range("C3") = T
    oSht1.Range("D3") = M
    oSht1.Range("E3") = B

    Exit Sub

ErrMsg:

    Exit Sub

End Sub

'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

Sub ImportWheelToEnumeration()
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Preapared by Nick Koutras
    '
    'if p=100% then save as LDcv(...
    'Last revised: Sep/14/00
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    Set oSht3 = ActiveWorkbook.Worksheets("Enumerate")
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False

    'Worksheets.Add
    'Range("A1") = "Dialogs(xlDialogOpen) Method"
    oSht3.Range("A2").Select

    '\ display open file dialog and copy to new (temporary workbook)
    If Application.Dialogs(xlDialogOpen).Show("*.txt") Then
        ActiveSheet.UsedRange.Select        '\ select imported text in temporary workbook
        Selection.Copy        '\ copy to clipboard
        MyDesign = Selection
        V = Application.WorksheetFunction.Max(MyDesign)
        K = Selection.Columns.Count
        B = Selection.Rows.Count
        ActiveWorkbook.Close        '\ close temporary workbook
        ActiveSheet.Paste        '\ paste text into your workbook
    End If


    If K > 3 Then
        T = 3
    Else: T = K - 1
    End If
    M = K

    oSht3.Range("A1") = V
    oSht3.Range("B1") = K
    oSht3.Range("C1") = T
    oSht3.Range("D1") = M
    oSht3.Range("E1") = B
End Sub


Sub SaveConstraints()
    Dim N1, N2, N3, N4
    Dim D%, H%, Min%, Max%, Sz%, NB%
    Dim Grp$, fName$, z$
    Dim MyIndex, FileNumber

    Call ReadData
    oSht1.Select

    'Store Hypotheses
    TotHyp = 0
    For D = 1 To 9999
        Min = oSht2.Cells(3 + D, 2)
        Max = oSht2.Cells(3 + D, 3)
        Grp = oSht2.Cells(3 + D, 4)
        If Grp = "" Then TotHyp = D - 1: Exit For
    Next D

    oSht1.Range("I5") = TotHyp
    If TotHyp > 0 Then ReDim aHyp(TotHyp, V + 3)


    On Error GoTo Err01:    ' Error on hypotheses
    For D = 1 To TotHyp
        Min = oSht2.Cells(3 + D, 2)
        Max = oSht2.Cells(3 + D, 3)
        If Min < 0 Or Min > K Then GoTo Err01
        If Max < 0 Or Max > K Then GoTo Err01

        Grp = oSht2.Cells(3 + D, 4)
        aHyp(D, V + 1) = Min
        aHyp(D, V + 2) = Max
        Sz = Len(Grp) / 2
        For H = 1 To Sz
            NB = Val(Mid(Grp, H * 2 - 1, 2))
            If NB > V Or NB < 1 Then GoTo Err01
            aHyp(D, NB) = 1
        Next
    Next D
    On Error GoTo 0

    fName = ""
    N1 = "CO("
    N2 = Str(V) & "," & Str(K) & "," & Str(T) & "," & Str(M)
    N3 = ")=" & Str(B)
    N4 = " [" & Str(TotHyp) & " ]"
    fName = N1 & N2 & N3 & N4 & ".txt"

    FileNumber = FreeFile
    Path = ThisWorkbook.Path & "\MyConstraints"
    ChDir Path

    Open fName For Output As #FileNumber
    Write #FileNumber, V, K, T, M, B, L, TotHyp

    For D = 1 To TotHyp
        Write #FileNumber, D, aHyp(D, V + 1), aHyp(D, V + 2),
        Grp = "'"

        For H = 1 To V
            If aHyp(D, H) = 1 Then
                If H < 10 Then
                    z = "0" & Trim(Str(H))
                Else
                    z = Trim(Str(H))
                End If
                Grp = Grp & z
            End If

        Next
        Write #FileNumber, Grp

    Next

    Close #FileNumber        ' Close file.

    Path = ThisWorkbook.Path
    ChDir Path
    oSht2.Select


    Exit Sub

Err01:



End Sub

Sub LoadConstraints()
    Dim MyIndex, FileNumber
    Dim fName$
    Dim D%, H%, Min%, Max%
    Dim Grp$



    Path = ThisWorkbook.Path & "\MyConstraints"
    ChDir Path

    fName = Application.GetOpenFilename("Text Files (*.txt), *.txt")

    If fName <> "" Then
        'Set myBook = Workbooks.Open(fName)

        FileNumber = FreeFile


        On Error GoTo ErrHandler


        Open fName For Input As #FileNumber

        Range("A6:FZ10000").Select
        Selection.ClearContents
        Range("A3").Select

        Input #FileNumber, V, K, T, M, B, L, TotHyp
        SetSheets

        For D = 1 To TotHyp
            Input #FileNumber, D, Min, Max
            Grp$ = "'"
            Input #FileNumber, Grp$

            oSht2.Cells(D + 3, 1) = D
            oSht2.Cells(D + 3, 2) = Min
            oSht2.Cells(D + 3, 3) = Max
            oSht2.Cells(D + 3, 4) = Grp$

        Next

        oSht1.Range("A3") = V
        oSht1.Range("B3") = K
        oSht1.Range("C3") = T
        oSht1.Range("D3") = M
        oSht1.Range("E3") = B
        oSht1.Range("F3") = L
        oSht1.Range("I5") = TotHyp

        Close #FileNumber        ' Close file.
    End If

    Path = ThisWorkbook.Path
    ChDir Path

    Exit Sub

ErrHandler:
    On Error GoTo 0


End Sub

Sub PrintDesign()

    Call ReadData
    oSht1.Select
    MyDesign = oSht1.Range("B8").Resize(B, K).value
    oSht3.Range("A1").Resize(B, K).value = MyDesign
    oSht3.Select
    ActiveWindow.SelectedSheets.PrintPreview
    oSht1.Select

End Sub

Sub Preview()

    Call ReadData
    oSht1.Select
    MyDesign = oSht1.Range("B8").Resize(B, K).value
    oSht3.Range("A1").Resize(B, K).value = MyDesign
    oSht3.Select
    ActiveWindow.SelectedSheets.PrintPreview
    oSht1.Select

End Sub

Sub CopyToClipBoard()
    Dim oRange As Range
    Call ReadData
    oSht1.Select
    Set oRange = oSht1.Range(Cells(8, 2), Cells(8 + B - 1, 2 + K - 1))
    oRange.Select
    Selection.Copy
    Range("A1").Select
    Application.CutCopyMode = False
End Sub

Public Sub SaveAs()
    'Make the file Name

    Application.Dialogs(xlDialogSaveAs).Show

End Sub


Attribute VB_Name = "modFunctions"
Option Private Module
Option Explicit

Function fTestAddInIsInstalled(vtTest$)
    Dim vtName$
    On Error GoTo sOops
    vtName = AddIns(vtTest).FullName
    fTestAddInIsInstalled = True
    Exit Function
sOops:
    fTestAddInIsInstalled = False
End Function


Function dhStandardDeviation(varArray) As Double
    Dim lngN As Long
    Dim dblSumX As Double
    Dim dblSumX2 As Double
    Dim dblVar As Double
    Dim intCounter As Integer
    Dim varItem As Variant

    lngN = 0
    dblSumX = 0
    dblSumX2 = 0


    If IsArray(varArray) Then
        For Each varItem In varArray
            If Not IsNull(varItem) Then
                lngN = lngN + 1
                dblSumX = dblSumX + varItem
                dblSumX2 = dblSumX2 + varItem ^ 2
            End If
        Next

    End If


    On Error Resume Next

    dblVar = 0
    If lngN > 0 Then
        dblVar = (lngN * dblSumX2 - dblSumX ^ 2) / (lngN * (lngN - 1))
        If dblVar > 0 Then
            dhStandardDeviation = Sqr(dblVar)
        End If
    End If

End Function


Sub NdxShellSort(arr As Variant, ndx() As Long, Optional numEls As Variant, _
                 Optional descending As Boolean)

    Dim value As Variant
    Dim index As Long, index2 As Long
    Dim firstItem As Long
    Dim distance As Long
    Dim tempNdx As Long

    ' account for optional arguments
    If IsMissing(numEls) Then numEls = UBound(arr)
    firstItem = LBound(arr)
    ' init index array if necessary
    If ndx(firstItem) = 0 And ndx(UBound(ndx)) = 0 Then
        For index = firstItem To UBound(ndx)
            ndx(index) = index
        Next
    End If

    ' find the best value for distance
    Do
        distance = distance * 3 + 1
    Loop Until distance > numEls

    Do
        distance = distance \ 3
        For index = distance + 1 To numEls
            tempNdx = ndx(index)
            value = arr(tempNdx)
            index2 = index
            Do While (arr(ndx(index2 - distance)) > value) Xor descending
                ndx(index2) = ndx(index2 - distance)
                index2 = index2 - distance
                If index2 <= distance Then Exit Do
            Loop
            ndx(index2) = tempNdx
        Next
    Loop Until distance = 1
End Sub


Function dhFactorial(intX As Integer) As Double
    Dim i As Integer
    Dim dblX As Double

    If intX < 0 Or intX > 170 Then
        dhFactorial = 0#
        Exit Function
    End If

    dblX = 1#
    For i = 2 To intX
        dblX = dblX * i
    Next i
    dhFactorial = dblX

End Function


Function dhAverageArray(varArray As Variant) As Variant
    Dim varItem As Variant
    Dim varSum As Variant
    Dim lngCount As Long

    If IsArray(varArray) Then
        For Each varItem In varArray
            varSum = varItem + varSum
            lngCount = lngCount + 1
        Next
        dhAverageArray = varSum / lngCount
    Else
        dhAverageArray = Null
    End If
End Function

Function dhSumArray(varArray As Variant) As Variant
    Dim varItem As Variant
    Dim varSum As Variant

    If IsArray(varArray) Then
        For Each varItem In varArray
            varSum = varItem + varSum
        Next
        dhSumArray = varSum
    Else
        dhSumArray = Null
    End If
End Function

Sub dhCountArray(varArray, iMin, iMax, SUM)
    Dim varItem As Variant
    Dim varSum As Variant
    Dim lngCount As Long
    'Dim SUM As Long

    If IsArray(varArray) Then
        For Each varItem In varArray
            If varItem >= iMin And varItem <= iMax Then
                varSum = varItem + varSum
                lngCount = lngCount + 1
            End If
        Next
        SUM = lngCount
    Else
        SUM = Null
    End If
End Sub


Sub dhCountArray2(varArray, iMin, iMax, SUM)
    Dim varItem As Variant
    Dim varSum As Variant
    Dim lngCount As Long
    'Dim SUM As Long

    If IsArray(varArray) Then
        For Each varItem In varArray
            If varItem >= iMin And varItem <= iMax Then
                varSum = varItem * varItem + varSum
                lngCount = lngCount + 1
            End If
        Next
        SUM = varSum
    Else
        SUM = Null
    End If
End Sub

Sub Shuffle(Deck())
    Dim i As Integer, j As Integer
    Dim Temp

    Randomize
    For i = 1 To UBound(Deck)
        Deck(i) = i
    Next

    For i = LBound(Deck) To UBound(Deck) - 1
        j = Int(Rnd * UBound(Deck) + 1)
        Temp = Deck(j)
        Deck(j) = Deck(i)
        Deck(i) = Temp
    Next i
End Sub


Sub NdxShellSort_0(arr As Variant, ndx() As Long, Optional numEls As Variant, _
                   Optional descending As Boolean)

    Dim value As Variant
    Dim index As Long, index2 As Long
    Dim firstItem As Long
    Dim distance As Long
    Dim tempNdx As Long

    ' account for optional arguments
    If IsMissing(numEls) Then numEls = UBound(arr)
    firstItem = LBound(arr)
    ' init index array if necessary
    If ndx(firstItem) = 0 And ndx(UBound(ndx)) = 0 Then
        For index = firstItem To UBound(ndx)
            ndx(index) = index
        Next
    End If

    ' find the best value for distance
    Do
        distance = distance * 3 + 1
    Loop Until distance > numEls

    Do
        distance = distance \ 3
        For index = distance + 1 To numEls
            tempNdx = ndx(index)
            value = arr(tempNdx)
            index2 = index
            Do While (arr(ndx(index2 - distance)) > value) Xor descending
                ndx(index2) = ndx(index2 - distance)
                index2 = index2 - distance
                If index2 <= distance Then Exit Do
            Loop
            ndx(index2) = tempNdx
        Next
    Loop Until distance = 1
End Sub


Sub RandomizeArray(ArrayIn As Variant)
    Dim X As Long
    Dim RandomIndex As Long
    Dim TempElement As Variant
    Static RanBefore As Boolean

    If Not RanBefore Then
        RanBefore = True
        Randomize
    End If

    If VarType(ArrayIn) >= vbArray Then
        For X = UBound(ArrayIn) To LBound(ArrayIn) Step -1
            RandomIndex = Int((X - LBound(ArrayIn) + 1) * _
                              Rnd + LBound(ArrayIn))
            TempElement = ArrayIn(RandomIndex)
            ArrayIn(RandomIndex) = ArrayIn(X)
            ArrayIn(X) = TempElement
        Next
    Else
        'The passed argument was not an array
        'Put error handler here, such as . . .
        Beep
    End If
End Sub


Attribute VB_Name = "modGeneral"
Option Private Module
Option Explicit


Public Sub MakeVxV(aVxV, aFrqs)
    Dim D%, H%, H1%, H2%, N1%, N2%, Max%
    Dim Min As Long

    On Error GoTo 0

    ReDim aVxV(1 To V, 1 To V)
    ReDim aFrqs(1 To V)
    ReDim VxV(V + 2)

    Max = 0
    For D = 1 To B
        For H1 = 1 To K
            N1 = MyDesign(D, H1)
            aFrqs(N1) = aFrqs(N1) + 1
            For H2 = H1 + 1 To K
                N2 = MyDesign(D, H2)
                aVxV(N1, N2) = aVxV(N1, N2) + 1
                aVxV(N2, N1) = aVxV(N2, N1) + 1
            Next H2
        Next H1
    Next D


    Min = 10 ^ 9
    Max = 0
    For D = 1 To V
        For H = 1 To V
            If D <> H Then
                VxV(D) = VxV(D) + aVxV(D, H) ^ 2
            End If
        Next
        If VxV(D) < Min Then
            Min = VxV(D)
            VxV(V + 1) = D
        End If

        If VxV(D) > Max Then
            Max = VxV(D)
            VxV(V + 2) = D
        End If
    Next

End Sub


Public Sub MakeBxB(aBxB, BxB)
    '
    '
    '
    '
    Dim xAR() As Boolean
    Dim N1%, N2%, D%, H%, H2%, D2%
    Dim Max%
    Dim Min As Long

    ReDim aBxB(1 To B, 1 To B)
    ReDim BxB(B + 2)

    'On Error Resume Next

    Max = 0
    For D = 1 To B        '- 1
        ReDim xAR(V)
        For H = 1 To K
            N1 = MyDesign(D, H)
            xAR(N1) = True
        Next

        For D2 = D + 1 To B
            For H2 = 1 To K
                N2 = MyDesign(D2, H2)
                If xAR(N2%) Then
                    aBxB(D, D2) = aBxB(D, D2) + 1
                    aBxB(D2, D) = aBxB(D2, D) + 1
                End If
            Next H2
        Next D2
    Next D



    Min = 10 ^ 7
    Max = 0
    For D = 1 To B
        For H = 1 To B
            If D <> H Then
                BxB(D) = BxB(D) + aBxB(D, H) ^ 2
            End If
        Next

        If BxB(D) < Min Then
            Min = BxB(D)
            BxB(B + 1) = D
        End If

        If BxB(D) > Max Then
            Max = BxB(D)
            BxB(B + 2) = D
        End If
    Next

End Sub


Sub AutoArange()
    '
    ' AutoArange Macro
    ' 6/11/2001 by Nick Koutras
    '

    '
    Cells.Select
    Selection.Columns.AutoFit
    Range("A1").Select
End Sub


Public Sub StatusBar(X)

    Select Case X
    Case 1
        Application.StatusBar = "Please wait..."
    Case 2

    Case Else
        Application.StatusBar = False

    End Select

End Sub


Public Sub StopExecution()
    'ReDim RZ(1)

    Call SetSheets
    K = oSht1.Range("B3")
    B = oSht1.Range("E3")


    MyBestDes = oSht3.Range("A1").Resize(B, K).value
    oSht1.Range("B8").Resize(B, K).value = MyBestDes
    MyDesign = MyBestDes

    Call SortDesign
    'Call DisplaySxOfSets

    Beep
    Application.StatusBar = False
    Application.DisplayFullScreen = False

    End
End Sub


Public Sub SetSheets()
    Set oSht1 = ActiveWorkbook.Worksheets("Input")
    Set oSht2 = ActiveWorkbook.Worksheets("Constraints")
    Set oSht3 = ActiveWorkbook.Worksheets("Best")
    Set oSht6 = ActiveWorkbook.Worksheets("Data")

    '///    Eliminate these
    'Set oSht4 = ActiveWorkbook.Worksheets("VH")
    'Set oSht5 = ActiveWorkbook.Worksheets("Compare")

End Sub


Sub ReOrganizeDesign(V, K, B)
    Dim D%, H%, NB%, X%, C%
    On Error Resume Next

    Application.ScreenUpdating = False

    MyDesign = Range("B8").Resize(B, K).value

    For D = 1 To B
        ReDim Arr1(V)
        For H = 1 To K
            NB = MyDesign(D, H)

            If NB < 1 Or NB > V Or Arr1(NB) > 0 Then
                Do
                    X = Int(Rnd * V + 1)
                Loop Until Arr1(X) = 0
                NB = X
            End If

            Arr1(NB) = Arr1(NB) + 1

        Next

        C = 1
        For H = 1 To V
            If Arr1(H) = 1 Then
                oSht1.Cells(7 + D, C + 1) = H
                C = C + 1
            End If
        Next

    Next

    Application.ScreenUpdating = True

End Sub



Sub DisplayTitles(X)
    Dim H

    Select Case X
    Case 1
        oSht1.Select
        Range("A7:DA7").ClearContents


        Cells(7, 1) = "sID"
        For H = 1 To K
            Cells(7, H + 1) = H
        Next
        For H = 1 To B
            Cells(7 + H, 1) = H
        Next

        H = K + 3
        Cells(7, H + 0) = "Sx"

        'Cells(7, H + 1) = "Cv"
        'Cells(7, H + 2) = "Cv%"
        'Cells(7, H + 3) = "UnCv"
        'Cells(7, H + 4) = "Cv"

    Case 2


    End Select


End Sub


Sub GoToInput()
    Sheets("Input").Select
End Sub


Sub GoToConstraints()
    Sheets("Constraints").Select
End Sub


Sub CountFactors(Method, aVxV, aBxB, aFrqs, aNxN, Rz)
    Dim Avg
    Dim Std, Sd0
    Dim Pek
    Dim PK, H%
    Dim lngRZ As Long, SUM As Long

    On Error Resume Next

    Select Case Method

    Case 1, 7

        If V > 70 Then
            Avg = dhAverageArray(aVxV)
            Std = dhStandardDeviation(aVxV)
            Call dhCountArray2(aVxV, 1, 9999, lngRZ)
            Rz(1, 7) = lngRZ

        Else
            Avg = Application.WorksheetFunction.Average(aVxV)
            PK = Int(Avg + 0.5)

            Std = Application.WorksheetFunction.StDev(aVxV)
            Sd0 = Application.WorksheetFunction.StDev(aFrqs)

            Pek = Application.WorksheetFunction.Count(aVxV, PK)

            Call dhCountArray(aVxV, 1, PK - 1, lngRZ)
            Rz(1, 3) = lngRZ

            Call dhCountArray(aVxV, PK, PK, lngRZ)
            Rz(1, 4) = lngRZ

            Call dhCountArray(aVxV, PK + 1, PK + 9999, lngRZ)
            Rz(1, 5) = lngRZ

            Call dhCountArray2(aVxV, 1, 9999, lngRZ)
            Rz(1, 7) = lngRZ

            Rz(1, 0) = Application.WorksheetFunction.Max(aVxV)


        End If

        SUM = 0
        For H = 3 To 5
            SUM = SUM + Rz(1, H)
        Next


        Rz(1, 1) = Avg
        Rz(1, 2) = Std
        Rz(1, 6) = SUM



        'For Array BxB  ===========================

        If B < 3 Then Exit Sub

        If B > 70 Then
            Avg = dhAverageArray(aBxB)
            Std = dhStandardDeviation(aBxB)
            Call dhCountArray2(aBxB, 1, 9999, lngRZ)
            Rz(2, 7) = lngRZ


        Else
            Avg = Application.WorksheetFunction.Average(aBxB)
            PK = Int(Avg + 0.5)

            Std = Application.WorksheetFunction.StDev(aBxB)
            Pek = Application.WorksheetFunction.Count(aBxB, PK)

            Call dhCountArray(aBxB, 1, PK - 1, lngRZ)
            Rz(2, 3) = lngRZ

            Call dhCountArray(aBxB, PK, PK, lngRZ)
            Rz(2, 4) = lngRZ

            Call dhCountArray(aBxB, PK + 1, PK + 9999, lngRZ)
            Rz(2, 5) = lngRZ


            Call dhCountArray2(aBxB, 1, 9999, lngRZ)
            Rz(2, 7) = lngRZ

            Rz(2, 0) = Application.WorksheetFunction.Max(aBxB)


        End If

        SUM = 0
        For H = 3 To 5
            SUM = SUM + Rz(2, H)
        Next

        Rz(2, 1) = Avg
        Rz(2, 2) = Std
        Rz(2, 6) = SUM


    Case Else

    End Select

End Sub


Sub CheckResults()
    Dim pAR()
    Dim Message, Title, Default, MyValue
    Dim Wr$, P%, Pold%, H%, MyPos%, NB%, C%, D%, SX%, Gr$, Sz%
    Dim YesNo As Boolean, SmSx As Long, RA$, DD%, Min%, Max%
    Dim sID%

    'On Error Resume Next
    Application.ScreenUpdating = False

    'Objects
    'Call SetSheets
    'Readdata
    Call ReadData

    MyDesign = oSht1.Range("B8").Resize(B, K).value
    oSht1.Range(Cells(8, K + 3), Cells(B + 7 + 1, K + 90)).Delete

    'clear area
    Range("T2:DM6").Select
    Selection.ClearContents
    Range("A2").Select
    oSht1.Range("S2") = 0


    GoSub StoreHyp:

    Wr$ = Chr(10) & Chr(13)
    Message = "Enter " & Str(M) & "  values between 1 and " & Str(V) & Wr$
    Message = Message & "separated by a comma or just Press OK" & Wr$
    Message = Message & "for the computer to select Randomly"

    Title = "Check Design vs Results"        ' Set title.
    Default = ""        ' Set default.
    ' Display message, title, and default value.
    MyValue = InputBox(Message, Title, Default)

    ' Use Helpfile and context. The Help button is added automatically.
    'MyValue = InputBox(Message, Title, , , , "DEMO.HLP", 10)

    ' Display dialog box at position 100, 100.
    'MyValue = InputBox(Message, Title, Default, 100, 100)

    '==================================================
    P = 3
    ReDim xAR(V)
    If MyValue <> "" Then
        MyValue = MyValue & ","
        Pold = 1
        For H = 1 To Len(MyValue)
            MyPos = InStr(H, MyValue, ",")
            If MyPos = H Then
                NB = Val(Mid(MyValue, Pold, MyPos - 1))
                If NB < 0 Or NB > V Then GoTo Err01
                xAR(NB) = 1
                Pold = MyPos + 1
            End If
        Next
    Else
        'Create Random Ticket c/w Constraints=to Satisfy
        'sID = 1
        'Call FixSetsToComply(sID)
        
        Do
            YesNo = True
            For H = 1 To M
                Do
                    NB = Int(Rnd * V + 1)
                Loop Until xAR(NB) = 0
                xAR(NB) = 1
            Next
            'Display Ticket
            C = 1
            For H = 1 To V
                If xAR(H) = 1 Then
                    oSht1.Cells(P - 1, C + 19) = H
                    C = C + 1
                End If
            Next
            'GoSub VerifyHypOK:
            C = C + 1
            oSht1.Range("S2") = oSht1.Range("S2") + 1

            DoEvents
        Loop Until YesNo = True

    End If


    'Design's Success
    SmSx = 0
    ReDim tSX(K)

    For D = 1 To B
        SX = 0
        For H = 1 To K
            NB = MyDesign(D, H)
            If xAR(NB) = 1 Then SX = SX + 1
        Next
        oSht1.Cells(D + 7, K + 3) = SX
        SmSx = SmSx + SX
        tSX(SX) = tSX(SX) + 1
    Next



    For H = 0 To K
        oSht1.Cells(4, 20 + H) = H
        oSht1.Cells(5, 20 + H) = tSX(H)
    Next

    oSht1.Cells(6, 19) = SmSx

    'Hypotheses success
    For D = 1 To 9999
        SX = 0
        If oSht2.Cells(D + 3, 4) > 0 Then
            Gr = oSht2.Cells(D + 3, 4)
            Sz = Len(Gr) \ 2
            For H = 1 To Sz
                NB = Val(Mid(Gr, H * 2 - 1, 2))
                If xAR(NB) = 1 Then SX = SX + 1
            Next
            oSht2.Cells(D + 3, 5) = SX
        Else: Exit For
        End If

    Next

    '  FIX if >26
    RA$ = "B8" & ":" & Chr(64 + K + 3) & Trim(Str(8 + B - 1))
    Range(RA$).Select

    RA$ = Chr(64 + K + 3) & "8"
    Range(RA$).Activate

    Selection.Sort Key1:=Range(RA$), Order1:=xlDescending, _
                   Header:=xlGuess, OrderCustom:=1, _
                   MatchCase:=False, Orientation:=xlTopToBottom
    Range("A7").Select


    Application.ScreenUpdating = True

    Exit Sub
    '-------------------------------------
VerifyHypOK:
Test1:

    For DD = 1 To TotHyp
        SX = 0
        For H = 1 To V
            If xAR(H) = 1 Then
                If aHyp(DD, NB) = 1 Then SX = SX + 1
            End If
        Next

        Min = aHyp(DD, V + 1)
        Max = aHyp(DD, V + 2)
        If SX < Min Or SX > Max Then
            YesNo = False:
            Return
        End If
    Next DD

    Return


StoreHyp:
    For D = 1 To 999
        Min = oSht2.Cells(3 + D, 2)
        Max = oSht2.Cells(3 + D, 3)
        Gr = oSht2.Cells(3 + D, 4)
        If Gr = "" Then TotHyp = D - 1: Exit For
    Next D

    'TotHyp = Hy
    ReDim aHyp(TotHyp, V + 3)

    For D = 1 To TotHyp
        Min = oSht2.Cells(3 + D, 2)
        Max = oSht2.Cells(3 + D, 3)
        Gr = oSht2.Cells(3 + D, 4)
        aHyp(D, V + 1) = Min
        aHyp(D, V + 2) = Max
        Sz = Len(Gr) / 2
        For H = 1 To Sz
            NB = Val(Mid(Gr, H * 2 - 1, 2))
            aHyp(D, NB) = 1
        Next
    Next D
    Return


Err01:

    eID = 4
    Beep
    Call DisplayErrors(eID, Response)
    End

End Sub

Sub SortD()
    '
    '
    Call SetSheets
    Call ReadData
    'Call SortDesign



    oSht1.Select
    Range(Cells(8, 2), Cells(8 + B - 1, 2 + K - 1)).Select

    If K = 2 Then
        Selection.Sort Key1:=Range("B8"), Order1:=xlDescending, _
                       Key2:=Range("C8"), Order2:=xlDescending, _
                       Header:=xlGuess, OrderCustom:=1, MatchCase:= _
                                                                   False, Orientation:=xlTopToBottom
    Else
        Selection.Sort Key1:=Range("B8"), Order1:=xlDescending, _
                       Key2:=Range("C8"), Order2:=xlDescending, _
                       Key3:=Range("D8"), Order3:=xlDescending, Header:= _
                                                                        xlGuess, OrderCustom:=1, MatchCase:=False, _
                       Orientation:=xlTopToBottom
    End If

    Range("A7").Select

End Sub

Sub Sort()
    '
    ' Sort2 Macro
    ' Macro recorded 04/03/2001 by xxx
    '

    Call SetSheets
    'Call SortDesign
    Call ReadData

    oSht1.Select
    Range(Cells(8, 2), Cells(8 + B - 1, 2 + K - 1)).Select

    If K = 2 Then
        Selection.Sort Key1:=Range("B8"), Order1:=xlAscending, _
                       Key2:=Range("C8"), Order2:=xlAscending, _
                       Header:=xlGuess, OrderCustom:=1, MatchCase:= _
                                                                   False, Orientation:=xlTopToBottom
    Else
        Selection.Sort Key1:=Range("B8"), Order1:=xlAscending, _
                       Key2:=Range("C8"), Order2:=xlAscending, _
                       Key3:=Range("D8"), Order3:=xlAscending, Header:= _
                                                                       xlGuess, OrderCustom:=1, MatchCase:=False, _
                       Orientation:=xlTopToBottom
    End If

    Range("A7").Select

End Sub

Public Sub SortDesign()
    '
    '
    '
    Dim D%, H%, NB%, Sz%
    Dim xAR() As Boolean

    On Error GoTo Err07

    'Readdata
    Call ReadData

    For D = 1 To B
        ReDim xAR(V)

        For H = 1 To K
            NB = MyDesign(D, H)
            xAR(NB) = True
        Next

        Sz = 1
        For H = 1 To V
            If xAR(H) = True Then
                MyDesign(D, Sz) = H
                Sz = Sz + 1
            End If
        Next

    Next

    oSht1.Range("B8").Resize(B, K).value = MyDesign

    Exit Sub

Err07:
    eID = 0
    Beep
    Call DisplayErrors(eID, Response)
    End

End Sub



Sub FullScreen()
    '
    ' Macro5 Macro
    ' Macro recorded 13/04/2001 by xxx
    '

    '
    Application.DisplayFullScreen = True
End Sub




Public Sub SxOfSetVer(Ver, SX, MxSx, eqSX)
    Dim xAR() As Boolean
    Dim H%, NB%, X%, D2%


    On Error Resume Next
    ReDim xAR(V)

    For H = 1 To K
        NB = MyDesign(Ver, H)
        xAR(NB) = True
    Next


    MxSx = 0
    eqSX = 0
    ReDim Rz(K)
    X = 0
    For D2 = 1 To B
        If Ver <> D2 Then
            SX = 0
            For H = 1 To K
                NB = MyDesign(D2, H)
                If xAR(NB) = True Then SX = SX + 1
            Next
            Rz(SX) = Rz(SX) + 1
            If SX > MxSx Then
                MxSx = SX
                eqSX = 1
            ElseIf SX = MxSx Then
                eqSX = eqSX + 1
            End If
        End If

    Next D2


    SX = (MxSx - 1) * B + eqSX


End Sub


Public Sub SxOfSetHor(Ver, SX)
    '' Fix this for Horizontal
    '
    '
    '
    Dim xAR() As Boolean
    Dim H%, NB%, MxSx%, eqSX%, D2%, H1%

    ReDim Rz(V)
    ReDim xAR(V)

    For H = 1 To K
        NB = MyDesign(Ver, H)
        xAR(NB) = True
    Next


    MxSx = 0
    eqSX = 0

    For H = 1 To V
        If xAR(H) = True Then
            SX = 0
            For D2 = 1 To B
                If Ver <> D2 Then

                    For H1 = 1 To K
                        NB = MyDesign(D2, H1)
                        If xAR(NB) = True Then SX = SX + 1: Exit For
                    Next
                End If
            Next D2

            Rz(SX) = Rz(SX) + 1

            If SX > MxSx Then
                MxSx = SX
                eqSX = 1
            ElseIf SX = MxSx Then
                eqSX = eqSX + 1
            End If

        End If
    Next

    SX = MxSx * V + eqSX


End Sub


Public Sub RandomizeDesign()
    Dim X As Integer
    Dim Ver%, Hor%, NB%

    Call ReadData

    ReDim ndx(1 To V)

    If TotHyp > 0 Then
        eID = 51
        Call DisplayErrors(eID, Response)
        Exit Sub
    End If

    Application.ScreenUpdating = False
    Application.DisplayAlerts = False

    For X = LBound(ndx) To UBound(ndx)
        ndx(X) = X
    Next

    Call RandomizeArray(ndx)

    MyDesign = oSht1.Range("B8").Resize(B, K).value
    For Ver = 1 To B
        For Hor = 1 To K
            NB = MyDesign(Ver, Hor)
            MyDesign(Ver, Hor) = ndx(NB)

        Next
    Next
    oSht1.Range("B8").Resize(B, K).value = MyDesign

    Application.ScreenUpdating = True
    Application.DisplayAlerts = True

End Sub
Attribute VB_Name = "modGlobal"
Option Explicit
Option Private Module

Public oSht1, oSht2, oSht3, oSht4, oSht5, oSht6
Public MyDesign(), aHyp(), MyBestDes(), SxFactor()
Public aVxV(), aBxB(), aNxN(), BxB(), VxV(), aFrqs()
Public ndx() As Long

Public V, K, T, M, B, L
Public TotHyp, Cost, Path
Public eID%, Response

Public Const Pos1 = 8
Public Const Method = 1
Public Const Flags = False        'True  'Show internal data
Public Const NameVer = "Lotto Designer v1.02"
Public Const APPNAME0 As String = "Lotto Designer v1.02"
Public Const APPNAME1 As String = "Lotto Designer v1.02"
Public Const APPNAME2 As String = "Lotto Designer v1.02   < Add-In functions >"
Public Const AppName = "LottoDesignerXL"
Public Const AppVers = "v1.02 B 04"
Public varArr()

Private Declare Function timeGetTime Lib "winmm.dll" () As Long


Public Sub ReadData()
    Dim eID%
    Dim Response

    Call SetSheets

    V = oSht1.Range("A3")
    K = oSht1.Range("B3")
    T = oSht1.Range("C3")
    M = oSht1.Range("D3")
    B = oSht1.Range("E3")
    L = oSht1.Range("F3")
    TotHyp = oSht1.Range("I5")

    Randomize Timer

    If V < 6 Or V > 99 Then
        eID = 31
        Call DisplayErrors(eID, Response)
    ElseIf K < 2 Or K > 24 Then
        eID = 32
        Call DisplayErrors(eID, Response)
    ElseIf T < 2 Or T > 24 Then
        eID = 33
        Call DisplayErrors(eID, Response)
    ElseIf M < 2 Or M > 24 Then
        eID = 34
        Call DisplayErrors(eID, Response)
    ElseIf B < 1 Or B > 200 Then
        eID = 35
        Call DisplayErrors(eID, Response)
    ElseIf L < 1 Or K > 24 Then
        eID = 36
        Call DisplayErrors(eID, Response)

    End If


    If Response = 1 Then End


End Sub


Public Sub CalculateCostB(oFactor)
    Dim Mx1%, eq1%, D%, SX%

    ReDim SxFactor(B)
    oFactor = 0
    For D = 1 To B
        Call SxOfSetVer(D, SX, Mx1, eq1)
        oFactor = oFactor + SX
        SxFactor(D) = SX
    Next

End Sub


Public Sub CraeteWorkDirectories()
    Dim Dir1

    On Error Resume Next

    Dir1 = ThisWorkbook.Path

    MkDir Dir1 & "\MyDesigns"
    MkDir Dir1 & "\MyConstraints"

    On Error GoTo 0

End Sub


Public Sub DeleteConstraints()

    Sheets("Constraints").Select
    Range("A4:EZ9999").Select
    Selection.ClearContents
    Range("A3").Select

    Sheets("input").Select
    Range("I5") = 0

End Sub


Attribute VB_Name = "modHypo"
Option Explicit
Option Private Module

Sub DisplayFrequencies()
    Dim C%, mxF%, D%, Min%, Max%, Sz%, H%, NB%, eID%
    Dim Gr, N, Response

    'Objects
    'Call SetSheets

    'Readdata
    Call ReadData


    'Store Hypotheses>0
    ReDim aFrqs(V)
    C = 1
    mxF = 0
    oSht2.Select

    On Error GoTo Err02:

    For D = 1 To 999
        Min = Cells(3 + C, 2)
        Max = Cells(3 + C, 3)
        Gr = Cells(3 + C, 4)

        If Gr = "" Then Exit For
        If Max > 0 Then
            Gr = Cells(3 + C, 4)
            Sz = Len(Gr) \ 2
            For H = 1 To Sz
                NB = Val(Mid(Gr, H * 2 - 1, 2))
                aFrqs(NB) = aFrqs(NB) + 1
                If aFrqs(NB) > mxF Then mxF = aFrqs(NB)
            Next
        End If
        C = C + 1
    Next
    On Error GoTo 0

    'Display Frequencies
    C = 1
    For D = 0 To mxF
        Gr = "'"
        For H = 1 To V
            If aFrqs(H) = D Then
                If H < 10 Then
                    N = "0" & Trim(Str(H))
                Else:
                    N = Trim(Str(H))
                End If
                Gr = Gr & N
            End If
        Next

        Cells(3 + C, 6) = D
        Cells(3 + C, 7).HorizontalAlignment = xlLeft
        Cells(3 + C, 7) = Gr
        C = C + 1

    Next
    Exit Sub


Err02:

    Beep
    eID = 1
    Call DisplayErrors(eID, Response)

    End

End Sub


Public Sub MakeDesignHypotheses()
    Dim xAR() As Boolean
    Dim D%, H%, NB%
    Dim Gr$, s$


    Call ReadData


    'Copy Original design

    MyDesign = oSht1.Range("B8").Resize(B, K).value

    TotHyp = 1
    For D = 1 To B
        ReDim xAR(V)
        For H = 1 To K
            NB = MyDesign(D, H)
            xAR(NB) = True
        Next

        Gr = "'"
        For H = 1 To V
            If xAR(H) = True Then
                If H < 10 Then
                    s = "0" & Trim(H)
                Else: s = Trim(CStr(H))
                End If
                Gr = Gr & s
            End If
        Next

        oSht2.Cells(3 + TotHyp, 4) = Gr
        TotHyp = TotHyp + 1
    Next


End Sub


Attribute VB_Name = "modMAIN"
Option Explicit
Option Private Module


Public Sub Optimize()

    Dim mxTime, X, y, z, Meth
    Dim mxIter As Long, Iter As Long, mxKykl As Integer
    Dim D%, Min%, Max%, Hy%, Sz%, NB%, H%, Grp$, SX%, HH%
    Dim nNB%, oNB%, DD%, OK%, sID%, Ver%, Hor%
    Dim xAR() As Boolean, YN As Boolean, xAR2() As Boolean
    Dim aFrqs(), AN()
    Dim oFactor, oPeaks, gFactor, oPeaksS, gSumStd
    Dim oSumStd, Cost, nFactor, nPeaksS, SumStd, nPeaks
    Dim OrderB(), OrderK(), pAR()
    Dim Mx1%, eq1%, eID%, Response, Std1
    Dim sw As New Class1
    Dim OrderV() As Long, bSZ As Long, vSZ As Long


    'Readdata
    Call ReadData

    Randomize Timer

    mxIter = oSht1.Range("K3")

    ReDim SxFactor(1 To B)
    ReDim OrderB(1 To B)
    ReDim OrderV(1 To V)
    ReDim OrderK(1 To K)


    'Copy Original design
    MyDesign = oSht1.Range("B8").Resize(B, K).value

    'Clear Areas
    Range("A7:IV64000").Select
    Selection.ClearContents
    Range("A1").Select

    oSht3.Select        '==>      Best
    Range("A1:HZ64000").Select
    Selection.ClearContents
    Range("A1").Select
    oSht1.Select

    'Display Titles
    Call DisplayTitles(1)

    'Restore design
    oSht1.Range("B8").Resize(B, K).value = MyDesign
    Call ReOrganizeDesign(V, K, B)

    'Count Hypotheses
    TotHyp = 0
    For D = 1 To 9999
        Min = oSht2.Cells(3 + D, 2)
        Max = oSht2.Cells(3 + D, 3)
        Grp = oSht2.Cells(3 + D, 4)
        If Grp = "" Then TotHyp = D - 1: Exit For
    Next D
    If TotHyp > 0 Then ReDim aHyp(TotHyp, V + 3)
    oSht1.Range("I5") = TotHyp


    On Error GoTo Err02:    ' Error on hypotheses
    For D = 1 To TotHyp
        Min = oSht2.Cells(3 + D, 2)
        Max = oSht2.Cells(3 + D, 3)
        If Min < 0 Or Min > K Then GoTo Err02
        If Max < 0 Or Max > K Then GoTo Err02

        Grp = oSht2.Cells(3 + D, 4)
        aHyp(D, V + 1) = Min
        aHyp(D, V + 2) = Max
        Sz = Len(Grp) \ 2
        For H = 1 To Sz
            NB = Val(Mid(Grp, H * 2 - 1, 2))
            If NB < 0 Or NB > V Then GoTo Err02
            aHyp(D, NB) = 1
        Next
    Next D
    On Error GoTo 0


    MyDesign = oSht1.Range("B8").Resize(B, K).value
    MyBestDes = MyDesign
    oSht3.Range("A1").Resize(B, K).value = MyBestDes

    sID = 0
    Call FixSetsToComply(sID)
    

    MyDesign = oSht1.Range("B8").Resize(B, K).value
    MyBestDes = MyDesign
    Call MakeVxV(aVxV, aFrqs)
    Call MakeBxB(aBxB, BxB)

    X = 0

    'Calculate Original Factors
    ReDim Rz(5, 12)
    ReDim aNxN(1, 1)

    Call CountFactors(Method, aVxV, aBxB, aFrqs, aNxN, Rz)
    Call StoreFactors(Rz)

    Std1 = Rz(1, 2)
    Call CalculateCostB(oFactor)
    oFactor = oFactor + Rz(1, 2)

    Rz(0, 0) = oFactor

    oSht1.Range("O2") = Rz(0, 0)
    'oFactor = RZ(3, 7) + RZ(3, 2)
    'Call DisplayResults(1, 1, 17, oFactor)


    Rz(1, 8) = oFactor
    Rz(3, 8) = oFactor        '<== the Global Original Factor
    Rz(5, 11) = oFactor
    Rz(5, 12) = oFactor
    gSumStd = Rz(3, 2)

    oSht1.Range("O3").Select
    Selection.Interior.ColorIndex = 15
    oSht1.Range("Q3").Select
    Selection.Interior.ColorIndex = 15

    Call DisplayGlobalFactors(Rz)

    oSht1.Range("K2") = 1
    'Call DisplayResults(1, 2, 11, 1)

Opt1:
    'Status Bar
    Call StatusBar(1)
    'Read if Revised Intervals
    mxIter = oSht1.Range("K3")


    'Clear Output Area
    Range("L3:R6").Select
    Selection.ClearContents
    Range("A1").Select

    'Calculate Original Factors
    ReDim Rz(5, 12)
    ReDim aNxN(1, 1)


    sID = 0
    Call FixSetsToComply(sID)
    Call MakeVxV(aVxV, aFrqs)
    Call MakeBxB(aBxB, BxB)

    Call CountFactors(Method, aVxV, aBxB, aFrqs, aNxN, Rz)
    Call StoreFactors(Rz)

    Call CalculateCostB(oFactor)
    oFactor = oFactor + Rz(1, 2)

    Rz(0, 0) = oFactor
    'oFactor = RZ(3, 7) + RZ(3, 2)

    If gFactor = 0 Then
        gFactor = oFactor
        Rz(3, 8) = gFactor
        gSumStd = Rz(3, 2)
        Rz(5, 12) = gFactor
    End If


    Rz(5, 11) = oFactor
    Rz(1, 8) = oFactor
    Rz(3, 8) = gFactor

    'Define which Factor(s) to use
    oSumStd = Rz(3, 2)
    oPeaks = Rz(3, 4)
    oPeaksS = Rz(3, 7)


    'Display Results
    oSht1.Select
    Call DisplayLocalFactors(Rz)
    Call DisplayGlobalFactors(Rz)

    'Call DisplayResults(1, 3, 15, oFactor)
    'Call DisplayResults(1, 3, 17, gFactor)

    oSht1.Range("O3").Interior.ColorIndex = 15
    oSht1.Range("Q3").Interior.ColorIndex = 15

    If gFactor < oFactor Then
        oSht1.Range("Q3").Select
        Selection.Interior.ColorIndex = 40
    End If

    OK = 0
    Iter = 0

    oSht1.Range("J6") = ""
    oSht1.Range("K6") = ""
    'Call DisplayResults(1, 6, 10, "")
    'Call DisplayResults(1, 6, 11, "")


    sw.StartTimer

    Do

        If oSht1.Range("O3") < oSht1.Range("o2") Then
            X = oSht1.Range("o3")
            y = oSht1.Range("o2")
            If X > 0 Then
                z = 1 / (X / y) - 1
            Else: z = 0
            End If

            oSht1.Range("O6") = z
        Else
            oSht1.Range("O6") = 0
        End If



        mxIter = oSht1.Range("K3")
        oSht1.Range("O3") = oFactor
        'Call DisplayResults(1, 3, 15, oFactor)

        ReDim ndx(B)
        Call NdxShellSort(SxFactor, ndx(), B, True)

        bSZ = Int(Rnd * (B / 2) + 1)
        For D = 1 To bSZ
            ReDim xAR2(V)
            Ver = ndx(D)
            Cost = SxFactor(Ver)

            For H = 1 To K
                NB = MyDesign(Ver, H)
                xAR2(NB) = True
            Next

            ReDim OrderV(V)
            Call NdxShellSort(VxV, OrderV(), V, False)

            'Cost = SxFactor(Ver)

            If Iter Mod 100 = 0 Then
                oSht1.Range("K6") = Iter
                'Call DisplayResults(1, 6, 11, Iter)

                X = (sw.EndTimer / 1000 / 60)
                y = Int(X)
                oSht1.Range("J6") = y + (X - y) * 60 / 100
                'Z = y + (x - y) * 60 / 100
                'Call DisplayResults(1, 6, 10, Z)

            End If

            Iter = Iter + 1
            If Iter > mxIter Then Exit Do


            z = 1
            Hor = Int(Rnd * K + 1)


Loop2:


            oNB = MyDesign(Ver, Hor)

            vSZ = Int(Rnd * (V / 2) + 1)
            For HH = 1 To vSZ
                nNB = OrderV(HH)


                If xAR2(nNB) = False Then
                    MyDesign(Ver, Hor) = nNB
                    YN = True
                    If TotHyp > 0 Then Call TestIfSetOKhyp(Ver, YN)
                    If YN = False Then GoTo Loop5:

                    Call SxOfSetVer(Ver, SX, Mx1, eq1)


                    DoEvents

                    If SX <= Cost Then

                        oSht1.Range("M3") = Iter
                        'Call DisplayResults(1, 3, 13, Iter)


                        sID = 0
                        Call MakeVxV(aVxV, aFrqs)
                        Call MakeBxB(aBxB, BxB)
                        Call CountFactors(Method, aVxV, aBxB, aFrqs, aNxN, Rz)
                        Call StoreFactors(Rz)

                        nFactor = 0
                        For DD = 1 To B
                            Call SxOfSetVer(DD, SX, Mx1, eq1)
                            If DD = Ver Then y = Mx1: z = eq1
                            nFactor = nFactor + SX
                            SxFactor(DD) = SX
                        Next
                        nFactor = nFactor + Rz(1, 2)
                        Rz(0, 1) = nFactor




                        If nFactor <= oFactor Then
                            OK = OK + 1
                            oFactor = nFactor
                            nPeaks = Rz(3, 4)
                            nPeaksS = Rz(3, 7)
                            SumStd = Rz(3, 2)
                            xAR2(oNB) = False
                            xAR2(nNB) = True

                            oSht1.Range("N3") = OK
                            oSht1.Range("B8").Resize(B, K).value = MyDesign
                            oSht1.Range("O3") = oFactor
                            Call DisplayLocalFactors(Rz)

                            'Call DisplayResults(1, 3, 14, OK)
                            'Call DisplayResults(1, 3, 15, oFactor)


                            If oFactor <= gFactor Then

                                If Rz(1, 2) > Std1 And nPeaksS > oPeaksS Then GoTo Jump33:
                                'If RZ(1, 2) > Std1 And oFactor > gFactor Then GoTo Jump33:
                                'If oFactor > gFactor And nPeaksS > oPeaksS Then GoTo Jump33:



                                'oSht1.Range("Q2") = RZ(0, 1)
                                oSht1.Range("O3").Interior.ColorIndex = 40
                                oSht1.Range("Q3").Interior.ColorIndex = 15
                                Call DisplayLocalFactors(Rz)

                                'Call DisplayResults(1, 3, 17, gFactor)
                                'Call DisplayResults(1, 3, 17, gFactor)
                                'Call DisplayResults(1, 3, 17, gFactor)


                                MyDesign = oSht1.Range("B8").Resize(B, K).value
                                MyBestDes = MyDesign
                                oSht3.Range("A1").Resize(B, K).value = MyDesign
                                gFactor = oFactor
                                Std1 = Rz(1, 2)
                                oPeaksS = nPeaksS
                                oSumStd = SumStd
                                oPeaks = nPeaks


                                Rz(2, 10) = z
                                oSht1.Range("Q3") = gFactor
                                'Call DisplayResults(1, 3, 17, gFactor)

Jump33:
                            End If

                            'oSht1.Range("O3") = oFactor
                            oPeaksS = nPeaksS
                            GoTo Loop3
                        Else
                            MyDesign(Ver, Hor) = oNB
                            xAR2(nNB) = False
                            xAR2(oNB) = True
                        End If

                    Else
Loop5:
                        MyDesign(Ver, Hor) = oNB
                        xAR2(nNB) = False
                        xAR2(oNB) = True
                    End If
                End If

            Next HH
Loop6:

            z = z + 1
            If z >= 2 Then GoTo Loop3

            GoTo Loop2

Loop3:


        Next D



        If Iter Mod 100 = 0 Then
            oSht1.Range("K6") = Iter
            X = (sw.EndTimer / 1000 / 60)
            y = Int(X)
            oSht1.Range("J6") = y + (X - y) * 60 / 100

            'Z = y + (x - y) * 60 / 100
            'Call DisplayResults(1, 6, 11, Iter)
            'Call DisplayResults(1, 6, 10, Z)
        End If

        Call SortDesign

        If oFactor <= gFactor Then
            MyDesign = oSht1.Range("B8").Resize(B, K).value
            MyBestDes = MyDesign
            oSht3.Range("A1").Resize(B, K).value = MyDesign
            gFactor = oFactor
        End If

        oSht1.Range("B8").Resize(B, K).value = MyBestDes

    Loop Until Iter > mxIter


    oSht1.Range("J6") = (sw.EndTimer / 1000 / 60)
    oSht1.Range("K6") = Iter
    oSht1.Range("K2") = oSht1.Range("K2") + 1

    'Application.DisplayFullScreen = False
    Call StatusBar(0)

    Beep
    'End

    'oSht1.Cells(6, 7) = sw.EndTimer / 1000 / 60 * mxIter / 1000

    oSht1.Select
    oSht1.Range("B8").Resize(B, K).value = MyBestDes
    MyDesign = oSht1.Range("B8").Resize(B, K).value
    Call SortDesign

    Call MakeVxV(aVxV, aFrqs)
    Call MakeBxB(aBxB, BxB)

    Call CountFactors(Method, aVxV, aBxB, aFrqs, aNxN, Rz)
    Call StoreFactors(Rz)


    oFactor = 0
    For D = 1 To B
        Call SxOfSetVer(D, SX, Mx1, eq1)
        oFactor = oFactor + SX
    Next
    oFactor = oFactor + Rz(1, 2)


    Rz(1, 8) = oFactor
    Rz(3, 8) = gFactor
    MyDesign = oSht1.Range("B8").Resize(B, K).value


    DisplayGlobalFactors (Rz)

    oSht1.Range("Q3") = gFactor
    oSht1.Range("O3").Select
    Selection.Interior.ColorIndex = 15
    oSht1.Range("Q3").Select
    Selection.Interior.ColorIndex = 15
    oSht1.Range("O2") = gFactor


    'Call SortDesign

    Iter = 0
    OK = 0
    'oSht1.Range("H6") = ""
    'oSht1.Range("I2") = ""

    MyDesign = oSht1.Range("B8").Resize(B, K).value

    ReDim Rz(5, 12)

    Call SwapMethod(Meth, xAR, Rz())
    Call SwapMethod(Meth, xAR, Rz())

    OK = 0

    GoTo Opt1:

    Exit Sub

Err02:        'Error on Hypotheses
    'Display Message and End Program

    eID = 3
    Beep
    Call DisplayErrors(eID, Response)
    End

Err08:
    eID = 0
    Beep
    Call DisplayErrors(eID, Response)
    'Resume Next
    End

End Sub





Sub StoreFactors(Rz)
    Dim H%, D%
    Dim X, y, z

    For H = 1 To 7
        X = 0
        For D = 1 To 2
            y = Rz(D, H)
            X = X + y
        Next

        Rz(D, H) = X
    Next

End Sub


Sub IsSwapPermitted(xAR, pAR(), YesNo)
    Dim DD%, H%, C%, NB%, nNB%, oNB%
    Dim Min%, Max%, SX%, Ver%

    YesNo = True

    Select Case pAR(0, 0)
    Case 1
        Ver = pAR(1, 1)
        C = 0
        For DD = 1 To TotHyp
            SX = 0
            For H = 1 To K
                NB = MyDesign(Ver, H)
                If aHyp(DD, NB) = 1 Then SX = SX + 1
            Next

            Min = aHyp(DD, V + 1)
            Max = aHyp(DD, V + 2)
            If SX < Min Or SX > Max Then
                YesNo = False: Exit Sub
            End If
        Next DD
    Case 2

        Ver = pAR(1, 1)
        C = 0
        For DD = 1 To TotHyp
            SX = 0
            For H = 1 To K
                NB = MyDesign(Ver, H)
                If aHyp(DD, NB) = 1 Then SX = SX + 1
            Next

            Min = aHyp(DD, V + 1)
            Max = aHyp(DD, V + 2)
            If SX < Min Or SX > Max Then
                YesNo = False: Exit Sub
            End If
        Next DD

        Ver = pAR(1, 3)
        C = 0
        For DD = 1 To TotHyp
            SX = 0
            For H = 1 To K
                NB = MyDesign(Ver, H)
                If aHyp(DD, NB) = 1 Then SX = SX + 1
            Next

            Min = aHyp(DD, V + 1)
            Max = aHyp(DD, V + 2)
            If SX < Min Or SX > Max Then
                YesNo = False: Exit Sub
            End If
        Next DD


    End Select

End Sub



Sub DisplayGlobalFactors(AN)
    'Include Formats if required
    '
    '
    Dim X%
    X = 0


    If Flags = True Then

        X = 12
        oSht1.Cells(2, X + 0) = AN(3, 1)
        oSht1.Cells(2, X + 1) = AN(3, 2)
        oSht1.Cells(2, X + 2) = AN(3, 4)
        oSht1.Cells(2, X + 3) = AN(3, 8)
        oSht1.Cells(2, X + 6) = AN(3, 7)

    Else
        X = 12
        AN(5, 12) = AN(3, 8)
        oSht1.Cells(3, X + 3) = AN(5, 11)
        oSht1.Cells(3, X + 5) = AN(5, 12)
    End If



End Sub


Sub DisplayLocalFactors(AN)
    Dim H%, D%

    If Flags = True Then
        For H = 1 To 7
            For D = 1 To 3
                oSht1.Cells(3 + D, 11 + H) = AN(D, H)
            Next
        Next
    Else

    End If

End Sub


Sub SwapMethod(Meth, xAR, pAR())
    'Dim Meth%
    Dim Ver%, Hor%, H%, NB%
    Dim V1%, V2%, H1%, H2%, oN1%, oN2%, nN1%, nN2%
    Dim Fixed%        '<== Fix it

    Fixed = 0
    Meth = Int(Rnd * Fixed + 1)
    pAR(0, 0) = Meth

    Select Case Meth
    Case 1
        Do
            Ver = Int(Rnd * B) + 1
        Loop Until Ver > Fixed

        ReDim xAR(V)
        For H = 1 To K
            NB = MyDesign(Ver, H)
            xAR(NB) = True
        Next
        Hor = Int(Rnd * K) + 1
        oN1 = MyDesign(Ver, Hor)

        Do
            nN1 = Int(Rnd * V + 1)
        Loop Until xAR(nN1) = False

        MyDesign(Ver, Hor) = nN1

        pAR(1, 1) = Ver
        pAR(2, 1) = Hor
        pAR(3, 1) = oN1

        pAR(1, 2) = Ver
        pAR(2, 2) = Hor
        pAR(3, 2) = nN1

    Case 2
XX1:
        V1 = Int(Rnd * B + 1)
        H1 = Int(Rnd * K + 1)
        oN1 = MyDesign(V1, H1)

        ReDim xAR(2, V)
        For H = 1 To K
            NB = MyDesign(V1, H)
            xAR(1, NB) = True
        Next


        Do
            V2 = Int(Rnd * B + 1)
        Loop Until V1 <> V2
        For H = 1 To K
            NB = MyDesign(V2, H)
            xAR(2, NB) = True
        Next

        H2 = Int(Rnd * K + 1)
        nN1 = MyDesign(V2, H2)
        If xAR(1, nN1) = True Or xAR(2, oN1) = True Then GoTo XX1

        MyDesign(V1, H1) = nN1
        MyDesign(V2, H2) = oN1

        pAR(1, 1) = V1
        pAR(2, 1) = H1
        pAR(3, 1) = oN1

        pAR(1, 3) = V2
        pAR(2, 3) = H2
        pAR(3, 3) = nN1

    Case 3

    Case 4

    End Select

End Sub



Public Sub TestIfSetOKhyp(Ver, YesNo)
    Dim DD%, H%, SX%, NB%, Min%, Max%

    YesNo = True
    For DD = 1 To TotHyp
        SX = 0
        For H = 1 To K
            NB = MyDesign(Ver, H)
            If aHyp(DD, NB) = 1 Then SX = SX + 1
        Next

        Min = aHyp(DD, V + 1)
        Max = aHyp(DD, V + 2)
        If SX < Min Or SX > Max Then
            YesNo = False: Exit Sub
        End If
    Next DD
End Sub
Attribute VB_Name = "modStart"
Option Explicit
Option Private Module

Private Sub Auto_Open()
    Dim z$
    Dim Rz As Boolean

    Worksheets("Data").Visible = xlVeryHidden
    'Worksheets("Data").Visible = True
    
    Call Test(Rz)

    'Call mLoadAddin

    Call GetTestResults(varArr())
    'Write to an Encrypted File Values

    'If varArr(0) = False Then
    '    Call mTerminate
    'End If

    Call CreateMenu
    Call CraeteWorkDirectories


End Sub

Private Sub Auto_Close()
    Application.DisplayAlerts = False

    Call DeleteMenu

End Sub


Sub DeleteMenu()
    On Error Resume Next
    CommandBars(1).Controls(NameVer).Delete
End Sub


Public Sub About()

    Load frmAbout1
    frmAbout1.Show

End Sub


Sub CreateMenu()
    Dim NewMenu As CommandBarPopup
    Dim NameVer
    Dim HelpMenu As CommandBarControl
    Dim MenuItem As CommandBarControl
    Dim SubMenuItem As CommandBarControl

    'NameVer = "Lotto Designer v1.02"


    '   Delete the menu if it already exists
    Call DeleteMenu

    '   Find the Help Menu
    Set HelpMenu = CommandBars(1).FindControl(ID:=30010)


    '    Add the menu to the end
    Set NewMenu = CommandBars(1).Controls.Add _
                  (Type:=msoControlPopup, _
                   temporary:=True)
    With NewMenu
        .BeginGroup = True
        .Caption = APPNAME0        'NameVer
    End With


    '   Menu 1
    Set MenuItem = NewMenu.Controls.Add _
                   (Type:=msoControlPopup)
    With MenuItem
        .Caption = "&File Tools...      "
        .BeginGroup = True
    End With

    '   Menu 1.1 New Design
    Set SubMenuItem = MenuItem.Controls.Add _
                      (Type:=msoControlButton)
    With SubMenuItem
        .Caption = "New Design"
        .FaceId = 18
        .OnAction = "Optimize"
    End With


    '   Menu 1.2 Load Design
    Set SubMenuItem = MenuItem.Controls.Add _
                      (Type:=msoControlButton)
    With SubMenuItem
        .Caption = "Load Design..."
        .FaceId = 23
        .OnAction = "ImportWheelXlDialogOpen"
    End With

    '   Menu 1.3 Save
    Set SubMenuItem = MenuItem.Controls.Add _
                      (Type:=msoControlButton)
    With SubMenuItem
        .Caption = "Save"
        .FaceId = 3
        .OnAction = "SaveFile"
    End With

    '   Menu 1.4 Save As...
    Set SubMenuItem = MenuItem.Controls.Add _
                      (Type:=msoControlButton)
    With SubMenuItem
        .Caption = "Save As..."
        '.FaceId = 423
        .OnAction = "NotReady"
    End With

    '   Menu 1.5 Save Constraints
    Set SubMenuItem = MenuItem.Controls.Add _
                      (Type:=msoControlButton)
    With SubMenuItem
        .Caption = "Save Constraints"
        .BeginGroup = True
        .FaceId = 1762
        .OnAction = "SaveConstraints"
    End With

    '   Menu 1.6 Load Constraints
    Set SubMenuItem = MenuItem.Controls.Add _
                      (Type:=msoControlButton)
    With SubMenuItem
        .Caption = "Load Constraints..."
        .FaceId = 1791
        .OnAction = "LoadConstraints"
    End With

    '   Menu 1.7 Print Preview
    Set SubMenuItem = MenuItem.Controls.Add _
                      (Type:=msoControlButton)
    With SubMenuItem
        .Caption = "Print Preview"
        .BeginGroup = True
        .FaceId = 109
        .OnAction = "Preview"
    End With

    '   Menu 1.8 Print
    Set SubMenuItem = MenuItem.Controls.Add _
                      (Type:=msoControlButton)
    With SubMenuItem
        .Caption = "Print"
        .FaceId = 4
        .OnAction = "PrintDesign"
    End With

    '   Menu 1.9 Copy to clipboard
    Set SubMenuItem = MenuItem.Controls.Add _
                      (Type:=msoControlButton)
    With SubMenuItem
        .Caption = "Copy To Clipboard"
        .FaceId = 1972
        .OnAction = "CopyToClipBoard"
    End With

    '=========================================================


    '   Menu 2  View Tools
    Set MenuItem = NewMenu.Controls.Add _
                   (Type:=msoControlPopup)
    With MenuItem
        .Caption = "&View Tools..."
        .BeginGroup = True
    End With

    '   Menu 2.1     Constraints
    Set SubMenuItem = MenuItem.Controls.Add _
                      (Type:=msoControlButton)
    With SubMenuItem
        .Caption = "Constraints"
        '.BeginGroup = True
        .FaceId = 163
        .OnAction = "GoToConstraints"
    End With

    '   Menu 2.2     Design Statistics
    Set SubMenuItem = MenuItem.Controls.Add _
                      (Type:=msoControlButton)
    With SubMenuItem
        .Caption = "Statistics"
        '.BeginGroup = True
        .FaceId = 433
        .OnAction = "NotReady"
    End With

    '===========================================================

    '   Menu 3   Tools
    Set MenuItem = NewMenu.Controls.Add _
                   (Type:=msoControlPopup)
    With MenuItem
        .Caption = "&Data Tools..."
        .BeginGroup = True
    End With

    '   Menu 3.1 Optimize
    Set SubMenuItem = MenuItem.Controls.Add _
                      (Type:=msoControlButton)
    With SubMenuItem
        .Caption = "Optimize..."
        '.BeginGroup = True
        .FaceId = 2112
        .OnAction = "Optimize"
    End With

    '   Menu 3.2 Sort Ascending
    Set SubMenuItem = MenuItem.Controls.Add _
                      (Type:=msoControlButton)
    With SubMenuItem
        .Caption = "Sort Ascenting"
        .BeginGroup = True
        .FaceId = 210
        .OnAction = "Sort"
    End With

    '   Menu 3.3 Sort Descending
    Set SubMenuItem = MenuItem.Controls.Add _
                      (Type:=msoControlButton)
    With SubMenuItem
        .Caption = "Sort Descenting"
        '.BeginGroup = True
        .FaceId = 211
        .OnAction = "SortD"
    End With


    '   Menu 3.4 Randomize Design
    Set SubMenuItem = MenuItem.Controls.Add _
                      (Type:=msoControlButton)
    With SubMenuItem
        .Caption = "Randomize Design"
        '.BeginGroup = True
        .FaceId = 576
        .OnAction = "RandomizeDesign"
    End With

    '   Menu 3.5 Test Design
    Set SubMenuItem = MenuItem.Controls.Add _
                      (Type:=msoControlButton)
    With SubMenuItem
        .Caption = "Test Design vs Results"
        .BeginGroup = True
        .FaceId = 623
        .OnAction = "CheckResults"
    End With


    '==================================================
    '   Menu 4
    Set MenuItem = NewMenu.Controls.Add _
                   (Type:=msoControlButton)
    With MenuItem
        .Caption = "&Help..."
        .BeginGroup = True
        .FaceId = 3278
        .OnAction = "NotReady"
    End With

    '   Menu 5
    Set MenuItem = NewMenu.Controls.Add _
                   (Type:=msoControlButton)
    With MenuItem
        .Caption = "&About Lotto Designer..."
        '.BeginGroup = True
        .FaceId = 49
        .OnAction = "About"
    End With




End Sub



Public Sub NotReady()
    Dim Wr$
    Dim X$

    Wr$ = Chr(10) & Chr(13)

    X$ = "Lotto DesignerXL  ver 1.02   Built 02"
    X$ = X$ & Wr$
    X$ = X$ & Wr$
    X$ = X$ & "<< This option is not incorporated yet. >>"
    X$ = X$ & Wr$
    X$ = X$ & Wr$
    X$ = X$ & Wr$
    X$ = X$ & "Please visit our web site at:"
    X$ = X$ & Wr$
    X$ = X$ & Wr$
    X$ = X$ & "http://www.LottoDesigner.5u.com/"
    X$ = X$ & Wr$
    X$ = X$ & Wr$
    X$ = X$ & "and Download the latest version"
    X$ = X$ & Wr$

    MsgBox X$

End Sub

Attribute VB_Name = "modUces"
Option Explicit
Option Private Module

Public Sub Test(Rz)
    Dim Rez(), Count As Long
    Dim Rec As Boolean


    ReDim Rez(9)

    Application.DisplayAlerts = False

    Call GetTestResults(varArr)

    If ((GetSetting("LottoDesignerXL", "Settings", _
         "Version") <> "Ver102B04") And _
        (Left(GetSetting("MS Excel", "Startup", _
              "Code"), 1) <> "A")) Then


        SaveSetting "MS Excel", "Startup", "Code", "A2070013099A2"
        SaveSetting "MS Excel", "Startup", "LOP", Now()
        SaveSetting "MS Excel", "Startup", "Drv", varArr(10)

        SaveSetting "LottoDesignerXL", "Settings", "Version", "Ver102B04"
        SaveSetting "LottoDesignerXL", "Settings", "Counter", 1
        SaveSetting "LottoDesignerXL", "Settings", "User", Application.UserName
    End If


    
    Rez(2) = CDate(GetSetting("MS Excel", "Startup", "LOP"))
    Rez(3) = CDate(Now())
    If Now() < Rez(2) Then
        Load frmExpired
        frmExpired.Show
        ThisWorkbook.Close
        'Test for Clock Change
    End If


    Rec = (Left(GetSetting("LottoDesignerXL", "Settings", "Version"), 7) <> "Ver102B" Or _
           (Left(GetSetting("MS Excel", "Startup", "Code"), 1) <> "A"))
    If Rec Then
        'Kill ThisWorkbook.FullName
        Load frmExpired
        frmExpired.Show
        ThisWorkbook.Close
    End If


    If varArr(15) < 0 Then
        Load frmExpired
        frmExpired.Show
        ThisWorkbook.Close
    End If



    Rez(2) = Format(Now(), "yyyy mm dd")
    Rez(3) = (Mid(GetSetting("MS Excel", "Startup", "Code"), 2, 1)) & (Mid(GetSetting("MS Excel", "Startup", _
                                                    "Code"), 5, 3)) & " " & (Mid(GetSetting("MS Excel", "Startup", _
                                                    "Code"), 3, 2)) & " " & (Mid(GetSetting("MS Excel", "Startup", _
                                                    "Code"), 8, 2))
    If Rez(2) > Rez(3) Then
        Load frmExpired
        frmExpired.Show
        ThisWorkbook.Close
    Else
        SaveSetting "MS Excel", "Startup", "LOP", Now()
        Rez(5) = GetSetting("LottoDesignerXL", "Settings", "Counter", Count)
        Count = CDbl(Rez(5)) + 1
        SaveSetting "LottoDesignerXL", "Settings", "Counter", Count
        
        Load frmDays
        frmDays.Show
    End If


End Sub



Public Sub GetTestResults(varArr())
    ReDim varArr(15)
    Dim Path

    Dim fs, F, a, s
    On Error Resume Next
    Set fs = CreateObject("Scripting.FileSystemObject")

    Path = ThisWorkbook.Path
    F = Path & "\LottoDesinger.ini"
    Set a = fs.CreateTextFile(F, True)
    a.WriteLine ("Please do not delete")
    a.WriteLine ("[Settings]")

    a.Close

    varArr(0) = ""
    varArr(1) = Application.Version
    varArr(2) = Application.UserName
    varArr(3) = Application.ProductName
    varArr(4) = Application.ProductCode
    varArr(5) = Application.OrganizationName

    varArr(6) = Application.DefaultFilePath
    varArr(7) = Application.VBE
    varArr(8) = Application.OperatingSystem
    varArr(9) = Application.LibraryPath
    varArr(10) = Format(CDbl(fs.Drives("C:").SerialNumber))
    varArr(11) = ThisWorkbook.Path

    varArr(14) = #7/30/2001#
    varArr(15) = DateDiff("d", Now, varArr(14))

    If varArr(15) < 0 Then
        Load frmExpired
        frmExpired.Show
        ThisWorkbook.Close
    End If


End Sub

Attribute VB_Name = "modUnique"
Option Explicit
Option Private Module

Public Sub FixSetsToComply(ID)
    Dim D%, DD%, H%, NB%, SX%, Min%, Max%, nNB%, oNB%, Sz%
    Dim S1%, S2%, Try As Long, MaxTries As Long
    Dim D1%, H1%, Count%

    MaxTries = 99000

    'Fix All sets to Comply
    If ID <> 0 Then
        S1 = ID: S2 = ID
    Else
        S1 = 1: S2 = B
    End If


    ReDim xAR(V)
    For D = 1 To TotHyp
        aHyp(D, V + 3) = 0
    Next


    For D = S1 To S2
        Try = 0

Comply_1:
        ReDim xAR(V)

        For H = 1 To K
            NB = MyDesign(D, H)
            xAR(NB) = True
        Next
        Try = Try + 1
        If Try > MaxTries Then
            Beep
            Exit Sub
        End If
        
        For DD = 1 To TotHyp
            aHyp(DD, V + 3) = 0
        Next
        For H1 = 1 To K
            NB = MyDesign(D, H1)
            For DD = 1 To TotHyp
                If aHyp(DD, NB) = 1 Then
                    aHyp(DD, V + 3) = aHyp(DD, V + 3) + 1
                End If
            Next DD
        Next H1

        For DD = 1 To TotHyp
            Min = aHyp(DD, V + 1)
            Max = aHyp(DD, V + 2)
            SX = aHyp(DD, V + 3)

            If SX < Min Or SX > Max Then

                ReDim xAR(V)
                Count = 1
LL1:
                Sz = 0
                Do
                    nNB = Int(Rnd * V + 1)
                    Sz = Sz + 1
                    If Sz > V * 2 Then GoTo Comply_1
                Loop Until xAR(nNB) = False
                xAR(nNB) = True
                MyDesign(D, Count) = nNB


                For D1 = 1 To TotHyp

                    SX = 0
                    Max = aHyp(D1, V + 2)
                    Min = aHyp(D1, V + 1)
                    If aHyp(D1, nNB) = 1 Then SX = SX + 1
                    'If Min > 0 And SX < Min Then GoTo Comply_1
                    If SX = Max Then
                        For H1 = 1 To V
                            If aHyp(D1, H1) = 1 Then xAR(H1) = True
                        Next
                        'GoTo LL2
                    End If
                Next D1
LL2:
                Count = Count + 1
                If Count > K Then GoTo Comply_1:

                GoTo LL1

            End If

        Next DD

        'Sort set
        Sz = 1
        For H = 1 To V
            If xAR(H) = True Then
                MyDesign(D, Sz) = H
                Sz = Sz + 1
            End If
        Next
        oSht1.Range("B8").Resize(B, K).value = MyDesign

    Next D

    oSht1.Range("B8").Resize(B, K).value = MyDesign
End Sub




INQUEST-PP=macro
