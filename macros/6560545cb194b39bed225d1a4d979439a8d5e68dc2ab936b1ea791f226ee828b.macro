Attribute VB_Name = "Assets"
Option Explicit
Sub runLiability()
    Dim ws As Worksheet, cfWS As Worksheet, intWS As Worksheet
    Dim r As Double, col As Double, balance As Double, cumInt As Double, cumPay As Double, rate As Double, interest As Double, payment As Double
    Dim payType As String
    
    Set ws = ThisWorkbook.Sheets("Lease Liability")
    Set intWS = ThisWorkbook.Sheets("Interest")
    Set cfWS = ThisWorkbook.Sheets("Cash Flows")
    
    ws.Cells.Clear
    intWS.Cells.Clear
    
    For r = 1 To 6
        For col = 1 To 2
            ws.Cells(r, col) = cfWS.Cells(r, col)
            intWS.Cells(r, col) = cfWS.Cells(r, col)
        Next col
    Next r
        
    col = 3
    
    Do While Not IsEmpty(cfWS.Cells(1, col))
        For r = 1 To 6
            ws.Cells(r, col) = cfWS.Cells(r, col)
            intWS.Cells(r, col) = cfWS.Cells(r, col)
        Next r
        
        rate = ws.Cells(2, col).Value
        payType = ws.Cells(5, col).Value
        balance = ws.Cells(6, col).Value
        
        r = 7
        
        Do While Not IsEmpty(cfWS.Cells(r, 1))
            If col = 3 Then
                ws.Cells(r, 1) = cfWS.Cells(r, 1)
                ws.Cells(r, 2) = cfWS.Cells(r, 2)
                ws.Cells(r, 1).NumberFormat = "dd/mm/yyyy"
                ws.Cells(r, 2).NumberFormat = "dd/mm/yyyy"
            
                intWS.Cells(r, 1) = cfWS.Cells(r, 1)
                intWS.Cells(r, 2) = cfWS.Cells(r, 2)
                intWS.Cells(r, 1).NumberFormat = "dd/mm/yyyy"
                intWS.Cells(r, 2).NumberFormat = "dd/mm/yyyy"
            End If
            
            If IsEmpty(cfWS.Cells(r, col)) Then GoTo skip
            
            payment = cfWS.Cells(r, col).Value
            
            If LCase(payType) = "advanced" Then
                balance = balance - payment
                interest = balance * rate / 12
                
                balance = balance + interest
            Else
                interest = balance * rate / 12
                balance = balance + interest - payment
            End If
            
            ws.Cells(r, col) = balance
            ws.Cells(r, col).Style = "Comma"
            
            intWS.Cells(r, col) = interest
            intWS.Cells(r, col).Style = "Comma"
skip:
            r = r + 1
        Loop
    
        col = col + 1
    Loop 'lease loop
    
    ws.Columns.AutoFit
    intWS.Columns.AutoFit
End Sub
Sub runDepreciation()
    Dim ws As Worksheet, cfWS As Worksheet, navWS As Worksheet
    Dim firstRow As Double, lastrow As Double
    Dim d As Date, minD As Date, maxD As Date, startD As Date, endD As Date
    Dim r As Double, col As Double, n As Double, dep As Double, p As Double, cumDep As Double, NPV As Double
    Dim pStart As Date, pEnd As Date
    Dim leaseID As String
    
    Set cfWS = ThisWorkbook.Sheets("Cash Flows")
    Set navWS = ThisWorkbook.Sheets("Net Asset Value")
    Set ws = ThisWorkbook.Sheets("Depreciation")
    
    ws.Cells.Clear
    navWS.Cells.Clear
    
    For r = 1 To 6
        For col = 1 To 2
            ws.Cells(r, col) = cfWS.Cells(r, col)
            navWS.Cells(r, col) = cfWS.Cells(r, col)
        Next col
    Next r

    col = 3
    
    Do While Not IsEmpty(cfWS.Cells(1, col))
        For r = 1 To 6
            ws.Cells(r, col) = cfWS.Cells(r, col)
            navWS.Cells(r, col) = cfWS.Cells(r, col)
        Next r
        
        leaseID = ws.Cells(1, col)
        startD = CDate(ws.Cells(3, col))
        endD = CDate(ws.Cells(4, col))
        
        n = nMonths(startD, endD)
        NPV = cfWS.Cells(6, col).Value
        dep = NPV / n
        
        ws.Cells(1, col) = leaseID
        ws.Cells(2, col) = n
        
        navWS.Cells(1, col) = leaseID
        navWS.Cells(2, col) = n
        
        p = 7
        cumDep = 0
        
        Do While Not IsEmpty(cfWS.Cells(p, 1))
            If col = 3 Then
                ws.Cells(p, 1) = cfWS.Cells(p, 1)
                ws.Cells(p, 2) = cfWS.Cells(p, 2)
                ws.Cells(p, 1).NumberFormat = "dd/mm/yyyy"
                ws.Cells(p, 2).NumberFormat = "dd/mm/yyyy"
            
                navWS.Cells(p, 1) = cfWS.Cells(p, 1)
                navWS.Cells(p, 2) = cfWS.Cells(p, 2)
                navWS.Cells(p, 1).NumberFormat = "dd/mm/yyyy"
                navWS.Cells(p, 2).NumberFormat = "dd/mm/yyyy"
            End If
            
            pStart = CDate(ws.Cells(p, 1))
            pEnd = CDate(ws.Cells(p, 2))
            
            If pStart < startD Then GoTo skip
            If pEnd > endD Then GoTo skip
            
            cumDep = cumDep + dep
            
            ws.Cells(p, col) = dep
            ws.Cells(p, col).Style = "Comma"
            
            navWS.Cells(p, col) = NPV - cumDep
            navWS.Cells(p, col).Style = "Comma"
skip:
            p = p + 1
        Loop
        col = col + 1
    Loop
End Sub
Function nMonths(ByVal startD As Date, ByVal endD As Date) As Double
    If startD > endD Then Exit Function
    Do While Format(startD, "m.yy") <> Format(endD, "m.yy")
        startD = DateAdd("m", 1, startD)
        nMonths = nMonths + 1
    Loop
    nMonths = nMonths + 1
End Function
Attribute VB_Name = "Cash_Flows"
Option Explicit
Sub runCashFlows()
    Dim dataWS As Worksheet, ws As Worksheet
    Dim leaseID As String, payType As String
    Dim firstRow As Double, lastrow As Double, r As Double, c As Double, p As Double, col As Double
    Dim payFreq As Double, pay As Double, esc As Double, escFreq As Double, rate As Double, nominal As Double
    Dim startD As Date, endD As Date, escD As Date, payD As Date, d As Date
    Dim minD As Date, maxD As Date
    Dim pStart As Date, pEnd As Date
    Dim startFlows As Double, endFlows As Double
    Dim adv As Double
    
    Set dataWS = ThisWorkbook.Sheets("Data Entry")
    Set ws = ThisWorkbook.Sheets("Cash Flows")
    
    ws.Cells.Clear
    
    firstRow = 8
    lastrow = ThisWorkbook.Names("lastRow").RefersToRange.row - 1
    
    For r = firstRow To lastrow
        If CDate(dataWS.Cells(r, 7).Value) < minD Or minD = 0 Then minD = CDate(dataWS.Cells(r, 7).Value)
        If CDate(dataWS.Cells(r, 6).Value) > maxD Or maxD = 0 Then maxD = CDate(dataWS.Cells(r, 6).Value)
    Next r
    
    ws.Cells(1, 1) = "Lease #"
    ws.Cells(2, 1) = "Rate"
    ws.Cells(3, 1) = "Lease Start"
    ws.Cells(4, 1) = "Lease End"
    ws.Cells(5, 1) = "Advanced Payment"
    ws.Cells(6, 1) = "Month Start"
    ws.Cells(6, 2) = "Month End/NPV"
    
    d = minD
    r = 7
    
    Do While d < maxD
        ws.Cells(r, 1) = d
        d = DateAdd("m", 1, d)
        ws.Cells(r, 2) = DateAdd("d", -1, d)
        
        r = r + 1
    Loop
    
    For r = firstRow To lastrow
        col = r - firstRow + 3
        
        leaseID = dataWS.Cells(r, 2)
        startD = CDate(dataWS.Cells(r, 7))
        endD = CDate(dataWS.Cells(r, 6))
        escFreq = dataWS.Cells(r, 16).Value
        pay = dataWS.Cells(r, 12).Value
        esc = dataWS.Cells(r, 15).Value
        nominal = dataWS.Cells(r, 9).Value
        payType = dataWS.Cells(r, 11).Value
        
        rate = (((nominal + 1) ^ (1 / 12)) - 1) * 12
        
        escD = DateAdd("m", escFreq, startD)
        
        Select Case LCase(dataWS.Cells(r, 10))
            Case "monthly": payFreq = 1: adv = 0
            Case "quarterly": payFreq = 3: adv = -2
            Case "bi-annually": payFreq = 6: adv = -5
            Case "annually": payFreq = 12: adv = -11
        End Select
        
        If LCase(payType) <> "advanced" Then adv = 0
        
        payD = DateAdd("m", payFreq - 1 + adv, startD)
        
        ws.Cells(1, col) = leaseID
        ws.Cells(2, col) = rate
        ws.Cells(3, col) = startD
        ws.Cells(4, col) = endD
        ws.Cells(5, col) = payType
    
        startFlows = 0
        endFlows = 0
        
        p = 7

        Do While Not IsEmpty(ws.Cells(p, 1))
            pStart = CDate(ws.Cells(p, 1))
            pEnd = CDate(ws.Cells(p, 2))
            
            If pStart < startD Then GoTo skip
            If pEnd > endD Then GoTo skip
            
            'variable payments
            If LCase(dataWS.Cells(r, 17)) = "yes" Then
                c = 19
                Do While Not IsEmpty(dataWS.Cells(r, c)) And (pStart < CDate(dataWS.Cells(r, c)) Or pEnd > CDate(dataWS.Cells(r, c + 1)))
                    c = c + 3
                Loop
                
                pay = dataWS.Cells(r, c + 2).Value
            Else
                'normal escalations
                If pStart <= escD And pEnd >= escD Then
                    pay = pay * (1 + esc)
                    escD = DateAdd("m", escFreq, escD)
                End If
            End If
            
            'payments
            If payD >= pStart And payD <= pEnd Then
                ws.Cells(p, col) = pay
                payD = DateAdd("m", payFreq, payD)
            Else
                ws.Cells(p, col) = 0
            End If
            ws.Cells(p, col).Style = "Comma"
            
            If startFlows = 0 Then startFlows = p
            If p > endFlows Then endFlows = p
skip:
            p = p + 1
        Loop
        
        ws.Activate
        
        If LCase(payType) = "advanced" Then
            ws.Cells(6, col) = Application.NPV(rate / 12, ws.Range(Cells(startFlows + 1, col), Cells(endFlows, col))) + ws.Cells(startFlows, col).Value
        Else
            ws.Cells(6, col) = Application.NPV(rate / 12, ws.Range(Cells(startFlows, col), Cells(endFlows, col)))
        End If
        ws.Cells(6, col).Style = "Comma"
    Next r
    
End Sub
Function cashFlow(ByVal index As Double, ByVal ws As Worksheet, startD As Date, endD As Date, pay As Double, payFreq As Double, escDate As Date, esc As Double, escFreq As Double)
    Dim c As Double
    
    c = 2 + index
    
    
End Function
Attribute VB_Name = "Errors"
Attribute VB_Base = "0{44DA7B59-02A7-4E3E-A5C3-50B6C885F341}{CD90D2A8-B193-47E1-8401-165F7EE97F08}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "Leases"
Attribute VB_Base = "0{FA5C968F-EE99-43F5-9610-42283877C7CC}{A23600CD-C381-4AE7-9B36-449A0DD0CD74}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Sub okB_Click()
    Dim del As Object
    Dim i As Double
    
    Set del = CreateObject("Scripting.Dictionary")
    
    For i = 0 To leaseL.ListCount - 1
        If leaseL.Selected(i) Then del.Add leaseL.List(i), ""
    Next i
    
    Call deleteLease(del)
    Unload Me
End Sub

Private Sub selectC_Click()
    Dim state As Boolean
    Dim i As Double
    
    For i = 0 To leaseL.ListCount - 1
        leaseL.Selected(i) = selectC.Value
    Next i
End Sub
Attribute VB_Name = "Output"
Option Explicit
Public Leases As Object
Public startDate As Object
Sub runMain()
    
    appvars.log "Executed the 'Apply Selection' module "
    
    Dim ws As Worksheet
    Set ws = ActiveSheet
    
    If Not validation(False) Then Exit Sub
    
    Application.ScreenUpdating = False
    
    With ThisWorkbook.Sheets("Data Selection and Output")
    
        .Unprotect
    
    If ThisWorkbook.Names("changed").RefersToRange.Value Then
        Application.StatusBar = "Calculating..."
        Call runCashFlows
        Call runLiability
        Call runDepreciation
        
        Application.StatusBar = False
        ThisWorkbook.Names("changed").RefersToRange = False
    End If
    
    Call runSelection
    Call cashFlows
    Call journals
    Call register
    Call analytics
        
        .Unprotect
        .Columns.AutoFit
        .Protect
    End With
    
    ws.Activate
    
    Application.ScreenUpdating = False
    
    End
End Sub
Sub runSelection()
    Dim ws As Worksheet, refWS As Worksheet
    Dim firstRow As Double, lastrow As Double, r As Double, c As Double, col As Double
    Dim qualify As Boolean
    Dim leaseID As Variant
    Dim temp As String
    
    Dim fromD As Date, toD As Date
    Dim leaseFrom As Double, leaseTo As Double
    Dim BU As String, curr As String, asset As String

    Set ws = ThisWorkbook.Sheets("Data Selection and Output")
    Set refWS = ThisWorkbook.Sheets("Data Entry")
    
    Set Leases = CreateObject("Scripting.Dictionary")
    Set startDate = CreateObject("Scripting.Dictionary")
    
    fromD = CDate(ThisWorkbook.Names("dateFrom").RefersToRange.Value)
    toD = CDate(ThisWorkbook.Names("dateTo").RefersToRange.Value)
    leaseFrom = ThisWorkbook.Names("leaseFrom").RefersToRange.Value
    leaseTo = ThisWorkbook.Names("leaseTo").RefersToRange.Value
    BU = ThisWorkbook.Names("BU").RefersToRange.Value
    curr = ThisWorkbook.Names("currency").RefersToRange.Value
    asset = ThisWorkbook.Names("assetClass").RefersToRange.Value
    
    firstRow = 8
    lastrow = ThisWorkbook.Names("lastRow").RefersToRange.row - 1
    
    temp = "Qualifying Leases: "
    
    For r = firstRow To lastrow
        qualify = True
        
        leaseID = CStr(refWS.Cells(r, 2).Value)
        If leaseFrom <> 0 Then If leaseID < leaseFrom Then qualify = False
        If leaseTo <> 0 Then If leaseID > leaseTo Then qualify = False
        
        If BU <> "" Then If LCase(refWS.Cells(r, 5).Value) <> LCase(BU) Then qualify = False
        If asset <> "" Then If LCase(refWS.Cells(r, 8).Value) <> LCase(asset) Then qualify = False
        If curr <> "" Then If LCase(refWS.Cells(r, 13).Value) <> LCase(curr) Then qualify = False
        
        If qualify Then Leases.Add leaseID, refWS.Cells(r, 8).Value
        
        startDate.Add leaseID, CDate(refWS.Cells(r, 7).Value)
    Next r
End Sub
Sub register()
    Dim ws As Worksheet, navWS As Worksheet, liaWS As Worksheet, intWS As Worksheet, cfWS As Worksheet
    Dim r As Double, p As Double, col As Double
    Dim dateToFilter As Date, pEnd As Date
    Dim classNo As Object, classVal As Object
    Dim assClass As String
    Dim pay As Double, interest As Double, assets As Double, liab As Double
    
    Set navWS = ThisWorkbook.Sheets("Net Asset Value")
    Set cfWS = ThisWorkbook.Sheets("Cash Flows")
    Set liaWS = ThisWorkbook.Sheets("Lease Liability")
    Set intWS = ThisWorkbook.Sheets("Interest")
    Set ws = ThisWorkbook.Sheets("Data Selection and Output")
    
    If Leases Is Nothing Then Call runSelection
    
    dateToFilter = CDate(ThisWorkbook.Names("dateTo").RefersToRange.Value)
    
    p = 7
    col = 3
    r = 4
    
    ws.Unprotect
    
    ws.Range(Cells(r, 13), ws.Cells(r, 13).End(xlDown).Offset(0, 3)).Clear
    ws.Range(Cells(r, 18), ws.Cells(r, 18).End(xlDown).Offset(0, 4)).Clear
    
    Do While Not IsEmpty(navWS.Cells(p, 1))
        pEnd = CDate(navWS.Cells(p, 2).Value)
        
        If pEnd <> dateToFilter Then GoTo skipDate
        
        Do While Not IsEmpty(navWS.Cells(1, col))
            If Not Leases.exists(CStr(navWS.Cells(1, col).Value)) Then GoTo skipLease
            
            ws.Cells(r, 13) = navWS.Cells(1, col).Value
            ws.Cells(r, 14) = navWS.Cells(6, col).Value
            ws.Cells(r, 16) = navWS.Cells(p, col).Value
            ws.Cells(r, 15) = ws.Cells(r, 14).Value - ws.Cells(r, 16).Value
            
            ws.Cells(r, 14).Style = "Comma"
            ws.Cells(r, 15).Style = "Comma"
            ws.Cells(r, 16).Style = "Comma"
            
            ws.Cells(r, 18) = navWS.Cells(1, col).Value
            ws.Cells(r, 19) = navWS.Cells(6, col).Value
            ws.Cells(r, 20) = sumData(Range(Cells(7, col), Cells(p, col)), cfWS)
            ws.Cells(r, 21) = sumData(Range(Cells(7, col), Cells(p, col)), intWS)
            ws.Cells(r, 22) = liaWS.Cells(p, col).Value
            
            ws.Cells(r, 19).Style = "Comma"
            ws.Cells(r, 20).Style = "Comma"
            ws.Cells(r, 21).Style = "Comma"
            ws.Cells(r, 22).Style = "Comma"
            
            assets = assets + ws.Cells(r, 16).Value
            liab = liab + ws.Cells(r, 22).Value
            
            r = r + 1
            
skipLease:
            col = col + 1
        Loop
        
skipDate:
        p = p + 1
    Loop
    
    ws.Cells(21, 2) = "Balance at " & Format(dateToFilter, "d mmm yyyy")
    ws.Cells(22, 3) = assets
    ws.Cells(23, 3) = liab
    
    boarders ws.Range(Cells(3, 13), Cells(r - 1, 16))
    boarders ws.Range(Cells(3, 18), Cells(r - 1, 22))
    
    ws.Protect
End Sub
Function sumData(ByVal r As Range, ByVal ws As Worksheet) As Double
    Dim cell As Range
    
    For Each cell In ws.Range(r.Address)
        If IsNumeric(cell) Then sumData = sumData + Val(cell.Value)
    Next cell
End Function
Sub journals()
    Dim cfWS As Worksheet, depWS As Worksheet, intWS As Worksheet, ws As Worksheet
    Dim r As Double, c As Double, p As Double, col As Double
    Dim startD As Date, endD As Date, pStart As Date, pEnd As Date, d As Date
    Dim dateFromFilter As Date, dateToFilter As Date
    Dim interest As Object, initial As Object, dep As Object, pay As Object
    Dim firstDate As Date, lastDate As Date
        
    Set ws = ThisWorkbook.Sheets("Data Selection and Output")
    Set cfWS = ThisWorkbook.Sheets("Cash Flows")
    Set intWS = ThisWorkbook.Sheets("Interest")
    Set depWS = ThisWorkbook.Sheets("Depreciation")
    
    Set interest = CreateObject("Scripting.Dictionary")
    Set initial = CreateObject("Scripting.Dictionary")
    Set dep = CreateObject("Scripting.Dictionary")
    Set pay = CreateObject("Scripting.Dictionary")
    
    If Leases Is Nothing Then Call runSelection
    
    dateFromFilter = CDate(ThisWorkbook.Names("dateFrom").RefersToRange.Value)
    dateToFilter = CDate(ThisWorkbook.Names("dateTo").RefersToRange.Value)
    
    r = 7
    
    Do While Not IsEmpty(cfWS.Cells(r, 1))
        pStart = CDate(cfWS.Cells(r, 1).Value)
        pEnd = CDate(cfWS.Cells(r, 2).Value)
        
        If pStart < dateFromFilter Then GoTo skipPeriod
        If pEnd > dateToFilter Then GoTo skipPeriod
        
        col = 3
        
        Do While Not IsEmpty(cfWS.Cells(1, col))
            If Not Leases.exists(CStr(cfWS.Cells(1, col))) Then GoTo skipLease
            
            startD = CDate(cfWS.Cells(3, col).Value)
            endD = CDate(cfWS.Cells(4, col).Value)
            
            If pStart = startD Then If initial.exists(pStart) Then initial(pStart) = initial(pStart) + cfWS.Cells(6, col).Value Else initial.Add pStart, cfWS.Cells(6, col).Value
            
            If LCase(cfWS.Cells(5, col).Value) = "advanced" Then
                If pay.exists(pStart) Then pay(pStart) = pay(pStart) + cfWS.Cells(r, col) Else pay.Add pStart, cfWS.Cells(r, col).Value
            Else
                If pay.exists(pEnd) Then pay(pEnd) = pay(pEnd) + cfWS.Cells(r, col) Else pay.Add pEnd, cfWS.Cells(r, col).Value
            End If
            
            If interest.exists(pEnd) Then interest(pEnd) = interest(pEnd) + intWS.Cells(r, col) Else interest.Add pEnd, intWS.Cells(r, col).Value
            If dep.exists(pEnd) Then dep(pEnd) = dep(pEnd) + depWS.Cells(r, col) Else dep.Add pEnd, depWS.Cells(r, col).Value
            
skipLease:
            If firstDate = 0 Or startD < firstDate Then firstDate = startD
            If lastDate = 0 Or lastDate < endD Then lastDate = endD
            
            col = col + 1
        Loop
skipPeriod:
        r = r + 1
    Loop
    
    r = 4
    col = 8
    
    ws.Range(Cells(r, col), ws.Cells(r, col + 3).End(xlDown)).Clear
    
    For d = firstDate To lastDate
        If initial.exists(d) Then
            If initial(d) > 0 Then
                ws.Cells(r, col + 0) = d
                ws.Cells(r, col + 1) = "Right of use asset"
                ws.Cells(r, col + 2) = "Debit"
                ws.Cells(r, col + 3) = initial(d)
            
                ws.Cells(r + 1, col + 0) = d
                ws.Cells(r + 1, col + 1) = "Lease Liability"
                ws.Cells(r + 1, col + 2) = "Credit"
                ws.Cells(r + 1, col + 3) = initial(d)
                
                ws.Cells(r, col + 3).Style = "Comma"
                ws.Cells(r + 1, col + 3).Style = "Comma"
                
                r = r + 2
            End If
        End If
        
        If pay.exists(d) Then
            If pay(d) > 0 Then
                ws.Cells(r, col + 0) = d
                ws.Cells(r, col + 1) = "Lease Liability"
                ws.Cells(r, col + 2) = "Debit"
                ws.Cells(r, col + 3) = pay(d)
            
                ws.Cells(r + 1, col + 0) = d
                ws.Cells(r + 1, col + 1) = "Accounts Payable (Lease payment)"
                ws.Cells(r + 1, col + 2) = "Credit"
                ws.Cells(r + 1, col + 3) = pay(d)
                
                ws.Cells(r, col + 3).Style = "Comma"
                ws.Cells(r + 1, col + 3).Style = "Comma"
                
                r = r + 2
            End If
        End If
        
        If interest.exists(d) Then
            If interest(d) > 0 Then
                ws.Cells(r, col + 0) = d
                ws.Cells(r, col + 1) = "Interest Expense"
                ws.Cells(r, col + 2) = "Debit"
                ws.Cells(r, col + 3) = interest(d)
            
                ws.Cells(r + 1, col + 0) = d
                ws.Cells(r + 1, col + 1) = "Lease Liability"
                ws.Cells(r + 1, col + 2) = "Credit"
                ws.Cells(r + 1, col + 3) = interest(d)
                
                ws.Cells(r, col + 3).Style = "Comma"
                ws.Cells(r + 1, col + 3).Style = "Comma"
                
                r = r + 2
            End If
        End If
        
        If dep.exists(d) Then
            If dep(d) > 0 Then
                ws.Cells(r, col + 0) = d
                ws.Cells(r, col + 1) = "Depreciation"
                ws.Cells(r, col + 2) = "Debit"
                ws.Cells(r, col + 3) = dep(d)
            
                ws.Cells(r + 1, col + 0) = d
                ws.Cells(r + 1, col + 1) = "Accumulated Depreciation"
                ws.Cells(r + 1, col + 2) = "Credit"
                ws.Cells(r + 1, col + 3) = dep(d)
                
                ws.Cells(r, col + 3).Style = "Comma"
                ws.Cells(r + 1, col + 3).Style = "Comma"
                
                r = r + 2
            End If
        End If
    Next d
    
    boarders ws.Range(Cells(3, 8), Cells(r - 1, col + 3))
End Sub
Sub cashFlows()
    Dim cfWS As Worksheet, ws As Worksheet
    Dim CF As Object
    Dim r As Double, pay As Double, col As Double, i As Double
    Dim adv As String
    Dim dateFrom As Date, dateTo As Date, d As Date
    Dim dateFromFilter As Date, dateToFilter As Date
    
    Set ws = ThisWorkbook.Sheets("Data Selection and Output")
    Set cfWS = ThisWorkbook.Sheets("Cash Flows")
    Set CF = CreateObject("Scripting.Dictionary")
    
    If Leases Is Nothing Then Call runSelection
    
    dateFromFilter = CDate(ThisWorkbook.Names("dateFrom").RefersToRange.Value)
    dateToFilter = CDate(ThisWorkbook.Names("dateTo").RefersToRange.Value)
    
    r = 7
    Do While Not IsEmpty(cfWS.Cells(r, 1))
        dateFrom = CDate(cfWS.Cells(r, 1).Value)
        dateTo = CDate(cfWS.Cells(r, 2).Value)
        
        If dateFrom < dateFromFilter Then GoTo skipDate
        If dateTo > dateToFilter Then GoTo skipDate
        
        CF.Add dateFrom, 0
        CF.Add dateTo, 0
        
skipDate:
        r = r + 1
    Loop
    
    col = 3
    
    Do While Not IsEmpty(cfWS.Cells(1, col))
        If Not Leases.exists(CStr(cfWS.Cells(1, col))) Then GoTo skipLease
        
        adv = cfWS.Cells(5, col).Value
        
        r = 7
        
        Do While Not IsEmpty(cfWS.Cells(r, 1))
            dateFrom = CDate(cfWS.Cells(r, 1).Value)
            dateTo = CDate(cfWS.Cells(r, 2).Value)
            pay = cfWS.Cells(r, col).Value
            
            If pay > 0 Then
                If LCase(adv) = "advanced" Then d = dateFrom Else d = dateTo
            
                If CF.exists(d) Then CF(d) = CF(d) + pay
            End If
            
            r = r + 1
        Loop
skipLease:
        col = col + 1
    Loop
    
    r = 4
    col = 5
    
    ws.Activate
    ws.Range(Cells(r, col), ws.Cells(r, col + 1).End(xlDown)).Clear
    
    For i = 0 To CF.Count - 1
        If CF.items()(i) > 0 Then
            ws.Cells(r, col) = CF.keys()(i)
            ws.Cells(r, col + 1) = CF.items()(i)
            
            ws.Cells(r, col).NumberFormat = "dd/mm/yyyy"
            ws.Cells(r, col + 1).Style = "Comma"
            
            r = r + 1
        End If
    Next i
    
    boarders ws.Range(Cells(3, 5), Cells(r - 1, col + 1))
End Sub
Sub analytics()
    Dim ws As Worksheet, cfWS As Worksheet, assWS As Worksheet, liaWS As Worksheet, intWS As Worksheet, depWS As Worksheet, outWS As Worksheet
    Dim graphWS As Worksheet
    Dim r As Double, p As Double, col As Double
    Dim assets As Double, liab As Double, interest As Double, dep As Double, pay As Double
    Dim dateFromFilter As Date, dateToFilter As Date, dateFrom As Date, dateTo As Date
    Dim classNo As Object, classVal As Object
    Dim class As String
    
    Set ws = ThisWorkbook.Sheets("Graph Data")
    Set cfWS = ThisWorkbook.Sheets("Cash Flows")
    Set assWS = ThisWorkbook.Sheets("Net Asset Value")
    Set intWS = ThisWorkbook.Sheets("Interest")
    Set liaWS = ThisWorkbook.Sheets("Lease Liability")
    Set depWS = ThisWorkbook.Sheets("Depreciation")
    Set graphWS = ThisWorkbook.Sheets("Analytical Insights")
    Set outWS = ThisWorkbook.Sheets("Data Selection and Output")
    
    Set classNo = CreateObject("Scripting.Dictionary")
    Set classVal = CreateObject("Scripting.Dictionary")
    
    If Leases Is Nothing Then Call runSelection
    
    dateFromFilter = CDate(ThisWorkbook.Names("dateFrom").RefersToRange.Value)
    dateToFilter = CDate(ThisWorkbook.Names("dateTo").RefersToRange.Value)
    
    p = 7
    r = 4
    
    graphWS.Unprotect
    
    graphWS.Cells(3, 3) = Leases.Count
    
    Do While Not IsEmpty(cfWS.Cells(p, 1))
        assets = 0: liab = 0: interest = 0: dep = 0: pay = 0
        
        dateFrom = CDate(cfWS.Cells(p, 1).Value)
        dateTo = CDate(cfWS.Cells(p, 2).Value)
        
        If dateFrom < dateFromFilter Then GoTo skipDate
        If dateTo > dateToFilter Then GoTo skipDate
        
        col = 3
        
        Do While Not IsEmpty(cfWS.Cells(1, col))
            If Not Leases.exists(CStr(cfWS.Cells(1, col).Value)) Then GoTo skipLease
            
            assets = assets + assWS.Cells(p, col).Value
            interest = interest + intWS.Cells(p, col).Value
            dep = dep + depWS.Cells(p, col).Value
            liab = liab + liaWS.Cells(p, col).Value
            pay = pay + cfWS.Cells(p, col).Value
skipLease:
            col = col + 1
        Loop
        
        If assets + liab + dep + interest + pay > 0 Then
            ws.Cells(r, 2) = dateTo
            ws.Cells(r, 3) = assets
            ws.Cells(r, 4) = liab
            
            ws.Cells(r, 2).NumberFormat = "mmm yyyy"
            ws.Cells(r, 3).Style = "Comma"
            ws.Cells(r, 4).Style = "Comma"
            
            ws.Cells(r, 6) = dateTo
            ws.Cells(r, 7) = dep
            ws.Cells(r, 8) = interest
            
            ws.Cells(r, 6).NumberFormat = "mmm yyyy"
            ws.Cells(r, 7).Style = "Comma"
            ws.Cells(r, 8).Style = "Comma"
            
            ws.Cells(r, 10) = dateTo
            ws.Cells(r, 11) = pay
            
            ws.Cells(r, 10).NumberFormat = "mmm yyyy"
            ws.Cells(r, 11).Style = "Comma"
            
            r = r + 1
        End If
        
skipDate:
        p = p + 1
    Loop
    
    graphWS.Cells(6, 2) = dateFromFilter & " - " & dateToFilter
    
    col = 3
    Do While Not IsEmpty(cfWS.Cells(1, col))
        If Leases.exists(CStr(cfWS.Cells(1, col).Value)) Then
            class = Leases(CStr(cfWS.Cells(1, col).Value))
            
            If classNo.exists(class) Then
                classNo(class) = classNo(class) + 1
                classVal(class) = classVal(class) + cfWS.Cells(6, col).Value
            Else
                classNo.Add class, 1
                classVal.Add class, cfWS.Cells(6, col).Value
            End If
        End If
        col = col + 1
    Loop
    
    ws.Activate
    graphWS.ChartObjects("Assets and Liabilities").Chart.SetSourceData Source:=ws.Range(Cells(3, 2), Cells(r - 1, 4))
    graphWS.ChartObjects("Interest and Depreciation").Chart.SetSourceData Source:=ws.Range(Cells(3, 6), Cells(r - 1, 8))
    graphWS.ChartObjects("Cash Flows").Chart.SetSourceData Source:=ws.Range(Cells(3, 10), Cells(r - 1, 11))
    
    Select Case LCase(ThisWorkbook.Names("graphType").RefersToRange.Value)
        Case "line"
            graphWS.ChartObjects("Assets and Liabilities").Chart.ChartType = xlLine
            graphWS.ChartObjects("Interest and Depreciation").Chart.ChartType = xlLine
            graphWS.ChartObjects("Cash Flows").Chart.ChartType = xlLine
        Case Else
            graphWS.ChartObjects("Assets and Liabilities").Chart.ChartType = xlColumnClustered
            graphWS.ChartObjects("Interest and Depreciation").Chart.ChartType = xlColumnClustered
            graphWS.ChartObjects("Cash Flows").Chart.ChartType = xlColumnClustered
    End Select
    
    graphWS.Activate
    graphWS.Range(Cells(32, 2), graphWS.Cells(32, 2).End(xlDown).Offset(0, 2)).Clear
    
    For r = 0 To classNo.Count - 1
        class = classNo.keys()(r)
        graphWS.Cells(r + 32, 2) = Application.Proper(class)
        graphWS.Cells(r + 32, 3) = classNo(class)
        graphWS.Cells(r + 32, 4) = classVal(class)
        
        graphWS.Cells(r + 32, 4).Style = "Comma"
    Next r
    
    boarders graphWS.Range(Cells(31, 2), graphWS.Cells(31, 2).End(xlDown).Offset(0, 2))
    graphWS.ChartObjects("Asset Classification").Chart.SetSourceData Source:=graphWS.Range(Cells(31, 2), graphWS.Cells(31, 2).End(xlDown).Offset(0, 1))
    graphWS.ChartObjects("Asset Classification Value").Chart.SetSourceData Source:=Union(graphWS.Range(Cells(31, 2), graphWS.Cells(31, 2).End(xlDown)), graphWS.Range(Cells(31, 2).Offset(0, 2), graphWS.Cells(31, 2).End(xlDown).Offset(0, 2)))
    
    graphWS.Protect
End Sub
Function boarders(ByVal r As Range)
    Dim colour As Long
    
    colour = 7884319
    
    r.Borders(xlDiagonalDown).LineStyle = xlNone
    r.Borders(xlDiagonalUp).LineStyle = xlNone
    
    With r.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Color = colour
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With r.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Color = colour
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With r.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Color = colour
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With r.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Color = colour
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With r.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .Color = colour
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With r.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .Color = colour
        .TintAndShade = 0
        .Weight = xlThin
    End With
End Function

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    If Target.Column = 18 Then Call noPayments
    ThisWorkbook.Names("changed").RefersToRange = True
    
    If Target.Cells.Count = 1 Then
      appvars.log "Edited the Data Entry Sheet cell " & Target.Address & " to " & Target.Value
    Else
       appvars.log "Edited the Data Entry Sheet range " & Target.Address
    End If
    
End Sub
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    If ThisWorkbook.Names("changed").RefersToRange.Value = True Then Call filters
End Sub


Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    If ThisWorkbook.Names("changed").RefersToRange.Value = True Then Call filters
End Sub



Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    If ThisWorkbook.Names("changed").RefersToRange.Value = True Then Call filters
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
   
   If Target.Cells.Count = 1 Then
      appvars.log "Edited the Data Selection and Output Sheet cell " & Target.Address & " to " & Target.Value
    Else
       appvars.log "Edited the Data Selection and Output Sheet range " & Target.Address
    End If
   
End Sub
Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
      
      Me.Protect "$DeloitteEA"
      Me.EnableSelection = xlNoSelection
      
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
  
  If Target.Cells.Count = 1 Then
      appvars.log "Edited the Analytical Insights Sheet cell " & Target.Address & " to " & Target.Value
  Else
       appvars.log "Edited the Analytical Insights Sheet range " & Target.Address
  End If
  
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_BeforeClose(Cancel As Boolean)
   
   Dim item As Worksheet
  Application.ScreenUpdating = False
  Application.ThisWorkbook.Worksheets("START").Visible = xlSheetVisible
  For Each item In Application.ThisWorkbook.Worksheets
       
       If item.name = "USERS" Then item.Range("P2").Value = ""
       
       If item.name = "USERS" Or _
          item.name = "LOGS" Or _
          item.name = "RIGHTS" Or _
          item.name = "Data Entry" Or _
          item.name = "Data Selection and Output" Or _
          item.name = "Analytical Insights" Then
          item.Visible = xlSheetVeryHidden
       End If
       
       
  Next item
  'appvars.log "closed ifrs 16 workbook " & ThisWorkbook.name
  Application.ScreenUpdating = True
   
End Sub

Private Sub Workbook_Open()

  Dim item As Worksheet
  Application.ScreenUpdating = False
  Application.ThisWorkbook.Worksheets("START").Visible = xlSheetVisible
  For Each item In Application.ThisWorkbook.Worksheets
       
       If item.name = "USERS" Then item.Range("P2").Value = ""
       
       If item.name = "USERS" Or _
          item.name = "LOGS" Or _
          item.name = "RIGHTS" Or _
          item.name = "Data Entry" Or _
          item.name = "Data Selection and Output" Or _
          item.name = "Analytical Insights" Then
          item.Visible = xlSheetVeryHidden
       End If
       
       
  Next item
  'appvars.log "closed ifrs 16 workbook " & ThisWorkbook.name
  Application.ScreenUpdating = True

End Sub
Attribute VB_Name = "Validations"
Option Explicit
Sub filters()
    Dim ws As Worksheet
    Dim BU As Object, curr As Object, class As Object
    Dim firstRow As Double, lastrow As Double, r As Double
    Dim minD As Date, maxD As Date, startD As Date, endD As Date
    Dim valStr As String
    Dim cell As Range
    
    If Not validation(False) Then Exit Sub
    
'    Set BU = CreateObject("Scripting.Dictionary")
    Set curr = CreateObject("Scripting.Dictionary")
    Set class = CreateObject("Scripting.Dictionary")
    
    Set ws = ThisWorkbook.Sheets("Data Entry")
    
    firstRow = 8
    lastrow = ThisWorkbook.Names("lastRow").RefersToRange.row - 1
    
    For r = firstRow To lastrow
        startD = CDate(ws.Cells(r, 7))
        endD = CDate(ws.Cells(r, 6))
        
        If minD = 0 Or startD < minD Then minD = startD
        If maxD = 0 Or endD > maxD Then maxD = endD
        
'        If Not BU.exists(ws.Cells(r, 5).Value) Then BU.Add ws.Cells(r, 5).Value, ""
        If Not curr.exists(ws.Cells(r, 13).Value) Then curr.Add ws.Cells(r, 13).Value, ""
        If Not class.exists(ws.Cells(r, 8).Value) Then class.Add ws.Cells(r, 8).Value, ""
    Next r
    
    ThisWorkbook.Sheets("Data Selection and Output").Unprotect
    
'    valStr = BU.keys()(0)
'    For r = 1 To BU.Count - 1
'        valStr = valStr & "," & Application.Clean(BU.keys()(r))
'    Next r
'    setFormat ThisWorkbook.Names("bu").RefersToRange, "values", sort(valStr)
    
    valStr = curr.keys()(0)
    For r = 1 To curr.Count - 1
        valStr = valStr & "," & curr.keys()(r)
    Next r
    setFormat ThisWorkbook.Names("currency").RefersToRange, "values", valStr
    
    valStr = class.keys()(0)
    For r = 1 To class.Count - 1
        valStr = valStr & "," & class.keys()(r)
    Next r
    setFormat ThisWorkbook.Names("assetclass").RefersToRange, "values", valStr
    
    setFormat ThisWorkbook.Names("dateFrom").RefersToRange, "lease dates", minD & "," & maxD
    setFormat ThisWorkbook.Names("dateTo").RefersToRange, "lease dates", minD & "," & maxD
    
    setFormat ThisWorkbook.Names("leaseTo").RefersToRange, "range", firstRow - 7 & "," & lastrow - 7
    setFormat ThisWorkbook.Names("leaseFrom").RefersToRange, "range", firstRow - 7 & "," & lastrow - 7
    
    ThisWorkbook.Sheets("Data Selection and Output").Protect
End Sub
Function sort(ByVal s As String) As String
    Dim v() As String
    Dim i As Double, n As Double
    Dim temp As String
    
    v = Split(s, ",")
    
    For i = 0 To UBound(v)
        For n = i To UBound(v)
            If v(n) < v(i) Then
                temp = v(n)
                v(n) = v(i)
                v(i) = temp
            End If
        Next n
    Next i
    
    sort = v(0)
    For i = 1 To UBound(v)
        sort = sort & "," & v(i)
    Next i
    
End Function
Sub popList()
    Dim ws As Worksheet
    Dim firstRow, lastrow, r As Double
    
    firstRow = 8
    lastrow = ThisWorkbook.Names("lastRow").RefersToRange.row - 1
    
    Set ws = ThisWorkbook.Sheets("Data Entry")
    
    Leases.selectC.Value = False
    
    With Leases.leaseL
        For r = firstRow To lastrow
            .AddItem ws.Cells(r, 2).Value
        Next r
    End With
    
    On Error Resume Next
    Leases.Show
    On Error GoTo 0
End Sub
Sub deleteLease(ByVal delete As Object)
    Dim ws As Worksheet
    Dim firstRow, lastrow, r As Double
    
    firstRow = 8
    lastrow = ThisWorkbook.Names("lastRow").RefersToRange.row - 1
    
    Set ws = ThisWorkbook.Sheets("Data Entry")
    
    ws.Unprotect ""
    
    For r = lastrow To firstRow Step -1
        If delete.exists(CStr(ws.Cells(r, 2).Value)) Then
          ws.Rows(r).EntireRow.delete
          appvars.log "Deleted row " & r
        End If
    Next r
    
    lastrow = ThisWorkbook.Names("lastRow").RefersToRange.row - 1
    
    For r = firstRow To lastrow
        ws.Cells(r, 2) = r - 7
    Next r
    
    ws.Protect ""
End Sub
Sub runValidation()
    appvars.log "Executed the 'Run Validation' module"
    validation (True)
    End
End Sub
Function validation(ByVal showResults As Boolean) As Boolean
    Dim ws As Worksheet
    Dim firstRow, lastrow, r As Double
    
    firstRow = 8
    lastrow = ThisWorkbook.Names("lastRow").RefersToRange.row - 1
    
    Set ws = ThisWorkbook.Sheets("Data Entry")
    
    For r = firstRow To lastrow
        Application.StatusBar = "Validating Lease " & (r - firstRow + 1) & " of " & (lastrow - firstRow + 1)
        Call mandatoryFields(ws, r)
        Call leaseID(ws, r)
        Call dates(ws, r)
        Call other(ws, r)
        Call varDates(ws, r)
    Next r
    
    ws.Unprotect ""
    boarders (ws.Cells(7, 2).CurrentRegion)
    ws.Columns.AutoFit
    ws.Protect ""
    
    If Errors.errorT.Text <> "" Then
        Errors.Show
        validation = False
    Else
        If showResults Then MsgBox prompt:="Validation complete without errors", Title:="Validation"
        validation = True
    End If
    
    Application.StatusBar = False
End Function
Sub varDates(ByVal ws As Worksheet, ByVal r As Double)
    Dim startD As Variant, endD As Variant, pay As Variant
    Dim d1 As Date, d2 As Date
    Dim nPay As Double, n As Double
    Dim col As Double
    
    If Not IsNumeric(ws.Cells(r, 18).Value) Then Exit Sub
    
    nPay = Val(ws.Cells(r, 18).Value)
    col = 19
    
    If nPay > 0 And LCase(ws.Cells(r, 17)) <> "yes" Then log r, "Cannot have variable lease payments with ""Does the lease have varying fixed periodic payments"" = No"
    
    For n = 1 To nPay
        startD = ws.Cells(r, col + 0).Value
        endD = ws.Cells(r, col + 1).Value
        pay = ws.Cells(r, col + 2).Value
        
        If IsDate(startD) Then
            d1 = CDate(startD)
            If Day(d1) <> 1 Then log r, "Payment Start Date (" & n & ") must be from beginning of month"
        Else
            log r, "Payment Start Date (" & n & ") not valid date"
        End If
        
        If IsDate(endD) Then
            d2 = CDate(endD)
            If Day(DateAdd("d", 1, d2)) <> 1 Then log r, "Payment End Date (" & n & ") must be at the end of month"
        Else
            log r, "Payment End Date (" & n & ") not valid date"
        End If
        
        If d1 > d2 Then log r, "Payment Start Date (" & n & ") cannot be after Payment End Date (" & n & ")"
        
        If pay <= 0 Or Not IsNumeric(pay) Then log r, "Payment (" & n & ") must be positive number"
        
        col = col + 3
    Next n
    
End Sub
Sub other(ByVal ws As Worksheet, ByVal r As Double)
    If Not checkPercent(ws.Cells(r, 9).Value) Then log r, "Incremental borrowing rate must be greater than zero and less than 1 (or 100%)"
    
    If ws.Cells(r, 12).Value = "" Then log r, "Minimum Lease Payment must be greater than zero"
    If Not IsNumeric(ws.Cells(r, 12).Value) Then log r, "Minimum Lease Payment must be numeric"
    
    If UCase(ws.Cells(r, 14)) = "FIXED PERCENT" Then
        If ws.Cells(r, 15).Value = "" Then log r, "Escalation Fixed Rate is required"
        If Not checkPercent(ws.Cells(r, 15).Value) Then log r, "Escalation Fixed Rate must be greater than zero and less than 1 (or 100%)"
        
        If IsNumeric(ws.Cells(r, 16).Value) Then
            If CStr(ws.Cells(r, 16).Value) <> Format(Val(ws.Cells(r, 16).Value), "0") Then log r, "Escalation Frequency must be a whole number"
        Else
            log r, "Escalation Frequency must be a numeric value"
        End If
    Else
        If ws.Cells(r, 15).Value <> "" Then log r, "Escalation Fixed Rate is not required"
    End If
    
    If UCase(ws.Cells(r, 17)) = "YES" Then
        If ws.Cells(r, 18).Value = "" Then log r, "Number of Variable Payments must be populated"
        If IsNumeric(ws.Cells(r, 18).Value) Then
            If CStr(ws.Cells(r, 18).Value) <> Format(Val(ws.Cells(r, 18).Value), "0") Then log r, "Number of Variable Payments must be a whole number"
        Else
            log r, "Number of Variable Payments must be a numeric value"
        End If
    Else
    
    End If
End Sub
Sub dates(ByVal ws As Worksheet, ByVal r As Double)
    Dim startD, endD As Variant
    Dim d1 As Date, d2 As Date
    
    startD = ws.Cells(r, 7).Value
    endD = ws.Cells(r, 6).Value
    
    If IsDate(startD) Then
        d1 = CDate(startD)
        If Day(d1) <> 1 Then log r, "Lease Commencement Date must be from beginning of month"
    Else
        log r, "Lease Commencement date not valid date"
    End If
    
    If IsDate(endD) Then
        d2 = CDate(endD)
        If Day(DateAdd("d", 1, d2)) <> 1 Then log r, "Lease End Date must be at the end of month"
    Else
        log r, "Lease End date not valid date"
    End If
    
    If d2 < d1 Then log r, "Lease Commencement date cannot be after Lease End Date"
    
End Sub
Sub mandatoryFields(ByVal ws As Worksheet, ByVal r As Double)
    Dim fields() As String
    Dim i As Double
    
    fields = Split("3,4,5,8", ",")
    
    For i = 0 To UBound(fields)
        If IsEmpty(ws.Cells(r, Val(fields(i)))) Then log r, "Mandatory field """ & ws.Cells(7, Val(fields(i))).Value & """ required"
    Next i
End Sub
Sub leaseID(ByVal ws As Worksheet, ByVal r As Double)
    Dim firstRow, lastrow, i As Double
    
    firstRow = 8
    lastrow = ThisWorkbook.Names("lastRow").RefersToRange.row - 1
    
    For i = firstRow To lastrow
        If i <> r Then
            If ws.Cells(i, 4) = ws.Cells(r, 4) Then log r, "Lease ID """ & ws.Cells(r, 4).Value & """ duplication"
        End If
    Next i
End Sub
Function log(ByVal r As Double, ByVal err As String)
    Dim currErrs, currRow, newErrs As String
    Dim pos As Double
    
    currRow = "Lease " & r - 7
    currErrs = Errors.errorT.Text
    
    pos = InStr(currErrs, currRow)
    
    If pos = 0 Then
        If currErrs <> "" Then newErrs = currErrs & vbNewLine & vbNewLine & currRow & vbNewLine & err Else newErrs = currRow & vbNewLine & err
    Else
        newErrs = Replace(currErrs, currRow, currRow & vbNewLine & err)
    End If
    
    Errors.errorT.Text = newErrs
    
End Function
Sub noPayments()
    Dim firstRow As Double, lastrow As Double
    Dim r As Double, maxN As Double, n As Double
    Dim col As Double, lastCol As Double
    Dim ws As Worksheet
    Set ws = ActiveSheet
    
    col = 19
    firstRow = 8
    lastrow = ThisWorkbook.Names("lastRow").RefersToRange.row - 1
    
    For r = firstRow To lastrow
        n = ws.Cells(r, 18).Value
        If n > maxN Then maxN = n
    Next r
    
    ws.Unprotect ""
    
    For n = 1 To maxN
        ws.Cells(7, col + 0) = "Date From" & vbNewLine & "(" & n & ")"
        ws.Cells(7, col + 1) = "Date To" & vbNewLine & "(" & n & ")"
        ws.Cells(7, col + 2) = "Cash Flow" & vbNewLine & "(" & n & ")"
        
        setFormat ws.Range(Cells(8, col + 0), Cells(lastrow, col + 1)), "date"
        ws.Range(Cells(8, col + 0), Cells(lastrow, col + 2)).Locked = False
        
        col = col + 3
    Next n
    
    lastCol = col - 1
    
    Do While Not IsEmpty(ws.Cells(7, lastCol)): lastCol = lastCol + 1: Loop
    
    ws.Range(Cells(7, col), Cells(lastrow, lastCol)).Clear
    
    If maxN > 0 Then
    
        With ws.Range(Cells(7, 19), Cells(7, col - 1))
            .Font.Bold = True
            .VerticalAlignment = xlCenter
            .HorizontalAlignment = xlCenter
            .Font.ColorIndex = 2
            .Interior.Color = 7884319
            .WrapText = True
        End With
    End If
    
    boarders ws.Cells(7, 2).CurrentRegion
    ws.Protect ""
End Sub
Function checkPercent(ByVal sVal As String)
    Dim v As Double
    
    checkPercent = True
    
    If Right(sVal, 1) = "%" Then v = Val(sVal) Else v = Val(sVal) * 100

    If v < 0 Or v > 100 Then checkPercent = False
End Function
Function boarders(ByVal r As Range)
    r.Borders(xlDiagonalDown).LineStyle = xlNone
    r.Borders(xlDiagonalUp).LineStyle = xlNone
    
    With r.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With r.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With r.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With r.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With r.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With r.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
End Function
Sub addRow()
    Dim ws As Worksheet
    Dim lastrow As Double, lastLease As Double, nRows As Double, n As Double
    Dim lastCol As Double
    
    On Error GoTo numErr
    nRows = Application.InputBox("Number fo rows to insert", "New Rows", Type:=2)
    
    On Error GoTo 0
    If nRows <= 0 Then Exit Sub
    
    Set ws = ThisWorkbook.Sheets("Data Entry")
    
    ws.Unprotect ""
    
    lastCol = ws.Cells(7, 2).End(xlToRight).Column
    
    Application.ScreenUpdating = False
    
    For n = 1 To nRows
        lastrow = ThisWorkbook.Names("lastRow").RefersToRange.row
        lastLease = ws.Cells(lastrow - 1, 2).Value
        
        ws.Rows(lastrow).EntireRow.Insert
        
        ws.Cells(lastrow, 2) = lastLease + 1
        
        boarders ws.Cells(7, 2).CurrentRegion
        ws.Rows(lastrow).NumberFormat = "General"
        
        setFormat ws.Cells(lastrow, 6), "date"
        setFormat ws.Cells(lastrow, 7), "date"
        setFormat ws.Cells(lastrow, 10), "values", "=payFreq"
        setFormat ws.Cells(lastrow, 11), "values", "=payment"
        setFormat ws.Cells(lastrow, 13), "values", "=curr"
        setFormat ws.Cells(lastrow, 14), "values", "=escalation"
        setFormat ws.Cells(lastrow, 17), "values", "=yesNo"
        
        ws.Range(Cells(lastrow, 3), Cells(lastrow, lastCol)).Locked = False
    Next n
    
    ws.Protect ""
    
    
    appvars.log "Added " & nRows & " new row(s)"
    Application.ScreenUpdating = True

    Exit Sub
    
numErr:
    MsgBox "Error. Please enter number"
End Sub
Function setFormat(ByVal r As Range, ByVal form As String, Optional ByVal vals As String)
    Dim temp() As String
    
    Select Case LCase(form)
        Case "date"
            With r.validation
                .delete
                .Add Type:=xlValidateDate, AlertStyle:=xlValidAlertStop, Operator:= _
                xlBetween, Formula1:="1/1/1900", Formula2:="12/31/2500"
                .IgnoreBlank = True
                .InCellDropdown = True
                .InputTitle = ""
                .ErrorTitle = "Date incorrect"
                .InputMessage = "Enter date in format dd/mm/yyyy"
                .ErrorMessage = "Please enter valid date"
                .ShowInput = True
                .ShowError = True
            End With
        Case "values"
            With r.validation
                .delete
                .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
                xlBetween, Formula1:=vals
                .IgnoreBlank = True
                .InCellDropdown = True
                .InputTitle = ""
                .ErrorTitle = "Invalid entry"
                .InputMessage = ""
                .ErrorMessage = "Please select from dropdown list"
                .ShowInput = True
                .ShowError = True
            End With
        Case "range"
            temp = Split(vals, ",")
            With r.validation
                .delete
                .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, Operator:= _
                xlBetween, Formula1:=Val(temp(0)), Formula2:=Val(temp(1))
                .IgnoreBlank = True
                .InCellDropdown = True
                .InputTitle = ""
                .ErrorTitle = "Invalid entry"
                .InputMessage = ""
                .ErrorMessage = "Please enter date between " & temp(0) & " and " & temp(1)
                .ShowInput = True
                .ShowError = True
            End With
        Case "lease dates"
            temp = Split(vals, ",")
            With r.validation
                .delete
                .Add Type:=xlValidateDate, AlertStyle:=xlValidAlertStop, Operator:= _
                xlBetween, Formula1:=CDate(temp(0)), Formula2:=CDate(temp(1))
                .IgnoreBlank = True
                .InCellDropdown = True
                .InputTitle = ""
                .ErrorTitle = "Invalid date"
                .InputMessage = ""
                .ErrorMessage = "Please enter date between " & temp(0) & " and " & temp(1)
                .ShowInput = True
                .ShowError = True
            End With
    End Select
End Function
Sub showPass()
    If Application.UserName = "Khaya Hlatshwayo" Then MsgBox ""
End Sub
Attribute VB_Name = "appvars"
Public currentUserRights As Object
Sub readRights()
     
     Set currentUserRights = CreateObject("Scripting.Dictionary")
     
     Dim appusers As Worksheet
     Set appusers = Application.ThisWorkbook.Worksheets("RIGHTS")
     
     Dim row As Integer
     For row = 2 To appusers.Range("B1048576").End(xlUp).row
        currentUserRights.Add appusers.Range("B" & row).Value, "user"
     Next row
     
End Sub

Sub log(ByVal action As String)
    
    Dim userid As String
    userid = Application.ThisWorkbook.Worksheets("USERS").Range("P2").Value
    
    If Len(Trim(action)) > 0 Then
       Dim logs As Worksheet
       Set logs = Application.ThisWorkbook.Worksheets("LOGS")
       Dim row As Long: row = logs.Range("A1048576").End(xlUp).row + 1
       logs.Range("A" & row).Value = userid
       logs.Range("B" & row).Value = action
       logs.Range("C" & row).Value = Now
    End If
    
End Sub

Sub applyProtection(ByVal flag As Boolean)
 
 With Application.ThisWorkbook
 If flag Then
     .Worksheets("Data Entry").Unprotect "$DeloitteEastAfrica---"
     .Worksheets("Data Selection and Output").Unprotect "$DeloitteEastAfrica---"
     .Worksheets("Analytical Insights").Unprotect "$DeloitteEastAfrica---"
 Else
     .Worksheets("Data Entry").Unprotect "$DeloitteEastAfrica---"
     .Worksheets("Data Selection and Output").Unprotect "$DeloitteEastAfrica---"
     .Worksheets("Analytical Insights").Unprotect "$DeloitteEastAfrica---"
 End If
 End With
 
 
End Sub

Sub run()
  Application.ThisWorkbook.Worksheets("USERS").Visible = xlSheetVisible
End Sub
Attribute VB_Name = "formLogin"
Attribute VB_Base = "0{1CEA8519-4F3E-4586-BB00-E2D373C43A0D}{6F565B41-62FB-4269-9FAE-06E0BA80BC06}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Public mask, truepwd As String
Public previouslen As Integer
Private Sub TextBox1_Change()
      Dim newlen As Integer: newlen = Len(formLogin.TextBox1.Text)
       
       If IsNull(previouslen) Then previouslen = newlen
       
       If newlen = 0 Then
          truepwd = ""
          mask = ""
          previouslen = 0
       ElseIf newlen < previouslen Then
           truepwd = Left(truepwd, Len(truepwd) - 1)
           mask = Left(mask, Len(mask) - 1)
           previouslen = previouslen - 1
           'MsgBox truepwd & " lenth " & previouslen & " " & TextBox1.Text
           Exit Sub
       End If
       
       If Right(formLogin.TextBox1.Text, 1) = "*" Or newlen = 0 Then Exit Sub
       
       truepwd = truepwd & Right(formLogin.TextBox1.Text, 1)
       mask = mask & "*"
       previouslen = Len(mask)
       
       formLogin.TextBox1.Text = mask
       
       'MsgBox truepwd & " lenth " & previouslen & " " & TextBox1.Text
End Sub

Private Sub cmdBTNLogin_Click()
   With formLogin
   
   If Len(Trim(.TextBox2)) = 0 Then
     MsgBox "Please provide your username", vbExclamation, "Null username"
   Exit Sub
   End If
   
   If Len(Trim(.TextBox1)) = 0 Then
     MsgBox "Please provide your password", vbExclamation, "Null Password"
   Exit Sub
   End If
   End With
   
   Dim found As Boolean: found = False
   Dim row As Long
   Dim appusers As Worksheet
   Set appusers = Application.ThisWorkbook.Worksheets("USERS")
   For row = 2 To appusers.Range("A1048576").End(xlUp).row
      
      If appusers.Range("I" & row).Value = formLogin.TextBox2.Text And _
         appusers.Range("J" & row).Value = truepwd Then
         found = True
      End If

   Next row
     
   
   If found Then
   appusers.Range("P2").Value = formLogin.TextBox2.Text
   
   Dim item As Worksheet  'Object
   Application.ScreenUpdating = False
   For Each item In Application.ThisWorkbook.Worksheets
      If item.name = "Data Entry" Or _
          item.name = "Data Selection and Output" Or _
          item.name = "Analytical Insights" Then
      item.Visible = xlSheetVisible
      Else
        
        If item.name = "USERS" Or _
        item.name = "LOGS" Or _
        item.name = "RIGHTS" Then item.Visible = xlSheetVeryHidden
        
      End If
   Next item
   'ActiveSheet.Visible = xlSheetVeryHidden
   Application.ThisWorkbook.Worksheets("Data Entry").Activate
   Application.ScreenUpdating = True
   Unload formLogin
   appvars.log "Logged in succesfully "
   Else
     appvars.log "Login failed "
     MsgBox "Invalid username/password", vbCritical, "User Log In"
   End If
   
End Sub

Private Sub UserForm_Activate()
  Title.BackColor = RGB(277, 37, 37)
  LabelTitleText.BackColor = Title.BackColor
  label_login_username.BackColor = Title.BackColor
  label_login_password.BackColor = Title.BackColor
  cmdBTNLogin.BackColor = Title.BackColor
  formLogin.BackColor = RGB(246, 219, 14)
  imgKCBLogo.BorderColor = Title.BackColor
  Title.Width = formLogin.Width
End Sub
Attribute VB_Name = "formUserRights"
Attribute VB_Base = "0{43AFA258-B299-47C9-AFF4-DB43EDE2DFB8}{100F7620-6600-4CCD-ABD7-534B6366470D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit

Private Sub addAllRightsBTN_Click()
   
     Dim apprights As Worksheet
     Set apprights = Application.ThisWorkbook.Worksheets("RIGHTS")
     
     apprights.Range("B2:B4").Value = apprights.Range("A2:A4").Value
     
     showUpdatedList
     
     ListBoxSelectedRights.ListIndex = 0
     'remRightBTN_Click
     
End Sub

Private Sub addRightBTN_Click()

      Dim apprights As Worksheet
      Set apprights = Application.ThisWorkbook.Worksheets("RIGHTS")
   
      Dim index As Integer
      index = ListBoxUserRights.ListIndex
      
      If index = -1 Then
         MsgBox "Please select one option on the left or use the 'Add All' Button ", vbInformation, "User Rights - No selection"
      Else
        
         Dim focusedright As String
         focusedright = ListBoxUserRights.Value
         
         If Right(focusedright, 4) = "[NA]" Then
           MsgBox "This option is currently defunct", vbExclamation, "User Rights - Defunct option"
           Exit Sub
         End If
         
         Dim lastrow As Long: lastrow = apprights.Range("B1048576").End(xlUp).row
         
         Select Case lastrow
            
            Case 1
                apprights.Range("B2").Value = focusedright
            Case 2
            
                 If apprights.Range("B2").Value = focusedright Then
                    MsgBox "This option has already been added to the right.", vbExclamation, "User Rights - Already choosen"
                    Exit Sub
                 Else
                    apprights.Range("B3").Value = focusedright
                 End If
                
            Case Is > 2
                  
                Dim selectedrights As Variant
                selectedrights = apprights.Range("B2:B" & lastrow)
        
                Dim counter As Long
                For counter = 1 To UBound(selectedrights)
                   If selectedrights(counter, 1) = focusedright Then
                      MsgBox "This option has already been added to the right.", vbExclamation, "User Rights - Already choosen"
                      Exit Sub
                   End If
                Next counter
                         
                apprights.Range("B" & (lastrow + 1)).Value = focusedright
         End Select
         
         showUpdatedList
         
      End If 'no item selected on the left
      
End Sub

Private Sub approveRightsBTN_Click()
    appvars.readRights
   If Not appvars.currentUserRights.exists("Authorizer") Then
        MsgBox "This account does not have rights to use this module. ", vbExclamation, "PERMISSIONS"
        Exit Sub
   End If
   
   Dim user_id As String
   user_id = LabelSelectedUID.Caption 'formUsers.selected_user
  
  If ListBoxSelectedRights.ListCount = 0 Then
     MsgBox "No rights have been selected for approval ", vbExclamation
     Exit Sub
  ElseIf formUsers.users_list(user_id) <> "UnApproved" Then
  
     Dim inelligible As String
     inelligible = "The user is not elligible for approval. " & vbCrLf
     
       Select Case formUsers.users_list(user_id)
       
            Case "Active"
            inelligible = inelligible & " The user's rights have not been reviewed since the last time they were approved. "
            Case "DeActivated"
            inelligible = inelligible & "The user has been deactivated. "
            Case "UnAssigned"
            inelligible = inelligible & "The user has not been assigned any rights yet. "
            
       End Select
                   
     MsgBox inelligible, vbInformation
     Exit Sub
     
  Else
         
         formUsers.users_list(user_id) = "Active"
         
         Dim appusers As Worksheet
         Set appusers = Application.ThisWorkbook.Worksheets("USERS")
         
         Dim row As Long
         For row = 2 To appusers.Range("A1048576").End(xlUp).row
            If appusers.Range("I" & row).Value = user_id Then
              appusers.Range("F" & row).Value = "Active"
            End If
         Next row
         
         MsgBox "The  user rights have been approved ", vbInformation
         
         'formUsers.fetchusers
         
         formUsers.showUpdatedList
         
  End If
  
  
End Sub

Private Sub assignRightsBTN_Click()
                 
      Dim apprights As Worksheet
      Set apprights = Application.ThisWorkbook.Worksheets("RIGHTS")
      
      Dim rightscount As Long: rightscount = apprights.Range("B1048576").End(xlUp).row - 1
      
      If rightscount = 0 Then
         MsgBox "No rights have been selected for assigning", vbExclamation
         Exit Sub
      Else
          
          'fetch the appropriate userid
          Dim user_id As String
          user_id = LabelSelectedUID.Caption 'formUsers.selected_user
          
          'if rights coun is positive
          If rightscount > 0 Then
             
             
            Dim counter, rowindex As Integer
            Dim action_id As Integer
            Dim rights_given As String:   rights_given = ""
            Dim row As Long
            row = apprights.Range("C1048576").End(xlUp).row + 1
             
             
            For counter = 1 To rightscount
                
                 rowindex = counter - 1
                 
                 'action_id = CInt(Split(ListBoxSelectedRights.Column(0, rowindex), ":")(0))
                 
                 '''''''MsgBox action_id
                  
                  
                 apprights.Range("C" & row).Value = user_id
                 apprights.Range("D" & row).Value = ListBoxSelectedRights.Column(0, rowindex)
                 row = row + 1
                  
            Next counter
            
            'formUsers.fetchusers
            formUsers.showUpdatedList
            formUsers.users_list(user_id) = "UnApproved"
            
            MsgBox "The selected user rights have been assigned. ", vbInformation
         
          End If ' >0
      
         
      End If ' 0


End Sub

Private Sub listBoxUserRights_Change()
   
      Dim index As Integer
      index = ListBoxUserRights.ListIndex
      
      If index <> -1 Then
    
      End If

End Sub

Private Sub remAllRightsBTN_Click()

         Dim apprights As Worksheet
         Set apprights = Application.ThisWorkbook.Worksheets("RIGHTS")
         apprights.Range("B2:B23").Clear
         showUpdatedList
End Sub

Private Sub remRightBTN_Click()
      
      Dim apprights As Worksheet
      Set apprights = Application.ThisWorkbook.Worksheets("RIGHTS")
   
      Dim index As Integer
      index = ListBoxSelectedRights.ListIndex
      
      If index = -1 Then
         MsgBox "Please select one option on the right or use the 'Remove All' Button ", vbInformation
      Else
      
          Dim lastrow As Long: lastrow = apprights.Range("B1048576").End(xlUp).row
          
          Select Case lastrow
          
                 Case 1
                    MsgBox "There are no items to clear on the right", vbExclamation
                 Case 2
                    apprights.Range("B2:B2").Clear
                    showUpdatedList
                 Case Is > 2
                 
                 Dim selectedrights As Variant
                 selectedrights = apprights.Range("B2:B" & lastrow)
                 
                 Dim removeright As String: removeright = ListBoxSelectedRights.Value
                 
                 Dim newrightscount As Integer: newrightscount = UBound(selectedrights) - 1
                 
                 Dim newrights As Variant
                 ReDim newrights(1 To newrightscount, 1 To 1)
                 
                 Dim row, counter As Integer
                 counter = 1
                 For row = 1 To UBound(selectedrights)
                 
                     If selectedrights(row, 1) <> removeright And _
                        Right(selectedrights(row, 1), 4) <> "[NA]" And _
                        counter <= newrightscount Then
                        newrights(counter, 1) = selectedrights(row, 1)
                        counter = counter + 1
                     End If
          
                Next row
                
                apprights.Range("B2:B23").Clear
                apprights.Range("B2:B" & (newrightscount + 1)) = newrights
                
                showUpdatedList
                 
          End Select
         
         
      End If
      
End Sub

Private Sub UserForm_Activate()

   'beauty and the beast
  Title.BackColor = RGB(227, 37, 37)
  LabelSelectedUser.BackColor = Title.BackColor
  LabelSelectedUID.BackColor = Title.BackColor
  
  formUserRights.BackColor = RGB(246, 219, 14)
  imgKCBLogo.BorderColor = Title.BackColor
  Title.Width = formUserRights.Width
  
  ListBoxUserRights.BackColor = Title.BackColor
  ListBoxSelectedRights.BackColor = Title.BackColor
  
  FrameMngUserRights.BackColor = formUserRights.BackColor
  
  showUpdatedList
  
End Sub


Private Sub showUpdatedList()

  Application.ScreenUpdating = False
  
  Dim apprights As Worksheet
  Set apprights = Application.ThisWorkbook.Worksheets("RIGHTS")
  
  apprights.Activate
  
  formUserRights.ListBoxUserRights.ColumnCount = 1
  formUserRights.ListBoxUserRights.RowSource = "A2:A" & apprights.Range("A1048576").End(xlUp).row
  
  formUserRights.ListBoxSelectedRights.ColumnCount = 1
  
  If apprights.Range("B1048576").End(xlUp).row > 1 Then
     formUserRights.ListBoxSelectedRights.RowSource = "B2:B" & apprights.Range("B1048576").End(xlUp).row
  End If
    
  Application.ThisWorkbook.Worksheets("START").Activate
  Application.ScreenUpdating = True
  
End Sub
Attribute VB_Name = "formUsers"
Attribute VB_Base = "0{680AB01B-28EF-4552-A1DB-26E99293B707}{D39C866C-2267-4CB1-9E8E-E192F2C5D001}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit

Public selected_user As String
Public users_list As Object
Public rights_list As Object

Private Sub addBTN_Click()
 
  Dim firstname As String
  Dim secondname As String
  Dim surname As String
  Dim department As String
  Dim country As String
  
  firstname = fnameTextBox.Text
  secondname = snameTextBox.Text
  surname = surnameTextBox.Text
  department = deptTextBox.Text
  country = cboxCountry.Value
  
  Dim msg, admsg As String
  
     msg = "Please ensure you have filled in : ["
     admsg = msg
     
     If firstname = "" Then admsg = msg & " First Name "
     If secondname = "" Then secondname = "----" 'admsg = admsg & " Second Name "
     If surname = "" Then admsg = admsg & " Last Name "
     If department = "" Then admsg = admsg & " Departement "
     If country = "" Then admsg = admsg & " Country "
     
     admsg = admsg & "]"
     msg = msg & "]"
     
     If msg <> admsg Then
        MsgBox admsg
        Exit Sub
     Else
     
         firstname = LCase(Split(Trim(firstname), " ")(0))
         secondname = LCase(Split(Trim(secondname), " ")(0))
         surname = LCase(Split(Trim(surname), " ")(0))
         
         Dim appusers As Worksheet
         Set appusers = Application.ThisWorkbook.Worksheets("USERS")
         
         Dim rowindex, counter As Integer
         For counter = 2 To appusers.Range("A1048576").End(xlUp).row
         rowindex = counter - 2
  
         'userid - status  : will help prevent approval when assignment has not been done
         If Not users_list.exists(appusers.Range("I" & counter).Value) Then
          users_list.Add appusers.Range("I" & counter).Value, _
          appusers.Range("F" & counter).Value
         End If
         Next counter
         
        If users_list.exists(firstname & "." & surname) Then
          MsgBox "A user with USERID " & firstname & "." & surname & " already exists! ", vbCritical
          Exit Sub
        Else
        
        Select Case country
          Case "KENYA"
               country = "KE"
               
          Case "TANZANIA"
               country = "TZ"
               
          Case "UGANDA"
               country = "UG"
               
          Case "RWANDA"
               country = "RW"
               
          Case Default
               MsgBox "Please select a valid Country", vbExclamation
               Exit Sub
        End Select
        
        Dim user_id As String:  user_id = firstname & "." & surname
        Dim pwd As String: pwd = firstname & "." & surname
    
        
        Dim row, index As Long
        row = appusers.Range("A1048576").End(xlUp).row + 1
        
        If row = 2 Then
           index = 0
        Else
           index = appusers.Range("A" & (row - 1)).Value + 1
        End If
        
        With appusers
               .Range("A" & row).Value = index
               .Range("B" & row).Value = firstname
               .Range("C" & row).Value = secondname
               .Range("D" & row).Value = surname
               .Range("E" & row).Value = department
               .Range("F" & row).Value = "Unapproved"
               .Range("G" & row).Value = Now
               .Range("H" & row).Value = country
               .Range("I" & row).Value = user_id
               .Range("J" & row).Value = pwd
        End With 'appusers
        
        showUpdatedList
        
        End If 'user already exists
        
     End If 'there are empty input fields
  

End Sub

Private Sub cancelBTN_Click()
       usersListBox.ListIndex = -1
End Sub

Private Sub mngUsersFrame_Click()

End Sub

Private Sub pwdResetBTN_Click()
   
   Dim index As Integer
   index = usersListBox.ListIndex
   
   If index = -1 Then
       MsgBox "Please select one user from the list", vbExclamation
       Exit Sub
   Else
   
        Dim response As Variant
        response = MsgBox("Sure to reset password for user " & selected_user, vbYesNo)
   
        If response = vbNo Then
           MsgBox "The password reset request canceled", vbInformation
           Exit Sub
        Else
        
          
          Dim user_id  As String: user_id = selected_user
          Dim pwd As String: pwd = user_id
          
          Dim appusers As Worksheet
          Set appusers = Application.ThisWorkbook.Worksheets("USERS")
          
          Dim row As Long
          For row = 2 To appusers.Range("A1048576").End(xlUp).row
             If appusers.Range("I" & row).Value = user_id Then
                  appusers.Range("J" & row).Value = pwd
                  Exit Sub
             End If
          Next row
         
        End If
         
   End If
   
End Sub

Private Sub toggleStatusBTN_Click()
    
     Dim index As Integer
     index = usersListBox.ListIndex
     
     If index = -1 Then
       MsgBox "Please select one user from the list", vbExclamation
       Exit Sub
       
     Else
     
         Dim current_status As String: current_status = usersListBox.Column(5, index)
         Dim new_status, msg As String
        
         If current_status = "UnAssigned" Then
            MsgBox "The user has no rights yet!", vbExclamation
            Exit Sub
            
         ElseIf current_status = "UnApproved" Then
            MsgBox "The user's rights have not been approved yet!", vbExclamation
            Exit Sub
            
         ElseIf current_status = "Active" Then
                new_status = "DeActivated"
                msg = "The user has been Deactivated"
                
         ElseIf current_status = "DeActivated" Then
                new_status = "Active"
                msg = "The user has been Activated"
         Else
         
           MsgBox "The user has an unknown status!", vbCritical
           Exit Sub
           
         End If
         
         'this point is reached only if we have a new status
          Dim appusers As Worksheet
          Set appusers = Application.ThisWorkbook.Worksheets("USERS")
  
          Dim toggle_query As String
          Dim user_id  As String: user_id = selected_user
          Dim row As Long
          For row = 2 To appusers.Range("A1048576").End(xlUp).row
             If appusers.Range("I" & row).Value = user_id Then
                  appusers.Range("F" & row).Value = new_status
                  Exit Sub
             End If
          Next row
         
     End If
    
End Sub

Private Sub updateBTN_Click()
   
  Dim firstname As String
  Dim secondname As String
  Dim surname As String
  Dim department As String
  Dim country As String
  
  firstname = fnameTextBox.Text
  secondname = snameTextBox.Text
  surname = surnameTextBox.Text
  department = deptTextBox.Text
  country = cboxCountry.Value
  
  Dim msg, admsg As String
  
     msg = "Please ensure you have filled in : ["
     admsg = msg
     
     If firstname = "" Then admsg = msg & " First Name "
     If secondname = "" Then secondname = "----" 'admsg = admsg & " Second Name "
     If surname = "" Then admsg = admsg & " Last Name "
     If department = "" Then admsg = admsg & " Departement "
     If country = "" Then admsg = admsg & " Country "
     
     admsg = admsg & "]"
     msg = msg & "]"
     
     
     If msg <> admsg Then
        MsgBox admsg
        Exit Sub
     Else
           firstname = LCase(Split(Trim(firstname), " ")(0))
           surname = LCase(Split(Trim(surname), " ")(0))
           
           Dim user_id As String: user_id = firstname & "." & surname
           
           'delete
            
            'if id never changed, unlist from users list to allow addition to happen
            If user_id = selected_user Then users_list.Remove user_id
           
           'trigger add btn
           addBTN_Click
         
     End If
   
   
End Sub

Private Sub userRightsBTN_Click()

     Dim index As Integer
     index = usersListBox.ListIndex
     
     If index = -1 Then
       MsgBox "Please select one user from the list", vbExclamation
       Exit Sub
     Else
       
       Dim apprights As Worksheet
       Set apprights = Application.ThisWorkbook.Worksheets("RIGHTS")
       
       
       Dim name As String
       name = usersListBox.Column(1, index) & _
              " " & usersListBox.Column(2, index) & _
              " " & usersListBox.Column(3, index)
              
       formUserRights.LabelSelectedUID.Caption = selected_user
       'LCase(usersListBox.Column(1, index) & "." & usersListBox.Column(3, index))
       formUserRights.LabelSelectedUser.Caption = name
       
       formUserRights.Show
       
     End If
   
    
End Sub

Private Sub UserForm_Terminate()
End Sub

Private Sub UserForm_Activate()
  
  'fetchusers

  'beauty and the beast
  Title.BackColor = RGB(227, 37, 37)
  LabelTitleText.BackColor = Title.BackColor
  
  formUsers.BackColor = RGB(246, 219, 14)
  imgKCBLogo.BorderColor = Title.BackColor
  Title.Width = formUsers.Width
  usersListBox.BackColor = Title.BackColor
  
  showUpdatedList
  
  cboxCountry.AddItem "KENYA"
  cboxCountry.AddItem "TANZANIA"
  cboxCountry.AddItem "UGANDA"
  cboxCountry.AddItem "RWANDA"
  
  updateBTN.Enabled = False
  
End Sub


Sub showUpdatedList()
  Set users_list = CreateObject("Scripting.Dictionary")
   
  Application.ScreenUpdating = False
  
  Dim appusers As Worksheet
  Set appusers = Application.ThisWorkbook.Worksheets("USERS")
  
  appusers.Activate
  
  formUsers.usersListBox.ColumnCount = 8
  If appusers.Range("B1048576").End(xlUp).row > 1 Then
     formUsers.usersListBox.RowSource = "A2:H" & appusers.Range("B1048576").End(xlUp).row
  End If
  
  Dim rowindex, counter As Integer
  For counter = 1 To usersListBox.ListCount
      rowindex = counter - 1
  
       'userid - status  : will help prevent approval when assignment has not been done
      If Not users_list.exists(LCase(usersListBox.Column(1, rowindex) & "." & usersListBox.Column(3, rowindex))) Then
        users_list.Add LCase(usersListBox.Column(1, rowindex) & "." & usersListBox.Column(3, rowindex)), _
        usersListBox.Column(5, rowindex)
      End If
      
  Next counter
  
  Application.ThisWorkbook.Worksheets("START").Activate
  Application.ScreenUpdating = True
  
End Sub

Sub fetchusers()
End Sub


Private Sub usersListBox_Change()
  
    Dim index As Integer
    index = usersListBox.ListIndex
    
    If index = -1 Then
       selected_user = ""
       fnameTextBox.Text = ""
       snameTextBox.Text = ""
       surnameTextBox.Text = ""
       deptTextBox.Text = ""
       
       updateBTN.Enabled = False
    Else
    
       selected_user = LCase(usersListBox.Column(1, index) & "." & usersListBox.Column(3, index))
       
       fnameTextBox.Text = LCase(usersListBox.Column(1, index))
       snameTextBox.Text = LCase(usersListBox.Column(2, index))
       surnameTextBox.Text = LCase(usersListBox.Column(3, index))
       deptTextBox.Text = usersListBox.Column(4, index)
       'MsgBox selected_user
       
       updateBTN.Enabled = True
    End If

End Sub


Attribute VB_Name = "uiux"
Sub btnStartLogIn()
  formLogin.Show
End Sub

Sub btnUsers()
  appvars.log "Viewed User List"
  formUsers.Show
End Sub

Sub btnLogs()
  
  appvars.log "Fetched user logs"
  
  Dim logs As Worksheet
  Set logs = Application.ThisWorkbook.Worksheets("LOGS")
  
  Application.ScreenUpdating = False
  
  Workbooks.Add
  Dim timestamp As String: timestamp = Replace(Replace(Now, "/", "-"), ":", "-")
  
  With ActiveWorkbook
    .Worksheets("Sheet1").Range("A1:C1048576").Value = logs.Range("A1:C1048576").Value
  .SaveAs Environ$("Userprofile") & "\Documents\DTBK IFRS 16 Logs  " & timestamp
  End With
  
  Application.ScreenUpdating = True
  
End Sub

Sub mhj()
  Application.ThisWorkbook.Worksheets("LOGS").Visible = xlSheetVisible
End Sub



INQUEST-PP=macro
