Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CmdLoad, 2, 1, MSForms, CommandButton"
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' This is a part of the MentorGraphics-MGCPCB OLE Automation server samples.
' Copyright (C) 2003 Mentor Graphics Software, Inc.
' All rights reserved.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Option Explicit


' global declarations
Dim WithEvents pcbApp As MGCPCB.Application
Attribute pcbApp.VB_VarHelpID = -1
Dim WithEvents pcbDoc As MGCPCB.Document
Attribute pcbDoc.VB_VarHelpID = -1

Dim pcbView As MGCPCB.view

Dim dc As MGCPCB.DisplayControl
Dim gbl As MGCPCB.GlobalDisplayControl


Dim currentRow As Integer
Dim bReportIsBeingUpdated As Boolean
Dim bSelectionsAreBeingUpdated As Boolean

' disconnects from MGCPCB.
Private Sub Disconnect()
    Set pcbDoc = Nothing
    Set pcbApp = Nothing ' Disconnect from MGCPCB server
End Sub
' refreshes the BoardOutline values in the Spreadsheet
Public Sub PrintTitleRow()
    On Error Resume Next
    With Range("A1:C1")
        .Merge
        .FormulaR1C1 = "Visibility"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    With Range("D1")
        .FormulaR1C1 = "Description"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    With Range("E1")
        .FormulaR1C1 = "Selectable"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    With Range("F1")
        .FormulaR1C1 = "Red"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    With Range("G1")
        .FormulaR1C1 = "Green"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    With Range("H1")
        .FormulaR1C1 = "Blue"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    
    Range("A1:H1").Interior.Color = RGB(100, 100, 100)
End Sub

Public Sub PrintItem(rowidx As Integer, level As Integer, Description As String, ItemName As String)
    On Error Resume Next
    
    Dim visi As EPcbGraphicsItemState
    Dim sele As EPcbGraphicsItemState
    If ItemName = "" Then
        visi = epcbGraphicsItemStateModifierIgnoreOnOff
        sele = epcbGraphicsItemStateModifierIgnoreOnOff
    Else
        visi = dc.Visible(ItemName)
        sele = dc.Selectable(ItemName)
        Range("M" & rowidx).FormulaR1C1 = "Visible(" & Chr(34) & ItemName & Chr(34) & ")"
        Range("N" & rowidx).FormulaR1C1 = "Selectable(" & Chr(34) & ItemName & Chr(34) & ")"
        Range("M" & rowidx, "N" & rowidx).NumberFormat = ";;;"
    End If
    
    
    If Err.Number <> 0 Then
        PrintRow rowidx, level, Description & " - Error: " & Err.Description, visi, sele, Nothing
        Err.Clear
    Else
        Dim col As Object
        Set col = gbl.Color(ItemName)
        If Err.Number <> 0 Then
            Set col = Nothing
        Else
            Range("O" & rowidx).FormulaR1C1 = "Color(" & Chr(34) & ItemName & Chr(34) & ")"
            Range("O" & rowidx).NumberFormat = ";;;"
        End If
        PrintRow rowidx, level, Description, visi, sele, col
    End If
    
End Sub

Public Sub PrintOption(rowidx As Integer, level As Integer, Description As String, ItemNameVisible As String, ItemNameSelectable As String)
    On Error Resume Next
    
    Dim visi As EPcbGraphicsItemState
    Dim sele As EPcbGraphicsItemState
    If ItemNameVisible = "" Then
        visi = epcbGraphicsItemStateModifierIgnoreOnOff
    Else
        visi = dc.Option(ItemNameVisible)
        Range("M" & rowidx).FormulaR1C1 = "Option(" & Chr(34) & ItemNameVisible & Chr(34) & ")"
        Range("M" & rowidx).NumberFormat = ";;;"
    End If
    
    If ItemNameSelectable = "" Then
        sele = epcbGraphicsItemStateModifierIgnoreOnOff
    Else
        sele = dc.Option(ItemNameSelectable)
        Range("N" & rowidx).FormulaR1C1 = "Option(" & Chr(34) & ItemNameSelectable & Chr(34) & ")"
        Range("N" & rowidx).NumberFormat = ";;;"
    End If
    
    
    If Err.Number <> 0 Then
        PrintRow rowidx, level, Description & " - Error: " & Err.Description, visi, sele, Nothing
        Err.Clear
    Else
        Dim col As Object
        Set col = gbl.Color(ItemNameVisible)
        If Err.Number <> 0 Then
            Set col = Nothing
        Else
            Range("O" & rowidx).FormulaR1C1 = "Color(" & Chr(34) & ItemNameVisible & Chr(34) & ")"
            Range("O" & rowidx).NumberFormat = ";;;"
        End If
        PrintRow rowidx, level, Description, visi, sele, col
    End If
    
End Sub
Public Sub PrintRow(rowidx As Integer, level As Integer, Description As String, visibility As EPcbGraphicsItemState, selectability As EPcbGraphicsItemState, Colors As Object)
    On Error Resume Next
    
    Dim visiChar
    If visibility = epcbGraphicsItemStateOnEnabled Then
        visiChar = "Y"
    ElseIf visibility = epcbGraphicsItemStateOffEnabled Then
        visiChar = "N"
    ElseIf visibility = epcbGraphicsItemStateOnNotEnabled Then
        visiChar = "[Y]"
    ElseIf visibility = epcbGraphicsItemStateOffNotEnabled Then
        visiChar = "[N]"
    End If
    Dim seleChar
    If selectability = epcbGraphicsItemStateOnEnabled Then
        seleChar = "Y"
    ElseIf selectability = epcbGraphicsItemStateOffEnabled Then
        seleChar = "N"
    ElseIf selectability = epcbGraphicsItemStateOnNotEnabled Then
        seleChar = "[Y]"
    ElseIf selectability = epcbGraphicsItemStateOffNotEnabled Then
        seleChar = "[N]"
    End If
    
    If level = 0 Then
        Range("A" & rowidx, "H" & rowidx).Interior.Color = RGB(100, 100, 100)
        Range("A" & rowidx).FormulaR1C1 = visiChar
    ElseIf level = 1 Then
        Range("A" & rowidx, "H" & rowidx).Interior.Color = RGB(170, 170, 170)
        Range("A" & rowidx).FormulaR1C1 = visiChar
    ElseIf level = 2 Then
        Range("B" & rowidx).FormulaR1C1 = visiChar
        Description = "  " & Description
    ElseIf level = 3 Then
        Range("C" & rowidx).FormulaR1C1 = visiChar
        Description = "    " & Description
    Else
        Range("A" & rowidx, "H" & rowidx).Interior.Color = RGB(100, 100, 100)
    End If
    Range("D" & rowidx).value = Description
    
    If level >= 0 And level <= 3 Then
        Range("E" & rowidx).FormulaR1C1 = seleChar
    End If
    
    If Not Colors Is Nothing Then
        Range("F" & rowidx).FormulaR1C1 = Colors.Red
        Range("G" & rowidx).FormulaR1C1 = Colors.Green
        Range("H" & rowidx).FormulaR1C1 = Colors.Blue
    
        Dim rgbCol
    
        rgbCol = RGB(Colors.Red, Colors.Green, Colors.Blue)
        Range("F" & rowidx).Interior.Color = rgbCol
        Range("G" & rowidx).Interior.Color = rgbCol
        Range("H" & rowidx).Interior.Color = rgbCol
    End If
    
End Sub

Public Sub RefreshBoardValues()
    
    ' empty existing sheet contents
    'Application.ActiveSheet.Range("A2:S1000").Clear
    Range("A1:S1000").Clear
    Range("A1:H1000").Borders.LineStyle = XlLineStyle.xlContinuous
    Range("A1:H1000").Borders.Color = RGB(100, 100, 100)

    Range("A1:H1000").Interior.Color = RGB(200, 200, 200)
    Range("D1:D1000").Interior.Color = RGB(210, 210, 210)
    'Range("G2:G2000").Interior.Color = RGB(210, 210, 210)
    
    If pcbDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
 
    On Error Resume Next
    
    ' Lock server (to speed up OLE access)
    If pcbApp.LockServer = True Then
        bReportIsBeingUpdated = True
        
        ' Output header
        PrintTitleRow
        
        
        PrintItem 3, -1, "Layer Display", ""
        currentRow = 4
        
        PrintOption currentRow, 1, "List Route Enabled Layers", "[Virtual].iDC.ListSelectableLayersOnly", ""
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Display Active Layer Only", "Option.ActiveLayerOnly", ""
        currentRow = currentRow + 1
        
        Dim i As Integer
        For i = 1 To pcbDoc.LayerCount
            PrintItem currentRow, 1, "Layer " & i, "LayerControl." & i
            currentRow = currentRow + 1
            PrintItem currentRow, 2, "Traces", "Copper.Trace." & i
            currentRow = currentRow + 1
            PrintItem currentRow, 2, "Pads", "Copper.Pad." & i
            currentRow = currentRow + 1
            PrintItem currentRow, 2, "Planes", "Copper.Plane.Data." & i
            currentRow = currentRow + 1
        Next
        
        currentRow = currentRow + 1
        PrintItem currentRow, -1, "Global View and Interactive Selection", ""
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Planning", "Option.Planning.Enabled", "Option.Planning.Selectable"
        currentRow = currentRow + 1
            
        PrintOption currentRow, 1, "Place", "Option.PlaceObjects", "Option.PlaceObjects.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Top Facement", "Option.PlaceObjects.Parts.Top", "Option.FacementPartsTop.Selectable"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 3, "Group Outlines", "Group.Outline.Top"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 3, "Place Outlines", "Part.PlaceOutline.Top"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Bottom Facement", "Option.PlaceObjects.Parts.Bottom", "Option.FacementPartsBottom.Selectable"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 3, "Group Outlines", "Group.Outline.Bottom"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 3, "Place Outlines", "Part.PlaceOutline.Bottom"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Route Objects", "Option.RouteObjects.Enable", "Option.RouteObjects.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Traces", "Option.Traces.Enable", "Option.Traces.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Vias", "Option.Vias.Enable", "Option.Vias.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Pins", "Option.Pins.Enable", "Option.Pins.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Netlines", "Option.Netlines.Enable", "Option.Netlines.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Planes", "Option.Planes.Enabled", "Option.Planes.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Obstructs", "Option.Obstructs.Enabled", "Option.Obstructs.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "RouteAreas", "Option.RouteAreas.Enabled", "Option.RouteAreas.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "ConductiveShapes", "Option.ConductiveShapes.Enabled", "Option.ConductiveShapes.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Teardrops", "Option.Teardrops.Enable", "Option.Teardrops.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "RF Objects", "Option.RFObjects.Enable", "Option.RFObjects.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Nodes", "Option.RFNodes.Enable", "Option.RFNodes.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Shapes", "Option.RFShapes.Enable", "Option.RFShapes.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Shapes", "Option.RFShapes.Enable", "Option.RFShapes.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Segments", "", "Option.RFSegments.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Wirebond Objects", "Option.WirebondItems.Enable", "Option.WirebondItems.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Top Facement", "Option.WirebondItemsTop.Enable", "Option.WirebondItemsTop.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 3, "Die Pins", "Option.DiePinsTop.Enable", "Option.DiePinsTop.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 3, "Bond Wires", "Option.BondWiresTop.Enable", "Option.BondWiresTop.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Bottom Facement", "Option.WirebondItemsBottom.Enable", "Option.WirebondItemsBottom.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 3, "Die Pins", "Option.DiePinsBottom.Enable", "Option.DiePinsBottom.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 3, "Bond Wires", "Option.BondWiresBottom.Enable", "Option.BondWiresBottom.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Board Objects", "Option.BoardObjects.Enabled", "Option.BoardObjects.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Fiducials", "Option.Fiducials.Enabled", "Option.Fiducials.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Holes", "Option.Holes.Enabled", "Option.Holes.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Board Elements", "Option.BoardElements.Enabled", "Option.BoardElements.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Draw & Fab Objects", "Option.DrawFabObjects.Enable", "Option.DrawFabObjects.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Fabrication Objects", "Option.FabricationObjects", "Option.FabricationObjects.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Copper Balancing", "Option.CopperBalancing.Enable", "Option.CopperBalancing.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Materials", "Option.Materials.Enable", "Option.Materials.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Drill Drawing", "Option.Fabrication.DrillDrawing", "Option.Fabrication.DrillDrawing.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "User Draft Layers", "Option.UserDraftLayers.Enable", "Option.UserDraftLayers.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Panel Objects", "Option.PanelObjects.Enabled", "Option.PanelObjects.Selectable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Sheet Objects", "Option.SheetObjects.Enabled", "Option.SheetObjects.Selectable"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Detail Views", "Fabrication.DetailViews"
        
        bReportIsBeingUpdated = False
        
        ' Unlock server
        pcbApp.UnlockServer
    End If
Exit Sub

OnErrorServerAccess:
    pcbApp.UnlockServer
    MsgBox "Error accessing MGCPCB Server.", , "Automation Demonstration"
End Sub
' refreshes values displayed in Sheet1
Public Sub RefreshValues()
    If pcbDoc Is Nothing Then
     Call RefreshBoardValues
     Exit Sub ' If we are not connected, exit procedure
    End If
    
    Set pcbView = pcbDoc.activeView
    Set dc = pcbView.DisplayControl
    Set gbl = dc.Global
    
    RefreshBoardValues
End Sub

' Main routine
Sub Main()
    Dim myPcbApp As MGCPCB.Application
    Dim myPcbDoc As MGCPCB.Document
    bReportIsBeingUpdated = True
    bSelectionsAreBeingUpdated = False
    Sheets("Edit").Select ' Make Sheet1 visible
    
    Call Connect(myPcbApp, myPcbDoc) ' Connect to MGCPCB (we use the sheet's pcbApp Object variable)
    Set pcbApp = myPcbApp
    Set pcbDoc = myPcbDoc
    
    RefreshValues ' Refresh sheet values
    bReportIsBeingUpdated = False
 
End Sub

Private Sub CmdLoad_Click()
 Call Main
End Sub

' called when a document is opened in MGCPCB
Private Sub pcbApp_OpenDocument()
   Dim retVal As Integer
    ' new document opened
    Set pcbDoc = pcbApp.ActiveDocument
    
    ' get a doc licence
    retVal = licenseDoc(pcbDoc)
    If (retVal <> 1) Then Set pcbDoc = Nothing
    
    ' update sheet
    bReportIsBeingUpdated = True
    RefreshBoardValues
    bReportIsBeingUpdated = False
End Sub

' called when user quits MGCPCB
Private Sub pcbApp_Quit()
    Disconnect
End Sub


Private Sub pcbDoc_OnSave()

End Sub

'Private Sub pcbDoc_OnChange(ByVal eType As MGCPCB.EPcbOnChangeType)
'    ' expedition document has been changed, update the spreadsheet
'    If pcbDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
'
'    ' exit if we are updating the worksheet ourselves
'    If bReportIsBeingUpdated = True Then Exit Sub
'    If bSelectionsAreBeingUpdated = True Then Exit Sub
'
'
'    ' if a net was changed
'    If eType And epcbOnChangeNet Then
'        bSelectionsAreBeingUpdated = True
'        ' find if any nets were changed
'        If pcbApp.LockServer Then
'            RefreshBoardValues
'            pcbApp.UnlockServer
'        End If
'        bSelectionsAreBeingUpdated = False
'    End If
'End Sub

'Private Sub pcbDoc_OnNotify(ByVal eType As MGCPCB.EPcbOnNotifyType)
' If (eType = epcbOnNotifyViewSettingsChanged) Then
'  Call Main
' End If
'End Sub

' called just before the document closes - gives us a chance to cleanup
Private Sub pcbDoc_PreClose()
    Set pcbDoc = Nothing                  ' close document
    bReportIsBeingUpdated = True
    'Application.ActiveSheet.Range("A2:S1000").Clear ' clear sheet contents
    Range("A1:S1000").Clear
    bReportIsBeingUpdated = False
End Sub

Private Sub Worksheet_Activate()
    Call Main
End Sub

Private Sub Worksheet_Change(ByVal Target As Excel.Range)
    ' the worksheet has changed - did the user edit one of the board outline coordinate columns?
    ' Target is a reference to the changed cell.
    If pcbDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
    
    ' exit if we are updating the worksheet ourselves
    If bReportIsBeingUpdated = True Then Exit Sub
    If bSelectionsAreBeingUpdated = True Then Exit Sub
    
    bSelectionsAreBeingUpdated = True
    
    ' handle errors
    On Error Resume Next
    
    Dim changedvalue
    Dim optionname
    If Target.Column < 4 Then
        If Target.FormulaR1C1 <> "" Then
            If Target.FormulaR1C1 = "Y" Then
                changedvalue = epcbGraphicsItemStateOnEnabled
            ElseIf Target.FormulaR1C1 = "N" Then
                changedvalue = epcbGraphicsItemStateOffEnabled
            End If
            If InStr(Range("M" & Target.Row).FormulaR1C1, "Visible") = 1 Then
                optionname = Mid(Range("M" & Target.Row).FormulaR1C1, 10)
                optionname = Left(optionname, Len(optionname) - 2)
                dc.Visible(optionname) = changedvalue
            ElseIf InStr(Range("M" & Target.Row).FormulaR1C1, "Option") = 1 Then
                optionname = Mid(Range("M" & Target.Row).FormulaR1C1, 9)
                optionname = Left(optionname, Len(optionname) - 2)
                dc.Option(optionname) = changedvalue
            End If
        End If
    ElseIf Target.Column = 5 Then
        If Target.FormulaR1C1 <> "" Then
            If Target.FormulaR1C1 = "Y" Then
                changedvalue = epcbGraphicsItemStateOnEnabled
            ElseIf Target.FormulaR1C1 = "N" Then
                changedvalue = epcbGraphicsItemStateOffEnabled
            End If
            If InStr(Range("N" & Target.Row).FormulaR1C1, "Selectable") = 1 Then
                optionname = Mid(Range("N" & Target.Row).FormulaR1C1, 13)
                optionname = Left(optionname, Len(optionname) - 2)
                dc.Selectable(optionname) = changedvalue
            ElseIf InStr(Range("N" & Target.Row).FormulaR1C1, "Option") = 1 Then
                optionname = Mid(Range("N" & Target.Row).FormulaR1C1, 9)
                optionname = Left(optionname, Len(optionname) - 2)
                dc.Option(optionname) = changedvalue
            End If
        End If
    ElseIf (Target.Column >= 6) And (Target.Column <= 8) Then
        If Target.FormulaR1C1 <> "" Then
            If InStr(Range("O" & Target.Row).FormulaR1C1, "Color") = 1 Then
                Dim col As MGCPCB.ColorPattern
                Set col = pcbApp.Utility.NewColorPattern
                
                col.Red = Val(Range("F" & Target.Row).FormulaR1C1)
                col.Green = Val(Range("G" & Target.Row).FormulaR1C1)
                col.Blue = Val(Range("H" & Target.Row).FormulaR1C1)
                
                optionname = Mid(Range("O" & Target.Row).FormulaR1C1, 8)
                optionname = Left(optionname, Len(optionname) - 2)
                gbl.Color(optionname) = col
            End If
        End If
    End If
    
    If Err.Number <> 0 Then
        MsgBox Err.Description
    End If
    
    RefreshBoardValues
 
    bSelectionsAreBeingUpdated = False
End Sub

    
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CmdLoad, 2, 0, MSForms, CommandButton"
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' This is a part of the MentorGraphics-MGCPCB OLE Automation server samples.
' Copyright (C) 2003 Mentor Graphics Software, Inc.
' All rights reserved.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Option Explicit


' global declarations
Dim WithEvents pcbApp As MGCPCB.Application
Attribute pcbApp.VB_VarHelpID = -1
Dim WithEvents pcbDoc As MGCPCB.Document
Attribute pcbDoc.VB_VarHelpID = -1

Dim pcbView As MGCPCB.view

Dim dc As MGCPCB.DisplayControl
Dim gbl As MGCPCB.GlobalDisplayControl



Dim bReportIsBeingUpdated As Boolean
Dim bSelectionsAreBeingUpdated As Boolean

' disconnects from MGCPCB.
Private Sub Disconnect()
    Set pcbDoc = Nothing
    Set pcbApp = Nothing ' Disconnect from MGCPCB server
End Sub
' refreshes the BoardOutline values in the Spreadsheet
Public Sub PrintTitleRow()
    On Error Resume Next
    With Range("A1:G1")
        .Merge
        .FormulaR1C1 = "Top/all"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    With Range("H1:K1")
        .Merge
        .FormulaR1C1 = "Bottom"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    
    With Range("A2:C2")
        .Merge
        .FormulaR1C1 = "Visibility"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    With Range("D2")
        .FormulaR1C1 = "Description"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    With Range("E2")
        .FormulaR1C1 = "Red"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    With Range("F2")
        .FormulaR1C1 = "Green"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    With Range("G2")
        .FormulaR1C1 = "Blue"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    With Range("H2")
        .FormulaR1C1 = "Visibility"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    With Range("I2")
        .FormulaR1C1 = "Red"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    With Range("J2")
        .FormulaR1C1 = "Green"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    With Range("K2")
        .FormulaR1C1 = "Blue"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    
    
    Range("A1:K2").Interior.Color = RGB(100, 100, 100)
End Sub

Public Sub PrintItem(rowidx As Integer, level As Integer, Description As String, ItemName As String)
    On Error Resume Next
    
    Dim visi As EPcbGraphicsItemState
    If ItemName = "" Then
        visi = epcbGraphicsItemStateModifierIgnoreOnOff
    Else
        visi = dc.Visible(ItemName)
        If level = 4 Then
            Range("O" & rowidx).FormulaR1C1 = "Visible(" & Chr(34) & ItemName & Chr(34) & ")"
            Range("O" & rowidx).NumberFormat = ";;;"
        Else
            Range("M" & rowidx).FormulaR1C1 = "Visible(" & Chr(34) & ItemName & Chr(34) & ")"
            Range("M" & rowidx).NumberFormat = ";;;"
        End If
    End If
    
    
    If Err.Number <> 0 Then
        PrintRow rowidx, level, Description & " - Error: " & Err.Description, visi, Nothing
        Err.Clear
    Else
        Dim col As Object
        Set col = gbl.Color(ItemName)
        If Err.Number <> 0 Then
            Set col = Nothing
        Else
            If level = 4 Then
                Range("P" & rowidx).FormulaR1C1 = "Color(" & Chr(34) & ItemName & Chr(34) & ")"
                Range("P" & rowidx).NumberFormat = ";;;"
            Else
                Range("N" & rowidx).FormulaR1C1 = "Color(" & Chr(34) & ItemName & Chr(34) & ")"
                Range("N" & rowidx).NumberFormat = ";;;"
            End If
        End If
        PrintRow rowidx, level, Description, visi, col
    End If
    
End Sub

Public Sub PrintOption(rowidx As Integer, level As Integer, Description As String, ItemNameVisible As String, Optional ItemNameColor As String = "")
    On Error Resume Next
    
    Dim visi As EPcbGraphicsItemState
    If ItemNameVisible = "" Then
        visi = epcbGraphicsItemStateModifierIgnoreOnOff
    Else
        visi = dc.Option(ItemNameVisible)
        If level = 4 Then
            Range("O" & rowidx).FormulaR1C1 = "Option(" & Chr(34) & ItemNameVisible & Chr(34) & ")"
            Range("O" & rowidx).NumberFormat = ";;;"
        Else
            Range("M" & rowidx).FormulaR1C1 = "Option(" & Chr(34) & ItemNameVisible & Chr(34) & ")"
            Range("M" & rowidx).NumberFormat = ";;;"
        End If
    End If
    
    If Err.Number <> 0 Then
        PrintRow rowidx, level, Description & " - Error: " & Err.Description, visi, Nothing
        Err.Clear
    Else
        Dim col As Object
        Dim colorname As String
        If ItemNameColor = "" Then
            colorname = ItemNameVisible
            Set col = gbl.Color(ItemNameVisible)
        Else
            colorname = ItemNameColor
            Set col = gbl.Color(ItemNameColor)
        End If
        If Err.Number <> 0 Then
            Set col = Nothing
        Else
            If level = 4 Then
                Range("P" & rowidx).FormulaR1C1 = "Color(" & Chr(34) & colorname & Chr(34) & ")"
                Range("P" & rowidx).NumberFormat = ";;;"
            Else
                Range("N" & rowidx).FormulaR1C1 = "Color(" & Chr(34) & colorname & Chr(34) & ")"
                Range("N" & rowidx).NumberFormat = ";;;"
            End If
        End If
        PrintRow rowidx, level, Description, visi, col
    End If
    
End Sub
Public Sub PrintRow(rowidx As Integer, level As Integer, Description As String, visibility As EPcbGraphicsItemState, Colors As Object)
    On Error Resume Next
    
    Dim visiChar
    If visibility = epcbGraphicsItemStateOnEnabled Then
        visiChar = "Y"
    ElseIf visibility = epcbGraphicsItemStateOffEnabled Then
        visiChar = "N"
    ElseIf visibility = epcbGraphicsItemStateOnNotEnabled Then
        visiChar = "[Y]"
    ElseIf visibility = epcbGraphicsItemStateOffNotEnabled Then
        visiChar = "[N]"
    Else
        visiChar = ""
    End If
    
    Dim bottom As Boolean
    bottom = False
    If level = 0 Then
        Range("A" & rowidx, "K" & rowidx).Interior.Color = RGB(100, 100, 100)
        Range("A" & rowidx).FormulaR1C1 = visiChar
    ElseIf level = 1 Then
        Range("A" & rowidx, "K" & rowidx).Interior.Color = RGB(170, 170, 170)
        Range("A" & rowidx).FormulaR1C1 = visiChar
    ElseIf level = 2 Then
        Range("B" & rowidx).FormulaR1C1 = visiChar
        Description = "  " & Description
    ElseIf level = 3 Then
        Range("C" & rowidx).FormulaR1C1 = visiChar
        Description = "    " & Description
    ElseIf level = 4 Then
        bottom = True
    Else
        Range("A" & rowidx, "K" & rowidx).Interior.Color = RGB(100, 100, 100)
    End If
    If bottom = False Then
        Range("D" & rowidx).value = Description
    End If
    
    Dim rgbCol
    If bottom = True Then
        Range("H" & rowidx).HorizontalAlignment = xlHAlignCenter
        Range("H" & rowidx).FormulaR1C1 = visiChar
        If Not Colors Is Nothing Then
            Range("I" & rowidx).FormulaR1C1 = Colors.Red
            Range("J" & rowidx).FormulaR1C1 = Colors.Green
            Range("K" & rowidx).FormulaR1C1 = Colors.Blue
            
            rgbCol = RGB(Colors.Red, Colors.Green, Colors.Blue)
            Range("I" & rowidx).Interior.Color = rgbCol
            Range("J" & rowidx).Interior.Color = rgbCol
            Range("K" & rowidx).Interior.Color = rgbCol
        End If
    Else
        If Not Colors Is Nothing Then
            Range("E" & rowidx).FormulaR1C1 = Colors.Red
            Range("F" & rowidx).FormulaR1C1 = Colors.Green
            Range("G" & rowidx).FormulaR1C1 = Colors.Blue
            
            rgbCol = RGB(Colors.Red, Colors.Green, Colors.Blue)
            Range("E" & rowidx).Interior.Color = rgbCol
            Range("F" & rowidx).Interior.Color = rgbCol
            Range("G" & rowidx).Interior.Color = rgbCol
        End If
    End If
    
End Sub

Public Sub RefreshBoardValues()
    
    ' empty existing sheet contents
    'Application.ActiveSheet.Range("A2:S1000").Clear
    Range("A1:S1000").Clear
    Range("A1:K1000").Borders.LineStyle = XlLineStyle.xlContinuous
    Range("A1:K2").Borders.Color = RGB(75, 75, 75)
    Range("A3:K1000").Borders.Color = RGB(100, 100, 100)

    Range("A1:K1000").Interior.Color = RGB(200, 200, 200)
    Range("D1:D1000").Interior.Color = RGB(210, 210, 210)
    
    If pcbDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
 
    On Error Resume Next
    Dim currentRow As Integer
    
    ' Lock server (to speed up OLE access)
    If pcbApp.LockServer = True Then
        bReportIsBeingUpdated = True
        
        ' Output header
        PrintTitleRow
        
        currentRow = 4
        
        PrintOption currentRow, 0, "Planning", "Option.Planning.Enabled"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Route Planning", "Option.RoutePlanning"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Virtual Pins", "Option.VirtualPins.Enabled"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Unpacked Areas", "Option.UnpackedAreas.Enable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "BusPaths", "Option.BusPaths.Enable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "TargetAreas", "Option.TargetAreas.Enable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "RouteTargets", "Option.RouteTargets.Enable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Multiple Designers", "Option.MultipleDesigners"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "TeamPCB Reserved Areas", "General.MultipleDesigners.TeamPCB.ReservedAreas"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 3, "Shadow Mode", "Option.MultipleDesigners.TeamPCB.ShadowMode"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Xtreme Protected Areas", "General.MultipleDesigners.Xtreme.ProtectedAreas"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Sandboxes", "Board.Sandbox"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 0, "Place", "Option.PlaceObjects"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Facement", "Option.PlaceObjects.Parts.Top"
        PrintOption currentRow, 4, "", "Option.PlaceObjects.Parts.Bottom"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Group Outlines", "Group.Outline.Top"
        PrintItem currentRow, 4, "", "Group.Outline.Bottom"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Part Ref Des", "Place.Part.Text.RefDes.Top"
        PrintItem currentRow, 4, "", "Place.Part.Text.RefDes.Bottom"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Place Outlines", "Part.PlaceOutline.Top"
        PrintItem currentRow, 4, "", "Part.PlaceOutline.Bottom"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Selectable Inside Outline", "Option.SelectableInsidePartOutline"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Fill On Hover & Selection", "Option.FillPartOutlineOnSelection"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Place Obstructs", "Board.Obstruct.Part.Top"
        PrintItem currentRow, 4, "", "Board.Obstruct.Part.Bottom"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Test Point Obstructs", "Board.Obstruct.TestPoint.Top"
        PrintItem currentRow, 4, "", "Board.Obstruct.TestPoint.Bottom"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Part Items", "Option.PlaceObjects.PartItems.Top"
        PrintOption currentRow, 4, "", "Option.PlaceObjects.PartItems.Bottom"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Insertion Outlines", "Part.InsertionOutline.Top"
        PrintItem currentRow, 4, "", "Part.InsertionOutline.Bottom"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Part Hazards", "Part.Hazard.Top"
        PrintItem currentRow, 4, "", "Part.Hazard.Bottom"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Pin Numbers", "Option.Pin.Number.Top", "Part.Pin.NumberType.Top"
        PrintOption currentRow, 4, "", "Option.Pin.Number.Bottom", "Part.Pin.NumberType.Bottom"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Pin Types", "Option.Pin.Type.Top", "Part.Pin.NumberType.Top"
        PrintOption currentRow, 4, "", "Option.Pin.Type.Bottom", "Part.Pin.NumberType.Bottom"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Rooms", "Board.Room.Top"
        PrintItem currentRow, 4, "", "Board.Room.Bottom"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 0, "Vias", "Option.Vias.Enable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "All Vias Same Color", "Option.Pad.Via.AllSameColor", "General.Via.AllSameColor"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Via Pads", "Option.ViaPads.Enable"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Via Holes", "Fabrication.Hole.Via"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Via Span Numbers", "General.Via.SpanNumbers"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Internal Skip Via Pads", "", "General.Via.InternalSkipViaPad"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Inactive Blind/Buried Vias", "General.Via.InactiveBlindBuriedPad"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 0, "Pins", "Option.Pins.Enable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Through Pins Same Color", "Option.Pad.Through.AllSameColor", "General.Pin.AllSameColor"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Through Pin Pads", "Option.Pin.Through.Enabled"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Through Pin Holes", "Fabrication.Hole.Pin"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "SMD Pin Pads", "Option.SMDPinPads.Enable"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Test Point Pads - Top", "Copper.Pad.TestPoint.Top"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Test Point Pads - Bottom", "Copper.Pad.TestPoint.Bottom"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 0, "Netlines", "Option.Netlines.Enable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Dynamic Filtering", "Option.Netlines.DynamicFiltering"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Both Ends", "Option.Netlines.DynamicFiltering.BothEnds"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "One End", "Option.Netlines.DynamicFiltering.OneEnd"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Freeze", "Option.Netlines.DynamicFiltering.Freeze"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Netline Types", ""
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Non-Ordered Open", "Netline.NonOrderedOpen"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Ordered Open", "Netline.OrderedOpen"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Ordered All", "Netline.OrderedAll"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Netlines for Marked Comps and Nets", ""
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Between Marked Comps", "Option.Netlines.DisplayBetweenMarkedComponents"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "From Marked Comps", "Option.Netlines.DisplayFromMarkedComponents"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "From Marked Nets", "Option.Netlines.DisplayFromMarkedNets"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Classlines", "Option.Classlines"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Netlines of Classlines", "Option.Classlines.Netlines"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 0, "Planes", "Option.Planes.Enabled"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Data", "Option.Planes.Data.Enable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Data", "Option.Planes.Data.Enable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Fill / Hatch", "Option.Planes.Data.Fill"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Shapes", "Option.Planes.Shape.Enable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Sketches", "Option.Planes.Sketch.Enable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 0, "Route Obstructs", "Option.Obstructs.Enabled"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Pad", "Option.Obstructs.Pad.Enable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Plane", "Option.Obstructs.Plane.Enable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Trace", "Option.Obstructs.Trace.Enable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Trace & Via", "Option.Obstructs.TraceVia.Enable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Via", "Option.Obstructs.Via.Enable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "TuningPattern", "Option.Obstructs.TuningPattern.Enable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Spacers", "Option.Spacers.Enable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Shadow Mode", "Option.Spacers.ShadowModeEnable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 0, "Route Areas", "Option.RouteAreas.Enabled"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Route Border", "Board.RouteBorder"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Fence - Hard", "Board.RouteFence.Hard"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Fence - Soft", "Board.RouteFence.Soft"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Rule Areas", "Option.RuleAreas.Enable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 0, "RF Objects", "Option.RFObjects.Enable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Nodes", "Option.RFNodes.Enable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Shapes", "Option.RFShapes.Enable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 0, "Wirebond Objects", "Option.WirebondItems.Enable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Facement", "Option.WirebondItemsTop.Enable"
        PrintOption currentRow, 4, "", "Option.WirebondItemsBottom.Enable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Die Pins", "Option.DiePinsTop.Enable"
        PrintOption currentRow, 4, "", "Option.DiePinsBottom.Enable"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Board Level", "Fabrication.DiePins.Level0.Top"
        PrintItem currentRow, 4, "", "Fabrication.DiePins.Level0.Bottom"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Stack Level 1", "Fabrication.DiePins.Level1.Top"
        PrintItem currentRow, 4, "", "Fabrication.DiePins.Level1.Bottom"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Stack Level 2", "Fabrication.DiePins.Level2.Top"
        PrintItem currentRow, 4, "", "Fabrication.DiePins.Level2.Bottom"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Stack Level 3", "Fabrication.DiePins.Level3.Top"
        PrintItem currentRow, 4, "", "Fabrication.DiePins.Level3.Bottom"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Stack Level 4", "Fabrication.DiePins.Level4.Top"
        PrintItem currentRow, 4, "", "Fabrication.DiePins.Level4.Bottom"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Bond Wires", "Option.BondWiresTop.Enable"
        PrintOption currentRow, 4, "", "Option.BondWiresBottom.Enable"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Board Level", "Fabrication.BondWires.Level0.Top"
        PrintItem currentRow, 4, "", "Fabrication.BondWires.Level0.Bottom"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Stack Level 1", "Fabrication.BondWires.Level1.Top"
        PrintItem currentRow, 4, "", "Fabrication.BondWires.Level1.Bottom"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Stack Level 2", "Fabrication.BondWires.Level2.Top"
        PrintItem currentRow, 4, "", "Fabrication.BondWires.Level2.Bottom"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Stack Level 3", "Fabrication.BondWires.Level3.Top"
        PrintItem currentRow, 4, "", "Fabrication.BondWires.Level3.Bottom"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Stack Level 4", "Fabrication.BondWires.Level4.Top"
        PrintItem currentRow, 4, "", "Fabrication.BondWires.Level4.Bottom"
        currentRow = currentRow + 1
        
        
        'get_Option: "[VirtualGlobal].iDC.WirebondItems"
        'get_Option: "[VirtualGlobal].iDC.BondWires"

        
        bReportIsBeingUpdated = False
        
        ' Unlock server
        pcbApp.UnlockServer
    End If
Exit Sub

OnErrorServerAccess:
    pcbApp.UnlockServer
    MsgBox "Error accessing MGCPCB Server.", , "Automation Demonstration"
End Sub
' refreshes values displayed in Sheet1
Public Sub RefreshValues()
    If pcbDoc Is Nothing Then
     Call RefreshBoardValues
     Exit Sub ' If we are not connected, exit procedure
    End If
    
    Set pcbView = pcbDoc.activeView
    Set dc = pcbView.DisplayControl
    Set gbl = dc.Global
    
    RefreshBoardValues
End Sub

' Main routine
Sub Main()
    Dim myPcbApp As MGCPCB.Application
    Dim myPcbDoc As MGCPCB.Document
    bReportIsBeingUpdated = True
    bSelectionsAreBeingUpdated = False
    Sheets("Objects").Select ' Make Sheet1 visible
    
    Call Connect(myPcbApp, myPcbDoc) ' Connect to MGCPCB (we use the sheet's pcbApp Object variable)
    Set pcbApp = myPcbApp
    Set pcbDoc = myPcbDoc
    
    RefreshValues ' Refresh sheet values
    bReportIsBeingUpdated = False
 
End Sub

Private Sub CmdLoad_Click()
 Call Main
End Sub

' called when a document is opened in MGCPCB
Private Sub pcbApp_OpenDocument()
   Dim retVal As Integer
    ' new document opened
    Set pcbDoc = pcbApp.ActiveDocument
    
    ' get a doc licence
    retVal = licenseDoc(pcbDoc)
    If (retVal <> 1) Then Set pcbDoc = Nothing
    
    ' update sheet
    bReportIsBeingUpdated = True
    RefreshBoardValues
    bReportIsBeingUpdated = False
End Sub

' called when user quits MGCPCB
Private Sub pcbApp_Quit()
    Disconnect
End Sub

'Private Sub pcbDoc_OnChange(ByVal eType As MGCPCB.EPcbOnChangeType)
'    ' expedition document has been changed, update the spreadsheet
'    If pcbDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
'
'    ' exit if we are updating the worksheet ourselves
'    If bReportIsBeingUpdated = True Then Exit Sub
'    If bSelectionsAreBeingUpdated = True Then Exit Sub
'
'
'    ' if a net was changed
'    If eType And epcbOnChangeNet Then
'        bSelectionsAreBeingUpdated = True
'        ' find if any nets were changed
'        If pcbApp.LockServer Then
'            RefreshBoardValues
'            pcbApp.UnlockServer
'        End If
'        bSelectionsAreBeingUpdated = False
'    End If
'End Sub

'Private Sub pcbDoc_OnNotify(ByVal eType As MGCPCB.EPcbOnNotifyType)
' If (eType = epcbOnNotifyViewSettingsChanged) Then
'  Call Main
' End If
'End Sub

' called just before the document closes - gives us a chance to cleanup
Private Sub pcbDoc_PreClose()
    Set pcbDoc = Nothing                  ' close document
    bReportIsBeingUpdated = True
    'Application.ActiveSheet.Range("A2:S1000").Clear ' clear sheet contents
    Range("A1:S1000").Clear
    bReportIsBeingUpdated = False
End Sub

Private Sub Worksheet_Activate()
    Call Main
End Sub

Private Sub Worksheet_Change(ByVal Target As Excel.Range)
    ' the worksheet has changed - did the user edit one of the board outline coordinate columns?
    ' Target is a reference to the changed cell.
    If pcbDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
    
    ' exit if we are updating the worksheet ourselves
    If bReportIsBeingUpdated = True Then Exit Sub
    If bSelectionsAreBeingUpdated = True Then Exit Sub
    
    bSelectionsAreBeingUpdated = True
    
    ' handle errors
    On Error Resume Next
    
    Dim changedvalue
    Dim optionname
    Dim col As MGCPCB.ColorPattern
    If Target.Column < 4 Then
        If Target.FormulaR1C1 <> "" Then
            If Target.FormulaR1C1 = "Y" Then
                changedvalue = epcbGraphicsItemStateOnEnabled
            ElseIf Target.FormulaR1C1 = "N" Then
                changedvalue = epcbGraphicsItemStateOffEnabled
            Else
                GoTo badvalue
            End If
            If InStr(Range("M" & Target.Row).FormulaR1C1, "Visible") = 1 Then
                optionname = Mid(Range("M" & Target.Row).FormulaR1C1, 10)
                optionname = Left(optionname, Len(optionname) - 2)
                dc.Visible(optionname) = changedvalue
            ElseIf InStr(Range("M" & Target.Row).FormulaR1C1, "Option") = 1 Then
                optionname = Mid(Range("M" & Target.Row).FormulaR1C1, 9)
                optionname = Left(optionname, Len(optionname) - 2)
                dc.Option(optionname) = changedvalue
            End If
        End If
    ElseIf Target.Column = 8 Then
        If Target.FormulaR1C1 <> "" Then
            If Target.FormulaR1C1 = "Y" Then
                changedvalue = epcbGraphicsItemStateOnEnabled
            ElseIf Target.FormulaR1C1 = "N" Then
                changedvalue = epcbGraphicsItemStateOffEnabled
            Else
                GoTo badvalue
            End If
            If InStr(Range("O" & Target.Row).FormulaR1C1, "Visible") = 1 Then
                optionname = Mid(Range("O" & Target.Row).FormulaR1C1, 10)
                optionname = Left(optionname, Len(optionname) - 2)
                dc.Visible(optionname) = changedvalue
            ElseIf InStr(Range("O" & Target.Row).FormulaR1C1, "Option") = 1 Then
                optionname = Mid(Range("O" & Target.Row).FormulaR1C1, 9)
                optionname = Left(optionname, Len(optionname) - 2)
                dc.Option(optionname) = changedvalue
            End If
        End If
    ElseIf (Target.Column >= 5) And (Target.Column <= 7) Then
        If Target.FormulaR1C1 <> "" Then
            If InStr(Range("N" & Target.Row).FormulaR1C1, "Color") = 1 Then
                Set col = pcbApp.Utility.NewColorPattern
                
                col.Red = Val(Range("E" & Target.Row).FormulaR1C1)
                col.Green = Val(Range("F" & Target.Row).FormulaR1C1)
                col.Blue = Val(Range("G" & Target.Row).FormulaR1C1)
                
                optionname = Mid(Range("N" & Target.Row).FormulaR1C1, 8)
                optionname = Left(optionname, Len(optionname) - 2)
                gbl.Color(optionname) = col
            End If
        End If
    ElseIf (Target.Column >= 9) And (Target.Column <= 11) Then
        If Target.FormulaR1C1 <> "" Then
            If InStr(Range("P" & Target.Row).FormulaR1C1, "Color") = 1 Then
                Set col = pcbApp.Utility.NewColorPattern
                
                col.Red = Val(Range("I" & Target.Row).FormulaR1C1)
                col.Green = Val(Range("J" & Target.Row).FormulaR1C1)
                col.Blue = Val(Range("K" & Target.Row).FormulaR1C1)
                
                optionname = Mid(Range("P" & Target.Row).FormulaR1C1, 8)
                optionname = Left(optionname, Len(optionname) - 2)
                gbl.Color(optionname) = col
            End If
        End If
    End If
    
    If Err.Number <> 0 Then
        MsgBox Err.Description
    End If
    
badvalue:
    RefreshBoardValues
 
    bSelectionsAreBeingUpdated = False
End Sub

    

Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CmdLoad, 1, 0, MSForms, CommandButton"
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' This is a part of the MentorGraphics-MGCPCB OLE Automation server samples.
' Copyright (C) 2003 Mentor Graphics Software, Inc.
' All rights reserved.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Option Explicit


' global declarations
Dim WithEvents pcbApp As MGCPCB.Application
Attribute pcbApp.VB_VarHelpID = -1
Dim WithEvents pcbDoc As MGCPCB.Document
Attribute pcbDoc.VB_VarHelpID = -1

Dim pcbView As MGCPCB.view

Dim dc As MGCPCB.DisplayControl
Dim gbl As MGCPCB.GlobalDisplayControl



Dim bReportIsBeingUpdated As Boolean
Dim bSelectionsAreBeingUpdated As Boolean

' disconnects from MGCPCB.
Private Sub Disconnect()
    Set pcbDoc = Nothing
    Set pcbApp = Nothing ' Disconnect from MGCPCB server
End Sub
' refreshes the BoardOutline values in the Spreadsheet
Public Sub PrintTitleRow()
    On Error Resume Next
    
    With Range("A1:C1")
        .Merge
        .FormulaR1C1 = "Visibility"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    With Range("D1")
        .FormulaR1C1 = "Description"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    With Range("E1")
        .FormulaR1C1 = "Red"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    With Range("F1")
        .FormulaR1C1 = "Green"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    With Range("G1")
        .FormulaR1C1 = "Blue"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    
    
    Range("A1:G1").Interior.Color = RGB(100, 100, 100)
End Sub

Public Sub PrintItem(rowidx As Integer, level As Integer, Description As String, ItemName As String)
    On Error Resume Next
    
    Dim visi As EPcbGraphicsItemState
    If ItemName = "" Then
        visi = epcbGraphicsItemStateModifierIgnoreOnOff
    Else
        visi = dc.Visible(ItemName)
        Range("M" & rowidx).FormulaR1C1 = "Visible(" & Chr(34) & ItemName & Chr(34) & ")"
        Range("M" & rowidx).NumberFormat = ";;;"
    End If
    
    
    If Err.Number <> 0 Then
        PrintRow rowidx, level, Description & " - Error: " & Err.Description, visi, Nothing
        Err.Clear
    Else
        Dim col As Object
        Set col = gbl.Color(ItemName)
        If Err.Number <> 0 Then
            Set col = Nothing
        Else
            Range("N" & rowidx).FormulaR1C1 = "Color(" & Chr(34) & ItemName & Chr(34) & ")"
            Range("N" & rowidx).NumberFormat = ";;;"
        End If
        PrintRow rowidx, level, Description, visi, col
    End If
    
End Sub

Public Sub PrintOption(rowidx As Integer, level As Integer, Description As String, ItemNameVisible As String, Optional ItemNameColor As String = "")
    On Error Resume Next
    
    Dim visi As EPcbGraphicsItemState
    If ItemNameVisible = "" Then
        visi = epcbGraphicsItemStateModifierIgnoreOnOff
    Else
        visi = dc.Option(ItemNameVisible)
        Range("M" & rowidx).FormulaR1C1 = "Option(" & Chr(34) & ItemNameVisible & Chr(34) & ")"
        Range("M" & rowidx).NumberFormat = ";;;"
    End If
    
    If Err.Number <> 0 Then
        PrintRow rowidx, level, Description & " - Error: " & Err.Description, visi, Nothing
        Err.Clear
    Else
        Dim col As Object
        Dim colorname As String
        If ItemNameColor = "" Then
            colorname = ItemNameVisible
            Set col = gbl.Color(ItemNameVisible)
        Else
            colorname = ItemNameColor
            Set col = gbl.Color(ItemNameColor)
        End If
        If Err.Number <> 0 Then
            Set col = Nothing
        Else
            Range("N" & rowidx).FormulaR1C1 = "Color(" & Chr(34) & colorname & Chr(34) & ")"
            Range("N" & rowidx).NumberFormat = ";;;"
        End If
        PrintRow rowidx, level, Description, visi, col
    End If
    
End Sub

Public Sub PrintStringOption(rowidx As Integer, level As Integer, Description As String, ItemNameVisible As String, Optional ItemNameColor As String = "")
    On Error Resume Next
    
    Dim visi As String
    If ItemNameVisible = "" Then
        visi = ""
    Else
        visi = dc.StringOption(ItemNameVisible)
        Range("M" & rowidx).FormulaR1C1 = "StringOption(" & Chr(34) & ItemNameVisible & Chr(34) & ")"
        Range("M" & rowidx).NumberFormat = ";;;"
    End If
    
    If Err.Number <> 0 Then
        PrintStringRow rowidx, level, Description & " - Error: " & Err.Description, visi, Nothing
        Err.Clear
    Else
        Dim col As Object
        Dim colorname As String
        If ItemNameColor = "" Then
            colorname = ItemNameVisible
            Set col = gbl.Color(ItemNameVisible)
        Else
            colorname = ItemNameColor
            Set col = gbl.Color(ItemNameColor)
        End If
        If Err.Number <> 0 Then
            Set col = Nothing
        Else
            Range("N" & rowidx).FormulaR1C1 = "Color(" & Chr(34) & colorname & Chr(34) & ")"
            Range("N" & rowidx).NumberFormat = ";;;"
        End If
        PrintStringRow rowidx, level, Description, visi, col
    End If
    
End Sub

Public Sub PrintStringRow(rowidx As Integer, level As Integer, Description As String, value As String, Colors As Object)
    On Error Resume Next
    
    Dim bottom As Boolean
    bottom = False
    If level = 0 Then
        Range("A" & rowidx, "G" & rowidx).Interior.Color = RGB(100, 100, 100)
        Range("A" & rowidx).FormulaR1C1 = value
    ElseIf level = 1 Then
        Range("A" & rowidx, "G" & rowidx).Interior.Color = RGB(170, 170, 170)
        Range("A" & rowidx).FormulaR1C1 = value
    ElseIf level = 2 Then
        Range("B" & rowidx).FormulaR1C1 = value
        Description = "  " & Description
    ElseIf level = 3 Then
        Range("C" & rowidx).FormulaR1C1 = value
        Description = "    " & Description
    ElseIf level = 4 Then
        bottom = True
    Else
        Range("A" & rowidx, "G" & rowidx).Interior.Color = RGB(100, 100, 100)
    End If
    If bottom = False Then
        Range("D" & rowidx).value = Description
    End If
    
    Dim rgbCol
    If bottom = True Then
        Range("H" & rowidx).HorizontalAlignment = xlHAlignCenter
        Range("H" & rowidx).FormulaR1C1 = value
        If Not Colors Is Nothing Then
            Range("I" & rowidx).FormulaR1C1 = Colors.Red
            Range("J" & rowidx).FormulaR1C1 = Colors.Green
            Range("K" & rowidx).FormulaR1C1 = Colors.Blue
            
            rgbCol = RGB(Colors.Red, Colors.Green, Colors.Blue)
            Range("I" & rowidx).Interior.Color = rgbCol
            Range("J" & rowidx).Interior.Color = rgbCol
            Range("K" & rowidx).Interior.Color = rgbCol
        End If
    Else
        If Not Colors Is Nothing Then
            Range("E" & rowidx).FormulaR1C1 = Colors.Red
            Range("F" & rowidx).FormulaR1C1 = Colors.Green
            Range("G" & rowidx).FormulaR1C1 = Colors.Blue
            
            rgbCol = RGB(Colors.Red, Colors.Green, Colors.Blue)
            Range("E" & rowidx).Interior.Color = rgbCol
            Range("F" & rowidx).Interior.Color = rgbCol
            Range("G" & rowidx).Interior.Color = rgbCol
        End If
    End If
End Sub

Public Sub PrintRow(rowidx As Integer, level As Integer, Description As String, visibility As EPcbGraphicsItemState, Colors As Object)
    On Error Resume Next
    
    Dim visiChar As String
    If visibility = epcbGraphicsItemStateOnEnabled Then
        visiChar = "Y"
    ElseIf visibility = epcbGraphicsItemStateOffEnabled Then
        visiChar = "N"
    ElseIf visibility = epcbGraphicsItemStateOnNotEnabled Then
        visiChar = "[Y]"
    ElseIf visibility = epcbGraphicsItemStateOffNotEnabled Then
        visiChar = "[N]"
    Else
        visiChar = ""
    End If
    
    PrintStringRow rowidx, level, Description, visiChar, Colors
    
End Sub

Public Sub RefreshBoardValues()
    
    ' empty existing sheet contents
    'Application.ActiveSheet.Range("A2:S1000").Clear
    Range("A1:S1000").Clear
    Range("A1:G1000").Borders.LineStyle = XlLineStyle.xlContinuous
    Range("A1:G1").Borders.Color = RGB(75, 75, 75)
    Range("A2:G1000").Borders.Color = RGB(100, 100, 100)

    Range("A1:G1000").Interior.Color = RGB(200, 200, 200)
    Range("D1:D1000").Interior.Color = RGB(210, 210, 210)
    
    If pcbDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
 
    On Error Resume Next
    Dim currentRow As Integer
    
    ' Lock server (to speed up OLE access)
    If pcbApp.LockServer = True Then
        bReportIsBeingUpdated = True
        
        ' Output header
        PrintTitleRow
        
        currentRow = 3
        
        PrintOption currentRow, -1, "Graphic Option", ""
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Selection & Highlights", ""
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Selection Area", "General.Color.SelectionShape"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Selected", "", "General.Color.Selection"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Highlighted", "", "General.Color.Highlight"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Dynamic Highlight", "Global.Option.Selection.DynamicHighlight"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Display Solid", "Global.Option.Selection.DisplaySolid"
        currentRow = currentRow + 1
        
        PrintStringOption currentRow, 2, "Dim Mode", "Global.Option.DimMode"
        currentRow = currentRow + 1
        
        PrintStringOption currentRow, 2, "Transparency", "Global.Option.Transparency"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Highlight Entire Net", "Option.SelectionAndHighlights.EntireNetOnSelect"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Highlight Diff Pair Pins", "Option.SelectionAndHighlights.DiffPairPinsOnSelect"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Highlight Electrical Net", "Option.SelectionAndHighlights.ElectricalNetOnSelect"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Netlines for Selected Items", "Option.NetlinesForSelectedItems.Enabled"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Fixed & Locked Patterns", ""
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Fixed", "", "General.Pattern.Fixed"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Semi Fixed", "", "General.Pattern.SemiFixed"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Locked", "", "General.Pattern.Locked"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Display Patterns", "Option.FillPatterns"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Force Outline", "Option.ForceOutline"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Force Solid", "Option.ForceSolid"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Full Screen Cursor", "Global.Option.FullScreenCursor"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Half Screen", "Global.Option.HalfScreenCursor"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "During Move Only", "Global.Option.FullScreenCursorDuringMoveOnly"
        currentRow = currentRow + 1
        
        PrintStringOption currentRow, 2, "Full Screen Cursor Style", "Global.Option.FullScreenCursorStyle"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "General", ""
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Auto Pan", "Global.Option.AutoPan"
        currentRow = currentRow + 1
        
        PrintStringOption currentRow, 2, "Pan Sensitivity", "Global.Option.PanSensitivity"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Background Color", "", "General.Color.Background"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Plane Data Behind Traces", "Global.Option.PlaneDataBehindTraces"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Legible Text Only", "Option.LegibleTextOnly"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Net Names On Traces", "Global.Option.NetNamesOnTraces"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Mirror View", "Option.MirrorView"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "TuningMeter", "Global.Option.TuningMeter"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Active Clearance", "General.ActiveClearance"
        currentRow = currentRow + 1
        
        PrintStringOption currentRow, 2, "Active Clearance Radius", "Global.Option.ActiveClearanceRadius"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 0, "Grids", "Option.Grids.Enabled"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Drawing", "Grid.Draw"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Jumper", "Grid.Jumper"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Place Primary", "Grid.Part.Primary"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Place Secondary", "Grid.Part.Secondary"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Route", "Grid.Route"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Test Point", "Grid.TestPoint"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Via", "Grid.Via"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 0, "Color By Group Outlines", "Global.Option.ColorByGroup.Enable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 0, "Color By Net Or Outlines", "Global.Option.ColorByNetClass.Enable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Netlines", "Global.Option.ColorByNetClass.Netlines"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Traces", "Global.Option.ColorByNetClass.Traces"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Pads", "Global.Option.ColorByNetClass.Pads"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Planes", "Global.Option.ColorByNetClass.Planes"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Vias", "Global.Option.ColorByNetClass.Vias"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Nets", "Global.Option.ColorByNetClass.Nets.Enable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Net Classes", "Global.Option.ColorByNetClass.NetClasses.Enable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Constraint Classes", "Global.Option.ColorByNetClass.ConstraintClasses.Enable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 0, "Object Appearance", ""
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Traces", "", "Copper.Trace.*"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Pads", "", "Copper.Pad.*"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Plane Data", "", "Copper.Plane.Data.*"
        currentRow = currentRow + 1
        
        bReportIsBeingUpdated = False
        
        ' Unlock server
        pcbApp.UnlockServer
    End If
Exit Sub

OnErrorServerAccess:
    pcbApp.UnlockServer
    MsgBox "Error accessing MGCPCB Server.", , "Automation Demonstration"
End Sub
' refreshes values displayed in Sheet1
Public Sub RefreshValues()
    If pcbDoc Is Nothing Then
     Call RefreshBoardValues
     Exit Sub ' If we are not connected, exit procedure
    End If
    
    Set pcbView = pcbDoc.activeView
    Set dc = pcbView.DisplayControl
    Set gbl = dc.Global
    
    RefreshBoardValues
End Sub

' Main routine
Sub Main()
    Dim myPcbApp As MGCPCB.Application
    Dim myPcbDoc As MGCPCB.Document
    bReportIsBeingUpdated = True
    bSelectionsAreBeingUpdated = False
    Sheets("Graphic").Select ' Make Sheet1 visible
    
    Call Connect(myPcbApp, myPcbDoc) ' Connect to MGCPCB (we use the sheet's pcbApp Object variable)
    Set pcbApp = myPcbApp
    Set pcbDoc = myPcbDoc
    
    RefreshValues ' Refresh sheet values
    bReportIsBeingUpdated = False
 
End Sub

Private Sub CmdLoad_Click()
 Call Main
End Sub

' called when a document is opened in MGCPCB
Private Sub pcbApp_OpenDocument()
   Dim retVal As Integer
    ' new document opened
    Set pcbDoc = pcbApp.ActiveDocument
    
    ' get a doc licence
    retVal = licenseDoc(pcbDoc)
    If (retVal <> 1) Then Set pcbDoc = Nothing
    
    ' update sheet
    bReportIsBeingUpdated = True
    RefreshBoardValues
    bReportIsBeingUpdated = False
End Sub

' called when user quits MGCPCB
Private Sub pcbApp_Quit()
    Disconnect
End Sub

'Private Sub pcbDoc_OnChange(ByVal eType As MGCPCB.EPcbOnChangeType)
'    ' expedition document has been changed, update the spreadsheet
'    If pcbDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
'
'    ' exit if we are updating the worksheet ourselves
'    If bReportIsBeingUpdated = True Then Exit Sub
'    If bSelectionsAreBeingUpdated = True Then Exit Sub
'
'
'    ' if a net was changed
'    If eType And epcbOnChangeNet Then
'        bSelectionsAreBeingUpdated = True
'        ' find if any nets were changed
'        If pcbApp.LockServer Then
'            RefreshBoardValues
'            pcbApp.UnlockServer
'        End If
'        bSelectionsAreBeingUpdated = False
'    End If
'End Sub

'Private Sub pcbDoc_OnNotify(ByVal eType As MGCPCB.EPcbOnNotifyType)
' If (eType = epcbOnNotifyViewSettingsChanged) Then
'  Call Main
' End If
'End Sub

' called just before the document closes - gives us a chance to cleanup
Private Sub pcbDoc_PreClose()
    Set pcbDoc = Nothing                  ' close document
    bReportIsBeingUpdated = True
    'Application.ActiveSheet.Range("A2:S1000").Clear ' clear sheet contents
    Range("A1:S1000").Clear
    bReportIsBeingUpdated = False
End Sub

Private Sub Worksheet_Activate()
    Call Main
End Sub

Private Sub Worksheet_Change(ByVal Target As Excel.Range)
    ' the worksheet has changed - did the user edit one of the board outline coordinate columns?
    ' Target is a reference to the changed cell.
    If pcbDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
    
    ' exit if we are updating the worksheet ourselves
    If bReportIsBeingUpdated = True Then Exit Sub
    If bSelectionsAreBeingUpdated = True Then Exit Sub
    
    bSelectionsAreBeingUpdated = True
    
    ' handle errors
    On Error Resume Next
    
    Dim changedvalue
    Dim optionname
    Dim col As MGCPCB.ColorPattern
    If Target.Column < 4 Then
        If Target.FormulaR1C1 <> "" Then
            If Target.FormulaR1C1 = "Y" Then
                changedvalue = epcbGraphicsItemStateOnEnabled
            ElseIf Target.FormulaR1C1 = "N" Then
                changedvalue = epcbGraphicsItemStateOffEnabled
            Else
                changedvalue = Target.FormulaR1C1
            End If
            If InStr(Range("M" & Target.Row).FormulaR1C1, "Visible") = 1 Then
                optionname = Mid(Range("M" & Target.Row).FormulaR1C1, 10)
                optionname = Left(optionname, Len(optionname) - 2)
                dc.Visible(optionname) = changedvalue
            ElseIf InStr(Range("M" & Target.Row).FormulaR1C1, "Option") = 1 Then
                optionname = Mid(Range("M" & Target.Row).FormulaR1C1, 9)
                optionname = Left(optionname, Len(optionname) - 2)
                dc.Option(optionname) = changedvalue
            ElseIf InStr(Range("M" & Target.Row).FormulaR1C1, "StringOption") = 1 Then
                optionname = Mid(Range("M" & Target.Row).FormulaR1C1, 15)
                optionname = Left(optionname, Len(optionname) - 2)
                dc.StringOption(optionname) = changedvalue
            End If
        End If
    ElseIf (Target.Column >= 5) And (Target.Column <= 7) Then
        If Target.FormulaR1C1 <> "" Then
            If InStr(Range("N" & Target.Row).FormulaR1C1, "Color") = 1 Then
                Set col = pcbApp.Utility.NewColorPattern
                
                col.Red = Val(Range("E" & Target.Row).FormulaR1C1)
                col.Green = Val(Range("F" & Target.Row).FormulaR1C1)
                col.Blue = Val(Range("G" & Target.Row).FormulaR1C1)
                
                optionname = Mid(Range("N" & Target.Row).FormulaR1C1, 8)
                optionname = Left(optionname, Len(optionname) - 2)
                gbl.Color(optionname) = col
            End If
        End If
    End If
    
    If Err.Number <> 0 Then
        MsgBox Err.Description
    End If
    
badvalue:
 
    RefreshBoardValues
 
    bSelectionsAreBeingUpdated = False
End Sub

    


Private Sub Worksheet_Deactivate()

End Sub
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CmdLoad, 1, 0, MSForms, CommandButton"
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' This is a part of the MentorGraphics-MGCPCB OLE Automation server samples.
' Copyright (C) 2003 Mentor Graphics Software, Inc.
' All rights reserved.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Option Explicit


' global declarations
Dim WithEvents pcbApp As MGCPCB.Application
Attribute pcbApp.VB_VarHelpID = -1
Dim WithEvents pcbDoc As MGCPCB.Document
Attribute pcbDoc.VB_VarHelpID = -1

Dim pcbView As MGCPCB.view

Dim dc As MGCPCB.DisplayControl
Dim gbl As MGCPCB.GlobalDisplayControl



Dim bReportIsBeingUpdated As Boolean
Dim bSelectionsAreBeingUpdated As Boolean

' disconnects from MGCPCB.
Private Sub Disconnect()
    Set pcbDoc = Nothing
    Set pcbApp = Nothing ' Disconnect from MGCPCB server
End Sub
' refreshes the BoardOutline values in the Spreadsheet
Public Sub PrintTitleRow()
    On Error Resume Next
    With Range("A1:G1")
        .Merge
        .FormulaR1C1 = "Top/all"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    With Range("H1:K1")
        .Merge
        .FormulaR1C1 = "Bottom"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    
    With Range("A2:C2")
        .Merge
        .FormulaR1C1 = "Visibility"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    With Range("D2")
        .FormulaR1C1 = "Description"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    With Range("E2")
        .FormulaR1C1 = "Red"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    With Range("F2")
        .FormulaR1C1 = "Green"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    With Range("G2")
        .FormulaR1C1 = "Blue"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    With Range("H2")
        .FormulaR1C1 = "Visibility"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    With Range("I2")
        .FormulaR1C1 = "Red"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    With Range("J2")
        .FormulaR1C1 = "Green"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    With Range("K2")
        .FormulaR1C1 = "Blue"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    
    
    Range("A1:K2").Interior.Color = RGB(100, 100, 100)
End Sub

Public Sub PrintItem(rowidx As Integer, level As Integer, Description As String, ItemName As String)
    On Error Resume Next
    
    Dim visi As EPcbGraphicsItemState
    If ItemName = "" Then
        visi = epcbGraphicsItemStateModifierIgnoreOnOff
    Else
        visi = dc.Visible(ItemName)
        If level = 4 Then
            Range("O" & rowidx).FormulaR1C1 = "Visible(" & Chr(34) & ItemName & Chr(34) & ")"
            Range("O" & rowidx).NumberFormat = ";;;"
        Else
            Range("M" & rowidx).FormulaR1C1 = "Visible(" & Chr(34) & ItemName & Chr(34) & ")"
            Range("M" & rowidx).NumberFormat = ";;;"
        End If
    End If
    
    
    If Err.Number <> 0 Then
        PrintRow rowidx, level, Description & " - Error: " & Err.Description, visi, Nothing
        Err.Clear
    Else
        Dim col As Object
        Set col = gbl.Color(ItemName)
        If Err.Number <> 0 Then
            Set col = Nothing
        Else
            If level = 4 Then
                Range("P" & rowidx).FormulaR1C1 = "Color(" & Chr(34) & ItemName & Chr(34) & ")"
                Range("P" & rowidx).NumberFormat = ";;;"
            Else
                Range("N" & rowidx).FormulaR1C1 = "Color(" & Chr(34) & ItemName & Chr(34) & ")"
                Range("N" & rowidx).NumberFormat = ";;;"
            End If
        End If
        PrintRow rowidx, level, Description, visi, col
    End If
    
End Sub

Public Sub PrintOption(rowidx As Integer, level As Integer, Description As String, ItemNameVisible As String, Optional ItemNameColor As String = "")
    On Error Resume Next
    
    Dim visi As EPcbGraphicsItemState
    If ItemNameVisible = "" Then
        visi = epcbGraphicsItemStateModifierIgnoreOnOff
    Else
        visi = dc.Option(ItemNameVisible)
        If level = 4 Then
            Range("O" & rowidx).FormulaR1C1 = "Option(" & Chr(34) & ItemNameVisible & Chr(34) & ")"
            Range("O" & rowidx).NumberFormat = ";;;"
        Else
            Range("M" & rowidx).FormulaR1C1 = "Option(" & Chr(34) & ItemNameVisible & Chr(34) & ")"
            Range("M" & rowidx).NumberFormat = ";;;"
        End If
    End If
    
    If Err.Number <> 0 Then
        PrintRow rowidx, level, Description & " - Error: " & Err.Description, visi, Nothing
        Err.Clear
    Else
        Dim col As Object
        Dim colorname As String
        If ItemNameColor = "" Then
            colorname = ItemNameVisible
            Set col = gbl.Color(ItemNameVisible)
        Else
            colorname = ItemNameColor
            Set col = gbl.Color(ItemNameColor)
        End If
        If Err.Number <> 0 Then
            Set col = Nothing
        Else
            If level = 4 Then
                Range("P" & rowidx).FormulaR1C1 = "Color(" & Chr(34) & colorname & Chr(34) & ")"
                Range("P" & rowidx).NumberFormat = ";;;"
            Else
                Range("N" & rowidx).FormulaR1C1 = "Color(" & Chr(34) & colorname & Chr(34) & ")"
                Range("N" & rowidx).NumberFormat = ";;;"
            End If
        End If
        PrintRow rowidx, level, Description, visi, col
    End If
    
End Sub
Public Sub PrintRow(rowidx As Integer, level As Integer, Description As String, visibility As EPcbGraphicsItemState, Colors As Object)
    On Error Resume Next
    
    Dim visiChar
    If visibility = epcbGraphicsItemStateOnEnabled Then
        visiChar = "Y"
    ElseIf visibility = epcbGraphicsItemStateOffEnabled Then
        visiChar = "N"
    ElseIf visibility = epcbGraphicsItemStateOnNotEnabled Then
        visiChar = "[Y]"
    ElseIf visibility = epcbGraphicsItemStateOffNotEnabled Then
        visiChar = "[N]"
    Else
        visiChar = ""
    End If
    
    Dim bottom As Boolean
    bottom = False
    If level = 0 Then
        Range("A" & rowidx, "K" & rowidx).Interior.Color = RGB(100, 100, 100)
        Range("A" & rowidx).FormulaR1C1 = visiChar
    ElseIf level = 1 Then
        Range("A" & rowidx, "K" & rowidx).Interior.Color = RGB(170, 170, 170)
        Range("A" & rowidx).FormulaR1C1 = visiChar
    ElseIf level = 2 Then
        Range("B" & rowidx).FormulaR1C1 = visiChar
        Description = "  " & Description
    ElseIf level = 3 Then
        Range("C" & rowidx).FormulaR1C1 = visiChar
        Description = "    " & Description
    ElseIf level = 4 Then
        bottom = True
    Else
        Range("A" & rowidx, "K" & rowidx).Interior.Color = RGB(100, 100, 100)
    End If
    If bottom = False Then
        Range("D" & rowidx).value = Description
    End If
    
    Dim rgbCol
    If bottom = True Then
        Range("H" & rowidx).HorizontalAlignment = xlHAlignCenter
        Range("H" & rowidx).FormulaR1C1 = visiChar
        If Not Colors Is Nothing Then
            Range("I" & rowidx).FormulaR1C1 = Colors.Red
            Range("J" & rowidx).FormulaR1C1 = Colors.Green
            Range("K" & rowidx).FormulaR1C1 = Colors.Blue
            
            rgbCol = RGB(Colors.Red, Colors.Green, Colors.Blue)
            Range("I" & rowidx).Interior.Color = rgbCol
            Range("J" & rowidx).Interior.Color = rgbCol
            Range("K" & rowidx).Interior.Color = rgbCol
        End If
    Else
        If Not Colors Is Nothing Then
            Range("E" & rowidx).FormulaR1C1 = Colors.Red
            Range("F" & rowidx).FormulaR1C1 = Colors.Green
            Range("G" & rowidx).FormulaR1C1 = Colors.Blue
            
            rgbCol = RGB(Colors.Red, Colors.Green, Colors.Blue)
            Range("E" & rowidx).Interior.Color = rgbCol
            Range("F" & rowidx).Interior.Color = rgbCol
            Range("G" & rowidx).Interior.Color = rgbCol
        End If
    End If
    
End Sub

Public Sub RefreshBoardValues()
    
    ' empty existing sheet contents
    'Application.ActiveSheet.Range("A2:S1000").Clear
    Range("A1:S1000").Clear
    Range("A1:K1000").Borders.LineStyle = XlLineStyle.xlContinuous
    Range("A1:K2").Borders.Color = RGB(75, 75, 75)
    Range("A3:K1000").Borders.Color = RGB(100, 100, 100)

    Range("A1:K1000").Interior.Color = RGB(200, 200, 200)
    Range("D1:D1000").Interior.Color = RGB(210, 210, 210)
    
    If pcbDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
 
    On Error Resume Next
    Dim currentRow As Integer
    
    ' Lock server (to speed up OLE access)
    If pcbApp.LockServer = True Then
        bReportIsBeingUpdated = True
        
        ' Output header
        PrintTitleRow
        
        currentRow = 4
        
        PrintOption currentRow, 0, "Board Objects", "Option.BoardObjects.Enabled"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Fiducials", "Option.Fiducials.Enabled"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Top", "Copper.Pad.Fiducial.Top"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Bottom", "Copper.Pad.Fiducial.Bottom"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Mounting Holes", "Option.Holes.Enabled"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Pads", "Option.MountingHolePads.Enabled"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Holes", "Fabrication.Hole.Mounting"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Board Elements", "Option.BoardElements.Enabled"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Board Outline", "Board.BoardOutline"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Manufacturing Outline", "Board.ManufacturingOutline"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Fixture Outline", "Board.FixtureOutline"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Cavity", "Board.Cavity"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Contours", "Fabrication.Hole.Contour"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 3, "Span Numbers", "Fabrication.Hole.Contour.SpanNumbers"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "DRC Window", "Board.DRCWindow"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "NC Drill Origin", "Board.Origin.NCDrill"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Redline Layer", "Fabrication.RedlineLayer"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Text Items", "Option.TextItems.Enabled"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Pin Properties", "Option.TextItems.PinProperties.Enabled"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Cell Properties", "Option.TextItems.CellProperties.Enabled"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 0, "Fabrication Objects", "Option.FabricationObjects"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Facement", "Option.FabricationObjects.Top"
        PrintOption currentRow, 4, "", "Option.FabricationObjects.Bottom"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Solder Mask", "Fabrication.SolderMask.Top"
        PrintItem currentRow, 4, "", "Fabrication.SolderMask.Bottom"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Solder Paste", "Fabrication.SolderPaste.Top"
        PrintItem currentRow, 4, "", "Fabrication.SolderPaste.Bottom"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Assembly Items", "Option.Fabrication.AssemblyItems.Top"
        PrintOption currentRow, 4, "", "Option.Fabrication.AssemblyItems.Bottom"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Outlines", "Fabrication.Assembly.Part.Outline.Top"
        PrintItem currentRow, 4, "", "Fabrication.Assembly.Part.Outline.Bottom"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Part Numbers", "Fabrication.Assembly.Part.Text.PartNumber.Top"
        PrintItem currentRow, 4, "", "Fabrication.Assembly.Part.Text.PartNumber.Bottom"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Ref Des", "Fabrication.Assembly.Part.Text.RefDes.Top"
        PrintItem currentRow, 4, "", "Fabrication.Assembly.Part.Text.RefDes.Bottom"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Silkscreen Items", "Option.Fabrication.SilkscreenItems.Top"
        PrintOption currentRow, 4, "", "Option.Fabrication.SilkscreenItems.Bottom"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Outlines", "Fabrication.Silkscreen.Part.Outline.Top"
        PrintItem currentRow, 4, "", "Fabrication.Silkscreen.Part.Outline.Bottom"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Part Numbers", "Fabrication.Silkscreen.Part.Text.PartNumber.Top"
        PrintItem currentRow, 4, "", "Fabrication.Silkscreen.Part.Text.PartNumber.Bottom"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Ref Des", "Fabrication.Silkscreen.Part.Text.RefDes.Top"
        PrintItem currentRow, 4, "", "Fabrication.Silkscreen.Part.Text.RefDes.Bottom"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Generated", "Fabrication.Silkscreen.Generated.Top"
        PrintItem currentRow, 4, "", "Fabrication.Silkscreen.Generated.Bottom"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Cell Items", "Option.Fabrication.CellItems.Top"
        PrintOption currentRow, 4, "", "Option.Fabrication.CellItems.Bottom"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Glue Spots", "Part.Cell.GlueSpot.Top"
        PrintItem currentRow, 4, "", "Part.Cell.GlueSpot.Bottom"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Origins", "Part.Cell.Origin.Top"
        PrintItem currentRow, 4, "", "Part.Cell.Origin.Bottom"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Test Point Items", "Option.Fabrication.TestPointItems.Top"
        PrintOption currentRow, 4, "", "Option.Fabrication.TestPointItems.Bottom"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Assy Ref Des", "Fabrication.Assembly.TestPoint.Text.RefDes.Top"
        PrintItem currentRow, 4, "", "Fabrication.Assembly.TestPoint.Text.RefDes.Bottom"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Silk Ref Des", "Fabrication.Silkscreen.TestPoint.Text.RefDes.Top"
        PrintItem currentRow, 4, "", "Fabrication.Silkscreen.TestPoint.Text.RefDes.Bottom"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 2, "Probe Graphics", "Fabrication.Silkscreen.TestPoint.Probe.Top"
        PrintItem currentRow, 4, "", "Fabrication.Silkscreen.TestPoint.Probe.Bottom"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 0, "Copper Balancing", "Option.CopperBalancing.Enable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Data", "Option.CopperBalancing.Data"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Shapes", "Option.CopperBalancing.Shapes"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 0, "Panel Objects", "Option.PanelObjects.Enabled"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Panel Origin", "Panel.Origin"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Panel Board Contents", "Option.PanelObjects.BoardContents.Enabled"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Panel Border", "Panel.Border"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Panel Holes", "Panel.Hole"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Panel Obstruct", "Board.Obstruct"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Panel Outline", "Panel.Outline"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Panel Documentation", "Panel.Documentation"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Panel ScoringLine", "Panel.ScoringLine"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Panel ShearingLine", "Panel.ShearingLine"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 0, "Sheet Objects", "Option.SheetObjects.Enabled"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Sheet Origin", "Sheet.SheetOrigin"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Sheet Outline", "Sheet.SheetOutline"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 0, "Materials", "Option.Materials.Enable"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Material Mask", "Option.Material.Mask.Enable", "Fabrication.Material.Mask.*"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Material Overglaze", "Option.Material.Overglaze.Enable", "Fabrication.Material.Overglaze.*"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 0, "Drill Drawing", "Option.Fabrication.DrillDrawing"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Drill Drawing - Through", "Fabrication.DrillDrawingThrough"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 0, "User Draft Layers", "Option.UserDraftLayers.Enable"
        currentRow = currentRow + 1
        
        Dim usrlayer
        Dim usrlayers
        Set usrlayers = pcbDoc.UserLayers
        For Each usrlayer In usrlayers
            PrintItem currentRow, 1, usrlayer.name, "User." & usrlayer.name
            currentRow = currentRow + 1
        Next
        
        PrintItem currentRow, 0, "Detail Views", "Fabrication.DetailViews"
        currentRow = currentRow + 1
        
        bReportIsBeingUpdated = False
        
        ' Unlock server
        pcbApp.UnlockServer
    End If
Exit Sub

OnErrorServerAccess:
    pcbApp.UnlockServer
    MsgBox "Error accessing MGCPCB Server.", , "Automation Demonstration"
End Sub
' refreshes values displayed in Sheet1
Public Sub RefreshValues()
    If pcbDoc Is Nothing Then
     Call RefreshBoardValues
     Exit Sub ' If we are not connected, exit procedure
    End If
    
    Set pcbView = pcbDoc.activeView
    Set dc = pcbView.DisplayControl
    Set gbl = dc.Global
    
    RefreshBoardValues
End Sub

' Main routine
Sub Main()
    Dim myPcbApp As MGCPCB.Application
    Dim myPcbDoc As MGCPCB.Document
    bReportIsBeingUpdated = True
    bSelectionsAreBeingUpdated = False
    Sheets("Fab").Select ' Make Sheet1 visible
    
    Call Connect(myPcbApp, myPcbDoc) ' Connect to MGCPCB (we use the sheet's pcbApp Object variable)
    Set pcbApp = myPcbApp
    Set pcbDoc = myPcbDoc
    
    RefreshValues ' Refresh sheet values
    bReportIsBeingUpdated = False
 
End Sub

Private Sub CmdLoad_Click()
 Call Main
End Sub

' called when a document is opened in MGCPCB
Private Sub pcbApp_OpenDocument()
   Dim retVal As Integer
    ' new document opened
    Set pcbDoc = pcbApp.ActiveDocument
    
    ' get a doc licence
    retVal = licenseDoc(pcbDoc)
    If (retVal <> 1) Then Set pcbDoc = Nothing
    
    ' update sheet
    bReportIsBeingUpdated = True
    RefreshBoardValues
    bReportIsBeingUpdated = False
End Sub

' called when user quits MGCPCB
Private Sub pcbApp_Quit()
    Disconnect
End Sub

'Private Sub pcbDoc_OnChange(ByVal eType As MGCPCB.EPcbOnChangeType)
'    ' expedition document has been changed, update the spreadsheet
'    If pcbDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
'
'    ' exit if we are updating the worksheet ourselves
'    If bReportIsBeingUpdated = True Then Exit Sub
'    If bSelectionsAreBeingUpdated = True Then Exit Sub
'
'
'    ' if a net was changed
'    If eType And epcbOnChangeNet Then
'        bSelectionsAreBeingUpdated = True
'        ' find if any nets were changed
'        If pcbApp.LockServer Then
'            RefreshBoardValues
'            pcbApp.UnlockServer
'        End If
'        bSelectionsAreBeingUpdated = False
'    End If
'End Sub

'Private Sub pcbDoc_OnNotify(ByVal eType As MGCPCB.EPcbOnNotifyType)
' If (eType = epcbOnNotifyViewSettingsChanged) Then
'  Call Main
' End If
'End Sub

' called just before the document closes - gives us a chance to cleanup
Private Sub pcbDoc_PreClose()
    Set pcbDoc = Nothing                  ' close document
    bReportIsBeingUpdated = True
    'Application.ActiveSheet.Range("A2:S1000").Clear ' clear sheet contents
    Range("A1:S1000").Clear
    bReportIsBeingUpdated = False
End Sub

Private Sub Worksheet_Activate()
    Call Main
End Sub

Private Sub Worksheet_Change(ByVal Target As Excel.Range)
    ' the worksheet has changed - did the user edit one of the board outline coordinate columns?
    ' Target is a reference to the changed cell.
    If pcbDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
    
    ' exit if we are updating the worksheet ourselves
    If bReportIsBeingUpdated = True Then Exit Sub
    If bSelectionsAreBeingUpdated = True Then Exit Sub
    
    bSelectionsAreBeingUpdated = True
    
    ' handle errors
    On Error Resume Next
    
    Dim changedvalue
    Dim optionname
    Dim col As MGCPCB.ColorPattern
    If Target.Column < 4 Then
        If Target.FormulaR1C1 <> "" Then
            If Target.FormulaR1C1 = "Y" Then
                changedvalue = epcbGraphicsItemStateOnEnabled
            ElseIf Target.FormulaR1C1 = "N" Then
                changedvalue = epcbGraphicsItemStateOffEnabled
            Else
                GoTo badvalue
            End If
            If InStr(Range("M" & Target.Row).FormulaR1C1, "Visible") = 1 Then
                optionname = Mid(Range("M" & Target.Row).FormulaR1C1, 10)
                optionname = Left(optionname, Len(optionname) - 2)
                dc.Visible(optionname) = changedvalue
            ElseIf InStr(Range("M" & Target.Row).FormulaR1C1, "Option") = 1 Then
                optionname = Mid(Range("M" & Target.Row).FormulaR1C1, 9)
                optionname = Left(optionname, Len(optionname) - 2)
                dc.Option(optionname) = changedvalue
            End If
        End If
    ElseIf Target.Column = 8 Then
        If Target.FormulaR1C1 <> "" Then
            If Target.FormulaR1C1 = "Y" Then
                changedvalue = epcbGraphicsItemStateOnEnabled
            ElseIf Target.FormulaR1C1 = "N" Then
                changedvalue = epcbGraphicsItemStateOffEnabled
            Else
                GoTo badvalue
            End If
            If InStr(Range("O" & Target.Row).FormulaR1C1, "Visible") = 1 Then
                optionname = Mid(Range("O" & Target.Row).FormulaR1C1, 10)
                optionname = Left(optionname, Len(optionname) - 2)
                dc.Visible(optionname) = changedvalue
            ElseIf InStr(Range("O" & Target.Row).FormulaR1C1, "Option") = 1 Then
                optionname = Mid(Range("O" & Target.Row).FormulaR1C1, 9)
                optionname = Left(optionname, Len(optionname) - 2)
                dc.Option(optionname) = changedvalue
            End If
        End If
    ElseIf (Target.Column >= 5) And (Target.Column <= 7) Then
        If Target.FormulaR1C1 <> "" Then
            If InStr(Range("N" & Target.Row).FormulaR1C1, "Color") = 1 Then
                Set col = pcbApp.Utility.NewColorPattern
                
                col.Red = Val(Range("E" & Target.Row).FormulaR1C1)
                col.Green = Val(Range("F" & Target.Row).FormulaR1C1)
                col.Blue = Val(Range("G" & Target.Row).FormulaR1C1)
                
                optionname = Mid(Range("N" & Target.Row).FormulaR1C1, 8)
                optionname = Left(optionname, Len(optionname) - 2)
                gbl.Color(optionname) = col
            End If
        End If
    ElseIf (Target.Column >= 9) And (Target.Column <= 11) Then
        If Target.FormulaR1C1 <> "" Then
            If InStr(Range("P" & Target.Row).FormulaR1C1, "Color") = 1 Then
                Set col = pcbApp.Utility.NewColorPattern
                
                col.Red = Val(Range("I" & Target.Row).FormulaR1C1)
                col.Green = Val(Range("J" & Target.Row).FormulaR1C1)
                col.Blue = Val(Range("K" & Target.Row).FormulaR1C1)
                
                optionname = Mid(Range("P" & Target.Row).FormulaR1C1, 8)
                optionname = Left(optionname, Len(optionname) - 2)
                gbl.Color(optionname) = col
            End If
        End If
    End If
    
    If Err.Number <> 0 Then
        MsgBox Err.Description
    End If
    
badvalue:
 
    RefreshBoardValues
 
    bSelectionsAreBeingUpdated = False
End Sub

    


Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CmdLoad, 1, 0, MSForms, CommandButton"
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' This is a part of the MentorGraphics-MGCPCB OLE Automation server samples.
' Copyright (C) 2003 Mentor Graphics Software, Inc.
' All rights reserved.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Option Explicit


' global declarations
Dim WithEvents pcbApp As MGCPCB.Application
Attribute pcbApp.VB_VarHelpID = -1
Dim WithEvents pcbDoc As MGCPCB.Document
Attribute pcbDoc.VB_VarHelpID = -1

Dim pcbView As MGCPCB.view

Dim dc As MGCPCB.DisplayControl
Dim gbl As MGCPCB.GlobalDisplayControl



Dim bReportIsBeingUpdated As Boolean
Dim bSelectionsAreBeingUpdated As Boolean

' disconnects from MGCPCB.
Private Sub Disconnect()
    Set pcbDoc = Nothing
    Set pcbApp = Nothing ' Disconnect from MGCPCB server
End Sub
' refreshes the BoardOutline values in the Spreadsheet
Public Sub PrintTitleRow()
    On Error Resume Next
    
    With Range("A1:C1")
        .Merge
        .FormulaR1C1 = "Visibility"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    With Range("D1")
        .FormulaR1C1 = "Description"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    With Range("E1")
        .FormulaR1C1 = "Red"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    With Range("F1")
        .FormulaR1C1 = "Green"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    With Range("G1")
        .FormulaR1C1 = "Blue"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    
    
    Range("A1:G1").Interior.Color = RGB(100, 100, 100)
End Sub

Public Sub PrintItem(rowidx As Integer, level As Integer, Description As String, ItemName As String)
    On Error Resume Next
    
    Dim visi As EPcbGraphicsItemState
    If ItemName = "" Then
        visi = epcbGraphicsItemStateModifierIgnoreOnOff
    Else
        visi = dc.Visible(ItemName)
        Range("M" & rowidx).FormulaR1C1 = "Visible(" & Chr(34) & ItemName & Chr(34) & ")"
        Range("M" & rowidx).NumberFormat = ";;;"
    End If
    
    
    If Err.Number <> 0 Then
        PrintRow rowidx, level, Description & " - Error: " & Err.Description, visi, Nothing
        Err.Clear
    Else
        Dim col As Object
        Set col = gbl.Color(ItemName)
        If Err.Number <> 0 Then
            Set col = Nothing
        Else
            Range("N" & rowidx).FormulaR1C1 = "Color(" & Chr(34) & ItemName & Chr(34) & ")"
            Range("N" & rowidx).NumberFormat = ";;;"
        End If
        PrintRow rowidx, level, Description, visi, col
    End If
    
End Sub

Public Sub PrintOption(rowidx As Integer, level As Integer, Description As String, ItemNameVisible As String, Optional ItemNameColor As String = "")
    On Error Resume Next
    
    Dim visi As EPcbGraphicsItemState
    If ItemNameVisible = "" Then
        visi = epcbGraphicsItemStateModifierIgnoreOnOff
    Else
        visi = dc.Option(ItemNameVisible)
        Range("M" & rowidx).FormulaR1C1 = "Option(" & Chr(34) & ItemNameVisible & Chr(34) & ")"
        Range("M" & rowidx).NumberFormat = ";;;"
    End If
    
    If Err.Number <> 0 Then
        PrintRow rowidx, level, Description & " - Error: " & Err.Description, visi, Nothing
        Err.Clear
    Else
        Dim col As Object
        Dim colorname As String
        If ItemNameColor = "" Then
            colorname = ItemNameVisible
            Set col = gbl.Color(ItemNameVisible)
        Else
            colorname = ItemNameColor
            Set col = gbl.Color(ItemNameColor)
        End If
        If Err.Number <> 0 Then
            Set col = Nothing
        Else
            Range("N" & rowidx).FormulaR1C1 = "Color(" & Chr(34) & colorname & Chr(34) & ")"
            Range("N" & rowidx).NumberFormat = ";;;"
        End If
        PrintRow rowidx, level, Description, visi, col
    End If
    
End Sub
Public Sub PrintRow(rowidx As Integer, level As Integer, Description As String, visibility As EPcbGraphicsItemState, Colors As Object)
    On Error Resume Next
    
    Dim visiChar
    If visibility = epcbGraphicsItemStateOnEnabled Then
        visiChar = "Y"
    ElseIf visibility = epcbGraphicsItemStateOffEnabled Then
        visiChar = "N"
    ElseIf visibility = epcbGraphicsItemStateOnNotEnabled Then
        visiChar = "[Y]"
    ElseIf visibility = epcbGraphicsItemStateOffNotEnabled Then
        visiChar = "[N]"
    Else
        visiChar = ""
    End If
    
    Dim bottom As Boolean
    bottom = False
    If level = 0 Then
        Range("A" & rowidx, "G" & rowidx).Interior.Color = RGB(100, 100, 100)
        Range("A" & rowidx).FormulaR1C1 = visiChar
    ElseIf level = 1 Then
        Range("A" & rowidx, "G" & rowidx).Interior.Color = RGB(170, 170, 170)
        Range("A" & rowidx).FormulaR1C1 = visiChar
    ElseIf level = 2 Then
        Range("B" & rowidx).FormulaR1C1 = visiChar
        Description = "  " & Description
    ElseIf level = 3 Then
        Range("C" & rowidx).FormulaR1C1 = visiChar
        Description = "    " & Description
    ElseIf level = 4 Then
        bottom = True
    Else
        Range("A" & rowidx, "G" & rowidx).Interior.Color = RGB(100, 100, 100)
    End If
    If bottom = False Then
        Range("D" & rowidx).value = Description
    End If
    
    Dim rgbCol
    If bottom = True Then
        Range("H" & rowidx).HorizontalAlignment = xlHAlignCenter
        Range("H" & rowidx).FormulaR1C1 = visiChar
        If Not Colors Is Nothing Then
            Range("I" & rowidx).FormulaR1C1 = Colors.Red
            Range("J" & rowidx).FormulaR1C1 = Colors.Green
            Range("K" & rowidx).FormulaR1C1 = Colors.Blue
            
            rgbCol = RGB(Colors.Red, Colors.Green, Colors.Blue)
            Range("I" & rowidx).Interior.Color = rgbCol
            Range("J" & rowidx).Interior.Color = rgbCol
            Range("K" & rowidx).Interior.Color = rgbCol
        End If
    Else
        If Not Colors Is Nothing Then
            Range("E" & rowidx).FormulaR1C1 = Colors.Red
            Range("F" & rowidx).FormulaR1C1 = Colors.Green
            Range("G" & rowidx).FormulaR1C1 = Colors.Blue
            
            rgbCol = RGB(Colors.Red, Colors.Green, Colors.Blue)
            Range("E" & rowidx).Interior.Color = rgbCol
            Range("F" & rowidx).Interior.Color = rgbCol
            Range("G" & rowidx).Interior.Color = rgbCol
        End If
    End If
    
End Sub

Public Sub RefreshBoardValues()
    
    ' empty existing sheet contents
    'Application.ActiveSheet.Range("A2:S1000").Clear
    Range("A1:S1000").Clear
    Range("A1:G1000").Borders.LineStyle = XlLineStyle.xlContinuous
    Range("A1:G1").Borders.Color = RGB(75, 75, 75)
    Range("A2:G1000").Borders.Color = RGB(100, 100, 100)

    Range("A1:G1000").Interior.Color = RGB(200, 200, 200)
    Range("D1:D1000").Interior.Color = RGB(210, 210, 210)
    
    If pcbDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
 
    On Error Resume Next
    Dim currentRow As Integer
    
    ' Lock server (to speed up OLE access)
    If pcbApp.LockServer = True Then
        bReportIsBeingUpdated = True
        
        ' Output header
        PrintTitleRow
        
        currentRow = 3
        
        PrintOption currentRow, 0, "Hazards", ""
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Color By Hazard", "Global.Option.DRC.ColorByHazard.Enabled"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 2, "Shadow Mode", "Global.Option.DRC.ColorByHazard.ShadowMode"
        currentRow = currentRow + 1
        
        PrintOption currentRow, 1, "Display Hazard Symbols", "Global.Option.DRC.DisplaySymbols"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 0, "Online", ""
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Components", "Hazard.Online.Component"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Open Fanouts", "Hazard.Online.OpenFanouts"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Open Netlines", "Hazard.Online.NetOpenCounts"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Trace Width", "Hazard.Online.TraceWidth"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Pad Entry", "Hazard.Online.PadEntry"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Node Entry", "Hazard.Online.NodeEntry"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Layer Restrictions", "Hazard.Online.LayerConstraints"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Vias Per Net", "Hazard.Online.ViasPerNet"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Via Usage", "Hazard.Online.ViaUsage"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Teardrops & Tracedrops", "Hazard.Online.Teardrop"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Multi Via Pad Entry", "Hazard.Online.MultiViaPadEntry"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Via Grid", "Hazard.Online.ViaGrid"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Route Grid", "Hazard.Online.RouteGrid"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Jumper Grid", "Hazard.Online.JumperGrid"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Test Point Grid", "Hazard.Online.TestPointGrid"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Placement Grid", "Hazard.Online.PlacementGrid"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Placement Rotation", "Hazard.Online.PlacementRotation"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Stub Length", "Hazard.Online.Stub"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Trace T-Junction", "Hazard.Online.TJunction"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Advanced Topology Balancing", "Hazard.Online.TopologyBalancing"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Advanced Topology Mismatch", "Hazard.Online.TopologyMismatch"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Min/Max Length", "Hazard.Online.MaxLength"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Matched Length", "Hazard.Online.GroupMatchLength"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Min/Max TOF Delay", "Hazard.Online.MaxDelay"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Matched TOF Delay", "Hazard.Online.GroupMatchDelay"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Delay Formulas", "Hazard.Online.Formulas"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Parallelism", "Hazard.Online.Parallelism"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Diff Pair Convergence", "Hazard.Online.DpConvergence"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Diff Pair Separation", "Hazard.Online.DpClearance"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Diff Pair Delay Tol", "Hazard.Online.DpDelayTolerance"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Diff Pair Length Tol", "Hazard.Online.DpLengthTolerance"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Diff Pair Converge Tol", "Hazard.Online.DpConvergenceTol"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Diff Pair Phase Match", "Hazard.Online.DpPhaseMatching"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Estimated CrossTalk", "Hazard.Online.CrossTalk"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Bus Spacing", "Hazard.Online.BusSpacing"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Bus Bit Width", "Hazard.Online.BusBitWidth"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Unpacked Areas", "Hazard.Online.BusUnpackedAreas"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Bus Pin Distance", "Hazard.Online.BusPinDistance"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Bus Minimum Length", "Hazard.Online.BusMinLength"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Bus Shielding", "Hazard.Online.BusShielding"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Target Areas", "Hazard.Online.TargetAreas"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Route Targets", "Hazard.Online.RouteTargets"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Straight Line Interconnects", "Hazard.Online.SLIs"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Straight Line Interconnects Sum", "Hazard.Online.SLISummary"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Missing Arcs", "Hazard.Online.MissingArc"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Proximity", "Hazard.Online.Proximity"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 0, "Batch", ""
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Proximity", "Hazard.Batch.Proximity"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Hangers", "Hazard.Batch.Hangers"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Trace Loops", "Hazard.Batch.TraceLoops"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Trace Widths", "Hazard.Batch.TraceWidths"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Wirebond Wire Model", "Hazard.Batch.WireBondWireModel"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Wirebond Incorrectly Synthesized", "Hazard.Batch.WireBondIncorrectlySynthesized"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Wirebond Not Connected", "Hazard.Batch.WireBondNotConnected"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Wirebond Angle", "Hazard.Batch.WireBondAngle"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Wirebond Min Length", "Hazard.Batch.WireBondLenMin"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Wirebond Max Length", "Hazard.Batch.WireBondLenMax"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Wirebond Offset X Start", "Hazard.Batch.WireBondOffsetXStart"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Wirebond Offset Y Start", "Hazard.Batch.WireBondOffsetYStart"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Wirebond Offset X End", "Hazard.Batch.WireBondOffsetXEnd"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Wirebond Offset Y End", "Hazard.Batch.WireBondOffsetYEnd"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Wirebond Align", "Hazard.Batch.WireBondAlign"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Wirebond Site Margin", "Hazard.Batch.WireBondSiteMargin"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Wirebond Bond Padstack", "Hazard.Batch.WireBondBondPadstack"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Wirebond Pads Count", "Hazard.Batch.WireBondPadsCount"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Wirebond Wires Count", "Hazard.Batch.WireBondWiresCount"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Test Probe Grid", "Hazard.Batch.TestProbeGrid"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Test Probe Minimum Pad Size", "Hazard.Batch.TestProbeMinimumPadSize"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Test Probe Maximum Hole Diameter", "Hazard.Batch.TestProbeMaximumHoleDiameter"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Plane Violations", "Hazard.Batch.PlaneIslands"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "EP Violation", "Hazard.Batch.EPViolation"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Single Point Nets", "Hazard.Batch.SinglePointNets"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Unrouted & Partial Nets", "Hazard.Batch.PartialNets"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Dangling Vias & Jumpers", "Hazard.Batch.Dangling"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Unplated Connected Pins", "Hazard.Batch.UnplatedConnectorPin"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Vias Under Parts", "Hazard.Batch.ViasUnderParts"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Vias Under SMD Pads", "Hazard.Batch.ViasUnderSMDPads"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Minimum Annular Ring", "Hazard.Batch.MinAnnularRing"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Missing Conductive Pads", "Hazard.Batch.MissingCondPads"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Missing Solder Mask Pads", "Hazard.Batch.MissingMaskPads"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Missing Paste Pads", "Hazard.Batch.MissingPastePads"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 0, "Valor-NPI", ""
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Red", "Hazard.Valor-NPI.Red"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Yellow", "Hazard.Valor-NPI.Yellow"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Green", "Hazard.Valor-NPI.Green"
        currentRow = currentRow + 1
        
        PrintItem currentRow, 1, "Blue", "Hazard.Valor-NPI.Blue"
        currentRow = currentRow + 1
        
        bReportIsBeingUpdated = False
        
        ' Unlock server
        pcbApp.UnlockServer
    End If
Exit Sub

OnErrorServerAccess:
    pcbApp.UnlockServer
    MsgBox "Error accessing MGCPCB Server.", , "Automation Demonstration"
End Sub
' refreshes values displayed in Sheet1
Public Sub RefreshValues()
    If pcbDoc Is Nothing Then
     Call RefreshBoardValues
     Exit Sub ' If we are not connected, exit procedure
    End If
    
    Set pcbView = pcbDoc.activeView
    Set dc = pcbView.DisplayControl
    Set gbl = dc.Global
    
    RefreshBoardValues
End Sub

' Main routine
Sub Main()
    Dim myPcbApp As MGCPCB.Application
    Dim myPcbDoc As MGCPCB.Document
    bReportIsBeingUpdated = True
    bSelectionsAreBeingUpdated = False
    Sheets("DRC").Select ' Make Sheet1 visible
    
    Call Connect(myPcbApp, myPcbDoc) ' Connect to MGCPCB (we use the sheet's pcbApp Object variable)
    Set pcbApp = myPcbApp
    Set pcbDoc = myPcbDoc
    
    RefreshValues ' Refresh sheet values
    bReportIsBeingUpdated = False
 
End Sub

Private Sub CmdLoad_Click()
 Call Main
End Sub

' called when a document is opened in MGCPCB
Private Sub pcbApp_OpenDocument()
   Dim retVal As Integer
    ' new document opened
    Set pcbDoc = pcbApp.ActiveDocument
    
    ' get a doc licence
    retVal = licenseDoc(pcbDoc)
    If (retVal <> 1) Then Set pcbDoc = Nothing
    
    ' update sheet
    bReportIsBeingUpdated = True
    RefreshBoardValues
    bReportIsBeingUpdated = False
End Sub

' called when user quits MGCPCB
Private Sub pcbApp_Quit()
    Disconnect
End Sub

'Private Sub pcbDoc_OnChange(ByVal eType As MGCPCB.EPcbOnChangeType)
'    ' expedition document has been changed, update the spreadsheet
'    If pcbDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
'
'    ' exit if we are updating the worksheet ourselves
'    If bReportIsBeingUpdated = True Then Exit Sub
'    If bSelectionsAreBeingUpdated = True Then Exit Sub
'
'
'    ' if a net was changed
'    If eType And epcbOnChangeNet Then
'        bSelectionsAreBeingUpdated = True
'        ' find if any nets were changed
'        If pcbApp.LockServer Then
'            RefreshBoardValues
'            pcbApp.UnlockServer
'        End If
'        bSelectionsAreBeingUpdated = False
'    End If
'End Sub

'Private Sub pcbDoc_OnNotify(ByVal eType As MGCPCB.EPcbOnNotifyType)
' If (eType = epcbOnNotifyViewSettingsChanged) Then
'  Call Main
' End If
'End Sub

' called just before the document closes - gives us a chance to cleanup
Private Sub pcbDoc_PreClose()
    Set pcbDoc = Nothing                  ' close document
    bReportIsBeingUpdated = True
    'Application.ActiveSheet.Range("A2:S1000").Clear ' clear sheet contents
    Range("A1:S1000").Clear
    bReportIsBeingUpdated = False
End Sub

Private Sub Worksheet_Activate()
    Call Main
End Sub

Private Sub Worksheet_Change(ByVal Target As Excel.Range)
    ' the worksheet has changed - did the user edit one of the board outline coordinate columns?
    ' Target is a reference to the changed cell.
    If pcbDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
    
    ' exit if we are updating the worksheet ourselves
    If bReportIsBeingUpdated = True Then Exit Sub
    If bSelectionsAreBeingUpdated = True Then Exit Sub
    
    bSelectionsAreBeingUpdated = True
    
    ' handle errors
    On Error Resume Next
    
    Dim changedvalue
    Dim optionname
    Dim col As MGCPCB.ColorPattern
    If Target.Column < 4 Then
        If Target.FormulaR1C1 <> "" Then
            If Target.FormulaR1C1 = "Y" Then
                changedvalue = epcbGraphicsItemStateOnEnabled
            ElseIf Target.FormulaR1C1 = "N" Then
                changedvalue = epcbGraphicsItemStateOffEnabled
            Else
                GoTo badvalue
            End If
            If InStr(Range("M" & Target.Row).FormulaR1C1, "Visible") = 1 Then
                optionname = Mid(Range("M" & Target.Row).FormulaR1C1, 10)
                optionname = Left(optionname, Len(optionname) - 2)
                dc.Visible(optionname) = changedvalue
            ElseIf InStr(Range("M" & Target.Row).FormulaR1C1, "Option") = 1 Then
                optionname = Mid(Range("M" & Target.Row).FormulaR1C1, 9)
                optionname = Left(optionname, Len(optionname) - 2)
                dc.Option(optionname) = changedvalue
            ElseIf InStr(Range("M" & Target.Row).FormulaR1C1, "StringOption") = 1 Then
                optionname = Mid(Range("M" & Target.Row).FormulaR1C1, 15)
                optionname = Left(optionname, Len(optionname) - 2)
                dc.StringOption(optionname) = changedvalue
            End If
        End If
    ElseIf (Target.Column >= 5) And (Target.Column <= 7) Then
        If Target.FormulaR1C1 <> "" Then
            If InStr(Range("N" & Target.Row).FormulaR1C1, "Color") = 1 Then
                Set col = pcbApp.Utility.NewColorPattern
                
                col.Red = Val(Range("E" & Target.Row).FormulaR1C1)
                col.Green = Val(Range("F" & Target.Row).FormulaR1C1)
                col.Blue = Val(Range("G" & Target.Row).FormulaR1C1)
                
                optionname = Mid(Range("N" & Target.Row).FormulaR1C1, 8)
                optionname = Left(optionname, Len(optionname) - 2)
                gbl.Color(optionname) = col
            End If
        End If
    End If
    
    If Err.Number <> 0 Then
        MsgBox Err.Description
    End If
    
badvalue:
 
    RefreshBoardValues
 
    bSelectionsAreBeingUpdated = False
End Sub

    



Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "lib_dispControl"
Private lastModColor As Integer


Private Function GetColorIndex(rgbVal As Variant) As Integer
' ==========================================================
' get a color index in the color table
' ==========================================================

For i = 56 To 1 Step -1
 If (ActiveWorkbook.Colors(i) = rgbVal) Then
  GetColorIndex = i
  Exit Function
 End If
Next i


' not found , define the color
If (lastModColor = 0) Then lastcolormod = 57

lastModColor = lastModColor - 1

If (lastModColor >= 1) Then
 ActiveWorkbook.Colors(lastModColor) = rgbVal
 GetColorIndex = lastModColor
End If

GetColorIndex = -1


End Function

Public Function licenseDoc(docObj As MGCPCB.Document) As Integer
' =======================================================================
' Retrieve a licence for the document
' =======================================================================
On Error GoTo exit_with_error
Dim retState As Integer

Dim licenseServer As Object
Dim key As Long
Dim licenseToken As Long
Dim outErrMess As String

If (docObj Is Nothing) Then GoTo end_of_function

' Ask the document for a key
key = docObj.Validate(0)

' Get license server
On Error GoTo err_create_serverobj
Set licenseServer = CreateObject("MGCPCBAutomationLicensing.Application")
If (licenseServer Is Nothing) Then GoTo err_create_serverobj
On Error GoTo exit_with_error


' Ask the license server for the license token
licenseToken = licenseServer.GetToken(key)


' Validate the document with the license token
On Error GoTo err_validate
Dim lRetval As Long
lRetval = docObj.Validate(licenseToken)

On Error GoTo exit_with_error

retState = 1

end_of_function:
    ' release licence server
    Set licenseServer = Nothing
    licenseDoc = retState

Exit Function

show_error:
   Dim ioptions As Long
   ioptions = vbDefaultButton1 + vbApplicationModal + vbCritical + vbOKOnly
   MsgBox outErrMess, ioptions, "Retrieving license for document"
   GoTo end_of_function

exit_with_error:
    outErrMess = "** Error ** " + Error$
    retState = -1
    GoTo show_error

err_create_serverobj:
   outErrMess = "** Error ** Could not create license server object"
   retState = -2
   GoTo show_error

err_validate:
   outErrMess = "** Error ** Failed to validate document object"
   outErrMess = outErrMess + vbCrLf + "    License token : " + Trim(str(licenseToken))
   outErrMess = outErrMess + vbCrLf + "    Document key  : " + Trim(str(key))
   retState = -3
   GoTo show_error

End Function

' connects to MGCPCB
Public Sub Connect(ByRef localPCBApp As MGCPCB.Application, ByRef localPCBDoc As MGCPCB.Document)
    Dim retVal As Integer

    On Error GoTo OnErrorGetObject
    Set localPCBApp = GetObject(, "MGCPCB.Application")
    Set localPCBDoc = localPCBApp.ActiveDocument
    
    ' make sure the doc is licensed
    retVal = licenseDoc(localPCBDoc)
    
    If (retVal <> 1) Then Set localPCBDoc = Nothing
    
Exit Sub

OnErrorGetObject:
    MsgBox "MGCPCB needs to be running!", , "Automation Demonstration"
End Sub


Public Sub SetColorDefinition(col As Variant, rowToSet As Integer, Optional rRed As String = "A", _
                     Optional rGreen As String = "B", _
                     Optional rBlue As String = "C")
    Dim colIndex As Integer
    
    On Error GoTo exit_with_error
    Range(rRed & rowToSet).FormulaR1C1 = col.Red
    Range(rGreen & rowToSet).FormulaR1C1 = col.Green
    Range(rBlue & rowToSet).FormulaR1C1 = col.Blue
    
    Dim rgbCol
    
    rgbCol = RGB(col.Red, col.Green, col.Blue)
    
    'colIndex = GetColorIndex(rgbCol)
    colIndex = -1
    
    If (colIndex = -1) Then
     Range(rRed & rowToSet).Interior.Color = rgbCol
     Range(rGreen & rowToSet).Interior.Color = rgbCol
     Range(rBlue & rowToSet).Interior.Color = rgbCol
    Else
     Range(rRed & rowToSet).Interior.ColorIndex = colIndex
     Range(rGreen & rowToSet).Interior.ColorIndex = colIndex
     Range(rBlue & rowToSet).Interior.ColorIndex = colIndex
    End If
 

    Exit Sub

exit_with_error:

End Sub




' InQuest injected base64 decoded content
' .+-I

INQUEST-PP=macro
