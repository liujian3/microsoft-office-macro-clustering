Attribute VB_Name = "CreateTablesSheet"
Dim fieldList As Collection
Dim currentSheet As Excel.Worksheet
Dim tagsToFind As Variant
Dim TablesSheet As Excel.Worksheet
Dim rowNumber As Integer
Dim tagType As String

'Get tags from all sheets and insert those in tables sheet.
Sub PrepareTableSheetWithSheetAndAddrInfo()
Set fieldList = New Collection
  rowNumber = 1
  'Tags to find in sheet
  tagsToFind = Array("<<", "$$", "{{", "##", "[[", "[[+", "[[##", "((")
 
  CreateTablesSheet
  tagType = "CellType"

  TablesSheet.ListObjects.Add(xlSrcRange, TablesSheet.Range("$A$1"), , xlNo).Name = "TagInfo"
    TablesSheet.ListObjects(1).ListColumns.Add(1).Name = "SheetName"
    TablesSheet.ListObjects(1).ListColumns.Add(2).Name = "TagType"
    TablesSheet.ListObjects(1).ListColumns.Add(3).Name = "Value"
    TablesSheet.ListObjects(1).ListColumns.Add(4).Name = "Address"
    TablesSheet.ListObjects(1).ListColumns.Add(5).Name = "Row"
    TablesSheet.ListObjects(1).ListColumns.Add(6).Name = "Column"
    TablesSheet.ListObjects(1).ListColumns(7).Delete
  'Interate thru each sheet and seach all tags which is there in tagsToFind
For Each currentSheet In ActiveWorkbook.Worksheets
    'For tables sheet no need to search for tags as it is union of all tags
    'which is used in remaining sheets
    If currentSheet.Name <> "Tables" And currentSheet.Name <> "Configurations" Then
     FindCellsFromSheet sheet:=currentSheet, tagsToFind:=tagsToFind
    End If
Next
End Sub
'Create table sheet if it doesn't exist
'If it already exist then it will clear content of it
Private Sub CreateTablesSheet()
On Error GoTo CreateSheet
Set TablesSheet = ActiveWorkbook.Sheets("Tables")
If TablesSheet.ListObjects.Count > 0 Then
TablesSheet.ListObjects(1).Delete
End If
TablesSheet.UsedRange.Clear
Exit Sub
CreateSheet:
Set TablesSheet = ActiveWorkbook.Sheets.Add
TablesSheet.Visible = xlSheetHidden
TablesSheet.Name = "Tables"
End Sub
'Add all fields in Tables sheet
Private Sub AddFieldsInTablesSheet()
Dim TablesSheet As Excel.Worksheet
Set TablesSheet = ActiveWorkbook.Sheets("Tables")

rowNumber = fieldList.Count
  
'Add each field in new row
For I = 1 To rowNumber
    TablesSheet.Cells(I, "A").Value2 = fieldList(I)
Next I

End Sub




Public Sub FindCellsFromSheet(sheet As Worksheet, tagsToFind As Variant)
  Dim UsedRange  As Excel.Range
  Set UsedRange = sheet.UsedRange
   For I = LBound(tagsToFind) To UBound(tagsToFind)
   If tagsToFind(I) = "<<" Then
   tagType = "SingleCell"
   ElseIf tagsToFind(I) = "((" Then
   tagType = "Image"
   ElseIf tagsToFind(I) = "[[##" Then
   tagType = "Block"
  ElseIf tagsToFind(I) = "[[" Or tagsToFind(I) = "[[+" Then
   tagType = "Block"
   ElseIf tagsToFind(I) = "{{" Then
   tagType = "MultiColumn"
    ElseIf tagsToFind(I) = "$$" And tagsToFind(I) <> "[[$$" Then
   tagType = "MultiRow"
    ElseIf tagsToFind(I) = "##" And tagsToFind(I) <> "[[##" Then
   tagType = "BlockRow"
   Else
   tagType = "Unknown"
   End If
   FindTag UsedRange:=UsedRange, tag:=tagsToFind(I), sheetName:=sheet.Name
   Next I
End Sub

Private Sub FindTag(UsedRange As Range, tag As Variant, sheetName As String)
 Dim FoundCell As Range
Set FoundCell = UsedRange.Find(What:=tag, LookIn:=xlFormulas, LookAt:=xlPart)
 If Not FoundCell Is Nothing Then
                FirstAddress = FoundCell.address
                Do
                    Dim cellValue As String
                   
                    cellValue = FoundCell.Value2
             If tag = "##" And (InStr(cellValue, "[[##") > 0 Or InStr(cellValue, "[[+") > 0) Then
           '$$ will return multirow as well as block("[[$$"). block tag should not considered as multirow
 Else
        AddRow sheetName:=sheetName, value:=FoundCell.Value2, address:=FoundCell.address, rowNumber:=FoundCell.Row, columnNumber:=FoundCell.Column
End If
                    Set FoundCell = UsedRange.FindNext(FoundCell)
                 If FoundCell Is Nothing Then
                    Exit Sub
                    End If
                Loop While Not FoundCell Is Nothing And FoundCell.address <> FirstAddress
            End If
End Sub

Private Sub AddRow(sheetName As String, value As String, address As String, rowNumber As Integer, columnNumber As Integer)

  Dim oNewRow As ListRow
  Set oNewRow = TablesSheet.ListObjects(1).ListRows.Add(AlwaysInsert:=True)
oNewRow.Range.Cells(1, 1) = sheetName
oNewRow.Range.Cells(1, 2) = tagType
oNewRow.Range.Cells(1, 3) = value
oNewRow.Range.Cells(1, 4) = address
oNewRow.Range.Cells(1, 5) = rowNumber
oNewRow.Range.Cells(1, 6) = columnNumber

      End Sub



Attribute VB_Name = "HelperClass"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Public Sub FindCellsFromSheet(sheet As Worksheet, fieldList As Collection, tagsToFind As Variant)
  Dim UsedRange  As Excel.Range
  Set UsedRange = sheet.UsedRange
   For I = LBound(tagsToFind) To UBound(tagsToFind)
   FindTag UsedRange:=UsedRange, tag:=tagsToFind(I), fieldList:=fieldList
   Next I
End Sub

Private Sub FindTag(UsedRange As Range, tag As Variant, fieldList As Collection)
 Dim FoundCell As Range
Set FoundCell = UsedRange.Find(What:=tag)
 If Not FoundCell Is Nothing Then
                FirstAddress = FoundCell.address
                Do
                    'mark the cell in the column to the right if "Ron" is found
       fieldList.Add Item:=FoundCell.Value2
                    Set FoundCell = UsedRange.FindNext(FoundCell)
                Loop While Not FoundCell Is Nothing And FoundCell.address <> FirstAddress
            End If
End Sub




Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Dim m_numberAsText As Boolean
Dim m_inconsistentFormula As Boolean
Dim m_omittedCells As Boolean
Dim m_emptyCellReferences As Boolean
Dim m_evaluateToError As Boolean

Private Sub Workbook_BeforeClose(Cancel As Boolean)
  Application.ErrorCheckingOptions.NumberAsText = m_numberAsText
        Application.ErrorCheckingOptions.InconsistentFormula = m_inconsistentFormula
        Application.ErrorCheckingOptions.OmittedCells = m_omittedCells
        Application.ErrorCheckingOptions.EmptyCellReferences = m_emptyCellReferences
        Application.ErrorCheckingOptions.EvaluateToError = m_evaluateToError
End Sub

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
If Cancel = False Then
Application.EnableEvents = False
PrepareTableSheetWithSheetAndAddrInfo
Application.EnableEvents = True
End If
End Sub

Private Sub Workbook_Open()
' to avoid error and warning messages for report workbook
' set it to true again while closing this workbook
m_numberAsText = Excel.Application.ErrorCheckingOptions.NumberAsText
m_inconsistentFormula = Application.ErrorCheckingOptions.InconsistentFormula
m_omittedCells = Application.ErrorCheckingOptions.OmittedCells
m_emptyCellReferences = Application.ErrorCheckingOptions.EmptyCellReferences
m_evaluateToError = Application.ErrorCheckingOptions.EvaluateToError
        Application.ErrorCheckingOptions.NumberAsText = False
        Application.ErrorCheckingOptions.InconsistentFormula = False
        Application.ErrorCheckingOptions.OmittedCells = False
Application.ErrorCheckingOptions.EmptyCellReferences = False
Application.ErrorCheckingOptions.EvaluateToError = False
End Sub

Private Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As Range)
' If Not Target Is Nothing And Not IsEmpty(Target) Then
'Dim startIndex As Integer
'startIndex = InStr(1, Target.Value2, "$$")
'    If startIndex >= 1 And startIndex < Len(Target.Value2) - 1 Then
'    Dim nextIndex As Integer
'    nextIndex = InStr(startIndex + 1, Target.Value2, "$$")
'        If nextIndex < 1 Then
'        MsgBox "Multirow tag must be stored insided table. Please Add table and put multirow tag inside it."
'        End If
'    End If
'End If
End Sub










INQUEST-PP=macro
