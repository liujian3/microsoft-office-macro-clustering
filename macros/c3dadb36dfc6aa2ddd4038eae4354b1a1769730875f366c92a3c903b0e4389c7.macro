Attribute VB_Name = "Module1"
Sub RemoveComments1()
    For Each cmt In ActiveDocument.Comments
        cmt.Delete
    Next
End Sub
Attribute VB_Name = "NewMacros"
Attribute VB_Name = "ProgressForm"
Attribute VB_Base = "0{847EF3EB-A11E-4A20-B937-F1F9C77D37B2}{3B9DB0CB-A02F-4638-A91C-20ED2B3B2ADF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

































Attribute VB_Name = "Proposal4"
Dim myAnswer As Boolean
'Set tcAnswer = False
Dim topLevelName As String
Dim myScratchName As String
Sub AcronymIndexEntries()
'
' AcronymIndexEntries Macro
' Macro recorded 29/10/01 by Scan-PC
'
    myName = "AcronymIndexEntries"
    Application.ScreenUpdating = False
    
On Error GoTo EndOfFile

    If MsgBox("Is your cursor at the START of actual document text?", 4) = vbNo Then End
    
    With ActiveDocument.Bookmarks
        .Add Range:=Selection.Range, name:="TextStart"
        .DefaultSorting = wdSortByName
        .ShowHidden = False
    End With
    With ActiveWindow.View
            .ShowAll = False
            .ShowTabs = True
            .ShowSpaces = True
            .ShowParagraphs = True
            .ShowHyphens = True
            .ShowHiddenText = False
    End With
' Pause
    lPauseTime = 1
    lStart = Timer
    Do While Timer < lStart + lPauseTime
    DoEvents
    Loop
' End Pause
'Check for any Highlighted Acros (Uppercase)
    Selection.Find.ClearFormatting
    Selection.Find.Highlight = True
    With Selection.Find
        .Text = "<[A-Z]{2,}>"
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindStop
        .Format = True
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = True
        .MatchSoundsLike = False
        .MatchAllWordForms = False
        .Execute
        If .found = True Then GoTo PreviousUppercase
    End With

CheckALLCAPS:
'Check for any ALL CAPS Acros
    Selection.GoTo What:=wdGoToBookmark, name:="TextStart"
    ActiveWindow.View.ShowHiddenText = False
' Pause
    lPauseTime = 1
    lStart = Timer
    Do While Timer < lStart + lPauseTime
    DoEvents
    Loop
' End Pause
    Selection.Find.ClearFormatting
    With Selection.Find.Font
        .SmallCaps = False
        .AllCaps = True
    End With
    Selection.Find.Highlight = True
    With Selection.Find
        .Text = "<[a-z]{2,}>"
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindStop
        .Format = True
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = True
        .MatchSoundsLike = False
        .MatchAllWordForms = False
        .Execute
        If .found = True Then GoTo PreviousALLCAPS
    End With
' If neither found
    GoTo HighlightAcros
    
'Previous Index Entries Check (Uppercase)
PreviousUppercase:
    Selection.GoTo What:=wdGoToBookmark, name:="TextStart"
    With ActiveDocument.Bookmarks
        .Add Range:=Selection.Range, name:="AcroFindStart"
        .DefaultSorting = wdSortByName
        .ShowHidden = False
    End With
FindField:
    Selection.GoTo What:=wdGoToBookmark, name:="AcroFindStart"
    Selection.EndKey Unit:=wdStory, Extend:=wdExtend
    With ActiveDocument.Bookmarks
        .Add Range:=Selection.Range, name:="DocumentEndSelection"
        .DefaultSorting = wdSortByName
        .ShowHidden = False
    End With
    ActiveWindow.View.ShowHiddenText = False
' Pause
    lPauseTime = 1
    lStart = Timer
    Do While Timer < lStart + lPauseTime
    DoEvents
    Loop
' End Pause
    Selection.Find.ClearFormatting
    Selection.Find.Highlight = True
    ActiveDocument.Bookmarks("DocumentEndSelection").Select
    With Selection.Find
        .Text = "<[A-Z]{2,}>"
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindStop
        .Format = True
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = True
        .MatchSoundsLike = False
        .MatchAllWordForms = False
        .Execute
        If .found = False Then GoTo CheckALLCAPS
    End With
    myACRONYM = Selection
    ActiveWindow.View.ShowHiddenText = True
' Pause
    lPauseTime = 1
    lStart = Timer
    Do While Timer < lStart + lPauseTime
    DoEvents
    Loop
' End Pause
    Selection.MoveRight Unit:=wdCharacter, count:=1
    With ActiveDocument.Bookmarks
        .Add Range:=Selection.Range, name:="AcroFindStart"
        .DefaultSorting = wdSortByName
        .ShowHidden = False
    End With
    Selection.MoveLeft Unit:=wdWord, count:=1
    Selection.MoveRight Unit:=wdWord, count:=1, Extend:=wdExtend
    Selection.MoveRight Unit:=wdCharacter, count:=1, Extend:=wdExtend
    Selection.Find.ClearFormatting
    With Selection.Find
        .Text = "^d"
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindStop
        .Format = False
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
        .Execute
        If .found = False Then GoTo FindField
    End With
' Change all instances of UPPERCASE acros with existing entries to lowercase, ALL CAPS
    Selection.GoTo What:=wdGoToBookmark, name:="TextStart"
    With ActiveDocument.Bookmarks
        .Add Range:=Selection.Range, name:="ExistingAcroFindStart"
        .DefaultSorting = wdSortByName
        .ShowHidden = False
    End With
    ActiveWindow.View.ShowHiddenText = False
' Pause
    lPauseTime = 1
    lStart = Timer
    Do While Timer < lStart + lPauseTime
    DoEvents
    Loop
' End Pause
ExistingStart:
    Selection.GoTo What:=wdGoToBookmark, name:="ExistingAcroFindStart"
    Selection.EndKey Unit:=wdStory, Extend:=wdExtend
    With ActiveDocument.Bookmarks
        .Add Range:=Selection.Range, name:="DocumentEndSelection"
        .DefaultSorting = wdSortByName
        .ShowHidden = False
    End With
    Selection.Find.ClearFormatting
    ActiveDocument.Bookmarks("DocumentEndSelection").Select
    With Selection.Find
        .Text = myACRONYM
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindStop
        .Format = False
        .MatchCase = True
        .MatchWholeWord = True
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
        .Execute
        If .found = False Then GoTo FindField
    End With
    Selection.MoveRight Unit:=wdCharacter, count:=1
    With ActiveDocument.Bookmarks
        .Add Range:=Selection.Range, name:="ExistingAcroFindStart"
        .DefaultSorting = wdSortByName
        .ShowHidden = False
    End With
    Selection.MoveLeft Unit:=wdWord, count:=1, Extend:=wdExtend
    Selection.Range.Case = wdLowerCase
    Selection.Font.AllCaps = True
    GoTo ExistingStart
    
'Previous Index Entries Check (ALLCAPS)
PreviousALLCAPS:
    Selection.GoTo What:=wdGoToBookmark, name:="TextStart"
    With ActiveDocument.Bookmarks
        .Add Range:=Selection.Range, name:="AcroFindStart"
        .DefaultSorting = wdSortByName
        .ShowHidden = False
    End With
FindFieldALLCAPS:
    Selection.GoTo What:=wdGoToBookmark, name:="AcroFindStart"
    Selection.EndKey Unit:=wdStory, Extend:=wdExtend
    With ActiveDocument.Bookmarks
        .Add Range:=Selection.Range, name:="DocumentEndSelection"
        .DefaultSorting = wdSortByName
        .ShowHidden = False
    End With
    ActiveWindow.View.ShowHiddenText = False
' Pause
    lPauseTime = 1
    lStart = Timer
    Do While Timer < lStart + lPauseTime
    DoEvents
    Loop
' End Pause
    Selection.Find.ClearFormatting
    With Selection.Find.Font
        .SmallCaps = False
        .AllCaps = True
    End With
    Selection.Find.Highlight = True
    ActiveDocument.Bookmarks("DocumentEndSelection").Select
    With Selection.Find
        .Text = "<[a-z]{2,}>"
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindStop
        .Format = True
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = True
        .MatchSoundsLike = False
        .MatchAllWordForms = False
        .Execute
        If .found = False Then GoTo HighlightAcros
    End With
    myACRONYM = Selection
    ActiveWindow.View.ShowHiddenText = True
' Pause
    lPauseTime = 1
    lStart = Timer
    Do While Timer < lStart + lPauseTime
    DoEvents
    Loop
' End Pause
    Selection.MoveRight Unit:=wdCharacter, count:=1
    With ActiveDocument.Bookmarks
        .Add Range:=Selection.Range, name:="AcroFindStart"
        .DefaultSorting = wdSortByName
        .ShowHidden = False
    End With
    Selection.MoveLeft Unit:=wdWord, count:=1
    Selection.MoveRight Unit:=wdWord, count:=1, Extend:=wdExtend
    Selection.MoveRight Unit:=wdCharacter, count:=1, Extend:=wdExtend
    Selection.Find.ClearFormatting
    With Selection.Find
        .Text = "^d"
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindStop
        .Format = False
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
        .Execute
        If .found = False Then GoTo FindFieldALLCAPS
    End With
' Change all instances of ALL CAPS acros with existing entries to lowercase, ALL CAPS
    Selection.GoTo What:=wdGoToBookmark, name:="TextStart"
    With ActiveDocument.Bookmarks
        .Add Range:=Selection.Range, name:="ExistingAcroFindStart"
        .DefaultSorting = wdSortByName
        .ShowHidden = False
    End With
    ActiveWindow.View.ShowHiddenText = False
' Pause
    lPauseTime = 1
    lStart = Timer
    Do While Timer < lStart + lPauseTime
    DoEvents
    Loop
' End Pause
ExistingStartALLCAPS:
    Selection.GoTo What:=wdGoToBookmark, name:="ExistingAcroFindStart"
    Selection.EndKey Unit:=wdStory, Extend:=wdExtend
    With ActiveDocument.Bookmarks
        .Add Range:=Selection.Range, name:="DocumentEndSelection"
        .DefaultSorting = wdSortByName
        .ShowHidden = False
    End With
    Selection.Find.ClearFormatting
    ActiveDocument.Bookmarks("DocumentEndSelection").Select
    With Selection.Find
        .Text = myACRONYM
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindStop
        .Format = False
        .MatchCase = False
        .MatchWholeWord = True
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
        .Execute
        If .found = False Then GoTo FindFieldALLCAPS
    End With
    Selection.MoveRight Unit:=wdCharacter, count:=1
    With ActiveDocument.Bookmarks
        .Add Range:=Selection.Range, name:="ExistingAcroFindStart"
        .DefaultSorting = wdSortByName
        .ShowHidden = False
    End With
    Selection.MoveLeft Unit:=wdWord, count:=1, Extend:=wdExtend
    Selection.Range.Case = wdLowerCase
    Selection.Font.AllCaps = True
    GoTo ExistingStartALLCAPS

'Highlight all acros (uppercase)
HighlightAcros:
    Selection.GoTo What:=wdGoToBookmark, name:="TextStart"
    ActiveWindow.View.ShowHiddenText = False
' Pause
    lPauseTime = 1
    lStart = Timer
    Do While Timer < lStart + lPauseTime
    DoEvents
    Loop
' End Pause
    Selection.Find.ClearFormatting
    Selection.Find.Replacement.ClearFormatting
    Selection.Find.Replacement.Highlight = True
    With Selection.Find
        .Text = "<[A-Z]{2,}>"
        .Replacement.Text = "^&"
        .Forward = True
        .Wrap = wdFindStop
        .Format = True
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = True
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    Selection.Find.Execute Replace:=wdReplaceAll
    
' Unhighlight acro repetitions
    Selection.GoTo What:=wdGoToBookmark, name:="TextStart"
    With ActiveDocument.Bookmarks
        .Add Range:=Selection.Range, name:="AcroFindStart"
        .DefaultSorting = wdSortByName
        .ShowHidden = False
    End With
UnhighlightStart:
    Selection.GoTo What:=wdGoToBookmark, name:="AcroFindStart"
    Selection.EndKey Unit:=wdStory, Extend:=wdExtend
    With ActiveDocument.Bookmarks
        .Add Range:=Selection.Range, name:="DocumentEndSelection"
        .DefaultSorting = wdSortByName
        .ShowHidden = False
    End With
    Selection.Find.ClearFormatting
    Selection.Find.Replacement.ClearFormatting
    Selection.Find.Highlight = True
    ActiveDocument.Bookmarks("DocumentEndSelection").Select
    With Selection.Find
        .Text = "<[A-Z]{2,}>"
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindStop
        .Format = True
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = True
        .MatchSoundsLike = False
        .MatchAllWordForms = False
        .Execute
        If .found = False Then GoTo MarkEntries
    End With
    myACRONYM = Selection
    Selection.MoveRight Unit:=wdCharacter, count:=1
    With ActiveDocument.Bookmarks
        .Add Range:=Selection.Range, name:="AcroFindStart"
        .DefaultSorting = wdSortByName
        .ShowHidden = False
    End With
    Selection.Find.ClearFormatting
    Selection.Find.Highlight = True
    Selection.Find.Replacement.ClearFormatting
    Selection.Find.Replacement.Highlight = False
    With Selection.Find
        .Text = myACRONYM
        .Replacement.Text = "^&"
        .Forward = True
        .Wrap = wdFindStop
        .Format = True
        .MatchCase = True
        .MatchWholeWord = True
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    Selection.Find.Execute Replace:=wdReplaceAll
    GoTo UnhighlightStart
    
'Mark index entries for all highlighted acros (uppercase)
MarkEntries:
    Selection.GoTo What:=wdGoToBookmark, name:="TextStart"
    With ActiveDocument.Bookmarks
        .Add Range:=Selection.Range, name:="AcroFindStart"
        .DefaultSorting = wdSortByName
        .ShowHidden = False
    End With
MarkStart:
    ActiveWindow.View.ShowHiddenText = False
' Pause
    lPauseTime = 1
    lStart = Timer
    Do While Timer < lStart + lPauseTime
    DoEvents
    Loop
' End Pause
    Selection.GoTo What:=wdGoToBookmark, name:="AcroFindStart"
    Selection.EndKey Unit:=wdStory, Extend:=wdExtend
    With ActiveDocument.Bookmarks
        .Add Range:=Selection.Range, name:="DocumentEndSelection"
        .DefaultSorting = wdSortByName
        .ShowHidden = False
    End With
    Selection.Find.ClearFormatting
    Selection.Find.Highlight = True
    With Selection.Find
        .Text = "<[A-Z]{2,}>"
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindStop
        .Format = True
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = True
        .MatchSoundsLike = False
        .MatchAllWordForms = False
        .Execute
        If .found = False Then GoTo MacroEnd
    End With
    IndexACRONYM = Selection
    Selection.MoveRight Unit:=wdCharacter, count:=1
    With ActiveDocument.Bookmarks
        .Add Range:=Selection.Range, name:="AcroFindStart"
        .DefaultSorting = wdSortByName
        .ShowHidden = False
    End With
    Selection.MoveLeft Unit:=wdWord, count:=1, Extend:=wdExtend
    ActiveDocument.Indexes.MarkEntry Range:=Selection.Range, Entry:=IndexACRONYM, _
        EntryAutoText:="", CrossReference:="", CrossReferenceAutoText:= _
        "MarkIndexEntry1", BookmarkName:="", Bold:=False, Italic:=False
    GoTo MarkStart
MacroEnd:
    Selection.GoTo What:=wdGoToBookmark, name:="TextStart"
    ActiveWindow.View.ShowHiddenText = True
    Selection.Find.ClearFormatting
    Selection.Find.Replacement.ClearFormatting
    With Selection.Find
        .Text = ""
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindStop
        .Format = True
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
            
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
                    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = myName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    End If
    
End Sub
Sub LandscapeSection()
'
' LandscapeSection Macro
' Macro recorded 13/10/01 by Scan-PC
'
' Note: remove one character ' before "pause" cycles if you have problems with the macro

    TrackChangesWarning

    myName = "LandscapeSection"
    Application.ScreenUpdating = False
       
    Dim MyRange As Range
    Set MyRange = Selection.Range
    
On Error GoTo EndOfFile

    If MsgBox("Is the text that you want converted to Landscape selected?", 4) = vbNo Then End
    
    'Add a space if no text is selected
    If (MyRange.Start = MyRange.End) Then
       Selection.TypeText Text:="  "
       Selection.MoveLeft Unit:=wdCharacter, count:=1, Extend:=wdExtend
       Set MyRange = Selection.Range
    End If
    
    'Expand selection if part of a table is selected
    start1 = MyRange.Start
    end1 = MyRange.End
    MyRange.Select
    Selection.MoveLeft Unit:=wdCharacter, count:=1
    If (Selection.Tables.count <> 0) Then
       Selection.Tables(1).Select
       Selection.MoveLeft Unit:=wdCharacter, count:=1
       Selection.MoveLeft Unit:=wdCharacter, count:=1
       start1 = Selection.Range.Start
    End If
    MyRange.Select
    Selection.MoveRight Unit:=wdCharacter, count:=1
    If (Selection.Tables.count <> 0) Then
       Selection.Tables(1).Select
       Selection.MoveRight Unit:=wdCharacter, count:=1
       end1 = Selection.Range.Start
    End If
    Set MyRange = ActiveDocument.Range(Start:=start1, End:=end1)
        
    'Move to the beginning of the selection
    MyRange.Select
    Selection.MoveLeft Unit:=wdCharacter, count:=1
   
    'Insert a blank line above the selected text and create a bookmark
    Selection.TypeParagraph
    Selection.TypeParagraph
    Selection.MoveLeft Unit:=wdCharacter, count:=1
    Selection.Style = ActiveDocument.Styles("Normal Indent")
    Selection.MoveRight Unit:=wdCharacter, count:=1
    
    With ActiveDocument.Bookmarks
        .Add Range:=Selection.Range, name:="LandscapeBookmark2"
        .DefaultSorting = wdSortByName
        .ShowHidden = False
    End With
    
    'Bookmark the top of the selected text
    Selection.MoveLeft Unit:=wdCharacter, count:=1
    
    With ActiveDocument.Bookmarks
        .Add Range:=Selection.Range, name:="LandscapeBookmark1"
        .DefaultSorting = wdSortByName
        .ShowHidden = False
    End With
    
    'Move to the end of the selection
    MyRange.Select
    If (MyRange.Start <> MyRange.End) Then
       Selection.MoveRight Unit:=wdCharacter, count:=1
    End If
    
    'Insert a blank line after the selected text and create a bookmark
    Selection.TypeParagraph
    Selection.TypeParagraph
    Selection.MoveLeft Unit:=wdCharacter, count:=1
    Selection.Style = ActiveDocument.Styles("Normal Indent")
    
    With ActiveDocument.Bookmarks
        .Add Range:=Selection.Range, name:="LandscapeBookmark3"
        .DefaultSorting = wdSortByName
        .ShowHidden = False
    End With
    
    'Bookmark the end
    Selection.MoveRight Unit:=wdCharacter, count:=1
    
    With ActiveDocument.Bookmarks
        .Add Range:=Selection.Range, name:="LandscapeBookmark4"
        .DefaultSorting = wdSortByName
        .ShowHidden = False
    End With
    
    'Insert page breaks and disconnect header from previous page
    Selection.GoTo What:=wdGoToBookmark, name:="LandscapeBookmark2"
    Selection.InsertBreak Type:=wdSectionBreakNextPage
    ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageHeader
    Selection.HeaderFooter.LinkToPrevious = False

    With Selection.HeaderFooter.PageNumbers
        .NumberStyle = wdPageNumberStyleArabic
        .IncludeChapterNumber = True
        .HeadingLevelForChapter = 0
        .ChapterPageSeparator = wdSeparatorHyphen
        .RestartNumberingAtSection = False
        .StartingNumber = 1
    End With
    
    ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageFooter
    Selection.HeaderFooter.LinkToPrevious = False
        
    ActiveWindow.ActivePane.View.SeekView = wdSeekMainDocument
    
    Selection.GoTo What:=wdGoToBookmark, name:="LandscapeBookmark4"
    Selection.InsertBreak Type:=wdSectionBreakNextPage
    ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageHeader
    Selection.HeaderFooter.LinkToPrevious = False

    With Selection.HeaderFooter.PageNumbers
        .NumberStyle = wdPageNumberStyleArabic
        .IncludeChapterNumber = True
        .HeadingLevelForChapter = 0
        .ChapterPageSeparator = wdSeparatorHyphen
        .RestartNumberingAtSection = False
        .StartingNumber = 1
    End With
    
    ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageFooter
    Selection.HeaderFooter.LinkToPrevious = False
        
    ActiveWindow.ActivePane.View.SeekView = wdSeekMainDocument
    
    'Set up the Landscape page and adjust headers and footers
    Selection.GoTo What:=wdGoToBookmark, name:="LandscapeBookmark2"
    Selection.MoveRight Unit:=wdCharacter, count:=1
    
    'Landscape Section Setup
    With Selection.PageSetup
        .LineNumbering.Active = False
        .Orientation = wdOrientLandscape
        .TopMargin = InchesToPoints(0.75)
        .BottomMargin = InchesToPoints(0.75)
        .LeftMargin = InchesToPoints(0.5)
        .RightMargin = InchesToPoints(0.75)
        .Gutter = InchesToPoints(0)
        .HeaderDistance = InchesToPoints(0.5)
        .FooterDistance = InchesToPoints(0.2)
        .PageWidth = InchesToPoints(11)
        .PageHeight = InchesToPoints(8.5)
        .FirstPageTray = wdPrinterDefaultBin
        .OtherPagesTray = wdPrinterDefaultBin
        .SectionStart = wdSectionNewPage
        .OddAndEvenPagesHeaderFooter = False
        .DifferentFirstPageHeaderFooter = False
        .VerticalAlignment = wdAlignVerticalTop
        .SuppressEndnotes = False
        .MirrorMargins = False
        .TwoPagesOnOne = False
        .GutterPos = wdGutterPosLeft
    End With

    ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageHeader
    Selection.Tables(1).PreferredWidthType = wdPreferredWidthPoints
    Selection.Tables(1).PreferredWidth = InchesToPoints(9.75)
    
    ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageFooter
    Selection.MoveDown Unit:=wdLine, count:=1
    Selection.Tables(1).Select
    Selection.Tables(1).PreferredWidthType = wdPreferredWidthPoints
    Selection.Tables(1).PreferredWidth = InchesToPoints(9.75)
    
    ActiveWindow.ActivePane.View.SeekView = wdSeekMainDocument
            
    ActiveDocument.Bookmarks("LandscapeBookmark3").Delete
    ActiveDocument.Bookmarks("LandscapeBookmark4").Delete
    ActiveDocument.Bookmarks("LandscapeBookmark1").Delete
    
    ActiveDocument.Bookmarks("LandscapeBookmark2").Select
    ActiveDocument.Bookmarks("LandscapeBookmark2").Delete
    Selection.MoveRight Unit:=wdCharacter, count:=1
            
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
                    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = myName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    End If
    
End Sub
Sub NewSection()
'
' NewSection Macro
' Macro recorded 1/9/2007 by Inglis
'
    TrackChangesWarning
    
    myName = "NewSection"
    Application.ScreenUpdating = False
    
On Error GoTo EndOfFile
    
    Selection.HomeKey Unit:=wdLine
    Selection.TypeParagraph
    Selection.MoveUp Unit:=wdLine, count:=1
    Selection.Style = ActiveDocument.Styles("Normal Indent")
    Selection.MoveRight Unit:=wdCharacter, count:=1
    Selection.InsertBreak Type:=wdSectionBreakNextPage
    Selection.EndKey Unit:=wdLine
            
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
                    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = myName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    End If
    
End Sub
Sub PrintCurrentPage()
'
' PrintCurrentPage Macro
' Macro recorded 04/10/01 by Scan-PC
'
    TrackChangesWarning
    
    myName = "PrintCurrentPage"
    Application.ScreenUpdating = False
    
On Error GoTo EndOfFile
    
    Application.PrintOut FileName:="", Range:=wdPrintCurrentPage, Item:= _
        wdPrintDocumentContent, Copies:=1, Pages:="", PageType:=wdPrintAllPages, _
        Collate:=True, Background:=False, PrintToFile:=False
            
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
                    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = myName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    End If
    
End Sub
Sub PrintLetterhead()
'
' PrintLetterhead Macro
' Macro recorded 6/11/2009 by singlis
'
    Dim lngTray As Long
    lngTray = Options.DefaultTrayID
    Options.DefaultTrayID = wdPrinterManualFeed
    Selection.HomeKey Unit:=wdStory

    ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageHeader
    Selection.WholeStory
    Selection.Delete Unit:=wdCharacter, count:=1
    
    ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageFooter
    Selection.WholeStory
    Selection.Delete Unit:=wdCharacter, count:=1
    
    ActiveWindow.ActivePane.View.SeekView = wdSeekMainDocument
    Selection.HomeKey Unit:=wdStory
    
    Application.PrintOut FileName:="", Range:=wdPrintRangeOfPages, Item:= _
        wdPrintDocumentContent, Copies:=1, Pages:="1", PageType:=wdPrintAllPages, _
         ManualDuplexPrint:=False, Collate:=True, Background:=True, PrintToFile:= _
        False, PrintZoomColumn:=0, PrintZoomRow:=0, PrintZoomPaperWidth:=0, _
        PrintZoomPaperHeight:=0
        
    Options.DefaultTrayID = lngTray
        
    If MsgBox("First page of Letter sent to Manual Feed tray. " + _
    "Insert Letterhead into Printer.", vbOKOnly) = vbOK Then
    End If
        
    ActiveDocument.Undo
    ActiveDocument.Undo
               
End Sub
Sub SpaceAfter4()
'
' SpaceAfter4 Macro
' Macro recorded 10/10/01 by Scan-PC
'
    TrackChangesWarning
    
    Selection.ParagraphFormat.SpaceAfter = 4
End Sub
Sub SpaceAfter12()
'
' SpaceAfter14 Macro
' Macro created 11/10/01 by Scan-PC
'
    TrackChangesWarning
    
    Selection.ParagraphFormat.SpaceAfter = 12
End Sub
Sub SpaceAfter24()
'
' SpaceAfter28 Macro
' Macro created 11/10/01 by Scan-PC
'
    TrackChangesWarning
    
    Selection.ParagraphFormat.SpaceAfter = 24
End Sub
Sub SpaceBefore0()
'
' SpaceBefore0 Macro
' Macro created 16/10/01 by Scan-PC
'
    TrackChangesWarning
    
    Selection.ParagraphFormat.SpaceBefore = 0
End Sub
Sub SpaceBefore12()
'
' SpaceBefore14 Macro
' Macro recorded 13/10/01 by Scan-PC
'
    TrackChangesWarning
    
    Selection.ParagraphFormat.SpaceBefore = 12
End Sub
Sub SpaceBefore24()
'
' SpaceBefore28 Macro
' Macro created 16/10/01 by Scan-PC
'
    TrackChangesWarning
    
    Selection.ParagraphFormat.SpaceBefore = 24
End Sub
Sub NormalIndent()
'
' NormalIndent Macro
' Macro recorded 1/9/2007 by Inglis
'
    TrackChangesWarning
    
    myName = "NormalIndent"
    Application.ScreenUpdating = False
    
On Error GoTo EndOfFile

    Dim selectedRange As Range
    Set selectedRange = Selection.Range

    selectedRange.Select

    Dim noBoldStyle As Style
    Dim defaultStyle As Style
    Dim useNoBold As Boolean

    If (ActiveDocument.Styles("Heading 1").NextParagraphStyle = "No Bold 2") Then
        Set defaultStyle = ActiveDocument.Styles("Normal Indent Text")
        useNoBold = True
    Else
        Set defaultStyle = ActiveDocument.Styles("Normal Indent")
        useNoBold = False
    End If
    
    Set noBoldStyle = defaultStyle

    If (useNoBold = False) Then

        For Each Para In Selection.Paragraphs
            Para.Style = noBoldStyle
        Next Para

    Else
           
        Selection.HomeKey Unit:=wdLine
        selectedRange.Select
        Selection.HomeKey Unit:=wdLine

FindHeading:
On Error GoTo StyleSet

        Selection.Previous(Unit:=wdParagraph, count:=1).Select
        
        If (Selection.Style Like "Heading*") Then
            GoTo HeadingFound
        End If
        If (ActiveDocument.Paragraphs(1).Range.Start = _
            Selection.Paragraphs(1).Range.Start) Then
            GoTo StyleSet
        End If
    
        GoTo FindHeading
            
HeadingFound:
        If (Selection.Style Like "Heading*") Then
            If (Selection.Style Like "Heading 1*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 2")
            If (Selection.Style Like "Heading 2*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 3")
            If (Selection.Style Like "Heading 3*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 4")
            If (Selection.Style Like "Heading 4*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 5")
            If (Selection.Style Like "Heading 5*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 6")
            If (Selection.Style Like "Heading 6*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 7")
            If (Selection.Style Like "Heading 7*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 8")
            If (Selection.Style Like "Heading 8*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 9")
        End If
        
StyleSet:
On Error GoTo EndOfFile
        
        selectedRange.Select
        Selection.HomeKey Unit:=wdLine
               
        If (Selection.Paragraphs(1).Style = noBoldStyle) Then
            For Each Para In selectedRange.Paragraphs
                Para.Style = defaultStyle
            Next Para
        Else
            For Each Para In selectedRange.Paragraphs
                Para.Style = noBoldStyle
            Next Para
        End If
            
    End If

    selectedRange.Select
    ActiveWindow.ScrollIntoView selectedRange

EndOfFile:
    myErr = Err.Number
    myText = Err.Description
                    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = myName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    End If
    
End Sub
Sub Heading()
'
' Heading Macro
' Macro recorded 1/9/2007 by Inglis
'
    TrackChangesWarning
    
    myName = "Heading"
    Application.ScreenUpdating = False
    
On Error GoTo EndOfFile

    Dim selectedRange As Range
    Set selectedRange = Selection.Range

    selectedRange.Select

    Dim headingStyle As Style
    Set headingStyle = ActiveDocument.Styles("Heading 1")

FindHeading:
On Error GoTo StyleSet
    If (Selection.Style Like "Heading*") Then
        GoTo HeadingFound
    End If
    If (ActiveDocument.Paragraphs(1).Range.Start = _
        Selection.Paragraphs(1).Range.Start) Then
        GoTo StyleSet
    End If
    
    Selection.Previous(Unit:=wdParagraph, count:=1).Select
    GoTo FindHeading
            
HeadingFound:
    Set headingStyle = Selection.Style
        
StyleSet:
On Error GoTo EndOfFile

    selectedRange.Select
    Selection.HomeKey Unit:=wdLine
               
    For Each Para In selectedRange.Paragraphs
        Para.Style = headingStyle
    Next Para
            
    selectedRange.Select
    ActiveWindow.ScrollIntoView selectedRange

EndOfFile:
    myErr = Err.Number
    myText = Err.Description
                    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = myName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    End If
    
End Sub
Sub NumList1()
    RenumberList (1)
End Sub
Sub NumListA()
    RenumberList (2)
End Sub
Sub BulletList()
    RenumberList (3)
End Sub
Private Sub RenumberList(ListID As Integer)
'
' Numbering Macro
' Macro recorded 1/9/2007 by Inglis
'
    TrackChangesWarning
    
    myName = "RenumberList"
    Application.ScreenUpdating = False
    
On Error GoTo EndOfFile

    Dim MyRange As Range
    Dim lfTemplate As ListTemplate
    Dim continueList As Boolean
    'Dim preserveSpacing As Boolean
    
    Dim selectedRange As Range
    Set selectedRange = Selection.Range
    Dim searchRange As Range
    Set searchRange = Selection.Paragraphs(1).Range
    searchRange.MoveStart Unit:=wdParagraph, count:=-1
    Set searchRange = searchRange.Paragraphs(1).Range
    Set myStyle = searchRange.Paragraphs(1).Style
    
    continueList = False
           
    Dim baseStyle As Style
        
    If (ListID = 1) Then
        Set baseStyle = ActiveDocument.Styles("NumList(1)")
        If (searchRange.Paragraphs(1).Style Like "NumList(1)*") Then
            continueList = True
        End If
    
    Else
        If (ListID = 2) Then
            Set baseStyle = ActiveDocument.Styles("NumList(a)")
            If (searchRange.Paragraphs(1).Style Like "NumList(a)*") Then
                continueList = True
            End If
        Else
            Set baseStyle = ActiveDocument.Styles("Bullet List - 1st level")
            If (searchRange.Paragraphs(1).Style Like "Bullet List*") Then
                continueList = True
            End If
        End If
    End If
    
    For Each Para In selectedRange.Paragraphs
    
        'paraSpaceBefore = para.SpaceBefore
        'paraSpaceAfter = para.SpaceAfter
       
        If ((Para.Style Like "NumList(1)*") Or _
            (Para.Style Like "NumList(a)*") Or _
            (Para.Style Like "Bullet List*")) Then
            paraListLevel = Para.Range.ListFormat.ListLevelNumber
            'preserveSpacing = True
        Else
            paraListLevel = 1
            'preserveSpacing = False
        End If
        
        If (baseStyle = "NumList(a)") Then
            If (paraListLevel = 1) Then
                Para.Style = ActiveDocument.Styles("Bullet List - 1st level")
                Para.Style = ActiveDocument.Styles("NumList(a)")
                
                If (continueList = False) Then
                    Set MyRange = Para.Range
                    Set lfTemplate = MyRange.ListFormat.ListTemplate
                    Para.Range.ListFormat.ApplyListTemplate _
                        ListTemplate:=lfTemplate, _
                        ContinuePreviousList:=continueList
                    continueList = True
                End If
                
            Else
                If (paraListLevel = 2) Then
                    Para.Style = ActiveDocument.Styles("Bullet List - 1st level")
                    Para.Style = ActiveDocument.Styles("NumList(a)(i)")
                Else
                    Para.Style = ActiveDocument.Styles("Bullet List - 1st level")
                    Para.Style = ActiveDocument.Styles("NumList(a)(i)(1)")
                End If
            End If
        Else
            If (baseStyle = "Bullet List - 1st level") Then
                If (paraListLevel = 1) Then
                    Para.Style = ActiveDocument.Styles("Bullet List - 1st level")
                Else
                    If (paraListLevel = 2) Then
                        Para.Style = ActiveDocument.Styles("Bullet List - 2nd level")
                    Else
                        Para.Style = ActiveDocument.Styles("Bullet List - 3rd level")
                    End If
                End If
            Else
                If (paraListLevel = 1) Then
                    Para.Style = ActiveDocument.Styles("Bullet List - 1st level")
                    Para.Style = ActiveDocument.Styles("NumList(1)")
                                    
                    If (continueList = False) Then
                        Set MyRange = Para.Range
                        Set lfTemplate = MyRange.ListFormat.ListTemplate
                        Para.Range.ListFormat.ApplyListTemplate _
                            ListTemplate:=lfTemplate, _
                            ContinuePreviousList:=continueList
                        continueList = True
                    End If
                    
                Else
                    If (paraListLevel = 2) Then
                        Para.Style = ActiveDocument.Styles("Bullet List - 1st level")
                        Para.Style = ActiveDocument.Styles("NumList(1)(a)")
                    Else
                        Para.Style = ActiveDocument.Styles("Bullet List - 1st level")
                        Para.Style = ActiveDocument.Styles("NumList(1)(a)(i)")
                    End If
                End If
            End If
        End If
        
        'If (preserveSpacing) Then
        '    para.SpaceBefore = paraSpaceBefore
        '    para.SpaceAfter = paraSpaceAfter
        'End If
       
    Next Para
    
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
                    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = myName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    End If
    
End Sub
Sub Promote()
    TrackChangesWarning
    
    myName = "Promote"
    topLevelName = myName
    Application.ScreenUpdating = False
    ProgressForm.Label1 = topLevelName + " ... "
    ProgressForm.Show
    PromoteRangeOnly (False)
    ProgressForm.Hide
    Application.ScreenUpdating = True
End Sub
Sub Demote()
    TrackChangesWarning
    
    myName = "Demote"
    topLevelName = myName
    Application.ScreenUpdating = False
    ProgressForm.Label1 = topLevelName + " ... "
    ProgressForm.Show
    DemoteRangeOnly (False)
    ProgressForm.Hide
    Application.ScreenUpdating = True
End Sub
Sub PromoteHeadingOnly()
    TrackChangesWarning
    
    myName = "PromoteHeadingOnly"
    Application.ScreenUpdating = False
    PromoteRangeOnly (True)
    Application.ScreenUpdating = True
End Sub
Sub DemoteHeadingOnly()
    TrackChangesWarning
    
    myName = "DemoteHeadingOnly"
    Application.ScreenUpdating = False
    DemoteRangeOnly (True)
    Application.ScreenUpdating = True
End Sub
Private Sub PromoteRangeOnly(RangeOnly As Boolean)
'
' PromoteRangeOnly Macro - Private
' Macro recorded 1/9/2007 by Inglis
'
On Error GoTo EndOfFile

    Dim rangeStart As Long
    Dim rangeEnd As Long

    Dim selectedRange As Range
    Set selectedRange = Selection.Range
    
    Dim noBoldStyle As Style
    Set noBoldStyle = ActiveDocument.Styles("Normal Indent")

    Dim endOutlineLevel As Integer
    Dim Para As Paragraph
    Dim paraListLevel As Integer
    If ((Selection.Paragraphs(1).Style Like "NumList(1)*") Or _
        (Selection.Paragraphs(1).Style Like "NumList(a)*") Or _
        (Selection.Paragraphs(1).Style Like "Bullet List*")) Then
    
        For Each Para In Selection.Paragraphs
    
            paraSpaceBefore = Para.SpaceBefore
            paraSpaceAfter = Para.SpaceAfter
            
            paraListLevel = Para.Range.ListFormat.ListLevelNumber
        
            If (paraListLevel > 1) Then
                If (Para.Style Like "NumList(a)*") Then
                    If (paraListLevel = 2) Then
                        Para.Style = ActiveDocument.Styles("Bullet List - 1st level")
                        Para.Style = ActiveDocument.Styles("NumList(a)")
                    Else
                        Para.Style = ActiveDocument.Styles("Bullet List - 1st level")
                        Para.Style = ActiveDocument.Styles("NumList(a)(i)")
                    End If
                End If
                If (Para.Style Like "NumList(1)*") Then
                    If (paraListLevel = 2) Then
                        Para.Style = ActiveDocument.Styles("Bullet List - 1st level")
                        Para.Style = ActiveDocument.Styles("NumList(1)")
                    Else
                        Para.Style = ActiveDocument.Styles("Bullet List - 1st level")
                        Para.Style = ActiveDocument.Styles("NumList(1)(a)")
                    End If
                End If
                If (Para.Style Like "Bullet List*") Then
                    If (paraListLevel = 2) Then
                        Para.Style = ActiveDocument.Styles("Bullet List - 1st level")
                    Else
                        Para.Style = ActiveDocument.Styles("Bullet List - 2nd level")
                    End If
                End If
            End If
            
            Para.SpaceBefore = paraSpaceBefore
            Para.SpaceAfter = paraSpaceAfter

        Next Para
    
    Else
    
        If ((Selection.Paragraphs(1).Style Like "Heading*") = False) Then
            GoTo EndOfFile
        End If
    
        EstablishSearchRange (RangeOnly)
        If (RangeOnly = False) Then Set selectedRange = Selection.Range
        
        For Each Para In Selection.Paragraphs
       
          If (Para.Style Like "Heading*") Then
       
            If (Para.Style Like "Heading 2*") Then Para.Style = "Heading 1"
            If (Para.Style Like "Heading 3*") Then Para.Style = "Heading 2"
            If (Para.Style Like "Heading 4*") Then Para.Style = "Heading 3"
            If (Para.Style Like "Heading 5*") Then Para.Style = "Heading 4"
            If (Para.Style Like "Heading 6*") Then Para.Style = "Heading 5"
            If (Para.Style Like "Heading 7*") Then Para.Style = "Heading 6"
            If (Para.Style Like "Heading 8*") Then Para.Style = "Heading 7"
            If (Para.Style Like "Heading 9*") Then Para.Style = "Heading 8"
       
            If (Para.Style Like "Heading 1*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 2")
            If (Para.Style Like "Heading 2*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 3")
            If (Para.Style Like "Heading 3*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 4")
            If (Para.Style Like "Heading 4*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 5")
            If (Para.Style Like "Heading 5*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 6")
            If (Para.Style Like "Heading 6*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 7")
            If (Para.Style Like "Heading 7*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 8")
            If (Para.Style Like "Heading 8*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 9")
            If (Para.Style Like "Heading 9*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 9")
            
          End If
        
          If (Para.Style Like "No Bold*") Then Para.Style = noBoldStyle
        
        Next Para
    End If
    
    selectedRange.Select
    ActiveWindow.ScrollIntoView selectedRange
           
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
                    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = myName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    End If

End Sub
Private Sub DemoteRangeOnly(RangeOnly As Boolean)
'
' DemoteHeadingOnly Macro - Private
' Macro recorded 1/9/2007 by Inglis
'
On Error GoTo EndOfFile

    Dim rangeStart As Long
    Dim rangeEnd As Long

    Dim selectedRange As Range
    Set selectedRange = Selection.Range

    Dim endOutlineLevel As Integer
    Dim Para As Paragraph
    Dim paraListLevel As Integer
    Dim noBoldStyle As Style
    Set noBoldStyle = ActiveDocument.Styles("Normal Indent")
    
    If ((Selection.Paragraphs(1).Style Like "NumList(1)*") Or _
        (Selection.Paragraphs(1).Style Like "NumList(a)*") Or _
        (Selection.Paragraphs(1).Style Like "Bullet List*")) Then
    
        For Each Para In Selection.Paragraphs
        
            paraSpaceBefore = Para.SpaceBefore
            paraSpaceAfter = Para.SpaceAfter

            paraListLevel = Para.Range.ListFormat.ListLevelNumber
        
            If (paraListLevel < 3) Then
                If (Para.Style Like "NumList(a)*") Then
                    If (paraListLevel = 1) Then
                        Para.Style = ActiveDocument.Styles("Bullet List - 1st level")
                        Para.Style = ActiveDocument.Styles("NumList(a)(i)")
                    Else
                        Para.Style = ActiveDocument.Styles("Bullet List - 1st level")
                        Para.Style = ActiveDocument.Styles("NumList(a)(i)(1)")
                    End If
                End If
                If (Para.Style Like "NumList(1)*") Then
                    If (paraListLevel = 1) Then
                        Para.Style = ActiveDocument.Styles("Bullet List - 1st level")
                        Para.Style = ActiveDocument.Styles("NumList(1)(a)")
                    Else
                        Para.Style = ActiveDocument.Styles("Bullet List - 1st level")
                        Para.Style = ActiveDocument.Styles("NumList(1)(a)(i)")
                    End If
                End If
                If (Para.Style Like "Bullet List*") Then
                    If (paraListLevel = 1) Then
                        Para.Style = ActiveDocument.Styles("Bullet List - 2nd level")
                    Else
                        Para.Style = ActiveDocument.Styles("Bullet List - 3rd level")
                    End If
                End If
            End If
            
            Para.SpaceBefore = paraSpaceBefore
            Para.SpaceAfter = paraSpaceAfter
            
        Next Para
        
    Else
 
        If ((Selection.Paragraphs(1).Style Like "Heading*") = False) Then
            GoTo EndOfFile
        End If
 
        EstablishSearchRange (RangeOnly)
        If (RangeOnly = False) Then Set selectedRange = Selection.Range
    
        For Each Para In Selection.Paragraphs
       
          If (Para.Style Like "Heading*") Then
        
            If (Para.Style Like "Heading 8*") Then Para.Style = "Heading 9"
            If (Para.Style Like "Heading 7*") Then Para.Style = "Heading 8"
            If (Para.Style Like "Heading 6*") Then Para.Style = "Heading 7"
            If (Para.Style Like "Heading 5*") Then Para.Style = "Heading 6"
            If (Para.Style Like "Heading 4*") Then Para.Style = "Heading 5"
            If (Para.Style Like "Heading 3*") Then Para.Style = "Heading 4"
            If (Para.Style Like "Heading 2*") Then Para.Style = "Heading 3"
            If (Para.Style Like "Heading 1*") Then Para.Style = "Heading 2"
       
            If (Para.Style Like "Heading 1*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 2")
            If (Para.Style Like "Heading 2*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 3")
            If (Para.Style Like "Heading 3*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 4")
            If (Para.Style Like "Heading 4*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 5")
            If (Para.Style Like "Heading 5*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 6")
            If (Para.Style Like "Heading 6*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 7")
            If (Para.Style Like "Heading 7*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 8")
            If (Para.Style Like "Heading 8*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 9")
            If (Para.Style Like "Heading 9*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 9")
            
          End If
        
          If (Para.Style Like "No Bold*") Then Para.Style = noBoldStyle
        
        Next Para
    End If
    
    selectedRange.Select
    ActiveWindow.ScrollIntoView selectedRange
           
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
                    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = myName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    End If
    
End Sub
Private Sub CreateTableStyle()
'
' CreateTableStyle Macro - Private
' Macro recorded 1/9/2007 by Inglis
'
    myName = "CreateTableStyle"
    
On Error GoTo EndOfFile

    Dim found As Boolean
    Dim docStyle As Style
    found = False
    For Each docStyle In ActiveDocument.Styles
        If (docStyle = "Thales Table") Then found = True
    Next docStyle
    If found Then GoTo EndOfFile
    
    ProgressForm.Label1 = topLevelName + " ... " + myName
    ProgressForm.Repaint

    If (Selection.Tables.count = 0) Then GoTo EndOfFile
    Selection.Tables(1).Select
    
    Dim styTable As Style
    Set styTable = ActiveDocument.Styles.Add( _
        name:="Thales Table", Type:=wdStyleTypeTable)

    With Options
        .DefaultBorderLineStyle = wdLineStyleSingle
        .DefaultBorderLineWidth = wdLineWidth050pt
        .DefaultBorderColorIndex = wdAuto
    End With
    
    With styTable
        With .Table
            With .Condition(wdFirstRow)
                With .Shading
                    .Texture = wdTexture20Percent
                    .ForegroundPatternColorIndex = wdBlack
                    .BackgroundPatternColorIndex = wdWhite
                End With
                With .Borders(wdBorderLeft)
                    .LineStyle = wdLineStyleSingle
                    .LineWidth = wdLineWidth050pt
                    .ColorIndex = wdAuto
                End With
                With .Borders(wdBorderRight)
                    .LineStyle = wdLineStyleSingle
                    .LineWidth = wdLineWidth050pt
                    .ColorIndex = wdAuto
                End With
                With .Borders(wdBorderTop)
                    .LineStyle = wdLineStyleSingle
                    .LineWidth = wdLineWidth050pt
                    .ColorIndex = wdAuto
                End With
                With .Borders(wdBorderBottom)
                    .LineStyle = wdLineStyleSingle
                    .LineWidth = wdLineWidth050pt
                    .ColorIndex = wdAuto
                End With
                With .Borders(wdBorderHorizontal)
                    .LineStyle = wdLineStyleSingle
                    .LineWidth = wdLineWidth050pt
                    .ColorIndex = wdAuto
                End With
                With .Borders(wdBorderVertical)
                    .LineStyle = wdLineStyleSingle
                    .LineWidth = wdLineWidth050pt
                    .ColorIndex = wdAuto
                End With
            End With
            With .Borders
                .InsideLineStyle = wdLineStyleSingle
                .InsideLineWidth = wdLineWidth050pt
                .InsideColorIndex = wdAuto
                .OutsideLineStyle = wdLineStyleSingle
                .OutsideLineWidth = wdLineWidth050pt
                .OutsideColorIndex = wdAuto
            End With
        End With
    End With
    
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... " + myName + ". Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Label1 = topLevelName + " ... " + myName + ". Done"
        ProgressForm.Repaint
    End If
        
End Sub
Sub CreateThalesTableStyle()
'
' CreateThalesTableStyle Macro
' Macro recorded 1/9/2007 by Inglis
'
    TrackChangesWarning
    
    myName = "CreateThalesTableStyle"
    topLevelName = myName
    Application.ScreenUpdating = False
    ProgressForm.Label1 = topLevelName + " ... "
    ProgressForm.Show

On Error GoTo EndOfFile

    CreateTableStyle
    
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
                    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Hide
        Application.ScreenUpdating = True
    End If
    
End Sub
Sub FixHeadingStyles()
'
' FixHeadingStyles Macro
' Macro recorded 17/09/01 by Scan-PC
'
    TrackChangesWarning
    
    ActiveDocument.Styles("Heading 1").NameLocal = "Heading 1"
    ActiveDocument.Styles("Heading 2").NameLocal = "Heading 2"
    ActiveDocument.Styles("Heading 3").NameLocal = "Heading 3"
    ActiveDocument.Styles("Heading 4").NameLocal = "Heading 4"
    ActiveDocument.Styles("Heading 5").NameLocal = "Heading 5"
    ActiveDocument.Styles("Heading 6").NameLocal = "Heading 6"
    ActiveDocument.Styles("Heading 7").NameLocal = "Heading 7"
    ActiveDocument.Styles("Heading 8").NameLocal = "Heading 8"
    ActiveDocument.Styles("Heading 9").NameLocal = "Heading 9"

End Sub
Private Sub DeleteAllUnusedStyles()
'
' DeleteAllUnusedStyles Macro - Private
' Macro recorded 17/09/01 by Scan-PC
'
    myName = "DeleteAllUnusedStyles"
    ProgressForm.Label1 = topLevelName + " ... " + myName
    ProgressForm.Repaint

On Error GoTo EndOfFile

    Dim myStyle As Style
    Dim usedStyles(100) As String
    Dim DeleteStyles(400) As Style
    Dim stylecount As Integer
    Dim deletecount As Integer
    
    stylecount = 0
    deletecount = 0
    
' The following are built in styles that cannot be deleted
' and the style cannot be modified
    usedStyles(1) = "No List"
    usedStyles(2) = "Table Grid"
    usedStyles(3) = "Table Normal"
    
' The following are built in styles that cannot be deleted
' but the style can be modified
    firstbuiltin = 4
    usedStyles(4) = "Normal"
    usedStyles(5) = "Default Paragraph Font"
    usedStyles(6) = "Heading 1"
    usedStyles(7) = "Heading 2"
    usedStyles(8) = "Heading 3"
    usedStyles(9) = "Heading 4"
    usedStyles(10) = "Heading 5"
    usedStyles(11) = "Heading 6"
    usedStyles(12) = "Heading 7"
    usedStyles(13) = "Heading 8"
    usedStyles(14) = "Heading 9"
    
' The following styles are in the approved list of styles
' and should not be removed from the style sheet
    firstcustomstyle = 15
    usedStyles(15) = "Bullet List - 1st level"
    usedStyles(16) = "Bullet List - 2nd level"
    usedStyles(17) = "Bullet List - 3rd level"
    usedStyles(18) = "Column Cell"
    usedStyles(19) = "Column Title"
    usedStyles(20) = "Disclosure"
    usedStyles(21) = "Figure Caption"
    usedStyles(22) = "Figure Container"
    usedStyles(23) = "Footer"
    usedStyles(24) = "Header"
    usedStyles(25) = "No Bold 2"
    usedStyles(26) = "No Bold 3"
    usedStyles(27) = "No Bold 4"
    usedStyles(28) = "No Bold 5"
    usedStyles(29) = "No Bold 6"
    usedStyles(30) = "No Bold 7"
    usedStyles(31) = "No Bold 8"
    usedStyles(32) = "No Bold 9"
    usedStyles(33) = "Normal Indent"
    usedStyles(34) = "Normal Text"
    usedStyles(35) = "NormalCentered"
    usedStyles(36) = "NormalCenteredBold"
    usedStyles(37) = "NormalCenteredBoldCaps"
    usedStyles(38) = "NumList(1)"
    usedStyles(39) = "NumList(1)(a)"
    usedStyles(40) = "NumList(1)(a)(i)"
    usedStyles(41) = "NumList(a)"
    usedStyles(42) = "NumList(a)(i)"
    usedStyles(43) = "NumList(a)(i)(1)"
    usedStyles(44) = "Table Caption"
    usedStyles(45) = "TitleSection1"
    usedStyles(46) = "TitleSection2"
    usedStyles(47) = "TitleSection3"
    usedStyles(48) = "TOC 1"
    usedStyles(49) = "TOC 2"
    usedStyles(50) = "TOC 3"
    usedStyles(51) = "TOC 4"
    usedStyles(52) = "TOC 5"
    usedStyles(53) = "TOC 6"
    usedStyles(54) = "TOC 7"
    usedStyles(55) = "TOC 8"
    usedStyles(56) = "TOC 9"
    usedStyles(57) = "Table of Figures"
    usedStyles(58) = "Index 1"
    usedStyles(59) = "Index Heading"
    usedStyles(60) = "FooterRightAligned"
    usedStyles(61) = "Normal Indent Text"
    usedStyles(62) = "Thales Table"
    usedStyles(63) = "Body Title 1"
    usedStyles(64) = "Body Title 2"
    usedStyles(65) = "LineBottom"
    usedStyles(66) = "LineTop"
    usedStyles(67) = "NormalRightAligned"
    usedStyles(68) = "TitleCentered"
    usedStyles(69) = "TitleRightAligned"
    usedStyles(70) = "Column Cell Numbered"
    stylecount = 70
    
ListUsedStyles:
    For Each Para In ActiveDocument.Paragraphs

       Set myStyle = Para.Style
       
       found = False
       For i = 1 To stylecount
          If (usedStyles(i) = myStyle) Then found = True
       Next i
       If (found = False) Then
          stylecount = stylecount + 1
          usedStyles(stylecount) = myStyle
       End If

    Next Para
      
UnusedStylesList:

    Dim docStyle As Style
    For Each docStyle In ActiveDocument.Styles
        found = False
        For i = 1 To stylecount
            If (docStyle = usedStyles(i)) Then found = True
        Next i
        If ((found = False) And _
            ((docStyle Like "* Char") = False) And _
            ((docStyle Like "* char") = False)) Then
            deletecount = deletecount + 1
            Set DeleteStyles(deletecount) = docStyle
        End If
    Next docStyle
    
    Dim beginI As Integer
    Dim currentI As Integer
    beginI = 1
    currentI = 1
    
DeleteUnused:
    On Error GoTo ErrorOnDelete
    For i = beginI To deletecount
       Set myStyle = DeleteStyles(i)
       currentI = i
       If ((myStyle.InUse = True) And _
           ((myStyle = "") = False)) Then
            ProgressForm.Label1 = topLevelName + " ... " + myName + ": Deleting #" + Str(i)
            ProgressForm.Repaint
            ActiveDocument.Styles(DeleteStyles(i)).Delete
       End If
    Next i
    GoTo EndOfFile
    
ErrorOnDelete:
    Err.Clear
    beginI = currentI + 1
    GoTo DeleteUnused
    
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... " + myName + ". Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Label1 = topLevelName + " ... " + myName + ". Done"
        ProgressForm.Repaint
    End If

End Sub
Sub DeleteUnusedStyles()
'
' DeleteUnusedStyles Macro
' Macro recorded 17/09/01 by Scan-PC
'
    TrackChangesWarning
    
    myName = "DeleteUnusedStyles"
    topLevelName = myName
    Application.ScreenUpdating = False
    ProgressForm.Label1 = topLevelName + " ... "
    ProgressForm.Show

On Error GoTo EndOfFile

    DeleteAllUnusedStyles
    
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Hide
        Application.ScreenUpdating = True
    End If
    
End Sub
Private Sub RenumberSelection()
'
' RenumberSelection Macro - Private
' Macro recorded 12/19/2007 by Inglis
'
    myName = "RenumberSelection"
    ProgressForm.Label1 = topLevelName + " ... " + myName
    ProgressForm.Repaint
    
On Error GoTo EndOfFile

    Dim selectedRange As Range
    Set selectedRange = Selection.Range
    
    Dim myStyle As Style
    Dim startOfList As Boolean
    Dim MyRange As Range
    Dim lfTemplate As ListTemplate
    Dim count As Integer
    count = 0
    
    Dim searchRange As Range
    Set searchRange = Selection.Range
    searchRange.MoveStart Unit:=wdParagraph, count:=-1
       
    If (selectedRange.Paragraphs(1).Style <> searchRange.Paragraphs(1).Style) Then
        startOfList = True
    Else
        startOfList = False
    End If
    
    For Each Para In selectedRange.Paragraphs
        count = count + 1
    
       If ((Para.Style Like "Heading*") Or _
           (Para.Style Like "No Bold*") Or _
           (Para.Style Like "Normal Indent*")) Then
          startOfList = True
       End If

       If ((Para.Style = "NumList(1)") Or _
           (Para.Style = "NumList(a)")) Then
          
          paraSpaceBefore = Para.SpaceBefore
          paraSpaceAfter = Para.SpaceAfter
          
          If (startOfList = True) Then
             ProgressForm.Label1 = topLevelName + " ... " + myName + ": Para # " + Str(count)
             ProgressForm.Repaint
             
             Set myStyle = Para.Style
             Set MyRange = Para.Range
             Para.Style = ActiveDocument.Styles("Bullet List - 1st level")
             Para.Style = myStyle
             Set lfTemplate = MyRange.ListFormat.ListTemplate
             Para.Range.ListFormat.ApplyListTemplate _
                ListTemplate:=lfTemplate, _
                ContinuePreviousList:=False
             startOfList = False
          Else
             Set myStyle = Para.Style
             Para.Style = ActiveDocument.Styles("Bullet List - 1st level")
             Para.Style = myStyle
          End If
          
          Para.SpaceBefore = paraSpaceBefore
          Para.SpaceAfter = paraSpaceAfter
          
       End If
       
    Next Para

    selectedRange.Select
    ActiveWindow.ScrollIntoView selectedRange

EndOfFile:
    myErr = Err.Number
    myText = Err.Description
        
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... " + myName + ". Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Label1 = topLevelName + " ... " + myName + ". Done"
        ProgressForm.Repaint
    End If

End Sub
Sub RestartAllNumbering()
'
' RestartAllNumbering Macro
' Macro recorded 12/19/2007 by Inglis
'
    TrackChangesWarning
    
    myName = "RestartAllNumbering"
    topLevelName = myName
    Application.ScreenUpdating = False
    ProgressForm.Label1 = topLevelName + " ... "
    ProgressForm.Show

On Error GoTo EndOfFile
    
    Dim selectedRange As Range
    Set selectedRange = Selection.Range
        
    Selection.WholeStory
    RenumberSelection
    
    selectedRange.Select
    ActiveWindow.ScrollIntoView selectedRange
    
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Hide
        Application.ScreenUpdating = True
    End If
        
End Sub
Private Sub ReformatFiguresInRange()
'
' ReformatFiguresInRange Macro - Private
' Macro recorded 12/19/2007 by Inglis
'
    myName = "ReformatFiguresInRange"
    ProgressForm.Label1 = topLevelName + " ... " + myName
    ProgressForm.Repaint
    
On Error GoTo EndOfFile

    Dim MyRange As Range
    Set MyRange = Selection.Range
    Dim count As Integer
    count = 0
    For Each myObj In ActiveDocument.InlineShapes
        count = count + 1
        myObj.Select
        If (Selection.InRange(MyRange)) Then
            ProgressForm.Label1 = topLevelName + " ... " + myName + ": Shape #" + Str(count)
            ProgressForm.Repaint
            If (Selection.Tables.count = 0) Then
                Selection.Style = "Figure Container"
            End If
            If (Selection.Style = "Figure Container") Then
                Selection.Next(Unit:=wdParagraph, count:=1).Select
                If (Selection.Style = "Caption") Then
                    Selection.Style = "Figure Caption"
                End If
                If ((Selection.Style = "Figure Caption") = False) Then
                    Selection.Previous(Unit:=wdParagraph, count:=1).Select
                    InsertFigureCaption
                End If
            End If
        End If
    Next myObj

EndOfFile:
    myErr = Err.Number
    myText = Err.Description
    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... " + myName + ". Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Label1 = topLevelName + " ... " + myName + ". Done"
        ProgressForm.Repaint
    End If
    
End Sub
Private Sub ReformatTablesInRange()
'
' ReformatTablesInRange Macro - Private
' Macro recorded 12/19/2007 by Inglis
'
    myName = "ReformatTablesInRange"
    ProgressForm.Label1 = topLevelName + " ... " + myName
    ProgressForm.Repaint
    
On Error GoTo EndOfFile
    
    Dim MyRange As Range
    Set MyRange = Selection.Range
    Dim count As Integer
    count = 0
    For Each myTable In ActiveDocument.Tables
        count = count + 1
        myTable.Select
        If (Selection.InRange(MyRange)) Then
            ProgressForm.Label1 = topLevelName + " ... " + myName + ": Table #" + Str(count)
            ProgressForm.Repaint
            FormatThisTable True, False
        End If
    Next myTable
    
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... " + myName + ". Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Label1 = topLevelName + " ... " + myName + ". Done"
        ProgressForm.Repaint
    End If
    
End Sub
Private Sub EstablishSearchRange(RangeOnly As Boolean)
'
' EstablishSearchRange Macro - Private
' Macro recorded 12/13/2007 by Inglis
'
    myName = "EstablishSearchRange"
    ProgressForm.Label1 = topLevelName + "... Establishing search range ..."
    ProgressForm.Repaint

On Error GoTo EndOfFile

    Dim selectedRange As Range
    Dim startRange As Range
    Dim endRange As Range
    Dim docEndRange As Range
    Set selectedRange = Selection.Range
    Set startRange = selectedRange.Paragraphs(1).Range
    Set endRange = Selection.Paragraphs(Selection.Paragraphs.count).Range
    Set documentRange = selectedRange
    documentRange.MoveEnd Unit:=wdStory
        
    Dim endOutlineLevel As Integer
    Dim thisSectionOnly As Boolean
    
    endOutlineLevel = 10

FindStartHeading:
    If (ActiveDocument.Paragraphs(1).Range.Start = _
        startRange.Paragraphs(1).Range.Start) Then
        GoTo SelectRange
    End If
    If (startRange.Paragraphs(1).Style Like "Heading*") Then
        If (RangeOnly = False) Then
            endOutlineLevel = startRange.Paragraphs(1).OutlineLevel
        Else
            endOutlineLevel = startRange.Paragraphs(1).OutlineLevel + 1
        End If
        GoTo StartFound
    End If
    startRange.MoveStart Unit:=wdParagraph, count:=-1
    GoTo FindStartHeading
    
StartFound:
    endRange.MoveStart Unit:=wdParagraph, count:=1
     
FindEndHeading:
    If (endRange.Paragraphs(1).Range.End = documentRange.End) Then
       GoTo EndFound
    End If
    If (endRange.Paragraphs(1).Style Like "Heading*") Then
        If (endRange.Paragraphs(1).OutlineLevel <= endOutlineLevel) Then
            endRange.MoveStart Unit:=wdParagraph, count:=-1
            GoTo EndFound
        End If
    End If
    endRange.MoveStart Unit:=wdParagraph, count:=1
    GoTo FindEndHeading
            
EndFound:
    Dim searchRange As Range
    Set searchRange = ActiveDocument.Range( _
       Start:=startRange.Start, End:=endRange.End)
    searchRange.Select
    GoTo EndOfFile
        
SelectRange:
    selectedRange.Select
    Err.Clear
        
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... " + myName + ". Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Label1 = topLevelName + " ... " + myName + ". Done"
        ProgressForm.Repaint
    End If

End Sub
Private Sub ReformatStylesInRange(keepSpacing As Boolean)
'
' ReformatStylesInRange Macro - Private
' Macro recorded 12/13/2007 by Inglis
'
    myName = "ReformatStylesInRange"
    Application.ScreenUpdating = False
    ProgressForm.Label1 = topLevelName + " ... " + myName
    ProgressForm.Repaint

On Error GoTo EndOfFile

    Dim selectedRange As Range
    Set selectedRange = Selection.Range

    Dim noBoldStyle As Style
    Dim defaultStyle As Style
    Dim useNoBold As Boolean

    If (ActiveDocument.Styles("Heading 1").NextParagraphStyle = "No Bold 2") Then
        useNoBold = True
    Else
        useNoBold = False
    End If
    Set defaultStyle = ActiveDocument.Styles("Normal Indent")
    Set noBoldStyle = defaultStyle

    Dim MyRange As Range
    Dim lfTemplate As ListTemplate
      
UpdateStyles:
    selectedRange.Select
    ActiveWindow.ScrollIntoView selectedRange
    
    Dim Para As Paragraph
    Dim myStyle As Style
    Dim first As Boolean
    Dim startOfList As Boolean
    Dim count As Integer
    count = 0
    first = True
    startOfList = True
        
    If ((useNoBold) And _
        (selectedRange.Paragraphs(1).Style Like "Heading*") = False) Then
        
FindStartHeading:
        If (ActiveDocument.Paragraphs(1).Range.Start = _
            Selection.Paragraphs(1).Range.Start) Then
            GoTo StyleSet
        End If
        Selection.Previous(Unit:=wdParagraph, count:=1).Select
        If (first) Then
            first = False
            If ((Selection.Paragraphs(1).Style Like "NumList(1)*") Or _
                (Selection.Paragraphs(1).Style Like "NumList(a)*")) Then
                startOfList = False
            End If
        End If
        If (Selection.Paragraphs(1).Style Like "Heading*") Then
            GoTo StartFound
        End If
        GoTo FindStartHeading

StartFound:
        Set Para = Selection.Paragraphs(1)
        If ((Para.Style Like "Heading*") And _
            (useNoBold = True)) Then
            If (Para.Style Like "Heading 1*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 2")
            If (Para.Style Like "Heading 2*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 3")
            If (Para.Style Like "Heading 3*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 4")
            If (Para.Style Like "Heading 4*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 5")
            If (Para.Style Like "Heading 5*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 6")
            If (Para.Style Like "Heading 6*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 7")
            If (Para.Style Like "Heading 7*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 8")
            If (Para.Style Like "Heading 8*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 9")
        Else
            noBoldStyle = defaultStyle
        End If
        
StyleSet:
    End If
    
    For Each Para In selectedRange.Paragraphs
              
        count = count + 1
        ProgressForm.Label1 = topLevelName + " ... " + myName + ": Para #" + Str(count)
        ProgressForm.Repaint
        Para.Range.Select
        
        If (Selection.Tables.count > 0) Then GoTo NextPara
              
        If ((Para.Style Like "Heading*") And _
            (useNoBold = True)) Then
            If (Para.Style Like "Heading 1*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 2")
            If (Para.Style Like "Heading 2*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 3")
            If (Para.Style Like "Heading 3*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 4")
            If (Para.Style Like "Heading 4*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 5")
            If (Para.Style Like "Heading 5*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 6")
            If (Para.Style Like "Heading 6*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 7")
            If (Para.Style Like "Heading 7*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 8")
            If (Para.Style Like "Heading 8*") Then Set noBoldStyle = ActiveDocument.Styles("No Bold 9")
        End If
              
        Set myStyle = Para.Style
        paraListLevel = Para.Range.ListFormat.ListLevelNumber
        
        preserveSpacing = False
              
        If ((Para.Style Like "*Bullet*") Or _
            (Para.Range.ListFormat.ListType = wdListBullet)) Then
            If (keepSpacing) Then
                preserveSpacing = True
            End If
            If (paraListLevel = 1) Then
                Set myStyle = ActiveDocument.Styles("Bullet List - 1st level")
                GoTo ApplyStyle
            End If
            If (paraListLevel = 2) Then
                Set myStyle = ActiveDocument.Styles("Bullet List - 2nd level")
                GoTo ApplyStyle
            End If
            Set myStyle = ActiveDocument.Styles("Bullet List - 3rd level")
            GoTo ApplyStyle
        End If
                     
        If ((Para.Style = "NumList(1)") Or _
            (Para.Style = "NumList(1)(a)") Or _
            (Para.Style = "NumList(1)(a)(i)") Or _
            (Para.Style = "NumList(a)") Or _
            (Para.Style = "NumList(a)(i)") Or _
            (Para.Style = "NumList(a)(i)(1)")) Then
            If (keepSpacing) Then
                preserveSpacing = True
            End If
            GoTo ApplyStyle
        End If
                     
        If ((Para.Style Like "Heading 1*") Or _
           (Para.Style Like "Heading 2*") Or _
           (Para.Style Like "Heading 3*") Or _
           (Para.Style Like "Heading 4*") Or _
           (Para.Style Like "Heading 5*") Or _
           (Para.Style Like "Heading 6*") Or _
           (Para.Style Like "Heading 7*") Or _
           (Para.Style Like "Heading 8*") Or _
           (Para.Style Like "Heading 9*")) Then GoTo ApplyStyle

        If (Para.Style Like "*List*") Then
          If (paraListLevel = 1) Then
             Set myStyle = ActiveDocument.Styles("NumList(1)")
             GoTo ApplyStyle
          End If
          If (paraListLevel = 2) Then
             Set myStyle = ActiveDocument.Styles("NumList(1)(a)")
             GoTo ApplyStyle
          End If
          Set myStyle = ActiveDocument.Styles("NumList(1)(a)(i)")
          GoTo ApplyStyle
        End If

        If (Para.Style Like "*Level*Title*") Then
           If (paraListLevel = 1) Then Set myStyle = ActiveDocument.Styles("Heading 1")
           If (paraListLevel = 2) Then Set myStyle = ActiveDocument.Styles("Heading 2")
           If (paraListLevel = 3) Then Set myStyle = ActiveDocument.Styles("Heading 3")
           If (paraListLevel = 4) Then Set myStyle = ActiveDocument.Styles("Heading 4")
           If (paraListLevel = 5) Then Set myStyle = ActiveDocument.Styles("Heading 5")
           If (paraListLevel = 6) Then Set myStyle = ActiveDocument.Styles("Heading 6")
           If (paraListLevel = 7) Then Set myStyle = ActiveDocument.Styles("Heading 7")
           If (paraListLevel = 8) Then Set myStyle = ActiveDocument.Styles("Heading 8")
           If (paraListLevel = 9) Then Set myStyle = ActiveDocument.Styles("Heading 9")
           GoTo ApplyStyle
        End If
              
        If ((Para.Style Like "*Body*") Or _
            (Para.Style Like "Normal Indent") Or _
            (Para.Style Like "Normal") Or _
            (Para.Style Like "No Bold*")) Then
            Set myStyle = noBoldStyle
            GoTo ApplyStyle
        End If
           
ApplyStyle:
        If ((keepSpacing = True) And (Para.Style = myStyle)) Then
            preserveSpacing = True
        End If

        If (preserveSpacing) Then
            paraSpaceBefore = Para.SpaceBefore
            paraSpaceAfter = Para.SpaceAfter
        End If
        
        If ((Para.Style Like "NumList(1)*") Or _
            (Para.Style Like "NumList(a)*")) Then
                        
            If (startOfList = True) Then
                Set MyRange = Para.Range
                Para.Style = ActiveDocument.Styles("Bullet List - 1st level")
                Para.Style = myStyle
                Set lfTemplate = MyRange.ListFormat.ListTemplate
                Para.Range.ListFormat.ApplyListTemplate _
                    ListTemplate:=lfTemplate, _
                    ContinuePreviousList:=False
                startOfList = False
            Else
                Para.Style = myStyle
            End If
            
            
        Else
            Para.Style = myStyle
            startOfList = True
        End If
        
        If (preserveSpacing) Then
            Para.SpaceBefore = paraSpaceBefore
            Para.SpaceAfter = paraSpaceAfter
        End If
       
NextPara:
    Next Para
          
    selectedRange.Select
    ActiveWindow.ScrollIntoView selectedRange
          
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
        
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... " + myName + ". Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Label1 = topLevelName + " ... " + myName + ". Done"
        ProgressForm.Repaint
    End If
    
End Sub
Private Sub FormatThisTable(includeCaption As Boolean, includeNumbered As Boolean)
'
' FormatThisTable Macro - Private
' Macro recorded 17/09/01 by Scan-PC
'
    myName = "FormatThisTable"
    ProgressForm.Label1 = topLevelName + " ... " + myName
    ProgressForm.Repaint

On Error GoTo EndOfFile

    If (Selection.Tables.count = 0) Then GoTo EndOfFile
    Selection.Tables(1).Select

    If (includeCaption) Then
        Selection.Previous(Unit:=wdParagraph, count:=1).Select
        If (Selection.Style = "Caption") Then
            Selection.Style = ActiveDocument.Styles("Figure Caption")
        End If
        If ((Selection.Style = "Table Caption") = False) Then
            InsertTableCaption
        End If

        Selection.Next(Unit:=wdParagraph, count:=1).Select
        Selection.Tables(1).Select
    End If

    CreateTableStyle

    Selection.Style = "Thales Table"
    Selection.Style = "Column Cell"
    
    With Selection.Cells
        .SetHeight RowHeight:=20, HeightRule:=wdRowHeightAtLeast
    End With
    With Selection.Rows
        .Alignment = wdAlignRowCenter
        .AllowBreakAcrossPages = True
        .SetLeftIndent LeftIndent:=InchesToPoints(-0.18), RulerStyle:= _
            wdAdjustNone
    End With

    If (includeNumbered) Then
        Selection.HomeKey Unit:=wdColumn
        Selection.HomeKey Unit:=wdRow
        Selection.SelectColumn
        Selection.Style = ActiveDocument.Styles("Column Cell Numbered")
    End If
    
    Selection.HomeKey Unit:=wdColumn
    Selection.HomeKey Unit:=wdRow
    Selection.SelectRow
    
    Selection.Style = ActiveDocument.Styles("Column Title")
    Selection.Rows.HeadingFormat = True
    Selection.Cells.VerticalAlignment = wdCellAlignVerticalCenter
       
    Selection.Tables(1).Select
    Selection.Next(Unit:=wdParagraph, count:=1).Select
    If (Selection.Style = "Normal Text") Then GoTo TableFormatted
    
    Selection.Previous(Unit:=wdParagraph, count:=1).Select
    Selection.InsertRowsBelow
    Selection.SplitTable
    Selection.Style = ActiveDocument.Styles("Normal Text")
    Selection.Next(Unit:=wdParagraph, count:=1).Select
    Selection.Tables(1).Delete
    Selection.Previous(Unit:=wdParagraph, count:=1).Select
    
TableFormatted:
    Selection.Previous(Unit:=wdParagraph, count:=1).Select
    Selection.HomeKey Unit:=wdColumn
    Selection.HomeKey Unit:=wdRow

EndOfFile:
    myErr = Err.Number
    myText = Err.Description
    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... " + myName + ". Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Label1 = topLevelName + " ... " + myName + ". Done"
        ProgressForm.Repaint
    End If

End Sub
Sub FormatTableAndCaption()
'
' FormatSingleTable Macro
' Macro recorded 17/09/01 by Scan-PC
'
    TrackChangesWarning
    
    myName = "FormatSingleTable"
    topLevelName = myName
    Application.ScreenUpdating = False
    ProgressForm.Label1 = topLevelName + " ... "
    ProgressForm.Show

On Error GoTo EndOfFile

    FormatThisTable True, False

EndOfFile:
    myErr = Err.Number
    myText = Err.Description
    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Hide
        Application.ScreenUpdating = True
    End If
    
End Sub
Sub FormatNumberedTableAndCaption()
'
' FormatNumberedTableAndCaption Macro
' Macro recorded 17/09/01 by Scan-PC
'
    TrackChangesWarning
    
    myName = "FormatNumberedTableAndCaption"
    topLevelName = myName
    Application.ScreenUpdating = False
    ProgressForm.Label1 = topLevelName + " ... "
    ProgressForm.Show

On Error GoTo EndOfFile

    FormatThisTable True, True

EndOfFile:
    myErr = Err.Number
    myText = Err.Description
    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Hide
        Application.ScreenUpdating = True
    End If
    
End Sub
Sub FormatSingleTable()
'
' FormatSingleTable Macro
' Macro recorded 17/09/01 by Scan-PC
'
    TrackChangesWarning
    
    myName = "FormatSingleTable"
    topLevelName = myName
    Application.ScreenUpdating = False
    ProgressForm.Label1 = topLevelName + " ... "
    ProgressForm.Show

On Error GoTo EndOfFile

    FormatThisTable False, False

EndOfFile:
    myErr = Err.Number
    myText = Err.Description
    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Hide
        Application.ScreenUpdating = True
    End If
    
End Sub
Sub FormatNumberedTable()
'
' FormatNumberedTable Macro
' Macro recorded 17/09/01 by Scan-PC
'
    TrackChangesWarning
    
    myName = "FormatNumberedTable"
    topLevelName = myName
    Application.ScreenUpdating = False
    ProgressForm.Label1 = topLevelName + " ... "
    ProgressForm.Show

On Error GoTo EndOfFile

    FormatThisTable False, True

EndOfFile:
    myErr = Err.Number
    myText = Err.Description
    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Hide
        Application.ScreenUpdating = True
    End If
    
End Sub
Private Sub CopyToolbarToOtherFile()
'
' CopyToolbarToOtherFile Macro - Private
' Macro recorded 12/20/2007 by Inglis
'
    myName = "CopyToolbarToOtherFile"
    ProgressForm.Label1 = topLevelName + " ... " + myName
    ProgressForm.Repaint

On Error GoTo EndOfFile

    Dim myDoc As Document
    Dim myDocFullName As String
    
    Set myDoc = ActiveDocument
    myDocFullName = ActiveDocument.FullName
    
    Dim otherDocFullName As String
    Dim cbar As CommandBar
    Dim doc As Document
    Dim otherDoc As Document
    
    Dim existsPT3 As Boolean
    Dim existsPT4 As Boolean
    Dim existsR02 As Boolean
    
    ProgressForm.Label1 = topLevelName + " ... " + myName + ": Deleting and copying toolbars"
    ProgressForm.Repaint
    
    For Each doc In Documents
        If (doc.FullName = myDocFullName) Then GoTo SkipToEnd
        
        existsPT3 = False
        existsPT4 = False
        existsR02 = False
       
        Set otherDoc = doc
        otherDoc.Activate
        otherDocFullName = otherDoc.FullName
        
        For Each cbar In CommandBars
            If (cbar.name Like "PROPOSAL3") Then
                existsPT3 = True
            End If
            If (cbar.name = "PROPOSAL4") Then
                existsPT4 = True
            End If
            If (cbar.name = "PROPOSAL-REV02") Then
                existsR02 = True
            End If
        Next cbar
            
        If (existsPT3) Then
            Application.OrganizerDelete Source:=otherDocFullName, _
                name:="PROPOSAL3", Object:=wdOrganizerObjectCommandBars
            Application.OrganizerDelete Source:=otherDocFullName, _
                name:="Proposal3", Object:=wdOrganizerObjectProjectItems
        End If
        If (existsPT4) Then
            Application.OrganizerDelete Source:=otherDocFullName, _
                name:="PROPOSAL4", Object:=wdOrganizerObjectCommandBars
            Application.OrganizerDelete Source:=otherDocFullName, _
                name:="Proposal4", Object:=wdOrganizerObjectProjectItems
            Application.OrganizerDelete Source:=otherDocFullName, _
                name:="ProgressForm", Object:=wdOrganizerObjectProjectItems
        End If
        If (existsR02) Then
            Application.OrganizerDelete Source:=otherDocFullName, _
                name:="PROPOSAL-REV02", Object:=wdOrganizerObjectCommandBars
            Application.OrganizerDelete Source:=otherDocFullName, _
                name:="ProposalMacrosRev02", Object:=wdOrganizerObjectProjectItems
        End If
        
        Application.OrganizerCopy _
            Source:=myDocFullName, Destination:=otherDocFullName, _
            name:="PROPOSAL4", Object:=wdOrganizerObjectCommandBars
        Application.OrganizerCopy _
            Source:=myDocFullName, Destination:=otherDocFullName, _
            name:="Proposal4", Object:=wdOrganizerObjectProjectItems
        Application.OrganizerCopy _
            Source:=myDocFullName, Destination:=otherDocFullName, _
            name:="ProgressForm", Object:=wdOrganizerObjectProjectItems
            
        For Each cbar In CommandBars
            If (cbar.name = "PROPOSAL4") Then
                cbar.Visible = True
                GoTo SkipToEnd
            End If
        Next cbar
    
SkipToEnd:
    Next doc
            
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
        
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... " + myName + ". Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Label1 = topLevelName + " ... " + myName + ". Done"
        ProgressForm.Repaint
    End If
    
End Sub
Sub CopyToolbarAndStyles()
'
' CopyToolbarAndStyles Macro
' Macro recorded 12/20/2007 by Inglis
'
    If MsgBox("This will overwrite the styles in the other documents " + _
              "you have open.  The other documents will be saved first.  Do you want to continue?", vbYesNo) = vbNo Then End
              
    myName = "CopyToolbarAndStyles"
    topLevelName = myName
    
    Dim selectedRange As Range
    Set selectedRange = Selection.Range
    'Selection.EndKey unit:=wdStory
    Application.ScreenUpdating = False
    ProgressForm.Label1 = topLevelName + " ... "
    ProgressForm.Show

    Dim otherDoc As Document

On Error GoTo EndOfFile

    Dim myDoc As Document
    Dim doc As Document
    Dim myDocFullName As String
    
    Set myDoc = ActiveDocument
    myDocFullName = myDoc.FullName
    
    ProgressForm.Label1 = topLevelName + " ... Saving documents"
    ProgressForm.Repaint
    For Each doc In Documents
        If (doc.FullName = myDocFullName) Then GoTo NextDoc1
        doc.Save
NextDoc1:
    Next doc
    
    myDoc.Activate
    ProgressForm.Label1 = topLevelName + " ... Copying toolbars"
    ProgressForm.Show
    CopyToolbarToOtherFile
         
    myDoc.Activate
    ProgressForm.Label1 = topLevelName + " ... Copying styles from template"
    ProgressForm.Show
    
    For Each doc In Documents
        If (doc.FullName = myDocFullName) Then GoTo NextDoc2
        doc.CopyStylesFromTemplate Template:=myDocFullName
NextDoc2:
    Next doc
    
    Dim otherDocSelectedRange As Range
    Dim otherDocStyle As Style
    Dim myLT As ListTemplate
    myDoc.Activate
    ProgressForm.Label1 = topLevelName + " ... Copying bullet list style"
    ProgressForm.Show
    
    For Each doc In Documents
        If (doc.FullName = myDocFullName) Then GoTo NextDoc3
        Set otherDoc = doc
            
        otherDoc.Activate
        FixHeadingStyles
        
        Set otherDocSelectedRange = Selection.Range
        Selection.EndKey Unit:=wdStory
        Selection.TypeParagraph
        Set otherDocStyle = Selection.Style
        
        Selection.Style = ActiveDocument.Styles("Bullet List - 1st level")
        Set myLT = Selection.Paragraphs(1).Range.ListFormat.ListTemplate
        With myLT.ListLevels(1)
            .LinkedStyle = "Bullet List - 1st level"
        End With
        With myLT.ListLevels(2)
            .LinkedStyle = "Bullet List - 2nd level"
        End With
        With myLT.ListLevels(3)
            .LinkedStyle = "Bullet List - 3rd level"
        End With
        ActiveDocument.Styles("Bullet List - 1st level").LinkToListTemplate _
            ListTemplate:=myLT, ListLevelNumber:=1
        
        Selection.Paragraphs(1).Style = otherDocStyle
        Selection.EndKey Unit:=wdLine
        Selection.Delete
        
        otherDocSelectedRange.Select
        ActiveWindow.ScrollIntoView otherDocSelectedRange
        
NextDoc3:
    Next doc
        
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
    
    myDoc.Activate
    selectedRange.Select
    ActiveWindow.ScrollIntoView selectedRange
    ProgressForm.Hide
    Application.ScreenUpdating = True
                
    If ((myText = "") = False) Then
        msgText = topLevelName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    End If
    
    If ((otherDoc = "") = False) Then
        otherDoc.Activate
        If MsgBox("The Toolbar and Styles have been copied.  Run the " + _
            "ReformatWholeDocument macro on the other file to update the styles.", vbOKOnly) = vbOK Then End
    End If
End Sub
Sub CopyStylesToOtherDoc()
'
' CopyStylesToOtherDoc Macro
' Macro recorded 12/20/2007 by Inglis
'
    If MsgBox("This will overwrite the styles in the other documents " + _
              "you have open.  The other documents will be saved first.  Do you want to continue?", vbYesNo) = vbNo Then End
              
    myName = "CopyTemplate"
    topLevelName = myName
    
    Dim selectedRange As Range
    Set selectedRange = Selection.Range
    'Selection.EndKey unit:=wdStory
    Application.ScreenUpdating = False
    ProgressForm.Label1 = topLevelName + " ... "
    ProgressForm.Show

    Dim otherDoc As Document

On Error GoTo EndOfFile

    Dim myDoc As Document
    Dim doc As Document
    Dim myDocFullName As String
    
    Set myDoc = ActiveDocument
    myDocFullName = myDoc.FullName
    
    ProgressForm.Label1 = topLevelName + " ... Saving documents"
    ProgressForm.Repaint
    For Each doc In Documents
        If (doc.FullName = myDocFullName) Then GoTo NextDoc1
        doc.Save
NextDoc1:
    Next doc
             
    myDoc.Activate
    ProgressForm.Label1 = topLevelName + " ... Copying styles from template"
    ProgressForm.Show
    
    For Each doc In Documents
        If (doc.FullName = myDocFullName) Then GoTo NextDoc2
        doc.CopyStylesFromTemplate Template:=myDocFullName
NextDoc2:
    Next doc
    
    Dim otherDocSelectedRange As Range
    Dim otherDocStyle As Style
    Dim myLT As ListTemplate
    myDoc.Activate
    ProgressForm.Label1 = topLevelName + " ... Copying bullet list style"
    ProgressForm.Show
    
    For Each doc In Documents
        If (doc.FullName = myDocFullName) Then GoTo NextDoc3
        Set otherDoc = doc
            
        otherDoc.Activate
        FixHeadingStyles
        
        Set otherDocSelectedRange = Selection.Range
        Selection.EndKey Unit:=wdStory
        Selection.TypeParagraph
        Set otherDocStyle = Selection.Style
        
        Selection.Style = ActiveDocument.Styles("Bullet List - 1st level")
        Set myLT = Selection.Paragraphs(1).Range.ListFormat.ListTemplate
        With myLT.ListLevels(1)
            .LinkedStyle = "Bullet List - 1st level"
        End With
        With myLT.ListLevels(2)
            .LinkedStyle = "Bullet List - 2nd level"
        End With
        With myLT.ListLevels(3)
            .LinkedStyle = "Bullet List - 3rd level"
        End With
        ActiveDocument.Styles("Bullet List - 1st level").LinkToListTemplate _
            ListTemplate:=myLT, ListLevelNumber:=1
        
        Selection.Paragraphs(1).Style = otherDocStyle
        Selection.EndKey Unit:=wdLine
        Selection.Delete
        
        otherDocSelectedRange.Select
        ActiveWindow.ScrollIntoView otherDocSelectedRange
        
NextDoc3:
    Next doc
        
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
    
    myDoc.Activate
    selectedRange.Select
    ActiveWindow.ScrollIntoView selectedRange
    ProgressForm.Hide
    Application.ScreenUpdating = True
                
    If ((myText = "") = False) Then
        msgText = topLevelName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    End If
    
    If ((otherDoc = "") = False) Then
        otherDoc.Activate
        If MsgBox("The Toolbar and Styles have been copied.  Run the " + _
            "ReformatWholeDocument macro on the other file to update the styles.", vbOKOnly) = vbOK Then End
    End If
End Sub
Sub CopyToolbar()
'
' CopyToolbar Macro
' Macro recorded 12/20/2007 by Inglis
'
    If (Documents.count = 1) Then
        If MsgBox("There needs to be another file open for this operation.", vbOKOnly) = vbOK Then End
    End If
    
    If (Documents.count > 2) Then
        If MsgBox("There are more than two files open.  Do you want to continue?", vbYesNo) = vbNo Then End
    End If
    
    myName = "CopyToolbar"
    topLevelName = myName
    Application.ScreenUpdating = False
    ProgressForm.Label1 = topLevelName + " ... "
    ProgressForm.Show

On Error GoTo EndOfFile

    CopyToolbarToOtherFile

EndOfFile:
    myErr = Err.Number
    myText = Err.Description
        
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Hide
        Application.ScreenUpdating = True
    End If
    
    If MsgBox("The Toolbar has been copied.", vbOKOnly) = vbOK Then End
    
End Sub
Sub CreateCustomProperties()
'
' CreateCustomProperties Macro
' Macro recorded 12/19/2007 by Inglis
    TrackChangesWarning
    
    Dim myProps(25) As String
    myProps(1) = "DocClassification"
    myProps(2) = "DocContractNumber"
    myProps(3) = "DocDCNAndRev"
    myProps(4) = "DocDCNNumber"
    myProps(5) = "DocDCNRevision"
    myProps(6) = "DocDeliveryDate"
    myProps(7) = "DocDisclosureFooter"
    myProps(8) = "DocProjectLongName"
    myProps(9) = "DocProjectName"
    myProps(10) = "DocProjectShortName"
    myProps(11) = "DocReportTitle"
    myProps(12) = "DocReportShortTitle"
    myProps(13) = "DocReportSubTitle"
    myProps(14) = "DocSDRLorDID"
    myProps(15) = "DocAnnexID"
    myProps(16) = "DocAnnexName"
    myProps(17) = "DocAppID"
    myProps(18) = "DocAppName"
    myProps(19) = "DocProposalTitle"
    myProps(20) = "DocProposalSection"
    myProps(21) = "DocProposalSectionSubTitle"
    myProps(22) = "DocPropShortTitle"
    myProps(23) = "DocPropShortSection"
    myProps(24) = "DocPropSolicitation"
    myProps(25) = "SubClassification"
    numProps = 25
    
    Dim myValues(25) As String
    myValues(1) = "<<Classification>>"
    myValues(2) = "<<DocContractNumber>>"
    myValues(3) = "<<DocDCNAndRev>>"
    myValues(4) = "<<DocDCNNumber>>"
    myValues(5) = "<<DocDCNRevision>>"
    myValues(6) = "<<DocDeliveryDate>>"
    myValues(7) = "Use or disclosure of this data is subject to the Restriction of the title page of this document."
    myValues(8) = "<<DocProjectLongName>>"
    myValues(9) = "<<DocProjectName>>"
    myValues(10) = "<<DocProjectShortName>>"
    myValues(11) = "<<DocReportTitle>>"
    myValues(12) = "<<DocReportShortTitle>>"
    myValues(13) = "<<DocReportSubTitle>>"
    myValues(14) = "<<DocSDRLorDID>>"
    myValues(15) = "<<DocAnx>>"
    myValues(16) = "<<DocAnnexName>>"
    myValues(17) = "<<DocApp>>"
    myValues(18) = "<<DocAppName>>"
    myValues(19) = "<<DocProposalTitle>>"
    myValues(20) = "<<DocProposalSection>>"
    myValues(21) = "<<DocProposalSectionSubTitle>>"
    myValues(22) = "<<DocPropShortTitle>>"
    myValues(23) = "<<DocPropShortSection>>"
    myValues(24) = "<<DocPropSolicitation>>"
    myValues(25) = " "
    
    Dim prop As DocumentProperty
    Dim found(25) As Boolean
    For i = 1 To numProps
        found(i) = False
    Next i
    
    For Each prop In ActiveDocument.CustomDocumentProperties
        For i = 1 To numProps
            If (prop.name = myProps(i)) Then
                found(i) = True
                GoTo NextProp
            End If
        Next i
NextProp:
    Next prop
    
    For i = 1 To numProps
        If (found(i) = False) Then
            ActiveDocument.CustomDocumentProperties.Add name:=myProps(i), _
                LinkToContent:=False, Value:=myValues(i), _
                Type:=msoPropertyTypeString
        End If
    Next i
End Sub
Private Sub CopyBulletListStyle(myDoc As Document, otherDoc As Document)
'
' CopyBulletListStyle Macro
' Macro recorded 12/20/2007 by Inglis
'
    myName = "CopyBulletListStyle"
    ProgressForm.Label1 = topLevelName + " ... " + myName
    ProgressForm.Repaint

On Error GoTo EndOfFile

    Dim myDocSelectedRange As Range
    Dim otherDocSelectedRange As Range
    Dim myLT1 As ListTemplate
    Dim myLT2 As ListTemplate
    Dim myLT3 As ListTemplate
    Dim myStyle1 As Style
    Dim myStyle2 As Style
    Dim myStyle3 As Style
    Dim myDocStyle As Style
    Dim otherDocStyle As Style
    
    myDoc.Activate
    Set myDocSelectedRange = Selection.Range
    Selection.EndKey Unit:=wdStory
    Selection.TypeParagraph
    Set myDocStyle = Selection.Style
    
    Selection.Paragraphs(1).Style = "Bullet List - 1st level"
    Set myLT1 = Selection.Paragraphs(1).Range.ListFormat.ListTemplate
    Set myStyle1 = Selection.Paragraphs(1).Style
    
    Selection.Paragraphs(1).Style = "Bullet List - 2nd level"
    Set myLT2 = Selection.Paragraphs(1).Range.ListFormat.ListTemplate
    Set myStyle2 = Selection.Paragraphs(1).Style
    
    Selection.Paragraphs(1).Style = "Bullet List - 3rd level"
    Set myLT3 = Selection.Paragraphs(1).Range.ListFormat.ListTemplate
    Set myStyle3 = Selection.Paragraphs(1).Style
        
    otherDoc.Activate
    ProgressForm.Label1 = topLevelName + " ... " + myName + ". Copying bullet list style"
    ProgressForm.Show
    
    Set otherDocSelectedRange = Selection.Range
    Selection.EndKey Unit:=wdStory
    Selection.TypeParagraph
    Set otherDocStyle = Selection.Style
    
    Dim docStyle As Style
    Dim found1 As Boolean
    Dim found2 As Boolean
    Dim found3 As Boolean
    found1 = False
    found2 = False
    found3 = False
    
    For Each docStyle In ActiveDocument.Styles
        If (docStyle = "Bullet List - 1st level") Then found1 = True
        If (docStyle = "Bullet List - 2nd level") Then found2 = True
        If (docStyle = "Bullet List - 3rd level") Then found3 = True
    Next docStyle
        
    If (found1 = False) Then
        Set myStyle = ActiveDocument.Styles.Add(name:="Bullet List - 1st level", _
            Type:=wdStyleTypeParagraph)
    End If
    Selection.Paragraphs(1).Style = "Bullet List - 1st level"
    Selection.Paragraphs(1).Range.ListFormat.ApplyListTemplate _
        ListTemplate:=myLT1, ContinuePreviousList:=False
    'ActiveDocument.Styles("Bullet List - 1st level").baseStyle = myStyle1.baseStyle
    'ActiveDocument.Styles("Bullet List - 1st level").ParagraphFormat = myStyle1.ParagraphFormat
    'ActiveDocument.Styles("Bullet List - 1st level").Font = myStyle1.Font
    'ActiveDocument.Styles("Bullet List - 1st level").NextParagraphStyle = myStyle1.NextParagraphStyle
    
    If (found2 = False) Then
        Set myStyle = ActiveDocument.Styles.Add(name:="Bullet List - 2nd level", _
            Type:=wdStyleTypeParagraph)
            
    End If
    Selection.Paragraphs(1).Style = "Bullet List - 2nd level"
    Selection.Paragraphs(1).Range.ListFormat.ApplyListTemplate _
        ListTemplate:=myLT2, ContinuePreviousList:=False
    'ActiveDocument.Styles("Bullet List - 2nd level").baseStyle = myStyle2.baseStyle
    'ActiveDocument.Styles("Bullet List - 2nd level").ParagraphFormat = myStyle2.ParagraphFormat
    'ActiveDocument.Styles("Bullet List - 2nd level").Font = myStyle2.Font
    'ActiveDocument.Styles("Bullet List - 2nd level").NextParagraphStyle = myStyle2.NextParagraphStyle
    
    If (found3 = False) Then
        Set myStyle = ActiveDocument.Styles.Add(name:="Bullet List - 3rd level", _
            Type:=wdStyleTypeParagraph)
    End If
    Selection.Paragraphs(1).Style = "Bullet List - 3rd level"
    Selection.Paragraphs(1).Range.ListFormat.ApplyListTemplate _
        ListTemplate:=myLT3, ContinuePreviousList:=False
    'ActiveDocument.Styles("Bullet List - 3rd level").baseStyle = myStyle3.baseStyle
    'ActiveDocument.Styles("Bullet List - 3rd level").ParagraphFormat = myStyle3.ParagraphFormat
    'ActiveDocument.Styles("Bullet List - 3rd level").Font = myStyle3.Font
    'ActiveDocument.Styles("Bullet List - 3rd level").NextParagraphStyle = myStyle3.NextParagraphStyle
        
    Selection.Paragraphs(1).Style = otherDocStyle
    Selection.EndKey Unit:=wdLine
    Selection.Delete
    otherDocSelectedRange.Select
        
    myDoc.Activate
    ProgressForm.Label1 = topLevelName + " ... " + myName + ". Copy bullet list done"
    ProgressForm.Show
    
    Selection.Paragraphs(1).Style = myDocStyle
    Selection.EndKey Unit:=wdLine
    Selection.Delete
    myDocSelectedRange.Select
        
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
                    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... " + myName + ". Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Label1 = topLevelName + " ... " + myName + ". Done"
        ProgressForm.Repaint
    End If
    
End Sub
Sub CopyBulletList()
'
' CopyBulletList Macro
' Macro recorded 12/20/2007 by Inglis
'
    TrackChangesWarning
    
    myName = "CopyBulletList"
    topLevelName = myName
    ProgressForm.Label1 = topLevelName + " ... "
    ProgressForm.Show
    Application.ScreenUpdating = False

    Dim otherDoc As Document

On Error GoTo EndOfFile

    Dim myDoc As Document
    Dim doc As Document
    Dim myDocFullName As String
    
    Set myDoc = ActiveDocument
    myDocFullName = myDoc.FullName
    
    myDoc.Activate
    ProgressForm.Label1 = topLevelName + " ... Copying bullet list style"
    ProgressForm.Show
    For Each doc In Documents
        If (doc.FullName = myDocFullName) Then GoTo NextDoc3
        Set otherDoc = doc
        CopyBulletListStyle myDoc, otherDoc
NextDoc3:
    Next doc
    
    myDoc.Activate
    ProgressForm.Label1 = topLevelName + " ... Done"
    ProgressForm.Show
    
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
                
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Hide
        Application.ScreenUpdating = True
    End If
    
    If ((otherDoc = "") = False) Then
        otherDoc.Activate
    End If
End Sub
Private Sub DeleteBlanks()
'
' DeleteBlanks Macro - Private
' Macro recorded 29/10/01 by Scan-PC
'
    myName = "DeleteBlanks"
    ProgressForm.Label1 = topLevelName + " ... " + myName
    ProgressForm.Repaint

On Error GoTo EndOfFile
    
    Dim selectedRange As Range
    Set selectedRange = Selection.Range
    
    Selection.Find.ClearFormatting
    Selection.Find.Replacement.ClearFormatting
        
    Dim retrycount As Integer
    retrycount = 5
    
ReplaceBlanks:
    selectedRange.Select
    With Selection.Find
        .Text = "^p^p"
        .Replacement.Text = "^p"
        .Forward = True
        .Wrap = wdFindStop
        .Format = False
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    If (Selection.Find.Execute(Replace:=wdReplaceAll) = False) Then
       GoTo SelectRange
    End If
    
    retrycount = retrycount - 1
    If (retrycount = 0) Then GoTo SelectRange
    GoTo ReplaceBlanks

SelectRange:
    selectedRange.Select
    ActiveWindow.ScrollIntoView selectedRange

EndOfFile:
    myErr = Err.Number
    myText = Err.Description

    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... " + myName + ". Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Label1 = topLevelName + " ... " + myName + ". Done"
        ProgressForm.Repaint
    End If
    
End Sub
Sub ParagraphBlankDelete()
'
' ParagraphBlankDelete Macro
' Macro recorded 29/10/01 by Scan-PC
'
    TrackChangesWarning
    
    If MsgBox("Do you have the RIGHT SELECTION of text to remove blank paragraphs from?", 4) = vbNo Then End
    
    myName = "ParagraphBlankDelete"
    topLevelName = myName
    Application.ScreenUpdating = False
    ProgressForm.Label1 = topLevelName + " ... "
    ProgressForm.Show

On Error GoTo EndOfFile
    
    DeleteBlanks
    
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Hide
        Application.ScreenUpdating = True
    End If
    
End Sub
Sub PasteUnformatted()
'
' PasteUnformatted Macro
' Macro recorded 18/09/01 by Scan-PC
'
    TrackChangesWarning
    
    myName = "PasteUnformatted"
    Application.ScreenUpdating = False
    
On Error GoTo EndOfFile
    
    Selection.PasteSpecial Link:=False, DataType:=wdPasteText, Placement:= _
        wdInLine, DisplayAsIcon:=False
        
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
                    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = myName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    End If

End Sub
Sub PasteFormatted()
'
' PasteFormatted Macro
' Macro recorded 12/13/2007 by Inglis
'
    TrackChangesWarning
    
    myName = "PasteFormatted"
    topLevelName = myName
    Application.ScreenUpdating = False
    ProgressForm.Label1 = topLevelName + " ... "
    ProgressForm.Show

On Error GoTo EndOfFile
    
    Dim found As Boolean
    Dim defaultStyle As Style
    Dim useNoBold As Boolean
    
    If (ActiveDocument.Styles("Heading 1").NextParagraphStyle = "No Bold 2") Then
        useNoBold = True
    Else
        useNoBold = False
    End If
    Set defaultStyle = ActiveDocument.Styles("Normal Indent")

BookmarkInsertionPoint:

   Selection.TypeParagraph
   Selection.Style = "Normal Indent"
   
   ActiveDocument.Bookmarks.Add _
        name:="startInsertion", Range:=Selection.Range
          
   Selection.TypeParagraph
   Selection.Style = "Normal Indent"
          
   Selection.TypeParagraph
   Selection.Style = "Normal Indent"
   
   ActiveDocument.Bookmarks.Add _
        name:="endInsertion", Range:=Selection.Range
    
    Selection.Previous(Unit:=wdParagraph, count:=1).Select
    Selection.HomeKey Unit:=wdLine
          
SaveFileSettings:
    
    Dim myPageSetup As PageSetup
    Set myPageSetup = ActiveDocument.PageSetup
        
CreateScratchFile:
    Dim myDocName As String
    Dim myDocFullName As String
    Dim myDocument As Document
    Dim myScratchDocument As Document
    myDocName = ActiveDocument.name
    myDocFullName = ActiveDocument.FullName
    Set myDocument = ActiveDocument
    
    If (myScratchName <> "") Then
        found = False
        For Each doc In Documents
            If doc.name = myScratchName Then
                found = True
                Set myScratchDocument = doc
            End If
        Next doc
        If found <> True Then
            myScratchName = ""
        End If
    End If
        
    If (myScratchName = "") Then
        Documents.Add Template:="Normal", NewTemplate:=False, DocumentType:=0
        myScratchName = ActiveDocument.name
        Set myScratchDocument = ActiveDocument
    End If
    
    myScratchDocument.Activate
    ProgressForm.Label1 = topLevelName + " ... Activating scratch file"
    ProgressForm.Show
    ActiveDocument.UndoClear
    Selection.WholeStory
    Selection.Delete Unit:=wdCharacter, count:=1
    Selection.Paste

FixHeadingStyles:
    myScratchDocument.CopyStylesFromTemplate Template:=myDocFullName
    FixHeadingStyles
    
RemoveBreaks:
    Selection.WholeStory
    Selection.Find.ClearFormatting
    Selection.Find.Replacement.ClearFormatting
    With Selection.Find
        .Text = "^b"
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindContinue
        .Format = False
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    Selection.Find.Execute Replace:=wdReplaceAll
    
DeleteBlanks:
    Selection.WholeStory
    DeleteBlanks
   
ReapplyStyles:
    Selection.WholeStory
    ReformatStylesInRange (True)
           
FormatTables:
    GetSelectionToFormat
    ReformatTablesInRange
    
FormatFigures:
    GetSelectionToFormat
    ReformatFiguresInRange
    
DeleteUnused:
    DeleteAllUnusedStyles
                     
PageSettings:
    ActiveDocument.PageSetup = myPageSetup
       
PasteFromScratch:
    Selection.WholeStory
    Selection.Copy
    
    myDocument.Activate
    Selection.Paste

RestartNumbering:
    Dim InsertedTextRange As Range
    Set InsertedTextRange = ActiveDocument.Range( _
       Start:=ActiveDocument.Bookmarks("startInsertion").Range.Start, _
       End:=ActiveDocument.Bookmarks("endInsertion").Range.End)
       
    InsertedTextRange.Select
    RenumberSelection
    
    ActiveDocument.Bookmarks("startInsertion").Select
    ActiveDocument.Bookmarks("startInsertion").Delete
    Selection.EndKey Unit:=wdLine
    Selection.Delete
    ActiveDocument.Bookmarks("endInsertion").Select
    ActiveDocument.Bookmarks("endInsertion").Delete
    Selection.EndKey Unit:=wdLine
    Selection.Delete
    'Selection.Previous(unit:=wdParagraph, count:=1).Select
    'Selection.Delete
        
UpdateFieldsAndTOC:
    UpdateFieldsAndTOC
    
    InsertedTextRange.Select
    ActiveWindow.ScrollIntoView InsertedTextRange
    
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Hide
        Application.ScreenUpdating = True
    End If
    
End Sub
Sub PasteFormattedQuick()
'
' PasteFormattedQuick Macro
' Macro recorded 12/13/2007 by Inglis
'
    TrackChangesWarning
    
    myName = "PasteFormattedQuick"
    topLevelName = myName
    Application.ScreenUpdating = False
    ProgressForm.Label1 = topLevelName + " ... "
    ProgressForm.Show

On Error GoTo EndOfFile
    
    Dim found As Boolean
    Dim defaultStyle As Style
    Dim useNoBold As Boolean
    
    If (ActiveDocument.Styles("Heading 1").NextParagraphStyle = "No Bold 2") Then
        useNoBold = True
    Else
        useNoBold = False
    End If
    Set defaultStyle = ActiveDocument.Styles("Normal Indent")

BookmarkInsertionPoint:

   Selection.TypeParagraph
   Selection.Style = "Normal Indent"
   
   ActiveDocument.Bookmarks.Add _
        name:="startInsertion", Range:=Selection.Range
          
   Selection.TypeParagraph
   Selection.Style = "Normal Indent"
          
   Selection.TypeParagraph
   Selection.Style = "Normal Indent"
   
   ActiveDocument.Bookmarks.Add _
        name:="endInsertion", Range:=Selection.Range
    
    Selection.Previous(Unit:=wdParagraph, count:=1).Select
    Selection.HomeKey Unit:=wdLine
          
SaveFileSettings:
    
    Dim myPageSetup As PageSetup
    Set myPageSetup = ActiveDocument.PageSetup
        
CreateScratchFile:
    Dim myDocName As String
    Dim myDocFullName As String
    Dim myDocument As Document
    Dim myScratchDocument As Document
    myDocName = ActiveDocument.name
    myDocFullName = ActiveDocument.FullName
    Set myDocument = ActiveDocument
    
    If (myScratchName <> "") Then
        found = False
        For Each doc In Documents
            If doc.name = myScratchName Then
                found = True
                Set myScratchDocument = doc
            End If
        Next doc
        If found <> True Then
            myScratchName = ""
        End If
    End If
        
    If (myScratchName = "") Then
        Documents.Add Template:="Normal", NewTemplate:=False, DocumentType:=0
        myScratchName = ActiveDocument.name
        Set myScratchDocument = ActiveDocument
    End If
    
    myScratchDocument.Activate
    ProgressForm.Label1 = topLevelName + " ... Activating scratch file"
    ProgressForm.Show
    ActiveDocument.UndoClear
    Selection.WholeStory
    Selection.Delete Unit:=wdCharacter, count:=1
    Selection.Paste

FixHeadingStyles:
    myScratchDocument.CopyStylesFromTemplate Template:=myDocFullName
    FixHeadingStyles
    
RemoveBreaks:
    Selection.WholeStory
    Selection.Find.ClearFormatting
    Selection.Find.Replacement.ClearFormatting
    With Selection.Find
        .Text = "^b"
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindContinue
        .Format = False
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    Selection.Find.Execute Replace:=wdReplaceAll
                     
PageSettings:
    ActiveDocument.PageSetup = myPageSetup
       
PasteFromScratch:
    Selection.WholeStory
    Selection.Copy
    
    myDocument.Activate
    Selection.Paste

RestartNumbering:
    Dim InsertedTextRange As Range
    Set InsertedTextRange = ActiveDocument.Range( _
       Start:=ActiveDocument.Bookmarks("startInsertion").Range.Start, _
       End:=ActiveDocument.Bookmarks("endInsertion").Range.End)
       
    InsertedTextRange.Select
    RenumberSelection
    
    ActiveDocument.Bookmarks("startInsertion").Select
    ActiveDocument.Bookmarks("startInsertion").Delete
    Selection.EndKey Unit:=wdLine
    Selection.Delete
    ActiveDocument.Bookmarks("endInsertion").Select
    ActiveDocument.Bookmarks("endInsertion").Delete
    Selection.EndKey Unit:=wdLine
    Selection.Delete
    'Selection.Previous(unit:=wdParagraph, count:=1).Select
    'Selection.Delete
        
UpdateFieldsAndTOC:
    UpdateFieldsAndTOC
    
    InsertedTextRange.Select
    ActiveWindow.ScrollIntoView InsertedTextRange
    
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Hide
        Application.ScreenUpdating = True
    End If
    
End Sub
Sub SetupShortcuts()
'
' SetupShortcuts Macro
' Macro recorded 12/12/2007 by Inglis
'
    TrackChangesWarning
    
    myName = "SetupShortcuts"
    Application.ScreenUpdating = False
    
On Error GoTo EndOfFile
    
    Dim kbNew As KeyBinding

    Set kbNew = KeyBindings.Add(KeyCategory:=wdKeyCategoryMacro, _
        Command:="SelectionCorrectStyle", _
        KeyCode:=BuildKeyCode(wdKeyAlt, wdKeyA))
    Set kbNew = KeyBindings.Add(KeyCategory:=wdKeyCategoryStyle, _
        Command:="Heading 1", _
        KeyCode:=BuildKeyCode(wdKeyAlt, wdKey1))
    Set kbNew = KeyBindings.Add(KeyCategory:=wdKeyCategoryStyle, _
        Command:="Heading 2", _
        KeyCode:=BuildKeyCode(wdKeyAlt, wdKey2))
    Set kbNew = KeyBindings.Add(KeyCategory:=wdKeyCategoryStyle, _
        Command:="Heading 3", _
        KeyCode:=BuildKeyCode(wdKeyAlt, wdKey3))
    Set kbNew = KeyBindings.Add(KeyCategory:=wdKeyCategoryStyle, _
        Command:="Heading 4", _
        KeyCode:=BuildKeyCode(wdKeyAlt, wdKey4))
    Set kbNew = KeyBindings.Add(KeyCategory:=wdKeyCategoryStyle, _
        Command:="Heading 5", _
        KeyCode:=BuildKeyCode(wdKeyAlt, wdKey5))
    Set kbNew = KeyBindings.Add(KeyCategory:=wdKeyCategoryStyle, _
        Command:="Heading 6", _
        KeyCode:=BuildKeyCode(wdKeyAlt, wdKey6))
    Set kbNew = KeyBindings.Add(KeyCategory:=wdKeyCategoryStyle, _
        Command:="Heading 7", _
        KeyCode:=BuildKeyCode(wdKeyAlt, wdKey7))
    Set kbNew = KeyBindings.Add(KeyCategory:=wdKeyCategoryStyle, _
        Command:="Heading 8", _
        KeyCode:=BuildKeyCode(wdKeyAlt, wdKey8))
    Set kbNew = KeyBindings.Add(KeyCategory:=wdKeyCategoryStyle, _
        Command:="Heading 9", _
        KeyCode:=BuildKeyCode(wdKeyAlt, wdKey9))

    Set kbNew = KeyBindings.Add(KeyCategory:=wdKeyCategoryMacro, _
        Command:="SelectionCorrectStyle", _
        KeyCode:=BuildKeyCode(wdKeyControl, wdKey0))
    Set kbNew = KeyBindings.Add(KeyCategory:=wdKeyCategoryStyle, _
        Command:="Heading 1", _
        KeyCode:=BuildKeyCode(wdKeyControl, wdKey1))
    Set kbNew = KeyBindings.Add(KeyCategory:=wdKeyCategoryStyle, _
        Command:="Heading 2", _
        KeyCode:=BuildKeyCode(wdKeyControl, wdKey2))
    Set kbNew = KeyBindings.Add(KeyCategory:=wdKeyCategoryStyle, _
        Command:="Heading 3", _
        KeyCode:=BuildKeyCode(wdKeyControl, wdKey3))
    Set kbNew = KeyBindings.Add(KeyCategory:=wdKeyCategoryStyle, _
        Command:="Heading 4", _
        KeyCode:=BuildKeyCode(wdKeyControl, wdKey4))
    Set kbNew = KeyBindings.Add(KeyCategory:=wdKeyCategoryStyle, _
        Command:="Heading 5", _
        KeyCode:=BuildKeyCode(wdKeyControl, wdKey5))
    Set kbNew = KeyBindings.Add(KeyCategory:=wdKeyCategoryStyle, _
        Command:="Heading 6", _
        KeyCode:=BuildKeyCode(wdKeyControl, wdKey6))
    Set kbNew = KeyBindings.Add(KeyCategory:=wdKeyCategoryStyle, _
        Command:="Heading 7", _
        KeyCode:=BuildKeyCode(wdKeyControl, wdKey7))
    Set kbNew = KeyBindings.Add(KeyCategory:=wdKeyCategoryStyle, _
        Command:="Heading 8", _
        KeyCode:=BuildKeyCode(wdKeyControl, wdKey8))
    Set kbNew = KeyBindings.Add(KeyCategory:=wdKeyCategoryStyle, _
        Command:="Heading 9", _
        KeyCode:=BuildKeyCode(wdKeyControl, wdKey9))
       
    Set kbNew = KeyBindings.Add(KeyCategory:=wdKeyCategoryMacro, _
        Command:="SaveForWeb", _
        KeyCode:=BuildKeyCode(wdKeyControl, wdKey0))
    Set kbNew = KeyBindings.Add(KeyCategory:=wdKeyCategoryMacro, _
        Command:="SetToPrintLayout", _
        KeyCode:=BuildKeyCode(wdKeyAlt, wdKey0))

With ActiveWindow
    With .View
        .FieldShading = wdFieldShadingAlways
    End With
End With
    
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
                    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = myName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    End If
    
End Sub
Sub SetDefaultToNoBold()
'
' DefaultNoBold Macro
' Macro recorded 12/11/2007 by Inglis
'
    TrackChangesWarning
    
    myName = "SetDefaultToNoBold"
    Application.ScreenUpdating = False
    
On Error GoTo EndOfFile
    
    With ActiveDocument.Styles("Heading 1")
        .AutomaticallyUpdate = False
        .baseStyle = "Normal"
        .NextParagraphStyle = "No Bold 2"
    End With
    With ActiveDocument.Styles("Heading 2")
        .AutomaticallyUpdate = False
        .baseStyle = "Normal"
        .NextParagraphStyle = "No Bold 3"
    End With
    With ActiveDocument.Styles("Heading 3")
        .AutomaticallyUpdate = False
        .baseStyle = "Normal"
        .NextParagraphStyle = "No Bold 4"
    End With
    With ActiveDocument.Styles("Heading 4")
        .AutomaticallyUpdate = False
        .baseStyle = "Normal"
        .NextParagraphStyle = "No Bold 5"
    End With
    With ActiveDocument.Styles("Heading 5")
        .AutomaticallyUpdate = False
        .baseStyle = "Normal"
        .NextParagraphStyle = "No Bold 6"
    End With
    With ActiveDocument.Styles("Heading 6")
        .AutomaticallyUpdate = False
        .baseStyle = "Normal"
        .NextParagraphStyle = "No Bold 7"
    End With
    With ActiveDocument.Styles("Heading 7")
        .AutomaticallyUpdate = False
        .baseStyle = "Normal"
        .NextParagraphStyle = "No Bold 8"
    End With
    With ActiveDocument.Styles("Heading 8")
        .AutomaticallyUpdate = False
        .baseStyle = "Normal"
        .NextParagraphStyle = "No Bold 9"
    End With
    With ActiveDocument.Styles("No Bold 2")
        .AutomaticallyUpdate = False
        .baseStyle = "Heading 2"
        .NextParagraphStyle = "No Bold 2"
    End With
    With ActiveDocument.Styles("No Bold 3")
        .AutomaticallyUpdate = False
        .baseStyle = "Heading 3"
        .NextParagraphStyle = "No Bold 3"
    End With
    With ActiveDocument.Styles("No Bold 4")
        .AutomaticallyUpdate = False
        .baseStyle = "Heading 4"
        .NextParagraphStyle = "No Bold 4"
    End With
    With ActiveDocument.Styles("No Bold 5")
        .AutomaticallyUpdate = False
        .baseStyle = "Heading 5"
        .NextParagraphStyle = "No Bold 5"
    End With
    With ActiveDocument.Styles("No Bold 6")
        .AutomaticallyUpdate = False
        .baseStyle = "Heading 6"
        .NextParagraphStyle = "No Bold 6"
    End With
    With ActiveDocument.Styles("No Bold 7")
        .AutomaticallyUpdate = False
        .baseStyle = "Heading 7"
        .NextParagraphStyle = "No Bold 7"
    End With
    With ActiveDocument.Styles("No Bold 8")
        .AutomaticallyUpdate = False
        .baseStyle = "Heading 8"
        .NextParagraphStyle = "No Bold 8"
    End With
    With ActiveDocument.Styles("No Bold 9")
        .AutomaticallyUpdate = False
        .baseStyle = "Heading 9"
        .NextParagraphStyle = "No Bold 9"
    End With
    
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
                    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = myName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    End If

End Sub
Sub SetDefaultToNormalIndent()
'
' SetDefaultNormalIndent Macro
' Macro recorded 12/11/2007 by Inglis
'
    TrackChangesWarning
    
    myName = "SetDefaultToNormalIndent"
    Application.ScreenUpdating = False
    
On Error GoTo EndOfFile
    
    With ActiveDocument.Styles("Heading 1")
        .AutomaticallyUpdate = False
        .baseStyle = "Normal"
        .NextParagraphStyle = "Normal Indent"
    End With
    With ActiveDocument.Styles("Heading 2")
        .AutomaticallyUpdate = False
        .baseStyle = "Normal"
        .NextParagraphStyle = "Normal Indent"
    End With
    With ActiveDocument.Styles("Heading 3")
        .AutomaticallyUpdate = False
        .baseStyle = "Normal"
        .NextParagraphStyle = "Normal Indent"
    End With
    With ActiveDocument.Styles("Heading 4")
        .AutomaticallyUpdate = False
        .baseStyle = "Normal"
        .NextParagraphStyle = "Normal Indent"
    End With
    With ActiveDocument.Styles("Heading 5")
        .AutomaticallyUpdate = False
        .baseStyle = "Normal"
        .NextParagraphStyle = "Normal Indent"
    End With
    With ActiveDocument.Styles("Heading 6")
        .AutomaticallyUpdate = False
        .baseStyle = "Normal"
        .NextParagraphStyle = "Normal Indent"
    End With
    With ActiveDocument.Styles("Heading 7")
        .AutomaticallyUpdate = False
        .baseStyle = "Normal"
        .NextParagraphStyle = "Normal Indent"
    End With
    With ActiveDocument.Styles("Heading 8")
        .AutomaticallyUpdate = False
        .baseStyle = "Normal"
        .NextParagraphStyle = "Normal Indent"
    End With
    
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
                    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = myName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    End If
    
End Sub
Sub ReverseNoBoldIndent()
'
' ReverseNoBoldIndent Macro
' Macro recorded 1/10/2008 by Inglis
'
    TrackChangesWarning
    
    LeftIndent = ActiveDocument.Styles("No Bold 2").ParagraphFormat.LeftIndent
    If (ActiveDocument.Styles("No Bold 2").ParagraphFormat.LeftIndent = 0) Then
    
    If (ActiveDocument.Styles("No Bold 2").ParagraphFormat.TabStops(1).Position = 25.2) Then
        ActiveDocument.Styles("No Bold 2").ParagraphFormat.TabStops.ClearAll
        ActiveDocument.Styles("No Bold 2").ParagraphFormat.TabStops.Add Position:= _
            InchesToPoints(1.19), Alignment:=wdAlignTabLeft, Leader:=wdTabLeaderSpaces
        ActiveDocument.Styles("No Bold 3").ParagraphFormat.TabStops.ClearAll
        ActiveDocument.Styles("No Bold 3").ParagraphFormat.TabStops.Add Position:= _
            InchesToPoints(1.19), Alignment:=wdAlignTabLeft, Leader:=wdTabLeaderSpaces
        ActiveDocument.Styles("No Bold 4").ParagraphFormat.TabStops.ClearAll
        ActiveDocument.Styles("No Bold 4").ParagraphFormat.TabStops.Add Position:= _
            InchesToPoints(1.19), Alignment:=wdAlignTabLeft, Leader:=wdTabLeaderSpaces
        ActiveDocument.Styles("No Bold 5").ParagraphFormat.TabStops.ClearAll
        ActiveDocument.Styles("No Bold 5").ParagraphFormat.TabStops.Add Position:= _
            InchesToPoints(1.19), Alignment:=wdAlignTabLeft, Leader:=wdTabLeaderSpaces
        ActiveDocument.Styles("No Bold 6").ParagraphFormat.TabStops.ClearAll
        ActiveDocument.Styles("No Bold 6").ParagraphFormat.TabStops.Add Position:= _
            InchesToPoints(1.19), Alignment:=wdAlignTabLeft, Leader:=wdTabLeaderSpaces
        ActiveDocument.Styles("No Bold 7").ParagraphFormat.TabStops.ClearAll
        ActiveDocument.Styles("No Bold 7").ParagraphFormat.TabStops.Add Position:= _
            InchesToPoints(1.19), Alignment:=wdAlignTabLeft, Leader:=wdTabLeaderSpaces
        ActiveDocument.Styles("No Bold 8").ParagraphFormat.TabStops.ClearAll
        ActiveDocument.Styles("No Bold 8").ParagraphFormat.TabStops.Add Position:= _
            InchesToPoints(1.5), Alignment:=wdAlignTabLeft, Leader:=wdTabLeaderSpaces
        ActiveDocument.Styles("No Bold 9").ParagraphFormat.TabStops.ClearAll
        ActiveDocument.Styles("No Bold 9").ParagraphFormat.TabStops.Add Position:= _
            InchesToPoints(1.5), Alignment:=wdAlignTabLeft, Leader:=wdTabLeaderSpaces
            
    Else
        
        With ActiveDocument.Styles("No Bold 2").ParagraphFormat
            .LeftIndent = InchesToPoints(1.19)
            .FirstLineIndent = InchesToPoints(-1.19)
        End With
        With ActiveDocument.Styles("No Bold 3").ParagraphFormat
            .LeftIndent = InchesToPoints(1.19)
            .FirstLineIndent = InchesToPoints(-1.19)
        End With
        With ActiveDocument.Styles("No Bold 4").ParagraphFormat
            .LeftIndent = InchesToPoints(1.19)
            .FirstLineIndent = InchesToPoints(-1.19)
        End With
        With ActiveDocument.Styles("No Bold 5").ParagraphFormat
            .LeftIndent = InchesToPoints(1.19)
            .FirstLineIndent = InchesToPoints(-1.19)
        End With
        With ActiveDocument.Styles("No Bold 6").ParagraphFormat
            .LeftIndent = InchesToPoints(1.19)
            .FirstLineIndent = InchesToPoints(-1.19)
        End With
        With ActiveDocument.Styles("No Bold 7").ParagraphFormat
            .LeftIndent = InchesToPoints(1.19)
            .FirstLineIndent = InchesToPoints(-1.19)
        End With
        With ActiveDocument.Styles("No Bold 8").ParagraphFormat
            .LeftIndent = InchesToPoints(1.5)
            .FirstLineIndent = InchesToPoints(-1.5)
        End With
        With ActiveDocument.Styles("No Bold 9").ParagraphFormat
            .LeftIndent = InchesToPoints(1.5)
            .FirstLineIndent = InchesToPoints(-1.5)
        End With
    End If
        
    Else
    
        ActiveDocument.Styles("No Bold 2").ParagraphFormat.TabStops.ClearAll
        ActiveDocument.Styles("No Bold 2").ParagraphFormat.TabStops.Add Position:= _
            InchesToPoints(0.35), Alignment:=wdAlignTabLeft, Leader:=wdTabLeaderSpaces
        ActiveDocument.Styles("No Bold 3").ParagraphFormat.TabStops.ClearAll
        ActiveDocument.Styles("No Bold 3").ParagraphFormat.TabStops.Add Position:= _
            InchesToPoints(0.5), Alignment:=wdAlignTabLeft, Leader:=wdTabLeaderSpaces
        ActiveDocument.Styles("No Bold 4").ParagraphFormat.TabStops.ClearAll
        ActiveDocument.Styles("No Bold 4").ParagraphFormat.TabStops.Add Position:= _
            InchesToPoints(0.6), Alignment:=wdAlignTabLeft, Leader:=wdTabLeaderSpaces
        ActiveDocument.Styles("No Bold 5").ParagraphFormat.TabStops.ClearAll
        ActiveDocument.Styles("No Bold 5").ParagraphFormat.TabStops.Add Position:= _
            InchesToPoints(0.7), Alignment:=wdAlignTabLeft, Leader:=wdTabLeaderSpaces
        ActiveDocument.Styles("No Bold 6").ParagraphFormat.TabStops.ClearAll
        ActiveDocument.Styles("No Bold 6").ParagraphFormat.TabStops.Add Position:= _
            InchesToPoints(0.8), Alignment:=wdAlignTabLeft, Leader:=wdTabLeaderSpaces
        ActiveDocument.Styles("No Bold 7").ParagraphFormat.TabStops.ClearAll
        ActiveDocument.Styles("No Bold 7").ParagraphFormat.TabStops.Add Position:= _
            InchesToPoints(0.95), Alignment:=wdAlignTabLeft, Leader:=wdTabLeaderSpaces
        ActiveDocument.Styles("No Bold 8").ParagraphFormat.TabStops.ClearAll
        ActiveDocument.Styles("No Bold 8").ParagraphFormat.TabStops.Add Position:= _
            InchesToPoints(1.05), Alignment:=wdAlignTabLeft, Leader:=wdTabLeaderSpaces
        ActiveDocument.Styles("No Bold 9").ParagraphFormat.TabStops.ClearAll
        ActiveDocument.Styles("No Bold 9").ParagraphFormat.TabStops.Add Position:= _
            InchesToPoints(1.15), Alignment:=wdAlignTabLeft, Leader:=wdTabLeaderSpaces
        
        With ActiveDocument.Styles("No Bold 2").ParagraphFormat
            .LeftIndent = InchesToPoints(0)
            .FirstLineIndent = InchesToPoints(0)
        End With
        With ActiveDocument.Styles("No Bold 3").ParagraphFormat
            .LeftIndent = InchesToPoints(0)
            .FirstLineIndent = InchesToPoints(0)
        End With
        With ActiveDocument.Styles("No Bold 4").ParagraphFormat
            .LeftIndent = InchesToPoints(0)
            .FirstLineIndent = InchesToPoints(0)
        End With
        With ActiveDocument.Styles("No Bold 5").ParagraphFormat
            .LeftIndent = InchesToPoints(0)
            .FirstLineIndent = InchesToPoints(0)
        End With
        With ActiveDocument.Styles("No Bold 6").ParagraphFormat
            .LeftIndent = InchesToPoints(0)
            .FirstLineIndent = InchesToPoints(0)
        End With
        With ActiveDocument.Styles("No Bold 7").ParagraphFormat
            .LeftIndent = InchesToPoints(0)
            .FirstLineIndent = InchesToPoints(0)
        End With
        With ActiveDocument.Styles("No Bold 8").ParagraphFormat
            .LeftIndent = InchesToPoints(0)
            .FirstLineIndent = InchesToPoints(0)
        End With
        With ActiveDocument.Styles("No Bold 9").ParagraphFormat
            .LeftIndent = InchesToPoints(0)
            .FirstLineIndent = InchesToPoints(0)
        End With
    
    End If
End Sub
Sub NoSpaceNoBold()
'
' NoSpaceNoBold Macro
' Macro recorded 3/31/2008 by Inglis
'
    ActiveDocument.Styles("No Bold 2").ParagraphFormat.TabStops.ClearAll
    ActiveDocument.Styles("No Bold 2").ParagraphFormat.TabStops.Add Position:= _
        InchesToPoints(0.35), Alignment:=wdAlignTabLeft, Leader:= _
        wdTabLeaderSpaces
    ActiveDocument.Styles("No Bold 3").ParagraphFormat.TabStops.ClearAll
    ActiveDocument.Styles("No Bold 3").ParagraphFormat.TabStops.Add Position:= _
        InchesToPoints(0.5), Alignment:=wdAlignTabLeft, Leader:= _
        wdTabLeaderSpaces
    ActiveDocument.Styles("No Bold 4").ParagraphFormat.TabStops.ClearAll
    ActiveDocument.Styles("No Bold 4").ParagraphFormat.TabStops.Add Position:= _
        InchesToPoints(0.6), Alignment:=wdAlignTabLeft, Leader:= _
        wdTabLeaderSpaces
    ActiveDocument.Styles("No Bold 5").ParagraphFormat.TabStops.ClearAll
    ActiveDocument.Styles("No Bold 5").ParagraphFormat.TabStops.Add Position:= _
        InchesToPoints(0.7), Alignment:=wdAlignTabLeft, Leader:= _
        wdTabLeaderSpaces
    ActiveDocument.Styles("No Bold 6").ParagraphFormat.TabStops.ClearAll
    ActiveDocument.Styles("No Bold 6").ParagraphFormat.TabStops.Add Position:= _
        InchesToPoints(0.8), Alignment:=wdAlignTabLeft, Leader:= _
        wdTabLeaderSpaces
    ActiveDocument.Styles("No Bold 7").ParagraphFormat.TabStops.ClearAll
    ActiveDocument.Styles("No Bold 7").ParagraphFormat.TabStops.Add Position:= _
        InchesToPoints(0.95), Alignment:=wdAlignTabLeft, Leader:= _
        wdTabLeaderSpaces
    ActiveDocument.Styles("No Bold 8").ParagraphFormat.TabStops.ClearAll
    ActiveDocument.Styles("No Bold 8").ParagraphFormat.TabStops.Add Position:= _
        InchesToPoints(1.05), Alignment:=wdAlignTabLeft, Leader:= _
        wdTabLeaderSpaces
    ActiveDocument.Styles("No Bold 9").ParagraphFormat.TabStops.ClearAll
    ActiveDocument.Styles("No Bold 9").ParagraphFormat.TabStops.Add Position:= _
        InchesToPoints(1.15), Alignment:=wdAlignTabLeft, Leader:= _
        wdTabLeaderSpaces

End Sub
Sub IncludeChapterInCaptions()
'
' Macro1 Macro
' Macro recorded 1/15/2008 by Inglis
'
    TrackChangesWarning
    
    With CaptionLabels("Table")
        .NumberStyle = wdCaptionNumberStyleArabic
        .IncludeChapterNumber = True
        .ChapterStyleLevel = 1
        .Separator = wdSeparatorHyphen
    End With
    With CaptionLabels("Figure")
        .NumberStyle = wdCaptionNumberStyleArabic
        .IncludeChapterNumber = True
        .ChapterStyleLevel = 1
        .Separator = wdSeparatorHyphen
    End With
End Sub
Sub CopyCustomProperties()
'
' CopyCustomProperties Macro
' Macro recorded 12/19/2007 by Inglis
    
    If MsgBox("This will OVERWRITE all the custom properties for your document. " + _
              "ARE YOU SURE want to continue?", vbYesNo) = vbNo Then End

    Dim myProps(25) As String
    myProps(1) = "DocClassification"
    myProps(2) = "DocContractNumber"
    myProps(3) = "DocDCNAndRev"
    myProps(4) = "DocDCNNumber"
    myProps(5) = "DocDCNRevision"
    myProps(6) = "DocDeliveryDate"
    myProps(7) = "DocDisclosureFooter"
    myProps(8) = "DocProjectLongName"
    myProps(9) = "DocProjectName"
    myProps(10) = "DocProjectShortName"
    myProps(11) = "DocReportTitle"
    myProps(12) = "DocReportShortTitle"
    myProps(13) = "DocReportSubTitle"
    myProps(14) = "DocSDRLorDID"
    myProps(15) = "DocAnnexID"
    myProps(16) = "DocAnnexName"
    myProps(17) = "DocAppID"
    myProps(18) = "DocAppName"
    myProps(19) = "DocProposalTitle"
    myProps(20) = "DocProposalSection"
    myProps(21) = "DocProposalSectionSubTitle"
    myProps(22) = "DocPropShortTitle"
    myProps(23) = "DocPropShortSection"
    myProps(24) = "DocPropSolicitation"
    myProps(25) = "SubClassification"
    numProps = 25
    
    Dim myValues(25) As String
    
    CreateCustomProperties

    Dim prop As DocumentProperty
    For Each prop In ActiveDocument.CustomDocumentProperties
        For i = 1 To numProps
            If (prop.name = myProps(i)) Then
                myValues(i) = prop.Value
                GoTo NextProp1
            End If
        Next i
NextProp1:
    Next prop
    
    Dim myDoc As Document
    Dim doc As Document
    Dim myDocFullName As String
    Set myDoc = ActiveDocument
    myDocFullName = ActiveDocument.FullName
    
    For Each doc In Documents
        If (doc.FullName = myDocFullName) Then GoTo NextDoc
        doc.Activate
        CreateCustomProperties
        
        For Each prop In ActiveDocument.CustomDocumentProperties
            For i = 1 To numProps
                If (prop.name = myProps(i)) Then
                    prop.Value = myValues(i)
                    GoTo NextProp2
                End If
            Next i
NextProp2:
        Next prop
        
        Selection.WholeStory
        Selection.Fields.Update
        ActiveWindow.View.Type = wdNormalView
        ActiveWindow.View.Type = wdPrintView
        Selection.HomeKey
        
NextDoc:
    Next doc
        
    If MsgBox("The Custom Properties have been copied.", vbOKOnly) = vbOK Then End
    
End Sub
Sub AddFigureCaption()
'
' FigureCaption Macro
' Macro recorded 12/19/2007 by Inglis
'
    TrackChangesWarning
    
    myName = "AddFigureCaption"
    Application.ScreenUpdating = False
    
On Error GoTo EndOfFile
    
    Selection.HomeKey Unit:=wdLine
    Selection.InsertCaption Label:="Figure", TitleAutoText:="InsertCaption1", _
        Title:=":", Position:=wdCaptionPositionBelow, ExcludeLabel:=0
    Selection.TypeText Text:="  "
    Selection.Style = ActiveDocument.Styles("Figure Caption")

EndOfFile:
    myErr = Err.Number
    myText = Err.Description
                    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = myName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    End If

End Sub
Sub AddTableCaption()
'
' TableCaption Macro
' Macro recorded 12/19/2007 by Inglis
'
    TrackChangesWarning
    
    myName = "AddTableCaption"
    Application.ScreenUpdating = False
    
On Error GoTo EndOfFile
    
    Selection.HomeKey Unit:=wdLine
    Selection.InsertCaption Label:="Table", TitleAutoText:="InsertCaption1", _
        Title:=":", Position:=wdCaptionPositionAbove, ExcludeLabel:=0
    Selection.TypeText Text:="  "
    Selection.Style = ActiveDocument.Styles("Table Caption")

EndOfFile:
    myErr = Err.Number
    myText = Err.Description
                    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = myName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    End If

End Sub
Sub FormatFigureCaption()
'
' FormatFigureCaption Macro
' Macro recorded 12/19/2007 by Inglis
'
    TrackChangesWarning
    
    myName = "FormatFigureCaption"
    Application.ScreenUpdating = False
    
On Error GoTo EndOfFile
    
    Selection.HomeKey Unit:=wdLine
    Selection.EndKey Unit:=wdLine, Extend:=wdExtend
    If (Selection.Fields.count > 0) Then
        Selection.Style = ActiveDocument.Styles("Figure Caption")
        Selection.EndKey Unit:=wdLine
    Else
        charCount = Selection.Characters.count
        If (charCount <= 1) Then
            Selection.TypeText Text:="Insert Title Here"
        End If
        AddFigureCaption
    End If
    
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
                    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = myName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    End If
    
End Sub
Sub FormatTableCaption()
'
' FormatTableCaption Macro
' Macro recorded 12/19/2007 by Inglis
'
    TrackChangesWarning
    
    myName = "FormatTableCaption"
    Application.ScreenUpdating = False
    
On Error GoTo EndOfFile
    
    Selection.HomeKey Unit:=wdLine
    Selection.EndKey Unit:=wdLine, Extend:=wdExtend
    If (Selection.Fields.count > 0) Then
        Selection.Style = ActiveDocument.Styles("Table Caption")
        Selection.EndKey Unit:=wdLine
    Else
        charCount = Selection.Characters.count
        If (charCount <= 1) Then
            Selection.TypeText Text:="Insert Title Here"
        End If
        AddTableCaption
    End If

EndOfFile:
    myErr = Err.Number
    myText = Err.Description
                    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = myName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    End If

End Sub
Sub InsertFigureCaption()
'
' InsertFigureCaption Macro
' Macro recorded 12/19/2007 by Inglis
'
    TrackChangesWarning
    
    myName = "InsertFigureCaption"
    Application.ScreenUpdating = False
    
On Error GoTo EndOfFile
    
    Selection.EndKey Unit:=wdLine
    Selection.TypeParagraph
    Selection.HomeKey Unit:=wdLine
    Selection.TypeText Text:="Insert Title Here"
    AddFigureCaption

EndOfFile:
    myErr = Err.Number
    myText = Err.Description
                    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = myName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    End If

End Sub
Sub InsertTableCaption()
'
' InsertTableCaption Macro
' Macro recorded 12/19/2007 by Inglis
'
    TrackChangesWarning
    
    myName = "InsertTableCaption"
    Application.ScreenUpdating = False
    
On Error GoTo EndOfFile
    
    Selection.EndKey Unit:=wdLine
    Selection.TypeParagraph
    Selection.HomeKey Unit:=wdLine
    Selection.TypeText Text:="Insert Title Here"
    AddTableCaption

EndOfFile:
    myErr = Err.Number
    myText = Err.Description
                    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = myName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    End If

End Sub
Sub InsertFigure()
'
' InsertFigure Macro
' Macro recorded 12/19/2007 by Inglis
'
    TrackChangesWarning
    
    myName = "InsertFigure"
    Application.ScreenUpdating = False
    
On Error GoTo EndOfFile
    
    Selection.TypeParagraph
    Selection.Style = ActiveDocument.Styles("Figure Container")
    InsertFigureCaption
    Selection.EndKey Unit:=wdLine

EndOfFile:
    myErr = Err.Number
    myText = Err.Description
                    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = myName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    End If

End Sub
Sub InsertTable()
'
' InsertTable Macro
' Macro recorded 12/19/2007 by Inglis
'
    TrackChangesWarning
    
    myName = "InsertTable"
    topLevelName = myName
    Application.ScreenUpdating = False
    ProgressForm.Label1 = topLevelName + " ... "
    ProgressForm.Show

On Error GoTo EndOfFile

    InsertTableCaption
    Selection.EndKey Unit:=wdLine
    Selection.TypeParagraph
    Selection.Style = ActiveDocument.Styles("Normal Text")
    ActiveDocument.Tables.Add Range:=Selection.Range, NumRows:=2, NumColumns:= _
        5, DefaultTableBehavior:=wdWord9TableBehavior, AutoFitBehavior:= _
        wdAutoFitFixed
    With Selection.Tables(1)
        If .Style <> "Table Grid" Then
            .Style = "Table Grid"
        End If
        .ApplyStyleHeadingRows = True
        .ApplyStyleLastRow = False
        .ApplyStyleFirstColumn = True
        .ApplyStyleLastColumn = False
    End With
    
    FormatThisTable True, False
    
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Hide
        Application.ScreenUpdating = True
    End If

End Sub
Private Sub UpdateFieldsAndTOC()
'
' UpdateAllFieldsAndTOC Macro
' Macro recorded 12/19/2007 by Inglis
'
    Selection.WholeStory
    Selection.Fields.Update
    ActiveWindow.View.Type = wdNormalView
    ActiveWindow.View.Type = wdPrintView
        
    For Each TOA In ActiveDocument.TablesOfAuthorities
       TOA.Update
    Next TOA
    
    For Each TOC In ActiveDocument.TablesOfContents
       TOC.Update
    Next TOC
    
    For Each TOF In ActiveDocument.TablesOfFigures
       TOF.Update
    Next TOF
End Sub
Sub UpdateAllFieldsAndTOC()
'
' UpdateAllFieldsAndTOC Macro
' Macro recorded 12/19/2007 by Inglis
'
    TrackChangesWarning
    
    myName = "UpdateAllFieldsAndTOC"
    topLevelName = myName
    Application.ScreenUpdating = False
    ProgressForm.Label1 = topLevelName + " ... "
    ProgressForm.Show

On Error GoTo EndOfFile
    
    Dim selectedRange As Range
    Set selectedRange = Selection.Range
    
    UpdateFieldsAndTOC
    
    selectedRange.Select
    ActiveWindow.ScrollIntoView selectedRange
    
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
                
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Hide
        Application.ScreenUpdating = True
    End If
    
End Sub
Sub FormatAllTables()
'
' FormatAllTables Macro
' Macro recorded 12/19/2007 by Inglis
'
    TrackChangesWarning
    
    myName = "FormatAllTables"
    topLevelName = myName
    Application.ScreenUpdating = False
    ProgressForm.Label1 = topLevelName + " ... "
    ProgressForm.Show

On Error GoTo EndOfFile
            
    GetSelectionToFormat
    Dim selectedRange As Range
    Set selectedRange = Selection.Range
    
    ReformatTablesInRange
    UpdateFieldsAndTOC
    
    selectedRange.Select
    ActiveWindow.ScrollIntoView selectedRange

EndOfFile:
    myErr = Err.Number
    myText = Err.Description
    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Hide
        Application.ScreenUpdating = True
    End If

End Sub
Sub FormatAllTablesInRange()
'
' FormatAllTablesInRange Macro
' Macro recorded 12/19/2007 by Inglis
'
    TrackChangesWarning
    
    myName = "FormatAllTablesInRange"
    topLevelName = myName
    Application.ScreenUpdating = False
    ProgressForm.Label1 = topLevelName + " ... "
    ProgressForm.Show

On Error GoTo EndOfFile
    
    Dim selectedRange As Range
    Set selectedRange = Selection.Range
        
    ReformatTablesInRange
    UpdateFieldsAndTOC
    
    selectedRange.Select
    ActiveWindow.ScrollIntoView selectedRange

EndOfFile:
    myErr = Err.Number
    myText = Err.Description
    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Hide
        Application.ScreenUpdating = True
    End If

End Sub
Sub FormatSingleFigure()
'
' FormatSingleFigure Macro
' Macro recorded 12/19/2007 by Inglis
'
    TrackChangesWarning
    
    Selection.Style = "Figure Container"
End Sub
Sub FormatAllFigures()
'
' FormatAllFigures Macro
' Macro recorded 12/19/2007 by Inglis
'
    TrackChangesWarning
    
    myName = "FormatAllFigures"
    topLevelName = myName
    Application.ScreenUpdating = False
    ProgressForm.Label1 = topLevelName + " ... "
    ProgressForm.Show

On Error GoTo EndOfFile
    
    GetSelectionToFormat
    Dim selectedRange As Range
    Set selectedRange = Selection.Range
    
    ReformatFiguresInRange
    UpdateFieldsAndTOC
    
    selectedRange.Select
    ActiveWindow.ScrollIntoView selectedRange

EndOfFile:
    myErr = Err.Number
    myText = Err.Description
        
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Hide
        Application.ScreenUpdating = True
    End If
    
End Sub
Sub FormatAllFiguresInRange()
'
' FormatAllFiguresInRange Macro
' Macro recorded 12/19/2007 by Inglis
'
    TrackChangesWarning
    
    myName = "FormatAllFiguresInRange"
    topLevelName = myName
    Application.ScreenUpdating = False
    ProgressForm.Label1 = topLevelName + " ... "
    ProgressForm.Show

On Error GoTo EndOfFile
    
    Dim selectedRange As Range
    Set selectedRange = Selection.Range
    
    ReformatFiguresInRange
    UpdateFieldsAndTOC
    
    selectedRange.Select
    ActiveWindow.ScrollIntoView selectedRange

EndOfFile:
    myErr = Err.Number
    myText = Err.Description
        
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Hide
        Application.ScreenUpdating = True
    End If
    
End Sub
Private Sub GetSelectionToFormat()
'
' GetSelectionToFormat Macro
' Macro recorded 12/19/2007 by Inglis
'
    myName = "GetSelectionToFormat"
    ProgressForm.Label1 = topLevelName + " ... " + myName
    ProgressForm.Repaint

On Error GoTo EndOfFile
   
    Dim Para As Paragraph
    For Each Para In ActiveDocument.Paragraphs
        If (Para.Style Like "Heading 1*") Then
            Para.Range.Select
            GoTo SelectText
        End If
    Next Para
    Selection.WholeStory
    GoTo EndOfFile
        
SelectText:
    ActiveDocument.Range(Start:=Para.Range.Start, _
       End:=ActiveDocument.StoryRanges(wdMainTextStory).End).Select
    
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
        
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... " + myName + ". Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Label1 = topLevelName + " ... " + myName + ". Done"
        ProgressForm.Repaint
    End If

End Sub
Private Sub FormatAllStylesKeepSpacing(keepSpacing As Boolean)
'
' FormatAllStylesKeepSpacing Macro
' Macro recorded 12/19/2007 by Inglis
'
    TrackChangesWarning
    
    If MsgBox("This command will save your document. " + _
              "Do you want to continue?", vbYesNo) = vbNo Then End

    myName = "FormatAllStyles"
    topLevelName = myName
    Application.ScreenUpdating = False
    ProgressForm.Label1 = topLevelName + " ... "
    ProgressForm.Show

On Error GoTo EndOfFile

    ActiveDocument.Save
            
    Selection.WholeStory
    Dim selectedRange As Range
    Set selectedRange = Selection.Range
    
    ReformatStylesInRange (keepSpacing)
    DeleteAllUnusedStyles
    UpdateFieldsAndTOC
        
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
        
    selectedRange.Select
    ActiveWindow.ScrollIntoView selectedRange
    ProgressForm.Hide
    Application.ScreenUpdating = True
        
    If ((myText = "") = False) Then
        msgText = topLevelName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    End If

End Sub
Sub FormatAllStyles()
'
' FormatAllStyles Macro
' Macro recorded 12/19/2007 by Inglis
'
    FormatAllStylesKeepSpacing (True)
End Sub
Sub ReformatAllStylesAndOverwriteSpacing()
'
' ReformatAllStylesAndOverwriteSpacing Macro
' Macro recorded 12/19/2007 by Inglis
'
    FormatAllStylesKeepSpacing (False)
End Sub
Private Sub ReformatWholeDocumentKeepSpacing(keepSpacing As Boolean)
'
' ReformatWholeDocument Macro
' Macro recorded 12/19/2007 by Inglis
'
    TrackChangesWarning
    
    If MsgBox("This command will save your document. " + _
              "Do you want to continue?", vbYesNo) = vbNo Then End

    myName = "FormatAllStyles"
    topLevelName = myName
    Application.ScreenUpdating = False
    ProgressForm.Label1 = topLevelName + " ... "
    ProgressForm.Show

On Error GoTo EndOfFile

    ActiveDocument.Save
            
    Selection.WholeStory
    Dim selectedRange As Range
    Set selectedRange = Selection.Range
    ReformatStylesInRange (keepSpacing)
    
    GetSelectionToFormat
    ReformatTablesInRange
    ReformatFiguresInRange
    
    DeleteAllUnusedStyles
    UpdateFieldsAndTOC
    
    selectedRange.Select
    ActiveWindow.ScrollIntoView selectedRange
    
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
        
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Hide
        Application.ScreenUpdating = True
    End If

    If MsgBox("Reformat complete.", vbOKOnly) = vbOK Then End

End Sub
Sub ReformatWholeDocument()
'
' ReformatWholeDocument Macro
' Macro recorded 12/19/2007 by Inglis
'
    ReformatWholeDocumentKeepSpacing (True)
End Sub
Sub ReformatWholeDocumentAndOverwriteSpacing()
'
' ReformatWholeDocumentAndOverwriteSpacing Macro
' Macro recorded 12/19/2007 by Inglis
'
    ReformatWholeDocumentKeepSpacing (False)
End Sub
Private Sub FormatAllStylesInRangeKeepSpacing(keepSpacing As Boolean)
'
' FormatAllStylesInRange Macro
' Macro recorded 12/19/2007 by Inglis
'
    TrackChangesWarning
    
    myName = "FormatAllStylesInRange"
    topLevelName = myName
    Application.ScreenUpdating = False
    ProgressForm.Label1 = topLevelName + " ... "
    ProgressForm.Show

On Error GoTo EndOfFile
            
    EstablishSearchRange (False)
    Dim selectedRange As Range
    Set selectedRange = Selection.Range
    ReformatStylesInRange (keepSpacing)
        
    selectedRange.Select
    ActiveWindow.ScrollIntoView selectedRange
    
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
        
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Hide
        Application.ScreenUpdating = True
    End If

End Sub
Sub FormatAllStylesInRange()
'
' FormatAllStylesInRange Macro
' Macro recorded 12/19/2007 by Inglis
'
    FormatAllStylesInRangeKeepSpacing (True)
End Sub
Sub ReformatRangeAndOverwriteSpacing()
'
' ReformatRangeAndOverwriteSpacing Macro
' Macro recorded 12/19/2007 by Inglis
'
    FormatAllStylesInRangeKeepSpacing (False)
End Sub
Private Sub ReformatKeepSpacing(keepSpacing As Boolean)
'
' Reformat Macro
' Macro recorded 12/19/2007 by Inglis
'
    TrackChangesWarning
    
    myName = "Reformat"
    topLevelName = myName
    Application.ScreenUpdating = False

On Error GoTo EndOfFile
    
    ReformatStylesInRange (keepSpacing)

EndOfFile:
    myErr = Err.Number
    myText = Err.Description
        
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Hide
        Application.ScreenUpdating = True
    End If

End Sub
Sub Reformat()
'
' Reformat Macro
' Macro recorded 12/19/2007 by Inglis
'
    ReformatKeepSpacing (True)
End Sub
Sub ReformatSelectionAndOverwriteSpacing()
'
' ReformatSelectionAndOverwriteSpacing Macro
' Macro recorded 12/19/2007 by Inglis
'
    ReformatKeepSpacing (False)
End Sub
Sub SelectAllText()
'
' SelectAllText Macro
' Macro recorded 12/19/2007 by Inglis
'
    TrackChangesWarning
    
    myName = "SelectAllText"
    Application.ScreenUpdating = False

On Error GoTo EndOfFile

    GetSelectionToFormat
    
'On Error GoTo SelectHeadingText

'    ActiveDocument.Range( _
'       Start:=ActiveDocument.Bookmarks("TextStart").Range.Start, _
'       End:=ActiveDocument.StoryRanges(wdMainTextStory).End) _
'       .Select
'    GoTo EndOfFile
    
'SelectHeadingText:
'
'On Error GoTo EndOfFile
'    GetSelectionToFormat

EndOfFile:
    myErr = Err.Number
    myText = Err.Description
                    
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = myName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    End If
    
End Sub
Sub TrackChangesWarning()

    If (myAnswer <> True) Then

    If ((ActiveDocument.Revisions.count > 0) Or _
        (ActiveDocument.TrackRevisions)) Then
        
        If MsgBox("The macros toolbar is unpredictable with track changes.  " + _
                "Click yes to accept all changes; no to leave track changes on.", vbYesNo) = vbNo Then
            myAnswer = True
        Else
              
            ActiveDocument.Revisions.AcceptAll
            ActiveDocument.TrackRevisions = False
        End If
        
    End If
    End If
              
End Sub
Sub PrintListCount()
    Dim listCount As Integer
    listCount = ActiveDocument.ListTemplates.count
    If MsgBox("There are" + Str(listCount) + " lists in this document", vbOKOnly) = vbOK Then End
End Sub
Sub RunUndoClear()
    ActiveDocument.UndoClear
End Sub
Sub SaveForWeb()
'
' SaveForWeb Macro
' Macro recorded 3/29/2008 by Inglis
'
    ActiveWindow.View.Type = wdWebView
    ActiveWindow.ActivePane.View.Zoom.Percentage = 100
    ActiveDocument.Save
End Sub
Sub SetToPrintLayout()
'
' SetToPrintLayout Macro
' Macro recorded 3/29/2008 by Inglis
'
    ActiveWindow.View.Type = wdPrintView
End Sub
Sub RemoveSectionBreak()
'
' RemoveSectionBreak Macro
' Macro recorded 12/19/2007 by Inglis
'
        
On Error GoTo EndOfFile

    Dim myPageSetup As PageSetup
    Set myPageSetup = Selection.PageSetup
    
    myOrientation = myPageSetup.Orientation
    myTopMargin = myPageSetup.TopMargin
    myBottomMargin = myPageSetup.BottomMargin
    myLeftMargin = myPageSetup.LeftMargin
    myRightMargin = myPageSetup.RightMargin
    myGutter = myPageSetup.Gutter
    myHeaderDistance = myPageSetup.HeaderDistance
    myFooterDistance = myPageSetup.FooterDistance
    myPageWidth = myPageSetup.PageWidth
    myPageHeight = myPageSetup.PageHeight
    myVerticalAlignment = myPageSetup.VerticalAlignment
    myGutterPos = myPageSetup.GutterPos
    
    Selection.Find.ClearFormatting
    With Selection.Find
        .Text = "^b"
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindStop
        .Format = False
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    
    If (Selection.Find.Execute = True) Then
    
        Selection.MoveRight Unit:=wdCharacter, count:=1
    
        With ActiveDocument.Bookmarks
            .Add Range:=Selection.Range, name:="SectionBreakBookmark"
            .DefaultSorting = wdSortByName
            .ShowHidden = False
        End With
        
        If (Selection.Find.Execute = True) Then
            ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageHeader
            Selection.HeaderFooter.LinkToPrevious = False
            ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageFooter
            Selection.HeaderFooter.LinkToPrevious = False
            ActiveWindow.ActivePane.View.SeekView = wdSeekMainDocument
        End If
   
        Selection.GoTo What:=wdGoToBookmark, name:="SectionBreakBookmark"
        
        With Selection.PageSetup
            .Orientation = myOrientation
            .TopMargin = myTopMargin
            .BottomMargin = myBottomMargin
            .LeftMargin = myLeftMargin
            .RightMargin = myRightMargin
            .Gutter = myGutter
            .HeaderDistance = myHeaderDistance
            .FooterDistance = myFooterDistance
            .PageWidth = myPageWidth
            .PageHeight = myPageHeight
            .VerticalAlignment = myVerticalAlignment
            .GutterPos = myGutterPos
        End With
        
        ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageHeader
        Selection.HeaderFooter.LinkToPrevious = True
        ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageFooter
        Selection.HeaderFooter.LinkToPrevious = True
        ActiveWindow.ActivePane.View.SeekView = wdSeekMainDocument
        
        Selection.GoTo What:=wdGoToBookmark, name:="SectionBreakBookmark"
    
        Selection.MoveLeft Unit:=wdCharacter, count:=1
        Selection.Delete Unit:=wdCharacter, count:=1
        
        ActiveDocument.Bookmarks("SectionBreakBookmark").Delete
        
    Else
        If (MsgBox("No section break found.", vbOKOnly) = vbOK) Then
        End If
    End If
    
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
                
    If ((myText = "") = False) Then
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
    End If
End Sub
Sub CleanupChangesAndComments()
'
' CleanupChangesAndComments Macro
' Macro recorded 12/19/2007 by Inglis
'
    myName = "CleanupChangesAndComments"
    topLevelName = myName
    Application.ScreenUpdating = False
    ProgressForm.Label1 = topLevelName + " ... "
    ProgressForm.Show

On Error GoTo EndOfFile

    If MsgBox("This macro will accept all tracked changes and remove all comments. " + _
              "Click yes to proceed.", vbYesNo) = vbYes Then
       
       Dim revName As Reviewer
       With ActiveWindow.View
           For Each revName In .Reviewers
               revName.Visible = True
           Next
       End With
            
       WordBasic.AcceptAllChangesInDoc
       ActiveDocument.DeleteAllComments
       ActiveDocument.TrackRevisions = False
    End If
    
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
                
    If ((myText = "") = False) Then
        Application.ScreenUpdating = True
        msgText = topLevelName + " ... Error: " + myText
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
        End
    Else
        ProgressForm.Hide
        Application.ScreenUpdating = True
    End If
    
End Sub

Sub MakeMarkEntry()
'
' MakeMarkEntry()
' 18 August 2010 by Frans Bouwmans
' Mark an entry in the same way as the original but then without showing the dialog
' and automatically pasting the clipboard text
'
    TheEntry = Selection.Range.Text
    Set MyData = New DataObject
    MyData.GetFromClipboard
    Reference = MyData.GetText
    
    ActiveDocument.Indexes.MarkEntry _
        Range:=Selection.Range, _
        Entry:=TheEntry, _
        EntryAutoText:=TheEntry, _
        CrossReference:=Reference, _
        CrossReferenceAutoText:="", _
        BookmarkName:="", _
        Bold:=False, _
        Italic:=False
        
End Sub

Sub MakeMarkEntryFromStart()
'
' MakeMarkEntryFromStart()
' 18 August 2010 by Frans Bouwmans
' Mark an entry by selecting all text till the first "("
' Then use the acronym which is all text till ")"
' A maximum size is applied for the text and the acronym
'
    SelStart = Selection.Start
    Selection.Find.ClearFormatting
    With Selection.Find
        .Text = "("
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindContinue
        .Format = False
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    Selection.Find.Execute
    Selection.MoveLeft Unit:=wdCharacter, count:=1
    selStop = Selection.End
    Selection.Start = SelStart
    Selection.End = selStop
    
    If (selStop - SelStart) > 256 Then
      If MsgBox("Text before ( to long", vbOKOnly) = vbOK Then
        End
      End If
    End If
    
    Reference = Trim(Selection.Range.Text)
    Selection.MoveRight Unit:=wdCharacter, count:=2
    SelStart = Selection.Start
    With Selection.Find
        .Text = ")"
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindContinue
        .Format = False
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    Selection.Find.Execute
    Selection.MoveLeft Unit:=wdCharacter, count:=1
    Selection.Start = SelStart
    
    If (Selection.End - SelStart) > 32 Then
        If MsgBox("Text between ( and )to long", vbOKOnly) = vbOK Then
            End
        End If
    End If
    
    Selection.Select
    
    TheEntry = Selection.Range.Text
    ActiveDocument.Indexes.MarkEntry _
        Range:=Selection.Range, _
        Entry:=TheEntry, _
        EntryAutoText:=TheEntry, _
        CrossReference:=Reference, _
        CrossReferenceAutoText:="", _
        BookmarkName:="", _
        Bold:=False, _
        Italic:=False
        
End Sub


Sub SelectionCorrectStyle()
'
' SelectionCorrectStyle Macro
' 18 August 2010 by Frans Bouwmans
' This macro tries to identify paragraphs in the current selection
' which should become headings (as a result of paste unformatted)
' It will count the number of dots and change the style to "Heading x"
' where x is the number of dots + 1
'

    Dim numParas As Integer
    Dim index As Integer
    Dim P As Word.Paragraph
    Dim Ps As New Collection
    
On Error GoTo EndOfFile
    For Each P In Selection.Paragraphs
       Ps.Add P
    Next P
    
    For Each P In Ps
      MakeParagraphHeading P
    Next P
    End
    
    index = 1
    Do
      Set P = Ps(index)
      MakeParagraphHeading P
      index = index + 1
    Loop Until index >= numParas
    End
    
EndOfFile:
    myErr = Err.Number
    myText = Err.Description
                
    If ((myText = "") = False) Then
        If MsgBox(msgText, vbOKOnly) = vbOK Then End
    End If
End Sub

Sub MakeParagraphHeading(ByRef Para As Word.Paragraph)
' MakeParagraphHeading
' 18 August 2010 by Frans Bouwmans
' The actual subroutine which changes the style to heading based
' on the first character being a digit and a level equal to
' the number of dots in the paragraph number + 1
'
    Dim MyStr As String
    Dim bNumber As Boolean
    Dim level As Integer
    Dim index As Integer
    
       MyStr = Para.Range.Text
       If isDigit(Left(MyStr, 1)) Then
       bNumber = True
       level = 1
       index = 1
       Do While bNumber And index < Len(MyStr)
         Dim c As String
       
         c = Mid(MyStr, index, 1)
         If isDigit(c) Then
         ElseIf c = "." Then
           level = level + 1
         Else
           bNumber = False
         End If
         index = index + 1
       Loop
       If (level < 6) And (index < 12) Then
           MyStr = Mid(MyStr, index)
           Para.Range.Select
           Para.Range.Text = MyStr
           Selection.Style = ActiveDocument.Styles("HEADING " & level)
       End If
    End If
End Sub

Function isDigit(c As String) As Boolean
' isDigit
' 18 August by Frans Bouwmans
' supporting function to determine that a character is a digit
'
    isDigit = c >= "0" And c <= "9"
End Function

Sub PrintVersion()
    If MsgBox("This is Proposal Toolbar Ver 0038 prelim." & _
    Chr(13) & "Last modified 18 August 2010." & _
    Chr(13) & "Contains changes from Frans Bouwmans" _
    , vbOKOnly) = vbOK Then End
End Sub


Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' jR'u
' y*Zr)
' *Zr)
' y*Zr)
' y*Zr)
' y*Zr)

INQUEST-PP=macro
