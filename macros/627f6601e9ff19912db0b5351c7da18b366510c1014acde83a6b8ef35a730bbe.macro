Attribute VB_Name = "ModMainModule"
Option Private Module

Private Declare Function EnumDisplayMonitors Lib "user32" (ByVal hDC As Long, lprcClip As Any, ByVal lpfnEnum As Long, dwData As Long) As Long

Public tmpScrollRow As Integer
Global MARD As Integer  'Move After Return Direction

Public VersionUpdateInProgress As Boolean

' Duplicate Result Case Position
Public CurrentZoom As Double

Public Const ConfigurationFolder = "S:\Magistrates Courts\GMWORK\Shared\GM Live Files\Configuration\"
Public Const VersionFile = ConfigurationFolder & "Microsoft Office 2016\version.ini"
Public Const VersionFile2003 = ConfigurationFolder & "version.ini"
Public Const ThisVersion = "8.9"
Public Const OffenceColour = 19
Public Const DefendantColour = 37
Public Const OffenceHeaderColour = 37
Public Const DefendantHeaderColour = 25
Public Const BadColour = 22
Public Const GoodColour = 35
Public Const CopiedColour = 27
Public Const NotCopiedColour = 1

Public Const URNColumn As String = "F"
Public Const DOBColumn As String = "G"

Public Const PleaColumn As String = "F"
Public Const ActionColumn As String = "G"
Public Const GuiltyCreditColumn As String = "H"
Public Const IncomeColumn As String = "I"
Public Const BandColumn As String = "J"
Public Const FineColumn As String = "K"
Public Const CompColumn As String = "L"
Public Const FCOSTSColumn As String = "M"
Public Const VSColumn As String = "N"
Public Const AdjReasonColumn As String = "R"
Public Const AdjDateColumn As String = "S"

Public Const ButtonColumn As String = "X"
Public Const ButtonColumn2 As String = "Y"
Public Const ValidationColumn As String = "V"
Public Const OffenceFullTextColumn As String = "Z"
Public Const OriginalOffenceColumn As String = "AA"
Public Const OriginalMitigationColumn As String = "AB"
Public Const CaseFolderPathColumn As String = "AC"
Public Const AdjCourtColumn As String = "AD"
Public Const OriginalPleaColumn As String = "AE"
Public Const LastColumn As String = "AE"

Public CaseResulterConfigFile As String
Public ConfigVersion As Single

Public CTL_top As Single
Public CTL_left As Single
Public CTL_width As Single
Public CTL_height As Single

Public Const ButtonColour = 15

Public tmpDisableWorkSheetChange As Boolean
Public tmpDisableWorkSheetSelectionChange As Boolean
Public tmpDisableAllChange As Boolean
Public MainListEnd As Integer

Public AutoSaveInterval As Integer

Public ByPassQuickFindCheck As Boolean

Public OriginalOffence As String
Public NewOffence As String
Public OffenceAction As String

Public DisqRow As Integer

Public AddOffenceOnly As Boolean

Public DefendantIncome As String
Public DefendantMitigation As String

Public ByPassPromptOnClose As Boolean

Public pubAdjournDate As String
Public pubLogUsage As Boolean

Private Function GetAddressofFunction(add As Long) As Long
  GetAddressofFunction = add
End Function

Public Function CalcAge(Bdate, DateToday) As Integer
    If IsNull(Bdate) Then CalcAge = 20: Exit Function
    If IsDate(Bdate) = False Then CalcAge = 20: Exit Function
    If Month(DateToday) < Month(Bdate) Or (Month(DateToday) = _
                Month(Bdate) And Day(DateToday) < Day(Bdate)) Then
            CalcAge = Year(DateToday) - Year(Bdate) - 1
    Else
            CalcAge = Year(DateToday) - Year(Bdate)
    End If
End Function

Public Sub ProtectMe(tmpValue As Boolean)
    On Error Resume Next
    If tmpValue = True Then
        Worksheets("Main").Protect "HMITU9", True, True
        Else
        Worksheets("Main").Unprotect "HMITU9"
        End If
    On Error GoTo 0
End Sub

Public Function ValidFile(tmpPath As String) As String
    ValidFile = "Unknown"
    On Error GoTo ValidFileAbort
    Open tmpPath For Input Shared As #1
    Line Input #1, DataLine
    If UCase(Left(DataLine, 19)) = "FULL COURT LIST FOR" Then ValidFile = "Full Court List"
    Close 1
    On Error GoTo 0
    Exit Function
ValidFileAbort:
    ValidFile = "None"
    On Error GoTo 0
End Function

Sub set_MARD()
    On Error Resume Next
    MARD = Application.MoveAfterReturnDirection
    Application.MoveAfterReturnDirection = xlToRight
    On Error GoTo 0
End Sub

Sub restore_MARD()
    If MARD = 0 Then MARD = xlRight
    Application.MoveAfterReturnDirection = MARD
End Sub

Public Sub ScanForUnResultedOffences()
    Dim tmpRow As Integer
    Dim tmpBR_Row As Integer
    Dim tmpDefName As String
    Dim tmpDefDOB As String
    Dim tmpDefURN As String
    Dim tmpCol As Integer
    Dim tmpResultEntered As Boolean
    Worksheets("WS1").Cells.Clear
    ' Scan for un-resulted offences single offence per case and store in block result worksheet
    tmpRow = 15
    tmpBR_Row = 1
    Do
        tmpRow = tmpRow + 1
        If Worksheets("Main").Range("B" & tmpRow) = "Offence" And Worksheets("Main").Range("B" & tmpRow + 2).Interior.ColorIndex <> OffenceColour Then
            tmpResultEntered = False
            If Worksheets("Main").Range("B" & tmpRow - 1).Interior.ColorIndex = OffenceColour Then
                If Worksheets("Main").Range(ValidationColumn & tmpRow - 3) <> "X" Then tmpResultEntered = True
                Else
                If Worksheets("Main").Range(ValidationColumn & tmpRow - 2) <> "X" Then tmpResultEntered = True
                End If
            'For tmpCol = 74 To 83
            '    If Worksheets("Main").Range(Chr$(tmpCol) & tmpRow + 1) <> "" Then tmpResultEntered = True: Exit For
            'Next tmpCol
            'If Len(Worksheets("Main").Range(ActionColumn & tmpRow + 1)) > 0 Then tmpResultEntered = True
            If tmpResultEntered = False Then
                If Worksheets("Main").Range("B" & tmpRow - 1).Interior.ColorIndex = OffenceColour Then
                    If Worksheets("Main").Range("B" & tmpRow - 1) = "" Then tmpDefName = Worksheets("Main").Range("B" & tmpRow - 2) Else tmpDefName = Worksheets("Main").Range("B" & tmpRow - 1)
                    If Worksheets("Main").Range("E" & tmpRow - 1) = "" Then tmpDefURN = Worksheets("Main").Range("E" & tmpRow - 2) Else tmpDefURN = Worksheets("Main").Range(URNColumn & tmpRow - 1)
                    If Worksheets("Main").Range(DOBColumn & tmpRow - 1) = "" Then tmpDefDOB = Worksheets("Main").Range(DOBColumn & tmpRow - 2) Else tmpDefDOB = Worksheets("Main").Range(DOBColumn & tmpRow - 1)
                    Else
                    tmpDefName = Worksheets("Main").Range("B" & tmpRow - 1)
                    tmpDefURN = Worksheets("Main").Range(URNColumn & tmpRow - 1)
                    tmpDefDOB = Left(Worksheets("Main").Range(DOBColumn & tmpRow - 1), 10)
                    End If
                tmpRow = tmpRow + 1
                Do
                    Worksheets("WS1").Range("A" & tmpBR_Row) = tmpRow
                    Worksheets("WS1").Range("B" & tmpBR_Row) = IIf(InStr(Range("B" & tmpRow), ":") = 0, Worksheets("Main").Range("B" & tmpRow), Trim(Mid(Range("B" & tmpRow), InStr(Range("B" & tmpRow), ":") + 1)))
                    Worksheets("WS1").Range("C" & tmpBR_Row) = tmpDefName
                    Worksheets("WS1").Range("D" & tmpBR_Row) = tmpDefURN
                    Worksheets("WS1").Range("E" & tmpBR_Row) = tmpDefDOB
                    Worksheets("WS1").Range("F" & tmpBR_Row) = Worksheets("Main").Range(PleaColumn & tmpRow)
                    tmpBR_Row = tmpBR_Row + 1
                    tmpRow = tmpRow + 1
                Loop Until Worksheets("Main").Range("B" & tmpRow).Interior.ColorIndex <> OffenceColour
                Else
                tmpResultEntered = False
                End If
            End If
    Loop Until tmpRow > Worksheets("Main").Cells(Worksheets("Main").Rows.Count, "B").End(xlUp).Row
    If tmpBR_Row - 1 < 1 Then Exit Sub
    MainListEnd = tmpBR_Row
    Worksheets("WS1").Range("A1:F" & tmpBR_Row - 1).Sort Key1:=Worksheets("WS1").Columns("B"), Order1:=xlAscending
    CurrentZoom = ActiveWindow.Zoom
End Sub

Public Sub DebugMode(TF As Boolean)
    Dim tmpWS As Worksheet
    Application.ScreenUpdating = False
    For Each tmpWS In ThisWorkbook.Worksheets
    tmpWS.Activate
    ActiveWindow.DisplayHeadings = TF
    ActiveWindow.DisplayGridlines = TF
    ActiveWindow.DisplayWorkbookTabs = TF
    Next
    Application.ScreenUpdating = True
    Call ProtectMe(Not TF)
End Sub

Public Sub ApplyOffenceComment(tmpWorkSheet As String, tmpRange As String, tmpComment As String)
    Dim tmpCommentShape As Long
    If Not Worksheets(tmpWorkSheet).Range(tmpRange).Comment Is Nothing Then Exit Sub
    With Worksheets(tmpWorkSheet).Range(tmpRange)
        .AddComment tmpComment
        .Comment.Shape.TextFrame.AutoSize = True
        .Comment.Shape.AutoShapeType = msoShapeRoundedRectangle
        .Comment.Shape.Line.ForeColor.RGB = RGB(0, 0, 0)
        .Comment.Shape.Line.BackColor.RGB = RGB(255, 255, 255)
        .Comment.Shape.Fill.Visible = msoTrue
        If tmpComment = Worksheets(tmpWorkSheet).Range(OffenceFullTextColumn & Mid(tmpRange, 2)) Then
            .Comment.Shape.Fill.ForeColor.RGB = RGB(58, 82, 184)
            Else
            .Comment.Shape.Fill.ForeColor.RGB = RGB(0, 82, 0)
            End If
        .Comment.Shape.Fill.OneColorGradient msoGradientDiagonalUp, 1, 0.23
        With .Comment.Shape.TextFrame.Characters.Font
            .Size = 12
            .ColorIndex = 2
        End With
        If .Comment.Shape.Width > 500 Then
            tmpCommentShape = .Comment.Shape.Width * .Comment.Shape.Height
            .Comment.Shape.Width = 500
            .Comment.Shape.Height = (tmpCommentShape / 625) * 1.4
            End If
    End With
End Sub

Public Sub ApplyMitigationComment(tmpWorkSheet As String, tmpRange As String, tmpComment As String)
    Dim tmpCommentShape As Long
    If Not Worksheets(tmpWorkSheet).Range(tmpRange).Comment Is Nothing Then Exit Sub
    With Worksheets(tmpWorkSheet).Range(tmpRange)
        .AddComment tmpComment
        .Comment.Shape.TextFrame.AutoSize = True
        .Comment.Shape.AutoShapeType = msoShapeRoundedRectangle
        .Comment.Shape.Line.ForeColor.RGB = RGB(0, 0, 0)
        .Comment.Shape.Line.BackColor.RGB = RGB(255, 255, 255)
        .Comment.Shape.Fill.Visible = msoTrue
        .Comment.Shape.Fill.ForeColor.RGB = RGB(58, 82, 184)
        .Comment.Shape.Fill.OneColorGradient msoGradientDiagonalUp, 1, 0.23
        With .Comment.Shape.TextFrame.Characters.Font
            .Size = 12
            .ColorIndex = 2
        End With
        If .Comment.Shape.Width > 500 Then
            tmpCommentShape = .Comment.Shape.Width * .Comment.Shape.Height
            .Comment.Shape.Width = 500
            .Comment.Shape.Height = (tmpCommentShape / 625) * 1.4
            End If
    End With
End Sub

Public Sub ApplyErrorComment(tmpRange As String, tmpComment As String)
    Dim tmpCommentShape As Long
    If Not Worksheets("Main").Range(tmpRange).Comment Is Nothing Then Exit Sub
    With Worksheets("Main").Range(tmpRange)
        .AddComment tmpComment
        .Comment.Shape.TextFrame.AutoSize = True
        .Comment.Shape.AutoShapeType = msoShapeRoundedRectangle
        .Comment.Shape.Line.ForeColor.RGB = RGB(0, 0, 0)
        .Comment.Shape.Line.BackColor.RGB = RGB(255, 255, 255)
        .Comment.Shape.Fill.Visible = msoTrue
        .Comment.Shape.Fill.ForeColor.RGB = RGB(158, 20, 20)
        .Comment.Shape.Fill.OneColorGradient msoGradientDiagonalUp, 1, 0.23
        With .Comment.Shape.TextFrame.Characters.Font
            .Size = 12
            .ColorIndex = 2
        End With
        If .Comment.Shape.Width > 250 Then
            tmpCommentShape = .Comment.Shape.Width * .Comment.Shape.Height
            .Comment.Shape.Width = 250
            .Comment.Shape.Height = (tmpCommentShape / 200) * 1.3
            End If
    End With
End Sub

Public Sub ApplyResultErrorComment(tmpRange As String, tmpComment As String)
    Dim tmpCommentShape As Long
    If Not Worksheets("Results").Range(tmpRange).Comment Is Nothing Then Exit Sub
    With Worksheets("Results").Range(tmpRange)
        .AddComment tmpComment
        .Comment.Shape.TextFrame.AutoSize = True
        .Comment.Shape.AutoShapeType = msoShapeRoundedRectangle
        .Comment.Shape.Line.ForeColor.RGB = RGB(0, 0, 0)
        .Comment.Shape.Line.BackColor.RGB = RGB(255, 255, 255)
        .Comment.Shape.Fill.Visible = msoTrue
        .Comment.Shape.Fill.ForeColor.RGB = RGB(158, 20, 20)
        .Comment.Shape.Fill.OneColorGradient msoGradientDiagonalUp, 1, 0.23
        With .Comment.Shape.TextFrame.Characters.Font
            .Size = 12
            .ColorIndex = 2
        End With
        If .Comment.Shape.Width > 250 Then
            tmpCommentShape = .Comment.Shape.Width * .Comment.Shape.Height
            .Comment.Shape.Width = 250
            .Comment.Shape.Height = (tmpCommentShape / 200) * 0.7
            End If
    End With
End Sub

Public Sub ApplySuccessComment(tmpRange As String, tmpComment As String)
    Dim tmpCommentShape As Long
    If Not Worksheets("Results").Range(tmpRange).Comment Is Nothing Then Exit Sub
    With Worksheets("Results").Range(tmpRange)
        .AddComment tmpComment
        .Comment.Shape.TextFrame.AutoSize = True
        .Comment.Shape.AutoShapeType = msoShapeRoundedRectangle
        .Comment.Shape.Line.ForeColor.RGB = RGB(0, 0, 0)
        .Comment.Shape.Line.BackColor.RGB = RGB(255, 255, 255)
        .Comment.Shape.Fill.Visible = msoTrue
        .Comment.Shape.Fill.ForeColor.RGB = RGB(0, 82, 0)
        .Comment.Shape.Fill.OneColorGradient msoGradientDiagonalUp, 1, 0.23
        With .Comment.Shape.TextFrame.Characters.Font
            .Size = 12
            .ColorIndex = 2
        End With
        If .Comment.Shape.Width > 250 Then
            tmpCommentShape = .Comment.Shape.Width * .Comment.Shape.Height
            .Comment.Shape.Width = 250
            .Comment.Shape.Height = (tmpCommentShape / 200) * 1.2
            End If
    End With
End Sub

Public Sub SortCases(tmpSortBy As String)
    Dim tmpRow As Integer
    Dim tmpSortRow As Integer
    Dim tmpSurname As String
    Dim tmpForename As String
    Dim tmpPlea As String
    Dim tmpStartRow As Integer
    Dim tmpEndRow As Integer
    Dim tmpNotGuilty As String
    Dim tmpAge As Integer
    Dim tmpCTRoom As Integer
    Dim tmpSess As String
    Dim tmpURN As String
    Dim tmpUpdateCaption As Boolean
    Dim tmpLastSortRow As Integer
    tmpRow = 15
    tmpSortRow = 1
    
    Call ProtectMe(False)
    Application.ScreenUpdating = False
    tmpDisableAllChange = True
    Worksheets("Sort").Cells.Clear
    ' Perform a sort on separate table
    With Worksheets("Main")
        Do
            If .Range("B" & tmpRow) = "Defendant" Then
                If InStrRev(.Range("B" & tmpRow + 1), " ") > 0 Then
                    tmpSurname = Trim(Mid(.Range("B" & tmpRow + 1), InStrRev(.Range("B" & tmpRow + 1), " ")))
                    tmpForename = Trim(Left(.Range("B" & tmpRow + 1), InStrRev(.Range("B" & tmpRow + 1), " ")))
                    Else
                    tmpSurname = .Range("B" & tmpRow + 1)
                    tmpForename = ""
                    End If
                tmpAge = Val(.Range("T" & tmpRow + 1))
                tmpCTRoom = Val(.Range("Q" & tmpRow + 1))
                tmpURN = .Range(URNColumn & tmpRow + 1)
                If InStr(.Range("Q" & tmpRow + 1), "Am") > 0 Then tmpSess = "Am" Else tmpSess = "Pm"
                tmpStartRow = tmpRow
                tmpRow = tmpRow + 3
                tmpNotGuilty = ""
                Do
                    tmpPlea = .Range(PleaColumn & tmpRow)
                    If Left(tmpPlea, 6) = "Guilty" Then tmpPlea = "Guilty"
                    If Left(tmpPlea, 10) = "Not Guilty" Then tmpNotGuilty = tmpPlea
                    tmpRow = tmpRow + 1
                Loop Until Len(.Range("B" & tmpRow)) = 0
                If tmpNotGuilty <> "" Then tmpPlea = "Not Guilty"
                tmpEndRow = tmpRow - 1
                Worksheets("Sort").Range("A" & tmpSortRow) = .Range("A" & tmpStartRow + 1)
                Worksheets("Sort").Range("B" & tmpSortRow) = tmpSurname & " " & tmpForename
                Worksheets("Sort").Range("C" & tmpSortRow) = tmpPlea
                Worksheets("Sort").Range("D" & tmpSortRow) = tmpStartRow
                Worksheets("Sort").Range("E" & tmpSortRow) = tmpEndRow
                Worksheets("Sort").Range("F" & tmpSortRow) = tmpAge
                Worksheets("Sort").Range("G" & tmpSortRow) = tmpCTRoom
                Worksheets("Sort").Range("H" & tmpSortRow) = tmpSess
                Worksheets("Sort").Range("I" & tmpSortRow) = tmpURN
                tmpSortRow = tmpSortRow + 1
                End If
            tmpRow = tmpRow + 1
        Loop Until tmpRow > Worksheets("Main").Cells(Worksheets("Main").Rows.Count, "B").End(xlUp).Row
        If tmpSortRow < 2 Then GoTo Sort_End
        
        Select Case tmpSortBy
        
        Case Is = "PleaAlpha"
            Worksheets("Sort").Range("A1:I" & tmpSortRow).Sort Key1:=Worksheets("Sort").Columns("C"), Order1:=xlAscending, Key2:=Worksheets("Sort").Columns("B"), Order1:=xlAscending
        
        Case Is = "PleaAge"
            Worksheets("Sort").Range("A1:I" & tmpSortRow).Sort Key1:=Worksheets("Sort").Columns("C"), Order1:=xlAscending, Key2:=Worksheets("Sort").Columns("F"), Order1:=xlDescending, Key3:=Worksheets("Sort").Columns("B"), Order1:=xlAscending
        
        Case Is = "Age"
            Worksheets("Sort").Range("A1:I" & tmpSortRow).Sort Key1:=Worksheets("Sort").Columns("F"), Order1:=xlDescending, Key2:=Worksheets("Sort").Columns("B"), Order1:=xlAscending
        
        Case Is = "CourtList"
            Worksheets("Sort").Range("A1:I" & tmpSortRow).Sort Key1:=Worksheets("Sort").Columns("H"), Order1:=xlAscending, Key2:=Worksheets("Sort").Columns("G"), Order1:=xlAscending, Key3:=Worksheets("Sort").Columns("A"), Order1:=xlAscending
            
        Case Is = "URN"
            Worksheets("Sort").Range("A1:I" & tmpSortRow).Sort Key1:=Worksheets("Sort").Columns("I"), Order1:=xlAscending, Key2:=Worksheets("Sort").Columns("B"), Order1:=xlAscending

        End Select
        
        ' Cycle the cases and re-position
        tmpSortRow = 1
        tmpStartRow = Worksheets("Main").Cells(Worksheets("Main").Rows.Count, "B").End(xlUp).Row + 5
        tmpRow = tmpStartRow
        If IsUserFormLoaded("frmAddRemoveCases") = True Then tmpUpdateCaption = True: tmpLastSortRow = Worksheets("Sort").Cells(Worksheets("Sort").Rows.Count, "A").End(xlUp).Row
        Do
            Call MoveCase(Worksheets("Sort").Range("D" & tmpSortRow), Worksheets("Sort").Range("E" & tmpSortRow), tmpRow)
            tmpRow = tmpRow + (Worksheets("Sort").Range("E" & tmpSortRow) - Worksheets("Sort").Range("D" & tmpSortRow)) + 3
            If tmpUpdateCaption = True Then frmAddRemoveCases.lblProcessing.Caption = Format(IIf(tmpSortRow / tmpLastSortRow < 1, tmpSortRow / tmpLastSortRow, 1), "##0%") & " Sorting": DoEvents
            tmpSortRow = tmpSortRow + 1
        Loop Until Len(Worksheets("Sort").Range("A" & tmpSortRow)) = 0
        .Range("A15:" & LastColumn & tmpStartRow - 5).Clear
        .Range("A" & tmpStartRow & ":" & LastColumn & tmpRow).Copy
        .Range("A15").PasteSpecial (xlPasteAll)
        .Range("A" & tmpStartRow & ":" & LastColumn & tmpRow).Clear
        .Range("A14:" & LastColumn & tmpStartRow - 3).BorderAround ColorIndex:=1
        .Range("B15:C15").Merge
        .Range("H15:N15").Merge
        
        ' Pre-populate any dropdowns that need fixing
        tmpRow = 18
        tmpLastSortRow = Worksheets("Main").Cells(Worksheets("Main").Rows.Count, "B").End(xlUp).Row
        Do
            If .Range(OriginalOffenceColumn & tmpRow) = "Y" Or .Range(OriginalOffenceColumn & tmpRow) = "N" Then
                Call ApplyOffenceComment("Main", "B" & tmpRow, .Range(OffenceFullTextColumn & tmpRow))
                If .Range(OriginalMitigationColumn & tmpRow) <> "" Then Call ApplyMitigationComment("Main", PleaColumn & tmpRow, .Range(OriginalMitigationColumn & tmpRow))
                End If
            If tmpUpdateCaption = True Then frmAddRemoveCases.lblProcessing.Caption = Format(IIf(tmpRow / tmpLastSortRow < 1, tmpRow / tmpLastSortRow, 1), "##0%") & " Applying Offence Text & Mitigation": DoEvents
            tmpRow = tmpRow + 1
        Loop Until tmpRow > Worksheets("Main").Cells(Worksheets("Main").Rows.Count, "B").End(xlUp).Row
Sort_End:
    End With
    Worksheets("Sort").Cells.Clear
    Application.ScreenUpdating = True
    Call RebuildQuickFind
    tmpDisableAllChange = False
    Call ProtectMe(True)
End Sub

Sub MoveCase(tmpStartRow As Integer, tmpEndRow As Integer, tmpDestinationRow As Integer)
    Worksheets("Main").Range("A" & tmpStartRow & ":" & LastColumn & tmpEndRow + 2).Copy
    Worksheets("Main").Range("A" & tmpDestinationRow).PasteSpecial (xlPasteValues)
    Worksheets("Main").Range("A" & tmpStartRow & ":" & LastColumn & tmpEndRow + 2).Copy
    Worksheets("Main").Range("A" & tmpDestinationRow).PasteSpecial (xlPasteFormats)
End Sub

Public Sub RebuildQuickFind()
    Dim tmpRow As Integer
    Dim tmpName As String
    Dim tmpSurname As String
    Dim tmpForename As String
    tmpRow = 15
    With Worksheets("Main")
        .txtQuickFind.Clear
        Do
            If .Range("B" & tmpRow) = "Defendant" Then
                tmpRow = tmpRow + 1
                tmpName = .Range("B" & tmpRow)
                If InStr(tmpName, "(") > 0 Then tmpName = Trim(Left(tmpName, InStr(tmpName, "(") - 1))
                If InStr(tmpName, " ") > 0 Then
                    tmpSurname = Trim(Mid(tmpName, InStrRev(tmpName, " ")))
                    tmpForename = Trim(Left(tmpName, InStrRev(tmpName, " ")))
                    Else
                    tmpSurname = tmpName
                    tmpForename = ""
                    End If
                If Left(LCase(tmpForename), 3) = "mr " Or Left(LCase(tmpForename), 3) = "ms " Or Left(LCase(tmpForename), 5) = "miss " Or Left(LCase(tmpForename), 3) = "dr " Or Left(LCase(tmpForename), 4) = "mrs " Then
                    tmpForename = Trim(Mid(tmpForename, InStr(tmpForename, " ")))
                    End If
                tmpURN = .Range(URNColumn & tmpRow)
            
                Select Case .txtValidated
                
                Case Is = "Un-Validated"
                    If .Range(ValidationColumn & tmpRow - 1).Interior.ColorIndex = BadColour Then
                        .txtQuickFind.AddItem tmpRow - 1
                        .txtQuickFind.List(.txtQuickFind.ListCount - 1, 1) = tmpSurname & ", " & tmpForename
                        .txtQuickFind.List(.txtQuickFind.ListCount - 1, 2) = tmpURN
                        End If
                    
                Case Is = "Validated"
                    If .Range(ValidationColumn & tmpRow - 1).Interior.ColorIndex = GoodColour Then
                        .txtQuickFind.AddItem tmpRow - 1
                        .txtQuickFind.List(.txtQuickFind.ListCount - 1, 1) = tmpSurname & ", " & tmpForename
                        .txtQuickFind.List(.txtQuickFind.ListCount - 1, 2) = tmpURN
                        End If
                        
                Case Else
                    .txtQuickFind.AddItem tmpRow - 1
                    .txtQuickFind.List(.txtQuickFind.ListCount - 1, 1) = tmpSurname & ", " & tmpForename
                    .txtQuickFind.List(.txtQuickFind.ListCount - 1, 2) = tmpURN
                
                End Select
                End If
            tmpRow = tmpRow + 1
        Loop Until tmpRow > Worksheets("Main").Cells(Worksheets("Main").Rows.Count, "B").End(xlUp).Row
    End With
End Sub

Public Function LockFileInUse() As Boolean
    Dim tmpLockFile As String
    Dim DataLine As String
    tmpLockFile = Left(Worksheets("Main").Range("C4"), Len(Worksheets("Main").Range("C4")) - 4) & ".loc"
    If FileExists(tmpLockFile) Then
        On Error Resume Next
        Open tmpLockFile For Input Shared As #1
        Line Input #1, DataLine
        Close 1
        On Error GoTo 0
        If Worksheets("Main").Range("G6") <> DataLine Then
            If MsgBox("Error!  " & DataLine & " is currently choosing cases from this court list." & vbCr & "If this legal adviser is definately not accessing cases you can override the lock file." & vbCr & "If they are accessing cases and you override the lock file this will cause an error" & vbCr & "Do you want to override the lock file?", vbYesNo) = vbNo Then
                LockFileInUse = True
                Exit Function
                Else
                On Error Resume Next
                Open tmpLockFile For Output As #1
                Print #1, Worksheets("Main").Range("G6")
                Close 1
                On Error GoTo 0
                End If
            End If
        Exit Function
        End If
    Open tmpLockFile For Output As #1
    Print #1, Worksheets("Main").Range("G6")
    Close 1
End Function

Public Function KillLockFile() As Boolean
    Dim tmpLockFile As String
    On Error Resume Next
    tmpLockFile = Left(Worksheets("Main").Range("C4"), Len(Worksheets("Main").Range("C4")) - 4) & ".loc"
    Kill tmpLockFile
    KillLockFile = True
    If FileExists(tmpLockFile) Then
        Open tmpLockFile For Input Shared As #1
        Line Input #1, DataLine
        Close 1
        If Worksheets("Main").Range("G6") = DataLine Then KillLockFile = False: MsgBox "Error!  Unable to remove the lock file for " & DataLine & ". Please contact Paul Ridings"
        End If
    On Error GoTo 0
End Function

Public Function FileExists(tmpFileName As String) As Boolean
    FileExists = False
    If Len(Dir(tmpFileName, vbHidden)) > 0 Then FileExists = True
End Function

Public Sub ValidateAll(ForceQuickFindRebuild As Boolean)
    Dim tmpRow As Integer
    tmpDisableWorkSheetChange = True
    Application.ScreenUpdating = False
    Call ProtectMe(False)
    With Worksheets("Main")

        ' Cycle the defendants and validate each row
        tmpRow = 14
        Do
            If Range("B" & tmpRow) = "Defendant" Then Call ValidateRow(tmpRow)
            tmpRow = tmpRow + 1
        Loop Until tmpRow > .Cells(.Rows.Count, "B").End(xlUp).Row
    
    If ForceQuickFindRebuild = True Then Call RebuildQuickFind
    
    End With
    Call ValidateCounters
    Application.ScreenUpdating = True
    Call ProtectMe(True)
    tmpDisableWorkSheetChange = False
End Sub

Public Sub ValidateCounters()
    Dim tmpRow As Integer
    Dim tmpBadCount As Integer
    Dim tmpGoodCount As Integer
    Dim tmpBackupFile As String
    tmpRow = 14
    tmpDisableWorkSheetChange = True
    With Worksheets("Main")
        Do
            If .Range("B" & tmpRow) = "Defendant" Then
                If .Range(ValidationColumn & tmpRow) = "X" Then
                    tmpBadCount = tmpBadCount + 1
                    Else
                    tmpGoodCount = tmpGoodCount + 1
                    End If
                tmpRow = tmpRow + 5
                End If
            tmpRow = tmpRow + 1
        Loop Until tmpRow > .Cells(.Rows.Count, "B").End(xlUp).Row
        If tmpBadCount = 0 And tmpGoodCount = 0 Then .Range("J12:K12") = "": GoTo ValidateCounters_0
        If tmpBadCount = 0 Then
            If Sheet1.txtProsecutorType <> "Pre Charge Bail" Then .btnSaveResults.Enabled = True Else .btnSaveResults.Enabled = False
            .btnInformPostCourt.Enabled = True
            .Range("K12").Locked = True
            Else
            .btnSaveResults.Enabled = False
            .btnInformPostCourt.Enabled = False
            .Range("K12").Locked = False
            End If
        Range("K12") = tmpBadCount: Range("J12") = tmpGoodCount
    End With
ValidateCounters_0:
    tmpDisableWorkSheetChange = False
    ' Perform Auto Save
    If Val(Range("S5")) > 0 Then
        If Val(Range("J12")) <> AutoSaveInterval Then
            If Val(Range("J12")) Mod Val(Range("S5")) = 0 Then
                AutoSaveInterval = Val(Range("J12"))
                If FolderExists(ThisWorkbook.Path & "\Backup") = False Then MkDir ThisWorkbook.Path & "\Backup"
                ThisWorkbook.SaveCopyAs ThisWorkbook.Path & "\Backup\Case Resulter Backup " & Right(Date, 4) & "-" & Mid(Date, 4, 2) & "-" & Left(Date, 2) & " - " & Left(Time, 2) & Mid(Time, 4, 2) & Right(Time, 2) & ".xls"
                ' Perform purge of old backups
                tmpBackupFile = Dir(ThisWorkbook.Path & "\Backup\*.xls")
                Do
                    If Left(tmpBackupFile, 31) <> "Case Resulter Backup " & Right(Date, 4) & "-" & Mid(Date, 4, 2) & "-" & Left(Date, 2) Then Kill ThisWorkbook.Path & "\Backup\" & tmpBackupFile
                    tmpBackupFile = Dir()
                Loop Until tmpBackupFile = ""
                End If
            End If
        End If
End Sub

Public Sub ValidateRow(tmpRow As Integer)
    Dim tmpFirstRow As Integer
    Dim tmpDefendantRow As Integer
    Dim tmpOffenceHeaderRow As Integer
    Dim tmpStat_ReOpen As Boolean
    Dim tmpNoPlea As Boolean
    Dim tmpGuiltyPlea As Boolean
    Dim tmpNotGuiltyPlea As Boolean
    Dim tmpActionType As String
    Dim tmpOffRow As Integer
    
    tmpNoPlea = False
    tmpGuiltyPlea = False
    tmpNotGuiltyPlea = False
    tmpDefendantRow = tmpRow
    tmpRow = tmpRow + 3
    With Worksheets("Main")
        If .Range("B" & tmpRow) = "Offence" Then tmpRow = tmpRow + 1
        tmpFirstRow = tmpRow
        tmpOffenceHeaderRow = tmpRow - 1
        ' Cycle the Offences for stat decs and application to re-opens
        tmpStat_ReOpen = False
        Do
            If InStr(Range("B" & tmpFirstRow), "MC80524") Or InStr(Range("B" & tmpFirstRow), "MC80527") Or InStr(Range("B" & tmpFirstRow), "MC80528") Then tmpStat_ReOpen = True
            tmpFirstRow = tmpFirstRow + 1
        Loop Until .Range("B" & tmpFirstRow).Interior.ColorIndex <> OffenceColour
        ' Clear any comments
        Range("D" & tmpDefendantRow & ":E" & tmpFirstRow - 1).Cells.ClearComments
        Range("G" & tmpDefendantRow & ":" & ValidationColumn & tmpFirstRow - 1).Cells.ClearComments
        
        ' Cycle the Offences
        tmpFirstRow = tmpRow
        Do
            ' Check Appears field
            If .Range("D" & tmpRow) = "" Then
                Call ApplyErrorComment("D" & tmpRow, "Error! Appears must be Y or N.")
                tmpBad = True
                End If
            ' Check LAP field
            If .Range("E" & tmpRow) = "" Then
                If .txtProsecutorType <> "Proceeds Of Crime Act" Then
                    Call ApplyErrorComment("E" & tmpRow, "Error! Legal Adviser Powers must be Y or N.")
                    Else
                    Call ApplyErrorComment("E" & tmpRow, "Error! Interested Parties must be Y or N.")
                    End If
                tmpBad = True
                End If
            ' Check Plea field
            If .txtProsecutorType <> "Proceeds Of Crime Act" Then
                If .Range(PleaColumn & tmpRow) = "No Plea" Then tmpNoPlea = True
                If Left(.Range(PleaColumn & tmpRow), 6) = "Guilty" Then tmpGuiltyPlea = True
                If Left(.Range(PleaColumn & tmpRow), 10) = "Not Guilty" Then tmpNotGuiltyPlea = True
                If .Range(PleaColumn & tmpRow) = "" And (.Range(ActionColumn & tmpRow) <> "NEO Dismissed" And .Range(ActionColumn & tmpRow) <> "Not Completed") Then
                    If Not (.Range(PleaColumn & tmpRow).Comment) Is Nothing Then .Range(PleaColumn & tmpRow).Cells.ClearComments
                    Call ApplyErrorComment(PleaColumn & tmpRow, "Error! Invalid Plea, you must choose a plea.")
                    tmpBad = True
                    Else
                    ' Restore the plea mitigation if online plea selected
                    If InStr(.Range(PleaColumn & tmpRow), "(Online") > 0 Then
                        If Not .Range(PleaColumn & tmpRow).Comment Is Nothing Then
                            If .Range(PleaColumn & tmpRow).Comment.Text <> .Range(OriginalMitigationColumn & tmpRow) Then
                                .Range(PleaColumn & tmpRow).Cells.ClearComments
                                Call ApplyMitigationComment("Main", PleaColumn & tmpRow, .Range(OriginalMitigationColumn & tmpRow))
                                End If
                            Else
                            If Len(.Range(OriginalMitigationColumn & tmpRow)) <> 0 Then
                                Call ApplyMitigationComment("Main", PleaColumn & tmpRow, .Range(OriginalMitigationColumn & tmpRow))
                                End If
                            End If
                        Else
                        If Not .Range(PleaColumn & tmpRow).Comment Is Nothing Then .Range(PleaColumn & tmpRow).Cells.ClearComments
                        End If
                    End If
                End If
            ' Check the Action field
            If .Range(ActionColumn & tmpRow) = "" Then
                Call ApplyErrorComment(ActionColumn & tmpRow, "Error! The Action field cannot be blank.")
                tmpBad = True
                GoTo ValidateNextOffence
                End If
            ' Check Summons / Adj Date
            If .Range(ActionColumn & tmpRow) = "Adjourned for Court Hearing" Or .Range(ActionColumn & tmpRow) = "Adjourned PIA" Or .Range(ActionColumn & tmpRow) = "Adjourned (SJP)" Or .Range(ActionColumn & tmpRow) = "Adjourned PIA (SJP)" Or .Range(ActionColumn & tmpRow) = "Referred To Court [With Date]" Or .Range(ActionColumn & tmpRow) = "Referred To Court" Then
                If .txtProsecutorType = "Proceeds Of Crime Act" Then
                    If .Range("Q" & tmpRow) <> "Y" And .Range("Q" & tmpRow) <> "N" Then Call ApplyErrorComment("Q" & tmpRow, "Error! You must choose Y or N for Directions"): tmpBad = True
                    End If
                If .Range("R" & tmpRow) = "" And .Range(ActionColumn & tmpRow) <> "Referred To Court" Then
                    If .txtProsecutorType <> "Pre Charge Bail" Then
                        Call ApplyErrorComment("R" & tmpRow, "Error! Invalid Reason, you must choose a reason from the drop down box if available or type something in.")
                        Else
                        Call ApplyErrorComment("R" & tmpRow, "Error! Invalid Reason, you must enter a referred reason.")
                        End If
                    tmpBad = True
                    End If
                If .Range("S" & tmpRow) = "" And .Range("R" & tmpRow) <> "Warrant Issued (No Bail)" Then
                    Call ApplyErrorComment("S" & tmpRow, "Error! Invalid Adjournment Date, you must enter a valid future adjournment date in 'dd/mm/yyyy hh:mm' format.")
                    tmpBad = True
                    End If
                GoTo ValidateNextOffence
                End If
            ' Proceeds Of Crime - Action Granted
            If .txtProsecutorType = "Proceeds Of Crime Act" And .Range(ActionColumn & tmpRow) = "Granted" Then
                If .Range("K" & tmpRow) = "" Then Call ApplyErrorComment("K" & tmpRow, "Error! Enter the Forfeiture Amount - free text can include currency."): tmpBad = True
                If .Range("M" & tmpRow) = "" Then Call ApplyErrorComment("M" & tmpRow, "Error! Enter the Interpartes Costs - free text can include currency."): tmpBad = True
                End If
            ' Pre Charge Bail
            If .txtProsecutorType = "Pre Charge Bail" And .Range(ActionColumn & tmpRow) <> "Granted" And .Range(ActionColumn & tmpRow) <> "Refused" Then
                If .Range(ActionColumn & tmpRow) = "Extension Granted" And IsDate(.Range("M" & tmpRow)) = False Then
                    Call ApplyErrorComment("M" & tmpRow, "Error! Invalid Original Bail Start Date.")
                    tmpBad = True
                    End If
                If InStr(.Range(ActionColumn & tmpRow), "Referred") = 0 And InStr(.Range(ActionColumn & tmpRow), "Refused") = 0 And InStr(.Range(ActionColumn & tmpRow), "Withdrawn") = 0 And .Range("N" & tmpRow) = "" Then
                    Call ApplyErrorComment("N" & tmpRow, "Error! Invalid Bail Period.")
                    tmpBad = True
                    End If
                If InStr(.Range(ActionColumn & tmpRow), "Referred") = 0 And InStr(.Range(ActionColumn & tmpRow), "Refused") = 0 And InStr(.Range(ActionColumn & tmpRow), "Withdrawn") = 0 And IsDate(.Range("O" & tmpRow)) = False Then
                    Call ApplyErrorComment("O" & tmpRow, "Error! Invalid New Bail End Date.")
                    tmpBad = True
                    End If
                End If
            
            ' Check Conditional Discharge
            If .Range(ActionColumn & tmpRow) = "Conditional Discharge" Then
                ' Check GP Cred
                If .Range(GuiltyCreditColumn & tmpRow) = "" Then Call ApplyErrorComment(GuiltyCreditColumn & tmpRow, "Error! You must put a Y or N in for Guilty Plea Credit"): tmpBad = True
                ' Check Costs
                If .Range(FCOSTSColumn & tmpRow) = "" And CheckFigureInOffenceColumn(FCOSTSColumn, Val(tmpFirstRow)) = False Then Call ApplyErrorComment(FCOSTSColumn & tmpRow, "Error! The FCosts cannot be blank when choosing Conditional Discharge"): tmpBad = True
                ' Check VS
                If .Range(VSColumn & tmpRow) = "" And CheckFigureInOffenceColumn(VSColumn, Val(tmpFirstRow)) = False Then Call ApplyErrorComment(VSColumn & tmpRow, "Error! The Victim Surcharge cannot be blank when choosing Conditional Discharge"): tmpBad = True
                ' Check COLLO
                If .Range("P" & tmpRow) = "" Then Call ApplyErrorComment("P" & tmpRow, "Error! Collection Order must by Y or N when " & tmpActionType): tmpBad = True
                GoTo ValidateNextOffence
                End If
            ' Check Absolute Discharge
            If .Range(ActionColumn & tmpRow) = "Absolute Discharge" Then
                ' Check Costs
                If .Range(FCOSTSColumn & tmpRow) = "" And CheckFigureInOffenceColumn(FCOSTSColumn, Val(tmpFirstRow)) = False Then Call ApplyErrorComment(FCOSTSColumn & tmpRow, "Error! The FCosts cannot be blank when choosing Conditional Discharge"): tmpBad = True
                GoTo ValidateNextOffence
                End If
            ' Check Withdrawn
            If .Range(ActionColumn & tmpRow) = "Withdrawn" Then
                ' Withdrawn
                GoTo ValidateNextOffence
                End If
            
            If .Range(ActionColumn & tmpRow) = "Fine" Or Left(.Range(PleaColumn & tmpRow), 6) = "PIA On" Or .Range(ActionColumn & tmpRow) = "Proved In Absence" Or .Range(ActionColumn & tmpRow) = "Proved In Abs (SJP)" Then
                If .Range(ActionColumn & tmpRow) = "Fine" Then tmpActionType = "the defendant is fined." Else tmpActionType = "Proved In Absence."
                If .Range(FineColumn & tmpRow) <> "No Separate Penalty" Then
                    ' Check GP Cred
                    If .Range(GuiltyCreditColumn & tmpRow) = "" Then Call ApplyErrorComment(GuiltyCreditColumn & tmpRow, "Error! You must put a Y in for Guilty Plea Credit when " & tmpActionType): tmpBad = True
                    ' Check Income
                    If .Range(IncomeColumn & tmpRow) = "" Then Call ApplyErrorComment(IncomeColumn & tmpRow, "Error! You must enter an income when " & tmpActionType): tmpBad = True
                    ' Check Band
                    If .Range(BandColumn & tmpRow) = "" Then Call ApplyErrorComment(BandColumn & tmpRow, "Error! You must enter a band (A,B,C) when " & tmpActionType): tmpBad = True
                    ' Check Fine
                    If Val(Range(FineColumn & tmpRow)) = 0 Then Call ApplyErrorComment(FineColumn & tmpRow, "Error! The Fine cannot be zero when " & tmpActionType): tmpBad = True
                    ' Check Costs
                    If .Range(FCOSTSColumn & tmpRow) = "" And CheckFigureInOffenceColumn(FCOSTSColumn, Val(tmpFirstRow)) = False Then Call ApplyErrorComment(FCOSTSColumn & tmpRow, "Error! The FCosts cannot be blank when " & tmpActionType): tmpBad = True
                    ' Check VS
                    If .Range(VSColumn & tmpRow) = "" And CheckFigureInOffenceColumn(VSColumn, Val(tmpFirstRow)) = False Then Call ApplyErrorComment(VSColumn & tmpRow, "Error! The Victim Surcharge cannot be blank when " & tmpActionType): tmpBad = True
                    ' Check Lic Pen Pts
                    If .Range("O" & tmpRow) = "" Then
                       If .txtProsecutorType <> "Traffic" And .txtProsecutorType <> "Traffic (SJP)" Then
                            Call ApplyErrorComment("O" & tmpRow, "Error! AEO/DBO must be:-" & vbLf & "AEO (Attachment of Earnings)" & vbLf & "DBO (Deduction from Benefits)" & vbLf & "or None when " & tmpActionType): tmpBad = True
                            Else
                            Call ApplyErrorComment("O" & tmpRow, "Error! Lic/Pen Pts must be:-" & vbLf & "NE (Licence Not Endorsed)" & vbLf & "LE (Licence Endorsed)" & vbLf & "or 3-10 points when " & tmpActionType): tmpBad = True
                            End If
                        End If
                    ' Check COLLO
                    If .Range("P" & tmpRow) = "" Then Call ApplyErrorComment("P" & tmpRow, "Error! Collection Order must by Y or N when " & tmpActionType): tmpBad = True
                    ' Check Pay By Date
                    If .Range("Q" & tmpRow) = "" Then Call ApplyErrorComment("Q" & tmpRow, "Error! You must enter a 'Pay By Date' or payment terms when " & tmpActionType): tmpBad = True
                    If .Range("T" & tmpOffenceHeaderRow) <> "" Then
                        ' Check DISQ
                        If .Range("T" & tmpRow) = "" Then Call ApplyErrorComment("T" & tmpRow, "Error! Disqualification must by Y, N or EH when " & tmpActionType): tmpBad = True
                        End If
                    Else
                    ' Check Lic Pen Pts
                    If .Range("O" & tmpRow) = "" Then
                        If .txtProsecutorType <> "Traffic" And .txtProsecutorType <> "Traffic (SJP)" Then
                            Call ApplyErrorComment("O" & tmpRow, "Error! AEO/DBO must be:-" & vbLf & "AEO (Attachment of Earnings)" & vbLf & "DBO (Deduction from Benefits)" & vbLf & "or None when " & tmpActionType): tmpBad = True
                            Else
                            Call ApplyErrorComment("O" & tmpRow, "Error! Lic/Pen Pts must be:-" & vbLf & "NE (Licence Not Endorsed)" & vbLf & "LE (Licence Endorsed)" & vbLf & "or 3-10 points when " & tmpActionType): tmpBad = True
                            End If
                        End If
                        
                    End If
                GoTo ValidateNextOffence
                End If
                                                        
ValidateNextOffence:
            tmpRow = tmpRow + 1
        Loop Until Len(Range("B" & tmpRow)) = 0
        tmpDisableWorkSheetChange = True
        If tmpBad = True Then
            .Range(ValidationColumn & tmpDefendantRow).Interior.ColorIndex = BadColour
            .Range(ValidationColumn & tmpDefendantRow).Font.Name = "Ariel"
            .Range(ValidationColumn & tmpDefendantRow) = "X"
            Else
            .Range(ValidationColumn & tmpDefendantRow).Interior.ColorIndex = GoodColour
            .Range(ValidationColumn & tmpDefendantRow).Font.Name = "Wingdings"
            .Range(ValidationColumn & tmpDefendantRow) = Chr$(252)
            End If
        tmpDisableWorkSheetChange = False
        tmpRow = tmpRow + 1
    End With
End Sub

Function CheckFigureInOffenceColumn(tmpCol As String, tmpRow As Integer) As Boolean
    With Worksheets("Main")
        Do
            If .Range(tmpCol & tmpRow).Interior.ColorIndex = OffenceColour Then
                If Val(.Range(tmpCol & tmpRow)) > 0 Then CheckFigureInOffenceColumn = True: Exit Do
                End If
            tmpRow = tmpRow + 1
        Loop Until .Range(tmpCol & tmpRow).Interior.ColorIndex <> OffenceColour
    End With
End Function

Public Function ResetLA()
    tmpDisableWorkSheetChange = True
    Call ShowWorkSheet("Main")
    Call ProtectMe(False)
    Range("C3") = ""
    Range("J6") = ""
    Range("G6") = ""
    Call ProtectMe(True)
    Worksheets("Results").Range("G6") = ""
    tmpDisableWorkSheetChange = False
End Function

Public Function ScanSingleOffenceOnlinePlea(tmpFileName As String, tmpOffenceRow As Integer, tmpSJP As String) As String
    Dim tmpDataline As String
    Dim tmpCount As Integer
    Dim tmpBenefits As String
    Dim tmpBenefitsPeriod As String
    ' Single plea scan
    Open tmpFileName For Input Shared As #2
    Do While Not EOF(2)
        Line Input #2, tmpDataline
        If InStr(LCase(tmpDataline), ">plea</") > 0 Or InStr(LCase(tmpDataline), "your plea") > 0 Or InStr(LCase(tmpDataline), "company plea") > 0 Then
            For tmpCount = 1 To 25
                If EOF(2) Then Exit For
                Line Input #2, tmpDataline
                If InStr(LCase(tmpDataline), "not guilty") > 0 Then ScanSingleOffenceOnlinePlea = "Not Guilty" & tmpSJP & vbLf & "(Online Plea)":  Exit For
                If InStr(LCase(tmpDataline), "guilty") > 0 Then ScanSingleOffenceOnlinePlea = "Guilty" & tmpSJP & vbLf & "(Online Plea)"
                If EOF(2) Or InStr(LCase(tmpDataline), ">mitigation</") > 0 Then Exit For
            Next tmpCount
            End If
            
' Detect Mitigation
        If InStr(LCase(tmpDataline), ">mitigation</") > 0 Then
            Line Input #2, tmpDataline
            For tmpCount = 1 To 25
                DefendantMitigation = DefendantMitigation & Trim(tmpDataline) & " "
                Line Input #2, tmpDataline
                If Len(Trim(tmpDataline)) = 0 Or InStr(tmpDataline, "<dt>Plead") > 0 Then Exit For
            Next tmpCount
            DefendantMitigation = Replace(DefendantMitigation, "<td>", "")
            DefendantMitigation = Replace(DefendantMitigation, "</td>", "")
            DefendantMitigation = Replace(DefendantMitigation, "</tr>", "")
            DefendantMitigation = Replace(DefendantMitigation, "<dd>", "")
            DefendantMitigation = Replace(DefendantMitigation, "</dd>", "")
            DefendantMitigation = Replace(DefendantMitigation, "&amp;", "&")
            DefendantMitigation = Replace(DefendantMitigation, "&#39;", "'")
            DefendantMitigation = Replace(DefendantMitigation, "<br />", "")
            DefendantMitigation = Replace(DefendantMitigation, "|fffd|", "")
            For tmpCount = 1 To 10
                Line Input #2, tmpDataline
                If EOF(2) Then Exit For
                If InStr(LCase(tmpDataline), ">plead guilty in court</") > 0 Then
                    Line Input #2, tmpDataline
                    If EOF(2) Then Exit For
                    If InStr(tmpDataline, ">Yes</") > 0 Then
                        ' Plead Guilty In Court (Req DOH)
                        ScanSingleOffenceOnlinePlea = Replace(ScanSingleOffenceOnlinePlea, "Guilty", "Guilty Req DOH")
                        Exit For
                        End If
                    End If
            Next tmpCount
            End If
' ********** This is the income from the plea **********
        If InStr(LCase(tmpDataline), ">your benefits</") > 0 Then
            For tmpCount = 1 To 20
                Line Input #2, tmpDataline
                If Len(tmpDataline) > 0 Then
                    If InStr(tmpDataline, ">Your benefits are paid</") > 0 Then
                        Line Input #2, tmpDataline
                        tmpBenefitsPeriod = Mid(tmpDataline, InStr(tmpDataline, ">") + 1)
                        If InStr(tmpBenefitsPeriod, "<") > 0 Then tmpBenefitsPeriod = Left(tmpBenefitsPeriod, InStr(tmpBenefitsPeriod, "<") - 1)
                        End If
                    If InStr(tmpDataline, "|fffd|") > 0 Then
                        tmpBenefits = Replace(Mid(tmpDataline, InStr(tmpDataline, "|fffd|") + 1), ",", "")
                        If InStr(tmpBenefits, "<") > 0 Then tmpBenefits = Left(tmpBenefits, InStr(tmpBenefits, "<") - 1)
                        If tmpBenefitsPeriod = "Fortnightly" Then tmpBenefits = Val(tmpBenefits) / 2
                        If tmpBenefitsPeriod = "Monthly" Then tmpBenefits = (Val(tmpBenefits) * 12) / 52
                        Exit For
                        End If
                    End If
            Next tmpCount
            End If
        If InStr(LCase(tmpDataline), ">total weekly income</") > 0 Or InStr(LCase(tmpDataline), ">weekly take home pay") > 0 Or InStr(LCase(tmpDataline), ">weekly</dd>") > 0 Then
            For tmpCount = 1 To 30
                Line Input #2, tmpDataline
                If Len(tmpDataline) > 0 Then
                    If InStr(tmpDataline, "|fffd|") > 0 Then
                        DefendantIncome = Replace(Mid(tmpDataline, InStr(tmpDataline, "|fffd|") + 1), ",", "")
                        If InStr(DefendantIncome, "<") > 0 Then DefendantIncome = Left(DefendantIncome, InStr(DefendantIncome, "<") - 1)
                        DefendantIncome = Val(DefendantIncome) - Val(tmpBenefits)
                        Exit For
                        End If
                    End If
            Next tmpCount
            End If
    Loop
    If Len(DefendantMitigation) < 3 Then DefendantMitigation = ""
    Close 2
End Function

Sub ToggleCutCopyAndPaste(Allow As Boolean)
     'Activate/deactivate cut, copy, paste and pastespecial menu items
    Call EnableMenuItem(21, Allow) ' cut
    Call EnableMenuItem(19, Allow) ' copy
    Call EnableMenuItem(22, Allow) ' paste
    Call EnableMenuItem(755, Allow) ' pastespecial
     
     'Activate/deactivate drag and drop ability
    Application.CellDragAndDrop = Allow
     
     'Activate/deactivate cut, copy, paste and pastespecial shortcut keys
    With Application
        Select Case Allow
        Case Is = False
            .OnKey "^c", "CutCopyPasteDisabled"
            .OnKey "^v", "CutCopyPasteDisabled"
            .OnKey "^x", "CutCopyPasteDisabled"
            .OnKey "+{DEL}", "CutCopyPasteDisabled"
            .OnKey "^{INSERT}", "CutCopyPasteDisabled"
        Case Is = True
            .OnKey "^c"
            .OnKey "^v"
            .OnKey "^x"
            .OnKey "+{DEL}"
            .OnKey "^{INSERT}"
        End Select
    End With
End Sub
 
Sub EnableMenuItem(ctlId As Integer, Enabled As Boolean)
     'Activate/Deactivate specific menu item
    Dim cBar As CommandBar
    Dim cBarCtrl As CommandBarControl
    For Each cBar In Application.CommandBars
        If cBar.Name <> "Clipboard" Then
            Set cBarCtrl = cBar.FindControl(ID:=ctlId, recursive:=True)
            If Not cBarCtrl Is Nothing Then cBarCtrl.Enabled = Enabled
        End If
    Next
End Sub

Sub CutCopyPasteDisabled()
     'Inform user that the functions have been disabled
    MsgBox "Sorry!  Cutting, copying and pasting have been disabled in this workbook!"
End Sub

Public Sub UpdateEfile(tmpPathType As String, tmpPath As String, tmpStartFolder As String)
    On Error GoTo UpdateEfile_Error
    If FileExists(Environ("UserProfile") & "\OneDrive - Ministry of Justice\efile.ini") = False Then
        ' Generate a new ini file
        Open Environ("UserProfile") & "\OneDrive - Ministry of Justice\efile.ini" For Output As #1
        Print #1, tmpPathType & " " & tmpPath
        Close #1
        Else
        ' If the Start folder is different from the root folder, then save it
        If tmpPath <> tmpStartFolder Then
            FileCopy Environ("UserProfile") & "\OneDrive - Ministry of Justice\efile.ini", Environ("UserProfile") & "\OneDrive - Ministry of Justice\efile1.ini"
            Open Environ("UserProfile") & "\OneDrive - Ministry of Justice\efile1.ini" For Input As #1
            Open Environ("UserProfile") & "\OneDrive - Ministry of Justice\efile.ini" For Output As #2
            Do
                Line Input #1, DataLine
                If Left(DataLine, Len(tmpPathType)) <> tmpPathType Then Print #2, DataLine
            Loop Until EOF(1)
            Print #2, tmpPathType & " " & tmpPath
            Close #1
            Close #2
            Kill Environ("UserProfile") & "\OneDrive - Ministry of Justice\efile1.ini"
            End If
        End If
UpdateEfile_Error:
    On Error GoTo 0
End Sub

Public Function GetStartFolder(tmpType As String) As String
' Check to see if the user has opened a folder before
    On Error Resume Next
    Open Environ("UserProfile") & "\OneDrive - Ministry of Justice\efile.ini" For Input As #1
    Do
    Line Input #1, DataLine
    If Left(DataLine, Len(tmpType)) = tmpType Then GetStartFolder = Trim(Mid(DataLine, Len(tmpType) + 1))
    Loop Until EOF(1) = True
    Close #1
    On Error GoTo 0
End Function

Public Sub LoadDefaults()
    Dim app As New Excel.Application
    Dim wb As Workbook
    Dim wsI As Worksheet
    Dim tmpCount As Integer
    Dim tmpMainRow As Integer
    Dim tmpFileName As String
    Dim tmpEmail As String
    app.Visible = False
    app.DisplayAlerts = False
    Set wb = app.Workbooks.Open(CaseResulterConfigFile)
    With wb.Worksheets("Defaults")
        Worksheets("Main").Range("S3") = .Range("B4") ' Default PIA Income
        Worksheets("Main").Range("S4") = .Range("B5") ' Default Days
        
        Worksheets("Main").Range("T2") = .Range("B6") ' Default Document 1
        Worksheets("Main").Range("U2") = .Range("C6") ' Default Document 2
        Worksheets("Main").Range("V2") = .Range("D6") ' Default Document 3
        Worksheets("Main").Range("W2") = .Range("E6") ' Default Document 4
        
        Worksheets("Main").Range("T3") = .Range("B7") ' Default Zoom
        
        Worksheets("Main").Range("T4") = .Range("B8") ' Default search 1
        Worksheets("Main").Range("U4") = .Range("C8") ' Default search 2
        Worksheets("Main").Range("V4") = .Range("D8") ' Default search 3
        Worksheets("Main").Range("W4") = .Range("E8") ' Default search 4
        
        Worksheets("Main").Range("C2") = .Range("B9") ' Default Mailbox Name
        Worksheets("Main").Range("C3") = .Range("B10") ' SJP Files Folder
        
        Worksheets("Main").Range("X3") = .Range("E2") ' TFO Trigger (Yes or No)
        
        Worksheets("Main").Range("U3") = Dir(Worksheets("Main").Range("C3") & "\*Live Files*", vbDirectory) ' Live Files Sub Folder
        If LCase(Right(Worksheets("Main").Range("U3"), 10)) <> "live files" Then Worksheets("Main").Range("U3") = ""
        Worksheets("Main").Range("V3") = Dir(Worksheets("Main").Range("C3") & "\*Archive*", vbDirectory) ' Archive sub Folder
        If LCase(Right(Worksheets("Main").Range("V3"), 7)) <> "archive" Then Worksheets("Main").Range("V3") = ""
        
        Worksheets("Results").Range("M3") = .Range("B11") ' Live Files Folder
            
        tmpDisableWorkSheetChange = True
        ConfigVersion = Val(.Range("E1")) ' Config Version
        
        ' Add in the new SJP Disqualification settings
        If .Range("A20") = "" Or .Range("A20") = "Other Settings" Then
            .Range("A20") = "Settings"
            .Range("A21") = "Keep Adj PIA (SJP) in SJP"
            .Range("A22") = "Produce Disqualification Notice"
            .Range("A23") = "Disq Notice Court Name"
            .Range("A24") = "Court Address 1"
            .Range("A25") = "Court Address 2"
            .Range("A26") = "Court Address 3"
            .Range("A27") = "Court Address 4"
            .Range("A28") = "Court Address 5"
            .Range("A29") = "Court Telephone"
            .Range("A30") = "Court Email Address"
            .Range("A31") = "SJP Reply Email Address"
            .Range("A32") = "Adjourn Trials To Store"
            .Range("A33") = "Justices Clerk"
            .Range("B21") = "No"
            .Range("B22") = "No"
            .Range("B32") = "No"
            wb.Save
            End If
        
        ' Add in the welsh notice option 3.8
        If .Range("A34") = "" Then
            .Range("A34") = "Use Welsh Notice"
            .Range("B34") = "No"
            wb.Save
            End If
            
        ' Add in the welsh notice option 3.8
        If .Range("A35") = "" Then
            .Range("A35") = "Adjourn Hearings To Store"
            .Range("B35") = "No"
            wb.Save
            End If
        
        ' Add in the new default costs for version 6.7 onwards
        If .Range("A40") = "" Then
            .Range("A1") = "Case Resulter Default Values"
            .Range("A40") = "Prosecutor Type"
            .Range("B40") = "URN Prefix (* means all other)"
            .Range("C40") = "Off Codes (comma separated)"
            .Range("D40") = "Default Costs (Guilty)"
            .Range("E40") = "Default Costs (All Other)"
            .Range("F40") = "Prosecutors Secure Email"
            .Range("B41:B50") = "*"
            .Range("D41:E57").NumberFormat = "|fffd|#,##0.00"
            .Range("D41:E50") = .Range("E13")
            .Range("D51:E54") = 85
            .Range("D55:E57") = 120
            .Range("A12:E19").Cells.Clear
            .Range("A2:B2").Cells.Clear
            .Range("A20:B20").Interior.Color = vbYellow
            .Range("A40:F40").Interior.Color = vbYellow
            .Range("A40:F40").Font.Bold = True
            .Columns("F").ColumnWidth = 60
            .Range("A40:F40").BorderAround ColorIndex:=1, Weight:=xlThin
            .Range("A41") = "DVLA"
            .Range("A42") = "DVLA (SJP)"
            .Range("A43") = "Environment Agency (SJP)"
            .Range("A44") = "Local Authority (SJP)"
            .Range("A45") = "Pre Charge Bail"
            .Range("A46") = "Traffic"
            .Range("A47") = "Traffic (SJP)"
            .Range("A48") = "Transport Authority"
            .Range("A49") = "Transport Authority (SJP)"
            .Range("A50") = "TV"
            .Range("A51") = "TV (SJP)"
            .Range("A52") = "DVLA"
            .Range("A53") = "DVLA (SJP)"
            .Range("A54") = "DVLA"
            .Range("A55") = "DVLA (SJP)"
            .Range("A56") = "TV"
            .Range("A57") = "TV (SJP)"
            .Range("C52:C53") = "VE94014,VE94015,VE94088,HL13001"
            .Range("C54:C55") = "RT88569"
            .Range("C56:C57") = "CA03010,CA03011,CA03501"
            wb.Save
            End If
        
        ' Add Transport Authority to the list of Prosecutors
        For tmpCount = 40 To 100
            If .Range("A" & tmpCount) = "Transport Authority" Then Exit For
            If .Range("A" & tmpCount) = "" Then
                .Range("A" & tmpCount) = "Transport Authority"
                .Range("B" & tmpCount) = "*"
                .Range("D" & tmpCount & ":E" & tmpCount).NumberFormat = "|fffd|#,##0.00"
                .Range("D" & tmpCount & ":E" & tmpCount) = 120
                wb.Save
                Exit For
                End If
        Next tmpCount
        ' Add POCA to the list of Prosecutors
        For tmpCount = 40 To 100
            If .Range("A" & tmpCount) = "Proceeds Of Crime Act" Then Exit For
            If .Range("A" & tmpCount) = "" Then
                .Range("A" & tmpCount) = "Proceeds Of Crime Act"
                .Range("B" & tmpCount) = "*"
                wb.Save
                Exit For
                End If
        Next tmpCount

        ' Add extra column for allowing normal adjourning to other courts without emailing
        If wb.Worksheets("Courts").Range("G1") = "" Then
            wb.Worksheets("Courts").Range("G1") = "Other Courts in the area that that can be adjourned to without emailing (X)"
            wb.Worksheets("Courts").Range("G1").Interior.Color = vbYellow
            wb.Worksheets("Courts").Range("F1:G1").ColumnWidth = 14
            wb.Worksheets("Courts").Range("G1").WrapText = True
            wb.Save
            End If
        
        ' Load Disq In SJP Settings
        For tmpCount = 21 To 35
            Worksheets("Splash").Range("A" & tmpCount) = .Range("B" & tmpCount)
        Next tmpCount
        
        ' Load the costs for each prosecutor
        tmpCount = 40
        Worksheets("Splash").Range("A40:F100").Cells.Clear
        Do
            Worksheets("Splash").Range("A" & tmpCount) = .Range("A" & tmpCount)
            Worksheets("Splash").Range("B" & tmpCount) = .Range("B" & tmpCount)
            Worksheets("Splash").Range("C" & tmpCount) = .Range("C" & tmpCount)
            Worksheets("Splash").Range("D" & tmpCount) = .Range("D" & tmpCount)
            Worksheets("Splash").Range("E" & tmpCount) = .Range("E" & tmpCount)
            Worksheets("Splash").Range("F" & tmpCount) = .Range("F" & tmpCount)
            tmpCount = tmpCount + 1
        Loop Until .Range("A" & tmpCount) = ""

    End With
    
    wb.Close SaveChanges:=No
    
    app.Quit
    Set wb = Nothing
    Set app = Nothing
End Sub

Public Function DriverInfo(tmpCaseFolder As String, tmpOffRow As Integer) As String
    Dim tmpDriverInfo As String
    Dim tmpDVS As String
    Dim tmpDQ3 As String
    Dim tmpOffenceDate As String
    Dim tmpOldestOffenceDate As String
    Dim tmpPoints As Integer
    Dim tmpPointsCalc As String
    Dim tmpAge As String
    Dim tmpPointsStart As Integer
    Dim tmpDQ3OffRow() As String
    Dim tmpDuplicateRow As Boolean
    
    If Sheet1.txtProsecutorType <> "Traffic" And Sheet1.txtProsecutorType <> "Traffic (SJP)" Then Exit Function
    ' Get the oldest offence date
    Do
        tmpOffRow = tmpOffRow + 1
    Loop Until Range("B" & tmpOffRow) = "Offence"
    tmpOffRow = tmpOffRow + 1
    
    Do
        If Not Range("B" & tmpOffRow).Comment Is Nothing Then
            tmpOffenceDate = LCase(Range("B" & tmpOffRow).Comment.Text)
            If Left(tmpOffenceDate, 3) = "on " Then
                tmpOffenceDate = Mid(tmpOffenceDate, 4)
                If InStr(tmpOffenceDate, " ") > 0 Then
                    tmpOffenceDate = Left(tmpOffenceDate, InStr(tmpOffenceDate, " "))
                    tmpOffenceDate = Replace(tmpOffenceDate, ".", "/")
                    If IsDate(tmpOffenceDate) = True Then tmpOffenceDate = CDate(tmpOffenceDate)
                    Else
                    tmpOffenceDate = ""
                    End If
                End If
            If IsDate(tmpOffenceDate) = True Then
                If tmpOldestOffenceDate = "" Then
                    tmpOldestOffenceDate = CDate(tmpOffenceDate)
                    Else
                    If CDate(tmpOldestOffenceDate) > CDate(tmpOffenceDate) Then tmpOldestOffenceDate = CDate(tmpOffenceDate)
                    End If
                End If
            End If
        tmpOffRow = tmpOffRow + 1
    Loop Until Len(Range("B" & tmpOffRow)) = 0

    tmpDQ3 = Dir(tmpCaseFolder & "\*DQ3*")
    tmpDVS = Dir(tmpCaseFolder & "\*DVS*.pdf")
    tmpDVSNoTrace = Dir(tmpCaseFolder & "\*DVS*.oxps")
    If tmpDQ3 <> "" And Right(LCase(tmpDQ3), 4) = ".txt" Then
        Open tmpCaseFolder & "\" & tmpDQ3 For Input Shared As #2
        ReDim tmpDQ3OffRow(0): tmpDQ3OffRowCount = 0
        Do
            If EOF(2) Then Exit Do
            Line Input #2, DataLine_DQ3
            ' Check for TT99 banned
            If Val(Left(DataLine_DQ3, 2)) > 0 And InStr(DataLine_DQ3, "TT99") > 0 Then
                tmpPoints = 0
                Exit Do
                End If
            
            ' Check the age of the DQ3
            If InStr(LCase(DataLine_DQ3), "dq3 received date:") > 0 Then
                tmpAge = Mid(DataLine_DQ3, InStr(LCase(DataLine_DQ3), "dq3 received date:") + 19, 10)
                tmpAge = Right(tmpAge, 2) & "/" & Mid(tmpAge, 6, 2) & "/" & Left(tmpAge, 4)
                If IsDate(tmpAge) = True Then
                    If CDate(tmpAge) < Date - 7 Then
                        tmpDriverInfo = "DQ3: Too Old"
                        Exit Do
                        End If
                    End If
                End If
            ' Calculate the points against the oldest offence date
            If tmpOldestOffenceDate <> "" Then
                If Val(Left(DataLine_DQ3, 2)) > 0 And InStr(DataLine_DQ3, ".") > 0 Then
                    tmpDuplicateRow = False
                    For i = 0 To UBound(tmpDQ3OffRow)
                        If Len(tmpDQ3OffRow(i)) > 0 Then
                            If Left(DataLine_DQ3, Len(tmpDQ3OffRow(i))) = tmpDQ3OffRow(i) Then tmpDuplicateRow = True: Exit For
                            End If
                    Next i
                    If tmpDuplicateRow = False Then
                        tmpPointsStart = InStr(DataLine_DQ3, ".") + 1
                        tmpPointsStart = InStr(tmpPointsStart, DataLine_DQ3, " ") + 1
                        If Val(Trim(Mid(DataLine_DQ3, tmpPointsStart, 5))) > 0 Then
                            tmpPointsCalc = Trim(Mid(DataLine_DQ3, tmpPointsStart))
                            If Val(Left(tmpPointsCalc, 3)) > 0 Then
                                tmpOffenceDate = Trim(Left(DataLine_DQ3, InStr(DataLine_DQ3, ".") - 7))
                                tmpOffenceDate = Right(tmpOffenceDate, 8)
                                tmpOffenceDate = Left(tmpOffenceDate, 2) & "/" & Mid(tmpOffenceDate, 3, 2) & "/" & Right(tmpOffenceDate, 4)
                                If IsDate(tmpOffenceDate) = True Then
                                    If CDate(tmpOffenceDate) > DateAdd("yyyy", -3, CDate(tmpOldestOffenceDate)) And CDate(tmpOffenceDate) < DateAdd("yyyy", 3, CDate(tmpOldestOffenceDate)) Then
                                        tmpPoints = tmpPoints + Val(Left(tmpPointsCalc, 3))
                                        tmpDQ3OffRow(UBound(tmpDQ3OffRow)) = Left(DataLine_DQ3, 29)
                                        ReDim Preserve tmpDQ3OffRow(UBound(tmpDQ3OffRow) + 1)
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            If InStr(LCase(DataLine_DQ3), "no trace") > 0 Then
                tmpDriverInfo = tmpDriverInfo & "DQ3: No Trace"
                Exit Do
                End If
            If InStr(LCase(DataLine_DQ3), "no current endorsements") > 0 Then
                tmpDriverInfo = tmpDriverInfo & "DQ3: No Endorse"
                Exit Do
                End If
        Loop Until EOF(2)
        Close 2
        If tmpDriverInfo = "" Then
            If tmpPoints > 0 Then
                tmpDriverInfo = tmpDriverInfo & "DQ3: " & tmpPoints & " Points"
                Else
                tmpDriverInfo = tmpDriverInfo & "DQ3: Matched"
                End If
            End If
        Else
        If tmpDQ3 <> "" And Right(LCase(tmpDQ3), 4) = ".pdf" Then
            tmpDriverInfo = tmpDriverInfo & "DQ3: Matched PDF"
            Else
            tmpDriverInfo = tmpDriverInfo & "DQ3: n/a"
            End If
        End If
    tmpDriverInfo = tmpDriverInfo & vbLf
    If tmpDVS = "" And tmpDVSNoTrace = "" Then tmpDriverInfo = tmpDriverInfo & "DVS: n/a"
    If tmpDVS <> "" Then
        If IsDate(CDate(Range("C6"))) Then
            Set fso = CreateObject("Scripting.FileSystemObject")
            Set fld = fso.GetFile(tmpCaseFolder & "\" & tmpDVS)
            If CDate(Range("C6")) > CDate(fld.DateLastModified) + 7 Then
                tmpDriverInfo = tmpDriverInfo & "DVS: Too Old"
                Else
                tmpDriverInfo = tmpDriverInfo & "DVS: Matched"
                End If
            Else
            tmpDriverInfo = tmpDriverInfo & "DVS: Matched"
            End If
        Set fld = Nothing
        Set fso = Nothing
        'tmpDriverInfo = tmpDriverInfo & "DVS: Matched"
        Else
        If tmpDVSNoTrace <> "" Then tmpDriverInfo = tmpDriverInfo & "DVS: No Trace"
        End If
    DriverInfo = tmpDriverInfo
End Function

Public Function AdditionalInfo(tmpCaseFolder As String) As String
    Dim tmpAdditionalInfo As String
    If Dir(tmpCaseFolder & "\*Corres*") <> "" Then tmpAdditionalInfo = "Correspondence"
    If Dir(tmpCaseFolder & "\*Moc*") <> "" Then
        If tmpAdditionalInfo <> "" Then tmpAdditionalInfo = tmpAdditionalInfo & " & "
        tmpAdditionalInfo = tmpAdditionalInfo & "Memo of Conviction"
        End If
    If Dir(tmpCaseFolder & "\*MC100*") <> "" Then
        If tmpAdditionalInfo <> "" Then tmpAdditionalInfo = tmpAdditionalInfo & " & "
        tmpAdditionalInfo = tmpAdditionalInfo & "Means Form"
        End If
    If Dir(tmpCaseFolder & "\*Disq Response*") <> "" Then
        If tmpAdditionalInfo <> "" Then tmpAdditionalInfo = tmpAdditionalInfo & " & "
        tmpAdditionalInfo = tmpAdditionalInfo & "Disq Response"
        End If
    AdditionalInfo = tmpAdditionalInfo
End Function

Public Sub CreateViewButtons(tmpRow As Integer, tmpCaseFolder As String)
    Range(ButtonColumn2 & tmpRow & ":" & ButtonColumn2 & tmpRow + 2) = ""
    Range(ButtonColumn2 & tmpRow & ":" & ButtonColumn2 & tmpRow + 2).Interior.ColorIndex = 2
    Range(ButtonColumn2 & tmpRow & ":" & ButtonColumn2 & tmpRow + 2).Borders.LineStyle = xlContinuous
    Range(ButtonColumn2 & tmpRow & ":" & ButtonColumn2 & tmpRow + 2).Locked = True
    If tmpCaseFolder <> "" Then
        Range(ButtonColumn2 & tmpRow) = "View Case"
        Range(ButtonColumn2 & tmpRow).Interior.ColorIndex = ButtonColour
        Range(ButtonColumn2 & tmpRow).Borders.LineStyle = xlContinuous
        Range(ButtonColumn2 & tmpRow).HorizontalAlignment = xlCenter
        Range(ButtonColumn2 & tmpRow).Font.Bold = True
        Range(ButtonColumn2 & tmpRow).Locked = False
        If (Range("T2") <> "" And Dir(tmpCaseFolder & "\" & Range("T2")) <> "") Or (Range("U2") <> "" And Dir(tmpCaseFolder & "\" & Range("U2")) <> "") Or (Range("V2") <> "" And Dir(tmpCaseFolder & "\" & Range("V2")) <> "") Or (Range("W2") <> "" And Dir(tmpCaseFolder & "\" & Range("W2")) <> "") Then
            Range(ButtonColumn2 & tmpRow + 1) = "View Facts"
            Range(ButtonColumn2 & tmpRow + 1).Interior.ColorIndex = ButtonColour
            Range(ButtonColumn2 & tmpRow + 1).Borders.LineStyle = xlContinuous
            Range(ButtonColumn2 & tmpRow + 1).HorizontalAlignment = xlCenter
            Range(ButtonColumn2 & tmpRow + 1).Font.Bold = True
            Range(ButtonColumn2 & tmpRow + 1).Locked = False
            End If
        If IsDate(Range("C9").Text) = True And Len(Range("C9").Text) = 5 And Mid(Range("C9").Text, 3, 1) = ":" And IsDate(Range("C7").Text) = True And Len(Range("C7").Text) = 5 And Mid(Range("C7").Text, 3, 1) = ":" Then
            If Time > CDate(Range("C9").Text) Or Time < CDate(Range("C7").Text) Or Date <> CDate(Range("C6")) Then
                Range(ButtonColumn2 & tmpRow + 2) = "Amended Result"
                Range(ButtonColumn2 & tmpRow + 2).Interior.ColorIndex = ButtonColour
                Range(ButtonColumn2 & tmpRow + 2).Borders.LineStyle = xlContinuous
                Range(ButtonColumn2 & tmpRow + 2).HorizontalAlignment = xlCenter
                Range(ButtonColumn2 & tmpRow + 2).Font.Bold = True
                Range(ButtonColumn2 & tmpRow + 2).Locked = False
                End If
            End If
        End If
End Sub

Public Function DefAge(tmpDOB As Variant) As String
    Dim tmpAgeCalc As Variant
    If IsDate(Worksheets("Main").Range("C6")) = False Then DefAge = "Unknown": Exit Function
    tmpAgeCalc = DateDiff("yyyy", tmpDOB, CDate(Worksheets("Main").Range("C6")))
    If Date < DateSerial(Year(CDate(Worksheets("Main").Range("C6"))), Month(tmpDOB), Day(tmpDOB)) Then tmpAgeCalc = tmpAgeCalc - 1
    DefAge = tmpAgeCalc
End Function

Public Sub PerformConfigVersionCheck(CaseResulterConfigFile As String)
    Dim DataLine As String
    Dim app As New Excel.Application
    Dim wb As Workbook
    Dim wsI As Worksheet
    Dim tmpOtherCourtsCount As Integer
    Dim tmpRow As Integer
    Dim tmpCount As Integer
    Dim tmpDefaultCourt As String
    Dim tmpOtherCourts(30) As String
    Dim tmpOtherCourtsNonTrial(30) As String
    Dim tmpOtherCourtsCountNonTrial As Integer

    Const adOpenStatic = 3
    Const adLockOptimistic = 3
    Const adCmdText = &H1
    On Error GoTo CorrectConfigVersion_0
    ' Check the version file for the correct config version
    Open VersionFile For Input Shared As #1
    For tmpCount = 1 To 18
        Line Input #1, DataLine
    Next tmpCount

    If Val(Left(DataLine, 3)) <> ConfigVersion Then
        Close #1
        MsgBox "The 'Default Values File' which contains all email addresses for other courts in the UK is currently at version " & ConfigVersion & "." & vbLf & "This will be updated to version " & Format(Val(Left(DataLine, 3)), "0.0") & vbLf & "Click 'Ok' to continue."
        On Error GoTo 0
        ' Update the email address in the config
        On Error Resume Next
        Set objConnection = CreateObject("ADODB.Connection")
        Set objRecordset = CreateObject("ADODB.Recordset")
        
        With objConnection
            .Provider = "Microsoft.ACE.OLEDB.12.0"
            .Properties("Extended Properties").Value = "Excel 12.0; HDR=Yes"
            .Open "Data Source=S:\Magistrates Courts\GMWORK\Shared\GM Live Files\Configuration\Other Files\Case Resulter Config\Case Resulter - Default Values.xls"
        End With
        
        objRecordset.Open "Select * FROM [Courts$]", _
            objConnection, adOpenStatic, adLockOptimistic, adCmdText
        
        app.Visible = False
        app.DisplayAlerts = False
        Set wb = app.Workbooks.Open(CaseResulterConfigFile)
        
        ' Get the original default court and other courts
        tmpRow = 2
        tmpOtherCourtsCount = 0
        Do
            If wb.Worksheets("Courts").Range("E" & tmpRow) = "X" Then tmpDefaultCourt = wb.Worksheets("Courts").Range("B" & tmpRow)
            If wb.Worksheets("Courts").Range("F" & tmpRow) = "X" Then tmpOtherCourts(tmpOtherCourtsCount) = wb.Worksheets("Courts").Range("B" & tmpRow): tmpOtherCourtsCount = tmpOtherCourtsCount + 1
            If wb.Worksheets("Courts").Range("G" & tmpRow) = "X" Then tmpOtherCourtsNonTrial(tmpOtherCourtsCountNonTrial) = wb.Worksheets("Courts").Range("B" & tmpRow): tmpOtherCourtsCountNonTrial = tmpOtherCourtsCountNonTrial + 1
            tmpRow = tmpRow + 1
        Loop Until Len(wb.Worksheets("Courts").Range("A" & tmpRow)) = 0
        wb.Worksheets("Courts").Range("A2:G" & tmpRow).Cells.Clear
        
        ' Cycle the new config and load the court names
        tmpRow = 2
        Do Until objRecordset.EOF
            For tmpCount = 0 To 3
                wb.Worksheets("Courts").Range(Chr$(65 + tmpCount) & tmpRow) = objRecordset.Fields(tmpCount)
            Next tmpCount
            objRecordset.MoveNext
            tmpRow = tmpRow + 1
            If tmpRow > 217 Then Exit Do
        Loop
        
        ' Restore the default values
        tmpRow = 2
        Do
            If wb.Worksheets("Courts").Range("B" & tmpRow) = tmpDefaultCourt Then wb.Worksheets("Courts").Range("E" & tmpRow) = "X"
            For tmpCount = 0 To tmpOtherCourtsCount - 1
                If wb.Worksheets("Courts").Range("B" & tmpRow) = tmpOtherCourts(tmpCount) Then wb.Worksheets("Courts").Range("F" & tmpRow) = "X"
            Next tmpCount
            For tmpCount = 0 To tmpOtherCourtsCountNonTrial - 1
                If wb.Worksheets("Courts").Range("B" & tmpRow) = tmpOtherCourtsNonTrial(tmpCount) Then wb.Worksheets("Courts").Range("G" & tmpRow) = "X"
            Next tmpCount
            tmpRow = tmpRow + 1
        Loop Until Len(wb.Worksheets("Courts").Range("A" & tmpRow)) = 0
        
        ' Set the new config version number
        wb.Worksheets("Defaults").Range("E1") = Val(Left(DataLine, 3))
        ConfigVersion = Val(Left(DataLine, 3))
        wb.Save
        wb.Close
        app.Quit
        Set wb = Nothing
        Set app = Nothing
        Set objRecordset = Nothing
        Set objConnection = Nothing
        MsgBox "The 'Default Values File' has been successfully updated to version " & Format(Val(Left(DataLine, 3)), "0.0")
        End If
CorrectConfigVersion_0:
    Close #1
    On Error GoTo 0
End Sub

Public Sub LoadCourts(CaseResulterConfigFile As String)
    Dim app As New Excel.Application
    Dim wb As Workbook
    Dim tmpLastRow As Integer
    app.Visible = False
    app.DisplayAlerts = False
    Set wb = app.Workbooks.Open(CaseResulterConfigFile)
    ThisWorkbook.Worksheets("Courts").Cells.Clear
    tmpLastRow = wb.Worksheets("Courts").Cells(wb.Worksheets("Courts").Rows.Count, "B").End(xlUp).Row
    wb.Worksheets("Courts").Range("A2:G" & tmpLastRow).Copy
    ThisWorkbook.Worksheets("Courts").Range("A1").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False
    wb.Close
    Set wb = Nothing
    Set app = Nothing
    If tmpLastRow < 2 Then
        MsgBox "Error!  There is a problem with your default values file, no courts are visible. Please contact Paul Ridings on 07766087922"
        ThisWorkbook.Worksheets("Courts").Visible = xlSheetVeryHidden
        Call KillLockFile
        Exit Sub
        End If
    ThisWorkbook.Worksheets("Courts").Range("A1:G" & tmpLastRow - 1).Sort Key1:=ThisWorkbook.Worksheets("Courts").Columns("B"), Order1:=xlAscending
    ThisWorkbook.Worksheets("Courts").Visible = xlSheetVeryHidden
End Sub

Public Sub ShowWorkSheet(WS_Name As String)
    Dim ws As Worksheet
    Dim su As Boolean
    su = Application.ScreenUpdating
    Application.ScreenUpdating = False
    Worksheets(WS_Name).Visible = xlSheetVisible
    For Each ws In Worksheets
        If ws.Name <> WS_Name Then ws.Visible = xlSheetVeryHidden
        'ws.Visible = xlSheetVisible
    Next
    Application.ScreenUpdating = True
End Sub

Public Function GetMonitorCount() As Long
    EnumDisplayMonitors 0, ByVal 0&, AddressOf MonitorEnumProc, GetMonitorCount
End Function
Private Function MonitorEnumProc(ByVal hMonitor As Long, ByVal hdcMonitor As Long, ByVal lprcMonitor As Long, dwData As Long) As Long
    dwData = dwData + 1
    MonitorEnumProc = 1
End Function

Public Sub BuildPrimaryButtons(tmpMyRow As Long)
    Dim tmpOffRow1 As Integer
    Dim tmpOffRow2 As Integer
    ' Urgent Results Button
    If Worksheets("Main").Range(ButtonColumn & tmpMyRow) <> "Clear Urgency" Then
        Worksheets("Main").Range(ButtonColumn & tmpMyRow) = "Urgent Result"
        Else
        ' Clear Urgency button detected, check the current time and see if we are outside the session, if so the then free up the case for amendment
        If IsDate(Range("C9").Text) = True And Len(Range("C9").Text) = 5 And Mid(Range("C9").Text, 3, 1) = ":" And IsDate(Range("C7").Text) = True And Len(Range("C7").Text) = 5 And Mid(Range("C7").Text, 3, 1) = ":" Then
            If Time > CDate(Range("C9").Text) Or Time < CDate(Range("C7").Text) Or Date <> CDate(Range("C6")) Then
                tmpOffRow1 = tmpMyRow + 2
                Do
                    tmpOffRow1 = tmpOffRow1 + 1
                Loop Until Worksheets("Main").Range(ActionColumn & tmpOffRow1).Interior.ColorIndex = OffenceColour
                tmpOffRow2 = tmpOffRow1
                Do While Worksheets("Main").Range(ActionColumn & tmpOffRow2 + 1).Interior.ColorIndex = OffenceColour
                    tmpOffRow2 = tmpOffRow2 + 1
                Loop
                Worksheets("Main").Range("B" & tmpOffRow1 & ":" & ButtonColumn2 & tmpOffRow2).Locked = False
                Worksheets("Main").Range(ButtonColumn & tmpMyRow) = "Urgent Result"
                End If
            End If
        End If
    Worksheets("Main").Range(ButtonColumn & tmpMyRow + 1) = "Edit Defendant"
    Worksheets("Main").Range(ButtonColumn & tmpMyRow + 2) = "Duplicate Result"
    Worksheets("Main").Range(ButtonColumn & tmpMyRow + 3) = "Offence Changes"
    Worksheets("Main").Range(ButtonColumn & tmpMyRow & ":" & ButtonColumn & tmpMyRow + 3).Interior.ColorIndex = ButtonColour
    Worksheets("Main").Range(ButtonColumn & tmpMyRow & ":" & ButtonColumn & tmpMyRow + 3).Locked = False
End Sub

Public Sub CalculateVS(tmpVSRow As Integer, tmpHighestFine As Currency, tmpFixedValue As Boolean)
    Dim tmpOffDate As String
    Dim tmpCount As Integer
    Dim tmpMonthPosition As Integer
    Dim tmpMonthLength As Integer
    Dim i As Integer
    Dim tmpTheDate As Integer
    
    ' Abort and set to zero if the offence is s29
    If InStr(Range("B" & tmpVSRow), "VE94014") > 0 Or InStr(Range("B" & tmpVSRow), "VE94015") > 0 Or InStr(Range("B" & tmpVSRow), "VE94088") > 0 Then Range(VSColumn & tmpVSRow) = 0: Exit Sub
    ' Get offence date text to determine the VS charge calculation
    tmpOffDate = ""
    tmpOffDate = Range("B" & tmpVSRow).Comment.Text
    If Left(LCase(tmpOffDate), 3) = "on " Then tmpOffDate = Mid(tmpOffDate, 4)
    If Left(LCase(tmpOffDate), 3) = "between " Then tmpOffDate = Mid(tmpOffDate, 9)
    tmpOffDate = Left(tmpOffDate, 50)
    If InStr(tmpOffDate, "/") < 15 And InStr(tmpOffDate, "/") > 2 Then
        ' dd/mm/yyyy date
        tmpOffDate = Mid(tmpOffDate, InStr(tmpOffDate, "/") - 2, 10)
        Else
        ' check for long dates
        For tmpCount = 1 To 12
            tmpMonthPosition = InStr(LCase(tmpOffDate), " " & LCase(Format("1/" & tmpCount & "/2016", "mmmm")) & " "):
            'If tmpMonthPosition = 0 Then tmpMonthPosition = InStr(LCase(tmpOffDate), " " & LCase(Format("1/" & tmpCount & "/2016", "mmm")) & " "): tmpMonthLength = 5
            If tmpMonthPosition > 0 Then
                tmpMonthLength = Len(Format("1/" & tmpCount & "/2016", "mmmm")) + 2
                For i = 1 To Len(tmpOffDate)
                    If Val(Mid(tmpOffDate, i, 1)) > 0 Then tmpTheDate = Val(Mid(tmpOffDate, i)): Exit For
                Next i
                If tmpTheDate > 0 Then
                    tmpOffDate = Val(tmpTheDate) & "/" & tmpCount & "/" & Val(Mid(tmpOffDate, tmpMonthPosition + tmpMonthLength))
                    End If
                Exit For
                End If
        Next tmpCount
        If tmpMonthPosition = 0 Then tmpOffDate = ""
        End If
    If IsDate(tmpOffDate) Then
        If CDate(tmpOffDate) < CDate("08/04/2016") Then
            If tmpFixedValue = True Then
                tmpVS = 15
                Else
                tmpVS = tmpHighestFine / 10
                If tmpVS < 20 Then tmpVS = 20
                If tmpVS > 120 Then tmpVS = 120
                End If
            End If
        If CDate(tmpOffDate) >= CDate("08/04/2016") And CDate(tmpOffDate) <= CDate("27/06/2019") Then
            If tmpFixedValue = True Then
                tmpVS = 20
                Else
                tmpVS = tmpHighestFine / 10
                If tmpVS < 30 Then tmpVS = 30
                If tmpVS > 170 Then tmpVS = 170
                End If
            End If
        If CDate(tmpOffDate) >= CDate("28/06/2019") Then
            If tmpFixedValue = True Then
                tmpVS = 21
                Else
                tmpVS = tmpHighestFine / 10
                If tmpVS < 32 Then tmpVS = 32
                If tmpVS > 181 Then tmpVS = 181
                End If
            End If
        
        Range(VSColumn & tmpVSRow) = Int(tmpVS)
        End If
End Sub

Public Function FindCaseType(tmpOffText As String) As String
    FindCaseType = "Traffic"
    If InStr(tmpOffText, "CA03010") > 0 Or InStr(tmpOffText, "CA03011") > 0 Or InStr(tmpOffText, "CA03501") > 0 Then FindCaseType = "TV" ' TV Cases
    If InStr(tmpOffText, "VE94014") > 0 Or InStr(tmpOffText, "VE94015") > 0 Or InStr(tmpOffText, "VE94088") > 0 Or InStr(tmpOffText, "HL13001") > 0 Then FindCaseType = "DVLA S29" ' DVLA S29 Cases
    If InStr(tmpOffText, "RT88569") > 0 Then FindCaseType = "DVLA CIE" ' DVLA CIE Cases
End Function

Public Function FindDefaultCost(tmpOffenceRow) As Currency
    Dim tmpRow As Integer
    Dim tmpCostCol As String
    Dim tmpOffCodes() As String
    Dim tmpURN As String
    Dim i As Integer
    If Left(Worksheets("Main").Range(PleaColumn & tmpOffenceRow), 6) = "Guilty" Then tmpCostCol = "D" Else tmpCostCol = "E"
    tmpRow = 41
    FindDefaultCost = 0
    tmpURN = GetURN(Val(tmpOffenceRow))
    With Worksheets("Splash")
        Do
            If .Range("A" & tmpRow) = Sheet1.txtProsecutorType Then
                If .Range("B" & tmpRow) = "*" Then FindDefaultCost = .Range(tmpCostCol & tmpRow)
                ' Detect URN Pre-Fix
                If Len(.Range("B" & tmpRow)) > 0 And .Range("B" & tmpRow) <> "*" Then
                    If Left(tmpURN, Len(.Range("B" & tmpRow))) = .Range("B" & tmpRow) Then FindDefaultCost = .Range(tmpCostCol & tmpRow): Exit Do
                    End If
                ' Detect Offence Pre-Fix
                If Len(.Range("C" & tmpRow)) > 0 And Len(Worksheets("Main").Range("B" & tmpOffenceRow)) > 0 Then
                    If InStr(.Range("C" & tmpRow), ",") = 0 Then
                        ' Single offence code
                        If InStr(Worksheets("Main").Range("B" & tmpOffenceRow), .Range("C" & tmpRow)) > 0 Then FindDefaultCost = .Range(tmpCostCol & tmpRow): Exit Do
                        Else
                        ' Cycle Multiple Offence Codes
                        tmpOffCodes() = Split(.Range("C" & tmpRow), ",")
                        For i = 0 To UBound(tmpOffCodes)
                            If InStr(Worksheets("Main").Range("B" & tmpOffenceRow), tmpOffCodes(i)) > 0 Then FindDefaultCost = .Range(tmpCostCol & tmpRow): Exit For
                        Next i
                        If FindDefaultCost > 0 Then Exit Do
                        End If
                    End If
                End If
            tmpRow = tmpRow + 1
        Loop Until .Range("A" & tmpRow) = ""
    End With
End Function

Private Function GetURN(tmpOffenceRow As Long) As String
    Dim tmpRow As Long
    tmpRow = tmpOffenceRow
    Do
        tmpRow = tmpRow - 1
    Loop Until Worksheets("Main").Range(URNColumn & tmpRow) = "URN" Or tmpRow < 15
    GetURN = Worksheets("Main").Range(URNColumn & tmpRow + 1)
End Function

Public Sub AddTFO(tmpRow As Long)
    Dim tmpDefPostCode As String
    Dim tmpDefRow As Long
    Dim tmpFirstAddress As String
    Dim tmpSecondAddress As String
    Dim tmpCount As Integer
    Dim tmpFirstSpace As Boolean
    Dim tmpPosition As Integer
    Dim tmpTFOLocation As String
    
    If Len(Range("Q" & tmpRow)) <> 10 Then Exit Sub
    
    ' Find Def Row
    tmpDefRow = tmpRow
    Do
        tmpDefRow = tmpDefRow - 1
    Loop Until Range("H" & tmpDefRow - 1) = "Address"
    tmpFirstAddress = Right(Trim(Range("H" & tmpDefRow)), 15)
    'tmpFirstAddress = "32 Greenmount Park, Kearlesy, Bolton. BL4 8NS"
    If Left(Range("H" & tmpDefRow + 1), 5) <> "GP Cr" Then tmpSecondAddress = Trim(Right(Range("H" & tmpDefRow + 1), 10))
    If tmpSecondAddress = "" Then
        tmpFirstAddress = Replace(tmpFirstAddress, "  ", " ")
        If tmpFirstAddress Like "*[A-Z][A-Z]# #*" Or tmpFirstAddress Like "*[A-Z][A-Z]# #*" Then
            tmpFirstSpace = False
            tmpPosition = 0
            For tmpCount = Len(tmpFirstAddress) To 1 Step -1
                If Mid(tmpFirstAddress, tmpCount, 1) = " " And tmpFirstSpace = True Then tmpPosition = tmpCount: Exit For
                If Mid(tmpFirstAddress, tmpCount, 1) = " " And tmpFirstSpace = False Then tmpFirstSpace = True
            Next tmpCount
            If tmpPosition > 0 Then
                tmpFirstAddress = Trim(Mid(tmpFirstAddress, tmpPosition))
                If InStr(tmpFirstAddress, " ") > 0 Then
                    tmpFirstAddress = Left(tmpFirstAddress, InStr(tmpFirstAddress, " ") - 1)
                    End If
                End If
            End If
        Else
        tmpSecondAddress = Replace(tmpSecondAddress, "  ", " ")
        If tmpSecondAddress Like "*[A-Z][A-Z]# #*" Or tmpSecondAddress Like "*[A-Z][A-Z]# #*" Then
            tmpFirstSpace = False
            tmpPosition = 0
            For tmpCount = Len(tmpSecondAddress) To 1 Step -1
                If Mid(tmpSecondAddress, tmpCount, 1) = " " And tmpFirstSpace = True Then tmpPosition = tmpCount: Exit For
                If Mid(tmpSecondAddress, tmpCount, 1) = " " And tmpFirstSpace = False Then tmpFirstSpace = True
            Next tmpCount
            If tmpPosition > 0 Then
                tmpSecondAddress = Trim(Mid(tmpSecondAddress, tmpPosition))
                If InStr(tmpSecondAddress, " ") > 0 Then
                    tmpFirstAddress = Left(tmpSecondAddress, InStr(tmpSecondAddress, " ") - 1)
                    End If
                End If
            End If
        End If
    ' Perform postcode look up
    On Error Resume Next
    tmpTFOLocation = Application.WorksheetFunction.VLookup(tmpFirstAddress, Sheet7.Range("A1:C2917"), 3, False)
    On Error GoTo 0
    If tmpTFOLocation <> "" Then
        Range("Q" & tmpRow) = Range("Q" & tmpRow) & " TFO to " & tmpTFOLocation
        End If
End Sub

Public Function PermissionsOk(tmpPath As String) As Boolean
    On Error GoTo BadPermissions
    Open tmpPath & "_Folder Permission Error (" & Environ("UserName") & ").txt" For Output As #3
    Close 3
    Kill tmpPath & "_Folder Permission Error (" & Environ("UserName") & ").txt"
    PermissionsOk = True
    On Error GoTo 0
    Exit Function
BadPermissions:
    Close 3
    PermissionsOk = False
    On Error GoTo 0
End Function

Public Function GetUserFullName() As String
    Dim tmpDomainUser As String
    On Error Resume Next
    Set WSHnet = CreateObject("WScript.Network")
    UserName = WSHnet.UserName
    UserDomain = WSHnet.UserDomain
    Set objUser = GetObject("WinNT://" & UserDomain & "/" & UserName & ",user")
    tmpDomainUser = objUser.FullName
    If InStr(tmpDomainUser, ",") > 0 Then
        GetUserFullName = Trim(Mid(tmpDomainUser, InStr(tmpDomainUser, ",") + 1) & " " & Left(tmpDomainUser, InStr(tmpDomainUser, ",") - 1))
        Else
        GetUserFullName = objUser.FullName
        End If
    On Error GoTo 0
End Function

Public Sub ShowYammer()
    Dim Browser As SHDocVw.InternetExplorer 'Microsoft Internet Controls
    Dim HTMLdoc As MSHTML.HTMLDocument 'Microsoft HTML Object Library
    Dim URL As String
    
    URL = "https://www.yammer.com/justice.gov.uk/#/threads/inGroup?type=in_group&feedId=15932520&view=all"
    
    Set Browser = New InternetExplorer
    Browser.Silent = True
    Browser.navigate URL
    Browser.Visible = True
    Do
    Loop Until Browser.readyState = READYSTATE_COMPLETE
    
    Set HTMLdoc = Browser.Document
End Sub

Public Sub ResetButton(ByRef btn As Object)
' Purpose:      Reset button size and font size for form command button on worksheet
'               Addresses known Excel bug(s) which alters button size and/or apparent font size
' Parameters:   Reference to button object
' Remarks:      Getting/setting font size fails since font size remains the same; display (apparent) size changes
'               AutoSize maximizes the font size to fit the current button size in case it has changed
'               Button size is reset in case it has changed
'               Finally, font size is reset to adjust for font changes applied by AutoSize
'               This fix seems to handle shrinking button icon sizes as well
Dim h As Integer    'command button height
Dim w As Integer    '               width
Dim fs As Integer   '               font size
Exit Sub
    If btn.Name = "txtQuickFind" Then
        btn.Width = 250
        btn.Height = 20
        btn.AutoSize = True        'apply maximum font size to fit button
        btn.AutoSize = False
        btn.Width = 250
        btn.Height = 20
        Else
        With btn
            h = .Height             'capture original values
            w = .Width
            fs = .Font.Size
            .AutoSize = True        'apply maximum font size to fit button
            .AutoSize = False
            .Height = h             'reset original button and font sizes
            .Width = w
            .Font.Size = fs
        End With
        End If
End Sub

Public Sub HideHeader()
    Dim tmpAdjust As Integer
    tmpAdjust = -188
    If Worksheets("Main").Rows(1).RowHeight = 0 Then Exit Sub
    Application.ScreenUpdating = False
    Call ProtectMe(False)
    Worksheets("Main").Rows("1:9").RowHeight = 0
    Call HeaderAdjustments(tmpAdjust, "FALSE")
    Call ProtectMe(True)
    Application.ScreenUpdating = True
End Sub

Public Sub ShowHeader()
    Dim tmpAdjust As Integer
    tmpAdjust = 188
    If Worksheets("Main").Rows(1).RowHeight = 30 Then Exit Sub
    Application.ScreenUpdating = False
    Call ProtectMe(False)
    Worksheets("Main").Rows(1).RowHeight = 30
    For i = 2 To 9
        Worksheets("Main").Rows(i).RowHeight = 20.1
    Next i
    Call HeaderAdjustments(tmpAdjust, "TRUE")
    Call ProtectMe(True)
    Application.ScreenUpdating = True
End Sub

Sub HeaderAdjustments(tmpAdjust As Integer, tmpVisible As String)
    Dim i As Integer
    Worksheets("CmdDefs").Range("M16") = tmpVisible ' txtQuickFind
    Worksheets("CmdDefs").Range("M17") = tmpVisible ' txtValidated
    Worksheets("CmdDefs").Range("M21") = tmpVisible ' txtHelp
    Worksheets("CmdDefs").Range("M22") = tmpVisible ' txtWhatsNew
    Worksheets("CmdDefs").Range("M23") = tmpVisible ' txtProsecutorType
    Worksheets("Main").OLEObjects("txtQuickFind").Visible = CBool(tmpVisible)
    Worksheets("Main").OLEObjects("txtValidated").Visible = CBool(tmpVisible)
    Worksheets("Main").OLEObjects("btnHelp").Visible = CBool(tmpVisible)
    Worksheets("Main").OLEObjects("btnWhatsNew").Visible = CBool(tmpVisible)
    Worksheets("Main").OLEObjects("txtProsecutorType").Visible = CBool(tmpVisible)
    For i = 2 To 20
        If Worksheets("CmdDefs").Range("B" & i) = "Forms.CommandButton.1" Then
            Worksheets("CmdDefs").Range("F" & i) = Worksheets("CmdDefs").Range("F" & i) + tmpAdjust
            Call FixActiveXObj("Main", Worksheets("CmdDefs").Range("C" & i))
            End If
    Next i
End Sub

Sub reopen()

    Dim wb As Excel.Workbook
    Set wb = ThisWorkbook
    
    Dim pth As String
    pth = wb.FullName
    Application.OnTime Now + TimeValue("00:00:05"), Application.Workbooks.Open(pth)
    wb.Close (False)

End Sub

Public Function CorrectVersion() As Boolean
    Dim tmpCount As Integer
    Dim DataLine As String
    Dim x
    If InStr(LCase(ThisWorkbook.Path), "\backup") > 0 Then CorrectVersion = True: Exit Function
    'Check Code Version
    On Error GoTo CorrectVersion_0
    Open VersionFile For Input Shared As #1
    For tmpCount = 1 To 14
        Line Input #1, DataLine
    Next tmpCount
    If Left(DataLine, 3) = "0.0" Then
        MsgBox "This tool has now been disabled, please contact Paul Ridings for further information"
        CorrectVersion = False
        Exit Function
        End If
        
    If Left(DataLine, Len(ThisVersion)) <> ThisVersion Then
        Close #1
        MsgBox "Error!  The version you are using is " & ThisVersion & ".  The latest version is " & Trim(Left(DataLine, InStr(DataLine, " "))) & "." & vbLf & "The Tool Installer will now open, please use this tool to re-install the latest version."
        x = Shell("Explorer.exe S:\Magistrates Courts\GMWORK\Shared\GM Live Files\Configuration\Microsoft Office 2016\Tool Installer\Digital Tools Installer for Office 2016.xlsm", vbNormalFocus)
        CorrectVersion = False
        ThisWorkbook.Close False
        Exit Function
        End If

CorrectVersion_0:
    Close #1
    On Error GoTo 0
    CorrectVersion = True
End Function

Private Sub BuildCopyScript()
    Dim tmpCount As Integer
    Dim DataLine As String
    Dim tmpOldDOH As String
    Dim tmpNewDOH As String
    
    Open "S:\Magistrates Courts\GMWORK\Shared\GM Live Files\Configuration\Other Files\Scripts\UpdateCaseResulterTool.vbs" For Input Shared As #1
    Open ThisWorkbook.Path & "\UpdateCaseResulterTool.vbs" For Output As #2
    
    tmpCount = 1
    Do While Not EOF(1)
        Line Input #1, DataLine
        Select Case tmpCount
               
        Case Is = 6
        Print #2, "DestinationFolder=" & Chr$(34) & "H:\Case Resulter" & Chr$(34)
        
        Case Is = 11
        Print #2, "xl.Application.Workbooks.Open " & Chr$(34) & "H:\Case Resulter\Case Resulter.xlsm" & Chr$(34)
        
        Case Else
        Print #2, DataLine
        
        End Select

        tmpCount = tmpCount + 1
    Loop
    Close #2
    Close #1
End Sub

Public Function GetWorkBookPath() As String
    If InStr(LCase(ThisWorkbook.Path), "sharepoint") > 0 Then
        GetWorkBookPath = Environ("UserProfile") & "\OneDrive - Ministry of Justice\"
        GetWorkBookPath = GetWorkBookPath & Mid(ThisWorkbook.Path, InStr(ThisWorkbook.Path, "gov_uk/Documents/") + 17)
        GetWorkBookPath = Replace(GetWorkBookPath, "/", "\")
        Else
        GetWorkBookPath = ThisWorkbook.Path
        End If
End Function

Public Function IsUserFormLoaded(ByVal UFName As String) As Boolean
    Dim UForm As Object
     
    IsUserFormLoaded = False
    For Each UForm In VBA.UserForms
        If UForm.Name = UFName Then
            IsUserFormLoaded = True
            Exit For
        End If
    Next
End Function

Public Function CheckSDrive() As Boolean
    Dim wsh As Object
    Dim waitOnReturn As Boolean: waitOnReturn = True
    Dim windowStyle As Integer: windowStyle = 0
    Dim x
    If FolderExists("S:\Magistrates Courts") = True Then CheckSDrive = True: Exit Function
    Set wsh = VBA.CreateObject("WScript.Shell")
    wsh.Run "net use /del S:", windowStyle, waitOnReturn
    wsh.Run "net use S: \\dom1.infra.int\data /persistent:yes", windowStyle, waitOnReturn
    If FolderExists("S:\Magistrates Courts") = True Then CheckSDrive = True
End Function

Public Sub LogUsage()
    On Error Resume Next
    Open "S:\Magistrates Courts\GMWORK\Shared\Operations\ITU\Family Transfers\Management\Logs\Case Resulter Usage.log" For Append Shared As #1
    Print #1, ThisVersion & ";" & Left(Now(), 16) & ";" & GetUserFullName & ";" & GetUserEmailAddress & ";" & ThisWorkbook.Worksheets("Main").Range("C5") & ";" & ThisWorkbook.Worksheets("Main").txtProsecutorType
    Close #1
    On Error GoTo 0
End Sub

Public Function GetUserEmailAddress() As String
    Dim olApp As Object
    Dim olNS As Object
    Dim olFol As Object
    On Error Resume Next
    Set olApp = CreateObject("Outlook.Application")
    Set olNS = olApp.GetNamespace("MAPI")
    Set olFol = olNS.GetDefaultFolder(6)
    
    GetUserEmailAddress = olFol.Parent.Name
    
    Set olFol = Nothing
    Set olNS = Nothing
    Set olApp = Nothing
    On Error GoTo 0
End Function

Attribute VB_Name = "Sheet0"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' Other Settings
'21 Keep Adj PIA (SJP) in SJP
'22 Produce Disqualification Notice
'23 Disq Notice Default Court Name
'24 Court Address 1
'25 Court Address 2
'26 Court Address 3
'27 Court Address 4
'28 Court Address 5
'29 Court Telephone
'30 Court Email Address
'31 SJP Reply Email Address
'32 Adjourn Trials To Store

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' *************************************************************************
' * for support with this code please contact Paul Ridings on 07766087922 *
' *                             Version 8.9                               *
' *                        Microsoft Office 2016                          *
' *************************************************************************

Private Type RECT
  Left                  As Long
  Top                   As Long
  Right                 As Long
  Bottom                As Long
End Type

Private Declare Function MoveWindow Lib "user32" (ByVal hwnd As Long, ByVal x As Long, ByVal y As Long, ByVal nWidth As Long, ByVal nHeight As Long, ByVal bRepaint As Long) As Long
Private Declare Function GetWindow Lib "user32" (ByVal hwnd As Long, ByVal wCmd As Long) As Long
Private Declare Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long

Private Declare Function GetDC Lib "user32" (ByVal hwnd As Long) As Long
Private Declare Function ReleaseDC Lib "user32" (ByVal hwnd As Long, ByVal hDC As Long) As Long
Private Declare Function GetSystemMetrics Lib "user32.dll" (ByVal nIndex As Long) As Long
Private Declare Function GetDeviceCaps Lib "gdi32" (ByVal hDC As Long, ByVal nIndex As Long) As Long
Private Declare Function GetCurrentThreadId Lib "kernel32" () As Long

Private Declare Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" (ByVal hwnd As Long, ByVal lpOperation As String, ByVal lpFile As String, ByVal lpParameters As String, ByVal lpDirectory As String, ByVal nShowCmd As Long) As Long

Const SM_CXSCREEN = 0
Const SM_CYSCREEN = 1

Private Type POINTAPI
    x As Long
    y As Long
End Type

Private Declare Function GetCursorPos Lib "user32" (lpPoint As POINTAPI) As Long

Dim tmpDOH As String
Dim tmpTOH As String
Dim tmpPreTOH As String
Dim tmpCheckList As Boolean
Dim tmpCourtroom As String
Dim tmpLastActiveAddress As String
Dim tmpKeepChoice As Boolean
Dim OldValue

Private Sub btnAddRemoveCases_Click()
    ResetButton btnAddRemoveCases
    If Len(Range("C7").Value) = 0 Then MsgBox "Error!  You must enter the Start Session first", vbCritical: Range("C7").Select: GoTo btnAddRemoveCases_0
    If Len(Range("C8").Value) = 0 Then MsgBox "Error!  You must enter your Court Room first", vbCritical: Range("C8").Select: GoTo btnAddRemoveCases_0
    Application.ScreenUpdating = False
    frmAddRemoveCases.Show
    Call ProtectMe(False)
    If Val(Range("J12")) + Val(Range("K12")) > 0 Then txtProsecutorType.Enabled = False Else txtProsecutorType.Enabled = True
btnAddRemoveCases_0:
    Call ProtectMe(True)
End Sub

Private Sub btnBlockResult_Click()
    ResetButton btnBlockResult
    If Val(Range("K12")) = 0 Then MsgBox "Error!  You must have some un-validated cases before using the block result tool", vbCritical: Exit Sub
    Call ScanForUnResultedOffences
    frmDuplicateResult.Show
End Sub

Private Sub btnChooseCourtListPDFFile_Click()
    Dim StartFolder As String
    Dim strPath As String
    Dim FileName As String
    Dim x
    Dim tmpxlsExists As String
    Dim tmpRow As Integer
    Dim tmpDefaultCourt As Boolean
    Dim wsh As Object
    Dim waitOnReturn As Boolean: waitOnReturn = True
    Dim windowStyle As Integer: windowStyle = 0
    
    ResetButton btnChooseCourtListPDFFile
    
    If ThisWorkbook.Name = "Case Resulter.xlsm" Then
        If CorrectVersion = False Then ThisWorkbook.Close SaveChanges:=No: Exit Sub
        End If
    
    If Len(Range("G6").Value) = 0 Then MsgBox "Error!  You must enter the Legal Adviser Name first", vbCritical: Range("G6").Select: GoTo btnChooseCourtListPDFFile_1
    If Len(Range("C7").Value) = 0 Then MsgBox "Error!  You must enter the Start Session first", vbCritical: Range("C7").Select: GoTo btnChooseCourtListPDFFile_1
    If Len(Range("C8").Value) = 0 Then MsgBox "Error!  You must enter your Court Room first", vbCritical: Range("C8").Select: GoTo btnChooseCourtListPDFFile_1
    If Len(Range("G7").Value) = 0 Then MsgBox "Error!  You must enter at least the first Magistrate", vbCritical: Range("G7").Select: GoTo btnChooseCourtListPDFFile_1
    If Len(Range("M6").Value) = 0 Then MsgBox "Error!  You must enter the prosecutor name first (if an SJP court then just put a full stop)", vbCritical: Range("M6").Select: GoTo btnChooseCourtListPDFFile_1
    If Len(txtProsecutorType) = 0 Then MsgBox "Error!  You must enter a prosecutor type", vbCritical: GoTo btnChooseCourtListPDFFile_1
    If FileExists("C:\Program Files (x86)\Retsina Software\pdftotext.exe") = False Then
        MsgBox "Error!  You have not installed the Retsina PDF To Text software.  Please go to the software centre and install this software before continuing"
        GoTo btnChooseCourtListPDFFile_1
        End If
    If Len(Range("A15")) <> 0 Then
        If MsgBox("Caution!  This will erase any previous results you may have entered, are you sure?", vbYesNo + vbExclamation) = vbNo Then GoTo btnChooseCourtListPDFFile_1
        End If
    tmpDisableWorkSheetChange = True
    Application.ScreenUpdating = False
    
    Call ProtectMe(False)
    If Worksheets("Results").Range("A16") <> "" Then
        Call ShowWorkSheet("Results")
        On Error Resume Next
        ActiveSheet.ShowAllData
        On Error GoTo 0
        Worksheets("Results").Range("A16:" & LastColumn & Worksheets("Results").Cells(Worksheets("Results").Rows.Count, "B").End(xlUp).Row).Cells.Delete
        End If
    If Worksheets("Amendments").Range("A16") <> "" Then
        Worksheets("Amendments").Range("A16:" & LastColumn & Worksheets("Amendments").Cells(Worksheets("Amendments").Rows.Count, "A").End(xlUp).Row).Cells.Delete
        End If
    Call ShowWorkSheet("Main")

    'Select the start folder
    StartFolder = GetStartFolder(Sheet1.txtProsecutorType)
    If FolderExists(StartFolder) = False Then StartFolder = ""
    Set fd = Application.FileDialog(msoFileDialogOpen)
    With fd
        .InitialFileName = StartFolder
        .AllowMultiSelect = False
        .Filters.Clear
        .Filters.add "All files", "*.*"
        .Filters.add "Adobe PDF(*.pdf),*.pdf", "*.pdf", 1
        .Show
        If .SelectedItems.Count = 0 Then
            MsgBox "No File chosen, process aborting"
            GoTo btnChooseCourtListPDFFile_0
            End If
        FileName = .SelectedItems.Item(1)
    End With
    If Len(FileName) < 6 Then
        MsgBox "Error!  No File chosen, process aborting", vbCritical
        GoTo btnChooseCourtListPDFFile_0
        End If
        
    ' **** Check Degaualt Values File ****
    If InStr(FileName, "\") > 0 Then
        CaseResulterConfigFile = Left(FileName, InStrRev(FileName, "\")) & "Case Resulter - Default Values.xls"
        ' Backup the default values file
        If FileExists(CaseResulterConfigFile) = True And FileExists(Left(FileName, InStrRev(FileName, "\")) & "Case Results Backup\Case Resulter - Default Values.xls") = False Then
            On Error Resume Next
            FileCopy CaseResulterConfigFile, Left(FileName, InStrRev(FileName, "\")) & "Case Results Backup\Case Resulter - Default Values.xls"
            On Error GoTo 0
            Else
            If FileExists(CaseResulterConfigFile) = False And FileExists(Left(FileName, InStrRev(FileName, "\")) & "Case Results Backup\Case Resulter - Default Values.xls") = True Then
                On Error Resume Next
                FileCopy Left(FileName, InStrRev(FileName, "\")) & "Case Results Backup\Case Resulter - Default Values.xls", CaseResulterConfigFile
                On Error GoTo 0
                End If
            End If
        If PermissionsOk(Left(FileName, InStrRev(FileName, "\"))) = False Then
            MsgBox "Error!  You do not have the correct permissions to the case folders." & vbCrLf & "This tool will not function correctly unless this is resolved." & vbCrLf & "Please raise an Atos catalogue order with Atos (ref FOLACC20) and request FULL access to your Case Folders.  This is free and takes approx 2 days"
            End If
        End If
    If FileExists(CaseResulterConfigFile) = False Then
        MsgBox "Error!  The 'Case Resulter - Default Values.xls' which contains the settings for your court MUST must be located in the same folder as the Court List" & vbLf & "If the 'Case Resulter - Default Values.xls' has been deleted then it must be restored before the tool will function correctly." & vbLf & "Please make sure the court list PDF file is copied to the 'Daily Court List' folder and opened from that location" & vbLf & "If you need help with this please contact your pre court team or Paul Ridings on 07766087922", vbCritical
        GoTo btnChooseCourtListPDFFile_0
        End If
        
    Range("C4").Value = FileName
    If LockFileInUse = True Then GoTo btnChooseCourtListPDFFile_0
    
    Call LoadDefaults ' Load Default Settings for the area
    If InStr(LCase(Worksheets("Results").Range("M3")), "\") = 0 Then MsgBox "Error!  The 'Live Files' folder path has not been set in the configuration file (Cell B11)", vbCritical: Call KillLockFile: GoTo btnChooseCourtListPDFFile_0
    If Worksheets("Main").Range("U3") = "" Then MsgBox "Error!  There is no 'Live Files' folder in the chosen SJP folder, check the Default Values File" & vbCr & "There must be a TV/DVLA/Traffic 'Live Files' folder in the SJP folder path", vbCritical: Call KillLockFile: Call PerformClear: GoTo btnChooseCourtListPDFFile_0
    If Worksheets("Main").Range("V3") = "" Then MsgBox "Error!  There is no 'Archive' folder in the chosen SJP folder, check the Default Values File" & vbCr & "There must be a TV/DVLA/Traffic 'Archive' folder in the SJP folder path", vbCritical: Call KillLockFile: Call PerformClear: GoTo btnChooseCourtListPDFFile_0
    Call PerformConfigVersionCheck(CaseResulterConfigFile) ' Checks the config for latest emails
    Call LoadCourts(CaseResulterConfigFile) ' loads the courts and email addresses
    
    ' Check for a default court
    tmpRow = 2
    tmpDefaultCourt = False
    Do
        If Worksheets("Courts").Range("E" & tmpRow) = "X" Then tmpDefaultCourt = True: Exit Do
        tmpRow = tmpRow + 1
    Loop Until Worksheets("Courts").Range("A" & tmpRow) = ""
    If tmpDefaultCourt = False Then MsgBox "Error!  There is no default Court set in the configuration file.  Make sure an X is placed against your default court in column E of the default values file on the Courts Worksheet": Call KillLockFile: GoTo btnChooseCourtListPDFFile_0
    
    ' Clear the form
    Worksheets("WS1").Cells.Clear
    Worksheets("Sort").Cells.Clear
    Range("A14:AH5000").Delete
    Range("A14:AH5000").RowHeight = 20
    Range("C4:C6") = ""
    Range("J12:K12") = ""
    Range("K12").Locked = True
    btnSaveResults.Enabled = False
    btnInformPostCourt.Enabled = False
    
    Set wsh = VBA.CreateObject("WScript.Shell")
    wsh.Run Chr$(34) & "C:\Program Files (x86)\Retsina Software\pdftotext.exe" & Chr$(34) & " -layout " & Chr$(34) & FileName & Chr$(34), windowStyle, waitOnReturn
    
    Range("C4").Value = Left(FileName, Len(FileName) - 4) & ".txt"
    strPath = Left(FileName, (InStrRev(FileName, "\") - 1))
    Call UpdateEfile(Sheet1.txtProsecutorType, strPath, StartFolder)
    
    Call UpdateHeaderInfo
    
    frmAddRemoveCases.Show
    
    tmpScrollRow = 14: ActiveWindow.ScrollRow = tmpScrollRow
    btnAddRemoveCases.Enabled = True
btnChooseCourtListPDFFile_0:
    Application.ScreenUpdating = True
    tmpDisableWorkSheetChange = False
    If Val(Range("J12")) + Val(Range("K12")) > 0 Then txtProsecutorType.Enabled = False Else txtProsecutorType.Enabled = True
    Call ProtectMe(True)
btnChooseCourtListPDFFile_1:
    Exit Sub
End Sub

Private Sub UpdateHeaderInfo()
    Open Range("C4") For Input Shared As #1
    Do While Not EOF(1)
        Line Input #1, DataLine
        If InStr(DataLine, "Full Court List for") > 0 Then Range("C5") = Trim(Mid(DataLine, 90))
        If UCase(Left(DataLine, 19)) = "FULL COURT LIST FOR" Then Range("C6") = CDate(Trim(Mid(DataLine, 20, 11)))
        If UCase(Left(DataLine, 6)) = "BLOCK:" Then Exit Do
    Loop
    Close 1
End Sub

Private Sub btnClear_Click()
    If ThisWorkbook.Name = "Case Resulter.xlsm" Then
        If CorrectVersion = False Then ThisWorkbook.Close SaveChanges:=No: Exit Sub
        End If
    ResetButton btnClear
    If MsgBox("Are you sure you want to erase any results below?" & vbLf & "Note!  Any imported results and amendment changes on the post court screen will also be removed.", vbYesNo) = vbNo Then Exit Sub
    Call PerformClear
End Sub

Sub PerformClear()
    Dim tmpLastRow As Integer
    Application.ScreenUpdating = False
    Call ProtectMe(False)

    tmpDisableWorkSheetChange = True
    Application.ScreenUpdating = False
    Call ShowWorkSheet("Results")
    Worksheets("Results").Range("A16:" & LastColumn & "16").Cells.Delete
    If Worksheets("Results").Range("A16") <> "" Then
        On Error Resume Next
        ActiveSheet.ShowAllData
        On Error GoTo 0
        Worksheets("Results").Range("A16:" & LastColumn & Worksheets("Results").Cells(Worksheets("Results").Rows.Count, "B").End(xlUp).Row).Cells.Delete
        End If
    If Worksheets("Amendments").Range("A16") <> "" Then
        Worksheets("Amendments").Range("A16:" & LastColumn & Worksheets("Amendments").Cells(Worksheets("Amendments").Rows.Count, "A").End(xlUp).Row).Cells.Delete
        End If
    Call ShowWorkSheet("Main")
    
    Worksheets("WS1").Cells.Clear
    Worksheets("Sort").Cells.Clear
    tmpLastRow = Worksheets("Main").Cells(Worksheets("Main").Rows.Count, "B").End(xlUp).Row
    Call ProtectMe(False)
    tmpDisableWorkSheetChange = True
    If tmpLastRow > 14 Then Range("A14:" & LastColumn & tmpLastRow + 5).Delete
    tmpDisableWorkSheetChange = True
    If tmpLastRow > 14 Then Range("A14:" & LastColumn & tmpLastRow + 5).RowHeight = 20
    Range("S2:T4") = ""
    Range("T5") = ""
    Range("C2:C9") = ""
    Range("G7:G9") = ""
    Range("M6") = ""
    Range("M8") = ""
    Range("U3:V3") = ""
    Range("J12:K12") = ""
    txtProsecutorType = "": Worksheets("Main").Range("P7") = ""

    If Val(Range("J12")) + Val(Range("K12")) > 0 Then txtProsecutorType.Enabled = False Else txtProsecutorType.Enabled = True
    
    Range("K12").Locked = True
    btnSaveResults.Enabled = False
    btnInformPostCourt.Enabled = False
    tmpDisableWorkSheetChange = False
    txtQuickFind.Clear
    btnAddRemoveCases.Enabled = False
    Range("M6").Select
    Call ProtectMe(True)
    Application.ScreenUpdating = True
End Sub

Private Sub btnFirst_Click()
    ResetButton btnFirst
    tmpScrollRow = 14: ActiveWindow.ScrollRow = tmpScrollRow
End Sub

Private Sub btnHeader_Click()
    If Worksheets("Main").Rows(1).RowHeight = 0 Then
        Call ShowHeader
        Else
        Call HideHeader
        End If
End Sub

Private Sub btnHelp_Click()
    Call ShowYammer
End Sub

Private Sub btnInformPostCourt_Click()
    '***Eucs - Sameh Sabet - 24.08.2017
    '   changed outlook to late binding
    'Dim olApp As Outlook.Application
    'Dim objMail As Outlook.MailItem
    Dim olApp As Object
    Dim objMail As Object
    Dim tmpDestPath As String
    Dim tmpOriginalPath As String
    Dim tmpEmail As String
    Dim t As Long
    ResetButton btnInformPostCourt
    On Error GoTo btnInformPostCourt_Error
    If Dir(tmpDestPath & "Case Results Backup", vbDirectory) = "" Then MkDir tmpDestPath & "Case Results Backup"
    On Error GoTo 0
    If LCase(Environ("UserName")) <> LCase(Worksheets("Main").Range("J6")) Then MsgBox "Error!  You are not the original owner of this document, unable to send.": GoTo btnInformPostCourt_0
    If InStr(LCase(Range("C2")), "@hmcts.gsi.gov.uk") = 0 And InStr(LCase(Range("C2")), "@justice.gov.uk") = 0 Then MsgBox "Error!  Invalid post court email address", vbCritical: Range("C2").Select: GoTo btnInformPostCourt_0
    If Len(Range("C7")) = 5 Then
        If Mid(CDate(Range("C7")), 3, 1) <> ":" Then MsgBox "Error!  You must enter a session start time in hh:mm format", vbCritical: Range("C7").Select: GoTo btnInformPostCourt_0
        End If
    If Len(Range("C9")) = 5 Then
        If Mid(CDate(Range("C9")), 3, 1) <> ":" Then MsgBox "Error!  You must enter a session end time in hh:mm format", vbCritical: Range("C9").Select: GoTo btnInformPostCourt_0
        End If
    If Len(Range("C9")) = 0 Then MsgBox "Error!  You must enter a session end time in hh:mm format", vbCritical: Range("C9").Select: GoTo btnInformPostCourt_0
    If Len(Range("M6")) = 0 Then MsgBox "Error!  You must enter a prosecutor", vbCritical: Range("M6").Select: GoTo btnInformPostCourt_0
    If Right(ThisWorkbook.Path, 19) = "Case Results Backup" Then MsgBox "Error!  You can't send to the results team using a sheet opened from the Case Results Backup Folder." & vbCr & "Please copy this sheet to your Case Resulter folder in My Documents and open it from there", vbCritical: Range("C9").Select: GoTo btnInformPostCourt_0
    If PermissionsOk(Left(Worksheets("Main").Range("C4"), InStrRev(Worksheets("Main").Range("C4"), "\")) & "Case Results Backup\") = False Then
        MsgBox "Error!  You do not have the correct permissions to the folder called 'Case Results Backup'" & vbCrLf & "To manually send the results, please click the 'File' menu then 'Send To' then 'Mail Recipient as attachment'." & vbCrLf & "This tool will not function correctly unless this is resolved." & vbCrLf & "Please raise an Atos catalogue order and request FULL access to your Case Folders.  This is free and takes approx 2 days"
        GoTo btnInformPostCourt_0
        End If
    ' Test if Outlook is available
    On Error GoTo btnInformPostCourt_Error
    Set olApp = CreateObject("Outlook.Application")
    Set objMail = olApp.CreateItem(olMailItem)
    objMail.display
    objMail.Delete
    Set objMail = Nothing
    Set olApp = Nothing
    
    If MsgBox("Attention!  The screen will go blank and your mouse may appear to have an circle symbol while your results are being emailed" & vbCr & "Please do not try to close the tool down while this process is ongoing." & _
        vbCr & "An email will be generated with the attachment on which you must press the Send button on." _
        & vbCrLf & "At the end of the process the tool will close, please re-open the tool and press the 'Clear Entry Screen' button to start a new session" & vbCrLf & vbCrLf & "Do you want to continue?", vbYesNo + vbInformation) = vbNo Then GoTo btnInformPostCourt_0
    
    tmpOriginalPath = ThisWorkbook.FullName
    
    ' Remove ActiveX Buttons
    Call PrepareActiveXForExit
    
    Application.DisplayAlerts = False
    ' Save to the backup folder
    Call ShowWorkSheet("Splash")
    Application.EnableCancelKey = xlDisabled
    tmpDestPath = Left(Worksheets("Main").Range("C4"), InStrRev(Worksheets("Main").Range("C4"), "\"))
    tmpDestPath = tmpDestPath & "Case Results Backup" & "\Case Resulter - " & _
        Right(Worksheets("Main").Range("C6"), 4) & "-" & Mid(Worksheets("Main").Range("C6"), 4, 2) & "-" & Left(Worksheets("Main").Range("C6"), 2) & " - " & Replace(Left(CDate(Worksheets("Main").Range("C7")), 5), ":", "") & " - " & Worksheets("Main").Range("G6") & ".xlsm"
    Application.ThisWorkbook.SaveCopyAs tmpDestPath
    
    tmpEmail = Range("C2")
    
    ' Send Email
    '***Eucs - 24.08.2017
    'Set olApp = Outlook.Application
    Set olApp = CreateObject("Outlook.Application")
    Set objMail = olApp.CreateItem(olMailItem)
    With objMail
        .Subject = "Case Results: " & Range("C5") & "   Hearing: " & Range("C6") & " " & Left(CDate(Worksheets("Main").Range("C7")), 5) & " to " & Left(CDate(Worksheets("Main").Range("C9")), 5) & "   Court Room: " & Range("C8")
        .Body = ""
        .Recipients.add tmpEmail
        .Recipients.ResolveAll
        .Attachments.add tmpDestPath  'ThisWorkbook.FullName
        .display
    End With
    
    Set objMail = Nothing
    Set olApp = Nothing
    
    If ThisWorkbook.Application.Workbooks.Count = 1 Then
        Application.Quit
        Else
        ThisWorkbook.Close (False)
        End If
    
btnInformPostCourt_0:
    Exit Sub
btnInformPostCourt_Error:
    MsgBox "Error!  There was a problem with the Email Post Court Function." & vbCrLf & "The error message is:-" & vbCrLf & Err.Description
    Err.Clear
    On Error GoTo 0
    Set objMail = Nothing
    Set olApp = Nothing
    GoTo btnInformPostCourt_0

End Sub

Private Sub btnLast_Click()
    Dim tmpCount As Integer
    Dim tmpBlankCount As Integer
    ResetButton btnLast
    tmpCount = Worksheets("Main").Cells(Worksheets("Main").Rows.Count, "B").End(xlUp).Row
    If tmpCount = 0 Then GoTo btnLast_0
    tmpBlankCount = 0
    Do
        If Left(Range("B" & tmpCount), 9) = "Defendant" Then Exit Do
        If Range("B" & tmpCount) = "" Then tmpBlankCount = tmpBlankCount + 1
        tmpCount = tmpCount - 1
    Loop Until tmpBlankCount > 5 Or tmpCount = 0
    If tmpBlankCount > 5 Or tmpCount = 0 Then GoTo btnLast_0
    tmpScrollRow = tmpCount - 1
    ActiveWindow.ScrollRow = tmpScrollRow
btnLast_0:
End Sub

Private Sub btnNext_Click()
    Dim tmpCount As Integer
    Dim tmpBlankCount As Integer
    ResetButton btnNext
    tmpCount = tmpScrollRow + 5
    tmpBlankCount = 0
    Do
        If Left(Range("B" & tmpCount), 9) = "Defendant" Then Exit Do
        If Range("B" & tmpCount) = "" Then tmpBlankCount = tmpBlankCount + 1
        tmpCount = tmpCount + 1
    Loop Until tmpBlankCount > 5
    If tmpBlankCount > 5 Then GoTo btnNext_0
    tmpScrollRow = tmpCount - 1
    ActiveWindow.ScrollRow = tmpScrollRow
btnNext_0:
End Sub

Private Sub btnPrevious_Click()
    Dim tmpCount As Integer
    Dim tmpBlankCount As Integer
    ResetButton btnPrevious
    If tmpScrollRow <= 14 Then GoTo btnPrevious_0
    tmpCount = tmpScrollRow - 4
    tmpBlankCount = 0
    Do
        If Left(Range("B" & tmpCount), 9) = "Defendant" Then Exit Do
        If Range("B" & tmpCount) = "" Then tmpBlankCount = tmpBlankCount + 1
        tmpCount = tmpCount - 1
    Loop Until tmpCount <= 14
    tmpScrollRow = tmpCount - 1
    ActiveWindow.ScrollRow = tmpScrollRow
btnPrevious_0:
End Sub

Public Sub btnRefresh_Click()
    ResetButton btnRefresh
    Call RefreshButtons
End Sub

Sub RefreshButtons()
    Dim tmpRow As Integer
    Dim tmpData As String
    Dim tmpName As String
    Dim tmpURN As String
    Dim tmpForename As String
    Dim tmpSurname As String
    Dim tmpDIRCase As String
    Dim tmpTrafficHearingFolder As String
    Dim AdjournRow As Integer
    Dim tmpAlternateTrafficHearingFolder As String
    Call ProtectMe(False)
    tmpDisableWorkSheetChange = True
    Application.ScreenUpdating = False
    tmpRow = 15
    ThisWorkbook.Worksheets("Main").Range("M10:O10").Interior.ColorIndex = OffenceHeaderColour
    ThisWorkbook.Worksheets("Main").Range("M10:O10") = "Linking to Cases"
    Do
        If Range(ValidationColumn & tmpRow) = "X" Or Range(ValidationColumn & tmpRow) = Chr$(252) Then
            ' Add the primary buttons
            Call BuildPrimaryButtons(Val(tmpRow))
            ' Add the view case button if detected and calculate the age of the folder
            If Val(Range("Q" & tmpRow + 1)) >= 75 And Val(Range("Q" & tmpRow + 1)) <= 77 Or Val(Range("Q" & tmpRow + 1)) = 85 Or Val(Range("Q" & tmpRow + 1)) = 86 Then
                tmpTrafficHearingFolder = Range("C3") & "\" & Worksheets("Main").Range("U3") & "\SJP\"
                Else
                tmpTrafficHearingFolder = Range("C3") & "\" & Worksheets("Main").Range("U3") & "\" & Right(Range("C6"), 4) & "-" & Mid(Range("C6"), 4, 2) & "-" & Left(Range("C6"), 2) & "\"
                End If
            tmpName = Range("B" & tmpRow + 1)
            tmpURN = Range(PleaColumn & tmpRow + 1)
            If InStr(tmpName, " ") > 0 And IsDate(Range("C6")) And Len(tmpURN) > 0 Then
                tmpSurname = Trim(Mid(tmpName, InStrRev(tmpName, " ")))
                tmpForename = Trim(Left(tmpName, InStrRev(tmpName, " ")))
                ' Perform check on live folder
                tmpDIRCase = FindCaseFolder(tmpSurname, tmpForename, tmpURN, tmpTrafficHearingFolder)
                If tmpDIRCase = "" Then
                    ' Not found in the live folder
                    AdjournRow = FindAdjAction(tmpRow + 4)
                    ' ********** Original case was in SJP **********
                    If InStr(tmpTrafficHearingFolder, "\SJP\") > 0 Then
                        ' Perform check on adjourned folder, original from SJP but not present
                        If Range(ValidationColumn & tmpRow) = Chr$(252) And AdjournRow > 0 Then
                            If IsDate(Range("S" & AdjournRow)) = True Then
                                tmpAlternateTrafficHearingFolder = Replace(tmpTrafficHearingFolder, "\" & Worksheets("Main").Range("U3") & "\SJP\", "\" & Worksheets("Main").Range("V3") & "\" & Mid(Range("S" & AdjournRow), 7, 4) & "\" & Mid(Range("S" & AdjournRow), 7, 4) & "-" & Mid(Range("S" & AdjournRow), 4, 2) & "-" & Left(Range("S" & AdjournRow), 2) & "\")
                                tmpDIRCase = FindCaseFolder(tmpSurname, tmpForename, tmpURN, tmpAlternateTrafficHearingFolder)
                                If tmpDIRCase <> "" Then GoTo Refresh_0
                                End If
                            End If
                        ' Perform check on archive folder, original from SJP but not present, case completed
                        If Range(ValidationColumn & tmpRow) = Chr$(252) And AdjournRow = 0 Then
                            tmpAlternateTrafficHearingFolder = Replace(tmpTrafficHearingFolder, Worksheets("Main").Range("U3") & "\SJP", Worksheets("Main").Range("V3") & "\" & Right(Range("C6"), 4) & "\SJP\" & Mid(Range("C6"), 7, 4) & "-" & Mid(Range("C6"), 4, 2) & "-" & Left(Range("C6"), 2))
                            tmpDIRCase = FindCaseFolder(tmpSurname, tmpForename, tmpURN, tmpAlternateTrafficHearingFolder)
                            If tmpDIRCase <> "" Then GoTo Refresh_0
                            End If
                        Else
                        ' ********** Original case was NOT in SJP **********
                        ' Perform check on archive folder, original not from SJP, case completed
                        If Range(ValidationColumn & tmpRow) = Chr$(252) And AdjournRow = 0 Then
                            tmpAlternateTrafficHearingFolder = Replace(tmpTrafficHearingFolder, Worksheets("Main").Range("U3"), Worksheets("Main").Range("V3") & "\" & Right(Range("C6"), 4) & "\" & Mid(Range("C6"), 7, 4) & "-" & Mid(Range("C6"), 4, 2) & "-" & Left(Range("C6"), 2))
                            tmpDIRCase = FindCaseFolder(tmpSurname, tmpForename, tmpURN, tmpAlternateTrafficHearingFolder)
                            If tmpDIRCase <> "" Then GoTo Refresh_0
                            End If
                        End If
Refresh_0:
                    If tmpDIRCase = "" Then
                        Call CreateViewButtons(tmpRow, "")
                        Range(CaseFolderPathColumn & tmpRow) = ""
                        Else
                        ' Found in the live folder
                        Call CreateViewButtons(tmpRow, tmpAlternateTrafficHearingFolder & "\" & tmpDIRCase)
                        Range(CaseFolderPathColumn & tmpRow) = tmpAlternateTrafficHearingFolder & tmpDIRCase
                        End If
                    Else
                    Call CreateViewButtons(tmpRow, tmpTrafficHearingFolder & "\" & tmpDIRCase)
                    Range(CaseFolderPathColumn & tmpRow) = tmpTrafficHearingFolder & tmpDIRCase
                    End If
                End If
            ' *** Un-Validated Cases Only from this point ***
            If Range(ValidationColumn & tmpRow) = "X" Then
                ' DQ3/DVS info
                tmpData = DriverInfo(Range(CaseFolderPathColumn & tmpRow), Val(tmpRow))
                If Len(tmpData) <> 0 Then
                    Range("U" & tmpRow + 1 & ":V" & tmpRow + 1).Locked = False
                    Range("U" & tmpRow + 1) = tmpData
                    Else
                    Range("U" & tmpRow + 1) = ""
                    Range("U" & tmpRow + 1 & ":V" & tmpRow + 1).Locked = True
                    End If
                ' Additional Info
                tmpData = AdditionalInfo(Range(CaseFolderPathColumn & tmpRow))
                If Len(tmpData) > 0 Then
                    Range("O" & tmpRow + 1) = tmpData
                    Range("O" & tmpRow + 1 & ":P" & tmpRow + 1).Locked = False
                    Else
                    Range("O" & tmpRow + 1) = ""
                    Range("O" & tmpRow + 1 & ":P" & tmpRow + 1).Locked = True
                    End If
                End If
            End If
        tmpRow = tmpRow + 1
        ThisWorkbook.Worksheets("Main").Range("M10:O10") = Int((tmpRow / ThisWorkbook.Worksheets("Main").Cells(ThisWorkbook.Worksheets("Main").Rows.Count, "B").End(xlUp).Row) * 100) & "% Linking to Cases"
        Application.ScreenUpdating = True
        DoEvents
        Application.ScreenUpdating = False
    Loop Until tmpRow > Worksheets("Main").Cells(Worksheets("Main").Rows.Count, "B").End(xlUp).Row
    ThisWorkbook.Worksheets("Main").Range("M10:O10") = ""
    ThisWorkbook.Worksheets("Main").Range("M10:O10").Interior.ColorIndex = DefendantHeaderColour
    tmpDisableWorkSheetChange = False
    Application.ScreenUpdating = True
    Call ProtectMe(True)
End Sub

Private Sub btnSaveResults_Click()
    Dim tmpRow As Integer
    Dim tmpPercent As Integer
    If Len(Range("C7")) = 0 Then MsgBox "Error!  You must enter a session start time", vbCritical: ThisWorkbook.Worksheets("Main").Range("C7").Select: GoTo btnSaveResults_0
    If Len(Range("C9")) = 0 Then MsgBox "Error!  You must enter a session end time", vbCritical: ThisWorkbook.Worksheets("Main").Range("C9").Select: GoTo btnSaveResults_0
    If Len(Range("M6")) = 0 Then MsgBox "Error!  You must enter a prosecutor", vbCritical: ThisWorkbook.Worksheets("Main").Range("M6").Select: GoTo btnSaveResults_0
    If Workbooks.Count > 1 Then MsgBox "Error!  Please close any other workbooked before continuing." & vbCrLf & "Only the Case Resulter workbook should be open when saving to case folders." & vbCrLf & "Please don't open any other excel documents until the process completes.": GoTo btnSaveResults_0
    ThisWorkbook.Save
    ResetButton btnSaveResults
    ' Update the buttons
    Call RefreshButtons
    Call ProtectMe(False)
    tmpRow = 15
    ThisWorkbook.Worksheets("Main").Range("M10:O10").Interior.ColorIndex = OffenceHeaderColour
    tmpDisableWorkSheetChange = True
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Do
        If ThisWorkbook.Worksheets("Main").Range(ButtonColumn2 & tmpRow) = "View Case" Then Call SaveToCaseFolders(Val(tmpRow), False): Call UpdateResultHistory(Val(tmpRow))
        tmpRow = tmpRow + 1
        Application.ScreenUpdating = True
        ThisWorkbook.Worksheets("Main").Range("M10:O10") = Int((tmpRow / ThisWorkbook.Worksheets("Main").Cells(ThisWorkbook.Worksheets("Main").Rows.Count, "B").End(xlUp).Row) * 100) & "% Please Wait"
        Application.ScreenUpdating = False
    Loop Until tmpRow > ThisWorkbook.Worksheets("Main").Cells(ThisWorkbook.Worksheets("Main").Rows.Count, "B").End(xlUp).Row
    ThisWorkbook.Worksheets("Main").Range("M10:O10") = ""
    ThisWorkbook.Worksheets("Main").Range("M10:O10").Interior.ColorIndex = DefendantHeaderColour
    tmpDisableWorkSheetChange = False
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Call ProtectMe(True)
btnSaveResults_0:
End Sub

Sub SaveToCaseFolders(tmpRow As Integer, tmpEmailUrgent As Boolean, Optional Amendment As Boolean)
    Dim tmpNewBook As Workbook
    Dim tmpURN As String
    Dim tmpSurname As String
    Dim tmpForename As String
    Dim tmpDIRCase As String
    Dim tmpLastRow As Integer
    Dim tmpCount As Integer
    Dim tmpOffCount As Integer
    Dim tmpAmendment As String
    Dim tmpExtension As String
    
    tmpExtension = ".xlsx"
    tmpLastRow = tmpRow + 3
    Do
        tmpLastRow = tmpLastRow + 1
        If Range(ActionColumn & tmpLastRow) = "Not Completed" Then Exit Do
    Loop Until Len(Range("B" & tmpLastRow)) = 0
    If Range(ActionColumn & tmpLastRow) = "Not Completed" Then Exit Sub
    tmpLastRow = tmpLastRow - 1
    ' Create new workbook and tidy it up
    
    Set tmpNewBook = Workbooks.add
    With tmpNewBook
        .Worksheets("Sheet1").Name = "Result"

        Range("A1:" & ValidationColumn & "1").Copy
        .Worksheets("Result").Range("A1").PasteSpecial (xlPasteValues)
        .Worksheets("Result").Range("A1").PasteSpecial (xlPasteFormats)
        .Worksheets("Result").Range("J1") = ""
        
        Range("A5:" & ValidationColumn & "9").Copy
        .Worksheets("Result").Range("A2").PasteSpecial (xlPasteValues)
        .Worksheets("Result").Range("A2").PasteSpecial (xlPasteFormats)
        
        .Worksheets("Result").Range("R2").Copy Destination:=.Worksheets("Result").Range("S2")
        .Worksheets("Result").Range("R2").Copy Destination:=.Worksheets("Result").Range("Q4")
        
        Range("O5:P5").Copy
        .Worksheets("Result").Range("Q2").PasteSpecial (xlPasteValues)
        .Worksheets("Result").Range("Q2").PasteSpecial (xlPasteFormats)
        
        Range("A" & tmpRow & ":" & LastColumn & tmpLastRow).Copy  ' was ValidationColumn
        .Worksheets("Result").Range("A8").PasteSpecial (xlPasteValues)
        .Worksheets("Result").Range("A8").PasteSpecial (xlPasteFormats)
        
        .Worksheets("Result").Columns("W:" & LastColumn).ColumnWidth = 0
        
        For tmpCount = 65 To 83
            .Worksheets("Result").Columns(Chr$(tmpCount)).ColumnWidth = Columns(Chr$(tmpCount)).ColumnWidth
        Next tmpCount
        For tmpCount = 1 To 7
            .Worksheets("Result").Rows(tmpCount).RowHeight = Rows(tmpCount).RowHeight
        Next tmpCount
        tmpCount = 8
        Do
            .Worksheets("Result").Rows(tmpCount).RowHeight = 25
            tmpCount = tmpCount + 1
        Loop Until tmpCount > .Worksheets("Result").Cells(.Worksheets("Result").Rows.Count, "B").End(xlUp).Row
        
        If Amendment = True Then
            tmpAmendment = " - (Amended on " & Right(Date, 4) & "-" & Mid(Date, 4, 2) & "-" & Left(Date, 2) & " " & Left(Time, 2) & Mid(Time, 4, 2) & Right(Time, 2) & ")"
            End If
        .Worksheets("Result").Range("A7").Select
        .Worksheets("Result").Range("A1:" & LastColumn & tmpCount + 2).Locked = True
        For tmpOffCount = 11 To tmpCount + 1
            If Len(.Worksheets("Result").Range("U" & tmpOffCount)) > 10 Then
                .Worksheets("Result").Range("U" & tmpOffCount & ":V" & tmpOffCount).UnMerge
                .Worksheets("Result").Range("U" & tmpOffCount & ":V" & tmpOffCount).EntireRow.AutoFit
                .Worksheets("Result").Range("U" & tmpOffCount & ":V" & tmpOffCount).Merge
                .Worksheets("Result").Range("U" & tmpOffCount & ":V" & tmpOffCount).RowHeight = (.Worksheets("Result").Range("U" & tmpOffCount & ":V" & tmpOffCount).RowHeight / 2) + 10
                End If
        Next tmpOffCount
        
        ActiveWindow.DisplayGridlines = False
        ActiveWindow.DisplayHeadings = False
        ActiveWindow.Zoom = 90
        .Worksheets("Result").Columns("Q").ColumnWidth = 12
        .Worksheets("Result").Columns("U").ColumnWidth = 20
        .Worksheets("Result").EnableSelection = xlUnlockedCells
        .Worksheets("Result").Protect "HMITU9", True, True
        tmpURN = Range(URNColumn & tmpRow + 1)
        If InStrRev(Range("B" & tmpRow + 1), " ") > 0 Then
            tmpSurname = Trim(Mid(Range("B" & tmpRow + 1), InStrRev(Range("B" & tmpRow + 1), " ")))
            tmpForename = Trim(Left(Range("B" & tmpRow + 1), InStrRev(Range("B" & tmpRow + 1), " ")))
            Else
            tmpSurname = Trim(Range("B" & tmpRow + 1))
            tmpForename = ""
            End If
        If Len(Range(CaseFolderPathColumn & tmpRow)) <> "" Then
            ' Establish the full path to the case folder
            Application.EnableCancelKey = xlDisabled
            If Val(Range("Q" & tmpRow + 1)) >= 75 And Val(Range("Q" & tmpRow + 1)) <= 77 Then
                .SaveCopyAs FileName:=Range(CaseFolderPathColumn & tmpRow) & "\Result on " & Right(Range("C6"), 4) & "-" & Mid(Range("C6"), 4, 2) & "-" & Left(Range("C6"), 2) & " SJP" & tmpAmendment & tmpExtension
                Else
                .SaveCopyAs FileName:=Range(CaseFolderPathColumn & tmpRow) & "\Result on " & Right(Range("C6"), 4) & "-" & Mid(Range("C6"), 4, 2) & "-" & Left(Range("C6"), 2) & tmpAmendment & tmpExtension
                End If
            .Close SaveChanges:=False
            ' Email the attachment from the case folder
            If tmpEmailUrgent = True Then
                If Val(Range("Q" & tmpRow + 1)) >= 75 And Val(Range("Q" & tmpRow + 1)) <= 77 Then
                    Call SendUrgentEmail(Range(CaseFolderPathColumn & tmpRow) & "\Result on " & Right(Range("C6"), 4) & "-" & Mid(Range("C6"), 4, 2) & "-" & Left(Range("C6"), 2) & " SJP" & tmpAmendment & tmpExtension, tmpSurname & ", " & tmpForename & " " & tmpURN, Amendment)
                    Else
                    Call SendUrgentEmail(Range(CaseFolderPathColumn & tmpRow) & "\Result on " & Right(Range("C6"), 4) & "-" & Mid(Range("C6"), 4, 2) & "-" & Left(Range("C6"), 2) & tmpAmendment & tmpExtension, tmpSurname & ", " & tmpForename & " " & tmpURN, Amendment)
                    End If
                End If
            Else
            ' Email the attachment from the users Case Resulter folder
            If tmpEmailUrgent = True Then
                .SaveAs Workbooks("Case Resulter.xlsm").Path & "\" & tmpSurname & " " & tmpForename & " " & tmpURN & tmpExtension
                .Close SaveChanges:=False
                If tmpEmailUrgent = True Then Call SendUrgentEmail(Workbooks("Case Resulter.xlsm").Path & "\" & tmpSurname & " " & tmpForename & " " & tmpURN & tmpExtension, tmpSurname & ", " & tmpForename & " " & tmpURN)
                Kill Workbooks("Case Resulter.xlsm").Path & "\" & tmpSurname & " " & tmpForename & " " & tmpURN & tmpExtension
                End If
            End If
    End With
End Sub

Sub SendUrgentEmail(tmpAttachment As String, DefDetails As String, Optional Amendment As Boolean)
    '***Eucs - Sameh Sabet - 24.08.2017
    '   changed outlook to late binding
    'Dim olApp As Outlook.Application
    'Dim objMail As Outlook.MailItem
    Dim olApp As Object
    Dim objMail As Object
    
    'Set olApp = Outlook.Application
    Set olApp = CreateObject("Outlook.Application")
    '***
    Set objMail = olApp.CreateItem(olMailItem)
    With objMail
        If Amendment = False Then
            .Subject = "SJP Urgent Result: " & DefDetails & " : " & " Hearing: " & Range("C6") & " " & Left(CDate(Worksheets("Main").Range("C7")), 5) & "   Court Room: " & Range("C8")
            .Body = ""
            Else
            .Subject = "SJP Amended Result: " & DefDetails & " : " & " Hearing: " & Range("C6") & " " & Left(CDate(Worksheets("Main").Range("C7")), 5) & "   Court Room: " & Range("C8")
            .Body = "If using the Case Resulting 'Move Case' function on the Post Court Results screen, please make sure this case is NOT selected.  This case folder should be updated manually."
            End If
        .Recipients.add Range("C2")
        .Recipients.ResolveAll
        .Attachments.add tmpAttachment
        .display
    End With
    Set objMail = Nothing
    Set olApp = Nothing
End Sub

Sub SendUrgentCancelledEmail(DefDetails As String)
    Dim tmpRow As Integer
    Dim tmpURN As String
    Dim tmpSurname As String
    Dim tmpForename As String
    Dim tmpDIRCase As String
    
    '***Eucs - Sameh Sabet - 24.08.2017
    '   changed outlook to late binding
    'Dim olApp As Outlook.Application
    'Dim objMail As Outlook.MailItem
    Dim olApp As Object
    Dim objMail As Object
    'Set olApp = Outlook.Application
    Set olApp = CreateObject("Outlook.Application")
    '***
    
    Set objMail = olApp.CreateItem(olMailItem)
    ' Send cancellation email
    With objMail
        .Subject = "SJP Urgent Result (CANCELLED): " & DefDetails & " : " & " Hearing: " & Range("C6") & " " & Left(CDate(Worksheets("Main").Range("C7")), 5) & "   Court Room: " & Range("C8")
        .Body = ""
        .Recipients.add Range("C2")
        .Recipients.ResolveAll
        .display
    End With
    Set objMail = Nothing
    Set olApp = Nothing
    ' Delete the result xls from the case folder
    tmpRow = Val(Mid(ActiveCell.Address, 4))
    If Range(ButtonColumn2 & tmpRow) = "View Case" Then
        On Error Resume Next
        Kill Range(CaseFolderPathColumn & tmpRow) & "\Result on " & Right(Range("C6"), 4) & "-" & Mid(Range("C6"), 4, 2) & "-" & Left(Range("C6"), 2) & "*.xlsx"
        On Error GoTo 0
        End If
End Sub

Private Sub btnSortByAge_Click()
    ResetButton btnSortByAge
    If Sheet1.txtProsecutorType = "Proceeds Of Crime Act" Then
        Call SortCases("URN")
        Else
        Call SortCases("Age")
        End If
    tmpScrollRow = 14: ActiveWindow.ScrollRow = tmpScrollRow
End Sub

Private Sub btnSortByCourtList_Click()
    ResetButton btnSortByCourtList
    Call SortCases("CourtList")
    tmpScrollRow = 14: ActiveWindow.ScrollRow = tmpScrollRow
End Sub

Private Sub btnSortByPleaAge_Click()
    ResetButton btnSortByPleaAge
    Call SortCases("PleaAge")
    tmpScrollRow = 14: ActiveWindow.ScrollRow = tmpScrollRow
End Sub

Private Sub btnSortByPleaAlpha_Click()
    ResetButton btnSortByPleaAlpha
    Call SortCases("PleaAlpha")
    tmpScrollRow = 14: ActiveWindow.ScrollRow = tmpScrollRow
End Sub

Private Sub btnViewTrafficFolder_Click()
    ResetButton btnViewTrafficFolder
    If Len(Range("C3")) = 0 Then MsgBox "Error!  No case folder has been populated yet", vbCritical: GoTo btnViewTrafficFolder_0
    If IsDate(Range("C6")) = False Then MsgBox "Error!  You must load a court list first", vbCritical: GoTo btnViewTrafficFolder_0
    If UCase(Range("C8")) = "SJP" Or Range("C8") = "77" Or Range("C8") = "76" Or Range("C8") = "75" Then
        x = Shell("Explorer.exe " & Chr$(34) & Range("C3") & "\" & Worksheets("Main").Range("U3") & "\SJP" & Chr$(34), vbNormalFocus)
        Else
        x = Shell("Explorer.exe " & Chr$(34) & Range("C3") & "\" & Right(Range("C6"), 4) & "-" & Mid(Range("C6"), 4, 2) & "-" & Left(Range("C6"), 2) & Chr$(34), vbNormalFocus)
        End If
btnViewTrafficFolder_0:
End Sub

Private Sub btnWhatsNew_Click()
    ResetButton btnWhatsNew
    frmWhatsNew.Show
End Sub

Private Sub txtProsecutorType_Click()
    ResetButton txtProsecutorType
    If txtProsecutorType = "Traffic" And Val(Range("C8")) >= 75 And Val(Range("C8")) <= 77 Then Range("C8") = ""
    If txtProsecutorType = "Pre Charge Bail" And (Val(Range("C8")) <> 85 And Val(Range("C8")) <> 86) Then Range("C8") = ""
    If txtProsecutorType <> "Pre Charge Bail" And (Val(Range("C8")) = 85 Or Val(Range("C8")) = 86) Then Range("C8") = ""
    If txtProsecutorType <> "Traffic" And txtProsecutorType <> "Pre Charge Bail" And txtProsecutorType <> "DVLA" And txtProsecutorType <> "Proceeds Of Crime Act" And txtProsecutorType <> "TV" And txtProsecutorType <> "Transport Authority" And (Val(Range("C8")) <> 75 And Val(Range("C8")) <> 76 And Val(Range("C8")) <> 77) Then Range("C8") = ""
    If txtProsecutorType = "Proceeds Of Crime Act" Then btnSortByAge.Caption = "Sort By URN" Else btnSortByAge.Caption = "Sort By Age"
    Call ProtectMe(False)
    Worksheets("Main").Range("P7") = txtProsecutorType
    Call ProtectMe(True)
End Sub

Private Sub txtQuickFind_DropButtonClick()
    Dim tmpRow As Integer
    ResetButton txtQuickFind
    If txtQuickFind.ListIndex < 0 Then
        Exit Sub
        End If
    tmpRow = txtQuickFind.Column(0, txtQuickFind.ListIndex)
    If tmpRow > 0 Then
        tmpScrollRow = tmpRow
        ActiveWindow.ScrollRow = tmpScrollRow - 1
        Range("D" & tmpScrollRow + 1).Select
        txtQuickFind = ""
        End If
End Sub

Private Sub txtQuickFind_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    Dim tmpRow As Integer
    ResetButton txtQuickFind
    If txtQuickFind.ListIndex < 0 Then
        Exit Sub
        End If
    If KeyCode = 13 Then
        tmpRow = txtQuickFind.Column(0, txtQuickFind.ListIndex)
        If tmpRow > 0 Then
            tmpScrollRow = tmpRow
            ActiveWindow.ScrollRow = tmpScrollRow - 1
            Range("D" & tmpScrollRow + 1).Select
            txtQuickFind = ""
            End If
        End If
End Sub

Private Sub txtValidated_Click()
    Call RebuildQuickFind
End Sub

Private Sub Worksheet_Activate()
    If LCase(Environ("UserName")) <> LCase(Range("J6")) Then Call ShowWorkSheet("Results"): Exit Sub
    Application.MoveAfterReturnDirection = xlToRight
    If ByPassQuickFindCheck = False Then
        Call RebuildQuickFind
        Call RebuildValidate
        End If
End Sub

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    Dim myWordApp As Object
    Dim myWordDoc As Object
    Dim tmpDIRMG5 As String
    Dim wrnge As Object
    Dim tmpRow As Integer
    Dim tmpLastRow As Integer
    Dim tmpURN As String
    Dim tmpSurname As String
    Dim tmpForename As String
    Dim tmpDIRCase As String
    Dim tmpTarget As String
    Dim x
    Dim tmpRowToDuplicate As Integer
    Dim tmpNextCaseRow As Integer
    Dim tmpDIRFullCase As String
    Dim tmpFound As Boolean
    Dim tmpCaseHearingFolder As String
    Dim tmpFirstpass As String
    Dim tmpDefRow As Integer
    Dim tmpOriginalDefRow As Integer
    Dim tmpDriverInfo As String
    Dim tmpPreviousAdjDate As String
    Dim tmpCorres As String
    Dim lngCurPos As POINTAPI
    Dim rc As RECT
    Dim tmpDocColumn As String
    Dim horiz As Long
    Dim vert As Long
    Dim WindowHandle As Long
    Dim myShell As Object
    Dim tmpPleaType As String
    Dim t As Long
    Dim tmpArchivePath As String
    
    ' Check for double click a locked cell
    GetCursorPos lngCurPos
    On Error Resume Next
    Call GetRangeRect(ActiveCell, rc)
    On Error GoTo 0
    If lngCurPos.x < rc.Left Or lngCurPos.x > rc.Right Then Cancel = True: GoTo Finish
    'If lngCurPos.y < rc.Top Or lngCurPos.y > rc.Bottom Then Cancel = True: MsgBox "vertical abort - position =" & lngCurPos.y & ": top=" & rc.Top & ":bottom=" & rc.Bottom & vbLf & ":ActiveCell top=" & ActiveCell.Top & ":ActiveCell height=" & ActiveCell.Height: Exit Sub
    
    'On Error Cancel=True:GoTo Finish
    If Range(ActiveCell.Address).Interior.ColorIndex <> OffenceColour And Range(ActiveCell.Address).Interior.ColorIndex <> BadColour And Left(ActiveCell.Address, 2) <> "$O" And Left(ActiveCell.Address, 2) <> "$U" And Range(ActiveCell.Address).Interior.ColorIndex <> ButtonColour Then Cancel = True: Exit Sub
    Call ProtectMe(False)
    tmpDisableWorkSheetChange = True
    ' Double click Correspondence
    If Left(ActiveCell.Address, 2) = "$O" Then
        tmpTarget = ActiveCell
        If Len(tmpTarget) > 0 Then
            tmpDefRow = Val(Mid(ActiveCell.Address, 4))
            tmpDIRCase = Range(CaseFolderPathColumn & tmpDefRow - 1)
            If tmpDIRCase <> "" Then
                If InStr(ActiveCell, "Corres") > 0 Then
                    tmpCorres = Dir(tmpDIRCase & "\*Corres*")
                    If Len(tmpCorres) <> 0 Then ThisWorkbook.FollowHyperlink tmpDIRCase & "\" & tmpCorres
                    Do
                        tmpCorres = Dir()
                        If Len(tmpCorres) = 0 Then Exit Do
                        ThisWorkbook.FollowHyperlink tmpDIRCase & "\" & tmpCorres
                    Loop
                    End If
                If InStr(ActiveCell, "Disq Response") > 0 Then
                    tmpCorres = Dir(tmpDIRCase & "\*Disq Response*")
                    If Len(tmpCorres) <> 0 Then ThisWorkbook.FollowHyperlink tmpDIRCase & "\" & tmpCorres
                    Do
                        tmpCorres = Dir()
                        If Len(tmpCorres) = 0 Then Exit Do
                        ThisWorkbook.FollowHyperlink tmpDIRCase & "\" & tmpCorres
                    Loop
                    End If
                If InStr(ActiveCell, "Memo") > 0 Then
                    tmpCorres = Dir(tmpDIRCase & "\*Moc*")
                    If Len(tmpCorres) <> 0 Then ThisWorkbook.FollowHyperlink tmpDIRCase & "\" & tmpCorres
                    Do
                        tmpCorres = Dir()
                        If Len(tmpCorres) = 0 Then Exit Do
                        ThisWorkbook.FollowHyperlink tmpDIRCase & "\" & tmpCorres
                    Loop
                    End If
                If InStr(ActiveCell, "Means") > 0 Then
                    tmpCorres = Dir(tmpDIRCase & "\*MC100*")
                    If Len(tmpCorres) <> 0 Then ThisWorkbook.FollowHyperlink tmpDIRCase & "\" & tmpCorres
                    Do
                        tmpCorres = Dir()
                        If Len(tmpCorres) = 0 Then Exit Do
                        ThisWorkbook.FollowHyperlink tmpDIRCase & "\" & tmpCorres
                    Loop
                    End If
                End If
            If Len(tmpCorres) <> 0 Then
                If Right(LCase(tmpCorres), 4) = ".pdf" Then
                    'ShellExecute 0, "Open", Range(CaseFolderPathColumn & Val(Mid(ActiveCell.Address, 4))) & "\" & tmpDriverInfo, "", "", vbNormalFocus
                    'Application.Wait (Now + TimeValue("0:00:01"))
                    WindowHandle = FindWindow(vbNullString, tmpCorres & " - Adobe Reader")
                    If WindowHandle > 0 Then x = MoveWindow(WindowHandle, 100, 100, 1024, 768, 1)
                    End If
                End If
            Cancel = True: GoTo Finish
            End If
        End If

    ' Double Click the DQ3/DVS
    If Left(ActiveCell.Address, 2) = "$U" Then
        tmpTarget = ActiveCell
        If InStr(tmpTarget, "DQ3") > 0 Then
            tmpDefRow = Val(Mid(ActiveCell.Address, 4))
            tmpDIRCase = Range(CaseFolderPathColumn & tmpDefRow - 1)
            If tmpDIRCase <> "" Then
                If InStr(ActiveCell, "DQ3: Matched") > 0 Then
                    tmpDriverInfo = Dir(tmpDIRCase & "\*DQ3*.txt")
                    If tmpDriverInfo <> "" Then ShellExecute 0, "Open", tmpDIRCase & "\" & tmpDriverInfo, "", "", vbNormalFocus
                    tmpDriverInfo = Dir(tmpDIRCase & "\*DQ3*.pdf")
                    If tmpDriverInfo <> "" Then ShellExecute 0, "Open", tmpDIRCase & "\" & tmpDriverInfo, "", "", vbNormalFocus
                    End If
                If InStr(ActiveCell, "DVS: Matched") > 0 Then
                    tmpDriverInfo = Dir(tmpDIRCase & "\*DVS*.pdf")
                    If tmpDriverInfo <> "" Then ShellExecute 0, "Open", tmpDIRCase & "\" & tmpDriverInfo, "", "", vbNormalFocus
                    End If
                If InStr(ActiveCell, "DVS: No Trace") > 0 Then
                    tmpDriverInfo = Dir(tmpDIRCase & "\*DVS*.oxps")
                    If tmpDriverInfo <> "" Then ShellExecute 0, "Open", tmpDIRCase & "\" & tmpDriverInfo, "", "", vbNormalFocus
                    End If
                If InStr(ActiveCell, "DQ3: No Trace") > 0 And InStr(ActiveCell, "DVS: n/a") > 0 Then
                    tmpDriverInfo = Dir(tmpDIRCase & "\*DQ3*.txt")
                    If tmpDriverInfo <> "" Then ShellExecute 0, "Open", tmpDIRCase & "\" & tmpDriverInfo, "", "", vbNormalFocus
                    End If
                If InStr(ActiveCell, "Points") > 0 And InStr(ActiveCell, "DVS: n/a") > 0 Then
                    tmpDriverInfo = Dir(tmpDIRCase & "\*DQ3*.txt")
                    If tmpDriverInfo <> "" Then ShellExecute 0, "Open", tmpDIRCase & "\" & tmpDriverInfo, "", "", vbNormalFocus
                    End If
                If InStr(ActiveCell, "DQ3: No Endorse") > 0 And InStr(ActiveCell, "DVS: n/a") > 0 Then
                    tmpDriverInfo = Dir(tmpDIRCase & "\*DQ3*.txt")
                    If tmpDriverInfo <> "" Then ShellExecute 0, "Open", tmpDIRCase & "\" & tmpDriverInfo, "", "", vbNormalFocus
                    End If
                If InStr(ActiveCell, "DQ3: Too Old") > 0 And InStr(ActiveCell, "DVS: n/a") > 0 Or InStr(ActiveCell, "DVS: Too Old") > 0 And InStr(ActiveCell, "DQ3: n/a") > 0 Or InStr(ActiveCell, "DQ3: Too Old") > 0 And InStr(ActiveCell, "DVS: Too Old") > 0 Then
                    MsgBox "Error!  The DQ3 / DVS are more than 7 days old"
                    End If
                If InStr(ActiveCell, "DQ3: n/a") > 0 And InStr(ActiveCell, "DVS: n/a") > 0 Then
                    MsgBox "Error!  driver info files not found, please use the 'View Case' button", vbCritical
                    End If
                Else
                MsgBox "Error!  driver info files not found, please use the 'View Case' button", vbCritical
                End If
            If Right(LCase(tmpDriverInfo), 4) = ".pdf" Then
                'ShellExecute 0, "Open", Range(CaseFolderPathColumn & Val(Mid(ActiveCell.Address, 4))) & "\" & tmpDriverInfo, "", "", vbNormalFocus
                Application.Wait (Now + TimeValue("0:00:01"))
                WindowHandle = FindWindow(vbNullString, tmpDriverInfo & " - Adobe Reader")
                If WindowHandle > 0 Then x = MoveWindow(WindowHandle, 100, 100, 1024, 768, 1)
                Cancel = True
                End If
            Cancel = True: GoTo Finish
            End If
        End If
    
    ' Double Click The Plea to View the Plea
    If Left(ActiveCell.Address, 2) = "$" & PleaColumn Then
        If InStr(Target, "(") > 0 Then
            tmpRow = Val(Mid(ActiveCell.Address, 4))
            tmpDefRow = tmpRow
            Do
                tmpDefRow = tmpDefRow - 1
            Loop Until Range("B" & tmpDefRow) = "Defendant" Or tmpDefRow < 15
            tmpDefRow = tmpDefRow + 1
            tmpDIRCase = Range(CaseFolderPathColumn & tmpDefRow - 1)
            tmpPleaType = ""
            If tmpDIRCase <> "" Then
                If Dir(tmpDIRCase & "\Not Guilty Plea.pdf") <> "" Then tmpPleaType = "Not Guilty Plea.pdf"
                If Dir(tmpDIRCase & "\Not Guilty Plea.msg") <> "" Then tmpPleaType = "Not Guilty Plea.msg"
                If Dir(tmpDIRCase & "\Guilty Plea.pdf") <> "" Then tmpPleaType = "Guilty Plea.pdf"
                If Dir(tmpDIRCase & "\Guilty Plea.msg") <> "" Then tmpPleaType = "Guilty Plea.msg"
                If Dir(tmpDIRCase & "\Not Guilty Plea Req DOH.pdf") <> "" Then tmpPleaType = "Not Guilty Plea Req DOH.pdf"
                If Dir(tmpDIRCase & "\Not Guilty Plea Req DOH.msg") <> "" Then tmpPleaType = "Not Guilty Plea Req DOH.msg"
                If Dir(tmpDIRCase & "\Guilty Plea Req DOH.pdf") <> "" Then tmpPleaType = "Guilty Plea Req DOH.pdf"
                If Dir(tmpDIRCase & "\Guilty Plea Req DOH.msg") <> "" Then tmpPleaType = "Guilty Plea Req DOH.msg"
                If Dir(tmpDIRCase & "\Plea.html") <> "" Then tmpPleaType = "Plea.html"
                If tmpPleaType <> "" Then
                    ShellExecute 0, "Open", tmpDIRCase & "\" & tmpPleaType, "", "", vbNormalFocus
                    If Right(LCase(tmpPleaType), 4) = ".pdf" Then
                        Application.Wait (Now + TimeValue("0:00:02"))
                        WindowHandle = FindWindow(vbNullString, tmpPleaType & " - Adobe Reader")
                        If WindowHandle > 0 Then x = MoveWindow(WindowHandle, 100, 100, 1024, 768, 1)
                        End If
                    End If
                Else
                MsgBox "Error!  Plea file not found", vbCritical
                End If
            Cancel = True: GoTo Finish
            End If
        End If
    
    ' View a case
    If Left(ActiveCell.Address, 2) = "$" & ButtonColumn2 Then
        If Left(Target, 9) = "View Case" Then
            ' Check live folder (SJP or hearing folder)
            If InStr(txtProsecutorType, "(SJP)") > 0 Then
                AdjournRow = FindAdjAction(Val(Mid(ActiveCell.Address, 4)) + 4)
                If AdjournRow > 0 Then
                    ' Adjourned in SJP
                    ' Check Archive Folder First
                    tmpCaseHearingFolder = Worksheets("Main").Range("C3") & "\" & Worksheets("Main").Range("V3") & "\" & Right(Worksheets("Main").Range("C6"), 4) & "\SJP"
                    tmpCaseHearingFolder = tmpCaseHearingFolder & "\" & Right(Worksheets("Main").Range("C6"), 4) & "-" & Mid(Worksheets("Main").Range("C6"), 4, 2) & "-" & Left(Worksheets("Main").Range("C6"), 2)
                    If InStr(Range(CaseFolderPathColumn & Val(Mid(ActiveCell.Address, 4))), "\") > 0 Then
                        tmpCaseHearingFolder = tmpCaseHearingFolder & Mid(Range(CaseFolderPathColumn & Val(Mid(ActiveCell.Address, 4))), InStrRev(Range(CaseFolderPathColumn & Val(Mid(ActiveCell.Address, 4))), "\"))
                        End If
                    Call OpenCaseFolder(tmpCaseHearingFolder)
                    Else
                    ' Adjourned to Court hearing
                    AdjournRow = FindAnyAdjAction(Val(Mid(ActiveCell.Address, 4)) + 4)
                    If AdjournRow > 0 Then
                        ' Adjourned out of SJP - check new hearing folder
                        tmpCaseHearingFolder = Worksheets("Main").Range("C3") & "\" & Worksheets("Main").Range("U3") & "\" & Mid(Range(AdjDateColumn & AdjournRow), 7, 4) & "-" & Mid(Range(AdjDateColumn & AdjournRow), 4, 2) & "-" & Left(Range(AdjDateColumn & AdjournRow), 2)
                        If InStr(Range(CaseFolderPathColumn & Val(Mid(ActiveCell.Address, 4))), "\") > 0 Then
                            tmpCaseHearingFolder = tmpCaseHearingFolder & Mid(Range(CaseFolderPathColumn & Val(Mid(ActiveCell.Address, 4))), InStrRev(Range(CaseFolderPathColumn & Val(Mid(ActiveCell.Address, 4))), "\"))
                            End If
                        Call OpenCaseFolder(tmpCaseHearingFolder)
                        Else
                        'Not adjourned - check archive then live SJP
                        tmpCaseHearingFolder = Worksheets("Main").Range("C3") & "\" & Worksheets("Main").Range("V3") & "\" & Right(Worksheets("Main").Range("C6"), 4) & "\SJP"
                        tmpCaseHearingFolder = tmpCaseHearingFolder & "\" & Right(Worksheets("Main").Range("C6"), 4) & "-" & Mid(Worksheets("Main").Range("C6"), 4, 2) & "-" & Left(Worksheets("Main").Range("C6"), 2)
                        If InStr(Range(CaseFolderPathColumn & Val(Mid(ActiveCell.Address, 4))), "\") > 0 Then
                            tmpCaseHearingFolder = tmpCaseHearingFolder & Mid(Range(CaseFolderPathColumn & Val(Mid(ActiveCell.Address, 4))), InStrRev(Range(CaseFolderPathColumn & Val(Mid(ActiveCell.Address, 4))), "\"))
                            End If
                        Call OpenCaseFolder(tmpCaseHearingFolder)
                        End If
                    End If
                Else
                ' Check archive first
                AdjournRow = FindAnyAdjAction(Val(Mid(ActiveCell.Address, 4)) + 4)
                If AdjournRow > 0 Then
                    ' Adjourned out of SJP - check new hearing folder
                    tmpCaseHearingFolder = Worksheets("Main").Range("C3") & "\" & Worksheets("Main").Range("U3") & "\" & Mid(Range(AdjDateColumn & AdjournRow), 7, 4) & "-" & Mid(Range(AdjDateColumn & AdjournRow), 4, 2) & "-" & Left(Range(AdjDateColumn & AdjournRow), 2)
                    If InStr(Range(CaseFolderPathColumn & Val(Mid(ActiveCell.Address, 4))), "\") > 0 Then
                        tmpCaseHearingFolder = tmpCaseHearingFolder & Mid(Range(CaseFolderPathColumn & Val(Mid(ActiveCell.Address, 4))), InStrRev(Range(CaseFolderPathColumn & Val(Mid(ActiveCell.Address, 4))), "\"))
                        End If
                    Call OpenCaseFolder(tmpCaseHearingFolder)
                    Else
                    If FolderExists(Range(CaseFolderPathColumn & Val(Mid(ActiveCell.Address, 4)))) = True Then
                        x = Shell("Explorer.exe " & Chr$(34) & Range(CaseFolderPathColumn & Val(Mid(ActiveCell.Address, 4))) & Chr$(34), vbNormalFocus)
                        Else
                        MsgBox "Error!  Unable to locate the case folder.  Make sure your S drive is connected, click 'This PC' on any folder window to view the S drive."
                        End If
                    End If
                End If
            Cancel = True: GoTo Finish
            End If
        End If
    
    ' Insert a defendant change line
    If Left(ActiveCell.Address, 2) = "$" & ButtonColumn Then
        If Target = "Edit Defendant" Then
            Application.ScreenUpdating = False
            tmpRow = Val(Mid(ActiveCell.Address, 4))
            tmpLastRow = tmpRow + 2
            Do
                If Range("S" & tmpLastRow).Interior.ColorIndex <> OffenceColour Then tmpLastRow = tmpLastRow - 1: Exit Do
                tmpLastRow = tmpLastRow + 1
            Loop
            Range("A" & tmpRow & ":A" & tmpLastRow).UnMerge
            ActiveCell.Offset(1).EntireRow.Insert
            tmpLastRow = tmpLastRow + 1
            Range("B" & tmpRow + 1 & ":E" & tmpRow + 1).Merge ' New Name
            Range("H" & tmpRow + 1 & ":P" & tmpRow + 1).Merge ' New Address
            Range("S" & tmpRow + 1 & ":" & ValidationColumn & tmpRow + 1).Merge ' Remaining fields after solicitor
            Range("S" & tmpRow + 1 & ":" & ValidationColumn & tmpRow + 1).Locked = True
            Range(ButtonColumn2 & tmpRow).Cut Destination:=Range(ButtonColumn2 & tmpRow + 1)
            Range(ButtonColumn & tmpRow + 1 & ":" & ButtonColumn2 & tmpRow + 3).Cut Destination:=Range(ButtonColumn & tmpRow)
            Range(ButtonColumn & tmpRow) = "Delete Changes"
            Range(ButtonColumn2 & tmpRow + 3).Borders(xlEdgeBottom).LineStyle = xlNone
            Range(ButtonColumn2 & tmpRow + 3).Borders(xlEdgeRight).LineStyle = xlContinuous
    
            Range("A" & tmpRow & ":A" & tmpLastRow).Merge
            Range("A" & tmpRow & ":A" & tmpLastRow).VerticalAlignment = xlCenter
            Range("B" & tmpRow + 1 & ":" & ValidationColumn & tmpRow + 1).Interior.ColorIndex = OffenceColour
            Range("B" & tmpRow + 1 & ":R" & tmpRow + 1).Locked = False
            Range("Q" & tmpRow + 1).Locked = True
            Range("B" & tmpRow + 1).Select
            Application.ScreenUpdating = True
            Cancel = True: GoTo Finish
            End If
        End If
        
    ' Insert a new offence
    If Left(ActiveCell.Address, 2) = "$" & ButtonColumn Then
        If Target = "Offence Changes" Then
            Cancel = True
            frmOffenceChanges.Show
            Cancel = True: GoTo Finish
            End If
        End If
        
    ' Delete a defendant change line
    If Left(ActiveCell.Address, 2) = "$" & ButtonColumn Then
        If Target = "Delete Changes" Then
            Application.ScreenUpdating = False
            tmpRow = Val(Mid(ActiveCell.Address, 4)) - 1
            tmpLastRow = tmpRow + 4
            Do
                If Range("S" & tmpLastRow).Interior.ColorIndex <> OffenceColour Then tmpLastRow = tmpLastRow - 1: Exit Do
                tmpLastRow = tmpLastRow + 1
            Loop
            Range(ButtonColumn & tmpRow + 1 & ":" & ButtonColumn2 & tmpRow + 3).Cut Destination:=Range(ButtonColumn & tmpRow + 3)
            
            Range("A" & tmpRow + 1 & ":A" & tmpLastRow).UnMerge
            Range("A" & Mid(ActiveCell.Address, 4) + 1).EntireRow.Delete
            Range(ButtonColumn & tmpRow + 2 & ":" & ButtonColumn2 & tmpRow + 4).Cut Destination:=Range(ButtonColumn & tmpRow + 1)
            Range(ButtonColumn & tmpRow + 1) = "Edit Defendant"
            Range(ButtonColumn2 & tmpRow + 4).Borders(xlEdgeRight).LineStyle = xlContinuous
            tmpLastRow = tmpLastRow - 1
            Range("A" & tmpRow + 1 & ":A" & tmpLastRow).Merge
            Range("A" & tmpRow + 1 & ":A" & tmpLastRow).VerticalAlignment = xlCenter
            Application.ScreenUpdating = True
            Cancel = True: GoTo Finish
            End If
        End If

    ' Urgent Result
    If Left(ActiveCell.Address, 2) = "$" & ButtonColumn Then
        If Target = "Urgent Result" Then
            tmpOriginalDefRow = Val(Mid(ActiveCell.Address, 4))
            If InStr(Range("C2"), "@") = 0 Then MsgBox "Error!  Please make sure the post court email address has been entered", vbCritical: Cancel = True: GoTo Finish
            If Range("B" & tmpOriginalDefRow) <> "Defendant" Then MsgBox "Error!  Unable to locate the defendant header, please contact Paul Ridings regarding this message", vbCritical: Cancel = True: GoTo Finish
            If Range(ValidationColumn & tmpOriginalDefRow) = "X" Then MsgBox "Error!  Please make sure the case is validated before using the urgent result function", vbCritical: Cancel = True: GoTo Finish
            Call ProtectMe(False)
            tmpDisableWorkSheetChange = True
            Application.ScreenUpdating = False
            Application.DisplayAlerts = False
            Call SaveToCaseFolders(tmpOriginalDefRow, True)
            ActiveCell = "Clear Urgency"
            ' Lock the case
            tmpRow = tmpOriginalDefRow
            tmpDefRow = tmpRow + 4
            Do
                tmpDefRow = tmpDefRow + 1
            Loop Until Range("B" & tmpDefRow) = ""
            Range("A" & tmpRow & ":" & ButtonColumn2 & tmpDefRow - 1).Locked = True
            Range(ButtonColumn & tmpRow).Locked = False
            Call ProtectMe(True)
            tmpDisableWorkSheetChange = False
            Application.ScreenUpdating = True
            Application.DisplayAlerts = True
            'MsgBox "The urgent result has been emailed to the post court team", vbInformation
            Cancel = True: GoTo Finish
            End If
        End If
    
    'Amend Result
    If Left(ActiveCell.Address, 2) = "$" & ButtonColumn2 Then
        If Target = "Amended Result" Then
            tmpOriginalDefRow = Val(Mid(ActiveCell.Address, 4)) - 2
            If Range("B" & tmpOriginalDefRow) <> "Defendant" Then tmpOriginalDefRow = Val(Mid(ActiveCell.Address, 4)) - 3
            If InStr(Range("C2"), "@") = 0 Then MsgBox "Error!  Please make sure the post court email address has been entered", vbCritical: Cancel = True: GoTo Finish
            If Range("B" & tmpOriginalDefRow) <> "Defendant" Then MsgBox "Error!  Unable to locate the defendant header, please contact Paul Ridings regarding this message", vbCritical: Cancel = True: GoTo Finish
            If Range(ValidationColumn & tmpOriginalDefRow) = "X" Then MsgBox "Error!  Please make sure the case is validated before using the amend result function", vbCritical: Cancel = True: GoTo Finish
            Call ProtectMe(False)
            tmpDisableWorkSheetChange = True
            Application.ScreenUpdating = False
            Application.DisplayAlerts = False
            Call SaveToCaseFolders(tmpOriginalDefRow, True, True)
            Call ProtectMe(True)
            tmpDisableWorkSheetChange = False
            Application.ScreenUpdating = True
            Application.DisplayAlerts = True
            'MsgBox "The amended result has been emailed to the post court team", vbInformation
            Cancel = True: GoTo Finish
            End If
        End If
        
    ' Open Facts
    If Left(ActiveCell.Address, 2) = "$" & ButtonColumn2 Then
        horiz = GetSystemMetrics(SM_CXSCREEN)
        vert = GetSystemMetrics(SM_CXYCREEN)
        If Target = "View Facts" Then
            tmpDIRMG5 = Dir(Range(CaseFolderPathColumn & Val(Mid(ActiveCell.Address, 4)) - 1) & "\" & Range("T2"))
            tmpDIRMG5 = FindValidFile(CStr(tmpDIRMG5))
            tmpDocColumn = "T"
            If tmpDIRMG5 = "" And Range("U2") <> "" Then
                tmpDIRMG5 = Dir(Range(CaseFolderPathColumn & Val(Mid(ActiveCell.Address, 4)) - 1) & "\" & Range("U2"))
                tmpDIRMG5 = FindValidFile(CStr(tmpDIRMG5))
                tmpDocColumn = "U"
                If tmpDIRMG5 = "" And Range("V2") <> "" Then
                    tmpDIRMG5 = Dir(Range(CaseFolderPathColumn & Val(Mid(ActiveCell.Address, 4)) - 1) & "\" & Range("V2"))
                    tmpDIRMG5 = FindValidFile(CStr(tmpDIRMG5))
                    tmpDocColumn = "V"
                    If tmpDIRMG5 = "" And Range("W2") <> "" Then
                        tmpDIRMG5 = Dir(Range(CaseFolderPathColumn & Val(Mid(ActiveCell.Address, 4)) - 1) & "\" & Range("W2"))
                        tmpDIRMG5 = FindValidFile(CStr(tmpDIRMG5))
                        tmpDocColumn = "W"
                        End If
                    End If
                End If
            ' Word documents only
            If tmpDIRMG5 <> "" And tmpDocColumn <> "" And (LCase(Right(tmpDIRMG5, 3)) = "doc" Or LCase(Right(tmpDIRMG5, 4)) = "docx") Then
                On Error Resume Next
                Set myWordApp = GetObject(, "Word.Application")
                On Error GoTo 0
                If Not myWordApp Is Nothing Then
                    Set myWordDoc = myWordApp.Documents(Range(CaseFolderPathColumn & Val(Mid(ActiveCell.Address, 4)) - 1) & "\" & tmpDIRMG5)
                    If Not myWordDoc Is Nothing Then
                        myWordApp.Activate
                        Set myWordApp = Nothing
                        Set myWordDoc = Nothing
                        Cancel = True: GoTo Finish
                        End If
                    End If
                Set myWordApp = CreateObject("Word.Application")
                myWordApp.Visible = True
                Set myWordDoc = myWordApp.Documents.Open(Range(CaseFolderPathColumn & Val(Mid(ActiveCell.Address, 4)) - 1) & "\" & tmpDIRMG5)
                With myWordApp
                    .Application.WindowState = wdWindowStateNormal
                    .ActiveWindow.ActivePane.View.Zoom.Percentage = Range("T3")
                    Set wrnge = myWordDoc.Content
                    wrnge.Find.ClearFormatting
                    wrnge.Find.Replacement.ClearFormatting
        
                    With wrnge.Find
                        .Text = Range(tmpDocColumn & "4") 'What text you want to find here.
                        .Forward = True
                        .wrap = wdFindContinue
                        .Format = False
                        .MatchCase = False
                        .MatchWholeWord = False
                        .MatchWildcards = False
                        .MatchSoundsLike = False
                        .MatchAllWordForms = False
                    End With
                    If wrnge.Find.Execute Then wrnge.Select
                    .Activate
                End With
                WindowHandle = FindWindow(vbNullString, tmpDIRMG5 & " - Microsoft Word")
                If WindowHandle > 0 Then
                    If GetMonitorCount <> 1 Then
                        x = MoveWindow(WindowHandle, horiz + 1, 1, 1024, 768, 1)
                        myWordApp.Application.WindowState = wdWindowStateMaximize
                        Else
                        x = MoveWindow(WindowHandle, 100, 100, 1024, 768, 1)
                        End If
                    End If
                Set myWordApp = Nothing
                Cancel = True: GoTo Finish
                End If
            ' PDF documents only
            If tmpDIRMG5 <> "" And tmpDocColumn <> "" And LCase(Right(tmpDIRMG5, 3)) = "pdf" Then
                ShellExecute 0, "Open", Range(CaseFolderPathColumn & Val(Mid(ActiveCell.Address, 4)) - 1) & "\" & tmpDIRMG5, "", "", vbNormalNoFocus
                Application.Wait (Now + TimeValue("0:00:01"))
                WindowHandle = FindWindow(vbNullString, tmpDIRMG5 & " - Adobe Reader")
                If WindowHandle > 0 Then
                    If GetMonitorCount <> 1 Then
                        x = MoveWindow(WindowHandle, horiz + 1, 1, 1024, 768, 1)
                        Else
                        x = MoveWindow(WindowHandle, 100, 100, 1024, 768, 1)
                        End If
                    End If
                t = Timer
                Do: Loop Until Timer > t + 2
                If Left(Range(tmpDocColumn & "4"), 4) = "Page" Then
                    For tmpCount = 1 To Val(Replace(Range(tmpDocColumn & "4"), "Page", "")) - 1
                        SendKeys "{RIGHT}"
                    Next tmpCount
                    Else
                    SendKeys "^E"
                    SendKeys "F"
                    SendKeys Range(tmpDocColumn & "4")
                    SendKeys "{ENTER}"
                    End If
                Cancel = True
                End If
            Cancel = True
            End If
        End If
        
    ' Clear Urgent Result
    If Left(ActiveCell.Address, 2) = "$" & ButtonColumn Then
        If Target = "Clear Urgency" Then
            tmpDisableWorkSheetChange = True
            Call ProtectMe(False)
            ' Lock the case
            tmpRow = Val(Mid(ActiveCell.Address, 4))
            tmpDefRow = tmpRow + 4
            Do
                tmpDefRow = tmpDefRow + 1
            Loop Until Range("B" & tmpDefRow) = ""
            Range("A" & tmpRow & ":" & ButtonColumn2 & tmpDefRow - 1).Locked = False
            Call SendUrgentCancelledEmail(Range("B" & tmpRow + 1) & " " & Range(URNColumn & tmpRow + 1))
            ActiveCell = "Urgent Result"
            tmpDisableWorkSheetChange = False
            Call ProtectMe(True)
            Application.EnableCancelKey = xlDisabled
            Cancel = True: GoTo Finish
            End If
        End If

    ' Duplicate Result
    If Left(ActiveCell.Address, 2) = "$" & ButtonColumn Then
        If Target = "Duplicate Result" Then
            tmpRow = Val(Mid(ActiveCell.Address, 4)) + 1
            If Range("B" & tmpRow) = "Offence" Then tmpRow = tmpRow + 1
            If Range("B" & tmpRow - 3) = "Defendant" Then tmpOriginalDefRow = tmpRow - 3
            If Range("B" & tmpRow - 4) = "Defendant" Then tmpOriginalDefRow = tmpRow - 4
            If tmpOriginalDefRow = 0 Then MsgBox "Error!  Unable to locate the defendant header, please contact Paul Ridings regarding this message": Cancel = True: GoTo Finish
            tmpDefRow = tmpRow + 2
            Do
                tmpDefRow = tmpDefRow + 1
            Loop Until Range("B" & tmpDefRow) = "Defendant" Or tmpDefRow > Worksheets("Main").Cells(Worksheets("Main").Rows.Count, "B").End(xlUp).Row
            tmpLastRow = tmpRow + 1
            Do
                If Range("S" & tmpLastRow).Interior.ColorIndex <> OffenceColour Then tmpLastRow = tmpLastRow - 1: Exit Do
                tmpLastRow = tmpLastRow + 1
            Loop
            tmpDisableWorkSheetChange = True
            If tmpLastRow = tmpRow Then
                If tmpDefRow > Worksheets("Main").Cells(Worksheets("Main").Rows.Count, "B").End(xlUp).Row Then MsgBox "Error!  This case is the last single offence case on the list you cannot duplicate to the next case", vbCritical: Cancel = True: GoTo Finish
                ' Duplicate result on the next case
                If Range(ValidationColumn & tmpOriginalDefRow) = "X" Then MsgBox "Error!  You cannot duplicate an un-validated result": Cancel = True: GoTo Finish
                tmpNextCaseRow = tmpLastRow + 4
                Do
                    If Range("B" & tmpNextCaseRow) = "Offence" Then Exit Do
                    tmpNextCaseRow = tmpNextCaseRow + 1
                Loop Until tmpNextCaseRow > tmpLastRow + 10
                If tmpNextCaseRow > tmpLastRow + 10 Then MsgBox "Error!  Unable to locate the next case", vbCritical: Cancel = True: GoTo Finish
                tmpNextCaseRow = tmpNextCaseRow + 1
                If Range("B" & tmpNextCaseRow + 1).Interior.ColorIndex = OffenceColour Then MsgBox "Error!  The next case has more than one offence so the result cannot be duplicated", vbCritical: Cancel = True: GoTo Finish
                If Range("B" & tmpLastRow + 5).Interior.ColorIndex = OffenceColour And Range("B" & tmpLastRow + 5) <> "" Then
                    If MsgBox("The result will be duplicated on the next case for " & Range("B" & tmpLastRow + 5) & ".  Continue?", vbYesNo) = vbNo Then Cancel = True: GoTo Finish
                    Else
                    If MsgBox("The result will be duplicated on the next case for " & Range("B" & tmpLastRow + 4) & ".  Continue?", vbYesNo) = vbNo Then Cancel = True: GoTo Finish
                    End If
                Range(ActionColumn & tmpRow & ":" & ValidationColumn & tmpRow).Copy Destination:=Range(ActionColumn & tmpNextCaseRow)
                Range("D" & tmpNextCaseRow) = Range("D" & tmpRow) ' Duplicate Appears
                Range("E" & tmpNextCaseRow) = Range("E" & tmpRow) ' Duplicate LAP
                Range(AdjCourtColumn & tmpNextCaseRow) = Range(AdjCourtColumn & tmpRow) ' Duplicate any adj court
                Range(ButtonColumn & tmpNextCaseRow - 1).Select
                If Range(PleaColumn & tmpNextCaseRow) = "" Then
                    If Range(PleaColumn & tmpRow) <> "" Then
                        If InStr(Range(PleaColumn & tmpRow), "(") > 0 Then
                            Range(PleaColumn & tmpNextCaseRow) = Left(Range(PleaColumn & tmpRow), InStr(Range(PleaColumn & tmpRow), "(") - 2)
                            Else
                            Range(PleaColumn & tmpNextCaseRow) = Range(PleaColumn & tmpRow)
                            End If
                        End If
                    End If
                ' Validation after result
                Call ValidateRow(tmpDefRow)
                Call ValidateCounters
                Cancel = True: GoTo Finish
                End If
            ' Duplicate the result on other offences in the same case
            tmpRowToDuplicate = Val(InputBox("Please choose the results offence number to duplicate (1-" & (tmpLastRow - tmpRow) + 1 & ")"))
            If tmpRowToDuplicate < 1 Or tmpRowToDuplicate > (tmpLastRow - tmpRow) + 1 Then MsgBox "Error!  The offence number you chose does not exist", vbCritical: Cancel = True: GoTo Finish
            For tmpCount = 1 To (tmpLastRow - tmpRow) + 1
                If tmpCount <> tmpRowToDuplicate Then
                    Range(ActionColumn & (tmpRow - 1) + tmpRowToDuplicate & ":" & ValidationColumn & (tmpRow - 1) + tmpRowToDuplicate).Copy Destination:=Range(ActionColumn & (tmpRow - 1) + tmpCount)
                    Range("L" & (tmpRow - 1) + tmpCount & ":N" & (tmpRow - 1) + tmpCount) = ""
                    If Range(PleaColumn & (tmpRow - 1) + tmpCount) = "" Then Range(PleaColumn & (tmpRow - 1) + tmpCount) = Range(PleaColumn & (tmpRow - 1) + tmpRowToDuplicate)
                    Range("D" & (tmpRow - 1) + tmpCount) = Range("D" & (tmpRow - 1) + tmpRowToDuplicate) ' Duplicate Appears
                    Range("E" & (tmpRow - 1) + tmpCount) = Range("E" & (tmpRow - 1) + tmpRowToDuplicate) ' Duplicate LAP
                    Range(AdjCourtColumn & (tmpRow - 1) + tmpCount) = Range(AdjCourtColumn & (tmpRow - 1) + tmpRowToDuplicate) ' Duplicate any adj court
                    End If
            Next tmpCount
            ' Validation after result
            Call ValidateRow(tmpOriginalDefRow)
            Call ValidateCounters
            Call RebuildQuickFind
            Cancel = True: GoTo Finish
            End If
        End If
    
    ' Scan for bad result
    If ActiveCell.Address = "$K$12" Then
        If Len(Target) > 0 Then
            tmpFirstpass = False
            Do
                Do
                    tmpScrollRow = tmpScrollRow + 1
                    If Range(ValidationColumn & tmpScrollRow) = "X" And Range(ValidationColumn & tmpScrollRow).Interior.ColorIndex = BadColour Then
                        ActiveWindow.ScrollRow = tmpScrollRow - 1
                        Exit Do
                        End If
                Loop Until tmpScrollRow > Worksheets("Main").Cells(Worksheets("Main").Rows.Count, "B").End(xlUp).Row
                If tmpScrollRow > Worksheets("Main").Cells(Worksheets("Main").Rows.Count, "B").End(xlUp).Row And tmpFirstpass = True Then Exit Do
                If tmpScrollRow > Worksheets("Main").Cells(Worksheets("Main").Rows.Count, "B").End(xlUp).Row Then tmpScrollRow = 15: tmpFirstpass = True Else Exit Do
            Loop
            Range(PleaColumn & tmpScrollRow + 3).Select
            End If
        End If
Finish:
    On Error GoTo 0
    tmpDisableWorkSheetChange = False
    Call ProtectMe(True)
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    Dim tmpDefRow As Integer
    Dim tmpOffenceRow As Integer
    Dim tmpOffenceLastRow As Integer
    Dim tmpRow As Integer
    Dim tmpTarget As Variant
    Dim i As Integer
    Dim tmpPosition As Integer
    Dim tmpValidation As String
    Dim tmpLastActionRow As String
    Dim tmpAction As String
    Dim tmpIsTraffic As Boolean

    If tmpDisableWorkSheetChange = True Or tmpDisableAllChange = True Then Exit Sub
    
    tmpDisableWorkSheetChange = True
    
    If Len(Target.Address) > 8 Then Target = OldValue: GoTo WS_Abort
    
    If InStr(Worksheets("Main").txtProsecutorType, "Traffic") > 0 Then tmpIsTraffic = True
    
    ' Check if session time can be altered
    If Target.Address = "$C$7" And Len(Range("C4")) > 0 Then
        If Val(Range("J12")) + Val(Range("K12")) > 0 Then
            MsgBox "Error!  You can't change the session start time because you have assigned " & Val(Range("J12")) + Val(Range("K12")) & " cases below." & vbCrLf & "Please use the Add/Remove Cases button to un-allocate all the cases from this session/court room first, then change the session and use the Add/Remove Cases button to re-assign them to the new session time."
            Target = OldValue
            GoTo WS_Abort
            End If
        End If
    
    ' Check if the court room can be altered and that it is valid
    If Target.Address = "$C$8" Then
        If Len(Range("C4")) > 0 Then
            If Val(Range("J12")) + Val(Range("K12")) > 0 And OldValue <> "" Then
                MsgBox "Error!  You can't change the court room because you have assigned " & Val(Range("J12")) + Val(Range("K12")) & " cases to it below." & vbCrLf & "Please use the Add/Remove Cases button to un-allocate all the cases from this session/court room first, then change the session and use the Add/Remove Cases button to re-assign them to the court room."
                Target = OldValue
                GoTo WS_Abort
                End If
            End If
        If Range("C8").NumberFormat <> "00" Then
            Call ProtectMe(False)
            Range("C8").NumberFormat = "00"
            Call ProtectMe(True)
            End If
        If Len(Range("C8")) > 2 Then
            Call ProtectMe(False)
            Range("C8").NumberFormat = xlGeneral
            Call ProtectMe(True)
            MsgBox "Error!  The court room must be a number from 1-99, you can't put anything in longer than 2 characters."
            Target = OldValue
            GoTo WS_Abort
            End If
        If Len(Range("C8")) > 0 Then
            If Val(Range("C8")) <> 75 And Val(Range("C8")) <> 76 And Val(Range("C8")) <> 77 And txtProsecutorType <> "TV" And txtProsecutorType <> "DVLA" And txtProsecutorType <> "Traffic" And txtProsecutorType <> "Pre Charge Bail" And txtProsecutorType <> "Transport Authority" And txtProsecutorType <> "Proceeds Of Crime Act" And txtProsecutorType <> "" Then
                MsgBox "Error!  The court room must be either 75, 76 or 77 when an SJP prosecutor type is chosen."
                Target = OldValue
                GoTo WS_Abort
                End If
            If Val(Range("C8")) <> 85 And Val(Range("C8")) <> 86 And txtProsecutorType = "Pre Charge Bail" And txtProsecutorType <> "" Then
                MsgBox "Error!  The court room must be either 85 or 86 when Pre Charge Bail is chosen."
                Target = OldValue
                GoTo WS_Abort
                End If
            If (Val(Range("C8")) >= 75 And Val(Range("C8")) <= 77) And txtProsecutorType = "Traffic" Then
                MsgBox "Error!  The court room cannot be 75, 76 or 77 when prosecutor type is set to 'Traffic', please choose 'Traffic (SJP)'"
                Target = OldValue
                GoTo WS_Abort
                End If
            End If
        End If

    ' Validate the session times
    If Target.Address = "$C$7" Or Target.Address = "$C$9" Then
        If Len(Target.Text) <> 5 Or Mid(Target.Text, 3, 1) <> ":" Or Val(Left(Target.Text, 2)) < 7 Then
            MsgBox "Error!  Invalid session time, please use HH:MM format and ensure the time is after 7am"
            Target = ""
            tmpDisableWorkSheetChange = False
            Target.Select
            Exit Sub
            End If
        End If
    
    If Target.Row < 15 Then GoTo WS_Abort
    
    ' If Amending Defendant Information then just quit
    If Range("B" & Target.Row - 2) = "Defendant" Then Exit Sub
    
    ' If amending driver info then abort and restore
    If Left(Target.Address, 2) = "$U" And Range("U" & Target.Row).Interior.ColorIndex = OffenceHeaderColour Then Target = OldValue: GoTo WS_Abort
    
    ' If amending correspondence then abort and restore
    If Left(Target.Address, 2) = "$O" And Range("O" & Target.Row).Interior.ColorIndex = OffenceHeaderColour Then Target = OldValue: GoTo WS_Abort
    
    ' If amending original offence then abort and restore
    If Left(Target.Address, 2) = "$B" And Range(OriginalOffenceColumn & Target.Row) = "Y" Then Target = OldValue: GoTo WS_Abort
    
    ' Check for button change
    If Left(Target.Address, 2) = "$" & ButtonColumn Or Left(Target.Address, 2) = "$" & ButtonColumn2 Then Target = OldValue: GoTo WS_Abort
    
    ' Validate the offence and add a number to the beginning
    If Left(Target.Address, 2) = "$B" And Range(OriginalOffenceColumn & Target.Row) <> "Y" And Range(ButtonColumn & Target.Row) <> "Delete Amendment" Then
        tmpTarget = Target
        For i = 1 To Len(tmpTarget)
            If Asc(Mid(tmpTarget, i, 1)) >= 65 And Asc(Mid(tmpTarget, i, 1)) <= 90 Or Asc(Mid(tmpTarget, i, 1)) >= 97 And Asc(Mid(tmpTarget, i, 1)) <= 122 Then tmpPosition = i: Exit For
        Next i
        If tmpPosition = 0 Then
            Target = ""
            Else
            tmpTarget = Mid(LCase(tmpTarget), tmpPosition)
            tmpTarget = UCase(Left(tmpTarget, 1)) & Mid(tmpTarget, 2)
            tmpRow = Target.Row
            tmpTarget = Trim(Val(Left(Range("B" & tmpRow - 1), 5)) + 1) & ": " & tmpTarget
            Target = tmpTarget
            End If
        GoTo WS_End
        End If
    
    ' Check for empty offence
    If Range("B" & Target.Row - 2).Interior.ColorIndex <> DefendantHeaderColour And Len(Range("B" & Target.Row)) = 0 Then
        MsgBox "Error!  You must enter an offence name before you can enter a result.", vbCritical
        Target = ""
        Range("B" & Target.Row).Select
        GoTo WS_End
        End If
    
    'Validate Appears
    If Left(Target.Address, 2) = "$D" Then
        tmpTarget = Target
        If Len(tmpTarget) = 0 Then GoTo WS_End
        tmpTarget = UCase(tmpTarget)
        If tmpTarget <> "Y" And tmpTarget <> "N" Then MsgBox "Error!  Appears Must be Y or N", vbCritical: Target = "": Range(Target.Address).Select: GoTo WS_End
        If tmpTarget <> Target Then Target = tmpTarget
        If tmpTarget = "Y" And Range(PleaColumn & Target.Row) = "Guilty MCA" Then Range(PleaColumn & Target.Row) = ""
        tmpRow = Target.Row
        Do While Range("B" & tmpRow).Interior.ColorIndex = OffenceColour
            tmpRow = tmpRow - 1
        Loop
        tmpRow = tmpRow + 1
        Do While Range("B" & tmpRow).Interior.ColorIndex = OffenceColour
            Range("D" & tmpRow) = tmpTarget
            tmpRow = tmpRow + 1
        Loop
        GoTo WS_End
        End If
    
    'Validate LAP or IP if POCA
    If Left(Target.Address, 2) = "$E" Then
        tmpTarget = Target
        If Len(tmpTarget) = 0 Then GoTo WS_End
        tmpTarget = UCase(tmpTarget)
        If tmpTarget <> "Y" And tmpTarget <> "N" Then
            If txtProsecutorType <> "Proceeds Of Crime Act" Then
                MsgBox "Error!  Legal Adviser Powers must be Y or N", vbCritical
                Else
                MsgBox "Error!  Interested Parties must be Y or N", vbCritical
                End If
            Target = ""
            'Range(Target.Address).Select
            Else
            Call ProtectMe(False)
            If tmpTarget <> "Y" Then
                Range(PleaColumn & Target.Row) = ""
                Range(PleaColumn & Target.Row).Locked = True
                Else
                Range(PleaColumn & Target.Row).Locked = False
                If txtProsecutorType = "Proceeds Of Crime Act" Then frmIP.Show
                'Range(PleaColumn & Target.Row).Select
                End If
            
            Call ProtectMe(True)
            'GoTo WS_End
            End If
        If tmpTarget <> Target Then Target = tmpTarget
        tmpRow = Target.Row
        Do While Range("B" & tmpRow).Interior.ColorIndex = OffenceColour
            tmpRow = tmpRow - 1
        Loop
        tmpRow = tmpRow + 1
        Do While Range("B" & tmpRow).Interior.ColorIndex = OffenceColour
            Range("E" & tmpRow) = tmpTarget
            tmpRow = tmpRow + 1
        Loop
        GoTo WS_End
        End If
        
    ' Validate Action
    If Left(Target.Address, 2) = "$" & ActionColumn And Range(Left(Target.Address, 2) & "$" & Target.Row - 2) <> "URN" Then
        ' Unlock any cells on the offence
        Call ProtectMe(False)
        tmpDisableWorkSheetChange = True
        If Target = "Fine" Or Target = "Proved In Absence" Or Target = "Proved In Abs (SJP)" Then
            Range("Q" & Target.Row & ":T" & Target.Row) = ""
            Else
            Range("I" & Target.Row & ":T" & Target.Row) = ""
            End If
        If InStr(ActionColumn & Target.Row, "Adjourned") = 0 Then Range(AdjCourtColumn & Target.Row) = "" ' remove any adj court
        Range(GuiltyCreditColumn & Target.Row & ":T" & Target.Row).Locked = False
        Range(GuiltyCreditColumn & Target.Row) = ""
        If Range("H" & Target.Row) <> "" Then
            If Target <> "Fine" Then Range("H" & Target.Row) = ""
            End If
        
        If Target <> "Not Completed" Then
            Range("U" & Target.Row & ":V" & Target.Row).Locked = False
            If Range("U" & Target.Row) = "Not completed in time, please reschedule" Then Range("U" & Target.Row) = ""
            End If
        
        If InStr(Range(PleaColumn & Target.Row), "(") = 0 And txtProsecutorType <> "Proceeds Of Crime Act" Then Range(PleaColumn & Target.Row).Locked = False
        ' Get the first defendant row, first and last offence rows
        tmpDefRow = Target.Row
        Do
            If Range("B" & tmpDefRow) = "Offence" Or (txtProsecutorType = "Proceeds Of Crime Act" And Range("B" & tmpDefRow) = "Application") Then tmpOffenceRow = tmpDefRow + 1
            tmpDefRow = tmpDefRow - 1
        Loop Until Range("B" & tmpDefRow) = "Defendant" Or tmpDefRow < 15
        tmpOffenceLastRow = tmpOffenceRow
        Do
            If Len(Range("B" & tmpOffenceLastRow + 1)) = 0 Then Exit Do
            tmpOffenceLastRow = tmpOffenceLastRow + 1
        Loop
        ' Unlock the Appears Field
        Range("D" & tmpOffenceRow & ":" & "D" & tmpOffenceLastRow).Locked = False
        
        Select Case Target
        
        Case "Adjourned for Court Hearing", "Adjourned PIA", "Adjourned (SJP)", "Adjourned PIA (SJP)"
            If txtProsecutorType <> "Proceeds Of Crime Act" Then
                Range(FineColumn & Target.Row & ":N" & Target.Row).UnMerge
                Range(FineColumn & Target.Row & ":N" & Target.Row).Borders.LineStyle = xlContinuous
                Range(GuiltyCreditColumn & Target.Row & ":" & "Q" & Target.Row).Locked = True
                Range("T" & Target.Row).Locked = True
                tmpLastActionRow = FindAdjAction(Target.Row)
                If tmpLastActionRow > 0 Then
                    Range("R" & Target.Row) = Range("R" & tmpLastActionRow)
                    Range("S" & Target.Row) = Range("S" & tmpLastActionRow)
                    Range("U" & Target.Row) = Range("U" & tmpLastActionRow)
                    Range(AdjCourtColumn & Target.Row) = Range(AdjCourtColumn & tmpLastActionRow)
                    End If
                Range("R" & Target.Row).Select
                Else
                Range(GuiltyCreditColumn & Target.Row & ":" & "P" & Target.Row).Locked = True
                Range("T" & Target.Row).Locked = True
                tmpLastActionRow = FindAdjAction(Target.Row)
                If tmpLastActionRow > 0 Then
                    Range("R" & Target.Row) = Range("R" & tmpLastActionRow)
                    Range("S" & Target.Row) = Range("S" & tmpLastActionRow)
                    Range("U" & Target.Row) = Range("U" & tmpLastActionRow)
                    Range(AdjCourtColumn & Target.Row) = Range(AdjCourtColumn & tmpLastActionRow)
                    End If
                Range("P" & Target.Row).Select
                End If

        Case "Fine"
            Range("R" & Target.Row & ":" & "S" & Target.Row).Locked = True
            If Left(Range(PleaColumn & Target.Row), 6) = "Guilty" Then Range(GuiltyCreditColumn & Target.Row) = "Y" Else Range(GuiltyCreditColumn & Target.Row) = "N"
            If Left(txtProsecutorType, 7) = "Traffic" Then Range("T" & Target.Row) = "N" Else Range("T" & Target.Row).Locked = True ' Disq
            If tmpIsTraffic = False Then Range("O" & Target.Row) = "None"
            Range("R" & Target.Row & ":S" & Target.Row).Locked = True ' Lock Adjournment
            If Len(Range("H" & Target.Row)) = 0 Then
                Range("H" & Target.Row).Select
                Else
                Range("I" & Target.Row).Select
                End If
                
        Case "NEO Dismissed"
            Range(FineColumn & Target.Row & ":N" & Target.Row).UnMerge
            Range(FineColumn & Target.Row & ":N" & Target.Row).Borders.LineStyle = xlContinuous
            If Left(Range(PleaColumn & Target.Row), 10) <> "Not Guilty" Then
                MsgBox "Error!  You cannot set the action to NEO Dismissed when the plea is Guilty or No Plea", vbCritical
                Range(ActionColumn & Target.Row) = ""
                Else
                Range(GuiltyCreditColumn & Target.Row & ":" & ValidationColumn & Target.Row) = ""
                Range(GuiltyCreditColumn & Target.Row & ":" & ValidationColumn & Target.Row).Locked = True
                End If
            Range(ButtonColumn & Target.Row).Select
        
        Case "Not Completed"
            Range(FineColumn & Target.Row & ":N" & Target.Row).UnMerge
            Range(FineColumn & Target.Row & ":N" & Target.Row).Borders.LineStyle = xlContinuous
            Range(GuiltyCreditColumn & Target.Row & ":" & ValidationColumn & Target.Row).Locked = True
            Range("D" & Target.Row) = "N"
            Range("D" & Target.Row).Locked = True
            Range("U" & Target.Row) = "Not completed in time, please reschedule"
            If InStr(Range(PleaColumn & Target.Row), "(") = 0 Then
                Range(PleaColumn & Target.Row) = ""
                Range(PleaColumn & Target.Row).Locked = True
                End If
            Range(ButtonColumn & Target.Row).Select
        
        Case "Proved In Absence", "Proved In Abs (SJP)"
            Range("R" & Target.Row & ":" & "S" & Target.Row).Locked = True
            Range(GuiltyCreditColumn & Target.Row) = "N" ' GP Cr
            
            If Range(PleaColumn & Target.Row) = "" Then Range(PleaColumn & Target.Row) = "No Plea"
            Range(IncomeColumn & Target.Row) = Range("S3") 'Income
            Range(GuiltyCreditColumn & Target.Row).Locked = True
            If tmpIsTraffic = False Then Range("O" & Target.Row) = "None"
            Range(BandColumn & Target.Row).Select
            
            Range("D" & tmpOffenceRow & ":D" & tmpOffenceLastRow) = "N" ' Apps
            Range("D" & tmpOffenceRow & ":D" & tmpOffenceLastRow).Locked = True ' Apps
            Range("R" & Target.Row & ":S" & Target.Row).Locked = True ' Lock Adjournment
            ' Count forward through the offences
            tmpRow = tmpOffenceRow
            Do While Range("B" & tmpRow).Interior.ColorIndex = OffenceColour
                If Range(ActionColumn & tmpRow) = "" Then
                    Range(ActionColumn & tmpRow) = Target
                    Range(GuiltyCreditColumn & tmpRow) = "N"
                    Range(IncomeColumn & tmpRow) = Range("S3")
                    If Left(txtProsecutorType, 7) = "Traffic" Then Range("T" & tmpRow) = "N" Else Range("T" & tmpRow).Locked = True
                    End If
                If Range(PleaColumn & tmpRow) = "" Then Range(PleaColumn & tmpRow) = Range(PleaColumn & Target.Row)
                tmpRow = tmpRow + 1
            Loop
            If Left(txtProsecutorType, 7) = "Traffic" Then Range("T" & Target.Row) = "N" Else Range("T" & Target.Row).Locked = True ' Disq
            
        Case "Dismissed", "Withdrawn", "Entered In Error"
            If txtProsecutorType <> "Proceeds Of Crime Act" Then
                Range(FineColumn & Target.Row & ":N" & Target.Row).UnMerge
                Range(FineColumn & Target.Row & ":N" & Target.Row).Borders.LineStyle = xlContinuous
                End If
            Range(GuiltyCreditColumn & Target.Row & ":T" & Target.Row).Locked = True
            Range("U" & Target.Row).Select
            txtChoiceBox.Visible = False
            
        Case "Did Not Appear"
            Range(FineColumn & Target.Row & ":N" & Target.Row).UnMerge
            Range(FineColumn & Target.Row & ":N" & Target.Row).Borders.LineStyle = xlContinuous
            Range(GuiltyCreditColumn & Target.Row & ":T" & Target.Row).Locked = True
            Range("U" & Target.Row).Select
            txtChoiceBox.Visible = False
            Range("D" & tmpDefRow + 1) = "N"

        Case "Granted"
            If txtProsecutorType <> "Proceeds Of Crime Act" Then
                Range(FineColumn & Target.Row & ":N" & Target.Row).UnMerge
                Range(FineColumn & Target.Row & ":N" & Target.Row).Borders.LineStyle = xlContinuous
                Range(GuiltyCreditColumn & Target.Row & ":T" & Target.Row).Locked = True
                Range("U" & Target.Row).Select
                txtChoiceBox.Visible = False
                If InStr(Range("B" & Target.Row), "PL84506") = 0 And InStr(Range("B" & Target.Row), "RR88503") = 0 And InStr(Range("B" & Target.Row), "RR88504") = 0 Then
                    AddOffenceOnly = True
                    frmOffenceChanges.Show
                    End If
                Else
                Range("H" & Target.Row & ":J" & Target.Row).Locked = True
                Range("O" & Target.Row & ":T" & Target.Row).Locked = True
                Range("K" & Target.Row).Select
                End If

        Case "Refused"
            If txtProsecutorType <> "Proceeds Of Crime Act" Then
                Range(FineColumn & Target.Row & ":N" & Target.Row).UnMerge
                Range(FineColumn & Target.Row & ":N" & Target.Row).Borders.LineStyle = xlContinuous
                End If
            Range(GuiltyCreditColumn & Target.Row & ":T" & Target.Row).Locked = True
            Range("U" & Target.Row).Select
            txtChoiceBox.Visible = False
            
        Case "Absolute Discharge"
            Range(FineColumn & Target.Row & ":N" & Target.Row).UnMerge
            Range(FineColumn & Target.Row & ":N" & Target.Row).Borders.LineStyle = xlContinuous
            Range(GuiltyCreditColumn & Target.Row & ":" & FineColumn & Target.Row).Locked = True
            Range(VSColumn & Target.Row & ":T" & Target.Row).Locked = True
            Range(CompColumn & Target.Row) = "0.00"
            Range(FCOSTSColumn & Target.Row) = "0.00"
            If tmpIsTraffic = False Then Range("O" & Target.Row) = "None"
            Range("U" & Target.Row).Select
            txtChoiceBox.Visible = False
            GoTo WS_End
            
        Case "Conditional Discharge", "PIA Conditional Discharge"
            tmpRow = Target.Row
            Range(FineColumn & Target.Row & ":N" & Target.Row).UnMerge
            Range(FineColumn & Target.Row & ":N" & Target.Row).Borders.LineStyle = xlContinuous
            Range(IncomeColumn & Target.Row & ":" & FineColumn & Target.Row).Locked = True
            Range("Q" & Target.Row & ":" & "T" & Target.Row).Locked = True
            If Left(Range(PleaColumn & Target.Row), 6) = "Guilty" Then Range(GuiltyCreditColumn & Target.Row) = "Y" Else Range(GuiltyCreditColumn & Target.Row) = "N"
            Range("P" & Target.Row) = "Y"
            If tmpIsTraffic = False Then Range("O" & Target.Row) = "None"
            If Val(Range(FCOSTSColumn & tmpRow)) = 0 Then Range(FCOSTSColumn & tmpRow) = FindDefaultCost(tmpRow)    'Range(FCOSTSColumn & tmpRow) = Worksheets("Splash").Range("A" & FindCaseTypeRow(Range("B" & tmpRow))) ' Costs
            Call CalculateVS(tmpRow, 0, True)
            DisqRow = tmpRow
            frmConditionalDischarge.Show
            Range("U" & Target.Row).Select
            txtChoiceBox.Visible = False
            GoTo WS_End
        
        Case "Extension Granted"
            Range("I" & Target.Row & ":L" & Target.Row).Locked = True
            Range("P" & Target.Row & ":S" & Target.Row).Locked = True
            Range("M" & Target.Row).Select
            txtChoiceBox.Visible = False
            GoTo WS_End
        
        Case "Further Extension Granted"
            Range("I" & Target.Row & ":M" & Target.Row).Locked = True
            Range("P" & Target.Row & ":S" & Target.Row).Locked = True
            Range("N" & Target.Row).Select
            txtChoiceBox.Visible = False
            GoTo WS_End
        
        Case "Extension Refused"
            Range("I" & Target.Row & ":S" & Target.Row).Locked = True
            Range("U" & Target.Row).Select
            txtChoiceBox.Visible = False
            GoTo WS_End
        
        Case "Referred To Court"
            Range("I" & Target.Row & ":R" & Target.Row).Locked = True
            Range("S" & Target.Row).Select
            txtChoiceBox.Visible = False
            GoTo WS_End
        
        Case "Referred To Court [With Date]"
            Range("I" & Target.Row & ":O" & Target.Row).Locked = True
            Range("P" & Target.Row & ":Q" & Target.Row).Locked = True
            Range("R" & Target.Row).Select
            txtChoiceBox.Visible = False
            GoTo WS_End
        
        Case Else
            If Len(Range(ActionColumn & Target.Row)) > 0 Then
                MsgBox "Error!  You must choose a valid action", vbCritical
                Range(ActionColumn & Target.Row) = ""
                Range(ActionColumn & Target.Row).Select
                tmpKeepChoice = True
                End If
        
        End Select
        tmpDisableWorkSheetChange = True
        Call UpdateFigures(Target.Row, Mid(Target.Address, 2, 1))
        tmpDisableWorkSheetChange = False
        GoTo WS_End
        End If
        
    'Validate Plea
    If Left(Target.Address, 2) = "$" & PleaColumn And Range(Left(Target.Address, 2) & "$" & Target.Row - 2) <> "URN" Then
        ' Unlock any cells on the offence
        Call ProtectMe(False)
        Select Case Left(Target, 6)
        
        Case "No Ple"
            If Range(GuiltyCreditColumn & Target.Row).Locked = False Or Range(GuiltyCreditColumn & Target.Row) <> "N" Then
                Range(GuiltyCreditColumn & Target.Row) = "N"
                Range(GuiltyCreditColumn & Target.Row).Locked = True
                End If
            Range(ActionColumn & Target.Row).Select
        
        Case "Not Gu"
            If Range(GuiltyCreditColumn & Target.Row).Locked = False Or Range(GuiltyCreditColumn & Target.Row) <> "N" Then
                Range(GuiltyCreditColumn & Target.Row) = "N"
                Range(GuiltyCreditColumn & Target.Row).Locked = True
                End If
            Range(ActionColumn & Target.Row).Select
        
        Case "Guilty"
            If Range(GuiltyCreditColumn & Target.Row).Locked = False Or Range(GuiltyCreditColumn & Target.Row) <> "Y" Then
                Range(GuiltyCreditColumn & Target.Row) = "Y"
                Range(GuiltyCreditColumn & Target.Row).Locked = True
                End If
            Range(ActionColumn & Target.Row).Select
        
        Case "Found ", "Plea C"
            If Worksheets("Main").txtProsecutorType <> "DVLA" Then
                MsgBox "Error!  You must choose a valid plea", vbCritical
                Range(PleaColumn & Target.Row) = ""
                Range(PleaColumn & Target.Row).Select
                tmpKeepChoice = True
                GoTo WS_End
                End If
            If Target = "Found Guilty" Then
                Range(GuiltyCreditColumn & Target.Row) = "N"
                Range(GuiltyCreditColumn & Target.Row).Locked = True
                End If
            Range(ActionColumn & Target.Row).Select
            
        Case Else
            If Target <> "" And Target = Range(OriginalPleaColumn & Target.Row) Then
                If Left(Range(OriginalPleaColumn & Target.Row), 6) = "PIA On" Then
                    If Range(GuiltyCreditColumn & Target.Row).Locked = False Or Range(GuiltyCreditColumn & Target.Row) <> "N" Then
                        Range(GuiltyCreditColumn & Target.Row) = "N"
                        Range(GuiltyCreditColumn & Target.Row).Locked = True
                        End If
                    End If
                If Left(Range(OriginalPleaColumn & Target.Row), 6) = "Guilty" Then
                    If Range(GuiltyCreditColumn & Target.Row).Locked = False Or Range(GuiltyCreditColumn & Target.Row) <> "Y" Then
                        Range(GuiltyCreditColumn & Target.Row) = "Y"
                        Range(GuiltyCreditColumn & Target.Row).Locked = True
                        End If
                    End If
                Range(ActionColumn & Target.Row).Select
                Else
                If Len(Range(PleaColumn & Target.Row)) > 0 And txtProsecutorType <> "Proceeds Of Crime Act" Then
                    MsgBox "Error!  You must choose a valid plea", vbCritical
                    Range(PleaColumn & Target.Row) = ""
                    Range(PleaColumn & Target.Row).Select
                    tmpKeepChoice = True
                    End If
                End If
            
        End Select
        GoTo WS_End
        End If
    'Validate GP Credit
    If Left(Target.Address, 2) = "$" & GuiltyCreditColumn And txtProsecutorType <> "Proceeds Of Crime Act" Then
        If Range(Left(Target.Address, 2) & "$" & Target.Row - 2) <> "Address" Then
            tmpTarget = Target
            If Len(tmpTarget) = 0 Then GoTo WS_End
            tmpTarget = UCase(tmpTarget)
            If tmpTarget <> "Y" And tmpTarget <> "N" Then MsgBox "Error!  Guilty Plea Credit must be Y or N", vbCritical: Target = "": Range(Target.Address).Select: GoTo WS_End
            If tmpTarget <> Target Then Target = tmpTarget
            tmpDisableWorkSheetChange = True
            Call UpdateFigures(Target.Row, Mid(Target.Address, 2, 1))
            If Range(ActionColumn & Target.Row) = "Conditional Discharge" Then
                If Val(Range(FCOSTSColumn & Target.Row)) = 0 Then Range(FCOSTSColumn & Target.Row) = FindDefaultCost(Target.Row)
                Call CalculateVS(Target.Row, 0, True)
                End If
            tmpDisableWorkSheetChange = False
            End If
        GoTo WS_End
        End If
    ' Validate Income
    If Left(Target.Address, 2) = "$" & IncomeColumn Then
        If Range(Left(Target.Address, 2) & "$" & Target.Row - 2) <> "Address" Then
            tmpRow = Target.Row
            tmpTarget = Target
            Do While Range("B" & tmpRow).Interior.ColorIndex = OffenceColour
                tmpRow = tmpRow - 1
            Loop
            tmpRow = tmpRow + 1
            tmpDisableWorkSheetChange = True
            Do While Range("B" & tmpRow).Interior.ColorIndex = OffenceColour
                If Range(IncomeColumn & tmpRow).Locked = False Then Range(IncomeColumn & tmpRow) = tmpTarget
                tmpRow = tmpRow + 1
            Loop
            tmpDisableWorkSheetChange = True
            Call UpdateFigures(Target.Row, Mid(Target.Address, 2, 1))
            tmpDisableWorkSheetChange = False
            End If
        GoTo WS_End
        End If
    ' Validate Band
    If Left(Target.Address, 2) = "$" & BandColumn Then
        If Range(Left(Target.Address, 2) & "$" & Target.Row - 2) <> "Address" Then
            tmpTarget = Target
            If Len(tmpTarget) = 0 Then GoTo WS_End
            tmpTarget = UCase(tmpTarget)
            If tmpTarget <> "A" And tmpTarget <> "B" And tmpTarget <> "C" Then MsgBox "Error!  Band must be A,B or C", vbCritical: Target = "": Range(Target.Address).Select: GoTo WS_End
            If tmpTarget <> Target Then Target = tmpTarget
            tmpDisableWorkSheetChange = True
            Call UpdateFigures(Target.Row, Mid(Target.Address, 2, 1))
            tmpDisableWorkSheetChange = False
            End If
        GoTo WS_End
        End If
    ' Validate Fine
    If Left(Target.Address, 2) = "$" & FineColumn And txtProsecutorType <> "Proceeds Of Crime Act" Then
        tmpTarget = Target
        Call ProtectMe(False)
        If UCase(tmpTarget) = "NSP" Then
            On Error Resume Next
            Range(FineColumn & Target.Row & ":N" & Target.Row).ClearComments
            On Error GoTo 0
            Range(FineColumn & Target.Row & ":N" & Target.Row) = ""
            Range(FineColumn & Target.Row & ":N" & Target.Row).Merge
            Range("P" & Target.Row & ":" & "Q" & Target.Row) = ""
            Range("P" & Target.Row & ":" & "Q" & Target.Row).Locked = True
            Range("O" & Target.Row).Select
            Target = "No Separate Penalty"
            Range(GuiltyCreditColumn & Target.Row & ":" & "I" & Target.Row) = ""
            Range(GuiltyCreditColumn & Target.Row & ":" & "I" & Target.Row).Locked = True
            Else
            Range(FineColumn & Target.Row & ":N" & Target.Row).UnMerge
            Range(FineColumn & Target.Row & ":N" & Target.Row).Borders.LineStyle = xlContinuous
            Range("P" & Target.Row & ":" & "Q" & Target.Row) = ""
            Range(GuiltyCreditColumn & Target.Row & ":" & "Q" & Target.Row).Locked = False
            If Val(tmpTarget) = 0 Then Target = ""
            End If
        tmpDisableWorkSheetChange = True
        Call UpdateFigures(Target.Row, Mid(Target.Address, 2, 1))
        tmpDisableWorkSheetChange = False
        GoTo WS_End
        End If
    ' Validate New Bail Period
    If Left(Target.Address, 2) = "$N" And txtProsecutorType = "Pre Charge Bail" And Target <> "" Then
        If Val(Target) <> 3 And Val(Target) <> 6 And Val(Target) <> 9 And Val(Target) <> 12 Then
            MsgBox "Error!  Bail Period can only be 3,6,9 or 12 months"
            Target = ""
            Else
            Range("O" & Target.Row) = Format(DateAdd("m", Val(Target), CDate(Range("C6"))), "dd/mm/yyyy")
            Target = Val(Target) & " Months"
            End If
        GoTo WS_End
        End If
    
    ' Validate Points
    If Left(Target.Address, 2) = "$O" Then
        ' Check for non traffic offence
        If txtProsecutorType <> "Traffic" And txtProsecutorType <> "Traffic (SJP)" And txtProsecutorType <> "Pre Charge Bail" Then
            tmpTarget = Target
            If Len(tmpTarget) = 0 Then GoTo WS_End
            If UCase(tmpTarget) = "AEO" Then
                Target = "Attachment of Earnings"
                DisqRow = Target.Row
                frmReserveTerms.Show
                End If
            If UCase(tmpTarget) = "DBO" Then
                Target = "Deduction of Benefits"
                DisqRow = Target.Row
                frmReserveTerms.Show
                End If
            If UCase(tmpTarget) = "TTP" Then
                Target = "Time To Pay"
                DisqRow = Target.Row
                frmReserveTerms.Show
                End If
            If UCase(tmpTarget) = "NONE" Or UCase(tmpTarget) = "NON" Or UCase(tmpTarget) = "NO" Then
                Target = "None"
                End If
                
            If UCase(tmpTarget) <> "TTP" And UCase(tmpTarget) <> "AEO" And UCase(tmpTarget) <> "DBO" And UCase(tmpTarget) <> "NONE" And UCase(tmpTarget) <> "NON" And UCase(tmpTarget) <> "NO" Then MsgBox "Error!  Valid options are AEO/DBO/TTP or None", vbCritical: Target = "": Range(Target.Address).Select
            'If Range(ActionColumn & Target.Row) = "Fine" Or Range(ActionColumn & Target.Row) = "Proved In Absence" Then
                'If UCase(tmpTarget) = "NONE" Or UCase(tmpTarget) = "NON" Or UCase(tmpTarget) = "NO" Then MsgBox "Error!  Valid options are AEO/DBO/TTP, cannot be None when Fine or Proved In Absence", vbCritical: Target = "": Range(Target.Address).Select
                'End If
            GoTo WS_End
            End If
        If txtProsecutorType = "Traffic" Or txtProsecutorType = "Traffic (SJP)" Then
            ' Normal Traffic Process
            tmpTarget = Target
            If Len(tmpTarget) = 0 Then GoTo WS_End
            If UCase(tmpTarget) = "LE" Then
                Target = "Licence Endorsed"
                tmpTarget = Target
                End If
            If UCase(tmpTarget) = "NE" Then
                Target = "Licence Not Endorsed"
                tmpTarget = Target
                End If
            If tmpTarget <> "Licence Endorsed" And tmpTarget <> "Licence Not Endorsed" Then
                If Val(tmpTarget) < 3 Or Val(tmpTarget) > 10 Then MsgBox "Error!  Penalty Points must be between 3 and 10 OR type 'LE' / 'Licence Endorsed' or type 'NE' 'Licence Not Endorsed'", vbCritical: Target = "": Range(Target.Address).Select: GoTo WS_End
                End If
            If tmpTarget <> Target Then Target = tmpTarget
            GoTo WS_End
            End If
        If txtProsecutorType = "Pre Charge Bail" Then
            tmpTarget = Target
            If Len(tmpTarget) = 0 Then GoTo WS_End
            If IsDate(tmpTarget) Then
                Call ProtectMe(False)
                Target.NumberFormatLocal = "@"
                Target.NumberFormatLocal = "dd/mm/yyyy"
                Call ProtectMe(True)
                End If
            GoTo WS_End
            End If
        End If
    'Validate COLLO
    If Left(Target.Address, 2) = "$P" Then
        tmpTarget = Target
        If Len(tmpTarget) = 0 Then GoTo WS_End
        tmpTarget = UCase(tmpTarget)
        If tmpTarget <> "Y" And tmpTarget <> "N" Then MsgBox "Error!  COLLO must be Y or N", vbCritical: Target = "": Range(Target.Address).Select: GoTo WS_End
        If tmpTarget <> Target Then Target = tmpTarget
        GoTo WS_End
        End If
    'Validate Directions - Proceeds Of Crime Act only
    If Left(Target.Address, 2) = "$Q" And txtProsecutorType = "Proceeds Of Crime Act" Then
        tmpTarget = Target
        If Len(tmpTarget) = 0 Then GoTo WS_End
        tmpTarget = UCase(tmpTarget)
        If tmpTarget <> "Y" And tmpTarget <> "N" Then MsgBox "Error!  Directions must be Y or N", vbCritical: Target = "": GoTo WS_End
        If tmpTarget <> Target Then Target = tmpTarget
        DisqRow = Target.Row
        If tmpTarget = "Y" Then frmDirections.Show
        GoTo WS_End
        End If
    'Validate Adjournment Reason
    If Left(Target.Address, 2) = "$R" Then
        Range("$S" & Target.Row).Select
        GoTo WS_End
        End If
    
    'Validate Adjournment Date
    If Left(Target.Address, 2) = "$S" Then
        If Target.Row < 15 Then GoTo WS_End
        tmpTarget = Target
        If Len(tmpTarget) = 0 And txtProsecutorType <> "Pre Charge Bail" Then
            Call ProtectMe(False)
            Range(GuiltyCreditColumn & Target.Row & ":Q" & Target.Row).Locked = False
            GoTo WS_End
            End If
        If Len(tmpTarget) = 0 And txtProsecutorType <> "Proceeds Of Crime Act" Then GoTo WS_End

        If InStr(LCase(Range(AdjReasonColumn & Target.Row)), "warrant issued") > 0 And LCase(tmpTarget) = "na" Or LCase(tmpTarget) = "n/a" Then
            tmpTarget = "N/A"
            Else
            If IsDate(tmpTarget) = False Or Len(Format(tmpTarget, "dd/mm/yyyy hh:mm")) <> 16 Then MsgBox "Error!  Invalid Adjournment Date.  The format must be 'dd/mm/yyyy hh:mm'", vbCritical: Target = "": Range(Target.Address).Select: GoTo WS_End
            tmpTarget = CStr(Format(tmpTarget, "dd/mm/yyyy hh:mm"))
            If CDate(tmpTarget) <= CDate(Range("C6")) Then MsgBox "Error!  Adjournment Date cannot be less than or equal to today", vbCritical: Target = "": Range(Target.Address).Select: GoTo WS_End
            If CDate(tmpTarget) > CDate(Range("C6")) + 365 Then MsgBox "Error!  Adjournment Date cannot be more than 1 year from the hearing date", vbCritical: Target = "": Range(Target.Address).Select: GoTo WS_End
            If Right(tmpTarget, 5) = "00:00" And Len(tmpTarget) = 16 Then tmpTarget = Left(tmpTarget, 11) & "10:00"
            End If
            
        pubAdjournDate = tmpTarget

        Select Case txtProsecutorType

        Case Is = "Pre Charge Bail"
            Call ProtectMe(False)
            frmSelectCourt.Show
            If tmpTarget <> Target Then Target = tmpTarget: GoTo WS_End

        Case Is = "Proceeds Of Crime Act"
            Call ProtectMe(False)
            frmSelectCourt.Show
            If tmpTarget <> Target Then Target = tmpTarget: GoTo WS_End
            
        Case Else

            Call ProtectMe(False)
            Range(GuiltyCreditColumn & Target.Row & ":Q" & Target.Row).Locked = False
            Range(GuiltyCreditColumn & Target.Row & ":Q" & Target.Row).UnMerge
            Range(GuiltyCreditColumn & Target.Row & ":Q" & Target.Row).Borders.LineStyle = xlContinuous
            Range(GuiltyCreditColumn & Target.Row & ":Q" & Target.Row).Value = ""
            Range(GuiltyCreditColumn & Target.Row & ":Q" & Target.Row).Locked = True
            If InStr(Range(ActionColumn & Target.Row), "Adjourned") = 0 Then Range(ActionColumn & Target.Row) = "Adjourned for Court Hearing"
            If Range(ActionColumn & Target.Row) <> "Adjourned (SJP)" And tmpTarget <> "N/A" Then
                If InStr(LCase(Range(AdjReasonColumn & Target.Row)), "notice to") = 0 Then frmSelectCourt.Show
                End If
            ' Duplicate the adjournment date on any other actions
            tmpOffenceRow = Target.Row
            tmpAction = Range(ActionColumn & tmpOffenceRow)
            Do
                If Range(AdjDateColumn & tmpOffenceRow - 1).Interior.ColorIndex = OffenceHeaderColour Or tmpOffenceRow - 1 < 15 Then Exit Do
                tmpOffenceRow = tmpOffenceRow - 1
            Loop
            Do
                If Range(ActionColumn & tmpOffenceRow) = tmpAction Then Range(AdjDateColumn & tmpOffenceRow) = tmpTarget
                tmpOffenceRow = tmpOffenceRow + 1
                If Range(AdjDateColumn & tmpOffenceRow).Interior.ColorIndex <> OffenceColour Then Exit Do
            Loop
            If Range("R" & Target.Row) = "" Then Range("R" & Target.Row).Select
            If tmpTarget <> Target Then Target = tmpTarget: GoTo WS_End
        End Select
        End If
        
    'Validate Disq
    If Left(Target.Address, 2) = "$T" Then
        tmpTarget = Target
        If Len(tmpTarget) = 0 Then GoTo WS_End
        tmpTarget = UCase(tmpTarget)
        If tmpTarget <> "Y" And tmpTarget <> "N" And tmpTarget <> "EH" Then MsgBox "Error!  Disqualified Must be Y, N or EH (Exceptional Hardship)", vbCritical: Target = "": Range(Target.Address).Select: GoTo WS_End
        If tmpTarget <> Target Then Target = tmpTarget
        If tmpTarget = "Y" Or tmpTarget = "EH" Then DisqRow = Target.Row: frmDisqualified.Show
        GoTo WS_End
        End If

    'Validate Note when adjourning
    If Left(Target.Address, 2) = "$U" And InStr(Range(ActionColumn & Target.Row), "Adjourned") > 0 Then
        tmpTarget = Target
        If Len(Range(AdjCourtColumn & Target.Row)) <> 0 Then
            If Left(tmpTarget, Len("(To: " & Trim(Range(AdjCourtColumn & Target.Row)) & ")")) <> "(To: " & Trim(Range(AdjCourtColumn & Target.Row)) & ")" Then
                tmpTarget = "(To: " & Range(AdjCourtColumn & Target.Row) & ") " & tmpTarget
                End If
            End If
        Target = tmpTarget
        GoTo WS_End
        End If
        
WS_End:
    ' Perform a validate on the def row
    tmpDefRow = Target.Row
    Do
        tmpDefRow = tmpDefRow - 1
    Loop Until Range("B" & tmpDefRow) = "Defendant" Or tmpDefRow < 16
    Call ProtectMe(False)
    tmpValidation = Range(ValidationColumn & tmpDefRow)
    Call ValidateRow(Val(tmpDefRow))
    tmpDisableWorkSheetChange = True: Call ProtectMe(False)
    If tmpValidation <> Range(ValidationColumn & tmpDefRow) Then Call ValidateCounters: Call RebuildQuickFind
WS_Abort:
    Call ProtectMe(True)
    tmpDisableWorkSheetChange = False
End Sub

Sub UpdateFigures(tmpRow As Integer, tmpCol As String)
    Dim tmpThird As Currency
    Dim tmpFirstRow As Integer
    Dim tmpLastRow As Integer
    Dim tmpHighestFine As Currency
    Dim tmpVS As Currency
    Dim tmpVSRow As Long
    Dim tmpOffDate As String
    Dim tmpCount As Integer
    Dim tmpMonthPosition As Integer
    Dim tmpMonthLength As Integer
    Dim tmpFineAmountExists As Boolean

    Call ProtectMe(False)
    'Change taking place is NOT the fine column
    If tmpCol <> FineColumn Then
        If (Left(Range(PleaColumn & tmpRow), 6) = "Guilty" Or Left(Range(PleaColumn & tmpRow), 6) = "PIA On" Or Range(ActionColumn & tmpRow) = "Proved In Absence" Or Range(ActionColumn & tmpRow) = "Proved In Abs (SJP)") And (Range(GuiltyCreditColumn & tmpRow) <> "" And Range(IncomeColumn & tmpRow) <> "" And Range(BandColumn & tmpRow) <> "") Then
            If Val(Range(IncomeColumn & tmpRow)) = 0 Then
                Range(IncomeColumn & tmpRow) = Range("S3")
                Range(FineColumn & tmpRow) = Range("S3") ' Calculated Fine
                Else
                Range(FineColumn & tmpRow) = Range(IncomeColumn & tmpRow) ' Calculated Fine
                End If
            If Range(BandColumn & tmpRow) <> "" Then
                If Range(FineColumn & tmpRow) = "No Separate Penalty" Then
                    Range(FineColumn & tmpRow).UnMerge
                    End If
                End If
            If Range(BandColumn & tmpRow) = "A" Then Range(FineColumn & tmpRow) = Val(Range(FineColumn & tmpRow)) / 2
            If Range(BandColumn & tmpRow) = "C" Then Range(FineColumn & tmpRow) = Val(Range(FineColumn & tmpRow)) * 1.5
            If Range(GuiltyCreditColumn & tmpRow) = "Y" Then tmpThird = Range(FineColumn & tmpRow) / 3: Range(FineColumn & tmpRow) = Int(Range(FineColumn & tmpRow) - tmpThird)
            If Val(Range(FCOSTSColumn & tmpRow)) = 0 Then Range(FCOSTSColumn & tmpRow) = FindDefaultCost(tmpRow)   'Worksheets("Splash").Range("A" & FindCaseTypeRow(Range("B" & tmpRow))) ' Costs
            If Val(Range("P" & tmpRow)) = 0 Then Range("P" & tmpRow) = "Y" ' COLLO
            If Len(Range("Q" & tmpRow)) = 0 Then
                Range("Q" & tmpRow) = DateAdd("d", Range("S4"), Range("C6")) ' Pay by date
                If Range("X3") = "Yes" Then Call AddTFO(Val(tmpRow))
                End If
            End If
        End If
        
    ' Victim Surcharge
    tmpFirstRow = tmpRow
    Do
        tmpFirstRow = tmpFirstRow - 1
        If Range(FineColumn & tmpFirstRow).Interior.ColorIndex = 37 Then tmpFirstRow = tmpFirstRow + 1: Exit Do ' = "Fine / NSP"
    Loop
    tmpLastRow = tmpRow
    Do
        If Range(FineColumn & tmpLastRow) > 0 Then tmpFineAmountExists = True
        tmpLastRow = tmpLastRow + 1
        If Range("B" & tmpLastRow) = "" Then tmpLastRow = tmpLastRow - 1: Exit Do
    Loop
    tmpHighestFine = 0
    tmpVSRow = tmpFirstRow
    Do
        If Range(FineColumn & tmpFirstRow) <> "No Separate Penalty" And tmpFineAmountExists = True Then
            If Range("M" & tmpFirstRow).Locked = False Then Range("M" & tmpFirstRow) = "" ' Reset FCosts
            If Range("N" & tmpFirstRow).Locked = False Then Range("N" & tmpFirstRow) = "" ' Reset VS
            If tmpHighestFine < Val(Range(FineColumn & tmpFirstRow)) Then tmpHighestFine = Val(Range(FineColumn & tmpFirstRow)): tmpVSRow = tmpFirstRow
            End If
        tmpFirstRow = tmpFirstRow + 1
    Loop Until tmpFirstRow > tmpLastRow
    If tmpHighestFine <> 0 Then
        Call CalculateVS(Val(tmpVSRow), Val(tmpHighestFine), False)
        If Val(Range(FCOSTSColumn & tmpVSRow)) = 0 Then Range(FCOSTSColumn & tmpVSRow) = FindDefaultCost(tmpVSRow)   'Worksheets("Splash").Range("A" & FindCaseTypeRow(Range("B" & tmpVSRow))) ' Costs
        End If
    
    ' Change taking place is the fine column
    If tmpCol = FineColumn And Range(FineColumn & tmpRow) > 0 And Range(FineColumn & tmpRow) <> "No Separate Penalty" Then
        If Val(Range("P" & tmpRow)) = 0 Then Range("P" & tmpRow) = "Y" ' COLLO
        If Len(Range("Q" & tmpRow)) = 0 Then Range("Q" & tmpRow) = DateAdd("d", Range("S4"), Range("C6")) ' Pay by date
        End If
    Call ProtectMe(True)
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    Dim tmpPlea As String
    Dim tmpDefRow As Integer
    Dim tmpSJP As String
    Dim tmpLastAction As String
    Dim tmpLastActionRow As Long
    
    If tmpDisableAllChange = True Then Exit Sub
    
    Application.EnableAutoComplete = False
    Application.ScreenUpdating = False
    If tmpDisableWorkSheetSelectionChange = True Or Len(Target.Address) > 7 Or Target.Address = "$C$7" Or Target.Address = "$C$8" Then
        OldValue = Target
        If txtChoiceBox.Visible = True Then txtChoiceBox.Visible = False
        Application.ScreenUpdating = True
        Exit Sub
        End If
    If Len(Target.Address) > 4 Then
        If Mid(Target.Address, 4, 1) = "$" Then
            If txtChoiceBox.Visible = True Then txtChoiceBox.Visible = False
            Application.ScreenUpdating = True
            Exit Sub
            End If
        Else
        If Target.Row < 15 Then Exit Sub
        Application.ScreenUpdating = True
        End If
    
    OldValue = Target

    If tmpKeepChoice = False Then
        If txtChoiceBox.Visible = True Then txtChoiceBox.Visible = False
        Else
        tmpKeepChoice = False
        Application.ScreenUpdating = True
        Exit Sub
        End If

    ' Get the defendant row
    tmpDefRow = Target.Row
    Do
        tmpDefRow = tmpDefRow - 1
    Loop Until Range("B" & tmpDefRow - 1) = "Defendant" Or tmpDefRow < 15
    If tmpDefRow < 15 Then Exit Sub

    'Adjournment Reason Drop Down
    If Left(Target.Address, 2) = "$R" And Range(Target.Address).Interior.ColorIndex = OffenceColour And Range("R" & Target.Row - 2) <> "Solicitor" And Sheet1.txtProsecutorType <> "Pre Charge Bail" Then
        txtChoiceBox.Clear
        Select Case LCase(Left(Range(PleaColumn & Target.Row), 6))
            Case Is = "guilty"
                ' Guilty Plea only
                Select Case Range(ActionColumn & Target.Row)
                    Case Is = "Adjourned (SJP)"
                        txtChoiceBox.AddItem "Check With Police (See Notes)"
                        txtChoiceBox.AddItem "Clarification of Plea"
                        If Worksheets("Splash").Range("A21") = "Yes" Then
                            txtChoiceBox.AddItem "Disqualification For Offence"
                            txtChoiceBox.AddItem "Disqualification Totter"
                            End If
                        
                    Case Is = "Adjourned for Court Hearing"
                        txtChoiceBox.AddItem "Attend case management hearing"
                        txtChoiceBox.AddItem "Case management hearing (no appearance)"
                        txtChoiceBox.AddItem "Check With Police (See Notes)"
                        txtChoiceBox.AddItem "Clarification of Plea"
                        txtChoiceBox.AddItem "Defence Request"
                        txtChoiceBox.AddItem "Disqualification For Offence"
                        txtChoiceBox.AddItem "Disqualification Totter"
                        txtChoiceBox.AddItem "Equivocal plea - for trial"
                        txtChoiceBox.AddItem "Equivocal plea - to attend to clarify"
                        txtChoiceBox.AddItem "Case inappropriate for SJP"
                        txtChoiceBox.AddItem "To attend for sentence"
                        txtChoiceBox.AddItem "Special Reasons"
                        If Val(Range("Q" & tmpDefRow)) <> 75 And Val(Range("Q" & tmpDefRow)) <> 76 And Val(Range("Q" & tmpDefRow)) <> 77 And Val(Range("Q" & tmpDefRow)) <> 85 And Val(Range("Q" & tmpDefRow)) <> 86 Then
                            txtChoiceBox.AddItem "Warrant Issued (Bail)"
                            txtChoiceBox.AddItem "Warrant Issued (No Bail)"
                            End If
                End Select

            Case Is = "pia on"
                ' PIA On
                Select Case Range(ActionColumn & Target.Row)
                    Case Is = "Adjourned (SJP)"
                        txtChoiceBox.AddItem "Check With Police (See Notes)"
                        txtChoiceBox.AddItem "Clarification of Plea"
                        txtChoiceBox.AddItem "Disqualification For Offence"
                        txtChoiceBox.AddItem "Disqualification Totter"
                        
                    Case Is = "Adjourned for Court Hearing"
                        txtChoiceBox.AddItem "Attend case management hearing"
                        txtChoiceBox.AddItem "Case management hearing (no appearance)"
                        txtChoiceBox.AddItem "Check With Police (See Notes)"
                        txtChoiceBox.AddItem "Clarification of Plea"
                        txtChoiceBox.AddItem "Defence Request"
                        txtChoiceBox.AddItem "Disqualification For Offence"
                        txtChoiceBox.AddItem "Disqualification Totter"
                        txtChoiceBox.AddItem "Equivocal plea - for trial"
                        txtChoiceBox.AddItem "Equivocal plea - to attend to clarify"
                        txtChoiceBox.AddItem "Case inappropriate for SJP"
                        txtChoiceBox.AddItem "To attend for sentence"
                        txtChoiceBox.AddItem "Special Reasons"
                        If Val(Range("Q" & tmpDefRow)) <> 75 And Val(Range("Q" & tmpDefRow)) <> 76 And Val(Range("Q" & tmpDefRow)) <> 77 And Val(Range("Q" & tmpDefRow)) <> 85 And Val(Range("Q" & tmpDefRow)) <> 86 Then
                            txtChoiceBox.AddItem "Warrant Issued (Bail)"
                            txtChoiceBox.AddItem "Warrant Issued (No Bail)"
                            End If
                End Select
            Case Else
                ' No Plea or Not Guilty Plea
                Select Case Range(ActionColumn & Target.Row)
                    Case Is = "Adjourned (SJP)"
                        txtChoiceBox.AddItem "Check With Police (See Notes)"
                        txtChoiceBox.AddItem "Clarification of Plea"
                        If Sheet1.txtProsecutorType <> "Traffic" And Sheet1.txtProsecutorType <> "Traffic (SJP)" And LCase(Left(Range(PleaColumn & Target.Row), 6)) = "no ple" Then
                            txtChoiceBox.AddItem "Not Served: SJP Notice to be Re-Issued"
                            End If
                    
                    Case Is = "Adjourned PIA"
                        txtChoiceBox.AddItem "Defence Request"
                        txtChoiceBox.AddItem "Disqualification For Offence"
                        txtChoiceBox.AddItem "Disqualification Totter"
                        txtChoiceBox.AddItem "To attend for sentence"
                        txtChoiceBox.AddItem "Check With Police (See Notes)"
                        txtChoiceBox.AddItem "Warrant Issued (Bail)"
                        txtChoiceBox.AddItem "Warrant Issued (No Bail)"
                        
                    Case Is = "Adjourned PIA (SJP)"
                        txtChoiceBox.AddItem "Disqualification For Offence"
                        txtChoiceBox.AddItem "Disqualification Totter"
                        txtChoiceBox.AddItem "Case inappropriate for SJP"
                        
                    Case Is = "Adjourned for Court Hearing"
                        If txtProsecutorType = "Proceeds Of Crime Act" Then
                            txtChoiceBox.AddItem "Directions"
                            txtChoiceBox.AddItem "Final Hearing"
                            txtChoiceBox.AddItem "Forfeiture At Directions"
                            txtChoiceBox.AddItem "Mention"
                            txtChoiceBox.AddItem "Pending Criminal Proceedings"
                            Else
                            If Left(LCase(Range(PleaColumn & Target.Row)), 6) = "not gu" Then
                                txtChoiceBox.AddItem "Attend case management hearing"
                                txtChoiceBox.AddItem "Case management hearing (no appearance)"
                                End If
                            txtChoiceBox.AddItem "Check With Police (See Notes)"
                            txtChoiceBox.AddItem "Clarification of Plea"
                            txtChoiceBox.AddItem "Defence Request"
                            txtChoiceBox.AddItem "Equivocal plea - for trial"
                            txtChoiceBox.AddItem "Equivocal plea - to attend to clarify"
                            txtChoiceBox.AddItem "Case inappropriate for SJP"
                            txtChoiceBox.AddItem "To attend for sentence"
                            If LCase(Left(Range(PleaColumn & Target.Row), 6)) = "not gu" Then
                                txtChoiceBox.AddItem "Trial"
                                End If
                            If Val(Range("Q" & tmpDefRow)) <> 75 And Val(Range("Q" & tmpDefRow)) <> 76 And Val(Range("Q" & tmpDefRow)) <> 77 And Val(Range("Q" & tmpDefRow)) <> 85 And Val(Range("Q" & tmpDefRow)) <> 86 Then
                                txtChoiceBox.AddItem "Warrant Issued (Bail)"
                                txtChoiceBox.AddItem "Warrant Issued (No Bail)"
                                End If
                            End If
                    End Select
                End Select
                
        txtChoiceBox.Width = 210
        txtChoiceBox.Height = txtChoiceBox.ListCount * 13
        Call SetChoiceBox
        tmpLastActiveAddress = Target.Address
        tmpDisableWorkSheetChange = True
        On Error Resume Next
        txtChoiceBox.Value = OldValue
        On Error GoTo 0
        tmpDisableWorkSheetChange = False
        Exit Sub
        End If
    ' Action Box Drop Down - except pre charge bail
    If Left(Target.Address, 2) = "$" & ActionColumn And Range(Target.Address).Interior.ColorIndex = OffenceColour And Range(ActionColumn & Target.Row - 2) <> "DOB" And txtProsecutorType <> "Pre Charge Bail" Then
        txtChoiceBox.Clear
        If InStr(Range("B" & Target.Row), "MC80524") Or InStr(Range("B" & Target.Row), "MC80527") Or InStr(Range("B" & Target.Row), "MC80528") Or InStr(Range("B" & Target.Row), "RR88503") Or InStr(Range("B" & Target.Row), "RR88504") Then
            ' Stat dec & s142 actions
            If InStr(Range("B" & Target.Row), "MC80524") Or InStr(Range("B" & Target.Row), "MC80527") Or InStr(Range("B" & Target.Row), "MC80528") Then txtChoiceBox.AddItem "Adjourned for Court Hearing"
            txtChoiceBox.AddItem "Did Not Appear"
            txtChoiceBox.AddItem "Entered In Error"
            txtChoiceBox.AddItem "Granted"
            txtChoiceBox.AddItem "Refused"
            txtChoiceBox.AddItem "Withdrawn"
            txtChoiceBox.Width = 150
            txtChoiceBox.Height = txtChoiceBox.ListCount * 14
            Else
            If InStr(txtProsecutorType, "SJP") = 0 And txtProsecutorType <> "Proceeds Of Crime Act" And txtProsecutorType <> "Pre Charge Bail" Then
                Select Case Range(PleaColumn & Target.Row)
                    Case Is = "Found Guilty", "Plea Changed to Guilty NG Withdrawn"
                        txtChoiceBox.AddItem "Absolute Discharge"
                        txtChoiceBox.AddItem "Adjourned for Court Hearing"
                        txtChoiceBox.AddItem "Conditional Discharge"
                        txtChoiceBox.AddItem "Fine"
                        txtChoiceBox.Width = 133
                        txtChoiceBox.Height = 52
                        GoTo SelectionChange_0
                        
                    Case Is = "Found Not Guilty"
                        txtChoiceBox.AddItem "Dismissed"
                        txtChoiceBox.Width = 75
                        txtChoiceBox.Height = 15
                        GoTo SelectionChange_0
                End Select
                End If

            If txtProsecutorType = "Proceeds Of Crime Act" Then
                ' Proceeds of crime only
                txtChoiceBox.AddItem "Adjourned for Court Hearing"
                txtChoiceBox.AddItem "Granted"
                txtChoiceBox.AddItem "Refused"
                txtChoiceBox.AddItem "Withdrawn"
                txtChoiceBox.Width = 150
                txtChoiceBox.Height = 65
                GoTo SelectionChange_0
                End If
                
            ' Any other prosecutor type
            tmpLastActionRow = FindAdjAction(Target.Row)
            txtChoiceBox.AddItem "Absolute Discharge"
            If tmpLastActionRow > 0 Then tmpLastAction = Range(ActionColumn & tmpLastActionRow)
            txtChoiceBox.AddItem "Adjourned for Court Hearing"
            If Val(Range("Q" & tmpDefRow)) >= 75 And Val(Range("Q" & tmpDefRow)) <= 77 Then
                txtChoiceBox.AddItem "Adjourned (SJP)"
                If LCase(Left(Range(PleaColumn & Target.Row), 6)) <> "pia on" And LCase(Left(Range(PleaColumn & Target.Row), 6)) <> "guilty" And LCase(Left(Range(PleaColumn & Target.Row), 6)) <> "not gu" Then
                    txtChoiceBox.AddItem "Adjourned PIA (SJP)"
                    End If
                Else
                If LCase(Left(Range(PleaColumn & Target.Row), 6)) <> "pia on" And LCase(Left(Range(PleaColumn & Target.Row), 6)) <> "guilty" And LCase(Left(Range(PleaColumn & Target.Row), 6)) <> "not gu" Then
                    If tmpLastAction = "" Or tmpLastAction = "Adjourned PIA" Then txtChoiceBox.AddItem "Adjourned PIA"
                    End If
                End If
            txtChoiceBox.AddItem "Conditional Discharge"
            If LCase(Left(Range(PleaColumn & Target.Row), 6)) <> "guilty" Then txtChoiceBox.AddItem "PIA Conditional Discharge"
            If LCase(Left(Range(PleaColumn & Target.Row), 6)) <> "guilty" And LCase(Left(Range(PleaColumn & Target.Row), 12)) <> "found guilty" And LCase(Left(Range(PleaColumn & Target.Row), 6)) <> "pia on" Then txtChoiceBox.AddItem "Dismissed"
            txtChoiceBox.AddItem "Entered In Error"
            txtChoiceBox.AddItem "Fine"
            If InStr(txtProsecutorType, "SJP") > 0 Then txtChoiceBox.AddItem "Not Completed"
            If LCase(Left(Range(PleaColumn & Target.Row), 6)) <> "guilty" And LCase(Left(Range(PleaColumn & Target.Row), 12)) <> "found guilty" And LCase(Left(Range(PleaColumn & Target.Row), 6)) <> "pia on" And LCase(Left(Range(PleaColumn & Target.Row), 7)) <> "no plea" Then txtChoiceBox.AddItem "NEO Dismissed"
            If LCase(Left(Range(PleaColumn & Target.Row), 6)) <> "guilty" Then
                If InStr(LCase(Range(PleaColumn & Target.Row)), "pia on") = 0 Then
                    If Val(Range("Q" & tmpDefRow)) >= 75 And Val(Range("Q" & tmpDefRow)) <= 77 Then
                        txtChoiceBox.AddItem "Proved In Abs (SJP)"
                        Else
                        txtChoiceBox.AddItem "Proved In Absence"
                        End If
                    End If
                End If
            txtChoiceBox.Height = txtChoiceBox.ListCount * 15
            txtChoiceBox.AddItem "Withdrawn"
            txtChoiceBox.Width = 150
            End If

SelectionChange_0:
        Call SetChoiceBox
        tmpLastActiveAddress = Target.Address
        tmpDisableWorkSheetChange = True
        On Error Resume Next
        txtChoiceBox.Value = OldValue
        On Error GoTo 0
        tmpDisableWorkSheetChange = False
        Exit Sub
        End If
    ' Pre Charge Bail actions
    If Left(Target.Address, 2) = "$" & ActionColumn And Range(Target.Address).Interior.ColorIndex = OffenceColour And Range(ActionColumn & Target.Row - 2) <> "DOB" And txtProsecutorType = "Pre Charge Bail" Then
        txtChoiceBox.Clear
        If InStr(Range("B" & Target.Row), "PL84506") Then
            txtChoiceBox.AddItem "Granted"
            txtChoiceBox.AddItem "Refused"
            txtChoiceBox.Width = 80
            Else
            txtChoiceBox.AddItem "Extension Granted"
            txtChoiceBox.AddItem "Further Extension Granted"
            txtChoiceBox.AddItem "Extension Refused"
            txtChoiceBox.AddItem "Referred To Court"
            txtChoiceBox.AddItem "Referred To Court [With Date]"
            txtChoiceBox.AddItem "Withdrawn"
            txtChoiceBox.Width = 150
            End If
        txtChoiceBox.Height = txtChoiceBox.ListCount * 14
        Call SetChoiceBox
        tmpLastActiveAddress = Target.Address
        tmpDisableWorkSheetChange = True
        On Error Resume Next
        txtChoiceBox.Value = OldValue
        On Error GoTo 0
        tmpDisableWorkSheetChange = False
        Exit Sub
        End If

    ' Plea Box Drop Down
    If Left(Target.Address, 2) = "$" & PleaColumn And Range(Target.Address).Interior.ColorIndex = OffenceColour And Range(PleaColumn & Target.Row - 2) <> "URN" And txtProsecutorType <> "Proceeds Of Crime Act" Then
        If Val(Range("Q" & tmpDefRow)) >= 75 And Val(Range("Q" & tmpDefRow)) <= 77 Or Val(Range("Q" & tmpDefRow)) = 85 Or Val(Range("Q" & tmpDefRow)) = 86 Then tmpSJP = " SJP" Else tmpSJP = ""
        tmpPlea = Range(OriginalPleaColumn & Target.Row)
        'tmpPlea = GetPlea(tmpDefRow, Val(Range("B" & Target.Row)), tmpSJP)
        txtChoiceBox.Clear
        If tmpPlea = "" Then
            txtChoiceBox.AddItem "Guilty" & tmpSJP
            If tmpSJP = "" And Range("D" & Target.Row) = "N" Then txtChoiceBox.AddItem "Guilty MCA"
            If Left(Range(OriginalPleaColumn & Target.Row), 6) = "Guilty" Then txtChoiceBox.AddItem Range(OriginalPleaColumn & Target.Row)
            txtChoiceBox.AddItem "No Plea"
            txtChoiceBox.AddItem "Not Guilty" & tmpSJP
            txtChoiceBox.Width = 100
            Else
            ' Set box width wider if an online or written plea detected
            If InStr(tmpPlea, "(Online") = 0 And InStr(tmpPlea, "(Written") = 0 Then
                txtChoiceBox.Width = 100
                Else
                If InStr(tmpPlea, "Req DOH") > 0 Then txtChoiceBox.Width = 165 Else txtChoiceBox.Width = 140
                End If
            ' Not Guilty Plea
            If Left(tmpPlea, 3) = "Not" Then
                If InStr(Range(OriginalPleaColumn & Target.Row), "Guilty") > 0 Then
                    txtChoiceBox.AddItem "Guilty" & tmpSJP
                    If tmpPlea <> Range(OriginalPleaColumn & Target.Row) Then txtChoiceBox.AddItem Range(OriginalPleaColumn & Target.Row)
                    txtChoiceBox.Width = 180
                    If InStr(Worksheets("Main").txtProsecutorType, "SJP") = 0 And Left(Range(OriginalPleaColumn & Target.Row), 10) = "Not Guilty" Then
                        txtChoiceBox.AddItem "Found Guilty"
                        txtChoiceBox.AddItem "Found Not Guilty"
                        txtChoiceBox.AddItem "No Plea"
                        txtChoiceBox.AddItem Replace(tmpPlea, vbLf, " ")
                        txtChoiceBox.AddItem "Plea Changed to Guilty NG Withdrawn"
                        txtChoiceBox.Width = 180
                        Else
                        txtChoiceBox.AddItem "No Plea"
                        txtChoiceBox.AddItem Replace(tmpPlea, vbLf, " ")
                        End If
                    Else
                    txtChoiceBox.AddItem "Guilty" & tmpSJP
                    txtChoiceBox.AddItem "No Plea"
                    txtChoiceBox.AddItem Replace(tmpPlea, vbLf, " ")
                    End If
                If tmpSJP = " SJP" Then
                    If InStr(tmpPlea, "(Online") = 0 And InStr(tmpPlea, "(Written") = 0 Then
                        txtChoiceBox.AddItem "Not Guilty SJP"
                        End If
                    End If
                Else
                ' Guilty Plea
                txtChoiceBox.AddItem "Guilty" & tmpSJP
                If InStr(txtProsecutorType, "SJP") = 0 And txtProsecutorType <> "Proceeds Of Crime Act" And txtProsecutorType <> "Pre Charge Bail" Then
                    txtChoiceBox.AddItem "Guilty Plea Withdrawn now NG"
                    End If
                If InStr(Range(OriginalPleaColumn & Target.Row), "Guilty") > 0 Then
                    If Left(Range(OriginalPleaColumn & Target.Row), 6) = "Guilty" Then txtChoiceBox.AddItem "No Plea"
                    txtChoiceBox.AddItem Range(OriginalPleaColumn & Target.Row)
                    If Left(Range(OriginalPleaColumn & Target.Row), 10) = "Not Guilty" Then txtChoiceBox.AddItem "No Plea"
                    txtChoiceBox.Width = 180
                    Else
                    txtChoiceBox.AddItem "No Plea"
                    End If
                txtChoiceBox.AddItem Replace(tmpPlea, vbLf, " ")
                txtChoiceBox.AddItem "Not Guilty" & tmpSJP
                End If
            End If

        If Left(Range(OriginalPleaColumn & Target.Row), 6) = "PIA On" Then txtChoiceBox.AddItem Range(OriginalPleaColumn & Target.Row)
        txtChoiceBox.Height = txtChoiceBox.ListCount * 14
        Call SetChoiceBox
        tmpLastActiveAddress = Target.Address
        tmpDisableWorkSheetChange = True
        On Error Resume Next
        txtChoiceBox.Value = OldValue
        On Error GoTo 0
        tmpDisableWorkSheetChange = False
        Exit Sub
        End If
End Sub

Sub SetChoiceBox()
    txtChoiceBox.Top = ActiveCell.Top + ActiveCell.Height
    txtChoiceBox.Left = ActiveCell.Left
    Call InitialiseListBox
    txtChoiceBox.Visible = True
    Application.ScreenUpdating = True
    ActiveWindow.ScrollRow = ActiveWindow.ScrollRow + 1
    ActiveWindow.ScrollRow = ActiveWindow.ScrollRow - 1
End Sub


Private Sub RebuildValidate()
    txtValidated.Clear
    txtValidated.AddItem "All"
    txtValidated.AddItem "Un-Validated"
    txtValidated.AddItem "Validated"
    txtValidated = "All"
End Sub

Private Sub txtChoiceBox_Click()
    Dim tmpLanguage As String
    Dim tmpConvictionSentence As String
    Dim tmpRow As Integer
    Dim tmpSelected As String
    Dim tmpSummonsNotice As String
    
    Dim tmpSelection As String
    If tmpDisableWorkSheetChange = True Then Exit Sub
    tmpSummonsNotice = "Summons"
    If txtChoiceBox.ListIndex >= 0 Then
        If Mid(tmpLastActiveAddress, 2, 1) = "R" Then
            ' Perform a check on whether to keep the case in SJP
            If Worksheets("Splash").Range("A21") = "Yes" And InStr(txtChoiceBox.Column(0, txtChoiceBox.ListIndex), "Disq") > 0 Then
                If Range(ActionColumn & Mid(tmpLastActiveAddress, 4)) = "Adjourned PIA (SJP)" Or Range(ActionColumn & Mid(tmpLastActiveAddress, 4)) = "Adjourned (SJP)" Then
                    If MsgBox("Attention!  Do you want to keep this case in SJP for disqualification?", vbYesNo) = vbYes Then
                        tmpSummonsNotice = "Notice"
                        Else
                        If Range(ActionColumn & Mid(tmpLastActiveAddress, 4)) = "Adjourned (SJP)" Then
                            Range(ActionColumn & Mid(tmpLastActiveAddress, 4)) = "Adjourned for Court Hearing"
                            End If
                        End If
                    End If
                End If
            ' If choosing an adjournment reason and case is an SJP case and action is adjourned then add "Summons to Issue"
            If Range(ActionColumn & Mid(tmpLastActiveAddress, 4)) <> "Adjourned (SJP)" And tmpSummonsNotice <> "Notice" Then
                If MsgBox("Attention! Is an Interpreter Required?", vbYesNo + vbInformation) = vbNo Then
                    tmpSelected = txtChoiceBox.Column(0, txtChoiceBox.ListIndex)
                    Else
                    tmpLanguage = InputBox("Please specify the language required")
                    If Len(tmpLanguage) > 0 Then
                        tmpSelected = txtChoiceBox.Column(0, txtChoiceBox.ListIndex) & vbLf & "(Interpreter: " & tmpLanguage & ")"
                        Else
                        MsgBox "Caution!  No language specified", vbInformation
                        tmpSelected = txtChoiceBox.Column(0, txtChoiceBox.ListIndex)
                        End If
                    End If
                Else
                tmpSelected = txtChoiceBox.Column(0, txtChoiceBox.ListIndex)
                End If
            tmpRow = Mid(tmpLastActiveAddress, 4)
            Do
                tmpRow = tmpRow - 1
            Loop Until Range("B" & tmpRow) = "Defendant" Or tmpRow < 15
            If tmpRow >= 15 Then
                If (Range(ActionColumn & Mid(tmpLastActiveAddress, 4)) = "Adjourned PIA (SJP)" Or Range(ActionColumn & Mid(tmpLastActiveAddress, 4)) = "Adjourned for Court Hearing" Or Range(ActionColumn & Mid(tmpLastActiveAddress, 4)) = "Proved In Abs (SJP)") And (Val(Range("Q" & tmpRow + 1)) >= 75 And Val(Range("Q" & tmpRow + 1)) <= 77) Then
                    Range(tmpLastActiveAddress) = tmpSelected & vbLf & "(" & tmpSummonsNotice & " To Issue)"
                    Else
                    If Worksheets("Splash").Range("A21") = "Yes" And InStr(txtChoiceBox.Column(0, txtChoiceBox.ListIndex), "Disq") > 0 And Range(ActionColumn & Mid(tmpLastActiveAddress, 4)) = "Adjourned (SJP)" And (Left(Range(PleaColumn & Mid(tmpLastActiveAddress, 4)), 6) = "Guilty" Or Left(Range(PleaColumn & Mid(tmpLastActiveAddress, 4)), 6) = "PIA On") Then
                        Range(tmpLastActiveAddress) = tmpSelected & vbLf & "(" & tmpSummonsNotice & " To Issue)"
                        Else
                        Range(tmpLastActiveAddress) = tmpSelected
                        End If
                    End If
                End If
            Else
            ' Choice box is NOT Adjournment reason
            tmpSelection = txtChoiceBox.Column(0, txtChoiceBox.ListIndex)
            If InStr(tmpSelection, "(") > 0 And InStr(tmpSelection, "(PIA") = 0 And InStr(tmpSelection, "(SJP") = 0 Then tmpSelection = Replace(tmpSelection, " (", vbLf & "(")
            Range(tmpLastActiveAddress) = tmpSelection
            End If
        If tmpSelection = "Granted" And (InStr(Range("B" & Mid(tmpLastActiveAddress, 4)), "MC80524") > 0 Or InStr(Range("B" & Mid(tmpLastActiveAddress, 4)), "MC80528") > 0) Then
            ' Prompt for Conviction and Sentence on re-open
            If MsgBox("Is the Conviction Set Aside?", vbYesNo + vbQuestion) = vbYes Then tmpConvictionSentence = "Conviction "
            If MsgBox("Is the Sentence Set Aside?", vbYesNo + vbQuestion) = vbYes Then
                If tmpConvictionSentence <> "" Then tmpConvictionSentence = tmpConvictionSentence & " & "
                tmpConvictionSentence = tmpConvictionSentence & "Sentence"
                End If
            If tmpConvictionSentence <> "" Then tmpConvictionSentence = tmpConvictionSentence & " Set Aside"
            If InStr(tmpConvictionSentence, "Conviction") > 0 Then
                ' enable the adjournment fields
                ' Waiting response from andrew on this
                End If
            tmpDisableWorkSheetChange = True
            Range("U" & Mid(tmpLastActiveAddress, 4)) = tmpConvictionSentence
            tmpDisableWorkSheetChange = False
            End If
        End If
End Sub

Private Function ScreenDPI(bVert As Boolean) As Long
  'in most cases this simply returns 96
  Static lDPI&(1), lDC&
  If lDPI(0) = 0 Then
    lDC = GetDC(0)
    lDPI(0) = GetDeviceCaps(lDC, 88&)    'horz
    lDPI(1) = GetDeviceCaps(lDC, 90&)    'vert
    lDC = ReleaseDC(0, lDC)
  End If
  ScreenDPI = lDPI(Abs(bVert))
End Function

Private Function PTtoPX(Points As Single, bVert As Boolean) As Long
    PTtoPX = Points * ScreenDPI(bVert) / 72
End Function

Private Sub GetRangeRect(ByVal rng As Range, ByRef rc As RECT)
  Dim wnd               As Window
  
  'requires additional code to verify the range is visible
  'etc.
  
  Set wnd = rng.Parent.Parent.Windows(1)
  With rng
    rc.Left = PTtoPX(.Left * wnd.Zoom / 100, 0) + wnd.PointsToScreenPixelsX(0)
    rc.Top = PTtoPX(.Top * wnd.Zoom / 100, 1) + wnd.PointsToScreenPixelsY(0)
    rc.Right = PTtoPX(.Width * wnd.Zoom / 100, 0) + rc.Left
    rc.Bottom = PTtoPX(.Height * wnd.Zoom / 100, 1) + rc.Top
  End With
End Sub

Sub GetCoordinateXY()
    Dim rc As RECT
    On Error GoTo done
    Call GetRangeRect(ActiveCell, rc)
    x = rc.Left
    y = rc.Top
done:
End Sub

Function FindValidFile(tmpFirstFile As String) As String
    If LCase(tmpFirstFile) <> "mc100.pdf" And LCase(tmpFirstFile) <> "moc.pdf" And InStr(LCase(tmpFirstFile), "guilty") = 0 And InStr(LCase(tmpFirstFile), "corres") = 0 And InStr(LCase(tmpFirstFile), "dq3") = 0 And InStr(LCase(tmpFirstFile), "dvs") = 0 And InStr(LCase(tmpFirstFile), "disq response") = 0 Then
        FindValidFile = tmpFirstFile
        Exit Function
        End If
    Do
        tmpDIR = Dir()
        If LCase(tmpDIR) <> "mc100.pdf" And LCase(tmpDIR) <> "moc.pdf" And InStr(LCase(tmpDIR), "guilty") = 0 And InStr(LCase(tmpDIR), "corres") = 0 And InStr(LCase(tmpDIR), "dq3") = 0 And InStr(LCase(tmpDIR), "dvs") = 0 And InStr(LCase(tmpDIR), "disq response") = 0 Then
            FindValidFile = tmpDIR
            Exit Do
            End If
    Loop Until tmpDIR = ""
End Function

Function FindAdjAction(tmpCurrentRow As Long) As Long
    Dim tmpMyRow As Long
    tmpMyRow = tmpCurrentRow
    Do
        tmpMyRow = tmpMyRow - 1
        If Range(ActionColumn & tmpMyRow) = "Action" Then Exit Do
        If InStr(LCase(Range(ActionColumn & tmpMyRow)), "adj") > 0 And LCase(Range(ActionColumn & tmpMyRow)) <> "adjourned for court hearing" Then FindAdjAction = tmpMyRow: Exit Function
    Loop
    tmpMyRow = tmpCurrentRow
    Do
        tmpMyRow = tmpMyRow + 1
        If Range(ActionColumn & tmpMyRow).Interior.ColorIndex <> OffenceColour Then Exit Do
        If InStr(LCase(Range(ActionColumn & tmpMyRow)), "adj") > 0 And LCase(Range(ActionColumn & tmpMyRow)) <> "adjourned for court hearing" Then FindAdjAction = tmpMyRow: Exit Function
    Loop
End Function

Function FindAnyAdjAction(tmpCurrentRow As Long) As Long
    Dim tmpMyRow As Long
    tmpMyRow = tmpCurrentRow
    Do
        tmpMyRow = tmpMyRow - 1
        If Range(ActionColumn & tmpMyRow) = "Action" Then Exit Do
        If InStr(LCase(Range(ActionColumn & tmpMyRow)), "adj") > 0 Then FindAnyAdjAction = tmpMyRow: Exit Function
    Loop
    tmpMyRow = tmpCurrentRow
    Do
        tmpMyRow = tmpMyRow + 1
        If Range(ActionColumn & tmpMyRow).Interior.ColorIndex <> OffenceColour Then Exit Do
        If InStr(LCase(Range(ActionColumn & tmpMyRow)), "adj") > 0 Then FindAnyAdjAction = tmpMyRow: Exit Function
    Loop
End Function

Sub InitialiseListBox()
    Dim a As OLEObjects
    Dim tmpOldHeight As Long
    Dim tmpOldWidth As Long
    With txtChoiceBox
        tmpOldHeight = .Height 'save original height and width
        tmpOldWidth = .Width
        .IntegralHeight = True 'set to an integral height, this will fix the shrinking text problem but make the box bigger.
        .IntegralHeight = False 'return to non-integral height
        .Height = tmpOldHeight  'restore original height and width
        .Width = tmpOldWidth
    End With
End Sub

Private Sub OpenCaseFolder(tmpCaseHearingFolder As String)
    If FolderExists(tmpCaseHearingFolder) = True Then
        x = Shell("Explorer.exe " & Chr$(34) & tmpCaseHearingFolder & Chr$(34), vbNormalFocus)
        Else
        If FolderExists(Range(CaseFolderPathColumn & Val(Mid(ActiveCell.Address, 4)))) = True Then
            x = Shell("Explorer.exe " & Chr$(34) & Range(CaseFolderPathColumn & Val(Mid(ActiveCell.Address, 4))) & Chr$(34), vbNormalFocus)
            Else
            MsgBox "Error!  Unable to locate the case folder.  Make sure your S drive is connected, click 'This PC' on any folder window to view the S drive."
            End If
        End If
End Sub

Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Dim OldValue
Dim Importing As Boolean
Dim AdjournCourt As String
Dim AdjournDate As String
Dim AdjournReason As String
Dim tmpActionRow As Long
Dim MaxRow As Integer
Dim tmpSplitActivated As Boolean
Dim MarkedArray() As String

Private Sub btnClearFilter_Click()
    On Error Resume Next
    ActiveSheet.ShowAllData
    On Error GoTo 0
    
    '***Eucs - 25.08.2017
    '   Reset the button size if necessary
    Call FixActiveXObj(Me.Name, Me.btnClearFilter.Name)
    '***
End Sub

Private Sub btnClearResults_Click()
    Dim tmpLastRow As Integer
    'If Range("A16") = "" Then Exit Sub
    If MsgBox("Caution!  Are you sure you want to clear the results?", vbYesNo + vbExclamation) = vbNo Then Exit Sub
    Importing = True
    On Error Resume Next
    ActiveSheet.ShowAllData
    On Error GoTo 0
    tmpLastRow = Worksheets("Results").Cells(Worksheets("Results").Rows.Count, "B").End(xlUp).Row
    If tmpLastRow < 16 Then tmpLastRow = 16
    Range("L6:L9") = 0
    Range("K15") = "Comp"
    Range("O15") = "Lic Pen Pts (LE/NE/3-10)"
    Range("A16:" & LastColumn & tmpLastRow).Cells.Delete
    Call PerformCount
    Range("A16").Select
    txtSplit = "All Cases"
    Importing = False
    ReDim MarkedArray(500, 1) As String
    
    '***Eucs - 25.08.2017
    '   Reset the button size if necessary
    Call FixActiveXObj(Me.Name, Me.btnClearResults.Name)
    '***
End Sub

Private Sub btnHelp1_Click()
    Call ShowYammer
    
    '***Eucs - 25.08.2017
    '   Reset the button size if necessary
    Call FixActiveXObj(Me.Name, Me.btnHelp1.Name)
    '***
End Sub

Private Sub btnImportResults_Click()
    Dim tmpLastRow As Integer
    Dim tmpRow As Integer
    Dim tmpResultsRow As Integer
    Dim tmpSurname As String
    Dim tmpForename As String
    Dim tmpDefRow As Integer
    Dim tmpOffText As String
    Dim tmpText As String
    Dim tmpCompHeaderCheck As Boolean
    
    If tmpSplitActivated = False Then
        If Range("A16") <> "" Then
            If MsgBox("Caution!  Are you sure you want to clear the results and re import the data?", vbYesNo + vbExclamation) = vbNo Then Exit Sub
            End If
        Else
        'If txtSplit <> "All Cases" Then
        '    If MsgBox("This will remove the cases from the other half of the list, you can restore them by re-importing or choosing 'All Cases' but will lose any green markers.", vbYesNo + vbInformation) = vbNo Then txtSplit = "All Cases": Exit Sub
        '    End If
        End If

    If IsArrayAllocated(MarkedArray) = False Then Call BuildMarkedArray

    Importing = True
    Application.ScreenUpdating = False
    ' Clear the old data
    On Error Resume Next
    ActiveSheet.ShowAllData
    On Error GoTo 0
    tmpLastRow = Worksheets("Results").Cells(Worksheets("Results").Rows.Count, "B").End(xlUp).Row
    If tmpLastRow > 15 Then
        Range("A16:" & LastColumn & tmpLastRow).Cells.Delete
        End If
    
    Call SetResultHeader
    
    ' cycle the legal adviser table
    tmpRow = 14
    tmpResultsRow = 16
    tmpCompHeaderCheck = False
    Do
        If Worksheets("Main").Range("B" & tmpRow) = "Defendant" Then
            If InStr(Trim(Worksheets("Main").Range("B" & tmpRow + 1)), " ") > 0 Then
                tmpSurname = Trim(Mid(Worksheets("Main").Range("B" & tmpRow + 1), InStrRev(Worksheets("Main").Range("B" & tmpRow + 1), " ")))
                tmpForename = Trim(Left(Worksheets("Main").Range("B" & tmpRow + 1), InStrRev(Worksheets("Main").Range("B" & tmpRow + 1), " ")))
                If Left(LCase(tmpForename), 3) = "mr " Or Left(LCase(tmpForename), 3) = "ms " Or Left(LCase(tmpForename), 5) = "miss " Or Left(LCase(tmpForename), 3) = "dr " Or Left(LCase(tmpForename), 4) = "mrs " Then
                    tmpForename = Trim(Mid(tmpForename, InStr(tmpForename, " ")))
                    End If
                Else
                tmpSurname = Worksheets("Main").Range("B" & tmpRow + 1)
                tmpForename = ""
                End If
            tmpDefRow = tmpRow + 1
            tmpRow = tmpRow + 3
            If Worksheets("Main").Range("B" & tmpRow).Interior.ColorIndex <> OffenceColour Then tmpRow = tmpRow + 1
            ' Perform check to see if there is an amendment sheet in the case folder
            If ScanForAmendments(tmpDefRow, tmpResultsRow, tmpRow) = False Then
                'If tmpCompHeaderCheck = False Then
                '    If Worksheets("Main").Range("P7") <> "Traffic" And Worksheets("Main").Range("P7") <> "Traffic (SJP)" Then
                '        If Worksheets("Main").Range("P7") = "DVLA (SJP)" Or Worksheets("Main").Range("P7") = "DVLA" Then
                '            Range("K15") = "Bk Duty/" & vbLf & "Add Pen"
                '            Else
                '            Range("K15") = "Comp"
                '            End If
                '        Range("O15") = "AEO/DBO/" & vbLf & "TTP/None"
                '        Else
                '        Range("K15") = "Comp"
                '        Range("O15") = "Lic Pen Pts (LE/NE/3-10)"
                '        End If
                '    tmpCompHeaderCheck = True
                '    End If
                ' Cycle the offences
                Do
                    Range("A" & tmpResultsRow) = tmpSurname & IIf(tmpForename = "", "", ", " & tmpForename)
                    Range("B" & tmpResultsRow) = Worksheets("Main").Range("S" & tmpDefRow) ' Case
                    If InStr(Worksheets("Main").Range("B" & tmpRow), ":") > 0 Then
                        Range("C" & tmpResultsRow) = Left(Worksheets("Main").Range("B" & tmpRow), InStr(Worksheets("Main").Range("B" & tmpRow), ":") - 1) ' Offence Number
                        End If
                    Range("C" & tmpResultsRow).NumberFormat = "0"
                    
                    Range(CaseFolderPathColumn & tmpResultsRow) = Worksheets("Main").Range(CaseFolderPathColumn & tmpDefRow - 1)
                    
                    Range(AdjCourtColumn & tmpResultsRow) = Worksheets("Main").Range(AdjCourtColumn & tmpRow)
                    
                    tmpOffText = Worksheets("Main").Range(OffenceFullTextColumn & tmpRow)
                    Range(OffenceFullTextColumn & tmpResultsRow) = tmpOffText
                    
                    If Not Worksheets("Main").Range("B" & tmpRow).Comment Is Nothing Then
                        Call ApplyOffenceComment("Results", "C" & tmpResultsRow, Worksheets("Main").Range("B" & tmpRow).Comment.Text)
                        End If
                        
                    Range("D" & tmpResultsRow) = Worksheets("Main").Range("D" & tmpRow) ' Appears
                    Range("E" & tmpResultsRow) = Worksheets("Main").Range("E" & tmpRow) ' LAP
                    
                    Worksheets("Main").Range("F" & tmpRow & ":" & "T" & tmpRow).Copy Destination:=Range("F" & tmpResultsRow)
                    Range("U" & tmpResultsRow).Value = Worksheets("Main").Range("U" & tmpRow).Value ' Add the note manually
                    Range("W" & tmpResultsRow) = tmpRow
                    tmpRow = tmpRow + 1
                    tmpResultsRow = tmpResultsRow + 1
                Loop Until Worksheets("Main").Range("B" & tmpRow).Interior.ColorIndex <> OffenceColour
                End If
            End If
        tmpRow = tmpRow + 1
    Loop Until tmpRow > Worksheets("Main").Cells(Worksheets("Main").Rows.Count, "B").End(xlUp).Row
    If tmpResultsRow = 16 Then Importing = False: Exit Sub
    Range("A16:A" & tmpResultsRow - 1).RowHeight = 25
    Range("A16:" & ButtonColumn & tmpResultsRow - 1).WrapText = True
    Range("A16:" & ButtonColumn & tmpResultsRow - 1).Interior.ColorIndex = 2
    Range("A16:" & ButtonColumn & tmpResultsRow - 1).Borders.LineStyle = xlContinuous
    Range("A16:" & ButtonColumn & tmpResultsRow - 1).VerticalAlignment = xlCenter
    
    Range("K16:N" & tmpResultsRow - 1).NumberFormat = "|fffd|#,##0.00"
    If Worksheets("Main").Range("P7") <> "Proceeds Of Crime Act" Then
        Range("I16:I" & tmpResultsRow - 1).NumberFormat = "|fffd|#,##0.00"
        Range("Q16:Q" & tmpResultsRow - 1).NumberFormat = "dd/mm/yyyy"
        Range("H16:H" & tmpResultsRow - 1).HorizontalAlignment = xlCenter
        End If
        
    Range("A16:T" & tmpResultsRow - 1).HorizontalAlignment = xlLeft
    Range("C16:E" & tmpResultsRow - 1).HorizontalAlignment = xlCenter
    Range("O16:P" & tmpResultsRow - 1).HorizontalAlignment = xlCenter
    Range("T16:T" & tmpResultsRow - 1).HorizontalAlignment = xlCenter
    ' Set Button info
    Range("W16:W" & tmpResultsRow - 1).Font.ColorIndex = 2
    Range(ButtonColumn & "16:" & ButtonColumn & tmpResultsRow - 1).Interior.ColorIndex = BadColour
    Range(ButtonColumn & "16:" & ButtonColumn & tmpResultsRow - 1) = "X"
    Range(ButtonColumn & "16:" & ButtonColumn & tmpResultsRow - 1).Font.Name = "Ariel"
    Range(ButtonColumn & "16:" & ButtonColumn & tmpResultsRow - 1).Font.Size = 14
    Range(ButtonColumn & "16:" & ButtonColumn & tmpResultsRow - 1).HorizontalAlignment = xlCenter
    
    Range("A16:T" & tmpResultsRow - 1).EntireRow.AutoFit
    
    If Worksheets("Main").Range("P7") <> "Proceeds Of Crime Act" Then
        ' Unmerge the fine column
        Range("K16:K" & tmpResultsRow).WrapText = False
        Range("K16:K" & tmpResultsRow).UnMerge
        tmpRow = 16
        Do
            If Range("A" & tmpRow).RowHeight < 25 Then Range("A" & tmpRow).RowHeight = 25
            tmpRow = tmpRow + 1
        Loop Until tmpRow > tmpResultsRow
        ' Flip the fine and comp columns
        tmpRow = 16
        Do
            tmpText = Range("L" & tmpRow)
            Range("L" & tmpRow) = Range("K" & tmpRow)
            Range("K" & tmpRow) = tmpText
            tmpRow = tmpRow + 1
        Loop Until tmpRow > tmpResultsRow
        End If
    
    MaxRow = Worksheets("Results").Cells(Worksheets("Results").Rows.Count, "B").End(xlUp).Row
    If tmpSplitActivated = False Then txtSplit = "All Cases" ': Call txtSplit_Click
    Call RestoreMarkedArray
    Call PerformCount
    Application.ScreenUpdating = True
    Importing = False
    
    '***Eucs - 25.08.2017
    '   Reset the button size if necessary
    Call FixActiveXObj(Me.Name, Me.btnImportResults.Name)
    '***
End Sub

Private Sub SetResultHeader()
    Select Case Worksheets("Main").Range("P7")
        Case Is = "Proceeds Of Crime Act"
            Range("A15:AE15").AutoFilter
            Range("H15:J15").Merge
            Range("K15:L15").Merge
            Range("M15:N15").Merge
            Range("O15:P15").Merge
            Range("A15:X15") = ""
            Range("A15") = "Defendant"
            Range("B15") = "Case"
            Range("C15") = "App No."
            Range("D15") = "App"
            Range("E15") = "IP"
            Range("F15") = ""
            Range("G15") = "Action"
            Range("H15") = ""
            Range("K15") = "Amount"
            Range("M15") = "Interpates Costs"
            Range("O15") = ""
            Range("Q15") = "Directions"
            Range("R15") = "Adjournment Reason"
            Range("S15") = "Adjourn Date"
            Range("T15") = ""
            Range("U15") = "Notes"
            Range("V15") = "T"
            Range("W15") = "T"
            Range("X15") = "Ok"
            Range("A15:AE15").AutoFilter
        Case Else
            Range("A15:AE15").AutoFilter
            Range("A15:X15").UnMerge
            Range("A15") = "Defendant"
            Range("B15") = "Case"
            Range("C15") = "Off No."
            Range("D15") = "App"
            Range("E15") = "LAP"
            Range("F15") = "Plea"
            Range("G15") = "Action"
            Range("H15") = "GP" & vbLf & Cr
            Range("I15") = "Income"
            Range("J15") = "Band"
            Range("L15") = "Fine/NSP"
            Range("M15") = "FCosts"
            Range("N15") = "V/S"
            Range("P15") = "COL"
            Range("Q15") = "Pay By Date"
            Range("R15") = "Adjournment Reason"
            Range("S15") = "Adjourn Date"
            Range("T15") = "Disq/EH (YN/EH)"
            Range("U15") = "Notes"
            Range("V15") = "T"
            Range("W15") = "T"
            Range("X15") = "Ok"
            If Worksheets("Main").Range("P7") <> "Traffic" And Worksheets("Main").Range("P7") <> "Traffic (SJP)" Then
                If Worksheets("Main").Range("P7") = "DVLA (SJP)" Or Worksheets("Main").Range("P7") = "DVLA" Then
                    Range("K15") = "Bk Duty/" & vbLf & "Add Pen"
                    Else
                    Range("K15") = "Comp"
                    End If
                Range("O15") = "AEO/DBO/" & vbLf & "TTP/None"
                Else
                Range("K15") = "Comp"
                Range("O15") = "Lic Pen Pts (LE/NE/3-10)"
                End If
            Range("A15:AE15").AutoFilter
    End Select
End Sub


Function ScanForAmendments(tmpMyRow As Integer, tmpResultsRow As Integer, tmpOriginalRow As Integer) As Boolean
    Dim app As New Excel.Application
    Dim wb As Workbook
    Dim wsI As Worksheet
    Dim tmpCount As Integer
    Dim tmpMainRow As Integer
    Dim tmpFileName As String
    Dim tmpEmail As String
    Dim tmpAmendmentFile As String
    Dim tmpDateCalc As String
    Dim tmpMostRecentDate As String
    Dim tmpNextDate As String
    Dim tmpMostRecentAmendmentFile As String
    Dim tmpMyCaseNumber As String
    Dim tmpAmendmentOffCount As String
    Dim tmpColCount As Integer

    If Len(Worksheets("Main").Range(CaseFolderPathColumn & tmpMyRow - 1)) = 0 Then Exit Function

    app.Visible = False
    app.DisplayAlerts = False
    tmpAmendmentFile = Dir(Worksheets("Main").Range(CaseFolderPathColumn & tmpMyRow - 1) & "\*Amended on*.xl*")
    'If Len(tmpAmendmentFile) = 0 Then tmpAmendmentFile = Dir(Worksheets("Main").Range(CaseFolderPathColumn & tmpMyRow - 1) & "\*Amended on*.xlsx")
    If Len(tmpAmendmentFile) = 0 Then Exit Function
    Do While Len(tmpAmendmentFile) > 0
        tmpDateCalc = Trim(Mid(tmpAmendmentFile, InStr(tmpAmendmentFile, "Amended on ") + 11))
        If tmpMostRecentDate = "" Then
            tmpMostRecentDate = Mid(tmpDateCalc, 9, 2) & "/" & Mid(tmpDateCalc, 6, 2) & "/" & Left(tmpDateCalc, 4) & " " & Mid(tmpDateCalc, 12, 2) & ":" & Mid(tmpDateCalc, 14, 2) & ":" & Mid(tmpDateCalc, 16, 2)
            tmpMostRecentAmendmentFile = tmpAmendmentFile
            Else
            tmpNextDate = Mid(tmpDateCalc, 9, 2) & "/" & Mid(tmpDateCalc, 6, 2) & "/" & Left(tmpDateCalc, 4) & " " & Mid(tmpDateCalc, 12, 2) & ":" & Mid(tmpDateCalc, 14, 2) & ":" & Mid(tmpDateCalc, 16, 2)
            If CDate(tmpMostRecentDate) < CDate(tmpNextDate) Then tmpMostRecentDate = tmpNextDate: tmpMostRecentAmendmentFile = tmpAmendmentFile
            End If
        tmpAmendmentFile = Dir()
    Loop
    If Len(tmpMostRecentAmendmentFile) = 0 Or CDate(tmpMostRecentDate) < CDate(Range("B6")) Then Exit Function
    tmpMyCaseNumber = Worksheets("Main").Range("S" & tmpMyRow)
    Set wb = app.Workbooks.Open(Worksheets("Main").Range(CaseFolderPathColumn & tmpMyRow - 1) & "\" & tmpMostRecentAmendmentFile)
    
    tmpAmendmentOffCount = 11
    Do
        ' Map the amended offence information
        Range("A" & tmpResultsRow) = wb.Worksheets("Result").Range("B9") & vbLf & "(Amended on " & tmpMostRecentDate & ")"
        Range("B" & tmpResultsRow) = wb.Worksheets("Result").Range("S9")
        Range("C" & tmpResultsRow) = Val(wb.Worksheets("Result").Range("B" & tmpAmendmentOffCount))
        
        tmpColCount = 68
        Do
            Range(Chr$(tmpColCount) & tmpResultsRow) = wb.Worksheets("Result").Range(Chr$(tmpColCount) & tmpAmendmentOffCount)
            tmpColCount = tmpColCount + 1
        Loop Until tmpColCount > 85
        Range(AdjCourtColumn & tmpResultsRow) = wb.Worksheets("Result").Range(AdjCourtColumn & tmpAmendmentOffCount)

        If Len(Range("S" & tmpResultsRow).Value) > 16 Then
            Range("S" & tmpResultsRow) = Format(Range("S" & tmpResultsRow), "dd/mm/yyyy hh:mm")
            End If
        
        ' *** Need to map over the court change (hidden column) ***
        Range(CaseFolderPathColumn & tmpResultsRow) = Worksheets("Main").Range(CaseFolderPathColumn & tmpMyRow - 1)
        Range("W" & tmpResultsRow) = tmpOriginalRow + (tmpAmendmentOffCount - 11)
        
        tmpAmendmentOffCount = tmpAmendmentOffCount + 1
        tmpResultsRow = tmpResultsRow + 1
    Loop Until Len(wb.Worksheets("Result").Range("B" & tmpAmendmentOffCount)) = 0
    ScanForAmendments = True
    wb.Close SaveChanges:=No
    app.Quit
    Set wb = Nothing
    Set app = Nothing
End Function

Private Sub btnMarkCompleted_Click()
    Dim tmpRow As Integer
    Importing = True
    tmpRow = 16
    Do
        If Range("A" & tmpRow).EntireRow.Hidden = False Then
            If Range(ButtonColumn & tmpRow) <> Chr$(60) Then
                Range("A" & tmpRow & ":" & ValidationColumn & tmpRow).Interior.ColorIndex = GoodColour
                Range(ButtonColumn & tmpRow).Interior.ColorIndex = GoodColour
                Range(ButtonColumn & tmpRow).Font.Name = "Wingdings"
                Range(ButtonColumn & tmpRow) = Chr$(252)
                Range(ButtonColumn & tmpRow).Font.Color = 0
                If Not Range(ButtonColumn & tmpRow).Comment Is Nothing Then Range(ButtonColumn & tmpRow).ClearComments
                End If
            End If
        tmpRow = tmpRow + 1
    Loop Until tmpRow > Worksheets("Results").Cells(Worksheets("Results").Rows.Count, "B").End(xlUp).Row
    Importing = False
    Call PerformCount
    Call BuildMarkedArray
    
    '***Eucs - 25.08.2017
    '   Reset the button size if necessary
    Call FixActiveXObj(Me.Name, Me.btnMarkCompleted.Name)
    '***
End Sub

Private Sub btnMarkUnCompleted_Click()
    Dim tmpRow As Integer
    Importing = True
    tmpRow = 16
    Do
        If Range("A" & tmpRow).EntireRow.Hidden = False Then
            If Range(ButtonColumn & tmpRow) <> Chr$(60) Then
                Range("A" & tmpRow & ":" & ValidationColumn & tmpRow).Interior.ColorIndex = 2
                Range(ButtonColumn & tmpRow).Interior.ColorIndex = BadColour
                Range(ButtonColumn & tmpRow).Font.Name = "Ariel"
                Range(ButtonColumn & tmpRow).Font.Color = 0
                Range(ButtonColumn & tmpRow) = "X"
                If Not Range(ButtonColumn & tmpRow).Comment Is Nothing Then Range(ButtonColumn & tmpRow).ClearComments
                End If
            End If
        tmpRow = tmpRow + 1
    Loop Until tmpRow > Worksheets("Results").Cells(Worksheets("Results").Rows.Count, "B").End(xlUp).Row
    Importing = False
    Call PerformCount
    Call BuildMarkedArray
    
    '***Eucs - 25.08.2017
    '   Reset the button size if necessary
    Call FixActiveXObj(Me.Name, Me.btnMarkUnCompleted.Name)
    '***
End Sub

Private Sub btnSendViaEmail_Click()
    Dim tmpProsRow As Integer
    tmpProsRow = 41
    Do
        If Worksheets("Splash").Range("A" & tmpProsRow) = Sheet1.txtProsecutorType And Len(Worksheets("Splash").Range("B" & tmpProsRow)) > 0 Then
            Call SendViaEmail(Worksheets("Splash").Range("B" & tmpProsRow), Worksheets("Splash").Range("F" & tmpProsRow))
            End If
        tmpProsRow = tmpProsRow + 1
    Loop Until Worksheets("Splash").Range("A" & tmpProsRow) = ""
End Sub

Private Sub SendViaEmail(tmpURN As String, tmpProsEmail As String)
    Dim olApp As Object
    Dim objMail As Object
    Dim tmpExtension As String
    Dim app As New Excel.Application
    Dim wbI As Workbook, wbO As Workbook
    Dim wsI As Worksheet, wsO As Worksheet
    Dim tmpCount As Integer
    Dim tmpMainRow As Integer
    Dim tmpFileName As String
    Dim tmpEmail As String

SendViaEmail_1:
    If Int(Application.Version) = 11 Then
        tmpExtension = ".xls"
        Else
        ' Keep at .xls for now
        tmpExtension = ".xls"
        End If
SendViaEmail_0:
    If tmpProsEmail = "" Then
        tmpEmail = InputBox("Please enter the email address of the prosecutor (URN Pre-Fix: " & IIf(tmpURN = "*", "All URN's", tmpURN) & ")")
        Else
        tmpEmail = tmpProsEmail
        End If
    If InStr(tmpEmail, "@") = 0 Then MsgBox "Error!  Invalid email address.", vbCritical: GoTo SendViaEmail_0
    If InStr(LCase(tmpEmail), "justice.gov.uk") = 0 And InStr(LCase(tmpEmail), "cjsm.net") = 0 And InStr(LCase(tmpEmail), "pnn.police") = 0 And InStr(LCase(tmpEmail), "police.uk") = 0 And InStr(LCase(tmpEmail), "gsi.gov.uk") = 0 Then MsgBox "Error!  The email address (" & tmpEmail & ") must be a secure email address eg PNN, police.uk, GSI or CJSM." & vbCrLf & vbCrLf & "GCSX email addresses or local authority addresses with GOV.UK DO NOT meet HMCTS data protection compliance.  In these instances please contact the prosecutor and advise them to obtain a CJSM email address via WWW.CJSM.NET", vbCritical: tmpProsEmail = "": GoTo SendViaEmail_0
    tmpEmail = LCase(tmpEmail)
    ToggleCutCopyAndPaste (True)
    app.Visible = False
    app.DisplayAlerts = False
    
    Set wbI = ThisWorkbook
    Set wsI = wbI.Sheets("Results")
    Set wbO = app.Workbooks.add
    
    With wbO
        Set wsO = wbO.Sheets("Sheet1")
        wsI.Range("A15:W" & wsI.Cells(wsI.Rows.Count, "A").End(xlUp).Row).Copy
        wsO.Range("A1").PasteSpecial xlPasteValues
        ' Sort column widths
        For tmpCount = 65 To 87
            wsO.Columns(Chr$(tmpCount)).ColumnWidth = wsI.Columns(Chr$(tmpCount)).ColumnWidth
        Next tmpCount
        ' Sort row heights
        wsO.Range("A1:A2000").EntireRow.AutoFit
        tmpCount = 1
        Do
            If wsO.Range("A" & tmpCount).RowHeight < 25 Then wsO.Range("A" & tmpCount).RowHeight = 25
            tmpCount = tmpCount + 1
        Loop Until Len(wsO.Range("A" & tmpCount)) = 0
        
        ' Add offence comments
        tmpCount = 2
        Do
            If Not wsI.Range("C" & tmpCount + 14).Comment Is Nothing Then
                Call AddEmailOffenceComment(wsO, "C" & tmpCount, wsI.Range("C" & tmpCount + 14).Comment.Text)
                End If
            tmpCount = tmpCount + 1
        Loop Until Len(wsO.Range("A" & tmpCount)) = 0
        ' Replace Case with URN
        wsO.Range("B1") = "URN"
        tmpCount = 2
        Do
            tmpMainRow = wsO.Range("W" & tmpCount)
            If tmpMainRow > 15 Then
                Do
                    tmpMainRow = tmpMainRow - 1
                Loop Until tmpMainRow < 15 Or Worksheets("Main").Range(URNColumn & tmpMainRow) = "URN"
                End If
            If tmpURN = "*" Then
                wsO.Range("B" & tmpCount) = Worksheets("Main").Range(URNColumn & tmpMainRow + 1)
                tmpCount = tmpCount + 1
                Else
                If Left(Worksheets("Main").Range(URNColumn & tmpMainRow + 1), Len(tmpURN)) = tmpURN Then
                    wsO.Range("B" & tmpCount) = Worksheets("Main").Range(URNColumn & tmpMainRow + 1)
                    tmpCount = tmpCount + 1
                    Else
                    wsO.Rows(tmpCount).EntireRow.Delete
                    End If
                End If
        Loop Until Len(wsO.Range("A" & tmpCount)) = 0
        wsO.Range("A2:" & ButtonColumn & tmpCount).Interior.ColorIndex = 2
        wsO.Range("A2:" & ButtonColumn & tmpCount).Borders.LineStyle = xlContinuous
        wsO.Range("A1").Select
        wbO.Worksheets("Sheet1").Name = Right(wsI.Range("B6"), 4) & "-" & Mid(wsI.Range("B6"), 4, 2) & "-" & Left(wsI.Range("B6"), 2) & " " & Format((wsI.Range("B7")), "HHMM") & " in Court " & Range("B8")
        tmpFileName = "Case Results " & Left(wsI.Range("B6"), 2) & "-" & Mid(wsI.Range("B6"), 4, 2) & "-" & Right(wsI.Range("B6"), 4) & " " & Format((wsI.Range("B7")), "HHMM") & " in Court " & Range("B8") & tmpExtension
        .SaveAs FileName:=wbI.Path & "\" & tmpFileName
        .Close False
    End With
    ToggleCutCopyAndPaste (False)
    app.DisplayAlerts = True
    app.Quit
    Set app = Nothing
    
    '***Eucs - 24.08.2017
    'Set olApp = Outlook.Application
    Set olApp = CreateObject("Outlook.Application")
    '***
    Set objMail = olApp.CreateItem(olMailItem)
    With objMail
        .Subject = "Case Results : " & wsI.Range("B5") & " (" & wsI.Range("B6") & " at " & Format(wsI.Range("B7"), "HH:MM") & " In Court " & wsI.Range("B8") & ")"
        .Body = ""
        .Recipients.add tmpEmail
        .Attachments.add wbI.Path & "\" & tmpFileName
        .Recipients.ResolveAll
        .display
    End With
    Set objMail = Nothing
    Set olApp = Nothing
    Kill wbI.Path & "\" & tmpFileName
    
    '***Eucs - 25.08.2017
    '   Reset the button size if necessary
    Call FixActiveXObj(Me.Name, Me.btnSendViaEmail.Name)
End Sub


Private Sub AddEmailOffenceComment(tmpWorkSheet As Worksheet, tmpRange As String, tmpComment As String)
    Dim tmpCommentShape As Long
    If Not tmpWorkSheet.Range(tmpRange).Comment Is Nothing Then Exit Sub
    With tmpWorkSheet.Range(tmpRange)
        .AddComment tmpComment
        .Comment.Shape.TextFrame.AutoSize = True
        .Comment.Shape.AutoShapeType = msoShapeRoundedRectangle
        .Comment.Shape.Line.ForeColor.RGB = RGB(0, 0, 0)
        .Comment.Shape.Line.BackColor.RGB = RGB(255, 255, 255)
        .Comment.Shape.Fill.Visible = msoTrue
        If tmpComment = tmpWorkSheet.Range(OffenceFullTextColumn & Mid(tmpRange, 2)) Then
            .Comment.Shape.Fill.ForeColor.RGB = RGB(58, 82, 184)
            Else
            .Comment.Shape.Fill.ForeColor.RGB = RGB(0, 82, 0)
            End If
        .Comment.Shape.Fill.OneColorGradient msoGradientDiagonalUp, 1, 0.23
        With .Comment.Shape.TextFrame.Characters.Font
            .Size = 12
            .ColorIndex = 2
        End With
        If .Comment.Shape.Width > 500 Then
            tmpCommentShape = .Comment.Shape.Width * .Comment.Shape.Height
            .Comment.Shape.Width = 500
            .Comment.Shape.Height = (tmpCommentShape / 625) * 1.4
            End If
    End With
End Sub

Private Sub btnUpdateCases_Click()
    Dim tmpRow As Long
    Dim tmpSourcePath As String
    Dim tmpDestinationPath As String
    Dim tmpSJPSession As Boolean
    Dim tmpDestCaseHearingFolder As String
    Dim tmpDIRCase As String
    Dim tmpMoveSuccess As String
    Dim tmpBad As Boolean
    Dim tmpBadCount As Integer
    Dim tmpBadCases As String
    Dim tmpOriginalDate As String
    Dim tmpMainRow As Long
    Dim tmpUSCount As Integer
    Dim tmpSubject2 As String
    Dim tmpTrafficArchive As String
    Dim tmpAction As String
    Dim tmpLiveFilesPath As String
    Dim tmpErrorMessage As String
    Dim tmpSuccessMessage As String
    Dim tmpDefaultCourt As String
    Dim tmpOtherCourts(30) As String
    Dim tmpOtherCourtsCount As Integer
    
    Dim tmpOtherCourtsNonTrial(30) As String
    Dim tmpOtherCourtsCountNonTrial As Integer
    
    Dim i As Integer
    Dim tmpCourtType As String
    Dim tmpAdjournEmail As String
    Dim tmpSubject As String
    Dim tmpURN As String
    Dim tmpDOH As String
    Dim tmpKeepInSJP As Boolean
    Dim tmpName As String
    Dim tmpUpdateStatistics As Boolean
    
    Dim ST_TotalCases As Integer
    Dim ST_AdjDisqSJP As Integer
    Dim ST_AdjDisqCourt As Integer
    Dim ST_AdjTrial As Integer
    Dim ST_AdjOtherSJP As Integer
    Dim ST_AdjOtherCourt As Integer
    Dim ST_ProvedInAbsence As Integer
    Dim ST_Fined As Integer
    Dim ST_AbsoluteDischarge As Integer
    Dim ST_ConditionalDischarge As Integer
    Dim ST_Withdrawn As Integer
    Dim ST_Dsimissed As Integer
    Dim ST_NEODismissed As Integer
    Dim ST_Disqualified As Integer

    Dim app As New Excel.Application
    Dim wb As Workbook
    Dim tmpStatsRow As Long
    Dim tmpDailyCourtListFolder As String
    Dim wapp As Object
    Dim tmpKeepWordAppOpen As Boolean
    
    Dim olApp As Object
    Dim objMail As Object
    
    '***Eucs - 25.08.2017
    '   Reset the button size if necessary
    Call FixActiveXObj(Me.Name, Me.btnUpdateCases.Name)
    '***
    
    If Worksheets("Main").Range("P7") = "Pre Charge Bail" Then MsgBox "Error!  Case movement is not required on Pre Charge Bail sheets": Exit Sub
    
    If txtSplit <> "All Cases" Or txtSingleOffences <> "All Cases" Then MsgBox "Error!  You must set the filters to 'All Cases' before pressing case movement": Exit Sub
    
    If Val(Range("L6")) > 0 Then
        MsgBox "Error!  Some of the cases listed are not marked as resulted." & vbLf & "All cases must be marked as resulted before running the Case Movement." & vbLf & "This is so the statistics count functions correctly"
        Exit Sub
        End If
    If Len(Range("B3")) = 0 Or InStr(Range("B3"), "\") = 0 Then MsgBox "Error!  You must have a valid Traffic folder path set.", vbCritical: Exit Sub
    If MsgBox("Caution!  This will physically copy all adjourned case folders to their new dates of hearing and move any completed SJP cases to the Archive folder for SJP." & vbLf & vbLf & "Any cases adjourned within SJP will remain in the live SJP folder." & vbLf & vbLf & "YOU MUST MAKE SURE THAT NO USERS ARE IN THE SJP FOLDERS AND FILES BEFORE USING THIS FUNCTION!" & vbLf & vbLf & "ANY FOLDERS MARKED BLACK WILL NEED TO BE LOOKED AT MANUALLY." & vbLf & vbLf & "Do you want to continue?", vbYesNo + vbExclamation) = vbNo Then Exit Sub
    
    ' Test if Outlook is available
    On Error GoTo btnUpdateCases_Click_Error
    Set olApp = CreateObject("Outlook.Application")
    Set objMail = olApp.CreateItem(olMailItem)
    objMail.display
    objMail.Delete
    Set objMail = Nothing
    Set olApp = Nothing
    On Error GoTo 0
    
    On Error Resume Next
    Set wapp = GetObject(, "Word.Application")
    wapp.Visible = False
    tmpKeepWordAppOpen = True
    If Err.Number <> 0 Then
        'Launch a new instance of Word
        Err.Clear
        Set wapp = CreateObject("Word.Application")
        If Err.Number <> 0 Then MsgBox "Error:  Unable to open Microsoft Word to create the disqualification notices": Exit Sub
        tmpKeepWordAppOpen = False
        End If
    On Error GoTo 0
    
    ' Check for the statistics file and if not present copy a blank one in
    If InStr(Range("B3"), "\") > 0 Then
        tmpDailyCourtListFolder = Dir(Range("B3") & "\*daily*", vbDirectory)
        If tmpDailyCourtListFolder <> "" Then
            If Dir(Range("B3") & "\" & tmpDailyCourtListFolder & "\Case Results Backup", vbDirectory) = "" Then MkDir Range("B3") & "\" & tmpDailyCourtListFolder & "\Case Results Backup"
            If FileExists(Range("B3") & "\" & tmpDailyCourtListFolder & "\Case Results Backup\CaseStatistics.xlsx") = False Then
                FileCopy "S:\Magistrates Courts\GMWORK\Shared\GM Live Files\Configuration\Other Files\Case Resulter Config\CaseStatistics.xlsx", Range("B3") & "\" & tmpDailyCourtListFolder & "\Case Results Backup\CaseStatistics.xlsx"
                End If
            tmpUpdateStatistics = True
            Else
            tmpUpdateStatistics = False
            End If
        Else
        tmpUpdateStatistics = False
        End If
    ' Get the default court and other courts
    tmpRow = 2
    tmpOtherCourtsCount = 0
    tmpOtherCourtsCountNonTrial = 0
    Do
        If Worksheets("Courts").Range("E" & tmpRow) = "X" Then tmpDefaultCourt = Worksheets("Courts").Range("B" & tmpRow)
        If Worksheets("Courts").Range("F" & tmpRow) = "X" Then tmpOtherCourts(tmpOtherCourtsCount) = Worksheets("Courts").Range("B" & tmpRow): tmpOtherCourtsCount = tmpOtherCourtsCount + 1
        If Worksheets("Courts").Range("G" & tmpRow) = "X" Then tmpOtherCourtsNonTrial(tmpOtherCourtsCountNonTrial) = Worksheets("Courts").Range("B" & tmpRow): tmpOtherCourtsCountNonTrial = tmpOtherCourtsCountNonTrial + 1
        tmpRow = tmpRow + 1
    Loop Until Len(Worksheets("Courts").Range("A" & tmpRow)) = 0
    tmpOtherCourtsCount = tmpOtherCourtsCount - 1
    tmpOtherCourtsCountNonTrial = tmpOtherCourtsCountNonTrial - 1
    
    ' Cycle the results looking for cases which have been checked as green
    tmpRow = 16
    tmpBadCount = 0
    tmpBadCases = ""
    Importing = True
    tmpLiveFilesPath = Range("M3")
    If InStr(LCase(tmpLiveFilesPath), "\") = 0 Then MsgBox "Error!  There is a problem with the Live Files path", vbCritical: Exit Sub
    Do
        tmpBad = False
        If Range(ButtonColumn & tmpRow).Interior.ColorIndex = GoodColour Then
            ' Get the top position of the case on the main sheet
            tmpMainRow = Range("W" & tmpRow)
            Do
            tmpMainRow = tmpMainRow - 1
            Loop Until Worksheets("Main").Range("B" & tmpMainRow) = "Defendant"
            tmpMainRow = tmpMainRow + 1
            ' Check if the case is in the SJP court and set the SJP Session flag
            If Val(Worksheets("Main").Range("Q" & tmpMainRow)) >= 75 And Val(Worksheets("Main").Range("Q" & tmpMainRow)) <= 77 Then
                tmpSJPSession = True
                Else
                tmpSJPSession = False
                End If
            ' ***** Action = Adjourned for Court Hearing, Adjourned PIA or Adjourned PIA (SJP) then copy the case to a new hearing date and move the original case from the SJP folder to the archive *****
            AdjournCourt = ""
            AdjournDate = ""
            AdjournReason = ""
            tmpActionRow = 0
            tmpAction = ScanCaseActions(Range("B" & tmpRow)) ' this gets the action from all related offences - Adjournment takes precedent and also sets the AdjourCourt
            
            If InStr(LCase(tmpAction), "adjourned") > 0 And InStr(LCase(AdjournReason), "disqual") > 0 And InStr(LCase(AdjournReason), "notice to issue") > 0 Then ST_AdjDisqSJP = ST_AdjDisqSJP + 1
            If InStr(LCase(tmpAction), "adjourned") > 0 And InStr(LCase(AdjournReason), "disqual") > 0 And InStr(LCase(AdjournReason), "summons to issue") > 0 Then ST_AdjDisqCourt = ST_AdjDisqCourt + 1
            If tmpAction = "Adjourned for Court Hearing" And (InStr(LCase(AdjournReason), "trial") > 0 Or InStr(LCase(AdjournReason), "special reasons") > 0) Then ST_AdjTrial = ST_AdjTrial + 1
            If tmpAction = "Adjourned (SJP)" And InStr(LCase(AdjournReason), "disqual") = 0 Then ST_AdjOtherSJP = ST_AdjOtherSJP + 1
            If tmpAction = "Adjourned for Court Hearing" And (InStr(LCase(AdjournReason), "trial") = 0 And InStr(LCase(AdjournReason), "special reasons") = 0 And InStr(LCase(AdjournReason), "disqual") = 0) Then ST_AdjOtherCourt = ST_AdjOtherCourt + 1
            
            If tmpAction = "Fine" Then ST_Fined = ST_Fined + 1
            If tmpAction = "Proved In Absence" Or tmpAction = "Proved In Abs (SJP)" Then ST_ProvedInAbsence = ST_ProvedInAbsence + 1
            If tmpAction = "Absolute Discharge" Then ST_AbsoluteDischarge = ST_AbsoluteDischarge + 1
            If tmpAction = "Conditional Discharge" Then ST_ConditionalDischarge = ST_ConditionalDischarge + 1
            If tmpAction = "Withdrawn" Then ST_Withdrawn = ST_Withdrawn + 1
            If tmpAction = "Dismissed" Then ST_Dsimissed = ST_Dsimissed + 1
            If tmpAction = "NEO Dismissed" Then ST_NEODismissed = ST_NEODismissed + 1
            If ScanCaseDisqualification(Range("B" & tmpRow)) = True Then ST_Disqualified = ST_Disqualified + 1
            If tmpAction = "Adjourned (SJP)" Then tmpKeepInSJP = True Else tmpKeepInSJP = False    'Or (tmpAction = "Adjourned PIA (SJP)" And Worksheets("Splash").Range("A21") = "No")
            If Worksheets("Splash").Range("A21") = "Yes" Then
                If ScanForNoticeToIssue(Range("B" & tmpRow)) = True Then
                    tmpKeepInSJP = True
                    Call PrintDisqForm(wapp, tmpActionRow, tmpMainRow)
                    Else
                    tmpKeepInSJP = False
                    End If
                End If
            If tmpAction = "Adjourned (SJP)" Or (tmpAction = "Adjourned PIA (SJP)" And tmpKeepInSJP = True) Then GoTo UpdateCases_0
            If (tmpAction = "Adjourned PIA (SJP)" And tmpKeepInSJP = False) Or (tmpKeepInSJP = False And Worksheets("Splash").Range("A21") = "Yes" And InStr(tmpAction, "Adj") > 0) Or (tmpAction = "Adjourned for Court Hearing" Or tmpAction = "Adjourned PIA") And IsDate(AdjournDate) = True And tmpActionRow > 0 Then
                tmpSourcePath = Range(CaseFolderPathColumn & tmpRow)
                If tmpSourcePath <> "" Then
                    ' Determine if the Court is a foreign court & check sub Courts in your area
                    tmpCourtType = ""
                    If tmpDefaultCourt = AdjournCourt Then
                        tmpCourtType = "Default"
                        Else
                        If InStr(LCase(AdjournReason), "trial") > 0 Then
                            For i = 0 To tmpOtherCourtsCount
                                If tmpOtherCourts(i) = AdjournCourt Then tmpCourtType = "Sub Default": Exit For
                            Next i
                            Else
                            For i = 0 To tmpOtherCourtsCountNonTrial
                                If tmpOtherCourtsNonTrial(i) = AdjournCourt Then tmpCourtType = "Sub Default": Exit For
                            Next i
                            End If
                        If tmpCourtType = "" Then tmpCourtType = "Foreign"
                        End If
                    
                    If InStr(LCase(AdjournReason), "trial") > 0 Then
'************************************************************ Adjourned for Trial ************************************************************
                        Select Case tmpCourtType
                        Case Is = "Foreign", "Sub Default"
                            ' Adjourned to foreign court
                            
                            ' Check for an email address to send to
                            tmpAdjournEmail = FindEmailForCourt(AdjournCourt, "D")
                            ' No valid email address for foreign court
                            If tmpAdjournEmail = "" Then
                                If Worksheets("Splash").Range("A32") = "Yes" Then GoTo UpdateCases_EmailTrialToCourtStore
                                tmpBad = True
                                tmpErrorMessage = "Error! The Adjourned Court does not have an email address, you must must notify them manually." & vbLf
                                tmpBadCount = tmpBadCount + 1
                                GoTo UpdateCases_0
                                End If
                            ' If a valid email address detected then ...
                            tmpSubject = Mid(tmpSourcePath, InStrRev(tmpSourcePath, "\") + 1) & " Initial Details Pros Case (TRAFFIC TRIAL)"
                            tmpMoveSuccess = SendCaseViaEmail(tmpAdjournEmail, tmpSourcePath, tmpSubject, "Please accept this adjournment for trial:-" & _
                                vbLf & vbLf & "From " & Worksheets("Main").Range("C5") & " on " & Worksheets("Main").Range("C6") & vbLf & vbLf & _
                                "To " & AdjournCourt & " at " & Range("S" & tmpActionRow))
                            If tmpMoveSuccess <> "Success" Then tmpBad = True: tmpErrorMessage = tmpMoveSuccess & vbLf
                            If tmpErrorMessage = "" Then tmpSuccessMessage = "Email sent to " & AdjournCourt & " (Address:- " & tmpAdjournEmail & ")"
UpdateCases_EmailTrialToCourtStore:
                            If Worksheets("Splash").Range("A32") = "Yes" Then
                                tmpMoveSuccess = SendToCourtStore(tmpSourcePath, tmpMainRow, tmpRow)
                                If tmpMoveSuccess <> "Success" Then tmpBad = True: tmpErrorMessage = tmpMoveSuccess & vbLf
                                If tmpErrorMessage = "" Then tmpSuccessMessage = tmpSuccessMessage & vbLf & "Email " & IIf(tmpAdjournEmail = "", "", "also ") & "sent to inbox@courtstore.justice.gov.uk"
                                End If
                            GoTo UpdateCases_0
                            
                        Case Else
                            If Worksheets("Splash").Range("A32") = "Yes" Then
                                ' Send email to court store
                                tmpMoveSuccess = SendToCourtStore(tmpSourcePath, tmpMainRow, tmpRow)
                                If tmpMoveSuccess <> "Success" Then tmpBad = True: tmpErrorMessage = tmpMoveSuccess & vbLf
                                If tmpErrorMessage = "" Then tmpSuccessMessage = "Email sent to inbox@courtstore.justice.gov.uk"
                                GoTo UpdateCases_0
                                Else
                                If InStr(tmpSourcePath, "\") > 0 Then
                                    ' Attempt to move the folder to the Live Files area
                                    tmpMoveSuccess = MoveFolder(tmpSourcePath, tmpLiveFilesPath & Mid(tmpSourcePath, InStrRev(tmpSourcePath, "\")), False)
                                    If tmpMoveSuccess <> "Success" Then
                                        tmpErrorMessage = tmpMoveSuccess
                                        tmpBad = True
                                        GoTo UpdateCases_AddMessage
                                        End If
                                    ' Update the creation date on the new folder
                                    tmpSuccessMessage = "This case has been moved to the Live Files folder (" & tmpLiveFilesPath & ")"
                                    GoTo UpdateCases_AddMessage
                                    Else
                                    tmpErrorMessage = "Source path is bad for this case: " & tmpSourcePath
                                    tmpBad = True
                                    GoTo UpdateCases_AddMessage
                                    End If
                                End If
                        End Select
                        Else
'************************************************************ Adjourned to a normal traffic hearing folder ************************************************************
                        If tmpDefaultCourt <> AdjournCourt And tmpCourtType = "Foreign" Then
                            ' Check for an email address to send to
                            tmpAdjournEmail = FindEmailForCourt(AdjournCourt, "C")
                            ' No valid email address for foreign court
                            If tmpAdjournEmail = "" Then
                                tmpBad = True
                                tmpErrorMessage = "Error! The Adjourned Court does not have an email address for normal traffic cases.  The Adjourned court will need notifying by emailing the case from the Archive folder."
                                tmpBadCount = tmpBadCount + 1
                                GoTo UpdateCases_0
                                End If
                            ' If a valid email address detected then ...
                            tmpURN = ""
                            tmpDOH = ""
                            tmpSubject = Mid(tmpSourcePath, InStrRev(tmpSourcePath, "\") + 1)
                            If InStr(tmpSubject, " ") > 0 Then tmpURN = Trim(Mid(tmpSubject, InStrRev(tmpSubject, " ")))
                            If IsDate(Left(Range("S" & tmpActionRow), 10)) = True Then tmpDOH = Left(Range("S" & tmpActionRow), 10)
                            If Len(tmpURN) > 0 And Len(tmpDOH) = 10 Then
                                tmpSubject = tmpURN & " *RESTRICTED* DOH: " & tmpDOH & " " & Replace(Range("A" & tmpActionRow), ",", "")
                                tmpMoveSuccess = SendCaseViaEmail(tmpAdjournEmail, tmpSourcePath, tmpSubject, "Please accept this adjournment for a road traffic case :-" & _
                                    vbLf & vbLf & "From " & Worksheets("Main").Range("C5") & " on " & Worksheets("Main").Range("C6") & vbLf & vbLf & _
                                    "To " & AdjournCourt & " at " & Range("S" & tmpActionRow))
                                If tmpMoveSuccess <> "Success" Then tmpBad = True: tmpErrorMessage = tmpMoveSuccess & vbLf
                                If tmpErrorMessage = "" Then tmpSuccessMessage = "Email sent to " & AdjournCourt & " (Address:- " & tmpAdjournEmail & ")"
                                GoTo UpdateCases_0
                                Else
                                tmpBad = True
                                tmpErrorMessage = "Error! Unable to locate the URN or DOH you must must notify the foreign court manually." & vbLf
                                tmpBadCount = tmpBadCount + 1
                                GoTo UpdateCases_0
                                End If
                            Else
                            ' If adjourn court hearing to store
                            If Worksheets("Splash").Range("A35") = "Yes" Then
                                ' Create email for hearing case to send to store
                                tmpAdjournEmail = "inbox@courtstore.justice.gov.uk"
                                tmpName = Replace(Range("A" & tmpRow), ",", " ")
                                If InStr(tmpName, " ") > 0 Then
                                    tmpName = UCase(Left(tmpName, InStr(tmpName, " "))) & StrConv(Mid(tmpName, InStr(tmpName, " ") + 1), vbProperCase)
                                    End If
                                ' Arrange the subject for emailing to the store
                                tmpName = Replace(tmpName, "  ", " ")
                                tmpSubject = Replace(Worksheets("Main").Range(URNColumn & tmpMainRow) & " " & tmpName, " ", "_")
                                tmpUSCount = 1
                                i = 0
                                Do
                                    If Mid(tmpSubject, tmpUSCount, 1) = "_" Then
                                        i = i + 1
                                        If i > 2 Then
                                            tmpSubject2 = Mid(tmpSubject, tmpUSCount + 1)
                                            tmpSubject2 = Replace(tmpSubject2, "_", " ")
                                            tmpSubject = Left(tmpSubject, tmpUSCount) & tmpSubject2
                                            Exit Do
                                            End If
                                        End If
                                    tmpUSCount = tmpUSCount + 1
                                Loop Until tmpUSCount > Len(tmpSubject)
                                tmpMoveSuccess = SendCaseViaEmail(tmpAdjournEmail, tmpSourcePath, tmpSubject, "")
                                If tmpMoveSuccess <> "Success" Then tmpBad = True: tmpErrorMessage = tmpMoveSuccess & vbLf
                                If tmpErrorMessage = "" Then tmpSuccessMessage = "Email sent to Court Store (Address:- " & tmpAdjournEmail & ")"
                                GoTo UpdateCases_0
                                Else
                                ' Adjourn court hearing to a hearing folder
                                tmpDestCaseHearingFolder = Range("B3") & "\" & Worksheets("Main").Range("U3") & "\" & Format(Range("S" & tmpActionRow), "yyyy-mm-dd")
                                ' Check the hearing folder and if it doesnt exist then create it
                                If FolderExists(tmpDestCaseHearingFolder) = False Then MkDir tmpDestCaseHearingFolder
                                ' Attempt to Move the folder
                                tmpMoveSuccess = MoveFolder(tmpSourcePath, tmpDestCaseHearingFolder & Mid(tmpSourcePath, InStrRev(tmpSourcePath, "\")), False)
                                If tmpMoveSuccess <> "Success" Then
                                    tmpErrorMessage = tmpMoveSuccess
                                    tmpBad = True
                                    GoTo UpdateCases_0
                                    End If
                                ' Update the creation date on the new folder
                                tmpSuccessMessage = "This case has been moved to the hearing folder (" & Format(Range("S" & tmpActionRow), "yyyy-mm-dd") & ")"
                                End If
                            GoTo UpdateCases_AddMessage
                            End If
                        End If
                    Else
                    ' Source Path Does Not Exist
                    tmpBadCount = tmpBadCount + 1
                    tmpBad = True
                    tmpErrorMessage = "Error!  Source folder does not exist"
                    GoTo UpdateCases_0
                    End If
                GoTo UpdateCases_0
                End If
UpdateCases_2:
'************************************************************ Action=Completion in the SJP session ************************************************************
            If tmpSJPSession = True Then
                If tmpAction = "Fine" Or tmpAction = "NEO Dismissed" Or tmpAction = "Dismissed" Or tmpAction = "Entered In Error" Or tmpAction = "Proved In Absence" Or tmpAction = "Proved In Abs (SJP)" Or tmpAction = "Withdrawn" Or tmpAction = "Absolute Discharge" Then
                    tmpSourcePath = Range(CaseFolderPathColumn & tmpRow)
                    If tmpSourcePath <> "" Then
                        ' If the original case was in the SJP folder then move it to the SJP archive folder
                        Call BuildSJPArchiveFolder(tmpTrafficArchive)
                        tmpMoveSuccess = MoveFolder(tmpSourcePath, tmpTrafficArchive & Mid(tmpSourcePath, InStrRev(tmpSourcePath, "\")), False)
                        If tmpMoveSuccess = "Success" Then tmpSuccessMessage = "Successfuly moved this case to the SJP Archive"
                        Call UpdateCasesAsCopied(Range("B" & tmpRow), tmpMoveSuccess, tmpSuccessMessage)
                        If tmpMoveSuccess <> "Success" Then tmpBadCount = tmpBadCount + 1
                        GoTo UpdateCases_1
                        Else
                        ' Source Path Does Not Exist
                        tmpBadCount = tmpBadCount + 1
                        tmpBad = True
                        tmpErrorMessage = "Error!  Source folder does not exist"
                        GoTo UpdateCases_0
                        End If
                    End If
                End If
            Else
            GoTo UpdateCases_1
            End If
UpdateCases_0:
        If tmpAction = "Not Completed" Then
            Call UpdateCasesAsCopied(Range("B" & tmpRow), "Success", "This case has been ignored")
            End If
        If tmpAction = "Adjourned (SJP)" Or tmpKeepInSJP = True Then
            Call UpdateCasesAsCopied(Range("B" & tmpRow), "Success", "This case is adjourned in the SJP Court so has not been moved")
            End If
        If Range(ButtonColumn & tmpRow).Interior.ColorIndex = GoodColour Then
            If tmpSJPSession = True Then
                ' Archive if an SJP Case
                Call BuildSJPArchiveFolder(tmpTrafficArchive)
                If tmpSourcePath <> "" Then
                    tmpMoveSuccess = MoveFolder(tmpSourcePath, tmpTrafficArchive & Mid(tmpSourcePath, InStrRev(tmpSourcePath, "\")), False)
                    Else
                    tmpMoveSuccess = "Error!  Source folder does not exist"
                    tmpBad = True
                    End If
                If tmpMoveSuccess = "Success" Then
                    tmpSuccessMessage = tmpSuccessMessage & vbLf & "The case was in an SJP session and has been archived successfully."
                    If tmpErrorMessage <> "" Then tmpErrorMessage = tmpErrorMessage & vbLf & tmpSuccessMessage
                    Else
                    tmpErrorMessage = tmpErrorMessage & tmpMoveSuccess
                    tmpBad = True
                    End If
                End If
UpdateCases_AddMessage:
            If tmpBad = True Then
                Call UpdateCasesAsCopied(Range("B" & tmpRow), tmpErrorMessage, "")
                Else
                Call UpdateCasesAsCopied(Range("B" & tmpRow), "Success", tmpSuccessMessage)
                End If
            End If
UpdateCases_1:
        tmpErrorMessage = ""
        tmpSuccessMessage = ""
        tmpRow = tmpRow + 1
    Loop Until Range("A" & tmpRow) = ""
    Importing = False
    Call PerformCount
    Call AutoArchive

UpdateStatistics:
    If tmpUpdateStatistics = True Then
        ' Check the statistics file to see if the row already exists and set the update row
        app.Visible = False
        Set wb = app.Workbooks.Open(Range("B3") & "\" & tmpDailyCourtListFolder & "\Case Results Backup\CaseStatistics.xlsx")
        tmpStatsRow = 3
        Do
            If wb.Worksheets("Stats").Range("A" & tmpStatsRow) = "" Then Exit Do
            If wb.Worksheets("Stats").Range("A" & tmpStatsRow) = Range("B5") And wb.Worksheets("Stats").Range("B" & tmpStatsRow) = Range("B6") And wb.Worksheets("Stats").Range("C" & tmpStatsRow) = Range("B7") And wb.Worksheets("Stats").Range("D" & tmpStatsRow) = Range("B8") Then Exit Do
            tmpStatsRow = tmpStatsRow + 1
        Loop
        ' Update the statistics row
        wb.Worksheets("Stats").Range("A" & tmpStatsRow) = Range("B5") ' Court
        wb.Worksheets("Stats").Range("B" & tmpStatsRow) = Range("B6") ' Date
        wb.Worksheets("Stats").Range("B" & tmpStatsRow).NumberFormat = "dd/mm/yyyy"
        wb.Worksheets("Stats").Range("C" & tmpStatsRow) = Range("B7") ' Time
        wb.Worksheets("Stats").Range("C" & tmpStatsRow).NumberFormat = "HH:MM"
        wb.Worksheets("Stats").Range("D" & tmpStatsRow) = Range("B8") ' Court room
        wb.Worksheets("Stats").Range("E" & tmpStatsRow) = Worksheets("Main").Range("M6") ' Prosecutor
        wb.Worksheets("Stats").Range("F" & tmpStatsRow) = Worksheets("Main").Range("P7") ' Prosecutor type
        wb.Worksheets("Stats").Range("G" & tmpStatsRow) = Range("G6") ' Legal Adviser
        wb.Worksheets("Stats").Range("H" & tmpStatsRow) = Range("G7") ' Magistrate 1
        wb.Worksheets("Stats").Range("I" & tmpStatsRow) = Range("G8") ' Magistrate 2
        wb.Worksheets("Stats").Range("J" & tmpStatsRow) = Range("G9") ' Magistrate 3
        wb.Worksheets("Stats").Range("K" & tmpStatsRow) = Worksheets("Main").Range("J12") ' Total Cases
        wb.Worksheets("Stats").Range("L" & tmpStatsRow) = ST_AdjDisqSJP
        wb.Worksheets("Stats").Range("M" & tmpStatsRow) = Format(ST_AdjDisqSJP / Worksheets("Main").Range("J12"), "0.00%")
        wb.Worksheets("Stats").Range("N" & tmpStatsRow) = ST_AdjDisqCourt
        wb.Worksheets("Stats").Range("O" & tmpStatsRow) = Format(ST_AdjDisqCourt / Worksheets("Main").Range("J12"), "0.00%")
        wb.Worksheets("Stats").Range("P" & tmpStatsRow) = ST_AdjTrial
        wb.Worksheets("Stats").Range("Q" & tmpStatsRow) = Format(ST_AdjTrial / Worksheets("Main").Range("J12"), "0.00%")
        wb.Worksheets("Stats").Range("R" & tmpStatsRow) = ST_AdjOtherSJP
        wb.Worksheets("Stats").Range("S" & tmpStatsRow) = Format(ST_AdjOtherSJP / Worksheets("Main").Range("J12"), "0.00%")
        wb.Worksheets("Stats").Range("T" & tmpStatsRow) = ST_AdjOtherCourt
        wb.Worksheets("Stats").Range("U" & tmpStatsRow) = Format(ST_AdjOtherCourt / Worksheets("Main").Range("J12"), "0.00%")
        wb.Worksheets("Stats").Range("V" & tmpStatsRow) = ST_AdjDisqSJP + ST_AdjDisqCourt + ST_AdjTrial + ST_AdjOtherSJP + ST_AdjOtherCourt
        wb.Worksheets("Stats").Range("W" & tmpStatsRow) = Format((ST_AdjDisqSJP + ST_AdjDisqCourt + ST_AdjTrial + ST_AdjOtherSJP + ST_AdjOtherCourt) / Worksheets("Main").Range("J12"), "0.00%")
        wb.Worksheets("Stats").Range("X" & tmpStatsRow) = ST_ProvedInAbsence
        wb.Worksheets("Stats").Range("Y" & tmpStatsRow) = Format(ST_ProvedInAbsence / Worksheets("Main").Range("J12"), "0.00%")
        wb.Worksheets("Stats").Range("Z" & tmpStatsRow) = ST_Fined
        wb.Worksheets("Stats").Range("AA" & tmpStatsRow) = Format(ST_Fined / Worksheets("Main").Range("J12"), "0.00%")
        wb.Worksheets("Stats").Range("AB" & tmpStatsRow) = ST_AbsoluteDischarge
        wb.Worksheets("Stats").Range("AC" & tmpStatsRow) = Format(ST_AbsoluteDischarge / Worksheets("Main").Range("J12"), "0.00%")
        wb.Worksheets("Stats").Range("AD" & tmpStatsRow) = ST_ConditionalDischarge
        wb.Worksheets("Stats").Range("AE" & tmpStatsRow) = Format(ST_ConditionalDischarge / Worksheets("Main").Range("J12"), "0.00%")
        wb.Worksheets("Stats").Range("AF" & tmpStatsRow) = ST_Withdrawn
        wb.Worksheets("Stats").Range("AG" & tmpStatsRow) = Format(ST_Withdrawn / Worksheets("Main").Range("J12"), "0.00%")
        wb.Worksheets("Stats").Range("AH" & tmpStatsRow) = ST_Dsimissed
        wb.Worksheets("Stats").Range("AI" & tmpStatsRow) = Format(ST_Dsimissed / Worksheets("Main").Range("J12"), "0.00%")
        wb.Worksheets("Stats").Range("AJ" & tmpStatsRow) = ST_NEODismissed
        wb.Worksheets("Stats").Range("AK" & tmpStatsRow) = Format(ST_NEODismissed / Worksheets("Main").Range("J12"), "0.00%")
        wb.Worksheets("Stats").Range("AL" & tmpStatsRow) = ST_Disqualified
        wb.Worksheets("Stats").Range("AM" & tmpStatsRow) = Format(ST_Disqualified / Worksheets("Main").Range("J12"), "0.00%")
        wb.Worksheets("Stats").Range("AN" & tmpStatsRow) = ST_ProvedInAbsence + ST_Fined + ST_AbsoluteDischarge + ST_ConditionalDischarge + ST_Withdrawn + ST_Dsimissed + ST_NEODismissed
        wb.Worksheets("Stats").Range("AO" & tmpStatsRow) = Format((ST_ProvedInAbsence + ST_Fined + ST_AbsoluteDischarge + ST_ConditionalDischarge + ST_Withdrawn + ST_Dsimissed + ST_NEODismissed) / Worksheets("Main").Range("J12"), "0.00%")
        wb.Save
        wb.Close
        Set wb = Nothing
        Set app = Nothing
        End If
    If tmpKeepWordAppOpen = False Then wapp.Quit
    Set wapp = Nothing
    If tmpBadCount > 0 Then MsgBox "Caution!  There " & IIf(tmpBadCount = 1, "was ", "were ") & tmpBadCount & " Case folder" & IIf(tmpBadCount = 1, "", "s") & " which could not be moved, check the commented error messages on the end of each row (Black Boxes).", vbExclamation
btnUpdateCases_Click_0:
    Exit Sub
    
btnUpdateCases_Click_Error:
    MsgBox "Error!  There was a problem with this function." & vbCrLf & "The error message is:-" & vbCrLf & Err.Description
    Err.Clear
    On Error GoTo 0
    Set objMail = Nothing
    Set olApp = Nothing
    GoTo btnUpdateCases_Click_0
End Sub

Private Function ScanCaseActions(tmpCaseNo As String) As String
    Dim tmpRow As Integer
    Dim tmpParkedAction As String
    tmpRow = 16
    Do
        If Range("B" & tmpRow) = tmpCaseNo Then
            If InStr(Range(ActionColumn & tmpRow), "Adjourned") > 0 And Range(AdjDateColumn & tmpRow) <> "N/A" Then
                ScanCaseActions = Range(ActionColumn & tmpRow)
                AdjournCourt = Range(AdjCourtColumn & tmpRow)
                AdjournDate = Range("S" & tmpRow)
                AdjournReason = Range("R" & tmpRow)
                tmpActionRow = tmpRow
                Exit Do
                End If
            If InStr(Range(ActionColumn & tmpRow), "Fine") > 0 Or InStr(Range(ActionColumn & tmpRow), "Proved") > 0 Then
                tmpParkedAction = Range(ActionColumn & tmpRow)
                End If
            ScanCaseActions = Range(ActionColumn & tmpRow)
            tmpActionRow = tmpRow
            End If
        tmpRow = tmpRow + 1
    Loop Until Range("A" & tmpRow) = ""
    If tmpParkedAction <> "" And tmpParkedAction <> ScanCaseActions Then
        ScanCaseActions = tmpParkedAction
        End If
End Function

Private Function ScanCaseDisqualification(tmpCaseNo As String) As Boolean
    Dim tmpRow As Integer
    tmpRow = 16
    ScanCaseDisqualification = False
    Do
        If Range("B" & tmpRow) = tmpCaseNo Then
            If Range("T" & tmpRow) = "Y" Then ScanCaseDisqualification = True: Exit Do
            End If
        tmpRow = tmpRow + 1
    Loop Until Range("A" & tmpRow) = ""
End Function

Private Function ScanForNoticeToIssue(tmpCaseNo As String) As Boolean
    Dim tmpRow As Integer
    tmpRow = 16
    ScanForNoticeToIssue = False
    Do
        If Range("B" & tmpRow) = tmpCaseNo Then
            If InStr(Range("R" & tmpRow), "Notice To Issue") > 0 Then ScanForNoticeToIssue = True: Exit Do
            End If
        tmpRow = tmpRow + 1
    Loop Until Range("A" & tmpRow) = ""
End Function

Private Sub UpdateCasesAsCopied(tmpCaseNo As String, tmpError As String, tmpSuccessMessage As String)
    Dim tmpRow As Integer
    tmpRow = 16
    Do
        If Range("B" & tmpRow) = tmpCaseNo Then
            If tmpError = "Success" Then
                Range(ButtonColumn & tmpRow) = Chr$(60)
                Range(ButtonColumn & tmpRow).Interior.ColorIndex = CopiedColour
                Range(ButtonColumn & tmpRow).Font.ColorIndex = 1
                Range(ButtonColumn & tmpRow).Font.Name = "Wingdings"
                If Len(tmpSuccessMessage) <> 0 Then Call ApplySuccessComment(ButtonColumn & tmpRow, tmpSuccessMessage)
                Else
                Range(ButtonColumn & tmpRow) = Chr$(78)
                Range(ButtonColumn & tmpRow).Interior.ColorIndex = NotCopiedColour
                Range(ButtonColumn & tmpRow).Font.ColorIndex = 2
                Range(ButtonColumn & tmpRow).Font.Name = "Wingdings"
                Call ApplyResultErrorComment(ButtonColumn & tmpRow, "Error!  Case Move Has Failed!  " & vbLf & vbLf & tmpError & vbLf & vbLf & "Manual checks should be made to ensure the case folder is in the right place")
                End If
            End If
        tmpRow = tmpRow + 1
        
    Loop Until Range("A" & tmpRow) = ""
End Sub

Private Sub btnViewAmendments_Click()
    Call ShowWorkSheet("Amendments")
    
    '***Eucs - 25.08.2017
    '   Reset the button size if necessary
    Call FixActiveXObj(Me.Name, Me.btnViewAmendments.Name)
    '***
End Sub

Private Sub btnViewHearingFolder_Click()
    If Len(Worksheets("Main").Range("C3")) = 0 Then MsgBox "Error!  You must choose the SJP files folder first", vbCritical
    If Val(Worksheets("Main").Range("C8")) = 0 Then MsgBox "Error!  There must be a valid court room entered", vbCritical
    If Val(Worksheets("Main").Range("C8")) >= 75 And Val(Worksheets("Main").Range("C8")) <= 77 Then
        x = Shell("Explorer.exe " & Chr$(34) & Worksheets("Main").Range("C3") & Chr$(34), vbNormalFocus)
        Else
        x = Shell("Explorer.exe " & Chr$(34) & Worksheets("Main").Range("C3") & "\" & Worksheets("Main").Range("U3") & "\" & Right(Worksheets("Main").Range("C6"), 4) & "-" & Mid(Worksheets("Main").Range("C6"), 4, 2) & "-" & Left(Worksheets("Main").Range("C6"), 2) & Chr$(34), vbNormalFocus)
        End If
    
    '***Eucs - 25.08.2017
    '   Reset the button size if necessary
    Call FixActiveXObj(Me.Name, Me.btnViewHearingFolder.Name)
    '***
End Sub


Private Sub btnWhatsNew_Click()
    frmWhatsNew.Show
    
    '***Eucs - 25.08.2017
    '   Reset the button size if necessary
    Call FixActiveXObj(Me.Name, Me.btnWhatsNew.Name)
    '***
End Sub

Private Sub txtSingleOffences_Change()
    Dim tmpRow As Integer
    Dim tmpSubRow As Integer
    Dim tmpSplit As Integer

    Application.ScreenUpdating = False
    If txtSingleOffences = "Single Offences Only" Then
        tmpRow = 16
        Do
            If Range("A" & tmpRow).RowHeight > 0 Then
                If Range("C" & tmpRow) > 1 Then
                    tmpSubRow = 16
                    Do
                        If Range("B" & tmpRow) = Range("B" & tmpSubRow) Then Range("A" & tmpSubRow).RowHeight = 0
                        tmpSubRow = tmpSubRow + 1
                    Loop Until Len(Range("A" & tmpSubRow)) = 0
                    End If
                End If
            tmpRow = tmpRow + 1
        Loop Until Len(Range("A" & tmpRow)) = 0
        Call PerformCount
        End If
    If txtSingleOffences = "All Cases" Then
        Call BuildMarkedArray
        tmpRow = 16
        Do
            Range("A" & tmpRow).RowHeight = 25
            tmpRow = tmpRow + 1
        Loop Until Range("A" & tmpRow) = ""
        Call txtSplit_Click
        Call RestoreMarkedArray
        End If
    Application.ScreenUpdating = True
    
    '***Eucs - 25.08.2017
    '   Reset the button size if necessary
    Call FixActiveXObj(Me.Name, Me.txtSingleOffences.Name)
    '***
End Sub

Private Sub txtSplit_Click()
    Dim tmpLastRow As Integer
    Dim tmpSplit As Integer
    
    If MaxRow < 16 Then Exit Sub
    
    Call btnClearFilter_Click
    tmpSplitActivated = True: Call btnImportResults_Click: tmpSplitActivated = False
    
    Application.ScreenUpdating = False
    
    tmpLastRow = MaxRow
    tmpSplit = (tmpLastRow - 15) / 2
    
    Range("A16:" & LastColumn & tmpLastRow).Sort Key1:=Worksheets("Results").Columns("A"), Order1:=xlAscending
    Range("A16:A" & tmpLastRow).RowHeight = 25
    
    Columns("Y:" & LastColumn).ColumnWidth = 100
    
    Select Case txtSplit

    Case Is = "Top Half"
        Range("A16:U" & 15 + tmpSplit).EntireRow.AutoFit
        tmpDisableWorkSheetChange = True
        Range("A" & 15 + tmpSplit + 1 & ":A" & tmpLastRow).EntireRow.Delete
        tmpDisableWorkSheetChange = False
    
    Case Is = "Bottom Half"
        Range("A" & 15 + tmpSplit + 1 & ":U" & tmpLastRow).EntireRow.AutoFit
        tmpDisableWorkSheetChange = True
        Range("A16:A" & 15 + tmpSplit).EntireRow.Delete
        tmpDisableWorkSheetChange = False
        
    Case Else
        
        'Range("A16:U" & tmpLastRow).EntireRow.AutoFit
        
    End Select
    Columns("Y:" & LastColumn).ColumnWidth = 0
    Application.ScreenUpdating = True
    Call PerformCount

    If txtSingleOffences = "Single Offences Only" Then Call txtSingleOffences_Change
    
    '***Eucs - 25.08.2017
    '   Reset the button size if necessary
    Call FixActiveXObj(Me.Name, Me.txtSplit.Name)
    '***
End Sub

Function IsArrayAllocated(Arr As Variant)
    On Error Resume Next
    IsArrayAllocated = IsArray(Arr) And Not IsError(LBound(Arr, 1)) And LBound(Arr, 1) <= UBound(Arr, 1)
    On Error GoTo 0
End Function

Private Sub Worksheet_Activate()
    Call ToggleCutCopyAndPaste(False)
    Call PerformCount
    If IsArrayAllocated(MarkedArray) = False Then
        If Range("A16") <> "" Then BuildMarkedArray
        End If

    If txtSplit = "" Or txtSplit.ListCount <> 3 Then
        txtSplit.Clear
        txtSplit.AddItem "All Cases"
        txtSplit.AddItem "Top Half"
        txtSplit.AddItem "Bottom Half"
        txtSplit = "All Cases"
        End If
    If txtSingleOffences = "" Or txtSingleOffences.ListCount <> 2 Then
        txtSingleOffences.Clear
        txtSingleOffences.AddItem "All Cases"
        txtSingleOffences.AddItem "Single Offences Only"
        txtSingleOffences = "All Cases"
        End If
End Sub

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    Dim tmpDestinationHearingFolder As String
    Dim tmpSourceHearingFolder As String
    Dim tmpCaseFolder As String
    Dim tmpSurname As String
    Dim tmpForename As String
    Dim tmpURN As String
    Dim tmpRow As Integer
    Dim tmpErrorMessage  As String
    Dim tmpBadCount As Integer

    ' Open the case folder if it exists
    If Left(ActiveCell.Address, 2) = "$B" Or Left(ActiveCell.Address, 2) = "$A" Then
        If Len(Range(CaseFolderPathColumn & Target.Row)) <> 0 Then
            x = Shell("Explorer.exe " & Chr$(34) & Range(CaseFolderPathColumn & Target.Row) & Chr$(34), vbNormalFocus)
            End If
        Cancel = True
        Exit Sub
        End If
    
    If Left(ActiveCell.Address, 2) = "$" & ButtonColumn Then
        If Range(ActiveCell.Address).Interior.ColorIndex = BadColour Or Range(ActiveCell.Address).Interior.ColorIndex = GoodColour Then
            tmpRow = Mid(ActiveCell.Address, 4)
            tmpDisableWorkSheetChange = True
            If Target = Chr$(252) Then
                If MsgBox("Caution!  Are you sure you want to mark this result as uncompleted", vbYesNo) = vbNo Then Cancel = True: Exit Sub
                Range("A" & tmpRow & ":" & ValidationColumn & tmpRow).Interior.ColorIndex = 2
                Target = "X"
                Range(ButtonColumn & tmpRow).Interior.ColorIndex = BadColour
                Range(ButtonColumn & tmpRow).Font.Name = "Ariel"
                Cancel = True
                Else
                ' If Not Done check for moved case and restore it
                If InStr(Range("U" & tmpRow), "Not completed in time. Moved to") > 0 Then
                    If MsgBox("This case has been moved to a new hearing date.  Do you want to move it back?", vbYesNo) = vbNo Then Cancel = True: Exit Sub
                    tmpDestinationHearingFolder = Range("B3") & "\" & Worksheets("Main").Range("U3") & "\" & Right(Range("B6"), 4) & "-" & Mid(Range("B6"), 4, 2) & "-" & Left(Range("B6"), 2)
                    tmpSourceHearingFolder = Range("B3") & "\" & Worksheets("Main").Range("U3") & "\" & Right(Range("U" & tmpRow), 10)
                    If InStr(Range("A" & tmpRow), ",") = 0 Then
                        tmpSurname = Range("A" & tmpRow)
                        tmpForename = ""
                        Else
                        tmpSurname = Left(Range("A" & tmpRow), InStr(Range("A" & tmpRow), ",") - 1)
                        tmpForename = Mid(Range("A" & tmpRow), InStr(Range("A" & tmpRow), ",") + 1)
                        End If
                    tmpURN = Range("C" & tmpRow)
                    tmpCaseFolder = FindCaseFolder(tmpSurname, tmpForename, tmpURN, tmpSourceHearingFolder)
                    If tmpCaseFolder <> "" Then
                        tmpMoveResult = MoveFolder(tmpSourceHearingFolder & "\" & tmpCaseFolder, tmpDestinationHearingFolder & "\" & tmpCaseFolder, False)
                        If tmpMoveResult <> "Success" Then
                            tmpErrorMessage = tmpErrorMessage & tmpSurname & ", " & tmpForename & " (" & tmpURN & ")" & " : " & tmpMoveResult & vbLf
                            Else
                            Range("A" & tmpRow & ":" & ValidationColumn & tmpRow).Interior.ColorIndex = 2
                            tmpDisableWorkSheetChange = True
                            Range(ButtonColumn & tmpRow) = Chr$(252)
                            Range(ButtonColumn & tmpRow).Interior.ColorIndex = GoodColour
                            Range(ButtonColumn & tmpRow).Font.Name = "Wingdings"
                            tmpDisableWorkSheetChange = True: Range("U" & tmpRow) = "Not completed in time, please reschedule"
                            End If
                        Else
                        tmpErrorMessage = tmpErrorMessage & tmpSurname & ", " & tmpForename & " (" & tmpURN & ")" & " : Source folder does not exist" & vbLf
                        End If
                    If Len(tmpErrorMessage) > 0 Then MsgBox "Error! Unable to move the case folder:" & vbLf & tmpErrorMessage, vbCritical
                    Else
                    Range("A" & tmpRow & ":" & ValidationColumn & tmpRow).Interior.ColorIndex = GoodColour
                    tmpDisableWorkSheetChange = True
                    Range(ButtonColumn & tmpRow) = Chr$(252)
                    Range(ButtonColumn & tmpRow).Interior.ColorIndex = GoodColour
                    Range(ButtonColumn & tmpRow).Font.Name = "Wingdings"
                    Call BuildMarkedArray
                    Call ApplyFilter
                    End If
                End If
            End If
        Call PerformCount
        End If
    tmpDisableWorkSheetChange = False
    Cancel = True
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    If Importing = True Then Exit Sub
    If tmpDisableWorkSheetChange = True Then tmpDisableWorkSheetChange = False: Exit Sub
    If LCase(Environ("UserName")) = "paul.ridings" Then Exit Sub
    MsgBox "Error!  Changes not allowed on this screen", vbCritical
    tmpDisableWorkSheetChange = True
    Target = OldValue
End Sub

Private Sub Worksheet_Deactivate()
    Call ToggleCutCopyAndPaste(True)
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    OldValue = Target
End Sub

Private Sub ApplyFilter()
    Exit Sub
    With Header.Parent.AutoFilter.Filters
        With .Filters(Header.Column - .Range.Column + 1)
            If ActiveSheet.FilterMode = True Then
            Range("A15:AE15").AutoFilter Field:=24, Criteria1:="X"
            End If
        End With
    End With
End Sub

Private Sub PerformCount()
    Dim tmpRow As Integer
    Dim tmpBad As Integer
    Dim tmpGood As Integer
    Dim tmpCopied As Integer
    Dim tmpNotCopied As Integer
    
    tmpRow = 16
    Importing = True
    Do
        If Range(ButtonColumn & tmpRow).RowHeight > 0 Then
            If Range(ButtonColumn & tmpRow).Interior.ColorIndex = BadColour Then tmpBad = tmpBad + 1
            If Range("A" & tmpRow).Interior.ColorIndex = GoodColour Then tmpGood = tmpGood + 1
            If Range(ButtonColumn & tmpRow).Interior.ColorIndex = CopiedColour Then tmpCopied = tmpCopied + 1
            If Range(ButtonColumn & tmpRow).Interior.ColorIndex = NotCopiedColour Then tmpNotCopied = tmpNotCopied + 1
            End If
        tmpRow = tmpRow + 1
    Loop Until Range("A" & tmpRow) = ""
    Range("L6") = tmpBad
    Range("L7") = tmpGood
    Range("L8") = tmpCopied
    Range("L9") = tmpNotCopied
    Range("M6") = tmpBad + tmpGood
    Importing = False
End Sub

Function FindEmailForCourt(tmpAdjournCourt As String, tmpEmailColumn As String) As String
    Dim i As Integer
    'tmpEmailColumn ="D" for Trial Email Address
    'tmpEmailColumn ="C" for Traffic Email Address
    tmpAdjournEmail = ""
    i = 2
    Do
        If Worksheets("Courts").Range("B" & i) = tmpAdjournCourt Then
            If Len(Worksheets("Courts").Range(tmpEmailColumn & i)) > 0 And InStr(Worksheets("Courts").Range(tmpEmailColumn & i), "@") > 0 Then
                FindEmailForCourt = Worksheets("Courts").Range(tmpEmailColumn & i)
                Exit Do
                End If
            End If
        i = i + 1
    Loop Until Worksheets("Courts").Range("A" & i) = ""
End Function

Sub BuildSJPArchiveFolder(tmpTrafficArchive As String)
    tmpTrafficArchive = Range("B3") & "\" & Worksheets("Main").Range("V3")
    If FolderExists(tmpTrafficArchive) = False Then MkDir tmpTrafficArchive
    tmpTrafficArchive = tmpTrafficArchive & "\" & Right(Range("B6"), 4)
    If FolderExists(tmpTrafficArchive) = False Then MkDir tmpTrafficArchive
    tmpTrafficArchive = tmpTrafficArchive & "\SJP"
    If FolderExists(tmpTrafficArchive) = False Then MkDir tmpTrafficArchive
    tmpTrafficArchive = tmpTrafficArchive & "\" & Right(Range("B6"), 4) & "-" & Mid(Range("B6"), 4, 2) & "-" & Left(Range("B6"), 2)
    If FolderExists(tmpTrafficArchive) = False Then MkDir tmpTrafficArchive
End Sub

Sub AutoArchive()
    Dim tmpArchivePath As String
    Dim tmpDOHPath As String
    Dim tmpActualDate As String
    Dim tmpDOHFolders(10) As String
    Dim tmpDOHFolders_Count As Integer
    If IsDate(Range("B6")) = False Then Exit Sub
    tmpArchivePath = Range("B3") & "\" & Worksheets("Main").Range("V3")
    If Dir(tmpArchivePath, vbDirectory) = "" Then MkDir tmpArchivePath
    tmpArchivePath = tmpArchivePath & "\"
    tmpDOHFolders_Count = 0
    tmpDOHPath = Dir(Range("B3") & "\" & Worksheets("Main").Range("U3") & "\*.*", vbDirectory)
    Do
        If Len(tmpDOHPath) = 10 And Mid(tmpDOHPath, 5, 1) = "-" And Mid(tmpDOHPath, 8, 1) = "-" Then
            tmpActualDate = Right(tmpDOHPath, 2) & "/" & Mid(tmpDOHPath, 6, 2) & "/" & Left(tmpDOHPath, 4)
            If IsDate(tmpActualDate) = True Then
                If CDate(tmpActualDate) < DateAdd("ww", -3, CDate(Range("B6"))) Then
                    tmpDOHFolders(tmpDOHFolders_Count) = tmpDOHPath
                    tmpDOHFolders_Count = tmpDOHFolders_Count + 1
                    End If
                End If
            End If
        tmpDOHPath = Dir()
    Loop Until tmpDOHFolders_Count > 9 Or tmpDOHPath = ""
    tmpDOHFolders_Count = 0
    Do While tmpDOHFolders(tmpDOHFolders_Count) <> ""
        tmpDOHPath = tmpDOHFolders(tmpDOHFolders_Count)
        If Dir(tmpArchivePath & Left(tmpDOHPath, 4), vbDirectory) = "" Then MkDir tmpArchivePath & Left(tmpDOHPath, 4)
        Call MoveFolder(Range("B3") & "\" & Worksheets("Main").Range("U3") & "\" & tmpDOHPath, tmpArchivePath & Left(tmpDOHPath, 4) & "\" & tmpDOHPath, False)
        tmpDOHFolders_Count = tmpDOHFolders_Count + 1
    Loop
End Sub

Sub BuildMarkedArray()
    Dim tmpRow As Integer
    Dim tmpCount As Integer
    ReDim MarkedArray(500, 1) As String
    tmpRow = 16
    tmpCount = 0
    Do
        If Range(ButtonColumn & tmpRow) = Chr$(252) Then
            MarkedArray(tmpCount, 0) = Range("B" & tmpRow)
            MarkedArray(tmpCount, 1) = Range("C" & tmpRow)
            tmpCount = tmpCount + 1
            End If
        tmpRow = tmpRow + 1
    Loop Until Range("A" & tmpRow) = ""
End Sub

Sub RestoreMarkedArray()
    Dim tmpRow As Integer
    Dim tmpCount As Integer
    tmpRow = 16
    Do
        tmpCount = 0
        Do
            If Range("B" & tmpRow) = MarkedArray(tmpCount, 0) And Range("C" & tmpRow) = MarkedArray(tmpCount, 1) Then
                
                Range("A" & tmpRow & ":" & ValidationColumn & tmpRow).Interior.ColorIndex = GoodColour
                tmpDisableWorkSheetChange = True: Range(ButtonColumn & tmpRow) = Chr$(252)
                Range(ButtonColumn & tmpRow).Interior.ColorIndex = GoodColour
                Range(ButtonColumn & tmpRow).Font.Name = "Wingdings"
                Exit Do
                End If
            tmpCount = tmpCount + 1
        Loop Until MarkedArray(tmpCount, 0) = ""
        tmpRow = tmpRow + 1
    Loop Until Range("A" & tmpRow) = ""
End Sub




Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Dim OldValue
Dim Importing As Boolean

Private Sub btnClearAmendments_Click()
    Dim tmpLastRow As Integer
    If Range("A16") = "" Then Exit Sub
    If MsgBox("Caution!  Are you sure you want to clear the results?", vbYesNo + vbExclamation) = vbNo Then Exit Sub
    tmpLastRow = Worksheets("Amendments").Cells(Worksheets("Amendments").Rows.Count, "A").End(xlUp).Row
    If tmpLastRow < 16 Then Exit Sub
    tmpDisableWorkSheetChange = True
    Range("A16:A" & tmpLastRow).RowHeight = 25
    Range("A16:Z" & tmpLastRow).Cells.Delete
    Range("A16").Select
    tmpDisableWorkSheetChange = False
End Sub

Private Sub btnImportAmendments_Click()
    Dim tmpRow As Integer
    Dim tmpResultsRow As Integer
    Dim tmpSurname As String
    Dim tmpForename As String
    Dim tmpDefRow As Integer
    Dim tmpHeaderDone As Boolean
    If Range("A16") <> "" Then
        If MsgBox("Caution!  Are you sure you want to clear the results and re import the data?", vbYesNo + vbExclamation) = vbNo Then Exit Sub
        End If
    Importing = True
    Application.ScreenUpdating = False
    Columns("Y").ColumnWidth = 71
    Columns("Z").ColumnWidth = 71
    
    tmpRow = 14
    tmpResultsRow = 16
    Do
        If Worksheets("Main").Range("B" & tmpRow) = "Defendant" Then
            tmpDefRow = tmpRow
            tmpHeaderDone = False
            If Worksheets("Main").Range("B" & tmpRow + 2).Interior.ColorIndex = OffenceColour Then
                ' Name Change
                If Worksheets("Main").Range("B" & tmpRow + 2) <> "" Then
                    Call UpdateAmendmentRow("Name Change", tmpRow, tmpResultsRow, "B")
                    End If
                ' URN Change
                If Worksheets("Main").Range(URNColumn & tmpRow + 2) <> "" Then
                    Call UpdateAmendmentRow("URN Change", tmpRow, tmpResultsRow, URNColumn)
                    End If
                ' DOB Change
                If Worksheets("Main").Range(DOBColumn & tmpRow + 2) <> "" Then
                    Call UpdateAmendmentRow("DOB Change", tmpRow, tmpResultsRow, DOBColumn)
                    End If
                ' Address Change
                If Worksheets("Main").Range("H" & tmpRow + 2) <> "" Then
                    Call UpdateAmendmentRow("Address Change", tmpRow, tmpResultsRow, "H")
                    End If
                ' Solicitor Change
                If Worksheets("Main").Range("R" & tmpRow + 2) <> "" Then
                    Call UpdateAmendmentRow("Solicitor Change", tmpRow, tmpResultsRow, "R")
                    End If
                End If
            End If
        If Worksheets("Main").Range("B" & tmpRow) = "Offence" Then
            tmpRow = tmpRow + 1
            ' Cycle the offences
            Do Until Worksheets("Main").Range("B" & tmpRow).Interior.ColorIndex <> OffenceColour
                If Worksheets("Main").Range(OriginalOffenceColumn & tmpRow) = "N" Then
                    ' New Offences
                    Call UpdateAmendmentName(tmpDefRow, tmpResultsRow)
                    Range("C" & tmpResultsRow) = Worksheets("Main").Range("S" & tmpDefRow + 1) ' Case
                    Range("D" & tmpResultsRow) = "New Offence" ' Type
                    Range("E" & tmpResultsRow) = "n/a" ' Old info
                    Range("M" & tmpResultsRow) = Worksheets("Main").Range("B" & tmpRow) & vbLf & vbLf & Worksheets("Main").Range("B" & tmpRow).Comment.Text ' New Offence
                    Range("A" & tmpResultsRow & ":B" & tmpResultsRow).Merge
                    Range("E" & tmpResultsRow & ":L" & tmpResultsRow).Merge
                    Range("M" & tmpResultsRow & ":" & ValidationColumn & tmpResultsRow).Merge
                    Range(ButtonColumn & tmpResultsRow) = "X"
                    Range(ButtonColumn & tmpResultsRow).Interior.ColorIndex = BadColour
                    Range(ButtonColumn & tmpResultsRow).Font.Name = "Ariel"
                    Range("Y" & tmpResultsRow) = Range("E" & tmpResultsRow)
                    Range("Z" & tmpResultsRow) = Range("M" & tmpResultsRow)
                    tmpResultsRow = tmpResultsRow + 1
                    Else
                    If Worksheets("Main").Range("B" & tmpRow).Comment.Text <> Worksheets("Main").Range(OffenceFullTextColumn & tmpRow) Then
                        ' Amend Offence
                        Call UpdateAmendmentName(tmpDefRow, tmpResultsRow)
                        Range("C" & tmpResultsRow) = Worksheets("Main").Range("S" & tmpDefRow + 1) ' Case
                        Range("D" & tmpResultsRow) = "Amend Offence" ' Type
                        Range("E" & tmpResultsRow) = Worksheets("Main").Range("B" & tmpRow) & vbLf & vbLf & Worksheets("Main").Range(OffenceFullTextColumn & tmpRow)  ' Old Offence
                        Range("M" & tmpResultsRow) = Worksheets("Main").Range("B" & tmpRow) & vbLf & vbLf & Worksheets("Main").Range("B" & tmpRow).Comment.Text  ' New Offence
                        Range("A" & tmpResultsRow & ":B" & tmpResultsRow).Merge
                        Range("E" & tmpResultsRow & ":L" & tmpResultsRow).Merge
                        Range("M" & tmpResultsRow & ":" & ValidationColumn & tmpResultsRow).Merge
                        Range(ButtonColumn & tmpResultsRow) = "X"
                        Range(ButtonColumn & tmpResultsRow).Interior.ColorIndex = BadColour
                        Range(ButtonColumn & tmpResultsRow).Font.Name = "Ariel"
                        Range("Y" & tmpResultsRow) = Range("E" & tmpResultsRow)
                        Range("Z" & tmpResultsRow) = Range("M" & tmpResultsRow)
                        tmpResultsRow = tmpResultsRow + 1
                        End If
                    End If
                tmpRow = tmpRow + 1
            Loop
            End If
            
        tmpRow = tmpRow + 1
    Loop Until tmpRow > Worksheets("Main").Cells(Worksheets("Main").Rows.Count, "B").End(xlUp).Row
    If tmpResultsRow = 16 Then Importing = True = False: Exit Sub
    Range("A16:Z" & tmpResultsRow - 1).WrapText = True
    Range("Y16:Z" & tmpResultsRow).EntireRow.AutoFit
    tmpRow = 16
    Do
        If Range("A" & tmpRow).RowHeight < 25 Then Range("A" & tmpRow).RowHeight = 25
        tmpRow = tmpRow + 1
    Loop Until tmpRow > tmpResultsRow
    Range("A16:" & ButtonColumn & tmpResultsRow - 1).Borders.LineStyle = xlContinuous
    Range("A16:" & ButtonColumn & tmpResultsRow - 1).VerticalAlignment = xlCenter
    Range("U16:" & ButtonColumn & tmpResultsRow - 1).HorizontalAlignment = xlCenter
    Range("C16:C" & tmpResultsRow - 1).HorizontalAlignment = xlLeft
    Columns("Y").ColumnWidth = 0
    Columns("Z").ColumnWidth = 0
    Application.ScreenUpdating = True
    Importing = False
End Sub

Sub UpdateAmendmentRow(Amendment As String, tmpMainRow As Integer, tmpResultsRow As Integer, tmpCol As String)
    Call UpdateAmendmentName(tmpMainRow, tmpResultsRow)
    Range("C" & tmpResultsRow) = Worksheets("Main").Range("S" & tmpMainRow + 1)
    Range("D" & tmpResultsRow) = Amendment
    Range("E" & tmpResultsRow) = Worksheets("Main").Range(tmpCol & tmpMainRow + 1)
    Range("M" & tmpResultsRow) = Worksheets("Main").Range(tmpCol & tmpMainRow + 2)
    If Amendment = "DOB Change" Then
        Range("E" & tmpResultsRow & ":M" & tmpResultsRow).NumberFormat = "dd/mm/yyyy"
        Range("E" & tmpResultsRow & ":" & ValidationColumn & tmpResultsRow).HorizontalAlignment = xlLeft
        End If
    Range("A" & tmpResultsRow & ":B" & tmpResultsRow).Merge
    Range("E" & tmpResultsRow & ":L" & tmpResultsRow).Merge
    Range("M" & tmpResultsRow & ":" & ValidationColumn & tmpResultsRow).Merge
    Range(ButtonColumn & tmpResultsRow) = "X"
    Range(ButtonColumn & tmpResultsRow).Interior.ColorIndex = BadColour
    Range(ButtonColumn & tmpResultsRow).Font.Name = "Ariel"
    Range("Y" & tmpResultsRow) = Range("E" & tmpResultsRow)
    Range("Z" & tmpResultsRow) = Range("M" & tmpResultsRow)
    tmpResultsRow = tmpResultsRow + 1
End Sub

Sub UpdateAmendmentName(tmpMainRow As Integer, tmpResultsRow As Integer)
    Dim tmpSurname As String
    Dim tmpForename As String
    If InStr(Worksheets("Main").Range("B" & tmpMainRow + 1), " ") > 0 Then
        tmpSurname = Trim(Mid(Worksheets("Main").Range("B" & tmpMainRow + 1), InStrRev(Worksheets("Main").Range("B" & tmpMainRow + 1), " ")))
        tmpForename = Trim(Left(Worksheets("Main").Range("B" & tmpMainRow + 1), InStrRev(Worksheets("Main").Range("B" & tmpMainRow + 1), " ")))
        If Left(LCase(tmpForename), 3) = "mr " Or Left(LCase(tmpForename), 3) = "ms " Or Left(LCase(tmpForename), 5) = "miss " Or Left(LCase(tmpForename), 3) = "dr " Or Left(LCase(tmpForename), 4) = "mrs " Then
            tmpForename = Trim(Mid(tmpForename, InStr(tmpForename, " ")))
            End If
        Range("A" & tmpResultsRow) = tmpSurname & ", " & tmpForename
        Else
        tmpSurname = Worksheets("Main").Range("B" & tmpMainRow + 1)
        Range("A" & tmpResultsRow) = tmpSurname
        End If
End Sub

Private Sub btnViewHearingFolder_Click()
    If Len(Worksheets("Main").Range("C3")) = 0 Then MsgBox "Error!  You must choose the live traffic files folder first", vbCritical
    If Val(Worksheets("Main").Range("C8")) = 0 Then MsgBox "Error!  There must be a valid court room entered", vbCritical
    If Val(Worksheets("Main").Range("C8")) >= 75 And Val(Worksheets("Main").Range("C8")) <= 77 Then
        x = Shell("Explorer.exe " & Chr$(34) & Worksheets("Main").Range("C3") & "\SJP" & Chr$(34), vbNormalFocus)
        Else
        x = Shell("Explorer.exe " & Chr$(34) & Worksheets("Main").Range("C3") & "\" & Right(Worksheets("Main").Range("C6"), 4) & "-" & Mid(Worksheets("Main").Range("C6"), 4, 2) & "-" & Left(Worksheets("Main").Range("C6"), 2) & Chr$(34), vbNormalFocus)
        End If
End Sub

Private Sub btnViewResults_Click()
    Call ShowWorkSheet("Results")
End Sub

Private Sub Worksheet_Activate()
    Call ToggleCutCopyAndPaste(False)
End Sub

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    If Left(ActiveCell.Address, 2) = "$" & ButtonColumn Then
        If Range(ActiveCell.Address).Interior.ColorIndex = BadColour Or Range(ActiveCell.Address).Interior.ColorIndex = GoodColour Then
            tmpDisableWorkSheetChange = True
            If Target = "X" Then
                Range("A" & Mid(ActiveCell.Address, 4) & ":" & ValidationColumn & Mid(ActiveCell.Address, 4)).Interior.ColorIndex = GoodColour
                Target = Chr$(252)
                Range(ButtonColumn & Mid(ActiveCell.Address, 4)).Interior.ColorIndex = GoodColour
                Range(ButtonColumn & Mid(ActiveCell.Address, 4)).Font.Name = "WingDings"
                Cancel = True
                Else
                Range("A" & Mid(ActiveCell.Address, 4) & ":" & ValidationColumn & Mid(ActiveCell.Address, 4)).Interior.ColorIndex = 2
                Target = "X"
                Range(ButtonColumn & Mid(ActiveCell.Address, 4)).Interior.ColorIndex = BadColour
                Range(ButtonColumn & Mid(ActiveCell.Address, 4)).Font.Name = "Ariel"
                Cancel = True
                End If
            End If
        End If
    tmpDisableWorkSheetChange = False
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    If Importing = True Then Exit Sub
    If tmpDisableWorkSheetChange = True Then tmpDisableWorkSheetChange = False: Exit Sub
    If LCase(Environ("UserName")) = "paul.ridings" Then Exit Sub
    MsgBox "Error!  Changes not allowed on this screen", vbCritical
    tmpDisableWorkSheetChange = True
    Target = OldValue
End Sub

Private Sub Worksheet_Deactivate()
    Call ToggleCutCopyAndPaste(True)
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    OldValue = Target
End Sub

Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Activate()
    set_MARD
    Application.EnableAutoComplete = False
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    Dim tmpPath As String
    '***Eucs - Sameh Sabet - 24.08.2017
    Call PrepareActiveXForExit
    
    Dim tmpBackupFileName As String
    Dim tmpLockFile As String
    Dim DataLine As String
    If LCase(Environ("UserName")) <> LCase(Worksheets("Main").Range("J6")) Or VersionUpdateInProgress = True Or Worksheets("Main").Cells(Worksheets("Main").Rows.Count, "B").End(xlUp).Row < 15 Then Exit Sub
    'If MsgBox("Case Resulter is about to close and will be saved automatically" & vbLf & "Are you sure you want to close the Case Resulter tool?", vbYesNo) = vbNo Then Cancel = True: Exit Sub
    ' Check lock file exists and belongs to the legal adviser - if it does then delete it
    Application.EnableAutoComplete = True
    tmpLockFile = Left(Worksheets("Main").Range("C4"), Len(Worksheets("Main").Range("C4")) - 4) & ".loc"
    If FileExists(tmpLockFile) Then
        On Error Resume Next
        Close 1
        Open tmpLockFile For Input Shared As #1
        Line Input #1, DataLine
        Close 1
        If LCase(DataLine) = LCase(Environ("UserName")) Then KillLockFile
        On Error GoTo 0
        End If
    Application.EnableCancelKey = xlDisabled
    ThisWorkbook.Save
    tmpPath = Left(Application.ActiveWorkbook.FullName, InStrRev(Application.ActiveWorkbook.FullName, "\") - 1)
    If Right(LCase(tmpPath), 21) = "\case resulter\backup" Or InStr(LCase(tmpPath), "daily court list\results backup") > 0 Then Exit Sub
    If Dir(tmpPath & "\Backup", vbDirectory) = "" Then MkDir tmpPath & "\Backup"
    Application.DisplayAlerts = False
    tmpBackupFileName = tmpPath & "\Backup\Case Resulter Backup " & Right(Date, 4) & "-" & Mid(Date, 4, 2) & "-" & Left(Date, 2) & " - " & Left(Time, 2) & Mid(Time, 4, 2) & Right(Time, 2) & ".xlsm"
    Application.ThisWorkbook.SaveCopyAs tmpBackupFileName
    Application.DisplayAlerts = True
End Sub

Private Sub Workbook_Deactivate()
    restore_MARD
    Application.EnableAutoComplete = True
End Sub

Private Sub Workbook_Open()
    '***Eucs - Sameh Sabet - 24.08.2017
    Call PrepareActivXForOpen

    Dim fso As Object
    ' Check the S drive
    If CheckSDrive = False Then MsgBox "Error!  There is a problem connecting to the S drive.  The Case Resulter will not be able to access case folders if this is not corrected.  If you are dealing with current cases, check your network connection and restart the Case Resulter."
    ' Check to see if the workbook has been opened too quickly, file path reference is sharepoint
    If LCase(Left(ThisWorkbook.Path, 4)) = "http" Then
        MsgBox "Error!  The workbook path is located on share point" & vbCrLf & ThisWorkbook.Path & vbCrLf & "Please make sure your One Drive is sync'd before opening the tool"
        ThisWorkbook.Close SaveChanges:=False
        End If
    ' Check if the tool has just been updated and clean up the script
    If FileExists(ThisWorkbook.Path & "\UpdateCaseResulterTool.vbs") = True Then
        On Error Resume Next
        Kill ThisWorkbook.Path & "\UpdateCaseResulterTool.vbs"
        On Error GoTo 0
        End If
    ' Check to see if the tool is being run from the configuration folder
    If InStr(ThisWorkbook.Path, "GM Live Files\Configuration") > 0 Then
        MsgBox "Error!  You cannot run this tool from the configuration folder." & vbLf & "Please copy the entire Case Resulter folder to your 'My Documents' folder and run again from there", vbCritical
        ThisWorkbook.Close SaveChanges:=False
        End If
    ' Clean up the backup folder
    If Dir(ThisWorkbook.Path & "\Backup", vbDirectory) <> "" Then
        Set fso = CreateObject("Scripting.FileSystemObject")
        For Each fcount In fso.Getfolder(ThisWorkbook.Path & "\Backup").Files
            If DateDiff("d", fcount.DateCreated, Now()) > 5 Then Kill fcount
        Next fcount
        End If
    ' Check the version if its the owner (legal adviser)
    If Worksheets("Main").Range("J6") <> "" And LCase(Worksheets("Main").Range("J6")) = LCase(Environ("UserName")) Then
        If IsDate(Worksheets("Main").Range("C6")) = False Then
            If CorrectVersion = False Then ThisWorkbook.Close SaveChanges:=No: Exit Sub
            End If
        Else
        If Worksheets("Main").Range("J6") = "" Then
            If CorrectVersion = False Then ThisWorkbook.Close SaveChanges:=No: Exit Sub
            End If
        End If
    If LCase(Worksheets("Main").Range("J6")) = LCase(Environ("UserName")) Then
        ' Make sure the PDFTOTEXT file is located with the spreadsheet
        If FileExists("C:\Program Files (x86)\Retsina Software\pdftotext.exe") = False Then
            MsgBox "Error!  the PDFTOTEXT tool is not installed.  open 'Software Centre' and install the 'Retsina Software PDFTOTEXT'." & vbCrLf & "To find the Software Centre please click the magnifying glass in the bottom left of your screen and type 'Software Centre'"
            ThisWorkbook.Close SaveChanges:=False: Exit Sub
            End If
        End If
    
    With Worksheets("Main").txtQuickFind
        .SpecialEffect = 0
        .ColumnCount = 3
        .ColumnWidths = "0 Pt;190 Pt;110 Pt"
        .ListWidth = "300 Pt"
    End With
    Worksheets("Main").txtValidated.SpecialEffect = 0
    Worksheets("Main").txtProsecutorType.SpecialEffect = 0
    Worksheets("Main").txtChoiceBox.SpecialEffect = 0
    Worksheets("Main").txtChoiceBox.BorderStyle = 1
    
    On Error Resume Next
    If Worksheets("Main").txtProsecutorType = "" And Worksheets("Main").Range("P7") <> "" Then
        Worksheets("Main").txtProsecutorType = Worksheets("Main").Range("P7")
        If Len(Worksheets("Main").Range("C5")) > 0 Then Worksheets("Main").txtProsecutorType.Enabled = False
        End If
    On Error GoTo 0
    
    Application.DisplayAlerts = True
    Call DebugMode(False)
    Application.ScreenUpdating = False
    tmpScrollRow = 14
    ActiveWindow.ScrollRow = tmpScrollRow
    tmpValidateFields = True
    
    Call ShowHeader
    
    Call ProtectMe(False)

    Worksheets("Main").Columns(OffenceFullTextColumn).ColumnWidth = 0
    Worksheets("Main").Columns(OriginalOffenceColumn).ColumnWidth = 0
    Worksheets("Main").Columns(OriginalMitigationColumn).ColumnWidth = 0
    Worksheets("Main").Columns(CaseFolderPathColumn).ColumnWidth = 0
    Worksheets("Main").Columns(AdjCourtColumn).ColumnWidth = 0
    Worksheets("Main").Columns(ButtonColumn).ColumnWidth = 12
    Worksheets("Main").Columns(ButtonColumn2).ColumnWidth = 12
    Worksheets("Results").Columns(OffenceFullTextColumn).ColumnWidth = 0
    Worksheets("Results").Columns(OriginalOffenceColumn).ColumnWidth = 0
    Worksheets("Results").Columns(OriginalMitigationColumn).ColumnWidth = 0
    Worksheets("Results").Columns(CaseFolderPathColumn).ColumnWidth = 0
    Worksheets("Results").Columns(AdjCourtColumn).ColumnWidth = 0
    ' Pre-populate the legal advisers name if its blank
    If Worksheets("Main").Range("J6") = "" Then
        tmpDisableWorkSheetChange = True
        Worksheets("Main").Range("J6") = LCase(Environ("UserName"))
        Worksheets("Main").Range("G6") = GetUserFullName
        Worksheets("Results").Range("G6") = Worksheets("Main").Range("G6")
        If Len(Worksheets("Main").Range("G6")) > 0 And Worksheets("Main").Range("G6").Locked = False Then
            Worksheets("Main").Range("G6:I6").Locked = True
            End If
        tmpDisableWorkSheetChange = False
        pubLogUsage = True
        End If
    ' Lock the legal advisers name if its filled in
    If Worksheets("Main").Range("J6") <> "" And Worksheets("Main").Range("G6") = "" Then
        Worksheets("Main").Range("G6:I6").Locked = False
        End If
    
    If Val(Worksheets("Main").Range("J12")) = 0 Or Val(Worksheets("Main").Range("K12")) > 0 Then
        Worksheets("Main").btnInformPostCourt.Enabled = False
        Worksheets("Main").btnSaveResults.Enabled = False
        End If
    
    If Len(Worksheets("Main").Range("C5")) = 0 Then Worksheets("Main").btnAddRemoveCases.Enabled = False
    
    Call ProtectMe(True)
    
    If LCase(Worksheets("Main").Range("J6")) = LCase(Environ("UserName")) Then
        'Legal Adviser User
        Call ShowWorkSheet("Main")
        Call Worksheets("Main").btnRefresh_Click
        Worksheets("Main").Range("M6").Select
        Else
        ' Court Result User
        Call ShowWorkSheet("Results")
        End If
    Application.ScreenUpdating = True
End Sub

Private Function FileExists(tmpFileName As String) As Boolean
    FileExists = False
    If Len(Dir(tmpFileName)) > 0 Then FileExists = True
End Function

Attribute VB_Name = "frmAddRemoveCases"
Attribute VB_Base = "0{690DADB5-117F-42FB-AAD0-64CBC6854CF3}{AF99FDB2-9006-4A70-ACDE-B3A8414CF6B0}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Type tmpDataRecord
    Courtroom As String * 5
    Session As String * 2
    Position As String * 5
    Defendant As String * 50
    DOB As String * 10
    URN As String * 30
    AssignedTo As String * 50
    InCourt As String * 50
    AssignedSession As String * 5
    Validated As String * 2
    LineFeed As String * 2
End Type

Dim tmpCourtroom As String
Dim tmpSession As String
Dim tmplstCaseChange_Abort As Boolean

Dim tmpCourtListData() As String

Dim varCoordinates
Dim lShape As Long

Private Sub btnCancel_Click()
    Worksheets("WS1").Cells.Clear
    Call KillLockFile
    Unload Me
End Sub

Private Sub btnDeSelectUnValidated_Click()
    Dim tmpCount As Integer
    For tmpCount = 0 To lstCases.ListCount - 1
        If lstCases.Column(9, tmpCount) = "Not Resulted" And lstCases.Selected(tmpCount) = True Then lstCases.Selected(tmpCount) = False
    Next tmpCount
    Call SelectMine
End Sub

Private Sub btnSelectAll_Click()
    Dim tmpCount As Integer
    If Len(txtCourtRoom) = 0 Then MsgBox "Error!  Invalid Court Room": Exit Sub
    If Len(txtSession) = 0 Then MsgBox "Error!  Invalid Session": Exit Sub
    Select Case txtCourtRoom
    
    Case Is = "All"
        For tmpCount = 0 To lstCases.ListCount - 1
            If txtSession = "All" Then
                If lstCases.Column(6, tmpCount) = "" Then
                    Worksheets("WS1").Range("G" & tmpCount + 2) = Worksheets("Main").Range("G6")
                    Worksheets("WS1").Range("H" & tmpCount + 2) = Worksheets("Main").Range("C8")
                    Worksheets("WS1").Range("I" & tmpCount + 2) = Worksheets("Main").Range("C7").Text
                    End If
                Else
                If lstCases.Column(6, tmpCount) = "" And lstCases.Column(1, tmpCount) = txtSession Then
                    Worksheets("WS1").Range("G" & tmpCount + 2) = Worksheets("Main").Range("G6")
                    Worksheets("WS1").Range("H" & tmpCount + 2) = Worksheets("Main").Range("C8")
                    Worksheets("WS1").Range("I" & tmpCount + 2) = Worksheets("Main").Range("C7").Text
                    End If
                End If
        Next tmpCount
    Case Else
        For tmpCount = 0 To lstCases.ListCount - 1
            If Val(lstCases.Column(0, tmpCount)) = Val(txtCourtRoom) Then
                If txtSession = "All" Then
                    If lstCases.Column(6, tmpCount) = "" Then
                        Worksheets("WS1").Range("G" & tmpCount + 2) = Worksheets("Main").Range("G6")
                        Worksheets("WS1").Range("H" & tmpCount + 2) = Worksheets("Main").Range("C8")
                        Worksheets("WS1").Range("I" & tmpCount + 2) = Worksheets("Main").Range("C7").Text
                        End If
                    Else
                    If lstCases.Column(6, tmpCount) = "" And lstCases.Column(1, tmpCount) = txtSession Then
                        Worksheets("WS1").Range("G" & tmpCount + 2) = Worksheets("Main").Range("G6")
                        Worksheets("WS1").Range("H" & tmpCount + 2) = Worksheets("Main").Range("C8")
                        Worksheets("WS1").Range("I" & tmpCount + 2) = Worksheets("Main").Range("C7").Text
                        End If
                    End If
                End If
        Next tmpCount
    End Select
    Call SelectMine
End Sub

Sub SelectMine()
    Dim tmpCount As Integer
    Dim tmpSelected As Integer
    Dim tmpUnvalidated  As Integer
    tmplstCaseChange_Abort = True
    tmpUnvalidated = 0
    For tmpCount = 0 To lstCases.ListCount - 1
        If Worksheets("WS1").Range("G" & tmpCount + 2) = Worksheets("Main").Range("G6") And Worksheets("WS1").Range("H" & tmpCount + 2) = Worksheets("Main").Range("C8") And Trim(Worksheets("WS1").Range("I" & tmpCount + 2).Text) = Trim(Worksheets("Main").Range("C7").Text) Then
            lstCases.Selected(tmpCount) = True
            tmpSelected = tmpSelected + 1
            Else
            lstCases.Selected(tmpCount) = False
            End If
        If lstCases.Selected(tmpCount) = True And lstCases.Column(9, tmpCount) = "Not Resulted" Then tmpUnvalidated = tmpUnvalidated + 1
    Next tmpCount
    lblUnValidated.Caption = tmpUnvalidated & " Un-Resulted Case" & IIf(tmpUnvalidated = 1, "", "s") & " Selected"
    tmplstCaseChange_Abort = False
    lblSelected.Caption = tmpSelected & " Selected"
End Sub

Private Sub btnSelectNone_Click()
    If Len(txtCourtRoom) = 0 Then Exit Sub
    If MsgBox("Caution! You are about to deselect cases on your list.  If you have entered results on these cases then these results will be lost." & vbCrLf & "Do you want to continue?", vbYesNo + vbExclamation) = vbNo Then Exit Sub
    
    Select Case txtCourtRoom
    Case Is = "All"
        For tmpCount = 0 To lstCases.ListCount - 1
            If lstCases.Column(6, tmpCount) = Worksheets("Main").Range("G6") Then
                Worksheets("WS1").Range("G" & tmpCount + 2 & ":J" & tmpCount + 2) = ""
                End If
        Next tmpCount
    Case Else
        For tmpCount = 0 To lstCases.ListCount - 1
            If Val(lstCases.Column(0, tmpCount)) = Val(txtCourtRoom) Then
                If lstCases.Column(6, tmpCount) = Worksheets("Main").Range("G6") Then
                    Worksheets("WS1").Range("G" & tmpCount + 2 & ":J" & tmpCount + 2) = ""
                    End If
                End If
        Next tmpCount
    End Select
    Call SelectMine
End Sub

Sub RecalcSelected()
    Dim tmpCount As Integer
    Dim tmpSelected As Integer
    Dim tmpUnvalidated  As Integer
    tmpUnvalidated = 0
    For tmpCount = 0 To lstCases.ListCount - 1
        If lstCases.Selected(tmpCount) = True Then
            tmpSelected = tmpSelected + 1
            If Worksheets("WS1").Range("G" & tmpCount + 2) = "" Then
                Worksheets("WS1").Range("G" & tmpCount + 2) = Worksheets("Main").Range("G6")
                Worksheets("WS1").Range("H" & tmpCount + 2) = Worksheets("Main").Range("C8")
                Worksheets("WS1").Range("I" & tmpCount + 2) = " " & Worksheets("Main").Range("C7").Text
                Worksheets("WS1").Range("J" & tmpCount + 2) = "Not Resulted"
                End If
            If Worksheets("WS1").Range("G" & tmpCount + 2) <> Worksheets("Main").Range("G6") Or Worksheets("WS1").Range("H" & tmpCount + 2) <> Worksheets("Main").Range("C8") Or Trim(Worksheets("WS1").Range("I" & tmpCount + 2).Text) <> Worksheets("Main").Range("C7").Text Then lstCases.Selected(tmpCount) = False
            Else
            If Worksheets("WS1").Range("G" & tmpCount + 2) = Worksheets("Main").Range("G6") And Worksheets("WS1").Range("H" & tmpCount + 2) = Worksheets("Main").Range("C8") And Trim(Worksheets("WS1").Range("I" & tmpCount + 2).Text) = Worksheets("Main").Range("C7").Text Then
                Worksheets("WS1").Range("G" & tmpCount + 2 & ":J" & tmpCount + 2) = ""
                End If
            End If
        If lstCases.Selected(tmpCount) = True And lstCases.Column(9, tmpCount) = "Not Resulted" Then tmpUnvalidated = tmpUnvalidated + 1
    Next tmpCount
    lblUnValidated.Caption = tmpUnvalidated & " Un-Resulted Case" & IIf(tmpUnvalidated = 1, "", "s") & " Selected"
    lblSelected.Caption = tmpSelected & " Selected"
End Sub

Private Sub btnUpdate_Click()
    Dim tmpRow As Integer
    Dim tmpCount As Integer
    Dim tmpLastRow As Integer
    Dim tmpDeleted As Boolean
    Dim tmpFound As Boolean
    Dim tmpCTRoom As String
    Dim tmpCTRoom_CaseCount As Integer
    Dim tmpCTRoom_Display As String
    Dim tmpCaseAdded As Boolean
    Dim tmpName As String
    Dim tmpDIRCase As String
    Dim tmpTrafficHearingFolder As String
    Dim tmpSurname As String
    Dim tmpForename As String

    If MsgBox("Caution! You are about to make changes to your list of cases.  Any case previously on your results list which is NOT selected will be removed." & vbCrLf & "Are you sure you want to continue?", vbYesNo + vbExclamation) = vbNo Then Exit Sub
    ReDim tmpCourtListData(0)
    
    ' Set log usage
    If pubLogUsage = True Then Call LogUsage: pubLogUsage = False
    
    ' Perform Guilty Plea Filter
    If txtFilter = "Guilty Plea Only" Then Call PerformGuiltyPleaFilter("Guilty")
    If txtFilter = "Not Guilty Plea Only" Then Call PerformGuiltyPleaFilter("Not Guilty")
    If txtFilter = "No Plea Only" Then Call PerformGuiltyPleaFilter("No Plea")
    
    lblProcessing.Visible = True
    ' Pass over the existing cases and remove any that are now un-selected
    tmpRow = 15
    tmpDisableWorkSheetChange = True
    Application.ScreenUpdating = False
    Call ProtectMe(False)
    Do
        If Worksheets("Main").Range("B" & tmpRow) = "Defendant" Then
            tmpDeleted = False
            For tmpCount = 0 To lstCases.ListCount - 1
                If Val(lstCases.Column(0, tmpCount)) = Val(Worksheets("Main").Range("Q" & tmpRow + 1)) And Val(lstCases.Column(2, tmpCount)) = Val(Worksheets("Main").Range("A" & tmpRow + 1)) And InStr(Worksheets("Main").Range("Q" & tmpRow + 1), lstCases.Column(1, tmpCount)) > 0 Then
                    If lstCases.Selected(tmpCount) = False Then
                        lblProcessing.Caption = "Removing " & lstCases.Column(2, tmpCount) & " " & lstCases.Column(3, tmpCount)
                        DoEvents
                        tmpLastRow = tmpRow + 3
                        Do
                            tmpLastRow = tmpLastRow + 1
                        Loop Until Worksheets("Main").Range("B" & tmpLastRow).Interior.ColorIndex = 2
                        tmpLastRow = tmpLastRow + 1
                        Worksheets("Main").Rows(tmpRow & ":" & tmpLastRow).EntireRow.Delete
                        tmpDeleted = True
                        End If
                    Exit For
                    End If
            Next tmpCount
            If tmpDeleted = False Then tmpRow = tmpRow + 5
            Else
            tmpRow = tmpRow + 1
            End If
        If tmpRow = 15 And Worksheets("Main").Range("B" & tmpRow) <> "Defendant" Then Exit Do
    Loop Until tmpRow > Worksheets("Main").Cells(Worksheets("Main").Rows.Count, "B").End(xlUp).Row
    
    ' Scan the selected cases and if they don't exist, add them to the bottom
    For tmpCount = 0 To lstCases.ListCount - 1
        If lstCases.Selected(tmpCount) = True Then
            If tmpCTRoom <> lstCases.Column(0, tmpCount) And tmpCTRoom <> "" Then
                tmpCTRoom_Display = tmpCTRoom_Display & tmpCTRoom & " (" & tmpCTRoom_CaseCount & "), "
                tmpCTRoom_CaseCount = 0
                End If
            tmpRow = 15
            tmpFound = False
            ' Check the case is not already on the input sheet
            Do
                If Worksheets("Main").Range("B" & tmpRow) = "Defendant" Then
                    If Val(lstCases.Column(0, tmpCount)) = Val(Worksheets("Main").Range("Q" & tmpRow + 1)) And Val(lstCases.Column(2, tmpCount)) = Val(Worksheets("Main").Range("A" & tmpRow + 1)) And InStr(Worksheets("Main").Range("Q" & tmpRow + 1), lstCases.Column(1, tmpCount)) > 0 Then tmpFound = True: Exit Do
                    End If
                tmpRow = tmpRow + 1
            Loop Until tmpRow > Worksheets("Main").Cells(Worksheets("Main").Rows.Count, "B").End(xlUp).Row
            If tmpFound = False Then
                tmpRow = Worksheets("Main").Cells(Worksheets("Main").Rows.Count, "B").End(xlUp).Row + 3
                If tmpRow < 15 Then tmpRow = 15
                lblProcessing.Caption = "Adding " & lstCases.Column(2, tmpCount) & " " & lstCases.Column(3, tmpCount)
                DoEvents
                Call PopulateCaseData(tmpRow, Val(lstCases.Column(0, tmpCount)), Val(lstCases.Column(2, tmpCount)), lstCases.Column(1, tmpCount))
                tmpCaseAdded = True
                End If
            tmpCTRoom = lstCases.Column(0, tmpCount): tmpCTRoom_CaseCount = tmpCTRoom_CaseCount + 1
            End If
    Next tmpCount
    If tmpCTRoom <> "" Then
        tmpCTRoom_Display = tmpCTRoom_Display & tmpCTRoom & " (" & tmpCTRoom_CaseCount & "), "
        tmpCTRoom_CaseCount = 0
        End If
    If Len(tmpCTRoom_Display) > 2 Then
        Worksheets("Main").Range("M8") = Left(tmpCTRoom_Display, Len(tmpCTRoom_Display) - 2)
        End If
    
    ' If any records exist then tidy up
    If Worksheets("Main").Cells(Worksheets("Main").Rows.Count, "B").End(xlUp).Row > 15 Then
        tmpRow = Worksheets("Main").Cells(Worksheets("Main").Rows.Count, "B").End(xlUp).Row + 2
        With Worksheets("Main")
            .Range("A14:" & ButtonColumn2 & tmpRow).VerticalAlignment = xlCenter
            .Range("A14:" & ButtonColumn2 & tmpRow).BorderAround ColorIndex:=1
            .Range("A14:A" & tmpRow).RowHeight = 26
            .Range(ButtonColumn & "15:" & ButtonColumn2 & tmpRow).HorizontalAlignment = xlCenter
            .Range(ButtonColumn & "15:" & ButtonColumn2 & tmpRow).Font.Bold = True
            .Range(ButtonColumn & "15:" & ButtonColumn2 & tmpRow).WrapText = True
        End With
        End If

    ' Re-Sort by Court List and rebuild the quick find list
    Worksheets("Main").txtQuickFind.Clear
    If tmpCaseAdded = True Then Call SortCases("CourtList") Else Call RebuildQuickFind
    tmpDisableWorkSheetChange = False
    Call ProtectMe(True)
    Call ExportCaseAllocationFile(Left(Worksheets("Main").Range("C4"), Len(Worksheets("Main").Range("C4")) - 4) & ".assign")
    Worksheets("WS1").Cells.Clear
    Call KillLockFile
    Call ValidateAll(False)
    Application.ScreenUpdating = True
    Worksheets("Main").Range("D16").Select
    
    ReDim tmpCourtListData(0)

    Unload Me
End Sub

Private Sub lstCases_Change()
    If tmplstCaseChange_Abort = True Then Exit Sub
    tmplstCaseChange_Abort = True
    If lstCases.Selected(lstCases.ListIndex) = False And lstCases.Column(9, lstCases.ListIndex) = "Resulted" Then
        If MsgBox("Caution!  The case you are de-selecting has been resulted, this result will be lost" & vbLf & "Do you want to continue?", vbYesNo) = vbNo Then
            lstCases.Selected(lstCases.ListIndex) = True
            End If
        End If
    Call RecalcSelected
    tmplstCaseChange_Abort = False
End Sub

Private Sub txtCourtRoom_Click()
    If Len(txtCourtRoom) = 0 Then Exit Sub
    Call UpdateSelectButton
End Sub

Private Sub txtFilter_Change()
    If txtFilter = "" Then txtFilter = "All Cases"
    If txtFilter = "All Cases" Then
        lblHowManyGuilty.Visible = False
        txtHowManyGuilty.Visible = False
        Else
        lblHowManyGuilty.Visible = True
        txtHowManyGuilty.Visible = True
        End If
End Sub

Private Sub txtSession_Click()
    If Len(txtSession) = 0 Then Exit Sub
    Call UpdateSelectButton
End Sub

Sub UpdateSelectButton()
    If txtSession = "All" And txtCourtRoom = "All" Then
        btnSelectAll.Caption = "Select All"
        btnSelectNone.Caption = "Select None"
        End If
    If txtSession = "All" And txtCourtRoom <> "All" Then
        btnSelectAll.Caption = "Select All In Court " & txtCourtRoom
        btnSelectNone.Caption = "Select None In Court " & txtCourtRoom
        End If
    If txtSession <> "All" And txtCourtRoom = "All" Then
        btnSelectAll.Caption = "Select " & txtSession & " In All Courts"
        btnSelectNone.Caption = "Select None"
        End If
    If txtSession <> "All" And txtCourtRoom <> "All" Then
        btnSelectAll.Caption = "Select " & txtSession & " In Court " & txtCourtRoom
        btnSelectNone.Caption = "Select None In Court " & txtCourtRoom
        End If
End Sub

Private Sub UserForm_Activate()
    Dim tmpCaseAllocationFile As String
    Dim tmpRow As Integer
    Dim tmpCTRoom As String
    If LockFileInUse = True Then Unload Me
    Me.BackColor = RGB(0, 0, 128)
    lblBack1.BackColor = RGB(153, 204, 255)
    lblBack2.BackColor = RGB(153, 204, 255)
    lblBack3.BackColor = RGB(153, 204, 255)
    lblBack4.BackColor = RGB(153, 204, 255)
    txtCourtRoom.AddItem "All"
    txtCourtRoom = "All"
    tmpCaseAllocationFile = Left(Worksheets("Main").Range("C4"), Len(Worksheets("Main").Range("C4")) - 4) & ".assign"
    If FileExists(tmpCaseAllocationFile) = False Then
        Call GetCaseData
        Else
        Call ImportCaseAllocationFile(tmpCaseAllocationFile)
        ' Build a list of court rooms
        tmpRow = 2
        tmpCTRoom = ""
        Do
            If Worksheets("WS1").Range("A" & tmpRow) <> tmpCTRoom Then
                txtCourtRoom.AddItem Val(Worksheets("WS1").Range("A" & tmpRow))
                tmpCTRoom = Worksheets("WS1").Range("A" & tmpRow)
                End If
            tmpRow = tmpRow + 1
        Loop Until tmpRow > Worksheets("WS1").Cells(Worksheets("WS1").Rows.Count, "B").End(xlUp).Row
        End If
    Application.ScreenUpdating = True
    txtSession.Clear
    txtSession.AddItem "All"
    txtSession.AddItem "Am"
    txtSession.AddItem "Pm"
    txtSession = "All"
    txtFilter.Clear
    txtFilter.AddItem "All Cases"
    txtFilter.AddItem "Guilty Plea Only"
    txtFilter.AddItem "No Plea Only"
    txtFilter.AddItem "Not Guilty Plea Only"
    txtFilter = "All Cases"
    txtHowManyGuilty = Val(lblTotal.Caption)
End Sub

Private Sub ImportCaseAllocationFile(tmpCaseAllocationFile As String)
    Dim tmpMyRecord As tmpDataRecord
    Dim tmpRow As Integer
    Dim tmpWS1Row As Integer
    Worksheets("WS1").Cells.Clear
    Worksheets("WS1").Range("A1") = "Ct Rm"
    Worksheets("WS1").Range("B1") = "Session"
    Worksheets("WS1").Range("C1") = "Pos"
    Worksheets("WS1").Range("D1") = "Defendant"
    Worksheets("WS1").Range("E1") = "DOB"
    Worksheets("WS1").Range("F1") = "URN"
    Worksheets("WS1").Range("G1") = "Assigned To"
    Worksheets("WS1").Range("H1") = "In Court"
    Worksheets("WS1").Range("I1") = "Session"
    Worksheets("WS1").Range("J1") = "Resulted"
    Open tmpCaseAllocationFile For Random Shared As #1 Len = Len(tmpMyRecord)
    tmpRow = 1
    Do
        Get #1, tmpRow, tmpMyRecord
        Worksheets("WS1").Range("A" & tmpRow + 1) = Trim(tmpMyRecord.Courtroom)
        Worksheets("WS1").Range("B" & tmpRow + 1) = Trim(tmpMyRecord.Session)
        Worksheets("WS1").Range("C" & tmpRow + 1) = Trim(tmpMyRecord.Position)
        Worksheets("WS1").Range("D" & tmpRow + 1) = Trim(tmpMyRecord.Defendant)
        Worksheets("WS1").Range("E" & tmpRow + 1) = Trim(tmpMyRecord.DOB)
        Worksheets("WS1").Range("F" & tmpRow + 1) = Trim(tmpMyRecord.URN)
        Worksheets("WS1").Range("G" & tmpRow + 1) = Trim(tmpMyRecord.AssignedTo)
        Worksheets("WS1").Range("H" & tmpRow + 1) = Trim(tmpMyRecord.InCourt)
        Worksheets("WS1").Range("I" & tmpRow + 1) = " " & tmpMyRecord.AssignedSession
        Worksheets("WS1").Range("J" & tmpRow + 1) = tmpMyRecord.Validated
        tmpRow = tmpRow + 1
    Loop Until tmpRow > LOF(1) / Len(tmpMyRecord)
    Close 1
    
    ' Mark the temporary sheet with validation markers

    With Worksheets("Main")
        tmpRow = 15
        Do
            If .Range("B" & tmpRow) = "Defendant" Then
                tmpWS1Row = 2
                Do
                    If .Range("A" & tmpRow + 1) = Worksheets("WS1").Range("C" & tmpWS1Row) Then
                        If Val(.Range("Q" & tmpRow + 1)) = Worksheets("WS1").Range("A" & tmpWS1Row) And InStr(.Range("Q" & tmpRow + 1), Worksheets("WS1").Range("B" & tmpWS1Row)) > 0 Then
                            If .Range(ValidationColumn & tmpRow) = "X" Then
                                Worksheets("WS1").Range("J" & tmpWS1Row) = "Not Resulted" '.Range(ValidationColumn & tmpRow)
                                Else
                                Worksheets("WS1").Range("J" & tmpWS1Row) = "Resulted"
                                End If
                            End If
                        End If
                    tmpWS1Row = tmpWS1Row + 1
                Loop Until Worksheets("WS1").Range("A" & tmpWS1Row) = ""
                End If
        tmpRow = tmpRow + 1
        Loop Until tmpRow > .Cells(.Rows.Count, "B").End(xlUp).Row
    End With
    tmpWS1Row = 2
    Do
        If Worksheets("WS1").Range("J" & tmpWS1Row) = "Re" Then Worksheets("WS1").Range("J" & tmpWS1Row) = "Resulted"
        If Worksheets("WS1").Range("J" & tmpWS1Row) = "No" Then Worksheets("WS1").Range("J" & tmpWS1Row) = "Not Resulted"
        If Trim(Worksheets("WS1").Range("J" & tmpWS1Row)) = "" And Trim(Worksheets("WS1").Range("G" & tmpWS1Row)) = "" Then Worksheets("WS1").Range("J" & tmpWS1Row) = ""
        tmpWS1Row = tmpWS1Row + 1
    Loop Until Worksheets("WS1").Range("A" & tmpWS1Row) = ""
    lstCases.RowSource = "=WS1!A2:J" & Worksheets("WS1").Cells(Worksheets("WS1").Rows.Count, "B").End(xlUp).Row
    Call SelectCasesAlreadyLoaded
End Sub

Private Sub ExportCaseAllocationFile(tmpCaseAllocationFile As String)
    Dim tmpMyRecord As tmpDataRecord
    Dim tmpRow As Integer
    On Error Resume Next
    Kill tmpCaseAllocationFile
    On Error GoTo 0
    Worksheets("WS1").Range("A1") = "Ct Rm"
    Worksheets("WS1").Range("B1") = "Session"
    Worksheets("WS1").Range("C1") = "Pos"
    Worksheets("WS1").Range("D1") = "Defendant"
    Worksheets("WS1").Range("E1") = "DOB"
    Worksheets("WS1").Range("F1") = "URN"
    Worksheets("WS1").Range("G1") = "Assigned To"
    Worksheets("WS1").Range("H1") = "In Court"
    Worksheets("WS1").Range("I1") = "Session"
    Worksheets("WS1").Range("J1") = "Resulted"
    On Error Resume Next
    Open tmpCaseAllocationFile For Random Shared As #1 Len = Len(tmpMyRecord)
    tmpRow = 2
    Do While Worksheets("WS1").Range("A" & tmpRow) <> ""
        tmpMyRecord.Courtroom = Worksheets("WS1").Range("A" & tmpRow)
        tmpMyRecord.Session = Worksheets("WS1").Range("B" & tmpRow)
        tmpMyRecord.Position = Worksheets("WS1").Range("C" & tmpRow)
        tmpMyRecord.Defendant = Worksheets("WS1").Range("D" & tmpRow)
        tmpMyRecord.DOB = Worksheets("WS1").Range("E" & tmpRow)
        tmpMyRecord.URN = Worksheets("WS1").Range("F" & tmpRow)
        tmpMyRecord.AssignedTo = Worksheets("WS1").Range("G" & tmpRow)
        tmpMyRecord.InCourt = Worksheets("WS1").Range("H" & tmpRow)
        tmpMyRecord.AssignedSession = Format(Worksheets("WS1").Range("I" & tmpRow), "hh:mm")
        tmpMyRecord.Validated = Worksheets("WS1").Range("J" & tmpRow)
        tmpMyRecord.LineFeed = Chr$(13) & Chr$(10)
        Put #1, tmpRow - 1, tmpMyRecord
        tmpRow = tmpRow + 1
    Loop
    Close 1
    On Error GoTo 0
End Sub

Private Sub GetCaseData()
    Dim tmpCount As Integer
    Dim tmpRow As Integer
    Dim strPath As String
    Dim DataLine As String
    Dim tmpDefNo As String
    Dim tmpName As String
    Dim tmpSurname As String
    Dim tmpForename As String
    Dim tmpDOB As String
    Dim tmpURN As String
    Dim tmpPosition As Integer
    Dim tmpValidFile As String
    Dim tmpCTRoom As String
    Dim tmpSelected As Integer
    Dim i As Long

    strPath = Worksheets("Main").Range("C4").Value
    ReDim tmpCourtListData(0)
    ' Load the court list array if not already populated
    If UBound(tmpCourtListData) = 0 Then
        Open strPath For Input Shared As #1
        tmpCourtListData = Split(Input(LOF(1), 1), vbCrLf)
        Close 1
        End If
    If UBound(tmpCourtListData) = 0 Then Exit Sub

    i = 0

    tmpValidFile = ValidFile(strPath)
    If tmpValidFile = "Unknown" Then MsgBox "Error!  The PDF file you choose must be a Full Detailed Court List", vbCritical: Call KillLockFile: Unload Me: Exit Sub
    If tmpValidFile = "None" Then MsgBox "Error!  There was a problem accessing the court list PDF/TXT files, they may have been deleted", vbCritical: Call KillLockFile: Unload Me: Exit Sub
    Worksheets("WS1").Range("A1") = "Ct Rm"
    Worksheets("WS1").Range("B1") = "Session"
    Worksheets("WS1").Range("C1") = "Pos"
    Worksheets("WS1").Range("D1") = "Defendant"
    Worksheets("WS1").Range("E1") = "DOB"
    Worksheets("WS1").Range("F1") = "URN"
    Worksheets("WS1").Range("G1") = "Assigned To"
    Worksheets("WS1").Range("H1") = "In Court"
    Worksheets("WS1").Range("I1") = "Session"
    Worksheets("WS1").Range("J1") = "Resulted"
' Scan the Court List Text File
    tmpRow = 2
    'Open strPath For Input Shared As #1
    Do Until i > UBound(tmpCourtListData)
        DataLine = GetDataLine(i)
        If Val(Left(DataLine, 3)) > 0 And Mid(DataLine, 4, 1) = " " Then
            ' def No
            tmpDefNo = Trim(Left(DataLine, 4))
            ' Name
            tmpName = Trim(Mid(DataLine, 8, 50))
            If InStr(tmpName, "(") > 0 Then tmpName = Trim(Left(tmpName, InStr(tmpName, "(") - 1))
            If InStr(tmpName, " ") > 0 Then
                tmpSurname = Trim(Mid(tmpName, InStrRev(tmpName, " ")))
                tmpForename = Trim(Left(tmpName, InStrRev(tmpName, " ")))
                Else
                tmpSurname = tmpName
                tmpForename = ""
                End If
            If Left(LCase(tmpForename), 3) = "mr " Or Left(LCase(tmpForename), 3) = "ms " Or Left(LCase(tmpForename), 5) = "miss " Or Left(LCase(tmpForename), 3) = "dr " Or Left(LCase(tmpForename), 4) = "mrs " Then
                tmpForename = Trim(Mid(tmpForename, InStr(tmpForename, " ")))
                End If
            ' Dob
            tmpPosition = InStr(DataLine, "DOB:")
            If tmpPosition > 0 Then
                If IsDate(Mid(DataLine, tmpPosition + 5, 10)) = True Then
                    tmpDOB = CDate(Mid(DataLine, tmpPosition + 5, 10))
                    Else
                    tmpDOB = ""
                    End If
                Else
                tmpDOB = ""
                End If
            If tmpForename = "CALUM" Then MsgBox "here"
            tmpCount = 1
            Do
                DataLine = GetDataLine_NoPageCheck(i)
                'DataLine = GetDataLine
                If InStr(DataLine, "URN:") > 0 Then Exit Do
                tmpCount = tmpCount + 1
            Loop Until i > UBound(tmpCourtListData) Or tmpCount > 5
            ' URN
            tmpPosition = InStr(DataLine, "URN:")
            If tmpPosition > 0 Then
                tmpURN = Trim(Mid(DataLine, tmpPosition + 5, 23))
                tmpURN = Replace(tmpURN, " ", "")
                Else
                tmpURN = ""
                End If
            
            ' Fix defendant data into the worksheet
            Worksheets("WS1").Range("A" & tmpRow) = tmpCourtroom
            Worksheets("WS1").Range("B" & tmpRow) = tmpSession
            Worksheets("WS1").Range("C" & tmpRow) = tmpDefNo
            Worksheets("WS1").Range("D" & tmpRow) = tmpName
            Worksheets("WS1").Range("E" & tmpRow) = tmpDOB
            Worksheets("WS1").Range("F" & tmpRow) = tmpURN
            tmpRow = tmpRow + 1
            If tmpCourtroom <> tmpCTRoom Then txtCourtRoom.AddItem Val(tmpCourtroom)
            tmpCTRoom = tmpCourtroom
            End If
    Loop
    
    Worksheets("WS1").Range("A2:J" & Worksheets("WS1").Cells(Worksheets("WS1").Rows.Count, "B").End(xlUp).Row).Sort Key1:=Worksheets("WS1").Columns("B"), Order1:=xlAscending, Key2:=Worksheets("WS1").Columns("A"), Order1:=xlAscending, Key3:=Worksheets("WS1").Columns("C"), Order1:=xlAscending
    lstCases.RowSource = "=WS1!A2:J" & Worksheets("WS1").Cells(Worksheets("WS1").Rows.Count, "B").End(xlUp).Row
    Call SelectCasesAlreadyLoaded
End Sub

Sub SelectCasesAlreadyLoaded()
    Dim tmpRow As Integer
    Dim tmpSelected As Integer
    Dim tmpCount As Integer
    Dim tmpUnvalidated As Integer
    ' Select cases already loaded
    tmpRow = 15
    tmpSelected = 0
    tmplstCaseChange_Abort = True
    Do
        If Worksheets("Main").Range("B" & tmpRow) = "Defendant" Then
            tmpCount = 0
            Do
                If lstCases.Column(0, tmpCount) = Val(Worksheets("Main").Range("Q" & tmpRow + 1)) And lstCases.Column(2, tmpCount) = Worksheets("Main").Range("A" & tmpRow + 1) And InStr(Worksheets("Main").Range("Q" & tmpRow + 1), lstCases.Column(1, tmpCount)) > 0 Then
                    lstCases.Selected(tmpCount) = True
                    tmpSelected = tmpSelected + 1
                    Exit Do
                    End If
                tmpCount = tmpCount + 1
            Loop Until tmpCount > lstCases.ListCount - 1
            End If
        tmpRow = tmpRow + 1
    Loop Until tmpRow > Worksheets("Main").Cells(Worksheets("Main").Rows.Count, "B").End(xlUp).Row
    ' Select any cases where the legal adviser name, court room and session match
    tmpCount = 0
    Do
        If lstCases.Selected(tmpCount) = False Then
            If Trim(lstCases.Column(6, tmpCount)) = Worksheets("Main").Range("G6") And Val(lstCases.Column(7, tmpCount)) = Val(Worksheets("Main").Range("C8")) And Trim(lstCases.Column(8, tmpCount)) = Worksheets("Main").Range("C7").Text Then
                lstCases.Selected(tmpCount) = True
                tmpSelected = tmpSelected + 1
                End If
            End If
        tmpCount = tmpCount + 1
    Loop Until tmpCount > lstCases.ListCount - 1
    
    ' Count the unvalidated cases
    tmpUnvalidated = 0
    For tmpCount = 0 To lstCases.ListCount - 1
        If lstCases.Selected(tmpCount) = True And lstCases.Column(9, tmpCount) = "Not Resulted" Then tmpUnvalidated = tmpUnvalidated + 1
    Next tmpCount
    tmplstCaseChange_Abort = False
    lblUnValidated.Caption = tmpUnvalidated & " Un-Resulted Case" & IIf(tmpUnvalidated = 1, "", "s") & " Selected"
    lblTotal.Caption = lstCases.ListCount & " Records"
    lblSelected.Caption = tmpSelected & " Selected"
End Sub

Function GetDataLine(ByRef i As Long) As String
    Dim DataLine As String
    Dim tmpCount As Integer
    On Error Resume Next
    Do
        i = i + 1: DataLine = tmpCourtListData(i)
        If Left(DataLine, 10) = "Printed By" Then
            For tmpCount = 1 To 6
                i = i + 1: DataLine = tmpCourtListData(i)
                If InStr(UCase(DataLine), "COURTROOM:") > 0 Then
                    tmpCourtroom = Trim(Mid(DataLine, InStr(UCase(DataLine), "COURTROOM:") + 11))
                    End If
                If InStr(UCase(DataLine), "SESSION:") > 0 Then
                    If Val(Trim(Mid(DataLine, InStr(UCase(DataLine), "SESSION:") + 9, 2))) < 12 Then
                        tmpSession = "Am"
                        Else
                        tmpSession = "Pm"
                        End If
                    End If
            Next tmpCount
            Else
            If InStr(UCase(DataLine), "COURTROOM:") > 0 Then
                tmpCourtroom = Trim(Mid(DataLine, InStr(UCase(DataLine), "COURTROOM:") + 11))
                End If
            If InStr(UCase(DataLine), "SESSION:") > 0 Then
                If Val(Trim(Mid(DataLine, InStr(UCase(DataLine), "SESSION:") + 9, 2))) < 12 Then tmpSession = "Am" Else tmpSession = "Pm"
                End If
            End If
    Loop Until Len(DataLine) > 0 Or i > UBound(tmpCourtListData)
    
    On Error GoTo 0
    GetDataLine = DataLine
End Function

Function GetDataLine_NoPageCheck(ByRef i As Long)
    Dim DataLine As String
    On Error Resume Next
    Do
        i = i + 1: DataLine = tmpCourtListData(i)
        If Left(DataLine, 10) = "Printed By" Then i = i + 6: DataLine = tmpCourtListData(i)
    Loop Until Len(DataLine) > 0 Or i > UBound(tmpCourtListData)
    On Error GoTo 0
    GetDataLine_NoPageCheck = DataLine
End Function

Sub BuildDefendantHeaderRow(tmpRow As Long)
    ' Defendant Headings
    With Worksheets("Main")
        .Range("A" & tmpRow) = "No."
        .Range("B" & tmpRow) = "Defendant"
        .Range(URNColumn & tmpRow) = "URN"
        .Range("G" & tmpRow) = "DOB"
        .Range("H" & tmpRow) = "Address"
        .Range("O" & tmpRow) = "Additional Information": Range("O" & tmpRow).WrapText = True
        .Range("Q" & tmpRow) = "Court Room"
        .Range("Q" & tmpRow).HorizontalAlignment = xlCenter
        .Range("R" & tmpRow) = "Solicitor"
        .Range("S" & tmpRow) = "Case Number"
        .Range("T" & tmpRow) = "Case Age"
        .Range("U" & tmpRow) = "Driver Info": .Range("Q" & tmpRow & ":U" & tmpRow).WrapText = True
        .Range("B" & tmpRow & ":E" & tmpRow).Merge ' Defendant
        .Range("H" & tmpRow & ":N" & tmpRow).Merge ' Address
        .Range("O" & tmpRow & ":P" & tmpRow).Merge ' Additional Information
        
        .Range("A" & tmpRow & ":" & ValidationColumn & tmpRow).Interior.ColorIndex = DefendantHeaderColour
        .Range("A" & tmpRow & ":U" & tmpRow).Font.ColorIndex = 2
        .Range("A" & tmpRow & ":" & ValidationColumn & tmpRow).Font.Bold = True
        .Range(ValidationColumn & tmpRow).HorizontalAlignment = xlCenter
        
        
        ' Defendant data
        .Range("B" & tmpRow + 1 & ":E" & tmpRow + 1).Merge ' Defendant
        .Range("H" & tmpRow + 1 & ":N" & tmpRow + 1).Merge ' Address
        .Range("O" & tmpRow + 1 & ":P" & tmpRow + 1).Merge ' Additional Information
        .Range("U" & tmpRow + 1 & ":V" & tmpRow + 1).Merge ' Driver Details
        .Range("A" & tmpRow + 1 & ":" & ValidationColumn & tmpRow + 1).Interior.ColorIndex = DefendantColour
        .Range("A" & tmpRow + 1 & ":" & ValidationColumn & tmpRow + 1).WrapText = True
        
        ' Clean the button interface
        .Range(ButtonColumn & tmpRow & ":" & ButtonColumn & tmpRow + 3).Interior.ColorIndex = 2
        
        Call BuildPrimaryButtons(Val(tmpRow))
        
        ' Set the button grid
        .Range(ButtonColumn & tmpRow & ":" & ButtonColumn2 & tmpRow + 3).Borders.LineStyle = xlContinuous
    End With
End Sub

Sub BuildOffenceHeaderRow(tmpRow As Long)
    With Worksheets("Main")
        .Range("D" & tmpRow) = "App" & vbLf & "(Y/N)"
        If .txtProsecutorType = "Proceeds Of Crime Act" Then
            .Range("B" & tmpRow) = "Application"
            .Range("E" & tmpRow) = "IP" & vbLf & "(Y/N)"
            .Range(PleaColumn & tmpRow) = ""
            .Range(GuiltyCreditColumn & tmpRow) = ""
            .Range("H" & tmpRow & ":J" & tmpRow).Merge
            .Range(FineColumn & tmpRow) = "Amount"
            .Range("K" & tmpRow & ":L" & tmpRow).Merge
            .Range(FCOSTSColumn & tmpRow) = "Interpartes Costs"
            .Range("M" & tmpRow & ":N" & tmpRow).Merge
            .Range("O" & tmpRow & ":P" & tmpRow).Merge
            .Range("O" & tmpRow) = ""
            .Range("Q" & tmpRow) = "Directions (Y/N)"
            .Range("Q" & tmpRow).HorizontalAlignment = xlCenter
            Else
            .Range("B" & tmpRow) = "Offence"
            .Range("E" & tmpRow) = "LAP"
            .Range(PleaColumn & tmpRow) = "Plea"
            .Range(GuiltyCreditColumn & tmpRow) = "GP Cr" & vbLf & "(Y/N)"
            .Range(IncomeColumn & tmpRow) = "Income"
            .Range(BandColumn & tmpRow) = "Band" & vbLf & "(A,B,C)"
            .Range(FineColumn & tmpRow) = "Fine / NSP"
            If .txtProsecutorType = "DVLA (SJP)" Or .txtProsecutorType = "DVLA" Then
                .Range(CompColumn & tmpRow) = "Bk Duty/" & vbLf & "Add Pen"
                Else
                .Range(CompColumn & tmpRow) = "Comp"
                End If
            '.Range("L" & tmpRow) = "Comp"
            .Range(FCOSTSColumn & tmpRow) = "FCosts"
            .Range(VSColumn & tmpRow) = "V/S"
            .Range("O" & tmpRow) = "Lic/Pen Pts" & vbLf & "(LE/NE/3-10)"
            .Range("P" & tmpRow) = "COL" & vbLf & "(Y/N)"
            .Range("Q" & tmpRow) = "Pay By Date"
            End If
        If .txtProsecutorType <> "Traffic" And .txtProsecutorType <> "Traffic (SJP)" And .txtProsecutorType <> "Pre Charge Bail" And .txtProsecutorType <> "Proceeds Of Crime Act" Then
            .Range("O" & tmpRow) = "AEO/DBO/" & vbLf & "TTP/None"
            .Range("O" & tmpRow).HorizontalAlignment = xlCenter
            End If
        
        .Range(ActionColumn & tmpRow) = "Action"
        If Sheet1.txtProsecutorType <> "Pre Charge Bail" Then
            .Range("R" & tmpRow) = "Adjournment Reason"
            .Range("S" & tmpRow) = "Adjourn Date/Time"
            Else
            .Range("R" & tmpRow) = "Referred Reason"
            .Range("S" & tmpRow) = "Referred Date/Time"
            End If
        .Range("T" & tmpRow) = "Disq/EH (Y/N/EH)"
        .Range("U" & tmpRow) = "Notes"
        .Range("B" & tmpRow & ":T" & tmpRow).WrapText = True
        .Range("B" & tmpRow & ":C" & tmpRow).Merge
        .Range("U" & tmpRow & ":V" & tmpRow).Merge
        .Range("B" & tmpRow & ":V" & tmpRow).Interior.ColorIndex = OffenceHeaderColour
        .Range("B" & tmpRow & ":V" & tmpRow).Font.Bold = True
    End With
End Sub

Private Sub PopulateCaseData(tmpRow As Integer, tmpCTRoom As Integer, tmpPos As Integer, tmpSess As String)
    Dim tmpCount As Integer
    Dim strPath As String
    Dim strFn As String
    Dim DataLine As String
    Dim tmpPleaDataLine As String
    Dim tmpDefNo As String
    Dim tmpName As String
    Dim tmpSurname As String
    Dim tmpForename As String
    Dim tmpPG As String
    Dim tmpPGAddress As String
    Dim tmpDOB As String
    Dim tmpCase As String
    Dim tmpCourt As String
    Dim tmpProsecution As String
    Dim tmpSolicitor As String
    Dim tmpURN As String
    Dim tmpASN As String
    Dim tmpMarker As String
    Dim tmpFound As Boolean
    Dim Offence(99) As String
    Dim OffenceFullText(99) As String
    Dim OffenceNo(99) As String
    Dim OffenceCount As Integer
    Dim tmpAddress1 As String
    Dim tmpPosition As Integer
    Dim tmpNextCaseAlreadyFound As Boolean
    Dim tmpValidFile As String
    Dim tmpDIRCase As String
    Dim tmpTrafficHearingFolder As String
    Dim tmpTrafficPreviousHearingFolder As String
    Dim tmpPlea As String
    Dim tmpPleaRow As Integer
    Dim tmpDIRFullCase As String
    Dim fso As Object
    Dim fld As Object
    Dim tmpCommentShape As Long
    Dim tmpPreviousAdjDate As String
    Dim tmpData As String
    Dim tmpSJP As String
    Dim tmpErrors As String
    Dim tmpErrorCount As Integer
    Dim tmpOffCode As String
    Dim tmpBenefitsPeriod As String
    Dim tmpBenefits As String
    Dim tmpPleaFile As String
    Dim tmpPleaChargeText As String
    Dim tmpPleaOffenceCounter As Integer
    Dim tmpCompanyFlag As Boolean
    
    Dim i As Long
    
    tmpErrors = ""
    With Worksheets("Main")
' Scan the Court List Text File
    strPath = .Range("C4").Value
    
    ' Load the court list array if not already populated
    If UBound(tmpCourtListData) = 0 Then
        Open strPath For Input Shared As #1
        tmpCourtListData = Split(Input(LOF(1), 1), vbCrLf)
        Close 1
        End If
    If UBound(tmpCourtListData) = 0 Then Exit Sub
    
    i = 0
    Do Until i > UBound(tmpCourtListData)
        If tmpNextCaseAlreadyFound = False Then DataLine = GetDataLine(i)
        If Val(Left(DataLine, 3)) <> tmpPos Or Mid(DataLine, 4, 1) <> " " Or Val(tmpCourtroom) <> Val(tmpCTRoom) Or tmpSession <> tmpSess Then GoTo NextCase
        ' def No
        tmpDefNo = Trim(Left(DataLine, 4))
        ' Name
        tmpName = Trim(Mid(DataLine, 8, 50))
        If InStr(tmpName, "(") > 0 Then tmpName = Trim(Left(tmpName, InStr(tmpName, "(") - 1))
        If InStr(tmpName, " ") = 0 Then
            tmpSurname = tmpName
            tmpForename = ""
            Else
            tmpSurname = Trim(Mid(tmpName, InStrRev(tmpName, " ")))
            tmpForename = Trim(Left(tmpName, InStrRev(tmpName, " ")))
            End If
        If Left(LCase(tmpForename), 3) = "mr " Or Left(LCase(tmpForename), 3) = "ms " Or Left(LCase(tmpForename), 5) = "miss " Or Left(LCase(tmpForename), 3) = "dr " Or Left(LCase(tmpForename), 4) = "mrs " Then
            tmpForename = Trim(Mid(tmpForename, InStr(tmpForename, " ")))
            End If
        If Sheet1.txtProsecutorType = "DVLA (SJP)" And (InStr(LCase(tmpName), "ltd") > 0 Or InStr(LCase(tmpName), "limited") > 0) Then tmpCompanyFlag = True
        ' Dob
        tmpPosition = InStr(DataLine, "DOB:")
        If tmpPosition > 0 Then
            If IsDate(Mid(DataLine, tmpPosition + 5, 10)) = True Then
                tmpDOB = CDate(Mid(DataLine, tmpPosition + 5, 10))
                Else
                tmpDOB = ""
                End If
            Else
            tmpDOB = ""
            End If
        ' Case
        tmpCase = Right(DataLine, 10)
        
        ' Address
        If tmpForename = "CALUM" Then MsgBox "here"
        DataLine = GetDataLine_NoPageCheck(i)
        tmpAddress1 = Trim(Mid(DataLine, 8))
        If Len(tmpAddress1) > 15 Then tmpAddress1 = Trim(Left(tmpAddress1, Len(tmpAddress1) - 15))
        i = i + 1: DataLine = tmpCourtListData(i)
        ' Check second line of address
        If Trim(DataLine) > 0 Then
            If InStr(DataLine, "Nationality") = 0 And InStr(DataLine, "P/G") = 0 Then tmpAddress1 = tmpAddress1 & Trim(DataLine)
            End If
        ' PG then Solicitor
        If InStr(DataLine, "P/G") = 0 Then DataLine = GetDataLine_NoPageCheck(i)
        If InStr(DataLine, "P/G") > 0 Then
            tmpPG = Trim(Mid(DataLine, 5))
            DataLine = GetDataLine_NoPageCheck(i)
            tmpPGAddress = Trim(DataLine)
            DataLine = GetDataLine_NoPageCheck(i)
            Else
            tmpPG = ""
            tmpPGAddress = ""

            End If
        tmpPosition = InStr(DataLine, "Solicitor:")
        If tmpPosition > 0 Then
            tmpSolicitor = Trim(Mid(DataLine, tmpPosition + 11))
            DataLine = GetDataLine_NoPageCheck(i)
            Else
            tmpSolicitor = ""
            End If
        ' Informant
        tmpPosition = InStr(DataLine, "Informant:")
        If tmpPosition > 0 Then
            tmpProsecution = Trim(Mid(DataLine, tmpPosition + 11, 11))
            Else
            tmpProsecution = ""
            End If
        ' URN
        tmpPosition = InStr(DataLine, "URN:")
        If tmpPosition > 0 Then
            tmpURN = Trim(Mid(DataLine, tmpPosition + 5, 23))
            tmpURN = Replace(tmpURN, " ", "")
            Else
            tmpURN = ""
            End If
        ' ASN
        tmpPosition = InStr(DataLine, "ASN:")
        If tmpPosition > 0 Then
            tmpASN = Trim(Mid(DataLine, tmpPosition + 5, 30))
            Else
            tmpASN = ""
            End If
        ' Marker
        tmpPosition = InStr(DataLine, "Marker:")
        If tmpPosition > 0 Then
            tmpMarker = "Marker:" & Trim(Mid(DataLine, tmpPosition + 8))
            Else
            tmpMarker = ""
            End If
OffencesLoop:
        ' Offences
        OffenceCount = 1
        Do
            If Val(Left(DataLine, 16)) = 0 Or InStr(Left(DataLine, 16), "=") > 0 Then DataLine = GetDataLine_NoPageCheck(i)
            If Val(Left(DataLine, 3)) > 0 And Mid(DataLine, 4, 1) = " " Then tmpNextCaseAlreadyFound = True: Exit Do
            If Val(Mid(DataLine, 9, 3)) > 0 And Mid(DataLine, 12, 3) = "   " Then
                OffenceNo(OffenceCount) = Trim(Mid(DataLine, 9, 3))
                Offence(OffenceCount) = Trim(Mid(DataLine, 17))
                tmpOffCode = ""
                If Mid(Offence(OffenceCount), 8, 1) = " " Then
                    If Val(Mid(Offence(OffenceCount), 3, 5)) > 0 Then
                        tmpOffCode = "(" & Left(Offence(OffenceCount), 7) & ")"
                        Offence(OffenceCount) = Mid(Offence(OffenceCount), 8)
                        End If
                    End If
                ' Welsh detection
                If InStr(Offence(OffenceCount), "      ") > 0 And InStr(Offence(OffenceCount), "/") > 0 Then
                    Offence(OffenceCount) = Trim(Mid(Offence(OffenceCount), InStr(Offence(OffenceCount), "/") + 1))
                    i = i + 1: DataLine = tmpCourtListData(i)
                    Offence(OffenceCount) = Offence(OffenceCount) & " " & Trim(DataLine)
                    End If
                If tmpOffCode <> "" Then Offence(OffenceCount) = Offence(OffenceCount) & " " & tmpOffCode

                ' Populate the full offence text
                Do
                    DataLine = GetDataLine_NoPageCheck(i)
                    If Left(DataLine, 16) = "                " Then OffenceFullText(OffenceCount) = OffenceFullText(OffenceCount) & " " & Trim(Mid(DataLine, 17))
                Loop Until Left(DataLine, 16) <> "                " Or i > UBound(tmpCourtListData) Or Len(Trim(DataLine)) = 0
                OffenceCount = OffenceCount + 1
                Else
                DataLine = GetDataLine_NoPageCheck(i)
                End If
        Loop Until OffenceCount > 99 Or i > UBound(tmpCourtListData)
        If OffenceCount < 2 Then
            tmpNextCaseAlreadyFound = False
            If tmpErrorCount < 10 Then tmpErrors = tmpErrors & tmpName & " (No Offences Found)" & vbLf
            tmpErrorCount = tmpErrorCount + 1
            GoTo NextCase
            End If
        Call BuildDefendantHeaderRow(Val(tmpRow))
        Call BuildOffenceHeaderRow(tmpRow + 2)

        ' Fix defendant data into the worksheet
        .Range("A" & tmpRow + 1).Value = tmpDefNo
        .Range("A" & tmpRow + 1 & ":G" & tmpRow + 1).HorizontalAlignment = xlLeft
        .Range(DOBColumn & tmpRow + 1).HorizontalAlignment = xlCenter
        .Range("B" & tmpRow + 1).Value = tmpName
        .Range(URNColumn & tmpRow + 1).Value = tmpURN
        If IsDate(tmpDOB) = True Then .Range(DOBColumn & tmpRow + 1).Value = CDate(tmpDOB) & vbLf & DefAge(CDate(tmpDOB)) & " Years"
        .Range("H" & tmpRow + 1).Value = tmpAddress1
        .Range("Q" & tmpRow + 1).Value = tmpCourtroom & vbLf & "(" & tmpSession & ")"
        .Range("Q" & tmpRow + 1).HorizontalAlignment = xlCenter
        .Range("R" & tmpRow + 1).Value = tmpSolicitor
        .Range("S" & tmpRow + 1).Value = tmpCase
        .Range("S" & tmpRow + 1 & ":R" & tmpRow + 1).HorizontalAlignment = xlLeft
        
        ' Add the view case button if detected and calculate the age of the folder
        If InStr(Sheet1.txtProsecutorType, "(SJP)") > 0 Then
            tmpTrafficHearingFolder = .Range("C3") & "\" & Worksheets("Main").Range("U3") & "\SJP\"
            Else
            tmpTrafficHearingFolder = .Range("C3") & "\" & Worksheets("Main").Range("U3") & "\" & Right(.Range("C6"), 4) & "-" & Mid(.Range("C6"), 4, 2) & "-" & Left(.Range("C6"), 2) & "\"
            End If

        If InStr(tmpName, " ") > 0 Then
            tmpSurname = Trim(Mid(tmpName, InStrRev(tmpName, " ")))
            tmpForename = Trim(Left(tmpName, InStrRev(tmpName, " ")))
            Else
            tmpSurname = Trim(tmpName)
            End If
        If Len(tmpURN) > 0 Then
            tmpDIRCase = FindCaseFolder(tmpSurname, tmpForename, tmpURN, tmpTrafficHearingFolder)
            If tmpDIRCase <> "" Then
                .Range(CaseFolderPathColumn & tmpRow) = tmpTrafficHearingFolder & tmpDIRCase
                Call CreateViewButtons(tmpRow, tmpTrafficHearingFolder & "\" & tmpDIRCase)
                End If
            End If
        ' Adjust the column header for other prosecutors except "Pre Charge Bail"
        If Sheet1.txtProsecutorType <> "Traffic" And Sheet1.txtProsecutorType <> "Traffic (SJP)" And Sheet1.txtProsecutorType <> "Pre Charge Bail" Then
            .Range("T" & tmpRow + 2) = "" ' Remove Disq/EH
            .Range("U" & tmpRow) = "" ' Remove Driver Info
            End If

        ' Adjust the column header for other prosecutors
        If Sheet1.txtProsecutorType = "Pre Charge Bail" Then
            .Range(GuiltyCreditColumn & tmpRow + 2 & ":Q" & tmpRow + 2) = ""
            .Range(FCOSTSColumn & tmpRow + 2) = "Orig Bail Start Date"
            .Range(VSColumn & tmpRow + 2) = "New Bail Period"
            .Range("O" & tmpRow + 2) = "New Bail End Date"
            .Range("T" & tmpRow) = ""
            .Range("U" & tmpRow + 2) = "Reasons"
            End If
            
        If tmpDIRCase = "" Then
            For tmpCount = 1 To 99
                If Len(OffenceNo(tmpCount)) = 0 Then Exit For
                ' Check the offence full texts for previous URN to obtain another hearing folder
                If Len(tmpURN) = 0 And InStr(UCase(OffenceFullText(tmpCount)), "URN:") > 0 Then
                    tmpURN = Trim(Mid(OffenceFullText(tmpCount), InStr(UCase(OffenceFullText(tmpCount)), "URN:") + 4))
                    tmpURN = Replace(tmpURN, ".", " ")
                    If InStr(tmpURN, " ") > 0 Then tmpURN = Trim(Left(tmpURN, InStr(tmpURN, " ")))
                    If Len(tmpURN) > 0 Then
                        tmpDIRCase = FindCaseFolder(tmpSurname, tmpForename, tmpURN, tmpTrafficHearingFolder)
                        If tmpDIRCase <> "" Then
                            .Range(CaseFolderPathColumn & tmpRow) = tmpTrafficHearingFolder & tmpDIRCase
                            Call CreateViewButtons(tmpRow, tmpTrafficHearingFolder & "\" & tmpDIRCase)
                            End If
                        End If
                    Exit For
                    End If
                ' Check the offence full texts for previous adjournments to obtain another hearing folder
                If InStr(LCase(OffenceFullText(tmpCount)), "adjourned from") > 0 Then
                    tmpPreviousAdjDate = Mid(OffenceFullText(tmpCount), InStr(LCase(OffenceFullText(tmpCount)), "adjourned from"))
                    If InStr(tmpPreviousAdjDate, "/") > 0 And InStrRev(tmpPreviousAdjDate, "/") <> InStr(tmpPreviousAdjDate, "/") Then
                        tmpPreviousAdjDate = Mid(tmpPreviousAdjDate, InStr(tmpPreviousAdjDate, "/") - 2, 10)
                        If IsDate(tmpPreviousAdjDate) Then
                            tmpTrafficPreviousHearingFolder = .Range("C3") & "\" & Right(tmpPreviousAdjDate, 4) & "-" & Mid(tmpPreviousAdjDate, 4, 2) & "-" & Left(tmpPreviousAdjDate, 2) & "\"
                            If InStr(tmpName, " ") > 0 And IsDate(.Range("C6")) And Len(tmpURN) > 0 Then
                                tmpDIRCase = FindCaseFolder(tmpSurname, tmpForename, tmpURN, tmpTrafficPreviousHearingFolder)
                                If tmpDIRCase <> "" Then
                                    .Range(ButtonColumn2 & tmpRow) = "View Case" & vbLf & "(" & tmpPreviousAdjDate & ")"
                                    .Range(ButtonColumn2 & tmpRow).Interior.ColorIndex = ButtonColour
                                    .Range(ButtonColumn2 & tmpRow).Borders.LineStyle = xlContinuous
                                    .Range(ButtonColumn2 & tmpRow).HorizontalAlignment = xlCenter
                                    .Range(ButtonColumn2 & tmpRow).Font.Bold = True
                                    .Range(ButtonColumn2 & tmpRow).Locked = False
                                    .Range(CaseFolderPathColumn & tmpRow) = tmpTrafficPreviousHearingFolder & tmpDIRCase
                                    If (Range("T2") <> "" And Dir(tmpTrafficPreviousHearingFolder & "\" & tmpDIRCase & "\" & Range("T2")) <> "") Or (Range("U2") <> "" And Dir(tmpTrafficPreviousHearingFolder & "\" & tmpDIRCase & "\" & Range("U2")) <> "") Or (Range("V2") <> "" And Dir(tmpTrafficPreviousHearingFolder & "\" & tmpDIRCase & "\" & Range("V2")) <> "") Or (Range("W2") <> "" And Dir(tmpTrafficPreviousHearingFolder & "\" & tmpDIRCase & "\" & Range("W2")) <> "") Then
                                        .Range(ButtonColumn2 & tmpRow + 1) = "View Facts"
                                        .Range(ButtonColumn2 & tmpRow + 1).Interior.ColorIndex = ButtonColour
                                        .Range(ButtonColumn2 & tmpRow + 1).Borders.LineStyle = xlContinuous
                                        .Range(ButtonColumn2 & tmpRow + 1).HorizontalAlignment = xlCenter
                                        .Range(ButtonColumn2 & tmpRow + 1).Font.Bold = True
                                        .Range(ButtonColumn2 & tmpRow + 1).Locked = False
                                        End If
                                    Exit For
                                    End If
                                End If
                            End If
                        End If
                    End If
            Next tmpCount
            End If
        ' Set the Age of the folder
        If .Range(ButtonColumn2 & tmpRow) = "View Case" And Len(tmpDIRCase) > 0 Then
            Set fso = CreateObject("Scripting.FileSystemObject")
            Set fld = fso.Getfolder(tmpTrafficHearingFolder & tmpDIRCase)
            If IsDate(CDate(.Range("C6"))) Then
                If CDate(.Range("C6")) > CDate(fld.DateCreated) Then
                    .Range("T" & tmpRow + 1) = DateDiff("d", CDate(fld.DateCreated), CDate(.Range("C6"))) & " Days"
                    End If
                End If
            Set fld = Nothing
            Set fso = Nothing
            End If
        ' Set the Age of the folder of adjourned case
        If InStr(.Range(ButtonColumn & tmpRow), "(") > 0 And Len(tmpDIRCase) > 0 Then
            tmpPreviousAdjDate = Mid(.Range(ButtonColumn & tmpRow), Len(.Range(ButtonColumn & tmpRow)) - 10, 10)
            If IsDate(tmpPreviousAdjDate) = True Then
                Set fso = CreateObject("Scripting.FileSystemObject")
                Set fld = fso.Getfolder(.Range("C3") & "\" & Right(tmpPreviousAdjDate, 4) & "-" & Mid(tmpPreviousAdjDate, 4, 2) & "-" & Left(tmpPreviousAdjDate, 2) & "\" & tmpDIRCase)
                If IsDate(CDate(.Range("C6"))) Then
                    If CDate(.Range("C6")) > CDate(fld.DateCreated) Then
                        .Range("T" & tmpRow + 1) = DateDiff("d", CDate(fld.DateCreated), CDate(.Range("C6"))) & " Days"
                        End If
                    End If
                Set fld = Nothing
                Set fso = Nothing
                End If
            End If
        tmpData = ""
        ' Detect Correspondence and Memorandum of Conviction
        If .Range(ButtonColumn2 & tmpRow) = "View Case" And Len(tmpDIRCase) > 0 Then
            tmpData = AdditionalInfo(tmpTrafficHearingFolder & tmpDIRCase) & " " & tmpMarker
            If Len(tmpData) > 0 Then
                .Range("O" & tmpRow + 1 & ":P" & tmpRow + 1).Locked = False
                .Range("O" & tmpRow + 1) = tmpData
                Else
                .Range("O" & tmpRow + 1 & ":P" & tmpRow + 1).Locked = True
                End If
            End If
        
        ' Populate the summary offences
        For tmpCount = 1 To 99
            If Len(OffenceNo(tmpCount)) = 0 Then OffenceCount = tmpCount - 1: Exit For
            .Range("B" & tmpRow + 2 + tmpCount) = OffenceNo(tmpCount) & ": " & Offence(tmpCount) ' Offence Text
            If InStr(Sheet1.txtProsecutorType, "(SJP)") > 0 Or Sheet1.txtProsecutorType = "Pre Charge Bail" Then .Range("D" & tmpRow + 2 + tmpCount) = "N"  ' Appears (Y/N)
            .Range("E" & tmpRow + 2 + tmpCount) = "N" ' LAP (Y/N)
            .Range("B" & tmpRow + 2 + tmpCount & ":C" & tmpRow + 2 + tmpCount).Merge ' Merge Offence
            .Range("U" & tmpRow + 2 + tmpCount & ":V" & tmpRow + 2 + tmpCount).Merge ' Merge Notes
            If OffenceFullText(tmpCount) <> "" Then
                .Range(OffenceFullTextColumn & tmpRow + 2 + tmpCount) = Trim(OffenceFullText(tmpCount))
                .Range(OriginalOffenceColumn & tmpRow + 2 + tmpCount) = "Y"
                If Not .Range("B" & tmpRow + 2 + tmpCount).Comment Is Nothing Then .Range("B" & tmpRow + 2 + tmpCount).Comment.Delete
                Call ApplyOffenceComment("Main", "B" & tmpRow + 2 + tmpCount, Trim(OffenceFullText(tmpCount)))
                If FindCaseType(Offence(1)) <> "Traffic" And (.Range("C8") = "75" Or .Range("C8") = "76" Or .Range("C8") = "77" Or UCase(.Range("C8")) = "SJP") Then Range("O" & tmpRow + 2 + tmpCount) = "None"
                End If
            ' DVLA (SJP) company flag set then pre-fill adjourn to court & reason
            If tmpCompanyFlag = True Then
                .Range(ActionColumn & tmpRow + 2 + tmpCount) = "Adjourned for Court Hearing"
                .Range(AdjReasonColumn & tmpRow + 2 + tmpCount) = "Case inappropriate for SJP"
                .Range("B" & tmpRow + 3 & ":" & ValidationColumn & tmpRow + 2 + OffenceCount).Locked = False
                .Range(GuiltyCreditColumn & tmpRow + 2 + tmpCount & ":Q" & tmpRow + 2 + tmpCount) = ""
                .Range(GuiltyCreditColumn & tmpRow + 2 + tmpCount & ":Q" & tmpRow + 2 + tmpCount).Locked = True
                .Range("T" & tmpRow + 2 + tmpCount).Locked = True
                End If
        Next tmpCount
        ' Detect the driver info
        If .Range(ButtonColumn2 & tmpRow) = "View Case" And Len(tmpDIRCase) > 0 Then
            tmpData = DriverInfo(tmpTrafficHearingFolder & tmpDIRCase, Val(tmpRow + 1))
            If Len(tmpData) > 0 Then
                .Range("U" & tmpRow + 1 & ":V" & tmpRow + 1).Locked = False
                .Range("U" & tmpRow + 1) = tmpData
                Else
                .Range("U" & tmpRow + 1 & ":V" & tmpRow + 1).Locked = True
                End If
            End If
        
        ' Format result fields for each offence
        .Range(ActionColumn & tmpRow + 3 & ":" & ValidationColumn & tmpRow + 3 + OffenceCount).HorizontalAlignment = xlLeft
        .Range("B" & tmpRow + 3 & ":" & ValidationColumn & tmpRow + 2 + OffenceCount).WrapText = True
        .Range("B" & tmpRow + 3 & ":" & ValidationColumn & tmpRow + 2 + OffenceCount).Interior.ColorIndex = OffenceColour
        If tmpCompanyFlag = False Then
            .Range("B" & tmpRow + 3 & ":" & ValidationColumn & tmpRow + 2 + OffenceCount).Locked = False
            End If
        .Range("D" & tmpRow + 3 & ":E" & tmpRow + 3 + OffenceCount).HorizontalAlignment = xlCenter ' Apps & LAP
        

        .Range(BandColumn & tmpRow + 3 & ":" & BandColumn & tmpRow + 3 + OffenceCount).HorizontalAlignment = xlCenter ' Band
        .Range("O" & tmpRow + 3 & ":P" & tmpRow + 3 + OffenceCount).HorizontalAlignment = xlCenter ' LE NE PP and COL
        .Range("S" & tmpRow + 3 & ":T" & tmpRow + 3 + OffenceCount).HorizontalAlignment = xlCenter ' Adj Date and Disq
        
        .Range(IncomeColumn & tmpRow + 3 & ":" & IncomeColumn & tmpRow + 2 + OffenceCount).NumberFormat = "|fffd|#,##0.00"
        .Range(FineColumn & tmpRow + 3 & ":N" & tmpRow + 2 + OffenceCount).NumberFormat = "|fffd|#,##0.00"
        
        .Range("A" & tmpRow & ":" & ValidationColumn & tmpRow + 2 + OffenceCount).Borders.LineStyle = xlContinuous
        If .txtProsecutorType <> "Proceeds Of Crime Act" Then
            .Range(GuiltyCreditColumn & tmpRow + 3 & ":" & GuiltyCreditColumn & tmpRow + 3 + OffenceCount).HorizontalAlignment = xlCenter ' GP Credit
            .Range("Q" & tmpRow + 3 & ":Q" & tmpRow + 2 + OffenceCount).NumberFormat = "dd/mm/yyyy"
            Else
            .Range("Q" & tmpRow + 3 & ":Q" & tmpRow + 2 + OffenceCount).HorizontalAlignment = xlCenter
            End If
        .Range("S" & tmpRow + 3 & ":S" & tmpRow + 2 + OffenceCount).NumberFormat = "@"
        
        .Range("A" & tmpRow + 1 & ":A" & tmpRow + 2 + OffenceCount).Merge
        .Range("A" & tmpRow + 1).VerticalAlignment = xlCenter
        
        If .txtProsecutorType = "Pre Charge Bail" Then
            .Range("I" & tmpRow + 3 & ":L" & tmpRow + 2 + OffenceCount).Locked = True
            .Range("P" & tmpRow + 3 & ":Q" & tmpRow + 2 + OffenceCount).Locked = True
            .Range("M" & tmpRow + 3 & ":M" & tmpRow + 2 + OffenceCount).NumberFormat = "dd/mm/yyyy"
            .Range("N" & tmpRow + 3 & ":N" & tmpRow + 2 + OffenceCount).NumberFormat = "0"
            .Range("N" & tmpRow + 3 & ":N" & tmpRow + 2 + OffenceCount).HorizontalAlignment = xlCenter
            .Range("O" & tmpRow + 3 & ":O" & tmpRow + 2 + OffenceCount).NumberFormat = "dd/mm/yyyy"
            End If
                    
        ' Perform a check on the plea
        tmpPlea = ""
        If InStr(.txtProsecutorType, "(SJP)") > 0 Then tmpSJP = " SJP" Else tmpSJP = ""
        If Left(.Range(ButtonColumn2 & tmpRow), 9) = "View Case" And Len(tmpDIRCase) > 0 And .txtProsecutorType <> "Proceeds Of Crime Act" Then
            If Dir(tmpTrafficHearingFolder & tmpDIRCase & "\plea.html") = "" Then
                ' Manual Plea Scan
                tmpPleaFile = Dir(tmpTrafficHearingFolder & tmpDIRCase & "\*Guilty Plea*")
                
                If LCase(tmpPleaFile) = "not guilty plea.pdf" Then tmpPlea = "Not Guilty" & tmpSJP & vbLf & "(Written Plea)"
                If LCase(tmpPleaFile) = "not guilty plea.msg" Then tmpPlea = "Not Guilty" & tmpSJP & vbLf & "(Written Plea)"
                If LCase(tmpPleaFile) = "guilty plea.pdf" Then tmpPlea = "Guilty" & tmpSJP & vbLf & "(Written Plea)"
                If LCase(tmpPleaFile) = "guilty plea.msg" Then tmpPlea = "Guilty" & tmpSJP & vbLf & "(Written Plea)"
                If LCase(tmpPleaFile) = "not guilty plea req doh.pdf" Then tmpPlea = "Not Guilty Req DOH" & tmpSJP & vbLf & "(Written Plea)"
                If LCase(tmpPleaFile) = "not guilty plea req doh.msg" Then tmpPlea = "Not Guilty Req DOH" & tmpSJP & vbLf & "(Written Plea)"
                If LCase(tmpPleaFile) = "guilty plea req doh.pdf" Then tmpPlea = "Guilty Req DOH" & tmpSJP & vbLf & "(Written Plea)"
                If LCase(tmpPleaFile) = "guilty plea req doh.msg" Then tmpPlea = "Guilty Req DOH" & tmpSJP & vbLf & "(Written Plea)"

                If tmpPlea <> "" Then
                    For tmpCount = 1 To OffenceCount
                        .Range(PleaColumn & tmpRow + 2 + tmpCount) = tmpPlea
                        .Range(OriginalPleaColumn & tmpRow + 2 + tmpCount) = Replace(tmpPlea, vbLf, " ")
                        ' Pre-fill adjournment if requesting a DOH
                        If InStr(tmpPlea, "Req DOH") > 0 And tmpSJP <> "" Then
                            .Range(ActionColumn & tmpRow + 2 + tmpCount) = "Adjourned for Court Hearing"
                            '.Range(AdjReasonColumn & tmpRow + 2 + tmpCount) = "To attend for sentence (Summons To Issue)"
                            .Range("H" & tmpRow + 2 + tmpCount & ":Q" & tmpRow + 2 + tmpCount).Locked = True
                            .Range("T" & tmpRow + 2 + tmpCount).Locked = True
                            End If
                        If .Range(ActionColumn & tmpRow + 2 + tmpCount) = "" Then
                            If Left(tmpPlea, 6) = "Guilty" Then .Range(GuiltyCreditColumn & tmpRow + 2 + tmpCount) = "Y"
                            If Left(tmpPlea, 10) = "Not Guilty" Then .Range(GuiltyCreditColumn & tmpRow + 2 + tmpCount) = "N"
                        End If
                        
                    Next tmpCount
                    End If
                Else
                ' Online Plea Scan
                DefendantIncome = ""
                DefendantMitigation = ""
                If OffenceCount = 1 Then
                    .Range(PleaColumn & tmpRow + 3) = ScanSingleOffenceOnlinePlea(tmpTrafficHearingFolder & tmpDIRCase & "\Plea.html", tmpRow + 3, tmpSJP)
                    If Left(.Range(PleaColumn & tmpRow + 3), 6) = "Guilty" Then .Range(GuiltyCreditColumn & tmpRow + 3) = "Y"
                    If Left(.Range(PleaColumn & tmpRow + 3), 10) = "Not Guilty" Then .Range(GuiltyCreditColumn & tmpRow + 3) = "N"
                    Range(IncomeColumn & tmpRow + 3) = DefendantIncome
                    If Len(DefendantMitigation) > 2 Then Range(OriginalMitigationColumn & tmpRow + 3) = "MITIGATION: " & DefendantMitigation
                    Else
                    ' Scan for pleas against multiple offences
                    Open tmpTrafficHearingFolder & tmpDIRCase & "\Plea.html" For Input Shared As #2
                    Do While Not EOF(2)
                        Line Input #2, tmpPleaDataLine
                        If InStr(LCase(tmpPleaDataLine), ">plea</") > 0 Or InStr(LCase(tmpPleaDataLine), ">your plea") > 0 Or InStr(LCase(tmpPleaDataLine), "company pleas") > 0 Then
                            Do While Not EOF(2)
                            For tmpCount = 1 To 25
                                Line Input #2, tmpPleaDataLine
                                If InStr(LCase(tmpPleaDataLine), "charge ") > 0 Then tmpPleaRow = Val(Mid(tmpPleaDataLine, InStr(LCase(tmpPleaDataLine), "charge ") + 7))
                                If InStr(LCase(tmpPleaDataLine), "charge-title") > 0 Then tmpPleaChargeText = Mid(tmpPleaDataLine, InStr(LCase(tmpPleaDataLine), "charge-title") + 14)
                                If InStr(LCase(tmpPleaDataLine), "guilty") > 0 Or InStr(LCase(tmpPleaDataLine), ">mitigation") > 0 Then Exit For
                                If EOF(2) Then Exit For
                            Next tmpCount
                            If InStr(tmpPleaChargeText, "<") > 0 Then tmpPleaChargeText = Left(tmpPleaChargeText, InStr(tmpPleaChargeText, "<") - 1)
                            tmpPleaChargeText = Replace(tmpPleaChargeText, "  ", " ")
                            If InStr(LCase(tmpPleaDataLine), "guilty") = 0 Or InStr(LCase(tmpPleaDataLine), ">mitigation") > 0 Then Exit Do
                            ' Determine if the offence row matches the offence text and cycle all offences otherwise
                            If InStr(LCase(.Range("B" & tmpRow + 2 + tmpPleaRow)), LCase(tmpPleaChargeText)) = 0 Then
                                tmpCount = 1: tmpPleaOffenceCounter = -1
                                Do
                                    If InStr(LCase(.Range("B" & tmpRow + 2 + tmpCount)), LCase(tmpPleaChargeText)) > 0 Then tmpPleaOffenceCounter = tmpCount: Exit Do
                                    tmpCount = tmpCount + 1
                                Loop Until .Range("B" & tmpRow + 2 + tmpCount) = ""
                                End If
                            If tmpPleaOffenceCounter = -1 Then
                                If .Range(PleaColumn & tmpRow + 2 + tmpPleaRow) = "" Then .Range(PleaColumn & tmpRow + 2 + tmpPleaRow) = "Error" & vbLf & "(Cant Match)"
                                Else
                                If tmpCompanyFlag = False Then
                                    If InStr(LCase(tmpPleaDataLine), "not guilty") > 0 Then
                                        .Range(PleaColumn & tmpRow + 2 + tmpPleaRow) = "Not Guilty" & tmpSJP & vbLf & "(Online Plea)"
                                        .Range(GuiltyCreditColumn & tmpRow + 2 + tmpPleaRow) = "N"
                                        Else
                                        .Range(PleaColumn & tmpRow + 2 + tmpPleaRow) = "Guilty" & tmpSJP & vbLf & "(Online Plea)"
                                        .Range(GuiltyCreditColumn & tmpRow + 2 + tmpPleaRow) = "Y"
                                        End If
                                    End If
                                End If
                            ' Mitigation
                            For tmpCount = 1 To 25
                                If EOF(2) Then Exit For
                                Line Input #2, tmpPleaDataLine
                                If InStr(tmpPleaDataLine, "</section>") > 0 Then Exit For
                                If InStr(LCase(tmpPleaDataLine), ">mitigation") > 0 Then
                                    If EOF(2) Then Exit For
                                    Line Input #2, tmpDataline
                                    DefendantMitigation = ""
                                    For tmpMITCount = 1 To 25
                                        DefendantMitigation = DefendantMitigation & Trim(tmpDataline) & " "
                                        Line Input #2, tmpDataline
                                        If Len(Trim(tmpDataline)) = 0 Or InStr(LCase(tmpDataline), "<dt>plead") > 0 Then Exit For
                                    Next tmpMITCount
                                    DefendantMitigation = Replace(DefendantMitigation, "<td>", "")
                                    DefendantMitigation = Replace(DefendantMitigation, "</td>", "")
                                    DefendantMitigation = Replace(DefendantMitigation, "</tr>", "")
                                    DefendantMitigation = Replace(DefendantMitigation, "<dd>", "")
                                    DefendantMitigation = Replace(DefendantMitigation, "</dd>", "")
                                    DefendantMitigation = Replace(DefendantMitigation, "&amp;", "&")
                                    DefendantMitigation = Replace(DefendantMitigation, "&#39;", "'")
                                    DefendantMitigation = Replace(DefendantMitigation, "<br />", "")
                                    DefendantMitigation = Replace(DefendantMitigation, "|fffd|", "")
                                    If Len(DefendantMitigation) > 2 Then Range(OriginalMitigationColumn & tmpRow + 2 + tmpPleaRow) = "MITIGATION: " & DefendantMitigation
                                    End If
                            Next tmpCount
                            Loop
                            End If
                        ' ********** This is the income from the plea **********
                        If InStr(LCase(tmpPleaDataLine), ">your benefits</") > 0 Then
                            For tmpCount = 1 To 20
                                Line Input #2, tmpPleaDataLine
                                If Len(tmpPleaDataLine) > 0 Then
                                    If InStr(tmpPleaDataLine, ">Your benefits are paid</") > 0 Then
                                        Line Input #2, tmpPleaDataLine
                                        tmpBenefitsPeriod = Mid(tmpPleaDataLine, InStr(tmpPleaDataLine, ">") + 1)
                                        If InStr(tmpBenefitsPeriod, "<") > 0 Then tmpBenefitsPeriod = Left(tmpBenefitsPeriod, InStr(tmpBenefitsPeriod, "<") - 1)
                                        End If
                                    If InStr(tmpPleaDataLine, "|fffd|") > 0 Then
                                        tmpBenefits = Replace(Mid(tmpPleaDataLine, InStr(tmpPleaDataLine, "|fffd|") + 1), ",", "")
                                        If InStr(tmpBenefits, "<") > 0 Then tmpBenefits = Left(tmpBenefits, InStr(tmpBenefits, "<") - 1)
                                        If tmpBenefitsPeriod = "Fortnightly" Then tmpBenefits = Val(tmpBenefits) / 2
                                        If tmpBenefitsPeriod = "Monthly" Then tmpBenefits = (Val(tmpBenefits) * 12) / 52
                                        Exit For
                                        End If
                                    End If
                            Next tmpCount
                            End If
                        If InStr(LCase(tmpPleaDataLine), ">total weekly income</") > 0 Or InStr(LCase(tmpPleaDataLine), ">weekly take home pay") > 0 Or InStr(LCase(tmpPleaDataLine), ">weekly</") > 0 Then
                            For tmpCount = 1 To 30
                                Line Input #2, tmpPleaDataLine
                                If EOF(2) Then Exit For
                                If Len(tmpPleaDataLine) > 0 Then
                                    If InStr(tmpPleaDataLine, "|fffd|") > 0 Then
                                        DefendantIncome = Replace(Mid(tmpPleaDataLine, InStr(tmpPleaDataLine, "|fffd|") + 1), ",", "")
                                        If InStr(DefendantIncome, "<") > 0 Then DefendantIncome = Left(DefendantIncome, InStr(DefendantIncome, "<") - 1)
                                        DefendantIncome = Val(DefendantIncome) - Val(tmpBenefits)
                                        Exit For
                                        End If
                                    End If
                            Next tmpCount
                            If DefendantIncome <> "" Then Range(IncomeColumn & tmpRow + 3 & ":" & IncomeColumn & tmpRow + 2 + OffenceCount) = DefendantIncome
                            End If
                    Loop
                    Close 2
                    End If
                End If
            End If
        
        ' Pre-populate the Plea and Guilty Plea credit fields except when prosecutor is Proceeds Of Crime Act
        If .txtProsecutorType <> "Proceeds Of Crime Act" Then
            For tmpCount = 1 To OffenceCount
                If InStr(.Range(PleaColumn & tmpRow + 2 + tmpCount), "(") = 0 Then
                    .Range(PleaColumn & tmpRow + 2 + tmpCount) = "No Plea"
                    If tmpCompanyFlag = False Then
                        .Range(GuiltyCreditColumn & tmpRow + 2 + tmpCount) = "N"
                        .Range(GuiltyCreditColumn & tmpRow + 2 + tmpCount).Locked = True
                        End If
                    End If
            Next tmpCount
            End If
            
        ' Merge Cells
        If .txtProsecutorType = "Proceeds Of Crime Act" Then
            For tmpCount = 1 To OffenceCount
                .Range(PleaColumn & tmpRow + 2 + tmpCount).Locked = True
                .Range("H" & tmpRow + 2 + tmpCount & ":J" & tmpRow + 2 + tmpCount).Merge
                .Range("K" & tmpRow + 2 + tmpCount & ":L" & tmpRow + 2 + tmpCount).Merge
                .Range("M" & tmpRow + 2 + tmpCount & ":N" & tmpRow + 2 + tmpCount).Merge
                .Range("O" & tmpRow + 2 + tmpCount & ":P" & tmpRow + 2 + tmpCount).Merge
                .Range("O" & tmpRow + 2 + tmpCount & ":P" & tmpRow + 2 + tmpCount).Locked = True
            Next tmpCount
            End If
        
        ' Check for previous Result and pre-populate the Action
        
        Call LoadResultHistory(Val(tmpRow))
        
        'Call PreviousResultCheck(Val(tmpRow))
        
        .Range(ButtonColumn & tmpRow + 4 & ":" & ButtonColumn & tmpRow + 3 + OffenceCount).Interior.ColorIndex = 2
        
        tmpRow = tmpRow + 5 + OffenceCount
        .Range("A" & tmpRow - 2 & ":" & ButtonColumn & tmpRow - 1).Interior.ColorIndex = 2
        Exit Do
NextCase:
    Loop
    'Close 1
    Call GetPositionShapesInPlace
    ' Column Adjustment
    Select Case .txtProsecutorType
    
        Case Is = "Pre Charge Bail"
            .Columns(ActionColumn).ColumnWidth = 16.29
            .Columns(GuiltyCreditColumn).ColumnWidth = 0
            .Columns(FCOSTSColumn).ColumnWidth = 11.29
            .Columns("T").ColumnWidth = 0
            .Columns("U").ColumnWidth = 20
        
        Case Else
            .Columns(ActionColumn).ColumnWidth = 13
            .Columns(GuiltyCreditColumn).ColumnWidth = 6
            .Columns(FCOSTSColumn).ColumnWidth = 9
            .Columns("T").ColumnWidth = 7.71
            .Columns("U").ColumnWidth = 14
    End Select
    
    Call SetPositionShapesInPlace
    End With
    Application.DisplayCommentIndicator = xlCommentIndicatorOnly
    If Len(tmpErrors) <> 0 Then MsgBox "Error!  The import contained " & tmpErrorCount & " error(s), please see below for examples :-" & vbLf & vbLf & tmpErrors, vbCritical
End Sub

Private Sub PreviousResultCheck(tmpDefendantRow As Integer)
    Dim app As Excel.Application
    Dim wb As Workbook
    Dim tmpResultFile As String
    Dim tmpLastResultDate As String
    Dim tmpLastResultFile As String
    Dim tmpCount As Integer
    Dim tmpOldResultCount As Integer
    If Len(Worksheets("Main").Range(CaseFolderPathColumn & tmpDefendantRow)) = 0 Then Exit Sub
    tmpResultFile = FindMostRecentResult(Worksheets("Main").Range(CaseFolderPathColumn & tmpDefendantRow) & "\Result On ????-??-??*.xl*")
    If tmpResultFile = "" Or Len(tmpResultFile) < 20 Then Exit Sub
    tmpLastResultDate = Mid(tmpResultFile, 19, 2) & "/" & Mid(tmpResultFile, 16, 2) & "/" & Mid(tmpResultFile, 11, 4)
    ' Get the file name of the last result on the case
    On Error Resume Next
    Set app = New Excel.Application
    app.Visible = False
    app.DisplayAlerts = False
    ' Check the previous result for PIA On or Guilty On or Not Guilty On

    Set wb = app.Workbooks.Open(Worksheets("Main").Range(CaseFolderPathColumn & tmpDefendantRow) & "\" & tmpResultFile)
    tmpCount = 1
    Do
        tmpOldResultCount = 1
        Do
            ' If the offence numbers match then...
            If Val(Worksheets("Main").Range("B" & tmpDefendantRow + 2 + tmpCount)) = Val(wb.Worksheets("Result").Range("B" & 10 + tmpOldResultCount)) Then
                ' Get any proved in absence date
                If Left(wb.Worksheets("Result").Range(ActionColumn & 10 + tmpOldResultCount), 13) = "Adjourned PIA" Or Left(wb.Worksheets("Result").Range("F" & 10 + tmpOldResultCount), 13) = "Adjourned PIA" Then
                    Worksheets("Main").Range(PleaColumn & tmpDefendantRow + 2 + tmpCount) = "PIA On " & tmpLastResultDate
                    Worksheets("Main").Range(OriginalPleaColumn & tmpDefendantRow + 2 + tmpCount) = "PIA On " & tmpLastResultDate
                    Worksheets("Main").Range(IncomeColumn & tmpDefendantRow + 2 + tmpCount) = Worksheets("Main").Range("S3")
                    End If
                ' Get any previous guilty plea
                If Left(wb.Worksheets("Result").Range(ActionColumn & 10 + tmpOldResultCount), 3) = "Adj" And Left(wb.Worksheets("Result").Range(ActionColumn & 10 + tmpOldResultCount), 13) <> "Adjourned PIA" Then
                    If Left(wb.Worksheets("Result").Range(PleaColumn & 10 + tmpOldResultCount), 6) = "Guilty" Then
                        Worksheets("Main").Range(PleaColumn & tmpDefendantRow + 2 + tmpCount) = "Guilty Plea On " & tmpLastResultDate
                        Worksheets("Main").Range(OriginalPleaColumn & tmpDefendantRow + 2 + tmpCount) = "Guilty Plea On " & tmpLastResultDate
                        End If
                    End If
                ' Get any previous not guilty plea (DVLA Only)
                If Worksheets("Main").txtProsecutorType = "DVLA" Then
                    If Left(wb.Worksheets("Result").Range(ActionColumn & 10 + tmpOldResultCount), 3) = "Adj" Then
                        If Left(wb.Worksheets("Result").Range(PleaColumn & 10 + tmpOldResultCount), 10) = "Not Guilty" Then
                            Worksheets("Main").Range(PleaColumn & tmpDefendantRow + 2 + tmpCount) = "Not Guilty Plea On " & tmpLastResultDate
                            Worksheets("Main").Range(OriginalPleaColumn & tmpDefendantRow + 2 + tmpCount) = "Not Guilty Plea On " & tmpLastResultDate
                            End If
                        End If
                    End If
                End If
            tmpOldResultCount = tmpOldResultCount + 1
        Loop Until Val(wb.Worksheets("Result").Range("B" & 10 + tmpOldResultCount)) = 0
        tmpCount = tmpCount + 1
    Loop Until Worksheets("Main").Range("B" & tmpDefendantRow + 2 + tmpCount).Interior.ColorIndex <> OffenceColour
    wb.Close SaveChanges:=No
    app.Quit
    Set wb = Nothing
    Set app = Nothing
    On Error GoTo 0
End Sub

Private Sub PerformGuiltyPleaFilter(tmpWhatPlea As String)
    Dim tmpCount As Integer
    Dim tmpCount1 As Integer
    Dim tmpDIRCase As String
    Dim tmpSurname As String
    Dim tmpForename As String
    Dim tmpSubFolder As String
    Dim tmpFound As Boolean
    Dim DataLine As String
    Dim tmpGPCount As Integer
    Dim tmpLiveFiles As String
    tmpLiveFiles = Dir(Worksheets("Main").Range("C3") & "\*live files*", vbDirectory)
    If tmpLiveFiles = "" Then Exit Sub
    
    For tmpCount = 0 To lstCases.ListCount - 1
        tmpFound = False
        If lstCases.Selected(tmpCount) = True Then
            If Len(lstCases.Column(5, tmpCount)) > 0 And InStr(lstCases.Column(3, tmpCount), " ") > 0 Then
                tmpSurname = Trim(Mid(lstCases.Column(3, tmpCount), InStrRev(lstCases.Column(3, tmpCount), " ")))
                tmpForename = Trim(Left(lstCases.Column(3, tmpCount), InStrRev(lstCases.Column(3, tmpCount), " ")))
                If Left(LCase(tmpForename), 3) = "mr " Or Left(LCase(tmpForename), 3) = "ms " Or Left(LCase(tmpForename), 5) = "miss " Or Left(LCase(tmpForename), 3) = "dr " Or Left(LCase(tmpForename), 4) = "mrs " Then
                    tmpForename = Trim(Mid(tmpForename, InStr(tmpForename, " ")))
                    End If
                If InStr(Sheet1.txtProsecutorType, "(SJP)") > 0 Then
                    tmpSubFolder = "\SJP"
                    Else
                    tmpSubFolder = "\" & Right(Worksheets("Main").Range("C6"), 4) & "-" & Mid(Worksheets("Main").Range("C6"), 4, 2) & "-" & Left(Worksheets("Main").Range("C6"), 2)
                    End If
                tmpDIRCase = FindCaseFolder(tmpSurname, tmpForename, lstCases.Column(5, tmpCount), Worksheets("Main").Range("C3") & "\" & tmpLiveFiles & tmpSubFolder)
                If tmpDIRCase = "" And tmpWhatPlea = "No Plea" Then tmpFound = True: GoTo PerformGuiltyPleaFilter_0
                If tmpDIRCase <> "" Then
                    ' Check the plea for a Guilty
                    Select Case tmpWhatPlea
                    Case Is = "Guilty"
                        If Dir(Worksheets("Main").Range("C3") & "\" & tmpLiveFiles & tmpSubFolder & "\" & tmpDIRCase & "\Guilty*.pdf") <> "" Or Dir(Worksheets("Main").Range("C3") & "\" & tmpLiveFiles & tmpSubFolder & "\" & tmpDIRCase & "\Guilty*.msg") <> "" Then
                            tmpFound = True
                            Else
                            If Dir(Worksheets("Main").Range("C3") & "\" & tmpLiveFiles & tmpSubFolder & "\" & tmpDIRCase & "\Plea.html") <> "" Then
                                Open Worksheets("Main").Range("C3") & "\" & tmpLiveFiles & tmpSubFolder & "\" & tmpDIRCase & "\Plea.html" For Input As #1
                                Do While Not EOF(1)
                                    Line Input #1, DataLine
                                    If InStr(LCase(DataLine), ">guilty</") > 0 Then tmpFound = True
                                    If InStr(LCase(DataLine), ">not guilty</") > 0 Then tmpFound = False: Exit Do
                                Loop
                                Close 1
                                End If
                            End If
                    Case Is = "Not Guilty"
                        If Dir(Worksheets("Main").Range("C3") & "\" & tmpLiveFiles & tmpSubFolder & "\" & tmpDIRCase & "\Not Guilty*.pdf") <> "" Or Dir(Worksheets("Main").Range("C3") & "\" & tmpLiveFiles & tmpSubFolder & "\" & tmpDIRCase & "\Not Guilty*.msg") <> "" Then
                            tmpFound = True
                            Else
                            If Dir(Worksheets("Main").Range("C3") & "\" & tmpLiveFiles & tmpSubFolder & "\" & tmpDIRCase & "\Plea.html") <> "" Then
                                Open Worksheets("Main").Range("C3") & "\" & tmpLiveFiles & tmpSubFolder & "\" & tmpDIRCase & "\Plea.html" For Input As #1
                                Do While Not EOF(1)
                                    Line Input #1, DataLine
                                    If InStr(LCase(DataLine), ">not guilty</") > 0 Then tmpFound = True: Exit Do
                                Loop
                                Close 1
                                End If
                            End If
                    Case Is = "No Plea"
                        tmpFound = False
                        If Dir(Worksheets("Main").Range("C3") & "\" & tmpLiveFiles & tmpSubFolder & "\" & tmpDIRCase & "\*Guilty*.pdf") = "" And Dir(Worksheets("Main").Range("C3") & "\" & tmpLiveFiles & tmpSubFolder & "\" & tmpDIRCase & "\*Guilty*.msg") = "" Then
                            If Dir(Worksheets("Main").Range("C3") & "\" & tmpLiveFiles & tmpSubFolder & "\" & tmpDIRCase & "\Plea.html") = "" Then
                                tmpFound = True
                                End If
                            End If
                    End Select
                    End If
                End If
PerformGuiltyPleaFilter_0:
            If tmpFound = False Then lstCases.Selected(tmpCount) = False Else tmpGPCount = tmpGPCount + 1
            End If
        If tmpGPCount >= Val(txtHowManyGuilty) Then
            For tmpCount1 = tmpCount + 1 To lstCases.ListCount - 1
                lstCases.Selected(tmpCount1) = False
            Next tmpCount1
            Exit For
            End If
    Next tmpCount
End Sub

Sub GetPositionShapesInPlace()
    Dim oShape As Shape
    ReDim varCoordinates(1 To Worksheets("Main").Shapes.Count, 1 To 4)
     
    For Each oShape In Worksheets("Main").Shapes
        lShape = lShape + 1
        With oShape
            varCoordinates(lShape, 1) = .Height
            varCoordinates(lShape, 2) = .Width
            varCoordinates(lShape, 3) = .Top
            varCoordinates(lShape, 4) = .Left
        End With
    Next oShape
    lShape = Empty
     
End Sub
Sub SetPositionShapesInPlace()
    Dim oShape As Shape
     
    For Each oShape In Worksheets("Main").Shapes
        lShape = lShape + 1
        With oShape
            .Height = varCoordinates(lShape, 1)
            .Width = varCoordinates(lShape, 2)
            .Top = varCoordinates(lShape, 3)
            .Left = varCoordinates(lShape, 4)
        End With
    Next oShape
    lShape = Empty
End Sub

Attribute VB_Name = "frmConditionalDischarge"
Attribute VB_Base = "0{650480AE-1A09-4F87-AF50-B8D54D608F05}{462F262A-C35E-44AF-9B01-D5B5E0491560}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub UserForm_Activate()
    lblBack1.BackColor = RGB(153, 204, 255)
    Me.BackColor = RGB(0, 0, 128)
    txtPeriod.Clear
    txtPeriod.AddItem "Days"
    txtPeriod.AddItem "Weeks"
    txtPeriod.AddItem "Months"
    txtPeriod.AddItem "Years"
End Sub

Private Sub btnCancel_Click()
    Unload Me
End Sub

Private Sub btnSave_Click()
    If Len(txtPeriodAmount) = 0 Then MsgBox "Error!  You must enter a period", vbCritical: Exit Sub
    If Len(txtPeriod) = 0 Then MsgBox "Error!  You must enter a period", vbCritical: Exit Sub
    tmpDisableWorkSheetChange = True
    If IsUserFormLoaded("frmDuplicateResult") = False Then
        Worksheets("Main").Range("U" & DisqRow) = "Conditional Discharge for " & txtPeriodAmount & " " & txtPeriod
        Else
        VBA.UserForms(0).Controls("txtNotes") = "Conditional Discharge for " & txtPeriodAmount & " " & txtPeriod
        End If
    Unload Me
End Sub

Attribute VB_Name = "frmDirections"
Attribute VB_Base = "0{81A44752-47CE-487D-B1DB-57B683FAD615}{E8FBB3EE-F0D4-479E-977C-7925FA7CE8CB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub btnCancel_Click()
    Unload Me
End Sub

Private Sub btnSave_Click()
    Dim tmpCourt As String
    If Len(Range(AdjCourtColumn & DisqRow)) > 0 And IsDate(Range("S" & DisqRow)) = True Then tmpCourt = Range(AdjCourtColumn & DisqRow) & " on " & Range("S" & DisqRow)
    Worksheets("Main").Range("U" & DisqRow) = Worksheets("Main").Range("U" & DisqRow) & vbCrLf & "Directions:" & vbCrLf & lbl1.Caption & " " & txtDate1 & vbCrLf & lbl2.Caption & " " & txtDate2 & vbCrLf & lbl3.Caption & " " & txtDate3 & vbCrLf & lbl4.Caption & _
        vbCrLf & lbl5.Caption & vbCrLf & lbl6.Caption
    If Len(Worksheets("Main").Range(AdjCourtColumn & DisqRow)) > 0 Then Worksheets("Main").Range("U" & DisqRow) = Worksheets("Main").Range("U" & DisqRow) & Worksheets("Main").Range(AdjCourtColumn & DisqRow)
    If IsDate(Worksheets("Main").Range(AdjDateColumn & DisqRow)) = True Then Worksheets("Main").Range("U" & DisqRow) = Worksheets("Main").Range("U" & DisqRow) & " on " & Worksheets("Main").Range(AdjDateColumn & DisqRow)
    Unload Me
End Sub

Private Sub txtDate1_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If IsDate(txtDate1) = False Then txtDate1 = "" Else txtDate1 = Format(txtDate1, "dd/mm/yyyy")
End Sub

Private Sub txtDate2_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If IsDate(txtDate2) = False Then txtDate2 = "" Else txtDate2 = Format(txtDate2, "dd/mm/yyyy")
End Sub

Private Sub txtDate3_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If IsDate(txtDate3) = False Then txtDate3 = "" Else txtDate3 = Format(txtDate3, "dd/mm/yyyy")
End Sub

Private Sub UserForm_Initialize()
    lblBack1.BackColor = RGB(153, 204, 255)
    Me.BackColor = RGB(0, 0, 128)
End Sub
Attribute VB_Name = "frmDisqualified"
Attribute VB_Base = "0{149436F2-2256-46EA-80DC-243BCFDC5890}{4187F914-16D9-4E60-AC9F-721B4308AFAD}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub btnCancel_Click()
    If IsUserFormLoaded("frmDuplicateResult") = False Then
        tmpDisableWorkSheetChange = True
        Worksheets("Main").Range("T" & DisqRow) = "N"
        End If
    Unload Me
End Sub

Private Sub btnSave_Click()
    Select Case txtDisqChoice
    Case Is = "Exceptional Hardship"
        If Len(txtEH) = 0 Then MsgBox "Error!  You must enter a reason for the exceptional hardship", vbCritical: Exit Sub
        tmpDisableWorkSheetChange = True
        If IsUserFormLoaded("frmDuplicateResult") = False Then
            Worksheets("Main").Range("U" & DisqRow) = "Exceptional Hardship: " & txtEH
            Else
            VBA.UserForms(0).Controls("txtNotes") = "Exceptional Hardship: " & txtEH
            End If
        
    Case Is = "Section 34(2)"
        If Len(txtPeriodAmount) = 0 Or Len(txtPeriod) = 0 Then MsgBox "Error!  You must enter a period for the disqualification", vbCritical: Exit Sub
        tmpDisableWorkSheetChange = True
        If IsUserFormLoaded("frmDuplicateResult") = False Then
            Worksheets("Main").Range("U" & DisqRow) = "S34(2): for " & txtPeriodAmount & " " & txtPeriod
            Else
            VBA.UserForms(0).Controls("txtNotes") = "S34(2): for " & txtPeriodAmount & " " & txtPeriod
            End If
    
    Case Is = "Section 35"
        If Len(txtPeriodAmount) = 0 Or Len(txtPeriod) = 0 Then MsgBox "Error!  You must enter a period for the disqualification", vbCritical: Exit Sub
        tmpDisableWorkSheetChange = True
        If IsUserFormLoaded("frmDuplicateResult") = False Then
            Worksheets("Main").Range("U" & DisqRow) = "S35: for " & txtPeriodAmount & " " & txtPeriod
            Else
            VBA.UserForms(0).Controls("txtNotes") = "S35: for " & txtPeriodAmount & " " & txtPeriod
            End If
        
    Case Is = "Section 36"
        If Len(txtEH) = 0 Then MsgBox "Error!  You must specify when the disqualification will end", vbCritical: Exit Sub
        tmpDisableWorkSheetChange = True
        If IsUserFormLoaded("frmDuplicateResult") = False Then
            Worksheets("Main").Range("U" & DisqRow) = "S36: " & txtEH
            Else
            VBA.UserForms(0).Controls("txtNotes") = "S36: " & txtEH
            End If
    End Select
    Unload Me
End Sub

Private Sub txtDisqChoice_Click()
    Call HideAll
    If Len(txtDisqChoice) = "" Then Exit Sub
    
    Select Case txtDisqChoice
    
    Case Is = "Exceptional Hardship"
        lblChoose.Visible = True
        lblChoose.Caption = "Reasons for exceptional hardship"
        txtEH.Visible = True
        txtEH.SetFocus
    
    Case Is = "Section 34(2)"
        lblChoose.Visible = True
        lblChoose.Caption = "Enter the disqualified period"
        txtPeriodAmount.Visible = True
        txtPeriod.Visible = True
        txtPeriodAmount.SetFocus
    
    Case Is = "Section 35"
        lblChoose.Visible = True
        lblChoose.Caption = "Enter the disqualified period"
        txtPeriodAmount.Visible = True
        txtPeriod.Visible = True
        txtPeriodAmount.SetFocus
    
    Case Is = "Section 36"
        lblChoose.Visible = True
        lblChoose.Caption = "Disqualified"
        txtEH.Visible = True
        txtEH = "Until passes a test of competence"
        txtEH.SetFocus
        
    End Select
End Sub

Private Sub UserForm_Activate()
    lblDefendant.BackColor = RGB(153, 204, 255)
    lblBack1.BackColor = RGB(153, 204, 255)
    Me.BackColor = RGB(0, 0, 128)
    
    If IsUserFormLoaded("frmDuplicateResult") = False Then
        If Worksheets("Main").Range("B" & DisqRow - 3) = "Defendant" Then lblDefendant.Caption = " " & Worksheets("Main").Range("B" & DisqRow - 2) & "   (URN: " & Worksheets("Main").Range(URNColumn & DisqRow - 2) & ")"
        If Worksheets("Main").Range("B" & DisqRow - 4) = "Defendant" Then lblDefendant.Caption = " " & Worksheets("Main").Range("B" & DisqRow - 3) & "   (URN: " & Worksheets("Main").Range(URNColumn & DisqRow - 3) & ")"
        If Worksheets("Main").Range("T" & DisqRow) = "EH" Then
            txtDisqChoice.Clear
            txtDisqChoice.AddItem "Exceptional Hardship"
            lblChooseDisq.Caption = ""
            txtDisqChoice = "Exceptional Hardship"
            txtDisqChoice.Locked = True
            Else
            txtDisqChoice.Clear
            txtDisqChoice.AddItem "Section 34(2)"
            txtDisqChoice.AddItem "Section 35"
            txtDisqChoice.AddItem "Section 36"
            End If
        Else
        If UCase(VBA.UserForms(0).Controls("txtDisq")) = "EH" Then
            txtDisqChoice.Clear
            txtDisqChoice.AddItem "Exceptional Hardship"
            lblChooseDisq.Caption = ""
            txtDisqChoice = "Exceptional Hardship"
            txtDisqChoice.Locked = True
            Else
            txtDisqChoice.Clear
            txtDisqChoice.AddItem "Section 34(2)"
            txtDisqChoice.AddItem "Section 35"
            txtDisqChoice.AddItem "Section 36"
            End If
        End If

    txtPeriod.Clear
    txtPeriod.AddItem "Days"
    txtPeriod.AddItem "Months"
    txtPeriod.AddItem "Years"
End Sub

Sub HideAll()
    txtEH.Visible = False
    lblChoose.Visible = False
    txtPeriodAmount.Visible = False
    txtPeriod.Visible = False
    txtEH = ""
    txtPeriodAmount = ""
    txtPeriod = ""
End Sub

Attribute VB_Name = "frmDuplicateResult"
Attribute VB_Base = "0{5EE6FD92-19BD-4077-BCA9-EC0B4EDAF6F2}{27ACC098-EB8B-40FD-95FF-D203727A06B2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim MainListStart As Integer
Dim OffencesList() As String
Dim OffenceArrayMax As Integer
Dim PleaFilter As String
Dim LastCell As String

Private Sub btnClose_Click()
    Worksheets("WS1").Cells.Clear
    Unload Me
End Sub

Private Sub btnSelectAll_Click()
    Dim tmpCount As Integer
    Dim tmpSelected As Boolean
    If btnSelectAll.Caption = "Select All" Then
        tmpSelected = True
        btnSelectAll.Caption = "Select None"
        Else
        tmpSelected = False
        btnSelectAll.Caption = "Select All"
        End If
    For tmpCount = 0 To lstDefendants.ListCount - 1
        lstDefendants.Selected(tmpCount) = tmpSelected
    Next tmpCount
End Sub

Private Sub btnUpdate_Click()
    Dim tmpRow As Integer
    If txtAction <> "Withdrawn" And txtAction <> "NEO Dismissed" And txtAction <> "Not Completed" And txtAction <> "Dismissed" And txtAction <> "Entered In Error" And txtAction <> "Absolute Discharge" And txtAction <> "Conditional Discharge" Then
        If txtApp = "" Then MsgBox "Error! Appears must be Y or N", vbCritical: txtApp.SetFocus: Exit Sub
        If txtPlea.Visible = True And txtPlea = "" Then MsgBox "Error! Invalid Plea", vbCritical: txtPlea.SetFocus: Exit Sub
        If InStr(txtAction, "Adjourned") = 0 Then
            ' Fine or Proved in Absence Only
            If txtGPCred = "" Then MsgBox "Error! Invalid Guilty Plea Credit", vbCritical: txtGPCred.SetFocus: Exit Sub
            If txtIncome = "" Then MsgBox "Error! Invalid Income", vbCritical: txtIncome.SetFocus: Exit Sub
            If txtBand = "" Then MsgBox "Error! Invalid Band", vbCritical: txtBand.SetFocus: Exit Sub
            If txtFine = "" Then MsgBox "Error! Invalid Fine", vbCritical: txtFine.SetFocus: Exit Sub
            If txtFCosts = "" Then MsgBox "Error! Invalid FCosts", vbCritical: txtFCosts.SetFocus: Exit Sub
            If txtVS = "" Then MsgBox "Error! Invalid Victim Surcharge", vbCritical: txtVS.SetFocus: Exit Sub
            If txtLEPP = "" Then MsgBox "Error! Lic/Pen Pts must be:-" & vbLf & "NE (Licence Not Endorsed)" & vbLf & "LE (Licence Endorsed)" & vbLf & "or 3-10 points", vbCritical: txtLEPP.SetFocus: Exit Sub
            If txtCOLLO = "" Then MsgBox "Error! Invalid Collection order, must by Y or N", vbCritical: txtCOLLO.SetFocus: Exit Sub
            If txtDisq = "" Then MsgBox "Error! Invalid Disqualification, must by Y or N", vbCritical: txtDisq.SetFocus: Exit Sub
            If txtFine <> "" And txtPayBy = "" Then MsgBox "Error! Invalid Pay By Date", vbCritical: txtPayBy.SetFocus: Exit Sub
            Else
            ' Adjourned
            If txtReasonList = "" Then MsgBox "Error!  Invalid Reason for adjournment", vbCritical: txtReasonList.SetFocus: Exit Sub
            If IsDate(txtAdjDate) = False Then MsgBox "Error!  Invalid Adjournment Date", vbCritical: txtAdjDate.SetFocus: Exit Sub
            End If
        Else
        If txtAction = "Withdrawn" Or txtAction = "Dismissed" Or txtAction = "Not Completed" Then
            If txtNotes = "" Then MsgBox "Error!  You must enter a note for this action", vbCritical: txtNotes.SetFocus: Exit Sub
            End If
        If txtAction = "Absolute Discharge" Then
            If txtFCosts = "" Then MsgBox "Error! Invalid FCosts", vbCritical: txtFCosts.SetFocus: Exit Sub
            End If
        If txtAction = "Conditional Discharge" Then
            If txtFCosts = "" Then MsgBox "Error! Invalid FCosts", vbCritical: txtFCosts.SetFocus: Exit Sub
            If txtVS = "" Then MsgBox "Error! Invalid Victim Surcharge", vbCritical: txtVS.SetFocus: Exit Sub
            End If
        End If
    Application.ScreenUpdating = False
    tmpDisableWorkSheetChange = True
    tmpRow = 0
    Call ProtectMe(False)
    tmpDisableWorkSheetChange = True
    With Worksheets("Main")
        Do
            If lstDefendants.Selected(tmpRow) = True Then
                If .Range("D" & lstDefendants.Column(0, tmpRow)).Locked = False Then .Range("D" & lstDefendants.Column(0, tmpRow)) = txtApp
                
                If txtPlea.Visible = True Then
                    If InStr(.Range(PleaColumn & lstDefendants.Column(0, tmpRow)), "(") > 0 Then .Range(PleaColumn & lstDefendants.Column(0, tmpRow)) = txtPlea
                    End If
                If .Range(ActionColumn & lstDefendants.Column(0, tmpRow)).Locked = False Then .Range(ActionColumn & lstDefendants.Column(0, tmpRow)) = txtAction
                If .Range(GuiltyCreditColumn & lstDefendants.Column(0, tmpRow)).Locked = False Then .Range(GuiltyCreditColumn & lstDefendants.Column(0, tmpRow)) = txtGPCred
                If .Range(AdjReasonColumn & lstDefendants.Column(0, tmpRow)).Locked = False Then .Range(AdjReasonColumn & lstDefendants.Column(0, tmpRow)) = txtReasonList
                If .Range(AdjDateColumn & lstDefendants.Column(0, tmpRow)).Locked = False Then .Range(AdjDateColumn & lstDefendants.Column(0, tmpRow)) = txtAdjDate
                If .Range("T" & lstDefendants.Column(0, tmpRow)).Locked = False Then .Range("T" & lstDefendants.Column(0, tmpRow)) = txtDisq
                If .Range("U" & lstDefendants.Column(0, tmpRow)).Locked = False Then .Range("U" & lstDefendants.Column(0, tmpRow)) = txtNotes
                
                ' Lock Fields based on Action
                Select Case txtAction
                
                Case Is = "Fine", "Proved In Absence", "Proved In Abs (SJP)"
                    If .Range(IncomeColumn & lstDefendants.Column(0, tmpRow)).Locked = False Then .Range(IncomeColumn & lstDefendants.Column(0, tmpRow)) = Val(Replace(txtIncome, "|fffd|", ""))
                    If .Range(BandColumn & lstDefendants.Column(0, tmpRow)).Locked = False Then .Range(BandColumn & lstDefendants.Column(0, tmpRow)) = txtBand
                    If .Range("O" & lstDefendants.Column(0, tmpRow)).Locked = False Then .Range("O" & lstDefendants.Column(0, tmpRow)) = txtLEPP
                    If .Range("P" & lstDefendants.Column(0, tmpRow)).Locked = False Then .Range("P" & lstDefendants.Column(0, tmpRow)) = txtCOLLO
                    If .Range("Q" & lstDefendants.Column(0, tmpRow)).Locked = False Then .Range("Q" & lstDefendants.Column(0, tmpRow)) = txtPayBy
                    If .Range(FineColumn & lstDefendants.Column(0, tmpRow)).Locked = False Then .Range(FineColumn & lstDefendants.Column(0, tmpRow)) = Val(Replace(txtFine, "|fffd|", ""))
                    If .Range("L" & lstDefendants.Column(0, tmpRow)).Locked = False Then .Range("L" & lstDefendants.Column(0, tmpRow)) = Val(Replace(txtComp, "|fffd|", ""))
                    If .Range(FCOSTSColumn & lstDefendants.Column(0, tmpRow)).Locked = False Then .Range(FCOSTSColumn & lstDefendants.Column(0, tmpRow)) = Val(Replace(txtFCosts, "|fffd|", ""))
                    If .Range(VSColumn & lstDefendants.Column(0, tmpRow)).Locked = False Then .Range(VSColumn & lstDefendants.Column(0, tmpRow)) = Val(Replace(txtVS, "|fffd|", ""))
                
                Case Is = "Adjourned for Court Hearing", "Adjourned PIA", "Adjourned (SJP)", "Adjourned PIA (SJP)"
                    .Range("H" & lstDefendants.Column(0, tmpRow) & ":Q" & lstDefendants.Column(0, tmpRow)) = ""
                    .Range("H" & lstDefendants.Column(0, tmpRow) & ":Q" & lstDefendants.Column(0, tmpRow)).Locked = True
                    .Range("T" & lstDefendants.Column(0, tmpRow)) = ""
                    .Range("T" & lstDefendants.Column(0, tmpRow)).Locked = True
                    .Range("R" & lstDefendants.Column(0, tmpRow)).Select
                
                Case Is = "Not Completed"
                    .Range("H" & lstDefendants.Column(0, tmpRow) & ":" & ValidationColumn & lstDefendants.Column(0, tmpRow)) = ""
                    .Range("U" & lstDefendants.Column(0, tmpRow)) = txtNotes
                    .Range("H" & lstDefendants.Column(0, tmpRow) & ":" & ValidationColumn & lstDefendants.Column(0, tmpRow)).Locked = True
                    
                Case Is = "Withdrawn", "NEO Dismissed", "Dismissed", "Entered In Error"
                    .Range("H" & lstDefendants.Column(0, tmpRow) & ":T" & lstDefendants.Column(0, tmpRow)) = ""
                    .Range("H" & lstDefendants.Column(0, tmpRow) & ":T" & lstDefendants.Column(0, tmpRow)).Locked = True
                    .Range("U" & lstDefendants.Column(0, tmpRow)) = txtNotes
                    
                Case Else
                    .Range("H" & lstDefendants.Column(0, tmpRow)).Locked = True
                End Select
                lstDefendants.Selected(tmpRow) = False
                End If
            tmpRow = tmpRow + 1
        Loop Until tmpRow > lstDefendants.ListCount - 1
    End With
    tmpDisableWorkSheetChange = False
    Call ValidateAll(True)
    Call ProtectMe(True)
    Call ScanForUnResultedOffences
    Call RebuildTopOffences
    Call ReselectOffencesOnTopBox
    Call lstOffences_MouseUp(0, 0, 0, 0)
    btnSelectAll.Caption = "Select All"
    tmpDisableWorkSheetChange = False
    Worksheets("Main").Range(LastCell).Select
    Application.ScreenUpdating = True
End Sub

Private Sub lstDefendants_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim tmpRow As Integer
    Dim tmpURN As String
    Dim tmpSurname As String
    Dim tmpForename As String
    Dim tmpDIRCase  As String
    Dim tmpCaseHearingFolder As String
    tmpRow = lstDefendants.Column(0, lstDefendants.ListIndex)
    Do
        tmpRow = tmpRow - 1
    Loop Until Worksheets("Main").Range("B" & tmpRow) = "Defendant" Or tmpRow < 15
    If tmpRow < 15 Then MsgBox "Error!  Case folder not found", vbCritical: Exit Sub
    tmpDIRCase = Range(CaseFolderPathColumn & tmpRow)
    If tmpDIRCase <> "" Then
        x = Shell("Explorer.exe " & Chr$(34) & tmpDIRCase & Chr$(34), vbNormalFocus)
        Else
        MsgBox "Error!  Case folder not found", vbCritical: Exit Sub
        End If
End Sub

Private Sub lstOffences_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    Dim tmpRow As Integer
    Dim tmpOffenceRow As Integer
    Dim tmpMainRow As Integer
    Dim tmpCompareFilter As String
    Dim tmpOffenceArrayCount As Integer
    tmpRow = 0
    
    Worksheets("WS1").Range("A1000:E3000").Cells.Clear
    Worksheets("WS1").Range("A1000") = "Offence Line"
    Worksheets("WS1").Range("B1000") = "Defendant"
    Worksheets("WS1").Range("C1000") = "URN"
    Worksheets("WS1").Range("D1000") = "DOB"
    Worksheets("WS1").Range("E1000") = "Plea"
    Worksheets("WS1").Range("F1000") = "Offence"

    tmpOffenceRow = 1001
    Do
        If lstOffences.Selected(tmpRow) = True Then
            tmpMainRow = 1
            Do
                If Worksheets("WS1").Range("B" & tmpMainRow) = lstOffences.Column(0, tmpRow) Then
                    tmpCompareFilter = txtPleaFilter ' If txtPleaFilter = "No Plea" Then tmpCompareFilter = "" Else
                    If tmpCompareFilter <> "" Then
                        If Left(Worksheets("WS1").Range("F" & tmpMainRow), Len(tmpCompareFilter)) = tmpCompareFilter Then
                            Worksheets("WS1").Range("A" & tmpOffenceRow) = Worksheets("WS1").Range("A" & tmpMainRow)
                            Worksheets("WS1").Range("C" & tmpMainRow & ":E" & tmpMainRow).Copy Destination:=Worksheets("WS1").Range("B" & tmpOffenceRow)
                            Worksheets("WS1").Range("E" & tmpOffenceRow) = Replace(Worksheets("WS1").Range("F" & tmpMainRow), vbLf, " ")
                            Worksheets("WS1").Range("F" & tmpOffenceRow) = Worksheets("WS1").Range("B" & tmpMainRow)
                            If InStr(Worksheets("WS1").Range("B" & tmpOffenceRow), " ") > 0 Then
                                Worksheets("WS1").Range("B" & tmpOffenceRow) = Trim(Mid(Worksheets("WS1").Range("B" & tmpOffenceRow), InStrRev(Worksheets("WS1").Range("B" & tmpOffenceRow), " "))) & ", " & Trim(Left(Worksheets("WS1").Range("B" & tmpOffenceRow), InStrRev(Worksheets("WS1").Range("B" & tmpOffenceRow), " ")))
                                End If
                            tmpOffenceRow = tmpOffenceRow + 1
                            End If
                        Else
                        If Worksheets("WS1").Range("F" & tmpMainRow) = "" Then
                            Worksheets("WS1").Range("A" & tmpOffenceRow) = Worksheets("WS1").Range("A" & tmpMainRow)
                            Worksheets("WS1").Range("C" & tmpMainRow & ":E" & tmpMainRow).Copy Destination:=Worksheets("WS1").Range("B" & tmpOffenceRow)
                            Worksheets("WS1").Range("E" & tmpOffenceRow) = Replace(Worksheets("WS1").Range("F" & tmpMainRow), vbLf, " ")
                            Worksheets("WS1").Range("F" & tmpOffenceRow) = Worksheets("WS1").Range("B" & tmpMainRow)
                            If InStr(Worksheets("WS1").Range("B" & tmpOffenceRow), " ") > 0 Then
                                Worksheets("WS1").Range("B" & tmpOffenceRow) = Trim(Mid(Worksheets("WS1").Range("B" & tmpOffenceRow), InStrRev(Worksheets("WS1").Range("B" & tmpOffenceRow), " "))) & ", " & Trim(Left(Worksheets("WS1").Range("B" & tmpOffenceRow), InStrRev(Worksheets("WS1").Range("B" & tmpOffenceRow), " ")))
                                End If
                            tmpOffenceRow = tmpOffenceRow + 1
                            End If
                        End If
                    End If
                tmpMainRow = tmpMainRow + 1
            Loop Until tmpMainRow > MainListEnd
            End If
        tmpRow = tmpRow + 1
    Loop Until tmpRow > lstOffences.ListCount - 1
    
    Worksheets("WS1").Range("A1001:F" & tmpOffenceRow).Sort Key1:=Worksheets("WS1").Columns("B"), Order1:=xlAscending
    If tmpOffenceRow > 1001 Then
        lstDefendants.RowSource = "=WS1!A1001:F" & tmpOffenceRow - 1
        Else
        lstDefendants.RowSource = ""
        End If
    lblResults.Caption = lstDefendants.ListCount & " Record(s)"
    ' Rebuild the offence array based on the selections
    tmpRow = 0
    tmpOffenceArrayCount = 0
    ReDim OffencesList(200) As String
    Do
        If lstOffences.Selected(tmpRow) = True Then OffencesList(tmpOffenceArrayCount) = lstOffences.Column(0, tmpRow): tmpOffenceArrayCount = tmpOffenceArrayCount + 1
        tmpRow = tmpRow + 1
    Loop Until tmpRow > lstOffences.ListCount - 1
    OffenceArrayMax = tmpOffenceArrayCount
End Sub

Private Sub txtAction_Click()
    Call LockFields(False)
    txtNotes.Locked = False
    txtPlea.Locked = False
    Select Case txtAction
    
    Case Is = "Adjourned for Court Hearing", "Adjourned PIA", "Adjourned (SJP)", "Adjourned PIA (SJP)"
        Call LockForAdjournment(True)
        txtReasonList.SetFocus

    Case Is = "Proved In Absence", "Proved In Abs (SJP)"
        txtGPCred = "N": txtGPCred.Locked = True
        txtApp = "N": txtApp.Locked = True
        txtIncome = Format(Worksheets("Main").Range("S3"), "|fffd|#,##0.00")
        txtBand.SetFocus

    Case Is = "NEO Dismissed"
        Call ResetFields
        Call LockFields(True)
        txtNotes.Locked = True
        txtPlea = "Not Guilty"
        txtPlea.Locked = True

    Case Is = "Not Completed"
        Call ResetFields
        txtNotes = "Not completed in time, please reschedule"
        Call LockFields(True)
        txtApp = "N": txtApp.Locked = True
        txtNotes.Locked = True
        
    Case Is = "Absolute Discharge"
        Call ResetFields
        Call LockFields(True)
        txtApp.Locked = True
        txtFCosts.Locked = False
        txtNotes.Locked = False
        txtNotes.SetFocus
        
    Case Is = "Conditional Discharge"
        Call ResetFields
        Call LockFields(True)
        txtApp.Locked = False
        txtFCosts.Locked = False: txtVS.Locked = False: txtNotes.Locked = False
        txtFCosts.SetFocus

    Case Is = "Withdrawn", "Dismissed", "Entered In Error"
        Call ResetFields
        Call LockFields(True)
        txtApp = "N": txtApp.Locked = True
        txtNotes.SetFocus
    
    End Select
End Sub

Private Sub txtAdjDate_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If txtAdjDate <> "" Then
        If IsDate(txtAdjDate) = False Or Len(Format(txtAdjDate, "dd/mm/yyyy hh:mm")) <> 16 Then MsgBox "Error!  Invalid Adjournment Date.  The format must be 'dd/mm/yyyy hh:mm'", vbCritical: txtAdjDate = "": Exit Sub
        txtAdjDate = Format(txtAdjDate, "dd/mm/yyyy hh:mm")
        txtAdjDate = Replace(txtAdjDate, "00:00", "10:00")
        If CDate(txtAdjDate) < CDate(Worksheets("Main").Range("C6")) Then MsgBox "Error!  Adjournment Date cannot be less than the date of hearing", vbCritical: Exit Sub
        If CDate(txtAdjDate) > Date + 365 Then MsgBox "Error!  Adjournment Date cannot be more than 1 year in the future", vbCritical: Exit Sub
        If InStr(txtAction, "Adjourned") = 0 Then txtAction = "Adjourned for Court Hearing"
        Call LockForAdjournment(True)
        End If
End Sub

Sub LockForAdjournment(TF As Boolean)
    If TF = True Then
        txtGPCred = ""
        txtIncome = ""
        txtBand = ""
        txtFine = ""
        txtComp = ""
        txtFCosts = ""
        txtVS = ""
        txtLEPP = ""
        txtCOLLO = ""
        txtPayBy = ""
        txtDisq = ""
        End If
    txtGPCred.Locked = TF
    txtIncome.Locked = TF
    txtBand.Locked = TF
    txtFine.Locked = TF
    txtComp.Locked = TF
    txtFCosts.Locked = TF
    txtVS.Locked = TF
    txtLEPP.Locked = TF
    txtCOLLO.Locked = TF
    txtPayBy.Locked = TF
    txtDisq.Locked = TF
End Sub

Private Sub txtApp_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If Len(txtApp) = 0 Then Exit Sub
    If UCase(txtApp) <> "N" And UCase(txtApp) <> "Y" Then MsgBox "Error!  Appears must be Y or N", vbCritical: txtApp = ""
    txtApp = UCase(txtApp)
End Sub

Private Sub txtLAP_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If Len(txtLAP) = 0 Then Exit Sub
    If UCase(txtLAP) <> "N" And UCase(txtLAP) <> "Y" Then MsgBox "Error!  Legal Adviser Powers must be Y or N", vbCritical: txtLAP = ""
    txtLAP = UCase(txtLAP)
End Sub

Private Sub txtBand_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    Dim tmpFine As Currency
    Dim tmpThird As Currency
    Dim tmpVS As Currency
    If Len(txtBand) = 0 Then Exit Sub
    If UCase(txtBand) <> "A" And UCase(txtBand) <> "B" And UCase(txtBand) <> "C" Then MsgBox "Error!  Invalid Band", vbCritical: txtBand = "": Exit Sub
    txtBand = UCase(txtBand)
    If txtAction = "Proved In Absence" Or txtAction = "Fine" Then
        If txtBand = "A" Then tmpFine = Val(txtIncome) / 2
        If txtBand = "B" Then tmpFine = Val(txtIncome)
        If txtBand = "C" Then tmpFine = Val(txtIncome) * 1.5
        If txtGPCred = "Y" Then tmpThird = tmpFine / 3: tmpFine = Int(tmpFine - tmpThird)
        txtFine = Format(tmpFine, "|fffd|#,##0.00") ' Fine
        tmpVS = tmpFine / 10
        If tmpVS < 20 Then tmpVS = 20
        If tmpVS > 120 Then tmpVS = 120
        txtVS = Format(Int(tmpVS), "|fffd|#,##0.00") ' Victim Surcharge
        End If
    'If Len(txtFCosts) = 0 Then txtFCosts = Format(Worksheets("Splash").Range("A1"), "|fffd|#,##0.00")  ' Costs (Traffic)
    txtCOLLO = "Y" ' COLLO
    If Len(txtPayBy) = 0 Then txtPayBy = Format(DateAdd("d", Worksheets("Main").Range("S4"), Worksheets("Main").Range("C6")), "dd/mm/yyyy") ' Pay by date
End Sub

Private Sub txtCOLLO_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If Len(txtCOLLO) = 0 Then Exit Sub
    If UCase(txtCOLLO) <> "N" And UCase(txtCOLLO) <> "Y" Then MsgBox "Error!  Collection Order must be Y or N", vbCritical: txtCOLLO = ""
    txtCOLLO = UCase(txtCOLLO)
End Sub

Private Sub txtComp_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If Len(txtComp) > 0 Then txtComp = Format(txtComp, "|fffd|#,##0.00")
End Sub

Private Sub txtDisq_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If Len(txtDisq) = 0 Then Exit Sub
    If UCase(txtDisq) <> "N" And UCase(txtDisq) <> "Y" And UCase(txtDisq) <> "EH" Then MsgBox "Error!  Disq must be Y, N or EH", vbCritical: txtDisq = ""
    txtDisq = UCase(txtDisq)
    If txtDisq = "Y" Or txtDisq = "EH" Then frmDisqualified.Show
End Sub

Private Sub txtFCosts_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If Len(txtFCosts) > 0 Then txtFCosts = Format(txtFCosts, "|fffd|#,##0.00")
End Sub

Private Sub txtFine_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    Dim tmpVS As Currency
    If UCase(txtFine) = "NSP" Or txtFine = "No Separate Penalty" Then
        txtFine = "No Separate Penalty"
        txtComp.Visible = False: lblComp.Visible = False
        txtVS.Visible = False: lblVS.Visible = False
        txtFCosts.Visible = False: lblFcosts.Visible = False
        txtVS = ""
        txtComp = ""
        txtFCC = ""
        txtFine.Width = 240
        txtLEPP.SetFocus
        Exit Sub
        End If
    txtComp.Visible = True: lblComp.Visible = True
    txtVS.Visible = True: lblVS.Visible = True
    txtFCosts.Visible = True: lblFcosts.Visible = True
    txtFine.Width = 60
    If Len(txtFine) > 0 Then
        txtFine = Format(txtFine, "|fffd|#,##0.00")
        Else
        Exit Sub
        End If
    'If Len(txtFCosts) = 0 Then txtFCosts = Format(Worksheets("Splash").Range("A1"), "|fffd|#,##0.00") ' Costs (Traffic)
End Sub

Private Sub txtGPCred_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If Len(txtGPCred) = 0 Then Exit Sub
    If UCase(txtGPCred) <> "N" And UCase(txtGPCred) <> "Y" Then MsgBox "Error!  Guilty Plea Credit must be Y or N", vbCritical: txtGPCred = ""
    txtGPCred = UCase(txtGPCred)
End Sub

Private Sub txtIncome_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If Len(txtIncome) > 0 Then txtIncome = Format(txtIncome, "|fffd|#,##0.00")
End Sub

Private Sub txtLEPP_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If txtLEPP = "Licence Endorsed" Or txtLEPP = "Licence Not Endorsed" Or txtLEPP = "" Or txtLEPP = "Deduction of Benefits" Or txtLEPP = "Attachment of Earnings" Then Exit Sub
    If UCase(txtLEPP) <> "LE" And UCase(txtLEPP) <> "NE" And UCase(txtLEPP) <> "DBO" And UCase(txtLEPP) <> "AEO" And UCase(txtLEPP) <> "NONE" And (Val(txtLEPP) < 3 Or Val(txtLEPP) > 10) Then MsgBox "Error!  Valid options are penalty points between 3 and 10 OR type 'LE' / 'Licence Endorsed' or type 'NE' 'Licence Not Endorsed' or type 'DBO' 'Deduction of Benefits' or type 'AEO' 'Attachment of Earnings' or type 'None' 'None'", vbCritical: txtLEPP = ""
    If UCase(txtLEPP) = "LE" Then txtLEPP = "Licence Endorsed"
    If UCase(txtLEPP) = "NE" Then txtLEPP = "Licence Not Endorsed"
    If UCase(txtLEPP) = "DBO" Then txtLEPP = "Deduction of Benefits": frmReserveTerms.Show
    If UCase(txtLEPP) = "AEO" Then txtLEPP = "Attachment of Earnings": frmReserveTerms.Show
    If UCase(txtLEPP) = "NONE" Or UCase(txtLEPP) = "NON" Or UCase(txtLEPP) = "NO" Then txtLEPP = "None"
End Sub

Private Sub txtPayBy_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If txtPayBy <> "" Then
        If IsDate(txtPayBy) = False Then MsgBox "Error!  Invalid pay by date", vbCritical: txtPayBy = "": Exit Sub
        txtPayBy = Format(txtPayBy, "dd/mm/yyyy")
        If CDate(txtPayBy) < CDate(Worksheets("Main").Range("C6")) Then MsgBox "Error!  Pay by date cannot be less than the date of hearing", vbCritical: Exit Sub
        End If
End Sub

Private Sub txtPlea_Change()
    Call LockFields(False)
    txtNotes.Locked = False
    If txtPlea = "Guilty" Then
        txtGPCred = "Y": txtGPCred.Locked = True
        txtAction.SetFocus
        End If
    If txtPlea = "Not Guilty" Then
        txtGPCred = "N": txtGPCred.Locked = True
        txtAction.SetFocus
        End If

End Sub

Sub LockFields(TF As Boolean)
    txtApp.Locked = TF
    txtLAP.Locked = TF
    txtGPCred.Locked = TF
    txtIncome.Locked = TF
    txtBand.Locked = TF
    txtFine.Locked = TF
    txtComp.Locked = TF
    txtFCosts.Locked = TF
    txtVS.Locked = TF
    txtLEPP.Locked = TF
    txtCOLLO.Locked = TF
    txtPayBy.Locked = TF
    txtReasonList.Locked = TF
    txtAdjDate.Locked = TF
    txtDisq.Locked = TF
End Sub

Sub ResetFields()
    txtApp = ""
    txtGPCred = ""
    txtIncome = ""
    txtBand = ""
    txtFine = ""
    txtComp = ""
    txtFCosts = ""
    txtVS = ""
    txtLEPP = ""
    txtCOLLO = ""
    txtPayBy = ""
    txtReasonList = ""
    txtAdjDate = ""
    txtNotes = ""
End Sub

Private Sub txtPleaFilter_Click()
    Call RebuildTopOffences
    Call lstOffences_MouseUp(0, 0, 0, 0)
    Select Case txtPleaFilter
    Case Is = "No Plea"
        txtPlea = "No Plea"
        txtPlea.Visible = True
        txtPlea.Locked = False
        txtGPCred.Locked = False
    
    Case Is = "Guilty"
        txtPlea = ""
        txtPlea.Visible = False
        txtPlea.Locked = True
        txtGPCred = "Y"
        txtGPCred.Locked = True
    
    Case Is = "Not Guilty"
        txtPlea = ""
        txtPlea.Visible = False
        txtPlea.Locked = True
        txtGPCred = "N"
        txtGPCred.Locked = True
    
    End Select
    PleaFilter = txtPleaFilter
End Sub

Private Sub txtVS_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If Len(txtVS) > 0 Then txtVS = Format(txtVS, "|fffd|#,##0.00")
End Sub

Private Sub UserForm_Activate()
    LastCell = ActiveCell.Address
    txtPleaFilter.Clear
    txtPleaFilter.AddItem "Guilty"
    txtPleaFilter.AddItem "No Plea"
    txtPleaFilter.AddItem "Not Guilty"
    If PleaFilter <> "" Then txtPleaFilter = PleaFilter Else txtPleaFilter = "No Plea": PleaFilter = txtPleaFilter

    txtPlea.Clear
    txtPlea.AddItem "Guilty"
    txtPlea.AddItem "No Plea"
    txtPlea.AddItem "Not Guilty"
    
    txtAction.Clear
    If Worksheets("Main").Range("C8") = "75" Or Worksheets("Main").Range("C8") = "76" Or Worksheets("Main").Range("C8") = "77" Or UCase(Worksheets("Main").Range("C8")) = "SJP" Then
        txtAction.AddItem "Absolute Discharge"
        txtAction.AddItem "Adjourned (SJP)"
        txtAction.AddItem "Adjourned PIA (SJP)"
        txtAction.AddItem "Conditional Discharge"
        txtAction.AddItem "Dismissed"
        txtAction.AddItem "Entered In Error"
        txtAction.AddItem "Fine"
        txtAction.AddItem "Not Completed"
        txtAction.AddItem "NEO Dismissed"
        txtAction.AddItem "Proved In Abs (SJP)"
        txtAction.AddItem "Withdrawn"
        txtApp = "N"
        Else
        If Worksheets("Main").txtProsecutorType <> "Proceeds Of Crime Act" Then
            txtAction.AddItem "Absolute Discharge"
            txtAction.AddItem "Adjourned for Court Hearing"
            txtAction.AddItem "Adjourned PIA"
            txtAction.AddItem "Conditional Discharge"
            txtAction.AddItem "Dismissed"
            txtAction.AddItem "Entered In Error"
            txtAction.AddItem "Fine"
            txtAction.AddItem "Not Completed"
            txtAction.AddItem "NEO Dismissed"
            txtAction.AddItem "Proved In Absence"
            txtAction.AddItem "Withdrawn"
            Else
            txtAction.AddItem "Adjourned for Court Hearing"
            txtAction.AddItem "Granted"
            txtAction.AddItem "Refused"
            txtAction.AddItem "Withdrawn"
            End If
        End If

    txtLAP = "N"
    txtReasonList.Clear
    If Worksheets("Main").txtProsecutorType <> "Proceeds Of Crime Act" Then
        txtReasonList.AddItem "Check With Police (See Notes)"
        txtReasonList.AddItem "Clarification of Plea"
        txtReasonList.AddItem "Defence Request"
        txtReasonList.AddItem "Disqualification For Offence"
        txtReasonList.AddItem "Disqualification Totter"
        txtReasonList.AddItem "Equivocal plea - for trial"
        txtReasonList.AddItem "Equivocal plea - to attend to clarify"
        txtReasonList.AddItem "Case inappropriate for SJP"
        txtReasonList.AddItem "To attend for sentence"
        txtReasonList.AddItem "Trial"
        txtReasonList.AddItem "Warrant Issued (Bail)"
        txtReasonList.AddItem "Warrant Issued (No Bail)"
        Else
        txtReasonList.AddItem "Directions"
        txtReasonList.AddItem "Final Hearing"
        txtReasonList.AddItem "Forfeiture At Directions"
        txtReasonList.AddItem "Mention"
        txtReasonList.AddItem "Pending Criminal Proceedings"
        End If

    Label1.BackColor = RGB(153, 204, 255)
    Me.BackColor = RGB(0, 0, 128)
    
    'MainListEnd = Worksheets("WS1").Cells(Worksheets("WS1").Rows.Count, "B").End(xlUp).Row
    Call ScanForUnResultedOffences
    Call RebuildTopOffences
    Call ReselectOffencesOnTopBox
End Sub

Sub RebuildTopOffences()
    Dim tmpRow As Integer
    Dim tmpOffenceRow As Integer
    Dim tmpOffenceRowStart As Integer

    MainListStart = 1

    tmpOffenceRow = MainListEnd + 5
    tmpOffenceRowStart = tmpOffenceRow
    Worksheets("WS1").Range("A" & tmpOffenceRowStart & ":F3000").Delete
    ' Build a summary list of offences on the Block Result worksheet for the specified plea
    tmpRow = 1
    Do
        If InStr(Worksheets("WS1").Range("B" & tmpRow), "MC80524") = 0 And InStr(Worksheets("WS1").Range("B" & tmpRow), "MC80527") = 0 And InStr(Worksheets("WS1").Range("B" & tmpRow), "MC80528") = 0 Then
            If Worksheets("WS1").Range("A" & tmpOffenceRow) <> Worksheets("WS1").Range("B" & tmpRow) Then
                Select Case txtPleaFilter
                Case Is = "No Plea"
                    If Worksheets("WS1").Range("F" & tmpRow) = "No Plea" Then
                        Worksheets("WS1").Range("A" & tmpOffenceRow + 1) = Worksheets("WS1").Range("B" & tmpRow)
                        Worksheets("WS1").Range("B" & tmpOffenceRow + 1) = 1
                        tmpOffenceRow = tmpOffenceRow + 1
                        End If
                Case Is = "Guilty"
                    If Left(Worksheets("WS1").Range("F" & tmpRow), 6) = "Guilty" Then
                        Worksheets("WS1").Range("A" & tmpOffenceRow + 1) = Worksheets("WS1").Range("B" & tmpRow)
                        Worksheets("WS1").Range("B" & tmpOffenceRow + 1) = 1
                        tmpOffenceRow = tmpOffenceRow + 1
                        End If
                Case Is = "Not Guilty"
                    If Left(Worksheets("WS1").Range("F" & tmpRow), 10) = "Not Guilty" Then
                        Worksheets("WS1").Range("A" & tmpOffenceRow + 1) = Worksheets("WS1").Range("B" & tmpRow)
                        Worksheets("WS1").Range("B" & tmpOffenceRow + 1) = 1
                        tmpOffenceRow = tmpOffenceRow + 1
                        End If
                End Select
                Else
                Select Case txtPleaFilter
                Case Is = "No Plea"
                    If Worksheets("WS1").Range("F" & tmpRow) = "No Plea" Then Worksheets("WS1").Range("B" & tmpOffenceRow) = Worksheets("WS1").Range("B" & tmpOffenceRow) + 1
                    
                Case Is = "Guilty"
                    If Left(Worksheets("WS1").Range("F" & tmpRow), 6) = "Guilty" Then Worksheets("WS1").Range("B" & tmpOffenceRow) = Worksheets("WS1").Range("B" & tmpOffenceRow) + 1
                    
                Case Is = "Not Guilty"
                    If Left(Worksheets("WS1").Range("F" & tmpRow), 10) = "Not Guilty" Then Worksheets("WS1").Range("B" & tmpOffenceRow) = Worksheets("WS1").Range("B" & tmpOffenceRow) + 1
                
                End Select
                End If
            End If
        tmpRow = tmpRow + 1
    Loop Until Worksheets("WS1").Range("A" & tmpRow) = ""
    If tmpOffenceRowStart = tmpOffenceRow Then
        'MsgBox "Error!  There are no un-resulted single offence cases left": Unload Me: Exit Sub
        lstOffences.RowSource = "" '=WS1!A" & tmpOffenceRowStart + 1 & ":B" & tmpOffenceRow
        OffenceArrayMax = 0
        Else
        Worksheets("WS1").Range("A" & tmpOffenceRowStart) = "Un-Resulted Offences"
        Worksheets("WS1").Range("B" & tmpOffenceRowStart) = "Number of Cases"
        lstOffences.RowSource = "=WS1!A" & tmpOffenceRowStart + 1 & ":B" & tmpOffenceRow
        End If
End Sub

Sub ReselectOffencesOnTopBox()
    Dim tmpRow As Integer
    Dim tmpOffenceArrayCount As Integer
    ' Reselect the offences on the top list box
    If OffenceArrayMax > 0 Then
        tmpRow = 0
        Do
            tmpOffenceArrayCount = 0
            Do
                If lstOffences.Column(0, tmpRow) = OffencesList(tmpOffenceArrayCount) Then lstOffences.Selected(tmpRow) = True
                tmpOffenceArrayCount = tmpOffenceArrayCount + 1
            Loop Until OffencesList(tmpOffenceArrayCount) = "" Or tmpOffenceArrayCount > 200
            tmpRow = tmpRow + 1
        Loop Until tmpRow > lstOffences.ListCount - 1
        OffenceArrayMax = tmpOffenceArrayCount
        Call lstOffences_MouseUp(0, 0, 0, 0)
        End If
End Sub
Attribute VB_Name = "frmIP"
Attribute VB_Base = "0{4DE970C0-6E46-433E-94E5-350964DA94E8}{0987C409-1893-4861-AE52-0C0555095700}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub btnCancel_Click()
    Unload Me
End Sub

Private Sub btnSave_Click()
    If txtIPPresent <> "" Then
        Worksheets("Main").Range("U" & ActiveCell.Row) = Worksheets("Main").Range("U" & ActiveCell.Row) & "Parties Present: " & txtIPPresent & vbCrLf
        End If
    If txtIPNotified <> "" Then
        Worksheets("Main").Range("U" & ActiveCell.Row) = Worksheets("Main").Range("U" & ActiveCell.Row) & "Parties To Be Notified: " & txtIPNotified & vbCrLf
        End If
    Unload Me
End Sub

Private Sub UserForm_Initialize()
    lblBack1.BackColor = RGB(153, 204, 255)
    Me.BackColor = RGB(0, 0, 128)
End Sub
Attribute VB_Name = "frmOffenceChanges"
Attribute VB_Base = "0{5CAEFBDF-54C1-4AD1-897A-1576A2ED5541}{EB9DC909-EA1A-49D0-B393-8E73865D51AE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim tmpCaseDefRow As Integer
Dim tmpCaseOffRow As Integer
Dim NewOffenceAdded As Boolean

Private Sub btnAddNewOffence_Click()
    Call HideAll
    lblSubTitle = "Add New Offence"
    lblEnterNewWording.Top = lblEnterOriginalWording.Top
    txtNewOffence.Top = txtOldOffence.Top
    lblSelectOffence.Visible = True: lblSelectOffence.Caption = "Enter the Offence Short Description"
    txtOffenceShortDescription.Visible = True
    lblEnterNewWording.Visible = True
    txtNewOffence.Visible = True
    txtOffenceShortDescription.SetFocus
    btnAddNewOffence.Enabled = False
    btnSaveAndClose.Caption = "Add"
    btnCreateStatDec.Visible = True
    btnCreateS142.Visible = True
    If AddOffenceOnly = True Then
        btnRemoveNewOffence.Enabled = False
        btnAmendOffence.Enabled = False
        btnRestoreOriginalOffence.Enabled = False
        End If
End Sub

Private Sub btnAmendOffence_Click()
    Call HideAll
    lblSubTitle = "Amend Original Offence"
    lblSelectOffence.Visible = True
    txtOriginalOffence.Visible = True
    lblEnterOriginalWording.Visible = True
    txtOldOffence.Visible = True
    lblEnterNewWording.Visible = True
    txtNewOffence.Visible = True
    txtOriginalOffence.SetFocus
    btnAmendOffence.Enabled = False
    btnSaveAndClose.Caption = "Amend"
    Call BuildOffenceList("Y")
End Sub

Private Sub btnClose_Click()
    If AddOffenceOnly = True And NewOffenceAdded = False Then
        If MsgBox("Caution!  You have Granted a Statutory Declaration or S142 case and NOT added the original offence(s)." & vbLf & "Are you sure?", vbYesNo + vbExclamation) = vbNo Then Exit Sub
        End If
    AddOffenceOnly = False
    Unload Me
End Sub

Private Sub btnCreateS142_Click()
    txtOffenceShortDescription = " Application to reopen case (MC80524)"
    txtNewOffence = "Application to reopen a case following conviction for an offence of <INSERT OFFENCE>, convicted on <INSERT DATE>.  In accordance with section 142 of the Magistrates' Courts Act 1980."
End Sub

Private Sub btnCreateStatDec_Click()
    txtOffenceShortDescription = " Appearance to make statutory declaration (MC80527)"
    txtNewOffence = "Appears before the court in order to make a statutory declaration following conviction for an offence of <INSERT OFFENCE> by <INSERT COURT> on <INSERT OFFENCE DATE>. In accordance with section 14 of the Magistrates' Courts Act 1980"
End Sub

Private Sub btnRemoveNewOffence_Click()
    Call HideAll
    lblSubTitle = "Remove New Offence"
    lblSelectOffence.Visible = True: lblSelectOffence.Caption = "Choose the New Offence to Remove"
    txtOriginalOffence.Visible = True
    txtOriginalOffence.SetFocus
    btnRemoveNewOffence.Enabled = False
    btnSaveAndClose.Caption = "Remove"
    Call BuildOffenceList("N")
End Sub

Private Sub btnRestoreOriginalOffence_Click()
    Call HideAll
    lblSubTitle = "Restore Original Offence"
    lblSelectOffence.Visible = True
    txtOriginalOffence.Visible = True
    lblEnterOriginalWording.Visible = True
    txtOldOffence.Visible = True
    lblEnterNewWording.Visible = True: lblEnterNewWording.Caption = "Amended Wording"
    txtNewOffence.Visible = True: txtNewOffence.Locked = True
    txtOriginalOffence.SetFocus
    btnRestoreOriginalOffence.Enabled = False
    btnSaveAndClose.Caption = "Restore"
    Call BuildOffenceList("Y")
End Sub

Private Sub btnSaveAndClose_Click()
    Dim tmpRow As Integer
    Dim tmpLastRow As Integer
    Dim tmpFirstRow As Integer
    Dim tmpDefRow As Integer
    Dim tmpFound As Boolean
    
    Select Case btnSaveAndClose.Caption
    
    Case Is = "Add"
        If InStr(txtOffenceShortDescription, ":") = 0 Then MsgBox "Error!  Invalid offence short description", vbCritical: txtOffenceShortDescription.SetFocus: Exit Sub
        If Len(Trim(Mid(txtOffenceShortDescription, InStr(txtOffenceShortDescription, ":") + 1))) = 0 Then MsgBox "Error!  Invalid offence short description", vbCritical: txtOffenceShortDescription.SetFocus: Exit Sub
        If Len(txtNewOffence) = 0 Then MsgBox "Error!  Invalid offence text", vbCritical: txtNewOffence.SetFocus: Exit Sub
        tmpDisableWorkSheetChange = True
        Call CreateNewOffenceRow
        NewOffenceAdded = True
        
    Case Is = "Remove"
        tmpRow = tmpCaseOffRow
        ' Count forward to find the non original offence that matches
        tmpFound = False
        Do Until Worksheets("Main").Range("B" & tmpRow).Interior.ColorIndex <> OffenceColour
            If Worksheets("Main").Range("B" & tmpRow) = txtOriginalOffence Then tmpFound = True: Exit Do
            tmpRow = tmpRow + 1
        Loop
        If Worksheets("Main").Range("B" & tmpRow).Interior.ColorIndex <> OffenceColour Then MsgBox "Error!  Offence not found", vbCritical: GoTo Finish
        tmpLastRow = tmpRow + 1
        Do
            If Worksheets("Main").Range("S" & tmpLastRow).Interior.ColorIndex <> OffenceColour Then tmpLastRow = tmpLastRow - 1: Exit Do
            tmpLastRow = tmpLastRow + 1
        Loop
        If tmpFound = True Then
            tmpDisableWorkSheetChange = True
            tmpDisableWorkSheetSelectionChange = True
            Application.ScreenUpdating = False
            Worksheets("Main").Range("A" & tmpCaseDefRow + 1 & ":A" & tmpLastRow).UnMerge
            Worksheets("Main").Range(ActionColumn & tmpRow).Select
            ActiveCell.EntireRow.Delete
            tmpLastRow = tmpLastRow - 1
            Worksheets("Main").Range("A" & tmpCaseDefRow + 1 & ":A" & tmpLastRow).Merge
            Worksheets("Main").Range("A" & tmpCaseDefRow + 1 & ":A" & tmpLastRow).VerticalAlignment = xlCenter
            Worksheets("Main").Range("K" & tmpLastRow & ":M" & tmpLastRow).Borders(xlEdgeBottom).LineStyle = xlContinuous
            Worksheets("Main").Range("D" & tmpCaseDefRow + 1).Select
            Application.ScreenUpdating = True
            tmpDisableWorkSheetSelectionChange = False
            tmpDisableWorkSheetChange = False
            End If
    
    Case Is = "Amend"
        If Len(txtOriginalOffence) = 0 Then MsgBox "Error!  Choose an original offence first", vbCritical: Exit Sub
        If Len(txtNewOffence) = 0 Then MsgBox "Error!  Invalid offence length", vbCritical: Exit Sub
        If txtNewOffence = txtOldOffence Then MsgBox "Error!  You have not made any changes to the offence", vbCritical: Exit Sub
        tmpRow = tmpCaseOffRow
        Do
            If Worksheets("Main").Range(OffenceFullTextColumn & tmpRow) = txtOldOffence Then Exit Do
            tmpRow = tmpRow + 1
        Loop Until Worksheets("Main").Range("B" & tmpRow).Interior.ColorIndex <> OffenceColour
        If Worksheets("Main").Range("B" & tmpRow).Interior.ColorIndex <> OffenceColour Then GoTo Finish
        Worksheets("Main").Range(ButtonColumn & tmpRow).Select
        If Not Worksheets("Main").Range("B" & tmpRow).Comment Is Nothing Then Worksheets("Main").Range("B" & tmpRow).ClearComments
        Call ApplyOffenceComment("Main", "B" & tmpRow, txtNewOffence)
        
    Case Is = "Restore"
        If Len(txtOriginalOffence) = 0 Then MsgBox "Error!  Choose an original offence first", vbCritical: Exit Sub
        If Len(txtNewOffence) < 0 Then MsgBox "Error!  Invalid offence length", vbCritical: Exit Sub
        tmpRow = tmpCaseOffRow
        Do
            If Worksheets("Main").Range(OffenceFullTextColumn & tmpRow) = txtOldOffence Then Exit Do
            tmpRow = tmpRow + 1
        Loop Until Range("B" & tmpRow).Interior.ColorIndex <> OffenceColour
        If Range("B" & tmpRow).Interior.ColorIndex <> OffenceColour Then GoTo Finish
        Worksheets("Main").Range(ButtonColumn & tmpRow).Select
        If Not Worksheets("Main").Range("B" & tmpRow).Comment Is Nothing Then Worksheets("Main").Range("B" & tmpRow).ClearComments
        Call ApplyOffenceComment("Main", "B" & tmpRow, txtOldOffence)

    End Select
    
Finish:
    Call HideAll
    btnClose.SetFocus
    btnSaveAndClose.Visible = False
    If AddOffenceOnly = True Then
        btnAmendOffence.Enabled = False
        btnRestoreOriginalOffence.Enabled = False
        End If
End Sub

Sub CreateNewOffenceRow()
    Dim tmpRow As Integer
    Dim tmpLastRow As Integer
    Application.ScreenUpdating = False
    tmpRow = tmpCaseOffRow
    tmpLastRow = tmpRow
    Do
        If Worksheets("Main").Range("S" & tmpLastRow).Interior.ColorIndex <> OffenceColour Then Exit Do
        tmpLastRow = tmpLastRow + 1
    Loop
    Worksheets("Main").Range("A" & tmpRow & ":A" & tmpLastRow - 1).UnMerge
    Worksheets("Main").Range("B" & tmpLastRow).Select
    ActiveCell.Offset(1).EntireRow.Insert
    Worksheets("Main").Range("B" & tmpLastRow & ":C" & tmpLastRow).Merge ' Offence
    Worksheets("Main").Range("U" & tmpLastRow & ":V" & tmpLastRow).Merge ' Notes
    Worksheets("Main").Range(ButtonColumn & tmpLastRow).Interior.ColorIndex = 2
    ' format certain offence fields
    Worksheets("Main").Range("A" & tmpRow - 2 & ":A" & tmpLastRow).Merge
    Worksheets("Main").Range("A" & tmpRow & ":A" & tmpLastRow).VerticalAlignment = xlCenter
    Worksheets("Main").Range("B" & tmpLastRow & ":" & ValidationColumn & tmpLastRow).Interior.ColorIndex = OffenceColour
    Worksheets("Main").Range("B" & tmpLastRow & ":" & ValidationColumn & tmpLastRow).Locked = False
    Worksheets("Main").Range("B" & tmpLastRow & ":" & ValidationColumn & tmpLastRow).Borders.LineStyle = xlContinuous
    Worksheets("Main").Range("A" & tmpRow - 2 & ":A" & tmpLastRow).Borders.LineStyle = xlContinuous
    Worksheets("Main").Range("B" & tmpLastRow & ":" & ValidationColumn & tmpLastRow).WrapText = True
    
    Worksheets("Main").Range("D" & tmpLastRow) = Worksheets("Main").Range("D" & tmpLastRow - 1)
    Worksheets("Main").Range("E" & tmpLastRow) = Worksheets("Main").Range("E" & tmpLastRow - 1)
    
    Worksheets("Main").Range(GuiltyCreditColumn & tmpLastRow).HorizontalAlignment = xlCenter
    Worksheets("Main").Range(BandColumn & tmpLastRow).HorizontalAlignment = xlCenter
    Worksheets("Main").Range("P" & tmpLastRow).HorizontalAlignment = xlCenter
    Worksheets("Main").Range("S" & tmpLastRow & ":T" & tmpLastRow).HorizontalAlignment = xlCenter
    Worksheets("Main").Range(IncomeColumn & tmpLastRow).NumberFormat = "|fffd|#,##0.00"
    Worksheets("Main").Range(FineColumn & tmpLastRow & ":" & VSColumn & tmpLastRow).NumberFormat = "|fffd|#,##0.00"
    Worksheets("Main").Range(FineColumn & tmpLastRow & ":" & VSColumn & tmpLastRow).HorizontalAlignment = xlLeft
    Worksheets("Main").Range("Q" & tmpLastRow & ":S" & tmpLastRow).HorizontalAlignment = xlLeft
    Worksheets("Main").Range("Q" & tmpLastRow).NumberFormat = "dd/mm/yyyy"
    Worksheets("Main").Range("S" & tmpLastRow).NumberFormat = "@"
    Worksheets("Main").Range("B" & tmpLastRow) = txtOffenceShortDescription
    Worksheets("Main").Range(OffenceFullTextColumn & tmpLastRow) = txtNewOffence
    Call ApplyOffenceComment("Main", "B" & tmpLastRow, txtNewOffence)
    Worksheets("Main").Range(OriginalOffenceColumn & tmpLastRow) = "N"
    Worksheets("Main").Range("B" & tmpLastRow).Select
    Call ValidateRow(Val(tmpCaseDefRow))
    Application.ScreenUpdating = True
End Sub

Private Sub btnViewCase_Click()
    x = Shell("Explorer.exe " & Chr$(34) & Range(CaseFolderPathColumn & tmpCaseDefRow) & Chr$(34), vbNormalFocus)
End Sub

Private Sub txtNewOffence_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If Button = 2 Then Call ShowPopup(Me, Me.Caption, x, y)
End Sub

Private Sub txtOffenceShortDescription_Change()
    Dim tmpReserve As Integer
    Dim tmpCut As Integer
    Dim tmpOffNo As Integer
    tmpOffNo = tmpCaseOffRow
    Do Until Worksheets("Main").Range("B" & tmpOffNo).Interior.ColorIndex <> OffenceColour
        tmpOffNo = tmpOffNo + 1
    Loop
    tmpOffNo = (tmpOffNo - tmpCaseOffRow) + 1
    If Val(Left(txtOffenceShortDescription, 2)) < 10 Then tmpReserve = 3 Else tmpReserve = 4
    If Len(txtOffenceShortDescription) = 1 Then txtOffenceShortDescription = Trim(tmpOffNo) & ": " & txtOffenceShortDescription
    If Len(txtOffenceShortDescription) < tmpReserve Then txtOffenceShortDescription = Trim(tmpOffNo) & ": "
    If Left(txtOffenceShortDescription, tmpReserve) <> Trim(tmpOffNo) & ": " Then
        If InStr(txtOffenceShortDescription, ":") = 0 Then
            tmpCut = InStr(txtOffenceShortDescription, " ")
            Else
            tmpCut = InStr(txtOffenceShortDescription, ":") + 1
            End If
        If tmpCut > 0 Then
            If InStr(Left(txtOffenceShortDescription, tmpReserve), ":") = 0 Then
                txtOffenceShortDescription = Trim(tmpOffNo) & ":" & Mid(txtOffenceShortDescription, tmpCut)
                txtOffenceShortDescription = Replace(txtOffenceShortDescription, "  ", " ")
                Else
                txtOffenceShortDescription = Trim(tmpOffNo) & " " & Mid(txtOffenceShortDescription, tmpCut)
                txtOffenceShortDescription = Replace(txtOffenceShortDescription, "  ", " ")
                End If
            End If
        End If
End Sub

Private Sub txtOffenceShortDescription_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If Button = 2 Then Call ShowPopup(Me, Me.Caption, x, y)
End Sub

Private Sub txtOriginalOffence_Click()
    If btnSaveAndClose.Caption = "Remove" Then Exit Sub
    tmpRow = tmpCaseOffRow
    Do Until Worksheets("Main").Range("B" & tmpRow).Interior.ColorIndex <> OffenceColour Or txtOriginalOffence = Worksheets("Main").Range("B" & tmpRow)
        tmpRow = tmpRow + 1
    Loop
    If Worksheets("Main").Range("B" & tmpRow).Interior.ColorIndex <> OffenceColour Then
        MsgBox "Error!  The offence chosen cannot be found", vbCritical
        Call HideAll
        btnSaveAndClose.Visible = Fals
        End If
    txtOldOffence = Worksheets("Main").Range(OffenceFullTextColumn & tmpRow)
    txtNewOffence = Worksheets("Main").Range("B" & tmpRow).Comment.Text
    If btnSaveAndClose.Caption = "Restore" And txtOldOffence = txtNewOffence Then
        MsgBox "Error!  The offence chosen has not been amended, no need to restore", vbCritical
        Call HideAll
        btnSaveAndClose.Visible = False
        Exit Sub
        End If
    txtNewOffence.SetFocus
End Sub

Private Sub UserForm_Activate()
    Dim tmpRow As Integer
    lblDefendant.BackColor = RGB(153, 204, 255)
    lblBack1.BackColor = RGB(153, 204, 255)
    lblBack2.BackColor = RGB(153, 204, 255)
    Me.BackColor = RGB(0, 0, 128)
    tmpRow = Val(Mid(ActiveCell.Address, 4))
    If Worksheets("Main").Range("B" & tmpRow - 3) = "Defendant" Then
        lblDefendant.Caption = " " & Worksheets("Main").Range("B" & tmpRow - 2) & "   (URN: " & Worksheets("Main").Range("F" & tmpRow - 2) & ")"
        End If
    If Worksheets("Main").Range("B" & tmpRow - 4) = "Defendant" Then
        lblDefendant.Caption = " " & Worksheets("Main").Range("B" & tmpRow - 3) & "   (URN: " & Worksheets("Main").Range("F" & tmpRow - 3) & ")"
        End If
    ' Set the top row of the case
    tmpCaseDefRow = tmpRow
    Do
        tmpCaseDefRow = tmpCaseDefRow - 1
    Loop Until Worksheets("Main").Range("B" & tmpCaseDefRow) = "Defendant" Or tmpCaseDefRow < 14
    If tmpCaseDefRow < 14 Then MsgBox "Error!  Unable to detect the top case row, see Paul Ridings", vbCritical: Unload Me
    ' Set the top offence row of the case
    tmpCaseOffRow = tmpCaseDefRow
    Do
        tmpCaseOffRow = tmpCaseOffRow + 1
    Loop Until Worksheets("Main").Range("B" & tmpCaseOffRow - 1) = "Offence" Or tmpCaseOffRow > Worksheets("Main").Cells(Worksheets("Main").Rows.Count, "B").End(xlUp).Row
    If tmpCaseOffRow > Worksheets("Main").Cells(Worksheets("Main").Rows.Count, "B").End(xlUp).Row Then MsgBox "Error!  Unable to detect the top offence row, see Paul Ridings", vbCritical: Unload Me
    
    Call BuildOffenceList("Y")
    If AddOffenceOnly = True Then Call btnAddNewOffence_Click
    If Len(Worksheets("Main").Range(CaseFolderPathColumn & tmpCaseDefRow)) = 0 Then
        btnViewCase.Enabled = False
        Else
        btnViewCase.Enabled = True
        End If
End Sub

Sub BuildOffenceList(tmpOriginals As String)
    Dim tmpRow As Integer
    tmpRow = tmpCaseOffRow
    txtOriginalOffence.Clear
    Do
        If Worksheets("Main").Range(OriginalOffenceColumn & tmpRow) = tmpOriginals Then txtOriginalOffence.AddItem Worksheets("Main").Range("B" & tmpRow)
        tmpRow = tmpRow + 1
    Loop Until Worksheets("Main").Range("B" & tmpRow).Interior.ColorIndex <> OffenceColour
End Sub

Sub HideAll()
    lblSubTitle.Caption = ""
    lblSelectOffence.Visible = False: lblSelectOffence.Top = 162.05: lblSelectOffence.Caption = "Select Original Offence"
    lblEnterOriginalWording.Visible = False: lblEnterOriginalWording.Top = 210
    lblEnterNewWording.Visible = False: lblEnterNewWording.Top = 342.05: lblEnterNewWording.Caption = "Enter New Wording"
    txtOriginalOffence.Visible = False: txtOriginalOffence.Top = 186: txtOriginalOffence = ""
    txtOffenceShortDescription.Visible = False: txtOffenceShortDescription.Top = 186: txtOffenceShortDescription = ""
    txtOldOffence.Visible = False: txtOldOffence.Top = 228: txtOldOffence = ""
    txtNewOffence.Visible = False: txtNewOffence.Top = 360.05: txtNewOffence = "": txtNewOffence.Locked = False
    btnAddNewOffence.Enabled = True
    btnRemoveNewOffence.Enabled = True
    btnAmendOffence.Enabled = True
    btnRestoreOriginalOffence.Enabled = True
    btnSaveAndClose.Visible = True
    btnCreateStatDec.Visible = False
    btnCreateS142.Visible = False
End Sub

Attribute VB_Name = "frmReserveTerms"
Attribute VB_Base = "0{70CF718A-2317-4358-9561-30199FDAC929}{25A2C542-18C7-4C9A-95C0-B51A66A20C3B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub UserForm_Activate()
    lblDefendant.BackColor = RGB(153, 204, 255)
    lblBack1.BackColor = RGB(153, 204, 255)
    Me.BackColor = RGB(0, 0, 128)
    
    If IsUserFormLoaded("frmDuplicateResult") = False Then
        If Worksheets("Main").Range("B" & DisqRow - 3) = "Defendant" Then lblDefendant.Caption = " " & Worksheets("Main").Range("B" & DisqRow - 2) & "   (URN: " & Worksheets("Main").Range(URNColumn & DisqRow - 2) & ")"
        If Worksheets("Main").Range("B" & DisqRow - 4) = "Defendant" Then lblDefendant.Caption = " " & Worksheets("Main").Range("B" & DisqRow - 3) & "   (URN: " & Worksheets("Main").Range(URNColumn & DisqRow - 3) & ")"
        If Worksheets("Main").Range("O" & DisqRow) = "Time To Pay" Then lblChoose.Caption = "Time To Pay:"
        Else
        If VBA.UserForms(0).Controls("txtLEPP") = "Time To Pay" Then lblChoose.Caption = "Time To Pay:"
        End If
End Sub

Private Sub btnCancel_Click()
    If IsUserFormLoaded("frmDuplicateResult") = False Then tmpDisableWorkSheetChange = True
    Unload Me
End Sub

Private Sub btnSave_Click()
    If Len(txtRT) = 0 Then MsgBox "Error!  You must enter something in this box", vbCritical: Exit Sub
    tmpDisableWorkSheetChange = True
    If IsUserFormLoaded("frmDuplicateResult") = False Then
        Worksheets("Main").Range("U" & DisqRow) = Worksheets("Main").Range("O" & DisqRow) & " Details: " & txtRT
        Else
        VBA.UserForms(0).Controls("txtNotes") = VBA.UserForms(0).Controls("txtLEPP") & " Details: " & txtRT
        End If
    Unload Me
End Sub

Attribute VB_Name = "frmSelectCourt"
Attribute VB_Base = "0{5D917FE2-4B5D-4BE5-BA2A-6B81E3086219}{CA9341A9-0267-40F5-BB12-1B089BB52AA3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub btnClose_Click()
    Dim tmpOffRow As Long
    Dim tmpAction As String
    If Len(txtCourt) = 0 Then MsgBox "Error!  You must choose a valid court to adjourn to": Exit Sub
    ' Find the start offence row
    tmpOffRow = Val(Mid(ActiveCell.Address, 4))
    tmpAction = Range(ActionColumn & tmpOffRow)
    Do
        If Range("U" & tmpOffRow - 1).Interior.ColorIndex = OffenceHeaderColour Or tmpOffRow - 1 < 15 Then Exit Do
        tmpOffRow = tmpOffRow - 1
    Loop
    Do
        If Range(ActionColumn & tmpOffRow) = tmpAction Then Call UpdateCourt(tmpOffRow)
        tmpOffRow = tmpOffRow + 1
        If Range("U" & tmpOffRow).Interior.ColorIndex <> OffenceColour Then Exit Do
    Loop
    tmpOffRow = Val(Mid(ActiveCell.Address, 4))
    If Right(Worksheets("Main").Range("U" & tmpOffRow), 40) = "(6) The Forfeiture Hearing is listed at " And IsDate(pubAdjournDate) = True Then
        Worksheets("Main").Range("U" & tmpOffRow) = Worksheets("Main").Range("U" & tmpOffRow) & txtCourt & " on " & pubAdjournDate
        End If
    Unload Me
End Sub

Private Sub UpdateCourt(tmpRow As Long)
    If Worksheets("Main").Range("U" & tmpRow) = "" Then
        Worksheets("Main").Range("U" & tmpRow) = "(To: " & Trim(txtCourt) & ")"
        Else
        If Left(Worksheets("Main").Range("U" & tmpRow), 4) = "(To:" And InStr(Worksheets("Main").Range("U" & tmpRow), ")") > 0 Then
            Worksheets("Main").Range("U" & tmpRow) = "(To: " & Trim(txtCourt) & ")" & Mid(Worksheets("Main").Range("U" & tmpRow), InStr(Worksheets("Main").Range("U" & tmpRow), ")") + 1)
            Else
            Worksheets("Main").Range("U" & tmpRow) = "(To: " & Trim(txtCourt) & ") " & Worksheets("Main").Range("U" & tmpRow)
            End If
        End If
    Worksheets("Main").Range(AdjCourtColumn & tmpRow) = txtCourt
End Sub

Private Sub UserForm_Activate()
    Dim tmpRow As Integer
    lblBack1.BackColor = RGB(153, 204, 255)
    Me.BackColor = RGB(0, 0, 128)
    txtCourt.RowSource = "=Courts!B1:B" & Worksheets("Courts").Cells(Worksheets("Courts").Rows.Count, "B").End(xlUp).Row
    tmpRow = 1
    Do
        If Worksheets("Courts").Range("E" & tmpRow) = "X" Then txtCourt = Worksheets("Courts").Range("B" & tmpRow): Exit Do
        tmpRow = tmpRow + 1
    Loop Until Worksheets("Courts").Range("B" & tmpRow) = ""
    txtCourt.SelStart = 0
    txtCourt.SelLength = Len(txtCourt)
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = 0 Then
        Cancel = True
        MsgBox "Error!  The X is disabled, please use the close button on the form.", vbCritical
    End If
End Sub
Attribute VB_Name = "frmWhatsNew"
Attribute VB_Base = "0{C5F21DCC-EF18-4D98-9F02-32B029801DBC}{F5ADE571-AE4E-44D9-95E5-A75E6F9AF9B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub btnClose_Click()
    Unload Me
End Sub


Attribute VB_Name = "modActiveXSet1"
Option Explicit
Option Private Module

'***Eucs - Sameh Sabet - 25.08.2017
'Intoduced this module

'*********************
'Module: modActiveXSet
'Developed by: Sameh Sabet
'Created: 07.11.2013 17:00
'Last update: 08.11.2017 10:00
'Previous Update: 07.11.2013 17:00
'Updated By: Sameh Sabet
'This Version: 2.0
'Previous Version:
'Comments:
'*********************

Public Const wksNmeCmdDefs As String = "CmdDefs"

Public Sub PrepareActivXForOpen()
    'Recreates activex controls
    '   called from the workbook open event
    Dim blnScrUpd As Boolean
    Dim blnEnEvents As Boolean
    
    blnScrUpd = Application.ScreenUpdating
    blnEnEvents = Application.EnableEvents
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    
    Call DelActiveXBtns
    DoEvents
    Call CreateActiveXBtns
    DoEvents
    Call PopCbos
    DoEvents
    
    Application.EnableEvents = blnEnEvents
    Application.ScreenUpdating = blnScrUpd
End Sub

Sub PrepareActiveXForExit()
    'Prepares workbook for deleting activex controls
    '   called from the workbook before close event
    
    Dim blnScrUpd As Boolean
    Dim blnEnEvents As Boolean
    
    blnScrUpd = Application.ScreenUpdating
    blnEnEvents = Application.EnableEvents
    
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    
    'Uncomment the line below to force recreation of the Activex table defs
    'Call CreateActiveXDefsTbl
    Call DelActiveXBtns
    DoEvents
    
    Application.EnableEvents = blnEnEvents
    Application.ScreenUpdating = blnScrUpd
End Sub

Sub PopCbos()
    Dim blnScrUpd As Boolean
    Dim blnEnEvents As Boolean
    On Error Resume Next
    blnScrUpd = Application.ScreenUpdating
    blnEnEvents = Application.EnableEvents
    
    'Moved from the wb open event
    Sheet1.txtProsecutorType.Clear
    Sheet1.txtProsecutorType.AddItem "DVLA"
    Sheet1.txtProsecutorType.AddItem "DVLA (SJP)"
    Sheet1.txtProsecutorType.AddItem "Environment Agency (SJP)"
    Sheet1.txtProsecutorType.AddItem "Local Authority (SJP)"
    Sheet1.txtProsecutorType.AddItem "Proceeds Of Crime Act"
    Sheet1.txtProsecutorType.AddItem "Pre Charge Bail"
    Sheet1.txtProsecutorType.AddItem "Traffic"
    Sheet1.txtProsecutorType.AddItem "Traffic (SJP)"
    Sheet1.txtProsecutorType.AddItem "Transport Authority"
    Sheet1.txtProsecutorType.AddItem "Transport Authority (SJP)"
    Sheet1.txtProsecutorType.AddItem "TV"
    Sheet1.txtProsecutorType.AddItem "TV (SJP)"
    
    Sheet1.txtProsecutorType.ListRows = 15
    Sheet1.txtQuickFind.ListRows = 20
    
    Sheet4.txtSplit.Clear
    Sheet4.txtSplit.AddItem "All Cases"
    Sheet4.txtSplit.AddItem "Top Half"
    Sheet4.txtSplit.AddItem "Bottom Half"
    Sheet4.txtSplit = "All Cases"
    
    Sheet4.txtSingleOffences.Clear
    Sheet4.txtSingleOffences.AddItem "All Cases"
    Sheet4.txtSingleOffences.AddItem "Single Offences Only"
    Sheet4.txtSingleOffences = "All Cases"
    
    Application.EnableEvents = blnEnEvents
    Application.ScreenUpdating = blnScrUpd
    On Error GoTo 0
End Sub

'*************************************************************************************
Sub CreateActiveXDefsTbl()
    'Creates the activex definitions table that is used to determine cmd button sizes
    'This routine is called from PrepareWorkbookForRelease in modDev
    'Note: It must be run when the workbook is prepared for release
    
    Dim obj As OLEObject
    Dim rngDest As Range
    Dim wksCmdDefs As Worksheet
    Dim wks As Worksheet
    Dim i As Integer
    
    On Error GoTo errHandler
    
    Set wksCmdDefs = ThisWorkbook.Worksheets(wksNmeCmdDefs)
    Set rngDest = wksCmdDefs.Range("A1")
    
    'Clear the existing range
    rngDest.CurrentRegion.Offset(1).ClearContents
    
    i = 1
    For Each wks In ThisWorkbook.Worksheets
        If wks.OLEObjects.Count > 0 Then
            For Each obj In wks.OLEObjects
                'Write to table
                On Error Resume Next
                With rngDest
                    .Offset(i, 0) = obj.Parent.Name
                    .Offset(i, 1) = obj.progID
                    .Offset(i, 2) = obj.Name
                    .Offset(i, 3) = obj.Object.Caption
                    .Offset(i, 4) = obj.Placement
                    .Offset(i, 5) = obj.Top
                    .Offset(i, 6) = obj.Left
                    .Offset(i, 7) = obj.Height
                    .Offset(i, 8) = obj.Width
                    .Offset(i, 9) = obj.Object.Font.Name
                    .Offset(i, 10) = obj.Object.Font.Size
                    .Offset(i, 11) = obj.Object.BackColor
                    .Offset(i, 12) = obj.Enabled
                End With
                i = i + 1
            Next
        End If
    Next wks
    Err.Clear
    
FinishOff:
    Exit Sub
    
errHandler:
    Call GenErrHandler("CreateActiveXDefsTbl", Err.Description, Err.Number)
End Sub

Sub CreateActiveXBtns()
    'Creates the activex buttons
    
    Dim obj As OLEObject
    Dim rngDest As Range
    Dim rngTL As Range, rngDb As Range
    Dim wksCmdDefs As Worksheet, wksHome As Worksheet
    Dim wks As Worksheet
    Dim i As Integer
    Dim blnProtect As Boolean
    
    Dim vArr As Variant
    Dim blnScrUpd As Boolean
    Dim blnEnEvents As Boolean
    
    blnScrUpd = Application.ScreenUpdating
    blnEnEvents = Application.EnableEvents
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    
    On Error GoTo errHandler
    
    Set wksCmdDefs = ThisWorkbook.Worksheets(wksNmeCmdDefs)
    
    If wksCmdDefs.ProtectContents Then
        blnProtect = True
        wksCmdDefs.Unprotect ""
    End If
    
    Set rngTL = wksCmdDefs.Range("A1")
    
    Set rngDb = rngTL.CurrentRegion
    Set rngDb = rngDb.Resize(rngDb.Rows.Count - 1).Offset(1)
    vArr = rngDb
    
    For i = 1 To UBound(vArr)
        'Get the worksheet
        Set wks = ThisWorkbook.Worksheets(vArr(i, 1))
        If wks.ProtectContents Then
            blnProtect = True
            wks.Unprotect "HMITU9"
        End If
        
        Set obj = wks.OLEObjects.add( _
            classtype:=vArr(i, 2), _
            Top:=vArr(i, 6), _
            Left:=vArr(i, 7), _
            Height:=vArr(i, 8), _
            Width:=vArr(i, 9))
        
        'Put in line below to enable XL to resolve new control
        DoEvents
        
        On Error Resume Next
        With obj
            .Name = vArr(i, 3)
            .Object.Caption = vArr(i, 4)
            .Placement = vArr(i, 5)
            .Object.Font.Name = vArr(i, 10)
            .Object.Font.Size = vArr(i, 11)
            .Object.BackColor = vArr(i, 12)
            .Enabled = vArr(i, 13)
        End With
        
        If blnProtect Then
            wks.Protect "HMITU9", True, True
        End If
        
        Set wks = Nothing
        Set obj = Nothing
        blnProtect = False
        
        DoEvents
    Next i
    
FinishOff:
    Application.EnableEvents = blnEnEvents
    Application.ScreenUpdating = blnScrUpd
    
    Exit Sub
    
errHandler:
    Call GenErrHandler("CreateActiveXDefsTbl", Err.Description, Err.Number)
    Resume FinishOff
End Sub

Sub DelActiveXBtns()
    'Deletes activex controls in a workbook
    Dim wks As Worksheet
    Dim obj As OLEObject
    Dim blnProtect As Boolean
    
    Dim blnScrUpd As Boolean
    Dim blnEnEvents As Boolean
    
    On Error GoTo errHandler
    
    blnScrUpd = Application.ScreenUpdating
    blnEnEvents = Application.EnableEvents
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    
    For Each wks In ThisWorkbook.Worksheets
        If wks.ProtectContents Then
            blnProtect = True
            wks.Unprotect "HMITU9"
        End If
        
        If wks.OLEObjects.Count > 0 Then
            For Each obj In wks.OLEObjects
                obj.Delete
            Next
        End If
        
        If blnProtect Then
            wks.Protect "HMITU9", True, True
        End If
        blnProtect = False
        
    Next wks
    
FinishOff:
    Application.EnableEvents = blnEnEvents
    Application.ScreenUpdating = blnScrUpd
    Exit Sub
    
errHandler:
    Call GenErrHandler("DelActiveXBtns", Err.Description, Err.Number)
    Resume FinishOff
End Sub

'****************************************************************************************************************************************
Function fnActiveXDimsStd(sWksName, sName As String) As Variant
    'Returns an array of the expected control dimensions
    'These are returned from the table of activex control definitions using Adv Filter
    'In: the worksheet name the control resides on
    'In: the control name
    'Out: Variant array of control dimensions
    
    Dim vArr() As Variant
    Dim rngDb As Range
    Dim rngRow As Range
    Dim rngCrit As Range
    Dim rngExt As Range
    Dim wksCmdDefs As Worksheet
    
    On Error GoTo errFunction
    
    Set wksCmdDefs = ThisWorkbook.Worksheets(wksNmeCmdDefs)
    Set rngDb = wksCmdDefs.Range("A1").CurrentRegion
    Set rngCrit = wksCmdDefs.Range("critCmdDef")
    Set rngExt = wksCmdDefs.Range("extCmdDef")
    
    rngCrit.Cells(2, 1) = sWksName
    rngCrit.Cells(2, 2) = sName
    
    Call DoAdvFilter(rngDb, rngCrit, rngExt, True)
    
    Set rngRow = rngExt.Offset(1)
    
    If wksCmdDefs.Range("extCmdDef").CurrentRegion.Rows.Count > 1 Then
        Call PopulateArrayWithRange(rngRow, vArr, False)
        fnActiveXDimsStd = vArr
    Else
        fnActiveXDimsStd = Empty
    End If
    Exit Function
    
errFunction:
    Call GenErrHandler("fnActiveXDimsStd", Err.Description, Err.Number)
End Function

Function fnActiveXDimsCurr(sWksName, sName As String) As Variant
    'Returns an array of the current activex control dimensions
    
    'In: the worksheet name the control resides on
    'In: the control name
    'Out: Variant array of control dimensions
    
    Dim vArr(1 To 6)
    Dim obj As OLEObject
    Dim wks As Worksheet
    
    On Error GoTo errFunction
    
    fnActiveXDimsCurr = Empty
    
    Set wks = ThisWorkbook.Worksheets(sWksName)
    For Each obj In wks.OLEObjects
        With obj
            If .Parent.Name = sWksName And .Name = sName Then
                vArr(1) = .Top
                vArr(2) = .Left
                vArr(3) = .Height
                vArr(4) = .Width
                vArr(5) = .Object.Font.Name
                vArr(6) = .Object.Font.Size
                
                fnActiveXDimsCurr = vArr
                Exit Function
            End If
        End With
    Next obj
    Exit Function
    
errFunction:
    Call GenErrHandler("fnActiveXDimsCurr", Err.Description, Err.Number)
End Function

Function fnActiveXDimOk(sWksName As String, sName As String) As Boolean
    'Compares the std control dimensions of a control with the current control dimensions
    'In: the worksheet name the control resides on
    'In: the control name
    'Out: boolean flag to determine if control dimensions match defined dims

    Dim vArrCurr As Variant
    Dim vArrStd As Variant
    
    vArrStd = fnActiveXDimsStd(sWksName, sName)
    vArrCurr = fnActiveXDimsCurr(sWksName, sName)
    
    If Not IsEmpty(vArrStd) And Not IsEmpty(vArrCurr) Then
        If fnCompareArrays(vArrStd, vArrCurr) Then
            fnActiveXDimOk = True
        Else
            fnActiveXDimOk = False
        End If
    End If
    Exit Function
    
End Function

Sub FixActiveXObj(sWksName As String, sName As String)
    'Used to ensure a command button is set to the correct size
    '   Sometimes it happens that the buttons become wayward (grow and shrink) for no known cause
    'Ususally called from the button click event
    
    'In: the worksheet name the control resides on
    'In: the control name
    'If there is a discrepancy between std and current dimensions then the sub routine resets the control _
    '   to the std dimensions
    
    'Sample fix activex code
    'Call FixActiveXObj(Me.name, Me.cmdGo.name)
    
    
    Dim vArrCurr As Variant
    Dim vArrStd As Variant
    Dim i As Long
    
    vArrStd = fnActiveXDimsStd(sWksName, sName)
    vArrCurr = fnActiveXDimsCurr(sWksName, sName)
    
    On Error GoTo errHandler
    If Not IsEmpty(vArrStd) And Not IsEmpty(vArrCurr) Then
        If Not fnCompareArrays(vArrStd, vArrCurr) Then
            With ThisWorkbook.Worksheets(sWksName).OLEObjects(sName)
                .Top = vArrStd(1)
                .Left = vArrStd(2)
                'We don't want to move the scroll button on the workings sheet
                .Height = vArrStd(3)
                .Width = vArrStd(4)
                .Object.Font.Name = vArrStd(5)
                .Object.Font.Size = vArrStd(6)
            End With
        End If
    End If
    Exit Sub
    
errHandler:
    Call GenErrHandler("FixActiveXObj", Err.Description, Err.Number)
End Sub

'****************************************************************************************************************************************
'Utils
Sub DoAdvFilter(rSourceDb As Range, vCritTL As Variant, rCopyTo As Range, Optional bUnique As Boolean = True)
    'Performs an advanced filter, copying to an extract range
    'Criteria - with Range: Pass the whole criteria or the top left cell
    '   Example with range: Call DoAdvFilter(Range("SourceGeogDb"), Range("lstSelRegTL"), Range("lstSorcTerTL"), True)
    'Criteria - No Range: pass vCritTL = ""
    '   Example with no range: Call DoAdvFilter(Range("SourceGeogDb"), "", Range("lstSorcTerTL"), False)
    
    Dim rngCrit As Range
    Dim i As Integer
    Dim r As Range
    
    'If source range is empty you can't filter so skip   PG 10/05/11
    If rSourceDb.Rows.Count < 2 Then Exit Sub
    
    'Check a range is passed by checking if vCritTL is an object
    If IsObject(vCritTL) Then
        
        'Check if only top row of crit passed
        If vCritTL.Rows.Count = 1 Then
            Set rngCrit = Range(vCritTL, vCritTL.Offset(1))
        Else
            Set rngCrit = vCritTL.CurrentRegion
        End If
        
        rSourceDb.AdvancedFilter Action:=xlFilterCopy, CriteriaRange:=rngCrit, CopyToRange:=rCopyTo, Unique:=bUnique
    
    Else        'if no range passed then there is no criteria
        rSourceDb.AdvancedFilter Action:=xlFilterCopy, CriteriaRange:="", CopyToRange:=rCopyTo, Unique:=bUnique
    End If
    
End Sub

Function fnCompareArrays(vArr1, vArr2) As Boolean
    Dim i As Long
    
    If IsArray(vArr1) And IsArray(vArr2) Then
        If LBound(vArr1) = LBound(vArr2) And UBound(vArr1) = UBound(vArr2) Then
            For i = LBound(vArr1) To UBound(vArr1)
                If vArr1(i) = vArr2(i) Then
                    fnCompareArrays = True
                Else
                    fnCompareArrays = False
                    Exit For
                End If
            Next i
        End If
    End If
End Function



Attribute VB_Name = "modEmail"
Public Function SendToCourtStore(tmpCaseFolderPath As String, tmpCaseRow As Long, tmpCaseSubRow As Long) As String
    Dim tmpAdjournEmail As String
    Dim tmpName As String
    Dim tmpSubject As String
    Dim tmpSubject2 As String
    Dim tmpUSCount As Long
    Dim tmpMoveSuccess As Boolean
    
    ' Create email for trial case to send to store
    tmpAdjournEmail = "inbox@courtstore.justice.gov.uk"
    tmpName = Replace(Range("A" & tmpCaseSubRow), ",", " ")
    If InStr(tmpName, " ") > 0 Then
        tmpName = UCase(Left(tmpName, InStr(tmpName, " "))) & StrConv(Mid(tmpName, InStr(tmpName, " ") + 1), vbProperCase)
        End If
    ' Arrange the subject for emailing to the store
    tmpName = Replace(tmpName, "  ", " ")
    tmpSubject = Replace(Worksheets("Main").Range(URNColumn & tmpCaseRow) & " " & tmpName, " ", "_")
    tmpUSCount = 1
    i = 0
    Do
        If Mid(tmpSubject, tmpUSCount, 1) = "_" Then
            i = i + 1
            If i > 2 Then
                tmpSubject2 = Mid(tmpSubject, tmpUSCount + 1)
                tmpSubject2 = Replace(tmpSubject2, "_", " ")
                tmpSubject = Left(tmpSubject, tmpUSCount) & tmpSubject2
                Exit Do
                End If
            End If
        tmpUSCount = tmpUSCount + 1
    Loop Until tmpUSCount > Len(tmpSubject)
    SendToCourtStore = SendCaseViaEmail(tmpAdjournEmail, tmpCaseFolderPath, tmpSubject, "")
End Function

Public Function SendCaseViaEmail(tmpEmailAddress As String, tmpCaseFolderPath As String, tmpSubject As String, tmpBody As String) As String
    '***Eucs - Sameh Sabet - 24.08.2017
    '   changed outlook to late binding
    'Dim olApp As Outlook.Application
    'Dim objMail As Outlook.MailItem
    Dim olApp As Object
    Dim objMail As Object
    '***
    Dim tmpFileName As String
    On Error GoTo SendCaseViaEmail_Error
    '***Eucs - 24.08.2017
    'Set olApp = Outlook.Application
    Set olApp = CreateObject("Outlook.Application")
    '***
    Set objMail = olApp.CreateItem(olMailItem)
    With objMail
        .Subject = tmpSubject
        .Body = tmpBody
        .To = tmpEmailAddress
        tmpFileName = Dir(tmpCaseFolderPath & "\*.*")
        Do
            If tmpEmailAddress = "inbox@courtstore.justice.gov.uk" And tmpFileName = "ResultHistory.dat" Then
                ' do nothing
                Else
                .Attachments.add tmpCaseFolderPath & "\" & tmpFileName
                End If
            tmpFileName = Dir()
        Loop Until Len(tmpFileName) = 0
        .display
    End With
    Set objMail = Nothing
    Set olApp = Nothing
    SendCaseViaEmail = "Success"
    On Error GoTo 0
    Exit Function
    
SendCaseViaEmail_Error:
    SendCaseViaEmail = "Error! There was a problem sending the email to " & tmpEmailAddress & " for (" & tmpSubject & ")"
    On Error GoTo 0
End Function
Attribute VB_Name = "modErrHandler"
Option Explicit
Option Private Module

'***Eucs - Sameh Sabet - 25.08.2017
'Intoduced this module

'*********************
'Module: modErrHandler
'Developed by: Sameh Sabet
'Last update: 10 Oct 2013 10:15
'Previous Update: 05 May 2009
'Updated By:
'This Version: 1.2
'Previous Version:
'Comments:
'*********************

'Const gcstrAppName = "MS Excel Application"


Sub GenErrHandler(strSubName As String, strErrDesc As String, _
        lngErrNum As Long, Optional vMessage As Variant)
    'Generalised error handler
    Dim strMsg As String
    
    If IsMissing(vMessage) Or CStr(vMessage) = "" Then
        strMsg = "An error has occured in Sub: " & strSubName & vbCr
        strMsg = strMsg & "The error description is: " & strErrDesc & vbCr
        strMsg = strMsg & "The error number is: " & lngErrNum & vbCr
    Else
        strMsg = vMessage
    End If
    
    MsgBox strMsg, vbCritical   ', "App Title"
End Sub

Attribute VB_Name = "modExcelDBMan"
Option Explicit
Option Private Module

'***Eucs - Sameh Sabet - 25.08.2017
'Intoduced this module

'**************************************************************
'Module: modExcelDBMan
'Developed by: Sameh Sabet
'Last update: 13.05.2015
'Previous Update: 15.03.2015
'Updated By: Sameh Sabet
'This Version: 2.2
'Previous Version:2.1
'Comments: Added PopulateArrayWithRange_v2
'
'**************************************************************

'Excel DB manipulations - Db is an excel range that represents a table of data

Function fnGetXLDb(rngPassed As Range, Optional blnUseCurrentRegion As Boolean = True) As Range
    'Returns a range using either current region or range.end(xldown) method
    'If rngPassed is multicell then the top left of that cell is taken as reference
    'If an error is generated then fnGetXLDb returns Nothing
    
    Dim rngTopLeft As Range
    Dim rngDb As Range
    
    On Error Resume Next
    Set rngTopLeft = rngPassed.Cells(1, 1)
    If blnUseCurrentRegion Then
        Set rngDb = rngTopLeft.CurrentRegion
    Else
        'Get rows
        If rngTopLeft.Offset(0, 1) = "" Then
            Set rngDb = rngTopLeft
        Else
            Set rngDb = Range(rngTopLeft, rngTopLeft.End(xlToRight))
        End If
        If rngTopLeft.Offset(1, 0) = "" Then
            Set rngDb = rngTopLeft
        Else
            Set rngDb = Range(rngDb, rngDb.End(xlDown))
        End If
    End If
    
    If Err.Number = 0 Then
        Set fnGetXLDb = rngDb
    End If
End Function

Function fnGetXLDbData(ByVal rngDb As Range, Optional ByRef blnSingleRow As Boolean) As Range
    'Returns a range without headers if multirow range
    'Returns the passed range if single row list
    'Sets single row flag, blnSingleRow, as true if single row
    
    'Test if single row
    If rngDb.Rows.Count = 1 Then
        Set fnGetXLDbData = rngDb
        blnSingleRow = True
    Else
        Set fnGetXLDbData = rngDb.Resize(rngDb.Rows.Count - 1)
        Set fnGetXLDbData = fnGetXLDbData.Offset(1)
        blnSingleRow = False
    End If
    
End Function

Function fnGetXLDbData2(ByVal rngDb As Range, Optional bUseOffset As Boolean = True) As Range
    'Returns the data portion of a table - ie table minus header row
    'In: The table range
    'In: Flag to determine whether to return offset of first row if table contains only header
    '   otherwise returns first row
    
    If rngDb.Rows.Count = 1 Then
        If bUseOffset Then
            Set fnGetXLDbData2 = rngDb.Offset(1)
        Else
            Set fnGetXLDbData2 = rngDb
        End If
    Else
        Set fnGetXLDbData2 = rngDb.Resize(rngDb.Rows.Count - 1)
        Set fnGetXLDbData2 = fnGetXLDbData2.Offset(1)
    End If
    
End Function

Function fnFieldPosition(ByVal rngHeader As Range, ByVal vFieldName As Variant, Optional blnIgnoreCase As Boolean = True) As Integer
    'Checks that a field name exists in a header
    'blnIgnoreCase: determines whether case sensitive search is made
    'Function returns 0 if no match found
    'First field is 1
    'Modified: 20.08.2013 by Sameh Sabet. Set return val of 0 if no match found.
    
    Dim rngFinal As Range
    Dim r As Range
    Dim i As Integer
    
    Set rngFinal = rngHeader
    'obtain single row if rng header contains more than one row.
    If rngFinal.Rows.Count > 1 Then
        Set rngFinal = rngFinal.Resize(1)
    End If
    
    i = 1
    For Each r In rngFinal
        If blnIgnoreCase Then
            If StrComp(vFieldName, r.Value, vbTextCompare) = 0 Then
                fnFieldPosition = i
                Exit Function
            End If
        Else
            If StrComp(vFieldName, r.Value, vbBinaryCompare) = 0 Then
                fnFieldPosition = i
                Exit Function
            End If
        End If
        i = i + 1
    Next r
    
    'We got this far so no match
    fnFieldPosition = 0
End Function

Function fnFieldPosition2(ByVal rngHeader As Range, ByVal vFieldName As Variant, _
            Optional bUseBase0 As Boolean = True, Optional blnIgnoreCase As Boolean = True) As Integer
    'Sameh Sabet - 04.12.2013
    'Checks that a field name exists in a header
    'This version can use a 0 or 1 base, depending on the bUseBase0 selection
    'blnIgnoreCase: determines whether case sensitive search is made
    'Function returns -1 or 0 if no match found
    'First field is 0 or 1
    
    Dim rngFinal As Range
    Dim r As Range
    Dim i As Integer
    
    Set rngFinal = rngHeader
    'obtain single row if rng header contains more than one row.
    If rngFinal.Rows.Count > 1 Then
        Set rngFinal = rngFinal.Resize(1)
    End If
    
    If bUseBase0 Then
        i = 0
    Else
        i = 1
    End If
    
    For Each r In rngFinal
        If blnIgnoreCase Then
            If StrComp(vFieldName, r.Value, vbTextCompare) = 0 Then
                fnFieldPosition2 = i
                Exit Function
            End If
        Else
            If StrComp(vFieldName, r.Value, vbBinaryCompare) = 0 Then
                fnFieldPosition2 = i
                Exit Function
            End If
        End If
        i = i + 1
    Next r
    
    'We got this far so no match
    If bUseBase0 Then
        fnFieldPosition2 = -1
    Else
        fnFieldPosition2 = 0
    End If
End Function


Function fnGetField(ByVal rngDb As Range, vFieldName As Variant, Optional blnIncludeFieldName As Boolean = True) As Range
    'Returns a field column of data including field name or data only
    'Returns 'Nothing' if field not found
    Dim rngFinal As Range
    Dim i As Integer
    'Get offset
    i = fnFieldPosition(rngDb, vFieldName)
    'Exit if no match found
    If i = 0 Then Exit Function
    
    'Get leftmost column
    Set rngFinal = rngDb.Resize(columnsize:=1)
    
    If Not blnIncludeFieldName Then
        If rngFinal.Rows.Count > 1 Then
            Set rngFinal = rngFinal.Resize(rowsize:=rngFinal.Rows.Count - 1)
        Else
            Set rngFinal = rngFinal.Resize(rowsize:=1)
        End If
        Set rngFinal = rngFinal.Offset(1)
    End If
    Set fnGetField = rngFinal.Offset(0, i - 1)
End Function

Function fnGetLastRowOffset(rngDb As Range) As Long
    'Gets the offset for the last row relative to top row
    Dim r1 As Long
    Dim r2 As Long
    
    r1 = rngDb.Cells(1, 1).Row
    r2 = rngDb.Rows.Count
'    fnGetLastRowOffset = r2 - r1
    fnGetLastRowOffset = r2 - 1   ' PG 23/05/11
End Function

Sub PopulateArrayWithRange(rngPassed As Range, ByRef vArray() As Variant, Optional blnConvToStr As Boolean = True)
    'Populates a passed array from a passed range.
    'Always returns an array unless rngpassed = nothing
    'blnConvToStr will convert values in range to a string, otherwise leave intact
    
    Dim i As Integer
    Dim r As Range
    Dim varVal As Variant
    i = 1
    If Not rngPassed Is Nothing Then
        For Each r In rngPassed
            If Not IsEmpty(r.Value) Then
                varVal = r.Value
                If blnConvToStr Then
                    varVal = CStr(varVal)
                End If
                ReDim Preserve vArray(1 To i)
                vArray(i) = r.Value
                i = i + 1
            End If
        Next
    End If
End Sub

Sub PopulateArrayWithRange_v2(rngPassed As Range, ByRef vArray() As Variant, Optional blnConvToStr As Boolean = True, Optional blnIncludeEmpty As Boolean = False)
    'Populates a passed array from a passed range.
    'Always returns an array unless rngpassed = nothing
    'blnConvToStr will convert values in range to a string, otherwise leave intact
    'Note: This version gives the option to include empty cells in the array
    'Updated 13.05.2015 - SS
    
    Dim i As Integer
    Dim r As Range
    Dim varVal As Variant
    i = 1
    If Not rngPassed Is Nothing Then
        For Each r In rngPassed
            If blnIncludeEmpty Then
                varVal = r.Value
                If blnConvToStr Then
                    varVal = CStr(varVal)
                End If
                ReDim Preserve vArray(1 To i)
                vArray(i) = r.Value
                i = i + 1
            Else
                If Not IsEmpty(r.Value) Then
                    varVal = r.Value
                    If blnConvToStr Then
                        varVal = CStr(varVal)
                    End If
                    ReDim Preserve vArray(1 To i)
                    vArray(i) = r.Value
                    i = i + 1
                End If
            End If
        Next
    End If
End Sub

Function fnGetLastCellFirstCol(rngPassed As Range, Optional blnGetOffset1 As Boolean = True) As Range
    'Gets the last cell in the first col of data passed or the cell one row below
    'In the range passed
    'In boolean to determine wether to find bottom left cell of table or cell one row below
    'Used to append data to a table
    
    Dim rTemp As Range
    
    'Check if there is  only one row of data passed
    If rngPassed.Rows.Count = 1 Then
        If blnGetOffset1 Then
            Set fnGetLastCellFirstCol = rngPassed.Cells(1, 1).Offset(1)
        Else
            Set fnGetLastCellFirstCol = rngPassed.Cells(1, 1)
        End If
    Else
        Set rTemp = rngPassed.Cells(1, 1)
        If blnGetOffset1 Then
            Set rTemp = rTemp.Offset(fnGetLastRowOffset(rngPassed)).Offset(1)
        Else
            Set rTemp = rTemp.Offset(fnGetLastRowOffset(rngPassed))
        End If
        Set fnGetLastCellFirstCol = rTemp
    End If
End Function

Function fnGetFieldNameFromActiveCell(rDb As Range, rCell As Range, Optional bDbHasHeader As Boolean = True) As String
    'Gets the field name of a cell in a table
    'In: The table as a range - this is not an Excel Table but a range
    'In: the Active cell - if a range is passed then gets the top left
    'In: Flag which determines whether data passed contains
    '   a header or is data only and contains a header one row above range passed.
    
    Dim rngDb As Range
    Dim rngCell As Range
    Dim iRow As Long
    Dim iCol As Long
    
    On Error GoTo errFunc
    
    'Get top left of range
    Set rngCell = rCell.Cells(1, 1)
    
    iRow = rDb.Resize(1).Row
    
    If iRow > 1 And Not bDbHasHeader Then
        iRow = iRow - 1
    End If
    
    iCol = rngCell.Column
    
    fnGetFieldNameFromActiveCell = rDb.Parent.Cells(iRow, iCol)
    Exit Function
    
errFunc:
    fnGetFieldNameFromActiveCell = vbNullString
End Function

Function fnGetFieldCellSameRow(rngDb As Range, rCell As Range, sFieldName As String) As Range
    'Sameh Sabet - 23.09.2013
    'Returns a single cell in a specified field, in the same row as a passed cell
    '   the passed cell could be the active cell
    'In: The data range
    'In: The cell in the row
    'In; The field name
    'Out: The cell in the same row as the passed cell but in the specified field
    'Out: Nothing if there's an error or field not found
    
    Dim lRowTop As Integer
    Dim lRow As Long
    Dim iColOffset As Integer
    
    On Error GoTo errFunction
    
    lRowTop = rngDb.Resize(1).Row
    lRow = rCell.Row - lRowTop
    
    iColOffset = fnFieldPosition(rngDb.Resize(1), sFieldName, True)
    'Check if field name found then deduct one to get offset from top left cell
    If iColOffset > 0 Then
        iColOffset = iColOffset - 1
        Set fnGetFieldCellSameRow = rngDb.Cells(1, 1).Offset(lRow, iColOffset)
    End If
    
FinishOff:
    Exit Function
    
errFunction:
    Resume FinishOff
End Function


Function fnRangeInRange(rngTest As Range, rngContainer As Range) As Boolean
    'Test to see if one range is contained in another range
    'In: The range being tested
    'In: The range acting as container
    'Out a boolean giving true if contained
    
    fnRangeInRange = False
    'All tests must be true for this to work
    'Test 1 top rows
    If rngContainer.Row <= rngTest.Row Then
        fnRangeInRange = True
    Else
        fnRangeInRange = False
        Exit Function
    End If
    'Test 2 left cols
    If rngContainer.Column <= rngTest.Column Then
        fnRangeInRange = True
    Else
        fnRangeInRange = False
        Exit Function
    End If
    'Test 3 bottom rows
    If rngContainer.Row + rngContainer.Rows.Count - 1 >= rngTest.Row + rngTest.Rows.Count - 1 Then
        fnRangeInRange = True
    Else
        fnRangeInRange = False
        Exit Function
    End If
    'Test 4 right cols
    If rngContainer.Column + rngContainer.Columns.Count - 1 >= rngTest.Column + rngTest.Columns.Count - 1 Then
        fnRangeInRange = True
    Else
        fnRangeInRange = False
        Exit Function
    End If
        
End Function

Sub FieldFiller(rngField As Range)
    
    Dim r As Range
    Dim rTop As Range
    Dim strTmpItem As String
    Dim lngRowCount As Long
    
    With rngField
        'Reszie the range to one col in case multicol passed
        Set rngField = rngField.Resize(columnsize:=1)
        'Get first instance
        Set rTop = .Cells(1)
        lngRowCount = .Rows.Count
    End With
    'Set the top cell
    Set r = rTop
    
    Do
        If r.Cells(1).Offset(1).Value = "" Then
            'Set the value
            strTmpItem = r.Formula
            'Find the next item down then resize to one cell above
            Set r = Range(r.Cells(1), r.End(xlDown))
            Set r = r.Resize(r.Rows.Count - 1)
            'Check that the new region hasn't gone past the end of the passed range
            If (r.Row + r.Rows.Count - 1) > rTop.Cells(lngRowCount).Row Then
                'If it has then reset the range
                Set r = Range(r.Cells(1), rTop.Cells(lngRowCount))
                'Do the fill
                r.Formula = strTmpItem
                'Nothing else to fill
                Exit Do
            End If
            'Do the fill
            r.Formula = strTmpItem
            'Go to the next cell
            Set r = r.End(xlDown)
            'Check if still in passed range
            If (r.Row) > rTop.Cells(lngRowCount).Row Then
                Exit Do
            End If
            
        Else
            'Move to the next cell
            Set r = r.Offset(1)
            If r.Row > rTop.Cells(lngRowCount).Row Then
                Exit Do
            End If
        End If
    Loop
    
End Sub

Function fnRangeIsEmpty_v1(rPassed As Range) As Boolean
    'Checks if a range is empty - uses the Excel function CountA
    'NOTE: Using the Excel function is quicker than using an array for very large ranges
    Dim x As Long
    Dim t1 As Single, t2 As Single
    
    t1 = Timer
    
    x = WorksheetFunction.CountA(rPassed)
        
FinishOff:
    If x = 0 Then
        fnRangeIsEmpty_v1 = True
    Else
        fnRangeIsEmpty_v1 = False
    End If
    t2 = Timer
    'Debug.Print Format(t2 - t1, "#0.000000")
    
End Function

Function fnRangeIsEmpty_v2(rPassed As Range) As Boolean
    'Checks if a range is empty - uses an array
    Dim vArr As Variant
    Dim i As Long, j As Long, iU As Long, jU As Long
    Dim x As Long
    Dim t1 As Single, t2 As Single
    
    t1 = Timer
    
    vArr = rPassed
    If Not IsArray(vArr) Then
        ReDim vArr(1 To 1, 1 To 1)
    End If
    
    iU = UBound(vArr, 1)
    jU = UBound(vArr, 2)
    
    For i = 1 To iU
        For j = 1 To jU
            If vArr(i, j) <> "" Then
                x = x + 1
                GoTo FinishOff
            End If
        Next j
    Next i
    
FinishOff:
    If x = 0 Then
        fnRangeIsEmpty_v2 = True
    Else
        fnRangeIsEmpty_v2 = False
    End If
    
    t2 = Timer
    'Debug.Print Format(t2 - t1, "#0.000000")
    Exit Function
    
End Function


Sub Test2()
    Dim vArr As Variant
    Dim i As Long, j As Long, iU As Long, jU As Long
    Dim x As Long
    Dim t1 As Single, t2 As Single
    
    Dim s() As String
    
    s = fnArrayFieldNames(Selection, False)
    
    t1 = Timer
    'x = 0
    
    x = WorksheetFunction.CountA(Selection)
        
FinishOff:
    t2 = Timer
    Debug.Print Format(t2 - t1, "#0.000000")
    Exit Sub
End Sub

Function fnArrayFieldNames(rPassed As Range, Optional bUseZeroBased As Boolean = True) As String()
    'Returns an array of field names from the first row of a passed range
    
    Dim rngHeader As Range
    Dim sarrHeader() As String
    Dim i As Long, iU As Long
    
    On Error GoTo errFunction
    Set rngHeader = rPassed.Resize(rowsize:=1)
    iU = rngHeader.Cells.Count
    If bUseZeroBased Then
        ReDim sarrHeader(0 To iU - 1)
        For i = 0 To iU - 1
            sarrHeader(i) = rngHeader.Cells(1, i + 1)
        Next i
    Else
        ReDim sarrHeader(1 To iU)
        For i = 1 To iU
            sarrHeader(i) = rngHeader.Cells(1, i)
        Next i
    End If
    
FinishOff:
    fnArrayFieldNames = sarrHeader
    Exit Function
errFunction:
    Call GenErrHandler("fnArrayFieldNames", Err.Description, Err.Number)
    ReDim sarrHeader(1 To 1)
    Resume FinishOff
End Function

Function fnArrayFieldNames_v2(rPassed As Range, Optional bUseZeroBased As Boolean = True) As String()
    'Returns an array of field names from the first row of a passed range
    'If the range contains all blank cells then the only one element is returned containing an empty string
    
    Dim rngHeader As Range
    Dim sarrHeader() As String
    Dim i As Long, iU As Long
    
    On Error GoTo errFunction
    If Not fnRangeIsEmpty_v1(rPassed) Then
        Set rngHeader = rPassed.Resize(rowsize:=1)
        iU = rngHeader.Cells.Count
        If bUseZeroBased Then
            ReDim sarrHeader(0 To iU - 1)
            For i = 0 To iU - 1
                sarrHeader(i) = rngHeader.Cells(1, i + 1)
            Next i
        Else
            ReDim sarrHeader(1 To iU)
            For i = 1 To iU
                sarrHeader(i) = rngHeader.Cells(1, i)
            Next i
        End If
    Else
        If bUseZeroBased Then
            ReDim sarrHeader(0 To 0)
            sarrHeader(0) = ""
        Else
            ReDim sarrHeader(1 To 1)
            sarrHeader(1) = ""
        End If
    End If
    
FinishOff:
    fnArrayFieldNames_v2 = sarrHeader
    Exit Function
errFunction:
    Call GenErrHandler("fnArrayFieldNames_v2", Err.Description, Err.Number)
    ReDim sarrHeader(1 To 1)
    Resume FinishOff
End Function

Function fnItemPosnInCol(rDb As Range, sFldName As String, vItem As Variant, _
        Optional bUseBase0 As Boolean = True, Optional bIgnoreCase As Boolean = True) As Long
    'SS - 15.03.2015
    'Returns the position of an item in an array
    'Returns -1 if item not found
    
    Dim vArr As Variant
    Dim i As Long, j As Long
    
    fnItemPosnInCol = -1
    
    vArr = fnGetField(rDb, sFldName, True)
    
    If IsArray(vArr) Then
        For i = LBound(vArr) To UBound(vArr)
            'Check type before proceeding
            If VarType(vItem) <> vbString And bIgnoreCase Then
                bIgnoreCase = False
            End If
            
            If bIgnoreCase Then
                If UCase(vItem) = UCase(vArr(i, 1)) Then
                    fnItemPosnInCol = i
                    GoTo FinishOff
                End If
            Else
                If vItem = vArr(i, 1) Then
                    fnItemPosnInCol = i
                    GoTo FinishOff
                End If
            End If
        Next i
    Else
        'Check type before proceeding
        If VarType(vItem) <> vbString And bIgnoreCase Then
            bIgnoreCase = False
        End If
        
        If bIgnoreCase Then
            If UCase(vItem) = UCase(vArr) Then
                fnItemPosnInCol = i
                GoTo FinishOff
            End If
        Else
            If vItem = vArr Then
                fnItemPosnInCol = i
                GoTo FinishOff
            End If
        End If
    End If
    
FinishOff:
    'Change offset from 1 to 0 based
    If fnItemPosnInCol > -1 And bUseBase0 Then
        fnItemPosnInCol = fnItemPosnInCol - 1
    End If
    Exit Function
End Function


Attribute VB_Name = "modFileManagement"
Option Explicit

Private Type FILETIME
dwLowDateTime As Long
dwHighDateTime As Long
End Type

Private Type SYSTEMTIME
wYear As Integer
wMonth As Integer
wDayOfWeek As Integer
wDay As Integer
wHour As Integer
wMinute As Integer
wSecond As Integer
wMilliseconds As Integer
End Type

Private Type SECURITY_ATTRIBUTES
    nLength As Long
    lpSecurityDescriptor As Long
    bInheritHandle As Long
End Type

Private Const GENERIC_READ = &H80000000
Private Const GENERIC_WRITE = &H40000000
Private Const OPEN_EXISTING = 3
Private Const FILE_SHARE_READ = &H1
Private Const FILE_SHARE_WRITE = &H2
Private Const FILE_SHARE_DELETE As Long = &H4
Private Const FILE_FLAG_BACKUP_SEMANTICS = &H2000000

Private Declare Function CreateFile Lib "kernel32" Alias "CreateFileA" (ByVal lpFileName As String, ByVal dwDesiredAccess As Long, ByVal dwShareMode As Long, ByVal lpSecurityAttributes As Long, ByVal dwCreationDisposition As Long, ByVal dwFlagsAndAttributes As Long, ByVal hTemplateFile As Long) As Long
Private Declare Function SetFileTime Lib "kernel32" (ByVal hFile As Long, lpCreationTime As FILETIME, lpLastAccessTime As FILETIME, lpLastWriteTime As FILETIME) As Long
Private Declare Function SystemTimeToFileTime Lib "kernel32" (lpSystemTime As SYSTEMTIME, lpFileTime As FILETIME) As Long
Private Declare Function CloseHandle Lib "kernel32" (ByVal hObject As Long) As Long
Private Declare Function LocalFileTimeToFileTime Lib "kernel32" (lpLocalFileTime As FILETIME, lpFileTime As FILETIME) As Long
Private Declare Function GetLastError Lib "kernel32" () As Long
Private Declare Function GetFileTime Lib "kernel32" (ByVal hFile As Long, lpCreationTime As FILETIME, lpLastAccessTime As FILETIME, lpLastWriteTime As FILETIME) As Long
Private Declare Function FileTimeToLocalFileTime Lib "kernel32" (lpFileTime As FILETIME, lpLocalFileTime As FILETIME) As Long
Private Declare Function FileTimeToSystemTime Lib "kernel32" (lpFileTime As FILETIME, lpSystemTime As SYSTEMTIME) As Long

Public Function AdjustFolderTime(strFilePath As String, WriteFileDate As Date, CreateFileDate As Date, AccessFileDate As Date) As Long
    Dim NewWriteDate As Date, NewCreateDate As Date, NewAccessDate As Date, lngHandle As Long
    
    Dim udtWriteTime As FILETIME
    Dim udtCreateTime As FILETIME
    Dim udtAccessTime As FILETIME
    
    Dim udtSysCreateTime As SYSTEMTIME
    Dim udtSysAccessTime As SYSTEMTIME
    Dim udtSysWriteTime As SYSTEMTIME
    
    Dim udtLocalCreateTime As FILETIME
    Dim udtLocalAccessTime As FILETIME
    Dim udtLocalWriteTime As FILETIME
    
    Dim Security As SECURITY_ATTRIBUTES
    
    NewCreateDate = Format(CreateFileDate, "MM-DD-YY HH:mm:SS")
    NewAccessDate = Format(AccessFileDate, "MM-DD-YY HH:mm:SS")
    NewWriteDate = Format(WriteFileDate, "MM-DD-YY HH:mm:SS")
    
    With udtSysCreateTime
    .wYear = Year(NewCreateDate)
    .wMonth = Month(NewCreateDate)
    .wDay = Day(NewCreateDate)
    .wDayOfWeek = Weekday(NewCreateDate) - 1
    .wHour = Hour(NewCreateDate)
    .wMinute = Minute(NewCreateDate)
    .wSecond = Second(NewCreateDate)
    .wMilliseconds = 0
    End With
    
    With udtSysAccessTime
    .wYear = Year(NewAccessDate)
    .wMonth = Month(NewAccessDate)
    .wDay = Day(NewAccessDate)
    .wDayOfWeek = Weekday(NewAccessDate) - 1
    .wHour = Hour(NewAccessDate)
    .wMinute = Minute(NewAccessDate)
    .wSecond = Second(NewAccessDate)
    .wMilliseconds = 0
    End With
    
    With udtSysWriteTime
    .wYear = Year(NewWriteDate)
    .wMonth = Month(NewWriteDate)
    .wDay = Day(NewWriteDate)
    .wDayOfWeek = Weekday(NewWriteDate) - 1
    .wHour = Hour(NewWriteDate)
    .wMinute = Minute(NewWriteDate)
    .wSecond = Second(NewWriteDate)
    .wMilliseconds = 0
    End With
    
    Dim ret As Long
    ret = SystemTimeToFileTime(udtSysCreateTime, udtLocalCreateTime)
    If ret <> 1 Then Err.Raise GetLastError
    ret = LocalFileTimeToFileTime(udtLocalCreateTime, udtCreateTime)
    If ret <> 1 Then Err.Raise GetLastError
    
    ret = SystemTimeToFileTime(udtSysAccessTime, udtLocalAccessTime)
    If ret <> 1 Then Err.Raise GetLastError
    ret = LocalFileTimeToFileTime(udtLocalAccessTime, udtAccessTime)
    If ret <> 1 Then Err.Raise GetLastError
    
    ret = SystemTimeToFileTime(udtSysWriteTime, udtLocalWriteTime)
    If ret <> 1 Then Err.Raise GetLastError
    ret = LocalFileTimeToFileTime(udtLocalWriteTime, udtWriteTime)
    If ret <> 1 Then Err.Raise GetLastError
       
    lngHandle = CreateFile(strFilePath, GENERIC_READ Or GENERIC_WRITE, FILE_SHARE_READ Or FILE_SHARE_DELETE, 0&, OPEN_EXISTING, FILE_FLAG_BACKUP_SEMANTICS, 0&)
    If lngHandle = -1 Then Err.Raise 53: Exit Function
    
    ' create, access, write
    ret = SetFileTime(lngHandle, udtCreateTime, udtAccessTime, udtWriteTime)

    CloseHandle lngHandle
    AdjustFolderTime = 1
    If ret <> 1 Then Err.Raise GetLastError
End Function

Public Function GetFolderCreationDate(strFilePath As String) As String
    Dim lngHandle As Long
    Dim FT_CREATE As FILETIME
    Dim FT_ACCESS As FILETIME
    Dim FT_WRITE As FILETIME
    lngHandle = CreateFile(strFilePath, GENERIC_READ Or GENERIC_WRITE, FILE_SHARE_READ Or FILE_SHARE_DELETE, 0&, OPEN_EXISTING, FILE_FLAG_BACKUP_SEMANTICS, 0&)
    If GetFileTime(lngHandle, FT_CREATE, FT_ACCESS, FT_WRITE) = 1 Then GetFolderCreationDate = GetFolderFileDateString(FT_CREATE)
    CloseHandle lngHandle
End Function

Private Function GetFolderFileDateString(ft As FILETIME) As String
    Dim ds As Single
    Dim ft_local As FILETIME
    Dim st As SYSTEMTIME
   
    If FileTimeToLocalFileTime(ft, ft_local) Then
        If FileTimeToSystemTime(ft_local, st) Then
            ds = DateSerial(st.wYear, st.wMonth, st.wDay)
            GetFolderFileDateString = FormatDateTime(ds, vbShortDate)
            End If
        End If
End Function

Public Function FolderExists(tmpFileName As String) As Boolean
    FolderExists = False
    On Error GoTo FolderExists_Abort
    If Len(Dir(tmpFileName, vbDirectory)) > 0 Then FolderExists = True
FolderExists_Abort:
    On Error GoTo 0
End Function

Public Function FindCaseFolder(tmpSurname As String, tmpForename As String, tmpURN As String, tmpCaseHearingFolder As String) As String
    Dim tmpDIRCase As String
    Dim tmpFound As Boolean
    Dim tmpDIRFullCase As String
    Dim tmpCorrectCase As String
    If Left(LCase(tmpForename), 3) = "mr " Or Left(LCase(tmpForename), 3) = "ms " Or Left(LCase(tmpForename), 5) = "miss " Or Left(LCase(tmpForename), 3) = "dr " Or Left(LCase(tmpForename), 4) = "mrs " Then
        tmpForename = Trim(Mid(tmpForename, InStr(tmpForename, " ")))
        End If
    On Error GoTo FindCaseFolder_Error
    ' Find the first valid case folder with a matching URN
    tmpDIRCase = Dir(Replace(tmpCaseHearingFolder & "\*" & tmpURN & "*", "\\", "\"), vbDirectory)
    If Len(tmpDIRCase) < 6 Then GoTo FindCaseFolder_Error
    Do While InStr(Right(tmpDIRCase, 5), ".") > 0
        tmpDIRCase = Dir()
    Loop
    If Len(tmpDIRCase) < 6 Then GoTo FindCaseFolder_Error
    tmpCorrectCase = tmpDIRCase
    ' Now try and find a second valid case number with the same URN
    tmpDIRCase = Dir()
    Do While InStr(Right(tmpDIRCase, 5), ".") > 0
        tmpDIRCase = Dir()
    Loop
    If Len(tmpDIRCase) = 0 Then
        ' One URN in the hearing folder
        FindCaseFolder = tmpCorrectCase
        Else
        ' Multiple URN's in the hearing folder
        If Len(tmpForename) = 0 Then
            tmpDIRFullCase = tmpSurname
            Else
            tmpDIRFullCase = tmpSurname & " " & tmpForename
            End If
        tmpFound = False
        Do
            tmpDIRCase = Dir(tmpCaseHearingFolder & "\*" & tmpURN & "*", vbDirectory)
            If Len(tmpDIRCase) < 6 Then GoTo FindCaseFolder_Error
            Do While InStr(Right(tmpDIRCase, 5), ".") > 0
                tmpDIRCase = Dir()
            Loop
            Do
                If UCase(Left(tmpDIRCase, Len(tmpDIRFullCase))) = UCase(tmpDIRFullCase) Then tmpFound = True: Exit Do
                tmpDIRCase = Dir()
                If Len(tmpDIRCase) < 6 Then Exit Do
                Do While InStr(Right(tmpDIRCase, 5), ".") > 0
                    tmpDIRCase = Dir()
                Loop
            Loop Until tmpDIRCase = ""
            If tmpFound = True Then Exit Do
            tmpDIRFullCase = Left(tmpDIRFullCase, Len(tmpDIRFullCase) - 1)
        Loop Until Len(tmpDIRFullCase) < 3
        If tmpFound = True Then FindCaseFolder = tmpDIRCase
        End If
    ' Now try to access something in the case folder to make sure we can read it
    If FindCaseFolder <> "" Then
        tmpDIRCase = Dir(tmpCaseHearingFolder & "\" & FindCaseFolder & "\*.*")
        End If
    On Error GoTo 0
    Exit Function
FindCaseFolder_Error:
    FindCaseFolder = ""
    On Error GoTo 0
End Function

Public Function MoveFolder(SourcePath As String, DestinationPath As String, TestMode As Boolean) As String
    Dim fso As Object
    Set fso = CreateObject("scripting.filesystemobject")
    If FolderExists(SourcePath) = False Then MoveFolder = "Source folder does not exist": Exit Function
    If FolderExists(DestinationPath) = True Then MoveFolder = "Destination folder already exists": Exit Function
    If TestMode = False Then
        On Error GoTo MoveFolder_Error
        fso.MoveFolder Source:=SourcePath, Destination:=DestinationPath
        On Error GoTo 0
        End If
    MoveFolder = "Success"
    Set fso = Nothing
    Exit Function
    
MoveFolder_Error:
    MoveFolder = "Folder move failed: " & Err.Description & vbLf & "Source: " & SourcePath & vbLf & "Destination: " & DestinationPath
    Err.Clear
    Set fso = Nothing
    Exit Function
End Function

Public Function CopyFolder(SourcePath As String, DestinationPath As String, TestMode As Boolean) As String
    Dim fso As Object
    Set fso = CreateObject("scripting.filesystemobject")
    If FolderExists(SourcePath) = False Then CopyFolder = "Source folder does not exist": Exit Function
    If FolderExists(DestinationPath) = True Then CopyFolder = "Destination folder already exists": Exit Function
    If TestMode = False Then
        On Error GoTo CopyFolder_Error
        fso.CopyFolder SourcePath, DestinationPath, True
        On Error GoTo 0
        End If
    CopyFolder = "Success"
    Exit Function
    
CopyFolder_Error:
    CopyFolder = "Folder copy failed: " & Err.Description & vbLf & "Source: " & SourcePath & vbLf & "Destination: " & DestinationPath
    Err.Clear
    Set fso = Nothing
    Exit Function
End Function
Attribute VB_Name = "modPopupMenu"
Option Explicit

' Required API declarations
Private Declare Function CreatePopupMenu Lib "user32" () As Long
Private Declare Function InsertMenuItem Lib "user32" Alias "InsertMenuItemA" (ByVal hMenu As Long, ByVal un As Long, ByVal bool As Boolean, ByRef lpcMenuItemInfo As MENUITEMINFO) As Long
Private Declare Function TrackPopupMenu Lib "user32" (ByVal hMenu As Long, ByVal wFlags As Long, ByVal x As Long, ByVal y As Long, ByVal nReserved As Long, ByVal hwnd As Long, lprc As RECT) As Long
Private Declare Function DestroyMenu Lib "user32" (ByVal hMenu As Long) As Long
Private Declare Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
Private Declare Function GetCursorPos Lib "user32" (lpPoint As POINTAPI) As Long

' Type required by TrackPopupMenu although this is ignored !!
Private Type RECT
        Left As Long
        Top As Long
        Right As Long
        Bottom As Long
End Type

' Type required by InsertMenuItem
Private Type MENUITEMINFO
    cbSize As Long
    fMask As Long
    fType As Long
    fState As Long
    wID As Long
    hSubMenu As Long
    hbmpChecked As Long
    hbmpUnchecked As Long
    dwItemData As Long
    dwTypeData As String
    cch As Long
End Type

' Type required by GetCursorPos
Private Type POINTAPI
        x As Long
        y As Long
End Type

' Constants required by TrackPopupMenu
Private Const TPM_LEFTALIGN = &H0&
Private Const TPM_TOPALIGN = &H0
Private Const TPM_RETURNCMD = &H100
Private Const TPM_RIGHTBUTTON = &H2&

' Constants required by MENUITEMINFO type
Private Const MIIM_STATE = &H1
Private Const MIIM_ID = &H2
Private Const MIIM_TYPE = &H10
Private Const MFT_STRING = &H0
Private Const MFT_SEPARATOR = &H800
Private Const MFS_DEFAULT = &H1000
Private Const MFS_ENABLED = &H0
Private Const MFS_GRAYED = &H1

' Contants defined by me for menu item IDs
Private Const ID_Cut = 101
Private Const ID_Copy = 102
Private Const ID_Paste = 103
Private Const ID_Delete = 104
Private Const ID_SelectAll = 105


' Variables declared at module level
Private FormCaption As String
Private Cut_Enabled As Long
Private Copy_Enabled As Long
Private Paste_Enabled As Long
Private Delete_Enabled As Long
Private SelectAll_Enabled As Long



Public Sub ShowPopup(oForm As UserForm, strCaption As String, x As Single, y As Single)

    Dim oControl As MSForms.TextBox
    Static click_flag As Long
    
    ' The following is required because the MouseDown event
    ' fires twice when right-clicked !!
    click_flag = click_flag + 1
        
    ' Do nothing on first firing of MouseDown event
    If (click_flag Mod 2 <> 0) Then Exit Sub
                
    ' Set object reference to the textboxthat was clicked
    Set oControl = oForm.ActiveControl
        
    ' If click is outside the textbox, do nothing
    If x > oControl.Width Or y > oControl.Height Or x < 0 Or y < 0 Then Exit Sub
    
    ' Retrieve caption of UserForm for use in FindWindow API
    FormCaption = strCaption
    
    ' Call routine that sets menu items as enabled/disabled
    Call EnableMenuItems(oForm)
    
    ' Call function that shows the menu and return the ID
    ' of the selected menu item. Subsequent action depends
    ' on the returned ID.
    Select Case GetSelection()
        Case ID_Cut
            oControl.Cut
        Case ID_Copy
            oControl.Copy
        Case ID_Paste
            oControl.Paste
        Case ID_Delete
            oControl.SelText = ""
        Case ID_SelectAll
            With oControl
                .SelStart = 0
                .SelLength = Len(oControl.Text)
            End With
    End Select

End Sub

Private Sub EnableMenuItems(oForm As UserForm)

    Dim oControl As MSForms.TextBox
    Dim oData As DataObject
    Dim testClipBoard As String
    
    On Error Resume Next
    
    ' Set object variable to clicked textbox
    Set oControl = oForm.ActiveControl
    
    ' Create DataObject to access the clipboard
    Set oData = New DataObject
    
    ' Enable Cut/Copy/Delete menu items if text selected
    ' in textbox
    If oControl.SelLength > 0 Then
        Cut_Enabled = MFS_ENABLED
        Copy_Enabled = MFS_ENABLED
        Delete_Enabled = MFS_ENABLED
    Else
        Cut_Enabled = MFS_GRAYED
        Copy_Enabled = MFS_GRAYED
        Delete_Enabled = MFS_GRAYED
    End If
    
    ' Enable SelectAll menu item if there is any text in textbox
    If Len(oControl.Text) > 0 Then
        SelectAll_Enabled = MFS_ENABLED
    Else
        SelectAll_Enabled = MFS_GRAYED
    End If
    
    ' Get data from clipbaord
    oData.GetFromClipboard
    
    ' Following line generates an error if there
    ' is no text in clipboard
    testClipBoard = oData.GetText

    ' If NO error (ie there is text in clipboard) then
    ' enable Paste menu item. Otherwise, diable it.
    If Err.Number = 0 Then
        Paste_Enabled = MFS_ENABLED
    Else
        Paste_Enabled = MFS_GRAYED
    End If
    
    ' Clear the error object
    Err.Clear
    
    ' Clean up object references
    Set oControl = Nothing
    Set oData = Nothing

End Sub

Private Function GetSelection() As Long

    Dim menu_hwnd As Long
    Dim form_hwnd As Long
    Dim oMenuItemInfo1 As MENUITEMINFO
    Dim oMenuItemInfo2 As MENUITEMINFO
    Dim oMenuItemInfo3 As MENUITEMINFO
    Dim oMenuItemInfo4 As MENUITEMINFO
    Dim oMenuItemInfo5 As MENUITEMINFO
    Dim oMenuItemInfo6 As MENUITEMINFO
    Dim oRect As RECT
    Dim oPointAPI As POINTAPI
    
    ' Find hwnd of UserForm - note different classname
    ' Word 97 vs Word2000
    #If VBA6 Then
        form_hwnd = FindWindow("ThunderDFrame", FormCaption)
    #Else
        form_hwnd = FindWindow("ThunderXFrame", FormCaption)
    #End If

    ' Get current cursor position
    ' Menu will be drawn at this location
    GetCursorPos oPointAPI
        
    ' Create new popup menu
    menu_hwnd = CreatePopupMenu
    
    ' Intitialize MenuItemInfo structures for the 6
    ' menu items to be added
    
    ' Cut
    With oMenuItemInfo1
            .cbSize = Len(oMenuItemInfo1)
            .fMask = MIIM_STATE Or MIIM_ID Or MIIM_TYPE
            .fType = MFT_STRING
            .fState = Cut_Enabled
            .wID = ID_Cut
            .dwTypeData = "Cut"
            .cch = Len(.dwTypeData)
    End With
    
    ' Copy
    With oMenuItemInfo2
            .cbSize = Len(oMenuItemInfo2)
            .fMask = MIIM_STATE Or MIIM_ID Or MIIM_TYPE
            .fType = MFT_STRING
            .fState = Copy_Enabled
            .wID = ID_Copy
            .dwTypeData = "Copy"
            .cch = Len(.dwTypeData)
    End With
    
    ' Paste
    With oMenuItemInfo3
            .cbSize = Len(oMenuItemInfo3)
            .fMask = MIIM_STATE Or MIIM_ID Or MIIM_TYPE
            .fType = MFT_STRING
            .fState = Paste_Enabled
            .wID = ID_Paste
            .dwTypeData = "Paste"
            .cch = Len(.dwTypeData)
    End With
    
    ' Separator
    With oMenuItemInfo4
            .cbSize = Len(oMenuItemInfo4)
            .fMask = MIIM_TYPE
            .fType = MFT_SEPARATOR
    End With
    
    ' Delete
    With oMenuItemInfo5
            .cbSize = Len(oMenuItemInfo5)
            .fMask = MIIM_STATE Or MIIM_ID Or MIIM_TYPE
            .fType = MFT_STRING
            .fState = Delete_Enabled
            .wID = ID_Delete
            .dwTypeData = "Delete"
            .cch = Len(.dwTypeData)
    End With
    
    ' SelectAll
    With oMenuItemInfo6
            .cbSize = Len(oMenuItemInfo6)
            .fMask = MIIM_STATE Or MIIM_ID Or MIIM_TYPE
            .fType = MFT_STRING
            .fState = SelectAll_Enabled
            .wID = ID_SelectAll
            .dwTypeData = "Select All"
            .cch = Len(.dwTypeData)
    End With
    
    ' Add the 6 menu items
    InsertMenuItem menu_hwnd, 1, True, oMenuItemInfo1
    InsertMenuItem menu_hwnd, 2, True, oMenuItemInfo2
    InsertMenuItem menu_hwnd, 3, True, oMenuItemInfo3
    InsertMenuItem menu_hwnd, 4, True, oMenuItemInfo4
    InsertMenuItem menu_hwnd, 5, True, oMenuItemInfo5
    InsertMenuItem menu_hwnd, 6, True, oMenuItemInfo6
    
    ' Return the ID of the item selected by the user
    ' and set it the return value of the function
    GetSelection = TrackPopupMenu _
                    (menu_hwnd, _
                     TPM_LEFTALIGN Or TPM_TOPALIGN Or TPM_RETURNCMD Or TPM_RIGHTBUTTON, _
                     oPointAPI.x, oPointAPI.y, _
                     0, form_hwnd, oRect)
        
    ' Destroy the menu
    DestroyMenu menu_hwnd

End Function
Attribute VB_Name = "modPrintForm"
Public Sub PrintDisqForm(wapp As Object, tmpResultRow As Long, tmpLAResultRow As Long)
    Dim wdoc As Object
    Dim tmpDest As String
    Dim tmpDefAddress As String
    Dim tmpDOB As String
    Dim tmpURN As String
    Dim tmpOffences As String
    Dim tmpOffenceCount As Integer
    Dim tmpDefendantAddress() As String
    Dim tmpMaxDefAddress As Integer
    Dim tmpCount As Integer
    Dim tmpDate As String
    
    tmpDate = Format(Worksheets("Main").Range("C6"), "yyyy-mm-dd")
    
    If CDate(Worksheets("Results").Range(AdjDateColumn & tmpResultRow)) = False Then Exit Sub
    If Len(Worksheets("Results").Range(CaseFolderPathColumn & tmpResultRow)) = 0 Then Exit Sub
    tmpDest = Worksheets("Results").Range(CaseFolderPathColumn & tmpResultRow) & "\SJP Disqualification Notice (" & tmpDate & ").docx"
    On Error GoTo PrintDisqForm_Error
    If Worksheets("Splash").Range("A34") = "Yes" Then
        FileCopy "S:\Magistrates Courts\GMWORK\Shared\GM Live Files\Configuration\Other Files\Case Resulter Disqualification Form\SJP Disqualification Notice - Welsh.docx", tmpDest
        Else
        FileCopy "S:\Magistrates Courts\GMWORK\Shared\GM Live Files\Configuration\Other Files\Case Resulter Disqualification Form\SJP Disqualification Notice.docx", tmpDest
        End If

    ' Build Offences
    tmpOffences = ""
    tmpOffenceCount = tmpLAResultRow + 2
    Do While Worksheets("Main").Range("B" & tmpOffenceCount) <> ""
        If InStr(LCase(Worksheets("Main").Range(ActionColumn & tmpOffenceCount)), "adjo") > 0 And InStr(LCase(Worksheets("Main").Range(AdjReasonColumn & tmpOffenceCount)), "notice to") > 0 Then
            tmpOffences = tmpOffences & Worksheets("Main").Range("B" & tmpOffenceCount)
            If Not Worksheets("Main").Range("B" & tmpOffenceCount).Comment Is Nothing Then
                tmpOffences = tmpOffences & vbCrLf & Worksheets("Main").Range("B" & tmpOffenceCount).Comment.Text
                tmpOffences = tmpOffences & vbCrLf & vbCrLf
                Else
                tmpOffences = tmpOffences & vbCrLf & vbCrLf
                End If
            End If
        tmpOffenceCount = tmpOffenceCount + 1
    Loop
    On Error GoTo 0
    ' Check for amendments
    If Worksheets("Main").Range("H" & tmpLAResultRow + 1).Interior.Color = 13434879 Then
        'Address
        If Len(Worksheets("Main").Range("H" & tmpLAResultRow + 1)) > 5 Then
            tmpDefAddress = Worksheets("Main").Range("H" & tmpLAResultRow + 1)
            Else
            tmpDefAddress = Worksheets("Main").Range("H" & tmpLAResultRow)
            End If
        'DOB
        If IsDate(Worksheets("Main").Range(DOBColumn & tmpLAResultRow + 1)) = True Then
            tmpDOB = Worksheets("Main").Range(DOBColumn & tmpLAResultRow + 1)
            Else
            tmpDOB = Left(Worksheets("Main").Range(DOBColumn & tmpLAResultRow), 10)
            End If
        'URN
        If Len(Worksheets("Main").Range(URNColumn & tmpLAResultRow + 1)) > 2 Then
            tmpURN = Worksheets("Main").Range(URNColumn & tmpLAResultRow + 1)
            Else
            tmpURN = Worksheets("Main").Range(URNColumn & tmpLAResultRow)
            End If
        Else
        tmpDefAddress = Worksheets("Main").Range("H" & tmpLAResultRow)
        tmpDOB = Left(Worksheets("Main").Range(DOBColumn & tmpLAResultRow), 10)
        tmpURN = Worksheets("Main").Range(URNColumn & tmpLAResultRow)
        End If
    
    tmpDefAddress = Replace(tmpDefAddress, "  ", " ")
    tmpDefAddress = Replace(tmpDefAddress, " ,", ",")
    tmpDefAddress = Replace(tmpDefAddress, ", ", ",")
    tmpDefAddress = Replace(tmpDefAddress, ",", Chr$(13))
    tmpDefendantAddress = Split(tmpDefAddress, Chr$(13))
    
    Set wdoc = wapp.Documents.Open(tmpDest)
    wdoc.FormFields("txtCourtNameHeader1").Range.Text = Worksheets("Splash").Range("A23")
    wdoc.FormFields("txtCourtNameHeader2").Range.Text = Worksheets("Splash").Range("A24")
    wdoc.FormFields("txtCourtNameHeader3").Range.Text = Worksheets("Splash").Range("A25") & " " & Worksheets("Splash").Range("A26")
    wdoc.FormFields("txtCourtNameHeader4").Range.Text = Worksheets("Splash").Range("A27") & " " & Worksheets("Splash").Range("A28")
    wdoc.FormFields("txtCaseNumber1").Range.Text = Worksheets("Results").Range("B" & tmpResultRow)
    wdoc.FormFields("txtCaseNumber2").Range.Text = Worksheets("Results").Range("B" & tmpResultRow)
    wdoc.FormFields("txtCaseNumber3").Range.Text = Worksheets("Results").Range("B" & tmpResultRow)
    wdoc.FormFields("txtDOB1").Range.Text = tmpDOB
    wdoc.FormFields("txtDOB2").Range.Text = tmpDOB
    wdoc.FormFields("txtURN1").Range.Text = tmpURN
    wdoc.FormFields("txtURN2").Range.Text = tmpURN
    wdoc.FormFields("txtURN3").Range.Text = tmpURN
    wdoc.FormFields("txtDefendant1").Range.Text = StrConv(Worksheets("Main").Range("B" & tmpLAResultRow), vbProperCase)
    wdoc.FormFields("txtDefendant2").Range.Text = StrConv(Worksheets("Main").Range("B" & tmpLAResultRow), vbProperCase)
    
    tmpMaxDefAddress = UBound(tmpDefendantAddress)
    If tmpMaxDefAddress > 4 Then tmpMaxDefAddress = 4
    For tmpCount = 0 To tmpMaxDefAddress
        wdoc.FormFields("txtDefAdd" & tmpCount + 1).Range.Text = tmpDefendantAddress(tmpCount)
    Next tmpCount
    
    wdoc.FormFields("txtRespondDate1").Range.Text = CDate(Left(Worksheets("Results").Range(AdjDateColumn & tmpResultRow), 10)) - 7
    wdoc.FormFields("txtRespondDate2").Range.Text = CDate(Left(Worksheets("Results").Range(AdjDateColumn & tmpResultRow), 10)) - 7
    wdoc.FormFields("txtRespondDate3").Range.Text = CDate(Left(Worksheets("Results").Range(AdjDateColumn & tmpResultRow), 10)) - 7
    wdoc.FormFields("txtRespondDate4").Range.Text = CDate(Left(Worksheets("Results").Range(AdjDateColumn & tmpResultRow), 10)) - 7
    wdoc.FormFields("txtRespondDate5").Range.Text = CDate(Left(Worksheets("Results").Range(AdjDateColumn & tmpResultRow), 10)) - 7
    wdoc.FormFields("txtRespondDate6").Range.Text = CDate(Left(Worksheets("Results").Range(AdjDateColumn & tmpResultRow), 10)) - 7
    wdoc.FormFields("txtResponseEmail").Range.Text = Worksheets("Splash").Range("A31")
    
    If Worksheets("Splash").Range("A34") = "Yes" Then
        wdoc.FormFields("txtWRespondDate1").Range.Text = CDate(Left(Worksheets("Results").Range(AdjDateColumn & tmpResultRow), 10)) - 7
        wdoc.FormFields("txtWRespondDate2").Range.Text = CDate(Left(Worksheets("Results").Range(AdjDateColumn & tmpResultRow), 10)) - 7
        wdoc.FormFields("txtWRespondDate3").Range.Text = CDate(Left(Worksheets("Results").Range(AdjDateColumn & tmpResultRow), 10)) - 7
        wdoc.FormFields("txtWRespondDate4").Range.Text = CDate(Left(Worksheets("Results").Range(AdjDateColumn & tmpResultRow), 10)) - 7
        wdoc.FormFields("txtWRespondDate5").Range.Text = CDate(Left(Worksheets("Results").Range(AdjDateColumn & tmpResultRow), 10)) - 7
        wdoc.FormFields("txtWRespondDate6").Range.Text = CDate(Left(Worksheets("Results").Range(AdjDateColumn & tmpResultRow), 10)) - 7
        wdoc.FormFields("txtWResponseEmail").Range.Text = Worksheets("Splash").Range("A31")
        End If
    
    wdoc.FormFields("txtJC").Range.Text = Worksheets("Splash").Range("A33")
    wdoc.FormFields("txtOffences").Range.Text = tmpOffences
    wdoc.FormFields("txtSJPEmail").Range.Text = Worksheets("Splash").Range("A31")
    wdoc.FormFields("txtCTName1").Range.Text = Worksheets("Splash").Range("A23")
    wdoc.FormFields("txtCTAddress1").Range.Text = Worksheets("Splash").Range("A24") & vbCr & Worksheets("Splash").Range("A25") & vbCr & Worksheets("Splash").Range("A26") & vbCr & Worksheets("Splash").Range("A27") & vbCr & Worksheets("Splash").Range("A28")
    wdoc.FormFields("txtDeffAddress1").Range.Text = tmpDefAddress
    wdoc.FormFields("txtGender").Range.Text = ""
    wdoc.Sections(1).footers.Item(1).Range.Text = "Date: " & Date
    wdoc.Save
    wdoc.PrintOut
    wdoc.Close SaveChanges:=False
    Set wdoc = Nothing
    DoEvents
    Exit Sub
    
PrintDisqForm_Error:
    MsgBox Err.Description
    Err.Clear
    On Error GoTo 0
End Sub

Attribute VB_Name = "modResultHistory"
Public Sub UpdateResultHistory(tmpDefendantRow As Long)
    Dim tmpCaseHistoryFile As String
    tmpCaseHistoryFile = Worksheets("Main").Range(CaseFolderPathColumn & tmpDefendantRow) & "\ResultHistory.dat"
    If FileExists(tmpCaseHistoryFile) = True Then
        If DoesHearingAlreadyExist(tmpCaseHistoryFile) = 0 Then
            Call AppendResultHistoryFile(tmpCaseHistoryFile, tmpDefendantRow)
            SetAttr tmpCaseHistoryFile, vbReadOnly + vbHidden
            End If
        Else
        Call CreateResultHistoryFile(tmpCaseHistoryFile, tmpDefendantRow)
        SetAttr tmpCaseHistoryFile, vbReadOnly + vbHidden
        End If
End Sub

Private Function AppendResultHistoryFile(tmpCaseHistoryFile As String, tmpDefendantRow As Long) As Boolean
    Dim tmpOldHistoryFile As String
    Dim tmpDataline As String
    tmpOldHistoryFile = Worksheets("Main").Range(CaseFolderPathColumn & tmpDefendantRow) & "\ResultHistory_Old.dat"
    Name tmpCaseHistoryFile As tmpOldHistoryFile
    Call CreateResultHistoryFile(tmpCaseHistoryFile, tmpDefendantRow)
    Open tmpCaseHistoryFile For Append As #4
    Open tmpOldHistoryFile For Input As #2
    Do Until EOF(2)
        Line Input #2, tmpDataline
        Print #4, tmpDataline
    Loop
    Close 2
    Close 4
    SetAttr tmpOldHistoryFile, vbNormal
    Kill tmpOldHistoryFile
    
End Function

Private Function CreateResultHistoryFile(tmpCaseHistoryFile As String, tmpDefendantRow As Long) As Boolean
    Dim tmpOffenceRow As Long
    tmpOffenceRow = tmpDefendantRow + 3
    ' Create a New Result History File
    Open tmpCaseHistoryFile For Output As #4
    With Worksheets("Main")
    If Range("B" & tmpOffenceRow) = "Offence" Then tmpOffenceRow = tmpOffenceRow + 1
        ' Header Details
        Print #4, "Court Name                  : " & Range("C5")
        Print #4, "Prosecutor Name             : " & Range("M6")
        Print #4, "Prosecutor Type             : " & .txtProsecutorType
        Print #4, "Date of Hearing             : " & Range("C6")
        Print #4, "Court Room                  : " & Range("C8")
        Print #4, "Session Start Time          : " & Format(Range("C7"), "hh:mm")
        Print #4, "Session End Time            : " & Format(Range("C9"), "hh:mm")
        Print #4, "Legal Adviser               : " & Range("G6")
        Print #4, "Magistrate 1                : " & Range("G7")
        Print #4, "Magistrate 2                : " & Range("G8")
        Print #4, "Magistrate 3                : " & Range("G9")
        ' Case Details
        Print #4, "Defendant                   : " & Range("B" & tmpDefendantRow + 1)
        Print #4, "URN                         : " & Range(URNColumn & tmpDefendantRow + 1)
        Print #4, "DOB                         : " & Range(DOBColumn & tmpDefendantRow + 1)
        Print #4, "Address                     : " & Range("H" & tmpDefendantRow + 1)
        Print #4, "Solicitor                   : " & Range("R" & tmpDefendantRow + 1)
        Print #4, "Case Number                 : " & Range("S" & tmpDefendantRow + 1)
        If Range("B" & tmpDefendantRow + 2) <> "Offence" Then
            Print #4, "Amended Defendant           : " & Range("B" & tmpDefendantRow + 2)
            Print #4, "Amended URN                 : " & Range(URNColumn & tmpDefendantRow + 2)
            Print #4, "Amended DOB                 : " & Range(DOBColumn & tmpDefendantRow + 2)
            Print #4, "Amended Address             : " & Range("H" & tmpDefendantRow + 2)
            Print #4, "Amended Solicitor           : " & Range("R" & tmpDefendantRow + 2)
            End If
        ' Offence Detail
        Do
            Select Case .txtProsecutorType
                Case Is = "Traffic", "Traffic (SJP)"
                    Print #4, String(100, "-")
                    Print #4, "Offence Shorttext           : " & Range("B" & tmpOffenceRow)
                    Print #4, "Appears                     : " & Range("D" & tmpOffenceRow)
                    Print #4, "Legal Adviser Powers        : " & Range("E" & tmpOffenceRow)
                    Print #4, "Plea                        : " & Range("F" & tmpOffenceRow)
                    Print #4, "Action                      : " & Range("G" & tmpOffenceRow)
                    Print #4, "Guilty Plea Credit          : " & Range("H" & tmpOffenceRow)
                    Print #4, "Income                      : " & Range("I" & tmpOffenceRow)
                    Print #4, "Band                        : " & Range("J" & tmpOffenceRow)
                    Print #4, "Fine                        : " & Range("K" & tmpOffenceRow)
                    Print #4, "Compensation                : " & Range("L" & tmpOffenceRow)
                    Print #4, "FCosts                      : " & Range("M" & tmpOffenceRow)
                    Print #4, "Victim Surcharge            : " & Range("N" & tmpOffenceRow)
                    Print #4, "Licence Endorsed PP         : " & Range("O" & tmpOffenceRow)
                    Print #4, "Collection Order            : " & Range("P" & tmpOffenceRow)
                    Print #4, "Pay By Date                 : " & Range("Q" & tmpOffenceRow)
                    Print #4, "Adjourn Reason              : " & Range("R" & tmpOffenceRow)
                    Print #4, "Adjourn Date                : " & Range("S" & tmpOffenceRow)
                    Print #4, "Disq EH                     : " & Range("T" & tmpOffenceRow)
                    Print #4, "Notes                      : " & Range("U" & tmpOffenceRow)
                
                Case Else
                    Print #4, String(150, "-")
                    Print #4, "Offence Shorttext           : " & Range("B" & tmpOffenceRow)
                    Print #4, "Appears                     : " & Range("D" & tmpOffenceRow)
                    Print #4, "Legal Adviser Powers        : " & Range("E" & tmpOffenceRow)
                    Print #4, "Plea                        : " & Range("F" & tmpOffenceRow)
                    Print #4, "Action                      : " & Range("G" & tmpOffenceRow)
                    Print #4, "Guilty Plea Credit          : " & Range("H" & tmpOffenceRow)
                    Print #4, "Income                      : " & Range("I" & tmpOffenceRow)
                    Print #4, "Band                        : " & Range("J" & tmpOffenceRow)
                    Print #4, "Fine                        : " & Range("K" & tmpOffenceRow)
                    Print #4, "Compensation or Bk Duty     : " & Range("L" & tmpOffenceRow)
                    Print #4, "FCosts                      : " & Range("M" & tmpOffenceRow)
                    Print #4, "Victim Surcharge            : " & Range("N" & tmpOffenceRow)
                    Print #4, "AEO/DBO                     : " & Range("O" & tmpOffenceRow)
                    Print #4, "Collection Order            : " & Range("P" & tmpOffenceRow)
                    Print #4, "Pay By Date                 : " & Range("Q" & tmpOffenceRow)
                    Print #4, "Adjourn Reason              : " & Range("R" & tmpOffenceRow)
                    Print #4, "Adjourn Date                : " & Range("S" & tmpOffenceRow)
                    Print #4, "Notes                       : " & Range("U" & tmpOffenceRow)
            End Select
            tmpOffenceRow = tmpOffenceRow + 1
        Loop Until Range("B" & tmpOffenceRow) = ""
        Print #4, String(150, "=")
    End With
    Close 4
End Function

Private Function DoesHearingAlreadyExist(tmpCaseHistoryFile As String) As Long
    Dim tmpDataline() As String
    Dim tmpMyData As String
    Dim i As Long
    Dim tmpDOH As String
    Dim tmpTOH As String
    Dim tmpCourtroom As Integer
    Dim tmpStartRow As Long
    DoesHearingAlreadyExist = 0
    
    Open tmpCaseHistoryFile For Binary As #4
    tmpMyData = Space$(LOF(4))
    Get #4, , tmpMyData
    Close #4
    tmpDataline() = Split(tmpMyData, vbCrLf)
    For i = 0 To UBound(tmpDataline)
        If Left(tmpDataline(i), 10) = "Court Name" Then tmpStartRow = i + 1
        If InStr(tmpDataline(i), "Date of Hearing") > 0 Then tmpDOH = Trim(Mid(tmpDataline(i), 31))
        If InStr(tmpDataline(i), "Session Start Time") > 0 Then tmpTOH = Trim(Mid(tmpDataline(i), 31))
        If InStr(tmpDataline(i), "Court Room") > 0 Then tmpCourtroom = Val(Trim(Mid(tmpDataline(i), 31)))
        If Left(tmpDataline(i), 10) = "==========" Then
            ' End of hearing check
            If tmpDOH = Range("C6") And tmpTOH = Format(Range("C7"), "hh:mm") And tmpCourtroom = Val(Range("C8")) Then DoesHearingAlreadyExist = tmpStartRow: Exit For
            End If
    Next i
End Function

Public Sub LoadResultHistory(tmpDefendantRow As Long)
    Dim tmpCaseHistoryFile As String
    tmpCaseHistoryFile = Worksheets("Main").Range(CaseFolderPathColumn & tmpDefendantRow) & "\ResultHistory.dat"
    If FileExists(tmpCaseHistoryFile) = False Then Call ConvertHistory(tmpDefendantRow)
    If FileExists(tmpCaseHistoryFile) = False Then Exit Sub
    Call LoadResultHistoryFields(tmpCaseHistoryFile, tmpDefendantRow)
End Sub

Public Sub ConvertHistory(tmpDefendantRow As Long)
    Dim tmpMostRecentResultFile As String
    tmpMostRecentResultFile = FindMostRecentResult(Worksheets("Main").Range(CaseFolderPathColumn & tmpDefendantRow) & "\Result On ????-??-??*.xl*")
    If tmpMostRecentResultFile <> "" Then
        Call CreateResultHistoryFileFromSubResult(Worksheets("Main").Range(CaseFolderPathColumn & tmpDefendantRow) & "\ResultHistory.dat", Worksheets("Main").Range(CaseFolderPathColumn & tmpDefendantRow) & "\" & tmpMostRecentResultFile)
        End If
End Sub

Private Function CreateResultHistoryFileFromSubResult(tmpCaseHistoryFile As String, tmpResultFile As String) As Boolean
    Dim tmpOffenceRow As Long
    Dim wb As Workbook
    Dim app As New Excel.Application
    Dim tmpDefendantRow As Long
    
    On Error GoTo CreateResultHistoryFileFromSubResult_Error
    tmpDefendantRow = 8
    tmpOffenceRow = tmpDefendantRow + 3
    ' Create a New Result History File
    Open tmpCaseHistoryFile For Output As #4
    
    app.Visible = False
    app.DisplayAlerts = False
    Set wb = app.Workbooks.Open(tmpResultFile)
    
    With wb.Worksheets("Result")
    If .Range("B" & tmpOffenceRow) = "Offence" Then tmpOffenceRow = tmpOffenceRow + 1
        ' Header Details
        Print #4, "Court Name                  : " & .Range("C2")
        Print #4, "Prosecutor Name             : " & .Range("M3")
        Print #4, "Prosecutor Type             : " & .Range("P4")
        Print #4, "Date of Hearing             : " & .Range("C3")
        Print #4, "Court Room                  : " & .Range("C5")
        Print #4, "Session Start Time          : " & Format(.Range("C4"), "hh:mm")
        Print #4, "Session End Time            : " & Format(.Range("C6"), "hh:mm")
        Print #4, "Legal Adviser               : " & .Range("G3")
        Print #4, "Magistrate 1                : " & .Range("G4")
        Print #4, "Magistrate 2                : " & .Range("G5")
        Print #4, "Magistrate 3                : " & .Range("G6")
        ' Case Details
        Print #4, "Defendant                   : " & .Range("B" & tmpDefendantRow + 1)
        Print #4, "URN                         : " & .Range(URNColumn & tmpDefendantRow + 1)
        Print #4, "DOB                         : " & .Range(DOBColumn & tmpDefendantRow + 1)
        Print #4, "Address                     : " & .Range("H" & tmpDefendantRow + 1)
        Print #4, "Solicitor                   : " & .Range("R" & tmpDefendantRow + 1)
        Print #4, "Case Number                 : " & .Range("S" & tmpDefendantRow + 1)
        If .Range("B" & tmpDefendantRow + 2) <> "Offence" Then
            Print #4, "Amended Defendant           : " & .Range("B" & tmpDefendantRow + 2)
            Print #4, "Amended URN                 : " & .Range(URNColumn & tmpDefendantRow + 2)
            Print #4, "Amended DOB                 : " & .Range(DOBColumn & tmpDefendantRow + 2)
            Print #4, "Amended Address             : " & .Range("H" & tmpDefendantRow + 2)
            Print #4, "Amended Solicitor           : " & .Range("R" & tmpDefendantRow + 2)
            End If
        ' Offence Detail
        Do
            Select Case .Range("M3")
                Case Is = "Traffic", "Traffic (SJP)"
                    Print #4, String(100, "-")
                    Print #4, "Offence Shorttext           : " & .Range("B" & tmpOffenceRow)
                    Print #4, "Appears                     : " & .Range("D" & tmpOffenceRow)
                    Print #4, "Legal Adviser Powers        : " & .Range("E" & tmpOffenceRow)
                    Print #4, "Plea                        : " & .Range("F" & tmpOffenceRow)
                    Print #4, "Action                      : " & .Range("G" & tmpOffenceRow)
                    Print #4, "Guilty Plea Credit          : " & .Range("H" & tmpOffenceRow)
                    Print #4, "Income                      : " & .Range("I" & tmpOffenceRow)
                    Print #4, "Band                        : " & .Range("J" & tmpOffenceRow)
                    Print #4, "Fine                        : " & .Range("K" & tmpOffenceRow)
                    Print #4, "Compensation or Bk Duty     : " & .Range("L" & tmpOffenceRow)
                    Print #4, "FCosts                      : " & .Range("M" & tmpOffenceRow)
                    Print #4, "Victim Surcharge            : " & .Range("N" & tmpOffenceRow)
                    Print #4, "Licence Endorsed PP         : " & .Range("O" & tmpOffenceRow)
                    Print #4, "Collection Order            : " & .Range("P" & tmpOffenceRow)
                    Print #4, "Pay By Date                 : " & .Range("Q" & tmpOffenceRow)
                    Print #4, "Adjourn Reason              : " & .Range("R" & tmpOffenceRow)
                    Print #4, "Adjourn Date                : " & .Range("S" & tmpOffenceRow)
                    Print #4, "Disq EH                     : " & .Range("T" & tmpOffenceRow)
                    Print #4, "Notes                      : " & .Range("U" & tmpOffenceRow)
                
                Case Else
                    Print #4, String(150, "-")
                    Print #4, "Offence Shorttext           : " & .Range("B" & tmpOffenceRow)
                    Print #4, "Appears                     : " & .Range("D" & tmpOffenceRow)
                    Print #4, "Legal Adviser Powers        : " & .Range("E" & tmpOffenceRow)
                    Print #4, "Plea                        : " & .Range("F" & tmpOffenceRow)
                    Print #4, "Action                      : " & .Range("G" & tmpOffenceRow)
                    Print #4, "Guilty Plea Credit          : " & .Range("H" & tmpOffenceRow)
                    Print #4, "Income                      : " & .Range("I" & tmpOffenceRow)
                    Print #4, "Band                        : " & .Range("J" & tmpOffenceRow)
                    Print #4, "Fine                        : " & .Range("K" & tmpOffenceRow)
                    Print #4, "Compensation                : " & .Range("L" & tmpOffenceRow)
                    Print #4, "FCosts                      : " & .Range("M" & tmpOffenceRow)
                    Print #4, "Victim Surcharge            : " & .Range("N" & tmpOffenceRow)
                    Print #4, "AEO/DBO                     : " & .Range("O" & tmpOffenceRow)
                    Print #4, "Collection Order            : " & .Range("P" & tmpOffenceRow)
                    Print #4, "Pay By Date                 : " & .Range("Q" & tmpOffenceRow)
                    Print #4, "Adjourn Reason              : " & .Range("R" & tmpOffenceRow)
                    Print #4, "Adjourn Date                : " & .Range("S" & tmpOffenceRow)
                    Print #4, "Notes                       : " & .Range("U" & tmpOffenceRow)
            End Select
            tmpOffenceRow = tmpOffenceRow + 1
        Loop Until .Range("B" & tmpOffenceRow) = ""
        Print #4, String(150, "=")
    End With
    Close 4
    wb.Close SaveChanges:=No
    app.Quit
    Set wb = Nothing
    Set app = Nothing
    On Error GoTo 0
    Exit Function
    
CreateResultHistoryFileFromSubResult_Error:
    Close 4
    On Error GoTo 0
    On Error Resume Next
    wb.Close SaveChanges:=No
    app.Quit
    Set wb = Nothing
    Set app = Nothing
    On Error GoTo 0
End Function

Private Sub LoadResultHistoryFields(tmpCaseHistoryFile As String, tmpDefendantRow As Long)
    Dim tmpOffenceRow As Long
    Dim tmpMaxOffences As Long
    Dim tmpOffenceText(99) As String
    Dim tmpAction(99) As String
    Dim tmpPlea(99) As String
    Dim tmpIncome(99) As String
    Dim tmpDOH As String
    Dim tmpFirstDOH As String
    Dim i As Integer
    On Error GoTo LoadResultHistoryFields_Error
    ' Cycle through the last result and pull in all the fields for each offence
    Close 4
    Open tmpCaseHistoryFile For Input Shared As #4
    Do Until EOF(4)
        Line Input #4, tmpDataline
        If Left(tmpDataline, 10) = "==========" Then Exit Do
        If Left(tmpDataline, 15) = "Date of Hearing" Then tmpDOH = Trim(Mid(tmpDataline, 31))
        If InStr(tmpDataline, "Offence Shorttext") > 0 Then
            tmpOffenceRow = Val(Trim(Mid(tmpDataline, 31)))
            If tmpMaxOffences < tmpOffenceRow Then tmpMaxOffences = tmpOffenceRow
            tmpOffenceText(tmpOffenceRow) = Trim(Mid(tmpDataline, 31))
            End If
        If Left(tmpDataline, 6) = "Action" Then tmpAction(tmpOffenceRow) = Trim(Mid(tmpDataline, 31))
        If Left(tmpDataline, 4) = "Plea" Then tmpPlea(tmpOffenceRow) = Trim(Mid(tmpDataline, 31))
        If Left(tmpDataline, 6) = "Income" Then tmpIncome(tmpOffenceRow) = Trim(Mid(tmpDataline, 31))
    Loop
    Close 4
    ' Get the first date of hearing.
    Open tmpCaseHistoryFile For Input Shared As #4
    Do Until EOF(4)
        Line Input #4, tmpDataline
        If Left(tmpDataline, 15) = "Date of Hearing" Then tmpFirstDOH = Trim(Mid(tmpDataline, 31))
    Loop
    Close 4

    tmpOffenceRow = tmpDefendantRow + 3
    If Range("B" & tmpDefendantRow + 3) = "Offence" Then tmpOffenceRow = tmpOffenceRow + 1
    With Worksheets("Main")
        Do Until Range("B" & tmpOffenceRow) = ""
            For i = 1 To tmpMaxOffences
                ' If the offence numbers match then...
                If i = Val(.Range("B" & tmpOffenceRow)) Then
                    If Left(tmpPlea(i), 6) = "PIA On" Then
                        .Range(PleaColumn & tmpOffenceRow) = "PIA On " & tmpFirstDOH
                        End If
                    ' Get the last proved in absence date
                    If Left(tmpAction(i), 13) = "Adjourned PIA" Then
                        .Range(PleaColumn & tmpOffenceRow) = "PIA On " & tmpDOH
                        .Range(OriginalPleaColumn & tmpOffenceRow) = "PIA On " & tmpDOH
                        .Range(IncomeColumn & tmpOffenceRow) = Worksheets("Main").Range("S3")
                        End If
                    ' Get any previous guilty plea
                    If Left(tmpAction(i), 3) = "Adj" And Left(tmpAction(i), 13) <> "Adjourned PIA" Then
                        If Left(tmpPlea(i), 6) = "Guilty" Then
                            .Range(PleaColumn & tmpOffenceRow) = "Guilty Plea On " & tmpFirstDOH
                            .Range(OriginalPleaColumn & tmpOffenceRow) = "Guilty Plea On " & tmpFirstDOH
                            End If
                        End If
                    ' Get any previous not guilty plea (DVLA Only)
                    If .txtProsecutorType = "DVLA" Or .txtProsecutorType = "DVLA (SJP)" Then
                        If Left(tmpAction(i), 3) = "Adj" Then
                            If Left(tmpPlea(i), 10) = "Not Guilty" Then
                                .Range(PleaColumn & tmpOffenceRow) = "Not Guilty Plea On " & tmpFirstDOH
                                .Range(OriginalPleaColumn & tmpOffenceRow) = "Not Guilty Plea On " & tmpFirstDOH
                                End If
                            End If
                        End If
                    End If
            Next i
            tmpOffenceRow = tmpOffenceRow + 1
        Loop
    End With
    On Error GoTo 0
    Exit Sub
LoadResultHistoryFields_Error:
    Close 4
    On Error GoTo 0
End Sub

Public Function FindMostRecentResult(tmpCaseFolderDIR As String) As String
    Dim tmpResultFile As String
    Dim tmpMostRecentResultDate As String
    Dim tmpResultDate As String
    
    On Error GoTo FindMostRecentResult_Error
    tmpResultFile = Dir(tmpCaseFolderDIR)
    If tmpResultFile = "" Then GoTo FindMostRecentResult_Error
    Do
        If IsDate(Mid(tmpResultFile, 19, 2) & "/" & Mid(tmpResultFile, 16, 2) & "/" & Mid(tmpResultFile, 11, 4)) Then
            ' Get the result or amendment date from the file name
            tmpResultDate = ""
            If InStr(tmpResultFile, "Amended on") > 0 Then
                tmpResultDate = Trim(Mid(tmpResultFile, InStr(tmpResultFile, "Amended on ") + 11))
                If Len(tmpResultDate) > 18 Then
                    tmpResultDate = Mid(tmpResultDate, 9, 2) & "/" & Mid(tmpResultDate, 6, 2) & "/" & Left(tmpResultDate, 4) & " " & Mid(tmpResultDate, 12, 2) & ":" & Mid(tmpResultDate, 14, 2) & ":" & Mid(tmpResultDate, 16, 2)
                    If IsDate(tmpResultDate) = False Then tmpResultDate = ""
                    End If
                Else
                tmpResultDate = Mid(tmpResultFile, 19, 2) & "/" & Mid(tmpResultFile, 16, 2) & "/" & Mid(tmpResultFile, 11, 4) & " 00:00:00"
                If IsDate(tmpResultDate) = False Then tmpResultDate = ""
                End If
            If IsDate(tmpResultDate) = True Then
                If tmpMostRecentResultDate = "" Then
                    ' First result file found
                    tmpMostRecentResultDate = tmpResultDate
                    FindMostRecentResult = tmpResultFile
                    Else
                    ' Second or more result found
                    If CDate(tmpMostRecentResultDate) < CDate(tmpResultDate) Then
                        tmpMostRecentResultDate = tmpResultDate
                        FindMostRecentResult = tmpResultFile
                        End If
                    End If
                End If
            End If
FindMostRecentResult_0:
        tmpResultFile = Dir()
    Loop Until tmpResultFile = ""
    On Error GoTo 0
    Exit Function
    
FindMostRecentResult_Error:
    On Error GoTo 0
End Function




' InQuest injected base64 decoded content
' *'jP
' jCj)r
' )^N)

INQUEST-PP=macro
