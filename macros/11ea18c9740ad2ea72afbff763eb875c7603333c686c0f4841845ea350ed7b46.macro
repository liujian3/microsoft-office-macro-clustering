Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Modul1"
Public Sub UserForm1_anzeigen()
Dim blnIniFehlt As Boolean
    'Call UserForm_Initialize(blnIniFehlt)
    'If blnIniFehlt = False Then
        'Call ImStatusMasterAnzeige
        UserForm1.Show (vbModeless)
    'End If
End Sub

Attribute VB_Name = "Modul2"
Option Explicit
Function FindeZeile(wsReferenz As Worksheet, strSuchText As String) As Integer                 'Funktion sucht auf dem Tabellenblatt nach Subjekt
Dim Ergebnis As Range

Set Ergebnis = wsReferenz.Cells.Find(What:=strSuchText)

If Ergebnis Is Nothing Then
    FindeZeile = 0
Else
    FindeZeile = Ergebnis.Row                   'Ergebnis liefert Zeilen- u. Spalten-Nummer
End If
End Function
Function SucheText(intStartZeile As Integer, intLetzteZeile As Integer, strSpalte As String, strSuchText As String) As Integer
Dim intZaehler As Integer
Dim rngC As Range
Dim strErsteAdresse As String

intZaehler = 0
With Worksheets("St|fffd|ckliste").Range(strSpalte & intStartZeile & ":" & strSpalte & intLetzteZeile)
    Set rngC = .Find(strSuchText, LookIn:=xlValues)
    If Not rngC Is Nothing Then
        strErsteAdresse = rngC.Address
        Do
            intZaehler = intZaehler + 1
            Set rngC = .FindNext(rngC)
        Loop While Not rngC Is Nothing And rngC.Address <> strErsteAdresse
    End If
    SucheText = intZaehler
End With

End Function
Public Function GetDataClosedWB(strQuelldateipfad As String, _
strQuelltabelle As String, _
strQuellberich As String, _
strZielbereich As Range) As Boolean

Dim strQuelle As String
Dim lngZeilen As Long
Dim lngSpalten As Long
Dim strDatei As String
Dim strPfad As String

strDatei = CStr(Split(strQuelldateipfad, "\")(UBound(Split(strQuelldateipfad, "\"))))
strPfad = Left(strQuelldateipfad, InStrRev(strQuelldateipfad, "\", Len(strQuelldateipfad)))

On Error GoTo InvalidInput

strQuelle = "'" & strPfad & "[" & strDatei & "]" & strQuelltabelle & "'!" & Range( _
strQuellberich).Cells(1, 1).Address(0, 0)

Debug.Print strQuelle

lngZeilen = Range(strQuellberich).Rows.Count
lngSpalten = Range(strQuellberich).Columns.Count

With strZielbereich.Cells(1, 1).Resize(lngZeilen, lngSpalten)
    .Formula = "=IF(" & strQuelle & "="""",""""," & strQuelle & ")"
    '.Formula = "=" & strQuelle
    .Value = .Value
End With

GetDataClosedWB = True

Exit Function
InvalidInput:
    MsgBox "Die Quelldatei oder der Quellbereich ist ung|fffd|ltig!", vbExclamation, "Get data from closed Workbook"
    GetDataClosedWB = False

End Function

Attribute VB_Name = "Modul3"
Option Explicit
Public Sub HoleDaten()
' Die Funktion arbeitet mit der obigen GetDataClosedWB zusammen
Dim strQuelldateipfad As String
Dim strQuellblatt As String
Dim strQuellbereich As String
Dim Ziel As Range
Dim wsAblage As Worksheet

Set wsAblage = Worksheets("St|fffd|ckliste")
wsAblage.Range("A1:AA1000").Clear

With UserForm1
    If .TBDateipfad1.Text <> "" Then
        strQuelldateipfad = UserForm1.TBDateipfad1.Text
        strQuellblatt = "Sheet1"
        strQuellbereich = "B2:B1000"
        
        Set Ziel = wsAblage.Range("A11")
        
        If GetDataClosedWB(strQuelldateipfad, strQuellblatt, strQuellbereich, Ziel) Then
            MsgBox "Daten importiert"
        End If
    Else
        Exit Sub
    End If
End With
End Sub
Public Sub AuswertenDaten()
Dim varDaten As Variant
Dim wsSt As Worksheet
Dim wsReferenz As Worksheet
Dim intZeile As Integer
Dim intLetzteSpalte As Integer
Dim intLIndex As Integer
Dim intStartZeile As Integer
Dim intArtikel As Integer

intStartZeile = 10

Set wsSt = Worksheets("St|fffd|ckliste")
Set wsReferenz = Worksheets("Artikel Referenztabelle")

varDaten = wsSt.Range("A" & (intStartZeile + 1) & ":A" & Cells(Rows.Count, 1).End(xlUp).Row)
intLetzteSpalte = wsReferenz.UsedRange.SpecialCells(xlCellTypeLastCell).Column

wsReferenz.Range(wsReferenz.Cells(1, 1), wsReferenz.Cells(1, intLetzteSpalte)).Copy
wsSt.Range(wsSt.Cells(intStartZeile, 1), wsSt.Cells(intStartZeile, intLetzteSpalte)).PasteSpecial xlPasteValues

For intLIndex = 1 To UBound(varDaten)
    intZeile = FindeZeile(wsReferenz, CStr(varDaten(intLIndex, 1)))
    wsReferenz.Range(wsReferenz.Cells(intZeile, 1), wsReferenz.Cells(intZeile, intLetzteSpalte)).Copy
    wsSt.Range(wsSt.Cells(intLIndex + intStartZeile, 1), wsSt.Cells(intLIndex + intStartZeile, intLetzteSpalte)).PasteSpecial xlPasteValues
Next intLIndex

intArtikel = UBound(varDaten) + intStartZeile

wsSt.Cells(1, 1) = "ZUSAMMENFASSUNG"
wsSt.Cells(3, 1) = "Artikelanzahl"
wsSt.Cells(1, 3) = "Datum"
wsSt.Cells(1, 4) = Date
wsSt.Cells(3, 2) = intArtikel
wsSt.Cells(4, 1) = "Artikel mit RoHS Konformit|fffd|t"
wsSt.Cells(4, 2) = SucheText(intStartZeile + 1, intArtikel, "I", "RoHS")
wsSt.Cells(5, 1) = "und davon mit eingeschr|fffd|nkter RoHS Konformit|fffd|t"
wsSt.Cells(5, 2) = SucheText(intStartZeile + 1, intArtikel, "I", "~*")
wsSt.Cells(6, 1) = "Artikel mit REACH Konformit|fffd|t"
wsSt.Cells(6, 2) = SucheText(intStartZeile + 1, intArtikel, "J", "REACH")
wsSt.Cells(7, 1) = "und davon mit eingeschr|fffd|nkter REACH Konformit|fffd|t"
wsSt.Cells(7, 2) = SucheText(intStartZeile + 1, intArtikel, "J", "~*")
wsSt.Cells(8, 1) = "St|fffd|cklistenname"
wsSt.Cells(8, 2) = CStr(Split(UserForm1.TBDateipfad1.Text, "\")(UBound(Split(UserForm1.TBDateipfad1.Text, "\"))))

End Sub
Public Sub SpeichernDaten()
Dim wbNeu As Workbook
Dim wbAkt As Workbook
Dim wsTest As Worksheet
Dim strPfad As String
'Dim wsAktuell As Worksheet
Dim objExcel As Object

Debug.Print Application.StartupPath
   
On Error GoTo ErrorHandler:

Set objExcel = CreateObject("Excel.Application")
With objExcel
    .Visible = False
    .Workbooks.Add
    .ActiveWorkbook.SaveAs UserForm1.TBAblagepfad1.Text & "\RoHS&REACH_" & CStr(Split(UserForm1.TBDateipfad1.Text, "\")(UBound(Split(UserForm1.TBDateipfad1.Text, "\"))))
    .Quit
End With
Set objExcel = Nothing

Set wbAkt = Application.ThisWorkbook
Set wbNeu = Workbooks.Open(UserForm1.TBAblagepfad1.Text & "\RoHS&REACH_" & CStr(Split(UserForm1.TBDateipfad1.Text, "\")(UBound(Split(UserForm1.TBDateipfad1.Text, "\")))))

wbAkt.Sheets("St|fffd|ckliste").Copy Before:=wbNeu.Sheets(1)

wbNeu.Save
wbNeu.Close

Exit Sub
ErrorHandler:

MsgBox "Fehlernummer 403"

End Sub















Attribute VB_Name = "Tabelle6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{64605BA5-9662-4FDF-8605-CAA90030C899}{55CBD05F-EA79-410A-A4FF-A2BBCD09C0F0}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CBDurchsuchen1_Click()
Dim strFileToOpen As String

On Error GoTo ErrorHandler:

strFileToOpen = Application.GetOpenFilename _
(Title:="Please choose a file to open", _
FileFilter:="Excel Files *.xls* (*.xls*),")

If strFileToOpen Like "*.xls*" Then
    UserForm1.TBDateipfad1.Text = strFileToOpen
End If

Exit Sub
ErrorHandler:

MsgBox "Fehlernummer 301"

End Sub
Private Sub CBDurchsuchen2_Click()
Dim AppShell As Object
Dim BrowseDir As Variant
Dim Pfad As String

Set AppShell = CreateObject("Shell.Application")
Set BrowseDir = AppShell.BrowseForFolder(0, "Ordner ausw|fffd|hlen", &H1000, 17)

On Error GoTo ErrorHandler:

If BrowseDir Is Nothing Then Exit Sub
    
UserForm1.TBAblagepfad1.Text = CStr(BrowseDir.items().Item().Path)

Exit Sub
ErrorHandler:

MsgBox "Fehlernummer 302"

End Sub
Private Sub CBAnalyse1_Click()
Dim wbNeu As Workbook
Dim wsAktuell As Worksheet

On Error GoTo ErrorHandler:

If UserForm1.TBAblagepfad1.Text <> "" Then
    If UserForm1.TBDateipfad1.Text <> "" Then
        Call HoleDaten
        Call AuswertenDaten
    Else
    MsgBox "Sie haben keinen Dateipfad definiert!"
    Exit Sub
    End If
Else
    MsgBox "Sie haben keinen Ablagepfad definiert!"
End If

Call SpeichernDaten

Exit Sub
ErrorHandler:

MsgBox "Fehlernummer 303"

End Sub
Private Sub CBSchlie|fffd|en1_Click()
gblnAktiv = False
Unload UserForm1
End Sub



INQUEST-PP=macro
