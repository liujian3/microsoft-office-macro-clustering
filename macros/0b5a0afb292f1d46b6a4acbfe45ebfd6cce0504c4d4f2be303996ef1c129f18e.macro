Attribute VB_Name = "ClassAppEvents"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public WithEvents app As Application

Private Sub app_DocumentChange()
    On Error Resume Next
    
    CloseBln
    
    OpenBln
    Set objDocBln = ActiveDocument
FatalError:
    Err.Clear
End Sub

Private Sub CloseBln()
Dim strVal As String
    On Error GoTo FatalErrorClose
    strVal = ""
    
    'if old doc's bln was being displayed, then close it
    strVal = objDocBln.Variables(strPOST_WIZ_BLN).Value
    If strVal = "1" Then
        If fPostWizBlnOpen Then
            objPostWizBln.Close
            fPostWizBlnOpen = False
        End If
    End If
FatalErrorClose:
    Err.Clear
End Sub

Private Sub OpenBln()
Dim strVal As String

    On Error GoTo FatalErrorOpen
    strVal = ""
    strVal = ActiveDocument.Variables(strPOST_WIZ_BLN).Value

    'check to see if bln should be displayed for new doc.
    If (strVal = "1") Then
        objPostWizBln.Show
        fPostWizBlnOpen = True
    End If
    
FatalErrorOpen:
    Err.Clear
End Sub
Attribute VB_Name = "Common"
' --------------------------------------------------------------------------------------
' WORD 97 WIZARD
' Common VBA Module
' --------------------------------------------------------------------------------------

Option Explicit

' --------------------------------------------------------------------------------------
' CONSTANT DECLARATIONS

' Note use of trailing spaces and punctuation...

' Banter strings
Public Const strSTARTING        As String = "Der "
Public Const strSTARTING2       As String = " wird geladen..."
Public Const strAPPLYING        As String = "Formatvorlagen werden kopiert..."
Public Const strCREATING_DOC    As String = "Dokument wird erstellt..."
Public Const strSAVE_SETTINGS   As String = "Einstellungen werden gespeichert..."
Public Const strRST_SETTINGS    As String = "Einstellungen werden wiederhergestellt..."
Public Const strUPDATING_STYLE  As String = "Formatvorlagen werden kopiert..."

' Error messages
Public Const strERR_BAD_DOC         As String = "Der Assistent kann nicht im aktiven Dokument verwendet werden. Um den Assistenten zu verwenden, w|fffd|hlen Sie ""Neu"" im Men|fffd| ""Datei"" und w|fffd|hlen Sie den "
Public Const strERR_BAD_DOC2        As String = " aus."
Public Const strERR_INTERNAL        As String = "Der Assistent kann nicht fortfahren, da ein Fehler aufgetreten ist "
Public Const strERR_WIZ_NOT_FOUND   As String = "Der Assistent konnte nicht im ""User-Dot-Path"" gefunden werden."
Public Const strERR_STYLE_NOT_FOUND As String = "Der Assistent konnt die ben|fffd|tigte Datei "
Public Const strERR_STYLE_NOT_FOUND2 As String = " nicht finden. Diese Datei wird ben|fffd|tigt um das Dokument zu formatieren. Falls die Datei nicht installiert ist, f|fffd|hren Sie bitte das Setup erneut durch, und installieren Sie die Datei."
Public Const strERR_ADDR_BOOK       As String = "Fehler beim einf|fffd|gen eines Namens aus einem Adre|fffd|buch."
Public Const strERR_SEND_FAX        As String = "Der Assistent konnte dieses Dokument nicht per Fax versenden."
Public Const strERR_SEND_MAIL       As String = "Der Assistent konnte dieses Dokument nicht per E-Mail versenden."
Public Const strERR_AUTOTEXT_NOT_FOUND As String = "Word konnten einen AutoText nicht aus dem Assistenten einf|fffd|gen. Bitte f|fffd|hren Sie das Setup-Programm erneut aus und installieren Sie diesen Assistenten neu."
Public Const strERR_INIT_FORM       As String = "Word konnten den Eingabedialog des Assistenten nicht anzeigen. Bitten starten Sie den Assistenten erneut."
Public Const strERR_INIT_CALL_BACK  As String = " Word konnte die Auswahloptionen zum Ende des Assistenten nicht anzeigen. Bitte starten Sie den Assistenten erneut um die Auswahlm|fffd|glichkeiten zu sehen."

' Misc strings
Public Const strWIZ As String = ".wiz"  'common extension to a wizard file
Public Const strDOT As String = ".dot"  'extension to a template file

'the setting in which this wizard has been saved. If the wizard is saved with A4 settings then
'this constant should be set to A4
Public Const strWIZ_SAVED_AS As String = "Letter"

'the settings key for page size
Public Const strREG_PAGE_SIZE As String = "PageSize"
'to check if it is A4 and change the pagesize if the key's value is this string
Public Const strA4_SETTING As String = "A4"
' --------------------------------------------------------------------------------------
' ************     DO NOT LOCALIZE ANY CODE BEYOND THIS POINT  *************************
' --------------------------------------------------------------------------------------

'registry key under which to store individual wizard preference settings
Public Const strREG_SETTINGS_BASE_KEY As String = "HKEY_CURRENT_USER\Software\Microsoft\Office\8.0\Word\Wizards\"

Public Const strSPACE       As String = " "
Public Const strCOMMA       As String = ","
Public Const strSHP_MAP     As String = "shpMap"  'prefix to the names of the shapes in the navigation chart/map
Public Const strLBL_MAP     As String = "lblMap"  'prefix to the names of the labels in the navigation chart/map
Public Const strREG_ASSISTANT_HELP As String = "Assistant Help" 'registry entry to store local state of Assistant
                                                                'for this wizard
Public Const strREG_ASSISTANT_TIME_STAMP As String = "Time Stamp" 'registry to store the time stamp when the
                                                                  'local state of the wizard changed.

'COLOR constants used
Public Const COLOR_DISABLED As Long = &H404040  'used for disabled panel's label and shape
Public Const COLOR_DARKGREY As Long = &H808080  'used for visited panel's label and shape
Public Const COLOR_LIGHTGREY As Long = &HC0C0C0 'used for unvisited panel's label and shape
Public Const COLOR_RED      As Long = vbRed
Public Const COLOR_GREEN    As Long = vbGreen
Public Const COLOR_WHITE    As Long = vbWhite


' --------------------------------------------------------------------------------------
' VARIABLE DECLARATIONS

' Wizard Names And FileNames
Public strWizName As String
Public strWizLongName As String
Public strWizShortName As String

Public fSettingsRestored As Boolean
Public fSettingsSaved As Boolean

' Application Environment
Public objActiveRange   As Range     'current range
Public objWizTemplate   As Template  'doc's template i.e the wizard
Public iAlertsLevel      As Integer   'stores the initial alerts level

' Variables to store some environment values
Public strPathSeparator As String   ' Directory separator in a path
Public strTemplatePath As String    ' Path of the the wizard and corresponding templates

'current panel of the multipage control in the dialog
Public iCurrentPanel As Integer

' Registry location key
Public strRegSettingsKey As String

' Assistant
Public objAssistantBalloon  As Balloon  'help balloon displayed for each panel
Public fBalloonVisible      As Boolean  'true if the above balloon is visible
Public iLocalState          As Integer  'Local State of Assistant for passing to Office
Public lAssistantId         As Long     'assistant id obtained from StartWizard call
Public fExitTglEvent        As Boolean  'this is set to True, if we don't want the click
                                        'event for the toggle buttonto be executed when
                                        'we change its value

Public fWizardCallBack      As Boolean  'we set it to True in FReenterWizardPanel
                                        'since it is used only in JumpToPanel
                                        'to disable jumping to otherpanels, by clicking
                                        'on the shapes
Public fInitialAssistantState As Boolean  ' to go back to after exiting wizard
Public fAsstHelp As Boolean

'if the activedocument's papersize was changed then one of the two following
'variables will be set according to the paper size that is being set.
Public fChangeToA4 As Boolean
Public fChangeToLetter As Boolean

'Post wizard balloon options.
Public objPostWizBln As Balloon
Public objDocBln As Document
Public clsBln As New ClassAppEvents
Public fBlnInitialized As Boolean
Public fPostWizBlnOpen As Boolean

'variables storing the rectangle of the form to be avoided
'by the asst. and balloon
Public lFormTop As Long, lFormHeight As Long
Public lFormLeft As Long, lFormWidth As Long

' Wizard dialog form
Public formWizard As formWizDlg 'New formWizDlg

' General Purpose Utilities for Starting, Saving, and Restoring Wizards
' --------------------------------------------------------------------------------------
Public Sub StartWizard()
    On Error GoTo FatalError
  
    Application.ScreenUpdating = False
    
    ' Init Global Var
    fWizardCallBack = False
    fExitTglEvent = False
    fSettingsRestored = False
    fSettingsSaved = False
    lAssistantId = 0
  
    ' Identify Wizard
    InitWizardName (True)
    
    ' We're busy now
    StatusBar = strSTARTING & strWizName & strSTARTING2

    SetWizardEnvironment

    ' Locate the wizard template
    InitDocTemplate
    strTemplatePath = StrWizardPath

    ' Initialize the new document
    InitDoc
    
    ' Initialize form
    InitWizard (True)
    
    'remove any text which might written for indicating progress
    StatusBar = ""
    
    ' Connect to the Assistant
    InitWizardAssistant
    
    ' Bring up dialog
    System.Cursor = wdCursorNormal
    Application.ScreenUpdating = True
    
    formWizard.Show
    
    ResetWizardEnvironment (True)
    Exit Sub

FatalError:
    ReportError Err
End Sub  ' Main / StartWizard


Private Sub InitDocTemplate()
    ' Did user create a New Document or a New Template?
    On Error GoTo CreatingNewTemplate
    
    ' New Document
    Set objWizTemplate = ActiveDocument.AttachedTemplate
    Exit Sub

CreatingNewTemplate:
    ' New Template
    Set objWizTemplate = ActiveDocument
End Sub  ' InitDocTemplate


Private Function StrWizardPath() As String
    Dim strPath As String
    Dim strFileName As String
    Dim i As Integer
    Dim fFound As Boolean

    On Error GoTo FatalError
    
    fFound = True
    strPath = objWizTemplate.Path

    If (Len(strPath) = 0) Then
        ' New template based on Wizard
        ' Get location of templates - first look in UserTemplatesPath
        ' and then in Workgroup path
        i = 0
        fFound = False
        strPath = Application.Options.DefaultFilePath(wdUserTemplatesPath)
        
        While ((i < 2) And fFound = False)
            If (Len(strPath) <> 0) Then
                ' First try to find wizard with long filename
                WordBasic.FileFind SearchPath:=strPath, Name:=strWizLongName & strWIZ, SubDir:=1, MatchCase:=0
                If WordBasic.CountFoundFiles() = 0 Then
                    ' Try to find wizard with short filename
                    WordBasic.FileFind SearchPath:=strPath, Name:=strWizShortName & strWIZ, SubDir:=1, MatchCase:=0
                    If WordBasic.CountFoundFiles() <> 0 Then fFound = True
                Else
                    fFound = True
                End If
            End If
        
            i = i + 1
            strPath = Application.Options.DefaultFilePath(wdWorkgroupTemplatesPath)
        Wend
        
        If (fFound) Then ' Wizard was found, so save path
            strFileName = WordBasic.[FoundFileName$](1)
            strPath = WordBasic.[FileNameInfo$](strFileName, 5)
        End If
    End If

    If (fFound) Then
        strPathSeparator = Application.PathSeparator
        If Right$(strPath, 1) <> strPathSeparator Then strPath = strPath & strPathSeparator
        StrWizardPath = strPath
        Exit Function
    End If

LWizardMissing:
    DisplayErrorMsg strERR_WIZ_NOT_FOUND
    
FatalError:
    ReportError Err
End Function ' StrWizardPath

'sets the wizard environment
Private Sub SetWizardEnvironment()
    System.Cursor = wdCursorWait
    'set alert level to none, so that Word/VBA dont display display any
    'error messages by themselves
    iAlertsLevel = Application.DisplayAlerts
    Application.DisplayAlerts = wdAlertsNone
    'Disable Cancel key, to prevent ESC key from interrupting the macro.
    'it will still dismiss the Form though
    Application.EnableCancelKey = wdCancelDisabled
End Sub

'resets the environment to what it was before the wizard was executed
Sub ResetWizardEnvironment(fDummy As Boolean)
    System.Cursor = wdCursorNormal
    'remove any text which might written for indicating progress
    StatusBar = ""
    Application.ScreenUpdating = True
    ActiveWindow.View.Type = wdPageView
    Application.DisplayAlerts = iAlertsLevel
    Application.EnableCancelKey = wdCancelInterrupt
End Sub

'returns the value stored in registry key strId
Public Function StrFetchPref(strId As String) As String
    On Error GoTo LReturnNull
    
    StrFetchPref = System.PrivateProfileString("", strRegSettingsKey, strId)
    Exit Function
LReturnNull:
    StrFetchPref = ""
End Function

'stores strValue in registry key strId
Public Sub StorePref(strId As String, strValue As String)
    Dim strTemp As String

    ' If string is empty, store "~" as placeholder
    If (Len(strValue) = 0) Then
        strTemp = "~"
    Else
        strTemp = strValue
    End If
    
    System.PrivateProfileString("", strRegSettingsKey, strId) = strTemp
End Sub

'returns the string stored in strId. If empty, returns strDefault
Public Function StrRestorePref(strId As String, strDefault As String) As String
    Dim strTemp As String

    strTemp = StrFetchPref(strId)
    ' If length is 0, it wasn't in regsistry, so use default value
    If Len(strTemp) = 0 Then
        strTemp = strDefault
    ' "~" is a placeholder to allow returning empty strings
    ElseIf strTemp = "~" Then
        strTemp = ""
    End If
    
    StrRestorePref = strTemp
End Function

' stores iVal in registry key strId as a string
Public Sub StoreValPref(strId As String, iVal As Integer)
    StorePref strId, CStr(iVal)
End Sub

'returns the value stored in the key strId
'if invalid, returns iDefault
Public Function FRestorePref(strId As String, fDefault As Boolean) As Boolean

    Dim strVal As String

    strVal = StrFetchPref(strId)
    If Len(strVal) = 0 Then
        FRestorePref = fDefault
    Else
        FRestorePref = Val(strVal)
    End If
End Function


'returns the value stored in the key strId
'if invalid, returns iDefault
Public Function IRestorePref(strId As String, iDefault As Integer) As Integer
    Dim strVal As String

    strVal = StrFetchPref(strId)
    If Len(strVal) = 0 Then
        IRestorePref = iDefault
    Else
        IRestorePref = Val(strVal)
    End If
End Function


'main error reporting routine called for fatal errors in the wizard
'SHOULD NOT BE CALLED FOR POST-WIZARD ERRORS
Public Sub ReportError(ByVal ErrorCode As ErrObject)
    Dim lErrorCode As Long
    Dim strErrorMsg As String
    
    lErrorCode = ErrorCode.Number
    strErrorMsg = ErrorCode.Description
    
    'The next statement seems to reset the ErrorCode object,
    'even though it is a ByVal argument
    On Error Resume Next
    
    ResetWizardEnvironment (True)
    
    If fBalloonVisible Then objAssistantBalloon.Close
    If lErrorCode Then DisplayErrorMsg strErrorMsg
    If lAssistantId Then Assistant.EndWizard lAssistantId, False '2nd parameter is fSuccess
    
    If (Not (formWizard Is Nothing)) Then
        formWizard.Hide
        Unload formWizard
        Set formWizard = Nothing
    End If
    
    'ReportError is not called in post-wizard option errors.
    'So, always closing the doc.
    ActiveDocument.Close wdDoNotSaveChanges 'ActiveDocument assumed to be set
    
    'terminate the wizard
    End

End Sub ' ReportError

'initialises the new doc. that is getting created
Private Sub InitDoc()
    Dim fBadDoc As Integer
    
    On Error GoTo FatalError

    'chk if doc.path errors if path not present.
    fBadDoc = False
    If (Len(ActiveDocument.Path) <> 0) Then
        'doc has been saved before
        fBadDoc = True
    Else
        Set objActiveRange = ActiveDocument.Content
        'chk if range has anything other than a paragraph mark
        If (objActiveRange.End > objActiveRange.Start + 1) Then fBadDoc = True
    End If
        
    If (fBadDoc) Then
        DisplayErrorMsg strERR_BAD_DOC & strWizName & strERR_BAD_DOC2
        ResetWizardEnvironment (True)
        'terminate the wizard
        End
    End If
    
    objActiveRange.Collapse wdCollapseStart
    
    SetPageSize

    Exit Sub

FatalError:
    ReportError Err
End Sub  ' InitDoc

' --------------------------------------------------------------------------------------
' Assistant related functions
' --------------------------------------------------------------------------------------

'initialises the Assistant for the wizard
Private Sub InitWizardAssistant()
    Dim lPrivate As Long
    
    fBalloonVisible = False
    On Error GoTo FatalError
    
    ' Was Assistant visible, when wizard was started?
    fInitialAssistantState = Assistant.Visible
    
    ' What is the local state of Assistant for this wizard?
    'if user changed "Help for wizards" globally in the Assistant Options dlg,
    'Word will automatically update this to reflect the latest value.
    iLocalState = IRestorePref(strREG_ASSISTANT_HELP, msoWizardActInactive)
    
    'the form is shown centered on the app. -StartUpPosition = CenterOwner
    lFormHeight = formWizard.Height
    lFormWidth = formWizard.Width
    lFormTop = Application.Top + (Application.Height / 2) - (lFormHeight / 2)
    If (lFormTop < 0) Then lFormTop = 0
    lFormLeft = Application.Left + (Application.Width / 2) - (lFormWidth / 2)
    If (lFormLeft < 0) Then lFormLeft = 0

    lAssistantId = Assistant.StartWizard(iLocalState, "Common.fnHelpCallBack", lPrivate, _
                                    Top:=lFormTop, Left:=lFormLeft, _
                                    Bottom:=lFormTop + lFormHeight, _
                                    Right:=lFormLeft + lFormWidth)
    
    iLocalState = msoWizardActInactive
    If lAssistantId = 0 Then GoTo FatalError 'error with Assistant.Startwizard.
                                             'Assistant probably not installed
    
    ' Initialize Balloon
    Set objAssistantBalloon = Assistant.NewBalloon
    With objAssistantBalloon
        .Heading = strWizName
        .Mode = msoModeModeless
        .Button = msoButtonSetNone
        .Text = rgstrAssistantMsg(0)
    End With
    objAssistantBalloon.SetAvoidRectangle lFormLeft, lFormTop, lFormLeft + lFormWidth, lFormTop + lFormHeight
    If Assistant.BalloonError Then GoTo FatalError
    fAsstHelp = True
    Exit Sub
    
FatalError:
    fAsstHelp = False
    'since error occurred with assistant actions, let's disable Assistant button
    formWizard.tglAssistant.Enabled = False
    Err.Clear
End Sub

'this function called when user clicks on a button in the balloon put up by StartWizard or
'ActivateWizard.
Public Sub fnHelpCallBack(iHelp As Integer, lPrivate As Long)
    Select Case iHelp
        Case msoWizardMsgLocalStateOff:
            iLocalState = msoWizardActInactive
            'user doesn't want help anymore
            'if balloon is up,then close it
            If fBalloonVisible Then
                objAssistantBalloon.Close
                fBalloonVisible = False
            End If
            
            If (formWizard.tglAssistant.Value) Then
                fExitTglEvent = True
                formWizard.tglAssistant.Value = False
            End If
        Case msoWizardMsgShowHelp:
            iLocalState = msoWizardActActive
                        
            If (Not (formWizard.tglAssistant.Value)) Then
                fExitTglEvent = True
                formWizard.tglAssistant.Value = True
            End If
            
            If fBalloonVisible Then Exit Sub 'help balloon already up (should not occur, though)
            
            If fAsstHelp Then 'if no error in building help balloon
                objAssistantBalloon.Text = rgstrAssistantMsg(iCurrentPanel)
                objAssistantBalloon.Show
                If Assistant.BalloonError = msoBalloonErrorNone Then _
                    fBalloonVisible = True
            End If

    End Select
End Sub

Public Sub RestoreAssistant(fDummy As Boolean)
    On Error Resume Next
    Assistant.Visible = fInitialAssistantState
    Err.Clear
End Sub  ' RestoreAssistant


'displays error message in a balloon if Assistant is visible
'else uses a Msgbox
Public Sub DisplayErrorMsg(strErrMsg As String)
    Dim objErrBalloon As Balloon

    On Error GoTo DisplayMsgBox
    
    If lAssistantId Then
        If Assistant.Visible Then
            Set objErrBalloon = Assistant.NewBalloon
            With objErrBalloon
                .Mode = msoModeModal
                .Heading = strWizName
                .Text = strErrMsg
                .Button = msoButtonSetOK
                .Icon = msoIconAlert
            End With
            objErrBalloon.Show
            If Assistant.BalloonError = msoBalloonErrorNone Then
                Err.Clear
                Exit Sub
            End If
        End If
    End If
    
DisplayMsgBox:
    MsgBox strErrMsg, vbExclamation + vbOKOnly + vbApplicationModal, strWizName
    Err.Clear
    
End Sub
'if there exists a PageSize key with a value of A4 then change
'activedocument's page size to be A4
Private Sub SetPageSize()
    Dim strProperty As String
    
    fChangeToA4 = False
    fChangeToLetter = False
    On Error GoTo TryLetterPageSize
    strProperty = ""
    strProperty = System.PrivateProfileString("", strREG_SETTINGS_BASE_KEY, strREG_PAGE_SIZE)
    If strProperty = strA4_SETTING Then
        If strWIZ_SAVED_AS <> "A4" Then
            ActiveDocument.PageSetup.PaperSize = wdPaperA4
            fChangeToA4 = True
        End If
    End If

TryLetterPageSize:
    On Error GoTo -1 'resets Err and the error handler
    On Error GoTo ExitSub
    If Len(strProperty) Then
    'registry entry was not found. Wizard should have letter size settings
        If strWIZ_SAVED_AS = "A4" Then
            ActiveDocument.PageSetup.PaperSize = wdPaperLetter
            fChangeToLetter = True
        End If
    End If
ExitSub:
    Err.Clear
End Sub

' End Common Module
Attribute VB_Name = "ResumeMod"
' --------------------------------------------------------------------------------------
' WORD 97 WIZARD
' Resume Wizard Specific Code
' --------------------------------------------------------------------------------------
Option Explicit

' --------------------------------------------------------------------------------------
' CONSTANT DECLARATIONS

' The following Style names MUST match names in template files
Public Const strSTY_NAME            As String = "Name"
Public Const strSTY_ADDRESS1        As String = "Adresse 1"
Public Const strSTY_ADDRESS2        As String = "Adresse 2"
Public Const strSTY_COMPANY         As String = "Firmenname"
Public Const strSTY_OBJECTIVE       As String = "Angestrebte T|fffd|tigkeit"
Public Const strSTY_EDUCATION       As String = "Schule/Universit|fffd|t"
Public Const strSTY_JOB_TITLE       As String = "Berufsbezeichnung"
Public Const strSTY_ACHIEVEMENT     As String = "Ausbildung"
Public Const strSTY_SECTION_TITLE   As String = "Titel Abschnitt"
Public Const strSTY_PERSONAL_INFO   As String = "Pers|fffd|nliche Daten"

' Banter strings
Public Const strEMPTY_MACRO         As String = "EmptyMacro "

' Error Messages
Public Const strERR_NOTHING_SELECTED    As String = "Nothing selected from list to remove"

' Document Label Strings
Public Const strPERSONAL_INFO       As String = "Personal Information"
Public Const strMARITAL             As String = "Marital status:"
Public Const strNATIONALITY         As String = "Nationality:"
Public Const strAGE                 As String = "Age:"
Public Const strBIRTHPLACE          As String = "Place of Birth:"
Public Const strPARENTS             As String = "Parents:"
Public Const strTYPE_OBJECTIVE      As String = "  Type Objective Here  "
Public Const strCLICK_HERE          As String = "  Click here and enter information.  "
Public Const strCOMPANY_INST_NAME   As String = "  Company/Institution Name  "
Public Const strCITY_STATE          As String = "  City, State  "
Public Const strDEGREE_MAJOR        As String = "  Degree/Major  "
Public Const strJOB_TITLE           As String = "  Job Title  "
Public Const strDETAILS             As String = "  Details of position, award, or achievement.  "
Public Const strPHONE               As String = "Phone "
Public Const strFAX                 As String = "Fax "
Public Const strEMAIL               As String = "E-mail "

' Cover letter strings
Public Const strCOVER_LETTER_SALUTATION As String = "Dear [Name]"
Public Const strCOVER_LETTER_CLOSING    As String = "Sincerely,"
Public Const strCOVER_LETTER_BODY1 As String = "I am interested in working as a Senior Programmer for your organization. I am an expert programmer with over 10 years of experience to offer you. I enclose my resume as a first step in exploring the possibilities of employment with Costoso, Ltd."
Public Const strCOVER_LETTER_BODY2 As String = "My most recent experience was designing an automated billing system for a trade magazine publisher. I was responsible for the overall product design, including the user interface. In addition, I developed the first draft of the operator's guide."
Public Const strCOVER_LETTER_BODY3 As String = "As a Senior Programmer with your organization, I would bring a focus on quality and ease of use to your system development. Furthermore, I work well with others, and I am experienced in project management."
Public Const strCOVER_LETTER_BODY4 As String = "I would appreciate your keeping this inquiry confidential. I will call you in a few days to arrange an interview at a convenient time for you. Thank you for your consideration."
'default style setting for the letter specified in Pagedesign property
Public Const strCURRENT             As String = "(Original)"

'width of the columns of the table (the main table in which all text is placed)
Public Const strFIRST_COL_WIDTH As String = "1.5 in"
Public Const sFIRST_COL_WIDTH As Single = 1.5 * 72
Public Const strSECOND_COL_WIDTH As String = "4.63 in"
Public Const sSECOND_COL_WIDTH As Single = 4.63 * 72

' Wizard Identification Constants DO NOT CHANGE
Public Const wzRESUME               As Integer = 0
Public Const wzCV                   As Integer = 1
' Alternate Control Label Strings
' At present, the 'default mode' is Resume (text of label controls in form)
' The 'alternate mode' is CV.  These strings are substituted at run-time.
' All 'alternate' strings must be defined below, as well as iALTERNATE_WIZARD_MODE
Public Const iALTERNATE_WIZARD_MODE As Integer = wzCV
Public Const strALTERNATE_TITLE     As String = "CV Wizard"
Public Const strLBL_01              As String = "This wizard creates a CV that is tailored to your preferences."
Public Const strLBL_10              As String = "Which type of CV would you like to create?"
Public Const strOPT_ENTRY_LEVEL     As String = "Entry-level CV"
Public Const strOPT_CHRONOLOGICAL   As String = "Chronological CV"
Public Const strOPT_FUNCTIONAL      As String = "Functional CV"
Public Const strOPT_PROFESSIONAL    As String = "Professional CV"
Public Const strLBL_40              As String = "The CV style you've chosen usually includes these headings.  Select check boxes for headings you want."
Public Const strLBL_50              As String = "These headings are sometimes included in this type of CV.  Select check boxes for headings you want."
Public Const strLBL_60              As String = "Are there any additional headings you would like to add to your CV?"
Public Const strLBL_61              As String = "These are your CV headings."
Public Const strALT_WIZ_NAME2       As String = "CV Wizard"
Public Const strLBL_81              As String = "Those are all the answers the Wizard needs to create your CV!  Choose Finish to view the document."
'if the alternate label caption is to be used, this is where the last panel's label should be placed
Public Const sALT_LBLWIZNAME2_LEFT        As Single = 100
Public Const sALT_LBLWIZNAME2_WIDTH As Single = 165


' --------------------------------------------------------------------------------------
' DO NOT LOCALIZE ANY CODE BEYOND THIS POINT EXCEPT FOR InitWizardName and InitWizardStrings
' --------------------------------------------------------------------------------------

Public Const sA4_LEFT_MARGIN    As Single = 82.08
Public Const sA4_RIGHT_MARGIN    As Single = 81.36
Public Const sLETTER_MARGIN     As Single = 90

' Resume Mode Constants
Public Const wzENTRY                As Integer = 0
Public Const wzCHRON                As Integer = 1
Public Const wzFUNC                 As Integer = 2
Public Const wzPROF                 As Integer = 3
Public Const iMAX_STANDARD          As Integer = 8 ' Index of last standard heading chkbox
Public Const iMAX_OPTION            As Integer = 8 ' Index of last option heading chkbox

Public Const wzPROFESSIONAL         As Integer = 0
Public Const wzCONTEMPORARY         As Integer = 1
Public Const wzELEGANT              As Integer = 2
Public Const iLONG_NAME             As Integer = 0
Public Const iSHORT_NAME             As Integer = 1

' Category Style Constants
Public Const wzOBJECTIVE            As Single = 0
Public Const wzEDUCATION            As Single = 1
Public Const wzEXPERIENCE           As Single = 2
Public Const wzOTHER                As Single = 3
Public Const wzADDED                As Single = -1

' Personal Wizard  Document and Form Control Related Constants
Public Const wzPAGE_START           As Integer = 0
Public Const wzPAGE_STYLE           As Integer = 1
Public Const wzPAGE_TYPE            As Integer = 2
Public Const wzPAGE_ADDRESS         As Integer = 3
Public Const wzPAGE_PERSONAL        As Integer = 4
Public Const wzPAGE_STANDARD        As Integer = 5
Public Const wzPAGE_OPTION          As Integer = 6
Public Const wzPAGE_HEADING_LIST    As Integer = 7
Public Const wzPAGE_FINISH          As Integer = 8

Public Const iMAX_PANEL                     As Integer = 8 ' Number of last panel in MultiPage (First=0)
Public rgstrAssistantMsg(iMAX_PANEL + 1)    As String ' as many as there are states
Public Const iCALL_BACK_COUNT               As Integer = 5 ' Number of items in CallBackBalloon (First=1)
Public rgstrCallBackMsg(iCALL_BACK_COUNT)   As String
Public Const iMAX_CATEGORIES                As Integer = 22  ' Number of last category, used for heading selections (First=0)
Public rgstrCategory(iMAX_CATEGORIES)       As String
Public rgstrHotKey(iMAX_CATEGORIES)         As String
Public rgfCategory(iMAX_CATEGORIES)         As Boolean
Public rgsCategoryStyle(iMAX_CATEGORIES)    As Single
Public Const strBULLET                      As String = " |fffd| "
Public Const strCHK_STANDARD                As String = "chkStandard"
Public Const strCHK_OPTION                  As String = "chkOption"

Public Const strPOST_WIZ_BLN        As String = "Resume Post Wizard Balloon"
' --------------------------------------------------------------------------------------
' VARIABLE DECLARATIONS

' General
Public formSend                     As formMailFax ' Instance of Send by Mail/FAX form
Public strMailPrompt                As String
Public strMailCaption               As String
Public fInitializingForm            As Boolean
Public iWizardMode                  As Integer
Public strShpMap                    As String
Public strLblMap                    As String
Public rgstrTemplateFileNames(2, 1) As String
Public rgstrLtrTemplateFileNames(2, 1) As String
Public fStylesCopied                As Boolean
Public rgsStandardIndex(3, 9)       As Integer
Public rgsOptionIndex(3, 9)         As Integer
Public rgsStandardCount(3)          As Integer
Public rgsOptionCount(3)            As Integer
Public strCallBackHeading           As String

' Page 1
Public iResumeMode                  As Integer
Public iSavedMode                   As Integer
' Page 2
Public fFaxMail                     As Boolean  ' True if user has specified Fax number or email address
' Page 3
Public fRefreshList                 As Boolean  ' Set true if any checkbox changes value
' Page 6
Public iResumeStyle                 As Integer
Public iSavedStyle                  As Integer


Public Sub InitWizardName(fDummy As Boolean)
    Dim strResult As String
    
    On Error GoTo KeyNotFound
    ' Read registry key
    strResult = System.PrivateProfileString("", strREG_SETTINGS_BASE_KEY & "Resume Wizard\CV", "")
    
    ' Was key found?
    If Len(strResult) Then
        ' Resume or CV?
        If Val(strResult) = 1 Then
            iWizardMode = wzRESUME
        Else
            iWizardMode = wzRESUME
        End If
    Else
        iWizardMode = wzRESUME
    End If
    
AssignName:
    If iWizardMode = wzRESUME Then
        ' Resume Wizard Name and FileNames
        strWizShortName = "Resume"
        strWizLongName = "R|fffd|sum|fffd| Wizard"
    Else
        ' CV Wizard Name and FileNames
        strWizShortName = "CV"
        strWizLongName = "CV Wizard"
    End If
    strWizName = strWizLongName
    
    Exit Sub
    
KeyNotFound:
    iWizardMode = wzRESUME
    Resume AssignName

End Sub


Public Sub InitWizardStrings()
    On Error GoTo FatalError
    
    If iWizardMode = wzRESUME Then
        ' Resume Wizard Help Tip Messages
        rgstrAssistantMsg(wzPAGE_START) = "To use the same settings and data you entered last time you used the R|fffd|sum|fffd| Wizard, just click Finish."
        rgstrAssistantMsg(wzPAGE_STYLE) = "Pick the style that best fits the purpose of your r|fffd|sum|fffd|. If you want to change styles later, you can return to this panel after you finish the R|fffd|sum|fffd| Wizard."
        rgstrAssistantMsg(wzPAGE_TYPE) = "An entry-level r|fffd|sum|fffd| is a good choice if you are new to the job market or have limited job experience." & vbCr & "A chronological r|fffd|sum|fffd| highlights your accomplishments in chronological order." & vbCr & "A functional r|fffd|sum|fffd| is a good choice for educators at the administrative level with job experience in several areas." & vbCr & "A professional r|fffd|sum|fffd| is a good choice for professionals whose education and accreditation are of primary importance."
        rgstrAssistantMsg(wzPAGE_ADDRESS) = "Your fax number and electronic mail address will appear in separate lines below or to the side of the name and address on your r|fffd|sum|fffd|, depending on the type of r|fffd|sum|fffd| you choose." & vbCr & "At the end of this wizard, you'll get a chance to send the r|fffd|sum|fffd| to someone else by fax or electronic mail, if your computer supports these services."
        rgstrAssistantMsg(wzPAGE_PERSONAL) = ""
        rgstrAssistantMsg(wzPAGE_STANDARD) = "Headings in this step are selected based on the type of r|fffd|sum|fffd| you chose, but you can select other headings if you want."
        rgstrAssistantMsg(wzPAGE_OPTION) = "Select any additional headings you want. In the next step, you'll be able to create your own headings and change the order of headings."
        rgstrAssistantMsg(wzPAGE_HEADING_LIST) = "Type any additional headings that you want, and then click Add. To change the order of the headings, click the heading you want to move, and then click Move Up or Move Down."
        rgstrAssistantMsg(wzPAGE_FINISH) = "To change any settings, click Back."
        
        ' Resume Post Wizard Assistant Menu Items
        strCallBackHeading = "Do more with the r|fffd|sum|fffd|?"
        rgstrCallBackMsg(0) = "Add a cover letter"
        rgstrCallBackMsg(1) = "Change visual style of the r|fffd|sum|fffd|"
        rgstrCallBackMsg(2) = "Shrink to fit"
        rgstrCallBackMsg(3) = "Send r|fffd|sum|fffd| to someone"
        rgstrCallBackMsg(4) = "Get Help on Something else"
        
        ' Resume Mail dialog strings
        strMailPrompt = "How do you want to send this r|fffd|sum|fffd|?"
        strMailCaption = "Send R|fffd|sum|fffd|"
    Else
        ' CV Wizard Help Tip Messages
        rgstrAssistantMsg(wzPAGE_START) = "To use the same settings and data you entered last time you used the CV Wizard, just click Finish."
        rgstrAssistantMsg(wzPAGE_STYLE) = "Pick the style that best fits the purpose of your CV. If you want to change styles later, you can return to this panel after you finish the CV Wizard."
        rgstrAssistantMsg(wzPAGE_TYPE) = "An entry-level CV is a good choice if you are new to the job market or have limited job experience." & vbCr & "A chronological CV highlights your accomplishments in chronological order." & vbCr & "A functional CV is a good choice for educators at the administrative level with job experience in several areas." & vbCr & "A professional CV is a good choice for professionals whose education and accreditation are of primary importance."
        rgstrAssistantMsg(wzPAGE_ADDRESS) = "Your fax number and electronic mail address will appear in separate lines below or to the side of the name and address on your CV, depending on the type of CV you choose." & vbCr & "At the end of this wizard, you'll get a chance to send the CV to someone else by fax or electronic mail, if your computer supports these services."
        rgstrAssistantMsg(wzPAGE_PERSONAL) = "Depending on the audience for your CV, these items may or may not be appropriate. If you do not want any personal information to appear, click on all of the boxes to uncheck them."
        rgstrAssistantMsg(wzPAGE_STANDARD) = "Headings in this step are selected based on the type of CV you chose, but you can select other headings if you want."
        rgstrAssistantMsg(wzPAGE_OPTION) = "Select any additional headings you want. In the next step, you'll be able to create your own headings and change the order of headings."
        rgstrAssistantMsg(wzPAGE_HEADING_LIST) = "Type any additional headings that you want, and then click Add. To change the order of the headings, click the heading you want to move, and then click Move Up or Move Down."
        rgstrAssistantMsg(wzPAGE_FINISH) = "To change any settings, click Back."
        
        ' CV Post Wizard Assistant Menu Items
        strCallBackHeading = "Do more with the CV?"
        rgstrCallBackMsg(0) = "Add a cover letter"
        rgstrCallBackMsg(1) = "Change visual style of the CV"
        rgstrCallBackMsg(2) = "Shrink to fit"
        rgstrCallBackMsg(3) = "Send CV to someone"
        rgstrCallBackMsg(4) = "Get Help on Something else"
        
        ' CV Mail dialog strings
        strMailPrompt = "How do you want to send this CV?"
        strMailCaption = "Send CV"
    End If
    
    ' Template File Names
    rgstrTemplateFileNames(wzPROFESSIONAL, iLONG_NAME) = "Professioneller Lebenslauf.dot"
    rgstrTemplateFileNames(wzPROFESSIONAL, iSHORT_NAME) = "profresu.dot"
    rgstrTemplateFileNames(wzCONTEMPORARY, iLONG_NAME) = "Aktueller Lebenslauf.dot"
    rgstrTemplateFileNames(wzCONTEMPORARY, iSHORT_NAME) = "akturesu.dot"
    rgstrTemplateFileNames(wzELEGANT, iLONG_NAME) = "Eleganter Lebenslauf.dot"
    rgstrTemplateFileNames(wzELEGANT, iSHORT_NAME) = "elegresu.dot"
    ' Letter Wizard File Names
    rgstrLtrTemplateFileNames(wzPROFESSIONAL, iLONG_NAME) = "Professioneller Brief.dot"
    rgstrLtrTemplateFileNames(wzPROFESSIONAL, iSHORT_NAME) = "profbrf.dot"
    rgstrLtrTemplateFileNames(wzCONTEMPORARY, iLONG_NAME) = "Aktueller Brief.dot"
    rgstrLtrTemplateFileNames(wzCONTEMPORARY, iSHORT_NAME) = "AktuBrf.dot"
    rgstrLtrTemplateFileNames(wzELEGANT, iLONG_NAME) = "Eleganter Brief.dot"
    rgstrLtrTemplateFileNames(wzELEGANT, iSHORT_NAME) = "elegbrf.dot"
    
    ' Category Name Strings
    rgstrCategory(0) = "Objective"
    rgstrCategory(1) = "Education"
    rgstrCategory(2) = "Awards received"
    rgstrCategory(3) = "Interests and activities"
    rgstrCategory(4) = "Languages"
    rgstrCategory(5) = "Work experience"
    rgstrCategory(6) = "Volunteer experience"
    rgstrCategory(7) = "Hobbies"
    rgstrCategory(8) = "References"
    rgstrCategory(9) = "Extracurricular activities"
    rgstrCategory(10) = "Summer jobs"
    rgstrCategory(11) = "Summary of qualifications"
    rgstrCategory(12) = "Community activities"
    rgstrCategory(13) = "Professional memberships"
    rgstrCategory(14) = "Accreditations and licenses"
    rgstrCategory(15) = "Patents and publications"
    rgstrCategory(16) = "Civil service grades"
    rgstrCategory(17) = "Security clearance"
    rgstrCategory(18) = "Accreditations"
    rgstrCategory(19) = "Functional summary"
    rgstrCategory(20) = "Employment"
    rgstrCategory(21) = "Professional experience"
    rgstrCategory(22) = "Additional professional activities"
    
    ' Category Hotkeys
    rgstrHotKey(0) = "O"
    rgstrHotKey(1) = "d"
    rgstrHotKey(2) = "A"
    rgstrHotKey(3) = "I"
    rgstrHotKey(4) = "L"
    rgstrHotKey(5) = "W"
    rgstrHotKey(6) = "V"
    rgstrHotKey(7) = "H"
    rgstrHotKey(8) = "R"
    rgstrHotKey(9) = "x"
    rgstrHotKey(10) = "j"
    rgstrHotKey(11) = "q"
    rgstrHotKey(12) = "C"
    rgstrHotKey(13) = "m"
    rgstrHotKey(14) = "A"
    rgstrHotKey(15) = "P"
    rgstrHotKey(16) = "G"
    rgstrHotKey(17) = "S"
    rgstrHotKey(18) = "A"
    rgstrHotKey(19) = "F"
    rgstrHotKey(20) = "E"
    rgstrHotKey(21) = "P"
    rgstrHotKey(22) = "A"
    
    ' Category Styles
    rgsCategoryStyle(0) = wzOBJECTIVE
    rgsCategoryStyle(1) = wzEDUCATION
    rgsCategoryStyle(2) = wzOTHER
    rgsCategoryStyle(3) = wzOTHER
    rgsCategoryStyle(4) = wzOTHER
    rgsCategoryStyle(5) = wzEXPERIENCE
    rgsCategoryStyle(6) = wzOTHER
    rgsCategoryStyle(7) = wzOTHER
    rgsCategoryStyle(8) = wzOTHER
    rgsCategoryStyle(9) = wzOTHER
    rgsCategoryStyle(10) = wzEXPERIENCE
    rgsCategoryStyle(11) = wzEXPERIENCE
    rgsCategoryStyle(12) = wzOTHER
    rgsCategoryStyle(13) = wzOTHER
    rgsCategoryStyle(14) = wzOTHER
    rgsCategoryStyle(15) = wzOTHER
    rgsCategoryStyle(16) = wzOTHER
    rgsCategoryStyle(17) = wzOTHER
    rgsCategoryStyle(18) = wzOTHER
    rgsCategoryStyle(19) = wzOTHER
    rgsCategoryStyle(20) = wzEXPERIENCE
    rgsCategoryStyle(21) = wzEXPERIENCE
    rgsCategoryStyle(22) = wzOTHER
    
    ' Standard and Optional Category List Mappings by Mode:
    ' Standard
    rgsStandardIndex(wzENTRY, 0) = 0
    rgsStandardIndex(wzENTRY, 1) = 1
    rgsStandardIndex(wzENTRY, 2) = 2
    rgsStandardIndex(wzENTRY, 3) = 3
    rgsStandardIndex(wzENTRY, 4) = 4
    rgsStandardIndex(wzENTRY, 5) = 5
    rgsStandardIndex(wzENTRY, 6) = 6
    rgsStandardIndex(wzENTRY, 7) = 7
    rgsStandardIndex(wzENTRY, 8) = 8
    rgsStandardCount(wzENTRY) = 8
    rgsOptionIndex(wzENTRY, 0) = 9
    rgsOptionIndex(wzENTRY, 1) = 10
    rgsOptionIndex(wzENTRY, 2) = 11
    rgsOptionIndex(wzENTRY, 3) = 12
    rgsOptionIndex(wzENTRY, 4) = 13
    rgsOptionIndex(wzENTRY, 5) = 14
    rgsOptionIndex(wzENTRY, 6) = 15
    rgsOptionIndex(wzENTRY, 7) = 16
    rgsOptionIndex(wzENTRY, 8) = 17
    rgsOptionCount(wzENTRY) = 8
    
    ' Chronological
    rgsStandardIndex(wzCHRON, 0) = 0
    rgsStandardIndex(wzCHRON, 1) = 11
    rgsStandardIndex(wzCHRON, 2) = 5
    rgsStandardIndex(wzCHRON, 3) = 1
    rgsStandardIndex(wzCHRON, 4) = 9
    rgsStandardIndex(wzCHRON, 5) = 18
    rgsStandardIndex(wzCHRON, 6) = 13
    rgsStandardIndex(wzCHRON, 7) = 12
    rgsStandardIndex(wzCHRON, 8) = 8
    rgsStandardCount(wzCHRON) = 8
    rgsOptionIndex(wzCHRON, 0) = 3
    rgsOptionIndex(wzCHRON, 1) = 6
    rgsOptionIndex(wzCHRON, 2) = 15
    rgsOptionIndex(wzCHRON, 3) = 4
    rgsOptionIndex(wzCHRON, 4) = 17
    rgsOptionIndex(wzCHRON, 5) = 16
    rgsOptionIndex(wzCHRON, 6) = 2
    rgsOptionIndex(wzCHRON, 7) = 7
    rgsOptionCount(wzCHRON) = 7
    
    ' Functional
    rgsStandardIndex(wzFUNC, 0) = 0
    rgsStandardIndex(wzFUNC, 1) = 19
    rgsStandardIndex(wzFUNC, 2) = 20
    rgsStandardIndex(wzFUNC, 3) = 1
    rgsStandardIndex(wzFUNC, 4) = 8
    rgsStandardCount(wzFUNC) = 4
    rgsOptionIndex(wzFUNC, 0) = 11
    rgsOptionIndex(wzFUNC, 1) = 18
    rgsOptionIndex(wzFUNC, 2) = 13
    rgsOptionIndex(wzFUNC, 3) = 6
    rgsOptionIndex(wzFUNC, 4) = 15
    rgsOptionIndex(wzFUNC, 5) = 4
    rgsOptionIndex(wzFUNC, 6) = 17
    rgsOptionIndex(wzFUNC, 7) = 16
    rgsOptionIndex(wzFUNC, 8) = 2
    rgsOptionCount(wzFUNC) = 8
    
    ' Professional
    rgsStandardIndex(wzPROF, 0) = 11
    rgsStandardIndex(wzPROF, 1) = 1
    rgsStandardIndex(wzPROF, 2) = 21
    rgsStandardIndex(wzPROF, 3) = 15
    rgsStandardIndex(wzPROF, 4) = 22
    rgsStandardIndex(wzPROF, 5) = 13
    rgsStandardIndex(wzPROF, 6) = 4
    rgsStandardIndex(wzPROF, 7) = 12
    rgsStandardIndex(wzPROF, 8) = 8
    rgsStandardCount(wzPROF) = 8
    rgsOptionIndex(wzPROF, 0) = 0
    rgsOptionIndex(wzPROF, 1) = 9
    rgsOptionIndex(wzPROF, 2) = 18
    rgsOptionIndex(wzPROF, 3) = 7
    rgsOptionIndex(wzPROF, 4) = 3
    rgsOptionIndex(wzPROF, 5) = 6
    rgsOptionIndex(wzPROF, 6) = 17
    rgsOptionIndex(wzPROF, 7) = 16
    rgsOptionIndex(wzPROF, 8) = 2
    rgsOptionCount(wzPROF) = 8

' --------------------------------------------------------------------------------------
'*******************   DO NOT LOCALIZE ANY ANY CODE BEYOND THIS POINT *****************
' --------------------------------------------------------------------------------------
    strRegSettingsKey = strREG_SETTINGS_BASE_KEY & "Resume Wizard"

    Exit Sub
FatalError:
    ReportError Err
End Sub  ' InitWizardStrings


Public Sub InitCategoryLabels(iMode As Integer)
    Dim i As Integer
    Dim iIndex As Integer
    Dim objControls As Object
    
    ' Standard Panel
    Set objControls = formWizard.mpgWizardPage.Pages(wzPAGE_STANDARD).Controls
    For i = 0 To rgsStandardCount(iMode)
        iIndex = rgsStandardIndex(iMode, i)
        With objControls(strCHK_STANDARD & i)
            .Caption = rgstrCategory(iIndex)
            .Accelerator = rgstrHotKey(iIndex)
            .Value = rgfCategory(iIndex)
            .Visible = True
            .Enabled = True
        End With
    Next i
    ' Disable the rest
    For i = rgsStandardCount(iMode) + 1 To iMAX_STANDARD
        With objControls(strCHK_STANDARD & i)
            .Visible = False
            .Enabled = False
        End With
    Next i
    
    ' Option Panel
    Set objControls = formWizard.mpgWizardPage.Pages(wzPAGE_OPTION).Controls
    For i = 0 To rgsOptionCount(iMode)
        iIndex = rgsOptionIndex(iMode, i)
        With objControls(strCHK_OPTION & i)
            .Caption = rgstrCategory(iIndex)
            .Accelerator = rgstrHotKey(iIndex)
            .Value = rgfCategory(iIndex)
            .Visible = True
            .Enabled = True
        End With
    Next i
    ' Disable the rest
    For i = rgsOptionCount(iMode) + 1 To iMAX_OPTION
        With objControls(strCHK_OPTION & i)
            .Visible = False
            .Enabled = False
        End With
    Next i
        
End Sub


Public Sub InitWizard(fDummy As Boolean)
    On Error GoTo FatalError

    If iWizardMode = wzRESUME Then
        strShpMap = strSHP_MAP
        strLblMap = strLBL_MAP
    Else
        ' CV
        strShpMap = strSHP_MAP & "CV"
        strLblMap = strLBL_MAP & "CV"
    End If

    iCurrentPanel = 0

    InitWizardStrings
    
    ' Create a new instance of the form
    Set formWizard = New formWizDlg
    If formWizard Is Nothing Then GoTo FatalError

    If iWizardMode = wzRESUME Then
        formWizard.frameCV.Visible = False
        formWizard.frameResume.Visible = True
    Else
        formWizard.frameCV.Visible = True
        formWizard.frameResume.Visible = False
    End If

    ' Use the default control strings or load alternates?
    If iWizardMode = iALTERNATE_WIZARD_MODE Then
        formWizard.Caption = strALTERNATE_TITLE
        formWizard.lbl01.Caption = strLBL_01
        formWizard.lbl10.Caption = strLBL_10
        formWizard.optEntryMode.Caption = strOPT_ENTRY_LEVEL
        formWizard.optChronMode.Caption = strOPT_CHRONOLOGICAL
        formWizard.optFuncMode.Caption = strOPT_FUNCTIONAL
        formWizard.optProfMode.Caption = strOPT_PROFESSIONAL
        formWizard.lbl40.Caption = strLBL_40
        formWizard.lbl50.Caption = strLBL_50
        formWizard.lbl60.Caption = strLBL_60
        formWizard.lbl61.Caption = strLBL_61
        formWizard.lblWizName2.Caption = strALT_WIZ_NAME2

        formWizard.lblWizName2.Left = sALT_LBLWIZNAME2_LEFT
        formWizard.lblWizName2.Width = sALT_LBLWIZNAME2_WIDTH
        formWizard.lbl81.Caption = strLBL_81
    End If

    formWizard.lblWizName1.Caption = " " & strWizLongName & " "

    Exit Sub
    
FatalError:
    DisplayErrorMsg strERR_INIT_FORM
    ReportError Err
End Sub

'showing the panel during post-wizard options
Private Function FReenterWizardPanel(iLockPanel As Integer) As Boolean
    Dim i As Integer
    Dim objControls As Object
    
    On Error GoTo FatalError
    
    'if for some reason formWizard has been deleted then reinstantiate formWizDlg
    If formWizard Is Nothing Then Set formWizard = New formWizDlg
    
    fWizardCallBack = True
    
    ' First disable all flow chart controls
    Set objControls = formWizard.Controls
    If iWizardMode = wzCV Then
        formWizard.frameCV.Visible = True
        formWizard.frameResume.Visible = False
        For i = 0 To iMAX_PANEL
            objControls(strShpMap & i).BackColor = COLOR_DISABLED
            objControls(strLblMap & i).ForeColor = COLOR_DISABLED
            objControls(strLblMap & i).FONTBOLD = False
        Next i
    Else
        formWizard.frameCV.Visible = False
        formWizard.frameResume.Visible = True
        For i = wzPAGE_START To wzPAGE_ADDRESS
            objControls(strShpMap & i).BackColor = COLOR_DISABLED
            objControls(strLblMap & i).ForeColor = COLOR_DISABLED
            objControls(strLblMap & i).FONTBOLD = False
        Next i
        ' No Subway stop for 4 in Resume!
        For i = wzPAGE_STANDARD To wzPAGE_FINISH
            objControls(strShpMap & i).BackColor = COLOR_DISABLED
            objControls(strLblMap & i).ForeColor = COLOR_DISABLED
            objControls(strLblMap & i).FONTBOLD = False
        Next i
    End If
        
    ' Select new flow chart marker
    objControls(strShpMap & iLockPanel).BackColor = vbGreen
    objControls(strLblMap & iLockPanel).ForeColor = vbWhite
    objControls(strLblMap & iLockPanel).FONTBOLD = True
    
    With formWizard
        ' Navigation Buttons
        .tglAssistant.Visible = False
        .cmdCancel.Visible = False
        .cmdBack.Visible = False
        .cmdNext.Visible = False
        .cmdFinish.Visible = False
        .cmdOk.Visible = True
        .cmdCancelReVisit.Visible = True
        
        ' Escape Service
        .cmdCancel.Cancel = False
        .cmdCancelReVisit.Cancel = True
    
        ' Change to new active page
        .mpgWizardPage.Value = iLockPanel
        iCurrentPanel = iLockPanel
        
        ' Restore previously selected style
        Select Case iResumeStyle
            Case wzPROFESSIONAL
                .optProfessional.Value = True
                .shpShadowProfessional.Visible = True
                .shpShadowContemporary.Visible = False
                .shpShadowElegant.Visible = False
                .optProfessional.SetFocus
            Case wzCONTEMPORARY
                .optContemporary.Value = True
                .shpShadowProfessional.Visible = False
                .shpShadowContemporary.Visible = True
                .shpShadowElegant.Visible = False
                .optContemporary.SetFocus
            Case wzELEGANT
                .optElegant.Value = True
                .shpShadowProfessional.Visible = False
                .shpShadowContemporary.Visible = False
                .shpShadowElegant.Visible = True
                .optElegant.SetFocus
        End Select
    End With
    
    ' No errors
    FReenterWizardPanel = True
    Exit Function

FatalError:
    DisplayErrorMsg strERR_INIT_FORM
    FReenterWizardPanel = False
End Function


' fDummy prevents sub from appearing in Word Tools/Macro list
Public Sub SaveDialogValues(fDummy As Boolean)
    Dim i As Integer
    Dim iNumAddedHeadings As Integer
    
    On Error GoTo FatalError
    
    ' Display status
    Application.ScreenUpdating = False
    StatusBar = strSAVE_SETTINGS
    System.Cursor = wdCursorWait
    
    ' Assistant
    System.PrivateProfileString("", strREG_SETTINGS_BASE_KEY, strREG_ASSISTANT_TIME_STAMP) = Format$(Now, "General Date")
    StoreValPref strREG_ASSISTANT_HELP, iLocalState
  
    ' Page 2
    StoreValPref "Resume Mode", iResumeMode

    ' Page 3
    StorePref "Name", formWizard.txtName.Text
    StorePref "Address", formWizard.txtAddress.Text
    StorePref "Phone", formWizard.txtPhone.Text
    StorePref "Fax", formWizard.txtFax.Text
    StorePref "Email", formWizard.txtEmail.Text

    ' Page 4
    If iWizardMode = wzCV Then
        StoreValPref "Marital", formWizard.chkMarital.Value
        StoreValPref "Nationality", formWizard.chkNationality.Value
        StoreValPref "Age", formWizard.chkAge.Value
        StoreValPref "Birth Place", formWizard.chkBirthPlace.Value
        StoreValPref "Parents", formWizard.chkParents.Value
    End If
    
    ' Page 5 and Page 6
    For i = 0 To iMAX_CATEGORIES
        StoreValPref "Heading" & Str$(i), Int(rgfCategory(i))
    Next i
    
    ' Page 7
    With formWizard.lstHeadings
        iNumAddedHeadings = 0
        For i = 0 To .ListCount - 1
            If .List(i, 1) = wzADDED Then
                StorePref "AddedHeading" & iNumAddedHeadings, .List(i, 0)
                iNumAddedHeadings = iNumAddedHeadings + 1
            End If
        Next i
        StoreValPref "NumAddedHeadings", iNumAddedHeadings
    End With
    
    
    ' Page 1
    StoreValPref "Resume Style", iResumeStyle
    
    fSettingsSaved = True
    System.Cursor = wdCursorNormal
    StatusBar = ""
    Application.ScreenUpdating = True
    
    Exit Sub
    
FatalError:
    ReportError Err
End Sub  ' SaveNewWizardValues


Public Sub RestoreDialogValues(fDummy As Boolean)
    Dim i As Integer
    Dim iNumAddedHeadings As Integer
    Dim strTemp As String
    
    On Error GoTo FatalError
    Application.ScreenUpdating = False
    System.Cursor = wdCursorWait
    fInitializingForm = True
    ' Display status
    StatusBar = strRST_SETTINGS
    
    ' Page 1
    iResumeMode = IRestorePref("Resume Mode", 0)
    Select Case iResumeMode
        Case wzENTRY
            formWizard.optEntryMode.Value = True
        Case wzCHRON
            formWizard.optChronMode.Value = True
        Case wzFUNC
            formWizard.optFuncMode.Value = True
        Case wzPROF
            formWizard.optProfMode.Value = True
        Case Else
            iResumeStyle = wzENTRY
            formWizard.optEntryMode.Value = True
    End Select

    ' Page 2
    formWizard.txtName.Text = StrRestorePref("Name", Application.UserName)
    formWizard.txtAddress.Text = StrRestorePref("Address", "")
    formWizard.txtPhone.Text = StrRestorePref("Phone", "")
    formWizard.txtFax.Text = StrRestorePref("Fax", "")
    formWizard.txtEmail.Text = StrRestorePref("Email", "")

    ' Page 3
    If iWizardMode = wzCV Then
        formWizard.chkMarital.Value = FRestorePref("Marital", True)
        formWizard.chkNationality.Value = FRestorePref("Nationality", True)
        formWizard.chkAge.Value = FRestorePref("Age", True)
        formWizard.chkBirthPlace.Value = FRestorePref("Birth Place", True)
        formWizard.chkParents.Value = FRestorePref("Parents", True)
    End If
    
    ' Page 4 and Page 5
    For i = 0 To iMAX_CATEGORIES
        ' First time through, Objective, Education, WorkExperience, Employment,
        ' and Prof Experience are set true by default
        Select Case i
            Case 0, 1, 5, 20, 21
                rgfCategory(i) = FRestorePref("Heading" & Str$(i), True)
            Case Else
                rgfCategory(i) = FRestorePref("Heading" & Str$(i), False)
        End Select
    Next i
    InitCategoryLabels (iResumeMode)

    ' Page 6
    iNumAddedHeadings = IRestorePref("NumAddedHeadings", 0)
    With formWizard.lstHeadings
        For i = 0 To iNumAddedHeadings - 1
            ' Insert topic into listbox
            strTemp = StrRestorePref("AddedHeading" & i, "")
            If Len(strTemp) Then
                .AddItem strTemp
                .List(i, 1) = wzADDED
            End If
        Next i
    End With
    
    fRefreshList = True

    ' Page 1
    iResumeStyle = IRestorePref("Resume Style", 0)
    Select Case iResumeStyle
        Case wzPROFESSIONAL
            formWizard.optProfessional.Value = True
            formWizard.shpShadowProfessional.Visible = True
        Case wzCONTEMPORARY
            formWizard.optContemporary.Value = True
            formWizard.shpShadowContemporary.Visible = True
        Case wzELEGANT
            formWizard.optElegant.Value = True
            formWizard.shpShadowElegant.Visible = True
        Case Else
            iResumeStyle = wzPROFESSIONAL
            formWizard.optProfessional.Value = True
            formWizard.shpShadowProfessional.Visible = True
    End Select

    fInitializingForm = False
    fStylesCopied = False
    fSettingsRestored = True
    System.Cursor = wdCursorNormal
    StatusBar = ""
    Application.ScreenUpdating = True
    
    Exit Sub
FatalError:
    ReportError Err
NoError:
End Sub


' fDummy prevents sub from appearing in Word Tools/Macro list
Public Sub CreateNewDoc(fDummy As Boolean)
    Dim objRangeBuffer As Range
    Dim sStyle As Single
    Dim i As Integer
    Dim objResumeTable As Table
    Dim iNumHeadings As Integer
    Dim iNumRows As Integer
    Dim objHeadings As ListBox
    Dim strBreak As String
    Dim strAdd As String
    Dim strMail As String
    Dim fFirstRow As Boolean
    Dim strUserName As String
    
    Dim fFaxEmail As Boolean
    Dim strNameText As String
    Dim strFaxText As String
    Dim strPhoneText As String
    Dim strEmailText As String
    
    Dim objRngEdu As Range
    Dim objRngExp As Range
    Dim objRngOther As Range
    Dim objFps As PageSetup
            
    On Error GoTo FatalError
    
    Application.ScreenUpdating = False

    StatusBar = strCREATING_DOC
    System.Cursor = wdCursorWait
    
    If fChangeToA4 Then
        Set objFps = ActiveDocument.PageSetup
        objFps.LeftMargin = sA4_LEFT_MARGIN
        objFps.RightMargin = sA4_RIGHT_MARGIN
    ElseIf fChangeToLetter Then
        Set objFps = ActiveDocument.PageSetup
        objFps.LeftMargin = sLETTER_MARGIN
        objFps.RightMargin = sLETTER_MARGIN
    End If
    
    ' Insert Name
    strNameText = formWizard.txtName.Text
    objActiveRange.InsertAfter strNameText & vbCr
    objActiveRange.Style = strSTY_NAME
    objActiveRange.Collapse wdCollapseEnd
    
    If iResumeStyle = wzELEGANT Then
        strBreak = strBULLET
        strAdd = StrSubstituteText(formWizard.txtAddress.Text, vbCr & vbLf, strBULLET)
    Else
        strBreak = vbCr
        strAdd = StrSubstituteText(formWizard.txtAddress.Text, vbLf, "")
    End If
    
    strFaxText = formWizard.txtFax.Text
    strEmailText = formWizard.txtEmail.Text
    strPhoneText = formWizard.txtPhone.Text

    strMail = ""
    fFaxEmail = False
    'if fax or email present then should use Address2 for that info
    If Len(strFaxText) + Len(strEmailText) Then
        ' Build Mail block
        If Len(strPhoneText) Then
            strMail = strPHONE & strPhoneText
            fFaxEmail = True
        End If
        
        If Len(strFaxText) Then
            If fFaxEmail Then strMail = strMail & strBreak
            strMail = strMail & strFAX & strFaxText
            fFaxEmail = True
        End If
        
        If Len(strEmailText) Then
            If fFaxEmail Then strMail = strMail & strBreak
            strMail = strMail & strEMAIL & formWizard.txtEmail.Text
            fFaxEmail = True
        End If
    Else
        ' Append phone to first address line
        If Len(strPhoneText) Then strAdd = strAdd & strBreak & strPHONE & strPhoneText
    End If

    ' Insert address blocks
    If fFaxEmail Then
        ' Insert address using Address 2 style
        objActiveRange.Text = strAdd & vbCr
        objActiveRange.Style = strSTY_ADDRESS2
        objActiveRange.Collapse wdCollapseEnd
        ' Insert Fax using Address 1 style
        objActiveRange.Text = strMail & vbCr
        objActiveRange.Style = strSTY_ADDRESS1
        objActiveRange.Collapse wdCollapseEnd
    Else
        ' Insert address using Address 1 style
        objActiveRange.Text = strAdd & vbCr
        objActiveRange.Style = strSTY_ADDRESS1
        objActiveRange.Collapse wdCollapseEnd
    End If
    
    ' How many categories selected?
    iNumHeadings = formWizard.lstHeadings.ListCount
    
    ' How many rows needed?
    If iWizardMode = wzCV Then
        iNumRows = iNumHeadings + 1
    Else
        iNumRows = iNumHeadings
    End If
    
    ' Insert Table
    If iNumRows Then
        ' Elegant style needs separate rows for Section Title
        If iResumeStyle = wzELEGANT Then iNumRows = iNumRows * 2
        ' Create new table
        objActiveRange.Select
        WordBasic.TableInsertTable NumColumns:=2, NumRows:=iNumRows, InitialColWidth:=strSECOND_COL_WIDTH
        Application.ScreenUpdating = True

        If (iResumeStyle = wzELEGANT) Then Selection.Tables(1).Columns(1).Width = sFIRST_COL_WIDTH
        If iWizardMode = wzCV Then
            ' Insert Personal info as first row?
            If iResumeStyle = wzELEGANT Then
                Selection.SelectRow
                Selection.Cells.Merge
            End If
            Selection.InsertAfter strPERSONAL_INFO & vbCr
            Selection.Range.Style = strSTY_SECTION_TITLE
    
            ' Insert section body (column 2)
            fFirstRow = True
            If iResumeStyle = wzELEGANT Then Selection.MoveDown wdLine
            Selection.MoveRight wdCell
            If formWizard.chkMarital.Value Then
                Selection.InsertAfter strMARITAL
                Selection.Range.Style = strSTY_PERSONAL_INFO
                fFirstRow = False
            End If
            If formWizard.chkNationality.Value Then
                If fFirstRow Then
                    Selection.InsertAfter strNATIONALITY
                    Selection.Range.Style = strSTY_PERSONAL_INFO
                    fFirstRow = False
                Else
                    Selection.InsertParagraphAfter
                    Selection.InsertAfter strNATIONALITY
                End If
            End If
            If formWizard.chkAge.Value Then
                If fFirstRow Then
                    Selection.InsertAfter strAGE
                    Selection.Range.Style = strSTY_PERSONAL_INFO
                    fFirstRow = False
                Else
                    Selection.InsertParagraphAfter
                    Selection.InsertAfter strAGE
                End If
            End If
            If formWizard.chkBirthPlace.Value Then
                If fFirstRow Then
                    Selection.InsertAfter strBIRTHPLACE
                    Selection.Range.Style = strSTY_PERSONAL_INFO
                    fFirstRow = False
                Else
                    Selection.InsertParagraphAfter
                    Selection.InsertAfter strBIRTHPLACE
                End If
            End If
            If formWizard.chkParents.Value Then
                If fFirstRow Then
                    Selection.InsertAfter strPARENTS
                    Selection.Range.Style = strSTY_PERSONAL_INFO
                Else
                    Selection.InsertParagraphAfter
                    Selection.InsertAfter strPARENTS
                End If
            End If
            Selection.MoveRight wdCell
        End If
        
        ' Insert the category headings
        Set objHeadings = formWizard.lstHeadings

        Set objRngEdu = Nothing
        Set objRngExp = Nothing
        Set objRngOther = Nothing
        
        For i = 0 To iNumHeadings - 1
            ' Insert section title (column 1)
            If iResumeStyle = wzELEGANT Then
                Selection.SelectRow
                Selection.Cells.Merge
            End If

            Selection.InsertAfter objHeadings.List(i, 0)
            If iResumeStyle = wzELEGANT Then
                Selection.Style = strSTY_SECTION_TITLE
                Selection.MoveDown wdLine
            End If
    
            ' Set style index
            sStyle = objHeadings.List(i, 1)
            If sStyle <> wzADDED Then sStyle = rgsCategoryStyle(sStyle)
            
            ' Insert section body (column 2)
            Selection.MoveRight wdCell
            Selection.Collapse wdCollapseStart
            Select Case sStyle
                Case wzOBJECTIVE
                    InsertMacroButton strTYPE_OBJECTIVE, Selection.Range
                    Selection.Range.Style = strSTY_OBJECTIVE

                Case wzEDUCATION
                    If (objRngEdu Is Nothing) Then
                        Set objRngEdu = Selection.Range.Duplicate
                        Selection.InsertAfter "19xx - 19xx" & vbTab
                        Selection.Collapse wdCollapseEnd
                        InsertMacroButton strCOMPANY_INST_NAME, Selection.Range
                        Selection.InsertAfter vbTab
                        Selection.Collapse wdCollapseEnd
                        InsertMacroButton strCITY_STATE, Selection.Range
                        Selection.InsertParagraphAfter
                        Selection.Range.Style = strSTY_COMPANY
                        Selection.Collapse wdCollapseEnd
        
                        InsertMacroButton strDEGREE_MAJOR, Selection.Range

                        Selection.InsertParagraphAfter
                        Selection.Range.Style = strSTY_JOB_TITLE
                        Selection.Collapse wdCollapseEnd
        
                        InsertMacroButton strDETAILS, Selection.Range
                        Selection.Range.Style = strSTY_ACHIEVEMENT
                        objRngEdu.End = Selection.End
                    Else
                        Selection.Range.Style = strSTY_ACHIEVEMENT
                        Selection.FormattedText = objRngEdu.FormattedText
                    End If
                    
                Case wzEXPERIENCE
                    If (objRngExp Is Nothing) Then
                        Set objRngExp = Selection.Range.Duplicate
                        Selection.InsertAfter "19xx - 19xx" & vbTab
                        Selection.Collapse wdCollapseEnd
                        InsertMacroButton strCOMPANY_INST_NAME, Selection.Range
                        Selection.InsertAfter vbTab
                        Selection.Collapse wdCollapseEnd
                        InsertMacroButton strCITY_STATE, Selection.Range
                        Selection.InsertParagraphAfter
                        Selection.Range.Style = strSTY_COMPANY
                        Selection.Collapse wdCollapseEnd
        
                        InsertMacroButton strJOB_TITLE, Selection.Range

                        Selection.InsertParagraphAfter
                        Selection.Range.Style = strSTY_JOB_TITLE
                        Selection.Collapse wdCollapseEnd
        
                        InsertMacroButton strDETAILS, Selection.Range
                        Selection.Range.Style = strSTY_ACHIEVEMENT
                        objRngExp.End = Selection.End
                    Else
                        Selection.Range.Style = strSTY_ACHIEVEMENT
                        Selection.FormattedText = objRngExp.FormattedText
                    End If
                Case Else
                    If (objRngOther Is Nothing) Then
                        Set objRngOther = Selection.Range.Duplicate
                        InsertMacroButton strCLICK_HERE, Selection.Range
                        Selection.Range.Style = strSTY_OBJECTIVE
                        objRngOther.End = Selection.End
                    Else
                        Selection.Range.Style = strSTY_OBJECTIVE
                        Selection.FormattedText = objRngOther.FormattedText
                    End If
            End Select
            If i <> (iNumHeadings - 1) Then Selection.MoveRight wdCell
        Next i
        Application.ScreenUpdating = False
        If iResumeStyle <> wzELEGANT Then
            Selection.Tables(1).Columns(1).Select
            WordBasic.TableColumnWidth strFIRST_COL_WIDTH
            Selection.Style = strSTY_SECTION_TITLE
        End If
    
    End If ' Categories

    ' Save iResumeStyle as document variable
    ActiveDocument.Variables.Add "iResumeStyle", CStr(iResumeStyle)

    ' Window Caption
    strUserName = ": "
    If Len(strNameText) Then strUserName = strUserName & strNameText & " "

    With ActiveWindow
        .Caption = .Caption & " - " & strWizShortName & strUserName & Format(Date, "mmm")
        .View.TableGridlines = False
    End With

    Selection.HomeKey wdStory
    ActiveDocument.UndoClear
    With ActiveDocument.Content
        .SpellingChecked = True
        .GrammarChecked = True
    End With
    
    Exit Sub

FatalError:
    Application.ScreenUpdating = True
    ReportError Err
End Sub ' CreateNewDoc


Private Sub InsertMacroButton(strText As String, objRng As Range)
    Dim objFld As Field
        
    ' Insert the field
    Set objFld = objRng.Fields.Add(objRng, wdFieldMacroButton, strEMPTY_MACRO & "[" & strText & "]", False)
    
    Set objRng = objFld.Result
    With objRng
        .Collapse wdCollapseEnd
        .End = .End + 1
        .Start = .End
    End With
    
End Sub


Public Function StrSubstituteText(strText As String, strTarget As String, strReplace As String) As String
    Dim strResult As String
    Dim iPos As Integer, iTargetLength As Integer, iReplaceLength As Integer
    
    ' Init
    strResult = strText
    iTargetLength = Len(strTarget)
    iReplaceLength = Len(strReplace)
    
    ' Test for do nothing cases
    If Len(strText) = 0 Or iTargetLength = 0 Then GoTo LEnd
    
    iPos = InStr(1, strResult, strTarget)
    
    While (iPos) 'presence of strTarget
        strResult = Left$(strResult, iPos - 1) & strReplace & Mid$(strResult, iPos + iTargetLength)
        iPos = iPos + iReplaceLength
        iPos = InStr(iPos, strResult, strTarget)
    Wend
        

LEnd:
    StrSubstituteText = strResult

End Function


Public Function FApplyResumeStyle(iResumeStyle As Integer) As Boolean
    Dim strStyleName As String
    Dim strLongName As String

    StatusBar = strAPPLYING
    
    ' Attempt to locate longname, otherwise use shortname
StartOfSearch:
    strStyleName = strTemplatePath & rgstrTemplateFileNames(iResumeStyle, 0)
    strLongName = strStyleName
    If Dir(strStyleName) = "" Then strStyleName = strTemplatePath & rgstrTemplateFileNames(iResumeStyle, 1)

    ' Get Template Styles
    On Error GoTo TemplateNotFound
    ActiveDocument.CopyStylesFromTemplate (strStyleName)

    StatusBar = ""
    fStylesCopied = True
    FApplyResumeStyle = True
    Exit Function
    
TemplateNotFound:

    StatusBar = ""
    DisplayErrorMsg strERR_STYLE_NOT_FOUND & strLongName & strERR_STYLE_NOT_FOUND2
    fStylesCopied = False
    FApplyResumeStyle = False
End Function
'initializing the post-wizard options balloon
Public Sub InitCallBack(fDummy As Boolean)
    Dim i As Integer
    Dim objCallBackLabels As BalloonLabels

    On Error GoTo ErrorCallBack
    
    If Not (fBlnInitialized) Then
    
        Set objPostWizBln = Assistant.NewBalloon
        fBlnInitialized = True
        With objPostWizBln
            .Heading = strCallBackHeading
            .Mode = msoModeModeless
            .Button = msoButtonSetCancel
            .BalloonType = msoBalloonTypeButtons
            .Callback = "ResumeMod.fnCallBack"
        End With
    
        Set objCallBackLabels = objPostWizBln.Labels
        objCallBackLabels.Count = iCALL_BACK_COUNT
        For i = 1 To iCALL_BACK_COUNT
            objCallBackLabels.Item(i).Text = rgstrCallBackMsg(i - 1)
        Next i
    End If
    
    objPostWizBln.Show

    If (Assistant.BalloonError) Then GoTo ErrorCallBack
    
    fPostWizBlnOpen = True
    Set objDocBln = ActiveDocument
    Set clsBln.app = Application
    ActiveDocument.Variables.Add strPOST_WIZ_BLN, "1"
    
    Exit Sub
    
ErrorCallBack:
    DisplayErrorMsg strERR_INIT_CALL_BACK
    If (Not (formWizard Is Nothing)) Then
        Unload formWizard
        Set formWizard = Nothing
    End If
    fPostWizBlnOpen = False
    Set objDocBln = ActiveDocument
    Set clsBln.app = Application
    ActiveDocument.Variables.Add strPOST_WIZ_BLN, "0"
End Sub


Public Function fnCallBack(objBln As Balloon, iBtn As Integer, lPrivate As Long)
    Dim objLetter As New LetterContent
    Dim strLetterContent As String
    Dim objTmpDoc As Document
    Dim i As Integer
    On Error GoTo ErrorCallBack
    
    Select Case iBtn
        Case Is < 1 'Exit
            objBln.Close
            fPostWizBlnOpen = False
            ActiveDocument.Variables(strPOST_WIZ_BLN).Value = "0"
            RestoreAssistant (True)
            If (Not (formWizard Is Nothing)) Then
                Unload formWizard
                Set formWizard = Nothing
            End If
        Case 1 ' Add cover letter
            objBln.Close
            fPostWizBlnOpen = False
            
            ' First recover style from document
            iResumeStyle = Val(ActiveDocument.Variables("iResumeStyle"))
            
            ' Create new document
            Documents.Add
            
            ' Insert body
            Set objActiveRange = ActiveDocument.Content
            strLetterContent = vbCr & strCOVER_LETTER_BODY1 & vbCr & strCOVER_LETTER_BODY2 & vbCr & strCOVER_LETTER_BODY3 & vbCr & strCOVER_LETTER_BODY4 & vbCr
            objActiveRange.Text = strLetterContent
            objActiveRange.Style = wdStyleBodyText
            
            ' Set content of objLetter
            i = 1
            With objLetter
                .DateFormat = Format(Date, "mmmm d, yyyy")
                .PageDesign = rgstrLtrTemplateFileNames(iResumeStyle, i) 'Shortname
                .LetterStyle = wdFullBlock
                .Salutation = strCOVER_LETTER_SALUTATION
                .SalutationType = wdSalutationFormal
                .ReturnAddress = formWizard.txtAddress.Text
                .SenderName = formWizard.txtName.Text
                .Closing = strCOVER_LETTER_CLOSING
            End With
            i = i - 1
            ' Special Error Handler
            On Error GoTo -1 ' reset error handler
            On Error GoTo ErrLetterShortName
            
            With ActiveDocument
            ' Insert letter content
                .SetLetterContent objLetter
            
            ' Letter is ok
                .SpellingChecked = True
                .GrammarChecked = True
            End With
            
            ' Restore error handler
            On Error GoTo -1 ' reset error handler
            On Error GoTo ErrorCallBack

        Case 2 ' Change style
            objBln.Close
            fPostWizBlnOpen = False
            iResumeStyle = Val(ActiveDocument.Variables("iResumeStyle"))
            iSavedStyle = iResumeStyle
            If (FReenterWizardPanel(wzPAGE_STYLE)) Then formWizard.Show
            objBln.Show
            fPostWizBlnOpen = True
        Case 3 ' Shrink to fit
            ActiveDocument.FitToPages
        Case 4 ' Send resume...
            Set formSend = New formMailFax
            With formSend
                .Caption = strMailCaption
                .lblPrompt.Caption = strMailPrompt
            End With
            Set objTmpDoc = ActiveDocument
            objBln.Close
            fPostWizBlnOpen = False
            formSend.Show
            Set formSend = Nothing
            'if we are back in the same doc. due to some error
            'then Changedoc event won't get fired
            If (objTmpDoc = ActiveDocument) And (Not (fPostWizBlnOpen)) Then
                objBln.Show
                fPostWizBlnOpen = True
            End If
        Case 5 'Get help...
            Assistant.Help
    End Select
    Exit Function

ErrLetterShortName:
    If Err.Number <> 4160 Then GoTo ErrorCallBack 'error with pagedesign
    With objLetter
        .SenderName = ""
        .Salutation = ""
        .ReturnAddress = ""
        .Closing = ""
    End With
    ' Try longname next
    If i = 0 Then
        objLetter.PageDesign = rgstrLtrTemplateFileNames(iResumeStyle, 0) 'Longname
        i = i - 1
    ElseIf (i = -1) Then
        objLetter.PageDesign = strCURRENT
    Else
        GoTo ErrorCallBack
    End If

    Resume  ' Try again
    
ErrorCallBack:
    DisplayErrorMsg Err.Description
End Function

' End Resume Wizard Module
Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Document_Close()
On Error GoTo Close_error
    If ActiveDocument.Variables(strPOST_WIZ_BLN).Value = "1" Then
        If fPostWizBlnOpen Then
            objPostWizBln.Close
            fPostWizBlnOpen = False
        End If
    End If
    
Close_error:
    Err.Clear
End Sub
Private Sub Document_New()
    Common.StartWizard
End Sub
Attribute VB_Name = "formMailFax"
Attribute VB_Base = "0{1D22A750-4FDD-11D0-B5E8-00AA00BBB76C}{1D22A74A-4FDD-11D0-B5E8-00AA00BBB76C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False









' Word Wizard / Selection of Email Target
Option Explicit

Private Sub cmdCancel_Click()
    ' Close Form
    formSend.Hide
End Sub

Private Sub cmdOK_Click()
    Dim fAttachMailState As Boolean
    Dim strErrMsg As String
    
    strErrMsg = ""
    formSend.Hide
    If optEmail.Value Then
        On Error GoTo ErrEMail
        ' Get current state
        fAttachMailState = Options.SendMailAttach
        ' Force state to True
        Options.SendMailAttach = True
        ' Send Mail
        ActiveDocument.SendMail
        ' Restore state
        Options.SendMailAttach = fAttachMailState
    Else
        On Error GoTo ErrFax
        ' Send Fax
        Application.SendFax
    End If
    
CloseForm:
    Exit Sub
    
ErrEMail:
    If Err.Number Then strErrMsg = vbCr & Err.Description
    DisplayErrorMsg strERR_SEND_MAIL & strErrMsg
    GoTo CloseForm
    
ErrFax:
    If Err.Number Then strErrMsg = vbCr & Err.Description
    DisplayErrorMsg strERR_SEND_FAX & strErrMsg
    GoTo CloseForm
End Sub

' End MailFax Form Code Module

Attribute VB_Name = "formWizDlg"
Attribute VB_Base = "0{1D22A754-4FDD-11D0-B5E8-00AA00BBB76C}{1D22A74C-4FDD-11D0-B5E8-00AA00BBB76C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





' Resume Wizard Form

Option Explicit

' Flowchart Controls
    
Private Sub lblMap0_Click()
    JumpToPanel (0)
End Sub

Private Sub lblMap1_Click()
    JumpToPanel (1)
End Sub

Private Sub lblMap2_Click()
    JumpToPanel (2)
End Sub

Private Sub lblMap3_Click()
    JumpToPanel (3)
End Sub

Private Sub lblMap5_Click()
    JumpToPanel (5)
End Sub

Private Sub lblMap6_Click()
    JumpToPanel (6)
End Sub

Private Sub lblMap7_Click()
    JumpToPanel (7)
End Sub

Private Sub lblMap8_Click()
    JumpToPanel (8)
End Sub

Private Sub shpMap0_Click()
    JumpToPanel (0)
End Sub

Private Sub shpMap1_Click()
    JumpToPanel (1)
End Sub

Private Sub shpMap2_Click()
    JumpToPanel (2)
End Sub

Private Sub shpMap3_Click()
    JumpToPanel (3)
End Sub

Private Sub shpMap5_Click()
    JumpToPanel (5)
End Sub

Private Sub shpMap6_Click()
    JumpToPanel (6)
End Sub

Private Sub shpMap7_Click()
    JumpToPanel (7)
End Sub

Private Sub shpMap8_Click()
    JumpToPanel (8)
End Sub

Private Sub lblMapCV0_Click()
    JumpToPanel (0)
End Sub

Private Sub lblMapCV1_Click()
    JumpToPanel (1)
End Sub

Private Sub lblMapCV2_Click()
    JumpToPanel (2)
End Sub

Private Sub lblMapCV3_Click()
    JumpToPanel (3)
End Sub

Private Sub lblMapCV4_Click()
    JumpToPanel (4)
End Sub

Private Sub lblMapCV5_Click()
    JumpToPanel (5)
End Sub

Private Sub lblMapCV6_Click()
    JumpToPanel (6)
End Sub

Private Sub lblMapCV7_Click()
    JumpToPanel (7)
End Sub

Private Sub lblMapCV8_Click()
    JumpToPanel (8)
End Sub

Private Sub shpMapCV0_Click()
    JumpToPanel (0)
End Sub

Private Sub shpMapCV1_Click()
    JumpToPanel (1)
End Sub

Private Sub shpMapCV2_Click()
    JumpToPanel (2)
End Sub

Private Sub shpMapCV3_Click()
    JumpToPanel (3)
End Sub

Private Sub shpMapCV4_Click()
    JumpToPanel (4)
End Sub

Private Sub shpMapCV5_Click()
    JumpToPanel (5)
End Sub

Private Sub shpMapCV6_Click()
    JumpToPanel (6)
End Sub

Private Sub shpMapCV7_Click()
    JumpToPanel (7)
End Sub

Private Sub shpMapCV8_Click()
    JumpToPanel (8)
End Sub


' Navigator Controls
Private Sub tglAssistant_Click()
    If lAssistantId = 0 Then Exit Sub 'tglAssistant should be disabled. extra safety

    If fExitTglEvent Then
        fExitTglEvent = False
        Exit Sub
    End If

    If (iLocalState = msoWizardActInactive) Then
        'we want the button to be pressed only when user chooses
        'Help with this wizard option.
        If tglAssistant.Value Then
            fExitTglEvent = True
            tglAssistant.Value = False
        End If
        Assistant.ActivateWizard lAssistantId, msoWizardActActive
    ElseIf (iLocalState = msoWizardActActive) Then
        Assistant.ActivateWizard lAssistantId, msoWizardActInactive
    End If
    
End Sub

Private Sub cmdBack_Click()
    Select Case iCurrentPanel
        Case wzPAGE_STANDARD
            If iWizardMode = wzCV Then
                JumpToPanel (wzPAGE_PERSONAL)
            Else
                JumpToPanel (wzPAGE_ADDRESS)
            End If
        Case wzPAGE_START ' do nothing
        Case Else
            JumpToPanel (iCurrentPanel - 1)
    End Select
End Sub

Private Sub cmdNext_Click()
    Select Case iCurrentPanel
        Case wzPAGE_ADDRESS
            If iWizardMode = wzCV Then
                JumpToPanel (wzPAGE_PERSONAL)
            Else
                JumpToPanel (wzPAGE_STANDARD)
            End If
        Case wzPAGE_FINISH ' do nothing
        Case Else
            JumpToPanel (iCurrentPanel + 1)
    End Select
End Sub

Private Sub cmdCancel_Click()
    Err.Clear
    ReportError Err
End Sub

Private Sub cmdFinish_Click()

    Application.ScreenUpdating = False
    If Not (fSettingsRestored) Then
        RestoreDialogValues (True)
        If fRefreshList Then RefreshList
        If txtNewHeading.TextLength Then AddNewHeading
        'could have changed assistant options though
        System.PrivateProfileString("", strREG_SETTINGS_BASE_KEY, strREG_ASSISTANT_TIME_STAMP) = Format$(Now, "General Date")
        StoreValPref strREG_ASSISTANT_HELP, iLocalState
    Else
        If fRefreshList Then RefreshList
        If txtNewHeading.TextLength Then AddNewHeading
        If Not (fSettingsSaved) Then SaveDialogValues (True)
    End If
    If Not (fStylesCopied) Then
        If Not (FApplyResumeStyle(iResumeStyle)) Then
            fSettingsSaved = False
            JumpToPanel wzPAGE_STYLE
            Application.ScreenUpdating = True
            Exit Sub
        End If
    End If
    
    If fBalloonVisible Then
        objAssistantBalloon.Close
        fBalloonVisible = False
    End If
    CreateNewDoc (True)
    
    ' Hide Wizard and close assistant
    formWizard.Hide
    If lAssistantId Then
        Assistant.EndWizard lAssistantId, True
        InitCallBack (True)
    End If
End Sub

Private Sub cmdOK_Click()
    On Error GoTo DoneOk
        
    ' Did style change?
    If iSavedStyle = iResumeStyle Then GoTo DoneOk
    
    Application.ScreenUpdating = False
    System.Cursor = wdCursorWait
    
    If FApplyResumeStyle(iResumeStyle) Then
        ' Save style to registry
        StoreValPref "Resume Style", iResumeStyle
        
        ' Update doc variable too
        ActiveDocument.Variables("iResumeStyle").Value = CStr(iResumeStyle)
        If iSavedStyle = wzELEGANT Then
            ' Change FROM Elegant
            ' Remove extra row from elegant table for all section titles
            Selection.HomeKey wdStory
            Selection.Find.Style = strSTY_SECTION_TITLE
            Selection.Find.Text = ""
            Selection.Find.Format = True
            While Selection.Find.Execute
                Selection.Cut
                Selection.Rows.Delete
                Selection.Paste
                Selection.Range.Style = strSTY_SECTION_TITLE
                Selection.Move Unit:=wdCell
            Wend
            
            ' Change strBULLETS to vbCr in Address blocks
            Selection.HomeKey wdStory
            Selection.Find.Style = strSTY_ADDRESS1
            Selection.Find.Text = ""
            Selection.Find.Format = True
            If Selection.Find.Execute Then Selection.Frames(1).Range.Text = StrSubstituteText(Selection.Frames(1).Range.Text, strBULLET, vbCr)
            Selection.HomeKey wdStory
            Selection.Find.Style = strSTY_ADDRESS2
            If Selection.Find.Execute Then Selection.Frames(1).Range.Text = StrSubstituteText(Selection.Frames(1).Range.Text, strBULLET, vbCr)

        ElseIf iResumeStyle = wzELEGANT Then
            ' Change TO Elegant
            ' Add extra row to elegant table for all section titles
            Selection.HomeKey wdStory
            Selection.Find.Style = strSTY_SECTION_TITLE
            Selection.Find.Text = ""
            Selection.Find.Format = True
            While Selection.Find.Execute
                Selection.Cut
                Selection.Range.Style = wdStyleNormal
                Selection.Rows.Add
                Selection.SelectRow
                Selection.Cells.Merge
                Selection.Paste
                Selection.Range.Style = strSTY_SECTION_TITLE
                Selection.Move Unit:=wdCell
            Wend
            
            ' Change vbCr to strBULLET in Address blocks
            Selection.HomeKey wdStory
            Selection.Find.Style = strSTY_ADDRESS1
            Selection.Find.Text = ""
            Selection.Find.Format = True
            If Selection.Find.Execute Then Selection.Frames(1).Range.Text = StrSubstituteText(Selection.Frames(1).Range.Text, vbCr, strBULLET)
            Selection.HomeKey wdStory
            Selection.Find.Style = strSTY_ADDRESS2
            If Selection.Find.Execute Then Selection.Frames(1).Range.Text = StrSubstituteText(Selection.Frames(1).Range.Text, vbCr, strBULLET)
        End If
        Application.ScreenRefresh
    End If
    
DoneOk:
    ' Done with wizard panel
    Selection.HomeKey wdStory
    System.Cursor = wdCursorNormal
    Application.ScreenUpdating = True
    formWizard.Hide
End Sub

Private Sub cmdCancelReVisit_Click()
    ' Restore previously selected style
    iResumeStyle = iSavedStyle
    formWizard.Hide
End Sub


' Page 1
Private Sub optEntryMode_Click()
    If fInitializingForm Then Exit Sub
    iResumeMode = wzENTRY
    InitCategoryLabels (iResumeMode)
    fRefreshList = True
End Sub

Private Sub optChronMode_Click()
    If fInitializingForm Then Exit Sub
    iResumeMode = wzCHRON
    InitCategoryLabels (iResumeMode)
    fRefreshList = True
End Sub

Private Sub optFuncMode_Click()
    If fInitializingForm Then Exit Sub
    iResumeMode = wzFUNC
    InitCategoryLabels (iResumeMode)
    fRefreshList = True
End Sub

Private Sub optProfMode_Click()
    If fInitializingForm Then Exit Sub
    iResumeMode = wzPROF
    InitCategoryLabels (iResumeMode)
    fRefreshList = True
End Sub

' Page 3
Private Sub chkStandard0_Click()
    If fInitializingForm Then Exit Sub
    rgfCategory(rgsStandardIndex(iResumeMode, 0)) = chkStandard0.Value
    fRefreshList = True
End Sub

Private Sub chkStandard1_Click()
    If fInitializingForm Then Exit Sub
    rgfCategory(rgsStandardIndex(iResumeMode, 1)) = chkStandard1.Value
    fRefreshList = True
End Sub

Private Sub chkStandard2_Click()
    If fInitializingForm Then Exit Sub
    rgfCategory(rgsStandardIndex(iResumeMode, 2)) = chkStandard2.Value
    fRefreshList = True
End Sub

Private Sub chkStandard3_Click()
    If fInitializingForm Then Exit Sub
    rgfCategory(rgsStandardIndex(iResumeMode, 3)) = chkStandard3.Value
    fRefreshList = True
End Sub

Private Sub chkStandard4_Click()
    If fInitializingForm Then Exit Sub
    rgfCategory(rgsStandardIndex(iResumeMode, 4)) = chkStandard4.Value
    fRefreshList = True
End Sub

Private Sub chkStandard5_Click()
    If fInitializingForm Then Exit Sub
    rgfCategory(rgsStandardIndex(iResumeMode, 5)) = chkStandard5.Value
    fRefreshList = True
End Sub

Private Sub chkStandard6_Click()
    If fInitializingForm Then Exit Sub
    rgfCategory(rgsStandardIndex(iResumeMode, 6)) = chkStandard6.Value
    fRefreshList = True
End Sub

Private Sub chkStandard7_Click()
    If fInitializingForm Then Exit Sub
    rgfCategory(rgsStandardIndex(iResumeMode, 7)) = chkStandard7.Value
    fRefreshList = True
End Sub

Private Sub chkStandard8_Click()
    If fInitializingForm Then Exit Sub
    rgfCategory(rgsStandardIndex(iResumeMode, 8)) = chkStandard8.Value
    fRefreshList = True
End Sub


' Page 4
Private Sub chkOption0_Click()
    If fInitializingForm Then Exit Sub
    rgfCategory(rgsOptionIndex(iResumeMode, 0)) = chkOption0.Value
    fRefreshList = True
End Sub

Private Sub chkOption1_Click()
    If fInitializingForm Then Exit Sub
    rgfCategory(rgsOptionIndex(iResumeMode, 1)) = chkOption1.Value
    fRefreshList = True
End Sub

Private Sub chkOption2_Click()
    If fInitializingForm Then Exit Sub
    rgfCategory(rgsOptionIndex(iResumeMode, 2)) = chkOption2.Value
    fRefreshList = True
End Sub

Private Sub chkOption3_Click()
    If fInitializingForm Then Exit Sub
    rgfCategory(rgsOptionIndex(iResumeMode, 3)) = chkOption3.Value
    fRefreshList = True
End Sub

Private Sub chkOption4_Click()
    If fInitializingForm Then Exit Sub
    rgfCategory(rgsOptionIndex(iResumeMode, 4)) = chkOption4.Value
    fRefreshList = True
End Sub

Private Sub chkOption5_Click()
    If fInitializingForm Then Exit Sub
    rgfCategory(rgsOptionIndex(iResumeMode, 5)) = chkOption5.Value
    fRefreshList = True
End Sub

Private Sub chkOption6_Click()
    If fInitializingForm Then Exit Sub
    rgfCategory(rgsOptionIndex(iResumeMode, 6)) = chkOption6.Value
    fRefreshList = True
End Sub

Private Sub chkOption7_Click()
    If fInitializingForm Then Exit Sub
    rgfCategory(rgsOptionIndex(iResumeMode, 7)) = chkOption7.Value
    fRefreshList = True
End Sub

Private Sub chkOption8_Click()
    If fInitializingForm Then Exit Sub
    rgfCategory(rgsOptionIndex(iResumeMode, 8)) = chkOption8.Value
    fRefreshList = True
End Sub


' Page 5
Private Sub cmdAdd_Click()
    If txtNewHeading.TextLength Then AddNewHeading
    txtNewHeading.SetFocus
End Sub

Private Sub lstHeadings_Enter()
    With lstHeadings
        If .ListCount = 0 Then
            ' If list is empty, then jump to cmdNext button
            cmdNext.SetFocus
        ElseIf .ListIndex = -1 Then
            ' If nothing selected, then select first item
            .ListIndex = 0
        End If
    End With
End Sub

Private Sub cmdRemove_Click()
    Dim iSelected As Integer
    Dim iLast As Integer
    Dim strSelected As String
    Dim iSelectedStyle As Integer
    Dim i As Integer
    Dim objControls As Object
    
    On Error GoTo NothingSelected
    
    ' Has row been selected?
    With lstHeadings
        iLast = .ListCount - 1
        If iLast = -1 Then GoTo NothingSelected
        iSelected = .ListIndex
        If iSelected < 0 Then GoTo NothingSelected
        ' Save selected row
        strSelected = .Value
        iSelectedStyle = .List(iSelected, 1)
            
        ' Remove selected row
        On Error GoTo -1 'reset error trap
        On Error GoTo FatalError
        .RemoveItem (iSelected)
        ' Reset index if at bottom of list
        If iLast > 0 Then 'entries still exist in the listbox
            If (iSelected = iLast) Then
                .ListIndex = iSelected - 1 'last entry got deleted
            Else
                .ListIndex = iSelected 'select the same entry again.
            End If
        End If

    End With
    
    ' If category was ADDed, we're done
    If iSelectedStyle = wzADDED Then Exit Sub
    
    ' Locate and uncheck ChkBox control
    ' Is it a standard category?
    Set objControls = formWizard.mpgWizardPage.Pages(wzPAGE_STANDARD).Controls
    For i = 0 To rgsStandardCount(iResumeMode)
        With objControls(strCHK_STANDARD & i)
            If .Caption = strSelected Then
                .Value = False
                rgfCategory(rgsStandardIndex(iResumeMode, i)) = False
                Exit Sub
            End If
        End With
    Next i
    
    ' Or is it an option category?
    Set objControls = formWizard.mpgWizardPage.Pages(wzPAGE_OPTION).Controls
    For i = 0 To rgsOptionCount(iResumeMode)
        With objControls(strCHK_OPTION & i)
            If .Caption = strSelected Then
                .Value = False
                rgfCategory(rgsOptionIndex(iResumeMode, i)) = False
                Exit Sub
            End If
        End With
    Next i
    
    ' Shouldn't ever get here...
    Exit Sub
FatalError:
    Exit Sub
NothingSelected:
    DisplayErrorMsg strERR_NOTHING_SELECTED
End Sub

Private Sub cmdMoveDown_Click()
    ' This procedure actually moves the "next" row up
    Dim iHeadingFlag As Integer
    Dim strHeadingText As String
    Dim iCurrent As Integer
    Dim iLast As Integer
    
    On Error GoTo ErrorTrap
    
    With lstHeadings
        iCurrent = .ListIndex + 1
        iLast = .ListCount
        If iCurrent = iLast Then Exit Sub ' No need to move
        ' Save next row
        strHeadingText = .List(iCurrent, 0)
        iHeadingFlag = .List(iCurrent, 1)
        ' Remove next row
        .RemoveItem (iCurrent)
        ' Insert one row down
        .AddItem strHeadingText, (iCurrent - 1)
        .List(iCurrent - 1, 1) = iHeadingFlag
        .ListIndex = iCurrent
    End With
ErrorTrap:
End Sub

Private Sub cmdMoveUp_Click()
    Dim iHeadingFlag As Integer
    Dim strHeadingText As String
    Dim iCurrent As Integer
    
    On Error GoTo ErrorTrap
    
    With lstHeadings
        iCurrent = .ListIndex
        If iCurrent = 0 Then Exit Sub  ' No need to move
        strHeadingText = .List(iCurrent, 0)
        iHeadingFlag = .List(iCurrent, 1)
        .RemoveItem (iCurrent)
        iCurrent = iCurrent - 1
        .AddItem strHeadingText, (iCurrent)
        .List(iCurrent, 1) = iHeadingFlag
        .ListIndex = iCurrent
    End With
ErrorTrap:
End Sub

' Page 6
Private Sub optProfessional_Click()
    If iResumeStyle <> wzPROFESSIONAL Then
        Select Case iResumeStyle
            Case wzCONTEMPORARY
                shpShadowContemporary.Visible = False
            Case wzELEGANT
                shpShadowElegant.Visible = False
        End Select
        shpShadowProfessional.Visible = True
        iResumeStyle = wzPROFESSIONAL
        fStylesCopied = False
    End If
End Sub

Private Sub optContemporary_Click()
    If iResumeStyle <> wzCONTEMPORARY Then
        Select Case iResumeStyle
            Case wzPROFESSIONAL
                shpShadowProfessional.Visible = False
            Case wzELEGANT
                shpShadowElegant.Visible = False
        End Select
        shpShadowContemporary.Visible = True
        iResumeStyle = wzCONTEMPORARY
        fStylesCopied = False
    End If
End Sub

Private Sub optElegant_Click()
    If iResumeStyle <> wzELEGANT Then
        Select Case iResumeStyle
            Case wzPROFESSIONAL
                shpShadowProfessional.Visible = False
            Case wzCONTEMPORARY
                shpShadowContemporary.Visible = False
        End Select
        shpShadowElegant.Visible = True
        iResumeStyle = wzELEGANT
        fStylesCopied = False
    End If
End Sub

Private Sub imgProfessional_Click()
    If iResumeStyle <> wzPROFESSIONAL Then
        Select Case iResumeStyle
            Case wzCONTEMPORARY
                shpShadowContemporary.Visible = False
            Case wzELEGANT
                shpShadowElegant.Visible = False
        End Select
        shpShadowProfessional.Visible = True
        iResumeStyle = wzPROFESSIONAL
        optProfessional.Value = True
        optProfessional.SetFocus
        fStylesCopied = False
    End If
End Sub

Private Sub imgContemporary_Click()
    If iResumeStyle <> wzCONTEMPORARY Then
        Select Case iResumeStyle
            Case wzPROFESSIONAL
                shpShadowProfessional.Visible = False
            Case wzELEGANT
                shpShadowElegant.Visible = False
        End Select
        shpShadowContemporary.Visible = True
        iResumeStyle = wzCONTEMPORARY
        optContemporary.Value = True
        optContemporary.SetFocus
        fStylesCopied = False
    End If
End Sub

Private Sub imgElegant_Click()
    If iResumeStyle <> wzELEGANT Then
        Select Case iResumeStyle
            Case wzPROFESSIONAL
                shpShadowProfessional.Visible = False
            Case wzCONTEMPORARY
                shpShadowContemporary.Visible = False
        End Select
        shpShadowElegant.Visible = True
        iResumeStyle = wzELEGANT
        optElegant.Value = True
        optElegant.SetFocus
        fStylesCopied = False
    End If
End Sub

Private Sub JumpToPanel(iNewPanel As Integer)
    Dim objControls As Object
    Dim lNewFormTop As Long
    Dim lNewFormLeft As Long
    
    ' Don't allow jump if CallBack mode, or if no change in Panel Number
    If iCurrentPanel = iNewPanel Or fWizardCallBack Then Exit Sub

    If FPageLostFocus Then
        Set objControls = formWizard.Controls
        ' Deselect current flow chart marker
        objControls(strShpMap & iCurrentPanel).BackColor = COLOR_DARKGREY
        objControls(strLblMap & iCurrentPanel).FONTBOLD = False
            
        ' Select new flow chart marker
        objControls(strShpMap & iNewPanel).BackColor = COLOR_GREEN
        objControls(strLblMap & iNewPanel).FONTBOLD = True
            
        ' Change to new active page
        iCurrentPanel = iNewPanel
        formWizard.mpgWizardPage.Value = iCurrentPanel
        If fBalloonVisible Then
            lNewFormTop = formWizard.Top
            lNewFormLeft = formWizard.Left
            
            If (lNewFormTop <> lFormTop) Or (lNewFormLeft <> lFormLeft) Then
                lFormTop = lNewFormTop
                lFormLeft = lNewFormLeft
                objAssistantBalloon.SetAvoidRectangle lFormLeft, lFormTop, lFormLeft + lFormWidth, lFormTop + lFormHeight
            End If
            objAssistantBalloon.Close
            objAssistantBalloon.Text = rgstrAssistantMsg(iNewPanel)
            objAssistantBalloon.Show
        End If
        
        ' Special Case
        If iNewPanel = wzPAGE_HEADING_LIST And fRefreshList Then RefreshList
        PageSetFocus
    End If
End Sub

Private Function FPageLostFocus() As Boolean
Dim fRet As Boolean
    fRet = True
    Select Case iCurrentPanel
        Case wzPAGE_START
            cmdBack.Enabled = True
            If Not (fSettingsRestored) Then RestoreDialogValues (True)
        Case wzPAGE_STYLE
            If Not (fStylesCopied) Then
                If Not (FApplyResumeStyle(iResumeStyle)) Then fRet = False
            End If
        Case wzPAGE_HEADING_LIST
            If txtNewHeading.TextLength Then AddNewHeading
        Case wzPAGE_FINISH
            cmdNext.Enabled = True
            fSettingsSaved = False
    End Select
    ' Resume Wizard always returns true
    FPageLostFocus = fRet
End Function

Private Sub PageSetFocus()
    Select Case iCurrentPanel
        Case wzPAGE_START
            cmdNext.SetFocus
            cmdBack.Enabled = False
        Case wzPAGE_ADDRESS
            With txtName
                .SelStart = 0
                .SelLength = .TextLength
                .SetFocus
            End With
        Case wzPAGE_HEADING_LIST
            With txtNewHeading
                .SelStart = 0
                .SelLength = .TextLength
                .SetFocus
            End With
        Case wzPAGE_STYLE
            Select Case iResumeStyle
                Case wzPROFESSIONAL
                    formWizard.optProfessional.SetFocus
                Case wzCONTEMPORARY
                    formWizard.optContemporary.SetFocus
                Case wzELEGANT
                    formWizard.optElegant.SetFocus
                Case Else
                    iResumeStyle = wzPROFESSIONAL
                    formWizard.optProfessional.SetFocus
            End Select
        Case wzPAGE_FINISH
            cmdFinish.SetFocus
            cmdNext.Enabled = False
            If Not (fSettingsSaved) Then SaveDialogValues (True)
    End Select
End Sub

Private Sub RefreshList()
    Dim i As Integer
    Dim iCatIndex As Integer
    Dim iListIndex As Integer
    Dim iInsertPoint As Integer
    Dim objCurrent As ListBox
    Dim iListCount As Integer
    
    Set objCurrent = lstHeadings
    
    ' Clear the ListBoxes, except those added by user (flag = wzADDED)
    
    With objCurrent
        iListCount = .ListCount
        For i = 1 To iListCount
            If .List(iListCount - i, 1) <> wzADDED Then .RemoveItem (iListCount - i)
        Next i
    End With
    
    ' Init insertion point to first row
    iInsertPoint = 0
    ' Add any selected standard categories
    For i = 0 To rgsStandardCount(iResumeMode)
        iCatIndex = rgsStandardIndex(iResumeMode, i)
        If rgfCategory(iCatIndex) Then
            ' Current Headings List
            lstHeadings.AddItem rgstrCategory(iCatIndex)
            iListIndex = lstHeadings.ListCount - 1
            lstHeadings.List(iListIndex, 1) = iCatIndex
        End If
    Next i
    
    ' Add any selected option categories
    For i = 0 To rgsOptionCount(iResumeMode)
        iCatIndex = rgsOptionIndex(iResumeMode, i)
        If rgfCategory(iCatIndex) Then
            ' Current Headings List
            lstHeadings.AddItem rgstrCategory(iCatIndex)
            iListIndex = lstHeadings.ListCount - 1
            lstHeadings.List(iListIndex, 1) = iCatIndex
        End If
    Next i
    
    fRefreshList = False
End Sub

Sub AddNewHeading()
    Dim iIndex As Integer

    ' Insert text into list, set second column value to -1
    lstHeadings.AddItem txtNewHeading.Text
    iIndex = lstHeadings.ListCount - 1
    lstHeadings.List(iIndex, 1) = wzADDED
    txtNewHeading.Text = ""

End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If (CloseMode = vbFormControlMenu) Then
        Err.Clear
        ReportError Err
    End If
End Sub

' End Resume Wizard Form Code

' InQuest injected base64 decoded content
' Szjej

INQUEST-PP=macro
