Attribute VB_Name = "BneBrowser"
Attribute VB_Base = "0{4B29BD9C-453A-4D10-8953-FBB7F53E5D8A}{E7AC879E-09EF-4DAC-BADC-3D32DBB96230}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




'+=======================================================================+
'|   Copyright (c) 2014 Oracle Corporation, Redwood Shores, CA, USA      |
'|                      All rights reserved.                             |
'+=======================================================================+
'|  HISTORY                                                              |
'|  28-Aug-2014 poramas created.                                         |
'+=======================================================================+
'RCS_ID = $Header :$
Option Explicit
Option Base 1
Const BROWSER = 1
Const DIALOG = 2
Const WINDOW_STATUS_EVENT = "EVENT"
Const WINDOW_STATUS_DONE = "Done"
Const PROGRESS_MESSAGE = "Working "
Dim WithEvents WebBrowser As WebBrowser
Attribute WebBrowser.VB_VarHelpID = -1
Dim WithEvents BneDocument As HTMLDocument
Attribute BneDocument.VB_VarHelpID = -1
Dim m_Document As IHTMLDocument2
Dim m_EventCallBacks As Collection
Dim m_Document_OnClick As String
Dim m_Document_Complete As String
Dim m_UploadBegin As String
Dim m_UploadComplete As String
Dim m_caption As String
Dim m_URL As String
Dim m_LookAndFeel As Integer
Dim b_UploadBegin As Boolean
Dim b_UploadComplete As Boolean
Dim m_SessionName As String
Dim m_SessionState As Boolean
Dim m_SessionTicket As String
Dim m_documentId As String
Dim m_language As String
Dim m_appsServletAgent As String
Dim m_strMsgHeader As String
Dim m_strMsgBody As String
Dim m_strMsgAction1 As String
Dim m_strMsgAction2 As String
Dim m_SheetRef As Object
Public Property Let sessionName(ByVal sessionName As String)
    m_SessionName = sessionName
End Property
Public Property Let sessionState(ByVal sessionState As Boolean)
    m_SessionState = sessionState
End Property
Public Property Let sessionTicket(ByVal sessionTicket As String)
    m_SessionTicket = sessionTicket
End Property
Public Property Let LookAndFeel(ByRef LookAndFeel As Integer)
    m_LookAndFeel = LookAndFeel
End Property
Public Property Let DOCUMENT_ONCLICK(ByVal value As String)
    m_Document_OnClick = value
End Property
Public Property Let DOCUMENT_COMPLETE(ByVal value As String)
    m_Document_Complete = value
End Property
Public Property Let UPLOADBEGIN(ByVal value As String)
    m_UploadBegin = value
End Property
Public Property Let UPLOADCOMPLETE(ByVal value As String)
    m_UploadComplete = value
End Property
Public Sub errorMessage(strMsgHeader As String, strMsgBody As String, strMsgAction1 As String, strMsgAction2 As String)
    m_strMsgHeader = strMsgHeader
    m_strMsgBody = strMsgBody
    m_strMsgAction1 = strMsgAction1
    m_strMsgAction2 = strMsgAction2
End Sub
Public Sub setSession(ByRef sessionName As String, ByRef sessionState As Boolean, ByRef sessionTicket As String)
    m_SessionName = sessionName
    m_SessionState = sessionState
    m_SessionTicket = sessionTicket
End Sub
Public Sub setDocumentId(documentId As String)
    m_documentId = documentId
End Sub
Public Sub setLanguage(ByRef language As String)
    m_language = language
End Sub
Public Sub setAppsServletAgent(appsServletAgent As String)
    m_appsServletAgent = appsServletAgent
End Sub
'Event callbacks are used to trigger procedures from events in the web browser.
'addEventCallback adds an event to watch for and the procedure to run if that event occurs.
'   param: l_sProcedure - is the procedure name to run
'   param: l_sEventName - is the name of the status text event to look for.
'   param: l_oSheet - is the name of the sheet within which the l_sProcedure lies.
Public Sub addEventCallBack(l_sProcedure As String, l_sEventName As String, Optional l_oSheet As Object)
    If l_oSheet Is Nothing Then
       m_EventCallBacks.add l_sProcedure, l_sEventName
    Else
       If Len(l_oSheet.Parent.path) = 0 Then
          m_EventCallBacks.add "'" & l_oSheet.Parent.FullName & "'" & "!" & l_oSheet.CodeName & "." & l_sProcedure, l_sEventName
       Else
          m_EventCallBacks.add l_oSheet.CodeName & "." & l_sProcedure, l_sEventName
       End If
    End If
End Sub
'Retrieve a callback procedure name based on the event name or number.
Public Function getEventCallBack(vEvent As Variant) As String
    On Error Resume Next
    Dim tmp As Variant
    tmp = m_EventCallBacks.Item(vEvent)
    If tmp = Empty Then
        If Right(vEvent, 5) = "_uixr" Then
            Dim s As String
            s = Left(vEvent, Len(vEvent) - 5)
            tmp = m_EventCallBacks.Item(s)
        End If
    End If
    getEventCallBack = tmp
End Function
'Remove a callback procedure name based on the event name or number.
Public Sub removeEventCallBack(vEvent As Variant)
    On Error Resume Next
    If Right(vEvent, 5) = "_uixr" Then
        Dim s As String
        s = Left(vEvent, Len(vEvent) - 5)
        m_EventCallBacks.Remove (s)
    Else
        m_EventCallBacks.Remove (vEvent)
    End If
End Sub
'Remove all callbacks.
Public Sub clearAllEventCallBacks()
    Do Until m_EventCallBacks.count = 0
        m_EventCallBacks.Remove 1
    Loop
End Sub
'Run a given callback.
Private Sub runCallback(strCallBack As String)
    Dim strSubName As String
    strSubName = getEventCallBack(strCallBack)
    If (Not WebBrowser Is Nothing) Then
    Set m_Document = WebBrowser.Document
    Set BneDocument = m_Document
    End If
    If Len(strSubName) > 0 And (Not m_Document Is Nothing) Then
'Remove the event so that it can only be called once
       removeEventCallBack strCallBack
       Application.Run strSubName, m_Document
    End If
End Sub
Public Property Get Document() As Object
    Set Document = m_Document
End Property
Public Sub Navigate(ByVal location As String)
    Dim clsProperties As New BneVBAProperties
    Dim clsProperty As BneVBAProperty
On Error Resume Next
    If m_SessionTicket <> "" Then
        If InStr(location, "ICX_SESSION_ID") = 0 Then
            location = location & "&ICX_SESSION_ID=" & m_SessionTicket
        End If
    Else
        If InStr(location, "ICX_SESSION_ID") = 0 Then
           Set clsProperty = clsProperties.getProperty("ICX_SESSION_ID")
           If Not clsProperty Is Nothing Then
              location = location & "&ICX_SESSION_ID=" & clsProperty.value
           End If
        End If
    End If
    WebBrowser.Navigate location
End Sub
Public Sub NavigatePost(ByVal sURL As String, ByVal oPostData As BneVBAParameters)
On Error Resume Next
    Dim vPost     As Variant
    Dim vHeader   As Variant
    Dim vFlags    As Variant
    Dim vTarget   As Variant
    Dim abyte()   As Byte
    Dim iParamCnt As Long
    Dim sPostData As String
    Dim clsProperties As New BneVBAProperties
    Dim clsProperty As BneVBAProperty
'    Add the session ticket parameter if required
    If isEmpty(oPostData.Item("ICX_SESSION_ID")) Then
        If Len(m_SessionTicket) > 0 Then
            oPostData.add "ICX_SESSION_ID", m_SessionTicket
        Else
           Set clsProperty = clsProperties.getProperty("ICX_SESSION_ID")
           If Not clsProperty Is Nothing Then
              oPostData.add "ICX_SESSION_ID", clsProperty.value
           End If
        End If
    End If
'  Add the tzOffset parameter
    If isEmpty(oPostData.Item("tzOffset")) Then
        oPostData.add "tzOffset", getTimeZoneOffset()
    End If
'  Add the embedded parameter so that the server know this is a viewer call
    If isEmpty(oPostData.Item("bne:embedded")) Then
        oPostData.add "bne:embedded", "true"
    End If
'  Add the required documentId parameter
    If isEmpty(oPostData.Item("bne:documentId")) Then
        oPostData.add "bne:documentId", m_documentId
    End If
'  Add the language parameter
    If isEmpty(oPostData.Item("bne:language")) Then
        oPostData.add "bne:language", m_language
    End If
    oPostData.add "bne:login_host", m_appsServletAgent
'    Build the parameters as a URL encoded string
    For iParamCnt = 1 To oPostData.count
        If iParamCnt > 1 Then sPostData = sPostData & "&"
        sPostData = sPostData & oPostData.Item(iParamCnt).name & "=" & UrlEncodeUtf8(oPostData.Item(iParamCnt).value)
    Next iParamCnt
    vHeader = "Content-Type: application/x-www-form-urlencoded" & vbCrLf
'    Convert VBA Unicode string to a byte array - all multi-byte characters must be encoded or they will be lost here
    abyte = StrConv(sPostData, vbFromUnicode)
    vPost = abyte
'Add Encoding Detail
    If InStr(1, sURL, "?") > 0 Then
        sURL = sURL & "&"
    Else
        sURL = sURL & "?"
    End If
    sURL = sURL & "bne:encoding=UTF-8"
    Call WebBrowser.Navigate(sURL, vFlags, vTarget, vPost, vHeader)
End Sub
Private Sub UserForm_Initialize()
    m_LookAndFeel = BROWSER
    b_UploadBegin = False
    b_UploadComplete = False
    Set WebBrowser = Me.Controls.add("Shell.Explorer.2", "WebBrowser")
    With WebBrowser
        .MenuBar = False
        .StatusBar = False
        .AddressBar = False
        .RegisterAsBrowser = True
        .Silent = False
    End With
    Set m_Document = WebBrowser.Document
    Set BneDocument = m_Document
    UserForm_Resize
    Set m_EventCallBacks = New Collection
' Set the default error messages
m_strMsgHeader = "Error"
m_strMsgBody = "The connection to the server is unavailable."
m_strMsgAction1 = "Please contact your support representative."
' It was founded that if in Excel Options >> Show all windows in taskbar was not ticked,
' issue didn't exist anymore and set excel as below can solve issue. Now I can only find this way to fix.
' The other part of fix is in WebADI.xls >> BneBootStrap >> exitBootstrap()
    If Application.ShowWindowsInTaskbar = True Then
        Application.ShowWindowsInTaskbar = False
        Application.ShowWindowsInTaskbar = True
    End If
End Sub
Private Sub UserForm_Resize()
    ResizeForm
End Sub
Sub ResizeForm()
    On Error Resume Next
    WebBrowser.Move 0, 0, Me.InsideWidth, Me.InsideHeight
End Sub
Private Sub UserForm_Terminate()
    Call runCallback("CLOSE")
    Me.Controls.Remove "WebBrowser"
'Attempt to deallocate any objects that may be hanging around
    Set WebBrowser = Nothing
    Set BneDocument = Nothing
    Set m_Document = Nothing
    Set m_EventCallBacks = Nothing
    Set m_SheetRef = Nothing
End Sub
Private Sub WebBrowser_ProgressChange(ByVal Progress As Long, ByVal ProgressMax As Long)
    On Error Resume Next
    Dim caption As String
    If Progress > 0 Then
        caption = Me.caption
        If Left(caption, Len(PROGRESS_MESSAGE)) <> PROGRESS_MESSAGE Then
            caption = PROGRESS_MESSAGE & " "
        End If
        Me.caption = caption & "."
    Else
        Me.caption = m_caption
    End If
End Sub
Private Sub WebBrowser_WindowClosing(ByVal IsChildWindow As Boolean, Cancel As Boolean)
    Unload Me
End Sub
Private Sub WebBrowser_WindowSetResizable(ByVal Resizable As Boolean)
    If Resizable = False Then
        borderStyle = 3
    End If
End Sub
Private Sub WebBrowser_DocumentComplete(ByVal pDisp As Object, URL As Variant)
    On Error Resume Next
    Set m_Document = WebBrowser.Document
    Set BneDocument = m_Document
    If (Not m_Document Is Nothing) Then
      m_caption = StripURLFromTitle(m_Document.Title)
      Me.caption = m_caption
      If m_LookAndFeel = DIALOG Then
        m_Document.body.Style.Border = "1"
        m_Document.body.Style.margin = "5"
        m_Document.body.Style.padding = "0"
        m_Document.body.Style.overflow = "auto"
      End If
      If m_Document_Complete <> "" Then
        Application.Run m_Document_Complete, pDisp, m_Document
      End If
     If Mid(URL, 1, 6) = "res://" Then
          m_Document.body.innerHTML = WebBrowser_DocumentComplete_ERROR_MESSAGE
'No page is shown.  Allow the message to be displayed, but then fire the error event so it can be handled by any flows that use it (ie Upload)
          m_Document.parentWindow.execScript "window.setTimeout(""window.status='EVENT=ERROR'"", 20000);", "javascript"
      End If
    End If
End Sub
Public Function StripURLFromTitle(lsTitle As String) As String
   On Error Resume Next
   lsTitle = Trim(lsTitle)
   If (InStr(1, lsTitle, "http://", vbTextCompare) = 1 Or InStr(1, lsTitle, "https://", vbTextCompare) = 1) And InStr(lsTitle, " - ") > 0 Then
      lsTitle = Mid(lsTitle, InStr(lsTitle, " - ") + 3)
   End If
   StripURLFromTitle = lsTitle
End Function
Public Function WebBrowser_DocumentComplete_ERROR_MESSAGE() As String
   Dim sCloseText As String
   Dim sCopyrightText As String
sCloseText = "Close"
sCopyrightText = "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved."
   WebBrowser_DocumentComplete_ERROR_MESSAGE = _
   "<br>" & _
   "<table border='0' cellpadding='0' cellspacing='0' width='100%'>" & _
   "  <tr><td style='font-family:Arial;color:#cc0000; font-size:16pt'>" & m_strMsgHeader & "</td></tr>" & _
   "  <tr><td style='background-color:#336699' height='1' colspan='3'></td></tr>" & _
   "  <tr><td width='100%' align='left'><br>" & _
   "      <span style='font-family:Arial;color:#000000; font-size:10pt'><b>" & m_strMsgBody & "</b></span></td></tr>" & _
   "  <tr><td><span style='font-family:Arial;color:#000000; font-size:10pt'>" & m_strMsgAction1 & "</span><br><br></td></tr>" & _
   "  <tr><td><span style='font-family:Arial;color:#000000; font-size:10pt'>" & m_strMsgAction2 & "</span><br><br></td></tr>" & _
   "  <tr><td style='background-color:#336699' height='1' colspan='3'></td></tr>" & _
   "  <tr><td colspan='3' align='center'><span id='bne:messages'></span></td></tr>" & _
   "  <tr><td colspan='3' align='right'><span id=""BNE:CANCEL""><input type='button' value='" & sCloseText & "' onclick='javascript:return false;'></span></td></tr>" & _
   "  <tr><td width='100%' align='left'><br><span style='font-family:Arial;color:#000000; font-size:9pt'>" & sCopyrightText & "</span></td></tr>" & _
   "</table>"
End Function
'Handles events that occur in the browser objects StatusText bar.
'This subroutine is used as the handle for telling VBA when the upload is to begin or has completed.
'This subroutine relies on the m_SheetRef variable being set to the current sheet which is performing the upload.
Private Sub WebBrowser_StatusTextChange(ByVal l_sStatusText As String)
    Dim l_sCallBack As String
    l_sCallBack = getWindowStatusEvent(l_sStatusText)
    Call runCallback(l_sCallBack)
End Sub
Private Function getWindowStatusEvent(ByVal statusText As String)
    If statusText <> "" And statusText <> WINDOW_STATUS_DONE Then
        If InStr(1, statusText, WINDOW_STATUS_EVENT & "=") Then
            getWindowStatusEvent = UCase(Mid(statusText, 7))
        Else
            getWindowStatusEvent = ""
        End If
    End If
End Function
Private Function BneDocument_onclick() As Boolean
    Dim curWnd As HTMLWindow2
    Dim curElement As IHTMLElement
    Dim elementName As String
    Set curWnd = BneDocument.parentWindow
    Set curElement = curWnd.event.srcElement
    elementName = curElement.id
    If m_Document_OnClick <> "" Then
        Application.Run m_Document_OnClick
    End If
    ' It is the best workaround so far without asking Microsoft for a Design Change Request
    If Application.ShowWindowsInTaskbar = True Then
        Application.ShowWindowsInTaskbar = False
        Application.ShowWindowsInTaskbar = True
    End If
    BneDocument_onclick = True
    If InStr(elementName, "SubmitButton") > 0 Then
        BneDocument_onclick = False
    ElseIf Not curElement.parentElement Is Nothing Then
        If Not IsNull(curElement.parentElement.getAttribute("onclick")) Then
            If curElement.parentElement.getAttribute("onclick") <> "" Then
                BneDocument_onclick = False
            End If
        End If
    ElseIf Not IsNull(curElement.getAttribute("onclick")) Then
        If curElement.getAttribute("onclick") <> "" Then
            BneDocument_onclick = True
        End If
    End If
End Function
Public Sub setSheetRef(sheet As Object)
    Set m_SheetRef = sheet
End Sub
'-- Event occurs when the user selects the close window or alt-pf4
'-- this procedure will call any event that is registered with bne:browserclose
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    Dim strCallBack As String
    If CloseMode = vbFormControlMenu Then
       strCallBack = getEventCallBack("BNE:BROWSERCLOSE")
       If Len(strCallBack) > 0 Then
          removeEventCallBack "BNE:BROWSERCLOSE"
          Application.Run strCallBack
          Cancel = 1
       Else
'Attempt to deallocate any objects that may be hanging around
'This stops pagefaults from occuring when MSHTML calls back and finds the form has disappeared
           Set WebBrowser = Nothing
           Set BneDocument = Nothing
           Set m_Document = Nothing
           Set m_EventCallBacks = Nothing
           Set m_SheetRef = Nothing
       End If
    End If
End Sub

Attribute VB_Name = "BneDownloadHTTPHandler"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'+=======================================================================+
'|   Copyright (c) 2014 Oracle Corporation, Redwood Shores, CA, USA      |
'|                      All rights reserved.                             |
'+=======================================================================+
'|  HISTORY                                                              |
'|  28-Aug-2014 poramas created.                                         |
'+=======================================================================+
'RCS_ID = $Header :$
Option Explicit
Dim m_xmlHttp As Object
Dim m_downloadFile As String
Dim m_errorMessages As BneVBAMessages

Public Sub Initialize(ByRef xmlHttpRequest As Object, downloadFile As String)
   Set m_xmlHttp = xmlHttpRequest
   m_downloadFile = downloadFile
   Set m_errorMessages = New BneVBAMessages
End Sub
' This is default method of this class
' The following is the first line of this sub routine
'--------------------------------
' Attribute OnReadyStateChange.VB_UserMemId = 0
'--------------------------------
' This line will not be visible in the VBA IDE. If this method
' needs to be modified, after making changes, export this class and
' open it using a text editor and add this attribute line as the first line
' of this sub routine and import it back to to modules. This lines
' makes this default method
Sub OnReadyStateChange()
Attribute OnReadyStateChange.VB_UserMemId = 0
   If m_xmlHttp.readyState = 4 Then
      If m_xmlHttp.Status = 200 Then
        
        Dim liFn As Integer
        Dim aBytes() As Byte
        m_xmlHttp.OnReadyStateChange = Nothing
        ThisWorkbook.BneReDownloadStatusChange "format", "", m_xmlHttp.getResponseHeader("content-downloaded")
        
        aBytes = m_xmlHttp.responseBody
        liFn = FreeFile
        Open m_downloadFile For Binary Access Write As #liFn
        Put #liFn, , aBytes
        Close #liFn
        ThisWorkbook.BneReDownloadStatusChange "", "", ""
      Else
        addErrorMessage "Error during create document, received http status " & m_xmlHttp.Status
        ThisWorkbook.BneReDownloadStatusChange "error", "", m_errorMessages.xml
     End If
   End If
End Sub

Sub addErrorMessage(errorMessage As String)
    Dim clsMessage As New BneVBAMessage
    clsMessage.msgSource = "BneDownloadHTTPHandler"
    clsMessage.msgCause = "Error: " & " VBAErrNo: " & Err.Number & "VBADesc " & Err.Description
    clsMessage.msgText = errorMessage
    clsMessage.msgType = BNE_ERROR
    m_errorMessages.addMessage clsMessage
End Sub
Attribute VB_Name = "BneLayout"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'+=======================================================================+
'|   Copyright (c) 2014 Oracle Corporation, Redwood Shores, CA, USA      |
'|                      All rights reserved.                             |
'+=======================================================================+
'|  HISTORY                                                              |
'|  28-Aug-2014 poramas created.                                         |
'|  16-Jun-2016 poramas 23294585: R:TST1226: LOVS/UPLOAD NOT WORKING WITH|
'|                      NEWLY CREATED LAYOUT IN OOXML                    |
'+=======================================================================+
'RCS_ID = $Header :$
Option Explicit
Option Base 1
Private m_objSheet As Worksheet
Private m_clsLayout As BneLayoutBlock
'Private m_clsStyleSheet As BneStyleSheet
Private m_blnReadOnly As Boolean
Private m_layoutImage As String
Private m_colAllBlocks As Collection
'============================================================================================================
Private Sub Class_Initialize()
On Error Resume Next
'Set m_clsStyleSheet = New BneStyleSheet
Set m_clsLayout = New BneLayoutBlock
Set m_colAllBlocks = New Collection

m_blnReadOnly = False
m_layoutImage = ""

Dim blockIndex As Integer
Dim blockColIndex As Integer
Dim parentId As Integer
Dim blockAvail As String
Dim colName As String
Dim tmpStr As String
Dim parentBlock As BneLayoutBlock
Dim blockCol As BneLayoutColumn
Dim clsBlock As BneLayoutBlock

Err.Number = 0
blockIndex = GetFirstBlockIndex
blockAvail = ActiveWorkbook.CustomDocumentProperties("BLOCK" & blockIndex)
Do While (CLng(Err.Number) <> 5)
    Set clsBlock = New BneLayoutBlock
    clsBlock.LayoutElement = ActiveWorkbook.CustomDocumentProperties("BLOCK" & blockIndex & "_LAYOUTELEM")
    clsBlock.Orientation = ActiveWorkbook.CustomDocumentProperties("BLOCK" & blockIndex & "_ORIENTATION")
    parentId = ActiveWorkbook.CustomDocumentProperties("BLOCK" & blockIndex & "_PARENT")
    
    Err.Number = 0
    blockColIndex = 0
    colName = ActiveWorkbook.CustomDocumentProperties("BLOCK" & blockIndex & "_COL" & blockColIndex)
    Do While (CLng(Err.Number) <> 5)
        Set blockCol = New BneLayoutColumn
        tmpStr = ActiveWorkbook.CustomDocumentProperties(colName & "_INTERFACE_COL")
        If (tmpStr = "TRUE") Then
            blockCol.isInterfaceColumn = True
        Else
            blockCol.isInterfaceColumn = False
        End If
        blockCol.ColumnName = ActiveWorkbook.CustomDocumentProperties(colName & "_COL_NAME")
        blockCol.InterfaceName = ActiveWorkbook.CustomDocumentProperties(colName & "_INTERFACE_NAME")
        blockCol.dataType = ActiveWorkbook.CustomDocumentProperties(colName & "_DATATYPE")
        blockCol.interfaceColName = colName
        clsBlock.addLayoutColumn blockCol
        
        If parentId <> 0 Then
            parentBlock = m_colAllBlocks.Item(parentId)
            parentBlock.addLayoutBlock clsBlock
        End If
    
        Err.Number = 0
        blockColIndex = blockColIndex + 1
        colName = ActiveWorkbook.CustomDocumentProperties("BLOCK" & blockIndex & "_COL" & blockColIndex)
    Loop
    m_colAllBlocks.add clsBlock
    
    Err.Number = 0
    blockIndex = GetNextBlockIndex(blockIndex)
    blockAvail = ActiveWorkbook.CustomDocumentProperties("BLOCK" & blockIndex)
Loop


End Sub
Private Sub Class_Terminate()
    Set m_clsLayout = Nothing
    Set m_objSheet = Nothing
'    Set m_clsStyleSheet = Nothing
    Set m_colAllBlocks = Nothing
End Sub
Public Property Let ReadOnly(blnReadOnly As Boolean)
    Dim clsBlock As BneLayoutBlock
    m_blnReadOnly = blnReadOnly
    If Not m_clsLayout Is Nothing Then
        m_clsLayout.applyReadOnlyStyle blnReadOnly
    End If
End Property
Public Property Get ReadOnly() As Boolean
    ReadOnly = m_blnReadOnly
End Property
Public Property Get LayoutImage() As Boolean
    LayoutImage = m_layoutImage
End Property
Public Property Get Layout() As BneLayoutBlock
    Set Layout = m_clsLayout
End Property
Public Property Let Layout(objLayout As BneLayoutBlock)
    Set m_clsLayout = objLayout
End Property
'Public Property Get StyleSheet() As BneStyleSheet
'    Set StyleSheet = m_clsStyleSheet
'End Property
'Public Property Let StyleSheet(objStyleSheet As BneStyleSheet)
'    Set m_clsStyleSheet = objStyleSheet
'End Property
Public Function getLayoutBlocks() As Collection
    Set getLayoutBlocks = m_colAllBlocks
End Function


Attribute VB_Name = "BneLayoutBlock"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'+=======================================================================+
'|   Copyright (c) 2014 Oracle Corporation, Redwood Shores, CA, USA      |
'|                      All rights reserved.                             |
'+=======================================================================+
'|  HISTORY                                                              |
'|  28-Aug-2014 poramas created.                                         |
'+=======================================================================+
'RCS_ID = $Header :$
Option Explicit
Option Base 1
'============================================================================================================
'Private Variables
Private m_colLayoutBlocks As Collection
Private m_colLayoutColumns As Collection
Private m_strLayoutElement As String
Private m_strOrientation As String
Private m_intBlockId As Integer
Private m_clsParentBlock As BneLayoutBlock
'============================================================================================================
'Constructor/Destructor
Public Sub Class_Initialize()
    Set m_colLayoutBlocks = New Collection
    Set m_colLayoutColumns = New Collection
    m_strOrientation = "VERTICAL"
    m_intBlockId = 0
End Sub
Public Sub Class_Terminate()
    Set m_colLayoutBlocks = Nothing
    Set m_colLayoutColumns = Nothing
    Set m_clsParentBlock = Nothing
End Sub
'============================================================================================================
'Property Methods
Public Property Let LayoutElement(strLayoutElement As String)
    m_strLayoutElement = strLayoutElement
End Property
Public Property Get LayoutElement() As String
    LayoutElement = m_strLayoutElement
End Property
Public Property Let Orientation(strOrientation As String)
    m_strOrientation = strOrientation
End Property
Public Property Get Orientation() As String
    Orientation = m_strOrientation
End Property
Public Property Get CountColumns() As Integer
    Dim intCount As Integer
    intCount = 0
    Dim clsLayoutColumn As BneLayoutColumn
    If m_colLayoutColumns.count > 0 Then
        For Each clsLayoutColumn In m_colLayoutColumns
            If clsLayoutColumn.countChildColumns > 0 Then
                intCount = intCount + clsLayoutColumn.countChildColumns
            Else
                intCount = intCount + 1
            End If
        Next
    End If
    CountColumns = intCount
End Property
Public Property Get layoutColumns() As Collection
    Set layoutColumns = m_colLayoutColumns
End Property
Public Property Get layoutBlocks() As Collection
    Set layoutBlocks = m_colLayoutBlocks
End Property
Public Property Let parentBlock(ByVal clsParentBlock As BneLayoutBlock)
    Set m_clsParentBlock = clsParentBlock
End Property
Public Property Get parentBlock() As BneLayoutBlock
    Set parentBlock = m_clsParentBlock
End Property
Public Property Let BlockId(intBlockid As Integer)
    m_intBlockId = intBlockid
End Property
Public Property Get BlockId() As Integer
    BlockId = m_intBlockId
End Property
'============================================================================================================
Public Sub addLayoutColumn(clsLayoutColumn As BneLayoutColumn)
    On Error Resume Next

    m_colLayoutColumns.add clsLayoutColumn, clsLayoutColumn.interfaceColName
End Sub
Public Sub addLayoutBlock(clsLayoutBlock As BneLayoutBlock)
    On Error Resume Next
    clsLayoutBlock.parentBlock = Me
    m_colLayoutBlocks.add clsLayoutBlock, str(clsLayoutBlock.BlockId)
End Sub
Private Function getLowestBlockRow(clsLayoutBlock As BneLayoutBlock)
    Dim intLastRow As Long
    Dim clsParentBlock As BneLayoutBlock
    Set clsParentBlock = clsLayoutBlock.parentBlock
    If Not clsParentBlock Is Nothing Then
       intLastRow = clsParentBlock.EndRow
       If clsParentBlock.hasBlockText Then
           intLastRow = intLastRow + 1
       End If
    End If
    Dim clsParentParentBlock As BneLayoutBlock
    Set clsParentParentBlock = clsParentBlock.parentBlock
    If Not clsParentParentBlock Is Nothing Then
        Dim clsChildBlock As BneLayoutBlock
        For Each clsChildBlock In clsParentParentBlock.layoutBlocks
            If clsChildBlock.EndRow > intLastRow Then
                intLastRow = clsChildBlock.EndRow
            End If
        Next
    End If
    getLowestBlockRow = intLastRow
End Function
Public Function getPreviousSibling() As BneLayoutBlock
    Dim clsSibling As BneLayoutBlock
    Dim clsPrevBlock As BneLayoutBlock
    Dim intSibEndCol As Integer
    intSibEndCol = m_intEndCol
    If (Not m_clsParentBlock Is Nothing) And (m_clsParentBlock.countBlocks > 1) Then
        For Each clsSibling In m_clsParentBlock.layoutBlocks
            If clsSibling.EndCol > intSibEndCol Then
                intSibEndCol = clsSibling.EndCol
                Set clsPrevBlock = clsSibling
            End If
        Next
    End If
    Set getPreviousSibling = clsPrevBlock
End Function


Attribute VB_Name = "BneLayoutColumn"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'+=======================================================================+
'|   Copyright (c) 2014 Oracle Corporation, Redwood Shores, CA, USA      |
'|                      All rights reserved.                             |
'+=======================================================================+
'|  HISTORY                                                              |
'|  28-Aug-2014 poramas created.                                         |
'+=======================================================================+
'RCS_ID = $Header :$
Option Explicit
Option Base 1
'============================================================================================================
'Private Variables
Private m_blnInterfaceColumn As Boolean
Private m_strColumnName As String
Private m_strInterfaceColName As String
Private m_strInterfaceName As String
Private m_colChildColumns As Collection
Private m_intDataType As Integer
'============================================================================================================
'Constructor/Destructor
Private Sub Class_Initialize()
    Set m_colChildColumns = New Collection
End Sub
Public Sub Class_Terminate()
    Set m_colChildColumns = Nothing
End Sub
Public Property Let InterfaceName(strInterfaceName As String)
    m_strInterfaceName = strInterfaceName
End Property
Public Property Get InterfaceName() As String
    InterfaceName = m_strInterfaceName
End Property

Public Sub addChildColumn(clsLayoutColumn As BneLayoutColumn)
    On Error Resume Next
    clsLayoutColumn.PromptSpan = m_intPromptSpan
    clsLayoutColumn.HintSpan = m_intHintSpan
    clsLayoutColumn.DataSpan = m_intDataSpan
    If m_blnReadOnly = True Then
        clsLayoutColumn.ReadOnly = True
    End If
    m_colChildColumns.add clsLayoutColumn
End Sub
Public Property Get childColumns() As Collection
    Set childColumns = m_colChildColumns
End Property
Public Sub removeChildColumn(strKey As String)
    On Error Resume Next
    m_colChildColumns.Remove strKey
End Sub
Public Property Get countChildColumns() As Integer
    On Error Resume Next
    countChildColumns = m_colChildColumns.count
End Property
Public Property Let dataType(intTypeID As Integer)
    m_intDataType = intTypeID
End Property
Public Property Get dataType() As Integer
    dataType = m_intDataType
End Property
Public Property Let isInterfaceColumn(blnIsInterfaceColumn As Boolean)
    m_blnInterfaceColumn = blnIsInterfaceColumn
End Property
Public Property Get isInterfaceColumn() As Boolean
    isInterfaceColumn = m_blnInterfaceColumn
End Property
Public Property Let ColumnName(strName As String)
    m_strColumnName = strName
End Property
Public Property Get ColumnName() As String
    ColumnName = m_strColumnName
End Property
Public Property Let interfaceColName(strName As String)
    m_strInterfaceColName = strName
End Property
Public Property Get interfaceColName() As String
    interfaceColName = m_strInterfaceColName
End Property


Attribute VB_Name = "BneSummarySheet"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'+=======================================================================+
'|   Copyright (c) 2004 Oracle Corporation, Redwood Shores, CA, USA      |
'|                 All rights reserved.                                  |
'+=======================================================================+
'|CLASS:       BneSummarySheet                                           |
'|DESCRIPTION: Creates and Controls the summary sheet.                   |
'+=======================================================================+
Option Explicit
Option Base 1
'============================================================================================================
'Private Variables
'============================================================================================================
'Set Methods
'============================================================================================================
'Get Methods
Public Function getSummarySheet() As Worksheet
   Dim objSummarySheet As Worksheet
   Dim strSummarySheet As String
   Dim objActiveSheet As Worksheet
strSummarySheet = "Message Summary"
   On Error Resume Next
   Set objSummarySheet = Worksheets(strSummarySheet)
   On Error GoTo 0
   If objSummarySheet Is Nothing Then
      Set objActiveSheet = ActiveSheet
      Set objSummarySheet = Worksheets.add(, Worksheets(Worksheets.count))
      FormatSummary objSummarySheet
   End If
   objSummarySheet.Activate
   ActiveWindow.DisplayGridlines = False
   Set getSummarySheet = objSummarySheet
End Function

'============================================================================================================
'Public Methods
'This method makes the summary sheet visible and active
Public Sub Show()
   Dim objSummarySheet As Worksheet
   Set objSummarySheet = getSummarySheet
   objSummarySheet.Activate
End Sub
'This method applies the summary sheet format to the passed sheet object

Public Sub Clear()
    Dim objSheet As Worksheet
    Dim blnProtection As Boolean
    Dim objActiveSheet As Object
    Dim strYes As String
    Set objSheet = getSummarySheet
strYes = "Yes"
    If objSheet.Range("CLEAR_MESSAGES").value <> strYes Then
        Exit Sub
    End If
    Set objActiveSheet = ActiveSheet
    objSheet.Activate
    blnProtection = objSheet.ProtectionMode
    objSheet.Unprotect
    objSheet.Range("Sheet").EntireRow.Select
    Selection.ClearContents
    If Selection.Rows.count > 10 Then
        objSheet.Range( _
            Cells(objSheet.Range("Sheet").Row + 1, objSheet.Range("Sheet").Column), _
            Cells(objSheet.Range("Sheet").Row + objSheet.Range("Sheet").Rows.count - 10, objSheet.Range("Sheet").Column) _
            ).EntireRow.Select
        Selection.Delete
    End If
    objSheet.Range("CLEAR_MESSAGES").Select
    If blnProtection = True Then
        objSheet.Protect
    End If
    objActiveSheet.Activate
End Sub
Public Sub AddMessages(objSheet As Worksheet, clsmessages As BneVBAMessages)
   Dim clsMsg As BneVBAMessage
   Dim objSummarySheet As Worksheet
   For Each clsMsg In clsmessages.Messages
      addMessage objSheet, clsMsg
   Next
End Sub
Public Sub addMessage(objSheet As Worksheet, clsMsg As BneVBAMessage)
   Dim lngNextRow As Long
   Dim objSummarySheet As Worksheet
   Dim strCellRef As String
   If clsMsg.msgType = "DATA" Then
      Exit Sub
   End If
   Set objSummarySheet = getSummarySheet
   lngNextRow = NextEnterableRow(objSummarySheet)
   objSummarySheet.Cells(lngNextRow, 2).NumberFormat = "@"
   If Not objSheet Is Nothing And clsMsg.msgType = "ERROR" Then
        If Len(clsMsg.MsgRange) <= 0 Then
            clsMsg.MsgRange = "BNE_MESSAGES"
        End If
        If clsMsg.msgIdx > 0 Then
            strCellRef = objSheet.Cells(objSheet.Range(clsMsg.MsgRange).Cells(clsMsg.msgIdx).Row, objSheet.Range(clsMsg.MsgRange).Column).Address
            ActiveSheet.Hyperlinks.add objSummarySheet.Cells(lngNextRow, 2), Address:="", SubAddress:="'" & objSheet.name & "'!" & strCellRef, TextToDisplay:=objSheet.name
        Else
            ActiveSheet.Hyperlinks.add objSummarySheet.Cells(lngNextRow, 2), Address:="", SubAddress:="'" & objSheet.name & "'!" & clsMsg.MsgRange, TextToDisplay:=objSheet.name
        End If
   End If
   objSummarySheet.Cells(lngNextRow, 3).value = clsMsg.msgTypeUserName
   objSummarySheet.Cells(lngNextRow, 4).value = clsMsg.msgText
   objSummarySheet.Cells(lngNextRow, 5).value = Date
   objSummarySheet.Cells(lngNextRow, 6).value = Time
End Sub
Private Function NextEnterableRow(objSummarySheet As Worksheet) As Long
    Dim lngLastRow As Long
    Dim objType As Range
    Dim objInsertRange As Range
    Dim blnProtection As Boolean
    Set objType = objSummarySheet.Range("Message_Type")
    On Error Resume Next
    lngLastRow = objType.Cells.Find("*", SearchOrder:=xlByRows, SearchDirection:=xlPrevious).Row + 1
    On Error GoTo 0
    If lngLastRow = 0 Then
        lngLastRow = objType.Row
    End If
    If (lngLastRow + 1) >= (objType.Row + objType.Rows.count) Then
        blnProtection = objSummarySheet.ProtectionMode
        objSummarySheet.Unprotect
        Set objInsertRange = objSummarySheet.Range(objSummarySheet.Cells(objType.Rows.count + objType.Row - 1, 1), objSummarySheet.Cells(objType.Rows.count + objType.Row - 1, 1))
        objInsertRange.offset(0, 0).EntireRow.Resize(1).Insert
        If blnProtection = True Then
            objSummarySheet.Protect
        End If
    End If
    NextEnterableRow = lngLastRow
End Function

Public Sub FormatSummary(objSummarySheet As Worksheet)
    Dim objSheet As Worksheet
    Dim strText As String
    Dim strYesNO As String
    Dim blnProtect As Boolean
    Set objSheet = objSummarySheet
objSheet.name = "Message Summary"
    objSheet.Cells.Select
    
    objSheet.Rows.RowHeight = 11.25
    objSheet.Cells(1, 1).Select
    ActiveWindow.RangeSelection.Columns(1).ColumnWidth = 2
    Selection.EntireRow.hidden = True
strText = "Message Summary"
    objSheet.Cells(4, 2).Select
    Selection.value = strText
    Selection.Font.ColorIndex = 47
    Selection.Font.FontStyle = "bold"
    Selection.Font.name = "Arial"
    Selection.Font.size = 12
    objSheet.Range(objSheet.Cells(4, 2), objSheet.Cells(4, 6)).Select
    With Selection.Borders(xlEdgeBottom)
       .LineStyle = xlContinuous
       .Weight = xlThin
       .ColorIndex = 40
    End With
    objSheet.Rows(4).RowHeight = 15
strText = "Clear messages on upload"
    objSheet.Cells(6, 2).Select
    Selection.value = strText
    Selection.Font.name = "Tahoma"
    Selection.Font.size = 9
    objSheet.Cells(6, 4).Select
    objSheet.Names.add name:="CLEAR_MESSAGES", RefersTo:=Selection
strText = "Yes"
    strYesNO = strText
strText = "No"
    strYesNO = strYesNO & "," & strText
    With Selection.Validation
        .add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=strYesNO
    End With

    objSheet.Cells(6, 4).Select
    Selection.Font.name = "Tahoma"
    Selection.Font.size = 9
    Selection.value = "Yes"

strText = "Sheet"
    objSheet.Cells(8, 2).Select
    Selection.value = strText
    Selection.ColumnWidth = 15
    Selection.Font.name = "Tahoma"
    Selection.Font.size = 9
    Selection.Font.FontStyle = "bold"
    Selection.Interior.Color = RGB(242, 244, 247)
    Selection.BorderAround Weight:=xlThin
    ActiveCell.Borders.Color = RGB(238, 238, 238)
        
strText = "Message Type"
    objSheet.Cells(8, 3).Select
    Selection.value = strText
    Selection.ColumnWidth = 15
    Selection.Font.name = "Tahoma"
    Selection.Font.size = 9
    Selection.Font.FontStyle = "bold"
    Selection.Interior.Color = RGB(242, 244, 247)
    Selection.BorderAround Weight:=xlThin
    ActiveCell.Borders.Color = RGB(238, 238, 238)
    
strText = "Message"
    objSheet.Cells(8, 4).Select
    Selection.value = strText
    Selection.ColumnWidth = 30
    Selection.Font.name = "Tahoma"
    Selection.Font.size = 9
    Selection.Font.FontStyle = "bold"
    Selection.Interior.Color = RGB(242, 244, 247)
    Selection.BorderAround Weight:=xlThin
    ActiveCell.Borders.Color = RGB(238, 238, 238)
    
strText = "Date"
    objSheet.Cells(8, 5).Select
    Selection.value = strText
    Selection.ColumnWidth = 15
    Selection.Font.name = "Tahoma"
    Selection.Font.size = 9
    Selection.Font.FontStyle = "bold"
    Selection.Interior.Color = RGB(242, 244, 247)
    Selection.BorderAround Weight:=xlThin
    ActiveCell.Borders.Color = RGB(238, 238, 238)
    
strText = "Time"
    objSheet.Cells(8, 6).Select
    Selection.value = strText
    Selection.ColumnWidth = 15
    Selection.Font.name = "Tahoma"
    Selection.Font.size = 9
    Selection.Font.FontStyle = "bold"
    Selection.Interior.Color = RGB(242, 244, 247)
    Selection.BorderAround Weight:=xlThin
    ActiveCell.Borders.Color = RGB(238, 238, 238)
    
    
    objSheet.Range(Cells(9, 2), Cells(18, 6)).Select
strText = ""
    Selection.value = strText
    Selection.Font.name = "Tahoma"
    Selection.Font.size = 9
    Selection.Borders.Weight = xlThin
    Selection.Borders.Color = RGB(238, 238, 238)
    
    objSheet.Range(Cells(8, 2), Cells(18, 6)).Select
    Selection.Rows.Group
    Selection.AutoFilter
    
    Dim colRange As Range
    Dim col As Integer
    col = 2
    Set colRange = objSheet.Range(Cells(9, col), Cells(18, col))
    objSheet.Names.add name:="Sheet", RefersTo:=colRange
    col = col + 1
    Set colRange = objSheet.Range(Cells(9, col), Cells(18, col))
    objSheet.Names.add name:="Message_Type", RefersTo:=colRange
    col = col + 1
    Set colRange = objSheet.Range(Cells(9, col), Cells(18, col))
    objSheet.Names.add name:="Message", RefersTo:=colRange
    col = col + 1
    Set colRange = objSheet.Range(Cells(9, col), Cells(18, col))
    objSheet.Names.add name:="Date", RefersTo:=colRange
    col = col + 1
    Set colRange = objSheet.Range(Cells(9, col), Cells(18, col))
    objSheet.Names.add name:="Time", RefersTo:=colRange
    col = col + 1
    
    objSheet.Range("CLEAR_MESSAGES").Select
End Sub







Attribute VB_Name = "BneUploadSettings"
Attribute VB_Base = "0{15C0B4AB-E77D-4ABC-BC02-9C00CEEAF82F}{B48821AF-DE3B-4195-9093-2164BCD6487F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


'+=======================================================================+
'|   Copyright (c) 2014 Oracle Corporation, Redwood Shores, CA, USA      |
'|                      All rights reserved.                             |
'+=======================================================================+
'|  HISTORY                                                              |
'|  28-Aug-2014 poramas created.                                         |
'+=======================================================================+
'RCS_ID = $Header :$
Option Explicit
Option Base 1
Public resultUplSettings As Boolean
Private Sub UserForm_Initialize()
    Me.BNE_ZIP_APPLICATION.AddItem "WinZip"
    Me.BNE_ZIP_APPLICATION.AddItem "7Zip"
    Me.BNE_ZIP_APPLICATION.AddItem "None"
    Me.BNE_ZIP_APPLICATION.value = "None"
    Me.BNE_ZIP_APPLICATION = ""
    Me.BNE_ZIP_EXECUTABLE = ""
    BneAddReference "Scripting", "{420B2830-E718-11CF-893D-00A0C9054228}"
End Sub
Private Sub BNE_BROWSE_Click()
   With Application
       .DefaultFilePath = Environ("ProgramFiles")
   End With
   ChDir Environ("ProgramFiles")
   Me.BNE_ZIP_EXECUTABLE.value = Application.GetOpenFilename("Executables (*.exe), *.exe", 1, "Select Compressing Executable", False)
'     ' http://support.microsoft.com/kb/161930 How to use GetOpenFilename
   If Me.BNE_ZIP_EXECUTABLE = "FALSE" Then
      Me.BNE_ZIP_EXECUTABLE.value = " "
   End If
End Sub
Private Sub UPL_SETTINGS_CANCEL_Click()
     resultUplSettings = False
     Hide
End Sub
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = vbFormControlMenu Then
       Cancel = True
       resultUplSettings = False
       Hide
    End If
End Sub
Private Sub UPL_SETTINGS_OK_Click()
     Dim result As Boolean
     Dim sMsg As String
     resultUplSettings = False
     result = False
     If Me.BNE_ZIP_APPLICATION.textLength <= 0 Then
       result = MsgBox("Compressing application has not been selected.", vbCritical)
       Exit Sub
     End If
     If Me.BNE_ZIP_EXECUTABLE.textLength <= 0 And Me.BNE_ZIP_APPLICATION <> "None" Then
       result = MsgBox("Compressing executable has not been defined.", vbCritical)
       Exit Sub
     End If
     If Me.BNE_ZIP_APPLICATION.ListIndex = -1 Then
       result = MsgBox("Compressing application has not been selected.")
      Exit Sub
     End If
     If Me.BNE_ZIP_APPLICATION.text = "None" Then
      Me.BNE_ZIP_EXECUTABLE.value = ""
      resultUplSettings = True
      Hide
      Exit Sub
     End If
     Dim fso As FileSystemObject
     Set fso = New FileSystemObject
     If Not fso.FileExists(Me.BNE_ZIP_EXECUTABLE) Then
       resultUplSettings = True
       Hide
       sMsg = "Compressing executable: &EXECUTABLE does not exists. Please enter the correct Executable in Oracle -> Settings Menu."
       sMsg = Replace(sMsg, "&EXECUTABLE", Me.BNE_ZIP_EXECUTABLE.value)
       MsgBox (sMsg)
       Exit Sub
     End If
     If (Not (isValidZipAppAndExe(Me.BNE_ZIP_APPLICATION, Me.BNE_ZIP_EXECUTABLE))) Then
        sMsg = "&ZIPAPP and &EXECUTABLE do not correspond or are not valid."
        sMsg = Replace(sMsg, "&EXECUTABLE", Me.BNE_ZIP_EXECUTABLE.value)
        sMsg = Replace(sMsg, "&ZIPAPP", Me.BNE_ZIP_APPLICATION.value)
        MsgBox (sMsg)
        Exit Sub
     End If
     resultUplSettings = True
     Hide
End Sub
Attribute VB_Name = "BneVBAGraph"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'+=======================================================================+
'|   Copyright (c) 2014 Oracle Corporation, Redwood Shores, CA, USA      |
'|                      All rights reserved.                             |
'+=======================================================================+
'|  HISTORY                                                              |
'|  28-Aug-2014 poramas created.                                         |
'|  20-May-2015 poramas 21101110: TST1225:GENERATE VARIANCE GRAPH GIVES  |
'|                                  A RUN-TIME ERROR IN OOXML DOCUMENT   |
'|  27-May-2015 poramas 21101621: TST1225:MODIFY GRAPH TYPE IS NOT SHOWN |
'|                      WHEN GRAPH ALL IS INVOKED IN OOXML               |
'|  04-Mar-2016 jsiripur 22315891: OOXML:GRAPH SHEET NAME                |
'|                       IS NOT TRANSLATED                               |
'+=======================================================================+
'RCS_ID = $Header :$
'| Storage class for a Graph definition                                  |
'| Use BneVBAGraphs to retrieve an individual graph definition.          |
'+=======================================================================+
Option Explicit
Option Compare Text
Option Base 1
'============================================================================================================
'Private Variables
Private msGraphTitle As String
Private msCategoryLabel As String
Private msValueLabel As String
Private msSeriesLabel As String
Private msGraphType As String
Private mbAutoGraph As Boolean
Private msGraphDimensions As String
Private mrCategoryRange As Range
Private mnSheetNumber As Integer
Private mclsSeriesRanges As Collection
Private mclsSeriesNames As Collection
Private mclsDefaultCategoryColNames As Collection
Private mclsDefaultDataColNames As Collection
Private msConcatSeparator As String
Private mnHeadingRow As Integer
Private msTopMenuName As String
'============================================================================================================
'Class Constructor/Destructor
'============================================================================================================
Private Sub Class_Initialize()
    Set mclsSeriesRanges = New Collection
    Set mclsSeriesNames = New Collection
    Set mclsDefaultCategoryColNames = New Collection
    Set mclsDefaultDataColNames = New Collection
    Set mrCategoryRange = Nothing
    mnSheetNumber = 1
End Sub
Private Sub Class_Terminate()
    Set mclsSeriesRanges = Nothing
    Set mclsSeriesNames = Nothing
    Set mclsDefaultCategoryColNames = Nothing
    Set mclsDefaultDataColNames = Nothing
End Sub
'============================================================================================================
'Class Properties
'============================================================================================================
Public Property Get graphTitle() As String
    graphTitle = msGraphTitle
End Property
Public Property Let graphTitle(sGraphTitle As String)
   On Error Resume Next
   msGraphTitle = sGraphTitle
End Property
Public Property Get valueLabel() As String
    valueLabel = msValueLabel
End Property
Public Property Let valueLabel(sValueLabel As String)
   On Error Resume Next
   msValueLabel = sValueLabel
End Property
Public Property Get seriesLabel() As String
   On Error Resume Next
   seriesLabel = msSeriesLabel
End Property
Public Property Let seriesLabel(sSeriesLabel As String)
   On Error Resume Next
   msSeriesLabel = sSeriesLabel
End Property
Public Property Get categoryLabel() As String
    categoryLabel = msCategoryLabel
End Property
Public Property Let categoryLabel(sCategoryLabel As String)
   On Error Resume Next
   msCategoryLabel = sCategoryLabel
End Property
Public Property Let GraphDimensions(sGraphDimensions As String)
   On Error Resume Next
   msGraphDimensions = sGraphDimensions
End Property
Public Property Get GraphDimensions() As String
    GraphDimensions = msGraphDimensions
End Property
Public Property Let GraphType(sGraphType As String)
   On Error Resume Next
   msGraphType = sGraphType
End Property
Public Property Get GraphType() As String
    GraphType = msGraphType
End Property
Public Property Let categoryRange(rCategoryRange As Range)
   On Error Resume Next
   Set mrCategoryRange = rCategoryRange
End Property
Public Property Get categoryRange() As Range
    Set categoryRange = mrCategoryRange
End Property
Public Property Let sheetNumber(nSheetNumber As Integer)
   On Error Resume Next
   mnSheetNumber = nSheetNumber
End Property
Public Property Get sheetNumber() As Integer
    sheetNumber = mnSheetNumber
End Property
Public Property Let concatSeparator(sConcatSeparator As String)
    msConcatSeparator = sConcatSeparator
End Property
Public Property Get concatSeparator() As String
    concatSeparator = msConcatSeparator
End Property
Public Property Let autoGraph(bAutoGraph As Boolean)
    mbAutoGraph = bAutoGraph
End Property
Public Property Get autoGraph() As Boolean
    autoGraph = mbAutoGraph
End Property
Public Property Let topMenuName(sTopMenuName As String)
    msTopMenuName = sTopMenuName
End Property
Public Property Get topMenuName() As String
    topMenuName = msTopMenuName
End Property
'============================================================================================================
'Class Methods
'============================================================================================================
Public Sub AddRange(seriesRange As Object, seriesName As String)
    If TypeName(seriesRange) = "RANGE" Then
        mclsSeriesRanges.add seriesRange
        mclsSeriesNames.add seriesName
    End If
End Sub
Public Sub AddDefaultCategoryColName(categoryColName As String)
    mclsDefaultCategoryColNames.add categoryColName
End Sub
Public Sub AddDefaultDataColName(dataColName As String)
    mclsDefaultDataColNames.add dataColName
End Sub
Public Sub SetGraphHeadingRow(sheet As Worksheet, InterfaceCols As Collection)
Dim linesRange As Range
Dim offset As Integer
    Set linesRange = BneRetrieveLinesBlockRange(sheet, InterfaceCols)
' Determine the offset to the heading row above the lines range
    If BneIsLinesBlockHintDisplayed(InterfaceCols) Then
        offset = -2
    Else
        offset = -1
    End If
    mnHeadingRow = offset + linesRange.Row
End Sub
'=================================================================
'GraphVariation
'=================================================================
Public Sub AddVariations(primaryRangeObject As Object, theBook As Workbook)
On Error Resume Next
    Dim primarySheet As Worksheet
    Dim primarySheetNumber As Integer
    primarySheetNumber = -1
    Dim primarySheetCol As Range
    Dim primaryRange As Range
    Dim CurrentSheet As Worksheet
    Dim currentSheetNumber As Integer
    Dim currentSheetCol As Range
    Dim variationSheets As Collection
    Dim objProperties As New BneVBAProperties
    Dim objProperty As New BneVBAProperty
    If TypeName(primaryRangeObject) = "RANGE" Then
        Set primaryRange = primaryRangeObject
        Set primarySheet = primaryRange.Worksheet
        objProperties.setSheet Me
        Set objProperty = objProperties.getProperty("contentgroupsequence")
        If Not objProperty Is Nothing And Not isEmpty(objProperty.value) Then
           primarySheetNumber = CInt(objProperty.value)
           Set objProperty = Nothing
        End If
        Set variationSheets = New Collection
        variationSheets.add primarySheet
        If primarySheet.FilterMode = True Then
            primarySheet.ShowAllData
        End If
        For Each CurrentSheet In theBook.Worksheets
            If (StrComp(CurrentSheet.name, primarySheet.name) <> 0) And (CurrentSheet.Visible = xlSheetVisible) Then
                objProperties.setSheet Me
                Set objProperty = objProperties.getProperty("contentgroupsequence")
                If Not objProperty Is Nothing And Not isEmpty(objProperty.value) Then
                   currentSheetNumber = CInt(objProperty.value)
                   Set objProperty = Nothing
                End If
                If currentSheetNumber = primarySheetNumber Then
                    variationSheets.add CurrentSheet
                    If CurrentSheet.FilterMode = True Then
                        CurrentSheet.ShowAllData
                    End If
                End If
            End If
        Next
        For Each primarySheetCol In primaryRange.Columns
            For Each CurrentSheet In variationSheets
                Set currentSheetCol = CurrentSheet.Range(primarySheetCol.Address)
                AddRange currentSheetCol, CurrentSheet.name
            Next
        Next
        Set variationSheets = Nothing
        Set objProperties = Nothing
    End If
End Sub
' ========================================================================
Public Sub BuildGraph(theBook As Workbook)
' ========================================================================
Dim DataSht As Object
Dim DataRange As Range
Dim GrpSht As Object
' Sheet Protection Variables
Dim pDataDrawingObjects As Boolean
Dim pDataContents As Boolean
Dim pDataScenarios As Boolean
' Error Messages
Dim sMessageErrorTitle As String
Dim sMessageErrorPrompt As String
Dim sMessageErrorExcelFilters As String
' Setup Error Handler
On Error GoTo ErrorBuildGraph
' Check to see if there is something to graph
    If mclsSeriesRanges.count < 1 Then
'        Nothing to graph so exit
        Exit Sub
    End If
' Initialise variables
    Application.ScreenUpdating = False
    Application.EnableCancelKey = xlDisabled
' Get handles to the sheets
    Set DataRange = mclsSeriesRanges.Item(1)
    Set DataSht = DataRange.Worksheet
    On Error GoTo ErrorBuildGraph
Application.StatusBar = "Graph - Getting worksheet values"
' Save Data Sheet Protection Settings Before Unprotecting the Sheet
    With DataSht
        pDataDrawingObjects = .ProtectDrawingObjects
        pDataContents = .ProtectContents
        pDataScenarios = .ProtectScenarios
        If pDataDrawingObjects Or pDataContents Or pDataScenarios Then
            .Unprotect
        End If
    End With
' Get the Category Range
    If mrCategoryRange Is Nothing Then
        Set mrCategoryRange = setupRangeFromDefaults(DataSht, mclsDefaultCategoryColNames)
    End If
' Create New Graph Sheet
    Set GrpSht = theBook.Charts.add
' Format graph to suit data in existing worksheets
Application.StatusBar = "Graph - Applying general formats"
    GrpSht.Activate
    GrpSht.Select
    GrpSht.ChartArea.ClearContents
    GrpSht.name = GetChartName(theBook, mnSheetNumber)
    SetupGraphType GrpSht, msGraphType, msGraphDimensions
    SetupGraphData GrpSht
    SetupGraphProperties GrpSht
    SetupGraphProperties GrpSht
    On Error GoTo ErrorBuildGraph
' Reset Environment
GLSABuildGraphEnd:
    On Error Resume Next
    Application.StatusBar = False
    Application.ScreenUpdating = True
' Restore Protection Settings After Unprotecting and Using the Sheet
    With DataSht
        If pDataDrawingObjects Or pDataContents Or pDataScenarios Then
            .Protect DrawingObjects:=pDataDrawingObjects, contents:=pDataContents, Scenarios:=pDataScenarios
        End If
    End With
    GrpSht.ChartArea.Select
    GrpSht.Activate
    Set DataRange = Nothing
    Set DataSht = Nothing
    Set GrpSht = Nothing
    Exit Sub
ErrorBuildGraph:
sMessageErrorTitle = "Graph Error"
sMessageErrorPrompt = "Graph cannot be created."
sMessageErrorExcelFilters = "Attempt to create graph with Excel filtering off."
    MsgBox sMessageErrorPrompt & vbCrLf & vbCrLf & sMessageErrorExcelFilters & " : " & vbCrLf & vbCrLf & Err.Number & ":" & Err.Description, vbCritical, sMessageErrorTitle
    Resume GLSABuildGraphEnd
End Sub
Public Sub SetupDefaultGraphData(sheet As Worksheet, seriesName As String)
' Get the Default Data Range
    Dim Index As Integer
    For Index = 1 To mclsDefaultDataColNames.count
        AddRange sheet.Range(mclsDefaultDataColNames.Item(Index)), seriesName
    Next
End Sub
Private Function GetChartName(theBook As Workbook, ChartId As Integer) As String
On Error Resume Next
    Dim chartName As String
    Dim tmpChar As Variant
    Dim tmpName As Variant
    Dim LastChartLetter As Variant
    Dim counter1 As Integer
    chartName = ActiveWorkbook.CustomDocumentProperties("graph_chartName")
    chartName = chartName & ChartId
    LastChartLetter = ""
    On Error Resume Next
    For counter1 = 1 To theBook.Charts.count
        tmpName = Trim(theBook.Charts(counter1).name)
        If Left(tmpName, Len(chartName)) = chartName Then
            tmpChar = Right(tmpName, 1)
            If tmpChar > LastChartLetter And tmpChar >= "A" And tmpChar <= "Z" Then
                LastChartLetter = tmpChar
            End If
        End If
    Next counter1
    Select Case LastChartLetter
    Case ""
        chartName = chartName & "A"
    Case "Z"
' Do nothing, cannot serialize more than 26 graphs for a single Budget Worksheet ID
    Case Else
        LastChartLetter = Chr(Asc(LastChartLetter) + 1)
        chartName = chartName & LastChartLetter
    End Select
    GetChartName = chartName
End Function
Private Function setupRangeFromDefaults(CurrentSheet As Worksheet, rangeNames As Collection) As Range
On Error Resume Next
    Dim newRange As Range
    Dim Index As Integer
    Set newRange = Nothing
    For Index = 1 To rangeNames.count
        If Index = 1 Then
            Set newRange = CurrentSheet.Range(rangeNames.Item(Index))
        Else
            Set newRange = Application.Union(newRange, CurrentSheet.Range(rangeNames.Item(Index)))
        End If
    Next
    Set setupRangeFromDefaults = newRange
End Function
Private Sub SetupGraphType(GrpSht As Chart, GraphType As String, GraphDimensions As String)
On Error Resume Next
     If Len(GraphType) > 0 And Len(GraphDimensions) > 0 Then
         Select Case GraphDimensions
         Case "2D"
            Select Case GraphType
            Case "AREA"
                 GrpSht.Type = xlArea
            Case "BAR"
                 GrpSht.Type = xlBar
            Case "COLUMN"
                 GrpSht.Type = xlColumn
            Case "LINE"
                 GrpSht.Type = xlLine
            Case "PIE"
                 GrpSht.Type = xlPie
            End Select
        Case "3D"
            Select Case GraphType
            Case "AREA"
                GrpSht.Type = xl3DArea
            Case "BAR"
                GrpSht.Type = xl3DBar
            Case "COLUMN"
                GrpSht.Type = xl3DColumn
            Case "LINE"
                GrpSht.Type = xl3DLine
            Case "PIE"
                GrpSht.Type = xl3DPie
            End Select
         End Select
    End If
End Sub
Private Sub SetupGraphData(GrpSht As Chart)
Dim DataSht As Object
Dim DataRange As Range
Dim DataSeriesName As String
Dim seriesName As Variant
Dim SeriesSource As Object
Dim counter1 As Integer
Dim counter2 As Integer
Dim seriesCounter As Integer
Dim MaxDataRows As Long
Dim DataRows As Long
Dim DataColumns As Integer
Dim FirstRow As Long
Dim LastRow As Long
Dim FirstColumn As Integer
Dim LastColumn As Integer
Dim DataRangeText As Variant
Dim CategoryNameValue As String
Dim tmpRow As Integer
' Traverse through each series adding the data for each
    MaxDataRows = 0
    For seriesCounter = 1 To mclsSeriesRanges.count
      Set DataRange = mclsSeriesRanges.Item(seriesCounter)
      DataSeriesName = mclsSeriesNames.Item(seriesCounter)
      Set DataSht = DataRange.Worksheet
' Define Data Range Variables
      DataRows = DataRange.Rows.count
      DataColumns = DataRange.Columns.count
' If Only 1 Cell Selected, Special Processing
      If DataRange.Cells.count = 1 Then
          DataColumns = 1
          DataRows = 1
      Else
          If DataRange.Columns.count = 1 Then
              DataColumns = 1
              With DataRange.Parent
                  DataRows = .Range(.Cells(DataRange.Row, DataRange.Column), .Cells(DataRange.Row + (DataRange.Rows.count) - 1, DataRange.Column)).SpecialCells(xlVisible).count
              End With
          Else
              If DataRange.Rows.count = 1 Then
                  With DataRange.Parent
                      DataColumns = .Range(.Cells(DataRange.Row, DataRange.Column), .Cells(DataRange.Row, DataRange.Column + (DataRange.Columns.count) - 1)).SpecialCells(xlVisible).count
                  End With
                  DataRows = 1
              Else
                  With DataRange.Parent
                      DataColumns = .Range(.Cells(DataRange.Row, DataRange.Column), .Cells(DataRange.Row, DataRange.Column + (DataRange.Columns.count) - 1)).SpecialCells(xlVisible).count
                      DataRows = .Range(.Cells(DataRange.Row, DataRange.Column), .Cells(DataRange.Row + (DataRange.Rows.count) - 1, DataRange.Column)).SpecialCells(xlVisible).count
                  End With
              End If
          End If
      End If
'  Keep the maximum range size for a series to allocate the X-Axis labels array size to
      If DataRows > MaxDataRows Then
          MaxDataRows = DataRows
      End If
' Get the dimensions as row and column references
      FirstRow = DataRange.Row
      LastRow = DataRange.Rows(DataRange.Rows.count).Row
      FirstColumn = DataRange.Column
      LastColumn = DataRange.Columns(DataRange.Columns.count).Column
' Create Data Series on the Graph
Application.StatusBar = "Graph - Creating data series"
' Perform a DataRange Only sheet
      For counter1 = 1 To DataColumns
          Set SeriesSource = DataRange.Columns(counter1)
          If SeriesSource.Cells.count = 1 Then
              DataRangeText = SeriesSource.Address(False, False, 1, False)
          Else
              DataRangeText = SeriesSource.SpecialCells(xlVisible).Address(False, False, 1, False)
          End If
          GrpSht.SeriesCollection.add Rowcol:=xlColumns, SeriesLabels:=False, _
              CategoryLabels:=False, Replace:=False, Source:=DataRange.Parent.Range(DataRangeText)
          If mnHeadingRow > 0 Then
              seriesName = "=""" & DataSeriesName & " " & DataSht.Cells(mnHeadingRow, FirstColumn + counter1 - 1).value & """"
          Else
              seriesName = "=""" & DataSeriesName & """"
          End If
          If Not (((msGraphType = "AREA" Or msGraphType = "LINE") And DataRows = 1) Or (msGraphType = "PIE")) Then
              GrpSht.SeriesCollection(GrpSht.SeriesCollection.count).name = seriesName
          End If
      Next counter1
    Next seriesCounter
' Create X Axis (Category Axis) Data Labels - Concatenate Category values using separator
Application.StatusBar = "Graph - Creating category labels"
    On Error GoTo 0
    If Not mrCategoryRange Is Nothing Then
       tmpRow = FirstRow
        ReDim CatNamesArray(MaxDataRows)
        For counter1 = 1 To MaxDataRows
            CategoryNameValue = ""
            While DataSht.Rows(tmpRow).hidden = True
                tmpRow = tmpRow + 1
            Wend
            For counter2 = 1 To categoryRange.Columns.count
                If tmpRow >= categoryRange.Rows(1).Row And tmpRow <= categoryRange.Rows(categoryRange.Rows.count).Row Then
                    CategoryNameValue = CategoryNameValue & _
                                        categoryRange.Cells(tmpRow - categoryRange.Rows(1).Row + 1, counter2).text
                End If
                If counter2 < categoryRange.Columns.count Then
                    CategoryNameValue = CategoryNameValue & msConcatSeparator
                End If
            Next counter2
            CatNamesArray(counter1) = CategoryNameValue
            tmpRow = tmpRow + 1
        Next counter1
    End If
    On Error Resume Next
Application.StatusBar = "Graph - Setting category name"
    If Not ((GraphType = "AREA" Or GraphType = "LINE") And MaxDataRows = 1) Then
' The final range has to come from the Data Sheet, as it is the one that has the concatenated values on it
        GrpSht.Axes(xlCategory).CategoryNames = CatNamesArray
    End If
    Set SeriesSource = Nothing
End Sub
Private Sub SetupGraphProperties(GrpSht As Chart)
On Error Resume Next
Application.StatusBar = "Graph - Formatting check mark labels"
    If Not GraphType = "PIE" Then
        With GrpSht.Axes(xlCategory).TickLabels.Font
            .name = "Arial"
            .size = 6
            .Bold = False
        End With
    End If
' Set the xlSeries CategoryNames Font Characteristics for 3D graphs (these are not shown on 2D Graphs)
    If msGraphDimensions = "3D" Then
Application.StatusBar = "Graph - Formatting check mark labels"
        If Not (msGraphType = "BAR" Or msGraphType = "PIE") Then
            With GrpSht.Axes(xlSeries).TickLabels.Font
                .name = "Arial"
                .size = 6
                .Bold = False
            End With
        End If
    End If
' Set Font Size in Legend, or turn legend of if no titles
Application.StatusBar = "Graph - Formatting legend"
    GrpSht.Legend.Font.size = 8
' Chart Title
Application.StatusBar = "Graph - Creating graph title"
    With GrpSht
        .HasTitle = True
        If msGraphType <> "PIE" Then
            .Axes(xlCategory).HasTitle = True
            .Axes(xlValue).HasTitle = True
        End If
        If msGraphDimensions = "3D" Then
            If Not (GraphType = "BAR" Or GraphType = "PIE") Then
                .Axes(xlSeries).HasTitle = True
            End If
        End If
    End With
    GrpSht.ChartTitle.Top = 0
    GrpSht.ChartTitle.Characters.text = msGraphTitle
    GrpSht.Axes(xlValue).AxisTitle.Characters.text = msValueLabel
    GrpSht.Axes(xlCategory).AxisTitle.Characters.text = msCategoryLabel
    GrpSht.Axes(xlSeries).AxisTitle.Characters.text = msSeriesLabel
End Sub


Attribute VB_Name = "BneVBAGraphs"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'+=======================================================================+
'|   Copyright (c) 2014 Oracle Corporation, Redwood Shores, CA, USA      |
'|                      All rights reserved.                             |
'+=======================================================================+
'|  HISTORY                                                              |
'|  28-Aug-2014 poramas created.                                         |
'|  30-Apr-2015 poramas 20901121: TST1225:GRAPH IS NOT GENERATED IN OOXML|
'|                                                              DOCUMENT |
'+=======================================================================+
'RCS_ID = $Header :$
'============================================================================================================
'CLASS:       BneVBAGraphInfo
'DESCRIPTION: Storage class for a graph.
'============================================================================================================
Option Compare Text
Option Explicit
Option Base 1
'============================================================================================================
Private mclsGraphs As Collection
'============================================================================================================
'Class Constructor/Destructor
'============================================================================================================
Private Sub Class_Initialize()
    On Error Resume Next
    Set mclsGraphs = New Collection
    Dim graph As BneVBAGraph
    Dim graphIndex As Integer
    Dim graphAvail As String
    Dim integCode As String
    Dim layoutCode As String
    
    integCode = ActiveWorkbook.CustomDocumentProperties("INTEGRATOR_ID")
    layoutCode = ActiveWorkbook.CustomDocumentProperties("LAYOUT_ID")
    
    Err.Number = 0
    graphIndex = 0
    graphAvail = ActiveWorkbook.CustomDocumentProperties("graph" & graphIndex)
    Do While (CLng(Err.Number) <> 5)
        Set graph = New BneVBAGraph
    
        graph.graphTitle = ActiveWorkbook.CustomDocumentProperties("graph_title" & graphIndex)
        graph.categoryLabel = ActiveWorkbook.CustomDocumentProperties("graph_categoryLabel" & graphIndex)
        graph.seriesLabel = ActiveWorkbook.CustomDocumentProperties("graph_seriesLabel" & graphIndex)
        graph.valueLabel = ActiveWorkbook.CustomDocumentProperties("graph_valueLabel" & graphIndex)
        graph.GraphDimensions = ActiveWorkbook.CustomDocumentProperties("graph_graphDimensions" & graphIndex)
        graph.GraphType = ActiveWorkbook.CustomDocumentProperties("graph_type" & graphIndex)
        
        Dim autoGraph As String
        autoGraph = ActiveWorkbook.CustomDocumentProperties("graph_autoGraph" & graphIndex)
        If autoGraph = "TRUE" Then
            graph.autoGraph = True
        Else
            graph.autoGraph = False
        End If
        
        Dim catColIndex As Integer
        Dim catCol As String
        Err.Number = 0
        catColIndex = 0
        catCol = ActiveWorkbook.CustomDocumentProperties("graph" & graphIndex & "_category_col" & catColIndex)
        Do While (CLng(Err.Number) <> 5)
            graph.AddDefaultCategoryColName catCol
            Debug.Print "Added cat col " & catCol
            
            catColIndex = catColIndex + 1
            catCol = ActiveWorkbook.CustomDocumentProperties("graph" & graphIndex & "_category_col" & catColIndex)
        Loop
    
        Dim dataColIndex As Integer
        Dim dataCol As String
        Err.Number = 0
        dataColIndex = 0
        dataCol = ActiveWorkbook.CustomDocumentProperties("graph" & graphIndex & "_data_col" & dataColIndex)
        Do While (CLng(Err.Number) <> 5)
            graph.AddDefaultDataColName dataCol
            Debug.Print "Added data col " & dataCol
            
            dataColIndex = dataColIndex + 1
            dataCol = ActiveWorkbook.CustomDocumentProperties("graph" & graphIndex & "_data_col" & dataColIndex)
        Loop
        
        Err.Number = 0
        graph.concatSeparator = "."
        mclsGraphs.add graph, integCode & ":" & (graphIndex + 1) & ":" & layoutCode
        
        graphIndex = graphIndex + 1
        graphAvail = ActiveWorkbook.CustomDocumentProperties("graph" & graphIndex)
    Loop
    Set graph = Nothing
End Sub
Private Sub Class_Terminate()
    Set mclsGraphs = Nothing
End Sub
Public Function getGraph(key As Variant) As BneVBAGraph
    Set getGraph = mclsGraphs.Item(key)
End Function
Public Function getGraphCount() As Integer
    getGraphCount = mclsGraphs.count
End Function
Attribute VB_Name = "BneVBAInterfaceCol"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'+=======================================================================+
'|   Copyright (c) 2014 Oracle Corporation, Redwood Shores, CA, USA      |
'|                      All rights reserved.                             |
'+=======================================================================+
'|  HISTORY                                                              |
'|  28-Aug-2014 poramas created.                                         |
'|  01-Mar-2016 poramas 22159729: INSERTED ROW DOES NOT HAVE DEFAULT     |
'|                      VALUE IN OOXML DOCUMENT                          |
'+=======================================================================+
'RCS_ID = $Header :$
'============================================================================================================
'MODULE:      BneVBAInterfaceCol
'DESCRIPTION: Storage for the Interface Columns in the current Sheet
'============================================================================================================
Option Explicit
Option Base 1
'============================================================================================================
'Private Variables
Private lRowCount As Long
'===========================================================================================================
' Methods
'Private m_lApplicationId As Long
'Private m_sInterfaceCode As String
'Private m_lSequenceNumber As Long
Private m_sInterfaceName As String
Private m_sColumnName As String
Private m_iDataType As Integer
'Private m_bReadOnly As Boolean
'Private m_sEditType As String
'Private m_sValType As String
Private m_sValComponent As String
'Private m_bPopListLOV As Boolean
'Private m_sPromptLeft As String
'Private m_sPromptAbove As String
Private m_sDefaultValue As Variant
'Private m_sDynamicCol As String
'Private m_bHintDisplayed As Boolean
Private m_sOrientation As String
'Public Property Let ApplicationId(appId As Long)
'    m_lApplicationId = appId
'End Property
'Public Property Get ApplicationId() As Long
'    ApplicationId = m_lApplicationId
'End Property
'Public Property Let InterfaceCode(ifaceCode As String)
'    m_sInterfaceCode = ifaceCode
'End Property
'Public Property Get InterfaceCode() As String
'    InterfaceCode = m_sInterfaceCode
'End Property
'Public Property Let SequenceNumber(seqNum As Long)
'    m_lSequenceNumber = seqNum
'End Property
'Public Property Get SequenceNumber() As Long
'    SequenceNumber = m_lSequenceNumber
'End Property
Public Property Let InterfaceName(name As String)
    m_sInterfaceName = name
End Property
Public Property Get InterfaceName() As String
    InterfaceName = m_sInterfaceName
End Property
Public Property Let ColumnName(name As String)
    m_sColumnName = name
End Property
Public Property Get ColumnName() As String
    ColumnName = m_sColumnName
End Property
Public Property Let dataType(typeID As Integer)
    m_iDataType = typeID
End Property
Public Property Get dataType() As Integer
    dataType = m_iDataType
End Property
'Public Property Let ReadOnly(ReadOnly As Boolean)
'    m_bReadOnly = ReadOnly
'End Property
'Public Property Get ReadOnly() As Boolean
'    ReadOnly = m_bReadOnly
'End Property
'Public Property Let EditType(EditType As String)
'    m_sEditType = EditType
'End Property
'Public Property Get EditType() As String
'    EditType = m_sEditType
'End Property
'Public Property Let ValType(ValType As String)
'    m_sValType = ValType
'End Property
'Public Property Get ValType() As String
'    ValType = m_sValType
'End Property
Public Property Let ValComponent(ValComponent As String)
    m_sValComponent = ValComponent
End Property
Public Property Get ValComponent() As String
    ValComponent = m_sValComponent
End Property
'Public Property Let PopListLOV(PopListLOV As Boolean)
'    m_bPopListLOV = PopListLOV
'End Property
'Public Property Get PopListLOV() As Boolean
'    PopListLOV = m_bPopListLOV
'End Property
'Public Property Let PromptAbove(PromptAbove As String)
'    m_sPromptAbove = PromptAbove
'End Property
'Public Property Get PromptAbove() As String
'    PromptAbove = m_sPromptAbove
'End Property
'Public Property Let PromptLeft(PromptLeft As String)
'    m_sPromptLeft = PromptLeft
'End Property
'Public Property Get PromptLeft() As String
'    PromptLeft = m_sPromptLeft
'End Property
Public Property Let DefaultValue(DefaultValue As Variant)
    m_sDefaultValue = DefaultValue
End Property
Public Property Get DefaultValue() As Variant
    DefaultValue = m_sDefaultValue
End Property
'Public Property Let DynamicDataType(DynamicDataType As Boolean)
'    m_sDynamicCol = DynamicDataType
'End Property
'Public Property Get DynamicDataType() As Boolean
'    DynamicDataType = m_sDynamicCol
'End Property
'Public Property Let HintDisplayed(HintDisplayed As Boolean)
'    m_bHintDisplayed = HintDisplayed
'End Property
'Public Property Get HintDisplayed() As Boolean
'    HintDisplayed = m_bHintDisplayed
'End Property
Public Property Let Orientation(Orientation As String)
    m_sOrientation = Orientation
End Property
Public Property Get Orientation() As String
    Orientation = m_sOrientation
End Property
Attribute VB_Name = "BneVBAMessage"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'+=======================================================================+
'|   Copyright (c) 2014 Oracle Corporation, Redwood Shores, CA, USA      |
'|                      All rights reserved.                             |
'+=======================================================================+
'|  HISTORY                                                              |
'|  28-Aug-2014 poramas created.                                         |
'+=======================================================================+
'RCS_ID = $Header :$
''| Storage class for a name value pair Message.                          |
''+=======================================================================+
Option Explicit
''============================================================================================================
''Private Variables
Private m_strType   As String
Private m_strText   As String
Private m_strSource As String
Private m_strCause  As String
Private m_strAction As String
Private m_intLevel  As Integer
Private m_strRange  As String
Private m_lngIdx    As Long
Private m_strElement  As String
Private m_value As String
''============================================================================================================
''Set Methods
Public Property Let msgType(strType As String)
   On Error Resume Next
   m_strType = strType
End Property
Public Property Let msgText(strText As String)
   On Error Resume Next
   m_strText = strText
End Property
Public Property Let msgSource(strSource As String)
   On Error Resume Next
   m_strSource = strSource
End Property
Public Property Let msgCause(strCause As String)
   On Error Resume Next
   m_strCause = strCause
End Property
Public Property Let msgAction(strAction As String)
   On Error Resume Next
   m_strAction = strAction
End Property
Public Property Let msgLevel(intlevel As Integer)
   On Error Resume Next
   m_intLevel = intlevel
End Property
Public Property Let msgIdx(lngIdx As Long)
   On Error Resume Next
   m_lngIdx = lngIdx
End Property
Public Property Let MsgRange(strRange As String)
   On Error Resume Next
   m_strRange = strRange
End Property
Public Property Let msgElement(strElement As String)
   On Error Resume Next
   m_strElement = strElement
End Property
Public Property Let msgValue(strValue As String)
   On Error Resume Next
   m_value = strValue
End Property
''============================================================================================================
''Get Methods
Public Property Get msgType() As String
    msgType = m_strType
End Property
Public Property Get msgText() As String
    msgText = m_strText
End Property
Public Property Get msgSource() As String
    msgSource = m_strSource
End Property
Public Property Get msgCause() As String
    msgCause = m_strCause
End Property
Public Property Get msgAction() As String
    msgAction = m_strAction
End Property
Public Property Get msgLevel() As Integer
    msgLevel = m_intLevel
End Property
Public Property Get msgIdx() As Long
    msgIdx = m_lngIdx
End Property
Public Property Get MsgRange() As String
    MsgRange = m_strRange
End Property
Public Property Get msgElement() As String
    msgElement = m_strElement
End Property
Public Property Get msgValue() As String
    msgValue = m_value
End Property

Public Property Get msgTypeUserName() As String
    Dim strUserName As String
    Select Case Me.msgType
       Case "ERROR"
strUserName = "Error"
       Case "WARNING"
strUserName = "Warning"
       Case "STATUS"
strUserName = "Status"
       Case "DATA"
strUserName = "Data"
       Case "TRACE"
strUserName = "Trace"
    End Select
    msgTypeUserName = strUserName
End Property
Public Property Get xml() As String
    xml = "<bne:message xmlns:bne=""http://www.oracle.com/bne""" & _
            " bne:type=""" & BneEscapeXML(Me.msgType) & """" & _
            " bne:text=""" & BneEscapeXML(Me.msgText) & """" & _
            " bne:cause=""" & BneEscapeXML(Me.msgCause) & """" & _
            " bne:source=""" & BneEscapeXML(Me.msgSource) & """" & _
            " bne:action=""" & BneEscapeXML(Me.msgAction) & """" & _
            " bne:value=""" & BneEscapeXML(Me.msgValue) & """" & _
          "/>"
End Property
Public Function getMessageXMLNode(objParentNode As Object) As Object
  Dim objMessageNode As Object
  Dim objContextNode As Object
    Set objMessageNode = objParentNode.appendChild(objParentNode.OwnerDocument.createElement("bne:message"))
    objMessageNode.setAttribute "bne:type", Me.msgType
    objMessageNode.setAttribute "bne:text", Me.msgText
    objMessageNode.setAttribute "bne:cause", Me.msgCause
    objMessageNode.setAttribute "bne:action", Me.msgAction
    objMessageNode.setAttribute "bne:source", Me.msgSource
    If Me.msgIdx > 0 Then
       Set objContextNode = objMessageNode.appendChild(objMessageNode.OwnerDocument.createElement("bne:context"))
       objContextNode.setAttribute "bne:idx", Me.msgIdx
       objContextNode.setAttribute "bne:attribute", Me.MsgRange
       objContextNode.setAttribute "bne:element", Me.msgElement
    End If
  Set getMessageXMLNode = objMessageNode
End Function
Public Sub createMessage(ByVal objMessageXMLNode As Object)
Dim objContextNode As Object
On Error Resume Next
        Me.msgText = objMessageXMLNode.Attributes.getNamedItem("bne:text").text
        Me.msgType = objMessageXMLNode.Attributes.getNamedItem("bne:type").text
        Me.msgCause = objMessageXMLNode.Attributes.getNamedItem("bne:cause").text
        Me.msgAction = objMessageXMLNode.Attributes.getNamedItem("bne:action").text
        Me.msgSource = objMessageXMLNode.Attributes.getNamedItem("bne:source").text
        Set objContextNode = objMessageXMLNode.SelectSingleNode("bne:context")
        If Not objContextNode Is Nothing Then
           Me.msgIdx = CLng(objContextNode.Attributes.getNamedItem("bne:idx").text)
           Me.MsgRange = Replace(objContextNode.Attributes.getNamedItem("bne:attribute").text, ".", "_")
           Me.msgElement = objContextNode.Attributes.getNamedItem("bne:element").text
        End If
        If Me.msgType = "DATA" Then
            Me.msgValue = objMessageXMLNode.Attributes.getNamedItem("bne:value").text
        End If
End Sub
Public Function toString() As String
    toString = "bne:type=" & Me.msgType & _
               " bne:text=" & Me.msgText & _
               " bne:cause=" & Me.msgCause & _
               " bne:source=" & Me.msgSource & _
               " bne:value=" & Me.msgValue & _
               " bne:action=" & Me.msgAction
End Function
Private Sub Class_Initialize()
'    '-- set the default message level to trace
    m_intLevel = BNE_TRACE
End Sub



Attribute VB_Name = "BneVBAMessages"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'+=======================================================================+
'|   Copyright (c) 2014 Oracle Corporation, Redwood Shores, CA, USA      |
'|                      All rights reserved.                             |
'+=======================================================================+
'|  HISTORY                                                              |
'|  28-Aug-2014 poramas created.                                         |
'+=======================================================================+
'RCS_ID = $Header :$
''| Storage class for a name value pair parameter.                        |
''| Collection class for messages.                                        |
''+=======================================================================+
Option Explicit
''============================================================================================================
''Private Variables
Private m_clsMessages As Collection
''============================================================================================================
''Constructor/Destructor
Private Sub Class_Initialize()
    Set m_clsMessages = New Collection
End Sub
Private Sub Class_Terminate()
    Set m_clsMessages = Nothing
End Sub
''============================================================================================================
''Action Methods
Public Sub addMessage(objMessage As BneVBAMessage)
    On Error Resume Next
    m_clsMessages.add objMessage
End Sub
Public Sub clearMessages()
    On Error GoTo ErrorHandler
    Do While m_clsMessages.count > 0
        m_clsMessages.Remove (1)
    Loop
ErrorHandler:
End Sub
''============================================================================================================
''Get Methods
Public Property Get Messages() As Collection
    Set Messages = m_clsMessages
End Sub
Public Property Get message(intIndex As Integer) As BneVBAMessage
    On Error Resume Next
    Set message = m_clsMessages(intIndex)
End Property
Public Property Get count() As Integer
    On Error Resume Next
    count = m_clsMessages.count
End Property
Public Property Get xml() As String
    Dim strXML As String
    Dim intCnt As Integer
    If Me.count > 0 Then
        strXML = "<bne:messages xmlns:bne=""http://www.oracle.com/bne"">"
        For intCnt = 1 To Me.count
            strXML = strXML & Me.message(intCnt).xml()
        Next intCnt
        strXML = strXML & "</bne:messages>"
    End If
    xml = strXML
End Property
Attribute VB_Name = "BneVBAParameter"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'+=======================================================================+
'|   Copyright (c) 2014 Oracle Corporation, Redwood Shores, CA, USA      |
'|                      All rights reserved.                             |
'+=======================================================================+
'|  HISTORY                                                              |
'|  28-Aug-2014 poramas created.                                         |
'+=======================================================================+
'RCS_ID = $Header :$
'============================================================================================================
'CLASS:       BneVBAParameter
'DESCRIPTION: Storage class for a name value pair parameter.
'============================================================================================================
Option Explicit
Option Base 1
'============================================================================================================
'Private Variables
Private msName As String
Private mvValue As Variant
'============================================================================================================
'Set Methods
Public Property Let name(sName As String)
   On Error Resume Next
   msName = sName
End Property
Public Property Let value(vValue As Variant)
   On Error Resume Next
   mvValue = vValue
End Property
'============================================================================================================
'Get Methods
Public Property Get name() As String
    name = msName
End Property
Public Property Get value() As Variant
    value = mvValue
End Property
Attribute VB_Name = "BneVBAParameters"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'+=======================================================================+
'|   Copyright (c) 2014 Oracle Corporation, Redwood Shores, CA, USA      |
'|                      All rights reserved.                             |
'+=======================================================================+
'|  HISTORY                                                              |
'|  28-Aug-2014 poramas created.                                         |
'+=======================================================================+
'RCS_ID = $Header :$
'============================================================================================================
'CLASS:       BneVBAParameters
'DESCRIPTION: Storage class for a set of BneVBAParameter objects.
'============================================================================================================
Option Explicit
Option Base 1
'============================================================================================================
'Private Variables
Private mcParameters As Collection
'============================================================================================================
'Class Methods
Private Sub Class_Initialize()
   Set mcParameters = New Collection
End Sub
Private Sub Class_Terminate()
   Set mcParameters = Nothing
End Sub
'============================================================================================================
'Get Methods
Public Property Get Item(vIndex As Variant)
   On Error Resume Next
   Set Item = mcParameters.Item(vIndex)
End Property
Public Property Get count()
   On Error Resume Next
   count = mcParameters.count
End Property
'============================================================================================================
'Methods
Public Sub add(sName As String, vValue As Variant)
   Dim oParam As New BneVBAParameter
   On Error Resume Next
   oParam.name = sName
   oParam.value = vValue
   mcParameters.add oParam, sName
'   If the parameter already exists then remove it and then replace it.
   If Err <> 0 Then
        mcParameters.Remove sName
        mcParameters.add oParam, sName
   End If
End Sub
Public Function toString() As String
       Dim iParamCnt As Integer
       Dim sString As String
       For iParamCnt = 1 To mcParameters.count
        If iParamCnt > 1 Then sString = sString & "&"
        sString = sString & mcParameters.Item(iParamCnt).name & "=" & mcParameters.Item(iParamCnt).value
    Next iParamCnt
    toString = sString
End Function
Attribute VB_Name = "BneVBAProperties"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'+=======================================================================+
'|   Copyright (c) 2014 Oracle Corporation, Redwood Shores, CA, USA      |
'|                      All rights reserved.                             |
'+=======================================================================+
'|  HISTORY                                                              |
'|  28-Aug-2014 poramas created.                                         |
'+=======================================================================+
'RCS_ID = $Header :$
'|CLASS:       BneVBAProperties                                          |
'|DESCRIPTION: Property Manipulation class for the workbook.             |
'|             Allows the storage and retrieval of programmer defined    |
'|             values.                                                   |
'| 05-May-2015 poramas 21032929: TST1225:INVOKING SETTINGS IN ORACLE MENU|
'|                                 GIVES RUN-TIME ERROR IN OOXML DOCUMENT|
'+=======================================================================+
Option Explicit
Option Base 1
''============================================================================================================
Const WORKBOOK_PROPERTY_SHEET = "BneWorkBookProperties"
'============================================================================================================
'Private Variables
Private m_objSheet As Worksheet
Private m_colProperties As Collection
Private m_objDOM As Object
'============================================================================================================
'Constructor/Destructor
Private Sub Class_Initialize()
    Set m_objDOM = createDOMDocument
    Set m_colProperties = New Collection
    Set m_objSheet = getWorkBookPropertySheet()
    loadXML
End Sub
Private Sub Class_Terminate()
    Set m_objDOM = Nothing
    Set m_colProperties = Nothing
    Set m_objSheet = Nothing
End Sub
'============================================================================================================
'Public Methods
'Use this method to decide which sheet the properties apply to.
'Set to NOTHING to use workbook level properties.
Public Sub setSheet(objWorkSheet As Worksheet)
    Set m_objSheet = objWorkSheet
    If m_objSheet Is Nothing Then
       Set m_objSheet = getWorkBookPropertySheet()
    End If
    loadXML
End Sub
'Add a new property to the collection
Public Sub addProperty(objProperty As BneVBAProperty)
    On Error Resume Next
    objProperty.Controller = Me
    m_colProperties.Remove objProperty.name
    m_colProperties.add objProperty, objProperty.name
    On Error GoTo 0
    saveXML
End Sub
'Remove a property based on a name.
Public Sub removeProperty(strPropertyName As String)
    On Error Resume Next
    m_colProperties.Remove strPropertyName
    On Error GoTo 0
    saveXML
End Sub
'Retrieve a property based on a name.
'Returns NOTHING if the property does not exist.
Public Function getProperty(strPropertyName As String) As BneVBAProperty
    On Error Resume Next
    Set getProperty = m_colProperties(strPropertyName)
End Function
'Returns false where no properties exist.
Public Function hasProperties() As Boolean
    hasProperties = m_colProperties.count > 0
End Function
'============================================================================================================
'Private Methods
Private Sub loadXML()
    Dim intColIndex As Integer
    Dim strCellData As String
    Dim strXML As String
    intColIndex = 1
    strCellData = m_objSheet.Cells(1, intColIndex).value
    Do Until Len(strCellData) = 0
        strXML = strXML & strCellData
        intColIndex = intColIndex + 1
        strCellData = m_objSheet.Cells(1, intColIndex).value
    Loop
    m_objDOM.loadXML strXML
    parseXMLToObjects
End Sub
Private Sub parseXMLToObjects()
    Dim objProperty As BneVBAProperty
    Dim objNodes As Object
    Dim lngCnt As Long
    Set m_colProperties = New Collection
    If Not m_objDOM.DocumentElement Is Nothing Then
       Set objNodes = m_objDOM.DocumentElement.SelectNodes("item")
       If Not objNodes Is Nothing Then
          For lngCnt = 0 To objNodes.Length - 1
             Set objProperty = New BneVBAProperty
             objProperty.name = BneGetNodeText(objNodes(lngCnt), "name")
             objProperty.value = ParseXMLItemToObjects(objNodes(lngCnt))
             m_colProperties.add objProperty, objProperty.name
          Next
       End If
    End If
End Sub
Private Function ParseXMLItemToObjects(objItemNode As Object)
    Dim objProperty As BneVBAProperty
    Dim colProperties As Collection
    Dim objNode As Object
    Dim objNodes As Object
    Dim lngCnt As Long
    Set objNode = objItemNode.SelectSingleNode("value")
    If Not objNode Is Nothing Then
       Set objNodes = objNode.SelectNodes("item")
       If objNodes.Length > 0 Then
          Set colProperties = New Collection
          For lngCnt = 0 To objNodes.Length - 1
             Set objProperty = New BneVBAProperty
             objProperty.name = BneGetNodeText(objNodes(lngCnt), "name")
             objProperty.value = ParseXMLItemToObjects(objNodes(lngCnt))
             colProperties.add objProperty, objProperty.name
          Next
       Else
          ParseXMLItemToObjects = objNode.nodeTypedValue
          Exit Function
       End If
       Set ParseXMLItemToObjects = colProperties
    End If
End Function
Private Function getWorkBookPropertySheet() As Worksheet
    Dim objSheet As Worksheet
    On Error Resume Next
    Set objSheet = Worksheets(WORKBOOK_PROPERTY_SHEET)
    If objSheet Is Nothing Then
        Set objSheet = Worksheets.add
        objSheet.name = WORKBOOK_PROPERTY_SHEET
        objSheet.Visible = xlSheetVeryHidden
    End If
    Set getWorkBookPropertySheet = objSheet
End Function
Public Sub saveXML()
    Dim strXML As String
    Dim lngStartPos As Long
    Dim intCol As Integer
    Dim intLength As Integer
    Dim blnProtect As Boolean
    blnProtect = m_objSheet.ProtectContents
    m_objSheet.Unprotect
    strXML = Me.xml
    intCol = 1
    lngStartPos = 1
    intLength = 32767
    Do Until lngStartPos > Len(strXML)
        m_objSheet.Cells(1, intCol).value = Mid(strXML, lngStartPos, intLength)
        lngStartPos = lngStartPos + intLength
        intCol = intCol + 1
    Loop
    Do Until Len(m_objSheet.Cells(1, intCol)) = 0
        m_objSheet.Cells(1, intCol) = ""
        intCol = intCol + 1
    Loop
    If blnProtect Then
        m_objSheet.Protect
    End If
End Sub
Public Property Get xml() As String
    Dim strXML As String
    Dim intCnt As Integer
    If m_colProperties.count > 0 Then
        strXML = "<bne:properties xmlns:bne=""http://www.oracle.com/bne"">"
        For intCnt = 1 To m_colProperties.count
            strXML = strXML & m_colProperties(intCnt).xml()
        Next intCnt
        strXML = strXML & "</bne:properties>"
    End If
    xml = strXML
End Property

Attribute VB_Name = "BneVBAProperty"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'+=======================================================================+
'|   Copyright (c) 2014 Oracle Corporation, Redwood Shores, CA, USA      |
'|                      All rights reserved.                             |
'+=======================================================================+
'|  HISTORY                                                              |
'|  28-Aug-2014 poramas created.                                         |
'+=======================================================================+
'RCS_ID = $Header :$
'|CLASS:       BneVBAProperty                                            |
'|DESCRIPTION: Stores a Property or group of properties.                 |
'+=======================================================================+
Option Explicit
Option Base 1
'============================================================================================================
'Private Variables
Private m_strName As String
Private m_varValue As Variant
Private m_objProperties As BneVBAProperties
'============================================================================================================
'Set Methods
Public Property Let name(strName As String)
   On Error Resume Next
   m_strName = strName
End Property
Public Property Let value(varValue As Variant)
   On Error Resume Next
   m_varValue = varValue
End Property
Public Property Let Controller(objProperties As BneVBAProperties)
    Set m_objProperties = objProperties
End Property
'============================================================================================================
'Get Methods
Public Property Get name() As String
    name = m_strName
End Property
Public Property Get value() As Variant
    value = m_varValue
End Property
Public Sub addProperty(objProperty As BneVBAProperty)
    On Error Resume Next
    If Not TypeOf m_varValue Is Collection Then Set m_varValue = New Collection
    objProperty.Controller = m_objProperties
    m_varValue.add objProperty, objProperty.name
    m_objProperties.saveXML
End Sub
Public Sub removeProperty(strPropertyName As String)
    On Error Resume Next
    m_varValue.Remove strPropertyName
    m_objProperties.saveXML
End Sub
Public Function getProperty(strPropertyName As String) As BneVBAProperty
    On Error Resume Next
    Set getProperty = m_varValue(strPropertyName)
End Function
Public Property Get xml() As String
    Dim strXML As String
    Dim lngCnt As Long
    strXML = "<item>" & _
                "<name>" & BneEscapeXML(Me.name) & "</name>"
    If TypeOf m_varValue Is Collection Then
        strXML = strXML & "<value>"
        For lngCnt = 1 To m_varValue.count
            strXML = strXML & m_varValue(lngCnt).xml
        Next
    Else
        strXML = strXML & "<value>" & BneEscapeXML(CStr(m_varValue)) & "</value>"
    End If
    strXML = strXML & "</item>"
    xml = strXML
End Property

Attribute VB_Name = "BneVBAUploader"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'+=======================================================================+
'|   Copyright (c) 2014 Oracle Corporation, Redwood Shores, CA, USA      |
'|                      All rights reserved.                             |
'+=======================================================================+
'|  HISTORY                                                              |
'|  28-Aug-2014 poramas created.                                         |
'|  10-Mar-2015 poramas 20655323: TST1225:OOXML SUCCESS ICON NOT SHOWN   |
'|                                IN LAST ROWS IF THERE ARE ERRORED ROWS |
'|  27-Mar-2015 poramas 20773043: REPLICATE FIX DEFINED ON BUG 20556702  |
'|                                                  ON OOXML VBA MODULES |
'|  24-Apr-2015 poramas 20937095: TST1225: UNPROTECTED DOCUMENTS BECOME  |
'|                                      PROTECTED AFTER UPLOAD IN OOXML  |
'|  05-May-2015 poramas 20997084: TST1225: UPLOAD FLAG REMOVED FOR FAILED|
'|                                  ROW WHEN USING COMMIT EACH IN OOXML  |
'|  05-May-2015 poramas 21032929:TST1225:INVOKING SETTINGS IN ORACLE MENU|
'|                                 GIVES RUN-TIME ERROR IN OOXML DOCUMENT|
'|  28-Jan-2016 poramas 22103937: TST1225:OFF2016: UPLOADING IN PSEUDO   |
'|                      KOREAN FAILS WITH RUN-TIME ERROR '52'            |
'|  10-Aug-2017 poramas 25486571: COMPRESSION ZIP FOLDER ERROR OCCURS    |
'|                      WHEN ATTEMPT TO UPLOAD WEBADI JOURNAL SPREAD     |
'|  02-Apr-2018 nputrevu 27244877: COMPRESSION ZIP FOLDER ERROR OCCURS WHEN
'|                       ATTEMPT TO UPLOAD WEBADI                        |
'|  27-Apr-2018 nputrevu 27892921: RUN-TIME ERROR '75' INVALID PATH NAME WHEN
'|                       UPLOAD 30000 ROWS                               |
'+=======================================================================+
'RCS_ID = $Header :$
Option Explicit
Option Base 1
Private m_colSheets As New Collection
Private m_lngJobID As Long
Private m_blnFlaggedRows As Boolean
Private m_lngUploadedRows() As Long
Private m_intStatus As Integer
Private m_text As String
Private m_cause As String
Private m_action As String
Private m_objCommonParams As BneVBAParameters
'Private m_objUplStructure As New BneUploadLayout
Private m_rowCountDict As Dictionary
Private Const BNE_UPL_OK = 1
Private Const BNE_UPL_ERROR = 2
Private Const UPLOAD_BOUNDARY = "---------------------------7d06f1de0452"
Private m_st As Single
Private m_lngUploadRowCount As Long

'
'=== Class Constants
'Has to be done like this becuase of the lack of Enums in Office 97, and the inability to have Class level constants that are Public.
Property Get UPL_OK() As Integer
    UPL_OK = BNE_UPL_OK
End Property
Property Get UPL_ERROR() As Integer
    UPL_ERROR = BNE_UPL_ERROR
End Property
'
'=== Property Setters
Property Set Sheets(colSheets As Collection)
    Set m_colSheets = colSheets
End Property
Property Set CommonUploadParams(oParams As BneVBAParameters)
    Set m_objCommonParams = oParams
End Property
Property Let FlaggedRowsOnly(FlaggedRows As Boolean)
    m_blnFlaggedRows = FlaggedRows
End Property
'
'=== Property Getters
Property Get JobID() As Long
    JobID = m_lngJobID
End Property
Property Get Status() As Integer
    Status = m_intStatus
End Property
Property Get text() As String
    text = m_text
End Property
Property Get cause() As String
    cause = m_cause
End Property
Property Get action() As String
    action = m_action
End Property
Private Sub Class_Initialize()
    m_lngJobID = -1
    m_intStatus = BNE_UPL_OK
    ReDim m_lngUploadedRows(1)
    Set m_rowCountDict = New Dictionary
End Sub
Private Sub Class_Terminate()
    Set m_colSheets = Nothing
    Set m_objCommonParams = Nothing
'    Set m_objUplStructure = Nothing
End Sub

Function GetMemUsage()
  
  ' Returns the current Excel.Application
  ' memory usage in KB
  
  Dim objSWbemServices As Object
  Set objSWbemServices = GetObject("winmgmts:")
  GetMemUsage = objSWbemServices.Get( _
    "Win32_Process.Handle='" & _
    GetCurrentProcessId & "'").WorkingSetSize / 1024
    
  Set objSWbemServices = Nothing
  
End Function

Public Sub BneUploadBegin()
    
'    BneUploadBegin_old
'    Exit Sub
    
    'm_lngUploadRowCount = m_objUplStructure.populateUploadLayoutModel(m_colSheets, New BneLayout, m_blnFlaggedRows)
    Dim objSheet As Worksheet
    Dim uplRange As Range
    Set objSheet = m_colSheets(1)
    Set uplRange = objSheet.Names("BNE_UPLOAD").RefersToRange
    ' TODO if flagged rows need to be uploaded using OOXML, only flagged rows need to be counted.
    ' TODO for upload all, this value is incorrect
    m_lngUploadRowCount = uplRange.Rows.count
    
    Dim xlsxFile As String
    Dim lngStart As Single
    lngStart = Timer
    xlsxFile = createTempXLSXFile
    Debug.Print "Time taken to create temp xlsx file is " & Timer - lngStart & " seconds and memory used " & GetMemUsage
    
    If m_lngUploadRowCount = -1 Then
       m_objCommonParams.add "bne:uploadCancelled", "true"
    Else
       m_objCommonParams.add "bne:uploadRowCount", CStr(m_lngUploadRowCount)
    End If
    m_st = Timer
    m_lngJobID = BneUploadDocument(xlsxFile)
    Debug.Print "Time taken to send the upload xlsx file is " & Timer - m_st & " seconds and memory used " & GetMemUsage
    
    Exit Sub
ErrorHandler:
'Last thing, reselect the active cell)
    AddBneMsg BNE_ERROR, "BneUploadBegin", "Hit the ErrorHandler: " & Err.Description
    m_intStatus = BNE_UPL_ERROR
End Sub
'Public Sub BneUploadBegin_old()
'
'If ThisWorkbook.IsUploadCompressionEnabled Then
'    BneUploadBeginCompress
'    Exit Sub
'End If
'
'    Dim objXMLDom As Object
'    Dim lngUploadRowCount As Long
'On Error GoTo ErrorHandler
''First things, get the currently selected cell(s)
''Create the XML Document and populate it
'    Dim st As Single
'    st = Timer
'    Set objXMLDom = createDOMDocument()
'    If Not objXMLDom Is Nothing Then
'      Dim objUplStructure As New BneUploadLayout
'      lngUploadRowCount = m_objUplStructure.createUploadXML(m_colSheets, New BneLayout, objXMLDom, m_blnFlaggedRows)
'    Else
'        AddBneMsg BNE_ERROR, "BneUploadBegin", "Couldn't Create a DOM Document"
'        GoTo ErrorHandler
'    End If
'    Debug.Print "Time taken to prepare upload xml " & Timer - st & " seconds and memory used " & GetMemUsage
'
''Validate all of the member variables
'    If Not SetupIsValid() Then
''Exit.  We cannot perform an upload with bad params.
'        AddBneMsg BNE_ERROR, "BneUploadBegin", "The Configuration for the upload is invalid.  Aborting."
'        GoTo ErrorHandler
'    End If
'    If lngUploadRowCount = -1 Then
'       m_objCommonParams.add "bne:uploadCancelled", "true"
'    Else
'       m_objCommonParams.add "bne:uploadRowCount", CStr(lngUploadRowCount)
'    End If
'
'    m_st = Timer
'
'    m_lngJobID = UploadData(objXMLDom, m_objCommonParams)
'    Debug.Print "Time taken to send the upload xml is " & Timer - m_st & " seconds and memory used " & GetMemUsage
'
''Last thing, reselect the active cell)
'    Exit Sub
'ErrorHandler:
''Last thing, reselect the active cell)
'    AddBneMsg BNE_ERROR, "BneUploadBegin", "Hit the ErrorHandler: " & Err.Description
'    m_intStatus = BNE_UPL_ERROR
'End Sub
Public Function BneUploadDocument(ByRef TemporaryXLSXFilename As String) As Long
 On Error Resume Next

    Dim lJobId As Long
    Dim sPostContent1 As String
    Dim sPostContent2 As String
    Dim sFormDatab() As Byte
    Dim TemporaryXLSXFilenameOnly As String
    Dim oParam As BneVBAParameter
    Dim iParam As Integer

    ' Initialise method variables
    lJobId = -1
    'Remember boundaries require a prefix of "--" and for the last boundary a postfix of "--"

    ' Get the file name from the complete path
    TemporaryXLSXFilenameOnly = BneFileNameFromPath(TemporaryXLSXFilename)

    'Get source file As a string.
    ReDim sFormDatab(FileLen(TemporaryXLSXFilename))
    Dim FileNumber As Integer
    FileNumber = FreeFile
    Open TemporaryXLSXFilename For Binary As FileNumber
    Get FileNumber, , sFormDatab
    Close FileNumber

    'Start building the form post content in a string
    sPostContent1 = "--" & UPLOAD_BOUNDARY & vbCrLf
    sPostContent1 = sPostContent1 & "Content-Disposition: form-data; name=""uploadfilename"";"
    sPostContent1 = sPostContent1 & " filename=""bne_data_" & TemporaryXLSXFilenameOnly & """" + vbCrLf
    sPostContent1 = sPostContent1 & "Content-Type: application/upload" & vbCrLf & vbCrLf
    
    sPostContent2 = vbCrLf
    
    ' Create content types for each parameter
    
    'Do each of the common parameters
    For iParam = 1 To m_objCommonParams.count
        Set oParam = m_objCommonParams.Item(iParam)
        sPostContent2 = sPostContent2 & "--" & UPLOAD_BOUNDARY & vbCrLf
        sPostContent2 = sPostContent2 & "Content-Disposition: form-data; name=""" & oParam.name & """" & vbCrLf & vbCrLf
        sPostContent2 = sPostContent2 & oParam.value & vbCrLf
    Next iParam
    
    'Do each of the integrator parameters
'    For iParam = 1 To integratorParams.count
'        Set oParam = integratorParams.Item(iParam)
'        sPostContent2 = sPostContent2 & "--" & UPLOAD_BOUNDARY & vbCrLf
'        sPostContent2 = sPostContent2 & "Content-Disposition: form-data; name=""" & oParam.name & """" & vbCrLf & vbCrLf
'        sPostContent2 = sPostContent2 & UrlEncodeUtf8(oParam.value) & vbCrLf
'    Next iParam
    
    ' End HTTP content upload with Boundary
    sPostContent2 = sPostContent2 & "--" & UPLOAD_BOUNDARY & "--"
    'sPostContent = sPostContent & vbCrLf & "--" & UPLOAD_BOUNDARY & "--" & vbCrLf
    
    ' Send the content to the Upload Service
    BneUploadDocument = BneIEPostByteRequest(sPostContent1, sPostContent2, sFormDatab, UPLOAD_BOUNDARY, m_objCommonParams)
    

End Function
' Function to allow a file name to be extracted from the path
Private Function BneFileNameFromPath(ByVal curFileName As String) As String
    
    Dim curPos As Long
    Dim prevPos As Long
    Dim strFileNameLength As Long
        
    prevPos = 0
    strFileNameLength = 0
    
    curPos = InStr(curFileName, "\")
    While Not curPos = 0
        ' Only have to account for Windows paths
        prevPos = curPos
        curPos = InStr((curPos + 1), curFileName, "\")
    Wend
    
    If Not prevPos = 0 Then
        strFileNameLength = Len(curFileName)
        BneFileNameFromPath = Right(curFileName, (strFileNameLength - prevPos))
    Else
        BneFileNameFromPath = curFileName
    End If

End Function

'sends URL encoded form data To the URL using IE
Function BneIEPostByteRequest(FormData1 As String, FormData2 As String, FormDatab() As Byte, Boundary As String, commonParams As BneVBAParameters) As Long

    Dim oXMLhttp As Object
    Dim lJobId As Long

    Set oXMLhttp = CreateHTTPObject

    ' Create Request to send upload request
    oXMLhttp.Open "POST", ThisWorkbook.BneGetUploaderService() & "?ICX_SESSION_ID=" & ThisWorkbook.getSessionTicket() & "&bne:encoding=UTF-8", False

    oXMLhttp.setRequestHeader "Content-Type", "multipart/form-data; boundary=" & Boundary

    'Send the form data As POST request
    Dim bFormData() As Byte
    Dim bFormData1() As Byte
    Dim bFormData2() As Byte
    ReDim bFormData1(Len(FormData1) - 1)
    ReDim bFormData2(Len(FormData2) - 1)

   bFormData1 = StrConv(FormData1, vbFromUnicode)
   bFormData2 = StrConv(FormData2, vbFromUnicode)
   Dim i As Long
   Dim j As Long
   Dim k As Long
   ReDim bFormData((UBound(bFormData1) + 1) + (UBound(FormDatab) + LBound(FormDatab) - 1) + (UBound(bFormData2) + 1))
   For i = 0 To UBound(bFormData1)
       bFormData(i + 1) = bFormData1(i)
   Next
   For j = 1 To UBound(FormDatab)
       bFormData(i + j) = FormDatab(j)
   Next
   For k = 0 To UBound(bFormData2)
       bFormData(i + j + k) = bFormData2(k)
   Next

    ' Send the content to the Upload Service
    oXMLhttp.send (bFormData)

    If oXMLhttp.readyState = 4 Then 'The upload has finished
        If oXMLhttp.Status = 200 Then 'HTTP Status 200 returned
            Dim oResponse As Object
            Set oResponse = oXMLhttp.responseXML
            If oResponse Is Nothing Then
              AddBneMsg BNE_ERROR, "UploadData", "The HTTP response was nothing.  No Job ID returned"
            ElseIf oResponse.xml = "" Then
              AddBneMsg BNE_ERROR, "UploadData", "The HTTP response contained no XML.  No Job ID returned"
            Else
              lJobId = GetUploadResponseMsgs(oResponse, commonParams)
              AddBneMsg BNE_TRACE, "UploadData", "Returned JobID: " & lJobId
            End If
        Else 'Nasty error
            AddBneMsg BNE_ERROR, "DownloadMessages", "The HTTP response status was not 200.  The status was: " & CStr(oXMLhttp.Status)
        End If
    Else 'Should never get to here as POST was Synchronous, therefore, once completed, returns to readyState = 4.
      AddBneMsg BNE_ERROR, "UploadData", "MSXML returned readyState = " & oXMLhttp.readyState
    End If
    
    BneIEPostByteRequest = lJobId
    Exit Function
    
CreateHTTPErrorHandler:
    AddBneMsg BNE_ERROR, "UploadData", "Unable to Create HTTP Object"
    BneIEPostByteRequest = lJobId
    Exit Function
CreateFormErrorHandler:
    AddBneMsg BNE_ERROR, "UploadData", "Error Creating Form "
    BneIEPostByteRequest = lJobId
    Exit Function
SendErrorHandler:
    AddBneMsg BNE_ERROR, "UploadData", "Error Posting the HTTP Request"
    BneIEPostByteRequest = lJobId
    Exit Function
ResponseErrorHandler:
    AddBneMsg BNE_ERROR, "UploadData", "Error with the HTTP Response"
    BneIEPostByteRequest = lJobId
    Exit Function


End Function




'Used to upload the XML document to the middle-tier.
'In Param     document As DOMDocument - The document to upload.
'In Param     commonParams As BneVBAParameters - An collection of strings that represent the common upload params.
'Out Param    jobId As Long - The job Id of this upload.  If could not be retrievedm this will be -1.
'This subroutine assumes that the commonParameters WILL contain the bne:jobId, bne:servicePath, and bne:icxId parameters.
Private Function UploadData(ByRef Document As Object, commonParams As BneVBAParameters) As Long
    Dim oXMLhttp As Object
    Dim sServerPath As String
    Dim sUploadServlet As String
    Dim sIcxId As String
    Dim sDocumentId As String
    Dim sContent As String
    Dim iParam As Integer
    Dim lJobId As Long
    lJobId = -1
    Dim sBoundary As String
    sBoundary = "---------------------------7d06f1de0452"
'    Remember boundaries require a prefix of "--" and for the last boundary a postfix of "--"
    On Error GoTo CreateHTTPErrorHandler
    Set oXMLhttp = CreateHTTPObject
    On Error GoTo CreateFormErrorHandler
    sServerPath = commonParams.Item("bne:servicePath").value
    sUploadServlet = "BneUploaderService"
    sIcxId = commonParams.Item("bne:icxId").value
    sDocumentId = commonParams.Item("bne:documentId").value
    oXMLhttp.Open "POST", sServerPath & sUploadServlet & "?ICX_SESSION_ID=" & sIcxId & "&bne:documentId=" & sDocumentId & "&bne:encoding=UTF-8", False
    oXMLhttp.setRequestHeader "Content-Type", "multipart/form-data; boundary=" & sBoundary
    sContent = "--" & sBoundary & vbCrLf
    sContent = sContent & "Content-Disposition: form-data; name=""uploadfilename""; filename=""bne_data_" & "G0qyFXlS" & ".xml""" & vbCrLf
    sContent = sContent & "Content-Type: application/octet-stream" & vbCrLf & vbCrLf
    sContent = sContent & Document.xml
    Dim oParam As BneVBAParameter
'    Do each of the common parameters
    For iParam = 1 To commonParams.count
        Set oParam = commonParams.Item(iParam)
        sContent = sContent & "--" & sBoundary & vbCrLf
        sContent = sContent & "Content-Disposition: form-data; name=""" & oParam.name & """" & vbCrLf & vbCrLf
        sContent = sContent & oParam.value & vbCrLf
    Next iParam
    sContent = sContent & "--" & sBoundary & "--"
    AddBneMsg BNE_TRACE, "UploadData", "Form Contents: " & sContent
    On Error GoTo SendErrorHandler
    oXMLhttp.send (sContent)
    AddBneMsg BNE_TRACE, "UploadData", "HTTP Response Status: " & CStr(oXMLhttp.Status)
    On Error GoTo ResponseErrorHandler
    If oXMLhttp.readyState = 4 Then 'The upload has finished
        If oXMLhttp.Status = 200 Then 'HTTP Status 200 returned
            Dim oResponse As Object
            Set oResponse = oXMLhttp.responseXML
            If oResponse Is Nothing Then
              AddBneMsg BNE_ERROR, "UploadData", "The HTTP response was nothing.  No Job ID returned"
            ElseIf oResponse.xml = "" Then
              AddBneMsg BNE_ERROR, "UploadData", "The HTTP response contained no XML.  No Job ID returned"
            Else
              lJobId = GetUploadResponseMsgs(oResponse, commonParams)
              AddBneMsg BNE_TRACE, "UploadData", "Returned JobID: " & lJobId
            End If
        Else 'Nasty error
            AddBneMsg BNE_ERROR, "DownloadMessages", "The HTTP response status was not 200.  The status was: " & CStr(oXMLhttp.Status)
        End If
    Else 'Should never get to here as POST was Synchronous, therefore, once completed, returns to readyState = 4.
      AddBneMsg BNE_ERROR, "UploadData", "MSXML returned readyState = " & oXMLhttp.readyState
    End If
    UploadData = lJobId
    Exit Function
CreateHTTPErrorHandler:
    AddBneMsg BNE_ERROR, "UploadData", "Unable to Create HTTP Object"
    UploadData = lJobId
    Exit Function
CreateFormErrorHandler:
    AddBneMsg BNE_ERROR, "UploadData", "Error Creating Form "
    UploadData = lJobId
    Exit Function
SendErrorHandler:
    AddBneMsg BNE_ERROR, "UploadData", "Error Posting the HTTP Request"
    UploadData = lJobId
    Exit Function
ResponseErrorHandler:
    AddBneMsg BNE_ERROR, "UploadData", "Error with the HTTP Response"
    UploadData = lJobId
    Exit Function
End Function
Public Sub BneUploadComplete()
    Dim objXMLDom As Object
    Dim objSheet As Worksheet
    Dim sUploadCancelled As String
    On Error Resume Next
    Debug.Print "Time taken to complete the upload xlsx file is " & Timer - m_st & " seconds and memory used " & GetMemUsage
    
    sUploadCancelled = m_objCommonParams.Item("bne:uploadCancelled").value
    On Error GoTo ErrorHandler
    Set objXMLDom = createDOMDocument
    DownloadMessages objXMLDom, m_objCommonParams
    If Not objXMLDom Is Nothing Then
'        m_objUplStructure.processMessages objXMLDom, IIf(sUploadCancelled = "true", True, False)
        processMessages objXMLDom, IIf(sUploadCancelled = "true", True, False)
    Else
        AddBneMsg BNE_ERROR, "BneUploadComplete", "Couldn't Create a DOM Document"
        GoTo ErrorHandler
    End If
    Debug.Print "Time taken to complete the upload & process response msgs " & Timer - m_st & " seconds and memory used " & GetMemUsage
    Exit Sub
ErrorHandler:
    AddBneMsg BNE_ERROR, "BneUploadComplete", "Hit the ErrorHandler: " & Err.Description
    m_intStatus = BNE_UPL_ERROR
End Sub

'Checks we have everything that is required to perform the upload.
Private Function SetupIsValid() As Boolean
    If m_objCommonParams Is Nothing _
            Or m_colSheets.count = 0 Then
        SetupIsValid = False
        Exit Function
    End If
    SetupIsValid = True
End Function
'This subroutine requests the XML messages that were generated for a particular upload that was performed.
'In Param     document As DOMDocument - The the document to download, passed by reference.
'In Param     params As BneVBAParameters - The commoon parameters of the current job, used to download the correct data.
Private Sub DownloadMessages(Document As Object, params As BneVBAParameters)
    Dim oXMLhttp As Object
    Dim sServerPath As String
    Dim sUploadServlet As String
    Dim sIcxId As String
    Dim sDocumentId As String
    Dim sContent As String
    On Error GoTo CreateHTTPErrorHandler
    Set oXMLhttp = CreateHTTPObject
    On Error GoTo CreateFormErrorHandler
    sServerPath = params.Item("bne:servicePath").value
    sUploadServlet = "BneUploaderService"
    sIcxId = params.Item("bne:icxId").value
    sDocumentId = params.Item("bne:documentId").value
    oXMLhttp.Open "POST", sServerPath & sUploadServlet & "?ICX_SESSION_ID=" & sIcxId & "&bne:documentId=" & sDocumentId & "&bne:encoding=UTF-8", False
    oXMLhttp.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
    sContent = "bne:requestType=downloadMessages&bne:deleteMessages=true&bne:uploadJobNumber=" & m_lngJobID & "&bne:language=" & params.Item("bne:language").value
    AddBneMsg BNE_TRACE, "DownloadMessages", "Form Contents: " & sContent
    On Error GoTo SendErrorHandler
    oXMLhttp.send (sContent)
    AddBneMsg BNE_TRACE, "DownloadMessages", "HTTP Response Status: " & CStr(oXMLhttp.Status)
    On Error GoTo ResponseErrorHandler
    If oXMLhttp.readyState = 4 Then 'The upload has finished
        If oXMLhttp.Status = 200 Then 'HTTP Status 200 returned
           Set Document = oXMLhttp.responseXML
           If Document Is Nothing Then
                  AddBneMsg BNE_ERROR, "DownloadMessages", "The HTTP response was nothing.  Response was Nothing"
           ElseIf Document.xml = "" Then
                  AddBneMsg BNE_ERROR, "DownloadMessages", "The HTTP response was nothing.  No messages returned"
           End If
        Else 'Nasty error
            AddBneMsg BNE_ERROR, "DownloadMessages", "The HTTP response status was not 200.  The status was: " & CStr(oXMLhttp.Status)
        End If
    Else 'Should never get to here as POST was Synchronous, therefore, once completed, returns to readyState = 4.
      AddBneMsg BNE_ERROR, "UploadData", "MSXML returned readyState = " & oXMLhttp.readyState
    End If
    Exit Sub
CreateHTTPErrorHandler:
    AddBneMsg BNE_ERROR, "DownloadMessages", "Unable to Create HTTP Object"
    Exit Sub
CreateFormErrorHandler:
    AddBneMsg BNE_ERROR, "DownloadMessages", "Error Creating Form "
    Exit Sub
SendErrorHandler:
    AddBneMsg BNE_ERROR, "DownloadMessages", "Error Posting the HTTP Request"
    Exit Sub
ResponseErrorHandler:
    AddBneMsg BNE_ERROR, "DownloadMessages", "Error with the HTTP Response"
    Exit Sub
End Sub
'This subroutine will parse the response XML, looking for the bne:jobID (BNE-000002) and add the ID as
' a common parameter.  If no job ID is found, the job did not run successfully.
'This method expects the message to be returned using the following structure:
' <xml>
' <bne:document>
'    <bne:message bne:type="STATUS" bne:id="BNE-000002" bne:text="UPL_ER_ASYNC_JOB" bne:value="10316"/>
' </bne:document>
'if one of the above nodes is not passed, all of the messages that may be returned in the responce text are added to the logger
'as the relevent message types so they can be displayed to the user.
'In Param     response As DOMDocument - The the XML response to posting the Job.
'In Param     params As BneVBAParameters - The common parameters which contain the JobID.
'Out Param    jobID As Long - If the upload was succesful, a jobID is returned, otherwise -l is returned.
Private Function GetUploadResponseMsgs(response As Variant, params As BneVBAParameters) As Long
    Dim oDocument As Object
    Dim iCounter As Integer
    Dim oNode As Object
    Dim oAtts As Object
    Dim oAtt As Object
    If Not response Is Nothing Then
        Set oDocument = response.DocumentElement
        If oDocument Is Nothing Then
''No messages or job Id
            GetUploadResponseMsgs = -1
            Exit Function
        End If
    Else
''No messages or job Id
        GetUploadResponseMsgs = -1
        Exit Function
    End If
''Okay to process messages
    Set oNode = response.DocumentElement.SelectSingleNode("/bne:document/bne:message[@bne:type='STATUS'&&@bne:id='BNE-000002']")
    If Not oNode Is Nothing Then
        Set oAtts = oNode.Attributes()
        If Not oAtts Is Nothing Then
            Set oAtt = oAtts.getNamedItem("bne:value")
            If Not oAtt Is Nothing Then
                GetUploadResponseMsgs = CLng(oAtt.value)
                Exit Function
             End If
        End If
    Else
        For iCounter = 0 To oDocument.ChildNodes.Length
            Set oNode = oDocument.ChildNodes(iCounter)
            If Not oNode Is Nothing Then
                If oNode.nodeName = "bne:message" Then
                    Set oAtts = oNode.Attributes()
                    If Not oAtts Is Nothing Then
                        Set oAtt = oAtts.getNamedItem("bne:type")
                        If Not oAtt Is Nothing Then
                            If oAtt.value = "ERROR" Then
'                                Assume all the following attributes can be retrieved. This will cache the last error only.
                                On Error Resume Next
                                m_text = oAtts.getNamedItem("bne:text").value
                                m_cause = oAtts.getNamedItem("bne:cause").value
                                m_action = oAtts.getNamedItem("bne:action").value
                                AddBneMsg BNE_ERROR, m_text, m_cause, m_action
                                On Error GoTo 0
                            End If
                        End If
                    End If
                End If
            End If
        Next iCounter
    End If
    GetUploadResponseMsgs = -1
End Function

' upload compression
'Public Sub BneUploadBeginCompress()
'    Dim objXMLDom As Object
'    Dim lngUploadRowCount As Long
'    Dim theXMLFile As String
'    Dim theZipFile As String
'    Dim uuEncodedFile As String
'    Dim fileToEncode As String
'    Dim zipApp As String
'    Dim zipAppEXE As String
'    Dim fso As FileSystemObject
'    Set fso = New FileSystemObject
'    Dim sMsg As String
'    Dim response As Integer
'    Dim continueUpload As Boolean
'    Dim existsEXE As Boolean
'    Dim appAndExeSync As Boolean
'    Dim objProperties As New BneVBAProperties
'    Dim appZipProp As New BneVBAProperty
'    Dim exeZipProp As New BneVBAProperty
'    continueUpload = False
'    existsEXE = True
'    appAndExeSync = True
''
'On Error GoTo ErrorHandler
'    Application.Calculation = xlCalculationManual
''    First things, get the currently selected cell(s)
''    Create the XML Document and populate it
'    Set objXMLDom = createDOMDocument()
'    AddBneMsg BNE_INFORMATION, "BneUploadBeginCompress.createDOMDocument", "Created Empty"
'    If Not objXMLDom Is Nothing Then
'      Dim objUplStructure As New BneUploadLayout
'      lngUploadRowCount = m_objUplStructure.createUploadXML(m_colSheets, New BneLayout, objXMLDom, m_blnFlaggedRows)
'    Else
'        AddBneMsg BNE_ERROR, "BneUploadBeginCompress", "Couldn't Create a DOM Document"
'        GoTo ErrorHandler
'    End If
'    AddBneMsg BNE_INFORMATION, "BneUploadBeginCompress", "Created XML"
'    theXMLFile = BneGetTempFile()
'    theXMLFile = Replace(theXMLFile, "tmp", "xml")
'    objXMLDom.async = False
'    objXMLDom.Save (theXMLFile)
'    AddBneMsg BNE_INFORMATION, "BneUploadBeginCompress", "Saved XML into File & theXMLFile "
''   If file in the OS?
'    Do While Not fso.FileExists(theXMLFile)
'        Application.Wait (Now + TimeValue("00:00:01"))
'    Loop
'    Set objXMLDom = Nothing
''    Zip the File that contains the XML Stream File
'
'     If (Not objProperties.getProperty("bne_zip_application") Is Nothing) Then
'         zipApp = objProperties.getProperty("bne_zip_application").value
'     Else
'         zipApp = vbNullString
'     End If
'     If (Not objProperties.getProperty("bne_zip_executable") Is Nothing) Then
'        zipAppEXE = objProperties.getProperty("bne_zip_executable").value
'     Else
'        zipAppEXE = vbNullString
'     End If
' If Not (UCase(zipApp) = "NONE" Or zipApp = "null" Or zipApp = vbNullString) Then
'     existsEXE = BneExistsZipApp(zipApp, zipAppEXE)
'    If Not existsEXE Then
'      sMsg = "&ZIPAPP could not be found at &EXECUTABLE for compressing the data. Do you want to continue without compressing the data?"
'      sMsg = Replace(sMsg, "&EXECUTABLE", zipAppEXE)
'      sMsg = Replace(sMsg, "&ZIPAPP", zipApp)
'      response = MsgBox(sMsg, vbYesNo)
'      If response = vbYes Then
'        continueUpload = True
'      Else
'        m_lngJobID = 0
'        m_objCommonParams.add "bne:uploadCancelled", "true"
'        m_intStatus = BNE_UPL_ERROR
'      sMsg = "Compressing executable: &EXECUTABLE does not exists. Please enter the correct Executable in Oracle -> Settings Menu."
'      sMsg = Replace(sMsg, "&EXECUTABLE", zipAppEXE)
'        m_cause = sMsg
'        m_text = "The upload process has been canceled."
'        Application.Calculation = xlCalculationAutomatic
'        Call BneProcessingEnd
'        Exit Sub
'      End If
'    Else
'        continueUpload = True
'    End If
'    appAndExeSync = isValidZipAppAndExe(zipApp, zipAppEXE)
'    If Not appAndExeSync Then
'      continueUpload = False
'      sMsg = "&ZIPAPP and &EXECUTABLE do not correspond or are not valid. Do you want to continue without compressing the data?"
'      sMsg = Replace(sMsg, "&EXECUTABLE", zipAppEXE)
'      sMsg = Replace(sMsg, "&ZIPAPP", zipApp)
'      response = MsgBox(sMsg, vbYesNo)
'      If response = vbYes Then
'         continueUpload = True
'      Else
'         m_lngJobID = 0
'         m_objCommonParams.add "bne:uploadCancelled", "true"
'         m_intStatus = BNE_UPL_ERROR
'         m_cause = "&ZIPAPP and &EXECUTABLE do not correspond or are not valid. Use Oracle -> Settings Menu to correct this Inconsistency."
'         m_cause = Replace(m_cause, "&EXECUTABLE", zipAppEXE)
'         m_cause = Replace(m_cause, "&ZIPAPP", zipApp)
'         m_text = " The upload process has been canceled."
'         Application.Calculation = xlCalculationAutomatic
'         Call BneProcessingEnd
'         Exit Sub
'      End If
'    Else
'      continueUpload = True
'    End If
' Else
'    continueUpload = True
'    existsEXE = False
' End If
' If continueUpload And (Not existsEXE Or Not appAndExeSync) Then
'    If Not SetupIsValid() Then
'       AddBneMsg BNE_ERROR, "BneUploadBeginCompress", "The Configuration for the upload is invalid.  Aborting."
'        GoTo ErrorHandler
'    End If
'    If lngUploadRowCount = -1 Then
'       m_objCommonParams.add "bne:uploadCancelled", "true"
'    Else
'       m_objCommonParams.add "bne:uploadRowCount", CStr(lngUploadRowCount)
'    End If
'    AddBneMsg BNE_INFORMATION, "BneUploadBeginCompress", "Going to UploadDataCompress: "
'    m_lngJobID = UploadDataCompress(theXMLFile, m_objCommonParams, False)
'    BneDeleteFile (theXMLFile)
'    AddBneMsg BNE_INFORMATION, "BneUploadBeginCompress", "Returned from UploadDataCompress"
'    Application.Calculation = xlCalculationAutomatic
' Else
'    If (existsEXE And appAndExeSync) Then
'       theZipFile = BneZipFile(theXMLFile, zipApp, zipAppEXE)
'       BneDeleteFile (theXMLFile)
'       AddBneMsg BNE_INFORMATION, "BneUploadBeginCompress", "Created ZIP File"
'       fileToEncode = fso.GetBaseName(theZipFile) & ".zip"
'       uuEncodedFile = BneEncode(BneFileReadBinary(theZipFile), fileToEncode)
'       AddBneMsg BNE_INFORMATION, "BneUploadBeginCompress", "Created and Saved UUEncodedFile: " & uuEncodedFile
'       Do While Not fso.FileExists(uuEncodedFile)
'          Application.Wait (Now + TimeValue("00:00:01"))
'       Loop
'       BneDeleteFile (theZipFile)
'       If Not SetupIsValid() Then
'              AddBneMsg BNE_ERROR, "BneUploadBeginCompress", "The Configuration for the upload is invalid.  Aborting."
'              GoTo ErrorHandler
'       End If
'       If lngUploadRowCount = -1 Then
'             m_objCommonParams.add "bne:uploadCancelled", "true"
'       Else
'             m_objCommonParams.add "bne:uploadRowCount", CStr(lngUploadRowCount)
'       End If
'       AddBneMsg BNE_INFORMATION, "BneUploadBeginCompress", "Going to UploadDataCompress: "
'       m_lngJobID = UploadDataCompress(uuEncodedFile, m_objCommonParams, True)
'       BneDeleteFile (uuEncodedFile)
'       AddBneMsg BNE_INFORMATION, "BneUploadBeginCompress", "Returned from UploadDataCompress"
'       Application.Calculation = xlCalculationAutomatic
''  Else Cancel Upload because tehre is not EXE application at client
''  This has already done before when displayed the decision message to user.
'    End If
'    End If
'   Exit Sub
'ErrorHandler:
'   AddBneMsg BNE_ERROR, "BneUploadBeginCompress", "Hit the ErrorHandler: " & Err.Description
'   m_intStatus = BNE_UPL_ERROR
'   m_lngJobID = 0
'   m_objCommonParams.add "bne:uploadCancelled", "true"
'   m_intStatus = BNE_UPL_ERROR
'   m_cause = "BneUploadBeginCompress got error: " & Err.Number & ":" & Err.Description
'   m_text = " The upload process has been canceled."
'   Application.Calculation = xlCalculationAutomatic
'   Call BneProcessingEnd
'End Sub
'Used to upload the XML document to the middle-tier.
'In Param     document As String - Name of the uuEncodedFile to send
'In Param     commonParams As BneVBAParameters - An collection of strings that represent the common upload params.
'Out Param    jobId As Long - The job Id of this upload.  If could not be retrievedm this will be -1.
'This subroutine assumes that the commonParameters WILL contain the bne:jobId, bne:servicePath, and bne:icxId parameters.
Private Function UploadDataCompress(ByRef Document As String, commonParams As BneVBAParameters, ByVal isZip As Boolean) As Long
    Dim oXMLhttp As Object
    Dim oXMLDom As Object
    Dim sServerPath As String
    Dim sUploadServlet As String
    Dim sIcxId As String
    Dim sDocumentId As String
    Dim iParam As Integer
    Dim resultEvents As Integer
    Dim lJobId As Long
    Dim sBoundary As String
    Dim oParam As BneVBAParameter
    Dim message As String
    Dim sContent As String
    Dim contentA As String
    Dim contentC As String
    Dim contentABC As String
    Dim httpbody As String
    AddBneMsg BNE_INFORMATION, "UploadDataCompress", "Starting "
    lJobId = -1
    sBoundary = "---------------------------7d06f1de0452"
'   Remember boundaries require a prefix of "--" and for the last boundary a postfix of "--"
    On Error GoTo CreateHTTPErrorHandler
    message = "UploadDataCompress Creating HTTPObject"
    Set oXMLhttp = CreateHTTPObject
    On Error GoTo CreateFormErrorHandler
    message = "UploadDataCompress Preparing POST parameters"
    sServerPath = commonParams.Item("bne:servicePath").value
    sUploadServlet = "BneUploaderService"
    sIcxId = commonParams.Item("bne:icxId").value
    sDocumentId = commonParams.Item("bne:documentId").value
  
    message = "UploadDataCompress Calling POST"
    Dim servletURLParams As String
    servletURLParams = sServerPath & sUploadServlet & "?ICX_SESSION_ID=" & sIcxId & "&bne:documentId=" & sDocumentId & "&bne:encoding=UTF-8" & "&bne:uueupload="
    If isZip Then
        servletURLParams = servletURLParams & "TRUE"
    Else
        servletURLParams = servletURLParams & "FALSE"
    End If
    oXMLhttp.Open "POST", servletURLParams, False
    message = "UploadDataCompress Calling setRequestSet"
    AddBneMsg BNE_INFORMATION, "UploadDataCompress", "UploadDataCompress POST Done ... "
    oXMLhttp.setRequestHeader "Content-Type", "multipart/form-data; boundary=" & sBoundary
  
    message = "UploadDataCompress Building Content Part A"
    sContent = "--" & sBoundary & vbCrLf
    If (isZip) Then
        sContent = sContent & "Content-Disposition: form-data; name=""uploadfilename""; filename=""bne_data_" & "YnFOL4vX" & ".uue""" & vbCrLf
    Else
        sContent = sContent & "Content-Disposition: form-data; name=""uploadfilename""; filename=""bne_data_" & "YnFOL4vX" & ".xml""" & vbCrLf
    End If
    sContent = sContent & "Content-Type: application/base64" & vbCrLf & vbCrLf
    message = "UploadDataCompress Saving Content Part A"
     contentA = sContent
     sContent = vbNullString
  
    message = "UploadDataCompress Building Content Part C"
'    sContent = sContent & BneGetFileBytes(Document)
'    sContent = sContent & BneFileReadBinary(Document)
'    Do each of the common parameters
    For iParam = 1 To commonParams.count
        Set oParam = commonParams.Item(iParam)
        sContent = sContent & "--" & sBoundary & vbCrLf
        sContent = sContent & "Content-Disposition: form-data; name=""" & oParam.name & """" & vbCrLf & vbCrLf
        sContent = sContent & oParam.value & vbCrLf
    Next iParam
    sContent = sContent & "--" & sBoundary & "--"
    AddBneMsg BNE_TRACE, "UploadDataCompress", "Form Contents: " & sContent
    On Error GoTo SendErrorHandler
    AddBneMsg BNE_INFORMATION, "UploadDataCompress", "Defined Start Content and End Content of the http body ... "
    message = "UploadDataCompress Saving Content Part B"
     contentC = sContent
     sContent = vbNullString
     If (isZip) Then
             httpbody = BneByteArrayToString(BneFileReadBinary(Document))
             contentABC = contentA & httpbody & contentC
     Else
              Set oXMLDom = createDOMDocument
              oXMLDom.Load (Document)
              contentABC = contentA & oXMLDom.xml & contentC
              Set oXMLDom = Nothing
     End If
     contentA = vbNullString
     contentC = vbNullString
     httpbody = vbNullString
    message = "UploadDataCompress Doing the XMLhttp send"
    message = "UploadDataCompress Http Send "
    AddBneMsg BNE_INFORMATION, "UploadDataCompress", "Added Parameters & before Send ..."
    oXMLhttp.send (contentABC)
    contentABC = vbNullString
    AddBneMsg BNE_INFORMATION, "UploadDataCompress", "Returned from http Send ..."
  
    AddBneMsg BNE_TRACE, "UploadDataCompress", "HTTP Response Status: " & CStr(oXMLhttp.Status)
    On Error GoTo ResponseErrorHandler
    message = "UploadDataCompress Managing Response"
    If oXMLhttp.readyState = 4 Then 'The upload has finished
        If oXMLhttp.Status = 200 Then 'HTTP Status 200 returned
            Dim oResponse As Object
            Set oResponse = oXMLhttp.responseXML
            If oResponse Is Nothing Then
              AddBneMsg BNE_ERROR, "UploadDataCompress", "The HTTP response was nothing.  No Job ID returned"
            ElseIf oResponse.xml = "" Then
              AddBneMsg BNE_ERROR, "UploadDataCompress", "The HTTP response contained no XML.  No Job ID returned"
            Else
              lJobId = GetUploadResponseMsgs(oResponse, commonParams)
              AddBneMsg BNE_TRACE, "UploadDataCompress", "Returned JobID: " & lJobId
            End If
        Else 'Nasty error
            AddBneMsg BNE_ERROR, "DownloadMessages", "The HTTP response status was not 200.  The status was: " & CStr(oXMLhttp.Status)
        End If
    Else 'Should never get to here as POST was Synchronous, therefore, once completed, returns to readyState = 4.
      AddBneMsg BNE_ERROR, "UploadDataCompress", "MSXML returned readyState = " & oXMLhttp.readyState
    End If
    Set oXMLhttp = Nothing
    UploadDataCompress = lJobId
    Exit Function
CreateHTTPErrorHandler:
    AddBneMsg BNE_ERROR, "UploadDataCompress", "Unable to Create HTTP Object"
    UploadDataCompress = lJobId
    Exit Function
CreateFormErrorHandler:
    AddBneMsg BNE_ERROR, "UploadDataCompress", "Error Creating Form "
    UploadDataCompress = lJobId
    Exit Function
SendErrorHandler:
    AddBneMsg BNE_ERROR, "UploadDataCompress", "Error Posting the HTTP Request"
    UploadDataCompress = lJobId
    Exit Function
ResponseErrorHandler:
    AddBneMsg BNE_ERROR, "UploadDataCompress", "Error with the HTTP Response"
    UploadDataCompress = lJobId
    Exit Function
End Function
' end of upload compression


' Temp XLSX File creation
Private Function createTempXLSXFile() As String
    Dim tempFilePath As String
    Dim currentFileName As String
    Dim tempFileName
    Dim tempWorkbookFileName As String
    Dim dotIndex As Integer
    Dim tempExtractFolder As String
    Dim tempxlsm As String
    Dim randomName As String
    Dim randomFileName As String
    Dim posn As Integer
    Dim urlEncRandomName As String
    
    ' gather current filename and temp filename
    tempFilePath = SetTempFilePath()
    ' Enhance below code to url enocde the file name for uploading and append a random file name at the end of this file name.
    posn = InStrRev(tempFilePath, "\")
    If posn > 0 Then
       randomName = Right$(tempFilePath, Len(tempFilePath) - posn)
    Else
        randomName = ""
    End If
    currentFileName = ActiveWorkbook.name
    dotIndex = InStrRev(currentFileName, ".")
    randomFileName = Left(currentFileName, dotIndex - 1) & randomName
    tempFileName = tempFilePath & "\" & randomFileName & ".zip"
    urlEncRandomName = UrlEncodeUtf8(randomFileName)
    tempWorkbookFileName = tempFilePath & "\" & urlEncRandomName & ".xlsx"
    If (Len(tempWorkbookFileName) >= 260) Then
       tempWorkbookFileName = tempFilePath & "\" & randomName & ".xlsx"
    End If
    tempExtractFolder = tempFilePath & "\bne"
    tempxlsm = tempFilePath & "\" & "test.xlsm"
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    ActiveWorkbook.SaveCopyAs tempFileName
    filterUploadFile tempFileName, tempExtractFolder, tempWorkbookFileName
    
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    
    createTempXLSXFile = tempWorkbookFileName
'    createTempXLSXFile = tempxlsm
End Function
Private Sub filterUploadFile(ZipFile As Variant, tempExtractFolder As String, xlsxFileName As String)
    Dim oApp As Object
    Dim fil As Object
    Dim fs As Object
    Dim fso As Object
    
    Dim st As Single
    st = Timer
        
   'Extract the files into the newly created folder
    Set oApp = CreateObject("Shell.Application")
    Set fso = CreateObject("Scripting.FileSystemObject")
    
    Dim timeoutValue As String
    timeoutValue = "0:00:02"
    
    'Set timeout value based on number of rows to upload
    
    If (m_lngUploadRowCount >= 500 And m_lngUploadRowCount < 10000) Then
        timeoutValue = "0:00:03"
    ElseIf (m_lngUploadRowCount >= 10000 And m_lngUploadRowCount < 30000) Then
        timeoutValue = "0:00:05"
    ElseIf (m_lngUploadRowCount >= 30000 And m_lngUploadRowCount < 50000) Then
        timeoutValue = "0:00:07"
    ElseIf (m_lngUploadRowCount >= 50000 And m_lngUploadRowCount < 80000) Then
        timeoutValue = "0:00:08"
    ElseIf (m_lngUploadRowCount >= 80000) Then
        timeoutValue = "0:00:10"
    End If
    
    MkDir tempExtractFolder
    Dim fCount As Integer
    fCount = 0
    With oApp.Namespace(CVar(ZipFile))
        oApp.Namespace(CVar(tempExtractFolder)).CopyHere .Items
         
        On Error Resume Next
        .Items.count = oApp.Namespace(CVar(tempExtractFolder)).Items.count
        Application.Wait (Now + TimeValue(timeoutValue))
        On Error GoTo 0
    End With
    
    'Delete unwanted files in the temp folder
    On Error Resume Next
    fso.DeleteFolder tempExtractFolder & "\customUI\*.*", "True"
    fso.DeleteFolder tempExtractFolder & "\customUI"
    
    Kill tempExtractFolder & "\xl\" & "drawings"
    Kill tempExtractFolder & "\xl\" & "theme"
    Kill tempExtractFolder & "\xl\" & "media"
    Kill tempExtractFolder & "\xl\" & "vbaProject.bin"
    On Error GoTo 0
    
    Debug.Print "Time to extract " & Timer - st & " secs."
    
    ' zip back wanted stuff
    st = Timer
    Dim xlsxTempZipFile As Variant
    xlsxTempZipFile = tempExtractFolder & ".zip"
    NewZip xlsxTempZipFile
    
    oApp.Namespace(CVar(xlsxTempZipFile)).CopyHere oApp.Namespace(CVar(tempExtractFolder)).Items
    On Error Resume Next
    oApp.Namespace(CVar(xlsxTempZipFile)).Items.count = oApp.Namespace(CVar(tempExtractFolder)).Items.count
    Application.Wait (Now + TimeValue(timeoutValue))
    On Error GoTo 0
          
    ' finally rename the zip file to xlsx
    Name xlsxTempZipFile As xlsxFileName
    
    ' clean up needed?
    fso.DeleteFile tempExtractFolder & "\*.*", True
    fso.DeleteFolder tempExtractFolder & "\*.*", True
    fso.DeleteFolder tempExtractFolder

    fso.DeleteFile ZipFile
    
    Debug.Print "Time to zip back and cleanup " & Timer - st & " secs."
    Debug.Print xlsxFileName
    
End Sub

Public Function SetTempFilePath()
    Dim fso As Object
    Dim SourceFolder As Object
    Dim FileItem As Object
    Dim tempFolder As String
    Dim tempFileName As String
    Dim tempFileLocation As String
    Set fso = CreateObject("Scripting.FileSystemObject")
    tempFolder = fso.GetSpecialFolder(TemporaryFolder)
    tempFileName = fso.GetTempName
    tempFileLocation = tempFolder + "\bne" + Left(tempFileName, Len(tempFileName) - 4)
    SetTempFilePath = fso.CreateFolder(tempFileLocation)
 End Function

' Creates an empty zip file
Sub NewZip(sPath)
    If Len(Dir(sPath)) > 0 Then Kill sPath
    Open sPath For Output As #1
    Print #1, Chr$(80) & Chr$(75) & Chr$(5) & Chr$(6) & String(18, 0)
    Close #1
End Sub
' End of Temp XLSX File creation

' process upload response message
Public Sub processMessages(objReturnDoc As Object, Optional blnUploadCancelled As Boolean = False)
    Dim objMessage As BneVBAMessage
'    Dim objReturnMessages As BneVBAMessages
    Dim objMessageList, objMessageNode As Object
    'Dim objUplSheet As BneUploadSheet
    Dim blnUploadFailed As Boolean
    Dim blnUploadWarning As Boolean
    Dim validRowCount As Long
    Dim objSheet As Worksheet
    
    Application.ScreenUpdating = False
    Set objMessageList = objReturnDoc.DocumentElement.SelectNodes("/bne:document/bne:message")
    Dim objSheetProtection As New Dictionary
    For Each objSheet In m_colSheets
        If objSheet.ProtectContents Then
            objSheet.Unprotect
            objSheetProtection.add key:=objSheet.Index, Item:=objSheet
        End If
        ClearContents objSheet
    Next
    Set m_rowCountDict = New Dictionary
'    Set objReturnMessages = New BneVBAMessages
    
    Dim objSummarySheet As BneSummarySheet
    If m_colSheets.count > 1 Then
'       more than 1 sheet uploaded create a summary sheet
       Set objSummarySheet = New BneSummarySheet
       objSummarySheet.Clear
    End If
    
    For Each objMessageNode In objMessageList
        Set objMessage = New BneVBAMessage
        objMessage.createMessage objMessageNode
         
        If objMessage.msgType = "ERROR" And (bneMain.g_commitEachRow = False Or objMessage.msgElement = "header") Then
            blnUploadFailed = True
        ElseIf objMessage.msgType = "WARNING" And objMessage.msgIdx > 0 Then
            blnUploadWarning = True
        ElseIf objMessage.msgType = "DATA" And objMessage.msgText = "BNE_VALID_ROW_COUNT" Then
            validRowCount = CLng(objMessage.msgValue)
        End If
        processMessage objMessage, objSummarySheet
'        objReturnMessages.addMessage objMessage
    Next

    If (Not blnUploadCancelled And Not blnUploadFailed) Or bneMain.g_commitEachRow = True Then
        For Each objSheet In m_colSheets
            processUploadSuccess objSheet, blnUploadWarning, validRowCount
        Next
    End If
    
    For Each objSheet In m_colSheets
        If objSheetProtection.Exists(key:=objSheet.Index) Then
            objSheet.Protect
        End If
    Next
    objSheetProtection.RemoveAll
    m_rowCountDict.RemoveAll
    Application.ScreenUpdating = True
    
End Sub

Public Sub processMessage(objMessage As BneVBAMessage, objSummarySheet As BneSummarySheet)
    Dim objMsgIcoRange As Range
    Dim objMsgRange As Range
    Dim objMsgHiddenRange As Range
    Dim objSheet As Worksheet
    Dim lngIdx As Long
    Dim isSheetProtected As Boolean
    Dim rowsCount As Long
    Dim prevSheetRows As Long
    
    On Error GoTo ErrorHandler
    rowsCount = 0
    prevSheetRows = 0
    lngIdx = CLng(objMessage.msgIdx)
    
    ' find the right sheet
    Dim uploadSheet As String
    uploadSheet = m_objCommonParams.Item("bne:uploadSheet").value
    If uploadSheet = "ALL" Then
        Dim sheetFound As Boolean
        sheetFound = False
        For Each objSheet In m_colSheets
            'Set objMsgRange = objSheet.Names("BNE_MESSAGES").RefersToRange
            rowsCount = rowsCount + CountNotEmptyLines(objSheet)
            If lngIdx <= rowsCount Then
                sheetFound = True
                Exit For
            End If
            prevSheetRows = rowsCount
        Next objSheet
        If sheetFound Then
            lngIdx = lngIdx - prevSheetRows
        Else
            Exit Sub
        End If
    Else
        Set objSheet = ThisWorkbook.Sheets(uploadSheet)
    End If

    If Not lngIdx = 0 Then
        If Not isLineEmpty(objSheet, lngIdx) Then
            objMessage.msgIdx = lngIdx
            If Not objSummarySheet Is Nothing Then
                objSummarySheet.addMessage objSheet, objMessage
            End If
            Set objMsgIcoRange = objSheet.Names("BNE_MESSAGES_LAMP").RefersToRange
            Set objMsgRange = objSheet.Names("BNE_MESSAGES").RefersToRange
            If objMessage.msgType = "ERROR" Then
                objMsgIcoRange(lngIdx).value = "L"
                GoTo addMessage
            ElseIf objMessage.msgType = "WARNING" Then
                If objMsgIcoRange(lngIdx).value <> "L" Then
                  objMsgIcoRange(lngIdx).value = "K"
                  GoTo addMessage
                End If
            End If
        Else
            objMessage.msgIdx = objMessage.msgIdx + 1
            processMessage objMessage, objSummarySheet ' and continue to next row
        End If
    Else
        If Not objSummarySheet Is Nothing Then
            objSummarySheet.addMessage objSheet, objMessage
        End If
    End If

Exit Sub
addMessage:
    Set objMsgHiddenRange = objSheet.Names("BNE_MESSAGES_HIDDEN").RefersToRange
    objMsgHiddenRange.Font.Color = objMsgHiddenRange.Interior.Color
    If Len(objMsgHiddenRange(lngIdx).value) = 0 Then
       objMsgHiddenRange(lngIdx).value = objMessage.xml
    Else
       objMsgHiddenRange(lngIdx).value = objMsgHiddenRange(lngIdx).value & objMessage.xml
    End If
    If Len(objMsgRange(lngIdx).value) = 0 Then
       objMsgRange(lngIdx).value = objMessage.msgText
    Else
       objMsgRange(lngIdx).value = objMsgRange(lngIdx).value & ";" & objMessage.msgText
    End If
    Exit Sub
ErrorHandler:
    AddBneMsg BNE_ERROR, "processMessage", "Hit the ErrorHandler: " & Err.Description
End Sub
Public Sub ClearContents(objSheet As Worksheet)
    Dim objMsgIcoRange As Range
    Dim objMsgRange As Range
    Dim objMsgHiddenRange As Range
    On Error GoTo ErrorHandler
        Set objMsgIcoRange = objSheet.Names("BNE_MESSAGES_LAMP").RefersToRange
        Set objMsgRange = objSheet.Names("BNE_MESSAGES").RefersToRange
        Set objMsgHiddenRange = objSheet.Names("BNE_MESSAGES_HIDDEN").RefersToRange
        objMsgIcoRange.ClearContents
        objMsgRange.ClearContents
        objMsgHiddenRange.ClearContents
        If objMsgIcoRange.FormatConditions.count = 0 Then
        objMsgIcoRange.FormatConditions.add Type:=xlCellValue, Operator:=xlEqual, Formula1:="=""L"""
        objMsgIcoRange.FormatConditions(objMsgIcoRange.FormatConditions.count).SetFirstPriority
        With objMsgIcoRange.FormatConditions(1)
            .Font.Bold = True
            .Font.Italic = False
            .Font.ColorIndex = 1
            .Font.TintAndShade = 0
            .Interior.PatternColorIndex = xlAutomatic
            .Interior.ColorIndex = 3
            .Interior.TintAndShade = 0
            .StopIfTrue = False
        End With
        objMsgIcoRange.FormatConditions.add Type:=xlCellValue, Operator:=xlEqual, Formula1:="=""K"""
        With objMsgIcoRange.FormatConditions(2)
            .Font.Bold = True
            .Font.Italic = False
            .Font.ColorIndex = 1
            .Font.TintAndShade = 0
            .Interior.PatternColorIndex = xlAutomatic
            .Interior.ColorIndex = 6
            .Interior.TintAndShade = 0
            .StopIfTrue = False
        End With
        objMsgIcoRange.FormatConditions.add Type:=xlCellValue, Operator:=xlEqual, Formula1:="=""J"""
        With objMsgIcoRange.FormatConditions(3)
            .Font.Bold = True
            .Font.Italic = False
            .Font.ColorIndex = 1
            .Font.TintAndShade = 0
            .Interior.PatternColorIndex = xlAutomatic
            .Interior.ColorIndex = 4
            .Interior.TintAndShade = 0
            .StopIfTrue = False
        End With
        End If
    Exit Sub
ErrorHandler:
        AddBneMsg BNE_ERROR, "BneUploadBlock.clearContents", "Error: " & Err.Description
End Sub

Public Sub processUploadSuccess(objSheet As Worksheet, blnHasWarnings As Boolean, validRowCount As Long)
' for each row in the array...smile
 Dim objMsgIcoRange As Range
 Dim objUplRange As Range
 Dim varRow As Long
 On Error GoTo ErrorHandler
    Set objMsgIcoRange = objSheet.Names("BNE_MESSAGES_LAMP").RefersToRange
    Set objUplRange = objSheet.Names("BNE_UPLOAD").RefersToRange
    If validRowCount >= objMsgIcoRange.Rows.count And bneMain.g_commitEachRow = False Then
        Dim NotEmptyLines As Long
        NotEmptyLines = CountNotEmptyLines(objSheet)
        If NotEmptyLines = objMsgIcoRange.Rows.count Then
            'all rows in the lines block were upload
            If Not blnHasWarnings Then
                objMsgIcoRange = ""
                objMsgIcoRange = "J"
            End If
        Else
            ' apply individual line wise
            Dim i As Long
            For i = 1 To objMsgIcoRange.Rows.count
                If Not isLineEmpty(objSheet, i) Then
                    objMsgIcoRange(i) = ""
                    objMsgIcoRange(i) = "J"
                End If
            Next i
        End If
        objUplRange.ClearContents
    ElseIf Not m_blnFlaggedRows Then
        'all entered rows were uploaded
        If bneMain.g_commitEachRow = False Then
            objUplRange.ClearContents
        End If
        Dim iconCount As Integer
        iconCount = 0
        If validRowCount > 0 Then
            For varRow = 1 To objMsgIcoRange.Rows.count
               On Error GoTo ErrorHandler
               If objMsgIcoRange(varRow).value <> "L" Then
                   If objMsgIcoRange(varRow).value <> "K" Then
                    objMsgIcoRange(varRow) = ""
                    objMsgIcoRange(varRow) = "J"
                    objUplRange(varRow).ClearContents
                    iconCount = iconCount + 1
                    If iconCount >= validRowCount Then
                        Exit For
                    End If
                   End If
               End If
            Next varRow
        End If
    ElseIf m_blnFlaggedRows Then
        'only flagged rows were uploaded
        For varRow = 1 To objMsgIcoRange.Rows.count
           On Error GoTo ErrorHandler
           If objUplRange(varRow).value = "O" And objMsgIcoRange(varRow).value <> "L" Then
               If objMsgIcoRange(varRow).value <> "K" Then
                objMsgIcoRange(varRow) = ""
                objMsgIcoRange(varRow) = "J"
                objUplRange(varRow).ClearContents
               End If
           End If
        Next varRow
        If bneMain.g_commitEachRow = False Then
            objUplRange.ClearContents
        End If
    End If
Exit Sub
ErrorHandler:
    AddBneMsg BNE_ERROR, "BneVBAUploader.processUploadSuccess", "Error: " & Err.Description
    Resume Next
End Sub

Public Function GetWorksheetForResponse(idx As Long) As Worksheet
    Dim objSheet As Worksheet
    Dim objMsgRange As Range
    Dim rowsCount As Long
    rowsCount = 0
    
    For Each objSheet In ActiveWorkbook.Worksheets
        If Not IsBneInternalSheet(objSheet) Then
            Set objMsgRange = objSheet.Names("BNE_MESSAGES").RefersToRange
            rowsCount = rowsCount + objMsgRange.Rows.count
            If ldx <= rowsCount Then
                Set GetWorksheetForResponse = objSheet
                Exit For
            End If
        End If
    Next objSheet

End Function
Private Function CountNotEmptyLines(objSheet As Worksheet) As Long
    If m_rowCountDict.Exists(objSheet.name) Then
        CountNotEmptyLines = m_rowCountDict.Item(objSheet.name)
    Else
        Dim LineCount As Long
        Dim UploadRange As Range
        Dim i As Long
        Set UploadRange = objSheet.Range("BNE_UPLOAD")
        For i = 1 To UploadRange.Rows.count
            If Not isLineEmpty(objSheet, i) Then
                LineCount = LineCount + 1
            End If
        Next i
        
        m_rowCountDict.add objSheet.name, LineCount
        CountNotEmptyLines = LineCount
    End If
End Function
Private Function isLineEmpty(objSheet As Worksheet, lineIdx As Long) As Boolean
    Dim UploadRange, MsgRange, LineRange As Range
    
    Set UploadRange = objSheet.Range("BNE_UPLOAD")(lineIdx)
    Set MsgRange = objSheet.Range("BNE_MESSAGES")(lineIdx)
    Set LineRange = Range(Cells(UploadRange.Row, UploadRange.Column), Cells(MsgRange.Row, MsgRange.Column))
    
    isLineEmpty = IsRangeEmpty(objSheet, LineRange)
End Function
' end of process upload response message





Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'+=======================================================================+
'|   Copyright (c) 2014 Oracle Corporation, Redwood Shores, CA, USA      |
'|                      All rights reserved.                             |
'+=======================================================================+
'|  HISTORY                                                              |
'|  28-Aug-2014 poramas created.                                         |
'|  06-Feb-2015 poramas 20463704: TST1225: NOT ABLE TO ADD NEW ROWS AT   |
'|                                       THE BOTTOM OF DOCUMENT IN OOXML |
'|  25-Mar-2015 poramas 20753102: TST1225:XLSM FILE IS ALWAYS PROTECTED  |
'|                                          EVEN CLLICK UNPROTECT BUTTON |
'|  13-Apr-2015 poramas 20866282: R.TST1225: LOVS NOT WORKING PROPERLY   |
'|                                                  IN OOXML DOCUMENT    |
'|  14-Apr-2015 poramas 20866005: R.TST1225: SOME HEADER FIELDS ARE      |
'|                                          PROTECTED IN OOXML DOCUMENT  |
'|  23-Apr-2015 poramas 20925762: TST1225: UNABLE TO TURN UPLOAD FLAG    |
'|                                             ON/OFF ON OOXML DOCUMENT  |
'|  30-Apr-2015 poramas 20901121: TST1225:GRAPH IS NOT GENERATED IN OOXML|
'|                                                              DOCUMENT |
'|  05-May-2015 poramas 21032929:TST1225:INVOKING SETTINGS IN ORACLE MENU|
'|                                 GIVES RUN-TIME ERROR IN OOXML DOCUMENT|
'|  27-May-2015 poramas 21101621: TST1225:MODIFY GRAPH TYPE IS NOT SHOWN |
'|                      WHEN GRAPH ALL IS INVOKED IN OOXML               |
'|  27-May-2015 poramas 21156067: UPLOAD DOCUMENT ISSUES IN CWB AND      |
'|                                PAYROLL INTEGRATORS                    |
'|  19-Jun-2015 jicchen 21235738: R.TST1225:OOXML PERIOD YEAR DOWNLOADED |
'|                      AS NUMERIC WITH SEPARATOR IN GL - BUDGETS        |
'|  05-Jan-2016 poramas 21904143: NLS:OOXML:NOT UPLOADING WHEN SHEETNAME |
'|                      HAS NON-ASCII CHARACTERS                         |
'|  11-Jan-2016 poramas 22245750: OOXML:CANNOT UPLOAD AFTER MODIFYING    |
'|                      SHEET NAMES                                      |
'|  01-Mar-2016 poramas 22159729: INSERTED ROW DOES NOT HAVE DEFAULT     |
'|                      VALUE IN OOXML DOCUMENT                          |
'|  26-May-2016 poramas 23250944: R.TST1226:TAB OUT FROM LAST COLUMN     |
'|                      SHOULD FOCUS THE UPL COLUMN IN NEXT ROW          |
'|  16-Jun-2016 poramas 23294585: R:TST1226: LOVS/UPLOAD NOT WORKING WITH|
'|                      NEWLY CREATED LAYOUT IN OOXML                    |
'| 16-Sep-2016 amgonzal 24575212 OOXML WEBADI DOCUMENT: AFTER COPY CELLS |
'|                      FROM EXTERNAL WORKBOOK, PASTE IS DISABLED        |
'| 12-Jan-2017 poramas  2448434: NEW FEAT:SUPPORT FOR DATE TIME FIELDS / |
'|                      SUPPORT FOR TIMEZONE                             |
'| 22-Sep-2017 jicchen  26735098: RESOURCE LOV DOESN'T WORK IN TERRITORY |
'|                      OOXML DOCUMENT                                   |
'| 23-Mar-2018 nputrevu 27244943: RE-LOGIN PAGE SHOW AND ONLY ENGLISH SELECTION
'|                      IN LANGUAGE                                      |
'+=======================================================================+
'RCS_ID = $Header :$
Option Explicit
Option Base 1
Const DOCUMENT_ONCLICK = "BneDocument_OnClick "
Const DOCUMENT_COMPLETE = "BneDocument_Complete "
Const PRODUCT_CODE_LABEL = "12.0.0.0"
Const PRODUCT_RELEASE_LABEL = "12.0.0.0: Friday Feburary 10, 2006"
Const VIEWER_VERSION = "$Revision: 120.0.12020000.14 $"
Const DEBUG_FLAG = False
Const DEBUG_DOCUMENT = "d:\BneDebug-Document.xml"
Const DEBUG_MESSAGES = "c:\BneDebug-Messages.xml"
Const UPLOAD_DOCUMENT = "c:\Bne-Document.xml"
Const UPLOAD_MESSAGES = "c:\Bne-Messages.xml"
Const DOWNLOAD_DOCUMENT = "Bne-Document-Content.xml"
Dim m_objHTMLDocument As HTMLDocument
Dim m_Browser As Object
Dim m_InterfaceColName As String
Dim m_InterfaceName As String
Dim m_flagRow As Boolean
Dim m_DocumentProcessor As String
Dim m_SessionState As Boolean
Dim m_SessionTicket As String
Dim m_StatusBarVisible As Boolean
Dim m_TicketNumber As Long
Dim intBrowserWidth As Integer
Dim intBrowserHeight As Integer
Dim comingFromDelete As Boolean
Dim m_objVBAUploader As BneVBAUploader
Dim m_col_InterfaceCols As Collection
Dim m_clsLayout As BneLayout
Dim m_LOVFlag As Boolean
Dim m_rowsInLines As Long
Dim m_PreviousSelection As Range
Dim m_blnUploadAll As Boolean
Dim m_newRibbonWorkbookPath As Collection
Dim m_servletPath As String
Dim m_componentService As String
Dim m_uploadService As String
Dim m_downloadService As String
Dim m_applicationService As String
Dim m_traceLevelDesc As String
Dim m_standartDateFormat As String
Dim m_standartDateTimeFormat As String
Dim m_isReporting As Boolean
Dim m_ossCookie As String
Dim m_generatedLanguage As String
Dim m_uploadCompression As Boolean
'Initial Sheet Creation procedure - This will be initiated by BneMain.BneOnCreateProcedure.
'It should only be run on initial sheet creation.
Public Sub BneOnCreateProcedure()
    
   'initiate servlet agent and other value from custom xml
   m_servletPath = ActiveWorkbook.CustomDocumentProperties("host")
   m_componentService = m_servletPath & ActiveWorkbook.CustomDocumentProperties("component_service")
   m_applicationService = m_servletPath & ActiveWorkbook.CustomDocumentProperties("application_service")
   m_uploadService = m_servletPath & ActiveWorkbook.CustomDocumentProperties("upload_service")
   m_downloadService = m_servletPath & ActiveWorkbook.CustomDocumentProperties("download_service")
   m_traceLevelDesc = ActiveWorkbook.CustomDocumentProperties("tracelevel")
   m_standartDateFormat = ActiveWorkbook.CustomDocumentProperties("STANDARD_DATE_FORMAT")
   
   On Error Resume Next
   m_standartDateTimeFormat = ""
   m_standartDateTimeFormat = ActiveWorkbook.CustomDocumentProperties("STANDARD_DATETIME_FORMAT")
   On Error GoTo ErrorHandler
   
   Dim isReporting As String
   isReporting = ActiveWorkbook.CustomDocumentProperties("isreporting")
   If (isReporting = "true") Then
        m_isReporting = True
   Else
        m_isReporting = False
   End If
   Dim uploadCompression As String
   uploadCompression = ActiveWorkbook.CustomDocumentProperties("upload_compression")
   If (uploadCompression = "true") Then
        m_uploadCompression = True
   Else
        m_uploadCompression = False
   End If
   m_ossCookie = ActiveWorkbook.CustomDocumentProperties("osscookie")
   m_generatedLanguage = ActiveWorkbook.CustomDocumentProperties("generated_language")
   'end of initialize
    
   Call BneCreateLayout
   
   On Error Resume Next
   ' hide named ranges
   Dim isProtected As Boolean
   isProtected = Me.ProtectContents
   If isProtected Then
    Me.Unprotect
   End If
   If Not m_traceLevelDesc = "TRACE" Then
        Dim n As name
        For Each n In Me.Names
         n.Visible = False
        Next n
   End If

   RefreshHeaderBlockDateCells
   If isProtected Then
    Me.Protect
   End If
   
ErrorHandler:
End Sub
Public Sub BneShowFilters()
    Dim pDrawingObjects As Boolean
    Dim pContents As Boolean
    Dim pScenarios As Boolean
    
    Dim TopRow As Long
    Dim TopColumn As Long
    
    Dim linesRange As Range
    Dim LinesBlockHdr As Range
    
    Dim TipTextExists As Boolean
    Dim HeaderOffset As Integer
    
    Dim InterfaceCols As Collection
    
'     Check if this method should be executed based on AutoFilterMode
    If Not AutoFilterMode Then
        Application.ScreenUpdating = False
        With Me
            pDrawingObjects = .ProtectDrawingObjects
            pContents = .ProtectContents
            pScenarios = .ProtectScenarios
            If Not pDrawingObjects And Not pContents And Not pScenarios Then
            Else
                .Unprotect
            End If
        End With
        TopRow = ActiveWindow.VisibleRange.Row
        TopColumn = ActiveWindow.VisibleRange.Column
        
        Set InterfaceCols = BneGetVBAInterfaceCols
        Set linesRange = BneRetrieveLinesBlockRange(Me, InterfaceCols)
        
'         Determine Header Offset
        TipTextExists = m_isReporting
        If TipTextExists Then
            HeaderOffset = -2
        Else
            HeaderOffset = -1
        End If
        
        With Me
'             Perform check to ensure ranges have been found and values assigned
            If Not linesRange Is Nothing Then
'                 Set Lines Range and Autofilter
                Set LinesBlockHdr = Range(Cells(linesRange.Row + HeaderOffset, linesRange.Column), Cells(linesRange.Row, linesRange.Columns(linesRange.Columns.count).Column))
                LinesBlockHdr.AutoFilter
                
'                 Hide Tip Row if it exists
'                 NB - This must be done AFTER the autofilter has been applied.
                If TipTextExists Then
                    .Rows(linesRange.Row - 1).hidden = True
                End If
            End If
            
            ActiveWindow.ScrollRow = TopRow
            ActiveWindow.ScrollColumn = TopColumn
            If .AutoFilterMode = False Then
                .Protect DrawingObjects:=True, contents:=True, Scenarios:=True
            End If
        End With
    End If
    
'     Set Menu Changes
    'BneSelectionChange_Menus Me.UsedRange
End Sub
Public Function IsEnabled_231_SHOW_FILTERS() As Boolean
    If Me.AutoFilterMode Then
      IsEnabled_231_SHOW_FILTERS = False
    Else
      IsEnabled_231_SHOW_FILTERS = True
    End If
End Function
Public Sub BneHideFilters()
    Dim pDrawingObjects As Boolean
    Dim pContents As Boolean
    Dim pScenarios As Boolean
    
    Dim TopRow As Long
    Dim TopColumn As Long
    
    Dim linesRange As Range
    Dim LinesBlockHdr As Range
    
    Dim TipTextExists As Boolean
    Dim HeaderOffset As Integer
    
    Dim InterfaceCols As Collection
    
'     Check if this method should be executed based on AutoFilterMode
    If AutoFilterMode Then
        Application.ScreenUpdating = False
        With Me
            pDrawingObjects = .ProtectDrawingObjects
            pContents = .ProtectContents
            pScenarios = .ProtectScenarios
            If Not pDrawingObjects And Not pContents And Not pScenarios Then
            Else
                .Unprotect
            End If
        End With
        TopRow = ActiveWindow.VisibleRange.Row
        TopColumn = ActiveWindow.VisibleRange.Column
        
        Set InterfaceCols = BneGetVBAInterfaceCols
        Set linesRange = BneRetrieveLinesBlockRange(Me, InterfaceCols)
        
'         Determine Header Offset
        TipTextExists = m_isReporting
        If TipTextExists Then
            HeaderOffset = -2
        Else
            HeaderOffset = -1
        End If
        
        With Me
'             Perform check to ensure ranges have been found and values assigned
            If Not linesRange Is Nothing Then
'                 Set Lines Range and Autofilter
                Set LinesBlockHdr = Range(Cells(linesRange.Row + HeaderOffset, linesRange.Column), Cells(linesRange.Row, linesRange.Columns(linesRange.Columns.count).Column))
                LinesBlockHdr.AutoFilter
                
'                 Show Tip Row if it exists
'                 NB - This must be done AFTER the autofilter has been applied.
                If TipTextExists Then
                    .Rows(linesRange.Row - 1).hidden = False
                End If
            End If
            
            ActiveWindow.ScrollRow = TopRow
            ActiveWindow.ScrollColumn = TopColumn
            If .AutoFilterMode = False Then
                .Protect DrawingObjects:=True, contents:=True, Scenarios:=True
            End If
        End With
    End If
    
'     Set Menu Changes
    BneSelectionChange_Menus Me.UsedRange
End Sub
Public Function IsEnabled_231_HIDE_FILTERS() As Boolean
    If Me.AutoFilterMode Then
      IsEnabled_231_HIDE_FILTERS = True
    Else
      IsEnabled_231_HIDE_FILTERS = False
    End If
End Function
Public Sub BneResetFilters()
    Dim pDrawingObjects As Boolean
    Dim pContents As Boolean
    Dim pScenarios As Boolean
    
    Dim linesRange As Range
    
    Dim InterfaceCols As Collection
        
'     Check if this method should be executed based on AutoFilterMode
    If AutoFilterMode Then
        Application.ScreenUpdating = False
        With Me
            pDrawingObjects = .ProtectDrawingObjects
            pContents = .ProtectContents
            pScenarios = .ProtectScenarios
            If Not pDrawingObjects And Not pContents And Not pScenarios Then
            Else
                .Unprotect
            End If
            
            On Error Resume Next
            
            .ShowAllData
        End With
        
'         Hide tip text row if it exists
        Set InterfaceCols = BneGetVBAInterfaceCols
        If m_isReporting Then
            
'             Attempt to retrieve first column
            Set linesRange = BneRetrieveLinesBlockRange(Me, InterfaceCols)
'             Perform check to ensure range has been found and value assigned
            If Not linesRange Is Nothing Then
'                 Hide Tip Row if it exists
                Me.Rows(linesRange.Row - 1).hidden = True
            End If
        End If
        
        With Me
            If Not pDrawingObjects And Not pContents And Not pScenarios Then
            Else
                .Protect DrawingObjects:=True, contents:=True, Scenarios:=True
            End If
        End With
    End If
End Sub
Public Function IsEnabled_231_RESET_FILTERS() As Boolean
    If Me.AutoFilterMode Then
      IsEnabled_231_RESET_FILTERS = True
    Else
      IsEnabled_231_RESET_FILTERS = False
    End If
End Function

Public Sub GLAddNote(objCellRng As Range)
Dim objNoteRng As Range
    Me.Unprotect
    Application.EnableEvents = False
    If Not objCellRng Is Nothing Then
        Set objNoteRng = Range(Cells(objCellRng.Row, objCellRng.Column), Cells(objCellRng.Row, objCellRng.Column))
        objNoteRng.Select
        If objNoteRng.Comment Is Nothing Then
            objNoteRng.AddComment
            objNoteRng.Comment.text text:=objNoteRng.Comment.Author & ":"
        End If
        objNoteRng.Comment.Shape.Visible = msoCTrue
        objNoteRng.Comment.Shape.Select
    End If
    Application.EnableEvents = True
End Sub
Public Sub GLAddBudgetNote()
    Dim objSeg1Rng As Range
    On Error Resume Next
    Set objSeg1Rng = Me.Names("CONTEXT").RefersToRange
    GLAddNote objSeg1Rng
End Sub
Public Sub GLAddAccountNote()
Dim objSeg1Rng As Range
Dim objLineRng As Range
Dim objAccRng As Range
On Error Resume Next
  Set objLineRng = Names("LINE").RefersToRange
  Set objSeg1Rng = Names("GL_BUDGET_INTERFACE_SEGMENT1").RefersToRange
  If Not Application.Intersect(Selection, objLineRng) Is Nothing Then
    Set objAccRng = Range(Cells(Selection.Row, objSeg1Rng.Column), Cells(Selection.Row, objSeg1Rng.Column))
  Else
    Set objAccRng = Range(Cells(objSeg1Rng.Row, objSeg1Rng.Column), Cells(objSeg1Rng.Row, objSeg1Rng.Column))
  End If
  GLAddNote objAccRng
End Sub
Public Sub GLAddAmountNote()
Dim objAmtStartRng As Range
Dim objAmtEndRng As Range
Dim objAmtRng As Range
Dim objLineRng As Range
On Error Resume Next
  Set objLineRng = Names("LINE").RefersToRange
  Set objAmtStartRng = Me.Names("GL_BUDGET_INTERFACE_PERIOD1_AMOUNT").RefersToRange
  Set objAmtEndRng = Me.Names("GL_BUDGET_INTERFACE_PERIOD13_AMOUNT").RefersToRange
  Set objAmtRng = Range(objAmtStartRng, objAmtEndRng)
  If Not Application.Intersect(Selection, objAmtRng) Is Nothing Then
    GLAddNote Selection
  Else
    If Not Application.Intersect(Selection, objLineRng) Is Nothing Then
       GLAddNote Range(Cells(Selection.Row, objAmtStartRng.Column), Cells(Selection.Row, objAmtStartRng.Column))
    Else
       GLAddNote objAmtStartRng
    End If
  End If
End Sub

Public Sub BneRemoveOracleMenu()
    On Error Resume Next
    If isRibbonCreateSuccess = True Then
       DisableRibbonMainGroup
    End If
    Dim strMenuTitle As String
    Dim objCellPopUp As CommandBar
    Dim i As Integer
    Dim objWorkSheetMenuBar As Object
     Set objWorkSheetMenuBar = Application.CommandBars("Worksheet Menu Bar")
strMenuTitle = "Or&acle"
     objWorkSheetMenuBar.Controls(strMenuTitle).Delete
    Set objCellPopUp = CommandBars("Cell")
    If Not objCellPopUp Is Nothing Then
        For i = objCellPopUp.Controls.count To 1 Step -1
            If Left(objCellPopUp.Controls(i).Tag, 9) = "mnuOracle" Then
                objCellPopUp.Controls(i).Delete
            End If
        Next i
    End If
End Sub
Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
    Dim objCellPopUp As CommandBar
    Dim objButton As CommandBarButton
    Dim i As Integer
    Dim strMenuTitle As String
    On Error GoTo ErrorHandler
    Set objCellPopUp = CommandBars("Cell")
    If Not objCellPopUp Is Nothing Then
        For i = objCellPopUp.Controls.count To 1 Step -1
            If Left(objCellPopUp.Controls(i).Tag, 9) = "mnuOracle" Then
                objCellPopUp.Controls(i).Delete
            End If
        Next i
strMenuTitle = "&List of Values"
        Set objButton = objCellPopUp.Controls.add()
        objButton.BeginGroup = True
        objButton.caption = strMenuTitle
        objButton.Tag = "mnuOracle_231_LOV_CONTEXT"
        objButton.OnAction = Application.ActiveSheet.CodeName & ".BneDBLClick"
    End If
      Exit Sub
ErrorHandler:
   AddBneMsg BNE_ERROR, "Worksheet_BeforeRightClick", "Error: " & Err.Number & " " & Err.Description
End Sub
'This procedure will be called when the upload is cancelled by the user closing the embedded browser window
'It does this by calling the asyncronous upload cancel page
Public Sub BneUploadCancel()
    Dim oParams As New BneVBAParameters
    If Not m_Browser Is Nothing Then
        oParams.add "bne:apiVersion", "1.0"
        oParams.add "bne:page", "BneAsyncUpload"
        oParams.add "event", "bne:asyncJobCancel"
        oParams.add "bne:documentId", "HYWWXGL97DHXARSYUEF9W2B7JHL1NNOGF4EC7GMW"
        If Not m_objVBAUploader Is Nothing Then
            oParams.add "bne:uploadJob", CStr(m_objVBAUploader.JobID)
        End If
        m_Browser.NavigatePost m_applicationService, oParams
   End If
End Sub
Public Sub BneUploadBegin(ByRef objHTMLDocument As Object)
    Dim colSheets As New Collection
    Dim objBook As Object
    Dim objSheet As Object
    Dim clsProperties As New BneVBAProperties
    Dim clsProperty As BneVBAProperty
    Dim strContentID As String
    BneAddReference "Scripting", "{420B2830-E718-11CF-893D-00A0C9054228}"
    If m_blnUploadAll = True Then
       clsProperties.setSheet Me
       Set clsProperty = clsProperties.getProperty("contentidentifier")
       If Not clsProperty Is Nothing Then
          strContentID = clsProperty.value
       End If
       For Each objSheet In ActiveWorkbook.Worksheets
          If Not IsBneInternalSheet(objSheet) Then
             colSheets.add objSheet
          End If
       Next objSheet
    Else
       colSheets.add ActiveSheet
    End If
    Call BneProcessingBegin
'Need to create a new uploader
    Set m_objVBAUploader = New BneVBAUploader
    Set m_objVBAUploader.Sheets = colSheets
    BneSetupNewUpload objHTMLDocument
'This callback allows the window close event to be caught and handled once an upload begins
    m_Browser.addEventCallBack "BneUploadCancel", "BNE:BROWSERCLOSE", Me
'    Start the upload.  This send the upload data, then informs the middle tier that
'    The data is sent.
    m_objVBAUploader.BneUploadBegin
    Dim lTicketNumber As Long
    Dim strMsgHeader As String
strMsgHeader = "Error"
'UploadData will be returned a response with a ticket number. If it is -1, a fatal error occurred
    lTicketNumber = m_objVBAUploader.JobID
    If lTicketNumber = -1 Then
'We cant continue.  If there are error's, show them.
        If m_objVBAUploader.Status = m_objVBAUploader.UPL_ERROR Then
             objHTMLDocument.body.innerHTML = BneBrowser.WebBrowser_DocumentComplete_ERROR_MESSAGE
'             Should be able to include error message from response here in the future
        Else 'Show the standard error page with last error in response xml.
              Call m_Browser.errorMessage(strMsgHeader, m_objVBAUploader.text, m_objVBAUploader.cause, m_objVBAUploader.action)
             objHTMLDocument.body.innerHTML = m_Browser.WebBrowser_DocumentComplete_ERROR_MESSAGE
        End If
    ElseIf lTicketNumber = 0 Then
       Call m_Browser.errorMessage(strMsgHeader, m_objVBAUploader.text, m_objVBAUploader.cause, m_objVBAUploader.action)
       objHTMLDocument.body.innerHTML = m_Browser.WebBrowser_DocumentComplete_ERROR_MESSAGE
    Else
        objHTMLDocument.all("bne:uploadJob").value = CStr(lTicketNumber)
        Dim oForm As Object
        Set oForm = objHTMLDocument.all("BneAsyncUploadPageSend")
        oForm.submit
    End If
End Sub
Public Sub BneSetupNewUpload(ByRef objHTMLDocument As Object)
    Dim commonParamForm As Object
    Dim integratorParamForm As Object
    Dim commonParams As BneVBAParameters
    Dim integratorParams As BneVBAParameters
    Dim documentId As String
'Reset any messages that have occurred recently
    ResetMsgs
    Set commonParamForm = objHTMLDocument.all("bne:icxId")
    Set commonParams = BneExtractParams(commonParamForm)
'Add other parameters required for uploading
    commonParams.add "bne:documentId", Me.BneGetDocumentId
    commonParams.add "bne:servicePath", Me.BneGetServletPath
    commonParams.add "bne:language", Me.BneGetGeneratedLanguage
    commonParams.add "bne:apiVersion", "1.1"
    commonParams.add "bne:requestType", "asynchronous"
    If m_blnUploadAll Then
        commonParams.add "bne:uploadSheet", "ALL"
    Else
        commonParams.add "bne:uploadSheet", UrlEncodeUtf8(ActiveSheet.name)
    End If
    Set integratorParamForm = objHTMLDocument.all("integratorParamForm")
    Set integratorParams = BneExtractParams(integratorParamForm)
    If UCase(objHTMLDocument.all("bne:rows").getAttribute("VALUE")) = "ALL" Then
        m_objVBAUploader.FlaggedRowsOnly = False
    Else
        m_objVBAUploader.FlaggedRowsOnly = True
    End If
    Set m_objVBAUploader.CommonUploadParams = commonParams
End Sub
Private Sub BneUploadComplete(ByRef objHTMLDocument As Object)
    Dim commonParamForm As Object
    Dim commonParams As BneVBAParameters
    Dim integratorParams As BneVBAParameters
    m_Browser.removeEventCallBack "BNE:BROWSERCLOSE"
    Set commonParamForm = objHTMLDocument.all("bne:icxId")
    Set commonParams = BneExtractParams(commonParamForm)
    commonParams.add "bne:documentId", Me.BneGetDocumentId
    commonParams.add "bne:language", Me.BneGetGeneratedLanguage
    commonParams.add "bne:servicePath", Me.BneGetServletPath
    m_objVBAUploader.BneUploadComplete
    If m_objVBAUploader.Status = m_objVBAUploader.UPL_ERROR Then
'We cant continue.  If there are BNE_ERROR's, show them.
        If GetMsgTypeCount(BNE_ERROR) > 0 Then
             objHTMLDocument.body.innerHTML = BneBrowser.WebBrowser_DocumentComplete_ERROR_MESSAGE
'             Should be able to include error message from response here
        Else 'Show the standard error page
             objHTMLDocument.body.innerHTML = BneBrowser.WebBrowser_DocumentComplete_ERROR_MESSAGE
        End If
    End If
    Set m_objVBAUploader = Nothing
    Call BneProcessingEnd
End Sub
Private Sub BneUploadError(ByRef objHTMLDocument As Object)
'    Some kind of error has occurred.  Try and resubmit the page.
    If m_Browser Is Nothing Then
'This would be the case if the user has closed the page *just* before the event fired.  Ignore it.
    Else
        Dim oParams As New BneVBAParameters
        Set oParams = BneGetUploadParams()
        If Not m_objVBAUploader Is Nothing Then
            oParams.add "bne:uploadJob", CStr(m_objVBAUploader.JobID)
        End If
'We MUST set the status text to blank, else we will prematurely fire the event again.
        objHTMLDocument.parentWindow.Status = ""
'We need to re-add the callback ready for the next attempt
        m_Browser.addEventCallBack "BneUploadError", "ERROR", Me
        m_Browser.NavigatePost m_applicationService, oParams
   End If
End Sub
Private Sub BneUploadClose(ByRef objHTMLDocument As Object)
'    User has hit the close button.
    Set m_objVBAUploader = Nothing
    BneProcessingEnd
End Sub
Public Sub RowsToUpload(ByRef FlaggedRows() As Long, FlaggedRowsOnly As Boolean, Optional NotEmptyRows As Boolean = False)
'Find out which rows should be uploaded.
    Dim UploadRows As Variant
    UploadRows = Me.Range("BNE_UPLOAD")
    GetUploadRows Me, UploadRows, FlaggedRows, FlaggedRowsOnly, NotEmptyRows
End Sub
Public Sub BneCreateLayout()
   Dim initialRange As Range
On Error Resume Next
    Application.EnableEvents = False
    BneSetSession True, g_icxSessionID
    Application.EnableEvents = True
'    setConstantsAndFormulas ActiveSheet.Range("LINE")
    m_rowsInLines = ActiveSheet.Range("LINE").Rows.count
    MoveToLinesBlock ActiveSheet
    
    Dim hasGraph As String
    Err.Number = 0
    hasGraph = ActiveWorkbook.CustomDocumentProperties("has_graphs")
    If CLng(Err.Number) <> 5 And hasGraph = "TRUE" And Charts.count = 0 Then
        Application.ScreenUpdating = False
        ThisWorkbook.BneGraphsAll False
        Me.Activate
        Application.ScreenUpdating = True
    End If
    
    BneSheetActivate
End Sub
Public Sub BneSheetActivate()
 On Error GoTo ErrorHandler
    'BneCreateOracleMenu
'    If m_uploadCompression Then
'        If (Not hasUplSettingControls()) Then
'            createUploadSettingsForm
'        End If
'    End If
    m_rowsInLines = ActiveSheet.Range("LINE").Rows.count
    Exit Sub
ErrorHandler:
   AddBneMsg BNE_ERROR, "BneSheetActivate", "Error: " & Err.Number & " " & Err.Description
End Sub
Public Sub BneStartup()
    BneSetSession
    m_LOVFlag = False
End Sub
Public Sub BneSetSession(Optional sessionState As Boolean, Optional sessionTicket As String)
On Error Resume Next
    If sessionTicket <> "" Then
       m_SessionState = sessionState
       m_SessionTicket = sessionTicket
    Else
       m_SessionState = False
       m_SessionTicket = ""
    End If
End Sub

Public Function BneGetUploadParams() As Object
    Dim oParams As New BneVBAParameters
    
    BneAddParamsFromCustomProperties2 oParams, "BNE_UPLOAD_PARAM", False
    BneAddParamsFromCustomProperties2 oParams, "BNE_UPLOAD_COL_PARAM", True
    
    Set BneGetUploadParams = oParams
End Function

Private Sub BneUploadDocument()
   m_blnUploadAll = False
   Call BneUploadCommon
End Sub
Private Sub BneUploadCommon()
   Dim oParams As New BneVBAParameters
   Set oParams = BneGetUploadParams()
    Dim strMsgHeader As String
    Dim strMsgBody As String
    Dim strMsgAction1 As String
    Dim strMsgAction2 As String
strMsgHeader = "Error"
strMsgBody = "The results of the upload cannot be displayed."
strMsgAction1 = "This was due to a network fault. Leave this window open to have it make more attempts to display the upload results."
strMsgAction2 = "Contact your system administrator if this problem persists."
    Set m_Browser = New BneBrowser
    BneDefaultBrowser m_Browser
    Call m_Browser.errorMessage(strMsgHeader, strMsgBody, strMsgAction1, strMsgAction2)
   m_Browser.addEventCallBack "BneUploadBegin", "ASYNCUPLOADBEGIN", Me
   m_Browser.addEventCallBack "BneUploadComplete", "ASYNCUPLOADCOMPLETE", Me
   m_Browser.addEventCallBack "BneUploadError", "ERROR", Me
   m_Browser.addEventCallBack "BneUploadClose", "CLOSE", Me
   m_Browser.NavigatePost m_applicationService, oParams
   m_Browser.Show
End Sub
Private Sub BneUploadSingleSheet()
   On Error Resume Next
   Err.Number = 0
   Dim wadiSheet As String
   
   wadiSheet = ActiveWorkbook.CustomDocumentProperties(ActiveSheet.CodeName & "_WEBADI")
   If CLng(Err.Number) = 5 And wadiSheet <> "TRUE" Then
     Err.Number = 0
     Dim errorMessage As String
     errorMessage = ActiveWorkbook.CustomDocumentProperties("select_webadi_sheet")
     If CLng(Err.Number) = 5 Then
        errorMessage = "Please select the Web ADI worksheet to upload"
     End If
     
     MsgBox errorMessage
     Exit Sub
   End If
   
   m_blnUploadAll = False
   Call BneUploadCommon
End Sub
Private Sub BneUploadAll()
   m_blnUploadAll = True
   Call BneUploadCommon
End Sub
Public Sub BneMonitor()
    Dim oParams As New BneVBAParameters
    oParams.add "bne:apiVersion", "1.0"
    oParams.add "bne:page", "BneOAMonitor"
    NavigatePost m_applicationService, oParams
End Sub
'Create a HTML message box page.
'This is done using the browser form and passing the bne:messages node of XML to the web server.
Private Sub BneMsgBox(oXML As Object)
    Dim oParams As New BneVBAParameters
    oParams.add "bne:apiVersion", "1.0"
    oParams.add "bne:page", "BneMsgBox"
    On Error Resume Next
'    *note the <message> tag - this is just a dummy container node - ther server wont pay any attention to it.
    oParams.add "bne:messagexml", "<message>" & oXML.xml & "</message>"
    On Error GoTo 0
    NavigatePost m_applicationService, oParams
End Sub
Public Sub BneAbout()
    Dim oParams As New BneVBAParameters
    oParams.add "bne:apiVersion", "1.0"
    oParams.add "bne:page", "BneHelpAbout"
    NavigatePost m_applicationService, oParams
End Sub
Public Sub BneSwitchResponsibility()
    Dim oParams As New BneVBAParameters
    oParams.add "bne:apiVersion", "1.0"
    oParams.add "bne:page", "BneOASwitchResp"
    NavigatePost m_applicationService, oParams
End Sub
Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Excel.Range, Cancel As Boolean)
On Error Resume Next
    BneDBLClick
    Cancel = True
End Sub
Private Sub BneDBLClick()
    On Error Resume Next
    Dim strArgDocProcessor As String: Dim strArgInterfaceName As String: Dim strArgInterfaceColName As String: Dim strArgQueryString As String
    Dim FieldName As String
    Dim lsInterfaceColName As String
    Dim flagData(1) As String
    Dim oParams As New BneVBAParameters
    Dim param As String
    Dim paramValues() As String
    Dim paramIndex As Integer
    Dim lovCol As String
    Dim objCol As BneVBAInterfaceCol
    Set objCol = GetBneVBAInterfaceColForRange(Me, ActiveCell)
    If Not objCol Is Nothing Then
        If objCol.ValComponent <> "" And BneIsReadOnly(ActiveCell, Me) Then
            MsgBox "Read-only fields cannot be changed.", vbCritical
            GoTo error
    End If
    End If
    If Not Application.Intersect(ActiveCell, Me.Names("BNE_UPLOAD").RefersToRange) Is Nothing Then
        If ActiveCell.value = "x" Then
            GoTo error
        End If
    End If
    intBrowserWidth = 350
    intBrowserHeight = 500
    
    lsInterfaceColName = GetBneInterfaceColNameOfRange(Me, Range(ActiveCell.Address))
    lovCol = ActiveWorkbook.CustomDocumentProperties(lsInterfaceColName & "_LOVCOL")
    FieldName = GetBneNameOfRange(Me, Range(ActiveCell.Address))
    
    If (CLng(Err.Number) <> 5 And lovCol = "TRUE") Then
        ' This is an LOV col
        intBrowserWidth = ActiveWorkbook.CustomDocumentProperties(lsInterfaceColName & "_BROWSER_WIDTH")
        intBrowserHeight = ActiveWorkbook.CustomDocumentProperties(lsInterfaceColName & "_BROWSER_HEIGHT")
        strArgDocProcessor = ActiveWorkbook.CustomDocumentProperties(lsInterfaceColName & "_DOCPROCESSOR")
        strArgInterfaceName = ActiveWorkbook.CustomDocumentProperties(lsInterfaceColName & "_INTERFACE_NAME")
        strArgInterfaceColName = ActiveWorkbook.CustomDocumentProperties(lsInterfaceColName & "_COL_NAME")
        
        oParams.add "bne:apiVersion", "1.1"
        oParams.add "bne:documentId", BneGetDocumentId
        
        BneAddParamsFromCustomProperties oParams, lsInterfaceColName, "_PARAM_KEY", False
        BneAddParamsFromCustomProperties oParams, lsInterfaceColName, "_PARAM_COL_KEY", True
        
        BneBrowseDocument strArgDocProcessor, strArgInterfaceName, strArgInterfaceColName, m_componentService, oParams, intBrowserHeight, intBrowserWidth
    End If
    
    If FieldName = "BNE_UPLOAD" Then
        If Range(ActiveCell.Address) = "O" Then
            Range(ActiveCell.Address) = ""
        Else
            Range(ActiveCell.Address) = "O"
        End If
    End If
    
error:
End Sub

Private Sub BneAddParamsFromCustomProperties(oParams As BneVBAParameters, intfColName, paramKeySuffix As String, columnKey As Boolean)
On Error Resume Next
        Dim paramIndex As Integer
        Dim param As String
        Dim paramValues() As String
        Dim dataType As String
        ' Reset Err.Number and paramIndex
        Err.Number = 0
        paramIndex = 0
        param = ActiveWorkbook.CustomDocumentProperties(intfColName & paramKeySuffix & paramIndex)
        ' Err.Number = 5 means item not found in collection, no better way to find if the item is not in collection
        Do While CLng(Err.Number) <> 5
            paramValues = Split(param, "=")
            If UBound(paramValues) = 1 Then
                If columnKey Then
                    dataType = ActiveWorkbook.CustomDocumentProperties(paramValues(1) & "_DATATYPE")
                    If (dataType <> "3" And dataType <> "5" And dataType <> "6") Then
                        oParams.add paramValues(0), ColumnValue(Me, paramValues(1))
                        Err.Number = 0
                    Else
                        ' this column is Date type
                        If (dataType = "3") Then
                            oParams.add paramValues(0), ColumnDateValue(Me, paramValues(1), m_standartDateFormat)
                        Else
                            oParams.add paramValues(0), ColumnDateValue(Me, paramValues(1), m_standartDateTimeFormat)
                        End If
                    End If
                Else
                    oParams.add paramValues(0), paramValues(1)
                End If
            End If
            paramIndex = paramIndex + 1
            param = ActiveWorkbook.CustomDocumentProperties(intfColName & paramKeySuffix & paramIndex)
        Loop
        
        Err.Number = 0
End Sub
Private Sub BneAddParamsFromCustomProperties2(oParams As BneVBAParameters, paramKeySuffix As String, columnKey As Boolean)
On Error Resume Next
        Dim paramIndex As Integer
        Dim param As String
        Dim paramValues() As String
        Dim dataType As String
        ' Reset Err.Number and paramIndex
        Err.Number = 0
        paramIndex = 0
        param = ActiveWorkbook.CustomDocumentProperties(paramKeySuffix & paramIndex)
        ' Err.Number = 5 means item not found in collection, no better way to find if the item is not in collection
        Do While CLng(Err.Number) <> 5
            paramValues = Split(param, "=")
            If UBound(paramValues) = 1 Then
                If columnKey Then
                    oParams.add paramValues(0), ColumnValue(Me, paramValues(1))
                Else
                    oParams.add paramValues(0), paramValues(1)
                End If
            End If
            paramIndex = paramIndex + 1
            param = ActiveWorkbook.CustomDocumentProperties(paramKeySuffix & paramIndex)
        Loop
        
        Err.Number = 0
End Sub

Private Sub Worksheet_Activate()
    BneSheetActivate
End Sub
Private Sub Worksheet_Deactivate()
   Call BneRemoveOracleMenu
End Sub
Private Sub BneBrowseDocument(DocumentProcessor As String, InterfaceName As String, interfaceColName As String, sURL As String, oParams As BneVBAParameters, Optional Height As Integer, Optional Width As Integer)
On Error Resume Next
    m_InterfaceName = InterfaceName
    m_InterfaceColName = interfaceColName
    m_DocumentProcessor = DocumentProcessor
    NavigatePost sURL, oParams, Height, Width
End Sub
Public Sub BneDocument_Complete(pDisp As Object, Document As Object)
    Set m_objHTMLDocument = Document
    Call ValidateSession(m_objHTMLDocument)
End Sub
Private Sub NavigateGet(sURL As String, oParams As BneVBAParameters, Optional Height As Integer, Optional Width As Integer)
    Set m_Browser = New BneBrowser
    BneDefaultBrowser m_Browser
    If Height Then
        m_Browser.Height = Height
    End If
    If Width Then
        m_Browser.Width = Width
    End If
    m_Browser.Navigate sURL & "?" & oParams.toString
    m_Browser.Show
End Sub
Private Sub NavigatePost(sURL As String, oParams As BneVBAParameters, Optional Height As Integer, Optional Width As Integer)
    Set m_Browser = New BneBrowser
    BneDefaultBrowser m_Browser
    If Height Then
        m_Browser.Height = Height
    End If
    If Width Then
        m_Browser.Width = Width
    End If
    m_Browser.NavigatePost sURL, oParams
    m_Browser.Show
End Sub
Private Sub ValidateSession(ByRef Document As Object)
    Dim documentCookies As String
    Dim cookieNamePos As Long
    Dim semiColonPos As Long
    Dim searchString As String
    documentCookies = Document.cookie
    searchString = m_ossCookie & "="
    cookieNamePos = InStr(1, documentCookies, searchString, 0)
    If cookieNamePos > 0 Then
        cookieNamePos = cookieNamePos + Len(searchString)
        m_SessionTicket = LTrim(RTrim(Mid(documentCookies, cookieNamePos)))
    End If
    semiColonPos = InStr(m_SessionTicket, ";")
    If semiColonPos > 0 Then
        m_SessionTicket = Left(m_SessionTicket, semiColonPos - 1)
        Dim clsProperties As New BneVBAProperties
        Dim clsProperty As New BneVBAProperty
        clsProperty.name = "ICX_SESSION_ID"
        clsProperty.value = m_SessionTicket
        clsProperties.addProperty clsProperty
    End If
End Sub
Private Sub BneDefaultBrowser(ByRef BROWSER As BneBrowser)
On Error Resume Next
    BROWSER.setSession m_ossCookie, m_SessionState, m_SessionTicket
    BROWSER.setDocumentId ActiveWorkbook.CustomDocumentProperties("bne:documentId")
    BROWSER.setLanguage Me.BneGetGeneratedLanguage
    BROWSER.setAppsServletAgent m_servletPath
    BROWSER.DOCUMENT_ONCLICK = Me.CodeName & "." & DOCUMENT_ONCLICK
    BROWSER.DOCUMENT_COMPLETE = Me.CodeName & "." & DOCUMENT_COMPLETE
    BROWSER.UPLOADBEGIN = Me.CodeName & ".BneUploadBegin"
    BROWSER.UPLOADCOMPLETE = Me.CodeName & ".BneUploadComplete"
    BROWSER.Height = 350
    BROWSER.Width = 500
BROWSER.caption = "Oracle Web ADI"
    BROWSER.LookAndFeel = 2
    BROWSER.setSheetRef Me
End Sub
Public Sub BneDocument_onclick()
On Error Resume Next
    Dim curWnd As HTMLWindow2
    Dim curElement As IHTMLElement
    Dim elementName As String
    Set curWnd = m_objHTMLDocument.parentWindow
    Set curElement = curWnd.event.srcElement
    elementName = curElement.id
    If elementName = Space(0) Then
        elementName = curElement.parentElement.id
    End If
    If InStr(elementName, "BNE:CANCEL") Then
        BneCancelButton
    ElseIf InStr(elementName, "BNE:SELECT") Then
        BneSelectButton
    End If
End Sub
Private Sub BneCancelButton()
    m_Browser.Hide
    Set m_objHTMLDocument = Nothing
    Set m_Browser = Nothing
End Sub
Private Sub BneSelectButton()
  On Error Resume Next
  m_Browser.Hide
  Select Case m_DocumentProcessor
      Case "TABLE"
          BneTableProcessor
      Case "FORM"
          BneFormProcessor
      Case "FLEX"
          BneFFProcessor
      Case "DFF"
          BneDFFProcessor
      Case "KEYDFF"
          BneKDFFProcessor
      Case "CALENDAR"
          BneCalendarProcessor
  End Select
End Sub
Private Sub BneTableProcessor()
On Error Resume Next
    Dim Index As Integer
    Dim countSelectColumns As Integer
    Dim tableSelectColumn As String
    Dim tableAliasColumn As String
    Dim tableSelectRow As String
    Dim lsInterfaceAndColName As String
    Dim selectedName As String
    Dim selectedValue As String
    Dim selectedDOMName As String
    Dim liCurrentRow As Long
    Dim strNumberFormat As String
    Dim oColumn As BneVBAInterfaceCol
    Dim bProtectionMode As Boolean
    bProtectionMode = Me.ProtectContents
    tableSelectColumn = m_objHTMLDocument.all("table-select-column").value
    tableAliasColumn = m_objHTMLDocument.all("table-column-alias").value
    tableSelectRow = m_objHTMLDocument.all("table-select-row").value
    strNumberFormat = m_objHTMLDocument.all("mso-number-format").value
' exit if user did not select a row
    If tableSelectRow = "-1" Then Exit Sub
    liCurrentRow = getCurrentRowInRange(GetBneInterfaceColNameOfRange(Me, ActiveCell))
    countSelectColumns = ParameterCount(",", tableSelectColumn)
    Me.Unprotect
    For Index = 1 To countSelectColumns
        If Not (tableAliasColumn = "") Then
            selectedName = ParameterValue(",", tableAliasColumn, Index)
        Else
        selectedName = ParameterValue(",", tableSelectColumn, Index)
        End If
        selectedDOMName = "BNE:COL:DATA:" & selectedName
        selectedValue = m_objHTMLDocument.all(selectedDOMName, tableSelectRow).innerText
        If m_objHTMLDocument.all(selectedDOMName, tableSelectRow).getAttribute("value") <> "" Then
            selectedValue = m_objHTMLDocument.all(selectedDOMName, tableSelectRow).getAttribute("value")
        End If
        lsInterfaceAndColName = m_InterfaceName & "_" & ParameterValue(",", tableSelectColumn, Index)
        Dim currentRangeRowsCount As Long
        currentRangeRowsCount = Me.Range(lsInterfaceAndColName).Rows.count
        Set oColumn = BneGetVBAInterfaceCol(lsInterfaceAndColName)
        If strNumberFormat <> "" And oColumn.dataType <> 3 And oColumn.dataType <> 5 And oColumn.dataType <> 6 Then
            If currentRangeRowsCount > 1 Then
                Me.Range(lsInterfaceAndColName)(liCurrentRow).NumberFormat = strNumberFormat
            Else
                Me.Range(lsInterfaceAndColName).NumberFormat = strNumberFormat
            End If
        End If
        m_LOVFlag = True
        'Set oColumn = BneGetVBAInterfaceCol(lsInterfaceAndColName)
        If oColumn.dataType = 1 And IsNumeric(Trim(selectedValue)) Then
            ' its a number -> as data is already as per excel formatting just convert it to number and * 1 is to retain fractional part
            If currentRangeRowsCount > 1 Then
                Me.Range(lsInterfaceAndColName)(liCurrentRow).value = CDbl(selectedValue) * 1
            Else
                Me.Range(lsInterfaceAndColName).value = CDbl(selectedValue) * 1
            End If
        Else
            If currentRangeRowsCount > 1 Then
                Me.Range(lsInterfaceAndColName)(liCurrentRow).value = selectedValue
            Else
                Me.Range(lsInterfaceAndColName).value = selectedValue
            End If
        End If
        m_LOVFlag = False
    Next Index
    If bProtectionMode Then
        Me.Protect
    End If
End Sub
Private Sub BneFormProcessor()
  Dim iCount As Long
  Dim iRow As Long
  Dim Columns() As String
  Dim sName As String
  Dim FieldName As String
  Dim liCurrentRow As Long
  On Error Resume Next
  liCurrentRow = getCurrentRowInRange(GetBneInterfaceColNameOfRange(Me, ActiveCell))
  For iCount = 0 To m_objHTMLDocument.all("BNE:FIELD").Length - 1
    sName = m_objHTMLDocument.all("BNE:FIELD", iCount).getAttribute("NAME")
    FieldName = ParameterValue(":", sName, 2)
    m_LOVFlag = True
    Me.Range(m_InterfaceName & "_" & FieldName)(liCurrentRow).value = m_objHTMLDocument.all("BNE:FIELD", iCount).getAttribute("VALUE")
    m_LOVFlag = False
  Next iCount
End Sub
Private Sub BneFFProcessor()
  On Error Resume Next
  Dim iCount As Long
  Dim iRow As Long
  Dim Columns() As String
  Dim sName As String
  Dim FieldName As String
  Dim liCurrentRow As Long
  liCurrentRow = getCurrentRowInRange(GetBneInterfaceColNameOfRange(Me, ActiveCell))
  For iCount = 0 To m_objHTMLDocument.all("BNE:FIELD").Length - 1
    sName = m_objHTMLDocument.all("BNE:FIELD", iCount).getAttribute("NAME")
    FieldName = ParameterValue(":", sName, 2)
    m_LOVFlag = True
    Me.Range(m_InterfaceName & "_" & FieldName)(liCurrentRow).value = "'" & m_objHTMLDocument.all("BNE:FIELD", iCount).getAttribute("VALUE")
    m_LOVFlag = False
  Next iCount
End Sub
Private Sub BneDFFProcessor()
  On Error Resume Next
  Dim iCount As Long
  Dim iRow As Long
  Dim Columns() As String
  Dim sName As String
  Dim FieldName As String
  Dim liCurrentRow As Long
  Dim CellPrefix As String
  liCurrentRow = getCurrentRowInRange(GetBneInterfaceColNameOfRange(Me, ActiveCell))
  For iCount = 0 To m_objHTMLDocument.all("BNE:FIELD").Length - 1
    sName = m_objHTMLDocument.all("BNE:FIELD", iCount).getAttribute("NAME")
    FieldName = ParameterValue(":", sName, 2)
    m_LOVFlag = True
    CellPrefix = "'"
    If FieldName = "" Then
        If BneGetVBAInterfaceCol(m_InterfaceName & "_" & sName).dataType = 1 Then CellPrefix = ""
        Me.Range(m_InterfaceName & "_" & sName)(getCurrentRowInRange(m_InterfaceName & "_" & sName)).value = _
                 CellPrefix & m_objHTMLDocument.all("BNE:FIELD", iCount).getAttribute("VALUE")
    Else
        If BneGetVBAInterfaceCol(m_InterfaceName & "_" & FieldName).dataType = 1 Then CellPrefix = ""
        Me.Range(m_InterfaceName & "_" & FieldName)(liCurrentRow).value = _
                 CellPrefix & m_objHTMLDocument.all("BNE:FIELD", iCount).getAttribute("VALUE")
    End If
    m_LOVFlag = False
  Next iCount
End Sub
Private Sub BneKDFFProcessor()
  On Error Resume Next
  Dim iCount As Long
  Dim iRow As Long
  Dim Columns() As String
  Dim sName As String
  Dim FieldName As String
  Dim liCurrentRow As Long
  Dim interfaceColName As String
  interfaceColName = GetBneInterfaceColNameOfRange(Me, ActiveCell)
  liCurrentRow = getCurrentRowInRange(interfaceColName)
  For iCount = 0 To m_objHTMLDocument.all("BNE:FIELD").Length - 1
    sName = m_objHTMLDocument.all("BNE:FIELD", iCount).getAttribute("NAME")
    FieldName = ParameterValue(":", sName, 2)
    m_LOVFlag = True
    If FieldName = "" Then
        Me.Range(m_InterfaceName & "_" & sName)(liCurrentRow).value = "'" & m_objHTMLDocument.all("BNE:FIELD", iCount).getAttribute("VALUE")
    Else
        Dim colRange As Range
        Set colRange = Me.Range(m_InterfaceName & "_" & FieldName)
        If colRange Is Nothing Then
            Me.Range(interfaceColName & "_" & FieldName)(liCurrentRow).value = "'" & m_objHTMLDocument.all("BNE:FIELD", iCount).getAttribute("VALUE")
        Else
            Me.Range(m_InterfaceName & "_" & FieldName)(liCurrentRow).value = "'" & m_objHTMLDocument.all("BNE:FIELD", iCount).getAttribute("VALUE")
        End If
    End If
    m_LOVFlag = False
  Next iCount
End Sub
Private Sub BneCalendarProcessor()
    On Error Resume Next
    Dim lsInterfaceAndColName As String
    Dim selectedName As String
    Dim selectedValue As String
    selectedName = m_objHTMLDocument.all("table-select-column").value
    selectedValue = m_objHTMLDocument.all(selectedName).innerText
    If m_objHTMLDocument.all(selectedName).getAttribute("value") <> "" Then
       selectedValue = m_objHTMLDocument.all(selectedName).getAttribute("value")
    End If
    If selectedValue <> "" Then
       lsInterfaceAndColName = m_InterfaceName & "_" & selectedName
       m_LOVFlag = True
       Me.Range(lsInterfaceAndColName)(getCurrentRowInRange(lsInterfaceAndColName)).value = selectedValue
       m_LOVFlag = False
    End If
 End Sub
' Sets the unique job number of this documents current upload.
 Public Sub BneSetTicketNumber(ticketNumber As Long)
    m_TicketNumber = ticketNumber
 End Sub
' Gets the unique job number of this documents current upload.
' This subroutine assumes that it will only get called when a job number has been set.
 Public Function BneGetTicketNumber() As Long
    BneGetTicketNumber = m_TicketNumber
 End Function
' Gets the language that this sheet was generated in.  Used for Async Upload.
 Public Function BneGetGeneratedLanguage() As String
    BneGetGeneratedLanguage = m_generatedLanguage
 End Function
' Gets the unique documentId for this document.
 Public Function BneGetDocumentId() As String
    BneGetDocumentId = ActiveWorkbook.CustomDocumentProperties("bne:documentId")
 End Function
' Gets the servlet path.  Used for Async Upload.
 Public Function BneGetServletPath() As String
    BneGetServletPath = m_servletPath
 End Function
'Public Sub ClearContent()
'    Dim clsProperties As New BneVBAProperties
'    Dim clsProperty As New BneVBAProperty
'    Dim objSheet As Object
''    Set objSheet = FindFirstWorksheet(ThisWorkbook)
''    objSheet.Activate
'    'Dim clsRowInserter As New BneRowInserter
'    'clsRowInserter.sheet = ActiveSheet
'    'clsRowInserter.ResetSheet
'    'Set clsRowInserter = Nothing
'    Set clsProperties = Nothing
'    Set clsProperty = Nothing
'End Sub
Public Function BneGetVBAInterfaceCol(sKey As String)
    On Error Resume Next
    Set BneGetVBAInterfaceCol = m_col_InterfaceCols(sKey)
    If Err <> 0 Then
        Err.Clear
        BneInitializeInterfaceCols
        Set BneGetVBAInterfaceCol = m_col_InterfaceCols(sKey)
        If Err <> 0 Then
            Set BneGetVBAInterfaceCol = Nothing
        End If
    End If
End Function
Public Function BneGetVBAInterfaceCols()
    If m_col_InterfaceCols Is Nothing Then
        BneInitializeInterfaceCols
    End If
    Set BneGetVBAInterfaceCols = m_col_InterfaceCols
End Function

Private Sub BneInitializeInterfaceCols()
On Error Resume Next
Set m_col_InterfaceCols = New Collection
Dim oColumn As BneVBAInterfaceCol
Dim blockIndex As Integer
Dim blockColIndex As Integer
Dim blockAvail As String
Dim colName As String
Dim isIntfCol As String

Err.Number = 0
blockIndex = GetFirstBlockIndex
blockAvail = ActiveWorkbook.CustomDocumentProperties("BLOCK" & blockIndex)
Do While (CLng(Err.Number) <> 5)
'    Set clsBlock = New BneLayoutBlock
'    clsBlock.LayoutElement = ActiveWorkbook.CustomDocumentProperties("BLOCK" & blockIndex & "_LAYOUTELEM")
'    clsBlock.Orientation = ActiveWorkbook.CustomDocumentProperties("BLOCK" & blockIndex & "_ORIENTATION")
'    parentId = ActiveWorkbook.CustomDocumentProperties("BLOCK" & blockIndex & "_PARENT")
    
    Err.Number = 0
    blockColIndex = 0
    colName = ActiveWorkbook.CustomDocumentProperties("BLOCK" & blockIndex & "_COL" & blockColIndex)
    Do While (CLng(Err.Number) <> 5)
        isIntfCol = ActiveWorkbook.CustomDocumentProperties(colName & "_INTERFACE_COL")
        If (isIntfCol = "TRUE") Then
            Set oColumn = New BneVBAInterfaceCol
            oColumn.ColumnName = ActiveWorkbook.CustomDocumentProperties(colName & "_COL_NAME")
            oColumn.InterfaceName = ActiveWorkbook.CustomDocumentProperties(colName & "_INTERFACE_NAME")
            oColumn.dataType = ActiveWorkbook.CustomDocumentProperties(colName & "_DATATYPE")
            oColumn.Orientation = ActiveWorkbook.CustomDocumentProperties("BLOCK" & blockIndex & "_ORIENTATION")
            oColumn.DefaultValue = ActiveWorkbook.CustomDocumentProperties(colName & "_DEFAULT_VALUE")
            m_col_InterfaceCols.add oColumn, colName
        End If
        
        Err.Number = 0
        blockColIndex = blockColIndex + 1
        colName = ActiveWorkbook.CustomDocumentProperties("BLOCK" & blockIndex & "_COL" & blockColIndex)
    Loop
    
    Err.Number = 0
    blockIndex = GetNextBlockIndex(blockIndex)
    blockAvail = ActiveWorkbook.CustomDocumentProperties("BLOCK" & blockIndex)
Loop

End Sub
Private Function UnionNullSafe(ParamArray Ranges() As Variant) As Range
   Dim i As Long
   Dim rangeResult As Range
   For i = LBound(Ranges) To UBound(Ranges)
      If IsObject(Ranges(i)) Then
         If Not Ranges(i) Is Nothing Then
            If TypeOf Ranges(i) Is Excel.Range Then
               If Not rangeResult Is Nothing Then
                   Set rangeResult = Application.Union(rangeResult, Ranges(i))
               Else
                   Set rangeResult = Ranges(i)
               End If
             End If
         End If
      End If
   Next i
   Set UnionNullSafe = rangeResult
End Function
Public Sub BneSelectionChange_EvaluateSelection()
    On Error Resume Next
    Dim Target As Range
    Set Target = Selection
    If (Application.CutCopyMode = False) Then
'  Nothing to evaluate, Nothing to Copy or Cut.
            GoTo EndEvaluate
    End If
    If (m_PreviousSelection Is Nothing) Then
         GoTo EndEvaluate
    End If
        If BneIsReadOnly(m_PreviousSelection, Me) Then
            If Application.CutCopyMode = xlCut Then
                GoTo EndEvaluateFalse
            End If
        End If
       If (Intersect(m_PreviousSelection, Target) Is Nothing) Then
            If Not (Cells(Target.Row, 1) = "m") Then
             If Application.CutCopyMode = xlCut And BneIsReadOnly(m_PreviousSelection, Me) Then
                GoTo EndEvaluateFalse
             End If
             If Application.CutCopyMode = xlCopy And BneIsReadOnly(Target, Me) Then
                GoTo EndEvaluateFalse
             End If
            End If
        Else
            If Application.CutCopyMode = xlCopy And BneIsReadOnly(Target, Me) Then
                GoTo EndEvaluateFalse
            End If
        End If
        Set m_PreviousSelection = Target
    Exit Sub
EndEvaluateFalse:
        Application.CutCopyMode = False
EndEvaluate:
        Set m_PreviousSelection = Target
End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
    Dim rowsInTarget As Long
    Dim columnsInTarget As Long
    Dim isProtected As Boolean
    Dim i As Long
    Dim linesRows As Long
    Dim linesCols As Integer
    Dim destLines As Range
    Dim firstRealLineRow As Range
    Dim prevsRow As Range
    Dim extendedLine As Range
    Dim contextRange As Range
    Dim headerRange As Range
    Dim isAllReadOnlyRowsNew As Boolean
    On Error Resume Next
    Set contextRange = ActiveSheet.Range("CONTEXT")
    Set headerRange = ActiveSheet.Range("HEADER")
    On Error GoTo ErrorHandler
    isProtected = ActiveSheet.ProtectContents
    rowsInTarget = Target.Rows.count
    columnsInTarget = Target.Columns.count
    linesCols = ActiveSheet.Range("LINE").Columns.count
    linesRows = ActiveSheet.Range("LINE").Rows.count
    Set extendedLine = ActiveSheet.Range("LINE").Resize(linesRows, linesCols + 1)
    If BneIsReadOnly(Target, Me) And (Not (columnsInTarget = Cells.EntireRow.Columns.count)) Then
        isAllReadOnlyRowsNew = True
        For i = 0 To rowsInTarget - 1
            If Not (Cells(Target.Row + i, 1).value = "m") Then
                isAllReadOnlyRowsNew = False
                Exit For
            End If
        Next i
        If isAllReadOnlyRowsNew = False Then
            MsgBox "Read-only fields cannot be changed.", vbCritical
            Application.EnableEvents = False
            Application.Undo
            Application.EnableEvents = True
            Exit Sub
        End If
    End If
    If Not (contextRange Is Nothing And headerRange Is Nothing) Then
        If (rowsInTarget = Cells.EntireColumn.Rows.count) And _
            Not (Application.Intersect(UnionNullSafe(ActiveSheet.Range("$A:$A"), contextRange, headerRange, extendedLine), Target) Is Nothing) Then
            Application.EnableEvents = False
            Application.Undo
            Application.EnableEvents = True
            Exit Sub
        End If
        If (columnsInTarget = Cells.EntireRow.Columns.count) And _
        (Not (Application.Intersect(UnionNullSafe(contextRange, headerRange), Target) Is Nothing)) Then
            Application.EnableEvents = False
            Application.Undo
            Application.EnableEvents = True
            Exit Sub
        End If
    End If
    If (rowsInTarget = Cells.EntireColumn.Rows.count) And _
    (Not (Application.Intersect(UnionNullSafe(ActiveSheet.Range("BNE_MESSAGES_LAMP"), _
        ActiveSheet.Range("BNE_MESSAGES_HIDDEN"), _
        ActiveSheet.Range("BNE_MESSAGES")), Target) Is Nothing)) Then
        Application.EnableEvents = False
        Application.Undo
        Application.EnableEvents = True
        Exit Sub
    End If
    If m_rowsInLines <> 0 And m_rowsInLines < ActiveSheet.Range("LINE").Rows.count Then
        Application.EnableEvents = False
        ActiveSheet.Unprotect
        Set firstRealLineRow = ActiveSheet.Range("LINE").offset(1).Resize(1)
        If firstRealLineRow.Locked Then
            Set firstRealLineRow = ActiveSheet.Range("LINE").offset(2).Resize(1)
        End If
        Set prevsRow = Intersect(Target.Resize(1), ActiveSheet.Range("LINE"))
        If firstRealLineRow.Row > prevsRow.Row Then
        Application.Undo
        Application.EnableEvents = True
        Exit Sub
    End If
    On Error Resume Next
    extendNamedRangeAndFormulas Target
    On Error GoTo ErrorHandler
    If (BneIsReadOnly(Target, ActiveSheet)) Then
        For i = 0 To rowsInTarget - 1
            With Cells(Target.Row + i, 1)
            .Font.name = "WingDings"
            .value = "m"
            .Font.Bold = True
            .HorizontalAlignment = xlCenter
            End With
        Next i
    End If
    setConstantsAndFormulas Target
    If (isProtected) Then
        ActiveSheet.Protect
    End If
    Application.EnableEvents = True
    m_rowsInLines = ActiveSheet.Range("LINE").Rows.count
    Exit Sub
    End If
    If (Not rowsInTarget = Cells.EntireColumn.Rows.count) Then
        Application.EnableEvents = False
        Call FlagRow(ActiveSheet, Target, ActiveSheet.Range("BNE_UPLOAD"), ActiveSheet.Range("BNE_MESSAGES_LAMP"))
        Application.EnableEvents = True
    End If
    Exit Sub
ErrorHandler:
    AddBneMsg BNE_ERROR, "Worksheet_Change", "Error: " & Err.Number & " " & Err.Description
    Application.EnableEvents = True
End Sub

Private Sub extendNamedRangeAndFormulas(Target As Range)
    Dim objName As name
    Dim copyOffset As Long
    Dim isFirstLastRow As Boolean
    isFirstLastRow = False
    If Target.Row = (ActiveSheet.Range("BNE_UPLOAD").Row + ActiveSheet.Range("BNE_UPLOAD").Rows.count) Then
        copyOffset = -1
        isFirstLastRow = True
    ElseIf Target.Row = ActiveSheet.Range("BNE_UPLOAD").Row - 1 Then
        copyOffset = 1
        isFirstLastRow = True
    End If
    If isFirstLastRow Then
        Target.offset(copyOffset).Copy
        Target.PasteSpecial xlPasteFormats
        Target.Select
        Dim iRowCount As Long
        iRowCount = ActiveSheet.Range("BNE_UPLOAD").Rows.count + 1
        Dim totalFormula As String
        totalFormula = "=SUM(R[-" & iRowCount & "]C:R[-1]C)"
        For Each objName In Me.Names
            If InStr(objName.name, "LINE") <= 0 And (Not (Application.Intersect(ActiveSheet.Range("LINE"), objName.RefersToRange) Is Nothing)) Then
                Dim newRegion As Range
                Set newRegion = Application.Intersect(Target, objName.RefersToRange.EntireColumn)
                Set newRegion = Application.Union(newRegion, objName.RefersToRange)
                ActiveSheet.Names.add objName.name, newRegion, False
                
                Dim lastcell As Range
                ' The next line uses Rows.count - 2 in ooxml template. This is because LINE range includes Tip line in OOXML
                Set lastcell = Cells(ActiveSheet.Range("LINE").Row + ActiveSheet.Range("LINE").Rows.count - 2, objName.RefersToRange.Column)
                If lastcell.HasFormula Then
                    lastcell.FormulaR1C1 = totalFormula
                    lastcell.NumberFormat = "General"
                End If
            End If
        Next objName
    End If
    Application.CutCopyMode = False
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    On Error GoTo ErrorHandler
    m_rowsInLines = ActiveSheet.Range("LINE").Rows.count
    BneSelectionChange_EvaluateSelection
    'BneSelectionChange_Menus Target
    Exit Sub
ErrorHandler:
   AddBneMsg BNE_ERROR, "Worksheet_SelectionChange", "Error: " & Err.Number & " " & Err.Description
End Sub
 Sub setConstantsAndFormulas(Target As Range)
   Dim objInterfaceCols As Object
   Dim intCnt As Integer
   Dim objRange As Object
   Dim myValue As String
   Dim iRange As Range
   Dim newValue As String
   Dim isFormula As Boolean
   Dim isInsertingRows As Boolean
   On Error GoTo 0
   Application.EnableEvents = False
   On Error Resume Next
   isInsertingRows = (Target.Columns.count = Cells.EntireRow.Columns.count)
   Set objInterfaceCols = GetBneVBAInterfaceCols(ActiveSheet)
   If objInterfaceCols Is Nothing Then Exit Sub
   For intCnt = 1 To objInterfaceCols.count
       Set objRange = Intersect(Target, ActiveSheet.Range(objInterfaceCols(intCnt).InterfaceName & "_" & objInterfaceCols(intCnt).ColumnName))
       If Not objRange Is Nothing Then
       ' 24575212: OXML WEBADI DOCUMENT: AFTER COPY CELLS FROM EXTERNAL WORKBOOK, PASTE IS DISABLED
          newValue = objInterfaceCols(intCnt).DefaultValue
          isFormula = (InStr(1, newValue, "=", vbBinaryCompare) = 1)
          If Len(newValue) > 0 Then
            If (isInsertingRows) Then
                  If (isFormula) Then
                    objRange.value = Nothing
                    objRange.NumberFormat = "General"
                    objRange.FormulaR1C1 = newValue
                  Else
                    objRange.value = newValue
                  End If
            Else
                For Each iRange In objRange
                  myValue = iRange.value
                  If (Len(myValue) = 0) Then
                    If (isFormula) Then
                        iRange.value = Nothing
                        iRange.NumberFormat = "General"
                        iRange.FormulaR1C1 = newValue
                    Else
                        iRange.value = newValue
                    End If
                  End If
                Next iRange
            End If
          End If
      End If
   Next intCnt
   Application.EnableEvents = True
 End Sub
 

'Public Function IsUploadCompressionEnabled() As Boolean
'    IsUploadCompressionEnabled = m_uploadCompression
'End Function

' start of debug code
Public Sub BneXML_Upload()
    Dim colSheets As New Collection
    colSheets.add Me
    
    BneXML colSheets
    
End Sub
Public Sub BneXML_UploadAll()
    Dim colSheets As New Collection
    Dim objSheet As Worksheet
    For Each objSheet In ActiveWorkbook.Worksheets
        If Not IsBneInternalSheet(objSheet) Then
            colSheets.add objSheet
        End If
    Next objSheet
    
    BneXML colSheets

End Sub
Private Sub BneXML(colSheets As Collection)
    Dim objDocument As Object
    Set objDocument = createDOMDocument()
    Dim objLayout As New BneLayout
    Dim objUploadStructure As New BneUploadLayout
     objUploadStructure.createUploadXML colSheets, objLayout, objDocument, True
    objDocument.Save (DEBUG_DOCUMENT)
    Set objDocument = Nothing
    Set objLayout = Nothing
    Set colSheets = Nothing
End Sub
' end of debug code

' This routine will refresh the date type header columns. This refresh operation
' will make as if the cell value is entered in excel manually. The excel will convert
' cell type accordingly.
Public Sub RefreshHeaderBlockDateCells()
    Dim blockIndex As Integer
    Dim blockColIndex As Integer
    Dim blockAvail As String
    Dim blockOrientation As String
    Dim colName As String
    Dim colType As String
    Dim tmpStr As String
    
    Err.Number = 0
    blockIndex = GetFirstBlockIndex
    blockAvail = ActiveWorkbook.CustomDocumentProperties("BLOCK" & blockIndex)
    
    Do While (CLng(Err.Number) <> 5)
        blockOrientation = ActiveWorkbook.CustomDocumentProperties("BLOCK" & blockIndex & "_ORIENTATION")
        If blockOrientation = "HORIZONTAL" Then
            Err.Number = 0
            blockColIndex = 0
            colName = ActiveWorkbook.CustomDocumentProperties("BLOCK" & blockIndex & "_COL" & blockColIndex)
            Do While (CLng(Err.Number) <> 5)
                colType = ActiveWorkbook.CustomDocumentProperties(colName & "_DATATYPE")
                If colType = "3" Then
                    Dim dateColRange As Range
                    Set dateColRange = Me.Names(colName).RefersToRange
                    ' Assign same value, Excel will detect that this is a date
                    dateColRange.value = dateColRange.value & ""
                End If
         
                Err.Number = 0
                blockColIndex = blockColIndex + 1
                colName = ActiveWorkbook.CustomDocumentProperties("BLOCK" & blockIndex & "_COL" & blockColIndex)
            Loop
    
        End If
        
        Err.Number = 0
        blockIndex = GetNextBlockIndex(blockIndex)
        blockAvail = ActiveWorkbook.CustomDocumentProperties("BLOCK" & blockIndex)
    Loop
End Sub





Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'+=======================================================================+
'|   Copyright (c) 2014 Oracle Corporation, Redwood Shores, CA, USA      |
'|                      All rights reserved.                             |
'+=======================================================================+
'|  HISTORY                                                              |
'|  28-Aug-2014 poramas created.                                         |
'+=======================================================================+
'RCS_ID = $Header :$
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'+=======================================================================+
'|   Copyright (c) 2014 Oracle Corporation, Redwood Shores, CA, USA      |
'|                      All rights reserved.                             |
'+=======================================================================+
'|  HISTORY                                                              |
'|  28-Aug-2014 poramas created.                                         |
'|  24-Mar-2015 poramas 20448152: TST1225: REDOWNLOAD NOT WORKING WHEN   |
'|                                        CREATING DOCUMENT USING OOXML  |
'|  17-Apr-2015 poramas 20900887: TST1225:SHOW FILTERS IS NOT WORKING IN |
'|                                                      OOXML DOCUMENT   |
'|  23-Apr-2015 poramas 20925762: TST1225: UNABLE TO TURN UPLOAD FLAG    |
'|                                             ON/OFF ON OOXML DOCUMENT  |
'|  24-Apr-2015 poramas 20955400: TST1225:2ND WORKSHEET IS READ ONLY     |
'|                           WHEN MULTIPLE SHEETS ARE CREATED IN OOXML   |
'|  30-Apr-2015 poramas 20901121: TST1225:GRAPH IS NOT GENERATED IN OOXML|
'|                                                              DOCUMENT |
'|  05-May-2015 poramas 21032929:TST1225:INVOKING SETTINGS IN ORACLE MENU|
'|                                 GIVES RUN-TIME ERROR IN OOXML DOCUMENT|
'|  20-May-2015 poramas 21101110: TST1225:GENERATE VARIANCE GRAPH GIVES  |
'|                                  A RUN-TIME ERROR IN OOXML DOCUMENT   |
'|  27-May-2015 poramas 21101621: TST1225:MODIFY GRAPH TYPE IS NOT SHOWN |
'|                      WHEN GRAPH ALL IS INVOKED IN OOXML               |
'|  11-Jan-2016 poramas 22245750: OOXML:CANNOT UPLOAD AFTER MODIFYING    |
'|                      SHEET NAMES                                      |
'|  12-Feb-2016 poramas 22463973: OOXML:GL BUDGETS: UPLOAD & UPLOAD ALL  |
'|                      MENU AVAILABLE FOR ACTUAL SHEET                  |
'|  08-Mar-2016 poramas 22645601: DOES WEBADI SUPPORT SELECTING MULTIPLE |
'|                      NON-SEQUENCE ROWS WITH CTRL KEY TO PASTE         |
'|  26-May-2016 poramas 23250944: R.TST1226:TAB OUT FROM LAST COLUMN     |
'|                      SHOULD FOCUS THE UPL COLUMN IN NEXT ROW          |
'|  16-Jun-2016 poramas 23294585: R:TST1226: LOVS/UPLOAD NOT WORKING WITH|
'|                      NEWLY CREATED LAYOUT IN OOXML                    |
'| 16-Sep-2016 amgonzal OOXML WEBADI DOCUMENT: AFTER COPY CELLS FROM     |
'|                      EXTERNAL WORKBOOK, PASTE IS DISABLED             |
'| 12-Jan-2017 poramas  2448434: NEW FEAT:SUPPORT FOR DATE TIME FIELDS / |
'|                      SUPPORT FOR TIMEZONE                             |
'| 23-Mar-2018 nputrevu 27244943: RE-LOGIN PAGE SHOW AND ONLY ENGLISH SELECTION
'|                      IN LANGUAGE                                      |
'+=======================================================================+
'RCS_ID = $Header :$
Option Explicit
Option Base 1
Const DOCUMENT_ONCLICK = "BneDocument_OnClick "
Const DOCUMENT_COMPLETE = "BneDocument_Complete "
Const PRODUCT_CODE_LABEL = "12.0.0.0"
Const PRODUCT_RELEASE_LABEL = "12.0.0.0: Friday Feburary 10, 2006"
Const VIEWER_VERSION = "$Revision: 120.93.12020000.31 $"
Const DEBUG_FLAG = False
Const DEBUG_DOCUMENT = "d:\BneDebug-Document.xml"
Const DEBUG_MESSAGES = "c:\BneDebug-Messages.xml"
Const UPLOAD_DOCUMENT = "c:\Bne-Document.xml"
Const UPLOAD_MESSAGES = "c:\Bne-Messages.xml"
Const DOWNLOAD_DOCUMENT = "Bne-Document-Content.xml"
Dim m_objHTMLDocument As HTMLDocument
Dim m_Browser As Object
Dim m_InterfaceColName As String
Dim m_InterfaceName As String
Dim m_flagRow As Boolean
Dim m_DocumentProcessor As String
Dim m_SessionState As Boolean
Dim m_SessionTicket As String
Dim m_StatusBarVisible As Boolean
Dim m_TicketNumber As Long
Dim intBrowserWidth As Integer
Dim intBrowserHeight As Integer
Dim comingFromDelete As Boolean
Dim m_objVBAUploader As BneVBAUploader
Dim m_col_InterfaceCols As Collection
Dim m_clsLayout As BneLayout
Dim m_LOVFlag As Boolean
Dim m_rowsInLines As Long
Dim m_PreviousSelection As Range
Dim m_newRibbonWorkbookPath As Collection
Dim m_servletPath As String
Dim m_componentService As String
Dim m_uploadService As String
Dim m_downloadService As String
Dim m_applicationService As String
Dim m_traceLevelDesc As String
Dim m_standartDateFormat As String
Dim m_isReporting As Boolean
Dim m_ossCookie As String
Dim m_generatedLanguage As String
Dim m_uploadCompression As Boolean
Dim m_redownloadFilename As String
Dim m_redownloadService As String
Dim m_primarySheet As Worksheet
Dim m_isInitialized As Boolean

Public Sub Workbook_Activate()
    Application.ScreenUpdating = False
    
    bneMain.SetSessionID ActiveWorkbook.CustomDocumentProperties("viewerticket")
    BneSetSession True, g_icxSessionID
    '24575212: OOXML WEBADI DOCUMENT: AFTER COPY CELLS FROM EXTERNAL WORKBOOK, PASTE IS DISABLED
    If (Not m_isInitialized) Then
        bneMain.BneOnCreateProcedure
        WorkbookOnCreateProcedure
        ConvertFormulaCellsToFormula
        If m_uploadCompression Then
            If (Not hasUplSettingControls()) Then
                createUploadSettingsForm
            End If
        End If
    End If
    m_isInitialized = True
    Application.ScreenUpdating = True
End Sub

Public Sub BneSetSession(Optional sessionState As Boolean, Optional sessionTicket As String)
On Error Resume Next
    If sessionTicket <> "" Then
       m_SessionState = sessionState
       m_SessionTicket = sessionTicket
    Else
       m_SessionState = False
       m_SessionTicket = ""
    End If
End Sub

Public Function getSessionTicket() As String
    getSessionTicket = m_SessionTicket
End Function

Public Sub Workbook_Open()
End Sub

Private Sub Workbook_SheetDeactivate(ByVal Sh As Object)
    bneRibbonUtils.DisableRibbonGraphGroup
    bneRibbonUtils.DisableRibbonMainGroup
End Sub

Private Sub Workbook_SheetActivate(ByVal Sh As Object)
    On Error Resume Next
    Dim webadiSheet As String
    Err.Number = 0
    webadiSheet = ActiveWorkbook.CustomDocumentProperties(Sh.CodeName & "_WEBADI")
    If CLng(Err.Number) <> 5 And webadiSheet = "TRUE" Then
        BneSheetActivate
    Else
        Err.Number = 0
        Dim ch As Chart
        If Left(Sh.name, 5) = "Chart" Then
            Set ch = Charts.Item(Sh.name)
            If Not ch Is Nothing Then
                BneChartActivate
            End If
        End If
    End If
End Sub

Public Sub BneSheetActivate()
 On Error GoTo ErrorHandler
    bneRibbonUtils.DisableRibbonGraphGroup
    bneRibbonUtils.EnableRibbonMainGroup
    Exit Sub
ErrorHandler:
   AddBneMsg BNE_ERROR, "BneSheetActivate", "Error: " & Err.Number & " " & Err.Description
End Sub
Public Sub BneChartActivate()
 On Error GoTo ErrorHandler
    bneRibbonUtils.DisableRibbonMainGroup
    bneRibbonUtils.EnableRibbonGraphGroup
    Exit Sub
ErrorHandler:
   AddBneMsg BNE_ERROR, "BneSheetActivate", "Error: " & Err.Number & " " & Err.Description
End Sub

' initiates all worksheets except the primary one
' primary sheet will have its BneOnCreateProcedure
Public Sub WorkbookOnCreateProcedure()

   'initiate servlet agent and other value from custom xml
   m_servletPath = ActiveWorkbook.CustomDocumentProperties("host")
   m_componentService = m_servletPath & ActiveWorkbook.CustomDocumentProperties("component_service")
   m_applicationService = m_servletPath & ActiveWorkbook.CustomDocumentProperties("application_service")
   m_uploadService = m_servletPath & ActiveWorkbook.CustomDocumentProperties("upload_service")
   m_downloadService = m_servletPath & ActiveWorkbook.CustomDocumentProperties("download_service")
   m_redownloadService = m_servletPath & ActiveWorkbook.CustomDocumentProperties("redownload_service")
   m_traceLevelDesc = ActiveWorkbook.CustomDocumentProperties("tracelevel")
   m_standartDateFormat = ActiveWorkbook.CustomDocumentProperties("STANDARD_DATE_FORMAT")
   Dim isReporting As String
   isReporting = ActiveWorkbook.CustomDocumentProperties("isreporting")
   If (isReporting = "true") Then
        m_isReporting = True
   Else
        m_isReporting = False
   End If
   Dim uploadCompression As String
   uploadCompression = ActiveWorkbook.CustomDocumentProperties("upload_compression")
   If (uploadCompression = "true") Then
        m_uploadCompression = True
   Else
        m_uploadCompression = False
   End If
   m_ossCookie = ActiveWorkbook.CustomDocumentProperties("osscookie")
   m_generatedLanguage = ActiveWorkbook.CustomDocumentProperties("generated_language")
   'end of initialize

   Dim wSheet As Worksheet
   Dim sheetIndex As Integer
   Dim str As String
   Dim primarySheetName As String
   'Dim m_traceLevelDesc As String
   
   On Error Resume Next
   primarySheetName = BneGetPrimarySheet().name
   m_traceLevelDesc = ActiveWorkbook.CustomDocumentProperties("tracelevel")
   Err.Number = 0
   For Each wSheet In ActiveWorkbook.Worksheets
        str = ActiveWorkbook.CustomDocumentProperties(wSheet.name & "_SHEETINDEX")
        If CLng(Err.Number) <> 5 And wSheet.name <> primarySheetName And Not IsBneInternalSheet(wSheet) Then
            On Error GoTo nextsheet
            sheetIndex = CInt(str)
            On Error Resume Next
            
            ' hide named ranges & unlock selected ranges
            Dim isProtected As Boolean
            isProtected = wSheet.ProtectContents
            If isProtected Then
             wSheet.Unprotect
            End If
            
            Dim n As name
            For Each n In wSheet.Names
                If Not m_traceLevelDesc = "TRACE" Then
                    n.Visible = False
                End If
            Next n
            If isProtected Then
                wSheet.Protect
            End If
            
        End If
        Err.Number = 0
nextsheet:
   Next wSheet
End Sub

' POI cannot write some formula values during document creation, for an ex. formula that contains
' named ranges. Those forumulas are written as a text value and this function will convert the text cell
' to formula cell. Those cell ranges are mentioned in the CONVERT_TO_FORMULA_<block_id>_<index> on
' the custom properties xml. And this is not expected for the first sheet (primyary sheet), but for
' subsequent sheets.
Public Sub ConvertFormulaCellsToFormula()
    Dim paramIndex As Integer
    Dim param As String
    Dim intPos As Integer
    Dim sheetIndex As String
    Dim sheetName As String
    Dim blockIndex As Integer
    Dim blockAvail As String
    Dim rangeIndex As Integer
    Dim colName As String
    Dim colIndex As Integer
    Dim formulasCount As Integer
    
    On Error Resume Next
    Application.EnableEvents = False
    Err.Number = 0
    paramIndex = 0
    formulasCount = 0
    blockIndex = GetFirstBlockIndex
    
    blockAvail = ActiveWorkbook.CustomDocumentProperties("BLOCK" & blockIndex)
    Do While CLng(Err.Number) <> 5
        If blockAvail = "TRUE" Then
        
        
            colIndex = 0
            colName = ActiveWorkbook.CustomDocumentProperties("BLOCK" & blockIndex & "_COL" & colIndex)
            Do While CLng(Err.Number) <> 5
            
                paramIndex = 0
                Err.Number = 0
                
                colName = ActiveWorkbook.CustomDocumentProperties(colName & "_COL_NAME")
                param = ActiveWorkbook.CustomDocumentProperties("CONVERT_TO_FORMULA_" & blockIndex & "_" & colName & "_" & paramIndex)

                Do While CLng(Err.Number) <> 5
                    intPos = InStrRev(param, "_")
                    If intPos > 0 Then
                       sheetIndex = Mid(param, intPos)
                       param = Left(param, CLng(intPos - 1))
                       intPos = InStrRev(param, "_")
                    Else
                       sheetIndex = ""
                    End If
                    
                    If sheetIndex <> "" And param <> "" Then
                        sheetName = ActiveWorkbook.CustomDocumentProperties("SHEETNAME" & sheetIndex)
                        ActiveWorkbook.Worksheets(sheetName).Unprotect
                        formulasCount = formulasCount + 1
                        If ActiveWorkbook.Worksheets(sheetName).Range(param).Rows.count > 1 Then
                            If ActiveWorkbook.Worksheets(sheetName).Range(param)(paramIndex + 1).HasFormula = False Then
                                ActiveWorkbook.Worksheets(sheetName).Range(param).Formula = ActiveWorkbook.Worksheets(sheetName).Range(param)(paramIndex + 1).value
                            End If
                        Else
                            If ActiveWorkbook.Worksheets(sheetName).Range(param).HasFormula = False Then
                                ActiveWorkbook.Worksheets(sheetName).Range(param).Formula = ActiveWorkbook.Worksheets(sheetName).Range(param).value
                            End If
                        End If
                        ActiveWorkbook.Worksheets(sheetName).Protect
                    End If
                    paramIndex = paramIndex + 1
                    param = ActiveWorkbook.CustomDocumentProperties("CONVERT_TO_FORMULA_" & blockIndex & "_" & colName & "_" & paramIndex)
                Loop 'end of param loop
                Err.Number = 0
                colIndex = colIndex + 1
                colName = ActiveWorkbook.CustomDocumentProperties("BLOCK" & blockIndex & "_COL" & colIndex)
            Loop 'end of col loop
            Err.Number = 0
        End If
        
        paramIndex = 0
        blockIndex = GetNextBlockIndex(blockIndex)
        blockAvail = ActiveWorkbook.CustomDocumentProperties("BLOCK" & blockIndex)
    Loop
    Err.Number = 0
    Application.EnableEvents = True
End Sub
Private Function IsSecondarySheet(sheet) As Boolean
    Dim primarySheetName As String
    primarySheetName = BneGetPrimarySheet.name
    If sheet.name = primarySheetName Or IsBneInternalSheet(ActiveWorkbook.Worksheets(sheet.name)) Then
        IsSecondarySheet = False
    Else
        IsSecondarySheet = True
    End If
End Function

Public Function BneGetPrimarySheet() As Worksheet
    Dim sheet As Worksheet
    Dim primarySheetCodeName As String
    primarySheetCodeName = ActiveWorkbook.CustomDocumentProperties("PRIMARY_SHEET")
    If m_primarySheet Is Nothing Then
        For Each sheet In ActiveWorkbook.Worksheets
            If sheet.CodeName = primarySheetCodeName Then
                Set m_primarySheet = sheet
                Exit For
            End If
        Next sheet
    End If
    Set BneGetPrimarySheet = m_primarySheet
End Function

Private Function BneGetSheetIndex(sheet As Worksheet) As String
    BneGetSheetIndex = ActiveWorkbook.CustomDocumentProperties(sheet.name & "_SHEETINDEX")
End Function
Public Function BneGetUploaderService() As String
    BneGetUploaderService = m_uploadService
End Function

Private Sub Workbook_SheetChange(ByVal sheet As Object, _
 ByVal Target As Range)
    
    If Not IsSecondarySheet(sheet) Then
        Exit Sub
    End If
    
'    Dim sheetIndex As String
    Dim rowsInTarget As Long
    Dim columnsInTarget As Long
    Dim isProtected As Boolean
    Dim i As Long
    Dim linesRows As Long
    Dim linesCols As Integer
    Dim destLines As Range
    Dim firstRealLineRow As Range
    Dim prevsRow As Range
    Dim lastRealLineRow As Range
    Dim LastRow As Long
    Dim extendedLine As Range
    Dim contextRange As Range
    Dim headerRange As Range
    On Error Resume Next
    
    'sheetIndex = ActiveWorkbook.CustomDocumentProperties(ActiveSheet.name & "_SHEETINDEX")
    'If sheetIndex <> "" Then
    '    sheetIndex = "_" & sheetIndex
    'End If
    
    Set contextRange = ActiveSheet.Range("CONTEXT")
    Set headerRange = ActiveSheet.Range("HEADER")
    On Error GoTo ErrorHandler
    isProtected = ActiveSheet.ProtectContents
    rowsInTarget = Target.Rows.count
    columnsInTarget = Target.Columns.count
    linesCols = ActiveSheet.Range("LINE").Columns.count
    linesRows = ActiveSheet.Range("LINE").Rows.count
    Set extendedLine = ActiveSheet.Range("LINE").Resize(linesRows, linesCols + 1)
    If BneIsReadOnly(Target, ActiveSheet) And (Not (columnsInTarget = Cells.EntireRow.Columns.count)) Then
        MsgBox "Read-only fields cannot be changed.", vbCritical
        Application.EnableEvents = False
        Application.Undo
        Application.EnableEvents = True
        Exit Sub
    End If
    
    '  Flag the row
    If (Not rowsInTarget = Cells.EntireColumn.Rows.count) Then
          Application.EnableEvents = False
          
          Call FlagRow(ActiveSheet, Target, ActiveSheet.Range("BNE_UPLOAD"), ActiveSheet.Range("BNE_MESSAGES_LAMP"))
          Application.EnableEvents = True
    End If
    
    Exit Sub
ErrorHandler:
        AddBneMsg BNE_ERROR, "Workbook_SheetChange", "Error: " & Err.Number & " " & Err.Description
        Application.EnableEvents = True
End Sub

Public Sub BneProcessingBegin()
    Application.ScreenUpdating = False
    Application.EnableEvents = False
End Sub
Public Sub BneProcessingEnd()
    Application.ScreenUpdating = True
    Application.EnableEvents = True
End Sub

Private Sub Workbook_SheetBeforeDoubleClick(ByVal sheet As Object, ByVal Target As Range, Cancel As Boolean)
    If Not IsSecondarySheet(sheet) Then
        Exit Sub
    End If
    BneWorkbookDBLClick sheet
    Cancel = True
End Sub
Public Sub BneDBLClick()
    BneWorkbookDBLClick ActiveSheet
End Sub

Private Sub BneWorkbookDBLClick(ByVal sheet As Worksheet)
    On Error Resume Next
    Dim strArgDocProcessor As String: Dim strArgInterfaceName As String: Dim strArgInterfaceColName As String: Dim strArgQueryString As String
    Dim FieldName As String
    Dim lsInterfaceColName As String
    Dim flagData(1) As String
    Dim oParams As New BneVBAParameters
    Dim param As String
    Dim paramValues() As String
    Dim paramIndex As Integer
    Dim lovCol As String
    Dim objCol As BneVBAInterfaceCol
    Dim intBrowserWidth As Integer
    Dim intBrowserHeight As Integer
    Dim m_componentService As String
    Dim m_servletPath As String
    Dim sheetIndex As String
    
    sheetIndex = BneGetSheetIndex(sheet)

    Dim primSheet As Worksheet
    Set primSheet = BneGetPrimarySheet
    Set objCol = GetBneVBAInterfaceColForRange2(sheet, primSheet, ActiveCell)
    If Not objCol Is Nothing Then
        If objCol.ValComponent <> "" And BneIsReadOnly(ActiveCell, sheet) Then
            MsgBox "Read-only fields cannot be changed.", vbCritical
            GoTo error
    End If
    End If
    If Not Application.Intersect(ActiveCell, sheet.Names("BNE_UPLOAD" & "_" & sheetIndex).RefersToRange) Is Nothing Then
        If ActiveCell.value = "x" Then
            GoTo error
        End If
    End If
    intBrowserWidth = 350
    intBrowserHeight = 500
    
    m_servletPath = ActiveWorkbook.CustomDocumentProperties("host")
    m_componentService = m_servletPath & ActiveWorkbook.CustomDocumentProperties("component_service")
    lsInterfaceColName = GetBneInterfaceColNameOfRange2(sheet, primSheet, Range(ActiveCell.Address))
    lovCol = ActiveWorkbook.CustomDocumentProperties(lsInterfaceColName & "_LOVCOL")
    FieldName = GetBneNameOfRange(Me, Range(ActiveCell.Address))
    
    If (CLng(Err.Number) <> 5 And lovCol = "TRUE") Then
        ' This is an LOV col
        intBrowserWidth = ActiveWorkbook.CustomDocumentProperties(lsInterfaceColName & "_BROWSER_WIDTH")
        intBrowserHeight = ActiveWorkbook.CustomDocumentProperties(lsInterfaceColName & "_BROWSER_HEIGHT")
        strArgDocProcessor = ActiveWorkbook.CustomDocumentProperties(lsInterfaceColName & "_DOCPROCESSOR")
        strArgInterfaceName = ActiveWorkbook.CustomDocumentProperties("INTERFACE_NAME")
        strArgInterfaceColName = ActiveWorkbook.CustomDocumentProperties(lsInterfaceColName & "_INTERFACE_COL_NAME")
        
        oParams.add "bne:apiVersion", "1.1"
        oParams.add "bne:documentId", BneGetDocumentId
        
        BneAddParamsFromCustomProperties oParams, lsInterfaceColName, "_PARAM_KEY", False
        BneAddParamsFromCustomProperties oParams, lsInterfaceColName, "_PARAM_COL_KEY", True
        
        BneBrowseDocument strArgDocProcessor, strArgInterfaceName, strArgInterfaceColName, m_componentService, oParams, intBrowserHeight, intBrowserWidth
    End If
    
    If FieldName = "BNE_UPLOAD" Then
        If Range(ActiveCell.Address) = "O" Then
            Range(ActiveCell.Address) = ""
        Else
            Range(ActiveCell.Address) = "O"
        End If
    End If
    
error:
End Sub

' Gets the unique documentId for this document.
 Public Function BneGetDocumentId() As String
    BneGetDocumentId = ActiveWorkbook.CustomDocumentProperties("bne:documentId")
 End Function
 
 Private Sub BneAddParamsFromCustomProperties(oParams As BneVBAParameters, intfColName, paramKeySuffix As String, columnKey As Boolean)
On Error Resume Next
        Dim paramIndex As Integer
        Dim param As String
        Dim paramValues() As String
        Dim dataType As String
        Dim m_standartDateFormat As String
        Dim m_standartDateTimeFormat As String
        m_standartDateFormat = ActiveWorkbook.CustomDocumentProperties("STANDARD_DATE_FORMAT")
       
        On Error Resume Next
        m_standartDateTimeFormat = ""
        m_standartDateTimeFormat = ActiveWorkbook.CustomDocumentProperties("STANDARD_DATETIME_FORMAT")
        On Error GoTo ErrorHandler
       
        ' Reset Err.Number and paramIndex
        Err.Number = 0
        paramIndex = 0
        param = ActiveWorkbook.CustomDocumentProperties(intfColName & paramKeySuffix & paramIndex)
        ' Err.Number = 5 means item not found in collection, no better way to find if the item is not in collection
        Do While CLng(Err.Number) <> 5
            paramValues = Split(param, "=")
            If UBound(paramValues) = 1 Then
                If columnKey Then
                    dataType = ActiveWorkbook.CustomDocumentProperties(paramValues(1) & "_DATATYPE")
                    If (dataType <> "3" And dataType <> "5" And dataType <> "6") Then
                        oParams.add paramValues(0), ColumnValue(ActiveSheet, paramValues(1))
                        Err.Number = 0
                    Else
                        ' this column is Date type
                        If (dataType = "3") Then
                            oParams.add paramValues(0), ColumnDateValue(ActiveSheet, paramValues(1), m_standartDateFormat)
                        Else
                            oParams.add paramValues(0), ColumnDateValue(ActiveSheet, paramValues(1), m_standartDateTimeFormat)
                        End If
                    End If
                Else
                    oParams.add paramValues(0), paramValues(1)
                End If
            End If
            paramIndex = paramIndex + 1
            param = ActiveWorkbook.CustomDocumentProperties(intfColName & paramKeySuffix & paramIndex)
        Loop
        
        Err.Number = 0

ErrorHandler:
End Sub

Private Sub BneBrowseDocument(DocumentProcessor As String, InterfaceName As String, interfaceColName As String, sURL As String, oParams As BneVBAParameters, Optional Height As Integer, Optional Width As Integer)
On Error Resume Next
    m_InterfaceName = InterfaceName
    m_InterfaceColName = interfaceColName
    m_DocumentProcessor = DocumentProcessor
    NavigatePost sURL, oParams, Height, Width
End Sub
Public Sub BneDocument_Complete(pDisp As Object, Document As Object)
    Set m_objHTMLDocument = Document
    Call ValidateSession(m_objHTMLDocument)
End Sub
Private Sub NavigateGet(sURL As String, oParams As BneVBAParameters, Optional Height As Integer, Optional Width As Integer)
    Set m_Browser = New BneBrowser
    BneDefaultBrowser m_Browser
    If Height Then
        m_Browser.Height = Height
    End If
    If Width Then
        m_Browser.Width = Width
    End If
    m_Browser.Navigate sURL & "?" & oParams.toString
    m_Browser.Show
End Sub
Private Sub NavigatePost(sURL As String, oParams As BneVBAParameters, Optional Height As Integer, Optional Width As Integer)
    Set m_Browser = New BneBrowser
    BneDefaultBrowser m_Browser
    If Height Then
        m_Browser.Height = Height
    End If
    If Width Then
        m_Browser.Width = Width
    End If
    m_Browser.NavigatePost sURL, oParams
    m_Browser.Show
End Sub
Private Sub ValidateSession(ByRef Document As Object)
    Dim documentCookies As String
    Dim cookieNamePos As Long
    Dim semiColonPos As Long
    Dim searchString As String
    documentCookies = Document.cookie
    searchString = m_ossCookie & "="
    cookieNamePos = InStr(1, documentCookies, searchString, 0)
    If cookieNamePos > 0 Then
        cookieNamePos = cookieNamePos + Len(searchString)
        m_SessionTicket = LTrim(RTrim(Mid(documentCookies, cookieNamePos)))
    End If
    semiColonPos = InStr(m_SessionTicket, ";")
    If semiColonPos > 0 Then
        m_SessionTicket = Left(m_SessionTicket, semiColonPos - 1)
        Dim clsProperties As New BneVBAProperties
        Dim clsProperty As New BneVBAProperty
        clsProperty.name = "ICX_SESSION_ID"
        clsProperty.value = m_SessionTicket
        clsProperties.addProperty clsProperty
    End If
End Sub
Private Sub BneDefaultBrowser(ByRef BROWSER As BneBrowser)
On Error Resume Next
    BROWSER.setSession m_ossCookie, m_SessionState, m_SessionTicket
    BROWSER.setDocumentId ActiveWorkbook.CustomDocumentProperties("bne:documentId")
    BROWSER.setLanguage m_generatedLanguage
    BROWSER.setAppsServletAgent m_servletPath
    BROWSER.DOCUMENT_ONCLICK = "ThisWorkbook" & "." & DOCUMENT_ONCLICK
    BROWSER.DOCUMENT_COMPLETE = "ThisWorkbook" & "." & DOCUMENT_COMPLETE
    BROWSER.UPLOADBEGIN = BneGetPrimarySheet().CodeName & ".BneUploadBegin"
    BROWSER.UPLOADCOMPLETE = BneGetPrimarySheet().CodeName & ".BneUploadComplete"
    BROWSER.Height = 350
    BROWSER.Width = 500
BROWSER.caption = "Oracle Web ADI"
    BROWSER.LookAndFeel = 2
    BROWSER.setSheetRef Me
End Sub
Public Sub BneDocument_onclick()
On Error Resume Next
    Dim curWnd As HTMLWindow2
    Dim curElement As IHTMLElement
    Dim elementName As String
    Set curWnd = m_objHTMLDocument.parentWindow
    Set curElement = curWnd.event.srcElement
    elementName = curElement.id
    If elementName = Space(0) Then
        elementName = curElement.parentElement.id
    End If
    If InStr(elementName, "BNE:CANCEL") Then
        BneCancelButton
    ElseIf InStr(elementName, "BNE:SELECT") Then
        BneSelectButton
    ElseIf InStr(elementName, "BNE:OPENNEW") Then
        BneReDownloadEnd
    End If
End Sub
Private Sub BneCancelButton()
    m_Browser.Hide
    Set m_objHTMLDocument = Nothing
    Set m_Browser = Nothing
End Sub
Private Sub BneSelectButton()
  On Error Resume Next
  m_Browser.Hide
  Select Case m_DocumentProcessor
      Case "TABLE"
          BneTableProcessor
      Case "FORM"
          BneFormProcessor
      Case "FLEX"
          BneFFProcessor
      Case "DFF"
          BneDFFProcessor
      Case "KEYDFF"
          BneKDFFProcessor
      Case "CALENDAR"
          BneCalendarProcessor
  End Select
End Sub
Private Sub BneTableProcessor()
On Error Resume Next
    Dim Index As Integer
    Dim countSelectColumns As Integer
    Dim tableSelectColumn As String
    Dim tableAliasColumn As String
    Dim tableSelectRow As String
    Dim lsInterfaceAndColName As String
    Dim selectedName As String
    Dim selectedValue As String
    Dim selectedDOMName As String
    Dim liCurrentRow As Long
    Dim strNumberFormat As String
    Dim oColumn As BneVBAInterfaceCol
    Dim bProtectionMode As Boolean
    bProtectionMode = ActiveSheet.ProtectContents
    tableSelectColumn = m_objHTMLDocument.all("table-select-column").value
    tableAliasColumn = m_objHTMLDocument.all("table-column-alias").value
    tableSelectRow = m_objHTMLDocument.all("table-select-row").value
    strNumberFormat = m_objHTMLDocument.all("mso-number-format").value
' exit if user did not select a row
    If tableSelectRow = "-1" Then Exit Sub
    liCurrentRow = getCurrentRowInRange(GetBneInterfaceColNameOfRange2(ActiveSheet, BneGetPrimarySheet(), ActiveCell))
    countSelectColumns = ParameterCount(",", tableSelectColumn)
    For Index = 1 To countSelectColumns
        If Not (tableAliasColumn = "") Then
            selectedName = ParameterValue(",", tableAliasColumn, Index)
        Else
        selectedName = ParameterValue(",", tableSelectColumn, Index)
        End If
        selectedDOMName = "BNE:COL:DATA:" & selectedName
        selectedValue = m_objHTMLDocument.all(selectedDOMName, tableSelectRow).innerText
        If m_objHTMLDocument.all(selectedDOMName, tableSelectRow).getAttribute("value") <> "" Then
            selectedValue = m_objHTMLDocument.all(selectedDOMName, tableSelectRow).getAttribute("value")
        End If
        lsInterfaceAndColName = m_InterfaceName & "_" & ParameterValue(",", tableSelectColumn, Index)
        Set oColumn = BneGetVBAInterfaceCol(lsInterfaceAndColName)
        If strNumberFormat <> "" And oColumn.dataType <> 3 And oColumn.dataType <> 5 And oColumn.dataType <> 6 Then
           If bProtectionMode = True Then
           ActiveSheet.Unprotect
           ActiveSheet.Range(lsInterfaceAndColName)(liCurrentRow).NumberFormat = strNumberFormat
           ActiveSheet.Protect
            Else
                ActiveSheet.Range(lsInterfaceAndColName)(liCurrentRow).NumberFormat = strNumberFormat
            End If
        End If
        m_LOVFlag = True
            'Set oColumn = BneGetVBAInterfaceCol(lsInterfaceAndColName)
                If oColumn.dataType = 1 And IsNumeric(Trim(selectedValue)) Then
                     ' its a number -> as data is already as per excel formatting just convert it to number and * 1 is to retain fractional part
                     ActiveSheet.Range(lsInterfaceAndColName)(liCurrentRow).value = CDbl(selectedValue) * 1
                Else
                     ActiveSheet.Range(lsInterfaceAndColName)(liCurrentRow).value = selectedValue
                End If
        m_LOVFlag = False
    Next Index
End Sub

Public Function BneGetVBAInterfaceCol(sKey As String)
    Set BneGetVBAInterfaceCol = BneGetVBAInterfaceColFromPrimarySheet(BneGetPrimarySheet(), sKey)
End Function
Public Function BneGetVBAInterfaceColFromPrimarySheet(primarySheet, sKey As String)
    Set BneGetVBAInterfaceColFromPrimarySheet = primarySheet.BneGetVBAInterfaceCol(sKey)
End Function


Private Sub BneFormProcessor()
  Dim iCount As Long
  Dim iRow As Long
  Dim Columns() As String
  Dim sName As String
  Dim FieldName As String
  Dim liCurrentRow As Long
  On Error Resume Next
  liCurrentRow = getCurrentRowInRange(GetBneInterfaceColNameOfRange2(ActiveSheet, BneGetPrimarySheet(), ActiveCell))
  For iCount = 0 To m_objHTMLDocument.all("BNE:FIELD").Length - 1
    sName = m_objHTMLDocument.all("BNE:FIELD", iCount).getAttribute("NAME")
    FieldName = ParameterValue(":", sName, 2)
    m_LOVFlag = True
    ActiveSheet.Range(m_InterfaceName & "_" & FieldName)(liCurrentRow).value = m_objHTMLDocument.all("BNE:FIELD", iCount).getAttribute("VALUE")
    m_LOVFlag = False
  Next iCount
End Sub
Private Sub BneFFProcessor()
  On Error Resume Next
  Dim iCount As Long
  Dim iRow As Long
  Dim Columns() As String
  Dim sName As String
  Dim FieldName As String
  Dim liCurrentRow As Long
  liCurrentRow = getCurrentRowInRange(GetBneInterfaceColNameOfRange2(ActiveSheet, BneGetPrimarySheet(), ActiveCell))
  For iCount = 0 To m_objHTMLDocument.all("BNE:FIELD").Length - 1
    sName = m_objHTMLDocument.all("BNE:FIELD", iCount).getAttribute("NAME")
    FieldName = ParameterValue(":", sName, 2)
    m_LOVFlag = True
    ActiveSheet.Range(m_InterfaceName & "_" & FieldName)(liCurrentRow).value = "'" & m_objHTMLDocument.all("BNE:FIELD", iCount).getAttribute("VALUE")
    m_LOVFlag = False
  Next iCount
End Sub
Private Sub BneDFFProcessor()
  On Error Resume Next
  Dim iCount As Long
  Dim iRow As Long
  Dim Columns() As String
  Dim sName As String
  Dim FieldName As String
  Dim liCurrentRow As Long
  Dim CellPrefix As String
  liCurrentRow = getCurrentRowInRange(GetBneInterfaceColNameOfRange2(ActiveSheet, BneGetPrimarySheet(), ActiveCell))
  For iCount = 0 To m_objHTMLDocument.all("BNE:FIELD").Length - 1
    sName = m_objHTMLDocument.all("BNE:FIELD", iCount).getAttribute("NAME")
    FieldName = ParameterValue(":", sName, 2)
    m_LOVFlag = True
    CellPrefix = "'"
    If FieldName = "" Then
        If BneGetVBAInterfaceCol(m_InterfaceName & "_" & sName).dataType = 1 Then CellPrefix = ""
        ActiveSheet.Range(m_InterfaceName & "_" & sName)(getCurrentRowInRange(m_InterfaceName & "_" & sName)).value = _
                 CellPrefix & m_objHTMLDocument.all("BNE:FIELD", iCount).getAttribute("VALUE")
    Else
        If BneGetVBAInterfaceCol(m_InterfaceName & "_" & FieldName).dataType = 1 Then CellPrefix = ""
        ActiveSheet.Range(m_InterfaceName & "_" & FieldName)(liCurrentRow).value = _
                 CellPrefix & m_objHTMLDocument.all("BNE:FIELD", iCount).getAttribute("VALUE")
    End If
    m_LOVFlag = False
  Next iCount
End Sub
Private Sub BneKDFFProcessor()
  On Error Resume Next
  Dim iCount As Long
  Dim iRow As Long
  Dim Columns() As String
  Dim sName As String
  Dim FieldName As String
  Dim liCurrentRow As Long
  liCurrentRow = getCurrentRowInRange(GetBneInterfaceColNameOfRange2(ActiveSheet, BneGetPrimarySheet(), ActiveCell))
  For iCount = 0 To m_objHTMLDocument.all("BNE:FIELD").Length - 1
    sName = m_objHTMLDocument.all("BNE:FIELD", iCount).getAttribute("NAME")
    FieldName = ParameterValue(":", sName, 2)
    m_LOVFlag = True
    If FieldName = "" Then
        ActiveSheet.Range(m_InterfaceName & "_" & sName)(liCurrentRow).value = "'" & m_objHTMLDocument.all("BNE:FIELD", iCount).getAttribute("VALUE")
    Else
        ActiveSheet.Range(m_InterfaceName & "_" & FieldName)(liCurrentRow).value = "'" & m_objHTMLDocument.all("BNE:FIELD", iCount).getAttribute("VALUE")
    End If
    m_LOVFlag = False
  Next iCount
End Sub
Private Sub BneCalendarProcessor()
    On Error Resume Next
    Dim lsInterfaceAndColName As String
    Dim selectedName As String
    Dim selectedValue As String
    selectedName = m_objHTMLDocument.all("table-select-column").value
    selectedValue = m_objHTMLDocument.all(selectedName).innerText
    If m_objHTMLDocument.all(selectedName).getAttribute("value") <> "" Then
       selectedValue = m_objHTMLDocument.all(selectedName).getAttribute("value")
    End If
    If selectedValue <> "" Then
       lsInterfaceAndColName = m_InterfaceName & "_" & selectedName
       m_LOVFlag = True
       ActiveSheet.Range(lsInterfaceAndColName)(getCurrentRowInRange(lsInterfaceAndColName)).value = selectedValue
       m_LOVFlag = False
    End If
 End Sub

Public Sub BneGraphsAll(Optional noAutoGraphCheck = True)
    Dim Index As Integer
    Dim objProperties As New BneVBAProperties
    Dim objProperty As New BneVBAProperty
    Dim myGraph As BneVBAGraph
    Dim graphs As BneVBAGraphs
    Set graphs = New BneVBAGraphs
    For Index = 1 To graphs.getGraphCount
        Set myGraph = graphs.getGraph(Index)
        If Not myGraph Is Nothing Then
            If noAutoGraphCheck = True Or myGraph.autoGraph = True Then
                myGraph.topMenuName = "Or&acle"
                objProperties.setSheet ActiveSheet
                Set objProperty = objProperties.getProperty("contentgroupsequence")
                If Not objProperty Is Nothing And Not isEmpty(objProperty.value) Then
                   myGraph.sheetNumber = CInt(objProperty.value)
                   Set objProperty = Nothing
                End If
                myGraph.SetupDefaultGraphData ActiveSheet, ActiveSheet.name
                Dim bnePrimarySheet As Object
                Set bnePrimarySheet = BneGetPrimarySheet
                myGraph.SetGraphHeadingRow ActiveSheet, bnePrimarySheet.BneGetVBAInterfaceCols
                myGraph.BuildGraph ActiveSheet.Parent
            End If
            Set myGraph = Nothing
        End If
    Next
    Set objProperties = Nothing
End Sub
Public Sub BneGraphsSelection()
On Error Resume Next
    If TypeName(Selection) = "Range" Then
        Dim myGraph As BneVBAGraph
        Dim graphs As BneVBAGraphs
        Dim integCode As String
        Dim layoutCode As String
        
        integCode = ActiveWorkbook.CustomDocumentProperties("INTEGRATOR_ID")
        layoutCode = ActiveWorkbook.CustomDocumentProperties("LAYOUT_ID")
        Set graphs = New BneVBAGraphs
        Set myGraph = graphs.getGraph(integCode & ":1:" & layoutCode)
        If Not myGraph Is Nothing Then
            myGraph.topMenuName = "Or&acle"
            Dim objProperties As New BneVBAProperties
            Dim objProperty As New BneVBAProperty
            objProperties.setSheet ActiveSheet
            Set objProperty = objProperties.getProperty("contentgroupsequence")
            If Not objProperty Is Nothing And Not isEmpty(objProperty.value) Then
               myGraph.sheetNumber = CInt(objProperty.value)
               Set objProperty = Nothing
            End If
            Set objProperties = Nothing
            Dim bnePrimarySheet As Object
            Set bnePrimarySheet = BneGetPrimarySheet
            myGraph.SetGraphHeadingRow ActiveSheet, bnePrimarySheet.BneGetVBAInterfaceCols
            myGraph.AddRange Selection, ActiveSheet.name
            myGraph.BuildGraph ActiveSheet.Parent
            Set myGraph = Nothing
        End If
    End If
End Sub
Public Sub BneGraphsVariation()
    If TypeName(Selection) = "Range" Then
        Dim myGraph As BneVBAGraph
        Dim graphs As BneVBAGraphs
        Dim integCode As String
        Dim layoutCode As String
        
        integCode = ActiveWorkbook.CustomDocumentProperties("INTEGRATOR_ID")
        layoutCode = ActiveWorkbook.CustomDocumentProperties("LAYOUT_ID")
        Set graphs = New BneVBAGraphs
        Set myGraph = graphs.getGraph(integCode & ":1:" & layoutCode)
        If Not myGraph Is Nothing Then
            myGraph.topMenuName = "Or&acle"
            Dim objProperties As New BneVBAProperties
            Dim objProperty As New BneVBAProperty
            objProperties.setSheet ActiveSheet
            Set objProperty = objProperties.getProperty("contentgroupsequence")
            If Not objProperty Is Nothing And Not isEmpty(objProperty.value) Then
               myGraph.sheetNumber = CInt(objProperty.value)
               Set objProperty = Nothing
            End If
            Set objProperties = Nothing
            Dim bnePrimarySheet As Object
            Set bnePrimarySheet = BneGetPrimarySheet
            myGraph.SetGraphHeadingRow ActiveSheet, bnePrimarySheet.BneGetVBAInterfaceCols
            myGraph.AddVariations Selection, ActiveSheet.Parent
            myGraph.BuildGraph ActiveSheet.Parent
            Set myGraph = Nothing
        End If
    End If
End Sub

Public Sub BneDisplayGraphType()
    Application.Dialogs(xlDialogChartType).Show
End Sub

Public Sub GLAddNote(objCellRng As Range)
Dim objNoteRng As Range
    ActiveSheet.Unprotect
    Application.EnableEvents = False
    If Not objCellRng Is Nothing Then
        Set objNoteRng = Range(Cells(objCellRng.Row, objCellRng.Column), Cells(objCellRng.Row, objCellRng.Column))
        objNoteRng.Select
        If objNoteRng.Comment Is Nothing Then
            objNoteRng.AddComment
            objNoteRng.Comment.text text:=objNoteRng.Comment.Author & ":"
        End If
        objNoteRng.Comment.Shape.Visible = msoCTrue
        objNoteRng.Comment.Shape.Select
    End If
    Application.EnableEvents = True
End Sub
Public Sub GLAddBudgetNote()
    Dim objSeg1Rng As Range
    On Error Resume Next
    Set objSeg1Rng = ActiveSheet.Names("CONTEXT").RefersToRange
    GLAddNote objSeg1Rng
End Sub
Public Sub GLAddAccountNote()
Dim objSeg1Rng As Range
Dim objLineRng As Range
Dim objAccRng As Range
On Error Resume Next
  Set objLineRng = Names("LINE").RefersToRange
  Set objSeg1Rng = Names("GL_BUDGET_INTERFACE_SEGMENT1").RefersToRange
  If Not Application.Intersect(Selection, objLineRng) Is Nothing Then
    Set objAccRng = Range(Cells(Selection.Row, objSeg1Rng.Column), Cells(Selection.Row, objSeg1Rng.Column))
  Else
    Set objAccRng = Range(Cells(objSeg1Rng.Row, objSeg1Rng.Column), Cells(objSeg1Rng.Row, objSeg1Rng.Column))
  End If
  GLAddNote objAccRng
End Sub
Public Sub GLAddAmountNote()
Dim objAmtStartRng As Range
Dim objAmtEndRng As Range
Dim objAmtRng As Range
Dim objLineRng As Range
On Error Resume Next
  Set objLineRng = Names("LINE").RefersToRange
  Set objAmtStartRng = ActiveSheet.Names("GL_BUDGET_INTERFACE_PERIOD1_AMOUNT").RefersToRange
  Set objAmtEndRng = ActiveSheet.Names("GL_BUDGET_INTERFACE_PERIOD13_AMOUNT").RefersToRange
  Set objAmtRng = Range(objAmtStartRng, objAmtEndRng)
  If Not Application.Intersect(Selection, objAmtRng) Is Nothing Then
    GLAddNote Selection
  Else
    If Not Application.Intersect(Selection, objLineRng) Is Nothing Then
       GLAddNote Range(Cells(Selection.Row, objAmtStartRng.Column), Cells(Selection.Row, objAmtStartRng.Column))
    Else
       GLAddNote objAmtStartRng
    End If
  End If
End Sub
Public Sub BneShowHideFilters(ShowFilter As Boolean)
    Dim pDrawingObjects As Boolean
    Dim pContents As Boolean
    Dim pScenarios As Boolean
    
    Dim TopRow As Long
    Dim TopColumn As Long
    
    Dim linesRange As Range
    Dim LinesBlockHdr As Range
    
    Dim TipTextExists As Boolean
    Dim HeaderOffset As Integer
    
    Dim InterfaceCols As Collection
    
    Application.ScreenUpdating = False
    With ActiveSheet
        pDrawingObjects = .ProtectDrawingObjects
        pContents = .ProtectContents
        pScenarios = .ProtectScenarios
        If Not pDrawingObjects And Not pContents And Not pScenarios Then
        Else
            .Unprotect
        End If
    End With
    TopRow = ActiveWindow.VisibleRange.Row
    TopColumn = ActiveWindow.VisibleRange.Column
    
    Set InterfaceCols = BneGetVBAInterfaceCols
    Set linesRange = BneRetrieveLinesBlockRange(ActiveSheet, InterfaceCols)
    
'   Determine Header Offset
    TipTextExists = m_isReporting
    If TipTextExists Then
        HeaderOffset = -1
    Else
        HeaderOffset = -2
    End If
    
    With ActiveSheet
'       Perform check to ensure ranges have been found and values assigned
        If Not linesRange Is Nothing Then
'           Set Lines Range and Autofilter
            Set LinesBlockHdr = Range(Cells(linesRange.Row + HeaderOffset, linesRange.Column), Cells(linesRange.Row, linesRange.Columns(linesRange.Columns.count).Column))
            LinesBlockHdr.AutoFilter
            
'           Hide Tip Row if it exists
'           NB - This must be done AFTER the autofilter has been applied.
            If TipTextExists Then
                .Rows(linesRange.Row - 1).hidden = Not ShowFilter
            End If
        End If
        
        ActiveWindow.ScrollRow = TopRow
        ActiveWindow.ScrollColumn = TopColumn
        If .AutoFilterMode = False Then
            .Protect DrawingObjects:=True, contents:=True, Scenarios:=True
        End If
    End With
    
'     Set Menu Changes
    BneSelectionChange_Menus ActiveSheet.UsedRange
End Sub

Public Function IsEnabled_231_HIDE_FILTERS() As Boolean
    If ActiveSheet.AutoFilterMode Then
      IsEnabled_231_HIDE_FILTERS = True
    Else
      IsEnabled_231_HIDE_FILTERS = False
    End If
End Function

Public Function IsEnabled_231_RESET_FILTERS() As Boolean
    If ActiveSheet.AutoFilterMode Then
      IsEnabled_231_RESET_FILTERS = True
    Else
      IsEnabled_231_RESET_FILTERS = False
    End If
End Function

Private Sub BneSelectionChange_Menus(ByVal Target As Range)
    On Error Resume Next
    Dim strMenuTitle As String
    Dim objWorkSheetMenuBar As Object
    Set objWorkSheetMenuBar = Application.CommandBars("Worksheet Menu Bar")
    Dim objMenu_231_ORACLE As Object
strMenuTitle = "Or&acle"
    Set objMenu_231_ORACLE = objWorkSheetMenuBar.Controls(strMenuTitle)
    Dim objMenu_231_FILTERS As Object
strMenuTitle = "&Filters"
    Set objMenu_231_FILTERS = objMenu_231_ORACLE.Controls(strMenuTitle)
    Dim objMenu_231_SHOW_FILTERS As Object
strMenuTitle = "&Show Filters"
    Set objMenu_231_SHOW_FILTERS = objMenu_231_FILTERS.Controls(strMenuTitle)
        objMenu_231_SHOW_FILTERS.Enabled = IsEnabled_231_SHOW_FILTERS
    Dim objMenu_231_HIDE_FILTERS As Object
strMenuTitle = "&Hide Filters"
    Set objMenu_231_HIDE_FILTERS = objMenu_231_FILTERS.Controls(strMenuTitle)
        objMenu_231_HIDE_FILTERS.Enabled = IsEnabled_231_HIDE_FILTERS
    Dim objMenu_231_RESET_FILTERS As Object
strMenuTitle = "&Reset Filters"
    Set objMenu_231_RESET_FILTERS = objMenu_231_FILTERS.Controls(strMenuTitle)
        objMenu_231_RESET_FILTERS.Enabled = IsEnabled_231_RESET_FILTERS
    Dim objMenu_231_UPLOAD As Object
strMenuTitle = "&Upload"
    Set objMenu_231_UPLOAD = objMenu_231_ORACLE.Controls(strMenuTitle)
        objMenu_231_UPLOAD.Visible = IsVisible_231_UPLOAD
    Dim objMenu_231_UPLOADALL As Object
strMenuTitle = "U&pload All"
    Set objMenu_231_UPLOADALL = objMenu_231_ORACLE.Controls(strMenuTitle)
        objMenu_231_UPLOADALL.Visible = IsVisible_231_UPLOADALL
End Sub

Public Function IsEnabled_231_SHOW_FILTERS() As Boolean
    If ActiveSheet.AutoFilterMode Then
      IsEnabled_231_SHOW_FILTERS = False
    Else
      IsEnabled_231_SHOW_FILTERS = True
    End If
End Function

Public Function IsVisible_231_UPLOAD() As Boolean
    On Error Resume Next
    Dim webadiUpload As String

    Err.Number = 0
    webadiUpload = ActiveWorkbook.CustomDocumentProperties(ActiveSheet.CodeName & "_UPLOAD")
    If CLng(Err.Number) <> 5 And webadiUpload = "TRUE" Then
       IsVisible_231_UPLOAD = True
    Else
       IsVisible_231_UPLOAD = False
    End If
End Function

Public Function IsVisible_231_UPLOADALL() As Boolean
   On Error Resume Next
   Dim ws As Worksheet
   Dim webAdiSheetCount As Integer
   Dim webadiSheet As String
   webAdiSheetCount = 0
   For Each ws In ActiveWorkbook.Worksheets
        Err.Number = 0
        webadiSheet = ActiveWorkbook.CustomDocumentProperties(ws.CodeName & "_UPLOAD")
        If CLng(Err.Number) <> 5 And webadiSheet = "TRUE" Then
            webAdiSheetCount = webAdiSheetCount + 1
        End If
   Next ws

   If webAdiSheetCount > 1 Then
      IsVisible_231_UPLOADALL = True
   Else
      IsVisible_231_UPLOADALL = False
   End If
End Function

Public Function BneGetVBAInterfaceCols()
    Set BneGetVBAInterfaceCols = BneGetVBAInterfaceColsFromPrimarySheet(BneGetPrimarySheet())
End Function

Public Function BneGetVBAInterfaceColsFromPrimarySheet(primarySheet)
    Set BneGetVBAInterfaceColsFromPrimarySheet = primarySheet.BneGetVBAInterfaceCols()
End Function

Public Sub BneResetFilters()
    Dim pDrawingObjects As Boolean
    Dim pContents As Boolean
    Dim pScenarios As Boolean
    
    Dim linesRange As Range
    
    Dim InterfaceCols As Collection
        
'     Check if this method should be executed based on AutoFilterMode
    If ActiveSheet.AutoFilterMode Then
        Application.ScreenUpdating = False
        With ActiveSheet
            pDrawingObjects = .ProtectDrawingObjects
            pContents = .ProtectContents
            pScenarios = .ProtectScenarios
            If Not pDrawingObjects And Not pContents And Not pScenarios Then
            Else
                .Unprotect
            End If
            
            On Error Resume Next
            
            .ShowAllData
        End With
        
'         Hide tip text row if it exists
        Set InterfaceCols = BneGetVBAInterfaceCols
        If m_isReporting Then
            
'             Attempt to retrieve first column
            Set linesRange = BneRetrieveLinesBlockRange(ActiveSheet, InterfaceCols)
'             Perform check to ensure range has been found and value assigned
            If Not linesRange Is Nothing Then
'                 Hide Tip Row if it exists
                ActiveSheet.Rows(linesRange.Row - 1).hidden = True
            End If
        End If
        
        With ActiveSheet
            If Not pDrawingObjects And Not pContents And Not pScenarios Then
            Else
                .Protect DrawingObjects:=True, contents:=True, Scenarios:=True
            End If
        End With
    End If
End Sub
Public Sub BneUploadDocument()
   Application.Run BneGetPrimarySheet().CodeName & ".BneUploadSingleSheet"
End Sub

Private Sub BneUploadAll()
   Application.Run BneGetPrimarySheet().CodeName & ".BneUploadAll"
End Sub
Public Sub BneMonitor()
    Dim oParams As New BneVBAParameters
    oParams.add "bne:apiVersion", "1.0"
    oParams.add "bne:page", "BneOAMonitor"
    NavigatePost m_applicationService, oParams
End Sub

Public Sub BneAbout()
    Dim oParams As New BneVBAParameters
    oParams.add "bne:apiVersion", "1.0"
    oParams.add "bne:page", "BneHelpAbout"
    NavigatePost m_applicationService, oParams
End Sub
Public Sub BneSwitchResponsibility()
    Dim oParams As New BneVBAParameters
    oParams.add "bne:apiVersion", "1.0"
    oParams.add "bne:page", "BneOASwitchResp"
    NavigatePost m_applicationService, oParams
End Sub

Public Function BneGetUploadParams() As Object
    Dim oParams As New BneVBAParameters
    
    BneAddParamsFromCustomProperties2 oParams, "BNE_UPLOAD_PARAM", False
    BneAddParamsFromCustomProperties2 oParams, "BNE_UPLOAD_COL_PARAM", True
    
    Set BneGetUploadParams = oParams
End Function
Private Sub BneAddParamsFromCustomProperties2(oParams As BneVBAParameters, paramKeySuffix As String, columnKey As Boolean)
On Error Resume Next
        Dim paramIndex As Integer
        Dim param As String
        Dim paramValues() As String
        Dim dataType As String
        ' Reset Err.Number and paramIndex
        Err.Number = 0
        paramIndex = 0
        param = ActiveWorkbook.CustomDocumentProperties(paramKeySuffix & paramIndex)
        ' Err.Number = 5 means item not found in collection, no better way to find if the item is not in collection
        Do While CLng(Err.Number) <> 5
            paramValues = Split(param, "=")
            If UBound(paramValues) = 1 Then
                If columnKey Then
                    oParams.add paramValues(0), ColumnValue(Me, paramValues(1))
                Else
                    oParams.add paramValues(0), paramValues(1)
                End If
            End If
            paramIndex = paramIndex + 1
            param = ActiveWorkbook.CustomDocumentProperties(paramKeySuffix & paramIndex)
        Loop
        
        Err.Number = 0
End Sub

Public Function IsUploadCompressionEnabled() As Boolean
    IsUploadCompressionEnabled = m_uploadCompression
End Function

' Settings menu
Public Sub BneSettings()
    Dim objProperties As New BneVBAProperties
    Dim appZipProp As New BneVBAProperty
    Dim exeZipProp As New BneVBAProperty
    Dim myForm As Object
    Set myForm = New BneUploadSettings
    If (objProperties.hasProperties) Then
       Set appZipProp = objProperties.getProperty("bne_zip_application")
       If (Not appZipProp Is Nothing) Then
          myForm.BNE_ZIP_APPLICATION.value = appZipProp.value
       Else
          myForm.BNE_ZIP_APPLICATION.value = Nothing
       End If
       Set exeZipProp = objProperties.getProperty("bne_zip_executable")
       If (Not exeZipProp Is Nothing) Then
          myForm.BNE_ZIP_EXECUTABLE.value = exeZipProp.value
       Else
          myForm.BNE_ZIP_EXECUTABLE.value = Nothing
       End If
    Else
       appZipProp.name = "bne_zip_application"
       appZipProp.value = vbNullString
       exeZipProp.name = "bne_zip_executable"
       exeZipProp.value = vbNullString
       objProperties.addProperty appZipProp
       objProperties.addProperty exeZipProp
    End If
    myForm.Show
    If myForm.resultUplSettings = True Then
      appZipProp.name = "bne_zip_application"
      appZipProp.value = myForm.BNE_ZIP_APPLICATION
      objProperties.addProperty appZipProp
      exeZipProp.name = "bne_zip_executable"
      exeZipProp.value = myForm.BNE_ZIP_EXECUTABLE
      objProperties.addProperty exeZipProp
    End If
End Sub
Sub MakeBneUploadSettingsForm(i As Integer)
    Dim bneForm As Object
    Dim label As MSForms.label
    Dim textBox As MSForms.textBox
    Dim cmdBtn As MSForms.CommandButton
    Dim comboBox As MSForms.comboBox
    Set bneForm = ThisWorkbook.VBProject.VBComponents.Item(i)
    Dim j As Integer
    For j = 0 To bneForm.Designer.Controls.count - 1
        bneForm.Designer.Controls.Remove 0
    Next j
    Set comboBox = bneForm.Designer.Controls.add("Forms.ComboBox.1")
    With comboBox
        .name = "BNE_ZIP_APPLICATION"
        .Height = 15
        .Left = 69.75
        .Top = 36
        .Width = 72
        .Style = fmStyleDropDownList
        .DropButtonStyle = fmDropButtonStyleArrow
        .DragBehavior = fmDragBehaviorDisabled
        .EnterFieldBehavior = fmEnterFieldBehaviorSelectAll
        .ListStyle = fmListStylePlain
        .TextAlign = fmTextAlignLeft
        .Font.size = 8
        .Font.name = "Tahoma"
        .BackColor = &HFAFDFF
        .BorderColor = &HDEE4E7
        .borderStyle = fmBorderStyleSingle
        .SpecialEffect = fmSpecialEffectFlat
        .TabIndex = 1
    End With
    Set textBox = bneForm.Designer.Controls.add("Forms.textbox.1")
    With textBox
        .name = "BNE_ZIP_EXECUTABLE"
        .Height = 15
        .Left = 69.75
        .Top = 54.5
        .Width = 117
        .Font.size = 8
        .Font.name = "Tahoma"
        .BackColor = &HFAFDFF
        .BorderColor = &HDEE4E7
        .borderStyle = fmBorderStyleSingle
        .SpecialEffect = fmSpecialEffectFlat
        .TabIndex = 2
    End With
    Set cmdBtn = bneForm.Designer.Controls.add("Forms.CommandButton.1")
    With cmdBtn
        .name = "BNE_BROWSE"
        .AutoSize = False
        .Cancel = False
        .Default = False
        .caption = "..."
        .Height = 16
        .Left = 186.5
        .Top = 54
        .Width = 16
        .Font.size = 7
        .Font.name = "Tahoma"
        .BackColor = &HF8FCFD
        .ForeColor = &H333333
        .TabIndex = 3
    End With
    Set cmdBtn = bneForm.Designer.Controls.add("Forms.CommandButton.1")
    With cmdBtn
        .name = "UPL_SETTINGS_CANCEL"
        .AutoSize = False
        .Cancel = True
        .Default = False
        .caption = "Cancel"
        .Height = 16
        .Left = 150
        .Top = 84
        .Width = 50
        .Font.size = 7
        .Font.name = "Tahoma"
        .BackColor = &HF4D9BC
        .ForeColor = &H333333
        .TabIndex = 4
    End With
    Set cmdBtn = bneForm.Designer.Controls.add("Forms.CommandButton.1")
    With cmdBtn
        .name = "UPL_SETTINGS_OK"
        .AutoSize = False
        .Cancel = False
        .Default = True
        .caption = "OK"
        .Height = 16
        .Left = 202.55
        .Top = 84
        .Width = 50
        .Font.size = 7
        .Font.name = "Tahoma"
        .BackColor = &HF4D9BC
        .ForeColor = &H333333
        .TabIndex = 5
    End With
    'Create 3 Labels
    Set label = bneForm.Designer.Controls.add("Forms.label.1")
    With label
        .name = "Label_bne_zip_application"
        .caption = "Application"
        .Height = 10.5
        .Left = 24
        .Top = 38.25
        .Width = 45
        .Font.name = "Tahoma"
        .Font.size = 9
        .BackColor = &HFFFFFF
        .ForeColor = &H4F4F4F
    End With
    Set label = bneForm.Designer.Controls.add("Forms.label.1")
    With label
        .name = "Label_bne_zip_executable"
        .caption = "Path"
        .Height = 10.5
        .Left = 49.5
        .Top = 56.75
        .Width = 19.5
        .Font.name = "Tahoma"
        .Font.size = 9
        .BackColor = &HFFFFFF
        .ForeColor = &H4F4F4F
    End With
    Set label = bneForm.Designer.Controls.add("Forms.label.1")
    With label
        .name = "Label_comp_details"
        .caption = "Compression Details"
        .Height = 10.5
        .Left = 6
        .Top = 6
        .Width = 93
        .Font.name = "Tahoma"
        .Font.size = 9
        .Font.Bold = True
        .BackColor = &HFFFFFF
        .ForeColor = &H5B3D00
    End With
End Sub
Sub createUploadSettingsForm()
    Dim i As Integer
    For i = 1 To ThisWorkbook.VBProject.VBComponents.count
        If ThisWorkbook.VBProject.VBComponents.Item(i).Type = vbext_ct_MSForm _
           And ThisWorkbook.VBProject.VBComponents.Item(i).name = "BneUploadSettings" Then
            With ThisWorkbook.VBProject.VBComponents.Item(i)
                .Properties("Caption") = "Settings"
                .Properties("Width") = 262.5
                .Properties("Height") = 133.5
                .Properties("Top") = 140.25
                .Properties("Left") = 140.25
                .Properties("BackColor") = &HFFFFFF
                .Properties("ForeColor") = &HFFFFFF
            End With
            MakeBneUploadSettingsForm (i)
            Exit For
        End If
    Next i
End Sub
Function hasUplSettingControls() As Boolean
   Dim i As Integer
   For i = 1 To ThisWorkbook.VBProject.VBComponents.count
     If ThisWorkbook.VBProject.VBComponents.Item(i).Type = vbext_ct_MSForm _
        And ThisWorkbook.VBProject.VBComponents.Item(i).name = "BneUploadSettings" Then
           Dim myForm As Object
           Set myForm = ThisWorkbook.VBProject.VBComponents.Item(i)
           If myForm.Designer.Controls.count >= 2 Then
              hasUplSettingControls = True
              Exit Function
           Else
              hasUplSettingControls = False
              Exit Function
           End If
      End If
   Next
   hasUplSettingControls = False
End Function
' End of Settings menu

' ReDownload
Public Sub BneReDownload()
'    SetWebBrowser Nothing
    If Not m_Browser Is Nothing Then
       Set m_Browser = Nothing
    End If
    BneReDownloadStatusChange "processing", "BneReDownload2", ""
End Sub
Public Sub BneReDownload2(obj As Object)
    SetWebBrowser Nothing
    BneReDownloadStatusChange "format", "BneReDownloadBegin", ""
End Sub

Public Sub BneReDownloadStatusChange(state As String, callbackEvent As String, Optional errorMsg As String)
    BneReDownloadPage state, callbackEvent, errorMsg
End Sub

Public Sub BneReDownloadBegin(obj As Object)

Dim oParams As New BneVBAParameters
Dim FileNum As Long
Dim FileData() As Byte
Dim redownloadURL As String
Dim filename As String
Dim tempFolder As String
Dim openPos As Integer
Dim closePos As Integer

oParams.add "bne:viewerticket", ActiveWorkbook.CustomDocumentProperties("viewerticket")
oParams.add "bne:documentId", BneGetDocumentId
oParams.add "bne:redownload", "Y"

redownloadURL = m_redownloadService & "?" & oParams.toString

' prepare filename
filename = Left(ActiveWorkbook.FullName, Len(ActiveWorkbook.FullName) - 5) & "_1.xlsm"
m_redownloadFilename = filename
Debug.Print filename

' call create service to download the document
Dim oMSXML As Object
On Error GoTo ErrorHandler
Set oMSXML = CreateHTTPObject()
If oMSXML Is Nothing Then
    GoTo ErrorHandler
End If

' register the handler that saves the document
Dim handler As BneDownloadHTTPHandler
Set handler = New BneDownloadHTTPHandler
handler.Initialize oMSXML, filename

' call create service
oMSXML.OnReadyStateChange = handler
oMSXML.Open "POST", redownloadURL, True
oMSXML.send ""

Exit Sub

ErrorHandler:
'    MsgBox "stream error " & filename & Err.Description
    BneReDownloadPage "error", ""
End Sub

Public Sub BneReDownloadEnd()
    If m_redownloadFilename <> "" Then
        Dim wb As Workbook
        Dim curWb As Workbook
        Set curWb = ActiveWorkbook
        Dim xl As Excel.Application
    
        Application.EnableEvents = False
        Application.DisplayAlerts = False
        Application.ScreenUpdating = False
    
        Set xl = CreateObject("Excel.Application")
        xl.Visible = False
        Set wb = xl.Workbooks.Open(m_redownloadFilename)
        wb.Activate
        curWb.Save
    
        Application.EnableEvents = True
        Application.DisplayAlerts = True
        Application.ScreenUpdating = True
    
        xl.Visible = True
        Application.Quit
    End If
End Sub

Public Sub BneReDownloadPage(downloadState As String, callbackEvent As String, Optional errorMsg As String)
    On Error Resume Next
    Dim oParams As BneVBAParameters
    Set oParams = BneGetDownloadParams
    oParams.add "bne:apiVersion", "1.0"
    oParams.add "bne:apiVersion_downloadService", "1.3"

    Dim strMsgHeader As String
    Dim strMsgBody As String
    Dim strMsgAction1 As String
    Dim strMsgAction2 As String
    strMsgHeader = "Error"
    strMsgBody = "The download process did not complete."
    strMsgAction1 = "This was due to a network fault. Close this window and restart the download process."
    strMsgAction2 = "Contact your system administrator if this problem persists."
    g_blnCancelOperation = False
    'Set m_Browser = GetWebBrowser
    If m_Browser Is Nothing Then
       Set m_Browser = New BneBrowser
       BneDefaultBrowser m_Browser
       Call m_Browser.errorMessage(strMsgHeader, strMsgBody, strMsgAction1, strMsgAction2)
       'SetWebBrowser m_Browser
    End If

    BneAddReference "MSXML3", "{F5078F18-C551-11D3-89B9-0000F81FE221}"
    oParams.add "bne:page", "BneDownloadState"
    oParams.add "bne:state", downloadState
    oParams.add "bne:redownload", "Y"
    oParams.add "bne:createviewer", "false"
'    If rowsDownloaded <> "" Then
'        oParams.add "bne:downloadrows", rowsDownloaded
'    End If
    If downloadState = "error" And errorMsg <> "" Then
        oParams.add "bne:messagexml", errorMsg
    End If
    If callbackEvent <> "" Then
        m_Browser.addEventCallBack callbackEvent, "DOWNLOADBEGIN", ThisWorkbook
    End If
    m_Browser.NavigatePost m_applicationService, oParams
    m_Browser.Show
End Sub
Public Function BneGetDownloadParams() As Object
    Dim oParams As New BneVBAParameters
    oParams.add "bne:client", "false"
    oParams.add "bne:client-parameters", Application.ActiveWorkbook.name & ";sheet=" & Me.name
    oParams.add "bne:documentId", BneGetDocumentId
    Set BneGetDownloadParams = oParams
End Function
' End of ReDownload




Attribute VB_Name = "bneMain"

'+=======================================================================+
'|   Copyright (c) 2014 Oracle Corporation, Redwood Shores, CA, USA      |
'|                      All rights reserved.                             |
'+=======================================================================+
'|  HISTORY                                                              |
'|  28-Aug-2014 poramas created.                                         |
'|  30-Jan-2015 poramas 20440681: TST1225: OOXML NOT WORKING PROPERLY    |
'|                                                     WITH OFFICE 64BIT |
'|  24-Apr-2015 poramas 20925791: TST1225: KFF/DFF LOVS NOT USING THE    |
'|                                       ALREADY ENTERED PARTIAL VALUES  |
'|  05-May-2015 poramas 21032929: TST1225:INVOKING SETTINGS IN ORACLE    |
'|                          MENU GIVES RUN-TIME ERROR IN OOXML DOCUMENT  |
'|  06-May-2015 poramas 21024217 - TST1225:ATGUI: WEBADI FILE GENERATED  |
'|                          DOES NOT LIST THE PROJECTS WHEN BNE PROFILE  |
'|  08-Mar-2016 poramas 22645601: DOES WEBADI SUPPORT SELECTING MULTIPLE |
'|                      NON-SEQUENCE ROWS WITH CTRL KEY TO PASTE         |
'|  16-Jun-2016 poramas 23294585: R:TST1226: LOVS/UPLOAD NOT WORKING WITH|
'|                      NEWLY CREATED LAYOUT IN OOXML                    |
'|  16-Feb-2017 poramas BUG 21883698 - THAI USERS WITH BUDDHIST CALENDAR |
'|                      FORMATS ERRORS WHEN UPLOADING DIF                |
'|  15-Nov-2017 poramas 27123666: DFF DIALOG DOES NOT RECOGNIZE THE      |
'|                      ACCOUNTING DATE VALUE                            |
'|  30-Jul-2018 nputrevu 28197995: THE LOV IS NOT DISPLAYED WHEN ATTRIBUTE
'|                       DISPLAY OVER 15 ON EXCEL SPREADSHEET            |
'+=======================================================================+
'RCS_ID = $Header :$
Option Explicit
Option Base 1
'holds the session cookie for the current connection
Global g_icxSessionID As String
Global g_blnCancelOperation As Boolean
Global g_WorkbookSavedPreviously As Boolean
Global g_nosOfRowsDownloaded As Long
Global g_commitEachRow As Boolean
Dim m_Browser As Object
Dim m_ParentWorkBookName As String
Dim m_ParentWorkBookCollection As Collection
Dim m_ParentRibbonWorkbookPaths As Collection
Dim m_NewWorkBookCollection As Collection
Const TIME_ZONE_ID_UNKNOWN As Long = 1
Const TIME_ZONE_ID_STANDARD As Long = 1
Const TIME_ZONE_ID_DAYLIGHT As Long = 2
Const TIME_ZONE_ID_INVALID As Long = &HFFFFFFFF
Const BLOCKSIZE As Integer = 45
Private Const PROCESS_ALL_ACCESS = &H1F0FFF
Private Const TemporaryFolder As Integer = 2
 #If VBA7 Then
   #If Win64 Then
       Private Declare PtrSafe Function OpenProcess Lib "kernel32" (ByVal dwDesiredAccess As Long, ByVal bInheritHandle As Long, ByVal dwProcessId As Long) As Long
   #Else
       Private Declare Function OpenProcess Lib "kernel32" (ByVal dwDesiredAccess As Long, ByVal bInheritHandle As Long, ByVal dwProcessId As Long) As Long
   #End If
 #Else
   Private Declare Function OpenProcess Lib "kernel32" (ByVal dwDesiredAccess As Long, ByVal bInheritHandle As Long, ByVal dwProcessId As Long) As Long
 #End If
 #If VBA7 Then
   #If Win64 Then
       Private Declare PtrSafe Function GetExitCodeProcess Lib "kernel32" (ByVal lnghProcess As Long, lpExitCode As Long) As Long
   #Else
       Private Declare Function GetExitCodeProcess Lib "kernel32" (ByVal lnghProcess As Long, lpExitCode As Long) As Long
   #End If
 #Else
   Private Declare Function GetExitCodeProcess Lib "kernel32" (ByVal lnghProcess As Long, lpExitCode As Long) As Long
 #End If
'BLOCKSIZE Used to Write in blocks the BneUUEncoded File, for now it has to be for now a multiple of 3
 #If VBA7 Then
   #If Win64 Then
       Public Declare PtrSafe Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (Destination As Any, Source As Any, ByVal Length As LongPtr)
   #Else
       Public Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (pDest As Any, pSource As Any, ByVal dwLength As Long)
   #End If
 #Else
   Public Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (pDest As Any, pSource As Any, ByVal dwLength As Long)
 #End If
 #If VBA7 Then
   #If Win64 Then
       Declare PtrSafe Function LocalAlloc Lib "kernel32" (ByVal wFlags As Long, ByVal wBytes As LongPtr) As LongPtr
   #Else
       Public Declare Function LocalAlloc Lib "kernel32" (ByVal uFlags As Long, ByVal uBytes As Long) As Long
   #End If
 #Else
   Public Declare Function LocalAlloc Lib "kernel32" (ByVal uFlags As Long, ByVal uBytes As Long) As Long
 #End If
 #If VBA7 Then
   #If Win64 Then
       Declare PtrSafe Function LocalFree Lib "kernel32" (ByVal hMem As LongPtr) As LongPtr
   #Else
       Public Declare Function LocalFree Lib "kernel32" (ByVal hMem As Long) As Long
   #End If
 #Else
   Public Declare Function LocalFree Lib "kernel32" (ByVal hMem As Long) As Long
 #End If
 #If VBA7 Then
   #If Win64 Then
       Public Declare PtrSafe Function GetLogicalDriveStrings Lib "kernel32.dll" (ByVal nBufferLength As Long, ByVal lpBuffer As String) As Long
   #Else
       Public Declare Function GetLogicalDriveStrings Lib "kernel32.dll" (ByVal nBufferLength As Long, ByVal lpBuffer As String) As Long
   #End If
 #Else
   Public Declare Function GetLogicalDriveStrings Lib "kernel32.dll" (ByVal nBufferLength As Long, ByVal lpBuffer As String) As Long
 #End If
 #If VBA7 Then
   #If Win64 Then
       Public Declare PtrSafe Function GetCurrentProcessId Lib "kernel32" () As Long
   #Else
       Public Declare Function GetCurrentProcessId Lib "kernel32" () As Long
   #End If
 #Else
   Public Declare Function GetCurrentProcessId Lib "kernel32" () As Long
 #End If
Public Const LPTR = (&H0 Or &H40)
Public Type SYSTEMTIME
   wYear         As Integer
   wMonth        As Integer
   wDayOfWeek    As Integer
   wDay          As Integer
   wHour         As Integer
   wMinute       As Integer
   wSecond       As Integer
   wMilliseconds As Integer
End Type
Public Type TIME_ZONE_INFORMATION
   Bias As Long
   StandardName(0 To ((32 * 2) - 1)) As Byte  'unicode
   StandardDate As SYSTEMTIME
   StandardBias As Long
   DaylightName(0 To ((32 * 2) - 1)) As Byte  'unicode
   DaylightDate As SYSTEMTIME
   DaylightBias As Long
End Type
 #If VBA7 Then
   #If Win64 Then
       Declare PtrSafe Function GetTimeZoneInformation Lib "kernel32" (lpTimeZoneInformation As TIME_ZONE_INFORMATION) As Long
   #Else
       Public Declare Function GetTimeZoneInformation Lib "kernel32" (lpTimeZoneInformation As TIME_ZONE_INFORMATION) As Long
   #End If
 #Else
   Public Declare Function GetTimeZoneInformation Lib "kernel32" (lpTimeZoneInformation As TIME_ZONE_INFORMATION) As Long
 #End If
 #If VBA7 Then
   #If Win64 Then
       Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
   #Else
       Public Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
   #End If
 #Else
   Public Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
 #End If
 #If VBA7 Then
   #If Win64 Then
       Declare PtrSafe Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" (ByVal hwnd As LongPtr, ByVal lpOperation As String, ByVal lpFile As String, ByVal lpParameters As String, ByVal lpDirectory As String, ByVal nShowCmd As Long) As LongPtr
   #Else
       Public Declare Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" (ByVal hwnd As Long, ByVal lpOperation As String, ByVal lpFile As String, ByVal lpParameters As String, ByVal lpDirectory As String, ByVal nShowCmd As Long) As Long
   #End If
 #Else
   Public Declare Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" (ByVal hwnd As Long, ByVal lpOperation As String, ByVal lpFile As String, ByVal lpParameters As String, ByVal lpDirectory As String, ByVal nShowCmd As Long) As Long
 #End If
Public Const SW_SHOW = 5
Public Function isShellRunning(ByVal ShellReturnValue As Long) As Boolean
Dim lnghProcess As Long
Dim lExitCode As Long
lnghProcess = OpenProcess(PROCESS_ALL_ACCESS, 0&, ShellReturnValue)
If lnghProcess <> 0 Then
    GetExitCodeProcess lnghProcess, lExitCode
    If lExitCode <> 0 Then
'        ' Process still ALIVE!
        isShellRunning = True
    Else
        isShellRunning = False
    End If
End If
End Function
Public Sub FreeMemory(PointerA As Long)
    LocalFree PointerA
End Sub
Public Function RetMemory(PointerA As Long) As String
    Dim lSize As Long, sThis As String
    If PointerA = 0 Then
    Else
        CopyMemory lSize, ByVal PointerA, 4
        If lSize > 0 Then
            sThis = String(lSize \ 2, 0)
            CopyMemory ByVal StrPtr(sThis), ByVal PointerA + 4, lSize
            RetMemory = sThis
        End If
    End If
End Function
Public Function malloc(Strin As String) As Long
    Dim PointerA As Long, lSize As Long
    lSize = LenB(Strin)
    PointerA = LocalAlloc(LPTR, lSize + 4)
    If PointerA <> 0 Then
        CopyMemory ByVal PointerA, lSize, 4
        If lSize > 0 Then
            CopyMemory ByVal PointerA + 4, ByVal StrPtr(Strin), lSize
        End If
    End If
    malloc = PointerA
End Function
Public Sub GetUploadRows(LayoutSheet As Worksheet, ByRef UploadRows As Variant, ByRef FlaggedRows() As Long, FlaggedRowsOnly As Boolean, Optional NotEmptyRows As Boolean = False)
'Parse the array, if a flag is included, add the row number to an array of row numbers
Dim lRowCount As Long
Dim lCounter As Long
    If FlaggedRowsOnly Then
        lRowCount = 0
        For lCounter = 1 To UBound(UploadRows)
            If UploadRows(lCounter, 1) = "O" Then
                lRowCount = lRowCount + 1
                ReDim Preserve FlaggedRows(1 To lRowCount)
                FlaggedRows(lRowCount) = lCounter
            End If
        Next lCounter
    Else
        ReDim FlaggedRows(1 To UBound(UploadRows))
        Dim UploadRange As Range
        Dim MessageRange As Range
        Dim RowOffset As Long
        Dim ColumnOffset As Long
        Dim ColumnCount As Long
        Set UploadRange = LayoutSheet.Range("BNE_UPLOAD")
        Set MessageRange = LayoutSheet.Range("BNE_MESSAGES_LAMP")
        RowOffset = UploadRange.Row
        ColumnOffset = UploadRange.Column
        ColumnCount = MessageRange.Column
        lRowCount = 0
        For lCounter = 1 To UBound(UploadRows)
            If NotEmptyRows Then
                If IsRowEmpty(LayoutSheet, lCounter, RowOffset, ColumnOffset, ColumnCount) = False And UploadRows(lCounter, 1) <> "x" Then
                    lRowCount = lRowCount + 1
                    ReDim Preserve FlaggedRows(1 To lRowCount)
                    FlaggedRows(lRowCount) = lCounter
                End If
            Else
                FlaggedRows(lCounter) = lCounter
            End If
        Next lCounter
    End If
End Sub
Public Sub SetSessionID(sSessionID As String)
   g_icxSessionID = sSessionID
End Sub
Public Function getTimeZoneOffset() As Long
   Dim tzi As TIME_ZONE_INFORMATION: Dim zoneOffset As Long: Dim result As Long
   result = GetTimeZoneInformation(tzi)
   zoneOffset = tzi.Bias
   getTimeZoneOffset = zoneOffset
End Function
 Public Sub SetWebBrowser(objBrowser As Object)
     Set m_Browser = objBrowser
 End Sub
 Public Function GetWebBrowser()
     Set GetWebBrowser = m_Browser
 End Function
 Public Sub setParentWorkBookName(parentDocumentName As String)
     m_ParentWorkBookName = parentDocumentName
 End Sub
 Public Function getParentWorkBookName()
     getParentWorkBookName = m_ParentWorkBookName
 End Function
Public Sub setParentWorkBookCollection(objParentWorkBookCollection As Collection)
   Set m_ParentWorkBookCollection = objParentWorkBookCollection
End Sub
Public Function getParentWorkBookCollection() As Collection
   Set getParentWorkBookCollection = m_ParentWorkBookCollection
End Function
Public Sub setNewWorkBookCollection(objNewWorkBookCollection As Collection)
   Set m_NewWorkBookCollection = objNewWorkBookCollection
End Sub
Public Function getNewWorkBookCollection() As Collection
   Set getNewWorkBookCollection = m_NewWorkBookCollection
End Function
Public Sub setParentRibbonWorkbookPaths(objParentRibbonWorkbookPaths As Collection)
   Set m_ParentRibbonWorkbookPaths = objParentRibbonWorkbookPaths
End Sub
Public Function getParentRibbonWorkbookPaths() As Collection
   Set getParentRibbonWorkbookPaths = m_ParentRibbonWorkbookPaths
End Function
Public Function createDOMDocument() As Object
On Error Resume Next
    Dim newDocument As Object
    Set newDocument = CreateObject("MSXML2.DOMDocument")
    If Err Then
        Set newDocument = CreateObject("MSXML.DOMDocument")
    End If
    Set createDOMDocument = newDocument
End Function
Public Function postDocument(sURL As String, sNameValueList As String)
    Dim objXMLhttp As Object
    Dim sContent As String
    Dim sMsg As String
    On Error Resume Next
    Set objXMLhttp = CreateObject("MSXML2.XMLHTTP")
    If Err <> 0 Then
        Err.Clear
        Set objXMLhttp = CreateObject("Microsoft.XMLHTTP")
        If Err <> 0 Then
sMsg = "Unable to create program object Microsoft.XMLHTTP.  Ensure you are running IE 5.0 or greater and have installed the  viewer you selected in the Create Document Page Flow."
            MsgBox (sMsg)
        End If
    End If
    On Error GoTo 0
    objXMLhttp.Open "POST", sURL, False
    objXMLhttp.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
    On Error GoTo ErrorHandler
    objXMLhttp.send (sNameValueList)
    Set postDocument = objXMLhttp.responseXML
    On Error GoTo 0
    Exit Function
ErrorHandler:
    MsgBox "Load Data: " & Err.Number & " - " & Err.Source & "( " & Err.Description & " ) ", vbCritical, "Message"
    Set postDocument = Nothing
End Function
Public Function ParseLoadErrors(XMLError As Object) As String
    Dim strErr As String
    Dim m_parseError As Object
    Set m_parseError = XMLError
    With XMLError
        strErr = "Error: " + CStr(.ErrorCode) + " in "
        strErr = strErr + " <" & .URL & ">"
        strErr = strErr + vbCrLf + "Position: line=" + CStr(.Line) + " linepos=" + CStr(.linepos) + " filepos=" + CStr(.filepos)
        strErr = strErr + vbCrLf + "Reason: " + .reason
        strErr = strErr + IIf(Len(.srcText) > 0, vbCrLf + "Source: " + .srcText, "")
    End With
    ParseLoadErrors = strErr
End Function
Public Function CellValue(c)
    Application.Volatile
    Select Case True
        Case isEmpty(c): CellValue = ""
        Case Application.IsText(c): CellValue = c.value
        Case Application.IsLogical(c): CellValue = c.value
        Case Application.IsErr(c): CellValue = c.value
        Case IsDate(c): CellValue = c.value
        Case InStr(1, c.text, ":") <> 0: CellValue = c.value
        Case IsNumeric(c): CellValue = c.value
    End Select
End Function
Public Function RowDifference(rRange As Range, rIntersect As Range) As Long
    RowDifference = (rIntersect.Row - rRange.Row + 1)
End Function
'Return the name of the first 'BNE_' named range which intersects with the specified range.
Public Function GetBneNameOfRange(loSheet, loRng As Range) As String
    Dim loName As name
    Dim lsName As String
    For Each loName In loSheet.Names
        If loRng.Parent.name = Range(loName.RefersTo).Parent.name Then
            If Not Application.Intersect(loRng, loName.RefersToRange) Is Nothing Then
                lsName = StripSheetName(loName.name)
                If Left(lsName, 4) = "BNE_" Then
                    GetBneNameOfRange = StripSheetName(loName.name)
                    Exit Function
                End If
            End If
        End If
    Next loName
    GetBneNameOfRange = ""
End Function
'Return the name of the first named range which intersects with the specified range and is also an Interface Column range.
Public Function GetBneInterfaceColNameOfRange(loSheet, loRng As Range) As String
    Dim loName As name
    Dim lsName As String
    For Each loName In loSheet.Names
        'Bug 28197995: Use RefersToRange instead ofRange()
        If loRng.Parent.name = loName.RefersToRange.Parent.name Then
            If Not Application.Intersect(loRng, loName.RefersToRange) Is Nothing Then
                lsName = StripSheetName(loName.name)
                If Not loSheet.BneGetVBAInterfaceCol(lsName) Is Nothing Then
                    GetBneInterfaceColNameOfRange = StripSheetName(lsName)
                    Exit Function
                End If
            End If
        End If
    Next loName
    GetBneInterfaceColNameOfRange = ""
End Function
Public Function GetBneVBAInterfaceColForRange2(loSheet, primarySheet, loRng As Range) As BneVBAInterfaceCol
    Dim loName As name
    Dim lsName As String
    For Each loName In loSheet.Names
        If loRng.Parent.name = Range(loName.RefersTo).Parent.name Then
            If Not Application.Intersect(loRng, loName.RefersToRange) Is Nothing Then
                lsName = StripSheetName(loName.name)
                If Not primarySheet.BneGetVBAInterfaceCol(lsName) Is Nothing Then
                    Set GetBneVBAInterfaceColForRange2 = primarySheet.BneGetVBAInterfaceCol(lsName)
                    Exit Function
                End If
            End If
        End If
    Next loName
    Set GetBneVBAInterfaceColForRange2 = Nothing
End Function
Public Function GetBneInterfaceColNameOfRange2(loSheet, primarySheet, loRng As Range) As String
    Dim loName As name
    Dim lsName As String
    For Each loName In loSheet.Names
        'Bug 28197995: Use RefersToRange instead ofRange()
        If loRng.Parent.name = loName.RefersToRange.Parent.name Then
            If Not Application.Intersect(loRng, loName.RefersToRange) Is Nothing Then
                lsName = StripSheetName(loName.name)
                If Not primarySheet.BneGetVBAInterfaceCol(lsName) Is Nothing Then
                    GetBneInterfaceColNameOfRange2 = lsName
                    Exit Function
                End If
            End If
        End If
    Next loName
    GetBneInterfaceColNameOfRange2 = ""
End Function
Public Function GetBneVBAInterfaceColByName(loSheet, strNameRng As String) As BneVBAInterfaceCol
On Error Resume Next
Dim strName As String
    strName = StripSheetName(strNameRng)
    Set GetBneVBAInterfaceColByName = loSheet.BneGetVBAInterfaceCol(strName)
End Function
'Return the Interface Col object of the first named range which intersects with the specified range.
Public Function GetBneVBAInterfaceColForRange(loSheet, loRng As Range) As BneVBAInterfaceCol
    Dim loName As name
    Dim lsName As String
    For Each loName In loSheet.Names
        If loRng.Parent.name = Range(loName.RefersTo).Parent.name Then
            If Not Application.Intersect(loRng, loName.RefersToRange) Is Nothing Then
                lsName = StripSheetName(loName.name)
                If Not loSheet.BneGetVBAInterfaceCol(lsName) Is Nothing Then
                    Set GetBneVBAInterfaceColForRange = loSheet.BneGetVBAInterfaceCol(lsName)
                    Exit Function
                End If
            End If
        End If
    Next loName
    Set GetBneVBAInterfaceColForRange = Nothing
End Function
'Return the Interface Cols collection for the sheet object.
Public Function GetBneVBAInterfaceCols(loSheet) As Object
   Set GetBneVBAInterfaceCols = loSheet.BneGetVBAInterfaceCols
End Function
Public Function StripSheetName(strName As String) As String
    Dim intPos
    intPos = InStr(strName, "!")
    If intPos > 0 Then
       StripSheetName = Mid(strName, intPos + 1)
    Else
       StripSheetName = strName
    End If
End Function
Public Sub FlagRow(LayoutSheet As Worksheet, TargetRange As Range, UploadRange As Range, MessagesRange As Range)
On Error Resume Next
    Dim KeyCells As Range: Dim StartRow As Long: Dim StartCol As Integer
    Dim TotalLines As Long: Dim TotalCol As Integer: Dim EndRow As Long: Dim EndCol As Long
    Dim rowCnt As Long: Dim colCnt As Long: Dim rowHasData As Boolean
    Static isRunning As Boolean
    If isRunning = True Then
        isRunning = False
        Exit Sub
    End If
    isRunning = True
' this section will flag/deflag rows based on whether the upload flag is directly modified
    If Not Application.Intersect(UploadRange, Range(TargetRange.Address)) Is Nothing Then
            If TargetRange.Rows.count = 1 Then
                If Len(TargetRange.value) > 0 Then
                    LayoutSheet.Cells(TargetRange.Row, 2).value = "O"
                End If
            End If
            isRunning = False
            Exit Sub
    End If
    Call BneProcessingBegin 'Disables events/screen updates etc.
' this section will flag/deflag rows based on whether any data has changed
    StartRow = UploadRange.Row: StartCol = UploadRange.Column + 1
    TotalLines = MessagesRange.Rows.count: TotalCol = MessagesRange.Columns.count
    EndRow = MessagesRange.Cells(TotalLines, TotalCol).Row: EndCol = MessagesRange.Cells(TotalLines, TotalCol).Column - 1
    Set KeyCells = Range(LayoutSheet.Cells(StartRow, StartCol), LayoutSheet.Cells(EndRow, EndCol))
    If Not Application.Intersect(KeyCells, Range(TargetRange.Address)) Is Nothing Then
' for each row that has changed - check each cell in that row and try and detect whether there is any data in the row.
        Dim AreaRange As Range
        For Each AreaRange In TargetRange.Areas
            For rowCnt = AreaRange.Row To AreaRange.Row + (AreaRange.Rows.count - 1)
                If LayoutSheet.Cells(rowCnt, UploadRange.Column).RowHeight > 0 Then
                    rowHasData = False
                    For colCnt = KeyCells.Column To KeyCells.Column + (KeyCells.Columns.count - 1)
' only flag a row if the row has a value and the row is visible
                        If Len(LayoutSheet.Cells(rowCnt, colCnt).value) > 0 Then
                            rowHasData = True
                            Exit For
                        End If
                    Next
'                   If the row is flagged as non-uploadable, don't change flag
                    If LayoutSheet.Cells(rowCnt, UploadRange.Column).value <> "x" Then
                        If rowHasData Then
' there is data somewhere in the row - so flag that it should be uploaded
                            LayoutSheet.Cells(rowCnt, UploadRange.Column).value = "O"
                        Else
' there is no data in this row - remove the flag
                            LayoutSheet.Cells(rowCnt, UploadRange.Column).value = ""
                        End If
                    End If
                End If
            Next rowCnt
        Next AreaRange
    End If
    Call BneProcessingEnd 'Enables events/screen updates etc.
    isRunning = False
End Sub
Public Function getCurrentRow() As Long
    getCurrentRow = RowDifference(Range(GetBneInterfaceColNameOfRange(ActiveSheet, Range(ActiveCell.Address))), Range(ActiveCell.Address))
End Function
Public Function getCurrentRowInRange(lsRangeName As String) As Long
    getCurrentRowInRange = RowDifference(Range(lsRangeName), Range(ActiveCell.Address))
End Function
'Public Function getCurrentRowInRange2(lsRangeName As String) As Long
'    getCurrentRowInRange2 = RowDifference(Range(lsRangeName), Range(lsRangeName))
'End Function
Public Sub AddComment(Item As Object, causeText As String, actionText As String)
On Error Resume Next
Dim sNoteText As String
Dim strCommentTitle As String
Dim strCommentCause As String
Dim strCommentAction As String
  If Item.Comment Is Nothing Then
strCommentTitle = "Messages"
strCommentCause = "Cause: &CAUSE"
strCommentAction = "Action: &ACTION"
    Item.Select
    Item.AddComment
    Item.Comment.Visible = False
    Item.Comment.Shape.Fill.BackColor.RGB = RGB(255, 0, 0)
    Item.Comment.Shape.TextFrame.AutoMargins = True
    Item.Comment.Shape.ScaleWidth 2.5, msoFalse, msoScaleFromTopLeft
    Item.Comment.Shape.ScaleHeight 1.5, msoFalse, msoScaleFromTopLeft
    sNoteText = strCommentTitle & vbCrLf
    If Len(causeText) Then sNoteText = sNoteText & Replace(strCommentCause, "&CAUSE", causeText) & vbCrLf
    If Len(actionText) Then sNoteText = sNoteText & Replace(strCommentAction, "&ACTION", actionText) & vbCrLf
    Item.Comment.text text:=sNoteText
  End If
End Sub
Public Sub DeleteComments(LayoutSheet As Worksheet)
On Error Resume Next
Dim objComment As Comment
    For Each objComment In LayoutSheet.Comments
        If objComment.Shape.Fill.BackColor.RGB = RGB(255, 0, 0) Then
            objComment.Delete
        End If
    Next
End Sub
Public Sub BNEArray(BNEArray(), ErrorArray(), RowOffset, ColumnOffset, Rows, Columns, objSheet, FlaggedRows() As Long)
    Dim NumberFormat As String
    Dim CellPrefixCharacter As String
    Dim Row As Long
    Dim col As Integer
    Dim objCol As Object
    Dim arrColDataTypes() As Integer
    Dim sRangeName As String
    Dim iColDataType As Integer
    Dim vCellValue As Variant
    RowOffset = RowOffset - 1
    ColumnOffset = ColumnOffset - 1
    Rows = UBound(FlaggedRows)
    ReDim BNEArray(Rows, Columns)
    ReDim ErrorArray(Rows, Columns)
    ReDim arrColDataTypes(Columns)
    For col = 1 To Columns
       sRangeName = GetBneInterfaceColNameOfRange(objSheet, Cells(RowOffset + 1, ColumnOffset + col))
       Set objCol = objSheet.BneGetVBAInterfaceCol(sRangeName)
       If Not objCol Is Nothing Then
           arrColDataTypes(col) = objCol.dataType
       Else
           arrColDataTypes(col) = 2
       End If
    Next col
    Dim Counter As Long
    For Counter = 1 To UBound(BNEArray, 1)
        Row = FlaggedRows(Counter)
        If Row > 0 Then 'Row will be zero if no flagged rows in document
        For col = 1 To UBound(BNEArray, 2)
            vCellValue = Cells(RowOffset + Row, ColumnOffset + col).value
            If VarType(vCellValue) = vbError Then
                vCellValue = "UPL_ER_COLUMN_INVALID"
                ErrorArray(Row, col) = vCellValue
            Else
                 NumberFormat = Cells(RowOffset + Row, ColumnOffset + col).NumberFormat
                 CellPrefixCharacter = Cells(RowOffset + Row, ColumnOffset + col).PrefixCharacter
                 iColDataType = arrColDataTypes(col)
                 On Error Resume Next
                 Select Case iColDataType
                    Case 3
'                       date data type - hardcoded format to yyyy-mm-dd
                       BNEArray(Counter, col) = Format(Cells(RowOffset + Row, ColumnOffset + col).value, "yyyy-MM-dd")
                    Case 1
'                       numeric data type
                        BNEArray(Counter, col) = Cells(RowOffset + Row, ColumnOffset + col).value
                    Case Else
'                   text or otherwise
                        If Application.WorksheetFunction.IsText(Cells(RowOffset + Row, ColumnOffset + col).value) Or NumberFormat = "" Or NumberFormat = "@" Or Left(NumberFormat, 1) = "#" Or NumberFormat = "General" Or CellPrefixCharacter = "'" Then
                           BNEArray(Counter, col) = Cells(RowOffset + Row, ColumnOffset + col).value
                        Else
                            BNEArray(Counter, col) = Format(Cells(RowOffset + Row, ColumnOffset + col).value, NumberFormat)
                        End If
                 End Select
                 If Err <> 0 Then
                     BNEArray(Counter, col) = Cells(RowOffset + Row, ColumnOffset + col).value
                 End If
            End If
            On Error GoTo 0
        Next col
        End If
    Next Counter
End Sub
Public Function ColumnValue(sheet As Worksheet, ColumnName As String)
 On Error Resume Next
     Dim NumberFormat As String
     Dim ValueRange As Range
     Set ValueRange = Range(ColumnName)
     If ValueRange Is Nothing Then
        ColumnValue = ColumnHiddenValue(ColumnName)
     Else
        If ValueRange.count = 1 Then
            NumberFormat = ValueRange(1).NumberFormat
            ColumnValue = ValueRange(1).value
            If Not (Application.WorksheetFunction.IsText(ColumnValue) Or NumberFormat = "" Or NumberFormat = "General" Or NumberFormat = "@" Or ValueRange(getCurrentRowInRange(ColumnName)).PrefixCharacter <> "") Then
                ColumnValue = Format(ValueRange(1).value, NumberFormat)
            End If
        Else
            NumberFormat = ValueRange(getCurrentRowInRange(ColumnName)).NumberFormat
            ColumnValue = ValueRange(getCurrentRowInRange(ColumnName)).value
            If Not (Application.WorksheetFunction.IsText(ColumnValue) Or NumberFormat = "" Or NumberFormat = "General" Or NumberFormat = "@" Or ValueRange(1).PrefixCharacter <> "") Then
                ColumnValue = Format(ValueRange(getCurrentRowInRange(ColumnName)).value, NumberFormat)
            End If
        End If
     End If
End Function
Public Function ColumnDateValue(sheet As Worksheet, ColumnName As String, dateFormat As String)
 On Error GoTo ErrorHandler
     Dim ValueRange As Range
     Dim strValue As String
     Dim theDate As Date
     Dim sDateWithoutTime As String
     Dim theDateWithoutTime As Date
     Dim sDateTB As String
     Dim sCalendarType As String
     Dim m_standartDateFormat As String
     Dim m_standartDateTimeFormat As String
     m_standartDateFormat = ActiveWorkbook.CustomDocumentProperties("STANDARD_DATE_FORMAT")
     
     On Error Resume Next
     m_standartDateTimeFormat = ""
     m_standartDateTimeFormat = ActiveWorkbook.CustomDocumentProperties("STANDARD_DATETIME_FORMAT")
     On Error GoTo ErrorHandler

     Set ValueRange = sheet.Range(ColumnName)
     If ValueRange Is Nothing Then
        strValue = ColumnHiddenValue(ColumnName)
     Else
        If ValueRange.count = 1 Then
           strValue = ValueRange(1).value
        Else
           strValue = ValueRange(getCurrentRowInRange(ColumnName)).value
        End If
    End If
    theDate = strValue
    sCalendarType = ActiveWorkbook.CustomDocumentProperties("CALENDAR_TYPE")
    If (strValue = "") Then
        ColumnDateValue = Format(strValue, dateFormat)
    Else
        If sCalendarType = "2" Then
            sDateWithoutTime = Format(theDate, m_standartDateFormat)
            theDateWithoutTime = CStr(CInt(Left(sDateWithoutTime, 4)) - 543) + Right(sDateWithoutTime, 6)
        Else
            sDateWithoutTime = Format(theDate, m_standartDateFormat)
            theDateWithoutTime = sDateWithoutTime
        End If
        If (theDateWithoutTime >= "1900-01-01" And theDateWithoutTime <= "1900-02-28") Then
            If (theDateWithoutTime = "1900-02-28") Then
                On Error GoTo dateError
                Err.Raise 32001
                On Error GoTo ErrorHandler
            End If
            theDate = theDate + 1
        End If
        If (theDateWithoutTime = "1899-12-31") Then
            If ValueRange Is Nothing Then
                theDate = theDate + 1
            Else
                If ValueRange.count = 1 Then
                    If Application.WorksheetFunction.IsText(ValueRange(1)) Then
                        theDate = theDate
                    Else
                        theDate = theDate + 1
                    End If
                Else
                    If Application.WorksheetFunction.IsText(ValueRange(getCurrentRowInRange(ColumnName))) Then
                        theDate = theDate
                    Else
                        theDate = theDate + 1
                    End If
                End If
            End If
        End If
        If sCalendarType = "2" Then
            If dateFormat = m_standartDateFormat Then
                sDateTB = Format(theDate, m_standartDateFormat)
                theDate = CStr(CInt(Left(sDateTB, 4)) - 543) + Right(sDateTB, 6)
            Else
                sDateTB = Format(theDate, m_standartDateTimeFormat)
                theDate = CStr(CInt(Left(sDateTB, 4)) - 543) + Right(sDateTB, 15)
            End If
        End If
        ColumnDateValue = Format(theDate, dateFormat)
    End If
    Exit Function
ErrorHandler:
    On Error Resume Next
    ColumnDateValue = Format(strValue, dateFormat)
    If Err <> 0 Then
       ColumnDateValue = strValue
    End If
    Exit Function
dateError:
   AddBneMsg BNE_ERROR, "bneMain_ColumnDateValue", "Invalid date value - Col: " & ColumnName & ", DateFormat: " & dateFormat
'ErrorHandler:
End Function


Public Function ColumnHiddenValue(ColumnName As String)
On Error Resume Next
    Dim hidden As String
    Err.Number = 0
    hidden = ActiveWorkbook.CustomDocumentProperties(ColumnName & "_HIDDEN")
    If CLng(Err.Number) <> 5 And hidden = "TRUE" Then
        ColumnHiddenValue = ActiveWorkbook.CustomDocumentProperties(ColumnName & "_VALUE")
    Else
        ColumnHiddenValue = ""
    End If
End Function
Public Sub setColumnValue(sheet As Worksheet, InterfaceName As String, ColumnName As String, StartRow As Long, ParamArray Data() As Variant)
     Dim rngValue As Range
     Dim rngUpload As Range
     Set rngValue = sheet.Range(InterfaceName & "_" & ColumnName)
     If rngValue.count = 1 Then
         rngValue.value = Data(0)
     Else
         If StartRow < rngValue.count Then
             rngValue(StartRow).value = Data(0)
         Else
             Set rngUpload = sheet.Rows(sheet.Range("BNE_UPLOAD").Row + StartRow - 1)
             sheet.Unprotect
             rngUpload.Insert xlDown
             'MsgBox "protecting sheet during setColumnValue"
             sheet.Protect
             rngValue(StartRow).value = Data(0)
         End If
     End If
End Sub
Public Function URLValue(parameterName As String, ParameterValue As String)
    URLValue = "&" & UrlEncodeUtf8(parameterName & "=" & ParameterValue)
End Function
Public Function URLFieldValue(sheet As Worksheet, ColumnName As String)
    URLFieldValue = "&" & UrlEncodeUtf8("field:" & ColumnName & "=" & ColumnValue(sheet, ColumnName))
End Function
Public Function URLsetFieldValue(ColumnName As String, ColumnValue As String)
    URLsetFieldValue = "&" & UrlEncodeUtf8("field:" & ColumnName & "=" & ColumnValue)
End Function
Public Function ParameterValue(ParseCharacter As String, _
                               tString As Variant, _
                               Index As Integer) As String
  Dim CurrentPosition As Integer
  Dim ParseToPosition As Integer
  Dim CurrentToken As Integer
  Dim TempString As String
  TempString = Trim(tString) + ParseCharacter
  If Len(TempString) = 1 Then Exit Function
  CurrentPosition = 1
  CurrentToken = 1
  Do
    ParseToPosition = InStr(CurrentPosition, TempString, _
                            ParseCharacter)
    If Index = CurrentToken Then
      ParameterValue = Mid$(TempString, CurrentPosition, _
                            ParseToPosition - CurrentPosition)
      Exit Function
    End If
    CurrentToken = CurrentToken + 1
    CurrentPosition = ParseToPosition + 1
  Loop Until (CurrentPosition >= Len(TempString))
End Function
Public Function ParameterCount(ParseCharacter As String, _
                               tString As Variant) As Integer
  Dim CurrentPosition As Integer
  Dim ParseToPosition As Integer
  Dim CurrentToken As Integer
  Dim TempString As String
  TempString = Trim(tString) + ParseCharacter
  If Len(TempString) = 1 Then Exit Function
  CurrentPosition = 1
  CurrentToken = 1
  Do
      ParseToPosition = InStr(CurrentPosition, TempString, _
                              ParseCharacter)
      CurrentToken = CurrentToken + 1
      CurrentPosition = ParseToPosition + 1
  Loop Until (CurrentPosition >= Len(TempString))
  ParameterCount = CurrentToken - 1
End Function
Public Sub MoveToLinesBlock(objSheet As Worksheet)
    Dim objLinesRng As Range
    Dim objDefinedName As name
    Dim objIntersectRng As Range
    Dim objNamedRng As Range
    Dim objActiveSheet As Worksheet
    On Error Resume Next
    Set objActiveSheet = ActiveSheet
    Set objLinesRng = objSheet.Names("LINE").RefersToRange
    For Each objDefinedName In objSheet.Names
'        named column is in the lines region and not locked
        Set objNamedRng = objDefinedName.RefersToRange
        Set objIntersectRng = Intersect(objNamedRng, objLinesRng)
        If Not objNamedRng.Locked And Not objIntersectRng Is Nothing Then
            objSheet.Activate
            objSheet.Cells(objNamedRng.Rows(1).Row, objNamedRng.Columns(1).Column).Select
            objActiveSheet.Activate
            Exit Sub
        End If
    Next
End Sub
Public Function IsRangeEmpty(objSheet As Worksheet, checkRange As Range) As Boolean
    Dim rowStart, rowsIndex, columnStart, columnsIndex As Long
    rowStart = checkRange.Rows.Row - 1
    columnStart = checkRange.Columns.Column - 1
    For rowsIndex = 1 To checkRange.Rows.count
        For columnsIndex = 1 To checkRange.Columns.count
            If objSheet.Cells(rowsIndex + rowStart, columnsIndex + columnStart).text <> "" Then
                IsRangeEmpty = False
                Exit Function
            End If
        Next columnsIndex
    Next rowsIndex
    IsRangeEmpty = True
End Function
Public Function IsRowEmpty(sheet As Worksheet, ByVal rowIndex As Long, ByVal RowOffset As Long, ByVal ColumnOffset As Long, ByVal Columns As Integer) As Boolean
    IsRowEmpty = IsRangeEmpty(sheet, Range(Cells(RowOffset + rowIndex - 1, ColumnOffset), Cells(RowOffset + rowIndex - 1, ColumnOffset + Columns - 1)))
End Function
Public Function IsArrayRowEmpty(BNEArray(), ByRef rowIndex As Long) As Boolean
    Dim col As Integer
    For col = 1 To UBound(BNEArray, 2)
        If BNEArray(rowIndex, col) <> "" Then
            IsArrayRowEmpty = False
            Exit Function
        End If
    Next col
    IsArrayRowEmpty = True
End Function
Public Sub BneFormatButton(myButton As Object, bPlacement As Variant)
    On Error Resume Next
    With myButton.Font
        .name = "Arial"
        .FontStyle = "Bold"
        .size = 8
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlNone
        .ColorIndex = xlAutomatic
    End With
    With myButton
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .Orientation = xlHorizontal
        .AutoSize = False
        .Placement = bPlacement
        .PrintObject = False
    End With
End Sub
Public Sub setColumnValueArray(sheet As Worksheet, InterfaceName As String, ColumnName As String, Data As Variant, DataRows As Long)
     Dim oValueRange  As Range
     Dim oInsertRange  As Range
     Dim nRangeLength As Long
     Dim nInsert As Long
     Dim bProtection As Boolean
     On Error GoTo ErrorHandle:
     Set oValueRange = sheet.Range(InterfaceName & "_" & ColumnName)
     nRangeLength = oValueRange.count
     If nRangeLength > 1 Then
         If nRangeLength < DataRows Then
             Set oInsertRange = sheet.Rows(oValueRange.Row + 1)
             bProtection = sheet.ProtectContents
             sheet.Unprotect
             oInsertRange.offset(1, 0).EntireRow.Resize(DataRows - nRangeLength).Insert
             If bProtection Then
                'MsgBox "protect sheet setColumnValueArray"
                sheet.Protect
         End If
     End If
     oValueRange.value = Data
ErrorHandle:
End Sub
'The URLEncodeUtf8 method encodes Single & Multibyte characters for transfer as part of the querystring.
'Unicode characters encoded using this method will be decoded correctly by UIX.
Public Function UrlEncodeUtf8(ByRef strSource As String) As String
 Dim lngSourceLength As Long
 Dim strBuffer As String
 Dim strSingleHex As String
 Dim lngWriteLength As Long
 Dim intCharCode As Integer
 Dim lngCharCode As Long
 Dim lngCnt As Long
    lngSourceLength = Len(strSource)
    If Not CBool(lngSourceLength) Then Exit Function
    strBuffer = String$(lngSourceLength * 9, vbNullChar)
    strSingleHex = "%00"
    lngWriteLength = 1
    For lngCnt = 1 To lngSourceLength Step 1
        intCharCode = AscW(Mid$(strSource, lngCnt, 1))
        If intCharCode < 0 Then
            lngCharCode = CLng(intCharCode) + &H10000
        Else
            lngCharCode = CLng(intCharCode)
        End If
        If lngCharCode = &H20& Then
'          Replace spaces with plus signs
            Mid(strBuffer, lngWriteLength, 1) = "+"
            lngWriteLength = lngWriteLength + 1
        ElseIf lngCharCode <= &H7F& Then
'          less than or equal to 127
            If ((lngCharCode >= &H40&) And (lngCharCode <= &H5A&)) Or _
               ((lngCharCode >= &H61&) And (lngCharCode <= &H7A&)) Or _
               ((lngCharCode >= &H30&) And (lngCharCode <= &H39&)) Or _
               (lngCharCode = &H2A&) Or _
               (lngCharCode = &H2D&) Or _
               (lngCharCode = &H2E&) Or _
               (lngCharCode = &H5F&) Then
                Mid(strBuffer, lngWriteLength, 1) = Chr$(lngCharCode)
                lngWriteLength = lngWriteLength + 1
            Else
                If lngCharCode > &HF& Then
                    Mid(strSingleHex, 2, 2) = Hex$(lngCharCode)
                Else
                    Mid(strSingleHex, 2, 1) = "0"
                    Mid(strSingleHex, 3, 1) = Hex$(lngCharCode)
                End If
                Mid(strBuffer, lngWriteLength, 3) = strSingleHex
                lngWriteLength = lngWriteLength + 3
            End If
        ElseIf (lngCharCode >= &H80&) And (lngCharCode <= &H7FF&) Then
'          charcode 128 to 2047
            Mid(strSingleHex, 2, 2) = Hex$((lngCharCode \ &H40&) Or &HC0&)
            Mid(strBuffer, lngWriteLength, 3) = strSingleHex
            lngWriteLength = lngWriteLength + 3
            Mid(strSingleHex, 2, 2) = Hex$((lngCharCode And &H3F&) Or &H80&)
            Mid(strBuffer, lngWriteLength, 3) = strSingleHex
            lngWriteLength = lngWriteLength + 3
        ElseIf (lngCharCode >= &H800&) And (lngCharCode <= &HFFFF&) Then
'          charcode 2048 to 65535
            Mid(strSingleHex, 2, 2) = Hex$((lngCharCode \ &H1000&) Or &HE0&)
            Mid(strBuffer, lngWriteLength, 3) = strSingleHex
            lngWriteLength = lngWriteLength + 3
            Mid(strSingleHex, 2, 2) = Hex$(((lngCharCode And &HFC0&) \ &H40&) Or &H80&)
            Mid(strBuffer, lngWriteLength, 3) = strSingleHex
            lngWriteLength = lngWriteLength + 3
            Mid(strSingleHex, 2, 2) = Hex$((lngCharCode And &H3F&) Or &H80&)
            Mid(strBuffer, lngWriteLength, 3) = strSingleHex
            lngWriteLength = lngWriteLength + 3
        End If
    Next lngCnt
    If lngWriteLength > 1 Then
        UrlEncodeUtf8 = Left$(strBuffer, lngWriteLength - 1)
    End If
End Function
'Initial Sheet Creation procedure - For each sheet, run the BneOnCreateProcedure.
Public Sub BneOnCreateProcedure()
    Dim i As Long
    Dim oSheets As New Collection
    For i = 1 To Sheets.count
       oSheets.add Sheets.Item(i)
    Next
    For i = 1 To oSheets.count
       On Error Resume Next
       oSheets.Item(i).BneOnCreateProcedure
       On Error GoTo 0
    Next
End Sub
'Write data to a file.
Public Sub BneWriteFile(strFileName As String, varData As Variant)
    Dim liFn As Integer
    On Error Resume Next
    liFn = FreeFile
    strFileName = RetrieveTempDirectory & strFileName
    Open strFileName For Binary Access Write As liFn
    Put #liFn, , varData
    Close liFn
    On Error GoTo 0
End Sub
'Write Binary data to a file.
Public Function BneWritePicture(strFileName As String, Data() As Byte) As String
    Dim liFn As Long
On Error Resume Next
    If (Not strFileName = "") Then
        liFn = FreeFile
        strFileName = RetrieveTempDirectory & strFileName
        Open strFileName For Binary As liFn
        Put #liFn, , Data
        Close #liFn
        BneWritePicture = strFileName
    Else
        BneWritePicture = ""
    End If
End Function
 Public Function GetAndSaveWebPicture(ByVal vWebFile As String, ByVal vLocalFile As String) As String
 Dim oXMLhttp As Object
 Dim i As Long
 Dim vFF As Long
 Dim oResp() As Byte
'  You can also set a ref. to Microsoft XML, and Dim oXMLHTTP as MSXML2.XMLHTTP
 Set oXMLhttp = CreateObject("MSXML2.XMLHTTP")
 oXMLhttp.Open "GET", vWebFile, False
 oXMLhttp.send 'send request
'  Wait for request to finish
 Do While oXMLhttp.readyState <> 4
     DoEvents
 Loop
 oResp = oXMLhttp.responseBody
'  Create local file and save results to it
 GetAndSaveWebPicture = BneWritePicture(vLocalFile, oResp)
'  Clear memory
 Set oXMLhttp = Nothing
 End Function
Public Sub BneResizeRange(objRange As Range, intRowCount As Integer)
    Dim intResizeCount As Integer
    Dim oInsertRange As Object
    On Error Resume Next
    If objRange.Rows.count < intRowCount Then
        intResizeCount = intRowCount - objRange.Rows.count
        Set oInsertRange = objRange.Parent.Rows(objRange.Row + objRange.Rows.count - 2)
        objRange.Parent.Unprotect
        oInsertRange.offset(1, 0).EntireRow.Resize(intResizeCount).Insert
        objRange.Parent.Protect
    End If
End Sub
Public Function BneGETMSXMLVersion() As Integer
    Dim oXMLhttp As Object
    On Error Resume Next
    Err.Clear
    Set oXMLhttp = CreateObject("Msxml2.DOMDocument.4.0")
    If Err = 0 Then
        BneGETMSXMLVersion = 4
        GoTo EndFunction
    End If
    Err.Clear
    Set oXMLhttp = CreateObject("Msxml2.DOMDocument.3.0")
    If Err = 0 Then
        BneGETMSXMLVersion = 3
        GoTo EndFunction
    End If
    Err.Clear
    Set oXMLhttp = CreateObject("Msxml2.DOMDocument")
    If Err = 0 Then
        BneGETMSXMLVersion = 2
        GoTo EndFunction
    End If
    Err.Clear
    Set oXMLhttp = CreateObject("Microsoft.XMLDOM")
    If Err = 0 Then
        BneGETMSXMLVersion = 1
        GoTo EndFunction
    End If
    BneGETMSXMLVersion = -1
EndFunction:
    AddBneMsg BNE_TRACE, "BneGetMSXMLVersion", "MSXML Version is: " & BneGETMSXMLVersion
    Set oXMLhttp = Nothing
End Function
Public Sub BneProcessingBegin()
    Application.ScreenUpdating = False
    Application.EnableEvents = False
End Sub
Public Sub BneProcessingEnd()
    Application.ScreenUpdating = True
    Application.EnableEvents = True
End Sub
Public Function Split(ByRef lsInputString As String, Optional ByRef lsDelimeter As String = ",")
    Dim laOut() As String
    Dim lsIn    As String
    Dim liPos   As Integer
    Dim lsNext  As String
    Dim liCount As Integer
    On Error GoTo ErrorHandler
    lsIn = lsInputString
    Do Until Len(lsIn) = 0
       liPos = InStr(lsIn, lsDelimeter)
       If liPos = 0 Then
          lsNext = lsIn
          lsIn = ""
       Else
          lsNext = Left(lsIn, liPos - 1)
          lsIn = Mid(lsIn, liPos + Len(lsDelimeter))
       End If
       ReDim Preserve laOut(0 To liCount)
       laOut(liCount) = lsNext
       liCount = liCount + 1
    Loop
    Split = laOut
ErrorHandler:
End Function
Public Function Join(ByRef varInputArray As Variant, Optional ByRef strDelimeter As String = ",")
    Dim strOut      As String
    Dim lngCount    As Long
    On Error GoTo ErrorHandler
    For lngCount = LBound(varInputArray) To UBound(varInputArray)
        If lngCount > LBound(varInputArray) Then
            strOut = strOut & strDelimeter
        End If
       strOut = strOut & varInputArray(lngCount)
    Next
    Join = strOut
ErrorHandler:
End Function
Public Function Replace(ByRef lsInputString As String, ByRef lsFindString As String, ByRef lsReplaceString As String)
    Dim lsOut As String
    Dim llPos As Long
    lsOut = lsInputString
    On Error GoTo ErrorHandler
    llPos = InStr(lsOut, lsFindString)
    Do While llPos > 0
       lsOut = Left(lsOut, llPos - 1) & lsReplaceString & Mid(lsOut, llPos + Len(lsFindString))
       llPos = InStr(llPos + Len(lsReplaceString), lsOut, lsFindString)
    Loop
ErrorHandler:
    Replace = lsOut
End Function
Public Function InStrRev(StringCheck As String, StringMatch As String) As Long
    Dim CurPosn As Long
    Dim ThePosn As Long
    ThePosn = 0
    CurPosn = InStr(1, StringCheck, StringMatch)
    Do While CurPosn <> 0
       ThePosn = CurPosn
       CurPosn = InStr(CurPosn + 1, StringCheck, StringMatch)
    Loop
    InStrRev = ThePosn
End Function
'Creates a new MSXML object which will be used to perform HTTP Request/Response communication
Public Function CreateHTTPObject() As Object
    Dim oXMLhttp As Object
    On Error Resume Next
    Set oXMLhttp = CreateObject("MSXML2.XMLHTTP")
    If Err <> 0 Then
        Err.Clear
        AddBneMsg BNE_ERROR, "CreateHTTPObject", " Unable to create MSXML2.XMLHTTP"
        Set oXMLhttp = CreateObject("Microsoft.XMLHTTP")
        If Err <> 0 Then
            AddBneMsg BNE_ERROR, "CreateHTTPObject", " Unable to create Microsoft.XMLHTTP"
        End If
    End If
    Set CreateHTTPObject = oXMLhttp
End Function
'Extracts all of the parameters from the fields (which can be passed within a form)  and
'returns them in the array that was also passed (by reference).
'In Param     htmlForm As DOMDocument - The form to extract the parameters from.  This can also be a sinlge field.
'In Param     paramsArray As String Array - An array, passed by reference that is populated with the name-value parameter pairs.
Public Function BneExtractParams(htmlForm As Object) As BneVBAParameters
   Dim iCount As Integer
       Dim oField As Object
       Dim cParams As New BneVBAParameters
       If Not htmlForm Is Nothing Then
           If htmlForm.tagName = "FORM" Then 'This is a form filled with form fields, extract each of them.
             For iCount = 1 To htmlForm.Length
                 Set oField = htmlForm(iCount - 1) 'HTML is indexed from zero
                 If Not oField Is Nothing Then
                     If oField.tagName = "INPUT" And oField.Type = "hidden" Then
                         cParams.add oField.name, oField.value
                         If oField.name = "bne:commitrows" Then
                               If oField.value = "EACH_ROW" Or oField.value = "Y" Then
                                     g_commitEachRow = True
                                Else
                                     g_commitEachRow = False
                                End If
                         End If
                     End If
                 End If
             Next iCount
           Else 'Just a sinlge field.
             If htmlForm.tagName = "INPUT" Then
               If htmlForm.Type = "hidden" Then
                 cParams.add htmlForm.name, htmlForm.value
               End If
             End If
           End If
       End If
       Set BneExtractParams = cParams
End Function
' -- Find a temporary directory if there is no value for the cache directory
 Public Function RetrieveTempDirectory() As String
     Dim strPath As String
     Dim arrDrives() As String
     Dim i As Integer
     Dim strBuffer As String * 255
     Dim lngBuffLen As Long
     Dim theString As String
     Dim theDrive As String
     Dim driveCount As Long
'     -- check for the environment variable temp
     strPath = Environ("temp")
     If Len(strPath) > 0 Then
         RetrieveTempDirectory = PathWithFinalSlash(strPath)
         Exit Function
     End If
'     -- check for the environment variable tmp
     strPath = Environ("tmp")
     If Len(strPath) > 0 Then
         RetrieveTempDirectory = PathWithFinalSlash(strPath)
         Exit Function
     End If
'     -- get a list of logical drives
     lngBuffLen = GetLogicalDriveStrings(Len(strBuffer), strBuffer)
     theString = Left(strBuffer, lngBuffLen)
     theDrive = ""
     driveCount = 0
     For i = 1 To lngBuffLen
         If Asc(Mid(strBuffer, i, 1)) <> 0 Then _
            theDrive = theDrive & Mid(strBuffer, i, 1)
         If Asc(Mid(strBuffer, i, 1)) = 0 Then
             driveCount = driveCount + 1
             ReDim Preserve arrDrives(driveCount)
             arrDrives(driveCount) = UCase(theDrive)
             theDrive = ""
         End If
     Next i
     For i = LBound(arrDrives) To UBound(arrDrives)
         If Len(arrDrives(i)) > 0 Then
             If Len(Dir(arrDrives(i), vbDirectory)) > 0 Then
                 RetrieveTempDirectory = PathWithFinalSlash(arrDrives(i))
                 Exit Function
             End If
         End If
     Next i
 End Function
 Public Function PathWithFinalSlash(sPath As String) As String
'     -- ensure that a directory name as a trailing slash ie "c:\temp\"
     sPath = Trim(sPath)
     If Right(sPath, 1) = "\" Then
         PathWithFinalSlash = sPath
     Else
         PathWithFinalSlash = sPath & "\"
     End If
 End Function
Sub BneAddReference(sReferenceName, sReferenceGUID)
   Dim iIndex As Long
   Dim oReference As Object
   On Error Resume Next
   For iIndex = 1 To ThisWorkbook.VBProject.References.count
      Set oReference = ThisWorkbook.VBProject.References.Item(iIndex)
      If oReference.name = sReferenceName Then
          If oReference.GUID = sReferenceGUID And oReference.IsBroken Then
            ThisWorkbook.VBProject.References.Remove oReference
          Else
            Exit Sub
          End If
      End If
   Next
   ThisWorkbook.VBProject.References.AddFromGuid sReferenceGUID, 1, 0
End Sub
Sub BneAddDynamicColumn(ByRef objDataNode As Object, strColumnName As String, objDataRng As Range)
On Error GoTo ErrorHandler
'   add number column
   Dim strColDataName As String
   strColDataName = strColumnName & "_NUMBER"
   If isEmpty(objDataRng) Then
        objDataNode.setAttribute strColDataName, ""
   Else
        objDataNode.setAttribute strColDataName, CLng(objDataRng.value)
   End If
'   add text column
   strColDataName = strColumnName & "_VARCHAR2"
   objDataNode.setAttribute strColDataName, CStr(objDataRng.text)
'   add date column
   strColDataName = strColumnName & "_DATE"
   objDataNode.setAttribute strColDataName, Format(objDataRng.value, "yyyy-MM-dd")
    Exit Sub
ErrorHandler:
   objDataNode.setAttribute strColDataName, ""
   Resume Next
End Sub
 Public Function ContainsItem(col As Collection, varValue As Variant) As Boolean
 Dim varItem As Variant
     On Error Resume Next
     varItem = col.Item(varValue)
     ContainsItem = Not (Err.Number = 5 Or Err.Number = 9)
     On Error GoTo 0
 End Function
 Public Function NormalizeNumStr(numStr As Variant) As String
 On Error Resume Next
     Dim sTmp As String
     sTmp = Trim(str(numStr))
     If Left(sTmp, 1) = "." Then
         sTmp = "0" & sTmp
     End If
     If Left(sTmp, 2) = "-." Then
         sTmp = "-0" & Mid(sTmp, 2)
     End If
     NormalizeNumStr = sTmp
 End Function
 Public Function IsNumericCell(cell As Variant) As Boolean
 On Error Resume Next
      Dim ret As Boolean
      Dim myTypeName As String
      myTypeName = TypeName(cell)
      If myTypeName = "Double" Then
          ret = True
      ElseIf myTypeName = "Long" Then
          ret = True
      ElseIf myTypeName = "Integer" Then
          ret = True
      ElseIf myTypeName = "Single" Then
          ret = True
      ElseIf myTypeName = "Decimal" Then
          ret = True
      ElseIf myTypeName = "Currency" Then
          ret = True
      Else
          ret = False
      End If
      IsNumericCell = ret
  End Function
 Public Function GetHorizontalRange(ByVal bigRange As Range, rowNum As Long) As Range
 On Error Resume Next
     Dim firstRange As Range
     Dim secondRange As Range
     Set firstRange = bigRange.Worksheet.Cells(rowNum, bigRange.Column)
     Set secondRange = bigRange.Worksheet.Cells(rowNum, bigRange.Columns(bigRange.Columns.count).Column)
     Set GetHorizontalRange = Range(firstRange, secondRange)
 End Function
Public Function BneRetrieveLinesBlockRange(CurrentSheet As Worksheet, InterfaceCols As Collection) As Range
    Dim FirstColRange As Range
    Dim LastColRange As Range
    Dim TempColRange As Range
    
    Dim InterfaceCol As BneVBAInterfaceCol
    
    With CurrentSheet
        On Error Resume Next
        
        Set FirstColRange = .Range("BNE_UPLOAD")
        Set LastColRange = .Range("BNE_MESSAGES")
        
        On Error GoTo 0
        
'         Check that ranges exist
        If FirstColRange Is Nothing Or LastColRange Is Nothing Then
'             Need to iterate the interface columns to determine range
            For Each InterfaceCol In InterfaceCols
                If InterfaceCol.Orientation = "VERTICAL" Then
                    On Error Resume Next
                    Set TempColRange = .Range(InterfaceCol.InterfaceName & "_" & InterfaceCol.ColumnName)
                    On Error GoTo 0
                    
                    If Not TempColRange Is Nothing Then
'                         Find first column
                        If FirstColRange Is Nothing Then
                            Set FirstColRange = TempColRange
                        Else
                            If TempColRange.Column < FirstColRange.Column Then
                                Set FirstColRange = TempColRange
                            End If
                        End If
                        
'                         Find last column
                        If LastColRange Is Nothing Then
                            Set LastColRange = TempColRange
                        Else
                            If TempColRange.Column > LastColRange.Column Then
                                Set LastColRange = TempColRange
                            End If
                        End If
                    End If
                End If
            Next
        End If
    End With
    
'     Create Return Range Object
'     Check that ranges exist
    If Not FirstColRange Is Nothing And Not LastColRange Is Nothing Then
        Set BneRetrieveLinesBlockRange = Range(Cells(FirstColRange.Row, FirstColRange.Column), Cells(LastColRange.Rows(LastColRange.Rows.count).Row, LastColRange.Columns(LastColRange.Columns.count).Column)) 'Union(FirstColRange, LastColRange)
    Else
        Set BneRetrieveLinesBlockRange = Nothing
    End If
    
End Function
'Public Function BneIsLinesBlockHintDisplayed(InterfaceCols As Collection) As Boolean
'    Dim InterfaceCol As BneVBAInterfaceCol
''     Need to iterate the interface columns to determine if hint displayed
'    For Each InterfaceCol In InterfaceCols
'        If InterfaceCol.Orientation = "VERTICAL" Then
'            ActiveWorkbook.CustomDocumentProperties ("isreporting")
'            If InterfaceCol.HintDisplayed Then
'                BneIsLinesBlockHintDisplayed = True
'            Else
'                BneIsLinesBlockHintDisplayed = False
'            End If
'
''             Hint Displayed is a block level attribute.  Only need to check one lines item.
'            Exit For
'        End If
'    Next
'End Function
Public Function BneEscapeXML(strXML As String) As String
   strXML = Replace(strXML, "&", "&amp;")
   strXML = Replace(strXML, """", "&quot;")
   strXML = Replace(strXML, "'", "&apos;")
   strXML = Replace(strXML, "<", "&lt;")
   strXML = Replace(strXML, ">", "&gt;")
   BneEscapeXML = strXML
End Function
'-- This function parses a XML document with the supplied XPATH query.
'-- The value of the first node matching that query is returned.
Public Function BneGetNodeText(objDOMDocument As Object, strXPathQuery As String) As String
    On Error Resume Next
    BneGetNodeText = objDOMDocument.SelectSingleNode(strXPathQuery).text
End Function
'-- This function returns the value of an attribute from an attributes collection
'-- The attribute is selected using the supplied attribute name.
Public Function BneGetAttributeText(objAttributes As Object, strName As String) As String
    On Error Resume Next
    BneGetAttributeText = objAttributes.getValueFromQName(strName)
End Function
'-- This function returns the boolean value of an string
Public Function BneGetBooleanValue(ByVal strBoolean As String) As Boolean
    On Error GoTo ErrorHandler
    strBoolean = UCase(Trim(strBoolean))
    If strBoolean = "Y" Or _
       strBoolean = "YES" Or _
       strBoolean = "T" Or _
       strBoolean = "TRUE" Then
       BneGetBooleanValue = True
    Else
       BneGetBooleanValue = False
    End If
    Exit Function
ErrorHandler:
    BneGetBooleanValue = False
End Function
'-- This function returns the boolean value whether a sheet exists or not in  the current workbook
Public Function BneWorkSheetExists(strSheetName As String) As Boolean
    On Error GoTo ErrorHandler
    If Not Worksheets(strSheetName) Is Nothing Then
       BneWorkSheetExists = True
    End If
    Exit Function
ErrorHandler:
    BneWorkSheetExists = False
End Function
'-- This function returns a random string of characters in 0-9, A-Z, a-z range
Public Function BneCreateRandomString(intStringLength As Integer) As String
    Dim intCnt As Integer
    Dim intChar As Integer
    Dim strRandom As String
    On Error GoTo ErrorHandler
    strRandom = String(intStringLength, " ")
    Randomize
    For intCnt = 1 To intStringLength
       Select Case Int((3 * Rnd) + 1)
            Case 1
               Mid(strRandom, intCnt, 1) = Chr(Int((10 * Rnd) + 48))
            Case 2
               Mid(strRandom, intCnt, 1) = Chr(Int((26 * Rnd) + 65))
            Case 3
               Mid(strRandom, intCnt, 1) = Chr(Int((26 * Rnd) + 97))
       End Select
    Next
    BneCreateRandomString = strRandom
    Exit Function
ErrorHandler:
    BneCreateRandomString = strRandom
End Function
'-- get a temporary folder
Public Function GetTempFolder(Optional prefix As String)
    Dim tempFileName As String
    Dim tempFolder As String
    Dim dotPos As Integer
    Dim fs As Object
    If IsMissing(prefix) Then
        prefix = ""
    End If
    ' Create Word File System Object
    Set fs = CreateObject("Scripting.FileSystemObject")
    tempFolder = fs.GetSpecialFolder(TemporaryFolder)
    tempFileName = fs.GetTempName
    dotPos = InStr(tempFileName, ".")
    tempFolder = tempFolder & "\" & prefix & Left(tempFileName, dotPos - 1)
    Set fs = Nothing
    GetTempFolder = tempFolder
End Function
'-- get the working sheet in the workbook
'Function FindWorkingSheet(objWorkbook As Workbook) As Worksheet
'    ' Check for the sheet that has the same ContentGroupName as the Workbook, and it is the first sequence.
'    ' Checks the passed in Workbook.  If Sequence is 1, this is the first workbook
'    ' If sequence is not 1, uses the content identifier to find the 1st workbook
'    Dim clsProperties As New BneVBAProperties
'    Dim clsProperty As New BneVBAProperty
'    Dim objSheet As Worksheet
'    Dim workbookGroupName As Variant
'    On Error Resume Next
'    Set FindWorkingSheet = objWorkbook.ActiveSheet
'    'Retrieve the Workbook group name
'    workbookGroupName = ""
'    Set objSheet = objWorkbook.Worksheets("BneWorkBookProperties")
'    clsProperties.setSheet objSheet
'    workbookGroupName = clsProperties.getProperty("contentgroupname").value
'    'No group name found, so a matching group cannot be found in the sheets
'    If workbookGroupName = "" Then
'        Exit Function
'    End If
'    'Loop through each sheet in the workbook, until a worksheet with the same content group name
'    'and a sequence of 1 is found.
'    For Each objSheet In objWorkbook.Worksheets
'       clsProperties.setSheet objSheet
'       Set clsProperty = clsProperties.getProperty("contentgroupname")
'       If Not clsProperty Is Nothing Then
'          If Len(clsProperty.value) > 0 And clsProperty.value = workbookGroupName Then
'                Set FindWorkingSheet = objSheet
'          End If
'       End If
'    Next objSheet
'End Function
'Function FindFirstWorkbook(objWorkbook As Workbook) As Workbook
'' Returns the First Workbook for the Workbook that is passed in.  Based on the contentidentifier.
'' Checks the passed in Workbook.  If Sequence is 1, this is the first workbook
'' If sequence is not 1, uses the content identifier to find the 1st workbook
'Dim objSheet As Worksheet
'Dim clsProperties As New BneVBAProperties
'Dim clsProperty As New BneVBAProperty
'Dim currContentIdentifier As Variant
'    On Error Resume Next
'    Set FindFirstWorkbook = objWorkbook
''     Select the properties sheet of the passed in workbook
'    Set objSheet = objWorkbook.Worksheets("BneWorkBookProperties")
'    If objSheet Is Nothing Then
'        Exit Function
'    End If
''     Retrieve the properties from the workbook properties sheet.
'    clsProperties.setSheet objSheet
''     If the Current workbook has a sequence of 1, the current workbook is the first workbook of the sequence
'    If clsProperties.getProperty("BneWorkBookSequence").value = "1" Then
'        Exit Function
'    End If
'    currContentIdentifier = clsProperties.getProperty("contentidentifier").value
'    For Each FindFirstWorkbook In Workbooks
''         Don't check the passed in workbook.  Already done
'        If FindFirstWorkbook <> objWorkbook Then
''             Select the properties sheet of the passed in workbook
'            Set objSheet = FindFirstWorkbook.Worksheets("BneWorkBookProperties")
'            If Not objSheet Is Nothing Then
'
''                 Retrieve the properties from the workbook properties sheet.
'                clsProperties.setSheet objSheet
''                 If the ContentIdentifiers are the same and the Sequence is 1
'                   Dim targetContentIdentifier As String
'                   Dim targetBneWorkBookSequence As String
'                   targetContentIdentifier = clsProperties.getProperty("contentidentifier").value
'                   targetBneWorkBookSequence = clsProperties.getProperty("BneWorkBookSequence").value
'                If currContentIdentifier = targetContentIdentifier And targetBneWorkBookSequence = "1" Then
'                    Exit For
'                End If
'            End If
'        End If
'    Next FindFirstWorkbook
''     No match found, ergo First Workbook of sequence has been close.  Returning the passed in workbook
'End Function
'Function FindFirstWorksheet(objWorkbook As Workbook) As Worksheet
'' Check for the sheet that has the same ContentGroupName as the Workbook, and it is the first sequence.
'' Checks the passed in Workbook.  If Sequence is 1, this is the first workbook
'' If sequence is not 1, uses the content identifier to find the 1st workbook
'Dim clsProperties As New BneVBAProperties
'Dim clsProperty As New BneVBAProperty
'Dim objSheet As Worksheet
'Dim workbookGroupName As Variant
'    On Error Resume Next
'    Set FindFirstWorksheet = objWorkbook.ActiveSheet
''     Retrieve the Workbook group name
'    workbookGroupName = ""
'    Set objSheet = objWorkbook.Worksheets("BneWorkBookProperties")
'    clsProperties.setSheet objSheet
'    workbookGroupName = clsProperties.getProperty("contentgroupname").value
''     No group name found, so a matching group cannot be found in the sheets
'    If workbookGroupName = "" Then
'        Exit Function
'    End If
''     Loop through each sheet in the workbook, until a worksheet with the same content group name
''     and a sequence of 1 is found.
'    For Each objSheet In objWorkbook.Worksheets
'       clsProperties.setSheet objSheet
'       Set clsProperty = clsProperties.getProperty("contentgroupname")
'       If Not clsProperty Is Nothing Then
'          If Len(clsProperty.value) > 0 And clsProperty.value = workbookGroupName Then
'             Set clsProperty = clsProperties.getProperty("contentgroupsequence")
'             If clsProperty.value = "1" Then
'                Set FindFirstWorksheet = objSheet
'                Exit Function
'             End If
'          End If
'       End If
'    Next objSheet
'End Function
' upload compression
Private Function BneGetTempDir() As String
' Returns the temp directory from the OS system
  Dim fso As FileSystemObject
  Set fso = New FileSystemObject
  BneGetTempDir = fso.GetSpecialFolder(TemporaryFolder)
  Set fso = Nothing
End Function
'
Public Function BneGetTempFile() As String
'' Generates a Random file name in the Temporary Directory
    Dim fso As FileSystemObject
    Set fso = New FileSystemObject
    Dim stream As TextStream
    BneGetTempFile = fso.BuildPath(BneGetTempDir, "bne" & fso.GetTempName())
    Set fso = Nothing
End Function
'
  Public Function BneExistsZipApp(ByVal zipUtil As String, ByVal zipUtilExe As String) As Boolean
  Dim fso As FileSystemObject
  Dim prog As String
  
  
  Set fso = New FileSystemObject
  BneExistsZipApp = False
  If Not fso.FileExists(zipUtilExe) Then
    BneExistsZipApp = False
  Else
    BneExistsZipApp = True
  End If
  Set fso = Nothing
  End Function
  Public Function isValidZipAppAndExe(ByVal zipApp As String, ByVal zipExe As String)
        If (zipApp = "WinZip" Or zipApp = "None") Then
            isValidZipAppAndExe = True
            Exit Function
        End If
        If Not (zipApp = "7Zip" And InStr(UCase(zipExe), "7Z.EXE") > 0) Then
            isValidZipAppAndExe = False
            Exit Function
        End If
        isValidZipAppAndExe = True
  End Function
 Public Function BneZipFile(ByVal fileToZip As String, ByVal zipUtil As String, ByVal zipUtilExe As String)
'  Zips a File using zipUtil (WINZIP, 7ZIP) Utility
     Dim oApp As Object
     Dim thisFile As String
     Dim posExt As Integer
     Dim ext As String
     Dim whereToZip As String
     Dim llen As Integer
     Dim fso As FileSystemObject
     Dim prog As String
     Dim cmdDOS As String
     Dim result As Long
     Set fso = New FileSystemObject
     On Error GoTo ErrZippingFile
     Err.Clear
     If zipUtil = "WinZip" Then
          prog = zipUtilExe
     ElseIf zipUtil = "7Zip" Then
          prog = zipUtilExe & " a "
     Else
          prog = "NoZip"
     End If
     thisFile = fso.GetFileName(fileToZip)
     posExt = InStr(thisFile, ".")
     llen = Len(thisFile)
     posExt = llen - posExt
     ext = Right(thisFile, posExt)
     whereToZip = fileToZip
     whereToZip = Replace(whereToZip, ext, "zip")
     cmdDOS = prog & " " & whereToZip & " " & fileToZip
     result = Shell(cmdDOS, vbNormalFocus)
     Do While isShellRunning(result) = True
         Application.Wait (Now + TimeValue("00:00:01"))
     Loop
     Set oApp = Nothing
     Set fso = Nothing
     BneZipFile = whereToZip
     Exit Function
ErrZippingFile:
      Set fso = Nothing
      AddBneMsg BNE_ERROR, "BneZipFile", "Error Zipping File, Err: " & Err & ": " & error()
 End Function
'
 Public Function BneFileReadBinary(ByVal sFileName As String) As Variant
' Reads a Binary File Byte by Byte and returns its content
      Dim iFileNum As Integer
      Dim lFileLen As Long
      Dim vThisBlock As Byte
      Dim lThisBlock As Long
      Dim vFileData() As Byte
      On Error GoTo ErrFailed
      If Len(Dir$(sFileName)) > 0 And Len(sFileName) > 0 Then
          iFileNum = FreeFile
          Open sFileName For Binary Access Read As #iFileNum
          lFileLen = LOF(iFileNum)
          Do
             lThisBlock = lThisBlock + 1
             Get #iFileNum, , vThisBlock
             If lThisBlock = 1 Then
                 ReDim vFileData(1 To 1)
             Else
                 ReDim Preserve vFileData(1 To lThisBlock)
             End If
             vFileData(lThisBlock) = vThisBlock
          Loop While EOF(iFileNum) = False
          Close iFileNum
          BneFileReadBinary = vFileData
      End If
      Exit Function
ErrFailed:
      Close iFileNum
      AddBneMsg BNE_ERROR, "BneFileReadBinary", "Error " & Err.error & ": " & Err.Description
  End Function
'
  Private Function BneSaveFile(ByVal fileContent As String) As String
' Saves a File in the Temporary Directory using a Random Name
     Dim stream As TextStream
     Dim fileLocation As String
     Dim file As String
  
     Dim fso As FileSystemObject
     Set fso = New FileSystemObject
     file = fso.GetTempName()
     fileLocation = fso.BuildPath(fso.GetSpecialFolder(TemporaryFolder), file)
     Set stream = fso.CreateTextFile(fileLocation, True, False)
     stream.Write (fileContent)
     stream.Close
     Set fso = Nothing
     BneSaveFile = file
 End Function
 Private Function BneEncodeLineLength(ByVal c As Integer) As String
     If c = 0 Then
         BneEncodeLineLength = "`"
     Else
         c = c + 32
         BneEncodeLineLength = Chr(c)
     End If
 End Function
  
 Private Function BneUUEncode(Chars() As Byte) As String
     Dim ReturnString As String ' Builder
     Dim thisPart As String
  
     Dim i As Long
  
     Dim EncodedBytes(4) As Byte
     Dim DecodedBytes(3) As Byte
  
     If UBound(Chars) Mod 3 <> 0 Then
         ReDim Preserve Chars((UBound(Chars) + (UBound(Chars) Mod 3)))
     End If
  
     For i = 1 To UBound(Chars) - 2 Step 3
         DecodedBytes(1) = (Chars(i))
         DecodedBytes(2) = (Chars(i + 1))
         DecodedBytes(3) = (Chars(i + 2))
  
         EncodedBytes(1) = (DecodedBytes(1) \ 4 + 32)
         EncodedBytes(2) = ((DecodedBytes(1) Mod 4) * 16) + (DecodedBytes(2) \ 16 + 32)
         EncodedBytes(3) = ((DecodedBytes(2) Mod 16) * 4) + (DecodedBytes(3) \ 64 + 32)
         EncodedBytes(4) = (DecodedBytes(3) Mod 64) + 32
  
         If (EncodedBytes(1) = 32) Then EncodedBytes(1) = 96
         If (EncodedBytes(2) = 32) Then EncodedBytes(2) = 96
         If (EncodedBytes(3) = 32) Then EncodedBytes(3) = 96
         If (EncodedBytes(4) = 32) Then EncodedBytes(4) = 96
  
         thisPart = thisPart & (Chr(EncodedBytes(1)))
         thisPart = thisPart & (Chr(EncodedBytes(2)))
         thisPart = thisPart & (Chr(EncodedBytes(3)))
         thisPart = thisPart & (Chr(EncodedBytes(4)))
  
         ReturnString = ReturnString & thisPart
         thisPart = ""
  
     Next i
     BneUUEncode = ReturnString
 End Function
  
 Public Function BneEncode(setBytes() As Byte, ByVal filename As String) As String
  
     Dim i As Long
     Dim j As Long
     Dim TotalFullLines As Long
     Dim numBytes As Long
     Dim thisLineChars As Long
     Dim UNIX_RETURN As String
     UNIX_RETURN = Chr(10)
  
     Dim uuEncodedFile As String
     Dim fso As FileSystemObject
     Set fso = New FileSystemObject
     Dim uuEncodedText As TextStream
  
     With fso
         uuEncodedFile = .BuildPath(.GetSpecialFolder(TemporaryFolder), "bne" & .GetTempName())
         uuEncodedFile = Replace(uuEncodedFile, "tmp", "uue")
         Set uuEncodedText = .CreateTextFile(uuEncodedFile)
         uuEncodedText.Write ("begin 644 " & filename)
     End With
   Set fso = Nothing
  
     numBytes = UBound(setBytes)
     TotalFullLines = UBound(setBytes) \ BLOCKSIZE
  
     Dim CharArr(BLOCKSIZE) As Byte
  
     For i = 1 To TotalFullLines
         For j = 1 To BLOCKSIZE
             CharArr(j) = setBytes((i - 1) * BLOCKSIZE + j)
         Next
         uuEncodedText.Write (UNIX_RETURN & BneEncodeLineLength(BLOCKSIZE) & BneUUEncode(CharArr))
     Next
  
     If UBound(setBytes) Mod BLOCKSIZE > 0 Then
         thisLineChars = numBytes - (CLng(TotalFullLines) * BLOCKSIZE)
         ReDim lastCharArray(thisLineChars) As Byte
  
         For j = 1 To thisLineChars
             lastCharArray(j) = setBytes(CLng(TotalFullLines) * BLOCKSIZE + j)
         Next
  
         uuEncodedText.Write (UNIX_RETURN & BneEncodeLineLength(thisLineChars - 1) & BneUUEncode(lastCharArray))
     End If
     uuEncodedText.Write (UNIX_RETURN & BneEncodeLineLength(0))
     uuEncodedText.Write (UNIX_RETURN & "end" & UNIX_RETURN)
     uuEncodedText.Close
  
     BneEncode = uuEncodedFile
 End Function
  
 Public Function BneByteArrayToString(bytArray() As Byte) As String
     Dim sAns As String
     Dim iPos As String
     AddBneMsg BNE_INFORMATION, "BneByteArrayToString", "Start"
     sAns = StrConv(bytArray, vbUnicode)
     iPos = InStr(sAns, Chr(0))
     If iPos > 0 Then sAns = Left(sAns, iPos - 1)
     BneByteArrayToString = sAns
     sAns = vbNullString
     AddBneMsg BNE_INFORMATION, "BneByteArrayToString", "End"
  End Function
 Public Sub BneDeleteFile(ByVal filename As String)
   On Error GoTo ErrDelete
   Err.Clear
   Dim fso As FileSystemObject
   Set fso = New FileSystemObject
   If Len(filename) = 0 Then
     Set fso = Nothing
     Exit Sub
   End If
   If fso.FileExists(filename) Then
     Kill filename
   End If
   Set fso = Nothing
   Exit Sub
ErrDelete:
   AddBneMsg BNE_ERROR, "BneDeleteFile", "Error: " & Err.Number & " " & Err.Description
   Set fso = Nothing
 End Sub
' end of upload compression

Public Function BneIsLinesBlockHintDisplayed(InterfaceCols As Collection) As Boolean
Dim isReporting As String
isReporting = ActiveWorkbook.CustomDocumentProperties("isreporting")
If isReporting = "true" Then
    BneIsLinesBlockHintDisplayed = False
Else
    BneIsLinesBlockHintDisplayed = True
End If
End Function

Public Function IsBneInternalSheet(objSheet As Worksheet) As Boolean
    If objSheet.name = "BneLog" Or objSheet.name = "BneWorkBookProperties" Or objSheet.name = "PopList" Then
        IsBneInternalSheet = True
    Else
        IsBneInternalSheet = False
    End If
End Function

Public Function GetFirstBlockIndex() As Integer
    Dim BlockIdSequence As String
    Dim BlockIndexArr() As String
    
    On Error Resume Next
    Err.Number = 0
    BlockIdSequence = ActiveWorkbook.CustomDocumentProperties("BLOCK_ID_SEQUENCE")
    If (CLng(Err.Number) <> 5) Then
        If Trim(BlockIdSequence) <> "" Then
            BlockIndexArr = Split(BlockIdSequence, ",")
            If UBound(BlockIndexArr) >= 0 Then
                GetFirstBlockIndex = CInt(BlockIndexArr(0))
            Else
                GetFirstBlockIndex = 1
            End If
        Else
                GetFirstBlockIndex = 1
        End If
    Else
        Err.Clear
        GetFirstBlockIndex = 1
    End If
End Function

Public Function GetNextBlockIndex(CurrentIndex As Integer) As Integer
    Dim BlockIdSequence As String
    Dim BlockIndexArr() As String
    Dim BlockIndexPos As Integer
    Dim CurrentIndexStr As String
    
    On Error Resume Next
    Err.Number = 0
    BlockIdSequence = ActiveWorkbook.CustomDocumentProperties("BLOCK_ID_SEQUENCE")
    If (CLng(Err.Number) <> 5) Then
        CurrentIndexStr = CStr(CurrentIndex) & ","
        BlockIndexPos = InStr(BlockIdSequence, CurrentIndexStr)
        BlockIdSequence = Mid(BlockIdSequence, BlockIndexPos + Len(CurrentIndexStr))
        If Trim(BlockIdSequence) <> "" Then
            BlockIndexArr = Split(BlockIdSequence, ",")
            If UBound(BlockIndexArr) >= 0 Then
                GetNextBlockIndex = CInt(BlockIndexArr(0))
            Else
                GetNextBlockIndex = 0
            End If
        Else
                GetNextBlockIndex = 0
        End If
    Else
        Err.Clear
        GetNextBlockIndex = CurrentIndex + 1
    End If
End Function
Attribute VB_Name = "bneMsgLogger"

'+=======================================================================+
'|   Copyright (c) 2014 Oracle Corporation, Redwood Shores, CA, USA      |
'|                      All rights reserved.                             |
'+=======================================================================+
'|  HISTORY                                                              |
'|  28-Aug-2014 poramas created.                                         |
'|  03-Nov-2015 poramas 21845651: TST1213: DIGITAL SIGNATURE IS THROWING |
'|                      ERROR WHEN THE CERTIFICATE IS ENABLED BY         |
'+=======================================================================+
'RCS_ID = $Header :$
'Constants
Global Const LOG_SHEET = "BneLog"
Private Const LOG_LEVEL As String = "TRACE"
Global Const BNE_REQUIRED = 1
Global Const BNE_CRITICAL_ERROR = 2
Global Const BNE_ERROR = 3
Global Const BNE_WARNING = 4
Global Const BNE_INFORMATION = 5
Global Const BNE_DETAIL = 6
Global Const BNE_TRACE = 7
Global Const REQUIRED_DESCRIPTION = "REQUIRED"
Global Const CRITICAL_ERROR_DESCRIPTION = "CRITICAL"
Global Const ERROR_DESCRIPTION = "ERROR"
Global Const WARNING_DESCRIPTION = "WARNING"
Global Const INFORMATION_DESCRIPTION = "INFORMATION"
Global Const DETAIL_DESCRIPTION = "DETAIL"
Global Const TRACE_DESCRIPTION = "TRACE"
'Private Variables
Private lRowCount As Long
Private oLogSheet As Worksheet
Public Sub AddBneMsg(ByVal sType As Integer, ByVal sSource As String, ByVal sDescr As String, Optional ByVal sAction As String)
    'Add a new BneVBAMessage to the array
    If sType <= GetLevel(LOG_LEVEL) Then
        Dim oMsg As BneVBAMessage
        Set oMsg = New BneVBAMessage
        oMsg.msgType = GetLevelDescription(sType)
        oMsg.msgSource = sSource
        oMsg.msgText = sDescr
        oMsg.msgAction = sAction
        'Add this error to the internal list of errors
        On Error GoTo ErrorHandler
        InsertMsg oMsg
    End If
    Exit Sub
ErrorHandler:
    'The sheet was undefined.
    InitMsgs
 On Error Resume Next
    InsertMsg oMsg
End Sub
Public Function GetTraceLevel() As Integer
    'get the current trace level
    GetTraceLevel = GetLevel(LOG_LEVEL)
End Function
Private Sub InsertMsg(oMsg As BneVBAMessage)
    On Error Resume Next
    If oLogSheet Is Nothing Then
        InitMsgs
    End If
    'This method WILL only be called when the sheet is defined
    oLogSheet.Cells(lRowCount + 1, 1).value = Date
    oLogSheet.Cells(lRowCount + 1, 2).value = Time
    oLogSheet.Cells(lRowCount + 1, 3).value = oMsg.msgType
    oLogSheet.Cells(lRowCount + 1, 4).value = Left(oMsg.msgSource, 32767)
    oLogSheet.Cells(lRowCount + 1, 5).value = Left(oMsg.msgText, 32767)
    oLogSheet.Cells(lRowCount + 1, 6).value = Left(oMsg.msgAction, 32767)
    lRowCount = lRowCount + 1
End Sub
Private Sub InitMsgs()
    Dim oWorksheet As Worksheet
    On Error Resume Next
    Set oWorksheet = Worksheets(LOG_SHEET)
    If oWorksheet Is Nothing Then
        'Add a sheet and Rename it to LOG_SHEET
        Set oWorksheet = Worksheets.add
        oWorksheet.name = LOG_SHEET
        oWorksheet.Visible = xlSheetVeryHidden
        oWorksheet.Columns.AutoFit
    Else
        'We need to remove all existing message rows
        'Worksheet was found and hence is referenced using oWorksheet
        If GetLevel(LOG_LEVEL) < BNE_TRACE Then
           oWorksheet.Cells.Clear
           lRowCount = 0
        End If
    End If
    'Set the row count to 0, set the sheet reference
    Set oLogSheet = oWorksheet
    InitMsgHeadings
    lRowCount = oWorksheet.UsedRange.Rows.count
End Sub
Public Sub ResetMsgs()
'Reset the sheet to nothing
    On Error Resume Next
    Dim oWorksheet As Worksheet
    Set oWorksheet = Worksheets(LOG_SHEET)
    If Not oWorksheet Is Nothing Then
      If GetLevel(LOG_LEVEL) < BNE_TRACE Then
           oWorksheet.Cells.Clear
           lRowCount = 0
           InitMsgHeadings
      End If
    End If
End Sub
Private Sub InitMsgHeadings()
    Dim oLogSheet As Worksheet
    Set oLogSheet = Worksheets(LOG_SHEET)
    oLogSheet.Cells(lRowCount + 1, 1).value = "Date"
    oLogSheet.Cells(lRowCount + 1, 2).value = "Time"
    oLogSheet.Cells(lRowCount + 1, 3).value = "Log Level"
    oLogSheet.Cells(lRowCount + 1, 4).value = "Source"
    oLogSheet.Cells(lRowCount + 1, 5).value = "Description"
    oLogSheet.Cells(lRowCount + 1, 6).value = "Action"
    oLogSheet.Cells(lRowCount + 1, 1).EntireColumn.ColumnWidth = 12
    oLogSheet.Cells(lRowCount + 1, 2).EntireColumn.ColumnWidth = 12
    oLogSheet.Cells(lRowCount + 1, 4).EntireColumn.ColumnWidth = 50
    oLogSheet.Cells(lRowCount + 1, 5).EntireColumn.ColumnWidth = 30
    lRowCount = lRowCount + 1
End Sub
Public Function GetMsgItem(iIndex As Long) As BneVBAMessage
    'Return a particular message item
    Dim oMsg As New BneVBAMessage
    On Error Resume Next
    If iIndex <= lRowCount Then
        'Get Data
        oMsg.msgType = oLogSheet.Cells(iIndex, 3).value
        oMsg.msgSource = oLogSheet.Cells(iIndex, 4).value
        oMsg.msgText = oLogSheet.Cells(iIndex, 5).value
        oMsg.msgAction = oLogSheet.Cells(iIndex, 6).value
        Set GetMsgItem = oMsg
    Else
        Set GetMsgItem = Nothing
    End If
End Function
Public Function GetMsgCount() As Integer
    'Return the number of errors that have occurred to this object
    GetMsgCount = lRowCount
End Function
Public Function GetMsgTypeCount(sType As String) As Long
    'Return the number of errors of the specified type
    Dim iCount As Long
    Dim iMsgCount As Long
    Dim sMsgType As String
    iMsgCount = 0
    On Error GoTo ErrorHandler
    For iCount = 1 To GetMsgCount
        sMsgType = oLogSheet.Cells(iCount, 3).value
        If sMsgType = sType Then
            iMsgCount = iMsgCount + 1
        End If
    Next iCount
    GetMsgTypeCount = iMsgCount
    Exit Function
ErrorHandler:
    GetMsgTypeCount = 0
End Function
Public Function DumpMsgs() As String
    Dim iCount As Long
    Dim sMsgs As String
    Dim oMsg As BneVBAMessage
    sMsgs = ""
    On Error GoTo ErrorHandler
    For iCount = 2 To GetMsgCount
        Set oMsg = GetMsgItem(iCount)
        sMsgs = sMsgs & oMsg.toString & vbCrLf
    Next iCount
    DumpMsgs = sMsgs
    Exit Function
ErrorHandler:
    DumpMsgs = ""
End Function
Private Function GetLevelDescription(ByVal level As Integer) As String
On Error Resume Next
 
    Select Case level
        Case BNE_REQUIRED
            GetLevelDescription = REQUIRED_DESCRIPTION
        Case BNE_CRITICAL_ERROR
            GetLevelDescription = CRITICAL_ERROR_DESCRIPTION
        Case BNE_ERROR
            GetLevelDescription = ERROR_DESCRIPTION
        Case BNE_WARNING
            GetLevelDescription = WARNING_DESCRIPTION
        Case BNE_INFORMATION
            GetLevelDescription = INFORMATION_DESCRIPTION
        Case BNE_DETAIL
            GetLevelDescription = DETAIL_DESCRIPTION
        Case BNE_TRACE
            GetLevelDescription = TRACE_DESCRIPTION
        Case Else
            GetLevelDescription = "Unknown level"
    End Select
End Function
 
Private Function GetLevel(ByVal levelDesc As String) As Integer
On Error Resume Next
 
    Select Case levelDesc
        Case REQUIRED_DESCRIPTION
            GetLevel = BNE_REQUIRED
        Case CRITICAL_ERROR_DESCRIPTION
            GetLevel = BNE_CRITICAL_ERROR
        Case ERROR_DESCRIPTION
            GetLevel = BNE_ERROR
        Case WARNING_DESCRIPTION
            GetLevel = BNE_WARNING
        Case INFORMATION_DESCRIPTION
            GetLevel = BNE_INFORMATION
        Case DETAIL_DESCRIPTION
            GetLevel = BNE_DETAIL
        Case TRACE_DESCRIPTION
            GetLevel = BNE_TRACE
        Case Else
            GetLevel = BNE_ERROR
    End Select
End Function
 

Attribute VB_Name = "bneReadOnlyUtils"

'+=======================================================================+
'|   Copyright (c) 2014 Oracle Corporation, Redwood Shores, CA, USA      |
'|                      All rights reserved.                             |
'+=======================================================================+
'|  HISTORY                                                              |
'|  28-Aug-2014 poramas created.                                         |
'+=======================================================================+
'RCS_ID = $Header :$
'============================================================================================================
'MODULE:      bneReadOnlyUtils
'DESCRIPTION: All read only regions for a given worksheet are stored in one of two named ranges.
'             The first is a *static* range identifying those cells that are to remain read-only
'             for the lifetime of the document. The second is a *dynamic* range identifying cells
'             that have been added and that may be removed during the lifetime of the document.
'             This module provides an interface to access and manipulate these read only regions for
'             the supplied worksheet.
'============================================================================================================
Option Explicit
Option Base 1
Const STATIC_RANGE_NAME = "STATIC_READ_ONLY_REGIONS"
Const DYNAMIC_RANGE_NAME = "DYNAMIC_READ_ONLY_REGIONS"
Public Sub BneApplyReadOnlyStyle(objRegion As Range)
    'Dim objStyleSheet As BneStyleSheet
    Dim objStyle As BneStyle
'    Set objStyleSheet = New BneStyleSheet
 '   Set objStyle = objStyleSheet.getStyle("READ_ONLY")
    If Not objStyle Is Nothing Then
        objStyle.applyStyle objRegion
    End If
End Sub
Public Sub BneAddStaticReadOnly(ByVal objNewRegion As Range, objSheet As Worksheet)
'     If Error occurs then READ_ONLY_REGION is not defined.
'     Resume Next adds original newRegion.
    On Error Resume Next
    'Dim objStyleSheet As BneStyleSheet
    Dim objStyle As BneStyle
    Set objNewRegion = Application.Union(Range(objSheet.Names(STATIC_RANGE_NAME).RefersTo), objNewRegion)
    objSheet.Names.add name:=STATIC_RANGE_NAME, RefersTo:=objNewRegion
    BneApplyReadOnlyStyle objNewRegion
End Sub
Public Sub BneAddDynamicReadOnly(ByVal objNewRegion As Range, objSheet As Worksheet)
'     If Error occurs then READ_ONLY_REGION is not defined.
'     Resume Next adds original newRegion.
    On Error Resume Next
   ' Dim objStyleSheet As BneStyleSheet
    Dim objStyle As BneStyle
    Set objNewRegion = Application.Union(Range(objSheet.Names(DYNAMIC_RANGE_NAME).RefersTo), objNewRegion)
    objSheet.Names.add name:=DYNAMIC_RANGE_NAME, RefersTo:=objNewRegion
    BneApplyReadOnlyStyle objNewRegion
End Sub
Public Sub BneRemoveDynamicReadOnly(ByVal objOldRegion As Range, objSheet As Worksheet)
    On Error GoTo error
    Dim a_objSelAreas() As Range
    Dim intNumAreas As Integer
    Dim i, j, k As Integer
    Dim objTempRange, objNewRegion, objReadOnly, objStaticReadOnly As Range
    'Dim objStyleSheet As BneStyleSheet
    Dim objStyle As BneStyle
    Set objNewRegion = Nothing
'    If error occurs there is no DYNAMIC_READ_ONLY_REGION -> EXIT
    Set objReadOnly = Range(objSheet.Names(DYNAMIC_RANGE_NAME).RefersTo)
    intNumAreas = objReadOnly.Areas.count
    ReDim a_objSelAreas(1 To intNumAreas)
    For i = 1 To intNumAreas
        Set a_objSelAreas(i) = objReadOnly.Areas(i)
    Next
    For i = 1 To intNumAreas
        For j = 1 To a_objSelAreas(i).Columns.count
            For k = 1 To a_objSelAreas(i).Rows.count
                Set objTempRange = a_objSelAreas(i).Rows(k).Columns(j)
                If Application.Intersect(objTempRange, objOldRegion) Is Nothing Then
                    If objNewRegion Is Nothing Then
                        Set objNewRegion = objTempRange
                    Else
                        Set objNewRegion = Application.Union(objNewRegion, objTempRange)
                    End If
                End If
            Next
        Next
    Next
    If objNewRegion Is Nothing Then
        objSheet.Names(DYNAMIC_RANGE_NAME).Delete
    Else
        objSheet.Names.add name:=DYNAMIC_RANGE_NAME, RefersTo:=objNewRegion
    End If
'    Set objStyleSheet = New BneStyleSheet
'    Set objStyle = objStyleSheet.getStyle("DATA")
    If Not objStyle Is Nothing Then
        objStyle.applyStyle objOldRegion
    End If
'    Set objStyle = objStyleSheet.getStyle("READ_ONLY")
'    If error occurs there is no STATIC_READ_ONLY_REGION -> EXIT
    Set objStaticReadOnly = Application.Intersect(objOldRegion, Range(objSheet.Names(STATIC_RANGE_NAME).RefersTo))
    If Not objStyle Is Nothing Then
        objStyle.applyStyle objStaticReadOnly
    End If
error:
End Sub
Public Function BneReadOnlyExists(objSheet As Worksheet) As Boolean
'     If Error occurs then READ_ONLY_REGION is not defined.
'     Resume Next will return False.
    On Error Resume Next
    Dim staticNameCheck As Range
    Set staticNameCheck = Nothing
    Set staticNameCheck = objSheet.Names(STATIC_RANGE_NAME).RefersToRange
    Dim dynamicNameCheck As Range
    Set dynamicNameCheck = Nothing
    Set dynamicNameCheck = objSheet.Names(DYNAMIC_RANGE_NAME).RefersToRange
    If staticNameCheck Is Nothing Then
        If dynamicNameCheck Is Nothing Then
            BneReadOnlyExists = False
        Else
            BneReadOnlyExists = True
        End If
    Else
        BneReadOnlyExists = True
    End If
End Function
Public Sub BneEmptyDynamicReadOnly(objSheet As Worksheet)
    On Error GoTo error
    'Dim objStyleSheet As BneStyleSheet
    Dim objStyle As BneStyle
    Dim objOldRegion, objStaticReadOnly As Range
'    If error occurs, there is no DYNAMIC_READ_ONLY_REGION -> EXIT
    Set objOldRegion = Range(objSheet.Names(DYNAMIC_RANGE_NAME).RefersTo)
    objSheet.Names(DYNAMIC_RANGE_NAME).Delete
'    Set objStyleSheet = New BneStyleSheet
'    Set objStyle = objStyleSheet.getStyle("DATA")
    If Not objStyle Is Nothing Then
        objStyle.applyStyle objOldRegion
    End If
'    Set objStyle = objStyleSheet.getStyle("READ_ONLY")
'   If error occurs, there is no STATIC_READ_ONLY_REGION -> EXIT
    Set objStaticReadOnly = Application.Intersect(objOldRegion, Range(objSheet.Names(STATIC_RANGE_NAME).RefersTo))
    If Not objStyle Is Nothing Then
        objStyle.applyStyle objStaticReadOnly
    End If
error:
End Sub
Public Function BneIsReadOnly(ByVal objTarget As Range, objSheet As Worksheet) As Boolean
'     If Error occurs then READ_ONLY_REGIONS is not defined.
'     Resume Next will return False.
    On Error Resume Next
    Dim staticNameCheck As Range
    Set staticNameCheck = Nothing
    Set staticNameCheck = objSheet.Names(STATIC_RANGE_NAME).RefersToRange
    Dim dynamicNameCheck As Range
    Set dynamicNameCheck = Nothing
    Set dynamicNameCheck = objSheet.Names(DYNAMIC_RANGE_NAME).RefersToRange
    If Application.Intersect(objTarget, staticNameCheck) Is Nothing Then
        If Application.Intersect(objTarget, dynamicNameCheck) Is Nothing Then
            BneIsReadOnly = False
        Else
            BneIsReadOnly = True
        End If
    Else
        BneIsReadOnly = True
    End If
End Function

'Public Function BneIsReadOnly2(ByVal objTarget As Range, objSheet As Worksheet, sheetIndex As String) As Boolean
''     If Error occurs then READ_ONLY_REGIONS is not defined.
''     Resume Next will return False.
'    On Error Resume Next
'    Dim staticNameCheck As Range
'    Set staticNameCheck = Nothing
'    Set staticNameCheck = objSheet.Names(STATIC_RANGE_NAME & sheetIndex).RefersToRange
'    Dim dynamicNameCheck As Range
'    Set dynamicNameCheck = Nothing
'    Set dynamicNameCheck = objSheet.Names(DYNAMIC_RANGE_NAME & sheetIndex).RefersToRange
'    If Application.Intersect(objTarget, staticNameCheck) Is Nothing Then
'        If Application.Intersect(objTarget, dynamicNameCheck) Is Nothing Then
'            BneIsReadOnly2 = False
'        Else
'            BneIsReadOnly2 = True
'        End If
'    Else
'        BneIsReadOnly2 = True
'    End If
'End Function

Attribute VB_Name = "bneRibbonUtils"

'+=======================================================================+
'|   Copyright (c) 2014 Oracle Corporation, Redwood Shores, CA, USA      |
'|                      All rights reserved.                             |
'+=======================================================================+
'|  HISTORY                                                              |
'|  28-Aug-2014 poramas created.                                         |
'|  23-Apr-2015 poramas 20900887: TST1225:SHOW FILTERS IS NOT WORKING IN |
'|                                                      OOXML DOCUMENT   |
'|  12-May-2015 zhengxwa 21031258: TST1225:MULTIPLE DOWNLOADING IN MULTI-|
'|                       SHEET DOCUMENT CAUSES EXCEL 2010 TO DIE         |
'|  27-May-2015 poramas 21101621: TST1225:MODIFY GRAPH TYPE IS NOT SHOWN |
'|                      WHEN GRAPH ALL IS INVOKED IN OOXML               |
'|  05-Oct-2016 poramas 24483289: CUSTOM MENU ADDITIONS NOT WORKING IN   |
'|                      RIBBON MENU                                      |
'+=======================================================================+
'RCS_ID = $Header :$
Option Explicit
Option Base 1
Dim m_Ribbon As IRibbonUI
Private Function FetchFromNames(strName As String) As String
    On Error Resume Next
    Dim objName As name
    Set objName = ThisWorkbook.Names(strName)
    If objName Is Nothing Then
        FetchFromNames = ""
    Else
        FetchFromNames = Mid(objName.RefersTo, 2)
    End If
End Function
Private Function SaveToNames(strName As String, ByRef value)
    With ThisWorkbook
        On Error Resume Next
        .Names(strName).Delete
        On Error GoTo 0
        .Names.add strName, value
    End With
End Function
Private Function SaveRibbon(ribbon As IRibbonUI)
    #If VBA7 Then
        #If Win64 Then
            Dim lngRibPtr As LongPtr
        #Else
            Dim lngRibPtr As Long
        #End If
    #Else
        Dim lngRibPtr As Long
    #End If
    lngRibPtr = ObjPtr(ribbon)
    SaveToNames "RIBBON_OBJECT_POINTER", lngRibPtr
End Function
Private Function FetchRibbon() As Object
    Dim objRibbon As Object
    Dim strRibbonPtr As String
    strRibbonPtr = FetchFromNames("RIBBON_OBJECT_POINTER")
    #If VBA7 And Win64 Then
        Dim X As LongPtr
        X = CLngPtr(strRibbonPtr)
    #Else
        Dim X As Long
        X = CLng(strRibbonPtr)
    #End If
    CopyMemory objRibbon, X, Len(X)
    Set FetchRibbon = objRibbon
    CopyMemory objRibbon, 0&, Len(X)
    Set objRibbon = Nothing
End Function
Public Function RefreshRibbon()
    On Error Resume Next
    If m_Ribbon Is Nothing Then
        Set m_Ribbon = FetchRibbon
    End If
    If Not m_Ribbon Is Nothing Then
        m_Ribbon.Invalidate
    End If
End Function
Public Function setRibbonCreateSuccess(value As Boolean)
    SaveToNames "IS_RIBBON_CREATE_SUCCESS", value
End Function
Public Function isRibbonCreateSuccess() As Boolean
    On Error Resume Next
    Dim strValue As String
    strValue = FetchFromNames("IS_RIBBON_CREATE_SUCCESS")
    If strValue = "" Then
        isRibbonCreateSuccess = False
    Else
        isRibbonCreateSuccess = CBool(strValue)
    End If
End Function
'Public Function RemoveRibbonProterties()
'    RemoveFromNames "RIBBON_OBJECT_POINTER"
'    RemoveFromNames "IS_RIBBON_CREATE_SUCCESS"
'End Function
''Callback for customUI.onLoad
Public Sub rxcustomUI_onLoad(ribbon As IRibbonUI)
    On Error Resume Next
    Set m_Ribbon = ribbon
    SaveRibbon m_Ribbon
    
    bneRibbonUtils.setRibbonCreateSuccess True
    bneRibbonUtils.setShowMainGroup True
    bneRibbonUtils.setShowGraphGroup False
'
'    Dim objWorkSheet As Worksheet
'    Set objWorkSheet = FindWorkingSheet(ThisWorkbook)
'    objWorkSheet.Activate
'    Application.Run objWorkSheet.CodeName & ".BneRemoveOracleMenu"
'    setRibbonCreateSuccess True
'    'Application.Run objWorkSheet.CodeName & ".BneCreateOracleMenu"
'    ThisWorkbook.Save
End Sub

Public Function isShowRibbon() As Boolean
    On Error Resume Next
    isShowRibbon = isShowMainGroup Or isShowGraphGroup
End Function
Public Function setShowMainGroup(value As Boolean)
    SaveToNames "IS_RIBBON_SHOW_MAIN_GROUP", value
End Function
Public Function isShowMainGroup() As Boolean
On Error Resume Next
    Dim strValue As String
    strValue = FetchFromNames("IS_RIBBON_SHOW_MAIN_GROUP")
    If strValue = "" Then
        isShowMainGroup = False
    Else
        isShowMainGroup = CBool(strValue)
    End If
End Function
Public Function EnableRibbonMainGroup()
    setShowMainGroup True
    RefreshRibbon
End Function
Public Function DisableRibbonMainGroup()
    setShowMainGroup False
    RefreshRibbon
End Function
Public Function setShowGraphGroup(value As Boolean)
    SaveToNames "IS_RIBBON_SHOW_GRAPH_GROUP", value
End Function
Public Function isShowGraphGroup() As Boolean
    On Error Resume Next
    Dim strValue As String
    strValue = FetchFromNames("IS_RIBBON_SHOW_GRAPH_GROUP")
    If strValue = "" Then
        isShowGraphGroup = False
    Else
        isShowGraphGroup = CBool(strValue)
    End If
End Function
Public Function EnableRibbonGraphGroup()
    setShowGraphGroup True
    RefreshRibbon
End Function
Public Function DisableRibbonGraphGroup()
    setShowGraphGroup False
    RefreshRibbon
End Function
'Public Function getBneRibbonSheet() As Worksheet
'    Dim oWorksheet As Worksheet
'    On Error Resume Next
'    Set oWorksheet = Worksheets("BneRibbonProperties")
'    If oWorksheet Is Nothing Then
'        'Add a sheet and Rename it to BneRibbonProperties
'        Set oWorksheet = ThisWorkbook.Worksheets.add
'        oWorksheet.name = "BneRibbonProperties"
'        oWorksheet.Visible = xlSheetVeryHidden
'        oWorksheet.Columns.AutoFit
'    End If
'    Set getBneRibbonSheet = oWorksheet
'End Function
'Public Sub setBneRibbon(objBneRibbon As Object)
'    Dim oWorksheet As Worksheet
'    Dim oImagesCollect As Collection
'    Dim iImageRowCount As Long
'    Dim iCount As Long
'    Set oWorksheet = getBneRibbonSheet
'    oWorksheet.Cells(1, 1).value = "customuixml"
'    oWorksheet.Cells(1, 2).value = objBneRibbon.customuixml
'    oWorksheet.Cells(2, 1).value = "customuiresxml"
'    oWorksheet.Cells(2, 2).value = objBneRibbon.customuiresxml
'    oWorksheet.Cells(3, 1).value = "customuirelsxml"
'    oWorksheet.Cells(3, 2).value = objBneRibbon.customuirelsxml
'    oWorksheet.Cells(4, 1).value = "customuicontentxml"
'    oWorksheet.Cells(4, 2).value = objBneRibbon.customuicontentxml
'    If Not objBneRibbon.customuiImages Is Nothing Then
'        Set oImagesCollect = objBneRibbon.customuiImages
'        iImageRowCount = 5
'        For iCount = 1 To oImagesCollect.count
'            oWorksheet.Cells(iImageRowCount, 1).value = oImagesCollect.Item(iCount).imageId
'            oWorksheet.Cells(iImageRowCount, 2).value = oImagesCollect.Item(iCount).imageURL
'            iImageRowCount = iImageRowCount + 1
'        Next
'    End If
'End Sub
'Public Function getBneRibbon() As BneRibbon
'    Dim oWorksheet As Worksheet
'    Dim objBneRibbon As New BneRibbon
'    Dim iImageRowCount As Long
'    Set oWorksheet = getBneRibbonSheet
'    objBneRibbon.customuixml = oWorksheet.Cells(1, 2).value
'    objBneRibbon.customuiresxml = oWorksheet.Cells(2, 2).value
'    objBneRibbon.customuirelsxml = oWorksheet.Cells(3, 2).value
'    objBneRibbon.customuicontentxml = oWorksheet.Cells(4, 2).value
'    Dim imageId As String
'    Dim imageURL As String
'    Dim iTotalCount As Long
'    iTotalCount = oWorksheet.UsedRange.Rows.count
'    For iImageRowCount = 5 To iTotalCount
'        imageId = oWorksheet.Cells(iImageRowCount, 1).value
'        imageURL = oWorksheet.Cells(iImageRowCount, 2).value
'        If Not imageId = "" Then
'            objBneRibbon.addUIImage oWorksheet.Cells(iImageRowCount, 1).value, oWorksheet.Cells(iImageRowCount, 2).value
'        End If
'    Next
'    objBneRibbon.isCreateCustomUI = True
'    Set getBneRibbon = objBneRibbon
'End Function

Public Function getShowRibbon() As Boolean
    getShowRibbon = isShowRibbon
End Function

Public Sub mnuOracle_BNE_ORACLE_RIBBON_Visible(control As IRibbonControl, ByRef ReturnValue)
     ReturnValue = getShowRibbon
End Sub
Public Sub mnuOracle_BNE_DATA_GRAPHS_GRP_Visible(control As IRibbonControl, ByRef ReturnValue)
     ReturnValue = isShowMainGroup
End Sub
Public Sub mnuOracle_LOV_Click(control As IRibbonControl)
     Application.Run "ThisWorkbook.BneDBLClick"
End Sub
Public Sub mnuOracle_GRAPH_ALL_Click(control As IRibbonControl)
     Application.Run "ThisWorkbook.BneGraphsAll"
End Sub
Public Sub mnuOracle_GRAPH_SELECTION_Click(control As IRibbonControl)
     Application.Run "ThisWorkbook.BneGraphsSelection"
End Sub
Public Sub mnuOracle_GRAPH_VARIATION_Click(control As IRibbonControl)
     Application.Run "ThisWorkbook.BneGraphsVariation"
End Sub
Public Sub mnuOracle_BNE_EDITING_GRP_Visible(control As IRibbonControl, ByRef ReturnValue)
     ReturnValue = isShowMainGroup
End Sub
Public Sub mnuOracle_SHOWHIDEFILTERS_Click(control As IRibbonControl, ByRef ReturnValue)
      Application.Run "ThisWorkbook.BneShowHideFilters", ReturnValue
      RefreshRibbon
End Sub
Public Sub mnuOracle_RESET_FILTERS_Enable(control As IRibbonControl, ByRef ReturnValue)
     On Error Resume Next
     If isShowMainGroup Then
        ReturnValue = ThisWorkbook.IsEnabled_231_RESET_FILTERS
     Else
        ReturnValue = False
     End If
End Sub
Public Sub mnuOracle_RESET_FILTERS_Click(control As IRibbonControl)
     Application.Run "ThisWorkbook.BneResetFilters"
End Sub
Public Sub mnuOracle_BNE_UPLOAD_DOWNLOAD_GRP_Visible(control As IRibbonControl, ByRef ReturnValue)
     ReturnValue = isShowMainGroup
End Sub
Public Sub mnuOracle_DOWNLOAD_Visible(control As IRibbonControl, ByRef ReturnValue)
     ReturnValue = isShowMainGroup
End Sub
Public Sub mnuOracle_UPLOAD_Visible(control As IRibbonControl, ByRef ReturnValue)
     On Error Resume Next
     If isShowMainGroup Then
        ReturnValue = ThisWorkbook.IsVisible_231_UPLOAD
     Else
        ReturnValue = False
     End If
End Sub
Public Sub mnuOracle_UPLOAD_Click(control As IRibbonControl)
     Application.Run "ThisWorkbook.BneUploadDocument"
End Sub
Public Sub mnuOracle_UPLOADALL_Visible(control As IRibbonControl, ByRef ReturnValue)
     On Error Resume Next
     If isShowMainGroup Then
        ReturnValue = ThisWorkbook.IsVisible_231_UPLOADALL
     Else
        ReturnValue = False
     End If
End Sub
Public Sub mnuOracle_UPLOADALL_Click(control As IRibbonControl)
     Application.Run "ThisWorkbook.BneUploadAll"
End Sub
Public Sub mnuOracle_DOWNLOAD_Click(control As IRibbonControl)
     Application.Run "ThisWorkbook.BneReDownload"
End Sub
Public Sub mnuOracle_BNE_ROLE_GRP_Visible(control As IRibbonControl, ByRef ReturnValue)
     ReturnValue = isShowMainGroup
End Sub
Public Sub mnuOracle_SWITCHRESP_Click(control As IRibbonControl)
     Application.Run "'" & "ThisWorkbook.BneSwitchResponsibility" & "'"
End Sub
Public Sub mnuOracle_BNE_MONITOR_GRP_Visible(control As IRibbonControl, ByRef ReturnValue)
     ReturnValue = isShowMainGroup
End Sub
Public Sub mnuOracle_MONITOR_Click(control As IRibbonControl)
     Application.Run "'" & "ThisWorkbook.BneMonitor" & "'"
End Sub
Public Sub mnuOracle_BNE_BUGET_GRP_Visible(control As IRibbonControl, ByRef ReturnValue)
     ReturnValue = isShowMainGroup
End Sub
Public Sub mnuOracle_BNE_SETTING_GRP_Visible(control As IRibbonControl, ByRef ReturnValue)
     ReturnValue = isShowMainGroup
End Sub
Public Sub mnuOracle_SETTINGS_Visible(control As IRibbonControl, ByRef ReturnValue)
     ReturnValue = isShowMainGroup
End Sub
Public Sub mnuOracle_SETTINGS_Click(control As IRibbonControl)
     Application.Run "ThisWorkbook.BneSettings"
End Sub

Public Sub mnuOracle_BUDGET_NOTE_ACCOUNT_Click(control As IRibbonControl)
     Application.Run "ThisWorkbook.GLAddAccountNote"
End Sub
Public Sub mnuOracle_BUDGET_NOTE_AMT_Click(control As IRibbonControl)
     Application.Run "ThisWorkbook.GLAddAmountNote"
End Sub
Public Sub mnuOracle_BUDGET_NOTE_BUDGET_Click(control As IRibbonControl)
     Application.Run "ThisWorkbook.GLAddBudgetNote"
End Sub
Public Function mnuOracle_BNE_SEPARATE_GRAPH_GRP_Visible(control As IRibbonControl, ByRef ReturnValue)
    ReturnValue = isShowGraphGroup
End Function
Public Sub mnuOracle_BNE_GRAPH_TYPE_BUTTON_Click(control As IRibbonControl)
    Application.Run "ThisWorkbook.BneDisplayGraphType"
End Sub
Public Sub mnuOracle_BNE_CUSTOM_GRP_Visible(control As IRibbonControl, ByRef ReturnValue)
     ReturnValue = isShowMainGroup
End Sub

' InQuest injected base64 decoded content
' jwez
' jwez
' jwez
' PA}[`{$r
' Kjx.j
' {-j{l
' +bjX
' x)br
' zj/x<

INQUEST-PP=macro
