Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
' ----

Private Sub Worksheet_Change(ByVal Target As Range)
' Value(s) Changed
    Application.EnableEvents = False    ' To Prevent _SelectionChange from Responding to Changing Message or Target
    Application.StatusBar = "WkSh Change: WkShNm:(" & Target.Worksheet.Name & "), RngTrgt:(" & Target.Address & ")"
'Stop
    LPC_WkShChanged Target
    If (gstrErrMsg <> "" Or gynWrn) Then
        Sleep 2
    End If
'Stop
    Application.EnableEvents = True     ' ReEnable Events
    If (gstrNextCellPC <> "") Then
        gxlWkShPC.Range(gstrNextCellPC).Select
    End If
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
' Selection Changed
    Application.EnableEvents = False    ' To Prevent _SelectionChange from Responding to Changing Message or Target
    Application.StatusBar = "WkSh Selection Change: WkShNm:(" & Target.Worksheet.Name & "), RngTrgt:(" & Target.Address & ")"
'Stop
    LPC_WkShSelChgd Target
    If (gstrErrMsg <> "" Or gynWrn) Then
        Sleep 2
    End If
    Application.EnableEvents = True     ' ReEnable Events
    If ((gstrNextCellPC <> "") And gynNextDtaCellPC) Then
        gxlWkShPC.Range(gstrNextCellPC).Select
    End If
End Sub
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
' ----

Private Sub Workbook_Open()
' Workbook Opened -> Set WorkBook
    Application.DisplayStatusBar = True
    Application.StatusBar = "Workbook Openned"
    ResetWkBk
    If (gynsVndrDta) Then
        ' Initialise Vendor Specific Data
        IntinVndrLPC gxlWkBk.Worksheets("Price Change")
    Else
        ' Ready for Input of Data in [Price Change]
        gxlWkBk.Worksheets("Price Change").Activate
        Workbook_SheetActivate gxlWkBk.Worksheets("Price Change")
    End If
End Sub

Private Sub Workbook_SheetActivate(ByVal Sh As Object)
' Sheet Activated -> determine action
    Dim strShNm As String

    SetConfig
    strShNm = Sh.Name
    Application.StatusBar = "WkBk Sheet Activated:(" & strShNm & ")"
    If (strShNm Like "*Price Change*") Then
        SetClrWkShLPC Sh, True
        Sh.Columns("Z:AA").Hidden = (Not gynIsDev)
        gstrNextCellPC = FirstEmptyDataCell(gxlWkShPC, "LPC")
        gxlWkShPC.Range(gstrNextCellPC).Select
    Else
        ' Nothing for now
    End If
End Sub

Attribute VB_Name = "modDOS"
Option Explicit
' ----

Public Function FileName(strPn As String) As String
' Return Filename given Pathname
    Dim lngDPos As Long
    
    ' Find Last occurrence of "\" in Pathname
    lngDPos = InStrRev(strPn, "\")
    FileName = IIf((lngDPos = 0), strPn, Mid(strPn, lngDPos + 1))  ' Path (if no "\") or Filename
End Function

Public Function FileType(strPn As String) As String
' Return File Type (the Suffix of Filename, or Pathname) e.g. "xlsx", given Pathname
    Dim lngDPos As Long

    ' Find Last occurrence of "." in Pathname
    lngDPos = InStrRev(strPn, ".")
    FileType = IIf((lngDPos = 0), "", Mid(strPn, lngDPos + 1))  ' Empty String (if No Extension) or Extension
End Function

Public Sub CheckMkDir(strFldrPn As String)
' Check, and Make (if needed), given Folder Pathname
    If (Dir(strFldrPn, vbDirectory) = "") Then
        ' Doesn't Exist -> Create Folder
        MkDir strFldrPn
    End If
End Sub

Public Function DirName(strPn As String) As String
' Return Directory given Pathname
    Dim lngDPos As Long
    
    ' Find Last occurrence of "\" in Pathname
    lngDPos = InStrRev(strPn, "\")
    DirName = IIf((lngDPos = 0), strPn, Left(strPn, lngDPos))  ' Path (if no "\") or Folder (without trailing "\")
End Function

Public Function BaseName(strPn As String) As String
    Dim strFn As String
    Dim lngDPos As Long
    
    strFn = FileName(strPn)
    ' Find Last occurrence of "." in Pathname
    lngDPos = InStrRev(strFn, ".")
    BaseName = IIf((lngDPos = 0), strFn, Left(strFn, lngDPos - 1))  ' Filename (if no ".") or Basename
End Function

Public Sub CopyFile(strSrcPn As String, strDstPn As String)
' Copy Source Pathname to Destination Pathname
    Dim intRC As Integer

    ' Delete Destination
    intRC = DelFile(strDstPn)
    On Error Resume Next
    FileCopy strSrcPn, strDstPn
    ' Ignore Errors
    Err.Clear
End Sub

Public Sub MoveFile(strSrcPn As String, strDstPn As String)
' Move Source Pathname to Destination Pathname
    Dim intRC As Integer

    ' Delete Destination
    intRC = DelFile(strDstPn)
    On Error Resume Next
    FileCopy strSrcPn, strDstPn
    ' Delete Source
    intRC = DelFile(strSrcPn)
    ' Ignore Errors
    Err.Clear
End Sub

Public Function DelFile(varPath As Variant) As Integer
' Delete given Pathname
    Dim strPath As String
    
    If (IsNull(varPath)) Then
        DelFile = 0
        Exit Function
    End If
    On Error Resume Next
    strPath = CStr(varPath)
    Err.Clear
    Kill strPath
    If (Err.Number <> 0) Then
        Select Case Err.Number
        Case 52:    ' Bad File Name or Number
            DelFile = -52
        Case 53:    ' File Not Found
            DelFile = 1
        Case 55:    ' File Already Open
            DelFile = -55
        Case 75:    ' Path/File Access Error
            DelFile = -75
        Case 76:    ' Path Not Found
            DelFile = -76
        Case Else:  ' Other Error
            DelFile = -(Err.Number)
            ' MsgBox "Err: (" & Err.Number & "): " & Err.Description, vbExclamation
        End Select
    Else
        DelFile = 0
    End If
    Err.Clear
End Function

Public Function FileExists(varPath As Variant) As Boolean
' Check for File Existence.  Return True if it exists else False
    Dim strPath As String
    
    If (IsNull(varPath)) Then
        FileExists = False
        Exit Function
    End If
    strPath = CStr(varPath)
    FileExists = (Dir(strPath) <> "")
End Function
Attribute VB_Name = "modDates"
Option Explicit
' ----
' ** Microsoft VBScript Regular Expressions 5.5 - Doesn't exist on Macs! :-(
'    Separate code for Parsing Dates added Version 180620
' ----

Public Function LeapYear(varY As Variant) As Boolean
' Determine if Year is a Leap Year, given Year
    Dim intY As Integer
    
    If (IsNull(varY)) Then
        intY = 0
    Else
        If (IsNumeric(varY)) Then
            intY = CInt(varY)
        Else
            intY = 0
        End If
    End If
    LeapYear = ((intY Mod 4 = 0 And intY Mod 100 <> 0) Or intY Mod 400 = 0)
End Function

Public Function MDays(varY As Variant, varM As Variant) As Integer
' Determine number of days in a Month, given Year and Month
    Dim intM As Integer
    
    If (IsNull(varM)) Then
        intM = 0
    Else
        If (IsNumeric(varM)) Then
            intM = CInt(varM)
        Else
            intM = 0
        End If
    End If
    Select Case intM
        Case 4, 6, 9, 11:   ' April, June, September, November
            MDays = 30
        Case 1, 3, 5, 7, 8, 10, 12: ' January, March, May, July, August, October, December
            MDays = 31
        Case 2:             ' February - depending on Year
            If LeapYear(varY) Then
                MDays = 29
            Else
                MDays = 28
            End If
        Case Else
            MDays = 0
    End Select
End Function

Public Function GetStrDate(strDate As String, dtmDate As Date) As Integer
' Get Date given String Containing Date, Return Date
'   Return Actual number of Dates (formatted as d(d)[./]m(m)[./](cc)yy) parsed
    Dim strDT As String, astrDTPart() As String
    Dim lngUB As Long
    Dim ynNumDD As Boolean, ynNumMM As Boolean, ynNumYYYY As Boolean
    Dim intMatches As Integer, intMDays As Integer, intDD As Integer, intMM As Integer, intYYYY As Integer
    Dim dtmRV As Date

    strDT = Replace(strDate, ".", "/")
    strDT = Replace(strDT, "-", "/")
    astrDTPart = Split(strDT, "/")
    lngUB = UBound(astrDTPart)
    If (lngUB <> 2) Then
        intMatches = 0
        dtmRV = DateSerial(1900, 1, 1)
    Else
        ' At least 3 Parts ... Validate
        ynNumDD = IsNumeric(astrDTPart(0))
        ynNumMM = IsNumeric(astrDTPart(1))
        ynNumYYYY = IsNumeric(astrDTPart(2))
        If (ynNumDD And ynNumMM And ynNumYYYY) Then
            ' All Numeric ...
            intDD = CInt(astrDTPart(0))
            intMM = CInt(astrDTPart(1))
            intYYYY = CInt(astrDTPart(2))
            If (intYYYY < 100) Then
                intYYYY = 2000 + intYYYY
            End If
            intMDays = MDays(intYYYY, intMM)
            If ((intMM >= 1 And intMM <= 12) And (intDD >= 1 And intDD <= intMDays)) Then
                ' Valid Month and Day Ranges
                intMatches = 1
                dtmRV = DateSerial(intYYYY, intMM, intDD)
            Else
                ' Invalid Month or Day Range
                intMatches = 0
                dtmRV = DateSerial(1900, 1, 1)
            End If
        Else
            ' At least one part is Not Numeric
            intMatches = 0
            dtmRV = DateSerial(1900, 1, 1)
        End If
    End If
    dtmDate = dtmRV
    GetStrDate = intMatches
End Function

Public Function FirstMonday(dtmDT As Date) As Date
' Return 1st Monday of Month(dtmDT)
    Dim intMM As Integer, intYYYY As Integer, intWeekDay As Integer
    Dim dtmRV As Date

    intMM = Month(dtmDT)
    intYYYY = Year(dtmDT)
    dtmRV = DateSerial(intYYYY, intMM, 1)
    intWeekDay = Weekday(dtmRV)
    dtmRV = DateAdd("d", (vbMonday - intWeekDay + 7) Mod 7, dtmRV)
    FirstMonday = dtmRV
End Function

Public Function NextCDSDT(dtmDT As Date) As Date
' Return Next Effective CDS Date for dtmDT
    Dim intMM As Integer, intYYYY As Integer
    Dim dtmRV As Date

    intMM = Month(dtmDT)
    intYYYY = Year(dtmDT)
    Select Case intMM
        Case 1, 2:  ' Jan, Feb
            dtmRV = DateSerial(intYYYY, 3, 1)
        Case 3, 4, 5:   ' Mar, Apr, May
            dtmRV = DateSerial(intYYYY, 6, 1)
        Case 6, 7, 8:   ' Jun, Jul, Aug
            dtmRV = DateSerial(intYYYY, 9, 1)
        Case 9, 10, 11: ' Sep, Oct, Nov
            dtmRV = DateSerial(intYYYY, 12, 1)
        Case 12:    ' Dec
            dtmRV = DateSerial(intYYYY + 1, 3, 1)
    End Select
    NextCDSDT = NextMonday(dtmRV)
End Function

Public Function NextCPIDT(dtmDT As Date) As Date
' Return Next Effective CPI Date for dtmDT
    Dim intMM As Integer, intYYYY As Integer
    Dim dtmRV As Date

    intMM = Month(dtmDT)
    intYYYY = Year(dtmDT)
    Select Case intMM
        Case 1:
            dtmRV = DateSerial(intYYYY, 2, 1)
        Case 8, 9, 10, 11:
            dtmRV = DateSerial(intYYYY + 1, 2, 1)
        Case Else:  ' Other Months {2, 3, 4, 5, 6, 7}
            dtmRV = DateSerial(intYYYY, 8, 1)
    End Select
    NextCPIDT = dtmRV
End Function

Public Function NextMonday(dtmDT As Date) As Date
' Return Next Monday of dtmDT
    Dim intWeekDay As Integer
    Dim dtmRV As Date

    intWeekDay = Weekday(dtmDT)
    dtmRV = DateAdd("d", (vbMonday - intWeekDay + 7) Mod 7, dtmDT)
    NextMonday = dtmRV
End Function

Public Function NextEffDT(dtmDT As Date) As Date
' Return Next Effective Date for dtmDT
    Dim intMM As Integer, intYYYY As Integer
    Dim lngDiff As Long
    Dim dtmRV As Date, dtm1stMon As Date, dtmTmp As Date

    dtmRV = DateAdd("d", 35, dtmDT)
    dtm1stMon = FirstMonday(dtmRV)
    intMM = Month(dtm1stMon)
    intYYYY = Year(dtm1stMon)
    lngDiff = DateDiff("d", dtmDT, dtm1stMon)
    If (lngDiff < 35) Then
        ' Next Month or (Jan, Year+1)
        If (intMM = 12) Then
            intMM = 1: intYYYY = intYYYY + 1
        Else
            intMM = intMM + 1
        End If
        Select Case intMM
            Case 2, 8:  ' CPI Months
                dtmRV = DateSerial(intYYYY, intMM, 1)
            Case Else:  ' Other Months
                dtmTmp = DateSerial(intYYYY, intMM, 1)
                dtmRV = FirstMonday(dtmTmp)
        End Select
    Else
        dtmRV = dtm1stMon
    End If
    NextEffDT = dtmRV
End Function


Attribute VB_Name = "modEMailSubj"
Option Explicit
' ----

Public Function EMailSubj(xlWkSh As Excel.Worksheet, strWkShType As String) As String
' Return Email Subject for the given Worksheet Type {"LPC"}
' ----
'   [Price Change] depends on the following fields:
'       [Supplier Name], [Type of Change], [Effective Date], [Number of Items]
' ----
    Dim strRV As String, strLastDataRow As String
    Dim lngLastDataRow As Long, lngItems As Long

    If (strWkShType = "LPC") Then
        ' [*Price Change*]: Check for Minimum Required Header Field Data
        strRV = "Price_Change;"
        ' [Type of Change]
        strRV = strRV & Left(CStr(xlWkSh.Range("C4").Value), 3) & ";"
        ' [Supplier Name]
        strRV = strRV & CStr(xlWkSh.Range("O2").Value) & ";"
        ' [Effective Date]
        If (RngValTypeName(xlWkSh.Range("C5")) = "Date") Then
            strRV = strRV & Format(xlWkSh.Range("C5").Value, "d-mmm-yyyy")    ' Effeictive Date
        Else
            strRV = strRV & "EffDT?"
        End If
        ' [Items]
        lngLastDataRow = LastDataRow(xlWkSh, "A")
        strLastDataRow = CStr(lngLastDataRow)
        ' ----
        ' ** Tables: ListRow(1) is Not considered 'Blank' even when it is! :-(
        If ((CStr(xlWkSh.Range("A" & strLastDataRow).Value) = "") And (lngLastDataRow > gconLPCItemHdr2)) Then
            lngLastDataRow = lngLastDataRow - 1
        End If
        lngItems = lngLastDataRow - gconLPCItemHdr2
        If (lngItems = 0) Then
            strRV = strRV & ";Items?"
        Else
            strRV = strRV & ";Items(" & Format(lngItems, "#,##0") & ")"
        End If
        EMailSubj = strRV
    End If
End Function


Attribute VB_Name = "modFunctions"
Option Explicit

Enum FormMsgType
    fmRunning = vbMagenta
    fmDone = vbBlue
    fmError = vbRed
    fmWrn = vbMagenta
    fmInfo = 10441472   ' Navigation Blue = RGB(0, 83, 159)
    fmOk = vbBlack
End Enum
' ----

Public Function PrntChars(strS As String) As String
' Return Printable Character Only from strS
    Dim strC As String, strRV As String
    Dim intC As Integer
    Dim lngL As Long, lngI As Long

    lngL = Len(strS)
    strRV = ""
    For lngI = 1 To lngL
        strC = Mid(strS, lngI, 1)
        intC = Asc(strC)
        If (intC >= 32 And intC <= 127) Then
            strRV = strRV & strC
        End If
    Next lngI
    PrntChars = strRV
End Function

Public Sub BreakOnKey(xlWkSh As Excel.Worksheet, lngDataRow1 As Long, lngLastDataRow As Long, strKeyCol As String, _
                        strStrtCol As String, strEndCol As String, xlBrdrStyle As XlLineStyle, xlBrdrWg As XlBorderWeight, lngBrdrRGB As Long)
' Draw Border on Change of Key
    Dim lngRow As Long
    Dim strRng As String, strRow As String, strRowM1 As String
    
    For lngRow = (lngDataRow1 + 1) To lngLastDataRow
        strRow = CStr(lngRow)
        strRowM1 = CStr(lngRow - 1)
        If (xlWkSh.Range(strKeyCol & strRow).Value <> xlWkSh.Range(strKeyCol & strRowM1).Value) Then
            ' Change in Key -> Draw Border(Top)
            strRng = strStrtCol & strRow & ":" & strEndCol & strRow
            With xlWkSh.Range(strRng).Borders(xlEdgeTop)
                .LineStyle = xlBrdrStyle
                .Weight = xlBrdrWg
                .Color = lngBrdrRGB
            End With
        End If
    Next lngRow
End Sub

Public Sub Formulae2Values(xlWkSh As Excel.Worksheet, strDataRow1Rng As String, strDataRng As String, lngLastDataRow As Long, lngMinRow As Long)
' AutoFill Formulae and Replace with Values given WorkSheet, Data Row 1 Range, Data Range, Last Data Row, Minimum Row need to Fill
    If (lngLastDataRow > lngMinRow) Then
        xlWkSh.Range(strDataRow1Rng).AutoFill xlWkSh.Range(strDataRng)
    End If
    ' Replace Formulae with Values
    xlWkSh.Range(strDataRng).Copy
    xlWkSh.Range(strDataRng).PasteSpecial xlPasteValues, , False, False
    Application.CutCopyMode = False
    xlWkSh.Activate
    xlWkSh.Range(strDataRow1Rng).Range("A1").Select
End Sub

Public Function CountInputFiles(strFldrPn As String, strPttrn As String) As Long
' Count Input Files in Folder with given Pattern
    Dim lngFiles As Long
    Dim strFn As String

    lngFiles = 0
    strFn = Dir(strFldrPn & strPttrn)
    While (strFn <> "")
        lngFiles = lngFiles + 1
        strFn = Dir()
    Wend
    ' Return Count
    CountInputFiles = lngFiles
End Function

Public Function DefNull(varValue As Variant, varNullVal As Variant) As Variant
' Return varNullVal if Not Null else varDefValue
    DefNull = IIf((IsNull(varValue)), varNullVal, varValue)
End Function

Public Sub SortAsc1234(xlWkSh As Excel.Worksheet, strSortRng As String, ynHeader As Boolean, strKeyRng1 As String, _
                        Optional strKeyRng2 As String = "-", Optional strKeyRng3 As String = "-", Optional strKeyRng4 As String = "-")
' Sort Ascending 1..4 Keys given: SortRange, if SortRange includes the Header, Key Range 1 (,2 (,3 (,4)))
    With xlWkSh.Sort
        .SortFields.Clear
        ' Accept Defaults - xlSortOnValues, xlAscending, xlSortNormal
        .SortFields.Add xlWkSh.Range(strKeyRng1)
        If (strKeyRng2 <> "-") Then
            .SortFields.Add xlWkSh.Range(strKeyRng2)
            If (strKeyRng3 <> "-") Then
                .SortFields.Add xlWkSh.Range(strKeyRng3)
                If (strKeyRng4 <> "-") Then
                    .SortFields.Add xlWkSh.Range(strKeyRng4)
                End If
            End If
        End If
        .SetRange xlWkSh.Range(strSortRng)
        .Header = IIf((ynHeader), xlYes, xlNo)
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
End Sub

Public Sub AppBlockToWkSh(xlWkShDst As Excel.Worksheet, strDstStrtCol, strDstKeyCol As String, xlWkShSrc As Excel.Worksheet, _
                            lngSrcStrtRow As Long, strSrcStrtCol As String, lngSrcEndRow As Long, strSrcEndCol As String)
' Append xlWkShSrc from [(StrtCol)(StrtRow), (EndCol)(EndRow)] to xlWkShDst (DstStrtCol)(LastRowDst + 1) - IIF there is data!
    Dim lngLastRowDst As Long
    Dim strRng2Copy As String

    If (lngSrcStrtRow <= lngSrcEndRow) Then
        lngLastRowDst = LastDataRow(xlWkShDst, strDstKeyCol)
        strRng2Copy = strSrcStrtCol & CStr(lngSrcStrtRow) & ":" & strSrcEndCol & CStr(lngSrcEndRow)
        ' Copy to Destination
        xlWkShSrc.Range(strRng2Copy).Copy xlWkShDst.Range(strDstStrtCol & CStr(lngLastRowDst + 1))
    End If
End Sub

Public Sub AppRowsToWkSh(xlWkShDst As Excel.Worksheet, xlWkShSrc As Excel.Worksheet, lngStrtRow As Long, lngEndRow As Long, _
                            strEndCol As String, strDstKeyCol As String)
' Append xlWkShSrc from ["A"(StrtRow), (EndCol)(EndRow)] to xlWkShDst "A"(LastRowDst + 1) - IIF there is data!
    Dim lngLastRowDst As Long
    Dim strRng2Copy As String

    If (lngStrtRow <= lngEndRow) Then
        lngLastRowDst = LastDataRow(xlWkShDst, strDstKeyCol)
        strRng2Copy = "A" & CStr(lngStrtRow) & ":" & strEndCol & CStr(lngEndRow)
        ' Copy to Destination
        xlWkShSrc.Range(strRng2Copy).Copy xlWkShDst.Range("A" & CStr(lngLastRowDst + 1))
    End If
End Sub

Public Sub Text2General(xlWkSh As Excel.Worksheet, strDataRng As String, strDstCellRng As String)
' Text to General Cell format of given DataRange on WorkSheet with results starting from Destination Cell
    xlWkSh.Range(strDataRng).TextToColumns xlWkSh.Range(strDstCellRng), xlDelimited, xlTextQualifierNone, _
        False, False, False, False, False, False, , Array(1, 1), , , True
End Sub

Public Sub ClearWkShR1R2(xlWkSh As Excel.Worksheet, lngStrtRow As Long, lngStopRow As Long)
' Clear WorkSheet given WorkSheet, StartRow, and StopRow - IIF lngStrtRow <= lngStopRow
    Dim strRng As String

    If (lngStrtRow <= lngStopRow) Then
        strRng = CStr(lngStrtRow) & ":" & CStr(lngStopRow)
        xlWkSh.Rows(strRng).Delete
    End If
End Sub

Public Sub ClearWkSh(xlWkSh As Excel.Worksheet, lngStrtRow As Long, strKeyCol As String)
' Clear WorkSheet given WorkSheet, Start Row, and Key Column
    Dim lngLastDataRow As Long

    xlWkSh.Activate
    lngLastDataRow = LastDataRow(xlWkSh, strKeyCol)
    ClearWkShR1R2 xlWkSh, lngStrtRow, lngLastDataRow
    xlWkSh.Range(strKeyCol & CStr(lngStrtRow)).Select
End Sub

Public Function LastDataRow(xlWkSh As Excel.Worksheet, strKeyCol As String) As Long
' Return Last Data Row in given Worksheet using Key Column
    Dim lngMaxRow As Long

    lngMaxRow = xlWkSh.Cells.Rows.Count
    ' From the last possible row (Current Excel Limit 1048576) find the first Row Continaing Data using (Key)
    LastDataRow = xlWkSh.Range(strKeyCol & CStr(lngMaxRow)).End(xlUp).Row
End Function

Public Function DataColA1(xlCell As Excel.Range) As String
' Return Column (A1 format {"A" ... "XFD"} given Cell
    Dim strCellAddr As String
    Dim lngDllr2 As Long    ' 2nd $ in strCellAddr e.g. $XFD$1 -> Dllr2 = 5
                                                    '   ----v----1
    strCellAddr = xlCell.Address(True, True, xlA1)
    lngDllr2 = InStr(2, strCellAddr, "$")    ' 1st $ is in location 1
    DataColA1 = Mid(strCellAddr, 2, (lngDllr2 - 2))
End Function

Public Function LastDataCol(xlWkSh As Excel.Worksheet, lngKeyRow As Long) As String
' Return Last Data Column A1 Style on xlWkSh using Key Row
    Dim lngCols As Long
    Dim xlRng As Excel.Range
    Dim strRngAddr As String, strRow As String
    
    lngCols = xlWkSh.Cells.Columns.Count
    Set xlRng = xlWkSh.Cells(lngKeyRow, lngCols).End(xlToLeft)
    strRngAddr = xlRng.Address(False, False, xlA1, , xlWkSh.Cells(lngKeyRow, 1))
    strRow = CStr(lngKeyRow)
    Set xlRng = Nothing
    LastDataCol = Left(strRngAddr, InStr(1, strRngAddr, strRow) - 1)
End Function

Public Function Loc2Stt(varLoc As Variant) As String
' Return State given Location
    Dim strLoc As String
    Dim strRV As String

    strLoc = Right("00" & CStr(varLoc), 3)
    Select Case strLoc
        Case "067": strRV = "ACT"
        Case "025": strRV = "NSW"
        Case "042", "043":  strRV = "NT"
        Case "023", "095", "096":   strRV = "QLD"
        Case "284": strRV = "SA"
        Case "275", "276":  strRV = "TAS"
        Case "003": strRV = "VIC"
        Case "085": strRV = "WA"
        Case Else:  strRV = "Err"
    End Select
    Loc2Stt = strRV
End Function

Public Sub FormMsgV(xlRngMsg As Excel.Range, varMsg As Variant, fmType As FormMsgType, Optional ynInfo As Boolean = False)
' Update Message txtMsg on given Form
    xlRngMsg.Value = varMsg
    xlRngMsg.Font.Color = fmType
    xlRngMsg.Font.Italic = ynInfo
End Sub

Public Sub Sleep(lngSeconds As Long, Optional xlWkSh As Excel.Worksheet = Nothing, Optional strRngSleep As String = "-", Optional strRngNow As String = "-")
' Sleep for lngSeconds Seconds; optional update given WorkSheet, at strRngSleep and strRngNow
    Dim dtmNow As Date, dtmStop As Date
    Dim ynUpd As Boolean
    Dim lngDiffPrev As Long, lngDiffNow As Long

    If (lngSeconds < 1) Then Exit Sub   ' 1 Second is the Minimum
    ' Determine what to Update if anything
    ynUpd = Not ((xlWkSh Is Nothing) And (strRngSleep = "-") And (strRngNow = "-"))
    ' Start
    dtmNow = Now
    dtmStop = DateAdd("s", lngSeconds, dtmNow)
    lngDiffNow = DateDiff("s", dtmNow, dtmStop)
    lngDiffPrev = lngDiffNow
    ' (Update Display Values)
    If (ynUpd) Then
        UpdSleepNow xlWkSh, strRngSleep, lngDiffNow, strRngNow, dtmNow
    End If
    While (lngDiffNow > 0)
        DoEvents
        dtmNow = Now
        lngDiffNow = DateDiff("s", dtmNow, dtmStop)
        If (ynUpd And (lngDiffPrev <> lngDiffNow)) Then
            ' (Update Display Values)
            lngDiffPrev = lngDiffNow
            UpdSleepNow xlWkSh, strRngSleep, lngDiffNow, strRngNow, dtmNow
        End If
    Wend
    If (ynUpd) Then
        FormMsgV xlWkSh.Range(strRngSleep), Null, fmDone
        FormMsgV xlWkSh.Range(strRngNow), Null, fmDone
    End If
End Sub

Private Sub UpdSleepNow(xlWkSh As Excel.Worksheet, strRngSleep As String, lngSleep As Long, strRngNow As String, dtmNow As Date)
' Update Sleep / Now
    If (xlWkSh Is Nothing) Then
        ' Nothing to Update -> Exit
    End If
    FormMsgV xlWkSh.Range(strRngSleep), lngSleep, fmRunning, True
    FormMsgV xlWkSh.Range(strRngNow), dtmNow, fmRunning, True
End Sub

Public Sub MyWkShPageSetup(xlApp As Excel.Application, xlWkSh As Excel.Worksheet, _
                varOrientation As XlPageOrientation, varZoom As Variant, varPgsWide As Variant, varPgsTall, _
                curTM As Currency, curBM As Currency, curLM As Currency, curRM As Currency, _
                strLH As String, strCH As String, strPTR As String, strPTC As String, ynGrid As Boolean, _
                varOrder As XlOrder)
' PageSetup for given Worksheet
    On Error Resume Next    ' Due to PageSetup.PaperSize issue
    With xlWkSh.PageSetup
        .Orientation = varOrientation
        .PaperSize = xlPaperA4
        .Zoom = varZoom
        .FitToPagesWide = varPgsWide
        .FitToPagesTall = varPgsTall
        .TopMargin = xlApp.InchesToPoints(curTM)
        .BottomMargin = xlApp.InchesToPoints(curBM)
        .LeftMargin = xlApp.InchesToPoints(curLM)
        .RightMargin = xlApp.InchesToPoints(curRM)
        .LeftFooter = ""
        .CenterFooter = ""
        .RightFooter = ""
        .LeftHeader = strLH
        .CenterHeader = strCH
        .RightHeader = "Page &P of &N"
        .PrintTitleRows = strPTR
        .PrintTitleColumns = strPTC
        .PrintGridlines = ynGrid
        .Order = varOrder
    End With
End Sub

Public Sub MyWorkSheetFont(xlWkSh As Excel.Worksheet, strFontName As String, intFontSize As Integer)
' Set Font Name and Size for given WorkSheet
    With xlWkSh.Cells.Font
        .Name = strFontName
        .Size = intFontSize
    End With
End Sub

Public Function MyGetXlDate(xlApp As Excel.Application, xlCell As Excel.Range) As Date
' Return xlCell value as a Date or 0
    Dim curRV As Date

    If (xlApp.WorksheetFunction.IsError(xlCell)) Then
        ' An Error -> Return 0
        curRV = 0
    Else
        ' Not an Error -> Test for Numeric
        If (xlApp.WorksheetFunction.IsNumber(xlCell)) Then
            curRV = xlCell.Value
        Else
            curRV = 0
        End If
    End If
    MyGetXlDate = curRV
End Function

Public Function MyGetXlDollar(xlApp As Excel.Application, xlCell As Excel.Range) As Currency
' Return xlCell value as a Currency or 0
    Dim curRV As Currency

    If (xlApp.WorksheetFunction.IsError(xlCell)) Then
        ' An Error -> Return 0
        curRV = 0
    Else
        ' Not an Error -> Test for Numeric
        If (xlApp.WorksheetFunction.IsNumber(xlCell)) Then
            curRV = CCur(xlCell.Value)
        Else
            curRV = 0
        End If
    End If
    MyGetXlDollar = curRV
End Function

Public Function MyGetXlLong(xlApp As Excel.Application, xlCell As Excel.Range) As Long
' Return xlCell value as a Long or 0
    Dim lngRV As Long

    If (xlApp.WorksheetFunction.IsError(xlCell)) Then
        ' An Error -> Return 0
        lngRV = 0&
    Else
        ' Not an Error -> Test for Numeric
        If (xlApp.WorksheetFunction.IsNumber(xlCell)) Then
            lngRV = CLng(xlCell.Value)
        Else
            lngRV = 0&
        End If
    End If
    MyGetXlLong = lngRV
End Function

Public Function MyGetXlStr(xlApp As Excel.Application, xlCell As Excel.Range) As String
' Return xlCell value as a String or ""
    Dim strRV As String

    If (xlApp.WorksheetFunction.IsError(xlCell)) Then
        ' An Error -> Return ""
        strRV = ""
    Else
        strRV = Trim(CStr(xlCell.Value))
    End If
    MyGetXlStr = strRV
End Function

Attribute VB_Name = "modGlobal"
Option Explicit
' ----

Public Const gconRoot As String = "C:\MyMDG\"   ' Local Root folder
Public Const gconALM_MStr As String = gconRoot & "MFG_Mstr\"
Public Const gconALM_LPC As String = gconRoot & "ALM_PrcChgReps\"

' This Workbook
Public gxlWkBk As Excel.Workbook    ' This Workbook
Public gstrWkBkLPCFldr As String    ' Workbook Folder
Public gstrWkBkLPCFn As String      ' Workbook Filename
Public gstrWkBkPn As String         ' Workbook Pathname
' ----
' Field Selection Messages
Public Const gconCellInfo As String = "Cell Information or Error Message."
Public Const gconSubDT As String = "Submission Date: Required format is dd/mm/yyyy."
Public Const gconChgType As String = "Change Type: Choose Increase, Decrease, CPI, CDS."
Public Const gconEffDT As String = "ALM Effective Date: Required format is dd/mm/yyyy."
Public Const gconIncDT As String = gconEffDT & vbCrLf & _
                "For Standard Price Increases this should always be 1st Monday of the Month."
Public Const gconDecDT As String = gconEffDT & vbCrLf & _
                "For Price Decrease this should always be a weekday."
Public Const gconCPIDT As String = gconEffDT & vbCrLf & _
                "For CPI Price Increases this should always be 1-Feb or 1-Aug."
Public Const gconCDSDT As String = gconEffDT & vbCrLf & _
                "For Container Deposit Scheme (also known as Bottle Deposit, Container Return Scheme) this should always be 1st Monday of the Month."
'
Public Const gconNat As String = "National: Select X for All States / Territories or leave Blank and select Applicable States." & vbCrLf & _
                "Note: National can only be selected if an Item's List Price and all other Allowances are identical across all states.  " & _
                "Complete a separate Price Change Form (which can be copied) where List Price differs between State(s) for an Item."
'
Public Const gconSuppNoNm As String = "Supplier Name / Number: Taken from the core system."
Public Const gconSubBy As String = "Submitted By: The person's name who is sending the deal sheet."
Public Const gconSupPhNo As String = "Phone: Phone to call you in the event that clarification is needed."
Public Const gconSupEMail As String = "Email: Email address to reach on in the event that clarification is needed."
Public Const gconEMail As String = "Email Subject: Copy this text to the 'Subject' line of the email that you will send to Merchandise@almliquor.com.au" & vbCrLf & _
                            "This will assist with efficient processing of your data."
Public Const gconNotes As String = "Notes: Any notes about this Price Change."
' ----
' Price Change
Public Const gconLPCItemHdr1 As Long = 15
Public Const gconLPCItemHdr2 As Long = 16
Public Const gconLPCItemDta1 As Long = 17

Public gxlWkShPC As Excel.Worksheet ' [*Price Change*]
Public gstrWkShNmCur As String      ' Current Price Change Worksheet Name
Public gstrWkShNmPrv As String      ' Previous Price Change Worksheet Name
Public gxlRngPCMsgs As Excel.Range  ' Messages Cell
Public gstrMsg As String            ' Message: Stadard
Public gstrErrMsg As String         ' Message: Error / Warning
Public gynWrn As Boolean            ' Warning?
Public gstrPrvTrgtPC As String      ' Previous Target Cell A1 Address
Public gstrNextCellPC As String     ' Next Target Cell A1 Address
Public gynNextDtaCellPC As Boolean  ' Next Data Cell?
' ----
' States
Public Const gconStates As String = "NSW VIC QLD WA  SA  NT  TAS ACT"
                                    '----v----1----v----2----v----3--
' ----
' Item Colours
Public Const gconRGB_Itm As Long = 14083324
' State Colours
Public Const gconRGB_NSW As Long = 15652797
Public Const gconRGB_VIC As Long = 15773696
Public Const gconRGB_QLD1 As Long = 6684876
Public Const gconRGB_QLD2 As Long = 10053375
Public Const gconRGB_QLD3 As Long = 13408767
Public Const gconRGB_WA As Long = 65535
Public Const gconRGB_SA As Long = 255
Public Const gconRGB_NT1 As Long = 26316
Public Const gconRGB_NT2 As Long = 3381759
Public Const gconRGB_TAS1 As Long = 3407718
Public Const gconRGB_TAS2 As Long = 6750105
Public Const gconRGB_ACT As Long = 13395711

Public galngSttRGBs(1 To 8) As Long ' Main State Colour
' ----
' Config
Public gynIsDev As Boolean
Public gynsVndrDta As Boolean ' C:\MyMDG\ALM_PrcChgReps -> Vendor Data Update
Public gynIsVndr As Boolean ' Vendor updating
' ----
Public glngSleep As Long
Public dtmOnTime As Date
' ----
Dim mgynNatIsX As Boolean, mgynAnySttIsX As Boolean, mgynLocs As Boolean
' ----

Public Function StateNo(strStt As String) As Long
' Return State No {1 ... 8} given State {"NSW" ... "ACT"}
    Dim lngSttPos As Long

    lngSttPos = InStr(1, gconStates, strStt)    ' 1, 5, 9, 13, 17, 21, 25, 29
    StateNo = (lngSttPos + 3) \ 4               ' +-> 1, 2, 3, 4, 5, 6, 7, 8
End Function

Public Sub InitStateRGBs()
' Initialise State Colour array
    Dim lngStt As Long

    For lngStt = 1 To 8
        Select Case lngStt
            Case 1: galngSttRGBs(1) = gconRGB_NSW
            Case 2: galngSttRGBs(2) = gconRGB_VIC
            Case 3: galngSttRGBs(3) = gconRGB_QLD1
            Case 4: galngSttRGBs(4) = gconRGB_WA
            Case 5: galngSttRGBs(5) = gconRGB_SA
            Case 6: galngSttRGBs(6) = gconRGB_NT1
            Case 7: galngSttRGBs(7) = gconRGB_TAS1
            Case 8: galngSttRGBs(8) = gconRGB_ACT
        End Select
    Next lngStt
End Sub

Public Function FirstEmptyDataCell(xlWkSh As Excel.Worksheet, strShType As String) As String
' Return First Empty Data Cell {"LPC":[Price Change]}
    Dim xlRngTabSeq As Excel.Range, xlRng As Excel.Range
    Dim lngUB As Long
    Dim strDtaCell As String, strFldNm As String, strUB As String, strRngTypeNm As String
    Dim ynFound As Boolean

    If (strShType = "LPC") Then
        ' [Price Change]
        Set xlRngTabSeq = gxlWkBk.Names("TabPC").RefersToRange
        mgynNatIsX = CheckSttsNatX(xlWkSh.Range("I3"))
        mgynAnySttIsX = CheckSttsNatX(xlWkSh.Range(conSttRng))
        mgynLocs = mgynNatIsX Xor mgynAnySttIsX
    End If
    lngUB = xlRngTabSeq.Cells.Count
    ynFound = False
    strDtaCell = ""
    For Each xlRng In xlRngTabSeq
        strDtaCell = CStr(xlRng.Value)
        strRngTypeNm = RngValTypeName(xlWkSh.Range(strDtaCell).Range("A1"))
        If (strRngTypeNm = "Empty") Then
            ' Check Nat/States
            strFldNm = CStr(xlRng.Offset(0, 1).Value)
            Select Case strFldNm
                Case "NAT": ' Empty if: Not NatIsX And Not AnySttIsX
                    If (Not mgynLocs) Then
                        ynFound = True
                        Exit For
                    End If
                Case "ACT", "NSW", "NT", "QLD", "SA", "TAS", "VIC", "WA":   ' Empty if: Not NatIsX And Not AnySttIsX
                    If (Not mgynLocs) Then
                        ynFound = True
                        Exit For
                    End If
                Case Else:  ' Not Nat/States
                    ynFound = True
                    Exit For
            End Select
        End If
    Next xlRng
    If (ynFound) Then
        FirstEmptyDataCell = strDtaCell
    Else
        ' Return Last Item
        lngUB = LastDataRow(xlWkSh, "A")
        strUB = CStr(lngUB)
        ' ----
        ' ** Tables: ListRow(1) is Not considered 'Blank' even when it is! :-(
        If ((CStr(xlWkSh.Range("A" & strUB).Value) = "")) Then
            lngUB = lngUB - 1
            strUB = CStr(lngUB)
        End If
        FirstEmptyDataCell = "A" & CStr(lngUB)
    End If
    Set xlRng = Nothing
    Set xlRngTabSeq = Nothing
End Function

Public Function NextDtaCell(xlWkSh As Excel.Worksheet, strShType As String, strCurCell As String) As String
' Return Next Data Cell {"LPC":[Price Change]}
    Dim xlRngTabSeq As Excel.Range, xlRng As Excel.Range, xlRngCC As Excel.Range
    Dim lngUB As Long, lngI As Long, lngRowCC As Long, lngColCC As Long
    Dim strlngUB As String, strCellUp As String, strCellLeft As String
    Dim ynFound As Boolean

    If (strShType = "LPC") Then
        ' ALM Price Change
        Set xlRngTabSeq = gxlWkBk.Names("TabPC").RefersToRange
    End If
    lngUB = xlRngTabSeq.Cells.Count
    ynFound = False
    For lngI = 1 To lngUB
        If (xlRngTabSeq.Cells(lngI).Value = strCurCell) Then
            ' Found
            ynFound = True
            Exit For
        End If
    Next lngI
    If (ynFound And (lngI <> lngUB)) Then
        NextDtaCell = xlRngTabSeq.Cells(lngI + 1).Value
    Else
        ' Test Cell Above (if Enter was pressed), Cell ToLeft (if Tab was pressed)
        Set xlRngCC = xlWkSh.Range(strCurCell)
        lngRowCC = xlRngCC.Row: lngColCC = xlRngCC.Column
        ' Cell(1, 1) is already dealt with WhShSelChg
        If (lngRowCC = 1) Then
            NextDtaCell = FirstEmptyDataCell(xlWkSh, "LPC")
            GoTo NextDtaCell_Exit
        End If
        If (lngColCC = 1 And lngRowCC < gconLPCItemDta1) Then
            NextDtaCell = FirstEmptyDataCell(xlWkSh, "LPC")
            GoTo NextDtaCell_Exit
        End If
        ' Try Cell Above
        strCellUp = xlRngCC.Offset(-1, 0).Address(False, False, xlA1)
        Set xlRng = xlRngTabSeq.Find(strCellUp)
        If (Not (xlRng Is Nothing)) Then
            ' Found Cell Above
            NextDtaCell = xlRng.Offset(1, 0).Value
            GoTo NextDtaCell_Exit
        End If
        ' Try Cell ToLeft
        strCellLeft = xlRngCC.Offset(0, -1).Address(False, False, xlA1)
        Set xlRng = xlRngTabSeq.Find(strCellLeft)
        If (Not (xlRng Is Nothing)) Then
            ' Found Cell Above
            NextDtaCell = xlRng.Offset(1, 0).Value
            GoTo NextDtaCell_Exit
        End If
        ' Return Last Deal Sheet Item
        lngUB = LastDataRow(xlWkSh, "A")
        strlngUB = CStr(lngUB)
        ' ----
        ' ** Tables: ListRow(1) is Not considered 'Blank' even when it is! :-(
        If ((CStr(xlWkSh.Range("A" & strlngUB).Value) = "") And (lngUB <> gconLPCItemDta1)) Then
            lngUB = lngUB - 1
        End If
        NextDtaCell = "A" & CStr(lngUB)
    End If
NextDtaCell_Exit:
    Set xlRngCC = Nothing
    Set xlRng = Nothing
    Set xlRngTabSeq = Nothing
End Function

Public Sub ResetWkBk()
' Reset Workbook Globals
    Set gxlWkBk = Application.ThisWorkbook
    gstrWkBkLPCFldr = gxlWkBk.Path
    gstrWkBkLPCFn = gxlWkBk.Name
    SetConfig
    SetClrWkShLPC gxlWkBk.Worksheets("Price Change"), True
    gxlWkBk.Worksheets("TabSeq").Visible = gynIsDev
    gxlWkBk.Worksheets("Stts").Visible = gynIsDev
    gxlWkShPC.Columns("Z:AA").Hidden = (Not gynIsDev)
End Sub

Public Sub SetClrWkShLPC(xlWkSh As Excel.Worksheet, ynSet As Boolean)
' Set/Clear [Price Change] WorkSheet, Message Range
    If (ynSet) Then
        SetWkBk
        ' Reset incase of Copied [Price Change] Worksheet
        Set gxlWkShPC = Nothing
        Set gxlWkShPC = xlWkSh
        Set gxlRngPCMsgs = Nothing
        Set gxlRngPCMsgs = gxlWkShPC.Range("K1")
    Else
        gxlRngPCMsgs.Value = Null
        Set gxlWkShPC = Nothing: Set gxlRngPCMsgs = Nothing
    End If
'    gstrNextCellPC = FirstEmptyDataCell(gxlWkShPC, "LPC")
End Sub

Public Sub SetConfig()
' Set gynIsDev, gynsVndrDta, and gynIsVndr
    If (Dir(gconRoot, vbDirectory) = "") Then
        ' Prod
        gynIsDev = False
        gynsVndrDta = False
        gynIsVndr = True
    Else
        gynIsDev = FileExists(gstrWkBkLPCFldr & "\Dev.txt")
        gynsVndrDta = FileExists(gconALM_LPC & "VndrLPC.txt")
        gynIsVndr = Not gynsVndrDta
    End If
End Sub

Public Sub SetWkBk()
' Set gxlWkBk to ThisWorkbook if not already set
    If (gxlWkBk Is Nothing) Then
        Set gxlWkBk = Application.ThisWorkbook
    End If
End Sub

Public Function RngValTypeName(xlRng As Excel.Range) As String
' Return Range.Value TypeName
    RngValTypeName = TypeName(xlRng.Value)
End Function

Public Function RngValidation(xlRng As Excel.Range) As String
' Return Validation Type for given Range
    Dim xlVld As Excel.Validation
    Dim lngVType As Long, lngVAlrtStyl As Long
    Dim strRV As String

    On Error Resume Next
    lngVType = xlRng.Validation.Type
    If (Err.Number <> 0) Then
        ' No Validation
        strRV = "None"
    Else
        Set xlVld = xlRng.Validation
        lngVType = xlVld.Type
        Select Case lngVType
            Case 0: ' xlValidateInputOnly   0   Validate only when user changes the value.
                strRV = "InputOnly"
            Case 1: ' xlValidateWholeNumber 1   Whole numeric values.
                strRV = "WholeNumber"
            Case 2: ' xlValidateDecimal 2   Numeric values.
                strRV = "Decimal"
            Case 3: ' xlValidateList    3   Value must be present in a specified list.
                strRV = "List"
            Case 4: ' xlValidateDate    4   Date values.
                strRV = "Date"
            Case 5: ' xlValidateTime    5   Time values.
                strRV = "Time"
            Case 6: ' xlValidateTextLength  6   Length of text.
                strRV = "TextLength"
            Case 7: ' xlValidateCustom  7   Data is validated using an arbitrary formula.
                strRV = "Custom"
        End Select
        Set xlVld = Nothing
    End If
    RngValidation = strRV
End Function
 
 
 

Attribute VB_Name = "modInitVndrLPC"
Option Explicit
' ----

Public Sub ClrVndr()
' Clear Vendor Details from [Price Change]("K2:K3") and Email Subject
    ResetWkBk
    Application.EnableEvents = False    ' To Prevent _SelectionChange from Responding to Changing Message or Target
    ' ----
    ' [Price Change]
    gxlWkShPC.Range("O2").Value = Null
    gxlWkShPC.Range("O3").Value = Null
    gxlWkShPC.Range("K7").Value = EMailSubj(gxlWkShPC, "LPC")
    Application.EnableEvents = False
    ' ----
    Application.EnableEvents = True     ' ReEnable Events
End Sub

Public Sub IntinVndrLPC(xlWkShPC As Excel.Worksheet)
' Initialise This Vendor's Workbook
    Dim strBn As String, strVndrDataFn As String, strVndrDataPn As String
    Dim xlWkBkSrc As Excel.Workbook
    Dim xlWkShSrc As Excel.Worksheet, xlWkShDst As Excel.Worksheet
    Dim xlWkShStts As Excel.Worksheet, xlWkShItems As Excel.Worksheet
    Dim strSrcWkShNm As String, strDstWkShNm As String, strData As String, strLastCol As String, strRngSrc As String
    Dim lngLastRowDst As Long, lngLastRowSrc As Long, lngRow As Long, lngLastSttRow As Long
    Dim intRC As Integer
    Dim strStt As String, strRngStt As String, strLastRowSrc As String
    Dim lngSttNo As Long
    Dim aynStts(1 To 8) As Boolean, ynInStt As Boolean

    ResetWkBk
    SetConfig
    If (Not gynsVndrDta) Then
        MsgBox "Vendor Data already current"
        Exit Sub
    End If
    strBn = BaseName(gstrWkBkLPCFn) ' ALM_Price_Change_VndrNm
                                    ' ----v----1----v----2
    strVndrDataFn = Mid(strBn, 18) & ".xlsb"
    strVndrDataPn = gstrWkBkLPCFldr & "\" & strVndrDataFn
    If (Not FileExists(strVndrDataPn)) Then
        MsgBox "Vendor Data already current"
        Exit Sub
    End If
    gxlWkBk.Worksheets("Price Change").Activate
    Application.EnableEvents = False    ' To Prevent _SelectionChange from Responding to Changing Message or Target
    ' ----
    ' Src![qryDS_Vndrs] -> [Vndrs]
    ' Src![qryDS_Stts] -> [Stts]
    ' Src![qryLPC_Items] -> [Item Info]  "ItemNo": ='Item Info'!$A$1:$A$304  "Items": ='Item Info'!$A$1:$J$304
    ' Src![qryLPCKeyDates] -> [Key Date]
    ' ----
    Set xlWkBkSrc = Workbooks.Open(strVndrDataPn, , False)
    For Each xlWkShSrc In xlWkBkSrc.Worksheets
        strSrcWkShNm = xlWkShSrc.Name
        Select Case strSrcWkShNm
            Case "qryDS_Vndrs":
                strDstWkShNm = "Vndrs": strData = "Vndr"
            Case "qryDS_Stts":
                strDstWkShNm = "Stts": strData = "Stt"
            Case "qryLPC_Items":
                strDstWkShNm = "Item Info": strData = "Item"
            Case "qryLPCKeyDates":
                strDstWkShNm = "Key Dates": strData = "KeyDates"
        End Select
        Set xlWkShDst = gxlWkBk.Worksheets(strDstWkShNm)
        xlWkShDst.Visible = xlSheetVisible
        xlWkShDst.Activate
        strLastCol = LastDataCol(xlWkShSrc, 1)
        lngLastRowDst = LastDataRow(xlWkShDst, "A")
        ClearWkShR1R2 xlWkShDst, 2, lngLastRowDst
        ' Copy Values to Dst
        xlWkShSrc.Activate
        xlWkShSrc.Select
        xlWkShSrc.Range("A1").Select
        lngLastRowSrc = LastDataRow(xlWkShSrc, "A")
        strLastRowSrc = CStr(lngLastRowSrc)
        strRngSrc = "A2:" & strLastCol & strLastRowSrc
        xlWkShSrc.Range(strRngSrc).Copy
        xlWkShDst.Activate
        xlWkShDst.Select
        xlWkShDst.Range("A2").Select
        xlWkShDst.Range("A2").PasteSpecial xlPasteValues, , False, False
        Application.CutCopyMode = False
        xlWkShDst.Range("A1").Select
        ' Format [Item Info]
        ' Updated Named Ranges
        Select Case strData
            Case "Item":
                gxlWkBk.Names("ItemNo").RefersTo = "='Item Info'!$A$1:$A$" & strLastRowSrc
                gxlWkBk.Names("Items").RefersTo = "='Item Info'!$A$1:$E$" & strLastRowSrc
                Item_InfoFmtCnd xlWkShDst, strLastRowSrc
                xlWkShDst.Columns("BO:BR").Delete
            Case "Vndr":
                With gxlWkBk.Worksheets("Vndrs")
                    If (.Range("A2").Value = "-") Then
                        ' Use PayTo Number and Name
                        xlWkShPC.Range("O2").Value = .Range("D2")
                        xlWkShPC.Range("O3").Value = .Range("C2")
                    Else
                        ' User Super Vndor Code and Name
                        xlWkShPC.Range("O2").Value = .Range("B2")
                        xlWkShPC.Range("O3").Value = .Range("A2")
                    End If
                End With
                ' [Email Subject]
                gxlWkShPC.Range("K7").Value = EMailSubj(gxlWkShPC, "LPC")
            Case "Stt":
                For lngRow = 2 To lngLastRowSrc
                    xlWkShDst.Range("C" & CStr(lngRow)).Value = "N"
                Next lngRow
            Case "KeyDates":
                xlWkShDst.Columns("C").NumberFormat = "ddd dd/mm/yyyy"
                xlWkShDst.Columns("D:F").HorizontalAlignment = xlCenter
                xlWkShDst.Columns("G").NumberFormat = "ddd dd/mm/yyyy"
                xlWkShDst.Columns("A:G").AutoFit
            Case Else:  ' Other?
        End Select
    Next xlWkShSrc
    xlWkBkSrc.Close: Set xlWkBkSrc = Nothing
    ' ----
    ' Initialise State Array
    Set xlWkShStts = gxlWkBk.Worksheets("Stts")
    lngLastSttRow = LastDataRow(xlWkShStts, "A")
    For lngRow = 1 To 8
        aynStts(lngRow) = False
    Next lngRow
    ' Determine Available States
    For lngRow = 2 To lngLastSttRow
        strStt = xlWkShStts.Range("A" & CStr(lngRow)).Value
        lngSttNo = StateNo(strStt)
        aynStts(lngSttNo) = True
    Next lngRow
    Set xlWkShStts = Nothing
    ' Hide Non-Ranged State/Branches
    Set xlWkShItems = gxlWkBk.Worksheets("Item Info")
    For lngRow = 1 To 8
        Select Case lngRow
            Case 1: strRngStt = "I:L"   ' NSW
            Case 2: strRngStt = "M:P"   ' VIC
            Case 3: strRngStt = "Q:AB"  ' QLD
            Case 4: strRngStt = "AC:AF" ' WA
            Case 5: strRngStt = "AG:AJ" ' SA
            Case 6: strRngStt = "AK:AR" ' NT
            Case 7: strRngStt = "AS:AZ" ' TAS
            Case 8: strRngStt = "BA:BD" ' ACT
        End Select
        xlWkShItems.Columns(strRngStt).Hidden = Not aynStts(lngRow)
    Next lngRow
    Set xlWkShItems = Nothing
    ' ----
'    gxlWkBk.Worksheets("Info").Activate
    gxlWkBk.Worksheets("Price Change").Activate
    gxlWkBk.Worksheets("Item Info").Visible = xlSheetVisible
    ' Hide Worksheets not needed by Supplier
    gxlWkBk.Worksheets("Vndrs").Visible = xlSheetHidden
    gxlWkBk.Worksheets("Stts").Visible = xlSheetHidden
    ' ----
    gxlWkBk.Save
    Application.EnableEvents = True     ' ReEnable Events
    ' ----
    ' Delete Trigger and Data File
    intRC = DelFile(strVndrDataPn)
    intRC = DelFile(gconALM_LPC & "VndrLPC.txt")
    Application.Quit
End Sub

Private Sub Item_InfoFmtCnd(xlWkShII As Excel.Worksheet, strRows As String)
' Conditional Formats for PackQty, SubR
    Dim strRngSubR As String, strRngPkQ As String
    Dim strRngNS025P As String, strRngNS025S As String, strRngVI003P As String, strRngVI003S As String, strRngQL023P As String, strRngQL023S As String
    Dim strRngQL095P As String, strRngQL095S As String, strRngQL096P As String, strRngQL096S As String, strRngWA085P As String, strRngWA085S As String
    Dim strRngSA284P As String, strRngSA284S As String, strRngNT042P As String, strRngNT042S As String, strRngNT043P As String, strRngNT043S As String
    Dim strRngTA275P As String, strRngTA275S As String, strRngTA276P As String, strRngTA276S As String, strRngAC067P As String, strRngAC067S As String
    Dim strCllDQCD As String
    Dim xlRng As Excel.Range

    ' Conditional Formats
    strRngSubR = "C2:C" & strRows
    strRngPkQ = "D2:D" & strRows
    ' State/Branches (ALM)
    strRngNS025P = "J2:J" & strRows:    strRngNS025S = "K2:K" & strRows
    strRngVI003P = "N2:N" & strRows:    strRngVI003S = "O2:O" & strRows
    strRngQL023P = "R2:R" & strRows:    strRngQL023S = "S2:S" & strRows
    strRngQL095P = "V2:V" & strRows:    strRngQL095S = "W2:W" & strRows
    strRngQL096P = "Z2:Z" & strRows:    strRngQL096S = "AA2:AA" & strRows
    strRngWA085P = "AD2:AD" & strRows:  strRngWA085S = "AE2:AE" & strRows
    strRngSA284P = "AH2:AH" & strRows:  strRngSA284S = "AI2:AI" & strRows
    strRngNT042P = "AL2:AL" & strRows:  strRngNT042S = "AM2:AM" & strRows
    strRngNT043P = "AP2:AP" & strRows:  strRngNT043S = "AQ2:AQ" & strRows
    strRngTA275P = "AT2:AT" & strRows:  strRngTA275S = "AU2:AU" & strRows
    strRngTA276P = "AX2:AX" & strRows:  strRngTA276S = "AY2:AY" & strRows
    strRngAC067P = "BB2:BB" & strRows:  strRngAC067S = "BC2:BC" & strRows
    ' DQ
    strCllDQCD = "BH2"
    ' --
    ' SubRange
    Set xlRng = xlWkShII.Range(strRngSubR)
    With xlRng.FormatConditions
        .Delete
        .Add xlExpression, , "=NOT(ISERROR(FIND(""S""," & strCllDQCD & ",1)))"
    End With
    xlRng.FormatConditions(1).Interior.Color = gconRGB_Itm
    Set xlRng = Nothing
    ' Pack Quantity
    Set xlRng = xlWkShII.Range(strRngPkQ)
    With xlRng.FormatConditions
        .Delete
        .Add xlExpression, , "=NOT(ISERROR(FIND(""P""," & strCllDQCD & ",1)))"
    End With
    xlRng.FormatConditions(1).Interior.Color = gconRGB_Itm
    Set xlRng = Nothing
    ' --
    ' NSW 025
    cmdItem_InfoFmtCndSttBr "$D2", xlWkShII.Range(strRngNS025P), "J2", "I2", "P", gconRGB_NSW, strCllDQCD    ' Pack Quantity
    cmdItem_InfoFmtCndSttBr "$C2", xlWkShII.Range(strRngNS025S), "K2", "I2", "S", gconRGB_NSW, strCllDQCD    ' Sub-Range
    ' --
    ' VIC 003
    cmdItem_InfoFmtCndSttBr "$D2", xlWkShII.Range(strRngVI003P), "N2", "M2", "P", gconRGB_VIC, strCllDQCD    ' Pack Quantity
    cmdItem_InfoFmtCndSttBr "$C2", xlWkShII.Range(strRngVI003S), "O2", "M2", "S", gconRGB_VIC, strCllDQCD    ' Sub-Range
    ' --
    ' QLD 023
    cmdItem_InfoFmtCndSttBr "$D2", xlWkShII.Range(strRngQL023P), "R2", "Q2", "P", gconRGB_QLD1, strCllDQCD   ' Pack Quantity
    cmdItem_InfoFmtCndSttBr "$C2", xlWkShII.Range(strRngQL023S), "S2", "Q2", "S", gconRGB_QLD1, strCllDQCD   ' Sub-Range
    ' QLD 095
    cmdItem_InfoFmtCndSttBr "$D2", xlWkShII.Range(strRngQL095P), "V2", "U2", "P", gconRGB_QLD2, strCllDQCD   ' Pack Quantity
    cmdItem_InfoFmtCndSttBr "$C2", xlWkShII.Range(strRngQL095S), "W2", "U2", "S", gconRGB_QLD2, strCllDQCD   ' Sub-Range
    ' QLD 096
    cmdItem_InfoFmtCndSttBr "$D2", xlWkShII.Range(strRngQL096P), "Z2", "Y2", "P", gconRGB_QLD3, strCllDQCD   ' Pack Quantity
    cmdItem_InfoFmtCndSttBr "$C2", xlWkShII.Range(strRngQL096S), "AA2", "Y2", "S", gconRGB_QLD3, strCllDQCD   ' Sub-Range
    ' --
    ' WA 085
    cmdItem_InfoFmtCndSttBr "$D2", xlWkShII.Range(strRngWA085P), "AD2", "AC2", "P", gconRGB_WA, strCllDQCD    ' Pack Quantity
    cmdItem_InfoFmtCndSttBr "$C2", xlWkShII.Range(strRngWA085S), "AE2", "AC2", "S", gconRGB_WA, strCllDQCD    ' Sub-Range
    ' --
    ' SA 284
    cmdItem_InfoFmtCndSttBr "$D2", xlWkShII.Range(strRngSA284P), "AH2", "AG2", "P", gconRGB_SA, strCllDQCD   ' Pack Quantity
    cmdItem_InfoFmtCndSttBr "$C2", xlWkShII.Range(strRngSA284S), "AI2", "AG2", "S", gconRGB_SA, strCllDQCD   ' Sub-Range
    ' --
    ' NT 042
    cmdItem_InfoFmtCndSttBr "$D2", xlWkShII.Range(strRngNT042P), "AL2", "AK2", "P", gconRGB_NT1, strCllDQCD  ' Pack Quantity
    cmdItem_InfoFmtCndSttBr "$C2", xlWkShII.Range(strRngNT042S), "AM2", "AK2", "S", gconRGB_NT1, strCllDQCD  ' Sub-Range
    ' NT 043
    cmdItem_InfoFmtCndSttBr "$D2", xlWkShII.Range(strRngNT043P), "AP2", "AO2", "P", gconRGB_NT2, strCllDQCD  ' Pack Quantity
    cmdItem_InfoFmtCndSttBr "$C2", xlWkShII.Range(strRngNT043S), "AQ2", "AO2", "S", gconRGB_NT2, strCllDQCD  ' Sub-Range
    ' --
    ' TAS 275
    cmdItem_InfoFmtCndSttBr "$D2", xlWkShII.Range(strRngTA275P), "AT2", "AS2", "P", gconRGB_TAS1, strCllDQCD ' Pack Quantity
    cmdItem_InfoFmtCndSttBr "$C2", xlWkShII.Range(strRngTA275S), "AU2", "AS2", "S", gconRGB_TAS1, strCllDQCD ' Sub-Range
    ' TAS 276
    cmdItem_InfoFmtCndSttBr "$D2", xlWkShII.Range(strRngTA276P), "AX2", "AW2", "P", gconRGB_TAS2, strCllDQCD ' Pack Quantity
    cmdItem_InfoFmtCndSttBr "$C2", xlWkShII.Range(strRngTA276S), "AY2", "AW2", "S", gconRGB_TAS2, strCllDQCD ' Sub-Range
    ' --
    ' ACT 067
    cmdItem_InfoFmtCndSttBr "$D2", xlWkShII.Range(strRngAC067P), "BB2", "BA2", "P", gconRGB_ACT, strCllDQCD  ' Pack Quantity
    cmdItem_InfoFmtCndSttBr "$C2", xlWkShII.Range(strRngAC067S), "BC2", "BA2", "S", gconRGB_ACT, strCllDQCD  ' Sub-Range
    ' ----
End Sub

Private Sub cmdItem_InfoFmtCndSttBr(strCllCmp As String, xlRng As Excel.Range, strCll1 As String, strCllIStts As String, strPorS As String, _
                                    lngRGB_SttBrClr As Long, strCllDQCD As String)
' Conditional Format for State_Branch Data {Pack Quantity, Sub-Range}
    With xlRng.FormatConditions
        .Delete
        .Add xlExpression, , "=AND(NOT(ISBLANK(" & strCllIStts & ")),NOT(ISERROR(FIND(""" & strPorS & """," & strCllDQCD & ",1)))," & strCll1 & "<>" & strCllCmp & ")"
    End With
    xlRng.FormatConditions(1).Interior.Color = lngRGB_SttBrClr
End Sub

Attribute VB_Name = "modLPC"
Option Explicit
' [Price Change] Worksheet
' ----
' ** Calling FormMsgV "deletes" the Clip Board! :-(
'    FormMsgV gxlRngDSMsgs, ActiveSheet.Name & " Activated.", fmInfo
' ** Microsoft VBScript Regular Expressions 5.5 - Doesn't exist on Macs! :-(
'    Separate code for Parsing Dates added Version 180620
' ----

' ----
' Items Table Formulae
Const fgconFrmlaF_ISDesc As String = "=IF([MatchI]=0,"""",INDEX(Items,[MatchI],2))"
Const fgconFrmlaG_PkQty As String = "=IF([MatchI]=0,0,INDEX(Items,[MatchI],4))"
' Match Columns
Const fgconFrmlaM_MtchI As String = "=IF([Item Code]<>"""",IFERROR(MATCH([Item Code],ItemNo,0),0),0)"
Const fgconFrmlaN_ItmSR As String = "=IF([MatchI]<>0,INDEX(Items,[MatchI],3),0)"
' Item Description : =IF([MatchI]=0,"",INDEX(Items,[MatchI],2))
' Units per Carton: =IF([MatchI]=0,0,INDEX(Items,[MatchI],4))
' --
' MatchI: =IF([Item Code]<>"",IFERROR(MATCH([Item Code],ItemNo,0),0),0)
' IetmSR: =IF([MatchI]<>0,INDEX(Items,[MatchI],3),0)
' ----

Dim fgxlRngTrgtA1 As Excel.Range
Dim fglngTrgtRows As Long, fglngTrgtCols As Long, fglngTrgtR1 As Long, fglngTrgtC1 As Long, fglngLastDataRow As Long, fglngNextDataRow As Long
Dim fgstrNextDataRow As String, fgstrLastDataRow As String
Dim fgstrTrgtA1 As String, fgstrTypeNm As String, fgstrRngVldType As String, strItemNoR As String, strItemNoL As String, strTypeNmCllAbv As String
Dim fgvarVal As Variant

Dim fglngItemSR As Long, fglngItemNo As Long
Dim fgstrItemNo As String
' ----

Public Function CalcNett(varList As Variant, varBtlDep As Variant, varQDA_D As Variant, varWH_D As Variant, varWH_P As Variant, _
                        varOth_D As Variant, varOth_P As Variant, varUB_D As Variant, varUB_P As Variant) As Currency
' Return Nett Invoice Cost (Current/New).
' ** NB: Freight is not included in Nett Invoice Cost
    Dim curList As Currency, curBtlDep As Currency, curQDA_D As Currency, curWH_D As Currency, curWH_P As Currency
    Dim curOth_D As Currency, curOth_P As Currency, curUB_D As Currency, curUB_P As Currency
    Dim ynWH2 As Boolean, ynOth2 As Boolean, ynUB2 As Boolean
    Dim curRV As Currency, curAmt As Currency

    curList = CCur(IIf(IsNull(varList), 0, varList))
    curBtlDep = CCur(IIf(IsNull(varBtlDep), 0, varBtlDep))
    curQDA_D = CCur(IIf(IsNull(varQDA_D), 0, varQDA_D))
    curWH_D = CCur(IIf(IsNull(varWH_D), 0, varWH_D))
    curWH_P = CCur(IIf(IsNull(varWH_P), 0, varWH_P))
    curOth_D = CCur(IIf(IsNull(varOth_D), 0, varOth_D))
    curOth_P = CCur(IIf(IsNull(varOth_P), 0, varOth_P))
    curUB_D = CCur(IIf(IsNull(varUB_D), 0, varUB_D))
    curUB_P = CCur(IIf(IsNull(varUB_P), 0, varUB_P))
    ynWH2 = (curWH_D <> 0 And curWH_P <> 0)
    ynOth2 = (curOth_D <> 0 And curOth_P <> 0)
    ynUB2 = (curUB_D <> 0 And curUB_P <> 0)
    If (ynWH2 Or ynOth2 Or ynUB2) Then
        CalcNett = -1
        Exit Function
    End If
    curRV = curList
    curRV = curRV + curBtlDep
    curRV = curRV - curQDA_D
    curAmt = IIf((curWH_D <> 0), curWH_D, curRV * curWH_P)
    curRV = curRV - Round(curAmt, 2)
    curAmt = IIf((curOth_D <> 0), curOth_D, curRV * curOth_P)
    curRV = curRV - Round(curAmt, 2)
    curAmt = IIf((curUB_D <> 0), curUB_D, curRV * curUB_P)
    curRV = curRV - Round(curAmt, 2)
    CalcNett = curRV
End Function

Public Sub LPC_WkShChanged(Target As Excel.Range)
' Handle Worksheet Change Event for given TargetRange
    Dim strTypeNmSubDT As String, strTypeNmChgType As String, strTypeNmEffDT As String, strTypeNm As String, strRngVldType As String
    Dim strStt As String, strChgType As String, strClmSOH As String
    Dim dtmToday As Date, dtmSubDT As Date, dtmEffDT As Date, dtm1stDT As Date, dtmNxtDT As Date
    Dim intRV As Integer, intWeekDay As Integer, intDD As Integer, intMM As Integer
    Dim lngDiff As Long
    Dim ynNatIsX As Boolean, ynAnySttIsX As Boolean, ynKeepVal As Boolean, ynOK As Boolean
    Dim xlRng As Excel.Range

    SetClrWkShLPC Target.Worksheet, True
    gstrPrvTrgtPC = fgstrTrgtA1    ' Save in case of error
    SetAddrA1 Target
    strTypeNm = RngValTypeName(fgxlRngTrgtA1)
    strRngVldType = RngValidation(fgxlRngTrgtA1)
    fgvarVal = gxlWkShPC.Range(fgstrTrgtA1).Value
    
    gstrErrMsg = ""  ' Assume Valid
    gstrMsg = ""
    gstrNextCellPC = ""  ' Hold location unless Valid
    ynKeepVal = False
    gynWrn = False
    Select Case fgstrTrgtA1
        Case "C3":  ' Submission Date
            dtmToday = Date
            strTypeNmSubDT = strTypeNm
            Select Case strTypeNmSubDT
                Case "Empty":
                    gstrErrMsg = "Submission Date: Cannot be Blank!"
                    gstrNextCellPC = gstrPrvTrgtPC
                Case "Date":
                    dtmSubDT = gxlWkShPC.Range(fgstrTrgtA1).Value
                Case "String":  ' Test for {".", "-"} Separaters
                    intRV = GetStrDate(CStr(fgvarVal), dtmSubDT)
                    If (intRV = 1) Then
                        ' Parsed a Date -> Save it in the cell
                        gxlWkShPC.Range(fgstrTrgtA1).Value = dtmSubDT
                        strTypeNmSubDT = "Date"
                    Else
                        gstrErrMsg = "Submission Date: Must be a Date Later Than or Equal to Today!"
                        gstrNextCellPC = gstrPrvTrgtPC
                    End If
                Case Else:
                    gstrErrMsg = "Submission Date: Must be a Date Later Than or Equal to Today!"
                    gstrNextCellPC = gstrPrvTrgtPC
            End Select
            If (strTypeNmSubDT = "Date") Then
                ' Check against Today and (Effective Date)
                If (dtmSubDT < dtmToday) Then
                    gstrErrMsg = "Submission Date: Cannot be earlier than Today!"
                    gstrNextCellPC = gstrPrvTrgtPC
                Else
                    ' >= Today.  Check Against Effective Date.
                    strChgType = gxlWkShPC.Range("C4").Value
                    strTypeNmEffDT = RngValTypeName(gxlWkShPC.Range("C5"))
                    If (strTypeNmEffDT = "Date") Then
                        dtmEffDT = gxlWkShPC.Range("C5").Value
                        If (dtmSubDT > dtmEffDT) Then
                            gstrErrMsg = "Submission Date: Must be Before Change Date!"
                            gstrNextCellPC = gstrPrvTrgtPC
                        Else
                            ' dtmSubDT <= dtmEffDT ... Check for 5 Weeks Prior for an "Increase"
                            If (strChgType = "Increase") Then
                                lngDiff = DateDiff("d", dtmSubDT, dtmEffDT)
                                If (lngDiff < 35) Then
                                    gstrErrMsg = "Submission Date: Must be at least 5 Weeks Prior to the Effective Date for Increases!"
                                    gynWrn = True
                                End If
                                ' Next Cell (Change Type)
                                gstrNextCellPC = "C4"
                            Else
                                ' Not an "Increase"
                                ' Next Cell (Change Type)
                                gstrNextCellPC = "C4"
                            End If
                        End If
                    Else
                        ' Next Cell (Change Type)
                        gstrNextCellPC = "C4"
                    End If
                End If
            End If
        Case "C4":  ' Change Type
            If (strTypeNm = "Empty") Then
                gstrErrMsg = "Change Type: Cannot be Blank!"
                gstrNextCellPC = gstrPrvTrgtPC
            Else
                If (strRngVldType <> "List") Then
                    ' Restore Validation
                    gstrErrMsg = "Change Type: Cell cannot be Pasted to!"
                    SetDtaVldList gxlWkShPC.Range("C4"), "Increase,Decrease,CPI,CDS", , "Change Type: Error", , "Only Increase, Decrease, CPI, or CDS are allowed."
                    gstrNextCellPC = gstrPrvTrgtPC
                Else
                    ' Valid.  Set ALM Claim SOH to "N/A" if "Increase", Calculcate potential Effective Date
                    strTypeNmSubDT = RngValTypeName(gxlWkShPC.Range("C3"))
                    If (strTypeNmSubDT <> "Date") Then
                        ' Next Cell (Submission Date)
                        gstrErrMsg = "Change Type: Submission Date Cannot be Blank!"
                        gstrNextCellPC = "C3"
                    Else
                        ' Determine Valid Effective Date
                        strChgType = gxlWkShPC.Range("C4").Value
                        dtmSubDT = gxlWkShPC.Range("C3").Value
                        Select Case strChgType
                            Case "Increase":    dtmEffDT = NextEffDT(dtmSubDT)
                            Case "Decrease":    dtmEffDT = NextMonday(dtmSubDT)
                            Case "CPI":    dtmEffDT = NextCPIDT(dtmSubDT)
                            Case "CDS":    dtmEffDT = NextCDSDT(dtmSubDT)
                        End Select
                        gxlWkShPC.Range("C5").Value = dtmEffDT
                        ' Next Cell (Effective Date)
                        gstrNextCellPC = "C5"
                    End If
                End If
            End If
        Case "C5":  ' Effective Date
            strTypeNmSubDT = RngValTypeName(gxlWkShPC.Range("C3"))
            strTypeNmEffDT = strTypeNm
            strTypeNmChgType = RngValTypeName(gxlWkShPC.Range("C4"))
            If ((strTypeNmSubDT = "Empty") Or (strTypeNmChgType = "Empty")) Then
                If (strTypeNmSubDT = "Empty") Then
                    gstrErrMsg = "Effective Date: Submission Date Cannot be Blank!"
                    gstrNextCellPC = "C3"
                Else
                    gstrErrMsg = "Effective Date: Change Type Cannot be Blank!"
                    gstrNextCellPC = "C4"
                End If
            Else
                Select Case strTypeNmEffDT
                    Case "Empty":
                        gstrErrMsg = "Effective Date: Cannot be Blank!"
                        gstrNextCellPC = gstrPrvTrgtPC
                    Case "Date":
                        dtmEffDT = gxlWkShPC.Range(fgstrTrgtA1).Value
                    Case "String":  ' Test for {".", "-"} Separaters
                        intRV = GetStrDate(CStr(fgvarVal), dtmEffDT)
                        If (intRV = 1) Then
                            ' Parsed a Date -> Save it in the cell
                            gxlWkShPC.Range(fgstrTrgtA1).Value = dtmEffDT
                            strTypeNmEffDT = "Date"
                        Else
                            gstrErrMsg = "Effective Date: Must be a Date On/After the Submission Date!"
                            gstrNextCellPC = gstrPrvTrgtPC
                        End If
                    Case Else:
                        gstrErrMsg = "Effective Date: Must be a Date On/After the Submission Date!"
                        gstrNextCellPC = gstrPrvTrgtPC
                End Select
                If (strTypeNmEffDT = "Date") Then
                    dtmSubDT = gxlWkShPC.Range("C3").Value
                    If (dtmEffDT < dtmSubDT) Then
                        gstrErrMsg = "Effective Date: Must be a Date On/After the Submission Date!"
                        gstrNextCellPC = gstrPrvTrgtPC
                    Else
                        ' On or after Submission Date.  Check WeekDay
                        intWeekDay = Weekday(dtmEffDT)
                        strChgType = gxlWkShPC.Range("C4").Value
                        Select Case strChgType
                            Case "":
                                gstrErrMsg = "Effective Date: Change Type Cannot be Blank!"
                                gstrNextCellPC = "C4"
                            Case "Increase", "CPI":     ' Check for 1st Monday or 1-Feb/Aug
                                intMM = Month(dtmEffDT)
                                intDD = Day(dtmEffDT)
                                ynOK = True
                                dtmNxtDT = NextEffDT(dtmSubDT)
                                Select Case intMM
                                    Case 2, 8:  ' CPI Month -> Day Must be 1st
                                        If (intDD <> 1) Then
                                            dtm1stDT = DateSerial(Year(dtmEffDT), intMM, 1)
                                            gstrErrMsg = "Effective Date: Must be 1-Feb or 1-Aug, i.e. " & Format(dtmNxtDT, "dd/mm/yyyy") & "!"
                                            gstrNextCellPC = gstrPrvTrgtPC
                                            ynOK = False
                                        End If
                                    Case Else:  ' Other Months 1st Monday
                                        If (intWeekDay <> vbMonday) Then
                                            gstrErrMsg = "Effective Date: Must be a Monday, e.g. " & Format(dtmNxtDT, "dd/mm/yyyy") & "!"
                                            gstrNextCellPC = gstrPrvTrgtPC
                                            ynOK = False
                                        Else
                                            ynOK = True
                                            If (dtmEffDT <> dtmNxtDT) Then
                                                ' dtmEffDT is a Monday but <> dtmNxtDT
                                                ynKeepVal = True
                                            End If
                                        End If
                                End Select
                                If (ynOK) Then
                                    ' Continue validating
                                    lngDiff = DateDiff("d", dtmSubDT, dtmEffDT)
                                    If (lngDiff < 35) Then
                                        gxlWkShPC.Range("A3").Font.Color = fmError
                                        gstrErrMsg = "Effective Date: Must be at least " & Format(dtmNxtDT, "dd/mm/yyyy") & ", i.e. 5 Weeks After the Submission Date for Increases!"
                                        gynWrn = True
                                    Else
                                        gxlWkShPC.Range("A3").Font.Color = vbBlack
                                    End If
                                    ' Next Cell (Nat)
                                    gstrNextCellPC = "I3"
                                End If
                            Case "CDS":  ' Check for Next CDS Date {Mar, Jun, Sep, Dec}
                                dtmNxtDT = NextCDSDT(dtmSubDT)
                                If (dtmEffDT <> dtmNxtDT) Then
                                    gstrErrMsg = "Effective Date: Must be Monday " & Format(dtmNxtDT, "dd/mm/yyyy") & "!"
                                    gstrNextCellPC = gstrPrvTrgtPC
                                Else
                                    ' Valid: Next Cell (Nat)
                                    gstrNextCellPC = "I3"
                                End If
                            Case "Decrease":
                                Select Case intWeekDay
                                    Case 1, 7:  ' Sunday, Saturday ...?
                                        dtmNxtDT = NextMonday(dtmSubDT)
                                        gstrErrMsg = "Effective Date: Must be a Weekday, e.g. " & Format(dtmNxtDT, "dd/mm/yyyy") & " On/After the Submission Date for Decreases!"
                                        gstrNextCellPC = gstrPrvTrgtPC
                                    Case Else:  ' Mon to Fri
                                        ' Valid.  Next Cell (Nat)
                                        gstrNextCellPC = "I3"
                                End Select
                        End Select
                    End If
                End If
            End If
        Case "G4", "G5", "G6", "G7", "I4", "I5", "I6", "I7":    ' State / Territory
            ' Valid if ((All States are Empty) And (National is Empty)) or ((Any States = 'X') and (National is Empty))
            gxlWkShPC.Range(fgstrTrgtA1).Value = UCase(fgvarVal)
            ynNatIsX = CheckSttsNatX(gxlWkShPC.Range("I3"))
            ynAnySttIsX = CheckSttsNatX(gxlWkShPC.Range(conSttRng))
            strStt = fgxlRngTrgtA1.Offset(0, -1).Value
            If (ynAnySttIsX) Then
                If (ynNatIsX) Then
                    gstrErrMsg = "States: If " & strStt & " is Selected National Must be Blank!"
                    gstrNextCellPC = gstrPrvTrgtPC
                Else
                    ' Valid. Next Cell (State or Submitted By)
                    gstrNextCellPC = NextDtaCell(gxlWkShPC, "LPC", gstrPrvTrgtPC)
                    PickNatStt "LPC", gxlWkShPC.Range("I3"), gxlWkShPC.Range(conSttRng)
                End If
            Else
                ' Valid. Next Cell (State or Submitted By)
                gstrNextCellPC = NextDtaCell(gxlWkShPC, "LPC", gstrPrvTrgtPC)
                PickNatStt "LPC", gxlWkShPC.Range("I3"), gxlWkShPC.Range(conSttRng)
            End If
            Application.EnableEvents = False
        Case "I3":  ' National
            ' Valid if ((National <> 'X') And (All States are Empty)) Or ((National = 'X')And (All States are Empty))
            gxlWkShPC.Range(fgstrTrgtA1).Value = UCase(fgvarVal)
            ynNatIsX = CheckSttsNatX(gxlWkShPC.Range("I3"))
            ynAnySttIsX = CheckSttsNatX(gxlWkShPC.Range(conSttRng))
            If (ynNatIsX) Then
                ' States Must Be Empty
                If (ynAnySttIsX) Then
                    gstrErrMsg = "National: If National is Selected States Must be Blank!"
                    gstrNextCellPC = "G4"
                Else
                    ' Valid. Next Cell (O4: Submitted By)
                    gstrNextCellPC = "O4"
                    PickNatStt "LPC", gxlWkShPC.Range("I3"), gxlWkShPC.Range(conSttRng)
                End If
            Else
                ' Valid. Next Cell (G4: ACT)
                gstrNextCellPC = "G4"
                PickNatStt "LPC", gxlWkShPC.Range("I3"), gxlWkShPC.Range(conSttRng)
            End If
            Application.EnableEvents = False
        Case "O2", "O3":    ' Supplier Name, Number
            ' Restore Supplier Name
            gstrErrMsg = "Supplier Name/No: Are System Generated!"
            ynKeepVal = True
            ' Vendor Data
            With gxlWkBk.Worksheets("Vndrs")
                If (.Range("A2").Value = "-") Then
                    ' Use PayTo Number and Name
                    gxlWkShPC.Range("O2").Value = .Range("D2")
                    gxlWkShPC.Range("O3").Value = .Range("C2")
                Else
                    ' User Super Vndor Code and Name
                    gxlWkShPC.Range("O2").Value = .Range("B2")
                    gxlWkShPC.Range("O3").Value = .Range("A2")
                End If
            End With
            ' Next Cell (Submitted By)
            gstrNextCellPC = "O4"
        Case "O4":  ' Submitted By
            If (strTypeNm = "Empty") Then
                gstrErrMsg = "Submitted By: Cannot remain blank!"
                gstrNextCellPC = gstrPrvTrgtPC
            Else
                ' Valid.  Next Cell (Vendor Phone Number)
                gstrNextCellPC = "O5"
            End If
        Case "O5":  ' Vendor Phone Number
            If (strTypeNm = "Empty") Then
                gstrErrMsg = "Vendor Phone Number: Cannot remain blank!"
                gstrNextCellPC = gstrPrvTrgtPC
            Else
                ' Valid.  Next Cell (Vendor EMail Address)
                gstrNextCellPC = "O6"
            End If
        Case "O6":  ' Vendor EMail Address.
            If (strTypeNm = "Empty") Then
                gstrErrMsg = "Vendor EMail Address: Cannot remain blank!"
                gstrNextCellPC = gstrPrvTrgtPC
            Else
                ' Valid.  Next Cell (Items)
                gstrNextCellPC = "A17"
            End If
        Case "L9":  ' Notes
            ' Accept what is entered ... for now.
            ' Next Cell (Items)
            gstrNextCellPC = "A17"
        Case Else
            ' Check for Items (Data)
            If ((fglngTrgtR1 >= gconLPCItemDta1) And (fglngTrgtC1 <= 25)) Then
'Stop
                ' ALM Price Change Item
                Application.CutCopyMode = False
                gxlWkShPC.Range(fgstrTrgtA1).Select
                fglngLastDataRow = LastDataRow(gxlWkShPC, "A")
                gstrPrvTrgtPC = fgstrTrgtA1    ' Save for Tab Sequence
                Select Case fglngTrgtC1
                    Case 1:     ' Item Number
                        For Each xlRng In Target.Columns(1).Cells
                            strTypeNm = TypeName(xlRng.Value)
                            Select Case strTypeNm
                                Case "Empty", "Double", "Currency", "Variant()":
                                    ' Set Interior Colour
                                    fglngItemSR = xlRng.Offset(0, 26).Value
                                    If (fglngItemSR <> 0) Then
                                        xlRng.Interior.Color = gconRGB_Itm
                                    Else
                                        xlRng.Interior.Color = gxlWkShPC.Range("A" & CStr(gconLPCItemHdr2)).Interior.Color
                                    End If
                                Case Else:
                                    gstrErrMsg = "Invalid Data Type: " & strTypeNm
                                    gstrNextCellPC = fgstrTrgtA1
                            End Select
                        Next xlRng
                        If (strTypeNm = "Empty") Then
                            gstrErrMsg = ""
                            gstrNextCellPC = fgstrTrgtA1
                        Else
                            ' Next Cell is "Current List W/Sale $"
                            gstrNextCellPC = fgxlRngTrgtA1.Offset(0, 3).Address(False, False, xlA1)
                        End If
                    Case 4 To 13:   ' Current W/Sale $ ... Current U/Bond %
                        For Each xlRng In Target.Columns(1).Cells
                            strTypeNm = TypeName(xlRng.Value)
                            Select Case strTypeNm
                                Case "Empty", "Double", "Currency", "Variant()":
                                    ' Clear associated "New" Value Column(s)
                                    xlRng.Offset(0, 11).Value = xlRng.Value
                                    ' Next Cell is "New List W/Sale $" or Next
                                    If (fglngTrgtC1 = 13) Then
                                        gstrNextCellPC = fgxlRngTrgtA1.Offset(0, 2).Address(False, False, xlA1)
                                    Else
                                        gstrNextCellPC = fgxlRngTrgtA1.Offset(0, 1).Address(False, False, xlA1)
                                    End If
                                Case Else:
                                    gstrErrMsg = "Invalid Data Type: " & strTypeNm
                                    gstrNextCellPC = fgstrTrgtA1
                            End Select
                        Next xlRng
                    Case 15 To 24:   ' New W/Sale $ ... New U/Bond %
                        For Each xlRng In Target.Columns(1).Cells
                            strTypeNm = TypeName(xlRng.Value)
                            Select Case strTypeNm
                                Case "Empty", "Double", "Currency", "Variant()":
                                    ' Next Cell is "Item Code" or Next
                                    If (fglngTrgtC1 = 24) Then
                                        gstrNextCellPC = fgxlRngTrgtA1.Offset(1, -23).Address(False, False, xlA1)
                                    Else
                                        gstrNextCellPC = fgxlRngTrgtA1.Offset(0, 1).Address(False, False, xlA1)
                                    End If
                                Case Else:
                                    gstrErrMsg = "Invalid Data Type: " & strTypeNm
                                    gstrNextCellPC = fgstrTrgtA1
                            End Select
                        Next xlRng
                    Case Else:
                        gstrMsg = "Items: Use the [Tab] Key within this Table."
                End Select
            Else
'                gstrErrMsg = "[" & fgstrTrgtA1 & "] No Data Allowed Here!"
'                gstrNextCellPC = FirstEmptyDataCell(Target.Worksheet, "LPC")
            End If
    End Select
    If (gstrErrMsg <> "") Then
        gxlRngPCMsgs.Font.Color = IIf(gynWrn, fmWrn, fmError)
        gxlRngPCMsgs.Value = gstrErrMsg
        If (Not ynKeepVal) Then
            fgxlRngTrgtA1.Value = Null
        End If
    Else
        gxlRngPCMsgs.Font.Color = fmInfo
        gxlRngPCMsgs.Value = gstrMsg
    End If
End Sub

Public Sub LPC_WkShSelChgd(Target As Excel.Range)
' Handle Worksheet Select Change Event for given TargetRange
    Dim strStt As String
    Dim lngSttNo As Long

    SetClrWkShLPC Target.Worksheet, True
    SetAddrA1 Target
    fgstrTypeNm = RngValTypeName(fgxlRngTrgtA1)
    fgstrRngVldType = RngValidation(fgxlRngTrgtA1)
    gynNextDtaCellPC = False
    gstrNextCellPC = ""
    gstrMsg = ""
    gstrErrMsg = ""
    gynWrn = False
    gstrPrvTrgtPC = fgstrTrgtA1    ' Save for Tab Sequence
    Select Case fgstrTrgtA1
        Case "A1":  ' Version
            gstrMsg = "Price Change Version."
            gynWrn = True
            gstrNextCellPC = FirstEmptyDataCell(gxlWkShPC, "LPC")
            gynNextDtaCellPC = True
        Case "K1":  ' Cell Information or Error Message."
            gstrMsg = gconCellInfo
            gynWrn = True
            gstrNextCellPC = FirstEmptyDataCell(gxlWkShPC, "LPC")
            gynNextDtaCellPC = True
        Case "C3":  ' Submission Date
            gstrMsg = gconSubDT
        Case "C4":  ' Type of Change
            gstrMsg = gconChgType
        Case "C5":  ' Effective Date
            Select Case CStr(fgxlRngTrgtA1.Offset(-1, 0).Value)
                Case "Increase":    gstrMsg = gconIncDT
                Case "Decrease":    gstrMsg = gconDecDT
                Case "CPI":     gstrMsg = gconCPIDT
                Case "CDS":     gstrMsg = gconCDSDT
                Case Else:      gstrMsg = gconEffDT & vbCrLf & "Choose Change Type First."
            End Select
        Case "I3":  ' National
            gstrMsg = gconNat
        Case "G4", "G5", "G6", "G7", "I4", "I5", "I6", "I7":    ' State / Territory
            strStt = fgxlRngTrgtA1.Offset(0, -1).Value
            lngSttNo = StateNo(strStt)
            gstrMsg = strStt & ": Select X for " & strStt & " (State Code: " & CStr(lngSttNo) & ")." & vbCrLf & _
                                    "If this Price Change applies to All States / Territories, Select X for National Only."
        Case "O2", "O3":    ' Supplier Name, Number
            gstrMsg = gconSuppNoNm
        Case "O4":  ' Submitted By
            gstrMsg = gconSubBy
        Case "O5":  ' Vendor Phone Number
            gstrMsg = gconSupPhNo
        Case "O6":  ' Vendor Email
            gstrMsg = gconSupEMail
        Case "K7": ' Email Subject
            gstrMsg = gconEMail
        Case "L9": ' Notes
            gstrMsg = gconNotes
        Case Else:
            ' Check for Items (Header or Data)
            If ((fglngTrgtR1 >= gconLPCItemHdr1) And (fglngTrgtC1 <= 25)) Then
                Select Case fglngTrgtR1
                    Case gconLPCItemHdr1:   ' 1st Item Header Row
                        Select Case fglngTrgtC1
                            Case 1 To 3:    gstrMsg = "Items Header: Item Data."
                            Case 4 To 14:   gstrMsg = "Items Header: Current Price Data."
                            Case 15 To 25:  gstrMsg = "Items Header: New Price Data."
                        End Select
                    Case gconLPCItemHdr2:   ' 2nd Item Header Row
                        Select Case fglngTrgtC1
                            Case 1:     gstrMsg = "Items Header: Item Code (Parent Item) Only.  Note this can be copied from the Item Info Tab." & vbCrLf & _
                                            "Item Description, and Units per Carton will show associated values."
                            Case 2:     gstrMsg = "Items Header: Item Description.  The Descripton for the Item."
                            Case 3:     gstrMsg = "Items Header: Units per Carton.  The Number of Units per Carton (i.e. Pack Size) for the Item."
                            Case 4:     gstrMsg = "Items Header: Current List W/Sale $.  Current Wholesale List ($) for the Item."
                            Case 5:     gstrMsg = "Items Header: Current Btl Dep $.  Current Bottle Deposit for the Item (if applicable)."
                            Case 6:     gstrMsg = "Items Header: Current Qty Disc $.  Current Quantity Discount ($) for the Item."
                            Case 7, 8:  gstrMsg = "Items Header: Current Warehouse Discount ($ or %).  Enter Only One Value for the Item."
                            Case 9:     gstrMsg = "Items Header: Current Freight $.  Current Freight ($) for the Item (if applicable)."
                            Case 10, 11:    gstrMsg = "Items Header: Current Other ($ or %).  Enter Only One Value for the Item."
                            Case 12, 13:    gstrMsg = "Items Header: Current Under Bond ($ or %).  Enter Only One Value for the Item."
                            Case 14:    gstrMsg = "Items Header: Current Nett Inv $.  Current Nett Invoice ($) for the Item (Calculated)."
                            Case 15:    gstrMsg = "Items Header: New List W/Sale $.  New Wholesale $List for the Item."
                            Case 16:    gstrMsg = "Items Header: New Btl Dep $.  New Bottle Deposit for the Item (if applicable)."
                            Case 17:    gstrMsg = "Items Header: New Qty Disc $.  New Quantity Discount ($) for the Item."
                            Case 18, 19:    gstrMsg = "Items Header: New Warehouse Discount ($ or %).  Enter Only One Value for the Item."
                            Case 20:    gstrMsg = "Items Header: New Freight $.  Current Freight ($) for the Item (if applicable)."
                            Case 21, 22:    gstrMsg = "Items Header: New Other ($ or %).  Enter Only One Value for the Item."
                            Case 23, 24:    gstrMsg = "Items Header: New Under Bond ($ or %).  Enter Only One Value for the Item."
                            Case 25:    gstrMsg = "Items Header: New Nett Inv $.  Current Nett Invoice ($) for the Item (Calculated)."
                        End Select
                    Case Else:  ' Possible Item Data
'Stop
                        ' Determine Next Data Cell
                        fglngLastDataRow = LastDataRow(gxlWkShPC, "A")    ' Item Code
                        fgstrLastDataRow = CStr(fglngLastDataRow)
                        ' ----
                        ' ** Tables: ListRow(1) is Not considered 'Blank' even when it is! :-(
                        strItemNoL = CStr(gxlWkShPC.Range("A" & fgstrLastDataRow).Value)
                        If ((strItemNoL = "") And (fglngLastDataRow > gconLPCItemDta1)) Then
                            fglngLastDataRow = fglngLastDataRow - 1
                            fgstrLastDataRow = CStr(fglngLastDataRow)
                        End If
                        strItemNoL = CStr(gxlWkShPC.Range("A" & fgstrLastDataRow).Value)    ' Last ItemNo
                        strItemNoR = CStr(gxlWkShPC.Range("A" & fglngTrgtR1).Value)         ' Current Row ItemNo
                        strTypeNmCllAbv = IIf((fglngTrgtR1 > fglngLastDataRow), RngValTypeName(gxlWkShPC.Cells(fglngLastDataRow, fglngTrgtC1)), "")
                        fglngNextDataRow = fglngLastDataRow + 1
                        If (fglngTrgtC1 = 1) Then
                            ' Item Code ...
                            If (strItemNoR = "") Then
                                ' ItemNo Current Row is Blank ...
                                If (fglngTrgtR1 > fglngLastDataRow And strItemNoL = "") Then
                                    gstrNextCellPC = "A" & CStr(fglngLastDataRow)
                                    gynNextDtaCellPC = True
                                Else
                                    ' New Item Row - OK
                                End If
                            Else
                                ' ItemNo keyed - OK
                            End If
                        Else
                            ' Other Field ...
                            If (strItemNoL <> "" And strItemNoR = "") Then
                                ' Row past LastDataRow -> goto LastData Col+1
                                gstrNextCellPC = gxlWkShPC.Cells(fglngLastDataRow, fglngTrgtC1 + 1).Address(False, False, xlA1)
                                gynNextDtaCellPC = True
                            Else
                                ' No Change
                            End If
                        End If
                        If (Not gynNextDtaCellPC) Then
                            ' In Item Data Range ...
                            If (CompleteHdr(gxlWkShPC, "LPC")) Then
                                Select Case fglngTrgtC1
                                    Case 1:     ' Item Code
                                        fgstrItemNo = Trim(CStr(fgxlRngTrgtA1.Value))
                                        fglngItemSR = fgxlRngTrgtA1.Offset(0, 26).Value
                                        If (fglngItemSR <> 0) Then
                                            gstrMsg = "Items: Item Code.  Item Code (" & fgstrItemNo & ") " & _
                                                        "is part of Sub-Range (" & CStr(fglngItemSR) & ")."
                                            gynWrn = True
                                        Else
                                            gstrMsg = "Items: Item Code.  Item Description and Units per Carton will show associated values."
                                        End If
                                    Case 2:     ' Item Descritption
                                        gstrNextCellPC = fgxlRngTrgtA1.Offset(0, 2).Address(False, False, xlA1)
                                        gynNextDtaCellPC = True
                                    Case 3:     ' Units per Carton
                                        gstrNextCellPC = fgxlRngTrgtA1.Offset(0, 1).Address(False, False, xlA1)
                                        gynNextDtaCellPC = True
                                    Case 4:     gstrMsg = "Items: Current List W/Sale $.  Current Wholesale List ($) for the Item."
                                    Case 5:     gstrMsg = "Items: Current Btl Dep $.  Current Bottle Deposit for the Item (if applicable)."
                                    Case 6:     gstrMsg = "Items : Current Qty Disc $.  Current Quantity Discount ($) for the Item."
                                    Case 7, 8:  gstrMsg = "Items : Current Warehouse Discount ($ or %).  Enter Only One Value for the Item."
                                    Case 9:     gstrMsg = "Items: Current Freight $.  Current Freight ($) for the Item (if applicable)."
                                    Case 10, 11:    gstrMsg = "Items: Current Other ($ or %).  Enter Only One Value for the Item."
                                    Case 12, 13:    gstrMsg = "Items: Current Under Bond ($ or %).  Enter Only One Value for the Item."
                                    Case 14:    ' Current Nett Inv Cost $ (Calculated) for this Item.
                                        gstrNextCellPC = fgxlRngTrgtA1.Offset(0, 1).Address(False, False, xlA1)
                                        gynNextDtaCellPC = True
                                    Case 15:    gstrMsg = "Items: New List W/Sale $.  New Wholesale $List for the Item."
                                    Case 16:    gstrMsg = "Items: New Btl Dep $.  New Bottle Deposit for the Item (if applicable)."
                                    Case 17:    gstrMsg = "Items: New Qty Disc $.  New Quantity Discount ($) for the Item."
                                    Case 18, 19:    gstrMsg = "Items: New Warehouse Discount ($ or %).  Enter Only One Value for the Item."
                                    Case 20:    gstrMsg = "Items: New Freight $.  Current Freight ($) for the Item (if applicable)."
                                    Case 21, 22:    gstrMsg = "Items: New Other ($ or %).  Enter Only One Value for the Item."
                                    Case 23, 24:    gstrMsg = "Items: New Under Bond ($ or %).  Enter Only One Value for the Item."
                                    Case 25:    ' New Nett Inv Cost $ (Calculated) for this Item.
                                        gstrNextCellPC = fgxlRngTrgtA1.Offset(0, -1).Address(False, False, xlA1)
                                        gynNextDtaCellPC = True
                                    Case Else:
                                        gstrMsg = "Items: Use the [Tab] Key within this Table."
                                End Select
                            Else
                                gstrMsg = "Items: Incomplete Header!"
                                gstrNextCellPC = FirstEmptyDataCell(gxlWkShPC, "LPC")
                                gynWrn = True
                                gynNextDtaCellPC = True
                            End If  ' CompleteHdr()
                        End If
                End Select
            Else
                ' Not a Data Entry Area! ...
'Stop
                gstrNextCellPC = NextDtaCell(gxlWkShPC, "LPC", fgstrTrgtA1)
                gynNextDtaCellPC = True
            End If
    End Select
    If (gstrErrMsg = "") Then
        If (gstrMsg <> "") Then
'            gxlRngDSMsgs.Font.Italic = gynWrn
            If (gynWrn) Then
                gxlRngPCMsgs.Font.Color = fmWrn
            Else
                gxlRngPCMsgs.Font.Color = fmInfo
            End If
            gxlRngPCMsgs.Value = gstrMsg
        End If
    Else
        gxlRngPCMsgs.Font.Color = IIf(gynWrn, fmWrn, fmError)
        gxlRngPCMsgs.Value = gstrErrMsg
    End If
    ' Update Email Subject
    gxlWkShPC.Range("K7").Value = EMailSubj(gxlWkShPC, "LPC")
End Sub

Private Sub SetAddrA1(xlRngTgt As Excel.Range)
' Set Address fglngTrgtR1, fglngTrgtC1, and strTrgtA1
    fglngTrgtRows = xlRngTgt.Rows.Count
    fglngTrgtCols = xlRngTgt.Columns.Count
    Set fgxlRngTrgtA1 = Nothing
    Set fgxlRngTrgtA1 = xlRngTgt.Range("A1")
    fgstrTrgtA1 = fgxlRngTrgtA1.Address(False, False, xlA1)
    fglngTrgtR1 = fgxlRngTrgtA1.Row
    fglngTrgtC1 = fgxlRngTrgtA1.Column
End Sub



Attribute VB_Name = "modLPCVldtn"
Option Explicit
' ====
' IFNA() was introduced in Office 2013
' ... replaced with Older IFERROR() :-(
' ====

Public Const conSttRng As String = "G4:G7,I4:I7"
' ----

Public Function CheckSttsNatX(xlSttOrNatRng As Excel.Range) As Boolean
' Check States or Nat Range.  Return ynAnyX
    Dim ynRVAnyX As Boolean
    Dim xlRng As Excel.Range

    ynRVAnyX = False
    For Each xlRng In xlSttOrNatRng
        ynRVAnyX = ynRVAnyX Or (xlRng.Value = "X")
    Next xlRng
    CheckSttsNatX = ynRVAnyX
End Function

Public Function CompleteHdr(xlWkSh As Excel.Worksheet, strWkShType As String) As Boolean
' Return True if Header Data is Complete else False
    Dim ynSubDT As Boolean, ynChgType As Boolean, ynEffDT As Boolean, ynIsNatX As Boolean, ynAnySttsX As Boolean, ynLocs As Boolean
    Dim ynVndrSub As Boolean, ynVndrPhNo As Boolean, ynVndrEMail As Boolean

    If (strWkShType = "LPC") Then
        ' [Price Change]: Check for Minimum Required Header Field Data
        ynSubDT = (TypeName(xlWkSh.Range("C3").Value) = "Date")
        ynChgType = (TypeName(xlWkSh.Range("C4").Value) = "String")
        ynEffDT = (TypeName(xlWkSh.Range("C5").Value) = "Date")
        ' ----
        ynIsNatX = CheckSttsNatX(xlWkSh.Range("I3"))
        ynAnySttsX = CheckSttsNatX(xlWkSh.Range(conSttRng))
        ynLocs = ynIsNatX Xor ynAnySttsX
        ' ----
        ynVndrSub = (TypeName(xlWkSh.Range("O4").Value) = "String")
        ynVndrPhNo = (TypeName(xlWkSh.Range("O5").Value) <> "Empty")
        ynVndrEMail = (TypeName(xlWkSh.Range("O6").Value) <> "Empty")
        ' ----
        CompleteHdr = ynSubDT And ynChgType And ynEffDT And ynLocs And ynVndrSub And ynVndrPhNo And ynVndrEMail
    End If
End Function

Public Sub PickNatStt(strWkShType As String, xlRngNat As Excel.Range, xlRngStts As Excel.Range)
' Pick National (All Avaiable States, or selected States)
    Dim xlWkShStts As Excel.Worksheet
    Dim xlRng As Excel.Range
    Dim aynStatesX(1 To 8) As Boolean, ynSttX As Boolean
    Dim strWSCol As String, strStt As String
    Dim lngRow As Long, lngLastStt As Long, lngSttNo As Long

    Application.EnableEvents = False    ' To Prevent _SelectionChange from Responding to Changing Message or Target
    Set xlWkShStts = gxlWkBk.Worksheets("Stts")
    lngLastStt = LastDataRow(xlWkShStts, "A")
    For lngRow = 1 To 8
        aynStatesX(lngRow) = False
    Next lngRow
    If (strWkShType = "LPC") Then
        ' [Price Change]
        strWSCol = "C"
    End If
    If (xlRngNat.Value = "X") Then
        ' All States in [Stts]
        For lngRow = 2 To lngLastStt
            xlWkShStts.Range(strWSCol & CStr(lngRow)).Value = "Y"
        Next
    Else
        ' Selected And Available
        For Each xlRng In xlRngStts
            strStt = xlRng.Offset(0, -1).Value
            ynSttX = (xlRng.Value = "X")
            lngSttNo = StateNo(strStt)
            aynStatesX(lngSttNo) = ynSttX
        Next xlRng
        For lngRow = 2 To lngLastStt
            strStt = xlWkShStts.Range("A" & CStr(lngRow)).Value
            lngSttNo = StateNo(strStt)
            xlWkShStts.Range(strWSCol & CStr(lngRow)).Value = IIf((aynStatesX(lngSttNo)), "Y", "N")
        Next
    End If
    ' ----
    Set xlWkShStts = Nothing
    Application.EnableEvents = True     ' ReEnable Events
End Sub

Public Sub DelDtaVldList(xlRng As Excel.Range)
' Delete Cell Validation
    With xlRng.Validation
        .Delete
    End With
    xlRng.Value = Null
End Sub

Public Sub SetDtaVldList(xlRng As Excel.Range, strFrml1List As String, Optional strInpTtl As String = "", Optional strErrTtl As String = "", _
                            Optional strInpMsg As String = "", Optional strErrMsg As String = "", Optional varDfltVal As Variant = Null)
' Set Cell Validation (Type:=xlValidatelist, AlertStyle:=xlValidAlertStop, Operator :=xlBetweem)
    With xlRng.Validation
        .Delete
        .Add xlValidateList, xlValidAlertStop, xlBetween, strFrml1List
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = strInpTtl
        .ErrorTitle = strErrTtl
        .InputMessage = strInpMsg
        .ErrorMessage = strErrMsg
        .ShowInput = True
        .ShowError = True
    End With
    xlRng.Value = varDfltVal
End Sub

Public Sub ReSetDataEntry()
Attribute ReSetDataEntry.VB_ProcData.VB_Invoke_Func = " \n14"
' ReSet [Price Change] Standard Validation lists, Dates, Vendor Data
    ResetWkBk
    Application.EnableEvents = False    ' Disable Events
    ' Dates
    ' [Price Change]
    gxlWkShPC.Range("C3").Value = Null
    gxlRngPCMsgs.Font.Color = fmInfo
    gxlRngPCMsgs.Value = gconSubDT
    gxlWkShPC.Range("C4").Value = Null
    gxlWkShPC.Range("C5").Value = Null
    ' ----
    ' Vendor Data
    If (gynIsVndr) Then
        With gxlWkBk.Worksheets("Vndrs")
            If (.Range("A2").Value = "-") Then
                ' Use PayTo Number and Name
                gxlWkShPC.Range("O2").Value = .Range("D2")
                gxlWkShPC.Range("O3").Value = .Range("C2")
            Else
                ' Use Super Vndor Code and Name
                gxlWkShPC.Range("O2").Value = .Range("B2")
                gxlWkShPC.Range("O3").Value = .Range("A2")
            End If
        End With
    Else
        gxlWkShPC.Range("O2").Value = Null
        gxlWkShPC.Range("O3").Value = Null
    End If
    gxlWkShPC.Range("O4").Value = Null
    gxlWkShPC.Range("O5").Value = Null
    gxlWkShPC.Range("O6").Value = Null
    ' ----
    ' Change Type
    SetDtaVldList gxlWkShPC.Range("C4"), "Increase,Decrease,CPI,CDS", , "Change Type: Error", , "Only Increase, Decrease, CPI, or CDS are allowed."
    ' ----
    ' Derived Email Subject
    gxlWkShPC.Range("K7").Value = EMailSubj(gxlWkShPC, "LPC")
    ' ----
    ' Notes
    gxlWkShPC.Range("L9").Value = Null
    ' ----
    ' National and States
    SetDtaVldList gxlWkShPC.Range("I3"), "x,X", , "National: Error", , "Only X or Blank are allowed."
    SetDtaVldList gxlWkShPC.Range("G4"), "x,X", , "ACT: Error", , "Only X or Blank are allowed."
    SetDtaVldList gxlWkShPC.Range("G5"), "x,X", , "NSW: Error", , "Only X or Blank are allowed."
    SetDtaVldList gxlWkShPC.Range("G6"), "x,X", , "NT: Error", , "Only X or Blank are allowed."
    SetDtaVldList gxlWkShPC.Range("G7"), "x,X", , "QLD: Error", , "Only X or Blank are allowed."
    SetDtaVldList gxlWkShPC.Range("I4"), "x,X", , "SA: Error", , "Only X or Blank are allowed."
    SetDtaVldList gxlWkShPC.Range("I5"), "x,X", , "TAS: Error", , "Only X or Blank are allowed."
    SetDtaVldList gxlWkShPC.Range("I6"), "x,X", , "VIC: Error", , "Only X or Blank are allowed."
    SetDtaVldList gxlWkShPC.Range("I7"), "x,X", , "WA: Error", , "Only X or Blank are allowed."
    ' ----
    Application.EnableEvents = True     ' ReEnable Events
End Sub


INQUEST-PP=macro
