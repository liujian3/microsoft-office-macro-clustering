Attribute VB_Name = "CaptureScreen"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

#If VBA7 And Win64 Then

    Private Declare PtrSafe Function GetForegroundWindow Lib "user32" () As LongPtr
    Private Declare PtrSafe Function GetDesktopWindow Lib "user32" () As LongPtr
    
    Private Declare PtrSafe Function GetDC Lib "user32" (ByVal hWnd As LongPtr) As LongPtr
    Private Declare PtrSafe Function ReleaseDC Lib "user32" (ByVal hWnd As LongPtr, ByVal hdc As LongPtr) As Long
    Private Declare PtrSafe Function BitBlt Lib "gdi32" (ByVal hDestDC As LongPtr, ByVal X As Long, ByVal Y As Long, ByVal nWidth As Long, ByVal nHeight As Long, ByVal hSrcDC As LongPtr, ByVal XSrc As Long, ByVal YSrc As Long, ByVal dwRop As Long) As Long
    
    Private Declare PtrSafe Function OpenClipboard Lib "user32" (ByVal hWnd As LongPtr) As Long
    Private Declare PtrSafe Function CloseClipboard Lib "user32" () As Long
    Private Declare PtrSafe Function EmptyClipboard Lib "user32" () As Long
    Private Declare PtrSafe Function GetClipboardData Lib "user32" (ByVal wFormat As Long) As LongPtr
    Private Declare PtrSafe Function SetClipboardData Lib "user32" (ByVal wFormat As Long, ByVal hMem As LongPtr) As LongPtr

    Private Declare PtrSafe Function GetWindowRect Lib "user32" (ByVal hWnd As LongPtr, lpRect As RECT) As Long
    Private Declare PtrSafe Function IsClipboardFormatAvailable Lib "User32.dll" (ByVal wFormat As Long) As Long
    Private Declare PtrSafe Function GetWindowDC Lib "user32" (ByVal hWnd As LongPtr) As LongPtr
    Private Declare PtrSafe Function CreateCompatibleDC Lib "gdi32" (ByVal hdc As LongPtr) As LongPtr
    Private Declare PtrSafe Function CreateCompatibleBitmap Lib "gdi32" (ByVal hdc As LongPtr, ByVal nWidth As Long, ByVal nHeight As Long) As LongPtr
    Private Declare PtrSafe Function SelectObject Lib "gdi32" (ByVal hdc As LongPtr, ByVal hObject As LongPtr) As LongPtr
    Private Declare PtrSafe Function DeleteDC Lib "gdi32" (ByVal hdc As LongPtr) As Long
    Private Declare PtrSafe Function DeleteObject Lib "gdi32" (ByVal hObject As LongPtr) As Long
    
    Private Declare PtrSafe Function LoadImage Lib "user32" Alias "LoadImageA" (ByVal hInst As LongPtr, ByVal lpsz As String, ByVal un1 As Long, ByVal n1 As Long, ByVal n2 As Long, ByVal un2 As Long) As LongPtr
    Private Declare PtrSafe Function PrintWindow Lib "User32.dll" (ByVal hWnd As LongPtr, ByVal hdcBlt As LongPtr, ByVal nFlags As Long) As Long
    Private Declare PtrSafe Function UpdateWindow Lib "user32" (ByVal hWnd As LongPtr) As Long

    Private Declare PtrSafe Function OleCreatePictureIndirect Lib "oleaut32" (PicDesc As PicBmp, RefIID As GUID, ByVal fPictureOwnsHandle As LongPtr, IPic As IPicture) As Long
    Private Declare PtrSafe Function GetDeviceCaps Lib "gdi32" (ByVal hdc As LongPtr, ByVal nIndex As Long) As Long
    Private Declare PtrSafe Function GetSystemPaletteEntries Lib "gdi32" (ByVal hdc As LongPtr, ByVal wStartIndex As Long, ByVal wNumEntries As Long, lpPaletteEntries As PALETTEENTRY) As Long
    Private Declare PtrSafe Function CreatePalette Lib "gdi32" (lpLogPalette As LOGPALETTE) As LongPtr
    Private Declare PtrSafe Function SelectPalette Lib "gdi32" (ByVal hdc As LongPtr, ByVal hPalette As LongPtr, ByVal bForceBackground As Long) As LongPtr
    Private Declare PtrSafe Function RealizePalette Lib "gdi32" (ByVal hdc As LongPtr) As Long
    Private Declare PtrSafe Function GetSystemMetrics Lib "user32" (ByVal nIndex As Long) As Long

    Private Declare PtrSafe Function DwmGetWindowAttribute Lib "Dwmapi" (ByVal hWnd As LongPtr, ByVal t As Long, lpRect As RECT, ByVal Size As Long) As Long
    
    Private Declare PtrSafe Function PatBlt Lib "gdi32" (ByVal hdc As LongPtr, ByVal nXLeft As Long, ByVal nYLeft As Long, ByVal nWidth As Long, ByVal nHeight As Long, ByVal dwRop As Long) As Long
    
#Else

    Private Declare Function GetDesktopWindow Lib "user32" () As Long
    Private Declare Function GetForegroundWindow Lib "user32" () As Long
    Private Declare Function GetDC Lib "user32" (ByVal hWnd As Long) As Long
    Private Declare Function ReleaseDC Lib "user32" (ByVal hWnd As Long, ByVal hdc As Long) As Long
    Private Declare Function BitBlt Lib "gdi32" (ByVal hdc As Long, ByVal X As Long, ByVal Y As Long, ByVal w As Long, ByVal h As Long, ByVal hdcS As Long, ByVal xS As Long, ByVal yS As Long, ByVal dwRop As Long) As Long
    
    Private Declare Function OpenClipboard Lib "user32" (ByVal hWndNewOwner As Long) As Long
    Private Declare Function CloseClipboard Lib "user32" () As Long
    Private Declare Function EmptyClipboard Lib "user32" () As Long
    Private Declare Function GetClientRect Lib "user32" (ByVal hWnd As Long, lpRect As RECT) As Long
    Private Declare Function SetClipboardData Lib "user32" (ByVal uFormat As Long, ByVal hMem As Long) As Long
    
    Private Declare Function GetWindowRect Lib "user32" (ByVal hWnd As Long, lpRect As RECT) As Long
    Private Declare Function IsClipboardFormatAvailable Lib "User32.dll" (ByVal wFormat As Long) As Long
    Private Declare Function GetWindowDC Lib "user32" (ByVal hWnd As Long) As Long
    Private Declare Function CreateCompatibleDC Lib "gdi32" (ByVal hdc As Long) As Long
    Private Declare Function CreateCompatibleBitmap Lib "gdi32" (ByVal hdc As Long, ByVal nWidth As Long, ByVal nHeight As Long) As Long
    Private Declare Function SelectObject Lib "gdi32" (ByVal hdc As Long, ByVal hgdiobj As Long) As Long
    Private Declare Function DeleteDC Lib "gdi32" (ByVal hdc As Long) As Long
    Private Declare Function DeleteObject Lib "gdi32" (ByVal hObject As Long) As Long
    
    Private Declare Function LoadImage Lib "user32" Alias "LoadImageA" (ByVal hInst As Long, ByVal lpszName As String, ByVal uType As Long, ByVal cxDesired As Long, ByVal cyDesired As Long, ByVal fuLoad As Long) As Long
    Private Declare Function PrintWindow Lib "User32.dll" (ByVal hWnd As Long, ByVal hdcBlt As Long, ByVal nFlags As Long) As Long
    Private Declare Function UpdateWindow Lib "user32" (ByVal hWnd As LongPtr) As Long

    Private Declare Function OleCreatePictureIndirect Lib "olepro32" (PicDesc As PicBmp, RefIID As GUID, ByVal fPictureOwnsHandle As Long, IPic As IPicture) As Long
    Private Declare Function GetDeviceCaps Lib "gdi32" (ByVal hdc As Long, ByVal iCapabilitiy As Long) As Long
    Private Declare Function GetSystemPaletteEntries Lib "gdi32" (ByVal hdc As Long, ByVal wStartIndex As Long, ByVal wNumEntries As Long, lpPaletteEntries As PALETTEENTRY) As Long
    Private Declare Function CreatePalette Lib "gdi32" (lpLogPalette As LOGPALETTE) As Long
    Private Declare Function SelectPalette Lib "gdi32" (ByVal hdc As Long, ByVal hPalette As Long, ByVal bForceBackground As Long) As Long
    Private Declare Function RealizePalette Lib "gdi32" (ByVal hdc As Long) As Long
    Private Declare Function GetSystemMetrics Lib "user32" (ByVal nIndex As Long) As Long

    Private Declare Function DwmGetWindowAttribute Lib "Dwmapi" (ByVal hWnd As LongPtr, ByVal t As Long, lpRect As RECT, ByVal Size As Long) As Long
    Private Declare Function PatBlt Lib "gdi32" (ByVal hdc As Long, ByVal nXLeft As Long, ByVal nYLeft As Long, ByVal nWidth As Long, ByVal nHeight As Long, ByVal dwRop As Long) As Long
    Private Declare Function DwmIsCompositionEnabled Lib "Dwmapi" (b As Boolean) As Long
    

#End If


#If VBA7 And Win64 Then
    Private Type PicBmp
       Size As Long
       Type As Long
       hBmp As LongPtr
       hPal As LongPtr
       Reserved As Long
    End Type
#Else
    Private Type PicBmp
       Size As Long
       Type As Long
       hBmp As Long
       hPal As Long
       Reserved As Long
    End Type
#End If

Private Type RECT
    Left As Long
    Top As Long
    Right As Long
    Bottom As Long
End Type

Private Type GUID
    Data1 As Long
    Data2 As Integer
    Data3 As Integer
    Data4(7) As Byte
End Type

Private Type PALETTEENTRY
    peRed As Byte
    peGreen As Byte
    peBlue As Byte
    peFlags As Byte
End Type

Private Type LOGPALETTE
    palVersion As Integer
    palNumEntries As Integer
    palPalEntry(255) As PALETTEENTRY
End Type

Private Const SRCCOPY = &HCC0020
Private Const CAPTUREBLT = &H40000000
Private Const CF_BITMAP = 2
Private Const IMAGE_BITMAP = 0
Private Const LR_LOADFROMFILE = &H10
Private Const RASTERCAPS As Long = 38
Private Const RC_PALETTE As Long = &H100
Private Const SIZEPALETTE As Long = 104

Private Const SM_CXSCREEN As Long = 0
Private Const SM_CYSCREEN As Long = 1

Private Const WHITENESS As Long = &HFF0062
#If VBA7 And Win64 Then
    Private Function CaptureWindow(ByVal hWndSrc As LongPtr, ByVal Client As Boolean, ByVal LeftSrc As Long, ByVal TopSrc As Long, ByVal WidthSrc As Long, ByVal HeightSrc As Long) As IPictureDisp
        
        Dim r As Long
        
        Dim hDCSrc As LongPtr
        Dim hDCMemory As LongPtr
        Dim hBmp As LongPtr
        Dim hBmpPrev As LongPtr
        Dim RasterCapsScrn As Long
        Dim HasPaletteScrn As Long
        Dim PaletteSizeScrn As Long
        Dim hPal As LongPtr
        Dim hPalPrev As LongPtr
        Dim LogPal As LOGPALETTE
        
        hDCSrc = IIf(Client, GetDC(hWndSrc), GetWindowDC(hWndSrc))
        
        hDCMemory = CreateCompatibleDC(hDCSrc)
        
        hBmp = CreateCompatibleBitmap(hDCSrc, WidthSrc, HeightSrc)
        hBmpPrev = SelectObject(hDCMemory, hBmp)
        
        RasterCapsScrn = GetDeviceCaps(hDCSrc, RASTERCAPS)
        HasPaletteScrn = RasterCapsScrn And RC_PALETTE
        PaletteSizeScrn = GetDeviceCaps(hDCSrc, SIZEPALETTE)
        
        If HasPaletteScrn And (PaletteSizeScrn = 256) Then
            LogPal.palVersion = &H300
            LogPal.palNumEntries = 256
            r = GetSystemPaletteEntries(hDCSrc, 0, 256, LogPal.palPalEntry(0))
            hPal = CreatePalette(LogPal)
            hPalPrev = SelectPalette(hDCMemory, hPal, 0)
            r = RealizePalette(hDCMemory)
        End If
        
        r = BitBlt(hDCMemory, 0, 0, WidthSrc, HeightSrc, hDCSrc, LeftSrc, TopSrc, SRCCOPY)
        
        hBmp = SelectObject(hDCMemory, hBmpPrev)
        
        If HasPaletteScrn And (PaletteSizeScrn = 256) Then
            hPal = SelectPalette(hDCMemory, hPalPrev, 0)
        End If
        
        r = DeleteDC(hDCMemory)
        r = ReleaseDC(hWndSrc, hDCSrc)
        
        Dim IID_IDispatch As GUID
        With IID_IDispatch
            .Data1 = &H20400
            .Data4(0) = &HC0
            .Data4(7) = &H46
        End With
        
        Dim pic As PicBmp
        With pic
            .Size = Len(pic)
            .Type = 1
            .hBmp = hBmp
            .hPal = hPal
        End With
        
        Dim IPic As IPicture
        
        r = OleCreatePictureIndirect(pic, IID_IDispatch, 1, IPic)
        
        Set CaptureWindow = IPic
    
    End Function
#Else
    Private Function CaptureWindow(ByVal hWndSrc As Long, ByVal Client As Boolean, ByVal LeftSrc As Long, ByVal TopSrc As Long, ByVal WidthSrc As Long, ByVal HeightSrc As Long) As IPictureDisp
        
        Dim r As Long
        
        Dim hDCSrc As Long
        Dim hDCMemory As Long
        Dim hBmp As Long
        Dim hBmpPrev As Long
        Dim RasterCapsScrn As Long
        Dim HasPaletteScrn As Long
        Dim PaletteSizeScrn As Long
        Dim hPal As Long
        Dim hPalPrev As Long
        Dim LogPal As LOGPALETTE
        
        hDCSrc = IIf(Client, GetDC(hWndSrc), GetWindowDC(hWndSrc))
        
        hDCMemory = CreateCompatibleDC(hDCSrc)
        
        hBmp = CreateCompatibleBitmap(hDCSrc, WidthSrc, HeightSrc)
        hBmpPrev = SelectObject(hDCMemory, hBmp)
        
'        r = PatBlt(hBmp, 0, 0, WidthSrc, HeightSrc, WHITENESS)
        
        RasterCapsScrn = GetDeviceCaps(hDCSrc, RASTERCAPS)
        HasPaletteScrn = RasterCapsScrn And RC_PALETTE
        PaletteSizeScrn = GetDeviceCaps(hDCSrc, SIZEPALETTE)
        
        If HasPaletteScrn And (PaletteSizeScrn = 256) Then
            LogPal.palVersion = &H300
            LogPal.palNumEntries = 256
            r = GetSystemPaletteEntries(hDCSrc, 0, 256, LogPal.palPalEntry(0))
            hPal = CreatePalette(LogPal)
            hPalPrev = SelectPalette(hDCMemory, hPal, 0)
            r = RealizePalette(hDCMemory)
        End If
        
        r = BitBlt(hDCMemory, 0, 0, WidthSrc, HeightSrc, hDCSrc, LeftSrc, TopSrc, SRCCOPY)
        
        hBmp = SelectObject(hDCMemory, hBmpPrev)
        
        If HasPaletteScrn And (PaletteSizeScrn = 256) Then
            hPal = SelectPalette(hDCMemory, hPalPrev, 0)
        End If
        
        r = DeleteDC(hDCMemory)
        r = ReleaseDC(hWndSrc, hDCSrc)
        
        Dim IID_IDispatch As GUID
        With IID_IDispatch
            .Data1 = &H20400
            .Data4(0) = &HC0
            .Data4(7) = &H46
        End With
        
        Dim pic As PicBmp
        With pic
            .Size = Len(pic)
            .Type = 1
            .hBmp = hBmp
            .hPal = hPal
        End With
        
        Dim IPic As IPicture
        
        r = OleCreatePictureIndirect(pic, IID_IDispatch, 1, IPic)
        
        Set CaptureWindow = IPic
    
    End Function
#End If
#If VBA7 And Win64 Then
    Private Sub ClipCaptureWindow(ByVal hWndSrc As LongPtr, ByVal Client As Boolean, ByVal LeftSrc As Long, ByVal TopSrc As Long, ByVal WidthSrc As Long, ByVal HeightSrc As Long)
        
        Dim r As Long
        
        Dim hDCSrc As LongPtr
        Dim hDCMemory As LongPtr
        Dim hBmp As LongPtr
        Dim hBmpPrev As LongPtr
        Dim RasterCapsScrn As Long
        Dim HasPaletteScrn As Long
        Dim PaletteSizeScrn As Long
        Dim hPal As LongPtr
        Dim hPalPrev As LongPtr
        Dim LogPal As LOGPALETTE
        
        hDCSrc = IIf(Client, GetDC(hWndSrc), GetWindowDC(hWndSrc))
        
        hDCMemory = CreateCompatibleDC(hDCSrc)
        
        hBmp = CreateCompatibleBitmap(hDCSrc, WidthSrc, HeightSrc)
        hBmpPrev = SelectObject(hDCMemory, hBmp)
        
        RasterCapsScrn = GetDeviceCaps(hDCSrc, RASTERCAPS)
        HasPaletteScrn = RasterCapsScrn And RC_PALETTE
        PaletteSizeScrn = GetDeviceCaps(hDCSrc, SIZEPALETTE)
        
        If HasPaletteScrn And (PaletteSizeScrn = 256) Then
            LogPal.palVersion = &H300
            LogPal.palNumEntries = 256
            r = GetSystemPaletteEntries(hDCSrc, 0, 256, LogPal.palPalEntry(0))
            hPal = CreatePalette(LogPal)
            hPalPrev = SelectPalette(hDCMemory, hPal, 0)
            r = RealizePalette(hDCMemory)
        End If
        
        r = BitBlt(hDCMemory, 0, 0, WidthSrc, HeightSrc, hDCSrc, LeftSrc, TopSrc, SRCCOPY)
        
        hBmp = SelectObject(hDCMemory, hBmpPrev)
        
        If HasPaletteScrn And (PaletteSizeScrn = 256) Then
            hPal = SelectPalette(hDCMemory, hPalPrev, 0)
        End If
        
        r = DeleteDC(hDCMemory)
        r = ReleaseDC(hWndSrc, hDCSrc)
        
        If OpenClipboard(0) Then
            Call EmptyClipboard
            Call SetClipboardData(CF_BITMAP, hBmp)
            Call CloseClipboard
         End If
    
    End Sub
#Else
    Private Sub ClipCaptureWindow(ByVal hWndSrc As Long, ByVal Client As Boolean, ByVal LeftSrc As Long, ByVal TopSrc As Long, ByVal WidthSrc As Long, ByVal HeightSrc As Long)
        
        Dim r As Long
        
        Dim hDCSrc As Long
        Dim hDCMemory As Long
        Dim hBmp As Long
        Dim hBmpPrev As Long
        Dim RasterCapsScrn As Long
        Dim HasPaletteScrn As Long
        Dim PaletteSizeScrn As Long
        Dim hPal As Long
        Dim hPalPrev As Long
        Dim LogPal As LOGPALETTE
        
        hDCSrc = IIf(Client, GetDC(hWndSrc), GetWindowDC(hWndSrc))
        
        hDCMemory = CreateCompatibleDC(hDCSrc)
        
        hBmp = CreateCompatibleBitmap(hDCSrc, WidthSrc, HeightSrc)
        hBmpPrev = SelectObject(hDCMemory, hBmp)
        
        RasterCapsScrn = GetDeviceCaps(hDCSrc, RASTERCAPS)
        HasPaletteScrn = RasterCapsScrn And RC_PALETTE
        PaletteSizeScrn = GetDeviceCaps(hDCSrc, SIZEPALETTE)
        
        If HasPaletteScrn And (PaletteSizeScrn = 256) Then
            LogPal.palVersion = &H300
            LogPal.palNumEntries = 256
            r = GetSystemPaletteEntries(hDCSrc, 0, 256, LogPal.palPalEntry(0))
            hPal = CreatePalette(LogPal)
            hPalPrev = SelectPalette(hDCMemory, hPal, 0)
            r = RealizePalette(hDCMemory)
        End If
        
        r = BitBlt(hDCMemory, 0, 0, WidthSrc, HeightSrc, hDCSrc, LeftSrc, TopSrc, SRCCOPY)
        
        hBmp = SelectObject(hDCMemory, hBmpPrev)
        
        If HasPaletteScrn And (PaletteSizeScrn = 256) Then
            hPal = SelectPalette(hDCMemory, hPalPrev, 0)
        End If
        
        r = DeleteDC(hDCMemory)
        r = ReleaseDC(hWndSrc, hDCSrc)
        
        If OpenClipboard(0) Then
            Call EmptyClipboard
            Call SetClipboardData(CF_BITMAP, hBmp)
            Call CloseClipboard
         End If
    
    End Sub
#End If
Public Function GetPictureFromCaptureScreen() As IPictureDisp

    #If VBA7 And Win64 Then
        Dim hWndScreen As LongPtr
    #Else
        Dim hWndScreen As Long
    #End If
    
    hWndScreen = GetDesktopWindow()
    
    Dim cxScreen As Long, cyScreen As Long
    cxScreen = GetSystemMetrics(SM_CXSCREEN)
    cyScreen = GetSystemMetrics(SM_CYSCREEN)
    
    Set GetPictureFromCaptureScreen = CaptureWindow(hWndScreen, False, 0, 0, cxScreen, cyScreen)
    
End Function
Public Function GetPictureFromCaptureActiveWindow() As IPictureDisp

    Dim r As Long

    #If VBA7 And Win64 Then
        Dim hWndScreen As LongPtr
    #Else
        Dim hWndScreen As Long
    #End If
    
    hWndScreen = GetForegroundWindow()

    Dim RectActive As RECT
    r = GetWindowRect(hWndScreen, RectActive)

    Set GetPictureFromCaptureActiveWindow = CaptureWindow(hWndScreen, False, 0, 0, RectActive.Right - RectActive.Left, RectActive.Bottom - RectActive.Top)

End Function
Public Sub SaveFileFromCaptureScreen(ByVal strFile As String)

    #If VBA7 And Win64 Then
        Dim hWndScreen As LongPtr
    #Else
        Dim hWndScreen As Long
    #End If
    
    hWndScreen = GetDesktopWindow()
    
    Dim cxScreen As Long
    Dim cyScreen As Long
    
    cxScreen = GetSystemMetrics(SM_CXSCREEN)
    cyScreen = GetSystemMetrics(SM_CYSCREEN)
    
    SavePicture CaptureWindow(hWndScreen, False, 0, 0, cxScreen, cyScreen), strFile
    
End Sub
Public Sub SaveFileFromCaptureActiveWindow(ByVal strFile As String)

    Dim r As Long

    #If VBA7 And Win64 Then
        Dim hWndScreen As LongPtr
    #Else
        Dim hWndScreen As Long
    #End If
    
    hWndScreen = GetForegroundWindow()

    Dim RectActive As RECT
'    Const DWMWA_EXTENDED_FRAME_BOUNDS = 9
'
'    Dim bEnable As Boolean
'    DwmIsCompositionEnabled bEnable
    
'    If bEnable Then
'        DwmGetWindowAttribute hWndScreen, DWMWA_EXTENDED_FRAME_BOUNDS, RectActive, Len(RectActive)
'    Else
        r = GetWindowRect(hWndScreen, RectActive)
'    End If
    

    SavePicture CaptureWindow(hWndScreen, False, 0, 0, RectActive.Right - RectActive.Left, RectActive.Bottom - RectActive.Top), strFile

End Sub
Public Sub CopyClipboardFromCaptureScreen()

    #If VBA7 And Win64 Then
        Dim hWndScreen As LongPtr
    #Else
        Dim hWndScreen As Long
    #End If
    
    hWndScreen = GetDesktopWindow()
    
    Dim cxScreen As Long
    Dim cyScreen As Long
    
    cxScreen = GetSystemMetrics(SM_CXSCREEN)
    cyScreen = GetSystemMetrics(SM_CYSCREEN)
    
    Call ClipCaptureWindow(hWndScreen, False, 0, 0, cxScreen, cyScreen)
    
End Sub
Public Sub CopyClipboardFromCaptureActiveWindow()

    Dim r As Long

    #If VBA7 And Win64 Then
        Dim hWndScreen As LongPtr
    #Else
        Dim hWndScreen As Long
    #End If
    
    hWndScreen = GetForegroundWindow()

    Dim RectActive As RECT
    r = GetWindowRect(hWndScreen, RectActive)
    
    Call ClipCaptureWindow(hWndScreen, False, 0, 0, RectActive.Right - RectActive.Left, RectActive.Bottom - RectActive.Top)

End Sub




Attribute VB_Name = "ClipDataDTO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

#If VBA7 And Win64 Then
    Public lngFormat As Long
    Public lngHandle As LongPtr
#Else
    Public lngFormat As Long
    Public lngHandle As Long
#End If

Attribute VB_Name = "ComboDTO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public NO As String
Public CATEGORY As String
Public DISP_NAME As String
Public MACRO As String
Attribute VB_Name = "CryptoServiceProvider"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Public Enum CryptoServiceProviderConstants
    HashTypeMD5
    HashTypeSHA1
    HashTypeSHA256
    HashTypeSHA384
    HashTypeSHA512
End Enum
Private mHashType As CryptoServiceProviderConstants
Public Property Let HashType(h As CryptoServiceProviderConstants)
    mHashType = h
End Property
Public Function ComputeHash(ByRef bytBuf() As Byte) As String

    Dim md As Object
    Dim bytRet() As Byte
    Dim strBuf As String
    Dim i As Long
    Dim lngFrom As Long
    Dim lngSize As Long
    
    On Error GoTo e
    Select Case mHashType
        Case HashTypeMD5
            Set md = CreateObject("System.Security.Cryptography.MD5CryptoServiceProvider")
        Case HashTypeSHA1
            Set md = CreateObject("System.Security.Cryptography.SHA1Managed")
        Case HashTypeSHA256
            Set md = CreateObject("System.Security.Cryptography.SHA256Managed")
        Case HashTypeSHA384
            Set md = CreateObject("System.Security.Cryptography.SHA384Managed")
        Case HashTypeSHA512
            Set md = CreateObject("System.Security.Cryptography.SHA512Managed")
    End Select

    lngFrom = LBound(bytBuf())
    lngSize = UBound(bytBuf()) - lngFrom + 1

    bytRet = md.ComputeHash_3(bytBuf, lngFrom, lngSize)
    
    md.Clear
    
    Set md = Nothing
    
    Dim sb As StringBuilder
    Set sb = New StringBuilder
    
    For i = LBound(bytRet) To UBound(bytRet)
        sb.Append Right$("00" & Hex(bytRet(i)), 2)
    Next
    
    ComputeHash = LCase(sb.ToString)
    
    Set sb = Nothing
    
    Exit Function
e:
    ComputeHash = "*|fffd||fffd||fffd||fffd||fffd|s|fffd||fffd|*"
    
End Function

Attribute VB_Name = "FileParamDTO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private strFileName As String
Private strDirectory As String
Private intAttribute As Integer

Property Let filename(ByVal c As String)
    strFileName = c
End Property
Property Get filename() As String
    filename = strFileName
End Property
Property Let Directory(ByVal c As String)
    strDirectory = c
End Property
Property Get Directory() As String
    Directory = strDirectory
End Property
Property Let Attrib(ByVal c As Integer)
    intAttribute = c
End Property
Property Get Attrib() As Integer
    Attrib = intAttribute
End Property
Attribute VB_Name = "MacroManager"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private mFrm As UserForm
Private mlngMax As Long
Private mstrBackup As String
Private mlngColor As Long
Private Sub Class_Initialize()

    Application.DisplayAlerts = False
    Application.ScreenUpdating = False

End Sub

Private Sub Class_Terminate()

    On Error Resume Next
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    mFrm.lblBack.Caption = mstrBackup
    mFrm.lblBack.BackColor = mlngColor


End Sub
Sub DispGuidance(ByVal strValue As String)

    If mFrm Is Nothing Then
        Exit Sub
    End If
    mFrm.lblBack.Caption = strValue
    DoEvents

End Sub
Sub StartGauge(ByVal lngValue As Long)
    mlngMax = lngValue
    
    mFrm.lblGauge.Width = 0
    mFrm.lblGauge.visible = True
    mFrm.lblGauge.ForeColor = vbWhite
    mFrm.lblBack.BackColor = vbWhite

End Sub
Sub DisplayGauge(ByVal lngValue As Long)

    Dim dblValue As Double

    If mFrm Is Nothing Then
        Exit Sub
    End If
        Dim strMessage As String
    If lngValue > mlngMax Then
        lngValue = mlngMax
    End If
    dblValue = (CDbl(lngValue) / mlngMax)
    mFrm.lblGauge.Width = mFrm.lblBack.Width * dblValue
    
    strMessage = Space$(Fix(mFrm.lblBack.Width * 0.16)) & Format$(rlxRoundDown(dblValue * 100, 0), "0") & "%"
    mFrm.lblBack.Caption = strMessage
    mFrm.lblGauge.Caption = strMessage
    DoEvents
    DoEvents
    DoEvents
End Sub
Property Set Form(frm As UserForm)
    Set mFrm = frm
    
    On Error Resume Next
    mstrBackup = mFrm.lblBack.Caption
    mlngColor = mFrm.lblBack.BackColor
    
End Property
Sub Disable()
    If mFrm Is Nothing Then
        Exit Sub
    End If

    Dim c As control
    
    For Each c In mFrm.Controls
    
        If c.Tag <> "e" Then
            c.enabled = False
        End If
    
    Next
    DoEvents

End Sub
Sub Enable()
    If mFrm Is Nothing Then
        Exit Sub
    End If

    Dim c As control
    
    For Each c In mFrm.Controls
    
        If c.Tag <> "e" Then
            c.enabled = True
        End If
    
    Next

End Sub

Attribute VB_Name = "ReplaceParamDTO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private strSearchString As String
Private strReplaceString As String
Private lngCompareMode As Long
Private lngReplaceFileCount As Long
Private lngReplaceStrCount As Long

Property Let SearchString(ByVal c As String)
    strSearchString = c
End Property
Property Get SearchString() As String
    SearchString = strSearchString
End Property
Property Let ReplaceString(ByVal c As String)
    strReplaceString = c
End Property
Property Get ReplaceString() As String
    ReplaceString = strReplaceString
End Property
Property Let CompareMode(ByVal c As Long)
    lngCompareMode = c
End Property
Property Get CompareMode() As Long
    CompareMode = lngCompareMode
End Property
Property Let ReplaceFileCount(ByVal c As Long)
    lngReplaceFileCount = c
End Property
Property Get ReplaceFileCount() As Long
    ReplaceFileCount = lngReplaceFileCount
End Property
Property Let ReplaceStrCount(ByVal c As Long)
    lngReplaceStrCount = c
End Property
Property Get ReplaceStrCount() As Long
    ReplaceStrCount = lngReplaceStrCount
End Property



Attribute VB_Name = "ReplaceResultDTO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private strFileName As String
Private strSearchString As String
Private strReplaceString As String
Private lngReplaceStrCount As Long

Property Let filename(ByVal c As String)
    strFileName = c
End Property
Property Get filename() As String
    filename = strFileName
End Property
Property Let SearchString(ByVal c As String)
    strSearchString = c
End Property
Property Get SearchString() As String
    SearchString = strSearchString
End Property
Property Let ReplaceString(ByVal c As String)
    strReplaceString = c
End Property
Property Get ReplaceString() As String
    ReplaceString = strReplaceString
End Property
Property Let ReplaceStrCount(ByVal c As Long)
    lngReplaceStrCount = c
End Property
Property Get ReplaceStrCount() As Long
    ReplaceStrCount = lngReplaceStrCount
End Property
Attribute VB_Name = "SearchShapeDTO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


Private strShapeName As String
Private strShapeValue As String
Private strShapePos As String
Private objShapeRef As Shape

Property Let ShapeName(ByVal c As String)
    strShapeName = c
End Property
Property Get ShapeName() As String
    ShapeName = strShapeName
End Property
Property Let ShapeValue(ByVal c As String)
    strShapeValue = c
End Property
Property Get ShapeValue() As String
    ShapeValue = strShapeValue
End Property
Property Let ShapePos(ByVal c As String)
    strShapePos = c
End Property
Property Get ShapePos() As String
    ShapePos = strShapePos
End Property
Property Set ShapeRef(ByRef c As Shape)
    Set objShapeRef = c
End Property
Property Get ShapeRef() As Shape
    Set ShapeRef = objShapeRef
End Property

Attribute VB_Name = "SecNum1"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^\([0-9]+\)[ ]"
Private Const C_SECTION_SEPARATER As String = " "
Private Const C_SECTION_NAME As String = "(1), (2), (3) |fffd||fffd||fffd| |fffd||fffd|"
Private Const C_SECTION_CLASS As String = "SecNum1"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property
Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " (1) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object

    Set objRegx = CreateObject("VBScript.RegExp")

    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)

    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If

    Set objMatch = Nothing
    Set objRegx = Nothing

End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngFromLevel As Long, ByVal lngIndentLevel As Long) As String
       
    Dim i As Long
    Dim strNewNum As String
    Dim strNumber As String
    
    strNumber = Trim(SectionNumber(v))
    
    If strNumber = "" Or lngFromLevel <> lngIndentLevel Then
        strNewNum = "(1)" & C_SECTION_SEPARATER
    Else
        strNewNum = "(" & CStr(Val(Replace(Replace(strNumber, "(", ""), ")", "")) + 1) & ")" & C_SECTION_SEPARATER
    End If
    
    NextNumber = strNewNum

End Property


Attribute VB_Name = "SecNum1E"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^|fffd||fffd|[0-9]+|fffd||fffd|[ ]"
Private Const C_SECTION_SEPARATER As String = " "
Private Const C_SECTION_NAME As String = "|fffd||fffd|1|fffd||fffd|, |fffd||fffd|2|fffd||fffd|, |fffd||fffd|3|fffd||fffd| |fffd||fffd||fffd| |fffd||fffd|"
Private Const C_SECTION_CLASS As String = "SecNum1E"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property
Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " |fffd||fffd|1|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object

    Set objRegx = CreateObject("VBScript.RegExp")

    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)

    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If

    Set objMatch = Nothing
    Set objRegx = Nothing

End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngFromLevel As Long, ByVal lngIndentLevel As Long) As String
       
    Dim i As Long
    Dim strNewNum As String
    Dim strNumber As String
    
    strNumber = Trim(SectionNumber(v))
    
    If strNumber = "" Or lngFromLevel <> lngIndentLevel Then
        strNewNum = "|fffd||fffd|1|fffd||fffd|" & C_SECTION_SEPARATER
    Else
        strNewNum = "|fffd||fffd|" & CStr(Val(Replace(Replace(strNumber, "|fffd||fffd|", ""), "|fffd||fffd|", "")) + 1) & "|fffd||fffd|" & C_SECTION_SEPARATER
    End If
    
    NextNumber = strNewNum

End Property




Attribute VB_Name = "SecNum1K"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^|fffd||fffd|[0-9]+|fffd||fffd|[ ]"
Private Const C_SECTION_SEPARATER As String = " "
Private Const C_SECTION_NAME As String = "|fffd||fffd|1|fffd||fffd|, |fffd||fffd|2|fffd||fffd|, |fffd||fffd|3|fffd||fffd| |fffd||fffd||fffd| |fffd||fffd|"
Private Const C_SECTION_CLASS As String = "SecNum1K"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property
Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " |fffd||fffd|1|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object

    Set objRegx = CreateObject("VBScript.RegExp")

    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)

    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If

    Set objMatch = Nothing
    Set objRegx = Nothing

End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngFromLevel As Long, ByVal lngIndentLevel As Long) As String
       
    Dim i As Long
    Dim strNewNum As String
    Dim strNumber As String
    
    strNumber = Trim(SectionNumber(v))
    
    If strNumber = "" Or lngFromLevel <> lngIndentLevel Then
        strNewNum = "|fffd||fffd|1|fffd||fffd|" & C_SECTION_SEPARATER
    Else
        strNewNum = "|fffd||fffd|" & CStr(Val(Replace(Replace(strNumber, "|fffd||fffd|", ""), "|fffd||fffd|", "")) + 1) & "|fffd||fffd|" & C_SECTION_SEPARATER
    End If
    
    NextNumber = strNewNum

End Property




Attribute VB_Name = "SecNum1S"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^|fffd||fffd|[0-9]+|fffd||fffd|[ ]"
Private Const C_SECTION_SEPARATER As String = " "
Private Const C_SECTION_NAME As String = "|fffd||fffd|1|fffd||fffd|, |fffd||fffd|2|fffd||fffd|, |fffd||fffd|3|fffd||fffd| |fffd||fffd||fffd| |fffd||fffd|"
Private Const C_SECTION_CLASS As String = "SecNum1S"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property
Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " |fffd||fffd|1|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object

    Set objRegx = CreateObject("VBScript.RegExp")

    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)

    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If

    Set objMatch = Nothing
    Set objRegx = Nothing

End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngFromLevel As Long, ByVal lngIndentLevel As Long) As String
       
    Dim i As Long
    Dim strNewNum As String
    Dim strNumber As String
    
    strNumber = Trim(SectionNumber(v))
    
    If strNumber = "" Or lngFromLevel <> lngIndentLevel Then
        strNewNum = "|fffd||fffd|1|fffd||fffd|" & C_SECTION_SEPARATER
    Else
        strNewNum = "|fffd||fffd|" & CStr(Val(Replace(Replace(strNumber, "|fffd||fffd|", ""), "|fffd||fffd|", "")) + 1) & "|fffd||fffd|" & C_SECTION_SEPARATER
    End If
    
    NextNumber = strNewNum

End Property



Attribute VB_Name = "SecNumA"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^[a-z]\.+[ ]"
Private Const C_SECTION_SEPARATER As String = " "
Private Const C_SECTION_NAME As String = "a., b., c. |fffd||fffd||fffd| z."
Private Const C_SECTION_CLASS As String = "SecNumA"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property
Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " a. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngFromLevel As Long, ByVal lngIndentLevel As Long) As String
       
    Dim i As Long
    Dim strNewNum As String
    Dim strNumber As String
    Dim lngPos As Long
    Const STR As String = "abcdefghijklmnopqrstuvwxyz"
    
    strNumber = Trim(SectionNumber(v))
    
    If strNumber = "" Or lngFromLevel <> lngIndentLevel Then
        strNewNum = "a." & C_SECTION_SEPARATER
    Else
        lngPos = InStr(STR, Replace(strNumber, ".", "")) + 1
        If lngPos > Len(STR) Then
            lngPos = 1
        End If
        strNewNum = Mid$(STR, lngPos, 1) & "." & C_SECTION_SEPARATER
    End If
    
    NextNumber = strNewNum

End Property



Attribute VB_Name = "SecNumA2"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^\([a-z]+\)[ ]"
Private Const C_SECTION_SEPARATER As String = " "
Private Const C_SECTION_NAME As String = "(a), (b), (c) |fffd||fffd||fffd| (z)"
Private Const C_SECTION_CLASS As String = "SecNumA2"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property
Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " (a) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function

Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngFromLevel As Long, ByVal lngIndentLevel As Long) As String
       
    Dim i As Long
    Dim strNewNum As String
    Dim strNumber As String
    Dim lngAsc As Long
    
    strNumber = Trim(SectionNumber(v))
    
    If strNumber = "" Or lngFromLevel <> lngIndentLevel Then
        strNewNum = "(a)" & C_SECTION_SEPARATER
    Else
        lngAsc = Asc(Replace(Replace(strNumber, "(", ""), ")", "")) + 1
        If lngAsc > Asc("z") Then
            lngAsc = Asc("a")
        End If
        strNewNum = "(" & Chr(lngAsc) & ")" & C_SECTION_SEPARATER
    End If
    
    NextNumber = strNewNum

End Property




Attribute VB_Name = "SecNumC"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^[|fffd|@-|fffd|S][ ]"
Private Const C_SECTION_SEPARATER As String = " "
Private Const C_SECTION_NAME As String = "|fffd|@, |fffd|A, |fffd|B |fffd||fffd||fffd| |fffd|S"
Private Const C_SECTION_CLASS As String = "SecNumC"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property

Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " |fffd|@ |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngFromLevel As Long, ByVal lngIndentLevel As Long) As String
       
    Dim i As Long
    Dim strNewNum As String
    Dim strNumber As String
    Dim lngAsc As Long
    
    strNumber = Trim(SectionNumber(v))
    
    If strNumber = "" Or lngFromLevel <> lngIndentLevel Then
        strNewNum = "|fffd|@" & C_SECTION_SEPARATER
    Else
        lngAsc = Asc(strNumber) + 1
        If lngAsc > Asc("|fffd|S") Then
            lngAsc = Asc("|fffd|@")
        End If
        strNewNum = Chr(lngAsc) & C_SECTION_SEPARATER
    End If
    
    NextNumber = strNewNum

End Property




Attribute VB_Name = "SecNumI"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^[ivx]\.+[ ]"
Private Const C_SECTION_SEPARATER As String = " "
Private Const C_SECTION_NAME As String = "i., ii., iii. |fffd||fffd||fffd| xx."
Private Const C_SECTION_CLASS As String = "SecNumI"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property

Public Function SectionLevelName(ByVal lngLevel As Long) As String
    SectionLevelName = " i. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngFromLevel As Long, ByVal lngIndentLevel As Long) As String
       
    Dim i As Long
    Dim strNewNum As String
    Dim strNumber As String
    Dim lngAsc As Long
    
    strNumber = Trim(SectionNumber(v))
    
    If strNumber = "" Or lngFromLevel <> lngIndentLevel Then
        strNewNum = "i." & C_SECTION_SEPARATER
    Else
        lngAsc = rlxArabic(Replace(strNumber, ".", "")) + 1
        If lngAsc > 20 Then
            lngAsc = 1
        End If
        strNewNum = LCase(rlxRoman(lngAsc)) & "." & C_SECTION_SEPARATER
    End If
    
    NextNumber = strNewNum

End Property



Attribute VB_Name = "SecNumI2"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^\([ivx]+\)[ ]"
Private Const C_SECTION_SEPARATER As String = " "
Private Const C_SECTION_NAME As String = "(i), (ii), (iii) |fffd||fffd||fffd| (xx)"
Private Const C_SECTION_CLASS As String = "SecNumI2"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property

Public Function SectionLevelName(ByVal lngLevel As Long) As String
    SectionLevelName = " (i) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngFromLevel As Long, ByVal lngIndentLevel As Long) As String
       
    Dim i As Long
    Dim strNewNum As String
    Dim strNumber As String
    Dim lngAsc As Long
    
    strNumber = Trim(SectionNumber(v))
    
    If strNumber = "" Or lngFromLevel <> lngIndentLevel Then
        strNewNum = "(i)" & C_SECTION_SEPARATER
    Else
        lngAsc = rlxArabic(Replace(Replace(strNumber, "(", ""), ")", "")) + 1
        If lngAsc > 20 Then
            lngAsc = 1
        End If
        strNewNum = "(" & LCase(rlxRoman(lngAsc)) & ")" & C_SECTION_SEPARATER
    End If
    
    NextNumber = strNewNum

End Property





Attribute VB_Name = "SecNumI3"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^\([|fffd|T-|fffd|]]+\)[ ]"
Private Const C_SECTION_SEPARATER As String = " "
Private Const C_SECTION_NAME As String = "(|fffd|T), (|fffd|U), (|fffd|V) |fffd||fffd||fffd| (|fffd|])"
Private Const C_SECTION_CLASS As String = "SecNumI3"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property

Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " (|fffd|T) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngFromLevel As Long, ByVal lngIndentLevel As Long) As String
       
    Dim i As Long
    Dim strNewNum As String
    Dim strNumber As String
    Dim lngAsc As Long
    
    strNumber = Trim(SectionNumber(v))
    
    If strNumber = "" Or lngFromLevel <> lngIndentLevel Then
        strNewNum = "(|fffd|T)" & C_SECTION_SEPARATER
    Else
        lngAsc = Asc(Replace(Replace(strNumber, "(", ""), ")", "")) + 1
        If lngAsc > Asc("|fffd|]") Then
            lngAsc = Asc("|fffd|T")
        End If
        strNewNum = "(" & Chr(lngAsc) & ")" & C_SECTION_SEPARATER
    End If
    
    NextNumber = strNewNum

End Property






Attribute VB_Name = "SecNumI4"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^[|fffd|T-|fffd|]]+[ ]"
Private Const C_SECTION_SEPARATER As String = " "
Private Const C_SECTION_NAME As String = "|fffd|T, |fffd|U, |fffd|V |fffd||fffd||fffd| |fffd|]"
Private Const C_SECTION_CLASS As String = "SecNumI4"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property

Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " |fffd|T |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngFromLevel As Long, ByVal lngIndentLevel As Long) As String
       
    Dim i As Long
    Dim strNewNum As String
    Dim strNumber As String
    Dim lngAsc As Long
    
    strNumber = Trim(SectionNumber(v))
    
    If strNumber = "" Or lngFromLevel <> lngIndentLevel Then
        strNewNum = "|fffd|T" & C_SECTION_SEPARATER
    Else
        lngAsc = Asc(strNumber) + 1
        If lngAsc > Asc("|fffd|]") Then
            lngAsc = Asc("|fffd|T")
        End If
        strNewNum = Chr(lngAsc) & C_SECTION_SEPARATER
    End If
    
    NextNumber = strNewNum

End Property





Attribute VB_Name = "SecNumK"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^[|fffd|-|fffd|]\.+[ ]"
Private Const C_SECTION_SEPARATER As String = " "
Private Const C_SECTION_NAME As String = "|fffd|., |fffd|., |fffd|. |fffd||fffd||fffd| |fffd|."
Private Const C_SECTION_CLASS As String = "SecNumK"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property
Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " |fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngFromLevel As Long, ByVal lngIndentLevel As Long) As String
       
    Dim i As Long
    Dim strNewNum As String
    Dim strNumber As String
    Dim lngPos As Long
    Const STR As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||726||fffd|"
    
    strNumber = Trim(SectionNumber(v))
    
    If strNumber = "" Or lngFromLevel <> lngIndentLevel Then
        strNewNum = "|fffd|." & C_SECTION_SEPARATER
    Else
        lngPos = InStr(STR, Replace(strNumber, ".", "")) + 1
        If lngPos > Len(STR) Then
            lngPos = 1
        End If
        strNewNum = Mid$(STR, lngPos, 1) & "." & C_SECTION_SEPARATER
    End If
    
    NextNumber = strNewNum

End Property





Attribute VB_Name = "SecNumK2"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^\([|fffd|-|fffd|]+\)[ ]"
Private Const C_SECTION_SEPARATER As String = " "
Private Const C_SECTION_NAME As String = "(|fffd|), (|fffd|), (|fffd|) |fffd||fffd||fffd| (|fffd|)"
Private Const C_SECTION_CLASS As String = "SecNumK2"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property
Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " (|fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngFromLevel As Long, ByVal lngIndentLevel As Long) As String
       
    Dim i As Long
    Dim strNewNum As String
    Dim strNumber As String
    Dim lngAsc As Long
    
    strNumber = Trim(SectionNumber(v))
    
    If strNumber = "" Or lngFromLevel <> lngIndentLevel Then
        strNewNum = "(|fffd|)" & C_SECTION_SEPARATER
    Else
        lngAsc = Asc(Replace(Replace(strNumber, "(", ""), ")", "")) + 1
        If lngAsc > Asc("|fffd|") Then
            lngAsc = Asc("|fffd|")
        End If
        strNewNum = "(" & Chr(lngAsc) & ")" & C_SECTION_SEPARATER
    End If
    
    NextNumber = strNewNum

End Property




Attribute VB_Name = "SecNumK3"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^[|fffd|A-|fffd||fffd|]\.+[ ]"
Private Const C_SECTION_SEPARATER As String = " "
Private Const C_SECTION_NAME As String = "|fffd|A., |fffd|C., |fffd|E. |fffd||fffd||fffd| |fffd||fffd|."
Private Const C_SECTION_CLASS As String = "SecNumK3"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property
Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " |fffd|A. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngFromLevel As Long, ByVal lngIndentLevel As Long) As String
       
    Dim i As Long
    Dim strNewNum As String
    Dim strNumber As String
    Dim lngPos As Long
    Const STR As String = "|fffd|A|fffd|C|fffd|E|fffd|G|fffd|I|fffd|J|fffd|L|fffd|N|fffd|P|fffd|R|fffd|T|fffd|V|fffd|X|fffd|Z|fffd|\|fffd|^|fffd|`|fffd|c|fffd|e|fffd|g|fffd|i|fffd|j|fffd|k|fffd|l|fffd|m|fffd|n|fffd|q|fffd|t|fffd|w|fffd|z|fffd|}|fffd|~|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    
    strNumber = Trim(SectionNumber(v))
    
    If strNumber = "" Or lngFromLevel <> lngIndentLevel Then
        strNewNum = "|fffd|A." & C_SECTION_SEPARATER
    Else
        lngPos = InStr(STR, Replace(strNumber, ".", "")) + 1
        If lngPos > Len(STR) Then
            lngPos = 1
        End If
        strNewNum = Mid$(STR, lngPos, 1) & "." & C_SECTION_SEPARATER
    End If
    
    NextNumber = strNewNum

End Property






Attribute VB_Name = "SecNumK4"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^\([|fffd|A-|fffd||fffd|]+\)[ ]"
Private Const C_SECTION_SEPARATER As String = " "
Private Const C_SECTION_NAME As String = "(|fffd|A), (|fffd|C), (|fffd|E) |fffd||fffd||fffd| (|fffd||fffd|)"
Private Const C_SECTION_CLASS As String = "SecNumK4"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property
Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " (|fffd|A) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngFromLevel As Long, ByVal lngIndentLevel As Long) As String
       
    Dim i As Long
    Dim strNewNum As String
    Dim strNumber As String
    Dim lngPos As Long
    Const STR As String = "|fffd|A|fffd|C|fffd|E|fffd|G|fffd|I|fffd|J|fffd|L|fffd|N|fffd|P|fffd|R|fffd|T|fffd|V|fffd|X|fffd|Z|fffd|\|fffd|^|fffd|`|fffd|c|fffd|e|fffd|g|fffd|i|fffd|j|fffd|k|fffd|l|fffd|m|fffd|n|fffd|q|fffd|t|fffd|w|fffd|z|fffd|}|fffd|~|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    
    strNumber = Trim(SectionNumber(v))
    
    If strNumber = "" Or lngFromLevel <> lngIndentLevel Then
        strNewNum = "(|fffd|A)" & C_SECTION_SEPARATER
    Else
        lngPos = InStr(STR, Replace(Replace(strNumber, "(", ""), ")", "")) + 1
        If lngPos > Len(STR) Then
            lngPos = 1
        End If
        strNewNum = "(" & Mid$(STR, lngPos, 1) & ")" & C_SECTION_SEPARATER
    End If
    
    NextNumber = strNewNum

End Property







Attribute VB_Name = "SecNumK5"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^[|fffd|A-|fffd||fffd|]\.+[ ]"
Private Const C_SECTION_SEPARATER As String = " "
Private Const C_SECTION_NAME As String = "|fffd|C., |fffd||fffd|., |fffd|n. |fffd||fffd||fffd| |fffd|X."
Private Const C_SECTION_CLASS As String = "SecNumK5"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property
Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " |fffd|C. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngFromLevel As Long, ByVal lngIndentLevel As Long) As String
       
    Dim i As Long
    Dim strNewNum As String
    Dim strNumber As String
    Dim lngPos As Long
    Const STR As String = "|fffd|C|fffd||fffd||fffd|n|fffd|j|fffd|z|fffd|w|fffd|g|fffd|`|fffd||fffd||fffd|k|fffd||fffd||fffd||fffd||fffd||fffd||fffd|J|fffd||fffd||fffd|^|fffd||fffd||fffd|\|fffd|c|fffd|l|fffd|i|fffd||fffd||fffd||fffd||fffd|E|fffd||fffd||fffd|m|fffd|I|fffd|N|fffd||fffd||fffd|}|fffd|P|fffd|t|fffd|R|fffd|G|fffd|e|fffd|A|fffd|T|fffd|L|fffd||fffd||fffd||fffd||fffd|~|fffd|V|fffd||fffd|q|fffd||fffd||fffd|Z|fffd|X"
    
    strNumber = Trim(SectionNumber(v))
    
    If strNumber = "" Or lngFromLevel <> lngIndentLevel Then
        strNewNum = "|fffd|C." & C_SECTION_SEPARATER
    Else
        lngPos = InStr(STR, Replace(strNumber, ".", "")) + 1
        If lngPos > Len(STR) Then
            lngPos = 1
        End If
        strNewNum = Mid$(STR, lngPos, 1) & "." & C_SECTION_SEPARATER
    End If
    
    NextNumber = strNewNum

End Property







Attribute VB_Name = "SecNumK6"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^\([|fffd|A-|fffd||fffd|]+\)[ ]"
Private Const C_SECTION_SEPARATER As String = " "
Private Const C_SECTION_NAME As String = "(|fffd|C), (|fffd||fffd|), (|fffd|n) |fffd||fffd||fffd| (|fffd|X)"
Private Const C_SECTION_CLASS As String = "SecNumK6"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property
Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " (|fffd|C) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngFromLevel As Long, ByVal lngIndentLevel As Long) As String
       
    Dim i As Long
    Dim strNewNum As String
    Dim strNumber As String
    Dim lngPos As Long
    Const STR As String = "|fffd|C|fffd||fffd||fffd|n|fffd|j|fffd|z|fffd|w|fffd|g|fffd|`|fffd||fffd||fffd|k|fffd||fffd||fffd||fffd||fffd||fffd||fffd|J|fffd||fffd||fffd|^|fffd||fffd||fffd|\|fffd|c|fffd|l|fffd|i|fffd||fffd||fffd||fffd||fffd|E|fffd||fffd||fffd|m|fffd|I|fffd|N|fffd||fffd||fffd|}|fffd|P|fffd|t|fffd|R|fffd|G|fffd|e|fffd|A|fffd|T|fffd|L|fffd||fffd||fffd||fffd||fffd|~|fffd|V|fffd||fffd|q|fffd||fffd||fffd|Z|fffd|X"
    
    strNumber = Trim(SectionNumber(v))
    
    If strNumber = "" Or lngFromLevel <> lngIndentLevel Then
        strNewNum = "(|fffd|C)" & C_SECTION_SEPARATER
    Else
        lngPos = InStr(STR, Replace(Replace(strNumber, "(", ""), ")", "")) + 1
        If lngPos > Len(STR) Then
            lngPos = 1
        End If
        strNewNum = "(" & Mid$(STR, lngPos, 1) & ")" & C_SECTION_SEPARATER
    End If
    
    NextNumber = strNewNum

End Property








Attribute VB_Name = "SecNumPoint"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^[0-9.]+[ ]"
Private Const C_SECTION_SEPARATER As String = " "
Private Const C_SECTION_NAME As String = "1, 1.1, 1.1.1 |fffd||fffd||fffd| |fffd||fffd|"
Private Const C_SECTION_CLASS As String = "SecNumPoint"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property
Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    Dim strBuf As String
    Select Case lngLevel
        Case 1
            strBuf = " 1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 2
            strBuf = " 1.1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 3
            strBuf = " 1.1.1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 4
            strBuf = " 1.1.1.1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 5
            strBuf = " 1.1.1.1.1 |fffd||fffd||fffd||fffd|"
        Case Else
            strBuf = " 1.1.1.1.1.1 |fffd||fffd|"
    End Select
    
    SectionLevelName = strBuf
    
End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngFromLevel As Long, ByVal lngIndentLevel As Long) As String
       
    Dim i As Long
    Dim strNewNum As String
    Dim strNumber As String
    
    strNumber = Trim(SectionNumber(v))
    
    If strNumber = "" Then
        '|fffd||50d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||a347||fffd|A|fffd||fffd||fffd|x|fffd||fffd||fffd||249||fffd||fffd||fffd||fffd||fffd||fffd||50d||fffd||fffd||10d90||fffd||fffd||fffd||fffd||fffd|B
        For i = 0 To lngIndentLevel
            If strNewNum = "" Then
                strNewNum = "1"
            Else
                strNewNum = strNewNum & "." & "1"
            End If
        Next
    Else
        '|fffd||fffd||fffd||314||50d||fffd||fffd||fffd|t|fffd||502||fffd||fffd||fffd|
        Dim num As Variant
        Dim lngNum As Long
        
        num = Split(strNumber, ".")

        For i = 0 To lngIndentLevel
        
            Select Case i
                Case Is > UBound(num)
                    lngNum = 1
                Case lngIndentLevel
                    lngNum = Val(num(i)) + 1
                Case Else
                    lngNum = Val(num(i))
            End Select
        
            If strNewNum = "" Then
                strNewNum = lngNum
            Else
                strNewNum = strNewNum & "." & lngNum
            End If
        Next
    End If
    
    NextNumber = strNewNum & C_SECTION_SEPARATER

End Property

Attribute VB_Name = "SecNumPoint2"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^[0-9.]+[ ]"
Private Const C_SECTION_SEPARATER As String = ". "
Private Const C_SECTION_NAME As String = "1., 1.1., 1.1.1. |fffd||fffd||fffd| |fffd||fffd|"
Private Const C_SECTION_CLASS As String = "SecNumPoint2"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property

Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    Dim strBuf As String
    Select Case lngLevel
        Case 1
            strBuf = " 1. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 2
            strBuf = " 1.1. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 3
            strBuf = " 1.1.1. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 4
            strBuf = " 1.1.1.1. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 5
            strBuf = " 1.1.1.1.1. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case Else
            strBuf = " 1.1.1.1.1.1. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End Select
    
    SectionLevelName = strBuf

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngFromLevel As Long, ByVal lngIndentLevel As Long) As String
       
    Dim i As Long
    Dim strNewNum As String
    Dim strNumber As String
    
    strNumber = Trim(SectionNumber(v))
    
    If strNumber = "" Then
        '|fffd||50d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||a347||fffd|A|fffd||fffd||fffd|x|fffd||fffd||fffd||249||fffd||fffd||fffd||fffd||fffd||fffd||50d||fffd||fffd||10d90||fffd||fffd||fffd||fffd||fffd|B
        For i = 0 To lngIndentLevel
            If strNewNum = "" Then
                strNewNum = "1"
            Else
                strNewNum = strNewNum & "." & "1"
            End If
        Next
    Else
        '|fffd||fffd||fffd||314||50d||fffd||fffd||fffd|t|fffd||502||fffd||fffd||fffd|
        Dim num As Variant
        Dim lngNum As Long
        
        num = Split(strNumber, ".")

        For i = 0 To lngIndentLevel
        
            Select Case i
                Case Is > UBound(num)
                    lngNum = 1
                Case lngIndentLevel
                    lngNum = Val(num(i)) + 1
                Case Else
                    lngNum = Val(num(i))
            End Select
        
            If strNewNum = "" Then
                strNewNum = lngNum
            Else
                strNewNum = strNewNum & "." & lngNum
            End If
        Next
    End If
    
    NextNumber = strNewNum & C_SECTION_SEPARATER

End Property


Attribute VB_Name = "SecNumPoint3"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^[-0-9]+[ ]"
Private Const C_SECTION_SEPARATER As String = " "
Private Const C_SECTION_NAME As String = "1, 1-1, 1-1-1 |fffd||fffd||fffd| |fffd||fffd|"
Private Const C_SECTION_CLASS As String = "SecNumPoint3"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property

Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    Dim strBuf As String
    Select Case lngLevel
        Case 1
            strBuf = " 1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 2
            strBuf = " 1-1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 3
            strBuf = " 1-1-1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 4
            strBuf = " 1-1-1-1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 5
            strBuf = " 1-1-1-1-1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case Else
            strBuf = " 1-1-1-1-1-1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End Select
    
    SectionLevelName = strBuf

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngFromLevel As Long, ByVal lngIndentLevel As Long) As String
       
    Dim i As Long
    Dim strNewNum As String
    Dim strNumber As String
    
    strNumber = Trim(SectionNumber(v))
    
    If strNumber = "" Then
        '|fffd||50d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||a347||fffd|A|fffd||fffd||fffd|x|fffd||fffd||fffd||249||fffd||fffd||fffd||fffd||fffd||fffd||50d||fffd||fffd||10d90||fffd||fffd||fffd||fffd||fffd|B
        For i = 0 To lngIndentLevel
            If strNewNum = "" Then
                strNewNum = "1"
            Else
                strNewNum = strNewNum & "-" & "1"
            End If
        Next
    Else
        '|fffd||fffd||fffd||314||50d||fffd||fffd||fffd|t|fffd||502||fffd||fffd||fffd|
        Dim num As Variant
        Dim lngNum As Long
        
        num = Split(strNumber, "-")

        For i = 0 To lngIndentLevel
        
            Select Case i
                Case Is > UBound(num)
                    lngNum = 1
                Case lngIndentLevel
                    lngNum = Val(num(i)) + 1
                Case Else
                    lngNum = Val(num(i))
            End Select
        
            If strNewNum = "" Then
                strNewNum = lngNum
            Else
                strNewNum = strNewNum & "-" & lngNum
            End If
        Next
    End If
    
    NextNumber = strNewNum & C_SECTION_SEPARATER

End Property



Attribute VB_Name = "SectionStructDTO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public classObj As Object
Public useFormat As Boolean
Public fontName As String
Public fontSize As Single
Public fontBold As Boolean
Public fontItalic As Boolean
Public fontUnderLine As Boolean

Public useFormat2 As Boolean
Public fontName2 As String
Public fontSize2 As Single
Public fontBold2 As Boolean
Public fontItalic2 As Boolean
Public fontUnderLine2 As Boolean

Attribute VB_Name = "SelectionAlign"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionAllFrameWork
Attribute SFWork.VB_VarHelpID = -1
Private mRange As Range

Public HorizontalAlignment As Long
Public VerticalAlignment   As Long

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionAllFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean)
    Undo = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
        
    Dim s As String
  
    On Error GoTo e
    
    If mRange Is Nothing Then
        Set mRange = r
    Else
        Set mRange = Union(mRange, r)
    End If
    
    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub

Private Sub SFWork_SelectionTerm()

    If mRange Is Nothing Then
    Else
        With mRange
            .HorizontalAlignment = HorizontalAlignment
            .VerticalAlignment = VerticalAlignment
        End With
    End If

End Sub
Attribute VB_Name = "SelectionAllAddItemNo"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private mstrItemName As String


'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionAllFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionAllFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean)

    Undo = True
    
End Sub

Public Property Let ItemName(ByVal strBuf As String)
    mstrItemName = strBuf
End Property

Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)

    Dim lngCnt As Long
    Dim lngRow As Long
    Dim lngCol As Long
    Dim blnFind As Boolean

    Dim strBuf As String
    Dim lngLevel As Long

    On Error GoTo e
    
    lngCol = r.Column
    lngRow = r.row - 1
    
    strBuf = ""
    blnFind = False

    For lngCnt = lngRow To 1 Step -1
    
        strBuf = Cells(lngCnt, lngCol).Value
        lngLevel = Cells(lngCnt, lngCol).IndentLevel

        If lngLevel < r.IndentLevel Then
            Exit For
        End If

        If lngLevel = r.IndentLevel Then
            '|fffd||4cf||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||fffd|s|fffd||30f||a347|
            If rlxHasItemNo(strBuf, mstrItemName) Then
                blnFind = True
            End If
            Exit For
        End If
    Next

   
    Dim strNewNum As String
    If blnFind Then
        '|fffd||fffd||fffd||314||50d||fffd||fffd||fffd|U|fffd||fffd|
        strNewNum = rlxGetItemNext(strBuf, mstrItemName)
    Else
        '|fffd||fffd||fffd||82||fffd||fffd||fffd||202||fffd||fffd||a347||fffd||fffd||fffd||fffd||fffd||303||fffd||fffd|x|fffd||fffd||fffd||14d||14f||fffd||fffd||314||50d||fffd||fffd||242||fffd||fffd||fffd|
        strNewNum = rlxGetItemNext("", mstrItemName)
    End If

    '|fffd||fffd||fffd||fffd||fffd||fffd||255||3ca||fffd|
    r.NumberFormatLocal = "@"

    '|fffd|i|fffd||fffd||fffd||50d||fffd||fffd||30d||d3dc|
    delItemNo r

    '|fffd|i|fffd||fffd||fffd||50d||fffd||fffd||fffd||752||80b7||fffd||fffd|
    setItemNo r, strNewNum
    
    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
    
End Sub



Attribute VB_Name = "SelectionAllAddSectionNo"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private mlngIndent As Long


'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionAllFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionAllFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean)

    Undo = True
    
End Sub

Public Property Let Indent(ByVal lngBuf As Long)
    mlngIndent = lngBuf
End Property

Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)

    Dim lngCnt As Long
    Dim lngRow As Long
    Dim lngCol As Long
    Dim blnFind As Boolean
    Dim blnSearch As Boolean

    Dim strBuf As String
    Dim lngLevel As Long
    Dim strMsg As String
    
    Dim WB As Workbook
    Dim WS As Worksheet
    Dim i As Long
    Dim j As Long
    
    Const C_NOT_FOUND As Long = -1

    On Error GoTo e
    
    lngCol = r.Column
    lngRow = C_NOT_FOUND
    
    strBuf = ""
    lngLevel = 0
    blnFind = False
    blnSearch = False

    Set WB = r.Parent.Parent
    
    j = 0
    For i = r.Parent.index To 1 Step -1
    
        '|fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|V|fffd|[|fffd|g|fffd||302||742||154||fffd||fffd||fffd|
        Set WS = WB.Worksheets(i)
        
        If WS.visible = xlSheetVisible Then
        
            If lngRow = C_NOT_FOUND Then
                lngRow = r.row - 1
            Else
                lngRow = WS.UsedRange.Item(WS.UsedRange.count).row
            End If
            
            For lngCnt = lngRow To 1 Step -1
            
                strBuf = WS.Cells(lngCnt, lngCol).Value
                lngLevel = WS.Cells(lngCnt, lngCol).IndentLevel
        
                '|fffd|i|fffd||fffd||fffd||50d||fffd||fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||202||fffd||fffd|s|fffd||30f||a347|
                If rlxHasSectionNo(strBuf, lngLevel) And lngLevel <= r.IndentLevel Then
                    blnFind = True
                    GoTo pass
                End If
            
            Next
            
            blnSearch = True
            j = j + 1
            If j >= 2 Then
                Exit For
            End If
        End If
        
        Set WS = Nothing
        
    Next
    Set WB = Nothing
pass:
    
    If blnSearch And blnFind Then
    
        strMsg = ""
        strMsg = strMsg & "|fffd|P|fffd||91|O|fffd||303|V|fffd|[|fffd|g|fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||50d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|H" & vbCrLf
        strMsg = strMsg & "|fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||202||fffd||fffd||a347||fffd||34d||14f||fffd||fffd||fffd||fffd||fffd||314||502||fffd||fffd||702||fffd||fffd|B" & vbCrLf & vbCrLf
        strMsg = strMsg & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbCrLf
        strMsg = strMsg & "|fffd|@|fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd||7c2||242||353||fffd||fffd||fffd||fffd||fffd||252|i|fffd||fffd||fffd||50d||fffd||fffd||fffd||fffd|L|fffd|q|fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|K|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B"
        
        '|fffd||fffd||fffd|b|fffd|Z|fffd|[|fffd|W
        If MsgBox(strMsg, vbQuestion + vbYesNo, C_TITLE) <> vbYes Then
            strBuf = ""
        End If
            
    End If
    
    Dim strNewNum As String
    If blnFind Then
        '|fffd||fffd||fffd||314||50d||fffd||fffd||fffd|U|fffd||fffd|
        strNewNum = rlxGetSectionNext(strBuf, lngLevel, r.IndentLevel)
    Else
        '|fffd||fffd||fffd||82||fffd||fffd||fffd||202||fffd||fffd||a347||fffd||fffd||fffd||fffd||fffd||303||fffd||fffd|x|fffd||fffd||fffd||14d||14f||fffd||fffd||314||50d||fffd||fffd||242||fffd||fffd||fffd|
        strNewNum = rlxGetSectionNext("", lngLevel, r.IndentLevel)
    End If

    '|fffd||fffd||fffd||fffd||fffd||fffd||255||3ca||fffd|
    r.NumberFormatLocal = "@"

    '|fffd|i|fffd||fffd||fffd||50d||fffd||fffd||30d||d3dc|
    delSectionNo r

    '|fffd|i|fffd||fffd||fffd||50d||fffd||fffd||fffd||752||80b7||fffd||fffd|
    setSectionNo r, strNewNum
    
    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
    
End Sub

Function getSectionPrevSheetRange(ByRef r As Range) As Range

    Dim s As Worksheet
    Dim b As Workbook
    Dim s2 As Worksheet
    Dim i As Long
    
    Set s = r.Parent
    Set b = s.Parent
    
    Set getSectionPrevSheetRange = Nothing

    For i = s.index - 1 To 1 Step -1
    
        If b.Worksheets(i).visible = xlSheetVisible Then
        
            Set s2 = b.Worksheets(i)
            Set getSectionPrevSheetRange = Intersect(s2.UsedRange, s2.Columns(r.Column))
            
            Exit For
        End If
    Next

End Function

Attribute VB_Name = "SelectionAllDiagonalDown"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


Private mRange As Range

'------------------------------------------------------------------------------------------------------------------------
' SelectionAllFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionAllFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionAllFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionAllFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionAllFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionAllFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean)
    Undo = True
End Sub

Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)

    On Error GoTo e

    If mRange Is Nothing Then
        Set mRange = r
    Else
        Set mRange = Union(mRange, r)
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True

End Sub




Private Sub SFWork_SelectionTerm()

    If mRange Is Nothing Then
    Else
        With mRange.Borders(xlDiagonalDown)
            .LineStyle = xlContinuous
            .ColorIndex = xlAutomatic
            .TintAndShade = 0
            .Weight = xlThin
        End With
    End If
    
End Sub
Attribute VB_Name = "SelectionAllDiagonalUp"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


Private mRange As Range

'------------------------------------------------------------------------------------------------------------------------
' SelectionAllFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionAllFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionAllFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionAllFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionAllFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionAllFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub


Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean)
    Undo = True
End Sub

Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)

    On Error GoTo e
    
    If mRange Is Nothing Then
        Set mRange = r
    Else
        Set mRange = Union(mRange, r)
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
    
End Sub
Private Sub SFWork_SelectionTerm()

    If mRange Is Nothing Then
    Else
        With mRange.Borders(xlDiagonalUp)
            .LineStyle = xlContinuous
            .ColorIndex = xlAutomatic
            .TintAndShade = 0
            .Weight = xlThin
        End With
    End If
End Sub
Attribute VB_Name = "SelectionAllFrameWork"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'--------------------------------------------------------------
' SelectionFrameWork 1.00 2011/07/22 Y.Watanabe
'--------------------------------------------------------------
' Selection|fffd||24a||702||702||fffd||fffd|Cell|fffd||310||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd|t|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd|[|fffd|N
'--------------------------------------------------------------
Option Explicit

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
Public Event SelectionInit(ByRef Cancel As Boolean, ByRef Undo As Boolean)
'|fffd||fffd||fffd|C|fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
Public Event SelectionMain(ByRef r As Range, ByRef Cancel As Boolean)
'|fffd|I|fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
Public Event SelectionTerm()

Public Sub Run()

    '|fffd||3d0||fffd||fffd||933e|
    Dim r As Range
    Dim Cancel As Boolean
    Dim Undo As Boolean

    '|fffd|L|fffd||fffd||fffd||fffd||fffd|Z|fffd||fffd||fffd||30f||fffd||fffd||fffd||fffd||fffd|
    Cancel = False
    Undo = False
    
    'Selection|fffd|i|fffd||fffd||fffd|o|fffd|[
    Dim objStatus As SelectionStatusBar
    
    On Error GoTo ErrHandle
    
    If Selection Is Nothing Then
        MsgBox "|fffd|I|fffd||fffd||348||342||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
    
    If TypeOf Selection Is Range Then
    Else
        MsgBox "|fffd|I|fffd||fffd||348||342||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
    
'    If selection.count > C_MAX_CELLS Then
    If Selection.CountLarge > C_MAX_CELLS Then
        Dim ret As VbMsgBoxResult
        ret = MsgBox("|fffd||fffd||282||303|Z|fffd||fffd||fffd||fffd||fffd|I|fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B|fffd||fffd||fffd||fffd||fffd||24e||fffd||fffd||502||fffd||fffd||fffd||fffd||fffd||fffd||9055||fffd||fffd||fffd||256||7c2||fffd||fffd||702||fffd||fffd||42a91||fffd||fffd|s|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|H", vbInformation + vbOKCancel + vbDefaultButton2, C_TITLE)
        If ret = vbCancel Then
            Exit Sub
        End If
    End If
    
    '---------------------------
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
    '---------------------------
    RaiseEvent SelectionInit(Cancel, Undo)
    
    '|fffd|L|fffd||fffd||fffd||fffd||fffd|Z|fffd||fffd||fffd||30f||a347|
    If Cancel Then
        Exit Sub
    End If
    
    '|fffd||fffd||283|Z|fffd||fffd||fffd||30f||a347|UNDO|fffd|s|fffd||fffd|
    If ret = vbOK Then
        Undo = False
    End If
    
    'Undo|fffd||30f||a347|
    If Undo Then
        
        ThisWorkbook.Worksheets("Undo").Cells.Clear
        
        Set mUndo.sourceRange = Selection
        Set mUndo.destRange = ThisWorkbook.Worksheets("Undo").Range(Selection.Address)
        
        Dim rr As Range
        For Each rr In mUndo.sourceRange.Areas
            rr.Copy mUndo.destRange.Worksheet.Range(rr.Address)
        Next
        
    End If

    'Selection|fffd|i|fffd||fffd||fffd|o|fffd|[Instance|fffd||fffd|
    Set objStatus = New SelectionStatusBar

    For Each r In Selection
    
        ''|fffd|t|fffd|B|fffd||fffd||fffd|^|fffd||fffd||fffd||fffd||454||fffd|\|fffd||fffd||fffd||38d||fffd|B
        If r.Rows.Hidden Or r.Columns.Hidden Then
            '|fffd|t|fffd|B|fffd||fffd||fffd|^|fffd||702||fffd||fffd||354||fffd|\|fffd||fffd||fffd||30d|s|fffd|E|fffd||fffd||30f||fffd||fffd||fffd||fffd||34d|s|fffd||fffd||202||fffd||fffd|B
            GoTo pass
        End If
                
        '---------------------------
        '|fffd||fffd||fffd|C|fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
        '---------------------------
        RaiseEvent SelectionMain(r, Cancel)
        If Cancel Then
            Exit For
        End If
        
pass:
        'Selection|fffd|i|fffd||fffd||fffd|o|fffd|[|fffd||30d|X|fffd|V
        objStatus.Refresh
    Next
    
    'Selection|fffd|i|fffd||fffd||fffd|o|fffd|[|fffd||fffd|Dispose
    objStatus.Dispose
    
    Set objStatus = Nothing

    '---------------------------
    '|fffd|I|fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
    '---------------------------
    Application.ScreenUpdating = False
    
    RaiseEvent SelectionTerm
    
    Application.ScreenUpdating = True
    
    If Undo Then
        'Undo
        Application.OnUndo "Undo", "execUndo"
    End If
    
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE

End Sub


Attribute VB_Name = "SelectionAllIndent"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private mlngIndent As Long


'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionAllFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionAllFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean)

    Undo = True
    
End Sub

Public Property Let Indent(ByVal lngBuf As Long)
    mlngIndent = lngBuf
End Property

Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
        
    On Error GoTo e
    
    setIndent r, mlngIndent
    
    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
    
End Sub



Attribute VB_Name = "SelectionAllIndentClear"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionAllFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionAllFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionAllFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionAllFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionAllFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionAllFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean)
    Undo = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)

    On Error GoTo e
    
    r.IndentLevel = 0
    
    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True

End Sub




Attribute VB_Name = "SelectionAllInsertBottom"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionAllFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionAllFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|o|fffd||3d0||fffd||fffd||933e||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private mstrIns As String

'------------------------------------------------------------------------------------------------------------------------
' SelectionAllFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionAllFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionAllFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionAllFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean)

    mstrIns = InputBox("|fffd|Z|fffd||fffd||fffd||30d||14c||fffd||252||1c9||fffd||fffd||fffd||fffd||9576||fffd||fffd||fffd||fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B")
    If mstrIns = "" Then
        Cancel = True
    End If
    
    Undo = True

End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)

    On Error GoTo e
    
    If IsError(r.Value) Then
        Exit Sub
    End If
        
    If VarType(r.Value) = vbString Then
        r.Characters(r.Characters.count + 1, 0).Insert mstrIns
    Else
        r.Value = r.Value & mstrIns
    End If
    
    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True

End Sub



Attribute VB_Name = "SelectionAllInsertHead"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionAllFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionAllFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|o|fffd||3d0||fffd||fffd||933e||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private mstrIns As String

'------------------------------------------------------------------------------------------------------------------------
' SelectionAllFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionAllFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionAllFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionAllFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean)

    mstrIns = InputBox("|fffd|Z|fffd||fffd||fffd||310||64ea||fffd||252||1c9||fffd||fffd||fffd||fffd||9576||fffd||fffd||fffd||fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B")
    If mstrIns = "" Then
        Cancel = True
    End If
    
    Undo = True

End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)

    On Error GoTo e
    
    If IsError(r.Value) Then
        Exit Sub
    End If
    
    If VarType(r.Value) = vbString Then
        r.Characters(1, 0).Insert mstrIns
    Else
        r.Value = mstrIns & r.Value
    End If
    
    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
    
End Sub


Attribute VB_Name = "SelectionAllInsertMiddle"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionAllFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionAllFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|o|fffd||3d0||fffd||fffd||933e||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private mstrIns As String
'Private mstrPos As String
Private mlngIns As Long


'------------------------------------------------------------------------------------------------------------------------
' SelectionAllFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionAllFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionAllFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionAllFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean)

'    mstrPos = InputBox("|fffd|Z|fffd||fffd||fffd||309||fffd||fffd||fffd||fffd||fffd||fffd||682||311|O|fffd||255||fffd||fffd||fffd||fffd||fffd|}|fffd||fffd||fffd||fffd||fffd||90a9||fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B")
    mlngIns = frmInputLength.Start("|fffd|Z|fffd||fffd||fffd||309||fffd||fffd||fffd||fffd||fffd||fffd||682||311|O|fffd||255||fffd||fffd||fffd||fffd||fffd|}|fffd||fffd||fffd||fffd||fffd||90a9||fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B")
'    If Val(mstrPos) = 0 Then
    If mlngIns = 0 Then
        Cancel = True
        Exit Sub
    End If
    
    mstrIns = InputBox("|fffd||1c9||fffd||fffd||fffd||fffd||9576||fffd||fffd||fffd||fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B")
    If mstrIns = "" Then
        Cancel = True
        Exit Sub
    End If
    
    Undo = True

End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
        
    Dim f As String
    Dim b As String
    
    Dim lngPos As Long
    
    On Error GoTo e
    
    If IsError(r.Value) Then
        Exit Sub
    End If
    
    lngPos = rlxSetLimit(1, Len(r.Value) + 1, mlngIns)
    
    If VarType(r.Value) = vbString Then
        r.Characters(lngPos, 0).Insert mstrIns
    Else
        
        f = Mid$(r.Value, 1, lngPos - 1)
        b = Mid$(r.Value, lngPos)
            
        r.Value = f & mstrIns & b
    End If
    
    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True

End Sub



Attribute VB_Name = "SelectionAllNextNo"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


Private mRange As Range

'------------------------------------------------------------------------------------------------------------------------
' SelectionAllFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionAllFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionAllFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionAllFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionAllFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionAllFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean)
    Undo = True
End Sub

Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)

    Dim lngCnt As Long
    Dim lngRow As Long
    Dim lngCol As Long

    Dim strBuf As String
    Dim strHead As String
    Dim strBottom As String
    Dim strNum As String
    Dim lngPos As Long
    Dim lngLen As Long
    Dim i As Long
    
    Dim blnStart As Boolean
    Dim lngStartPos As Long
    Dim lngEndPos As Long

    On Error Resume Next

    lngCol = r.Column
    lngRow = r.row
    
    For lngCnt = lngRow - 1 To 1 Step -1
    
        strBuf = Cells(lngCnt, lngCol).Value
        
        blnStart = False
        lngStartPos = 1
        lngEndPos = -1
        
        For i = Len(strBuf) To 1 Step -1
            Select Case Mid$(strBuf, i, 1)
                Case "0" To "9"
                    If blnStart Then
                    Else
                        blnStart = True
                        lngEndPos = i
                    End If
                Case Else
                    If blnStart Then
                        lngStartPos = i + 1
                        Exit For
                    End If
            End Select
        Next
        
        Select Case lngEndPos
            Case -1
            Case Else
                strHead = Mid$(strBuf, 1, lngStartPos - 1)
                strNum = Mid$(strBuf, lngStartPos, lngEndPos - lngStartPos + 1)
                strBottom = Mid$(strBuf, lngEndPos + 1, Len(strBuf) - lngEndPos)
                Exit For
        End Select
    Next
    
    Cells(lngRow, lngCol).Value = strHead & Format$(Val(strNum) + 1, String(Len(strNum), "0")) & strBottom
    
End Sub



Attribute VB_Name = "SelectionAllSelectEmptyCell"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


Private mRange As Range

'------------------------------------------------------------------------------------------------------------------------
' SelectionAllFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionAllFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionAllFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionAllFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionAllFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionAllFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)

    On Error GoTo e
    
    If IsError(r.Value) Then
        Exit Sub
    End If
    
    If r.Value = "" Or IsEmpty(r.Value) Then
        If mRange Is Nothing Then
            Set mRange = r
        Else
            Set mRange = Union(mRange, r)
        End If
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub

Private Sub SFWork_SelectionTerm()

    On Error GoTo e
    
    If mRange Is Nothing Then
        MsgBox "|fffd|I|fffd||fffd||38f||6c2||303|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|B", vbInformation, C_TITLE
    Else
        mRange.Select
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub

Attribute VB_Name = "SelectionCheckAlphaAndNum"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Dim lngEr As Long
Dim c As Range
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)
    lngEr = 0
    Undo = True
    Func = True
End Sub


Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)

    On Error GoTo e
    
    If rlxIsAlphaAndNum(r.Value) Then
    Else
        lngEr = lngEr + 1
        If c Is Nothing Then
            Set c = r
        Else
            Set c = Union(c, r)
        End If
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub

Private Sub SFWork_SelectionTerm()
    
    On Error GoTo e
    
    If c Is Nothing Then
    Else
        c.Interior.Color = vbYellow
'        c.Select
    End If
    
    If lngEr > 0 Then
        MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||302||fffd||fffd||fffd|Z|fffd||fffd||fffd||fffd|" & lngEr & "|fffd||8c||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE
    Else
        MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||34c||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE
    End If
    
    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub
Attribute VB_Name = "SelectionCheckAlphabet"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Dim lngEr As Long
Dim c As Range
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)
    lngEr = 0
    Undo = True
    Func = True
End Sub


Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)

    On Error GoTo e
    
    If rlxIsAlphabet(r.Value) Then
    Else
        lngEr = lngEr + 1
        If c Is Nothing Then
            Set c = r
        Else
            Set c = Union(c, r)
        End If
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub



Private Sub SFWork_SelectionTerm()
    
    On Error GoTo e
    
    If c Is Nothing Then
    Else
        c.Interior.Color = vbYellow
    End If
    
    If lngEr > 0 Then
        MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||302||fffd||fffd||fffd|Z|fffd||fffd||fffd||fffd|" & lngEr & "|fffd||8c||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE
    Else
        MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||34c||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub
Attribute VB_Name = "SelectionCheckAsc"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim lngAsc As Long
Dim c As Range
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)

    lngAsc = 0
    Undo = True
    Func = True

End Sub

Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)

    Dim lngByte As Long
    Dim lngCol As Long
    
    On Error GoTo e
    
    lngByte = LenB(strConv(r.Value, vbFromUnicode))
    lngCol = Len(r.Value)
    
    If lngByte = lngCol * 2 Then
    Else
        lngAsc = lngAsc + 1
        If c Is Nothing Then
            Set c = r
        Else
            Set c = Union(c, r)
        End If
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub

Private Sub SFWork_SelectionTerm()

    Dim strMsg As String
    
    On Error GoTo e
    
    If c Is Nothing Then
    Else
        c.Interior.Color = vbYellow
    End If
    
    
    If lngAsc > 0 Then
        MsgBox "|fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd||fffd||302||fffd||fffd||fffd|Z|fffd||fffd||fffd||fffd|" & lngAsc & "|fffd||8c||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE
    Else
        MsgBox "|fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd||34c||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub

Attribute VB_Name = "SelectionCheckCellColor"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)
    Func = True

End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
        
    On Error GoTo e
    
    r.Value = "&H" & Right("00000000" & Hex(r.Interior.Color), 8)

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub









Attribute VB_Name = "SelectionCheckCount"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionAllFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionAllFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean)

    On Error GoTo e
    
    MsgBox Selection.CountLarge & " |fffd||fffd| |fffd|I|fffd||12182||142||fffd||fffd|B", vbInformation, C_TITLE
    
    Cancel = True

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub

Attribute VB_Name = "SelectionCheckDate"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim lngEr As Long
Dim c As Range
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)
    lngEr = 0
    Undo = True
    Func = True
End Sub


Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)

    On Error GoTo e
    
    If IsDate(r.Value) Then
    Else
        lngEr = lngEr + 1
        If c Is Nothing Then
            Set c = r
        Else
            Set c = Union(c, r)
        End If
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub

Private Sub SFWork_SelectionTerm()
    
    On Error GoTo e
    
    If c Is Nothing Then
    Else
        c.Interior.Color = vbYellow
    End If
    
    If lngEr > 0 Then
        MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||302||fffd||fffd||fffd|Z|fffd||fffd||fffd||fffd|" & lngEr & "|fffd||8c||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE
    Else
        MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||34c||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub
Attribute VB_Name = "SelectionCheckLuhn"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim lngEr As Long
Dim c As Range
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)
    lngEr = 0
    Undo = True
    Func = True

End Sub


Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
    
    On Error GoTo e
    
    If rlxIsLuhn(r.Value) Then
    Else
        lngEr = lngEr + 1
        If c Is Nothing Then
            Set c = r
        Else
            Set c = Union(c, r)
        End If
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub

Private Sub SFWork_SelectionTerm()

    On Error GoTo e
    
    If c Is Nothing Then
    Else
        c.Interior.Color = vbYellow
    End If

    If lngEr > 0 Then
        MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||302||fffd||fffd||fffd|Z|fffd||fffd||fffd||fffd|" & lngEr & "|fffd||8c||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE
    Else
        MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||34c||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE
    End If
    
    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub
Attribute VB_Name = "SelectionCheckModulus10"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Dim lngEr As Long
Dim c As Range
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)
    lngEr = 0
    Undo = True
    Func = True

End Sub


Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)

    On Error GoTo e
    
    If rlxIsModulus10(r.Value) Then
    Else
        lngEr = lngEr + 1
        If c Is Nothing Then
            Set c = r
        Else
            Set c = Union(c, r)
        End If
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub

Private Sub SFWork_SelectionTerm()

    On Error GoTo e
    
    If c Is Nothing Then
    Else
        c.Interior.Color = vbYellow
    End If
    
    If lngEr > 0 Then
        MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||302||fffd||fffd||fffd|Z|fffd||fffd||fffd||fffd|" & lngEr & "|fffd||8c||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE
    Else
        MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||34c||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE
    End If
    
    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub
Attribute VB_Name = "SelectionCheckModulus11_10_2"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Dim lngEr As Long
Dim c As Range
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)
    lngEr = 0
    Undo = True
    Func = True

End Sub


Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)

    On Error GoTo e
    
    If rlxIsModulus11_10_2(r.Value) Then
    Else
        lngEr = lngEr + 1
        If c Is Nothing Then
            Set c = r
        Else
            Set c = Union(c, r)
        End If
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub


Private Sub SFWork_SelectionTerm()

    On Error GoTo e
    
    If c Is Nothing Then
    Else
        c.Interior.Color = vbYellow
    End If
    
    If lngEr > 0 Then
        MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||302||fffd||fffd||fffd|Z|fffd||fffd||fffd||fffd|" & lngEr & "|fffd||8c||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE
    Else
        MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||34c||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub
Attribute VB_Name = "SelectionCheckModulus11_2_7"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim lngEr As Long
Dim c As Range
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)
    lngEr = 0
    Undo = True
    Func = True

End Sub


Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)

    On Error GoTo e
    
    If rlxIsModulus11_2_7(r.Value) Then
    Else
        lngEr = lngEr + 1
        If c Is Nothing Then
            Set c = r
        Else
            Set c = Union(c, r)
        End If
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub



Private Sub SFWork_SelectionTerm()
    
    On Error GoTo e
    
    If c Is Nothing Then
    Else
        c.Interior.Color = vbYellow
'        c.Select
    End If
    
    If lngEr > 0 Then
        MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||302||fffd||fffd||fffd|Z|fffd||fffd||fffd||fffd|" & lngEr & "|fffd||8c||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE
    Else
        MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||34c||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub
Attribute VB_Name = "SelectionCheckModulus11_Pref"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim lngEr As Long
Dim c As Range
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)
    lngEr = 0
    Undo = True
    Func = True

End Sub


Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)

    On Error GoTo e
    
    If rlxIsModulus11_Pref(r.Value) Then
    Else
        lngEr = lngEr + 1
        If c Is Nothing Then
            Set c = r
        Else
            Set c = Union(c, r)
        End If
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub

Private Sub SFWork_SelectionTerm()
    
    On Error GoTo e
    
    If c Is Nothing Then
    Else
        c.Interior.Color = vbYellow
'        c.Select
    End If
    
    If lngEr > 0 Then
        MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||302||fffd||fffd||fffd|Z|fffd||fffd||fffd||fffd|" & lngEr & "|fffd||8c||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE
    Else
        MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||34c||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub
Attribute VB_Name = "SelectionCheckNumber"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Dim lngEr As Long
Dim c As Range
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)
    lngEr = 0
    Undo = True
    Func = True

End Sub


Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)

    On Error GoTo e
    
    If rlxIsNumber(r.Value) Then
    Else
        lngEr = lngEr + 1
        If c Is Nothing Then
            Set c = r
        Else
            Set c = Union(c, r)
        End If
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub


Private Sub SFWork_SelectionTerm()

    On Error GoTo e
    
    If c Is Nothing Then
    Else
        c.Interior.Color = vbYellow
    End If
    
    If lngEr > 0 Then
        MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||302||fffd||fffd||fffd|Z|fffd||fffd||fffd||fffd|" & lngEr & "|fffd||8c||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE
    Else
        MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||34c||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE
    End If
    
    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub
Attribute VB_Name = "SelectionCheckNumeric"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Dim lngEr As Long
Dim c As Range
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)
    lngEr = 0
    Undo = True
    Func = True

End Sub


Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)

    On Error GoTo e
    
    If IsNumeric(r.Value) Then
    Else
        lngEr = lngEr + 1
        If c Is Nothing Then
            Set c = r
        Else
            Set c = Union(c, r)
        End If
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub

Private Sub SFWork_SelectionTerm()

    On Error GoTo e
    
    If c Is Nothing Then
    Else
        c.Interior.Color = vbYellow
    End If
    
    If lngEr > 0 Then
        MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||302||fffd||fffd||fffd|Z|fffd||fffd||fffd||fffd|" & lngEr & "|fffd||8c||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE
    Else
        MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||34c||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE
    End If
    
    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub
Attribute VB_Name = "SelectionCheckSJIS"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim lngAsc As Long
Dim c As Range
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)

    lngAsc = 0
    Func = True

End Sub

Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)

    Dim lngByte As Long
    Dim lngCol As Long
    
    On Error GoTo e
    
    lngByte = LenB(strConv(r.Value, vbFromUnicode))
    lngCol = Len(r.Value)
    
    If lngByte = lngCol Then
    Else
        lngAsc = lngAsc + 1
        If c Is Nothing Then
            Set c = r
        Else
            Set c = Union(c, r)
        End If
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True

End Sub

Private Sub SFWork_SelectionTerm()

    Dim strMsg As String
    
    On Error GoTo e
    
    If c Is Nothing Then
    Else
        c.Interior.Color = vbYellow
    End If
    
    If lngAsc > 0 Then
        MsgBox "|fffd|S|fffd|p|fffd||fffd||fffd||fffd||fffd||fffd||302||fffd||fffd||fffd|Z|fffd||fffd||fffd||fffd|" & lngAsc & "|fffd||8c||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE
    Else
        MsgBox "|fffd|S|fffd|p|fffd||fffd||fffd||fffd||fffd||34c||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)

End Sub


Attribute VB_Name = "SelectionCheckSize"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim lngSizeByte As Long
Dim lngSizeCol As Long
Dim rByte As Range
Dim rCol As Range
Public Enum SelectionCheckSizeConstants
    CountTypeSJIS
    CountTypeUTF8
End Enum
Dim mCountType As SelectionCheckSizeConstants
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)

    lngSizeByte = 0
    lngSizeCol = 0
    Undo = True
    Func = True

End Sub
Public Property Let CountType(ByVal v As SelectionCheckSizeConstants)
    mCountType = v
End Property




Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)

    On Error GoTo e
    
    Dim lngByte As Long
    Dim lngCol As Long
    Dim bytBuf() As Byte
    
    Select Case mCountType
        Case CountTypeSJIS
'            lngByte = LenB(StrConv(r.Value, vbFromUnicode))
            lngByte = LenB(strConv(r.Text, vbFromUnicode))
            
        Case CountTypeUTF8
            Dim U8 As UTF8Encoding
            Set U8 = New UTF8Encoding
'            bytBuf = U8.getBytes(r.Value)
            bytBuf = U8.getBytes(r.Text)
            lngByte = UBound(bytBuf()) - LBound(bytBuf()) + 1
            Set U8 = Nothing
            
    End Select
'    lngCol = Len(r.Value)
    lngCol = Len(r.Text)
    
    If lngByte > lngSizeByte Then
        lngSizeByte = lngByte
        Set rByte = r
    End If
    
    If lngCol > lngSizeCol Then
        lngSizeCol = lngCol
        Set rCol = r
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
    
End Sub

Private Sub SFWork_SelectionTerm()

    On Error GoTo e
    
    If rByte Is Nothing Then
    Else
        With rByte.Interior
            .Color = vbRed
            .Pattern = xlSolid
        End With
    End If

    If rCol Is Nothing Then
    Else
        With rCol.Interior
            .Color = vbYellow
            .Pattern = xlSolid
        End With
    End If

    frmMaxCount.Start lngSizeByte, lngSizeCol
    
    Exit Sub
e:
    Call rlxErrMsg(err)

End Sub
Attribute VB_Name = "SelectionCheckUniq"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|o|fffd||3d0||fffd||fffd||933e||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private mlngMax As Long
Private mlngMatch As Long
'Private mobjCol As Collection
Private mobjCol As Object

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)

    On Error GoTo e
    
    Set mobjCol = CreateObject("Scripting.Dictionary")
    
    mlngMax = 0
    mlngMatch = 0
    
    Undo = True
    Func = True

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)

    Dim c As Object
    
    Dim lngCnt As Long
    Dim blnMatch As Boolean
    
    On Error GoTo e
    
    If r.Value = "" Then
        Exit Sub
    End If
    
    '|fffd|R|fffd||fffd||fffd|N|fffd|V|fffd||fffd||fffd||fffd||fffd||fffd||fffd||248||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||302||fffd||fffd||fffd||fffd||90a9||fffd||1c2||fffd||fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N
    blnMatch = False

    Set c = Nothing
    
    If mobjCol.exists(CStr(r.Value)) Then
        blnMatch = True
        Set c = mobjCol.Item(CStr(r.Value))
        With c.Interior
            .Color = vbCyan
            .Pattern = xlSolid
        End With
    End If
    
    '|fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||302||fffd||fffd|P|fffd||82||142||fffd||fffd||fffd||fffd||742||fffd||fffd||fffd||fffd||a347|
    If blnMatch Then
        mlngMatch = mlngMatch + 1
        With r.Interior
            .Color = vbYellow
            .Pattern = xlSolid
        End With
    Else
        '|fffd||fffd||fffd||742||fffd||fffd||202||fffd||fffd||a347||fffd|R|fffd||fffd||fffd|N|fffd|V|fffd||fffd||fffd||fffd||fffd||252||1c9||fffd|
        mlngMax = mlngMax + 1
        Call mobjCol.Add(CStr(r.Value), r)
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionTerm()
    
    On Error GoTo e
    
    Set mobjCol = Nothing
    
    If mlngMatch > 0 Then
        MsgBox mlngMatch & " |fffd||fffd| |fffd||fffd|v|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B|fffd|m|fffd|F|fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation, C_TITLE
    Else
        MsgBox "|fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||302||342||fffd||fffd||fffd||702||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|B", vbInformation, C_TITLE
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub
Attribute VB_Name = "SelectionClearPhonetic"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)

    Undo = True
    Func = True
    
End Sub

Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)

    On Error GoTo e
    
    r.Characters.PhoneticCharacters = ""

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub
Attribute VB_Name = "SelectionColFramework"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'--------------------------------------------------------------
' SelectionColFrameWork 1.00 2011/07/22 Y.Watanabe
'--------------------------------------------------------------
' Selection.Areas|fffd||fffd||fffd|P|fffd||282||24f||fffd||fffd||fffd||fffd||fffd||fffd||fffd|t|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd|[|fffd|N
'--------------------------------------------------------------
Option Explicit

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
Public Event SelectionInit(ByRef rArea As Excel.Areas, ByRef Cancel As Boolean, ByRef Undo As Boolean)
'|fffd|O|fffd||fffd||fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
Public Event SelectionBegin(ByRef rArea As Range, ByRef Cancel As Boolean)
'|fffd||fffd||fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
Public Event SelectionMain(ByRef r As Range, ByVal col As Long, ByRef Cancel As Boolean)
'|fffd||33c8||fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
Public Event SelectionFinal(ByRef rAarea As Range)
'|fffd|I|fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
Public Event SelectionTerm()

Public Sub Run()

    '|fffd||3d0||fffd||fffd||933e|
    Dim r As Range
    Dim Cancel As Boolean
    Dim Undo As Boolean
    Dim lngRows As Long
    Dim lngCols As Long
    Dim lngCur As Long
    Dim i As Long
    
    'Selection|fffd|i|fffd||fffd||fffd|o|fffd|[
    Dim objStatus As SelectionStatusBar
    
    On Error GoTo ErrHandle
    
    If Selection Is Nothing Then
        MsgBox "|fffd|I|fffd||fffd||348||342||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If

    If TypeOf Selection Is Range Then
    Else
        MsgBox "|fffd|I|fffd||fffd||348||342||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
        
'    If selection.count > C_MAX_CELLS Then
    If Selection.CountLarge > C_MAX_CELLS Then
        Dim ret As VbMsgBoxResult
        ret = MsgBox("|fffd||fffd||282||303|Z|fffd||fffd||fffd||fffd||fffd|I|fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B|fffd||fffd||fffd||fffd||fffd||24e||fffd||fffd||502||fffd||fffd||fffd||fffd||fffd||fffd||9055||fffd||fffd||fffd||256||7c2||fffd||fffd||702||fffd||fffd||42a91||fffd||fffd|s|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|H", vbInformation + vbOKCancel + vbDefaultButton2, C_TITLE)
        If ret = vbCancel Then
            Exit Sub
        End If
    End If

    '|fffd|L|fffd||fffd||fffd||fffd||fffd|Z|fffd||fffd||fffd||30f||fffd||fffd||fffd||fffd||fffd|
    Cancel = False
    Undo = False
    
    '---------------------------
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
    '---------------------------
    RaiseEvent SelectionInit(Selection.Areas, Cancel, Undo)
    
    If Cancel Then
        Exit Sub
    End If
     
    '|fffd||fffd||283|Z|fffd||fffd||fffd||30f||a347|UNDO|fffd|s|fffd||fffd|
    If ret = vbOK Then
        Undo = False
    End If
    
     'Undo|fffd||30f||a347|
    If Undo Then
    
        ThisWorkbook.Worksheets("Undo").Cells.Clear
        
        Set mUndo.sourceRange = Selection
        Set mUndo.destRange = ThisWorkbook.Worksheets("Undo").Range(Selection.Address)
        
        Dim rr As Range
        For Each rr In mUndo.sourceRange.Areas
            rr.Copy mUndo.destRange.Worksheet.Range(rr.Address)
        Next
        
    End If
    
    'Selection|fffd|i|fffd||fffd||fffd|o|fffd|[Instance|fffd||fffd|
    Set objStatus = New SelectionStatusBar

    '|fffd||fffd||fffd||fffd||fffd||151||5414||fffd||fffd||fffd|Z|fffd|b|fffd|g
    Dim lngMax As Long
    Dim nArea As Range
    lngMax = 0
    For Each nArea In Selection.Areas
        lngMax = lngMax + nArea.Columns.count
    Next
    
    objStatus.MaxItems = lngMax

    Dim rArea As Range
    For Each rArea In Selection.Areas

        '---------------------------
        '|fffd|O|fffd||fffd||fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
        '---------------------------
        RaiseEvent SelectionBegin(rArea, Cancel)
        If Cancel Then
            Exit For
        End If
        
        lngRows = rArea.Rows.count
        lngCols = rArea.Columns.count
    
        For lngCur = 1 To lngCols
        
            '|fffd|P|fffd||55a82||fffd|Range|fffd||fffd||fffd||c42c|
            
            Set r = Nothing
            
            For i = 1 To lngRows
                ''|fffd|t|fffd|B|fffd||fffd||fffd|^|fffd||fffd||fffd||fffd||454||fffd|\|fffd||fffd||fffd||38d||fffd|B
                If rArea(i, lngCur).Rows.Hidden Or rArea(i, lngCur).Columns.Hidden Then
                Else
                    If r Is Nothing Then
                        Set r = rArea(i, lngCur)
                    Else
                        Set r = Union(r, rArea(i, lngCur))
                    End If
                End If
            Next
        
            '---------------------------
            '|fffd||fffd||fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
            '---------------------------
            If r Is Nothing Then
            Else
                Application.ScreenUpdating = False
                
                RaiseEvent SelectionMain(r, lngCur, Cancel)
                If Cancel Then
                    Exit For
                End If
                
                Application.ScreenUpdating = True
            
            End If
            
            'Selection|fffd|i|fffd||fffd||fffd|o|fffd|[|fffd||30d|X|fffd|V
            objStatus.Refresh
            
        Next
        '---------------------------
        '|fffd||33c8||fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
        '---------------------------
        RaiseEvent SelectionFinal(rArea)
    
    Next
    
    'Selection|fffd|i|fffd||fffd||fffd|o|fffd|[|fffd||fffd|Dispose
    objStatus.Dispose
    
    Set objStatus = Nothing

    '---------------------------
    '|fffd|I|fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
    '---------------------------
    Application.ScreenUpdating = False
    
    RaiseEvent SelectionTerm
    
    Application.ScreenUpdating = True
    
    If Undo Then
        'Undo
        Application.OnUndo "Undo", "execUndo"
    End If
    
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE

End Sub



Attribute VB_Name = "SelectionColMerge"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionColFramework
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|o|fffd||3d0||fffd||fffd||933e||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private mrngOdd As Range

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionColFramework
End Sub
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(rArea As Areas, Cancel As Boolean, Undo As Boolean)

    Application.DisplayAlerts = False
    Undo = True
    
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, ByVal col As Long, Cancel As Boolean)
        
    On Error GoTo e
    
    r.Merge

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub

Private Sub SFWork_SelectionTerm()

    Application.DisplayAlerts = True

End Sub
Attribute VB_Name = "SelectionColSelectOdd"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionColFramework
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|o|fffd||3d0||fffd||fffd||933e||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private mrngOdd As Range

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionColFramework
End Sub
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, ByVal col As Long, Cancel As Boolean)
        
    On Error GoTo e
    
    Select Case True
        Case col Mod 2 = 1
            If mrngOdd Is Nothing Then
                Set mrngOdd = r
            Else
                Set mrngOdd = Union(mrngOdd, r)
            End If
            
    End Select

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionTerm()

    On Error GoTo e
    
    '|fffd||f414||fffd||fffd||fffd|C|fffd||fffd|
    If mrngOdd Is Nothing Then
    Else
        mrngOdd.Select
    End If
    Set mrngOdd = Nothing


    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub
Attribute VB_Name = "SelectionCopySectionNo"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim mstrBuf As String
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub


Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)

    On Error GoTo e
    
    Dim strNumber As String

    strNumber = Trim(rlxGetSectionNo(r.Value, r.IndentLevel))
    If Len(strNumber) > 0 Then
    
        If mstrBuf = "" Then
            mstrBuf = strNumber
        Else
            mstrBuf = mstrBuf & ", " & strNumber
        End If
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub

Private Sub SFWork_SelectionTerm()
    
    On Error GoTo e
    
    SetClipText mstrBuf

    Exit Sub
e:
    Call rlxErrMsg(err)

End Sub
Attribute VB_Name = "SelectionCreateFolder"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|o|fffd||3d0||fffd||fffd||933e||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Public Folder As String
Dim mlngCount As Long

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||702||142||fffd||fffd||51a42||30b|L|fffd|q|fffd|B
'------------------------------------------------------------------------------------------------------------------------

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)

    '|fffd||3d0||fffd||fffd||30f||fffd||fffd||fffd||fffd||fffd|
    mlngCount = 0

    '|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||64fe|
'    mstrFolder = rlxSelectFolder()
    If Folder = "" Then
        '|fffd|L|fffd||fffd||fffd||fffd||fffd|Z|fffd||fffd|
        Cancel = True
    End If

End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
        
    Dim s As String
    Dim lngret As Long
    
    On Error GoTo e
    
    s = r.Value
    
    lngret = createFolder(rlxAddFileSeparator(Folder) & s)
    If lngret <> 0 Then
        mlngCount = mlngCount + 1
        With r.Interior
            .Color = vbYellow
            .Pattern = xlSolid
        End With
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True

End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionTerm()

    If mlngCount <> 0 Then
        MsgBox "|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||c42c||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd||fffd|" & mlngCount & "|fffd||82||303|t|fffd|H|fffd||fffd||fffd|_|fffd||c42c||fffd||fffd||fffd|o|fffd||fffd||fffd||702||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|B", vbExclamation, C_TITLE
    Else
        MsgBox "|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||c42c||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbInformation, C_TITLE
    End If

End Sub
Private Function createFolder(ByVal strFolder As String) As Long

    Dim strFolders() As String
    Dim strBuf As String
    Dim f As Variant
    Dim lngMax As Long
    Dim lngCnt As Long
    Dim lngStart As Long
    
    strFolders = Split(strFolder, "\")
    
    strBuf = ""
    lngMax = UBound(strFolders)
    
    Select Case True
        Case Left(strFolder, 2) = "\\"
            lngStart = 3
            strBuf = "\\" & strFolders(2)
        Case Mid$(strFolder, 2, 1) = ":"
            lngStart = 1
            strBuf = strFolders(0)
    End Select
    
    For lngCnt = lngStart To lngMax
        
        strBuf = strBuf & "\" & strFolders(lngCnt)
        On Error Resume Next
        MkDir strBuf
        On Error GoTo 0
    
    Next

    If Not rlxIsFolderExists(strFolder) Then
        createFolder = -1
    Else
        createFolder = 0
    End If


End Function

Attribute VB_Name = "SelectionDelItemNo"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)

    Undo = True
    
End Sub


Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)

    On Error GoTo e
    
    delItemNo r

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub



Attribute VB_Name = "SelectionDelSectionNo"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)

    Undo = True
    
End Sub


Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)

    On Error GoTo e
    
    delSectionNo r
    
    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub


Attribute VB_Name = "SelectionDelete1Char"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)

    Undo = True
    
End Sub



Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
    
    err.Clear
    On Error Resume Next
    
    If r.HasFormula Then
    Else
        r.Characters(1, 1).Delete
        If err.Number <> 0 Then
            r.Value = Mid$(r.Value, 2)
        End If
    End If
    
End Sub
Attribute VB_Name = "SelectionDelete1RightChar"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)

    Undo = True
    
End Sub



Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
    
    err.Clear
    On Error Resume Next

    If r.HasFormula Then
    Else
        r.Characters(r.Characters.count, 1).Delete
        If err.Number <> 0 Then
            r.Value = Mid$(r.Value, 1, Len(r.Value) - 1)
        End If
    End If

End Sub

Attribute VB_Name = "SelectionFormatSql"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)

    Undo = True
    
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd|C|fffd||fffd||fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)

    Dim strBuf As String
    
    On Error GoTo e
    
    strBuf = rlxFormatSql(r.Value)
    
    If Len(strBuf) <> 0 Then
        r.Value = strBuf
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub


Attribute VB_Name = "SelectionFrameWork"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'--------------------------------------------------------------
' SelectionFrameWork 1.00 2011/07/22 Y.Watanabe
'--------------------------------------------------------------
' Selection|fffd||24a||702||702||fffd||fffd|Cell|fffd||310||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd|t|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd|[|fffd|N
'--------------------------------------------------------------
Option Explicit

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
Public Event SelectionInit(ByRef Cancel As Boolean, ByRef Undo As Boolean, ByRef Func As Boolean)
'|fffd||fffd||fffd|C|fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
Public Event SelectionMain(ByRef r As Range, ByRef Cancel As Boolean)
'|fffd|I|fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
Public Event SelectionTerm()

Public Sub Run()

    '|fffd||3d0||fffd||fffd||933e|
    Dim r As Range
    Dim Cancel As Boolean
    Dim Undo As Boolean
    Dim Func As Boolean
    
    Dim a As Range

    Dim colMerge As Collection
    
    On Error GoTo ErrHandle
    
    '|fffd|L|fffd||fffd||fffd||fffd||fffd|Z|fffd||fffd||fffd||30f||fffd||fffd||fffd||fffd||fffd|
    Cancel = False
    
    'Undo|fffd||30f||fffd||fffd||fffd||fffd||fffd|
    Undo = False
    
    '|fffd||fffd||fffd||251||382||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd|H
    Func = False
    
    'Selection|fffd|i|fffd||fffd||fffd|o|fffd|[
    Dim objStatus As SelectionStatusBar
    
    Dim blnRange As Boolean
    blnRange = False
    Select Case True
        Case ActiveWorkbook Is Nothing
        Case ActiveCell Is Nothing
        Case Selection Is Nothing
        Case TypeOf Selection Is Range
            blnRange = True
        Case Else
    End Select
    If blnRange Then
    Else
        MsgBox "|fffd|I|fffd||fffd||348||342||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
    
    
    '|fffd|g|fffd||fffd||fffd||102||fffd||fffd||fffd|Z|fffd||fffd||fffd||18c||fffd||fffd||751|I|fffd||fffd||fffd|Z|fffd||fffd||fffd||fffd|AND|fffd||fffd||fffd||fffd||fffd||302||74f||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B
    Set a = Intersect(ActiveSheet.UsedRange, Selection)
    
    '|fffd|d|fffd||fffd||fffd||fffd||fffd||fffd|I|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||a347||fffd|I|fffd||fffd||fffd|B
    If a Is Nothing Then
        Exit Sub
    End If
    
    Dim ret As VbMsgBoxResult
    If a.CountLarge > C_MAX_CELLS Then
        ret = MsgBox("|fffd||fffd||282||303|Z|fffd||fffd||fffd||fffd||fffd|I|fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B|fffd||fffd||fffd||fffd||fffd||24e||fffd||fffd||502||fffd||fffd||fffd||fffd||fffd||fffd||9055||fffd||fffd||fffd||256||7c2||fffd||fffd||702||fffd||fffd||42a91||fffd||fffd|s|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|H", vbInformation + vbOKCancel + vbDefaultButton2, C_TITLE)
        If ret = vbCancel Then
            Exit Sub
        End If
    End If

    '---------------------------
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
    '---------------------------
    RaiseEvent SelectionInit(Cancel, Undo, Func)
    
    '|fffd|L|fffd||fffd||fffd||fffd||fffd|Z|fffd||fffd||fffd||30f||a347|
    If Cancel Then
        Exit Sub
    End If
    
    '|fffd||fffd||283|Z|fffd||fffd||fffd||30f||a347|UNDO|fffd|s|fffd||fffd|
    If ret = vbOK Then
        Undo = False
    End If

    'Undo|fffd||30f||a347|
    If Undo Then
    
        ThisWorkbook.Worksheets("Undo").Cells.Clear
        
        Set mUndo.sourceRange = a
        Set mUndo.destRange = ThisWorkbook.Worksheets("Undo").Range(a.Address)
        
        Dim rr As Range
        For Each rr In mUndo.sourceRange.Areas
            rr.Copy mUndo.destRange.Worksheet.Range(rr.Address)
        Next
    
    End If

    'Selection|fffd|i|fffd||fffd||fffd|o|fffd|[Instance|fffd||fffd|
    Set objStatus = New SelectionStatusBar
    
    objStatus.MaxItems = a.count
    
    Set colMerge = New Collection
    Dim strAddress As String
    
    Application.ScreenUpdating = False
    For Each r In a
    
        ''|fffd|t|fffd|B|fffd||fffd||fffd|^|fffd||fffd||fffd||fffd||454||fffd|\|fffd||fffd||fffd||38d||fffd|B
        If r.Rows.Hidden Or r.Columns.Hidden Then
            '|fffd|t|fffd|B|fffd||fffd||fffd|^|fffd||702||fffd||fffd||354||fffd|\|fffd||fffd||fffd||30d|s|fffd|E|fffd||fffd||30f||fffd||fffd||fffd||fffd||34d|s|fffd||fffd||202||fffd||fffd|B
        Else
            
            '|fffd|}|fffd|[|fffd|W|fffd|Z|fffd||fffd||fffd||38d||fffd|
            strAddress = r.MergeArea(1, 1).Address
            Dim e As Range
            
            On Error Resume Next
            Set e = Nothing
            Set e = colMerge(strAddress)
            
            On Error GoTo 0
            
            '|fffd|A|fffd|h|fffd||fffd||fffd|X|fffd||fffd||fffd|o|fffd|^|fffd||fffd||fffd||fffd||102||fffd||fffd||202||fffd||fffd||a347||fffd|C|fffd|x|fffd||fffd||fffd|g|fffd||fffd||fffd|N|fffd||fffd||fffd||fffd|
            If err.Number = 0 And Not (e Is Nothing) Then
            Else
                '---------------------------
                '|fffd||fffd||fffd|C|fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
                '---------------------------
                If IsEmpty(r.Value) Or IsError(r.Value) Or (Not Func And r.HasFormula) Then
                Else
                    RaiseEvent SelectionMain(r, Cancel)
                    If Cancel Then
                        Exit For
                    End If
                End If
                
                colMerge.Add r, strAddress
            End If
            
        End If
        
        'Selection|fffd|i|fffd||fffd||fffd|o|fffd|[|fffd||30d|X|fffd|V
        objStatus.Refresh
    Next
    Application.ScreenUpdating = True
    
    'Selection|fffd|i|fffd||fffd||fffd|o|fffd|[|fffd||fffd|Dispose
    objStatus.Dispose
    
    Set objStatus = Nothing

    '---------------------------
    '|fffd|I|fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
    '---------------------------
    Application.ScreenUpdating = False
    
    RaiseEvent SelectionTerm
    
    Application.ScreenUpdating = True
    
    If Undo Then
        'Undo
        Application.OnUndo "Undo", "execUndo"
    End If
    
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE

End Sub

Attribute VB_Name = "SelectionInitialize"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)

    Undo = True
    
End Sub



Private Sub SFWork_SelectionTerm()

    On Error GoTo e
    
    Selection.NumberFormatLocal = "G/|fffd|W|fffd||fffd|"
    With Selection
        .HorizontalAlignment = xlGeneral
        .VerticalAlignment = xlBottom
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .ShrinkToFit = False
        .MergeCells = False
    End With
    With Selection.Font
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .ColorIndex = xlAutomatic
    End With
    With Selection
        .Borders(xlDiagonalDown).LineStyle = xlNone
        .Borders(xlDiagonalUp).LineStyle = xlNone
        .Borders(xlEdgeLeft).LineStyle = xlNone
        .Borders(xlEdgeTop).LineStyle = xlNone
        .Borders(xlEdgeBottom).LineStyle = xlNone
        .Borders(xlEdgeRight).LineStyle = xlNone
        .Borders(xlInsideVertical).LineStyle = xlNone
        .Borders(xlInsideHorizontal).LineStyle = xlNone
        .Interior.ColorIndex = xlNone
    End With
    
    Exit Sub
e:
    Call rlxErrMsg(err)
    
End Sub
Attribute VB_Name = "SelectionInsertStrInCell"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Public InsertStr As String
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionAllFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionAllFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean)
    Undo = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
        
    Dim s As String
    
    On Error GoTo e
    
    s = r.Value
    
    r.Value = InsertStr

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True

End Sub










Attribute VB_Name = "SelectionLineFeedDelete"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionAllFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionAllFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean)
    Undo = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
        
    Dim s As String
    Dim i As Long
  
    Dim lngMax As Long
    
    On Error GoTo e
    
    If IsError(r.Value) Then
        Exit Sub
    End If
    
    s = r.Value
    lngMax = Len(s)
  
    If Len(s) = 0 Then
        Exit Sub
    End If
  
    If VarType(r.Value) = vbString Then
        
        For i = r.Characters.count To 1 Step -1
            Select Case r.Characters(i, 1).Text
                Case vbCr, vbLf, vbCrLf
                    r.Characters(i, 1).Delete
                Case Else
                    Exit For
            End Select
        Next
        
    Else
        For i = lngMax To 1 Step -1
    
            Select Case Mid$(s, i, 1)
                Case vbCr, vbLf, vbCrLf
                Case Else
                    s = Mid$(s, 1, i)
                    Exit For
            End Select
        Next
        r.Value = s
    End If
    
    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True

End Sub










Attribute VB_Name = "SelectionLineFeedInsert"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionAllFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionAllFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean)
    Undo = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
        
    Dim s As String
    
    On Error GoTo e
    
    If IsError(r.Value) Then
        Exit Sub
    End If
    
    s = r.Value
  
    If Len(s) = 0 Then
        Exit Sub
    End If
  
    If VarType(r.Value) = vbString Then
        Select Case r.Characters(r.Characters.count, 1).Text
            Case vbCr, vbLf, vbCrLf
            Case Else
                r.Characters(r.Characters.count + 1, 0).Insert vbLf
        End Select
    Else
        '|fffd||14c||fffd||315||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd|A|fffd||fffd||fffd||fffd||20a|O|fffd||fffd||fffd|H
        Select Case Right$(s, 1)
            Case vbCr, vbLf, vbCrLf
            Case Else
                r.Value = s & vbLf
        End Select
    End If
    
    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub









Attribute VB_Name = "SelectionMerge"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private mr As Range
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionColFramework
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionColFramework
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub



Private Sub SFWork_SelectionInit(rArea As Areas, Cancel As Boolean, Undo As Boolean)
    Undo = True
    Application.DisplayAlerts = False
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------

Private Sub SFWork_SelectionMain(r As Range, ByVal col As Long, Cancel As Boolean)

    Dim s As Range
    
    On Error GoTo e
    
    For Each s In r
        
        If (Not IsEmpty(s.Value)) And (Not IsError(s.Value)) Then
            If mr Is Nothing Then
                Set mr = s
            Else
                If s.Value = mr(mr.count).Value Then
                    Set mr = Union(mr, s)
                Else
                    mr.Merge
                    Set mr = s
                End If
            End If
        End If
    Next
    
    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub

Private Sub SFWork_SelectionTerm()
    
    On Error GoTo e
    
    mr.Merge
    Application.DisplayAlerts = True
    
    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub
Attribute VB_Name = "SelectionMergeLine"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private mr As Range
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionColFramework
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionColFramework
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub



Private Sub SFWork_SelectionInit(rArea As Areas, Cancel As Boolean, Undo As Boolean)
    Undo = True
    Application.DisplayAlerts = False
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------

Private Sub SFWork_SelectionMain(r As Range, ByVal col As Long, ByRef Cancel As Boolean)

    Dim s As Range
    Dim p As Range
    Dim blnFirst As Boolean
    
    On Error GoTo e
    
    For Each s In r
        
        If (Not IsEmpty(s.Value)) And (Not IsError(s.Value)) Then
            If mr Is Nothing Then
                Set mr = s
            Else
                If s.Value = mr(mr.count).Value Then
                    Set mr = Union(mr, s)
                Else
                    mr.Borders(xlInsideHorizontal).LineStyle = xlNone
                    blnFirst = True
                    For Each p In mr
                        If blnFirst Then
                            blnFirst = False
                        Else
                            p.Font.Color = vbWhite
                        End If
                    Next
                    Set mr = s
                End If
            End If
        End If
    Next
    
    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub

Private Sub SFWork_SelectionTerm()
    Dim p As Range
    Dim blnFirst As Boolean
    
    On Error GoTo e
    
    mr.Borders(xlInsideHorizontal).LineStyle = xlNone
    blnFirst = True
    For Each p In mr
        If blnFirst Then
            blnFirst = False
        Else
            p.Font.Color = vbWhite
        End If
    Next
    Application.DisplayAlerts = True
    
    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub

Attribute VB_Name = "SelectionNoMerge"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)
    Undo = True
    Application.DisplayAlerts = False
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
        
    Dim s As String
    Dim p As Range
    Dim i As Long
    
    On Error GoTo e
    
    If r.MergeCells Then
        Set p = r.MergeArea
        r.UnMerge
        For i = 1 To p.count
            If i = 1 Then
               s = p(i).Value
            Else
                p(i).Value = s
            End If
        Next
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub

Private Sub SFWork_SelectionTerm()
    
    On Error GoTo e
    
    Application.DisplayAlerts = True

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub
Attribute VB_Name = "SelectionRemoveCrLf"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)

    Undo = True
    
End Sub
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)

    Dim s As String
    Dim i As Long
    
    On Error GoTo e
    
    If VarType(r.Value) = vbString Then
        
        For i = r.Characters.count To 1 Step -1
            Select Case r.Characters(i, 1).Text
                Case vbCr, vbLf
                    r.Characters(i, 1).Delete
            End Select
        Next
        
    Else
        s = r.Value
    
        s = Replace(s, vbCr, "")
        s = Replace(s, vbLf, "")
    
        r.Value = s
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub
Attribute VB_Name = "SelectionRemoveExt"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)
    Undo = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
    
    On Error GoTo e
    
    r.Value = rlxGetFullpathFromExt(r.Value)

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub


Attribute VB_Name = "SelectionRemoveFilename"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)
    Undo = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
    
    On Error GoTo e
    
    r.Value = rlxGetFullpathFromPathName(r.Value)
    
    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub



Attribute VB_Name = "SelectionRemoveHyperlink"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)

    Undo = True
    
End Sub

Private Sub SFWork_SelectionTerm()
    
    On Error GoTo e
    
    Selection.Hyperlinks.Delete
    
    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub
Attribute VB_Name = "SelectionRemoveLeftString"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|o|fffd||3d0||fffd||fffd||933e||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
'Private mstrIns As String
Private mlngIns As Long

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)

    On Error GoTo e
    
    mlngIns = frmInputLength.Start("|fffd|Z|fffd||fffd||fffd||310||64ea||fffd||fffd||fffd||d3dc||fffd||fffd||fffd||9576||fffd||fffd||fffd||fffd||fffd||fffd|" & vbCrLf & "|fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B")
    If mlngIns = 0 Then
        Cancel = True
    End If

    Undo = True

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)

    Dim lngPos As Long
    
    On Error GoTo e
    
    lngPos = rlxSetLimit(0, Len(r.Value), mlngIns)
        
    If VarType(r.Value) = vbString Then
        r.Characters(1, lngPos).Delete
    Else
        r.Value = Mid(r.Value, lngPos + 1)
    End If
    
    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub

Attribute VB_Name = "SelectionRemoveLeftToChar"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|o|fffd||3d0||fffd||fffd||933e||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private mstrIns As String

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)

    On Error GoTo e
    
    mstrIns = InputBox("|fffd|w|fffd||8576||fffd||fffd||fffd||fffd||8376||fffd||fffd||fffd||fffd||fffd||d3dc||fffd||fffd||fffd||702||fffd||fffd|B")
    If mstrIns = "" Then
        Cancel = True
    End If
    Undo = True

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
        
    Dim lngPos As Long
    
    On Error GoTo e
    
    lngPos = InStr(r.Value, mstrIns)
    
    If lngPos = 0 Then
        Exit Sub
    End If
    
    If VarType(r.Value) = vbString Then
        r.Characters(1, lngPos + Len(mstrIns) - 1).Delete
    Else
        r.Value = Mid(r.Value, lngPos + Len(mstrIns))
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub



Attribute VB_Name = "SelectionRemoveLeftToString"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|o|fffd||3d0||fffd||fffd||933e||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
'Private mstrIns As String
Private mlngIns As Long

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)

    On Error GoTo e
    
    mlngIns = frmInputLength.Start("|fffd|Z|fffd||fffd||fffd||309||fffd||fffd||fffd||fffd||fffd||fffd||688||20d|~|fffd||fffd||fffd||d3dc||fffd||fffd||fffd||90a9|" & vbCrLf & "|fffd|w|fffd||80b5||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B")
    If mlngIns = 0 Then
        Cancel = True
    End If
    Undo = True

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
        
    Dim lngPos As Long
    
    On Error GoTo e
    
    lngPos = rlxSetLimit(0, Len(r.Value) + 1, mlngIns)
    
    If VarType(r.Value) = vbString Then
        r.Characters(lngPos, r.Characters.count - lngPos + 1).Delete
    Else
        r.Value = Mid(r.Value, 1, lngPos - 1)
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub


Attribute VB_Name = "SelectionRemovePath"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)
    Undo = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
    
    On Error GoTo e
    
    r.Value = rlxGetFullpathFromFileName(r.Value)

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub

Attribute VB_Name = "SelectionRemoveRightString"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|o|fffd||3d0||fffd||fffd||933e||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
'Private mstrIns As String
Private mlngIns As Long

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)

    On Error GoTo e
    
    mlngIns = frmInputLength.Start("|fffd|Z|fffd||fffd||fffd||30d||14c||fffd||fffd||fffd||d3dc||fffd||fffd||fffd||9576||fffd||fffd||fffd||fffd||fffd||fffd|" & vbCrLf & "|fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B")
    If mlngIns = 0 Then
        Cancel = True
    End If
    
    Undo = True

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
        
    Dim lngPos As Long
    
    On Error GoTo e
    
    lngPos = rlxSetLimit(0, Len(r.Value), mlngIns)
        
    If VarType(r.Value) = vbString Then
        r.Characters(r.Characters.count - lngPos + 1, lngPos).Delete
    Else
        lngPos = Len(r.Value) - lngPos
        
        If lngPos <= 0 Then
            lngPos = 0
        End If
    
        r.Value = Left(r.Value, lngPos)
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub
Attribute VB_Name = "SelectionRemoveRightToChar"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|o|fffd||3d0||fffd||fffd||933e||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private mstrIns As String

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)

    On Error GoTo e
    
    mstrIns = InputBox("|fffd|w|fffd||8576||fffd||fffd||fffd||fffd||fffd|E|fffd||fffd||fffd||fffd||fffd||d3dc||fffd||fffd||fffd||702||fffd||fffd|B")
    If mstrIns = "" Then
        Cancel = True
    End If
    Undo = True

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
        
    Dim lngPos As Long
    
    On Error GoTo e
    
    lngPos = InStrRev(r.Value, mstrIns)
    
    If lngPos = 0 Then
        Exit Sub
    End If
    
    If VarType(r.Value) = vbString Then
        r.Characters(lngPos, r.Characters.count - lngPos + 1).Delete
    Else
        r.Value = Mid(r.Value, 1, lngPos - 1)
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub




Attribute VB_Name = "SelectionRemoveRightToString"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|o|fffd||3d0||fffd||fffd||933e||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
'Private mstrIns As String
Private mlngIns As Long

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)

    On Error GoTo e
    
    mlngIns = frmInputLength.Start("|fffd|Z|fffd||fffd||fffd||309||fffd||fffd||fffd||fffd||fffd||fffd||688||211|O|fffd||fffd||fffd||d3dc||fffd||fffd||fffd||90a9|" & vbCrLf & "|fffd|w|fffd||80b5||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B")
    If mlngIns = 0 Then
        Cancel = True
    End If
    Undo = True

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
        
    Dim lngPos As Long
    
    On Error GoTo e
    
    lngPos = rlxSetLimit(0, Len(r.Value), mlngIns)
    
    If VarType(r.Value) = vbString Then
        r.Characters(1, lngPos).Delete
    Else
        r.Value = Mid(r.Value, lngPos + 1)
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub




Attribute VB_Name = "SelectionRowCheckFromTo"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionRowFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|o|fffd||3d0||fffd||fffd||933e||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private mlngMatch As Long
Private mobjCol As Collection

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionRowFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(ByRef rAreas As Excel.Areas, Cancel As Boolean, Undo As Boolean)
    
    On Error GoTo e
    
    If rAreas.count > 1 Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||303|G|fffd||fffd||fffd|A|fffd||242||351||389||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B", vbExclamation, C_TITLE
        Cancel = True
        Exit Sub
    End If

    Set mobjCol = New Collection
    mlngMatch = 0

    Undo = True

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, ByVal lngRow As Long, Cancel As Boolean)

    Dim strkey As String
    Dim v As Range
    Dim blnMatch As Boolean
    Dim c As Range
    Dim strFrom As String
    Dim strTo As String
    
    Dim schCell() As String
    
    On Error GoTo e

    '|fffd|L|fffd|[|fffd||30d||c42c|
    strkey = ""
    For Each v In r
        If IsError(v.Value) Then
        Else
            If Len(strkey) = 0 Then
                strkey = v.Value
            Else
                strkey = strkey & vbTab & v.Value
            End If
        End If
    Next

    schCell = Split(strkey, vbTab)

    If UBound(schCell) < 1 Then
        Exit Sub
    End If

    '|fffd|R|fffd||fffd||fffd|N|fffd|V|fffd||fffd||fffd||fffd||fffd||fffd||fffd||248||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||302||fffd||fffd||fffd||fffd||90a9||fffd||1c2||fffd||fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N
    blnMatch = False
    
    For Each c In mobjCol
        strFrom = c.Cells(1, 1).Value
        strTo = c.Cells(1, 2).Value
    
        '|fffd||fffd||fffd||50f|d|fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N
        If schCell(0) <= strTo And schCell(1) >= strFrom Then
                blnMatch = True
                With c.Interior
                    .Color = vbCyan
                    .Pattern = xlSolid
                End With
        End If
        
    Next
    
    '|fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||302||fffd||fffd|P|fffd||82||142||fffd||fffd||fffd||fffd||742||fffd||fffd||fffd||fffd||a347|
    If blnMatch Then
        mlngMatch = mlngMatch + 1
        With r.Interior
            .Color = vbYellow
            .Pattern = xlSolid
        End With
    Else
        '|fffd||fffd||fffd||742||fffd||fffd||202||fffd||fffd||a347||fffd|R|fffd||fffd||fffd|N|fffd|V|fffd||fffd||fffd||fffd||fffd||252||1c9||fffd|
        Call mobjCol.Add(r, strkey)
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionTerm()
    
    On Error GoTo e
    
    If mlngMatch > 0 Then
        MsgBox mlngMatch & " |fffd||fffd| |fffd||fffd|v|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B|fffd|m|fffd|F|fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation, C_TITLE
    Else
        MsgBox "|fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||302||342||fffd||fffd||fffd||702||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|B", vbInformation, C_TITLE
    End If
    
    'Collection|fffd||30a|J|fffd||fffd|
    Set mobjCol = Nothing

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub


Attribute VB_Name = "SelectionRowCheckUniq"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionRowFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|o|fffd||3d0||fffd||fffd||933e||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private mlngMatch As Long
'Private mobjCol As Collection
Private mobjCol As Object

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionRowFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(ByRef rAreas As Excel.Areas, Cancel As Boolean, Undo As Boolean)
    
    On Error GoTo e
    
    If rAreas.count > 1 Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||303|G|fffd||fffd||fffd|A|fffd||242||351||389||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B", vbExclamation, C_TITLE
        Cancel = True
        Exit Sub
    End If

    Set mobjCol = CreateObject("Scripting.Dictionary")
    mlngMatch = 0

    Undo = True

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, ByVal lngRow As Long, Cancel As Boolean)

    Dim strkey As String
    Dim v As Range
    Dim blnMatch As Boolean
    Dim c As Object

    On Error GoTo e
    
    '|fffd|L|fffd|[|fffd||30d||c42c|
    strkey = ""
    For Each v In r
        If IsError(v.Value) Then
        Else
            strkey = strkey & vbTab & v.Value
        End If
    Next

    If Replace(strkey, vbTab, "") = "" Then
        Exit Sub
    End If

    '|fffd|R|fffd||fffd||fffd|N|fffd|V|fffd||fffd||fffd||fffd||fffd||fffd||fffd||248||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||302||fffd||fffd||fffd||fffd||90a9||fffd||1c2||fffd||fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N
    blnMatch = False
    
    If mobjCol.exists(strkey) Then
        Set c = mobjCol.Item(strkey)
        blnMatch = True
        With c.Interior
            .Color = vbCyan
            .Pattern = xlSolid
        End With
    End If
    
    '|fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||302||fffd||fffd|P|fffd||82||142||fffd||fffd||fffd||fffd||742||fffd||fffd||fffd||fffd||a347|
    If blnMatch Then
        mlngMatch = mlngMatch + 1
        With r.Interior
            .Color = vbYellow
            .Pattern = xlSolid
        End With
    Else
        '|fffd||fffd||fffd||742||fffd||fffd||202||fffd||fffd||a347||fffd|R|fffd||fffd||fffd|N|fffd|V|fffd||fffd||fffd||fffd||fffd||252||1c9||fffd|
        Call mobjCol.Add(strkey, r)
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionTerm()
    
    On Error GoTo e
    
    If mlngMatch > 0 Then
        MsgBox mlngMatch & " |fffd||fffd| |fffd||fffd|v|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B|fffd|m|fffd|F|fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation, C_TITLE
    Else
        MsgBox "|fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||302||342||fffd||fffd||fffd||702||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|B", vbInformation, C_TITLE
    End If
    
    'Collection|fffd||30a|J|fffd||fffd|
    Set mobjCol = Nothing

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub

Attribute VB_Name = "SelectionRowDrawGrid"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionRowFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|o|fffd||3d0||fffd||fffd||933e||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private mrngEven As Range
Private mrngOdd As Range

Private mlngHeadColor As Long
Private mlngEvenColor As Long

Private mblnCustom As Boolean

Private mlngHead As Long
Private mlngCol As Long

Private mblnHogan As Boolean


'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    '|fffd|f|fffd|t|fffd|H|fffd||fffd||fffd|g|fffd|P|fffd|s
    mlngHead = 1
    mlngCol = 0
    Set SFWork = New SelectionRowFrameWork
End Sub
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(rArea As Areas, Cancel As Boolean, Undo As Boolean)
    
    Dim result As VbMsgBoxResult
    Dim lngHead As Long
    Dim lngHeadColor As Long
    Dim lngEvenColor As Long
    Dim blnHoganMode As Boolean
    
    On Error GoTo e
    
    Undo = True
    
    If mblnCustom Then
    Else
        Exit Sub
    End If
    
    lngHeadColor = mlngHeadColor
    lngEvenColor = mlngEvenColor
    blnHoganMode = False
    
    result = frmGrid.Start(mlngHead, mlngCol, lngHeadColor, lngEvenColor, blnHoganMode)
    
    If result = vbOK Then
        
        mlngHeadColor = lngHeadColor
        mlngEvenColor = lngEvenColor
        mblnHogan = blnHoganMode
        
    Else
        Cancel = True
        Exit Sub
    End If
    
    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionBegin(rArea As Range, Cancel As Boolean)

    Dim lngCols As Long
    Dim lngRows As Long
    
    On Error GoTo e
    
    rArea.Interior.Color = xlNone

    ''|fffd|O|fffd||fffd||fffd||310||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    With rArea.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With rArea.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With rArea.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With rArea.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    
    lngRows = rArea.Rows.count
    lngCols = rArea.Columns.count
        
    ''|fffd||fffd||fffd||fffd||fffd|c|fffd||fffd|
    If lngCols > 1 Then
        If mblnHogan Then
        
            Dim lngCol As Long
            Dim lngRow As Long
            
            If mlngHead = 0 Then
                lngRow = 1
            Else
                lngRow = mlngHead
            End If
            
            For lngCol = 2 To rArea.Columns.count
            
                If rArea.Cells(lngRow, lngCol).Value <> "" Then
                    With rArea.Columns(lngCol).Borders(xlLeft)
                        .LineStyle = xlContinuous
                        .Weight = xlThin
                        .ColorIndex = xlAutomatic
                    End With
                End If
            
            Next
        Else
            With rArea.Borders(xlInsideVertical)
                .LineStyle = xlContinuous
                .Weight = xlThin
                .ColorIndex = xlAutomatic
            End With
        End If
    End If
    ''|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If lngRows > 1 Then
        With rArea.Borders(xlInsideHorizontal)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlNone
        End With
    End If
    
    ''|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If lngRows > mlngHead + 1 Then

        Dim r As Range
        Set r = Range(rArea(mlngHead + 1, 1), rArea(lngRows, lngCols))

        With r.Borders(xlInsideHorizontal)
            .LineStyle = xlContinuous
            .Weight = xlHairline
            .ColorIndex = xlAutomatic
        End With
    End If
    
    '|fffd|w|fffd|b|fffd|_
    If mlngHead = 0 Then
    Else
        If lngRows < mlngHead Then
            mlngHead = lngRows
        End If
        
        Set r = Range(rArea(1, 1), rArea(mlngHead, lngCols))
    
        With r.Interior
            If mlngHeadColor = -1 Then
                .ColorIndex = xlNone
            Else
                .Color = mlngHeadColor
            End If
            .Pattern = xlSolid
        End With
        
        With r.Borders(xlInsideHorizontal)
'            .LineStyle = xlNone
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
        
        With r.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
    End If
    
    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, ByVal row As Long, Cancel As Boolean)
        
    On Error GoTo e
    
    If mlngEvenColor = -1 Then
        Set mrngEven = Nothing
        Set mrngOdd = Nothing
    Else
        Select Case True
            Case row <= mlngHead
            Case (row - mlngHead) Mod 2 = 0
                If mrngEven Is Nothing Then
                    Set mrngEven = r
                Else
                    Set mrngEven = Union(mrngEven, r)
                End If
                
            Case (row - mlngHead) Mod 2 = 1
                If mrngOdd Is Nothing Then
                    Set mrngOdd = r
                Else
                    Set mrngOdd = Union(mrngOdd, r)
                End If
                
        End Select
    End If
    
    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||33c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionFinal(rArea As Range)
    
    On Error GoTo e
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|C|fffd||fffd|
    If mrngEven Is Nothing Then
    Else
        With mrngEven.Interior
            If mlngEvenColor = -1 Then
                .ColorIndex = xlNone
            Else
                .Color = mlngEvenColor
            End If
            .Pattern = xlSolid
        End With
    End If
    Set mrngEven = Nothing
    
    '|fffd||f414||fffd||fffd||fffd|C|fffd||fffd|
    If mrngOdd Is Nothing Then
    Else
        With mrngOdd.Interior
            .ColorIndex = xlNone
            .Pattern = xlSolid
        End With
    End If
    Set mrngOdd = Nothing

    Dim lngCols As Long
    Dim lngRows As Long
    
    lngRows = rArea.Rows.count
    lngCols = rArea.Columns.count
    
    Dim r As Range
    
    '|fffd||fffd|w|fffd|b|fffd|_
    If mlngCol = 0 Then
    Else
        If lngCols < mlngCol Then
            mlngCol = lngCols
        End If
        
        Set r = Range(rArea(1, 1), rArea(lngRows, mlngCol))
    
        With r.Interior
            If mlngHeadColor = -1 Then
                .ColorIndex = xlNone
            Else
                .Color = mlngHeadColor
            End If
            .Pattern = xlSolid
        End With
        
        With r.Borders(xlInsideHorizontal)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
        
        With r.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
    End If
    
    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub

Public Property Let HeadColor(ByVal lngColor As Long)

    mlngHeadColor = lngColor

End Property
Public Property Let EvenColor(ByVal lngColor As Long)

    mlngEvenColor = lngColor

End Property
Public Property Let Custom(ByVal blnCustom As Long)

    mblnCustom = blnCustom

End Property
Public Property Let HeadLine(ByVal lngHeadLine As Long)

    mlngHead = lngHeadLine

End Property
Public Property Let ColLine(ByVal lngColLine As Long)

    mlngCol = lngColLine

End Property
Public Property Let HoganMode(ByVal blnHogan As Boolean)

    mblnHogan = blnHogan

End Property
Attribute VB_Name = "SelectionRowFrameWork"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'--------------------------------------------------------------
' SelectionRowFrameWork 1.00 2011/07/22 Y.Watanabe
'--------------------------------------------------------------
' Selection.Areas|fffd||fffd||fffd|s|fffd|P|fffd||282||24f||fffd||fffd||fffd||fffd||fffd||fffd||fffd|t|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd|[|fffd|N
'--------------------------------------------------------------
Option Explicit

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
Public Event SelectionInit(ByRef rArea As Excel.Areas, ByRef Cancel As Boolean, ByRef Undo As Boolean)
'|fffd|O|fffd||fffd||fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
Public Event SelectionBegin(ByRef rArea As Range, ByRef Cancel As Boolean)
'|fffd||fffd||fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
Public Event SelectionMain(ByRef r As Range, ByVal row As Long, ByRef Cancel As Boolean)
'|fffd||33c8||fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
Public Event SelectionFinal(ByRef rAarea As Range)
'|fffd|I|fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
Public Event SelectionTerm()

Public Sub Run()

    '|fffd||3d0||fffd||fffd||933e|
    Dim r As Range
    Dim Cancel As Boolean
    Dim Undo As Boolean
    Dim lngRows As Long
    Dim lngCols As Long
    Dim lngCur As Long
    Dim i As Long
    
    'Selection|fffd|i|fffd||fffd||fffd|o|fffd|[
    Dim objStatus As SelectionStatusBar
    
    On Error GoTo ErrHandle
    
    If Selection Is Nothing Then
        MsgBox "|fffd|I|fffd||fffd||348||342||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If

    If TypeOf Selection Is Range Then
    Else
        MsgBox "|fffd|I|fffd||fffd||348||342||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
    
'    If selection.count > C_MAX_CELLS Then
    If Selection.CountLarge > C_MAX_CELLS Then
        Dim ret As VbMsgBoxResult
        ret = MsgBox("|fffd||fffd||282||303|Z|fffd||fffd||fffd||fffd||fffd|I|fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B|fffd||fffd||fffd||fffd||fffd||24e||fffd||fffd||502||fffd||fffd||fffd||fffd||fffd||fffd||9055||fffd||fffd||fffd||256||7c2||fffd||fffd||702||fffd||fffd||42a91||fffd||fffd|s|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|H", vbInformation + vbOKCancel + vbDefaultButton2, C_TITLE)
        If ret = vbCancel Then
            Exit Sub
        End If
    End If
        
    '|fffd|L|fffd||fffd||fffd||fffd||fffd|Z|fffd||fffd||fffd||30f||fffd||fffd||fffd||fffd||fffd|
    Cancel = False
    Undo = False
    
    '---------------------------
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
    '---------------------------
    RaiseEvent SelectionInit(Selection.Areas, Cancel, Undo)

    '|fffd|L|fffd||fffd||fffd||fffd||fffd|Z|fffd||fffd||fffd||30f||a347|
    If Cancel Then
        Exit Sub
    End If
    
    '|fffd||fffd||283|Z|fffd||fffd||fffd||30f||a347|UNDO|fffd|s|fffd||fffd|
    If ret = vbOK Then
        Undo = False
    End If
    
    'Undo|fffd||30f||a347|
    If Undo Then
    
        ThisWorkbook.Worksheets("Undo").Cells.Clear
        
        Set mUndo.sourceRange = Selection
        Set mUndo.destRange = ThisWorkbook.Worksheets("Undo").Range(Selection.Address)
        
        Dim rr As Range
        For Each rr In mUndo.sourceRange.Areas
            rr.Copy mUndo.destRange.Worksheet.Range(rr.Address)
        Next
    
    End If

    'Selection|fffd|i|fffd||fffd||fffd|o|fffd|[Instance|fffd||fffd|
    Set objStatus = New SelectionStatusBar
    
    '|fffd||fffd||fffd||fffd||fffd||151||5414||fffd||fffd||fffd|Z|fffd|b|fffd|g
    Dim lngMax As Long
    Dim nArea As Range
    lngMax = 0
    For Each nArea In Selection.Areas
        lngMax = lngMax + nArea.Rows.count
    Next
    objStatus.MaxItems = lngMax

    Dim rArea As Range
    For Each rArea In Selection.Areas

        '---------------------------
        '|fffd|O|fffd||fffd||fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
        '---------------------------
        RaiseEvent SelectionBegin(rArea, Cancel)
        If Cancel Then
            Exit For
        End If
        
        lngRows = rArea.Rows.count
        lngCols = rArea.Columns.count
    
        For lngCur = 1 To lngRows
        
            '|fffd|P|fffd|s|fffd||fffd||fffd||fffd|Range|fffd||fffd||fffd||c42c|
            
            Set r = Nothing
            
            For i = 1 To lngCols
                ''|fffd|t|fffd|B|fffd||fffd||fffd|^|fffd||fffd||fffd||fffd||454||fffd|\|fffd||fffd||fffd||38d||fffd|B
                If rArea(lngCur, i).Rows.Hidden Or rArea(lngCur, i).Columns.Hidden Then
                Else
                    If r Is Nothing Then
                        Set r = rArea(lngCur, i)
                    Else
                        Set r = Union(r, rArea(lngCur, i))
                    End If
                End If
            Next
        
            '---------------------------
            '|fffd||fffd||fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
            '---------------------------
            If r Is Nothing Then
            Else
                RaiseEvent SelectionMain(r, lngCur, Cancel)
                If Cancel Then
                    Exit For
                End If
            End If
            
            'Selection|fffd|i|fffd||fffd||fffd|o|fffd|[|fffd||30d|X|fffd|V
            objStatus.Refresh
        Next
        '---------------------------
        '|fffd||33c8||fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
        '---------------------------
        RaiseEvent SelectionFinal(rArea)
    
    Next
    
    'Selection|fffd|i|fffd||fffd||fffd|o|fffd|[|fffd||fffd|Dispose
    objStatus.Dispose
    
    Set objStatus = Nothing

    '---------------------------
    '|fffd|I|fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
    '---------------------------
    Application.ScreenUpdating = False
    
    RaiseEvent SelectionTerm
    
    Application.ScreenUpdating = True
    
    If Undo Then
        'Undo
        Application.OnUndo "Undo", "execUndo"
    End If
    
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
End Sub


Attribute VB_Name = "SelectionRowMakeSQLInsert"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionRowFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|o|fffd||3d0||fffd||fffd||933e||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private mInsert As String
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionRowFrameWork
End Sub
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(rAreas As Excel.Areas, Cancel As Boolean, Undo As Boolean)

    On Error GoTo e
    
    If rAreas.count > 1 Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||303|G|fffd||fffd||fffd|A|fffd||242||351||389||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B", vbExclamation, C_TITLE
        Cancel = True
        Exit Sub
    End If
    
    Dim strTable As String
    strTable = InputBox("INSERT|fffd||fffd||fffd||252||1c9||fffd||fffd||fffd||fffd||fffd|e|fffd|[|fffd|u|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B")
    If strTable = "" Then
        Cancel = True
    End If

    mInsert = "=""INSERT INTO " & strTable & " VALUES("

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, ByVal lngRow As Long, Cancel As Boolean)
        
    Dim v As Range
    Dim last As Range
    Dim out As Range
    Dim strSQL As String
    
    Dim strComma As String
    Dim strQuat As String
    
    On Error GoTo e
    
    '|fffd|L|fffd|[|fffd||30d||c42c|
    strSQL = ""
    For Each v In r
    
        If strSQL = "" Then
            strComma = ""
        Else
            strComma = ","
        End If
        
        If v.NumberFormatLocal = "@" Then
            strQuat = "'"
        Else
            strQuat = ""
        End If
        
        strSQL = strSQL & strComma & "" & strQuat & """ & " & v.Address(False, False, xlA1, False) & " & """ & strQuat & ""
        
    Next
    
    Set last = r.Columns(r.Columns.count)
    Set out = r.Worksheet.Cells(last.row, last.Column + 1)

    out.Value = mInsert & strSQL & ");"""

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionTerm()
    

End Sub




Attribute VB_Name = "SelectionRowMergeCol"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionRowFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|o|fffd||3d0||fffd||fffd||933e||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private mstrSep As String

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionRowFrameWork
End Sub
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(rArea As Areas, Cancel As Boolean, Undo As Boolean)

    mstrSep = InputBox("|fffd||fffd||602||8576||fffd||fffd||fffd||fffd||fffd|K|fffd|v|fffd||142||fffd||fffd||fffd||393||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B")
    Undo = True
    
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, ByVal row As Long, Cancel As Boolean)
        
    Dim rr As Range
    Dim strBuf As String
    
    On Error GoTo e
    
    strBuf = ""
    
    For Each rr In r
        If IsError(rr.Value) Then
        Else
            If strBuf = "" Then
                strBuf = rr.Value
            Else
                strBuf = strBuf & mstrSep & rr.Value
            End If
            rr.Value = Empty
        End If
    Next

    r(1) = strBuf

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub

Attribute VB_Name = "SelectionRowReplace"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionRowFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|o|fffd||3d0||fffd||fffd||933e||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private mlngMatch As Long
Private mobjCol As Collection
Private mobjDel As Range

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionRowFrameWork
End Sub
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(rAreas As Excel.Areas, Cancel As Boolean, Undo As Boolean)

    On Error GoTo e
    
    If rAreas.count > 1 Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||303|G|fffd||fffd||fffd|A|fffd||242||351||389||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B", vbExclamation, C_TITLE
        Cancel = True
        Exit Sub
    End If

    '|fffd||fffd||fffd||fffd||fffd|o|fffd||3d0||fffd||fffd||30f||fffd||fffd||fffd||fffd||fffd|
    Set mobjCol = New Collection
    mlngMatch = 0

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, ByVal lngRow As Long, Cancel As Boolean)
        
    Dim c As Range
    Dim v As Range
    Dim strkey As String
    Dim blnMatch As Boolean
    
    On Error GoTo e
    
    '|fffd|L|fffd|[|fffd||30d||c42c|
    strkey = ""
    For Each v In r
        strkey = strkey & vbTab & v
    Next
    
    If Replace(strkey, vbTab, "") = "" Then
        Exit Sub
    End If

    '|fffd|R|fffd||fffd||fffd|N|fffd|V|fffd||fffd||fffd||fffd||fffd||fffd||fffd||248||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||302||fffd||fffd||fffd||fffd||90a9||fffd||1c2||fffd||fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N
    blnMatch = False
    
    err.Clear
    On Error Resume Next
    Set c = mobjCol(strkey)
    
    On Error GoTo 0
            
    If err.Number = 0 And Not (c Is Nothing) Then
        blnMatch = True
    End If
    
    Set c = Nothing
    
    '|fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||302||fffd||fffd|P|fffd||82||142||fffd||fffd||fffd||fffd||742||fffd||fffd||fffd||fffd||a347|
    If blnMatch Then
        mlngMatch = mlngMatch + 1
        If mobjDel Is Nothing Then
            Set mobjDel = r
        Else
            Set mobjDel = Union(mobjDel, r)
        End If
    Else
        '|fffd||fffd||fffd||742||fffd||fffd||202||fffd||fffd||a347||fffd|R|fffd||fffd||fffd|N|fffd|V|fffd||fffd||fffd||fffd||fffd||252||1c9||fffd|
        Call mobjCol.Add(r, strkey)
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionTerm()
    
    On Error GoTo e
    
    '|fffd|d|fffd||fffd||fffd||fffd||fffd||fffd||fffd|Z|fffd||fffd||fffd||fffd||fffd||d3dc|
    If mobjDel Is Nothing Then
    Else
        mobjDel.Delete xlUp
    End If

    If mlngMatch > 0 Then
        MsgBox mlngMatch & " |fffd||fffd| |fffd||d3dc||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B|fffd|m|fffd|F|fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation, C_TITLE
    Else
        MsgBox "|fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||302||342||fffd||fffd||fffd||702||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|B", vbInformation, C_TITLE
    End If
    
    'Collection|fffd||303|N|fffd||fffd||fffd|A
    Set mobjDel = Nothing
    Set mobjCol = Nothing

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub



Attribute VB_Name = "SelectionRowSelect"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionRowFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|o|fffd||3d0||fffd||fffd||933e||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private mlngRowSel As Long
Private mlngRowGap As Long
Private mlngColSel As Long
Private mlngColGap As Long

Private mSel As Range

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionRowFrameWork
End Sub
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(rArea As Areas, Cancel As Boolean, Undo As Boolean)

    Dim ret As VBA.VbMsgBoxResult

    On Error GoTo e
    
    '|fffd||fffd||fffd||fffd||fffd|o|fffd||3d0||fffd||fffd||30f||fffd||fffd||fffd||fffd||fffd|
    mlngRowSel = 1
    mlngRowGap = 1
    mlngColSel = 1
    mlngColGap = 1

    ret = frmSelect.Start(mlngRowSel, mlngRowGap, mlngColSel, mlngColGap)
    If ret = vbOK Then
    Else
        Cancel = True
        Exit Sub
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, ByVal row As Long, Cancel As Boolean)
        
    Dim lngRow As Long
    Dim lngCol As Long
    
    On Error GoTo e
    
    lngRow = row
    lngCol = 1
    
    Dim c As Range
    
    For Each c In r
    
        '|fffd|I|fffd||fffd||fffd|s|fffd||fffd||fffd||fffd|
        If isSelect(lngRow, lngCol) Then
            If mSel Is Nothing Then
                Set mSel = c
            Else
                Set mSel = Union(mSel, c)
            End If
        End If
        lngCol = lngCol + 1
    Next
    
    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionTerm()
    
    On Error GoTo e
    
    If mSel Is Nothing Then
    Else
        mSel.Select
        Set mSel = Nothing
    End If
    
    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub


Private Function isSelect(ByVal lngRow As Long, ByVal lngCol As Long) As Boolean

    Dim lngRowLeap As Long
    Dim lngColLeap As Long
    
    Dim blnRowSel As Boolean
    Dim blnColSel As Boolean

    isSelect = False

    lngRowLeap = mlngRowSel + mlngRowGap
    lngColLeap = mlngColSel + mlngColGap

    If lngRowLeap = 0 Then
        blnRowSel = True
    Else
        Select Case (lngRow Mod lngRowLeap)
            Case 1 To mlngRowSel
                blnRowSel = True
            Case Else
                blnRowSel = False
        End Select
    End If
    
    If lngColLeap = 0 Then
        blnColSel = True
    Else
        Select Case (lngCol Mod lngColLeap)
            Case 1 To mlngColSel
                blnColSel = True
            Case Else
                blnColSel = False
        End Select
    End If
    '|fffd|s|fffd|A|fffd||4b902||251|I|fffd||fffd||fffd||30f||a347||fffd||242||302||751|I|fffd||fffd||fffd||182||202||fffd|B
    If blnRowSel And blnColSel Then
        isSelect = True
    End If

End Function
Attribute VB_Name = "SelectionRowSelectCell"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionRowFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|o|fffd||3d0||fffd||fffd||933e||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private mstrSearch As String
Private mlngType As Long

Private mSel As Range

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionRowFrameWork
End Sub
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(rArea As Areas, Cancel As Boolean, Undo As Boolean)

    Dim ret As VBA.VbMsgBoxResult

    On Error GoTo e
    
    ret = frmSelectCell.Start(mstrSearch, mlngType)
    If ret = vbOK Then
    Else
        Cancel = True
        Exit Sub
    End If
    
    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, ByVal row As Long, Cancel As Boolean)
        
    Dim lngRow As Long
    Dim lngCol As Long
    
    On Error GoTo e
    
    lngRow = row
    lngCol = 1
    
    Dim c As Range
    
    For Each c In r
    
        Select Case mlngType
            Case 0
                If mstrSearch = c.Value Then
                    If mSel Is Nothing Then
                        Set mSel = c
                    Else
                        Set mSel = Union(mSel, c)
                    End If
                End If
            Case 1
                If mstrSearch <> c.Value Then
                    If mSel Is Nothing Then
                        Set mSel = c
                    Else
                        Set mSel = Union(mSel, c)
                    End If
                End If
            Case Else
                If InStr(c.Value, mstrSearch) Then
                    If mSel Is Nothing Then
                        Set mSel = c
                    Else
                        Set mSel = Union(mSel, c)
                    End If
                End If
        End Select
        
        lngCol = lngCol + 1
    Next
    
    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionTerm()
    
    On Error GoTo e
    
    If mSel Is Nothing Then
        MsgBox "|fffd|I|fffd||fffd||38f||6c2||303|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|B", vbInformation, C_TITLE
    Else
        mSel.Select
        Set mSel = Nothing
    End If
    
    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub

Attribute VB_Name = "SelectionRowSelectOdd"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionRowFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|o|fffd||3d0||fffd||fffd||933e||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private mrngOdd As Range

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionRowFrameWork
End Sub
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, ByVal row As Long, Cancel As Boolean)
        
    On Error GoTo e
    
    Select Case True
        Case row Mod 2 = 1
            If mrngOdd Is Nothing Then
                Set mrngOdd = r
            Else
                Set mrngOdd = Union(mrngOdd, r)
            End If
            
    End Select
    
    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionTerm()
    
    On Error GoTo e
    
    '|fffd||f414||fffd||fffd||fffd|C|fffd||fffd|
    If mrngOdd Is Nothing Then
    Else
        mrngOdd.Select
    End If
    Set mrngOdd = Nothing
    
    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub
Attribute VB_Name = "SelectionRowSetUniq"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionRowFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|o|fffd||3d0||fffd||fffd||933e||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private mlngMatch As Long
Private mobjCol As Collection
Private mobjDel As Range

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionRowFrameWork
End Sub
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(rAreas As Excel.Areas, Cancel As Boolean, Undo As Boolean)

    On Error GoTo e
    
    If rAreas.count > 1 Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||303|G|fffd||fffd||fffd|A|fffd||242||351||389||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B", vbExclamation, C_TITLE
        Cancel = True
        Exit Sub
    End If

    '|fffd||fffd||fffd||fffd||fffd|o|fffd||3d0||fffd||fffd||30f||fffd||fffd||fffd||fffd||fffd|
    Set mobjCol = New Collection
    mlngMatch = 0

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, ByVal lngRow As Long, Cancel As Boolean)
        
    Dim c As Range
    Dim v As Range
    Dim strkey As String
    Dim blnMatch As Boolean
    
    On Error GoTo e
    
    '|fffd|L|fffd|[|fffd||30d||c42c|
    strkey = ""
    For Each v In r
        strkey = strkey & vbTab & v
    Next
    
    If Replace(strkey, vbTab, "") = "" Then
        Exit Sub
    End If

    '|fffd|R|fffd||fffd||fffd|N|fffd|V|fffd||fffd||fffd||fffd||fffd||fffd||fffd||248||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||302||fffd||fffd||fffd||fffd||90a9||fffd||1c2||fffd||fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N
    blnMatch = False
    
    err.Clear
    On Error Resume Next
    Set c = mobjCol(strkey)
    
    On Error GoTo 0
            
    If err.Number = 0 And Not (c Is Nothing) Then
        blnMatch = True
    End If
    
    Set c = Nothing
    
    '|fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||302||fffd||fffd|P|fffd||82||142||fffd||fffd||fffd||fffd||742||fffd||fffd||fffd||fffd||a347|
    If blnMatch Then
        mlngMatch = mlngMatch + 1
        If mobjDel Is Nothing Then
            Set mobjDel = r
        Else
            Set mobjDel = Union(mobjDel, r)
        End If
    Else
        '|fffd||fffd||fffd||742||fffd||fffd||202||fffd||fffd||a347||fffd|R|fffd||fffd||fffd|N|fffd|V|fffd||fffd||fffd||fffd||fffd||252||1c9||fffd|
        Call mobjCol.Add(r, strkey)
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionTerm()
    
    On Error GoTo e
    
    '|fffd|d|fffd||fffd||fffd||fffd||fffd||fffd||fffd|Z|fffd||fffd||fffd||fffd||fffd||d3dc|
    If mobjDel Is Nothing Then
    Else
        mobjDel.Delete xlUp
    End If

    If mlngMatch > 0 Then
        MsgBox mlngMatch & " |fffd||fffd| |fffd||d3dc||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B|fffd|m|fffd|F|fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation, C_TITLE
    Else
        MsgBox "|fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||302||342||fffd||fffd||fffd||702||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|B", vbInformation, C_TITLE
    End If
    
    'Collection|fffd||303|N|fffd||fffd||fffd|A
    Set mobjDel = Nothing
    Set mobjCol = Nothing

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub


Attribute VB_Name = "SelectionRowShiftSelect"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionRowFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|o|fffd||3d0||fffd||fffd||933e||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private mSel As Range
Private mlngPos As Long

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionRowFrameWork
End Sub
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(rArea As Areas, Cancel As Boolean, Undo As Boolean)

    Dim strIns As String

    On Error GoTo e
    
    strIns = InputBox("|fffd|I|fffd||fffd||348||342||fffd||fffd||fffd||fffd|E|fffd|V|fffd|t|fffd|g|fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B" & vbCrLf & "|fffd|i|fffd||fffd||fffd|V|fffd|t|fffd|g|fffd|F|fffd|}|fffd|C|fffd|i|fffd|X|fffd|A|fffd|E|fffd|V|fffd|t|fffd|g|fffd|F|fffd||fffd||fffd||fffd||fffd|j", C_TITLE)
    If strIns = "" Then
        Cancel = True
        Exit Sub
    End If
    
    mlngPos = Val(strIns)
    If mlngPos = 0 Then
        Cancel = True
        Exit Sub
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub

Private Sub SFWork_SelectionBegin(rArea As Range, Cancel As Boolean)

    On Error GoTo e
    
    If mSel Is Nothing Then
        Set mSel = rArea.Offset(0, mlngPos)
    Else
        Set mSel = Union(mSel, rArea.Offset(0, mlngPos))
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub
Private Sub SFWork_SelectionTerm()

    On Error GoTo e
    
    If mSel Is Nothing Then
    Else
        mSel.Select
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub
Attribute VB_Name = "SelectionSectionNumber"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private mlngIndent As Long


'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionAllFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionAllFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean)

    Undo = True
    
End Sub

Public Property Let Indent(ByVal lngBuf As Long)
    mlngIndent = lngBuf
End Property

Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)

    Dim lngCnt As Long
    Dim lngRow As Long
    Dim lngCol As Long
    Dim blnFind As Boolean
    Dim blnSearch As Boolean

    Dim strBuf As String
    Dim lngLevel As Long

    Dim WB As Workbook
    Dim WS As Worksheet
    Dim i As Long
    Dim j As Long
    Const C_NOT_FOUND As Long = -1

    On Error GoTo e
    
    lngCol = r.Column
    lngRow = C_NOT_FOUND 'r.row - 1
    
    strBuf = ""
    lngLevel = 0
    blnFind = False
    blnSearch = False

    setIndent r, mlngIndent
    
    '|fffd||fffd||fffd||742||303|Z|fffd||fffd||fffd||312|i|fffd||fffd||fffd||50d||fffd||fffd||142||fffd||fffd||fffd||a347|
    If Not rlxIsSectionNo(r.Value) Then
        Exit Sub
    End If
    
    Set WB = r.Parent.Parent
    
    j = 0
    For i = r.Parent.index To 1 Step -1
    
        '|fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|V|fffd|[|fffd|g|fffd||302||742||154||fffd||fffd||fffd|
        Set WS = WB.Worksheets(i)
        
        If WS.visible = xlSheetVisible Then
        
            If lngRow = C_NOT_FOUND Then
                lngRow = r.row - 1
            Else
                lngRow = WS.UsedRange.Item(WS.UsedRange.count).row
            End If
            
            For lngCnt = lngRow To 1 Step -1
            
                strBuf = WS.Cells(lngCnt, lngCol).Value
                lngLevel = WS.Cells(lngCnt, lngCol).IndentLevel
        
                '|fffd|i|fffd||fffd||fffd||50d||fffd||fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||202||fffd||fffd|s|fffd||30f||a347|
                If (rlxHasSectionNo(strBuf, lngLevel) And lngLevel <= r.IndentLevel) Then
                    blnFind = True
                    GoTo pass
                End If
            
            Next
            
            blnSearch = True
            j = j + 1
            If j >= 2 Then
                Exit For
            End If
        End If
        
        Set WS = Nothing
        
    Next
    Set WB = Nothing
pass:
    
    If blnSearch And blnFind Then
    
        Dim strMsg As String
    
        strMsg = ""
        strMsg = strMsg & "|fffd|P|fffd||91|O|fffd||303|V|fffd|[|fffd|g|fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||50d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|H" & vbCrLf
        strMsg = strMsg & "|fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||202||fffd||fffd||a347||fffd||34d||14f||fffd||fffd||fffd||fffd||fffd||314||502||fffd||fffd||702||fffd||fffd|B" & vbCrLf & vbCrLf
        strMsg = strMsg & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbCrLf
        strMsg = strMsg & "|fffd|@|fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd||7c2||242||353||fffd||fffd||fffd||fffd||fffd||252|i|fffd||fffd||fffd||50d||fffd||fffd||fffd||fffd|L|fffd|q|fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|K|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B"
        
        '|fffd||fffd||fffd|b|fffd|Z|fffd|[|fffd|W
        If MsgBox(strMsg, vbQuestion + vbYesNo, C_TITLE) <> vbYes Then
            strBuf = ""
        End If
            
    End If

    Dim strNewNum As String
        
    '|fffd||fffd||fffd||314||50d||fffd||fffd||fffd|U|fffd||fffd|
    strNewNum = rlxGetSectionNext(strBuf, lngLevel, r.IndentLevel)
    
    '|fffd|i|fffd||fffd||fffd||50d||fffd||fffd||30d||d3dc|
    delSectionNo r
    
    '|fffd|i|fffd||fffd||fffd||50d||fffd||fffd||fffd||752||80b7||fffd||fffd|
    setSectionNo r, strNewNum
    
    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
    
End Sub


Attribute VB_Name = "SelectionSelectValueCell"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


Private mRange As Range

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd|C|fffd||fffd||fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)

    On Error GoTo e
    
    If r.Value = "" Then
    Else
        If mRange Is Nothing Then
            Set mRange = r
        Else
            Set mRange = Union(mRange, r)
        End If
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionTerm()

    On Error GoTo e
    
    If mRange Is Nothing Then
        MsgBox "|fffd|I|fffd||fffd||38f||6c2||303|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|B", vbInformation, C_TITLE
    Else
        mRange.Select
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub
Attribute VB_Name = "SelectionSetClipboardCopy"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1
Private mstrBuf As String
Private mlngErr As Long

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)

    Undo = True
    mstrBuf = ""
    mlngErr = 0
    
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd|C|fffd||fffd||fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)

    On Error GoTo e
    
    If rlxIsFileExists(r.Value) Or rlxIsFolderExists(r.Value) Then
        If mstrBuf = "" Then
            mstrBuf = r.Value
        Else
            mstrBuf = mstrBuf & vbTab & r.Value
        End If
    Else
        r.Interior.Color = vbYellow
        mlngErr = mlngErr + 1
    End If
    
    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub
Private Sub SFWork_SelectionTerm()
    
    Dim strFiles() As String
        
    On Error GoTo e
    
    If mlngErr > 0 Then
        MsgBox "|fffd||fffd||fffd||742||fffd||fffd||202||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd|/|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd|" & mlngErr & "|fffd||fffd||fffd||311||fffd||fffd||742||fffd||fffd||702||fffd||fffd|B" & vbCrLf & "|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||582||303|R|fffd|s|fffd|[|fffd||12192|f|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
    Else
        If mstrBuf <> "" Then
            strFiles = Split(mstrBuf, vbTab)
            SetCopyClipText strFiles
            MsgBox UBound(strFiles) + 1 & "|fffd||fffd||fffd||303|t|fffd|@|fffd|C|fffd||fffd|/|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||243|R|fffd|s|fffd|[|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE
        End If
     End If

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub
Attribute VB_Name = "SelectionSetUniq"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|o|fffd||3d0||fffd||fffd||933e||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private mlngMax As Long
Private mlngMatch As Long

Private mobjCol As Collection
Private mobjDel As Range

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|O|fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)

    On Error GoTo e
    
    '|fffd||fffd||fffd||fffd||fffd|o|fffd||3d0||fffd||fffd||30f||fffd||fffd||fffd||fffd||fffd|
    Set mobjCol = New Collection
    mlngMax = 0
    mlngMatch = 0
    
    Undo = True
    
    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
        
    Dim c As Range
    Dim blnMatch As Boolean
    
    Dim i As Long
    Dim count As Long
    
    On Error GoTo e
    
    If r.Value = "" Then
        Exit Sub
    End If

    '|fffd|R|fffd||fffd||fffd|N|fffd|V|fffd||fffd||fffd||fffd||fffd||fffd||fffd||248||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||302||fffd||fffd||fffd||fffd||90a9||fffd||1c2||fffd||fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N
    blnMatch = False
    
    err.Clear
    On Error Resume Next
    Set c = Nothing
    Set c = mobjCol(CStr(r.Value))
    
    On Error GoTo 0
            
    If err.Number = 0 And Not (c Is Nothing) Then
        blnMatch = True
    End If
    
    '|fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||302||fffd||fffd|P|fffd||82||142||fffd||fffd||fffd||fffd||742||fffd||fffd||fffd||fffd||a347|
    If blnMatch Then
        mlngMatch = mlngMatch + 1
        If mobjDel Is Nothing Then
            Set mobjDel = r
        Else
            Set mobjDel = Union(mobjDel, r)
        End If
    Else
        '|fffd||fffd||fffd||742||fffd||fffd||202||fffd||fffd||a347||fffd|R|fffd||fffd||fffd|N|fffd|V|fffd||fffd||fffd||fffd||fffd||252||1c9||fffd|
        mlngMax = mlngMax + 1
        Call mobjCol.Add(r, CStr(r.Value))
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd||fffd||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionTerm()
    
    On Error GoTo e
    
    '|fffd|d|fffd||fffd||fffd||fffd||fffd||fffd||fffd|Z|fffd||fffd||fffd||fffd||fffd||d3dc|
    If mobjDel Is Nothing Then
    Else
        mobjDel.Delete xlUp
    End If

    If mlngMatch > 0 Then
        MsgBox mlngMatch & " |fffd||fffd| |fffd||d3dc||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B|fffd|m|fffd|F|fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation, C_TITLE
    Else
        MsgBox "|fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||302||342||fffd||fffd||fffd||702||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|B", vbInformation, C_TITLE
    End If
    
    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub

Attribute VB_Name = "SelectionStatusBar"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'--------------------------------------------------------------
' Selection |fffd||30f||fffd||fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||6c2||255|\|fffd||fffd||fffd||fffd||fffd||fffd|X|fffd|e|fffd|[|fffd|^|fffd|X|fffd|o|fffd|[|fffd||315|\|fffd||fffd||fffd|N|fffd||fffd||fffd|X
'--------------------------------------------------------------
Option Explicit
Private mblnStatusBar As Boolean
'Private mlngMaxItem As Long
'Private mlngIndexStatusBar As Long
Private mlngMaxItem As Variant
Private mlngIndexStatusBar As Variant
Private mblnNotCallDispose As Boolean
Private mobjPointer As Excel.XlMousePointer
'-------------------------------------
' Initialize
'-------------------------------------
Private Sub Class_Initialize()

    On Error Resume Next
    
    '|fffd|X|fffd|e|fffd|[|fffd|^|fffd|X|fffd|o|fffd|[|fffd||30f||fffd||502||fffd||fffd|L|fffd||fffd|
    mblnStatusBar = Application.DisplayStatusBar
    
    '|fffd|X|fffd|e|fffd|[|fffd|^|fffd|X|fffd|o|fffd|[|fffd||fffd|\|fffd||fffd|
    Application.DisplayStatusBar = True

    '|fffd||fffd||fffd||fffd||fffd|o|fffd||3d0||fffd||fffd||30f||fffd||fffd||fffd||fffd||fffd|
    mlngIndexStatusBar = 0
    mblnNotCallDispose = True

    'Selection|fffd||fffd||fffd|I|fffd||fffd||fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|B
    If Selection Is Nothing Then
        mlngMaxItem = 0
    Else
        mlngMaxItem = Selection.CountLarge
    End If

    '|fffd|}|fffd|E|fffd|X|fffd|||fffd|C|fffd||fffd||fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||fffd|v|fffd||242||fffd||fffd||fffd|B
    mobjPointer = Application.Cursor
    
End Sub
'-------------------------------------
' Refresh
'    Selection|fffd||fffd|ForEach|fffd||fffd||fffd|[|fffd|v|fffd||fffd||fffd||242|P|fffd|x|fffd||102||44f|o|fffd||fffd||fffd||fffd||fffd||181|B
'-------------------------------------
Public Sub Refresh()
    
    On Error Resume Next
    
    '|fffd|X|fffd|e|fffd|[|fffd|^|fffd|X|fffd|o|fffd|[|fffd||243||fffd||fffd|b|fffd|Z|fffd|[|fffd|W|fffd||fffd|\|fffd||fffd|
    mlngIndexStatusBar = mlngIndexStatusBar + 1   ''|fffd|J|fffd|E|fffd||fffd||fffd|g|fffd|A|fffd|b|fffd|v
    
    '|fffd|T|fffd||fffd||fffd||fffd||fffd||95|\|fffd||fffd||fffd|B
    If Int(mlngMaxItem * 0.05) <> 0 Then
        If mlngIndexStatusBar Mod Int(mlngMaxItem * 0.05) = 0 Then
            Application.StatusBar = mlngIndexStatusBar & " / " & mlngMaxItem & " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||142||fffd|..."
        End If
    Else
        Application.StatusBar = mlngIndexStatusBar & " / " & mlngMaxItem & " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||142||fffd|..."
    End If
    
End Sub
'-------------------------------------
' Dispose |fffd|K|fffd||fffd||fffd||14c||fffd||24c||102||44f|o|fffd||fffd||fffd||fffd||fffd||181|B
'-------------------------------------
Public Sub Dispose()

    On Error Resume Next
    
    mblnNotCallDispose = False
    
    '|fffd|X|fffd|e|fffd|[|fffd|^|fffd|X|fffd|o|fffd|[|fffd||315|\|fffd||fffd||fffd||fffd||fffd|e|fffd||fffd|Excel|fffd||30a||fffd||fffd||fffd|l|fffd||256||7c2||fffd|
    Application.StatusBar = False
    
    '|fffd|X|fffd|e|fffd|[|fffd|^|fffd|X|fffd|o|fffd|[|fffd||fffd||fffd|}|fffd|N|fffd||fffd||fffd||30e||fffd||fffd|s|fffd|O|fffd||30f||fffd||502||256||7c2||fffd|
    Application.DisplayStatusBar = mblnStatusBar

End Sub
'-------------------------------------
' Terminate
'-------------------------------------
Private Sub Class_Terminate()

    On Error Resume Next
    
    ''Dispose |fffd||fffd||fffd||102||382||fffd||202||fffd||fffd||fffd||fffd||fffd||fffd||a347||fffd||311||38d||fffd|
    If mblnNotCallDispose Then
        Call Dispose
    End If
    
End Sub
'-------------------------------------
' |fffd|J|fffd|X|fffd|^|fffd||fffd||fffd|v|fffd||fffd||fffd|p|fffd|e|fffd|B
'-------------------------------------
Public Property Let MaxItems(ByVal m As Long)
    mlngMaxItem = m
End Property
Attribute VB_Name = "SelectionStringFormura"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)

    Undo = True
    Func = True

End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
    
    On Error GoTo e
    
    '|fffd||fffd||fffd||751|I|fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||5c2||101|u|fffd||fffd||fffd||fffd||fffd||fffd|v|fffd||242||fffd||fffd||fffd|B
    r.NumberFormatLocal = "@"
    
    '|fffd||fffd||fffd||751|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||fffd||fffd||fffd||a3ca||fffd||18e|g|fffd|p|fffd||4cf||fffd||fffd||14f|d|fffd||202||fffd||fffd||102||fffd||fffd||fffd||a3ca||fffd||242||82||fffd||fffd||fffd|
    '|fffd|w|fffd||fffd||fffd|\|fffd|L|fffd||1050e||fffd||fffd||24d|X|fffd|V|fffd||fffd||fffd||fffd|B
    r.FormulaR1C1 = Format$(r.Value, "0")

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub





Attribute VB_Name = "SelectionStringZeroPadding"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private mlngSize As String

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)

    Dim strSize As String

    On Error GoTo e
    
    mlngSize = frmInputLength.Start("|fffd|[|fffd||fffd||fffd||fffd||fffd||7c2||fffd||fffd|s|fffd||fffd||fffd|t|fffd|B|fffd|[|fffd||fffd||fffd|h|fffd||30c||fffd||fffd||fffd||fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B")
    If mlngSize = 0 Then
        Cancel = True
    End If


    Undo = True

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
    
    On Error GoTo e
    
    '|fffd||fffd||fffd||751|I|fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||5c2||101|u|fffd||fffd||fffd||fffd||fffd||fffd|v|fffd||242||fffd||fffd||fffd|B
    r.NumberFormatLocal = "@"

    '|fffd||fffd||fffd||751|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||fffd||fffd||fffd||a3ca||fffd||18e|g|fffd|p|fffd||4cf||fffd||fffd||14f|d|fffd||202||fffd||fffd||102||fffd||fffd||fffd||a3ca||fffd||242||82||fffd||fffd||fffd|
    '|fffd|w|fffd||fffd||fffd|\|fffd|L|fffd||1050e||fffd||fffd||24d|X|fffd|V|fffd||fffd||fffd||fffd|B
    r.Value = Right(String$(mlngSize, "0") & r.Value, mlngSize)
    
    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub






Attribute VB_Name = "SelectionToAbsolute"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Public RefType As XlReferenceType
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)
    Undo = True
    Func = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
        
    Dim s As String
  
    On Error GoTo e
    
    If Application.ReferenceStyle = xlA1 Then
        r.FormulaLocal = Application.ConvertFormula(r.FormulaLocal, Application.ReferenceStyle, Application.ReferenceStyle, RefType)
    Else
        r.FormulaR1C1Local = Application.ConvertFormula(r.FormulaR1C1Local, Application.ReferenceStyle, Application.ReferenceStyle, RefType)
    End If
    
    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub







Attribute VB_Name = "SelectionToDBString"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)
    Undo = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
        
    On Error GoTo e
    
    r.Value = rlxToDBFieldNm(r.Value)

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub









Attribute VB_Name = "SelectionToDate6"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)
    Undo = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
        
    Dim s As String
  
    On Error GoTo e
    
    s = r.Value
    If s <> "" _
    And IsNumeric(s) = True _
    And Len(s) = 6 Then
        r.Value = DateValue(Left(s, 2) & "/" & Mid(s, 3, 2) & "/" & Right(s, 2))
    End If
    
    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub







Attribute VB_Name = "SelectionToDate6dmy"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)
    Undo = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
        
    Dim s As String
  
    On Error GoTo e
    
    s = r.Value
    If s <> "" _
    And IsNumeric(s) = True _
    And Len(s) = 6 Then
        r.Value = DateValue(Right(s, 2) & "/" & Mid(s, 3, 2) & "/" & Left(s, 2))
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub











Attribute VB_Name = "SelectionToDate6mdy"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)
    Undo = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
        
    Dim s As String
  
    On Error GoTo e
    
    s = r.Value
    If s <> "" _
    And IsNumeric(s) = True _
    And Len(s) = 6 Then
        r.Value = DateValue(Right(s, 2) & "/" & Left(s, 2) & "/" & Mid(s, 3, 2))
    End If
    
    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub









Attribute VB_Name = "SelectionToDate8"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)
    Undo = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
        
    Dim s As String
  
    On Error GoTo e
    
    s = r.Value
    If s <> "" _
    And IsNumeric(s) = True _
    And Len(s) = 8 Then
        r.Value = DateValue(Mid(s, 1, 4) & "/" & Mid(s, 5, 2) & "/" & Mid(s, 7, 2))
    End If
    
    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub





Attribute VB_Name = "SelectionToElectoric"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1
Private mstrString As String

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)

    On Error GoTo e

    mstrString = StrConvU(GetSetting(C_TITLE, "electoric", "String", ""), vbNarrow)
    Undo = True
    
    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)

    Dim strSource As String
    Dim strDest As String
    Dim strBuf As String
    Dim lngPos As Long
    Dim blnKana As Boolean
    Dim strChar As String
    
    Dim lngLen As Long
    
    On Error GoTo e
    
'    If r.HasFormula Then
'        Exit Sub
'    End If
    
    strSource = StrConvU(r.Value, vbNarrow)
    
    lngLen = Len(strSource)
    strDest = ""
    
    For lngPos = 1 To lngLen
    
        strChar = Mid$(strSource, lngPos, 1)
        
        If InStr(mstrString, strChar) > 0 Then
            strChar = StrConvU(strChar, vbWide)
        End If
        
        Select Case strChar
            Case "|fffd|" To "|fffd|" '|fffd||fffd|
                If blnKana Then
                    strBuf = strBuf & strChar
                Else
                    blnKana = True
                    strBuf = strChar
                End If
            Case Else
                If blnKana Then
                    blnKana = False
                    strDest = strDest & StrConvU(strBuf, vbWide) & strChar
                Else
                    strDest = strDest & strChar
                End If
        End Select
    
    Next
    
    If blnKana Then
        strDest = strDest & StrConvU(strBuf, vbWide)
    End If
        
    r.Value = strDest
    
    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub

Attribute VB_Name = "SelectionToFormula"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)
    Undo = True
    Func = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
        
    On Error GoTo e
    
    r.Formula = r.Formula
    
    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub





Attribute VB_Name = "SelectionToHankaku"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)
    Undo = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
        
    On Error GoTo e
    
'    r.Value = StrConvU(r.Value, vbNarrow + vbKatakana)
    r.Value = StrConvU(r.Value, vbNarrow)
    
    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub




Attribute VB_Name = "SelectionToHiragana"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)
    Undo = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
        
    On Error GoTo e
    
    r.Value = StrConvU(r.Value, vbHiragana)

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub

Attribute VB_Name = "SelectionToJavaString"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|o|fffd||3d0||fffd||fffd||933e||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private mstrType As String

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)
    Undo = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
        
    Dim strResult As String
        
    On Error GoTo e
    
    strResult = rlxToJavaFieldNm(r.Value)
    
    If mstrType = "" Then
        r.Value = strResult
    Else
        r.Value = addSetStr(mstrType, strResult)
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|J|fffd|X|fffd|^|fffd||fffd||fffd|v|fffd||fffd||fffd|p|fffd|e|fffd|B
'------------------------------------------------------------------------------------------------------------------------
Public Property Let setType(ByVal m As String)
    mstrType = m
End Property


Private Function addSetStr(ByVal strType As String, ByVal strSrc As String) As String

    If rlxIsDBField(strSrc) Then
        Exit Function
    End If
    
    Select Case Len(strSrc)
        Case 0
            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|p|fffd|X
        Case 1
            addSetStr = strType & UCase(Mid$(strSrc, 1, 1))
        Case Is >= 2
            addSetStr = strType & UCase(Mid$(strSrc, 1, 1)) & Mid$(strSrc, 2)
    End Select

End Function




Attribute VB_Name = "SelectionToKatakana"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)
    Undo = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
        
    On Error GoTo e
    
    r.Value = StrConvU(r.Value, vbKatakana)

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub


Attribute VB_Name = "SelectionToLower"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)
    Undo = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
        
    On Error GoTo e
    
    r.Value = StrConvU(r.Value, vbLowerCase)

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub



Attribute VB_Name = "SelectionToPropercase"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)
    Undo = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
        
    On Error GoTo e
    
    r.Value = StrConvU(r.Value, vbProperCase)

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub




Attribute VB_Name = "SelectionToUNC"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)
    Undo = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
        
    On Error GoTo e
    
    r.Value = rlxDriveToUNC(r.Value)

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub


Attribute VB_Name = "SelectionToUpper"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)
    Undo = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
    
    On Error GoTo e
    
    r.Value = StrConvU(r.Value, vbUpperCase)

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub




Attribute VB_Name = "SelectionToValue"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)
    Undo = True
    Func = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
        
    On Error GoTo e
    
    r.Value = r.Value

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True

End Sub




Attribute VB_Name = "SelectionToZenkaku"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)
    Undo = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
        
    On Error GoTo e
    
    Dim strBuf As String
    
    '|fffd|@|fffd||fffd||fffd||fffd||fffd||389||fffd|
    r.Value = StrConvU(r.Value, vbWide)
    
'    strbuf = Replace(r.Value, "|fffd||fffd|", "|fffd|p")
'    strbuf = Replace(strbuf, "|fffd||fffd|", "|fffd|s")
'    strbuf = Replace(strbuf, "|fffd||fffd|", "|fffd|v")
'    strbuf = Replace(strbuf, "|fffd||fffd||fffd|", "|fffd|y")
'    strbuf = Replace(strbuf, "|fffd||fffd|", "|fffd||")
'    r.Value = Replace(strbuf, "|fffd|", "|fffd|K")

    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True

End Sub





Attribute VB_Name = "SelectionTrimCell"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||933e|
'------------------------------------------------------------------------------------------------------------------------
Private WithEvents SFWork As SelectionFrameWork
Attribute SFWork.VB_VarHelpID = -1

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd||c42c|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Initialize()
    Set SFWork = New SelectionFrameWork
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork |fffd|J|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub Class_Terminate()
    Set SFWork = Nothing
End Sub

'------------------------------------------------------------------------------------------------------------------------
' SelectionFrameWork Run
'------------------------------------------------------------------------------------------------------------------------
Public Sub Run()
    SFWork.Run
End Sub

Private Sub SFWork_SelectionInit(Cancel As Boolean, Undo As Boolean, Func As Boolean)
    Undo = True
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||53c8||fffd||fffd|(UOC)
'------------------------------------------------------------------------------------------------------------------------
Private Sub SFWork_SelectionMain(r As Range, Cancel As Boolean)
        
    Dim i As Long
    
    On Error GoTo e
        
    If VarType(r.Value) = vbString Then
        
        i = 1
        Do
            Select Case r.Characters(i, 1).Text
                Case Space$(1)
                Case vbTab
                Case "|fffd|@"
                Case Else
                    Exit Do
            End Select
            i = i + 1
        Loop
        r.Characters(1, i - 1).Delete
        
        i = r.Characters.count
        Do
            Select Case r.Characters(i, 1).Text
                Case Space$(1)
                Case vbTab
                Case "|fffd|@"
                Case Else
                    Exit Do
            End Select
            i = i - 1
        Loop
        r.Characters(i + 1, r.Characters.count - i).Delete
        
    Else
       r.Value = Trim(r.Value)
    End If
    
    Exit Sub
e:
    Call rlxErrMsg(err)
    Cancel = True
End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit


'comment
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private Const C_TITLE As String = "Grep|fffd|u|fffd||fffd|"
Private Const C_SEARCH_NO As Long = 1
Private Const C_SEARCH_BOOK As Long = 2
Private Const C_SEARCH_SHEET As Long = 3
Private Const C_SEARCH_ADDRESS As Long = 4
Private Const C_SEARCH_STR As Long = 5
Private Const C_START_ROW As Long = 11

Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)

    Dim WB As Workbook
    Dim WS As Worksheet
    Dim strBook As String
    Dim strSheet As String
    Dim strId As String

    If ActiveWorkbook Is Nothing Then
        Exit Sub
    End If

    strBook = Cells(ActiveCell.row, C_SEARCH_BOOK).Value
    If Len(strBook) = 0 Then
        Exit Sub
    End If
    strSheet = Cells(ActiveCell.row, C_SEARCH_SHEET).Value
    If Len(strSheet) = 0 Then
        Exit Sub
    End If
    strId = Cells(ActiveCell.row, C_SEARCH_ADDRESS).Value
    If Len(strId) = 0 Then
        Exit Sub
    End If

    '|fffd|p|fffd|X|fffd||fffd||fffd|[|fffd|h|fffd||30e||64fe|
    Dim lngPos As Long
    Dim varPassword As Variant
    Dim varPass As Variant
    Dim strBuf As String
    
    lngPos = InStr(Cells(8, C_SEARCH_NO).Value, "|fffd|F")
    If lngPos > 0 Then
        strBuf = Mid(Cells(8, C_SEARCH_NO).Value, lngPos + 1)
        varPassword = Split(strBuf, ",")
    Else
        varPassword = Array("")
    End If

    On Error Resume Next
'    Set WB = Workbooks.Open(filename:=strBook)
    For Each varPass In varPassword
        err.Clear
        Set WB = Workbooks.Open(filename:=strBook, Password:=varPass)
        If err.Number = 0 Then
            Exit For
        End If
    Next
    If err.Number <> 0 Then
        MsgBox "|fffd|u|fffd|b|fffd|N|fffd||fffd||fffd|J|fffd||fffd||fffd||702||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|B", vbExclamation, "Grep"
        Exit Sub
    End If

    AppActivate Application.Caption

    Set WS = WB.Worksheets(strSheet)
    WS.Select
    
    WS.Range(strId).Select
    
    Dim s As Shape
    Set s = getObjFromID(WS, Mid$(strId, InStrRev(strId, ":") + 1))
    Application.GoTo Reference:=setCellPos(s.TopLeftCell), Scroll:=True
    s.Select
    
End Sub
Private Function setCellPos(ByRef r As Range) As Range

    Dim lngRow As Long
    Dim lngCol As Long
    
    Dim lngCol1 As Long
    Dim lngCol2 As Long
    
    lngCol1 = Windows(1).VisibleRange(1).Column
    lngCol2 = Windows(1).VisibleRange(Windows(1).VisibleRange.count).Column
    
    If lngCol1 <= r.Column And r.Column <= lngCol2 Then
        lngCol = lngCol1
    Else
        lngCol = r.Column
    End If
    
    lngRow = r.row - 5
    If lngRow < 1 Then
        lngRow = 1
    End If

    Set setCellPos = r.Worksheet.Cells(lngRow, lngCol)

End Function


Sub ReplaceStr()

    Dim WB As Workbook
    Dim WS As Worksheet
    Dim strBook As String
    Dim strSheet As String
    Dim strBookBk As String
    Dim strSheetBk As String
    Dim strId As String
    Dim lngRow As Long
    Dim s As Shape
    Dim FS As Object

    If ActiveWorkbook Is Nothing Then
        Exit Sub
    End If
    
    If Cells(6, 1).Value = "|fffd||fffd||fffd||fffd||fffd||38f||6c1|F|fffd|l" Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||38f||6c2||fffd||fffd|l|fffd||30f||a347||fffd|AGrep|fffd|u|fffd||fffd||fffd||342||142||fffd||fffd||702||fffd||fffd||fffd|B", vbOKOnly + vbCritical, C_TITLE
        Exit Sub
    End If
    
    If MsgBox("Grep|fffd|u|fffd||fffd||fffd||343||fffd||fffd||142||142||fffd||fffd|B|fffd|u|fffd||fffd||fffd|O|fffd||303|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd|" & vbCrLf & "|fffd|u|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd|v+ YYYYMMDDHHMMSS |fffd||30c|`|fffd||fffd||fffd||fffd|" & vbCrLf & "|fffd||6d1||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B|fffd||fffd||fffd|s|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|H", vbOKCancel + vbQuestion, C_TITLE) <> vbOK Then
        Exit Sub
    End If
    
    On Error Resume Next
    Set FS = CreateObject("Scripting.FileSystemObject")

    lngRow = C_START_ROW
    
    '|fffd|p|fffd|X|fffd||fffd||fffd|[|fffd|h|fffd||30e||64fe|
    Dim lngPos As Long
    Dim varPassword As Variant
    Dim varPass As Variant
    Dim strBuf As String
    
    lngPos = InStr(Cells(8, C_SEARCH_NO).Value, "|fffd|F")
    If lngPos > 0 Then
        strBuf = Mid(Cells(8, C_SEARCH_NO).Value, lngPos + 1)
        varPassword = Split(strBuf, ",")
    Else
        varPassword = Array("")
    End If
    
    Do Until Cells(lngRow, C_SEARCH_NO).Value = ""
        
        strBook = Cells(lngRow, C_SEARCH_BOOK).Value
        
        '|fffd|o|fffd|b|fffd|N|fffd|A|fffd|b|fffd|v|fffd||fffd||fffd||fffd|
        FS.CopyFile strBook, strBook & "." & Format$(Now(), "yyyymmddhhnnss")
        
        For Each varPass In varPassword
            err.Clear
            Set WB = Workbooks.Open(filename:=strBook, Password:=varPass, Local:=True)
            If err.Number = 0 Then
                Exit For
            End If
        Next
        If err.Number <> 0 Then
            MsgBox "|fffd|u|fffd|b|fffd|N|fffd||fffd||fffd|J|fffd||fffd||fffd||702||fffd||fffd||fffd|(" & FS.getFileName(strBook) & ")|fffd||142||fffd||fffd|B" & vbCrLf & "Grep|fffd|u|fffd||fffd||fffd||fffd||fffd|X|fffd|L|fffd|b|fffd|v|fffd||fffd||fffd||702||fffd||fffd|B", vbOKOnly + vbCritical, C_TITLE
            lngRow = lngRow + 1
            GoTo pass
        End If
        
        AppActivate Application.Caption
            
        Do Until strBook <> Cells(lngRow, C_SEARCH_BOOK).Value Or Cells(lngRow, C_SEARCH_NO).Value = ""
        
            strSheet = Cells(lngRow, C_SEARCH_SHEET).Value
            
            Set WS = WB.Worksheets(strSheet)
            WS.Select
            
            Do Until strBook <> Cells(lngRow, C_SEARCH_BOOK).Value Or strSheet <> Cells(lngRow, C_SEARCH_SHEET).Value Or Cells(lngRow, C_SEARCH_NO).Value = ""
        
                strId = Cells(lngRow, C_SEARCH_ADDRESS).Value
                
                Dim strSrch As String
                strSrch = Cells(lngRow, C_SEARCH_STR).Value
                
                If InStr(strId, "$") > 0 Then
                    WS.Range(strId).Value = strSrch
                Else
                    Set s = getObjFromID(WS, Mid$(strId, InStrRev(strId, ":") + 1))
                    s.TextFrame.Characters.Text = strSrch
                End If
                
                lngRow = lngRow + 1
            Loop
        Loop
        
        
        If WB.ReadOnly Then
            MsgBox "|fffd||1c2||74e||fffd||fffd||fffd|p|fffd||303|u|fffd|b|fffd|N(" & WB.name & ")|fffd||142||fffd||fffd|B" & vbCrLf & "Grep|fffd|u|fffd||fffd||fffd||fffd||fffd|X|fffd|L|fffd|b|fffd|v|fffd||fffd||fffd||702||fffd||fffd|B", vbOKOnly + vbCritical, C_TITLE
            WB.Saved = True
        Else
            On Error GoTo e
            Application.DisplayAlerts = False
            WB.Save
            Application.DisplayAlerts = True
            On Error Resume Next
        End If
        
        WB.Close
pass:
        Set WB = Nothing
                
    Loop
    
    Set FS = Nothing
    
    MsgBox "Grep|fffd|u|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE
    Exit Sub
e:
    If MsgBox("|fffd|u|fffd|b|fffd|N|fffd||6d1||fffd||fffd||fffd||fffd||243|G|fffd||fffd||fffd|[|fffd||242||202||fffd||702||fffd||fffd||fffd||fffd|B(" & err.Description & ")" & vbCrLf & "|fffd||10e||fffd||fffd|s|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|H", vbYesNo + vbQuestion, C_TITLE) = vbYes Then
        Resume
    Else
        MsgBox "Grep|fffd|u|fffd||fffd||fffd||12192|f|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly + vbCritical, C_TITLE
    End If
        
End Sub
Private Function getObjFromID(ByRef WS As Worksheet, ByVal id As String) As Object
    Dim ret As Object
    Dim s As Shape
    
    For Each s In WS.Shapes
        Select Case s.Type
            Case msoAutoShape, msoTextBox, msoCallout, msoFreeform
                If s.id = CLng(id) Then
                    Set ret = s
                    Exit For
                End If
            
            Case msoGroup
                Set ret = getObjFromIDSub(s, id)
                If ret Is Nothing Then
                Else
                    Exit For
                End If
'            Case msoSmartArt
'                Set ret = getSmartArtFromIDSub(s, ID)
'                If ret Is Nothing Then
'                Else
'                    Exit For
'                End If
        End Select
    Next
    Set getObjFromID = ret

End Function
Private Function getObjFromIDSub(ByRef objShape As Shape, ByVal id As String) As Object
    
    Dim s As Shape
    Dim ret As Object
    
    For Each s In objShape.GroupItems
        Select Case s.Type
            Case msoAutoShape, msoTextBox, msoCallout, msoFreeform
                If s.id = CLng(id) Then
                    Set ret = s
                    Exit For
                End If
            
            Case msoGroup
                Set ret = getObjFromIDSub(s, id)
                If ret Is Nothing Then
                Else
                    Exit For
                End If
                
'            Case msoSmartArt
'                Set ret = getSmartArtFromIDSub(s, ID)
'                If ret Is Nothing Then
'                Else
'                    Exit For
'                End If
        End Select
    Next

    Set getObjFromIDSub = ret
End Function

Attribute VB_Name = "Sheet131"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Private Const C_TITLE As String = "Grep|fffd|u|fffd||fffd|"
Private Const C_SEARCH_NO As Long = 1
Private Const C_SEARCH_BOOK As Long = 2
Private Const C_SEARCH_SHEET As Long = 3
Private Const C_SEARCH_ADDRESS As Long = 4
Private Const C_SEARCH_STR As Long = 5
Private Const C_START_ROW As Long = 11

Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)

    Dim WB As Workbook
    Dim WS As Worksheet
    Dim strBook As String
    Dim strSheet As String
    Dim strId As String

    If ActiveWorkbook Is Nothing Then
        Exit Sub
    End If

    strBook = Cells(ActiveCell.row, C_SEARCH_BOOK).Value
    If Len(strBook) = 0 Then
        Exit Sub
    End If
    strSheet = Cells(ActiveCell.row, C_SEARCH_SHEET).Value
    If Len(strSheet) = 0 Then
        Exit Sub
    End If
    strId = Cells(ActiveCell.row, C_SEARCH_ADDRESS).Value
    If Len(strId) = 0 Then
        Exit Sub
    End If

    '|fffd|p|fffd|X|fffd||fffd||fffd|[|fffd|h|fffd||30e||64fe|
    Dim lngPos As Long
    Dim varPassword As Variant
    Dim varPass As Variant
    Dim strBuf As String
    
    lngPos = InStr(Cells(8, C_SEARCH_NO).Value, "|fffd|F")
    If lngPos > 0 Then
        strBuf = Mid(Cells(8, C_SEARCH_NO).Value, lngPos + 1)
        varPassword = Split(strBuf, ",")
    Else
        varPassword = Array("")
    End If

    On Error Resume Next
'    Set WB = Workbooks.Open(filename:=strBook)
    For Each varPass In varPassword
        err.Clear
        Set WB = Workbooks.Open(filename:=strBook, Password:=varPass)
        If err.Number = 0 Then
            Exit For
        End If
    Next
    If err.Number <> 0 Then
        MsgBox "|fffd|u|fffd|b|fffd|N|fffd||fffd||fffd|J|fffd||fffd||fffd||702||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|B", vbExclamation, "Grep"
        Exit Sub
    End If

    AppActivate Application.Caption

    Set WS = WB.Worksheets(strSheet)
    WS.Select
    
    WS.Range(strId).Select
    
    Dim s As Shape
    Set s = getObjFromID(WS, Mid$(strId, InStrRev(strId, ":") + 1))
    Application.GoTo Reference:=setCellPos(s.TopLeftCell), Scroll:=True
    s.Select
    
End Sub
Private Function setCellPos(ByRef r As Range) As Range

    Dim lngRow As Long
    Dim lngCol As Long
    
    Dim lngCol1 As Long
    Dim lngCol2 As Long
    
    lngCol1 = Windows(1).VisibleRange(1).Column
    lngCol2 = Windows(1).VisibleRange(Windows(1).VisibleRange.count).Column
    
    If lngCol1 <= r.Column And r.Column <= lngCol2 Then
        lngCol = lngCol1
    Else
        lngCol = r.Column
    End If
    
    lngRow = r.row - 5
    If lngRow < 1 Then
        lngRow = 1
    End If

    Set setCellPos = r.Worksheet.Cells(lngRow, lngCol)

End Function


Sub ReplaceStr()

    Dim WB As Workbook
    Dim WS As Worksheet
    Dim strBook As String
    Dim strSheet As String
    Dim strBookBk As String
    Dim strSheetBk As String
    Dim strId As String
    Dim lngRow As Long
    Dim s As Shape
    Dim FS As Object

    If ActiveWorkbook Is Nothing Then
        Exit Sub
    End If
    
    If Cells(6, 1).Value = "|fffd||fffd||fffd||fffd||fffd||38f||6c1|F|fffd|l" Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||38f||6c2||fffd||fffd|l|fffd||30f||a347||fffd|AGrep|fffd|u|fffd||fffd||fffd||342||142||fffd||fffd||702||fffd||fffd||fffd|B", vbOKOnly + vbCritical, C_TITLE
        Exit Sub
    End If
    
    If MsgBox("Grep|fffd|u|fffd||fffd||fffd||343||fffd||fffd||142||142||fffd||fffd|B|fffd|u|fffd||fffd||fffd|O|fffd||303|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd|" & vbCrLf & "|fffd|u|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd|v+ YYYYMMDDHHMMSS |fffd||30c|`|fffd||fffd||fffd||fffd|" & vbCrLf & "|fffd||6d1||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B|fffd||fffd||fffd|s|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|H", vbOKCancel + vbQuestion, C_TITLE) <> vbOK Then
        Exit Sub
    End If
    
    On Error Resume Next
    Set FS = CreateObject("Scripting.FileSystemObject")

    lngRow = C_START_ROW
    
    '|fffd|p|fffd|X|fffd||fffd||fffd|[|fffd|h|fffd||30e||64fe|
    Dim lngPos As Long
    Dim varPassword As Variant
    Dim varPass As Variant
    Dim strBuf As String
    
    lngPos = InStr(Cells(8, C_SEARCH_NO).Value, "|fffd|F")
    If lngPos > 0 Then
        strBuf = Mid(Cells(8, C_SEARCH_NO).Value, lngPos + 1)
        varPassword = Split(strBuf, ",")
    Else
        varPassword = Array("")
    End If
    
    Do Until Cells(lngRow, C_SEARCH_NO).Value = ""
        
        strBook = Cells(lngRow, C_SEARCH_BOOK).Value
        
        '|fffd|o|fffd|b|fffd|N|fffd|A|fffd|b|fffd|v|fffd||fffd||fffd||fffd|
        FS.CopyFile strBook, strBook & "." & Format$(Now(), "yyyymmddhhnnss")
        
        For Each varPass In varPassword
            err.Clear
            Set WB = Workbooks.Open(filename:=strBook, Password:=varPass, Local:=True)
            If err.Number = 0 Then
                Exit For
            End If
        Next
        If err.Number <> 0 Then
            MsgBox "|fffd|u|fffd|b|fffd|N|fffd||fffd||fffd|J|fffd||fffd||fffd||702||fffd||fffd||fffd|(" & FS.getFileName(strBook) & ")|fffd||142||fffd||fffd|B" & vbCrLf & "Grep|fffd|u|fffd||fffd||fffd||fffd||fffd|X|fffd|L|fffd|b|fffd|v|fffd||fffd||fffd||702||fffd||fffd|B", vbOKOnly + vbCritical, C_TITLE
            lngRow = lngRow + 1
            GoTo pass
        End If
        
        AppActivate Application.Caption
            
        Do Until strBook <> Cells(lngRow, C_SEARCH_BOOK).Value Or Cells(lngRow, C_SEARCH_NO).Value = ""
        
            strSheet = Cells(lngRow, C_SEARCH_SHEET).Value
            
            Set WS = WB.Worksheets(strSheet)
            WS.Select
            
            Do Until strBook <> Cells(lngRow, C_SEARCH_BOOK).Value Or strSheet <> Cells(lngRow, C_SEARCH_SHEET).Value Or Cells(lngRow, C_SEARCH_NO).Value = ""
        
                strId = Cells(lngRow, C_SEARCH_ADDRESS).Value
                
                Dim strSrch As String
                strSrch = Cells(lngRow, C_SEARCH_STR).Value
                
                If InStr(strId, "$") > 0 Then
                    WS.Range(strId).Value = strSrch
                Else
                    Set s = getObjFromID(WS, Mid$(strId, InStrRev(strId, ":") + 1))
                    s.TextFrame.Characters.Text = strSrch
                End If
                
                lngRow = lngRow + 1
            Loop
        Loop
        
        
        If WB.ReadOnly Then
            MsgBox "|fffd||1c2||74e||fffd||fffd||fffd|p|fffd||303|u|fffd|b|fffd|N(" & WB.name & ")|fffd||142||fffd||fffd|B" & vbCrLf & "Grep|fffd|u|fffd||fffd||fffd||fffd||fffd|X|fffd|L|fffd|b|fffd|v|fffd||fffd||fffd||702||fffd||fffd|B", vbOKOnly + vbCritical, C_TITLE
            WB.Saved = True
        Else
            On Error GoTo e
            Application.DisplayAlerts = False
            WB.Save
            Application.DisplayAlerts = True
            On Error Resume Next
        End If
        
        WB.Close
pass:
        Set WB = Nothing
                
    Loop
    
    Set FS = Nothing
    
    MsgBox "Grep|fffd|u|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE
    Exit Sub
e:
    If MsgBox("|fffd|u|fffd|b|fffd|N|fffd||6d1||fffd||fffd||fffd||fffd||243|G|fffd||fffd||fffd|[|fffd||242||202||fffd||702||fffd||fffd||fffd||fffd|B(" & err.Description & ")" & vbCrLf & "|fffd||10e||fffd||fffd|s|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|H", vbYesNo + vbQuestion, C_TITLE) = vbYes Then
        Resume
    Else
        MsgBox "Grep|fffd|u|fffd||fffd||fffd||12192|f|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly + vbCritical, C_TITLE
    End If
        
End Sub
Private Function getObjFromID(ByRef WS As Worksheet, ByVal id As String) As Object
    Dim ret As Object
    Dim s As Shape
    
    For Each s In WS.Shapes
        Select Case s.Type
            Case msoAutoShape, msoTextBox, msoCallout, msoFreeform
                If s.id = CLng(id) Then
                    Set ret = s
                    Exit For
                End If
            
            Case msoGroup
                Set ret = getObjFromIDSub(s, id)
                If ret Is Nothing Then
                Else
                    Exit For
                End If
'            Case msoSmartArt
'                Set ret = getSmartArtFromIDSub(s, ID)
'                If ret Is Nothing Then
'                Else
'                    Exit For
'                End If
        End Select
    Next
    Set getObjFromID = ret

End Function
Private Function getObjFromIDSub(ByRef objShape As Shape, ByVal id As String) As Object
    
    Dim s As Shape
    Dim ret As Object
    
    For Each s In objShape.GroupItems
        Select Case s.Type
            Case msoAutoShape, msoTextBox, msoCallout, msoFreeform
                If s.id = CLng(id) Then
                    Set ret = s
                    Exit For
                End If
            
            Case msoGroup
                Set ret = getObjFromIDSub(s, id)
                If ret Is Nothing Then
                Else
                    Exit For
                End If
                
'            Case msoSmartArt
'                Set ret = getSmartArtFromIDSub(s, ID)
'                If ret Is Nothing Then
'                Else
'                    Exit For
'                End If
        End Select
    Next

    Set getObjFromIDSub = ret
End Function
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)

    Const C_COMP_NO As Long = 1
    Const C_COMP_RESULT As Long = 2
    Const C_COMP_SRCSTR As Long = 3
    Const C_COMP_DSTSTR As Long = 4
    Const C_COMP_BOOK As Long = 5
    Const C_COMP_SHEET As Long = 6
    Const C_COMP_ADDRESS As Long = 7

    Dim WB As Workbook
    Dim WS As Worksheet
    Dim strBook As String
    Dim strSheet As String
    Dim strAddress As String

    If ActiveWorkbook Is Nothing Then
        Exit Sub
    End If

    strBook = Cells(ActiveCell.row, C_COMP_BOOK).Value
    If Len(strBook) = 0 Then
        Exit Sub
    End If
    strSheet = Cells(ActiveCell.row, C_COMP_SHEET).Value
    If Len(strSheet) = 0 Then
        Exit Sub
    End If
    strAddress = Cells(ActiveCell.row, C_COMP_ADDRESS).Value
    If Len(strAddress) = 0 Then
        Exit Sub
    End If

    On Error Resume Next

    Set WB = Workbooks(strBook)
    WB.Activate

    Set WS = WB.Worksheets(strSheet)
    WS.Select
    
    WS.Range(strAddress).Select
    
End Sub


Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Option Explicit
'Private Const C_TITLE As String = "Grep|fffd|u|fffd||fffd|"
Private Const C_SEARCH_NO As Long = 1
Private Const C_SEARCH_BOOK As Long = 2

'Private Const C_WORD_FILE As String = ".DOC"
'Private Const C_EXCEL_FILE As String = ".XLS"
'Private Const C_PPT_FILE As String = ".PPT"


Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)

    Dim WB As Workbook
    Dim WS As Worksheet
    Dim strBook As String

    If ActiveWorkbook Is Nothing Then
        Exit Sub
    End If

    strBook = Cells(ActiveCell.row, C_SEARCH_BOOK).Value
    If Len(strBook) = 0 Then
        Exit Sub
    End If

    On Error Resume Next
        

    Dim WSh As Object
    
    Set WSh = CreateObject("WScript.Shell")
    
    Call WSh.Run(strBook)
    
    Set WSh = Nothing

'    Select Case True
'        Case InStr(UCase(strBook), C_EXCEL_FILE) > 0
'
'            Dim XL As Excel.Application
'            Set XL = New Excel.Application
'            XL.visible = True
'
'            Call XL.Workbooks.Open(filename:=strBook)
'
'            Set XL = Nothing
'
'        Case InStr(UCase(strBook), C_WORD_FILE) > 0
'
'            Dim WD As Object
'            Set WD = CreateObject("Word.Application")
'            WD.visible = True
'
'            Call WD.Documents.Open(filename:=strBook)
'            AppActivate WD.Caption
'
'            Set WD = Nothing
'
'        Case InStr(UCase(strBook), C_PPT_FILE) > 0
'
'            Dim PP As Object
'
'            Set PP = CreateObject("PowerPoint.Application")
'            PP.visible
'
'            Call PP.Presentations.Open(filename:=strBook)
'
'            AppActivate PP.Caption
'
'            Set PP = Nothing
'
'    End Select
        
    
End Sub



Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet24"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet25"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet26"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet27"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet28"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet29"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdRun, 1, 0, MSForms, CommandButton2"
Option Explicit

'|fffd||fffd|`|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd|
Const C_NO As Long = 1
Const C_COLUMN As Long = 2
Const C_POS_COL As Long = 3
Const C_POS_LEN As Long = 4

'|fffd||fffd|`|fffd|X|fffd|^|fffd|[|fffd|g|fffd|s
Const C_DEF_START_ROW = 7

'|fffd|u|fffd||1cd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd|e|fffd|L|fffd|X|fffd|g|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd|v|fffd||30f||a3ca|
Const C_FILE_ROW As Long = 3
Const C_FILE_COL As Long = 3

'|fffd|u|fffd|P|fffd||fffd||fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||282||fffd||fffd||9576||fffd||fffd||fffd||fffd|v|fffd||30f||a3ca|
Const C_START_ROW As Long = 4
Const C_START_COL As Long = 3

'|fffd||c42c||fffd|V|fffd|[|fffd|g
Const C_CRE_HEADER_ROW As Long = 1
Const C_CRE_START_ROW As Long = 2

Private ColLine As Collection
        

Private Sub cmdRun_Click()

    Dim strFile As String
    Dim strNewSheet As String
    Dim fp As Integer

    Dim defCount As Long
    Dim creRow As Long
    Dim creCol As Long

    Dim strBuf As String
    Dim strValue As String

    Dim strColumn As String
    Dim lngRow As Long
    Dim lngCol As Long
    Dim lngLen As Long

    Dim newSheet As Worksheet
    Dim defSheet As Worksheet

    Dim strStart As String
    Dim i As Long

    Set defSheet = ActiveSheet

    strFile = defSheet.Cells(C_FILE_ROW, C_FILE_COL).Value
    If strFile = "" Then
        '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd|w|fffd||80b3||fffd||fffd||202||fffd||fffd||fffd||fffd||fffd||fffd||a347|
        Exit Sub
    End If

    strNewSheet = getFileName(strFile)

    Set newSheet = Worksheets.Add


    fp = FreeFile()

    strStart = defSheet.Cells(C_START_ROW, C_START_COL).Value


    Open strFile For Input As fp

    '|fffd||fffd|`|fffd|V|fffd|[|fffd|g|fffd||303|J|fffd|E|fffd||fffd||fffd|^
    defCount = C_DEF_START_ROW
    creCol = 1

    '|fffd||fffd|`|fffd|V|fffd|[|fffd|g|fffd||fffd||1c2||743|w|fffd|b|fffd|_|fffd||fffd||fffd||c42c||fffd||fffd||fffd||fffd|B
    Do Until defSheet.Cells(defCount, C_NO).Value = ""

        strColumn = defSheet.Cells(defCount, C_COLUMN).Value
        newSheet.Cells(C_CRE_HEADER_ROW, creCol).Value = strColumn

        defCount = defCount + 1
        creCol = creCol + 1
    Loop

    '|fffd||fffd||fffd||283|V|fffd|[|fffd|g|fffd||303|J|fffd|E|fffd||fffd||fffd|^
    creRow = C_CRE_START_ROW

    Do Until EOF(fp)

        '--------------------------------------------------
        ' |fffd|P|fffd||fffd||fffd|R|fffd|[|fffd|h|fffd||fffd||fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd|R|fffd||fffd||fffd|N|fffd|V|fffd||fffd||fffd||fffd||fffd||250||752||80b7||fffd||fffd|B
        '--------------------------------------------------
        Set ColLine = New Collection
        Dim blnStart As Boolean
        
        Do Until EOF(fp)
            
            Line Input #fp, strBuf
            If InStr(strBuf, strStart) > 0 Then
                If blnStart Then
                    Exit Do
                Else
                    blnStart = True
                End If
            End If
        
            ColLine.Add strBuf
        Loop
        
        '--------------------------------------------------
        ' |fffd|P|fffd||fffd||fffd|R|fffd|[|fffd|h|fffd||fffd||fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd|`|fffd|V|fffd|[|fffd|g|fffd||313||fffd||fffd|e|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B
        '--------------------------------------------------
        '|fffd||fffd||fffd||283|V|fffd|[|fffd|g|fffd||303|J|fffd|E|fffd||fffd||fffd|^
        creCol = 1

        For i = 1 To ColLine.count
        
            strBuf = ColLine.Item(i)
            '|fffd||fffd|`|fffd|V|fffd|[|fffd|g|fffd||303|J|fffd|E|fffd||fffd||fffd|^
            defCount = C_DEF_START_ROW

            '|fffd||fffd|`|fffd|V|fffd|[|fffd|g|fffd||fffd||1c2||fffd|
            Do Until defSheet.Cells(defCount, C_NO).Value = ""
    
                '|fffd||fffd||fffd||696||fffd|
                strColumn = defSheet.Cells(defCount, C_COLUMN).Value
                '|fffd||fffd|
                lngCol = defSheet.Cells(defCount, C_POS_COL).Value
                '|fffd||fffd||fffd||fffd|
                lngLen = defSheet.Cells(defCount, C_POS_LEN).Value
    
                '|fffd|L|fffd|[|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||fffd||fffd||fffd||a347|
                If InStr(strBuf, strColumn) > 0 Then
                
                    '|fffd||fffd||fffd||fffd||fffd||52dc2||242|O|fffd||fffd||fffd|w|fffd||80b3||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd|A|fffd|s|fffd||fffd||fffd||702||14e||64fe|
                    If lngLen = 0 Then
                        strValue = Trim(Mid(strBuf, lngCol))
                    Else
                        strValue = Trim(Mid(strBuf, lngCol, lngLen))
                    End If
        
                    '|fffd|Z|fffd||fffd||fffd||252|l|fffd||fffd||752||fffd|
                    newSheet.Cells(creRow, creCol).Value = strValue
                
                    '|fffd||c42c||fffd|V|fffd|[|fffd|g|fffd||317||fffd|{|fffd|P
                    creCol = creCol + 1
    
                End If
    
                '|fffd||fffd||fffd||312||fffd|`|fffd||248||693||fffd|
                defCount = defCount + 1
            Loop
        Next

        '|fffd||fffd||fffd||283|V|fffd|[|fffd|g|fffd||fffd||fffd||fffd||fffd||30d|s|fffd||248||693||fffd||fffd||fffd||fffd||fffd|B
        creRow = creRow + 1
        Set ColLine = Nothing

    Loop

pass:
    Close fp

    Dim r As Range
    Set r = newSheet.Range(newSheet.Columns(1), newSheet.Columns(creCol))
    If r Is Nothing Then
    Else
        r.AutoFit
    End If
    Set r = Nothing

End Sub
Private Function getFileName(ByVal strFile As String) As String

    Dim Length As Long
    Dim strBuf As String
    Dim cnt As Long
    
    Length = Len(strFile)

    For cnt = Length To 1 Step -1
    
        If Mid(strFile, cnt, 1) = "\" Then
            getFileName = Mid(strFile, cnt + 1)
            Exit Function
        End If
    Next

End Function


Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private Const C_File As String = "RELAXTOOLS.XLAM"

Sub reboot()

    Dim a As AddIn

    err.Clear
    On Error Resume Next

    For Each a In Application.AddIns

        If UCase(a.name) = C_File Then
            a.Installed = False
            a.Installed = True
            Exit For
        End If

    Next

    If err.Number <> 0 Then
        MsgBox "|fffd||10b|N|fffd||fffd||fffd||fffd||fffd||243|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|BExcel|fffd||fffd||fffd||302||30d||10b|N|fffd||fffd||fffd||fffd||fffd|K|fffd|v|fffd||20f||a347||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B", vbExclamation + vbOKOnly, "RelaxTools"
    End If

End Sub
Sub RelaxInit()

    Dim a As AddIn

    err.Clear
    On Error Resume Next

    
    For Each a In Application.AddIns

        If UCase(a.name) = C_File Then
        
            a.Installed = False
            
            DeleteSetting "RelaxTools"
            
            a.Installed = True
            Exit For
        End If

    Next

    If err.Number <> 0 Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||243|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|BExcel|fffd||fffd||fffd||302||30d||10b|N|fffd||fffd||fffd||fffd||fffd|K|fffd|v|fffd||20f||a347||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B", vbExclamation + vbOKOnly, "RelaxTools"
    End If

End Sub
Sub RelaxUninstall()

    Dim a As AddIn
    
    On Error GoTo e
    
    If MsgBox("RelaxTools|fffd||fffd||fffd|A|fffd||fffd||fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd||fffd||b0b5||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|H", vbYesNo + vbQuestion, "RelaxTools") <> vbYes Then
        Exit Sub
    End If

    For Each a In Application.AddIns

        If UCase(a.name) = C_File Then
            a.Installed = False
            Kill a.FullName
            Exit For
        End If

    Next

    DeleteSetting "RelaxTools"
    MsgBox "|fffd||fffd||fffd||fffd||243|A|fffd||fffd||fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbInformation + vbOKOnly, "RelaxTools"
    Exit Sub
e:
    MsgBox "|fffd|A|fffd||fffd||fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||24d|s|fffd||fffd||fffd||702||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|B", vbCritical + vbOKOnly, "RelaxTools"
    
End Sub
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "StampBzDTO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public StampType As String
Public Text As String
Public DateType As String
Public DateFormat As String
Public UserDate As String
Public Font As String
Public Color As String
Public Size As String
Public Round As String
Public Rotate As String
Public LineSize As String



Attribute VB_Name = "StampDatDTO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

'Public Text As String
Public Upper As String
Public DateType As String
Public UserDate As String
Public DateFormat As String

Public Lower As String
Public Font As String
Public Color As String
Public Size As String
Public Line As String
Public WordArt As String
Public Fill As String


Attribute VB_Name = "StampMitomeDTO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public StampType As String
Public Text As String
Public Font As String
Public Color As String
Public Size As String
Public Line As String
Public FilePath As String
Public Round As String
Public LineSize As String
Public Rotate As String
Public Fill As String
Attribute VB_Name = "StringBuilder"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private sb As Object

Private Sub Class_Initialize()
    
    Set sb = CreateObject("System.Text.StringBuilder")
    
End Sub

Private Sub Class_Terminate()
    
    Set sb = Nothing

End Sub
Public Sub Append(ByVal strBuf As String)
    
    sb.Append_3 strBuf

End Sub
Public Function ToString() As String

    ToString = sb.ToString

End Function
Attribute VB_Name = "TaskTrayView"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
 
#If VBA7 And Win64 Then

    Private Declare PtrSafe Function Shell_NotifyIcon Lib "shell32" Alias "Shell_NotifyIconA" (ByVal dwMessage As Long, pnid As NOTIFYICONDATA) As Boolean
    Private Declare PtrSafe Function ExtractIconEx Lib "shell32.dll" Alias "ExtractIconExA" (ByVal lpszFile As String, ByVal nIconIndex As Long, phiconLarge As LongPtr, phiconSmall As LongPtr, ByVal nIcons As Long) As Long
    Private Declare PtrSafe Function DrawMenuBar Lib "user32" (ByVal hWnd As LongPtr) As Long
    
    Private Type GUID
        Data1 As Long
        Data2 As Integer
        Data3 As Integer
        Data4(0 To 7) As Byte
    End Type

    Private Type NOTIFYICONDATA
        cbSize As Long
        hWnd As LongPtr
        uID As Long
        uFlags As Long
        uCallbackMessage As Long
        hIcon As LongPtr
        szTip As String * 128
        dwState As Long
        dwStateMask As Long
        szInfo As String * 256
        uTimeoutOrVersion As Long
        szInfoTitle As String * 64
        dwInfoFlags As Long
        guidItem As GUID
        hBalloonIcon As LongPtr
    End Type
    
#Else

    Private Declare Function Shell_NotifyIcon Lib "shell32" Alias "Shell_NotifyIconA" (ByVal dwMessage As Long, pnid As NOTIFYICONDATA) As Boolean
    Private Declare Function ExtractIconEx Lib "shell32.dll" Alias "ExtractIconExA" (ByVal lpszFile As String, ByVal nIconIndex As Long, phiconLarge As Long, phiconSmall As Long, ByVal nIcons As Long) As Long
    Private Declare Function DrawMenuBar Lib "user32" (ByVal hWnd As Long) As Long
    
    Private Type NOTIFYICONDATA
        cbSize As Long
        hWnd As Long
        uID As Long
        uFlags As Long
        uCallbackMessage As Long
        hIcon As Long
        szTip As String * 128
        dwState As Long
        dwStateMask As Long
        szInfo As String * 256
        uTimeoutOrVersion As Long
        szInfoTitle As String * 64
        dwInfoFlags As Long
    End Type
    
#End If

Private Const NIM_ADD = &H0
Private Const NIM_MODIFY = &H1
Private Const NIM_DELETE = &H2
 
Private Const NIF_MESSAGE = &H1
Private Const NIF_ICON = &H2
Private Const NIF_TIP = &H4
Private Const NIF_STATE = &H8
Private Const NIF_INFO = &H10
Private Const NIF_GUID = &H20

Private typ_Icon As NOTIFYICONDATA '|fffd||fffd||fffd|N|fffd||fffd||fffd|X|fffd||14a||1d7||fffd||fffd||fffd||fffd||fffd|A|fffd|C|fffd|R|fffd||fffd||fffd||303|f|fffd|[|fffd|^(|fffd|\|fffd||fffd||fffd||fffd|)
#If VBA7 And Win64 Then
    Public Function AddIcon(ByVal hWnd As LongPtr, ByVal ToolTip As String) As Long
     
        Dim IconLarge As LongPtr
        Dim IconSmall As LongPtr
        Dim IconIndex As Long
     
        Dim strFile As String
        
        strFile = Application.Path & "\" & "EXCEL.EXE"
        IconIndex = 1
        
        Call ExtractIconEx(strFile, IconIndex, IconLarge, IconSmall, 1)
    
        With typ_Icon
            .cbSize = Len(typ_Icon)
            .hWnd = hWnd
            .uID = 0
            .uFlags = NIF_ICON Or NIF_TIP Or NIF_MESSAGE Or NIF_INFO
            .hIcon = IconSmall
            .szTip = ToolTip & vbNullChar
        End With
         
        DrawMenuBar hWnd
         
        AddIcon = Shell_NotifyIcon(NIM_ADD, typ_Icon)
     
    End Function
#Else
    Public Function AddIcon(ByVal hWnd As Long, ByVal ToolTip As String) As Long
     
        Dim IconLarge As Long
        Dim IconSmall As Long
        Dim IconIndex As Long
     
        Dim strFile As String
        
        strFile = Application.Path & "\" & "EXCEL.EXE"
        IconIndex = 1
        
        Call ExtractIconEx(strFile, IconIndex, IconLarge, IconSmall, 1)
    
        With typ_Icon
            .cbSize = Len(typ_Icon)
            .hWnd = hWnd
            .uID = 0
            .uFlags = NIF_ICON Or NIF_TIP Or NIF_MESSAGE Or NIF_INFO
            .hIcon = IconSmall
            .szTip = ToolTip & vbNullChar
        End With
         
        DrawMenuBar hWnd
     
        AddIcon = Shell_NotifyIcon(NIM_ADD, typ_Icon)
        
    End Function
#End If
Public Function ShowBalloon(ByVal Message As String, Optional ByVal BalloonTimeOutSecond As Long = 5) As Long

    With typ_Icon
        .cbSize = Len(typ_Icon)
        .uFlags = NIF_INFO
        .szInfo = Message & vbNullChar
        .uTimeoutOrVersion = BalloonTimeOutSecond * 1000 '|fffd|^|fffd|C|fffd||fffd||fffd|A|fffd|E|fffd|g|fffd||fffd||fffd||fffd|(ms)
    End With
 
    ShowBalloon = Shell_NotifyIcon(NIM_MODIFY, typ_Icon)
     
End Function
Public Sub DeleteIcon()

    With typ_Icon
        .cbSize = Len(typ_Icon)
        .uFlags = NIF_ICON
        .uID = 0
    End With
     
    Call Shell_NotifyIcon(NIM_DELETE, typ_Icon) 'API|fffd||fffd||fffd|s
     
End Sub
Private Sub Class_Terminate()
    Dim typ_Dummy As NOTIFYICONDATA
    Call DeleteIcon
    typ_Icon = typ_Dummy
End Sub

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private Const C_MENU2 As String = "Relax Tools(&R)"
Private Const C_MENU As String = "RelaxTools(&R)"
Private WithEvents XL As Excel.Application
Attribute XL.VB_VarHelpID = -1
'Private IR As IRibbonUI
Private mScrollRow() As Long
Private mScrollCol() As Long
Private mZoom() As Long
Private mActiveSheet As String
Private mblnEventCancel As Boolean
Private mSelection() As Object
'Private mA1exec As Boolean
Private WithEvents XL_LINE As Excel.Application
Attribute XL_LINE.VB_VarHelpID = -1
Private Const C_HOLIZONTAL_BAR_NAME As String = "rlxHolizontalBar"
Private Const C_VERTICAL_BAR_NAME As String = "rlxVerticalBar"
Private Const C_XY_BAR_NAME As String = "rlxXYBar"
Private mWS As Worksheet
Private Sub Workbook_AddinInstall()

    On Error Resume Next

    Dim objApp As Object
    
    Dim objMenu As Object
    Dim objSubMenu As Object
    Dim WS As Worksheet
    
    Dim strNo As String
    Dim strMenu As String
    Dim strSubMenu As String
    Dim strMacro As String
    
    Dim blnBeginGroup As Boolean
    Dim blnBeginGroupSub As Boolean
    
    Dim blnFirst As Boolean
    
    Const C_START_ROW As Long = 3
    Const C_COL_NO As Long = 1
    Const C_COL_MENU As Long = 2
    Const C_COL_SUB_MENU As Long = 3
    Const C_COL_MACRO As Long = 4

    '|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd||202||fffd||a347||fffd||317|\|fffd|h|fffd|[|fffd|u|fffd||148||fffd|x|fffd||d3dc||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd|B
'    On Error Resume Next
'    Application.CommandBars("Worksheet|fffd|@Menu|fffd|@Bar").Controls(C_MENU2).Delete
'    Application.CommandBars("Worksheet|fffd|@Menu|fffd|@Bar").Controls(C_MENU).Delete
'
    On Error GoTo 0
'
'    If Val(Application.Version) < C_EXCEL_VERSION_2007 Then
'
'        '|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd|o|fffd|[|fffd||c42c|
'        Set objApp = Application.CommandBars("Worksheet|fffd|@Menu|fffd|@Bar").Controls.Add(Type:=msoControlPopup)
'        objApp.Caption = C_MENU
'        '|fffd||752||fffd||302||fffd||fffd||fffd|V|fffd|[|fffd|g
'        Set WS = ThisWorkbook.Worksheets("WorksheetMenuBar")
'        '|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||c42c|
'        Call createMenu(objApp, WS)
'
'    End If
    
    '|fffd|Z|fffd||fffd||fffd|E|fffd|N|fffd||fffd||fffd|b|fffd|N|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||c42c|(|fffd||202||fffd||fffd||fffd|Cell|fffd||355|W|fffd||fffd||fffd||189||fffd||fffd|y|fffd|[|fffd|W|fffd|v|fffd||fffd||fffd|r|fffd||fffd||fffd|[|fffd|p|fffd||fffd||fffd||fffd||fffd||90bd||fffd||7c1|j
    Dim c As CommandBar
    '|fffd||752||fffd||302||fffd||fffd||fffd|V|fffd|[|fffd|g
    For Each c In Application.CommandBars
        Select Case c.name
            Case "Cell", "Column", "Row"
                '|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||c42c|
                Set WS = ThisWorkbook.Worksheets("Cell")
                Call createMenu(c, WS)
        End Select
    Next
    
'    '|fffd|V|fffd|F|fffd|C|fffd|v|fffd|E|fffd|N|fffd||fffd||fffd|b|fffd|N|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||c42c|
'    Set objApp = Application.CommandBars("Shapes").Controls.Add(Type:=msoControlPopup, ID:=30080)
'    objApp.Caption = "|fffd|I|fffd|[|fffd|g|fffd|V|fffd|F|fffd|C|fffd|v|fffd||315||3cd|X(&B)"
'    objApp.BeginGroup = True
'    Set objApp = Nothing
'
'    Set objApp = Application.CommandBars("Shapes").Controls.Add(Type:=msoControlPopup)
'    objApp.Caption = "|fffd||fffd|]|fffd|^|fffd||fffd||fffd|](&E)"
'
'    objApp.Controls.Add ID:=688 '|fffd||fffd||fffd|R|fffd||249||fffd|]
'    objApp.Controls.Add ID:=199 '|fffd||fffd|90|fffd|x|fffd||fffd|]
'    objApp.Controls.Add ID:=198 '|fffd|E90|fffd|x|fffd||fffd|]
'    objApp.Controls.Add ID:=196 '|fffd||fffd||fffd|E|fffd||fffd||fffd|]
'    objApp.Controls.Add ID:=197 '|fffd||327a||fffd||fffd||fffd|]
'
'    Set objApp = Nothing
'
'    Set objApp = Application.CommandBars("Shapes")
'
'    '|fffd||752||fffd||302||fffd||fffd||fffd|V|fffd|[|fffd|g
'    Set WS = ThisWorkbook.Worksheets("Shapes")
'    '|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||c42c|
'    Call createMenu(objApp, WS)
'
'    Set objApp = Nothing
'
'    Set objApp = Application.CommandBars("Pictures Context Menu")
'
'    '|fffd||752||fffd||302||fffd||fffd||fffd|V|fffd|[|fffd|g
'    Set WS = ThisWorkbook.Worksheets("Pictures Context Menu")
'    '|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||c42c|
'    Call createMenu(objApp, WS)
'
'    Set objApp = Nothing
'
'    '|fffd||752||fffd||302||fffd||fffd||fffd|V|fffd|[|fffd|g
'    Set objApp = Application.CommandBars("OLE Object")
'    Set WS = ThisWorkbook.Worksheets("OLE Object")
'    '|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||c42c|
'    Call createMenu(objApp, WS)
'
'    Set objApp = Nothing
'
'
'    If Val(Application.Version) < C_EXCEL_VERSION_2007 Then
'
'        Set objApp = Application.CommandBars.Add("RelaxTools")
'        objApp.visible = True
'        Set WS = ThisWorkbook.Worksheets("RelaxTools")
'
'        '|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd|o|fffd|[|fffd||c42c|
'        Call createMenuBar(objApp, WS)
'    End If
    
'    Set WS = ThisWorkbook.Worksheets("MacroOptions")
    
'    '|fffd||fffd||fffd|[|fffd|U|fffd||fffd|`|fffd||590||fffd||fffd||310||752||fffd|
'    Call createMacroOptions(WS)

End Sub

Private Sub Workbook_AddinUninstall()

    On Error Resume Next
      
'    '|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||d3dc|
'    Application.CommandBars("Worksheet|fffd|@Menu|fffd|@Bar").Controls(C_MENU).Delete
'    Application.CommandBars("Worksheet|fffd|@Menu|fffd|@Bar").Controls(C_MENU2).Delete

    '|fffd|Z|fffd||fffd||fffd|E|fffd|N|fffd||fffd||fffd|b|fffd|N|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||fffd||fffd|Z|fffd|b|fffd|g
    Dim c As CommandBar
    For Each c In Application.CommandBars
        Select Case c.name
            Case "Cell", "Column", "Row"
                '|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||c42c|
                c.Reset
        End Select
    Next

'    '|fffd|V|fffd|F|fffd|C|fffd|v|fffd|E|fffd|N|fffd||fffd||fffd|b|fffd|N|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||fffd||fffd|Z|fffd|b|fffd|g
'    Application.CommandBars("Shapes").Reset
'    Application.CommandBars("Pictures Context Menu").Reset
'    Application.CommandBars("OLE Object").Reset
'
'    Application.CommandBars("RelaxTools").Delete

End Sub
'|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||c42c|
Private Sub createMenu(ByRef objApp As Object, ByRef WS As Worksheet)

    On Error Resume Next

    Dim objSubMenu As Object
    Dim objMenu As Object
    
    Dim strNo As String
    Dim strMenu As String
    Dim strSubMenu As String
    Dim strMacro As String
    Dim strBikou As String
    Dim lngRow As Long
    
    Dim blnBeginGroup As Boolean
    Dim blnBeginGroupSub As Boolean
    
    Dim blnFirst As Boolean
    
    Const C_START_ROW As Long = 3
    Const C_COL_NO As Long = 1
    Const C_COL_MENU As Long = 2
    Const C_COL_SUB_MENU As Long = 3
    Const C_COL_MACRO As Long = 4
    Const C_COL_BIKOU As Long = 5

    blnBeginGroup = False
    
    lngRow = C_START_ROW
    strNo = WS.Cells(lngRow, C_COL_NO)
    Do Until strNo = ""
    
        '|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||fffd|
        strMenu = WS.Cells(lngRow, C_COL_MENU)
        
        '|fffd|T|fffd|u|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||fffd|
        strSubMenu = WS.Cells(lngRow, C_COL_SUB_MENU)
            
        '|fffd|}|fffd|N|fffd||fffd||fffd||fffd|
        strMacro = WS.Cells(lngRow, C_COL_MACRO)
        
        '|fffd||fffd||fffd|l
        strBikou = WS.Cells(lngRow, C_COL_BIKOU)
        
        Select Case strMenu
            Case ""
                '|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||30f||a347||fffd||211|O|fffd||c42c||fffd||fffd||fffd||fffd||fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||309||fffd|
            Case "-"
                '|fffd||fffd||fffd||fffd||c42c||fffd||fffd||fffd||90c1||fffd|j|fffd||fffd||fffd|[|fffd||311|O|fffd||243|Z|fffd|p|fffd||fffd||fffd|[|fffd|^|fffd||fffd||fffd||c42c|
                blnBeginGroup = True
            Case Else
                Set objMenu = Nothing
                If strSubMenu <> "" Then
                    Set objMenu = objApp.Controls.Add(Type:=msoControlPopup)
                    objMenu.Caption = strMenu
                Else
                    Set objMenu = objApp.Controls.Add
                    objMenu.Caption = strMenu
                    objMenu.onAction = strMacro
                    objMenu.TooltipText = strBikou
                    objMenu.DescriptionText = strBikou
                    objMenu.DisplayTooltips = True
                End If
                objMenu.BeginGroup = blnBeginGroup
                blnBeginGroup = False
        End Select
    
        Select Case strSubMenu
            Case ""
            Case "-"
                blnBeginGroupSub = True
            Case Else
                Set objSubMenu = objMenu.Controls.Add
                objSubMenu.Caption = strSubMenu
                objSubMenu.onAction = strMacro
                objSubMenu.TooltipText = strBikou
                objSubMenu.DescriptionText = strBikou
                objSubMenu.DisplayTooltips = True
                objSubMenu.BeginGroup = blnBeginGroupSub
            

            
                Set objSubMenu = Nothing
                blnBeginGroupSub = False
        End Select
        
        lngRow = lngRow + 1
        strNo = WS.Cells(lngRow, C_COL_NO)
    Loop
    
    Set objMenu = Nothing
    Set WS = Nothing

End Sub
'|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||c42c|
Private Sub createMenuBar(ByRef objApp As Object, ByRef WS As Worksheet)

    On Error Resume Next

    Dim objSubMenu As Object
    Dim objMenu As Object
    
    Dim strNo As String
    Dim strMenu As String
    Dim strSubMenu As String
    Dim strMacro As String
    Dim strBikou As String
    
    Dim blnBeginGroup As Boolean
    Dim blnBeginGroupSub As Boolean
    
    Dim blnFirst As Boolean
    Dim lngRow As Long
    
    Const C_START_ROW As Long = 3
    Const C_COL_NO As Long = 1
    Const C_COL_MENU As Long = 2
    Const C_COL_MACRO As Long = 3
    Const C_COL_BIKOU As Long = 4
    Const C_COL_IMAGE As Long = 5

    blnBeginGroup = False
    
    lngRow = C_START_ROW
    strNo = WS.Cells(lngRow, C_COL_NO)
    Do Until strNo = ""
    
        '|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||fffd|
        strMenu = WS.Cells(lngRow, C_COL_MENU)
        
        '|fffd|T|fffd|u|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||fffd|
        'strSubMenu = WS.Cells(lngRow, C_COL_SUB_MENU)
            
        '|fffd|}|fffd|N|fffd||fffd||fffd||fffd|
        strMacro = WS.Cells(lngRow, C_COL_MACRO)
        
        '|fffd||fffd||fffd|l
        strBikou = WS.Cells(lngRow, C_COL_BIKOU)
        
        Select Case strMenu
            Case ""
                '|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||30f||a347||fffd||211|O|fffd||c42c||fffd||fffd||fffd||fffd||fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||309||fffd|
            Case "-"
                '|fffd||fffd||fffd||fffd||c42c||fffd||fffd||fffd||90c1||fffd|j|fffd||fffd||fffd|[|fffd||311|O|fffd||243|Z|fffd|p|fffd||fffd||fffd|[|fffd|^|fffd||fffd||fffd||c42c|
                blnBeginGroup = True
            Case Else
                Set objMenu = Nothing
                If strSubMenu <> "" Then
                    Set objMenu = objApp.Controls.Add(Type:=msoControlButton, id:=2)
                    objMenu.Caption = strMenu
                Else
                    Set objMenu = objApp.Controls.Add
                    objMenu.Caption = strMenu
                    objMenu.onAction = strMacro
                    objMenu.TooltipText = strBikou
                    objMenu.DescriptionText = strBikou
                    objMenu.DisplayTooltips = True
                    
                    WS.Shapes(WS.Cells(lngRow, C_COL_IMAGE).Value).Copy
                    objMenu.PasteFace
                End If
                objMenu.BeginGroup = blnBeginGroup
                blnBeginGroup = False
        End Select
    
        lngRow = lngRow + 1
        strNo = WS.Cells(lngRow, C_COL_NO)
    Loop
    
    Set objMenu = Nothing
    Set WS = Nothing

End Sub
'|fffd||fffd||fffd|[|fffd|U|fffd||fffd|`|fffd||590||fffd|
Private Sub createMacroOptions()

    Dim WS As Worksheet

    On Error Resume Next
    
    Const C_START_ROW As Long = 3
    Const C_COL_NO As Long = 1
    Const C_COL_MACRO As Long = 2
    Const C_COL_DESCRIPTION As Long = 3
    Const C_COL_CATEGORY As Long = 4
    Const C_COL_BIKOU As Long = 5
    
    Dim lngRow As Long
    Dim strNo As String

    Set WS = ThisWorkbook.Worksheets("MacroOptions")

    'blnBeginGroup = False
    
    lngRow = C_START_ROW
    strNo = WS.Cells(lngRow, C_COL_NO)
    Do Until strNo = ""
    
        '|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||fffd|
        Application.MacroOptions MACRO:=WS.Cells(lngRow, C_COL_MACRO), _
                                 Description:=WS.Cells(lngRow, C_COL_DESCRIPTION), _
                                 CATEGORY:=WS.Cells(lngRow, C_COL_CATEGORY)
        
    
        lngRow = lngRow + 1
        strNo = WS.Cells(lngRow, C_COL_NO)
    Loop
    
    Set WS = Nothing

End Sub
Public Sub setIRibbon(ByRef r As IRibbonUI)
'    Set IR = r
    Set XL = Excel.Application
End Sub

'--------------------------------------------------------------
'|fffd|@|fffd|u|fffd|b|fffd|N|fffd|N|fffd||fffd||fffd|[|fffd|Y|fffd|O|fffd|C|fffd|x|fffd||fffd||fffd|g
'--------------------------------------------------------------
Private Sub Workbook_BeforeClose(Cancel As Boolean)
    On Error Resume Next
    
    Call removeShortCutKey
    If XL_LINE Is Nothing Then
    Else
        Call deleteCrossLine
    End If
    If mScreenEnable Then
        Unload frmScreenShot
    End If
    Call DeleteTemporaryFile

End Sub
Private Sub DeleteTemporaryFile()

    Dim FS As Object
    Dim strTmpBook As String
    
    On Error Resume Next

    Set FS = CreateObject("Scripting.FileSystemObject")
    
    strTmpBook = rlxGetTempFolder() & "*.*"

    
    FS.DeleteFile strTmpBook, True


    Set FS = Nothing

End Sub

Private Sub Workbook_Open()
    
    '|fffd||fffd||fffd|[|fffd|U|fffd||fffd|`|fffd||590||fffd||fffd||310||752||fffd|
    Call createMacroOptions
 
    
    '|fffd|V|fffd||fffd||fffd|[|fffd|g|fffd|J|fffd|b|fffd|g|fffd|L|fffd|[|fffd||752||fffd|
    Call setShortCutKey
    
'    mColSection.Add New SecNumPoint2, "01"
'    mColSection.Add New SecNumPoint, "02"
'    mColSection.Add New SecNumPoint, "03"
'    mColSection.Add New SecNum1, "04"
'    mColSection.Add New SecNumA2, "05"
'    mColSection.Add New SecNumI2, "06"
'    mColSection.Add New SecNumC, "07"
    
    Call createAllSectionObject
    Call createAllItemObject
    
    Set mColSection = rlxInitSectionSetting()

End Sub

Private Sub Workbook_PivotTableCloseConnection(ByVal Target As PivotTable)

End Sub








Private Sub XL_SheetChange(ByVal Sh As Object, ByVal Target As Range)
    Dim blnCheck As Boolean
    On Error Resume Next
    If Sh.Parent.ReadOnly Then
        blnCheck = GetSetting(C_TITLE, "cautionReadOnly", "Check", False)
        If blnCheck Then
            Call rlxFlashWindow
        End If
    End If
End Sub

Private Sub XL_WindowResize(ByVal WB As Workbook, ByVal Wn As Window)
    Call RefreshRibbon
'    IR.Invalidate
End Sub

'--------------------------------------------------------------
'|fffd|@|fffd|u|fffd|b|fffd|N|fffd||6d1||fffd||fffd|O|fffd|C|fffd|x|fffd||fffd||fffd|g
'--------------------------------------------------------------
Private Sub XL_WorkbookBeforeSave(ByVal WB As Workbook, ByVal SaveAsUI As Boolean, Cancel As Boolean)

    Dim strName As String
    Dim strFolder As String
    Dim strFile As String
    Dim strList() As String
    Dim blnFind As Boolean
    Dim i As Long
    Dim strSourceFile As String
    Dim strDestFile As String
    Dim exec As Boolean
    Dim lngGen As Long
    
    Dim blnScreenUpdating As Boolean
    Dim blnDisplayAlerts As Boolean
    
    '|fffd|C|fffd|x|fffd||fffd||fffd|g|fffd||303|L|fffd||fffd||fffd||fffd||fffd|Z|fffd||fffd|
    If mblnEventCancel Then
        Exit Sub
    End If
    
    If Val(Application.Version) > C_EXCEL_VERSION_2007 Then
    Else
        Exit Sub
    End If
    
    '-------------------------------------------------
    ' |fffd||208||550||fffd||fffd||fffd||1d7||fffd|
    '-------------------------------------------------
    exec = GetSetting(C_TITLE, "Backup", "Check", False)
    If rlxIsExcelFile(WB.FullName) And exec Then
    Else
        Exit Sub
    End If
    
    blnScreenUpdating = Application.ScreenUpdating
    blnDisplayAlerts = Application.DisplayAlerts
    
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    
    strFile = rlxGetSetting(C_TITLE, "Backup", "FileList", "")
    strList = Split(strFile, vbTab)
    
    blnFind = False
    For i = 0 To UBound(strList)
        If InStr(LCase(Application.ActiveWorkbook.FullName), LCase(strList(i))) > 0 Then
             blnFind = True
            Exit For
        End If
    Next
    If Not blnFind Then
        GoTo pass
    End If
    
    
    strName = WB.FullName
    
    '|fffd|p|fffd|X|fffd||fffd||fffd||743|`|fffd|F|fffd|b|fffd|N
    strFolder = rlxGetFullpathFromPathName(strName)
    If Len(Trim(strFolder)) = 0 Then
        GoTo pass
    End If

    '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||743|`|fffd|F|fffd|b|fffd|N
    If Not rlxIsFileExists(strName) Then
        GoTo pass
    End If
    
    strFolder = GetSetting(C_TITLE, "Backup", "Folder", "")
    Dim strFullname As String
    Dim strPath As String
    
    lngGen = Val(GetSetting(C_TITLE, "Backup", "Gen", "99"))
    
    For i = lngGen To 0 Step -1
    
        If Len(Trim(strFolder)) = 0 Then
            strFullname = WB.FullName
        Else
            strFullname = rlxAddFileSeparator(strFolder) & rlxGetFullpathFromFileName(WB.FullName)
        End If
    
        strSourceFile = strFullname & "." & Format$(i, "000")
        If rlxIsFileExists(strSourceFile) Then
            If i = lngGen Then
                Kill strSourceFile
            Else
                strDestFile = strFullname & "." & Format$(i + 1, "000")
                Name strSourceFile As strDestFile
            End If
        End If
    
    Next

pass:
    
    Application.ScreenUpdating = blnScreenUpdating
    Application.DisplayAlerts = blnDisplayAlerts
    
End Sub

'--------------------------------------------------------------
'|fffd|@|fffd|u|fffd|b|fffd|N|fffd||6d1||fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
'--------------------------------------------------------------
Private Sub XL_WorkbookAfterSave(ByVal WB As Workbook, ByVal Success As Boolean)

    Dim a1exec As Boolean
    Dim backexec As Boolean
    Dim Target As Boolean
    Dim strFile As String
    Dim strList() As String
    Dim blnFind As Boolean
    Dim i As Long
    
    Dim blnScreenUpdating As Boolean
    Dim blnDisplayAlerts As Boolean
    
    '|fffd|C|fffd|x|fffd||fffd||fffd|g|fffd||303|L|fffd||fffd||fffd||fffd||fffd|Z|fffd||fffd|
    If mblnEventCancel Or Success = False Then
        Exit Sub
    End If
    
'    a1exec = GetSetting(C_TITLE, "A1Save", "A1Check", False)
    backexec = GetSetting(C_TITLE, "Backup", "Check", False)

'    '-------------------------------------------------
'    ' |fffd|`|fffd|P|fffd||fffd||fffd||fffd||fffd||6d1||fffd|
'    '-------------------------------------------------
'    If rlxIsExcelFile(WB.FullName) And a1exec Then
'
'        strFile = rlxGetSetting(C_TITLE, "A1Save", "FileList", "")
'        strList = Split(strFile, vbTab)
'
'        Target = GetSetting(C_TITLE, "A1Save", "Target", False)
'
'        blnFind = False
'        For i = 0 To UBound(strList)
'            If InStr(LCase(Application.ActiveWorkbook.FullName), LCase(strList(i))) > 0 Then
'                 blnFind = True
'                Exit For
'            End If
'        Next
'        If blnFind Then
'            If Not Target Then
'                a1exec = False
'            End If
'        Else
'            If Target Then
'                a1exec = False
'            End If
'        End If
'
'    End If

'    '-------------------------------------------------
'    ' |fffd|`|fffd|P|fffd||fffd||fffd||fffd||fffd||6d1||fffd|
'    '-------------------------------------------------
'    If rlxIsExcelFile(WB.FullName) And a1exec Then
'
'        blnDisplayAlerts = Application.DisplayAlerts
'        blnScreenUpdating = Application.ScreenUpdating
'
'        Application.DisplayAlerts = False
'        Application.ScreenUpdating = False
'
'        Call saveSel(WB)
'        Call setA1(WB)
'
'        mblnEventCancel = True
'        WB.Save
'        mblnEventCancel = False
'
'        Application.DisplayAlerts = blnDisplayAlerts
'        Application.ScreenUpdating = blnScreenUpdating
'
'    End If
    
    '-------------------------------------------------
    ' |fffd||208||550||fffd||fffd||fffd||1d7||fffd|
    '-------------------------------------------------
    If rlxIsExcelFile(WB.FullName) And backexec Then
    
        blnDisplayAlerts = Application.DisplayAlerts
        blnScreenUpdating = Application.ScreenUpdating
        
        Application.DisplayAlerts = False
        Application.ScreenUpdating = False
    
        strFile = rlxGetSetting(C_TITLE, "Backup", "FileList", "")
        strList = Split(strFile, vbTab)
        
        blnFind = False
        For i = 0 To UBound(strList)
            If InStr(LCase(Application.ActiveWorkbook.FullName), LCase(strList(i))) > 0 Then
                 blnFind = True
                Exit For
            End If
        Next
        If blnFind Then
            Dim strFolder As String
            Dim strFullname As String
            strFolder = GetSetting(C_TITLE, "Backup", "Folder", "")
            If Len(Trim(strFolder)) = 0 Then
                strFullname = WB.FullName
            Else
                strFullname = rlxAddFileSeparator(strFolder) & rlxGetFullpathFromFileName(WB.FullName)
            End If
            mblnEventCancel = True
            WB.SaveCopyAs strFullname & ".000"
            mblnEventCancel = False
        
        End If
        
        Application.DisplayAlerts = blnDisplayAlerts
        Application.ScreenUpdating = blnScreenUpdating
    
    End If

'    '-------------------------------------------------
'    ' |fffd|`|fffd|P|fffd||fffd||fffd||fffd||fffd||6d1||fffd|
'    '-------------------------------------------------
'    If rlxIsExcelFile(WB.FullName) And a1exec Then
'
'        blnDisplayAlerts = Application.DisplayAlerts
'        blnScreenUpdating = Application.ScreenUpdating
'
'        Application.DisplayAlerts = False
'        Application.ScreenUpdating = False
'
'        Call restoreSel(WB)
'
'        Application.DisplayAlerts = blnDisplayAlerts
'        Application.ScreenUpdating = blnScreenUpdating
'
'    End If

End Sub

''--------------------------------------------------------------
''|fffd|@|fffd||fffd||fffd||5c2||102||303|V|fffd|[|fffd|g|fffd||311|I|fffd||fffd||fffd||292|u|fffd||fffd||6d1||fffd|
''--------------------------------------------------------------
'Private Sub saveSel(WB As Workbook)
'    On Error Resume Next
'    Dim WS As Worksheet
'    Dim i As Long
'
'    If WB Is Nothing Then
'        Exit Sub
'    End If
'
'    mActiveSheet = WB.ActiveSheet.name
'
'    ReDim mSelection(1 To WB.Worksheets.count)
'    ReDim mScrollRow(1 To WB.Worksheets.count)
'    ReDim mScrollCol(1 To WB.Worksheets.count)
'    ReDim mZoom(1 To WB.Worksheets.count)
'
'    For i = 1 To WB.Worksheets.count
'        Set WS = WB.Worksheets(i)
'        If WS.visible = xlSheetVisible Then
'            WS.Activate
'            Set mSelection(i) = Selection
'            mScrollRow(i) = WB.Windows(1).ScrollRow
'            mScrollCol(i) = WB.Windows(1).ScrollColumn
'            mZoom(i) = WB.Windows(1).Zoom
'        Else
'            Set mSelection(i) = Nothing
'            mScrollRow(i) = 0
'            mScrollCol(i) = 0
'            mZoom(i) = 100
'        End If
'    Next
'
'End Sub
'Private Sub setA1(WB As Workbook)
'
'    On Error Resume Next
'    Dim WS As Worksheet
'
'
'    Dim blnRatio As Boolean
'    Dim lngPercent As Long
'
'    blnRatio = GetSetting(C_TITLE, "A1Setting", "ratio", False)
'    lngPercent = Val(GetSetting(C_TITLE, "A1Setting", "percent", "100"))
'    If lngPercent = 0 Then
'        lngPercent = 100
'    End If
'
'    If WB Is Nothing Then
'        Exit Sub
'    End If
'
'    For Each WS In WB.Worksheets
'        If WS.visible = xlSheetVisible Then
'            WS.Activate
'            WS.Range("A1").Activate
'            WB.Windows(1).ScrollRow = 1
'            WB.Windows(1).ScrollColumn = 1
'            If blnRatio Then
'                WB.Windows(1).Zoom = lngPercent
'            End If
'        End If
'    Next
'
'    For Each WS In WB.Worksheets
'        If WS.visible = xlSheetVisible Then
'            WS.Select
'            Exit For
'        End If
'    Next
'
'End Sub
''--------------------------------------------------------------
''|fffd|@|fffd||fffd||fffd||5c2||102||303|V|fffd|[|fffd|g|fffd||311|I|fffd||fffd||fffd||292|u|fffd||1570c||fffd|
''--------------------------------------------------------------
'Private Sub restoreSel(WB As Workbook)
'
'    On Error Resume Next
'    Dim WS As Worksheet
'    Dim i As Long
'
'    If WB Is Nothing Then
'        Exit Sub
'    End If
'
'    For i = 1 To UBound(mSelection)
'        Set WS = WB.Worksheets(i)
'        If Not (mSelection(i) Is Nothing) Then
'            WS.Activate
'            mSelection(i).Select
'            WB.Windows(1).ScrollRow = mScrollRow(i)
'            WB.Windows(1).ScrollColumn = mScrollCol(i)
'            WB.Windows(1).Zoom = mZoom(i)
'        End If
'    Next
'
'    WB.Worksheets(mActiveSheet).Select
'
'End Sub
Public Sub enableCrossLine()
    
    On Error Resume Next
    
    Call addCrossLine
    
    Set XL_LINE = Excel.Application
    
End Sub
Private Sub addCrossLine()

    Dim s As Shape
    Dim b As Boolean
    Dim z As Single
    Dim r As Long
    Dim c As Long
    Dim a As Boolean
    
    If ActiveWorkbook.ActiveSheet Is Nothing Then
    Else
        
        a = Application.ScreenUpdating
        Application.ScreenUpdating = False
        
        b = ActiveWorkbook.Saved
        Set mWS = ActiveWorkbook.ActiveSheet
        
        z = ActiveWindow.Zoom
        c = ActiveWindow.ScrollColumn
        r = ActiveWindow.ScrollRow
        
        ActiveWindow.Zoom = 100
        
        Call deleteCrossLine
        
        Set s = mWS.Shapes.AddShape(msoShapeRectangle, 10, 10, 10, 10)
        
        s.name = C_HOLIZONTAL_BAR_NAME
        s.Line.visible = msoFalse
        
        s.Select
        Selection.PrintObject = msoFalse
        Selection.Placement = xlFreeFloating
    
        With s.Fill
            .visible = msoTrue
            .ForeColor.RGB = RGB(0, 176, 80)
            .Transparency = 0.5
            .Solid
        End With
        
        Set s = Nothing
        
        Set s = mWS.Shapes.AddShape(msoShapeRectangle, 20, 20, 10, 10)
    
        s.name = C_VERTICAL_BAR_NAME
        s.Line.visible = msoFalse
        
        s.Select
        Selection.PrintObject = msoFalse
        Selection.Placement = xlFreeFloating
    
        With s.Fill
            .visible = msoTrue
            .ForeColor.RGB = RGB(0, 176, 80)
            .Transparency = 0.5
            .Solid
        End With
        
        Set s = Nothing
        
        Set s = mWS.Shapes.AddShape(msoShapeRectangle, 20, 20, 10, 10)
    
        s.name = C_XY_BAR_NAME
        s.Line.visible = msoFalse
        
        s.Select
        Selection.PrintObject = msoFalse
        Selection.Placement = xlFreeFloating
    
        With s.Fill
            .visible = msoTrue
            .ForeColor.RGB = RGB(0, 176, 80)
            .Transparency = 0.5
            .Solid
        End With
        
        Set s = Nothing
        
        Call XL_LINE_SheetSelectionChange(mWS, ActiveCell)
        
        ActiveCell.Select
        ActiveWorkbook.Saved = b
        
        ActiveWindow.Zoom = z
        ActiveWindow.ScrollColumn = c
        ActiveWindow.ScrollRow = r
        
        Application.ScreenUpdating = a
    
    End If

End Sub

Public Sub disableCrossLine()

    Set XL_LINE = Nothing
    
    If mWS Is Nothing Then
    Else
        Call deleteCrossLine
    End If
    Set mWS = Nothing
End Sub

Private Sub deleteCrossLine()
    On Error Resume Next
    
    Dim b As Boolean
    
    b = mWS.Parent.Saved
    
    mWS.Shapes(C_HOLIZONTAL_BAR_NAME).Delete
    mWS.Shapes(C_VERTICAL_BAR_NAME).Delete
    mWS.Shapes(C_XY_BAR_NAME).Delete
    
    mWS.Parent.Saved = b

End Sub

Private Sub XL_LINE_SheetSelectionChange(ByVal Sh As Object, ByVal Target As Range)

    On Error Resume Next

    Const C_MAX As Long = 50000
    
    Dim lngRow As Long
    Dim lngCol As Long
    Dim r As Range
    Dim b As Boolean
    Dim s As Boolean
    
    Static blnCall As Boolean

    If blnCall Then
        Exit Sub
    End If
    
    If mWS.name <> Sh.name Then
        Exit Sub
    End If
    
    If existCrossLine(Sh) Then
    Else
        Exit Sub
    End If
    
    s = Sh.Parent.Saved

    b = Application.ScreenUpdating
    Application.ScreenUpdating = False

    blnCall = True

    lngRow = Target(1).row
    lngCol = Target(1).Column

    Dim sngTop As Single
    Dim sngLeft As Single
    Dim sngHeight As Single
    Dim sngWidth As Single

    sngTop = Target(1).Top - C_MAX / 2
    If sngTop < 0 Then
        sngTop = 0
    End If
    sngHeight = Target(1).Top + C_MAX / 2
    If sngHeight > C_MAX Then
        sngHeight = C_MAX
    End If
    
    sngLeft = Target(1).Left - C_MAX / 2
    If sngLeft < 0 Then
        sngLeft = 0
    End If
    sngWidth = Target(1).Left + C_MAX / 2
    If sngWidth > C_MAX Then
        sngWidth = C_MAX
    End If

    Dim lngFillVisible As Long
    Dim lngFillColor As Long
    Dim dblFillTransparency As Double
    Dim lngLineVisible As Long
    Dim lngLineColor As Long
    Dim sngLineWeight As Single
    Dim strOnAction As String

    Call getCrossLineSetting(lngFillVisible, lngFillColor, dblFillTransparency, lngLineVisible, lngLineColor, sngLineWeight, strOnAction)

    '|fffd||fffd||fffd||fffd|
    Set r = Range(Sh.Cells(lngRow, 1), Sh.Cells(lngRow, Sh.Columns.count - 1))
    
    Sh.Shapes(C_HOLIZONTAL_BAR_NAME).Top = r.Top
    Sh.Shapes(C_HOLIZONTAL_BAR_NAME).Left = sngLeft
    Sh.Shapes(C_HOLIZONTAL_BAR_NAME).Width = sngWidth 'r.Width
    Sh.Shapes(C_HOLIZONTAL_BAR_NAME).Height = r.Height
    
    If lngFillVisible = msoTrue Then
        Sh.Shapes(C_HOLIZONTAL_BAR_NAME).onAction = strOnAction
    End If
    
    With Sh.Shapes(C_HOLIZONTAL_BAR_NAME).Fill
        .visible = lngFillVisible
        .ForeColor.RGB = lngFillColor
        .Transparency = dblFillTransparency / 100
        .Solid
    End With
    
    With Sh.Shapes(C_HOLIZONTAL_BAR_NAME).Line
        .visible = lngLineVisible
        .ForeColor.RGB = lngLineColor
        .Weight = sngLineWeight
        .Transparency = 0
    End With
    
    Set r = Nothing
    
    '|fffd|c|fffd||fffd|
    Set r = Range(Sh.Cells(1, lngCol), Sh.Cells(Sh.Rows.count - 1, lngCol))

    Sh.Shapes(C_VERTICAL_BAR_NAME).Top = sngTop
    Sh.Shapes(C_VERTICAL_BAR_NAME).Left = r.Left
    Sh.Shapes(C_VERTICAL_BAR_NAME).Width = r.Width
    Sh.Shapes(C_VERTICAL_BAR_NAME).Height = sngHeight 'r.Height

    If lngFillVisible = msoTrue Then
        Sh.Shapes(C_VERTICAL_BAR_NAME).onAction = strOnAction
    End If
    
    With Sh.Shapes(C_VERTICAL_BAR_NAME).Fill
        .visible = lngFillVisible
        .ForeColor.RGB = lngFillColor
        .Transparency = dblFillTransparency / 100
        .Solid
    End With
    
    With Sh.Shapes(C_VERTICAL_BAR_NAME).Line
        .visible = lngLineVisible
        .ForeColor.RGB = lngLineColor
        .Weight = sngLineWeight
        .Transparency = 0
    End With
    
    Set r = Nothing


    '|fffd|w|fffd|x|fffd||fffd||fffd|x|fffd||fffd|
    Set r = Range(Sh.Cells(1, lngCol), Sh.Cells(Sh.Rows.count - 1, lngCol))

    Sh.Shapes(C_XY_BAR_NAME).Width = 80
    Sh.Shapes(C_XY_BAR_NAME).Height = 50

    Sh.Shapes(C_XY_BAR_NAME).Top = Target(1).Top + Target(1).Height + 10
    Sh.Shapes(C_XY_BAR_NAME).Left = Target(1).Left + Target(1).Width + 10
    
    If lngFillVisible = msoTrue Then
        Sh.Shapes(C_XY_BAR_NAME).onAction = strOnAction
    End If
    
    With Sh.Shapes(C_XY_BAR_NAME).Fill
        .visible = lngFillVisible
        .ForeColor.RGB = lngFillColor
        .Transparency = dblFillTransparency / 100
        .Solid
    End With
    
    With Sh.Shapes(C_XY_BAR_NAME).Line
        .visible = lngLineVisible
        .ForeColor.RGB = lngLineColor
        .Weight = sngLineWeight
        .Transparency = 0
    End With
    
    Dim strBuf As String
    
    strBuf = "  |fffd||fffd|:" & Target(1).Column & vbCrLf
    strBuf = strBuf & "  |fffd|s:" & Target(1).row
    With Sh.Shapes(C_XY_BAR_NAME).TextFrame2
        .TextRange.Text = strBuf
        .TextRange.Font.Bold = msoTrue
        .TextRange.ParagraphFormat.Alignment = msoAlignLeft
        .VerticalAnchor = msoAnchorMiddle
    End With
    
    Set r = Nothing



    blnCall = False
    
    Application.ScreenUpdating = b

    Sh.Parent.Saved = s

End Sub
Private Sub XL_LINE_WorkbookBeforeSave(ByVal WB As Workbook, ByVal SaveAsUI As Boolean, Cancel As Boolean)
#If VBA7 And Win64 Then
    On Error Resume Next
    Call deleteCrossLine
#Else
    On Error Resume Next
    Dim obj As Object
    Call lineOnAction(obj, False)
#End If
End Sub
Private Sub XL_LINE_WorkbookAfterSave(ByVal WB As Workbook, ByVal Success As Boolean)
    On Error Resume Next
    If mLineEnable Then
        Call addCrossLine
    End If
End Sub
Private Sub XL_LINE_SheetDeactivate(ByVal Sh As Object)
'    On Error Resume Next
'    Dim obj As Object
'    Call lineOnAction(obj, False)
    On Error Resume Next
    Call deleteCrossLine
End Sub
Private Sub XL_LINE_WorkbookDeactivate(ByVal WB As Workbook)
    On Error Resume Next
    Call deleteCrossLine
End Sub
Private Sub XL_LINE_SheetActivate(ByVal Sh As Object)
    On Error Resume Next
    If mLineEnable Then
        Call addCrossLine
    End If

End Sub
Private Sub XL_LINE_WorkbookActivate(ByVal WB As Workbook)
    On Error Resume Next
    If mLineEnable Then
        Call addCrossLine
    End If

End Sub



Private Sub XL_LINE_WorkbookBeforeClose(ByVal WB As Workbook, Cancel As Boolean)
    On Error Resume Next
    Dim obj As Object
    
    Call lineOnAction(obj, False)

End Sub
Function existCrossLine(ByVal Sh As Worksheet) As Boolean
    
    Dim s As Shape
    
    On Error GoTo ee
    
    Set s = Sh.Shapes(C_HOLIZONTAL_BAR_NAME)
    Set s = Nothing
    
    Set s = Sh.Shapes(C_VERTICAL_BAR_NAME)
    Set s = Nothing
    
    existCrossLine = True
    Exit Function
ee:
    Set s = Nothing
    existCrossLine = False

End Function

Private Sub XL_WorkbookOpen(ByVal WB As Workbook)

End Sub
Attribute VB_Name = "UTF8Encoding"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private utf8 As Object

Public Function GetString(ByRef bytBuf() As Byte) As String

    GetString = utf8.GetString(bytBuf)

End Function
Public Function getBytes(ByRef strBuf As String) As Byte()

    getBytes = utf8.GetBytes_4(strBuf)

End Function

Private Sub Class_Initialize()

    Set utf8 = CreateObject("System.Text.UTF8Encoding")

End Sub

Private Sub Class_Terminate()

    Set utf8 = Nothing

End Sub
Attribute VB_Name = "UndoRangeDTO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public sourceRange As Range
Public destRange As Range

Attribute VB_Name = "basCommon"
Option Explicit

' 32-bit Function version.
' |fffd|h|fffd||fffd||fffd|C|fffd|u|fffd||fffd||fffd||fffd||fffd||fffd|l|fffd|b|fffd|g|fffd||fffd||fffd|[|fffd|N|fffd|h|fffd||fffd||fffd|C|fffd|u|fffd||fffd||fffd||64fe|
#If VBA7 And Win64 Then
    'VBA7 = Excel2010|fffd||20d|~|fffd|B|fffd||502||fffd||fffd|R|fffd||fffd||fffd|p|fffd|C|fffd||fffd||fffd|G|fffd||fffd||fffd|[|fffd||242||202||fffd||fffd||10c||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd||fffd||80a0||fffd||fffd||702||fffd||fffd||fffd|B
    Private Declare PtrSafe Function WNetGetConnection32 Lib "MPR.DLL" Alias "WNetGetConnectionA" (ByVal lpszLocalName As String, ByVal lpszRemoteName As String, lSize As Long) As Long
    Private Declare PtrSafe Function OpenClipboard Lib "user32" (ByVal hWnd As LongPtr) As Long
    Private Declare PtrSafe Function CloseClipboard Lib "user32" () As Long
    Private Declare PtrSafe Function EmptyClipboard Lib "user32" () As Long
    Private Declare PtrSafe Function GetClipboardData Lib "user32" (ByVal wFormat As Long) As LongPtr
    Private Declare PtrSafe Function SetClipboardData Lib "user32" (ByVal wFormat As Long, ByVal hMem As LongPtr) As LongPtr
    Private Declare PtrSafe Function GlobalAlloc Lib "kernel32" (ByVal wFlags As Long, ByVal dwBytes As LongPtr) As LongPtr
    Private Declare PtrSafe Function GlobalLock Lib "kernel32" (ByVal hMem As LongPtr) As LongPtr
    Private Declare PtrSafe Function GlobalUnlock Lib "kernel32" (ByVal hMem As LongPtr) As Long
    Private Declare PtrSafe Function GlobalSize Lib "kernel32" (ByVal hMem As LongPtr) As LongPtr
    Private Declare PtrSafe Function lstrcpy Lib "kernel32" Alias "lstrcpyA" (ByVal lpString1 As Any, ByVal lpString2 As Any) As LongPtr
    Private Declare PtrSafe Function ChooseColor Lib "comdlg32.dll" Alias "ChooseColorA" (pChoosecolor As ChooseColor) As Long
    Private Declare PtrSafe Function DragQueryFile Lib "shell32.dll" Alias "DragQueryFileA" (ByVal hDrop As LongPtr, ByVal UINT As Long, ByVal lpszFile As String, ByVal ch As Long) As Long
    Private Declare PtrSafe Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As LongPtr
    Private Declare PtrSafe Function FlashWindowEx Lib "User32.dll" (pfwi As FLASHWINFO) As LongPtr
    Private Declare PtrSafe Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (Destination As Any, Source As Any, ByVal Length As LongPtr)
    Private Declare PtrSafe Function IsClipboardFormatAvailable Lib "User32.dll" (ByVal wFormat As Long) As Long
    Private Declare PtrSafe Function OleCreatePictureIndirect Lib "oleaut32" (ByRef lpPictDesc As PictDesc, ByRef RefIID As GUID, ByVal fPictureOwnsHandle As LongPtr, ByRef IPic As IPicture) As Long
    Private Declare PtrSafe Function CopyImage Lib "user32" (ByVal handle As LongPtr, ByVal un1 As Long, ByVal n1 As Long, ByVal n2 As Long, ByVal un2 As Long) As LongPtr
    Private Declare PtrSafe Function EnumClipboardFormats Lib "user32" (ByVal wFormat As Long) As Long

    Private Type ChooseColor
      lStructSize As LongPtr
      hWndOwner As LongPtr
      hInstance As LongPtr
      rgbResult As LongPtr
      lpCustColors As String
      flags As LongPtr
      lCustData As LongPtr
      lpfnHook As LongPtr
      lpTemplateName As String
    End Type
    
    Private Type POINTAPI
        X As Long
        Y As Long
    End Type
    
    Private Type DROPFILES
        pFiles As Long
        PT As POINTAPI
        fNC As Long
        fWide As Long
    End Type
    
    Private Type FLASHWINFO
        cbSize As LongPtr
        hWnd As LongPtr
        dwFlags As Long
        uCount As Long
        dwTimeout As LongPtr
    End Type
    
    Private Type PictDesc
        cbSizeofStruct As Long
        picType        As Long
        hImage         As LongPtr
        Option1        As LongPtr
        Option2        As LongPtr
    End Type
    Private Type GUID
        Data1          As Long
        Data2          As Integer
        Data3          As Integer
        Data4(7)       As Byte
    End Type
#Else
    Private Declare Function WNetGetConnection32 Lib "MPR.DLL" Alias "WNetGetConnectionA" (ByVal lpszLocalName As String, ByVal lpszRemoteName As String, lSize As Long) As Long
    Declare Function OpenClipboard Lib "user32" (ByVal hWnd As Long) As Long
    Declare Function CloseClipboard Lib "user32" () As Long
    Declare Function EmptyClipboard Lib "user32" () As Long
    Declare Function GetClipboardData Lib "user32" (ByVal wFormat As Long) As Long
    Declare Function SetClipboardData Lib "user32" (ByVal wFormat As Long, ByVal hMem As Long) As Long
    Declare Function GlobalAlloc Lib "kernel32" (ByVal wFlags As Long, ByVal dwBytes As Long) As Long
    Declare Function GlobalLock Lib "kernel32" (ByVal hMem As Long) As Long
    Declare Function GlobalUnlock Lib "kernel32" (ByVal hMem As Long) As Long
    Declare Function GlobalSize Lib "kernel32" (ByVal hMem As Long) As Long
    Declare Function lstrcpy Lib "kernel32" Alias "lstrcpyA" (ByVal lpString1 As Any, ByVal lpString2 As Any) As Long
    Declare Function ChooseColor Lib "comdlg32.dll" Alias "ChooseColorA" (pChoosecolor As ChooseColor) As Long
    Declare Function DragQueryFile Lib "shell32.dll" Alias "DragQueryFileA" (ByVal hDrop As Long, ByVal UINT As Long, ByVal lpszFile As String, ByVal ch As Long) As Long
    Private Declare Function FindWindow Lib "User32.dll" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
    Private Declare Function FlashWindowEx Lib "User32.dll" (pfwi As FLASHWINFO) As Long
    Private Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (Destination As Any, Source As Any, ByVal Length As Long)
    Private Declare Function IsClipboardFormatAvailable Lib "User32.dll" (ByVal wFormat As Long) As Long
    Private Declare Function OleCreatePictureIndirect Lib "olepro32.dll" (ByRef lpPictDesc As PictDesc, ByRef RefIID As GUID, ByVal fPictureOwnsHandle As Long, ByRef IPic As IPicture) As Long
    Private Declare Function CopyImage Lib "user32" (ByVal handle As Long, ByVal un1 As Long, ByVal n1 As Long, ByVal n2 As Long, ByVal un2 As Long) As Long
    Private Declare Function EnumClipboardFormats Lib "user32" (ByVal wFormat As Long) As Long
    
    Private Type ChooseColor
      lStructSize As Long
      hWndOwner As Long
      hInstance As Long
      rgbResult As Long
      lpCustColors As String
      flags As Long
      lCustData As Long
      lpfnHook As Long
      lpTemplateName As String
    End Type
    
    Private Type POINTAPI
        X As Long
        Y As Long
    End Type
    
    Private Type DROPFILES
        pFiles As Long
        PT As POINTAPI
        fNC As Long
        fWide As Long
    End Type
    
    Private Type FLASHWINFO
        cbSize As Long
        hWnd As Long
        dwFlags As Long
        uCount As Long
        dwTimeout As Long
    End Type
    
    Private Type PictDesc
        cbSizeofStruct As Long
        picType        As Long
        hImage         As Long
        Option1        As Long
        Option2        As Long
    End Type
    Private Type GUID
        Data1          As Long
        Data2          As Integer
        Data3          As Integer
        Data4(7)       As Byte
    End Type
    
#End If

Private Const CF_BITMAP      As Long = 2
Private Const CF_PALETTE     As Long = 9

Private Const CC_RGBINIT = &H1                '|fffd|F|fffd||303|f|fffd|t|fffd|H|fffd||fffd||fffd|g|fffd|l|fffd||fffd||752||fffd|
Private Const CC_LFULLOPEN = &H2              '|fffd|F|fffd||30d||c42c||fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\|fffd||fffd|
Private Const CC_PREVENTFULLOPEN = &H4        '|fffd|F|fffd||30d||c42c||fffd|{|fffd|^|fffd||fffd||fffd||16ccc||fffd||fffd||242||fffd||fffd||fffd|
Private Const CC_SHOWHELP = &H8               '|fffd|w|fffd||fffd||fffd|v|fffd|{|fffd|^|fffd||fffd||fffd||fffd|\|fffd||fffd|

Private Const NO_ERROR As Long = 0
Private Const lBUFFER_SIZE As Long = 255
Private lpszRemoteName As String
Private cbRemoteName As Long

Public Const IMAGE_BITMAP As Long = 0
Public Const LR_COPYRETURNORG As Long = &H4

Public Const C_EXCEL_VERSION_2013 As Long = 15
Public Const C_EXCEL_VERSION_2010 As Long = 14
Public Const C_EXCEL_VERSION_2007 As Long = 12
Public Const C_EXCEL_VERSION_2003 As Long = 11

'UNDO|fffd|o|fffd|b|fffd|t|fffd|@
Public Const C_TITLE As String = "RelaxTools"
Public Const C_URL As String = "http://software.opensquare.net/relaxtools/"
Public Const C_REGEXP_URL As String = "http://software.opensquare.net/relaxtools/about/foruse/regexp/"
Public Const C_STAMP_URL As String = "http://software.opensquare.net/relaxtools/about/foruse/stamp/"
Public Const C_MAX_CELLS As Long = 100000
Public pvarSelectionBuffer As Variant
Public pobjSelection As Object

Public Const C_UTF16 As String = "UTF-16(UNICODE)"
Public Const C_UTF8 As String = "UTF-8"
Public Const C_SJIS As String = "MS932(ShiftJIS)"
Public Const C_SJIS_OLD As String = "Shift-JIS"
Public Const C_ERROR As String = "<<ERROR>>"
Public Const CF_TEXT As Long = 1  '|fffd|e|fffd|L|fffd|X|fffd|g|fffd|f|fffd|[|fffd|^|fffd||fffd||1c2||74f||fffd||fffd||fffd||fffd||fffd||fffd||fffd||a347||fffd||312||8414||fffd||142||fffd|
Public Const CF_HDROP As Long = 15
Public Const C_REF_TEXT As String = "(|fffd|Q|fffd||197|p)"
'--------------------------------------------------------------
'|fffd|@|fffd|F|fffd||fffd||fffd|P|fffd|U|fffd|i|fffd||fffd||fffd||fffd||fffd||fffd||255||3ca||fffd|
'--------------------------------------------------------------
Public Function getHexColor(ByVal lngColor As Long) As String
    getHexColor = "&H" & Right$("00000000" & Hex(lngColor), 8)
End Function
'--------------------------------------------------------------
'|fffd|@|fffd|P|fffd|U|fffd|i|fffd||fffd||fffd||fffd||fffd||fffd||fffd|F|fffd||255||3ca||fffd|
'--------------------------------------------------------------
Public Function getLongColor(ByVal strColor As String) As Long
    On Error Resume Next
    getLongColor = CLng(strColor)
End Function
'--------------------------------------------------------------
'|fffd|@|fffd|A|fffd|h|fffd||fffd||fffd|X|fffd||fffd||fffd||fffd||fffd||42a42||fffd|I|fffd|u|fffd|W|fffd|F|fffd|N|fffd|g|fffd||255||3ca||fffd|
'--------------------------------------------------------------
Public Function getObjectFromAddres(ByVal strAddress As String) As Object

    Dim obj As Object

    #If VBA7 And Win64 Then
        Dim p As LongPtr
        p = CLngPtr(strAddress)
    #Else
        Dim p As Long
        p = CLng(strAddress)
    #End If
  
    CopyMemory obj, p, LenB(p)
    
    Set getObjectFromAddres = obj

End Function

'--------------------------------------------------------------
'|fffd|@|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd|J|fffd|E|fffd||fffd||fffd|g
'--------------------------------------------------------------
Public Sub rlxGetFilesCount(ByRef objFs As Object, ByVal strPath As String, ByRef lngFCnt As Long, ByVal blnFile As Boolean, ByVal blnFolder As Boolean, ByVal blnSubFolder As Boolean)

    Dim objfld As Object
    Dim objSub As Object

    Set objfld = objFs.GetFolder(strPath)
    
    If blnFile Then
        lngFCnt = lngFCnt + objfld.files.count
    End If
    
    If blnFolder Then
        lngFCnt = lngFCnt + objfld.SubFolders.count
    End If
    
        '|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||64fe||fffd||fffd||fffd||fffd|
    If blnSubFolder Then
        For Each objSub In objfld.SubFolders
            DoEvents
            rlxGetFilesCount objFs, objSub.Path, lngFCnt, blnFile, blnFolder, blnSubFolder
        Next
        
    End If
End Sub

'--------------------------------------------------------------
'|fffd|@|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd|Z|fffd|p|fffd||fffd||fffd|[|fffd|^|fffd|t|fffd||fffd|
'--------------------------------------------------------------
Public Function rlxAddFileSeparator(ByVal strFile As String) As String
Attribute rlxAddFileSeparator.VB_Description = "|fffd|p|fffd|X|fffd||183|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||6c2||24b||fffd||602||8576||fffd||fffd|(""\\"")|fffd||fffd||22ae||fffd||fffd||fffd||702||fffd||fffd|B"
Attribute rlxAddFileSeparator.VB_ProcData.VB_Invoke_Func = " \n19"
    If Right(strFile, 1) = "\" Then
        rlxAddFileSeparator = strFile
    Else
        rlxAddFileSeparator = strFile & "\"
    End If
End Function
'--------------------------------------------------------------
'|fffd|@|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd|I|fffd||fffd|
'--------------------------------------------------------------
Public Function rlxSelectFolder() As String
Attribute rlxSelectFolder.VB_Description = "|fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||590||fffd||fffd||182||fffd||fffd||10e|g|fffd|p|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
Attribute rlxSelectFolder.VB_ProcData.VB_Invoke_Func = " \n19"
 
    Dim objShell As Object
    Dim objPath As Object
    Dim WS As Object
    Dim strFolder As String
    
    Set objShell = CreateObject("Shell.Application")
    Set objPath = objShell.BrowseForFolder(&O0, "|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd|I|fffd||fffd||142||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", &H1 + &H10, "")
    If Not objPath Is Nothing Then
    
        '|fffd||202||fffd||fffd||fffd||fffd|u|fffd|f|fffd|X|fffd|N|fffd|g|fffd|b|fffd|v|fffd|v|fffd||303|p|fffd|X|fffd||fffd||fffd||64fe||fffd||142||fffd||fffd||202||fffd|
        If objPath = "|fffd|f|fffd|X|fffd|N|fffd|g|fffd|b|fffd|v" Then
            Set WS = CreateObject("WScript.Shell")
            rlxSelectFolder = WS.SpecialFolders("Desktop")
        Else
            rlxSelectFolder = objPath.Items.Item.Path
        
        End If
    Else
        rlxSelectFolder = ""
    End If
    
End Function
'--------------------------------------------------------------
'|fffd|@|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||64fe|
'--------------------------------------------------------------
Public Function rlxGetFullpathFromFileName(ByVal strPath As String) As String
Attribute rlxGetFullpathFromFileName.VB_Description = "|fffd|p|fffd|X|fffd|{|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||42a42||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||302||755||50b|p|fffd||fffd||fffd||702||fffd||fffd|B"
Attribute rlxGetFullpathFromFileName.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim lngCnt As Long
    Dim lngMax As Long
    Dim strResult As String
    
    strResult = strPath
    
    lngMax = Len(strPath)
    
    For lngCnt = lngMax To 1 Step -1
    
        Select Case Mid$(strPath, lngCnt, 1)
            Case "\", "/"
                If lngCnt = lngMax Then
                Else
                    strResult = Mid$(strPath, lngCnt + 1)
                End If
                Exit For
        End Select
    
    Next

    rlxGetFullpathFromFileName = strResult

End Function

'--------------------------------------------------------------
'|fffd|@|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||64fe|(|fffd|g|fffd||fffd||fffd|q|fffd||fffd||fffd||fffd|)
'--------------------------------------------------------------
Public Function rlxGetFullpathFromExt(ByVal strPath As String) As String
Attribute rlxGetFullpathFromExt.VB_Description = "|fffd|p|fffd|X|fffd|{|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||42a42||fffd|g|fffd||fffd||fffd|q|fffd||302||755||50b|p|fffd||fffd||fffd||702||fffd||fffd|B"
Attribute rlxGetFullpathFromExt.VB_ProcData.VB_Invoke_Func = " \n19"

   Dim lngCnt As Long
    Dim lngMax As Long
    Dim strResult As String
    
    strResult = strPath
    
    lngMax = Len(strPath)
    
    For lngCnt = lngMax To 1 Step -1
    
        If Mid$(strPath, lngCnt, 1) = "." Then
            If lngCnt > 1 Then
                strResult = Mid$(strPath, 1, lngCnt - 1)
                Exit For
            End If
        End If
    
    Next

    rlxGetFullpathFromExt = strResult

End Function
'--------------------------------------------------------------
'|fffd|@|fffd|p|fffd|X|fffd||fffd||fffd||64fe|
'--------------------------------------------------------------
Public Function rlxGetFullpathFromPathName(ByVal strPath As String) As String
Attribute rlxGetFullpathFromPathName.VB_Description = "|fffd|p|fffd|X|fffd|{|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||42a42||fffd|f|fffd|B|fffd||fffd||fffd|N|fffd|g|fffd||fffd||fffd||fffd||fffd||302||755||50b|p|fffd||fffd||fffd||702||fffd||fffd|B"
Attribute rlxGetFullpathFromPathName.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim lngCnt As Long
    Dim lngMax As Long
    Dim strResult As String
    
    strResult = strPath
    
    lngMax = Len(strPath)
    
    For lngCnt = lngMax To 1 Step -1
    
        Select Case Mid$(strPath, lngCnt, 1)
            Case "\", "/"
                If lngCnt > 1 Then
                    strResult = Mid$(strPath, 1, lngCnt - 1)
                    Exit For
                End If
        End Select
    
    Next

    rlxGetFullpathFromPathName = strResult

End Function
'--------------------------------------------------------------
'|fffd|@DOS|fffd|R|fffd|}|fffd||fffd||fffd|h|fffd||fffd||fffd|s
'--------------------------------------------------------------
Function rlxShellExec(ByVal strCommand As String) As String
Attribute rlxShellExec.VB_Description = "DOS|fffd|R|fffd|}|fffd||fffd||fffd|h|fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd|A|fffd|W|fffd||fffd||fffd|o|fffd||342||fffd||50b|p|fffd||fffd||fffd||702||fffd||fffd|B"
Attribute rlxShellExec.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim WSh As Object
    Dim wExec As Object
    
    Set WSh = CreateObject("WScript.Shell")
    
    Set wExec = WSh.exec("%ComSpec% /c " & strCommand)
    Do While wExec.Status = 0
        DoEvents
    Loop
    
    rlxShellExec = wExec.StdOut.ReadAll
    
    Set wExec = Nothing
    Set WSh = Nothing

End Function
'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd||fffd||fffd||fffd||fffd||fffd|DB|fffd||fffd||fffd||681|i|fffd||fffd|G|fffd|c|fffd|j
'--------------------------------------------------------------
Public Function rlxIsDBField(ByVal strBuf As String) As Boolean
Attribute rlxIsDBField.VB_Description = "DB|fffd||fffd||fffd||696||fffd||fffd|i|fffd||fffd||fffd|p|fffd||5576||fffd||fffd||fffd|{|fffd|A|fffd||fffd||fffd|_|fffd|[|fffd|o|fffd|[|fffd|j|fffd||30f||a347|\ntrue|fffd||fffd||50b|p|fffd||fffd||fffd||702||fffd||fffd|B"
Attribute rlxIsDBField.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim lngLen As Long
    Dim i As Long
    Dim lngCnt As Long
    
    rlxIsDBField = False
    
    lngLen = Len(strBuf)
    
    For i = 1 To lngLen
    
        Select Case Mid$(strBuf, i, 1)
            Case "a" To "z"
            Case Else
                lngCnt = lngCnt + 1
        End Select
    Next

    If lngLen = lngCnt Then
        rlxIsDBField = True
    End If

End Function
'--------------------------------------------------------------
'|fffd|@Java|fffd|t|fffd|B|fffd|[|fffd||fffd||fffd|h|fffd||fffd||fffd||fffd|DB|fffd||fffd||fffd||696||fffd|
'--------------------------------------------------------------
Public Function rlxToDBFieldNm(ByVal strJavaField As String) As String
Attribute rlxToDBFieldNm.VB_Description = "Java|fffd||fffd||fffd||696||fffd||fffd||fffd|DB|fffd||fffd||fffd||696||fffd||fffd||255||3ca||fffd||fffd||fffd||fffd||702||fffd||fffd|B\n ex. dbFieldName |fffd||fffd| DB_FIELD_NAME"
Attribute rlxToDBFieldNm.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim s As String
  
    Dim i As Long
    Dim Max As Long
    Dim u As Boolean
    Dim strBuf As String
    Dim strResult As String
    Dim strSrc As String
  
    u = False
    
    strSrc = strJavaField
    
    '|fffd||fffd||fffd||142||fffd|DB|fffd||fffd||fffd||682||202||73c8||fffd||fffd||fffd||fffd||fffd||202||fffd|
    If rlxIsDBField(strSrc) Then
        rlxToDBFieldNm = strSrc
        Exit Function
    End If
    
    If Len(strSrc) >= 3 Then
        Select Case UCase(Mid$(strSrc, 1, 3))
            Case "GET", "SET"
                strSrc = Mid$(strSrc, 4)
        End Select
    End If
    Max = Len(strSrc)
    strResult = ""

    For i = 1 To Max
    
        strBuf = Mid$(strSrc, i, 1)
        Select Case strBuf
            Case "A" To "Z"
            u = True
        End Select
        
        If u Then
            If strResult <> "" Then
                strBuf = "_" & strBuf
            End If
            u = False
        Else
            strBuf = UCase(strBuf)
        End If
        strResult = strResult & strBuf
    
    Next
    rlxToDBFieldNm = strResult

End Function
'--------------------------------------------------------------
'|fffd|@DB|fffd||fffd||fffd||696||fffd||fffd||fffd|Java|fffd|t|fffd|B|fffd|[|fffd||fffd||fffd|h|fffd||fffd|
'--------------------------------------------------------------
Public Function rlxToJavaFieldNm(ByVal strDBFieldName As String) As String
Attribute rlxToJavaFieldNm.VB_Description = "DB|fffd||fffd||fffd||696||fffd||fffd||fffd|Java|fffd||fffd||fffd||696||fffd||fffd||255||3ca||fffd||fffd||fffd||fffd||702||fffd||fffd|B\n ex. DB_FIELD_NAME |fffd||fffd| dbFieldName"
Attribute rlxToJavaFieldNm.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim s As String
  
    Dim i As Long
    Dim Max As Long
    Dim u As Boolean
    Dim strBuf As String
    Dim strResult As String
    Dim strSrc As String
        
    u = False
    
    strSrc = strDBFieldName
    
    If Len(strSrc) >= 3 Then
        Select Case UCase(Mid$(strSrc, 1, 3))
            Case "GET", "SET"
                Select Case Len(strSrc)
                    Case 4
                        strSrc = LCase(Mid$(strSrc, 4, 1))
                    Case Is >= 5
                        strSrc = LCase(Mid$(strSrc, 4, 1)) & Mid$(strSrc, 5)
                End Select
        End Select
    End If
    
    Max = Len(strSrc)
    strResult = ""

    If rlxIsDBField(strSrc) Then
        For i = 1 To Max
        
            strBuf = Mid$(strSrc, i, 1)
            If strBuf = "_" Then
                u = True
            Else
            
                If u Then
                    strBuf = UCase(strBuf)
                    u = False
                Else
                    strBuf = LCase(strBuf)
                End If
                strResult = strResult & strBuf
            End If
        Next
    Else
        strResult = strSrc
    End If
    
    rlxToJavaFieldNm = strResult

End Function


'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd||fffd||fffd||fffd||303|o|fffd|C|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd||fffd||7c2||fffd|B|fffd||fffd||fffd||fffd||fffd|Q|fffd|o|fffd|C|fffd|g|fffd|A|fffd||fffd||fffd|p|fffd|P|fffd|o|fffd|C|fffd|g|fffd|B
'--------------------------------------------------------------
Public Function rlxAscLen(ByVal var As Variant) As Long
Attribute rlxAscLen.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||303|o|fffd|C|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd||fffd||7c2||702||fffd||fffd|B|fffd||fffd||fffd||fffd||fffd||342|Q|fffd|o|fffd|C|fffd|g|fffd|A\n|fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd||342|P|fffd|o|fffd|C|fffd|g|fffd||190||fffd||fffd||fffd||fffd||702||fffd||fffd|B"
Attribute rlxAscLen.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim ascVar As Variant
    
    ascVar = strConv(var, vbFromUnicode)


    rlxAscLen = LenB(ascVar)

End Function
'----------------------------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd||fffd||fffd||fffd||30d||fffd||fffd|[|fffd||fffd||fffd||fffd|w|fffd||80b5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd||fffd||502||fffd||fffd|B|fffd||fffd||fffd||fffd||fffd|Q|fffd|o|fffd|C|fffd|g|fffd|A|fffd||fffd||fffd|p|fffd|P|fffd|o|fffd|C|fffd|g|fffd|B
'----------------------------------------------------------------------------------
Public Function rlxAscLeft(ByVal var As Variant, ByVal lngSize As Long) As String
Attribute rlxAscLeft.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||30d||fffd||fffd|[|fffd||fffd||fffd||fffd|w|fffd||80b5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd||fffd||502||fffd||fffd||702||fffd||fffd|B\n|fffd||fffd||fffd||fffd||fffd|Q|fffd|o|fffd|C|fffd|g|fffd|A|fffd||fffd||fffd|p|fffd|P|fffd|o|fffd|C|fffd|g|fffd|B"
Attribute rlxAscLeft.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim lngLen As Long
    Dim i As Long
    
    Dim strChr As String
    Dim strResult As String
    
    lngLen = Len(var)
    strResult = ""

    For i = 1 To lngLen
    
        strChr = Mid(var, i, 1)
        If rlxAscLen(strResult & strChr) > lngSize Then
            Exit For
        End If
        strResult = strResult & strChr
    
    Next

    rlxAscLeft = strResult

End Function
'----------------------------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd||fffd||fffd||fffd||309|E|fffd|[|fffd||fffd||fffd||fffd|w|fffd||80b5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd||fffd||502||fffd||fffd|B|fffd||fffd||fffd||fffd||fffd|Q|fffd|o|fffd|C|fffd|g|fffd|A|fffd||fffd||fffd|p|fffd|P|fffd|o|fffd|C|fffd|g|fffd|B
'----------------------------------------------------------------------------------
Public Function rlxAscRight(ByVal var As Variant, ByVal lngSize As Long) As String
Attribute rlxAscRight.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||309|E|fffd|[|fffd||fffd||fffd||fffd|w|fffd||80b5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd||fffd||502||fffd||fffd||702||fffd||fffd|B\n|fffd||fffd||fffd||fffd||fffd|Q|fffd|o|fffd|C|fffd|g|fffd|A|fffd||fffd||fffd|p|fffd|P|fffd|o|fffd|C|fffd|g|fffd|B"
Attribute rlxAscRight.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim ascVar As Variant
    
    ascVar = strConv(var, vbFromUnicode)

    rlxAscRight = strConv(RightB(ascVar, lngSize), vbUnicode)

End Function
'----------------------------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd||fffd||fffd||42a42||fffd|w|fffd||80b5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd||fffd||502||fffd||fffd|B|fffd||fffd||fffd||fffd||fffd|Q|fffd|o|fffd|C|fffd|g|fffd|A|fffd||fffd||fffd|p|fffd|P|fffd|o|fffd|C|fffd|g|fffd|B
'----------------------------------------------------------------------------------
Public Function rlxAscMid(ByVal var As Variant, ByVal lngPos As Long, Optional ByVal varSize As Variant) As String
Attribute rlxAscMid.VB_Description = "|fffd||fffd||fffd||fffd||fffd||42a42||fffd|w|fffd||80b5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd||fffd||502||fffd||fffd||702||fffd||fffd|B\n|fffd||fffd||fffd||fffd||fffd|Q|fffd|o|fffd|C|fffd|g|fffd|A|fffd||fffd||fffd|p|fffd|P|fffd|o|fffd|C|fffd|g|fffd|B"
Attribute rlxAscMid.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim ascVar As Variant
    
    ascVar = strConv(var, vbFromUnicode)

    If IsMissing(varSize) Then
        rlxAscMid = strConv(MidB(ascVar, lngPos), vbUnicode)
    Else
        rlxAscMid = strConv(MidB(ascVar, lngPos, varSize), vbUnicode)
    End If

End Function
'--------------------------------------------------------------
'|fffd|@|fffd|h|fffd||fffd||fffd|C|fffd|u|fffd||fffd||fffd||fffd|UNC|fffd||fffd||fffd||3ca||fffd|
'|fffd|@|fffd|h|fffd||fffd||fffd|C|fffd|u|fffd||fffd|(J:|fffd||fffd|)|fffd||fffd||fffd|w|fffd||fffd|B|fffd|G|fffd||fffd||fffd|[|fffd||30f||a347||fffd|h|fffd||fffd||fffd|C|fffd|u|fffd||fffd||fffd||fffd||fffd||fffd||fffd||302||702||715||50b|p
'--------------------------------------------------------------
Public Function rlxDriveToUNC(ByVal strPath As String) As String
Attribute rlxDriveToUNC.VB_Description = "|fffd|l|fffd|b|fffd|g|fffd||fffd||fffd|[|fffd|N|fffd|h|fffd||fffd||fffd|C|fffd|u|fffd||fffd|UNC|fffd||255||3ca||fffd||fffd||fffd||fffd||702||fffd||fffd|B"
Attribute rlxDriveToUNC.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim lStatus As Long
    Dim strDrive As String
    
    '|fffd|f|fffd|t|fffd|H|fffd||fffd||fffd|g|fffd||143|p|fffd|X|fffd||fffd||fffd|Z|fffd|b|fffd|g
    rlxDriveToUNC = strPath
    
    If InStr(strPath, ":") = 2 Then
        strDrive = Left$(strPath, 2)
    Else
        '|fffd|h|fffd||fffd||fffd|C|fffd|u|fffd||fffd||42a8a||702||702||fffd||202||fffd||fffd|B
        Exit Function
    End If

    cbRemoteName = lBUFFER_SIZE
    
    lpszRemoteName = lpszRemoteName & Space(lBUFFER_SIZE)
    
    lStatus& = WNetGetConnection32(strDrive, lpszRemoteName, cbRemoteName)
    
    If lStatus& = NO_ERROR Then
        rlxDriveToUNC = Left$(lpszRemoteName, InStr(lpszRemoteName, Chr$(0)) - 1) & Mid$(strPath, 3)
    Else
        '|fffd|h|fffd||fffd||fffd|C|fffd|u|fffd||fffd||42a8a||702||702||fffd||90aa||fffd|l|fffd|b|fffd|g|fffd||fffd||fffd|[|fffd|N|fffd|h|fffd||fffd||fffd|C|fffd|u|fffd||142||342||202||fffd||fffd||94|\|fffd||fffd||fffd|B
        rlxDriveToUNC = strPath
    End If

End Function
'--------------------------------------------------------------
'|fffd|@|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||743|`|fffd|F|fffd|b|fffd|N
'--------------------------------------------------------------
Public Function rlxIsFileExists(ByVal strFile As String) As Boolean
Attribute rlxIsFileExists.VB_Description = "|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||fffd||a347|true|fffd||fffd||50b|p|fffd||fffd||fffd||702||fffd||fffd|B"
Attribute rlxIsFileExists.VB_ProcData.VB_Invoke_Func = " \n19"
 
    With CreateObject("Scripting.FileSystemObject")
        If .FileExists(strFile) Then
            rlxIsFileExists = True
        Else
            rlxIsFileExists = False
        End If
    End With

End Function
'--------------------------------------------------------------
'|fffd|@|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||743|`|fffd|F|fffd|b|fffd|N
'--------------------------------------------------------------
Public Function rlxIsFolderExists(ByVal strFile As String) As Boolean
Attribute rlxIsFolderExists.VB_Description = "|fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||590||fffd||fffd||182||fffd||fffd||10e|g|fffd|p|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
Attribute rlxIsFolderExists.VB_ProcData.VB_Invoke_Func = " \n19"
 
    With CreateObject("Scripting.FileSystemObject")
        If .FolderExists(strFile) Then
            rlxIsFolderExists = True
        Else
            rlxIsFolderExists = False
        End If
    End With

End Function
Public Function rlxGetTempFolder() As String

    On Error Resume Next
    
    Dim strFolder As String
    
    rlxGetTempFolder = ""
    
    With CreateObject("Scripting.FileSystemObject")
        strFolder = rlxAddFileSeparator(.GetSpecialFolder(2)) & C_TITLE
        If .FolderExists(strFolder) Then
        Else
            .createFolder strFolder
        End If
    End With
    
    rlxGetTempFolder = rlxAddFileSeparator(strFolder)

End Function
'--------------------------------------------------------------
'|fffd|@|fffd|w|fffd||8305||fffd||142||30e|l|fffd||30c||713||fffd|(decimal|fffd|^|fffd||fffd||38f||fffd|)
'--------------------------------------------------------------
Public Function rlxRound(ByVal |fffd||fffd||fffd|l As Variant, ByVal |fffd||fffd||fffd||fffd| As Long) As Variant
Attribute rlxRound.VB_Description = "|fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||590||fffd||fffd||fffd|Round|fffd||193||fffd||fffd||fffd||fffd|g|fffd|p|fffd||fffd||fffd|@|fffd|B\n|fffd|v|fffd|Z|fffd||fffd|Decimal|fffd|^|fffd||14d|s|fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B|fffd||fffd||fffd||fffd||fffd||352|x|fffd||fffd||fffd||142||fffd||fffd|B"
Attribute rlxRound.VB_ProcData.VB_Invoke_Func = " \n19"

    rlxRound = Int(CDec(|fffd||fffd||fffd|l) * (10 ^ |fffd||fffd||fffd||fffd|) + CDec(0.5)) / 10 ^ |fffd||fffd||fffd||fffd|

End Function
'--------------------------------------------------------------
'|fffd|@|fffd|w|fffd||8305||fffd||142||310||60e||302||fffd|(decimal|fffd|^|fffd||fffd||38f||fffd|)
'--------------------------------------------------------------
Public Function rlxRoundDown(ByVal |fffd||fffd||fffd|l As Variant, ByVal |fffd||fffd||fffd||fffd| As Long) As Variant
Attribute rlxRoundDown.VB_Description = "|fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||590||fffd||fffd||fffd|RoundDown|fffd||193||fffd||fffd||fffd||fffd|g|fffd|p|fffd||fffd||fffd|@|fffd|B\n|fffd|v|fffd|Z|fffd||fffd|Decimal|fffd|^|fffd||14d|s|fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B|fffd||fffd||fffd||fffd||fffd||352|x|fffd||fffd||fffd||142||fffd||fffd|B"
Attribute rlxRoundDown.VB_ProcData.VB_Invoke_Func = " \n19"

    rlxRoundDown = Int(CDec(|fffd||fffd||fffd|l) * (10 ^ |fffd||fffd||fffd||fffd|)) / 10 ^ |fffd||fffd||fffd||fffd|

End Function
'--------------------------------------------------------------
'|fffd|@|fffd|w|fffd||8305||fffd||142||310||60f||30b0|(decimal|fffd|^|fffd||fffd||38f||fffd|)
'--------------------------------------------------------------
Public Function rlxRoundUp(ByVal |fffd||fffd||fffd|l As Variant, ByVal |fffd||fffd||fffd||fffd| As Long) As Variant
Attribute rlxRoundUp.VB_Description = "|fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||590||fffd||fffd||fffd|RoundUp|fffd||193||fffd||fffd||fffd||fffd|g|fffd|p|fffd||fffd||fffd|@|fffd|B\n|fffd|v|fffd|Z|fffd||fffd|Decimal|fffd|^|fffd||14d|s|fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B|fffd||fffd||fffd||fffd||fffd||352|x|fffd||fffd||fffd||142||fffd||fffd|B"
Attribute rlxRoundUp.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim work As Variant
    Dim work2 As Variant

    work = Int(CDec(|fffd||fffd||fffd|l) * (10 ^ |fffd||fffd||fffd||fffd|))
    work2 = CDec(|fffd||fffd||fffd|l) * (10 ^ |fffd||fffd||fffd||fffd|)
    
    '|fffd||fffd||fffd||fffd||fffd|_|fffd||209||fffd||fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||fffd||a347|
    If work = work2 Then
    Else
        work = work + 1
    End If
    
    rlxRoundUp = work / 10 ^ |fffd||fffd||fffd||fffd|

End Function
'--------------------------------------------------------------
'|fffd|@Luhn|fffd|A|fffd||fffd||fffd|S|fffd||fffd||fffd|Y|fffd||fffd||fffd|iISO/IEC 7812-1|fffd|j
'|fffd|@|fffd|N|fffd||fffd||fffd|W|fffd|b|fffd|g|fffd|J|fffd|[|fffd|h|fffd||50d||fffd||fffd||303|`|fffd|F|fffd|b|fffd|N
'--------------------------------------------------------------
Function rlxIsLuhn(ByVal strNo As String) As Boolean
Attribute rlxIsLuhn.VB_Description = "Luhn|fffd|A|fffd||fffd||fffd|S|fffd||fffd||fffd|Y|fffd||fffd|(|fffd|N|fffd||fffd||fffd|W|fffd|b|fffd|g|fffd|J|fffd|[|fffd|h|fffd||50d||fffd||fffd||202||1c1|j|fffd||fffd|\n|fffd|`|fffd|F|fffd|b|fffd|N|fffd|f|fffd|B|fffd|W|fffd|b|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||a347|true|fffd||fffd||50b|p|fffd||fffd||fffd||702||fffd||fffd|B"
Attribute rlxIsLuhn.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim lngLen As Long
    Dim lngOdd As Long
    Dim lngEvn As Long
    
    Dim i As Long
    
    Dim lngAns As Long
    
    Dim strCheckDigit As String
    
    lngLen = Len(strNo)
    lngOdd = 0
    lngEvn = 0

    If lngLen < 2 Then
        rlxIsLuhn = False
        Exit Function
    End If
    
    If rlxIsNumber(strNo) Then
    Else
        rlxIsLuhn = False
        Exit Function
    End If
    
    For i = 1 To lngLen
    
        If (i Mod 2) = 1 Then
            '|fffd||f414||fffd||fffd||fffd||302||742||fffd||fffd||fffd||fffd|Z|fffd|i|fffd|`|fffd|F|fffd|b|fffd|N|fffd|f|fffd|B|fffd|W|fffd|b|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd||fffd|j
            lngOdd = lngOdd + Val(Mid$(strNo, lngLen - i + 1, 1))
        Else
            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||302||742||fffd||fffd||fffd||fffd|Z
            Dim lngWork As Long
            lngWork = Val(Mid$(strNo, lngLen - i + 1, 1)) * 2
            lngEvn = lngEvn + Fix(lngWork / 10) + lngWork Mod 10
        End If
    
    Next

    lngAns = (lngOdd + lngEvn) Mod 10

    If lngAns = 0 Then
        rlxIsLuhn = True
    Else
        rlxIsLuhn = False
    End If

End Function
'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd|W|fffd||fffd||fffd||fffd||fffd|X|fffd|P|fffd|O/|fffd|E|fffd|F|fffd|C|fffd|g3-1
'--------------------------------------------------------------
Function rlxIsModulus10(ByVal strNo As String) As Boolean
Attribute rlxIsModulus10.VB_Description = "|fffd||fffd||fffd|W|fffd||fffd||fffd||fffd||fffd|X10|fffd|E|fffd|F|fffd|C|fffd|g3-1/JAN/EAN/ISBN13|fffd||fffd|\n|fffd|`|fffd|F|fffd|b|fffd|N|fffd|f|fffd|B|fffd|W|fffd|b|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||a347|true|fffd||fffd||50b|p|fffd||fffd||fffd||702||fffd||fffd|B"
Attribute rlxIsModulus10.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim lngLen As Long
    Dim lngOdd As Long
    Dim lngEvn As Long
    
    Dim i As Long
    
    Dim lngAns As Long
    
    Dim lngCheckDigit As Long
    
    lngLen = Len(strNo)
    lngOdd = 0
    lngEvn = 0
    
    If lngLen < 2 Then
        rlxIsModulus10 = False
        Exit Function
    End If
    
    If rlxIsNumber(strNo) Then
    Else
        rlxIsModulus10 = False
        Exit Function
    End If

    For i = 1 To lngLen
    
        If i = 1 Then
            lngCheckDigit = Val(Mid$(strNo, lngLen - i + 1, 1))
        Else
            If (i Mod 2) = 1 Then
                '|fffd||f414||fffd||fffd||fffd||302||742||fffd||fffd||fffd||fffd|Z|fffd|i|fffd|`|fffd|F|fffd|b|fffd|N|fffd|f|fffd|B|fffd|W|fffd|b|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd||fffd|j
                lngOdd = lngOdd + Val(Mid$(strNo, lngLen - i + 1, 1))
            Else
                '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||302||742||fffd||fffd||fffd||fffd|Z
                lngEvn = lngEvn + Val(Mid$(strNo, lngLen - i + 1, 1))
            End If
        End If
    Next

    '|fffd||f414||fffd||309||fffd||fffd|Z|fffd||18b||fffd||fffd||fffd||fffd||309||fffd||fffd|Z|fffd||fffd||fffd|R|fffd|{|fffd||fffd||fffd||fffd||fffd||fffd||fffd||302||fffd||fffd||fffd||fffd|Z|fffd|B|fffd||fffd||fffd|P|fffd||fffd||fffd||fffd||fffd|P|fffd|O|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    lngAns = 10 - (lngOdd + lngEvn * 3) Mod 10

    If lngAns = lngCheckDigit Then
        rlxIsModulus10 = True
    Else
        rlxIsModulus10 = False
    End If

End Function
'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd|W|fffd||fffd||fffd||fffd||fffd|X|fffd|P|fffd|P|fffd|E|fffd|F|fffd|C|fffd|g10-2
'--------------------------------------------------------------
Function rlxIsModulus11_10_2(ByVal strNo As String) As Boolean
Attribute rlxIsModulus11_10_2.VB_Description = "|fffd||fffd||fffd|W|fffd||fffd||fffd||fffd||fffd|X11|fffd|E|fffd|F|fffd|C|fffd|g10-2/ISBN10|fffd||fffd|\n|fffd|`|fffd|F|fffd|b|fffd|N|fffd|f|fffd|B|fffd|W|fffd|b|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||a347|true|fffd||fffd||50b|p|fffd||fffd||fffd||702||fffd||fffd|B"
Attribute rlxIsModulus11_10_2.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim lngLen As Long
    Dim lngWork As Long
    Dim lngWeight As Long
    
    Dim i As Long
    
    Dim lngAns As Long
    
    Dim lngCheckDigit As Long
    
    lngLen = Len(strNo)
    lngWork = 0
    
    If lngLen < 2 Then
        rlxIsModulus11_10_2 = False
        Exit Function
    End If

    For i = 1 To lngLen
    
        If i = 1 Then
            lngCheckDigit = xVal(Mid$(strNo, lngLen - i + 1, 1))
        Else
            Select Case (i Mod 9)
                Case 2
                    lngWeight = 2
                Case 3
                    lngWeight = 3
                Case 4
                    lngWeight = 4
                Case 5
                    lngWeight = 5
                Case 6
                    lngWeight = 6
                Case 7
                    lngWeight = 7
                Case 8
                    lngWeight = 8
                Case 0
                    lngWeight = 9
                Case 1
                    lngWeight = 10
            End Select
            lngWork = lngWork + (Val(Mid$(strNo, lngLen - i + 1, 1)) * i)
        End If
    Next

    lngAns = (11 - (lngWork Mod 11)) Mod 11


    If lngAns = lngCheckDigit Then
        rlxIsModulus11_10_2 = True
    Else
        rlxIsModulus11_10_2 = False
    End If

End Function
'--------------------------------------------------------------
'|fffd|@ISBN|fffd|R|fffd|[|fffd|h|fffd||143|`|fffd|F|fffd|b|fffd|N|fffd|f|fffd|B|fffd|W|fffd|b|fffd|g|fffd||fffd||fffd|w|fffd||242||202||fffd||fffd||fffd||fffd||a347||fffd||315||3ca||fffd||fffd|B
'--------------------------------------------------------------
Private Function xVal(ByVal strNo) As Long
    If LCase(strNo) = "x" Then
        xVal = 10
    Else
        xVal = Val(strNo)
    End If
End Function
'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd|W|fffd||fffd||fffd||fffd||fffd|X|fffd|P|fffd|P|fffd|E|fffd|F|fffd|C|fffd|g2-7
'--------------------------------------------------------------
Function rlxIsModulus11_2_7(ByVal strNo As String) As Boolean
Attribute rlxIsModulus11_2_7.VB_Description = "|fffd||fffd||fffd|W|fffd||fffd||fffd||fffd||fffd|X11/|fffd|n|fffd||fffd||fffd||fffd||fffd||fffd||fffd|c|fffd||303|R|fffd|[|fffd|h|fffd||fffd|\n|fffd|`|fffd|F|fffd|b|fffd|N|fffd|f|fffd|B|fffd|W|fffd|b|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||a347|true|fffd||fffd||50b|p|fffd||fffd||fffd||702||fffd||fffd|B"
Attribute rlxIsModulus11_2_7.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim lngLen As Long
    Dim lngWork As Long
    Dim lngWeight As Long
    
    Dim i As Long
    
    Dim lngAns As Long
    
    Dim lngCheckDigit As Long
    
    lngLen = Len(strNo)
    lngWork = 0
    
    If lngLen < 2 Then
        rlxIsModulus11_2_7 = False
        Exit Function
    End If
    
    If rlxIsNumber(strNo) Then
    Else
        rlxIsModulus11_2_7 = False
        Exit Function
    End If

    For i = 1 To lngLen
    
        If i = 1 Then
            lngCheckDigit = Val(Mid$(strNo, lngLen - i + 1, 1))
        Else
            Select Case (i Mod 6)
                Case 2
                    lngWeight = 2
                Case 3
                    lngWeight = 3
                Case 4
                    lngWeight = 4
                Case 5
                    lngWeight = 5
                Case 0
                    lngWeight = 6
                Case 1
                    lngWeight = 7
            End Select
            lngWork = lngWork + (Val(Mid$(strNo, lngLen - i + 1, 1)) * lngWeight)
        End If
    Next

    lngAns = (11 - (lngWork Mod 11))

    If lngAns = lngCheckDigit Then
        rlxIsModulus11_2_7 = True
    Else
        rlxIsModulus11_2_7 = False
    End If

End Function
'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd|W|fffd||fffd||fffd||fffd||fffd|X11/|fffd|n|fffd||fffd||fffd||fffd||fffd||fffd||fffd|c|fffd||303|R|fffd|[|fffd|h
'--------------------------------------------------------------
Function rlxIsModulus11_Pref(ByVal strNo As String) As Boolean
Attribute rlxIsModulus11_Pref.VB_Description = "|fffd||fffd||fffd|W|fffd||fffd||fffd||fffd||fffd|X11|fffd|E|fffd|F|fffd|C|fffd|g2-7/NW-7/|fffd||18b||fffd||fffd||614||50d||fffd|1|fffd|`11|fffd||fffd|\n|fffd|`|fffd|F|fffd|b|fffd|N|fffd|f|fffd|B|fffd|W|fffd|b|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||a347|true|fffd||fffd||50b|p|fffd||fffd||fffd||702||fffd||fffd|B"
Attribute rlxIsModulus11_Pref.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim lngLen As Long
    Dim lngWork As Long
    Dim lngMod As Long
    
    Dim i As Long
    
    Dim lngAns As Long
    
    Dim lngCheckDigit As Long
    
    lngLen = Len(strNo)
    lngWork = 0
    
    If lngLen < 2 Then
        rlxIsModulus11_Pref = False
        Exit Function
    End If
    
    If rlxIsNumber(strNo) Then
    Else
        rlxIsModulus11_Pref = False
        Exit Function
    End If
    
    For i = 1 To lngLen
    
        If i = 1 Then
            lngCheckDigit = Val(Mid$(strNo, lngLen - i + 1, 1))
        Else
            lngWork = lngWork + (Val(Mid$(strNo, lngLen - i + 1, 1)) * i)
        End If
    Next

    lngMod = lngWork Mod 11
    Select Case lngMod
        Case 0
            lngAns = 1
        Case 1
            lngAns = 0
        Case Else
            lngAns = 11 - lngMod
    End Select

    If lngAns = lngCheckDigit Then
        rlxIsModulus11_Pref = True
    Else
        rlxIsModulus11_Pref = False
    End If

End Function
'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N
'--------------------------------------------------------------
Function rlxIsNumber(ByVal strNo As String) As Boolean
Attribute rlxIsNumber.VB_Description = "|fffd||fffd||fffd||fffd||fffd||302||742||30f||a347|true|fffd||fffd||50b|p|fffd||fffd||fffd||702||fffd||fffd|B"
Attribute rlxIsNumber.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim lngLen As Long
    Dim i As Long
    
    rlxIsNumber = True
    
    lngLen = Len(strNo)
    
    For i = 1 To lngLen
    
        Select Case Mid(strNo, i, 1)
            Case "0" To "9"
            Case Else
                rlxIsNumber = False
                Exit Function
        End Select
    Next

End Function
'--------------------------------------------------------------
'|fffd|@|fffd|p|fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N
'--------------------------------------------------------------
Function rlxIsAlphabet(ByVal strNo As String) As Boolean
Attribute rlxIsAlphabet.VB_Description = "|fffd|p|fffd||fffd||fffd||302||742||30f||a347|true|fffd||fffd||50b|p|fffd||fffd||fffd||702||fffd||fffd|B"
Attribute rlxIsAlphabet.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim lngLen As Long
    Dim i As Long
    
    rlxIsAlphabet = True
    
    lngLen = Len(strNo)
    
    For i = 1 To lngLen
    
        Select Case Mid(strNo, i, 1)
            Case "A" To "Z"
            Case "a" To "z"
            Case Else
                rlxIsAlphabet = False
                Exit Function
        End Select
    Next

End Function
'--------------------------------------------------------------
'|fffd|@|fffd|p|fffd||fffd||fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N
'--------------------------------------------------------------
Function rlxIsAlphaAndNum(ByVal strNo As String) As Boolean
Attribute rlxIsAlphaAndNum.VB_Description = "|fffd|p|fffd||fffd||fffd||fffd||fffd||302||742||30f||a347|true|fffd||fffd||50b|p|fffd||fffd||fffd||702||fffd||fffd|B"
Attribute rlxIsAlphaAndNum.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim lngLen As Long
    Dim i As Long
    
    rlxIsAlphaAndNum = True
    
    lngLen = Len(strNo)
    
    For i = 1 To lngLen
    
        Select Case Mid(strNo, i, 1)
            Case "0" To "9"
            Case "A" To "Z"
            Case "a" To "z"
            Case Else
                rlxIsAlphaAndNum = False
                Exit Function
        End Select
    Next

End Function
'--------------------------------------------------------------
'  |fffd|g|fffd|s|fffd|l|fffd|k|fffd||fffd||fffd||fffd||fffd||fffd||303|T|fffd|j|fffd|^|fffd|C|fffd|W|fffd||fffd||fffd|O|fffd||fffd||fffd|s|fffd||fffd||fffd|B
'--------------------------------------------------------------
Public Function rlxHtmlSanitizing(ByVal strBuf As String) As String
Attribute rlxHtmlSanitizing.VB_Description = "|fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||590||fffd||fffd||182||fffd||fffd||10e|g|fffd|p|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
Attribute rlxHtmlSanitizing.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim strRep As String

    strRep = Replace(strBuf, """", "&quot;")
    strRep = Replace(strRep, "&", "&amp;")
    strRep = Replace(strRep, "<", "&lt;")
    rlxHtmlSanitizing = Replace(strRep, ">", "&gt;")

End Function
'--------------------------------------------------------------
'  |fffd||752||fffd||30e||64fe||fffd|i|fffd||fffd||fffd||fffd||fffd|s|fffd|j
'--------------------------------------------------------------
Function rlxGetSetting(ByVal strApp As String, ByVal strMacro As String, ByVal strkey As String, ByVal strDefault As String) As String
Attribute rlxGetSetting.VB_Description = "|fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||590||fffd||fffd||182||fffd||fffd||10e|g|fffd|p|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
Attribute rlxGetSetting.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim strBuf As String
    Dim i As Long
    Dim strRet As String

    strBuf = GetSetting(strApp, strMacro, strkey, strDefault)
    If strBuf = "" Then
        strRet = ""
        i = 0
        strBuf = GetSetting(strApp, strMacro, strkey & Format$(i, "000"), strDefault)
        Do Until strBuf = ""
            If strBuf <> "" Then
                If strRet = "" Then
                    strRet = strBuf
                Else
                    strRet = strRet & vbTab & strBuf
                End If
            End If
            i = i + 1
            strBuf = GetSetting(strApp, strMacro, strkey & Format$(i, "000"), strDefault)
        Loop
    Else
        strRet = strBuf
    End If
    
    rlxGetSetting = strRet

End Function
'--------------------------------------------------------------
'  |fffd||752||fffd||315||6d1||fffd||fffd|i|fffd||fffd||fffd||fffd||fffd|s|fffd|j
'--------------------------------------------------------------
Sub rlxSaveSetting(ByVal strApp As String, ByVal strMacro As String, ByVal strkey As String, ByVal strValue As String)
Attribute rlxSaveSetting.VB_Description = "|fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||590||fffd||fffd||182||fffd||fffd||10e|g|fffd|p|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
Attribute rlxSaveSetting.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim strBuf() As String
    Dim i As Long
    Dim lngCnt As Long
    
    '|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd|S|fffd||d3dc|
    rlxDeleteSetting strApp, strMacro, strkey
    
    strBuf = Split(strValue, vbTab)
    lngCnt = 0
    For i = LBound(strBuf) To UBound(strBuf)
        SaveSetting strApp, strMacro, strkey & Format$(i, "000"), strBuf(i)
    Next
    On Error Resume Next
    DeleteSetting strApp, strMacro, strkey

End Sub
'--------------------------------------------------------------
'  |fffd||752||fffd||30d||d3dc||fffd|i|fffd||fffd||fffd||fffd||fffd|s|fffd|j
'--------------------------------------------------------------
Sub rlxDeleteSetting(ByVal strApp As String, ByVal strMacro As String, ByVal strkey As String)
Attribute rlxDeleteSetting.VB_Description = "|fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||590||fffd||fffd||182||fffd||fffd||10e|g|fffd|p|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
Attribute rlxDeleteSetting.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim i As Long
    
    i = 0
    On Error Resume Next
    err.Clear
    Do
        DeleteSetting strApp, strMacro, strkey & Format$(i, "000")
        i = i + 1
    Loop While err.Number = 0

End Sub
'--------------------------------------------------------------
'  |fffd|R|fffd||fffd||fffd|N|fffd|V|fffd||fffd||fffd||fffd||fffd||303|\|fffd|[|fffd|g
'--------------------------------------------------------------
Public Sub rlxSortCollection(ByRef col As Collection)

    Dim i As Long
    Dim j As Long
    Dim n As Long
    Dim key1 As String
    Dim key2 As String
    Dim col2 As Collection
    Dim strkey() As String
    Dim wk As String

    'Collection|fffd||fffd||fffd||fffd||202||fffd||202||242||fffd||fffd||fffd||fffd||202||fffd|
    If col Is Nothing Then
        Exit Sub
    End If

    'Collection|fffd||317|v|fffd|f|fffd||fffd||fffd||fffd||fffd|O|fffd||702||fffd||fffd||342|P|fffd||30f||a347||fffd|\|fffd|[|fffd|g|fffd|s|fffd|v
    If col.count <= 1 Then
        Exit Sub
    End If

    n = col.count
    ReDim strkey(1 To n)

    For i = 1 To n
        strkey(i) = col.Item(i).name
    Next

'|fffd|o|fffd|u|fffd||fffd||fffd|\|fffd|[|fffd|g
'    For i = 1 To n - 1
'        For j = i + 1 To n
'
'            key1 = strKey(i)
'            key2 = strKey(j)
'
'            If key1 > key2 Then
'                wk = strKey(i)
'                strKey(i) = strKey(j)
'                strKey(j) = wk
'            End If
'
'        Next
'    Next
'|fffd|}|fffd||fffd||fffd|\|fffd|[|fffd|g
    For i = 2 To n

        wk = strkey(i)

        If strkey(i - 1) > wk Then

            j = i

            Do

                strkey(j) = strkey(j - 1)

                j = j - 1

                If j = 1 Then
                    Exit Do
                End If

            Loop While strkey(j - 1) > wk
            strkey(j) = wk

        End If
    Next

    Set col2 = New Collection

    For i = 1 To n
        col2.Add col.Item(strkey(i)), col.Item(strkey(i)).name
    Next

    Set col = col2
    Set col2 = Nothing

End Sub

'|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||243|e|fffd|L|fffd|X|fffd|g|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||783|v|fffd||fffd||fffd|V|fffd|[|fffd|W|fffd||fffd|
Public Sub SetClipText(strData As String)

#If VBA7 And Win64 Then
  Dim lngHwnd As LongPtr, lngMEM As LongPtr
  Dim lngDataLen As LongPtr
  Dim lngret As LongPtr
#Else
  Dim lngHwnd As Long, lngMEM As Long
  Dim lngDataLen As Long
  Dim lngret As Long
#End If
  Dim blnErrflg As Boolean
  Const GMEM_MOVEABLE = 2

  blnErrflg = True
  
  '|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||fffd||fffd|I|fffd|[|fffd|v|fffd||fffd|
  If OpenClipboard(0&) <> 0 Then
  
    '|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||fffd||fffd||fffd||242||fffd||fffd||fffd|
    If EmptyClipboard() <> 0 Then
    
        '|fffd|O|fffd||fffd||fffd|[|fffd|o|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||24f||fffd||fffd||fffd||fffd||fffd||fffd||797||308||fffd||fffd||fffd|m|fffd||6c2||fffd||fffd||102||fffd||fffd||303|n|fffd||fffd||fffd|h|fffd||fffd||fffd||fffd||fffd||64fe|
        lngDataLen = LenB(strData) + 1
        
        lngHwnd = GlobalAlloc(GMEM_MOVEABLE, lngDataLen)
        
        If lngHwnd <> 0 Then
      
            '|fffd|O|fffd||fffd||fffd|[|fffd|o|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|b|fffd|N|fffd||fffd||fffd||102||fffd||fffd||303|||fffd|C|fffd||fffd||fffd|^|fffd||fffd||fffd||64fe|
            lngMEM = GlobalLock(lngHwnd)
            
            If lngMEM <> 0 Then
        
                '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||783|e|fffd|L|fffd|X|fffd|g|fffd||fffd||fffd|O|fffd||fffd||fffd|[|fffd|o|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||243|R|fffd|s|fffd|[
                If lstrcpy(lngMEM, strData) <> 0 Then
                    '|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||243||fffd||fffd||fffd||fffd||fffd||fffd|u|fffd||fffd||fffd|b|fffd|N|fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    lngret = SetClipboardData(CF_TEXT, lngHwnd)
                    blnErrflg = False
                End If
                '|fffd|O|fffd||fffd||fffd|[|fffd|o|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|u|fffd||fffd||fffd|b|fffd|N|fffd||303||fffd||fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||fffd|
                lngret = GlobalUnlock(lngHwnd)
            End If
        End If
    End If
    '|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||fffd||fffd|N|fffd||fffd||fffd|[|fffd|Y(|fffd||fffd||fffd||fffd||fffd|Windows|fffd||250||fffd||fffd||40aa|
    '|fffd||7c2||fffd||202||fffd||fffd||fffd||fffd||fffd||fffd||242||142||fffd||fffd||fffd||fffd||fffd||846c||fffd||20a9||fffd||24d|s|fffd||fffd|)
    lngret = CloseClipboard()
  End If

  If blnErrflg Then MsgBox "|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||24f||fffd||42a8f||fffd||fffd||fffd||fffd||fffd||fffd||7c2||702||fffd||fffd||fffd|", vbOKOnly, C_TITLE

End Sub

'|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||243|e|fffd|L|fffd|X|fffd|g|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||783|v|fffd||fffd||fffd|V|fffd|[|fffd|W|fffd||fffd|
Public Sub SetCopyClipText(strBuf() As String)

#If VBA7 And Win64 Then
    Dim lngHwnd As LongPtr, lngMEM As LongPtr
    Dim lngDataLen As LongPtr
    Dim lngret As LongPtr
#Else
    Dim lngHwnd As Long, lngMEM As Long
    Dim lngDataLen As Long
    Dim lngret As Long
#End If

    Dim blnErrflg As Boolean
    Const GMEM_MOVEABLE = 2
    
    Dim df As DROPFILES
    
    Dim strData As String
    Dim i As Long
    
    For i = LBound(strBuf) To UBound(strBuf)
    
        strData = strData & strBuf(i) & vbNullChar
    
    Next
    strData = strData & vbNullChar

    blnErrflg = True
  
    '|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||fffd||fffd|I|fffd|[|fffd|v|fffd||fffd|
    If OpenClipboard(0&) <> 0 Then
  
        '|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||fffd||fffd||fffd||242||fffd||fffd||fffd|
        If EmptyClipboard() <> 0 Then
    
            '|fffd|O|fffd||fffd||fffd|[|fffd|o|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||24f||fffd||fffd||fffd||fffd||fffd||fffd||797||308||fffd||fffd||fffd|m|fffd||6c2||fffd||fffd||102||fffd||fffd||303|n|fffd||fffd||fffd|h|fffd||fffd||fffd||fffd||fffd||64fe|
            lngDataLen = LenB(strData) + LenB(df) + 1024
            
            lngHwnd = GlobalAlloc(GMEM_MOVEABLE, lngDataLen)
            
            If lngHwnd <> 0 Then
            
                '|fffd|O|fffd||fffd||fffd|[|fffd|o|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|b|fffd|N|fffd||fffd||fffd||102||fffd||fffd||303|||fffd|C|fffd||fffd||fffd|^|fffd||fffd||fffd||64fe|
                lngMEM = GlobalLock(lngHwnd)
                
                If lngMEM <> 0 Then
                
                    df.pFiles = LenB(df)
            
                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||783|e|fffd|L|fffd|X|fffd|g|fffd||fffd||fffd|O|fffd||fffd||fffd|[|fffd|o|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||243|R|fffd|s|fffd|[
                    CopyMemory ByVal lngMEM, df, LenB(df)
                    CopyMemory ByVal (lngMEM + LenB(df)), ByVal strData, LenB(strData)
                    
                    '|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||243||fffd||fffd||fffd||fffd||fffd||fffd|u|fffd||fffd||fffd|b|fffd|N|fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    lngret = SetClipboardData(CF_HDROP, lngHwnd)
                    blnErrflg = False
                
                    '|fffd|O|fffd||fffd||fffd|[|fffd|o|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|u|fffd||fffd||fffd|b|fffd|N|fffd||303||fffd||fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||fffd|
                    lngret = GlobalUnlock(lngHwnd)
                    
                End If
                
            End If
            
        End If
        
        '|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||fffd||fffd|N|fffd||fffd||fffd|[|fffd|Y(|fffd||fffd||fffd||fffd||fffd|Windows|fffd||250||fffd||fffd||40aa|
        '|fffd||7c2||fffd||202||fffd||fffd||fffd||fffd||fffd||fffd||242||142||fffd||fffd||fffd||fffd||fffd||846c||fffd||20a9||fffd||24d|s|fffd||fffd|)
        lngret = CloseClipboard()
    End If
    
    If blnErrflg Then MsgBox "|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||24f||fffd||42a8f||fffd||fffd||fffd||fffd||fffd||fffd||7c2||702||fffd||fffd||fffd|", vbOKOnly, C_TITLE

End Sub
Function rlxSetLimit(ByVal l As Long, ByVal h As Long, ByVal lngVal As Long) As Long
Attribute rlxSetLimit.VB_Description = "|fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||590||fffd||fffd||182||fffd||fffd||10e|g|fffd|p|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
Attribute rlxSetLimit.VB_ProcData.VB_Invoke_Func = " \n19"

    If lngVal < l Then
        lngVal = l
    End If
    
    If lngVal > h Then
        lngVal = h
    End If

    rlxSetLimit = lngVal

End Function
Sub setIndent(ByRef r As Range, ByVal lngIndent As Long)
    If lngIndent <> 0 Then
        If r.IndentLevel = 0 And lngIndent = -1 Then
        Else
'            r.InsertIndent lngIndent
            r.IndentLevel = r.IndentLevel + lngIndent
        End If
    End If
End Sub

Public Function rlxArabic(ByVal strRoman As String) As Long
Attribute rlxArabic.VB_Description = "|fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||590||fffd||fffd||182||fffd||fffd||10e|g|fffd|p|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
Attribute rlxArabic.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim lngret As Long

    Select Case LCase(strRoman)
        Case "i"
            lngret = 1
        Case "ii"
            lngret = 2
        Case "iii"
            lngret = 3
        Case "iv"
            lngret = 4
        Case "v"
            lngret = 5
        Case "vi"
            lngret = 6
        Case "vii"
            lngret = 7
        Case "viii"
            lngret = 8
        Case "ix"
            lngret = 9
        Case "x"
            lngret = 10
        Case "xi"
            lngret = 11
        Case "xii"
            lngret = 12
        Case "xiii"
            lngret = 13
        Case "xiv"
            lngret = 14
        Case "xv"
            lngret = 15
        Case "xvi"
            lngret = 16
        Case "xvii"
            lngret = 17
        Case "xviii"
            lngret = 18
        Case "xix"
            lngret = 19
        Case "xx"
            lngret = 20
    End Select

    rlxArabic = lngret

End Function


Public Function rlxRoman(ByVal lngRoman As Long) As String
Attribute rlxRoman.VB_Description = "|fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||590||fffd||fffd||182||fffd||fffd||10e|g|fffd|p|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
Attribute rlxRoman.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim strRet As String

    Select Case lngRoman
        Case 1
            strRet = "i"
        Case 2
            strRet = "ii"
        Case 3
            strRet = "iii"
        Case 4
            strRet = "iv"
        Case 5
            strRet = "v"
        Case 6
            strRet = "vi"
        Case 7
            strRet = "vii"
        Case 8
            strRet = "viii"
        Case 9
            strRet = "ix"
        Case 10
            strRet = "x"
        Case 11
            strRet = "xi"
        Case 12
            strRet = "xii"
        Case 13
            strRet = "xiii"
        Case 14
            strRet = "xiv"
        Case 15
            strRet = "xv"
        Case 16
            strRet = "xvi"
        Case 17
            strRet = "xvii"
        Case 18
            strRet = "xviii"
        Case 19
            strRet = "xix"
        Case 20
            strRet = "xx"
    End Select
    
    rlxRoman = strRet

End Function


Public Function rlxGetColorDlg(lngDefColor As Long) As Long
Attribute rlxGetColorDlg.VB_Description = "|fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||590||fffd||fffd||182||fffd||fffd||10e|g|fffd|p|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
Attribute rlxGetColorDlg.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim lngBackColor As Long
    Dim lngRed As Long
    Dim lngGreen As Long
    Dim lngBlue As Long
    Dim strColor As String
    
    strColor = Right$("000000" & Hex(lngDefColor), 6)
    lngRed = CLng("&H" & Mid$(strColor, 5, 2))
    lngGreen = CLng("&H" & Mid$(strColor, 3, 2))
    lngBlue = CLng("&H" & Mid$(strColor, 1, 2))
    
    If ActiveWorkbook Is Nothing Then
        rlxGetColorDlg = -2
        Exit Function
    End If
    
    lngBackColor = ActiveWorkbook.Colors(1)
    If Application.Dialogs(xlDialogEditColor).Show(1, lngRed, lngGreen, lngBlue) Then
        rlxGetColorDlg = ActiveWorkbook.Colors(1)
        ActiveWorkbook.Colors(1) = lngBackColor
    Else
        rlxGetColorDlg = -1
    End If

End Function
Public Function rlxGetFileNameFromCli() As String
Attribute rlxGetFileNameFromCli.VB_Description = "|fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||590||fffd||fffd||182||fffd||fffd||10e|g|fffd|p|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
Attribute rlxGetFileNameFromCli.VB_ProcData.VB_Invoke_Func = " \n19"

#If VBA7 And Win64 Then
    Dim hData As LongPtr
#Else
    Dim hData As Long
#End If
    Dim files As Long
    Dim r As Long
    Dim i As Long
    Dim strFilePath As String
    Dim ret As String
    Const DEF_FILE_PATH_MAX_SIZE As Long = 1024 + 1
    
    If OpenClipboard(0) <> 0 Then
   
        hData = GetClipboardData(CF_HDROP)
        If Not IsNull(hData) Then
            files = DragQueryFile(hData, &HFFFFFFFF, 0, 0)
            For i = 0 To files - 1 Step 1
                strFilePath = String(DEF_FILE_PATH_MAX_SIZE, vbNullChar)
                Call DragQueryFile(hData, i, strFilePath, DEF_FILE_PATH_MAX_SIZE)
                If i = 0 Then
                    ret = Mid$(strFilePath, 1, InStr(strFilePath, vbNullChar) - 1)
                Else
                    ret = ret & vbTab & Mid$(strFilePath, 1, InStr(strFilePath, vbNullChar) - 1)
                End If
            Next
        End If
        r = CloseClipboard()
    
    End If
        rlxGetFileNameFromCli = ret
    
End Function


Function rlxIsExcelFile(ByVal strFile As String) As Boolean
Attribute rlxIsExcelFile.VB_Description = "|fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||590||fffd||fffd||182||fffd||fffd||10e|g|fffd|p|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
Attribute rlxIsExcelFile.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim varExt As Variant
    Dim i As Long
    rlxIsExcelFile = False
    
    varExt = Array(".XLSX", ".XLSM", ".XLS", ".XLB")

    For i = LBound(varExt) To UBound(varExt)
    
        If InStr(UCase(strFile), varExt(i)) > 0 Then
            rlxIsExcelFile = True
            Exit For
        End If
    
    Next

End Function
Sub rlxFlashWindow()

#If VBA7 And Win64 Then
    Dim hWnd As LongPtr
#Else
    Dim hWnd As Long
#End If
    Dim udtFLASHWINFO As FLASHWINFO
    
    Const FLASH_STOP = &H0
    Const FLASH_CAPTION = &H1
    Const FLASH_TRAY = &H2
    Const FLASH_ALL = FLASH_CAPTION Or FLASH_TRAY
    Const FLASH_TIMER = &H4
    Const FLASH_TIMERNOFG = &HC

    hWnd = FindWindow("XLMAIN", Application.Caption)
    
    '|fffd|_|fffd||142||310||752||fffd|
    With udtFLASHWINFO
        .cbSize = Len(udtFLASHWINFO)
        .hWnd = hWnd
        .dwFlags = FLASH_ALL
        .uCount = 5
        .dwTimeout = 100
    End With

    '|fffd|_|fffd||14e||fffd||fffd|s
    Call FlashWindowEx(udtFLASHWINFO)
    
End Sub
'--------------------------------------------------------------
'|fffd|@|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd|b|fffd|Z|fffd|[|fffd|W|fffd|\|fffd||fffd|
'--------------------------------------------------------------
Sub rlxErrMsg(ByRef objErr As Object)

    Select Case objErr.Number
        Case 0
        Case 1004
            MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||142||fffd||fffd|B|fffd|V|fffd|[|fffd|g|fffd||6cc||fffd||202||1c2||fffd||fffd|m|fffd|F|fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbCritical + vbOKOnly, C_TITLE
        Case Else
            MsgBox objErr.Description & "(" & err.Number & ")", vbCritical + vbOKOnly, C_TITLE
    End Select

End Sub
' // |fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||303|r|fffd|b|fffd|g|fffd|}|fffd|b|fffd|v|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd| Picture |fffd|I|fffd|u|fffd|W|fffd|F|fffd|N|fffd|g|fffd||fffd||fffd||c42c|
Public Function CreatePictureFromClipboard(o As Object) As StdPicture
  
#If VBA7 And Win64 Then
    Dim hImg      As LongPtr
    Dim hPalette As LongPtr
    Dim hCopy As LongPtr
#Else
    Dim hImg      As Long
    Dim hPalette As Long
    Dim hCopy As Long
#End If
    
    Dim uPictDesc As PictDesc
    Dim uGUID     As GUID
    
    Set CreatePictureFromClipboard = Nothing
  
    Dim c As New Collection
    
    '|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||315||6d1||fffd|
'    SaveClipData c
  
    '|fffd|w|fffd||fffd|V|fffd|F|fffd|C|fffd|v|fffd||fffd||fffd|r|fffd|b|fffd|g|fffd|}|fffd|b|fffd|v|fffd||143|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||253|\|fffd||fffd|t|fffd||fffd|
    o.CopyPicture Appearance:=xlScreen, Format:=xlBitmap
    
    If IsClipboardFormatAvailable(CF_BITMAP) <> 0 Then
    
        If OpenClipboard(0&) <> 0 Then
            
            hImg = GetClipboardData(CF_BITMAP)
        
            If hImg <> 0 Then
          
                hCopy = CopyImage(hImg, IMAGE_BITMAP, 0, 0, LR_COPYRETURNORG)
                
                With uPictDesc
                    .cbSizeofStruct = Len(uPictDesc)
                    .picType = 1
                    .hImage = hCopy
                    .Option1 = 0&
                End With
                
                With uGUID
                    .Data1 = &H20400
                    .Data4(0) = &HC0
                    .Data4(7) = &H46
                End With
                
    '            Call OleCreatePictureIndirect(uPictDesc, uGUID, 0&, CreatePictureFromClipboard)
                Call OleCreatePictureIndirect(uPictDesc, uGUID, True, CreatePictureFromClipboard)
            
                Call EmptyClipboard
                
            End If
            
            Call CloseClipboard
        End If
        
    End If
    
    '|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||315||fffd||fffd||fffd|
'    RestoreClipData c

End Function
'|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||243|f|fffd|[|fffd|^|fffd||fffd||6d1||fffd||fffd||fffd||fffd||fffd|v|fffd||fffd||fffd|V|fffd|[|fffd|W|fffd||fffd|
Public Sub SaveClipData(c As Collection)

#If VBA7 And Win64 Then
    Dim lngHwnd As LongPtr
    Dim lngMEM As LongPtr
    Dim lngDst As LongPtr
    Dim lngSrc As LongPtr
    Dim lngDataLen As LongPtr
    Dim lngret As LongPtr
#Else
    Dim lngHwnd As Long
    Dim lngMEM As Long
    Dim lngDst As Long
    Dim lngSrc As Long
    Dim lngDataLen As Long
    Dim lngret As Long
#End If
    Const GMEM_MOVEABLE = 2
    Dim lngFormatID As Long
    Dim s As ClipDataDTO

    '|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||fffd||fffd|I|fffd|[|fffd|v|fffd||fffd|
    If OpenClipboard(0&) <> 0 Then
  
        lngFormatID = EnumClipboardFormats(0)
        
        Do Until lngFormatID = 0
        
            '|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||24e|w|fffd||fffd||30c|`|fffd||fffd||fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||90a9|
            If IsClipboardFormatAvailable(lngFormatID) <> 0 Then
            
                lngMEM = GetClipboardData(lngFormatID)
        
                If lngMEM <> 0 Then
                
                    lngDataLen = GlobalSize(lngMEM)
                    
                    If lngDataLen <> 0 Then
                
                        '|fffd|O|fffd||fffd||fffd|[|fffd|o|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||24f||fffd||fffd||fffd||fffd||fffd||fffd||797||308||fffd||fffd||fffd|m|fffd||6c2||fffd||fffd||102||fffd||fffd||303|n|fffd||fffd||fffd|h|fffd||fffd||fffd||fffd||fffd||64fe|
                        lngHwnd = GlobalAlloc(GMEM_MOVEABLE, lngDataLen)
                        
                        If lngHwnd <> 0 Then
                            
                            '|fffd|O|fffd||fffd||fffd|[|fffd|o|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|b|fffd|N|fffd||fffd||fffd||102||fffd||fffd||303|||fffd|C|fffd||fffd||fffd|^|fffd||fffd||fffd||64fe|
                            lngDst = GlobalLock(lngHwnd)
                            lngSrc = GlobalLock(lngMEM)
                    
                            CopyMemory ByVal lngDst, ByVal lngSrc, lngDataLen
                            
                            Call GlobalUnlock(lngMEM)
                            Call GlobalUnlock(lngHwnd)
                            
                            Set s = New ClipDataDTO
                            
                            s.lngFormat = lngFormatID
                            s.lngHandle = lngHwnd
                            
                            c.Add s
                            
                            Set s = Nothing
                
                        End If
                        
                    End If
                    
                End If
                
            End If
        
            lngFormatID = EnumClipboardFormats(lngFormatID)
            'Exit Do
        Loop
        
        Call EmptyClipboard

        '|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||fffd||fffd|N|fffd||fffd||fffd|[|fffd|Y(|fffd||fffd||fffd||fffd||fffd|Windows|fffd||250||fffd||fffd||40aa|
        '|fffd||7c2||fffd||202||fffd||fffd||fffd||fffd||fffd||fffd||242||142||fffd||fffd||fffd||fffd||fffd||846c||fffd||20a9||fffd||24d|s|fffd||fffd|)
        lngret = CloseClipboard()
        
    End If

End Sub

'|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||243|f|fffd|[|fffd|^|fffd||1570c||fffd||fffd||fffd||fffd||fffd|v|fffd||fffd||fffd|V|fffd|[|fffd|W|fffd||fffd|
Public Sub RestoreClipData(c As Collection)

#If VBA7 And Win64 Then
    Dim lngMEM As LongPtr
    Dim lngret As LongPtr
#Else
    Dim lngMEM As Long
    Dim lngret As Long
#End If

    Const GMEM_MOVEABLE = 2
  
    Dim s As ClipDataDTO
    
    If c.count = 0 Then
        Exit Sub
    End If

    '|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||fffd||fffd|I|fffd|[|fffd|v|fffd||fffd|
    If OpenClipboard(0&) <> 0 Then
  
        '|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||fffd||fffd||fffd||242||fffd||fffd||fffd|
        If EmptyClipboard() <> 0 Then
    
            For Each s In c
        
                If s.lngHandle <> 0 Then
        
                    '|fffd|O|fffd||fffd||fffd|[|fffd|o|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|b|fffd|N|fffd||fffd||fffd||102||fffd||fffd||303|||fffd|C|fffd||fffd||fffd|^|fffd||fffd||fffd||64fe|
                    lngMEM = GlobalLock(s.lngHandle)
              
                    If lngMEM <> 0 Then
                    
                        '|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||243||fffd||fffd||fffd||fffd||fffd||fffd|u|fffd||fffd||fffd|b|fffd|N|fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        lngret = SetClipboardData(s.lngFormat, s.lngHandle)
                    
                        '|fffd|O|fffd||fffd||fffd|[|fffd|o|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|u|fffd||fffd||fffd|b|fffd|N|fffd||303||fffd||fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||fffd|
                        lngret = GlobalUnlock(s.lngHandle)
                        
                        'lngRet = GlobalFree(s.lngHandle)
                    
                    End If
                  
                End If
          
            Next
        End If
    
    End If
    
    lngret = CloseClipboard()

End Sub
'|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||fffd||fffd|N|fffd||fffd||fffd|A|fffd||fffd||fffd||fffd|
Public Sub ClearClipboard()

    If OpenClipboard(0&) <> 0 Then
        Call EmptyClipboard
        Call CloseClipboard
    End If

End Sub
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||389||fffd|StrConv(vbUnicode, vbFromUnicode|fffd||34e|g|fffd||fffd||fffd||702||fffd||fffd||fffd|)
Public Function StrConvU(ByVal strSource As String, conv As VbStrConv) As String

    Dim i As Long
    Dim strBuf As String
    Dim c As String
    Dim strRet As String
    Dim strBefore As String
    Dim strChr As String

    strRet = ""
    strBuf = ""
    strBefore = ""

    For i = 1 To Len(strSource)

        c = Mid(strSource, i, 1)

        Select Case c
            '|fffd|S|fffd|p|fffd||311||fffd||fffd|_|fffd|A|fffd||fffd||fffd||fffd||fffd|_
            Case "|fffd|K", "|fffd|J"
                If (conv And vbNarrow) > 0 Then
                    If c = "|fffd|K" Then
                        strChr = "|fffd|"
                    Else
                        strChr = "|fffd|"
                    End If
                Else
                    strChr = c
                End If
                strRet = strRet & strConv(strBuf, conv) & strChr
                strBuf = ""
                
            '|fffd||fffd||fffd|p|fffd||314||fffd||fffd||fffd||fffd|_
            Case "|fffd|"
                '|fffd|P|fffd||91|O|fffd||315||fffd||fffd||fffd|
                Select Case strBefore
                    Case "|fffd|" To "|fffd|"
                        strBuf = strBuf & c
                    Case Else
                        If (conv And vbWide) > 0 Then
                             strChr = "|fffd|K"
                        Else
                            strChr = c
                        End If
                        strRet = strRet & strConv(strBuf, conv) & strChr
                        strBuf = ""
                End Select
                
            '|fffd||fffd||fffd|p|fffd||311||fffd||fffd|_
            Case "|fffd|"
                '|fffd|P|fffd||91|O|fffd||315||fffd||fffd||fffd|
                Select Case strBefore
                    Case "|fffd|" To "|fffd|", "|fffd|" To "|fffd|", "|fffd|" To "|fffd|", "|fffd|" To "|fffd|"
                        strBuf = strBuf & c
                    Case Else
                        If (conv And vbWide) > 0 Then
                            strChr = "|fffd|J"
                        Else
                            strChr = c
                        End If
                        strRet = strRet & strConv(strBuf, conv) & strChr
                        strBuf = ""
                End Select
                
            '|fffd||fffd||fffd||311||fffd|
            Case Else
                '|fffd||fffd||5014f||fffd||fffd||fffd|StrConv|fffd||155||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||302||fffd||794||fffd|
                If Asc(c) = 63 And c <> "?" Then
                    strRet = strRet & strConv(strBuf, conv) & c
                    strBuf = ""
                Else
                    strBuf = strBuf & c
                End If
        End Select
        
        '|fffd|P|fffd||91|O|fffd||315||fffd||fffd||fffd|
        strBefore = c

    Next

    If strBuf <> "" Then
        strRet = strRet & strConv(strBuf, conv)
    End If

    StrConvU = strRet

End Function
Sub rlxCreateFolder(ByVal strPath As String)

    Dim v As Variant
    Dim s As Variant
    
    Dim f As String
    
    v = Split(strPath, "\")

    On Error Resume Next
    For Each s In v
    
        If f = "" Then
            f = s
            MkDir f & "\"
        Else
            f = f & "\" & s
            MkDir f
        End If
    
    Next

End Sub

Attribute VB_Name = "basCrossLine"
Option Explicit


Sub getCrossLineSetting(ByRef lngFillVisible As Long, ByRef lngFillColor As Long, ByRef dblFillTransparency As Double, ByRef lngLineVisible As Long, ByRef lngLineColor As Long, ByRef sngLineWeight As Single, ByRef strOnAction As String)

    lngFillVisible = Val(GetSetting(C_TITLE, "CrossLine", "FillVisible", "-1"))
    lngFillColor = CLng(GetSetting(C_TITLE, "CrossLine", "FillColor", "&H0050B000"))
    dblFillTransparency = Val(GetSetting(C_TITLE, "CrossLine", "FillTransparency", "50"))
        
    lngLineVisible = Val(GetSetting(C_TITLE, "CrossLine", "LineVisible", "0"))
    lngLineColor = CLng(GetSetting(C_TITLE, "CrossLine", "LineColor", "&H0"))
    sngLineWeight = Val(GetSetting(C_TITLE, "CrossLine", "LineWeight", "1"))
    
    strOnAction = GetSetting(C_TITLE, "CrossLine", "OnAction", "rlxCrossClick")
    
End Sub
Sub setCrossLineSetting(ByVal strFillVisible As String, ByVal strFillColor As String, ByVal strFillTransparency As String, ByVal strLineVisible As String, ByVal strLineColor As String, ByVal strLineWeight As String)

    Call SaveSetting(C_TITLE, "CrossLine", "FillVisible", strFillVisible)
    Call SaveSetting(C_TITLE, "CrossLine", "FillColor", strFillColor)
    Call SaveSetting(C_TITLE, "CrossLine", "FillTransparency", strFillTransparency)
        
    Call SaveSetting(C_TITLE, "CrossLine", "LineVisible", strLineVisible)
    Call SaveSetting(C_TITLE, "CrossLine", "LineColor", strLineColor)
    Call SaveSetting(C_TITLE, "CrossLine", "LineWeight", strLineWeight)
    
End Sub
Attribute VB_Name = "basFileReplace"
Option Explicit

Sub replaceFiles()

    Dim strFolder As String
    
    Dim strkey As String
    
    Dim strBackup As String
    
    Dim strTmpl As String
    Dim lngCnt As Long
    Dim lngFileCount As Long

    
    Const C_COL_NUM As Long = 1
    Const C_COL_SEARCH As Long = 2
    Const C_COL_REPLACE As Long = 3
    Const C_COL_COMPARE As Long = 4
    Const C_COL_RESULT As Long = 5
    
    Const C_ROW_VERSION As Long = 1
    Const C_ROW_HEAD As Long = 3
    Const C_ROW_DETAIL As Long = 4

    Dim rp As ReplaceParamDTO
    Dim colParam As New Collection
    
    Dim colResult As New Collection
   
    Dim blnStatusBar As Boolean ''|fffd|i|fffd||fffd||fffd|o|fffd|[|fffd||fffd||502||fffd||fffd|L|fffd||fffd|
   
    Dim WS As Worksheet
    Set WS = ThisWorkbook.Worksheets("ReplaceFormat")
    
    '|fffd||fffd||fffd|u|fffd|b|fffd|N|fffd||303|t|fffd|H|fffd|[|fffd|}|fffd|b|fffd|g|fffd||183|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|V|fffd|[|fffd|g|fffd||303|t|fffd|H|fffd|[|fffd|}|fffd|b|fffd|g|fffd||fffd||fffd|r
    If WS.Cells(C_ROW_VERSION, C_COL_NUM).Value <> _
        ActiveSheet.Cells(C_ROW_VERSION, C_COL_NUM).Value Then
        If MsgBox("|fffd||fffd|`|fffd|V|fffd|[|fffd|g|fffd||fffd||fffd||642||202||fffd||94|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|A|fffd||fffd||fffd|s|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|H", vbOKCancel, "|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd|u|fffd||fffd|") = vbCancel Then
            Exit Sub
        End If
    End If
    
    lngCnt = 0

    ''|fffd||752||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||313||1c2||74d||fffd||fffd||fffd|
    Do Until Cells(lngCnt + C_ROW_DETAIL, C_COL_NUM).Value = ""
        
        strkey = Cells(lngCnt + C_ROW_DETAIL, C_COL_SEARCH).Value
        If strkey <> "" Then
            Set rp = New ReplaceParamDTO
            
            rp.SearchString = strkey
            rp.ReplaceString = Cells(lngCnt + C_ROW_DETAIL, C_COL_REPLACE).Value
            rp.CompareMode = Cells(lngCnt + C_ROW_DETAIL, C_COL_COMPARE).Value

            colParam.Add rp
        
            Set rp = Nothing
        End If
   
        lngCnt = lngCnt + 1
    Loop
        
        
    '|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||64fe|
    strFolder = rlxSelectFolder()
    If strFolder = "" Then
        '|fffd|L|fffd||fffd||fffd||fffd||fffd|Z|fffd||fffd|
        Exit Sub
    End If
    
    '''|fffd|X|fffd|e|fffd|[|fffd|^|fffd|X|fffd|o|fffd|[|fffd||30f||fffd||502||fffd||fffd|L|fffd||fffd|
    blnStatusBar = Application.DisplayStatusBar
    ''|fffd|X|fffd|e|fffd|[|fffd|^|fffd|X|fffd|o|fffd|[|fffd||fffd|\|fffd||fffd|
    Application.DisplayStatusBar = True
    
    Call reDir(strFolder, colParam, colResult)

    '''==================================================
    '''|fffd|X|fffd|e|fffd|[|fffd|^|fffd|X|fffd|o|fffd|[|fffd||315|\|fffd||fffd||fffd||fffd||fffd|e|fffd||fffd|Excel|fffd||30a||fffd||fffd||fffd|l|fffd||256||7c2||fffd|
    Application.StatusBar = False
    '''|fffd|X|fffd|e|fffd|[|fffd|^|fffd|X|fffd|o|fffd|[|fffd||fffd||fffd|}|fffd|N|fffd||fffd||fffd||30e||fffd||fffd|s|fffd|O|fffd||30f||fffd||502||256||7c2||fffd|
    Application.DisplayStatusBar = blnStatusBar
    '''==================================================

    MsgBox colResult.count & "|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd|u|fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbInformation, C_TITLE
    
End Sub

Private Sub reDir(ByVal strDir As String, colParam As Collection, colResult As Collection)

    Dim strFile As String
    Dim fc As New Collection
    Dim FS As FileParamDTO
    Dim strParent As String
    
    strParent = rlxAddFileSeparator(strDir)

    ''|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||313||1c2||74d||fffd||fffd||74f||fffd||fffd||fffd|
    strFile = Dir(strParent & "*.*", vbNormal + vbDirectory)

    Do Until strFile = ""
    
        Select Case strFile
            Case ".", ".."
            Case Else
                Set FS = New FileParamDTO
                
                FS.filename = strFile
                FS.Directory = strDir
                FS.Attrib = GetAttr(rlxAddFileSeparator(strDir) & strFile)
                
                fc.Add FS
        End Select
    
        ''|fffd||fffd||fffd||303|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||64fe|
        strFile = Dir()
    Loop

    For Each FS In fc
    
        If (FS.Attrib And vbDirectory) <> 0 Then
            ''|fffd||10b|A|fffd||102||44f|o|fffd||fffd|
            Call reDir(rlxAddFileSeparator(FS.Directory) & FS.filename, colParam, colResult)
        Else
            Call repFiles(FS, colParam, colResult)
        End If
    Next

End Sub
Private Sub repFiles(FS As FileParamDTO, colParam As Collection, colResult As Collection)

    Dim strSourceFile As String
    
    Dim strBuf As String
    Dim strBody As String
    Dim strWrite As String
    Dim bytBuf() As Byte
    
    
    Dim intfp As Integer
    Dim lngMaxCol As Long
    Dim lngSize As Long
    
    Dim lngSearchChar As Long
    Dim lngSearchCount As Long
    Dim lngFileCount As Long
    
    Dim lngFind As Long
    
    Dim rp As ReplaceParamDTO
    Dim rr As ReplaceResultDTO
    
    
    ''''==================================================
    ''''|fffd|X|fffd|e|fffd|[|fffd|^|fffd|X|fffd|o|fffd|[|fffd||243||fffd||fffd|b|fffd|Z|fffd|[|fffd|W|fffd||fffd|\|fffd||fffd|
    Application.StatusBar = FS.filename & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||142||fffd|"
    ''''==================================================

    '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||30d||c42c|
    strSourceFile = rlxAddFileSeparator(FS.Directory) & FS.filename

    '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd|S|fffd||fffd||fffd||1c2||781|B
    intfp = FreeFile()
    Open strSourceFile For Binary As intfp
    lngSize = LOF(intfp)
    
    ReDim bytBuf(0 To lngSize - 1)

    Get intfp, , bytBuf

    Close intfp

    ''Unicode|fffd||255||3ca||fffd|
    strBody = strConv(bytBuf, vbUnicode)
    lngSearchCount = 0

    For Each rp In colParam
    
        lngSearchChar = 0
        
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||a0bd||fffd||fffd||fffd||fffd||fffd||fffd||310||fffd||fffd||fffd||fffd||64fe|
        lngFind = InStr(1, strBody, rp.SearchString, rp.CompareMode)
        Do Until lngFind = 0
            lngSearchChar = lngSearchChar + 1
            lngFind = InStr(lngFind + 1, strBody, rp.SearchString, rp.CompareMode)
        Loop
        
        ''|fffd|P|fffd||fffd||fffd||142||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||282||fffd||fffd||fffd||fffd||fffd||383|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd|u|fffd||fffd|
        If lngSearchChar > 0 Then
            strBody = Replace(strBody, rp.SearchString, rp.ReplaceString, 1, -1, rp.CompareMode)
            lngSearchCount = lngSearchCount + lngSearchChar
            
            Set rr = New ReplaceResultDTO
            
            rr.filename = FS.filename
            rr.SearchString = rp.SearchString
            rr.ReplaceString = rp.ReplaceString
            rr.ReplaceStrCount = lngSearchCount
            
            colResult.Add rr
        End If

    Next

    If lngSearchCount > 0 Then
    
'            ''|fffd|o|fffd|b|fffd|N|fffd|A|fffd|b|fffd|v|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||30d||c42c|
'            On Error Resume Next
'            MkDir strBackup
'            On Error GoTo 0
'
'            ''|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||303|o|fffd|b|fffd|N|fffd|A|fffd|b|fffd|v
'            FileCopy strSourceFile, strBackup & strFile
    
        '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||fffd||a347||fffd|A|fffd||fffd|x|fffd|N|fffd||fffd||fffd|A|fffd||fffd||fffd||fffd|B
        intfp = FreeFile()
        Open strSourceFile For Output As intfp
        Close intfp
        
        ''|fffd|P|fffd||fffd||fffd||142||fffd||fffd|u|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||38f|o|fffd||fffd|
        intfp = FreeFile()
        Open strSourceFile For Binary As intfp
        Put intfp, , strBody
        Close intfp
        
        '|fffd|C|fffd||fffd||fffd||fffd||fffd||a0bd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||310||fffd||fffd||fffd||fffd|J|fffd|E|fffd||fffd||fffd|g
        lngFileCount = lngFileCount + 1
        
    End If

End Sub



Sub copySheetReplace()
    copyDefSheet "ReplaceFormat"
End Sub
Sub copyDefSheet(ByVal strSheetName As String)

    Dim WS As Worksheet

    Set WS = ThisWorkbook.Worksheets(strSheetName)

    WS.Copy ActiveWorkbook.Worksheets(1)

End Sub

Attribute VB_Name = "basFusen"
Option Explicit
Public Const C_FUSEN_DATE_SYSTEM As String = "1"
Public Const C_FUSEN_DATE_USER As String = "2"
''--------------------------------------------------------------
''|fffd|@|fffd||645c||fffd||fffd||fffd|t|fffd||752||fffd||fffd||fffd|
''--------------------------------------------------------------
Sub showFusenSetting()

    frmFusen.Show
    
End Sub
''--------------------------------------------------------------
''|fffd|@|fffd||645c||fffd||fffd||fffd|t|fffd||752||fffd||fffd||fffd|
''--------------------------------------------------------------
Sub searchFusen()

    frmSearchFusen.Show
    
End Sub
Sub getSettingFusen(ByRef strText As String, ByRef strTag As String, ByRef varPrint As Variant, ByRef strWidth As String, ByRef strHeight As String, ByRef strFormat As String, ByRef strUserDate As String, ByRef strFusenDate As String, ByRef strFont As String, ByRef strSize As String, ByRef varHorizontalAnchor As Variant, ByRef varVerticalAnchor As Variant, ByRef varAutoSize As Variant, ByRef varOverFlow As Variant, ByRef varWordWrap As Variant)

    strTag = GetSetting(C_TITLE, "Fusen", "Tag", "|fffd|t|2ccc||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd||fffd|")
    strText = GetSetting(C_TITLE, "Fusen", "Text", "$d" & " " & "$u" & vbCrLf & "|fffd|y|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||253||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|z")
    varPrint = GetSetting(C_TITLE, "Fusen", "PrintObject", False)

    strWidth = GetSetting(C_TITLE, "Fusen", "Width", "7.5")
    strHeight = GetSetting(C_TITLE, "Fusen", "Height", "2.5")
    
    strUserDate = GetSetting(C_TITLE, "Fusen", "UserDate", "")
    strFormat = GetSetting(C_TITLE, "Fusen", "Format", "yyyy.mm.dd hh:mm:ss")
    strFusenDate = GetSetting(C_TITLE, "Fusen", "FusenDate", C_FUSEN_DATE_SYSTEM)
    
    strFont = GetSetting(C_TITLE, "Fusen", "Font", "Meiryo UI")
    strSize = GetSetting(C_TITLE, "Fusen", "Size", "9")
    
    varHorizontalAnchor = GetSetting(C_TITLE, "Fusen", "HorizontalAnchor", 0)
    varVerticalAnchor = GetSetting(C_TITLE, "Fusen", "VerticalAnchor", 0)
    
    varAutoSize = GetSetting(C_TITLE, "Fusen", "AutoSize", False)
    varOverFlow = GetSetting(C_TITLE, "Fusen", "OverFlow", False)
    varWordWrap = GetSetting(C_TITLE, "Fusen", "WordWrap", True)

End Sub
'--------------------------------------------------------------
'|fffd|@|fffd|t|2cd3|\|fffd||fffd|t|fffd||fffd|
'--------------------------------------------------------------
Sub pasteFusen(ByVal strId As String, ByVal index As Long)

    Dim r As Shape
    
    If ActiveWorkbook Is Nothing Then
        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
    
    Application.ScreenUpdating = False
    
    Set r = ThisWorkbook.Worksheets(strId).Shapes("shpSquare" & Format(index, "00"))

    r.Copy
 
    ActiveSheet.Paste
    
    Dim strText As String
    Dim strTag As String
    Dim varPrint As Variant
    
    Dim strWidth  As String
    Dim strHeight  As String
    
    Dim strFormat As String
    Dim strUserDate  As String
    Dim strFusenDate As String
    
    Dim strFont  As String
    Dim strSize  As String
    
    Dim strHorizontalAnchor  As String
    Dim strVerticalAnchor  As String
    
    Dim varAutoSize  As Variant
    Dim varOverFlow As Variant
    Dim varWordWrap As Variant
    
    Call getSettingFusen(strText, strTag, varPrint, strWidth, strHeight, strFormat, strUserDate, strFusenDate, strFont, strSize, strHorizontalAnchor, strVerticalAnchor, varAutoSize, varOverFlow, varWordWrap)
    
    If strId <> "fsGallery05" Then
        Selection.ShapeRange.Width = CDbl(strWidth) * 10 * C_RASIO
        Selection.ShapeRange.Height = CDbl(strHeight) * 10 * C_RASIO
    End If
    
    Selection.ShapeRange.AlternativeText = strTag
    
    Dim strDate As String
    
    strDate = getFormatDate(strFormat, strFusenDate, strUserDate)
    strText = Replace(strText, "$d", strDate)
    strText = Replace(strText, "$u", Application.UserName)
    
    Selection.ShapeRange.TextFrame2.TextRange.Font.name = strFont
    Selection.ShapeRange.TextFrame2.TextRange.Font.NameComplexScript = strFont
    Selection.ShapeRange.TextFrame2.TextRange.Font.NameFarEast = strFont
    Selection.ShapeRange.TextFrame2.TextRange.Font.NameAscii = strFont
    Selection.ShapeRange.TextFrame2.TextRange.Font.NameOther = strFont

    
    Selection.ShapeRange.TextFrame2.TextRange.Font.Size = CDbl(strSize)
    Selection.ShapeRange.TextFrame2.TextRange.Text = strText
    
    If strId <> "fsGallery05" Then
        Select Case strVerticalAnchor
            Case "0"
                Selection.ShapeRange.TextFrame2.VerticalAnchor = msoAnchorTop
            Case "1"
                Selection.ShapeRange.TextFrame2.VerticalAnchor = msoAnchorMiddle
            Case "2"
                Selection.ShapeRange.TextFrame2.VerticalAnchor = msoAnchorBottom
        End Select
            
        Select Case strHorizontalAnchor
            Case "0"
                Selection.ShapeRange.TextFrame2.TextRange.ParagraphFormat.Alignment = msoAlignLeft
            Case "1"
                Selection.ShapeRange.TextFrame2.TextRange.ParagraphFormat.Alignment = msoAlignCenter
            Case "2"
                Selection.ShapeRange.TextFrame2.TextRange.ParagraphFormat.Alignment = msoAlignRight
        End Select
    End If
    
    Selection.PrintObject = CBool(varPrint)
    
    If strId <> "fsGallery05" Then
        If CBool(varAutoSize) Then
            Selection.ShapeRange.TextFrame2.AutoSize = msoAutoSizeShapeToFitText
        Else
            Selection.ShapeRange.TextFrame2.AutoSize = msoAutoSizeNone
        End If
    End If
    
#If VBA7 And Win64 Then
    If strId <> "fsGallery05" Then
        If CBool(varOverFlow) Then
            Selection.ShapeRange.TextFrame.HorizontalOverflow = xlOartHorizontalOverflowOverflow
            Selection.ShapeRange.TextFrame.VerticalOverflow = xlOartVerticalOverflowOverflow
        Else
            Selection.ShapeRange.TextFrame.HorizontalOverflow = xlOartHorizontalOverflowClip
            Selection.ShapeRange.TextFrame.VerticalOverflow = xlOartVerticalOverflowClip
        End If
    End If
#End If

    If strId <> "fsGallery05" Then
        Selection.ShapeRange.TextFrame2.WordWrap = CBool(varWordWrap)
    End If
    

    Application.ScreenUpdating = True

End Sub
'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd|t|fffd||fffd||fffd||fffd||fffd||752||fffd|
'--------------------------------------------------------------
Private Function getFormatDate(ByVal strFormat As String, _
                        ByVal strType As String, _
                        ByVal strUserDate As String)
    
    On Error Resume Next

    If Len(Trim(strFormat)) = 0 Then
        getFormatDate = ""
        Exit Function
    End If
    
    Select Case strType
        Case C_FUSEN_DATE_SYSTEM
            getFormatDate = Format(Now, strFormat)
            
        Case C_FUSEN_DATE_USER
            If IsDate(strUserDate) Then
                getFormatDate = Format(CDate(strUserDate), strFormat)
            Else
                getFormatDate = ""
            End If
    End Select

End Function
'--------------------------------------------------------------
'|fffd|@|fffd|C|fffd||fffd||fffd|[|fffd|W|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||c42c|
'--------------------------------------------------------------
Function getImageFusen(ByVal strId As String, ByVal index As Long) As StdPicture
    
    On Error Resume Next
    
    Set getImageFusen = Nothing
    
    Dim r As Shape
    Set r = ThisWorkbook.Worksheets(strId).Shapes("shpSquare" & Format(index, "00"))
    
    Set getImageFusen = CreatePictureFromClipboard(r)
    
End Function


Attribute VB_Name = "basItem"
Option Explicit
Public mColAllItem As Collection

Public Sub createAllItemObject()

    Set mColAllItem = New Collection

    '|fffd||fffd||fffd||5c2||102||303|Z|fffd|N|fffd|V|fffd||fffd||fffd||fffd|
    mColAllItem.Add New itemPoint
    mColAllItem.Add New itemCircleB
    mColAllItem.Add New itemCircleW
    mColAllItem.Add New itemDiaB
    mColAllItem.Add New itemDiaW
    mColAllItem.Add New itemRevTriB
    mColAllItem.Add New itemRevTriW
    mColAllItem.Add New itemSquareB
    mColAllItem.Add New itemSquareW
    mColAllItem.Add New itemNum1
    mColAllItem.Add New itemImp
    mColAllItem.Add New itemDouble
    mColAllItem.Add New itemStarB
    mColAllItem.Add New itemStarW
    mColAllItem.Add New itemSime
    mColAllItem.Add New itemDblR
    mColAllItem.Add New itemNumExp
    mColAllItem.Add New itemNumC
    mColAllItem.Add New itemNumA

End Sub
Function rlxGetItemNoAny(ByVal strBuf As String) As String
Attribute rlxGetItemNoAny.VB_Description = "|fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||590||fffd||fffd||182||fffd||fffd||10e|g|fffd|p|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
Attribute rlxGetItemNoAny.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim i As Long
    Dim lngCnt As Long
    Dim strSecNo As String
    Dim blnFind As Boolean
    
    blnFind = False

    lngCnt = Len(strBuf)
    If lngCnt = 0 Then
        Exit Function
    End If
    
    strSecNo = ""
    
    If mColAllItem Is Nothing Then
        Call createAllItemObject
    End If

    For i = 1 To mColAllItem.count
    
        strSecNo = mColAllItem(i).SectionNumber(strBuf)
        If Len(strSecNo) > 0 Then
            Exit For
        End If
        
    Next

    rlxGetItemNoAny = strSecNo

End Function
Private Function getItemNo(ByVal strBuf As String, ByVal strItemName As String) As String

    Dim obj As Object

    Set obj = rlxGetItemObject(strItemName)

    getItemNo = obj.SectionNumber(strBuf)
    
    Set obj = Nothing
    
End Function

Function rlxHasItemNo(ByVal strBuf As String, ByVal strItemName As String) As Boolean
Attribute rlxHasItemNo.VB_Description = "|fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||590||fffd||fffd||182||fffd||fffd||10e|g|fffd|p|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
Attribute rlxHasItemNo.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim i As Long
    Dim lngCnt As Long
    
    rlxHasItemNo = False
    
    lngCnt = Len(strBuf)
    If lngCnt = 0 Then
        Exit Function
    End If
    
    If Len(getItemNo(strBuf, strItemName)) > 0 Then
        rlxHasItemNo = True
    End If
    
End Function

Function rlxGetItemNext(ByVal strBuf As String, ByVal strItemName As String) As String
Attribute rlxGetItemNext.VB_Description = "|fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||590||fffd||fffd||182||fffd||fffd||10e|g|fffd|p|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
Attribute rlxGetItemNext.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim obj As Object
    Dim lngIndentLevel As Long

    Set obj = rlxGetItemObject(strItemName)

    '|fffd||fffd||fffd||50d||fffd||fffd||30e||64fe|
    rlxGetItemNext = obj.NextNumber(strBuf, lngIndentLevel)
    
    Set obj = Nothing

End Function

Sub setItemNo(ByRef r As Range, ByVal strNewNo As String)

    Dim lngPos As Long
    Dim obj As Object

    If VarType(r.Value) = vbString Then
        r.Characters(0, 0).Insert strNewNo
    Else
        r.Value = strNewNo & r.Value
    End If
    
End Sub

Sub delItemNo(ByRef r As Range)

    Dim strSecNo As String
    Dim lngPos As Long
    Dim obj As Object

    '|fffd||fffd||fffd||742||312|i|fffd||fffd||fffd||50d||fffd||fffd||fffd||fffd||64fe||fffd|i|fffd||fffd||fffd|x|fffd||fffd||fffd||242||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd|j
    strSecNo = rlxGetItemNoAny(r.Value)
    If VarType(r.Value) = vbString Then
        If Len(strSecNo) > 0 Then
            r.Characters(1, Len(strSecNo)).Delete
        End If
    Else
        If Len(strSecNo) > 0 Then
            r.Value = Mid$(r.Value, Len(strSecNo) + 1)
        End If
    End If

End Sub

Function rlxGetItemObject(ByVal className As String) As Object
Attribute rlxGetItemObject.VB_Description = "|fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||590||fffd||fffd||182||fffd||fffd||10e|g|fffd|p|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
Attribute rlxGetItemObject.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim ret As Object
    Dim obj As Object
    Set ret = Nothing
    
    If mColAllItem Is Nothing Then
        Call createAllItemObject
    End If
    
    For Each obj In mColAllItem
    
        If className = obj.Class Then
            Set ret = obj
            Exit For
        End If
    
    Next

    Set rlxGetItemObject = ret

End Function

Attribute VB_Name = "basMacro"
Option Explicit

'--------------------------------------------------------------
'|fffd|@|fffd||cd||fffd||fffd||fffd||fffd|o|fffd|b|fffd|t|fffd|@|fffd|G|fffd||fffd||fffd|A
'--------------------------------------------------------------
'Private mbytBuf() As Byte

Sub saveWorkSheets()
        
    Dim b As Workbook
    Dim o As Object
    Dim vntFileName As Variant
    
    On Error GoTo ErrHandle
        
    vntFileName = Application.GetSaveAsFilename(InitialFileName:="", filefilter:="Excel |fffd|u|fffd|b|fffd|N(*.xlsx),*.xlsx,Excel |fffd|}|fffd|N|fffd||fffd||fffd|L|fffd||fffd||fffd|u|fffd|b|fffd|N(*.xlsm),*.xlsm,Excel 97-2003|fffd|u|fffd|b|fffd|N(*.xls),*.xls", Title:="|fffd|u|fffd|b|fffd|N|fffd||315||6d1||fffd|")
    
    If vntFileName <> False Then
    
        For Each b In Workbooks
            If UCase(b.name) = UCase(rlxGetFullpathFromFileName(vntFileName)) Then
                MsgBox "|fffd||fffd||fffd||74a|J|fffd||fffd||fffd||102||fffd||fffd||fffd|u|fffd|b|fffd|N|fffd||193||fffd||fffd||fffd||fffd||fffd||fffd|O|fffd||34e|w|fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
                Exit Sub
            End If
        Next
        
        If rlxIsFileExists(vntFileName) Then
            If MsgBox("|fffd||fffd||fffd||142||253||fffd||fffd||fffd||fffd||303|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||fffd||fffd||702||fffd||fffd|B|fffd||33d1||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|H", vbOKCancel + vbQuestion, C_TITLE) <> vbOK Then
                Exit Sub
            End If
        End If
    
        Application.DisplayAlerts = False
        ActiveWorkbook.Windows(1).SelectedSheets.Copy
        Set b = ActiveWorkbook
        Select Case LCase(Mid$(vntFileName, InStr(vntFileName, ".") + 1))
            Case "xls"
                b.SaveAs filename:=vntFileName, FileFormat:=xlExcel8, Local:=True
            Case "xlsm"
                b.SaveAs filename:=vntFileName, FileFormat:=xlOpenXMLWorkbookMacroEnabled, Local:=True
            Case Else
                b.SaveAs filename:=vntFileName, Local:=True
        End Select
        b.Close
        Set b = Nothing
        Application.DisplayAlerts = True
        MsgBox "|fffd||6d1||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE
    End If
     
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE

End Sub
Sub lineCopy()

    If ActiveCell Is Nothing Then
        Exit Sub
    End If

    Dim f As Long
    Dim t As Long
    
    f = Selection(1, 1).row
    t = f + Selection.Rows.count - 1
    
    On Error Resume Next
    Application.ScreenUpdating = False
    
    ThisWorkbook.Worksheets("Undo").Cells.Clear
    
    Set mUndo.sourceRange = Rows(f & ":" & t)
    Set mUndo.destRange = Nothing
    
    Rows(f & ":" & t).Copy
    Rows(f & ":" & t).Insert Shift:=xlDown
    Application.CutCopyMode = False
    
    Call ShiftDown
    
    Application.ScreenUpdating = True
    
    'Undo
    Application.OnUndo "|fffd|s|fffd||1c9||fffd|", "execInsUndo"
    
    
End Sub
Sub lineInsert()
    
    If ActiveCell Is Nothing Then
        Exit Sub
    End If

    Dim f As Long
    Dim t As Long
    
    f = Selection(1, 1).row
    t = f + Selection.Rows.count - 1
    
    On Error Resume Next
    Application.ScreenUpdating = False
    
    ThisWorkbook.Worksheets("Undo").Cells.Clear
    
    Set mUndo.sourceRange = Rows(f & ":" & t)
    Set mUndo.destRange = Nothing
    
    Rows(f & ":" & t).Insert Shift:=xlUp
    Application.CutCopyMode = False
    
    Set mUndo.sourceRange = Rows(f & ":" & t)
    
   ' Call ShiftUp
    
    Application.ScreenUpdating = True
    
    'Undo
    Application.OnUndo "|fffd|s|fffd||1c9||fffd|", "execInsUndo"
    
End Sub
Sub lineDel()

    If ActiveCell Is Nothing Then
        Exit Sub
    End If

    Dim f As Long
    Dim t As Long
    
    f = Selection(1, 1).row
    t = f + Selection.Rows.count - 1
    
    On Error Resume Next
    Application.ScreenUpdating = False
    
    ThisWorkbook.Worksheets("Undo").Cells.Clear
    
    Set mUndo.sourceRange = Range(Cells(f, 1), Cells(t, Columns.count - 1))
    Set mUndo.destRange = ThisWorkbook.Worksheets("Undo").Range(mUndo.sourceRange.Address)
    
    mUndo.sourceRange.Copy mUndo.destRange
    
    Rows(f & ":" & t).Delete xlUp
    
    Set mUndo.sourceRange = Range(Cells(f, 1), Cells(t, Columns.count - 1))
    
    Application.CutCopyMode = False
    Application.ScreenUpdating = True
    
    Selection.Select
    
    'Undo
    Application.OnUndo "|fffd|s|fffd||d3dc|", "execDelUndo"
    
    
End Sub
Sub lineNCopy()


    Dim lngBuf As Long
    Dim lngDest As Long
    Dim lngCnt As Long
    Dim f As Long
    Dim t As Long
    
    If ActiveCell Is Nothing Then
        Exit Sub
    End If

    lngBuf = frmInputLength.Start("|fffd|s|fffd||fffd||fffd|R|fffd|s|fffd|[|fffd||fffd||fffd||9414||fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B" & vbCrLf & "|fffd||fffd||fffd|(1000)")
    If lngBuf = 0 Then
        Exit Sub
    End If

    If lngBuf > 1000 Then
        Exit Sub
    End If

'    lngDest = ActiveCell.row + Val(strbuf) - 1
    lngDest = lngBuf

    f = Selection(1, 1).row
    t = f + Selection.Rows.count - 1

    On Error Resume Next
    Application.ScreenUpdating = False
    For lngCnt = 1 To lngDest
        Rows(f & ":" & t).Copy
        Rows(f & ":" & t).Insert Shift:=xlDown
    Next
    Application.CutCopyMode = False
    Application.ScreenUpdating = True
    
End Sub
Function rlxCheckSelectRange() As Boolean
Attribute rlxCheckSelectRange.VB_Description = "|fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||590||fffd||fffd||182||fffd||fffd||10e|g|fffd|p|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
Attribute rlxCheckSelectRange.VB_ProcData.VB_Invoke_Func = " \n19"
    
    On Error GoTo ErrHandle
    
    rlxCheckSelectRange = False
    
    Select Case True
        Case ActiveWorkbook Is Nothing
            Exit Function
        Case ActiveCell Is Nothing
            Exit Function
        Case Selection Is Nothing
            Exit Function
        Case TypeOf Selection Is Range
            'OK
        Case Else
            Exit Function
    End Select

    rlxCheckSelectRange = True

    Exit Function
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE

End Function


'--------------------------------------------------------------
'|fffd|@|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd|\|fffd||fffd|t|fffd||fffd|
'--------------------------------------------------------------
Public Sub putClipboard(ByVal strBuf As String)
    On Error GoTo ErrHandle

'    If ActiveCell Is Nothing Then
'        Exit Sub
'    End If
'
'    If strBuf = "" Then
'    Else
'        Dim CB As New DataObject
'        With CB
'            .setText strBuf
'            .PutInClipboard
'        End With
'    End If
    SetClipText strBuf
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE

End Sub

'--------------------------------------------------------------
'|fffd|@|fffd|g|fffd|p|fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|G|fffd||fffd||fffd|A|fffd||311|I|fffd||fffd|
'--------------------------------------------------------------
Sub usedRangeSelect()
    On Error GoTo ErrHandle
    If ActiveCell Is Nothing Then
        Exit Sub
    End If
    
    ActiveSheet.UsedRange.Select
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE

End Sub
'--------------------------------------------------------------
'|fffd|@|fffd|J|fffd|[|fffd|\|fffd||fffd||fffd||302||fffd||fffd||fffd|G|fffd||fffd||fffd|A|fffd||311|I|fffd||fffd|
'--------------------------------------------------------------
Sub currentRegionSelect()
    On Error GoTo ErrHandle

    If ActiveCell Is Nothing Then
        Exit Sub
    End If
    
    ActiveCell.CurrentRegion.Select

    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE

End Sub
'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||752|u|fffd|l|fffd|o|fffd||341|i|fffd|f|fffd|o|fffd|b|fffd|O|fffd|@|fffd|\|fffd|j
'--------------------------------------------------------------
Sub commandList()

    Dim c As CommandBar
    Dim d As CommandBarControl
    
    Dim lngCnt As Long
    
    On Error GoTo ErrHandle
    
    If ActiveCell Is Nothing Then
        Exit Sub
    End If
    
    If MsgBox("|fffd||fffd||fffd||742||303|V|fffd|[|fffd|g|fffd||243||fffd||fffd|j|fffd||fffd||fffd|[|fffd||752||fffd|l|fffd||fffd||fffd|o|fffd||342||fffd||fffd||702||fffd||fffd|B|fffd||fffd||b0b5||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|H", vbQuestion + vbOKCancel, C_TITLE) <> vbOK Then
        Exit Sub
    End If
    
    lngCnt = 1

    For Each c In CommandBars

        For Each d In c.Controls

            Cells(lngCnt, 1) = c.name
            Cells(lngCnt, 2) = c.NameLocal
        
            Cells(lngCnt, 3) = d.Caption
            Cells(lngCnt, 4) = d.id
            
            lngCnt = lngCnt + 1
        Next
    Next
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|["
End Sub
'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd|O|fffd||fffd|S|fffd||d3dc|
'--------------------------------------------------------------
Sub delnamae()

    On Error GoTo ErrHandle
    
    '|fffd||3d0||fffd||fffd||933e|
    Dim namae As name '|fffd||fffd||fffd|O
    Dim namae_del As String '|fffd||fffd||fffd||142||fffd||fffd||fffd||fffd||fffd||fffd|O|fffd||fffd||fffd|X|fffd|g
    
    If ActiveWorkbook Is Nothing Then
        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
    
    If MsgBox("|fffd|u|fffd|b|fffd|N|fffd||fffd||fffd||311|S|fffd||102||316||fffd||fffd|O|fffd||fffd||fffd||d3dc||fffd||fffd||fffd||702||fffd|(|fffd|uPrint_|fffd|v|fffd||14e|n|fffd||702||fffd||fffd||fffd||308||20a|O)|fffd|B|fffd||fffd||b0b5||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|H", vbQuestion + vbOKCancel, C_TITLE) <> vbOK Then
        Exit Sub
    End If
        namae_del = ""
    
    '|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd|
    For Each namae In ActiveWorkbook.Names
        If InStr(namae.name, "Print_") > 0 Then
        Else
            namae_del = namae_del & vbCrLf & namae.name
            namae.Delete
        End If
    Next
    
    '|fffd||fffd||fffd||295||fffd|
    If Len(namae_del) = 0 Then
        MsgBox "|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|B", vbExclamation, C_TITLE
    Else
        MsgBox "|fffd||209||fffd||fffd||316||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B" & namae_del, vbInformation, C_TITLE
    End If

    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE

End Sub

'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd||5c2||102||303|V|fffd|[|fffd|g|fffd||311|I|fffd||fffd||fffd||292|u|fffd||fffd||fffd|`|fffd|P|fffd||243|Z|fffd|b|fffd|g
'--------------------------------------------------------------
Sub setAllA1()

    On Error Resume Next
    Dim WS As Worksheet
    Dim WD As Window
    Dim sw As Boolean
    Dim WB As Workbook
    Dim blnRatio As Boolean
    Dim lngPercent As Long
 
    If ActiveWorkbook Is Nothing Then
        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
    
    blnRatio = GetSetting(C_TITLE, "A1Setting", "ratio", False)
    lngPercent = Val(GetSetting(C_TITLE, "A1Setting", "percent", "100"))
    If lngPercent = 0 Then
        lngPercent = 100
    End If
    
    sw = False
    If Application.ScreenUpdating Then
        sw = True
    End If
    
    If sw Then
        Application.ScreenUpdating = False
    End If
  
    Set WB = ActiveWorkbook
  
    For Each WS In WB.Worksheets
        If WS.visible = xlSheetVisible Then
            WS.Activate
            WS.Range("A1").Activate
            WB.Windows(1).ScrollRow = 1
            WB.Windows(1).ScrollColumn = 1
            If blnRatio Then
                WB.Windows(1).Zoom = lngPercent
            End If
        End If
    Next

    '|fffd||fffd|\|fffd||fffd||fffd||302|P|fffd||fffd||fffd||682||fffd|I|fffd||fffd||fffd||fffd||fffd||101|u|fffd||342||fffd||fffd|H|fffd|v|fffd||fffd||502||fffd||fffd||fffd||fffd||fffd||fffd||302||155|\|fffd||fffd||fffd||fffd||fffd||302|P|fffd||fffd||fffd||682||242||fffd||fffd||fffd|B
    'ActiveWorkbook.Worksheets(1).Select
    For Each WS In WB.Worksheets
        If WS.visible = xlSheetVisible Then
            WS.Select
            Exit For
        End If
    Next
    
    Set WB = Nothing
    
    If sw Then
        Application.ScreenUpdating = True
    End If
    
End Sub

'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd||5c2||102||303|V|fffd|[|fffd|g|fffd||311|I|fffd||fffd||fffd||292|u|fffd||fffd||fffd|`|fffd|P|fffd||243|Z|fffd|b|fffd|g|fffd||fffd||fffd||115||6d1||fffd|
'--------------------------------------------------------------
Sub setAllA1save()

    Dim fname As String
    Dim varRet As Variant

    If ActiveWorkbook Is Nothing Then
        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If

    Application.ScreenUpdating = False
    
    Call setAllA1
    
    On Error Resume Next
    
    mA1Save = True
    
    If ActiveWorkbook.ReadOnly Then
        MsgBox "|fffd||1c2||74e||fffd||fffd||fffd|p|fffd|u|fffd|b|fffd|N|fffd||302||fffd||fffd||7d5||6d1||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbOKOnly + vbCritical, C_TITLE
        GoTo pass
    End If
    
    If rlxIsFileExists(ActiveWorkbook.FullName) Then
    Else
        MsgBox "|fffd||702||fffd||fffd||fffd|x|fffd||fffd||fffd||6d1||fffd||fffd||fffd||fffd||102||fffd||fffd||202||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||142||fffd||fffd|B|fffd||fffd|xExcel|fffd||155||6d1||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
        GoTo pass
    End If
    
    varRet = GetAttr(ActiveWorkbook.FullName)
    If err.Number > 0 Then
        MsgBox "|fffd||fffd||fffd||742||303|t|fffd|@|fffd|C|fffd||fffd||fffd||243|A|fffd|N|fffd|Z|fffd|X|fffd||142||fffd||fffd||702||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|B|fffd||6d1||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
        GoTo pass
    End If
    
    If (varRet And vbReadOnly) > 0 Then
        MsgBox "|fffd|w|fffd||80b3||fffd||a0bd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||353||1c2||74e||fffd||fffd||fffd|p|fffd||142||fffd||fffd|B|fffd||6d1||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
        GoTo pass
    End If
    
    
'    Application.DisplayAlerts = False
    ActiveWorkbook.Save
'    Application.DisplayAlerts = True
    
'    If err.Number <> 0 Then
'        MsgBox "|fffd|u|fffd|b|fffd|N|fffd||315||6d1||fffd||fffd||24e||fffd||fffd|s|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B|fffd||fffd||fffd||fffd||fffd||fffd||1c2||74e||fffd||fffd||fffd|p|fffd||242||202||fffd||fffd||102||fffd||fffd||202||fffd||fffd||fffd||fffd|m|fffd|F|fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbOKOnly + vbCritical, C_TITLE
'    End If
    
pass:
    mA1Save = False
    
    Application.ScreenUpdating = True

End Sub
'--------------------------------------------------------------
'|fffd|@|fffd|V|fffd|[|fffd|g|fffd||fffd||fffd||fffd||fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||253|\|fffd||fffd|t|fffd||fffd|
'--------------------------------------------------------------
Sub getSheetName()

    Dim WS As Object
    Dim strBuf As String
  
    On Error GoTo ErrHandle
  
    If ActiveWorkbook Is Nothing Then
        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
  
    strBuf = ""
    For Each WS In Sheets
            
        strBuf = strBuf & WS.name & vbCrLf

    Next

    '|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd|\|fffd||fffd|t|fffd||fffd|
    putClipboard strBuf
    
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE

End Sub

'--------------------------------------------------------------
'|fffd|@|fffd|J|fffd||fffd||fffd||102||fffd||fffd||90cf||fffd|[|fffd|N|fffd|u|fffd|b|fffd|N|fffd||fffd||fffd|i|fffd|u|fffd|b|fffd|N|fffd||fffd||fffd||302||741|j|fffd||fffd||fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||253|\|fffd||fffd|t|fffd||fffd|
'--------------------------------------------------------------
Sub getBookName()

    Dim WB As Workbook
    Dim strBuf As String
    
    On Error GoTo ErrHandle
  
    If ActiveWorkbook Is Nothing Then
        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
    
    strBuf = ""
    For Each WB In Workbooks
        strBuf = strBuf & WB.name & vbCrLf
    Next
    
    '|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd|\|fffd||fffd|t|fffd||fffd|
    putClipboard strBuf
    
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
    
End Sub

'--------------------------------------------------------------
'|fffd|@|fffd|J|fffd||fffd||fffd||102||fffd||fffd||90cf||fffd|[|fffd|N|fffd|u|fffd|b|fffd|N|fffd||fffd||fffd|i|fffd|t|fffd||fffd||fffd|p|fffd|X|fffd|j|fffd||fffd||fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||253|\|fffd||fffd|t|fffd||fffd|
'--------------------------------------------------------------
Sub getBookFullName()

    Dim WB As Workbook
    Dim strBuf As String
    
    On Error GoTo ErrHandle
  
    If ActiveWorkbook Is Nothing Then
        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
    
    strBuf = ""
    For Each WB In Workbooks
        strBuf = strBuf & rlxDriveToUNC(WB.FullName) & vbCrLf
    Next
    
    '|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd|\|fffd||fffd|t|fffd||fffd|
    putClipboard strBuf
    
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
    
End Sub

'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd||742||303||fffd||fffd|[|fffd|N|fffd|u|fffd|b|fffd|N|fffd||fffd||fffd|i|fffd|t|fffd||fffd||fffd|p|fffd|X|fffd|j|fffd||fffd||fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||253|\|fffd||fffd|t|fffd||fffd|
'--------------------------------------------------------------
Sub getCurrentBookFullName()
    
    On Error GoTo ErrHandle

    If ActiveWorkbook Is Nothing Then
        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
    
    '|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd|\|fffd||fffd|t|fffd||fffd|
    putClipboard rlxDriveToUNC(ActiveWorkbook.FullName) '& vbCrLf
    
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
    
End Sub
'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd||742||303||fffd||fffd|[|fffd|N|fffd|u|fffd|b|fffd|N|fffd||fffd||fffd|i|fffd|t|fffd||fffd||fffd|p|fffd|X|fffd|j|fffd||fffd||fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||253|\|fffd||fffd|t|fffd||fffd|
'--------------------------------------------------------------
Sub getCurrentBookName()

    On Error GoTo ErrHandle
    
    If ActiveWorkbook Is Nothing Then
        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
    
    '|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd|\|fffd||fffd|t|fffd||fffd|
    putClipboard rlxDriveToUNC(ActiveWorkbook.name) '& vbCrLf
    
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
    
End Sub

'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd||742||303||fffd||fffd|[|fffd|N|fffd|u|fffd|b|fffd|N|fffd||fffd||fffd|i|fffd|t|fffd||fffd||fffd|p|fffd|X|fffd|j|fffd||303|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd|J|fffd||fffd|
'--------------------------------------------------------------
Sub openDocumentPath()
    
    Dim WSh As Object
    Dim wExec As Object
    
    On Error Resume Next

    If ActiveWorkbook Is Nothing Then
        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
    
    '|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd|\|fffd||fffd|t|fffd||fffd|
    'putClipboard rlxDriveToUNC(ActiveWorkbook.FullName) & vbCrLf
    
    Set WSh = CreateObject("WScript.Shell")
    
    WSh.Run ("""" & rlxGetFullpathFromPathName(rlxDriveToUNC(ActiveWorkbook.FullName)) & """")
    
    Set wExec = Nothing
    Set WSh = Nothing
    
End Sub
'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd|[|fffd|N|fffd|u|fffd|b|fffd|N|fffd||315||fffd||fffd||fffd|
'--------------------------------------------------------------
Sub divideWorkBook()

    Dim strWorkPath As String
    Dim WS As Worksheet
    Dim W2 As Worksheet
    Dim motoWB As Workbook
    Dim WB As Workbook
    Dim WSh As Object
    
    On Error GoTo ErrHandle
    
    If ActiveWorkbook Is Nothing Then
        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
    
    If MsgBox("|fffd||fffd||fffd||742||303|u|fffd|b|fffd|N|fffd||30d||fffd||183|t|fffd|H|fffd||fffd||fffd|_|fffd||241|u|fffd|u|fffd|b|fffd|N|fffd||fffd|_|fffd|V|fffd|[|fffd|g|fffd||fffd||fffd|v|fffd||143|V|fffd|[|fffd|g|fffd||fffd||fffd||255||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B" & vbCrLf & "|fffd||fffd||b0b5||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|H(|fffd||fffd|\|fffd||fffd||fffd|V|fffd|[|fffd|g|fffd||34f||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|)", vbOKCancel + vbQuestion, C_TITLE) <> vbOK Then
        Exit Sub
    End If
    
    '|fffd||fffd||fffd||742||303||fffd||fffd|[|fffd|N|fffd|u|fffd|b|fffd|N|fffd||fffd||38f||6c2||182||fffd||fffd||fffd|B
    Set motoWB = ActiveWorkbook
    
    If motoWB Is Nothing Then
        Exit Sub
    End If
    
    strWorkPath = motoWB.Path
    If strWorkPath = "" Then
        MsgBox "|fffd||fffd||fffd|u|fffd|b|fffd|N|fffd||303|p|fffd|X|fffd||fffd||fffd||64fe||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B|fffd||6d1||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||113|x|fffd||fffd||fffd|s|fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation, C_TITLE
        Exit Sub
    End If

    For Each WS In motoWB.Worksheets
    
        If WS.visible = xlSheetVisible Then

            '|fffd||fffd||fffd||742||303|V|fffd|[|fffd|g|fffd||fffd||fffd|R|fffd|s|fffd|[|fffd||fffd||fffd||110|V|fffd|K|fffd||303||fffd||fffd|[|fffd|N|fffd|u|fffd|b|fffd|N|fffd||fffd||fffd||c42c||fffd||fffd||fffd||fffd|B
            WS.Copy
            
            Set WB = ActiveWorkbook
            
            '|fffd|V|fffd|K|fffd||c42c||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|N|fffd|u|fffd|b|fffd|N|fffd||fffd||6d1||fffd||fffd||fffd||fffd||fffd|B|fffd|t|fffd|H|fffd|[|fffd|}|fffd|b|fffd|g|fffd||350|e|fffd||193||fffd||fffd||fffd|
            Application.DisplayAlerts = False
            WB.SaveAs filename:=rlxAddFileSeparator(strWorkPath) & rlxGetFullpathFromExt(motoWB.name) & "_" & WS.name, FileFormat:=motoWB.FileFormat, Local:=True
            Application.DisplayAlerts = True
            WB.Close
    
            Set WB = Nothing
            
        End If
    Next

    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd|J|fffd||fffd|
    On Error Resume Next

    Set WSh = CreateObject("WScript.Shell")
    
    WSh.Run ("""" & rlxGetFullpathFromPathName(rlxDriveToUNC(motoWB.FullName)) & """")
    
    Set WSh = Nothing
    
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
    
End Sub
'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd|[|fffd|N|fffd|u|fffd|b|fffd|N|fffd||303|}|fffd|[|fffd|W
'--------------------------------------------------------------
Sub mergeWorkBook()

    Dim strWorkPath As String
    Dim WS As Worksheet
    Dim W2 As Worksheet
    Dim motoWB As Workbook
    Dim WB As Workbook
    
    Dim blnFirst As Boolean
    
    On Error GoTo ErrHandle
    
    
    '|fffd||fffd||fffd|[|fffd|N|fffd|u|fffd|b|fffd|N|fffd||fffd||fffd|Q|fffd||fffd||fffd||fffd||fffd||30f||a347||fffd|A|fffd||fffd||fffd||fffd||fffd|s|fffd|v
    If Workbooks.count < 2 Then
        Exit Sub
    End If
    
    blnFirst = True
    
    For Each WB In Workbooks

        For Each WS In WB.Worksheets
            If blnFirst Then
                WS.Copy
                Set motoWB = ActiveWorkbook
                blnFirst = False
            Else
                WS.Copy , motoWB.Worksheets(motoWB.Worksheets.count)
            End If
        Next
        
    Next
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE

End Sub

'--------------------------------------------------------------
'|fffd|@|fffd|I|fffd||fffd||348||342||309||645c||fffd||3ca||fffd|
'--------------------------------------------------------------
Sub execSelectionPictureCopy()

    On Error GoTo ErrHandle

    If ActiveCell Is Nothing Then
        Exit Sub
    End If
    
    Selection.CopyPicture Appearance:=xlScreen, Format:=xlPicture
    ActiveSheet.Paste
    
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE

End Sub
'--------------------------------------------------------------
'|fffd|@|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||313||fffd||1c9||fffd|
'|fffd|@|fffd|o|fffd|b|fffd|t|fffd|@|fffd||1c2||74d||fffd||fffd||751||389||fffd|(2GB|fffd||209||fffd|)
'--------------------------------------------------------------
Sub encryptionFileEx()

    Dim strFile As String
    Dim intIn As Integer
    Dim intOut As Integer
    Dim lngSize As Long
    Dim i As Long
    Dim bytBuf() As Byte
    
    Dim lngRead As Long
    
    Const key As Byte = &H44
    Const C_BUFFER_SIZE = 10485760 '10MB
    Const C_TEMP_FILE_EXT As String = ".tmp"
    
    On Error GoTo ErrHandle
    
    strFile = Application.GetOpenFilename(, , "|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||313||fffd||1c9||fffd|", , False)
    If strFile = "False" Then
        '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd|w|fffd||80b3||fffd||fffd||202||fffd||fffd||fffd||fffd||fffd||fffd||a347|
        Exit Sub
    End If
    
    '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||311||fffd||fffd||743|`|fffd|F|fffd|b|fffd|N
    If rlxIsFileExists(strFile) Then
    Else
        MsgBox "|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd||fffd|B", vbExclamation, C_TITLE
        Exit Sub
    End If

    intIn = FreeFile()
    Open strFile For Binary As intIn
    
    intOut = FreeFile()
    Open strFile & C_TEMP_FILE_EXT For Binary As intOut
    
    lngSize = LOF(intIn)
    
    Do While lngSize > 0
    
        If lngSize < C_BUFFER_SIZE Then
            lngRead = lngSize
        Else
            lngRead = C_BUFFER_SIZE
        End If
    
        '|fffd||151||fffd||fffd|10MB|fffd||303||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|m|fffd||6c1|B
        ReDim bytBuf(0 To lngRead - 1)
    
        '|fffd|m|fffd||6c2||fffd||fffd||fffd||fffd|o|fffd|C|fffd|g|fffd||fffd||fffd||fffd||fffd||1c2||74d||fffd||fffd||fffd|
        Get intIn, , bytBuf
        
        '|fffd||202||42fc2||fffd||fffd||fffd||108||cd||fffd||fffd||fffd|
        For i = 0 To lngRead - 1
            bytBuf(i) = bytBuf(i) Xor key
        Next
        
        '|fffd||fffd||fffd||282||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Put intOut, , bytBuf

        lngSize = lngSize - lngRead
    Loop

    Close intIn
    Close intOut
    
    Kill strFile
    Name strFile & C_TEMP_FILE_EXT As strFile

    MsgBox "|fffd||fffd||1c9||fffd||fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbInformation, C_TITLE
    
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE


End Sub
'--------------------------------------------------------------
'|fffd|@|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||242||fffd||fffd||fffd|b|fffd|r|fffd|u|fffd|f|fffd|[|fffd|^|fffd||fffd|
'|fffd|@|fffd||fffd||fffd||742||303|V|fffd|[|fffd|g|fffd||255||fffd||fffd||fffd||fffd||fffd||182||fffd||fffd||113|\|fffd||fffd|t|fffd||fffd||fffd||702||fffd||fffd|B
'--------------------------------------------------------------
Sub pasteCSV()

    Dim CB As New DataObject
    Dim strBuf As String
    Dim varRow As Variant
    Const STANDARD_DATA As Long = 1
    
    On Error GoTo ErrHandle
    
    If ActiveCell Is Nothing Then
        Exit Sub
    End If
    
    With CB
        .GetFromClipboard
        If .GetFormat(STANDARD_DATA) = False Then
            Exit Sub
        End If
        
        strBuf = .getText
        
    End With
    
    'CRLF|fffd||fffd||fffd||fffd||602||fffd||182||fffd||fffd||10d|s|fffd|P|fffd||282||255||fffd||fffd||fffd|
    Dim strCsv() As String
    Select Case True
        Case InStr(strBuf, vbCrLf) > 0
            strCsv = Split(strBuf, vbCrLf)
        Case InStr(strBuf, vbLf) > 0
            strCsv = Split(strBuf, vbLf)
        Case Else
            strCsv = Split(strBuf, vbCr)
    End Select

    Dim lngCount As Long
    lngCount = UBound(strCsv) + 1
    If lngCount < 1 Then
        Exit Sub
    End If
    
    Dim i As Long
    Dim col As Collection
    Dim lngCol As Long
    Dim lngRow As Long
    Dim r As Range
    
    lngRow = ActiveCell.row
    For i = 0 To lngCount - 1
    
        '|fffd|J|fffd||fffd||fffd|}|fffd||fffd||602||fffd||155||fffd||fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd|i|fffd|_|fffd|u|fffd||fffd||fffd|R|fffd|[|fffd|e|fffd|[|fffd|V|fffd||fffd||fffd||fffd||fffd||fffd||fffd|J|fffd||fffd||fffd|}|fffd||389||fffd||fffd|j
        varRow = rlxCsvPart(strCsv(i))
        
        lngCol = ActiveCell.Column
        
        '|fffd||14f||fffd||fffd||302|P|fffd||fffd||fffd|
        If i = 0 Then
            '|fffd||fffd||fffd||690||fffd||fffd||315||fffd||fffd|A|fffd||fffd||311|I|fffd||fffd||fffd||fffd||fffd||fffd||fffd|A|fffd||fffd||fffd||fffd||fffd||fffd|`|fffd||fffd||fffd||242||fffd||fffd||fffd|B
            Set r = Range(Columns(lngCol), Columns(lngCol + UBound(varRow) - 1))
            r.NumberFormatLocal = "@"
        End If
        
        '|fffd|s|fffd|P|fffd||282||253|\|fffd||fffd|t|fffd||fffd|
        Range(Cells(lngRow, lngCol), Cells(lngRow, lngCol + UBound(varRow) - 1)).Value = varRow
    
        lngRow = lngRow + 1
    Next

    '|fffd||fffd||fffd||5c2||113|\|fffd||fffd|t|fffd||fffd||fffd||fffd||fffd||fffd||fffd||50a|u|fffd||12c90||fffd|
    If r Is Nothing Then
    Else
        r.AutoFit
        Set r = Nothing
    End If
    
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE


End Sub
Public Function rlxCsvPart(ByVal strBuf As String) As Variant
Attribute rlxCsvPart.VB_Description = "|fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||590||fffd||fffd||182||fffd||fffd||10e|g|fffd|p|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
Attribute rlxCsvPart.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim lngLen As Long
    Dim lngCnt As Long
    Dim i As Long
    Dim strCol As String
    
    Dim blnSw As Boolean
    
    Const C_QUAT As String = """"
    Const C_COMA As String = ","
    
    Dim result() As Variant
    
    On Error GoTo ErrHandle
    
    lngLen = Len(strBuf)
    blnSw = False
    strCol = ""
    lngCnt = 0
    
    For i = 1 To lngLen
    
        Dim strChar As String
        strChar = Mid$(strBuf, i, 1)
        
        Select Case strChar
            Case C_QUAT
                If blnSw Then
                    blnSw = False
                Else
                    blnSw = True
                End If
            Case C_COMA
                If blnSw Then
                    strCol = strCol & strChar
                Else
                    lngCnt = lngCnt + 1
                    ReDim Preserve result(1 To lngCnt)
                    result(lngCnt) = strCol
                    strCol = ""
                End If
            Case Else
                strCol = strCol & strChar
        End Select

    Next
    
    lngCnt = lngCnt + 1
    ReDim Preserve result(1 To lngCnt)
    result(lngCnt) = strCol

    rlxCsvPart = result
    
    Exit Function
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
End Function
'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd|L|fffd|u|fffd|b|fffd|N|fffd||303||fffd||fffd|[|fffd|U|fffd||fffd||fffd||64fe|
'--------------------------------------------------------------
Sub getShareUsers()

    Dim Users As Variant
    Dim strBuf As String
    Dim i As Long
    
    On Error GoTo er
    
    If ActiveWorkbook Is Nothing Then
        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
    
    Users = ActiveWorkbook.UserStatus
    
    strBuf = "|fffd||fffd||fffd||742||fffd||fffd||fffd|Book|fffd||fffd||48f|W|fffd||fffd||fffd||102||fffd||fffd||90c6||fffd|[|fffd|U|fffd|F" & vbCrLf & vbCrLf
    For i = LBound(Users) To UBound(Users)
        strBuf = strBuf & rlxAscLeft(Users(i, 1) & Space(16), 16) & vbTab & Format(Users(i, 2), "yyyy/mm/dd hh:nn:ss") & vbTab
        Select Case Users(i, 3)
            Case 1
                strBuf = strBuf & "|fffd|r|fffd||fffd|"
            Case 2
                strBuf = strBuf & "|fffd||fffd||fffd|L"
        End Select
        strBuf = strBuf & vbCrLf
        
    Next i
    
    MsgBox strBuf, vbInformation, C_TITLE

    Exit Sub
er:
    MsgBox "|fffd||fffd||fffd||742||303|u|fffd|b|fffd|N|fffd||354|r|fffd||fffd||fffd|g|fffd|p|fffd||142||fffd||fffd|B", vbExclamation, C_TITLE

End Sub

'--------------------------------------------------------------
'|fffd|@|fffd|P|fffd|[|fffd|f|fffd|[|fffd|^|fffd||635e||fffd|V|fffd|[|fffd|g|fffd||10f|o(&T)
'--------------------------------------------------------------
Sub callTanpyo()
    On Error GoTo ErrHandle

    ThisWorkbook.Worksheets("|fffd|P|fffd|[|fffd|`|fffd||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||1cd||fffd||fffd||fffd|`|fffd|V|fffd|[|fffd|g").Copy
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
End Sub
'--------------------------------------------------------------
'|fffd|@|fffd|w|fffd||fffd||fffd|v|fffd|V|fffd|[|fffd|g|fffd||10f|o(&T)
'--------------------------------------------------------------
Sub callHelp()
    On Error GoTo ErrHandle

    ThisWorkbook.Worksheets("HELP").Copy
    
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
End Sub
Sub ShiftLeft()
    On Error GoTo ErrHandle
    If ActiveCell Is Nothing Then
        Exit Sub
    End If
    SelectionShiftCell 0, -1
    
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
End Sub
Sub ShiftRight()
    On Error GoTo ErrHandle
    If ActiveCell Is Nothing Then
        Exit Sub
    End If
    SelectionShiftCell 0, 1
    
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
End Sub
Sub ShiftUp()
    On Error GoTo ErrHandle
    If ActiveCell Is Nothing Then
        Exit Sub
    End If
    SelectionShiftCell -1, 0
    
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
End Sub
Sub ShiftDown()

    On Error GoTo ErrHandle
    
    If ActiveCell Is Nothing Then
        Exit Sub
    End If
    SelectionShiftCell 1, 0
    
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
End Sub
Private Sub SelectionShiftCell(ByVal lngRow As Long, ByVal lngCol As Long)
    
    Dim r As Range
    Dim c As Range
    
    On Error GoTo ErrHandle
    
    If ActiveCell Is Nothing Then
        Exit Sub
    End If
    
    For Each r In Selection.Areas
    
        err.Clear
        On Error Resume Next
        If c Is Nothing Then
            Set c = r.Offset(lngRow, lngCol)
        Else
            Set c = Union(c, r.Offset(lngRow, lngCol))
        End If
'        If Err.Number <> 0 Then
'            MsgBox "|fffd||693||fffd||fffd||142||fffd||fffd||fffd||348||342||12d02||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B", vbExclamation, C_TITLE
'            Exit Sub
'        End If
    
    Next

    If c Is Nothing Then
    Else
        c.Select
    End If

    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE

End Sub
'--------------------------------------------------------------
'|fffd|@|fffd|Q|fffd||197|p|fffd||fffd||fffd|[|fffd|N|fffd|u|fffd|b|fffd|N|fffd|\|fffd||fffd|
'--------------------------------------------------------------
Public Sub createReferenceBook()

    Dim strActBook As String
    Dim strTmpBook As String

    Dim FS As Object
    Dim WB As Workbook
    Dim XL As Excel.Application

    On Error GoTo ErrHandle
    
    If ActiveWorkbook Is Nothing Then
        Exit Sub
    End If
    
    
    If ActiveWorkbook.Path = "" Then
        MsgBox "|fffd||fffd||fffd|u|fffd|b|fffd|N|fffd||303|p|fffd|X|fffd||fffd||fffd||64fe||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B|fffd||6d1||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||113|x|fffd||fffd||fffd|s|fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation, C_TITLE
        Exit Sub
    End If

    Dim blnResult As Boolean
    If frmReference.Start(blnResult) = vbCancel Then
        Exit Sub
    End If


    Set FS = CreateObject("Scripting.FileSystemObject")

    strActBook = ActiveWorkbook.FullName
    strTmpBook = rlxGetTempFolder() & C_REF_TEXT & FS.getFileName(ActiveWorkbook.name)

    FS.CopyFile strActBook, strTmpBook

    If blnResult Then
        Set XL = New Excel.Application
        
        XL.visible = True
        
        Set WB = XL.Workbooks.Open(filename:=strTmpBook, ReadOnly:=True)
        AppActivate XL.Caption
    Else
        Set WB = Workbooks.Open(filename:=strTmpBook, ReadOnly:=True)
        AppActivate Application.Caption
    
    End If
    
    Set FS = Nothing

    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
End Sub
'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd||742||303|u|fffd|b|fffd|N|fffd||fffd||1c2||74e||fffd||fffd||fffd|p|fffd||14a|J|fffd||fffd||fffd||202||fffd||fffd||fffd|
'--------------------------------------------------------------
Public Sub changeReferenceBook()

    Dim strActBook As String
    Dim strTmpBook As String

    Dim FS As Object
    Dim WB As Workbook
    Dim XL As Excel.Application

    On Error GoTo ErrHandle
    
    If ActiveWorkbook Is Nothing Then
        Exit Sub
    End If
    
    If ActiveWorkbook.Path = "" Then
        MsgBox "|fffd||fffd||fffd|u|fffd|b|fffd|N|fffd||303|p|fffd|X|fffd||fffd||fffd||64fe||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B|fffd||6d1||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||113|x|fffd||fffd||fffd|s|fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation, C_TITLE
        Exit Sub
    End If

    Set FS = CreateObject("Scripting.FileSystemObject")

    If Left$(FS.getFileName(ActiveWorkbook.name), 5) = C_REF_TEXT Then
        MsgBox "|fffd||fffd||fffd||142||24e|Q|fffd||197|p|fffd||303|u|fffd|b|fffd|N|fffd||fffd||fffd|J|fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B", vbExclamation, C_TITLE
        Exit Sub
    End If
    
    Set WB = ActiveWorkbook

    strActBook = ActiveWorkbook.FullName
    strTmpBook = rlxGetTempFolder() & C_REF_TEXT & FS.getFileName(ActiveWorkbook.name)

    FS.CopyFile strActBook, strTmpBook

    WB.Close

    Workbooks.Open filename:=strTmpBook, ReadOnly:=True
    AppActivate Application.Caption
    
    Set FS = Nothing
    Set WB = Nothing
    
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
End Sub
'--------------------------------------------------------------
'|fffd|@|fffd|Q|fffd||197|p|fffd||fffd||fffd|[|fffd|N|fffd|u|fffd|b|fffd|N|fffd|\|fffd||fffd|
'--------------------------------------------------------------
Public Sub OpenReferenceBook()

    Dim strActBook As String
    Dim strTmpBook As String
    Dim strFile As String
    
    On Error GoTo ErrHandle

    strFile = Application.GetOpenFilename(, , "|fffd|Q|fffd||183||fffd||fffd|[|fffd|N|fffd|u|fffd|b|fffd|N|fffd|I|fffd||fffd|", , False)
    If strFile = "False" Then
        '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd|w|fffd||80b3||fffd||fffd||202||fffd||fffd||fffd||fffd||fffd||fffd||a347|
        Exit Sub
    End If
    
    '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||311||fffd||fffd||743|`|fffd|F|fffd|b|fffd|N
    If rlxIsFileExists(strFile) Then
    Else
        MsgBox "|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd||fffd|B", vbExclamation, C_TITLE
        Exit Sub
    End If

    Dim blnResult As Boolean
    If frmReference.Start(blnResult) = vbCancel Then
        Exit Sub
    End If


    Dim FS As Object
    Dim WB As Workbook
    Dim XL As Excel.Application

    Set FS = CreateObject("Scripting.FileSystemObject")

    strActBook = strFile
    strTmpBook = rlxGetTempFolder() & C_REF_TEXT & FS.getFileName(strFile)

    FS.CopyFile strActBook, strTmpBook

    If blnResult Then
        Set XL = New Excel.Application
        
        XL.visible = True
        
        Set WB = XL.Workbooks.Open(filename:=strTmpBook, ReadOnly:=True)
        AppActivate XL.Caption
    Else
        Set WB = Workbooks.Open(filename:=strTmpBook, ReadOnly:=True)
        AppActivate Application.Caption
    End If
    
    
    Set FS = Nothing

    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
    
End Sub

Sub LegacyBackColor()

    Dim lngColor As Long
    
    On Error GoTo ErrHandle
    
    If ActiveWorkbook Is Nothing Then
        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
    
    lngColor = Selection.Interior.Color
    If frmColor.Start(lngColor) = vbCancel Then
        Exit Sub
    End If
    
    Selection.Interior.Color = lngColor
    
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE

End Sub
Sub LegacyFontColor()

    Dim lngColor As Long
    
    On Error GoTo ErrHandle
    
    If checkInit() <> vbOK Then
        Exit Sub
    End If
  
    lngColor = Selection.Font.Color
    If frmColor.Start(lngColor) = vbCancel Then
        Exit Sub
    End If
    
    Selection.Font.Color = lngColor
    
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE

End Sub
Private Function checkInit() As Long

    On Error GoTo ErrHandle

    If ActiveWorkbook Is Nothing Then
        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        checkInit = vbCancel
        Exit Function
    End If
    
    checkInit = vbOK
    
    Exit Function
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE

End Function

Sub execPreview()
    On Error Resume Next
    ActiveWindow.SelectedSheets.PrintOut preview:=True
End Sub
Sub verticalLine()
    On Error Resume Next
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .Weight = xlThin
    End With
End Sub
Sub verticalLineToggle()
    On Error Resume Next
    setLineStyle Selection.Borders(xlInsideVertical)
End Sub
Sub aroundLineToggle()

    Dim ret As Long
    On Error Resume Next
    With Selection.Borders(xlEdgeTop)
        Select Case True
            Case .LineStyle = xlLineStyleNone
                ret = 0
            Case .LineStyle = xlContinuous And .Weight = xlThin
                ret = 1
            Case Else
                ret = 2
        End Select
        
        ret = ret + 1
        If ret > 2 Then
            ret = 0
        End If
        
    End With
    
    With Selection.Borders(xlEdgeTop)
        Select Case ret
            Case 0
                .LineStyle = xlLineStyleNone
            Case 1
                .LineStyle = xlContinuous
                .Weight = xlThin
            Case Else
                .LineStyle = xlContinuous
                .Weight = xlMedium
        End Select
    End With
    With Selection.Borders(xlEdgeLeft)
        Select Case ret
            Case 0
                .LineStyle = xlLineStyleNone
            Case 1
                .LineStyle = xlContinuous
                .Weight = xlThin
            Case Else
                .LineStyle = xlContinuous
                .Weight = xlMedium
        End Select
    End With
    With Selection.Borders(xlEdgeRight)
        Select Case ret
            Case 0
                .LineStyle = xlLineStyleNone
            Case 1
                .LineStyle = xlContinuous
                .Weight = xlThin
            Case Else
                .LineStyle = xlContinuous
                .Weight = xlMedium
        End Select
    End With
    With Selection.Borders(xlEdgeBottom)
        Select Case ret
            Case 0
                .LineStyle = xlLineStyleNone
            Case 1
                .LineStyle = xlContinuous
                .Weight = xlThin
            Case Else
                .LineStyle = xlContinuous
                .Weight = xlMedium
        End Select
    End With
    
End Sub
Sub tableLineToggle()

    Dim ret As Long
    On Error Resume Next
    With Selection.Borders(xlEdgeTop)
        Select Case True
            Case .LineStyle = xlLineStyleNone
                ret = 0
            Case Else
                ret = 1
        End Select
        
        ret = ret + 1
        If ret > 1 Then
            ret = 0
        End If
        
    End With
    
    With Selection.Borders(xlEdgeTop)
        Select Case ret
            Case 0
                .LineStyle = xlLineStyleNone
            Case Else
                .LineStyle = xlContinuous
                .Weight = xlThin
        End Select
    End With
    With Selection.Borders(xlEdgeLeft)
        Select Case ret
            Case 0
                .LineStyle = xlLineStyleNone
            Case Else
                .LineStyle = xlContinuous
                .Weight = xlThin
        End Select
    End With
    With Selection.Borders(xlEdgeRight)
        Select Case ret
            Case 0
                .LineStyle = xlLineStyleNone
            Case Else
                .LineStyle = xlContinuous
                .Weight = xlThin
        End Select
    End With
    With Selection.Borders(xlEdgeBottom)
        Select Case ret
            Case 0
                .LineStyle = xlLineStyleNone
            Case Else
                .LineStyle = xlContinuous
                .Weight = xlThin
        End Select
    End With
    With Selection.Borders(xlInsideHorizontal)
        Select Case ret
            Case 0
                .LineStyle = xlLineStyleNone
            Case Else
                .LineStyle = xlContinuous
                .Weight = xlThin
        End Select
    End With
End Sub
Sub winLineToggle()
    Dim ret As Long
    On Error Resume Next
    With Selection.Borders(xlEdgeTop)
        Select Case True
            Case .LineStyle = xlLineStyleNone
                ret = 0
            Case Else
                ret = 1
        End Select
        
        ret = ret + 1
        If ret > 1 Then
            ret = 0
        End If
        
    End With
    
    With Selection.Borders(xlEdgeTop)
        Select Case ret
            Case 0
                .LineStyle = xlLineStyleNone
            Case Else
                .LineStyle = xlContinuous
                .Weight = xlThin
        End Select
    End With
    With Selection.Borders(xlEdgeLeft)
        Select Case ret
            Case 0
                .LineStyle = xlLineStyleNone
            Case Else
                .LineStyle = xlContinuous
                .Weight = xlThin
        End Select
    End With
    With Selection.Borders(xlEdgeRight)
        Select Case ret
            Case 0
                .LineStyle = xlLineStyleNone
            Case Else
                .LineStyle = xlContinuous
                .Weight = xlThin
        End Select
    End With
    With Selection.Borders(xlEdgeBottom)
        Select Case ret
            Case 0
                .LineStyle = xlLineStyleNone
            Case Else
                .LineStyle = xlContinuous
                .Weight = xlThin
        End Select
    End With
    With Selection.Borders(xlInsideHorizontal)
        Select Case ret
            Case 0
                .LineStyle = xlLineStyleNone
            Case Else
                .LineStyle = xlContinuous
                .Weight = xlThin
        End Select
    End With
    With Selection.Borders(xlInsideVertical)
        Select Case ret
            Case 0
                .LineStyle = xlLineStyleNone
            Case Else
                .LineStyle = xlContinuous
                .Weight = xlThin
        End Select
    End With
End Sub
Sub verticalNoLine()
    On Error Resume Next
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlNone
'        .ColorIndex = xlAutomatic
'        .TintAndShade = 0
'        .Weight = xlThin
    End With

End Sub
Sub HorizontalLine()
    On Error Resume Next
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .Weight = xlThin
    End With
End Sub
Sub HorizontalLineToggle()
    On Error Resume Next
    setLineStyle Selection.Borders(xlInsideHorizontal)
End Sub
Sub HorizontalNoLine()
    On Error Resume Next
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlNone
'        .ColorIndex = xlAutomatic
'        .TintAndShade = 0
'        .Weight = xlThin
    End With

End Sub
Private Sub setLineStyle(ByRef r As Border)

    Dim ret As Long

    On Error GoTo ErrHandle
    
    With r
        Select Case True
            Case .LineStyle = xlLineStyleNone
                ret = 0
            Case .LineStyle = xlContinuous And .Weight = xlHairline
                ret = 1
            Case Else
                ret = 2
        End Select
        
        ret = ret + 1
        If ret > 2 Then
            ret = 0
        End If
        
        Select Case ret
            Case 0
                .LineStyle = xlLineStyleNone
            Case 1
                .LineStyle = xlContinuous
                .Weight = xlHairline
            Case Else
                .LineStyle = xlContinuous
                .Weight = xlThin
        End Select
    End With
    
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
End Sub
Sub documentSheet()

    Dim r As Range
    
    On Error Resume Next
    
    Set r = ActiveSheet.Cells

    r.NumberFormatLocal = "@"
    
    With r.Font
        .name = "|fffd|l|fffd|r |fffd|S|fffd|V|fffd|b|fffd|N"
        .FontStyle = "|fffd|W|fffd||fffd|"
        .Size = 9
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0
        .ThemeFont = xlThemeFontNone
    End With
    
End Sub
Sub documentSheetMeiryo()

    Dim r As Range
    
    On Error Resume Next
    
    Set r = ActiveSheet.Cells

    r.NumberFormatLocal = "@"
    
    With r.Font
        .name = "|fffd||fffd||fffd|C|fffd||fffd||fffd|I"
        .FontStyle = "|fffd|W|fffd||fffd|"
        .Size = 9
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0
        .ThemeFont = xlThemeFontNone
    End With
    
End Sub
Sub documentSheetMeiryoUI()

    Dim r As Range
    
    On Error Resume Next
    
    Set r = ActiveSheet.Cells

    r.NumberFormatLocal = "@"
    
    With r.Font
        .name = "Meiryo UI"
        .FontStyle = "|fffd|W|fffd||fffd|"
        .Size = 9
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0
        .ThemeFont = xlThemeFontNone
    End With
    
End Sub
Sub documentSheetHogan2()

    Dim r As Range
    
    On Error Resume Next
    
    Set r = ActiveSheet.Cells
    r.NumberFormatLocal = "@"
    r.ColumnWidth = 2
    
End Sub
Sub documentSheetHogan2Gothic9()

    Dim r As Range
    
    On Error Resume Next
    
    Set r = ActiveSheet.Cells
    r.NumberFormatLocal = "@"
    r.ColumnWidth = 2
    
    With r.Font
        .name = "|fffd|l|fffd|r |fffd|S|fffd|V|fffd|b|fffd|N"
        .FontStyle = "|fffd|W|fffd||fffd|"
        .Size = 9
    End With
    
End Sub
Sub documentSheetHogan2Gothic9Str()

    Dim r As Range
    
    On Error Resume Next
    
    Set r = ActiveSheet.Cells

    r.NumberFormatLocal = "@"
    r.ColumnWidth = 2
    
    With r.Font
        .name = "|fffd|l|fffd|r |fffd|S|fffd|V|fffd|b|fffd|N"
        .FontStyle = "|fffd|W|fffd||fffd|"
        .Size = 9
    End With
    
End Sub
'Sub documentSheetHogan2()
'
'    Dim r As Range
'
'    On Error Resume Next
'
'    Set r = ActiveSheet.Cells
'
'    r.ColumnWidth = 2
'
'End Sub
Sub documentSheetHogan2Gothic11()

    Dim r As Range
    
    On Error Resume Next
    
    Set r = ActiveSheet.Cells
    r.NumberFormatLocal = "@"
    r.ColumnWidth = 2
    
    With r.Font
        .name = "|fffd|l|fffd|r |fffd|S|fffd|V|fffd|b|fffd|N"
        .FontStyle = "|fffd|W|fffd||fffd|"
        .Size = 11
    End With
    
End Sub
Sub documentSheetHogan2Gothic11Str()

    Dim r As Range
    
    On Error Resume Next
    
    Set r = ActiveSheet.Cells

    r.NumberFormatLocal = "@"
    r.ColumnWidth = 2
    
    With r.Font
        .name = "|fffd|l|fffd|r |fffd|S|fffd|V|fffd|b|fffd|N"
        .FontStyle = "|fffd|W|fffd||fffd|"
        .Size = 11
    End With
    
End Sub
Sub documentSheetUser()

    Dim r As Range
    Dim strFont As String
    Dim strPoint As String
    Dim strCol As String
    Dim strRow As String
    Dim blnBunrui As Boolean
    
    On Error Resume Next
    
    Set r = ActiveSheet.Cells

    blnBunrui = GetSetting(C_TITLE, "FormatCell", "Bunrui", False)
    strFont = GetSetting(C_TITLE, "FormatCell", "Font", "|fffd|l|fffd|r |fffd|S|fffd|V|fffd|b|fffd|N")
    strPoint = GetSetting(C_TITLE, "FormatCell", "Point", "9")
    strCol = GetSetting(C_TITLE, "FormatCell", "Col", "8.5")
    strRow = GetSetting(C_TITLE, "FormatCell", "Row", "11.25")

    If blnBunrui Then
        r.NumberFormatLocal = "G/|fffd|W|fffd||fffd|"
    Else
        r.NumberFormatLocal = "@"
    End If
    
    If GetSetting(C_TITLE, "FormatCell", "Size", False) Then
    
        r.ColumnWidth = Val(strCol)
        r.RowHeight = Val(strRow)
        
    End If
    
    With r.Font
        .name = strFont
        .FontStyle = "|fffd|W|fffd||fffd|"
        .Size = Val(strPoint)
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0
        .ThemeFont = xlThemeFontNone
    End With
    
End Sub
'|fffd|s|fffd||fffd||313||fffd||fffd||fffd||582||fffd|
Sub selTranspose()

    Dim sourceRange As Range
    Dim destRange As Range
    Dim rr As Range
    Dim sel As Range

    On Error GoTo e

    Application.ScreenUpdating = False

    ThisWorkbook.Worksheets("Undo").Cells.Clear
    
    Set sourceRange = Selection
    Set destRange = ThisWorkbook.Worksheets("Undo").Range(Selection.Address)
    
    For Each rr In sourceRange.Areas
        rr.Copy destRange.Worksheet.Range(rr.Address)
    Next

    sourceRange.Clear

    For Each rr In destRange.Areas
        rr.Copy
        Dim lngPos As Long
        Dim s As String
        
        lngPos = InStr(rr.Address, ":")
        If lngPos = 0 Then
            s = rr.Address
        Else
            s = Mid(rr.Address, 1, lngPos - 1)
        End If
        sourceRange.Worksheet.Range(s).PasteSpecial Paste:=xlPasteAll, Operation:=xlNone, SkipBlanks:=False, Transpose:=True
        If sel Is Nothing Then
            Set sel = Selection
        Else
            Set sel = Union(sel, Selection)
        End If
    Next
    
    sel.Select
    Application.CutCopyMode = False
e:
    Application.ScreenUpdating = True

End Sub
''|fffd|w|fffd||fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||302||682||fffd||fffd||101|A|fffd||fffd||fffd|R|fffd|[|fffd|h|fffd||317|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B
'Sub getNextNumber2()
'
'    Dim lngCnt As Long
'    Dim lngRow As Long
'    Dim lngCol As Long
'
'    Dim strBuf As String
'    Dim strHead As String
'    Dim strBottom As String
'    Dim strNum As String
'    Dim lngPos As Long
'    Dim lngLen As Long
'    Dim i As Long
'    Dim j As Long
'    Dim blnStart As Boolean
'
'    blnStart = False
'
'    On Error Resume Next
'
'    If Not TypeOf Selection Is Range Then
'        Exit Sub
'    End If
'
'    lngCol = Selection(1).Column
'    lngRow = Selection(1).row
'
'    For lngCnt = lngRow To 1 Step -1
'
'        strBuf = Cells(lngCnt, lngCol).Value
'        j = 0
'        For i = Len(strBuf) To 1 Step -1
'            Select Case Mid$(strBuf, i, 1)
'                Case "0" To "9"
'                    If Not blnStart Then
'                        blnStart = True
'                        j = i
'                    End If
'                Case Else
'                    If blnStart Then
'                        Exit For
'                    End If
'            End Select
'        Next
'        Select Case j
'            Case 0
'            Case Else
'                strHead = Mid$(strBuf, 1, i)
'                strNum = Mid$(strBuf, i + 1, j - i)
'                strBottom = Mid$(strBuf, j + 1, Len(strBuf) - j)
'                Exit For
'        End Select
'    Next
'
'    Cells(lngRow, lngCol).Value = strHead & Format$(Val(strNum) + 1, String(Len(strNum), "0") & strBottom)
'
'End Sub
''|fffd|w|fffd||fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||302||682||fffd||fffd||101|A|fffd||fffd||fffd|R|fffd|[|fffd|h|fffd||317|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B
'Sub getNextNumber()
'
'    Dim lngCnt As Long
'    Dim lngRow As Long
'    Dim lngCol As Long
'
'    Dim strBuf As String
'    Dim strHead As String
'    Dim strNum As String
'    Dim lngPos As Long
'    Dim lngLen As Long
'    Dim i As Long
'
'    On Error Resume Next
'
'    If Not TypeOf Selection Is Range Then
'        Exit Sub
'    End If
'
'    lngCol = Selection(1).Column
'    lngRow = Selection(1).row
'
'    For lngCnt = lngRow To 1 Step -1
'
'        strBuf = Cells(lngCnt, lngCol).Value
'        For i = Len(strBuf) To 1 Step -1
'            Select Case Mid$(strBuf, i, 1)
'                Case "0" To "9"
'                Case Else
'                    Exit For
'            End Select
'        Next
'        Select Case i
'            Case Len(strBuf)
'            Case 0
'                strHead = ""
'                strNum = strBuf
'                Exit For
'            Case Else
'                strHead = Mid$(strBuf, 1, i)
'                strNum = Mid$(strBuf, i + 1, Len(strBuf) - i)
'                Exit For
'        End Select
'    Next
'
'    Cells(lngRow, lngCol).Value = strHead & Format$(Val(strNum) + 1, String(Len(strNum), "0"))
'
'End Sub
'--------------------------------------------------------------
'|fffd|@|fffd|V|fffd|[|fffd|g|fffd||fffd||fffd||fffd|A1|fffd|Z|fffd||fffd||fffd||253|\|fffd||fffd|t|fffd||fffd|
'--------------------------------------------------------------
Sub setA1SheetName()

    On Error GoTo ErrHandle
    
    If ActiveWorkbook Is Nothing Then
        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
            
    If ActiveSheet Is Nothing Then
        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|V|fffd|[|fffd|g|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
    
    ActiveSheet.Cells(1, 1).Value = ActiveSheet.name

    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE

End Sub
'--------------------------------------------------------------
'|fffd|@|fffd|V|fffd|[|fffd|g|fffd||fffd||fffd||fffd|A1|fffd|Z|fffd||fffd||fffd||253|\|fffd||fffd|t|fffd||fffd|(ALL)
'--------------------------------------------------------------
Sub setA1SheetAll()

    Dim WS As Worksheet
    Dim strBuf As String
  
    On Error GoTo ErrHandle
    
    If ActiveWorkbook Is Nothing Then
        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
  
    strBuf = ""
    For Each WS In Worksheets
            
        If WS.visible = xlSheetVisible Then
            WS.Cells(1, 1).Value = WS.name
        End If
    Next

    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE

End Sub
Sub selectionTop()
    On Error GoTo ErrHandle
    Range(Selection, Selection.End(xlUp)).Select
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
End Sub
Sub selectionLeft()
    On Error GoTo ErrHandle
    Range(Selection, Selection.End(xlToLeft)).Select
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
End Sub
Sub selectionRight()
    On Error GoTo ErrHandle
    Range(Selection, Selection.End(xlToRight)).Select
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
End Sub
Sub selectionDown()
    On Error GoTo ErrHandle
    Range(Selection, Selection.End(xlDown)).Select
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
End Sub
Sub selectionLeftTop()
    On Error GoTo ErrHandle
    Range(Selection, Selection.End(xlUp)).Select
    Range(Selection, Selection.End(xlToLeft)).Select
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
End Sub
Sub selectionRightDown()
    On Error GoTo ErrHandle
    Range(Selection, Selection.End(xlToRight)).Select
    Range(Selection, Selection.End(xlDown)).Select
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
End Sub
Sub tagJump()

    Const C_SEARCH_NO As Long = 1
    Const C_SEARCH_BOOK As Long = 2
    Const C_SEARCH_SHEET As Long = 3
    Const C_SEARCH_ADDRESS As Long = 4
    Const C_SEARCH_STR As Long = 5

    Dim WB As Workbook
    Dim WS As Worksheet
    Dim strBook As String
    Dim strSheet As String
    Dim strAddress As String

    On Error GoTo ErrHandle
    
    If ActiveWorkbook Is Nothing Then
        Exit Sub
    End If

    strBook = Cells(ActiveCell.row, C_SEARCH_BOOK).Value
    If Len(strBook) = 0 Then
        Exit Sub
    End If
    strSheet = Cells(ActiveCell.row, C_SEARCH_SHEET).Value
    If Len(strSheet) = 0 Then
        Exit Sub
    End If
    strAddress = Cells(ActiveCell.row, C_SEARCH_ADDRESS).Value
    If Len(strAddress) = 0 Then
        Exit Sub
    End If

    On Error Resume Next
    Set WB = Workbooks.Open(filename:=strBook)
    AppActivate Application.Caption

    Set WS = WB.Worksheets(strSheet)
    WS.Select
    
    WS.Range(strAddress).Select
    WS.Shapes.Range(strAddress).Select

    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
End Sub
Sub saveRange()

    Dim strBuf As String
    Dim strBuf2 As String
    
    Dim strRange() As String
    Dim strSaveRange As String
    Dim lngCount As Long
    Dim i As Long
    
    On Error GoTo ErrHandle
    
    strSaveRange = Selection.Address(RowAbsolute:=False, ColumnAbsolute:=False)
    strBuf = strSaveRange
    
    strBuf2 = rlxGetSetting(C_TITLE, "ReSelect", "Range", "")
    strRange = Split(strBuf2, vbTab)
    
    lngCount = 1
    For i = LBound(strRange) To UBound(strRange)
        If strRange(i) <> strSaveRange Then
            strBuf = strBuf & vbTab & strRange(i)
            lngCount = lngCount + 1
            '|fffd||fffd||fffd|X|fffd|g|fffd||34d||151||fffd|P|fffd|O
            If lngCount >= 10 Then
                Exit For
            End If
        End If
    Next
    rlxSaveSetting C_TITLE, "ReSelect", "Range", strBuf
    
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
End Sub


Sub addFavorite()

    Dim strBuf As String
    
    Dim strBooks() As String
    Dim strBook As String
    Dim lngCount As Long
    Dim i As Long
    
    On Error GoTo ErrHandle
    
    If ActiveWorkbook Is Nothing Then
        Exit Sub
    End If
    
    strBook = ActiveWorkbook.FullName
    
    If Not rlxIsFileExists(strBook) Then
        MsgBox "|fffd|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd||fffd|B|fffd||6d1||fffd||fffd||fffd||fffd||102||fffd||fffd||73c8||fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
        Exit Sub
    End If

    strBuf = rlxGetSetting(C_TITLE, "Favirite", "FileList", "")
    strBooks = Split(strBuf, vbTab)
    
    For i = LBound(strBooks) To UBound(strBooks)
        If LCase(strBooks(i)) = LCase(strBook) Then
            MsgBox "|fffd||fffd||fffd||142||253|o|fffd|^|fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
            Exit Sub
        End If
    Next
    
    If Len(strBuf) = 0 Then
        strBuf = strBook
    Else
        strBuf = strBuf & vbTab & strBook
    End If
    
    rlxSaveSetting C_TITLE, "Favirite", "FileList", strBuf
    
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
    
End Sub
Sub nextWorksheet()

    Dim i As Long
    
    On Error GoTo ErrHandle
    
    If ActiveSheet Is Nothing Then
        Exit Sub
    End If
    
    For i = ActiveSheet.index + 1 To ActiveWorkbook.Worksheets.count
        If ActiveWorkbook.Worksheets(i).visible = xlSheetVisible Then
            ActiveWorkbook.Worksheets(i).Select
            Exit For
        End If
    Next
    
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
End Sub
Sub prevWorksheet()
    
    Dim i As Long
    
    On Error GoTo ErrHandle
    
    If ActiveSheet Is Nothing Then
        Exit Sub
    End If
    For i = ActiveSheet.index - 1 To 1 Step -1
        If ActiveWorkbook.Worksheets(i).visible = xlSheetVisible Then
            ActiveWorkbook.Worksheets(i).Select
            Exit For
        End If
    Next
    
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
End Sub
Sub nextWorkbook()

    Dim i As Long
    Dim blnFind As Boolean
    
    On Error GoTo ErrHandle
    
    If ActiveWorkbook Is Nothing Then
        Exit Sub
    End If
    
    blnFind = False
    
    For i = 1 To Workbooks.count
        If blnFind Then
            Workbooks(i).Activate
            Exit For
        End If
        If UCase(ActiveWorkbook.name) = UCase(Workbooks(i).name) Then
            blnFind = True
        End If
    Next
    
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
End Sub
Sub prevWorkbook()

    Dim i As Long
    Dim blnFind As Boolean
    
    On Error GoTo ErrHandle
    
    If ActiveWorkbook Is Nothing Then
        Exit Sub
    End If
    
    blnFind = False
    
    For i = Workbooks.count To 1 Step -1
        If blnFind Then
            Workbooks(i).Activate
            Exit For
        End If
        If UCase(ActiveWorkbook.name) = UCase(Workbooks(i).name) Then
            blnFind = True
        End If
    Next
    
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
End Sub
Sub createContentsEx()
    Const C_NAME As String = "|fffd||68e||fffd|"
    Const C_NO As Long = 1
    Const C_SHEET_NAME As Long = 2
    Const C_PAPER_SIZE As Long = 3
    Const C_PAGES As Long = 4
    Const C_HEAD_ROW = 2
    Const C_START_ROW = 3

    Dim WB As Workbook
    Dim WS As Worksheet
    Dim s As Worksheet
    Dim lngCount As Long

    Set WB = ActiveWorkbook
    
    '|fffd|V|fffd|[|fffd|g|fffd||311||fffd||fffd||743|`|fffd|F|fffd|b|fffd|N
    For Each s In WB.Worksheets
        If s.name = C_NAME Then
            If MsgBox("|fffd|u" & C_NAME & "|fffd|v|fffd|V|fffd|[|fffd|g|fffd||fffd||fffd||fffd||fffd||251||fffd||fffd||742||fffd||fffd||702||fffd||fffd|B|fffd||d3dc||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|H", vbOKCancel + vbQuestion, C_TITLE) <> vbOK Then
                Exit Sub
            Else
                '|fffd||fffd||fffd||742||fffd||fffd||fffd||a347||fffd||34d||d3dc|
                Application.DisplayAlerts = False
                s.Delete
                Application.DisplayAlerts = True
            End If
        End If
    Next
    
    On Error GoTo e
    
    Application.ScreenUpdating = False
    Set WS = WB.Worksheets.Add(WB.Worksheets(1))
    WS.name = C_NAME
    
    WS.Cells(1, 1).Value = "|fffd|u|fffd|b|fffd|N|fffd||fffd|:" & WB.name
    
    lngCount = C_START_ROW
    WS.Cells(lngCount, C_NO).Value = "No."
    WS.Cells(lngCount, C_SHEET_NAME).Value = "|fffd|V|fffd|[|fffd|g|fffd||fffd|"
    WS.Cells(lngCount, C_PAPER_SIZE).Value = "|fffd|p|fffd||fffd|"
    WS.Cells(lngCount, C_PAGES).Value = "|fffd|y|fffd|[|fffd|W|fffd||fffd|"
    
    lngCount = lngCount + 1
    
    For Each s In WB.Worksheets
    
        If s.name <> C_NAME Then
        
            If s.visible = xlSheetVisible Then
        
                WS.Cells(lngCount, C_NO).Value = lngCount - C_START_ROW
                WS.Cells(lngCount, C_SHEET_NAME).Value = s.name
                
                WS.Hyperlinks.Add _
                    Anchor:=WS.Cells(lngCount, C_SHEET_NAME), _
                    Address:="", _
                    SubAddress:="'" & s.name & "'!" & s.Cells(1, 1).Address, _
                    TextToDisplay:=s.name
                
                Select Case s.PageSetup.PaperSize
                    Case xlPaperA3
                        WS.Cells(lngCount, C_PAPER_SIZE).Value = "A3"
                    Case xlPaperA4
                        WS.Cells(lngCount, C_PAPER_SIZE).Value = "A4"
                    Case xlPaperA5
                        WS.Cells(lngCount, C_PAPER_SIZE).Value = "A5"
                    Case xlPaperB4
                        WS.Cells(lngCount, C_PAPER_SIZE).Value = "B4"
                    Case xlPaperB5
                        WS.Cells(lngCount, C_PAPER_SIZE).Value = "B5"
                    Case Else
                        WS.Cells(lngCount, C_PAPER_SIZE).Value = "|fffd||fffd||fffd||311||fffd|"
                End Select
                WS.Cells(lngCount, C_PAGES).Value = s.PageSetup.Pages.count
            
                lngCount = lngCount + 1
            End If
        End If
    Next

    WS.Columns("A").ColumnWidth = 5
    WS.Columns("B:D").AutoFit
    Dim r As Range
    Set r = WS.Cells(C_START_ROW, 1).CurrentRegion
    
    r.VerticalAlignment = xlTop
    r.Select
    
    execSelectionRowDrawGrid
    
    WS.Cells(lngCount, C_PAPER_SIZE).Value = "|fffd||fffd||fffd|v"
    WS.Cells(lngCount, C_PAGES).Value = "=SUM(D" & C_START_ROW + 1 & ":D" & lngCount - 1 & ")"

e:
    Application.ScreenUpdating = True
    Set r = Nothing

    Set WS = Nothing
    Set WB = Nothing

End Sub

Sub createContents()
    
    On Error GoTo ErrHandle

    frmContents.Show

    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE

End Sub
Sub cellEditExt()

    Dim strFileName As String
    Dim bytBuf() As Byte
    Const C_FF As Byte = &HFF
    Const C_FE As Byte = &HFE
    Dim strBuf As String
    Dim fp As Integer
    Dim lngSize As Long
    Dim WSh As Object
    Dim FS As Object
    Dim strBefore As String
    Dim strAfter As String
    Dim blnBOM As Boolean
    Dim strEditor As String
    Dim r As Range
    
    Dim strEncode As String
    
    On Error GoTo e
    
    If ActiveCell Is Nothing Then
        Exit Sub
    End If
    
'    If selection.count > 1 And selection.count <> selection(1, 1).MergeArea.count Then
    If Selection.CountLarge > 1 And Selection.CountLarge <> Selection(1, 1).MergeArea.count Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd|Z|fffd||fffd||fffd|I|fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B|fffd|Z|fffd||fffd||fffd||342|P|fffd||82||302||751|I|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation + vbOKOnly, C_TITLE
        Exit Sub
    End If
    
    frmInformation.Message = "|fffd|O|fffd||fffd||fffd|G|fffd|f|fffd|B|fffd|^|fffd|N|fffd||fffd||fffd||fffd||fffd||142||fffd||fffd|B|fffd||fffd||182||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd||fffd||a347||fffd||242||34a|O|fffd||fffd||fffd|G|fffd|f|fffd|B|fffd|^|fffd||fffd||fffd|I|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
    frmInformation.Show
    
    Set r = ActiveCell
    
    Dim strNotepad As String

    Set FS = CreateObject("Scripting.FileSystemObject")
    strNotepad = rlxAddFileSeparator(FS.GetSpecialFolder(0)) & "notepad.exe"
    
    strEditor = GetSetting(C_TITLE, "EditEx", "Editor", strNotepad)
    strEncode = GetSetting(C_TITLE, "EditEx", "Encode", C_SJIS)
    blnBOM = GetSetting(C_TITLE, "EditEx", "BOM", False)
    
    Dim utf8 As UTF8Encoding
    
    strBuf = Replace(Replace(r.Formula, vbCrLf, vbLf), vbLf, vbCrLf)
    
    Select Case strEncode
        Case C_UTF16
            bytBuf = strBuf
        Case C_UTF8
            Set utf8 = New UTF8Encoding
            bytBuf = utf8.getBytes(strBuf)
        Case Else
            bytBuf = strConv(strBuf, vbFromUnicode)
    End Select
    
    
    strFileName = rlxGetTempFolder() & "ActiveCell.tmp"
    
    fp = FreeFile()
    Open strFileName For Output As #fp
    Close fp
    
    fp = FreeFile()
    Open strFileName For Binary As #fp
    If blnBOM Then
        Put fp, , C_FF
        Put fp, , C_FE
    End If
    Put fp, , bytBuf
    Close fp
    
    strBefore = FS.GetFile(strFileName).DateLastModified
 
    Set WSh = CreateObject("WScript.Shell")
    
    On Error Resume Next
    Call WSh.Run("""" & strEditor & """ " & """" & strFileName & """", 1, True)
    If err.Number <> 0 Then
        MsgBox "|fffd|G|fffd|f|fffd|B|fffd|^|fffd||30b|N|fffd||fffd||fffd||24e||fffd||fffd|s|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B|fffd||752||fffd||fffd||fffd|m|fffd|F|fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
        GoTo e
    End If
    
    On Error GoTo e
    
    Set WSh = Nothing

    strAfter = FS.GetFile(strFileName).DateLastModified

    '|fffd||3cd|X|fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||a347|
    If strBefore <> strAfter Then

        fp = FreeFile()
        Open strFileName For Binary As #fp
        
        lngSize = LOF(fp)
        
        If lngSize <> 0 Then
        
            ReDim bytBuf(0 To lngSize - 1)
            Get fp, , bytBuf
            
            If UBound(bytBuf) - LBound(bytBuf) + 1 >= 2 Then
                'BOM|fffd||fffd||fffd||702||702||fffd||102||fffd||fffd||fffd||a347||fffd||d3dc|
                If bytBuf(0) = C_FF And bytBuf(1) = C_FE Then
                    bytBuf = MidB(bytBuf, 3)
                End If
            End If
            
            Select Case strEncode
                Case C_UTF16
                    strBuf = bytBuf
                Case C_UTF8
                    strBuf = utf8.GetString(bytBuf)
                Case Else
                    strBuf = strConv(bytBuf, vbUnicode)
            End Select
            
            On Error Resume Next
            err.Clear
            r.Formula = Replace(strBuf, vbCrLf, vbLf)
            If err.Number <> 0 Then
                MsgBox "|fffd||fffd||fffd||310||752||fffd||24e||fffd||fffd|s|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd||94|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
            End If
        Else
            r.Formula = ""
        End If
        Close fp
    
    End If
    
e:
    On Error Resume Next
    Close
    
    Set FS = Nothing
    Set utf8 = Nothing
    
    Kill strFileName
    
    Unload frmInformation
    
End Sub

Public Sub saveImage()

    Dim m_Width As Double, m_Height As Double
    Dim m_SavePath As String
    Dim argSavePath As String
    Dim strExt As String
    
    On Error GoTo ErrHandle
    
    If LCase(TypeName(Selection)) <> "picture" Then
        MsgBox "|fffd||645c||fffd||fffd||fffd|P|fffd||91|I|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
        Exit Sub
    End If
    
    argSavePath = Application.GetSaveAsFilename(, "PNG|fffd|t|fffd|@|fffd|C|fffd||fffd|(*.png), *.png,JPEG|fffd|t|fffd|@|fffd|C|fffd||fffd|(*.jpg), *.jpg,GIF|fffd|t|fffd|@|fffd|C|fffd||fffd|(*.gif), *.gif")
    If argSavePath = "False" Then
        Exit Sub
    End If
    
    If Len(argSavePath) > 0 Then
        Application.ScreenUpdating = False
        
        Selection.CopyPicture xlScreen, xlBitmap
        ActiveSheet.Paste
        With Selection
            m_Width = .Width: m_Height = .Height
            .CopyPicture xlScreen, xlBitmap
            .Delete
        End With
        
        On Error Resume Next
        With ActiveSheet.ChartObjects.Add(0, 0, m_Width, m_Height).Chart
            .Paste
            .ChartArea.Border.LineStyle = 0
            .Export argSavePath, UCase(Right$(argSavePath, 3))
            .Parent.Delete
        End With
        On Error GoTo 0
        
        Application.ScreenUpdating = True
    End If
    
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
End Sub


Sub swapAreas()

    '|fffd||3d0||fffd||fffd||933e|
    Dim r As Range
    Dim blnRange As Boolean
    
    blnRange = False
    Select Case True
        Case ActiveWorkbook Is Nothing
        Case ActiveCell Is Nothing
        Case Selection Is Nothing
        Case TypeOf Selection Is Range
            blnRange = True
        Case Else
    End Select
    If blnRange Then
    Else
        MsgBox "|fffd|I|fffd||fffd||348||342||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If

    If Selection.CountLarge > C_MAX_CELLS Then
        MsgBox "|fffd||fffd||282||303|Z|fffd||fffd||fffd||fffd||fffd|I|fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B " & C_MAX_CELLS & "|fffd||209||fffd||fffd||242||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation + vbOKOnly, C_TITLE
        Exit Sub
    End If
    
    If Selection.Areas.count <> 2 Then
        MsgBox "|fffd|Q|fffd||82||314||348||342||fffd|I|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation + vbOKOnly, C_TITLE
        Exit Sub
    End If
    
    If Selection.Areas(1).Rows.count <> Selection.Areas(2).Rows.count Or _
       Selection.Areas(1).Columns.count <> Selection.Areas(2).Columns.count Then
        MsgBox "|fffd|Q|fffd||82||314||348||342||30f|c|fffd||fffd||fffd|T|fffd|C|fffd|Y|fffd||353||fffd||fffd||fffd||fffd||242||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation + vbOKOnly, C_TITLE
        Exit Sub
    End If
    

    Dim strAddress As String
    
    strAddress = Selection.Address
    
    ThisWorkbook.Worksheets("Undo").Cells.Clear
    
    Set mUndo.sourceRange = Selection
    Set mUndo.destRange = ThisWorkbook.Worksheets("Undo").Range(Selection.Address)
    
    Dim rr As Range
    For Each rr In mUndo.sourceRange.Areas
        rr.Copy mUndo.destRange.Worksheet.Range(rr.Address)
    Next
    
    On Error Resume Next
    
    Application.ScreenUpdating = False
    
    '|fffd|G|fffd||fffd||fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B
    mUndo.destRange.Worksheet.Range(mUndo.sourceRange.Areas(2).Address).Copy mUndo.sourceRange.Areas(1)
    mUndo.destRange.Worksheet.Range(mUndo.sourceRange.Areas(1).Address).Copy mUndo.sourceRange.Areas(2)
    
    Application.ScreenUpdating = True
    
    ActiveSheet.Range(strAddress).Select
    
    'Undo
    Application.OnUndo "Undo", "execUndo"
    
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
End Sub
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd||590||fffd|
Sub nop()

End Sub
Sub setShortCutKey()
    
    Dim strList() As String
    Dim strkey() As String
    Dim strResult As String
    Dim lngMax As Long
    Dim i As Long
    
    Const C_ON As String = "1"
    
    On Error GoTo ErrHandle
    
    strResult = rlxGetSetting(C_TITLE, "ShortCut", "KeyList", "")
    strList = Split(strResult, vbTab)

    lngMax = UBound(strList)

    For i = 0 To lngMax
        strkey = Split(strList(i) & vbLf & C_ON, vbLf)
        If strkey(6) = C_ON Then
            Application.OnKey strkey(2), strkey(5)
        End If
    Next
    
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
End Sub
Sub removeShortCutKey()

    Dim strList() As String
    Dim strkey() As String
    Dim strResult As String
    Dim lngMax As Long
    Dim i As Long
    
    On Error Resume Next

'    '|fffd|L|fffd|[|fffd||fffd||fffd||30d||d3dc|
    strResult = rlxGetSetting(C_TITLE, "ShortCut", "KeyList", "")
    strList = Split(strResult, vbTab)

    lngMax = UBound(strList)

    For i = 0 To lngMax
        strkey = Split(strList(i), vbLf)
        Application.OnKey strkey(2)
    Next

End Sub
Sub rlxCrossClick()
    ActiveCell.Select
    SendKeys "{F2}"
End Sub
Sub addPageBreak()

    On Error Resume Next

    ActiveWindow.SelectedSheets.HPageBreaks.Add Before:=ActiveCell

End Sub
Sub resetPageBreak()

    On Error Resume Next

    ActiveSheet.ResetAllPageBreaks

End Sub
Sub removePageBreak()

    On Error Resume Next

    Dim p As HPageBreak
    
    For Each p In ActiveWindow.SelectedSheets.HPageBreaks
        If p.Location.row = ActiveCell.row Then
            p.Delete
            Exit For
        End If
    Next
    
End Sub
Sub getFileNameFromClipboard()

    Dim files As Variant
    Dim strBuf As String
    
    On Error GoTo ErrHandle
  
    If ActiveCell Is Nothing Then
        Exit Sub
    End If
    
    strBuf = rlxGetFileNameFromCli()
    
    If strBuf = "" Then
        Exit Sub
    End If
    
    files = Split(strBuf, vbTab)
    
    Dim i As Long
    For i = LBound(files) To UBound(files) Step 1
        ActiveCell.Offset(i, 0).Value = files(i)
    Next
    
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE

End Sub
Sub openFileNameFromClipboard()

    Dim strActBook As String
    Dim strTmpBook As String

    Dim FS As Object
    Dim WB As Workbook
    Dim XL As Excel.Application

    On Error GoTo ErrHandle
    Dim files As Variant
    Dim strBuf As String
    
    On Error GoTo ErrHandle
  
    strBuf = rlxGetFileNameFromCli()
    
    If strBuf = "" Then
        Exit Sub
    End If
    
    files = Split(strBuf, vbTab)
    
    If UBound(files) > 0 Then
        If MsgBox("|fffd||fffd||fffd||fffd||fffd||303|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd|w|fffd||80b3||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B|fffd||14f||fffd||fffd||303|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd|J|fffd||fffd||fffd||702||fffd||fffd|B", vbOKCancel + vbQuestion, C_TITLE) <> vbOK Then
            Exit Sub
        End If
    End If
    
    Set FS = CreateObject("Scripting.FileSystemObject")
    
    strActBook = files(0)
        
    If Not FS.FileExists(strActBook) Then
        Set FS = Nothing
        Exit Sub
    End If
        
    If Not rlxIsExcelFile(strActBook) Then
        Set FS = Nothing
        Exit Sub
    End If
        
    strTmpBook = rlxGetTempFolder() & C_REF_TEXT & FS.getFileName(files(0))

    FS.CopyFile strActBook, strTmpBook
    
    Set FS = Nothing

    Dim blnResult As Boolean
    If frmReference.Start(blnResult) = vbCancel Then
        Exit Sub
    End If

    If blnResult Then
        Set XL = New Excel.Application
        
        XL.visible = True
        
        Set WB = XL.Workbooks.Open(filename:=strTmpBook, ReadOnly:=True)
        AppActivate XL.Caption
    Else
        Set WB = Workbooks.Open(filename:=strTmpBook, ReadOnly:=True)
        AppActivate Application.Caption
    
    End If
    
    Exit Sub
ErrHandle:
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE

End Sub


Sub copyCurrentExcel()

    Dim strFiles() As String
    Dim strFile As String
    
    strFile = ActiveWorkbook.FullName

    If (Not rlxIsFileExists(strFile)) Then
        MsgBox "|fffd|u|fffd|b|fffd|N|fffd||fffd||fffd||6d1||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||202||fffd||fffd||60a4||fffd||142||fffd||fffd|B" & vbCrLf & "|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||582||303|R|fffd|s|fffd|[|fffd||12192|f|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
        Exit Sub
    End If
    
    If ActiveWorkbook.Saved = False Then
        If MsgBox("|fffd|u|fffd|b|fffd|N|fffd||255||3cd|X|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B|fffd||6d1||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|H", vbYesNo + vbQuestion, C_TITLE) = vbYes Then
            ActiveWorkbook.Save
        End If
    End If
        
    strFiles = Split(strFile, vbTab)
    SetCopyClipText strFiles
    
    MsgBox ActiveWorkbook.name & "|fffd||fffd||fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||243|R|fffd|s|fffd|[|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE

End Sub
'
' |fffd||fffd||fffd||381||310||fffd||38e|Q|fffd||194||fffd||fffd||fffd|
'
Function rlxGetFomuraRefType() As XlReferenceType

    Dim r As Range
    Dim lngExistRow As Long
    Dim lngExistCol As Long
    Dim strForm As String
    Dim i As Long
    
    '|fffd|s|fffd||fffd||fffd||30f||a347||fffd||182||80a0||fffd||fffd||fffd||fffd||fffd|A|fffd||fffd||fffd||38e|Q|fffd||fffd|
    rlxGetFomuraRefType = xlRelative
    
    On Error Resume Next
    
    For Each r In Selection

        If r.Rows.Hidden = False And r.Columns.Hidden = False Then

            Select Case Left(r.FormulaLocal, 1)
                '|fffd||fffd||fffd||30f||a347|
                Case "=", "+"
                    strForm = r.FormulaLocal
                    
                    Dim blnSw As Boolean
                    Dim blnFind As Boolean
                    blnSw = False
                    blnFind = False
                    
                    For i = 1 To Len(strForm)
                
                        Dim strChr As String
                        
                        strChr = Mid$(strForm, i, 1)
                        Select Case strChr
                            Case """"
                                If blnSw Then
                                    blnSw = False
                                Else
                                    blnSw = True
                                End If
                                
                                blnFind = False
                            Case "$"
                                blnFind = True
                            Case Else
                                If blnFind Then
                                    Select Case strChr
                                        Case "A" To "Z"
                                            lngExistCol = lngExistCol + 1
                                        Case "0" To "9"
                                            lngExistRow = lngExistRow + 1
                                    End Select
                                End If
                            
                                blnFind = False
                        End Select
                
                    Next
                    
                    Select Case True
                        Case lngExistCol > 0 And lngExistRow > 0
                            rlxGetFomuraRefType = xlAbsolute
                        Case lngExistCol > 0
                            rlxGetFomuraRefType = xlRelRowAbsColumn
                        Case lngExistRow > 0
                            rlxGetFomuraRefType = xlAbsRowRelColumn
                        Case Else
                            rlxGetFomuraRefType = xlRelative
                    End Select
                    
                    Exit Function
                Case Else
            End Select
            
        End If
    Next
                    
End Function
'
' |fffd||fffd||fffd||381||310||fffd||383|g|fffd|O|fffd||fffd|
'
Sub toggleAbsoluteFomura()

    Dim ref As XlReferenceType

    On Error Resume Next

    ref = rlxGetFomuraRefType()

    Select Case ref
        Case xlAbsolute
            execSelectionToAbsRowRelColumn
        Case xlRelRowAbsColumn
            execSelectionToRelative
        Case xlAbsRowRelColumn
            execSelectionToRelRowAbsColumn
        Case xlRelative
            execSelectionToAbsolute
    End Select

End Sub
'
' A1|fffd||fffd|R1C1|fffd|g|fffd|O|fffd||fffd|
'
Sub toggleReferenceStyle()

    On Error Resume Next

    If Application.ReferenceStyle = xlA1 Then
        Application.ReferenceStyle = xlR1C1
    Else
        Application.ReferenceStyle = xlA1
    End If

End Sub
Public Sub VisibleNames()

    Dim n As Object
    
    For Each n In ActiveWorkbook.Names
        If n.visible = False Then
            n.visible = True
        End If
    Next
    
    MsgBox "|fffd||fffd||fffd||5c2||102||316||fffd||fffd|O|fffd||312||fffd|`|fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE

End Sub
Sub execMatome01()

    execMatome "1"

End Sub
Sub execMatome02()

    execMatome "2"

End Sub
Sub execMatome03()

    execMatome "3"

End Sub
Sub execMatome04()

    execMatome "4"

End Sub
Sub execMatome05()

    execMatome "5"

End Sub
Sub execMatome(ByVal strNo As String)
    
    Dim strResult As String
    Dim varLine As Variant
    Dim varCol As Variant
    Dim i As Long
    
    strResult = rlxGetSetting(C_TITLE, "Combo", "ComboList" & strNo, "")
        
    varLine = Split(strResult, vbTab)
        
    For i = LBound(varLine) To UBound(varLine)
        varCol = Split(varLine(i), vbLf)
        Application.Run varCol(3)
    Next

End Sub
Attribute VB_Name = "basRibbon"
Option Explicit
    

    
Private Const C_START_ROW As Long = 25 '13
Private Const C_COL_NO As Long = 1
Private Const C_COL_CATEGORY As Long = 2
Private Const C_COL_MACRO As Long = 3
Private Const C_COL_LABEL As Long = 4
Private Const C_COL_DIVISION As Long = 5
Private Const C_COL_HELP As Long = 6
Private Const C_COL_DESCRIPTION As Long = 7

Private Const C_COLOR_OTHER As String = "99"

Private mIR As IRibbonUI

Private mSecTog01 As Boolean
Private mSecTog02 As Boolean
Private mSecTog03 As Boolean
Private mSecTog04 As Boolean
Private mSecTog05 As Boolean
Private mSecTog06 As Boolean

'|fffd|`|fffd|P|fffd||6d1||fffd||fffd||303|p|fffd|u|fffd||fffd||fffd|b|fffd|N|fffd||3d0||fffd|
Public pblnA1SaveCheck As Boolean

Public mLineEnable As Boolean
Public mScreenEnable As Boolean


    

'|fffd||fffd||fffd|{|fffd||fffd||fffd||fffd||fffd||c2bce||fffd||fffd||fffd||fffd|ID|fffd||fffd||fffd||fffd||fffd||302||702||703|}|fffd|N|fffd||fffd||fffd||fffd||fffd||182||fffd||fffd||10e||fffd||fffd|s|fffd||fffd||fffd||90c9||fffd|b|fffd|p|fffd|[|fffd||590||fffd|
Public Sub ribbonOnAction(control As IRibbonControl)
    
    Dim lngPos As Long
    Dim strBuf As String
    Dim strLabel As String
    
    On Error GoTo e
    
    '|fffd||fffd||fffd||fffd||fffd|}|fffd|N|fffd||fffd||fffd||15850||fffd||fffd|o|fffd|^|fffd||94|\|fffd||182||fffd||fffd||90bd||fffd||7c2||243|h|fffd|b|fffd|g|fffd||20d|~|fffd||315||fffd||fffd||fffd||fffd||fffd||fffd||d3dc|
    lngPos = InStr(control.id, ".")

    If lngPos = 0 Then
        strBuf = control.id
    Else
        strBuf = Mid$(control.id, 1, lngPos - 1)
    End If
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||303|}|fffd|N|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||fffd|B
    Application.Run strBuf
    
    getSheetItem control, strLabel, C_COL_LABEL
    
    Application.OnRepeat strLabel, strBuf
    
    Call RefreshRibbon

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub
'|fffd|`|fffd|F|fffd|b|fffd|N|fffd|{|fffd|b|fffd|N|fffd|X|fffd||752||fffd||64fe|
Public Sub GetPressed(control As IRibbonControl, ByRef returnValue)
    
    On Error GoTo e
    
    Select Case control.id
        Case "setAllA1saveCheck"
            returnValue = GetSetting(C_TITLE, "A1Save", "A1Check", False)
        Case "backupCheck"
            returnValue = GetSetting(C_TITLE, "Backup", "Check", False)
        Case "cautionReadOnly"
            returnValue = GetSetting(C_TITLE, "cautionReadOnly", "Check", False)
    End Select
    
    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub


'|fffd|`|fffd|F|fffd|b|fffd|N|fffd|{|fffd|b|fffd|N|fffd|X|fffd||752||fffd|
Public Sub ribbonOnActionCheck(control As IRibbonControl, pressed As Boolean)
    
    On Error GoTo e
    
    Select Case control.id
        Case "setAllA1saveCheck"
            SaveSetting C_TITLE, "A1Save", "A1Check", pressed
        Case "backupCheck"
            SaveSetting C_TITLE, "Backup", "Check", pressed
        Case "cautionReadOnly"
            SaveSetting C_TITLE, "cautionReadOnly", "Check", pressed
    End Select
    
    Call RefreshRibbon
        
    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub
'|fffd|`|fffd|F|fffd|b|fffd|N|fffd|{|fffd|b|fffd|N|fffd|XEnable/Disable
Sub setCheckEnabled(control As IRibbonControl, ByRef enabled)

    On Error GoTo e
    
    If Val(Application.Version) > C_EXCEL_VERSION_2007 Then
        Select Case control.id
            Case "setAllA1saveSetting"
                enabled = CBool(GetSetting(C_TITLE, "A1Save", "A1Check", False))
            Case "backupSetting"
                enabled = CBool(GetSetting(C_TITLE, "Backup", "Check", False))
            Case Else
                enabled = True
        End Select
    Else
        Select Case control.id
            Case "setAllA1saveSetting", "setAllA1saveCheck", "backupSetting", "backupCheck"
                enabled = False
            Case "cautionReadOnly"
                enabled = True
            Case Else
                enabled = True
        End Select
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub
'
' |fffd|w|fffd||fffd||fffd|v|fffd||fffd||fffd|e|fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|BcustomUI|fffd||fffd||fffd||fffd|g|fffd|p
'
Public Sub getSupertip(control As IRibbonControl, ByRef screentip)

    On Error GoTo e
    
    getSheetItem control, screentip, C_COL_HELP

    Call RefreshRibbon

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub
'
' |fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd|\|fffd||fffd||fffd||fffd||fffd|e|fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|BcustomUI|fffd||fffd||fffd||fffd|g|fffd|p
'
Public Sub getDescription(control As IRibbonControl, ByRef screentip)

    On Error GoTo e
    
    getSheetItem control, screentip, C_COL_DESCRIPTION

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub
'
' |fffd||fffd||fffd|x|fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|BcustomUI|fffd||fffd||fffd||fffd|g|fffd|p
'
Public Sub getLabel(control As IRibbonControl, ByRef screentip)

    On Error GoTo e
    
    getSheetItem control, screentip, C_COL_LABEL
    
    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub

'
' |fffd|V|fffd|[|fffd|g|fffd||fffd||fffd||fffd|w|fffd||8340||fffd||682||fffd||fffd||64fe||fffd||fffd||fffd||fffd|
'
Private Sub getSheetItem(control As IRibbonControl, ByRef screentip, lngItem As Long)

    Dim lngPos As Long
    Dim strBuf As String
    
    screentip = ""
    
    '|fffd||fffd||fffd||fffd||fffd|}|fffd|N|fffd||fffd||fffd||15850||fffd||fffd|o|fffd|^|fffd||94|\|fffd||182||fffd||fffd||90bd||fffd||7c2||243|h|fffd|b|fffd|g|fffd||20d|~|fffd||315||fffd||fffd||fffd||fffd||fffd||fffd||d3dc|
    lngPos = InStr(control.id, ".")

    If lngPos = 0 Then
        strBuf = control.id
    Else
        strBuf = Mid$(control.id, 1, lngPos - 1)
    End If
    
    Dim i As Long
    i = C_START_ROW
    Do Until ThisWorkbook.Worksheets("HELP").Cells(i, C_COL_NO).Value = ""
        If strBuf = ThisWorkbook.Worksheets("HELP").Cells(i, C_COL_MACRO).Value Then
            screentip = ThisWorkbook.Worksheets("HELP").Cells(i, lngItem).Value
            Exit Do
        End If
        i = i + 1
    Loop
    
End Sub
Sub legacyBackDefault()

    On Error Resume Next
    With Selection.Interior
        .Pattern = xlNone
    End With
    
    SaveSetting C_TITLE, "Color2003", "back", C_COLOR_OTHER
    Call RefreshRibbon

End Sub
Sub legacyFontDefault()

    On Error Resume Next
    With Selection.Font
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
    End With
    
    SaveSetting C_TITLE, "Color2003", "font", C_COLOR_OTHER
    Call RefreshRibbon

End Sub
Sub legacyLineDefault()

    On Error Resume Next
    With Selection.ShapeRange.Line
        .ForeColor.RGB = RGB(0, 0, 0)
    End With
    
    SaveSetting C_TITLE, "Color2003", "line", C_COLOR_OTHER
    Call RefreshRibbon
    
End Sub

Public Sub colorOnAction(control As IRibbonControl, selectedId As String, selectedIndex As Integer)

    On Error Resume Next

    Select Case control.id
        Case "fontColorGallery"
            Selection.Font.Color = ThisWorkbook.Colors(Val(Right(selectedId, 2)))
            SaveSetting C_TITLE, "Color2003", "font", Right(selectedId, 2)
            
        Case "backColorGallery"
            Selection.Interior.Color = ThisWorkbook.Colors(Val(Right(selectedId, 2)))
            SaveSetting C_TITLE, "Color2003", "back", Right(selectedId, 2)
            
        Case "lineColorGallery"
            Selection.ShapeRange.Line.ForeColor.RGB = ThisWorkbook.Colors(Val(Right(selectedId, 2)))
            SaveSetting C_TITLE, "Color2003", "line", Right(selectedId, 2)
        
    End Select
    
    Call RefreshRibbon

End Sub
'Public Sub stampOnAction(control As IRibbonControl, selectedId As String, selectedIndex As Integer)
'
'    On Error Resume Next
'
'    Dim strLine As String
'    Dim strColor As Variant
'
'
'    Select Case selectedIndex
'        Case 0
'            strLine = C_STAMP_LINE_SINGLE
'            strColor = vbBlack
'        Case 1
'            strLine = C_STAMP_LINE_BOLD
'            strColor = vbBlack
'        Case 2
'            strLine = C_STAMP_LINE_DOUBLE
'            strColor = vbBlack
'        Case 3
'            strLine = C_STAMP_LINE_SINGLE
'            strColor = vbRed
'        Case 4
'            strLine = C_STAMP_LINE_BOLD
'            strColor = vbRed
'        Case 5
'            strLine = C_STAMP_LINE_DOUBLE
'            strColor = vbRed
'    End Select
'
'    StampPaste strColor, strLine
'
'End Sub
'Public Sub mitomeOnAction(control As IRibbonControl, selectedId As String, selectedIndex As Integer)
'
'    On Error Resume Next
'
'    Dim strLine As String
'    Dim strSize As String
'
'    Select Case selectedIndex
'        Case 0
'            strSize = "10.5"
'            strLine = C_STAMP_LINE_DOUBLE
'        Case 1
'            strSize = "12.0"
'            strLine = C_STAMP_LINE_DOUBLE
'        Case 2
'            strSize = "13.5"
'            strLine = C_STAMP_LINE_DOUBLE
'        Case 3
'            strSize = "15.0"
'            strLine = C_STAMP_LINE_DOUBLE
'        Case 4
'            strSize = "16.5"
'            strLine = C_STAMP_LINE_DOUBLE
'        Case 5
'            strSize = "18.0"
'            strLine = C_STAMP_LINE_DOUBLE
'        Case 6
'            strSize = "21.0"
'            strLine = C_STAMP_LINE_DOUBLE
'        Case 7
'            strSize = "24.0"
'            strLine = C_STAMP_LINE_DOUBLE
'        Case 8
'            strSize = "10.5"
'            strLine = C_STAMP_LINE_SINGLE
'        Case 9
'            strSize = "12.0"
'            strLine = C_STAMP_LINE_SINGLE
'        Case 10
'            strSize = "13.5"
'            strLine = C_STAMP_LINE_SINGLE
'        Case 11
'            strSize = "15.0"
'            strLine = C_STAMP_LINE_SINGLE
'        Case 12
'            strSize = "16.5"
'            strLine = C_STAMP_LINE_SINGLE
'        Case 13
'            strSize = "18.0"
'            strLine = C_STAMP_LINE_SINGLE
'        Case 14
'            strSize = "21.0"
'            strLine = C_STAMP_LINE_SINGLE
'        Case 15
'            strSize = "24.0"
'            strLine = C_STAMP_LINE_SINGLE
'    End Select
'
'    MitomePaste strLine, strSize
'
'End Sub
Private Function ribbonDinamicMenu(control As IRibbonControl, ByRef content)

'ByRef objApp As Object, ByRef WS As Worksheet
'<menu xmlns="http://schemas.microsoft.com/office/2006/01/customui">
'  <button id="dynaButton" label="Button"
'    onAction="OnAction" imageMso="FoxPro"/>
'  <toggleButton id="dynaToggleButton" label="Toggle Button"
'    onAction="OnToggleAction" image="logo.bmp"/>
'  <menuSeparator id="div2"/>
'  <dynamicMenu id="subMenu" label="Sub Menu" getContent="GetSubContent" />
'</menu>


    'On Error Resume Next

    Dim WS As Worksheet

    Dim strNo As String
    Dim strMenu As String
    Dim strSubMenu As String
    Dim strMacro As String
    Dim strBikou As String
    Dim lngRow As Long
    
    Dim blnBeginGroup As Boolean
    Dim blnBeginGroupSub As Boolean
    Dim blnBeginSubMenu As Boolean
    
    Dim blnFirst As Boolean
    
    Dim strXML As String
    Dim lngNo As Long
    
    '|fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd|ID|fffd||fffd||fffd||70c1||fffd|j|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||64fe|
    Set WS = ThisWorkbook.Worksheets(control.id)
    
    
    Const C_START_ROW As Long = 3
    Const C_COL_NO As Long = 1
    Const C_COL_MENU As Long = 2
    Const C_COL_SUB_MENU As Long = 3
    Const C_COL_MACRO As Long = 4
    Const C_COL_BIKOU As Long = 5

    blnBeginGroup = False
    blnBeginSubMenu = False
    
    strXML = "<menu xmlns=""http://schemas.microsoft.com/office/2006/01/customui"">" & vbCrLf
    lngNo = 1
    lngRow = C_START_ROW
    strNo = WS.Cells(lngRow, C_COL_NO)
    Do Until strNo = ""
    
        '|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||fffd|
        strMenu = WS.Cells(lngRow, C_COL_MENU)
        
        '|fffd|T|fffd|u|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||fffd|
        strSubMenu = WS.Cells(lngRow, C_COL_SUB_MENU)
            
        '|fffd|}|fffd|N|fffd||fffd||fffd||fffd|
        strMacro = WS.Cells(lngRow, C_COL_MACRO)
        
        '|fffd||fffd||fffd|l
        strBikou = WS.Cells(lngRow, C_COL_BIKOU)
        
        Select Case strMenu
            Case ""
                '|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||30f||a347||fffd||211|O|fffd||c42c||fffd||fffd||fffd||fffd||fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||309||fffd|
            Case "-"
                '|fffd||fffd||fffd||fffd||c42c||fffd||fffd||fffd||90c1||fffd|j|fffd||fffd||fffd|[|fffd||311|O|fffd||243|Z|fffd|p|fffd||fffd||fffd|[|fffd|^|fffd||fffd||fffd||c42c|
                blnBeginGroup = True
            Case Else
                If blnBeginSubMenu Then
                    strXML = strXML & "  </menu>" & vbCrLf
                    blnBeginSubMenu = False
                End If
                If strSubMenu <> "" Then
                    strXML = strXML & "  <menu id=""menu" & lngNo & """ label=""" & rlxHtmlSanitizing(strMenu) & """ >" & vbCrLf
                    lngNo = lngNo + 1
                    blnBeginSubMenu = True
                Else

                    If blnBeginGroup Then
                        strXML = strXML & "  <menuSeparator id=""div" & lngNo & """/>" & vbCrLf
                        lngNo = lngNo + 1
                    End If
                    
                    If strBikou = "" Then
                        strXML = strXML & "  <button id=""" & strMacro & """ label=""" & rlxHtmlSanitizing(strMenu) & """ onAction=""ribbonOnAction""/>" & vbCrLf
                    Else
                        strXML = strXML & "  <button id=""" & strMacro & """ label=""" & rlxHtmlSanitizing(strMenu) & """ onAction=""ribbonOnAction"" supertip=""" & strBikou & """/>" & vbCrLf
                    End If
                End If
                
                blnBeginGroup = False
        End Select
    
        Select Case strSubMenu
            Case ""
            Case "-"
                blnBeginGroupSub = True
            Case Else
                
                If blnBeginGroupSub Then
                    strXML = strXML & "    <menuSeparator id=""div" & lngNo & """/>" & vbCrLf
                    lngNo = lngNo + 1
                End If
            
                If strBikou = "" Then
                    strXML = strXML & "    <button id=""" & strMacro & """ label=""" & rlxHtmlSanitizing(strSubMenu) & """ onAction=""ribbonOnAction""/>" & vbCrLf
                Else
                    strXML = strXML & "    <button id=""" & strMacro & """ label=""" & rlxHtmlSanitizing(strSubMenu) & """ onAction=""ribbonOnAction"" supertip=""" & strBikou & """/>" & vbCrLf
                End If

                blnBeginGroupSub = False
        End Select
        
        lngRow = lngRow + 1
        strNo = WS.Cells(lngRow, C_COL_NO)
    Loop
    
    strXML = strXML & "</menu>" & vbCrLf
    
    Set WS = Nothing

    '|fffd||c42c||fffd||fffd||fffd||fffd|XML|fffd||fffd||7c2||fffd|
    content = strXML

End Function
Sub getRibbonEnabled(control As IRibbonControl, ByRef enabled)

'    Select Case True
'        Case ActiveWorkbook Is Nothing
'            enabled = False
'        Case ActiveCell Is Nothing
'            enabled = False
'        Case Selection Is Nothing
'            enabled = False
'        Case TypeName(Selection) = "Range"
'            enabled = True
'        Case Else
'    End Select
    enabled = True
    
End Sub
Sub ribbonLoaded(ByRef IR As IRibbonUI)
    
    On Error GoTo e
    
    Set mIR = IR
    Call ThisWorkbook.setIRibbon(IR)
    SaveSetting C_TITLE, "Ribbon", "Address", CStr(ObjPtr(IR))
        
    Dim strPos As String
    strPos = GetSetting(C_TITLE, "Section", "pos", "1")
    Select Case strPos
        Case "1"
            mSecTog01 = True
        Case "2"
            mSecTog02 = True
        Case "3"
            mSecTog03 = True
        Case "4"
            mSecTog04 = True
        Case "5"
            mSecTog05 = True
        Case "6"
            mSecTog06 = True
    End Select
    
    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub
Public Sub RefreshRibbon()

    Dim strBuf As String
    
    On Error GoTo e
    
    '|fffd|O|fffd||fffd||fffd|[|fffd|o|fffd||fffd||fffd||3d0||fffd||fffd||fffd||fffd|N|fffd||fffd||fffd|A|fffd||fffd||fffd||a0bd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd||a347||fffd|A|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd||755c||fffd|A
    If mIR Is Nothing Then
        
        strBuf = GetSetting(C_TITLE, "Ribbon", "Address", 0)
        Set mIR = getObjectFromAddres(strBuf)
        
        If mIR Is Nothing Then
        Else
            mIR.Invalidate
        End If
    Else
        mIR.Invalidate
    End If
    
    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub


Sub tabGetVisible(control As IRibbonControl, ByRef visible)

    visible = GetSetting(C_TITLE, "Ribbon", Replace(control.id, "Tab", ""), True)

End Sub
Sub tabGetPressed(control As IRibbonControl, ByRef returnValue)
    
    returnValue = GetSetting(C_TITLE, "Ribbon", control.id, True)

End Sub
Sub tabOnAction(control As IRibbonControl, pressed As Boolean)
    
    SaveSetting C_TITLE, "Ribbon", control.id, pressed
    Call RefreshRibbon
    
End Sub
'|fffd|i|fffd||fffd||fffd||50d||fffd||fffd|g|fffd|O|fffd||fffd||fffd|{|fffd|^|fffd||fffd|
Sub sectionPressed(control As IRibbonControl, ByRef returnValue)
    
    On Error GoTo e
    
    Select Case control.id
        Case "sectionSetting01"
            returnValue = mSecTog01
    
        Case "sectionSetting02"
            returnValue = mSecTog02
    
        Case "sectionSetting03"
            returnValue = mSecTog03
    
        Case "sectionSetting04"
            returnValue = mSecTog04
    
        Case "sectionSetting05"
            returnValue = mSecTog05
    
        Case "sectionSetting06"
            returnValue = mSecTog06
    End Select
    
    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub
Sub sectionOnAction(control As IRibbonControl, pressed As Boolean)
  
    On Error GoTo e
    
    mSecTog01 = False
    mSecTog02 = False
    mSecTog03 = False
    mSecTog04 = False
    mSecTog05 = False
    mSecTog06 = False
  
    Select Case control.id
        Case "sectionSetting01"
            mSecTog01 = pressed
            Call SaveSetting(C_TITLE, "Section", "pos", "1")
            
        Case "sectionSetting02"
            mSecTog02 = pressed
            Call SaveSetting(C_TITLE, "Section", "pos", "2")
            
        Case "sectionSetting03"
            mSecTog03 = pressed
            Call SaveSetting(C_TITLE, "Section", "pos", "3")
            
        Case "sectionSetting04"
            mSecTog04 = pressed
            Call SaveSetting(C_TITLE, "Section", "pos", "4")
            
        Case "sectionSetting05"
            mSecTog05 = pressed
            Call SaveSetting(C_TITLE, "Section", "pos", "5")
            
        Case "sectionSetting06"
            mSecTog06 = pressed
            Call SaveSetting(C_TITLE, "Section", "pos", "6")
            
    End Select
  
    Call RefreshRibbon
    Set mColSection = rlxInitSectionSetting()
    
    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub

Sub linePressed(control As IRibbonControl, ByRef returnValue)
    
    returnValue = mLineEnable
    
End Sub
Sub lineOnAction(control As IRibbonControl, pressed As Boolean)
  
    On Error GoTo e
    
    mLineEnable = pressed
  
    Call RefreshRibbon

    If pressed Then
        ThisWorkbook.enableCrossLine
    Else
        ThisWorkbook.disableCrossLine
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub


Sub screenPressed(control As IRibbonControl, ByRef returnValue)
    
    returnValue = mScreenEnable
    
End Sub
Sub screenOnAction(control As IRibbonControl, pressed As Boolean)
  
    On Error GoTo e
    
    mScreenEnable = pressed
  
    Call RefreshRibbon

    If pressed Then
        frmScreenShot.Show
    Else
        Unload frmScreenShot
    End If

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub
Sub getStampImage(control As IRibbonControl, ByRef image)
    Select Case control.id
        Case "stamp01b"
        Case "stamp02b"
        Case "stamp03b"
        Case "stamp01r"
        Case "stamp02r"
        Case "stamp03r"
    End Select
End Sub
 Sub GetSize(control As IRibbonControl, ByRef Size)
 
    If Application.UsableWidth / 0.75 < 1420 Then
    
        Size = RibbonControlSize.RibbonControlSizeRegular
    Else
    
        Size = RibbonControlSize.RibbonControlSizeLarge
    End If
 
 End Sub
Public Sub GetSizeLabel(control As IRibbonControl, ByRef lbl)

    If Application.UsableWidth / 0.75 < 1420 Then
        Select Case control.id
            Case "MitomePaste.1"
                lbl = "|fffd|F|fffd||7c8||fffd|"
            Case "FilePaste.1"
                lbl = "|fffd||645c||fffd|w|fffd||fffd|"
            Case "bzGallery"
                lbl = "|fffd|r|fffd|W|fffd|l|fffd|X|fffd||fffd|"
        End Select
    Else
        Select Case control.id
            Case "MitomePaste.1"
                lbl = "|fffd|F|fffd||7c8||fffd|" & vbCrLf
            Case "FilePaste.1"
                lbl = "|fffd||645c||fffd|w|fffd||fffd|" & vbCrLf
            Case "bzGallery"
                lbl = "|fffd|r|fffd|W|fffd|l|fffd|X|fffd||fffd|" & vbCrLf
        End Select
    End If
 
 End Sub
'
' |fffd|f|fffd|[|fffd|^|fffd||fffd|
'
 Sub stampGetItemCount(control As IRibbonControl, ByRef count)

    '|fffd||752||fffd||fffd||fffd||64fe|
    Dim col As Collection
    
    Set col = getProperty()

    count = col.count

End Sub
Sub stampGetItemId(control As IRibbonControl, index As Integer, ByRef id)

    id = C_STAMP_FILE_NAME & Format$(index + 1, "000")

End Sub
Sub stampGetItemImage(control As IRibbonControl, index As Integer, ByRef image)

    Set image = getImageStamp(index + 1)
    
End Sub
Public Sub stampOnAction(control As IRibbonControl, selectedId As String, selectedIndex As Integer)

    Call pasteStamp2(selectedIndex + 1)
    Call SaveSetting(C_TITLE, "Stamp", "stampNo", selectedIndex + 1)

End Sub

'
' |fffd||fffd||fffd|
'
Sub stampMitomeGetItemCount(control As IRibbonControl, ByRef count)

    '|fffd||752||fffd||fffd||fffd||64fe|
    Dim col As Collection
    
    Set col = getPropertyMitome()

    count = col.count

End Sub
Sub stampMitomeGetItemId(control As IRibbonControl, index As Integer, ByRef id)

    id = C_STAMP_FILE_NAME & Format$(index + 1, "000")

End Sub
Sub stampMitomeGetItemImage(control As IRibbonControl, index As Integer, ByRef image)
    
    Set image = getImageStampMitome(index + 1)
    
End Sub
Public Sub stampMitomeOnAction(control As IRibbonControl, selectedId As String, selectedIndex As Integer)

    Call MitomePaste2(selectedIndex + 1)
    Call SaveSetting(C_TITLE, "StampMitome", "stampNo", selectedIndex + 1)

End Sub
'
' |fffd|r|fffd|W|fffd|l|fffd|X|fffd||fffd|
'
Sub stampBzGetItemCount(control As IRibbonControl, ByRef count)

    '|fffd||752||fffd||fffd||fffd||64fe|
    Dim col As Collection
    
    Set col = getPropertyBz()

    count = col.count

End Sub
Sub stampBzGetItemId(control As IRibbonControl, index As Integer, ByRef id)

    id = C_STAMP_FILE_NAME & Format$(index + 1, "000")

End Sub
Sub stampBzGetItemImage(control As IRibbonControl, index As Integer, ByRef image)

     Set image = getImageStampBz(index + 1)
    
End Sub
Public Sub stampBzOnAction(control As IRibbonControl, selectedId As String, selectedIndex As Integer)

    Call pasteStampBz2(selectedIndex + 1)
    Call SaveSetting(C_TITLE, "StampBz", "stampNo", selectedIndex + 1)

End Sub

Sub GetItemSuperTip(control As IRibbonControl, index As Integer, ByRef screen)

End Sub
'
' |fffd||fffd||fffd||fffd||fffd||fffd|
'
Sub sakuraGetItemCount(control As IRibbonControl, ByRef count)

    count = 3

End Sub
Sub sakuraGetItemId(control As IRibbonControl, index As Integer, ByRef id)

    id = C_STAMP_FILE_NAME & Format$(index + 1, "000")

End Sub
Sub sakuraGetItemImage(control As IRibbonControl, index As Integer, ByRef image)

    Set image = getImageSakura(control.id, index + 1)
    
End Sub
Public Sub sakuraOnAction(control As IRibbonControl, selectedId As String, selectedIndex As Integer)

    Call pasteSakura(control.id, selectedIndex + 1)

End Sub

'
' |fffd|t|fffd|
'
Sub fusenGetItemCount(control As IRibbonControl, ByRef count)

    count = 5

End Sub
Sub fusenGetItemId(control As IRibbonControl, index As Integer, ByRef id)

    id = C_STAMP_FILE_NAME & Format$(index + 1, "000")

End Sub
Sub fusenGetItemImage(control As IRibbonControl, index As Integer, ByRef image)

    Set image = getImageFusen(control.id, index + 1)
    
End Sub
Public Sub fusenOnAction(control As IRibbonControl, selectedId As String, selectedIndex As Integer)

    Call pasteFusen(control.id, selectedIndex + 1)

End Sub
Public Sub getColorImage(control As IRibbonControl, ByRef image)
  
    Dim strColorNo As String
    Dim r As Shape
  
    Select Case control.id
        Case "pushFont"
            strColorNo = GetSetting(C_TITLE, "Color2003", "font", "99")
            
            Set r = ThisWorkbook.Worksheets("Color").Shapes("fontColor")
            If strColorNo = "99" Then
                r.Fill.ForeColor.RGB = ThisWorkbook.Colors(Val("01"))
            Else
                r.Fill.ForeColor.RGB = ThisWorkbook.Colors(Val(strColorNo))
            End If
            Set r = ThisWorkbook.Worksheets("Color").Shapes("grpFont")
          
        Case "pushLine"
        
            strColorNo = GetSetting(C_TITLE, "Color2003", "line", "99")
            Set r = ThisWorkbook.Worksheets("Color").Shapes("lineColor")
            If strColorNo = "99" Then
                r.Fill.ForeColor.RGB = ThisWorkbook.Colors(Val("01"))
            Else
                r.Fill.ForeColor.RGB = ThisWorkbook.Colors(Val(strColorNo))
            End If
            Set r = ThisWorkbook.Worksheets("Color").Shapes("grpLine")
          
        Case "pushBack"
        
            strColorNo = GetSetting(C_TITLE, "Color2003", "back", "99")
            Set r = ThisWorkbook.Worksheets("Color").Shapes("backColor")
            If strColorNo = "99" Then
                r.Fill.ForeColor.RGB = ThisWorkbook.Colors(Val("02"))
            Else
                r.Fill.ForeColor.RGB = ThisWorkbook.Colors(Val(strColorNo))
            End If
            Set r = ThisWorkbook.Worksheets("Color").Shapes("grpBack")
          
    End Select
    
    On Error Resume Next

'    r.CopyPicture Appearance:=xlScreen, Format:=xlBitmap
    Set image = CreatePictureFromClipboard(r)

End Sub
Sub pushColorOnAction(control As IRibbonControl)

    Dim strColorNo As String
    On Error Resume Next
    
    Select Case control.id
        Case "pushFont"
            strColorNo = GetSetting(C_TITLE, "Color2003", "font", C_COLOR_OTHER)
            
            If strColorNo = C_COLOR_OTHER Then
                With Selection.Font
                    .ColorIndex = xlAutomatic
                    .TintAndShade = 0
                End With
            Else
                Selection.Font.Color = ThisWorkbook.Colors(Val(strColorNo))
            End If
          
        Case "pushLine"
            strColorNo = GetSetting(C_TITLE, "Color2003", "line", C_COLOR_OTHER)
            
            If strColorNo = C_COLOR_OTHER Then
                With Selection.ShapeRange.Line
                    .ForeColor.RGB = RGB(0, 0, 0)
                End With
            Else
                Selection.ShapeRange.Line.ForeColor.RGB = ThisWorkbook.Colors(Val(strColorNo))
            End If
          
        Case "pushBack"
            strColorNo = GetSetting(C_TITLE, "Color2003", "back", C_COLOR_OTHER)
          
            If strColorNo = C_COLOR_OTHER Then
                With Selection.Interior
                    .Pattern = xlNone
                End With
            Else
                Selection.Interior.Color = ThisWorkbook.Colors(Val(strColorNo))
            End If
    End Select

End Sub
Sub getScreenShotEnabled(control As IRibbonControl, ByRef enabled)

    On Error GoTo e
    
    enabled = Not (mScreenEnable)

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub
Sub getCrossEnabled(control As IRibbonControl, ByRef enabled)

    On Error GoTo e
    
    enabled = Not (mLineEnable)

    Exit Sub
e:
    Call rlxErrMsg(err)
End Sub

Attribute VB_Name = "basSQL"
Option Explicit

Const C_ROW_DATA As Long = 3
Const C_COL_NO As Long = 1
Const C_COL_COMMAND As Long = 2
Const C_COL_BEFORE_CRLF As Long = 3
Const C_COL_AFTER_CRLF As Long = 4
Const C_COL_FUNCTION As Long = 5
Const C_COL_RESERVED As Long = 6


Function rlxFormatSql(ByVal strSource As String) As String
Attribute rlxFormatSql.VB_Description = "|fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||590||fffd||fffd||182||fffd||fffd||10e|g|fffd|p|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
Attribute rlxFormatSql.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim strBuf As String
    Dim strJiku() As String
    Dim lngLen As Long
    Dim i As Long
    Dim j As Long
    Dim lngCnt As Long
    Dim strTango As String
    Dim strChar As String
    Dim strNextChar As String
    Dim strNextNChar As String
    Dim strBeforeChar As String
    Dim sw1 As Boolean
    Dim sw2 As Boolean
    Dim sw3 As Boolean
    
    On Error GoTo er
    
    '--------------------------------------------------
    ' |fffd||fffd||fffd||fffd||fffd||fffd|
    '--------------------------------------------------
    strBuf = strSource
    lngLen = Len(strBuf)
    
    strTango = ""
    lngCnt = 0
    sw1 = False
    sw2 = False
    sw3 = False
    
    For i = 1 To lngLen
    
        '|fffd||fffd|
        strChar = Mid$(strBuf, i, 1)
        
        '|fffd|P|fffd||90||fffd|
        If i = lngLen Then
            strNextChar = ""
        Else
            strNextChar = Mid$(strBuf, i + 1, 1)
        End If
        
        '|fffd|Q|fffd||90||fffd|
        If i + 1 = lngLen Then
            strNextNChar = ""
        Else
            strNextNChar = Mid$(strBuf, i + 2, 1)
        End If
        
        '|fffd|P|fffd||91|O
        If i = 1 Then
            strBeforeChar = ""
        Else
            strBeforeChar = Mid$(strBuf, i - 1, 1)
        End If
        
        Select Case True
            Case sw1
                '|fffd|R|fffd||fffd||fffd||fffd||fffd|g(/* |fffd|` */)|fffd||38d||fffd|
                Select Case True
                    Case strBeforeChar = "*" And strChar = "/"
                        setJiku strJiku(), lngCnt, strTango & strChar
                        strTango = ""
                        sw1 = False
                Case Else
                    strTango = strTango & strChar
                End Select
            Case sw2
                '|fffd|R|fffd||fffd||fffd||fffd||fffd|g(--)|fffd||38d||fffd|
                Select Case True
                    Case strChar = vbCr Or strChar = vbLf Or strChar = vbCrLf
                        setJiku strJiku(), lngCnt, strTango
                        strTango = ""
                        sw2 = False
                Case Else
                    strTango = strTango & strChar
                End Select
            Case sw3
                '|fffd|R|fffd|[|fffd|e|fffd|[|fffd|V|fffd||fffd||fffd||fffd||fffd||fffd||fffd||30b||d4491||38d||fffd|
                Select Case True
                    Case strChar = "'"
                        setJiku strJiku(), lngCnt, strTango & strChar
                        strTango = ""
                        sw3 = False
                Case Else
                    strTango = strTango & strChar
                End Select
            Case Else
                Select Case True
                    Case strChar = "/" And strNextChar = "*"
                        setJiku strJiku(), lngCnt, strTango
                        strTango = ""
                        strTango = strTango & strChar
                        sw1 = True
                        
                    Case strChar = "-" And strNextChar = "-"
                        setJiku strJiku(), lngCnt, strTango
                        strTango = ""
                        strTango = strTango & strChar
                        sw2 = True
                        
                    Case strChar = "'"
                        setJiku strJiku(), lngCnt, strTango
                        strTango = ""
                        strTango = strTango & strChar
                        sw3 = True
                    
                    Case strChar = "(" And strNextChar = "+" And strNextNChar = ")"
                        setJiku strJiku(), lngCnt, strTango & "(+)"
                        strTango = ""
                        i = i + 2
                        
                    Case strChar = "<" And strNextChar = ">"
                        setJiku strJiku(), lngCnt, strTango
                        strTango = ""
                        setJiku strJiku(), lngCnt, "<>"
                        i = i + 1
                        
                    Case strChar = "!" And strNextChar = "="
                        setJiku strJiku(), lngCnt, strTango
                        strTango = ""
                        setJiku strJiku(), lngCnt, "!="
                        i = i + 1
                    
                    Case strChar = "^" And strNextChar = "="
                        setJiku strJiku(), lngCnt, strTango
                        strTango = ""
                        setJiku strJiku(), lngCnt, "^="
                        i = i + 1
                        
                    Case strChar = "<" And strNextChar = "="
                        setJiku strJiku(), lngCnt, strTango
                        strTango = ""
                        setJiku strJiku(), lngCnt, "<="
                        i = i + 1
                        
                    Case strChar = ">" And strNextChar = "="
                        setJiku strJiku(), lngCnt, strTango
                        strTango = ""
                        setJiku strJiku(), lngCnt, ">="
                        i = i + 1
                        
                    Case strChar = "|" And strNextChar = "|"
                        setJiku strJiku(), lngCnt, strTango
                        strTango = ""
                        setJiku strJiku(), lngCnt, "||"
                        i = i + 1
                    
                    Case strChar = "." And strNextChar = "*"
                        setJiku strJiku(), lngCnt, strTango & ".*"
                        strTango = ""
                        i = i + 1
                        
                    Case strChar = "(" Or strChar = ")" Or strChar = "," Or strChar = "<" Or strChar = ">" Or strChar = "=" Or strChar = "+" Or strChar = "*" Or strChar = "/" Or strChar = "-"
                        setJiku strJiku(), lngCnt, strTango
                        strTango = ""
                        setJiku strJiku(), lngCnt, strChar
                        
                    Case strChar = " " Or strChar = vbCr Or strChar = vbLf Or strChar = vbCrLf
                        setJiku strJiku(), lngCnt, strTango
                        strTango = ""
                    
                    Case Else
                        strTango = strTango & strChar
                End Select
        End Select
    Next

    setJiku strJiku(), lngCnt, strTango
    strTango = ""
    
    '--------------------------------------------------
    ' |fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|I|fffd||251||5576||fffd||fffd||fffd||255||3ca||fffd|
    '--------------------------------------------------
    If GetSetting(C_TITLE, "FormatSql", "UpperCase", False) Then
        For i = 1 To UBound(strJiku)
            For j = C_COL_COMMAND To C_COL_RESERVED
                If existStr(UCase(strJiku(i)), j) Then
                    strJiku(i) = UCase(strJiku(i))
                End If
            Next
        Next
    End If
    '--------------------------------------------------
    ' |fffd|\|fffd||fffd||fffd||fffd||fffd|
    '--------------------------------------------------
    Const C_NEST_SIZE As Long = 6
    
    '|fffd||14f||fffd||fffd||fffd|SQL|fffd||18c||fffd||fffd||742||fffd|SQL|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim lngSqlFirst As Long
    Dim lngSqlNow As Long
    Const C_SQL_NONE As Long = 0
    Const C_SQL_SELECT As Long = 1
    Const C_SQL_UPDATE As Long = 2
    Const C_SQL_DELETE As Long = 3
    Const C_SQL_INSERT_OR_DDL As Long = 4
    
    '|fffd||fffd||fffd|s|fffd||fffd||fffd|[|fffd|h|fffd||fffd||fffd||fffd|
    Dim lngMode As Long
    Const C_MODE_SEARCH_COMMAND As Long = 1
    Const C_MODE_SEARCH_COMMA As Long = 2
    Const C_MODE_ADD_STR As Long = 4
    Const C_MODE_ADD_FIRST_STR As Long = 5
    Const C_MODE_FUNCTION As Long = 6
    Const C_MODE_ADD_BEFORE_CRLF As Long = 7
    Const C_MODE_ADD_AFTER_CRLF As Long = 8
    Const C_MODE_ADD_NEST As Long = 10
    Const C_MODE_DEL_NEST As Long = 11
    Const C_MODE_NEXT_CHAR As Long = 12
    Const C_MODE_ADD_COMMENT As Long = 13
    Const C_MODE_ADD_AFTER_COMMA_CRLF As Long = 14
    Const C_MODE_ADD_STR_NO_SP = 15
    Const C_MODE_ADD_BEFORE_COMMA_CRLF As Long = 16
    Const C_MODE_ADD_BEFORE_CRLF_CASE As Long = 17
    Const C_MODE_ADD_BEFORE_CRLF_END As Long = 18
    Const C_MODE_END As Long = 99
    Dim strResult As String
    Dim strBase As String

    Dim lngNest As Long
    Dim lngCurNest As Long
    
    strResult = ""
    lngMode = C_MODE_SEARCH_COMMAND
    i = 1
    lngNest = 0
    lngSqlFirst = C_SQL_NONE
    lngSqlNow = C_SQL_NONE

    Do While (True)

        Select Case lngMode
            Case C_MODE_SEARCH_COMMAND
            
                Select Case True
                    '|fffd|V|fffd|[|fffd|g|fffd||303|R|fffd|}|fffd||fffd||fffd|h|fffd||fffd||fffd||fffd||fffd||fffd||248||fffd|v
                    Case existStr(UCase(strJiku(i)), C_COL_COMMAND)
                    
                        '|fffd||14f||fffd||fffd||248||fffd|v|fffd||fffd||fffd||fffd|SQL|fffd||14ed2||fffd|
                        If lngSqlFirst = C_SQL_NONE Then
                            Select Case UCase(strJiku(i))
                                Case "SELECT"
                                    lngSqlFirst = C_SQL_SELECT
                                Case "DELETE"
                                    lngSqlFirst = C_SQL_DELETE
                                Case "UPDATE"
                                    lngSqlFirst = C_SQL_UPDATE
                                Case Else
                                    lngSqlFirst = C_SQL_INSERT_OR_DDL
                            End Select
                        End If
                        Select Case UCase(strJiku(i))
                            Case "SELECT"
                                lngSqlNow = C_SQL_SELECT
                            Case "DELETE"
                                lngSqlNow = C_SQL_DELETE
                            Case "UPDATE"
                                lngSqlNow = C_SQL_UPDATE
                            Case Else
                                lngSqlNow = C_SQL_INSERT_OR_DDL
                        End Select
                        
                        '|fffd||14f||fffd||fffd||303|N|fffd|G|fffd||fffd||fffd|[
                        If Len(strResult) = 0 Then
                            lngMode = C_MODE_ADD_FIRST_STR
                        Else
                            '|fffd||28f||fffd||303|T|fffd|u|fffd|N|fffd|G|fffd||fffd||fffd|[
                            If lngSqlNow = C_SQL_SELECT Then
                                If UCase(Right$(strResult, 1)) = "(" Then
                                    lngMode = C_MODE_ADD_STR
                                '|fffd||fffd||fffd||282||fffd||fffd||fffd||fffd||fffd||fffd||a347||fffd|iINSERT INTO |fffd|` SELECT |fffd||182||fffd| UNION ALL|fffd||30c||fffd|)
                                Else
                                    lngMode = C_MODE_ADD_BEFORE_CRLF
                                End If
                            Else
                                lngMode = C_MODE_ADD_STR
                            End If
                            
                        End If
                        
                    '|fffd|V|fffd|[|fffd|g|fffd||311|O|fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd||fffd||248||fffd|v
                    Case existStr(UCase(strJiku(i)), C_COL_BEFORE_CRLF)
                        'BETWEEN|fffd||fffd||fffd||743|`|fffd|F|fffd|b|fffd|N
                        If existBetween(strJiku(), i) Then
                            lngMode = C_MODE_ADD_STR
                        Else
                            lngMode = C_MODE_ADD_BEFORE_CRLF
                        End If
                        
                    '|fffd|V|fffd|[|fffd|g|fffd||30c||fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd||fffd||248||fffd|v
                    Case existStr(UCase(strJiku(i)), C_COL_AFTER_CRLF)
                        lngMode = C_MODE_ADD_AFTER_CRLF
                        
                    '|fffd|J|fffd||fffd||fffd|}
                    Case strJiku(i) = ","
                        If GetSetting(C_TITLE, "FormatSql", "RightComma", False) Then
                            lngMode = C_MODE_ADD_BEFORE_COMMA_CRLF
                        Else
                            lngMode = C_MODE_ADD_AFTER_COMMA_CRLF
                        End If
                        
                    '|fffd|R|fffd||fffd||fffd||fffd||fffd|g
                    Case Left$(strJiku(i), 2) = "/*" Or Left$(strJiku(i), 2) = "--"
                        '|fffd|q|fffd||fffd||fffd|g|fffd||fffd||30f||a347||fffd|A|fffd||fffd||fffd||282||317||48d42||fffd|
                        If Left$(strJiku(i), 3) = "/*+" Then
                            lngMode = C_MODE_ADD_AFTER_CRLF
                        Else
                            lngMode = C_MODE_ADD_COMMENT
                        End If
                    '|fffd||fffd||fffd||fffd||fffd||fffd|
                    Case strJiku(i) = "("
                        If i = 1 Then
                            lngMode = C_MODE_ADD_NEST
                        Else
                            If isFunction(strJiku(), i) Then
                                lngMode = C_MODE_FUNCTION
                            Else
                                lngMode = C_MODE_ADD_NEST
                            End If
'                            If existStr(strJiku(i - 1), C_COL_FUNCTION) Then
'                                If existFuncInSel(strJiku(), i) Then
'                                    lngMode = C_MODE_ADD_NEST
'                                Else
'                                    lngMode = C_MODE_FUNCTION
'                                End If
'                            Else
'                                lngMode = C_MODE_ADD_NEST
'                            End If
                        End If
                    '|fffd|E|fffd||fffd||fffd||fffd|
                    Case strJiku(i) = ")"
                        lngMode = C_MODE_DEL_NEST
                    
                    'CASE|fffd||fffd|
                    Case UCase(strJiku(i)) = "CASE"
                        lngMode = C_MODE_ADD_STR

                    'CASE|fffd||fffd|
                    Case UCase(strJiku(i)) = "WHEN" Or UCase(strJiku(i)) = "THEN" Or UCase(strJiku(i)) = "ELSE"
                        If i = 1 Then
                            lngMode = C_MODE_ADD_STR
                        Else
                            If UCase(strJiku(i - 1)) = "CASE" Then
                                lngMode = C_MODE_ADD_STR
                            Else
                                lngMode = C_MODE_ADD_BEFORE_CRLF_CASE
                            End If
                        End If

                    'CASE|fffd||fffd||fffd||30d||14c||fffd|
                    Case UCase(strJiku(i)) = "END"
                        lngMode = C_MODE_ADD_BEFORE_CRLF_END
                    
                    '|fffd||fffd||fffd||311||fffd|
                    Case Else
                        lngMode = C_MODE_ADD_STR
                        '|fffd|}|fffd|C|fffd|i|fffd|X|fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||fffd|Z|fffd||fffd||fffd|}|fffd|C|fffd|i|fffd|X|fffd||fffd||fffd|j
                        If isMinus(strJiku(), i) Then
                            lngMode = C_MODE_ADD_STR_NO_SP
                        End If
                        
                        '|fffd||64ea||fffd||fffd||fffd|h|fffd|b|fffd|g|fffd||30f||a347|
                        If Left$(strJiku(i), 1) = "." Then
                            lngMode = C_MODE_ADD_STR_NO_SP
                        End If
                        
                End Select
                
            Case C_MODE_ADD_FIRST_STR
                strResult = strResult & padStr(strJiku(i), C_NEST_SIZE)
                lngMode = C_MODE_NEXT_CHAR
                
            Case C_MODE_ADD_COMMENT
                strResult = strResult & strJiku(i) & vbCrLf
                lngMode = C_MODE_NEXT_CHAR
                
            Case C_MODE_ADD_STR
                strResult = strResult & " " & strJiku(i)
                lngMode = C_MODE_NEXT_CHAR
            
            Case C_MODE_ADD_STR_NO_SP
                strResult = strResult & strJiku(i)
                lngMode = C_MODE_NEXT_CHAR
                
            Case C_MODE_ADD_BEFORE_CRLF
                strResult = strResult & " " & vbCrLf & strBase & padStr(strJiku(i), C_NEST_SIZE)
                lngMode = C_MODE_NEXT_CHAR
                
            Case C_MODE_ADD_BEFORE_CRLF_CASE
                strResult = strResult & " " & vbCrLf & strBase & Space$(C_NEST_SIZE) & "     "
                lngMode = C_MODE_ADD_STR
                
            Case C_MODE_ADD_BEFORE_CRLF_END
                strResult = strResult & " " & vbCrLf & strBase & Space$(C_NEST_SIZE)
                lngMode = C_MODE_ADD_STR
                
            Case C_MODE_ADD_BEFORE_COMMA_CRLF
                If lngSqlNow = C_SQL_INSERT_OR_DDL Then
                    strResult = strResult & " " & vbCrLf & padStr(strJiku(i), C_NEST_SIZE)
                Else
                    strResult = strResult & " " & vbCrLf & strBase & padStr(strJiku(i), C_NEST_SIZE)
                End If
                lngMode = C_MODE_NEXT_CHAR
            
            Case C_MODE_ADD_AFTER_COMMA_CRLF
                If lngSqlNow = C_SQL_INSERT_OR_DDL Then
                    strResult = strResult & strJiku(i) & " " & vbCrLf & Space$(C_NEST_SIZE)
                Else
                    strResult = strResult & strJiku(i) & " " & vbCrLf & strBase & Space$(C_NEST_SIZE)
                End If
                lngMode = C_MODE_NEXT_CHAR
            
            Case C_MODE_ADD_AFTER_CRLF
                
                strResult = strResult & " " & strJiku(i) & " " & vbCrLf & strBase & Space$(C_NEST_SIZE)
                lngMode = C_MODE_NEXT_CHAR
                
            Case C_MODE_ADD_NEST
                strResult = strResult & " " & vbCrLf & strBase & padStr(strJiku(i), C_NEST_SIZE)
                lngNest = lngNest + 1
                strBase = Space$((C_NEST_SIZE + 1) * lngNest)
                lngMode = C_MODE_NEXT_CHAR
                
            Case C_MODE_DEL_NEST
                lngNest = lngNest - 1
                '|fffd||fffd||fffd||291||389||fffd||fffd||fffd||fffd||fffd||fffd|l|fffd||fffd|
                If lngNest < 0 Then
                    lngNest = 0
                End If
                strBase = Space$((C_NEST_SIZE + 1) * lngNest)
                lngMode = C_MODE_ADD_BEFORE_CRLF
                
            Case C_MODE_NEXT_CHAR
                '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||250|i|fffd||7c2||fffd|
                i = i + 1
                If UBound(strJiku) < i Then
                    lngMode = C_MODE_END
                Else
                    lngMode = C_MODE_SEARCH_COMMAND
                End If
                
            Case C_MODE_FUNCTION
                '|fffd||590||fffd||fffd||fffd||fffd||fffd|
                Dim lngFuncNest As Long
                lngFuncNest = 0
                Do
                    Select Case UCase(strJiku(i))
                        Case "("
                            lngFuncNest = lngFuncNest + 1
                            '+-*/IN/WHEN/THEN/ELSE |fffd||202||fffd| |fffd|X|fffd|y|fffd|[|fffd|X|fffd||fffd||fffd||c2bc2||fffd|
                            If Right$(strResult, 1) = "," Or Right$(strResult, 1) = "+" Or Right$(strResult, 1) = "-" Or Right$(strResult, 1) = "*" Or Right$(strResult, 1) = "/" Or UCase(Right$(strResult, 3)) = " IN" Or UCase(Right$(strResult, 4)) = "WHEN" Or UCase(Right$(strResult, 4)) = "THEN" Or UCase(Right$(strResult, 4)) = "ELSE" Then
                                strResult = strResult & " " & strJiku(i)
                            Else
                                strResult = strResult & strJiku(i)
                            End If
                        Case ")"
                            lngFuncNest = lngFuncNest - 1
                            strResult = strResult & strJiku(i)
                        Case ","
                            strResult = strResult & strJiku(i)
                        Case Else
                            If Right$(strResult, 1) = "(" Then
                                strResult = strResult & strJiku(i)
                            Else
                                '|fffd|}|fffd|C|fffd|i|fffd|X|fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||fffd|Z|fffd||fffd||fffd|}|fffd|C|fffd|i|fffd|X|fffd||fffd||fffd|j
                                If isMinus(strJiku(), i) Then
                                    strResult = strResult & strJiku(i)
                                Else
                                    strResult = strResult & " " & strJiku(i)
                                End If
                            End If
                    End Select
                    i = i + 1
                    If UBound(strJiku) < i Then
                        Exit Do
                    End If
                Loop Until lngFuncNest = 0
                If UBound(strJiku) < i Then
                    lngMode = C_MODE_END
                Else
                    lngMode = C_MODE_SEARCH_COMMAND
                End If
                
            Case C_MODE_END
                '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|I|fffd||fffd||fffd||fffd||fffd||fffd|
                If Len(strResult) > 0 Then
                    strResult = strResult & " "
                End If
                Exit Do
        End Select
    Loop
    
    rlxFormatSql = strResult

    Exit Function
er:

    rlxFormatSql = strSource

End Function
Private Sub setJiku(ByRef strJiku() As String, ByRef lngCnt As Long, ByVal strBuf As String)

    If Len(strBuf) = 0 Then
        Exit Sub
    End If
    lngCnt = lngCnt + 1
    ReDim Preserve strJiku(1 To lngCnt)
    strJiku(lngCnt) = strBuf

End Sub
Private Function padStr(ByVal strBuf As String, ByVal lngLen As Long) As String

    If lngLen < 0 Then
        Exit Function
    End If
    padStr = Right$(Space(lngLen) & strBuf, lngLen)

End Function
Private Function padStrL(ByVal strBuf As String, ByVal lngLen As Long) As String

    If lngLen < 0 Then
        Exit Function
    End If
    padStrL = Left$(strBuf & Space(lngLen), lngLen)

End Function 'EXCEL|fffd|\|fffd||fffd||8576||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Function existStr(ByVal strBuf As String, ByVal lngCol As Long) As Boolean

    Dim i As Long
    existStr = False

    i = C_ROW_DATA

    Do Until ThisWorkbook.Worksheets("SQL").Cells(i, lngCol).Value = "" Or _
        UCase(strBuf) < ThisWorkbook.Worksheets("SQL").Cells(i, lngCol).Value

        If UCase(strBuf) = ThisWorkbook.Worksheets("SQL").Cells(i, lngCol).Value Then
            existStr = True
            Exit Function
        End If

        i = i + 1

    Loop

End Function
'Function|fffd||702||fffd||fffd||fffd|IN|fffd||fffd||194||fffd||fffd||80b3||fffd||a0bd||fffd||fffd||fffd||282||312||fffd||fffd||fffd|SELECT|fffd||fffd||fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||90a9||fffd|`|fffd|F|fffd|b|fffd|N
Private Function existFuncInSel(ByRef strJiku() As String, ByVal lngPos As Long) As Boolean

    Dim i As Long
    existFuncInSel = False
    
    Dim lngFuncNest As Long
    lngFuncNest = 0
    i = lngPos
    
    Do
        Select Case UCase(strJiku(i))
            Case "("
                lngFuncNest = lngFuncNest + 1
            Case ")"
                lngFuncNest = lngFuncNest - 1
            Case "SELECT" ', "CASE"
                existFuncInSel = True
                Exit Function
            Case Else
        End Select
        i = i + 1
        If UBound(strJiku) < i Then
            Exit Do
        End If
    Loop Until lngFuncNest = 0

End Function
'AND |fffd||302|Q|fffd|p|fffd||fffd||fffd|O|fffd||fffd||fffd|t|fffd|O|fffd||fffd|BETWEEN|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||90a9||fffd|`|fffd|F|fffd|b|fffd|N
Private Function existBetween(ByRef strJiku() As String, ByVal lngPos As Long) As Boolean

    Dim i As Long
    existBetween = False
    
    Dim lngFuncNest As Long
    
    If UCase(strJiku(lngPos)) <> "AND" Then
        existBetween = False
        Exit Function
    End If
    
    lngFuncNest = 0
    
    i = lngPos - 1
    If 1 > i Then
        Exit Function
    End If
    
    '1|fffd||83|p|fffd||fffd||fffd|O|fffd||fffd||fffd|t|fffd||fffd||382||fffd|
    Do
        Select Case UCase(strJiku(i))
            Case ")"
                lngFuncNest = lngFuncNest + 1
            Case "("
                lngFuncNest = lngFuncNest - 1
            Case Else
        End Select
        i = i - 1
        If 1 > i Then
            Exit Function
        End If
    Loop Until lngFuncNest = 0
    
    '|fffd||590||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||a347||fffd|A|fffd||fffd||fffd||fffd||251|O|fffd||303|p|fffd||fffd||fffd|O|fffd||fffd||fffd|t|fffd||12c8d||fffd|
    Dim j As Long
    
    j = i
    If existStr(strJiku(i), C_COL_FUNCTION) Then
        If i <> 1 Then
            j = i - 1
        End If
    End If

    If UCase(strJiku(j)) = "BETWEEN" Then
        existBetween = True
    Else
        existBetween = False
    End If

End Function
'|fffd||fffd||fffd||fffd||fffd||52182||301|u|fffd|||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||fffd|Z|fffd||fffd||fffd|}|fffd|C|fffd|i|fffd|X|fffd||fffd||fffd|Z|fffd||fffd||fffd||14ed2||80b7||fffd||fffd|B
Private Function isMinus(ByRef strJiku() As String, ByVal i As Long) As Boolean

    isMinus = False
    
    If i <= 2 Then
        Exit Function
    End If

    '|fffd|}|fffd|C|fffd|i|fffd|X|fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||fffd|Z|fffd||fffd||fffd|}|fffd|C|fffd|i|fffd|X|fffd||fffd||fffd|j
    If strJiku(i - 1) = "-" Then
        '|fffd|n|fffd|C|fffd|t|fffd||fffd||fffd||311|O|fffd||fffd||fffd||fffd||fffd|Z|fffd|q|fffd||fffd||fffd|r|fffd||fffd||fffd|Z|fffd|q|fffd||fffd||fffd||142||fffd||fffd||fffd||383|}|fffd|C|fffd|i|fffd|X
        Select Case strJiku(i - 2)
            Case "+", "-", "*", "/", "(", ",", "<", ">", "=", "<=", ">=", "^=", "!=", "<>"
                isMinus = True
                Exit Function
        End Select
    End If

End Function

Private Function isFunction(ByRef strJiku() As String, ByVal i As Long) As Long

    Dim result As Boolean
    Dim lngComma As Long
    Dim lngOther As Long
    Dim lngNest As Long
    Dim j As Long
    
    lngComma = 0
    lngOther = 0
    lngNest = 0
    result = False
    
    For j = i To UBound(strJiku())
    
        Select Case strJiku(j)
            Case "("
                lngNest = lngNest + 1
            Case ")"
                lngNest = lngNest - 1
                If lngNest <= 0 Then
                    Exit For
                End If
            Case ","
                If lngNest = 1 Then
                    lngComma = lngComma + 1
                End If
            Case Else
                If lngNest = 1 Then
                    lngOther = lngOther + 1
                End If
        End Select
    Next

    '()|fffd||30f||a347|
    If lngOther = 0 And lngComma = 0 Then
        isFunction = True
        Exit Function
    End If
    
    '|fffd|Z|fffd||fffd||fffd|e|fffd||fffd||fffd|X|fffd||fffd||fffd|P|fffd||82||fffd||fffd||fffd||fffd||30f||a347|
    If lngOther = 1 And lngComma = 0 Then
        isFunction = True
        Exit Function
    End If

    '|fffd|Z|fffd||fffd||fffd|e|fffd||fffd||fffd|X|fffd||fffd||fffd|J|fffd||fffd||fffd|}|fffd||fffd||602||fffd||30f||a347|
    If lngOther - 1 = lngComma Then
        isFunction = True
        Exit Function
    End If

    If existStr(strJiku(i - 1), C_COL_FUNCTION) Then
        If existFuncInSel(strJiku(), i) Then
            isFunction = False
        Else
            isFunction = True
        End If
    Else
        isFunction = False
    End If

    isFunction = result

End Function

Attribute VB_Name = "basScreenShot"
Option Explicit

#If VBA7 And Win64 Then

    Private Declare PtrSafe Function SetWindowLong Lib "user32" Alias "SetWindowLongPtrA" (ByVal hWnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    Private Declare PtrSafe Function CallWindowProc Lib "user32" Alias "CallWindowProcA" (ByVal lpPrevWndFunc As LongPtr, ByVal hWnd As LongPtr, ByVal Msg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr) As LongPtr

    Private Declare PtrSafe Function IsClipboardFormatAvailable Lib "User32.dll" (ByVal wFormat As Long) As Long

    Private Declare PtrSafe Function AddClipboardFormatListener Lib "User32.dll" (ByVal hWnd As LongPtr) As Long
    Private Declare PtrSafe Function RemoveClipboardFormatListener Lib "User32.dll" (ByVal hWnd As LongPtr) As Long
    Private Declare PtrSafe Function GetForegroundWindow Lib "user32" () As LongPtr
    
#Else
    
    Private Declare Function SetWindowLong Lib "user32" Alias "SetWindowLongA" (ByVal hWnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
    Private Declare Function CallWindowProc Lib "user32" Alias "CallWindowProcA" (ByVal lpPrevWndFunc As Long, ByVal hWnd As Long, ByVal Msg As Long, ByVal wParam As Long, ByVal lParam As Long) As Long

    Private Declare Function IsClipboardFormatAvailable Lib "User32.dll" (ByVal wFormat As Long) As Long
    
    Private Declare Function AddClipboardFormatListener Lib "User32.dll" (ByVal hWnd As Long) As Long
    Private Declare Function RemoveClipboardFormatListener Lib "User32.dll" (ByVal hWnd As Long) As Long
    Private Declare Function GetForegroundWindow Lib "user32" () As Long
    
#End If

Private Const GWL_WNDPROC = (-4)

Private Const CF_BITMAP = 2                          '|fffd|r|fffd|b|fffd|g|fffd|}|fffd|b|fffd|v
Private Const WM_CLIPBOARDUPDATE = &H31D

#If VBA7 And Win64 Then
    Private mGetHWnd As LongPtr
    Private mSetHWnd As LongPtr
#Else
    Private mGetHWnd As Long
    Private mSetHWnd As Long
#End If

Private mblnZoomEnable As Boolean
Private mlngZoomNum As Long
Private mblnSave As Boolean
Private mlngBlankNum As Long
Private mblnPageBreakEnable As Boolean
Private mlngPageBreakNun As Long

Public tray As TaskTrayView

Private WS As Worksheet
Sub GetScreenSetting(ByRef blnZoomEnable As Boolean, ByRef lngZoomNum As Long, ByRef blnSave As Boolean, ByRef lngBlankNum As Long, ByRef blnPageBreakEnable As Boolean, ByRef lngPageBreakNun As Long)

    blnZoomEnable = GetSetting(C_TITLE, "ScreenShot", "ZoomEnable", False)
    lngZoomNum = GetSetting(C_TITLE, "ScreenShot", "ZoomNum", 100)
    blnSave = GetSetting(C_TITLE, "ScreenShot", "Save", False)
    lngBlankNum = GetSetting(C_TITLE, "ScreenShot", "BlankNum", 2)
    blnPageBreakEnable = GetSetting(C_TITLE, "ScreenShot", "PageBreakEnable", False)
    lngPageBreakNun = GetSetting(C_TITLE, "ScreenShot", "PageBreakNum", 1)

End Sub
Sub SetScreenSetting(ByRef blnZoomEnable As Boolean, ByRef lngZoomNum As Long, ByRef blnSave As Boolean, ByRef lngBlankNum As Long, ByRef blnPageBreakEnable As Boolean, ByRef lngPageBreakNun As Long)

    Call SaveSetting(C_TITLE, "ScreenShot", "ZoomEnable", blnZoomEnable)
    Call SaveSetting(C_TITLE, "ScreenShot", "ZoomNum", lngZoomNum)
    Call SaveSetting(C_TITLE, "ScreenShot", "Save", blnSave)
    Call SaveSetting(C_TITLE, "ScreenShot", "BlankNum", lngBlankNum)
    Call SaveSetting(C_TITLE, "ScreenShot", "PageBreakEnable", blnPageBreakEnable)
    Call SaveSetting(C_TITLE, "ScreenShot", "PageBreakNum", lngPageBreakNun)

End Sub
Public Sub StartScreenShot()

    Dim blnZoomEnable As Boolean
    Dim lngZoomNum As Long
    Dim blnSave As Boolean
    Dim lngBlankNum As Long
    Dim blnPageBreakEnable As Boolean
    Dim lngPageBreakNun As Long

    GetScreenSetting blnZoomEnable, lngZoomNum, blnSave, lngBlankNum, blnPageBreakEnable, lngPageBreakNun
    
    mblnZoomEnable = blnZoomEnable
    mlngZoomNum = lngZoomNum
    mblnSave = blnSave
    mlngBlankNum = lngBlankNum
    mblnPageBreakEnable = blnPageBreakEnable
    mlngPageBreakNun = lngPageBreakNun
    Set WS = ActiveSheet

    mSetHWnd = frmScreenShot.hWnd
    
    '|fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd||fffd||fffd||10e||fffd|
    AddClipboardFormatListener mSetHWnd
    
    mGetHWnd = SetWindowLong(mSetHWnd, GWL_WNDPROC, AddressOf WndProc)

    Set tray = New TaskTrayView
    
    Call tray.AddIcon(Application.hWnd, "Excel|fffd|X|fffd|N|fffd|V|fffd||fffd|")  '|fffd|V|fffd|X|fffd|e|fffd||fffd||fffd|g|fffd||fffd||fffd|C|fffd||243|A|fffd|C|fffd|R|fffd||fffd||fffd||fffd|o|fffd|^
    Call tray.ShowBalloon("Excel|fffd|X|fffd|N|fffd|V|fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|J|fffd|n")

End Sub

Public Sub StopScreenShot()

    If mGetHWnd <> 0 Then
       Call SetWindowLong(mSetHWnd, GWL_WNDPROC, mGetHWnd)
    End If
    
    RemoveClipboardFormatListener mSetHWnd
    
    Set WS = Nothing
    
    tray.DeleteIcon
    Set tray = Nothing
    
End Sub

'-------------------------------------------------------
' |fffd|z|fffd|b|fffd|g|fffd|L|fffd|[|fffd||fffd||fffd|o
'-------------------------------------------------------
#If VBA7 And Win64 Then
Public Function WndProc(ByVal hWnd As LongPtr, ByVal uMsg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr) As LongPtr

    Static bolWndProcCheck As Boolean

    If Not bolWndProcCheck Then
        
        bolWndProcCheck = True
        
        Select Case uMsg
            Case WM_CLIPBOARDUPDATE
                If IsClipboardFormatAvailable(CF_BITMAP) <> 0 And GetForegroundWindow() <> Application.hWnd Then
                    Application.OnTime Now, "pasteScreenShot"
                End If
        End Select
        
        bolWndProcCheck = False
    
    End If
    
    WndProc = CallWindowProc(mGetHWnd, hWnd, uMsg, wParam, lParam)

End Function
#Else
Public Function WndProc(ByVal hWnd As Long, ByVal uMsg As Long, ByVal wParam As Long, ByVal lParam As Long) As Long

    Static bolWndProcCheck As Boolean

    If Not bolWndProcCheck Then
        
        bolWndProcCheck = True
        
        Select Case uMsg
            Case WM_CLIPBOARDUPDATE
                If IsClipboardFormatAvailable(CF_BITMAP) <> 0 And GetForegroundWindow() <> Application.hWnd Then
                    Application.OnTime Now, "pasteScreenShot"
                End If
        End Select
        
        bolWndProcCheck = False
    
    End If
    
    WndProc = CallWindowProc(mGetHWnd, hWnd, uMsg, wParam, lParam)

End Function
#End If
Public Sub pasteScreenShot()
                        
    Dim r As Range
    On Error Resume Next
    
    If WS Is Nothing Then
        tray.ShowBalloon "|fffd|\|fffd||fffd||82||fffd||fffd||fffd|V|fffd|[|fffd|g|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B|fffd|R|fffd|s|fffd|[|fffd||fffd||fffd|s|fffd||fffd||fffd||702||fffd||fffd||fffd|"
    Else
        
        '|fffd||645c||fffd||128d5|t
        WS.Paste
    
        If err.Number <> 0 Then
            tray.ShowBalloon "|fffd|R|fffd|s|fffd|[|fffd||fffd||fffd|s|fffd||fffd||fffd||702||fffd||fffd||fffd|"
        Else
    
            ' |fffd||645c||fffd||30f|k|fffd||fffd|
            If mblnZoomEnable Then
                Selection.ShapeRange.ScaleHeight CDbl(mlngZoomNum) / 100, msoFalse, msoScaleFromTopLeft
            End If
        
            Dim lngRow As Long
            
            ' |fffd|u|fffd||fffd||fffd||fffd||fffd|N|fffd|s|fffd||fffd||fffd|v|fffd|Z|fffd||fffd||fffd||102||fffd||fffd||fffd|
            lngRow = Selection.BottomRightCell.row + mlngBlankNum
        
            ' |fffd||fffd||fffd|s|fffd||310||752||fffd|
            If mblnPageBreakEnable Then
                ActiveWindow.SelectedSheets.HPageBreaks.Add Before:=WS.Cells(Selection.BottomRightCell.row + mlngPageBreakNun, Selection.TopLeftCell.Column)
            End If
        
            WS.Cells(lngRow, Selection.TopLeftCell.Column).Select
            
            '|fffd||6d1||fffd|
            If mblnSave Then
                WS.Parent.Save
            End If
            
           
        End If

    End If
    
End Sub


Attribute VB_Name = "basSection"
Option Explicit
Public mColSection As New Collection
Public mColAllSection As Collection
Public Sub createAllSectionObject()

    Set mColAllSection = New Collection

'    Dim i As Long
'    For i = 1 To mColAllSection.count
'        mColAllSection.Remove i
'    Next

    '|fffd||fffd||fffd||5c2||102||303|Z|fffd|N|fffd|V|fffd||fffd||fffd||fffd|
    mColAllSection.Add New SecNumPoint
    mColAllSection.Add New SecNumPoint2
    mColAllSection.Add New SecNumPoint3
    mColAllSection.Add New SecNum1S
    mColAllSection.Add New SecNum1E
    mColAllSection.Add New SecNum1K
    mColAllSection.Add New SecNum1
    mColAllSection.Add New SecNumA
    mColAllSection.Add New SecNumA2
    mColAllSection.Add New SecNumK
    mColAllSection.Add New SecNumK2
    mColAllSection.Add New SecNumK3
    mColAllSection.Add New SecNumK4
    mColAllSection.Add New SecNumK5
    mColAllSection.Add New SecNumK6
    mColAllSection.Add New SecNumI
    mColAllSection.Add New SecNumI2
    mColAllSection.Add New SecNumI4
'    mColAllSection.Add New SecNumI3

End Sub
Function rlxIsSectionNo(ByVal strBuf As String) As Boolean
Attribute rlxIsSectionNo.VB_Description = "|fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||590||fffd||fffd||182||fffd||fffd||10e|g|fffd|p|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
Attribute rlxIsSectionNo.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim i As Long
    Dim lngCnt As Long
    Dim strSecNo As String
    Dim blnFind As Boolean
    
    blnFind = False

    lngCnt = Len(strBuf)
    If lngCnt = 0 Then
        Exit Function
    End If

    If mColAllSection Is Nothing Then
        Call createAllSectionObject
    End If

    For i = 1 To mColAllSection.count
    
        strSecNo = mColAllSection(i).SectionNumber(strBuf)
        If Len(strSecNo) > 0 Then
            blnFind = True
            Exit For
        End If
        
    Next
    
    rlxIsSectionNo = blnFind

End Function
Function rlxGetSectionNoAny(ByVal strBuf As String) As String
Attribute rlxGetSectionNoAny.VB_Description = "|fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||590||fffd||fffd||182||fffd||fffd||10e|g|fffd|p|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
Attribute rlxGetSectionNoAny.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim i As Long
    Dim lngCnt As Long
    Dim strSecNo As String
    Dim blnFind As Boolean
    
    blnFind = False

    lngCnt = Len(strBuf)
    If lngCnt = 0 Then
        Exit Function
    End If
    
    strSecNo = ""

    If mColAllSection Is Nothing Then
        Call createAllSectionObject
    End If
    
    For i = 1 To mColAllSection.count
    
        strSecNo = mColAllSection(i).SectionNumber(strBuf)
        If Len(strSecNo) > 0 Then
            Exit For
        End If
        
    Next

    rlxGetSectionNoAny = strSecNo

End Function
Function rlxGetSectionNo(ByVal strBuf As String, ByVal lngIndentLevel As Long) As String
Attribute rlxGetSectionNo.VB_Description = "|fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||590||fffd||fffd||182||fffd||fffd||10e|g|fffd|p|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
Attribute rlxGetSectionNo.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim obj As Object

    Set obj = rlxGetSectionObject(lngIndentLevel).classObj

    rlxGetSectionNo = obj.SectionNumber(strBuf)
    
    Set obj = Nothing
    
End Function

Function rlxHasSectionNo(ByVal strBuf As String, ByVal lngIndentLevel As Long) As Boolean
Attribute rlxHasSectionNo.VB_Description = "|fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||590||fffd||fffd||182||fffd||fffd||10e|g|fffd|p|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
Attribute rlxHasSectionNo.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim i As Long
    Dim lngCnt As Long
    
    rlxHasSectionNo = False
    
    lngCnt = Len(strBuf)
    If lngCnt = 0 Then
        Exit Function
    End If
    
    If Len(rlxGetSectionNo(strBuf, lngIndentLevel)) > 0 Then
        rlxHasSectionNo = True
    End If
    
End Function

Function rlxGetSectionNext(ByVal strBuf As String, ByVal lngFromLevel As Long, ByVal lngIndentLevel As Long) As String
Attribute rlxGetSectionNext.VB_Description = "|fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||590||fffd||fffd||182||fffd||fffd||10e|g|fffd|p|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
Attribute rlxGetSectionNext.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim obj As Object

    Set obj = rlxGetSectionObject(lngIndentLevel).classObj

    '|fffd||fffd||fffd||50d||fffd||fffd||30e||64fe|
    rlxGetSectionNext = obj.NextNumber(strBuf, lngFromLevel, lngIndentLevel)
    
    Set obj = Nothing

End Function

Sub setSectionNo(ByRef r As Range, ByVal strNewNo As String)

    Dim lngPos As Long
    Dim obj As Object

    If VarType(r.Value) = vbString Then
        r.Characters(0, 0).Insert strNewNo
    Else
        r.Value = strNewNo & r.Value
    End If
    

    Set obj = rlxGetSectionObject(r.IndentLevel)

    '|fffd|t|fffd|H|fffd||fffd||fffd|g|fffd|L|fffd||fffd||fffd||30f||a347|
    If obj.useFormat Then
        r.Font.name = obj.fontName
        r.Font.Size = obj.fontSize
        r.Font.Bold = obj.fontBold
        r.Font.Italic = obj.fontItalic
        r.Font.Underline = obj.fontUnderLine
    End If

    Set obj = Nothing
    
End Sub

Sub delSectionNo(ByRef r As Range)

    Dim strSecNo As String
    Dim lngPos As Long
    Dim obj As Object

    '|fffd||fffd||fffd||742||312|i|fffd||fffd||fffd||50d||fffd||fffd||fffd||fffd||64fe||fffd|i|fffd||fffd||fffd|x|fffd||fffd||fffd||242||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd|j
    strSecNo = rlxGetSectionNoAny(r.Value)
    If VarType(r.Value) = vbString Then
        If Len(strSecNo) > 0 Then
            r.Characters(1, Len(strSecNo)).Delete
        End If
    Else
        If Len(strSecNo) > 0 Then
            r.Value = Mid$(r.Value, Len(strSecNo) + 1)
        End If
    End If

    Set obj = rlxGetSectionObject(r.IndentLevel)

    '|fffd|t|fffd|H|fffd||fffd||fffd|g|fffd|L|fffd||fffd||fffd||30f||a347|
    If obj.useFormat2 Then
        r.Font.name = obj.fontName2
        r.Font.Size = obj.fontSize2
        r.Font.Bold = obj.fontBold2
        r.Font.Italic = obj.fontItalic2
        r.Font.Underline = obj.fontUnderLine2
    End If

    Set obj = Nothing

End Sub

Function rlxGetSectionObject(ByVal lngLevel As Long) As Object
Attribute rlxGetSectionObject.VB_Description = "|fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||590||fffd||fffd||182||fffd||fffd||10e|g|fffd|p|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
Attribute rlxGetSectionObject.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim o As Object
    Dim key As String
    
    On Error Resume Next
    
    If mColSection Is Nothing Then
        Set mColSection = rlxInitSectionSetting()
    End If
    
    key = Format$((lngLevel Mod mColSection.count) + 1, "00")
    
    Set rlxGetSectionObject = mColSection(key)

End Function
Function rlxInitSectionSetting() As Collection
Attribute rlxInitSectionSetting.VB_Description = "|fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||590||fffd||fffd||182||fffd||fffd||10e|g|fffd|p|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
Attribute rlxInitSectionSetting.VB_ProcData.VB_Invoke_Func = " \n19"

    On Error Resume Next

    Dim i As Long
    Dim j As Long
    Dim strPos As String
    Dim C_FONT_DEFAULT As String
    Dim C_FONT_SIZE_DEFAULT As String
    Dim strClass As String
    
    C_FONT_DEFAULT = Application.StandardFont
    C_FONT_SIZE_DEFAULT = Application.StandardFontSize
    
    strPos = GetSetting(C_TITLE, "Section", "pos", "x")
    If strPos = "x" Then
    
        strPos = "1"
    
        Dim col As Collection
        Dim ss As SectionStructDTO
        
        For i = 1 To 6
        
            Set col = New Collection
            
            For j = 1 To 10
            
                strClass = getDefault(Format$(i, "00") & Format$(j, "00"), 2)
                If strClass <> "" Then
                    Set ss = New SectionStructDTO
                    Set ss.classObj = rlxCreateSectionObject(strClass)
                    ss.useFormat = False
                    ss.fontName = C_FONT_DEFAULT
                    ss.fontSize = C_FONT_SIZE_DEFAULT
                    ss.fontBold = False
                    ss.fontItalic = False
                    ss.fontUnderLine = False
                    
                    ss.useFormat2 = False
                    ss.fontName2 = C_FONT_DEFAULT
                    ss.fontSize2 = C_FONT_SIZE_DEFAULT
                    ss.fontBold2 = False
                    ss.fontItalic2 = False
                    ss.fontUnderLine2 = False
                    
                    col.Add ss, Format$(j, "00")
                    Set ss = Nothing
                End If
                
            Next
            
            setSectionSetting Format$(i, "00"), col
            Set col = Nothing
        
        Next
    End If
    
    Set rlxInitSectionSetting = rlxGetSectionSetting(Format$(Val(strPos), "00"))
    
End Function
Function rlxGetSectionSetting(ByVal strNo As String) As Collection
Attribute rlxGetSectionSetting.VB_Description = "|fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||590||fffd||fffd||182||fffd||fffd||10e|g|fffd|p|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
Attribute rlxGetSectionSetting.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim strClass As String
    Dim ss As SectionStructDTO
    Dim col As Collection
    Dim i As Long
    
    Dim C_FONT_DEFAULT As String
    Dim C_FONT_SIZE_DEFAULT As String
    C_FONT_DEFAULT = Application.StandardFont
    C_FONT_SIZE_DEFAULT = Application.StandardFontSize
    
    
    Set col = New Collection
    
    i = 1
    Do While True
        strClass = GetSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "class", "")
        If strClass = "" Then
            Exit Do
        Else
            Set ss = New SectionStructDTO
            Set ss.classObj = rlxCreateSectionObject(strClass)
            ss.useFormat = GetSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "useFormat", False)
            ss.fontName = GetSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "fontName", C_FONT_DEFAULT)
            ss.fontSize = GetSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "fontSize", C_FONT_SIZE_DEFAULT)
            ss.fontBold = GetSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "fontBold", False)
            ss.fontItalic = GetSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "fontItalic", False)
            ss.fontUnderLine = GetSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "fontUnderLine", False)
            
            ss.useFormat2 = GetSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "useFormat2", False)
            ss.fontName2 = GetSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "fontName2", C_FONT_DEFAULT)
            ss.fontSize2 = GetSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "fontSize2", C_FONT_SIZE_DEFAULT)
            ss.fontBold2 = GetSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "fontBold2", False)
            ss.fontItalic2 = GetSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "fontItalic2", False)
            ss.fontUnderLine2 = GetSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "fontUnderLine2", False)
            
            col.Add ss, Format$(i, "00")
            Set ss = Nothing
        End If
        i = i + 1
    Loop
    
    Set rlxGetSectionSetting = col
    
    Set col = Nothing
    
End Function
Sub setSectionSetting(ByVal strNo As String, ByRef col As Collection)

    Dim i As Long
    On Error Resume Next
    For i = 1 To 99
        err.Clear
        Call DeleteSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "class")
        If err.Number <> 0 Then
            err.Clear
            On Error GoTo 0
            Exit For
        End If
        Call DeleteSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "useFormat")
        Call DeleteSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "fontName")
        Call DeleteSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "fontSize")
        Call DeleteSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "fontBold")
        Call DeleteSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "fontItalic")
        Call DeleteSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "fontUnderLine")
        
        Call DeleteSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "useFormat2")
        Call DeleteSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "fontName2")
        Call DeleteSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "fontSize2")
        Call DeleteSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "fontBold2")
        Call DeleteSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "fontItalic2")
        Call DeleteSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "fontUnderLine2")
    Next
    
    For i = 1 To col.count
        
        If col(i).classObj Is Nothing Then
            Call SaveSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "class", "")
        Else
            Call SaveSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "class", col(i).classObj.Class)
        End If
        Call SaveSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "useFormat", col(i).useFormat)
        Call SaveSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "fontName", col(i).fontName)
        Call SaveSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "fontSize", col(i).fontSize)
        Call SaveSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "fontBold", col(i).fontBold)
        Call SaveSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "fontItalic", col(i).fontItalic)
        Call SaveSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "fontUnderLine", col(i).fontUnderLine)
        
        Call SaveSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "useFormat2", col(i).useFormat2)
        Call SaveSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "fontName2", col(i).fontName2)
        Call SaveSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "fontSize2", col(i).fontSize2)
        Call SaveSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "fontBold2", col(i).fontBold2)
        Call SaveSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "fontItalic2", col(i).fontItalic2)
        Call SaveSetting(C_TITLE, "Section", "Section" & strNo & Format$(i, "00") & "fontUnderLine2", col(i).fontUnderLine2)
        
    Next
    
End Sub
Private Function getDefault(ByVal strBuf As String, ByVal lngCol As Long) As Variant

    Dim i As Long
    Dim strRet As Variant

    i = 2
    strRet = ""

    Do Until ThisWorkbook.Worksheets("Section").Cells(i, 1).Value = ""

        If UCase(strBuf) = ThisWorkbook.Worksheets("Section").Cells(i, 1).Value Then
            strRet = ThisWorkbook.Worksheets("Section").Cells(i, lngCol).Value
            If UCase(strRet) = "FALSE" Then
                strRet = False
            End If
            If UCase(strRet) = "TRUE" Then
                strRet = True
            End If
            Exit Do
        End If

        i = i + 1

    Loop

    getDefault = strRet

End Function
Function rlxCreateSectionObject(ByVal className As String) As Object
Attribute rlxCreateSectionObject.VB_Description = "|fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||590||fffd||fffd||182||fffd||fffd||10e|g|fffd|p|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
Attribute rlxCreateSectionObject.VB_ProcData.VB_Invoke_Func = " \n19"

    Dim ret As Object
    Dim obj As Object
    Set ret = Nothing
    
    If mColAllSection Is Nothing Then
        Call createAllSectionObject
    End If
    
    For Each obj In mColAllSection
    
        If className = obj.Class Then
            Set ret = obj
            Exit For
        End If
    
    Next

    Set rlxCreateSectionObject = ret

End Function

Attribute VB_Name = "basSelection"
Option Explicit

Sub SelectionUndo()

    Selection.Value = pvarSelectionBuffer

End Sub
'--------------------------------------------------------------
' |fffd|w|fffd||fffd||348||351|I|fffd||fffd|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionRowSelect()
    
    Dim obj As SelectionRowSelect
    
    Set obj = New SelectionRowSelect
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' SQL|fffd||fffd||fffd|`(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionFormatSql()
    
    Dim obj As SelectionFormatSql
    
    Set obj = New SelectionFormatSql
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||fffd||30d||110||752||fffd|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionToFormula()
    
    Dim obj As SelectionToFormula
    
    Set obj = New SelectionToFormula
    
    obj.Run
    
    Set obj = Nothing
    
End Sub
'--------------------------------------------------------------
' |fffd||fffd||303|}|fffd|[|fffd|W(SelectionRowFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionRowMergeCol()
    
    Dim obj As SelectionRowMergeCol
    
    Set obj = New SelectionRowMergeCol
    
    obj.Run
    
    Set obj = Nothing
    
End Sub
'--------------------------------------------------------------
' INSERT|fffd||fffd||fffd||fffd||fffd||fffd|(SelectionRowFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionRowMakeSQLInsert()
    
    Dim obj As SelectionRowMakeSQLInsert
    
    Set obj = New SelectionRowMakeSQLInsert
    
    obj.Run
    
    Set obj = Nothing
    
End Sub
'--------------------------------------------------------------
' CRLF|fffd||d3dc|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionRemoveCrLf()
    
    Dim obj As SelectionRemoveCrLf
    
    Set obj = New SelectionRemoveCrLf
    
    obj.Run
    
    Set obj = Nothing
    
End Sub

'--------------------------------------------------------------
' |fffd|w|fffd||fffd||348||351|I|fffd||fffd|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionRowSelectCell()
    
    Dim obj As SelectionRowSelectCell
    
    Set obj = New SelectionRowSelectCell
    
    obj.Run
    
    Set obj = Nothing
    
End Sub
'--------------------------------------------------------------
' |fffd|w|fffd||fffd||348||343|V|fffd|t|fffd|g(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionRowShiftSelect()
    
    Dim obj As SelectionRowShiftSelect
    
    Set obj = New SelectionRowShiftSelect
    
    obj.Run
    
    Set obj = Nothing
    
End Sub
'--------------------------------------------------------------
' |fffd||d448f||fffd||fffd||fffd|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionTrimCell()

    Dim obj As SelectionTrimCell
    
    Set obj = New SelectionTrimCell
    
    obj.Run
    
    Set obj = Nothing
    
End Sub
'--------------------------------------------------------------
' |fffd||fffd||fffd|w|fffd||8576||fffd||fffd||fffd||fffd||fffd||d3dc|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionRemoveLeftString()
    
    Dim obj As SelectionRemoveLeftString
    
    Set obj = New SelectionRemoveLeftString
    
    obj.Run
    
    Set obj = Nothing
    
End Sub
'--------------------------------------------------------------
' |fffd|w|fffd||8576||fffd||fffd||fffd||fffd||fffd||20d|~|fffd||d3dc|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionRemoveLeftToString()
    
    Dim obj As SelectionRemoveLeftToString
    
    Set obj = New SelectionRemoveLeftToString
    
    obj.Run
    
    Set obj = Nothing
    
End Sub
'--------------------------------------------------------------
' |fffd|w|fffd||8576||fffd||fffd||fffd||211|O|fffd|~|fffd||d3dc|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionRemoveRightToString()
    
    Dim obj As SelectionRemoveRightToString
    
    Set obj = New SelectionRemoveRightToString
    
    obj.Run
    
    Set obj = Nothing
    
End Sub '--------------------------------------------------------------
' |fffd|E|fffd|w|fffd||8576||fffd||fffd||fffd||fffd||fffd||d3dc|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionRemoveRightString()

    Dim obj As SelectionRemoveRightString
    
    Set obj = New SelectionRemoveRightString
    
    obj.Run
    
    Set obj = Nothing
    

End Sub
'--------------------------------------------------------------
' |fffd|s|fffd||fffd||fffd||fffd||fffd||fffd||fffd||1c9||fffd|(SelectionAllFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionAllInsertHead()

    Dim obj As SelectionAllInsertHead
    
    Set obj = New SelectionAllInsertHead
    
    obj.Run
    
    Set obj = Nothing
    
End Sub
'--------------------------------------------------------------
' |fffd|s|fffd||fffd||fffd||fffd||fffd||fffd||fffd||1c9||fffd|(SelectionAllFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionAllInsertBottom()

    Dim obj As SelectionAllInsertBottom
    
    Set obj = New SelectionAllInsertBottom
    
    obj.Run
    
    Set obj = Nothing
    
End Sub
'--------------------------------------------------------------
' |fffd|s|fffd||fffd||fffd||fffd||fffd||fffd||fffd||1c9||fffd|(SelectionAllFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionAllInsertMiddle()

    Dim obj As SelectionAllInsertMiddle
    
    Set obj = New SelectionAllInsertMiddle
    
    obj.Run
    
    Set obj = Nothing
    
End Sub '--------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|N|fffd||fffd||fffd|A(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionInitialize()

    Dim obj As SelectionInitialize
    
    Set obj = New SelectionInitialize
    
    obj.Run
    
    Set obj = Nothing
    
End Sub
'--------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||3ca||fffd|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionToLower()

    Dim obj As SelectionToLower
    
    Set obj = New SelectionToLower
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||5576||fffd||fffd||fffd||3ca||fffd|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionToUpper()

    Dim obj As SelectionToUpper
    
    Set obj = New SelectionToUpper
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||fffd|p|fffd||3ca||fffd|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionToHankaku()

    Dim obj As SelectionToHankaku
    
    Set obj = New SelectionToHankaku
    
    obj.Run
    
    Set obj = Nothing


End Sub
'--------------------------------------------------------------
' |fffd|S|fffd|p|fffd||3ca||fffd|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionToZenkaku()

    Dim obj As SelectionToZenkaku
    
    Set obj = New SelectionToZenkaku
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|S|fffd|p|fffd||402||70aa||fffd||215||3ca||fffd|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionToHiragana()

    Dim obj As SelectionToHiragana
    
    Set obj = New SelectionToHiragana
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|S|fffd|p|fffd|J|fffd|^|fffd|J|fffd|i|fffd||3ca||fffd|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionToKatakana()

    Dim obj As SelectionToKatakana
    
    Set obj = New SelectionToKatakana
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|d|fffd|q|fffd|[|fffd|i|fffd||3ca||fffd|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionToElectoric()

    Dim obj As SelectionToElectoric
    
    Set obj = New SelectionToElectoric
    
    obj.Run
    
    Set obj = Nothing

End Sub '--------------------------------------------------------------
' |fffd|P|fffd||fffd||310||64ea||fffd||302||751||5576||fffd||fffd|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionToPropercase()
  
    Dim obj As SelectionToPropercase
    
    Set obj = New SelectionToPropercase
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' 8|fffd|P|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|t|fffd||255||3ca||fffd|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionToDate8()

    Dim obj As SelectionToDate8
    
    Set obj = New SelectionToDate8
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' 6|fffd|P|fffd|^|fffd||fffd||fffd||fffd|(YYMMDD)|fffd||fffd||fffd||fffd|t|fffd||255||3ca||fffd|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionToDate6()

    Dim obj As SelectionToDate6
    
    Set obj = New SelectionToDate6
    
    obj.Run
    
    Set obj = Nothing


End Sub
'--------------------------------------------------------------
' 6|fffd|P|fffd|^|fffd||fffd||fffd||fffd|(MMDDYY)|fffd||fffd||fffd||fffd|t|fffd||255||3ca||fffd|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionToDate6mdy()

    Dim obj As SelectionToDate6mdy
    
    Set obj = New SelectionToDate6mdy
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' 6|fffd|P|fffd|^|fffd||fffd||fffd||fffd|(DDMMYY)|fffd||fffd||fffd||fffd|t|fffd||255||3ca||fffd|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionToDate6dmy()

    Dim obj As SelectionToDate6dmy
    
    Set obj = New SelectionToDate6dmy
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||9576||fffd||fffd||fffd||fffd||143|t|fffd|H|fffd||fffd||fffd|_|fffd||c42c|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionCreateFolder()

    Dim obj As SelectionCreateFolder
    
    Set obj = New SelectionCreateFolder
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||302||742||242||fffd||fffd||fffd|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionRemovePath()

    Dim obj As SelectionRemovePath
    
    Set obj = New SelectionRemovePath
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|g|fffd||fffd||fffd|q|fffd||fffd||fffd||d3dc|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionRemoveExt()

    Dim obj As SelectionRemoveExt
    
    Set obj = New SelectionRemoveExt
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||302||742||242||fffd||fffd||fffd|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionRemoveFilename()

    Dim obj As SelectionRemoveFilename
    
    Set obj = New SelectionRemoveFilename
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|Z|fffd||fffd||fffd||314|w|fffd|i|fffd|F|fffd||fffd||fffd|q|fffd|f|fffd|a|fffd||14e||64fe|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionCheckCellColor()

    Dim obj As SelectionCheckCellColor
    
    Set obj = New SelectionCheckCellColor
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||4c3|`|fffd|F|fffd|b|fffd|N(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionCheckUniq()

    Dim obj As SelectionCheckUniq
    
    Set obj = New SelectionCheckUniq
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||4c3|`|fffd|F|fffd|b|fffd|N|fffd|i|fffd|s|fffd||389||fffd||fffd|j(SelectionRowFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionRowCheckUniq()

    Dim obj As SelectionRowCheckUniq
    
    Set obj = New SelectionRowCheckUniq
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||4c3|`|fffd|F|fffd|b|fffd|N|fffd|i|fffd||348||341|j(SelectionRowFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionRowCheckFromTo()

    Dim obj As SelectionRowCheckFromTo
    
    Set obj = New SelectionRowCheckFromTo
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|d|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||682||fffd||fffd||d3dc|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionSetUniq()
    
    Dim obj As SelectionSetUniq
    
    Set obj = New SelectionSetUniq
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|d|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||682||fffd||fffd||d3dc||fffd|s|fffd||389||fffd|(SelectionFrameWorkBox|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionRowSetUniq()
    
    Dim obj As SelectionRowSetUniq
    
    Set obj = New SelectionRowSetUniq
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' DB|fffd|t|fffd|B|fffd|[|fffd||fffd||fffd|h|fffd||fffd||fffd||fffd||fffd||fffd|JAVA|fffd||fffd|(get)(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionToJavaStringGet()

    'Java|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim obj As SelectionToJavaString
    
    Set obj = New SelectionToJavaString
    
    obj.setType = "get"
    
    obj.Run
    
    Set obj = Nothing
    
End Sub
'--------------------------------------------------------------
' DB|fffd|t|fffd|B|fffd|[|fffd||fffd||fffd|h|fffd||fffd||fffd||fffd||fffd||fffd|JAVA|fffd||fffd|(set)(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionToJavaStringSet()

    'Java|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim obj As SelectionToJavaString
    
    Set obj = New SelectionToJavaString
    
    obj.setType = "set"
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' DB|fffd|t|fffd|B|fffd|[|fffd||fffd||fffd|h|fffd||fffd||fffd||fffd||fffd||fffd|JAVA|fffd||fffd|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionToJavaString()

    'Java|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim obj As SelectionToJavaString
    
    Set obj = New SelectionToJavaString
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' JAVA|fffd||fffd||fffd||fffd||fffd||fffd|DB|fffd|t|fffd|B|fffd|[|fffd||fffd||fffd|h|fffd||fffd|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionToDBString()

    'Java|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim obj As SelectionToDBString
    
    Set obj = New SelectionToDBString
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||fffd||42f42||fffd|\|fffd|i|fffd||fffd||fffd||1386||fffd|p|fffd|j(SelectionRowFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionRowDrawGridHogan()

    Dim obj As SelectionRowDrawGrid
    
    Set obj = New SelectionRowDrawGrid
    obj.HeadColor = 16764057
    obj.EvenColor = -1
    obj.Custom = False
    
    obj.HoganMode = True
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||fffd||42f42||fffd|\|fffd|i|fffd|V|fffd||fffd||fffd|v|fffd||fffd||fffd|j(SelectionRowFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionRowDrawGrid()

    Dim obj As SelectionRowDrawGrid
    
    Set obj = New SelectionRowDrawGrid
    obj.HeadColor = 16764057
    obj.EvenColor = -1
    obj.Custom = False
    
'    obj.HoganMode = True
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||fffd||42f42||fffd|\|fffd|i|fffd|V|fffd||fffd||fffd|v|fffd||fffd||fffd|j|fffd|s|fffd|P|fffd||fffd|P(SelectionRowFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionRowDrawGrid1And1()

    Dim obj As SelectionRowDrawGrid

    Set obj = New SelectionRowDrawGrid
    obj.HeadColor = 16764057
    obj.EvenColor = -1
    obj.Custom = False

    obj.HeadLine = 1
    obj.ColLine = 1

'    obj.HoganMode = True

    obj.Run

    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||fffd||42f42||fffd|\|fffd|i|fffd|W|fffd||fffd||fffd|E|fffd|w|fffd|b|fffd|_|fffd|Q|fffd|s|fffd|j(SelectionRowFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionRowDrawGrid2()

    Dim obj As SelectionRowDrawGrid
    
    Set obj = New SelectionRowDrawGrid
    obj.HeadColor = 16764057
    obj.EvenColor = -1
    obj.Custom = False
    obj.HeadLine = 2
    
'    obj.HoganMode = True
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||fffd||42f42||fffd|\|fffd|i|fffd|W|fffd||fffd||fffd|E|fffd|w|fffd|b|fffd|_|fffd|R|fffd|s|fffd|j(SelectionRowFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionRowDrawGrid3()

    Dim obj As SelectionRowDrawGrid
    
    Set obj = New SelectionRowDrawGrid
    obj.HeadColor = 16764057
    obj.EvenColor = -1
    obj.Custom = False
    obj.HeadLine = 3
    
'    obj.HoganMode = True
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||fffd||42f42||fffd|\|fffd|i|fffd||fffd||fffd||702||fffd||fffd||703|u|fffd||fffd||fffd|[|fffd|j(SelectionRowFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionRowDrawGridBlue()

    Dim obj As SelectionRowDrawGrid
    
    Set obj = New SelectionRowDrawGrid
    
    obj.HeadColor = 16764057
    obj.EvenColor = 16777164
    obj.Custom = False
    
'    obj.HoganMode = True
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||fffd||42f42||fffd|\|fffd|i|fffd||fffd||fffd||702||fffd||fffd||703|x|fffd|[|fffd|W|fffd||fffd||fffd|j(SelectionRowFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionRowDrawGridBeige()

    Dim obj As SelectionRowDrawGrid
    
    Set obj = New SelectionRowDrawGrid
    
    obj.HeadColor = 10079487
    obj.EvenColor = 10092543
    obj.Custom = False
    
'    obj.HoganMode = True
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||fffd||42f42||fffd|\|fffd|i|fffd|J|fffd|X|fffd|^|fffd||fffd||fffd|j(SelectionRowFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionRowDrawGridCustom()

    Dim obj As SelectionRowDrawGrid
    
    Set obj = New SelectionRowDrawGrid
    
    obj.HeadColor = 16764057
    obj.EvenColor = 16777164
    obj.Custom = True
    
'    obj.HoganMode = True
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd|i|fffd||f414||fffd|s|fffd|j(SelectionRowFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionRowSelectOdd()

    Dim obj As SelectionRowSelectOdd
    
    Set obj = New SelectionRowSelectOdd
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd|i|fffd||f414||fffd||fffd|j(SelectionColFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionColSelectOdd()

    Dim obj As SelectionColSelectOdd
    
    Set obj = New SelectionColSelectOdd
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|n|fffd|C|fffd|p|fffd|[|fffd||fffd||fffd||fffd||fffd|N|fffd||30d||d3dc|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionRemoveHyperlink()

    Dim obj As SelectionRemoveHyperlink
    
    Set obj = New SelectionRemoveHyperlink
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|Z|fffd||fffd||fffd||310||fffd|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionCheckCount()

    Dim obj As SelectionCheckCount
    
    Set obj = New SelectionCheckCount
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|Z|fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionCheckSize()

    Dim obj As SelectionCheckSize
    
    Set obj = New SelectionCheckSize
    
    obj.CountType = SelectionCheckSizeConstants.CountTypeSJIS
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|Z|fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd|(SelectionFrameWork|fffd|g|fffd|p)UTF8
'--------------------------------------------------------------
Sub execSelectionCheckSizeUTF8()

    Dim obj As SelectionCheckSize
    
    Set obj = New SelectionCheckSize
    
    obj.CountType = SelectionCheckSizeConstants.CountTypeUTF8
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|I|fffd||fffd||348||342||152|l|fffd||302||fffd||fffd||fffd|Z|fffd||fffd||fffd||fffd|I|fffd||fffd|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionSelectValueCell()

    Dim obj As SelectionSelectValueCell
    
    Set obj = New SelectionSelectValueCell
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|I|fffd||fffd||348||342||152|l|fffd||302||202||fffd||fffd|Z|fffd||fffd||fffd||fffd|I|fffd||fffd|(SelectionAllFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionAllSelectEmptyCell()

    Dim obj As SelectionAllSelectEmptyCell
    
    Set obj = New SelectionAllSelectEmptyCell
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|l|fffd||14d|X|fffd|V(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionToValue()

    Dim obj As SelectionToValue
    
    Set obj = New SelectionToValue
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|w|fffd||fffd||fffd|\|fffd|L|fffd||15d8e||fffd||fffd||fffd||255||3ca||fffd|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionStringFormura()

    Dim obj As SelectionStringFormura
    
    Set obj = New SelectionStringFormura
    
    obj.Run
    
    Set obj = Nothing

End Sub

'--------------------------------------------------------------
' |fffd|[|fffd||fffd||fffd||fffd||fffd||fffd|(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionStringZeroPadding()

    Dim obj As SelectionStringZeroPadding
    
    Set obj = New SelectionStringZeroPadding
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' Luhn|fffd|`|fffd|F|fffd|b|fffd|N(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionCheckLuhn()

    Dim obj As SelectionCheckLuhn
    
    Set obj = New SelectionCheckLuhn
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||fffd|W|fffd||fffd||fffd||fffd||fffd|X|fffd|P|fffd|O|fffd|`|fffd|F|fffd|b|fffd|N(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionCheckModulus10()

    Dim obj As SelectionCheckModulus10
    
    Set obj = New SelectionCheckModulus10
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||fffd|W|fffd||fffd||fffd||fffd||fffd|X|fffd|P|fffd|P|fffd|`|fffd|F|fffd|b|fffd|N(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionCheckModulus11_10_2()

    Dim obj As SelectionCheckModulus11_10_2
    
    Set obj = New SelectionCheckModulus11_10_2
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||fffd|W|fffd||fffd||fffd||fffd||fffd|X|fffd|P|fffd|P|fffd|`|fffd|F|fffd|b|fffd|N(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionCheckModulus11_2_7()

    Dim obj As SelectionCheckModulus11_2_7
    
    Set obj = New SelectionCheckModulus11_2_7
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||fffd|W|fffd||fffd||fffd||fffd||fffd|X|fffd|P|fffd|P|fffd|`|fffd|F|fffd|b|fffd|N(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionCheckModulus11_Pref()

    Dim obj As SelectionCheckModulus11_Pref
    
    Set obj = New SelectionCheckModulus11_Pref
    
    obj.Run
    
    Set obj = Nothing

End Sub

'--------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionCheckNumber()

    Dim obj As SelectionCheckNumber
    
    Set obj = New SelectionCheckNumber
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|p|fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionCheckAlphabet()

    Dim obj As SelectionCheckAlphabet
    
    Set obj = New SelectionCheckAlphabet
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|p|fffd||fffd||fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionCheckAlphaAndNum()

    Dim obj As SelectionCheckAlphaAndNum
    
    Set obj = New SelectionCheckAlphaAndNum
    
    obj.Run
    
    Set obj = Nothing

End Sub

'--------------------------------------------------------------
' |fffd||fffd||fffd|l|fffd||d3||fffd||fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionCheckNumeric()

    Dim obj As SelectionCheckNumeric
    
    Set obj = New SelectionCheckNumeric
    
    obj.Run
    
    Set obj = Nothing

End Sub

'--------------------------------------------------------------
' |fffd||fffd||fffd|t|fffd||d3||fffd||fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionCheckDate()

    Dim obj As SelectionCheckDate
    
    Set obj = New SelectionCheckDate
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd||51d8d||743|`|fffd|F|fffd|b|fffd|N(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionCheckAsc()

    Dim obj As SelectionCheckAsc
    
    Set obj = New SelectionCheckAsc
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|S|fffd|p|fffd||fffd||fffd||fffd||fffd||51d8d||743|`|fffd|F|fffd|b|fffd|N(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionCheckSJIS()

    Dim obj As SelectionCheckSJIS
    
    Set obj = New SelectionCheckSJIS
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|l|fffd|b|fffd|g|fffd||fffd||fffd|[|fffd|N|fffd|h|fffd||fffd||fffd|C|fffd|u|fffd||fffd|UNC(SelectionFrameWork|fffd|g|fffd|p)
'--------------------------------------------------------------
Sub execSelectionToUNC()

    Dim obj As SelectionToUNC
    
    Set obj = New SelectionToUNC
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|c|fffd||fffd||fffd||fffd||fffd||243|}|fffd|[|fffd|W
'--------------------------------------------------------------
Sub execSelectionColMerge()

    Dim obj As SelectionColMerge
    
    Set obj = New SelectionColMerge
    
    obj.Run
    
    Set obj = Nothing

End Sub

'--------------------------------------------------------------
' |fffd|Z|fffd||fffd||fffd||30d||14c||fffd||242|P|fffd|s|fffd||fffd||fffd|s|fffd||fffd|t|fffd||fffd||fffd||fffd||fffd||fffd|B
'--------------------------------------------------------------
Sub execSelectionLineFeedInsert()

    Dim obj As SelectionLineFeedInsert
    
    Set obj = New SelectionLineFeedInsert
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|Z|fffd||fffd||fffd||30d||14c||fffd||242|P|fffd|s|fffd||fffd||fffd|s|fffd||fffd||fffd||d3dc||fffd||fffd||fffd||fffd|B
'--------------------------------------------------------------
Sub execSelectionLineFeedDelete()

    Dim obj As SelectionLineFeedDelete
    
    Set obj = New SelectionLineFeedDelete
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|Z|fffd||fffd||fffd||243|n|fffd|C|fffd|t|fffd||fffd||fffd||fffd||752||80b7||fffd||fffd|B
'--------------------------------------------------------------
Sub execSelectionInsertHyphen()

    Dim obj As SelectionInsertStrInCell
    
    Set obj = New SelectionInsertStrInCell
    
    obj.InsertStr = "-"
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|Z|fffd||fffd||fffd||243|n|fffd|C|fffd|t|fffd||fffd||fffd||fffd||752||80b7||fffd||fffd|B
'--------------------------------------------------------------
Sub execSelectionInsertHyphenZen()

    Dim obj As SelectionInsertStrInCell
    
    Set obj = New SelectionInsertStrInCell
    
    obj.InsertStr = "|fffd||"
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|i|fffd||fffd||fffd||50d||fffd||fffd||fffd|U|fffd||fffd|
'--------------------------------------------------------------
Sub execSelectionSectionNumber()

    Dim obj As SelectionSectionNumber
    
    Set obj = New SelectionSectionNumber
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|i|fffd||fffd||fffd||50d||fffd||fffd||fffd|U|fffd||fffd|(|fffd||fffd||fffd|C|fffd||fffd||fffd|f|fffd||fffd||fffd|g)
'--------------------------------------------------------------
Sub execSelectionSectionNumberIndentL()

    Dim obj As SelectionSectionNumber
    
    Set obj = New SelectionSectionNumber
    
    obj.Indent = -1
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|i|fffd||fffd||fffd||50d||fffd||fffd||fffd|U|fffd||fffd|(|fffd|E|fffd|C|fffd||fffd||fffd|f|fffd||fffd||fffd|g)
'--------------------------------------------------------------
Sub execSelectionSectionNumberIndentR()

    Dim obj As SelectionSectionNumber
    
    Set obj = New SelectionSectionNumber
    
    obj.Indent = 1
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|E|fffd|C|fffd||fffd||fffd|f|fffd||fffd||fffd|g
'--------------------------------------------------------------
Sub execSelectionAllIndentR()

    Dim obj As SelectionAllIndent
    
    Set obj = New SelectionAllIndent
    
    obj.Indent = 1
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||fffd|C|fffd||fffd||fffd|f|fffd||fffd||fffd|g
'--------------------------------------------------------------
Sub execSelectionAllIndentL()

    Dim obj As SelectionAllIndent
    
    Set obj = New SelectionAllIndent
    
    obj.Indent = -1
    
    obj.Run
    
    Set obj = Nothing

End Sub '--------------------------------------------------------------
' |fffd||fffd||fffd||30aa||fffd||fffd|r|fffd||fffd|
'--------------------------------------------------------------
Sub execSelectionAllDiagonalUp()

    Dim obj As SelectionAllDiagonalUp
    
    Set obj = New SelectionAllDiagonalUp
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|E|fffd||30aa||fffd||fffd|r|fffd||fffd|
'--------------------------------------------------------------
Sub execSelectionAllDiagonalDown()

    Dim obj As SelectionAllDiagonalDown
    
    Set obj = New SelectionAllDiagonalDown
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||fffd|P|fffd||fffd||fffd||d3dc|
'--------------------------------------------------------------
Sub execSelectionDelete1Char()

    Dim obj As SelectionDelete1Char
    
    Set obj = New SelectionDelete1Char
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|E|fffd|P|fffd||fffd||fffd||d3dc|
'--------------------------------------------------------------
Sub execSelectionDelete1RightChar()

    Dim obj As SelectionDelete1RightChar
    
    Set obj = New SelectionDelete1RightChar
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||4c2||827c||fffd||fffd||fffd|N|fffd||fffd||fffd|A
'--------------------------------------------------------------
Sub execSelectionClearPhonetic()

    Dim obj As SelectionClearPhonetic
    
    Set obj = New SelectionClearPhonetic
    
    obj.Run
    
    Set obj = Nothing

End Sub

'--------------------------------------------------------------
' |fffd|i|fffd||fffd||fffd||50d||fffd||fffd||d3dc|
'--------------------------------------------------------------
Sub execSelectionDelSectionNo()

    Dim obj As SelectionDelSectionNo
    
    Set obj = New SelectionDelSectionNo
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|i|fffd||fffd||fffd||50d||fffd||fffd||1c9||fffd|
'--------------------------------------------------------------
Sub execSelectionAllAddSectionNo()

    Dim obj As SelectionAllAddSectionNo
    
    Set obj = New SelectionAllAddSectionNo
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|i|fffd||fffd||fffd||50d||fffd||fffd|R|fffd|s|fffd|[
'--------------------------------------------------------------
Sub execSelectionCopySectionNo()

    Dim obj As SelectionCopySectionNo
    
    Set obj = New SelectionCopySectionNo
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||4cf||fffd||fffd||fffd||fffd||fffd||fffd||d3dc|
'--------------------------------------------------------------
Sub execSelectionDelItemNo()

    Dim obj As SelectionDelItemNo
    
    Set obj = New SelectionDelItemNo
    
    obj.Run
    
    Set obj = Nothing

End Sub '--------------------------------------------------------------
' |fffd|u|fffd|E|fffd|v|fffd||1c9||fffd|
'--------------------------------------------------------------
Sub execSelectionAllAddItemPoint()

    Dim obj As SelectionAllAddItemNo
    
    Set obj = New SelectionAllAddItemNo
    
    obj.ItemName = "itemPoint"
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|u|fffd||fffd||fffd|v|fffd||1c9||fffd|
'--------------------------------------------------------------
Sub execSelectionAllAddItemCircleB()

    Dim obj As SelectionAllAddItemNo
    
    Set obj = New SelectionAllAddItemNo
    
    obj.ItemName = "itemCircleB"
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|u|fffd||fffd||fffd|v|fffd||1c9||fffd|
'--------------------------------------------------------------
Sub execSelectionAllAddItemCircleW()

    Dim obj As SelectionAllAddItemNo
    
    Set obj = New SelectionAllAddItemNo
    
    obj.ItemName = "itemCircleW"
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|u|fffd||fffd||fffd|v|fffd||1c9||fffd|
'--------------------------------------------------------------
Sub execSelectionAllAddItemDiaB()

    Dim obj As SelectionAllAddItemNo
    
    Set obj = New SelectionAllAddItemNo
    
    obj.ItemName = "itemDiaB"
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|u|fffd||fffd||fffd|v|fffd||1c9||fffd|
'--------------------------------------------------------------
Sub execSelectionAllAddItemDiaW()

    Dim obj As SelectionAllAddItemNo
    
    Set obj = New SelectionAllAddItemNo
    
    obj.ItemName = "itemDiaW"
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|u|fffd||fffd||fffd|v|fffd||1c9||fffd|
'--------------------------------------------------------------
Sub execSelectionAllAddItemRevTriB()

    Dim obj As SelectionAllAddItemNo
    
    Set obj = New SelectionAllAddItemNo
    
    obj.ItemName = "itemRevTriB"
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|u|fffd||fffd||fffd|v|fffd||1c9||fffd|
'--------------------------------------------------------------
Sub execSelectionAllAddItemRevTriW()

    Dim obj As SelectionAllAddItemNo
    
    Set obj = New SelectionAllAddItemNo
    
    obj.ItemName = "itemRevTriW"
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|u|fffd||fffd||fffd|v|fffd||1c9||fffd|
'--------------------------------------------------------------
Sub execSelectionAllAddItemSquareB()

    Dim obj As SelectionAllAddItemNo
    
    Set obj = New SelectionAllAddItemNo
    
    obj.ItemName = "itemSquareB"
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|u|fffd||fffd||fffd|v|fffd||1c9||fffd|
'--------------------------------------------------------------
Sub execSelectionAllAddItemSquareW()

    Dim obj As SelectionAllAddItemNo
    
    Set obj = New SelectionAllAddItemNo
    
    obj.ItemName = "itemSquareW"
    
    obj.Run
    
    Set obj = Nothing

End Sub

'--------------------------------------------------------------
' |fffd|u1)|fffd|v|fffd||1c9||fffd|
'--------------------------------------------------------------
Sub execSelectionAllAddItemNum1()

    Dim obj As SelectionAllAddItemNo
    
    Set obj = New SelectionAllAddItemNo
    
    obj.ItemName = "itemNum1"
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|u(a)|fffd|v|fffd||1c9||fffd|
'--------------------------------------------------------------
Sub execSelectionAllAddItemNumA2()

    Dim obj As SelectionAllAddItemNo
    
    Set obj = New SelectionAllAddItemNo
    
    obj.ItemName = "itemNumA2"
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|u|fffd|@|fffd|v|fffd||1c9||fffd|
'--------------------------------------------------------------
Sub execSelectionAllAddItemNumC()

    Dim obj As SelectionAllAddItemNo
    
    Set obj = New SelectionAllAddItemNo
    
    obj.ItemName = "itemNumC"
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|ua)|fffd|v|fffd||1c9||fffd|
'--------------------------------------------------------------
Sub execSelectionAllAddItemNumA()

    Dim obj As SelectionAllAddItemNo
    
    Set obj = New SelectionAllAddItemNo
    
    obj.ItemName = "itemNumA"
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|u|fffd||fffd|P)|fffd|v|fffd||1c9||fffd|
'--------------------------------------------------------------
Sub execSelectionAllAddItemNumExp()

    Dim obj As SelectionAllAddItemNo
    
    Set obj = New SelectionAllAddItemNo
    
    obj.ItemName = "itemNumExp"
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|u1.|fffd|v|fffd||1c9||fffd|
'--------------------------------------------------------------
Sub execSelectionAllAddItemNumPoint2()

    Dim obj As SelectionAllAddItemNo
    
    Set obj = New SelectionAllAddItemNo
    
    obj.ItemName = "itemNumPoint2"
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|u|fffd||fffd||fffd|v|fffd||1c9||fffd|
'--------------------------------------------------------------
Sub execSelectionAllAddItemNumImp()

    Dim obj As SelectionAllAddItemNo
    
    Set obj = New SelectionAllAddItemNo
    
    obj.ItemName = "itemImp"
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|u|fffd||fffd||fffd|v|fffd||1c9||fffd|
'--------------------------------------------------------------
Sub execSelectionAllAddItemNumDouble()

    Dim obj As SelectionAllAddItemNo
    
    Set obj = New SelectionAllAddItemNo
    
    obj.ItemName = "itemDouble"
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|u|fffd||fffd||fffd|v|fffd||1c9||fffd|
'--------------------------------------------------------------
Sub execSelectionAllAddItemNumStarB()

    Dim obj As SelectionAllAddItemNo
    
    Set obj = New SelectionAllAddItemNo
    
    obj.ItemName = "itemStarB"
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|u|fffd||fffd||fffd|v|fffd||1c9||fffd|
'--------------------------------------------------------------
Sub execSelectionAllAddItemNumStarW()

    Dim obj As SelectionAllAddItemNo
    
    Set obj = New SelectionAllAddItemNo
    
    obj.ItemName = "itemStarW"
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|u|fffd|Y|fffd|v|fffd||1c9||fffd|
'--------------------------------------------------------------
Sub execSelectionAllAddItemNumSime()

    Dim obj As SelectionAllAddItemNo
    
    Set obj = New SelectionAllAddItemNo
    
    obj.ItemName = "itemSime"
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|u|fffd||2c1|v|fffd||1c9||fffd|
'--------------------------------------------------------------
Sub execSelectionAllAddItemNumDblR()

    Dim obj As SelectionAllAddItemNo
    
    Set obj = New SelectionAllAddItemNo
    
    obj.ItemName = "itemDblR"
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||fffd||202||fffd||fffd|l|fffd||fffd||fffd|}|fffd|[|fffd|W
'--------------------------------------------------------------
Sub execSelectionMerge()

    Dim obj As SelectionMerge
    
    Set obj = New SelectionMerge
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||fffd||202||fffd||fffd|l|fffd||fffd||fffd|}|fffd|[|fffd|W
'--------------------------------------------------------------
Sub execSelectionMergeLine()

    Dim obj As SelectionMergeLine
    
    Set obj = New SelectionMergeLine
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|}|fffd|[|fffd|W|fffd||30b|t
'--------------------------------------------------------------
Sub execSelectionNoMerge()

    Dim obj As SelectionNoMerge
    
    Set obj = New SelectionNoMerge
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|N|fffd||fffd||fffd|b|fffd|v|fffd|{|fffd|[|fffd|h|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd|R|fffd|s|fffd|[
'--------------------------------------------------------------
Sub execSelectionSetClipboardCopy()

    Dim obj As SelectionSetClipboardCopy
    
    Set obj = New SelectionSetClipboardCopy
    
    obj.Run
    
    Set obj = Nothing

End Sub

'--------------------------------------------------------------
' |fffd||fffd||fffd||9576||fffd||fffd||fffd||fffd||fffd||7376||fffd||fffd||fffd||fffd||fffd||d3dc|
'--------------------------------------------------------------
Sub execSelectionRemoveLeftToChar()

    Dim obj As SelectionRemoveLeftToChar
    
    Set obj = New SelectionRemoveLeftToChar
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||fffd||9576||fffd||fffd||fffd||fffd||fffd||fffd|E|fffd||fffd||fffd||fffd||fffd||d3dc|
'--------------------------------------------------------------
Sub execSelectionRemoveRightToChar()

    Dim obj As SelectionRemoveRightToChar
    
    Set obj = New SelectionRemoveRightToChar
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||38e|Q|fffd||195||3ca||fffd|
'--------------------------------------------------------------
Sub execSelectionToAbsolute()

    Dim obj As SelectionToAbsolute
    
    Set obj = New SelectionToAbsolute
    
    obj.RefType = xlAbsolute
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||fffd||38e|Q|fffd||195||3ca||fffd|
'--------------------------------------------------------------
Sub execSelectionToRelative()

    Dim obj As SelectionToAbsolute
    
    Set obj = New SelectionToAbsolute
    
    obj.RefType = xlRelative
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||38e|Q|fffd||195||3ca||fffd|(|fffd||fffd|)
'--------------------------------------------------------------
Sub execSelectionToRelRowAbsColumn()

    Dim obj As SelectionToAbsolute
    
    Set obj = New SelectionToAbsolute
    
    obj.RefType = xlRelRowAbsColumn
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||38e|Q|fffd||195||3ca||fffd|(|fffd|s)
'--------------------------------------------------------------
Sub execSelectionToAbsRowRelColumn()

    Dim obj As SelectionToAbsolute
    
    Set obj = New SelectionToAbsolute
    
    obj.RefType = xlAbsRowRelColumn
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|l|fffd||fffd|
'--------------------------------------------------------------
Sub execSelectionAlignTopLeft()

    Dim obj As SelectionAlign
    
    Set obj = New SelectionAlign
    
    obj.VerticalAlignment = xlTop
    obj.HorizontalAlignment = xlLeft
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|l|fffd||fffd|
'--------------------------------------------------------------
Sub execSelectionAlignTopCenter()

    Dim obj As SelectionAlign
    
    Set obj = New SelectionAlign
    
    obj.VerticalAlignment = xlTop
    obj.HorizontalAlignment = xlCenter
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|l|fffd||fffd|
'--------------------------------------------------------------
Sub execSelectionAlignTopRight()

    Dim obj As SelectionAlign
    
    Set obj = New SelectionAlign
    
    obj.VerticalAlignment = xlTop
    obj.HorizontalAlignment = xlRight
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|l|fffd||fffd|
'--------------------------------------------------------------
Sub execSelectionAlignCenterLeft()

    Dim obj As SelectionAlign
    
    Set obj = New SelectionAlign
    
    obj.VerticalAlignment = xlCenter
    obj.HorizontalAlignment = xlLeft
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|l|fffd||fffd|
'--------------------------------------------------------------
Sub execSelectionAlignCenterCenter()

    Dim obj As SelectionAlign
    
    Set obj = New SelectionAlign
    
    obj.VerticalAlignment = xlCenter
    obj.HorizontalAlignment = xlCenter
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|l|fffd||fffd|
'--------------------------------------------------------------
Sub execSelectionAlignCenterRight()

    Dim obj As SelectionAlign
    
    Set obj = New SelectionAlign
    
    obj.VerticalAlignment = xlCenter
    obj.HorizontalAlignment = xlRight
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|l|fffd||fffd|
'--------------------------------------------------------------
Sub execSelectionAlignBottomLeft()

    Dim obj As SelectionAlign
    
    Set obj = New SelectionAlign
    
    obj.VerticalAlignment = xlBottom
    obj.HorizontalAlignment = xlLeft
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|l|fffd||fffd|
'--------------------------------------------------------------
Sub execSelectionAlignBottomCenter()

    Dim obj As SelectionAlign
    
    Set obj = New SelectionAlign
    
    obj.VerticalAlignment = xlBottom
    obj.HorizontalAlignment = xlCenter
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|l|fffd||fffd|
'--------------------------------------------------------------
Sub execSelectionAlignBottomRight()

    Dim obj As SelectionAlign
    
    Set obj = New SelectionAlign
    
    obj.VerticalAlignment = xlBottom
    obj.HorizontalAlignment = xlRight
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd|C|fffd||fffd||fffd|f|fffd||fffd||fffd|g|fffd|N|fffd||fffd||fffd|A
'--------------------------------------------------------------
Sub execSelectionSectionIndentClear()

    Dim obj As SelectionAllIndentClear
    
    Set obj = New SelectionAllIndentClear
    
    obj.Run
    
    Set obj = Nothing

End Sub
'--------------------------------------------------------------
' |fffd||fffd||fffd||50d||fffd|
'--------------------------------------------------------------
Sub getNextNumber()
    
    Dim obj As SelectionAllNextNo
    
    Set obj = New SelectionAllNextNo
    
    obj.Run
    
    Set obj = Nothing
    
    End Sub

Attribute VB_Name = "basShape"
Option Explicit

'|fffd|P|fffd|}|fffd|X|fffd||303|T|fffd|C|fffd|Y|fffd|i9.75|fffd|~12|fffd|j
Public Const C_RECT_X  As Single = 9.75
Public Const C_RECT_Y  As Single = 12

'|fffd||fffd||fffd||311||fffd||fffd||30d|\|fffd||fffd||fffd|i|fffd|S|fffd|~|fffd|R|fffd|}|fffd|X|fffd|j
Public Const C_NORMAL_WIDTH As Long = 7
Public Const C_NORMAL_HEIGHT As Long = 3

'
' |fffd||fffd||fffd||fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||fffd||242||fffd||fffd||fffd|
'
Sub straightLine()

    Dim s As Object

    On Error GoTo e
        
    For Each s In Selection.ShapeRange
    
        Dim w As Long
        Dim h As Long
        
        w = s.Width
        h = s.Height
        
        If w > h Then
            If s.VerticalFlip Then
                s.Top = s.Top + s.Height
                s.Height = 0
            Else
                s.Height = 0
            End If
        Else
            If s.HorizontalFlip Then
                s.Left = s.Left + s.Width
                s.Width = 0
            Else
                s.Width = 0
            End If
        End If
    Next
e:

End Sub
Sub largeShape()

    On Error Resume Next
    Selection.ShapeRange.ScaleHeight 1.1, msoFalse, msoScaleFromTopLeft
    Selection.ShapeRange.ScaleWidth 1.1, msoFalse, msoScaleFromTopLeft
End Sub
Sub smallShape()
    On Error Resume Next
    Selection.ShapeRange.ScaleHeight 0.9, msoFalse, msoScaleFromTopLeft
    Selection.ShapeRange.ScaleWidth 0.9, msoFalse, msoScaleFromTopLeft
End Sub
'
' |fffd|L|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd|`|fffd||fffd|
'
Sub drawFlowchartStoredData()

    Dim objDataSet As Shape
    Dim r As Range

    For Each r In Selection
        
        '|fffd|f|fffd|[|fffd|^|fffd|L|fffd||fffd||fffd|V|fffd|F|fffd|C|fffd|v|fffd||30d||c42c|
        Set objDataSet = ActiveSheet.Shapes.AddShape(msoShapeFlowchartStoredData, r.Left + r.Width, r.Top, C_RECT_X * C_NORMAL_WIDTH, C_RECT_Y * C_NORMAL_HEIGHT)
    
        With objDataSet.TextFrame
            .Characters.Text = r.Value
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
        End With
        
        Set objDataSet = Nothing
    Next

End Sub
'
' |fffd|e|fffd|L|fffd|X|fffd|g|fffd|{|fffd|b|fffd|N|fffd|X|fffd|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd|`|fffd||fffd|
'
Sub drawTextbox1()

    Dim objDataSet As Shape
    Dim r As Range
    Dim strBuf As String
    Dim lngCnt As Long
    

    For Each r In Selection
        
        strBuf = r.Value
        
        lngCnt = InStr(strBuf, vbCrLf) + 3
        
        '|fffd|f|fffd|[|fffd|^|fffd|L|fffd||fffd||fffd|V|fffd|F|fffd|C|fffd|v|fffd||30d||c42c|
        Set objDataSet = ActiveSheet.Shapes.AddShape(msoShapeRectangle, r.Left + r.Width, r.Top, C_RECT_X * 10, C_RECT_Y * lngCnt)
    
        With objDataSet.TextFrame
            .Characters.Text = r.Value
        End With
            

        Set objDataSet = Nothing
    Next

End Sub
'
' |fffd|e|fffd|L|fffd|X|fffd|g|fffd|{|fffd|b|fffd|N|fffd|X|fffd|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd|`|fffd||fffd|
'
Sub drawTextbox2()

    Dim objDataSet As Shape
    Dim r As Range
    Dim strBuf As String
    Dim lngCnt As Long
    

    For Each r In Selection
        
        strBuf = r.Value
        
        lngCnt = InStr(strBuf, vbCrLf) + 3
        
        '|fffd|f|fffd|[|fffd|^|fffd|L|fffd||fffd||fffd|V|fffd|F|fffd|C|fffd|v|fffd||30d||c42c|
        Set objDataSet = ActiveSheet.Shapes.AddShape(msoShapeRectangle, r.Left + r.Width, r.Top, C_RECT_X * 10, C_RECT_Y * lngCnt)
    
        With objDataSet.TextFrame
            .Characters.Text = r.Value
        End With
            
        '|fffd|g|fffd||202||fffd||fffd||30f||a347|
        objDataSet.Line.visible = msoFalse
            
        Set objDataSet = Nothing
    Next

End Sub
'
' |fffd|l|fffd|p|fffd|`|fffd||fffd||fffd||fffd||fffd|o|fffd||fffd||fffd|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd|`|fffd||fffd|
'
Sub drawShapeRectangularCallout()

    Dim objDataSet As Shape
    Dim r As Range
    
    Dim strBuf As String
    Dim lngCnt As Long

    For Each r In Selection
        
        strBuf = r.Value
        
        lngCnt = InStr(strBuf, vbCrLf) + 3
        
        '|fffd|f|fffd|[|fffd|^|fffd|L|fffd||fffd||fffd|V|fffd|F|fffd|C|fffd|v|fffd||30d||c42c|
        Set objDataSet = ActiveSheet.Shapes.AddShape(msoShapeRectangularCallout, r.Left + r.Width, r.Top, C_RECT_X * 10, C_RECT_Y * lngCnt)
    
        With objDataSet.TextFrame
            .Characters.Text = r.Value
        End With
        
        Set objDataSet = Nothing
    Next

End Sub
'
' |fffd|p|fffd||6ce|l|fffd|p|fffd|`|fffd||fffd||fffd||fffd||fffd|o|fffd||fffd||fffd|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd|`|fffd||fffd|
'
Sub drawShapeRoundedRectangularCallout()

    Dim objDataSet As Shape
    Dim r As Range
    
    Dim strBuf As String
    Dim lngCnt As Long

    For Each r In Selection
        
        strBuf = r.Value
        
        lngCnt = InStr(strBuf, vbCrLf) + 3
        
        '|fffd|f|fffd|[|fffd|^|fffd|L|fffd||fffd||fffd|V|fffd|F|fffd|C|fffd|v|fffd||30d||c42c|
        Set objDataSet = ActiveSheet.Shapes.AddShape(msoShapeRoundedRectangularCallout, r.Left + r.Width, r.Top, C_RECT_X * 10, C_RECT_Y * lngCnt)
    
        With objDataSet.TextFrame
            .Characters.Text = r.Value
        End With
        
        Set objDataSet = Nothing
    Next

End Sub
'
' |fffd||6cc|`|fffd||fffd||fffd||fffd||fffd|o|fffd||fffd||fffd|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd|`|fffd||fffd|
'
Sub drawShapeOvalCallout()

    Dim objDataSet As Shape
    Dim r As Range
    
    Dim strBuf As String
    Dim lngCnt As Long

    For Each r In Selection
        
        strBuf = r.Value
        
        lngCnt = InStr(strBuf, vbCrLf) + 3
        
        '|fffd|f|fffd|[|fffd|^|fffd|L|fffd||fffd||fffd|V|fffd|F|fffd|C|fffd|v|fffd||30d||c42c|
        Set objDataSet = ActiveSheet.Shapes.AddShape(msoShapeOvalCallout, r.Left + r.Width, r.Top, C_RECT_X * 10, C_RECT_Y * lngCnt)
    
        With objDataSet.TextFrame
            .Characters.Text = r.Value
        End With
        
        Set objDataSet = Nothing
    Next

End Sub
'
' |fffd|_|fffd|`|fffd||fffd||fffd||fffd||fffd|o|fffd||fffd||fffd|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd|`|fffd||fffd|
'
Sub drawShapeCloudCallout()

    Dim objDataSet As Shape
    Dim r As Range
    
    Dim strBuf As String
    Dim lngCnt As Long

    For Each r In Selection
        
        strBuf = r.Value
        
        lngCnt = InStr(strBuf, vbCrLf) + 3
        
        '|fffd|f|fffd|[|fffd|^|fffd|L|fffd||fffd||fffd|V|fffd|F|fffd|C|fffd|v|fffd||30d||c42c|
        Set objDataSet = ActiveSheet.Shapes.AddShape(msoShapeCloudCallout, r.Left + r.Width, r.Top, C_RECT_X * 10, C_RECT_Y * lngCnt)
    
        With objDataSet.TextFrame
            .Characters.Text = r.Value
        End With
        
        Set objDataSet = Nothing
    Next

End Sub
'
' |fffd||6cc|`|fffd|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd||3ca||fffd|
'
Sub convShapeOval()

    Dim r As Shape
    
    For Each r In Selection.ShapeRange
        r.AutoShapeType = msoShapeOval
    Next

End Sub
'
' |fffd|l|fffd|p|fffd|`|fffd|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd||3ca||fffd|
'
Sub convShapeRectangle()

    Dim r As Shape
    
    For Each r In Selection.ShapeRange
        r.AutoShapeType = msoShapeRectangle
    Next

End Sub
'
' |fffd|l|fffd|p|fffd|`|fffd||fffd||fffd||fffd||fffd|o|fffd||fffd||fffd|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd||3ca||fffd|
'
Sub convShapeRectangularCallout()

    Dim r As Shape
    
    For Each r In Selection.ShapeRange
        r.AutoShapeType = msoShapeRectangularCallout
    Next

End Sub
'
' |fffd|p|fffd||6ce|l|fffd|p|fffd|`|fffd||fffd||fffd||fffd||fffd|o|fffd||fffd||fffd|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd||3ca||fffd|
'
Sub convShapeRoundedRectangularCallout()

    Dim r As Shape
    
    For Each r In Selection.ShapeRange
        r.AutoShapeType = msoShapeRoundedRectangularCallout
    Next

End Sub
'
' |fffd||6cc|`|fffd||fffd||fffd||fffd||fffd|o|fffd||fffd||fffd|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd||3ca||fffd|
'
Sub convShapeOvalCallout()

    Dim r As Shape
    
    For Each r In Selection.ShapeRange
        r.AutoShapeType = msoShapeOvalCallout
    Next

End Sub
'
' |fffd|_|fffd|`|fffd||fffd||fffd||fffd||fffd|o|fffd||fffd||fffd|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd||3ca||fffd|
'
Sub convShapeCloudCallout()

    Dim r As Shape
    
    For Each r In Selection.ShapeRange
        r.AutoShapeType = msoShapeCloudCallout
    Next

End Sub
'
' |fffd|t|fffd||fffd||fffd|[|fffd|`|fffd||fffd||fffd|[|fffd|g|fffd|F|fffd||fffd||fffd||fffd||fffd|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd||3ca||fffd|
'
Sub convShapeFlowchartProcess()

    Dim r As Shape
    
    For Each r In Selection.ShapeRange
        r.AutoShapeType = msoShapeFlowchartProcess
    Next

End Sub
'
' |fffd|t|fffd||fffd||fffd|[|fffd|`|fffd||fffd||fffd|[|fffd|g|fffd|F|fffd||fffd||58f||fffd||fffd||fffd||fffd|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd||3ca||fffd|
'
Sub convShapeFlowchartAlternateProcess()

    Dim r As Shape
    
    For Each r In Selection.ShapeRange
        r.AutoShapeType = msoShapeFlowchartAlternateProcess
    Next

End Sub
'
' |fffd|t|fffd||fffd||fffd|[|fffd|`|fffd||fffd||fffd|[|fffd|g|fffd|F|fffd||fffd||fffd|f|fffd|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd||3ca||fffd|
'
Sub convShapeFlowchartDecision()

    Dim r As Shape
    
    For Each r In Selection.ShapeRange
        r.AutoShapeType = msoShapeFlowchartDecision
    Next

End Sub
'
' |fffd|t|fffd||fffd||fffd|[|fffd|`|fffd||fffd||fffd|[|fffd|g|fffd|F|fffd|f|fffd|[|fffd|^|fffd|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd||3ca||fffd|
'
Sub convShapeFlowchartData()

    Dim r As Shape
    
    For Each r In Selection.ShapeRange
        r.AutoShapeType = msoShapeFlowchartData
    Next

End Sub
'
' |fffd|t|fffd||fffd||fffd|[|fffd|`|fffd||fffd||fffd|[|fffd|g|fffd|F|fffd||fffd|`|fffd||3c2||74f||fffd||fffd||fffd||fffd|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd||3ca||fffd|
'
Sub convShapeFlowchartPredefinedProcess()

    Dim r As Shape
    
    For Each r In Selection.ShapeRange
        r.AutoShapeType = msoShapeFlowchartPredefinedProcess
    Next

End Sub
'
' |fffd|t|fffd||fffd||fffd|[|fffd|`|fffd||fffd||fffd|[|fffd|g|fffd|F|fffd||fffd||fffd||fffd||fffd|L|fffd||fffd||fffd|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd||3ca||fffd|
'
Sub convShapeFlowchartInternalStorage()

    Dim r As Shape
    
    For Each r In Selection.ShapeRange
        r.AutoShapeType = msoShapeFlowchartInternalStorage
    Next

End Sub
'
' |fffd|t|fffd||fffd||fffd|[|fffd|`|fffd||fffd||fffd|[|fffd|g|fffd|F|fffd||fffd||fffd||781|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd||3ca||fffd|
'
Sub convShapeFlowchartDocument()

    Dim r As Shape
    
    For Each r In Selection.ShapeRange
        r.AutoShapeType = msoShapeFlowchartDocument
    Next

End Sub
'
' |fffd|t|fffd||fffd||fffd|[|fffd|`|fffd||fffd||fffd|[|fffd|g|fffd|F|fffd||fffd||fffd||fffd||fffd||fffd||fffd||781|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd||3ca||fffd|
'
Sub convShapeFlowchartMultidocument()

    Dim r As Shape
    
    For Each r In Selection.ShapeRange
        r.AutoShapeType = msoShapeFlowchartMultidocument
    Next

End Sub
'
' |fffd|t|fffd||fffd||fffd|[|fffd|`|fffd||fffd||fffd|[|fffd|g|fffd|F|fffd|[|fffd|q|fffd|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd||3ca||fffd|
'
Sub convShapeFlowchartTerminator()

    Dim r As Shape
    
    For Each r In Selection.ShapeRange
        r.AutoShapeType = msoShapeFlowchartTerminator
    Next

End Sub
'
' |fffd|t|fffd||fffd||fffd|[|fffd|`|fffd||fffd||fffd|[|fffd|g|fffd|F|fffd||fffd||fffd||fffd||fffd|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd||3ca||fffd|
'
Sub convShapeFlowchartPreparation()

    Dim r As Shape
    
    For Each r In Selection.ShapeRange
        r.AutoShapeType = msoShapeFlowchartPreparation
    Next

End Sub
'
' |fffd|t|fffd||fffd||fffd|[|fffd|`|fffd||fffd||fffd|[|fffd|g|fffd|F|fffd||8440||fffd||fffd||fffd||fffd||341|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd||3ca||fffd|
'
Sub convShapeFlowchartManualInput()

    Dim r As Shape
    
    For Each r In Selection.ShapeRange
        r.AutoShapeType = msoShapeFlowchartManualInput
    Next

End Sub
'
' |fffd|t|fffd||fffd||fffd|[|fffd|`|fffd||fffd||fffd|[|fffd|g|fffd|F|fffd||fffd||fffd||181|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd||3ca||fffd|
'
Sub convShapeFlowchartManualOperation()

    Dim r As Shape
    
    For Each r In Selection.ShapeRange
        r.AutoShapeType = msoShapeFlowchartManualOperation
    Next

End Sub
'
' |fffd|t|fffd||fffd||fffd|[|fffd|`|fffd||fffd||fffd|[|fffd|g|fffd|F|fffd|J|fffd|[|fffd|h|fffd|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd||3ca||fffd|
'
Sub convShapeFlowchartCard()

    Dim r As Shape
    
    For Each r In Selection.ShapeRange
        r.AutoShapeType = msoShapeFlowchartCard
    Next

End Sub
'
' |fffd|t|fffd||fffd||fffd|[|fffd|`|fffd||fffd||fffd|[|fffd|g|fffd|F|fffd||fffd||fffd||fffd|E|fffd|e|fffd|[|fffd|v|fffd|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd||3ca||fffd|
'
Sub convShapeFlowchartPunchedTape()

    Dim r As Shape
    
    For Each r In Selection.ShapeRange
        r.AutoShapeType = msoShapeFlowchartPunchedTape
    Next

End Sub
'
' |fffd|t|fffd||fffd||fffd|[|fffd|`|fffd||fffd||fffd|[|fffd|g|fffd|F|fffd|L|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd||3ca||fffd|
'
Sub convShapeFlowchartStoredData()

    Dim r As Shape
    
    For Each r In Selection.ShapeRange
        r.AutoShapeType = msoShapeFlowchartStoredData
    Next

End Sub
'
' |fffd|t|fffd||fffd||fffd|[|fffd|`|fffd||fffd||fffd|[|fffd|g|fffd|F|fffd||fffd||fffd||fffd||fffd|A|fffd|N|fffd|Z|fffd|X|fffd|L|fffd||fffd||fffd|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd||3ca||fffd|
'
Sub convShapeFlowchartSequentialAccessStorage()

    Dim r As Shape
    
    For Each r In Selection.ShapeRange
        r.AutoShapeType = msoShapeFlowchartSequentialAccessStorage
    Next

End Sub
'
' |fffd|t|fffd||fffd||fffd|[|fffd|`|fffd||fffd||fffd|[|fffd|g|fffd|F|fffd||fffd||fffd||683|A|fffd|N|fffd|Z|fffd|X|fffd|L|fffd||fffd||fffd|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd||3ca||fffd|
'
Sub convShapeFlowchartDirectAccessStorage()

    Dim r As Shape
    
    For Each r In Selection.ShapeRange
        r.AutoShapeType = msoShapeFlowchartDirectAccessStorage
    Next

End Sub
'
' |fffd|t|fffd||fffd||fffd|[|fffd|`|fffd||fffd||fffd|[|fffd|g|fffd|F|fffd||fffd||fffd|C|fffd|f|fffd|B|fffd|X|fffd|N|fffd|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd||3ca||fffd|
'
Sub convShapeFlowchartMagneticDisk()

    Dim r As Shape
    
    For Each r In Selection.ShapeRange
        r.AutoShapeType = msoShapeFlowchartMagneticDisk
    Next

End Sub
'
' |fffd|t|fffd||fffd||fffd|[|fffd|`|fffd||fffd||fffd|[|fffd|g|fffd|F|fffd|\|fffd||fffd||fffd|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd||3ca||fffd|
'
Sub convShapeFlowchartDisplay()

    Dim r As Shape
    
    For Each r In Selection.ShapeRange
        r.AutoShapeType = msoShapeFlowchartDisplay
    Next

End Sub

'
' |fffd|G|fffd|r|fffd|f|fffd||fffd||fffd|X|fffd|p|fffd|l|fffd|p|fffd|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd|`|fffd||fffd|
'
Sub drawEvidenceTextbox()

    Dim objDataSet As Shape
    Dim z As Single
    Dim r As Long
    Dim c As Long
    Dim a As Boolean
    
    If ActiveWorkbook Is Nothing Then
        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
    
    a = Application.ScreenUpdating
    Application.ScreenUpdating = False
        
    z = ActiveWindow.Zoom
    c = ActiveWindow.ScrollColumn
    r = ActiveWindow.ScrollRow
    ActiveWindow.Zoom = 100
        
    Set objDataSet = ActiveSheet.Shapes.AddShape(msoShapeRectangle, Selection.Left + (Selection.Width - C_RECT_X * C_NORMAL_WIDTH * 3) / 2, Selection.Top + (Selection.Height - C_RECT_Y * C_NORMAL_HEIGHT) / 2, C_RECT_X * C_NORMAL_WIDTH * 3, C_RECT_Y * C_NORMAL_HEIGHT)
    
    '|fffd||fffd|{|fffd||303|X|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|Z|fffd|b|fffd|g
    objDataSet.ShapeStyle = msoShapeStylePreset1
    
    With objDataSet.Fill
        .Solid
        .visible = msoTrue
        .Transparency = 1
        .ForeColor.RGB = RGB(255, 255, 255)
    End With
    With objDataSet.Line
        .Weight = 2.25
        .DashStyle = msoLineSingle
        .Style = msoLineSingle
        .Transparency = 0#
        .visible = msoTrue
        .ForeColor.SchemeColor = 10
        .BackColor.RGB = RGB(255, 255, 255)
    End With
        
    objDataSet.Select
    objDataSet.Placement = xlMove
    
    Set objDataSet = Nothing

    ActiveWindow.Zoom = z
    ActiveWindow.ScrollColumn = c
    ActiveWindow.ScrollRow = r
    
    Application.ScreenUpdating = a
        
End Sub
'
' |fffd|G|fffd|r|fffd|f|fffd||fffd||fffd|X|fffd|p|fffd||209|~|fffd|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd|`|fffd||fffd|
'
Sub drawEvidenceOval()

    Dim objDataSet As Shape
    Dim z As Single
    Dim r As Long
    Dim c As Long
    Dim a As Boolean

    If ActiveWorkbook Is Nothing Then
        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
    
    a = Application.ScreenUpdating
    Application.ScreenUpdating = False
        
    z = ActiveWindow.Zoom
    c = ActiveWindow.ScrollColumn
    r = ActiveWindow.ScrollRow
    ActiveWindow.Zoom = 100
        
        
    Set objDataSet = ActiveSheet.Shapes.AddShape(msoShapeOval, Selection.Left + (Selection.Width - C_RECT_X * C_NORMAL_WIDTH * 1.5) / 2, Selection.Top + (Selection.Height - C_RECT_Y * C_NORMAL_HEIGHT) / 2, C_RECT_X * C_NORMAL_WIDTH * 1.5, C_RECT_Y * C_NORMAL_HEIGHT)
    
    '|fffd||fffd|{|fffd||303|X|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|Z|fffd|b|fffd|g
    objDataSet.ShapeStyle = msoShapeStylePreset1
    
    With objDataSet.Fill
        .Solid
        .visible = msoTrue
        .Transparency = 1
        .ForeColor.RGB = RGB(255, 255, 255)
    End With
    With objDataSet.Line
        .Weight = 2.25
        .DashStyle = msoLineSingle
        .Style = msoLineSingle
        .Transparency = 0#
        .visible = msoTrue
        .ForeColor.SchemeColor = 10
        .BackColor.RGB = RGB(255, 255, 255)
    End With
        
    objDataSet.Select
    objDataSet.Placement = xlMove
    Set objDataSet = Nothing

    ActiveWindow.Zoom = z
    ActiveWindow.ScrollColumn = c
    ActiveWindow.ScrollRow = r
    
    Application.ScreenUpdating = a
        
End Sub
'
' |fffd|G|fffd|r|fffd|f|fffd||fffd||fffd|X|fffd|p|fffd||4c2||fffd||fffd||fffd||fffd||fffd||fffd|`|fffd||fffd|
'
Sub drawEvidenceCallout()

    Dim objDataSet As Shape
    Dim z As Single
    Dim r As Long
    Dim c As Long
    Dim a As Boolean

    If ActiveWorkbook Is Nothing Then
        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
    
    a = Application.ScreenUpdating
    Application.ScreenUpdating = False
        
    z = ActiveWindow.Zoom
    c = ActiveWindow.ScrollColumn
    r = ActiveWindow.ScrollRow
    ActiveWindow.Zoom = 100
        
        
    Set objDataSet = ActiveSheet.Shapes.AddShape(msoShapeRectangularCallout, Selection.Left + (Selection.Width - C_RECT_X * C_NORMAL_WIDTH * 3) / 2, Selection.Top + (Selection.Height - C_RECT_Y * C_NORMAL_HEIGHT) / 2, C_RECT_X * C_NORMAL_WIDTH * 3, C_RECT_Y * C_NORMAL_HEIGHT)
    
    '|fffd||fffd|{|fffd||303|X|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|Z|fffd|b|fffd|g
    objDataSet.ShapeStyle = msoShapeStylePreset1
    
    With objDataSet.Fill
        .Solid
        .Transparency = 0#
        .visible = msoTrue
        .ForeColor.RGB = RGB(255, 255, 255)
    End With
    With objDataSet.Line
        .Weight = 2.25
        .DashStyle = msoLineSingle
        .Style = msoLineSingle
        .Transparency = 0#
        .visible = msoTrue
        .ForeColor.SchemeColor = 10
        .BackColor.RGB = RGB(255, 255, 255)
    End With
    With objDataSet.TextFrame2.TextRange.Characters.Font
        .Fill.ForeColor.RGB = RGB(0, 0, 0)
    End With
        
    objDataSet.Select
    objDataSet.Placement = xlMove
    Set objDataSet = Nothing

    ActiveWindow.Zoom = z
    ActiveWindow.ScrollColumn = c
    ActiveWindow.ScrollRow = r
    
    Application.ScreenUpdating = a

End Sub
'
' |fffd|G|fffd|r|fffd|f|fffd||fffd||fffd|X|fffd|p|fffd||fffd||fffd|`|fffd||fffd|
'
Sub drawEvidenceArrow()

    Dim objDataSet As Shape
    Dim z As Single
    Dim r As Long
    Dim c As Long
    Dim a As Boolean

    If ActiveWorkbook Is Nothing Then
        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
    
    a = Application.ScreenUpdating
    Application.ScreenUpdating = False
        
    z = ActiveWindow.Zoom
    c = ActiveWindow.ScrollColumn
    r = ActiveWindow.ScrollRow
    ActiveWindow.Zoom = 100
        
        
    Set objDataSet = ActiveSheet.Shapes.AddConnector(msoConnectorStraight, Selection.Left + (Selection.Width / 2), Selection.Top + Selection.Height - (C_NORMAL_HEIGHT * 25), Selection.Left + (Selection.Width / 2), Selection.Top + Selection.Height)
    
    With objDataSet.Line
        .Weight = 2.25
        .DashStyle = msoLineSingle
        .Style = msoLineSingle
        .Transparency = 0#
        .visible = msoTrue
        .ForeColor.SchemeColor = 10
        .BackColor.RGB = RGB(255, 255, 255)
        .EndArrowheadStyle = msoArrowheadOpen
        .EndArrowheadLength = msoArrowheadLong
        .EndArrowheadWidth = msoArrowheadWide
    End With
        
    objDataSet.Select
    objDataSet.Placement = xlMove
    Set objDataSet = Nothing

    ActiveWindow.Zoom = z
    ActiveWindow.ScrollColumn = c
    ActiveWindow.ScrollRow = r
    
    Application.ScreenUpdating = a
    

End Sub
'
' |fffd|G|fffd|r|fffd|f|fffd||fffd||fffd|X|fffd|p|fffd|l|fffd|p|fffd|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd|`|fffd||fffd|
'
Sub drawEvidenceTextbox2()

    Dim objDataSet As Shape
    Dim z As Single
    Dim r As Long
    Dim c As Long
    Dim a As Boolean

    If ActiveWorkbook Is Nothing Then
        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
    
    a = Application.ScreenUpdating
    Application.ScreenUpdating = False
        
    z = ActiveWindow.Zoom
    c = ActiveWindow.ScrollColumn
    r = ActiveWindow.ScrollRow
    ActiveWindow.Zoom = 100
        

    Set objDataSet = ActiveSheet.Shapes.AddShape(msoShapeRectangle, Selection.Left + (Selection.Width - C_RECT_X * C_NORMAL_WIDTH * 3) / 2, Selection.Top + (Selection.Height - C_RECT_Y * C_NORMAL_HEIGHT) / 2, C_RECT_X * C_NORMAL_WIDTH * 3, C_RECT_Y * C_NORMAL_HEIGHT)
    
    '|fffd||fffd|{|fffd||303|X|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|Z|fffd|b|fffd|g
    objDataSet.ShapeStyle = msoShapeStylePreset1
    
    With objDataSet.Fill
        .Solid
        .visible = msoTrue
        .Transparency = 1
        .ForeColor.RGB = RGB(255, 255, 255)
    End With
    With objDataSet.Line
        .Weight = 2.25
        .DashStyle = msoLineDash
        .Style = msoLineSingle
        .Transparency = 0#
        .visible = msoTrue
        .ForeColor.SchemeColor = 10
        .BackColor.RGB = RGB(255, 255, 255)
    End With
        
    objDataSet.Select
    objDataSet.Placement = xlMove
    Set objDataSet = Nothing

    ActiveWindow.Zoom = z
    ActiveWindow.ScrollColumn = c
    ActiveWindow.ScrollRow = r
    
    Application.ScreenUpdating = a

End Sub
'
' |fffd|G|fffd|r|fffd|f|fffd||fffd||fffd|X|fffd|p|fffd||209|~|fffd|i|fffd|V|fffd|F|fffd|C|fffd|v|fffd|j|fffd|`|fffd||fffd|
'
Sub drawEvidenceOval2()

    Dim objDataSet As Shape
    Dim z As Single
    Dim r As Long
    Dim c As Long
    Dim a As Boolean

    If ActiveWorkbook Is Nothing Then
        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
    
    a = Application.ScreenUpdating
    Application.ScreenUpdating = False
        
    z = ActiveWindow.Zoom
    c = ActiveWindow.ScrollColumn
    r = ActiveWindow.ScrollRow
    ActiveWindow.Zoom = 100
        
        
    Set objDataSet = ActiveSheet.Shapes.AddShape(msoShapeOval, Selection.Left + (Selection.Width - C_RECT_X * C_NORMAL_WIDTH * 1.5) / 2, Selection.Top + (Selection.Height - C_RECT_Y * C_NORMAL_HEIGHT) / 2, C_RECT_X * C_NORMAL_WIDTH * 1.5, C_RECT_Y * C_NORMAL_HEIGHT)
    
    '|fffd||fffd|{|fffd||303|X|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|Z|fffd|b|fffd|g
    objDataSet.ShapeStyle = msoShapeStylePreset1
    
    With objDataSet.Fill
        .Solid
        .visible = msoTrue
        .Transparency = 1
        .ForeColor.RGB = RGB(255, 255, 255)
    End With
    With objDataSet.Line
        .Weight = 2.25
        .DashStyle = msoLineDash
        .Style = msoLineSingle
        .Transparency = 0#
        .visible = msoTrue
        .ForeColor.SchemeColor = 10
        .BackColor.RGB = RGB(255, 255, 255)
    End With
        
    objDataSet.Select
    objDataSet.Placement = xlMove
    Set objDataSet = Nothing

    ActiveWindow.Zoom = z
    ActiveWindow.ScrollColumn = c
    ActiveWindow.ScrollRow = r
    
    Application.ScreenUpdating = a

End Sub
'
' |fffd|G|fffd|r|fffd|f|fffd||fffd||fffd|X|fffd|p|fffd||4c2||fffd||fffd||fffd||fffd||fffd||fffd|`|fffd||fffd|2
'
Sub drawEvidenceCallout2()

    Dim objDataSet As Shape
    Dim z As Single
    Dim r As Long
    Dim c As Long
    Dim a As Boolean

    If ActiveWorkbook Is Nothing Then
        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
    
    a = Application.ScreenUpdating
    Application.ScreenUpdating = False
        
    z = ActiveWindow.Zoom
    c = ActiveWindow.ScrollColumn
    r = ActiveWindow.ScrollRow
    ActiveWindow.Zoom = 100
        
        
    Set objDataSet = ActiveSheet.Shapes.AddShape(msoShapeRectangularCallout, Selection.Left + (Selection.Width - C_RECT_X * C_NORMAL_WIDTH * 3) / 2, Selection.Top + (Selection.Height - C_RECT_Y * C_NORMAL_HEIGHT) / 2, C_RECT_X * C_NORMAL_WIDTH * 3, C_RECT_Y * C_NORMAL_HEIGHT)
    
    '|fffd||fffd|{|fffd||303|X|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|Z|fffd|b|fffd|g
    objDataSet.ShapeStyle = msoShapeStylePreset1
    
    With objDataSet.Fill
        .Solid
        .Transparency = 0#
        .visible = msoTrue
        .ForeColor.RGB = RGB(255, 255, 255)
    End With
    With objDataSet.Line
        .Weight = 2.25
        .DashStyle = msoLineDash
        .Style = msoLineSingle
        .Transparency = 0#
        .visible = msoTrue
        .ForeColor.SchemeColor = 10
        .BackColor.RGB = RGB(255, 255, 255)
    End With
    
    With objDataSet.TextFrame2.TextRange.Characters.Font
        .Fill.ForeColor.RGB = RGB(0, 0, 0)
    End With
        
    objDataSet.Select
    objDataSet.Placement = xlMove
    Set objDataSet = Nothing
    
    ActiveWindow.Zoom = z
    ActiveWindow.ScrollColumn = c
    ActiveWindow.ScrollRow = r
    
    Application.ScreenUpdating = a

End Sub
'
' |fffd|G|fffd|r|fffd|f|fffd||fffd||fffd|X|fffd|p|fffd||fffd||fffd|`|fffd||fffd|
'
Sub drawEvidenceArrow2()

    Dim objDataSet As Shape
    Dim z As Single
    Dim r As Long
    Dim c As Long
    Dim a As Boolean

    If ActiveWorkbook Is Nothing Then
        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
    
    a = Application.ScreenUpdating
    Application.ScreenUpdating = False
        
    z = ActiveWindow.Zoom
    c = ActiveWindow.ScrollColumn
    r = ActiveWindow.ScrollRow
    ActiveWindow.Zoom = 100
        
        
    Set objDataSet = ActiveSheet.Shapes.AddConnector(msoConnectorStraight, Selection.Left + (Selection.Width / 2), Selection.Top + Selection.Height - (C_NORMAL_HEIGHT * 25), Selection.Left + (Selection.Width / 2), Selection.Top + Selection.Height)
    
    With objDataSet.Line
        .Weight = 2.25
        .DashStyle = msoLineDash
        .Style = msoLineSingle
        .Transparency = 0#
        .visible = msoTrue
        .ForeColor.SchemeColor = 10
        .BackColor.RGB = RGB(255, 255, 255)
        .EndArrowheadStyle = msoArrowheadOpen
        .EndArrowheadLength = msoArrowheadLong
        .EndArrowheadWidth = msoArrowheadWide
    End With
        
    objDataSet.Select
    objDataSet.Placement = xlMove
    Set objDataSet = Nothing
    
    ActiveWindow.Zoom = z
    ActiveWindow.ScrollColumn = c
    ActiveWindow.ScrollRow = r
    
    Application.ScreenUpdating = a

End Sub

Sub shapeAllSelect()
    ActiveSheet.Shapes.SelectAll
End Sub
Sub shapeAllDelete()

    On Error Resume Next
    
    Dim WS As Worksheet
    
    Set WS = ActiveSheet
    If MsgBox("|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd|V|fffd|[|fffd|g|fffd||303|V|fffd|F|fffd|C|fffd|v|fffd|^|fffd||645c||fffd||fffd||fffd||fffd||fffd||5c2||10d||d3dc||fffd||fffd||fffd||702||fffd||fffd|B|fffd||fffd||b0b5||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|H", vbYesNo + vbQuestion, C_TITLE) <> vbYes Then
        Exit Sub
    End If
    WS.Shapes.SelectAll
    Selection.Delete
    Set WS = Nothing
End Sub
Attribute VB_Name = "basShowForm"
Option Explicit

'--------------------------------------------------------------
'|fffd|@|fffd|Z|fffd||fffd||fffd||30a||208||555||48f|W
'--------------------------------------------------------------
Sub cellEdit()

    If ActiveWorkbook Is Nothing Then
        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
    
    If Selection.CountLarge > 1 And Selection.CountLarge <> Selection(1, 1).MergeArea.count Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd|Z|fffd||fffd||fffd|I|fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B|fffd|Z|fffd||fffd||fffd||342|P|fffd||82||302||751|I|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation + vbOKOnly, C_TITLE
        Exit Sub
    End If
    
    frmEdit.Show
    
End Sub
'--------------------------------------------------------------
'|fffd|@|fffd|Z|fffd||fffd||fffd||30a||208||555||48f|W
'--------------------------------------------------------------
Sub cellSearch()

    If ActiveWorkbook Is Nothing Then
        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
    
    frmSearchEx.txtSearch.Text = Replace(Replace(ActiveCell.Value, vbCrLf, "\n"), vbCr, "\n")
    frmSearchEx.txtSearch.SelStart = 0
    
    frmSearchEx.Show
    
    
End Sub
'--------------------------------------------------------------
'|fffd|@|fffd|u|fffd||fffd|
'--------------------------------------------------------------
Sub replaceEx()

    If ActiveWorkbook Is Nothing Then
        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
    
    frmSearchEx.schTab.Value = 1
    
    frmSearchEx.Show
    
    
End Sub
'--------------------------------------------------------------
'|fffd|@SQL|fffd||301|u|fffd||fffd||fffd|v|fffd||fffd||fffd|`|fffd||752||fffd||fffd||fffd|
'--------------------------------------------------------------
Sub FormatSqlSetting()

    frmFormatSql.Show
    
End Sub

'--------------------------------------------------------------
'|fffd|@|fffd|`|fffd|P|fffd||6d1||fffd||fffd||752||fffd||fffd||fffd|
'--------------------------------------------------------------
Sub setAllA1saveSetting()

    If ActiveWorkbook Is Nothing Then
        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
    
    frmA1SaveSetting.Show
    
End Sub
'--------------------------------------------------------------
'|fffd|@|fffd|o|fffd|b|fffd|N|fffd|A|fffd|b|fffd|v|fffd||752||fffd||fffd||fffd|
'--------------------------------------------------------------
Sub backupSetting()

    If ActiveWorkbook Is Nothing Then
        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
    
    frmBackupSetting.Show
    
End Sub '--------------------------------------------------------------
'|fffd|@|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'--------------------------------------------------------------
Sub searchEx()

    If ActiveWorkbook Is Nothing Then
        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
    
    frmSearchEx.Show
    
End Sub

'--------------------------------------------------------------
'|fffd|@|fffd|V|fffd|[|fffd|g|fffd||1d7||fffd|
'--------------------------------------------------------------
Sub execSheetManager()

    If ActiveWorkbook Is Nothing Then
        Exit Sub
    End If

    frmSheetManager.Show

End Sub
'--------------------------------------------------------------
'|fffd|@JAVA|fffd|p|fffd|b|fffd|P|fffd|[|fffd|W|fffd|z|fffd|u
'--------------------------------------------------------------
Sub setJavaPackage()

    frmSetPackage.Show

End Sub
'--------------------------------------------------------------
'|fffd|@|fffd|c|fffd||fffd||fffd|[|fffd||a5d7||fffd||c42c||fffd||fffd||fffd|
'--------------------------------------------------------------
Sub createLinkTreeIn()

    If ActiveCell Is Nothing Then
        Exit Sub
    End If
    
    frmTreeList.Show
    
End Sub
'--------------------------------------------------------------
'|fffd|@|fffd|o|fffd|[|fffd|W|fffd||fffd||fffd||fffd||fffd|\|fffd||fffd|
'--------------------------------------------------------------
Sub dispVer()
    
    frmVersion.Show
    
End Sub

'--------------------------------------------------------------
'|fffd|@|fffd|J|fffd|[|fffd|\|fffd||fffd||fffd||292|u|fffd||24e|w|fffd||80b3||fffd||a0bd||fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||308||a5d7||fffd||fffd|}|fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B
'--------------------------------------------------------------
Sub createFileListIn()

    If ActiveCell Is Nothing Then
        Exit Sub
    End If
    
    frmFileList.Show vbModeless

End Sub
'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd||42f42||fffd|r|fffd||fffd|
'--------------------------------------------------------------
Sub kantanLine()

    If ActiveCell Is Nothing Then
        Exit Sub
    End If

    frmGridText.Show
    
End Sub
'--------------------------------------------------------------
'|fffd|@CSV|fffd||1c2||74d||fffd||fffd||fffd|
'--------------------------------------------------------------
Sub loadCSV()

    If ActiveCell Is Nothing Then
        Exit Sub
    End If
    
    frmLoadCSV.Show
    
End Sub
'--------------------------------------------------------------
'|fffd|@html|fffd||fffd||fffd|
'--------------------------------------------------------------
Sub convertHtml()

    frmHtml.Show vbModal
    
End Sub


'--------------------------------------------------------------
'|fffd|@|fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||752||fffd||fffd||fffd|
'--------------------------------------------------------------
Sub documentSetting()

    frmDoc.Show
    
End Sub
'--------------------------------------------------------------
'|fffd|@Excel|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd|Grep
'--------------------------------------------------------------
Sub excelGrep()

    frmGrep.Show
    
End Sub
'--------------------------------------------------------------
'|fffd|@Excel|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||303|y|fffd|[|fffd|W|fffd||fffd||fffd||64fe|
'--------------------------------------------------------------
Sub excelPage()

    frmPageList.Show
    
End Sub
'--------------------------------------------------------------
'|fffd|@|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd|MessageDigest|fffd||fffd||fffd||fffd||fffd||7c2||fffd|
'--------------------------------------------------------------
Sub getMessageDigest()

    frmMessageDigest.Show
    
End Sub
Sub reSelect()
    frmReSelect.Show
End Sub
Sub showFavorite()
    frmFavorite.Show
End Sub
'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||314||fffd|r
'--------------------------------------------------------------
Sub compWorkSheets()

    frmComp.Show
    
End Sub
Sub cellEditExtSetting()
    frmEditEx.Show
End Sub
Sub A1SettingShow()
    frmA1Setting.Show
End Sub
Sub electoricSetting()
    frmElectoric.Show
End Sub
Sub hotkey()
    frmHotKey.Show
End Sub

Sub sectionSettingShow()
    frmSectionList.Show
End Sub
Sub crossSetting()
    Dim obj As Object
    lineOnAction obj, False
    frmCrossLine.Show
End Sub
Sub showBz()
    frmStampBz.Show
End Sub
Sub createFolderShow()
    frmCreateFolder.Show
End Sub
Sub VBAStepCountShow()
    frmStepCount.Show
End Sub
Sub execScreenShotSetting()
    frmScreenSetting.Show
End Sub
Sub execSourceExport()
    frmSourceExport.Show
End Sub
Sub execComboSetting()
    frmCombo.Show
End Sub
Sub execDelStyle()
    frmStyle.Show
End Sub
Attribute VB_Name = "basStamp"
Option Explicit

Public Const C_STAMP_DATE_SYSTEM As String = "1"
Public Const C_STAMP_DATE_USER As String = "2"
Public Const C_STAMP_LINE_SINGLE As String = "1"
Public Const C_STAMP_LINE_DOUBLE As String = "2"
Public Const C_STAMP_LINE_BOLD As String = "3"
Public Const C_STAMP_FILE_NAME = "relaxStamp"

Public Const C_STAMP_WORDART_OFF As String = "0"
Public Const C_STAMP_WORDART_ON As String = "1"

Public Const C_STAMP_FILL_OFF As String = "0"
Public Const C_STAMP_FILL_ON As String = "1"

Public Const C_RASIO As Single = 2.83

'--------------------------------------------------------------
'|fffd|@|fffd|E|fffd||fffd||752||fffd||fffd||fffd|
'--------------------------------------------------------------
Sub showStamp()

    frmStamp.Show
    
End Sub

Public Function editStamp(ByRef s As StampDatDTO, ByVal lngFormat As Long) As StdPicture

    Dim strMiddle As String
    Dim WS As Worksheet
    
    Set editStamp = Nothing
    
    Set WS = ThisWorkbook.Worksheets("stampEx")

    strMiddle = getFormatDate(s.DateFormat, s.DateType, s.UserDate)
    
    If Len(s.Upper) > 1 Then
        '|fffd||fffd|i
        WS.Shapes("shpUp").TextFrame2.TextRange.Text = s.Upper
        With WS.Shapes("shpUp").TextFrame2.TextRange.Font
            .NameComplexScript = s.Font
            .NameFarEast = s.Font
            .name = s.Font
            .Strikethrough = False
            .Superscript = False
            .Subscript = False
    
             .Fill.ForeColor.RGB = CLng(s.Color)
        End With
        WS.Shapes("shpUp").visible = True
        WS.Shapes("shpUp2").visible = False
    Else
        '|fffd||fffd|i
        WS.Shapes("shpUp2").TextFrame2.TextRange.Text = s.Upper
        With WS.Shapes("shpUp2").TextFrame2.TextRange.Font
            .NameComplexScript = s.Font
            .NameFarEast = s.Font
            .name = s.Font
            .Strikethrough = False
            .Superscript = False
            .Subscript = False
    
             .Fill.ForeColor.RGB = CLng(s.Color)
        End With
        WS.Shapes("shpUp2").visible = True
        WS.Shapes("shpUp").visible = False
    End If
    
    '|fffd||fffd||fffd|i
    WS.Shapes("shpMid").TextFrame2.TextRange.Text = strMiddle
    With WS.Shapes("shpMid").TextFrame2.TextRange.Font
        .NameComplexScript = s.Font
        .NameFarEast = s.Font
        .name = s.Font
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        
         .Fill.ForeColor.RGB = CLng(s.Color)
    End With
    
    If Len(s.Lower) > 1 Then
        '|fffd||fffd||fffd|i
        WS.Shapes("shpLow").TextFrame2.TextRange.Text = s.Lower
        With WS.Shapes("shpLow").TextFrame2.TextRange.Font
            .NameComplexScript = s.Font
            .NameFarEast = s.Font
            .name = s.Font
            .Strikethrough = False
            .Superscript = False
            .Subscript = False
             
             .Fill.ForeColor.RGB = CLng(s.Color)
        End With
        WS.Shapes("shpLow").visible = True
        WS.Shapes("shpLow2").visible = False
    Else
        '|fffd||fffd||fffd|i
        WS.Shapes("shpLow2").TextFrame2.TextRange.Text = s.Lower
        With WS.Shapes("shpLow2").TextFrame2.TextRange.Font
            .NameComplexScript = s.Font
            .NameFarEast = s.Font
            .name = s.Font
            .Strikethrough = False
            .Superscript = False
            .Subscript = False
             
             .Fill.ForeColor.RGB = CLng(s.Color)
        End With
        WS.Shapes("shpLow2").visible = True
        WS.Shapes("shpLow").visible = False
    End If
    
    On Error Resume Next
    
    Dim r As Shape
    
    Set r = WS.Shapes("grpStamp")
    
    r.Line.ForeColor.RGB = CLng(s.Color)
    
    Select Case s.Line
        Case C_STAMP_LINE_SINGLE
            WS.Shapes("shpCircle").Line.Weight = 10
            WS.Shapes("shpCircle").Line.Style = msoLineSingle
        Case C_STAMP_LINE_DOUBLE
            WS.Shapes("shpCircle").Line.Weight = 20
            WS.Shapes("shpCircle").Line.Style = msoLineThinThin
        Case Else
            WS.Shapes("shpCircle").Line.Weight = 20
            WS.Shapes("shpCircle").Line.Style = msoLineSingle
    End Select
    
    If s.Fill = C_STAMP_FILL_ON Then
        WS.Shapes("shpCircle").Fill.visible = True
        WS.Shapes("shpCircle").Fill.ForeColor.RGB = vbWhite
    Else
        WS.Shapes("shpCircle").Fill.visible = False
    End If
    
    If lngFormat = xlBitmap Then
    
        Dim b As Shape
        Dim o As Object
        
        Set b = WS.Shapes("shpBack")
        
        b.Top = r.Top - ((r.Width - r.Height) / 2)
        b.Left = r.Left
        b.Height = r.Width
        b.Width = r.Width
        
        b.ZOrder msoSendToBack
        
        Set o = WS.Shapes.Range(Array(r.name, b.name)).Group
        
        Set editStamp = CreatePictureFromClipboard(o)
        
        o.Ungroup

    Else
        r.CopyPicture Appearance:=xlScreen, Format:=xlPicture
    End If
    
    Set WS = Nothing
    
End Function
'--------------------------------------------------------------
'|fffd|@bz|fffd|C|fffd||fffd||fffd|[|fffd|W|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||c42c|
'--------------------------------------------------------------
Function getImageStamp(ByVal index As Long) As StdPicture

    '|fffd||752||fffd||fffd||fffd||64fe|
    Dim col As Collection
    Dim bz As StampDatDTO
    
    Set getImageStamp = Nothing
    
    Set col = getProperty()
    
    Set bz = col(index)
    
    Set getImageStamp = editStamp(bz, xlBitmap)

    Set bz = Nothing
    
End Function
Public Sub StampPaste()

    Dim lngNo As Long

    lngNo = GetSetting(C_TITLE, "Stamp", "stampNo", 1)
    Call pasteStamp2(lngNo)

End Sub

'--------------------------------------------------------------
'|fffd|@|fffd|f|fffd|[|fffd|^|fffd||fffd|\|fffd||fffd|t|fffd||fffd|
'--------------------------------------------------------------
Sub pasteStamp2(ByVal index As Long)

    '|fffd||752||fffd||fffd||fffd||64fe|
    Dim col As Collection
    Dim s As StampDatDTO
    Dim r As Shape
    Dim ss As Range

    On Error Resume Next

    If rlxCheckSelectRange() = False Then
        MsgBox "|fffd|I|fffd||fffd||348||342||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If

    If GetSetting(C_TITLE, "Stamp", "Confirm", False) Then
    Else
        If Selection.CountLarge > 1 And Selection.CountLarge <> Selection(1, 1).MergeArea.count Then
            If MsgBox("|fffd||fffd||fffd||fffd||fffd|Z|fffd||fffd||fffd|I|fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B|fffd||fffd||fffd||5c2||102||303|Z|fffd||fffd||fffd||252||fffd||fffd||fffd|t|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd||fffd||b0b5||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|H", vbQuestion + vbYesNo, C_TITLE) <> vbYes Then
                Exit Sub
            End If
        End If
    End If
    
    Set col = getProperty()

    Select Case True
        Case col Is Nothing
            Exit Sub
        Case col.count = 0
            Exit Sub
        Case Else
    End Select

    Set s = col(index)

    Call editStamp(s, xlPicture)

    Dim sngSize As Single

    sngSize = CSng(s.Size) * C_RASIO

    Dim destLeft As Long
    Dim destWidth As Long
    Dim destTop As Long
    Dim destHeight As Long

    Application.ScreenUpdating = False

    For Each ss In Selection

        ''|fffd|t|fffd|B|fffd||fffd||fffd|^|fffd||fffd||fffd||fffd||454||fffd|\|fffd||fffd||fffd||38d||fffd|B
        If ss.Rows.Hidden Or ss.Columns.Hidden Then
            '|fffd|t|fffd|B|fffd||fffd||fffd|^|fffd||702||fffd||fffd||354||fffd|\|fffd||fffd||fffd||30d|s|fffd|E|fffd||fffd||30f||fffd||fffd||fffd||fffd||34d|s|fffd||fffd||202||fffd||fffd|B
        Else

            If ss.Address = ss.MergeArea(1, 1).Address Then

                destLeft = ss.MergeArea.Left
                destWidth = ss.MergeArea.Width
                destTop = ss.MergeArea.Top
                destHeight = ss.MergeArea.Height

                ActiveSheet.Paste

                Selection.ShapeRange.Width = sngSize

                Selection.ShapeRange.Top = destTop + (destHeight / 2) - (Selection.ShapeRange.Height / 2)
                Selection.ShapeRange.Left = destLeft + (destWidth / 2) - (Selection.ShapeRange.Width / 2)
            End If
        End If
    Next

    Selection.Copy
    
    Application.ScreenUpdating = True

End Sub

'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||752||fffd|l|fffd||64fe|
'--------------------------------------------------------------
Public Function getProperty() As Collection

    Dim strBuf As String
    Dim s As StampDatDTO
    Dim lngMax As Long
    Dim i As Long
    
    Dim col As Collection
    
    Set col = New Collection

    lngMax = GetSetting(C_TITLE, "Stamp", "Count", "-1")
    If lngMax = -1 Then
    
        Set s = New StampDatDTO
        
        s.Upper = "|fffd|R"
        s.DateType = C_STAMP_DATE_SYSTEM
        s.DateFormat = "yyyy.m.d"
        s.UserDate = ""
        s.Lower = "|fffd|c"
        s.Font = "|fffd|l|fffd|r |fffd|S|fffd|V|fffd|b|fffd|N"
        s.Color = "&H0"
        s.Line = C_STAMP_LINE_SINGLE
        s.Size = "15"
        s.WordArt = C_STAMP_WORDART_ON
        s.Fill = C_STAMP_FILL_OFF
    
        col.Add s
        
        Set s = Nothing
        
        Set s = New StampDatDTO
        
        s.Upper = "|fffd||fffd||fffd|"
        s.DateType = C_STAMP_DATE_SYSTEM
        s.DateFormat = "yyyy.m.d"
        s.UserDate = ""
        s.Lower = "|fffd||fffd||fffd|g|fffd||34c||fffd|"
        s.Font = "|fffd|l|fffd|r |fffd|S|fffd|V|fffd|b|fffd|N"
        s.Color = "&HFF"
        s.Line = C_STAMP_LINE_SINGLE
        s.Size = "15"
        s.WordArt = C_STAMP_WORDART_ON
        s.Fill = C_STAMP_FILL_OFF
    
        col.Add s
        
        Set s = Nothing
    
        Set s = New StampDatDTO
        
        s.Upper = "|fffd||fffd|"
        s.DateType = C_STAMP_DATE_SYSTEM
        s.DateFormat = "|fffd|i|fffd||fffd||fffd||1d7||fffd||fffd||fffd|"
        s.UserDate = ""
        s.Lower = "|fffd||fffd|"
        s.Font = "|fffd|l|fffd|r |fffd|S|fffd|V|fffd|b|fffd|N"
        s.Color = "&H0"
        s.Line = C_STAMP_LINE_SINGLE
        s.Size = "15"
        s.WordArt = C_STAMP_WORDART_ON
        s.Fill = C_STAMP_FILL_OFF
    
        col.Add s
        
        Set s = Nothing
    Else
        For i = 0 To lngMax - 1
            
            Set s = New StampDatDTO
        
            s.Upper = GetSetting(C_TITLE, "Stamp", "Upper" & Format$(i, "000"), "|fffd|w|fffd|w|fffd||fffd|")
            s.DateType = GetSetting(C_TITLE, "Stamp", "DateType" & Format$(i, "000"), C_STAMP_DATE_SYSTEM)
            s.DateFormat = GetSetting(C_TITLE, "Stamp", "DateFormat" & Format$(i, "000"), "yyyy.m.d")
            s.UserDate = GetSetting(C_TITLE, "Stamp", "UserDate" & Format$(i, "000"), "")
            s.Lower = GetSetting(C_TITLE, "Stamp", "Lower" & Format$(i, "000"), "|fffd|R|fffd|c")
            s.Font = GetSetting(C_TITLE, "Stamp", "Font" & Format$(i, "000"), "|fffd|l|fffd|r |fffd|S|fffd|V|fffd|b|fffd|N")
            s.Color = GetSetting(C_TITLE, "Stamp", "Color" & Format$(i, "000"), "&H0")
            s.Line = GetSetting(C_TITLE, "Stamp", "Line" & Format$(i, "000"), C_STAMP_LINE_SINGLE)
            s.Size = GetSetting(C_TITLE, "Stamp", "Size" & Format$(i, "000"), "15")
            s.WordArt = GetSetting(C_TITLE, "Stamp", "WordArt" & Format$(i, "000"), C_STAMP_WORDART_ON)
            s.Fill = GetSetting(C_TITLE, "Stamp", "Fill" & Format$(i, "000"), C_STAMP_FILL_OFF)
    
            col.Add s
            
            Set s = Nothing
        Next
    End If
    
    Set getProperty = col
    
End Function
'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||752||fffd|l|fffd||64fe|
'--------------------------------------------------------------
Public Sub setProperty(ByRef col As Collection)

    Dim strBuf As String
    Dim s As StampDatDTO
    Dim lngMax As Long
    Dim i As Long
    
    rlxDeleteSetting C_TITLE, "Stamp", "Upper"
    rlxDeleteSetting C_TITLE, "Stamp", "Lower"
    rlxDeleteSetting C_TITLE, "Stamp", "DateType"
    rlxDeleteSetting C_TITLE, "Stamp", "DateFormat"
    rlxDeleteSetting C_TITLE, "Stamp", "UserDate"
    rlxDeleteSetting C_TITLE, "Stamp", "Color"
    rlxDeleteSetting C_TITLE, "Stamp", "Font"
    rlxDeleteSetting C_TITLE, "Stamp", "Line"
    rlxDeleteSetting C_TITLE, "Stamp", "Size"
    rlxDeleteSetting C_TITLE, "Stamp", "WordArt"
    rlxDeleteSetting C_TITLE, "Stamp", "Fill"
    
    For i = 0 To col.count - 1
        
        Set s = col(i + 1)
        
        Call SaveSetting(C_TITLE, "Stamp", "Upper" & Format$(i, "000"), s.Upper)
        Call SaveSetting(C_TITLE, "Stamp", "Lower" & Format$(i, "000"), s.Lower)
        Call SaveSetting(C_TITLE, "Stamp", "DateType" & Format$(i, "000"), s.DateType)
        Call SaveSetting(C_TITLE, "Stamp", "DateFormat" & Format$(i, "000"), s.DateFormat)
        Call SaveSetting(C_TITLE, "Stamp", "UserDate" & Format$(i, "000"), s.UserDate)
        Call SaveSetting(C_TITLE, "Stamp", "Color" & Format$(i, "000"), s.Color)
        Call SaveSetting(C_TITLE, "Stamp", "Font" & Format$(i, "000"), s.Font)
        Call SaveSetting(C_TITLE, "Stamp", "Line" & Format$(i, "000"), s.Line)
        Call SaveSetting(C_TITLE, "Stamp", "Size" & Format$(i, "000"), s.Size)
        Call SaveSetting(C_TITLE, "Stamp", "WordArt" & Format$(i, "000"), s.WordArt)
        Call SaveSetting(C_TITLE, "Stamp", "Fill" & Format$(i, "000"), s.Fill)
    
        Set s = Nothing
    Next
    
    Call SaveSetting(C_TITLE, "Stamp", "Count", col.count)
    
End Sub

'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd|t|fffd||fffd||fffd||fffd||fffd||752||fffd|
'--------------------------------------------------------------
Private Function getFormatDate(ByVal strFormat As String, _
                        ByVal strType As String, _
                        ByVal strUserDate As String)
    
    On Error Resume Next

    If Len(Trim(strFormat)) = 0 Then
        getFormatDate = ""
        Exit Function
    End If
    
    Select Case strType
        Case C_STAMP_DATE_SYSTEM
            getFormatDate = Format(Now, strFormat)
            
        Case C_STAMP_DATE_USER
            If IsDate(strUserDate) Then
                getFormatDate = Format(CDate(strUserDate), strFormat)
            Else
                getFormatDate = ""
            End If
    End Select

End Function

Attribute VB_Name = "basStampBz"
Option Explicit

Public Const C_STAMP_BZ_RECTANGLE As String = "1"
Public Const C_STAMP_BZ_SQUARE As String = "2"
Public Const C_STAMP_BZ_CIRCLE As String = "3"

Public Const C_STAMP_ROTATE_HOLIZONTAL As String = "1"
Public Const C_STAMP_ROTATE_VERTICAL As String = "2"
'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||752||fffd|l|fffd||64fe|
'--------------------------------------------------------------
Public Function getPropertyBz() As Collection

    Dim strBuf As String
    Dim s As StampBzDTO
    Dim lngMax As Long
    Dim i As Long
    
    Dim col As Collection
    
    Set col = New Collection

    lngMax = GetSetting(C_TITLE, "StampBz", "Count", "-1")
    If lngMax = -1 Then
    
        Set s = New StampBzDTO
        
        s.StampType = C_STAMP_BZ_RECTANGLE
        s.Text = "|fffd||fffd||fffd|}"
        s.DateType = C_STAMP_DATE_SYSTEM
        s.DateFormat = "yyyy.m.d"
        s.UserDate = "2014/4/1"
        s.Color = "&H000000FF"
        s.Font = "|fffd|l|fffd|r |fffd|S|fffd|V|fffd|b|fffd|N"
        s.Round = "0.15"
        s.Size = "42"
        s.Rotate = C_STAMP_ROTATE_HOLIZONTAL
        s.LineSize = "5"
    
        col.Add s
        
        Set s = Nothing
    
        Set s = New StampBzDTO
        
        s.StampType = C_STAMP_BZ_RECTANGLE
        s.Text = "|fffd||fffd|"
        s.DateType = C_STAMP_DATE_SYSTEM
        s.DateFormat = "yyyy.m.d"
        s.UserDate = "2014/4/1"
        s.Color = "&H000000FF"
        s.Font = "|fffd|l|fffd|r |fffd|S|fffd|V|fffd|b|fffd|N"
        s.Round = "0.15"
        s.Size = "42"
        s.Rotate = C_STAMP_ROTATE_HOLIZONTAL
        s.LineSize = "5"
    
        col.Add s
        
        Set s = Nothing
        
        Set s = New StampBzDTO
        
        s.StampType = C_STAMP_BZ_RECTANGLE
        s.Text = "|fffd||fffd||fffd|{"
        s.DateType = C_STAMP_DATE_SYSTEM
        s.DateFormat = "yyyy.m.d"
        s.UserDate = "2014/4/1"
        s.Color = "&H000000FF"
        s.Font = "|fffd|l|fffd|r |fffd|S|fffd|V|fffd|b|fffd|N"
        s.Round = "0.15"
        s.Size = "42"
        s.Rotate = C_STAMP_ROTATE_VERTICAL
        s.LineSize = "5"
    
        col.Add s
        
        Set s = Nothing
        
        Set s = New StampBzDTO
        
        s.StampType = C_STAMP_BZ_RECTANGLE
        s.Text = "|fffd||40a|O|fffd||fffd|"
        s.DateType = C_STAMP_DATE_SYSTEM
        s.DateFormat = "yyyy.m.d"
        s.UserDate = "2014/4/1"
        s.Color = "&H000000FF"
        s.Font = "|fffd|l|fffd|r |fffd|S|fffd|V|fffd|b|fffd|N"
        s.Round = "0.15"
        s.Size = "42"
        s.Rotate = C_STAMP_ROTATE_HOLIZONTAL
        s.LineSize = "5"
    
        col.Add s
        
        Set s = Nothing
        
        Set s = New StampBzDTO
        
        s.StampType = C_STAMP_BZ_RECTANGLE
        s.Text = "|fffd|d|fffd|v"
        s.DateType = C_STAMP_DATE_SYSTEM
        s.DateFormat = "yyyy.m.d"
        s.UserDate = "2014/4/1"
        s.Color = "&H000000FF"
        s.Font = "|fffd|l|fffd|r |fffd|S|fffd|V|fffd|b|fffd|N"
        s.Round = "0.15"
        s.Size = "42"
        s.Rotate = C_STAMP_ROTATE_HOLIZONTAL
        s.LineSize = "5"
    
        col.Add s
        
        Set s = Nothing
        
        Set s = New StampBzDTO
        
        s.StampType = C_STAMP_BZ_SQUARE
        s.Text = "|fffd||6235|" & vbCrLf & "|fffd||fffd||fffd||fffd|"
        s.DateType = C_STAMP_DATE_SYSTEM
        s.DateFormat = "yyyy.m.d"
        s.UserDate = "2014/4/1"
        s.Color = "&H000000FF"
        s.Font = "|fffd|l|fffd|r |fffd|S|fffd|V|fffd|b|fffd|N"
        s.Round = "0.15"
        s.Size = "42"
        s.Rotate = C_STAMP_ROTATE_HOLIZONTAL
        s.LineSize = "5"
    
        col.Add s
        
        Set s = Nothing
    
        Set s = New StampBzDTO
        
        s.StampType = C_STAMP_BZ_RECTANGLE
        s.Text = "|fffd||95a7||fffd||fffd||fffd|" & vbCrLf & "|fffd|p|fffd|r|fffd||fffd||355|K|fffd||fffd||fffd|j|fffd||fffd||fffd||30e||fffd|" & vbCrLf & "|fffd|J|fffd||fffd||fffd||fffd||fffd|F$d" & vbCrLf & "|fffd|J|fffd||fffd||fffd||348||341|F|fffd||413||fffd||fffd||fffd||fffd||fffd||443|v|fffd||fffd||fffd|W|fffd|F|fffd|N|fffd|g|fffd|Q|fffd||fffd||fffd|e|fffd||fffd|"
        s.DateType = C_STAMP_DATE_SYSTEM
        s.DateFormat = "yyyy.m.d"
        s.UserDate = "2014/4/1"
        s.Color = "&H000000FF"
        s.Font = "|fffd|l|fffd|r |fffd|S|fffd|V|fffd|b|fffd|N"
        s.Round = "0.15"
        s.Size = "100"
        s.Rotate = C_STAMP_ROTATE_HOLIZONTAL
        s.LineSize = "5"
    
        col.Add s
        
        Set s = Nothing
    
        Set s = New StampBzDTO
        
        s.StampType = C_STAMP_BZ_CIRCLE
        s.Text = "|fffd||fffd|"
        s.DateType = C_STAMP_DATE_SYSTEM
        s.DateFormat = "yyyy.m.d"
        s.UserDate = "2014/4/1"
        s.Color = "&H000000FF"
        s.Font = "|fffd|l|fffd|r |fffd|S|fffd|V|fffd|b|fffd|N"
        s.Round = "0.15"
        s.Size = "42"
        s.Rotate = C_STAMP_ROTATE_HOLIZONTAL
        s.LineSize = "5"
    
        col.Add s
        
        Set s = Nothing
    
    Else
        For i = 0 To lngMax - 1
            
            Set s = New StampBzDTO
            
            s.StampType = GetSetting(C_TITLE, "StampBz", "StampType" & Format$(i, "000"), C_STAMP_BZ_RECTANGLE)
            s.Text = GetSetting(C_TITLE, "StampBz", "Text" & Format$(i, "000"), "|fffd||fffd||fffd|}")
            s.DateType = GetSetting(C_TITLE, "StampBz", "DateType" & Format$(i, "000"), C_STAMP_DATE_SYSTEM)
            s.DateFormat = GetSetting(C_TITLE, "StampBz", "DateFormat" & Format$(i, "000"), "yyyy.m.d")
            s.UserDate = GetSetting(C_TITLE, "StampBz", "UserDate" & Format$(i, "000"), "2014/4/1")
            s.Color = GetSetting(C_TITLE, "StampBz", "Color" & Format$(i, "000"), "&H000000FF")
            s.Font = GetSetting(C_TITLE, "StampBz", "Font" & Format$(i, "000"), "|fffd|l|fffd|r |fffd|S|fffd|V|fffd|b|fffd|N")
            s.Round = GetSetting(C_TITLE, "StampBz", "Round" & Format$(i, "000"), "0.15")
            s.Size = GetSetting(C_TITLE, "StampBz", "Size" & Format$(i, "000"), "42")
            s.Rotate = GetSetting(C_TITLE, "StampBz", "Rotate" & Format$(i, "000"), C_STAMP_ROTATE_HOLIZONTAL)
            s.LineSize = GetSetting(C_TITLE, "StampBz", "LineSize" & Format$(i, "000"), "5")
        
            col.Add s
            
            Set s = Nothing
        Next
    End If
    
    Set getPropertyBz = col
    
End Function
'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||752||fffd|l|fffd||64fe|
'--------------------------------------------------------------
Public Sub setPropertyBz(ByRef col As Collection)

    Dim strBuf As String
    Dim s As StampBzDTO
    Dim lngMax As Long
    Dim i As Long
    
    rlxDeleteSetting C_TITLE, "StampBz", "StampType"
    rlxDeleteSetting C_TITLE, "StampBz", "Text"
    rlxDeleteSetting C_TITLE, "StampBz", "DateType"
    rlxDeleteSetting C_TITLE, "StampBz", "DateFormat"
    rlxDeleteSetting C_TITLE, "StampBz", "UserDate"
    rlxDeleteSetting C_TITLE, "StampBz", "Color"
    rlxDeleteSetting C_TITLE, "StampBz", "Font"
    rlxDeleteSetting C_TITLE, "StampBz", "Round"
    rlxDeleteSetting C_TITLE, "StampBz", "Size"
    rlxDeleteSetting C_TITLE, "StampBz", "Rotate"
    rlxDeleteSetting C_TITLE, "StampBz", "LineSize"
    
    For i = 0 To col.count - 1
        
        Set s = col(i + 1)
        
        Call SaveSetting(C_TITLE, "StampBz", "StampType" & Format$(i, "000"), s.StampType)
        Call SaveSetting(C_TITLE, "StampBz", "Text" & Format$(i, "000"), s.Text)
        Call SaveSetting(C_TITLE, "StampBz", "DateType" & Format$(i, "000"), s.DateType)
        Call SaveSetting(C_TITLE, "StampBz", "DateFormat" & Format$(i, "000"), s.DateFormat)
        Call SaveSetting(C_TITLE, "StampBz", "UserDate" & Format$(i, "000"), s.UserDate)
        Call SaveSetting(C_TITLE, "StampBz", "Color" & Format$(i, "000"), s.Color)
        Call SaveSetting(C_TITLE, "StampBz", "Font" & Format$(i, "000"), s.Font)
        Call SaveSetting(C_TITLE, "StampBz", "Round" & Format$(i, "000"), s.Round)
        Call SaveSetting(C_TITLE, "StampBz", "Size" & Format$(i, "000"), s.Size)
        Call SaveSetting(C_TITLE, "StampBz", "Rotate" & Format$(i, "000"), s.Rotate)
        Call SaveSetting(C_TITLE, "StampBz", "LineSize" & Format$(i, "000"), s.LineSize)
    
        Set s = Nothing
    Next
    
    Call SaveSetting(C_TITLE, "StampBz", "Count", col.count)
    
End Sub
'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd|t|fffd||fffd||fffd||fffd||fffd||752||fffd|
'--------------------------------------------------------------
Private Function getFormatDate(ByVal strFormat As String, _
                        ByVal strType As String, _
                        ByVal strUserDate As String)
    
    On Error Resume Next

    If Len(Trim(strFormat)) = 0 Then
        getFormatDate = ""
        Exit Function
    End If
    
    Select Case strType
        Case C_STAMP_DATE_SYSTEM
            getFormatDate = Format(Now, strFormat)
            
        Case C_STAMP_DATE_USER
            If IsDate(strUserDate) Then
                getFormatDate = Format(CDate(strUserDate), strFormat)
            Else
                getFormatDate = ""
            End If
    End Select

End Function
'--------------------------------------------------------------
'|fffd|@|fffd||645c||fffd||fffd||fffd|t|fffd||752||fffd||fffd||fffd|
'--------------------------------------------------------------
Sub showFilePaste()

    frmFilePaste.Show
End Sub

Public Sub pasteStampBz()

    Dim lngNo As Long
    
    lngNo = GetSetting(C_TITLE, "StampBz", "stampNo", 1)
    Call pasteStampBz2(lngNo)

End Sub
'--------------------------------------------------------------
'|fffd|@bz|fffd|\|fffd||fffd|t|fffd||fffd|
'--------------------------------------------------------------
Sub pasteStampBz2(Optional ByVal index As Variant)

    '|fffd||752||fffd||fffd||fffd||64fe|
    Dim col As Collection
    Dim datStampBz As StampBzDTO
    Dim r As Worksheet
    
    On Error Resume Next
    
    Set col = getPropertyBz()

    Select Case True
        Case col Is Nothing
            Exit Sub
        Case col.count = 0
            Exit Sub
        Case Else
    End Select

    'Index|fffd||fffd||fffd|w|fffd||80b3||fffd||fffd||202||fffd||fffd||fffd||fffd||fffd||fffd||a347|
    If IsMissing(index) Then
        index = 1
    End If

    Set datStampBz = col(index)

    Call editStampBz(datStampBz, xlPicture)
    
    Dim sngSize As Single
    
    sngSize = CSng(datStampBz.Size) * C_RASIO
    
    Dim destLeft As Long
    Dim destWidth As Long
    Dim destTop As Long
    Dim destHeight As Long
    
    Application.ScreenUpdating = False
    
    destLeft = ActiveCell.Left
    destWidth = ActiveCell.Width
    destTop = ActiveCell.Top
    destHeight = ActiveCell.Height
 
    ActiveSheet.Paste

    Select Case datStampBz.Rotate
        Case C_STAMP_ROTATE_HOLIZONTAL
            Selection.ShapeRange.Width = sngSize
        Case C_STAMP_ROTATE_VERTICAL
            Selection.ShapeRange.Height = sngSize
    End Select
    
    Selection.ShapeRange.Top = destTop + (destHeight / 2) - (Selection.ShapeRange.Height / 2)
    Selection.ShapeRange.Left = destLeft + (destWidth / 2) - (Selection.ShapeRange.Width / 2)
    
    Selection.Copy
    Application.ScreenUpdating = True

End Sub
'--------------------------------------------------------------
'|fffd|@bz|fffd|C|fffd||fffd||fffd|[|fffd|W|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||c42c|
'--------------------------------------------------------------
Function getImageStampBz(ByVal index As Long) As StdPicture

    Dim col As Collection
    Dim bz As StampBzDTO
    
    Set getImageStampBz = Nothing
    
    Set col = getPropertyBz()

    Set bz = col(index)
    
    Set getImageStampBz = editStampBz(bz, xlBitmap)

    Set bz = Nothing
    
End Function
Public Function editStampBz(ByRef datStampBz As StampBzDTO, ByVal lngFormat As Long) As StdPicture

    Dim lngColor As Long
    Dim lngStyle As Long
    Dim sngWeight As Single
    Dim strText As String
    
    Dim strSheet As String
    Dim WS As Worksheet
    
    Dim i As Long
    
    Set editStampBz = Nothing

    Select Case datStampBz.Rotate
        Case C_STAMP_ROTATE_HOLIZONTAL
            Select Case datStampBz.StampType
                Case C_STAMP_BZ_RECTANGLE
                    strSheet = "stampBz1"
                Case C_STAMP_BZ_SQUARE
                    strSheet = "stampBz2"
                Case C_STAMP_BZ_CIRCLE
                    strSheet = "stampBz3"
            End Select
        Case C_STAMP_ROTATE_VERTICAL
            Select Case datStampBz.StampType
                Case C_STAMP_BZ_RECTANGLE
                    strSheet = "stampBz1r"
                Case C_STAMP_BZ_SQUARE
                    strSheet = "stampBz2r"
                Case C_STAMP_BZ_CIRCLE
                    strSheet = "stampBz3r"
            End Select
    End Select
    
    Set WS = ThisWorkbook.Worksheets(strSheet)
    
    Dim strFormat As String
    Dim strType As String
    Dim strUserDate As String
    
    strFormat = datStampBz.DateFormat
    strType = datStampBz.DateType
    
    strUserDate = datStampBz.UserDate
    
    strText = datStampBz.Text
    
    Dim strDate As String
    strDate = getFormatDate(strFormat, strType, strUserDate)
    
    strText = Replace(strText, "$d", strDate)
    
    If InStr(strText, vbCrLf) = 0 Then
        
        With WS.Shapes("shpSquMid").TextFrame2.TextRange
            .Font.NameComplexScript = datStampBz.Font
            .Font.NameFarEast = datStampBz.Font
            .Font.name = datStampBz.Font
            .Font.Fill.ForeColor.RGB = CLng(datStampBz.Color)
            .Text = strText
        End With
        
        With WS.Shapes("shpSquUp").TextFrame2.TextRange
            .Font.NameComplexScript = datStampBz.Font
            .Font.NameFarEast = datStampBz.Font
            .Font.name = datStampBz.Font
            .Font.Fill.ForeColor.RGB = CLng(datStampBz.Color)
            .Text = ""
        End With
        
        With WS.Shapes("shpSquDown").TextFrame2.TextRange
            .Font.NameComplexScript = datStampBz.Font
            .Font.NameFarEast = datStampBz.Font
            .Font.name = datStampBz.Font
            .Font.Fill.ForeColor.RGB = CLng(datStampBz.Color)
            .Text = ""
        End With
    
    Else
    
        Dim strHigh As String
        Dim strLow As String
        Dim lngPos As Long
        
        lngPos = InStr(strText, vbCrLf)
        
        strHigh = Mid$(strText, 1, lngPos - 1)
        strLow = Mid$(strText, lngPos + 2)
    
        With WS.Shapes("shpSquMid").TextFrame2.TextRange
            .Font.NameComplexScript = datStampBz.Font
            .Font.NameFarEast = datStampBz.Font
            .Font.name = datStampBz.Font
            .Font.Fill.ForeColor.RGB = CLng(datStampBz.Color)
            .Text = ""
        End With
        
        With WS.Shapes("shpSquUp").TextFrame2.TextRange
            .Font.NameComplexScript = datStampBz.Font
            .Font.NameFarEast = datStampBz.Font
            .Font.name = datStampBz.Font
            .Font.Fill.ForeColor.RGB = CLng(datStampBz.Color)
            .Text = strHigh
        End With
        
        With WS.Shapes("shpSquDown").TextFrame2.TextRange
            .Font.NameComplexScript = datStampBz.Font
            .Font.NameFarEast = datStampBz.Font
            .Font.name = datStampBz.Font
            .Font.Fill.ForeColor.RGB = CLng(datStampBz.Color)
            .Text = strLow
        End With
    End If

    
    Select Case datStampBz.StampType
        Case C_STAMP_BZ_RECTANGLE, C_STAMP_BZ_SQUARE
            WS.Shapes("shpSquare").Adjustments.Item(1) = CDbl(datStampBz.Round)
    End Select
    
    If CLng(datStampBz.LineSize) = 0 Then
        WS.Shapes("shpSquare").Line.visible = msoFalse
    Else
        WS.Shapes("shpSquare").Line.visible = msoTrue
        WS.Shapes("shpSquare").Line.Weight = CLng(datStampBz.LineSize)
    End If
    
    WS.Shapes("grpSquare").Line.ForeColor.RGB = CLng(datStampBz.Color)
    
    Select Case datStampBz.Rotate
        Case C_STAMP_ROTATE_HOLIZONTAL
            WS.Shapes("grpSquare").Rotation = 0
            
            WS.Shapes("shpSquMid").TextFrame2.Orientation = msoTextOrientationHorizontal
            WS.Shapes("shpSquUp").TextFrame2.Orientation = msoTextOrientationHorizontal
            WS.Shapes("shpSquDown").TextFrame2.Orientation = msoTextOrientationHorizontal
            
            WS.Shapes("shpSquMid").Rotation = 0
            WS.Shapes("shpSquUp").Rotation = 0
            WS.Shapes("shpSquDown").Rotation = 0
            
        Case C_STAMP_ROTATE_VERTICAL
            WS.Shapes("grpSquare").Rotation = 90
            
            WS.Shapes("shpSquMid").TextFrame2.Orientation = msoTextOrientationVerticalFarEast
            WS.Shapes("shpSquUp").TextFrame2.Orientation = msoTextOrientationVerticalFarEast
            WS.Shapes("shpSquDown").TextFrame2.Orientation = msoTextOrientationVerticalFarEast
            
            WS.Shapes("shpSquMid").Rotation = 90
            WS.Shapes("shpSquUp").Rotation = 90
            WS.Shapes("shpSquDown").Rotation = 90
    End Select
    
    Select Case datStampBz.StampType
        Case C_STAMP_BZ_RECTANGLE
            WS.Shapes("grpSquare").Height = 50 * C_RASIO
            WS.Shapes("grpSquare").Width = 150 * C_RASIO
        
        Case Else
            WS.Shapes("grpSquare").Height = 150 * C_RASIO
            WS.Shapes("grpSquare").Width = 150 * C_RASIO
        
    End Select
    
    Dim r As Shape
    
    Set r = WS.Shapes("grpSquare")
    
    If lngFormat = xlBitmap Then
    
        Dim b As Shape
        Dim o As Object
        
        Set b = WS.Shapes("shpBack")
        
        b.Top = r.Top - ((r.Width - r.Height) / 2)
        b.Left = r.Left
        
        b.Height = r.Width
        b.Width = r.Width
        
        b.ZOrder msoSendToBack
        
        Set o = WS.Shapes.Range(Array(r.name, b.name)).Group
        
        Set editStampBz = CreatePictureFromClipboard(o)

        
        o.Ungroup

    Else
        r.CopyPicture Appearance:=xlScreen, Format:=xlPicture
    End If
    
    Set WS = Nothing
    
End Function



Attribute VB_Name = "basStampMitome"
Option Explicit

Public Const C_STAMP_MITOME_NORMAL As Long = 1
Public Const C_STAMP_MITOME_FILE As Long = 2
'--------------------------------------------------------------
'|fffd|@|fffd|F|fffd||fffd||752||fffd||fffd||fffd|
'--------------------------------------------------------------
Sub showMitome()

    frmStampMitome.Show
End Sub
Public Function editStampMitome(ByRef s As StampMitomeDTO, ByVal lngFormat As Long) As StdPicture
   
    Dim r As Shape
    Dim WS As Worksheet
    
    Set editStampMitome = Nothing
    
    Set WS = ThisWorkbook.Worksheets("stampEx")
    
    Select Case s.Rotate
        Case C_STAMP_ROTATE_HOLIZONTAL
            Set r = WS.Shapes("shpMitomeR")
        Case C_STAMP_ROTATE_VERTICAL
            Set r = WS.Shapes("shpMitome")
    End Select
    
    r.TextFrame2.TextRange.Text = s.Text
    
    With r.TextFrame2.TextRange.Font
        .NameComplexScript = s.Font
        .NameFarEast = s.Font
        .name = s.Font
        .Strikethrough = False
        .Superscript = False
        .Subscript = False

        .Fill.ForeColor.RGB = CLng(s.Color)
    
    End With
    
    If s.Fill = C_STAMP_FILL_ON Then
        r.Fill.visible = True
        r.Fill.ForeColor.RGB = vbWhite
    Else
        r.Fill.visible = False
    End If
    
    r.Line.ForeColor.RGB = CLng(s.Color)
    
    If CLng(s.LineSize) > 0 Then
        r.Line.Weight = CLng(s.LineSize)
        r.Line.visible = True
    Else
        r.Line.visible = False
    End If

    Select Case s.Line
        Case C_STAMP_LINE_SINGLE
        
            r.AutoShapeType = msoShapeOval
            r.Height = r.Width
        
        Case C_STAMP_LINE_DOUBLE
        
            
            r.AutoShapeType = msoShapeOval
            
            Select Case s.Rotate
                Case C_STAMP_ROTATE_HOLIZONTAL
                    r.Height = r.Width
                Case C_STAMP_ROTATE_VERTICAL
                    r.Height = r.Width * 0.8
            End Select
            
        Case C_STAMP_LINE_BOLD
        
            r.AutoShapeType = msoShapeRoundedRectangle
            r.Adjustments.Item(1) = CDbl(s.Round)
            r.Height = r.Width
    
    End Select
    
    
    If lngFormat = xlBitmap Then
    
        Dim lngWidth As Long
        Dim lngHeight As Long
        Dim b As Shape
        Dim o As Object
        
        Set b = WS.Shapes("shpBack")
        
        b.Top = r.Top - ((r.Width - r.Height) / 2)
        b.Left = r.Left
        b.Height = r.Width
        b.Width = r.Width
        
        b.ZOrder msoSendToBack
        
        Set o = WS.Shapes.Range(Array(r.name, b.name)).Group
        
        Set editStampMitome = CreatePictureFromClipboard(o)
        
        o.Ungroup

    Else
        r.CopyPicture Appearance:=xlScreen, Format:=xlPicture
    End If
    
    Set WS = Nothing
    
End Function
'--------------------------------------------------------------
'|fffd|@bz|fffd|C|fffd||fffd||fffd|[|fffd|W|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||c42c|
'--------------------------------------------------------------
Function getImageStampMitome(ByVal index As Long) As StdPicture

    '|fffd||752||fffd||fffd||fffd||64fe|
    Dim col As Collection
    Dim bz As StampMitomeDTO
    
    Set getImageStampMitome = Nothing
    
    Set col = getPropertyMitome()
    Set bz = col(index)
    
    If bz.StampType = C_STAMP_MITOME_NORMAL Then
   
        Set getImageStampMitome = editStampMitome(bz, xlBitmap)
    Else
        If Not rlxIsFileExists(bz.FilePath) Then
            Exit Function
        End If

        Dim o As Object
        Set o = ThisWorkbook.Worksheets("stampEx").Pictures.Insert(bz.FilePath)
        Set getImageStampMitome = CreatePictureFromClipboard(o)
        o.Delete
        
    End If

    Set bz = Nothing
    
End Function
Public Sub MitomePaste()

    Dim lngNo As Long

    lngNo = GetSetting(C_TITLE, "StampMitome", "stampNo", 1)
    Call MitomePaste2(lngNo)

End Sub
'--------------------------------------------------------------
'|fffd|@|fffd|f|fffd|[|fffd|^|fffd||fffd|\|fffd||fffd|t|fffd||fffd|
'--------------------------------------------------------------
Sub MitomePaste2(Optional ByVal index As Variant)

    '|fffd||752||fffd||fffd||fffd||64fe|
    Dim col As Collection
    Dim s As StampMitomeDTO
    Dim ss As Range
    
    On Error Resume Next
    
    Set col = getPropertyMitome()
    
    Select Case True
        Case col Is Nothing
            Exit Sub
        Case col.count = 0
            Exit Sub
        Case Else
    End Select

    'Index|fffd||fffd||fffd|w|fffd||80b3||fffd||fffd||202||fffd||fffd||fffd||fffd||fffd||fffd||a347|
    If IsMissing(index) Then
        index = 1
    End If
    
    If rlxCheckSelectRange() = False Then
        MsgBox "|fffd|I|fffd||fffd||348||342||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If

    If GetSetting(C_TITLE, "StampMitome", "Confirm", False) Then
    Else
        If Selection.CountLarge > 1 And Selection.CountLarge <> Selection(1, 1).MergeArea.count Then
            If MsgBox("|fffd||fffd||fffd||fffd||fffd|Z|fffd||fffd||fffd|I|fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B|fffd||fffd||fffd||5c2||102||303|Z|fffd||fffd||fffd||252||fffd||fffd||fffd|t|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd||fffd||b0b5||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|H", vbQuestion + vbYesNo, C_TITLE) <> vbYes Then
                Exit Sub
            End If
        End If
    End If

    Set s = col(index)

    If s.StampType = C_STAMP_MITOME_NORMAL Then
        Call editStampMitome(s, xlPicture)
    Else
        With ActiveSheet.Pictures.Insert(s.FilePath)
            .CopyPicture xlScreen, xlPicture
            .Delete
        End With
    End If
    
    Dim sngSize As Single
    
    sngSize = CSng(s.Size) * C_RASIO
    
    Dim destLeft As Long
    Dim destWidth As Long
    Dim destTop As Long
    Dim destHeight As Long
    
    Application.ScreenUpdating = False
    
    For Each ss In Selection

        ''|fffd|t|fffd|B|fffd||fffd||fffd|^|fffd||fffd||fffd||fffd||454||fffd|\|fffd||fffd||fffd||38d||fffd|B
        If ss.Rows.Hidden Or ss.Columns.Hidden Then
            '|fffd|t|fffd|B|fffd||fffd||fffd|^|fffd||702||fffd||fffd||354||fffd|\|fffd||fffd||fffd||30d|s|fffd|E|fffd||fffd||30f||fffd||fffd||fffd||fffd||34d|s|fffd||fffd||202||fffd||fffd|B
        Else

            If ss.Address = ss.MergeArea(1, 1).Address Then

                destLeft = ss.MergeArea.Left
                destWidth = ss.MergeArea.Width
                destTop = ss.MergeArea.Top
                destHeight = ss.MergeArea.Height

                ActiveSheet.Paste
                
                If Selection.ShapeRange.Height > Selection.ShapeRange.Width Then
                    Selection.ShapeRange.Height = sngSize
                Else
                    Selection.ShapeRange.Width = sngSize
                End If
                
                Selection.ShapeRange.Top = destTop + (destHeight / 2) - (Selection.ShapeRange.Height / 2)
                Selection.ShapeRange.Left = destLeft + (destWidth / 2) - (Selection.ShapeRange.Width / 2)
            End If
        End If
    Next
    
    Selection.Copy
    Application.ScreenUpdating = True

End Sub

'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||752||fffd|l|fffd||64fe|
'--------------------------------------------------------------
Public Function getPropertyMitome() As Collection

    Dim strBuf As String
    Dim s As StampMitomeDTO
    Dim lngMax As Long
    Dim i As Long
    
    Dim col As Collection
    
    Set col = New Collection

    lngMax = GetSetting(C_TITLE, "StampMitome", "Count", "-1")
    If lngMax = -1 Then
    
        Set s = New StampMitomeDTO
        
        s.StampType = C_STAMP_MITOME_NORMAL
        s.Text = "|fffd|R|fffd|c"
        s.Font = "|fffd|l|fffd|r |fffd|S|fffd|V|fffd|b|fffd|N"
        s.Color = "&H0"
        s.Line = C_STAMP_LINE_SINGLE
        s.Size = "10.5"
        s.FilePath = ""
        s.LineSize = "10"
        s.Round = "0.10"
        s.Rotate = C_STAMP_ROTATE_VERTICAL
        s.Fill = C_STAMP_FILL_OFF
    
        col.Add s
        
        Set s = Nothing
        
        Set s = New StampMitomeDTO
        
        s.StampType = C_STAMP_MITOME_NORMAL
        s.Text = "|fffd|c|fffd||fffd|"
        s.Font = "|fffd|l|fffd|r |fffd|S|fffd|V|fffd|b|fffd|N"
        s.Color = "&HFF"
        s.Line = C_STAMP_LINE_DOUBLE
        s.Size = "10.5"
        s.FilePath = ""
        s.LineSize = "10"
        s.Round = "0.10"
        s.Rotate = C_STAMP_ROTATE_VERTICAL
        s.Fill = C_STAMP_FILL_OFF
    
        col.Add s
        
        Set s = Nothing
    
        Set s = New StampMitomeDTO
        
        s.StampType = C_STAMP_MITOME_NORMAL
        s.Text = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbCrLf & "|fffd||fffd||fffd|{|fffd|H|fffd||fffd|" & vbCrLf & "|fffd||fffd||fffd|V|fffd||fffd|"
        s.Font = "|fffd|l|fffd|r |fffd|S|fffd|V|fffd|b|fffd|N"
        s.Color = "&HFF"
        s.Line = C_STAMP_LINE_BOLD
        s.Size = "30"
        s.FilePath = ""
        s.LineSize = "10"
        s.Round = "0.10"
        s.Rotate = C_STAMP_ROTATE_VERTICAL
        s.Fill = C_STAMP_FILL_OFF
    
        col.Add s
        
        Set s = Nothing
    
    Else
        For i = 0 To lngMax - 1
            
            Set s = New StampMitomeDTO
        
            s.StampType = GetSetting(C_TITLE, "StampMitome", "StampType" & Format$(i, "000"), C_STAMP_MITOME_NORMAL)
            s.Text = GetSetting(C_TITLE, "StampMitome", "Text" & Format$(i, "000"), "|fffd|c|fffd||fffd|")
            s.Font = GetSetting(C_TITLE, "StampMitome", "Font" & Format$(i, "000"), "|fffd|l|fffd|r |fffd|S|fffd|V|fffd|b|fffd|N")
            s.Color = GetSetting(C_TITLE, "StampMitome", "Color" & Format$(i, "000"), "&HFF")
            s.Line = GetSetting(C_TITLE, "StampMitome", "Line" & Format$(i, "000"), C_STAMP_LINE_SINGLE)
            s.Size = GetSetting(C_TITLE, "StampMitome", "Size" & Format$(i, "000"), "15")
            s.FilePath = GetSetting(C_TITLE, "StampMitome", "FilePath" & Format$(i, "000"), "")
            s.LineSize = GetSetting(C_TITLE, "StampMitome", "LIneSize" & Format$(i, "000"), "10")
            s.Round = GetSetting(C_TITLE, "StampMitome", "Round" & Format$(i, "000"), "0.10")
            s.Rotate = GetSetting(C_TITLE, "StampMitome", "Rotate" & Format$(i, "000"), C_STAMP_ROTATE_VERTICAL)
            s.Fill = GetSetting(C_TITLE, "StampMitome", "Fill" & Format$(i, "000"), C_STAMP_FILL_OFF)
    
            col.Add s
            
            Set s = Nothing
        Next
    End If
    
    Set getPropertyMitome = col
    
End Function
'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||752||fffd|l|fffd||64fe|
'--------------------------------------------------------------
Public Sub setPropertyMitome(ByRef col As Collection)

    Dim strBuf As String
    Dim s As StampMitomeDTO
    Dim lngMax As Long
    Dim i As Long
    
    rlxDeleteSetting C_TITLE, "StampMitome", "StampType"
    rlxDeleteSetting C_TITLE, "StampMitome", "Text"
    rlxDeleteSetting C_TITLE, "StampMitome", "Color"
    rlxDeleteSetting C_TITLE, "StampMitome", "Font"
    rlxDeleteSetting C_TITLE, "StampMitome", "Line"
    rlxDeleteSetting C_TITLE, "StampMitome", "Size"
    rlxDeleteSetting C_TITLE, "StampMitome", "FilePath"
    rlxDeleteSetting C_TITLE, "StampMitome", "LineSize"
    rlxDeleteSetting C_TITLE, "StampMitome", "Round"
    rlxDeleteSetting C_TITLE, "StampMitome", "Rotate"
    rlxDeleteSetting C_TITLE, "StampMitome", "Fill"
    
    For i = 0 To col.count - 1
        
        Set s = col(i + 1)
        
        Call SaveSetting(C_TITLE, "StampMitome", "StampType" & Format$(i, "000"), s.StampType)
        Call SaveSetting(C_TITLE, "StampMitome", "Text" & Format$(i, "000"), s.Text)
        Call SaveSetting(C_TITLE, "StampMitome", "Color" & Format$(i, "000"), s.Color)
        Call SaveSetting(C_TITLE, "StampMitome", "Font" & Format$(i, "000"), s.Font)
        Call SaveSetting(C_TITLE, "StampMitome", "Line" & Format$(i, "000"), s.Line)
        Call SaveSetting(C_TITLE, "StampMitome", "Size" & Format$(i, "000"), s.Size)
        Call SaveSetting(C_TITLE, "StampMitome", "FilePath" & Format$(i, "000"), s.FilePath)
        Call SaveSetting(C_TITLE, "StampMitome", "LineSize" & Format$(i, "000"), s.LineSize)
        Call SaveSetting(C_TITLE, "StampMitome", "Round" & Format$(i, "000"), s.Round)
        Call SaveSetting(C_TITLE, "StampMitome", "Rotate" & Format$(i, "000"), s.Rotate)
        Call SaveSetting(C_TITLE, "StampMitome", "Fill" & Format$(i, "000"), s.Fill)
        
        Set s = Nothing
    Next
    
    Call SaveSetting(C_TITLE, "StampMitome", "Count", col.count)
    
End Sub

Sub FilePaste()
    MsgBox "|fffd||fffd||fffd||30b|@|fffd|\|fffd||341|u|fffd||fffd||4c1|v|fffd|@|fffd|\|fffd||253||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE
End Sub
Attribute VB_Name = "basStampSakura"
'--------------------------------------------------------------
'|fffd|@|fffd|t|2cd3|\|fffd||fffd|t|fffd||fffd|
'--------------------------------------------------------------
Sub pasteSakura(ByVal strId As String, ByVal index As Long)

    Dim r As Shape
    
    On Error Resume Next
    
    Application.ScreenUpdating = False
    
    Set r = ThisWorkbook.Worksheets("sakura").Shapes("picSakura" & Format(index, "00"))

    r.CopyPicture Appearance:=xlScreen, Format:=xlPicture
 
    ActiveSheet.Paste

    Selection.ShapeRange.Width = 25 * C_RASIO
    Selection.ShapeRange.Height = 25 * C_RASIO

    Application.ScreenUpdating = True

End Sub
'--------------------------------------------------------------
'|fffd|@|fffd|C|fffd||fffd||fffd|[|fffd|W|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||c42c|
'--------------------------------------------------------------
Function getImageSakura(ByVal strId As String, ByVal index As Long) As StdPicture
    
    Set getImageSakura = Nothing
    
    On Error Resume Next
    
    Dim r As Shape
    Set r = ThisWorkbook.Worksheets("sakura").Shapes("picSakura" & Format(index, "00"))
    
    Dim b As Shape
    Dim o As Object
    
    Set b = ThisWorkbook.Worksheets("sakura").Shapes("shpBack")
    
    b.Top = r.Top
    b.Left = r.Left
    b.Height = r.Width
    b.Width = r.Width
    
    b.ZOrder msoSendToBack
    
    Set o = ThisWorkbook.Worksheets("sakura").Shapes.Range(Array(r.name, b.name)).Group
    
    Set getImageSakura = CreatePictureFromClipboard(o)
    
    o.Ungroup
    
    
End Function
Attribute VB_Name = "basUndo"
Option Explicit

'--------------------------------------------------------------
'|fffd|@Undo|fffd|o|fffd|b|fffd|t|fffd|@|fffd|G|fffd||fffd||fffd|A
'--------------------------------------------------------------
Public mUndo As New UndoRangeDTO
Public mUndoWS As Worksheet
Public mA1Save As Boolean

'--------------------------------------------------------------
'|fffd|@|fffd|I|fffd||fffd||348||fffd|Undo
'--------------------------------------------------------------
Sub execUndo()

    Dim rr As Range
    
    On Error Resume Next

    If ActiveCell Is Nothing Then
        Exit Sub
    End If

    Application.ScreenUpdating = False

    For Each rr In mUndo.destRange.Areas
        rr.Copy mUndo.sourceRange.Worksheet.Range(rr.Address)
    Next
    
    Application.ScreenUpdating = True

End Sub

'--------------------------------------------------------------
'|fffd|@|fffd|s|fffd||1c9||fffd|Undo
'--------------------------------------------------------------
Sub execInsUndo()

    Dim rr As Range
    
    On Error Resume Next

    If ActiveCell Is Nothing Then
        Exit Sub
    End If

    Application.ScreenUpdating = False

    mUndo.sourceRange.Delete xlUp
    
    Application.ScreenUpdating = True

End Sub
'--------------------------------------------------------------
'|fffd|@|fffd|s|fffd||d3dc|Undo
'--------------------------------------------------------------
Sub execDelUndo()

    Dim rr As Range
    
    On Error Resume Next

    If ActiveCell Is Nothing Then
        Exit Sub
    End If

    Application.ScreenUpdating = False

    mUndo.destRange.Copy
    mUndo.sourceRange.Insert Shift:=xlDown
    
    Application.CutCopyMode = False
    
    Application.ScreenUpdating = True

End Sub
Attribute VB_Name = "frmA1SaveSetting"
Attribute VB_Base = "0{168E613C-ED71-4470-84B4-DC764B167135}{3836AD5E-BCFD-4516-994B-5E1E28B49236}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Const C_UP As Long = 1
Private Const C_DOWN As Long = 2

Private Const C_FILE_NO As Long = 0
Private Const C_FILE_STR As Long = 1

Private Sub cmdCancel_Click()

    Unload Me

End Sub

Private Sub cmdDel_Click()

    Dim i As Long
    
    For i = 0 To lstResult.ListCount
    
        If lstResult.Selected(i) Then
            lstResult.RemoveItem i
            Exit Sub
        End If
    
    Next

End Sub

Private Sub cmdOK_Click()

    Dim i As Long
    Dim strFile As String
    Dim strList As String
    
    strFile = LCase(txtFileName.Text)
    
    For i = 0 To lstResult.ListCount - 1
        strList = LCase(lstResult.List(i, C_FILE_STR))
        If strFile = strList Then
            MsgBox "|fffd||fffd||fffd||142||253||fffd||fffd|l|fffd||303|t|fffd|@|fffd|C|fffd||fffd||fffd|p|fffd|^|fffd|[|fffd||fffd||fffd||fffd||fffd|o|fffd|^|fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
            Exit Sub
        End If
    Next
    
    i = lstResult.ListCount

    lstResult.AddItem ""
    lstResult.List(i, C_FILE_NO) = i + 1
    lstResult.List(i, C_FILE_STR) = txtFileName.Text

End Sub


Private Sub cmdRatio_Click()
    frmA1Setting.Show
End Sub

Private Sub cmdSave_Click()

    Dim strList As String
    Dim i As Long

    strList = ""
    For i = 0 To lstResult.ListCount - 1
        If strList = "" Then
            strList = lstResult.List(i, C_FILE_STR)
        Else
            strList = strList & vbTab & lstResult.List(i, C_FILE_STR)
        End If
    Next

    rlxSaveSetting C_TITLE, "A1Save", "FileList", strList
    SaveSetting C_TITLE, "A1Save", "Target", optRun.Value
    
    Unload Me
    
End Sub


'------------------------------------------------------------------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||248||693||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdUp_Click()
     Call moveList(C_UP)
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd||248||693||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdDown_Click()
     Call moveList(C_DOWN)
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd||693||fffd||fffd||fffd||fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub moveList(ByVal lngMode As Long)

    Dim lngCnt As Long
    Dim lngCmp As Long
    
    Dim varTmp As Variant

    Dim lngStart As Long
    Dim lngEnd As Long
    Dim lngInc As Long

    '|fffd|P|fffd||82||202||fffd|s|fffd|v
    If lstResult.ListCount <= 1 Then
        Exit Sub
    End If

    Select Case lngMode
        Case C_UP
            lngStart = 0
            lngEnd = lstResult.ListCount - 1
            lngInc = 1
        Case C_DOWN
            lngStart = lstResult.ListCount - 1
            lngEnd = 0
            lngInc = -1
    End Select

    For lngCnt = lngStart To lngEnd Step lngInc
    
        If lstResult.Selected(lngCnt) Then
            '|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd|s|fffd||fffd||fffd||fffd||fffd||142||24a|J|fffd|n|fffd|s|fffd||30f||a347||fffd||693||fffd||fffd|s|fffd||fffd|
            If lngCnt = lngStart Then
                Exit For
            End If
            
            lngCmp = lngCnt + lngInc * -1
            
            Dim i As Long
            For i = C_FILE_STR To C_FILE_STR
                varTmp = lstResult.List(lngCnt, i)
                lstResult.List(lngCnt, i) = lstResult.List(lngCmp, i)
                lstResult.List(lngCmp, i) = varTmp
            Next
            
            lstResult.Selected(lngCnt) = False
            lstResult.Selected(lngCnt + lngInc * -1) = True
        End If
    
    Next

End Sub


Private Sub UserForm_Initialize()
        
    Dim strResult As String
    Dim strList() As String
    Dim blnTarget As Boolean
    Dim i As Long
    
    txtFileName.Text = Application.ActiveWorkbook.FullName

    strResult = rlxGetSetting(C_TITLE, "A1Save", "FileList", "")
    blnTarget = GetSetting(C_TITLE, "A1Save", "Target", False)

    strList = Split(strResult, vbTab)

    For i = 0 To UBound(strList)
        lstResult.AddItem ""
        lstResult.List(i, C_FILE_NO) = i + 1
        lstResult.List(i, C_FILE_STR) = strList(i)
    Next

    If blnTarget Then
        optRun.Value = True
    Else
        optNo.Value = True
    End If
    
    Me.Top = (Application.Top + Application.Height - Me.Height) - 20
    Me.Left = (Application.Left + Application.Width - Me.Width) - 20

End Sub
Attribute VB_Name = "frmA1Setting"
Attribute VB_Base = "0{CDCF24E5-8590-4FD7-83F5-C790F58C435D}{E5B0FDE9-6A8C-4A59-8641-A6CF98631B94}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub chkRatio_Click()
        
    cboPercent.enabled = chkRatio.Value

End Sub

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdOK_Click()

    Select Case Val(cboPercent.Text)
        Case 10 To 400
        Case Else
            MsgBox "|fffd|{|fffd||fffd||fffd||342|P|fffd|O|fffd|`|fffd|S|fffd|O|fffd|O|fffd||fffd||fffd||30a||502||153||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
            cboPercent.SetFocus
            Exit Sub
    End Select

    SaveSetting C_TITLE, "A1Setting", "ratio", chkRatio.Value
    SaveSetting C_TITLE, "A1Setting", "percent", cboPercent.Value
    Unload Me
    
End Sub


Private Sub UserForm_Initialize()

    chkRatio.Value = GetSetting(C_TITLE, "A1Setting", "ratio", False)
    
    cboPercent.Clear
    cboPercent.AddItem "25"
    cboPercent.AddItem "50"
    cboPercent.AddItem "75"
    cboPercent.AddItem "100"
    cboPercent.AddItem "200"
    cboPercent.AddItem "400"
    
    cboPercent.Value = GetSetting(C_TITLE, "A1Setting", "percent", "100")
    
    cboPercent.enabled = chkRatio.Value

End Sub
Attribute VB_Name = "frmBackupSetting"
Attribute VB_Base = "0{CD13DCDD-5D7C-46F9-905E-FB1B37FFBEBB}{7F607102-22D6-4431-9B65-EB0CDD9B7D14}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Const C_UP As Long = 1
Private Const C_DOWN As Long = 2

Private Const C_FILE_NO As Long = 0
Private Const C_FILE_STR As Long = 1

Private Sub cmdCancel_Click()

    Unload Me

End Sub

Private Sub cmdDel_Click()

    Dim i As Long
    
    For i = 0 To lstResult.ListCount
    
        If lstResult.Selected(i) Then
            lstResult.RemoveItem i
            Exit Sub
        End If
    
    Next

End Sub

Private Sub cmdFolder_Click()

    Dim strFile As String

    '|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||64fe|
    strFile = rlxSelectFolder()
    
    If Trim(strFile) <> "" Then
        txtFolder.Text = strFile
    End If
    
End Sub

Private Sub cmdOK_Click()

    Dim i As Long
    Dim strFile As String
    Dim strList As String
    
    strFile = LCase(txtFileName.Text)
    
    For i = 0 To lstResult.ListCount - 1
        strList = LCase(lstResult.List(i, C_FILE_STR))
        If strFile = strList Then
            MsgBox "|fffd||fffd||fffd||142||253||fffd||fffd|l|fffd||303|t|fffd|@|fffd|C|fffd||fffd||fffd|p|fffd|^|fffd|[|fffd||fffd||fffd||fffd||fffd|o|fffd|^|fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
            Exit Sub
        End If
    Next
    
    i = lstResult.ListCount

    lstResult.AddItem ""
    lstResult.List(i, C_FILE_NO) = i + 1
    lstResult.List(i, C_FILE_STR) = txtFileName.Text

End Sub




Private Sub cmdSave_Click()

    Dim strList As String
    Dim i As Long
    
    If Len(txtFolder.Text) <> 0 Then
        If Not rlxIsFolderExists(txtFolder.Text) Then
            MsgBox "|fffd|w|fffd||80b3||fffd||a0bd||fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||351||fffd||fffd||742||fffd||fffd||702||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
            txtFolder.SetFocus
            Exit Sub
        End If
    End If
    
    Select Case Val(txtGen.Text)
        Case 1 To 999
        Case Else
            MsgBox "|fffd||fffd||fffd||3414||fffd||242||fffd|1|fffd|`999|fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
            txtGen.SetFocus
            Exit Sub
    End Select
    
    strList = ""
    For i = 0 To lstResult.ListCount - 1
        If strList = "" Then
            strList = lstResult.List(i, C_FILE_STR)
        Else
            strList = strList & vbTab & lstResult.List(i, C_FILE_STR)
        End If
    Next

    rlxSaveSetting C_TITLE, "Backup", "FileList", strList
    SaveSetting C_TITLE, "Backup", "Folder", txtFolder.Text
    SaveSetting C_TITLE, "Backup", "Gen", txtGen.Text
    
    Unload Me
    
End Sub


'------------------------------------------------------------------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||248||693||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdUp_Click()
     Call moveList(C_UP)
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd||248||693||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdDown_Click()
     Call moveList(C_DOWN)
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd||693||fffd||fffd||fffd||fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub moveList(ByVal lngMode As Long)

    Dim lngCnt As Long
    Dim lngCmp As Long
    
    Dim varTmp As Variant

    Dim lngStart As Long
    Dim lngEnd As Long
    Dim lngInc As Long

    '|fffd|P|fffd||82||202||fffd|s|fffd|v
    If lstResult.ListCount <= 1 Then
        Exit Sub
    End If

    Select Case lngMode
        Case C_UP
            lngStart = 0
            lngEnd = lstResult.ListCount - 1
            lngInc = 1
        Case C_DOWN
            lngStart = lstResult.ListCount - 1
            lngEnd = 0
            lngInc = -1
    End Select

    For lngCnt = lngStart To lngEnd Step lngInc
    
        If lstResult.Selected(lngCnt) Then
            '|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd|s|fffd||fffd||fffd||fffd||fffd||142||24a|J|fffd|n|fffd|s|fffd||30f||a347||fffd||693||fffd||fffd|s|fffd||fffd|
            If lngCnt = lngStart Then
                Exit For
            End If
            
            lngCmp = lngCnt + lngInc * -1
            
            Dim i As Long
            For i = C_FILE_STR To C_FILE_STR
                varTmp = lstResult.List(lngCnt, i)
                lstResult.List(lngCnt, i) = lstResult.List(lngCmp, i)
                lstResult.List(lngCmp, i) = varTmp
            Next
            
            lstResult.Selected(lngCnt) = False
            lstResult.Selected(lngCnt + lngInc * -1) = True
        End If
    
    Next

End Sub


Private Sub UserForm_Initialize()
        
    Dim strResult As String
    Dim strList() As String
    Dim i As Long
    
    txtFileName.Text = Application.ActiveWorkbook.FullName

    strResult = rlxGetSetting(C_TITLE, "Backup", "FileList", "")
    txtFolder.Text = GetSetting(C_TITLE, "Backup", "Folder", "")
    txtGen.Text = GetSetting(C_TITLE, "Backup", "Gen", "99")

    strList = Split(strResult, vbTab)

    For i = 0 To UBound(strList)
        lstResult.AddItem ""
        lstResult.List(i, C_FILE_NO) = i + 1
        lstResult.List(i, C_FILE_STR) = strList(i)
    Next
   
    Me.Top = (Application.Top + Application.Height - Me.Height) - 20
    Me.Left = (Application.Left + Application.Width - Me.Width) - 20

End Sub
Attribute VB_Name = "frmColor"
Attribute VB_Base = "0{6B1F50BA-645B-43F7-A560-F4A9764C1AD3}{BA5075BE-E78D-4BEB-A2B1-AE880D3DCD28}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private mColor As Long
Private mResult As VbMsgBoxResult
Public Function Start(ByRef lngColor As Long) As VbMsgBoxResult

    Dim c As control
    
    mColor = lngColor
    
    For Each c In frmColor.Controls
    
        If TypeName(c) = "Image" Then
    
            '|fffd|F|fffd||30f||fffd||fffd||fffd||fffd||752||fffd|
            c.BackColor = ActiveWorkbook.Colors(Val(Right(c.name, 2)))
        
            If c.BackColor = lngColor Then
                c.SpecialEffect = fmSpecialEffectSunken
            Else
                c.SpecialEffect = fmSpecialEffectRaised
            End If
            
        End If
    Next

    mResult = vbCancel

    Me.Show vbModal

    If mResult = vbOK Then
        lngColor = mColor
    End If

    Start = mResult
    
End Function

Private Sub cmdColorDlg_Click()

    Dim lngColor As Long
    Dim result As VbMsgBoxResult


    lngColor = mColor

    result = rlxGetColorDlg(lngColor)
'    result = frmColor.Start(lngColor)

    If result > 0 Then
    
        mResult = vbOK
        mColor = result
        Unload Me
    
    End If

End Sub

Private Sub Image01_Click()
    Call selectImage(Image01)
End Sub
Private Sub Image02_Click()
    Call selectImage(Image02)
End Sub
Private Sub Image03_Click()
    Call selectImage(Image03)
End Sub
Private Sub Image04_Click()
    Call selectImage(Image04)
End Sub
Private Sub Image05_Click()
    Call selectImage(Image05)
End Sub
Private Sub Image06_Click()
    Call selectImage(Image06)
End Sub
Private Sub Image07_Click()
    Call selectImage(Image07)
End Sub
Private Sub Image08_Click()
    Call selectImage(Image08)
End Sub
Private Sub Image09_Click()
    Call selectImage(Image09)
End Sub
Private Sub Image10_Click()
    Call selectImage(Image10)
End Sub
Private Sub Image11_Click()
    Call selectImage(Image11)
End Sub
Private Sub Image12_Click()
    Call selectImage(Image12)
End Sub
Private Sub Image13_Click()
    Call selectImage(Image13)
End Sub
Private Sub Image14_Click()
    Call selectImage(Image14)
End Sub
Private Sub Image15_Click()
    Call selectImage(Image15)
End Sub
Private Sub Image16_Click()
    Call selectImage(Image16)
End Sub
Private Sub Image33_Click()
    Call selectImage(Image33)
End Sub
Private Sub Image34_Click()
    Call selectImage(Image34)
End Sub
Private Sub Image35_Click()
    Call selectImage(Image35)
End Sub
Private Sub Image36_Click()
    Call selectImage(Image36)
End Sub
Private Sub Image37_Click()
    Call selectImage(Image37)
End Sub
Private Sub Image38_Click()
    Call selectImage(Image38)
End Sub
Private Sub Image39_Click()
    Call selectImage(Image39)
End Sub
Private Sub Image40_Click()
    Call selectImage(Image40)
End Sub
Private Sub Image41_Click()
    Call selectImage(Image41)
End Sub
Private Sub Image42_Click()
    Call selectImage(Image42)
End Sub
Private Sub Image43_Click()
    Call selectImage(Image43)
End Sub
Private Sub Image44_Click()
    Call selectImage(Image44)
End Sub
Private Sub Image45_Click()
    Call selectImage(Image45)
End Sub
Private Sub Image46_Click()
    Call selectImage(Image46)
End Sub
Private Sub Image47_Click()
    Call selectImage(Image47)
End Sub
Private Sub Image48_Click()
    Call selectImage(Image48)
End Sub
Private Sub Image49_Click()
    Call selectImage(Image49)
End Sub
Private Sub Image50_Click()
    Call selectImage(Image50)
End Sub
Private Sub Image51_Click()
    Call selectImage(Image51)
End Sub
Private Sub Image52_Click()
    Call selectImage(Image52)
End Sub
Private Sub Image53_Click()
    Call selectImage(Image53)
End Sub
Private Sub Image54_Click()
    Call selectImage(Image54)
End Sub
Private Sub Image55_Click()
    Call selectImage(Image55)
End Sub
Private Sub Image56_Click()
    Call selectImage(Image56)
End Sub


Private Sub selectImage(ByRef i As image)
    
    mResult = vbOK
    mColor = i.BackColor
    Unload Me

End Sub

Attribute VB_Name = "frmCombo"
Attribute VB_Base = "0{5A109AB6-2799-4E06-9676-3BEE2BC0D9A5}{4A6DA1C3-5FE8-4B8C-AFBB-1DE350BC0463}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Const C_COM_DATA As Long = 25 '13

Const C_COM_NO As Long = 1
Const C_COM_CATEGORY As Long = 2
Const C_COM_MACRO As Long = 3
Const C_COM_DISP_NAME As Long = 4
Const C_COM_USE As Long = 5

Const C_SET_DATA As Long = 3
Const C_SET_NO As Long = 0
Const C_SET_CATEGORY As Long = 1
Const C_SET_DISP_NAME As Long = 2
Const C_SET_MACRO As Long = 3

Const C_LST_NAME As Long = 0
Const C_LST_DATA As Long = 1

Private Const C_UP As Long = 1
Private Const C_DOWN As Long = 2

Private mblnSainyu As Boolean



Private Sub cboCategory_Click()
    Call dispCommand
End Sub



Private Sub cmdAdd_Click()

    Dim j As Long
    Dim i As Long
    Dim blnFind As Boolean
    Dim strkey As String

    blnFind = False

    If lstCommand.ListCount = 0 Then
        Exit Sub
    End If

    strkey = lstCommand.List(lstCommand.ListIndex, C_SET_MACRO)

'    If lstCombo.ListCount > 0 Then
'        For i = 0 To lstCombo.ListCount - 1
'            If lstCombo.List(i, C_SET_MACRO) = strkey Then
'                blnFind = True
'                j = i
'                Exit For
'            End If
'        Next
'    End If
'
'    If blnFind Then
''        Call MsgBox("|fffd||fffd||fffd||142||253|o|fffd|^|fffd||3c2||742||142||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE)
'        Exit Sub
'    Else
        j = lstCombo.ListCount
        lstCombo.AddItem ""
'    End If

    lstCombo.List(j, C_SET_NO) = j + 1
    lstCombo.List(j, C_SET_CATEGORY) = lstCommand.List(lstCommand.ListIndex, C_SET_CATEGORY)
    lstCombo.List(j, C_SET_DISP_NAME) = lstCommand.List(lstCommand.ListIndex, C_SET_DISP_NAME)
    lstCombo.List(j, C_SET_MACRO) = lstCommand.List(lstCommand.ListIndex, C_SET_MACRO)

    For i = 0 To lstCombo.ListCount - 1
        lstCombo.Selected(i) = False
    Next

    lstCombo.Selected(j) = True

    If lstCombo.ListCount > 0 Then
        cmdDel.enabled = True
    Else
        cmdDel.enabled = False
    End If
End Sub

Private Sub cmdCancel_Click()
    Unload Me
End Sub



Private Sub cmdDel_Click()

    Dim i As Long
    Dim j As Long

    If lstCombo.ListCount > 0 Then
        i = lstCombo.ListIndex
        lstCombo.RemoveItem i
        If i > lstCombo.ListCount - 1 Then
            i = i - 1
            If i < 0 Then
                i = 0
            End If
        Else
            For j = i To lstCombo.ListCount - 1
                lstCombo.List(j, C_SET_NO) = j + 1
            Next
        End If
        
        Call lstCombo_Change
        
        If lstCombo.ListCount > 0 Then
            lstCombo.ListIndex = i
            cmdDel.enabled = True
        Else
            cmdDel.enabled = False
        End If
    End If
End Sub



'------------------------------------------------------------------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||248||693||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdUp_Click()
     Call moveList(C_UP)
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd||248||693||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdDown_Click()
     Call moveList(C_DOWN)
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd||693||fffd||fffd||fffd||fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub moveList(ByVal lngMode As Long)

    Dim lngCnt As Long
    Dim lngCmp As Long
    
    Dim varTmp As Variant

    Dim lngStart As Long
    Dim lngEnd As Long
    Dim lngInc As Long

    '|fffd|P|fffd||82||202||fffd|s|fffd|v
    If lstCombo.ListCount <= 1 Then
        Exit Sub
    End If

    Select Case lngMode
        Case C_UP
            lngStart = 0
            lngEnd = lstCombo.ListCount - 1
            lngInc = 1
        Case C_DOWN
            lngStart = lstCombo.ListCount - 1
            lngEnd = 0
            lngInc = -1
    End Select

    For lngCnt = lngStart To lngEnd Step lngInc
    
        If lstCombo.Selected(lngCnt) Then
            '|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd|s|fffd||fffd||fffd||fffd||fffd||142||24a|J|fffd|n|fffd|s|fffd||30f||a347||fffd||693||fffd||fffd|s|fffd||fffd|
            If lngCnt = lngStart Then
                Exit For
            End If
            
            lngCmp = lngCnt + lngInc * -1
            
            Dim i As Long
            For i = C_SET_CATEGORY To C_SET_MACRO
                varTmp = lstCombo.List(lngCnt, i)
                lstCombo.List(lngCnt, i) = lstCombo.List(lngCmp, i)
                lstCombo.List(lngCmp, i) = varTmp
            Next
            
            lstCombo.Selected(lngCnt) = False
            lstCombo.Selected(lngCnt + lngInc * -1) = True
        End If
    
    Next

End Sub

Private Sub lstCombo_Change()

    Dim i As Long
    Dim strBuf As String
    
    If mblnSainyu Then
        Exit Sub
    End If
    
    For i = 0 To lstCombo.ListCount - 1
    
        strBuf = strBuf & lstCombo.List(i, C_SET_NO) & vbLf
        strBuf = strBuf & lstCombo.List(i, C_SET_CATEGORY) & vbLf
        strBuf = strBuf & lstCombo.List(i, C_SET_DISP_NAME) & vbLf
        strBuf = strBuf & lstCombo.List(i, C_SET_MACRO)
        
        If i = lstCombo.ListCount - 1 Then
        Else
            strBuf = strBuf & vbTab
        End If
    Next

    mblnSainyu = True
    lstSetting.List(lstSetting.ListIndex, C_LST_DATA) = strBuf
    mblnSainyu = False

End Sub

Private Sub lstCombo_DblClick(ByVal Cancel As MSForms.ReturnBoolean)

    Dim i As Long
    Dim strBuf As String

    strBuf = lstCombo.List(lstCombo.ListIndex, C_SET_DISP_NAME)
    
    For i = 0 To lstCommand.ListCount - 1
        If lstCommand.List(i, C_SET_DISP_NAME) = strBuf Then
            lstCommand.ListIndex = i
            lstCommand.TopIndex = i
            Exit For
        End If
    Next
    
End Sub

Private Sub lstSetting_Change()

    Dim strBuf As String
    Dim i As Long
    Dim varLine As Variant
    Dim varCol As Variant
    
    If mblnSainyu Then
        Exit Sub
    End If
    
    If lstSetting.ListIndex < 0 Then
        Exit Sub
    End If
    
    mblnSainyu = True
    lstCombo.Clear
    mblnSainyu = False
    
    strBuf = lstSetting.List(lstSetting.ListIndex, C_LST_DATA)
    If strBuf = "" Then
        cmdDel.enabled = False
        Exit Sub
    End If
    
    varLine = Split(strBuf, vbTab)
    
    For i = LBound(varLine) To UBound(varLine)
    
        varCol = Split(varLine(i), vbLf)
        
        lstCombo.AddItem ""
        lstCombo.List(i, C_SET_NO) = i + 1
        lstCombo.List(i, C_SET_CATEGORY) = varCol(C_SET_CATEGORY)
        lstCombo.List(i, C_SET_DISP_NAME) = varCol(C_SET_DISP_NAME)
        lstCombo.List(i, C_SET_MACRO) = varCol(C_SET_MACRO)
        
    Next

    If lstCombo.ListCount < 0 Then
        cmdDel.enabled = False
    Else
        lstCombo.ListIndex = 0
        cmdDel.enabled = True
    End If

End Sub


Private Sub cmdSave_Click()

    Dim i As Long
    Dim strBuf As String
    Dim strLine As String


    strBuf = ""

    For i = 0 To lstSetting.ListCount - 1
        rlxSaveSetting C_TITLE, "Combo", "ComboList" & i + 1, lstSetting.List(i, C_LST_DATA)
    Next


    '|fffd|V|fffd||fffd||fffd|[|fffd|g|fffd|J|fffd|b|fffd|g|fffd|L|fffd|[|fffd||313|o|fffd|^
    Call setShortCutKey

    Unload Me

End Sub





'Private Sub lstSetting_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
'
'    Dim i As Long
'    Dim strShift As String
'    Dim strkey As String
'
'    Dim strBuf As String
'
'    strBuf = lstSetting.List(lstSetting.ListIndex, C_SETLIST_KEY)
'
'    For i = 1 To Len(strBuf)
'        Select Case Mid$(strBuf, i, 1)
'            Case "^", "%", "+"
'            Case Else
'                strShift = Mid$(strBuf, 1, i - 1)
'                strkey = Mid$(strBuf, i)
'                Exit For
'        End Select
'    Next
'
'    For i = 0 To lstKey.ListCount - 1
'        If lstKey.List(i, 2) = strkey Then
'            lstKey.ListIndex = i
'            lstKey.TopIndex = i
'            Exit For
'        End If
'    Next
'
'    For i = 0 To cmbShift.ListCount - 1
'        If cmbShift.List(i, 1) = strShift Then
'            cmbShift.ListIndex = i
'            Exit For
'        End If
'    Next
'
'    strBuf = lstSetting.List(lstSetting.ListIndex, C_SETLIST_MACRO)
'
'    For i = 0 To lstCommand.ListCount - 1
'        If lstCommand.List(i, 3) = strBuf Then
'            lstCommand.ListIndex = i
'            lstCommand.TopIndex = i
'            Exit For
'        End If
'    Next
'
'End Sub


Private Sub txtKinou_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        Call dispCommand
    End If
End Sub

Private Sub UserForm_Initialize()
    
    Dim WS As Worksheet
    Dim i As Long
    Dim j As Long




    Set WS = ThisWorkbook.Worksheets("HELP")
    i = C_COM_DATA
    j = 0

    Dim strBefore As String
    strBefore = ""
    
    cboCategory.AddItem "|fffd||fffd||fffd||5c2||fffd|"
    '|fffd|}|fffd|N|fffd||fffd||fffd|V|fffd|[|fffd|g|fffd||303||fffd||fffd|[|fffd|h
    Do Until WS.Cells(i, C_COM_NO).Value = ""

        If WS.Cells(i, C_COM_USE).Value <> "|fffd||" And WS.Cells(i, C_COM_CATEGORY).Value <> "|fffd||702||182||7ce||fffd||fffd|s" Then
            If WS.Cells(i, C_COM_CATEGORY).Value <> strBefore Then
                cboCategory.AddItem WS.Cells(i, C_COM_CATEGORY).Value
                strBefore = WS.Cells(i, C_COM_CATEGORY).Value
            End If
        End If
        i = i + 1

    Loop
    cboCategory.ListIndex = 0
    
    Dim strList() As String
    Dim strResult As String
    Dim lngMax As Long
    
    mblnSainyu = True
    For i = 0 To 4
    
        strResult = rlxGetSetting(C_TITLE, "Combo", "ComboList" & (i + 1), "")
        
        lstSetting.AddItem
        lstSetting.List(i, C_LST_NAME) = "|fffd||702||182||7ce||fffd||fffd|s" & strConv(i + 1, vbWide)
        lstSetting.List(i, C_LST_DATA) = strResult
        
    Next
    mblnSainyu = False
    
    
    If lstSetting.ListCount > 0 Then
        lstSetting.ListIndex = 0
        cmdDel.enabled = True
    Else
        cmdDel.enabled = False
    End If
    
    
End Sub


Sub dispCommand()

    Dim WS As Worksheet
    Dim i As Long
    Dim j As Long

    Set WS = ThisWorkbook.Worksheets("HELP")
    i = C_COM_DATA
    j = 0
    
    lstCommand.Clear

    '|fffd|}|fffd|N|fffd||fffd||fffd|V|fffd|[|fffd|g|fffd||303||fffd||fffd|[|fffd|h
    Do Until WS.Cells(i, C_COM_NO).Value = ""
        
        If WS.Cells(i, C_COM_USE).Value <> "|fffd||" And WS.Cells(i, C_COM_CATEGORY).Value <> "|fffd||702||182||7ce||fffd||fffd|s" Then
            If (cboCategory.ListIndex = 0 Or cboCategory.Text = WS.Cells(i, C_COM_CATEGORY).Value) And (txtKinou.Text = "" Or InStr(WS.Cells(i, C_COM_DISP_NAME).Value, txtKinou.Text) > 0) Then
                lstCommand.AddItem ""
                lstCommand.List(j, C_SET_NO) = j + 1
                lstCommand.List(j, C_SET_CATEGORY) = WS.Cells(i, C_COM_CATEGORY).Value
                lstCommand.List(j, C_SET_DISP_NAME) = WS.Cells(i, C_COM_DISP_NAME).Value
                lstCommand.List(j, C_SET_MACRO) = WS.Cells(i, C_COM_MACRO).Value
                j = j + 1
            End If
        End If
        i = i + 1

    Loop
    If lstCommand.ListCount > 0 Then
        lstCommand.ListIndex = 0
        cmdAdd.enabled = True
    Else
        cmdAdd.enabled = False
    End If
End Sub


Attribute VB_Name = "frmComp"
Attribute VB_Base = "0{8B6159F9-DD72-40C0-8A8E-4F6EA730ECD5}{17FDA7D0-D7FC-46F8-8797-8D4067130D63}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit
Private mblnCancel As Boolean
Private Const C_START_ROW As Long = 8

Private Const C_COMP_NO As Long = 1
Private Const C_COMP_RESULT As Long = 2
Private Const C_COMP_SRCSTR As Long = 3
Private Const C_COMP_DSTSTR As Long = 4
Private Const C_COMP_BOOK As Long = 5
Private Const C_COMP_SHEET As Long = 6
Private Const C_COMP_ADDRESS As Long = 7

Private Sub cboDstBook_Change()
    Dim s As Worksheet
    
    cboDstSheet.Clear
    If cboDstBook.ListIndex <> -1 Then
        For Each s In Workbooks(cboDstBook.Text).Worksheets
            cboDstSheet.AddItem s.name
        Next
    End If
End Sub

Private Sub cboSrcBook_Change()
    Dim s As Worksheet
    
    cboSrcSheet.Clear
    If cboSrcBook.ListIndex <> -1 Then
        For Each s In Workbooks(cboSrcBook.Text).Worksheets
            cboSrcSheet.AddItem s.name
        Next
    End If
End Sub

Private Sub cmdCancel_Click()
    If cmdCancel.Caption = "|fffd||82||fffd||fffd||fffd|" Then
        Unload Me
    Else
        mblnCancel = True
    End If
End Sub



'Private Sub cmdOk_Click()
'
'    Dim srcSheet As Worksheet
'    Dim dstSheet As Worksheet
'
'    If cboSrcSheet.ListIndex = -1 Then
'        MsgBox "|fffd||fffd|r|fffd||fffd||fffd||303|V|fffd|[|fffd|g|fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
'        Exit Sub
'    End If
'    If cboDstSheet.ListIndex = -1 Then
'        MsgBox "|fffd||fffd|r|fffd||fffd||303|V|fffd|[|fffd|g|fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
'        Exit Sub
'    End If
'
'    Set srcSheet = Workbooks(cboSrcBook.Text).Worksheets(cboSrcSheet.Text)
'    Set dstSheet = Workbooks(cboDstBook.Text).Worksheets(cboDstSheet.Text)
'
'    Dim srcBook As Workbook
'    Dim dstBook As Workbook
'
'    Dim r1 As Range
'    Dim d1 As Variant
'    Dim r2 As Range
'    Dim d2 As Variant
'
'    Dim i As Long
'    Dim j As Long
'    Dim lngCount As Long
'
'    Dim strSrcAddress As String
'    Dim strDstAddress As String
'
'    Set srcBook = srcSheet.Parent
'    Set dstBook = dstSheet.Parent
'
'    strSrcAddress = srcSheet.UsedRange.Address
'    strDstAddress = dstSheet.UsedRange.Address
'
'    Set r1 = Union(dstSheet.Range(strSrcAddress), dstSheet.Range(strDstAddress))
'    d1 = r1
'
'    Set r2 = Union(srcSheet.Range(strSrcAddress), srcSheet.Range(strDstAddress))
'    d2 = r2
'
'
'
'    Dim ResultWS As Worksheet
'    ThisWorkbook.Worksheets("|fffd||fffd|r|fffd||fffd||fffd||fffd|").Copy
'    Set ResultWS = ActiveSheet
'
'    ResultWS.Name = "|fffd||fffd|r|fffd||fffd||fffd||fffd|"
'
'    ResultWS.Cells(1, C_COMP_NO).Value = "|fffd|V|fffd|[|fffd|g|fffd||314||fffd|r"
'    ResultWS.Cells(2, C_COMP_NO).Value = "|fffd||fffd|r|fffd||fffd||fffd|F" & cboSrcBook.Text & "!" & cboSrcSheet.Text
'    ResultWS.Cells(3, C_COMP_NO).Value = "|fffd||fffd|r|fffd||fffd|F" & cboDstBook.Text & "!" & cboDstSheet.Text
'    ResultWS.Cells(4, C_COMP_NO).Value = "|fffd|s|fffd||fffd|v|fffd||314||fffd|r|fffd||fffd||fffd||314|w|fffd|i|fffd|F|fffd||fffd||3cd|X|fffd||fffd||fffd||fffd|i|fffd||fffd||fffd|j|fffd|F" & chkSrcColor.Value
'    ResultWS.Cells(5, C_COMP_NO).Value = "|fffd|s|fffd||fffd|v|fffd||314||fffd|r|fffd||fffd||314|w|fffd|i|fffd|F|fffd||fffd||3cd|X|fffd||fffd||fffd||fffd|i|fffd||501|j|fffd|F" & chkDstColor.Value
'
'    ResultWS.Cells(7, C_COMP_NO).Value = "No."
'    ResultWS.Cells(7, C_COMP_RESULT).Value = "|fffd||fffd||fffd||fffd|"
'    ResultWS.Cells(7, C_COMP_SRCSTR).Value = "|fffd||fffd|r|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
'    ResultWS.Cells(7, C_COMP_DSTSTR).Value = "|fffd||fffd|r|fffd||6576||fffd||fffd||fffd||fffd|"
'    ResultWS.Cells(7, C_COMP_BOOK).Value = "|fffd||fffd|r|fffd||fffd|u|fffd|b|fffd|N"
'    ResultWS.Cells(7, C_COMP_SHEET).Value = "|fffd||fffd|r|fffd||fffd|V|fffd|[|fffd|g"
'    ResultWS.Cells(7, C_COMP_ADDRESS).Value = "|fffd|A|fffd|h|fffd||fffd||fffd|X"
'    lngCount = C_START_ROW
'
'    If IsEmpty(d1) Or IsEmpty(d2) Then
'        GoTo e
'    End If
'
'    Dim mm As MacroManager
'    Set mm = New MacroManager
'    Set mm.Form = Me
'    mm.Disable
'    mm.DispGuidance "|fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd|J|fffd|E|fffd||fffd||fffd|g|fffd||fffd||fffd||102||fffd||fffd||702||fffd|..."
'
'    mm.StartGauge (UBound(d1, 1) - LBound(d1, 1) + 1) * (UBound(d1, 2) - LBound(d1, 2) + 1)
'    Dim lngCnt As Long
'    lngCnt = 0
'
'    For i = LBound(d1, 1) To UBound(d1, 1)
'        For j = LBound(d1, 2) To UBound(d1, 2)
'            If mblnCancel Then
'                GoTo e
'            End If
'            If d1(i, j) <> d2(i, j) Then
'                makeResult ResultWS, srcSheet, dstSheet, lngCount, i, j
'
'            Else
'                '|fffd||fffd|Z|fffd||fffd||fffd||38d||fffd|
'                If IsEmpty(d1(i, j)) <> IsEmpty(d2(i, j)) Then
'                    makeResult ResultWS, srcSheet, dstSheet, lngCount, i, j
'                End If
'            End If
'            lngCnt = lngCnt + 1
'            mm.DisplayGauge lngCnt
'        Next
'    Next
'
'
'    ResultWS.Columns("B:G").AutoFit
'    Dim r As Range
'    Set r = ResultWS.Cells(C_START_ROW, 1).CurrentRegion
'
'    r.VerticalAlignment = xlTop
'    r.Select
'
'    execSelectionRowDrawGrid
'e:
'    Set ResultWS = Nothing
'    Unload Me
'
'End Sub
'Sub makeResult(ByRef ResultWS As Worksheet, ByRef srcSheet As Worksheet, ByRef dstSheet As Worksheet, ByRef lngCount As Long, ByVal i As Long, ByVal j As Long)
'
'    ResultWS.Cells(lngCount, C_COMP_NO).Value = lngCount - C_START_ROW + 1
'    ResultWS.Cells(lngCount, C_COMP_RESULT).Value = "|fffd|s|fffd||fffd|v"
'    ResultWS.Cells(lngCount, C_COMP_BOOK).Value = dstSheet.Parent.Name
'    ResultWS.Cells(lngCount, C_COMP_SHEET).Value = dstSheet.Name
'    ResultWS.Cells(lngCount, C_COMP_ADDRESS).Value = dstSheet.Cells(i, j).Address
'    ResultWS.Cells(lngCount, C_COMP_SRCSTR).Value = srcSheet.Cells(i, j).Value
'    ResultWS.Cells(lngCount, C_COMP_DSTSTR).Value = dstSheet.Cells(i, j).Value
'
'    ResultWS.Hyperlinks.Add _
'        Anchor:=ResultWS.Cells(lngCount, C_COMP_ADDRESS), _
'        Address:="", _
'        SubAddress:=ResultWS.Cells(lngCount, C_COMP_ADDRESS).Address, _
'        TextToDisplay:=dstSheet.Cells(i, j).Address
'
'    On Error Resume Next
'    If chkSrcColor Then
'        srcSheet.Cells(i, j).Interior.Color = vbYellow
'    End If
'    If chkDstColor Then
'        dstSheet.Cells(i, j).Interior.Color = vbRed
'    End If
'
'    lngCount = lngCount + 1
'
'End Sub
Private Sub UserForm_Initialize()

    Dim b As Workbook
    
    For Each b In Workbooks
        cboSrcBook.AddItem b.name
        cboDstBook.AddItem b.name
    Next
    
    cboSrcSheet.Clear
    cboDstSheet.Clear
    
    chkSrcColor.Value = True
    chkDstColor.Value = True

    lblGauge.visible = False
    mblnCancel = False
    
End Sub


Private Sub cmdOK_Click()

    Dim srcSheet As Worksheet
    Dim dstSheet As Worksheet

    If cboSrcSheet.ListIndex = -1 Then
        MsgBox "|fffd||fffd|r|fffd||fffd||fffd||303|V|fffd|[|fffd|g|fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
        Exit Sub
    End If
    If cboDstSheet.ListIndex = -1 Then
        MsgBox "|fffd||fffd|r|fffd||fffd||303|V|fffd|[|fffd|g|fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
        Exit Sub
    End If

    Set srcSheet = Workbooks(cboSrcBook.Text).Worksheets(cboSrcSheet.Text)
    Set dstSheet = Workbooks(cboDstBook.Text).Worksheets(cboDstSheet.Text)

    Dim srcBook As Workbook
    Dim dstBook As Workbook

    Dim r1 As Range
    Dim r2 As Range
    
    Dim i As Long
    Dim j As Long
    Dim lngCount As Long
    
    Dim strSrcAddress As String
    Dim strDstAddress As String

    Set srcBook = srcSheet.Parent
    Set dstBook = dstSheet.Parent
    
    strSrcAddress = srcSheet.UsedRange.Address
    strDstAddress = dstSheet.UsedRange.Address

'    Set r1 = Union(dstSheet.Range(strSrcAddress), dstSheet.Range(strDstAddress))
'    Set r2 = Union(srcSheet.Range(strSrcAddress), srcSheet.Range(strDstAddress))
    Set r1 = Union(srcSheet.Range(strSrcAddress), srcSheet.Range(strDstAddress))
    Set r2 = Union(dstSheet.Range(strSrcAddress), dstSheet.Range(strDstAddress))
    
    Dim ResultWS As Worksheet
    ThisWorkbook.Worksheets("|fffd||fffd|r|fffd||fffd||fffd||fffd|").Copy
    Set ResultWS = ActiveSheet
    
    ResultWS.name = "|fffd||fffd|r|fffd||fffd||fffd||fffd|"
    
    ResultWS.Cells(1, C_COMP_NO).Value = "|fffd|V|fffd|[|fffd|g|fffd||314||fffd|r"
    ResultWS.Cells(2, C_COMP_NO).Value = "|fffd||fffd|r|fffd||fffd||fffd|F" & cboSrcBook.Text & "!" & cboSrcSheet.Text
    ResultWS.Cells(3, C_COMP_NO).Value = "|fffd||fffd|r|fffd||fffd|F" & cboDstBook.Text & "!" & cboDstSheet.Text
    ResultWS.Cells(4, C_COMP_NO).Value = "|fffd|s|fffd||fffd|v|fffd||314||fffd|r|fffd||fffd||fffd||314|w|fffd|i|fffd|F|fffd||fffd||3cd|X|fffd||fffd||fffd||fffd|i|fffd||fffd||fffd|j|fffd|F" & chkSrcColor.Value
    ResultWS.Cells(5, C_COMP_NO).Value = "|fffd|s|fffd||fffd|v|fffd||314||fffd|r|fffd||fffd||314|w|fffd|i|fffd|F|fffd||fffd||3cd|X|fffd||fffd||fffd||fffd|i|fffd||501|j|fffd|F" & chkDstColor.Value
    
    ResultWS.Cells(7, C_COMP_NO).Value = "No."
    ResultWS.Cells(7, C_COMP_RESULT).Value = "|fffd||fffd||fffd||fffd|"
    ResultWS.Cells(7, C_COMP_SRCSTR).Value = "|fffd||fffd|r|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    ResultWS.Cells(7, C_COMP_DSTSTR).Value = "|fffd||fffd|r|fffd||6576||fffd||fffd||fffd||fffd|"
    ResultWS.Cells(7, C_COMP_BOOK).Value = "|fffd||fffd|r|fffd||fffd|u|fffd|b|fffd|N"
    ResultWS.Cells(7, C_COMP_SHEET).Value = "|fffd||fffd|r|fffd||fffd|V|fffd|[|fffd|g"
    ResultWS.Cells(7, C_COMP_ADDRESS).Value = "|fffd|A|fffd|h|fffd||fffd||fffd|X"
    lngCount = C_START_ROW
    
    If r1 Is Nothing Or r2 Is Nothing Then
        GoTo e
    End If
    
    Dim mm As MacroManager
    Set mm = New MacroManager
    Set mm.Form = Me
    
    mm.Disable
    mm.DispGuidance "|fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd|J|fffd|E|fffd||fffd||fffd|g|fffd||fffd||fffd||102||fffd||fffd||702||fffd|..."
    
    mm.StartGauge r1.count
    
    For i = 1 To r1.count
            
        If mblnCancel Then
            GoTo e
        End If
        
        If IsError(r1(i).Value) Or IsError(r2(i).Value) Then
            makeResult ResultWS, srcSheet, dstSheet, lngCount, r1(i), r2(i)
        Else
            '|fffd||fffd|Z|fffd||fffd||fffd||38d||fffd|
            If IsEmpty(r1(i).Value) And IsEmpty(r2(i).Value) Then
            Else
                If r1(i).Value <> r2(i).Value Then
                    makeResult ResultWS, srcSheet, dstSheet, lngCount, r1(i), r2(i)
                End If
            End If
        End If
        
        mm.DisplayGauge i
    
    Next
    
    ResultWS.Columns("B:G").AutoFit
    ResultWS.Select
    
    Dim r As Range
    Set r = ResultWS.Cells(C_START_ROW, 1).CurrentRegion
    
    r.VerticalAlignment = xlTop
    r.Select
    
    execSelectionRowDrawGrid
e:
    Unload Me
    
    ResultWS.Parent.Activate
    Set ResultWS = Nothing
    
End Sub
Sub makeResult(ByRef ResultWS As Worksheet, ByRef srcSheet As Worksheet, ByRef dstSheet As Worksheet, ByRef lngCount As Long, ByRef r1 As Range, ByRef r2 As Range)
                
    ResultWS.Cells(lngCount, C_COMP_NO).Value = lngCount - C_START_ROW + 1
    ResultWS.Cells(lngCount, C_COMP_RESULT).Value = "|fffd|s|fffd||fffd|v"
    ResultWS.Cells(lngCount, C_COMP_BOOK).Value = dstSheet.Parent.name
    ResultWS.Cells(lngCount, C_COMP_SHEET).Value = dstSheet.name
    ResultWS.Cells(lngCount, C_COMP_ADDRESS).Value = r1.Address
    ResultWS.Cells(lngCount, C_COMP_SRCSTR).Value = r1.Value
    ResultWS.Cells(lngCount, C_COMP_DSTSTR).Value = r2.Value

    ResultWS.Hyperlinks.Add _
        Anchor:=ResultWS.Cells(lngCount, C_COMP_ADDRESS), _
        Address:="", _
        SubAddress:=ResultWS.Cells(lngCount, C_COMP_ADDRESS).Address, _
        TextToDisplay:=r1.Address

    On Error Resume Next
    If chkSrcColor Then
        r1.Interior.Color = vbYellow
    End If
    If chkDstColor Then
        r2.Interior.Color = vbRed
    End If

    lngCount = lngCount + 1

End Sub

Attribute VB_Name = "frmContents"
Attribute VB_Base = "0{6E3F54FC-9F42-4011-9102-2B966141253A}{647D3C0A-2CAC-41EB-95FD-711CAE22838C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Const C_NAME As String = "|fffd||68e||fffd|"
Private Const C_NO As Long = 1
Private Const C_SHEET_NAME As Long = 2
Private Const C_PAPER_SIZE As Long = 3
Private Const C_PAGES As Long = 4
Private Const C_HEAD_ROW = 1
Private Const C_START_ROW = 3
    
Private Const C_COLUMN_LIST As Long = 1
Private Const C_COLUMN_PAGE As Long = 2

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdOK_Click()


    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim m As Long
    Dim p() As Long
    Dim l As Long
    
    Dim lngCol As Long
    Dim lngRow As Long
    Dim lngLevel As Long
    Dim strBuf As String
    

    
    Dim C_PERIOD As String
    Dim C_CONTENT_LIST As Long
    Dim C_CONTENT_PAGE As Long
    Dim C_ROW As Long

    Dim WB As Workbook
    Dim WS As Worksheet
    Dim s As Worksheet
    Dim lngCount As Long
    Dim lngPage As Long
    Dim varView As Variant
    
    Select Case Val(txtLevel.Text)
        Case 1 To 10
        Case Else
            MsgBox "|fffd||fffd||fffd|x|fffd||fffd||fffd||341|u|fffd|P|fffd|`|fffd|P|fffd|O|fffd||153||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
            Exit Sub
    End Select
    
    If optNew.Value Then
    Else
    
        If Len(txtDanrakuCell.Text) = 0 Then
            MsgBox "|fffd||fffd|(|fffd|i|fffd||fffd||fffd||50d||fffd|)|fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
            txtDanrakuCell.SetFocus
            Exit Sub
        End If
        If rlxIsAlphabet(txtDanrakuCell.Text) Then
        Else
            MsgBox "(|fffd|i|fffd||fffd||fffd||50d||fffd|)|fffd||fffd||343|A|fffd||fffd||fffd|t|fffd|@|fffd|x|fffd|b|fffd|g|fffd||153||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
            txtDanrakuCell.SetFocus
            Exit Sub
        End If
        If getAto1(txtDanrakuCell.Text) > ActiveSheet.Columns.count Then
            MsgBox "|fffd||fffd|(|fffd|i|fffd||fffd||fffd||50d||fffd|)|fffd||30d||151||fffd|l|fffd||12d02||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
            txtDanrakuCell.SetFocus
            Exit Sub
        End If
        
        If Len(txtPageCell.Text) = 0 Then
            MsgBox "|fffd||fffd|(|fffd|y|fffd|[|fffd|W)|fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
            txtPageCell.SetFocus
            Exit Sub
        End If
        If rlxIsAlphabet(txtPageCell.Text) Then
        Else
            MsgBox "|fffd||fffd|(|fffd|y|fffd|[|fffd|W)|fffd||343|A|fffd||fffd||fffd|t|fffd|@|fffd|x|fffd|b|fffd|g|fffd||153||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
            txtPageCell.SetFocus
            Exit Sub
        End If
        If getAto1(txtPageCell.Text) > ActiveSheet.Columns.count Then
            MsgBox "|fffd||fffd|(|fffd|y|fffd|[|fffd|W)|fffd||30d||151||fffd|l|fffd||12d02||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
            txtPageCell.SetFocus
            Exit Sub
        End If
        
        
        If getAto1(txtPageCell.Text) = getAto1(txtDanrakuCell.Text) Then
            MsgBox "|fffd|i|fffd||fffd||fffd||50d||fffd||fffd||183|y|fffd|[|fffd|W|fffd||348||642||202||fffd||fffd||242||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
            txtPageCell.SetFocus
            Exit Sub
        End If
        
        
        If Len(txtRow.Text) = 0 Then
            MsgBox "|fffd|s|fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
            txtRow.SetFocus
            Exit Sub
        End If
        If rlxIsNumber(txtRow.Text) Then
        Else
            MsgBox "|fffd|s|fffd||350||fffd||fffd|l|fffd||153||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
            txtRow.SetFocus
            Exit Sub
        End If
        If Val(txtRow.Text) > ActiveSheet.Rows.count Then
            MsgBox "|fffd|s|fffd||30d||151||fffd|l|fffd||12d02||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
            txtRow.SetFocus
            Exit Sub
        End If
    End If
    
    lngPage = 0

    C_PERIOD = " " & String$(300, ".") & " "

    Set WB = ActiveWorkbook
    
    If optNew.Value Then
        
        '|fffd|V|fffd|[|fffd|g|fffd||311||fffd||fffd||743|`|fffd|F|fffd|b|fffd|N
        For Each s In WB.Worksheets
            If s.name = C_NAME Then
                If MsgBox("|fffd|u" & C_NAME & "|fffd|v|fffd|V|fffd|[|fffd|g|fffd||fffd||fffd||fffd||fffd||251||fffd||fffd||742||fffd||fffd||702||fffd||fffd|B|fffd||d3dc||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|H", vbOKCancel + vbQuestion, C_TITLE) <> vbOK Then
                    Exit Sub
                Else
                    '|fffd||fffd||fffd||742||fffd||fffd||fffd||a347||fffd||34d||d3dc|
                    Application.DisplayAlerts = False
                    s.Delete
                    Application.DisplayAlerts = True
                End If
            End If
        Next
        
        C_CONTENT_LIST = C_COLUMN_LIST
        C_CONTENT_PAGE = C_COLUMN_PAGE
        C_ROW = C_START_ROW
    
        Set WS = WB.Worksheets.Add(WB.Worksheets(1))
        WS.name = C_NAME
        WS.Cells(C_HEAD_ROW, C_CONTENT_LIST).Value = C_NAME
        WS.Cells(C_HEAD_ROW, C_CONTENT_PAGE).Value = "|fffd|y|fffd|[|fffd|W"
    Else
        C_CONTENT_LIST = getAto1(txtDanrakuCell.Text)
        C_CONTENT_PAGE = getAto1(txtPageCell.Text)
        C_ROW = txtRow.Text
        Set WS = WB.Worksheets(cboSheet.Text)
    End If
    
    Application.ScreenUpdating = False
    
    lngLevel = Val(txtLevel.Text)
    
    lngPage = 0
    j = C_ROW

    For lngCount = 0 To lstSheets.ListCount - 1
    
        If lstSheets.Selected(lngCount) Then
        
            Dim strSheet As String
            
            strSheet = lstSheets.List(lngCount, 1)
            
            Worksheets(strSheet).Activate
            varView = ActiveWindow.View
            ActiveWindow.View = xlPageBreakPreview
    
            l = Worksheets(strSheet).HPageBreaks.count
            If l <> 0 Then
                ReDim p(1 To l)
                For k = 1 To l
                    p(k) = Worksheets(strSheet).HPageBreaks(k).Location.row
                Next
            End If
            
            lngRow = Worksheets(strSheet).UsedRange.Item(Worksheets(strSheet).UsedRange.count).row
            lngCol = getSectionCol(Worksheets(strSheet))
            If lngCol = 0 Then
                Exit For
            End If
            
'            WS.Cells(j, C_CONTENT_LIST).Value = "<<" & Worksheets(strSheet).Name & ">>"
'            j = j + 1
                        
            For i = 1 To lngRow
            
                strBuf = Worksheets(strSheet).Cells(i, lngCol).Value
                            
                If Worksheets(strSheet).Cells(i, lngCol).IndentLevel < lngLevel Then
                
                    Dim blnAns As Boolean
                    blnAns = False
                    For m = 0 To lngLevel - 1
                        blnAns = blnAns Or rlxHasSectionNo(strBuf, m)
                    Next
                    
                    If blnAns Then

                        
                        If chkPeriod.Value Then
                            WS.Cells(j, C_CONTENT_LIST).Value = Worksheets(strSheet).Cells(i, lngCol).Value & C_PERIOD
                        Else
                            WS.Cells(j, C_CONTENT_LIST).Value = Worksheets(strSheet).Cells(i, lngCol).Value
                        End If
                        WS.Cells(j, C_CONTENT_LIST).IndentLevel = Worksheets(strSheet).Cells(i, lngCol).IndentLevel
                        
                        If l = 0 Then
                            k = 1
                            WS.Cells(j, C_CONTENT_PAGE).Value = k + lngPage
                        Else
                            For k = 1 To UBound(p)
                                If p(k) > i Then
                                    WS.Cells(j, C_CONTENT_PAGE).Value = k + lngPage
                                    Exit For
                                End If
                            Next
                            WS.Cells(j, C_CONTENT_PAGE).Value = k + lngPage
                        End If
                        
                        If chkHyperLink.Value Then
                            WS.Hyperlinks.Add _
                                Anchor:=WS.Cells(j, C_CONTENT_LIST), _
                                Address:="", _
                                SubAddress:="'" & Worksheets(strSheet).name & "'!" & Worksheets(strSheet).Cells(i, lngCol).Address, _
                                TextToDisplay:=WS.Cells(j, C_CONTENT_LIST).Value
                        End If
                        
                        j = j + 1
                        
                    End If
                End If
            
            Next
            lngPage = lngPage + k
            ActiveWindow.View = varView
        
        End If
    Next
    
    If optNew.Value Then
        WS.Columns(C_CONTENT_LIST).ColumnWidth = 70
        WS.Columns(C_CONTENT_PAGE).ColumnWidth = 7
    End If
    
    WS.Activate
    Set WS = Nothing
    
    Application.ScreenUpdating = True
    Unload Me
    
End Sub


Private Function getSectionCol(ByRef WS As Worksheet) As Long
                
    Dim blnFind As Boolean
    Dim strBuf As String
    Dim i As Long
    Dim j As Long
    
    For j = 1 To WS.UsedRange.Item(WS.UsedRange.count).Column
    
        For i = 1 To WS.UsedRange.Item(WS.UsedRange.count).row
        
            strBuf = WS.Cells(i, j).Value
                        
            '|fffd|i|fffd||fffd||fffd||50d||fffd||fffd||fffd||fffd|x|fffd||fffd||fffd|P|fffd|`|fffd|Q|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||fffd||a347|
            If rlxHasSectionNo(strBuf, 0) Or rlxHasSectionNo(strBuf, 1) Then
                blnFind = True
                GoTo pass
            End If
        
        Next
    Next
pass:
    If blnFind Then
        getSectionCol = j
    Else
        getSectionCol = 0
    End If
End Function

Private Sub optEmb_Click()
    Call setEnebled
End Sub

Private Sub optNew_Click()
    Call setEnebled
End Sub

Private Sub spnDanraku_SpinDown()
    txtDanrakuCell.Text = spinColDown(txtDanrakuCell.Text)
End Sub

Private Sub spnDanraku_SpinUp()
    txtDanrakuCell.Text = spinColUp(txtDanrakuCell.Text)
End Sub

Private Sub spnLevel_SpinDown()
    txtLevel.Text = spinDown(txtLevel.Text)
End Sub

Private Sub spnLevel_SpinUp()
    txtLevel.Text = spinUp(txtLevel.Text)
End Sub
Private Function spinUp(ByVal vntValue As Variant) As Variant

    Dim lngValue As Long
    
    lngValue = Val(vntValue)
    lngValue = lngValue + 1
    spinUp = lngValue

End Function

Private Function spinDown(ByVal vntValue As Variant) As Variant

    Dim lngValue As Long
    
    lngValue = Val(vntValue)
    lngValue = lngValue - 1
    If lngValue < 1 Then
        lngValue = 1
    End If
    spinDown = lngValue

End Function

Private Function spinColUp(ByVal vntValue As Variant) As Variant

    Dim lngValue As Long
    
    lngValue = getAto1(vntValue)
    lngValue = lngValue + 1
    If lngValue > ActiveSheet.Columns.count Then
        lngValue = ActiveSheet.Columns.count
    End If
    spinColUp = get1toA(lngValue)

End Function

Private Function spinColDown(ByVal vntValue As Variant) As Variant

    Dim lngValue As Long
    
    lngValue = getAto1(vntValue)
    lngValue = lngValue - 1
    If lngValue < 1 Then
        lngValue = 1
    End If
    spinColDown = get1toA(lngValue)

End Function

Private Sub spnPage_SpinDown()
    txtPageCell.Text = spinColDown(txtPageCell.Text)
End Sub

Private Sub spnPage_SpinUp()
    txtPageCell.Text = spinColUp(txtPageCell.Text)
End Sub

Private Sub spnRow_SpinDown()
    
    txtRow.Text = spinDown(txtRow.Text)

End Sub

Private Sub spnRow_SpinUp()

    txtRow.Text = spinUp(txtRow.Text)

End Sub

Private Sub UserForm_Initialize()

    Dim WS As Worksheet
    Dim i As Long
    Dim j As Long
    j = 1
    For i = 1 To Worksheets.count
    
        If Worksheets(i).visible = xlSheetVisible Then
            cboSheet.AddItem Worksheets(i).name
            lstSheets.AddItem ""
            lstSheets.List(j - 1, 0) = j
            lstSheets.List(j - 1, 1) = Worksheets(i).name
            If ActiveSheet.index = Worksheets(i).index Then
                lstSheets.Selected(j - 1) = True
            End If
            j = j + 1
        End If
        
    Next
    txtLevel.Text = 3
    
    j = 0
    For i = 0 To cboSheet.ListCount - 1
        If cboSheet.List(i) = C_NAME Then
            j = i
            Exit For
        End If
    Next
    cboSheet.ListIndex = j
    
    optNew.Value = True

    txtDanrakuCell.Text = get1toA(C_COLUMN_LIST)
    txtPageCell.Text = get1toA(C_COLUMN_PAGE)
    txtRow.Text = C_START_ROW
    

End Sub
Private Function getAto1(ByVal strCol As String) As Long

    Dim lngCnt As Long
    Dim strBuf As String
    Dim lngret As Long
    Dim i As Long
    
    strCol = UCase(strCol)
    lngCnt = Len(strCol)
    lngret = 0
    
    For i = 0 To lngCnt - 1
        strBuf = Mid$(strCol, lngCnt - i, 1)
        lngret = lngret + (Asc(strBuf) - Asc("A") + 1) * (26 ^ i)
    Next

    getAto1 = lngret

End Function
Private Function get1toA(ByVal lngCol As Long) As String

    Dim strRet As String
    Dim lngAns As Long

    '1|fffd|`26|fffd||317||fffd||50d||fffd||fffd||fffd|0|fffd|`25|fffd||255||3ca||fffd|
    lngCol = lngCol - 1

    Do Until lngCol < 0

        lngAns = (lngCol Mod 26)

        strRet = Chr$(Asc("A") + lngAns) & strRet

        '|fffd|E|fffd|V|fffd|t|fffd|g
        lngCol = Fix(lngCol / 26) - 1

    Loop

    get1toA = strRet

End Function
Sub setEnebled()

    cboSheet.enabled = optEmb.Value
    txtDanrakuCell.enabled = optEmb.Value
    txtPageCell.enabled = optEmb.Value
    txtRow.enabled = optEmb.Value
    spnDanraku.enabled = optEmb.Value
    spnPage.enabled = optEmb.Value
    spnRow.enabled = optEmb.Value
    
End Sub
Attribute VB_Name = "frmCreateFolder"
Attribute VB_Base = "0{202B2A72-2A94-4ACD-BA14-F4D76C9043CC}{9D4B6E50-7ACE-49FE-A7FC-685DE47C5172}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdFolder_Click()
    Dim strFolder As String
    
    strFolder = rlxSelectFolder()
    If strFolder = "" Then
    Else
        txtFolder.Text = strFolder
    End If
    
End Sub

Private Sub cmdRun_Click()

    Dim strFolder As String
    
    strFolder = txtFolder.Text

    If Not rlxIsFolderExists(strFolder) Then
        MsgBox "|fffd|w|fffd||80b3||fffd||a0bd||fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||351||fffd||fffd||742||fffd||fffd||702||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
        Exit Sub
    End If
    
    
    Dim obj As SelectionCreateFolder
    
    Set obj = New SelectionCreateFolder
    
    obj.Folder = strFolder
    obj.Run
    
    Set obj = Nothing
    
    Unload Me

End Sub
Attribute VB_Name = "frmCrossLine"
Attribute VB_Base = "0{B0149522-8BA4-4142-95F9-781578CBD58C}{58CA5477-E8E2-4B81-9B77-AC7673F5C96A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit
Private mResult As VBA.VbMsgBoxResult

Private Sub chkBackColor_Change()

    lblHead.enabled = Not (chkBackColor.Value)
    txtHead.enabled = Not (chkBackColor.Value)
    spnHead.enabled = Not (chkBackColor.Value)

End Sub

Private Sub chkLine_Change()

    lblEven.enabled = Not (chkLine.Value)
    txtCol.enabled = Not (chkLine.Value)
    spnCol.enabled = Not (chkLine.Value)
    
End Sub



Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdInit_Click()

    chkBackColor.Value = False
    lblHead.BackColor = &H50B000
    txtHead.Value = "50"
    
    chkLine.Value = True
    lblEven.BackColor = 0
    txtCol.Value = "1"
    
End Sub

Private Sub cmdOK_Click()

    Dim strFillVisible As String
    Dim strFillColor As String
    Dim strFillTransparency As String
    Dim strLineVisible As String
    Dim strLineColor As String
    Dim strLineWeight As String
    
    Select Case Val(txtHead.Value)
        Case 0 To 100
        Case Else
            MsgBox "|fffd||fffd||fffd||fffd||fffd|x|fffd||342|O|fffd|`|fffd|P|fffd|O|fffd|O|fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
            Exit Sub
    End Select
    
    Select Case Val(txtCol.Value)
        Case 1 To 100
        Case Else
            MsgBox "|fffd||fffd||fffd||315||fffd||fffd||342|P|fffd|`|fffd|P|fffd|O|fffd|O|fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
            Exit Sub
    End Select
    
    If chkBackColor.Value Then
        strFillVisible = "0"
    Else
        strFillVisible = "-1"
    End If
    
    strFillColor = "&H" & Right$("00000000" & Hex(lblHead.BackColor), 8)
    strFillTransparency = txtHead.Value
    
    If chkLine.Value Then
        strLineVisible = "0"
    Else
        strLineVisible = "-1"
    End If
    
    strLineColor = "&H" & Right$("00000000" & Hex(lblEven.BackColor), 8)
    strLineWeight = txtCol.Value
    
    Call setCrossLineSetting(strFillVisible, strFillColor, strFillTransparency, strLineVisible, strLineColor, strLineWeight)

    Unload Me
End Sub


Private Sub CommandButton1_Click()

End Sub

Private Sub lblHead_Click()

    Dim lngColor As Long
    Dim result As VbMsgBoxResult


    lngColor = lblHead.BackColor

'    result = rlxGetColorDlg(lngColor)
    result = frmColor.Start(lngColor)

    If result = vbOK Then
'    If result > 0 Then
        lblHead.BackColor = lngColor
    End If


End Sub

Private Sub lblEven_Click()

    Dim lngColor As Long
    Dim result As VbMsgBoxResult


    lngColor = lblEven.BackColor

'    result = rlxGetColorDlg(lngColor)
    result = frmColor.Start(lngColor)

    If result = vbOK Then
'    If result > 0 Then
        lblEven.BackColor = lngColor
    End If

End Sub

Private Sub spnCol_SpinDown()
    txtCol.Text = spinDown2(txtCol.Text)
End Sub

Private Sub spnCol_SpinUp()
    txtCol.Text = spinUp2(txtCol.Text)
End Sub

Private Sub spnHead_SpinDown()
    txtHead.Text = spinDown1(txtHead.Text)
End Sub

Private Sub spnHead_SpinUp()
    txtHead.Text = spinUp1(txtHead.Text)
End Sub
Private Function spinUp1(ByVal vntValue As Variant) As Variant

    Dim lngValue As Long

    lngValue = Val(vntValue)
    lngValue = lngValue + 5
    If lngValue > 100 Then
        lngValue = 100
    End If
    spinUp1 = lngValue

End Function

Private Function spinDown1(ByVal vntValue As Variant) As Variant

    Dim lngValue As Long

    lngValue = Val(vntValue)
    lngValue = lngValue - 5
    If lngValue < 0 Then
        lngValue = 0
    End If
    spinDown1 = lngValue

End Function
Private Function spinUp2(ByVal vntValue As Variant) As Variant

    Dim lngValue As Single

    lngValue = Val(vntValue)
    lngValue = lngValue + 0.5
    If lngValue > 100 Then
        lngValue = 100
    End If
    spinUp2 = lngValue

End Function

Private Function spinDown2(ByVal vntValue As Variant) As Variant

    Dim lngValue As Single

    lngValue = Val(vntValue)
    lngValue = lngValue - 0.5
    If lngValue < 1 Then
        lngValue = 1
    End If
    spinDown2 = lngValue

End Function

Private Sub UserForm_Initialize()

    Dim lngFillVisible As Long
    Dim lngFillColor As Long
    Dim dblFillTransparency As Double
    Dim lngLineVisible As Long
    Dim lngLineColor As Long
    Dim sngLineWeight As Single
    Dim strOnAction As String

    Call getCrossLineSetting(lngFillVisible, lngFillColor, dblFillTransparency, lngLineVisible, lngLineColor, sngLineWeight, strOnAction)
    
    If lngFillVisible Then
        chkBackColor.Value = False
    Else
        chkBackColor.Value = True
    End If
    
    lblHead.BackColor = lngFillColor
    
    txtHead.Value = Int(dblFillTransparency)
    
    If lngLineVisible Then
        chkLine.Value = False
    Else
        chkLine.Value = True
    End If
    
    lblEven.BackColor = lngLineColor
    
    txtCol.Value = sngLineWeight
    
End Sub
Attribute VB_Name = "frmDoc"
Attribute VB_Base = "0{653BE4EA-3D30-4C53-82CE-858E61EC0610}{2179AE32-E649-4100-80B4-3CD704977ABB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub chkSize_Click()
    txtCol.enabled = chkSize.Value
'    txtRow.enabled = chkSize.Value
End Sub

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdOK_Click()
    
    If Not IsNumeric(txtFont.Value) Then
        MsgBox "|fffd|t|fffd|H|fffd||fffd||fffd|g|fffd|T|fffd|C|fffd|Y|fffd||250||fffd||fffd|l|fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
        Exit Sub
    End If
    
    If chkSize.Value Then
        If Not IsNumeric(txtCol.Value) Then
            MsgBox "|fffd||fffd||315||fffd||fffd||250||fffd||fffd|l|fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
            Exit Sub
        End If
'        If Not IsNumeric(txtRow.Value) Then
'            MsgBox "|fffd|s|fffd||30d||fffd||fffd||fffd||fffd||250||fffd||fffd|l|fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
'            Exit Sub
'        End If
    End If

    SaveSetting C_TITLE, "FormatCell", "Size", chkSize.Value
    SaveSetting C_TITLE, "FormatCell", "Bunrui", optBunrui1.Value
    SaveSetting C_TITLE, "FormatCell", "Font", cmbFont.Text
    SaveSetting C_TITLE, "FormatCell", "Point", txtFont.Value
    SaveSetting C_TITLE, "FormatCell", "Col", txtCol.Value
'    SaveSetting C_TITLE, "FormatCell", "Row", txtRow.Value
    Unload Me

End Sub

Private Sub txtCol_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
        Case Asc("0") To Asc("9"), Asc(".")
        Case Else
            KeyAscii = 0
    End Select
End Sub

Private Sub txtFont_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)

    Select Case KeyAscii
        Case Asc("0") To Asc("9"), Asc(".")
        Case Else
            KeyAscii = 0
    End Select

End Sub

Private Sub txtRow_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
        Case Asc("0") To Asc("9"), Asc(".")
        Case Else
            KeyAscii = 0
    End Select
End Sub

Private Sub UserForm_Initialize()

    Dim strFont As String
    Dim pos As Long
    Dim i As Long
    Dim blnNormal As Boolean
    
    If GetSetting(C_TITLE, "FormatCell", "Bunrui", True) Then
        optBunrui1.Value = True
        optBunrui2.Value = False
    Else
        optBunrui1.Value = False
        optBunrui2.Value = True
    End If
    strFont = GetSetting(C_TITLE, "FormatCell", "Font", "|fffd|l|fffd|r |fffd|S|fffd|V|fffd|b|fffd|N")
    txtFont.Value = GetSetting(C_TITLE, "FormatCell", "Point", "9")
    txtCol.Value = GetSetting(C_TITLE, "FormatCell", "Col", "8.5")
'    txtRow.Value = GetSetting(C_TITLE, "FormatCell", "Row", "11.25")
    chkSize.Value = GetSetting(C_TITLE, "FormatCell", "Size", False)
    txtCol.enabled = chkSize.Value
'    txtRow.enabled = chkSize.Value

    With Application.CommandBars("Formatting").Controls(1)
        For i = 1 To .ListCount
            cmbFont.AddItem .List(i)
            If strFont = .List(i) Then
                pos = i - 1
            End If
        Next i
    End With
    cmbFont.ListIndex = pos
    
End Sub
Attribute VB_Name = "frmEdit"
Attribute VB_Base = "0{AD8AD6DE-4AF4-4D96-B55D-4D8D714134BB}{53A62B2C-5AD9-48C3-98B8-262AAE35DC6B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private mblnArrowKeyFlg As Boolean
'Private mblnValue  As Boolean
Private Sub cmbFont_Change()

    txtEdit.Font.name = cmbFont.Text

End Sub

Private Sub cmbSize_Change()
    txtEdit.Font.Size = Val(cmbSize.Text)
End Sub

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdFormatSql_Click()

    txtEdit.Text = rlxFormatSql(txtEdit.Text)
    txtEdit.SelStart = Len(frmEdit.txtEdit.Text)
    txtEdit.SetFocus
    txtEdit.SelStart = 0
    
End Sub



Private Sub cmdOK_Click()
    
    On Error Resume Next
    err.Clear
    ActiveCell.Formula = Replace(txtEdit.Text, vbCrLf, vbLf)
    
    If err.Number = 0 Then
        Unload Me
    Else
        MsgBox "|fffd||fffd||fffd||310||752||fffd||24e||fffd||fffd|s|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd||94|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
    End If

End Sub

Private Sub cmdReload_Click()

    On Error GoTo e
    err.Clear
    ActiveCell.Formula = Replace(txtEdit.Text, vbCrLf, vbLf)
    
    txtEdit.Text = Replace(Replace(ActiveCell.Formula, vbCrLf, vbLf), vbLf, vbCrLf)
    txtValue.Text = Replace(Replace(ActiveCell.Value, vbCrLf, vbLf), vbLf, vbCrLf)
    
'    optValue.Value = True
    
    Exit Sub
e:
    MsgBox "|fffd||fffd||fffd||310||752||fffd||24e||fffd||fffd|s|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd||94|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
    txtValue.Text = C_ERROR
End Sub

Private Sub cmdUTF8_Click()
    
    Dim bytBuf() As Byte
    Dim utf8 As UTF8Encoding
    
    Set utf8 = New UTF8Encoding
    
    bytBuf = strConv(txtEdit.Text, vbFromUnicode)
    txtEdit.Text = utf8.GetString(bytBuf)

    Set utf8 = Nothing

End Sub



Private Sub optFormura_Click()
    Call changeValue
End Sub

Private Sub optValue_Click()
    Call changeValue
End Sub

Private Sub txtEdit_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    Cancel = mblnArrowKeyFlg
End Sub

Private Sub txtEdit_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
     Select Case KeyCode
        Case 37 To 40
            mblnArrowKeyFlg = True
        Case Else
            mblnArrowKeyFlg = False
    End Select

End Sub

Private Sub txtEdit_KeyUp(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    mblnArrowKeyFlg = False
End Sub

Private Sub UserForm_Initialize()

    mblnArrowKeyFlg = False
    
    Dim strFont As String
    Dim strSize As String
    
    strFont = GetSetting(C_TITLE, "Edit", "Font", "|fffd|l|fffd|r |fffd|S|fffd|V|fffd|b|fffd|N")
    strSize = GetSetting(C_TITLE, "Edit", "Size", "12")
    
    Dim i As Long
    Dim pos As Long
    
    With Application.CommandBars("Formatting").Controls(1)
        For i = 1 To .ListCount
            cmbFont.AddItem .List(i)
            If strFont = .List(i) Then
                pos = i - 1
            End If
        Next i
    End With

    cmbFont.ListIndex = pos
    txtEdit.Font.name = strFont
    
    cmbSize.AddItem "6"
    cmbSize.AddItem "8"
    cmbSize.AddItem "9"
    cmbSize.AddItem "10"
    cmbSize.AddItem "11"
    cmbSize.AddItem "12"
    cmbSize.AddItem "14"
    cmbSize.AddItem "16"
    cmbSize.AddItem "18"
    cmbSize.AddItem "20"
    cmbSize.AddItem "22"
    cmbSize.AddItem "24"
    cmbSize.AddItem "26"
    cmbSize.AddItem "28"
    cmbSize.AddItem "36"
    cmbSize.AddItem "48"
    cmbSize.AddItem "72"
    
    cmbSize.Text = strSize
    
    txtEdit.Text = String$(100, vbCrLf)
    txtEdit.SelStart = Len(frmEdit.txtEdit.Text)
    
    txtFormura.Text = Replace(Replace(ActiveCell.Formula, vbCrLf, vbLf), vbLf, vbCrLf)
    
    err.Clear
    On Error Resume Next
    txtValue.Text = Replace(Replace(ActiveCell.Value, vbCrLf, vbLf), vbLf, vbCrLf)
    If err.Number <> 0 Then
        txtValue.Text = C_ERROR
    End If
    
    txtEdit.Text = txtFormura.Text
    txtEdit.SelStart = 0
    
    optFormura.Value = True
    
End Sub

Private Sub UserForm_Terminate()

    Dim strSize As String

    SaveSetting C_TITLE, "Edit", "Font", cmbFont.Text
    
    strSize = cmbSize.Text
    If Val(strSize) = 0 Then
        txtEdit.Font.Size = 12
    Else
        txtEdit.Font.Size = Val(strSize)
    End If
    SaveSetting C_TITLE, "Edit", "Size", strSize

End Sub
Private Sub changeValue()
    Dim r As Range
    
    If optValue.Value Then
        txtEdit.BackColor = &H8000000F
        txtFormura.Text = txtEdit.Text
        txtEdit.Text = txtValue.Text
'        txtEdit.Locked = True
'        cmdFormatSql.enabled = False
        cmdReload.enabled = False
        cmdOk.enabled = False
    Else
        txtEdit.BackColor = vbWhite
        txtEdit.Text = txtFormura.Text
'        txtEdit.Locked = False
'        cmdFormatSql.enabled = True
        cmdReload.enabled = True
        cmdOk.enabled = True
    End If
    
'    txtEdit.SetFocus
'    SendKeys "^A"
    txtEdit.SelStart = Len(frmEdit.txtEdit.Text)
    txtEdit.SetFocus
    txtEdit.SelStart = 0
'    txtEdit.SelLength = Len(frmEdit.txtEdit.Text)

End Sub
Attribute VB_Name = "frmEditEx"
Attribute VB_Base = "0{02BB21E3-BAA2-49F8-A56A-2ACAD29F09C3}{2DCBC1C2-C643-4AC7-B4AC-BE26E096D397}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cboEncode_Change()
    If cboEncode.Text = C_UTF16 Then
        chkBOM.enabled = True
    Else
        chkBOM.Value = False
        chkBOM.enabled = False
    End If
End Sub

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdOK_Click()

    Dim strEditor As String
    Dim strEncode As String
    Dim blnBOM As Boolean

    strEditor = txtEditor.Text
    strEncode = cboEncode.Text
    If strEncode = C_UTF16 Then
        blnBOM = chkBOM.Value
    Else
        blnBOM = False
    End If

    SaveSetting C_TITLE, "EditEx", "Editor", strEditor
    SaveSetting C_TITLE, "EditEx", "Encode", strEncode
    SaveSetting C_TITLE, "EditEx", "BOM", blnBOM
    
    Unload Me
End Sub

Private Sub UserForm_Initialize()

    Dim strEditor As String
    Dim strEncode As String
    Dim blnBOM As Boolean
    Dim FS As Object
    Dim strNotepad As String

    Set FS = CreateObject("Scripting.FileSystemObject")
    strNotepad = rlxAddFileSeparator(FS.GetSpecialFolder(0)) & "notepad.exe"
    Set FS = Nothing

    strEditor = GetSetting(C_TITLE, "EditEx", "Editor", strNotepad)
    strEncode = GetSetting(C_TITLE, "EditEx", "Encode", C_SJIS)
    blnBOM = GetSetting(C_TITLE, "EditEx", "BOM", False)
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||30f||a347||fffd||1c2||751||582||fffd||fffd||fffd|
    If strEncode = C_SJIS_OLD Then
        strEncode = C_SJIS
    End If
    
    cboEncode.AddItem C_SJIS
    cboEncode.AddItem C_UTF8
    cboEncode.AddItem C_UTF16
    
    txtEditor.Text = strEditor
    cboEncode.Text = strEncode
    chkBOM.Value = blnBOM
    
    Call cboEncode_Change
    
End Sub

Attribute VB_Name = "frmElectoric"
Attribute VB_Base = "0{5CE5A6C1-B817-40AE-AC01-641BEE8C3B26}{6B6B3B48-BB64-4219-B5A1-014BC1FC7032}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit


Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdOK_Click()

    SaveSetting C_TITLE, "electoric", "String", txtString.Value
    Unload Me
    
End Sub


Private Sub UserForm_Initialize()

    txtString.Value = GetSetting(C_TITLE, "electoric", "String", "")

End Sub
Attribute VB_Name = "frmFavorite"
Attribute VB_Base = "0{63F41355-E461-4DA6-88C4-FEB9567F00B9}{39984976-6F3E-40C8-A905-BA679AEFC030}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Private Const C_FILE_NO As Long = 0
Private Const C_FILE_NAME As Long = 1
Private Const C_PATH_NAME As Long = 2
Private Const C_ORIGINAL As Long = 3

Private Const C_UP As Long = 1
Private Const C_DOWN As Long = 2



Private Sub cmdDel_Click()

    Dim i As Long
    Dim lngLast As Long
    
    lngLast = lstFavorite.ListIndex
   
    For i = lstFavorite.ListCount - 1 To 0 Step -1
        If lstFavorite.Selected(i) Then
            lstFavorite.RemoveItem i
'            lngLast = i
'            Exit For
        End If
    Next

    setEnabled
    
    If lngLast > lstFavorite.ListCount - 1 Then
        lngLast = lstFavorite.ListCount - 1
    End If

    If lstFavorite.ListCount > 0 Then
        lstFavorite.Selected(lngLast) = True
    End If
End Sub

Private Sub cmdReadOnly_Click()

    Dim strFile As String
    Dim lngCnt As Long
    
    For lngCnt = 0 To lstFavorite.ListCount - 1
    
        If lstFavorite.Selected(lngCnt) Then
    
            strFile = lstFavorite.List(lngCnt, C_ORIGINAL)
            
            If Not rlxIsFileExists(strFile) Then
                MsgBox "|fffd|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
            Else
                On Error Resume Next
                err.Clear
                Call Workbooks.Open(filename:=strFile, ReadOnly:=True)
                AppActivate Application.Caption
                If err.Number <> 0 Then
                    MsgBox "|fffd|u|fffd|b|fffd|N|fffd||fffd||fffd|J|fffd||fffd||fffd||702||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
                End If
'                DoEvents
            End If
        End If
    Next
    Unload Me
    
End Sub

Private Sub cmdSave_Click()

    Unload Me
    
End Sub

Private Sub cmdSelect_Click()

    Dim strBook As String
    Dim lngCnt As Long
    
    For lngCnt = 0 To lstFavorite.ListCount - 1
    
        If lstFavorite.Selected(lngCnt) Then
    
            strBook = lstFavorite.List(lngCnt, C_ORIGINAL)
            
            If Not rlxIsFileExists(strBook) Then
                MsgBox "|fffd|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
            Else
                On Error Resume Next
                err.Clear
                Workbooks.Open filename:=strBook
                AppActivate Application.Caption
                If err.Number <> 0 Then
                    MsgBox "|fffd|u|fffd|b|fffd|N|fffd||fffd||fffd|J|fffd||fffd||fffd||702||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
                End If
'                DoEvents
            End If
        End If
     
    Next
     
    Unload Me

End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||248||693||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdUp_Click()
     Call moveList(C_UP)
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd||248||693||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdDown_Click()
     Call moveList(C_DOWN)
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd||693||fffd||fffd||fffd||fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub moveList(ByVal lngMode As Long)

    Dim lngCnt As Long
    Dim lngCmp As Long
    
    Dim varTmp As Variant

    Dim lngStart As Long
    Dim lngEnd As Long
    Dim lngInc As Long

    '|fffd|P|fffd||82||202||fffd|s|fffd|v
    If lstFavorite.ListCount <= 1 Then
        Exit Sub
    End If

    Select Case lngMode
        Case C_UP
            lngStart = 0
            lngEnd = lstFavorite.ListCount - 1
            lngInc = 1
        Case C_DOWN
            lngStart = lstFavorite.ListCount - 1
            lngEnd = 0
            lngInc = -1
    End Select

    For lngCnt = lngStart To lngEnd Step lngInc
    
        If lstFavorite.Selected(lngCnt) Then
            '|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd|s|fffd||fffd||fffd||fffd||fffd||142||24a|J|fffd|n|fffd|s|fffd||30f||a347||fffd||693||fffd||fffd|s|fffd||fffd|
            If lngCnt = lngStart Then
                Exit For
            End If
            
            lngCmp = lngCnt + lngInc * -1
            
            Dim i As Long
            For i = C_FILE_NAME To C_ORIGINAL
                varTmp = lstFavorite.List(lngCnt, i)
                lstFavorite.List(lngCnt, i) = lstFavorite.List(lngCmp, i)
                lstFavorite.List(lngCmp, i) = varTmp
            Next
            
            lstFavorite.Selected(lngCnt) = False
            lstFavorite.Selected(lngCnt + lngInc * -1) = True
        End If
    
    Next

End Sub



Private Sub lstFavorite_Change()
    If lstFavorite.ListIndex = -1 Then
        Exit Sub
    End If
    lstFavorite.ControlTipText = lstFavorite.List(lstFavorite.ListIndex, C_ORIGINAL)
End Sub

Private Sub lstFavorite_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call cmdSelect_Click
End Sub

Private Sub UserForm_Initialize()

    Dim strList() As String
    Dim strResult As String
    Dim i As Long
    Dim lngMax As Long
    Dim blnFind As Boolean
    
    strResult = rlxGetSetting(C_TITLE, "Favirite", "FileList", "")
    strList = Split(strResult, vbTab)

    lngMax = UBound(strList)

    For i = 0 To lngMax
        lstFavorite.AddItem ""
        lstFavorite.List(i, C_FILE_NO) = i + 1
        lstFavorite.List(i, C_FILE_NAME) = rlxGetFullpathFromFileName(strList(i))
        lstFavorite.List(i, C_PATH_NAME) = rlxGetFullpathFromPathName(strList(i))
        lstFavorite.List(i, C_ORIGINAL) = strList(i)
    Next
    
    setEnabled
    
    blnFind = False

    If ActiveWorkbook Is Nothing Then
    Else
        For i = 0 To lstFavorite.ListCount - 1
            If LCase(ActiveWorkbook.FullName) = LCase(lstFavorite.List(i, C_ORIGINAL)) Then
                lstFavorite.Selected(i) = True
                blnFind = True
                Exit For
            End If
        Next
    End If
    If blnFind = False Then
        If lstFavorite.ListCount > 0 Then
            lstFavorite.Selected(0) = True
        End If
    End If
    
    cmdDel.Caption = "|fffd||fffd||fffd|C|fffd||253||fffd||fffd||fffd|" & vbCrLf & "|fffd||fffd||fffd||fffd||d3dc|"
  '  cmdAdd.Caption = "|fffd||fffd||fffd||742||303|u|fffd|b|fffd|N|fffd||fffd|" & vbCrLf & "|fffd||fffd||fffd|C|fffd||253||fffd||fffd||fffd||252||1c9||fffd|"
    
    Me.Top = (Application.Top + 20)
    Me.Left = (Application.Left + 20)

End Sub
Private Sub setEnabled()
    Select Case lstFavorite.ListCount
        Case 0
            cmdSelect.enabled = False
            cmdReadOnly.enabled = False
            cmdUp.enabled = False
            cmdDown.enabled = False
            cmdDel.enabled = False
        Case 1
            cmdUp.enabled = False
            cmdDown.enabled = False
            If lstFavorite.ListIndex = -1 Then
                lstFavorite.ListIndex = 0
            End If
        Case Else
            If lstFavorite.ListIndex = -1 Then
                lstFavorite.ListIndex = 0
            End If
    End Select


End Sub

Private Sub UserForm_Terminate()

    Dim strList() As String
    Dim strBuf As String
    Dim i As Long
    
    strBuf = ""

    For i = 0 To lstFavorite.ListCount - 1
        If Len(strBuf) = 0 Then
            strBuf = lstFavorite.List(i, C_ORIGINAL)
        Else
            strBuf = strBuf & vbTab & lstFavorite.List(i, C_ORIGINAL)
        End If
    Next
    
    rlxSaveSetting C_TITLE, "Favirite", "FileList", strBuf
    
End Sub
Attribute VB_Name = "frmFileList"
Attribute VB_Base = "0{BDC0ED33-195C-44DA-A04D-DECD40751445}{6DB31832-ED3B-48FB-BC80-90C5E1ACD189}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Dim mblnCancel As Boolean
Dim mMm As MacroManager


Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdFolder_Click()

    Dim strFile As String

    '|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||64fe|
    strFile = rlxSelectFolder()
    
    If Trim(strFile) <> "" Then
        txtFolder.Text = strFile
    End If
    
    
End Sub

Private Sub cmdRun_Click()
    
    Dim lngRow As Long
    Dim lngCol As Long
    Dim filename As String
    Dim objFs As Object
    
    If ActiveCell Is Nothing Then
        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|Z|fffd||fffd||fffd||fffd||fffd||742||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
    
    '|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||64fe|
    filename = txtFolder.Text
    If filename = "" Then
        MsgBox "|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||a5d7||fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation, "|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||a5d7||fffd||64fe|"
        txtFolder.SetFocus
        Exit Sub
    End If
    
    '|fffd|`|fffd|F|fffd|b|fffd|N|fffd||fffd||fffd||1c2||a0a9||fffd|P|fffd||82||142||fffd||fffd||fffd||fffd||342||fffd||fffd||fffd||102||fffd||fffd||202||fffd||fffd||a347|
    If chkFile.Value Or chkFolder.Value Or chkFileSize.Value Or chkDate.Value Then
    Else
        MsgBox "|fffd|o|fffd||34d||fffd||fffd||682||fffd||fffd|P|fffd||88||20f||fffd|I|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation, "|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||a5d7||fffd||64fe|"
        chkFile.SetFocus
        Exit Sub
    End If
    
    Set objFs = CreateObject("Scripting.FileSystemObject")
    
    Dim lngFCnt As Long
    
    Set mMm = New MacroManager
    Set mMm.Form = Me
    
    mMm.Disable
    mMm.DispGuidance "|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||310||fffd||fffd||fffd||fffd|J|fffd|E|fffd||fffd||fffd|g|fffd||fffd||fffd||102||fffd||fffd||702||fffd|..."
    
    rlxGetFilesCount objFs, filename, lngFCnt, True, chkFolder.Value, chkSubFolder.Value
    
    mMm.StartGauge lngFCnt
    
    lngRow = ActiveCell.row
    lngCol = ActiveCell.Column
    
    Dim lngCount As Long
    
    On Error Resume Next
    
    FileDisp objFs, filename, lngRow, lngCol, lngCount, lngFCnt
    
    Set mMm = Nothing
    Select Case err.Number
    Case 75, 76
        MsgBox "|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd||fffd|B", vbExclamation, "|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||a5d7||fffd||64fe|"
        txtFolder.SetFocus
        Exit Sub
    End Select
    
    Unload Me
    
End Sub


Private Sub FileDisp(objFs, strPath, lngRow, lngCol, lngCount, lngMax)

    Dim objfld As Object
    Dim objfl As Object
    Dim objSub As Object
    Dim colFiles As Collection
    Dim colFolders As Collection
    
    Dim lngCol2 As Long

    Set objfld = objFs.GetFolder(strPath)
    Set colFiles = New Collection
    
    '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||64fe|
    For Each objfl In objfld.files
        DoEvents
        If mblnCancel Then
            Exit Sub
        End If
        colFiles.Add objfl, objfl.name
    Next
    
    '|fffd|R|fffd||fffd||fffd|N|fffd|V|fffd||fffd||fffd||fffd||fffd||303|\|fffd|[|fffd|g
    rlxSortCollection colFiles
    
    For Each objfl In colFiles
        DoEvents
        If mblnCancel Then
            Exit Sub
        End If
        lngCol2 = lngCol
        If chkFile.Value Then
            Cells(lngRow, lngCol2).NumberFormatLocal = "@"
            Cells(lngRow, lngCol2) = objfl.name
            lngCol2 = lngCol2 + 1
        End If
        If chkFolder.Value Then
            Cells(lngRow, lngCol2).NumberFormatLocal = "@"
            Cells(lngRow, lngCol2) = objfl.ParentFolder.Path
            lngCol2 = lngCol2 + 1
        End If
        If chkFileSize.Value Then
            Cells(lngRow, lngCol2) = Format(objfl.Size, "#,##0")
            lngCol2 = lngCol2 + 1
        End If
        If chkDate.Value Then
            Cells(lngRow, lngCol2).NumberFormatLocal = "@"
            Cells(lngRow, lngCol2) = Format(objfl.DateLastModified, "yyyy/mm/dd hh:mm:ss")
            lngCol2 = lngCol2 + 1
        End If
        lngRow = lngRow + 1
        lngCount = lngCount + 1
    Next
    Set colFiles = Nothing
    
    
    Set colFolders = New Collection

    For Each objSub In objfld.SubFolders
        DoEvents
        If mblnCancel Then
            Exit Sub
        End If
        colFolders.Add objSub, objSub.name
    Next
    
    '|fffd|R|fffd||fffd||fffd|N|fffd|V|fffd||fffd||fffd||fffd||fffd||303|\|fffd|[|fffd|g
    rlxSortCollection colFolders
    
    For Each objSub In colFolders
        DoEvents
        If mblnCancel Then
            Exit Sub
        End If
        '|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||64fe||fffd||fffd||fffd||fffd|
        If chkFolders.Value Then
            lngCol2 = lngCol
            If chkFile.Value Then
                Cells(lngRow, lngCol2).NumberFormatLocal = "@"
                Cells(lngRow, lngCol2) = objSub.name
                lngCol2 = lngCol2 + 1
            End If
            If chkFolder.Value Then
                Cells(lngRow, lngCol2).NumberFormatLocal = "@"
                Cells(lngRow, lngCol2) = objSub.ParentFolder.Path
                lngCol2 = lngCol2 + 1
            End If
            If chkFileSize.Value Then
                Cells(lngRow, lngCol2) = Format(objSub.Size, "#,##0")
                lngCol2 = lngCol2 + 1
            End If
            If chkDate.Value Then
                Cells(lngRow, lngCol2).NumberFormatLocal = "@"
                Cells(lngRow, lngCol2) = Format(objSub.DateLastModified, "yyyy/mm/dd hh:mm:ss")
                lngCol2 = lngCol2 + 1
            End If
            lngRow = lngRow + 1
            lngCount = lngCount + 1
        End If
        '|fffd|T|fffd|u|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If chkSubFolder.Value Then
            FileDisp objFs, objSub.Path, lngRow, lngCol, lngCount, lngMax
        End If
    Next
    Set colFolders = Nothing
    
    mMm.DisplayGauge lngCount

End Sub

Private Sub UserForm_Initialize()
    lblGauge.visible = False
    mblnCancel = False
End Sub

Private Sub UserForm_Terminate()
    mblnCancel = True
End Sub
Attribute VB_Name = "frmFilePaste"
Attribute VB_Base = "0{CDF2760B-9A46-4093-8B53-65B535E69212}{DD17EE13-C7DA-4441-992E-F4D945D83145}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private mResult As VbMsgBoxResult




Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdDisp_Click()
    Call dispPicture
End Sub

Private Sub cmdFile_Click()
   Dim strFile As String


    strFile = Application.GetOpenFilename("|fffd|t|fffd|@|fffd|C|fffd||fffd|(*.*),(*.*)", , "|fffd||645c||fffd|t|fffd|@|fffd|C|fffd||fffd|", , False)
    If strFile = "False" Then
        '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd|w|fffd||80b3||fffd||fffd||202||fffd||fffd||fffd||fffd||fffd||fffd||a347|
        Exit Sub
    End If
    
    txtFile.Text = strFile
    Call dispPicture
    
End Sub

Private Sub cmdOK_Click()
    
    Dim strSize As String
    Dim strColor As String
    Dim strLine As String
    
    mResult = vbOK
    Unload Me
    
    SaveSetting C_TITLE, "FilePaste", "fileName", txtFile.Text
    SaveSetting C_TITLE, "FilePaste", "ratio", txtRatio.Text
    
End Sub





Private Sub spnRatio_SpinDown()
    txtRatio.Text = spinDown(txtRatio.Text)
End Sub

Private Sub spnRatio_SpinUp()
    txtRatio.Text = spinUp(txtRatio.Text)
End Sub

Private Sub UserForm_Initialize()

    Dim strFile As String

    strFile = GetSetting(C_TITLE, "FilePaste", "fileName", "")
    txtRatio.Text = GetSetting(C_TITLE, "FilePaste", "ratio", "100")
    
    txtFile.Text = strFile
    
    Call dispPicture

End Sub
Private Sub dispPicture()
    
    On Error GoTo err
    imgPic.Picture = LoadPicture(txtFile.Text)
    
    lblPic.visible = False
    lblPic.Caption = ""
    Exit Sub
err:
    lblPic.visible = True
    lblPic.Caption = "BMP/JPEG/GIF|fffd||20a|O|fffd||343|v|fffd||fffd||fffd|r|fffd||fffd||fffd|[|fffd|\|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
    imgPic.Picture = LoadPicture()
End Sub

Private Function spinUp(ByVal vntValue As Variant) As Variant

    Dim lngValue As Long
    
    lngValue = Val(vntValue)
    lngValue = lngValue + 5
    If lngValue > 100 Then
        lngValue = 100
    End If
    spinUp = lngValue

End Function

Private Function spinDown(ByVal vntValue As Variant) As Variant

    Dim lngValue As Long
    
    lngValue = Val(vntValue)
    lngValue = lngValue - 5
    If lngValue < 1 Then
        lngValue = 1
    End If
    spinDown = lngValue

End Function
Attribute VB_Name = "frmFormatSql"
Attribute VB_Base = "0{8E70F826-CF3F-4CDF-8818-DFDD672214E7}{078D7231-46F5-419B-9FD0-52EAD2FB723E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdOK_Click()

    SaveSetting C_TITLE, "FormatSql", "RightComma", chkRightComma.Value
    SaveSetting C_TITLE, "FormatSql", "UpperCase", chkUpperCase.Value
    Unload Me
    
End Sub

Private Sub UserForm_Initialize()

    chkRightComma.Value = GetSetting(C_TITLE, "FormatSql", "RightComma", False)
    chkUpperCase.Value = GetSetting(C_TITLE, "FormatSql", "UpperCase", False)
    
End Sub
Attribute VB_Name = "frmFusen"
Attribute VB_Base = "0{96D471FE-8706-4C05-A1E4-1564D5E84D1C}{F921C40B-5347-440A-8115-A2215DF4950C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdHelp_Click()
    If Val(Application.Version) >= C_EXCEL_VERSION_2013 Then
    
        If MsgBox("|fffd|C|fffd||fffd||fffd|^|fffd|[|fffd|l|fffd|b|fffd|g|fffd||250||691||fffd||fffd||fffd||fffd||702||fffd||fffd|B|fffd||fffd||b0b5||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|H", vbOKCancel + vbQuestion, C_TITLE) <> vbOK Then
            Exit Sub
        End If
        
        Dim WSh As Object
        
        Set WSh = CreateObject("WScript.Shell")
        
        Call WSh.Run(C_STAMP_URL)
        
        Set WSh = Nothing
    
    Else
        frmHelp.Start "format", vbModal
    End If
End Sub

Private Sub cmdOK_Click()
    
    Dim strText As String
    Dim strTag As String
    Dim blnPrint As Boolean
    
    Dim strWidth  As String
    Dim strHeight  As String
    
    Dim strFormat As String
    Dim strUserDate  As String
    Dim strFusenDate As String
    
    Dim strFont  As String
    Dim strSize  As String
    
    Dim strHorizontalAnchor  As String
    Dim strVerticalAnchor  As String
    
    Dim blnAutoSize  As Boolean
    Dim blnOverFlow As Boolean
    Dim blnWordWrap As Boolean
    
    
    strText = txtText.Text
    strTag = txtTag.Text
    blnPrint = chkPrint.Value
    
    strWidth = txtWidth.Text
    strHeight = txtHeight.Text
    
    strFormat = txtFormat.Text
    strUserDate = txtUserDate.Text
    
    Select Case True
        Case optSystemDate.Value
            strFusenDate = C_FUSEN_DATE_SYSTEM
        Case Else
            strFusenDate = C_FUSEN_DATE_USER
    End Select
    
    strFont = cboFont.Text
    strSize = txtSize.Text
    
    strHorizontalAnchor = cboHorizontalAnchor.ListIndex
    strVerticalAnchor = cboVerticalAnchor.ListIndex
    
    blnAutoSize = chkAutoSize.Value
    blnOverFlow = chkOverflow.Value
    blnWordWrap = chkWordWrap.Value
    
    If strFusenDate = C_FUSEN_DATE_USER Then
        If IsDate(strUserDate) Then
        Else
            MsgBox "|fffd|w|fffd||fffd||fffd||fffd|t|fffd||242||357|L|fffd||fffd||fffd||213||fffd||fffd|t|fffd||fffd||fffd||153||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation + vbOKOnly, C_TITLE
            txtUserDate.SetFocus
            Exit Sub
        End If
    End If
    
    If IsNumeric(strHeight) Then
    Else
        MsgBox "|fffd||fffd||fffd||fffd||fffd||242||350||fffd||fffd|l|fffd||fffd||fffd||153||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation + vbOKOnly, C_TITLE
        txtHeight.SetFocus
        Exit Sub
    End If
    
    If CDbl(strHeight) < 0 Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||342|O|fffd||20f||fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation + vbOKOnly, C_TITLE
        txtHeight.SetFocus
        Exit Sub
    End If
    
    If IsNumeric(strWidth) Then
    Else
        MsgBox "|fffd||fffd||fffd||242||350||fffd||fffd|l|fffd||fffd||fffd||153||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation + vbOKOnly, C_TITLE
        txtWidth.SetFocus
        Exit Sub
    End If
    
    If CDbl(strWidth) < 0 Then
        MsgBox "|fffd||fffd||fffd||342|O|fffd||20f||fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation + vbOKOnly, C_TITLE
        txtWidth.SetFocus
        Exit Sub
    End If
        
    SaveSetting C_TITLE, "Fusen", "Text", strText
    SaveSetting C_TITLE, "Fusen", "Tag", strTag
    SaveSetting C_TITLE, "Fusen", "PrintObject", blnPrint
    
    SaveSetting C_TITLE, "Fusen", "Width", strWidth
    SaveSetting C_TITLE, "Fusen", "Height", strHeight
    
    SaveSetting C_TITLE, "Fusen", "UserDate", strUserDate
    SaveSetting C_TITLE, "Fusen", "Format", strFormat
    SaveSetting C_TITLE, "Fusen", "FusenDate", strFusenDate
    
    SaveSetting C_TITLE, "Fusen", "Font", strFont
    SaveSetting C_TITLE, "Fusen", "Size", strSize
    
    SaveSetting C_TITLE, "Fusen", "HorizontalAnchor", strHorizontalAnchor
    SaveSetting C_TITLE, "Fusen", "VerticalAnchor", strVerticalAnchor
    
    SaveSetting C_TITLE, "Fusen", "AutoSize", blnAutoSize
    SaveSetting C_TITLE, "Fusen", "OverFlow", blnOverFlow
    SaveSetting C_TITLE, "Fusen", "WordWrap", blnWordWrap
    
    Unload Me
    
End Sub

Private Function spinUp(ByVal vntValue As Variant) As Variant

    Dim lngValue As Variant
    
    lngValue = Val(vntValue)
    lngValue = lngValue + 0.5
    spinUp = lngValue

End Function

Private Function spinDown(ByVal vntValue As Variant) As Variant

    Dim lngValue As Variant
    
    lngValue = Val(vntValue)
    lngValue = lngValue - 0.5
    If lngValue < 0 Then
        lngValue = 0
    End If
    spinDown = lngValue

End Function
Private Function spinUpSize(ByVal vntValue As Variant) As Variant

    Dim lngValue As Variant
    
    lngValue = Val(vntValue)
    lngValue = lngValue + 1
    spinUpSize = lngValue

End Function

Private Function spinDownSize(ByVal vntValue As Variant) As Variant

    Dim lngValue As Variant
    
    lngValue = Val(vntValue)
    lngValue = lngValue - 1
    If lngValue < 0 Then
        lngValue = 0
    End If
    spinDownSize = lngValue

End Function

Private Sub spnHeight_SpinDown()
    txtHeight.Text = spinDown(txtHeight.Text)
End Sub

Private Sub spnHeight_SpinUp()
    txtHeight.Text = spinUp(txtHeight.Text)
End Sub

Private Sub spnSize_SpinDown()
    txtSize.Text = spinDownSize(txtSize.Text)
End Sub

Private Sub spnSize_SpinUp()
    txtSize.Text = spinUpSize(txtSize.Text)
End Sub

Private Sub spnWidth_SpinDown()
    txtWidth.Text = spinDown(txtWidth.Text)
End Sub

Private Sub spnWidth_SpinUp()
    txtWidth.Text = spinUp(txtWidth.Text)
End Sub

Private Sub UserForm_Initialize()

    Dim strText As String
    Dim strTag As String
    Dim varPrint As Variant
    
    Dim strWidth  As String
    Dim strHeight  As String
    
    Dim strFormat As String
    Dim strUserDate  As String
    Dim strFusenDate As String
    
    Dim strFont  As String
    Dim strSize  As String
    
    Dim varHorizontalAnchor  As Variant
    Dim varVerticalAnchor  As Variant
    
    Dim varAutoSize  As Variant
    Dim varOverFlow As Variant
    Dim varWordWrap As Variant
    
    Dim i As Long
    
    Call getSettingFusen(strText, strTag, varPrint, strWidth, strHeight, strFormat, strUserDate, strFusenDate, strFont, strSize, varHorizontalAnchor, varVerticalAnchor, varAutoSize, varOverFlow, varWordWrap)
    
    txtText.Text = strText
    txtTag.Text = strTag
    chkPrint.Value = varPrint
    
    txtWidth.Text = strWidth
    txtHeight.Text = strHeight
    
    txtFormat.Text = strFormat
    
    Select Case strFusenDate
        Case C_FUSEN_DATE_SYSTEM
            optSystemDate.Value = True
        Case Else
            optUserDate.Value = True
    End Select
    
    txtUserDate.Text = strUserDate
    
    ActiveCell.Select
    With Application.CommandBars("Formatting").Controls(1)
        For i = 1 To .ListCount
            cboFont.AddItem .List(i)
        Next i
    End With
    cboFont.Text = strFont
    txtSize.Text = strSize
    
    cboHorizontalAnchor.AddItem "|fffd||fffd|"
    cboHorizontalAnchor.AddItem "|fffd||fffd|"
    cboHorizontalAnchor.AddItem "|fffd|E"
    cboHorizontalAnchor.ListIndex = varHorizontalAnchor
    
    cboVerticalAnchor.AddItem "|fffd||fffd|"
    cboVerticalAnchor.AddItem "|fffd||fffd|"
    cboVerticalAnchor.AddItem "|fffd||fffd|"
    cboVerticalAnchor.ListIndex = varVerticalAnchor
    
    chkAutoSize.Value = varAutoSize
    
    lblUser.Caption = "|fffd||fffd||fffd|[|fffd|U|fffd||fffd|:" & Application.UserName
    
    chkOverflow.Value = varOverFlow
    chkWordWrap.Value = varWordWrap
#If VBA7 And Win64 Then
#Else
    chkOverflow.enabled = False
#End If

End Sub
Attribute VB_Name = "frmGrep"
Attribute VB_Base = "0{7B0DE11E-C1C2-412D-A346-5BA2A244BABD}{87FDCAB3-07C6-4C1D-96D1-6B6E2A1603DA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





Option Explicit
Private mRange As Range
Private mblnSelectMode As Boolean
Private mobjRegx As Object
Private mlngCount As Long
Private mblnCancel As Boolean

Private mblnRefresh As Boolean

Private Const C_START_ROW As Long = 11
Private Const C_SEARCH_NO As Long = 1
Private Const C_SEARCH_BOOK As Long = 2
Private Const C_SEARCH_SHEET As Long = 3
Private Const C_SEARCH_ADDRESS As Long = 4
Private Const C_SEARCH_STR As Long = 5
'Private Const C_SEARCH_ID As Long = 6

Private Const C_SEARCH_OBJECT_CELL = "|fffd|Z|fffd||fffd||fffd||302||fffd|"
Private Const C_SEARCH_OBJECT_SHAPE = "|fffd|V|fffd|F|fffd|C|fffd|v|fffd||302||fffd|"
Private Const C_SEARCH_OBJECT_CELL_AND_SHAPE = "|fffd|Z|fffd||fffd||fffd||fffd||fffd|V|fffd|F|fffd|C|fffd|v"
Private Const C_SEARCH_VALUE_VALUE = "|fffd|l"
Private Const C_SEARCH_VALUE_FORMULA = "|fffd||fffd|"

Private mMm As MacroManager


Private Sub chkRegEx_Change()
'    chkZenHan.enabled = Not (chkRegEx.Value)
End Sub

'Private Sub chkRegEx_Change()
'    chkCase.enabled = chkRegEx.Value
'    If chkRegEx.Value = False Then
'        chkCase.Value = False
'    End If
'End Sub

Private Sub cmdCancel_Click()
    If cmdCancel.Caption = "|fffd||82||fffd||fffd||fffd|" Then
        Unload Me
    Else
        mblnCancel = True
    End If
End Sub

Private Sub cmdFolder_Click()

    Dim strFile As String

    '|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||64fe|
    strFile = rlxSelectFolder()
    
    If Trim(strFile) <> "" Then
        cboFolder.Text = strFile
    End If
    
End Sub

Private Sub cmdHelp_Click()

    If Val(Application.Version) >= C_EXCEL_VERSION_2013 Then
    
        If MsgBox("|fffd|C|fffd||fffd||fffd|^|fffd|[|fffd|l|fffd|b|fffd|g|fffd||250||691||fffd||fffd||fffd||fffd||702||fffd||fffd|B|fffd||fffd||b0b5||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|H", vbOKCancel + vbQuestion, C_TITLE) <> vbOK Then
            Exit Sub
        End If
        
        Dim WSh As Object
        
        Set WSh = CreateObject("WScript.Shell")
        
        Call WSh.Run(C_REGEXP_URL)
        
        Set WSh = Nothing
    
    Else
        frmHelp.Start "regexp"
    End If
    
End Sub

Private Sub cmdOK_Click()

    Dim XL As Excel.Application
    Dim WB As Workbook
    Dim WS As Worksheet
    Dim colBook As Collection
    Dim varBook As Variant
    Dim objFs As Object
    Dim lngBookCount As Long
    Dim lngBookMax As Long
    
    Dim ResultWS As Worksheet
    
    Dim strPath As String
    Dim strPatterns() As String
    
'    Dim a As Variant
'
'    a = Timer
    
    If Len(Trim(cboSearch.Text)) = 0 Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...", vbExclamation, C_TITLE
        cboSearch.SetFocus
        Exit Sub
    End If
    
    
    '|fffd||fffd||fffd|K|fffd|\|fffd||fffd||fffd||30f||a347|
    If chkRegEx.Value Then
        Dim o As Object
        Set o = CreateObject("VBScript.RegExp")
        o.Pattern = cboSearch.Text
        o.IgnoreCase = Not (chkCase.Value)
        o.Global = True
        err.Clear
        On Error Resume Next
        o.Execute ""
        If err.Number <> 0 Then
            MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||310||fffd||fffd|K|fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbExclamation, C_TITLE
            cboSearch.SetFocus
            Exit Sub
        End If
    End If
    
    strPath = cboFolder.Text
    strPatterns = Split(txtPattern.Text, ";")

    Set colBook = New Collection
    
    Set objFs = CreateObject("Scripting.FileSystemObject")
    
    On Error Resume Next
    
    Set mMm = New MacroManager
    Set mMm.Form = Me
    mMm.Disable
    mMm.DispGuidance "|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||310||fffd||fffd||fffd||fffd|J|fffd|E|fffd||fffd||fffd|g|fffd||fffd||fffd||102||fffd||fffd||702||fffd|..."
    
    FileSearch objFs, strPath, strPatterns(), colBook
    Select Case err.Number
    Case 75, 76
        mMm.Enable
        Set mMm = Nothing
        MsgBox "|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd||fffd|B", vbExclamation, "ExcelGrep"
        cboFolder.SetFocus
        Exit Sub
    End Select
    
    
    Set objFs = Nothing
    
    ThisWorkbook.Worksheets("Grep|fffd||fffd||fffd||fffd|").Copy
    Set ResultWS = ActiveSheet
    
    'Set ResultWS = Workbooks.Add.Worksheets(1)
    ResultWS.name = "Grep|fffd||fffd||fffd||fffd|"
    
    ResultWS.Cells(1, C_SEARCH_NO).Value = "Excel|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd|Grep"
    ResultWS.Cells(2, C_SEARCH_NO).Value = "|fffd||fffd||fffd||fffd||fffd|F" & cboSearch.Text
    ResultWS.Cells(3, C_SEARCH_NO).Value = "|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd|F" & txtPattern.Text
    ResultWS.Cells(4, C_SEARCH_NO).Value = "|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd|F" & cboFolder.Text
    ResultWS.Cells(5, C_SEARCH_NO).Value = "|fffd||fffd||fffd||fffd||fffd|I|fffd|u|fffd|W|fffd|F|fffd|N|fffd|g|fffd|F" & cboObj.Text
    ResultWS.Cells(6, C_SEARCH_NO).Value = "|fffd||fffd||fffd||fffd||fffd||38f||6c1|F" & cboValue.Text
    ResultWS.Cells(7, C_SEARCH_NO).Value = "|fffd||fffd||fffd|K|fffd|\|fffd||fffd||fffd|F" & chkRegEx.Value
    ResultWS.Cells(8, C_SEARCH_NO).Value = "|fffd||1ce||fffd|p|fffd|X|fffd||fffd||fffd|[|fffd|h|fffd|F" & txtPassword.Text
    
    ResultWS.Cells(10, C_SEARCH_NO).Value = "No."
    ResultWS.Cells(10, C_SEARCH_BOOK).Value = "|fffd|u|fffd|b|fffd|N|fffd||fffd|"
    ResultWS.Cells(10, C_SEARCH_BOOK).ColumnWidth = 60
    ResultWS.Cells(10, C_SEARCH_SHEET).Value = "|fffd|V|fffd|[|fffd|g|fffd||fffd|"
    ResultWS.Cells(10, C_SEARCH_ADDRESS).Value = "|fffd|Z|fffd||fffd|/|fffd|V|fffd|F|fffd|C|fffd|v"
    ResultWS.Cells(10, C_SEARCH_STR).Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
'    ResultWS.Cells(9, C_SEARCH_ID).Value = "ID"
    mlngCount = C_START_ROW

    cmdCancel.Caption = "|fffd|L|fffd||fffd||fffd||fffd||fffd|Z|fffd||fffd|"
    
    Set XL = New Excel.Application
    
    AppActivate Me.Caption
    
    lngBookCount = 0
    lngBookMax = colBook.count
    mMm.StartGauge lngBookMax
    
    XL.DisplayAlerts = False
    XL.EnableEvents = False
    
    Dim varPassword As Variant
    Dim pass As Variant
    
    If Len(txtPassword.Text) <> 0 Then
        varPassword = Split(txtPassword.Text, ",")
    Else
        varPassword = Array("")
    End If
 
    For Each varBook In colBook
    
        If mblnCancel Then
            Exit For
        End If
    
'        If Len(txtPassword.Text) <> 0 Then
            For Each pass In varPassword
                err.Clear
                Set WB = XL.Workbooks.Open(filename:=varBook, ReadOnly:=True, IgnoreReadOnlyRecommended:=True, Notify:=False, Password:=pass, Local:=True)
                If err.Number = 0 Then
                    Exit For
                End If
            Next
'        Else
'            err.Clear
'            Set WB = XL.Workbooks.Open(filename:=varBook, ReadOnly:=True, IgnoreReadOnlyRecommended:=True, Notify:=False, Password:="", Local:=True)
'        End If
        If err.Number = 0 Then
            For Each WS In WB.Worksheets
                If WS.visible = xlSheetVisible Then
                    Select Case cboObj.Text
                        Case C_SEARCH_OBJECT_CELL
                            Call seachCell(WS, ResultWS)
                            
                        Case C_SEARCH_OBJECT_SHAPE
                            Call searchShape(WS, ResultWS)
                            
                        Case C_SEARCH_OBJECT_CELL_AND_SHAPE
                            Call seachCell(WS, ResultWS)
                            Call searchShape(WS, ResultWS)
                    End Select
                End If
                Set WS = Nothing
            Next
        Else
            ResultWS.Cells(mlngCount, C_SEARCH_NO).Value = mlngCount - C_START_ROW + 1
            ResultWS.Cells(mlngCount, C_SEARCH_BOOK).Value = varBook
            ResultWS.Cells(mlngCount, C_SEARCH_SHEET).Value = "|fffd|u|fffd|b|fffd|N|fffd||fffd||fffd|J|fffd||fffd||fffd||702||fffd||fffd||fffd||142||fffd||fffd||fffd|"
            ResultWS.Cells(mlngCount, C_SEARCH_ADDRESS).Value = ""
    
            ResultWS.Cells(mlngCount, C_SEARCH_STR).NumberFormatLocal = "@"
            ResultWS.Cells(mlngCount, C_SEARCH_STR).Value = err.Description
            mlngCount = mlngCount + 1
        End If
        WB.Close SaveChanges:=False
        Set WB = Nothing
        lngBookCount = lngBookCount + 1
        mMm.DisplayGauge lngBookCount
    Next
    
    XL.EnableEvents = True
    XL.DisplayAlerts = True
    XL.Quit
    Set XL = Nothing
    
    
'    ResultWS.Columns("B:E").AutoFit
'    ResultWS.Columns("B:B").ColumnWidth = 70
'    ResultWS.Columns("C:C").ColumnWidth = 20
'    ResultWS.Columns("D:D").ColumnWidth = 20
'    ResultWS.Columns("E:E").ColumnWidth = 120
'    ResultWS.Columns("F:F").ColumnWidth = 0
    Dim r As Range
    Set r = ResultWS.Cells(C_START_ROW, 1).CurrentRegion
    
    r.VerticalAlignment = xlTop
    r.Select
    
    Dim strBuf As String
    Dim i As Long
    Dim lngCount As Long
    
    strBuf = cboSearch.Text
    lngCount = 1
    For i = 0 To cboSearch.ListCount - 1
        If cboSearch.List(i) <> cboSearch.Text Then
            strBuf = strBuf & vbTab & cboSearch.List(i)
            lngCount = lngCount + 1
            '|fffd||fffd||fffd|X|fffd|g|fffd||34d||151||fffd|P|fffd|O
            If lngCount >= 10 Then
                Exit For
            End If
        End If
    Next
    rlxSaveSetting C_TITLE, "ExcelGrep", "SearchStr", strBuf
    
    strBuf = cboFolder.Text
    lngCount = 1
    For i = 0 To cboFolder.ListCount - 1
        If cboFolder.List(i) <> cboFolder.Text Then
            strBuf = strBuf & vbTab & cboFolder.List(i)
            lngCount = lngCount + 1
            '|fffd||fffd||fffd|X|fffd|g|fffd||34d||151||fffd|P|fffd|O
            If lngCount >= 10 Then
                Exit For
            End If
        End If
    Next
    rlxSaveSetting C_TITLE, "ExcelGrep", "FolderStr", strBuf
    
    SaveSetting C_TITLE, "ExcelGrep", "cboObj", cboObj.ListIndex
    SaveSetting C_TITLE, "ExcelGrep", "chkRegEx", chkRegEx.Value
    SaveSetting C_TITLE, "ExcelGrep", "chkCase", chkCase.Value
    SaveSetting C_TITLE, "ExcelGrep", "chkSubFolder", chkSubFolder.Value
    SaveSetting C_TITLE, "ExcelGrep", "cboValue", cboValue.ListIndex
    SaveSetting C_TITLE, "ExcelGrep", "chkZenHan", chkZenHan.Value
    SaveSetting C_TITLE, "ExcelGrep", "Password", txtPassword.Text
    
    Set mMm = Nothing
    
'    MsgBox Timer - a
    
    Unload Me
    
    AppActivate ResultWS.Application.Caption
    execSelectionRowDrawGrid

    Set ResultWS = Nothing
   
End Sub
Private Sub FileSearch(objFs As Object, strPath As String, strPatterns() As String, objCol As Collection)

    Dim objfld As Object
    Dim objfl As Object
    Dim objSub As Object
    Dim f As Variant
    
    Dim lngCol2 As Long

    Set objfld = objFs.GetFolder(strPath)
    
    '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||64fe|
    For Each objfl In objfld.files
    
        Dim blnFind As Boolean
        blnFind = False
        DoEvents
        DoEvents
        DoEvents
        For Each f In strPatterns
            If LCase(objfl.name) Like LCase(f) Then
                blnFind = True
                Exit For
            End If
        Next
        
        If blnFind Then
            objCol.Add rlxAddFileSeparator(objfl.ParentFolder.Path) & objfl.name
        End If
    Next
    
    '|fffd|T|fffd|u|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If chkSubFolder.Value Then
        For Each objSub In objfld.SubFolders
            DoEvents
            DoEvents
            DoEvents
            FileSearch objFs, objSub.Path, strPatterns(), objCol
        Next
    End If
End Sub

'Private Sub seachCell(ByRef objSheet As Worksheet, ByRef ResultWS As Worksheet)
'
'    Dim objRegx As Object
'    Dim matchCount As Long
'    Dim objMatch As Object
'    Dim strPattern As String
'    Dim c As Range
'
'    strPattern = cboSearch.Text
'
'    '|fffd||fffd||fffd|K|fffd|\|fffd||fffd||fffd||30f||a347|
'    If chkRegEx Then
'        Set mobjRegx = CreateObject("VBScript.RegExp")
'        mobjRegx.Pattern = strPattern
'        mobjRegx.IgnoreCase = Not (chkCase.Value)
'        mobjRegx.Global = True
'    End If
'
'    For Each c In objSheet.UsedRange
'
'        '|fffd||fffd||fffd|K|fffd|\|fffd||fffd||fffd||30f||a347|
'        If chkRegEx Then
'            err.Clear
'            On Error Resume Next
'            Set objMatch = mobjRegx.Execute(c.Value)
'            If err.Number <> 0 Then
'                MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||310||fffd||fffd|K|fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbExclamation, C_TITLE
'                cboSearch.SetFocus
'                Exit Sub
'            End If
'            matchCount = objMatch.count
'        Else
'            matchCount = InStr(c.Value, strPattern)
'        End If
'
'        If matchCount > 0 Then
'            ResultWS.Cells(mlngCount, C_SEARCH_NO).Value = mlngCount - C_START_ROW + 1
'            ResultWS.Cells(mlngCount, C_SEARCH_BOOK).Value = objSheet.Parent.FullName
'            ResultWS.Cells(mlngCount, C_SEARCH_SHEET).Value = objSheet.Name
'            ResultWS.Cells(mlngCount, C_SEARCH_ADDRESS).Value = c.Address
'            ResultWS.Cells(mlngCount, C_SEARCH_STR).NumberFormatLocal = "@"
'            ResultWS.Cells(mlngCount, C_SEARCH_STR).Value = c.Value
'            mlngCount = mlngCount + 1
'        End If
'    Next
'
'
'End Sub
'Private Sub seachCell(ByRef objSheet As Worksheet, ByRef ResultWS As Worksheet)
'
'    Dim objRegx As Object
'    Dim strPattern As String
'    Dim c As Range
'
'    Dim d As Variant
'    Dim i As Long
'    Dim j As Long
'
'    strPattern = cboSearch.Text
'
'    '|fffd||fffd||fffd|K|fffd|\|fffd||fffd||fffd||30f||a347|
'    If chkRegEx Then
'        Set mobjRegx = CreateObject("VBScript.RegExp")
'        mobjRegx.Pattern = strPattern
'        mobjRegx.IgnoreCase = Not (chkCase.Value)
'        mobjRegx.Global = True
'    End If
'
'    d = objSheet.UsedRange
'    If IsEmpty(d) Then
'        Exit Sub
'    End If
'
'    If IsArray(d) Then
'        For i = LBound(d, 1) To UBound(d, 1)
'            For j = LBound(d, 2) To UBound(d, 2)
'
'                Call searchStr(objSheet, ResultWS, d(i, j), strPattern, i, j)
'
'            Next
'        Next
'    Else
'        Call searchStr(objSheet, ResultWS, d, strPattern, 1, 1)
'    End If
'
'    Erase d
'
'End Sub
'Private Sub searchStr(ByRef objSheet As Worksheet, ByRef ResultWS As Worksheet, ByVal strSearch As Variant, ByVal strPattern As String, ByVal i As Long, ByVal j As Long)
'
'    Dim objMatch As Object
'    Dim matchCount As Long
'
'    If IsError(strSearch) Then
'        Exit Sub
'    End If
'
'    '|fffd||fffd||fffd|K|fffd|\|fffd||fffd||fffd||30f||a347|
'    If chkRegEx Then
'        err.Clear
'        On Error Resume Next
'        Set objMatch = mobjRegx.Execute(strSearch)
'        If err.Number <> 0 Then
'            MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||310||fffd||fffd|K|fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbExclamation, C_TITLE
'            cboSearch.SetFocus
'            Exit Sub
'        End If
'        matchCount = objMatch.count
'    Else
'        matchCount = InStr(strSearch, strPattern)
'    End If
'
'    If matchCount > 0 Then
'        ResultWS.Cells(mlngCount, C_SEARCH_NO).Value = mlngCount - C_START_ROW + 1
'        ResultWS.Cells(mlngCount, C_SEARCH_BOOK).Value = objSheet.Parent.FullName
'        ResultWS.Cells(mlngCount, C_SEARCH_SHEET).Value = objSheet.Name
'        ResultWS.Cells(mlngCount, C_SEARCH_ADDRESS).Value = objSheet.UsedRange(i, j).Address
'        ResultWS.Hyperlinks.Add _
'            Anchor:=Cells(mlngCount, C_SEARCH_ADDRESS), _
'            Address:="", _
'            SubAddress:=Cells(mlngCount, C_SEARCH_ADDRESS).Address, _
'            TextToDisplay:=objSheet.UsedRange(i, j).Address
'
'        ResultWS.Cells(mlngCount, C_SEARCH_STR).NumberFormatLocal = "@"
'        ResultWS.Cells(mlngCount, C_SEARCH_STR).Value = strSearch
'        mlngCount = mlngCount + 1
'    End If
'End Sub
Private Sub seachCell(ByRef objSheet As Worksheet, ByRef ResultWS As Worksheet)

    Dim strPattern As String
    
    strPattern = cboSearch.Text
        
    '|fffd||fffd||fffd|K|fffd|\|fffd||fffd||fffd||30f||a347|
    If chkRegEx Then
    
        Dim objRegx As Object
        Set objRegx = CreateObject("VBScript.RegExp")
        
        objRegx.Pattern = strPattern
        objRegx.IgnoreCase = Not (chkCase.Value)
        objRegx.Global = True
    
        Dim c As Range
        For Each c In objSheet.UsedRange
    
            Dim schStr As Variant
            
            If cboValue.Value = C_SEARCH_VALUE_VALUE Then
                schStr = c.Value
            Else
                schStr = c.FormulaLocal
            End If
            
            Dim objMatch As Object
            Set objMatch = objRegx.Execute(schStr)

            If objMatch.count > 0 Then
                ResultWS.Cells(mlngCount, C_SEARCH_NO).Value = mlngCount - C_START_ROW + 1
                ResultWS.Cells(mlngCount, C_SEARCH_BOOK).Value = objSheet.Parent.FullName
                ResultWS.Cells(mlngCount, C_SEARCH_SHEET).Value = objSheet.name
                ResultWS.Cells(mlngCount, C_SEARCH_ADDRESS).Value = c.Address
'                ResultWS.Cells(mlngCount, C_SEARCH_ID).Value = c.Address
        
                ResultWS.Hyperlinks.Add _
                    Anchor:=ResultWS.Cells(mlngCount, C_SEARCH_ADDRESS), _
                    Address:="", _
                    SubAddress:=ResultWS.Cells(mlngCount, C_SEARCH_ADDRESS).Address, _
                    TextToDisplay:=c.Address
        
                ResultWS.Cells(mlngCount, C_SEARCH_STR).NumberFormatLocal = "@"
                ResultWS.Cells(mlngCount, C_SEARCH_STR).Value = schStr
                mlngCount = mlngCount + 1
            End If
            
            Set objMatch = Nothing
        
        Next
        Set objRegx = Nothing
        
    Else
        Dim objFind As Range
        Dim strFirstAddress As String
        
        If cboValue.Value = C_SEARCH_VALUE_VALUE Then
            Set objFind = objSheet.UsedRange.Find(strPattern, , xlValues, xlPart, xlByColumns, xlNext, chkCase.Value, chkZenHan.Value)
        Else
            Set objFind = objSheet.UsedRange.Find(strPattern, , xlFormulas, xlPart, xlByColumns, xlNext, chkCase.Value, chkZenHan.Value)
        End If
        
        If Not objFind Is Nothing Then
        
            strFirstAddress = objFind.Address
    
            Do
            
                ResultWS.Cells(mlngCount, C_SEARCH_NO).Value = mlngCount - C_START_ROW + 1
                ResultWS.Cells(mlngCount, C_SEARCH_BOOK).Value = objSheet.Parent.FullName
                ResultWS.Cells(mlngCount, C_SEARCH_ADDRESS).Value = objFind.Address
'                ResultWS.Cells(mlngCount, C_SEARCH_ID).Value = objFind.Address
                ResultWS.Cells(mlngCount, C_SEARCH_SHEET).Value = objSheet.name
                
                ResultWS.Hyperlinks.Add _
                    Anchor:=ResultWS.Cells(mlngCount, C_SEARCH_ADDRESS), _
                    Address:="", _
                    SubAddress:=ResultWS.Cells(mlngCount, C_SEARCH_ADDRESS).Address, _
                    TextToDisplay:=objFind.Address
        
                ResultWS.Cells(mlngCount, C_SEARCH_STR).NumberFormatLocal = "@"
                
                If cboValue.Value = C_SEARCH_VALUE_VALUE Then
                    ResultWS.Cells(mlngCount, C_SEARCH_STR).Value = objFind.Value
                Else
                    ResultWS.Cells(mlngCount, C_SEARCH_STR).Value = objFind.FormulaLocal
                End If

                mlngCount = mlngCount + 1
        
                Set objFind = objSheet.UsedRange.FindNext(objFind)
                
                If objFind Is Nothing Then
                    Exit Do
                End If
                
            Loop Until strFirstAddress = objFind.Address
            
        End If
    End If
    
End Sub
Private Sub searchShape(ByRef objSheet As Worksheet, ByRef ResultWS As Worksheet)

    Dim matchCount As Long
    Dim objMatch As Object
    Dim strPattern As String

    Dim objShape As Shape
    Dim objAct As Worksheet
    Dim c As Shape
    
    Dim strBuf As String

    Dim colShapes As Collection
    Set colShapes = New Collection

    Const C_RESULT_NAME As String = "|fffd|V|fffd|F|fffd|C|fffd|v|fffd||fffd||fffd||fffd|Result"
    
    strPattern = cboSearch.Text
    
    '|fffd||fffd||fffd|K|fffd|\|fffd||fffd||fffd||30f||a347|
    If chkRegEx Then
        Set mobjRegx = CreateObject("VBScript.RegExp")
        mobjRegx.Pattern = strPattern
        mobjRegx.IgnoreCase = Not (chkCase.Value)
        mobjRegx.Global = True
    End If
    
    For Each c In objSheet.Shapes
        
        Select Case c.Type
            Case msoAutoShape, msoTextBox, msoCallout, msoFreeform
                '|fffd|V|fffd|F|fffd|C|fffd|v|fffd||255||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||90a9||fffd||202||fffd||fffd||fffd||fffd||fffd||fffd|f|fffd||fffd||fffd||82||fffd||fffd||202||fffd||fffd||fffd||fffd||7c3|G|fffd||fffd||fffd|[|fffd||fffd||fffd|o|fffd||242||10f||fffd||fffd||fffd|
                On Error Resume Next
                strBuf = c.TextFrame.Characters.Text
                If err.Number = 0 Then
                    On Error GoTo 0
                    
                    '|fffd||fffd||fffd|K|fffd|\|fffd||fffd||fffd||30f||a347|
                    If chkRegEx Then
                        err.Clear
                        On Error Resume Next
                        Set objMatch = mobjRegx.Execute(strBuf)
                        If err.Number <> 0 Then
                            MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||310||fffd||fffd|K|fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbExclamation, C_TITLE
                            cboSearch.SetFocus
                            Exit Sub
                        End If
                        matchCount = objMatch.count
                    Else
'                        matchCount = InStr(strBuf, strPattern)
                        If chkCase.Value Then
                            matchCount = InStr(strBuf, strPattern)
                        Else
                            matchCount = InStr(UCase(strBuf), UCase(strPattern))
                        End If
                    End If
                    
                    If matchCount > 0 Then
                    
                        ResultWS.Cells(mlngCount, C_SEARCH_NO).Value = mlngCount - C_START_ROW + 1
                        ResultWS.Cells(mlngCount, C_SEARCH_BOOK).Value = objSheet.Parent.FullName
                        ResultWS.Cells(mlngCount, C_SEARCH_ADDRESS).Value = c.name & ":" & c.id
'                        ResultWS.Cells(mlngCount, C_SEARCH_ID).Value = "Shape:" & c.ID
                        
'                        ResultWS.Hyperlinks.Add _
'                            Anchor:=Cells(mlngCount, C_SEARCH_ADDRESS), _
'                            Address:=objSheet.Parent.FullName, _
'                            SubAddress:="'" & objSheet.Name & "'!" & c.TopLeftCell.Address(0, 0), _
'                            TextToDisplay:=c.Name
'                ResultWS.Hyperlinks.Add _
'                    Anchor:=ResultWS.Cells(mlngCount, C_SEARCH_ADDRESS), _
'                    Address:="", _
'                    SubAddress:=ResultWS.Cells(mlngCount, C_SEARCH_ADDRESS).Address, _
'                    TextToDisplay:=c.Name
                ResultWS.Hyperlinks.Add _
                    Anchor:=ResultWS.Cells(mlngCount, C_SEARCH_ADDRESS), _
                    Address:="", _
                    SubAddress:=ResultWS.Cells(mlngCount, C_SEARCH_ADDRESS).Address, _
                    TextToDisplay:=c.name & ":" & c.id
                    
                        ResultWS.Cells(mlngCount, C_SEARCH_SHEET).Value = objSheet.name
                        ResultWS.Cells(mlngCount, C_SEARCH_STR).NumberFormatLocal = "@"
                        ResultWS.Cells(mlngCount, C_SEARCH_STR).Value = strBuf
                        mlngCount = mlngCount + 1
                        
                    End If
                Else
                    On Error GoTo 0
                    err.Clear
                End If
            Case msoGroup
                grouprc c, c, colShapes, ResultWS

        End Select
    Next

End Sub
'|fffd||10b|A|fffd||242||103|O|fffd||fffd||fffd|[|fffd|v|fffd||209||fffd||fffd||303|V|fffd|F|fffd|C|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub grouprc(ByRef objTop As Shape, ByRef objShape As Shape, ByRef colShapes As Collection, ByRef ResultWS As Worksheet)

    Dim matchCount As Long
    Dim c As Shape
    Dim strBuf As String
    Dim objMatch As Object
    Dim strPattern As String
    strPattern = cboSearch.Text
    
    For Each c In objShape.GroupItems
        
        Select Case c.Type
            Case msoAutoShape, msoTextBox, msoCallout, msoFreeform
                '|fffd|V|fffd|F|fffd|C|fffd|v|fffd||255||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||90a9||fffd||202||fffd||fffd||fffd||fffd||fffd||fffd|f|fffd||fffd||fffd||82||fffd||fffd||202||fffd||fffd||fffd||fffd||7c3|G|fffd||fffd||fffd|[|fffd||fffd||fffd|o|fffd||242||10f||fffd||fffd||fffd|
                On Error Resume Next
                strBuf = c.TextFrame.Characters.Text
                If err.Number = 0 Then
                    On Error GoTo 0
                    
                    '|fffd||fffd||fffd|K|fffd|\|fffd||fffd||fffd||30f||a347|
                    If chkRegEx Then
                        err.Clear
                        On Error Resume Next
                        Set objMatch = mobjRegx.Execute(strBuf)
                        If err.Number <> 0 Then
                            MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||310||fffd||fffd|K|fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbExclamation, C_TITLE
                            cboSearch.SetFocus
                            Exit Sub
                        End If
                        matchCount = objMatch.count
                    Else
                        matchCount = InStr(strBuf, strPattern)
                    End If
                    
                    If matchCount > 0 Then
                    
                        ResultWS.Cells(mlngCount, C_SEARCH_NO).Value = mlngCount - C_START_ROW + 1
                        ResultWS.Cells(mlngCount, C_SEARCH_BOOK).Value = objShape.Parent.Parent.FullName
                        ResultWS.Cells(mlngCount, C_SEARCH_SHEET).Value = objShape.Parent.name
                        ResultWS.Cells(mlngCount, C_SEARCH_ADDRESS).Value = c.name & ":" & c.id
'                        ResultWS.Cells(mlngCount, C_SEARCH_ID).Value = "Shape:" & c.ID
                        
'                        ResultWS.Hyperlinks.Add _
'                            Anchor:=Cells(mlngCount, C_SEARCH_ADDRESS), _
'                            Address:=objShape.Parent.Parent.FullName, _
'                            SubAddress:="'" & objShape.Parent.Name & "'!" & c.TopLeftCell.Address(0, 0), _
'                            TextToDisplay:=c.Name
'                ResultWS.Hyperlinks.Add _
'                    Anchor:=Cells(mlngCount, C_SEARCH_ADDRESS), _
'                    Address:="", _
'                    SubAddress:=Cells(mlngCount, C_SEARCH_ADDRESS).Address, _
'                    TextToDisplay:=c.Name
                ResultWS.Hyperlinks.Add _
                    Anchor:=ResultWS.Cells(mlngCount, C_SEARCH_ADDRESS), _
                    Address:="", _
                    SubAddress:=Cells(mlngCount, C_SEARCH_ADDRESS).Address, _
                    TextToDisplay:=c.name & ":" & c.id
                        
                        ResultWS.Cells(mlngCount, C_SEARCH_STR).NumberFormatLocal = "@"
                        ResultWS.Cells(mlngCount, C_SEARCH_STR).Value = strBuf
                        mlngCount = mlngCount + 1
                    
                    End If
                Else
                    On Error GoTo 0
                    err.Clear
                End If
            Case msoGroup
                '|fffd||10b|A|fffd||10f|o
                grouprc objTop, c, colShapes, ResultWS
            
        End Select
    Next

End Sub




Private Sub TextBox1_Change()

End Sub

Private Sub UserForm_Initialize()
    
    Dim strBuf As String
    Dim strSearch() As String
    Dim strFolder() As String
    Dim i As Long
    
    mblnRefresh = True
    
    cboObj.AddItem C_SEARCH_OBJECT_CELL
    cboObj.AddItem C_SEARCH_OBJECT_SHAPE
    cboObj.AddItem C_SEARCH_OBJECT_CELL_AND_SHAPE
    cboObj.ListIndex = GetSetting(C_TITLE, "ExcelGrep", "cboObj", 0)
    
    cboValue.AddItem C_SEARCH_VALUE_FORMULA
    cboValue.AddItem C_SEARCH_VALUE_VALUE
    cboValue.ListIndex = GetSetting(C_TITLE, "ExcelGrep", "cboValue", 0)
    
    chkSubFolder.Value = GetSetting(C_TITLE, "ExcelGrep", "chkSubFolder", False)
    
    chkRegEx.Value = GetSetting(C_TITLE, "ExcelGrep", "chkRegEx", False)
'    chkRegEx_Change
    chkCase.Value = GetSetting(C_TITLE, "ExcelGrep", "chkCase", False)
    chkZenHan.Value = GetSetting(C_TITLE, "ExcelGrep", "chkZenHan", False)
    
'    chkCase.Value = False
'    chkCase.enabled = False
    
    txtPattern.Text = "*.xlsx;*.xlsm;*.xls"
    
    
    strBuf = rlxGetSetting(C_TITLE, "ExcelGrep", "SearchStr", "")
    strSearch = Split(strBuf, vbTab)
    
    txtPassword.Text = rlxGetSetting(C_TITLE, "ExcelGrep", "Password", "")
    
    For i = LBound(strSearch) To UBound(strSearch)
        cboSearch.AddItem strSearch(i)
    Next
    If cboSearch.ListCount > 0 Then
        cboSearch.ListIndex = 0
    End If
    
    strBuf = rlxGetSetting(C_TITLE, "ExcelGrep", "FolderStr", "")
    strFolder = Split(strBuf, vbTab)
    
    For i = LBound(strFolder) To UBound(strFolder)
        cboFolder.AddItem strFolder(i)
    Next
    If cboFolder.ListCount > 0 Then
        cboFolder.ListIndex = 0
    End If

    lblGauge.visible = False

   ' txtBack.Value = "Excel|fffd|u|fffd|b|fffd|N|fffd||fffd|Grep|fffd||fffd||fffd|s|fffd||fffd||fffd||702||fffd|"

'    Me.Top = (Application.Top + Application.Height - Me.Height) - 20
'    Me.Left = (Application.Left + Application.Width - Me.Width) - 20

    
End Sub

Attribute VB_Name = "frmGrid"
Attribute VB_Base = "0{D8C048B6-93EB-4A16-9E85-73ADEB0818E8}{2F49CA39-6CE9-48A0-9CA9-6057888093D9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Option Explicit
Private mResult As VBA.VbMsgBoxResult

Public Function Start(ByRef lngHead As Long, ByRef lngCol As Long, ByRef lngHeadColor As Long, ByRef lngEvenColor As Long, ByRef blnHoganMode As Boolean) As VbMsgBoxResult

    mResult = vbCancel
    
    lblHead.BackColor = CLng(GetSetting(C_TITLE, "Grid", "HeadColor", "&H008080FF"))
    lblEven.BackColor = CLng(GetSetting(C_TITLE, "Grid", "EvenColor", "&H00C0C0FF"))
    
    txtHead.Text = lngHead
    txtCol.Text = lngCol
    chkHoganMode.Value = blnHoganMode

    Me.Show vbModal
    
    lngHead = Val(txtHead.Text)
    lngCol = Val(txtCol.Text)
    blnHoganMode = chkHoganMode.Value
    
    Select Case True
        Case OptionButton4
            lngHeadColor = 16764057
            lngEvenColor = -1
            
        Case OptionButton2
            lngHeadColor = 10079487
            lngEvenColor = 10092543
            
        Case OptionButton3
            lngHeadColor = lblHead.BackColor
            lngEvenColor = lblEven.BackColor
            
            Call SaveSetting(C_TITLE, "Grid", "HeadColor", "&H" & Right("00000000" & Hex(lngHeadColor), 8))
            Call SaveSetting(C_TITLE, "Grid", "EvenColor", "&H" & Right("00000000" & Hex(lngEvenColor), 8))
            
        Case Else
            lngHeadColor = 16764057
            lngEvenColor = 16777164
            
    End Select
    
    Start = mResult

End Function
Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdOK_Click()
    mResult = vbOK
    Unload Me
End Sub


Private Sub lblHead_Click()

    Dim lngColor As Long
    Dim result As VbMsgBoxResult
    
    
    lngColor = lblHead.BackColor
    
    result = frmColor.Start(lngColor)
    
    If result = vbOK Then
        lblHead.BackColor = lngColor
    End If
    

End Sub

Private Sub lblEven_Click()

    Dim lngColor As Long
    Dim result As VbMsgBoxResult
    
    
    lngColor = lblEven.BackColor
    
    result = frmColor.Start(lngColor)
    
    If result = vbOK Then
        lblEven.BackColor = lngColor
    End If
    
End Sub

Private Sub spnCol_SpinDown()
    txtCol.Text = spinDown(txtCol.Text)
End Sub

Private Sub spnCol_SpinUp()
    txtCol.Text = spinUp(txtCol.Text)
End Sub

Private Sub spnHead_SpinDown()
    txtHead.Text = spinDown(txtHead.Text)
End Sub

Private Sub spnHead_SpinUp()
    txtHead.Text = spinUp(txtHead.Text)
End Sub
Private Function spinUp(ByVal vntValue As Variant) As Variant

    Dim lngValue As Long
    
    lngValue = Val(vntValue)
    lngValue = lngValue + 1
    spinUp = lngValue

End Function

Private Function spinDown(ByVal vntValue As Variant) As Variant

    Dim lngValue As Long
    
    lngValue = Val(vntValue)
    lngValue = lngValue - 1
    If lngValue < 0 Then
        lngValue = 0
    End If
    spinDown = lngValue

End Function

Attribute VB_Name = "frmGridText"
Attribute VB_Base = "0{2CBB3614-AEFC-4464-905D-DE1CFAD27D63}{F1C6C802-2FDD-44FF-8FB3-17FF7AF39B73}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Const C_LINE_MAX As Long = 1000
Private Const C_DEFAULT_COL As Long = 40
Private mlngMaxKeta As Long
Private mlngMinKeta As Long

Private mlngWidth() As Long
Private mlngHeight() As Long
Private mlngMaxColWidth() As Long
Private mblnFixColumn() As Boolean
    
Private Type typGrid
    Text() As String
    TextCount As Long
    TextMaxLength As Long
    Align As Long
    vAlign As Long
    ColSpan As Long
    RowSpan As Long
    WrapText As Boolean
    NoWrapField As Boolean
End Type

Private mudtGrid() As typGrid

Private mlngRow As Long
Private mlngCol As Long

Private mlngWidthMax As Long
Private mlngHeightMax As Long

'|fffd|r|fffd||fffd||fffd||311||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private mlngBorderWeight1 As Long
Private mlngBorderWeight2 As Long

Private Const C_LINE_WIDTH As Long = 2
    
Private Const C_BORDER_NONE     As Long = 0     '|fffd||202||fffd|
Private Const C_BORDER_TOP      As Long = 1     '|fffd||fffd|
Private Const C_BORDER_BOTTOM   As Long = 2     '|fffd||fffd|
Private Const C_BORDER_LEFT     As Long = 4     '|fffd||fffd|
Private Const C_BORDER_RIGHT    As Long = 8     '|fffd|E

Private Const C_BORDER_TOP_BOLD      As Long = 16     '|fffd||fffd|
Private Const C_BORDER_BOTTOM_BOLD   As Long = 32     '|fffd||fffd|
Private Const C_BORDER_LEFT_BOLD     As Long = 64     '|fffd||fffd|
Private Const C_BORDER_RIGHT_BOLD    As Long = 128    '|fffd|E

Private Const C_BORDER_LR As Long = C_BORDER_LEFT + C_BORDER_RIGHT      '|fffd||fffd|(|fffd||60b1|)
Private Const C_BORDER_TB As Long = C_BORDER_TOP + C_BORDER_BOTTOM      '|fffd||fffd|(|fffd||fffd||fffd||fffd|)
Private Const C_BORDER_TL As Long = C_BORDER_TOP + C_BORDER_LEFT        '|fffd||fffd|(|fffd|E|fffd||fffd|)
Private Const C_BORDER_TR As Long = C_BORDER_TOP + C_BORDER_RIGHT       '|fffd||fffd|(|fffd||fffd||fffd||fffd|)
Private Const C_BORDER_BR As Long = C_BORDER_BOTTOM + C_BORDER_RIGHT    '|fffd||fffd|(|fffd||fffd||fffd||fffd|)
Private Const C_BORDER_BL As Long = C_BORDER_BOTTOM + C_BORDER_LEFT     '|fffd||fffd|(|fffd|E|fffd||fffd|)
Private Const C_BORDER_TBR As Long = C_BORDER_TOP + C_BORDER_BOTTOM + C_BORDER_RIGHT    '|fffd||fffd|(|fffd|c|fffd|E)
Private Const C_BORDER_BLT As Long = C_BORDER_BOTTOM + C_BORDER_LEFT + C_BORDER_RIGHT   '|fffd||fffd|(|fffd||fffd||fffd||fffd|)
Private Const C_BORDER_TBL As Long = C_BORDER_TOP + C_BORDER_BOTTOM + C_BORDER_LEFT     '|fffd||fffd|(|fffd|c|fffd||fffd|)
Private Const C_BORDER_TLR As Long = C_BORDER_TOP + C_BORDER_LEFT + C_BORDER_RIGHT      '|fffd||fffd|(|fffd||fffd||fffd||fffd|)
Private Const C_BORDER_CROSS As Long = C_BORDER_TOP + C_BORDER_BOTTOM + C_BORDER_LEFT + C_BORDER_RIGHT  '|fffd||fffd|(|fffd|^|fffd||fffd|)

Private Const C_BORDER_LR_BOLD As Long = C_BORDER_LEFT_BOLD + C_BORDER_RIGHT_BOLD      '|fffd||fffd|(|fffd||60b1|)
Private Const C_BORDER_TB_BOLD As Long = C_BORDER_TOP_BOLD + C_BORDER_BOTTOM_BOLD      '|fffd||fffd|(|fffd||fffd||fffd||fffd|)
Private Const C_BORDER_TL_BOLD As Long = C_BORDER_TOP_BOLD + C_BORDER_LEFT_BOLD        '|fffd||fffd|(|fffd|E|fffd||fffd|)
Private Const C_BORDER_TR_BOLD As Long = C_BORDER_TOP_BOLD + C_BORDER_RIGHT_BOLD       '|fffd||fffd|(|fffd||fffd||fffd||fffd|)
Private Const C_BORDER_BR_BOLD As Long = C_BORDER_BOTTOM_BOLD + C_BORDER_RIGHT_BOLD    '|fffd||fffd|(|fffd||fffd||fffd||fffd|)
Private Const C_BORDER_BL_BOLD As Long = C_BORDER_BOTTOM_BOLD + C_BORDER_LEFT_BOLD     '|fffd||fffd|(|fffd|E|fffd||fffd|)
Private Const C_BORDER_TBR_BOLD As Long = C_BORDER_TOP_BOLD + C_BORDER_BOTTOM_BOLD + C_BORDER_RIGHT_BOLD    '|fffd||fffd|(|fffd|c|fffd|E)
Private Const C_BORDER_BLT_BOLD As Long = C_BORDER_BOTTOM_BOLD + C_BORDER_LEFT_BOLD + C_BORDER_RIGHT_BOLD   '|fffd||fffd|(|fffd||fffd||fffd||fffd|)
Private Const C_BORDER_TBL_BOLD As Long = C_BORDER_TOP_BOLD + C_BORDER_BOTTOM_BOLD + C_BORDER_LEFT_BOLD     '|fffd||fffd|(|fffd|c|fffd||fffd|)
Private Const C_BORDER_TLR_BOLD As Long = C_BORDER_TOP_BOLD + C_BORDER_LEFT_BOLD + C_BORDER_RIGHT_BOLD      '|fffd||fffd|(|fffd||fffd||fffd||fffd|)
Private Const C_BORDER_CROSS_BOLD As Long = C_BORDER_TOP_BOLD + C_BORDER_BOTTOM_BOLD + C_BORDER_LEFT_BOLD + C_BORDER_RIGHT_BOLD  '|fffd||fffd|(|fffd|^|fffd||fffd|)

Private Const C_BORDER_TBR_BH As Long = C_BORDER_TOP_BOLD + C_BORDER_BOTTOM_BOLD + C_BORDER_RIGHT    '|fffd||fffd|(|fffd|c|fffd|E)
Private Const C_BORDER_BLT_BH As Long = C_BORDER_BOTTOM + C_BORDER_LEFT_BOLD + C_BORDER_RIGHT_BOLD   '|fffd||fffd|(|fffd||fffd||fffd||fffd|)
Private Const C_BORDER_TBL_BH As Long = C_BORDER_TOP_BOLD + C_BORDER_BOTTOM_BOLD + C_BORDER_LEFT     '|fffd||fffd|(|fffd|c|fffd||fffd|)
Private Const C_BORDER_TLR_BH As Long = C_BORDER_TOP + C_BORDER_LEFT_BOLD + C_BORDER_RIGHT_BOLD      '|fffd||fffd|(|fffd||fffd||fffd||fffd|)
Private Const C_BORDER_CROSS_BH As Long = C_BORDER_TOP + C_BORDER_BOTTOM + C_BORDER_LEFT_BOLD + C_BORDER_RIGHT_BOLD  '|fffd||fffd|(|fffd|^|fffd||fffd|)

Private Const C_BORDER_TBR_HB As Long = C_BORDER_TOP + C_BORDER_BOTTOM + C_BORDER_RIGHT_BOLD    '|fffd||fffd|(|fffd|c|fffd|E)
Private Const C_BORDER_BLT_HB As Long = C_BORDER_BOTTOM_BOLD + C_BORDER_LEFT + C_BORDER_RIGHT   '|fffd||fffd|(|fffd||fffd||fffd||fffd|)
Private Const C_BORDER_TBL_HB As Long = C_BORDER_TOP + C_BORDER_BOTTOM + C_BORDER_LEFT_BOLD     '|fffd||fffd|(|fffd|c|fffd||fffd|)
Private Const C_BORDER_TLR_HB As Long = C_BORDER_TOP_BOLD + C_BORDER_LEFT + C_BORDER_RIGHT      '|fffd||fffd|(|fffd||fffd||fffd||fffd|)
Private Const C_BORDER_CROSS_HB As Long = C_BORDER_TOP_BOLD + C_BORDER_BOTTOM_BOLD + C_BORDER_LEFT + C_BORDER_RIGHT  '|fffd||fffd|(|fffd|^|fffd||fffd|)

Private Const C_BORDER_TL_BH As Long = C_BORDER_TOP_BOLD + C_BORDER_LEFT             '|fffd||fffd|(|fffd|E|fffd||fffd|)
Private Const C_BORDER_TR_BH As Long = C_BORDER_TOP_BOLD + C_BORDER_RIGHT            '|fffd||fffd|(|fffd||fffd||fffd||fffd|)
Private Const C_BORDER_BR_BH As Long = C_BORDER_BOTTOM_BOLD + C_BORDER_RIGHT         '|fffd||fffd|(|fffd||fffd||fffd||fffd|)
Private Const C_BORDER_BL_BH As Long = C_BORDER_BOTTOM_BOLD + C_BORDER_LEFT          '|fffd||fffd|(|fffd|E|fffd||fffd|)



'|fffd|r|fffd||fffd||fffd||fffd||fffd||fffd||fffd||142||355|\|fffd||fffd||fffd||142||fffd||fffd||202||fffd||fffd||fffd||fffd||fffd|
Private Const C_BORDER_TL_HB As Long = C_BORDER_TOP + C_BORDER_LEFT_BOLD             '|fffd||fffd|(|fffd|E|fffd||fffd|)
Private Const C_BORDER_TR_HB As Long = C_BORDER_TOP + C_BORDER_RIGHT_BOLD            '|fffd||fffd|(|fffd||fffd||fffd||fffd|)
Private Const C_BORDER_BR_HB As Long = C_BORDER_BOTTOM + C_BORDER_RIGHT_BOLD         '|fffd||fffd|(|fffd||fffd||fffd||fffd|)
Private Const C_BORDER_BL_HB As Long = C_BORDER_BOTTOM + C_BORDER_LEFT_BOLD          '|fffd||fffd|(|fffd|E|fffd||fffd|)

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||5c2||fffd||fffd|\|fffd||fffd|
Private Const C_BORDER_CROSS_BOLD_UL As Long = C_BORDER_TOP_BOLD + C_BORDER_BOTTOM + C_BORDER_LEFT_BOLD + C_BORDER_RIGHT_BOLD  '|fffd||fffd|(|fffd|^|fffd||fffd|)
Private Const C_BORDER_CROSS_UB As Long = C_BORDER_TOP + C_BORDER_BOTTOM_BOLD + C_BORDER_LEFT_BOLD + C_BORDER_RIGHT_BOLD  '|fffd||fffd|(|fffd|E|fffd||fffd||fffd||fffd||fffd||5c2||fffd||fffd|\|fffd||fffd|)
Private Const C_BORDER_CROSS_RB As Long = C_BORDER_TOP_BOLD + C_BORDER_BOTTOM_BOLD + C_BORDER_LEFT_BOLD + C_BORDER_RIGHT  '|fffd||fffd|(|fffd|E|fffd||fffd||fffd||fffd||fffd||5c2||fffd||fffd|\|fffd||fffd|)
Private Const C_BORDER_CROSS_LB As Long = C_BORDER_TOP_BOLD + C_BORDER_BOTTOM_BOLD + C_BORDER_LEFT + C_BORDER_RIGHT_BOLD  '|fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||5c2||fffd||fffd|\|fffd||fffd|)

Private Const C_BORDER_TLR_TLBOLD As Long = C_BORDER_TOP_BOLD + C_BORDER_LEFT_BOLD + C_BORDER_RIGHT      '|fffd||fffd|(|fffd||fffd||fffd||fffd|)

Private Const C_SQUARE_TOP_LEFT As Long = 1
Private Const C_SQUARE_TOP_MIDDLE As Long = 2
Private Const C_SQUARE_TOP_RIGHT As Long = 3
Private Const C_SQUARE_LEFT_MIDDLE As Long = 4
Private Const C_SQUARE_RIGHT_MIDDLE As Long = 5
Private Const C_SQUARE_BOTTOM_LEFT As Long = 6
Private Const C_SQUARE_BOTTOM_MIDDLE As Long = 7
Private Const C_SQUARE_BOTTOM_RIGHT As Long = 8

'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd||42f42||fffd|r|fffd||fffd|
'--------------------------------------------------------------
Private Sub kantanLineRun()

    Dim lngJitsuLineMax As Long
    Dim lngIdxRow As Long
    Dim lngIdxCol As Long
    Dim i As Long
    
    mlngRow = Selection.Rows.count
    mlngCol = Selection.Columns.count

    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||30a|m|fffd||fffd|
    ReDim mlngWidth(1 To Selection.Columns.count)
    ReDim mlngMaxColWidth(1 To Selection.Columns.count)
    ReDim mlngHeight(1 To Selection.Rows.count)
    ReDim mudtGrid(1 To mlngRow, 1 To mlngCol)
    ReDim mblnFixColumn(1 To Selection.Columns.count)

    '|fffd||151||555d||fffd||fffd||fffd|A|fffd|r|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||6c2||315||fffd|
    lngJitsuLineMax = mlngMaxKeta - (mlngCol + 1) * 2

    If Selection.Areas.count > 1 Then
        Exit Sub
    End If
    
    '|fffd|\|fffd|f|fffd|[|fffd|^|fffd||303|Z|fffd|b|fffd|g(|fffd||a39f||fffd|j
    Call setGridData

    '|fffd|e|fffd||fffd||30d||151||5305||fffd||fffd||fffd||fffd||fffd||fffd||fffd||7c2||fffd|
    For lngIdxRow = 1 To mlngRow
        For lngIdxCol = 1 To mlngCol
            
           Dim lngLen As Long
           
            '|fffd|}|fffd|[|fffd|W|fffd|Z|fffd||fffd||fffd||20a|O
            If mudtGrid(lngIdxRow, lngIdxCol).ColSpan = 1 Then
                lngLen = mudtGrid(lngIdxRow, lngIdxCol).TextMaxLength
                
                '|fffd||f414||fffd||fffd||fffd||fffd||fffd||fffd||fffd||a347||fffd|{|fffd|P
                If lngLen Mod 2 = 1 Then
                    lngLen = lngLen + 1
                End If
            
                If lngLen > mlngMaxColWidth(lngIdxCol) Then
                    mlngMaxColWidth(lngIdxCol) = lngLen
                End If
               
                If mudtGrid(lngIdxRow, lngIdxCol).NoWrapField Then
                    mblnFixColumn(lngIdxCol) = True
                End If
            End If
        Next
    Next
    
    '|fffd||fffd||fffd||fffd||fffd|Z|fffd||fffd||fffd||315||fffd||fffd||fffd||752||80b7||fffd||fffd|B
    For lngIdxRow = 1 To mlngRow
        For lngIdxCol = 1 To mlngCol
            
            If mudtGrid(lngIdxRow, lngIdxCol).ColSpan > 1 Then
            
                lngLen = mudtGrid(lngIdxRow, lngIdxCol).TextMaxLength
                
                '|fffd||f414||fffd||fffd||fffd||fffd||fffd||fffd||fffd||a347||fffd|{|fffd|P
                If lngLen Mod 2 = 1 Then
                    lngLen = lngLen + 1
                End If
            
                Dim lngSize As Long
                lngSize = 0
                For i = 1 To mudtGrid(lngIdxRow, lngIdxCol).ColSpan
                    lngSize = lngSize + mlngMaxColWidth(lngIdxCol + i - 1)
                Next
                
                '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|Z|fffd||fffd||fffd||313||fffd||fffd|e|fffd||315||fffd||fffd||fffd||fffd||50ab||fffd||fffd||fffd||a347|
                If lngLen > lngSize Then
                
                    Dim lngSa As Long
                    lngSa = (lngLen - lngSize) \ mudtGrid(lngIdxRow, lngIdxCol).ColSpan
                
                    '|fffd||f414||fffd||fffd||fffd||fffd||fffd||fffd||fffd||a347||fffd|{|fffd|P
                    If lngSa Mod 2 = 1 Then
                        lngSa = lngSa + 1
                    End If
                
                    '|fffd||fffd||fffd||fffd||fffd|Z|fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||60a4||fffd||24a|e|fffd|Z|fffd||fffd||fffd||24a||fffd||fffd||fffd|U|fffd||fffd|
                    For i = 1 To mudtGrid(lngIdxRow, lngIdxCol).ColSpan
                        mlngMaxColWidth(lngIdxCol + i - 1) = mlngMaxColWidth(lngIdxCol + i - 1) + lngSa
                    Next
                
                End If
                
            End If
               
        Next
    Next
    
    
    
    '|fffd|\|fffd|S|fffd||302||315||fffd||fffd||fffd||fffd||fffd||fffd||7c2||fffd|B
    mlngWidthMax = 0

    For lngIdxCol = 1 To mlngCol
        mlngWidthMax = mlngWidthMax + mlngMaxColWidth(lngIdxCol)
    Next
    
    '|fffd|\|fffd||315||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||84b4||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||a347|
    If mlngWidthMax > lngJitsuLineMax Then
        '|fffd||fffd||fffd||742||303|Z|fffd||fffd||fffd||fffd||fffd||30a||fffd||fffd||fffd||fffd||249||fffd||fffd||fffd||fffd||10d||151||5305||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|U|fffd||fffd|B

        Dim lngWk As Long
        Dim lngMaxPos As Long
        Dim lngMaxWidth As Long
        Dim lngAmari As Long
        
        '|fffd||152||fffd|t|fffd|B|fffd|[|fffd||fffd||fffd|h|fffd||310||fffd||fffd||10502||fffd||fffd||fffd|
        Dim lngFix As Long
        Dim lngFixSize As Long
        lngFix = 0
        lngFixSize = 0
        For lngIdxCol = 1 To mlngCol
            If mblnFixColumn(lngIdxCol) Then
                lngFix = lngFix + 1
                lngFixSize = lngFixSize + mlngMaxColWidth(lngIdxCol)
            End If
        Next
    
        Dim lngNoFix As Long
        Dim lngNoFixSize As Long
    
        lngNoFix = mlngCol - lngNoFix
        lngNoFixSize = mlngWidthMax - lngFixSize
    
        Dim lngDelSize As Long
        
        lngDelSize = (lngJitsuLineMax - lngFixSize)
        If lngDelSize < 0 Then
            lngDelSize = 0
        End If
    
        For lngIdxCol = 1 To mlngCol
            '|fffd||fffd||fffd||fffd||fffd||14a|e|fffd||fffd||315||fffd||fffd||fffd||fffd|v|fffd|Z|fffd||fffd||fffd||fffd|B
            If mblnFixColumn(lngIdxCol) Then
                mlngWidth(lngIdxCol) = mlngMaxColWidth(lngIdxCol)
            Else
                mlngWidth(lngIdxCol) = Fix(lngDelSize * (mlngMaxColWidth(lngIdxCol) / lngNoFixSize))
                '|fffd||f414||fffd||242||202||fffd||fffd||102||fffd||fffd||702||fffd||fffd||fffd||fffd||a347||fffd|||fffd|P
                If mlngWidth(lngIdxCol) Mod 2 = 1 Then
                    mlngWidth(lngIdxCol) = mlngWidth(lngIdxCol) - 1
                End If
                If mlngWidth(lngIdxCol) <= 1 Then
                    mlngWidth(lngIdxCol) = 2
                End If
            End If
            
            If lngMaxWidth < mlngWidth(lngIdxCol) Then
                '|fffd||151||fffd||317||fffd||fffd||fffd||fffd||fffd||7c2||fffd|B
                lngMaxWidth = mlngWidth(lngIdxCol)
                lngMaxPos = lngIdxCol
            End If
            lngWk = lngWk + mlngWidth(lngIdxCol)
        Next

        '|fffd||fffd||14d||151||fffd||302||fffd||fffd||302||257|]|fffd||fffd||fffd||fffd||42e42||fffd|
        lngAmari = lngJitsuLineMax - lngWk
        If lngAmari < 0 Then
            lngAmari = 0
        End If
        mlngWidth(lngMaxPos) = mlngWidth(lngMaxPos) + lngAmari
        
    Else
        For lngIdxCol = 1 To mlngCol
            mlngWidth(lngIdxCol) = mlngMaxColWidth(lngIdxCol)
        Next
        
    End If
    
    '|fffd|\|fffd|f|fffd|[|fffd|^|fffd||303|Z|fffd|b|fffd|g(|fffd||4e7c1|j
    '|fffd||fffd||fffd||80b5||fffd||fffd||fffd||fffd||fffd||153||fffd||fffd|e|fffd||fffd||fffd||82||7c2||202||fffd||fffd||fffd||fffd|B
    Call setGridData

    '|fffd|e|fffd|s|fffd||30d||151||fffd||30d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||7c2||fffd|B
    For lngIdxRow = 1 To mlngRow
        For lngIdxCol = 1 To mlngCol
            
            If mudtGrid(lngIdxRow, lngIdxCol).RowSpan = 1 Then
                lngLen = mudtGrid(lngIdxRow, lngIdxCol).TextCount
                If lngLen > mlngHeight(lngIdxRow) Then
                   mlngHeight(lngIdxRow) = lngLen
                End If
            End If
        Next
    Next
    
    '|fffd|e|fffd|s|fffd||30d||151||fffd||30d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||7c2||fffd|B
    For lngIdxRow = 1 To mlngRow
        For lngIdxCol = 1 To mlngCol
        
            If mudtGrid(lngIdxRow, lngIdxCol).RowSpan > 1 Then
                
                lngLen = mudtGrid(lngIdxRow, lngIdxCol).TextCount
                
                lngSize = 0
                For i = 1 To mudtGrid(lngIdxRow, lngIdxCol).RowSpan
                    lngSize = lngSize + mlngHeight(lngIdxRow + i - 1)
                Next
                
                '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|Z|fffd||fffd||fffd||313||fffd||fffd|e|fffd||315||fffd||fffd||fffd||fffd||50ab||fffd||fffd||fffd||a347|
                If lngLen > lngSize Then
                
                    lngSa = (lngLen - lngSize) \ mudtGrid(lngIdxRow, lngIdxCol).ColSpan
                
                    '|fffd||fffd||fffd||fffd||fffd|Z|fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||60a4||fffd||24a|e|fffd|Z|fffd||fffd||fffd||24a||fffd||fffd||fffd|U|fffd||fffd|
                    For i = 1 To mudtGrid(lngIdxRow, lngIdxCol).RowSpan
                        mlngHeight(lngIdxRow + i - 1) = mlngHeight(lngIdxRow + i - 1) + lngSa
                    Next
                
                End If
            
            End If
        Next
    Next
    
'                Dim lngMod As Long
'                Dim lngAns As Long
'                lngLen = mudtGrid(lngIdxRow, lngIdxCol).TextCount
'                lngAns = lngLen \ mudtGrid(lngIdxRow, lngIdxCol).RowSpan
'                lngMod = lngLen Mod mudtGrid(lngIdxRow, lngIdxCol).RowSpan
'                lngLen = lngAns + lngMod
    
    
    
    '|fffd|\|fffd||30d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||7c2||fffd|B
    mlngHeightMax = 0

    For lngIdxRow = 1 To mlngRow
        mlngHeightMax = mlngHeightMax + mlngHeight(lngIdxRow)
    Next
    
    '|fffd|r|fffd||fffd||fffd||30d||c42c|
    Dim strGrid As String
    strGrid = drawGridData()
    
    putClipboard strGrid
    
    txtPreview.Text = strGrid
    
End Sub
'--------------------------------------------------------------
'|fffd|@|fffd|r|fffd||fffd||fffd||30d||c42c|
'--------------------------------------------------------------
Private Function drawGridData() As String

    Dim bytGrid() As Byte
    Dim strGrid As String
    Dim strClipBoard As String
    
    strGrid = ""

    Dim lngLineCount As Long
    Dim lngLine As Long
    Dim lngColCount As Long
    Dim lngIdxRow As Long
    Dim lngIdxCol As Long
    Dim lngIdxHeight As Long
    Dim lngPos As Long
    Dim i As Long
    Dim lngTextCount As Long
    
    lngLineCount = 0
    
    '|fffd||fffd||fffd||5c2||102||30d|s|fffd||fffd||fffd||fffd||fffd||fffd||fffd||7c2||fffd|B
    For lngIdxRow = 1 To mlngRow
        lngLineCount = lngLineCount + mlngHeight(lngIdxRow)
    Next
    lngLineCount = lngLineCount + (mlngRow + 1)

    For lngIdxCol = 1 To mlngCol
        lngColCount = lngColCount + mlngWidth(lngIdxCol)
    Next
    lngColCount = lngColCount + (mlngCol + 1) * 2

    ReDim bytGrid(1 To lngLineCount, 1 To lngColCount)

    '|fffd|X|fffd|y|fffd|[|fffd|X|fffd||14f||fffd||fffd||fffd||fffd||fffd|
    For lngIdxRow = 1 To lngLineCount
        For lngIdxCol = 1 To lngColCount
            bytGrid(lngIdxRow, lngIdxCol) = &H20
        Next
    Next

    '|fffd||fffd||fffd||fffd||fffd|Z|fffd||fffd||fffd||313||fffd||fffd||fffd||fffd||310||fffd||fffd||fffd||fffd|N|fffd||fffd||fffd|A|fffd||fffd||fffd||fffd|B
    clearInsideLine
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||80b7||fffd||fffd|B
    checkWeight

    '--------------------------------------------------------------
    '|fffd|@|fffd|r|fffd||fffd||fffd||315|`|fffd||fffd|
    '--------------------------------------------------------------
    lngLine = 1
    For lngIdxRow = 1 To mlngRow

        '|fffd||fffd||fffd|
        strGrid = ""
        For lngIdxCol = 1 To mlngCol

            strGrid = strGrid & getLineData(lngIdxRow, lngIdxCol, C_SQUARE_TOP_LEFT)

            Dim strParts As String
            strParts = getLineData(lngIdxRow, lngIdxCol, C_SQUARE_TOP_MIDDLE)
            Dim strMiddle As String
            strMiddle = ""

            Do Until rlxAscLen(strMiddle) >= mlngWidth(lngIdxCol)
                strMiddle = strMiddle & strParts
            Loop
            strGrid = strGrid & strMiddle

            If lngIdxCol = mlngCol Then
                strGrid = strGrid & getLineData(lngIdxRow, lngIdxCol, C_SQUARE_TOP_RIGHT)
            End If

        Next
        Call setByte(strGrid, bytGrid(), lngLine, 1)
        lngLine = lngLine + 1

        '|fffd||fffd||fffd|g
        For lngIdxHeight = 1 To mlngHeight(lngIdxRow)
            strGrid = ""
            For lngIdxCol = 1 To mlngCol

                strGrid = strGrid & getLineData(lngIdxRow, lngIdxCol, C_SQUARE_LEFT_MIDDLE)
                
                strGrid = strGrid & Space$(mlngWidth(lngIdxCol))

                If lngIdxCol = mlngCol Then
                    strGrid = strGrid & getLineData(lngIdxRow, lngIdxCol, C_SQUARE_RIGHT_MIDDLE)
                End If

            Next
            Call setByte(strGrid, bytGrid, lngLine, 1)
            lngLine = lngLine + 1
        Next
        
        '|fffd||fffd||fffd||fffd|
        If lngIdxRow = mlngRow Then
            strGrid = ""
            For lngIdxCol = 1 To mlngCol

                strGrid = strGrid & getLineData(lngIdxRow, lngIdxCol, C_SQUARE_BOTTOM_LEFT)

                strParts = getLineData(lngIdxRow, lngIdxCol, C_SQUARE_BOTTOM_MIDDLE)

                strMiddle = ""

                Do Until rlxAscLen(strMiddle) >= mlngWidth(lngIdxCol)
                    strMiddle = strMiddle & strParts
                Loop
                strGrid = strGrid & strMiddle


                If lngIdxCol = mlngCol Then
                    strGrid = strGrid & getLineData(lngIdxRow, lngIdxCol, C_SQUARE_BOTTOM_RIGHT)
                End If

            Next
            Call setByte(strGrid, bytGrid, lngLine, 1)
            lngLine = lngLine + 1
        End If
    Next

    '--------------------------------------------------------------
    '|fffd|@|fffd|l|fffd||315|`|fffd||fffd|
    '--------------------------------------------------------------
'    lngLine = 1
'    For lngIdxRow = 1 To mlngRow
'
'        '|fffd|r|fffd||fffd||fffd||fffd|
'        lngLine = lngLine + 1
'
'        For lngIdxHeight = 1 To mlngHeight(lngIdxRow)
'
'            strGrid = ""
'            For lngIdxCol = 1 To mlngCol
'
'                Dim lngShift As Long
'                '|fffd|A|fffd||fffd||fffd|Z|fffd||fffd||fffd||30f||a347|
'                If mudtGrid(lngIdxRow, lngIdxCol).RowSpan > 1 Then
'
'                    Dim lngHeight As Long
'                    lngHeight = 0
'                    For i = 0 To mudtGrid(lngIdxRow, lngIdxCol).RowSpan - 1
'                        lngHeight = lngHeight + mlngHeight(lngIdxRow + i)
'                    Next
'                    lngHeight = lngHeight + mudtGrid(lngIdxRow, lngIdxCol).RowSpan - 1
'                    Select Case mudtGrid(lngIdxRow, lngIdxCol).vAlign
'                        Case xlGeneral, xlTop
'                            lngShift = 0
'                        Case xlCenter
'                            lngShift = (lngHeight - mudtGrid(lngIdxRow, lngIdxCol).TextCount) \ 2
'                        Case xlBottom
'                            lngShift = lngHeight - mudtGrid(lngIdxRow, lngIdxCol).TextCount
'                    End Select
'
'                Else
'                    lngShift = 0
'                End If
'
'                If lngIdxHeight <= mudtGrid(lngIdxRow, lngIdxCol).TextCount Then
'                    If mudtGrid(lngIdxRow, lngIdxCol).ColSpan > 1 Then
'
'                        Dim lngSize As Long
'
'                        lngSize = 0
'                        For i = 0 To mudtGrid(lngIdxRow, lngIdxCol).ColSpan - 1
'                            lngSize = lngSize + mlngWidth(lngIdxCol + i)
'                        Next
'                        '|fffd|r|fffd||fffd||fffd||fffd||fffd||fffd||fffd|v|fffd||fffd||fffd|X
'                        lngSize = lngSize + (mudtGrid(lngIdxRow, lngIdxCol).ColSpan - 1) * 2
'                        strGrid = setAlign(mudtGrid(lngIdxRow, lngIdxCol).Text(lngIdxHeight), lngSize, mudtGrid(lngIdxRow, lngIdxCol).Align)
'
'                    Else
'                        strGrid = setAlign(mudtGrid(lngIdxRow, lngIdxCol).Text(lngIdxHeight), mlngWidth(lngIdxCol), mudtGrid(lngIdxRow, lngIdxCol).Align)
'                    End If
'
'                    lngPos = getPos(lngIdxCol)
'                    Call setByte(strGrid, bytGrid, lngLine + lngShift, lngPos)
'
'                End If
'
'            Next
'            lngLine = lngLine + 1
'
'        Next
'
'    Next


    lngLine = 1
    For lngIdxRow = 1 To mlngRow

        '|fffd|r|fffd||fffd||fffd||fffd|
        lngLine = lngLine + 1


        strGrid = ""
        For lngIdxCol = 1 To mlngCol


            For lngTextCount = 1 To mudtGrid(lngIdxRow, lngIdxCol).TextCount

                Dim lngShift As Long
                '|fffd|A|fffd||fffd||fffd|Z|fffd||fffd||fffd||30f||a347|
                If mudtGrid(lngIdxRow, lngIdxCol).RowSpan > 1 Then

                    Dim lngHeight As Long

                    lngHeight = lngTextCount - 1
                    For i = 0 To mudtGrid(lngIdxRow, lngIdxCol).RowSpan - 1
                        lngHeight = lngHeight + mlngHeight(lngIdxRow + i)
                    Next

                    lngHeight = lngHeight + mudtGrid(lngIdxRow, lngIdxCol).RowSpan - 1
                    Select Case mudtGrid(lngIdxRow, lngIdxCol).vAlign
                        Case xlGeneral, xlTop
                            lngShift = 0
                        Case xlCenter
                            lngShift = (lngHeight - mudtGrid(lngIdxRow, lngIdxCol).TextCount) \ 2
                        Case xlBottom
                            lngShift = lngHeight - mudtGrid(lngIdxRow, lngIdxCol).TextCount
                    End Select


                Else
                    lngShift = 0
                End If


                If mudtGrid(lngIdxRow, lngIdxCol).ColSpan > 1 Then

                    Dim lngSize As Long

                    lngSize = 0
                    For i = 0 To mudtGrid(lngIdxRow, lngIdxCol).ColSpan - 1
                        lngSize = lngSize + mlngWidth(lngIdxCol + i)
                    Next
                    '|fffd|r|fffd||fffd||fffd||fffd||fffd||fffd||fffd|v|fffd||fffd||fffd|X
                    lngSize = lngSize + (mudtGrid(lngIdxRow, lngIdxCol).ColSpan - 1) * 2
                    strGrid = setAlign(mudtGrid(lngIdxRow, lngIdxCol).Text(lngTextCount), lngSize, mudtGrid(lngIdxRow, lngIdxCol).Align)

                Else
                
                    Select Case mudtGrid(lngIdxRow, lngIdxCol).vAlign
                        Case xlGeneral, xlTop
                            lngShift = 0
                        Case xlCenter
                            lngShift = (mlngHeight(lngIdxRow) - mudtGrid(lngIdxRow, lngIdxCol).TextCount) \ 2
                        Case xlBottom
                            lngShift = mlngHeight(lngIdxRow) - mudtGrid(lngIdxRow, lngIdxCol).TextCount
                    End Select
                    
                    strGrid = setAlign(mudtGrid(lngIdxRow, lngIdxCol).Text(lngTextCount), mlngWidth(lngIdxCol), mudtGrid(lngIdxRow, lngIdxCol).Align)
                
                End If
                
                If lngShift < 0 Then
                    lngShift = 0
                End If
                lngShift = lngShift + lngTextCount - 1

                lngPos = getPos(lngIdxCol)
                Call setByte(strGrid, bytGrid, lngLine + lngShift, lngPos)

           Next

        Next
        lngLine = lngLine + mlngHeight(lngIdxRow)

    Next



    '--------------------------------------------------------------
    '|fffd|@|fffd||fffd||fffd||fffd||fffd||fffd||311|g|fffd||757||fffd||fffd||fffd|
    '--------------------------------------------------------------
    Dim strBuf As String
    strClipBoard = ""
    For lngIdxRow = 1 To lngLineCount
        strBuf = ""
        For lngIdxCol = 1 To lngColCount
            strBuf = strBuf & ChrB(bytGrid(lngIdxRow, lngIdxCol))
        Next
        strClipBoard = strClipBoard & strConv(strBuf, vbUnicode) & vbCrLf
    Next

    drawGridData = strClipBoard

End Function
'--------------------------------------------------------------
'|fffd|@|fffd|`|fffd||6305||fffd||30e||64fe|
'--------------------------------------------------------------
Private Function getPos(ByVal lngIdxCol As Long) As Long

    Dim i As Long
    Dim lngPos As Long

    lngPos = 1 + C_LINE_WIDTH
    For i = 1 To lngIdxCol - 1
        lngPos = lngPos + mlngWidth(i) + C_LINE_WIDTH
    Next

    getPos = lngPos

End Function
'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|o|fffd|C|fffd|g|fffd|^|fffd|z|fffd||fffd||250||752||fffd|
'--------------------------------------------------------------
Private Sub setByte(ByVal strBuf As String, ByRef bytBuf() As Byte, ByVal lngLine As Long, ByVal lngPos As Long)

    Dim lngStart As Long
    Dim lngEnd As Long
    Dim lngIdx As Long
    Dim lngTerm As Long
    
    Dim strSjis As String
    
    strSjis = strConv(strBuf, vbFromUnicode)
    
    lngStart = 1
    lngEnd = LenB(strSjis)
    
    '|fffd|K|fffd||fffd||fffd|Q|fffd|o|fffd|C|fffd|g|fffd||fffd||fffd||90||752||fffd|
    If lngEnd Mod 2 = 1 Then
        strSjis = strSjis & ChrB(&H20)
        lngEnd = lngEnd + 1
    End If
    
    lngTerm = UBound(bytBuf, 2)
    
    For lngIdx = lngStart To lngEnd
    
        '|fffd|z|fffd||fffd||20f||fffd||30f||a347||fffd||752||80b5||fffd||202||fffd|
        If lngPos > lngTerm Then
            Exit For
        End If
        
        bytBuf(lngLine, lngPos) = AscB(MidB$(strSjis, lngIdx, 1))
        lngPos = lngPos + 1
        
    Next

End Sub
'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd||fffd||fffd||314|z|fffd|u
'--------------------------------------------------------------
Private Function setAlign(ByVal strValue As String, ByVal lngSize As Long, ByVal lngAlign As Long) As String

    Dim strResult As String
    Dim lngLen As Long
    Dim lngLeft As Long

    lngLen = rlxAscLen(strValue)
    
    If lngLen = 0 Then
        setAlign = ""
        Exit Function
    End If
    
    If lngSize - lngLen < 0 Then
        setAlign = strValue
        Exit Function
    End If

    Select Case lngAlign
        Case xlGeneral, xlLeft
            strResult = strValue
            
        Case xlRight
            strResult = Space(lngSize - lngLen) & strValue
        
        Case xlCenter
            lngLeft = (lngSize - lngLen) \ 2
            strResult = Space(lngLeft) & strValue
            
    End Select

    setAlign = strResult

End Function
'--------------------------------------------------------------
'|fffd|@|fffd|e|fffd|Z|fffd||fffd||fffd||313||fffd||fffd|e|fffd||fffd||fffd||fffd||fffd|[|fffd|N|fffd|G|fffd||fffd||fffd|A|fffd||255||6ce||fffd|
'--------------------------------------------------------------
Private Sub setGridData()

    Dim strSrc As String
    Dim lngNewSize As Long
    Dim strBuf As String
    Dim strChr As String
    Dim lngLine As Long
    Dim strLine() As String
    Dim i As Long
    Dim lngLineLen As Long

    Dim lngLen As Long
    
    Dim lngIdxRow As Long
    Dim lngIdxCol As Long
    'Dim i As Long

    
    
    For lngIdxRow = 1 To mlngRow
        For lngIdxCol = 1 To mlngCol

            strSrc = Selection(lngIdxRow, lngIdxCol).Text
            lngNewSize = mlngWidth(lngIdxCol)
            
            '|fffd|}|fffd|[|fffd|W|fffd|Z|fffd||fffd||fffd||30f||a347|
            If Selection(lngIdxRow, lngIdxCol).MergeCells Then
                If Selection(lngIdxRow, lngIdxCol).MergeArea(1, 1).Address = Selection(lngIdxRow, lngIdxCol).Address Then
                    lngNewSize = 0
                    For i = 0 To Selection(lngIdxRow, lngIdxCol).MergeArea.Columns.count - 1
                        lngNewSize = lngNewSize + mlngWidth(lngIdxCol + i)
                    Next
                End If
            End If
            
            If lngNewSize = 0 Then
                lngNewSize = C_DEFAULT_COL
            End If
            
            '|fffd|e|fffd||d46e||fffd||fffd||fffd||752||fffd|
'|fffd|b|fffd||fffd| |fffd||182||80a0||fffd||fffd||fffd||fffd||fffd|S|fffd||fffd||fffd||702||fffd||502||fffd||fffd|B
'            mudtGrid(lngIdxRow, lngIdxCol).WrapText = Selection(lngIdxRow, lngIdxCol).WrapText
            mudtGrid(lngIdxRow, lngIdxCol).WrapText = True
            
            '|fffd||fffd||fffd||292|u|fffd||fffd||fffd|W|fffd||fffd||fffd||20a|O|fffd||142||fffd||fffd||fffd||382||fffd||fffd||fffd||242||fffd||fffd||d0b9||fffd||fffd|
            Select Case Selection(lngIdxRow, lngIdxCol).HorizontalAlignment
                Case xlGeneral
                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||7376||fffd||fffd|
                    Select Case True
                        Case Selection(lngIdxRow, lngIdxCol).NumberFormatLocal = "@"
                            mudtGrid(lngIdxRow, lngIdxCol).Align = xlLeft
                            
                        Case IsNumeric(Selection(lngIdxRow, lngIdxCol).Value)
                            '|fffd||fffd||fffd|l|fffd||30f||a347||fffd|A|fffd|E|fffd||fffd|
                            mudtGrid(lngIdxRow, lngIdxCol).Align = xlRight
                        
                        Case IsDate(Selection(lngIdxRow, lngIdxCol).Value)
                            '|fffd||fffd||fffd|t|fffd||30f||a347||fffd|A|fffd|E|fffd||fffd|
                            mudtGrid(lngIdxRow, lngIdxCol).Align = xlRight
                            
                        Case Else
                            mudtGrid(lngIdxRow, lngIdxCol).Align = xlLeft
                    End Select
                    
                Case xlFill, xlJustify
                    '|fffd|J|fffd||fffd||502||fffd|,|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd|
                    mudtGrid(lngIdxRow, lngIdxCol).Align = xlLeft
                
                Case xlCenterAcrossSelection, xlDistributed
                    '|fffd|I|fffd||fffd||348||353||fffd||fffd||152||fffd||fffd||fffd|, |fffd||3d3||fffd||fffd||fffd||fffd||fffd|t|fffd||fffd|
                    mudtGrid(lngIdxRow, lngIdxCol).Align = xlCenter
                
                Case Else
                    mudtGrid(lngIdxRow, lngIdxCol).Align = Selection(lngIdxRow, lngIdxCol).HorizontalAlignment
            End Select
            
            '|fffd|c|fffd||292|u
            Select Case Selection(lngIdxRow, lngIdxCol).VerticalAlignment
                Case xlJustify
                    mudtGrid(lngIdxRow, lngIdxCol).vAlign = xlTop
                Case xlDistributed
                    mudtGrid(lngIdxRow, lngIdxCol).vAlign = xlCenter
                Case Else
                    mudtGrid(lngIdxRow, lngIdxCol).vAlign = Selection(lngIdxRow, lngIdxCol).VerticalAlignment
            End Select
            
            Select Case True
                Case IsNumeric(Selection(lngIdxRow, lngIdxCol).Text) And mudtGrid(lngIdxRow, lngIdxCol).Align = xlRight
                    '|fffd||fffd||fffd|l|fffd||30f||a347||fffd|Aword wrap|fffd||fffd||fffd||202||fffd|
                    mudtGrid(lngIdxRow, lngIdxCol).NoWrapField = True
                
                Case IsDate(Selection(lngIdxRow, lngIdxCol).Value) And mudtGrid(lngIdxRow, lngIdxCol).Align = xlRight
                    '|fffd||fffd||fffd|t|fffd||30f||a347||fffd|Aword wrap|fffd||fffd||fffd||202||fffd|
                    mudtGrid(lngIdxRow, lngIdxCol).NoWrapField = True
            
                Case Else
                    mudtGrid(lngIdxRow, lngIdxCol).NoWrapField = False
                    
            End Select
            
            lngLen = Len(strSrc)
            lngLine = 0
            strBuf = ""
            
            Erase strLine
            For i = 1 To lngLen
            
                strChr = Mid(strSrc, i, 1)
                
                Select Case True
                    Case strChr = vbCrLf
                        '|fffd||fffd||fffd|s|fffd|R|fffd|[|fffd|h|fffd||30f||a347|
                        lngLine = lngLine + 1
                        ReDim Preserve strLine(1 To lngLine)
                        strLine(lngLine) = strBuf
                
                        '|fffd||fffd||fffd|s|fffd|R|fffd|[|fffd|h|fffd||fffd||fffd||302||102||fffd|
                        strBuf = ""
                
                    Case strChr = vbLf Or strChr = vbCr
                        '|fffd||fffd||fffd|s|fffd|R|fffd|[|fffd|h|fffd||30f||a347|
                        lngLine = lngLine + 1
                        ReDim Preserve strLine(1 To lngLine)
                        strLine(lngLine) = strBuf
                
                        '|fffd||fffd||fffd|s|fffd|R|fffd|[|fffd|h|fffd||fffd||fffd||302||102||fffd|
                        strBuf = ""
                
                    Case rlxAscLen(strBuf & strChr) > lngNewSize And mudtGrid(lngIdxRow, lngIdxCol).WrapText = True And mudtGrid(lngIdxRow, lngIdxCol).NoWrapField = False
'                    Case rlxAscLen(strBuf & strChr)
                        '|fffd||fffd||fffd||12d02||fffd||fffd||fffd||a347|
                        lngLine = lngLine + 1
                        ReDim Preserve strLine(1 To lngLine)
                        strLine(lngLine) = strBuf
                        
                        '|fffd|o|fffd|b|fffd|t|fffd|@|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        strBuf = strChr
                
                    Case Else
                        strBuf = strBuf & strChr
                        
                End Select
            
            Next
            
            lngLine = lngLine + 1
            ReDim Preserve strLine(1 To lngLine)
            strLine(lngLine) = strBuf
            
            mudtGrid(lngIdxRow, lngIdxCol).Text = strLine
            mudtGrid(lngIdxRow, lngIdxCol).TextCount = lngLine
            
            mudtGrid(lngIdxRow, lngIdxCol).ColSpan = 1
            mudtGrid(lngIdxRow, lngIdxCol).RowSpan = 1
            
            If Selection(lngIdxRow, lngIdxCol).MergeCells Then
                If Selection(lngIdxRow, lngIdxCol).MergeArea(1, 1).Address = Selection(lngIdxRow, lngIdxCol).Address Then
                    mudtGrid(lngIdxRow, lngIdxCol).ColSpan = Selection(lngIdxRow, lngIdxCol).MergeArea.Columns.count
                    mudtGrid(lngIdxRow, lngIdxCol).RowSpan = Selection(lngIdxRow, lngIdxCol).MergeArea.Rows.count
                End If
            End If
            
            Dim lngMaxWork As Long
            lngMaxWork = 0
            For i = 1 To lngLine

                Dim lngWk As Long
                lngWk = rlxAscLen(mudtGrid(lngIdxRow, lngIdxCol).Text(i))
            
                If lngWk > lngMaxWork Then
                    lngMaxWork = lngWk
                End If
                
            Next
            mudtGrid(lngIdxRow, lngIdxCol).TextMaxLength = lngMaxWork
            
'            mudtGrid(lngIdxRow, lngIdxCol).WrapText = Selection(lngIdxRow, lngIdxCol).WrapText
'
'            '|fffd||fffd||fffd||292|u|fffd||fffd||fffd|W|fffd||fffd||fffd||20a|O|fffd||142||fffd||fffd||fffd||382||fffd||fffd||fffd||242||fffd||fffd||d0b9||fffd||fffd|
'            Select Case Selection(lngIdxRow, lngIdxCol).HorizontalAlignment
'                Case xlGeneral
'                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||7376||fffd||fffd|
'                    Select Case True
'                        Case Selection(lngIdxRow, lngIdxCol).NumberFormatLocal = "@"
'                            mudtGrid(lngIdxRow, lngIdxCol).Align = xlLeft
'
'                        Case IsNumeric(Selection(lngIdxRow, lngIdxCol).Value)
'                            '|fffd||fffd||fffd|l|fffd||30f||a347||fffd|A|fffd|E|fffd||fffd|
'                            mudtGrid(lngIdxRow, lngIdxCol).Align = xlRight
'
'                        Case IsDate(Selection(lngIdxRow, lngIdxCol).Value)
'                            '|fffd||fffd||fffd|t|fffd||30f||a347||fffd|A|fffd|E|fffd||fffd|
'                            mudtGrid(lngIdxRow, lngIdxCol).Align = xlRight
'
'                        Case Else
'                            mudtGrid(lngIdxRow, lngIdxCol).Align = xlLeft
'                    End Select
'
'                Case xlFill, xlJustify
'                    '|fffd|J|fffd||fffd||502||fffd|,|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd|
'                    mudtGrid(lngIdxRow, lngIdxCol).Align = xlLeft
'
'                Case xlCenterAcrossSelection, xlDistributed
'                    '|fffd|I|fffd||fffd||348||353||fffd||fffd||152||fffd||fffd||fffd|, |fffd||3d3||fffd||fffd||fffd||fffd||fffd|t|fffd||fffd|
'                    mudtGrid(lngIdxRow, lngIdxCol).Align = xlCenter
'
'                Case Else
'                    mudtGrid(lngIdxRow, lngIdxCol).Align = Selection(lngIdxRow, lngIdxCol).HorizontalAlignment
'            End Select
'
'            '|fffd|c|fffd||292|u
'            Select Case Selection(lngIdxRow, lngIdxCol).VerticalAlignment
'                Case xlJustify
'                    mudtGrid(lngIdxRow, lngIdxCol).vAlign = xlTop
'                Case xlDistributed
'                    mudtGrid(lngIdxRow, lngIdxCol).vAlign = xlCenter
'                Case Else
'                    mudtGrid(lngIdxRow, lngIdxCol).vAlign = Selection(lngIdxRow, lngIdxCol).VerticalAlignment
'            End Select

        Next
    Next
    
End Sub
'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd||fffd|i|fffd|`|fffd|j|fffd||314||fffd||fffd||fffd|
'--------------------------------------------------------------
Private Function getLineData(ByVal lngIdxRow As Long, ByVal lngIdxCol As Long, ByVal lngSquare As Long) As String

    Dim lngResult As Long
    Dim strResult As String

    '|fffd||209||fffd||fffd|A|fffd|R|fffd||fffd||fffd||fffd||fffd|g|fffd||254||50d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||302||355|\|fffd||30f||a3ca||fffd||fffd|\|fffd||fffd|

    '|fffd|P|fffd||fffd||fffd|Q
    '|fffd||fffd||fffd||fffd||fffd||fffd|
    '|fffd|R|fffd||fffd||fffd|S


    Select Case lngSquare
        Case C_SQUARE_TOP_LEFT
            '|fffd||fffd||fffd||fffd|

            '|fffd||fffd||fffd||3120||fffd||fffd|
            '|fffd|@|fffd||fffd||fffd||fffd||fffd||fffd|
            '|fffd|@|fffd||fffd||fffd||fffd||fffd||fffd|


            If lngIdxRow <> 1 And lngIdxCol <> 1 Then
                With Selection(lngIdxRow, lngIdxCol).Offset(-1, -1)  '|fffd|I|fffd||fffd||fffd|Z|fffd||fffd||fffd||30d||fffd||fffd||fffd|i|fffd|P|fffd|j
    
                    If .Borders(xlEdgeBottom).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeBottom).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_LEFT
                            Case Else
                                lngResult = lngResult Or C_BORDER_LEFT_BOLD
                        End Select
                        
                    End If
    
                    If .Borders(xlEdgeRight).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeRight).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_TOP
                            Case Else
                                lngResult = lngResult Or C_BORDER_TOP_BOLD
                        End Select
                    End If
    
                End With
            End If

            If lngIdxRow <> 1 Then
                With Selection(lngIdxRow, lngIdxCol).Offset(-1, 0)   '|fffd|I|fffd||fffd||fffd|Z|fffd||fffd||fffd||30f||fffd|i|fffd|Q|fffd|j
    
                    If .Borders(xlEdgeBottom).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeBottom).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_RIGHT
                            Case Else
                                lngResult = lngResult Or C_BORDER_RIGHT_BOLD
                        End Select
                    End If
    
                    If .Borders(xlEdgeLeft).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeLeft).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_TOP
                            Case Else
                                lngResult = lngResult Or C_BORDER_TOP_BOLD
                        End Select
                    End If
    
                End With
            End If

            If lngIdxCol <> 1 Then
                With Selection(lngIdxRow, lngIdxCol).Offset(0, -1)   '|fffd|I|fffd||fffd||fffd|Z|fffd||fffd||fffd||30d||fffd||fffd|i|fffd|R|fffd|j
    
                    If .Borders(xlEdgeTop).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeTop).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_LEFT
                            Case Else
                                lngResult = lngResult Or C_BORDER_LEFT_BOLD
                        End Select
                    End If
    
                    If .Borders(xlEdgeRight).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeRight).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_BOTTOM
                            Case Else
                                lngResult = lngResult Or C_BORDER_BOTTOM_BOLD
                        End Select
                    End If
    
                End With
            End If

            With Selection(lngIdxRow, lngIdxCol).Offset(0, 0)    '|fffd|I|fffd||fffd||fffd|Z|fffd||fffd||fffd|i|fffd|S)

                If .Borders(xlEdgeTop).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeTop).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_RIGHT
                            Case Else
                                lngResult = lngResult Or C_BORDER_RIGHT_BOLD
                        End Select
                End If

                If .Borders(xlEdgeLeft).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeLeft).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_BOTTOM
                            Case Else
                                lngResult = lngResult Or C_BORDER_BOTTOM_BOLD
                        End Select
                End If

            End With

        Case C_SQUARE_TOP_MIDDLE
            '|fffd||3486|

            '|fffd||fffd|
            '|fffd||fffd|
            '|fffd||fffd|
            If lngIdxRow <> 1 Then
                With Selection(lngIdxRow, lngIdxCol).Offset(-1, 0)   '|fffd|I|fffd||fffd||fffd|Z|fffd||fffd||fffd||30f||fffd|i|fffd|Q|fffd|j
    
                    If .Borders(xlEdgeBottom).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeBottom).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_RIGHT
                            Case Else
                                lngResult = lngResult Or C_BORDER_RIGHT_BOLD
                        End Select
                    End If
    
                End With
            End If

            With Selection(lngIdxRow, lngIdxCol).Offset(0, 0)    '|fffd|I|fffd||fffd||fffd|Z|fffd||fffd||fffd|i|fffd|S)

                If .Borders(xlEdgeTop).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeTop).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_RIGHT
                            Case Else
                                lngResult = lngResult Or C_BORDER_RIGHT_BOLD
                        End Select
                End If

            End With

        Case C_SQUARE_TOP_RIGHT
            '|fffd|E|fffd||fffd|

            '|fffd|@|fffd||3120||fffd|E|fffd||fffd|
            '|fffd|@|fffd||fffd||fffd||fffd||fffd||fffd|
            '|fffd|@|fffd||fffd||fffd||fffd||fffd|E
            If lngIdxRow <> 1 Then
                With Selection(lngIdxRow, lngIdxCol).Offset(-1, 0)   '|fffd||fffd|i|fffd|P|fffd|j
    
                    If .Borders(xlEdgeBottom).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeBottom).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_LEFT
                            Case Else
                                lngResult = lngResult Or C_BORDER_LEFT_BOLD
                        End Select
                    End If
    
                    If .Borders(xlEdgeRight).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeRight).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_TOP
                            Case Else
                                lngResult = lngResult Or C_BORDER_TOP_BOLD
                        End Select
                    End If
    
                End With
            End If
            
            If lngIdxRow <> 1 And lngIdxCol <> mlngCol Then
                With Selection(lngIdxRow, lngIdxCol).Offset(-1, 1)  '|fffd|E|fffd||fffd|i|fffd|Q|fffd|j
    
                    If .Borders(xlEdgeBottom).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeBottom).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_RIGHT
                            Case Else
                                lngResult = lngResult Or C_BORDER_RIGHT_BOLD
                        End Select
                    End If
    
                    If .Borders(xlEdgeLeft).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeLeft).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_TOP
                            Case Else
                                lngResult = lngResult Or C_BORDER_TOP_BOLD
                        End Select
                    End If
    
                End With
            End If

            With Selection(lngIdxRow, lngIdxCol).Offset(0, 0)    '|fffd|I|fffd||fffd||fffd|Z|fffd||fffd||fffd|i|fffd|R|fffd|j

                If .Borders(xlEdgeTop).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeTop).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_LEFT
                            Case Else
                                lngResult = lngResult Or C_BORDER_LEFT_BOLD
                        End Select
                End If

                If .Borders(xlEdgeRight).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeRight).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_BOTTOM
                            Case Else
                                lngResult = lngResult Or C_BORDER_BOTTOM_BOLD
                        End Select
                End If

            End With

            If lngIdxCol <> mlngCol Then
                With Selection(lngIdxRow, lngIdxCol).Offset(0, 1)    '|fffd|E|fffd|i|fffd|S|fffd|j
        
                    If .Borders(xlEdgeTop).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeTop).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_RIGHT
                            Case Else
                                lngResult = lngResult Or C_BORDER_RIGHT_BOLD
                        End Select
                    End If
        
                    If .Borders(xlEdgeLeft).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeLeft).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_BOTTOM
                            Case Else
                                lngResult = lngResult Or C_BORDER_BOTTOM_BOLD
                        End Select
                    End If
        
                End With
            End If

        Case C_SQUARE_LEFT_MIDDLE

            '|fffd||fffd||fffd||fffd|

            '|fffd|@|fffd||fffd||fffd||fffd||fffd||fffd|
            If lngIdxCol <> 1 Then
                With Selection(lngIdxRow, lngIdxCol).Offset(0, -1)   '|fffd||fffd||fffd|i|fffd|P|fffd|j
    
                    If .Borders(xlEdgeRight).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeRight).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_TOP
                            Case Else
                                lngResult = lngResult Or C_BORDER_TOP_BOLD
                        End Select
                    End If
    
                End With
            End If

            With Selection(lngIdxRow, lngIdxCol).Offset(0, 0)    '|fffd|I|fffd||fffd||fffd|Z|fffd||fffd||fffd|i|fffd|Q|fffd|j

                If .Borders(xlEdgeLeft).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeLeft).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_TOP
                            Case Else
                                lngResult = lngResult Or C_BORDER_TOP_BOLD
                        End Select
                End If

            End With

        Case C_SQUARE_RIGHT_MIDDLE

            '|fffd|E|fffd||fffd|

            '|fffd|@|fffd||fffd||fffd||fffd||fffd|E
            If lngIdxCol <> mlngCol Then
                With Selection(lngIdxRow, lngIdxCol).Offset(0, 1)   '|fffd|E|fffd|i|fffd|P|fffd|j
    
                    If .Borders(xlEdgeLeft).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeLeft).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_TOP
                            Case Else
                                lngResult = lngResult Or C_BORDER_TOP_BOLD
                        End Select
                    End If
    
                End With
            End If

            With Selection(lngIdxRow, lngIdxCol).Offset(0, 0)    '|fffd|I|fffd||fffd||fffd|Z|fffd||fffd||fffd|i|fffd|Q|fffd|j

                If .Borders(xlEdgeRight).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeRight).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_TOP
                            Case Else
                                lngResult = lngResult Or C_BORDER_TOP_BOLD
                        End Select
                End If

            End With

        Case C_SQUARE_BOTTOM_LEFT

            '|fffd||fffd||fffd||fffd|

            '|fffd|@|fffd||fffd||fffd||fffd||fffd||fffd|
            '|fffd|@|fffd||fffd||fffd||fffd||fffd||fffd|
            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If lngIdxCol <> 1 Then
                With Selection(lngIdxRow, lngIdxCol).Offset(0, -1)   '|fffd||fffd||fffd|i|fffd|P|fffd|j
    
                    If .Borders(xlEdgeBottom).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeBottom).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_LEFT
                            Case Else
                                lngResult = lngResult Or C_BORDER_LEFT_BOLD
                        End Select
                    End If
    
                    If .Borders(xlEdgeRight).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeRight).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_TOP
                            Case Else
                                lngResult = lngResult Or C_BORDER_TOP_BOLD
                        End Select
                    End If
    
                End With
            End If

            With Selection(lngIdxRow, lngIdxCol).Offset(0, 0)    '|fffd|I|fffd||fffd||fffd|Z|fffd||fffd||fffd|i|fffd|Q|fffd|j

                If .Borders(xlEdgeBottom).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeBottom).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_RIGHT
                            Case Else
                                lngResult = lngResult Or C_BORDER_RIGHT_BOLD
                        End Select
                End If

                If .Borders(xlEdgeLeft).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeLeft).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_TOP
                            Case Else
                                lngResult = lngResult Or C_BORDER_TOP_BOLD
                        End Select
                End If

            End With

            If lngIdxRow <> mlngRow And lngIdxCol <> 1 Then
                With Selection(lngIdxRow, lngIdxCol).Offset(1, -1)   '|fffd||fffd||fffd||fffd||fffd|i|fffd|R|fffd|j
    
                    If .Borders(xlEdgeTop).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeTop).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_LEFT
                            Case Else
                                lngResult = lngResult Or C_BORDER_LEFT_BOLD
                        End Select
                    End If
    
                    If .Borders(xlEdgeRight).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeRight).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_BOTTOM
                            Case Else
                                lngResult = lngResult Or C_BORDER_BOTTOM_BOLD
                        End Select
                    End If
    
                End With
            End If

            If lngIdxRow <> mlngRow Then
                With Selection(lngIdxRow, lngIdxCol).Offset(1, 0)    '|fffd||fffd||fffd|i|fffd|S|fffd|j
    
                    If .Borders(xlEdgeTop).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeTop).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_RIGHT
                            Case Else
                                lngResult = lngResult Or C_BORDER_RIGHT_BOLD
                        End Select
                    End If
    
                    If .Borders(xlEdgeLeft).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeLeft).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_BOTTOM
                            Case Else
                                lngResult = lngResult Or C_BORDER_BOTTOM_BOLD
                        End Select
                    End If
    
                End With
            End If

        Case C_SQUARE_BOTTOM_MIDDLE

            '|fffd||fffd||fffd||fffd|

            '|fffd||fffd|
            '|fffd||fffd|
            '|fffd||fffd|
            With Selection(lngIdxRow, lngIdxCol).Offset(0, 0)    '|fffd|I|fffd||fffd||fffd|Z|fffd||fffd||fffd|i|fffd|Q|fffd|j

                If .Borders(xlEdgeBottom).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeBottom).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_RIGHT
                            Case Else
                                lngResult = lngResult Or C_BORDER_RIGHT_BOLD
                        End Select
                End If

            End With

            If lngIdxRow <> mlngRow Then
                With Selection(lngIdxRow, lngIdxCol).Offset(1, 0)    '|fffd||fffd||fffd|i|fffd|S|fffd|j
    
                    If .Borders(xlEdgeTop).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeTop).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_RIGHT
                            Case Else
                                lngResult = lngResult Or C_BORDER_RIGHT_BOLD
                        End Select
                    End If
    
                End With
            End If

        Case C_SQUARE_BOTTOM_RIGHT
            '|fffd|E|fffd||fffd|

            '|fffd|@|fffd||fffd||fffd||fffd||fffd|E
            '|fffd|@|fffd||fffd||fffd||fffd||fffd||fffd|
            '|fffd|@|fffd||fffd||fffd||fffd||fffd|E|fffd||fffd|
            With Selection(lngIdxRow, lngIdxCol).Offset(0, 0)    '|fffd|I|fffd||fffd||fffd|Z|fffd||fffd||fffd|i|fffd|P|fffd|j

                If .Borders(xlEdgeBottom).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeBottom).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_LEFT
                            Case Else
                                lngResult = lngResult Or C_BORDER_LEFT_BOLD
                        End Select
                End If

                If .Borders(xlEdgeRight).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeRight).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_TOP
                            Case Else
                                lngResult = lngResult Or C_BORDER_TOP_BOLD
                        End Select
                End If

            End With

            If lngIdxCol <> mlngCol Then
                With Selection(lngIdxRow, lngIdxCol).Offset(0, 1)   '|fffd|E|fffd|i|fffd|Q|fffd|j
    
                    If .Borders(xlEdgeBottom).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeBottom).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_RIGHT
                            Case Else
                                lngResult = lngResult Or C_BORDER_RIGHT_BOLD
                        End Select
                    End If
    
                    If .Borders(xlEdgeLeft).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeLeft).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_TOP
                            Case Else
                                lngResult = lngResult Or C_BORDER_TOP_BOLD
                        End Select
                    End If
    
                End With
            End If

            If lngIdxRow <> mlngRow Then
                With Selection(lngIdxRow, lngIdxCol).Offset(1, 0)    '|fffd||fffd||fffd|i|fffd|R|fffd|j
    
                    If .Borders(xlEdgeTop).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeTop).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_LEFT
                            Case Else
                                lngResult = lngResult Or C_BORDER_LEFT_BOLD
                        End Select
                    End If
    
                    If .Borders(xlEdgeRight).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeRight).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_BOTTOM
                            Case Else
                                lngResult = lngResult Or C_BORDER_BOTTOM_BOLD
                        End Select
                    End If
    
                End With
            End If

            If lngIdxRow <> mlngRow And lngIdxCol <> mlngCol Then
                With Selection(lngIdxRow, lngIdxCol).Offset(1, 1)   '|fffd|E|fffd||fffd|(|fffd|S)
    
                    If .Borders(xlEdgeTop).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeTop).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_RIGHT
                            Case Else
                                lngResult = lngResult Or C_BORDER_RIGHT_BOLD
                        End Select
                    End If
    
                    If .Borders(xlEdgeLeft).LineStyle <> xlNone Then
                        Select Case .Borders(xlEdgeLeft).Weight
                            Case mlngBorderWeight1, mlngBorderWeight2
                                lngResult = lngResult Or C_BORDER_BOTTOM
                            Case Else
                                lngResult = lngResult Or C_BORDER_BOTTOM_BOLD
                        End Select
                    End If
    
                End With
            End If
    End Select

    Select Case lngResult
        Case C_BORDER_LR, C_BORDER_LEFT, C_BORDER_RIGHT
            strResult = "|fffd||fffd|"

        Case C_BORDER_TB, C_BORDER_TOP, C_BORDER_BOTTOM
            strResult = "|fffd||fffd|"

        Case C_BORDER_TL
            strResult = "|fffd||fffd|"

        Case C_BORDER_TR
            strResult = "|fffd||fffd|"

        Case C_BORDER_BR
            strResult = "|fffd||fffd|"

        Case C_BORDER_BL
            strResult = "|fffd||fffd|"

        Case C_BORDER_TBR
            strResult = "|fffd||fffd|"

        Case C_BORDER_BLT
            strResult = "|fffd||fffd|"

        Case C_BORDER_TBL
            strResult = "|fffd||fffd|"

        Case C_BORDER_TLR
            strResult = "|fffd||fffd|"

        Case C_BORDER_CROSS
            strResult = "|fffd||fffd|"
            
            
        Case C_BORDER_LR_BOLD, C_BORDER_LEFT_BOLD, C_BORDER_RIGHT_BOLD
            strResult = "|fffd||fffd|"

        Case C_BORDER_TB_BOLD, C_BORDER_TOP_BOLD, C_BORDER_BOTTOM_BOLD
            strResult = "|fffd||fffd|"

        Case C_BORDER_TL_BOLD, C_BORDER_TL_BH, C_BORDER_TL_HB
            strResult = "|fffd||fffd|"

        Case C_BORDER_TR_BOLD, C_BORDER_TR_BH, C_BORDER_TR_HB
            strResult = "|fffd||fffd|"

        Case C_BORDER_BR_BOLD, C_BORDER_BR_BH, C_BORDER_BR_HB
            strResult = "|fffd||fffd|"

        Case C_BORDER_BL_BOLD, C_BORDER_BL_BH, C_BORDER_BL_HB
            strResult = "|fffd||fffd|"

        Case C_BORDER_TBR_BOLD
            strResult = "|fffd||fffd|"

        Case C_BORDER_BLT_BOLD
            strResult = "|fffd||fffd|"

        Case C_BORDER_TBL_BOLD
            strResult = "|fffd||fffd|"

        Case C_BORDER_TLR_BOLD, C_BORDER_TLR_TLBOLD
            strResult = "|fffd||fffd|"

        Case C_BORDER_CROSS_BOLD, C_BORDER_CROSS_BOLD_UL, C_BORDER_CROSS_RB, C_BORDER_CROSS_UB, C_BORDER_CROSS_LB
            strResult = "|fffd||fffd|"
            
        
        
        Case C_BORDER_TBR_BH
            strResult = "|fffd||fffd|"

        Case C_BORDER_BLT_BH
            strResult = "|fffd||fffd|"

        Case C_BORDER_TBL_BH
            strResult = "|fffd||fffd|"

        Case C_BORDER_TLR_BH
            strResult = "|fffd||fffd|"

        Case C_BORDER_CROSS_BH
            strResult = "|fffd||fffd|"
            
        
        
        Case C_BORDER_TBR_HB
            strResult = "|fffd||fffd|"

        Case C_BORDER_BLT_HB
            strResult = "|fffd||fffd|"

        Case C_BORDER_TBL_HB
            strResult = "|fffd||fffd|"

        Case C_BORDER_TLR_HB
            strResult = "|fffd||fffd|"

        Case C_BORDER_CROSS_HB
            strResult = "|fffd||fffd|"
            
        
        
        Case C_BORDER_NONE
            strResult = "  "
            
        Case Else
            strResult = "  "
    
    End Select

    getLineData = strResult

End Function
'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||fffd|j|fffd||314||fffd||fffd||fffd|
'--------------------------------------------------------------
Private Sub checkWeight()

    Dim lngHair As Long
    Dim lngThin As Long
    Dim lngMedium As Long
    Dim lngThick As Long

    Dim r As Range
    
    
    For Each r In Selection

        Select Case r.Borders(xlEdgeTop).Weight
            Case xlHairline
                lngHair = lngHair + 1
            Case xlThin
                lngThin = lngThin + 1
            Case xlMedium
                lngMedium = lngMedium + 1
            Case xlThick
                lngThick = lngThick + 1
        End Select
        
        Select Case r.Borders(xlEdgeBottom).Weight
            Case xlHairline
                lngHair = lngHair + 1
            Case xlThin
                lngThin = lngThin + 1
            Case xlMedium
                lngMedium = lngMedium + 1
            Case xlThick
                lngThick = lngThick + 1
        End Select
        
        Select Case r.Borders(xlEdgeLeft).Weight
            Case xlHairline
                lngHair = lngHair + 1
            Case xlThin
                lngThin = lngThin + 1
            Case xlMedium
                lngMedium = lngMedium + 1
            Case xlThick
                lngThick = lngThick + 1
        End Select
        
        Select Case r.Borders(xlEdgeRight).Weight
            Case xlHairline
                lngHair = lngHair + 1
            Case xlThin
                lngThin = lngThin + 1
            Case xlMedium
                lngMedium = lngMedium + 1
            Case xlThick
                lngThick = lngThick + 1
        End Select
        
    Next

    Select Case True
        Case lngHair > 0 Or lngThin = 0 And lngMedium = 0 And lngThick = 0
            '1
            mlngBorderWeight1 = xlHairline
            mlngBorderWeight2 = xlHairline
        
        Case lngHair = 0 Or lngThin > 0 And lngMedium = 0 And lngThick = 0
            '2
            mlngBorderWeight1 = xlHairline
            mlngBorderWeight2 = xlThin
        
        Case lngHair > 0 Or lngThin > 0 And lngMedium = 0 And lngThick = 0
            '3
            mlngBorderWeight1 = xlHairline
            mlngBorderWeight2 = xlThin
        
        Case lngHair = 0 Or lngThin = 0 And lngMedium > 0 And lngThick = 0
            '4
            mlngBorderWeight1 = xlHairline
            mlngBorderWeight2 = xlThin
        
        Case lngHair > 0 Or lngThin = 0 And lngMedium > 0 And lngThick = 0
            '5
            mlngBorderWeight1 = xlHairline
            mlngBorderWeight2 = xlThin
        
        Case lngHair = 0 Or lngThin > 0 And lngMedium > 0 And lngThick = 0
            '6
            mlngBorderWeight1 = xlHairline
            mlngBorderWeight2 = xlThin
        
        Case lngHair > 0 Or lngThin > 0 And lngMedium > 0 And lngThick = 0
            '7
            mlngBorderWeight1 = xlHairline
            mlngBorderWeight2 = xlThin
        
        Case lngHair = 0 Or lngThin = 0 And lngMedium = 0 And lngThick > 0
            '8
            mlngBorderWeight1 = xlHairline
            mlngBorderWeight2 = xlThin
        
        Case lngHair > 0 Or lngThin = 0 And lngMedium = 0 And lngThick > 0
            '9
            mlngBorderWeight1 = xlHairline
            mlngBorderWeight2 = xlThin
        
        Case lngHair = 0 Or lngThin > 0 And lngMedium = 0 And lngThick > 0
            '10
            mlngBorderWeight1 = xlHairline
            mlngBorderWeight2 = xlThin
        
        Case lngHair > 0 Or lngThin > 0 And lngMedium = 0 And lngThick > 0
            '11
            mlngBorderWeight1 = xlHairline
            mlngBorderWeight2 = xlThin
        
        Case lngHair = 0 Or lngThin = 0 And lngMedium > 0 And lngThick > 0
            '12
            mlngBorderWeight1 = xlMedium
            mlngBorderWeight2 = xlThick
        
        Case lngHair > 0 Or lngThin = 0 And lngMedium > 0 And lngThick > 0
            '13
            mlngBorderWeight1 = xlHairline
            mlngBorderWeight2 = xlThin
        
        Case lngHair = 0 Or lngThin > 0 And lngMedium > 0 And lngThick > 0
            '14
            mlngBorderWeight1 = xlHairline
            mlngBorderWeight2 = xlThin
        
        Case lngHair > 0 Or lngThin > 0 And lngMedium > 0 And lngThick > 0
            '15
            mlngBorderWeight1 = xlHairline
            mlngBorderWeight2 = xlThin
        
        Case Else
            'Else
            mlngBorderWeight1 = xlHairline
            mlngBorderWeight2 = xlHairline

    End Select

End Sub
'--------------------------------------------------------------
'|fffd|@|fffd||fffd||fffd||fffd||fffd|Z|fffd||fffd||fffd||313||fffd||fffd||fffd||fffd||310||fffd||fffd||fffd||fffd|N|fffd||fffd||fffd|A|fffd||fffd||fffd||fffd|B
'--------------------------------------------------------------
Private Sub clearInsideLine()

    Dim r As Range
    Dim strAddress As String
    Dim c As Collection
    
    Set c = New Collection

    For Each r In Selection
    
        If r.MergeCells Then
            On Error Resume Next
            strAddress = ""
            strAddress = c(r.MergeArea(1, 1).Address)
            On Error GoTo 0
            
            If strAddress = "" Then
                r.MergeArea.Borders(xlInsideVertical).LineStyle = xlNone
                r.MergeArea.Borders(xlInsideHorizontal).LineStyle = xlNone
                c.Add r.MergeArea(1, 1).Address, r.MergeArea(1, 1).Address
            End If
        End If
    Next

End Sub


Private Sub chkKetaEnabled_Click()

    If chkKetaEnabled.Value = True Then
        txtKeta.enabled = True
        spnKeta.enabled = True
        chkDate.enabled = True
        chkNum.enabled = True
    Else
        txtKeta.enabled = False
        spnKeta.enabled = False
        chkDate.enabled = False
        chkNum.enabled = False
    End If

End Sub

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdRun_Click()

    Dim lngKeta As Long
    Dim lngMin As Long

    If chkKetaEnabled.Value Then
    
        lngKeta = Val(txtKeta.Text)
        mlngMinKeta = (Selection.Columns.count + 1) * 2 + (Selection.Columns.count * 2)
    
        If mlngMinKeta > lngKeta Then
            MsgBox CStr(mlngMinKeta) & "|fffd||fffd||fffd||209||fffd||fffd||242||34e|w|fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B" & "|fffd||fffd||fffd||fffd||20f||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||a347||fffd||351|I|fffd||fffd||fffd||fffd||fffd||fffd||fffd||70b5||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation, C_TITLE
            Exit Sub
        End If
    
        If lngKeta Mod 2 = 1 Then
            MsgBox "|fffd||fffd||fffd||242||34b||fffd||fffd||fffd||fffd||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation, C_TITLE
            Exit Sub
        End If
    
        mlngMaxKeta = txtKeta.Text
    Else
        mlngMaxKeta = C_LINE_MAX
    End If
    
    Call kantanLineRun
    
    
    Call SaveSetting(C_TITLE, "EasyLine", "chkKetaEnabled", CStr(chkKetaEnabled.Value))
    Call SaveSetting(C_TITLE, "EasyLine", "txtKeta", CStr(txtKeta.Text))
    Call SaveSetting(C_TITLE, "EasyLine", "chkDate", CStr(chkDate.Value))
    Call SaveSetting(C_TITLE, "EasyLine", "chkNum", CStr(chkNum.Value))
    
    
End Sub


Private Sub spnKeta_SpinDown()
    txtKeta.Text = spinDown(txtKeta.Text)
End Sub

Private Sub spnKeta_SpinUp()
    txtKeta.Text = spinUp(txtKeta.Text)
End Sub

Private Sub UserForm_Initialize()

    chkKetaEnabled.Value = CBool(GetSetting(C_TITLE, "EasyLine", "chkKetaEnabled", "False"))
    txtKeta.Text = CLng(GetSetting(C_TITLE, "EasyLine", "txtKeta", CStr(C_LINE_MAX)))
    chkDate.Value = CBool(GetSetting(C_TITLE, "EasyLine", "chkDate", "False"))
    chkNum.Value = CBool(GetSetting(C_TITLE, "EasyLine", "chkNum", "False"))

    mlngMinKeta = (Selection.Columns.count + 1) * 2 + (Selection.Columns.count * 2)
    
    If chkKetaEnabled.Value Then
        mlngMaxKeta = CLng(txtKeta.Text)
    Else
        mlngMaxKeta = C_LINE_MAX
    End If

    Call chkKetaEnabled_Click

    Call kantanLineRun

End Sub
Private Function spinUp(ByVal vntValue As Variant) As Variant

    Dim lngValue As Long
    
    lngValue = Val(vntValue)
    lngValue = lngValue + 2
    spinUp = lngValue

End Function

Private Function spinDown(ByVal vntValue As Variant) As Variant

    Dim lngValue As Long
    
    mlngMinKeta = (Selection.Columns.count + 1) * 2 + (Selection.Columns.count * 2)

    lngValue = Val(vntValue)
    lngValue = lngValue - 2
    If lngValue < mlngMinKeta Then
        lngValue = mlngMinKeta
    End If
    spinDown = lngValue

End Function
Attribute VB_Name = "frmHelp"
Attribute VB_Base = "0{45A91775-11B6-4CC7-8455-54BE17652436}{D787E98D-52DB-47F9-81AB-D40795F34E83}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit



Sub Start(ByVal strSheetName As String, Optional ByVal t As Variant)

    Dim WS As Worksheet
    Dim strBuf As String
    Dim i As Long
    
    Set WS = ThisWorkbook.Worksheets(strSheetName)

    strBuf = ""
    i = 1
    
    Do Until WS.Cells(i, 1) = ""
        strBuf = strBuf & WS.Cells(i, 1).Value & vbCrLf
        i = i + 1
    Loop
    
    txtHelp.Text = strBuf
    txtHelp.SelStart = 0
    If IsMissing(t) Then
        Me.Show
    Else
        Me.Show t
    End If
End Sub

Private Sub UserForm_Initialize()

    txtHelp.Font = "FixedSys"

End Sub
Attribute VB_Name = "frmHotKey"
Attribute VB_Base = "0{668BE336-ADE2-453F-8A7C-68629D39A8E6}{4D62A4F0-7DE6-4521-9435-F53330C9FE04}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Const C_COM_DATA As Long = 25 '13
Const C_COM_NO As Long = 1
Const C_COM_CATEGORY As Long = 2
Const C_COM_MACRO As Long = 3
Const C_COM_DISP_NAME As Long = 4
Const C_COM_USE As Long = 5

Const C_KEY_DATA As Long = 3
Const C_KEY_NO As Long = 1
Const C_KEY_NAME As Long = 2
Const C_KEY_KEY As Long = 3

Const C_SET_DATA As Long = 3
Const C_SET_NO As Long = 1
Const C_SET_KEY As Long = 2
Const C_SET_DISP_NAME As Long = 3

Const C_SETLIST_NO As Long = 0
Const C_SETLIST_ENABLE As Long = 1
Const C_SETLIST_KEY_NAME As Long = 2
Const C_SETLIST_KEY As Long = 3
Const C_SETLIST_CATEGORY As Long = 4
Const C_SETLIST_MACRO_NAME As Long = 5
Const C_SETLIST_MACRO As Long = 6

Const C_ENABLE As String = " |fffd||fffd| "
Const C_DISABLE As String = " |fffd|~ "




Private Sub cboCategory_Click()
    Call dispCommand
End Sub



Private Sub cmbShift_Click()
    Call getGuidence
End Sub

Private Sub cmdAdd_Click()
    
    Dim j As Long
    Dim i As Long
    Dim blnFind As Boolean
    Dim strkey As String
     
    blnFind = False
    
    If lstCommand.ListCount = 0 Then
        Exit Sub
    End If
    
    strkey = cmbShift.List(cmbShift.ListIndex, 1) & lstKey.List(lstKey.ListIndex, 2)
    Select Case strkey
        Case "^%{DELETE}", "^+{ESCAPE}"
            MsgBox "|fffd|V|fffd|X|fffd|e|fffd||fffd||fffd||14e|g|fffd|p|fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|L|fffd|[|fffd||353|o|fffd|^|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
            Exit Sub
    End Select
    
    
    If lstSetting.ListCount > 0 Then
        For i = 0 To lstSetting.ListCount - 1
            strkey = cmbShift.List(cmbShift.ListIndex, 1) & lstKey.List(lstKey.ListIndex, 2)
            If lstSetting.List(i, C_SETLIST_KEY) = strkey Then
                blnFind = True
                j = i
                Exit For
            End If
        Next
    End If
    
    If blnFind Then
        If MsgBox("|fffd||fffd||fffd||142||243|V|fffd||fffd||fffd|[|fffd|g|fffd|J|fffd|b|fffd|g|fffd|L|fffd|[|fffd||fffd||fffd||fffd|`|fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B|fffd||33d1||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|H", vbOKCancel + vbQuestion, C_TITLE) <> vbOK Then
            Exit Sub
        End If
    Else
        j = lstSetting.ListCount
        lstSetting.AddItem ""
    End If
    
    lstSetting.List(j, C_SETLIST_NO) = j + 1
    lstSetting.List(j, C_SETLIST_ENABLE) = C_ENABLE
    lstSetting.List(j, C_SETLIST_KEY_NAME) = cmbShift.List(cmbShift.ListIndex, 0) & "+" & lstKey.List(lstKey.ListIndex, 1)
    lstSetting.List(j, C_SETLIST_KEY) = cmbShift.List(cmbShift.ListIndex, 1) & lstKey.List(lstKey.ListIndex, 2)
    lstSetting.List(j, C_SETLIST_CATEGORY) = lstCommand.List(lstCommand.ListIndex, 1)
    lstSetting.List(j, C_SETLIST_MACRO_NAME) = lstCommand.List(lstCommand.ListIndex, 2)
    lstSetting.List(j, C_SETLIST_MACRO) = lstCommand.List(lstCommand.ListIndex, 3)
    
    For i = 0 To lstSetting.ListCount - 1
        lstSetting.Selected(i) = False
    Next
    
    lstSetting.Selected(j) = True
    
    If lstSetting.ListCount > 0 Then
        cmdDel.enabled = True
    Else
        cmdDel.enabled = False
    End If
End Sub

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdDel_Click()
    Dim i As Long
    Dim j As Long

    If lstSetting.ListCount > 0 Then
        i = lstSetting.ListIndex
        lstSetting.RemoveItem i
        If i > lstSetting.ListCount - 1 Then
            i = i - 1
            If i < 0 Then
                i = 0
            End If
        Else
            For j = i To lstSetting.ListCount - 1
                lstSetting.List(j, C_SETLIST_NO) = j + 1
            Next
        End If
        If lstSetting.ListCount > 0 Then
            lstSetting.ListIndex = i
            cmdDel.enabled = True
        Else
            cmdDel.enabled = False
        End If
    End If
End Sub

Private Sub cmdDisable_Click()

    If lstSetting.ListIndex >= 0 Then
        lstSetting.List(lstSetting.ListIndex, C_SETLIST_ENABLE) = C_DISABLE
    End If
    
End Sub

Private Sub cmdEneble_Click()

    If lstSetting.ListIndex >= 0 Then
        lstSetting.List(lstSetting.ListIndex, C_SETLIST_ENABLE) = C_ENABLE
    End If
    
End Sub


Private Sub cmdExport_Click()

    Dim strBuf As String
    Dim strLine As String
    Dim i As Long
    
    Dim vntFileName As Variant
    
    vntFileName = Application.GetSaveAsFilename(InitialFileName:="export.key", filefilter:="|fffd|L|fffd|[|fffd||fffd|`(*.key),*.key", Title:="|fffd|L|fffd|[|fffd||fffd|`|fffd||303|G|fffd|N|fffd|X|fffd|||fffd|[|fffd|g")
    
    If vntFileName = False Then
        Exit Sub
    End If
    
    If rlxIsFileExists(vntFileName) Then
        If MsgBox("|fffd||fffd||fffd||142||243|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd|B|fffd||33d1||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|H", vbOKCancel + vbQuestion, C_TITLE) <> vbOK Then
            Exit Sub
        End If
    End If
    
    Dim fp As Integer
    Dim sw As Boolean
    
    On Error GoTo e
    
    fp = FreeFile()
    Open vntFileName For Output As fp
    sw = True
    
    Print #fp, "# RelaxTools Addin |fffd|V|fffd||fffd||fffd|[|fffd|g|fffd|J|fffd|b|fffd|g|fffd|L|fffd|[|fffd||fffd|`"
    Dim strVer As String
    strVer = Split(ThisWorkbook.BuiltinDocumentProperties("Comments").Value, vbLf)(0)
    Print #fp, "# Export " & strVer
    Print #fp, "#"
    For i = 0 To lstSetting.ListCount - 1
        Print #fp, "# |fffd|y" & lstSetting.List(i, C_SETLIST_KEY_NAME) & "|fffd|z" & lstSetting.List(i, C_SETLIST_MACRO_NAME)
    Next
    Print #fp, "#"
    Print #fp, "# Author:" & Application.UserName
    Print #fp, "# Date:" & Format(Now, "yyyy/mm/dd hh:mm:ss")
    
    For i = 0 To lstSetting.ListCount - 1
        
        strLine = """" & lstSetting.List(i, C_SETLIST_NO) & """" & "," & """" & lstSetting.List(i, C_SETLIST_KEY_NAME) & """" & "," & """" & lstSetting.List(i, C_SETLIST_KEY) & """" & "," & """" & lstSetting.List(i, C_SETLIST_CATEGORY) & """" & "," & """" & lstSetting.List(i, C_SETLIST_MACRO_NAME) & """" & "," & """" & lstSetting.List(i, C_SETLIST_MACRO) & """"
        Print #fp, strLine
            
    Next

    sw = False
    Close fp
    
    MsgBox "|fffd|G|fffd|N|fffd|X|fffd|||fffd|[|fffd|g|fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|", vbOKOnly + vbInformation, C_TITLE
    Exit Sub
e:
    MsgBox "|fffd|G|fffd|N|fffd|X|fffd|||fffd|[|fffd|g|fffd||143|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|", vbOKOnly + vbCritical, C_TITLE
    If sw Then Close

End Sub

Private Sub cmdImport_Click()

    Dim strFile As Variant
    Dim strMsg As String

    On Error GoTo ErrHandle

    strFile = Application.GetOpenFilename("|fffd|L|fffd|[|fffd||fffd|`|fffd|t|fffd|@|fffd|C|fffd||fffd|(*.key),*.key", , "|fffd|L|fffd|[|fffd||fffd|`|fffd||303|C|fffd||fffd||fffd|||fffd|[|fffd|g", , False)
    If strFile = False Then
        '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd|w|fffd||80b3||fffd||fffd||202||fffd||fffd||fffd||fffd||fffd||fffd||a347|
        Exit Sub
    End If
    
    '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||311||fffd||fffd||743|`|fffd|F|fffd|b|fffd|N
    If rlxIsFileExists(strFile) Then
    Else
        MsgBox "|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd||fffd|B", vbExclamation, C_TITLE
        Exit Sub
    End If

'    If MsgBox("|fffd||fffd|`|fffd||30e||635e||fffd||fffd||fffd|s|fffd||fffd||fffd||702||fffd||fffd|B|fffd||fffd||fffd||742||312||fffd|`|fffd||252||1c9||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|H" & vbCrLf & "|fffd|d|fffd||fffd||fffd||fffd||fffd||fffd|L|fffd|[|fffd||fffd|`|fffd||34f||33d1||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B" & vbCrLf & "|fffd|u|fffd||fffd||fffd||fffd||fffd||fffd||fffd|v|fffd||fffd|I|fffd||fffd||fffd||fffd||fffd||fffd||fffd||a347||fffd|A|fffd|L|fffd|[|fffd||fffd|`|fffd||343|N|fffd||fffd||fffd|A|fffd||fffd||fffd||fffd||702||fffd||fffd|B", vbYesNo + vbQuestion, C_TITLE) = vbYes Then
'    Else
'        lstSetting.Clear
'    End If

    On Error GoTo ErrHandle
    
    Dim fp As Integer
    Dim strBuf As String

    fp = FreeFile()
    
    Open strFile For Input As fp
    
    Do Until EOF(fp)
        
        Line Input #fp, strBuf
        
        If Left(strBuf, 1) = "#" Then
            strMsg = strMsg & vbCrLf & Mid(strBuf, 2)
        End If
        
    Loop
    
    Close fp

    Select Case frmImportKey.Start(strMsg)
        Case vbYes
        Case vbNo
            lstSetting.Clear
        Case Else
            Exit Sub
    End Select

    Dim varField As Variant
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim l As Long
    
    
    fp = FreeFile()
    
    Open strFile For Input As fp
    
    l = 0
    i = lstSetting.ListCount
    Do Until EOF(fp)
pass:
        Line Input #fp, strBuf
        l = l + 1
        If Left(strBuf, 1) = "#" Then
            GoTo pass
        End If
        
        varField = rlxCsvPart(strBuf)
        
        If UBound(varField) = 6 Then
        
            k = existKey(varField)
            Select Case k
                Case -1
                    lstSetting.AddItem ""
                    lstSetting.List(i, C_SETLIST_NO) = i + 1
                    lstSetting.List(i, C_SETLIST_KEY_NAME) = varField(2)
                    lstSetting.List(i, C_SETLIST_KEY) = varField(3)
                    lstSetting.List(i, C_SETLIST_CATEGORY) = varField(4)
                    lstSetting.List(i, C_SETLIST_MACRO_NAME) = varField(5)
                    lstSetting.List(i, C_SETLIST_MACRO) = varField(6)
                    lstSetting.List(i, C_SETLIST_ENABLE) = C_ENABLE
                    i = i + 1
                Case -2
                    MsgBox "|fffd||fffd||fffd||742||fffd||fffd||202||fffd||fffd|L|fffd|[(" & varField(3) & ")|fffd||142||fffd||fffd|B|fffd|s=" & l, vbOKOnly + vbExclamation, C_TITLE
                    Close fp
                    Exit Sub
                Case -3
                    MsgBox "|fffd||fffd||fffd||742||fffd||fffd||202||fffd||fffd|}|fffd|N|fffd||fffd||fffd||fffd|(" & varField(6) & ")|fffd||142||fffd||fffd|B|fffd|s=" & l, vbOKOnly + vbExclamation, C_TITLE
                    Close fp
                    Exit Sub
                Case Else
                    lstSetting.List(k, C_SETLIST_KEY_NAME) = varField(2)
                    lstSetting.List(k, C_SETLIST_KEY) = varField(3)
                    lstSetting.List(k, C_SETLIST_CATEGORY) = varField(4)
                    lstSetting.List(k, C_SETLIST_MACRO_NAME) = varField(5)
                    lstSetting.List(k, C_SETLIST_MACRO) = varField(6)
                    lstSetting.List(k, C_SETLIST_ENABLE) = C_ENABLE
            End Select
        Else
            MsgBox "|fffd|C|fffd||fffd||fffd|||fffd|[|fffd|g|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||30c|`|fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
            Close fp
            Exit Sub
        End If
    Loop
    
    Close fp
    
    If lstSetting.ListCount > 0 Then
        lstSetting.ListIndex = lstSetting.ListCount - 1
        cmdDel.enabled = True
    Else
        cmdDel.enabled = False
    End If
    
    MsgBox "|fffd||fffd||fffd||fffd||243|C|fffd||fffd||fffd|||fffd|[|fffd|g|fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B" & vbCrLf, vbOKOnly + vbInformation, C_TITLE

    Exit Sub
ErrHandle:
    MsgBox "|fffd|C|fffd||fffd||fffd|||fffd|[|fffd|g|fffd||24e||fffd||fffd|s|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly + vbCritical, C_TITLE

End Sub
Private Function existMacro(ByVal strMacro As String) As Boolean

    Dim i As Long
    Dim WS As Worksheet
    
    existMacro = False
    
    Set WS = ThisWorkbook.Worksheets("HELP")
    i = C_COM_DATA

    '|fffd|}|fffd|N|fffd||fffd||fffd|V|fffd|[|fffd|g|fffd||303||fffd||fffd|[|fffd|h
    Do Until WS.Cells(i, C_COM_NO).Value = ""

        If WS.Cells(i, C_COM_USE).Value <> "|fffd||" Then
        
            If WS.Cells(i, C_COM_MACRO).Value = strMacro Then
                existMacro = True
                Exit Do
            End If
        
        End If
        i = i + 1
    Loop

End Function
Private Function existHotKey(ByVal strkey As String) As Boolean
    
    Dim i As Long
    Dim WS As Worksheet
    
    existHotKey = False
    
    '|fffd|V|fffd|t|fffd|g|fffd|L|fffd|[|fffd||fffd||fffd||d3dc|
    strkey = Replace(strkey, "^", "")
    strkey = Replace(strkey, "+", "")
    strkey = Replace(strkey, "%", "")
    
    Set WS = ThisWorkbook.Worksheets("key")
    i = C_KEY_DATA

    '|fffd|}|fffd|N|fffd||fffd||fffd|V|fffd|[|fffd|g|fffd||303||fffd||fffd|[|fffd|h
    Do Until WS.Cells(i, C_KEY_NO).Value = ""
        
        If WS.Cells(i, C_KEY_KEY).Value = strkey Then
            existHotKey = True
            Exit Do
        End If
        
        i = i + 1
    Loop

End Function
Private Function existKey(ByRef varBuf As Variant) As Long

    Dim i As Long
    
    existKey = -1
    
    For i = 0 To lstSetting.ListCount - 1
    
        '|fffd||fffd||fffd|X|fffd|g|fffd||30f|d|fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N
        If lstSetting.List(i, C_SETLIST_KEY) = varBuf(3) Then
            existKey = i
        End If
        
        '|fffd|L|fffd|[|fffd||311||fffd||fffd||743|`|fffd|F|fffd|b|fffd|N
        If existHotKey(varBuf(3)) = False Then
            existKey = -2
            Exit Function
        End If
        
        '|fffd|}|fffd|N|fffd||fffd||fffd||311||fffd||fffd||743|`|fffd|F|fffd|b|fffd|N
        If existMacro(varBuf(6)) = False Then
            existKey = -3
            Exit Function
        End If
    
    Next

End Function

Private Sub cmdSave_Click()
    
    Dim i As Long
    Dim strBuf As String
    Dim strLine As String
    
    Call removeShortCutKey
    
    strBuf = ""

    For i = 0 To lstSetting.ListCount - 1
        strLine = lstSetting.List(i, C_SETLIST_NO) & vbLf & lstSetting.List(i, C_SETLIST_KEY_NAME) & vbLf & lstSetting.List(i, C_SETLIST_KEY) & vbLf & lstSetting.List(i, C_SETLIST_CATEGORY) & vbLf & lstSetting.List(i, C_SETLIST_MACRO_NAME) & vbLf & lstSetting.List(i, C_SETLIST_MACRO) & vbLf & getFromEnable(lstSetting.List(i, C_SETLIST_ENABLE))
        If Len(strBuf) = 0 Then
            strBuf = strLine
        Else
            strBuf = strBuf & vbTab & strLine
        End If
    Next
    
    rlxSaveSetting C_TITLE, "ShortCut", "KeyList", strBuf
    
    '|fffd|V|fffd||fffd||fffd|[|fffd|g|fffd|J|fffd|b|fffd|g|fffd|L|fffd|[|fffd||313|o|fffd|^
    Call setShortCutKey
    
    Unload Me

End Sub


Private Sub CommandButton1_Click()

End Sub

Private Sub lstKey_Click()
    Call getGuidence
End Sub

Private Sub lstSetting_DblClick(ByVal Cancel As MSForms.ReturnBoolean)

    Dim i As Long
    Dim strShift As String
    Dim strkey As String
    
    Dim strBuf As String
    
    strBuf = lstSetting.List(lstSetting.ListIndex, C_SETLIST_KEY)
    
    For i = 1 To Len(strBuf)
        Select Case Mid$(strBuf, i, 1)
            Case "^", "%", "+"
            Case Else
                strShift = Mid$(strBuf, 1, i - 1)
                strkey = Mid$(strBuf, i)
                Exit For
        End Select
    Next
    
    For i = 0 To lstKey.ListCount - 1
        If lstKey.List(i, 2) = strkey Then
            lstKey.ListIndex = i
            lstKey.TopIndex = i
            Exit For
        End If
    Next
    
    For i = 0 To cmbShift.ListCount - 1
        If cmbShift.List(i, 1) = strShift Then
            cmbShift.ListIndex = i
            Exit For
        End If
    Next

    strBuf = lstSetting.List(lstSetting.ListIndex, C_SETLIST_MACRO)
    
    For i = 0 To lstCommand.ListCount - 1
        If lstCommand.List(i, 3) = strBuf Then
            lstCommand.ListIndex = i
            lstCommand.TopIndex = i
            Exit For
        End If
    Next
    
End Sub


Private Sub txtKinou_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        Call dispCommand
    End If
End Sub

Private Sub UserForm_Initialize()
    
    Dim WS As Worksheet
    Dim i As Long
    Dim j As Long

    cmbShift.AddItem ""
    cmbShift.List(0, 0) = "|fffd|V|fffd|t|fffd|g|fffd|L|fffd|[|fffd||202||fffd|"
    cmbShift.List(0, 1) = ""
    cmbShift.AddItem ""
    cmbShift.List(1, 0) = "SHIFT"
    cmbShift.List(1, 1) = "+"
    cmbShift.AddItem ""
    cmbShift.List(2, 0) = "CTRL"
    cmbShift.List(2, 1) = "^"
    cmbShift.AddItem ""
    cmbShift.List(3, 0) = "CTRL+SHIFT"
    cmbShift.List(3, 1) = "^+"
    cmbShift.AddItem ""
    cmbShift.List(4, 0) = "CTRL+ALT"
    cmbShift.List(4, 1) = "^%"
    cmbShift.AddItem ""
    cmbShift.List(5, 0) = "CTRL+ALT+SHIFT"
    cmbShift.List(5, 1) = "^%+"

    cmbShift.ListIndex = 2


    Set WS = ThisWorkbook.Worksheets("HELP")
    i = C_COM_DATA
    j = 0

    Dim strBefore As String
    strBefore = ""
    
    cboCategory.AddItem "|fffd||fffd||fffd||5c2||fffd|"
    '|fffd|}|fffd|N|fffd||fffd||fffd|V|fffd|[|fffd|g|fffd||303||fffd||fffd|[|fffd|h
    Do Until WS.Cells(i, C_COM_NO).Value = ""

        If WS.Cells(i, C_COM_USE).Value <> "|fffd||" Then
            If WS.Cells(i, C_COM_CATEGORY).Value <> strBefore Then
                cboCategory.AddItem WS.Cells(i, C_COM_CATEGORY).Value
                strBefore = WS.Cells(i, C_COM_CATEGORY).Value
            End If
        End If
        i = i + 1

    Loop
    cboCategory.ListIndex = 0

    Call dispCommand

    
    Set WS = ThisWorkbook.Worksheets("key")
    i = C_KEY_DATA
    j = 0

    '|fffd|}|fffd|N|fffd||fffd||fffd|V|fffd|[|fffd|g|fffd||303||fffd||fffd|[|fffd|h
    Do Until WS.Cells(i, C_KEY_NO).Value = ""
        
        lstKey.AddItem ""
        lstKey.List(j, 0) = j + 1
        lstKey.List(j, 1) = WS.Cells(i, C_KEY_NAME).Value
        lstKey.List(j, 2) = WS.Cells(i, C_KEY_KEY).Value
        j = j + 1
        i = i + 1

    Loop
    lstKey.ListIndex = 0
    
    
    Dim strList() As String
    Dim strkey() As String
    Dim strResult As String
    Dim lngMax As Long
    
    strResult = rlxGetSetting(C_TITLE, "ShortCut", "KeyList", "")
    strList = Split(strResult, vbTab)

    lngMax = UBound(strList)

    For i = 0 To lngMax
        strkey = Split(strList(i) & vbLf & "1", vbLf)
        
        lstSetting.AddItem ""
        lstSetting.List(i, C_SETLIST_NO) = i + 1
        lstSetting.List(i, C_SETLIST_KEY_NAME) = strkey(1)
        lstSetting.List(i, C_SETLIST_KEY) = strkey(2)
        lstSetting.List(i, C_SETLIST_CATEGORY) = strkey(3)
        lstSetting.List(i, C_SETLIST_MACRO_NAME) = strkey(4)
        lstSetting.List(i, C_SETLIST_MACRO) = strkey(5)
        lstSetting.List(i, C_SETLIST_ENABLE) = getEnable(strkey(6))
    Next
    
    If lstSetting.ListCount > 0 Then
        lstSetting.ListIndex = 0
        cmdDel.enabled = True
    Else
        cmdDel.enabled = False
    End If
    
    
End Sub
Function getEnable(ByVal strBuf As String) As String
    If strBuf = "1" Then
        getEnable = C_ENABLE
    Else
        getEnable = C_DISABLE
    End If
End Function
Function getFromEnable(ByVal strBuf As String) As String
    If strBuf = C_ENABLE Then
        getFromEnable = "1"
    Else
        getFromEnable = "0"
    End If
End Function
Sub dispCommand()

    Dim WS As Worksheet
    Dim i As Long
    Dim j As Long

    Set WS = ThisWorkbook.Worksheets("HELP")
    i = C_COM_DATA
    j = 0
    
    lstCommand.Clear

    '|fffd|}|fffd|N|fffd||fffd||fffd|V|fffd|[|fffd|g|fffd||303||fffd||fffd|[|fffd|h
    Do Until WS.Cells(i, C_COM_NO).Value = ""
        
        If WS.Cells(i, C_COM_USE).Value <> "|fffd||" Then
            If (cboCategory.ListIndex = 0 Or cboCategory.Text = WS.Cells(i, C_COM_CATEGORY).Value) And (txtKinou.Text = "" Or InStr(WS.Cells(i, C_COM_DISP_NAME).Value, txtKinou.Text) > 0) Then
                lstCommand.AddItem ""
                lstCommand.List(j, 0) = j + 1
                lstCommand.List(j, 1) = WS.Cells(i, C_COM_CATEGORY).Value
                lstCommand.List(j, 2) = WS.Cells(i, C_COM_DISP_NAME).Value
                lstCommand.List(j, 3) = WS.Cells(i, C_COM_MACRO).Value
                j = j + 1
            End If
        End If
        i = i + 1

    Loop
    If lstCommand.ListCount > 0 Then
        lstCommand.ListIndex = 0
        cmdAdd.enabled = True
    Else
        cmdAdd.enabled = False
    End If
End Sub
Sub getGuidence()

    Dim WS As Worksheet
    Dim i As Long

    Set WS = ThisWorkbook.Worksheets("ShortCut")
    i = 3
    
    txtGuidence.Text = ""

    '|fffd|}|fffd|N|fffd||fffd||fffd|V|fffd|[|fffd|g|fffd||303||fffd||fffd|[|fffd|h
    Do Until WS.Cells(i, 1).Value = ""
        
        If WS.Cells(i, 3).Value = cmbShift.List(cmbShift.ListIndex, 1) & lstKey.List(lstKey.ListIndex, 2) Then
            txtGuidence.Text = "|fffd|y" & WS.Cells(i, 2).Value & "|fffd|z" & WS.Cells(i, 4).Value
            Exit Do
        End If
        i = i + 1
    Loop
End Sub

Attribute VB_Name = "frmHtml"
Attribute VB_Base = "0{4465FFE8-9D1B-48CF-9DF6-2891A7ED8E19}{7082FF7C-19BA-4D26-BBD9-27D9DC92270D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Const C_HTML_START As String = "<html>"
Const C_HTML_END As String = "</html>"
Const C_BODY_START As String = "<body>"
Const C_BODY_END As String = "</body>"
Const C_TABLE_START As String = "<table>"
Const C_TABLE_BORDER_START As String = "<table border=""1"">"
Const C_TABLE_END As String = "</table>"
Const C_TR_START As String = "  <tr>"
Const C_TR_END As String = "  </tr>"
Const C_TD_START_FROM As String = "    <td"
Const C_TD_START_TO As String = ">"
Const C_TD_END As String = "</td>"
Const C_TH_START_FROM As String = "    <th"
Const C_TH_START_TO As String = ">"
Const C_TH_END As String = "</th>"
Const C_BR As String = "<br>"

Private blnReCall As Boolean

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdPreview_Click()

    On Error Resume Next

    Dim strTmpHtml As String
    Dim FS As Object
    Const C_FILE_NAME As String = "preview.html"


    Set FS = CreateObject("Scripting.FileSystemObject")

    strTmpHtml = rlxGetTempFolder() & C_FILE_NAME
    
    Set FS = Nothing


    Dim fp As Integer

    fp = FreeFile()
    Open strTmpHtml For Output As fp
    Close fp

    fp = FreeFile()
    Open strTmpHtml For Binary As fp
    
    Put #fp, , txtHtml.Text

    Close fp

    Dim WSh As Object
    
    Set WSh = CreateObject("WScript.Shell")
    
    WSh.Run strTmpHtml
    
    Set WSh = Nothing

End Sub

Private Sub optColor1_Click()
    Call htmlConv(True)
End Sub

Private Sub optColor2_Click()
    Call htmlConv(True)
End Sub

Private Sub optLine1_Click()
    Call htmlConv(True)
End Sub

Private Sub optLine2_Click()
    Call htmlConv(True)
End Sub

Private Sub optTag1_Click()
    Call htmlConv(True)
End Sub

Private Sub optTag2_Click()
    Call htmlConv(True)
End Sub

Private Sub optWidth1_Click()
    Call htmlConv(True)
End Sub

Private Sub optWidth2_Click()
    Call htmlConv(True)
End Sub

Private Sub UserForm_Initialize()


    blnReCall = True

    optLine1.Value = True
    optTag1.Value = True
    optWidth1.Value = True
    optColor1.Value = True

    blnReCall = False

    Call htmlConv(False)

End Sub
Private Function AddTag(ByRef strBuf As String, ByVal strTag As String) As String

    AddTag = strBuf & strTag & vbCrLf

End Function

Private Sub htmlConv(ByVal flg As Variant)

    Dim strBuf As String
    Dim lngRow As Long
    Dim lngCol As Long
    Dim r As Range
    Dim lngPoint() As Long
    Dim lngWidth() As Long
    Dim lngTotal As Long
    Dim lngTotal2 As Long
    
    Dim lngMax As Long
    Dim lngMaxPos As Long
    Dim lngMin As Long
    Dim lngMinPos As Long
    
    Dim lngSum As Long
    Dim lngPos As Long
    
    Dim strTdStartFrom As String
    Dim strTdStartTo As String
    Dim strTdEnd As String
    
    If blnReCall Then
        Exit Sub
    End If
    
'    If flg Then
'        Me.Hide
'        frmInformation.Message = "HTML|fffd||3ca||fffd||fffd||fffd||fffd||142||fffd||fffd|B|fffd||fffd||fffd||382||70ad||fffd||fffd||fffd||482||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
'        frmInformation.Show
'        DoEvents
'    End If

    Dim blnExLine As Boolean
    Dim blnExTag As Boolean
    Dim blnExWidth As Boolean
    Dim blnExColor As Boolean
    
    ReDim lngPoint(1 To Selection.Columns.count)
    ReDim lngWidth(1 To Selection.Columns.count)
    
    blnExLine = optLine1.Value
    blnExTag = optTag1.Value
    blnExWidth = optWidth2.Value
    blnExColor = optColor2.Value
    
    lngTotal = 0
    For lngCol = 1 To Selection.Columns.count
        lngPoint(lngCol) = Selection.Columns(lngCol).Width
        lngTotal = lngTotal + lngPoint(lngCol)
    Next

    lngTotal2 = 0
    lngMax = 0
    lngMaxPos = 0
    lngMin = 101
    lngMinPos = 0
    For lngCol = 1 To Selection.Columns.count
        lngWidth(lngCol) = Fix((lngPoint(lngCol) / lngTotal) * 100)
        lngTotal2 = lngTotal2 + lngWidth(lngCol)
        If lngMin > lngWidth(lngCol) Then
            lngMin = lngWidth(lngCol)
            lngMinPos = lngCol
        End If
        If lngMax < lngWidth(lngCol) Then
            lngMax = lngWidth(lngCol)
            lngMaxPos = lngCol
        End If
    Next

    Dim lngMinCnt As Long
    Dim lngMaxCnt As Long
    
    lngMaxCnt = 0
    lngMinCnt = 0
    
    For lngCol = 1 To Selection.Columns.count
        If lngWidth(lngMinPos) = lngWidth(lngCol) Then
            lngMinCnt = lngMinCnt + 1
        End If
        If lngWidth(lngMaxPos) = lngWidth(lngCol) Then
            lngMaxCnt = lngMaxCnt + 1
        End If
    Next

    If lngMinCnt < lngMaxCnt Then
        lngWidth(lngMinPos) = lngWidth(lngMinPos) + (100 - lngTotal2)
    Else
        lngWidth(lngMaxPos) = lngWidth(lngMaxPos) + (100 - lngTotal2)
    End If

    strBuf = AddTag(strBuf, C_HTML_START)
    strBuf = AddTag(strBuf, C_BODY_START)
    If blnExLine Then
        strBuf = AddTag(strBuf, C_TABLE_BORDER_START)
    Else
        strBuf = AddTag(strBuf, C_TABLE_START)
    End If
    
    If blnExTag Then
        strTdStartFrom = C_TD_START_FROM
        strTdStartTo = C_TD_START_TO
        strTdEnd = C_TD_END
    Else
        strTdStartFrom = C_TH_START_FROM
        strTdStartTo = C_TH_START_TO
        strTdEnd = C_TH_END
    End If
    
    For lngRow = 1 To Selection.Rows.count
    
        strBuf = AddTag(strBuf, C_TR_START)
    
        For lngCol = 1 To Selection.Columns.count
            
            Set r = Selection(lngRow, lngCol)
            
            '|fffd|}|fffd|[|fffd|W|fffd|Z|fffd||fffd||fffd||30f||a347|
            If r.MergeCells Then
            
                If r.MergeArea(1, 1).Address = r.Address Then
                
                    If lngRow = 1 Then
                    
                        strBuf = strBuf & strTdStartFrom
                        
                        lngSum = 0
                        For lngPos = lngCol To lngCol + r.MergeArea.Columns.count - 1
                            lngSum = lngSum + lngWidth(lngPos)
                        Next
                        If blnExWidth Then
                            strBuf = strBuf & " width=""" & lngSum & "%"""
                        End If
                    Else
                        strBuf = strBuf & C_TD_START_FROM
                    End If
                    
                    strBuf = strBuf & " style="""
                    If blnExColor Then
#If VBA7 And Win64 Then
                            strBuf = strBuf & "background-color:" & getRGB(r.DisplayFormat.Interior.Color) & ";"
#Else
                            strBuf = strBuf & "background-color:" & getRGB(r.Interior.Color) & ";"
#End If
                    End If
                    
'                    strBuf = strBuf & " style=""text-align:" & getAlign(r) & ";"""
                    strBuf = strBuf & "text-align:" & getAlign(r) & ";"""
                    
                    If r.MergeArea.Columns.count > 1 Then
                        strBuf = strBuf & " colspan=""" & r.MergeArea.Columns.count & """"
                    End If
                    
                    If r.MergeArea.Rows.count > 1 Then
                        strBuf = strBuf & " rowspan=""" & r.MergeArea.Rows.count & """"
                    End If
                    
                    If lngRow = 1 Then
                        strBuf = strBuf & strTdStartTo & getText(blnExColor, r) & strTdEnd & vbCrLf
                    Else
                        strBuf = strBuf & C_TD_START_TO & getText(blnExColor, r) & C_TD_END & vbCrLf
                    End If
                    
                End If
            
            Else
                If lngRow = 1 Then
                    strBuf = strBuf & strTdStartFrom
                
                    If blnExWidth Then
                        strBuf = strBuf & " width=""" & lngWidth(lngCol) & "%"""
                    End If
                
                    strBuf = strBuf & " style="""
                    If blnExColor Then
#If VBA7 And Win64 Then
                            strBuf = strBuf & "background-color:" & getRGB(r.DisplayFormat.Interior.Color) & ";"
#Else
                            strBuf = strBuf & "background-color:" & getRGB(r.Interior.Color) & ";"
#End If
                    End If
                    
                    strBuf = strBuf & "text-align:" & getAlign(r) & ";"""
                    strBuf = strBuf & strTdStartTo & getText(blnExColor, r) & strTdEnd & vbCrLf
                
                Else
                
                    strBuf = strBuf & C_TD_START_FROM
                    
                    strBuf = strBuf & " style="""
                    If blnExColor Then
#If VBA7 And Win64 Then
                            strBuf = strBuf & "background-color:" & getRGB(r.DisplayFormat.Interior.Color) & ";"
#Else
                            strBuf = strBuf & "background-color:" & getRGB(r.Interior.Color) & ";"
#End If
                    End If
                    
                    strBuf = strBuf & "text-align:" & getAlign(r) & ";"""
                    strBuf = strBuf & C_TD_START_TO & getText(blnExColor, r) & C_TD_END & vbCrLf
                End If
            End If
        
        Next
        
        strBuf = AddTag(strBuf, C_TR_END)
        
    Next

    strBuf = AddTag(strBuf, C_TABLE_END)
    strBuf = AddTag(strBuf, C_BODY_END)
    strBuf = AddTag(strBuf, C_HTML_END)
    
    txtHtml.Text = strBuf
    
    txtHtml.SelStart = Len(txtHtml.Text)
    txtHtml.SelStart = 0
    txtHtml.SelLength = Len(txtHtml.Text)

'If flg Then
'    Unload frmInformation
'    Me.Show
'End If
    
    txtHtml.SetFocus
'    SendKeys "^A"
    
End Sub
Private Function getText(ByVal blnExColor As Boolean, ByRef r As Range) As String


    Dim lngColor As Variant
    Dim i As Long
    Dim blnBold As Boolean
    Dim strBuf As String
    
    blnBold = False
    
    If blnExColor Then
''        If VarType(r.Value) = vbString Then
'        On Error Resume Next
'        i = r.Characters.count
'        If err.Number = 0 Then
''            For i = 1 To Len(r.Value)
'            For i = 1 To r.Characters.count
'                '<span>
'                Select Case i
'                    Case 1
'#If VBA7 Then
'                            strBuf = "<span style=""color:" & getRGB(r.DisplayFormat.Characters(i, 1).Font.Color) & """ >"
'                            lngColor = r.DisplayFormat.Characters(i, 1).Font.Color
'#Else
'                            strBuf = "<span style=""color:" & getRGB(r.Characters(i, 1).Font.Color) & """ >"
'                            lngColor = r.Characters(i, 1).Font.Color
'#End If
'                    Case Else
'#If VBA7 Then
'                            If lngColor <> r.DisplayFormat.Characters(i, 1).Font.Color Then
'                                strBuf = strBuf & "</span><span style=""color:" & getRGB(r.DisplayFormat.Characters(i, 1).Font.Color) & """ >"
'                                lngColor = r.DisplayFormat.Characters(i, 1).Font.Color
'                            End If
'#Else
'                            If lngColor <> r.Characters(i, 1).Font.Color Then
'                                strBuf = strBuf & "</span><span style=""color:" & getRGB(r.Characters(i, 1).Font.Color) & """ >"
'                                lngColor = r.Characters(i, 1).Font.Color
'                            End If
'#End If
'
'                End Select
'
'
'                strBuf = strBuf & htmlSanitizing(r.Characters(i, 1).Text)
''                strBuf = strBuf & htmlSanitizing(Mid$(r.Value, i, 1))
'
'                '</span>
'                Select Case i
'                    Case r.Characters.count
''                    Case Len(r.Value)
'                        strBuf = strBuf & "</span>"
'                End Select
'
'            Next
'        Else
#If VBA7 And Win64 Then
                strBuf = "<span style=""color:" & getRGB(r.DisplayFormat.Font.Color) & """>" & rlxHtmlSanitizing(r.Text) & "</span>"
#Else
                strBuf = "<span style=""color:" & getRGB(r.Font.Color) & """>" & rlxHtmlSanitizing(r.Text) & "</span>"
#End If
'        End If
    Else
        strBuf = rlxHtmlSanitizing(r.Text)
    End If
    
    getText = replaceNl(strBuf)

End Function
Private Function replaceNl(ByVal strBuf As String) As String

    strBuf = Replace(strBuf, vbCrLf, C_BR)
    strBuf = Replace(strBuf, vbCr, C_BR)
    strBuf = Replace(strBuf, vbLf, C_BR)
    
    replaceNl = strBuf
    
End Function
Private Function getRGB(ByVal lngColor As Variant) As String

    Dim strBuf As String
    If IsNull(lngColor) Then
        getRGB = "#000000"
    Else
    
        strBuf = Right$("000000" & Hex$(lngColor), 6)
    
        getRGB = "#" & Mid$(strBuf, 5, 2) & Mid$(strBuf, 3, 2) & Mid$(strBuf, 1, 2)
    End If
End Function
Private Function getAlign(ByRef r As Range) As String

    Dim strBuf As String

    Select Case r.HorizontalAlignment
        Case xlLeft
            strBuf = "left"
        Case xlRight
            strBuf = "right"
        Case xlCenter
            strBuf = "center"
        Case Else
            Select Case True
                Case r.NumberFormatLocal = "@"
                    strBuf = "left"
                Case IsNumeric(r.Value)
                    strBuf = "right"
                Case Else
                    strBuf = "left"
            End Select
    End Select

    getAlign = strBuf

End Function
Attribute VB_Name = "frmImportKey"
Attribute VB_Base = "0{5841DB5C-F59A-45C5-8111-3342CFCD4D94}{880A56BB-391E-4A7C-BC7D-6F2BD3391018}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private m As VbMsgBoxResult

Function Start(ByVal strMsg As String) As VbMsgBoxResult

    txtMessage.Text = strMsg
    
    txtMessage.SelStart = 0
    
    Me.Show

    Start = m

End Function

Private Sub cmdCancel_Click()
    m = vbCancel
    Unload Me
End Sub

Private Sub cmdClear_Click()
    m = vbNo
    Unload Me
End Sub

Private Sub cmdOK_Click()
    m = vbYes
    Unload Me
End Sub

Attribute VB_Name = "frmInformation"
Attribute VB_Base = "0{F20EFF7B-B713-4CCD-969C-EDBAA0DFCB4E}{163AA539-CC6F-4331-9A91-A64FDDE9EE38}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Public Message As String

Private Sub UserForm_Activate()
    Me.lblMessage.Caption = Message

End Sub

Private Sub UserForm_Initialize()
    Me.Caption = C_TITLE
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = 0 Then
        Cancel = True
    End If
End Sub
Attribute VB_Name = "frmInputLength"
Attribute VB_Base = "0{3904E385-369C-4669-AA19-F68BF05F1C02}{186E5E69-8D15-48FA-8A6B-5756E883AC39}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private mResult As VBA.VbMsgBoxResult

Public Function Start(ByVal strTitle As String) As Long

    lblMessage.Caption = strTitle

    Me.Show vbModal
    If mResult = vbOK Then
        Start = Val(txtHead.Text)
    Else
        Start = 0
    End If

End Function
Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdOK_Click()
    If rlxIsNumber(txtHead.Text) Then
        mResult = vbOK
        Unload Me
    Else
        MsgBox "|fffd||fffd||fffd|l|fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
    End If
End Sub

Private Sub spnHead_SpinDown()
    txtHead.Text = spinDown(txtHead.Text)
End Sub

Private Sub spnHead_SpinUp()
    txtHead.Text = spinUp(txtHead.Text)
End Sub
Private Function spinUp(ByVal vntValue As Variant) As Variant

    Dim lngValue As Long
    
    lngValue = Val(vntValue)
    lngValue = lngValue + 1
    spinUp = lngValue

End Function

Private Function spinDown(ByVal vntValue As Variant) As Variant

    Dim lngValue As Long
    
    lngValue = Val(vntValue)
    lngValue = lngValue - 1
    If lngValue < 0 Then
        lngValue = 0
    End If
    spinDown = lngValue

End Function


Private Sub txtHead_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case Chr$(KeyAscii)
        Case "0" To "9"
        Case Else
            KeyAscii = 0
    End Select
End Sub

Private Sub UserForm_Initialize()
    txtHead.Text = "1"
    txtHead.SelStart = 0
    txtHead.SelLength = 1
End Sub
Attribute VB_Name = "frmLoadCSV"
Attribute VB_Base = "0{A8E2703A-537D-44B0-A81C-BB9F634DBEF0}{18DD5A26-C635-4774-B2EA-2895F93C7E34}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private mdblLineWidth As Double
Private mblnCancel As Boolean

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdFolder_Click()

    Dim strFile As String


    strFile = Application.GetOpenFilename("|fffd|J|fffd||fffd||fffd|}|fffd||fffd||602||fffd|t|fffd|@|fffd|C|fffd||fffd|(*.csv;*.txt),(*.csv;*.txt)", , "|fffd|b|fffd|r|fffd|u|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||1cd||fffd|", , False)
    If strFile = "False" Then
        '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd|w|fffd||80b3||fffd||fffd||202||fffd||fffd||fffd||fffd||fffd||fffd||a347|
        Exit Sub
    End If
    
    txtFolder.Text = strFile
    
End Sub

Private Sub cmdRun_Click()

    Dim fp As Integer
    Dim WS As Worksheet
    Dim strFile As String
    Dim strBuf As String
    Dim bytBuf() As Byte
    Dim varRow As Variant
    
    
    Dim j As Long
    Dim k As Long
    Dim arPaste() As Variant
    Dim lngSize As Long
    Dim lngRead As Long
    Dim lngMax As Long
    
    Dim mm As MacroManager
        
    Dim r As Range
    
    strFile = txtFolder.Text
    
    '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||311||fffd||fffd||743|`|fffd|F|fffd|b|fffd|N
    If rlxIsFileExists(strFile) Then
    Else
        MsgBox "|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd||fffd|B", vbExclamation, C_TITLE
        Exit Sub
    End If
    
    Dim lngRow As Long
    Dim lngCol As Long
    
    fp = FreeFile()
    Open strFile For Binary As fp
    
    lngSize = LOF(fp)
    If lngSize <> 0 Then
        ReDim bytBuf(0 To LOF(fp) - 1)
        Get fp, , bytBuf
    End If
    
    Close fp
    
    If lngSize = 0 Then
        Exit Sub
    End If
    
    Set mm = New MacroManager
    Set mm.Form = Me
    mm.Disable
    mm.DispGuidance "|fffd|b|fffd|r|fffd|u|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||30d|s|fffd||fffd||fffd||fffd||fffd|J|fffd|E|fffd||fffd||fffd|g|fffd||fffd||fffd||102||fffd||fffd||702||fffd|..."
    
    Set WS = ActiveWorkbook.Worksheets.Add(after:=ActiveWorkbook.Worksheets(ActiveWorkbook.Worksheets.count))
    
    If chkUTF8.Value Then
        'UTF8|fffd||fffd||fffd||fffd|UNICODE
        Dim utf8 As UTF8Encoding
        Set utf8 = New UTF8Encoding
        strBuf = utf8.GetString(bytBuf())
        Set utf8 = Nothing
    Else
        strBuf = strConv(bytBuf, vbUnicode)
    End If
    
    lngRow = 1
    lngCol = 1
    
    Dim lngPos As Long
    Dim i As Long
    Dim strLine() As String
    
    lngPos = InStr(strBuf, vbCrLf)
    If lngPos <> 0 Then
        strLine = Split(strBuf, vbCrLf)
    Else
        lngPos = InStr(strBuf, vbLf)
        If lngPos <> 0 Then
            strLine = Split(strBuf, vbLf)
        Else
            strLine = Split(strBuf, vbCr)
        End If
    End If
    
'    'CRLF or CR |fffd||30f||a347| LF |fffd||255||3ca||fffd|
'    strBuf = Replace(strBuf, vbCrLf, vbLf)
'    strBuf = Replace(strBuf, vbCr, vbLf)
'    strLine = Split(strBuf, vbLf)
    
    '|fffd|J|fffd||fffd||fffd|}|fffd||fffd||602||fffd||155||fffd||fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd|i|fffd|_|fffd|u|fffd||fffd||fffd|R|fffd|[|fffd|e|fffd|[|fffd|V|fffd||fffd||fffd||fffd||fffd||fffd||fffd|J|fffd||fffd||fffd|}|fffd||389||fffd||fffd|j
    varRow = rlxCsvPart(strLine(1))
    
    '|fffd||fffd||fffd||690||fffd||fffd||315||fffd||fffd|A|fffd||fffd||311|I|fffd||fffd||fffd||fffd||fffd||fffd||fffd|A|fffd||fffd||fffd||fffd||fffd||fffd|`|fffd||fffd||fffd||242||fffd||fffd||fffd|B
    Set r = Range(WS.Columns(lngCol), WS.Columns(lngCol + UBound(varRow) - 1))
    r.NumberFormatLocal = "@"

    Const BASE_LINE As Long = 20000
    
    lngSize = UBound(strLine) + 1
    
    lngMax = UBound(strLine) + 1
    mm.StartGauge lngMax
    
    lngRow = 1
    
    i = 0
    Do While lngSize > 0
    
        If lngSize < BASE_LINE Then
            lngRead = lngSize
        Else
            lngRead = BASE_LINE
        End If
        
        ReDim arPaste(1 To lngRead, LBound(varRow) To UBound(varRow))
        
        For k = 1 To lngRead
            '|fffd|J|fffd||fffd||fffd|}|fffd||fffd||602||fffd||155||fffd||fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd|i|fffd|_|fffd|u|fffd||fffd||fffd|R|fffd|[|fffd|e|fffd|[|fffd|V|fffd||fffd||fffd||fffd||fffd||fffd||fffd|J|fffd||fffd||fffd|}|fffd||389||fffd||fffd|j
            varRow = rlxCsvPart(strLine(i))
            For j = LBound(varRow) To UBound(varRow)
                arPaste(k, j) = varRow(j)
            Next
            i = i + 1
            '|fffd|Q|fffd|[|fffd|W|fffd||315|\|fffd||fffd|
            mm.DisplayGauge i
            If mblnCancel Then
                Exit Do
            End If
        Next
           
        Range(WS.Cells(lngRow, 1), WS.Cells(lngRow + UBound(arPaste, 1) - 1, UBound(arPaste, 2))).Value = arPaste
       lngSize = lngSize - lngRead
       lngRow = lngRow + lngRead
       
    Loop
    
    
'    WS.Name = rlxGetFullpathFromFileName(strFile)
       
    '|fffd||fffd||fffd||5c2||113|\|fffd||fffd|t|fffd||fffd||fffd||fffd||fffd||fffd||fffd||50a|u|fffd||12c90||fffd|
    If r Is Nothing Then
    Else
        r.AutoFit
        Set r = Nothing
    End If
    
    Set mm = Nothing
    Unload Me
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbInformation, C_TITLE

End Sub

Private Sub UserForm_Initialize()
    lblGauge.visible = False
    mblnCancel = False
End Sub

Private Sub UserForm_Terminate()
    mblnCancel = True
End Sub
Attribute VB_Name = "frmMaxCount"
Attribute VB_Base = "0{1C8BCCD6-8620-4615-9D9D-ACAC55627FB5}{0D6B9776-4096-427D-BE45-5D5B51AF6228}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Sub Start(ByVal lngByte As Long, ByVal lngString As Long)

    Me.txtByte.Value = lngByte
    Me.txtString.Value = lngString

    Me.Show

End Sub

Private Sub cmdCancel_Click()
    Unload Me
End Sub
Attribute VB_Name = "frmMessageDigest"
Attribute VB_Base = "0{9BFF1C95-254A-4A57-B591-E7759C787DDC}{3D42245E-F85E-41EF-93AE-F1E8E149ACB1}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdFolder_Click()

    Dim strFile As String


    strFile = Application.GetOpenFilename("|fffd|t|fffd|@|fffd|C|fffd||fffd|(*.*),(*.*)", , "|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||1cd||fffd|", , False)
    If strFile = "False" Then
        '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd|w|fffd||80b3||fffd||fffd||202||fffd||fffd||fffd||fffd||fffd||fffd||a347|
        Exit Sub
    End If
    
    txtFolder.Text = strFile
    
End Sub

Private Sub cmdRun_Click()

    Dim fp As Integer
    Dim strFile As String
    Dim strBuf As String
    Dim bytBuf() As Byte
    
    Dim varRow As Variant
    
    Dim r As Range
    
    strFile = txtFolder.Text
    
    '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||311||fffd||fffd||743|`|fffd|F|fffd|b|fffd|N
    If rlxIsFileExists(strFile) Then
    Else
        MsgBox "|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd||fffd|B", vbExclamation, C_TITLE
        Exit Sub
    End If
    
    fp = FreeFile()
    Open strFile For Binary As fp
    
    If LOF(fp) <> 0 Then
        ReDim bytBuf(0 To LOF(fp) - 1)
        Get fp, , bytBuf
    End If
    
    Close fp
    
    Dim md As New CryptoServiceProvider
    
    md.HashType = HashTypeMD5
    txtMD5.Text = md.ComputeHash(bytBuf)
    
    md.HashType = HashTypeSHA1
    txtSHA1.Text = md.ComputeHash(bytBuf)
    
    md.HashType = HashTypeSHA256
    txtSHA256.Text = md.ComputeHash(bytBuf)
    
    md.HashType = HashTypeSHA384
    txtSHA384.Text = md.ComputeHash(bytBuf)
    
    md.HashType = HashTypeSHA512
    txtSHA512.Text = md.ComputeHash(bytBuf)
    
    Set md = Nothing

End Sub




Private Sub TextBox1_Change()

End Sub

Private Sub UserForm_Initialize()

    txtMD5.Text = ""
    txtSHA1.Text = ""
    txtSHA256.Text = ""
    txtSHA384.Text = ""
    txtSHA512.Text = ""

End Sub
Attribute VB_Name = "frmPageList"
Attribute VB_Base = "0{CC9D735E-073D-4605-B900-C45BDE8C233F}{8D65C75C-C4A3-422C-8A6D-68449032AC8D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Option Explicit
Private mRange As Range
Private mblnSelectMode As Boolean
'Private mobjRegx As Object
'Private mlngCount As Long
Private mblnCancel As Boolean

Private mblnRefresh As Boolean

Private Const C_START_ROW As Long = 2
Private Const C_SEARCH_NO As Long = 1
Private Const C_SEARCH_BOOK As Long = 2
Private Const C_SEARCH_PAGE As Long = 3
'Private Const C_SEARCH_ADDRESS As Long = 4
'Private Const C_SEARCH_STR As Long = 5
'Private Const C_SEARCH_ID As Long = 6

'Private Const C_SEARCH_OBJECT_CELL = "|fffd|Z|fffd||fffd||fffd||302||fffd|"
'Private Const C_SEARCH_OBJECT_SHAPE = "|fffd|V|fffd|F|fffd|C|fffd|v|fffd||302||fffd|"
'Private Const C_SEARCH_OBJECT_CELL_AND_SHAPE = "|fffd|Z|fffd||fffd||fffd||fffd||fffd|V|fffd|F|fffd|C|fffd|v"
'Private Const C_SEARCH_VALUE_VALUE = "|fffd|l"
'Private Const C_SEARCH_VALUE_FORMULA = "|fffd||fffd|"



Private Const C_WORD_FILE As String = ".DOC"
Private Const C_EXCEL_FILE As String = ".XLS"
Private Const C_PPT_FILE As String = ".PPT"

Private mMm As MacroManager




Private Sub cmdCancel_Click()
    If cmdCancel.Caption = "|fffd||82||fffd||fffd||fffd|" Then
        Unload Me
    Else
        mblnCancel = True
    End If
End Sub

Private Sub cmdFolder_Click()

    Dim strFile As String

    '|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||64fe|
    strFile = rlxSelectFolder()
    
    If Trim(strFile) <> "" Then
        cboFolder.Text = strFile
    End If
    
End Sub



Private Sub cmdOK_Click()

    Dim XL As Excel.Application
    Dim WB As Workbook
    Dim WS As Worksheet
    
    Dim colBook As Collection
    Dim varBook As Variant
    Dim objFs As Object
    Dim lngBookCount As Long
    Dim lngCount As Long
    Dim lngBookMax As Long
    
    Dim ResultWS As Worksheet
    
    Dim strPath As String
    Dim strPtn As String
    Dim strPatterns() As String
    
    Dim lngPage As Long
   
    If Len(Trim(cboFolder.Text)) = 0 Then
        MsgBox "|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...", vbExclamation, C_TITLE
        cboFolder.SetFocus
        Exit Sub
    End If
    
    strPath = cboFolder.Text
    
    strPtn = ""
    
    If chkExcel.Value Then
        strPtn = "*.xls;*.xlsx"
    End If
    
    If chkWord.Value Then
        If strPtn = "" Then
            strPtn = strPtn & "*.doc;*.docx"
        Else
            strPtn = strPtn & ";*.doc;*.docx"
        End If
    End If
    
    If chkPoint.Value Then
        If strPtn = "" Then
            strPtn = strPtn & "*.ppt;*.pptx"
        Else
            strPtn = strPtn & ";*.ppt;*.pptx"
        End If
    End If
    
    strPatterns = Split(strPtn, ";")
    

    Set colBook = New Collection
    
    Set objFs = CreateObject("Scripting.FileSystemObject")
    
    On Error Resume Next
    
    Set mMm = New MacroManager
    Set mMm.Form = Me
    mMm.Disable
    mMm.DispGuidance "|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||310||fffd||fffd||fffd||fffd|J|fffd|E|fffd||fffd||fffd|g|fffd||fffd||fffd||102||fffd||fffd||702||fffd|..."
    
    FileSearch objFs, strPath, strPatterns(), colBook
    Select Case err.Number
    Case 75, 76
        mMm.Enable
        Set mMm = Nothing
        MsgBox "|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd||fffd|B", vbExclamation, "ExcelGrep"
        cboFolder.SetFocus
        Exit Sub
    End Select
    
    
    Set objFs = Nothing
    
    ThisWorkbook.Worksheets("|fffd|y|fffd|[|fffd|W|fffd||fffd||fffd|J|fffd|E|fffd||fffd||fffd|g|fffd||fffd||fffd||fffd|").Copy
    Set ResultWS = ActiveSheet
    
    ResultWS.Cells(1, C_SEARCH_NO).Value = "No."
    ResultWS.Cells(1, C_SEARCH_BOOK).Value = "|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd|"
    ResultWS.Cells(1, C_SEARCH_BOOK).ColumnWidth = 60
    ResultWS.Cells(1, C_SEARCH_PAGE).Value = "|fffd|y|fffd|[|fffd|W|fffd||fffd|"

    lngCount = C_START_ROW

    AppActivate Me.Caption
    
    cmdCancel.Caption = "|fffd|L|fffd||fffd||fffd||fffd||fffd|Z|fffd||fffd|"
    
    If chkExcel.Value Then
        Set XL = New Excel.Application
    End If
    If chkWord.Value Then
        Dim WD As Object
        Dim DC As Object
        Set WD = CreateObject("Word.Application")
    End If
    If chkPoint.Value Then
        Dim PP As Object
        Dim PT As Object
        Set PP = CreateObject("PowerPoint.Application")
    End If
    
    lngBookCount = 0
    lngBookMax = colBook.count
    mMm.StartGauge lngBookMax
    
    For Each varBook In colBook
    
        If mblnCancel Then
            Exit For
        End If
    
        err.Clear
        
        ResultWS.Cells(lngCount, C_SEARCH_NO).Value = lngCount - C_START_ROW + 1
        ResultWS.Cells(lngCount, C_SEARCH_BOOK).Value = varBook
    
        ResultWS.Hyperlinks.Add _
            Anchor:=ResultWS.Cells(lngCount, C_SEARCH_BOOK), _
            Address:="", _
            SubAddress:="", _
            TextToDisplay:=varBook
        
        Select Case True
            Case InStr(UCase(varBook), C_EXCEL_FILE) > 0
            
                Set WB = XL.Workbooks.Open(filename:=varBook, ReadOnly:=True)
                
                lngPage = 0
                For Each WS In WB.Worksheets
                    If WS.visible = xlSheetVisible Then
                        lngPage = lngPage + (WS.VPageBreaks.count + 1) * (WS.HPageBreaks.count + 1)
                    End If
                Next
                
                ResultWS.Cells(lngCount, C_SEARCH_PAGE).Value = lngPage
                WB.Close SaveChanges:=False
                Set WB = Nothing
        
            Case InStr(UCase(varBook), C_WORD_FILE) > 0
            
                Set DC = WD.Documents.Open(filename:=varBook, ReadOnly:=True)
                
                DC.Repaginate
                
                ResultWS.Cells(lngCount, C_SEARCH_PAGE).Value = DC.BuiltinDocumentProperties(14)
                
                DC.Close SaveChanges:=False
                Set DC = Nothing
                
            Case InStr(UCase(varBook), C_PPT_FILE) > 0
            
                Set PT = PP.Presentations.Open(filename:=varBook, ReadOnly:=True, withwindow:=False)
                    
                ResultWS.Cells(lngCount, C_SEARCH_PAGE).Value = PT.Slides.count
                
                PT.Close
                Set PT = Nothing
                
        End Select
        
        lngBookCount = lngBookCount + 1
        lngCount = lngCount + 1
        mMm.DisplayGauge lngBookCount
    Next
    
    If chkPoint.Value Then
        PP.Quit
        Set PP = Nothing
    End If
    If chkWord.Value Then
        WD.Quit
        Set WD = Nothing
    End If
    If chkExcel.Value Then
        XL.Quit
        Set XL = Nothing
    End If
    
    Dim r As Range
    Set r = ResultWS.Cells(C_START_ROW, 1).CurrentRegion
    
    r.VerticalAlignment = xlTop
    r.Select
    


    
    Dim strBuf As String
    Dim i As Long
   
    strBuf = cboFolder.Text
    lngCount = 1
    For i = 0 To cboFolder.ListCount - 1
        If cboFolder.List(i) <> cboFolder.Text Then
            strBuf = strBuf & vbTab & cboFolder.List(i)
            lngCount = lngCount + 1
            '|fffd||fffd||fffd|X|fffd|g|fffd||34d||151||fffd|P|fffd|O
            If lngCount >= 10 Then
                Exit For
            End If
        End If
    Next
    rlxSaveSetting C_TITLE, "ExcelPages", "FolderStr", strBuf
    

    SaveSetting C_TITLE, "ExcelPages", "chkSubFolder", chkSubFolder.Value

    
    Set mMm = Nothing
    
    Unload Me
    
    AppActivate ResultWS.Application.Caption
    execSelectionRowDrawGrid
    Set ResultWS = Nothing
    
End Sub
Private Sub FileSearch(objFs As Object, strPath As String, strPatterns() As String, objCol As Collection)

    Dim objfld As Object
    Dim objfl As Object
    Dim objSub As Object
    Dim f As Variant
    
    Dim lngCol2 As Long

    Set objfld = objFs.GetFolder(strPath)
    
    '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||64fe|
    For Each objfl In objfld.files
    
        Dim blnFind As Boolean
        blnFind = False
        DoEvents
        DoEvents
        DoEvents
        For Each f In strPatterns
            If LCase(objfl.name) Like LCase(f) Then
                blnFind = True
                Exit For
            End If
        Next
        
        If blnFind Then
            objCol.Add rlxAddFileSeparator(objfl.ParentFolder.Path) & objfl.name
        End If
    Next
    
    '|fffd|T|fffd|u|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If chkSubFolder.Value Then
        For Each objSub In objfld.SubFolders
            DoEvents
            DoEvents
            DoEvents
            FileSearch objFs, objSub.Path, strPatterns(), objCol
        Next
    End If
End Sub

Private Sub UserForm_Initialize()
    
    Dim strBuf As String
    Dim strSearch() As String
    Dim strFolder() As String
    Dim i As Long
    
    mblnRefresh = True
    
    strBuf = rlxGetSetting(C_TITLE, "ExcelPages", "FolderStr", "")
    strFolder = Split(strBuf, vbTab)
    
    For i = LBound(strFolder) To UBound(strFolder)
        cboFolder.AddItem strFolder(i)
    Next
    If cboFolder.ListCount > 0 Then
        cboFolder.ListIndex = 0
    End If

    lblGauge.visible = False
    
    chkExcel.Value = True
    chkWord.Value = True
    chkPoint.Value = True
    
    chkSubFolder.Value = GetSetting(C_TITLE, "ExcelPages", "chkSubFolder", False)
    
End Sub

Attribute VB_Name = "frmReSelect"
Attribute VB_Base = "0{6B48EB11-2F95-469C-9114-BB51A652316C}{81698A98-483E-47E2-BDB5-7122EFC780E5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Dim mstrSelRenge As String
Dim mlngLeft As Long
Dim mlngTop As Long

Private Sub cboRange_Change()
    Dim lngLeft As Long
    Dim lngTop As Long
    
    If chkOffset.Value Then
        lngLeft = getLeft(Range(cboRange.Text))
        lngTop = getTop(Range(cboRange.Text))
        
        lngLeft = mlngLeft - lngLeft
        lngTop = mlngTop - lngTop
        
        Range(cboRange.Text).Offset(lngTop, lngLeft).Select
    Else
        '|fffd|I|fffd||fffd||348||342||1570c||fffd|
        Range(cboRange.Text).Select
    End If
End Sub

Private Sub chkOffset_Click()
    Call cboRange_Change
End Sub

Private Sub cmdCancel_Click()
    '|fffd|I|fffd||fffd||348||342||1570c||fffd|
    Range(mstrSelRenge).Select
    Unload Me
End Sub

Private Sub cmdOK_Click()

    Dim strBuf As String
    Dim lngCount As Long
    Dim i As Long

    strBuf = cboRange.Text
    If Len(Trim(strBuf)) = 0 Then
        Exit Sub
    End If
    
    lngCount = 1
    For i = 0 To cboRange.ListCount - 1
        If cboRange.List(i) <> cboRange.Text Then
            strBuf = strBuf & vbTab & cboRange.List(i)
            lngCount = lngCount + 1
            '|fffd||fffd||fffd|X|fffd|g|fffd||34d||151||fffd|P|fffd|O
            If lngCount >= 20 Then
                Exit For
            End If
        End If
    Next
    rlxSaveSetting C_TITLE, "ReSelect", "Range", strBuf
    SaveSetting C_TITLE, "ReSelect", "Offset", chkOffset.Value
    
    Unload Me
End Sub

Private Sub UserForm_Initialize()

    Dim strRange() As String
    Dim strBuf As String
    Dim i As Long
    
    '|fffd||fffd||fffd||742||311|I|fffd||fffd||348||342||fffd||6d1||fffd|
    mstrSelRenge = Selection.Address
    
    mlngLeft = getLeft(Selection)
    mlngTop = getTop(Selection)
    

    strBuf = rlxGetSetting(C_TITLE, "ReSelect", "Range", "")
    strRange = Split(strBuf, vbTab)
    
    For i = LBound(strRange) To UBound(strRange)
        cboRange.AddItem strRange(i)
    Next
    If cboRange.ListCount > 0 Then
        cboRange.ListIndex = 0
    End If
    
    chkOffset.Value = GetSetting(C_TITLE, "ReSelect", "Offset", False)
    
End Sub
Private Function getLeft(ByVal s As Range) As Long

    Dim lngMin As Long
    Dim r As Range
    lngMin = 2147483647

    For Each r In s.Areas
        If lngMin > r.Column Then
            lngMin = r.Column
        End If
    Next
    getLeft = lngMin
End Function
Private Function getTop(ByVal s As Range) As Long

    Dim lngMin As Long
    Dim r As Range
    
    lngMin = 2147483647

    For Each r In s.Areas
        If lngMin > r.row Then
            lngMin = r.row
        End If
    Next
    getTop = lngMin
End Function

Attribute VB_Name = "frmReference"
Attribute VB_Base = "0{2A0E75E9-FBC0-4B80-96A4-2DB009B68BFA}{1C896A0D-CCA4-4EB6-94B2-A44D402BF5AD}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private lngResult As VbMsgBoxResult
Option Explicit
Private Sub cmdCancel_Click()
    
    Unload Me

End Sub

Private Sub cmdRun_Click()
    
    lngResult = VbMsgBoxResult.vbOK
    Unload Me
    
End Sub

Public Function Start(ByRef blnResult As Boolean) As Long

    lngResult = VbMsgBoxResult.vbCancel
    optRef1.Value = True
    
    Me.Show vbModal

    Select Case True
        Case optRef1.Value
            blnResult = False
            
        Case optRef2.Value
            blnResult = True
    
    End Select
    
    Start = lngResult

End Function

Attribute VB_Name = "frmReplace"
Attribute VB_Base = "0{55B5A6A8-6C31-4758-912A-AA5A1285BC9D}{3A59DE48-A388-4845-BF67-3879F3BB2530}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private mResult As VbMsgBoxResult

Public Function Start(ByRef strFolder As String, ByRef blnSubFolder As Boolean) As VbMsgBoxResult

    '|fffd|f|fffd|t|fffd|H|fffd||fffd||fffd|g|fffd|l|fffd||303|Z|fffd|b|fffd|g
    txtFolder.Text = ""
    chkSubFolder.Value = False
    mResult = vbCancel
    
    '|fffd|t|fffd|H|fffd|[|fffd||fffd||fffd||315|\|fffd||fffd|
    Me.Show vbModal

    '|fffd||fffd||fffd||282||310||752||fffd|
    strFolder = txtFolder.Text
    blnSubFolder = chkSubFolder.Value
    Start = mResult
    

End Function
Private Sub cmdCancel_Click()
    
    mResult = vbCancel
    Unload Me
    
End Sub

Private Sub cmdFolder_Click()

    Dim strFile As String

    '|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||64fe|
    strFile = rlxSelectFolder()
    
    If Trim(strFile) <> "" Then
        txtFolder.Text = strFile
    End If
    
    
End Sub

Private Sub cmdRun_Click()
    
'    Dim lngRow As Long
'    Dim lngCol As Long
    Dim filename As String
'    Dim objFs As Object
    
'    If ActiveCell Is Nothing Then
'        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|Z|fffd||fffd||fffd||fffd||fffd||742||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
'        Exit Sub
'    End If
    
    '|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||64fe|
    filename = txtFolder.Text
    If filename = "" Then
        MsgBox "|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation, C_TITLE
        txtFolder.SetFocus
        Exit Sub
    End If
    
'    Set objFs = CreateObject("Scripting.FileSystemObject")
'
'    lngRow = ActiveCell.row
'    lngCol = ActiveCell.Column
'
'    On Error Resume Next
'    FileDisp objFs, FileName, lngRow, lngCol
'    Select Case Err.Number
'    Case 75, 76
'        MsgBox "|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd||fffd|B", vbExclamation, C_TITLE
'        txtFolder.SetFocus
'        Exit Sub
'    End Select
    
    mResult = vbOK
    
    Unload Me
    
End Sub
'Private Sub FileDisp(objFs, strPath, lngRow, lngCol)
'
'    Dim objFld As Object
'    Dim objFl As Object
'    Dim objSub As Object
'
'    Dim lngCol2 As Long
'
'    Set objFld = objFs.GetFolder(strPath)
'
'    For Each objFl In objFld.Files
'        lngCol2 = lngCol
'        If chkFile.Value Then
'            Cells(lngRow, lngCol2) = objFl.Name
'            lngCol2 = lngCol2 + 1
'        End If
'        If chkFolder.Value Then
'            Cells(lngRow, lngCol2) = objFl.ParentFolder.Path
'            lngCol2 = lngCol2 + 1
'        End If
'        If chkFileSize.Value Then
'            Cells(lngRow, lngCol2) = Format(objFl.Size, "#,##0")
'            lngCol2 = lngCol2 + 1
'        End If
'        If chkDate.Value Then
'            Cells(lngRow, lngCol2) = Format(objFl.DateLastModified, "yyyy/mm/dd hh:mm:ss")
'            lngCol2 = lngCol2 + 1
'        End If
'        lngRow = lngRow + 1
'    Next
'
'    '|fffd|T|fffd|u|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    If chkSubFolder.Value Then
'        For Each objSub In objFld.SubFolders
'            FileDisp objFs, objSub.Path, lngRow, lngCol
'        Next
'    End If
'
'End Sub

Attribute VB_Name = "frmScreenSetting"
Attribute VB_Base = "0{4345D094-6838-43B6-940B-AD55BFD0B341}{0C9C9F8D-8342-40FB-B346-CB8AD29D388C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub chkPageBreakEnable_Change()

    Dim c As control

    For Each c In Controls
        If c.Tag = "P" Then
        
            c.enabled = chkPageBreakEnable.Value
        
        End If
    
    Next
End Sub

Private Sub chkZoomEnable_Change()

    Dim c As control

    For Each c In Controls
        If c.Tag = "Z" Then
        
            c.enabled = chkZoomEnable.Value
        
        End If
    
    Next
    
End Sub



Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdOK_Click()

    Dim blnZoomEnable As Boolean
    Dim lngZoomNum As Long
    Dim blnSave As Boolean
    Dim lngBlankNum As Long
    Dim blnPageBreakEnable As Boolean
    Dim lngPageBreakNun As Long
    
    If chkZoomEnable.Value Then
        If IsNumeric(txtZoomNum.Text) Then
        Else
            MsgBox "|fffd||645c||fffd||30f|k|fffd||fffd||fffd||fffd||fffd||242||350||fffd||fffd|l|fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbOKOnly + vbExclamation, C_TITLE
            txtZoomNum.SetFocus
            Exit Sub
        End If
        Select Case Val(txtZoomNum.Text)
            Case 10 To 200
            Case Else
                MsgBox "|fffd||645c||fffd||30f|k|fffd||fffd||fffd||fffd||fffd||242||fffd|10|fffd|`200%|fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbOKOnly + vbExclamation, C_TITLE
                txtZoomNum.SetFocus
                Exit Sub
        End Select
    Else
        txtZoomNum.Text = "100"
    End If
    
    If IsNumeric(txtBlankNum.Text) Then
    Else
        MsgBox "|fffd||645c||fffd||30a||50a|u|fffd||242||350||fffd||fffd|l|fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbOKOnly + vbExclamation, C_TITLE
        txtBlankNum.SetFocus
        Exit Sub
    End If
    Select Case Val(txtBlankNum.Text)
        Case 0 To 99
        Case Else
            MsgBox "|fffd|s|fffd||fffd||fffd||30a||50a|u|fffd||242||fffd|0|fffd|`99|fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbOKOnly + vbExclamation, C_TITLE
            txtBlankNum.SetFocus
            Exit Sub
    End Select
    
    If chkPageBreakEnable.Value Then
        If IsNumeric(txtPageBreakNum.Text) Then
        Else
            MsgBox "|fffd||fffd||fffd|y|fffd|[|fffd|W|fffd||30a||50a|u|fffd||242||350||fffd||fffd|l|fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbOKOnly + vbExclamation, C_TITLE
            txtPageBreakNum.SetFocus
            Exit Sub
        End If
        Select Case Val(txtPageBreakNum.Text)
            Case 0 To 99
            Case Else
                MsgBox "|fffd||fffd||fffd|y|fffd|[|fffd|W|fffd||30a||50a|u|fffd||242||fffd|0|fffd|`99|fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbOKOnly + vbExclamation, C_TITLE
                txtPageBreakNum.SetFocus
                Exit Sub
        End Select
    Else
        txtPageBreakNum.Text = "1"
    End If
    
    blnZoomEnable = chkZoomEnable.Value
    lngZoomNum = Val(txtZoomNum.Value)
    blnSave = chkSave.Value
    lngBlankNum = Val(txtBlankNum.Value)
    blnPageBreakEnable = chkPageBreakEnable.Value
    lngPageBreakNun = Val(txtPageBreakNum.Value)
    
    SetScreenSetting blnZoomEnable, lngZoomNum, blnSave, lngBlankNum, blnPageBreakEnable, lngPageBreakNun
    
    Unload Me
    
End Sub

Private Sub spnBlankNum_SpinDown()
    txtBlankNum.Text = LineSpinDown(txtBlankNum.Text)
End Sub

Private Sub spnBlankNum_SpinUp()
    txtBlankNum.Text = LineSpinUp(txtBlankNum.Text)
End Sub
Private Sub spnPageBreakNum_SpinDown()
    txtPageBreakNum.Text = LineSpinDown(txtPageBreakNum.Text)
End Sub

Private Sub spnPageBreakNum_SpinUp()
    txtPageBreakNum.Text = LineSpinUp(txtPageBreakNum.Text)
End Sub

Private Sub spnZoomNum_SpinDown()
    txtZoomNum.Text = ZoomSpinDown(txtZoomNum.Text)
End Sub

Private Sub spnZoomNum_SpinUp()
    txtZoomNum.Text = ZoomSpinUp(txtZoomNum.Text)
End Sub

Private Sub UserForm_Initialize()

    Dim blnZoomEnable As Boolean
    Dim lngZoomNum As Long
    Dim blnSave As Boolean
    Dim lngBlankNum As Long
    Dim blnPageBreakEnable As Boolean
    Dim lngPageBreakNun As Long

    GetScreenSetting blnZoomEnable, lngZoomNum, blnSave, lngBlankNum, blnPageBreakEnable, lngPageBreakNun
    
    txtZoomNum.Text = lngZoomNum
    txtBlankNum.Text = lngBlankNum
    txtPageBreakNum.Text = lngPageBreakNun
    
    chkZoomEnable.Value = blnZoomEnable
    chkSave.Value = blnSave
    chkPageBreakEnable.Value = blnPageBreakEnable
    
    Call chkZoomEnable_Change
    Call chkPageBreakEnable_Change

End Sub
Private Function LineSpinUp(ByVal vntValue As Variant) As Variant

    Dim lngValue As Long
    
    lngValue = Val(vntValue)
    lngValue = lngValue + 1
    
    If lngValue > 99 Then
        lngValue = 99
    End If
    
    LineSpinUp = lngValue

End Function

Private Function LineSpinDown(ByVal vntValue As Variant) As Variant

    Dim lngValue As Long
    
    lngValue = Val(vntValue)
    lngValue = lngValue - 1
    
    If lngValue < 0 Then
        lngValue = 0
    End If
    
    LineSpinDown = lngValue

End Function
Private Function ZoomSpinUp(ByVal vntValue As Variant) As Variant

    Dim lngValue As Long
    
    lngValue = Val(vntValue)
    lngValue = lngValue + 1
    
    If lngValue > 200 Then
        lngValue = 200
    End If
    
    ZoomSpinUp = lngValue

End Function

Private Function ZoomSpinDown(ByVal vntValue As Variant) As Variant

    Dim lngValue As Long
    
    lngValue = Val(vntValue)
    lngValue = lngValue - 1
    
    If lngValue < 10 Then
        lngValue = 10
    End If
    
    ZoomSpinDown = lngValue

End Function
Attribute VB_Name = "frmScreenShot"
Attribute VB_Base = "0{DB8896C9-ABA2-4A91-B08F-906804CFA804}{9B3B3913-4FDF-4633-8753-3B93D33A7D9B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Public Message As String
Private blnCancel As Boolean

#If VBA7 And Win64 Then
    Private Declare PtrSafe Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As Any, ByVal lpWindowName As String) As LongPtr
    Public hWnd As LongPtr
#Else
    Private Declare Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As Any, ByVal lpWindowName As String) As Long
    Public hWnd As Long
#End If

Private Sub cmdCancel_Click()
    blnCancel = True
    Unload Me
End Sub

Private Sub cmdOK_Click()
    
    Dim blnZoomEnable As Boolean
    Dim lngZoomNum As Long
    Dim blnSave As Boolean
    Dim lngBlankNum As Long
    Dim blnPageBreakEnable As Boolean
    Dim lngPageBreakNun As Long

    GetScreenSetting blnZoomEnable, lngZoomNum, blnSave, lngBlankNum, blnPageBreakEnable, lngPageBreakNun
    
    If blnSave Then
        If rlxIsFileExists(ActiveWorkbook.FullName) Then
        Else
            MsgBox "|fffd|u|fffd|b|fffd|N|fffd||315||6d1||fffd||fffd||fffd||fffd|L|fffd||fffd||fffd||242||202||fffd||fffd||102||fffd||fffd||702||fffd||fffd||fffd||fffd|A|fffd||fffd||fffd||742||303|u|fffd|b|fffd|N|fffd||fffd||fffd|P|fffd|x|fffd||fffd||fffd||6d1||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B" & vbCrLf & "|fffd||6d1||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
            Exit Sub
        End If
    End If
    
    '|fffd|E|fffd|B|fffd||fffd||fffd|h|fffd|E|fffd|n|fffd||fffd||fffd|h|fffd||fffd||fffd||30e||64fe|
    hWnd = FindWindow(0&, Me.Caption)

    '|fffd|X|fffd|N|fffd||fffd||fffd|[|fffd||fffd||fffd|V|fffd||fffd||fffd|b|fffd|g|fffd||fffd||fffd||fffd||fffd|J|fffd|n
    basScreenShot.StartScreenShot
    
    Me.Hide
    
End Sub

Private Sub UserForm_Initialize()
    blnCancel = False
End Sub

Private Sub UserForm_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'    Select Case X \ screen.TwipsPerPixelX
'            Case WM_MOUSEMOVE
'            Case WM_LBUTTONDOWN
'            Case WM_LBUTTONUP
'            Case WM_LBUTTONDBLCLK
'                    Form2.Show vbModal
'            Case WM_RBUTTONDOWN
'                    Call SetForegroundWindow(Me.hWnd)
'                    DoEvents
'                    Me.PopupMenu menu0
'            Case WM_RBUTTONUP
'            Case WM_RBUTTONDBLCLK
'    End Select
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    
    mScreenEnable = False
    Call RefreshRibbon

    If blnCancel Or CloseMode = 0 Then
    Else
    
        '|fffd|X|fffd|N|fffd||fffd||fffd|[|fffd||fffd||fffd|V|fffd||fffd||fffd|b|fffd|g|fffd||fffd||fffd||fffd||fffd|I|fffd||fffd|
        basScreenShot.StopScreenShot
        
    End If

End Sub

Attribute VB_Name = "frmSearchBox"
Attribute VB_Base = "0{EF73EBDD-9F94-471C-ABDA-87D152A8F58D}{DB320EFF-6DFE-4F22-BDE0-210C3C45C3A4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_RET_REPLACE As Long = 1
Private Const C_RET_ALL As Long = 2
Private Const C_RET_NEXT As Long = 4
Private Const C_RET_CANCEL As Long = 8

Private mlngRet As Long


Public Function Start() As Long

    mlngRet = C_RET_CANCEL

    Me.Show vbModal

    Start = mlngRet


End Function

Private Sub cmdAll_Click()
    mlngRet = C_RET_ALL
    Unload Me

End Sub

Private Sub cmdCancel_Click()
    mlngRet = C_RET_CANCEL
    Unload Me

End Sub

Private Sub cmdNext_Click()
    mlngRet = C_RET_NEXT
    Unload Me

End Sub

Private Sub cmdReplace_Click()
    mlngRet = C_RET_REPLACE
    Unload Me
End Sub


Attribute VB_Name = "frmSearchEx"
Attribute VB_Base = "0{0833B2FA-9A58-4D20-B460-5867FA0C0F03}{10D71352-BB4C-4ABA-9D44-E8679C77639A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Option Explicit
Private mRange As Range
Private mblnSelectMode As Boolean
Private mobjRegx As Object
Private mlngCount As Long

Private mblnRefresh As Boolean

Private Const C_SEARCH_NO As Long = 0
Private Const C_SEARCH_STR As Long = 1
Private Const C_SEARCH_ADDRESS As Long = 2
Private Const C_SEARCH_SHEET As Long = 3
Private Const C_SEARCH_ID As Long = 4

Private Const C_SEARCH_PLACE_SHEET = "|fffd||fffd||fffd||742||303|V|fffd|[|fffd|g"
Private Const C_SEARCH_PLACE_SELECT = "|fffd|I|fffd||fffd||fffd||fffd||fffd||fffd||fffd|V|fffd|[|fffd|g"
Private Const C_SEARCH_PLACE_BOOK = "|fffd|u|fffd|b|fffd|N|fffd|S|fffd||fffd|"
Private Const C_SEARCH_OBJECT_CELL = "|fffd|Z|fffd||fffd||fffd||302||fffd|"
Private Const C_SEARCH_OBJECT_SHAPE = "|fffd|V|fffd|F|fffd|C|fffd|v|fffd||302||fffd|"
Private Const C_SEARCH_OBJECT_CELL_AND_SHAPE = "|fffd|Z|fffd||fffd||fffd||fffd||fffd|V|fffd|F|fffd|C|fffd|v"
Private Const C_SEARCH_VALUE_VALUE = "|fffd|l"
Private Const C_SEARCH_VALUE_FORMULA = "|fffd||fffd|"
Private Const C_SEARCH_ID_CELL As String = "Cell:"
Private Const C_SEARCH_ID_SHAPE As String = "Shape"
Private Const C_SEARCH_ID_SMARTART As String = "SmartArt"

Private Const C_SIZE As Long = 256

'Private Const C_SEARCH_VALUE_FORMULA_NO As Long = 2
'Private Const C_SEACH_VALUE_VALUE_NO As Long = 1

Private Sub chkRegEx_Change()

'    chkZenHan.enabled = Not (chkRegEx.Value)

End Sub

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdHelp_Click()
    If Val(Application.Version) >= C_EXCEL_VERSION_2013 Then
    
        If MsgBox("|fffd|C|fffd||fffd||fffd|^|fffd|[|fffd|l|fffd|b|fffd|g|fffd||250||691||fffd||fffd||fffd||fffd||702||fffd||fffd|B|fffd||fffd||b0b5||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|H", vbOKCancel + vbQuestion, C_TITLE) <> vbOK Then
            Exit Sub
        End If
        
        Dim WSh As Object
        
        Set WSh = CreateObject("WScript.Shell")
        
        Call WSh.Run(C_REGEXP_URL)
        
        Set WSh = Nothing
    
    Else
        frmHelp.Start "regexp"
    End If
End Sub

Private Sub cmdOK_Click()

    If Len(Trim(txtSearch.Text)) = 0 Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation, C_TITLE
        txtSearch.SetFocus
        Exit Sub
    End If
    
    '|fffd||fffd||fffd|K|fffd|\|fffd||fffd||fffd||30f||a347|
    If chkRegEx.Value Then
        Dim o As Object
        Set o = CreateObject("VBScript.RegExp")
        o.Pattern = txtSearch.Text
        o.IgnoreCase = Not (chkCase.Value)
        o.Global = True
        err.Clear
        On Error Resume Next
        o.Execute ""
        If err.Number <> 0 Then
            MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||310||fffd||fffd|K|fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbExclamation, C_TITLE
            txtSearch.SetFocus
            Exit Sub
        End If
    End If
    
    Call searchStart
    
    Dim strBuf As String
    Dim i As Long
    Dim lngCount As Long
    Dim strSearch() As String
    
    strBuf = txtSearch.Text
    lngCount = 1
    For i = 0 To txtSearch.ListCount - 1
        If txtSearch.List(i) <> txtSearch.Text Then
            strBuf = strBuf & vbTab & txtSearch.List(i)
            lngCount = lngCount + 1
            '|fffd||fffd||fffd|X|fffd|g|fffd||34d||151||fffd|P|fffd|O
            If lngCount >= 10 Then
                Exit For
            End If
        End If
    Next
    rlxSaveSetting C_TITLE, "Search", "SearchStr", strBuf

    txtSearch.Clear
    strSearch = Split(strBuf, vbTab)
    
    For i = LBound(strSearch) To UBound(strSearch)
        txtSearch.AddItem strSearch(i)
    Next
    If txtSearch.ListCount > 0 Then
        txtSearch.ListIndex = 0
    End If
    
    SaveSetting C_TITLE, "Search", "cboPlace", cboPlace.ListIndex
    SaveSetting C_TITLE, "Search", "cboObj", cboObj.ListIndex
    SaveSetting C_TITLE, "Search", "chkRegEx", chkRegEx.Value
    SaveSetting C_TITLE, "Search", "chkCase", chkCase.Value
    SaveSetting C_TITLE, "Search", "chkZenHan", chkZenHan.Value
    SaveSetting C_TITLE, "Search", "cboValue", cboValue.ListIndex
    SaveSetting C_TITLE, "Search", "chkSmartArt", chkSmartArt.Value
    
End Sub


Private Sub cmdReplace_Click()

    Dim lngret As Long

    If Len(Trim(txtSearch.Text)) = 0 Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation, C_TITLE
        txtSearch.SetFocus
        Exit Sub
    End If
    
    '|fffd||fffd||fffd|K|fffd|\|fffd||fffd||fffd||30f||a347|
    If chkRegEx.Value Then
        Dim o As Object
        Set o = CreateObject("VBScript.RegExp")
        o.Pattern = txtSearch.Text
        o.IgnoreCase = Not (chkCase.Value)
        o.Global = True
        err.Clear
        On Error Resume Next
        o.Execute ""
        If err.Number <> 0 Then
            MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||310||fffd||fffd|K|fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbExclamation, C_TITLE
            txtSearch.SetFocus
            Exit Sub
        End If
    End If
    
    Call searchStart
    
    lngret = replaceStart(True)
    If lngret < 0 Then
        Exit Sub
    End If
        
    MsgBox lngret & " |fffd||82||315||fffd||fffd||fffd||fffd||fffd||fffd|u|fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbInformation + vbOKOnly, C_TITLE

    Dim strBuf As String
    Dim i As Long
    Dim lngCount As Long
    Dim strSearch() As String
    Dim strReplace() As String
    
    strBuf = txtSearch.Text
    lngCount = 1
    For i = 0 To txtSearch.ListCount - 1
        If txtSearch.List(i) <> txtSearch.Text Then
            strBuf = strBuf & vbTab & txtSearch.List(i)
            lngCount = lngCount + 1
            '|fffd||fffd||fffd|X|fffd|g|fffd||34d||151||fffd|P|fffd|O
            If lngCount >= 10 Then
                Exit For
            End If
        End If
    Next
    rlxSaveSetting C_TITLE, "Search", "SearchStr", strBuf
    
    txtSearch.Clear
    strSearch = Split(strBuf, vbTab)
    
    For i = LBound(strSearch) To UBound(strSearch)
        txtSearch.AddItem strSearch(i)
    Next
    If txtSearch.ListCount > 0 Then
        txtSearch.ListIndex = 0
    End If
    
    strBuf = txtReplace.Text
    lngCount = 1
    For i = 0 To txtReplace.ListCount - 1
        If txtReplace.List(i) <> txtReplace.Text Then
            strBuf = strBuf & vbTab & txtReplace.List(i)
            lngCount = lngCount + 1
            '|fffd||fffd||fffd|X|fffd|g|fffd||34d||151||fffd|P|fffd|O
            If lngCount >= 10 Then
                Exit For
            End If
        End If
    Next
    rlxSaveSetting C_TITLE, "Search", "ReplaceStr", strBuf

    txtReplace.Clear
    strReplace = Split(strBuf, vbTab)
    
    For i = LBound(strReplace) To UBound(strReplace)
        txtReplace.AddItem strReplace(i)
    Next
    If txtReplace.ListCount > 0 Then
        txtReplace.ListIndex = 0
    End If
    
End Sub

'Private Sub cmdReplaceAll_Click()
'
'    Dim lngRet As Long
'
'    If Len(Trim(txtSearch.Text)) = 0 Then
'        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation, C_TITLE
'        txtSearch.SetFocus
'        Exit Sub
'    End If
'
'    '|fffd||fffd||fffd|K|fffd|\|fffd||fffd||fffd||30f||a347|
'    If chkRegEx.Value Then
'        Dim o As Object
'        Set o = CreateObject("VBScript.RegExp")
'        o.Pattern = txtSearch.Text
'        o.IgnoreCase = Not (chkCase.Value)
'        o.Global = True
'        err.Clear
'        On Error Resume Next
'        o.Execute ""
'        If err.Number <> 0 Then
'            MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||310||fffd||fffd|K|fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbExclamation, C_TITLE
'            txtSearch.SetFocus
'            Exit Sub
'        End If
'    End If
'
'    Call searchStart
'
'    If MsgBox("|fffd|u|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||702||fffd||fffd|B|fffd||fffd||b0b5||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|H", vbQuestion + vbOKCancel, C_TITLE) <> vbOK Then
'        Exit Sub
'    End If
'
'    lngRet = replaceStart(False)
''    If lngRet > 0 Then
'        MsgBox lngRet & " |fffd||82||315||fffd||fffd||fffd||fffd||fffd||fffd|u|fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbInformation + vbOKOnly, C_TITLE
''    End If
'
'End Sub
'Private Function replaceStart(ByVal blnAsk As Boolean) As Long
'
'    Dim objMatch As Object
'    Dim matchCount As Long
'    Dim i As Long
'    Dim j As Long
'    Dim ret As VbMsgBoxResult
'    Dim lngRet As Long
'
'    Dim r As Object
'    Dim strAddress As String
'    Dim strSheet As String
'
'    If lstResult.ListCount = 0 Then
'        Exit Function
'    End If
'
'    For i = 0 To lstResult.ListCount - 1
'
'        strAddress = lstResult.List(i, C_SEARCH_ADDRESS)
'        strSheet = lstResult.List(i, C_SEARCH_SHEET)
'        If blnAsk Then
'
'            mblnRefresh = False
'            For j = 0 To lstResult.ListCount - 1
'                If j = i Then
'                Else
'                    lstResult.Selected(j) = False
'                End If
'            Next
'            mblnRefresh = True
'            lstResult.Selected(i) = True
'            lstResult.TopIndex = i
'
'            ret = MsgBox("|fffd|u|fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|H", vbQuestion + vbYesNoCancel, C_TITLE)
'            Select Case ret
'                Case vbNo
'                    GoTo pass
'                Case vbCancel
'                    Exit For
'            End Select
'        End If
'
'        If InStr(strAddress, "$") > 0 Then
'
'            Set r = Worksheets(strSheet).Range(strAddress)
'
'            '|fffd||fffd||fffd|K|fffd|\|fffd||fffd||fffd||30f||a347|
'            If chkRegEx.Value Then
'               r.Value = mobjRegx.Replace(r.Value, txtReplace.Text)
'            Else
'                r.Value = Replace(r.Value, txtSearch.Text, txtReplace.Text, , , vbBinaryCompare)
'            End If
'
'            lstResult.List(i, C_SEARCH_STR) = r.Value
'
'            Set r = Nothing
'        Else
'
'            Set r = Worksheets(strSheet).Shapes(strAddress)
'
'            '|fffd||fffd||fffd|K|fffd|\|fffd||fffd||fffd||30f||a347|
'            If chkRegEx.Value Then
'              r.TextFrame.Characters.Text = mobjRegx.Replace(r.TextFrame.Characters.Text, txtReplace.Text)
'            Else
'                r.TextFrame.Characters.Text = Replace(r.TextFrame.Characters.Text, txtSearch.Text, txtReplace.Text, , , vbBinaryCompare)
'            End If
'
'            lstResult.List(i, C_SEARCH_STR) = r.TextFrame.Characters.Text
'
'            Set r = Nothing
'
'        End If
'        lngRet = lngRet + 1
'pass:
'    Next
'
'    replaceStart = lngRet
'
'End Function
Private Function replaceStart(ByVal blnAsk As Boolean) As Long

    Dim objMatch As Object
    Dim matchCount As Long
    Dim i As Long
    Dim j As Long
    Dim ret As Long
    Dim lngret As Long
    Dim strAddress As String
    Dim strSheet As String
    Dim objRegx As Object
    Dim strBuf As String
    
    Dim strPattern As String
    Dim strReplace As String
    
    strPattern = txtSearch.Text
    strReplace = txtReplace.Text
    
    If lstResult.ListCount = 0 Then
        Exit Function
    End If
    
    For i = 0 To lstResult.ListCount - 1
    
        strAddress = lstResult.List(i, C_SEARCH_ID)
        strSheet = lstResult.List(i, C_SEARCH_SHEET)
        If blnAsk Then
        
            mblnRefresh = False
            For j = 0 To lstResult.ListCount - 1
                If j = i Then
                Else
                    lstResult.Selected(j) = False
                End If
            Next
            mblnRefresh = True
            lstResult.Selected(i) = True
            lstResult.TopIndex = i
            
            DoEvents
            
            ret = frmSearchBox.Start()
            Select Case ret
                Case 2
                    blnAsk = False
                Case 4
                    GoTo pass
                Case 8
                    lngret = -1
                    Exit For
            End Select
        End If
        
        If InStr(strAddress, "$") > 0 Then
        
            Dim r As Range
            Set r = Worksheets(strSheet).Range(strAddress)
           
            '|fffd||fffd||fffd|K|fffd|\|fffd||fffd||fffd||30f||a347|
            If chkRegEx.Value Then
            
                Set objRegx = CreateObject("VBScript.RegExp")
                
                objRegx.Pattern = strPattern
                objRegx.IgnoreCase = Not (chkCase.Value)
                objRegx.Global = True
                
                If r.HasFormula Then
                    r.FormulaLocal = objRegx.Replace(r.FormulaLocal, convEscSeq(strReplace))
                Else
                    r.Value = objRegx.Replace(r.Value, convEscSeq(strReplace))
                End If
                Set objRegx = Nothing
               
            Else
                Call r.Replace(strPattern, strReplace, xlPart, xlByColumns, chkCase.Value, False)
            End If
            
            If r.HasFormula Then
                lstResult.List(i, C_SEARCH_STR) = r.FormulaLocal
            Else
                lstResult.List(i, C_SEARCH_STR) = Left(r.Value, C_SIZE)
            End If
            Set r = Nothing
        Else
        
            Dim s As Object

            Set s = getObjFromID(Worksheets(strSheet), Mid$(strAddress, InStrRev(strAddress, ":") + 1))
           
            '|fffd||fffd||fffd|K|fffd|\|fffd||fffd||fffd||30f||a347|
            If chkRegEx.Value Then
              
                Set objRegx = CreateObject("VBScript.RegExp")
                
                objRegx.Pattern = strPattern
                objRegx.IgnoreCase = Not (chkCase.Value)
                objRegx.Global = True
                
                If InStr(strAddress, C_SEARCH_ID_SMARTART) > 0 Then
                    strBuf = objRegx.Replace(s.TextFrame2.TextRange.Text, convEscSeq(strReplace))
'                    s.TextFrame2.TextRange.Text = strBuf
                Else
                    strBuf = objRegx.Replace(s.TextFrame.Characters.Text, convEscSeq(strReplace))
'                    s.TextFrame.Characters.Text = strBuf
                End If
                
                Set objRegx = Nothing
               
            Else
                Dim strL As String
                Dim strR As String
                Dim lngPos As Long
                Dim lngLen As Long
                
                If InStr(strAddress, C_SEARCH_ID_SMARTART) > 0 Then
                    strBuf = s.TextFrame2.TextRange.Text
                Else
                    strBuf = s.TextFrame.Characters.Text
                End If
                
                lngLen = Len(strPattern)
                If chkCase.Value Then
                    lngPos = InStr(strBuf, strPattern)
                Else
                    lngPos = InStr(UCase(strBuf), UCase(strPattern))
                End If
                
                Do Until lngPos = 0
                
                    strL = Mid$(strBuf, 1, lngPos - 1)
                    strR = Mid$(strBuf, lngPos + lngLen)
                    
                    strBuf = strL & strReplace & strR
                    
                    If chkCase.Value Then
                        lngPos = InStr(Len(strL & strReplace) + 1, strBuf, strPattern)
                    Else
                        lngPos = InStr(Len(strL & strReplace) + 1, UCase(strBuf), UCase(strPattern))
                    End If
                Loop
            End If
            
            lstResult.List(i, C_SEARCH_STR) = strBuf
            
            If InStr(strAddress, C_SEARCH_ID_SMARTART) > 0 Then
                s.TextFrame2.TextRange.Text = strBuf
            Else
                s.TextFrame.Characters.Text = strBuf
            End If
            
            Set s = Nothing
        
        End If
        lngret = lngret + 1
pass:
    Next
    
    Me.Show
    replaceStart = lngret

End Function
Private Sub searchStart()
    
    Dim colSheet As Collection
    Dim objSheet1 As Worksheet
    Dim objSheet2 As Worksheet
    
    lstResult.Clear
    mlngCount = 0

    Set colSheet = New Collection

    Select Case cboPlace.Text
        Case C_SEARCH_PLACE_SHEET
            colSheet.Add ActiveSheet
            
        Case C_SEARCH_PLACE_SELECT
            For Each objSheet1 In ActiveWorkbook.Windows(1).SelectedSheets
                If objSheet1.visible = xlSheetVisible Then
                    colSheet.Add objSheet1
                End If
            Next
            
        Case Else
            For Each objSheet1 In ActiveWorkbook.Worksheets
                If objSheet1.visible = xlSheetVisible Then
                    colSheet.Add objSheet1
                End If
            Next
    End Select

    For Each objSheet2 In colSheet

        Select Case cboObj.Text
            Case C_SEARCH_OBJECT_CELL
                Call seachCell(objSheet2)
                
            Case C_SEARCH_OBJECT_SHAPE
                Call searchShape(objSheet2)
                
            Case C_SEARCH_OBJECT_CELL_AND_SHAPE
                Call seachCell(objSheet2)
                Call searchShape(objSheet2)
                
        End Select
    
    Next

    Set colSheet = Nothing
    
End Sub

Private Sub seachCell(ByRef objSheet As Worksheet)

    Dim strPattern As String
    
    strPattern = txtSearch.Text
        
    '|fffd||fffd||fffd|K|fffd|\|fffd||fffd||fffd||30f||a347|
    If chkRegEx Then
    
        Dim objRegx As Object
        Set objRegx = CreateObject("VBScript.RegExp")
        
        objRegx.Pattern = strPattern
        objRegx.IgnoreCase = Not (chkCase.Value)
        objRegx.Global = True
    
        Dim c As Range
        For Each c In objSheet.UsedRange
    
            Dim schStr As Variant
            
            If cboValue.Value = C_SEARCH_VALUE_VALUE Then
                schStr = c.Value
            Else
                If c.HasFormula Then
                    schStr = c.FormulaLocal
                Else
                    schStr = c.Value
                End If
            End If
            
            Dim objMatch As Object
            Set objMatch = objRegx.Execute(schStr)

            If objMatch.count > 0 Then
                lstResult.AddItem ""
                lstResult.List(mlngCount, C_SEARCH_NO) = mlngCount + 1
                
                lstResult.List(mlngCount, C_SEARCH_STR) = Left(schStr, C_SIZE)
                
                lstResult.List(mlngCount, C_SEARCH_ADDRESS) = c.Address
                lstResult.List(mlngCount, C_SEARCH_ID) = c.Address
                lstResult.List(mlngCount, C_SEARCH_SHEET) = objSheet.name

                mlngCount = mlngCount + 1
            End If
            
            Set objMatch = Nothing
        
        Next
        Set objRegx = Nothing
        
    Else
        Dim objFind As Range
        Dim strFirstAddress As String
        
        If cboValue.Value = C_SEARCH_VALUE_VALUE Then
            Set objFind = objSheet.UsedRange.Find(strPattern, , xlValues, xlPart, xlByColumns, xlNext, chkCase.Value, chkZenHan.Value)
        Else
            Set objFind = objSheet.UsedRange.Find(strPattern, , xlFormulas, xlPart, xlByColumns, xlNext, chkCase.Value, chkZenHan.Value)
        End If
        
        If Not objFind Is Nothing Then
        
            strFirstAddress = objFind.Address
    
            Do
            
                lstResult.AddItem ""
                lstResult.List(mlngCount, C_SEARCH_NO) = mlngCount + 1
                
                If cboValue.Value = C_SEARCH_VALUE_VALUE Then
                    lstResult.List(mlngCount, C_SEARCH_STR) = objFind.Value
                Else
                    If objFind.HasFormula Then
                        lstResult.List(mlngCount, C_SEARCH_STR) = objFind.FormulaLocal
                    Else
                        lstResult.List(mlngCount, C_SEARCH_STR) = Left(objFind.Value, C_SIZE)
                    End If
                End If
                
                lstResult.List(mlngCount, C_SEARCH_ADDRESS) = objFind.Address
                lstResult.List(mlngCount, C_SEARCH_ID) = objFind.Address
                
                lstResult.List(mlngCount, C_SEARCH_SHEET) = objSheet.name

                mlngCount = mlngCount + 1
        
                Set objFind = objSheet.UsedRange.FindNext(objFind)
                
                If objFind Is Nothing Then
                    Exit Do
                End If
                
            Loop Until strFirstAddress = objFind.Address
            
        End If
    End If
    
End Sub
Private Sub searchShape(ByRef objSheet As Worksheet)

    Dim matchCount As Long
    Dim objMatch As Object
    Dim strPattern As String

    Dim objShape As Shape
    Dim objAct As Worksheet
    Dim c As Shape
    
    Dim strBuf As String

    Dim colShapes As Collection
    Set colShapes = New Collection

    Const C_RESULT_NAME As String = "|fffd|V|fffd|F|fffd|C|fffd|v|fffd||fffd||fffd||fffd|Result"
    
    strPattern = txtSearch.Text
    
    '|fffd||fffd||fffd|K|fffd|\|fffd||fffd||fffd||30f||a347|
    If chkRegEx Then
        Set mobjRegx = CreateObject("VBScript.RegExp")
        mobjRegx.Pattern = strPattern
        mobjRegx.IgnoreCase = Not (chkCase.Value)
        mobjRegx.Global = True
    End If
    
    For Each c In objSheet.Shapes
        
        Select Case c.Type
            Case msoAutoShape, msoTextBox, msoCallout, msoFreeform
                '|fffd|V|fffd|F|fffd|C|fffd|v|fffd||255||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||90a9||fffd||202||fffd||fffd||fffd||fffd||fffd||fffd|f|fffd||fffd||fffd||82||fffd||fffd||202||fffd||fffd||fffd||fffd||7c3|G|fffd||fffd||fffd|[|fffd||fffd||fffd|o|fffd||242||10f||fffd||fffd||fffd|

                If c.TextFrame2.HasText Then
                    strBuf = c.TextFrame2.TextRange.Text
                    
                    '|fffd||fffd||fffd|K|fffd|\|fffd||fffd||fffd||30f||a347|
                    If chkRegEx Then
                        err.Clear
                        On Error Resume Next
                        Set objMatch = mobjRegx.Execute(strBuf)
                        If err.Number <> 0 Then
                            MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||310||fffd||fffd|K|fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbExclamation, C_TITLE
                            txtSearch.SetFocus
                            Exit Sub
                        End If
                        matchCount = objMatch.count
                    Else
                        If chkCase.Value Then
                            matchCount = InStr(strBuf, strPattern)
                        Else
                            matchCount = InStr(UCase(strBuf), UCase(strPattern))
                        End If
                    End If
                    
                    If matchCount > 0 Then
                    
                        lstResult.AddItem ""
                        lstResult.List(mlngCount, C_SEARCH_NO) = mlngCount + 1
                        lstResult.List(mlngCount, C_SEARCH_STR) = strBuf
                        lstResult.List(mlngCount, C_SEARCH_ADDRESS) = c.name
                        lstResult.List(mlngCount, C_SEARCH_ID) = C_SEARCH_ID_SHAPE & ":" & c.id
                        lstResult.List(mlngCount, C_SEARCH_SHEET) = objSheet.name

                        mlngCount = mlngCount + 1
                        
                    End If
                Else
                    On Error GoTo 0
                    err.Clear
                End If
            Case msoGroup
                grouprc objSheet, c, c, colShapes

            Case msoSmartArt
                'check |fffd||fffd||fffd||fffd||fffd||fffd||182||fffd||fffd||302||74c||fffd||fffd||fffd|
                If chkSmartArt.Value Then
                    SmartArtprc objSheet, c, c, colShapes
                End If

        End Select
    Next

End Sub
'|fffd||10b|A|fffd||242||103|O|fffd||fffd||fffd|[|fffd|v|fffd||209||fffd||fffd||303|V|fffd|F|fffd|C|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub grouprc(ByRef WS As Worksheet, ByRef objTop As Shape, ByRef objShape As Shape, ByRef colShapes As Collection)

    Dim matchCount As Long
    Dim c As Shape
    Dim strBuf As String
    Dim objMatch As Object
    Dim strPattern As String
    strPattern = txtSearch.Text
    
    For Each c In objShape.GroupItems
        
        Select Case c.Type
            Case msoAutoShape, msoTextBox, msoCallout, msoFreeform
                '|fffd|V|fffd|F|fffd|C|fffd|v|fffd||255||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||90a9||fffd||202||fffd||fffd||fffd||fffd||fffd||fffd|f|fffd||fffd||fffd||82||fffd||fffd||202||fffd||fffd||fffd||fffd||7c3|G|fffd||fffd||fffd|[|fffd||fffd||fffd|o|fffd||242||10f||fffd||fffd||fffd|
                If c.TextFrame2.HasText Then
                    strBuf = c.TextFrame2.TextRange.Text
                    
                    '|fffd||fffd||fffd|K|fffd|\|fffd||fffd||fffd||30f||a347|
                    If chkRegEx Then
                        err.Clear
                        On Error Resume Next
                        Set objMatch = mobjRegx.Execute(strBuf)
                        If err.Number <> 0 Then
                            MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||310||fffd||fffd|K|fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbExclamation, C_TITLE
                            txtSearch.SetFocus
                            Exit Sub
                        End If
                        matchCount = objMatch.count
                    Else
                        If chkCase.Value Then
                            matchCount = InStr(strBuf, strPattern)
                        Else
                            matchCount = InStr(UCase(strBuf), UCase(strPattern))
                        End If
                    End If
                    
                    If matchCount > 0 Then
                    
                        lstResult.AddItem ""
                        lstResult.List(mlngCount, C_SEARCH_NO) = mlngCount + 1
                        lstResult.List(mlngCount, C_SEARCH_STR) = strBuf

                        lstResult.List(mlngCount, C_SEARCH_ADDRESS) = c.name
                        lstResult.List(mlngCount, C_SEARCH_ID) = C_SEARCH_ID_SHAPE & getGroupId(c) & ":" & c.id
                        lstResult.List(mlngCount, C_SEARCH_SHEET) = WS.name

                        mlngCount = mlngCount + 1
                    
                    End If
                Else
                    On Error GoTo 0
                    err.Clear
                End If
            Case msoGroup
                '|fffd||10b|A|fffd||10f|o
                grouprc WS, objTop, c, colShapes
            
            Case msoSmartArt
                'check |fffd||fffd||fffd||fffd||fffd||fffd||182||fffd||fffd||302||74c||fffd||fffd||fffd|
                If chkSmartArt.Value Then
                    SmartArtprc WS, c, c, colShapes
                End If
        End Select
    Next

End Sub
'|fffd|X|fffd|}|fffd|[|fffd|g|fffd|A|fffd|[|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub SmartArtprc(ByRef WS As Worksheet, ByRef objTop As Shape, ByRef objShape As Shape, ByRef colShapes As Collection)

    Dim matchCount As Long
    Dim c As SmartArtNode
    Dim strBuf As String
    Dim objMatch As Object
    Dim strPattern As String
    Dim lngIdx As Long
    strPattern = txtSearch.Text
    
    
    For lngIdx = 1 To objShape.SmartArt.AllNodes.count
    
        Set c = objShape.SmartArt.AllNodes(lngIdx)
                
        '|fffd|V|fffd|F|fffd|C|fffd|v|fffd||255||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||90a9||fffd||202||fffd||fffd||fffd||fffd||fffd||fffd|f|fffd||fffd||fffd||82||fffd||fffd||202||fffd||fffd||fffd||fffd||7c3|G|fffd||fffd||fffd|[|fffd||fffd||fffd|o|fffd||242||10f||fffd||fffd||fffd|
        If c.TextFrame2.HasText Then
        
            strBuf = c.TextFrame2.TextRange.Text
            
            '|fffd||fffd||fffd|K|fffd|\|fffd||fffd||fffd||30f||a347|
            If chkRegEx Then
                err.Clear
                On Error Resume Next
                Set objMatch = mobjRegx.Execute(strBuf)
                If err.Number <> 0 Then
                    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||310||fffd||fffd|K|fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbExclamation, C_TITLE
                    txtSearch.SetFocus
                    Exit Sub
                End If
                matchCount = objMatch.count
            Else
                If chkCase.Value Then
                    matchCount = InStr(strBuf, strPattern)
                Else
                    matchCount = InStr(UCase(strBuf), UCase(strPattern))
                End If
            End If
            
            If matchCount > 0 Then
                lstResult.AddItem ""
                lstResult.List(mlngCount, C_SEARCH_NO) = mlngCount + 1
                lstResult.List(mlngCount, C_SEARCH_STR) = strBuf
                lstResult.List(mlngCount, C_SEARCH_ADDRESS) = objShape.name
                lstResult.List(mlngCount, C_SEARCH_ID) = C_SEARCH_ID_SMARTART & getGroupId(objShape) & "/" & objShape.id & ":" & objShape.id & "," & lngIdx
                lstResult.List(mlngCount, C_SEARCH_SHEET) = WS.name
                mlngCount = mlngCount + 1
            End If
        Else
            On Error GoTo 0
            err.Clear
        End If
    
    Next

End Sub
'|fffd|O|fffd||fffd||fffd|[|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||64fe|
Private Function getGroupId(ByRef objShape As Object) As String

    Dim strBuf As String
    Dim s As Object
    
    On Error Resume Next
    err.Clear
    Set s = objShape.ParentGroup
    Do Until err.Number <> 0
        strBuf = "/" & s.id & strBuf
        Set s = s.ParentGroup
    Loop
    
    getGroupId = strBuf

End Function

Private Sub lstResult_Change()

    If mblnRefresh = False Then
         Exit Sub
    End If

    Dim lngCnt As Long
    Dim strRange As String
    Dim r As Range
    Dim s As String
    
    Dim selSheet As String
    Dim blnCell As Boolean
'    Dim blnShape As Boolean
    Dim strPath As String
    selSheet = ""
    
    blnCell = False
    
    For lngCnt = 0 To lstResult.ListCount - 1
    
        If lstResult.Selected(lngCnt) Then
            If selSheet = "" Then
                selSheet = lstResult.List(lngCnt, C_SEARCH_SHEET)
                If Left$(lstResult.List(lngCnt, C_SEARCH_ID), 1) = "$" Then
                    blnCell = True
                Else
                    Dim p() As String
                    p = Split(lstResult.List(lngCnt, C_SEARCH_ID), ":")
'                    blnShape = True
                    strPath = p(0)
                End If
            Else
                If selSheet <> lstResult.List(lngCnt, C_SEARCH_SHEET) Then
                    mblnRefresh = False
                    lstResult.Selected(lngCnt) = False
                    mblnRefresh = True
                Else
                    If blnCell Then
                        '|fffd|P|fffd|s|fffd||682||fffd||fffd|Z|fffd||fffd||fffd||142|Q|fffd|s|fffd||688||20d|~|fffd||143|Z|fffd||fffd||fffd||20a|O
                        If Left$(lstResult.List(lngCnt, C_SEARCH_ID), 1) <> "$" Then
                            mblnRefresh = False
                            lstResult.Selected(lngCnt) = False
                            mblnRefresh = True
                        End If
                    Else
                        '|fffd|P|fffd|s|fffd||682||fffd||fffd|V|fffd|F|fffd|C|fffd|v
                        If Left$(lstResult.List(lngCnt, C_SEARCH_ID), 1) = "$" Then
                            mblnRefresh = False
                            lstResult.Selected(lngCnt) = False
                            mblnRefresh = True
                        Else
                            p = Split(lstResult.List(lngCnt, C_SEARCH_ID), ":")
                            If strPath <> p(0) Then
                                mblnRefresh = False
                                lstResult.Selected(lngCnt) = False
                                mblnRefresh = True
                            End If
                        End If
                    
                    End If
                    
                    
                End If
            End If
        
        End If
    Next
    
    If Len(selSheet) = 0 Then
        Exit Sub
    End If
    
    Worksheets(selSheet).Select
    
    If blnCell Then
        For lngCnt = 0 To lstResult.ListCount - 1
    
            If lstResult.Selected(lngCnt) Then
                If r Is Nothing Then
                    Set r = Range("'" & lstResult.List(lngCnt, C_SEARCH_SHEET) & "'!" & lstResult.List(lngCnt, C_SEARCH_ID))
                Else
                    Set r = Union(r, Range("'" & lstResult.List(lngCnt, C_SEARCH_SHEET) & "'!" & lstResult.List(lngCnt, C_SEARCH_ID)))
                End If
    
            
            End If
        Next
        If r Is Nothing Then
        Else
            r.Select
        End If
    Else
    
        Dim strBuf As String
        Dim strId As String
        Dim objShape As Object
        Dim objArt As Object
        Dim blnFlg As Boolean
        blnFlg = False
        For lngCnt = 0 To lstResult.ListCount - 1

            If lstResult.Selected(lngCnt) Then

                strBuf = lstResult.List(lngCnt, C_SEARCH_ID)
                
                Set objShape = getObjFromID(Worksheets(selSheet), Mid$(strBuf, InStrRev(strBuf, ":") + 1))
                
                'SmartArt|fffd||30f||a347|
                If InStr(strBuf, C_SEARCH_ID_SMARTART) > 0 Then
                
                    Set objArt = getObjFromID2(Worksheets(selSheet), Mid$(strBuf, InStrRev(strBuf, ":") + 1))
                    
                    On Error Resume Next
                    If blnFlg Then
                        objShape.Shapes(1).Select False
                    Else
                        blnFlg = True
                        Application.GoTo objArt.TopLeftCell, True
                        objShape.Shapes(1).Select
                    End If
                    On Error GoTo 0
                Else
                    On Error Resume Next
                    If blnFlg Then
                        objShape.Select False
                    Else
                        blnFlg = True
                        Application.GoTo objShape.TopLeftCell, True
                        objShape.Select
                    End If
                    On Error GoTo 0
                End If

            End If
        Next

        Me.Show

    End If
End Sub

Private Sub lstResult_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    
    Call lstResult_Change

End Sub

Private Sub schTab_Change()
    Select Case schTab.Value
        Case 0
            Dim c As Object
            For Each c In Controls
                If c.Tag = "v" Then
                    c.visible = False
                End If
            Next
            cboValue.enabled = True
        Case 1
            For Each c In Controls
                If c.Tag = "v" Then
                    c.visible = True
                End If
            Next
            cboValue.enabled = False
            cboValue.ListIndex = 0
    End Select
End Sub





Private Sub UserForm_Initialize()
    
    Dim strBuf As String
    Dim strSearch() As String
    Dim strReplace() As String
    Dim i As Long

    strBuf = rlxGetSetting(C_TITLE, "Search", "SearchStr", "")
    strSearch = Split(strBuf, vbTab)
    
    For i = LBound(strSearch) To UBound(strSearch)
        txtSearch.AddItem strSearch(i)
    Next
    If txtSearch.ListCount > 0 Then
        txtSearch.ListIndex = 0
    End If
    
    strBuf = rlxGetSetting(C_TITLE, "Search", "ReplaceStr", "")
    strReplace = Split(strBuf, vbTab)
    
    For i = LBound(strReplace) To UBound(strReplace)
        txtReplace.AddItem strReplace(i)
    Next
    If txtReplace.ListCount > 0 Then
        txtReplace.ListIndex = 0
    End If
    
    mblnRefresh = True
    
    cboPlace.AddItem C_SEARCH_PLACE_SHEET
    cboPlace.AddItem C_SEARCH_PLACE_SELECT
    cboPlace.AddItem C_SEARCH_PLACE_BOOK
    cboPlace.ListIndex = GetSetting(C_TITLE, "Search", "cboPlace", 0)
    
    cboObj.AddItem C_SEARCH_OBJECT_CELL_AND_SHAPE
    cboObj.AddItem C_SEARCH_OBJECT_CELL
    cboObj.AddItem C_SEARCH_OBJECT_SHAPE
    cboObj.ListIndex = GetSetting(C_TITLE, "Search", "cboObj", 0)
    
    cboValue.AddItem C_SEARCH_VALUE_FORMULA
    cboValue.AddItem C_SEARCH_VALUE_VALUE
    cboValue.ListIndex = GetSetting(C_TITLE, "Search", "cboValue", 0)
    
    schTab.Tabs(0).Caption = "|fffd||fffd||fffd||fffd|"
    schTab.Tabs(1).Caption = "|fffd|u|fffd||fffd|"
    schTab.Value = 0
    Call schTab_Change
    
    chkRegEx.Value = GetSetting(C_TITLE, "Search", "chkRegEx", False)
    chkCase.Value = GetSetting(C_TITLE, "Search", "chkCase", False)
    chkZenHan.Value = GetSetting(C_TITLE, "Search", "chkZenHan", False)
    chkSmartArt.Value = GetSetting(C_TITLE, "Search", "chkSmartArt", False)

    Me.Top = (Application.Top + Application.Height - Me.Height) - 20
    Me.Left = (Application.Left + Application.Width - Me.Width) - 20
    
    With txtSearch
        .SelStart = 0
        .SelLength = Len(.Text)
    End With
    
End Sub
Public Sub Start(ByVal lngTab As Long)

    schTab.Value = lngTab

    Me.Show

End Sub

Private Function convEscSeq(ByVal strBuf As String) As String

    Dim strRet As String
    
    strRet = Replace(strBuf, "\\", "\")
    strRet = Replace(strRet, "\n", vbLf)
    strRet = Replace(strRet, "\r", vbCr)
    strRet = Replace(strRet, "\t", vbTab)

    convEscSeq = strRet
    
End Function
Private Function getObjFromID2(ByRef WS As Worksheet, ByVal id As String) As Object

    Dim ret As Object
    Dim s As Shape
    
    Dim lngID As Long
    Dim lngPos As Long
    
    Set ret = Nothing
    
    If InStr(id, ",") > 0 Then
        lngID = CLng(Mid$(id, 1, InStrRev(id, ",") - 1))
    Else
        lngID = CLng(id)
    End If
    
    For Each s In WS.Shapes
        Select Case s.Type
            Case msoAutoShape, msoTextBox, msoSmartArt, msoCallout, msoFreeform
                If s.id = lngID Then
                    Set ret = s
                    Exit For
                End If
            
            Case msoGroup
                Set ret = getObjFromIDSub2(s, lngID)
                If ret Is Nothing Then
                Else
                    Exit For
                End If

        End Select
    Next
    Set getObjFromID2 = ret

End Function
Private Function getObjFromIDSub2(ByRef objShape As Shape, ByVal id As Long) As Object
    
    Dim s As Shape
    Dim ret As Object
    
    For Each s In objShape.GroupItems
        Select Case s.Type
            Case msoAutoShape, msoTextBox, msoSmartArt, msoCallout, msoFreeform
                If s.id = id Then
                    Set ret = s
                    Exit For
                End If
            
            Case msoGroup
                Set ret = getObjFromIDSub(s, id)
                If ret Is Nothing Then
                Else
                    Exit For
                End If

        End Select
    Next

    Set getObjFromIDSub2 = ret
End Function
Private Function getObjFromID(ByRef WS As Worksheet, ByVal id As String) As Object
    Dim ret As Object
    Dim s As Shape
    
    For Each s In WS.Shapes
        Select Case s.Type
            Case msoAutoShape, msoTextBox, msoCallout, msoFreeform
                If s.id = CLng(id) Then
                    Set ret = s
                    Exit For
                End If
            
            Case msoGroup
                Set ret = getObjFromIDSub(s, id)
                If ret Is Nothing Then
                Else
                    Exit For
                End If
            Case msoSmartArt
                Set ret = getSmartArtFromIDSub(s, id)
                If ret Is Nothing Then
                Else
                    Exit For
                End If
        End Select
    Next
    Set getObjFromID = ret

End Function
Private Function getObjFromIDSub(ByRef objShape As Shape, ByVal id As String) As Object
    
    Dim s As Shape
    Dim ret As Object
    
    For Each s In objShape.GroupItems
        Select Case s.Type
            Case msoAutoShape, msoTextBox, msoCallout, msoFreeform
                If s.id = CLng(id) Then
                    Set ret = s
                    Exit For
                End If
            
            Case msoGroup
                Set ret = getObjFromIDSub(s, id)
                If ret Is Nothing Then
                Else
                    Exit For
                End If
                
            Case msoSmartArt
                Set ret = getSmartArtFromIDSub(s, id)
                If ret Is Nothing Then
                Else
                    Exit For
                End If
        End Select
    Next

    Set getObjFromIDSub = ret
End Function

Private Function getSmartArtFromIDSub(ByRef objShape As Shape, ByVal id As String) As Object
    
    Dim ret As Object
    Dim i As Long
    
    Dim lngID As Long
    Dim lngPos As Long
    
    Set ret = Nothing
    
    If InStr(id, ",") > 0 Then
        lngID = CLng(Mid$(id, 1, InStrRev(id, ",") - 1))
        lngPos = CLng(Mid$(id, InStrRev(id, ",") + 1))
        
        If lngID = objShape.id Then
        
            For i = 1 To objShape.SmartArt.AllNodes.count
            
                If i = lngPos Then
                    Set ret = objShape.SmartArt.AllNodes(i)
                    Exit For
                End If
            
            Next
        End If
    End If
    
    Set getSmartArtFromIDSub = ret
    
End Function
Attribute VB_Name = "frmSearchFusen"
Attribute VB_Base = "0{BDAC8A9C-FBBC-4996-8CC6-EA7B915A822E}{F9E2F844-C2DF-4AD9-834B-DCE1C6507488}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Const C_SEARCH_NO As Long = 0
Private Const C_SEARCH_STR As Long = 1
Private Const C_SEARCH_VISIBLE As Long = 2
Private Const C_SEARCH_SHEET As Long = 3
Private Const C_SEARCH_ADDRESS As Long = 4
Private Const C_SEARCH_ID As Long = 5
'Private Const C_SEARCH_ID_SHAPE As Long = 5

Private mlngCount As Long
Private mblnRefresh As Boolean
    Private Const C_SEARCH_ID_CELL As String = "Cell:"
Private Const C_SEARCH_ID_SHAPE As String = "Shape"
Private Const C_SEARCH_ID_SMARTART As String = "SmartArt"

Sub a()


End Sub

Private Sub searchShape(ByRef strPattern As String, ByRef objSheet As Worksheet)

    Dim matchCount As Long
    Dim objShape As Shape
    Dim objAct As Worksheet
    Dim c As Shape
    
    Dim strBuf As String
    mlngCount = 0

    For Each c In objSheet.Shapes
        
        Select Case c.Type
            Case msoAutoShape, msoTextBox, msoCallout, msoFreeform

                strBuf = c.AlternativeText
                matchCount = InStr(UCase(strBuf), UCase(strPattern))
                
                If matchCount > 0 Then
                
                    lstResult.AddItem ""
                    lstResult.List(mlngCount, C_SEARCH_NO) = mlngCount + 1
                    lstResult.List(mlngCount, C_SEARCH_STR) = c.TextFrame2.TextRange.Text
                    If c.visible Then
                        lstResult.List(mlngCount, C_SEARCH_VISIBLE) = "|fffd|\|fffd||fffd|"
                    Else
                        lstResult.List(mlngCount, C_SEARCH_VISIBLE) = "|fffd||fffd|\|fffd||fffd|"
                    End If
                    lstResult.List(mlngCount, C_SEARCH_SHEET) = objSheet.name
                    lstResult.List(mlngCount, C_SEARCH_ADDRESS) = c.name
                    lstResult.List(mlngCount, C_SEARCH_ID) = C_SEARCH_ID_SHAPE & ":" & c.id

                    mlngCount = mlngCount + 1
                    
                End If
            
            Case msoGroup
                grouprc objSheet, c, c, strPattern

        End Select
    Next

End Sub
'|fffd||10b|A|fffd||242||103|O|fffd||fffd||fffd|[|fffd|v|fffd||209||fffd||fffd||303|V|fffd|F|fffd|C|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub grouprc(ByRef WS As Worksheet, ByRef objTop As Shape, ByRef objShape As Shape, ByRef strPattern As String)

    Dim matchCount As Long
    Dim c As Shape
    Dim strBuf As String
    
    For Each c In objShape.GroupItems
        
        Select Case c.Type
            Case msoAutoShape, msoTextBox, msoCallout, msoFreeform
                '|fffd|V|fffd|F|fffd|C|fffd|v|fffd||255||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||90a9||fffd||202||fffd||fffd||fffd||fffd||fffd||fffd|f|fffd||fffd||fffd||82||fffd||fffd||202||fffd||fffd||fffd||fffd||7c3|G|fffd||fffd||fffd|[|fffd||fffd||fffd|o|fffd||242||10f||fffd||fffd||fffd|
                
                strBuf = c.AlternativeText
                matchCount = InStr(UCase(strBuf), UCase(strPattern))
                
                If matchCount > 0 Then
                
                    lstResult.AddItem ""
                    lstResult.List(mlngCount, C_SEARCH_NO) = mlngCount + 1
                    lstResult.List(mlngCount, C_SEARCH_STR) = c.TextFrame2.TextRange.Text
                    If c.visible Then
                        lstResult.List(mlngCount, C_SEARCH_VISIBLE) = "|fffd|\|fffd||fffd|"
                    Else
                        lstResult.List(mlngCount, C_SEARCH_VISIBLE) = "|fffd||fffd|\|fffd||fffd|"
                    End If
                    lstResult.List(mlngCount, C_SEARCH_SHEET) = WS.name
                    lstResult.List(mlngCount, C_SEARCH_ADDRESS) = c.name
                    lstResult.List(mlngCount, C_SEARCH_ID) = C_SEARCH_ID_SHAPE & getGroupId(c) & ":" & c.id

                    mlngCount = mlngCount + 1
                    
                End If
                
            Case msoGroup
                '|fffd||10b|A|fffd||10f|o
                grouprc WS, objTop, c, strPattern
            
        End Select
    Next

End Sub

'|fffd|O|fffd||fffd||fffd|[|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||64fe|
Private Function getGroupId(ByRef objShape As Object) As String

    Dim strBuf As String
    Dim s As Object
    
    On Error Resume Next
    err.Clear
    Set s = objShape.ParentGroup
    Do Until err.Number <> 0
        strBuf = "/" & s.id & strBuf
        Set s = s.ParentGroup
    Loop
    
    getGroupId = strBuf

End Function

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdDsp_Click()
    
    On Error Resume Next
    
    Dim strBuf As String
    Dim objShape As Object
    Dim selSheet As String
    
    Dim lngCnt As Long
    
    For lngCnt = 0 To lstResult.ListCount - 1

        If lstResult.Selected(lngCnt) Then

            strBuf = lstResult.List(lngCnt, C_SEARCH_ID)
            selSheet = lstResult.List(lngCnt, C_SEARCH_SHEET)
            
            Set objShape = getObjFromID(Worksheets(selSheet), Mid$(strBuf, InStrRev(strBuf, ":") + 1))
            
            If objShape Is Nothing Then
            Else
                objShape.visible = True
                lstResult.List(lngCnt, C_SEARCH_VISIBLE) = "|fffd|\|fffd||fffd|"
            End If
        End If
    Next

End Sub

Private Sub cmdNoDsp_Click()

    On Error Resume Next
    
    Dim strBuf As String
    Dim objShape As Object
    Dim selSheet As String
    
    Dim lngCnt As Long
    
    For lngCnt = 0 To lstResult.ListCount - 1

        If lstResult.Selected(lngCnt) Then

            strBuf = lstResult.List(lngCnt, C_SEARCH_ID)
            selSheet = lstResult.List(lngCnt, C_SEARCH_SHEET)
            
            Set objShape = getObjFromID(Worksheets(selSheet), Mid$(strBuf, InStrRev(strBuf, ":") + 1))
            
            If objShape Is Nothing Then
            Else
                objShape.visible = False
                lstResult.List(lngCnt, C_SEARCH_VISIBLE) = "|fffd||fffd|\|fffd||fffd|"
            End If
        End If
    Next

End Sub

Private Sub cmdOK_Click()
    
    On Error Resume Next
    
    Dim strBuf As String
    Dim objShape As Object
    Dim selSheet As String
    
    Dim lngCnt As Long
    
    For lngCnt = 0 To lstResult.ListCount - 1

        If lstResult.Selected(lngCnt) Then

            strBuf = lstResult.List(lngCnt, C_SEARCH_ID)
            selSheet = lstResult.List(lngCnt, C_SEARCH_SHEET)
            
            Set objShape = getObjFromID(Worksheets(selSheet), Mid$(strBuf, InStrRev(strBuf, ":") + 1))
            
            If objShape Is Nothing Then
            Else
                objShape.Delete
            End If
        End If
    Next
    
    dispList
    
End Sub

Private Sub lstResult_Change()

    If mblnRefresh = False Then
         Exit Sub
    End If

    Dim lngCnt As Long
    Dim strRange As String
    Dim r As Range
    Dim s As String
    
    Dim selSheet As String
    Dim blnCell As Boolean
'    Dim blnShape As Boolean
    Dim strPath As String
    selSheet = ""
    
    blnCell = False
    
    For lngCnt = 0 To lstResult.ListCount - 1
    
        If lstResult.Selected(lngCnt) Then
            If selSheet = "" Then
                txtPreview.Text = lstResult.List(lngCnt, C_SEARCH_STR)
                selSheet = lstResult.List(lngCnt, C_SEARCH_SHEET)
                If Left$(lstResult.List(lngCnt, C_SEARCH_ID), 1) = "$" Then
                    blnCell = True
                Else
                    Dim p() As String
                    p = Split(lstResult.List(lngCnt, C_SEARCH_ID), ":")
'                    blnShape = True
                    strPath = p(0)
                End If
            Else
                If selSheet <> lstResult.List(lngCnt, C_SEARCH_SHEET) Then
                    mblnRefresh = False
                    lstResult.Selected(lngCnt) = False
                    mblnRefresh = True
                Else
                    If blnCell Then
                        '|fffd|P|fffd|s|fffd||682||fffd||fffd|Z|fffd||fffd||fffd||142|Q|fffd|s|fffd||688||20d|~|fffd||143|Z|fffd||fffd||fffd||20a|O
                        If Left$(lstResult.List(lngCnt, C_SEARCH_ID), 1) <> "$" Then
                            mblnRefresh = False
                            lstResult.Selected(lngCnt) = False
                            mblnRefresh = True
                        End If
                    Else
                        '|fffd|P|fffd|s|fffd||682||fffd||fffd|V|fffd|F|fffd|C|fffd|v
                        If Left$(lstResult.List(lngCnt, C_SEARCH_ID), 1) = "$" Then
                            mblnRefresh = False
                            lstResult.Selected(lngCnt) = False
                            mblnRefresh = True
                        Else
                            p = Split(lstResult.List(lngCnt, C_SEARCH_ID), ":")
                            If strPath <> p(0) Then
                                mblnRefresh = False
                                lstResult.Selected(lngCnt) = False
                                mblnRefresh = True
                            End If
                        End If
                    
                    End If
                    
                    
                End If
            End If
        
        End If
    Next
    
    If Len(selSheet) = 0 Then
        Exit Sub
    End If
    
    Worksheets(selSheet).Select
    
    
    Dim strBuf As String
    Dim strId As String
    Dim objShape As Object
    Dim objArt As Object
    Dim blnFlg As Boolean
    blnFlg = False
    For lngCnt = 0 To lstResult.ListCount - 1

        If lstResult.Selected(lngCnt) Then

            strBuf = lstResult.List(lngCnt, C_SEARCH_ID)
            
            Set objShape = getObjFromID(Worksheets(selSheet), Mid$(strBuf, InStrRev(strBuf, ":") + 1))
            
            'SmartArt|fffd||30f||a347|
            If InStr(strBuf, C_SEARCH_ID_SMARTART) > 0 Then
            
            Else
                On Error Resume Next
                If blnFlg Then
                    objShape.Select False
                Else
                    blnFlg = True
                    Application.GoTo setCellPos(objShape.TopLeftCell), True
                    objShape.Select
                End If
                On Error GoTo 0
            End If

        End If
    Next

    Me.Show


End Sub
Private Function getObjFromID(ByRef WS As Worksheet, ByVal id As String) As Object
    Dim ret As Object
    Dim s As Shape
    
    For Each s In WS.Shapes
        Select Case s.Type
            Case msoAutoShape, msoTextBox, msoCallout, msoFreeform
                If s.id = CLng(id) Then
                    Set ret = s
                    Exit For
                End If
            
            Case msoGroup
                Set ret = getObjFromIDSub(s, id)
                If ret Is Nothing Then
                Else
                    Exit For
                End If
        End Select
    Next
    Set getObjFromID = ret

End Function
Private Function getObjFromIDSub(ByRef objShape As Shape, ByVal id As String) As Object
    
    Dim s As Shape
    Dim ret As Object
    
    For Each s In objShape.GroupItems
        Select Case s.Type
            Case msoAutoShape, msoTextBox, msoCallout, msoFreeform
                If s.id = CLng(id) Then
                    Set ret = s
                    Exit For
                End If
            
            Case msoGroup
                Set ret = getObjFromIDSub(s, id)
                If ret Is Nothing Then
                Else
                    Exit For
                End If
                
        End Select
    Next

    Set getObjFromIDSub = ret
End Function
Private Function setCellPos(ByRef r As Range) As Range

    Dim lngRow As Long
    Dim lngCol As Long
    
    Dim lngCol1 As Long
    Dim lngCol2 As Long
    
    lngCol1 = Windows(1).VisibleRange(1).Column
    lngCol2 = Windows(1).VisibleRange(Windows(1).VisibleRange.count).Column
    
    If lngCol1 <= r.Column And r.Column <= lngCol2 Then
        lngCol = lngCol1
    Else
        lngCol = r.Column
    End If
    
    lngRow = r.row - 5
    If lngRow < 1 Then
        lngRow = 1
    End If

    Set setCellPos = r.Worksheet.Cells(lngRow, lngCol)

End Function
Private Sub UserForm_Initialize()

    dispList

    mblnRefresh = True
    
    Me.Top = (Application.Top + Application.Height - Me.Height) - 20
    Me.Left = (Application.Left + Application.Width - Me.Width) - 20

End Sub

Sub dispList()

    Dim objSheet As Worksheet
    
    Dim strText As String
    Dim strTag As String
    Dim varPrint As Variant
    
    Dim strWidth  As String
    Dim strHeight  As String
    
    Dim strFormat As String
    Dim strUserDate  As String
    Dim strFusenDate As String
    
    Dim strFont  As String
    Dim strSize  As String
    
    Dim strHorizontalAnchor  As String
    Dim strVerticalAnchor  As String
    
    Dim varAutoSize  As Variant
    Dim varOverFlow As Variant
    Dim varWordWrap As Variant
    
    lstResult.Clear
    txtPreview.Text = ""
    
    Call getSettingFusen(strText, strTag, varPrint, strWidth, strHeight, strFormat, strUserDate, strFusenDate, strFont, strSize, strHorizontalAnchor, strVerticalAnchor, varAutoSize, varOverFlow, varWordWrap)

    For Each objSheet In ActiveWorkbook.Worksheets

        If objSheet.visible = xlSheetVisible Then
            Call searchShape(strTag, objSheet)
        End If
        
    Next
End Sub
Attribute VB_Name = "frmSectionEx"
Attribute VB_Base = "0{16427FEF-1B4D-48FD-A83F-FDDA140D1B3E}{4A57A77B-2281-4F17-8FC3-441C4A49D12D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_NO As Long = 0
Private Const C_SECTION_NAME As Long = 1
Private Const C_CLASS_NAME As Long = 2

Private Const C_LEVEL As Long = 0
Private Const C_SECTION As Long = 1
Private Const C_ENABLE As Long = 2
Private Const C_FONT_NAME As Long = 3
Private Const C_FONT_SIZE As Long = 4
Private Const C_FONT_BOLD As Long = 5
Private Const C_FONT_ITALIC As Long = 6
Private Const C_FONT_UNDER_LINE As Long = 7
Private Const C_CLASS As Long = 8

Private Const C_UP As Long = 1
Private Const C_DOWN As Long = 2

Private Const C_TRUE As String = "|fffd||fffd|"
Private Const C_FALSE As String = "|fffd||"

Private mRet As VbMsgBoxResult

Private Sub cmdAdd_Click()

    Dim j As Long
    Dim i As Long
    Dim blnFind As Boolean
    Dim strkey As String
     
    blnFind = False
    
    If lstSelect.ListCount = 0 Then
        Exit Sub
    End If
    

    lstSetting.AddItem ""
    j = lstSetting.ListCount - 1
    
    lstSetting.List(j, C_LEVEL) = j + 1
    lstSetting.List(j, C_SECTION) = lstSelect.List(lstSelect.ListIndex, C_SECTION_NAME)
    lstSetting.List(j, C_ENABLE) = C_FALSE
    lstSetting.List(j, C_FONT_NAME) = Application.StandardFont
    lstSetting.List(j, C_FONT_SIZE) = Application.StandardFontSize
    lstSetting.List(j, C_FONT_BOLD) = C_FALSE
    lstSetting.List(j, C_FONT_ITALIC) = C_FALSE
    lstSetting.List(j, C_FONT_UNDER_LINE) = C_FALSE
    lstSetting.List(j, C_CLASS) = lstSelect.List(lstSelect.ListIndex, C_CLASS_NAME)
    
    lstSetting.ListIndex = j
    lstSetting.TopIndex = j
    
End Sub

Private Sub cmdDel_Click()

    Dim i As Long
    Dim lngLast As Long
    
    If lstSetting.ListCount <= 1 Then
        MsgBox "|fffd||fffd||fffd||5c2||102||312|i|fffd||fffd||fffd||50d||fffd||fffd||fffd||fffd||d3dc||fffd||fffd||fffd||90b1||fffd||182||342||142||fffd||fffd||702||fffd||fffd||fffd|B", vbExclamation + vbOKOnly, C_TITLE
        Exit Sub
    End If
    
    lngLast = lstSetting.ListIndex
    
    If lngLast > -1 Then
        lstSetting.RemoveItem lngLast
    End If
    
    '|fffd||50d||fffd||fffd||fffd|U|fffd||fffd||202||fffd||fffd||fffd|
    For i = 0 To lstSetting.ListCount - 1
        lstSetting.List(i, C_LEVEL) = i + 1
    Next
    
End Sub





Private Sub cboFont_Change()
    If lstSetting.ListIndex > -1 Then
        lstSetting.List(lstSetting.ListIndex, C_FONT_NAME) = cboFont.Text
    End If
    Call previewLabel
End Sub

Private Sub chkFontBold01_Click()

End Sub

Private Sub CheckBox4_Click()

End Sub

Private Sub chkFontBold_Click()
    If lstSetting.ListIndex > -1 Then
        lstSetting.List(lstSetting.ListIndex, C_FONT_BOLD) = chgBoolToStr(chkFontBold.Value)
    End If
    Call previewLabel
End Sub

Private Sub chkFontItalic_Click()
    If lstSetting.ListIndex > -1 Then
        lstSetting.List(lstSetting.ListIndex, C_FONT_ITALIC) = chgBoolToStr(chkFontItalic.Value)
    End If
    Call previewLabel
End Sub

Private Sub chkFontUnderLine_Click()
    If lstSetting.ListIndex > -1 Then
        lstSetting.List(lstSetting.ListIndex, C_FONT_UNDER_LINE) = chgBoolToStr(chkFontUnderLine.Value)
    End If
    Call previewLabel
End Sub

Private Sub chkUseFormat_Click()

    Dim blnValue As Boolean
    
    blnValue = chkUseFormat.Value
    
    cboFont.enabled = blnValue
    txtFontSize.enabled = blnValue
    chkFontBold.enabled = blnValue
    chkFontItalic.enabled = blnValue
    chkFontUnderLine.enabled = blnValue
    If lstSetting.ListIndex > -1 Then
        lstSetting.List(lstSetting.ListIndex, C_ENABLE) = chgBoolToStr(blnValue)
    End If
    Call previewLabel
End Sub

Private Sub chkUseFormat2_Click()

    Dim blnValue As Boolean
    
    blnValue = chkUseFormat2.Value
    
    cboFont2.enabled = blnValue
    txtFontSize2.enabled = blnValue
    chkFontBold2.enabled = blnValue
    chkFontItalic2.enabled = blnValue
    chkFontUnderLine2.enabled = blnValue

End Sub

Private Sub cmdCancel_Click()
    mRet = vbCancel
    Unload Me
End Sub



Private Sub cmdOK_Click()
    mRet = vbOK
    Unload Me
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||248||693||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdUp_Click()
     Call moveList(C_UP)
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd||248||693||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdDown_Click()
     Call moveList(C_DOWN)
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd||693||fffd||fffd||fffd||fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub moveList(ByVal lngMode As Long)

    Dim lngCnt As Long
    Dim lngCmp As Long
    
    Dim varTmp As Variant

    Dim lngStart As Long
    Dim lngEnd As Long
    Dim lngInc As Long

    '|fffd|P|fffd||82||202||fffd|s|fffd|v
    If lstSetting.ListCount <= 1 Then
        Exit Sub
    End If

    Select Case lngMode
        Case C_UP
            lngStart = 0
            lngEnd = lstSetting.ListCount - 1
            lngInc = 1
        Case C_DOWN
            lngStart = lstSetting.ListCount - 1
            lngEnd = 0
            lngInc = -1
    End Select

    For lngCnt = lngStart To lngEnd Step lngInc
    
        If lstSetting.Selected(lngCnt) Then
            '|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd|s|fffd||fffd||fffd||fffd||fffd||142||24a|J|fffd|n|fffd|s|fffd||30f||a347||fffd||693||fffd||fffd|s|fffd||fffd|
            If lngCnt = lngStart Then
                Exit For
            End If
            
            lngCmp = lngCnt + lngInc * -1
            
            Dim i As Long
            For i = C_SECTION To C_CLASS
                varTmp = lstSetting.List(lngCnt, i)
                lstSetting.List(lngCnt, i) = lstSetting.List(lngCmp, i)
                lstSetting.List(lngCmp, i) = varTmp
            Next
            
            lstSetting.Selected(lngCnt) = False
            lstSetting.Selected(lngCnt + lngInc * -1) = True
        End If
    
    Next

End Sub



Private Sub CommandButton1_Click()

End Sub

Sub previewLabel()

    Dim obj As Object
    Dim strBuf As String
    
    If lstSetting.ListIndex = -1 Then
        Exit Sub
    End If
    
    Set obj = rlxCreateSectionObject(lstSetting.List(lstSetting.ListIndex, C_CLASS))

    strBuf = obj.SectionLevelName(1) & vbCrLf
    'strbuf = strbuf & Space(2) & obj.SectionLevelName(2) & vbCrLf

    lblPreview.Caption = strBuf
    If chkUseFormat.Value Then
        lblPreview.Font = cboFont.Text
        lblPreview.fontSize = txtFontSize.Text
        lblPreview.Font.Bold = chkFontBold.Value
        lblPreview.Font.Italic = chkFontItalic.Value
        lblPreview.Font.Underline = chkFontUnderLine.Value
    Else
        lblPreview.Font = Application.StandardFont
        lblPreview.fontSize = Application.StandardFontSize
        lblPreview.Font.Bold = False
        lblPreview.Font.Italic = False
        lblPreview.Font.Underline = False
    End If
    
    Set obj = Nothing

End Sub

Private Sub lstSetting_Change()
    Call previewLabel
End Sub

Private Sub lstSetting_Click()


    If lstSetting.List(lstSetting.ListIndex, C_ENABLE) = C_TRUE Then
        chkUseFormat.Value = True
    Else
        chkUseFormat.Value = False
    End If
    
    cboFont.Text = lstSetting.List(lstSetting.ListIndex, C_FONT_NAME)
    txtFontSize.Text = lstSetting.List(lstSetting.ListIndex, C_FONT_SIZE)
    
    If lstSetting.List(lstSetting.ListIndex, C_FONT_BOLD) = C_TRUE Then
        chkFontBold.Value = True
    Else
        chkFontBold.Value = False
    End If
    
    If lstSetting.List(lstSetting.ListIndex, C_FONT_ITALIC) = C_TRUE Then
        chkFontItalic.Value = True
    Else
        chkFontItalic.Value = False
    End If
    
    If lstSetting.List(lstSetting.ListIndex, C_FONT_UNDER_LINE) = C_TRUE Then
        chkFontUnderLine.Value = True
    Else
        chkFontUnderLine.Value = False
    End If
            
End Sub

Private Sub txtFontSize_Change()
    Call previewLabel
    If lstSetting.ListIndex > -1 Then
        lstSetting.List(lstSetting.ListIndex, C_FONT_SIZE) = txtFontSize.Text
    End If
End Sub

Private Sub UserForm_Initialize()

    Dim i As Long
    Dim objAll As Object

    If mColAllSection Is Nothing Then
        Call createAllSectionObject
    End If
    
    i = 10
    For Each objAll In mColAllSection
        lstSelect.AddItem ""
        lstSelect.List(lstSelect.ListCount - 1, C_NO) = i
        lstSelect.List(lstSelect.ListCount - 1, C_SECTION_NAME) = objAll.SectionName
        lstSelect.List(lstSelect.ListCount - 1, C_CLASS_NAME) = objAll.Class
        i = i + 1
    Next
    lstSelect.ListIndex = 0
 
    With Application.CommandBars("Formatting").Controls(1)
        For i = 1 To .ListCount
            cboFont.AddItem .List(i)
            cboFont2.AddItem .List(i)
        Next i
    End With
    cboFont.Text = Application.StandardFont
    cboFont2.Text = Application.StandardFont
    
    txtFontSize.Text = Application.StandardFontSize
    txtFontSize2.Text = Application.StandardFontSize
    
    chkUseFormat_Click
    chkUseFormat2_Click

End Sub
Private Function chgBoolToStr(ByVal blnFlg As Boolean) As String
    If blnFlg Then
        chgBoolToStr = C_TRUE
    Else
        chgBoolToStr = C_FALSE
    End If
End Function

Public Function Start(ByRef col As Collection) As Collection
    
    Dim i As Long
    Dim j As Long
    On Error GoTo 0
    
    For i = 1 To col.count
            
        lstSetting.AddItem ""
        lstSetting.List(lstSetting.ListCount - 1, C_LEVEL) = i
        lstSetting.List(lstSetting.ListCount - 1, C_SECTION) = col(i).classObj.SectionName
        lstSetting.List(lstSetting.ListCount - 1, C_ENABLE) = chgBoolToStr(col(i).useFormat)
        lstSetting.List(lstSetting.ListCount - 1, C_FONT_NAME) = col(i).fontName
        lstSetting.List(lstSetting.ListCount - 1, C_FONT_SIZE) = col(i).fontSize
        lstSetting.List(lstSetting.ListCount - 1, C_FONT_BOLD) = chgBoolToStr(col(i).fontBold)
        lstSetting.List(lstSetting.ListCount - 1, C_FONT_ITALIC) = chgBoolToStr(col(i).fontItalic)
        lstSetting.List(lstSetting.ListCount - 1, C_FONT_UNDER_LINE) = chgBoolToStr(col(i).fontUnderLine)
        lstSetting.List(lstSetting.ListCount - 1, C_CLASS) = col(i).classObj.Class
    
    Next
    If lstSetting.ListCount > 0 Then
        lstSetting.Selected(0) = True
        
        chkUseFormat2.Value = col(1).useFormat2
            
        cboFont2.Text = col(1).fontName2
        txtFontSize2.Text = col(1).fontSize2
        
        chkFontBold2.Value = col(1).fontBold2
        chkFontItalic2.Value = col(1).fontItalic2
        chkFontUnderLine2.Value = col(1).fontUnderLine2
        
    End If

    Me.Show
    
    If mRet <> vbOK Then
        Set Start = Nothing
        Exit Function
    End If

    Dim strClass As String
    Dim ret As Collection
    
    Set ret = New Collection
    Dim ss As SectionStructDTO
    Dim lngPos As Long
    Dim s As String

    Set ret = New Collection

    For i = 0 To lstSetting.ListCount - 1
    
        strClass = lstSetting.List(i, C_CLASS)
        If strClass <> "" Then
            Set ss = New SectionStructDTO
            Set ss.classObj = rlxCreateSectionObject(strClass)
            
            If lstSetting.List(i, C_ENABLE) = C_TRUE Then
                ss.useFormat = True
            Else
                ss.useFormat = False
            End If
            
            ss.fontName = lstSetting.List(i, C_FONT_NAME)
            ss.fontSize = lstSetting.List(i, C_FONT_SIZE)
            
            If lstSetting.List(i, C_FONT_BOLD) = C_TRUE Then
                ss.fontBold = True
            Else
                ss.fontBold = False
            End If
            
            If lstSetting.List(i, C_FONT_ITALIC) = C_TRUE Then
                ss.fontItalic = True
            Else
                ss.fontItalic = False
            End If
            
            If lstSetting.List(i, C_FONT_UNDER_LINE) = C_TRUE Then
                ss.fontUnderLine = True
            Else
                ss.fontUnderLine = False
            End If
            
            ss.useFormat2 = chkUseFormat2.Value
            
            ss.fontName2 = cboFont2.Text
            ss.fontSize2 = txtFontSize2.Text
            
            ss.fontBold2 = chkFontBold2.Value
            ss.fontItalic2 = chkFontItalic2.Value
            ss.fontUnderLine2 = chkFontUnderLine2.Value
            
            ret.Add ss, Format$(i + 1, "00")
            Set ss = Nothing
        End If
        
    Next
  
    Set Start = ret
    Set ret = Nothing
    
End Function


Attribute VB_Name = "frmSectionList"
Attribute VB_Base = "0{8CF46EB0-B6CE-45E9-938E-817D1DCF0B9E}{4085BEDD-AF90-4889-AD3A-CF2778A097D9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private mColSection1 As New Collection
Private mColSection2 As New Collection
Private mColSection3 As New Collection
Private mColSection4 As New Collection
Private mColSection5 As New Collection
Private mColSection6 As New Collection

Private mColLevel01 As New Collection
Private mColLevel02 As New Collection
Private mColLevel03 As New Collection
Private mColLevel04 As New Collection
Private mColLevel05 As New Collection
Private mColLevel06 As New Collection



Private Sub cmdOK_Click()


    
    Unload Me
End Sub

Private Sub cmdSetting01_Click()

    Dim ret As Collection
    Dim i As Long
    
    Set ret = frmSectionEx.Start(mColSection1)
    If ret Is Nothing Then
    Else
        Set mColSection1 = ret
        For i = 1 To 6
            If mColSection1.count < i Then
                mColLevel01(i).Caption = ""
            Else
                If mColSection1(i).classObj Is Nothing Then
                    mColLevel01(i).Caption = ""
                Else
                    mColLevel01(i).Caption = mColSection1(i).classObj.SectionLevelName(i)
                End If
            End If
        Next
        setSectionSetting "01", mColSection1
    End If
End Sub

Private Sub cmdSetting02_Click()

    Dim ret As Collection
    Dim i As Long
    
    Set ret = frmSectionEx.Start(mColSection2)
    If ret Is Nothing Then
    Else
        Set mColSection2 = ret
        For i = 1 To 6
            If mColSection2.count < i Then
                mColLevel02(i).Caption = ""
            Else
                If mColSection2(i).classObj Is Nothing Then
                    mColLevel02(i).Caption = ""
                Else
                    mColLevel02(i).Caption = mColSection2(i).classObj.SectionLevelName(i)
                End If
            End If
        Next
        setSectionSetting "02", mColSection2
    End If
End Sub

Private Sub cmdSetting03_Click()

    Dim ret As Collection
    Dim i As Long
    
    Set ret = frmSectionEx.Start(mColSection3)
    If ret Is Nothing Then
    Else
        Set mColSection3 = ret
        For i = 1 To 6
            If mColSection3.count < i Then
                mColLevel03(i).Caption = ""
            Else
                If mColSection3(i).classObj Is Nothing Then
                    mColLevel03(i).Caption = ""
                Else
                    mColLevel03(i).Caption = mColSection3(i).classObj.SectionLevelName(i)
                End If
            End If
        Next
        setSectionSetting "03", mColSection3
    End If
    
End Sub

Private Sub cmdSetting04_Click()
    Dim ret As Collection
    Dim i As Long
    
    Set ret = frmSectionEx.Start(mColSection4)
    If ret Is Nothing Then
    Else
        Set mColSection4 = ret
        For i = 1 To 6
            If mColSection4.count < i Then
                mColLevel04(i).Caption = ""
            Else
                If mColSection4(i).classObj Is Nothing Then
                    mColLevel04(i).Caption = ""
                Else
                    mColLevel04(i).Caption = mColSection4(i).classObj.SectionLevelName(i)
                End If
            End If
        Next
        setSectionSetting "04", mColSection4
    End If

End Sub

Private Sub cmdSetting05_Click()
    Dim ret As Collection
    Dim i As Long
    
    Set ret = frmSectionEx.Start(mColSection5)
    If ret Is Nothing Then
    Else
        Set mColSection5 = ret
        For i = 1 To 6
            If mColSection5.count < i Then
                mColLevel05(i).Caption = ""
            Else
                If mColSection5(i).classObj Is Nothing Then
                    mColLevel05(i).Caption = ""
                Else
                    mColLevel05(i).Caption = mColSection5(i).classObj.SectionLevelName(i)
                End If
            End If
        Next
        setSectionSetting "05", mColSection5
    End If

End Sub

Private Sub cmdSetting06_Click()
    Dim ret As Collection
    Dim i As Long
    
    Set ret = frmSectionEx.Start(mColSection6)
    If ret Is Nothing Then
    Else
        Set mColSection6 = ret
        For i = 1 To 6
            If mColSection6.count < i Then
                mColLevel06(i).Caption = ""
            Else
                If mColSection6(i).classObj Is Nothing Then
                    mColLevel06(i).Caption = ""
                Else
                    mColLevel06(i).Caption = mColSection6(i).classObj.SectionLevelName(i)
                End If
            End If
        Next
        setSectionSetting "06", mColSection6
    End If
End Sub


Private Sub UserForm_Initialize()

    Dim i As Long
    Dim obj As Object
    
    mColLevel01.Add lblLevel0101, "01"
    mColLevel01.Add lblLevel0102, "02"
    mColLevel01.Add lblLevel0103, "03"
    mColLevel01.Add lblLevel0104, "04"
    mColLevel01.Add lblLevel0105, "05"
    mColLevel01.Add lblLevel0106, "06"
    
    mColLevel02.Add lblLevel0201, "01"
    mColLevel02.Add lblLevel0202, "02"
    mColLevel02.Add lblLevel0203, "03"
    mColLevel02.Add lblLevel0204, "04"
    mColLevel02.Add lblLevel0205, "05"
    mColLevel02.Add lblLevel0206, "06"
    
    mColLevel03.Add lblLevel0301, "01"
    mColLevel03.Add lblLevel0302, "02"
    mColLevel03.Add lblLevel0303, "03"
    mColLevel03.Add lblLevel0304, "04"
    mColLevel03.Add lblLevel0305, "05"
    mColLevel03.Add lblLevel0306, "06"
    
    mColLevel04.Add lblLevel0401, "01"
    mColLevel04.Add lblLevel0402, "02"
    mColLevel04.Add lblLevel0403, "03"
    mColLevel04.Add lblLevel0404, "04"
    mColLevel04.Add lblLevel0405, "05"
    mColLevel04.Add lblLevel0406, "06"
    
    mColLevel05.Add lblLevel0501, "01"
    mColLevel05.Add lblLevel0502, "02"
    mColLevel05.Add lblLevel0503, "03"
    mColLevel05.Add lblLevel0504, "04"
    mColLevel05.Add lblLevel0505, "05"
    mColLevel05.Add lblLevel0506, "06"
    
    mColLevel06.Add lblLevel0601, "01"
    mColLevel06.Add lblLevel0602, "02"
    mColLevel06.Add lblLevel0603, "03"
    mColLevel06.Add lblLevel0604, "04"
    mColLevel06.Add lblLevel0605, "05"
    mColLevel06.Add lblLevel0606, "06"
    
    Dim strClass As String
    Dim ss As SectionStructDTO
    Dim col As Collection
    
    
    
    '|fffd|J|fffd|X|fffd|^|fffd||fffd||fffd|i|fffd|P|fffd|j
    Set mColSection1 = rlxGetSectionSetting("01")
    For i = 1 To 6
        If mColSection1.count < i Then
            mColLevel01(i).Caption = ""
        Else
            If mColSection1(i).classObj Is Nothing Then
                mColLevel01(i).Caption = ""
            Else
                mColLevel01(i).Caption = mColSection1(i).classObj.SectionLevelName(i)
            End If
        End If
    Next
    
    '|fffd|J|fffd|X|fffd|^|fffd||fffd||fffd|i|fffd|Q|fffd|j
    Set mColSection2 = rlxGetSectionSetting("02")
    For i = 1 To 6
        If mColSection2.count < i Then
            mColLevel02(i).Caption = ""
        Else
            If mColSection2(i).classObj Is Nothing Then
                mColLevel02(i).Caption = ""
            Else
                mColLevel02(i).Caption = mColSection2(i).classObj.SectionLevelName(i)
            End If
        End If
    Next
    
    '|fffd|J|fffd|X|fffd|^|fffd||fffd||fffd|i|fffd|R|fffd|j
    Set mColSection3 = rlxGetSectionSetting("03")
    For i = 1 To 6
        If mColSection3.count < i Then
            mColLevel03(i).Caption = ""
        Else
            If mColSection3(i).classObj Is Nothing Then
                mColLevel03(i).Caption = ""
            Else
                mColLevel03(i).Caption = mColSection3(i).classObj.SectionLevelName(i)
            End If
        End If
    Next
    
    '|fffd|J|fffd|X|fffd|^|fffd||fffd||fffd|i|fffd|S|fffd|j
    Set mColSection4 = rlxGetSectionSetting("04")
    For i = 1 To 6
        If mColSection4.count < i Then
            mColLevel04(i).Caption = ""
        Else
            If mColSection4(i).classObj Is Nothing Then
                mColLevel04(i).Caption = ""
            Else
                mColLevel04(i).Caption = mColSection4(i).classObj.SectionLevelName(i)
            End If
        End If
    Next
    
    '|fffd|J|fffd|X|fffd|^|fffd||fffd||fffd|i|fffd|T|fffd|j
    Set mColSection5 = rlxGetSectionSetting("05")
    For i = 1 To 6
        If mColSection5.count < i Then
            mColLevel05(i).Caption = ""
        Else
            If mColSection5(i).classObj Is Nothing Then
                mColLevel05(i).Caption = ""
            Else
                mColLevel05(i).Caption = mColSection5(i).classObj.SectionLevelName(i)
            End If
        End If
    Next
    
    '|fffd|J|fffd|X|fffd|^|fffd||fffd||fffd|i|fffd|U|fffd|j
    Set mColSection6 = rlxGetSectionSetting("06")
    For i = 1 To 6
        If mColSection6.count < i Then
            mColLevel06(i).Caption = ""
        Else
            If mColSection6(i).classObj Is Nothing Then
                mColLevel06(i).Caption = ""
            Else
                mColLevel06(i).Caption = mColSection6(i).classObj.SectionLevelName(i)
            End If
        End If
    Next

    
    Dim strPos As String
    strPos = GetSetting(C_TITLE, "Section", "pos", "1")
    
    Select Case strPos
        Case "2"
            lblTile02.BackColor = &HC0FFFF
        Case "3"
            lblTile03.BackColor = &HC0FFFF
        Case "4"
            lblTile04.BackColor = &HC0FFFF
        Case "5"
            lblTile05.BackColor = &HC0FFFF
        Case "6"
            lblTile06.BackColor = &HC0FFFF
        Case Else
            lblTile01.BackColor = &HC0FFFF
    End Select


End Sub

Private Sub UserForm_Terminate()

    Dim strPos As String
    
    strPos = GetSetting(C_TITLE, "Section", "pos", "1")
    
    Select Case strPos
        Case "1"
            Set mColSection = mColSection1
        Case "2"
            Set mColSection = mColSection2
        Case "3"
            Set mColSection = mColSection3
        Case "4"
            Set mColSection = mColSection4
        Case "5"
            Set mColSection = mColSection5
        Case "6"
            Set mColSection = mColSection6
    End Select
    
'    setSectionSetting "01", mColSection1
'    setSectionSetting "02", mColSection2
'    setSectionSetting "03", mColSection3
'    setSectionSetting "04", mColSection4
'    setSectionSetting "05", mColSection5
'    setSectionSetting "06", mColSection6
    
End Sub
Attribute VB_Name = "frmSelect"
Attribute VB_Base = "0{954BC006-9C5B-4D3C-AC54-E0100F65D086}{900B032C-BABB-4043-BC45-214208F6A242}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private ret As VBA.VbMsgBoxResult

Public Function Start(ByRef lngRowSel As Long, _
                      ByRef lngRowGap As Long, _
                      ByRef lngColSel As Long, _
                      ByRef lngColGap As Long) As VBA.VbMsgBoxResult
                      

    txtRowSel.Text = lngRowSel
    txtRowGap.Text = lngRowGap
    txtColSel.Text = lngColSel
    txtColGap.Text = lngColGap
    
    ret = vbCancel

    Me.Show vbModal

    lngRowSel = txtRowSel.Text
    lngRowGap = txtRowGap.Text
    lngColSel = txtColSel.Text
    lngColGap = txtColGap.Text

    Start = ret

End Function

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdOK_Click()
    ret = vbOK
    Unload Me
End Sub
Private Sub spnColGap_SpinDown()
    txtColGap.Text = spinDown(txtColGap.Text)
End Sub

Private Sub spnColGap_SpinUp()
    txtColGap.Text = spinUp(txtColGap.Text)
End Sub

Private Sub spnColSel_SpinDown()
    txtColSel.Text = spinDown(txtColSel.Text)
End Sub

Private Sub spnColSel_SpinUp()
    txtColSel.Text = spinUp(txtColSel.Text)
End Sub

Private Sub spnRowGap_SpinDown()
    txtRowGap.Text = spinDown(txtRowGap.Text)
End Sub
Private Sub spnRowGap_SpinUp()
    txtRowGap.Text = spinUp(txtRowGap.Text)
End Sub
Private Sub spnRowSel_SpinDown()
    txtRowSel.Text = spinDown(txtRowSel.Text)
End Sub
Private Sub spnRowSel_SpinUp()
    txtRowSel.Text = spinUp(txtRowSel.Text)
End Sub

Private Function spinUp(ByVal vntValue As Variant) As Variant

    Dim lngValue As Long
    
    lngValue = Val(vntValue)
    lngValue = lngValue + 1
    spinUp = lngValue

End Function

Private Function spinDown(ByVal vntValue As Variant) As Variant

    Dim lngValue As Long
    
    lngValue = Val(vntValue)
    lngValue = lngValue - 1
    If lngValue < 0 Then
        lngValue = 0
    End If
    spinDown = lngValue

End Function


Attribute VB_Name = "frmSelectCell"
Attribute VB_Base = "0{E334346C-A936-4A96-9688-A7DE65756C27}{FF55D121-D808-4B83-B849-0483F66BE555}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private mResult As VbMsgBoxResult

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdOK_Click()
    mResult = vbOK
    Unload Me
End Sub

Public Function Start(ByRef strSearch As String, _
                      ByRef lngType As Long) As VBA.VbMsgBoxResult
                      

    optEqual.Value = True
    mResult = vbCancel
    

    Me.Show vbModal

    strSearch = txtSearch.Text

    Select Case True
        Case optEqual.Value
            lngType = 0
        Case optNot.Value
            lngType = 1
        Case Else
            lngType = 2
    End Select

    Start = mResult

End Function

Attribute VB_Name = "frmSetPackage"
Attribute VB_Base = "0{684CF164-C3A3-4F51-B9B9-D7AC6B800DF9}{3A27DDDF-7444-41F4-92DE-77AB9D068FEB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdFolder_Click()

    Dim strFile As String

    '|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||64fe|
    strFile = rlxSelectFolder()
    
    If Trim(strFile) <> "" Then
        txtFolder.Text = strFile
    End If
    
End Sub

Private Sub cmdPackage_Click()

    Dim strFile As String

    '|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||64fe|
    strFile = rlxSelectFolder()
    
    If Trim(strFile) <> "" Then
        txtPackage.Text = strFile
    End If
    
End Sub

Private Sub cmdRun_Click()

    If Len(Trim(txtFolder.Text)) = 0 Then
        MsgBox "Java|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||302||fffd||fffd||fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation, C_TITLE
        Exit Sub
    End If

    If Len(Trim(txtPackage.Text)) = 0 Then
        MsgBox "Java|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd|z|fffd|u|fffd||fffd||fffd||fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation, C_TITLE
        Exit Sub
    End If

    Call setJavaPackage

End Sub

Private Sub setJavaPackage()

    Dim strDir As String
    Dim fp As Integer
    
    Dim strLine() As String
    
    Dim bytBuf() As Byte
    Dim strBuf() As String
    Dim strPath() As String
    Dim strDest As String
    Dim strSource As String
    Dim strMkDir As String
    
    Dim intCnt As Integer
    Dim lngCount As Long
    
    Dim blnCopySuccess As Boolean
    Dim lngDeleteSuccess As Long
    
    Dim blnNoPackage As Boolean
    
    Const C_RESULT_NO As Long = 0
    Const C_RESULT_FILE As Long = 1
    Const C_RESULT_PACKAGE As Long = 2
    Const C_RESULT_COPY As Long = 3
    Const C_RESULT_DELETE As Long = 4
  
    Const C_DELETE_NONE As Long = 0
    Const C_DELETE_SUCCESS As Long = 1
    Const C_DELETE_FAIL As Long = 2
    
    Dim BASE_FOLDER As String
    Dim DEST_FOLDER As String
    
    BASE_FOLDER = rlxAddFileSeparator(txtFolder.Text)
    DEST_FOLDER = rlxAddFileSeparator(txtPackage.Text)
    
    Dim FS As Object
    Dim d As Object
    Dim f As Object
    
    strDir = Dir(BASE_FOLDER & "*.java")
    If strDir = "" Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||38f||6c2||fffd|Java|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B|fffd||fffd||fffd||fffd||fffd||fffd||fffd|I|fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B", vbExclamation, C_TITLE
        Exit Sub
    End If
    
    Set FS = CreateObject("Scripting.FileSystemObject")
    Set d = FS.GetFolder(BASE_FOLDER)

    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||283||fffd||fffd|X|fffd|g|fffd||303|N|fffd||fffd||fffd|A
    lstResult.Clear
    lngCount = 0

    'Do Until strDir = ""
    For Each f In d.files
        
        blnNoPackage = True
    
        strDir = f.name
        
        If LCase(FS.GetExtensionName(f.name)) <> "java" Then
            GoTo pass
        End If
            
        fp = FreeFile()
        Open BASE_FOLDER & strDir For Binary As fp
        
        '|fffd||64ea|2KB|fffd||fffd||fffd||fffd||fffd||fffd||1c2||742||fffd||fffd||fffd|B
        Const C_MAX_READ As Long = 2048
        Select Case LOF(fp)
            Case 0
                Close fp
                GoTo pass
            Case Is < C_MAX_READ
                ReDim bytBuf(0 To LOF(fp) - 1)
                Get fp, , bytBuf
            Case Else
                ReDim bytBuf(0 To C_MAX_READ - 1)
                Get fp, , bytBuf
        End Select
        Close fp
        
        Dim strAll As String
        Dim lngPos As Long
        Dim i As Long
        
        strAll = strConv(bytBuf, vbUnicode)
        
        lngPos = InStr(strAll, vbCrLf)
        If lngPos <> 0 Then
            strLine = Split(strAll, vbCrLf)
        Else
            lngPos = InStr(strAll, vbLf)
            If lngPos <> 0 Then
                strLine = Split(strAll, vbLf)
            Else
                strLine = Split(strAll, vbCr)
            End If
        End If
        
        For i = LBound(strLine) To UBound(strLine)
        
        
'        fp = FreeFile()
'        Open BASE_FOLDER & strDir For Input As fp
'
'        Do Until EOF(fp)
'            Line Input #fp, strLine
            
            '|fffd|u;|fffd|v|fffd||191|O|fffd||fffd|X|fffd|y|fffd|[|fffd|X|fffd||fffd||fffd||d3dc||fffd||fffd||fffd||103|X|fffd|y|fffd|[|fffd|X|fffd||fffd||fffd||fffd||602||fffd||182||fffd||fffd||115||fffd||fffd||fffd|
            strBuf = Split(Trim(Replace(strLine(i), ";", "")), " ")
            
            If UBound(strBuf) > 0 Then
                '|fffd|p|fffd||fffd||fffd|O|fffd||fffd||fffd|t|fffd||fffd||fffd|upackage|fffd|v|fffd||30f||a347|
                If InStr(strBuf(0), "package") > 0 Then
                
'                    Close fp
                
                    strPath = Split(strBuf(1), ".")
                    strDest = Replace(strBuf(1), ".", "\")
                    
                    strMkDir = ""
                    For intCnt = LBound(strPath) To UBound(strPath)
                        If strMkDir = "" Then
                            strMkDir = strPath(intCnt)
                        Else
                            strMkDir = strMkDir & "\" & strPath(intCnt)
                        End If
                        On Error Resume Next
                        MkDir DEST_FOLDER & strMkDir
                    Next intCnt
                    
                    
                    On Error GoTo 0
                    err.Clear
                    
                    strSource = BASE_FOLDER & strDir
                    strDest = DEST_FOLDER & strDest & "\" & strDir
                    
                    On Error Resume Next
                    blnCopySuccess = False
                    FileCopy strSource, strDest
                    If err.Number = 0 Then
                        blnCopySuccess = True
                    End If
                    
                    
                    On Error GoTo 0
                    err.Clear
                    
                    '|fffd|`|fffd|F|fffd|b|fffd|N|fffd|{|fffd|b|fffd|N|fffd|X|fffd||fffd||fffd|I|fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||a347|
                    lngDeleteSuccess = C_DELETE_NONE
                    If chkDelete.Value Then
                        If Dir$(strDest) <> "" Then
                            '|fffd||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||d3dc||fffd||fffd||fffd||fffd|B
                            On Error Resume Next
                            Kill strSource
                            If err.Number = 0 Then
                                lngDeleteSuccess = C_DELETE_SUCCESS
                            Else
                                lngDeleteSuccess = C_DELETE_FAIL
                            End If
                            On Error GoTo 0
                            err.Clear
                        End If
                    End If
                    
                    blnNoPackage = False
                    GoTo pass
                End If
            End If
        Next
'        Loop
'        Close fp
pass:
        lstResult.AddItem ""
        lstResult.List(lngCount, C_RESULT_NO) = lngCount + 1
        lstResult.List(lngCount, C_RESULT_FILE) = strDir
        
        Dim strPackageResult As String
        Dim strCopyResult As String
        Dim strDeleteResult As String
        
        If blnNoPackage Then
            strPackageResult = "|fffd||"
            strCopyResult = "|fffd||"
            strDeleteResult = "|fffd||"
        Else
            strPackageResult = "|fffd||fffd|"
            
            If blnCopySuccess Then
                strCopyResult = "|fffd||fffd|"
            Else
                strCopyResult = "|fffd|~"
            End If
            
            Select Case lngDeleteSuccess
                Case C_DELETE_NONE
                    strDeleteResult = "|fffd||"
                Case C_DELETE_SUCCESS
                    strDeleteResult = "|fffd||fffd|"
                Case C_DELETE_FAIL
                    strDeleteResult = "|fffd|~"
            End Select
            
        End If
        
        lstResult.List(lngCount, C_RESULT_PACKAGE) = strPackageResult
        lstResult.List(lngCount, C_RESULT_COPY) = strCopyResult
        lstResult.List(lngCount, C_RESULT_DELETE) = strDeleteResult
        
        lngCount = lngCount + 1
        
        
        'strDir = Dir
    'Loop
    Next

    MsgBox "|fffd|z|fffd|u|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbInformation, C_TITLE

End Sub

Attribute VB_Name = "frmShape"
Attribute VB_Base = "0{9A5E64EB-A669-46F6-89CB-E70A5D33EBF3}{A9356109-4FCD-48DA-B0BD-19ADF4838A8D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'
'Option Explicit
'
'Private Const C_Text As String = 0
'Private Const C_Font As String = 1
'Private Const C_Color As String = 2
'Private Const C_Size As String = 3
'Private Const C_Line As String = 4
'Private Const C_StampType As String = 5
'Private Const C_File As String = 6
'Private Const C_LineSize As String = 7
'Private Const C_Round As String = 8
'Private Const C_Rotate As String = 9
'
'Private Const C_DATA As Long = 1
'
'Private Const C_UP As Long = 1
'Private Const C_DOWN As Long = 2
'
'Private mResult As VbMsgBoxResult
'Private mblnRefresh As Boolean
'
'Sub dispPreview()
'
'    Dim FS As Object
'    Dim strPath As String
'    Dim lngWidth As Long
'    Dim lngHeight As Long
'
'    If mblnRefresh Then
'        Exit Sub
'    End If
'
'    If Not IsNumeric(txtSize.Text) Then
'        Exit Sub
'    End If
'
'    If Not IsNumeric(txtLineSize.Text) Then
'        Exit Sub
'    End If
'
'    If Not IsNumeric(txtRound.Text) Then
'        Exit Sub
'    End If
'
'    strPath = rlxGetTempFolder() & C_STAMP_FILE_NAME & ".jpg"
'
'    Dim s As StampMitome
'
'    Set s = New StampMitome
'
'    Select Case True
'        Case optNormal.Value
'            s.StampType = C_STAMP_MITOME_NORMAL
'            s.Text = txtName.Text
'            Dim c As control
'            For Each c In Controls
'                Select Case c.Tag
'                    Case "N"
'                        c.enabled = True
'                    Case "F"
'                        c.enabled = False
'                End Select
'            Next
'        Case Else
'             s.StampType = C_STAMP_MITOME_FILE
'            s.Text = rlxGetFullpathFromFileName(txtFile.Text)
'            For Each c In Controls
'                Select Case c.Tag
'                    Case "N"
'                        c.enabled = False
'                    Case "F"
'                        c.enabled = True
'                End Select
'            Next
'    End Select
'
'    s.Font = cmbFont.Text
'
'    Select Case True
'        Case optLineSingle.Value
'            s.Line = C_STAMP_LINE_SINGLE
'        Case optLineDouble.Value
'            s.Line = C_STAMP_LINE_DOUBLE
'        Case Else
'            s.Line = C_STAMP_LINE_BOLD
'    End Select
'
'    Dim lngSize As Double
'    Select Case True
'        Case optLineSingle.Value, optLineBold.Value
'            lngSize = ThisWorkbook.Worksheets("stampEx").Shapes("shpMitome").Width
'
'        Case optLineDouble.Value
'            lngSize = ThisWorkbook.Worksheets("stampEx").Shapes("shpMitome").Width * 0.8
'
'    End Select
'    ThisWorkbook.Worksheets("stampEx").Shapes("shpMitome").Height = lngSize
'
'    s.Color = getHexColor(lblColor.BackColor)
'    s.Size = txtSize.Text
'    s.FilePath = txtFile.Text
'    s.LineSize = txtLineSize.Text
'    s.Round = txtRound.Text
'
'    Select Case True
'        Case optVertical.Value
'            s.Rotate = C_STAMP_ROTATE_VERTICAL
'        Case optHolizontal.Value
'            s.Rotate = C_STAMP_ROTATE_HOLIZONTAL
'    End Select
'
'    '|fffd||48f|W|fffd||fffd||fffd||282||fffd||fffd||fffd||fffd|X|fffd|g|fffd||250||752||fffd|
'    Dim i As Long
'
'    i = lstStamp.ListIndex
'    If i = -1 Then
'        Exit Sub
'    End If
'
'    mblnRefresh = True
'
'    Dim strBuf As String
'    Dim varBuf() As Variant
'
'    ReDim varBuf(C_Text To C_Rotate)
'
'    varBuf(C_StampType) = s.StampType
'    varBuf(C_Text) = s.Text
'    varBuf(C_File) = s.FilePath
'    varBuf(C_Color) = s.Color
'    varBuf(C_Size) = s.Size
'    varBuf(C_Line) = s.Line
'    varBuf(C_Font) = s.Font
'    varBuf(C_LineSize) = s.LineSize
'    varBuf(C_Round) = s.Round
'    varBuf(C_Rotate) = s.Rotate
'
'    strBuf = Join(varBuf, vbTab)
'
'    lstStamp.List(i, C_Text) = s.Text
'    lstStamp.List(i, C_DATA) = strBuf
'
'    mblnRefresh = False
'
'    If s.StampType = C_STAMP_MITOME_NORMAL Then
'
'        Call editStampMitome(s, xlBitmap, lngHeight, lngWidth)
'
'    Else
'        imgPreview.Picture = LoadPicture("")
'
'        '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||202||fffd||fffd||a347||fffd|A
'        If Not rlxIsFileExists(txtFile.Text) Then
'           Exit Sub
'        End If
'
'        With ActiveSheet.Pictures.Insert(s.FilePath)
'            lngWidth = .Width
'            lngHeight = .Height
'            .CopyPicture
'            .Delete
'        End With
'    End If
'
'    With ThisWorkbook.Worksheets("stampEx").ChartObjects.Add(0, 0, lngWidth, lngHeight).Chart
'
'        .Paste
'        .ChartArea.Border.LineStyle = 0
'        .Export strPath, "JPG"
'
'        .Parent.Delete
'
'    End With
'
'    imgPreview.Picture = LoadPicture(strPath)
'
'End Sub
'Private Sub cmbFont_Click()
'    If cmbFont.ListIndex = -1 Then
'    Else
'        dispPreview
'    End If
'End Sub
'
'Private Sub cmdCancel_Click()
'    Unload Me
'End Sub
'
''------------------------------------------------------------------------------------------------------------------------
'' |fffd|I|fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||248||693||fffd|
''------------------------------------------------------------------------------------------------------------------------
'Private Sub cmdUp_Click()
'    mblnRefresh = True
'     Call moveList(C_UP)
'    mblnRefresh = False
'End Sub
''------------------------------------------------------------------------------------------------------------------------
'' |fffd|I|fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd||248||693||fffd|
''------------------------------------------------------------------------------------------------------------------------
'Private Sub cmdDown_Click()
'    mblnRefresh = True
'     Call moveList(C_DOWN)
'    mblnRefresh = False
'End Sub
''------------------------------------------------------------------------------------------------------------------------
'' |fffd||693||fffd||fffd||fffd||fffd||fffd|
''------------------------------------------------------------------------------------------------------------------------
'Private Sub moveList(ByVal lngMode As Long)
'
'    Dim lngCnt As Long
'    Dim lngCmp As Long
'
'    Dim varTmp As Variant
'
'    Dim lngStart As Long
'    Dim lngEnd As Long
'    Dim lngInc As Long
'
'    '|fffd|P|fffd||82||202||fffd|s|fffd|v
'    If lstStamp.ListCount <= 1 Then
'        Exit Sub
'    End If
'
'    Select Case lngMode
'        Case C_UP
'            lngStart = 0
'            lngEnd = lstStamp.ListCount - 1
'            lngInc = 1
'        Case C_DOWN
'            lngStart = lstStamp.ListCount - 1
'            lngEnd = 0
'            lngInc = -1
'    End Select
'
'    For lngCnt = lngStart To lngEnd Step lngInc
'
'        If lstStamp.Selected(lngCnt) Then
'            '|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd|s|fffd||fffd||fffd||fffd||fffd||142||24a|J|fffd|n|fffd|s|fffd||30f||a347||fffd||693||fffd||fffd|s|fffd||fffd|
'            If lngCnt = lngStart Then
'                Exit For
'            End If
'
'            lngCmp = lngCnt + lngInc * -1
'
'            Dim i As Long
'            For i = C_Text To C_DATA
'                varTmp = lstStamp.List(lngCnt, i)
'                lstStamp.List(lngCnt, i) = lstStamp.List(lngCmp, i)
'                lstStamp.List(lngCmp, i) = varTmp
'            Next
'
'            lstStamp.Selected(lngCnt) = False
'            lstStamp.Selected(lngCnt + lngInc * -1) = True
'        End If
'
'    Next
'
'End Sub
'
'
'Private Sub cmdFile_Click()
'   Dim strFile As String
'
'
'    strFile = Application.GetOpenFilename("|fffd|t|fffd|@|fffd|C|fffd||fffd|(*.*),(*.*)", , "|fffd||645c||fffd|t|fffd|@|fffd|C|fffd||fffd|", , False)
'    If strFile = "False" Then
'        '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd|w|fffd||80b3||fffd||fffd||202||fffd||fffd||fffd||fffd||fffd||fffd||a347|
'        Exit Sub
'    End If
'
'    txtFile.Text = strFile
'
'End Sub
'
'Private Sub cmdOK_Click()
'
'    Dim s As StampMitome
'    Dim col As Collection
'    Dim i As Long
'
'    Set col = New Collection
'    '|fffd||752||fffd||fffd||fffd||64fe|
'
'    For i = 0 To lstStamp.ListCount - 1
'
'        Set s = New StampMitome
'
'        Dim varBuf As Variant
'        varBuf = Split(lstStamp.List(i, C_DATA), vbTab)
'
'        s.StampType = varBuf(C_StampType)
'        s.Text = varBuf(C_Text)
'        s.Font = varBuf(C_Font)
'        s.Color = varBuf(C_Color)
'        s.Size = varBuf(C_Size)
'        s.Line = varBuf(C_Line)
'        s.FilePath = varBuf(C_File)
'        s.LineSize = varBuf(C_LineSize)
'        s.Round = varBuf(C_Round)
'        s.Rotate = varBuf(C_Rotate)
'
'        If IsNumeric(s.Size) Then
'        Else
'            MsgBox "|fffd||fffd||fffd||242||350||fffd||fffd|l|fffd||fffd||fffd||153||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation + vbOKOnly, C_TITLE
'            lstStamp.Selected(i) = True
'            txtSize.SetFocus
'            Exit Sub
'        End If
'
'        If CDbl(s.Size) < 0 Then
'            MsgBox "|fffd||fffd||fffd||342|O|fffd||20f||fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation + vbOKOnly, C_TITLE
'            lstStamp.Selected(i) = True
'            txtSize.SetFocus
'            Exit Sub
'        End If
'
'        If IsNumeric(s.LineSize) Then
'        Else
'            MsgBox "|fffd|O|fffd|g|fffd||242||350||fffd||fffd|l|fffd||fffd||fffd||153||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation + vbOKOnly, C_TITLE
'            lstStamp.Selected(i) = True
'            txtLineSize.SetFocus
'            Exit Sub
'        End If
'
'        If CDbl(s.LineSize) < 0 Then
'            MsgBox "|fffd|O|fffd|g|fffd||342|O|fffd||20f||fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation + vbOKOnly, C_TITLE
'            lstStamp.Selected(i) = True
'            txtLineSize.SetFocus
'            Exit Sub
'        End If
'
'        If IsNumeric(s.Round) Then
'        Else
'            MsgBox "|fffd|p|fffd||6c2||242||350||fffd||fffd|l|fffd||fffd||fffd||153||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation + vbOKOnly, C_TITLE
'            lstStamp.Selected(i) = True
'            txtRound.SetFocus
'            Exit Sub
'        End If
'
'        If CDbl(s.Round) < 0 Then
'            MsgBox "|fffd|p|fffd||6c2||fffd|0.00|fffd|`0.50|fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation + vbOKOnly, C_TITLE
'            lstStamp.Selected(i) = True
'            txtRound.SetFocus
'            Exit Sub
'        End If
'
'        '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||311||fffd||fffd||743|`|fffd|F|fffd|b|fffd|N
'        If s.StampType = C_STAMP_MITOME_FILE Then
'            If Not rlxIsFileExists(s.FilePath) Then
'                MsgBox "|fffd||645c||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd||fffd|B", vbExclamation + vbOKOnly, C_TITLE
'                lstStamp.Selected(i) = True
'                txtFile.SetFocus
'                Exit Sub
'            End If
'        End If
'
'        col.Add s
'
'        Set s = Nothing
'
'    Next
'
'    '|fffd|v|fffd||fffd||fffd|p|fffd|e|fffd|B|fffd||6d1||fffd|
'    setPropertyMitome col
'
'    Set col = Nothing
'
'    '|fffd||fffd||fffd|{|fffd||fffd||fffd||303||fffd||fffd|t|fffd||fffd||fffd|b|fffd|V|fffd||fffd|
'    Call RefreshRibbon
'
'    On Error GoTo 0
'
'    mResult = vbOK
'    Unload Me
'
'End Sub
'
'
'
'
'Private Sub optColorBlack_Click()
'    dispPreview
'End Sub
'
'Private Sub optColorRed_Click()
'    dispPreview
'
'End Sub
'
'
'
'Private Sub lblColor_Click()
'
'    Dim lngColor As Long
'    Dim result As VbMsgBoxResult
'
'    lngColor = lblColor.BackColor
'
'    result = frmColor.Start(lngColor)
'
'    If result = vbOK Then
'        lblColor.BackColor = lngColor
'        dispPreview
'    End If
'
'End Sub
'
'Private Sub lstStamp_Change()
'
'    Dim i As Long
'
'    If mblnRefresh Then
'        Exit Sub
'    End If
'
'    mblnRefresh = True
'
'    i = lstStamp.ListIndex
'    If i = -1 Then
'        Exit Sub
'    End If
'
'    Dim varBuf As Variant
'
'    varBuf = Split(lstStamp.List(i, C_DATA), vbTab)
'
'    Select Case varBuf(C_StampType)
'        Case C_STAMP_MITOME_NORMAL
'            optNormal.Value = True
'            txtName.Text = varBuf(C_Text)
'        Case Else
'            optFile.Value = True
'            txtName.Text = ""
'    End Select
'
'    Select Case varBuf(C_Line)
'        Case C_STAMP_LINE_SINGLE
'            optLineSingle.Value = True
'        Case C_STAMP_LINE_DOUBLE
'            optLineDouble.Value = True
'        Case Else
'            optLineBold.Value = True
'    End Select
'
'
'    Dim lngColor As Long
'    lngColor = getLongColor(varBuf(C_Color))
'    lblColor.BackColor = lngColor
'
'    txtSize.Text = varBuf(C_Size)
'    txtFile.Text = varBuf(C_File)
'    txtLineSize.Text = varBuf(C_LineSize)
'    txtRound.Text = varBuf(C_Round)
'
'    Select Case varBuf(C_Rotate)
'        Case C_STAMP_ROTATE_HOLIZONTAL
'            optHolizontal.Value = True
'        Case C_STAMP_ROTATE_VERTICAL
'            optVertical.Value = True
'    End Select
'
'    Dim strFont As String
'    Dim pos As Long
'
'    strFont = varBuf(C_Font)
'
'    For i = 0 To cmbFont.ListCount - 1
'        If strFont = cmbFont.List(i) Then
'            pos = i
'        End If
'    Next i
'    cmbFont.ListIndex = pos
'
'    mblnRefresh = False
'
'    dispPreview
'
'End Sub
'
'Private Sub optFile_Change()
'    dispPreview
'End Sub
'
'Private Sub optHolizontal_Click()
'    dispPreview
'End Sub
'
'Private Sub optLineBold_Change()
'    dispPreview
'End Sub
'
'
'Private Sub optLineDouble_Click()
'    dispPreview
'End Sub
'
'Private Sub optLineSingle_Click()
'    dispPreview
'End Sub
'Private Sub optNormal_Change()
'    dispPreview
'End Sub
'
'Private Sub optVertical_Click()
'    dispPreview
'End Sub
'
'Private Sub spnLine_SpinUp()
'    txtLineSize.Text = spinUpSize(txtLineSize.Text)
'End Sub
'
'Private Sub spnLine_Spindown()
'    txtLineSize.Text = spinDownSize(txtLineSize.Text)
'End Sub
'
'Private Sub spnRound_SpinDown()
'    txtRound.Text = spinDownRound(txtRound.Text)
'End Sub
'
'Private Sub spnRound_SpinUp()
'    txtRound.Text = spinUpRound(txtRound.Text)
'End Sub
'
'Private Sub spnSize_SpinDown()
'    txtSize.Text = spinDown(txtSize.Text)
'End Sub
'
'Private Sub spnSize_SpinUp()
'    txtSize.Text = spinUp(txtSize.Text)
'End Sub
'
'Private Sub txtFile_Change()
'    dispPreview
'End Sub
'
'Private Sub txtLineSize_Change()
'    dispPreview
'End Sub
'
'Private Sub txtName_Change()
'
'    dispPreview
'
'End Sub
'
'Private Sub txtName_Enter()
'
'    dispPreview
'
'End Sub
'
'Private Sub txtRound_Change()
'    dispPreview
'End Sub
'
'Private Sub txtSize_Change()
'    dispPreview
'End Sub
'
'Private Sub UserForm_Initialize()
'
'    Dim s As StampMitome
'    Dim col As Collection
'    Dim i As Long
'
'    Dim strBuf As String
'    Dim varBuf() As Variant
'
'    ReDim varBuf(C_Text To C_Rotate)
'
'    '|fffd||752||fffd||fffd||fffd||64fe|
'    Set col = getPropertyMitome()
'
'    For i = 1 To col.count
'
'        Set s = col(i)
'
'        varBuf(C_StampType) = s.StampType
'        varBuf(C_Text) = s.Text
'        varBuf(C_Font) = s.Font
'        varBuf(C_Color) = s.Color
'        varBuf(C_Size) = s.Size
'        varBuf(C_Line) = s.Line
'        varBuf(C_File) = s.FilePath
'        varBuf(C_LineSize) = s.LineSize
'        varBuf(C_Round) = s.Round
'        varBuf(C_Rotate) = s.Rotate
'
'        strBuf = Join(varBuf, vbTab)
'
'        lstStamp.AddItem ""
'        lstStamp.List(i - 1, C_Text) = s.Text
'        lstStamp.List(i - 1, C_DATA) = strBuf
'
'    Next
'
'    ActiveCell.Select
'    With Application.CommandBars("Formatting").Controls(1)
'        For i = 1 To .ListCount
'            cmbFont.AddItem .List(i)
'        Next i
'    End With
'
'
'    If col.count > 0 Then
'        lstStamp.Selected(0) = True
'    Else
'
'        mblnRefresh = True
'
'        txtName.Text = ""
'        txtFile.Text = ""
'        cmbFont.Text = "|fffd|l|fffd|r |fffd|S|fffd|V|fffd|b|fffd|N"
'        optLineSingle.Value = True
'        optNormal.Value = True
'        txtSize.Text = "10.5"
'        lblColor.BackColor = vbRed
'        txtLineSize.Text = "10"
'        txtRound.Text = "0.50"
'        optVertical.Value = True
'
'        mblnRefresh = False
'
'    End If
'
'
'End Sub
'Private Function spinUp(ByVal vntValue As Variant) As Variant
'
'    Dim lngValue As Variant
'
'    lngValue = Val(vntValue)
'    lngValue = lngValue + 0.5
'
'    spinUp = lngValue
'
'End Function
'
'Private Function spinDown(ByVal vntValue As Variant) As Variant
'
'    Dim lngValue As Variant
'
'    lngValue = Val(vntValue)
'    lngValue = lngValue - 0.5
'    If lngValue < 10.5 Then
'        lngValue = 10.5
'    End If
'    spinDown = lngValue
'
'End Function
'
'Private Sub cmdAdd_Click()
'
'    Dim i As Long
'    Dim strBuf As String
'    Dim varBuf() As Variant
'
'    ReDim varBuf(C_Text To C_Rotate)
'
'    i = lstStamp.ListCount
'
'
'    Select Case True
'        Case optNormal.Value
'           varBuf(C_StampType) = C_STAMP_MITOME_NORMAL
'        Case Else
'            varBuf(C_StampType) = C_STAMP_MITOME_FILE
'    End Select
'
'    varBuf(C_Text) = txtName.Text
'
'    varBuf(C_Color) = getHexColor(lblColor.BackColor)
'
'    varBuf(C_Size) = txtSize.Text
'
'    Select Case True
'        Case optLineSingle.Value
'            varBuf(C_Line) = C_STAMP_LINE_SINGLE
'        Case optLineDouble.Value
'            varBuf(C_Line) = C_STAMP_LINE_DOUBLE
'        Case Else
'            varBuf(C_Line) = C_STAMP_LINE_BOLD
'    End Select
'
'    varBuf(C_Font) = cmbFont.Text
'    varBuf(C_File) = txtFile.Text
'
'    varBuf(C_LineSize) = txtLineSize.Text
'    varBuf(C_Round) = txtRound.Text
'
'
'    strBuf = Join(varBuf, vbTab)
'
'    lstStamp.AddItem ""
'    lstStamp.List(i, C_Text) = txtName.Text
'    lstStamp.List(i, C_DATA) = strBuf
'
'    lstStamp.Selected(i) = True
'
'End Sub
'
'
'Private Sub cmdDel_Click()
'    Dim i As Long
'
'    For i = 0 To lstStamp.ListCount
'
'        If lstStamp.Selected(i) Then
'            lstStamp.RemoveItem i
'            Exit Sub
'        End If
'
'    Next
'End Sub
'
'Private Function spinUpRound(ByVal vntValue As Variant) As Variant
'
'    Dim lngValue As Variant
'
'    lngValue = Val(vntValue)
'    lngValue = lngValue + 0.01
'    If lngValue > 0.5 Then
'        lngValue = 0.5
'    End If
'    spinUpRound = Format(lngValue, "0.00")
'
'End Function
'
'Private Function spinDownRound(ByVal vntValue As Variant) As Variant
'
'    Dim lngValue As Variant
'
'    lngValue = Val(vntValue)
'    lngValue = lngValue - 0.01
'    If lngValue < 0 Then
'        lngValue = 0
'    End If
'    spinDownRound = Format(lngValue, "0.00")
'
'End Function
'Private Function spinUpSize(ByVal vntValue As Variant) As Variant
'
'    Dim lngValue As Variant
'
'    lngValue = Val(vntValue)
'    lngValue = lngValue + 1
'
'    spinUpSize = Format(lngValue, "0")
'
'End Function
'
'Private Function spinDownSize(ByVal vntValue As Variant) As Variant
'
'    Dim lngValue As Variant
'
'    lngValue = Val(vntValue)
'    lngValue = lngValue - 1
'    If lngValue < 0 Then
'        lngValue = 0
'    End If
'    spinDownSize = Format(lngValue, "0")
'
'End Function
Private Sub cmdHelp_Click()

    If Val(Application.Version) >= C_EXCEL_VERSION_2013 Then
    
        If MsgBox("|fffd|C|fffd||fffd||fffd|^|fffd|[|fffd|l|fffd|b|fffd|g|fffd||250||691||fffd||fffd||fffd||fffd||702||fffd||fffd|B|fffd||fffd||b0b5||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|H", vbOKCancel + vbQuestion, C_TITLE) <> vbOK Then
            Exit Sub
        End If
        
        Dim WSh As Object
        
        Set WSh = CreateObject("WScript.Shell")
        
        Call WSh.Run(C_STAMP_URL)
        
        Set WSh = Nothing
    
    Else
        frmHelp.Start "format"
    End If
    
End Sub
Attribute VB_Name = "frmSheetManager"
Attribute VB_Base = "0{2FE39985-63A9-4D04-ACD3-24B9785AC27F}{463CFC51-885B-4627-BAD3-C84863B3BEE9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit
Private Const C_SHEET_NO As Long = 0
Private Const C_SHEET_STATUS As Long = 1
Private Const C_SHEET_DSP_NAME As Long = 2
Private Const C_SHEET_NEW_NAME As Long = 3
Private Const C_SHEET_OLD_NAME As Long = 4
Private Const C_SHEET_OLD_STATUS As Long = 5
Private Const C_SHEET_OLD_POS As Long = 6

Private Const C_SORT_ASC As Long = 0
Private Const C_SORT_DESC As Long = 1

Private Const C_UP As Long = 1
Private Const C_DOWN As Long = 2
'Private Const C_DEL As Long = 3

Private Const C_HIDE As String = " |fffd||"
Private Const C_SHOW As String = " |fffd||fffd|"
Private Const C_DEL As String = "|fffd||d3dc|"

Private mBook As Workbook






Private Sub cmdPrint_Click()

    Dim lngCnt As Long
    Dim strSheets As String
    Dim r As Range

    strSheets = ""
    For lngCnt = 0 To lstSheet.ListCount - 1

        If lstSheet.Selected(lngCnt) And lstSheet.List(lngCnt, C_SHEET_OLD_STATUS) = C_SHOW Then

            If strSheets = "" Then
                strSheets = lstSheet.List(lngCnt, C_SHEET_OLD_NAME)
            Else
                strSheets = strSheets & vbTab & lstSheet.List(lngCnt, C_SHEET_OLD_NAME)
            End If

        End If
    Next

    If strSheets = "" Then
    Else
        Me.Hide
        mBook.Sheets(Split(strSheets, vbTab)).PrintPreview
        Me.Show
    End If

    
End Sub
Private Sub cmdSaveBook_Click()

    Dim lngCnt As Long
    Dim strSheets As String
    Dim r As Range
    Dim b As Workbook

    strSheets = ""
    For lngCnt = 0 To lstSheet.ListCount - 1

        If lstSheet.Selected(lngCnt) Then
            If lstSheet.List(lngCnt, C_SHEET_OLD_STATUS) = C_SHOW Then
    
                If strSheets = "" Then
                    strSheets = lstSheet.List(lngCnt, C_SHEET_OLD_NAME)
                Else
                    strSheets = strSheets & vbTab & lstSheet.List(lngCnt, C_SHEET_OLD_NAME)
                End If
    
            Else
                MsgBox "|fffd|\|fffd||fffd||fffd|V|fffd|[|fffd|g|fffd||20a|O|fffd||355||6d1||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
                Exit Sub
            End If
        End If
    Next

    If strSheets = "" Then
    Else
        Dim o As Object
        Dim vntFileName As Variant
        
        vntFileName = Application.GetSaveAsFilename(InitialFileName:="", filefilter:="Excel |fffd|u|fffd|b|fffd|N(*.xlsx),*.xlsx,Excel |fffd|}|fffd|N|fffd||fffd||fffd|L|fffd||fffd||fffd|u|fffd|b|fffd|N(*.xlsm),*.xlsm,Excel 97-2003|fffd|u|fffd|b|fffd|N(*.xls),*.xls", Title:="|fffd|u|fffd|b|fffd|N|fffd||315||6d1||fffd|")
        
        If vntFileName <> False Then
        
            For Each b In Workbooks
                If UCase(b.name) = UCase(rlxGetFullpathFromFileName(vntFileName)) Then
                    MsgBox "|fffd||fffd||fffd||74a|J|fffd||fffd||fffd||102||fffd||fffd||fffd|u|fffd|b|fffd|N|fffd||193||fffd||fffd||fffd||fffd||fffd||fffd|O|fffd||34e|w|fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
                    Exit Sub
                End If
            Next
        
            Application.DisplayAlerts = False
            
            ActiveWorkbook.Sheets(Split(strSheets, vbTab)).Copy
            
            'ActiveWorkbook.Windows(1).SelectedSheets.Copy
            Set b = ActiveWorkbook
            Select Case LCase(Mid$(vntFileName, InStr(vntFileName, ".") + 1))
                Case "xls"
                    b.SaveAs filename:=vntFileName, FileFormat:=xlExcel8, Local:=True
                Case "xlsm"
                    b.SaveAs filename:=vntFileName, FileFormat:=xlOpenXMLWorkbookMacroEnabled, Local:=True
                Case Else
                    b.SaveAs filename:=vntFileName, Local:=True
            End Select
            b.Close
            Set b = Nothing
            Application.DisplayAlerts = True
            MsgBox "|fffd||6d1||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE
        End If
    End If

End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
'------------------------------------------------------------------------------------------------------------------------
Private Sub UserForm_Initialize()

    Dim i As Long
    Dim Sh As Object
    Set mBook = ActiveWorkbook
    Dim blnSw As Boolean
    
    blnSw = False
    Call refreshList
    
    For i = 0 To lstSheet.ListCount - 1

        For Each Sh In mBook.Windows(1).SelectedSheets
            If lstSheet.List(i, C_SHEET_DSP_NAME) = Sh.name Then
                If blnSw = False Then
                    lstSheet.TopIndex = i
                    blnSw = True
                End If
                lstSheet.Selected(i) = True
            End If
        Next
    Next

End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd|t|fffd||fffd||fffd|b|fffd|V|fffd||fffd||fffd||fffd||fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub refreshList()

    Dim WS As Object
    Dim lngCount As Long

    lngCount = 0
    lstSheet.Clear
    
    For Each WS In mBook.Sheets
        
        Dim strStatus As String
        If WS.visible = xlSheetVisible Then
            strStatus = C_SHOW
        Else
            strStatus = C_HIDE
        End If
        
        lstSheet.AddItem ""
        lstSheet.List(lngCount, C_SHEET_NO) = Right("   " & lngCount + 1, 3)
        lstSheet.List(lngCount, C_SHEET_STATUS) = strStatus
        lstSheet.List(lngCount, C_SHEET_DSP_NAME) = WS.name
        lstSheet.List(lngCount, C_SHEET_NEW_NAME) = WS.name
        lstSheet.List(lngCount, C_SHEET_OLD_NAME) = WS.name
        lstSheet.List(lngCount, C_SHEET_OLD_STATUS) = strStatus
        lstSheet.List(lngCount, C_SHEET_OLD_POS) = lngCount
        lngCount = lngCount + 1
    
    Next

End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd|X|fffd|g|fffd||3cd|X|fffd|C|fffd|x|fffd||fffd||fffd|g
'------------------------------------------------------------------------------------------------------------------------
Private Sub lstSheet_Change()

    Dim lngCnt As Long
    Dim strSheets As String
    
    For lngCnt = 0 To lstSheet.ListCount - 1
    
        If lstSheet.Selected(lngCnt) Then
            
            txtSheetName.Text = lstSheet.List(lngCnt, C_SHEET_NEW_NAME)
            Exit For
        
        End If
    Next

End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd||82||fffd||fffd||fffd|{|fffd|^|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdCancel_Click()
    Unload Me
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd|{|fffd|^|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdSelect_Click()

    Dim lngCnt As Long
    Dim strSheets As String
    Dim r As Range

    strSheets = ""
    For lngCnt = 0 To lstSheet.ListCount - 1

        If lstSheet.Selected(lngCnt) And lstSheet.List(lngCnt, C_SHEET_OLD_STATUS) = C_SHOW Then

            If strSheets = "" Then
                strSheets = lstSheet.List(lngCnt, C_SHEET_OLD_NAME)
            Else
                strSheets = strSheets & vbTab & lstSheet.List(lngCnt, C_SHEET_OLD_NAME)
            End If

        End If
    Next

    If strSheets = "" Then
        MsgBox "|fffd|I|fffd||fffd||fffd||142||fffd||fffd||fffd|V|fffd|[|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
        Exit Sub
    End If

    mBook.Sheets(Split(strSheets, vbTab)).Select
    
    Dim lngPos As Long
    Dim i As Long
    
    For i = 1 To ActiveWindow.SelectedSheets(1).index
            
        If mBook.Sheets(i).visible = xlSheetVisible Then
            lngPos = lngPos + 1
        End If
    
    Next
    
    '|fffd||14f||fffd||fffd||248||693||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|V|fffd|[|fffd|g|fffd||fffd||fffd||693||fffd||fffd||fffd||fffd||fffd|B
    ActiveWindow.ScrollWorkbookTabs Position:=xlFirst
    ActiveWindow.ScrollWorkbookTabs Sheets:=lngPos - 1
    Unload Me

End Sub
Private Sub lstSheet_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call cmdSelect_Click
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd|V|fffd|[|fffd|g|fffd||fffd||fffd||3cd|X|fffd|{|fffd|^|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub btnChange_Click()

    Dim strBuf As String
    Dim lngLen As Long
    Dim i As Long

    Select Case Len(txtSheetName.Text)
        Case 1 To 31
        Case Else
            Call errorMsg
            Exit Sub
    End Select

    strBuf = ":\/?*[]|fffd|F|fffd||fffd||fffd|^|fffd|H|fffd||fffd||fffd|m|fffd|n"
    lngLen = Len(strBuf)

    For i = 1 To lngLen

        If InStr(txtSheetName.Text, Mid$(strBuf, i, 1)) > 0 Then
            Call errorMsg
            Exit Sub
        End If

    Next

    For i = 0 To lstSheet.ListCount - 1
    
        If lstSheet.Selected(i) Then
            If lstSheet.List(i, C_SHEET_STATUS) = C_DEL Then
                MsgBox "|fffd||d3dc||fffd|\|fffd||fffd||303|V|fffd|[|fffd|g|fffd||fffd||fffd||30f|C|fffd||fffd||fffd||342||142||fffd||fffd||702||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
                Exit Sub
            End If
        End If
        
'        If lstSheet.List(i, C_SHEET_NEW_NAME) = txtSheetName.Text Then
'            MsgBox "|fffd|V|fffd|[|fffd|g|fffd||316||fffd||fffd|O|fffd||fffd||fffd||642||fffd||fffd||303|V|fffd|[|fffd|g|fffd|AVisual Basic |fffd||14e|Q|fffd||182||fffd||fffd||fffd||fffd|I|fffd|u|fffd|W|fffd|F|fffd|N|fffd|g |fffd||fffd||fffd|C|fffd|u|fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||343||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||193||fffd||fffd||fffd||fffd||fffd||fffd|O|fffd||255||3cd|X|fffd||fffd||fffd||90b1||fffd||182||342||142||fffd||fffd||702||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
'            Exit Sub
'        End If
        
    Next

    Dim lngCnt As Long
    
    For lngCnt = 0 To lstSheet.ListCount - 1
    
        If lstSheet.Selected(lngCnt) Then
        
            lstSheet.List(lngCnt, C_SHEET_DSP_NAME) = txtSheetName.Text
            lstSheet.List(lngCnt, C_SHEET_NEW_NAME) = txtSheetName.Text
'            Exit For
        
        End If
    Next

End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd|b|fffd|Z|fffd|[|fffd|W|fffd|\|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub errorMsg()
    MsgBox "|fffd||fffd||fffd||342||fffd||fffd||a0bd||fffd|V|fffd|[|fffd|g|fffd||702||fffd||fffd||343|O|fffd||fffd||fffd|t|fffd||316||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B|fffd||fffd||fffd||313|_|fffd||fffd||fffd|m|fffd|F|fffd||fffd||fffd||10f|C|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B" & vbCrLf & vbCrLf & _
    "|fffd|E|fffd||fffd||fffd||355||fffd||fffd||fffd||fffd||fffd|31|fffd||fffd||fffd||fffd||fffd||213||fffd||fffd||142||fffd||fffd||90b1||fffd||fffd|" & vbCrLf & _
    "|fffd|E|fffd||fffd||fffd||30e|g|fffd|p|fffd||142||fffd||fffd||202||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||702||fffd||102||fffd||fffd||202||fffd||fffd||fffd||fffd||fffd|:|fffd|R|fffd||fffd||fffd||fffd|(:)|fffd|A|fffd|~|fffd|L|fffd||fffd|(\)|fffd|A|fffd|X|fffd||fffd||fffd|b|fffd|V|fffd||fffd|(/)|fffd|A|fffd|^|fffd||2544|(?)|fffd|A|fffd|A|fffd|X|fffd|^|fffd||fffd||fffd|X|fffd|N(*)|fffd|A|fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd||fffd|([)|fffd|A|fffd|E|fffd|p|fffd||fffd||fffd||fffd||fffd||fffd|(])" & vbCrLf & _
    "|fffd|E|fffd||fffd||fffd|O|fffd||fffd||fffd||d4482||142||202||fffd||fffd||fffd||fffd||fffd|", vbOKOnly + vbExclamation, C_TITLE

End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|\|fffd|[|fffd|g|fffd|{|fffd|^|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdAsc_Click()

    '|fffd||fffd||fffd||fffd||fffd|\|fffd|[|fffd|g
    sortList C_SORT_ASC

End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd|~|fffd||fffd||fffd|\|fffd|[|fffd|g|fffd|{|fffd|^|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdDesc_Click()
    
    '|fffd|~|fffd||fffd||fffd|\|fffd|[|fffd|g
    sortList C_SORT_DESC

End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd|\|fffd|[|fffd|g|fffd||fffd||fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub sortList(ByVal lngSort As Long)
    
    Dim lngCnt As Long
    Dim lngCmp As Long
    Dim strCmp1 As String
    Dim strCmp2 As String
    
    Dim varTmp As Variant

    Dim idx  As New Collection
    Dim cnt As Long
    

    '|fffd|P|fffd||82||202||fffd|\|fffd|[|fffd|g|fffd|s|fffd|v
    If lstSheet.ListCount <= 1 Then
        Exit Sub
    End If

    cnt = 0
    For lngCnt = 0 To lstSheet.ListCount - 1
        If lstSheet.Selected(lngCnt) Then
            cnt = cnt + 1
        End If
    Next

    If cnt > 1 Then
        For lngCnt = 0 To lstSheet.ListCount - 1
            If lstSheet.Selected(lngCnt) Then
                idx.Add lngCnt
            End If
        Next
    Else
        For lngCnt = 0 To lstSheet.ListCount - 1
            idx.Add lngCnt
        Next
    End If
    
'    For lngCnt = 0 To lstSheet.ListCount - 1 - 1
'
'        For lngCmp = lngCnt + 1 To lstSheet.ListCount - 1
'
'            If lngSort = C_SORT_ASC Then
'                strCmp1 = lstSheet.List(lngCnt, C_SHEET_NEW_NAME)
'                strCmp2 = lstSheet.List(lngCmp, C_SHEET_NEW_NAME)
'            Else
'                strCmp2 = lstSheet.List(lngCnt, C_SHEET_NEW_NAME)
'                strCmp1 = lstSheet.List(lngCmp, C_SHEET_NEW_NAME)
'            End If
'
'            If strCmp1 > strCmp2 Then
'                Dim i As Long
'                For i = C_SHEET_STATUS To C_SHEET_OLD_POS
'                    varTmp = lstSheet.List(lngCnt, i)
'                    lstSheet.List(lngCnt, i) = lstSheet.List(lngCmp, i)
'                    lstSheet.List(lngCmp, i) = varTmp
'                Next
'            End If
'        Next
'    Next

    For lngCnt = 1 To idx.count - 1
    
        For lngCmp = lngCnt + 1 To idx.count
                
            If lngSort = C_SORT_ASC Then
                strCmp1 = lstSheet.List(idx(lngCnt), C_SHEET_NEW_NAME)
                strCmp2 = lstSheet.List(idx(lngCmp), C_SHEET_NEW_NAME)
            Else
                strCmp2 = lstSheet.List(idx(lngCnt), C_SHEET_NEW_NAME)
                strCmp1 = lstSheet.List(idx(lngCmp), C_SHEET_NEW_NAME)
            End If
            
            If strCmp1 > strCmp2 Then
                Dim i As Long
                For i = C_SHEET_STATUS To C_SHEET_OLD_POS
                    varTmp = lstSheet.List(idx(lngCnt), i)
                    lstSheet.List(idx(lngCnt), i) = lstSheet.List(idx(lngCmp), i)
                    lstSheet.List(idx(lngCmp), i) = varTmp
                Next
            End If
        Next
    Next


End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd|\|fffd||fffd||fffd|{|fffd|^|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdShow_Click()

    Dim lngCnt As Long
    
    For lngCnt = 0 To lstSheet.ListCount - 1
    
        If lstSheet.Selected(lngCnt) Then
        
            lstSheet.List(lngCnt, C_SHEET_STATUS) = C_SHOW
        
        End If
    Next
    
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd|\|fffd||fffd||fffd|{|fffd|^|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdHide_Click()

    Dim lngCnt As Long
    
    For lngCnt = 0 To lstSheet.ListCount - 1
    
        If lstSheet.Selected(lngCnt) Then
        
            lstSheet.List(lngCnt, C_SHEET_STATUS) = C_HIDE
        
        End If
    Next

End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||248||693||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdUp_Click()
     Call moveList(C_UP)
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd||248||693||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdDown_Click()
     Call moveList(C_DOWN)
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd||693||fffd||fffd||fffd||fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub moveList(ByVal lngMode As Long)

    Dim lngCnt As Long
    Dim lngCmp As Long
    
    Dim varTmp As Variant

    Dim lngStart As Long
    Dim lngEnd As Long
    Dim lngInc As Long

    '|fffd|P|fffd||82||202||fffd|s|fffd|v
    If lstSheet.ListCount <= 1 Then
        Exit Sub
    End If

    Select Case lngMode
        Case C_UP
            lngStart = 0
            lngEnd = lstSheet.ListCount - 1
            lngInc = 1
        Case C_DOWN
            lngStart = lstSheet.ListCount - 1
            lngEnd = 0
            lngInc = -1
    End Select

    For lngCnt = lngStart To lngEnd Step lngInc
    
        If lstSheet.Selected(lngCnt) Then
            '|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd|s|fffd||fffd||fffd||fffd||fffd||142||24a|J|fffd|n|fffd|s|fffd||30f||a347||fffd||693||fffd||fffd|s|fffd||fffd|
            If lngCnt = lngStart Then
                Exit For
            End If
            
            lngCmp = lngCnt + lngInc * -1
            
            Dim i As Long
            For i = C_SHEET_STATUS To C_SHEET_OLD_POS
                varTmp = lstSheet.List(lngCnt, i)
                lstSheet.List(lngCnt, i) = lstSheet.List(lngCmp, i)
                lstSheet.List(lngCmp, i) = varTmp
            Next
            
            lstSheet.Selected(lngCnt) = False
            lstSheet.Selected(lngCnt + lngInc * -1) = True
        End If
    
    Next

End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd||d3dc||fffd|{|fffd|^|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdDel_Click()

    Dim lngCnt As Long
    Dim strBuf As String
    
    For lngCnt = 0 To lstSheet.ListCount - 1
    
        If lstSheet.Selected(lngCnt) Then
        
'            strBuf = "|fffd||fffd||d3dc||fffd||fffd|" & lstSheet.List(lngCnt, C_SHEET_OLD_NAME)
'            lstSheet.List(lngCnt, C_SHEET_DSP_NAME) = strBuf
'            lstSheet.List(lngCnt, C_SHEET_NEW_NAME) = lstSheet.List(lngCnt, C_SHEET_OLD_NAME)
'            lstSheet.List(lngCnt, C_SHEET_DEL) = C_DEL
            lstSheet.List(lngCnt, C_SHEET_STATUS) = C_DEL
        
        End If
    Next
    
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd||d3dc||fffd||fffd||fffd||fffd||fffd|{|fffd|^|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdUndo_Click()

    Dim lngCnt As Long
    Dim strBuf As String
    
    For lngCnt = 0 To lstSheet.ListCount - 1
    
        If lstSheet.List(lngCnt, C_SHEET_STATUS) = C_DEL Then
        
            strBuf = lstSheet.List(lngCnt, C_SHEET_OLD_NAME)
            lstSheet.List(lngCnt, C_SHEET_DSP_NAME) = strBuf
            lstSheet.List(lngCnt, C_SHEET_STATUS) = lstSheet.List(lngCnt, C_SHEET_OLD_STATUS)
        
        End If
    Next

End Sub
'------------------------------------------------------------------------------------------------------------------------
'|fffd||fffd||fffd||fffd||fffd||fffd||502||256||7c2||fffd||fffd|{|fffd|^|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdInitialize_Click()
    Call refreshList
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd||3cd|X|fffd||fffd||fffd|e|fffd||14f49|f|fffd|{|fffd|^|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdSubmit_Click()

    Const C_TEMP_NAME As String = "~~temp"

    Dim WS As Object
    Dim lngCnt As Long
    Dim lngCnt2 As Long
    Dim lngVisibleCount As Long
    Dim lngDeleteCount As Long

    Dim lngLast As Long

    lngVisibleCount = 0
    For lngCnt = 0 To lstSheet.ListCount - 1
    
        '|fffd||642||202||fffd||a347||fffd|A|fffd||fffd||fffd|X|fffd|g|fffd||10cc2||182||fffd||fffd|A|fffd||fffd||fffd||742||303|V|fffd|[|fffd|g|fffd||311|O|fffd||248||693||fffd||fffd|B
        If lstSheet.List(lngCnt, C_SHEET_STATUS) = C_HIDE Then
            lngVisibleCount = lngVisibleCount + 1
        End If
        
    Next
    
    If lngVisibleCount = lstSheet.ListCount Then
        MsgBox "|fffd||fffd||fffd||5c2||102||303|V|fffd|[|fffd|g|fffd||fffd||fffd|\|fffd||fffd||fffd||242||342||142||fffd||fffd||702||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
        Exit Sub
    End If
    
    lngDeleteCount = 0
    For lngCnt = 0 To lstSheet.ListCount - 1
    
        '|fffd||642||202||fffd||a347||fffd|A|fffd||fffd||fffd|X|fffd|g|fffd||10cc2||182||fffd||fffd|A|fffd||fffd||fffd||742||303|V|fffd|[|fffd|g|fffd||311|O|fffd||248||693||fffd||fffd|B
        If lstSheet.List(lngCnt, C_SHEET_STATUS) = C_DEL Then
            lngDeleteCount = lngDeleteCount + 1
        End If
        
    Next
    
    If lngDeleteCount = lstSheet.ListCount Then
        MsgBox "|fffd||fffd||fffd||5c2||102||303|V|fffd|[|fffd|g|fffd||fffd||fffd||d3dc||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
        Exit Sub
    End If
    
    For lngCnt = 0 To lstSheet.ListCount - 2
    
        For lngCnt2 = lngCnt + 1 To lstSheet.ListCount - 1
            If lstSheet.List(lngCnt, C_SHEET_NEW_NAME) = lstSheet.List(lngCnt2, C_SHEET_NEW_NAME) Then
                MsgBox "|fffd|V|fffd|[|fffd|g|fffd||316||fffd||fffd|O|fffd||fffd||fffd||642||fffd||fffd||303|V|fffd|[|fffd|g|fffd|AVisual Basic |fffd||14e|Q|fffd||182||fffd||fffd||fffd||fffd|I|fffd|u|fffd|W|fffd|F|fffd|N|fffd|g |fffd||fffd||fffd|C|fffd|u|fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||343||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||193||fffd||fffd||fffd||fffd||fffd||fffd|O|fffd||255||3cd|X|fffd||fffd||fffd||90b1||fffd||182||342||142||fffd||fffd||702||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
                Exit Sub
            End If
        Next
    Next
    
    
    If MsgBox("|fffd||48f|W|fffd||fffd||fffd|e|fffd||14f49|f|fffd||fffd||fffd||702||fffd||fffd|B|fffd||fffd||b0b5||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|H", vbOKCancel + vbQuestion, C_TITLE) <> vbOK Then
        Exit Sub
    End If
    

    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    lngLast = lstSheet.ListIndex
    
    Set WS = mBook.ActiveSheet
    '|fffd|V|fffd|[|fffd|g|fffd||315||fffd||fffd||44f||fffd||fffd||fffd||fffd|f
    For lngCnt = 0 To lstSheet.ListCount - 1
    
        '|fffd||fffd||fffd||302||fffd||fffd||fffd||fffd||fffd||fffd||202||727d||fffd||fffd||fffd||fffd||fffd||202||fffd|
        If mBook.Sheets(lngCnt + 1).name = lstSheet.List(lngCnt, C_SHEET_OLD_NAME) Then
        Else
            '|fffd||642||202||fffd||a347||fffd|A|fffd||fffd||fffd|X|fffd|g|fffd||10cc2||182||fffd||fffd|A|fffd||fffd||fffd||742||303|V|fffd|[|fffd|g|fffd||311|O|fffd||248||693||fffd||fffd|B
            mBook.Sheets(lstSheet.List(lngCnt, C_SHEET_OLD_NAME)).Move Before:=mBook.Sheets(lngCnt + 1)
        End If
        
    Next
    '|fffd||fffd||fffd||182||fffd||fffd||183|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||fffd||fffd||fffd||fffd||fffd||fffd|V|fffd|[|fffd|g|fffd||fffd|I|fffd||fffd|
    WS.Select
    
    '|fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||30f||fffd||fffd||502||24d|s|fffd||fffd||fffd|B|fffd|i|fffd|r|fffd||fffd||fffd||151|S|fffd||fffd|\|fffd||fffd||fffd||242||202||fffd||94|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||90bd||fffd||7c1|j
    For lngCnt = 0 To lstSheet.ListCount - 1
        
        '|fffd|\|fffd||fffd|
        Select Case lstSheet.List(lngCnt, C_SHEET_STATUS)
            Case C_SHOW
                mBook.Sheets(lstSheet.List(lngCnt, C_SHEET_OLD_NAME)).visible = xlSheetVisible
        End Select
        
    Next
    For lngCnt = 0 To lstSheet.ListCount - 1
        
        '|fffd||fffd|\|fffd||fffd|
        Select Case lstSheet.List(lngCnt, C_SHEET_STATUS)
            Case C_HIDE
                mBook.Sheets(lstSheet.List(lngCnt, C_SHEET_OLD_NAME)).visible = xlSheetHidden
        End Select
        
    Next
    
    For lngCnt = 0 To lstSheet.ListCount - 1
        Dim strOld As String
        Dim strNew As String
        Dim strDel As String
        
        '|fffd|V|fffd|[|fffd|g|fffd||fffd||fffd||3cd|X
        strNew = C_TEMP_NAME & lngCnt
        strOld = lstSheet.List(lngCnt, C_SHEET_OLD_NAME)
        
        If strNew <> strOld Then
            mBook.Sheets(strOld).name = strNew
        End If
        
    Next
    
    For lngCnt = 0 To lstSheet.ListCount - 1
        
        '|fffd|V|fffd|[|fffd|g|fffd||fffd||fffd||3cd|X
        strNew = lstSheet.List(lngCnt, C_SHEET_NEW_NAME)
        strOld = C_TEMP_NAME & lngCnt
        
        If strNew <> strOld Then
            mBook.Sheets(strOld).name = strNew
        End If
        
        '|fffd|V|fffd|[|fffd|g|fffd||30d||d3dc|
        If lstSheet.List(lngCnt, C_SHEET_STATUS) = C_DEL Then
            strDel = lstSheet.List(lngCnt, C_SHEET_OLD_NAME)
            mBook.Sheets(strDel).Delete
        End If
        
    Next
    
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    
    '|fffd||115|\|fffd||fffd|
    Call refreshList
    
    If lngLast > lstSheet.ListCount - 1 Then
        lngLast = lstSheet.ListCount - 1
    End If

    If lstSheet.ListCount > 0 Then
        lstSheet.Selected(lngLast) = True
    End If
End Sub

Attribute VB_Name = "frmSheetManagerEx"
Attribute VB_Base = "0{1C0DBC04-57B7-4FA6-873D-18420AC67971}{B89AEC26-8328-4C54-85F5-12165B01DF84}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Private Const C_SHEET_NO As Long = 0
Private Const C_SHEET_STATUS As Long = 1
Private Const C_SHEET_DSP_NAME As Long = 2
Private Const C_SHEET_NEW_NAME As Long = 3
Private Const C_SHEET_OLD_NAME As Long = 4
Private Const C_SHEET_OLD_STATUS As Long = 5
Private Const C_SHEET_OLD_POS As Long = 6

Private Const C_SORT_ASC As Long = 0
Private Const C_SORT_DESC As Long = 1

Private Const C_UP As Long = 1
Private Const C_DOWN As Long = 2
'Private Const C_DEL As Long = 3

Private Const C_HIDE As String = " |fffd||"
Private Const C_SHOW As String = " |fffd||fffd|"
Private Const C_DEL As String = "|fffd||d3dc|"

Private mBook As Workbook






Private Sub cmdPrint_Click()

    Dim lngCnt As Long
    Dim strSheets As String
    Dim r As Range

    strSheets = ""
    For lngCnt = 0 To lstSheet.ListCount - 1

        If lstSheet.Selected(lngCnt) And lstSheet.List(lngCnt, C_SHEET_OLD_STATUS) = C_SHOW Then

            If strSheets = "" Then
                strSheets = lstSheet.List(lngCnt, C_SHEET_OLD_NAME)
            Else
                strSheets = strSheets & vbTab & lstSheet.List(lngCnt, C_SHEET_OLD_NAME)
            End If

        End If
    Next

    If strSheets = "" Then
    Else
        Me.Hide
        mBook.Sheets(Split(strSheets, vbTab)).PrintPreview
        Me.Show
    End If

    
End Sub
Private Sub cmdSaveBook_Click()

    Dim lngCnt As Long
    Dim strSheets As String
    Dim r As Range
    Dim b As Workbook

    strSheets = ""
    For lngCnt = 0 To lstSheet.ListCount - 1

        If lstSheet.Selected(lngCnt) Then
            If lstSheet.List(lngCnt, C_SHEET_OLD_STATUS) = C_SHOW Then
    
                If strSheets = "" Then
                    strSheets = lstSheet.List(lngCnt, C_SHEET_OLD_NAME)
                Else
                    strSheets = strSheets & vbTab & lstSheet.List(lngCnt, C_SHEET_OLD_NAME)
                End If
    
            Else
                MsgBox "|fffd|\|fffd||fffd||fffd|V|fffd|[|fffd|g|fffd||20a|O|fffd||355||6d1||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
                Exit Sub
            End If
        End If
    Next

    If strSheets = "" Then
    Else
        Dim o As Object
        Dim vntFileName As Variant
        
        vntFileName = Application.GetSaveAsFilename(InitialFileName:="", filefilter:="Excel |fffd|u|fffd|b|fffd|N(*.xlsx),*.xlsx,Excel |fffd|}|fffd|N|fffd||fffd||fffd|L|fffd||fffd||fffd|u|fffd|b|fffd|N(*.xlsm),*.xlsm,Excel 97-2003|fffd|u|fffd|b|fffd|N(*.xls),*.xls", Title:="|fffd|u|fffd|b|fffd|N|fffd||315||6d1||fffd|")
        
        If vntFileName <> False Then
        
            For Each b In Workbooks
                If UCase(b.name) = UCase(rlxGetFullpathFromFileName(vntFileName)) Then
                    MsgBox "|fffd||fffd||fffd||74a|J|fffd||fffd||fffd||102||fffd||fffd||fffd|u|fffd|b|fffd|N|fffd||193||fffd||fffd||fffd||fffd||fffd||fffd|O|fffd||34e|w|fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
                    Exit Sub
                End If
            Next
        
            Application.DisplayAlerts = False
            
            ActiveWorkbook.Sheets(Split(strSheets, vbTab)).Copy
            
            'ActiveWorkbook.Windows(1).SelectedSheets.Copy
            Set b = ActiveWorkbook
            Select Case LCase(Mid$(vntFileName, InStr(vntFileName, ".") + 1))
                Case "xls"
                    b.SaveAs filename:=vntFileName, FileFormat:=xlExcel8, Local:=True
                Case "xlsm"
                    b.SaveAs filename:=vntFileName, FileFormat:=xlOpenXMLWorkbookMacroEnabled, Local:=True
                Case Else
                    b.SaveAs filename:=vntFileName, Local:=True
            End Select
            b.Close
            Set b = Nothing
            Application.DisplayAlerts = True
            MsgBox "|fffd||6d1||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE
        End If
    End If

End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd|C|fffd|x|fffd||fffd||fffd|g
'------------------------------------------------------------------------------------------------------------------------
Private Sub UserForm_Initialize()

    Dim i As Long
    Dim Sh As Object
    Set mBook = ActiveWorkbook
    Dim blnSw As Boolean
    
    blnSw = False
    Call refreshList
    
    For i = 0 To lstSheet.ListCount - 1

        For Each Sh In mBook.Windows(1).SelectedSheets
            If lstSheet.List(i, C_SHEET_DSP_NAME) = Sh.name Then
                If blnSw = False Then
                    lstSheet.TopIndex = i
                    blnSw = True
                End If
                lstSheet.Selected(i) = True
            End If
        Next
    Next

End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd|t|fffd||fffd||fffd|b|fffd|V|fffd||fffd||fffd||fffd||fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub refreshList()

    Dim WS As Object
    Dim lngCount As Long

    lngCount = 0
    lstSheet.Clear
    
    For Each WS In mBook.Sheets
        
        Dim strStatus As String
        If WS.visible = xlSheetVisible Then
            strStatus = C_SHOW
        Else
            strStatus = C_HIDE
        End If
        
        lstSheet.AddItem ""
        lstSheet.List(lngCount, C_SHEET_NO) = Right("   " & lngCount + 1, 3)
        lstSheet.List(lngCount, C_SHEET_STATUS) = strStatus
        lstSheet.List(lngCount, C_SHEET_DSP_NAME) = WS.name
        lstSheet.List(lngCount, C_SHEET_NEW_NAME) = WS.name
        lstSheet.List(lngCount, C_SHEET_OLD_NAME) = WS.name
        lstSheet.List(lngCount, C_SHEET_OLD_STATUS) = strStatus
        lstSheet.List(lngCount, C_SHEET_OLD_POS) = lngCount
        lngCount = lngCount + 1
    
    Next

End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd|X|fffd|g|fffd||3cd|X|fffd|C|fffd|x|fffd||fffd||fffd|g
'------------------------------------------------------------------------------------------------------------------------
Private Sub lstSheet_Change()

    Dim lngCnt As Long
    Dim strSheets As String
    
    For lngCnt = 0 To lstSheet.ListCount - 1
    
        If lstSheet.Selected(lngCnt) Then
            
            txtSheetName.Text = lstSheet.List(lngCnt, C_SHEET_NEW_NAME)
            Exit For
        
        End If
    Next

End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd||82||fffd||fffd||fffd|{|fffd|^|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdCancel_Click()
    Unload Me
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd|{|fffd|^|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdSelect_Click()

    Dim lngCnt As Long
    Dim strSheets As String
    Dim r As Range

    strSheets = ""
    For lngCnt = 0 To lstSheet.ListCount - 1

        If lstSheet.Selected(lngCnt) And lstSheet.List(lngCnt, C_SHEET_OLD_STATUS) = C_SHOW Then

            If strSheets = "" Then
                strSheets = lstSheet.List(lngCnt, C_SHEET_OLD_NAME)
            Else
                strSheets = strSheets & vbTab & lstSheet.List(lngCnt, C_SHEET_OLD_NAME)
            End If

        End If
    Next

    If strSheets = "" Then
        MsgBox "|fffd|I|fffd||fffd||fffd||142||fffd||fffd||fffd|V|fffd|[|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
        Exit Sub
    End If

    mBook.Sheets(Split(strSheets, vbTab)).Select
    
    Dim lngPos As Long
    Dim i As Long
    
    For i = 1 To ActiveWindow.SelectedSheets(1).index
            
        If mBook.Sheets(i).visible = xlSheetVisible Then
            lngPos = lngPos + 1
        End If
    
    Next
    
    '|fffd||14f||fffd||fffd||248||693||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|V|fffd|[|fffd|g|fffd||fffd||fffd||693||fffd||fffd||fffd||fffd||fffd|B
    ActiveWindow.ScrollWorkbookTabs Position:=xlFirst
    ActiveWindow.ScrollWorkbookTabs Sheets:=lngPos - 1
    Unload Me

End Sub
Private Sub lstSheet_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call cmdSelect_Click
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd|V|fffd|[|fffd|g|fffd||fffd||fffd||3cd|X|fffd|{|fffd|^|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub btnChange_Click()

    Dim strBuf As String
    Dim lngLen As Long
    Dim i As Long

    Select Case Len(txtSheetName.Text)
        Case 1 To 31
        Case Else
            Call errorMsg
            Exit Sub
    End Select

    strBuf = ":\/?*[]|fffd|F|fffd||fffd||fffd|^|fffd|H|fffd||fffd||fffd|m|fffd|n"
    lngLen = Len(strBuf)

    For i = 1 To lngLen

        If InStr(txtSheetName.Text, Mid$(strBuf, i, 1)) > 0 Then
            Call errorMsg
            Exit Sub
        End If

    Next

    For i = 0 To lstSheet.ListCount - 1
    
        If lstSheet.Selected(i) Then
            If lstSheet.List(i, C_SHEET_STATUS) = C_DEL Then
                MsgBox "|fffd||d3dc||fffd|\|fffd||fffd||303|V|fffd|[|fffd|g|fffd||fffd||fffd||30f|C|fffd||fffd||fffd||342||142||fffd||fffd||702||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
                Exit Sub
            End If
        End If
        
'        If lstSheet.List(i, C_SHEET_NEW_NAME) = txtSheetName.Text Then
'            MsgBox "|fffd|V|fffd|[|fffd|g|fffd||316||fffd||fffd|O|fffd||fffd||fffd||642||fffd||fffd||303|V|fffd|[|fffd|g|fffd|AVisual Basic |fffd||14e|Q|fffd||182||fffd||fffd||fffd||fffd|I|fffd|u|fffd|W|fffd|F|fffd|N|fffd|g |fffd||fffd||fffd|C|fffd|u|fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||343||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||193||fffd||fffd||fffd||fffd||fffd||fffd|O|fffd||255||3cd|X|fffd||fffd||fffd||90b1||fffd||182||342||142||fffd||fffd||702||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
'            Exit Sub
'        End If
        
    Next

    Dim lngCnt As Long
    
    For lngCnt = 0 To lstSheet.ListCount - 1
    
        If lstSheet.Selected(lngCnt) Then
        
            lstSheet.List(lngCnt, C_SHEET_DSP_NAME) = txtSheetName.Text
            lstSheet.List(lngCnt, C_SHEET_NEW_NAME) = txtSheetName.Text
'            Exit For
        
        End If
    Next

End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd|b|fffd|Z|fffd|[|fffd|W|fffd|\|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub errorMsg()
    MsgBox "|fffd||fffd||fffd||342||fffd||fffd||a0bd||fffd|V|fffd|[|fffd|g|fffd||702||fffd||fffd||343|O|fffd||fffd||fffd|t|fffd||316||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B|fffd||fffd||fffd||313|_|fffd||fffd||fffd|m|fffd|F|fffd||fffd||fffd||10f|C|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B" & vbCrLf & vbCrLf & _
    "|fffd|E|fffd||fffd||fffd||355||fffd||fffd||fffd||fffd||fffd|31|fffd||fffd||fffd||fffd||fffd||213||fffd||fffd||142||fffd||fffd||90b1||fffd||fffd|" & vbCrLf & _
    "|fffd|E|fffd||fffd||fffd||30e|g|fffd|p|fffd||142||fffd||fffd||202||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||702||fffd||102||fffd||fffd||202||fffd||fffd||fffd||fffd||fffd|:|fffd|R|fffd||fffd||fffd||fffd|(:)|fffd|A|fffd|~|fffd|L|fffd||fffd|(\)|fffd|A|fffd|X|fffd||fffd||fffd|b|fffd|V|fffd||fffd|(/)|fffd|A|fffd|^|fffd||2544|(?)|fffd|A|fffd|A|fffd|X|fffd|^|fffd||fffd||fffd|X|fffd|N(*)|fffd|A|fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd||fffd|([)|fffd|A|fffd|E|fffd|p|fffd||fffd||fffd||fffd||fffd||fffd|(])" & vbCrLf & _
    "|fffd|E|fffd||fffd||fffd|O|fffd||fffd||fffd||d4482||142||202||fffd||fffd||fffd||fffd||fffd|", vbOKOnly + vbExclamation, C_TITLE

End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd||fffd||fffd||fffd|\|fffd|[|fffd|g|fffd|{|fffd|^|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdAsc_Click()

    '|fffd||fffd||fffd||fffd||fffd|\|fffd|[|fffd|g
    sortList C_SORT_ASC

End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd|~|fffd||fffd||fffd|\|fffd|[|fffd|g|fffd|{|fffd|^|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdDesc_Click()
    
    '|fffd|~|fffd||fffd||fffd|\|fffd|[|fffd|g
    sortList C_SORT_DESC

End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd|\|fffd|[|fffd|g|fffd||fffd||fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub sortList(ByVal lngSort As Long)
    
    Dim lngCnt As Long
    Dim lngCmp As Long
    Dim strCmp1 As String
    Dim strCmp2 As String
    
    Dim varTmp As Variant

    Dim idx  As New Collection
    Dim cnt As Long
    

    '|fffd|P|fffd||82||202||fffd|\|fffd|[|fffd|g|fffd|s|fffd|v
    If lstSheet.ListCount <= 1 Then
        Exit Sub
    End If

    cnt = 0
    For lngCnt = 0 To lstSheet.ListCount - 1
        If lstSheet.Selected(lngCnt) Then
            cnt = cnt + 1
        End If
    Next

    If cnt > 1 Then
        For lngCnt = 0 To lstSheet.ListCount - 1
            If lstSheet.Selected(lngCnt) Then
                idx.Add lngCnt
            End If
        Next
    Else
        For lngCnt = 0 To lstSheet.ListCount - 1
            idx.Add lngCnt
        Next
    End If
    
'    For lngCnt = 0 To lstSheet.ListCount - 1 - 1
'
'        For lngCmp = lngCnt + 1 To lstSheet.ListCount - 1
'
'            If lngSort = C_SORT_ASC Then
'                strCmp1 = lstSheet.List(lngCnt, C_SHEET_NEW_NAME)
'                strCmp2 = lstSheet.List(lngCmp, C_SHEET_NEW_NAME)
'            Else
'                strCmp2 = lstSheet.List(lngCnt, C_SHEET_NEW_NAME)
'                strCmp1 = lstSheet.List(lngCmp, C_SHEET_NEW_NAME)
'            End If
'
'            If strCmp1 > strCmp2 Then
'                Dim i As Long
'                For i = C_SHEET_STATUS To C_SHEET_OLD_POS
'                    varTmp = lstSheet.List(lngCnt, i)
'                    lstSheet.List(lngCnt, i) = lstSheet.List(lngCmp, i)
'                    lstSheet.List(lngCmp, i) = varTmp
'                Next
'            End If
'        Next
'    Next

    For lngCnt = 1 To idx.count - 1
    
        For lngCmp = lngCnt + 1 To idx.count
                
            If lngSort = C_SORT_ASC Then
                strCmp1 = lstSheet.List(idx(lngCnt), C_SHEET_NEW_NAME)
                strCmp2 = lstSheet.List(idx(lngCmp), C_SHEET_NEW_NAME)
            Else
                strCmp2 = lstSheet.List(idx(lngCnt), C_SHEET_NEW_NAME)
                strCmp1 = lstSheet.List(idx(lngCmp), C_SHEET_NEW_NAME)
            End If
            
            If strCmp1 > strCmp2 Then
                Dim i As Long
                For i = C_SHEET_STATUS To C_SHEET_OLD_POS
                    varTmp = lstSheet.List(idx(lngCnt), i)
                    lstSheet.List(idx(lngCnt), i) = lstSheet.List(idx(lngCmp), i)
                    lstSheet.List(idx(lngCmp), i) = varTmp
                Next
            End If
        Next
    Next


End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd|\|fffd||fffd||fffd|{|fffd|^|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdShow_Click()

    Dim lngCnt As Long
    
    For lngCnt = 0 To lstSheet.ListCount - 1
    
        If lstSheet.Selected(lngCnt) Then
        
            lstSheet.List(lngCnt, C_SHEET_STATUS) = C_SHOW
        
        End If
    Next
    
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd||fffd|\|fffd||fffd||fffd|{|fffd|^|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdHide_Click()

    Dim lngCnt As Long
    
    For lngCnt = 0 To lstSheet.ListCount - 1
    
        If lstSheet.Selected(lngCnt) Then
        
            lstSheet.List(lngCnt, C_SHEET_STATUS) = C_HIDE
        
        End If
    Next

End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||248||693||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdUp_Click()
     Call moveList(C_UP)
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd||248||693||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdDown_Click()
     Call moveList(C_DOWN)
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd||693||fffd||fffd||fffd||fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub moveList(ByVal lngMode As Long)

    Dim lngCnt As Long
    Dim lngCmp As Long
    
    Dim varTmp As Variant

    Dim lngStart As Long
    Dim lngEnd As Long
    Dim lngInc As Long

    '|fffd|P|fffd||82||202||fffd|s|fffd|v
    If lstSheet.ListCount <= 1 Then
        Exit Sub
    End If

    Select Case lngMode
        Case C_UP
            lngStart = 0
            lngEnd = lstSheet.ListCount - 1
            lngInc = 1
        Case C_DOWN
            lngStart = lstSheet.ListCount - 1
            lngEnd = 0
            lngInc = -1
    End Select

    For lngCnt = lngStart To lngEnd Step lngInc
    
        If lstSheet.Selected(lngCnt) Then
            '|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd|s|fffd||fffd||fffd||fffd||fffd||142||24a|J|fffd|n|fffd|s|fffd||30f||a347||fffd||693||fffd||fffd|s|fffd||fffd|
            If lngCnt = lngStart Then
                Exit For
            End If
            
            lngCmp = lngCnt + lngInc * -1
            
            Dim i As Long
            For i = C_SHEET_STATUS To C_SHEET_OLD_POS
                varTmp = lstSheet.List(lngCnt, i)
                lstSheet.List(lngCnt, i) = lstSheet.List(lngCmp, i)
                lstSheet.List(lngCmp, i) = varTmp
            Next
            
            lstSheet.Selected(lngCnt) = False
            lstSheet.Selected(lngCnt + lngInc * -1) = True
        End If
    
    Next

End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd||d3dc||fffd|{|fffd|^|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdDel_Click()

    Dim lngCnt As Long
    Dim strBuf As String
    
    For lngCnt = 0 To lstSheet.ListCount - 1
    
        If lstSheet.Selected(lngCnt) Then
        
'            strBuf = "|fffd||fffd||d3dc||fffd||fffd|" & lstSheet.List(lngCnt, C_SHEET_OLD_NAME)
'            lstSheet.List(lngCnt, C_SHEET_DSP_NAME) = strBuf
'            lstSheet.List(lngCnt, C_SHEET_NEW_NAME) = lstSheet.List(lngCnt, C_SHEET_OLD_NAME)
'            lstSheet.List(lngCnt, C_SHEET_DEL) = C_DEL
            lstSheet.List(lngCnt, C_SHEET_STATUS) = C_DEL
        
        End If
    Next
    
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd||d3dc||fffd||fffd||fffd||fffd||fffd|{|fffd|^|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdUndo_Click()

    Dim lngCnt As Long
    Dim strBuf As String
    
    For lngCnt = 0 To lstSheet.ListCount - 1
    
        If lstSheet.List(lngCnt, C_SHEET_STATUS) = C_DEL Then
        
            strBuf = lstSheet.List(lngCnt, C_SHEET_OLD_NAME)
            lstSheet.List(lngCnt, C_SHEET_DSP_NAME) = strBuf
            lstSheet.List(lngCnt, C_SHEET_STATUS) = lstSheet.List(lngCnt, C_SHEET_OLD_STATUS)
        
        End If
    Next

End Sub
'------------------------------------------------------------------------------------------------------------------------
'|fffd||fffd||fffd||fffd||fffd||fffd||502||256||7c2||fffd||fffd|{|fffd|^|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdInitialize_Click()
    Call refreshList
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd||3cd|X|fffd||fffd||fffd|e|fffd||14f49|f|fffd|{|fffd|^|fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdSubmit_Click()

    Const C_TEMP_NAME As String = "~~temp"

    Dim WS As Object
    Dim lngCnt As Long
    Dim lngCnt2 As Long
    Dim lngVisibleCount As Long
    Dim lngDeleteCount As Long

    Dim lngLast As Long

    lngVisibleCount = 0
    For lngCnt = 0 To lstSheet.ListCount - 1
    
        '|fffd||642||202||fffd||a347||fffd|A|fffd||fffd||fffd|X|fffd|g|fffd||10cc2||182||fffd||fffd|A|fffd||fffd||fffd||742||303|V|fffd|[|fffd|g|fffd||311|O|fffd||248||693||fffd||fffd|B
        If lstSheet.List(lngCnt, C_SHEET_STATUS) = C_HIDE Then
            lngVisibleCount = lngVisibleCount + 1
        End If
        
    Next
    
    If lngVisibleCount = lstSheet.ListCount Then
        MsgBox "|fffd||fffd||fffd||5c2||102||303|V|fffd|[|fffd|g|fffd||fffd||fffd|\|fffd||fffd||fffd||242||342||142||fffd||fffd||702||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
        Exit Sub
    End If
    
    lngDeleteCount = 0
    For lngCnt = 0 To lstSheet.ListCount - 1
    
        '|fffd||642||202||fffd||a347||fffd|A|fffd||fffd||fffd|X|fffd|g|fffd||10cc2||182||fffd||fffd|A|fffd||fffd||fffd||742||303|V|fffd|[|fffd|g|fffd||311|O|fffd||248||693||fffd||fffd|B
        If lstSheet.List(lngCnt, C_SHEET_STATUS) = C_DEL Then
            lngDeleteCount = lngDeleteCount + 1
        End If
        
    Next
    
    If lngDeleteCount = lstSheet.ListCount Then
        MsgBox "|fffd||fffd||fffd||5c2||102||303|V|fffd|[|fffd|g|fffd||fffd||fffd||d3dc||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
        Exit Sub
    End If
    
    For lngCnt = 0 To lstSheet.ListCount - 2
    
        For lngCnt2 = lngCnt + 1 To lstSheet.ListCount - 1
            If lstSheet.List(lngCnt, C_SHEET_NEW_NAME) = lstSheet.List(lngCnt2, C_SHEET_NEW_NAME) Then
                MsgBox "|fffd|V|fffd|[|fffd|g|fffd||316||fffd||fffd|O|fffd||fffd||fffd||642||fffd||fffd||303|V|fffd|[|fffd|g|fffd|AVisual Basic |fffd||14e|Q|fffd||182||fffd||fffd||fffd||fffd|I|fffd|u|fffd|W|fffd|F|fffd|N|fffd|g |fffd||fffd||fffd|C|fffd|u|fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||343||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||193||fffd||fffd||fffd||fffd||fffd||fffd|O|fffd||255||3cd|X|fffd||fffd||fffd||90b1||fffd||182||342||142||fffd||fffd||702||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
                Exit Sub
            End If
        Next
    Next
    
    
    If MsgBox("|fffd||48f|W|fffd||fffd||fffd|e|fffd||14f49|f|fffd||fffd||fffd||702||fffd||fffd|B|fffd||fffd||b0b5||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|H", vbOKCancel + vbQuestion, C_TITLE) <> vbOK Then
        Exit Sub
    End If
    

    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    lngLast = lstSheet.ListIndex
    
    Set WS = mBook.ActiveSheet
    '|fffd|V|fffd|[|fffd|g|fffd||315||fffd||fffd||44f||fffd||fffd||fffd||fffd|f
    For lngCnt = 0 To lstSheet.ListCount - 1
    
        '|fffd||fffd||fffd||302||fffd||fffd||fffd||fffd||fffd||fffd||202||727d||fffd||fffd||fffd||fffd||fffd||202||fffd|
        If mBook.Sheets(lngCnt + 1).name = lstSheet.List(lngCnt, C_SHEET_OLD_NAME) Then
        Else
            '|fffd||642||202||fffd||a347||fffd|A|fffd||fffd||fffd|X|fffd|g|fffd||10cc2||182||fffd||fffd|A|fffd||fffd||fffd||742||303|V|fffd|[|fffd|g|fffd||311|O|fffd||248||693||fffd||fffd|B
            mBook.Sheets(lstSheet.List(lngCnt, C_SHEET_OLD_NAME)).Move Before:=mBook.Sheets(lngCnt + 1)
        End If
        
    Next
    '|fffd||fffd||fffd||182||fffd||fffd||183|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||fffd||fffd||fffd||fffd||fffd||fffd|V|fffd|[|fffd|g|fffd||fffd|I|fffd||fffd|
    WS.Select
    
    '|fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||30f||fffd||fffd||502||24d|s|fffd||fffd||fffd|B|fffd|i|fffd|r|fffd||fffd||fffd||151|S|fffd||fffd|\|fffd||fffd||fffd||242||202||fffd||94|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||90bd||fffd||7c1|j
    For lngCnt = 0 To lstSheet.ListCount - 1
        
        '|fffd|\|fffd||fffd|
        Select Case lstSheet.List(lngCnt, C_SHEET_STATUS)
            Case C_SHOW
                mBook.Sheets(lstSheet.List(lngCnt, C_SHEET_OLD_NAME)).visible = xlSheetVisible
        End Select
        
    Next
    For lngCnt = 0 To lstSheet.ListCount - 1
        
        '|fffd||fffd|\|fffd||fffd|
        Select Case lstSheet.List(lngCnt, C_SHEET_STATUS)
            Case C_HIDE
                mBook.Sheets(lstSheet.List(lngCnt, C_SHEET_OLD_NAME)).visible = xlSheetHidden
        End Select
        
    Next
    
    For lngCnt = 0 To lstSheet.ListCount - 1
        Dim strOld As String
        Dim strNew As String
        Dim strDel As String
        
        '|fffd|V|fffd|[|fffd|g|fffd||fffd||fffd||3cd|X
        strNew = C_TEMP_NAME & lngCnt
        strOld = lstSheet.List(lngCnt, C_SHEET_OLD_NAME)
        
        If strNew <> strOld Then
            mBook.Sheets(strOld).name = strNew
        End If
        
    Next
    
    For lngCnt = 0 To lstSheet.ListCount - 1
        
        '|fffd|V|fffd|[|fffd|g|fffd||fffd||fffd||3cd|X
        strNew = lstSheet.List(lngCnt, C_SHEET_NEW_NAME)
        strOld = C_TEMP_NAME & lngCnt
        
        If strNew <> strOld Then
            mBook.Sheets(strOld).name = strNew
        End If
        
        '|fffd|V|fffd|[|fffd|g|fffd||30d||d3dc|
        If lstSheet.List(lngCnt, C_SHEET_STATUS) = C_DEL Then
            strDel = lstSheet.List(lngCnt, C_SHEET_OLD_NAME)
            mBook.Sheets(strDel).Delete
        End If
        
    Next
    
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    
    '|fffd||115|\|fffd||fffd|
    Call refreshList
    
    If lngLast > lstSheet.ListCount - 1 Then
        lngLast = lstSheet.ListCount - 1
    End If

    If lstSheet.ListCount > 0 Then
        lstSheet.Selected(lngLast) = True
    End If
End Sub

Attribute VB_Name = "frmSourceExport"
Attribute VB_Base = "0{E0E92394-050E-4AF9-89A3-017CE2EF442C}{B58E9B66-3B6A-4DEC-9094-917118D1E2EA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

'|fffd|W|fffd||fffd||fffd||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd|
Const vbext_ct_StdModule As Integer = 1
'|fffd|N|fffd||fffd||fffd|X |fffd||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd|
Const vbext_ct_ClassModule As Integer = 2
'Microsoft Forms
Const vbext_ct_MSForm As Integer = 3
'ActiveX |fffd|f|fffd|U|fffd|C|fffd|i|fffd|[
Const vbext_ct_ActiveXDesigner As Integer = 11
'|fffd|h|fffd|L|fffd||fffd||fffd||fffd||fffd||fffd||fffd|g |fffd||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd|
Const vbext_ct_Document As Integer = 100
Private Sub cmdCancel_Click()
    Unload Me
End Sub



Private Sub cmdFolder_Click()

    Dim strFile As String

    '|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||64fe|
    strFile = rlxSelectFolder()
    
    If Trim(strFile) <> "" Then
        txtFolder.Text = strFile
    End If
    
End Sub

Private Sub UserForm_Initialize()

    Dim b As Workbook
    
    For Each b In Workbooks
        If b.name = "RelaxTools.xlam" Then
        Else
            cboSrcBook.AddItem b.name
        End If
    Next
    
    If cboSrcBook.ListCount > 0 Then
        cboSrcBook.ListIndex = 0
    End If
    lblGauge.visible = False
    txtFolder.Text = GetSetting(C_TITLE, "VBAExport", "Path")
    chkCategory.Value = GetSetting(C_TITLE, "VBAExport", "Category", False)
    
End Sub


Private Sub cmdOK_Click()

    Dim strFile As String
    
    On Error GoTo ErrHandle
    
    strFile = txtFolder.Text
    
    If rlxIsFolderExists(strFile) Then
    Else
        If MsgBox("|fffd|o|fffd||350||fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B" & vbCrLf & "|fffd||c42c||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|H", vbOKCancel + vbQuestion, C_TITLE) <> vbOK Then
           Exit Sub
        Else
            rlxCreateFolder strFile
        End If
    End If
    
    If MsgBox("VBA|fffd|\|fffd|[|fffd|X|fffd||fffd||fffd|G|fffd|N|fffd|X|fffd|||fffd|[|fffd|g|fffd||fffd||fffd||702||fffd||fffd|B|fffd||fffd||b0b5||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|H", vbOKCancel + vbQuestion, C_TITLE) <> vbOK Then
        Exit Sub
    End If
    
    Application.ScreenUpdating = False
    

    Dim lngCnt As Long
    Dim mMm As MacroManager
    Set mMm = New MacroManager
    Set mMm.Form = Me
    mMm.Disable
    
    mMm.StartGauge Workbooks(cboSrcBook.Text).VBProject.VBComponents.count
    lngCnt = 1
    
    Dim vb_component As Object
    
    For Each vb_component In Workbooks(cboSrcBook.Text).VBProject.VBComponents
        Debug.Print vb_component.name
        Dim extention As String
        Dim strFolder As String
        Select Case vb_component.Type
            Case vbext_ct_StdModule
                '|fffd|W|fffd||fffd||fffd||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd|
                extention = ".bas"
                strFolder = "Modules"
            Case vbext_ct_ClassModule
                '|fffd|N|fffd||fffd||fffd|X |fffd||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd|
                extention = ".cls"
                strFolder = "Class"
            Case vbext_ct_MSForm
                'Microsoft Forms
                extention = ".frm"
                strFolder = "Form"
            Case vbext_ct_ActiveXDesigner
                'ActiveX |fffd|f|fffd|U|fffd|C|fffd|i|fffd|[
                extention = ".cls"
                strFolder = "cls"
            Case vbext_ct_Document
                '|fffd|h|fffd|L|fffd||fffd||fffd||fffd||fffd||fffd||fffd|g |fffd||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd|
                extention = ".cls"
                strFolder = "Microsoft Excel Objects"
        End Select
        If chkCategory.Value Then
            rlxCreateFolder rlxAddFileSeparator(strFile) & strFolder
            vb_component.Export rlxAddFileSeparator(strFile) & strFolder & "\" & vb_component.name & extention
        Else
            vb_component.Export rlxAddFileSeparator(strFile) & vb_component.name & extention
        End If
        lngCnt = lngCnt + 1
        mMm.DisplayGauge lngCnt
    Next
    Set mMm = Nothing
    
    SaveSetting C_TITLE, "VBAExport", "Path", strFile
    SaveSetting C_TITLE, "VBAExport", "Category", chkCategory.Value
    
    Application.ScreenUpdating = True
    
    MsgBox "|fffd|G|fffd|N|fffd|X|fffd|||fffd|[|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B" & vbCrLf & "|fffd|n|fffd|j|fffd||fffd||fffd||fffd||fffd||fffd||fffd||183|G|fffd|N|fffd|X|fffd|||fffd|[|fffd|g|fffd||fffd||303|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd|J|fffd||fffd||fffd||702||fffd||fffd|B", vbOKOnly + vbInformation, C_TITLE
    
    Unload Me
    
    Dim WSh As Object
    Set WSh = CreateObject("WScript.Shell")
    
    WSh.Run ("""" & strFile & """")
    
    Set WSh = Nothing
    
    Exit Sub
ErrHandle:
    Application.ScreenUpdating = True
    If mMm Is Nothing Then
    Else
        mMm.Enable
    End If
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B" & vbCrLf & err.Description, vbOKOnly + vbCritical, C_TITLE
    Set mMm = Nothing
End Sub

Attribute VB_Name = "frmStamp"
Attribute VB_Base = "0{8508FB7D-5B12-484B-90F0-EAC730C569C6}{3F60B487-4561-4F5F-B8E2-3009180F9884}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Const C_Text As Long = 0
Private Const C_Upper As Long = 1
Private Const C_DateType As Long = 2
Private Const C_DateFormat As Long = 3
Private Const C_UserDate As Long = 4
Private Const C_Lower As Long = 5
Private Const C_Font As Long = 6
Private Const C_Color As Long = 7
Private Const C_SIZE As Long = 8
Private Const C_Line As Long = 9
Private Const c_WordArt As Long = 10
Private Const C_Fill As Long = 11

Private Const C_DATA As Long = 1

Private Const C_UP As Long = 1
Private Const C_DOWN As Long = 2

Private mResult As VbMsgBoxResult

Private mblnRefresh As Boolean

Private Sub chkFill_Change()
    dispPreview
End Sub


Private Sub chkWordArt_Change()
    dispPreview
End Sub

Private Sub cmbFont_Click()
    If cmbFont.ListIndex = -1 Then
    Else
        dispPreview
    End If
End Sub

Private Sub cmdAdd_Click()

    Dim i As Long
    
    i = lstStamp.ListCount

    Dim strBuf As String
    Dim varBuf() As Variant
    
    ReDim varBuf(C_Text To C_Fill)

    
    
    varBuf(C_Upper) = txtUpper.Text
    varBuf(C_Lower) = txtLower.Text
    
    Select Case True
        Case optSystemDate.Value
            varBuf(C_DateType) = C_STAMP_DATE_SYSTEM
        Case optUserDate.Value
            varBuf(C_DateType) = C_STAMP_DATE_USER
    End Select
    
    varBuf(C_DateFormat) = txtFormat.Text
    
    varBuf(C_UserDate) = txtUserDate.Text
    
    varBuf(C_Color) = getHexColor(lblColor.BackColor)
    
    varBuf(C_SIZE) = txtSize.Text
    
    Select Case True
        Case optLineSingle.Value
            varBuf(C_Line) = C_STAMP_LINE_SINGLE
        Case optLineDouble.Value
            varBuf(C_Line) = C_STAMP_LINE_DOUBLE
        Case optLineBold.Value
            varBuf(C_Line) = C_STAMP_LINE_BOLD
    End Select
    
    varBuf(C_Font) = cmbFont.Text
    
    If chkWordArt.Value = True Then
        varBuf(c_WordArt) = C_STAMP_WORDART_ON
    Else
        varBuf(c_WordArt) = C_STAMP_WORDART_OFF
    End If
    
    If chkFill.Value = True Then
        varBuf(C_Fill) = C_STAMP_FILL_ON
    Else
        varBuf(C_Fill) = C_STAMP_FILL_OFF
    End If
    
    strBuf = Join(varBuf, vbTab)
    
    lstStamp.AddItem ""
    
    lstStamp.List(i, C_Text) = txtUpper.Text & " + " & txtLower.Text
    lstStamp.List(i, C_DATA) = strBuf
    
    lstStamp.Selected(i) = True
    
End Sub

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdDel_Click()
    Dim i As Long
    
    For i = 0 To lstStamp.ListCount
    
        If lstStamp.Selected(i) Then
            lstStamp.RemoveItem i
            Exit Sub
        End If
    
    Next
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||248||693||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdUp_Click()
    mblnRefresh = True
     Call moveList(C_UP)
    mblnRefresh = False
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd||248||693||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdDown_Click()
    mblnRefresh = True
     Call moveList(C_DOWN)
    mblnRefresh = False
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd||693||fffd||fffd||fffd||fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub moveList(ByVal lngMode As Long)

    Dim lngCnt As Long
    Dim lngCmp As Long
    
    Dim varTmp As Variant

    Dim lngStart As Long
    Dim lngEnd As Long
    Dim lngInc As Long

    '|fffd|P|fffd||82||202||fffd|s|fffd|v
    If lstStamp.ListCount <= 1 Then
        Exit Sub
    End If

    Select Case lngMode
        Case C_UP
            lngStart = 0
            lngEnd = lstStamp.ListCount - 1
            lngInc = 1
        Case C_DOWN
            lngStart = lstStamp.ListCount - 1
            lngEnd = 0
            lngInc = -1
    End Select

    For lngCnt = lngStart To lngEnd Step lngInc
    
        If lstStamp.Selected(lngCnt) Then
            '|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd|s|fffd||fffd||fffd||fffd||fffd||142||24a|J|fffd|n|fffd|s|fffd||30f||a347||fffd||693||fffd||fffd|s|fffd||fffd|
            If lngCnt = lngStart Then
                Exit For
            End If
            
            lngCmp = lngCnt + lngInc * -1
            
            Dim i As Long
            For i = C_Text To C_DATA
                varTmp = lstStamp.List(lngCnt, i)
                lstStamp.List(lngCnt, i) = lstStamp.List(lngCmp, i)
                lstStamp.List(lngCmp, i) = varTmp
            Next
            
            lstStamp.Selected(lngCnt) = False
            lstStamp.Selected(lngCnt + lngInc * -1) = True
        End If
    
    Next

End Sub

Private Sub cmdHelp_Click()
    
    If Val(Application.Version) >= C_EXCEL_VERSION_2013 Then
    
        If MsgBox("|fffd|C|fffd||fffd||fffd|^|fffd|[|fffd|l|fffd|b|fffd|g|fffd||250||691||fffd||fffd||fffd||fffd||702||fffd||fffd|B|fffd||fffd||b0b5||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|H", vbOKCancel + vbQuestion, C_TITLE) <> vbOK Then
            Exit Sub
        End If
        
        Dim WSh As Object
        
        Set WSh = CreateObject("WScript.Shell")
        
        Call WSh.Run(C_STAMP_URL)
        
        Set WSh = Nothing
    
    Else
        frmHelp.Start "format"
    End If

End Sub
Sub dispPreview()

    Dim FS As Object
'    Dim strPath As String
    
    If mblnRefresh Then
        Exit Sub
    End If
    
    If Not IsNumeric(txtSize.Text) Then
        Exit Sub
    End If

'    strPath = rlxGetTempFolder() & C_STAMP_FILE_NAME & ".jpg"
    
    Dim s As StampDatDTO
    
    Set s = New StampDatDTO
    
    s.Upper = txtUpper.Text
    
    Select Case True
        Case optSystemDate.Value
            s.DateType = C_STAMP_DATE_SYSTEM
        Case optUserDate.Value
            s.DateType = C_STAMP_DATE_USER
    End Select
    
    s.Lower = txtLower.Text
    s.DateFormat = txtFormat.Text
    s.Font = cmbFont.Text
    
    Select Case True
        Case optLineSingle.Value
             s.Line = C_STAMP_LINE_SINGLE

        Case optLineDouble.Value
             s.Line = C_STAMP_LINE_DOUBLE

        Case optLineBold.Value
             s.Line = C_STAMP_LINE_BOLD

    End Select
    s.Color = getHexColor(lblColor.BackColor)
    s.Size = txtSize.Text
    s.UserDate = txtUserDate.Text
    
    If chkWordArt.Value = True Then
        s.WordArt = C_STAMP_WORDART_ON
    Else
        s.WordArt = C_STAMP_WORDART_OFF
    End If
    
    If chkFill.Value = True Then
        s.Fill = C_STAMP_FILL_ON
    Else
        s.Fill = C_STAMP_FILL_OFF
    End If

'    Call editStamp(s, xlBitmap)
    imgPreview.Picture = editStamp(s, xlBitmap)
    
'    imgPreview.Picture = CreatePictureFromClipboard()

    '|fffd||48f|W|fffd||fffd||fffd||282||fffd||fffd||fffd||fffd|X|fffd|g|fffd||250||752||fffd|
    Dim i As Long

    i = lstStamp.ListIndex
    If i = -1 Then
        Exit Sub
    End If
    
    Dim strBuf As String
    Dim varBuf() As Variant
    
    ReDim varBuf(C_Text To C_Fill)
    
    mblnRefresh = True
            
    varBuf(C_Upper) = s.Upper
    varBuf(C_Lower) = s.Lower
    varBuf(C_DateType) = s.DateType
    varBuf(C_DateFormat) = s.DateFormat
    varBuf(C_UserDate) = s.UserDate
    varBuf(C_Color) = s.Color
    varBuf(C_SIZE) = s.Size
    varBuf(C_Line) = s.Line
    varBuf(C_Font) = s.Font
    varBuf(c_WordArt) = s.WordArt
    varBuf(C_Fill) = s.Fill
    strBuf = Join(varBuf, vbTab)

    lstStamp.List(i, C_Text) = s.Upper & " + " & s.Lower
    lstStamp.List(i, C_DATA) = strBuf
    
    mblnRefresh = False
    
End Sub
Private Sub cmdOK_Click()
        
    Dim s As StampDatDTO
    Dim col As Collection
    Dim i As Long

    Set col = New Collection
    '|fffd||752||fffd||fffd||fffd||64fe|

    For i = 0 To lstStamp.ListCount - 1
        
        Set s = New StampDatDTO
        
        Dim varBuf As Variant
        
        varBuf = Split(lstStamp.List(i, C_DATA), vbTab)
        
        s.Upper = varBuf(C_Upper)
        s.DateType = varBuf(C_DateType)
        s.DateFormat = varBuf(C_DateFormat)
        s.UserDate = varBuf(C_UserDate)
        s.Font = varBuf(C_Font)
        s.Color = varBuf(C_Color)
        s.Size = varBuf(C_SIZE)
        s.Line = varBuf(C_Line)
        s.Lower = varBuf(C_Lower)
        s.WordArt = varBuf(c_WordArt)
        s.Fill = varBuf(C_Fill)
        
        If s.DateType = C_STAMP_DATE_USER Then
            If IsDate(s.UserDate) Then
            Else
                MsgBox "|fffd|w|fffd||fffd||fffd||fffd|t|fffd||242||357|L|fffd||fffd||fffd||213||fffd||fffd|t|fffd||fffd||fffd||153||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation + vbOKOnly, C_TITLE
                lstStamp.Selected(i) = True
                txtUserDate.SetFocus
                Exit Sub
            End If
        End If
        
        If IsNumeric(s.Size) Then
        Else
            MsgBox "|fffd||fffd||fffd||242||350||fffd||fffd|l|fffd||fffd||fffd||153||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation + vbOKOnly, C_TITLE
            lstStamp.Selected(i) = True
            txtSize.SetFocus
            Exit Sub
        End If
        
        If CDbl(s.Size) < 0 Then
            MsgBox "|fffd||fffd||fffd||342|O|fffd||20f||fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation + vbOKOnly, C_TITLE
            lstStamp.Selected(i) = True
            txtSize.SetFocus
            Exit Sub
        End If
        
        col.Add s
        
        Set s = Nothing
        
    Next

    '|fffd|v|fffd||fffd||fffd|p|fffd|e|fffd|B|fffd||6d1||fffd|
    setProperty col
    Call SaveSetting(C_TITLE, "Stamp", "Confirm", chkConfirm.Value)

    
    Set col = Nothing
    
    '|fffd||fffd||fffd|{|fffd||fffd||fffd||303||fffd||fffd|t|fffd||fffd||fffd|b|fffd|V|fffd||fffd|
    Call RefreshRibbon
    
    On Error GoTo 0
    
    mResult = vbOK
    Unload Me
    
End Sub
Private Sub optColorBlack_Click()
    dispPreview
End Sub

Private Sub optColorBlue_Click()
    dispPreview
End Sub

Private Sub optColorRed_Click()
    dispPreview
End Sub

Private Sub lblColor_Click()

    Dim lngColor As Long
    Dim result As VbMsgBoxResult
    
    lngColor = lblColor.BackColor
    
    result = frmColor.Start(lngColor)
    
    If result = vbOK Then
        lblColor.BackColor = lngColor
        dispPreview
    End If
    
End Sub

Private Sub lstStamp_Click()

    Dim i As Long
    
    If mblnRefresh Then
        Exit Sub
    End If

    mblnRefresh = True

    i = lstStamp.ListIndex
    If i = -1 Then
        Exit Sub
    End If
    
    Dim varBuf As Variant
    
    varBuf = Split(lstStamp.List(i, C_DATA), vbTab)
    
    
    
    Select Case varBuf(C_Line)
        Case C_STAMP_LINE_SINGLE
            optLineSingle.Value = True
        Case C_STAMP_LINE_DOUBLE
            optLineDouble.Value = True
        Case C_STAMP_LINE_BOLD
            optLineBold.Value = True
    End Select
    
    txtUpper.Text = varBuf(C_Upper)
    txtLower.Text = varBuf(C_Lower)
    
    Dim strType As String
    strType = varBuf(C_DateType)
    Select Case strType
        Case C_STAMP_DATE_SYSTEM
            optSystemDate.Value = True
        Case C_STAMP_DATE_USER
            optUserDate.Value = True
    End Select
    
    Dim strFormat As String
    strFormat = varBuf(C_DateFormat)
    txtFormat.Text = strFormat
    
    Dim strUserDate As String
    strUserDate = varBuf(C_UserDate)
    txtUserDate.Text = strUserDate
    
    Dim lngColor As Long
    lngColor = getLongColor(varBuf(C_Color))
    lblColor.BackColor = lngColor
    
    txtSize.Text = varBuf(C_SIZE)

    If varBuf(c_WordArt) = C_STAMP_WORDART_ON Then
        chkWordArt.Value = True
    Else
        chkWordArt.Value = False
    End If

    If varBuf(C_Fill) = C_STAMP_FILL_ON Then
        chkFill.Value = True
    Else
        chkFill.Value = False
    End If
    
    Dim strFont As String
    Dim pos As Long
    
    strFont = varBuf(C_Font)

    For i = 0 To cmbFont.ListCount - 1
        If strFont = cmbFont.List(i) Then
            pos = i
        End If
    Next i
    cmbFont.ListIndex = pos

    mblnRefresh = False

    dispPreview
End Sub
Private Sub optLineBold_Click()
    dispPreview
End Sub
Private Sub optLineDouble_Click()
    dispPreview
End Sub
Private Sub optLineSingle_Click()
    dispPreview
End Sub
Private Sub optSystemDate_Change()
    dispPreview
End Sub
Private Sub optUserDate_Change()
    dispPreview
End Sub
Private Sub spnSize_SpinDown()
    txtSize.Text = spinDown(txtSize.Text)
End Sub
Private Sub spnSize_SpinUp()
    txtSize.Text = spinUp(txtSize.Text)
End Sub
Private Sub txtFormat_Change()
    dispPreview
End Sub
Private Sub txtLower_Change()
    dispPreview
End Sub
Private Sub txtSize_Change()
    dispPreview
End Sub
Private Sub txtUpper_Change()
    dispPreview
End Sub
Private Sub txtUserDate_Change()
    dispPreview
End Sub
Private Sub UserForm_Initialize()

    Dim s As StampDatDTO
    Dim col As Collection
    Dim i As Long
    
    Dim strBuf As String
    Dim varBuf() As Variant
    
    ReDim varBuf(C_Text To C_Fill)
    
    '|fffd||752||fffd||fffd||fffd||64fe|
    Set col = getProperty()

    For i = 1 To col.count
        
        Set s = col(i)
        
        varBuf(C_Upper) = s.Upper
        varBuf(C_DateType) = s.DateType
        varBuf(C_DateFormat) = s.DateFormat
        varBuf(C_UserDate) = s.UserDate
        varBuf(C_Lower) = s.Lower
        varBuf(C_Font) = s.Font
        varBuf(C_Color) = s.Color
        varBuf(C_SIZE) = s.Size
        varBuf(C_Line) = s.Line
        varBuf(c_WordArt) = s.WordArt
        varBuf(C_Fill) = s.Fill
        
        lstStamp.AddItem ""
        
        strBuf = Join(varBuf, vbTab)
        
        lstStamp.List(i - 1, C_Text) = s.Upper & " + " & s.Lower
        lstStamp.List(i - 1, C_DATA) = strBuf
        
    Next

    ActiveCell.Select
    With Application.CommandBars("Formatting").Controls(1)
        For i = 1 To .ListCount
            cmbFont.AddItem .List(i)
        Next i
    End With
    
    If col.count > 0 Then
        lstStamp.Selected(0) = True
    Else
        mblnRefresh = True
        
        txtUpper.Text = ""
        txtLower.Text = ""
        cmbFont.Text = "|fffd|l|fffd|r |fffd|S|fffd|V|fffd|b|fffd|N"
        txtUserDate.Text = Format$(Now, "yyyy/m/d")
        optLineSingle.Value = True
        optSystemDate = True
        txtFormat.Text = "yyyy.m.d"
        txtSize.Text = "15"
        lblColor.BackColor = vbRed
    
        mblnRefresh = False
    End If
    
    chkConfirm.Value = GetSetting(C_TITLE, "Stamp", "Confirm", False)

    mblnRefresh = False

    dispPreview

End Sub

Private Function getFormatDate(ByVal strFormat As String, _
                        ByVal strType As String, _
                        ByVal strUserDate As String)
    
    On Error Resume Next

    If Len(Trim(strFormat)) = 0 Then
        getFormatDate = ""
        Exit Function
    End If
    
    Select Case strType
        Case C_STAMP_DATE_SYSTEM
            getFormatDate = Format(Now, strFormat)
            
        Case C_STAMP_DATE_USER
            If IsDate(strUserDate) Then
                getFormatDate = Format(CDate(strUserDate), strFormat)
            Else
                getFormatDate = ""
            End If
    End Select

End Function
Private Function spinUp(ByVal vntValue As Variant) As Variant

    Dim lngValue As Variant
    
    lngValue = Val(vntValue)
    lngValue = lngValue + 0.5
    If lngValue > 25 Then
        lngValue = 25
    End If
    spinUp = lngValue

End Function

Private Function spinDown(ByVal vntValue As Variant) As Variant

    Dim lngValue As Variant
    
    lngValue = Val(vntValue)
    lngValue = lngValue - 0.5
    If lngValue < 15 Then
        lngValue = 15
    End If
    spinDown = lngValue

End Function

Attribute VB_Name = "frmFilePaste"
Attribute VB_Base = "0{937DDD35-C61E-43BD-8398-F5E3D9637214}{BF302369-4CD8-46D8-9D73-A9ECCF113165}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private mResult As VbMsgBoxResult




Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdDisp_Click()
    Call dispPicture
End Sub

Private Sub cmdFile_Click()
   Dim strFile As String


    strFile = Application.GetOpenFilename("|fffd|t|fffd|@|fffd|C|fffd||fffd|(*.*),(*.*)", , "|fffd||645c||fffd|t|fffd|@|fffd|C|fffd||fffd|", , False)
    If strFile = "False" Then
        '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd|w|fffd||80b3||fffd||fffd||202||fffd||fffd||fffd||fffd||fffd||fffd||a347|
        Exit Sub
    End If
    
    txtFile.Text = strFile
    Call dispPicture
    
End Sub

Private Sub cmdOk_Click()
    
    Dim strSize As String
    Dim strColor As String
    Dim strLine As String
    
    mResult = vbOK
    Unload Me
    
    SaveSetting C_TITLE, "FilePaste", "fileName", txtFile.Text
    SaveSetting C_TITLE, "FilePaste", "ratio", txtRatio.Text
    
End Sub





Private Sub spnRatio_SpinDown()
    txtRatio.Text = spinDown(txtRatio.Text)
End Sub

Private Sub spnRatio_SpinUp()
    txtRatio.Text = spinUp(txtRatio.Text)
End Sub

Private Sub UserForm_Initialize()

    Dim strFile As String

    strFile = GetSetting(C_TITLE, "FilePaste", "fileName", "")
    txtRatio.Text = GetSetting(C_TITLE, "FilePaste", "ratio", "100")
    
    txtFile.Text = strFile
    
    Call dispPicture

End Sub
Private Sub dispPicture()
    
    On Error GoTo err
    imgPic.Picture = LoadPicture(txtFile.Text)
    
    lblPic.visible = False
    lblPic.Caption = ""
    Exit Sub
err:
    lblPic.visible = True
    lblPic.Caption = "BMP/JPEG/GIF|fffd||20a|O|fffd||343|v|fffd||fffd||fffd|r|fffd||fffd||fffd|[|fffd|\|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBictAttribute Vute Vute Vute Vute Vute Vute Vut(s|15|937|fffd||15||00|   
    lblPic.visible = FalseQ, "FiVal vntValu Me
Variant)FileVariantate adPi strlng 
    lbLoAttr
VaEnd Subnt)FileV=  
(vntValu aption lng 
   = lng 
   + 5End Suw|fffd||fffd|lng 
   >   C
        Exit Slng 
   =   CEnd Su   
spPicturlseQ, siblng 
  ate    
ible = Fate o err
 ible = FalseQt)
EFiVal vntValu Me
Variant)FileVarianrivatadPi strlng 
    s LoAttr
VaEnd Subng 
   =  
(vntValu aptiadPlng 
   = lng 
   - 5End Suw|fffd||fffd|lng 
 e < 1
        Exit Slng 
   =  End Su   
spPicturlseQt)
siblng 
  ate     ible = Fat|00||00||00||00||00||00||00||00||00||00||00||00||00||00||00||00||00|Attribute VB_Name = "frmStampMitome"
Attribute VB_Base = "0{EB6EFDD0-EAA4-43D5-853C-75ED164FB400}{1B9B348F-335A-4DE0-924C-C24B20D6CE41}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit

Private Const C_Text As String = 0
Private Const C_Font As String = 1
Private Const C_Color As String = 2
Private Const C_SIZE As String = 3
Private Const C_Line As String = 4
Private Const C_StampType As String = 5
Private Const C_File As String = 6
Private Const C_LineSize As String = 7
Private Const C_Round As String = 8
Private Const C_Rotate As String = 9
Private Const C_Fill As String = 10

Private Const C_DATA As Long = 1

Private Const C_UP As Long = 1
Private Const C_DOWN As Long = 2

Private mResult As VbMsgBoxResult
Private mblnRefresh As Boolean

Sub dispPreview()
    
    Dim FS As Object
    Dim strPath As String
    Dim lngWidth As Long
    Dim lngHeight As Long
    
    If mblnRefresh Then
        Exit Sub
    End If
    
    If Not IsNumeric(txtSize.Text) Then
        Exit Sub
    End If
    
    If Not IsNumeric(txtLineSize.Text) Then
        Exit Sub
    End If

    If Not IsNumeric(txtRound.Text) Then
        Exit Sub
    End If

    strPath = rlxGetTempFolder() & C_STAMP_FILE_NAME & ".jpg"
    
    Dim s As StampMitomeDTO
    
    Set s = New StampMitomeDTO
    
    Select Case True
        Case optNormal.Value
            s.StampType = C_STAMP_MITOME_NORMAL
            s.Text = txtName.Text
            Dim c As control
            For Each c In Controls
                Select Case c.Tag
                    Case "N"
                        c.enabled = True
                    Case "F"
                        c.enabled = False
                End Select
            Next
        Case Else
             s.StampType = C_STAMP_MITOME_FILE
            s.Text = rlxGetFullpathFromFileName(txtFile.Text)
'            Dim c As control
            For Each c In Controls
                Select Case c.Tag
                    Case "N"
                        c.enabled = False
                    Case "F"
                        c.enabled = True
                End Select
            Next
    End Select
    
    s.Font = cmbFont.Text
    
    Select Case True
        Case optLineSingle.Value
'            fraRotate.enabled = True
'            optVertical.enabled = True
'            optHolizontal.enabled = True
            s.Line = C_STAMP_LINE_SINGLE
        Case optLineDouble.Value
'            fraRotate.enabled = False
'            optVertical.enabled = False
'            optHolizontal.enabled = False
            s.Line = C_STAMP_LINE_DOUBLE
        Case Else
'            fraRotate.enabled = True
'            optVertical.enabled = True
'            optHolizontal.enabled = True
            s.Line = C_STAMP_LINE_BOLD
    End Select
    
    
    Dim lngSize As Double
    Select Case True
        Case optLineSingle.Value, optLineBold.Value
            lngSize = ThisWorkbook.Worksheets("stampEx").Shapes("shpMitome").Width

        Case optLineDouble.Value
            lngSize = ThisWorkbook.Worksheets("stampEx").Shapes("shpMitome").Width * 0.8

    End Select
    ThisWorkbook.Worksheets("stampEx").Shapes("shpMitome").Height = lngSize
    
    s.Color = getHexColor(lblColor.BackColor)
    s.Size = txtSize.Text
    s.FilePath = txtFile.Text
    s.LineSize = txtLineSize.Text
    s.Round = txtRound.Text
    
    Select Case True
        Case optVertical.Value
            s.Rotate = C_STAMP_ROTATE_VERTICAL
        Case optHolizontal.Value
            s.Rotate = C_STAMP_ROTATE_HOLIZONTAL
    End Select

    If chkFill.Value Then
        s.Fill = C_STAMP_FILL_ON
    Else
        s.Fill = C_STAMP_FILL_OFF
    End If

    '|fffd||48f|W|fffd||fffd||fffd||282||fffd||fffd||fffd||fffd|X|fffd|g|fffd||250||752||fffd|
    Dim i As Long

    i = lstStamp.ListIndex
    If i = -1 Then
        Exit Sub
    End If
    
    mblnRefresh = True
    
    Dim strBuf As String
    Dim varBuf() As Variant
    
    ReDim varBuf(C_Text To C_Fill)

    varBuf(C_StampType) = s.StampType
    varBuf(C_Text) = s.Text
    varBuf(C_File) = s.FilePath
    varBuf(C_Color) = s.Color
    varBuf(C_SIZE) = s.Size
    varBuf(C_Line) = s.Line
    varBuf(C_Font) = s.Font
    varBuf(C_LineSize) = s.LineSize
    varBuf(C_Round) = s.Round
    varBuf(C_Rotate) = s.Rotate
    varBuf(C_Fill) = s.Fill
    
    strBuf = Join(varBuf, vbTab)

    lstStamp.List(i, C_Text) = s.Text
    lstStamp.List(i, C_DATA) = strBuf

    mblnRefresh = False
    
    If s.StampType = C_STAMP_MITOME_NORMAL Then
        
'        Call editStampMitome(s, xlBitmap, lngHeight, lngWidth)
'        Call editStampMitome(s, xlBitmap)
        imgPreview.Picture = editStampMitome(s, xlBitmap)
        
'        lngHeight = ThisWorkbook.Worksheets("stampEx").Shapes("shpMitome").Width
'        lngWidth = ThisWorkbook.Worksheets("stampEx").Shapes("shpMitome").Height
    
    Else
        imgPreview.Picture = LoadPicture("")

        '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||202||fffd||fffd||a347||fffd|A
        If Not rlxIsFileExists(txtFile.Text) Then
           Exit Sub
        End If
        
        Dim o As Object
        
        Set o = ActiveSheet.Pictures.Insert(s.FilePath)
            
'        lngWidth = .Width
'        lngHeight = .Height
'
'        o.CopyPicture xlScreen, xlBitmap
        
'
'        lngWidth = o.Width
'        lngHeight = o.Height
        
        imgPreview.Picture = CreatePictureFromClipboard(o)
        
        o.Delete
    End If
    
'    With ThisWorkbook.Worksheets("stampEx").ChartObjects.Add(0, 0, lngWidth, lngHeight).Chart
'
'        .Paste
'        .ChartArea.Border.LineStyle = 0
'        .Export strPath, "JPG"
'
'        .Parent.Delete
'
'    End With
        
'    imgPreview.Picture = CreatePictureFromClipboard()
    
End Sub

Private Sub chkFill_Change()
    dispPreview
End Sub

Private Sub cmbFont_Click()
    If cmbFont.ListIndex = -1 Then
    Else
'        getTextSize lblName.Caption, cmbFont.List(cmbFont.ListIndex)
        dispPreview
    End If
End Sub

Private Sub cmdCancel_Click()
    Unload Me
End Sub

'------------------------------------------------------------------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||248||693||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdUp_Click()
    mblnRefresh = True
     Call moveList(C_UP)
    mblnRefresh = False
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd|I|fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd||248||693||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub cmdDown_Click()
    mblnRefresh = True
     Call moveList(C_DOWN)
    mblnRefresh = False
End Sub
'------------------------------------------------------------------------------------------------------------------------
' |fffd||693||fffd||fffd||fffd||fffd||fffd|
'------------------------------------------------------------------------------------------------------------------------
Private Sub moveList(ByVal lngMode As Long)

    Dim lngCnt As Long
    Dim lngCmp As Long
    
    Dim varTmp As Variant

    Dim lngStart As Long
    Dim lngEnd As Long
    Dim lngInc As Long

    '|fffd|P|fffd||82||202||fffd|s|fffd|v
    If lstStamp.ListCount <= 1 Then
        Exit Sub
    End If

    Select Case lngMode
        Case C_UP
            lngStart = 0
            lngEnd = lstStamp.ListCount - 1
            lngInc = 1
        Case C_DOWN
            lngStart = lstStamp.ListCount - 1
            lngEnd = 0
            lngInc = -1
    End Select

    For lngCnt = lngStart To lngEnd Step lngInc
    
        If lstStamp.Selected(lngCnt) Then
            '|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd|s|fffd||fffd||fffd||fffd||fffd||142||24a|J|fffd|n|fffd|s|fffd||30f||a347||fffd||693||fffd||fffd|s|fffd||fffd|
            If lngCnt = lngStart Then
                Exit For
            End If
            
            lngCmp = lngCnt + lngInc * -1
            
            Dim i As Long
            For i = C_Text To C_DATA
                varTmp = lstStamp.List(lngCnt, i)
                lstStamp.List(lngCnt, i) = lstStamp.List(lngCmp, i)
                lstStamp.List(lngCmp, i) = varTmp
            Next
            
            lstStamp.Selected(lngCnt) = False
            lstStamp.Selected(lngCnt + lngInc * -1) = True
        End If
    
    Next

End Sub


Private Sub cmdFile_Click()
   Dim strFile As String


    strFile = Application.GetOpenFilename("|fffd|t|fffd|@|fffd|C|fffd||fffd|(*.*),(*.*)", , "|fffd||645c||fffd|t|fffd|@|fffd|C|fffd||fffd|", , False)
    If strFile = "False" Then
        '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd|w|fffd||80b3||fffd||fffd||202||fffd||fffd||fffd||fffd||fffd||fffd||a347|
        Exit Sub
    End If
    
    txtFile.Text = strFile
'    Call dispPicture
End Sub

Private Sub cmdOK_Click()
    
'    Dim strSize As String
'    Dim strColor As String
'    Dim strLine As String
'    Dim dblSize As Double
'
'    dblSize = Val(txtSize.Text)
'    Select Case dblSize
'        Case 10.5 To 24
'        Case Else
'            MsgBox "|fffd|T|fffd|C|fffd|Y|fffd||342|P|fffd|O|fffd|D|fffd|T|fffd||fffd||fffd||fffd||fffd|`|fffd|Q|fffd|S|fffd||fffd||fffd||fffd||fffd||153||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation + vbOKOnly, C_TITLE
'            Exit Sub
'    End Select
'
'    mResult = vbOK
'    Unload Me
    
'    SaveSetting C_TITLE, "Mitome", "Name", txtName.Text
'    SaveSetting C_TITLE, "Mitome", "Font", cmbFont.Text
'
''    Select Case True
''        Case optColorBlack.Value
''            strColor = C_STAMP_COLOR_BLACK
''        Case optColorRed.Value
''            strColor = C_STAMP_COLOR_RED
''    End Select
'    strColor = "&H" & Right$("00000000" & Hex(lblColor.BackColor), 8)
'    SaveSetting C_TITLE, "Mitome", "Color", strColor
'
'    Select Case True
'        Case optLineSingle.Value
'            strLine = C_STAMP_LINE_SINGLE
'        Case optLineDouble.Value
'            strLine = C_STAMP_LINE_DOUBLE
'    End Select
'    SaveSetting C_TITLE, "Mitome", "Line", strLine
'
''    Select Case True
''        Case optSize1.Value
''            strSize = C_STAMP_SIZE_105
''        Case optSize2.Value
''            strSize = C_STAMP_SIZE_120
''        Case optSize3.Value
''            strSize = C_STAMP_SIZE_135
''        Case optSize4.Value
''            strSize = C_STAMP_SIZE_150
''        Case optSize5.Value
''            strSize = C_STAMP_SIZE_165
''        Case optSize6.Value
''            strSize = C_STAMP_SIZE_180
''        Case optSize7.Value
''            strSize = C_STAMP_SIZE_210
''        Case optSize8.Value
''            strSize = C_STAMP_SIZE_240
''    End Select
'    SaveSetting C_TITLE, "Mitome", "Size", dblSize
    
    Dim s As StampMitomeDTO
    Dim col As Collection
    Dim i As Long

    Set col = New Collection
    '|fffd||752||fffd||fffd||fffd||64fe|

    For i = 0 To lstStamp.ListCount - 1
        
        Set s = New StampMitomeDTO
        
        Dim varBuf As Variant
        varBuf = Split(lstStamp.List(i, C_DATA), vbTab)
        
        s.StampType = varBuf(C_StampType)
        s.Text = varBuf(C_Text)
        s.Font = varBuf(C_Font)
        s.Color = varBuf(C_Color)
        s.Size = varBuf(C_SIZE)
        s.Line = varBuf(C_Line)
        s.FilePath = varBuf(C_File)
        s.LineSize = varBuf(C_LineSize)
        s.Round = varBuf(C_Round)
        s.Rotate = varBuf(C_Rotate)
        s.Fill = varBuf(C_Fill)
        
        If IsNumeric(s.Size) Then
        Else
            MsgBox "|fffd||fffd||fffd||242||350||fffd||fffd|l|fffd||fffd||fffd||153||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation + vbOKOnly, C_TITLE
            lstStamp.Selected(i) = True
            txtSize.SetFocus
            Exit Sub
        End If
        
        If CDbl(s.Size) < 0 Then
            MsgBox "|fffd||fffd||fffd||342|O|fffd||20f||fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation + vbOKOnly, C_TITLE
            lstStamp.Selected(i) = True
            txtSize.SetFocus
            Exit Sub
        End If
        
        If IsNumeric(s.LineSize) Then
        Else
            MsgBox "|fffd|O|fffd|g|fffd||242||350||fffd||fffd|l|fffd||fffd||fffd||153||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation + vbOKOnly, C_TITLE
            lstStamp.Selected(i) = True
            txtLineSize.SetFocus
            Exit Sub
        End If
        
        If CDbl(s.LineSize) < 0 Then
            MsgBox "|fffd|O|fffd|g|fffd||342|O|fffd||20f||fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation + vbOKOnly, C_TITLE
            lstStamp.Selected(i) = True
            txtLineSize.SetFocus
            Exit Sub
        End If
        
        If IsNumeric(s.Round) Then
        Else
            MsgBox "|fffd|p|fffd||6c2||242||350||fffd||fffd|l|fffd||fffd||fffd||153||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation + vbOKOnly, C_TITLE
            lstStamp.Selected(i) = True
            txtRound.SetFocus
            Exit Sub
        End If
        
        If CDbl(s.Round) < 0 Then
            MsgBox "|fffd|p|fffd||6c2||fffd|0.00|fffd|`0.50|fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation + vbOKOnly, C_TITLE
            lstStamp.Selected(i) = True
            txtRound.SetFocus
            Exit Sub
        End If
        
        '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||311||fffd||fffd||743|`|fffd|F|fffd|b|fffd|N
        If s.StampType = C_STAMP_MITOME_FILE Then
            If Not rlxIsFileExists(s.FilePath) Then
                MsgBox "|fffd||645c||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd||fffd|B", vbExclamation + vbOKOnly, C_TITLE
                lstStamp.Selected(i) = True
                txtFile.SetFocus
                Exit Sub
            End If
        End If
        
        col.Add s
        
        Set s = Nothing
        
    Next

    '|fffd|v|fffd||fffd||fffd|p|fffd|e|fffd|B|fffd||6d1||fffd|
    setPropertyMitome col
    
    Call SaveSetting(C_TITLE, "StampMitome", "Confirm", chkConfirm.Value)
    
    Set col = Nothing
    
    '|fffd||fffd||fffd|{|fffd||fffd||fffd||303||fffd||fffd|t|fffd||fffd||fffd|b|fffd|V|fffd||fffd|
    Call RefreshRibbon
    
    On Error GoTo 0
    
    mResult = vbOK
    Unload Me
    
End Sub




Private Sub optColorBlack_Click()
'    Call changeBackGround
    dispPreview
End Sub

Private Sub optColorRed_Click()
'    Call changeBackGround
    dispPreview

End Sub



Private Sub lblColor_Click()

    Dim lngColor As Long
    Dim result As VbMsgBoxResult
    
    lngColor = lblColor.BackColor
    
    result = frmColor.Start(lngColor)
    
    If result = vbOK Then
        lblColor.BackColor = lngColor
        dispPreview
    End If
    
End Sub

Private Sub lstStamp_Change()

    Dim i As Long
    
    If mblnRefresh Then
        Exit Sub
    End If

    mblnRefresh = True

    i = lstStamp.ListIndex
    If i = -1 Then
        Exit Sub
    End If
    
    Dim varBuf As Variant
    
    varBuf = Split(lstStamp.List(i, C_DATA), vbTab)
    
    Select Case varBuf(C_StampType)
        Case C_STAMP_MITOME_NORMAL
            optNormal.Value = True
            txtName.Text = varBuf(C_Text)
        Case Else
            optFile.Value = True
            txtName.Text = ""
    End Select
    
    Select Case varBuf(C_Line)
        Case C_STAMP_LINE_SINGLE
            optLineSingle.Value = True
        Case C_STAMP_LINE_DOUBLE
            optLineDouble.Value = True
        Case Else
            optLineBold.Value = True
    End Select
    
    
    Dim lngColor As Long
    lngColor = getLongColor(varBuf(C_Color))
    lblColor.BackColor = lngColor
    
    txtSize.Text = varBuf(C_SIZE)
    txtFile.Text = varBuf(C_File)
    txtLineSize.Text = varBuf(C_LineSize)
    txtRound.Text = varBuf(C_Round)

    Select Case varBuf(C_Rotate)
        Case C_STAMP_ROTATE_HOLIZONTAL
            optHolizontal.Value = True
        Case C_STAMP_ROTATE_VERTICAL
            optVertical.Value = True
    End Select
    
    If varBuf(C_Fill) = C_STAMP_FILL_ON Then
        chkFill.Value = True
    Else
        chkFill.Value = False
    End If
    
    Dim strFont As String
    Dim pos As Long
    
    strFont = varBuf(C_Font)

    For i = 0 To cmbFont.ListCount - 1
        If strFont = cmbFont.List(i) Then
            pos = i
        End If
    Next i
    cmbFont.ListIndex = pos

    mblnRefresh = False

    dispPreview

End Sub

Private Sub optFile_Change()
    dispPreview
End Sub

Private Sub optHolizontal_Click()
    dispPreview
End Sub

Private Sub optLineBold_Change()
    dispPreview
End Sub


Private Sub optLineDouble_Click()
    dispPreview
End Sub

Private Sub optLineSingle_Click()
    dispPreview
End Sub
Private Sub optNormal_Change()
    dispPreview
End Sub

Private Sub optVertical_Click()
    dispPreview
End Sub

Private Sub spnLine_SpinUp()
    txtLineSize.Text = spinUpSize(txtLineSize.Text)
End Sub

Private Sub spnLine_Spindown()
    txtLineSize.Text = spinDownSize(txtLineSize.Text)
End Sub

Private Sub spnRound_SpinDown()
    txtRound.Text = spinDownRound(txtRound.Text)
End Sub

Private Sub spnRound_SpinUp()
    txtRound.Text = spinUpRound(txtRound.Text)
End Sub

Private Sub spnSize_SpinDown()
    txtSize.Text = spinDown(txtSize.Text)
End Sub

Private Sub spnSize_SpinUp()
    txtSize.Text = spinUp(txtSize.Text)
End Sub

Private Sub txtFile_Change()
    dispPreview
End Sub

Private Sub txtLineSize_Change()
    dispPreview
End Sub

Private Sub txtName_Change()
    
'    getTextSize txtName.Text, lblName.Font.Name
    dispPreview
    
End Sub



Private Sub txtName_Enter()

'    getTextSize txtName.Text, lblName.Font.Name
    dispPreview

End Sub

Private Sub txtRound_Change()
    dispPreview
End Sub

Private Sub txtSize_Change()
    dispPreview
End Sub

Private Sub UserForm_Initialize()

'    Dim strFont As String
'    Dim strName As String
'    Dim lngColor As Long
'    Dim strLine As String
'    Dim strSize As String
'
'    mblnRefresh = True
'
'    getPropertyMitome strName, strFont, lngColor, strLine, strSize
'
'
''    lblName.Font.Name = strFont
'    txtName.Text = strName
'
''    Select Case strColor
''        Case C_STAMP_COLOR_BLACK
''            optColorBlack.Value = True
''        Case C_STAMP_COLOR_RED
''            optColorRed.Value = True
''    End Select
'
'    lblColor.BackColor = lngColor
'
'    Select Case strLine
'        Case C_STAMP_LINE_SINGLE
'            optLineSingle.Value = True
'        Case C_STAMP_LINE_DOUBLE
'            optLineDouble.Value = True
'    End Select
'
''    Select Case strSize
''        Case C_STAMP_SIZE_105
''            optSize1.Value = True
''        Case C_STAMP_SIZE_120
''            optSize2.Value = True
''        Case C_STAMP_SIZE_135
''            optSize3.Value = True
''        Case C_STAMP_SIZE_150
''            optSize4.Value = True
''        Case C_STAMP_SIZE_165
''            optSize5.Value = True
''        Case C_STAMP_SIZE_180
''            optSize6.Value = True
''        Case C_STAMP_SIZE_210
''            optSize7.Value = True
''        Case C_STAMP_SIZE_240
''            optSize8.Value = True
''    End Select
'    txtSize.Text = strSize
'
'
'    Dim i As Long
'    Dim pos As Long
'
'    pos = -1
'    ActiveCell.Select
'    With Application.CommandBars("Formatting").Controls(1)
'        For i = 1 To .ListCount
'            cmbFont.AddItem .List(i)
'            If strFont = .List(i) Then
'                pos = i - 1
'            End If
'        Next i
'    End With
'
'    cmbFont.ListIndex = pos
'
'    mblnRefresh = False
'
'    dispPreview

    Dim s As StampMitomeDTO
    Dim col As Collection
    Dim i As Long
    
    Dim strBuf As String
    Dim varBuf() As Variant
    
    ReDim varBuf(C_Text To C_Fill)
    
    '|fffd||752||fffd||fffd||fffd||64fe|
    Set col = getPropertyMitome()

    For i = 1 To col.count
        
        Set s = col(i)
        
        varBuf(C_StampType) = s.StampType
        varBuf(C_Text) = s.Text
        varBuf(C_Font) = s.Font
        varBuf(C_Color) = s.Color
        varBuf(C_SIZE) = s.Size
        varBuf(C_Line) = s.Line
        varBuf(C_File) = s.FilePath
        varBuf(C_LineSize) = s.LineSize
        varBuf(C_Round) = s.Round
        varBuf(C_Rotate) = s.Rotate
        varBuf(C_Fill) = s.Fill
        
        strBuf = Join(varBuf, vbTab)
        
        lstStamp.AddItem ""
        lstStamp.List(i - 1, C_Text) = s.Text
        lstStamp.List(i - 1, C_DATA) = strBuf
        
    Next

    ActiveCell.Select
    With Application.CommandBars("Formatting").Controls(1)
        For i = 1 To .ListCount
            cmbFont.AddItem .List(i)
        Next i
    End With
        

    If col.count > 0 Then
        lstStamp.Selected(0) = True
    Else
        
        mblnRefresh = True
        
        txtName.Text = ""
        txtFile.Text = ""
        cmbFont.Text = "|fffd|l|fffd|r |fffd|S|fffd|V|fffd|b|fffd|N"
        optLineSingle.Value = True
        optNormal.Value = True
        txtSize.Text = "10.5"
        lblColor.BackColor = vbRed
        txtLineSize.Text = "10"
        txtRound.Text = "0.50"
        optVertical.Value = True
    
        mblnRefresh = False
'        dispPreview
        
    End If

    chkConfirm.Value = GetSetting(C_TITLE, "StampMitome", "Confirm", False)
    
End Sub
Private Function spinUp(ByVal vntValue As Variant) As Variant

    Dim lngValue As Variant
    
    lngValue = Val(vntValue)
    lngValue = lngValue + 0.5
'    If lngValue > 24 Then
'        lngValue = 24
'    End If
    spinUp = lngValue

End Function

Private Function spinDown(ByVal vntValue As Variant) As Variant

    Dim lngValue As Variant
    
    lngValue = Val(vntValue)
    lngValue = lngValue - 0.5
    If lngValue < 10.5 Then
        lngValue = 10.5
    End If
    spinDown = lngValue

End Function
'Sub changeBackGround()
'
'    Select Case True
'        Case optLineSingle.Value
'            Select Case True
'                Case optColorBlack.Value
'                    Image1.Picture = CBlack.Picture
'                    lblName.ForeColor = vbBlack
'                Case optColorRed.Value
'                    Image1.Picture = CRed.Picture
'                    lblName.ForeColor = vbRed
'            End Select
'        Case optLineDouble.Value
'            Select Case True
'                Case optColorBlack.Value
'                    Image1.Picture = DBlack.Picture
'                    lblName.ForeColor = vbBlack
'                Case optColorRed.Value
'                    Image1.Picture = DRed.Picture
'                    lblName.ForeColor = vbRed
'            End Select
'    End Select
'
'End Sub
'Private Sub getTextSize(ByVal strChar As String, ByVal strFont As String)
'
'    Dim sngSize As Single
'
'    sngSize = 128
'
''    lblSize.Caption = strChar
''    lblSize.Font.Name = strFont
''
''    Do
''        sngSize = sngSize - 1
''        With lblSize
''            .Font.Size = sngSize
''            .AutoSize = False
'''            .Width = 40
''            .AutoSize = True
''        End With
''    Loop Until lblSize.Height < 100
'
'    lblName.Caption = strChar
'    lblName.Font.Name = strFont
'
'    Do
'        sngSize = sngSize - 1
'        With lblName
'            .Font.Size = sngSize
'            .AutoSize = False
''            .Width = 40
'            .AutoSize = True
'        End With
'    Loop Until lblName.Height < 100
'
'
''    lblName.Width = lblSize.Width
''    lblName.Caption = strChar
''    lblName.Font.Name = strFont
''    lblName.Font.Size = sngSize
'
'    Dim lngLeft As Long
'    lngLeft = (Image1.Left + (Image1.Width / 2)) - (lblName.Left + (lblName.Width / 2))
'    lblName.Left = lblName.Left + lngLeft
'
'    Dim lngTop As Long
'    lngTop = (Image1.Top + (Image1.Height / 2)) - (lblName.Top + (lblName.Height / 2))
'    lblName.Top = lblName.Top + lngTop
'
'End Sub
'Private Function getFormatDate(ByVal strFormat As String, _
'                        ByVal strType As String, _
'                        ByVal strUserDate As String)
'
'    On Error Resume Next
'
'    If Len(Trim(strFormat)) = 0 Then
'        getFormatDate = ""
'        Exit Function
'    End If
'
'    Select Case strType
'        Case C_STAMP_DATE_SYSTEM
'            getFormatDate = Format(Now, strFormat)
'
'        Case C_STAMP_DATE_USER
'            If IsDate(strUserDate) Then
'                getFormatDate = Format(CDate(strUserDate), strFormat)
'            Else
'                getFormatDate = ""
'            End If
'    End Select
'
'End Function
Private Sub cmdAdd_Click()

    Dim i As Long
    Dim strBuf As String
    Dim varBuf() As Variant
    
    ReDim varBuf(C_Text To C_Fill)
    
    i = lstStamp.ListCount

    
    Select Case True
        Case optNormal.Value
           varBuf(C_StampType) = C_STAMP_MITOME_NORMAL
        Case Else
            varBuf(C_StampType) = C_STAMP_MITOME_FILE
    End Select
    
    varBuf(C_Text) = txtName.Text
    
    varBuf(C_Color) = getHexColor(lblColor.BackColor)
    
    varBuf(C_SIZE) = txtSize.Text
    
    Select Case True
        Case optLineSingle.Value
            varBuf(C_Line) = C_STAMP_LINE_SINGLE
        Case optLineDouble.Value
            varBuf(C_Line) = C_STAMP_LINE_DOUBLE
        Case Else
            varBuf(C_Line) = C_STAMP_LINE_BOLD
    End Select
    
    varBuf(C_Font) = cmbFont.Text
    varBuf(C_File) = txtFile.Text
    
    varBuf(C_LineSize) = txtLineSize.Text
    varBuf(C_Round) = txtRound.Text
    
    If chkFill.Value Then
        varBuf(C_Fill) = C_STAMP_FILL_ON
    Else
        varBuf(C_Fill) = C_STAMP_FILL_OFF
    End If
    
    strBuf = Join(varBuf, vbTab)
    
    lstStamp.AddItem ""
    lstStamp.List(i, C_Text) = txtName.Text
    lstStamp.List(i, C_DATA) = strBuf
    
    lstStamp.Selected(i) = True
    
End Sub


Private Sub cmdDel_Click()
    Dim i As Long
    
    For i = 0 To lstStamp.ListCount
    
        If lstStamp.Selected(i) Then
            lstStamp.RemoveItem i
            Exit Sub
        End If
    
    Next
End Sub

Private Function spinUpRound(ByVal vntValue As Variant) As Variant

    Dim lngValue As Variant
    
    lngValue = Val(vntValue)
    lngValue = lngValue + 0.01
    If lngValue > 0.5 Then
        lngValue = 0.5
    End If
    spinUpRound = Format(lngValue, "0.00")

End Function

Private Function spinDownRound(ByVal vntValue As Variant) As Variant

    Dim lngValue As Variant
    
    lngValue = Val(vntValue)
    lngValue = lngValue - 0.01
    If lngValue < 0 Then
        lngValue = 0
    End If
    spinDownRound = Format(lngValue, "0.00")

End Function
Private Function spinUpSize(ByVal vntValue As Variant) As Variant

    Dim lngValue As Variant
    
    lngValue = Val(vntValue)
    lngValue = lngValue + 1
'    If lngValue > 0.5 Then
'        lngValue = 0.5
'    End If
    spinUpSize = Format(lngValue, "0")

End Function

Private Function spinDownSize(ByVal vntValue As Variant) As Variant

    Dim lngValue As Variant
    
    lngValue = Val(vntValue)
    lngValue = lngValue - 1
    If lngValue < 0 Then
        lngValue = 0
    End If
    spinDownSize = Format(lngValue, "0")

End Function
Attribute VB_Name = "frmStepCount"
Attribute VB_Base = "0{11BBC734-CABD-4B96-A32B-6F96DD4D19B7}{D7CC11BB-6D3F-4543-95D5-2E54F429DEAD}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit
Private mblnCancel As Boolean
Private Const C_START_ROW As Long = 8

Private Const C_NO As Long = 1
Private Const C_MODULE As Long = 2
Private Const C_TYPE As Long = 3
Private Const C_CODE As Long = 4
Private Const C_COMMENT As Long = 5
Private Const C_BLANK As Long = 6
Private Const C_ALL As Long = 7
Private Const C_SORT As Long = 8


Private Sub cmdCancel_Click()
    Unload Me
End Sub



Private Sub UserForm_Initialize()

    Dim b As Workbook
    
    For Each b In Workbooks
        If b.name = "RelaxTools.xlam" Then
        Else
            cboSrcBook.AddItem b.name
        End If
    Next
    
    If cboSrcBook.ListCount > 0 Then
        cboSrcBook.ListIndex = 0
    End If
    
End Sub


Private Sub cmdOK_Click()

    Dim Target As Workbook
    Dim i As Integer
    Dim strBuf As String
    Dim o As Object
    
    Dim lngAllCount As Long
    Dim lngBlankCount As Long
    Dim lngCodeCount As Long
    Dim lngCommentCount As Long
    Dim WB As Workbook
    
    On Error GoTo ErrHandle
    
    Dim lngCnt As Long
    
    If cboSrcBook.ListIndex = -1 Then
        MsgBox "VBA|fffd|v|fffd||fffd||fffd|W|fffd|F|fffd|N|fffd|g|fffd||302||fffd||fffd||fffd|u|fffd|b|fffd|N|fffd||fffd||fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbOKOnly + vbExclamation, C_TITLE
        Exit Sub
    End If
        
    Application.ScreenUpdating = False
        
    Set Target = Workbooks(cboSrcBook.Text)
    
    Set WB = Workbooks.Add
    
    lngCnt = 2
    WB.Worksheets(1).Cells(lngCnt, C_NO).Value = "No."
    WB.Worksheets(1).Cells(lngCnt, C_MODULE).Value = "|fffd|I|fffd|u|fffd|W|fffd|F|fffd|N|fffd|g"
    WB.Worksheets(1).Cells(lngCnt, C_TYPE).Value = "|fffd||fffd||fffd|"
    WB.Worksheets(1).Cells(lngCnt, C_CODE).Value = "|fffd||fffd||fffd|s"
    WB.Worksheets(1).Cells(lngCnt, C_COMMENT).Value = "|fffd||fffd||fffd||fffd|"
    WB.Worksheets(1).Cells(lngCnt, C_BLANK).Value = "|fffd||fffd|"
    WB.Worksheets(1).Cells(lngCnt, C_ALL).Value = "|fffd|S|fffd|s"
    lngCnt = 3
    
    For Each o In Target.VBProject.VBComponents
    
        lngAllCount = 0
        lngBlankCount = 0
        lngCodeCount = 0
        lngCommentCount = 0
        
        WB.Worksheets(1).Cells(lngCnt, C_MODULE).Value = o.name
        
        Select Case o.Type
            Case 1
                WB.Worksheets(1).Cells(lngCnt, C_TYPE).Value = "|fffd|W|fffd||fffd||fffd||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd|"
                WB.Worksheets(1).Cells(lngCnt, C_SORT).Value = 4
            Case 2
                WB.Worksheets(1).Cells(lngCnt, C_TYPE).Value = "|fffd|N|fffd||fffd||fffd|X|fffd||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd|"
                WB.Worksheets(1).Cells(lngCnt, C_SORT).Value = 5
            Case 3
                WB.Worksheets(1).Cells(lngCnt, C_TYPE).Value = "|fffd|t|fffd|H|fffd|[|fffd||fffd|"
                WB.Worksheets(1).Cells(lngCnt, C_SORT).Value = 3
            Case Else
                If o.name = "ThisWorkbook" Then
                    WB.Worksheets(1).Cells(lngCnt, C_TYPE).Value = "Excel Objects"
                    WB.Worksheets(1).Cells(lngCnt, C_SORT).Value = 2
                Else
                    WB.Worksheets(1).Cells(lngCnt, C_TYPE).Value = "Excel Objects"
                    WB.Worksheets(1).Cells(lngCnt, C_SORT).Value = 1
                End If
        End Select
        
        With o.CodeModule
    
            For i = 1 To .CountOfLines
            
                strBuf = .Lines(i, 1)
            
                If Left(Trim(strBuf), 1) = "'" Then
                    lngCommentCount = lngCommentCount + 1
                End If
                
                If Len(Trim(strBuf)) = 0 Then
                    lngBlankCount = lngBlankCount + 1
                End If
                
                lngAllCount = lngAllCount + 1
            
            Next i
        
        End With

        lngCodeCount = lngAllCount - lngCommentCount - lngBlankCount
        
        WB.Worksheets(1).Cells(lngCnt, C_NO).Value = lngCnt - 2
        WB.Worksheets(1).Cells(lngCnt, C_CODE).Value = lngCodeCount
        WB.Worksheets(1).Cells(lngCnt, C_COMMENT).Value = lngCommentCount
        WB.Worksheets(1).Cells(lngCnt, C_BLANK).Value = lngBlankCount
        WB.Worksheets(1).Cells(lngCnt, C_ALL).Value = lngAllCount
        
        lngCnt = lngCnt + 1
    
    Next
    
    WB.Worksheets(1).Columns("A:G").EntireColumn.AutoFit
    
    WB.Worksheets(1).Sort.SortFields.Clear
    WB.Worksheets(1).Sort.SortFields.Add key:=Range(WB.Worksheets(1).Cells(2, C_SORT), WB.Worksheets(1).Cells(lngCnt, C_SORT)), _
        SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    WB.Worksheets(1).Sort.SortFields.Add key:=Range(WB.Worksheets(1).Cells(2, C_MODULE), WB.Worksheets(1).Cells(lngCnt, C_MODULE)), _
        SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    With WB.Worksheets(1).Sort
        .SetRange Range(WB.Worksheets(1).Cells(2, C_MODULE), WB.Worksheets(1).Cells(lngCnt, C_SORT))
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    
    WB.Worksheets(1).Columns("H:H").ClearContents
    WB.Worksheets(1).Range("A2").CurrentRegion.Select
    execSelectionRowDrawGrid
    
    WB.Worksheets(1).Cells(1, C_NO).Value = Target.name & " |fffd|X|fffd|e|fffd|b|fffd|v|fffd|J|fffd|E|fffd||fffd||fffd|g"
    WB.Worksheets(1).Cells(lngCnt, C_TYPE).Value = "|fffd||fffd||fffd|v"
    WB.Worksheets(1).Cells(lngCnt, C_CODE).Formula = "=sum(D3:D" & lngCnt - 1 & ")"
    WB.Worksheets(1).Cells(lngCnt, C_COMMENT).Formula = "=sum(E3:E" & lngCnt - 1 & ")"
    WB.Worksheets(1).Cells(lngCnt, C_BLANK).Formula = "=sum(F3:F" & lngCnt - 1 & ")"
    WB.Worksheets(1).Cells(lngCnt, C_ALL).Formula = "=sum(G3:G" & lngCnt - 1 & ")"
    Unload Me
    
    Application.ScreenUpdating = True
    
    Exit Sub
ErrHandle:
    Application.ScreenUpdating = True
    MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, C_TITLE
End Sub


Attribute VB_Name = "frmStyle"
Attribute VB_Base = "0{258C777E-2413-40E4-BBA1-687DD2BAAB03}{8A75F2BA-E2FA-40A5-A77E-54E623E02BDE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit



Private Sub cmdAll_Click()

    Dim i As Long
    
    If MsgBox("|fffd||fffd||fffd||5c2||102||303|X|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd||d3dc||fffd||fffd||fffd||702||fffd||fffd|B|fffd||fffd||b0b5||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|H", vbOKCancel + vbQuestion, C_TITLE) <> vbOK Then
        Exit Sub
    End If
    
    On Error Resume Next
    
    For i = lstStyle.ListCount - 1 To 0 Step -1
        ActiveWorkbook.Styles(lstStyle.List(i)).Delete
        lstStyle.RemoveItem i
    Next
    
    If lstStyle.ListCount > 0 Then
        lstStyle.Selected(0) = True
    Else
        cmdAll.enabled = False
        cmdDel.enabled = False
    End If
    
End Sub

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdDel_Click()

    Dim i As Long
    
    On Error Resume Next
    
    For i = lstStyle.ListCount - 1 To 0 Step -1
        If lstStyle.Selected(i) Then
            ActiveWorkbook.Styles(lstStyle.List(i)).Delete
            lstStyle.RemoveItem i
        End If
    Next
    
    If lstStyle.ListCount > 0 Then
        lstStyle.Selected(0) = True
    Else
        cmdAll.enabled = False
        cmdDel.enabled = False
    End If
    
End Sub

Private Sub CommandButton1_Click()

End Sub

Private Sub cmdSearch_Click()

    Dim s As Style
    
    On Error Resume Next
    
    lstStyle.Clear
    
    lblGauge.visible = False
    
    Dim mMm As MacroManager
    Dim lngCnt As Long
    
    Set mMm = New MacroManager
    Set mMm.Form = Me
    mMm.Disable
    
    mMm.StartGauge ActiveWorkbook.Styles.count
    lngCnt = 1
    
    For Each s In ActiveWorkbook.Styles
    
        If s.BuiltIn Then
        Else
            If chkStyle.Value Then
                If Not SearchStyle(s.NameLocal) Then
                    lstStyle.AddItem s.NameLocal
                End If
            Else
                lstStyle.AddItem s.NameLocal
            End If
        End If
        
        lngCnt = lngCnt + 1
        mMm.DisplayGauge lngCnt
    Next
    mMm.Enable
    Set mMm = Nothing
    
    lblGauge.visible = False
    
    If lstStyle.ListCount > 0 Then
        lstStyle.Selected(0) = True
        cmdAll.enabled = True
        cmdDel.enabled = True
    Else
        cmdAll.enabled = False
        cmdDel.enabled = False
    End If
    
End Sub

Private Sub UserForm_Initialize()


    
    lblGauge.visible = False
    
    Call cmdSearch_Click

End Sub
Function SearchStyle(ByVal strBuf As String) As Boolean

    Dim WS As Worksheet
    Dim r As Range
    
    SearchStyle = False
    
    For Each WS In ActiveWorkbook.Worksheets
        For Each r In WS.UsedRange
            If r.Style = strBuf Then
                SearchStyle = True
                Exit Function
            End If
        Next
    Next

End Function
Attribute VB_Name = "frmTreeList"
Attribute VB_Base = "0{F4759A0E-D396-4EC5-911F-8CF2E06CBDAE}{643B9778-A467-4EB7-B299-DFFE67E12272}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Private mblnCancel As Boolean
Private mMm As MacroManager

Private mdblLineWidth As Double

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdFolder_Click()

    Dim strFile As String

    '|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||64fe|
    strFile = rlxSelectFolder()
    
    If Trim(strFile) <> "" Then
        txtFolder.Text = strFile
    End If
    
    
End Sub

Private Sub cmdRun_Click()
    
    Dim lngRow As Long
    Dim lngCol As Long
    Dim strFolder As String
    Dim objFs As Object
    Dim strLine As String
    Dim lngFCnt As Long
    Dim lngFolderCnt As Long
    
    If ActiveCell Is Nothing Then
        MsgBox "|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||203|Z|fffd||fffd||fffd||fffd||fffd||742||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical, C_TITLE
        Exit Sub
    End If
    
    '|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||64fe|
    strFolder = txtFolder.Text
    If strFolder = "" Then
        MsgBox "|fffd|c|fffd||fffd||fffd|[|fffd|\|fffd||fffd||fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation, "|fffd|c|fffd||fffd||fffd|[|fffd|\|fffd||fffd||fffd||64fe|"
        txtFolder.SetFocus
        Exit Sub
    End If
    
    
    If Val(txtLineWidth.Text) < 0.5 Then
        MsgBox "0.5|fffd||20f||fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbExclamation, "|fffd|c|fffd||fffd||fffd|[|fffd|\|fffd||fffd||fffd||64fe|"
        txtLineWidth.SetFocus
        Exit Sub
    End If
    
    mdblLineWidth = Val(txtLineWidth.Text)
    
    
    Set objFs = CreateObject("Scripting.FileSystemObject")
    
    lngRow = ActiveCell.row
    lngCol = ActiveCell.Column
    
    strLine = ""
    
    Set mMm = New MacroManager
    Set mMm.Form = Me
    
    mMm.Disable
    mMm.DispGuidance "|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||310||fffd||fffd||fffd||fffd|J|fffd|E|fffd||fffd||fffd|g|fffd||fffd||fffd||102||fffd||fffd||702||fffd|..."
    
    rlxGetFilesCount objFs, strFolder, lngFCnt, chkFileName.Value, True, True
    
    mMm.StartGauge lngFCnt
    
    Dim strPath As String
    If Mid$(strFolder, 2, 1) = ":" Then
        '|fffd|h|fffd||fffd||fffd|C|fffd|u|fffd||fffd||fffd||fffd|UNC|fffd||255||3ca||fffd|
        strPath = rlxDriveToUNC(strFolder)
    Else
        strPath = strFolder
    End If
    
    '|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd|o|fffd||fffd||fffd|i|fffd|J|fffd|n|fffd||fffd||fffd|j
    Cells(lngRow, lngCol).Value = strPath
    
    '|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd|w|fffd||fffd||30f||a347|
    If chkFolder.Value Then
        ActiveSheet.Hyperlinks.Add _
            Anchor:=Cells(lngRow, lngCol), _
            Address:=strPath, _
            TextToDisplay:=strPath
    End If
    
    On Error Resume Next
    
    lngFolderCnt = 0
    FileDisp objFs, strFolder, lngRow, lngCol, lngCol, strLine, lngFolderCnt
    
    Set mMm = Nothing
    Set objFs = Nothing
    
    Select Case err.Number
    Case 75, 76
        MsgBox "|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd||fffd|B", vbExclamation, "|fffd|c|fffd||fffd||fffd|[|fffd|\|fffd||fffd||fffd||64fe|"
        txtFolder.SetFocus
        Exit Sub
    End Select
       
    Unload Me
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbInformation, C_TITLE

End Sub
Private Sub FileDisp(objFs, ByVal strPath, lngRow, ByVal lngCol, ByVal lngHCol As Long, ByVal strLineParent As String, ByRef lngFolderCnt As Long)

    Dim objfld As Object
    Dim objfl As Object
    Dim objSub As Object
    
    Dim i As Long
    Dim lngFolderCount As Long
    Dim lngCol2 As Long
    
    Dim strLine As String
    Dim colFolders As Collection
    Dim colFiles As Collection
    
    '|fffd|r|fffd||fffd||fffd||317||55742||fffd||fffd|Q|fffd||182||fffd||fffd||fffd|B
    Columns(lngCol).ColumnWidth = mdblLineWidth
    Columns(lngCol + 1).ColumnWidth = mdblLineWidth
    
    Set objfld = objFs.GetFolder(strPath)
    
    lngCol2 = lngCol + 2
    lngRow = lngRow + 1
    
    lngFolderCount = objfld.SubFolders.count
    
    Select Case lngFolderCount > 0
        Case 0
            strLine = strLineParent & "|fffd|@|fffd|@"
        Case Else
            strLine = strLineParent & "|fffd||fffd||fffd|@"
    End Select
    
    If chkFileName.Value Then
        
        Set colFiles = New Collection
        
        For Each objfl In objfld.files
            colFiles.Add objfl, objfl.name
        Next
        
        rlxSortCollection colFiles
        
        '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||308||a5d7||fffd||fffd||fffd||c42c||fffd||fffd||fffd||fffd|B
        For Each objfl In colFiles
            DoEvents
            If mblnCancel Then
                Exit Sub
            End If
            '|fffd|r|fffd||fffd|
            SetTree strLine, lngRow, lngHCol
            
            '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd|
            Cells(lngRow, lngCol2).NumberFormatLocal = "@"
            Cells(lngRow, lngCol2).Value = objfl.name
    
            
            '|fffd|n|fffd|C|fffd|p|fffd|[|fffd||fffd||fffd||fffd||fffd|N
            'Office |fffd|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd||fffd||fffd||303|n|fffd|C|fffd|p|fffd|[|fffd||fffd||fffd||fffd||fffd|N|fffd||303|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||143|||fffd||fffd||fffd|h|fffd||fffd||fffd||fffd||fffd||fffd||fffd|g|fffd|p|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B(KB202261)
            'http://support.microsoft.com/kb/202261/ja
            '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd|w|fffd||fffd||30f||a347|
            If chkFile.Value Then
                ActiveSheet.Hyperlinks.Add _
                    Anchor:=Cells(lngRow, lngCol2), _
                    Address:=rlxAddFileSeparator(strPath) & objfl.name, _
                    TextToDisplay:=objfl.name
            End If
            
            lngRow = lngRow + 1
            lngFolderCnt = lngFolderCnt + 1
            mMm.DisplayGauge lngFolderCnt
        Next
        Set colFiles = Nothing
    End If
    
    '|fffd|r|fffd||fffd|
    SetTree strLine, lngRow, lngHCol
    lngRow = lngRow + 1
    
    '|fffd|T|fffd|u|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    i = 1
    
    Set colFolders = New Collection
    
    For Each objSub In objfld.SubFolders
        colFolders.Add objSub, objSub.name
    Next
    
    rlxSortCollection colFolders
        
    For Each objSub In colFolders
        DoEvents
        If mblnCancel Then
            Exit Sub
        End If
        '|fffd|r|fffd||fffd|
        Select Case lngFolderCount
            Case i
                SetTree strLineParent & "|fffd||fffd||fffd||fffd|", lngRow, lngHCol
                strLine = strLineParent & "|fffd|@|fffd|@"
        
            Case Else
                SetTree strLineParent & "|fffd||fffd||fffd||fffd|", lngRow, lngHCol
                strLine = strLineParent & "|fffd||fffd||fffd|@"
        End Select
        
        '|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd|o|fffd||fffd|
        Cells(lngRow, lngCol2).NumberFormatLocal = "@"
        Cells(lngRow, lngCol2).Value = rlxGetFullpathFromFileName(objSub.Path)
        
        '|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd|w|fffd||fffd||30f||a347|
        If chkFolder.Value Then
            ActiveSheet.Hyperlinks.Add _
                Anchor:=Cells(lngRow, lngCol2), _
                Address:=objSub.Path, _
                TextToDisplay:=rlxGetFullpathFromFileName(objSub.Path)
        End If
                
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|g|fffd||fffd||fffd||102||44f|o|fffd||fffd||fffd|i|fffd||10b|A|fffd|j
        FileDisp objFs, objSub.Path, lngRow, lngCol2, lngHCol, strLine, lngFolderCnt
        
        i = i + 1
        lngFolderCnt = lngFolderCnt + 1
        mMm.DisplayGauge lngFolderCnt
        
    Next
    Set colFolders = Nothing
    
End Sub
'Tree|fffd|`|fffd||fffd|
Private Sub SetTree(ByVal strLine As String, ByVal lngRow As Long, ByVal lngCol As Long)

    Dim lngLen As Long
    Dim i As Long

    
    lngLen = Len(strLine)
    
    For i = 1 To lngLen

        Cells(lngRow, lngCol + i - 1).Value = Mid$(strLine, i, 1)
    Next


End Sub

Private Sub spnWidth_SpinDown()
    txtLineWidth.Text = spinDown(txtLineWidth.Text)
End Sub

Private Sub spnWidth_SpinUp()
    txtLineWidth.Text = spinUp(txtLineWidth.Text)
End Sub
Private Function spinUp(ByVal vntValue As Variant) As Variant

    Dim lngValue As Long
    
    lngValue = Val(vntValue)
    lngValue = lngValue + 1
    spinUp = lngValue

End Function

Private Function spinDown(ByVal vntValue As Variant) As Variant

    Dim lngValue As Long
    
    lngValue = Val(vntValue)
    lngValue = lngValue - 1
    If lngValue < 0 Then
        lngValue = 0
    End If
    spinDown = lngValue

End Function

Private Sub UserForm_Initialize()
    mblnCancel = False
    lblGauge.visible = False
End Sub

Private Sub UserForm_Terminate()
    mblnCancel = True
End Sub
Attribute VB_Name = "frmVersion"
Attribute VB_Base = "0{582EA978-4E88-4676-BE9A-7A7DF33221B2}{339A63A8-3CA5-4B2E-B947-788674D8EF6E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmdOK_Click()
    Unload Me
End Sub

Private Sub lblUrl_Click()

    Dim WSh As Object
    
    Set WSh = CreateObject("WScript.Shell")
    
    Call WSh.Run(C_URL)
    
    Set WSh = Nothing

End Sub


Private Sub UserForm_Initialize()

    Dim strVer As String
    Dim strTitle As String

    strTitle = ThisWorkbook.BuiltinDocumentProperties("Title").Value
    strVer = ThisWorkbook.BuiltinDocumentProperties("Comments").Value
    'MsgBox strTitle & "            " & vbCrLf & strVer, vbInformation, C_TITLE
    
    
    lblTitle.Caption = strTitle
    lblComment.Caption = strTitle & " " & strVer
    lblUrl.Caption = C_URL
    
    Dim strBuf As String
    Dim col As New Collection
    Dim i As Long
    Dim obj As Object

    col.Add "Scripting.FileSystemObject"
    col.Add "Shell.Application"
    col.Add "WScript.Shell"
    col.Add "VBScript.RegExp"
    col.Add "System.Collections.ArrayList"
    col.Add "System.Text.StringBuilder"
    col.Add "System.Text.UTF8Encoding"
    col.Add "System.Security.Cryptography.MD5CryptoServiceProvider"
    col.Add "System.Security.Cryptography.SHA1Managed"
    col.Add "System.Security.Cryptography.SHA256Managed"
    col.Add "System.Security.Cryptography.SHA384Managed"
    col.Add "System.Security.Cryptography.SHA512Managed"
    
    strBuf = strTitle
    Dim s() As String
    s = Split(strVer, vbLf)
    strBuf = strBuf & " " & s(0) & vbCrLf
    
    strBuf = strBuf & "Microsoft "
    Select Case True
        Case InStr(Application.OperatingSystem, "5.00") > 0
            strBuf = strBuf & "Windows 2000"
        Case InStr(Application.OperatingSystem, "5.01") > 0
            strBuf = strBuf & "Windows XP"
        Case InStr(Application.OperatingSystem, "6.00") > 0
            strBuf = strBuf & "Windows Vista"
        Case InStr(Application.OperatingSystem, "6.01") > 0
            strBuf = strBuf & "Windows 7"
        Case InStr(Application.OperatingSystem, "6.02") > 0
            strBuf = strBuf & "Windows 8 or 8.1"
        Case Else
            strBuf = strBuf & "Windows 9?"
    End Select
    If Isx64 Then
        strBuf = strBuf & " (64bit)" & vbCrLf
    Else
        strBuf = strBuf & " (32bit)" & vbCrLf
    End If
    
    strBuf = strBuf & "Microsoft Excel "
    
    Select Case Val(Application.Version)
        Case Is = 0
            strBuf = strBuf & "|fffd|s|fffd||fffd|"
        Case Is <= 11
            strBuf = strBuf & "2003|fffd||211|O"
        Case 12
            strBuf = strBuf & "2007"
        Case 14
            strBuf = strBuf & "2010"
        Case 15
            strBuf = strBuf & "2013"
        Case Else
            strBuf = strBuf & "2013|fffd||fffd||85a2||fffd||fffd||fffd||303|o|fffd|[|fffd|W|fffd||fffd||fffd||fffd|"
    End Select
    strBuf = strBuf & " Build " & Application.Build
#If Win64 Then
    strBuf = strBuf & " (64bit)" & vbCrLf
#Else
    strBuf = strBuf & " (32bit)" & vbCrLf
#End If
    strBuf = strBuf & "" & vbCrLf
    For i = 1 To col.count
        
        strBuf = strBuf & col.Item(i) & ":"
        On Error Resume Next
        err.Clear
        Set obj = CreateObject(col.Item(i))
        If err.Number <> 0 Or obj Is Nothing Then
            strBuf = strBuf & "NG"
        Else
            strBuf = strBuf & "OK"
        End If
        Set obj = Nothing
        On Error GoTo 0
        strBuf = strBuf & vbCrLf
    
    Next
    
    txtDebug.Text = strBuf
    txtDebug.SelStart = Len(txtDebug.Text)
    txtDebug.SelStart = 0

    txtDebug.SetFocus
    SendKeys "^A"
    
End Sub
Private Function Isx64() As Boolean

    On Error GoTo xp

    Dim colItems As Object
    Dim itm As Object
    Dim ret As Boolean

    ret = False '|fffd||fffd||fffd||fffd||fffd||fffd|

    Set colItems = CreateObject("WbemScripting.SWbemLocator").ConnectServer.ExecQuery("Select * From Win32_OperatingSystem")

    For Each itm In colItems
        If InStr(itm.OSArchitecture, "64") Then
            ret = True
            Exit For
        End If
    Next

    Isx64 = ret

    Exit Function
xp:
    Isx64 = False

End Function

Attribute VB_Name = "itemCircleB"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^[|fffd||fffd|]"
Private Const C_SECTION_SEPARATER As String = ""
Private Const C_SECTION_NAME As String = "|fffd||fffd|(|fffd||fffd||fffd||702||fffd|)"
Private Const C_SECTION_CLASS As String = "itemCircleB"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property

Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngIndentLevel As Long) As String
    
    NextNumber = "|fffd||fffd|" & C_SECTION_SEPARATER

End Property







Attribute VB_Name = "itemCircleW"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^[|fffd||fffd|]"
Private Const C_SECTION_SEPARATER As String = ""
Private Const C_SECTION_NAME As String = "|fffd||fffd|(|fffd||fffd||fffd||702||fffd|)"
Private Const C_SECTION_CLASS As String = "itemCircleW"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property

Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngIndentLevel As Long) As String
    
    NextNumber = "|fffd||fffd|" & C_SECTION_SEPARATER

End Property








Attribute VB_Name = "itemDblR"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^[|fffd||fffd|]"
Private Const C_SECTION_SEPARATER As String = ""
Private Const C_SECTION_NAME As String = "|fffd||fffd|(|fffd||fffd|d|fffd|E|fffd||fffd||fffd|)"
Private Const C_SECTION_CLASS As String = "itemDblR"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property

Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngIndentLevel As Long) As String
    
    NextNumber = "|fffd||fffd|" & C_SECTION_SEPARATER

End Property












Attribute VB_Name = "itemDiaB"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^[|fffd||fffd|]"
Private Const C_SECTION_SEPARATER As String = ""
Private Const C_SECTION_NAME As String = "|fffd||fffd|(|fffd||fffd||fffd||402||fffd||fffd|`)"
Private Const C_SECTION_CLASS As String = "itemDiaB"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property

Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngIndentLevel As Long) As String
    
    NextNumber = "|fffd||fffd|" & C_SECTION_SEPARATER

End Property









Attribute VB_Name = "itemDiaW"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^[|fffd||fffd|]"
Private Const C_SECTION_SEPARATER As String = ""
Private Const C_SECTION_NAME As String = "|fffd||fffd|(|fffd||fffd||fffd||402||fffd||fffd|`)"
Private Const C_SECTION_CLASS As String = "itemDiaW"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property

Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngIndentLevel As Long) As String
    
    NextNumber = "|fffd||fffd|" & C_SECTION_SEPARATER

End Property








Attribute VB_Name = "itemDouble"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^[|fffd||fffd|]"
Private Const C_SECTION_SEPARATER As String = ""
Private Const C_SECTION_NAME As String = "|fffd||fffd|(|fffd||fffd|d|fffd||fffd|)"
Private Const C_SECTION_CLASS As String = "itemDouble"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property

Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngIndentLevel As Long) As String
    
    NextNumber = "|fffd||fffd|" & C_SECTION_SEPARATER

End Property









Attribute VB_Name = "itemImp"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^[|fffd||fffd|]"
Private Const C_SECTION_SEPARATER As String = ""
Private Const C_SECTION_NAME As String = "|fffd||fffd|(|fffd||fffd||fffd||fffd|)"
Private Const C_SECTION_CLASS As String = "itemImp"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property

Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngIndentLevel As Long) As String
    
    NextNumber = "|fffd||fffd|" & C_SECTION_SEPARATER

End Property








Attribute VB_Name = "itemNum1"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^[0-9]+\)"
Private Const C_SECTION_SEPARATER As String = ""
Private Const C_SECTION_NAME As String = "1), 2), 3) |fffd||fffd||fffd| |fffd||fffd|"
Private Const C_SECTION_CLASS As String = "itemNum1"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property
Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " 1) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object

    Set objRegx = CreateObject("VBScript.RegExp")

    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)

    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If

    Set objMatch = Nothing
    Set objRegx = Nothing

End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngIndentLevel As Long) As String
       
    Dim i As Long
    Dim strNewNum As String
    Dim strNumber As String
    
    strNumber = Trim(SectionNumber(v))
    
    If strNumber = "" Then
        strNewNum = "1)" & C_SECTION_SEPARATER
    Else
        strNewNum = CStr(Val(Replace(strNumber, ")", "")) + 1) & ")" & C_SECTION_SEPARATER
    End If
    
    NextNumber = strNewNum

End Property



Attribute VB_Name = "itemNumA"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^[a-z]+\)"
Private Const C_SECTION_SEPARATER As String = ""
Private Const C_SECTION_NAME As String = "a), b), c) |fffd||fffd||fffd| z)"
Private Const C_SECTION_CLASS As String = "itemNumA"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property
Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " a) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function

Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngIndentLevel As Long) As String
       
    Dim i As Long
    Dim strNewNum As String
    Dim strNumber As String
    Dim lngAsc As Long
    
    strNumber = Trim(SectionNumber(v))
    
    If strNumber = "" Then
        strNewNum = "a)" & C_SECTION_SEPARATER
    Else
        lngAsc = Asc(Replace(Replace(strNumber, "", ""), ")", "")) + 1
        If lngAsc > Asc("z") Then
            lngAsc = Asc("a")
        End If
        strNewNum = "" & Chr(lngAsc) & ")" & C_SECTION_SEPARATER
    End If
    
    NextNumber = strNewNum

End Property





Attribute VB_Name = "itemNumA2"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^\([a-z]+\)"
Private Const C_SECTION_SEPARATER As String = ""
Private Const C_SECTION_NAME As String = "(a), (b), (c) |fffd||fffd||fffd| (z)"
Private Const C_SECTION_CLASS As String = "itemNumA2"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property
Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " (a) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function

Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngIndentLevel As Long) As String
       
    Dim i As Long
    Dim strNewNum As String
    Dim strNumber As String
    Dim lngAsc As Long
    
    strNumber = Trim(SectionNumber(v))
    
    If strNumber = "" Then
        strNewNum = "(a)" & C_SECTION_SEPARATER
    Else
        lngAsc = Asc(Replace(Replace(strNumber, "(", ""), ")", "")) + 1
        If lngAsc > Asc("z") Then
            lngAsc = Asc("a")
        End If
        strNewNum = "(" & Chr(lngAsc) & ")" & C_SECTION_SEPARATER
    End If
    
    NextNumber = strNewNum

End Property





Attribute VB_Name = "itemNumC"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^[|fffd|@-|fffd|S]"
Private Const C_SECTION_SEPARATER As String = ""
Private Const C_SECTION_NAME As String = "|fffd|@, |fffd|A, |fffd|B |fffd||fffd||fffd| |fffd|S"
Private Const C_SECTION_CLASS As String = "itemNumC"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property

Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " |fffd|@ |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngIndentLevel As Long) As String
       
    Dim i As Long
    Dim strNewNum As String
    Dim strNumber As String
    Dim lngAsc As Long
    
    strNumber = Trim(SectionNumber(v))
    
    If strNumber = "" Then
        strNewNum = "|fffd|@"
    Else
        lngAsc = Asc(strNumber) + 1
        If lngAsc > Asc("|fffd|S") Then
            lngAsc = Asc("|fffd|@")
        End If
        strNewNum = Chr(lngAsc)
    End If
    
    NextNumber = strNewNum & C_SECTION_SEPARATER

End Property





Attribute VB_Name = "itemNumExp"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^|fffd||fffd|[|fffd|P-|fffd|X]+\)"
Private Const C_SECTION_SEPARATER As String = ""
Private Const C_SECTION_NAME As String = "|fffd||fffd|P)"
Private Const C_SECTION_CLASS As String = "itemNumExp"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property
Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " |fffd||fffd|P) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object

    Set objRegx = CreateObject("VBScript.RegExp")

    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)

    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If

    Set objMatch = Nothing
    Set objRegx = Nothing

End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngIndentLevel As Long) As String
       
    Dim i As Long
    Dim strNewNum As String
    Dim strNumber As String
    Dim lngPos As Long
    Const STR As String = "|fffd|P|fffd|Q|fffd|R|fffd|S|fffd|T|fffd|U|fffd|V|fffd|W|fffd|X"
    
    strNumber = Trim(SectionNumber(v))
    
    If strNumber = "" Then
        strNewNum = "|fffd||fffd|P)" & C_SECTION_SEPARATER
    Else
        lngPos = InStr(STR, Replace(Replace(strNumber, "|fffd||fffd|", ""), ")", "")) + 1
        If lngPos > Len(STR) Then
            lngPos = 1
        End If
        strNewNum = "|fffd||fffd|" & Mid$(STR, lngPos, 1) & ")" & C_SECTION_SEPARATER
    End If
    
    NextNumber = strNewNum

End Property





Attribute VB_Name = "itemNumPoint2"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^[0-9.]+"
Private Const C_SECTION_SEPARATER As String = ""
Private Const C_SECTION_NAME As String = "1., 1.1., 1.1.1. |fffd||fffd||fffd| |fffd||fffd|"
Private Const C_SECTION_CLASS As String = "itemNumPoint2"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property

Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    Dim strBuf As String
    Select Case lngLevel
        Case 1
            strBuf = " 1. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 2
            strBuf = " 1.1. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 3
            strBuf = " 1.1.1. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 4
            strBuf = " 1.1.1.1. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 5
            strBuf = " 1.1.1.1.1. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case Else
            strBuf = " 1.1.1.1.1.1. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End Select
    
    SectionLevelName = strBuf

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngIndentLevel As Long) As String
       
    Dim i As Long
    Dim strNewNum As String
    Dim strNumber As String
    
    strNumber = Trim(SectionNumber(v))
    
    If strNumber = "" Then
        '|fffd||50d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||a347||fffd|A|fffd||fffd||fffd|x|fffd||fffd||fffd||249||fffd||fffd||fffd||fffd||fffd||fffd||50d||fffd||fffd||10d90||fffd||fffd||fffd||fffd||fffd|B
        For i = 0 To lngIndentLevel
            If strNewNum = "" Then
                strNewNum = "1"
            Else
                strNewNum = strNewNum & "." & "1"
            End If
        Next
    Else
        '|fffd||fffd||fffd||314||50d||fffd||fffd||fffd|t|fffd||502||fffd||fffd||fffd|
        Dim num As Variant
        Dim lngNum As Long
        
        num = Split(strNumber, ".")

        For i = 0 To lngIndentLevel
        
            Select Case i
                Case Is > UBound(num)
                    lngNum = 1
                Case lngIndentLevel
                    lngNum = Val(num(i)) + 1
                Case Else
                    lngNum = Val(num(i))
            End Select
        
            If strNewNum = "" Then
                strNewNum = lngNum
            Else
                strNewNum = strNewNum & "." & lngNum
            End If
        Next
    End If
    
    NextNumber = strNewNum & "." & C_SECTION_SEPARATER

End Property



Attribute VB_Name = "itemPoint"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^[|fffd|E]"
Private Const C_SECTION_SEPARATER As String = ""
Private Const C_SECTION_NAME As String = "|fffd|E(|fffd||fffd||fffd|_)"
Private Const C_SECTION_CLASS As String = "itemPoint"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property

Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " |fffd|E |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngIndentLevel As Long) As String
    
    NextNumber = "|fffd|E" & C_SECTION_SEPARATER

End Property





Attribute VB_Name = "itemRevTriB"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^[|fffd||fffd|]"
Private Const C_SECTION_SEPARATER As String = ""
Private Const C_SECTION_NAME As String = "|fffd||fffd|(|fffd||fffd||fffd|t|fffd|O|fffd|p)"
Private Const C_SECTION_CLASS As String = "itemRevTriB"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property

Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngIndentLevel As Long) As String
    
    NextNumber = "|fffd||fffd|" & C_SECTION_SEPARATER

End Property











Attribute VB_Name = "itemRevTriW"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^[|fffd||fffd|]"
Private Const C_SECTION_SEPARATER As String = ""
Private Const C_SECTION_NAME As String = "|fffd||fffd|(|fffd||fffd||fffd|t|fffd|O|fffd|p)"
Private Const C_SECTION_CLASS As String = "itemRevTriW"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property

Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngIndentLevel As Long) As String
    
    NextNumber = "|fffd||fffd|" & C_SECTION_SEPARATER

End Property










Attribute VB_Name = "itemSection"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^[ ][|fffd||fffd|][ ]"
Private Const C_SECTION_SEPARATER As String = " "
Private Const C_SECTION_NAME As String = "|fffd||fffd|(|fffd||7cb|L|fffd||fffd|)"
Private Const C_SECTION_CLASS As String = "itemSection"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property

Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngIndentLevel As Long) As String
    
    NextNumber = " |fffd||fffd|" & C_SECTION_SEPARATER

End Property









Attribute VB_Name = "itemSime"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^[|fffd|Y]"
Private Const C_SECTION_SEPARATER As String = ""
Private Const C_SECTION_NAME As String = "|fffd|Y(|fffd||fffd||fffd||fffd|)"
Private Const C_SECTION_CLASS As String = "itemSime"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property

Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " |fffd|Y |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngIndentLevel As Long) As String
    
    NextNumber = "|fffd|Y" & C_SECTION_SEPARATER

End Property











Attribute VB_Name = "itemSquareB"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^[|fffd||fffd|]"
Private Const C_SECTION_SEPARATER As String = ""
Private Const C_SECTION_NAME As String = "|fffd||fffd|(|fffd||fffd||fffd|l|fffd|p)"
Private Const C_SECTION_CLASS As String = "itemSquareB"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property

Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngIndentLevel As Long) As String
    
    NextNumber = "|fffd||fffd|" & C_SECTION_SEPARATER

End Property






Attribute VB_Name = "itemSquareW"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^[|fffd||fffd|]"
Private Const C_SECTION_SEPARATER As String = ""
Private Const C_SECTION_NAME As String = "|fffd||fffd|(|fffd||fffd||fffd|l|fffd|p)"
Private Const C_SECTION_CLASS As String = "itemSquareW"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property

Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngIndentLevel As Long) As String
    
    NextNumber = "|fffd||fffd|" & C_SECTION_SEPARATER

End Property







Attribute VB_Name = "itemStarB"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^[|fffd||fffd|]"
Private Const C_SECTION_SEPARATER As String = ""
Private Const C_SECTION_NAME As String = "|fffd||fffd|(|fffd||fffd||fffd||fffd|)"
Private Const C_SECTION_CLASS As String = "itemStarB"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property

Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngIndentLevel As Long) As String
    
    NextNumber = "|fffd||fffd|" & C_SECTION_SEPARATER

End Property











Attribute VB_Name = "itemStarW"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const C_SECTION_REGEXP As String = "^[|fffd||fffd|]"
Private Const C_SECTION_SEPARATER As String = ""
Private Const C_SECTION_NAME As String = "|fffd||fffd|(|fffd||fffd||fffd||fffd|)"
Private Const C_SECTION_CLASS As String = "itemStarW"
Public Property Get Class() As String
    Class = C_SECTION_CLASS
End Property

Public Function SectionLevelName(ByVal lngLevel As Long) As String
    
    SectionLevelName = " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

End Function
Public Property Get SectionName() As String
    SectionName = C_SECTION_NAME
End Property
Public Property Get SectionSeparator() As String
    SectionSeparator = C_SECTION_SEPARATER
End Property
Public Property Get SectionRegExp() As String
    SectionRegExp = C_SECTION_REGEXP
End Property
Public Property Get SectionNumber(ByVal v As String) As String

    Dim objRegx As Object
    Dim objMatch As Object
    
    Set objRegx = CreateObject("VBScript.RegExp")
        
    objRegx.Pattern = C_SECTION_REGEXP
    objRegx.IgnoreCase = False
    objRegx.Global = False

    Set objMatch = objRegx.Execute(v)
    
    If objMatch.count > 0 Then
        SectionNumber = objMatch(0).Value
    Else
        SectionNumber = ""
    End If
    
    Set objMatch = Nothing
    Set objRegx = Nothing
    
End Property
Public Property Get NextNumber(ByVal v As String, ByVal lngIndentLevel As Long) As String
    
    NextNumber = "|fffd||fffd|" & C_SECTION_SEPARATER

End Property











' InQuest injected base64 decoded content
' y'+y
' 	e"w^
' 	e"{
' 	e"{
' 	e"{
' (^r@%
' (^r@
' (^rC(v
' (^rD
' ~Z0:
' z j}
' z j}
' z j}
' bs]R
' -zb&j
' 	e"{
' 	e"{
' 	e"{
' (^r@
' (^rE'
' (^r@
' (^rD
' (^rD
' (^rB
' (^rC(v
' (^rCn
' (^r@%
' (^r@
' (^rD
' 	e"w^
' 	e"w^
' *'"w^
' -jx.
' -jx.
' -jx.

INQUEST-PP=macro
