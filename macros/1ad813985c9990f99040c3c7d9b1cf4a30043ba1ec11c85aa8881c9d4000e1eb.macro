Attribute VB_Name = "Module1"
Sub ReplaceCR()
' This routine searches for and deleted Carriage Return characters in text
' that comes from the price book database. Unless these are deleted,
' multi-line text has square blocks at the end of paragraphs where the
' CR is.

'The problem is if the cell contains too much text, we might be getting
'error "Formula too big."

'Is not currently used anywhere.
'Needs more work

    Cells.Replace What:=Chr(13), Replacement:="", LookAt:=xlPart, _
        SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False

End Sub

Sub DeleteStyles()

numStyles = ActiveWorkbook.Styles.Count
MsgBox "Number of Styles: " & numStyles
For i = 2 To numStyles
        Application.StatusBar = ""
        ActiveWorkbook.Styles(i).Delete
        Application.StatusBar = "Deleted Style: " & i
Next i
End Sub
Sub ConvertPrices()

'This routine assumes that the correct pricing cells on the Data worksheet have already
'been selected.

'The routine inspects prices and converts them from text values to numeric values.

    RowCounter = 0
        
    oldStatusBar = Application.DisplayStatusBar 'Save current status bar text to restore later.
    Application.DisplayStatusBar = True 'Allow me to write to status bar instead of Excel

    Application.ScreenUpdating = False  'Don't update the screen until done for faster processing

    For Each xCell In Selection
        
        'For faster speed, only process values that have a decimal point. Those are the only ones that cause problems when changing region or currency rate.
        'Update price from text to number value. Will be formatted per region settings
        'E.g., with decimal point for America or comma for EUR couuntries
        
        On Error Resume Next    'Skip in case of error
        
        If InStr(xCell.Value, ".") >= 1 Then xCell.Value = Val(xCell.Value)
            
           ' Provide a progress update on the status bar with every 10 prices updated
           
           RowCounter = RowCounter + 1
           If (RowCounter Mod 10) = 0 Then Application.StatusBar = "Checked/converted " & RowCounter & " prices."


    Next xCell
    
    Application.ScreenUpdating = True   'Turn screen updating on
        
    Application.StatusBar = ""
    Application.StatusBar = False   'Set status bar off so Excel can write to it
    Application.DisplayStatusBar = oldStatusBar 'Restore old status bar text
    
    Range("Table_DataTab[[#Headers],[ModelNumber]]").Select 'End the selection and put cursor in upper left corner


End Sub
Sub CtrlHome()
Attribute CtrlHome.VB_ProcData.VB_Invoke_Func = "H\n14"
    'Does a Ctrl+Home on all worksheets (except one that happens to be named 'Main Menu')
    
    numberOfWorksheets = Worksheets.Count
    
    For i = 1 To numberOfWorksheets
        If Sheets(i).Name = "Main Menu" Then GoTo Skip
        Sheets(i).Activate
        Range("A1").Select
Skip:
    Next i
    
'End up with the Main Menu worksheet selected, if there is one.
    For i = 1 To numberOfWorksheets
        If Sheets(i).Name <> "Main Menu" Then GoTo Skip2
        Sheets(i).Activate
    
Skip2:
    Next i
    
End Sub

Attribute VB_Name = "Module2"

Sub Macro_A10()
'
' Macro_A10 Macro
' Delete columns that don't apply on Price Book, New, Changed, Deleted and Data worksheets
'

'

    'Find out which price book we're working on
    
    PriceBookSelected = Range("PriceBookSelected").Value

    'Get first range to delete, if any
    
    On Error GoTo EntitlementsProblem
    
    columnNumber = Range("WWColumnSet1").Column
    
    deleteRange = Application.WorksheetFunction.VLookup(PriceBookSelected, Range("PriceBookNamesTable"), columnNumber, False)
    
    If deleteRange = "" Then Exit Sub
    
    On Error GoTo ProblemMsg
    
    Sheets("Price Book").Activate
    Columns(deleteRange).Delete
    Sheets("New").Activate
    Columns(deleteRange).Delete
    Sheets("Changed Prices").Activate
    Columns(deleteRange).Delete
    Sheets("Deleted").Activate
    Columns(deleteRange).Delete
    Sheets("Data").Activate
    Columns(deleteRange).Delete
    Sheets("Price Book").Activate

    'Get second range to delete, if any
    
    On Error GoTo EntitlementsProblem
    
    columnNumber = Range("WWColumnSet2").Column
    
    deleteRange = Application.WorksheetFunction.VLookup(PriceBookSelected, Sheets("Entitlements").Range("PriceBookNamesTable"), columnNumber, False)
    
    If deleteRange = "" Then Exit Sub
    
    On Error GoTo ProblemMsg
    
    Sheets("Price Book").Activate
    Columns(deleteRange).Delete
    Sheets("New").Activate
    Columns(deleteRange).Delete
    Sheets("Changed Prices").Activate
    Columns(deleteRange).Delete
    Sheets("Deleted").Activate
    Columns(deleteRange).Delete
    Sheets("Data").Activate
    Columns(deleteRange).Delete
    Sheets("Price Book").Activate

    Exit Sub

    
ProblemMsg:
    MsgBox "Macro_A10: There was some problem with the range or the column deletion has failed. " & _
        "You will have to manually delete the appropriate columns from the Price Book New, Changed Prices, " & _
        "Deleted and Data worksheets. Manually delete the pricing columns on each of these worksheets according to the price book being created."
    Exit Sub

EntitlementsProblem:
    MsgBox "Macro_A10: There was some problem on the Entitlements worksheet determining the correct range of columns to delete."
    Exit Sub
    
End Sub



Sub Macro_B1()
Attribute Macro_B1.VB_Description = "Remove Main Menu and Workbook protection"
Attribute Macro_B1.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro_B1 Macro
' Remove Main Menu and Workbook protection
'


On Error GoTo Failure

    'Get the password from the filename.
        
    workbookFileName = ThisWorkbook.Name
    
    'The workbookFileName includes the period and extension.
    'Remove the period and extension
    
    periodPosition = InStr(1, workbookFileName, ".")
    
    workbookFileName = Left(workbookFileName, periodPosition - 1)
    
    'Cut the last two characters off. For example if workbookFileName is 'PK082EA' (Rev 82 EMEA All channels), we want 'PK082'
    'If workbookFileName is a correction revision like 'PK082AEA (Rev 82A EMEA All channels), we want 'PK082A'
    
    passwordString = UCase(Mid(workbookFileName, 1, Len(workbookFileName) - 2))
        
    Sheets("Main Menu").Unprotect (passwordString)
    ActiveWorkbook.Unprotect (passwordString)
    Exit Sub
    
Failure:
    MsgBox "Macro_B1: The worksheet and/or workbook UNPROTECT may have failed. " & _
    "The macro was trying to use '" & passwordString & "' as the password. " & _
    "Please manaully unprotect the Main Menu worksheet and the workbook. " & _
    "Then unhide row 2, select the price book type, then run MacroSetB2."
End Sub
Sub Macro_B2()
'
' Macro_B2 Macro
' Unhide row 2 on Main Menu worksheet
'

'
    Sheets("Main Menu").Select
    Rows("1:3").Select
    Selection.EntireRow.Hidden = False
End Sub
Sub Macro_B3()
'
' Macro_B3 Macro
' Select price book type
'

'
    Range("F2:I2").Select
    MsgBox "Select the price book type from the drop-down in F2, then run MacroSetB2."
End Sub
Sub Macro_B4()
'
' Macro_B4 Macro
' Change File Properties
'
    subjectText = Range("PBVersion").Value & ", " & Range("PriceBookSelected")
    ActiveWorkbook.BuiltinDocumentProperties.Item("Subject") = subjectText
    
End Sub
Sub Macro_B5()
Attribute Macro_B5.VB_Description = "Change page layout"
Attribute Macro_B5.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro_B5 Macro
' Change page layout
'

'

If Range("PriceBookSelected").Value <> "North America Distributor" Then
    Sheets("Intro").Activate
    With ActiveSheet.PageSetup
        .Orientation = xlPortrait
        .PaperSize = xlPaperLetter
    End With
    Sheets("Price Book").Activate
    With ActiveSheet.PageSetup
        .Orientation = xlPortrait
        .PaperSize = xlPaperLetter
    End With
    Sheets("Warranty & Service").Activate
    With ActiveSheet.PageSetup
        .Orientation = xlPortrait
        .PaperSize = xlPaperLetter
    End With
End If
    
    Sheets("Price Book").Activate
    
    MsgBox "Continue with manual steps regarding entitlements, then continue with MacroSetB3."
    
End Sub

Sub Macro_B6()
Attribute Macro_B6.VB_Description = "Hide row 2 on Main Menu worksheet"
Attribute Macro_B6.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro_B6 Macro
' Hide row 2 on Main Menu worksheet
'

'
    Sheets("Main Menu").Select
    Rows("2:2").Select
    Selection.EntireRow.Hidden = True
    
End Sub
Sub Macro_B7()
'
' Macro_B7 Macro
' Save file in 2003 format

' Get foldername and filename from user
    fileNameDialog.Show
    If fileNameDialog.fileNameEntered.Value = "" Then GoTo ExitMsg
    
    fileNameString = UCase(fileNameDialog.fileNameEntered.Value)
    
    Path = "G:\Sales&Marketing\Marketing\New Drive\Docs\Pricing\Price Book\Released\" & _
        fileNameDialog.folderNameEntered.Value & "\" & fileNameString & ".xlsm"
    
    On Error GoTo InvalidPath
    ActiveWorkbook.SaveAs Filename:=Path _
        , FileFormat:=52, Password:="", WriteResPassword:="", _
        ReadOnlyRecommended:=False, CreateBackup:=False
    Exit Sub

ExitMsg:
    MsgBox "Macro_B7: FILE WAS NOT SAVED!"
    Exit Sub
    
InvalidPath:
    MsgBox "Macro_B7: The folder you specified does not exist or there was some problem with the file name. FILE WAS NOT SAVED!"
    Exit Sub
    
End Sub
Sub Macro_B9()
Attribute Macro_B9.VB_Description = "Hide Part Number column on Price Book, New, Changed and Deleted worksheets"
Attribute Macro_B9.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro_B9 Macro
' Hide Part Number column on Price Book, New, Changed Prices and Deleted worksheets
'

'
    Sheets("Price Book").Select
    Columns("I:I").EntireColumn.Hidden = True
    Sheets("New").Select
    Columns("I:I").EntireColumn.Hidden = True
    Sheets("Changed Prices").Select
    Columns("I:I").EntireColumn.Hidden = True
    Sheets("Deleted").Select
    Columns("I:I").EntireColumn.Hidden = True
    
    Sheets("Price Book").Select
End Sub
Sub Macro_B10()
Attribute Macro_B10.VB_Description = "Delete columns that don't apply on Price Book, New, Changed, Deleted and Data worksheets"
Attribute Macro_B10.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro_B10 Macro
' Delete columns that don't apply on Price Book, New, Changed, Deleted and Data worksheets
'

'

    'Find out which price book we're working on
    
    PriceBookSelected = Range("PriceBookSelected").Value

    'Get first range to delete, if any
    
    On Error GoTo EntitlementsProblem
    
    columnNumber = Range("ColumnSet1").Column
    
    deleteRange = Application.WorksheetFunction.VLookup(PriceBookSelected, Range("PriceBookNamesTable"), columnNumber, False)
    
    If deleteRange = "" Then Exit Sub
    
    On Error GoTo ProblemMsg
    
    Sheets("Price Book").Activate
    Columns(deleteRange).Delete
    Sheets("New").Activate
    Columns(deleteRange).Delete
    Sheets("Changed Prices").Activate
    Columns(deleteRange).Delete
    Sheets("Deleted").Activate
    Columns(deleteRange).Delete
    Sheets("Data").Activate
    Columns(deleteRange).Delete
    Sheets("Price Book").Activate

    'Get second range to delete, if any
    
    On Error GoTo EntitlementsProblem
    
    columnNumber = Range("ColumnSet2").Column
    
    deleteRange = Application.WorksheetFunction.VLookup(PriceBookSelected, Range("PriceBookNamesTable"), columnNumber, False)
    
    If deleteRange = "" Then Exit Sub
    
    On Error GoTo ProblemMsg
    
    Sheets("Price Book").Activate
    Columns(deleteRange).Delete
    Sheets("New").Activate
    Columns(deleteRange).Delete
    Sheets("Changed Prices").Activate
    Columns(deleteRange).Delete
    Sheets("Deleted").Activate
    Columns(deleteRange).Delete
    Sheets("Data").Activate
    Columns(deleteRange).Delete
    Sheets("Price Book").Activate

    Exit Sub

    
ProblemMsg:
    MsgBox "Macro_B10: There was some problem with the range or the column deletion has failed. " & _
        "You will have to manually delete the appropriate columns from the Price Book New, Changed Prices, " & _
        "Deleted and Data worksheets. If file is in bad shape, close without saving, then re-open last saved " & _
        "file and repeat step #9 (hiding the Part Number column on the Price Book, New, Changed Prices and Deleted worksheets)."
    Exit Sub

EntitlementsProblem:
    MsgBox "Macro_B10: There was some problem on the Entitlements worksheet determining the correct range of columns to delete."
    Exit Sub
    
End Sub
Sub Macro_B11()
Attribute Macro_B11.VB_Description = "Copy Price Book worksheet"
Attribute Macro_B11.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro_11 Macro
' Copy Price Book worksheet
'

'
    Sheets("Price Book").Select
    Sheets("Price Book").Copy Before:=Sheets("New")
End Sub
Sub Macro_B12()
Attribute Macro_B12.VB_Description = "Remove code from Price Book (2) worksheet"
Attribute Macro_B12.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro_B12 Macro
' Remove code from Price Book (2) worksheet
'

'
    Sheets("Price Book (2)").Select
    Beep
    MsgBox "Continue with steps to delete Visual Basic code from the Price Book (2) worksheet, then continue with MacroSetB4."
End Sub
Sub Macro_B13()
Attribute Macro_B13.VB_Description = "Rename the Price Book (2) worksheet"
Attribute Macro_B13.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro_B13 Macro
' Rename the Price Book (2) worksheet
'

'
    Sheets("Price Book (2)").Select
    Sheets("Price Book (2)").Name = "Quick Ref"
End Sub
Sub Macro_B14()
Attribute Macro_B14.VB_Description = "Unfreeze panes on Quick Ref worksheet"
Attribute Macro_B14.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro_B14 Macro
' Unfreeze panes on Quick Ref worksheet
'

'
    Sheets("Quick Ref").Select
    ActiveWindow.FreezePanes = False
    
    If Range("PriceBookSelected").Value = "North America Distributor" Then
        ActiveSheet.PageSetup.Orientation = xlPortrait
    End If
        
End Sub
Sub Macro_B15()
Attribute Macro_B15.VB_Description = "Unhide columns E though L on Quick Ref worksheet"
Attribute Macro_B15.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro_B15 Macro
' Unhide columns E though L on Quick Ref worksheet
'

'
    Columns("E:L").EntireColumn.Hidden = False
End Sub
Sub Macro_B16()
Attribute Macro_B16.VB_Description = "Hide orange columns F, G, H and I on Quick Ref worksheet"
Attribute Macro_B16.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro_B16 Macro
' Hide orange columns F, G, H and I on Quick Ref worksheet
'

'
    Columns("F:I").EntireColumn.Hidden = True
End Sub
Sub Macro_B17()
Attribute Macro_B17.VB_Description = "Delete columns K, L and M on Quick Ref worksheet"
Attribute Macro_B17.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro_B17 Macro
' Delete columns K, L and M on Quick Ref worksheet
'

'
    Columns("K:M").Delete Shift:=xlToLeft
    
End Sub
Sub Macro_B18()
Attribute Macro_B18.VB_Description = "Change page header on Quick Ref worksheet"
Attribute Macro_B18.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro_B18 Macro
' Change page header on Quick Ref worksheet
'

'
    Range("A1:Q1").Select
    ActiveCell.FormulaR1C1 = _
        "=PB_Region&"" ""&PB_Type&"" Quick Reference Price Guide"""
    Range("A2:J2").Select
End Sub
Sub Macro_B19()
Attribute Macro_B19.VB_Description = "Reposition and freeze panes on Quick Ref worksheet"
Attribute Macro_B19.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro_B19 Macro
' Reposition and freeze panes on Quick Ref worksheet
'

'
    ActiveWindow.LargeScroll Down:=1
    Range("A25").Select
    Application.GoTo Reference:="R2C1"
    Application.GoTo Reference:="R6C10"
    ActiveWindow.FreezePanes = True
End Sub
Sub Macro_B20()
Attribute Macro_B20.VB_Description = "Save the file"
Attribute Macro_B20.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro_B20 Macro
' Save the file
'

'
    ActiveWorkbook.Save
End Sub
Sub Macro_B21()
Attribute Macro_B21.VB_Description = "Ctrl+Home on all worksheets except Main Menu"
Attribute Macro_B21.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro_B21 Macro
' Ctrl+Home on all worksheets except Main Menu
'

'
    Sheets("Data").Select
    Range("A1").Select
    Sheets("Deleted").Select
    Range("J6").Select
    Sheets("Changed Prices").Select
    Range("J5").Select
    Sheets("New").Select
    Range("M6").Select
    Sheets("Quick Ref").Select
    Range("J6").Select
    Sheets("Warranty & Service").Select
    Range("A1:O1").Select
    Sheets("Price Book").Select
    Range("L6").Select
    Sheets("Intro").Select
    Range("A1:K1").Select
End Sub
Sub Macro_B22()
Attribute Macro_B22.VB_Description = "Put cursor on currency rate box on Main Menu worksheet"
Attribute Macro_B22.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro_B22 Macro
' Put cursor on currency rate box on Main Menu worksheet
'

'
    Sheets("Main Menu").Select
    Range("CurrencyRateEntered").Select
End Sub
Sub Macro_B23()
Attribute Macro_B23.VB_Description = "Password protect Main Menu worksheet and workbook"
Attribute Macro_B23.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro_B23 Macro
' Password protect Main Menu worksheet and workbook
'
    'Get the password from the filename.
    'Find the last backslash in the full path name.
    'Then from there to the period is the filename.
    'Take off the last two characters and that is the password (e.g., PK077)
    
    On Error GoTo B23Error
    
    fullPathName = ActiveWorkbook.FullName
    
    For i = 1 To 999
    
        backslashPosition = InStr(i, fullPathName, "\")
        If backslashPosition <> 0 Then
            i = backslashPosition + 1   'Reset point to one past found backslash
        Else    'i is pointing to one past the last backslash
        
            periodPosition = InStr(1, fullPathName, ".")
            
            passwordString = Left(UCase(Mid(fullPathName, i - 1, periodPosition - 1 - 1)), 5)
            i = 1000    'Stop the looping
        End If
        
    Next i
    
    ActiveSheet.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True, Password:=passwordString
    ActiveWorkbook.Protect Structure:=True, Windows:=False, Password:=passwordString
    Exit Sub
    
B23Error:
    MsgBox "Macro_B23: There was some problem with setting the workbook and/or worksheet protection. " & _
    "Please re-open the file and set the workbook and Main Menu worksheet protection manually."
    Exit Sub


End Sub
Sub Macro_B24()
'
' Macro_B24 Macro
' Close and save file

    Beep
    ActiveWorkbook.Close SaveChanges:=True
    
End Sub

Attribute VB_Name = "Module3"
Sub ActivateEvents()
' If someone aborts the Workbook_BeforePrint event routine (below)
' or the Worksheet_BeforeCalculation event routing (attached to
' the Price Book tab, which concatenates and formats cells)
' before it completes, events may remain disabled and
' the event routine would thereafter not be able
' to be envoked. This routine turns on events again whenever
' a worksheet becomes active so that the event
' can be trapped and acted on.

        Application.EnableEvents = True
        Application.StatusBar = ""

End Sub
Attribute VB_Name = "Module4"
Sub MacroSetB1()
    Call Macro_B1
    Call Macro_B2
    Call Macro_B3
End Sub
Sub MacroSetB2()
    Call Macro_B4
    Call Macro_B5
End Sub
Sub MacroSetB3()
    Call Macro_B6
    Call Macro_B7
    Call Macro_B9
    Call Macro_B10
    Call Macro_B11
    Call Macro_B12
End Sub
Sub MacroSetB4()
    Call Macro_B13
    Call Macro_B14
    Call Macro_B15
    Call Macro_B16
    Call Macro_B17
    Call Macro_B18
    Call Macro_B19
    Call Macro_B20
    Call Macro_B21
    Call Macro_B22
    Call Macro_B23
    Call Macro_B24

End Sub

Attribute VB_Name = "Module5"
Attribute VB_Name = "Module6"
Sub CreatePriceBookVersion()
'
' CreatePriceBookVersion Macro
'
' This routine is called from the Worksheet_Change routine on the Main Menu worksheet.
' That routine runs whenever cell PriceBookSelected (at E2) on the main menu page is
' changed (i.e., when a new price book type is selected).

' This routine updates the queries on the New, Changed Prices, Deleted and Data tabs
' according to the price book being created.

' When the Price Book worksheet goes to look up the model numbers, if a model
' number row has been deleted from the Data table (because it does not apply
' to the version being created), the VLOOKUPs will return "#N/A" values.
' The ReformatPriceBook routine then hides these rows on the Price Book tab
' so users don't see them.

' You don't want to DELETE the #N/A rows on the Price Book worksheet (just
' hide them) because they may be #N/A for a certain service zone and
' not #N/A for other zones. For example, user may select Zone 1 and see
' a professional service that is available in North America, then switches
' to Zone 2, which concatenates a "2" onto the model number.
' If that service is not offered in Zone 2, there will be no SKU found in the Items
' table and it will come back as #N/A. But if user switches back to Zone 1, the item
' is found and reappears.
'
' This works in conjunction with the ReformatPriceBook routine which does the actual
' formatting (description, etc.) and hides the #N/A rows on the Price Book worksheet.
    
    Dim SheetNames As Variant
    Dim PriceBookCodeColumnNames As Variant
    
    Application.ScreenUpdating = False  'Suppress updates to screen for faster processing
    CurrentCalculationMode = Application.Calculation 'save the current calculation mode and restore before exiting
    Application.Calculation = xlCalculationManual   'set calculation mode to manual so that auto calculation doesn't start every time this routine changes a cell!
'COMMENTED OUT CAUSES TOO MUCH DELAY        Application.CalculateBeforeSave = True 'however, ensure workbook is calculated before saving
    CurrentWorksheetName = ActiveCell.Worksheet.Name    'Remember which worksheet is currently active
    
    'Now, setup an array with the names of the worksheets we'll modify. These
    'worksheets will need to have a "ModelNumber" column heading that marks
    ' the beginning of a table that is updated from the database.
    
    SheetNames = Array("New", "Changed Prices", "Deleted", "Data")
    
    'NOTE: Array index starts at zero
    
    NumSheets = 4   'The number of sheets listed above
    
    'The queries that generate the tables include a column that contains codes that show
    'which price book(s) each item is to appear in. If an item it not supposed to be included
    'the price will be "N/A" and the query will not put in a price book code for that region/channel.
    
    'However, as of Excel 2007, we're no longer using a single New, Chnaged Prices, Deleted and Data
    'query and then filtering and deleting the rows that don't apply. The new Table format for returned
    'query data does not allow data rows to be deleted (and even if it did, row deletion takes too
    'long in Excel 2007.
    
    'Setup an array with the names of the columns in each of these worksheets that contain the price book codes

    Rem PriceBookCodeColumnNames = Array("New_PriceBookCodes", "ChangedPrices_PriceBookCodes", "Deleted_PriceBookCodes", "Data_PriceBookCodes")
    
    'Get the name of the price book type that is being generated stored in the named cell
    'PriceBookSelected" on the Main Menu worksheet. This comes from a list on the Entitlements worksheet.
        
    PriceBookSelected = Range("PriceBookSelected").Value

    'First, go to each sheet and get an update from the database. This will ensure that all
    'records are refreshed and we have all SKUs and zones listed to begin with
    
    For WS = 0 To NumSheets - 1 'Do the following for each of the worksheets named above
     
        If Sheets(SheetNames(WS)).Visible = True Then  'Inspect if sheet is hidden or not
            CurrentSheetStatus = "Visible"   'Save for later"
        Else
            Sheets(SheetNames(WS)).Visible = True   'Make it visible so it can be worked on
            CurrentSheetStatus = "Hidden"   'Save for later
        End If
        
        Sheets(SheetNames(WS)).Select   'Select the worksheet to work on
        Range("A1").Select  'Go to top corner
        
        'Show which worksheet is being updated
        Application.StatusBar = "Updating the '" & SheetNames(WS) & "' worksheet from the database. Please wait..."
        
        'If you're working on the Data worksheet, go to cell A1
        'If not, find the cell that has "ModelNumber" heading
        
        If SheetNames(WS) = "Data" Then
            Range("A1").Select  'Go to top corner
        Else
            Cells.Find(What:="ModelNumber", After:=ActiveCell, LookIn:=xlFormulas, _
                LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, _
                MatchCase:=False, SearchFormat:=False).Activate
        End If
        
        'Find the name of the query that we're going to run on the active worksheet based on the price book type being created.
        'The query names are stored in the PriceBookNames table on the Entitlements worksheet.
        
        columnNumber = Range("QueryName").Column
  
        QueryName = Application.WorksheetFunction.VLookup(PriceBookSelected, Sheets("Entitlements").Range("PriceBookNamesTable"), columnNumber, False)
                    
        'Append the worksheet name (the queries are like "New Tab APAC_All" or "Changed Prices Tab EMEA_Platinum"
        'Update the query

        QueryName = SheetNames(WS) & " Tab " & QueryName
        
        With Selection.ListObject.QueryTable
            .CommandType = xlCmdTable
            .CommandText = Array(QueryName)
            .Refresh BackgroundQuery:=False
        End With
          
        Range("A1").Select  'Go to top corner
    
        If CurrentSheetStatus = "Hidden" Then Sheets(SheetNames(WS)).Visible = False    'If if was hidden, hide it again
   
    Next WS
    
    Application.StatusBar = ""  'Clear the status message
    
    Application.ScreenUpdating = True   'Turn on screen updating
    Application.Calculation = CurrentCalculationMode 'Restore the user's original calculation mode
   
   'NOTE: If user's mode was Auto Calc, this will cause recalculation at this point
    
    Worksheets(CurrentWorksheetName).Activate   'Return from whence you came

End Sub
Attribute VB_Name = "PrintOptionChoice"
Attribute VB_Base = "0{205435E7-578C-43EC-B8E1-C915E8668202}{F9C83EF9-7888-4852-B98C-095A7BDCF17D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub Cancel_Click()
' User clicked Cancel button.

    lblHidden.Caption = "Cancel"
    Me.Hide

End Sub



Private Sub OK_Click()
' User Clicked OK button.

    lblHidden.Caption = "OK"
    Me.Hide
    
End Sub
Private Sub PriceBook_Click()
' User has selected the Price Book option. Show the Section subchoices in the dialog box
    Section.Visible = True
    
End Sub

Private Sub QuickRef_Click()
' User has selected the Quick Reference option. Show the Section subchoices in the dialog box
    Section.Visible = True
        
End Sub
Private Sub SelectedWorksheets_Click()
' User has selected the Selected Worksheet(s) option. Hide the Section subchoices in the dialog box
    Section.Visible = False
    
    
End Sub
Private Sub Complete_Click()
' User has selected the Complete option. Reset all the sections as unchecked
    TapeDrives.Value = False
    StorageSystems.Value = False
    Media.Value = False
    
    SelectedSections.Value = False
    Complete.Value = True
    
End Sub
Private Sub SelectedSections_Click()
' User has selected the Selected Sections choice. Initially set all sections as checked if none
' of them are, but leave alone if some are already checked

If TapeDrives.Value = False And StorageSystems.Value = False And Media.Value = False Then
    TapeDrives.Value = True
    StorageSystems.Value = True
    Media.Value = True
End If
    
End Sub
Private Sub TapeDrives_Click()
' User has selected the Tape Drives section. Make sure the Selected Sections radio button is turned on
    SelectedSections.Value = True
    
End Sub
Private Sub StorageSystems_Click()
' User has selected the Storage Systems section. Make sure the Selected Sections radio button is turned on
    SelectedSections.Value = True

End Sub
Private Sub Media_Click()
' User has selected the Media section. Make sure the Selected Sections radio button is turned on
    SelectedSections.Value = True

End Sub
Private Sub ADICProducts_Click()
' User has selected the ADIC Products section. Make sure the Selected Sections radio button is turned of
    SelectedSections.Value = True
End Sub



Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
     Public Sub ReformatPriceBook()
Attribute ReformatPriceBook.VB_ProcData.VB_Invoke_Func = "q\n14"
    
    ' Concatenates the CurrentModel in Column C (if present)
    ' with the OldModel in Column D (if present) with a line-feed
    ' separator and formats the old model number with strikethrough font
    ' and puts the resulting text in Column E (Displayed Model Number).
    '
    ' Concatenates the CurrentPart in Column F (if present)
    ' with the OldPart in Column G (if present) with a line-feed
    ' separator, formats the old part number with strikethrough font,
    ' concatenates with RohsPartNumber in Column H (if present)
    ' and formats the RohsPartNumber in parantheses
    ' and puts the resulting text in Column I (Displayed Part Number).
    '
    ' Concatenates the ShortDesc in Column J (if present)
    ' with the ItemNote in Column K (if present) with a line-feed
    ' separator and formats the description part with bold and the
    ' note with italic font and puts the resulting text in
    ' Column L (Displayed Description).
    '
    ' If the Change Code in Column B is "D" (deleted item), then
    ' format the ShortDesc in Column J with Strikethrough text (this column
    ' is displayed in the Quick Reference Price Guide).
    '
    ' If the source columns (B, C, F, J) change or the destination columns
    ' (E, I, L) change, the source column(s) in quotes in the line(s)
    ' beginning with "Range" (e.g., Range("B" &...) will need to change
    ' and the destination column(s) in the line(s) beginning with
    ' For Each cell In Range (e.g., For Each cell In Range("E1:E" &...)
    ' will need to be updated.
    '
    ' This code is written so that the two source columns with text
    ' that needs to be concatenated are immediately to the left of
    ' the destination column.
    '
        Dim cell As Range
        Dim RowCounter As Integer
        Dim i As Integer
        Dim x As Integer

     
        Application.CalculateFull   'Calculate entire workbook to update service model numbers and lookups

        RowCounter = 0
        
        oldStatusBar = Application.DisplayStatusBar 'Save current status bar text to restore later.
        Application.DisplayStatusBar = True 'Allow me to write to status bar instead of Excel

        Application.ScreenUpdating = False  'Suppress updates to screen for faster processing

        CurrentCalculationMode = Application.Calculation 'save the current calculation mode and restore before exiting
        Application.Calculation = xlCalculationManual   'set calculation mode to manual so that auto calculation doesn't start every time this routine changes a cell!

'COMMENTED OUT        Application.CalculateBeforeSave = True 'however, ensure workbook is calculated before saving
        
        Application.EnableEvents = False    'Don't process any other events while this runs
        
        Sheets("Price Book").Activate   'Activate the Price Book worksheet
        
        
        
        ActiveSheet.Unprotect   'Remove worksheet protection, if protected (will prompt for password if present)
        
        theCell = ActiveCell.Address    'Save location where cursor currently is to restore position later
        
            'In case any rows were hidden when there was an invalid, non-existent service item
            'and the user switches back to a zone where the service DOES exist, first
            'unhide all the rows between the cell named TopLeftCorner (should be cell A5,
            'next to the "Change" column heading) and the cell named LastCell
            
                Application.GoTo Reference:="TopLeftCorner:LastCell"
                Selection.EntireRow.Hidden = False
                
            'Format everything to no strikethrough
                Selection.EntireRow.Font.Strikethrough = False
                
        'Get the last row number marked by the cell named LastCell
        lastRow = Range("LastCell").Row
                    
        'Get the last column number marked by the cell named LastCell
        lastColumn = Range("LastCell").Column
        
        'We'll start the process at row 8, which is just below the
        'first section heading where a model number might start.
        
        For rownum = 8 To lastRow
        
            
            ' FIRST, PROCESS THE MODEL NUMBER STUFF
            
            'Column D (4) is where the Old Model Number lookup value is
            
            ' If there is an error value (#NA) in the Old Model Number (column 4)
            ' after doing the lookup of the hard-coded Model Number (column 3)
            ' then the item is missing. It could be a service that is not offered
            ' in other zones or the item is not available in the region/channel
            ' price book being produced.
            ' In this case, hide the #NA row and skip the rest of the formatting.
            
            
                If IsError(Cells(rownum, 4).Value) Then 'Old Model contains an #N/A error. Item not found.
                    Rows(rownum).RowHeight = 0              'This will hide the row. We don't want to
                                                'show #NA rows for unavailable products/services.
                    GoTo SkipThisRow            'Skip the rest of the formatting
                End If
                
            
            'OK, if the row didn't return #N/A,
            'then proceed with the formatting of the row.
            
            ' If there is an OldModel (column 4) then assume that there must be a Current Model
            ' and concatenate the current and old model numbers and put them in column 5
            
                If Cells(rownum, 4).Value <> "" Then
                    Cells(rownum, 5).Value = Cells(rownum, 3).Value & Chr(10) & Cells(rownum, 4).Value 'concatenate with a linefeed
                    
                    'Format the old model number part with strikethrough
                  
                    Cells(rownum, 5).Characters(Len(Cells(rownum, 3).Text) + 2).Font.Strikethrough = True
                Else
            ' If there is a CurrentModel, but no OldModel:
            
                    If Cells(rownum, 3).Value <> "" Then Cells(rownum, 5).Value = Cells(rownum, 3).Value
               
               ' There is not a CurrentModel, just skip to next row/cell
             
                End If
                
ProcessPartNumber:
             
            ' SECOND, PROCESS THE PART NUMBER STUFF
                        
            ' If there is an OldPart (column 7) then assume that there must be a current PartNumber
            ' and concatenate the current and old part numbers and put them in column 9
            
                If Cells(rownum, 7).Value <> "" Then
                    Cells(rownum, 9).Value = Cells(rownum, 6).Value & Chr(10) & Cells(rownum, 7).Value 'concatenate with a linefeed
                                        
                    'Format the old part number part with strikethrough
                    
                    Cells(rownum, 9).Characters(Len(Cells(rownum, 6).Text) + 2).Font.Strikethrough = True
                    
                Else
            
            ' If there is a current PartNumber, but no OldPartNumber:
            
                    If Cells(rownum, 6).Value <> "" Then Cells(rownum, 9).Value = Cells(rownum, 6).Value
                    If Cells(rownum, 6).Value = 0 Or Cells(rownum, 6) = "" Then Cells(rownum, 9).Value = "" 'Don't store a zero value
           
                
                End If
                
ProcessRohsPartNumber:

        'If there is a RohsPartNumber, add it in paranthesis with a preceding linefeed to
        ' what is already in column 9, the displayed part numbers
                    
                If Cells(rownum, 8) <> "" Then
                    Cells(rownum, 9).Value = Cells(rownum, 9).Value & Chr(10) & "(" & Cells(rownum, 8).Value & ")"
                    
                    'For some reason, if the cells includes strikethrough text because
                    'there was a changed part number, signified by an OldPartNumber in
                    'column 7, the statement above removes the formatting, so we
                    'need to re-apply it.
                    
                    If Cells(rownum, 7).Value <> "" Then   'There is an old part number
                        'Format the OldPartNumber part as strikethrough
                        Cells(rownum, 9).Characters(Len(Cells(rownum, 6).Text) + 2, Len(Cells(rownum, 7).Text)).Font.Strikethrough = True
                    End If
                
                End If
                
                
ProcessDescription:

            
            ' NEXT, PROCESS THE FULL DESCRIPTION STUFF
            
            
            'If the ChangeCode column 2 has a "D" or ", D" or a #NA Error
            '(which can legitimately happen when the model number lookup fails
            'to find an item, such as a service not offered in the currently selected
            'zone and we'll be hiding that row later), then there's no sense in
            'concatenating the ItemNote in column 11 with the main description
            'in column 10. If item is marked deleted, why bother showing the long note?
            'HOWEVER, don't just null out the ItemNote column 11 because that will
            'remove the formula there. Just skip doing the concatentation.
            
            If IsError(Cells(rownum, 2).Value) Then GoTo SkipConcatenation
            
            If (Cells(rownum, 2).Value = "D" Or InStr(1, Cells(rownum, 2).Value, ", D") > 0) Then GoTo SkipConcatenation
            
            
                If Cells(rownum, 11).Value <> "" Then
                
                    Cells(rownum, 12).Value = Cells(rownum, 10).Value & Chr(10) & Cells(rownum, 11).Value 'concatenate with a linefeed
                    Cells(rownum, 12).Characters(1, Len(Cells(rownum, 10).Text)).Font.Bold = True 'Make the description bold
                    With Cells(rownum, 12).Characters(Len(Cells(rownum, 10).Text) + 2).Font
                        .Bold = False
                        .Italic = True  'Make the item note part italic
                    End With
                    
                Else
                
            ' If there is a ShortDesc, but no ItemNote, or we decided to skip concatenation above
SkipConcatenation:
            
                    If Cells(rownum, 10).Value <> "" Then
                        Cells(rownum, 12).Value = Cells(rownum, 10).Value
                        Cells(rownum, 12).Font.Bold = True 'Make description bold
                    End If
             
             ' There is not a ShortDesc, such as a heading row, just skip to next row/cell
             
                End If
                
ProcessDeletions:
                
             ' NEXT, PROCESS THE DELETIONS
             
             ' If the Change Code is "D" or contains ", D" and it's not an "#N/A" error
             ' (that can happen when a model number can't be found in the Data table), format
             ' the cells (some should be strikethrough and some should not
             
                    If IsError(Cells(rownum, 2).Value) Then GoTo SkipThisRow
                    If (Cells(rownum, 2).Value = "D" Or InStr(1, Cells(rownum, 2).Value, ", D") > 0) Then
                       Cells(rownum, 2).Font.Strikethrough = False   'Change column not strikethrough
                       Cells(rownum, 3).Font.Strikethrough = False   'Current Model Number Source
                       Cells(rownum, 4).Font.Strikethrough = False   'Old Model Number Source
                       Cells(rownum, 5).Font.Strikethrough = True    'Model Number (displayed)
                       Cells(rownum, 6).Font.Strikethrough = False   'Current Part Number Source
                       Cells(rownum, 7).Font.Strikethrough = False   'Old Part Number Source
                       Cells(rownum, 8).Font.Strikethrough = False   'Rohs Part Number Source
                       Cells(rownum, 9).Font.Strikethrough = True    'Part Number (displayed)
                       Cells(rownum, 10).Font.Strikethrough = True    'Short Description (format with strikethrough because this column is shown on QuickRef
                       Cells(rownum, 11).Font.Strikethrough = False  'Item Note
                       
                       'All the rest of the cells on this row from displayed description column 12
                       'to the Warranty column on the end should be strikethrough
                       
                       For i = 12 To lastColumn
                            Cells(rownum, i).Font.Strikethrough = True
                       Next i
                        
                       
                       
                    'Else    'Not Deleted, so turn off any existing strikethrough on all cells,
                            'except column 5 that may contain a model number
                            'with an old model number under it in strikethrough and
                            'column 9 that may contain a part number with an old part number
                            'in strikethrough under it.
                            
                        'Cells(rowNum, 2).Font.Strikethrough = False 'Change column not strikethrough
                        'Cells(rowNum, 3).Font.Strikethrough = False 'Model number
                        'Cells(rowNum, 4).Font.Strikethrough = False 'Old model number
                        'Cells(rowNum, 6).Font.Strikethrough = False
                        'Cells(rowNum, 7).Font.Strikethrough = False
                        'Cells(rowNum, 8).Font.Strikethrough = False
                       
                        'For i = 10 To lastColumn
                            'Cells(rowNum, i).Font.Strikethrough = False 'Get all the rest
                        'Next i
                        
                            
                            
                    End If
                    
                
             
                    
SkipThisRow:
           
                  
           
           ' Provide a progress update on the status bar with every 25 rows updated
           
           RowCounter = RowCounter + 1
           If (RowCounter Mod 20) = 0 Then Application.StatusBar = "Updated through row: " & RowCounter
           
    Next rownum 'Loop and continue
    
        'We're almost done now...
        
        Application.StatusBar = "Please wait..."
                
        Application.ScreenUpdating = True   'Turn on screen updating
        Application.Calculation = CurrentCalculationMode 'Restore the user's original calculation mode
                                                         'NOTE: If user's mode was Auto Calc, this will cause recalculation at this point

        Application.StatusBar = ""
        Application.StatusBar = False   'Set status bar off so Excel can write to it
        Application.DisplayStatusBar = oldStatusBar 'Restore old status bar text
        
        For i = 1 To 3    ' Loop 3 times.
             Beep    ' Sound a tone to alert the user that all is done now.
        Next i
        
        Application.EnableEvents = True 'Give back control so events can be processed again
        
        Range(theCell).Select   'Put cursor back where you started.
                                'This cancels the selection of the entire sheet.
        
        
End Sub
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "GBP, 193, 0, MSForms, OptionButton"
Attribute VB_Control = "GoNavigateButton, 113, 1, MSForms, CommandButton"
Attribute VB_Control = "UpdateButton, 111, 2, MSForms, CommandButton"
Attribute VB_Control = "OtherCurrency, 103, 3, MSForms, OptionButton"
Attribute VB_Control = "EUR, 102, 4, MSForms, OptionButton"
Attribute VB_Control = "USCurrency, 101, 5, MSForms, OptionButton"
Attribute VB_Control = "Zone3, 84, 6, MSForms, OptionButton"
Attribute VB_Control = "Zone2, 3, 7, MSForms, OptionButton"
Attribute VB_Control = "Zone1, 2, 8, MSForms, OptionButton"
' The named cell "PBZone" is in a hidden row 22.
' It contains the numeric value corresponding to the chosen
' service zones that the user selects. It is displayed at
' the top of price book pages.
' The cell named "CurrencyRateEntered" at is the user-entered manual conversion rate.
' The cell named "CurrencyName" is in hidden row 22. It contains the string
' "US Dollars", "Euros", "GBP" or "Other" depending on which option is clicked. This
' string is displayed at the top of the price book pages.
' When the user is finished making selections, they will click an Update button
' that will kick off the routine to apply the currency conversion and show
' the appropriate service zone rows.

Private Sub EUR_Click()
' User clicked the EUR Currency option
    
    Sheets("Main Menu").Select
    Range("CurrencyName") = "EUR"   'Put in the text string that will be displayed at the top of the price book pages
    Range("CurrencyRateEntered") = ""   'Null out the user-entered "Other" currency rate.
    Answer = MsgBox(Prompt:="For EMEA, when pricing is displayed in EUR or GBP, media prices use the media currency exchange rate in effect during the month the price book was published. " & _
        "Refer to separately published EMEA media pricing in subsequent months for updated EUR and GBP pricing. " & Chr(10) & Chr(10) & _
        "REMEMBER TO CLICK THE UPDATE BUTTON AFTER CLOSING THIS DIALOG BOX.", _
        Buttons:=vmOKOnly, Title:="EUR Currency Selected")
        
    Range("A1").Select 'Park the cursor in upper left

End Sub

Private Sub GBP_Click()
' User clicked the GBP Currency option
' Put the GBP conversion rate in the CurRate and Cur2Rate cells
' The company determined GBP1Rate is stored in the cell named "GBP1Rate" which is hidden on row 19
    
    Sheets("Main Menu").Select
    Range("CurrencyName") = "GBP"   'Put in the text string that will be displayed at the top of the price book pages
    Range("CurrencyRateEntered") = ""   'Null out the user-entered "Other" currency rate.
    Answer = MsgBox(Prompt:="For EMEA, when pricing is displayed in EUR or GBP, media prices use the media currency exchange rate in effect during the month the price book was published. " & _
        "Refer to separately published EMEA media pricing in subsequent months for updated EUR and GBP pricing. " & Chr(10) & Chr(10) & _
        "REMEMBER TO CLICK THE UPDATE BUTTON AFTER CLOSING THIS DIALOG BOX.", _
        Buttons:=vmOKOnly, Title:="GBP Currency Selected")
    
    Range("A1").Select 'Park the cursor in upper left

End Sub

Private Sub GoNavigateButton_Click()
' User has clicked the GO navigate button
' The drop-down shows the choices in the SectionNamesTable, which is on the Entitlements worksheet tab
' SectionNameTable is the range containing the drop-down choices
' and their corresponding GOTO row names.

' We need to go to the section name (named row) in the
' second column of that table.

' The cell named NavigationChoice is the cell where the user picks
' the section name from a drop-down list (using the Data > Validation function, which gets the
' names to present from the SectionNamesTable, the left-hand column is named SectionNames).

    If Range("NavigationChoice") = "" Then GoTo DoNothing 'User hasn't selected anything from the drop-down
    
    'Lookup the name of the row we need to go to
    GotoName = Application.WorksheetFunction.VLookup(Range("NavigationChoice"), Sheets("Entitlements").Range("SectionNameTable"), 2, False)
    
    'Now go to that row
    On Error GoTo SectionNotPresent
    
    Application.GoTo Reference:=GotoName, Scroll:=True 'True causes screen to scroll to upper left

DoNothing:

    Exit Sub
    
SectionNotPresent:

    MsgBox ("The section you selected is not present in this price book.")

End Sub

Private Sub OtherCurrency_Click()
'Other currency is selected.
    Sheets("Main Menu").Select
    Range("CurrencyName") = "Other" 'Put in the text string that will be displayed at the top of price book pages
    
    'If there is nothing in the user-entered value cell...
    
    If Range("CurrencyRateEntered").Value = "" Then
        Range("CurrencyRateEntered") = "1" 'Put a 1 as the starting value in the user-entered value cell
    End If
    
    Range("CurrencyRateEntered").Select 'Park the cursor on the user-entered value cell
    'Allow user to enter a new value (or keep the last-entered value).
    

End Sub

Private Sub UpdateButton_Click()
' User has clicked the UPDATE button

' First, see if the user typed something into the currency rate box
' but forgot to click the Other radio button. If so, click the
' radio button for them.

    If Range("CurrencyRateEntered") <> "" Then
        OtherCurrency.Value = True
        
    End If
        
    Range("A1").Select  'Park the cursor in upper left
    
    'Call the routine that recalculates and reformats the price book worksheet
    
    Call Sheet5.ReformatPriceBook
    
End Sub

Private Sub USCurrency_Click()
'US Dollars is selected. Put "1" in the CurRate
    Sheets("Main Menu").Select
    Range("CurrencyName") = "US Dollars"   'Put in the text string that will be displayed at the top of the price book pages
    Range("CurrencyRateEntered") = ""   'Null out the user-entered "Other" currency rate.
    Range("A1").Select 'Park the cursor in upper left

End Sub

Private Sub Zone1_Click()
    Sheets("Main Menu").Select
    Range("PBZone").Select
    ActiveCell.FormulaR1C1 = "1"    'Put the zone number in the cell called PBZone in hidden row 22 on Main Menu worksheet
    Range("A1").Select  'Park cursor in upper left

End Sub

Private Sub Zone2_Click()
    Sheets("Main Menu").Select
    Range("PBZone").Select
    ActiveCell.FormulaR1C1 = "2"    'Put the zone number in the cell called PBZone in hidden row 22 on Main Menu worksheet
    Range("A1").Select 'Park cursor in upper left

End Sub

Private Sub Zone3_Click()
    Sheets("Main Menu").Select
    Range("PBZone").Select
    ActiveCell.FormulaR1C1 = "3"    'Put the zone number in the cell called PBZone in hidden row 22 on Main Menu worksheet
    Range("A1").Select 'Park cursor in upper left

End Sub

'The following is run whenever a cell is changed on the Main Menu worksheet

Private Sub Worksheet_Change(ByVal Target As Range)
    
    'Target, as set in the parameter string above, contains the Range that
    'was selected when a cell is changed.
    
    'Find out if the PriceBookSelected (cell E2), has been changed. If so,
    'disable the Zone controls depending on which value was
    'entered. Also, run the CreateRegionalVersion and ReformatPriceBook routines
    'NOTE: The PriceBookSelected cell text is blue so it does not show, is
    ' normally locked and will only be changed when creating each
    ' price book type for each region.
    
    If Target.Address = Range("PriceBookSelected").Address Then
    
        PriceBookName = Target.Value    'Get the Price Book Name from the cell just changed
    
Rem ***NEW CODE FOLLOWS***
Rem        Response = MsgBox("Did you update the query on the Data worksheet to match this selection?", vbYesNo, "Warning!")
Rem        If Response = vbNo Then GoTo QueryNotCorrect
Rem
Rem        'Now check to make sure that they updated the correct query.
Rem        'The Data_PriceBookCodes column on the Data worksheet
Rem        'will contain values that match the PBCode on the Entitlements worksheet for the selected price book.
Rem        'Compare what you find in row two of the Data_PriceBookCodes column with the PBCode to verify
Rem        'they are the same.
Rem
Rem
Rem        PBCode = Application.WorksheetFunction.VLookup(PriceBookName, Sheets("Entitlements").Range("PriceBookNamesTable"), 4, False)
Rem        If IsError(PBCode) Then GoTo AbortThisRoutine
Rem
Rem        TestValue = Sheets("Data").Cells(2, Sheets("Data").Range("Data_PriceBookCodes").Column).Value
Rem
Rem        If TestValue <> PBCode Then
Rem            MsgBox "It looks like you have not selected the correct query on the Data tab for the price book being created. " & _
Rem                "Please select the correct price book in E2 and update the Data worksheet with the corresponding query."
Rem            GoTo QueryNotCorrect
Rem        End If
                   
        'Lookup the Region from the price book name.
        PriceBookRegion = Application.WorksheetFunction.VLookup(PriceBookName, Sheets("Entitlements").Range("PriceBookNamesTable"), 2, False)
        If IsError(PriceBookRegion) Then GoTo AbortThisRoutine
        'Put the Price Book Region in the cell named PB_Region. We can't put the VLookup
        'in the PB_Region cell because it doesn't get updated until too late
        
        Range("PB_Region").Value = PriceBookRegion
        
        'Lookup the Price Book type from the price book name
        PriceBookType = Application.WorksheetFunction.VLookup(PriceBookName, Sheets("Entitlements").Range("PriceBookNamesTable"), 3, False)
        If IsError(PriceBookType) Then GoTo AbortThisRoutine
        'Put the type in the cell named PB_Type. We can't put the Vlookup
        'in the PB_Type cell because it doesn't get updated until too late
        
        Range("PB_Type").Value = PriceBookType
        
        'Form the Subject text to put in the file properties
        
        versionNumber = Mid(Range("PBVersion"), InStr(1, Range("PBVersion"), " ") + 1, 99)

        Select Case Len(versionNumber)
        
            Case 1
                versionNumber = "00" & versionNumber
                
            Case 2
                versionNumber = "0" & versionNumber
        
        End Select

        subjectProperty = "PK" & versionNumber & " " & PriceBookRegion & " " & PriceBookType

        ActiveWorkbook.BuiltinDocumentProperties.Item("Subject") = subjectProperty  'Enter the text into the file properties

        
        Call CreatePriceBookVersion      'Call routine to delete rows not required for the region being created
        
        Select Case PriceBookRegion
        
            Case "North America"
                'Set the Quantum zone options that can/can't be selected
                Sheet7.Zone1.Enabled = True
                Sheet7.Zone2.Enabled = True
                Sheet7.Zone3.Enabled = True
                If Range("PBZone").Value <> 1 Then 'If not currently Zone 1
                    Sheet7.Zone1 = True 'Select (click) on Zone 1 (runs Zone1_Click routine in this module)
                End If
                
                'Skip converting prices for North America
                    
                   
            Case "APAC"
                'Set the Quantum zones that can/can't be selected
                Sheet7.Zone1.Enabled = True
                Sheet7.Zone2.Enabled = True
                Sheet7.Zone3.Enabled = True
                If Range("PBZone").Value <> 2 Then 'If not currently Zone 2
                    Sheet7.Zone2 = True 'Select (click) on Zone 2 (runs Zone2_Click routine in this module)
                End If
                
                'Convert APAC prices from text to numbers so that numbers will convert correctly when displayed for other region settings.
                'We only need to do it on the All Channels price book since that becomes the master for the other channel price books
                'within that region
                
                If PriceBookType = "All Channels" Then
                    Application.GoTo Reference:="Table_DataTab[[APAC_List_Price]:[APAC_Disti_QDR_Price]]"
                    Call ConvertPrices
                End If
                
            
            Case "China/India"
                'Set the Quantum zone options that can/can't be selected
                Sheet7.Zone1.Enabled = False
                Sheet7.Zone2.Enabled = True
                Sheet7.Zone3.Enabled = True
                 If Range("PBZone").Value <> 2 Then 'If not currently Zone 2
                    Sheet7.Zone2 = True 'Select (click) on Zone 2 (runs Zone2_Click routine in this module)
                End If
                    
                'Convert China/India/Japan prices from text to numbers so that numbers will convert correctly when displayed for other region settings
                'We only need to do it on the All Channels price book since that becomes the master for the other channel price books
                'within that region
                
                If PriceBookType = "All Channels" Then
                    Application.GoTo Reference:="Table_DataTab[[China_List_Price]:[China_Disti_Price]]"
                   Call ConvertPrices
                End If
                    
            Case "EMEA"
                'Set the Quantum zones that can/can't be selected
                Sheet7.Zone1.Enabled = True
                Sheet7.Zone2.Enabled = True
                Sheet7.Zone3.Enabled = True
                If Range("PBZone").Value <> 1 Then 'If not currently Zone 1
                    Sheet7.Zone1 = True 'Select (click) on Zone 1 (runs Zone1_Click routine in this module)
                End If
                
                'Convert EMEA prices from text to numbers so that numbers will convert correctly when displayed for other region settings
                'We only need to do it on the All Channels price book since that becomes the master for the other channel price books
                'within that region
                
                If PriceBookType = "All Channels" Then
                    Application.GoTo Reference:="Table_DataTab[[EMEA_List_Price]:[EMEA_Disti_QDR_Price]]"
                    Call ConvertPrices
                End If
            
            Case "Latin America"
                'Set the Quantum zones that can/can't be selected
                Sheet7.Zone1.Enabled = False
                Sheet7.Zone2.Enabled = True
                Sheet7.Zone3.Enabled = True
                If Range("PBZone").Value <> 3 Then 'If not currently Zone 3
                    Sheet7.Zone3 = True 'Select (click) on Zone 3 (runs Zone3_Click routine in this module)
                 End If
                
                'Convert Latin America prices from text to numbers so that numbers will convert correctly when displayed for other region settings
                'We only need to do it on the All Channels price book since that becomes the master for the other channel price books
                'within that region
                
                If PriceBookType = "All Channels" Then
                    Application.GoTo Reference:="Table_DataTab[[LA_List_Price]:[LA_Disti_QDR_Price]]"
                    Call ConvertPrices
                End If
                
            Case "Russia/Turkey"
                'Set the Quantum zone options that can/can't be selected
                Sheet7.Zone1.Enabled = True
                Sheet7.Zone2.Enabled = True
                Sheet7.Zone3.Enabled = True
                If Range("PBZone").Value <> 3 Then 'If not currently Zone 3
                    Sheet7.Zone3 = True 'Select (click) on Zone 3 (runs Zone3_Click routine in this module)
                End If
                    
                'Convert Russia/Turkey prices from text to numbers so that numbers will convert correctly when displayed for other region settings
                'We only need to do it on the All Channels price book since that becomes the master for the other channel price books
                'within that region
                
                If PriceBookType = "All Channels" Then
                    Application.GoTo Reference:="Table_DataTab[[Russia_List_Price]:[Russia_Disti_QDR_Price]]"
                    Call ConvertPrices
                End If
                    
            
            Case Else   'Worlwide or some kind of error...
                Sheet7.Zone1.Enabled = True
                Sheet7.Zone2.Enabled = True
                Sheet7.Zone3.Enabled = True
                If Range("PBZone").Value <> 1 Then 'If not currently Zone 1
                    Sheet7.Zone1 = True 'Select (click) on Zone 1 (runs Zone1_Click routine in this module)
                End If
                    
                'Skip converting prices for Worldwide
            
            End Select
            

    
    'NOTE: When the Zone is set true, it is as if a click occurred on the control
        
    'Now that the zone options have been enabled/disabled and the
    'correct default zones for the region is set, run the reformat routine
    
        Call Sheet5.ReformatPriceBook
        
    End If
    Exit Sub
    
AbortThisRoutine:
    
    MsgBox ("There was a problem looking up the price book selected in the PriceBookNames table on the Entitlements worksheet")
    Exit Sub
    
QueryNotCorrect:

    'Turn off event trigger so that the following cell updates don't trigger this event again causing a loop
    Application.EnableEvents = False
    Target.Value = "RE-SELECT PRICE BOOK"   'Put an error message in the drop-down cell.
    Range("PB_Region").Value = "RE-SELECT"
    Range("PB_Type").Value = "RE-SELECT"
    Application.EnableEvents = True     'Re-enable events
    Exit Sub

    
End Sub
Sub Test()
                    Range("Table_DataTab[[EMEA_List_Price]:[EMEA_Disti_QDR_Price]]").Select

End Sub

Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Declarations

' The following variable will contain the user's current
' calculation mode, which will be saved when this workbook
' first opens. We'll switch back to that mode whenever this
' workbook is deactivated (and another is activated). Putting
' this declaration up here in the Declartions section makes
' it available to several procedures within this module.

Dim CurrentCalculationMode As Integer

Private Sub Workbook_Activate()
' Whenever this workbook is activated (initial open or switched to)
' turn off auto calculation

    Application.Calculation = xlCalculationManual   'set calculation mode to manual so that auto calculation doesn't start every time this routine changes a cell!
 
End Sub

Private Sub Workbook_Deactivate()
' Whenever this workbook is deactivated (user switches to another workbook)
' we need to restore their calculation mode as it was just before
' this workbook was opened. See the Workbook_Open() event.
    
'COMMENTED OUT   Application.Calculation = CurrentCalculationMode 'Restore the user's original calculation mode

' This is having the undesirable effect of causing recalculation.
' We want to switch to the other application THEN restore or turn
' off recalc while we make the assignment and switch to the other.

End Sub

Private Sub Workbook_Open()
' When this workbook is initially opened, save the user's current
' calculation mode. We'll switch to manual calculation in the
' Workbook_Activate() event so this workbook doesn't auto calc
' everytime user does something including copy/pasting to another
' workbook. Then in the Workbook_Deactivate() event, we'll switch
' back to the user's current (preferred) calculation mode while they
' are in another workbook. The CurrentCalculationMode variable is
' declared at the top of this module so that it is available to all
' procedures here.
    
    CurrentCalculationMode = Application.Calculation 'save the current calculation mode and restore before exiting
    Application.Calculation = xlCalculationManual   'set calculation mode to manual so that auto calculation doesn't start every time this routine changes a cell!

End Sub

Private Sub Workbook_SheetActivate(ByVal Sh As Object)
' Whenever a worksheet is activated, enable any events.
' If someone aborts the Workbook_BeforePrint event routine (below)
' or the Worksheet_BeforeCalculation event routing (attached to
' the Price Book tab, which concatenates and formats cells)
' before it completes, events may remain disabled and
' the event routine would thereafter not be able
' to be envoked. This routine turns on events again whenever
' a worksheet becomes active so that the event
' can be trapped and acted on.

        Application.EnableEvents = True

End Sub

Private Sub Workbook_BeforePrint(Cancel As Boolean)

' The Cancel boolean declared above is used by the Workbook_BeforePrint event.
' If Cancel is set to True, then no printing will occur. If set to False,
' then printing will happen.

' This routine runs whenever the user clicks
' the Print button on the toolbar or selects
' File/Print... from the menu.

' It calls up a user form to select
' whether they want to print the Price Book, Quick Ref Guide or Selected Worksheet(s).
' If they select Price Book or Quick Ref Guide, they can select to print the complete
' or selected sections.

' The user form that contains the dialog box is called "PrintOptionChoice".
' It has controls for selecting what to print.
' If Price Book and Complete are chosen, multiple worksheet tabs are selected then
' the normal Print dialog box comes up for selecting printer options.
' If the Quick Reference Price Guide and Complete are chosen, the "Quick Ref" worksheet
' tab is selected and the normal Print dialog box comes up.
' If the Current Worksheet is chosen, the normal Print dialog box comes up.
' If selected sections are chosen, then those areas of the appropriate worksheet need
' to be selected and printed.

' The OK button sets a hidden label (called lblHidden) on the form to the text "OK" which is tested below.
' The Cancel button sets the hidden label to "Cancel". This hidden label is on the form behind the
' Cancel button.

' Rev. 2: Added code to more gracefully handle execution if user presses ESC key during printing.
  
Dim CurSheet As String
Dim usrResponse As Boolean
Dim CurPrintArea As String
Dim HasQuickRef As Integer
Dim Response As String
Dim PrintAreaString As String

On Error GoTo CancelThis 'Where to go if user presses ESC key
Application.EnableCancelKey = xlErrorHandler    'ESC key will generate an Error that triggers ON ERROR above

' Turn events off. This prevents the Application.Dialog action below (that brings up the
' standard Print dialog box) from calling this BeforePrint event again.

Application.EnableEvents = False
    
Cancel = True 'Set assumption that we'll abandon printing
HasQuickRef = 0 'Set default for absence of "Quick Ref" worksheet
PrintAreaString = "" 'This will hold the range for printing selected areas of the worksheet

DisplayTheDialog:
    
PrintOptionChoice.Show    'Show the user form called PrintOptionChoice that I designed
    
If PrintOptionChoice!lblHidden = "OK" Then  'User made selections and clicked the OK button
     
    CurSheet = ActiveSheet.Name 'Save currently selected sheet name so you can return to it
    CurPrintArea = ActiveSheet.PageSetup.PrintArea ' Save current PrintArea setting so you can restore it

    ' User selected to print complete Price Book
    
    If PrintOptionChoice!PrintingOption!PriceBook = True And PrintOptionChoice!Section!Complete = True Then
        PrintAreaString = "A1:LastCell" 'Set the print area to print from the top right corner to the cell named LastCell
        Sheets("Price Book").Activate   'Activate the Price Book worksheet
        ActiveSheet.PageSetup.PrintArea = PrintAreaString   'Tell it which area to include (entire Price Book worksheet)
        Sheets(Array("Intro", "Price Book", "Warranty & Service")).Select 'Select the sheets
        Sheets("Intro").Activate 'Activate first sheet of the bunch
    End If

    ' User selected to print selected sections of Price Book
    
    If PrintOptionChoice!PrintingOption!PriceBook = True And PrintOptionChoice!Section!SelectedSections = True Then
        Sheets("Price Book").Select 'Select the Price Book tab
        If PrintOptionChoice!TapeDrives = True Then PrintAreaString = PrintAreaString & "StorageDeviceProducts,"  'Includes trailing comma
        If PrintOptionChoice!StorageSystems = True Then PrintAreaString = PrintAreaString & "StorageSystemsProducts,"   'Includes trailing comma
        If PrintOptionChoice!Media = True Then PrintAreaString = PrintAreaString & "MediaProducts," 'Includes trailing comma
        If Len(PrintAreaString) > 0 Then    'User must have selected one or more sections
            PrintAreaString = Left(PrintAreaString, Len(PrintAreaString) - 1) 'Trim off trailing comma
            ActiveSheet.PageSetup.PrintArea = PrintAreaString
        Else
            Response = MsgBox("You indicated that you wanted to print certain sections, but failed to indicate which sections to print. Please select one or more of the checkboxes.", vbOKOnly, "Print Selected Sections")
            GoTo DisplayTheDialog   'Repeat the process
        End If
    End If
    
    ' User selected to print complete Quick Reference Guide
    
    If PrintOptionChoice!PrintingOption!QuickRef = True And PrintOptionChoice!Section!Complete = True Then
        ' See if there is a worksheet called "Quick Ref". The "All Prices" versions don't have one.
        For Each WS In Worksheets
            If WS.Name = "Quick Ref" Then HasQuickRef = 1
        Next WS
        If HasQuickRef = 1 Then
            Sheets("Quick Ref").Select 'Select the Quick Ref worksheet
            Sheets("Quick Ref").Activate 'Activate the Quick Ref sheet
        Else
            Response = MsgBox("This workbook does not include a Quick Reference Price Guide. The Quick Reference Price Guide is not available in internal-only 'All Prices' price books and is only available in external, channel versions.", vbOKOnly, "Print Selection")
            GoTo CancelThis
        End If
    
    End If

    ' User selected to print selected sections of Quick Reference Guide
    
    If PrintOptionChoice!PrintingOption!QuickRef = True And PrintOptionChoice!Section!SelectedSections = True Then
        Sheets("Price Book").Select 'Select the Price Book tab
        ' See if there is a worksheet called "Quick Ref". The "All Prices" versions don't have one.
        For Each WS In Worksheets
            If WS.Name = "Quick Ref" Then HasQuickRef = 1
        Next WS
        If HasQuickRef = 1 Then
            Sheets("Quick Ref").Select 'Select the Quick Ref worksheet
            Sheets("Quick Ref").Activate 'Activate the Quick Ref sheet
        Else
            Response = MsgBox("This workbook does not include a Quick Reference Price Guide. The Quick Reference Price Guide is not available in internal-only 'All Prices' price books and is only available in external, channel versions.", vbOKOnly, "Print Selection")
            GoTo CancelThis
        End If
        
        If PrintOptionChoice!TapeDrives = True Then PrintAreaString = PrintAreaString & "StorageDeviceProducts,"  'Includes trailing comma
        If PrintOptionChoice!StorageSystems = True Then PrintAreaString = PrintAreaString & "StorageSystemsProducts,"   'Includes trailing comma
        If PrintOptionChoice!Media = True Then PrintAreaString = PrintAreaString & "MediaProducts," 'Includes trailing comma
        If Len(PrintAreaString) > 0 Then    'User must have selected one or more sections
            PrintAreaString = Left(PrintAreaString, Len(PrintAreaString) - 1) 'Trim off trailing comma
            ActiveSheet.PageSetup.PrintArea = PrintAreaString
        Else
            Response = MsgBox("You indicated that you wanted to print certain sections, but failed to indicate which sections to print. Please select one or more of the checkboxes.", vbOKOnly, "Print Selected Sections")
            GoTo DisplayTheDialog   'Repeat the process
        End If
    
    End If

    ' When we get to this point, we've selected the right worksheet(s) and areas
    ' If none of the above conditions were true, then the only other conclusion is
    ' that the user has indicated he wants to print his own selected worksheet(s) and/or
    ' areas. In either case, all that is left to do now, is PRINT IT!
    
    usrResponse = Application.Dialogs.Item(xlDialogPrint).Show    'Bring up the Print dialog box
    
    ' If user cancels the Print Dialog box (usrResponse comes back False), then
    ' Set the Cancel boolen to True so that printing will be canceled.
            
    If usrResponse = False Then Cancel = True

CancelThis:
      
    Sheets(CurSheet).Select 'Return to current sheet
    ActiveSheet.PageSetup.PrintArea = CurPrintArea    'Restore PrintArea setting

Else    'User canceled out of the PrintOptionChoice dialog box
    
    Cancel = True   'Set the Cancel boolen to True so that printing will be canceled.

End If
    
Unload PrintOptionChoice 'Close the form

Application.EnableEvents = True 'Reactivate events


End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    Application.Calculation = xlAutomatic
    Application.ScreenUpdating = True
    Application.EnableEvents = True
End Sub


Attribute VB_Name = "deleteRangeDialog"
Attribute VB_Base = "0{29AB2213-22C2-42E5-8ADB-BE24B306D9F8}{3D0D1F5A-6D43-4899-8AFB-3533B4629B82}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub cancelButton_Click()
'User clicked Cancel button. Set to null. Hide form.
    deleteRangeDialog.rangeToDelete.Value = ""
    deleteRangeDialog.Hide
End Sub

Private Sub okButton_Click()
'User clicked OK button. Hide form.
    deleteRangeDialog.Hide
End Sub
Attribute VB_Name = "fileNameDialog"
Attribute VB_Base = "0{929BBFE6-8FFB-461C-B62B-AB400DA0D69C}{A529B15F-FCA6-4C89-B4DE-69FFCDBA59B4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub cancelButton_Click()
' User clicked Cancel button. Set to null. Close form.
    fileNameDialog.fileNameEntered.Value = ""
    fileNameDialog.Hide
    
End Sub


Private Sub okButton_Click()
' User clicked OK button. Close form
    fileNameDialog.Hide
    
End Sub

' InQuest injected base64 decoded content
' z{BjW.

INQUEST-PP=macro
