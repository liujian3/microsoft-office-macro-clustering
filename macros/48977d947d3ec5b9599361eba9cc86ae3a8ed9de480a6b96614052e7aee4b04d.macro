Attribute VB_Name = "ExcelCrack"
Option Explicit

Public Sub CrackPasswords()
' Breaks worksheet and workbook structure passwords. Bob McCormick
' probably originator of base code algorithm modified for coverage
' of workbook structure / windows passwords and for multiple passwords
'
' Norman Harker and JE McGimpsey 27-Dec-2002 (Version 1.1)
' Modified 2003-Apr-04 by JEM: All msgs to constants, and
' eliminate one Exit Sub (Version 1.1.1)
' Reveals hashed passwords NOT original passwords
    Const DBLSPACE As String = vbNewLine & vbNewLine
    Const AUTHORS As String = DBLSPACE & vbNewLine & _
          "Adapted from Bob McCormick base code by" & _
          "Norman Harker and JE McGimpsey"
    Const HEADER As String = "AllInternalPasswords User Message"
    Const VERSION As String = DBLSPACE & "Version 1.1.1 2003-Apr-04"
    Const REPBACK As String = DBLSPACE & "Please report failure " & _
          "to the microsoft.public.excel.programming newsgroup."
    Const ALLCLEAR As String = DBLSPACE & "The workbook should " & _
          "now be free of all password protection, so make sure you:" & _
          DBLSPACE & "SAVE IT NOW!" & DBLSPACE & "and also" & _
          DBLSPACE & "BACKUP!, BACKUP!!, BACKUP!!!" & _
          DBLSPACE & "Also, remember that the password was " & _
          "put there for a reason. Don't stuff up crucial formulas " & _
          "or data." & DBLSPACE & "Access and use of some data " & _
          "may be an offense. If in doubt, don't."
    Const MSGNOPWORDS1 As String = "There were no passwords on " & _
          "sheets, or workbook structure or windows." & AUTHORS & VERSION
    Const MSGNOPWORDS2 As String = "There was no protection to " & _
          "workbook structure or windows." & DBLSPACE & _
          "Proceeding to unprotect sheets." & AUTHORS & VERSION
    Const MSGTAKETIME As String = "After pressing OK button this " & _
          "will take some time." & DBLSPACE & "Amount of time " & _
          "depends on how many different passwords, the " & _
          "passwords, and your computer's specification." & DBLSPACE & _
          "Just be patient! Make me a coffee!" & AUTHORS & VERSION
    Const MSGPWORDFOUND1 As String = "You had a Worksheet " & _
          "Structure or Windows Password set." & DBLSPACE & _
          "The password found was: " & DBLSPACE & "$$" & DBLSPACE & _
          "Note it down for potential future use in other workbooks by " & _
          "the same person who set this password." & DBLSPACE & _
          "Now to check and clear other passwords." & AUTHORS & VERSION
    Const MSGPWORDFOUND2 As String = "You had a Worksheet " & _
          "password set." & DBLSPACE & "The password found was: " & _
          DBLSPACE & "$$" & DBLSPACE & "Note it down for potential " & _
          "future use in other workbooks by same person who " & _
          "set this password." & DBLSPACE & "Now to check and clear " & _
          "other passwords." & AUTHORS & VERSION
    Const MSGONLYONE As String = "Only structure / windows " & _
          "protected with the password that was just found." & _
          ALLCLEAR & AUTHORS & VERSION & REPBACK
    Dim w1 As Worksheet, w2 As Worksheet
    Dim i As Integer, j As Integer, k As Integer, l As Integer
    Dim m As Integer, n As Integer, i1 As Integer, i2 As Integer
    Dim i3 As Integer, i4 As Integer, i5 As Integer, i6 As Integer
    Dim PWord1 As String
    Dim ShTag As Boolean, WinTag As Boolean

    Application.ScreenUpdating = False
    With ActiveWorkbook
        WinTag = .ProtectStructure Or .ProtectWindows
    End With
    ShTag = False
    For Each w1 In Worksheets
        ShTag = ShTag Or w1.ProtectContents
    Next w1
    If Not ShTag And Not WinTag Then
        MsgBox MSGNOPWORDS1, vbInformation, HEADER
        Exit Sub
    End If
    MsgBox MSGTAKETIME, vbInformation, HEADER
    If Not WinTag Then
        MsgBox MSGNOPWORDS2, vbInformation, HEADER
    Else
        On Error Resume Next
        Do    'dummy do loop
            For i = 65 To 66: For j = 65 To 66: For k = 65 To 66
                        For l = 65 To 66: For m = 65 To 66: For i1 = 65 To 66
                                    For i2 = 65 To 66: For i3 = 65 To 66: For i4 = 65 To 66
                                                For i5 = 65 To 66: For i6 = 65 To 66: For n = 32 To 126
                                                            With ActiveWorkbook
                                                                .Unprotect Chr(i) & Chr(j) & Chr(k) & _
                                                                           Chr(l) & Chr(m) & Chr(i1) & Chr(i2) & _
                                                                           Chr(i3) & Chr(i4) & Chr(i5) & Chr(i6) & Chr(n)
                                                                If .ProtectStructure = False And _
                                                                   .ProtectWindows = False Then
                                                                    PWord1 = Chr(i) & Chr(j) & Chr(k) & Chr(l) & _
                                                                             Chr(m) & Chr(i1) & Chr(i2) & Chr(i3) & _
                                                                             Chr(i4) & Chr(i5) & Chr(i6) & Chr(n)
                                                                    MsgBox Application.Substitute(MSGPWORDFOUND1, _
                                                                                                  "$$", PWord1), vbInformation, HEADER
                                                                    Exit Do    'Bypass all for...nexts
                                                                End If
                                                            End With
                                                        Next: Next: Next: Next: Next: Next
                                Next: Next: Next: Next: Next: Next
        Loop Until True
        On Error GoTo 0
    End If
    If WinTag And Not ShTag Then
        MsgBox MSGONLYONE, vbInformation, HEADER
        Exit Sub
    End If
    On Error Resume Next
    For Each w1 In Worksheets
        'Attempt clearance with PWord1
        w1.Unprotect PWord1
    Next w1
    On Error GoTo 0
    ShTag = False
    For Each w1 In Worksheets
        'Checks for all clear ShTag triggered to 1 if not.
        ShTag = ShTag Or w1.ProtectContents
    Next w1
    If ShTag Then
        For Each w1 In Worksheets
            With w1
                If .ProtectContents Then
                    On Error Resume Next
                    Do    'Dummy do loop
                        For i = 65 To 66: For j = 65 To 66: For k = 65 To 66
                                    For l = 65 To 66: For m = 65 To 66: For i1 = 65 To 66
                                                For i2 = 65 To 66: For i3 = 65 To 66: For i4 = 65 To 66
                                                            For i5 = 65 To 66: For i6 = 65 To 66: For n = 32 To 126
                                                                        .Unprotect Chr(i) & Chr(j) & Chr(k) & _
                                                                                   Chr(l) & Chr(m) & Chr(i1) & Chr(i2) & Chr(i3) & _
                                                                                   Chr(i4) & Chr(i5) & Chr(i6) & Chr(n)
                                                                        If Not .ProtectContents Then
                                                                            PWord1 = Chr(i) & Chr(j) & Chr(k) & Chr(l) & _
                                                                                     Chr(m) & Chr(i1) & Chr(i2) & Chr(i3) & _
                                                                                     Chr(i4) & Chr(i5) & Chr(i6) & Chr(n)
                                                                            MsgBox Application.Substitute(MSGPWORDFOUND2, _
                                                                                                          "$$", PWord1), vbInformation, HEADER
                                                                            'leverage finding Pword by trying on other sheets
                                                                            For Each w2 In Worksheets
                                                                                w2.Unprotect PWord1
                                                                            Next w2
                                                                            Exit Do    'Bypass all for...nexts
                                                                        End If
                                                                    Next: Next: Next: Next: Next: Next
                                            Next: Next: Next: Next: Next: Next
                    Loop Until True
                    On Error GoTo 0
                End If
            End With
        Next w1
    End If
    MsgBox ALLCLEAR & AUTHORS & VERSION & REPBACK, vbInformation, HEADER
End Sub

Attribute VB_Name = "Hubert1"
' 6and7 Tools
' V1.3 build 2010-12-07
' By |fffd||fffd||6f7||fffd|


Sub NotesFormating(ByVal control As IRibbonControl)
Attribute NotesFormating.VB_Description = "Merged, Centerd, WrapText and Left"
Attribute NotesFormating.VB_ProcData.VB_Invoke_Func = "t\n14"
'
' NotesFormating Macro
' Merged, Centerd, WrapText and Left
'
' Keyboard Shortcut: Ctrl+t
'
    With Selection
        .HorizontalAlignment = xlLeft
        .VerticalAlignment = xlTop
        .WrapText = True
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = True
    End With
    
    KpmgNotes
    
End Sub


Sub FileLocation(ByVal control As IRibbonControl)

MsgBox Application.ActiveWorkbook.path

End Sub

Sub SheetNames_HY()

'This program will list the sheets name list of the activate Excel workbook.
'By Hubert Yin
'@ 11/11/2009

Dim i As Integer, j As Integer
Dim Row As Integer, Col As Integer
Dim Sheet_Name As String, Link As String

'count numbers of sheets in the current workbook.
    j = ActiveWorkbook.Worksheets.Count

'add new sheet named "Index" in the current workbook.
    Sheets.Add Before:=Sheets(1), Type:="Worksheet"
    Sheets(1).Name = "Index"
    Sheets("Index").Cells(1, 1) = "SheetName"
    Sheets("Index").Cells(1, 2) = "Contents"
    
'get the row and cloumn of the cell with contents of each sheet.
    Row = InputBox(prompt:="Enter Row of the cell with Contents of the sheet. Only Number Accept!", Title:="Input Number!", Default:=3)
    Col = InputBox(prompt:="Enter Cloumn of the cell with Contents of the sheet. Only Number Accept!", Default:=1)

'list the sheet names as hyperlink and contents in sheet "Index".
For i = 1 + 1 To j + 1
    Sheets("Index").Cells(i, 1) = Sheets(i).Name
    
    Sheet_Name = Sheets(i).Name
    Link = "'" & Sheet_Name & "'" & "!A1"
    Sheets("Index").Hyperlinks.Add Anchor:=Cells(i, 1), Address:="", SubAddress:=Link

    Sheets("Index").Cells(i, 2) = Sheets(i).Cells(Row, Col).Value
    
'    Sheets("Index").Cells(i, 2) = Sheets(i).Cells(3, 1).Value
Next i

Columns("A:B").EntireColumn.AutoFit

End Sub

Sub CellColor()

'@ 2010-8-10
'To get the Interior and Font color of on cell
'By Huifeng YIn

Dim CellColId As Integer, FontColId As Integer
Dim RowID As Long, ColumnID As Long

'get the row and cloumn of the cell with contents of each sheet.
    RowID = InputBox(prompt:="Enter Row of the cell you want to get the color. Only Number Accept!", Title:="Input Number!", Default:=1)
    ColumnID = InputBox(prompt:="Enter Cloumn of the cell you want to get the color. Only Number Accept!", Default:=1)

    CellColId = Cells(RowID, ColumnID).Interior.ColorIndex
    FontColId = Cells(RowID, ColumnID).Font.ColorIndex
    
    msgstr = "The cell color index is " & CellColId & ".The font color index is " & FontColId & "."
    
    MsgBox msgstr, vbOKOnly
    
End Sub

Sub ProtectSheets(ByVal control As IRibbonControl)
Dim Psw As Variant
Dim j As Integer

'   Psw = InputBox(prompt:="Enter the Password to Protect worksheets:", Title:="Input Password", Default:="Password")
    Psw = Application.InputBox(prompt:="Enter the Password to Unprotect worksheets:", Title:="Input Password", Default:="Password", Type:=1 + 2)
    
    If Psw = False Then
        Exit Sub
    End If

On Error Resume Next
For j = 1 To ActiveWorkbook.Sheets.Count
    
    ActiveWorkbook.Sheets(j).Protect Psw
'Debug.Print j
Next

MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"

End Sub

Sub UnProtectSheets(ByVal control As IRibbonControl)
Dim Psw As Variant  'To store the password
Dim j As Integer, i As Integer
Dim uShtList As String  'To store the Sheet name that still being protected

    uShtList = "The following sheets are still protected:" & vbCrLf

    Psw = Application.InputBox(prompt:="Enter the Password to Unprotect worksheets:", Title:="Input Password", Default:="Password", Type:=2)
    
    If Psw = False Then
        Exit Sub
    End If
    
'    If Err.Number > 0 Then
'        If Err.Number <> 424 Then
'            MsgBox Err.Number & Err.Description
'        End If
'        Err.Clear
'        Exit Sub
'    End If

    'Psw = InputBox(prompt:="Enter the Password to Unprotect worksheets:", Title:="Input Password", Default:="Password")
    
'    Debug.Print Psw
    
    Application.ScreenUpdating = False
    
    On Error Resume Next
    For j = 1 To ActiveWorkbook.Sheets.Count
        
        ActiveWorkbook.Sheets(j).Unprotect Psw
    'Debug.Print j
    Next
    
    i = 0
    For j = 1 To ActiveWorkbook.Sheets.Count
        
    '    Debug.Print ActiveWorkbook.Sheets(j).ProtectionMode
    '    Debug.Print ActiveWorkbook.Sheets(j).ProtectContents
        
        ProtectFlag = False
        ProtectFlag = ActiveWorkbook.Sheets(j).ProtectContents
    
        If ProtectFlag Then
            i = i + 1
            uShtList = uShtList & ActiveWorkbook.Sheets(j).Name & vbCrLf
        End If
    
    Next j
    
    Application.ScreenUpdating = True
    
    If i Then
        MsgBox uShtList, vbOKOnly, "Warning!"
    Else
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", vbOKOnly, "Congratulations!"
    End If

End Sub

Sub KpmgNotes() '(ByVal control As IRibbonControl)
'|fffd||131||fffd||fffd||fffd||fffd||fffd||271||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2bd||fffd||fffd||fffd||fffd||fffd||fffd||3aa||fffd||fffd||fffd||fffd||fffd||13f||fffd||fffd||5871||fffd||fffd||4e2||fffd||fffd||3aa||fffd||fffd|Times New Roman|fffd||fffd||fffd||fffd|

On Error Resume Next

Dim text As String
Dim i As Integer

Application.ScreenUpdating = False

For Each cellt In Application.Selection
    If Len(cellt.Value) > 0 Then
        text = cellt.Value
        For i = 1 To Len(text)
            If Asc(Mid(text, i, 1)) > 0 And Asc(Mid(text, i, 1)) < 128 Then
                With cellt.Characters(Start:=i, Length:=1).Font
                    .Name = "Times New Roman"
                End With
            Else
                With cellt.Characters(Start:=i, Length:=1).Font
                    .Name = "|fffd||fffd||fffd||13f||fffd||fffd||fffd|"
                End With
            End If
        Next
    End If
Next
Application.ScreenUpdating = True
End Sub

Sub UnLockColCells(ByVal control As IRibbonControl)

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||461||fffd||fffd||fffd||fffd||52a||fffd||fffd||fffd||fffd||fffd||fffd||fffd||26b||fffd||fffd||36c||fffd||135||fffd||52a||fffd||fffd|

Dim ColorId As Integer
Dim i As Long, j As Long

ColorId = ActiveCell.Interior.ColorIndex

'----------|fffd||fffd||fffd||fffd||fffd||fffd||2b1||fffd||121||fffd|
Dim TimeStart As Single, TimeDur As Single
TimeStart = Timer

'----------|fffd||fffd||fffd||fffd||fffd||fffd||fffd||26b||fffd||fffd||461||fffd||fffd||135||fffd||52a||fffd||fffd||fffd||fffd||36c||fffd||fffd||fffd||fffd||fffd||fffd||fffd||52a||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
For i = 1 To 6000
    For j = 1 To 500
        If Cells(i, j).Interior.ColorIndex = ColorId Then
            Cells(i, j).Locked = False
        End If
    Next j
Next i
    
'----------|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2b1||fffd||121||fffd|
    
TimeDur = Timer - TimeStart
sStr = "Bingo|fffd||fffd||fffd||fffd||2b1|" & TimeDur & "s|fffd||4b8||3da8||fffd||2e3||fffd||fffd||3ff4||fffd||fffd||fffd||fffd|"
MsgBox sStr
        
End Sub

Sub UnLockCol(ByVal control As IRibbonControl)

'
' Unlock & Color the Selection Cells

    On Error Resume Next
    Selection.Locked = False
    Selection.Interior.ColorIndex = 36

End Sub

Sub LockCell(ByVal control As IRibbonControl)

'
' Unlock & Color the Selection Cells

    On Error Resume Next
    Selection.Locked = True
    Selection.Interior.ColorIndex = xlNone

End Sub

Sub FormulaDifRatio(ByVal control As IRibbonControl)

    Dim CellDiffAmt As Range, CellBaseAmt As Range, sMsg As Integer
    Dim StrFormat As String
        StrFormat = "_-#,##0%_-;[Red](#,##0%);_- " & Chr(34) & "-" & Chr(34) & "_-" '_-#,##0%_-;(#,##0%);_- "-"_-
'        Debug.Print StrFormat

    On Error Resume Next
    If Selection.Value <> "" Or Selection.Formula <> "" Then
        If MsgBox("Selection may not be empty, proceed to overwrite?" & vbCrLf & "|461||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||763||fffd||fffd||1f7||fffd||fffd||4e32||fffd||1e3||fffd|", 4, "EXCEL Tools - Write formular to display fluctuation %") <> 6 Then
            Exit Sub
        End If
    End If
    Err.Clear

    Set CellDiffAmt = Application.InputBox( _
                                             prompt:="Select a cell with the fluctuation amount", Title:="Write fluctuation formula - fluctuation", Type:=8)

    If Err.Number > 0 Then
        If Err.Number <> 424 Then
            MsgBox Err.Number & Err.Description
        End If
        Err.Clear
        Exit Sub
    End If

    Set CellBaseAmt = Application.InputBox( _
                                      prompt:="Select a cell with the last period's amount", Title:="Write fluctuation formula - last period", Type:=8)

    If Err.Number > 0 Then
        If Err.Number <> 424 Then
            MsgBox Err.Number & Err.Description
        End If
        Err.Clear
        Exit Sub
    End If

    'Selection.Formula = "=countcolor(" & CellDiffAmt.Address & "," & Replace(CellBaseAmt.Address, "$", "") & ")"
    Selection.Formula = "=IF(" & Replace(CellBaseAmt.Address, "$", "") & ",IF(" & Replace(CellDiffAmt.Address, "$", "") & "/" & Replace(CellBaseAmt.Address, "$", "") & ">1," & Chr(34) & ">100%" & Chr(34) & ",IF(" & Replace(CellDiffAmt.Address, "$", "") & "/" & Replace(CellBaseAmt.Address, "$", "") & "<-1," & Chr(34) & "<(100%)" & Chr(34) & "," & Replace(CellDiffAmt.Address, "$", "") & "/" & Replace(CellBaseAmt.Address, "$", "") & "))," & Chr(34) & "N/A" & Chr(34) & ")"
    Selection.NumberFormat = StrFormat
    Selection.HorizontalAlignment = xlRight
    'Selection.EntireColumn.AutoFit
    sMsg = MsgBox("Please Check the Formula" & vbCrLf & "|fffd||fffd||fffd||53c||fffd||fffd||2f6||fffd||4bb||fffd||b9||fffd||2bd||fffd||1f7||fffd||fffd||fffd||237|", , "EXCEL Tools - WriteFlctFormula")

End Sub

Sub Percent_Lizzy(ByVal control As IRibbonControl)

    Dim StrFormat As String
        StrFormat = "_-#,##0%_-;[Red](#,##0%);_- " & Chr(34) & "-" & Chr(34) & "_-" '_-#,##0%_-;(#,##0%);_- "-"_-
        '_-#,##0%_-;[Red](#,##0%);_- "-"_-
        Debug.Print StrFormat
    With Selection
        Selection.NumberFormat = StrFormat
    End With

End Sub

Sub HY_PrintSet()
'
' HY_PrintSet Macro
' For Print Set.
'

'
    With ActiveSheet.PageSetup
        .LeftHeader = ""
        .CenterHeader = ""
        .RightHeader = ""
        .LeftFooter = ""
        .CenterFooter = ""
        .RightFooter = ""
        .LeftMargin = Application.InchesToPoints(0.590551181102362)
        .RightMargin = Application.InchesToPoints(0.393700787401575)
        .TopMargin = Application.InchesToPoints(0.511811023622047)
        .BottomMargin = Application.InchesToPoints(0.511811023622047)
        .HeaderMargin = Application.InchesToPoints(0.511811023622047)
        .FooterMargin = Application.InchesToPoints(0.511811023622047)
        .PrintHeadings = False
        .PrintGridlines = False
        .PrintComments = xlPrintNoComments
        .PrintQuality = 600
        .CenterHorizontally = True
        .CenterVertically = False
        .Orientation = xlPortrait
        .Draft = False
        .PaperSize = xlPaperA4
        .FirstPageNumber = xlAutomatic
        .Order = xlDownThenOver
        .BlackAndWhite = True
        .Zoom = False
        .FitToPagesWide = 1
        .FitToPagesTall = 1
        .PrintErrors = xlPrintErrorsDisplayed
        .OddAndEvenPagesHeaderFooter = False
        .DifferentFirstPageHeaderFooter = False
        .ScaleWithDocHeaderFooter = True
        .AlignMarginsHeaderFooter = False
        .EvenPage.LeftHeader.text = ""
        .EvenPage.CenterHeader.text = ""
        .EvenPage.RightHeader.text = ""
        .EvenPage.LeftFooter.text = ""
        .EvenPage.CenterFooter.text = ""
        .EvenPage.RightFooter.text = ""
        .FirstPage.LeftHeader.text = ""
        .FirstPage.CenterHeader.text = ""
        .FirstPage.RightHeader.text = ""
        .FirstPage.LeftFooter.text = ""
        .FirstPage.CenterFooter.text = ""
        .FirstPage.RightFooter.text = ""
    End With
    ActiveWindow.SelectedSheets.PrintPreview
    ActiveWindow.SmallScroll Down:=1
End Sub

Sub round_clear()

'    On Error GoTo ErrorHandler
    Dim my_cell As Range, s As String, r As Range
    Dim pos As Integer    ', dec_s As String, dec_i As Long

    'Find range containing formulas within selection
    Set r = Application.Intersect(Selection, ActiveSheet.Cells.SpecialCells(xlCellTypeFormulas))

    If Not r Is Nothing Then
        For Each my_cell In r
            If IsNumeric(my_cell.Value) Then '|fffd||fffd||fffd||13f||1f0||5bb||fffd||736||fffd||fffd||fffd||fffd||5b8||fffd||2bd||221||fffd||fffd|Round
                s = Trim(my_cell.Formula)

                'If, Already rounded
                If UCase(Left(s, 6)) = "=ROUND" And Right(s, 1) = ")" Then
                    pos = InStrRev(s, ",")
'                    Debug.Print pos
                    my_cell.Formula = "=" & Mid(s, 8, pos - 8)

                End If
            End If

        Next my_cell
    End If

    Exit Sub

ErrorHandler:
End Sub

Sub Xrightclick()

    SendKeys "+{F10}"

End Sub
Attribute VB_Name = "Module1"
Attribute VB_Name = "Sam"

Sub ShowAbout(ByVal control As IRibbonControl)

'    MsgBox "Excel EZtools v1.1h build 2004.05.25" & vbCrLf & vbCrLf & "Copyright Sun, Hanhui, applying.  " & _
'           "All rights reserved." & vbCrLf & "SelectFunction v1.03 (c) 2002, 2003 by Business Functions Ltd.  All rights reserved." & _
'           vbCrLf & "Eric's Tick Mark Drawer (with Audit Utility Tool) v2.10 by Eric Xi.  All rights reserved. " & _
'           vbCrLf & vbCrLf & "Email sunhhsam@95533.com if you have any questions.  Get the latest version from http://sunhhsam.533.net  ", _
'           64, "About Excel EZtools"
    
    Dim Msg_right As String, Msg_thx As String
    
    Msg_right = "6and7 Tools v1.2.1 @2011-06-13" & vbCrLf & _
           "By Huifeng YIN" & vbCrLf & vbCrLf & _
           "Thanks for Morningstar!" & vbCrLf & vbCrLf & _
           "Excel EZtools v1.1h build 2004.05.25" & vbCrLf & _
           "Copyright Sun, Hanhui, applying. " & _
           "All rights reserved." & vbCrLf & vbCrLf & _
           "For personal use only!"
           
'    Msg_thx = "Thanks for help from" & vbCrLf & vbCrLf & _
'             "Lisa SHEN," & vbCrLf & _
'             "Lisa ZHAO," & vbCrLf & _
'             "Tom Hu," & vbCrLf & _
'             "William WANG," & vbCrLf & _
'             "Lynn MA," & vbCrLf & _
'             "Lucy WANG," & vbCrLf & _
'             "Kevin ZHENG," & vbCrLf & _
'             "Susan XU." & vbCrLf
    
    Msg_thx = "|fffd||fffd||fffd||534||2f2||fffd||fffd||fffd||5f8||fffd||fffd||fffd||fffd||fffd|Team|fffd||fffd|" & vbCrLf & vbCrLf & _
         "|fffd||fffd||43b||fffd||fffd||fffd||fffd||fffd||fffd||fffd||475||139||fffd||fffd||fffd||fffd||378||13d||fffd||fffd||fffd||fffd||98fa|" & vbCrLf & vbCrLf & _
         "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||23a||fffd|" & vbCrLf & vbCrLf & _
         "|fffd||fffd||fffd||fffd||26f||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||38ec|" & vbCrLf & _
         "|fffd||fffd||fffd||6a3||fffd||fffd||fffd||fffd||e3b36||fffd||73f||fffd||fffd|" & vbCrLf & _
         "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||48ec||5a3||fffd||fffd||fffd||1a3||fffd|" & vbCrLf & _
         "|fffd||6be||fffd|"

    MsgBox Msg_right, vbOKOnly, "About 6and7"
'    MsgBox Msg_thx, vbOKOnly, "Thanks"
    Flag = MsgBox(Msg_thx, vbOKCancel, "Thanks")
    If Flag = 2 Then Call CrackPasswords

End Sub



Sub SetPrintArea(ByVal control As IRibbonControl)

    On Error Resume Next

    If Selection.Rows.Count = 1 And Selection.Columns.Count = 1 Then
        ActiveSheet.PageSetup.PrintArea = Range("a1", Selection).Address
    Else
        ActiveSheet.PageSetup.PrintArea = Selection.Address
    End If
    ActiveWindow.SelectedSheets.PrintPreview

    Err.Clear

End Sub

Sub ClrHeading(ByVal control As IRibbonControl)
'Clear the print set for title col and row

    ActiveSheet.PageSetup.PrintTitleColumns = ""
    ActiveSheet.PageSetup.PrintTitleRows = ""

End Sub

Sub ColHeading(ByVal control As IRibbonControl)

    Dim mm As String
    mm = Selection.EntireColumn.Address
    ActiveSheet.PageSetup.PrintTitleColumns = mm

End Sub

Sub RowHeading(ByVal control As IRibbonControl)

    Dim mm As String
    mm = Selection.EntireRow.Address
    ActiveSheet.PageSetup.PrintTitleRows = mm

End Sub

Sub Justify()

    On Error Resume Next
    Selection.Justify

End Sub


Sub Sum_Color(ByVal control As IRibbonControl)
'Sum cells with the same cell color that selected

    Dim CellWithColor As Range, sRange As Range, sMsg As Integer

    On Error Resume Next
    If Selection.Value <> "" Or Selection.Formula <> "" Then
        If MsgBox("Selection may not be empty, proceed to overwrite?" & vbCrLf & "|461||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||763||fffd||fffd||1f7||fffd||fffd||4e32||fffd||1e3||fffd|", 4, "EXCEL Tools - SumColor") <> 6 Then
            Exit Sub
        End If
    End If
    Err.Clear

    Set CellWithColor = Application.InputBox( _
                                             prompt:="Select a cell with the color you need to calculate", Title:="SumColor - cell with color input", Type:=8)

    If Err.Number > 0 Then
        If Err.Number <> 424 Then
            MsgBox Err.Number & Err.Description
        End If
        Err.Clear
        Exit Sub
    End If

    Set sRange = Application.InputBox( _
                                      prompt:="Select the range to calculate", Title:="SumColor - range input", Type:=8)

    If Err.Number > 0 Then
        If Err.Number <> 424 Then
            MsgBox Err.Number & Err.Description
        End If
        Err.Clear
        Exit Sub
    End If

    Selection.Formula = "=sumcolor(" & CellWithColor.Address & "," & Replace(sRange.Address, "$", "") & ")"
    Selection.EntireColumn.AutoFit
    sMsg = MsgBox("Must press <F9> to re-calculate." & vbCrLf & "|4bb||fffd||fffd||4aa||fffd||fffd|<F9>|fffd||fffd||fffd||fffd||fffd||bc||fffd||fffd||fffd||fffd||fffd||fffd||fffd||5a4||fffd||fffd||fffd||fffd||fffd||237|.", , "EXCEL Tools - SumColor")

End Sub

Sub Count_Color(ByVal control As IRibbonControl)

    Dim CellWithColor As Range, sRange As Range, sMsg As Integer

    On Error Resume Next
    If Selection.Value <> "" Or Selection.Formula <> "" Then
        If MsgBox("Selection may not be empty, proceed to overwrite?" & vbCrLf & "|461||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||763||fffd||fffd||1f7||fffd||fffd||4e32||fffd||1e3||fffd|", 4, "EXCEL Tools - CountColor") <> 6 Then
            Exit Sub
        End If
    End If
    Err.Clear

    Set CellWithColor = Application.InputBox( _
                                             prompt:="Select a cell with the color you need to calculate", Title:="CountColor - cell with color input", Type:=8)

    If Err.Number > 0 Then
        If Err.Number <> 424 Then
            MsgBox Err.Number & Err.Description
        End If
        Err.Clear
        Exit Sub
    End If

    Set sRange = Application.InputBox( _
                                      prompt:="Select the range to calculate", Title:="CountColor - range input", Type:=8)

    If Err.Number > 0 Then
        If Err.Number <> 424 Then
            MsgBox Err.Number & Err.Description
        End If
        Err.Clear
        Exit Sub
    End If

    Selection.Formula = "=countcolor(" & CellWithColor.Address & "," & Replace(sRange.Address, "$", "") & ")"
    Selection.EntireColumn.AutoFit
    sMsg = MsgBox("Must press <F9> to re-calculate." & vbCrLf & "|4bb||fffd||fffd||4aa||fffd||fffd|<F9>|fffd||fffd||fffd||fffd||fffd||bc||fffd||fffd||fffd||fffd||fffd||fffd||fffd||5a4||fffd||fffd||fffd||fffd||fffd||237|.", , "EXCEL Tools - CountColor")

End Sub

Sub Cell_Color(ByVal control As IRibbonControl)

    Dim CellWithColor As Range, sMsg As Integer

    On Error Resume Next
    If Selection.Value <> "" Or Selection.Formula <> "" Then
        If MsgBox("Selection may not be empty, proceed to overwrite?" & vbCrLf & "|461||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||763||fffd||fffd||1f7||fffd||fffd||4e32||fffd||1e3||fffd|", 4, "EXCEL Tools - ColorIndex") <> 6 Then
            Exit Sub
        End If
    End If
    Err.Clear

    Set CellWithColor = Application.InputBox( _
                                             prompt:="Select a cell with the color", Title:="ColorIndex - cell with color input", Type:=8)

    If Err.Number > 0 Then
        If Err.Number <> 424 Then
            MsgBox Err.Number & Err.Description
        End If
        Err.Clear
        Exit Sub
    End If

    Selection.Formula = "=ccolor(" & CellWithColor.Address & ")"
    Selection.EntireColumn.AutoFit
    sMsg = MsgBox("Must press <F9> to re-calculate." & vbCrLf & "|4bb||fffd||fffd||4aa||fffd||fffd|<F9>|fffd||fffd||fffd||fffd||fffd||bc||fffd||fffd||fffd||fffd||fffd||fffd||fffd||5a4||fffd||fffd||fffd||fffd||fffd||237|.", , "EXCEL Tools - ColorIndex")

End Sub

Sub To_Formula(ByVal control As IRibbonControl)

    On Error Resume Next

    Dim c As Range

    If MsgBox("This action may change your formula to value only.  Are you sure you want to proceed?", 1) <> 1 Then Exit Sub
    For Each c In Selection

        c.Style = "normal"
        c.Style = "|fffd||fffd||fffd||fffd|"
        c.Formula = c.text

    Next
'    Selection.EntireColumn.AutoFit

End Sub

Sub Display_Formula(ByVal control As IRibbonControl)

    On Error Resume Next

    Dim c

    If MsgBox("This action may change your contents of the cells.  Are you sure you want to proceed?", 1) <> 1 Then Exit Sub

    Selection.NumberFormatLocal = "@"
    For Each c In Selection

        c.Value = c.Formula
        c.Style = "normal"
        c.Style = "|fffd||fffd||fffd||fffd|"

    Next
'    Selection.EntireColumn.AutoFit


End Sub

Sub SheetNames(ByVal control As IRibbonControl)

    On Error Resume Next
    Dim myCell As Range, X As Long, Y As Long, ws, sCount As Long, sSort As String

    Static xp As Long, yp As Long, ShName As String, xyRC As String

    Sheets(ShName).Select
    If Err.Number > 0 Then
        Err.Clear
        ShName = ActiveSheet.Name
        If Err.Number > 0 Then
            Err.Clear
            MsgBox ("There needs to be an open workbook to properly run this application.")
            Exit Sub
        End If

    End If
    Cells(xp, yp).Select
    If Err.Number > 0 Then
        Err.Clear
        xp = Selection.Row
        yp = Selection.Column
    End If
    xyRC = ShName & "!" & Selection.Address

    Set myCell = Application.InputBox( _
                                      prompt:="Select a cell to place the result", Default:=xyRC, Type:=8)

    If Err.Number > 0 Then
        If Err.Number <> 424 Then
            MsgBox Err.Number & Err.Description
        End If
        Err.Clear
        Exit Sub
    End If

    ShName = myCell.Parent.Name
    X = myCell.Row: xp = X
    Y = myCell.Column: yp = Y

    For Each ws In Worksheets
        If Sheets(ws.Name).Visible = -1 Then
            sCount = sCount + 1
        End If
    Next
    Sheets(ShName).Select
    Range(Cells(X, Y), Cells(X + sCount - 1, Y)).Select
    If MsgBox("This range may be covered?", 1) <> 1 Then
        Exit Sub
    End If

    Err.Clear

    Application.ScreenUpdating = False

    Selection.Clear

    For Each ws In Worksheets
        If Sheets(ws.Name).Visible = -1 Then
            Cells(X, Y).Value = ws.Name
            Sheets(ShName).Hyperlinks.Add Anchor:=Cells(X, Y), Address:="", SubAddress:= _
                                                                                        "'" & ws.Name & "'!A1"

            If Err.Number > 0 Then
                MsgBox "Pls select an appropriate range and then try again."
                Err.Clear
                Exit Sub
            End If
            X = X + 1
        End If
    Next

    Range(Cells(X - sCount, Y), Cells(X - 1, Y)).Select
    Selection.EntireColumn.AutoFit

    Application.ScreenUpdating = True
    sSort = Application.InputBox _
            (prompt:="Sorting order (a-ascending, d-descending, n-no sorting)", _
             Default:="a", Type:=2)
    If sSort = "a" Then
        Selection.Sort key1:=Cells(X - sCount, Y), order1:=xlAscending, HEADER:=xlNo
    End If
    If sSort = "d" Then
        Selection.Sort key1:=Cells(X - sCount, Y), order1:=xlDescending, HEADER:=xlNo
    End If

    Err.Clear

End Sub

Attribute VB_Name = "Sam2"
Sub extract(ByVal control As IRibbonControl)

    On Error Resume Next

    Dim ws, rStart As Long, cStart As Long, rEnd As Long, cEnd As Long, sLink As Boolean, sStr As String
    Dim mm As String, x1 As Byte, y1 As Byte, sCount As Integer, x2 As Long, y2 As Long, TmpName As String
    Dim X As Long, Y As Long, sSort As String, c As Range, logic As Byte, myCell As Range, xyRC As String

    Static sStart As String, sEnd As String, xp As Long, yp As Long, sSheet As String, sFree As Byte

    Dim CalManualFlag As Byte

InpRange:
    If sStart = "" Or sStart = "False" Then sStart = "a1"
    If sFree = 1 Then sStart = "*"
    sStart = Application.InputBox _
             (prompt:="Input start cell here(e.g. a1, or "" * "" to ask computer to calculate the max. range)", _
              Default:=sStart, Type:=2)
    If sStart = "False" Then Exit Sub
    sFree = 0
    If sStart = "*" Then
        sFree = 1
        sStart = "a1"
        sEnd = "b1"
        GoTo InpPos
    End If

    If sEnd = "" Or sEnd = "False" Then sEnd = "b1"
    If sFree = 2 Then sEnd = "*"
    sEnd = Application.InputBox _
           (prompt:="Input end cell here (e.g. g3, or "" * "" to ask computer to calculate the max. range)", _
            Default:=sEnd, Type:=2)
    If sEnd = "False" Then Exit Sub
    If sEnd = "*" Then
        sFree = 2
        sEnd = Cells(Range(sStart).Row, Range(sStart).Column + 1).Address
        GoTo InpPos
    End If

    logic = Application.InputBox _
            (prompt:="Input your preferred layout (1<as columns>, 2<as rows>, or any number>0)", _
             Default:=9, Type:=1)
    If logic = 0 Then Exit Sub

InpPos:

    rStart = Range(sStart).Row
    If Err.Number > 0 Then
        Err.Clear
        MsgBox ("There needs to be an open workbook to properly run this application.")
        Exit Sub
    End If
    rEnd = Range(sEnd).Row
    cStart = Range(sStart).Column
    cEnd = Range(sEnd).Column
    If rStart > rEnd Or cStart > cEnd Then
        MsgBox ("start cell has exceeded end cell.")
        GoTo InpRange
    End If

    Sheets(sSheet).Select
    If Err.Number > 0 Then
        Err.Clear
        sSheet = ActiveSheet.Name
    End If
    Cells(xp, yp).Select
    If Err.Number > 0 Then
        Err.Clear
        xp = Selection.Row
        yp = Selection.Column
    End If

    xyRC = sSheet & "!" & Selection.Address

    Set myCell = Application.InputBox( _
                                      prompt:="Select a cell to place the result", Default:=xyRC, Type:=8)

    If Err.Number > 0 Then
        If Err.Number <> 424 Then
            MsgBox Err.Number & Err.Description
        End If
        Err.Clear
        Exit Sub
    End If

    sSheet = myCell.Parent.Name
    X = myCell.Row: xp = X
    Y = myCell.Column: yp = Y

    Sheets(sSheet).Select
    x1 = 1     ' meaning in rows
    If rEnd - rStart > cEnd - cStart Then x1 = 0
    y1 = 1 - x1

    sCount = -1

    For Each ws In Worksheets
        If Sheets(ws.Name).Visible = -1 Then
            If ws.Name <> sSheet Then
                sCount = sCount + 1
            End If
        End If
    Next

    If sFree = 0 Then
        If Y + (cEnd - cStart + 1) * y1 * sCount + x1 + cEnd - cStart > 16 Then
            x1 = 1: y1 = 0
        End If
        If logic = 1 Then
            x1 = 0
        End If
        If logic = 2 Then
            x1 = 1
        End If
        y1 = 1 - x1

        Range(Cells(X, Y), Cells(X + (rEnd - rStart + 1) * x1 * sCount + y1 + rEnd - rStart, Y + (cEnd - cStart + 1) * y1 * sCount + x1 + cEnd - cStart)).Select
        If Err.Number > 0 Then
            Err.Clear
            MsgBox ("Too many rows or columns.  Exceeding EXCEL's limits.  Cannot continue.")
            Exit Sub
        End If
        If MsgBox("This range may be covered?", 1) <> 1 Then
            GoTo InpPos
        End If
        Selection.Clear
    Else
        If MsgBox("The whole worksheet may be covered?", 1) <> 1 Then
            GoTo InpPos
        End If
        Cells.Clear
    End If

    sLink = False
    sStr = Application.InputBox(prompt:="Use linkage? (y-linkage, n-paste value only)", Default:="N", Type:=2)
    If sStr = "false" Then Exit Sub
    If sStr = "y" Or sStr = "Y" Then sLink = True

    If 3 * (sCount + 1) * (cEnd - cStart + 1) * (rEnd - rStart + 1) > 700000 And sLink = True Then
        sLink = False
        MsgBox ("The file may be too big.  Links won't be used.")
    End If

    Application.ScreenUpdating = False
    
    If Application.Calculation = xlCalculationManual Then
        CalManualFlag = 1
        Application.Calculation = xlCalculationAutomatic
    End If
    
    For Each ws In Worksheets
        If Sheets(ws.Name).Visible = -1 Then
            If ws.Name <> sSheet Then
                TmpName = ws.Name
                If InStr(1, TmpName, "[") > 0 Or InStr(1, TmpName, "]") > 0 Then
                    TmpName = Replace(TmpName, "[", "((")
                    TmpName = Replace(TmpName, "]", "))")
                    ws.Name = TmpName
                    If Err.Number > 0 Then
                        Err.Clear
                        MsgBox ("Worksheet< " & ws.Name & " > - Name irregular, cannot contain [ or ]")
                        Exit Sub
                    End If
                End If
                TmpName = Replace(TmpName, "'", "''")
                mm = "='" & TmpName & "'!" & sStart
                If sFree > 0 Then
                    Sheets(ws.Name).Select
                    Call clear_zero(False, False)
                    rEnd = Application.WorksheetFunction.Max(clendR, 1, rStart): cEnd = Application.WorksheetFunction.Max(1, clendC, cStart)
                End If
                Sheets(sSheet).Select
                Cells(X, Y) = ws.Name
                Cells(X, Y).Select
                With Selection.Interior
                    .ColorIndex = 6
                End With
                Selection.Font.Bold = True
                Cells(X + y1, Y + x1).Formula = mm
                Cells(X + y1, Y + x1).Copy
                Range(Cells(X + y1, Y + x1), Cells(X + y1 + rEnd - rStart, Y + x1 + cEnd - cStart)).Select
                ActiveSheet.Paste
                If sLink = False Then
                    Selection.Copy
                    Selection.PasteSpecial Paste:=xlPasteValues
                End If

                Sheets(ws.Name).Select
                Range(Cells(rStart, cStart), Cells(rEnd, cEnd)).Copy
                Sheets(sSheet).Select
                Range(Cells(X + y1, Y + x1), Cells(X + y1 + rEnd - rStart, Y + x1 + cEnd - cStart)).PasteSpecial Paste:=xlFormats
                x2 = X + (rEnd - rStart + 1) * x1
                y2 = Y + (cEnd - cStart + 1) * y1
                Range(Cells(X, Y), Cells(x2 - x1, y2 - y1)) = ws.Name
                X = x2
                Y = y2
            End If
        End If
    Next
    X = xp: Y = yp

    Range(Cells(X + y1, Y + x1), Cells(X + (rEnd - rStart + 1) * x1 * sCount + y1 + rEnd - rStart, Y + (cEnd - cStart + 1) * y1 * sCount + x1 + cEnd - cStart)).Select
    If sFree > 0 Then ActiveSheet.UsedRange.Select
    For Each c In Selection
        If c.Value = 0 Then c.NumberFormatLocal = "_ * #,##0.00_ ;_ * -#,##0.00_ ;_ * ""-""??_ ;_ @_ "
    Next c
    Err.Clear

    Range(Cells(X, Y), Cells(X + (rEnd - rStart + 1) * x1 * sCount + y1 + rEnd - rStart, Y + (cEnd - cStart + 1) * y1 * sCount + x1 + cEnd - cStart)).Select
    If sFree = 1 Then ActiveSheet.UsedRange.Select
    Selection.EntireColumn.AutoFit
    Application.ScreenUpdating = True
    
    If CalManualFlag Then
        Application.Calculation = xlCalculationManual
    End If
    
    sSort = Application.InputBox _
            (prompt:="Sorting order (a-ascending, d-descending, n-no sorting)", _
             Default:="a", Type:=2)

    On Error GoTo 0
    On Error GoTo ErrorHandler

    If sSort = "a" Then
        If x1 = 0 Then
            Selection.Sort key1:=Cells(X, Y), order1:=xlAscending, HEADER:=xlNo, Orientation:=xlSortRows
        Else
            Selection.Sort key1:=Cells(X, Y), order1:=xlAscending, HEADER:=xlNo, Orientation:=xlSortColumns
        End If
    End If
    If sSort = "d" Then
        If x1 = 0 Then
            Selection.Sort key1:=Cells(X, Y), order1:=xlDescending, HEADER:=xlNo, Orientation:=xlSortRows
        Else
            Selection.Sort key1:=Cells(X, Y), order1:=xlDescending, HEADER:=xlNo, Orientation:=xlSortColumns
        End If
    End If

    Application.CutCopyMode = False

    Exit Sub

ErrorHandler:
    MsgBox Err.Description
    Err.Clear

End Sub
Sub macro_extract(ByVal control As IRibbonControl)

    On Error Resume Next

    Dim rStart As Long, cStart As Long, rEnd As Long, cEnd As Long, lLl As Boolean, sLink As Boolean, TargetFile, sStr As String
    Dim X As Long, Y As Long, mm As String, x1 As Byte, y1 As Byte, sCount As Long, x2 As Long, y2 As Long, myCell As Range
    Dim FolderName As String, c, fs, f1, fc As Long, Ti As Long, sSort As String, logic As Byte, TmpName As String
    'Dim ADOX As Object, TableName As String, dbFile As String, strProvider As String, i As Long, NoMatch As Integer
    Dim sFN As String, sFNt As String, nTmp1 As Integer, nTmp2 As Integer, mName As String

    Static ShName As String, sStart As String, sEnd As String, sSheet As String, xp As Long, yp As Long, xyRC As String

    sFN = "temp_temp__"
    sFNt = ActiveSheet.Name
    If Err.Number > 0 Then
        Err.Clear
        MsgBox ("There needs to be an open workbook to properly run this application.")
        Exit Sub
    End If

    Set fs = CreateObject("Scripting.FileSystemObject")

InpFolder:
    TargetFile = Application _
                 .GetOpenFilename("Excel Workbooks (*.xls;*.xlsx;*.xlsm;*.xlsb), *.xls;*.xlsx;*.xlsm;*.xlsb", , "Select file(s)", , True)
    Do While True
        sStr = TargetFile(Ti + 1)
        If Err.Number = 13 Then Exit Sub   ' type mismatch, TFile=false, cancelled.
        If Err.Number = 9 Then Exit Do  ' out of range.  Reach the end of TFile
        Ti = Ti + 1
    Loop
    Err.Clear
    sStr = TargetFile(Ti)

    Set f1 = fs.getfile(sStr)
    FolderName = f1.parentfolder
    If InStr(1, FolderName, "[") > 0 Or InStr(1, FolderName, "]") > 0 Then
        MsgBox ("Folder name < " & FolderName & " > - Name irregular, cannot contain [ or ]")
        GoTo InpFolder
    End If
    FolderName = Replace(FolderName, "'", "''")


InpShName:
    Application.ScreenUpdating = False
    Sheets(sFN).Activate
    If Err.Number > 0 Then
        Err.Clear
        Sheets.Add
        If Err.Number > 0 Then
            Err.Clear
            MsgBox ("The application cannot be run on an active workbook which is structure-protected.")
            Exit Sub
        End If
        ActiveSheet.Name = sFN
        ActiveSheet.Visible = 2
    End If
    mm = ""
    For fc = 1 To Ti
        sStr = TargetFile(fc)
        Set f1 = fs.getfile(sStr)
        TmpName = f1.Name
        Windows(f1.Name).Activate
        If Err.Number = 0 Then GoTo FNext
        Err.Clear
        If InStr(1, TmpName, "[") > 0 Or InStr(1, TmpName, "]") > 0 Then
        Else
            TmpName = Replace(TmpName, "'", "''")
            mm = "='" & FolderName & "\[" & TmpName & "]" & "" & "'!a1"
            Cells(1, 1).Formula = mm
            If Err.Number > 0 Then
                Err.Clear
                If MsgBox("Warning!" & vbCrLf & "The list of sheet names is extracted from Workbook < " & f1.Name & " >." & vbCrLf & " Are you sure you want to input sheet names by yourself?", 4) <> 6 Then
                    Exit Sub
                Else
                    ShName = Application.InputBox _
                             (prompt:="Input your own sheet name(e.g. BalanceSheet)", _
                              Default:=ShName, Type:=2)
                    If ShName = "False" Then Exit Sub
                End If
            Else
                mm = Cells(1, 1).Formula
                X = InStr(1, mm, "]")
                mm = Mid(mm, X + 1, Len(mm) - X - 4)
                If mm <> "" Then ShName = mm
            End If
            Exit For
        End If
FNext:
    Next
    If mm = "" Then
        MsgBox ("All workbooks are open or have irregular names containing [ or ].")
        Exit Sub
    End If


    If InStr(1, ShName, "[") > 0 Or InStr(1, ShName, "]") > 0 Then
        MsgBox ("Worksheet < " & ShName & " > - Name irregular, cannot contain [ or ]")
        GoTo InpShName
    End If
    ShName = Replace(ShName, "'", "''")
    Cells(1, 1).Clear
    Sheets(sFNt).Select

    Application.ScreenUpdating = True

InpRange:
    If sStart = "" Or sStart = "False" Then sStart = "a1"
    sStart = Application.InputBox _
             (prompt:="Input start cell here(e.g. a1)", _
              Default:=sStart, Type:=2)
    If sStart = "False" Then Exit Sub

    If sEnd = "" Or sEnd = "False" Then sEnd = "b1"
    sEnd = Application.InputBox _
           (prompt:="Input end cell here (e.g. g3)", _
            Default:=sEnd, Type:=2)
    If sEnd = "False" Then Exit Sub

    rStart = Range(sStart).Row
    rEnd = Range(sEnd).Row
    cStart = Range(sStart).Column
    cEnd = Range(sEnd).Column
    If rStart > rEnd Or cStart > cEnd Then
        MsgBox ("start cell has exceeded end cell.")
        GoTo InpRange
    End If

    logic = Application.InputBox _
            (prompt:="Input your preferred layout (1<as columns>, 2<as rows>, or any number>0)", _
             Default:=9, Type:=1)
    If logic = 0 Then Exit Sub

InpPos:
    Sheets(sSheet).Select
    If Err.Number > 0 Then
        Err.Clear
        sSheet = ActiveSheet.Name
    End If
    Cells(xp, yp).Select
    If Err.Number > 0 Then
        Err.Clear
        xp = Selection.Row
        yp = Selection.Column
    End If
    xyRC = sSheet & "!" & Selection.Address

    Set myCell = Application.InputBox( _
                                      prompt:="Select a cell to place the result", Default:=xyRC, Type:=8)
    If Err.Number > 0 Then
        If Err.Number <> 424 Then
            MsgBox Err.Number & Err.Description
        End If
        Err.Clear
        Exit Sub
    End If

    sSheet = myCell.Parent.Name
    X = myCell.Row: xp = X
    Y = myCell.Column: yp = Y

    Sheets(sSheet).Select
    x1 = 1   ' meaning in rows
    If rEnd - rStart > cEnd - cStart Then x1 = 0
    y1 = 1 - x1

    sCount = Ti - 1

    If Y + (cEnd - cStart + 1) * y1 * sCount + x1 + cEnd - cStart > 16 Then
        x1 = 1: y1 = 0
    End If
    If logic = 1 Then
        x1 = 0
    End If
    If logic = 2 Then
        x1 = 1
    End If
    y1 = 1 - x1
    Range(Cells(X, Y), Cells(X + (rEnd - rStart + 1) * x1 * sCount + y1 + rEnd - rStart, Y + (cEnd - cStart + 1) * y1 * sCount + x1 + cEnd - cStart)).Select
    If Err.Number > 0 Then
        Err.Clear
        MsgBox ("Too many rows or columns.  Exceeding EXCEL's limits.  Cannot continue.")
        Exit Sub
    End If
    If MsgBox("This range may be covered?", 1) <> 1 Then
        GoTo InpPos
    End If

    Selection.Clear
    lLl = True

    sLink = False
    sStr = Application.InputBox(prompt:="Use linkage? (Y-linkage, n-paste value only)", Default:="N", Type:=2)
    If sStr = "false" Then Exit Sub
    If sStr = "y" Or sStr = "Y" Then sLink = True
    If (sCount + 1) * (cEnd - cStart + 1) * (rEnd - rStart + 1) > 800000 And sLink = True Then
        sLink = False
        MsgBox ("The file may be too big.  Links won't be used.")
    End If

    For fc = 1 To Ti
        sStr = TargetFile(fc)
        Set f1 = fs.getfile(sStr)
        TmpName = f1.Name
        If lLl Then
            If InStr(1, TmpName, "[") > 0 Or InStr(1, TmpName, "]") > 0 Then
                lLl = False
                If MsgBox("File < " & TmpName & " >'s name is irregular, containing [ or ].  I can continue, but later may need you to press <cancel> many times." & vbCrLf & "I suggest that you cancel this operation and rename those irregular files.  Cancel?", 4) = 6 Then
                    Exit Sub
                End If
            End If
        End If
        TmpName = Replace(TmpName, "[", "(")
        TmpName = Replace(TmpName, "]", ")")
        TmpName = Replace(TmpName, "'", "''")
        mm = "='" & FolderName & "\[" & TmpName & "]" & ShName & "'!" & sStart
        Sheets(sSheet).Select
        x2 = X + (rEnd - rStart + 1) * x1
        y2 = Y + (cEnd - cStart + 1) * y1
        Cells(X, Y) = "[" & f1.Name & "]" & ShName
        Cells(X, Y).Select
        Cells(X, Y).Interior.ColorIndex = 6
        Cells(X, Y).Font.Bold = True
        Cells(X + y1, Y + x1).Formula = mm
        If Err.Number > 0 Then
            Err.Clear
            Cells(X, Y).Interior.ColorIndex = 3
            mName = ShName
        Else
            Cells(X + y1, Y + x1).Copy
            Range(Cells(X + y1, Y + x1), Cells(X + y1 + rEnd - rStart, Y + x1 + cEnd - cStart)).Select
            ActiveSheet.Paste
            mm = Cells(X + y1, Y + x1).Formula
            If Cells(X + y1 + rEnd - rStart, Y + x1 + cEnd - cStart).text <> "#REF!" Then
                Cells(X + y1, Y + x1).Formula = mm
            End If
            If rEnd = rStart And cEnd = cStart Then
                Cells(X + y1, Y + x1).Formula = mm
            End If
            nTmp1 = InStr(1, mm, "]")
            nTmp2 = Len(mm) - Len(sStart) - 2 - nTmp1
            mName = Mid(mm, nTmp1 + 1, nTmp2)
            If sLink = False Then
                Selection.Copy
                Selection.PasteSpecial Paste:=xlPasteValues
            End If
            For Each c In Selection
                If c.Value = 0 Then c.NumberFormatLocal = "_ * #,##0.00_ ;_ * -#,##0.00_ ;_ * ""-""??_ ;_ @_ "
            Next c
            Err.Clear
        End If
        Range(Cells(X, Y), Cells(x2 - x1, y2 - y1)) = "[" & f1.Name & "]" & mName
        X = x2
        Y = y2
    Next
    X = xp: Y = yp

    Range(Cells(X, Y), Cells(X + (rEnd - rStart + 1) * x1 * sCount + y1 + rEnd - rStart, Y + (cEnd - cStart + 1) * y1 * sCount + x1 + cEnd - cStart)).Select
    Selection.EntireColumn.AutoFit

    sSort = Application.InputBox _
            (prompt:="Sorting order (a-ascending, d-descending, n-no sorting)", _
             Default:="a", Type:=2)
    If sSort = "a" Then
        If x1 = 0 Then
            Selection.Sort key1:=Cells(X, Y), order1:=xlAscending, HEADER:=xlNo, Orientation:=xlSortRows
        Else
            Selection.Sort key1:=Cells(X, Y), order1:=xlAscending, HEADER:=xlNo, Orientation:=xlSortColumns
        End If
    End If
    If sSort = "d" Then
        If x1 = 0 Then
            Selection.Sort key1:=Cells(X, Y), order1:=xlDescending, HEADER:=xlNo, Orientation:=xlSortRows
        Else
            Selection.Sort key1:=Cells(X, Y), order1:=xlDescending, HEADER:=xlNo, Orientation:=xlSortColumns
        End If
    End If

    Application.CutCopyMode = False

    Err.Clear

End Sub

Sub clear_zero(clClear As Boolean, fClear As Boolean, Optional UseRan As Range)

    Dim clTmp1 As Long, clTmp2 As Long, clTmp3 As Long, clX As Long, clY As Long, clDisp As Byte

    On Error GoTo errHandler

    clDisp = 0
    clendC = -3
    clendC = UseRan.Columns.Count

    If clClear = True Or clendC = -3 Then Set UseRan = ActiveSheet.UsedRange

    With UseRan
        clendR = .Row
        clendC = .Column
        clX = .Rows.Count
        clY = .Columns.Count
        If clX = 0 Or clY <= 0 Then
            clendR = 0
            clendC = 0
            Exit Sub
        End If
        If .Cells(clX, clY).Value = "" Then clDisp = 1: .Cells(clX, clY).Value = 0: .Cells(clX, clY).Clear: clDisp = 0
        For clTmp1 = clX To 1 Step -1
            clTmp2 = Application.WorksheetFunction.CountIf(Range(.Cells(clTmp1, 1), .Cells(clTmp1, clY)), "") + Application.WorksheetFunction.CountIf(Range(.Cells(clTmp1, 1), .Cells(clTmp1, clY)), 0)
            clTmp3 = Application.WorksheetFunction.CountIf(Range(.Cells(clTmp1, 1), .Cells(clTmp1, clY)), "#REF!")
            If Not (clTmp2 + clTmp3 = clY And clTmp2 * clTmp3 = 0) Then Exit For

            If Not fClear Then
                If Range(.Cells(clTmp1, 1), .Cells(clTmp1, clY)).HasFormula = False Then
                Else
                    Exit For
                End If
            End If

        Next
        If clClear Then
            If clTmp1 = 0 Then
                If clX > 1 Then Range(.Cells(2, 1), .Cells(clX, 1)).EntireRow.Clear
                If clY > 1 Then Range(.Cells(1, 2), .Cells(1, clY)).EntireColumn.Clear
            Else
                If clTmp1 < clX Then Range(.Cells(clTmp1 + 1, 1), .Cells(clX, clY)).EntireRow.Clear
            End If
        End If
        clX = clTmp1
        If clX = 0 Then
            clendR = 0: clendC = 0
            Exit Sub
        End If
        For clTmp1 = clY To 1 Step -1
            clTmp2 = Application.WorksheetFunction.CountIf(Range(.Cells(1, clTmp1), .Cells(clX, clTmp1)), "") + Application.WorksheetFunction.CountIf(Range(.Cells(1, clTmp1), .Cells(clX, clTmp1)), 0)
            clTmp3 = Application.WorksheetFunction.CountIf(Range(.Cells(1, clTmp1), .Cells(clX, clTmp1)), "#REF!")
            If Not (clTmp2 + clTmp3 = clX And clTmp2 * clTmp3 = 0) Then Exit For

            If Not fClear Then
                If Range(.Cells(1, clTmp1), .Cells(clX, clTmp1)).HasFormula = False Then
                Else
                    Exit For
                End If
            End If

        Next

        If clTmp1 < clY And clClear Then Range(.Cells(1, clTmp1 + 1), .Cells(clX, clY)).EntireColumn.Clear
    End With

    clendR = clX + clendR - 1: clendC = clTmp1 + clendC - 1
    Exit Sub

errHandler:
    If Err.Number = 91 And clendC = -3 Then Err.Clear: Resume Next
    If clDisp = 0 Then
        MsgBox ("Certain worksheets are protected and maynot be changed.  --" & ActiveSheet.Name & vbCrLf & Err.Number & "  " & Err.Description)
        clDisp = 1
    End If
    Err.Clear
    Resume Next

End Sub
Sub DateConvertor(ByVal control As IRibbonControl)

'v1.1 on 2004-3-16

    On Error Resume Next

    Dim myRange As Range, myCell As Range, c, dStr As String, dDec As Integer
    Dim ma As Integer, mb As Integer, mc As Integer, dYear As String, dMonth As String, dDate As String
    Dim z(3) As String, md As Integer, dDoubt As Boolean, mf As Integer, sa As String, sb As String, sc As String
    Dim dYear1 As String, dMonth1 As String, dDate1 As String, dDoubt1 As Boolean, mm As Long

    Set myRange = Application.InputBox( _
                                       prompt:="Select the date range to be converted", Title:="DateConvertor", Type:=8)

    If Err.Number > 0 Then
        If Err.Number <> 424 Then
            MsgBox Err.Number & Err.Description
        End If
        Err.Clear
        Exit Sub
    End If

    If myRange.Columns.Count > 1 Then MsgBox ("The date range must be single-column."): Err.Clear: Exit Sub

InpPos:
    Set myCell = Application.InputBox( _
                                      prompt:="Select a cell to place the result", Title:="DateConvertor", Type:=8)

    If Err.Number > 0 Then
        If Err.Number <> 424 Then
            MsgBox Err.Number & Err.Description
        End If
        Err.Clear
        Exit Sub
    End If

    ma = myRange.Rows.Count
    mc = myCell.Row
    md = myCell.Column

    Range(Cells(mc, md), Cells(mc + ma - 1, md + 3)).Select

    If MsgBox("May this area be covered?", vbOKCancel, "DateCovertor") <> vbOK Then GoTo InpPos

    Selection.Clear

    myRange.Copy
    myCell.Select
    ActiveSheet.Paste
    Selection.EntireColumn.AutoFit

    For Each c In Selection

        dStr = LTrim(RTrim(c.text))
        If Trim(c.text) = "" Then GoTo JumpToNext
        mm = 0
        mm = c.Value
        Err.Clear
        GoSub Check

        dYear1 = dYear
        dMonth1 = dMonth
        dDate1 = dDate
        dDoubt1 = dDoubt

        'First check - use the TEXT (what is displayed) of the cell to check the actual date format.

        c.NumberFormatLocal = "dd-mm-yyyy"
        c.EntireColumn.AutoFit
        c.Value = c.text
        c.Value = c.text

        dStr = LTrim(RTrim(c.text))

        GoSub Check

        'second check - use the Value of the cell to check the actual date format.

        'among above two checks, if one checking is "no doubt", the result will be that one.

        If Len(str(mm)) = 6 And mm > 18263 And mm < 54789 Then dDoubt = False: dDoubt1 = True    'this is specifically _
                                                                                                 for "33629" type input. Both checking will give result, but the 2nd one will be correct._
        'the range is from 1950-1-1 to 2049-12-31.
        If Len(str(mm)) = 5 And mm > 1949 And mm < 2050 Then dDoubt = True: dDoubt1 = False
        If Len(str(mm)) = 3 Then dDoubt = True: dDoubt1 = False

        ' Above two are for type "1959" "2033" or "67".

        If dDoubt And dDoubt1 Then
            GoSub Hilit
        Else
            If dDoubt1 Then
                dYear1 = dYear
                dMonth1 = dMonth
                dDate1 = dDate
                dDoubt1 = dDoubt
            End If
        End If

        If Val(dYear1) > 1949 And Val(dYear1) < 2050 And Val(dMonth1) > 0 And Val(dMonth1) < 13 And Val(dDate1) > 0 And Val(dDate1) < 32 Then
        Else
            GoSub Hilit
            GoTo JumpToNext
        End If

        dStr = "=date(" & Val(dYear1) & "," & Val(dMonth1) & "," & Val(dDate1) & ")"
        c.Formula = dStr
        c.NumberFormatLocal = "dd-mmm-yyyy"
        ma = Year(c.Value)
        mb = Month(c.Value)
        mc = Day(c.Value)

        If ma <> Val(dYear1) Or mb <> Val(dMonth1) Or mc <> Val(dDate1) Then GoSub Hilit

        dStr = "=year(" & c.Address & ")"
        Cells(c.Row, c.Column + 1).Formula = dStr

        dStr = "=month(" & c.Address & ")"
        Cells(c.Row, c.Column + 2).Formula = dStr

        dStr = "=day(" & c.Address & ")"
        Cells(c.Row, c.Column + 3).Formula = dStr

        Range(Cells(c.Row, c.Column + 1), Cells(c.Row, c.Column + 3)).NumberFormat = "0"


JumpToNext:
    Next

    With Selection
        .HorizontalAlignment = xlRight
        .VerticalAlignment = xlBottom
        .EntireColumn.AutoFit
    End With

    Err.Clear
    Exit Sub

Check:

    dDoubt = False
    dYear = ""
    dMonth = ""
    dDate = ""
    z(1) = "": z(2) = "": z(3) = ""

    ' above is data initiation.

    ' the standard format should be "xxx-xx-xxx".  Below is the trimming process to make the string become standard

    If InStr(1, dStr, "january") > 0 Or InStr(1, dStr, "jan") > 0 Then dStr = Replace(dStr, "january", "01"): dStr = Replace(dStr, "jan", "01"): dMonth = "01"
    If InStr(1, dStr, "february") > 0 Or InStr(1, dStr, "feb") > 0 Then dStr = Replace(dStr, "february", "02"): dStr = Replace(dStr, "feb", "02"): dMonth = "02"
    If InStr(1, dStr, "march") > 0 Or InStr(1, dStr, "mar") > 0 Then dStr = Replace(dStr, "march", "03"): dStr = Replace(dStr, "mar", "03"): dMonth = "03"
    If InStr(1, dStr, "april") > 0 Or InStr(1, dStr, "apr") > 0 Then dStr = Replace(dStr, "april", "04"): dStr = Replace(dStr, "apr", "04"): dMonth = "04"
    If InStr(1, dStr, "may") > 0 Or InStr(1, dStr, "may") > 0 Then dStr = Replace(dStr, "may", "05"): dStr = Replace(dStr, "may", "05"): dMonth = "05"
    If InStr(1, dStr, "june") > 0 Or InStr(1, dStr, "jun") > 0 Then dStr = Replace(dStr, "june", "06"): dStr = Replace(dStr, "jun", "06"): dMonth = "06"
    If InStr(1, dStr, "july") > 0 Or InStr(1, dStr, "jul") > 0 Then dStr = Replace(dStr, "july", "07"): dStr = Replace(dStr, "jul", "07"): dMonth = "07"
    If InStr(1, dStr, "august") > 0 Or InStr(1, dStr, "aug") > 0 Then dStr = Replace(dStr, "august", "08"): dStr = Replace(dStr, "aug", "08"): dMonth = "08"
    If InStr(1, dStr, "september") > 0 Or InStr(1, dStr, "sep") > 0 Then dStr = Replace(dStr, "september", "09"): dStr = Replace(dStr, "sep", "09"): dMonth = "09"
    If InStr(1, dStr, "october") > 0 Or InStr(1, dStr, "oct") > 0 Then dStr = Replace(dStr, "october", "10"): dStr = Replace(dStr, "oct", "10"): dMonth = "10"
    If InStr(1, dStr, "november") > 0 Or InStr(1, dStr, "nov") > 0 Then dStr = Replace(dStr, "november", "11"): dStr = Replace(dStr, "nov", "11"): dMonth = "11"
    If InStr(1, dStr, "december") > 0 Or InStr(1, dStr, "dec") > 0 Then dStr = Replace(dStr, "december", "12"): dStr = Replace(dStr, "dec", "12"): dMonth = "12"

    'if at early stage of trimming the string, we can identify the key words, such as "|fffd||fffd|" or "december", we will note down this as dYear or dMonth immeidately.

    dStr = Replace(dStr, "|fffd||fffd|", "0")
    dStr = Replace(dStr, "|fffd||fffd|", "0")
    dStr = Replace(dStr, "|fffd||fffd|", "0")
    dStr = Replace(dStr, "|4bb|", "1")
    dStr = Replace(dStr, "|4bc|", "1")
    dStr = Replace(dStr, "|fffd||fffd|", "2")
    dStr = Replace(dStr, "|fffd||fffd|", "2")
    dStr = Replace(dStr, "|fffd||fffd|", "3")
    dStr = Replace(dStr, "|fffd||fffd|", "3")
    dStr = Replace(dStr, "|fffd||fffd|", "4")
    dStr = Replace(dStr, "|fffd||fffd|", "4")
    dStr = Replace(dStr, "|fffd||fffd|", "5")
    dStr = Replace(dStr, "|fffd||fffd|", "5")
    dStr = Replace(dStr, "|fffd||fffd|", "6")
    dStr = Replace(dStr, "|bd|", "6")
    dStr = Replace(dStr, "|fffd||fffd|", "7")
    dStr = Replace(dStr, "|fffd||fffd|", "7")
    dStr = Replace(dStr, "|fffd||fffd|", "8")
    dStr = Replace(dStr, "|fffd||fffd|", "8")
    dStr = Replace(dStr, "|fffd||fffd|", "9")
    dStr = Replace(dStr, "|fffd||fffd|", "9")
    dStr = Replace(dStr, "|2b0|", "|2ae|")

    'below procedure is to handle |fffd||fffd||2ae||fffd||fffd|in Chn language logic

    Do While True
        dDec = InStr(1, dStr, "|2ae|")
        If dDec > 0 Then
            If dDec = 1 Then
                sa = " "
            Else
                sa = Mid(dStr, dDec - 1, 1)  'sa is the letter before "|2ae|"
            End If
            If dDec < Len(dStr) Then
                sb = Mid(dStr, dDec + 1, 1)
            Else
                sb = " "  'sb is the letter after "|2ae|"
            End If
        Else
            Exit Do
        End If

        If dDec = 1 Then sc = "" Else sc = Left(dStr, dDec - 1)

        If Asc(sb) > 47 And Asc(sb) < 58 Then
            If Asc(sa) > 47 And Asc(sa) < 58 Then
                dStr = sc & Replace(dStr, "|2ae|", "", dDec, 1)    'both sa & sb are numbers, "|2ae|" is omittable.
            Else
                dStr = sc & Replace(dStr, "|2ae|", "1", dDec, 1)    'only sb is number, "|2ae|" is "1" before another number
            End If
        Else
            If Asc(sa) > 47 And Asc(sa) < 58 Then
                dStr = sc & Replace(dStr, "|2ae|", "0", dDec, 1)    'only sa is number, "|2ae|" means "0"
            Else
                dStr = sc & Replace(dStr, "|2ae|", "10", dDec, 1)    'both sa and sb are NOT numbers, "|2ae|" menas "10".
            End If
        End If
    Loop

    'below part is to identify |fffd||fffd||fffd||fffd||fffd||fffd|, and early-decision on dYear, dMonth and dDate.
    ma = InStr(1, dStr, "|fffd||fffd|")
    mb = InStr(1, dStr, "|fffd||fffd|")
    mc = InStr(1, dStr, "|fffd||fffd|")

    If ma > 0 Then
        md = Application.WorksheetFunction.Min(ma, mb)
        mf = Application.WorksheetFunction.Min(ma, mc)
        If md = ma Then md = md - 5
        If mf = ma Then mf = mf - 5
        md = Application.WorksheetFunction.Max(0, md, mf, ma - 5)
        dYear = Mid(dStr, md + 1, ma - 1 - md)
        If Len(dYear) = 4 Then
            If Val(dYear) < 1950 Or Val(dYear) > 2049 Then dYear = Right(dYear, 2)
        End If
    End If

    If mb > 0 Then
        md = Application.WorksheetFunction.Min(mc, mb)
        mf = Application.WorksheetFunction.Min(ma, mb)
        If md = mb Then md = md - 3
        If mf = mb Then mf = mf - 3
        md = Application.WorksheetFunction.Max(0, md, mf, mb - 3)
        dMonth = Mid(dStr, md + 1, mb - md - 1)
        If Val(dMonth) < 1 Or Val(dMonth) > 12 Then dMonth = Right(dMonth, 1)
        If Val(dMonth) < 1 Or Val(dMonth) > 12 Then dMonth = ""
    End If

    If mc > 0 Then
        md = Application.WorksheetFunction.Min(mc, mb)
        mf = Application.WorksheetFunction.Min(mc, ma)
        If md = mc Then md = md - 3
        If mf = mc Then mf = mf - 3
        md = Application.WorksheetFunction.Max(0, md, mf, mc - 3)
        dDate = Mid(dStr, md + 1, mc - md - 1)
        If Val(dDate) < 1 Or Val(dDate) > 31 Then dDate = Right(dDate, 1)
        If Val(dDate) < 1 Or Val(dDate) > 31 Then dDate = ""
    End If

    'this is triming process again.

    dStr = Replace(dStr, "|fffd||fffd|", "-")
    dStr = Replace(dStr, "|fffd||fffd|", "-")
    dStr = Replace(dStr, "|fffd||fffd|", "-")
    dStr = Replace(dStr, "/", "-")
    dStr = Replace(dStr, ".", "-")
    dStr = Replace(dStr, " ", "-")
    dStr = Replace(dStr, ",", "-")
    dStr = Replace(dStr, "|fffd||fffd|", "-")
    dStr = Replace(dStr, "'", "-")
    dStr = Replace(dStr, """", "-")
    dStr = Replace(dStr, "_", "-")
    dStr = Replace(dStr, "|fffd||fffd|", "-")
    dStr = Replace(dStr, "|fffd||fffd|", "-")
    dStr = Replace(dStr, "|fffd||fffd|", "-")
    dStr = Replace(dStr, "|fffd||fffd|", "-")
    dStr = Replace(dStr, "|fffd||fffd|", "-")
    dStr = Replace(dStr, "|fffd||fffd||fffd||fffd|", "-")

    dStr = Replace(dStr, "--", "-")
    dStr = Replace(dStr, "--", "-")
    dStr = Replace(dStr, "--", "-")
    dStr = Replace(dStr, "--", "-")


    'this part is to trim other CHN characters -- i.e. asc()<0
    ma = 0
    Do While True
        ma = ma + 1
        If ma > Len(dStr) Then Exit Do
        If Asc(Mid(dStr, ma, 1)) < 0 Then dDoubt = True: dStr = Replace(dStr, Mid(dStr, ma, 1), "")
        If Asc(Mid(dStr, ma, 1)) > 64 And Asc(Mid(dStr, ma, 1)) < 123 Then dStr = Replace(dStr, Mid(dStr, ma, 1), "")
    Loop

    Do While True
        If Left(dStr, 1) <> "-" Then Exit Do
        dStr = Right(dStr, Len(dStr) - 1)
    Loop

    Do While True
        If Right(dStr, 1) <> "-" Then Exit Do
        dStr = Left(dStr, Len(dStr) - 1)
    Loop

    If Len(dStr) = 0 Then dDoubt = True: Return

    'from this part, trimming process is completed.
    'the below part is to get z(1), z(2) and z(3) by identifying the separator "-"

    mb = 0
    mb = InStr(1, dStr, "-")
    If mb = 0 Then GoSub Split
    mb = InStr(1, dStr, "-")
    If mb = 0 Then
        z(1) = dStr: z(2) = "01": z(3) = "00"
    Else
        z(1) = Left(dStr, mb - 1)
        mc = 0
        mc = InStr(mb + 1, dStr, "-")
        If mc = 0 Then
            Err.Clear
            z(2) = "00"
            z(3) = Mid(dStr, mb + 1, Len(dStr) - mb)
        Else
            z(2) = Mid(dStr, mb + 1, mc - mb - 1)
            z(3) = Right(dStr, Len(dStr) - mc)
        End If
    End If

    For ma = 1 To 3
        z(ma) = Replace(z(ma), "-", "")
        z(ma) = str(Val(z(ma)))
        z(ma) = Right(z(ma), Len(z(ma)) - 1)
    Next


    'to match z(1), z(2) and z(3) with dYear, dMonth and dDate
    If dYear = "" Then
        For ma = 1 To 3
            If Val(z(ma)) > 49 And Len(z(ma)) = 2 Then z(ma) = "19" & z(ma)
        Next

        mb = 0: mc = 0
        For ma = 1 To 3
            If Val(z(ma)) > 1949 And Val(z(ma)) < 2050 Then mb = ma: mc = mc + 1
        Next
        If mc > 1 Then dDoubt = True  ' two Zs qualify for year, a problem.
        If mc = 0 Then mb = 3  'no one qualifies for year, then assume the last one is.
        dYear = z(mb)
        If Val(dYear) < 50 Then dYear = "20" & dYear
    Else
        For ma = 1 To 3
            mb = ma
            If Val(z(ma)) = Val(dYear) Then ma = 5: Exit For
        Next
        If ma <> 5 Then dDoubt = True
    End If

    If dMonth = "" Then
        mc = 0: md = 0
        For ma = 1 To 3
            If ma <> mb Then
                If Val(z(ma)) > 0 And Val(z(ma)) < 13 Then mc = ma: md = md + 1
            End If
        Next
        If md = 2 Then
            If mb <> 1 And Val(z(mc)) <> Val(z(6 - mc - mb)) Then dDoubt = True
            If mb = 1 Then
                If z(2) <> "00" Then mc = 2 Else mc = 3
            End If
        End If
        If md = 0 Then
            dDoubt = True: mc = Application.WorksheetFunction.Max(mb - 1, 3 - mb)
        End If
        dMonth = z(mc)
    Else
        For ma = 1 To 3
            mc = ma
            If Val(z(ma)) = Val(dMonth) Then ma = 5: Exit For
        Next
        If ma <> 5 Then dDoubt = True
    End If

    If dDate = "" Or Val(dDate) = Val(z(6 - mb - mc)) Then
        dDate = z(6 - mb - mc)
    Else
        dDoubt = True
        If Val(dDate) = Val(dMonth) Then dMonth = z(6 - mb - mc) Else dDate = Right(dYear, 2): dYear = z(6 - mb - mc)
    End If

    If Val(dYear) < 1950 And Len(dYear) = 4 Then dYear = "20" & Right(dYear, 2)
    If Val(dYear) < 50 And Len(dYear) = 2 Then dYear = "20" & dYear
    If Len(dYear) = 2 Then dYear = "19" & dYear
    If Len(dYear) = 3 Then dYear = "20" & Right(dYear, 2)
    If Len(dYear) = 1 Then dYear = "200" & dYear

    If Val(dMonth) = 0 Then dMonth = "01"
    If Val(dDate) = 0 Then dDate = "01"


    Return

Split:
    'split is to handle type "199706" or "19970612" or "970612". assumption is that the year normally should be the first part.
    'split can also handle "06122003" type

    ma = Len(dStr)
    If ma = 6 Then
        If Val(Left(dStr, 4)) > 1949 And Val(Left(dStr, 4)) < 2050 Then dStr = Left(dStr, 4) & "-" & Right(dStr, 2): Return
        dStr = Left(dStr, 2) & "-" & Mid(dStr, 3, 2) & "-" & Right(dStr, 2)
        Return
    End If
    If ma = 8 Then
        If Val(Left(dStr, 4)) > 1949 And Val(Left(dStr, 4)) < 2050 Then
            dStr = Left(dStr, 4) & "-" & Mid(dStr, 5, 2) & "-" & Right(dStr, 2)
        Else
            dStr = Left(dStr, 2) & "-" & Mid(dStr, 3, 2) & "-" & Right(dStr, 4)
        End If
        Return
    End If
    dDoubt = True
    Return

Hilit:
    With c.Font
        .Bold = True
        .Size = 14
        .Underline = xlUnderlineStyleSingleAccounting
        .ColorIndex = 3
    End With
    c.Interior.ColorIndex = 6

    Return

End Sub

Attribute VB_Name = "SamHS"
Function sumcolor(rColor As Range, rSumRange As Range)
Dim rCell As Range
Dim iCol As Integer
Dim vResult
On Error GoTo ErrorHandler
Application.Volatile (True)
iCol = rColor.Interior.ColorIndex

   For Each rCell In rSumRange
    If rCell.Interior.ColorIndex = iCol Then
            vResult = rCell.Value + vResult
    End If
   Next rCell

sumcolor = vResult

Exit Function

ErrorHandler:
Err.Clear
Exit Function

End Function
Function countcolor(rColor As Range, rSumRange As Range)
Dim rCell As Range
Dim iCol As Integer
Dim vResult
On Error GoTo ErrorHandler
Application.Volatile (True)

iCol = rColor.Interior.ColorIndex

   For Each rCell In rSumRange
    If rCell.Interior.ColorIndex = iCol Then
         vResult = vResult + 1
    End If
   Next rCell

countcolor = vResult

Exit Function

ErrorHandler:
Err.Clear
Exit Function

End Function
Function ccolor(rSumRange As Range)

On Error GoTo ErrorHandler
Application.Volatile (True)
ccolor = rSumRange.Interior.ColorIndex

Exit Function

ErrorHandler:
Err.Clear
Exit Function

End Function
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{30D9E630-9B63-4066-B64C-78DC2B6D5D73}{9D30C78D-056D-4D32-970B-2085E123B627}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CB_Cancel_Click()
Unload Me
End Sub

Private Sub CB_ok_Click()

On Error Resume Next

Dim N_Cell, Input_range As Range
Dim sht As Worksheet
Dim i, j, k, l As Integer, N_text, namesA(100) As String

'|fffd||fffd||fffd||461||fffd||fffd||fffd||4bb||fffd||5b7||fffd||2bd||fffd||fffd||fffd||fffd|
If OptionButton1.Value = True Then

    If RefEdit1.text = "" Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||bd65||52a||fffd||fffd||fffd||fffd||fffd||fffd|", vbOKOnly, "|fffd||fffd||fffd||fffd|"
        Exit Sub
    Else
        Set Input_range = Range(RefEdit1.Value)
        
        Application.ScreenUpdating = False
        
        For Each N_Cell In Input_range
           ' MsgBox N_Cell.Value, vbOKOnly, "|fffd||fffd||fffd||fffd|"
            Set sht = Sheets(CStr(N_Cell.Value))
           ' MsgBox Err
     
            If Err = 0 Then
                MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||638||fffd|" & "  |fffd||fffd||fffd||fffd|:" & N_Cell.Value, vbOKOnly, "|fffd||fffd||fffd||fffd|"
            Else
                If Len(N_Cell.Value) > 0 Then '|fffd||fffd||fffd||fffd||3aa||fffd||575||135||fffd||52a||fffd||fffd||fffd||bd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                
                    Select Case CheckBox1.Value '|fffd||fffd||fffd||fffd|Checkbox|fffd||fffd||fffd||fffd||fffd||77e||fffd||fffd||fffd||fffd||1f7||fffd||fffd||1b5||fffd||1f0||fffd||fffd||fffd||fffd||fffd||fffd|
                    Case False
                        Sheets.Add after:=Sheets(Sheets.Count)
                        Sheets(Sheets.Count).Name = CStr(N_Cell.Value)
                    Case True
                        ActiveSheet.Copy after:=Sheets(Sheets.Count)
                        Sheets(Sheets.Count).Name = CStr(N_Cell.Value)
                    End Select
                    
                End If
                
            End If
            Err.Clear
        Next
        Application.ScreenUpdating = True
        
    End If
            
Else
'|fffd||fffd||fffd||461||fffd||fffd||6b6||fffd||fffd||5b7||fffd||2bd||fffd||fffd||fffd||fffd|
    If OptionButton2.Value = True Then
        N_text = TextBox2.Value
        j = 1
        k = 0
        For i = 1 To Len(N_text)
            If Mid(N_text, i, 1) = ";" Then
                namesA(k) = Mid(N_text, j, i - j)
                k = k + 1
                j = i + 1
            End If
            
            If k >= 100 Then
                MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd|100|fffd||fffd||fffd||fffd||fffd||b5||131||fffd||fffd||fffd|"
                Exit Sub
            End If
            
        Next
    
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||775||fffd||129||3b2||fffd||fffd||3aa|";"
        If Right(N_text, 1) <> ";" Then
            namesA(k) = Right(N_text, Len(N_text) - j + 1)
            k = k + 1
        End If
    
        Application.ScreenUpdating = False
        
        For l = 0 To k - 1
        
            Set sht = Sheets(namesA(l))
                
            If Err = 0 Then
                MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||638||fffd|" & "  |fffd||fffd||fffd||fffd|:" & namesA(l), vbOKOnly, "|fffd||fffd||fffd||fffd|"
            Else
                If Len(namesA(l)) > 0 Then '|fffd||fffd||fffd||fffd||3aa||fffd||575||135||fffd||52a||fffd||fffd||fffd||bd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                
                    Select Case CheckBox1.Value '|fffd||fffd||fffd||fffd|Checkbox|fffd||fffd||fffd||fffd||fffd||77e||fffd||fffd||fffd||fffd||1f7||fffd||fffd||1b5||fffd||1f0||fffd||fffd||fffd||fffd||fffd||fffd|
                    Case False
                        Sheets.Add after:=Sheets(Sheets.Count)
                        Sheets(Sheets.Count).Name = namesA(l)
                    Case True
                        ActiveSheet.Copy after:=Sheets(Sheets.Count)
                        Sheets(Sheets.Count).Name = namesA(l)
                    End Select
                    
                End If
                
            End If
            Err.Clear
       
        Next
        Application.ScreenUpdating = True

    End If
    
End If

Unload Me

End Sub


Private Sub OptionButton1_Click()

Label2.Visible = False
TextBox2.Visible = False

Label1.Visible = True
RefEdit1.Visible = True

End Sub

Private Sub OptionButton2_Click()

Label1.Visible = False
RefEdit1.Visible = False

Label2.Visible = True
TextBox2.Visible = True

End Sub

Private Sub UserForm_Click()

End Sub
Attribute VB_Name = "UserForm2"
Attribute VB_Base = "0{59CF949A-DCE7-449E-88C6-64D5FE25C25A}{A6B217A2-296A-4FCE-B76C-FDBBA5FD2044}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CB_Cancel_Click()
Unload Me
End Sub





Private Sub CB_ok_Click()

On Error Resume Next

Dim wstname, path As String, wstindex, listnum, i As Integer
Dim FolderName As String, wbkname As String, arr() As String, wbknum As Integer, item As Integer
Dim New_wbk, wbk As Workbook, sht, nsht As Worksheet, whether_err As Boolean

whether_err = False
wbknum = 0
path = TextBox1.Value
If path = "" Then
MsgBox "|fffd||fffd||fffd||fffd||fffd||be64||fffd||fffd||fffd||fffd||fffd||13c||fffd||fffd||fffd||b7||fffd||fffd|", vbOKOnly, "|fffd||fffd||fffd||fffd|"
Exit Sub
End If

wbkname = Dir(path & "*.xls")

While wbkname <> ""
    wbknum = wbknum + 1
    ReDim Preserve arr(1 To wbknum)
    arr(wbknum) = wbkname
    wbkname = Dir
Wend


If wbknum = 0 Then
MsgBox "|fffd||13c||fffd||b7||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||13c||fffd||fffd||fffd||3b4||fffd||fffd||fffd||fffd|Excel|fffd||13c||fffd|", vbOKOnly, "|fffd||fffd||fffd||fffd|"
Exit Sub '|fffd||fffd||fffd||13f||bc||fffd||fffd||fb||fffd||439||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2f3||fffd|
End If

listnum = ComboBox1.ListIndex



If OptionButton1.Value = True Then

    wstname = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||4aa||fffd||fffd||221||fffd||139||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd|:|fffd||2b2||fffd||fffd||fffd||56e||fffd||fffd|)", "|fffd||fffd||fffd||fffd|")
    
    Application.ScreenUpdating = False
    
    Set New_wbk = Workbooks.Add '|fffd||fffd||fffd||fffd||fffd||b9||fffd||fffd||fffd||fffd||fffd|
    
    For item = 1 To wbknum
        Set wbk = Workbooks.Open(path & arr(item))
        Set sht = wbk.Sheets(wstname)
        
        If Err = 0 Then
        
            sht.Copy after:=New_wbk.Sheets(New_wbk.Sheets.Count)
            
            Select Case listnum
            Case 0 '|fffd||fffd||52d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                New_wbk.Sheets(New_wbk.Sheets.Count).Name = Left(arr(item), WorksheetFunction.Find(".xls", arr(item)) - 1)
            Case 1 '|fffd||521||fffd||52d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|52d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1a1||fffd||fffd||fffd||fffd||fffd|
                New_wbk.Sheets(New_wbk.Sheets.Count).Name = Left(arr(item), WorksheetFunction.Find(".xls", arr(item)) - 1) & "_" & wbk.Sheets(wstname).Name
            Case 2 '|fffd||fffd||52d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd|)
                Set nsht = New_wbk.Sheets(wbk.Sheets(wstname).Name)
                If Err > 0 Then
                    New_wbk.Sheets(New_wbk.Sheets.Count).Name = wbk.Sheets(wstname).Name
                    Err.Clear
                End If
                
            End Select
        Else
        
            whether_err = True
            Err.Clear
        
        End If
        
        wbk.Close
        
    Next
    
    If whether_err = True Then
        MsgBox "|fffd||fffd||fffd||fffd||3aa|" & wstname & "|fffd||139||fffd||fffd||fffd||fffd||fffd||fffd||6b2||fffd||fffd||5bb||fffd||22b||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||432||fffd||fffd||fffd||fffd||6a3||fffd||fffd||fffd||5e2||fffd||fffd|", vbOKOnly, "|fffd||fffd||fffd||fffd|"
    End If
    
    Application.ScreenUpdating = True
End If
     
If OptionButton2.Value = True Then

    wstindex = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||4aa||fffd||fffd||221||fffd||139||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd|:5)", "|fffd||fffd||fffd||fffd|", , , , , , 1)
    
    Application.ScreenUpdating = False

    Set New_wbk = Workbooks.Add '|fffd||fffd||fffd||fffd||fffd||b9||fffd||fffd||fffd||fffd||fffd|
    For item = 1 To wbknum
        Set wbk = Workbooks.Open(path & arr(item))
        Set sht = wbk.Sheets(wstindex)
        
        If Err = 0 Then
        wbk.Sheets(wstindex).Copy after:=New_wbk.Sheets(New_wbk.Sheets.Count)
                
        Select Case listnum
        Case 0 '|fffd||fffd||52d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            New_wbk.Sheets(New_wbk.Sheets.Count).Name = Left(arr(item), WorksheetFunction.Find(".xls", arr(item)) - 1)
        Case 1 '|fffd||521||fffd||52d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|52d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1a1||fffd||fffd||fffd||fffd||fffd|
            New_wbk.Sheets(New_wbk.Sheets.Count).Name = Left(arr(item), WorksheetFunction.Find(".xls", arr(item)) - 1) & "_" & wbk.Sheets(wstindex).Name
        Case 2 '|fffd||fffd||52d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd|)
            Set nsht = New_wbk.Sheets(wbk.Sheets(wstindex).Name)
            If Err > 0 Then
                New_wbk.Sheets(New_wbk.Sheets.Count).Name = wbk.Sheets(wstindex).Name
                Err.Clear
            End If
            
        End Select
        
        Else
        
            whether_err = True
            Err.Clear
        
        End If
        
        wbk.Close
    Next
    
    If whether_err = True Then
        MsgBox "|fffd||fffd||fffd||3aa|" & wstindex & "|fffd||139||fffd||fffd||fffd||fffd||fffd||fffd||6b2||fffd||fffd||5bb||fffd||22b||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||432||fffd||fffd||fffd||fffd||6a3||fffd||fffd||fffd||5e2||fffd||fffd|", vbOKOnly, "|fffd||fffd||fffd||fffd|"
    End If

    Application.ScreenUpdating = True
    
End If

If OptionButton3.Value = True Then
    
   
    Application.ScreenUpdating = False
   
    Set New_wbk = Workbooks.Add '|fffd||fffd||fffd||fffd||fffd||b9||fffd||fffd||fffd||fffd||fffd|
    For item = 1 To wbknum
        Set wbk = Workbooks.Open(path & arr(item))
        
        
        For i = 1 To wbk.Sheets.Count
        
            wbk.Sheets(i).Copy after:=New_wbk.Sheets(New_wbk.Sheets.Count)
            
            Select Case listnum
            Case 0 '|fffd||fffd||52d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Set nsht = New_wbk.Sheets(Left(arr(item), WorksheetFunction.Find(".xls", arr(item)) - 1))
                If Err > 0 Then
                    New_wbk.Sheets(New_wbk.Sheets.Count).Name = Left(arr(item), WorksheetFunction.Find(".xls", arr(item)) - 1)
                    Err.Clear
                End If
            Case 1 '|fffd||521||fffd||52d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|52d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1a1||fffd||fffd||fffd||fffd||fffd|
                New_wbk.Sheets(New_wbk.Sheets.Count).Name = Left(arr(item), WorksheetFunction.Find(".xls", arr(item)) - 1) & "_" & wbk.Sheets(i).Name
            Case 2 '|fffd||fffd||52d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd|)
                Set nsht = New_wbk.Sheets(wbk.Sheets(i).Name)
                If Err > 0 Then
                    New_wbk.Sheets(New_wbk.Sheets.Count).Name = wbk.Sheets(i).Name
                    Err.Clear
                End If
            End Select
            
            Next
            
            wbk.Close
                    
    Next

    Application.ScreenUpdating = True
    
End If

Application.DisplayAlerts = False
For i = 1 To Application.SheetsInNewWorkbook

    New_wbk.Sheets(1).Delete

Next

Application.DisplayAlerts = True


'|fffd||fffd||fffd||fffd||fffd||fffd||3aa|
Application.Dialogs(5).Show

Unload Me

End Sub


Private Sub CB_view_Click()

    Dim fd As FileDialog, path As String, sht As Worksheet
    '|fffd||fffd||fffd||fffd||fffd||53b||fffd||fffd||fffd||fffd||fffd||fffd||fb||fffd||461||fffd||fffd||fffd||13c||fffd||fffd||fffd|
    Set fd = Application.FileDialog(msoFileDialogFolderPicker)
    '|fffd||fffd||fffd||461||fffd||fffd||fffd||fffd||fffd||13c||fffd||fffd||fffd||fffd||fffd||fffd||bc||fffd||fffd||b7||fffd||fffd|
    If fd.Show = -1 Then
        path = fd.SelectedItems(1) & IIf(Right(fd.SelectedItems(1), 1) = "\", "", "\")
    Else: Exit Sub
    End If
    
    TextBox1.Value = path
        
End Sub


Private Sub OptionButton1_Click()
Frame3.Visible = True
Frame2.Visible = True
ComboBox1.ListIndex = 0
End Sub

Private Sub OptionButton2_Click()
Frame3.Visible = True
Frame2.Visible = True
ComboBox1.ListIndex = 0
End Sub

Private Sub OptionButton3_Click()
Frame3.Visible = True
Frame2.Visible = True
ComboBox1.ListIndex = 1
End Sub



Private Sub UserForm_Initialize()

Me.ComboBox1.AddItem "|fffd||fffd||52d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Me.ComboBox1.AddItem "|fffd||521||fffd||52d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|52d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1a1||fffd||fffd||fffd||fffd||fffd|"
Me.ComboBox1.AddItem "|fffd||fffd||52d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd|)"

End Sub
Attribute VB_Name = "UserForm3"
Attribute VB_Base = "0{C5610DFA-7864-474D-80ED-C99190A896C7}{0B18C7EE-A27A-43A0-9178-C7ACFD042910}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CommandButton1_Click()


On Error Resume Next

Dim shtname As String, i As Integer
Application.ScreenUpdating = False

    shtname = TextBox1.Value

    If shtname = "" Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1b2||fffd||fffd||fffd||3aa||fffd||563||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbOKOnly, "|fffd||fffd||fffd||fffd|"
        Exit Sub
    Else
        For Each sheet In Sheets
            If sheet.Name = shtname Then
                MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||be64||fffd||fffd||fffd||fffd||fffd||fffd||36c||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbOKOnly, "|fffd||fffd||fffd||fffd|"
            Exit Sub
            End If
        Next
    End If
           
    Sheets.Add Before:=Sheets(1)
    ActiveSheet.Name = shtname
    
    With Range("B2")
        .Formula = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .Font.Bold = True
    End With
    
    
    Range("B4").Select
    
    For Each sheet In Sheets '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Not sheet.Name = shtname Then
            Select Case CheckBox1.Value
            Case True
                ActiveSheet.Hyperlinks.Add Anchor:=Application.Selection, Address:="", SubAddress:= _
                    "'" & sheet.Name & "'" & "!a1", TextToDisplay:="'" & sheet.Name, ScreenTip:=sheet.Name
                ActiveCell.Offset(1, 0).Select
            Case False
                Application.Selection.Value = "'" & sheet.Name
                ActiveCell.Offset(1, 0).Select
            End Select
        End If
    Next
        
Columns("B:B").EntireColumn.AutoFit '|fffd||536||fffd||fffd||fffd||fffd||fffd||fffd||43f||fffd|

If CheckBox2.Value = True Then '|fffd||fffd||fffd||4f7||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

    For i = 2 To Sheets.Count
    
    Sheets(i).Rows(1).Insert (xlShiftDown)
    Sheets(i).Cells(1, 1).Select
    Sheets(i).Hyperlinks.Add Anchor:=Sheets(i).Cells(1, 1), Address:="", SubAddress:= _
                    "'" & Sheets(1).Name & "'" & "!A1", TextToDisplay:="'" & Sheets(1).Name, ScreenTip:=Sheets(1).Name
                    
    Next

End If

Application.ScreenUpdating = True
Unload Me

End Sub

Private Sub CommandButton2_Click()
Unload Me
End Sub



Private Sub UserForm_Initialize()
TextBox1.Value = "|fffd||fffd||fffd||fffd|"

End Sub
Attribute VB_Name = "UserForm4"
Attribute VB_Base = "0{C27702D6-3521-4EB8-9EEB-540FF024F925}{91EBF0B4-8933-457D-8851-22C534F84D43}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CommandButton1_Click()

'|fffd||fffd||52a||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||7fc||fffd||fffd||fffd|:|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||439||fffd||fffd||fffd||fffd||fffd||fffd||423||fffd||133||fffd||fffd||fffd||fffd||52a||fffd||fffd||fffd||fffd||fffd||fffd||fffd||5b3||fffd||fffd||5a3||fffd||fffd||fffd||fffd||fffd||fffd||fffd||6fc||4e3||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||73d||fffd||fffd||fffd||fffd||fffd||fffd||739||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fb||fffd||fffd||fffd||fffd||fffd||5b3||fffd||fffd||5a3||fffd||fffd||fffd||fffd||fffd||fffd||ece4||fffd||fffd||fffd||5b7||fffd||fffd||fffd|

Dim S_cell, cell As Range
Dim sheet As Worksheet
Dim col_cell, row_cell As Integer, addr As String
Dim tempn As Double, tempnstr, temps As String, is_num, ischeck As Boolean

If OptionButton1.Value = True Then '|fffd||fffd||fffd||fffd||fffd||5b7||fffd||2bd||fffd||fffd||fffd||fffd|

    For Each S_cell In Application.Selection
    
        tempn = 0 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||6fc||4f5||fffd||fffd||73a||fffd|
        temps = "" '|fffd||fffd||fffd||531||fffd||fffd||fffd||fffd||ece4||fffd||fffd||fffd||5b7||fffd||fffd||fffd|
        is_num = False '|237||fffd||fffd||fffd||fffd||52a||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2bd||fffd||fffd||fffd||fffd||fffd||5b7||fffd||fffd||fffd||2bd|
        col_cell = S_cell.Column '|fffd||fffd||fffd||531||fffd||fffd||fffd||13f||1f0||fffd||fffd||fffd||fffd||fffd||fffd||52a||fffd||fffd||fffd||fffd||43a||fffd|
        row_cell = S_cell.Row '|fffd||fffd||fffd||531||fffd||fffd||fffd||13f||1f0||fffd||fffd||fffd||fffd||fffd||fffd||52a||fffd||fffd||fffd||fffd||43a||fffd|
        
        For Each sheet In Worksheets
    
            If Not sheet.Name = ActiveSheet.Name Then '|fffd||fffd||fffd||fffd||fffd||fffd||3f5||fffd||1f0||fffd||fffd||fffd||fffd||139||fffd||fffd||fffd||fffd||fffd|
            
                With sheet.Cells(row_cell, col_cell)
        
                    If IsNumeric(.Value) And Len(.Value) > 0 Then
                        tempn = tempn + .Value
                        is_num = True '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    Else
                        If is_num = False And Len(.Value) > Len(temps) Then temps = .Value
                        
                    End If
                
                End With
            End If
        
        Next
        
        
        
        If is_num = True Then
            S_cell.Value = tempn '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||b18f4||fffd||fffd||6fc||fffd||5b5|
        Else
            S_cell.Value = temps '|3b4||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||5a3||fffd||fffd||b18f4||fffd||fffd||ece4||fffd||5b7||fffd||fffd||fffd|
        End If
    
    Next
    
    End If
    
If OptionButton2.Value = True Then
    
    ischeck = CheckBox1.Value
    
     
    For Each S_cell In Application.Selection
    
        tempnstr = "" '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||6fc||4f5||139||fffd||2bd|
        temps = "" '|fffd||fffd||fffd||531||fffd||fffd||fffd||fffd||ece4||fffd||fffd||fffd||5b7||fffd||fffd||fffd|
        is_num = False '|237||fffd||fffd||fffd||fffd||52a||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2bd||fffd||fffd||fffd||fffd||fffd||5b7||fffd||fffd||fffd||2bd|
        col_cell = S_cell.Column '|fffd||fffd||fffd||531||fffd||fffd||fffd||13f||1f0||fffd||fffd||fffd||fffd||fffd||fffd||52a||fffd||fffd||fffd||fffd||43a||fffd|
        row_cell = S_cell.Row '|fffd||fffd||fffd||531||fffd||fffd||fffd||13f||1f0||fffd||fffd||fffd||fffd||fffd||fffd||52a||fffd||fffd||fffd||fffd||43a||fffd|
        
       
        For Each sheet In Worksheets
    
            If Not sheet.Name = ActiveSheet.Name Then '|fffd||fffd||fffd||fffd||fffd||fffd||3f5||fffd||1f0||fffd||fffd||fffd||fffd||139||fffd||fffd||fffd||fffd||fffd|
            
                With sheet.Cells(row_cell, col_cell)
                
                    Select Case ischeck
                    Case False
            
                        If IsNumeric(.Value) And Len(.Value) > 0 Then
                            tempnstr = tempnstr & "+" & .Address(external:=True) '|fffd||fffd||2bd||fffd||6fc||fffd|
                            is_num = True '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        Else
                            If is_num = False And Len(.Value) > Len(temps) Then temps = .Value
                            
                        End If
                        
                    Case True
                        
                        tempnstr = tempnstr & "+" & .Address(external:=True) '|fffd||fffd||2bd||fffd||6fc||fffd|
                        is_num = True '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        
                    End Select
                                
                End With
            End If
        
        Next
        
        
        
        If is_num = True Then
            S_cell.Formula = WorksheetFunction.Replace(tempnstr, 1, 1, "=") '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||b18f4||fffd||fffd||6fc||4f9||fffd||2bd|
        Else
            S_cell.Value = temps '|3b4||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||5a3||fffd||fffd||b18f4||fffd||fffd||ece4||fffd||5b7||fffd||fffd||fffd|
        End If
    
    Next
End If

Unload Me
End Sub

Private Sub CommandButton2_Click()
Unload Me
End Sub

Private Sub OptionButton1_Click()
CheckBox1.Visible = False
End Sub

Private Sub OptionButton2_Click()
CheckBox1.Visible = True
End Sub

Attribute VB_Name = "Utilities"
Option Explicit
Public t_count As Long, a_count As Long

Private Sub invert_sign(ByVal control As IRibbonControl)
       
    invert_sign_formula
    invert_sign_figure
    
    a_count = a_count + 1
    
End Sub

Private Sub invert_sign_formula()

    On Error GoTo ErrorHandler
    Dim my_cell As Range, s As String, r As Range
    
    Set r = Application.Intersect(ActiveSheet.Cells.SpecialCells(xlCellTypeFormulas), Selection)
    If Not r Is Nothing Then
        For Each my_cell In r
            If IsNumeric(my_cell.Value) Then
                s = Trim(my_cell.Formula)
                If Left(s, 1) = "=" Then                    'Formula
                    s = "=" & Trim(Mid(s, 2))
                    If Mid(s, 2, 1) = "-" Then
                        s = "=-" & LTrim(Mid(s, 3))
                        If Mid(s, 3, 1) = "(" And Right(s, 1) = ")" Then
                            s = "=" & Trim(Mid(s, 4, Len(s) - 4))
                        Else
                            s = "=-(" & Trim(Mid(s, 2)) & ")"
                        End If
                    Else
                        s = "=-(" & Trim(Mid(s, 2)) & ")"
                    End If
                    my_cell.Formula = s
                Else                                        'Figure
                    my_cell.Value = -my_cell.Value
                End If
            End If
        Next my_cell
    End If

ErrorHandler:
End Sub

Private Sub invert_sign_figure()

    On Error GoTo ErrorHandler
    Dim my_cell As Range, s As String, r As Range
    
    Set r = Application.Intersect(ActiveSheet.Cells.SpecialCells(xlCellTypeConstants), Selection)
    If Not r Is Nothing Then
        For Each my_cell In r
            If IsNumeric(my_cell.Value) Then my_cell.Value = -my_cell.Value
        Next my_cell
    End If
    
ErrorHandler:
End Sub

Private Sub Accounting_Format(ByVal control As IRibbonControl)
    
    On Error GoTo ErrorHandler
    Selection.NumberFormat = "_(* #,##0.00_);[red]_(* (#,##0.00);_(* ""-""??_)"
'    Selection.Font.Name = "Times New Roman"
    a_count = a_count + 1
    
ErrorHandler:
End Sub

Private Sub round_option(ByVal control As IRibbonControl)

    On Error GoTo ErrorHandler

    frmRound.Show
    
ErrorHandler:
    
End Sub

Private Sub round(ByVal control As IRibbonControl)

    Dim d As Integer, my_button As CommandBarControl
    
'    Set my_button = CommandBars("Tick Mark").Controls(1).Controls(idx_Round)
'    d = Val(my_button.Tag)
    
    d = Val(frmRound.TextBox1.Value)
    round_formula (d)
    round_figure (d)
    
    a_count = a_count + 1
    
End Sub

Private Sub round_formula(d As Integer)
    
    On Error GoTo ErrorHandler
    Dim my_cell As Range, s As String, r As Range
    Dim pos As Integer, dec_s As String, dec_i As Long
    
    'Find range containing formulas within selection
    Set r = Application.Intersect(Selection, ActiveSheet.Cells.SpecialCells(xlCellTypeFormulas))
    
    If Not r Is Nothing Then
        For Each my_cell In r
            If IsNumeric(my_cell.Value) Then
                s = Trim(my_cell.Formula)
                If Left(s, 1) = "=" Then
                    s = "=" & Trim(Mid(s, 2))
                    
                    'If, Already rounded
                    If UCase(Left(s, 6)) = "=ROUND" And Right(s, 1) = ")" Then
                        s = Trim(Left(s, Len(s) - 1)) & ")"
                        pos = my_instrrev(s, ",")                       'Find last comma
                        s = Left(s, pos) & Trim(Mid(s, pos + 1, Len(s) - pos - 1)) & ")"
                        pos = my_instrrev(s, ",")                       'Find last comma
                        dec_s = Mid(s, pos + 1, Len(s) - pos - 1)
                        dec_i = Int(Val(dec_s))                         'Get old rounding decimal
                        my_cell.Formula = Left(s, pos) & LTrim(str(d)) & ")"
                    'Else, Not rounded yet
                    Else
                        my_cell.Formula = "=ROUND(" & Mid(my_cell.Formula, 2) & "," & _
                            LTrim(str(d)) & ")"
                    End If
                Else
                    my_cell.Formula = "=ROUND(" & my_cell.Formula & LTrim(str(d)) & ")"
                End If
            End If
        Next my_cell
    End If
    
    Exit Sub
    
ErrorHandler:
End Sub

Private Sub round_figure(d As Integer)

    On Error GoTo ErrorHandler
    Dim my_cell As Range, s As String, r As Range
    Dim pos As Integer, dec_s As String, dec_i As Long
    
    'Find range containing figures within selection
    Set r = Application.Intersect(Selection, ActiveSheet.Cells.SpecialCells(xlCellTypeConstants))
    
    If Not r Is Nothing Then
        For Each my_cell In r
            If IsNumeric(my_cell.Value) Then
                my_cell.Formula = "=ROUND(" & my_cell.Formula & "," & LTrim(str(d)) & ")"
            End If
        Next my_cell
    End If

    Exit Sub

ErrorHandler:
End Sub

Function my_instrrev(s1 As String, s2 As String) As Integer
'Same as Excel2000's application.InStrRev(), for Excel97
    
    Dim pos As Integer, i As Integer
    
    For i = 1 To Len(s1)
        pos = InStr(Right(s1, i), s2)
        If pos <> 0 Then Exit For
    Next i
    
    my_instrrev = Len(s1) + 1 - i

End Function


Sub write_round_option(p As Integer)
    Dim my_button As CommandBarControl
    Set my_button = CommandBars("Tick Mark").Controls(1).Controls(idx_Round)
    my_button.Tag = str(p)
End Sub

Sub get_round_option(p As Integer)
    Dim my_button As CommandBarControl
    Set my_button = CommandBars("Tick Mark").Controls(1).Controls(idx_Round)
    p = Val(my_button.Tag)
End Sub
Attribute VB_Name = "frmRound"
Attribute VB_Base = "0{52E1BB95-FB10-44BE-83D2-D8F49B98402B}{159984DE-C0AC-4374-9D86-3B413F22D3B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




Option Explicit

Private Sub CommandButton1_Click()
'    write_round_option (TextBox1.Value)
    TextBox1.Tag = TextBox1.Value
    frmRound.Hide
End Sub

Private Sub CommandButton2_Click()
    Dim p As Integer
'    get_round_option (p)
    p = TextBox1.Value
    With frmRound
        .SpinButton1.Value = p
        SpinButton1_Change
        .Hide
    End With
End Sub

Private Sub Label1_Click()

End Sub

Private Sub SpinButton1_Change()
    Dim p As Integer
    p = SpinButton1.Value
    TextBox1.text = str(p)
    If p < -6 Then
        p = -6
    ElseIf p > 2 Then
        p = 2
    End If
    TextBox2.text = "Round(1,234,567.89," & str(p) & ") = " & _
        Format(str(Application.WorksheetFunction.round(1234567.89, p)), "##,##0,00.00")
End Sub

Private Sub TextBox1_Change()

End Sub

'Sub write_round_option(p As Integer)
'    Dim my_button As CommandBarControl
'    Set my_button = CommandBars("Tick Mark").Controls(1).Controls(idx_Round)
'    my_button.Tag = str(p)
'End Sub
'
'Sub get_round_option(p As Integer)
'    Dim my_button As CommandBarControl
'    Set my_button = CommandBars("Tick Mark").Controls(1).Controls(idx_Round)
'    p = Val(my_button.Tag)
'End Sub
Attribute VB_Name = "new1"
Sub Rounding(ByVal control As IRibbonControl)
Attribute Rounding.VB_ProcData.VB_Invoke_Func = " \n14"
'
' |fffd||fffd||fffd||fffd||461||fffd||fffd||135||fffd||52a||fffd||fffd||fffd||43c||fffd||fffd||fffd|Round()|fffd||fffd||fffd||fffd|
'
    On Error Resume Next
        
    Dim R_cell As Range, dml As Integer
   
    dml = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||421||fffd||fffd||fffd||fffd||fffd||3bb||fffd||fffd|", "|fffd||fffd||2be|", 0)
    
    For Each R_cell In Application.Selection
        If Len(R_cell.Value) > 0 Then '|fffd||fffd||fffd||fffd||1ff||fffd||fffd||fffd||427|
            R_cell.Formula = "=ROUND(" & R_cell.Value & "," & dml & ")"
        End If
    Next
    
'
End Sub

Sub Negative(ByVal control As IRibbonControl)

'|fffd||fffd||fffd||fffd||461||fffd||fffd||fffd||fffd||fffd||fffd||fffd||5b5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||5ea||fffd||fffd|

On Error Resume Next

Dim N_Cell As Range

For Each N_Cell In Application.Selection

    If Len(N_Cell.Value) > 0 Then '|fffd||fffd||fffd||fffd||1ff||fffd||fffd||fffd||427|
        If Left(N_Cell.Formula, 1) = "=" Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||3aa||fffd||fffd||2bd||fffd||fffd||fffd||fffd||fffd||7b8||139||fffd||2bd|
            N_Cell.Formula = N_Cell.Formula & "* -1"
        Else
            N_Cell.Value = N_Cell.Value * -1 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||3aa||fffd||fffd||2bd||fffd||fffd||fffd||fffd||5b1||fffd||4f3||fffd||fffd||fffd|-1
        End If
    End If
    
Next

End Sub

Sub thousand(ByVal control As IRibbonControl)

'|fffd||fffd||fffd||fffd||461||fffd||fffd||fffd||fffd||fffd||fffd||fffd||5b5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||221||fffd||fffd||1e7||3bb|

On Error Resume Next
 
Dim T_Cell As Range
Dim StFormular As String
    
    For Each T_Cell In Application.Selection
        If Len(T_Cell.Value) > 0 Then   '|fffd||fffd||fffd||fffd||1ff||fffd||fffd||fffd||427|
            StFormular = Trim(T_Cell.Formula)
            
            If Left(StFormular, 1) = "=" Then   '|fffd||fffd||fffd||3aa||fffd||fffd||2bd||fffd||fffd||fffd||fffd||221|=|fffd||fffd||fffd||fffd||132||fffd||fffd||5a3||fffd||fffd||fffd||fffd||fffd||5b1||fffd||fffd||fffd||fffd||fffd||fffd||5b5|
                StFormular = "(" & Mid(StFormular, 2) & ")"
            End If
            
            T_Cell.Formula = "=ROUND(" & StFormular & "/1000,0)"
'            T_Cell.Formula = "=ROUND(" & T_Cell.Value & "/1000,0)"
        End If
    Next

End Sub

Sub super_union(ByVal control As IRibbonControl)

'|fffd||3f2||fffd||461||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||461||fffd||fffd||fffd||6b5||fffd||fffd||fffd||fffd||77d||fffd||fffd||43a||3f2||fffd||fffd||fffd||fffd||3f2||fffd||fffd||fffd||135||fffd||52a||fffd||fffd||2ee||1bd||fffd||fffd||fffd||fffd||b8ec||fffd||fffd||5b1||fffd||3f6||fffd||fffd||b863|

Dim rng As Range, str As String

On Error Resume Next

With Application.Selection
    
    .UnMerge '|fffd||fffd||fffd||47a||3f2||fffd||fffd||fffd||fffd||fffd||fffd||fffd||5bd||fffd|
    For Each rng In Application.Selection
    str = str & rng.text ' & " "
    Next rng
    
    '|fffd||631||57e||fffd||2be||fffd||fffd||fffd||3f2||fffd|
    Application.DisplayAlerts = False
    .Merge
    Application.DisplayAlerts = True
    
    '|fffd||fffd||fffd||fa||3f2||fffd||fffd||fffd||52a||fffd||fffd||138||fffd||2bd||fffd||fffd||fffd||fffd||5b5|
    .HorizontalAlignment = xlLeft
    .VerticalAlignment = xlTop
    .WrapText = True
    .Value = str
    
End With

End Sub



Sub chgfmt(ByVal control As IRibbonControl)
'|fffd||131||fffd||fffd||fffd||fffd||fffd||271||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2bd||fffd||fffd||fffd||fffd||fffd||fffd||3aa||fffd||fffd||fffd||fffd||fffd||13f||fffd||fffd||5871||fffd||fffd||4e2||fffd||fffd||3aa||fffd||fffd|Times New Roman|fffd||fffd||fffd||fffd|

On Error Resume Next

Dim text As String
Dim i As Integer

If Application.Selection.Count > 2000 Then
    MsgBox "Too many cells selected. Excel will not responding!!!!!"
    Exit Sub
End If

Application.ScreenUpdating = False

For Each cellt In Application.Selection
    If Len(cellt.Value) > 0 Then
        text = cellt.Value
        For i = 1 To Len(text)
            If Asc(Mid(text, i, 1)) > 0 And Asc(Mid(text, i, 1)) < 128 Then
                With cellt.Characters(Start:=i, Length:=1).Font
                    .Name = "Times New Roman"
                End With
            Else
                With cellt.Characters(Start:=i, Length:=1).Font
                    .Name = "|fffd||fffd||fffd||13f||fffd||fffd||fffd|"
                End With
            End If
        Next
    End If
Next
Application.ScreenUpdating = True
End Sub


Sub change_date(ByVal control As IRibbonControl)
'|fffd||fffd||fffd||fffd||fffd||fffd||5ea||fffd||fffd||3aa||fffd||fffd||2b6||fffd||fffd||138||fffd||2bd|

Dim datestr, dateA(1 To 20) As String
Dim i As Integer
Dim days, months, years, dates As String

On Error Resume Next

datestr = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||6b5||138||fffd||2bd||fffd||fffd||fffd||fffd||fffd||fffd|DDMMYYYY|fffd||fffd|YYYY-MM-DD|fffd||fffd|MM/DD/YYYY|fffd||fffd|", "|fffd||fffd||fffd||fffd|")

If datestr = False Or Len(datestr) = 0 Then
Exit Sub
End If

For i = 1 To Len(datestr)
    dateA(i) = Mid(datestr, i, 1)
Next

For Each D_cell In Application.Selection
    
    
    '|fffd||fffd||2bc||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    days = ""
    months = ""
    years = ""
    dates = D_cell.Value
    If Len(dates) = Len(datestr) Then
    
        For i = 1 To Len(datestr)
            Select Case UCase(dateA(i))
            Case "D"
                days = days & Mid(dates, i, 1)
            Case "M"
                months = months & Mid(dates, i, 1)
            Case "Y"
                years = years & Mid(dates, i, 1)
            End Select
        Next
        
    End If
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||3aa|2|3bb||fffd||fffd||fffd||436||fffd|
    
    D_cell.Clear
    D_cell.NumberFormat = "m/d/yyyy"
    D_cell.Value = "=date(" & years & "," & months & "," & days & ")"
    
    
    Next

End Sub

Attribute VB_Name = "new2"
Sub generate_sheet(ByVal control As IRibbonControl)
'|fffd||fffd||fffd||fffd||4bb||fffd||fffd||fffd||b9||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||bd71||1f0||fffd||fffd||fffd||fffd||139||fffd||fffd||fffd||fffd||fffd||fffd||fffd||22b||4bb||fffd||fffd|

    '|fffd||fffd||fffd||fffd||4bb||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim sht As Worksheet, ipt As String
    '|fffd||fffd||fffd||fffd|
    On Error Resume Next
    ipt = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||b9||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||b9||fffd||fffd||fffd||fffd||fffd|")
    Set sht = Sheets(ipt)
    '|fffd||fffd||fffd||fffd||6b4||fffd||fffd||fffd||fffd||fffd||fffd||2be||fffd||fffd||fffd||fffd||fffd||6b8||f1||fffd||fffd||fffd||fffd||fffd||f4||fffd||fffd||fffd||fffd||1f0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1b5||fffd||fffd||fffd||fffd|
    If Err > 0 Then
        ActiveSheet.Copy after:=Sheets(Sheets.Count)
        Sheets(Sheets.Count).Name = ipt
    End If

End Sub

Sub generate_sheets(ByVal control As IRibbonControl)

UserForm1.Show

End Sub

Sub split_Sheets(ByVal control As IRibbonControl)

On Error Resume Next

    Dim fd As FileDialog, path As String, sht As Worksheet
    '|fffd||fffd||fffd||fffd||fffd||53b||fffd||fffd||fffd||fffd||fffd||fffd||fb||fffd||461||fffd||fffd||fffd||13c||fffd||fffd||fffd|
    Set fd = Application.FileDialog(msoFileDialogFolderPicker)
    '|fffd||fffd||fffd||461||fffd||fffd||fffd||fffd||fffd||13c||fffd||fffd||fffd||fffd||fffd||fffd||bc||fffd||fffd||b7||fffd||fffd|
    If fd.Show = -1 Then
        path = fd.SelectedItems(1) & IIf(Right(fd.SelectedItems(1), 1) = "\", "", "\")
    Else: Exit Sub
    End If
    
    Application.ScreenUpdating = False
    '|fffd||9e64||fffd||fffd||fffd||fffd|
    For Each sht In Sheets
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1b5||fffd||fffd||b9||fffd||fffd||fffd||fffd||fffd||fffd||423||fffd||fffd||d71||fffd||fffd||fffd||bd||fffd||4bb||fffd||fffd||fffd||13c||fffd||fffd||fffd||fffd||67d||fffd||fffd||fffd||1f0||fffd||fffd||fffd||fffd||fffd||1b5||fffd||fffd||fffd||fffd||fffd|,|fffd||fffd||fffd||b9||fffd||fffd||fffd||fffd||fffd||fffd||43d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||4bb||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        sht.Copy
        '|fffd||fffd||fffd||b9||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||6b8||572||fffd||461||fffd||fffd||fffd||b7||fffd||fffd||fffd||423||fffd||fffd||fffd||fffd||539||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||3aa||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ActiveWorkbook.SaveAs path & sht.Name, xlWorkbookDefault
        '|fffd||631||579||fffd||fffd||fffd||fffd||fffd|
        ActiveWorkbook.Close
    Next sht
    
    Application.ScreenUpdating = True

End Sub

Sub extract_sheets(ByVal control As IRibbonControl)

Application.DisplayAlerts = False

UserForm2.Show

Application.DisplayAlerts = True

End Sub

Sub generate_index(ByVal control As IRibbonControl)

UserForm3.Show
End Sub


Sub summarize_all(ByVal control As IRibbonControl)

Dim S_cell, cell As Range
Dim N_sheet, sheet As Worksheet
Dim shtname, addr As String

On Error Resume Next

'|237||fffd||fffd||fffd||fffd||fffd||fffd||131||fffd||fffd||fffd||fffd||232||fffd||fffd||fffd||fffd||fffd||fffd||439||fffd||fffd||fffd||fffd||fffd||fffd||638||fffd||fffd||fffd||4b2||fffd||fffd||3aa||fffd||561||fffd|
Do
    Err.Clear
    
    shtname = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||739||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", , , , , , 2)
    
    Set N_sheet = Sheets(shtname)
    If Err = 0 Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||474||fffd||fffd||6a3||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbOKOnly, "|fffd||fffd||fffd||fffd|"
    End If
    
    If Len(shtname) = 0 Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||3aa||fffd||fffd|", vbOKOnly, "|fffd||fffd||fffd||fffd|"
    End If

Loop Until Err > 0 And Len(shtname) > 0

Set N_sheet = Sheets.Add(Before:=Sheets(1))
N_sheet.Name = shtname '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||731||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

For Each sheet In Worksheets
    If sheet.Name <> shtname Then '|fffd||173||fffd||fffd||fffd||fffd||731||fffd||fffd||53c||fffd|
        sheet.Activate
        For Each cell In ActiveSheet.UsedRange
        addr = cell.Address() '|fffd||fffd||221||ff||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2b9||fffd||fffd||fffd||fffd||fffd||fffd||fffd||ff||fffd||fffd||fffd||fffd||52a||fffd||fffd||135||fffd||5b7|
            With cell
            '|fffd||fffd||fffd||fffd||fffd||fffd||731||fffd||fffd||fffd||52a||fffd||fffd||3aa||fffd||fffd||fffd||fffd||fffd||4b7||1ff||563||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||6bb||fffd||fffd||735||131||fffd||36c||3bb||fffd||f5||fffd||52a||4b2||3aa||fffd||fffd||fffd||fffd||2b1||fffd||17c||fffd||fffd||fffd|
                If IsNumeric(N_sheet.Range(addr).Value) And Len(N_sheet.Range(addr).Value) > 0 Then
                    If IsNumeric(.Value) And Len(.Value) > 0 Then
                        N_sheet.Range(addr).Value = N_sheet.Range(addr).Value + .Value
                    End If
            '|fffd||fffd||fffd||fffd||fffd||fffd||731||fffd||fffd||fffd||52a||fffd||fffd||3aa||fffd||131||fffd||fffd||fffd||563||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||6bb||fffd||fffd||735||131||fffd||fffd||fffd||36c||3bb||fffd||f5||fffd||52a||fffd||fffd||3aa||fffd||fffd||fffd||fffd||fffd||4b7||1ff||563||fffd||fffd||fffd||3aa||fffd||131||fffd||fffd||fffd||fffd||4b3||fffd||fffd||234||fffd||fffd||6bb||fffd||fffd||731||fffd||fffd||fffd||52a||fffd||fffd||133||fffd||fffd||223||fffd||fffd||fffd||fffd||6efb|
                Else
                    If (IsNumeric(.Value) And Len(.Value) > 0) Or _
                    (Len(.Value) > Len(N_sheet.Range(addr).Value)) Then
                        N_sheet.Range(addr).Value = .Value
                    End If
                End If
            End With
        Next
    End If
Next

N_sheet.Select

End Sub

Sub summarize_both(ByVal control As IRibbonControl)
    UserForm4.Show
End Sub


' InQuest injected base64 decoded content
' )^J)

INQUEST-PP=macro
