Attribute VB_Name = "BusinessInfo"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Private Sub Worksheet_Activate()
'Range("FormatType").Activate
'End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
On Error GoTo Err
Dim tRow As Integer
Dim tCol As Integer
''Application.StatusBar = "Please be patient..."
tRow = Target.row
tCol = Target.column

Call ProtectWorkSheet(BusinessInfo, False)

If Not Intersect(Target, Range("RequestDate")) Is Nothing Then
        If IsValidDate(Range("RequestDate").value) = True Then
           Range("IsValidRequestDate").value = 0
        Else
           Range("IsValidRequestDate").value = 1
        End If
End If
             
If Not Intersect(Target, Range("RespondByDate")) Is Nothing Then
        If IsValidDate(Range("RespondByDate").value) = True Then
           Range("IsValidRespondByDate").value = 0
        Else
           Range("IsValidRespondByDate").value = 1
        End If
End If

If Not Intersect(Target, Range("ResponseDate")) Is Nothing Then
        If IsValidDate(Range("ResponseDate").value) = True Then
           Range("IsValidResponseDate").value = 0
        Else
           Range("IsValidResponseDate").value = 1
        End If
End If



If Target.row = 11 And Target.column = 4 Then
    'Call setFormula(BusinessInfo, "=IF(LegalDeclarationType=""Standard"",StandardDeclaration,"""")", "LegalDeclaration")
    
    If Trim(Target.value) = "Standard" Then
        BusinessInfo.Range("LegalDeclaration").Select
        Selection.Locked = True
        Call setFormula(BusinessInfo, "=IF(LegalDeclarationType=""Standard"",StandardDeclaration,"""")", "LegalDeclaration")
    Else
    
    If BusinessInfo.Range("LegalDeclaration").value = "" Then
        Application.ScreenUpdating = False
        BusinessInfo.Range("LegalDeclaration").value = ""
        Application.ScreenUpdating = True
    End If
        Call ProtectWorkSheet(BusinessInfo, False)
        BusinessInfo.Range("LegalDeclaration").Select
        Selection.Locked = False
         
        
    End If
End If

''''Call ProtectWorkSheet(BusinessInfo, True)
If Target.row = 4 And Target.column = 5 Then
    Call distribution

ElseIf Target.row = 5 And Target.column = 5 Then
    Call ClassDeclarationA
    
ElseIf Target.row = 6 And Target.column = 5 Then
    Call ClassDeclarationB
    
ElseIf Target.row = 7 And Target.column = 5 Then
    Call ClassDeclarationC

ElseIf Target.row = 8 And Target.column = 5 Then
    Call ClassDeclarationD

ElseIf Target.row = 9 And Target.column = 5 Then
    Call ManufacturingInfo
    
ElseIf Target.row = 22 And Target.column = 4 Then ''Call LockRequester
   
    If BusinessInfo.Range("R_FieldLockAnswer").value Then
        isLock = True
    Else
        isLock = False
    End If
    Call ProtectWorkSheet(BusinessInfo, False)
    
    BusinessInfo.Activate
    BusinessInfo.Range("requesterInfo").Select
    Selection.Locked = isLock
    
    If isLock Then
        BusinessInfo.Range("requesterInfo").Interior.Color = RGB(242, 242, 242)
        
        BusinessInfo.Range("R_FieldLock").Select
        Selection.Locked = False
    
    Else
        BusinessInfo.Range("requesterInfo").Interior.ColorIndex = xlColorIndexNone
        BusinessInfo.Range("requesterInfo").Interior.ColorIndex = xlNone
    End If
    
 
    
ElseIf Target.row >= 25 And Target.row <= 32 And Target.column >= 5 And Target.column <= 8 Then
    Call ProtectWorkSheet(BusinessInfo, False)
    ''''If BusinessInfo.Range("E" & Target.row).value = "Y" Then
    ''''    BusinessInfo.Range("AuthorizedRep").value = BusinessInfo.Range("F" & Target.row).value
    ''''    BusinessInfo.Range("AuthorizedRepEmail").value = BusinessInfo.Range("G" & Target.row).value
    ''''    BusinessInfo.Range("AuthorizedRepPhone").value = BusinessInfo.Range("H" & Target.row).value
    ''''End If
    
    Workbooks.Application.EnableEvents = False
    
    If Range("$F" & tRow).FormatConditions.Count = 0 Then
         'Range("$F" & tRow).Locked = False
        
        With Range("$F" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(TotalContact=0,$F$" & tRow & "="""",OR($G$" & tRow & "<>"""",$H$" & tRow & "<>""""))")
            .Interior.Color = RGB(255, 199, 206)
            '.Interior.Pattern = XlPattern.xlPatternGray8
        End With
    End If
        
    If Range("$G" & tRow).FormatConditions.Count = 0 Then
         'Range("$G" & tRow).Locked = False
        
        With Range("$G" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=OR(TotalContact=0,$S$" & tRow - 2 & "=FALSE,AND($G$" & tRow & "="""",OR($F$" & tRow & "<>"""",$H$" & tRow & "<>"""")))")
            .Interior.Color = RGB(255, 199, 206)
            '.Interior.Pattern = XlPattern.xlPatternGray8
        End With
    End If
    
    If Range("$H" & tRow).FormatConditions.Count = 0 Then
         'Range("$H" & tRow).Locked = False
        
        With Range("$H" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=OR(TotalContact=0,$R$" & tRow - 2 & "=1,AND($H$" & tRow & "="""",OR($F$" & tRow & "<>"""",$G$" & tRow & "<>"""")))")
            .Interior.Color = RGB(255, 199, 206)
            '.Interior.Pattern = XlPattern.xlPatternGray8
        End With
    End If
    
    Workbooks.Application.EnableEvents = True

ElseIf Target.row = 23 And Target.column = 7 Then         'Call LockResponse
    If BusinessInfo.Range("responseFieldLock").value = True Then
        isLock = True
    Else
        isLock = False
    End If

    Call ProtectWorkSheet(BusinessInfo, False)
    BusinessInfo.Activate
    BusinessInfo.Range("supplierInfo").Select
    Selection.Locked = isLock
    
    ''''BusinessInfo.Range("Duns").Select
    ''''Selection.Locked = isLock
    
    ''''BusinessInfo.Range("VendorId").Select
    ''''Selection.Locked = isLock
         
    BusinessInfo.Range("TableSupplierContacts").Select
    Selection.Locked = isLock
    
    If isLock Then
         BusinessInfo.Range("supplierInfo").Interior.Color = RGB(242, 242, 242)
         BusinessInfo.Range("TableSupplierContacts").Interior.Color = RGB(242, 242, 242)
         ''''BusinessInfo.Range("VendorId").Interior.Color = RGB(242, 242, 242)
         ''''BusinessInfo.Range("Duns").Interior.Color = RGB(242, 242, 242)
    Else
        BusinessInfo.Range("supplierInfo").Interior.ColorIndex = xlColorIndexNone
        BusinessInfo.Range("supplierInfo").Interior.ColorIndex = xlNone
       
        ''''BusinessInfo.Range("VendorId").Interior.ColorIndex = xlColorIndexNone
        ''''BusinessInfo.Range("VendorId").Interior.ColorIndex = xlNone
        
        ''''BusinessInfo.Range("Duns").Interior.ColorIndex = xlColorIndexNone
        ''''BusinessInfo.Range("Duns").Interior.ColorIndex = xlNone
        
        BusinessInfo.Range("TableSupplierContacts").Interior.ColorIndex = xlColorIndexNone
        BusinessInfo.Range("TableSupplierContacts").Interior.ColorIndex = xlNone
    End If
    
 
End If

Call ProtectWorkSheet(BusinessInfo, True)
''Application.StatusBar = "Ready"

Exit Sub
Err:
 
Call ProtectWorkSheet(BusinessInfo, True)
''Application.StatusBar = "Ready"
End Sub


Public Sub ClearBusinessInfo()
    Application.EnableEvents = False
    Call ProtectWorkSheet(BusinessInfo, False)
    
    BusinessInfo.Range("ddldigitalSignature").value = "No"
    BusinessInfo.Range("LegalDeclarationType").value = "Standard"
    
    Call setFormula(BusinessInfo, "=IF(LegalDeclarationType=""Standard"",StandardDeclaration,"""")", "LegalDeclaration")
    
    
    
    BusinessInfo.Range("SupplierAcceptance").Select
    Selection.ClearContents
    
    BusinessInfo.Range("requesterInfo").Select
    Selection.ClearContents
    
    BusinessInfo.Range("supplierInfo").Select
    Selection.ClearContents
    
    BusinessInfo.Range("TableSupplierContacts").ClearContents
    
    BusinessInfo.Range("IsValidRequestDate").value = 0
    BusinessInfo.Range("IsValidRespondByDate").value = 0
    BusinessInfo.Range("IsValidResponseDate").value = 0
    
    Application.EnableEvents = True
    Call ProtectWorkSheet(BusinessInfo, True)
End Sub
Attribute VB_Name = "DL_DeclarationType"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DL_ExemptionsView"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DL_HomogeneousSubstancesView"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DL_HostName"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DL_Manufacturing"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DL_Maps"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DL_MaterialClassView"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DL_MaterialGroups"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DL_Query"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DL_QueryList"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DL_SubstanceCategoriesView"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DL_Templates"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DL_UniqueExemptionId"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DL_UniqueLevel"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DL_UniqueSubstanceCategoryId"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DL_UniqueSubstanceGroup"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DL_Unit"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DataSummary"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "FileReferences"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Public Sub ClearFileReferences()
    Application.EnableEvents = False
    Call ProtectWorkSheet(FileReferences, True)
    Range("TableFileReferences").ClearContents
    Call ProtectWorkSheet(FileReferences, True)
    Application.EnableEvents = True
End Sub
Attribute VB_Name = "HomogeneousMaterials"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Change(ByVal Target As Range)
On Error GoTo Err
Dim tRow As Integer
Dim tCol As Integer
'Application.StatusBar = "Please be patient..."

tRow = Target.row
tCol = Target.column

If tCol >= 7 Then
Exit Sub
End If

If tRow >= 5 Then

Application.EnableEvents = False

'HomogeneousMaterials
Call ProtectWorkSheet(HomogeneousMaterials, False)


'If Range("$A" & tRow).FormatConditions.Count = 0 Then
   'Range("$A" & tRow).Locked = False
    Range("$A" & tRow).FormatConditions.Delete
    With Range("$A" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=OR(V" & tRow & "> 0, AS" & tRow & ">0)")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
'End If

'If Range("$C" & tRow).FormatConditions.Count = 0 Then
    'Range("$C" & tRow).Locked = False
    Range("$C" & tRow).FormatConditions.Delete
    With Range("$C" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND($C$" & tRow & "="""",OR(MAX(Q" & tRow & ":S" & tRow & ") > 0," & "B" & tRow & "&A" & tRow & "<>""""))")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
'End If

'If Range("$D" & tRow).FormatConditions.Count = 0 Then
    'Range("$D" & tRow).Locked = False
    Range("$D" & tRow).FormatConditions.Delete
    With Range("$D" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND($D$" & tRow & "="""",OR(MAX(Q" & tRow & ":S" & tRow & ") > 0," & "B" & tRow & "&A" & tRow & "<>""""))")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
'End If

'If Range("$E" & tRow).FormatConditions.Count = 0 Then
    'Range("$E" & tRow).Locked = False
    Range("$E" & tRow).FormatConditions.Delete
    With Range("$E" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND($E$" & tRow & "="""",OR(MAX(Q" & tRow & ":S" & tRow & ") > 0," & "B" & tRow & "&A" & tRow & "<>""""))")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
'End If

ActiveCell.EntireRow.AutoFit
Call ProtectWorkSheet(HomogeneousMaterials, True)

If Range("hm_totalEntry").value = 0 And Range("B" & tRow).value = "" And Range("A" & tRow).value = "" Then
    Call ClearHomogeneousMaterials(False)
End If

Application.EnableEvents = True
'Application.StatusBar = "Ready"


End If

Exit Sub
Err:

'MsgBox "HomogeneousMaterial_Change: " & Err.Description
Call ProtectWorkSheet(HomogeneousMaterials, True)
Application.EnableEvents = True
'Application.StatusBar = "Ready"


End Sub

 
Public Sub ClearHomogeneousMaterials(Optional ByVal isclear As Boolean = True)
    Application.EnableEvents = False
    Call ProtectWorkSheet(HomogeneousMaterials, False)
    
    If isclear Then
        Range("TableHomogeneousMaterials").ClearContents
    End If
    
Call ClearConditionalFormat(HomogeneousMaterials, "TableHomogeneousMaterials")

Dim i As Integer
i = 5
'HomogeneousMaterials.Cells(i, 3).Locked = False
With HomogeneousMaterials.Cells(i, 3).FormatConditions.Add(Type:=xlExpression, Formula1:="=$C$" & i & "&D$" & i & "&E$" & i & "=""""")
.Interior.Color = RGB(255, 199, 206)
'.Interior.Pattern = XlPattern.xlPatternGray8
End With

'HomogeneousMaterials.Cells(i, 4).Locked = False
With HomogeneousMaterials.Cells(i, 4).FormatConditions.Add(Type:=xlExpression, Formula1:="=$C$" & i & "&D$" & i & "&E$" & i & "=""""")
.Interior.Color = RGB(255, 199, 206)
'.Interior.Pattern = XlPattern.xlPatternGray8
End With

'HomogeneousMaterials.Cells(i, 5).Locked = False
With HomogeneousMaterials.Cells(i, 5).FormatConditions.Add(Type:=xlExpression, Formula1:="=$C$" & i & "&D$" & i & "&E$" & i & "=""""")
.Interior.Color = RGB(255, 199, 206)
'.Interior.Pattern = XlPattern.xlPatternGray8
End With

Call SetFormulas
Call ProtectWorkSheet(HomogeneousMaterials, True)
   Application.EnableEvents = True
End Sub

Public Sub SetFormulas()
Call setFormula(HomogeneousMaterials, "=IFERROR(IF(I5<>"""",IF(COUNTIF($I$5:I5,I5)>1, 1,0),0),0)", "$J5:$J2000")
Call setFormula(HomogeneousMaterials, "=IFERROR(IF([[Material Group Name(*)]]<>"""",INDEX(TableMaterialGroup,MATCH([[Material Group Name(*)]],TableMaterialGroup[Name],0),2),""""),"""")", "$F5:$F2000")
End Sub
Attribute VB_Name = "Language"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "License"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Manufacturing"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Public Sub ClearManufacturing()
    Application.EnableEvents = False
    Call ClearManufacturingInfo
    Application.EnableEvents = True
End Sub
Attribute VB_Name = "MaterialClasses"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
Dim tRow As Integer

On Error GoTo Err

'Application.StatusBar = "Please be patient..."
tRow = Target.row
tCol = Target.column
    
Application.EnableEvents = False

If tRow >= 5 And tCol = 1 Then
    
    Call ProtectWorkSheet(MaterialClasses, False)
    
    
    If Not Intersect(Target, Range("A" & tRow)) Is Nothing Then
        Call setFormula(MaterialClasses, "=MC_Category", "B" & tRow)
        Call setFormula(MaterialClasses, "=MC_MaterialClassDes", "C" & tRow)
    End If
    
    ActiveCell.EntireRow.AutoFit
    Call ProtectWorkSheet(MaterialClasses, True)
End If
 
If tRow >= 5 Then
'Material Classes
Call ProtectWorkSheet(MaterialClasses, False)

'If Range("$A" & tRow).FormatConditions.Count = 0 Then
    'Range("$A" & tRow).Locked = False
    
    Range("$A" & tRow).FormatConditions.Delete
    With Range("$A" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(MAX(G" & tRow & ":R" & tRow & ")>0,$A" & tRow & "="""")")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
'End If

'If Range("$D" & tRow).FormatConditions.Count = 0 Then
    'Range("$D" & tRow).Locked = False
    
    Range("$D" & tRow).FormatConditions.Delete
    With Range("$D" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(MAX(G" & tRow & ":R" & tRow & ")>0,$D" & tRow & "="""")")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
'End If

'If Range("$E" & tRow).FormatConditions.Count = 0 Then
    'Range("$E" & tRow).Locked = False
    Range("$E" & tRow).FormatConditions.Delete
    With Range("$E" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(MAX(G" & tRow & ":R" & tRow & ")>0,$E" & tRow & "="""")")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
'End If

ActiveCell.EntireRow.AutoFit
Call ProtectWorkSheet(MaterialClasses, True)

If Range("MC_TotalRequiredEntries").value = 0 Then
Call ClearMaterialClasses
End If

Application.EnableEvents = True
'Application.StatusBar = "Ready"

End If

Exit Sub
Err:

'MsgBox "MaterialClassess_Change: " & Err.Description
Call ProtectWorkSheet(MaterialClasses, True)
     Application.EnableEvents = True
'Application.StatusBar = "Ready"
End Sub


Public Sub ClearMaterialClasses()
    Application.EnableEvents = False
    Call ProtectWorkSheet(MaterialClasses, False)
    Range("TableMaterialClasses").ClearContents
 Call ClearConditionalFormat(MaterialClasses, "TableMaterialClasses")
 
Dim i As Integer
i = 5
'MaterialClasses.Cells(i, 1).Locked = False
With MaterialClasses.Cells(i, 1).FormatConditions.Add(Type:=xlExpression, Formula1:="=$A" & i & "&C" & i & "&D" & i & "=""""")
    .Interior.Color = RGB(255, 199, 206)
    '.Interior.Pattern = XlPattern.xlPatternGray8
End With


'MaterialClasses.Cells(i, 4).Locked = False
With MaterialClasses.Cells(i, 4).FormatConditions.Add(Type:=xlExpression, Formula1:="=$A" & i & "&C" & i & "&D" & i & "=""""")
    .Interior.Color = RGB(255, 199, 206)
    '.Interior.Pattern = XlPattern.xlPatternGray8
End With


'MaterialClasses.Cells(i, 5).Locked = False
With MaterialClasses.Cells(i, 5).FormatConditions.Add(Type:=xlExpression, Formula1:="=$A" & i & "&C" & i & "&D" & i & "=""""")
    .Interior.Color = RGB(255, 199, 206)
    '.Interior.Pattern = XlPattern.xlPatternGray8
End With


    Call ProtectWorkSheet(MaterialClasses, True)
    Application.EnableEvents = True
End Sub

Attribute VB_Name = "Products"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
On Error GoTo Err
Dim tRow As Integer
Dim tCol As Integer
 
'Application.StatusBar = "Please be patient..."

tRow = Target.row
tCol = Target.column

If tRow >= 6 And tCol <= 9 Then
Workbooks.Application.EnableEvents = False

Call ProtectWorkSheet(Products, False)

    Application.ScreenUpdating = False
    
    'If Range("$C" & tRow).FormatConditions.Count = 0 Then
        'Range("$C" & tRow).Locked = False
        Range("$C" & tRow).FormatConditions.Delete
        'With Range("$C" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=or($A$" & tRow & "&B$" & tRow & "&C$" & tRow & "&D$" & tRow & "&E$" & tRow & "&G$" & tRow & "&F$" & tRow & "&H$" & tRow & "&I$" & tRow & "="""",$P$" & tRow & "=0)")
        With Range("$C" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND($C" & tRow & "="""", OR(MAX(P" & tRow & ":S" & tRow & ")>0," & "A" & tRow & "&B" & tRow & "&D" & tRow & "&E" & tRow & "&G" & tRow & "<>""""))")
            .Interior.Color = RGB(255, 199, 206)
            '.Interior.Pattern = XlPattern.xlPatternGray8
        End With
    'End If
    
    'If Range("$D" & tRow).FormatConditions.Count = 0 Then
        'Range("$D" & tRow).Locked = False
        Range("$D" & tRow).FormatConditions.Delete
        With Range("$D" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=$Z$" & tRow & "=1")
            .Interior.Color = RGB(255, 199, 206)
            '.Interior.Pattern = XlPattern.xlPatternGray8
        End With
    'End If
    
    'If Range("$F" & tRow).FormatConditions.Count = 0 Then
        'Range("$F" & tRow).Locked = False
        Range("$F" & tRow).FormatConditions.Delete
        'With Range("$F" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(MAX(P" & tRow & ":S" & tRow & ")>0,$F" & tRow & "="""")")
        With Range("$F" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND($F" & tRow & "="""", OR(MAX(P" & tRow & ":S" & tRow & ")>0," & "A" & tRow & "&B" & tRow & "&D" & tRow & "&E" & tRow & "&G" & tRow & "<>""""))")
            .Interior.Color = RGB(255, 199, 206)
            '.Interior.Pattern = XlPattern.xlPatternGray8
        End With
    'End If
    
    'If Range("$H" & tRow).FormatConditions.Count = 0 Then
        'Range("$H" & tRow).Locked = False
        Range("$H" & tRow).FormatConditions.Delete
        
        'With Range("$H" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(MAX(P" & tRow & ":S" & tRow & ")>0,$H" & tRow & "="""")")
        With Range("$H" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND($H" & tRow & "="""", OR(MAX(P" & tRow & ":S" & tRow & ")>0," & "A" & tRow & "&B" & tRow & "&D" & tRow & "&E" & tRow & "&G" & tRow & "<>""""))")
            .Interior.Color = RGB(255, 199, 206)
            '.Interior.Pattern = XlPattern.xlPatternGray8
        End With
    'End If
    
    'If Range("$I" & tRow).FormatConditions.Count = 0 Then
        'Range("$I" & tRow).Locked = False
        Range("$I" & tRow).FormatConditions.Delete
        'With Range("$I" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(MAX(P" & tRow & ":S" & tRow & ")>0,$I" & tRow & "="""")")
        With Range("$I" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND($I" & tRow & "="""", OR(MAX(P" & tRow & ":S" & tRow & ")>0," & "A" & tRow & "&B" & tRow & "&D" & tRow & "&E" & tRow & "&G" & tRow & "<>""""))")
            .Interior.Color = RGB(255, 199, 206)
            '.Interior.Pattern = XlPattern.xlPatternGray8
        End With
    'End If
    
    If Not Intersect(Target, Range("$D" & tRow)) Is Nothing Then
        If IsValidDate(Range("$D" & tRow).value) = True Then
           Range("$Z" & tRow).value = 0
        Else
           Range("$Z" & tRow).value = 1
        End If
    End If
    
ActiveCell.EntireRow.AutoFit

Application.ScreenUpdating = True

Call ProtectWorkSheet(Products, True)

If Range("P_TotalEntries").value = 0 Then ''''And Range("A" & tRow & "&B" & tRow & "&D" & tRow & "&E" & tRow & "&G" & tRow).value = "" Then
    Call ClearProduct(False)
End If

Workbooks.Application.EnableEvents = True

'Application.StatusBar = "Ready"
End If

Exit Sub
Err:
Call ProtectWorkSheet(Products, True)
Workbooks.Application.EnableEvents = True
'Application.StatusBar = "Ready"
End Sub

Public Sub ClearProduct(Optional ByVal isclear As Boolean = True)
    Workbooks.Application.EnableEvents = False
    Call ProtectWorkSheet(Products, False)
    
    If isclear Then
        Range("TableProducts").ClearContents
    End If
    
 Call ClearConditionalFormat(Products, "TableProducts")
 
'Workbooks.Application.EnableEvents = False
'BusinessInfo


'Products
'Call ProtectWorkSheet(Products, False)
Dim i As Integer
i = 6
With Products.Cells(i, 3).FormatConditions.Add(Type:=xlExpression, Formula1:="=$C$" & i & "&F$" & i & "&H$" & i & "&D$" & i & "&I$" & i & "&G$" & i & "=""""")
    .Interior.Color = RGB(255, 199, 206)
'.Interior.Pattern = XlPattern.xlPatternGray8
End With


'Products.Cells(i, 6).Locked = False
With Products.Cells(i, 6).FormatConditions.Add(Type:=xlExpression, Formula1:="=$C$" & i & "&F$" & i & "&H$" & i & "&D$" & i & "&I$" & i & "&G$" & i & "=""""")
    .Interior.Color = RGB(255, 199, 206)
'.Interior.Pattern = XlPattern.xlPatternGray8
End With


'Products.Cells(i, 8).Locked = False
With Products.Cells(i, 8).FormatConditions.Add(Type:=xlExpression, Formula1:="=$C$" & i & "&F$" & i & "&H$" & i & "&D$" & i & "&I$" & i & "&G$" & i & "=""""")
    .Interior.Color = RGB(255, 199, 206)
'.Interior.Pattern = XlPattern.xlPatternGray8
End With


'Products.Cells(i, 9).Locked = False
With Products.Cells(i, 9).FormatConditions.Add(Type:=xlExpression, Formula1:="=$C$" & i & "&F$" & i & "&H$" & i & "&D$" & i & "&I$" & i & "&G$" & i & "=""""")
    .Interior.Color = RGB(255, 199, 206)
'.Interior.Pattern = XlPattern.xlPatternGray8
End With

    Call ProtectWorkSheet(Products, True)
    Workbooks.Application.EnableEvents = True
End Sub
Attribute VB_Name = "QueryExemptions"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    Dim tRow As Integer
    On Error GoTo Err
    'Application.StatusBar = "Ready"
    tRow = Target.row
    tCol = Target.column
    Application.EnableEvents = False
    If tRow >= 6 And tCol = 1 Or tCol = 2 Then
        Application.EnableEvents = False
        Call ProtectWorkSheet(QueryExemptions, False)
        
            If Not Intersect(Target, Range("A" & tRow)) Is Nothing Then
                    ''''Call CreateLookUpValidation(QueryExemptions, "=QE_ID_List", "B" & tRow, True)
                    Call setFormula(QueryExemptions, "=IFERROR(IF(A" & tRow & "<>"""",INDEX(ExemptionIds,MATCH(A" & tRow & ",TableRoHSExemptions[UniqueId],0),1),""""),"""")", "B" & tRow)
                    ''''Range("B" & tRow).ClearContents
                    ''''Range("C" & tRow).ClearContents
                     Call setFormula(QueryExemptions, "=QE_ExemptionDes", "C" & tRow)
            ElseIf Not Intersect(Target, Range("A" & tRow)) Is Nothing Then
                ''''Call setFormula(QueryExemptions, "=QueryExemptionDes", "C" & tRow)
                Call setFormula(QueryExemptions, "=QE_ExemptionDes", "C" & tRow)
            End If
            
            
        'If Range("$A" & tRow).FormatConditions.Count = 0 Then
            Range("$A" & tRow).FormatConditions.Delete
            With Range("$A" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(B" & tRow & "="""",A" & tRow & "<>"""")")
                .Interior.Color = RGB(255, 199, 206)
                '.Interior.Pattern = XlPattern.xlPatternGray8
            End With
        'End If
    
        ActiveCell.EntireRow.AutoFit
        Call ProtectWorkSheet(QueryExemptions, True)
        
        If Range("QE_Total").value = 0 Then
        Call ClearExemptions(False)
        End If
        
         Application.EnableEvents = True
         
    End If
    Application.EnableEvents = True
    'Application.StatusBar = "Ready"
    Exit Sub
Err:

'MsgBox "QueryExemptions_Change: " & Err.Description
Call ProtectWorkSheet(QueryExemptions, True)
Application.EnableEvents = True
'Application.StatusBar = "Ready"
End Sub
 
Public Sub ClearExemptions(Optional ByVal isclear As Boolean = True)
    Application.EnableEvents = False
    Call ProtectWorkSheet(QueryExemptions, False)
    
     If isclear Then
        Range("TableQueryListExemptions").ClearContents
     End If
     
     Call ClearConditionalFormat(QueryExemptions, "TableQueryListExemptions")
     
     
Dim i As Integer
i = 6
 
'QueryLists.Cells(i, 1).Locked = False
With QueryExemptions.Cells(i, 1).FormatConditions.Add(Type:=xlExpression, Formula1:="=$A" & i & "&C" & i & "=""""")
    .Interior.Color = RGB(255, 199, 206)
    '.Interior.Pattern = XlPattern.xlPatternGray8
End With

'QueryLists.Cells(i, 1).Locked = False
With QueryExemptions.Cells(i, 3).FormatConditions.Add(Type:=xlExpression, Formula1:="=$A" & i & "&C" & i & "=""""")
    .Interior.Color = RGB(255, 199, 206)
    '.Interior.Pattern = XlPattern.xlPatternGray8
End With


    Call ProtectWorkSheet(QueryExemptions, True)
    Application.EnableEvents = True
End Sub

Attribute VB_Name = "QueryLists"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Change(ByVal Target As Range)
On Error GoTo Err
Dim rowNum, colNum As Integer
Dim value As String
rowNum = Target.row
colNum = Target.column
Dim found As Boolean
Dim tRow As Integer
    
'Application.StatusBar = "Please be patient..."

tRow = Target.row
tCol = Target.column

   
Application.EnableEvents = False
Application.ScreenUpdating = False
     
If tRow >= 6 And colNum = 1 Then
   Call ProtectWorkSheet(QueryLists, False)
   
   If LCase(Range("A" & tRow).value) <> "Custom" Then
            Call CreateLookUpValidation(QueryLists, "=QueryListStatementList", "B" & tRow, True)
            Range("B" & tRow).ClearContents
            Range("C" & tRow).ClearContents
   Else
            Range("B" & tRow).Validation.Delete
            Range("B" & tRow).ClearContents
            Range("C" & tRow).ClearContents
   End If
   
   ActiveCell.EntireRow.AutoFit
   Call ProtectWorkSheet(QueryLists, True)
End If


If tRow >= 6 And (colNum = 2 Or colNum = 3) Then
   Call ProtectWorkSheet(QueryLists, False)

    If Not Intersect(Target, Range("B" & tRow)) Is Nothing Then
        Range("C" & tRow).value = True
    End If
    
If QueryLists.Range("Q_TotalFoundPos").value > 0 Then
     
    If Range("C" & tRow).value = True Then
        ''''QueryExemptions.Visible = xlSheetVisible
    Else
        If QueryLists.Range("hasExeptionSelected").value <= 0 Then
            QueryExemptions.Range("A6:B500").ClearContents
            ''''QueryExemptions.Visible = xlSheetHidden
        End If
    End If
Else
    If QueryLists.Range("hasExeptionSelected").value <= 0 Then
        Call ProtectWorkSheet(QueryExemptions, False)
        
        QueryExemptions.Range("A6:B500").ClearContents
        ''''QueryExemptions.Visible = xlSheetHidden
        Call ProtectWorkSheet(QueryExemptions, True)
    End If
End If

End If

If tRow >= 6 And colNum <= 3 Then


Application.ScreenUpdating = False

Call ProtectWorkSheet(QueryLists, False)
   ActiveCell.EntireRow.AutoFit
'If Range("$A" & tRow).FormatConditions.Count = 0 Then
     'Range("$A" & tRow).Locked = False
    Range("$A" & tRow).FormatConditions.Delete
    With Range("$A" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(MAX(G" & tRow & ":I" & tRow & ")>0,$A" & tRow & "="""")")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
'End If

If tRow >= 6 Then
    'If Range("$B" & tRow).FormatConditions.Count = 0 Then
         'Range("$B" & tRow).Locked = False
        Range("$B" & tRow).FormatConditions.Delete
        With Range("$B" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(MAX(G" & tRow & ":I" & tRow & ")>0,$B" & tRow & "="""")")
            .Interior.Color = RGB(255, 199, 206)
            '.Interior.Pattern = XlPattern.xlPatternGray8
        End With
    'End If
    
    
    'If Range("$C" & tRow).FormatConditions.Count = 0 Then
         'Range("$C" & tRow).Locked = False
        Range("$C" & tRow).FormatConditions.Delete
        With Range("$C" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(MAX(G" & tRow & ":I" & tRow & ")>0,$C" & tRow & "="""")")
            .Interior.Color = RGB(255, 199, 206)
            '.Interior.Pattern = XlPattern.xlPatternGray8
        End With
    'End If
End If

ActiveCell.EntireRow.AutoFit
Application.ScreenUpdating = True

Call ProtectWorkSheet(QueryLists, True)
Application.EnableEvents = True
Application.ScreenUpdating = True


If Range("QL_TotalEntries").value = 0 Then
Call ClearQueryList
End If

End If

'Application.StatusBar = "Ready"
Exit Sub
Err:
 Application.EnableEvents = True
 Application.ScreenUpdating = True
'Application.StatusBar = "Ready"

'MsgBox "QueryLists_Change: " & Err.Description
End Sub

Public Sub ClearQueryList(Optional ByVal isclear As Boolean = True)
    Application.EnableEvents = False
    Call ProtectWorkSheet(QueryLists, False)
    
    If isclear Then
        Range("TableQueryLists").ClearContents
    End If
    
     Call ClearConditionalFormat(QueryLists, "TableQueryLists")
 Dim i As Integer
    i = 6

'QueryLists.Cells(i, 1).Locked = False
QueryLists.Activate
With QueryLists.Cells(i, 1).FormatConditions.Add(Type:=xlExpression, Formula1:="=$A$" & i & "&B$" & i & "&C$" & i & "=""""")
    .Interior.Color = RGB(255, 199, 206)
    '.Interior.Pattern = XlPattern.xlPatternGray8
End With


'QueryLists.Cells(i, 2).Locked = False
With QueryLists.Cells(i, 2).FormatConditions.Add(Type:=xlExpression, Formula1:="=$A$" & i & "&B$" & i & "&C$" & i & "=""""")
    .Interior.Color = RGB(255, 199, 206)
    '.Interior.Pattern = XlPattern.xlPatternGray8
End With


'QueryLists.Cells(i, 3).Locked = False
With QueryLists.Cells(i, 3).FormatConditions.Add(Type:=xlExpression, Formula1:="=$A$" & i & "&B$" & i & "&C$" & i & "=""""")
    .Interior.Color = RGB(255, 199, 206)
    '.Interior.Pattern = XlPattern.xlPatternGray8
End With

    Call ProtectWorkSheet(QueryLists, True)
    Application.EnableEvents = True
End Sub
Attribute VB_Name = "Revision"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Range("A5").Activate
End Sub
Attribute VB_Name = "Settings"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
On Error GoTo Err
Dim tRow As Integer
Dim tCol As Integer

tRow = Target.row
tCol = Target.column
If tRow = 7 And tCol = 2 Then

    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.EnableEvents = False
    
    Call ProtectWorkSheet(Substances, False)
    If LCase(Settings.Range("ddlConcentration").value) = "concentration" Then
        'If MsgBox("Values in column Mass and Conc(%) of Substances sheet will be deleted. Would you like to proceed?", vbYesNo, "Substance Concentration") = vbYes Then
            
            Substances.Range("H5:H5000").Locked = False
            ''''Substances.Range("H5:H5000").ClearContents
            
            Substances.Range("$H5:$H5000").Copy
            Substances.Range("$H5:$H5000").PasteSpecial (xlPasteValues)

            'Call setFormula(Substances, "=IFERROR(IF(H5<>"""",(INDEX('Homogeneous Materials'!Y$5:Z$2000,MATCH(A5,'Homogeneous Materials'!Y$5:Y$2000,0),2)/100)*AH5,""""),"""")", "$F5:$F5000")
            Call setFormula(Substances, "=IFERROR(IF(H5<>"""",((INDEX('Homogeneous Materials'!Y$5:Z$2000,MATCH(A5,'Homogeneous Materials'!Y$5:Y$2000,0),2)/100)*AH5)/AY5,""""),"""")", "$F5:$F5000")
            
            ''''Call setFormula(Substances, "=IF(G5=""kg"",H5*1000,IF(G5=""mg"",H5*0.001,H5))", "$AF5:$AF5000")
            Call SetToolTip(Substances, "F5:F5000", "This column is disabled.  The value is automatically computed from the Conc(%).  To enable, change the Substance Concentration Unit attribute to Mass in the Settings tab")

            Substances.Range("F5:F5000").Locked = True
            Call SetValidateDecimal(Substances, "$H5:$H5000", 0)
        'Else
        '    Settings.Range("ddlConcentration").value = "Mass"
        'End If
    Else
        'If MsgBox("Values in column Mass and Conc(%) of Substances sheet will be deleted. Would you like to proceed?", vbYesNo, "Substance Concentration") = vbYes Then
            Substances.Range("F5:F5000").Locked = False
            
            Substances.Range("$F5:$F5000").Copy
            Substances.Range("$F5:$F5000").PasteSpecial (xlPasteValues)
            
            ''''Substances.Range("F5:F5000").ClearContents
            Call setFormula(Substances, "=IFERROR(IF(F5<>"""",(( AN5)/AQ5)*100,""""),"""")", "$H5:$H5000")
            ''''Call setFormula(Substances, "=IF(G5=""kg"",F5*1000,IF(G5=""mg"",F5*0.001,F5))", "$AF5:$AF5000")
            Call SetToolTip(Substances, "H5:H5000", "This column is disabled.  The value is automatically computed from the Mass.  To enable, change the Substance Concentration Unit attribute to Concentration in the Settings tab")
            Call SetValidateDecimal(Substances, "$F5:$F5000", 0)

            Substances.Range("H5:H5000").Locked = True
        'Else
        '    Settings.Range("ddlConcentration").value = "Concentration"
        'End If
    End If
    Call ProtectWorkSheet(Substances, True)
    Application.EnableEvents = True
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
End If
    

Exit Sub
Err:
'MsgBox "Settings_Change: " & Err.Description
Application.EnableEvents = True
Application.DisplayAlerts = True
Application.ScreenUpdating = True

End Sub



Attribute VB_Name = "SubProducts"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
On Error GoTo Err
Dim tRow As Integer
Dim tCol As Integer
'Application.StatusBar = "Please be patient..."

tRow = Target.row
tCol = Target.column

   
If tRow >= 5 Then
Application.EnableEvents = False
Application.ScreenUpdating = False
Call ProtectWorkSheet(SubProducts, False)
   
'If Range("$A" & tRow).FormatConditions.Count = 0 Then
    'Range("$A" & tRow).Locked = False
    Range("$A" & tRow).FormatConditions.Delete
    With Range("$A" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND($T$" & tRow & ">0,$N$" & tRow & "=0)")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
'End If


'If Range("$B" & tRow).FormatConditions.Count = 0 Then
    'Range("$B" & tRow).Locked = False
    Range("$B" & tRow).FormatConditions.Delete
    With Range("$B" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=OR($W$" & tRow & "=1,AND($T$" & tRow & ">0,$O$" & tRow & "=0))")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
'End If

    
'If Range("$C" & tRow).FormatConditions.Count = 0 Then
    'Range("$C" & tRow).Locked = False
    Range("$C" & tRow).FormatConditions.Delete
    With Range("$C" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND($T$" & tRow & ">0,$R$" & tRow & "=0)")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
'End If

'If Range("$D" & tRow).FormatConditions.Count = 0 Then
    'Range("$D" & tRow).Locked = False
    Range("$D" & tRow).FormatConditions.Delete
    With Range("$D" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND($T$" & tRow & ">0,$P$" & tRow & "=0)")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
'End If

'If Range("$E" & tRow).FormatConditions.Count = 0 Then
    'Range("$E" & tRow).Locked = False
    Range("$E" & tRow).FormatConditions.Delete
    With Range("$E" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND($T$" & tRow & ">0,$Q$" & tRow & "=0)")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
'End If

ActiveCell.EntireRow.AutoFit
Application.ScreenUpdating = True
Call ProtectWorkSheet(SubProducts, True)

If Range("SP_TotalEntries").value = 0 Then
''''Call ClearSubProducts
End If

Application.EnableEvents = True
'Application.StatusBar = "Ready"
End If

Exit Sub
Err:

'MsgBox "Subproducts_Change: " & Err.Description
Call ProtectWorkSheet(SubProducts, True)
Application.EnableEvents = True
'Application.StatusBar = "Ready"


End Sub
 
Public Sub ClearSubProducts()
    Application.EnableEvents = False
    Call ProtectWorkSheet(SubProducts, False)
    
    If Range("SP_TotalEntries").value > 0 Then
        Range("TableSubProducts").ClearContents
    End If
     Call ClearConditionalFormat(SubProducts, "TableSubProducts")
     
    Call ProtectWorkSheet(SubProducts, True)
    Application.EnableEvents = True
End Sub
Attribute VB_Name = "SubstanceCategoryExemptions"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    Dim tRow As Integer
    On Error GoTo Err
    
    'Application.StatusBar = "Please be patient..."

    tRow = Target.row
    tCol = Target.column
        
    If tRow >= 5 And tCol = 2 Or tCol = 3 Then
         Application.EnableEvents = False
        Call ProtectWorkSheet(SubstanceCategoryExemptions, False)
        
        
        If Not Intersect(Target, Range("B" & tRow)) Is Nothing Then
                'Call CreateLookUpValidation(SubstanceCategoryExemptions, "=SCE_ExemptionID", "C" & tRow, True)
                
                Call setFormula(SubstanceCategoryExemptions, "=IFERROR(IF(B" & tRow & "<>"""",INDEX(ExemptionIds,MATCH(B" & tRow & ",TableRoHSExemptions[UniqueId],0),1),""""),"""")", "C" & tRow)
                ''''Range("C" & tRow).ClearContents
                
                ''''Call setFormula(SubstanceCategoryExemptions, "=SubstanceCategoryExemptionDes", "D" & tRow)
                Call setFormula(SubstanceCategoryExemptions, "=SCE_ExemptionDes", "D" & tRow)
        End If
                
        ActiveCell.EntireRow.AutoFit
        Call ProtectWorkSheet(SubstanceCategoryExemptions, True)
         Application.EnableEvents = True
    End If

If tRow >= 5 And tCol <= 4 Then
    Call ProtectWorkSheet(SubstanceCategoryExemptions, False)
    
    'If Range("$A" & tRow).FormatConditions.Count = 0 Then
        'Range("$A" & tRow).Locked = False
        Range("$A" & tRow).FormatConditions.Delete
        With Range("$A" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=OR(Q" & tRow & ">0,AND(A" & tRow & "="""",B" & tRow & "<>""""))")
            .Interior.Color = RGB(255, 199, 206)
            '.Interior.Pattern = XlPattern.xlPatternGray8
        End With
    'End If
        
    'If Range("$B" & tRow).FormatConditions.Count = 0 Then
        'Range("$B" & tRow).Locked = False
        Range("$B" & tRow).FormatConditions.Delete
        With Range("$B" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(B" & tRow & "="""",A" & tRow & "<>"""")")
            .Interior.Color = RGB(255, 199, 206)
            '.Interior.Pattern = XlPattern.xlPatternGray8
        End With
    'End If
     
    ActiveCell.EntireRow.AutoFit
    Call ProtectWorkSheet(SubstanceCategoryExemptions, True)
    
    If Range("totalRequired").value = 0 Then
        Call ClearSubstanceCategoryExemptions(False)
    End If
End If

Application.EnableEvents = True
'Application.StatusBar = "Ready"

    Exit Sub
Err:

'MsgBox "SubstanceCategoryExemption_Change: " & Err.Description
Call ProtectWorkSheet(SubstanceCategoryExemptions, True)
Application.EnableEvents = True
'Application.StatusBar = "Ready"
End Sub
 

Public Sub ClearSubstanceCategoryExemptions(Optional ByVal isclear As Boolean = True)
    Application.EnableEvents = False
    Call ProtectWorkSheet(SubstanceCategoryExemptions, False)
    
    If isclear Then
        SubstanceCategoryExemptions.Range("TableSubstanceCategoryListExemptions").ClearContents
    End If
    
 Call ClearConditionalFormat(SubstanceCategoryExemptions, "TableSubstanceCategoryListExemptions")
Dim i As Integer
i = 5
'SubstanceCategoryExemptions.Cells(i, 1).Locked = False
With SubstanceCategoryExemptions.Cells(i, 1).FormatConditions.Add(Type:=xlExpression, Formula1:="=A" & i & "&B" & i & "=""""")
    .Interior.Color = RGB(255, 199, 206)
    '.Interior.Pattern = XlPattern.xlPatternGray8
End With


'SubstanceCategoryExemptions.Cells(i, 2).Locked = False
With SubstanceCategoryExemptions.Cells(i, 2).FormatConditions.Add(Type:=xlExpression, Formula1:="=A" & i & "&B" & i & "=""""")
    .Interior.Color = RGB(255, 199, 206)
    '.Interior.Pattern = XlPattern.xlPatternGray8
End With

    Call ProtectWorkSheet(SubstanceCategoryExemptions, True)
    Application.EnableEvents = True
End Sub
Attribute VB_Name = "SubstanceCategoryLists"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    Dim tRow As Integer
    Dim colNum As Integer
    colNum = Target.column
    
       
    On Error GoTo Err
    
    'Application.StatusBar = "Please be patient..."

    tRow = Target.row
    tCol = Target.column
    
     
    If tRow >= 5 And tCol <= 9 Then
        Application.EnableEvents = False
        
        Call ProtectWorkSheet(SubstanceCategoryLists, False)
         
       
        If Not Intersect(Target, Range("B" & tRow)) Is Nothing Then
                Call CreateLookUpValidation(SubstanceCategoryLists, "=SCL_CategoryName", "C" & tRow, True)
                Range("C" & tRow).ClearContents ': Range("C" & tRow).Validation.Delete
        ElseIf Not Intersect(Target, Range("C" & tRow)) Is Nothing Then
            Call setFormula(SubstanceCategoryLists, "=SCL_Threshold", "D" & tRow)
            Range("E" & tRow).value = False
        End If
        
        Select Case colNum
            Case 2, 5
                Application.EnableEvents = False
                Call ProtectWorkSheet(SubstanceCategoryLists, False)
                If SubstanceCategoryLists.Range("RoshRequired").value > 0 Then
                    If SubstanceCategoryLists.Range("hasRohsResponse").value <= 0 Then
                         ''''SubstanceCategoryExemptions.Range("A5:C500").ClearContents
                    End If
                Else
                        ''''SubstanceCategoryExemptions.Range("A5:C500").ClearContents
                End If
                Call ProtectWorkSheet(SubstanceCategoryExemptions, True)
                Application.EnableEvents = True
        End Select
    
        ActiveCell.EntireRow.AutoFit
        Call ProtectWorkSheet(SubstanceCategoryLists, False)
        
        'If Range("$B" & tRow).FormatConditions.Count = 0 Then
            'Range("$B" & tRow).Locked = False
            Range("$B" & tRow).FormatConditions.Delete
            With Range("$B" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(MAX(X" & tRow & ":AA" & tRow & ") > 0,B" & tRow & "="""")")
                .Interior.Color = RGB(255, 199, 206)
                '.Interior.Pattern = XlPattern.xlPatternGray8
            End With
        'End If
        
        'If Range("$C" & tRow).FormatConditions.Count = 0 Then
            'Range("$C" & tRow).Locked = False
            Range("$C" & tRow).FormatConditions.Delete
            With Range("$C" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(MAX(X" & tRow & ":AA" & tRow & ") > 0,C" & tRow & "="""")")
                .Interior.Color = RGB(255, 199, 206)
                '.Interior.Pattern = XlPattern.xlPatternGray8
            End With
        'End If
        
        'If Range("$E" & tRow).FormatConditions.Count = 0 Then
            'Range("$E" & tRow).Locked = False
            Range("$E" & tRow).FormatConditions.Delete
            With Range("$E" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AO" & tRow & "=1")
                .Interior.Color = RGB(255, 199, 206)
                '.Interior.Pattern = XlPattern.xlPatternGray8
            End With
        'End If
        
        
        'If Range("$F" & tRow).FormatConditions.Count = 0 Then
            'Range("$F" & tRow).Locked = False
            Range("$F" & tRow).FormatConditions.Delete
            With Range("$F" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(F" & tRow & "="""",W" & tRow & ">0)")
                .Interior.Color = RGB(255, 199, 206)
                '.Interior.Pattern = XlPattern.xlPatternGray8
            End With
        'End If
        
        'If Range("$G" & tRow).FormatConditions.Count = 0 Then
            'Range("$G" & tRow).Locked = False
            Range("$G" & tRow).FormatConditions.Delete
            With Range("$G" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(G" & tRow & "="""",Y" & tRow & ">0)")
                .Interior.Color = RGB(255, 199, 206)
                '.Interior.Pattern = XlPattern.xlPatternGray8
            End With
        'End If
        
        'If Range("$H" & tRow).FormatConditions.Count = 0 Then
            'Range("$H" & tRow).Locked = False
            Range("$H" & tRow).FormatConditions.Delete
            With Range("$H" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(H" & tRow & "="""",AN" & tRow & ">0)")
                .Interior.Color = RGB(255, 199, 206)
                '.Interior.Pattern = XlPattern.xlPatternGray8
            End With
        'End If
        
        If Not Intersect(Target, Range("B" & tRow)) Is Nothing Then
             Range("E" & tRow).ClearContents
        End If
        
    ActiveCell.EntireRow.AutoFit
    Call ProtectWorkSheet(SubstanceCategoryLists, True)
    
    If Range("SCL_TotalReqEntries").value = 0 Then
        Call ClearSubstanceCategoryLists(False)
    End If
    
    Application.EnableEvents = True
    SubstanceCategoryLists.Activate
    End If

'Application.StatusBar = "Ready"
    Exit Sub
Err:

'MsgBox "SubstanceCategoryLists_Change: " & Err.Description
    Call ProtectWorkSheet(SubstanceCategoryLists, True)
    Application.EnableEvents = True
    'Application.StatusBar = "Ready"
End Sub
  

Public Sub ClearSubstanceCategoryLists(Optional ByVal isclear As Boolean = True)
    Application.EnableEvents = False
    Call ProtectWorkSheet(SubstanceCategoryLists, False)
    
    If isclear Then
      SubstanceCategoryLists.Range("TableSubstanceCategoryList").ClearContents
      
     Call setFormula(SubstanceCategoryLists, "=IF(B5<>"""",ROW()-4,"""")", "A5")
      
    End If
    
    Call ClearConditionalFormat(SubstanceCategoryLists, "TableSubstanceCategoryList")
Dim i As Integer
i = 5
'SubstanceCategoryLists.Cells(i, 1).Locked = False
With SubstanceCategoryLists.Cells(i, 2).FormatConditions.Add(Type:=xlExpression, Formula1:="=B" & i & "&C" & i & "=""""")
    .Interior.Color = RGB(255, 199, 206)
    '.Interior.Pattern = XlPattern.xlPatternGray8
End With


'SubstanceCategoryLists.Cells(i, 3).Locked = False
With SubstanceCategoryLists.Cells(i, 3).FormatConditions.Add(Type:=xlExpression, Formula1:="=B" & i & "&C" & i & "=""""")
    .Interior.Color = RGB(255, 199, 206)
    '.Interior.Pattern = XlPattern.xlPatternGray8
End With


    Call ProtectWorkSheet(SubstanceCategoryLists, True)
    Application.EnableEvents = True
End Sub

Attribute VB_Name = "Substances"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    Dim tRow As Integer
    Dim level As String
    
    On Error GoTo Err
    'Application.StatusBar = "Please be patient..."
    
    tRow = Target.row
    tCol = Target.column
     
    If tRow >= 5 And tCol <= 11 Then
        Application.EnableEvents = False
    
        Call ProtectWorkSheet(Substances, False)
        
        
        If Not Intersect(Target, Range("B" & tRow)) Is Nothing Then
            level = Target.value
            If Range("B" & tRow).value <> "" And (LCase(Range("B" & tRow).value) <> "supplier" And LCase(Range("B" & tRow).value) <> "requester") Then
                Call CreateLookUpValidation(Substances, "=S_SubstanceCategoryGroupName", "C" & tRow, False)
                
                Call CreateLookUpValidation(Substances, "=S_SubstanceName", "D" & tRow, False)
                
                Range("C" & tRow).ClearContents
                Range("D" & tRow).ClearContents
                Call setFormula(Substances, "=CasNumber", "E" & tRow)
             Else
                Range("C" & tRow).ClearContents
                Range("C" & tRow).Validation.Delete
                Range("D" & tRow).ClearContents
                Range("D" & tRow).Validation.Delete
                Range("E" & tRow).ClearContents
            End If
            
        ElseIf Not Intersect(Target, Range("C" & tRow)) Is Nothing Then
                Call CreateLookUpValidation(Substances, "=S_SubstanceName", "D" & tRow, False)
                Range("D" & tRow).ClearContents
                Range("E" & tRow).ClearContents
                Call setFormula(Substances, "=CasNumber", "E" & tRow)
        
        ElseIf Not Intersect(Target, Range("I" & tRow)) Is Nothing Then
            Call setFormula(Substances, "=S_ExemptionDes", "J" & tRow)
            
        ElseIf Not Intersect(Target, Range("D" & tRow)) Is Nothing Then
             Range("AK" & tRow).value = 0
             If isValidCAS(Range("E" & tRow).value) = True Then
                Range("AK" & tRow).value = 0
                Else
                Range("AK" & tRow).value = 1
             End If
        ElseIf Not Intersect(Target, Range("E" & tRow)) Is Nothing Then
            Range("AK" & tRow).value = 0
        If isValidCAS(Range("E" & tRow).value) = True Then
           Range("AK" & tRow).value = 0
           Else
           Range("AK" & tRow).value = 1
        End If
        ElseIf Not Intersect(Target, Range("F" & tRow)) Is Nothing Then
            Call SetFormulas(tRow)
        ElseIf Not Intersect(Target, Range("G" & tRow)) Is Nothing Then
            Call SetFormulas(tRow)
        ElseIf Not Intersect(Target, Range("H" & tRow)) Is Nothing Then
            Call SetFormulas(tRow)
        ElseIf Range("A" & tRow).value <> "" And (Range("B" & tRow).value = "" And Range("C" & tRow).value = "") Then
            Call SetFormulas(tRow)
            Call setFormula(Substances, "Supplier", "B" & tRow)    'jason added 3/24/2015
            Call setFormula(Substances, "Supplier", "C" & tRow)    'jason added 3/24/2015
        ElseIf Range("A" & tRow).value = "" Then
            Range("B" & tRow).ClearContents
            Range("C" & tRow).ClearContents
        
            Call SetFormulas(tRow)
        End If
        
        
    'Set Conditional Formatting
    'If Range("$A" & tRow).FormatConditions.Count = 0 Then
        'Range("$A" & tRow).Locked = False
         Substances.Range("$A" & tRow).FormatConditions.Delete
        'With Range("$C" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND($C" & tRow & "="""", OR(MAX(P" & tRow & ":S" & tRow & ")>0," & "A" & tRow & "&B" & tRow & "&D" & tRow & "&E" & tRow & "&G" & tRow & "<>""""))")
        
        'With Range("$A" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=OR(Z" & tRow & " >0 ,AND(MAX(V" & tRow & ":X" & tRow & "," & "AA" & tRow & ") > 0, A" & tRow & " =""""))")
        With Range("$A" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=OR(Z" & tRow & " >0 ,AND($A" & tRow & "="""",OR(MAX(V" & tRow & ":X" & tRow & "," & "AA" & tRow & ") > 0, " & "B" & tRow & "&C" & tRow & "&E" & tRow & "&I" & tRow & "<>"""")))")
            .Interior.Color = RGB(255, 199, 206)
            '.Interior.Pattern = XlPattern.xlPatternGray8
        End With
    'End If
    
    'If Range("$D" & tRow).FormatConditions.Count = 0 Then
        'Range("$D" & tRow).Locked = False
        Range("$D" & tRow).FormatConditions.Delete
        With Range("$D" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(D" & tRow & " ="""",OR(MAX(V" & tRow & ":X" & tRow & "," & "AA" & tRow & ")  > 0, " & "B" & tRow & "&C" & tRow & "&E" & tRow & "&I" & tRow & "<>""""))")
            .Interior.Color = RGB(255, 199, 206)
            '.Interior.Pattern = XlPattern.xlPatternGray8
        End With
    'End If
    
    'If Range("$E" & tRow).FormatConditions.Count = 0 Then
        'Range("$E" & tRow).Locked = False
        Range("$E" & tRow).FormatConditions.Delete
        With Range("$E" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AK" & tRow & " >0")
            .Interior.Color = RGB(255, 199, 206)
            '.Interior.Pattern = XlPattern.xlPatternGray8
        End With
    'End If
        
    'If Range("$F" & tRow).FormatConditions.Count = 0 Then
        'Range("$F" & tRow).Locked = False
        Range("$F" & tRow).FormatConditions.Delete
        With Range("$F" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=or(BD" & tRow & "> 0, AND(F" & tRow & " ="""", OR(MAX(V" & tRow & ":X" & tRow & "," & "AA" & tRow & ") > 0, " & "B" & tRow & "&C" & tRow & "&E" & tRow & "&I" & tRow & "<>"""")))")
            .Interior.Color = RGB(255, 199, 206)
            '.Interior.Pattern = XlPattern.xlPatternGray8
        End With
    'End If
    
   ' If Range("$G" & tRow).FormatConditions.Count = 0 Then
        'Range("$G" & tRow).Locked = False
        Range("$G" & tRow).FormatConditions.Delete
        With Range("$G" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(G" & tRow & " ="""", OR(MAX(V" & tRow & ":X" & tRow & "," & "AA" & tRow & ") > 0, " & "B" & tRow & "&C" & tRow & "&E" & tRow & "&I" & tRow & "<>""""))")
            .Interior.Color = RGB(255, 199, 206)
            '.Interior.Pattern = XlPattern.xlPatternGray8
        End With
    'End If

    'If Range("$I" & tRow).FormatConditions.Count = 0 Then
        'Range("$I" & tRow).Locked = False
        Range("$I" & tRow).FormatConditions.Delete
        With Range("$I" & tRow).FormatConditions.Add(Type:=xlExpression, Formula1:="=AR" & tRow & " >0")
            .Interior.Color = RGB(255, 199, 206)
            '.Interior.Pattern = XlPattern.xlPatternGray8
        End With
    'End If
    
    
    ActiveCell.EntireRow.AutoFit
    Application.EnableEvents = True
    Call ProtectWorkSheet(Substances, True)
    
    If Range("S_Total").value = 0 And Range("B" & tRow).value = "" And Range("C" & tRow).value = "" And Range("E" & tRow).value = "" And Range("G" & tRow).value = "" And Range("I" & tRow).value = "" Then
       Call ClearSubstances(False)
    End If
    
End If
'Application.StatusBar = "Ready"
    Exit Sub
Err:

'MsgBox "Substances_Change: " & Err.Description
 Application.EnableEvents = True
 Call ProtectWorkSheet(Substances, True)
 'Application.StatusBar = "Ready"
End Sub


Private Sub SetFormulas(tRow As Integer)

If LCase(Settings.Range("ddlConcentration").value) = "concentration" Then
    'Call setFormula(Substances, "=IFERROR((INDEX('Homogeneous Materials'!Y$5:Z$2000,MATCH(" & "A" & tRow & ",'Homogeneous Materials'!Y$5:Y$2000,0),2)/100)*" & "AH" & tRow & ","""")", "F" & tRow)
    
    Call setFormula(Substances, "=IFERROR(((INDEX('Homogeneous Materials'!Y$5:Z$2000,MATCH(" & "A" & tRow & ",'Homogeneous Materials'!Y$5:Y$2000,0),2)/100)*" & "AH" & tRow & ") ,"""")", "F" & tRow)
    Call SetToolTip(Substances, "F" & tRow, "This column is disabled.  The value is automatically computed from the Conc(%).  To enable, change the Substance Concentration Unit attribute to Mass in the Settings tab")
    
     Substances.Range("F" & tRow).Locked = True
     Substances.Range("H" & tRow).Locked = False
     Call SetValidateDecimal(Substances, "H" & tRow, 0)
 Else
     ''''Call setFormula(Substances, "=IFERROR(IF(F" & tRow & "<>"""",(AY" & tRow & "*" & "F" & tRow & "/AS" & tRow & ")*100,""""),"""")", "H" & tRow)
     'Call setFormula(Substances, "=IFERROR(IF(F" & tRow & "<>"""",(F" & tRow & "/AS" & tRow & ")*100,""""),"""")", "H" & tRow)
     
     'Call setFormula(Substances, "=IFERROR(IF(F" & tRow & "<>"""",(AY" & tRow & "*(F" & tRow & "/AN" & tRow & ")*100),""""),"""")", "H" & tRow)
     
     Call setFormula(Substances, "=IFERROR(IF(F" & tRow & "<>"""",((AN" & tRow & ")/AQ" & tRow & ")" & " *100,""""),"""")", "H" & tRow)
     Call SetToolTip(Substances, "H" & tRow, "This column is disabled.  The value is automatically computed from the Mass.  To enable, change the Substance Concentration Unit attribute to Concentration in the Settings tab")
     Call SetValidateDecimal(Substances, "F" & tRow, 0)
     Substances.Range("F" & tRow).Locked = False
     Substances.Range("H" & tRow).Locked = True
 End If


End Sub


Public Sub ClearSubstances(Optional ByVal isclear As Boolean = True)
    Application.EnableEvents = False
    Call ProtectWorkSheet(Substances, False)
    
    If isclear Then
        Range("TableSubstances").ClearContents
        Substances.Range("AK6:AK5000").ClearContents
    End If
    
Call ClearConditionalFormat(Substances, "TableSubstances")
Dim i As Integer
i = 5
'Substances.Cells(i, 1).Locked = False
With Substances.Cells(i, 1).FormatConditions.Add(Type:=xlExpression, Formula1:="=A" & i & "&D" & i & "&F" & i & "&G" & i & " =""""")
    .Interior.Color = RGB(255, 199, 206)
    '.Interior.Pattern = XlPattern.xlPatternGray8
End With

'Substances.Cells(i, 4).Locked = False
With Substances.Cells(i, 4).FormatConditions.Add(Type:=xlExpression, Formula1:="=A" & i & "&D" & i & "&F" & i & "&G" & i & " =""""")
    .Interior.Color = RGB(255, 199, 206)
    '.Interior.Pattern = XlPattern.xlPatternGray8
End With


'Substances.Cells(i, 6).Locked = False
With Substances.Cells(i, 6).FormatConditions.Add(Type:=xlExpression, Formula1:="=A" & i & "&D" & i & "&F" & i & "&G" & i & " =""""")
    .Interior.Color = RGB(255, 199, 206)
    '.Interior.Pattern = XlPattern.xlPatternGray8
End With
    
'Substances.Cells(i, 7).Locked = False
With Substances.Cells(i, 7).FormatConditions.Add(Type:=xlExpression, Formula1:="=A" & i & "&D" & i & "&F" & i & "&G" & i & " =""""")
    .Interior.Color = RGB(255, 199, 206)
    '.Interior.Pattern = XlPattern.xlPatternGray8
End With

    Call ProtectWorkSheet(Substances, True)
    Application.EnableEvents = True
End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_BeforeClose(Cancel As Boolean)
    Call ToggleCutCopyAndPaste(True)
End Sub
 
Private Sub Workbook_Deactivate()
    ''''Call ToggleCutCopyAndPaste(True)
End Sub

Private Sub Workbook_Activate()
    'Call ToggleCutCopyAndPaste(False)
End Sub


Private Sub Workbook_Open()
On Error GoTo Err
Dim myDom As MSXML2.DOMDocument
Dim nodeList1 As MSXML2.IXMLDOMNodeList

Call ToggleCutCopyAndPaste(False)

'TODO
'Workbooks.Application.EnableEvents = False
''Application.StatusBar = "Please be patient..."

Call ProtectWorkSheets(False)
''''Call SetGlobalDateFormat

Application.DisplayAlerts = False
Workbooks.Application.EnableEvents = True

Set myDom = CreateObject("MSXML2.DOMDocument")

Dim node As MSXML2.IXMLDOMNode

DL_HostName.Activate

Dim oShell As Object
Set oShell = CreateObject("Wscript.Shell")
 

Dim msg As String
msg = GetResponse(DL_HostName.Range("HostName").value & "gettemplateversion")

If msg <> "" Then
myDom.LoadXML (msg)

Dim url  As String
Dim fileVersion  As String
Dim latestVersion  As String

Set node = myDom.SelectSingleNode("ArrayOfNotificationTemplate/NotificationTemplate/Message")
If Not node Is Nothing Then
    fileVersion = myDom.SelectSingleNode("ArrayOfNotificationTemplate/NotificationTemplate/fileVersion").Text & ".xlsm" & "/"
    latestVersion = myDom.SelectSingleNode("ArrayOfNotificationTemplate/NotificationTemplate/latestVersion").Text
    msg = myDom.SelectSingleNode("ArrayOfNotificationTemplate/NotificationTemplate/Message").Text
    url = myDom.SelectSingleNode("ArrayOfNotificationTemplate/NotificationTemplate/url").Text & fileVersion & Revision.Range("UserId").value
    
    If latestVersion <> BusinessInfo.Range("templateVersion").value Then
        If myDom.HasChildNodes Then
            If MsgBox("Hello " & Application.UserName & ", " & msg, vbYesNo, "Template Version") = vbYes Then
                oShell.Run (url)
            End If
        End If
    End If
End If
End If
 
'Format datetime to MM/DD/YYYY
 
Call ProtectWorkSheet(BusinessInfo, False)
    BusinessInfo.Range("RequestDate").NumberFormat = "@" 'Local = "mm/dd/yyyy"
    BusinessInfo.Range("RespondByDate").NumberFormat = "@" 'Local = "mm/dd/yyyy"
    BusinessInfo.Range("ResponseDate").NumberFormat = "@" 'Local = "mm/dd/yyyy"
    
Call ProtectWorkSheet(BusinessInfo, True)

Call ProtectWorkSheet(Products, False)
    Products.Range("D5:D500").NumberFormat = "@" '"mm/dd/yyyy"
Call ProtectWorkSheet(Products, True)



'Call DeleteUnwantedDropdown

BusinessInfo.Activate
BusinessInfo.Range("FormatType").Select
Call ProtectWorkBook(True)
Call ProtectWorkSheets(True)
Application.CalculateFull

Set oShell = Nothing
''Application.StatusBar = "Ready"

Exit Sub
Err:
'MsgBox Err.Description
Call ProtectWorkBook(True)
Call ProtectWorkSheets(True)
''Application.StatusBar = "Ready"
End Sub


Private Sub DeleteUnwantedDropdown()
On Error Resume Next
'If Application.Version = "16.0" Then

    Dim WS As Worksheet, mshape As Shape
    For Each WS In Worksheets
        With WS
            For Each mshape In .Shapes
                If mshape.Type = 12 Or mshape.Type = 8 Then
                    mshape.Delete
                End If
            Next
        End With
    Next WS
    On Error GoTo 0
    
Call SetLookUpValidation
'End If
    
End Sub

Attribute VB_Name = "modACS"
Option Explicit

Const importError = "You are currently unable to access the conversion web service.  Common issues that cause this error:" + vbNewLine _
                    + "-   VPN connection blocking access" + vbNewLine _
                    + "-   Lack of internet connection" + vbNewLine _
                    + "-   Firewall settings" + vbNewLine _

Const invalidImportExport = "Please verify the xml/excel format is correct. "

Const exportError = "You are currently unable to access the conversion web service." + vbNewLine + "Please check the internet connection"

Const refreshLookUp = "You are currently unable to access the web service." + vbNewLine + "Please check the internet connection"

Public schema As String
Dim arrField()
Dim arrValue()


Public Sub ClearContents()
On Error GoTo Err
If MsgBox("This will delete all Entries. Do you want to continue?", vbOKCancel) = vbOK Then
    Err.Clear
     
    ''Application.StatusBar = "Please be patient..."
    
    Application.ScreenUpdating = False
    Workbooks.Application.EnableEvents = False
    
    Call ProtectWorkBook(False)
    Call ProtectWorkSheets(False)
    Call ClearTableFormatConditions
    Call SetConditionalFormatting
    Call SetDefaultConditionalFormatting
    Call UnloackCells
    
        
    Call ClearDataEntries
    Call ResizeTableRow
    Call SetDataValidation
    Call ConfigMassConcentration
    Call LockRequester
    Call LockResponse
    Call ResetDataValidation
    Call resetColumnPos
    Call ClearSettings
    Call SetTableFont
    
    'Call ClearTableFormatConditions
    Call ProtectWorkSheet(BusinessInfo, False)
    BusinessInfo.Activate
    BusinessInfo.Range("FormatType").Select
    
   
    BusinessInfo.Range("ddldistribution").value = "No"
    Workbooks.Application.EnableEvents = True
   
    BusinessInfo.Range("ddlClassA").value = "No"
    Workbooks.Application.EnableEvents = True
    
    BusinessInfo.Range("ddlClassB").value = "No"
    Workbooks.Application.EnableEvents = True
        
    BusinessInfo.Range("ddlClassC").value = "No"
    Workbooks.Application.EnableEvents = True
        
    BusinessInfo.Range("ddlManufacturingInfo").value = "No"
    Workbooks.Application.EnableEvents = True
        
        
    BusinessInfo.Range("ddlClassD").value = "Yes"
    BusinessInfo.Range("S_FieldLock").value = "No"
    
    If BusinessInfo.ProtectContents = True Then
        Call ProtectWorkSheet(BusinessInfo, False)
        BusinessInfo.Range("R_FieldLock").Select
        Selection.Locked = False
    End If
    
    ''''Call setFormula(BusinessInfo, "=IF(Duns<>"""",""DUNS"","""")", "DUNSAutority")
    'Call setFormula(BusinessInfo, "=IF(VendorId<>"""","""","""")", "VendorAuthority")
    
    Call ProtectWorkSheets(True)
    Call ProtectWorkBook(True)
   
    Application.ScreenUpdating = True
    Workbooks.Application.EnableEvents = True
    
    ''Application.StatusBar = "Ready"
End If
Exit Sub
Err:
MsgBox Err.Description
Application.ScreenUpdating = True
Workbooks.Application.EnableEvents = True
Call ProtectWorkSheets(True)
Call ProtectWorkBook(True)
End Sub

Sub ResetDataValidation()
Call ProtectWorkSheet(Substances, False)
   
If LCase(Settings.Range("ddlConcentration").value) = "concentration" Then
    Substances.Range("F5:F5000").Locked = True
    Substances.Range("H5:H5000").Locked = False
    
    Call setFormula(Substances, "=IFERROR(IF(H5<>"""",(INDEX('Homogeneous Materials'!Y$5:Z$2000,MATCH(A5,'Homogeneous Materials'!Y$5:Y$2000,0),2)/100)*AH5,""""),"""")", "$F5:$F5000")
    Call SetToolTip(Substances, "F5:F5000", "This column is disable. The value is auto computed, to enable change the Substance Concentration to Concentration in Setting sheet.")
    Call SetValidateDecimal(Substances, "$H5:$H5000", 0)
    
Else
    Substances.Range("F5:F5000").Locked = False
    Substances.Range("H5:H5000").Locked = True
    'Call setFormula(Substances, "=IFERROR(IF(F5<>"""",AH5/INDEX('Homogeneous Materials'!Y$5:Z$2000,MATCH(A5,'Homogeneous Materials'!Y$5:Y$2000,0),2)*100,""""),"""")", "$H5:$H5000")
    ''Call setFormula(Substances, "=IFERROR(IF(F5<>"""",(F5/AN5)*100,""""),"""")", "$H5:$H5000")
    Call setFormula(Substances, "=IFERROR(IF(F5<>"""",(( AN5)/AQ5)*100,""""),"""")", "$H5:$H5000")
    Call SetToolTip(Substances, "H5:H5000", "This column is disable. The value is auto computed, to enable change the Substance Concentration to Mass in Setting sheet.")
    Call SetValidateDecimal(Substances, "$F5:$F5000", 0)

End If
    
    
Call ProtectWorkSheet(Substances, True)
End Sub


Sub ClearDataEntries()
     
    'Clear BusinessInfo Sheet
    BusinessInfo.Activate
    BusinessInfo.Range("ddldigitalSignature").value = "No"
    BusinessInfo.Range("LegalDeclarationType").value = "Standard"
    
    BusinessInfo.Range("SupplierAcceptance").Select
    Selection.ClearContents
    
    BusinessInfo.Range("requesterInfo").Select
    Selection.ClearContents
    
    BusinessInfo.Range("supplierInfo").Select
    Selection.ClearContents
    
    BusinessInfo.Range("TableSupplierContacts").ClearContents
    
    BusinessInfo.Range("IsValidRequestDate").value = 0
    BusinessInfo.Range("IsValidRespondByDate").value = 0
    BusinessInfo.Range("IsValidResponseDate").value = 0
    
    
    

    'Products
    Products.Activate
    Products.Range("TableProducts").ClearContents
    Products.Range("Z5:Z500").ClearContents
    
    'Clear Query List
    QueryLists.Activate
    QueryLists.Range("TableQueryLists").ClearContents
    
    QueryExemptions.Activate
    QueryExemptions.Range("TableQueryListExemptions").ClearContents
    
    
    'manufacturing
    
    Call ClearManufacturingInfo
    
    
    'Material Classes
    MaterialClasses.Activate
    MaterialClasses.Range("TableMaterialClasses").ClearContents

    
    'Substance Category Lists
    SubstanceCategoryLists.Activate
    SubstanceCategoryLists.Range("TableSubstanceCategoryList").ClearContents
    
    SubstanceCategoryExemptions.Activate
    SubstanceCategoryExemptions.Range("TableSubstanceCategoryListExemptions").ClearContents
    
    
    'Sub Products
    SubProducts.Activate
    SubProducts.Range("TableSubProducts").ClearContents
    
    HomogeneousMaterials.Activate
    HomogeneousMaterials.Range("TableHomogeneousMaterials").ClearContents
    
    Substances.Activate
    Substances.Range("TableSubstances").ClearContents
    Substances.Range("AK6:AK5000").ClearContents
    
    
    'File References
    FileReferences.Activate
    FileReferences.Range("TableFileReferences").ClearContents
    
    
    QueryLists.Visible = xlSheetHidden
    QueryExemptions.Visible = xlSheetHidden
            
    MaterialClasses.Visible = xlSheetHidden
                
    SubstanceCategoryLists.Visible = xlSheetHidden
    SubstanceCategoryExemptions.Visible = xlSheetHidden
                
    SubProducts.Visible = xlSheetHidden
    HomogeneousMaterials.Visible = xlSheetHidden
    Substances.Visible = xlSheetHidden
    
    Manufacturing.Visible = xlSheetHidden
     
End Sub


Sub ClearManufacturingInfo()
    'manufacturing
    Manufacturing.Activate
    Manufacturing.Range("MSL_Rating").Select: Selection.ClearContents
    Manufacturing.Range("Classification_Temp").Select:  Selection.ClearContents
    Manufacturing.Range("Max_Time").Select: Selection.ClearContents
    Manufacturing.Range("Component_Ramp_Up_Rate").Select: Selection.ClearContents
    Manufacturing.Range("Component_Ramp_Down_Rate").Select: Selection.ClearContents
    Manufacturing.Range("Package_Designator").Select: Selection.ClearContents
    Manufacturing.Range("Preheat_Min_Temp").Select: Selection.ClearContents
    Manufacturing.Range("Preheat_Max_Temp").Select: Selection.ClearContents
    Manufacturing.Range("Preheat_Duration").Select: Selection.ClearContents
    Manufacturing.Range("Component_Temp_Spike").Select: Selection.ClearContents
    Manufacturing.Range("Time_Above").Select: Selection.ClearContents
    Manufacturing.Range("Processing_Cycles").Select: Selection.ClearContents
    Manufacturing.Range("Max_Wave_Solder_Temp").Select: Selection.ClearContents
    Manufacturing.Range("Max_Total_Wave_Time").Select: Selection.ClearContents
    Manufacturing.Range("PSL_Wave").Select: Selection.ClearContents
    Manufacturing.Range("Wave_Additional_Info").Select: Selection.ClearContents
    Manufacturing.Range("PSL_Reflow").Select: Selection.ClearContents
    Manufacturing.Range("Reflow_Additional_Info").Select: Selection.ClearContents
    Manufacturing.Range("PSL_Comment").Select: Selection.ClearContents
    Manufacturing.Range("TableManufacturingTerminals").ClearContents
End Sub

Public Sub ManufacturingInfo()
 
On Error GoTo Err

Workbooks.Application.ScreenUpdating = False
Workbooks.Application.EnableEvents = False

Call ProtectWorkBook(False)
Call ProtectWorkSheet(Manufacturing, False)

If BusinessInfo.Range("IncludeManufacturing").value = True Then
    Manufacturing.Visible = xlSheetVisible
Else
    If Manufacturing.Range("ManufacturingHasEntries").value = True Then
        If MsgBox("Are you sure? This will delete all added Manufacturing Information.", vbOKCancel) = vbOK Then
            'manufacturing
            Call ClearManufacturingInfo
    
            Manufacturing.Visible = xlSheetHidden
            BusinessInfo.Range("ddlManufacturingInfo").value = "No"
        Else
            ''''BusinessInfo.Range("IncludeManufacturing").value = True
            BusinessInfo.Range("ddlManufacturingInfo").value = "Yes"
            
        End If
     Else
            BusinessInfo.Range("ddlManufacturingInfo").value = "No"
            Manufacturing.Visible = xlSheetHidden
     End If
End If

Call ProtectWorkSheet(Manufacturing, True)
Call ProtectWorkBook(True)

Workbooks.Application.EnableEvents = True
Workbooks.Application.ScreenUpdating = True

BusinessInfo.Activate
BusinessInfo.Range("FormatType").Select

Exit Sub
Err:

Call ProtectWorkSheet(Manufacturing, True)
Call ProtectWorkBook(True)

'MsgBox "ManufacturingInfo: " & Err.Description
Workbooks.Application.EnableEvents = True
 Workbooks.Application.ScreenUpdating = True
End Sub
 

Public Sub distribution()
On Error GoTo Err
Worksheets.Application.EnableEvents = False
Workbooks.Application.ScreenUpdating = False

    If BusinessInfo.Range("FormType").value = True Then
        If MsgBox("Are you sure? This action will clear the requester information. Do you want to continue?", vbYesNo) = vbYes Then
            Call ProtectWorkSheet(BusinessInfo, False)
            BusinessInfo.Activate
            BusinessInfo.Range("RequesterName").Select
            Selection.ClearContents
            BusinessInfo.Range("RequestDate").Select
            Selection.ClearContents
            BusinessInfo.Range("RequestDocumentId").Select
            Selection.ClearContents
            BusinessInfo.Range("RespondByDate").Select
            Selection.ClearContents
            BusinessInfo.Range("ContactName").Select
            Selection.ClearContents
            BusinessInfo.Range("ContactEmail").Select
            Selection.ClearContents
            BusinessInfo.Range("ContactPhone").Select
            Selection.ClearContents
            
            ''''BusinessInfo.Range("R_FieldLockAnswer").value = True
            Call LockRequester
            BusinessInfo.Range("R_FieldLock").value = "Yes"
            Call ProtectWorkSheet(BusinessInfo, True)
            
        Else
            'BusinessInfo.Range("R_FieldLock").value = "No"
            BusinessInfo.Range("ddldistribution").value = "No"
           
        End If
        
        BusinessInfo.Activate
        BusinessInfo.Range("FormatType").Select
    
    Else
        BusinessInfo.Range("R_FieldLock").value = "No"
        BusinessInfo.Range("ddldistribution").value = "No"
    End If
         
  Call LockRequester

Worksheets.Application.EnableEvents = True
Workbooks.Application.ScreenUpdating = True

Exit Sub
Err:

'MsgBox "distribution: " & Err.Description
Worksheets.Application.EnableEvents = True
Workbooks.Application.ScreenUpdating = True
End Sub


Public Sub ClassDeclarationA()
On Error GoTo Err
Application.ScreenUpdating = False
Workbooks.Application.EnableEvents = False

Call ProtectWorkBook(False)
Call ProtectWorkSheet(QueryLists, False)
Call ProtectWorkSheet(QueryExemptions, False)

If BusinessInfo.Range("ClassA").value = True Then
    QueryLists.Visible = xlSheetVisible
    QueryExemptions.Visible = xlSheetVisible
Else
    If DataSummary.Range("ClassA_HasEntries") > 0 Then
        If MsgBox("Are you sure? This will delete all added Class A Entries.", vbOKCancel) = vbOK Then
            'Clear Query List
            QueryLists.Range("TableQueryLists").ClearContents
            
            'QueryExemptions.Range("$A5:$B500").ClearContents
            QueryExemptions.Range("TableQueryListExemptions").ClearContents
            
            QueryLists.Visible = xlSheetHidden
            QueryExemptions.Visible = xlSheetHidden
            
            BusinessInfo.Range("ddlClassA").value = "No"
        Else
            BusinessInfo.Range("ddlClassA").value = "Yes"
        End If
     Else
            QueryLists.Visible = xlSheetHidden
            QueryExemptions.Visible = xlSheetHidden
     End If
     
End If

Call ProtectWorkSheet(QueryLists, True)
Call ProtectWorkSheet(QueryExemptions, True)
Call ProtectWorkBook(True)
Workbooks.Application.EnableEvents = True
Application.ScreenUpdating = True

BusinessInfo.Activate
BusinessInfo.Range("FormatType").Select

Exit Sub
Err:

'MsgBox "ClassDelarationA: " & Err.Description
Application.ScreenUpdating = True
Workbooks.Application.EnableEvents = True
Call ProtectWorkSheet(QueryLists, True)
Call ProtectWorkSheet(QueryExemptions, True)
Call ProtectWorkBook(True)

End Sub

Public Sub ClassDeclarationB()
On Error GoTo Err
Application.ScreenUpdating = False
Workbooks.Application.EnableEvents = False

Call ProtectWorkBook(False)
Call ProtectWorkSheet(MaterialClasses, False)

If BusinessInfo.Range("ClassB").value = True Then
    MaterialClasses.Visible = xlSheetVisible
Else
    If MaterialClasses.Range("MC_TotalEntries").value > 0 Then
        If MsgBox("Are you sure? This will delete all added Class B Entries.", vbOKCancel) = vbOK Then
            MaterialClasses.Range("$A5:$A500").ClearContents
            MaterialClasses.Range("$D5:$E500").ClearContents
            MaterialClasses.Visible = xlSheetHidden
        
            BusinessInfo.Range("ddlClassB").value = "No"
        Else
            BusinessInfo.Range("ddlClassB").value = "Yes"
        End If
    Else
        MaterialClasses.Visible = xlSheetHidden
    End If
End If

Call ProtectWorkSheet(MaterialClasses, True)
Workbooks.Application.EnableEvents = True
Call ProtectWorkBook(True)

Application.ScreenUpdating = True

BusinessInfo.Activate
BusinessInfo.Range("FormatType").Select
Exit Sub
Err:
Call ProtectWorkSheet(MaterialClasses, True)
Workbooks.Application.EnableEvents = True
Call ProtectWorkBook(True)

'MsgBox "ClassDeclarationB: " & Err.Description
Workbooks.Application.EnableEvents = True
Application.ScreenUpdating = True

End Sub

Public Sub ClassDeclarationC()
On Error GoTo Err


Application.ScreenUpdating = False
Workbooks.Application.EnableEvents = False
 
Call ProtectWorkBook(False)
Call ProtectWorkSheet(SubstanceCategoryLists, False)
Call ProtectWorkSheet(SubstanceCategoryExemptions, False)


If BusinessInfo.Range("ClassC").value = False Then
    If DataSummary.Range("ClassC_HasEntries") = 1 Then
        If MsgBox("Are you sure? This will delete all added Class C Entries.", vbOKCancel) = vbOK Then
            'SubstanceCategoryLists.Range("$B5:$C500").ClearContents
            'SubstanceCategoryLists.Range("$E5:$I500").ClearContents
            SubstanceCategoryLists.Range("TableSubstanceCategoryList").ClearContents
            
            SubstanceCategoryExemptions.Range("$A5:$C500").ClearContents
    
            SubstanceCategoryLists.Visible = xlSheetHidden
            SubstanceCategoryExemptions.Visible = xlSheetHidden
            BusinessInfo.Range("ddlClassC").value = "No"
        Else
            BusinessInfo.Range("ddlClassC").value = "Yes"
        End If
    Else
        SubstanceCategoryLists.Visible = xlSheetHidden
        SubstanceCategoryExemptions.Visible = xlSheetHidden
    End If
Else

        SubstanceCategoryLists.Visible = xlSheetVisible
        SubstanceCategoryExemptions.Visible = xlSheetVisible
    
End If


Call ProtectWorkSheet(SubstanceCategoryLists, True)
Call ProtectWorkSheet(SubstanceCategoryExemptions, True)
Call ProtectWorkBook(True)

Workbooks.Application.EnableEvents = True
Workbooks.Application.ScreenUpdating = True
BusinessInfo.Activate
BusinessInfo.Range("FormatType").Select


Exit Sub
Err:
Call ProtectWorkSheet(SubstanceCategoryLists, True)
Call ProtectWorkSheet(SubstanceCategoryExemptions, True)
Call ProtectWorkBook(True)

'MsgBox "ClassDeclarationC: " & Err.Description
Workbooks.Application.EnableEvents = True
Workbooks.Application.ScreenUpdating = True
End Sub

Public Sub ClassDeclarationD()
On Error GoTo Err


Workbooks.Application.EnableEvents = False
Application.ScreenUpdating = False

Call ProtectWorkBook(False)
Call ProtectWorkSheet(SubProducts, False)
Call ProtectWorkSheet(HomogeneousMaterials, False)
Call ProtectWorkSheet(Substances, False)


If BusinessInfo.Range("ClassD").value = False Then

If DataSummary.Range("ClassD_HasEntries") = 1 Then
    If MsgBox("Are you sure? This will delete all added Class D Entries.", vbOKCancel) = vbOK Then
        
        SubProducts.Range("TableSubProducts").ClearContents
        HomogeneousMaterials.Range("TableHomogeneousMaterials").ClearContents
        Substances.Range("$A5:$J5000").ClearContents

        SubProducts.Visible = xlSheetHidden
        HomogeneousMaterials.Visible = xlSheetHidden
        Substances.Visible = xlSheetHidden
        BusinessInfo.Range("ddlClassD").value = "No"
    Else
        BusinessInfo.Range("ddlClassD").value = "Yes"
    End If
Else
        SubProducts.Visible = xlSheetHidden
        HomogeneousMaterials.Visible = xlSheetHidden
        Substances.Visible = xlSheetHidden
End If
    
Else
        SubProducts.Visible = xlSheetVisible
        HomogeneousMaterials.Visible = xlSheetVisible
        Substances.Visible = xlSheetVisible

End If

Call ProtectWorkSheet(SubProducts, True)
Call ProtectWorkSheet(HomogeneousMaterials, True)
Call ProtectWorkSheet(Substances, True)
Call ProtectWorkBook(True)

BusinessInfo.Activate
BusinessInfo.Range("FormatType").Select
Application.ScreenUpdating = True
Workbooks.Application.EnableEvents = True
 

Exit Sub
Err:

Call ProtectWorkSheet(SubProducts, True)
Call ProtectWorkSheet(HomogeneousMaterials, True)
Call ProtectWorkSheet(Substances, True)
Call ProtectWorkBook(True)


'MsgBox "ClassDeclarationD: " & Err.Description
Application.ScreenUpdating = True
Workbooks.Application.EnableEvents = True
End Sub


Public Function ExportMap(ByVal xmlDoc As MSXML2.DOMDocument, ByVal queryString As String, _
                          ByVal parentNode As String, ByVal attributes As String) As MSXML2.DOMDocument
                          
On Error GoTo Err

Dim node As MSXML2.IXMLDOMNode
Dim node2 As MSXML2.IXMLDOMNode

Dim childN As MSXML2.IXMLDOMNode
Dim nodeList1 As MSXML2.IXMLDOMNodeList
Dim nodeList2 As MSXML2.IXMLDOMNodeList
Dim FileName, attr1, attr2  As String

Set nodeList1 = xmlDoc.SelectNodes(queryString)
If nodeList1.Length = 0 Then Exit Function

Dim attrs  As Variant
Dim attr As Variant
attrs = Split(attributes, ",")

For Each node In nodeList1
   If node.HasChildNodes Then
    Set nodeList2 = node.ChildNodes
    
       For Each childN In nodeList2
        
        If childN.nodeName = parentNode Then
            
           For Each attr In attrs
           
                 Set node2 = childN.attributes.getNamedItem(attr)
                 
                 If node2 Is Nothing Then
                     Call childN.parentNode.RemoveChild(childN)
                 Else
                     attr1 = childN.attributes.getNamedItem(attr).Text
                     If attr1 = "" Then
                         Call childN.parentNode.RemoveChild(childN)
                     End If
                 End If
            
            Next attr
             
         End If
       
       Next childN
   Else
    
   End If
Next node

Set ExportMap = xmlDoc

Exit Function
Err:

'MsgBox "ExportMap: " & Err.Description
''''MsgBox Err.Description
End Function
 
Public Sub ResizeTableRow()
Call ResizeTableRows("Business Info", "TableSupplierContacts", "$F$24:$H$32")
Call ResizeTableRows("Products", "TableProducts", "$A$5:$I$500")
Call ResizeTableRows("Material Classes", "TableMaterialClasses", "$A$4:$G$500")
Call ResizeTableRows("Substance Category Lists", "TableSubstanceCategoryList", "$A$4:$K$500")
Call ResizeTableRows("Substance Category Exemptions", "TableSubstanceCategoryListExemptions", "$A$4:$E$500")
Call ResizeTableRows("Query Lists", "TableQueryLists", "$A$5:$C$500")
Call ResizeTableRows("Query Exemptions", "TableQueryListExemptions", "$A$5:$D$500")
Call ResizeTableRows("Manufacturing Info", "TableManufacturingTerminals", "$A$19:$F$500")
Call ResizeTableRows("Sub Products", "TableSubProducts", "$A$4:$E$500")
Call ResizeTableRows("Homogeneous Materials", "TableHomogeneousMaterials", "$A$4:$F$2000")
Call ResizeTableRows("Substances", "TableSubstances", "$A$4:$O$5000")
Call ResizeTableRows("File Reference", "TableFileReferences", "$A$4:$E$500")
End Sub


Public Sub SetLookUpValidation()
'BusinessInfo
Call CreateLookUpValidation(BusinessInfo, "=LanguageList", "Language", True)
Call CreateLookUpValidation(BusinessInfo, "Yes,No", "ddldigitalSignature", True)
Call CreateLookUpValidation(BusinessInfo, "Yes,No", "ddldistribution", True)
Call CreateLookUpValidation(BusinessInfo, "Yes,No", "ddlClassA", True)
Call CreateLookUpValidation(BusinessInfo, "Yes,No", "ddlClassB", True)
Call CreateLookUpValidation(BusinessInfo, "Yes,No", "ddlClassC", True)
Call CreateLookUpValidation(BusinessInfo, "Yes,No", "ddlClassD", True)
Call CreateLookUpValidation(BusinessInfo, "Yes,No", "ddlManufacturingInfo", True)
Call CreateLookUpValidation(BusinessInfo, "Yes,No", "R_FieldLock", True)
Call CreateLookUpValidation(BusinessInfo, "Yes,No", "S_FieldLock", True)
Call CreateLookUpValidation(BusinessInfo, "Standard,Custom", "LegalDeclarationType", True)
Call CreateLookUpValidation(BusinessInfo, "=TemplateFormat", "FormatType", True)
Call CreateLookUpValidation(Settings, "Concentration,Mass", "ddlConcentration", True)

'Products
Call CreateLookUpValidation(Products, "=ProductUnits", "$C6:$C500", True)
Call CreateLookUpValidation(Products, "=MassUnits", "$I6:$I500", True)

'Query Lists
Call CreateLookUpValidation(QueryLists, "=UNIQUE_QUERY_LIST", "$A6:$A500", True)
Call CreateLookUpValidations(QueryLists, "=QueryListStatementList", "A", 6, 500, "B", True)
Call CreateLookUpValidation(QueryLists, "TRUE,FALSE", "$C6:$C500", True)

'QueryExemptions
''''Call CreateLookUpValidation(QueryExemptions, "=UNIQUE_EXEMPTION_LIST", "$A6:$A500", True)
Call CreateLookUpValidation(QueryExemptions, "=S_Exemption", "$A6:$A500", True)

'Manufacturing
Call CreateLookUpValidation(Manufacturing, "=TerminalBaseAlloy", "$D20:$D500", True)
Call CreateLookUpValidation(Manufacturing, "=Shape", "$A20:$A500", True)
Call CreateLookUpValidation(Manufacturing, "=SolderTermination", "$E20:$E500", True)
Call CreateLookUpValidation(Manufacturing, "=Plating", "$F20:$F500", True)

'MaterialClasses
Call CreateLookUpValidation(MaterialClasses, "=MaterialClassId", "$A5:$A500", True)
Call CreateLookUpValidation(MaterialClasses, "=MassUnits", "$E5:$E500", True)

'SubstanceCategoryLists
Call CreateLookUpValidation(SubstanceCategoryLists, "=UNIQUE_SUBSTANCE_LIST_ID", "$B5:$B500", True)
Call CreateLookUpValidation(SubstanceCategoryLists, "=SCL_CategoryName", "$C5:$C500", True)
Call CreateLookUpValidation(SubstanceCategoryLists, "true,false", "$E5:$E500", True)
Call CreateLookUpValidation(SubstanceCategoryLists, "=MassUnits", "$G5:$G500", True)

'SubstanceCategoryExemptions
Call CreateLookUpValidation(SubstanceCategoryExemptions, "=CategoryIndex", "$A5:$A500", True)

'SubProducts
Call CreateLookUpValidation(SubProducts, "=MassUnits", "$E5:$E500", True)

'HomogeneousMaterials
Call CreateLookUpValidation(HomogeneousMaterials, "=UNIQUE_SUPPRODUCT", "$A5:$A2000", True)
Call CreateLookUpValidation(HomogeneousMaterials, "=MaterialGroups", "$B5:$B2000", True)
Call CreateLookUpValidation(HomogeneousMaterials, "=MassUnits", "$E5:$E2000", True)

'Substances
Call CreateLookUpValidation(Substances, "=S_MaterialName", "$A5:$A5000", False)
Call CreateLookUpValidation(Substances, "=UNIQUE_LEVEL_GROUP_NAME", "$B5:$B5000", False)
Call CreateLookUpValidations(Substances, "=S_SubstanceCategoryGroupName", "B", 5, 5000, "C", False)
Call CreateLookUpValidations(Substances, "=S_SubstanceName", "C", 5, 5000, "D", False)
Call CreateLookUpValidation(Substances, "=MassUnits", "$G5:$G5000", True)
Call CreateLookUpValidation(Substances, "=S_Exemption", "$I5:$I5000", False)



End Sub

Public Sub SetDataValidation()

Call SetLookUpValidation

''''Call SetGlobalDateFormat
Call setFormula(BusinessInfo, "=IF(LegalDeclarationType=""Standard"",StandardDeclaration,"""")", "LegalDeclaration")

BusinessInfo.Activate
BusinessInfo.Range("LegalDeclaration").Select
Selection.Locked = True
 

Call setFormula(BusinessInfo, "=IF(LOWER(ddlClassA)=""no"",FALSE,TRUE)", "ClassA")
Call setFormula(BusinessInfo, "=IF(LOWER(ddlClassB)=""no"",FALSE,TRUE)", "ClassB")
Call setFormula(BusinessInfo, "=IF(LOWER(ddlClassC)=""no"",FALSE,TRUE)", "ClassC")
Call setFormula(BusinessInfo, "=IF(LOWER(ddlClassD)=""no"",FALSE,TRUE)", "ClassD")
Call setFormula(BusinessInfo, "=IF(LOWER(ddldistribution)=""no"",FALSE,TRUE)", "FormType")
Call setFormula(BusinessInfo, "=IF(LOWER(ddlManufacturingInfo)=""no"",FALSE,TRUE)", "IncludeManufacturing")

Call setFormula(BusinessInfo, "=IF(LOWER(R_FieldLock)=""no"",FALSE,TRUE)", "R_FieldLockAnswer")
Call setFormula(BusinessInfo, "=IF(LOWER(S_FieldLock)=""no"",FALSE,TRUE)", "responseFieldLock")

Call SetFormat(BusinessInfo, "@", "RequestDate")
Call SetFormat(BusinessInfo, "@", "RespondByDate")
Call SetFormat(BusinessInfo, "@", "ResponseDate")
 
Call setFormula(BusinessInfo, "=IF(LOWER(S_FieldLock)=""no"",FALSE,TRUE)", "responseFieldLock")


'Call setFormula(BusinessInfo, "=IF(VendorId<>"""",""DUNS"","""")", "VendorAuthority")


'Products
''''Call CreateLookUpValidation(Products, "=ProductUnits", "$C6:$C500", True)
''''Call CreateLookUpValidation(Products, "=MassUnits", "$I6:$I500", True)
Call SetFormat(Products, "@", "$A6:$C500")
Call SetFormat(Products, "@", "$E6:$F500")
Call SetFormat(Products, "@", "$D6:$D500")
Call SetValidateDecimal(Products, "$H6:$H500", 0.00000000001)
Call SetFormat(Products, "@", "$G6:$G500")
 

Call setFormula(Products, "=IFERROR(IF($F6<>"""",IF(COUNTIF($F$6:F6,F6)>1, 1,0),0),0)", "$L6:$L500")

'Query Lists
''''Call CreateLookUpValidation(QueryLists, "=UNIQUE_QUERY_LIST", "$A6:$A500", True)
''''Call CreateLookUpValidations(QueryLists, "=QueryListStatementList", "A", 6, 500, "B", True)
''''Call CreateLookUpValidation(QueryLists, "TRUE,FALSE", "$C6:$C500", True)

Call setFormula(QueryLists, "=IF($A6<>"""",""IPC"","""")", "$D6:$D500")
Call setFormula(QueryLists, "=IFERROR(IF($J6<>"""",IF(COUNTIF($J$6:J6,J6)>1, 1,0),0),0)", "$K6:$K500")


'Query Exemptions
''''Call CreateLookUpValidation(QueryExemptions, "=UNIQUE_EXEMPTION_LIST", "$A6:$A500", True)
''''Call CreateLookUpValidation(QueryExemptions, "=S_Exemption", "$A6:$A500", True)
Call setFormula(QueryExemptions, "=IFERROR(IF($A6<>"""",INDEX(ExemptionIds,MATCH($A6,TableRoHSExemptions[UniqueId],0),1),""""),"""")", "$B6:$B500")
Call setFormula(QueryExemptions, "=QE_ExemptionDes", "$C6:$C500")

Call setFormula(QueryExemptions, "=IF($A6<>"""",""IPC"","""")", "$D6:$D500")
Call setFormula(QueryExemptions, "=IFERROR(IF($L6<>"""",IF(COUNTIF($L$6:L6,L6)>1, 1,0),0),0)", "$M6:$M500")

'Manufacturing
''''Call CreateLookUpValidation(Manufacturing, "=TerminalBaseAlloy", "$D20:$D500", True)
''''Call CreateLookUpValidation(Manufacturing, "=Shape", "$A20:$A500", True)
''''Call CreateLookUpValidation(Manufacturing, "=SolderTermination", "$E20:$E500", True)
''''Call CreateLookUpValidation(Manufacturing, "=Plating", "$F20:$F500", True)

Call SetFormat(Manufacturing, "General", "$B20:$C500")
Call setFormula(Manufacturing, "=IFERROR(IF($J20<>"""",IF(COUNTIF($J$20:J20,J20)>1, 1,0),0),0)", "$K20:$K500")


'Material Classes
''''Call CreateLookUpValidation(MaterialClasses, "=MaterialClassId", "$A5:$A500", True)

Call setFormula(MaterialClasses, "=MC_Category", "$B5:$B500")
Call setFormula(MaterialClasses, "=MC_MaterialClassDes", "$C5:$C500")

Call SetValidateDecimal(MaterialClasses, "$D5:$D500", 0)
''''Call CreateLookUpValidation(MaterialClasses, "=MassUnits", "$E5:$E500", True)
Call setFormula(MaterialClasses, "=MC_MaterialClassName", "$F5:$F500")
Call SetFormat(MaterialClasses, "General", "$D5:$D500")
Call setFormula(MaterialClasses, "=MC_MaterialID", "$G5:$G500")
Call setFormula(MaterialClasses, "=IFERROR(IF($A5<>"""",IF(COUNTIF($A$5:A5,A5)>1, 1,0),0),0)", "$I5:$I500")
 
'Substance Category Lists
''''Call CreateLookUpValidation(SubstanceCategoryLists, "=UNIQUE_SUBSTANCE_LIST_ID", "$B5:$B500", True)
''''Call CreateLookUpValidation(SubstanceCategoryLists, "=SCL_CategoryName", "$C5:$C500", True)
''''Call CreateLookUpValidation(SubstanceCategoryLists, "true,false", "$E5:$E500", True)
''''Call CreateLookUpValidation(SubstanceCategoryLists, "=MassUnits", "$G5:$G500", True)
Call setFormula(SubstanceCategoryLists, "=IF($B5<>"""",ROW()-4,"""")", "$A5:$A500")
Call SetValidateDecimal(SubstanceCategoryLists, "$F5:$F500", 0)
Call SetFormat(SubstanceCategoryLists, "General", "$F5:$F500")
Call SetFormat(SubstanceCategoryLists, "General", "$H5:$H500")
Call SetValidateDecimal(SubstanceCategoryLists, "$H5:$H500", 0)
Call SetFormat(SubstanceCategoryLists, "@", "$I5:$I500")

Call setFormula(SubstanceCategoryLists, "=IF([@Level]<>"""",INDEX(SubstanceCategoryAuthorityColumn,MATCH([@Level],TableSubstanceCategoriesView[UniqueId],0),1),"""")", "$J5:$J500")
Call setFormula(SubstanceCategoryLists, "=IFERROR(IF([@Level]<>"""",IF(INDEX(SubstanceCategoryApplicationColumn,MATCH([@Level]&[@[Category Name(*)]],TableSubstanceCategoriesView[UniqueName],0),1)=0,"""",INDEX(SubstanceCategoryApplicationColumn,MATCH([@Level]&[@[Category Name(*)]],TableSubstanceCategoriesView[UniqueName],0),1)),""""),"""")", "$K5:$K500")
Call setFormula(SubstanceCategoryLists, "=IFERROR(IF($M5<>"""",IF(COUNTIF($M$5:M5,M5)>1, 1,0),0),0)", "$N5:$N500")

'Substance Category Exemptions
''''Call CreateLookUpValidation(SubstanceCategoryExemptions, "=CategoryIndex", "$A5:$A500", True)
''''Call CreateLookUpValidation(SubstanceCategoryExemptions, "=UNIQUE_EXEMPTION_LIST", "$B5:$B500", True)
''''Call CreateLookUpValidation(SubstanceCategoryExemptions, "=SCE_ExemptionID", "$C5:$C500", True)
Call CreateLookUpValidation(SubstanceCategoryExemptions, "=S_Exemption", "$B5:$B500", True)
Call setFormula(SubstanceCategoryExemptions, "=IFERROR(IF($B5<>"""",INDEX(ExemptionIds,MATCH($B5,TableRoHSExemptions[UniqueId],0),1),""""),"""")", "$C5:$C500")
Call setFormula(SubstanceCategoryExemptions, "=SCE_ExemptionDes", "$D5:$D500")

Call setFormula(SubstanceCategoryExemptions, "=IF($B5<>"""",""IPC"","""")", "$E5:$E500")
Call setFormula(SubstanceCategoryExemptions, "=IFERROR(IF($M5<>"""",IF(COUNTIF($M$5:M5,M5)>1, 1,0),0),0)", "$N5:$N500")

'Sub Products
''''Call CreateLookUpValidation(SubProducts, "=MassUnits", "$E5:$E500", True)
Call SetValidateWholeNumber(SubProducts, "$C5:$C500", 1)
Call SetValidateDecimal(SubProducts, "$D5:$D500", 0.00000000001)
Call SetFormat(SubProducts, "@", "$A5:$B500")

Call setFormula(SubProducts, "=IFERROR(IF($H5<>"""",IF(COUNTIF($H$5:H5,H5)>1, 1,0),0),0)", "$I5:$I500")

'Homogeneous Materials
''''Call CreateLookUpValidation(HomogeneousMaterials, "=UNIQUE_SUPPRODUCT", "$A5:$A2000", True)
''''Call CreateLookUpValidation(HomogeneousMaterials, "=MaterialGroups", "$B5:$B2000", True)
''''Call CreateLookUpValidation(HomogeneousMaterials, "=MassUnits", "$E5:$E2000", True)
Call SetValidateDecimal(HomogeneousMaterials, "$D5:$D2000", 0)

Call SetFormat(HomogeneousMaterials, "General", "$D5:$D2000")
Call SetFormat(HomogeneousMaterials, "@", "$A5:$B2000")
Call setFormula(HomogeneousMaterials, "=IFERROR(IF(I5<>"""",IF(COUNTIF($I$5:I5,I5)>1, 1,0),0),0)", "$J5:$J2000")
Call setFormula(HomogeneousMaterials, "=IFERROR(IF([[Material Group Name(*)]]<>"""",INDEX(TableMaterialGroup,MATCH([[Material Group Name(*)]],TableMaterialGroup[Name],0),2),""""),"""")", "$F5:$F2000")

Call SetToolTip(HomogeneousMaterials, "$A5:$A2000", "This column is optional. Please leave it blank if there is no Sub Product.")


'Substances
''''Call CreateLookUpValidation(Substances, "=S_MaterialName", "$A5:$A5000", False)
''''Call CreateLookUpValidation(Substances, "=UNIQUE_LEVEL_GROUP_NAME", "$B5:$B5000", False)
''''Call CreateLookUpValidations(Substances, "=S_SubstanceCategoryGroupName", "B", 5, 5000, "C", False)
''''Call CreateLookUpValidations(Substances, "=S_SubstanceName", "C", 5, 5000, "D", False)
''''Call CreateLookUpValidation(Substances, "=MassUnits", "$G5:$G5000", True)
''''Call CreateLookUpValidation(Substances, "=S_Exemption", "$I5:$I5000", False)
Call SetFormat(Substances, "@", "$A5:$E5000")
Call setFormula(Substances, "=S_ExemptionDes", "$J5:$J5000")


Call SetValidateDecimal(Substances, "$F5:$F5000", 0)
Call SetValidateDecimal(Substances, "$H5:$H5000", 0)

Call setFormula(Substances, "=IFERROR(INDEX(HomoAuhorityColumn,MATCH([[Level(*)]]&[[Substance Category]],TableHomogeneousSubstancesView[UniqueName],0),1),"""")", "$K5:$K5000")
Call setFormula(Substances, "=IF($E5<>"""",""CAS"","""")", "$L5:$L5000")
Call setFormula(Substances, "=IFERROR(IF(INDEX(HomoApplicationColumn,MATCH([[Level(*)]]&[[Substance Category]],TableHomogeneousSubstancesView[UniqueName],0),1)=0,"""",INDEX(HomoApplicationColumn,MATCH(B5&C5,TableHomogeneousSubstancesView[UniqueName],0),1)),"""")", "$M5:$M5000")
Call setFormula(Substances, "=IFERROR(IF($I5<>"""",INDEX(ExemptionIds,MATCH($I5,TableRoHSExemptions[UniqueId],0),1),""""),"""")", "$N5:$N5000")
Call setFormula(Substances, "=IFERROR(IF($I5<>"""",INDEX(ExemptionAuthority,MATCH($I5,TableRoHSExemptions[UniqueId],0),1),""""),"""")", "$O5:$O5000")
Call setFormula(Substances, "=IFERROR(IF(AC5<>"""",IF(COUNTIF($AC$5:AC5,AC5)>1, 1,0),0),0)", "$AD5:$AD5000")


If LCase(Settings.Range("ddlConcentration").value) = "concentration" Then
    Substances.Range("F5:F5000").Locked = True
    Substances.Range("H5:H5000").Locked = False
    Call setFormula(Substances, "=IFERROR(((INDEX('Homogeneous Materials'!Y$5:Z$2000,MATCH(A5,'Homogeneous Materials'!Y$5:Y$2000,0),2)/100)*AH5) ,"""")", "$F5:$F5000")
    Call SetToolTip(Substances, "F5:F5000", "This column is disabled.  The value is automatically computed from the Conc(%).  To enable, change the Substance Concentration Unit attribute to Mass in the Settings tab")
Else
    Substances.Range("F5:F5000").Locked = False
    Substances.Range("H5:H5000").Locked = True
    ''Call setFormula(Substances, "=IFERROR(IF(F5<>"""",(F5/AN5)*100,""""),"""")", "$H5:$H5000")
    Call setFormula(Substances, "=IFERROR(IF(F5<>"""",(( AN5)/AQ5)*100,""""),"""")", "$H5:$H5000")
    Call SetToolTip(Substances, "H5:H5000", "This column is disabled.  The value is automatically computed from the Mass.  To enable, change the Substance Concentration Unit attribute to Concentration in the Settings tab")
End If


'Lock Cells
MaterialClasses.Range("$A5:$I500").WrapText = True
Products.Range("TableProducts").Locked = False

MaterialClasses.Range("$A4:$G500").WrapText = True
MaterialClasses.Range("$A4:$A500").Locked = False
MaterialClasses.Range("$D4:$G500").Locked = False

SubstanceCategoryLists.Range("$A5:$K500").WrapText = True
SubstanceCategoryLists.Range("$B5:$C500").Locked = False
SubstanceCategoryLists.Range("$E5:$K500").Locked = False

SubstanceCategoryExemptions.Range("$A5:$D500").WrapText = True
SubstanceCategoryExemptions.Range("$A5:$C500").Locked = False


QueryLists.Range("$A6:$C500").WrapText = True
QueryLists.Range("$A6:$C500").Locked = False

QueryExemptions.Range("$A6:$C500").WrapText = True
QueryExemptions.Range("$A6:$B500").Locked = False

Manufacturing.Range("$A20:$F500").WrapText = True
Manufacturing.Range("$A20:$F500").Locked = False

SubProducts.Range("$A5:$E500").WrapText = True
SubProducts.Range("$A5:$E500").Locked = False

HomogeneousMaterials.Range("$A5:$D2000").WrapText = True
HomogeneousMaterials.Range("$A5:$D2000").Locked = False

If Substances.ProtectContents Then
    Call ProtectWorkSheet(Substances, False)
        Substances.Range("$A5:$J5000").WrapText = True
    Call ProtectWorkSheet(Substances, True)
Else
    Substances.Range("$A5:$J5000").WrapText = True
End If

'Substances.Range("$A5:$J5000").Locked = False


FileReferences.Range("$A5:$E500").WrapText = True
FileReferences.Range("$A5:$E500").Locked = False


'Application.CalculateFull
End Sub

Sub SetInclude(ByVal xmlDoc As MSXML2.DOMDocument)
Dim childN As MSXML2.IXMLDOMNode
Dim node As MSXML2.IXMLDOMNode
Dim node2 As MSXML2.IXMLDOMNode
Dim nodeList1 As IXMLDOMNodeList
Dim nodeList2 As MSXML2.IXMLDOMNodeList
Set nodeList1 = xmlDoc.SelectNodes("//ns1:MainDeclaration/ns1:Include/ns1:Sectional")
Dim attr As Variant
Dim attrs As Variant

Call ProtectWorkBook(False)

For Each node In nodeList1
   If node.HasChildNodes Then
    Set nodeList2 = node.ChildNodes
       
       For Each childN In nodeList2
        If childN.nodeName = "SubSectional" Then
            
            'Class A
            Set node2 = childN.attributes.getNamedItem("classA")
           
            If node2 Is Nothing Then
                    QueryLists.Visible = xlSheetHidden
                    QueryExemptions.Visible = xlSheetHidden
                    
                    BusinessInfo.Range("ddlClassA").value = "No"
            Else
            
                attr = childN.attributes.getNamedItem("classA").Text
                If LCase(attr) = "true" Then
                
                    QueryLists.Visible = xlSheetVisible
                     
                    'Dim QExemptions As IXMLDOMNodeList
                    'Set QExemptions = xmlDoc.SelectNodes("//ns1:MainDeclaration/ns1:ProductList/ns1:QueryList/ns1:Exemption")
                    
                    'If QExemptions.Length > 0 Then
                        QueryExemptions.Visible = xlSheetVisible
                    'Else
                        ''''QueryExemptions.Visible = xlSheetHidden
                    'End If
                    
                    BusinessInfo.Range("ddlClassA").value = "Yes"
                Else
                    QueryLists.Visible = xlSheetHidden
                    QueryExemptions.Visible = xlSheetHidden
                End If
            End If
            
            
            'Class B
            Set node2 = childN.attributes.getNamedItem("classB")
            If node2 Is Nothing Then
                MaterialClasses.Visible = xlSheetHidden
                
                BusinessInfo.Range("ddlClassB").value = "No"
            Else
                attr = childN.attributes.getNamedItem("classB").Text
                If LCase(attr) = "true" Then
                    MaterialClasses.Visible = xlSheetVisible
                Else
                    MaterialClasses.Visible = xlSheetHidden
                End If
                
                BusinessInfo.Range("ddlClassB").value = "Yes"
            End If
            
            Set node2 = childN.attributes.getNamedItem("classC")
            If node2 Is Nothing Then
                    SubstanceCategoryLists.Visible = xlSheetHidden
                    SubstanceCategoryExemptions.Visible = xlSheetHidden
                    
                    BusinessInfo.Range("ddlClassC").value = "No"
            Else
                attr = childN.attributes.getNamedItem("classC").Text
                If LCase(attr) = "true" Then
                    SubstanceCategoryLists.Visible = xlSheetVisible
                    
                    'Dim SCExemptions As IXMLDOMNodeList
                    'Set SCExemptions = xmlDoc.SelectNodes("//ns1:MainDeclaration/ns1:ProductList/ns1:SubstanceCategoryList/ns1:SubstanceExemption")

                    'If SCExemptions.Length > 0 Then
                        SubstanceCategoryExemptions.Visible = xlSheetVisible
                    'Else
                    '    SubstanceCategoryExemptions.Visible = xlSheetHidden
                    'End If
                    
                    BusinessInfo.Range("ddlClassC").value = "Yes"
                Else
                    SubstanceCategoryLists.Visible = xlSheetHidden
                    SubstanceCategoryExemptions.Visible = xlSheetHidden
                End If
            End If
            
            Set node2 = childN.attributes.getNamedItem("classD")
            If node2 Is Nothing Then
                    SubProducts.Visible = xlSheetHidden
                    HomogeneousMaterials.Visible = xlSheetHidden
                    Substances.Visible = xlSheetHidden
                    
                    BusinessInfo.Range("ddlClassD").value = "No"
            Else
                attr = childN.attributes.getNamedItem("classD").Text
                If LCase(attr) = "true" Then
                    SubProducts.Visible = xlSheetVisible
                    HomogeneousMaterials.Visible = xlSheetVisible
                    Substances.Visible = xlSheetVisible
                    
                    BusinessInfo.Range("ddlClassD").value = "Yes"
                Else
                    SubProducts.Visible = xlSheetHidden
                    HomogeneousMaterials.Visible = xlSheetHidden
                    Substances.Visible = xlSheetHidden
                End If
            End If
            
         End If
       Next childN
   End If
Next node

End Sub


Sub SetDistribution(ByVal xmlDoc As MSXML2.DOMDocument)
On Error Resume Next
Dim mode As String
mode = xmlDoc.SelectNodes("//ns1:MainDeclaration/ns1:BusinessInfo").Item(0).attributes.getNamedItem("mode").Text
 
If LCase(mode) = "true" Then
    BusinessInfo.Range("ddldistribution").value = "Yes"
Else
    BusinessInfo.Range("ddldistribution").value = "No"
End If
End Sub


Sub SetLegalStatement(ByVal xmlDoc As MSXML2.DOMDocument)
On Error Resume Next
Dim mode As String
Dim legalDef As String
mode = xmlDoc.SelectNodes("//ns1:MainDeclaration/ns1:BusinessInfo/ns1:Declaration").Item(0).attributes.getNamedItem("legalType").Text
legalDef = xmlDoc.SelectNodes("//ns1:MainDeclaration/ns1:BusinessInfo/ns1:Declaration").Item(0).attributes.getNamedItem("legalDef").Text

If LCase(mode) <> "standard" Then
    BusinessInfo.Activate
    BusinessInfo.Range("LegalDeclaration").Select
    Selection.Locked = False
    BusinessInfo.Range("LegalDeclaration").value = legalDef
Else
    Call setFormula(BusinessInfo, "=IF(LegalDeclarationType=""Standard"",StandardDeclaration,"""")", "LegalDeclaration")
    BusinessInfo.Activate
    BusinessInfo.Range("LegalDeclaration").Select
    Selection.Locked = True
End If
End Sub

 

Sub SetManufacturing(ByVal xmlDoc As MSXML2.DOMDocument)

'On Error Resume Next
On Error GoTo Err
Dim manufac As IXMLDOMNodeList
Set manufac = xmlDoc.SelectNodes("//ns1:MainDeclaration/ns1:ProductList/ns1:ManufacturingInfo")
 
If manufac.Length > 0 Then
    ''''BusinessInfo.Range("IncludeManufacturing").value = True
    Manufacturing.Visible = xlSheetVisible
    
    BusinessInfo.Range("ddlManufacturingInfo").value = "Yes"
Else
    ''''BusinessInfo.Range("IncludeManufacturing").value = False
    Manufacturing.Visible = xlSheetHidden
    BusinessInfo.Range("ddlManufacturingInfo").value = "No"
    
        'manufacturing
    Manufacturing.Activate
    Manufacturing.Range("MSL_Rating").Select: Selection.ClearContents
    Manufacturing.Range("Classification_Temp").Select:  Selection.ClearContents
    Manufacturing.Range("Max_Time").Select: Selection.ClearContents
    Manufacturing.Range("Component_Ramp_Up_Rate").Select: Selection.ClearContents
    Manufacturing.Range("Component_Ramp_Down_Rate").Select: Selection.ClearContents
    Manufacturing.Range("Package_Designator").Select: Selection.ClearContents
    Manufacturing.Range("Preheat_Min_Temp").Select: Selection.ClearContents
    Manufacturing.Range("Preheat_Max_Temp").Select: Selection.ClearContents
    Manufacturing.Range("Preheat_Duration").Select: Selection.ClearContents
    Manufacturing.Range("Component_Temp_Spike").Select: Selection.ClearContents
    Manufacturing.Range("Time_Above").Select: Selection.ClearContents
    Manufacturing.Range("Processing_Cycles").Select: Selection.ClearContents
    Manufacturing.Range("Max_Wave_Solder_Temp").Select: Selection.ClearContents
    Manufacturing.Range("Max_Total_Wave_Time").Select: Selection.ClearContents
    Manufacturing.Range("PSL_Wave").Select: Selection.ClearContents
    Manufacturing.Range("Wave_Additional_Info").Select: Selection.ClearContents
    Manufacturing.Range("PSL_Reflow").Select: Selection.ClearContents
    Manufacturing.Range("Reflow_Additional_Info").Select: Selection.ClearContents
    Manufacturing.Range("PSL_Comment").Select: Selection.ClearContents
    Manufacturing.Range("TableManufacturingTerminals").ClearContents
    
End If

Exit Sub
Err:

'MsgBox "SetManufacturing: " & Err.Description
End Sub


Public Sub ImportExcel()
On Error GoTo Err
    Dim filePath As String
    Dim xmlResult As String
    Dim url As String
    Dim hostName As String
    Dim success As Boolean
    
    
    If BusinessInfo.Range("FormatType").value = "" Then
        MsgBox "Please select Format to Import!"
        BusinessInfo.Activate
        BusinessInfo.Range("FormatType").Select
        Exit Sub
    End If
    
        
    filePath = OpenFile
    
    If filePath <> "" Then
        Application.ScreenUpdating = False
        Workbooks.Application.EnableEvents = False
        Call ProtectWorkBook(False)
        Call ProtectWorkSheets(False)

        hostName = DL_HostName.Range("HostName").value
        url = FindCellValue(DL_Templates, BusinessInfo.Range("FormatType").value, 1)
        
        If url <> "" Then
            'xmlDoc,
            Call Import(filePath, "MainDeclaration_Map", hostName & url)
        End If
        
        Call ProtectWorkSheets(True)
        Call ProtectWorkBook(True)
        Application.ScreenUpdating = True
        Workbooks.Application.EnableEvents = True
    End If
 
    BusinessInfo.Activate
    BusinessInfo.Range("FormatType").Select

Exit Sub
Err:
Application.ScreenUpdating = True
Workbooks.Application.EnableEvents = True
Call ProtectWorkSheets(True)
Call ProtectWorkBook(True)
'MsgBox "ImportExcel: " & Err.Description
End Sub

Public Sub ExportExcel()
Dim url As String
Dim hostName As String

url = FindCellValue(DL_Templates, BusinessInfo.Range("FormatType").value, 2)

If url = "" Then
    MsgBox "Export to " + BusinessInfo.Range("FormatType").value + " is not supported, please select another format."
Else

    If DataSummary.Range("HasError").value = True Then
        MsgBox "Unable to export the data. Please review the error listed on Products, Sub Products, Homogeneous Materials and Substances sheets.", , "Not Exportable"
        DataSummary.Activate
    Exit Sub
    End If
    
    If DataSummary.Range("SummaryErrors").value > 0 Then
       If MsgBox("There are errors were detected. Please refer to DataSummary Sheet. Click yes if you want to continue.", vbYesNo, "Exportable") = vbNo Then
            Exit Sub
        End If
    End If

    If BusinessInfo.Range("FormatType").value = "" Then
        MsgBox "Please select Format to Export!"
        BusinessInfo.Activate
        BusinessInfo.Range("FormatType").Select
        Exit Sub
    End If
                
    hostName = DL_HostName.Range("HostName").value
    
    Application.ScreenUpdating = False
    Call Export(hostName & url)
    Application.ScreenUpdating = True
            
End If
End Sub

'ByVal xmlDoc As MSXML2.DOMDocument,
Function Import(ByVal filePath As String, ByVal map As String, url As String)
On Error GoTo Err
    Dim result As String
    Dim xmlDoc As MSXML2.DOMDocument
    Call ProtectWorkBook(False)
    
    ''Application.StatusBar = "Please be patient..."
    
    result = ImportRequest(filePath, url)
    
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    If result <> "" Then
        ActiveWorkbook.XmlMaps(map).ImportXml result
       
        Set xmlDoc = New MSXML2.DOMDocument
        xmlDoc.setProperty "SelectionNamespaces", "xmlns:ns1='http://ws.anthesisgroup.com/rohs/v1.0'"
        
        
        xmlDoc.LoadXML result
        
        Call ProtectWorkSheet(BusinessInfo, False)
            BusinessInfo.Range("RequestDate").NumberFormat = "@"  '"MM/dd/yyyy"
            BusinessInfo.Range("RequestDate").value = format(Month(CDate(BusinessInfo.Range("RequestDate").value)), "00") & "/" & format(Day(CDate(BusinessInfo.Range("RequestDate").value)), "00") & "/" & format(Year(CDate(BusinessInfo.Range("RequestDate").value)), "00")
                        
            BusinessInfo.Range("RespondByDate").NumberFormat = "@"  '"MM/dd/yyyy"
            BusinessInfo.Range("RespondByDate").value = format(Month(CDate(BusinessInfo.Range("RespondByDate").value)), "00") & "/" & format(Day(CDate(BusinessInfo.Range("RespondByDate").value)), "00") & "/" & format(Year(CDate(BusinessInfo.Range("RespondByDate").value)), "00")
            
            BusinessInfo.Range("ResponseDate").NumberFormat = "@"  ' "MM/dd/yyyy"
            BusinessInfo.Range("ResponseDate").value = format(Month(CDate(BusinessInfo.Range("ResponseDate").value)), "00") & "/" & format(Day(CDate(BusinessInfo.Range("ResponseDate").value)), "00") & "/" & format(Year(CDate(BusinessInfo.Range("ResponseDate").value)), "00")
        
        Call ProtectWorkSheet(Products, False)
            Dim i As Integer
            i = 6
            Do Until Products.Cells(i, 6).value = ""
                Products.Range("D" & i).NumberFormat = "@"   ' "MM/dd/yyyy"
                Products.Range("D" & i).value = format(Month(CDate(Products.Range("D" & i).value)), "00") & "/" & format(Day(CDate(Products.Range("D" & i).value)), "00") & "/" & format(Year(CDate(Products.Range("D" & i).value)), "00")
            i = i + 1
            Loop
            
        
        'TODO
        'xmlDoc.Save ("c:\temp\import.xml")
        
        Call ResizeTableRow
        Call ClearTableFormatConditions
        Call SetConditionalFormatting
         Call SetDefaultConditionalFormatting
        Call UnloackCells
        
        
        Call SetDataValidation
        Call SetInclude(xmlDoc)
        Call SetLegalStatement(xmlDoc)
        Call SetDistribution(xmlDoc)
        Call SetManufacturing(xmlDoc)
        Call LockRequester
        Call LockResponse
        Call SetTableFont
        Call SetDateValidation
        
    End If
    
    ''Application.StatusBar = "Ready"
    Application.ScreenUpdating = True
    
    Call ProtectWorkBook(True)
    
Exit Function
Err:
MsgBox "Import: " & Err.Description
''Application.StatusBar = "Ready"
Call ProtectWorkBook(True)
End Function


Sub Export(url As String)
On Error GoTo Err

    Dim xmlDoc As MSXML2.DOMDocument
    Dim xmlCollection As Collection
    Set xmlDoc = New MSXML2.DOMDocument
    xmlDoc.setProperty "SelectionNamespaces", "xmlns:ns1='http://ws.anthesisgroup.com/rohs/v1.0'"
    Application.DisplayAlerts = False
    
    
    Dim cert()      As Byte
    Dim certPath    As String
    Dim certPass    As String
    
    If BusinessInfo.Range("digitalSignature").value = True Then

    certPath = Settings.Range("certPath").value
    certPass = InputBox("Password", "Enter Certificate Password") 'Settings.Range("certPassword").value
    
        If Trim(certPath) = "" Then
            MsgBox "Please enter certificate path in Settings sheet."
            Settings.Activate
        Exit Sub
        End If
        
        If Trim(certPass) = "" Then
            MsgBox "Certificate password is required. Please enter password and try it again."
        Exit Sub
        End If
        
        If Len(Dir(certPath)) = 0 Then
          MsgBox "Certificate File does not exist, Please verify the Path and try it again."
          Settings.Activate
        Exit Sub
        End If
    End If
    
    
    
    Dim xmlFilePath, attr1, attr2  As String
    xmlFilePath = GetTempPath() + "\MainDeclaration_Map.xml"
    
    Call ActiveWorkbook.XmlMaps("MainDeclaration_Map").Export(xmlFilePath, True)
    xmlDoc.Load (xmlFilePath)
    
    'Format Date to 'YYYY-MM-DD'
    Dim ResponseD As MSXML2.IXMLDOMNode
    Set ResponseD = xmlDoc.SelectSingleNode("//ns1:MainDeclaration/ns1:BusinessInfo/ns1:Response/@date")
    If Not ResponseD Is Nothing Then
        ResponseD.Text = format(ResponseD.Text, "yyyy-mm-dd")
    End If
    
    Dim RequestD As MSXML2.IXMLDOMNode
    Set RequestD = xmlDoc.SelectSingleNode("//ns1:MainDeclaration/ns1:BusinessInfo/ns1:Request/@date")
    If Not RequestD Is Nothing Then
        RequestD.Text = format(RequestD.Text, "yyyy-mm-dd")
    End If
    
    Dim RespondByDateD As MSXML2.IXMLDOMNode
    Set RespondByDateD = xmlDoc.SelectSingleNode("//ns1:MainDeclaration/ns1:BusinessInfo/ns1:Request/@respondByDate")
    If Not RespondByDateD Is Nothing Then
        RespondByDateD.Text = format(RespondByDateD.Text, "yyyy-mm-dd")
    End If
    
    Dim ProductsD As MSXML2.IXMLDOMNodeList
    Dim node As MSXML2.IXMLDOMNode
    Set ProductsD = xmlDoc.SelectNodes("//ns1:MainDeclaration/ns1:ProductList/ns1:Product/@effectiveDate")
    If Not ProductsD Is Nothing Then
    
       For Each node In ProductsD
        If Not node Is Nothing Then
            node.Text = format(node.Text, "yyyy-mm-dd")
        End If

       Next node
    End If
    
        
    Set xmlDoc = ExportMap(xmlDoc, "//ns1:MainDeclaration/ns1:BusinessInfo/ns1:Response", "ns1:Contact", "name")
    Set xmlDoc = ExportMap(xmlDoc, "//ns1:MainDeclaration/ns1:ProductList", "ns1:Product", "itemNumber")
      
    If BusinessInfo.Range("ClassA").value = True Then
            Set xmlDoc = ExportMap(xmlDoc, "//ns1:MainDeclaration/ns1:ProductList/ns1:QueryList", "ns1:Exemption", "description")
            Set xmlDoc = ExportMap(xmlDoc, "//ns1:MainDeclaration/ns1:ProductList/ns1:QueryList", "ns1:Query", "identity")
        Else
            Set xmlDoc = RemoveXmlNode(xmlDoc, "//ns1:MainDeclaration/ns1:ProductList", "ns1:QueryList")
    End If
    
    If BusinessInfo.Range("ClassB").value = True Then
            Set xmlDoc = ExportMap(xmlDoc, "//ns1:MainDeclaration/ns1:ProductList/ns1:MaterialClassList", "ns1:MaterialClass", "id")
        Else
            Set xmlDoc = RemoveXmlNode(xmlDoc, "//ns1:MainDeclaration/ns1:ProductList", "ns1:MaterialClassList")
    End If
    
    
    If BusinessInfo.Range("ClassC").value = True Then
            Set xmlDoc = ExportMap(xmlDoc, "//ns1:MainDeclaration/ns1:ProductList/ns1:SubstanceCategoryList", "ns1:SubstanceCategory", "categoryIndex")
            Set xmlDoc = ExportMap(xmlDoc, "//ns1:MainDeclaration/ns1:ProductList/ns1:SubstanceCategoryList", "ns1:SubstanceExemption", "categoryIndex")
            
        Else
            Set xmlDoc = RemoveXmlNode(xmlDoc, "//ns1:MainDeclaration/ns1:ProductList", "ns1:SubstanceCategoryList")
    End If
    
    If BusinessInfo.Range("ClassD").value = True Then
            Set xmlDoc = ExportMap(xmlDoc, "//ns1:MainDeclaration/ns1:SubProductList", "ns1:Product", "itemName")
            Set xmlDoc = ExportMap(xmlDoc, "//ns1:MainDeclaration/ns1:HomogeneousMaterialList", "ns1:HomogeneousMaterial", "name")
            Set xmlDoc = ExportMap(xmlDoc, "//ns1:MainDeclaration/ns1:HomogeneousMaterialList/ns1:SubstanceCategoryList/ns1:SubstanceCategory", "ns1:SubstanceCategoryListID", "identity")
            
            Set xmlDoc = ExportMap(xmlDoc, "//ns1:MainDeclaration/ns1:SubProductList", "ns1:Product", "itemName")
            Set xmlDoc = HasChildNode(xmlDoc, "//ns1:MainDeclaration/ns1:SubProductList", "//ns1:MainDeclaration", "ns1:SubProductList")
            
            
            Set xmlDoc = RemoveEmptyNodes(xmlDoc, "//ns1:MainDeclaration/ns1:HomogeneousMaterialList/ns1:SubstanceCategoryList", "ns1:SubstanceCategory", "ns1:Substance", "name")
            
            
            
            Set xmlDoc = RemoveEmptyNode(xmlDoc, "//ns1:MainDeclaration/ns1:HomogeneousMaterialList/ns1:SubstanceCategoryList/ns1:SubstanceCategory/ns1:Substance", "ns1:SubstanceExemption", "ns1:SubstanceExemption", "identity")
            Set xmlDoc = RemoveEmptyNode(xmlDoc, "//ns1:MainDeclaration/ns1:HomogeneousMaterialList/ns1:SubstanceCategoryList/ns1:SubstanceCategory/ns1:Substance", "ns1:SubstanceID", "ns1:SubstanceID", "identity")
             
        Else
            Set xmlDoc = RemoveXmlNode(xmlDoc, "//ns1:MainDeclaration", "ns1:SubProductList")
            Set xmlDoc = RemoveXmlNode(xmlDoc, "//ns1:MainDeclaration", "ns1:HomogeneousMaterialList")
    End If
    
    If BusinessInfo.Range("IncludeManufacturing").value = True Then
            Set xmlDoc = ExportMap(xmlDoc, "//ns1:MainDeclaration/ns1:ProductList/ns1:ManufacturingInfo/ns1:Package", "ns1:Terminal", "shape")
        Else
            Set xmlDoc = RemoveXmlNode(xmlDoc, "//ns1:MainDeclaration/ns1:ProductList", "ns1:ManufacturingInfo")
    End If
        
    Set xmlDoc = ExportMap(xmlDoc, "//ns1:MainDeclaration/ns1:BusinessInfo/ns1:EBusinessInfo", "ns1:Attachment", "name")
         
    If BusinessInfo.Range("digitalSignature").value = True Then
        cert = ReadCertificate(certPath)
    
        Set xmlDoc = CreateCertificateNode(xmlDoc, certPass, cert)
    End If
    
    'TODO
     'xmlDoc.Save ("c:\temp\Export.xml")
    
    Dim result As String
    result = ExportRequest(xmlDoc.xml, url)
    If HasError(result) = False Then
        If result <> "" Then
            xmlDoc.LoadXML result
            Call SaveDOMFile(xmlDoc)
        End If
    End If
Exit Sub
Err:
'MsgBox "Export: " & Err.Description
End Sub


Private Function CreateCertificateNode(objDom As MSXML2.DOMDocument, password As String, data() As Byte) As MSXML2.DOMDocument
    Dim node
      
    Set node = objDom.SelectSingleNode("//ns1:MainDeclaration")
   
    Dim oEle As IXMLDOMAttribute
    Dim oRoot As IXMLDOMElement
    Dim oNode As IXMLDOMNode
    
    Set oRoot = objDom.createNode(NODE_ELEMENT, "Certificate", schema)
    
    Set oNode = objDom.createAttribute("certPassword")
    oNode.Text = password
    oRoot.setAttributeNode oNode
    
    Set oNode = objDom.createAttribute("certData")
    oRoot.setAttributeNode oNode
    
    Set oEle = oNode
        
    oEle.DataType = "bin.base64"
    oEle.nodeTypedValue = data
    node.appendChild oRoot
 
  Set CreateCertificateNode = objDom
End Function


Function ImportDataLookUp(url As String, map As String) As Boolean
On Error GoTo Err
    Dim result As String
    result = GetResponse(url)
    
    If result <> "" Then
        Workbooks.Application.EnableEvents = False
        
         Dim xmlDoc As MSXML2.DOMDocument
         Set xmlDoc = New MSXML2.DOMDocument
        
         xmlDoc.LoadXML result
         
         'TODO
         'xmlDoc.Save ("c:\temp\a.xml")
          
        Call ActiveWorkbook.XmlMaps(map).ImportXml(result, True)
        
        Workbooks.Application.EnableEvents = True
        ImportDataLookUp = True
    Else
        ImportDataLookUp = False
    End If
Exit Function
Err:
'MsgBox "ImportDataLookUp: " & Err.Description
Workbooks.Application.EnableEvents = True
End Function

Sub RefreshDataLookUp()
On Error GoTo Err

If MsgBox("Are you sure? You want to update the Data Lookup.", vbYesNo) = vbYes Then
    Workbooks.Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim hostName As String
    hostName = DL_HostName.Range("HostName").value
    
    Call ProtectWorkSheet(DL_HostName, False)
    
    Dim url As String
    Dim C As Range
    Dim success As Boolean
    success = True
    
    For Each C In Worksheets("DL_Maps").Range("TableMaps[MapName]").Cells
        If C.value <> "" Then
            url = FindCellValue(DL_Maps, C.value, 1)
            If ImportDataLookUp(hostName & url, C.value) = False Then
                success = False
                Exit For
            End If
        End If
    Next
    
    Call ProtectWorkSheet(DL_HostName, True)
    
    Workbooks.Application.EnableEvents = True
    Application.ScreenUpdating = True

   If success = True Then
        MsgBox "Successfully Updated!"
    Else
        MsgBox refreshLookUp
   End If
End If
Exit Sub
Err:
Workbooks.Application.EnableEvents = True
Application.ScreenUpdating = True

'MsgBox "refreshDataLookUp: " & Err.Description
End Sub

 
Sub LockRequester()
Dim isLock As Boolean

If BusinessInfo.Range("R_FieldLockAnswer").value Or BusinessInfo.Range("formType").value Then
    isLock = True
Else
    isLock = False
End If

    ''''Call ProtectWorkSheet(BusinessInfo, False)
    BusinessInfo.Activate
    BusinessInfo.Range("requesterInfo").Select
    Selection.Locked = isLock
    
    If LCase(BusinessInfo.Range("ddldistribution").value) = LCase("yes") Then
        BusinessInfo.Range("R_FieldLock").Select
        Selection.Locked = True
    Else
        BusinessInfo.Range("R_FieldLock").Select
        Selection.Locked = False
    End If
    
        
    If isLock Then
         BusinessInfo.Range("requesterInfo").Interior.Color = RGB(242, 242, 242)
    Else
        BusinessInfo.Range("requesterInfo").Interior.ColorIndex = xlColorIndexNone
        BusinessInfo.Range("requesterInfo").Interior.ColorIndex = xlNone
    End If
    
    ''''Call ProtectWorkSheet(BusinessInfo, True)
End Sub


Sub LockResponse()
Dim isLock As Boolean

If BusinessInfo.Range("responseFieldLock").value = True Then
    isLock = True
Else
    isLock = False
End If

    ''''Call ProtectWorkSheet(BusinessInfo, False)
    BusinessInfo.Activate
    'BusinessInfo.Range("$E14:$E19").Select
    
    'Selection.Locked = isLock
    
    'BusinessInfo.Range("$D22:$F31").Select
    'Selection.Locked = isLock
    
    BusinessInfo.Range("supplierInfo").Select
    Selection.Locked = isLock
    
    If isLock Then
         BusinessInfo.Range("supplierInfo").Interior.Color = RGB(242, 242, 242)
         BusinessInfo.Range("TableSupplierContacts").Interior.Color = RGB(242, 242, 242)
    Else
        BusinessInfo.Range("supplierInfo").Interior.ColorIndex = xlColorIndexNone
        BusinessInfo.Range("supplierInfo").Interior.ColorIndex = xlNone
        
        BusinessInfo.Range("TableSupplierContacts").Interior.ColorIndex = xlColorIndexNone
        BusinessInfo.Range("TableSupplierContacts").Interior.ColorIndex = xlNone
    End If
    
    ''''Call ProtectWorkSheet(BusinessInfo, True)
End Sub


Function ImportRequest(ByVal sFileName, ByVal url As String) As String
On Error GoTo Err
    Dim myHTTP As Object
    Dim myXML As String
            
    Dim nFile           As Integer
    Dim baBuffer()      As Byte
    Dim sPostData       As String
        
    nFile = FreeFile
    Open sFileName For Binary Access Read As nFile
    If LOF(nFile) > 0 Then
        ReDim baBuffer(0 To LOF(nFile) - 1) As Byte
        Get nFile, , baBuffer
        sPostData = StrConv(baBuffer, vbUnicode)
    End If
    Close nFile
    
    If Revision.Range("StartMode").value = "staging" Or Revision.Range("StartMode").value = "dev" Then
        Set myHTTP = CreateObject("MSXML2.ServerXMLHTTP")
            myHTTP.setOption(2) = 13056
            myHTTP.setTimeouts 50000, 80000, 2000000, 2000000
    Else
        Set myHTTP = CreateObject("MSXML2.XMLHTTP.3.0")
    End If
    
    myHTTP.Open "POST", url, False
    myHTTP.setRequestHeader "Authorization", "Basic QUNTQWRtaW46U0RUMjAxNFBhJCR3MHJk"
    myHTTP.setRequestHeader "Content-Type", "application/octet-stream"
    myHTTP.setRequestHeader "User-Agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)"
    myHTTP.setRequestHeader "UserId", Revision.Range("UserId").value
    myHTTP.setRequestHeader "UserName", Application.UserName
    myHTTP.setRequestHeader "ExcelVersion", Application.Version
    myHTTP.setRequestHeader "TemplateVersion", BusinessInfo.Range("templateVersion").value
    myHTTP.setRequestHeader "FileName", Mid$(sFileName, InStrRev(sFileName, "\") + 1)
    myHTTP.send ToByteArray(sPostData)
    
    If HasError(myHTTP.responseText) Then
        ImportRequest = ""
        'MsgBox invalidImportExport, , "Import failed."
        Exit Function
    End If
    ImportRequest = myHTTP.responseText
Exit Function
Err:
ImportRequest = ""
MsgBox importError, , "Import failed."
End Function


Function ExportRequest(ByVal xml, ByVal url As String) As String
On Error GoTo Err
    Dim myHTTP As Object
    Dim myDom As Object
    Dim myXML As String
    
    Set myDom = CreateObject("MSXML2.DOMDocument")
    myDom.async = False
    myDom.LoadXML (xml)
        
    If Revision.Range("StartMode").value = "staging" Or Revision.Range("StartMode").value = "dev" Then
        Set myHTTP = CreateObject("MSXML2.ServerXMLHTTP")
            myHTTP.setOption(2) = 13056
            myHTTP.setTimeouts 50000, 80000, 2000000, 2000000
    Else
        Set myHTTP = CreateObject("MSXML2.XMLHTTP.3.0")
    End If
    
    myHTTP.Open "POST", url, False
    myHTTP.setRequestHeader "Authorization", "Basic QUNTQWRtaW46U0RUMjAxNFBhJCR3MHJk"
    myHTTP.setRequestHeader "Content-Type", "application/xml"
    myHTTP.setRequestHeader "User-Agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)"
    myHTTP.setRequestHeader "UserId", Revision.Range("UserId").value
    myHTTP.setRequestHeader "UserName", Application.UserName
    myHTTP.setRequestHeader "ExcelVersion", Application.Version
    myHTTP.setRequestHeader "TemplateVersion", BusinessInfo.Range("templateVersion").value
    myHTTP.send (myDom.xml)
    
    If myHTTP.responseText = "" Then
        ExportRequest = ""
        MsgBox invalidImportExport, , "Export failed."
        
        Exit Function
    End If
    
    If InStr(myHTTP.responseText, "UTF-8") > 0 Or InStr(myHTTP.responseText, "utf-8") > 0 Then
ExportRequest = "<?xml version=""1.0"" encoding=""UTF-8""?>" + myHTTP.responseText
             ExportRequest = myHTTP.responseText
Else
ExportRequest = "<?xml version=""1.0"" encoding=""UTF-8""?>" + myHTTP.responseText
End If
        
'ExportRequest = "<?xml version=""1.0"" encoding=""UTF-8""?>" + myHTTP.responseText
    
Exit Function
Err:
ExportRequest = ""
MsgBox exportError, , "Export failed."
End Function


Function GetResponse(ByVal url As String) As String
On Error GoTo Err
    Dim myHTTP As Object
    Dim myXML As String
    
    If Revision.Range("StartMode").value = "staging" Or Revision.Range("StartMode").value = "dev" Then
        Set myHTTP = CreateObject("MSXML2.ServerXMLHTTP")
            myHTTP.setTimeouts 50000, 80000, 2000000, 2000000
            myHTTP.setOption(2) = 13056
    Else
        Set myHTTP = CreateObject("MSXML2.XMLHTTP.3.0")
    End If
    
    myHTTP.Open "GET", url, False
    myHTTP.setRequestHeader "Authorization", "Basic QUNTQWRtaW46U0RUMjAxNFBhJCR3MHJk"
    myHTTP.setRequestHeader "Content-Type", "application/xml"
    myHTTP.setRequestHeader "User-Agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)"
    myHTTP.setRequestHeader "UserId", Revision.Range("UserId").value
    myHTTP.setRequestHeader "UserName", Application.UserName
    myHTTP.setRequestHeader "ExcelVersion", Application.Version
    myHTTP.setRequestHeader "TemplateVersion", BusinessInfo.Range("templateVersion").value
    myHTTP.send ("")
    
    GetResponse = myHTTP.responseText
 
Exit Function
Err:
GetResponse = ""
MsgBox exportError
End Function
 
Public Function ViewXML()
On Error Resume Next
Dim xmlFilePath As String
Dim url As String
Dim htmlFilePath As String
Dim result As String
Dim oFile As Object
Dim fso As Object
Dim hostName As String
Dim tempPath As String

If DataSummary.Range("HasError").value = True Then
    MsgBox "Unable to preview the data. Please review the error listed on Products, Sub Products, Homogeneous Materials and Substances sheets.", , "Not Exportable"
    DataSummary.Activate
Exit Function
End If

If DataSummary.Range("SummaryErrors").value > 0 Then
   If MsgBox("Error found. Do you want to continue?", vbYesNo, "Exportable") = vbNo Then
        Exit Function
    End If
End If
    
hostName = DL_HostName.Range("XMLViewer").value
'https://localhost:4430/XMLViewer.aspx

tempPath = GetTempPath()

xmlFilePath = tempPath + "\Export.xml"
htmlFilePath = tempPath + "\XMLViewer.htm"
url = hostName + "?format=" + BusinessInfo.Range("FormatType").value
 
Dim xmlDoc As MSXML2.DOMDocument
Set xmlDoc = New MSXML2.DOMDocument
xmlDoc = GetXmlToExport(xmlDoc)
xmlDoc.Save (xmlFilePath)
result = ViewXMLRequest(xmlFilePath, url)

Set fso = CreateObject("Scripting.FileSystemObject")
Set oFile = fso.CreateTextFile(htmlFilePath)
oFile.WriteLine result
oFile.Close
Set fso = Nothing
Set oFile = Nothing

Dim iExplorer
Set iExplorer = CreateObject("InternetExplorer.Application")
iExplorer.navigate htmlFilePath
iExplorer.Visible = True
 
End Function

Function ViewXMLRequest(ByVal sFileName, ByVal url As String) As String
On Error GoTo Err
    Dim strFileHdr As String
    strFileHdr = "--ou812--------------8c405ee4e38917c" + vbCrLf + _
                 "Content-Disposition: form-data; name=""filename""; filename=""export.xml""" + vbCrLf + "Content-type: text/xml " + vbCrLf + vbNewLine
    
    Dim strFileTlr As String
    strFileTlr = vbCrLf + "--ou812--------------8c405ee4e38917c--"
            
    Dim myHTTP As Object
    Dim myXML As String
        
    Dim nFile           As Integer
    Dim baBuffer()      As Byte
    Dim sPostData       As String
    Dim sPostDataFile       As String
             
    nFile = FreeFile
    Open sFileName For Binary Access Read As nFile
    If LOF(nFile) > 0 Then
        ReDim baBuffer(0 To LOF(nFile) - 1) As Byte
        Get nFile, , baBuffer
        sPostData = StrConv(baBuffer, vbUnicode)
    End If
    Close nFile
    
    If Revision.Range("StartMode").value = "staging" Or Revision.Range("StartMode").value = "dev" Then
        Set myHTTP = CreateObject("MSXML2.ServerXMLHTTP")
            myHTTP.setOption(2) = 13056
            myHTTP.setTimeouts 50000, 80000, 2000000, 2000000
    Else
        Set myHTTP = CreateObject("MSXML2.XMLHTTP.3.0")
    End If
    
    myHTTP.Open "POST", url, False
    myHTTP.setRequestHeader "Content-Type", "multipart/form-data; boundary=ou812--------------8c405ee4e38917c"
    myHTTP.setRequestHeader "Content-Length", Len(strFileHdr) + Len(strFileTlr) + Len(sPostData)
    myHTTP.setRequestHeader "Authorization", "Basic QUNTQWRtaW46U0RUMjAxNFBhJCR3MHJk"
    myHTTP.setRequestHeader "User-Agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)"
    myHTTP.setRequestHeader "UserId", Revision.Range("UserId").value
    myHTTP.setRequestHeader "UserName", Application.UserName
    myHTTP.setRequestHeader "ExcelVersion", Application.Version
    myHTTP.setRequestHeader "TemplateVersion", BusinessInfo.Range("templateVersion").value

    sPostDataFile = strFileHdr + sPostData + strFileTlr
    myHTTP.send ToByteArray(sPostDataFile)
    
    If myHTTP.responseText = "" Then
        ViewXMLRequest = ""
        MsgBox invalidImportExport, , "Error occured while processing the request."
        
        Exit Function
    End If
    ViewXMLRequest = myHTTP.responseText
    
Exit Function
Err:

'MsgBox "ViewXMLRequest: " & Err.Description
ViewXMLRequest = ""
MsgBox importError, , "Import failed."
End Function


Function GetXmlToExport(ByVal xmlDoc As MSXML2.DOMDocument) As MSXML2.DOMDocument
On Error GoTo Err
    
    Dim xmlCollection As Collection
    
    xmlDoc.setProperty "SelectionNamespaces", "xmlns:ns1='http://ws.anthesisgroup.com/rohs/v1.0'"
    Application.DisplayAlerts = False
    
    Dim xmlFilePath, attr1, attr2  As String
    xmlFilePath = GetTempPath() + "\MainDeclaration_Map.xml"
    
    Call ActiveWorkbook.XmlMaps("MainDeclaration_Map").Export(xmlFilePath, True)
    xmlDoc.Load (xmlFilePath)
    
    Set xmlDoc = ExportMap(xmlDoc, "//ns1:MainDeclaration/ns1:BusinessInfo/ns1:Response", "ns1:Contact", "name")
    Set xmlDoc = ExportMap(xmlDoc, "//ns1:MainDeclaration/ns1:ProductList", "ns1:Product", "itemNumber")
      
    If BusinessInfo.Range("ClassA").value = True Then
            Set xmlDoc = ExportMap(xmlDoc, "//ns1:MainDeclaration/ns1:ProductList/ns1:QueryList", "ns1:Exemption", "description")
            Set xmlDoc = ExportMap(xmlDoc, "//ns1:MainDeclaration/ns1:ProductList/ns1:QueryList", "ns1:Query", "identity")
        Else
            Set xmlDoc = RemoveXmlNode(xmlDoc, "//ns1:MainDeclaration/ns1:ProductList", "ns1:QueryList")
    End If
    
    If BusinessInfo.Range("ClassB").value = True Then
            Set xmlDoc = ExportMap(xmlDoc, "//ns1:MainDeclaration/ns1:ProductList/ns1:MaterialClassList", "ns1:MaterialClass", "id")
        Else
            Set xmlDoc = RemoveXmlNode(xmlDoc, "//ns1:MainDeclaration/ns1:ProductList", "ns1:MaterialClassList")
    End If
    
    
    If BusinessInfo.Range("ClassC").value = True Then
            Set xmlDoc = ExportMap(xmlDoc, "//ns1:MainDeclaration/ns1:ProductList/ns1:SubstanceCategoryList", "ns1:SubstanceCategory", "categoryIndex")
            Set xmlDoc = ExportMap(xmlDoc, "//ns1:MainDeclaration/ns1:ProductList/ns1:SubstanceCategoryList", "ns1:SubstanceExemption", "categoryIndex")
            
        Else
            Set xmlDoc = RemoveXmlNode(xmlDoc, "//ns1:MainDeclaration/ns1:ProductList", "ns1:SubstanceCategoryList")
    End If
    
    If BusinessInfo.Range("ClassD").value = True Then
            Set xmlDoc = ExportMap(xmlDoc, "//ns1:MainDeclaration/ns1:SubProductList", "ns1:Product", "itemName")
            Set xmlDoc = ExportMap(xmlDoc, "//ns1:MainDeclaration/ns1:HomogeneousMaterialList", "ns1:HomogeneousMaterial", "name")
            Set xmlDoc = ExportMap(xmlDoc, "//ns1:MainDeclaration/ns1:HomogeneousMaterialList/ns1:SubstanceCategoryList/ns1:SubstanceCategory", "ns1:SubstanceCategoryListID", "identity")
            
            Set xmlDoc = ExportMap(xmlDoc, "//ns1:MainDeclaration/ns1:SubProductList", "ns1:Product", "itemName")
            Set xmlDoc = HasChildNode(xmlDoc, "//ns1:MainDeclaration/ns1:SubProductList", "//ns1:MainDeclaration", "ns1:SubProductList")
            
            
            Set xmlDoc = RemoveEmptyNodes(xmlDoc, "//ns1:MainDeclaration/ns1:HomogeneousMaterialList/ns1:SubstanceCategoryList", "ns1:SubstanceCategory", "ns1:Substance", "name")
            
            
            
            Set xmlDoc = RemoveEmptyNode(xmlDoc, "//ns1:MainDeclaration/ns1:HomogeneousMaterialList/ns1:SubstanceCategoryList/ns1:SubstanceCategory/ns1:Substance", "ns1:SubstanceExemption", "ns1:SubstanceExemption", "identity")
            Set xmlDoc = RemoveEmptyNode(xmlDoc, "//ns1:MainDeclaration/ns1:HomogeneousMaterialList/ns1:SubstanceCategoryList/ns1:SubstanceCategory/ns1:Substance", "ns1:SubstanceID", "ns1:SubstanceID", "identity")
             
        Else
            Set xmlDoc = RemoveXmlNode(xmlDoc, "//ns1:MainDeclaration", "ns1:SubProductList")
            Set xmlDoc = RemoveXmlNode(xmlDoc, "//ns1:MainDeclaration", "ns1:HomogeneousMaterialList")
    End If
    
    If BusinessInfo.Range("IncludeManufacturing").value = True Then
            Set xmlDoc = ExportMap(xmlDoc, "//ns1:MainDeclaration/ns1:ProductList/ns1:ManufacturingInfo/ns1:Package", "ns1:Terminal", "shape")
        Else
            Set xmlDoc = RemoveXmlNode(xmlDoc, "//ns1:MainDeclaration/ns1:ProductList", "ns1:ManufacturingInfo")
    End If
    
   Set GetXmlToExport = xmlDoc
     
Exit Function
Err:
'MsgBox "GetXMLTOExport: " & Err.Description
End Function

Public Function GetTempPath() As String
    ''http://msdn.microsoft.com/en-us/library/a72y2t1c(v=vs.84).aspx
    Dim fso As Object
    Set fso = CreateObject("Scripting.FileSystemObject")
    GetTempPath = fso.GetSpecialFolder(2)
    Set fso = Nothing
End Function
Attribute VB_Name = "modHelper"
Option Explicit

Public Sub browsePath()
Dim filter As String
Dim caption As String
Dim FileName As String

filter = "Files (*.pfx;),*.pfx;"
caption = "Please Select an input file "
FileName = Application.GetOpenFilename(filter, , caption)

If LCase(FileName) = "false" Then Exit Sub
Settings.Range("certPath").value = FileName
End Sub


Public Function HasError(result As String) As Boolean
    
    Dim displayError As String
    Dim errorMsg As String
    Dim xmlDoc As MSXML2.DOMDocument
    Set xmlDoc = New MSXML2.DOMDocument
    xmlDoc.LoadXML result
 
    displayError = GetXmlDocAttributeValueByName(xmlDoc, "//ErrorMessage", "displayText")
      
    Dim error As Boolean
    If displayError <> "" Then
    Dim errorText  As String
        errorText = GetXmlDocAttributeValueByName(xmlDoc, "//ErrorMessage", "errorText")
        MsgBox displayError + vbNewLine + vbNewLine + errorText
        error = True
    Else
        error = False
    End If
    
    HasError = error
End Function

Function ProtectWorkBook(ByVal protect As Boolean)
    If protect = True Then
        ThisWorkbook.protect ("SDT2014Pa$$w0rd"), True, True
    Else
        ThisWorkbook.Unprotect ("SDT2014Pa$$w0rd")
    End If
End Function

Function ProtectWorkSheet(ByVal WS As Worksheet, ByVal protect As Boolean)
     If protect = True Then
         WS.protect ("SDT2014Pa$$w0rd")
     Else
         WS.Unprotect ("SDT2014Pa$$w0rd")
     End If
End Function

Sub ProtectWorkSheets(ByVal protect As Boolean)
    ''''Call ProtectWorkBook(protect)
    If protect = False Then
        BusinessInfo.Unprotect password:="SDT2014Pa$$w0rd"
        Products.Unprotect password:="SDT2014Pa$$w0rd"
        QueryLists.Unprotect password:="SDT2014Pa$$w0rd"
        QueryExemptions.Unprotect password:="SDT2014Pa$$w0rd"
        MaterialClasses.Unprotect password:="SDT2014Pa$$w0rd"
        SubstanceCategoryLists.Unprotect password:="SDT2014Pa$$w0rd"
        SubstanceCategoryExemptions.Unprotect password:="SDT2014Pa$$w0rd"
        SubProducts.Unprotect password:="SDT2014Pa$$w0rd"
        HomogeneousMaterials.Unprotect password:="SDT2014Pa$$w0rd"
        Substances.Unprotect password:="SDT2014Pa$$w0rd"
        DataSummary.Unprotect password:="SDT2014Pa$$w0rd"
        Manufacturing.Unprotect password:="SDT2014Pa$$w0rd"
        FileReferences.Unprotect password:="SDT2014Pa$$w0rd"
        Settings.Unprotect password:="SDT2014Pa$$w0rd"
        Revision.Unprotect password:="SDT2014Pa$$w0rd"
        License.Unprotect password:="SDT2014Pa$$w0rd"
     Else
        BusinessInfo.protect password:="SDT2014Pa$$w0rd"
        Products.protect password:="SDT2014Pa$$w0rd"
        SubProducts.protect password:="SDT2014Pa$$w0rd"
        QueryLists.protect password:="SDT2014Pa$$w0rd"
        QueryExemptions.protect password:="SDT2014Pa$$w0rd"
        MaterialClasses.protect password:="SDT2014Pa$$w0rd"
        SubstanceCategoryExemptions.protect password:="SDT2014Pa$$w0rd"
        SubstanceCategoryLists.protect password:="SDT2014Pa$$w0rd"
        HomogeneousMaterials.protect password:="SDT2014Pa$$w0rd"
        Substances.protect password:="SDT2014Pa$$w0rd"
        DataSummary.protect password:="SDT2014Pa$$w0rd"
        Manufacturing.protect password:="SDT2014Pa$$w0rd"
        FileReferences.protect password:="SDT2014Pa$$w0rd"
        Settings.protect password:="SDT2014Pa$$w0rd"
        Revision.protect password:="SDT2014Pa$$w0rd"
        License.protect password:="SDT2014Pa$$w0rd"
     End If
     
End Sub



Function GetXmlDocAttributeValueByName(xmlDoc As DOMDocument, attributeName As String, name As String) As String
On Error GoTo Err:
GetXmlDocAttributeValueByName = xmlDoc.SelectSingleNode(attributeName).attributes.getNamedItem(name).Text
Exit Function
Err:
GetXmlDocAttributeValueByName = Empty
End Function


Sub SaveDOMFile(objDom As DOMDocument)
    Dim FileName As Variant
    
    FileName = Application.GetSaveAsFilename( _
    FileFilter:="XML Files,*.xml, All Files,*.*", _
    Title:="Save As")
    
    If FileName = False Then Exit Sub
    
    If LCase$(Right$(FileName, 4)) <> ".xml" Then
    FileName = FileName & ".xml"
    End If
    
    objDom.Save FileName
End Sub


Function OpenFile() As String
   Dim varItem As Variant
   Dim strPath As String
   Dim selectedFilePath As String
   Dim filePicker As FileDialog
   Dim filter As String
   Dim des As String
   Dim ext As String
   Dim filters As Variant
    Set filePicker = Application.FileDialog(msoFileDialogFilePicker)
    
    With filePicker
        'setup File Dialog'
        .AllowMultiSelect = False
        .ButtonName = "Select"
        .InitialView = msoFileDialogViewList
        .Title = "Select File"
        
        'add filter for all files'
        
        filter = FindCellValue(DL_Templates, BusinessInfo.Range("FormatType").value, 3)
        filters = Split(filter, "|")
        des = filters(0)
        ext = filters(1)
        
        With .filters
            .Clear
            .Add des, ext
        End With
 
        .FilterIndex = 1
 
        .Show
    
    End With
    
    If filePicker.SelectedItems.Count > 0 Then
        selectedFilePath = filePicker.SelectedItems(1)
    Else
        selectedFilePath = ""
    End If
    
    OpenFile = selectedFilePath

End Function

Public Function RemoveXmlNode(ByVal xmlDoc As MSXML2.DOMDocument, ByVal queryString, ByVal nodeName As String) As DOMDocument
On Error GoTo Err
Dim node As MSXML2.IXMLDOMNode
Dim childN As MSXML2.IXMLDOMNode
Dim nodeList1 As MSXML2.IXMLDOMNodeList
Dim nodeList2 As MSXML2.IXMLDOMNodeList
Set nodeList1 = xmlDoc.SelectNodes(queryString)

If nodeList1.Length = 0 Then Exit Function
 
For Each node In nodeList1
   If node.HasChildNodes Then
    Set nodeList2 = node.ChildNodes
    
    For Each childN In nodeList2
        If childN.nodeName = nodeName Then
           Call childN.parentNode.RemoveChild(childN)
        End If
    Next childN
   End If
Next node

Set RemoveXmlNode = xmlDoc

Exit Function
Err:

'MsgBox "RemovedXMLNode: " & Err.Description
End Function


Function IsExist(ByVal wSheet As Worksheet, ByVal Range As String, ByVal findValue As String) As Boolean
 If wSheet.Range(Range).Find(What:=findValue, LookAt:=xlWhole, MatchCase:=False) Is Nothing Then
   IsExist = False
 Else
   IsExist = True
 End If
End Function

 
Function FindCellValue(ByVal wSheet As Worksheet, stringToFind As String, column As Integer) As String
    Dim found As Range
    
    If Trim(stringToFind) = "" Then Exit Function
    
    Set found = wSheet.Cells.Find(What:=stringToFind, After:=ActiveCell, LookIn:=xlFormulas, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext _
        , MatchCase:=False)
    
    If Not found Is Nothing Then
        FindCellValue = found.Offset(rowOffset:=0, columnOffset:=column)
     End If
End Function

 
Sub ResizeTableRows(sSheetName As String, sTableName As String, rng As String)
On Error GoTo Err
    Dim WS As Worksheet
    Dim loSet As ListObject
    Dim r As Range
    
    Set WS = ThisWorkbook.Worksheets(sSheetName)
    Set loSet = WS.ListObjects(sTableName)
    Set r = Range(rng)
       
    loSet.Resize r
Exit Sub
Err:

'MsgBox "ResizeTableRows: " & Err.Description
End Sub

Public Sub CreateLookUpValidations(ByVal Target As Worksheet, ByVal lstValue As String, _
                                    refCell As String, startRow As Integer, _
                                    endRow As Integer, targetRange As String, sError As Boolean)
On Error Resume Next
    If Trim(lstValue) <> "" Then
    Dim row As Integer
    
    For row = startRow To endRow
        
        If Target.Range(refCell & row).value <> "" Then
            With Target.Range(targetRange & row).Validation
                .Delete
                .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Formula1:=lstValue 'Operator:=xlBetween,
            End With
        End If
    Next row

    Else
        With Target.Range(targetRange).Validation
            .Delete
        End With
    End If
End Sub


Public Sub CreateLookUpValidation(ByVal Target As Worksheet, ByVal lstValue As String, targetRange As String, sError As Boolean)
On Error Resume Next

    If Trim(lstValue) <> "" Then
        With Target.Range(targetRange).Validation
            .Delete
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Formula1:=lstValue 'Operator:=xlBetween,
            '.IgnoreBlank = True
            '.InCellDropdown = True
            '.InputTitle = ""
            '.ErrorTitle = ""
            '.InputMessage = ""
            '.ErrorMessage = ""
            '.ShowInput = True
            '.showError = sError
        End With
    Else
        With Target.Range(targetRange).Validation
            .Delete
        End With
    End If
End Sub

Public Sub SetValidateWholeNumber(ByVal Target As Worksheet, rng As String, minValue As Variant)
On Error GoTo Err
         With Target.Range(rng).Validation
            .Delete
            .Add Type:=xlValidateWholeNumber, _
                    AlertStyle:=xlValidAlertStop, Operator:= _
                    xlGreaterEqual, Formula1:=minValue
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = ""
            .InputMessage = "Should be numeric value."
            .ErrorMessage = "Please enter a valid number."
            .ShowInput = True
            .ShowError = True
        End With
Exit Sub
Err:
''''MsgBox Err.Description
End Sub


''''Public Sub SetValidateDate(ByVal Target As Worksheet, rng As String, minValue As Variant)
''''On Error GoTo Err
''''         With Target.Range(rng).Validation
''''            .Delete
''''            .Add Type:=xlValidateDate, _
''''                    AlertStyle:=xlValidAlertStop, Operator:= _
''''                    xlGreaterEqual, Formula1:=minValue
''''            .IgnoreBlank = True
''''            .InCellDropdown = True
''''            .InputTitle = ""
''''            .ErrorTitle = ""
''''            .InputMessage = "Enter a date with MM/DD/YYYY format."
''''            .ErrorMessage = "Please enter a valid date."
''''            .ShowInput = True
''''            .showError = True
''''        End With
''''Exit Sub
''''Err:
'''''MsgBox Err.Description & " " & Target.name
''''End Sub
 
 
Public Sub SetValidateDate(ByVal Target As Worksheet, rng As String, minValue As Variant, formatD As String)
On Error GoTo Err
         Target.Select
         With Target.Range(rng).Validation
            .Delete
            .Add Type:=xlValidateDate, _
                    AlertStyle:=xlValidAlertStop, Operator:= _
                    xlGreaterEqual, Formula1:=minValue
            .IgnoreBlank = True
            .InputTitle = "Date"
            .InputMessage = "Enter a date with " + formatD + " format."
            .ErrorTitle = "Invalid input Date"
            .ErrorMessage = "Please enter a valid date."
            .ShowInput = True
            .ShowError = True
        End With
Exit Sub
Err:

'MsgBox "SetValidateDate: " & Err.Description
''''MsgBox Err.Description & " " & Target.name
End Sub
  
  
Public Sub SetValidateDecimal(ByVal Target As Worksheet, rng As String, minValue As Variant)
On Error GoTo Err
         With Target.Range(rng).Validation
            .Delete
            .Add Type:=xlValidateDecimal, _
                    AlertStyle:=xlValidAlertStop, Operator:= _
                    xlGreaterEqual, Formula1:=minValue
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = ""
            .InputMessage = "Should be numeric value."
            .ErrorMessage = "Please enter a valid number."
            .ShowInput = True
            .ShowError = True
        End With
Exit Sub
Err:

'MsgBox "SetValidateDecimal: " & Err.Description
'MsgBox Err.Description & " " & Target.name
End Sub


Public Sub SetValidatePercent(ByVal Target As Worksheet, rng As String, minValue As Variant)
On Error GoTo Err
         With Target.Range(rng).Validation
            .Delete
            .Add Type:=xlValidateDecimal, _
                    AlertStyle:=xlValidAlertStop, Operator:= _
                    xlGreaterEqual, Formula1:=minValue
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = ""
            .InputMessage = "Should be numeric value."
            .ErrorMessage = "Please enter a valid number."
            .ShowInput = True
            .ShowError = True
        End With
Exit Sub
Err:

'MsgBox "SetValidationPercent: " & Err.Description
'MsgBox Err.Description & " " & Target.name
End Sub


Function GetLastRowUsedBySheetName(ByVal sheet As Worksheet) As Long
    GetLastRowUsedBySheetName = sheet.Cells.Find("*", SearchOrder:=xlByRows, LookIn:=xlValues, SearchDirection:=xlPrevious).row
End Function


Sub setFormula(ByVal wSheet As Worksheet, ByVal formula As String, ByVal rng As String)
On Error GoTo Err
    wSheet.Range(rng).NumberFormat = "General"
    wSheet.Range(rng).formula = formula
Exit Sub
Err:
    wSheet.Range(rng).formula = formula
'MsgBox Err.Description & " " & wSheet.name
End Sub

Sub SetFormat(ByVal wSheet As Worksheet, ByVal format As String, ByVal rng As String)
On Error GoTo Err
    wSheet.Range(rng).NumberFormat = format
Exit Sub
Err:

'MsgBox Err.Description
End Sub
 

Function ValidateWorkSheet(WB As Workbook) As Boolean
Dim validExcel As Boolean
Dim sheet As Variant
Dim wsSheets As New Collection
    wsSheets.Add ("Business Info")
    wsSheets.Add ("Products")
    wsSheets.Add ("Query Lists")
    wsSheets.Add ("Query Exemptions")
    wsSheets.Add ("Material Classes")
    wsSheets.Add ("Substance Category Lists")
    wsSheets.Add ("Substance Category Exemptions")
    wsSheets.Add ("Sub Products")
    wsSheets.Add ("Homogeneous Materials")
    wsSheets.Add ("Substances")
      
    For Each sheet In wsSheets
        If CheckSheet(sheet, WB) = False Then
            ValidateWorkSheet = False
        Exit Function
        End If
    Next sheet
    
ValidateWorkSheet = True
End Function

Function CheckSheet(ByVal sheetName As String, WB As Workbook) As Boolean

    On Error Resume Next
    Dim oSheet As Excel.Worksheet

    Set oSheet = WB.Sheets(sheetName)
    CheckSheet = IIf(oSheet Is Nothing, False, True)

End Function


Public Function HasChildNode(ByVal xmlDoc As MSXML2.DOMDocument, _
                             ByVal queryString As String, parentNode As String, nodeName As String) As MSXML2.DOMDocument
                          
On Error GoTo Err

Dim node As MSXML2.IXMLDOMNode
Dim node2 As MSXML2.IXMLDOMNode
Dim childN As MSXML2.IXMLDOMNode
Dim nodeList1 As MSXML2.IXMLDOMNodeList
Dim nodeList2 As MSXML2.IXMLDOMNodeList
Dim attr1 As String
 
Set nodeList1 = xmlDoc.SelectNodes(queryString)
If nodeList1.Length = 0 Then Exit Function
 
For Each node In nodeList1
   If node.HasChildNodes = False Then
     Set xmlDoc = RemoveXmlNode(xmlDoc, parentNode, nodeName)
   End If
Next node

Set HasChildNode = xmlDoc

Exit Function
Err:

'MsgBox "HasChildNode: " & Err.Description
End Function

Public Function RemoveEmptyNodes(ByVal xmlDoc As MSXML2.DOMDocument, _
                          ByVal queryString As String, ByVal parentNode As String, ByVal removeQuery As String, _
                          ByVal attr As String)
                          
On Error GoTo Err
Dim isEmpt As Boolean
Dim node As MSXML2.IXMLDOMNode
Dim node2 As MSXML2.IXMLDOMNode

Dim childN As MSXML2.IXMLDOMNode
Dim parentN As MSXML2.IXMLDOMNode
Dim nodeList1 As MSXML2.IXMLDOMNodeList
Dim nodeList2 As MSXML2.IXMLDOMNodeList
Dim FileName, attr1, attr2  As String

Set nodeList1 = xmlDoc.SelectNodes(queryString)
If nodeList1.Length = 0 Then
    Set RemoveEmptyNodes = xmlDoc
    Exit Function
End If

For Each node In nodeList1
   If node.HasChildNodes Then
    Set nodeList2 = node.ChildNodes
       For Each childN In nodeList2
        
        If childN.nodeName = parentNode Then
            Set node2 = childN.SelectSingleNode(removeQuery).attributes.getNamedItem(attr)
            If node2 Is Nothing Then
                Call childN.parentNode.RemoveChild(childN)
            Else
                If childN.SelectSingleNode(removeQuery).attributes.getNamedItem(attr).Text = "" Then
                     Call childN.parentNode.RemoveChild(childN)
                End If
           End If
         End If
       Next childN
   Else
   End If
Next node

Set RemoveEmptyNodes = xmlDoc

Exit Function
Err:

'MsgBox "RemoveEmptyNodes: " & Err.Description
End Function


Public Function RemoveEmptyNode(ByVal xmlDoc As MSXML2.DOMDocument, _
                          ByVal queryString As String, ByVal parentNode As String, ByVal removeQuery As String, _
                          ByVal attr As String)
                          
On Error GoTo Err
Dim isEmpt As Boolean
Dim node As MSXML2.IXMLDOMNode
Dim node2 As MSXML2.IXMLDOMNode

Dim childN As MSXML2.IXMLDOMNode
Dim parentN As MSXML2.IXMLDOMNode
Dim nodeList1 As MSXML2.IXMLDOMNodeList
Dim nodeList2 As MSXML2.IXMLDOMNodeList
Dim FileName, attr1, attr2  As String

Set nodeList1 = xmlDoc.SelectNodes(queryString)
If nodeList1.Length = 0 Then
    Set RemoveEmptyNode = xmlDoc
    Exit Function
End If
 
For Each node In nodeList1
 
   If node.HasChildNodes Then
    Set nodeList2 = node.ChildNodes
       For Each childN In nodeList2
        
        If childN.nodeName = parentNode Then
          
            'Set node2 = childN.SelectSingleNode(removeQuery).attributes.getNamedItem(attr)
            Set node2 = childN.attributes.getNamedItem(attr)
            
            If node2 Is Nothing Then
                Call childN.parentNode.RemoveChild(childN)
            Else
                'If childN.SelectSingleNode(removeQuery).attributes.getNamedItem(attr).Text = "" Then
                If childN.attributes.getNamedItem(attr).Text = "" Then
                     Call childN.parentNode.RemoveChild(childN)
                End If
           End If
         End If
       
       Next childN
   Else
    
   End If
Next node

Set RemoveEmptyNode = xmlDoc

Exit Function
Err:

'MsgBox "RemoveEmptyNode: " & Err.Description
End Function


Public Function ToByteArray(sText As String) As Byte()
    ToByteArray = StrConv(sText, vbFromUnicode)
End Function


Public Function ReadCertificate(ByVal sFileName As String) As Byte()
On Error GoTo ErrorHandler
Dim nFile           As Integer
Dim baBuffer()      As Byte
Dim sPostData       As String
    
nFile = FreeFile
Open sFileName For Binary Access Read As nFile
If LOF(nFile) > 0 Then
    ReDim baBuffer(0 To LOF(nFile) - 1) As Byte
    Get nFile, , baBuffer
    sPostData = StrConv(baBuffer, vbUnicode)
End If
Close nFile

ReadCertificate = ToByteArray(sPostData)
  
Exit Function
ErrorHandler:
''''MsgBox Err.Description
End Function



Public Sub resetColumnPos()
On Error GoTo Err
DataSummary.Activate
DataSummary.Range("B5").Select
FileReferences.Activate
FileReferences.Range("A5").Activate

HomogeneousMaterials.Activate
HomogeneousMaterials.Range("B5").Activate
Manufacturing.Activate
Manufacturing.Range("MSL_Rating").Select
MaterialClasses.Activate
MaterialClasses.Range("A5").Activate
Products.Activate
Products.Range("A6").Activate
QueryExemptions.Activate
QueryExemptions.Range("A6").Activate
QueryLists.Activate
QueryLists.Range("A6").Activate
Revision.Activate
Revision.Range("A5").Activate
SubProducts.Activate
SubProducts.Range("A5").Activate
SubstanceCategoryExemptions.Activate
SubstanceCategoryExemptions.Range("A5").Activate
SubstanceCategoryLists.Activate
SubstanceCategoryLists.Range("A5").Activate
Substances.Activate
Substances.Range("A5").Activate
BusinessInfo.Activate
BusinessInfo.Range("FormatType").Activate

Exit Sub
Err:
MsgBox Err.HelpContext
End Sub


Public Sub SetToolTip(ByVal Target As Worksheet, rng As String, msg As String)
On Error Resume Next
    If Target.ProtectContents Then
      Call ProtectWorkSheet(Target, False)
    
        With Target.Range(rng).Validation
            '.Delete
            '.Add Type:=xlValidateInputOnly
            '.IgnoreBlank = True
            '.InCellDropdown = True
            '.InputTitle = ""
            '.ShowInput = True
            .InputMessage = msg
        End With
      
      Call ProtectWorkSheet(Target, True)
    Else
        With Target.Range(rng).Validation
            '.Delete
            '.Add Type:=xlValidateInputOnly
            '.IgnoreBlank = True
            '.InCellDropdown = True
            '.InputTitle = ""
            '.ShowInput = True
            .InputMessage = msg
        End With
        
    End If
End Sub
 
 

Public Function isCAS(ivCAS As String) As Boolean
    Dim lvPlace As Integer
    Dim lvChar   As String
    Dim cas As Variant
    Dim casTemp As Variant
    isCAS = True
    ivCAS = Replace(Replace(ivCAS, ",", "|"), "/", "|")
    Dim casArray() As String
    casArray = Split(ivCAS, "|")
    
    For Each cas In casArray
        casTemp = Trim(cas)
        
        For lvPlace = 1 To Len(casTemp)
        lvChar = Mid(casTemp, lvPlace, 1)
        
        If (lvPlace = Len(casTemp) - 4 Or lvPlace = Len(casTemp) - 1) Then
            If lvChar <> "-" Then
                isCAS = False
                Exit For
            End If
        ElseIf lvChar < "0" Or lvChar > "9" Then
            isCAS = False
            Exit For
        End If
        Next lvPlace
    
    Next cas
End Function

Public Function isValidCAS(ivCAS As String) As Boolean
    Dim lvCAS As String
    Dim lvCheckDigit As Integer
    Dim lvTotal As Integer
    Dim lvPlace As Integer
    Dim cas As Variant
    Dim casTemp As Variant
    Dim pos As Integer
    
    pos = InStr(1, LCase(ivCAS), "g-", vbTextCompare)
    
    If ivCAS <> "" And LCase(ivCAS) = "proprietary" Or ivCAS = "-" Or pos > 0 Or LCase(ivCAS) = "system" Then
        isValidCAS = True
        Exit Function
    End If
    
    If ivCAS = "" Or InStr(1, ivCAS, "CAS", vbTextCompare) > 0 Then
        isValidCAS = True
         Exit Function
    End If
    
    If isCAS(ivCAS) = False Then
        isValidCAS = False  ' or set to true if you want to ignore nonCAS values in the field
        Exit Function
    End If
    Dim casArray() As String
    casArray = Split(ivCAS, "|")
    
    For Each cas In casArray
         casTemp = Trim(cas)
         
        lvCAS = Replace(casTemp, "-", "")
        lvCheckDigit = Right(lvCAS, 1)
        lvCAS = Left(lvCAS, Len(lvCAS) - 1)
        
        For lvPlace = Len(lvCAS) To 1 Step -1
            lvTotal = lvTotal + (Mid(lvCAS, lvPlace, 1) * (Len(lvCAS) + 1 - lvPlace))
        Next lvPlace
    
        If lvCheckDigit = Right(lvTotal, 1) Then
            isValidCAS = True
        End If
    Next cas
End Function



Sub SetToolTips()

Call SetToolTip(BusinessInfo, "FormatType", "This field should not be empty. Please provide a valid value.")
Call SetToolTip(BusinessInfo, "LegalDeclarationType", "This field should not be empty. Please provide a valid value.")
Call SetToolTip(BusinessInfo, "SupplierAcceptance", "This field should not be empty. Please provide a valid value.")
Call SetToolTip(BusinessInfo, "RequesterName", "This field should not be empty. Please provide a valid value.")
Call SetToolTip(BusinessInfo, "ContactName", "This field should not be empty. Please provide a valid value.")
Call SetToolTip(BusinessInfo, "ContactEmail", "This field should not be empty. Please provide a valid value.")
Call SetToolTip(BusinessInfo, "ContactPhone", "This field should not be empty. Please provide a valid value.")
Call SetToolTip(BusinessInfo, "SupplierName", "This field should not be empty. Please provide a valid value.")
Call SetToolTip(BusinessInfo, "AuthorizedRep", "This field should not be empty. Please provide a valid value.")
Call SetToolTip(BusinessInfo, "AuthorizedRepEmail", "This field should not be empty. Please provide a valid value.")
Call SetToolTip(BusinessInfo, "AuthorizedRepPhone", "This field should not be empty. Please provide a valid value.")
Call SetToolTip(BusinessInfo, "VendorAuthority", "This field is required if the Vendor ID is not empty.")

Call SetToolTip(BusinessInfo, "F25:F32", "This field should not be empty. Please provide a valid value.")
Call SetToolTip(BusinessInfo, "G25:G32", "This field should not be empty. Please provide a valid value.")
Call SetToolTip(BusinessInfo, "H25:H32", "This field should not be empty. Please provide a valid value.")

'Product
Call SetToolTip(Products, "C6:C500", "This field should not be empty. Please provide a valid value.")
Call SetToolTip(Products, "F6:F500", "This field should not be empty. Please provide a valid value.")
Call SetToolTip(Products, "I6:I500", "This field should not be empty. Please provide a valid value.")
Call SetToolTip(Products, "D6:D500", "Enter a date with MM/DD/YYYY format.")


'Query
Call SetToolTip(QueryLists, "A6:A500", "This field should not be empty. Please provide a valid value.")
Call SetToolTip(QueryLists, "B6:B500", "This field should not be empty. Please provide a valid value.")
Call SetToolTip(QueryLists, "C6:C500", "This field should not be empty. Please provide a valid value.")

'QueryExemptions
Call SetToolTip(QueryExemptions, "A6:A500", "This field should not be empty. Please provide a valid value.")
Call SetToolTip(QueryExemptions, "C6:C500", "This field should not be empty. Please provide a valid value.")

'Material Classes
Call SetToolTip(MaterialClasses, "A5:A500", "This field should not be empty. Please provide a valid value.")
Call SetToolTip(MaterialClasses, "E5:E500", "This field should not be empty. Please provide a valid value.")


'Substance Category List
Call SetToolTip(SubstanceCategoryLists, "A5:A500", "This field should not be empty. Please provide a valid value.")

'Substance Category Exemptions
Call SetToolTip(SubstanceCategoryExemptions, "A5:B500", "This field should not be empty. Please provide a valid value.")

'Sub Products
Call SetToolTip(SubProducts, "A5:A500", "This field should not be empty. Please provide a valid value.")
Call SetToolTip(SubProducts, "B5:B500", "This field should not be empty. Please provide a valid value.")
Call SetToolTip(SubProducts, "E5:E500", "This field should not be empty. Please provide a valid value.")

'Homogeneous Materials
Call SetToolTip(HomogeneousMaterials, "B5:B2000", "This field should not be empty. Please provide a valid value.")
Call SetToolTip(HomogeneousMaterials, "C5:C2000", "This field should not be empty. Please provide a valid value.")
Call SetToolTip(HomogeneousMaterials, "E5:E2000", "This field should not be empty. Please provide a valid value.")

'Substances
Call SetToolTip(Substances, "A5:A5000", "This field should not be empty. Please provide a valid value.")
Call SetToolTip(Substances, "B5:B5000", "This field should not be empty. Please provide a valid value.")
Call SetToolTip(Substances, "D5:D5000", "This field should not be empty. Please provide a valid value.")
Call SetToolTip(Substances, "G5:G5000", "This field should not be empty. Please provide a valid value.")



End Sub


Public Function IsValidDate(s As String) As Boolean
    Dim re, match
    IsValidDate = False
    If s = "" Then
        IsValidDate = True
        Exit Function
    End If
    
    Set re = CreateObject("vbscript.regexp")
    're.Pattern = "[0-1][0-9]/[0-3][0-9]/[1-2][0-9][0-9][0-9]$|[1-9]/[1-9]/[1-2][0-9][0-9][0-9]$|[1-9]/[0-3][0-9]/[1-2][0-9][0-9][0-9]$|[0-1][0-9]/[1-9]/[1-2][0-9][0-9][0-9]$"
    're.Pattern = "^(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\d\d$"
    re.Pattern = "^(0?[1-9]|1[0-2])/(0?[1-9]|1[0-9]|2[0-9]|3[01])/\d{4}$"
    re.Global = True
    
    For Each match In re.Execute(s)
        If IsDate(match) Then
            IsValidDate = True
        Else
            IsValidDate = False
        End If
        Exit For
    Next

    Set re = Nothing
End Function

Public Sub ConfigMassConcentration()

If Substances.ProtectContents Then
   Call ProtectWorkSheet(Substances, False)
End If

If LCase(Settings.Range("ddlConcentration").value) = "concentration" Then
    Substances.Range("F5:F5000").Locked = True
    Substances.Range("H5:H5000").Locked = False
    Call setFormula(Substances, "=IFERROR(IF(H5<>"""",(INDEX('Homogeneous Materials'!Y$5:Z$2000,MATCH(A5,'Homogeneous Materials'!Y$5:Y$2000,0),2)/100)*AH5,""""),"""")", "$F5:$F5000")
    Call SetToolTip(Substances, "F5:F5000", "This column is disabled.  The value is automatically computed from the Conc(%).  To enable, change the Substance Concentration Unit attribute to Mass in the Settings tab")
    Call SetValidateDecimal(Substances, "$H5:$H5000", 0)
Else
    Substances.Range("F5:F5000").Locked = False
    Substances.Range("H5:H5000").Locked = True
    ''Call setFormula(Substances, "=IFERROR(IF(F5<>"""",(F5/AN5)*100,""""),"""")", "$H5:$H5000")
    Call setFormula(Substances, "=IFERROR(IF(F5<>"""",((AN5)/AQ5)*100,""""),"""")", "$H5:$H5000")
    Call SetToolTip(Substances, "H5:H5000", "This column is disabled.  The value is automatically computed from the Mass.  To enable, change the Substance Concentration Unit attribute to Concentration in the Settings tab")
    Call SetValidateDecimal(Substances, "$F5:$F5000", 0)
End If

If Substances.ProtectContents = False Then
 Call ProtectWorkSheet(Substances, True)
End If

End Sub
    
    
Sub SetConditionalFormatting()
On Error GoTo Err
Dim i As Integer

'Workbooks.Application.EnableEvents = False
'BusinessInfo

'Call ProtectWorkSheet(BusinessInfo, False)

For i = 25 To 25 '32
 
    'BusinessInfo.Cells(i, 6).Locked = False
    With BusinessInfo.Cells(i, 6).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND($F$" & i & "="""",OR(TotalContact=0,$G$" & i & "<>"""",$H$" & i & "<>""""))")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With

 
    'BusinessInfo.Cells(i, 7).Locked = False
    With BusinessInfo.Cells(i, 7).FormatConditions.Add(Type:=xlExpression, Formula1:="=OR(TotalContact=0,$S$" & i - 2 & "=FALSE,AND($G$" & i & "="""",OR($F$" & i & "<>"""",$H$" & i & "<>"""")))")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With

 
    'BusinessInfo.Cells(i, 8).Locked = False
    With BusinessInfo.Cells(i, 8).FormatConditions.Add(Type:=xlExpression, Formula1:="=OR(TotalContact=0,$R$" & i - 2 & "=1,AND($H$" & i & "="""",OR($F$" & i & "<>"""",$G$" & i & "<>"""")))")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
Next i
'Call ProtectWorkSheet(BusinessInfo, True)


'Products
'Call ProtectWorkSheet(Products, False)

i = 6
Do Until Products.Cells(i, 3).value = ""
'For i = 6 To 100
 
    'Products.Cells(i, 3).Locked = False
    With Products.Cells(i, 3).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND($A$" & i & "&B$" & i & "&C$" & i & "&D$" & i & "&E$" & i & "&G$" & i & "&F$" & i & "&H$" & i & "&I$" & i & "<>"""",$P$" & i & "=0)")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With

    'Products.Cells(i, 4).Locked = False
    With Products.Cells(i, 4).FormatConditions.Add(Type:=xlExpression, Formula1:="=$Z$" & i & "=1")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
    
    'Products.Cells(i, 6).Locked = False
    With Products.Cells(i, 6).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND($A$" & i & "&B$" & i & "&C$" & i & "&D$" & i & "&E$" & i & "&G$" & i & "&F$" & i & "&H$" & i & "&I$" & i & "<>"""",$Q$" & i & "=0)")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
    
 
    'Products.Cells(i, 8).Locked = False
    With Products.Cells(i, 8).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND($A$" & i & "&B$" & i & "&C$" & i & "&D$" & i & "&E$" & i & "&G$" & i & "&F$" & i & "&H$" & i & "&I$" & i & "<>"""",$R$" & i & "=0)")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
    
 
    'Products.Cells(i, 9).Locked = False
    With Products.Cells(i, 9).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND($A$" & i & "&B$" & i & "&C$" & i & "&D$" & i & "&E$" & i & "&G$" & i & "&F$" & i & "&H$" & i & "&I$" & i & "<>"""",$S$" & i & "=0)")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
'Next i
    i = i + 1
Loop
'Call ProtectWorkSheet(Products, True)


'QueryList
'Call ProtectWorkSheet(QueryLists, False)

i = 6
Do Until QueryLists.Cells(i, 1).value = ""
'For i = 6 To 100
 
    'QueryLists.Cells(i, 1).Locked = False
    With QueryLists.Cells(i, 1).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(MAX(G" & i & ":I" & i & ")>0,$A" & i & "="""")")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With

 
    'QueryLists.Cells(i, 2).Locked = False
    With QueryLists.Cells(i, 2).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(MAX(G" & i & ":I" & i & ")>0,$B" & i & "="""")")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
    
 
    'QueryLists.Cells(i, 3).Locked = False
    With QueryLists.Cells(i, 3).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(MAX(G" & i & ":I" & i & ")>0,$C" & i & "="""")")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
    
'Next i
    i = i + 1
Loop
'Call ProtectWorkSheet(QueryLists, True)


'QueryExemptions
'Call ProtectWorkSheet(QueryExemptions, False)

i = 6
Do Until QueryExemptions.Cells(i, 1).value = ""
'For i = 6 To 100
 
    'QueryLists.Cells(i, 1).Locked = False
    With QueryExemptions.Cells(i, 1).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND($B" & i & "="""",A" & "i<>"""")")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With

'Next i
    i = i + 1
Loop
'Call ProtectWorkSheet(QueryLists, True)


'Material Classes
'Call ProtectWorkSheet(MaterialClasses, False)

i = 5
Do Until MaterialClasses.Cells(i, 1).value = ""
'For i = 5 To 100
 
    'MaterialClasses.Cells(i, 1).Locked = False
    With MaterialClasses.Cells(i, 1).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(MAX(G" & i & ":R" & i & ")>0,$A" & i & "="""")")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With

 
    'MaterialClasses.Cells(i, 4).Locked = False
    With MaterialClasses.Cells(i, 4).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(MAX(G" & i & ":R" & i & ")>0,$D" & i & "="""")")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
    
 
    'MaterialClasses.Cells(i, 5).Locked = False
    With MaterialClasses.Cells(i, 5).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(MAX(G" & i & ":R" & i & ")>0,$E" & i & "="""")")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
    
'Next i
    i = i + 1
Loop
'Call ProtectWorkSheet(MaterialClasses, True)


'Substance Category Lists
'Call ProtectWorkSheet(SubstanceCategoryLists, False)

i = 5
Do Until SubstanceCategoryLists.Cells(i, 1).value = ""
'For i = 5 To 300
 
    'SubstanceCategoryLists.Cells(i, 1).Locked = False
    With SubstanceCategoryLists.Cells(i, 1).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(MAX(X" & i & ":AA" & i & ") > 0,A" & i & "="""")")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With

 
    'SubstanceCategoryLists.Cells(i, 2).Locked = False
    With SubstanceCategoryLists.Cells(i, 2).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(MAX(X" & i & ":AA" & i & ") > 0,B" & i & "="""")")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
    
    'SubstanceCategoryLists.Cells(i, 5).Locked = False
    With SubstanceCategoryLists.Cells(i, 5).FormatConditions.Add(Type:=xlExpression, Formula1:="=AO" & i & "=1")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
    
    
    'SubstanceCategoryLists.Cells(i, 6).Locked = False
    With SubstanceCategoryLists.Cells(i, 6).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(F" & i & "="""",W" & i & ">0)")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With

    'SubstanceCategoryLists.Cells(i, 7).Locked = False
    With SubstanceCategoryLists.Cells(i, 7).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(G" & i & "="""",Y" & i & ">0)")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
    
    'SubstanceCategoryLists.Cells(i, 8).Locked = False
    With SubstanceCategoryLists.Cells(i, 8).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(H" & i & "="""",AN" & i & ">0)")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
         
        
'Next i
    i = i + 1
Loop

'Call ProtectWorkSheet(SubstanceCategoryLists, True)


'SubstanceCategoryExemptions
'Call ProtectWorkSheet(SubstanceCategoryExemptions, False)

i = 5
Do Until SubstanceCategoryExemptions.Cells(i, 1).value = ""
'For i = 5 To 300
 
    'SubstanceCategoryExemptions.Cells(i, 1).Locked = False
    With SubstanceCategoryExemptions.Cells(i, 1).FormatConditions.Add(Type:=xlExpression, Formula1:="=OR(Q" & i & ">0 ,AND(A" & i & "="""",B" & i & "<>""""))")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With

 
    'SubstanceCategoryExemptions.Cells(i, 2).Locked = False
    With SubstanceCategoryExemptions.Cells(i, 2).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(B" & i & "="""",A" & i & "<>"""")")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
    
'Next i
    i = i + 1
Loop

'Call ProtectWorkSheet(SubstanceCategoryExemptions, True)


'Sub Products
'Call ProtectWorkSheet(SubProducts, False)

i = 5
Do Until SubProducts.Cells(i, 1).value = ""
'For i = 5 To 100
 
    'SubProducts.Cells(i, 1).Locked = False
    With SubProducts.Cells(i, 1).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND($T$" & i & ">0,$N$" & i & "=0)")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With

 
    'SubProducts.Cells(i, 2).Locked = False
    With SubProducts.Cells(i, 2).FormatConditions.Add(Type:=xlExpression, Formula1:="=OR($W$" & i & "=1, AND($T$" & i & ">0, $O$" & i & "=0))")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With

 
    'SubProducts.Cells(i, 3).Locked = False
    With SubProducts.Cells(i, 3).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND($T$" & i & ">0,$R$" & i & "=0)")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
    
 
    'SubProducts.Cells(i, 4).Locked = False
    With SubProducts.Cells(i, 4).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND($T$" & i & ">0,$P$" & i & "=0)")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
        
 
    'SubProducts.Cells(i, 5).Locked = False
    With SubProducts.Cells(i, 5).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND($T$" & i & ">0,$Q$" & i & "=0)")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With

'Next i
    i = i + 1
Loop
'Call ProtectWorkSheet(SubProducts, True)


'HomogeneousMaterials
'Call ProtectWorkSheet(HomogeneousMaterials, False)

i = 5
Do Until HomogeneousMaterials.Cells(i, 3).value = ""
'For i = 5 To 500
 
    'HomogeneousMaterials.Cells(i, 1).Locked = False
    With HomogeneousMaterials.Cells(i, 1).FormatConditions.Add(Type:=xlExpression, Formula1:="=OR(V" & i & "> 0, AS" & i & ">0)")
         .Interior.Color = RGB(255, 199, 206)
         '.Interior.Pattern = XlPattern.xlPatternGray8
    End With

    'HomogeneousMaterials.Cells(i, 3).Locked = False
    With HomogeneousMaterials.Cells(i, 3).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND($C$" & i & "="""",OR(MAX(Q" & i & ":S" & i & ") > 0," & "B" & i & "&A" & i & "<>""""))")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
    
    'HomogeneousMaterials.Cells(i, 4).Locked = False
    With HomogeneousMaterials.Cells(i, 4).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND($D$" & i & "="""",OR(MAX(Q" & i & ":S" & i & ") > 0," & "B" & i & "&A" & i & "<>""""))")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
    
    'HomogeneousMaterials.Cells(i, 5).Locked = False
    With HomogeneousMaterials.Cells(i, 5).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND($E$" & i & "="""",OR(MAX(Q" & i & ":S" & i & ") > 0," & "B" & i & "&A" & i & "<>""""))")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
'Next i
    i = i + 1
Loop

'Call ProtectWorkSheet(HomogeneousMaterials, True)


'Substances
'Call ProtectWorkSheet(Substances, False)

i = 5
Do Until Substances.Cells(i, 1).value = ""

'For i = 5 To 500
    'Substances.Cells(i, 1).Locked = False
    With Substances.Cells(i, 1).FormatConditions.Add(Type:=xlExpression, Formula1:="=OR(AND(MAX(V" & i & ":X" & i & ") > 0, A" & i & " =""""), Z" & i & ">0 )")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
 
    'Substances.Cells(i, 2).Locked = False
    'With Substances.Cells(i, 2).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(MAX(U" & i & ":X" & i & ") > 0, B" & i & " ="""")")
    '    .Interior.Color = RGB(255, 199, 206)
    '    '.Interior.Pattern = XlPattern.xlPatternGray8
    'End With
    
    
    'Substances.Cells(i, 4).Locked = False
    With Substances.Cells(i, 4).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(MAX(V" & i & ":X" & i & ") > 0, D" & i & " ="""")")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
    
    'Substances.Cells(i, 5).Locked = False
    With Substances.Cells(i, 5).FormatConditions.Add(Type:=xlExpression, Formula1:="=AK" & i & " > 0")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
    
    'Substances.Cells(i, 6).Locked = False
    With Substances.Cells(i, 6).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(MAX(V" & i & ":X" & i & ") > 0, F" & i & " ="""")")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
        
    'Substances.Cells(i, 7).Locked = False
    With Substances.Cells(i, 7).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(MAX(V" & i & ":X" & i & ") > 0, G" & i & " ="""")")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
    
    With Substances.Cells(i, 9).FormatConditions.Add(Type:=xlExpression, Formula1:="=AR" & i & " >0")
        .Interior.Color = RGB(255, 199, 206)
        '.Interior.Pattern = XlPattern.xlPatternGray8
    End With
    
    
'Next i

    i = i + 1
Loop

'Call ProtectWorkSheet(Substances, True)


'Workbooks.Application.EnableEvents = True

Exit Sub
Err:

'MsgBox "SetConditionalFormatting" & Err.Description
'Workbooks.Application.EnableEvents = True

End Sub


Sub SetDefaultConditionalFormatting()
On Error GoTo Err
Dim i As Integer

'Workbooks.Application.EnableEvents = False
'BusinessInfo
i = 25

    With BusinessInfo.Cells(i, 6).FormatConditions.Add(Type:=xlExpression, Formula1:="=AND($F$" & i & "="""",OR(TotalContact=0,$G$" & i & "<>"""",$H$" & i & "<>""""))")
        .Interior.Color = RGB(255, 199, 206)
    End With

    With BusinessInfo.Cells(i, 7).FormatConditions.Add(Type:=xlExpression, Formula1:="=OR(TotalContact=0,$S$" & i - 2 & "=FALSE,AND($G$" & i & "="""",OR($F$" & i & "<>"""",$H$" & i & "<>"""")))")
        .Interior.Color = RGB(255, 199, 206)
    End With

    With BusinessInfo.Cells(i, 8).FormatConditions.Add(Type:=xlExpression, Formula1:="=OR(TotalContact=0,$R$" & i - 2 & "=1,AND($H$" & i & "="""",OR($F$" & i & "<>"""",$G$" & i & "<>"""")))")
        .Interior.Color = RGB(255, 199, 206)
    End With


'Products
'Call ProtectWorkSheet(Products, False)

i = 6
With Products.Cells(i, 3).FormatConditions.Add(Type:=xlExpression, Formula1:="=$C$" & i & "&F$" & i & "&H$" & i & "&D$" & i & "&I$" & i & "&G$" & i & "=""""")
.Interior.Color = RGB(255, 199, 206)
'.Interior.Pattern = XlPattern.xlPatternGray8
End With


'Products.Cells(i, 6).Locked = False
With Products.Cells(i, 6).FormatConditions.Add(Type:=xlExpression, Formula1:="=$C$" & i & "&F$" & i & "&H$" & i & "&D$" & i & "&I$" & i & "&G$" & i & "=""""")
.Interior.Color = RGB(255, 199, 206)
'.Interior.Pattern = XlPattern.xlPatternGray8
End With


'Products.Cells(i, 8).Locked = False
With Products.Cells(i, 8).FormatConditions.Add(Type:=xlExpression, Formula1:="=$C$" & i & "&F$" & i & "&H$" & i & "&D$" & i & "&I$" & i & "&G$" & i & "=""""")
.Interior.Color = RGB(255, 199, 206)
'.Interior.Pattern = XlPattern.xlPatternGray8
End With


'Products.Cells(i, 9).Locked = False
With Products.Cells(i, 9).FormatConditions.Add(Type:=xlExpression, Formula1:="=$C$" & i & "&F$" & i & "&H$" & i & "&D$" & i & "&I$" & i & "&G$" & i & "=""""")
.Interior.Color = RGB(255, 199, 206)
'.Interior.Pattern = XlPattern.xlPatternGray8
End With


'QueryList
'Call ProtectWorkSheet(QueryLists, False)

i = 6

'QueryLists.Cells(i, 1).Locked = False
QueryLists.Activate
With QueryLists.Cells(i, 1).FormatConditions.Add(Type:=xlExpression, Formula1:="=$A$" & i & "&B$" & i & "&C$" & i & "=""""")
    .Interior.Color = RGB(255, 199, 206)
    '.Interior.Pattern = XlPattern.xlPatternGray8
End With


'QueryLists.Cells(i, 2).Locked = False
With QueryLists.Cells(i, 2).FormatConditions.Add(Type:=xlExpression, Formula1:="=$A$" & i & "&B$" & i & "&C$" & i & "=""""")
    .Interior.Color = RGB(255, 199, 206)
    '.Interior.Pattern = XlPattern.xlPatternGray8
End With


'QueryLists.Cells(i, 3).Locked = False
With QueryLists.Cells(i, 3).FormatConditions.Add(Type:=xlExpression, Formula1:="=$A$" & i & "&B$" & i & "&C$" & i & "=""""")
    .Interior.Color = RGB(255, 199, 206)
    '.Interior.Pattern = XlPattern.xlPatternGray8
End With


'QueryExemptions
'Call ProtectWorkSheet(QueryExemptions, False)

i = 6
 
'QueryLists.Cells(i, 1).Locked = False
With QueryExemptions.Cells(i, 1).FormatConditions.Add(Type:=xlExpression, Formula1:="=$A" & i & "&C" & i & "=""""")
    .Interior.Color = RGB(255, 199, 206)
    '.Interior.Pattern = XlPattern.xlPatternGray8
End With

'QueryLists.Cells(i, 1).Locked = False
With QueryExemptions.Cells(i, 3).FormatConditions.Add(Type:=xlExpression, Formula1:="=$A" & i & "&C" & i & "=""""")
    .Interior.Color = RGB(255, 199, 206)
    '.Interior.Pattern = XlPattern.xlPatternGray8
End With

'Call ProtectWorkSheet(QueryLists, True)


'Material Classes
'Call ProtectWorkSheet(MaterialClasses, False)

i = 5
'MaterialClasses.Cells(i, 1).Locked = False
With MaterialClasses.Cells(i, 1).FormatConditions.Add(Type:=xlExpression, Formula1:="=$A" & i & "&C" & i & "&D" & i & "=""""")
    .Interior.Color = RGB(255, 199, 206)
    '.Interior.Pattern = XlPattern.xlPatternGray8
End With


'MaterialClasses.Cells(i, 4).Locked = False
With MaterialClasses.Cells(i, 4).FormatConditions.Add(Type:=xlExpression, Formula1:="=$A" & i & "&C" & i & "&D" & i & "=""""")
    .Interior.Color = RGB(255, 199, 206)
    '.Interior.Pattern = XlPattern.xlPatternGray8
End With


'MaterialClasses.Cells(i, 5).Locked = False
With MaterialClasses.Cells(i, 5).FormatConditions.Add(Type:=xlExpression, Formula1:="=$A" & i & "&C" & i & "&D" & i & "=""""")
    .Interior.Color = RGB(255, 199, 206)
    '.Interior.Pattern = XlPattern.xlPatternGray8
End With
    

'Substance Category Lists
'Call ProtectWorkSheet(SubstanceCategoryLists, False)

i = 5
'SubstanceCategoryLists.Cells(i, 1).Locked = False
With SubstanceCategoryLists.Cells(i, 2).FormatConditions.Add(Type:=xlExpression, Formula1:="=B" & i & "&C" & i & "=""""")
    .Interior.Color = RGB(255, 199, 206)
    '.Interior.Pattern = XlPattern.xlPatternGray8
End With


'SubstanceCategoryLists.Cells(i, 3).Locked = False
With SubstanceCategoryLists.Cells(i, 3).FormatConditions.Add(Type:=xlExpression, Formula1:="=B" & i & "&C" & i & "=""""")
    .Interior.Color = RGB(255, 199, 206)
    '.Interior.Pattern = XlPattern.xlPatternGray8
End With


'SubstanceCategoryExemptions
'Call ProtectWorkSheet(SubstanceCategoryExemptions, False)

i = 5
'SubstanceCategoryExemptions.Cells(i, 1).Locked = False
With SubstanceCategoryExemptions.Cells(i, 1).FormatConditions.Add(Type:=xlExpression, Formula1:="=A" & i & "&B" & i & "=""""")
    .Interior.Color = RGB(255, 199, 206)
    '.Interior.Pattern = XlPattern.xlPatternGray8
End With


'SubstanceCategoryExemptions.Cells(i, 2).Locked = False
With SubstanceCategoryExemptions.Cells(i, 2).FormatConditions.Add(Type:=xlExpression, Formula1:="=A" & i & "&B" & i & "=""""")
    .Interior.Color = RGB(255, 199, 206)
    '.Interior.Pattern = XlPattern.xlPatternGray8
End With
 
'Call ProtectWorkSheet(SubstanceCategoryExemptions, True)


'Sub Products
'Call ProtectWorkSheet(SubProducts, False)

i = 5
'SubProducts.Cells(i, 1).Locked = False
''''With SubProducts.Cells(i, 1).FormatConditions.Add(Type:=xlExpression, Formula1:="=$A$" & i & "&B$" & i & "&C$" & i & "&D$" & i & "&E$" & i & "=""""")
''''    .Interior.Color = RGB(255, 199, 206)
''''    '.Interior.Pattern = XlPattern.xlPatternGray8
''''End With


'SubProducts.Cells(i, 2).Locked = False
''''With SubProducts.Cells(i, 2).FormatConditions.Add(Type:=xlExpression, Formula1:="=$A$" & i & "&B$" & i & "&C$" & i & "&D$" & i & "&E$" & i & "=""""")
''''    .Interior.Color = RGB(255, 199, 206)
''''    '.Interior.Pattern = XlPattern.xlPatternGray8
''''End With


'SubProducts.Cells(i, 3).Locked = False
''''With SubProducts.Cells(i, 3).FormatConditions.Add(Type:=xlExpression, Formula1:="=$A$" & i & "&B$" & i & "&C$" & i & "&D$" & i & "&E$" & i & "=""""")
''''    .Interior.Color = RGB(255, 199, 206)
''''    '.Interior.Pattern = XlPattern.xlPatternGray8
''''End With


'SubProducts.Cells(i, 4).Locked = False
''''With SubProducts.Cells(i, 4).FormatConditions.Add(Type:=xlExpression, Formula1:="=$A$" & i & "&B$" & i & "&C$" & i & "&D$" & i & "&E$" & i & "=""""")
''''    .Interior.Color = RGB(255, 199, 206)
''''    '.Interior.Pattern = XlPattern.xlPatternGray8
''''End With
    

'SubProducts.Cells(i, 5).Locked = False
''''With SubProducts.Cells(i, 5).FormatConditions.Add(Type:=xlExpression, Formula1:="=$A$" & i & "&B$" & i & "&C$" & i & "&D$" & i & "&E$" & i & "=""""")
''''    .Interior.Color = RGB(255, 199, 206)
''''    '.Interior.Pattern = XlPattern.xlPatternGray8
''''End With

 


'HomogeneousMaterials
'Call ProtectWorkSheet(HomogeneousMaterials, False)

i = 5
'HomogeneousMaterials.Cells(i, 3).Locked = False
With HomogeneousMaterials.Cells(i, 3).FormatConditions.Add(Type:=xlExpression, Formula1:="=$C$" & i & "&D$" & i & "&E$" & i & "=""""")
.Interior.Color = RGB(255, 199, 206)
'.Interior.Pattern = XlPattern.xlPatternGray8
End With

'HomogeneousMaterials.Cells(i, 4).Locked = False
With HomogeneousMaterials.Cells(i, 4).FormatConditions.Add(Type:=xlExpression, Formula1:="=$C$" & i & "&D$" & i & "&E$" & i & "=""""")
.Interior.Color = RGB(255, 199, 206)
'.Interior.Pattern = XlPattern.xlPatternGray8
End With

'HomogeneousMaterials.Cells(i, 5).Locked = False
With HomogeneousMaterials.Cells(i, 5).FormatConditions.Add(Type:=xlExpression, Formula1:="=$C$" & i & "&D$" & i & "&E$" & i & "=""""")
.Interior.Color = RGB(255, 199, 206)
'.Interior.Pattern = XlPattern.xlPatternGray8
End With
 

'Substances
'Call ProtectWorkSheet(Substances, False)

i = 5
'Substances.Cells(i, 1).Locked = False
With Substances.Cells(i, 1).FormatConditions.Add(Type:=xlExpression, Formula1:="=A" & i & "&D" & i & "&F" & i & "&G" & i & " =""""")
    .Interior.Color = RGB(255, 199, 206)
    '.Interior.Pattern = XlPattern.xlPatternGray8
End With

'Substances.Cells(i, 4).Locked = False
With Substances.Cells(i, 4).FormatConditions.Add(Type:=xlExpression, Formula1:="=A" & i & "&D" & i & "&F" & i & "&G" & i & " =""""")
    .Interior.Color = RGB(255, 199, 206)
    '.Interior.Pattern = XlPattern.xlPatternGray8
End With


'Substances.Cells(i, 6).Locked = False
With Substances.Cells(i, 6).FormatConditions.Add(Type:=xlExpression, Formula1:="=A" & i & "&D" & i & "&F" & i & "&G" & i & " =""""")
    .Interior.Color = RGB(255, 199, 206)
    '.Interior.Pattern = XlPattern.xlPatternGray8
End With
    
'Substances.Cells(i, 7).Locked = False
With Substances.Cells(i, 7).FormatConditions.Add(Type:=xlExpression, Formula1:="=A" & i & "&D" & i & "&F" & i & "&G" & i & " =""""")
    .Interior.Color = RGB(255, 199, 206)
    '.Interior.Pattern = XlPattern.xlPatternGray8
End With
 
 
'Workbooks.Application.EnableEvents = True

Exit Sub
Err:

'MsgBox "SetConditionalFormatting" & Err.Description
'Workbooks.Application.EnableEvents = True

End Sub


Sub SetDateValidation()

Dim i As Integer

For i = 6 To 500
    If Products.Range("$D" & i).value <> "" Then
        If IsValidDate(Products.Range("$D" & i).value) = True Then
           Products.Range("$Z" & i).value = 0
        Else
           Products.Range("$Z" & i).value = 1
        End If
    Else
        Products.Range("$Z" & i).value = 0
        Exit For
    End If
Next i

If Substances.ProtectContents Then
Call ProtectWorkSheet(Substances, False)
 For i = 5 To 5000
    If Substances.Range("D" & i).value <> "" Then
        If isValidCAS(Substances.Range("E" & i).value) = True Then
            Substances.Range("AK" & i).value = 0
        Else
            Substances.Range("AK" & i).value = 1
        End If
    Else
        Substances.Range("AK" & i).value = 0
        Exit For
    End If
 Next i
Call ProtectWorkSheet(Substances, True)
End If
             
             
If IsValidDate(BusinessInfo.Range("RequestDate").value) = True Then
  BusinessInfo.Range("IsValidRequestDate").value = 0
Else
   BusinessInfo.Range("IsValidRequestDate").value = 1
End If

If IsValidDate(BusinessInfo.Range("RespondByDate").value) = True Then
   BusinessInfo.Range("IsValidRespondByDate").value = 0
Else
   BusinessInfo.Range("IsValidRespondByDate").value = 1
End If
        
If IsValidDate(BusinessInfo.Range("ResponseDate").value) = True Then
   BusinessInfo.Range("IsValidResponseDate").value = 0
Else
   BusinessInfo.Range("IsValidResponseDate").value = 1
End If

End Sub


Sub ClearTableFormatConditions()
    Call ClearConditionalFormat(BusinessInfo, "TableSupplierContacts")
    Call ClearConditionalFormat(Products, "TableProducts")
    Call ClearConditionalFormat(MaterialClasses, "TableMaterialClasses")
    Call ClearConditionalFormat(SubstanceCategoryLists, "TableSubstanceCategoryList")
    Call ClearConditionalFormat(SubstanceCategoryExemptions, "TableSubstanceCategoryListExemptions")
    Call ClearConditionalFormat(QueryLists, "TableQueryLists")
    Call ClearConditionalFormat(QueryExemptions, "TableQueryListExemptions")
    Call ClearConditionalFormat(Manufacturing, "TableManufacturingTerminals")
    Call ClearConditionalFormat(SubProducts, "TableSubProducts")
    Call ClearConditionalFormat(HomogeneousMaterials, "TableHomogeneousMaterials")
    Call ClearConditionalFormat(Substances, "TableSubstances")
    Call ClearConditionalFormat(FileReferences, "TableFileReferences")
End Sub
 
Sub UnloackCells()
If BusinessInfo.ProtectContents Then
    Call ProtectWorkSheet(BusinessInfo, False)
    BusinessInfo.Range("TableSupplierContacts").Locked = False
    Call ProtectWorkSheet(BusinessInfo, True)
Else
    BusinessInfo.Range("TableSupplierContacts").Locked = False
End If

If Products.ProtectContents Then
    Call ProtectWorkSheet(Products, False)
    Products.Range("TableProducts").Locked = False
    Call ProtectWorkSheet(Products, True)
Else
    Products.Range("TableProducts").Locked = False
End If

If MaterialClasses.ProtectContents Then
    Call ProtectWorkSheet(MaterialClasses, False)
    MaterialClasses.Range("TableMaterialClasses").Locked = False
    Call ProtectWorkSheet(MaterialClasses, True)
Else
    MaterialClasses.Range("TableMaterialClasses").Locked = False
End If

If SubstanceCategoryLists.ProtectContents Then
    Call ProtectWorkSheet(SubstanceCategoryLists, False)
    SubstanceCategoryLists.Range("TableSubstanceCategoryList").Locked = False
    Call ProtectWorkSheet(SubstanceCategoryLists, True)
Else
    SubstanceCategoryLists.Range("TableSubstanceCategoryList").Locked = False
End If

If SubstanceCategoryExemptions.ProtectContents Then
    Call ProtectWorkSheet(SubstanceCategoryExemptions, False)
    SubstanceCategoryExemptions.Range("TableSubstanceCategoryListExemptions").Locked = False
    Call ProtectWorkSheet(SubstanceCategoryExemptions, True)
Else
    SubstanceCategoryExemptions.Range("TableSubstanceCategoryListExemptions").Locked = False
End If

If QueryLists.ProtectContents Then
    Call ProtectWorkSheet(QueryLists, False)
    QueryLists.Range("TableQueryLists").Locked = False
    Call ProtectWorkSheet(QueryLists, True)
Else
    QueryLists.Range("TableQueryLists").Locked = False
End If

If QueryExemptions.ProtectContents Then
    Call ProtectWorkSheet(QueryExemptions, False)
    QueryExemptions.Range("TableQueryListExemptions").Locked = False
    Call ProtectWorkSheet(QueryExemptions, True)
Else
    QueryExemptions.Range("TableQueryListExemptions").Locked = False
End If

If Manufacturing.ProtectContents Then
    Call ProtectWorkSheet(Manufacturing, False)
    Manufacturing.Range("TableManufacturingTerminals").Locked = False
    Call ProtectWorkSheet(Manufacturing, True)
Else
    Manufacturing.Range("TableManufacturingTerminals").Locked = False
End If

If SubProducts.ProtectContents Then
    Call ProtectWorkSheet(SubProducts, False)
    SubProducts.Range("TableSubProducts").Locked = False
    Call ProtectWorkSheet(SubProducts, True)
Else
    SubProducts.Range("TableSubProducts").Locked = False
End If

If HomogeneousMaterials.ProtectContents Then
    Call ProtectWorkSheet(HomogeneousMaterials, False)
    HomogeneousMaterials.Range("TableHomogeneousMaterials").Locked = False
    Call ProtectWorkSheet(HomogeneousMaterials, True)
Else
    HomogeneousMaterials.Range("TableHomogeneousMaterials").Locked = False
End If

If Substances.ProtectContents Then
    Call ProtectWorkSheet(Substances, False)
    Substances.Range("TableSubstances").Locked = False
    Call ProtectWorkSheet(Substances, True)
Else
    Substances.Range("TableSubstances").Locked = False
End If

If FileReferences.ProtectContents Then
    Call ProtectWorkSheet(FileReferences, False)
    FileReferences.Range("TableFileReferences").Locked = False
    Call ProtectWorkSheet(FileReferences, True)
Else
    FileReferences.Range("TableFileReferences").Locked = False
End If

End Sub

 
 
Sub ClearConditionalFormat(wSheet As Worksheet, tableName As String)

    If wSheet.ProtectContents Then
        Call ProtectWorkSheet(wSheet, False)
            wSheet.Range(tableName).FormatConditions.Delete
        Call ProtectWorkSheet(wSheet, True)
    Else
        wSheet.Range(tableName).FormatConditions.Delete
    End If

End Sub


Sub ToggleCutCopyAndPaste(Allow As Boolean)
     'Activate/deactivate cut, copy, paste and pastespecial menu items
    Call EnableMenuItem(21, False) ' cut
    Call EnableMenuItem(19, True) ' copy
    Call EnableMenuItem(22, True) ' paste
    Call EnableMenuItem(755, True) ' pastespecial
     
     'Activate/deactivate drag and drop ability
    Application.CellDragAndDrop = True
     
     'Activate/deactivate cut, copy, paste and pastespecial shortcut keys
    With Application
        Select Case Allow
        Case Is = False
            '.OnKey "^c", "CutCopyPasteDisabled"
            '.OnKey "^v", "CutCopyPasteDisabled"
            .OnKey "^x", "CutCopyPasteDisabled"
            '.OnKey "+{DEL}", "CutCopyPasteDisabled"
            '.OnKey "^{INSERT}", "CutCopyPasteDisabled"
        Case Is = True
            '.OnKey "^c"
            '.OnKey "^v"
            .OnKey "^x"
            '.OnKey "+{DEL}"
            '.OnKey "^{INSERT}"
        End Select
    End With
End Sub
 
Sub EnableMenuItem(ctlId As Integer, Enabled As Boolean)
     'Activate/Deactivate specific menu item
    Dim cBar As CommandBar
    Dim cBarCtrl As CommandBarControl
    For Each cBar In Application.CommandBars
        If cBar.name <> "Clipboard" Then
            Set cBarCtrl = cBar.FindControl(ID:=ctlId, recursive:=True)
            If Not cBarCtrl Is Nothing Then cBarCtrl.Enabled = Enabled
        End If
    Next
End Sub
 
Sub CutCopyPasteDisabled()
     'Inform user that the functions have been disabled
    MsgBox "Sorry!  Cutting have been disabled in this workbook!"
End Sub


Sub ClearSettings()

Settings.Range("certPath").value = ""
Settings.Range("certPassword").value = ""
Settings.Range("ddlConcentration").value = "Concentration"
Settings.Range("Proprietary").value = 5
Settings.Range("minimumAllSubstance").value = 99
Settings.Range("maximumAllSubstance").value = 100
Settings.Range("minimumSubProduct").value = 99
Settings.Range("maximumSubProduct").value = 100
Settings.Range("minimumHomo").value = 99
Settings.Range("maximumHomo").value = 100
Settings.Range("minimumSubstance").value = 99.9
Settings.Range("maximumSubstance").value = 100.2

End Sub

Sub SetTableFont()
Call ProtectWorkSheets(False)
BusinessInfo.Range("TableSupplierContacts").Font.name = "Arial"
BusinessInfo.Range("TableSupplierContacts").Font.Size = 10

Products.Range("TableProducts").Font.name = "Arial"
Products.Range("TableProducts").Font.Size = 10

MaterialClasses.Range("TableMaterialClasses").Font.name = "Arial"
MaterialClasses.Range("TableMaterialClasses").Font.Size = 10

SubstanceCategoryLists.Range("TableSubstanceCategoryList").Font.name = "Arial"
SubstanceCategoryLists.Range("TableSubstanceCategoryList").Font.Size = 10

SubstanceCategoryExemptions.Range("TableSubstanceCategoryListExemptions").Font.name = "Arial"
SubstanceCategoryExemptions.Range("TableSubstanceCategoryListExemptions").Font.Size = 10

QueryLists.Range("TableQueryLists").Font.name = "Arial"
QueryLists.Range("TableQueryLists").Font.Size = 10

QueryExemptions.Range("TableQueryListExemptions").Font.name = "Arial"
QueryExemptions.Range("TableQueryListExemptions").Font.Size = 10

Manufacturing.Range("TableManufacturingTerminals").Font.name = "Arial"
Manufacturing.Range("TableManufacturingTerminals").Font.Size = 10

SubProducts.Range("TableSubProducts").Font.name = "Arial"
SubProducts.Range("TableSubProducts").Font.Size = 10

HomogeneousMaterials.Range("TableHomogeneousMaterials").Font.name = "Arial"
HomogeneousMaterials.Range("TableHomogeneousMaterials").Font.Size = 10

Substances.Range("TableSubstances").Font.name = "Arial"
Substances.Range("TableSubstances").Font.Size = 10

FileReferences.Range("TableFileReferences").Font.name = "Arial"
FileReferences.Range("TableFileReferences").Font.Size = 10
     
End Sub

Sub HideSheet()
    Call ProtectWorkSheets(False)
    Call ProtectWorkBook(False)
    BusinessInfo.Visible = xlSheetVisible
    Products.Visible = xlSheetVisible
    SubProducts.Visible = xlSheetVisible
    QueryLists.Visible = xlSheetVisible
    QueryExemptions.Visible = xlSheetVisible
    MaterialClasses.Visible = xlSheetVisible
    SubstanceCategoryExemptions.Visible = xlSheetVisible
    SubstanceCategoryLists.Visible = xlSheetVisible
    HomogeneousMaterials.Visible = xlSheetVisible
    Substances.Visible = xlSheetVisible
    DataSummary.Visible = xlSheetVisible
    Manufacturing.Visible = xlSheetVisible
    Revision.Visible = xlSheetVisible
    Call resetColumnPos
End Sub



' InQuest injected base64 decoded content
' *'v+b
' 1zjm
' !1zjm
' 1zjm
' zjej
' zjej
' zjej
' zjej
' *'jQh
' ACSAdmin:SDT2014Pa$$w0rd

INQUEST-PP=macro
