Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "Button12, 13, 1, MSForms, Label"
Attribute VB_Control = "Button11, 12, 2, MSForms, Label"
Attribute VB_Control = "Button10, 11, 3, MSForms, Label"
Attribute VB_Control = "Button9, 10, 4, MSForms, Label"
Attribute VB_Control = "Button14, 9, 5, MSForms, Label"
Attribute VB_Control = "Button13, 8, 6, MSForms, Label"
Attribute VB_Control = "Button6, 7, 7, MSForms, Label"
Attribute VB_Control = "Button5, 6, 8, MSForms, Label"
Attribute VB_Control = "Button4, 5, 9, MSForms, Label"
Attribute VB_Control = "Button3, 4, 10, MSForms, Label"
Attribute VB_Control = "Button2, 2, 11, MSForms, Label"
Attribute VB_Control = "Button1, 1, 12, MSForms, Label"
'=================================== Copyright PROTECTED ====================================
'|fffd| 2013 JTF AUTOMATION  |  Report Unauthorized Use or Automation Errors to:  JTF.ENGINEERING@gmail.com
'================ Unlawful to copy, modify, distribute, plagiarize, or mimic ================
'=================================== Copyright PROTECTED ====================================
'============================================================================================
'============================ USER AGREEMENT of LIMITED USAGE ===============================
'MUST NOT BE DUPLICATED or used by any person, or on any PC, without JTF AUTOMATION direct consent.
'BY OPENING THIS FILE YOU AGREE TO PROTECT THIS FILE FROM UNAUTHORIZED USE OR DISTRIBUTION.
'BY OPENING THIS FILE YOU AUTHORIZE JTF AUTOMATION TO ELECTRONICALLY TRACK COMPUTERS WHERE IT WAS USED.
'IF YOU DO NOT AGREE TO THESE TERMS, YOU MUST DESTROY ALL COPIES OF THIS FILE AND IT'S CONTENT WITHIN 24hrs OF RECEIPT FROM JTF AUTOMATION, AND INFORM JTF AUTOMATION WITHIN 24hrs OF RECEIPT.
'============================ USER AGREEMENT of LIMITED USAGE ===============================

Private Sub Worksheet_Activate()
    ThisWorkbook.Activate
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    a2100SetupWorksheetDefaults
    a2105SetupWorksheetName
End Sub
Private Sub Worksheet_Deactivate()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    a2110ResetWorksheetDefaults
End Sub
Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    ThisWorkbook.Activate
    Sheets(AIListSheetName).Activate
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    a2120SelectionChange Target
    'update LAST COL KEY TRACK
    If Cells(ActiveCell.Row, AICollapseCol) = "" Then
        'moved to MAIN CELLS
        LastColKeyTrack = ActiveCell.Column
    Else
        'moved to GROUP, so don't record this row's column (so preserves previous column selection)
    End If
End Sub
Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    a2130BeforeDoubleClick Target, Cancel
End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
    ThisWorkbook.Activate
    Sheets(AIListSheetName).Activate
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    a2140Change Target
End Sub
Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    Cancel = True
    a5010BeforeRightClick Target
End Sub



'Header Sort Buttons
Private Sub Button1_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    Button1.Visible = False
    If GetAsyncKeyState(vbKeyLButton) Then
        a3200Sort AINewOpenClosedCol, AINumCol
    Else
        a5040HeaderRowMenu Cells(AIHeaderRow, AICollapseCol)
    End If
    Button1.Visible = True
End Sub
Private Sub Button2_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    Button2.Visible = False
    If GetAsyncKeyState(vbKeyLButton) Then
        a3200Sort AICategoryCol, AISubcategoryCol
    Else
        a5040HeaderRowMenu Cells(AIHeaderRow, AICategoryCol)
    End If
    Button2.Visible = True
End Sub
Private Sub Button3_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    Button3.Visible = False
    If GetAsyncKeyState(vbKeyLButton) Then
        a3200Sort AISubcategoryCol, AICategoryCol
    Else
        a5040HeaderRowMenu Cells(AIHeaderRow, AISubcategoryCol)
    End If
    Button3.Visible = True
End Sub
Private Sub Button4_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    Button4.Visible = False
    If GetAsyncKeyState(vbKeyLButton) Then
        a3200Sort AINewOpenClosedCol, AIActionCol
    Else
        a5040HeaderRowMenu Cells(AIHeaderRow, AIActionCol)
    End If
    Button4.Visible = True
End Sub
Private Sub Button5_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    Button5.Visible = False
    If GetAsyncKeyState(vbKeyLButton) Then
        a3200Sort AINewOpenClosedCol, AIDescriptionCol
    Else
        a5040HeaderRowMenu Cells(AIHeaderRow, AIDescriptionCol)
    End If
    Button5.Visible = True
End Sub
Private Sub Button6_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    Button6.Visible = False
    If GetAsyncKeyState(vbKeyLButton) Then
        a3200Sort AIRespCol
    Else
        a5040HeaderRowMenu Cells(AIHeaderRow, AIRespCol)
    End If
    Button6.Visible = True
End Sub
Private Sub Button13_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    Button13.Visible = False
    If GetAsyncKeyState(vbKeyLButton) Then
        a3200Sort AIPriorityCol
    Else
        a5040HeaderRowMenu Cells(AIHeaderRow, AIPriorityCol)
    End If
    Button13.Visible = True
End Sub
Private Sub Button14_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    Button14.Visible = False
    If GetAsyncKeyState(vbKeyLButton) Then
        a3200Sort AIDueGroupCol, AIDueCol
    Else
        a5040HeaderRowMenu Cells(AIHeaderRow, AIDueCol)
    End If
    Button14.Visible = True
End Sub
Private Sub Button9_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    Button9.Visible = False
    If GetAsyncKeyState(vbKeyLButton) Then
        a3200Sort AIStatusCol
    Else
        a5040HeaderRowMenu Cells(AIHeaderRow, AIStatusCol)
    End If
    Button9.Visible = True
End Sub
Private Sub Button10_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    Button10.Visible = False
    If GetAsyncKeyState(vbKeyLButton) Then
        a3200Sort AINewOpenClosedCol, AICommentCol
    Else
        a5040HeaderRowMenu Cells(AIHeaderRow, AICommentCol)
    End If
    Button10.Visible = True
End Sub
Private Sub Button11_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    Button11.Visible = False
    If GetAsyncKeyState(vbKeyLButton) Then
        a3200Sort AICreatedGroupCol, AICreatedCol
    Else
        a5040HeaderRowMenu Cells(AIHeaderRow, AICreatedCol)
    End If
    Button11.Visible = True
End Sub
Private Sub Button12_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    Button12.Visible = False
    If GetAsyncKeyState(vbKeyLButton) Then
        a3200Sort AIUpdatedGroupCol, AIUpdatedCol
    Else
        a5040HeaderRowMenu Cells(AIHeaderRow, AIUpdatedCol)
    End If
    Button12.Visible = True
End Sub
    
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'=================================== Copyright PROTECTED ====================================
'|fffd| 2013 JTF AUTOMATION  |  Report Unauthorized Use or Automation Errors to:  JTF.ENGINEERING@gmail.com
'================ Unlawful to copy, modify, distribute, plagiarize, or mimic ================
'=================================== Copyright PROTECTED ====================================
'============================================================================================
'============================ USER AGREEMENT of LIMITED USAGE ===============================
'MUST NOT BE DUPLICATED or used by any person, or on any PC, without JTF AUTOMATION direct consent.
'BY OPENING THIS FILE YOU AGREE TO PROTECT THIS FILE FROM UNAUTHORIZED USE OR DISTRIBUTION.
'BY OPENING THIS FILE YOU AUTHORIZE JTF AUTOMATION TO ELECTRONICALLY TRACK COMPUTERS WHERE IT WAS USED.
'IF YOU DO NOT AGREE TO THESE TERMS, YOU MUST DESTROY ALL COPIES OF THIS FILE AND IT'S CONTENT WITHIN 24hrs OF RECEIPT FROM JTF AUTOMATION, AND INFORM JTF AUTOMATION WITHIN 24hrs OF RECEIPT.
'============================ USER AGREEMENT of LIMITED USAGE ===============================


Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'=================================== Copyright PROTECTED ====================================
'|fffd| 2013 JTF AUTOMATION  |  Report Unauthorized Use or Automation Errors to:  JTF.ENGINEERING@gmail.com
'================ Unlawful to copy, modify, distribute, plagiarize, or mimic ================
'=================================== Copyright PROTECTED ====================================
'============================================================================================
'============================ USER AGREEMENT of LIMITED USAGE ===============================
'MUST NOT BE DUPLICATED or used by any person, or on any PC, without JTF AUTOMATION direct consent.
'BY OPENING THIS FILE YOU AGREE TO PROTECT THIS FILE FROM UNAUTHORIZED USE OR DISTRIBUTION.
'BY OPENING THIS FILE YOU AUTHORIZE JTF AUTOMATION TO ELECTRONICALLY TRACK COMPUTERS WHERE IT WAS USED.
'IF YOU DO NOT AGREE TO THESE TERMS, YOU MUST DESTROY ALL COPIES OF THIS FILE AND IT'S CONTENT WITHIN 24hrs OF RECEIPT FROM JTF AUTOMATION, AND INFORM JTF AUTOMATION WITHIN 24hrs OF RECEIPT.
'============================ USER AGREEMENT of LIMITED USAGE ===============================
Private Sub Worksheet_Activate()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    a2105SetupWorksheetName
    Sheets("> HELP <").Select
    Range(HelpSheetNamedRangeName).Select
End Sub
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'=================================== Copyright PROTECTED ====================================
'|fffd| 2013 JTF AUTOMATION  |  Report Unauthorized Use or Automation Errors to:  JTF.ENGINEERING@gmail.com
'================ Unlawful to copy, modify, distribute, plagiarize, or mimic ================
'=================================== Copyright PROTECTED ====================================
'============================================================================================
'============================ USER AGREEMENT of LIMITED USAGE ===============================
'MUST NOT BE DUPLICATED or used by any person, or on any PC, without JTF AUTOMATION direct consent.
'BY OPENING THIS FILE YOU AGREE TO PROTECT THIS FILE FROM UNAUTHORIZED USE OR DISTRIBUTION.
'BY OPENING THIS FILE YOU AUTHORIZE JTF AUTOMATION TO ELECTRONICALLY TRACK COMPUTERS WHERE IT WAS USED.
'IF YOU DO NOT AGREE TO THESE TERMS, YOU MUST DESTROY ALL COPIES OF THIS FILE AND IT'S CONTENT WITHIN 24hrs OF RECEIPT FROM JTF AUTOMATION, AND INFORM JTF AUTOMATION WITHIN 24hrs OF RECEIPT.
'============================ USER AGREEMENT of LIMITED USAGE ===============================


Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'=================================== Copyright PROTECTED ====================================
'|fffd| 2013 JTF AUTOMATION  |  Report Unauthorized Use or Automation Errors to:  JTF.ENGINEERING@gmail.com
'================ Unlawful to copy, modify, distribute, plagiarize, or mimic ================
'=================================== Copyright PROTECTED ====================================
'============================================================================================
'============================ USER AGREEMENT of LIMITED USAGE ===============================
'MUST NOT BE DUPLICATED or used by any person, or on any PC, without JTF AUTOMATION direct consent.
'BY OPENING THIS FILE YOU AGREE TO PROTECT THIS FILE FROM UNAUTHORIZED USE OR DISTRIBUTION.
'BY OPENING THIS FILE YOU AUTHORIZE JTF AUTOMATION TO ELECTRONICALLY TRACK COMPUTERS WHERE IT WAS USED.
'IF YOU DO NOT AGREE TO THESE TERMS, YOU MUST DESTROY ALL COPIES OF THIS FILE AND IT'S CONTENT WITHIN 24hrs OF RECEIPT FROM JTF AUTOMATION, AND INFORM JTF AUTOMATION WITHIN 24hrs OF RECEIPT.
'============================ USER AGREEMENT of LIMITED USAGE ===============================

Private Sub Workbook_Activate()
    EventWorkbookActivate
End Sub
Private Sub Workbook_Deactivate()
    EventWorkbookDeactivate
End Sub
Private Sub Workbook_BeforeClose(Cancel As Boolean)
    EventWorkbookBeforeClose Cancel
End Sub
Private Sub Workbook_BeforePrint(Cancel As Boolean)
    EventWorkbookBeforePrint Cancel
End Sub
Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
    On Error Resume Next ' as a precaution
    RndYes = Rnd() > 0.93 '...7% of the time (1/15)
    If (ActiveSheet.Name = AIListSheetName) Or RndYes Then EventWorkbookBeforeSave SaveAsUI, Cancel
End Sub
Private Sub Workbook_WindowDeactivate(ByVal Wn As Window)
    EventWorkbookWindowDeactivate Wn
End Sub
Attribute VB_Name = "a0_all_is_copyright_JTF"
'=================================== Copyright PROTECTED ====================================
'|fffd| 2013 JTF AUTOMATION  |  Report Unauthorized Use or Automation Errors to:  JTF.ENGINEERING@gmail.com
'================ Unlawful to copy, modify, distribute, plagiarize, or mimic ================
'=================================== Copyright PROTECTED ====================================
'============================================================================================
'============================ USER AGREEMENT of LIMITED USAGE ===============================
'MUST NOT BE DUPLICATED or used by any person, or on any PC, without JTF AUTOMATION direct consent.
'BY OPENING THIS FILE YOU AGREE TO PROTECT THIS FILE FROM UNAUTHORIZED USE OR DISTRIBUTION.
'BY OPENING THIS FILE YOU AUTHORIZE JTF AUTOMATION TO ELECTRONICALLY TRACK COMPUTERS WHERE IT WAS USED.
'IF YOU DO NOT AGREE TO THESE TERMS, YOU MUST DESTROY ALL COPIES OF THIS FILE AND IT'S CONTENT WITHIN 24hrs OF RECEIPT FROM JTF AUTOMATION, AND INFORM JTF AUTOMATION WITHIN 24hrs OF RECEIPT.
'============================ USER AGREEMENT of LIMITED USAGE ===============================
Option Private Module 'subs are NOT available outside this project

'----------------- U R G E N T (must do NOW) ----------------

    
'----------------- Do In Next Version -----------------
    'Anyone To DO:  Per Email 2/17/13
            'Make a3602Sort2DArray more efficient with better algorithm, or at least making it recognize when to jump out of the nested compare
            'first reproduce and quantify a "slow" scenario (long list?)
            'maybe by a better common sorting algorithm ?
            'maybe by using EXCEL built in algorithm ?
            'maybe by "simultanious field rank" vs running multiple times in backwards filed rank order?
    
    
    'JAMES TO DO:
        'Consider if best to impliment AIUnusedNewFile to triger new file msgBoxes  ('make named range to track if is an unused (brand new) template file, then use that to trigger the pop-up msg boxes)
            'set to TRUE only in PrepAIListForRelease ?
            'show msgBoxes on file save, vs open?
        'check "^Future Features" list and folder of "posibly next" ideas
    
    'MIKE TO DO:
        '[NOTHING LISTED RIGHT NOW]
    
    'Anyone TO DO:   FUTURE FEATURES intended for next release, and NOT listed in seperate FUTURE FEATURE list
        'make HIDE "Updated" column an option that sets width to 1, then unhides to the default value of 14
        'make a single Form with multiple buttons, to replace the series of pop-up msg boxes when opening the (brand new) template file
        'review Future Features
        'make RIGHT click on Green button, work identical to LEFT click
        'Enable a3610AutoColumnWidthGrow per a3600 which reads:
                ''        a3610AutoColumnWidthGrow Target         THIS IS COMMENTED OUT AS IT DOES NOT FUNCTION CORRECTLY
                ''AND ALLOWS OTHER CELLS TO GROW IN HEIGHT DUE WHEN MAKING THE WIDTH AUTO ADJUST TO A SMALL VALUE
                ''(Reference email from James to Mike on 11/13/12)
                ''Likey need to temp copy val to a far right column, then AutoColumnWidth on that col to determin ideal width, delete temp val, then grow main column.  (otherwise temp shrink of column causes some other rows to gro TALL)

    'JAMES TO DO:
        'Coursory check of Mike work below.  (such as his new code in 3.60aj)
        'Review recent emails
            'including  lates email of:  [Ctrl+Up/Dn] Auto-wrap on sheet change based on timer, and others....
    
    '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    'JAMES ALWAYS TO DO: <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<   A L L   W A Y S    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<   A L L   W A Y S    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        'Follow steps in PrepAIListForRelease at bottom of THIS module <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        
        
'----------------- Version 3.95 (8/20/13) James-----------------Expire WARNING on next FEB 21
        'updated Workbook_BeforeSave to ONLY run if on AI LIST sheet (as precaution 7% of time act as if IS on AI LIST sheet anyways)
        'updated a2100SetupWorksheetDefaults FROM "%{s}" to "%s"  ...as a consistency/caution (should be same anyways
        'in zApprovalCheck:  SetJTFLogoVisibility was removed, since runs in AutoOpen, and twice makes extra flash
        'in Auto_Open:  turn off SAVE events when on other sheets....
            'decisions are all noted with the ">>" character below.   (Per Email 2/17/13)
                'DISCUSSION NOTE: before save events ensures that the JTF Logo stuff is on and C-User modes are set correctly.  Is also done on open and during the approval check so is not necessary on every save
                    '>>DONE>> Per our conversation, this can be added to the future features list to eliminate this redundancy of auto_open and approval check both calling JTF Logo sub
                'DISCUSSION NOTE: The one piece of code I don't fully understand is the b1000 sub, however, I still don't believe there is any risk.  I believe this is in there for one of your other client's, right?  Can you confirm this can be skipped when you save and are not on the AI List sheet?  Also note that this runs every time you open in the Auto_Open sub.
                    '>>SKIP>> Per our conversation, can leave before save events on if not on AI List sheet and it is a custom client (non -free AI List file) requiring b1000 to run
                'DISCUSSION NOTE: Can you also turn off screenupdating in the Auto_Open sub?  The spreadsheet flashes a bunch of times on open, and likely doesn't need to, right?
                    '>>DONE>> Per our conversation, if the original sheet was not the AI List sheet, skip the screen updating = true calls (SetEventsScreenProtect , True or SetEventsScreenProtect , True, True)  ...but then at end of AutoOpen do 1 last SCREEN update
                    '>>DONE>> implimented via IsOnAISheet
        'updated a2305IsAll10BlankRows for better detection accuracy



'----------------- Version 3.91 (4/28/13) James-----------------Expire WARNING on next AUG 21
        'updated a5440TabMenuButton4 so CUser HELP info on reset:  When RESET List & CUser
            'YES stay on the Home Tab & pull up the Help MsgBox
            'NOT activate Help



'----------------- Version 3.90(b) (3/20/2013 11:15pm) James-----------------
        'User Tips:  Updated on main sheet and HELP sheet
        'CTRL+Arrow: make stop on AI#:  updated AIDetailFirstVisibleColumn
        'UP/DOWN Arrow: make NOT jump to AI# on file open.
            'in AutoOpen added:  LastColKeyTrack = ActiveCell.Column 'preset for up/down in a2125ManageKeyboardControls
        'STARTUP MESSAGES on RESET
            'in a2300MsgNewToAIList when needed made "Type in any cell..."
                'MsgNew2 = "    UNUSED FILE MESSAGE:  Type in any cell to remove startup messages" & Enter
            'in a5440TabMenuButton4 implimented (Optional SkipCUserHelpMsg = False) to prevent CUSER getting 2 similar messages
        'FONT SIZE: implimented keyboard shortcuts within:
            'a2100SetupWorksheetDefaults
            'a5000MainMenu
            'as CTRL+    m   ,   .     (implied as < and >)
        'CALENDAR POSITION:  Fixed bug.  Showed up too far down usually, since VBA doesn't factor in scroll location within window.
            'In a9_Calendar code, UserForm_Initialize, added in....
            'MeTopMid = (Application.Top + Application.Height) / 2
            'If MeTopNum > MeTopMax Then MeTopNum = MeTopMax 'keep within window height
            'If MeTopNum > MeTopMid Then MeTopNum = MeTopMid 'keep in middle of window height
            
            
'----------------- Version 3.90(a) (3/18/2013 test) James-----------------
        'rename "Action" field to "Subject" within GUI (left hard code and variables as-is) which impacted:
            'renamed and redefined a2260ToggleColumnVisibility procedure's "Sub & Comment Set" to "Status & Comment Set"
                'updated a5000MainMenu to match new name
            'a4010ImportRowFromEmail
            '"|fffd||fffd|AI List Support" sheet
            '(all other aspects and menues work or updat as-is)
            'did NOT update variables like AIActionCol, AIDescriptionCol (...left as-is in VBA)
            'changed new "subject" to 30 wide and "action" to 70
        'rename "Description" field to "Action" within GUI (left hard code and variables as-is)
            'same steps as listed above
        'Made a2218ToggleScrollArrows (Scroll with arrows) feature ("scroll lock" like)
            'made as ALT+S, and put in Green Button
            'made AIScrollArrows named range
            'updated a2125ManageKeyboardControls
            'added to startup:  SetRange "AIScrollArrows", False
        'Avoid excel BUG of "scroll many rows when near edge" in up/down arrow (done in above task)
            'in a2125ManageKeyboardControls
            'Implimented via:   VisibleOnScreenRowTop = ActiveWindow.VisibleRange.Row     ....AND....     VisibleOnScreenRowBottom = ActiveWindow.VisibleRange.Row + ActiveWindow.VisibleRange.Rows.Count - 1
        'Improved Sub "SetRange" by adding "IsBoolean" logic (so could use in Scroll Controls above)
        'Fix iconon RMB "Move group UP" in a5020GroupHeaderMenu
        '"DELETE ALL":  Make not require top type in, if detects is a blank template file.Impacts:
            'a3510ResetCompleteAIList
            'a6000ImportAnotherAIList
        'CTRL+Arrow:  implemented Function "AIDetailMiddleVisibleEditableColumn" and used in CTRL+Right/Left arrows.  Impacted:
            'a2125ManageKeyboardControls
        'cropped bottom of HELP image on AI sheet's help tab (had "JTF Engineering" on it) (as precaution did NOT change out the image)
        'Changed FOOTER text to not say "2007" stuff
            'WAS:   ="AI List (Action Item List) Excel " & IF(AI2003Version,"2003 Version:  ","2007 or Newer Version:  ") & AIVersionNumAsText
            
        
'----------------- Version 3.80 James-----------------
        'changed "Resp" to be "Person" in field name and menue (only GUI, not changed and VBA variabel names such as "AIRespCol")
        'Make Startup boxes simpler/fewer in presentation
        'other very minor things (primarily cosmetic msg box)
        'Make a6000ImportAnotherAIList do hidden sheets too (but not very hidden sheets)
            'did by copying all sheets that are "iSheet.Visible <> xlSheetVeryHidden"
        'Made AutoOpen re-hide VeryHidden "|fffd||fffd|" sheets, as a precaution
        'Anti Key Hijack
            'Add to a2125ManageKeyboardControls logic to confirm on AIList, and if not switch to and back from AIList sheet with events temporarily Enabled (to restore most default keyboard commands)
        'Key Hijack & Screen flicker...
            'compromised to only do event code (e.g. Before Print, Before Save, Before Close) if on AI List when initiate event
            'EventWorkbookBeforeClose
            'EventWorkbookBeforePrint...
                'NO CHANGE (ALREADY did JumpOut if not on AI sheet)
            'EventWorkbookBeforeSave
                'OriginalUpdating = Application.ScreenUpdating
        'Arrows & Mouse bug...
            'implimented Global var LastColKeyTrack,  WAS: Static LastCol As Integer
            'Relocated to Worksheet_SelectionChange (so works on mouse too)
            'removed from end of a2125 (which was only used key keyboard, not mouse)
        'Default Sorting... in a3200Sort REMOVED AIRespCol, AIPriorityCol, and AIDueCol from default sort criteria
        
        
'----------------- Version 3.64 James-----------------
        'added JumpOut line to Sub EventWorkbookBeforePrint to address post-PrinetPreview lockup on other sheets (see sub comment for more info)
        'only altered VBa, so did NOT manually do PrepAIListForRelease

'----------------- Version 3.63 James-----------------
        'confirmed Mike 3.62a work, and added a bit of exta comments to REMs
        'Removed "JTF Engineering" from bttom of "|fffd||fffd|Calendar" sheet
        'Made "|fffd||fffd|AI List Support" main column wider (so footer's far right text does NOT get cut off when export to email)
        'Made both "|fffd||fffd|" sheets tab color dark grey (so not default color, and sheet name a bit harder to read, incase seen somehow
        'Added a bit more to PrepAIListForRelease steps
        'Did PrepAIListForRelease

'----------------- Version 3.62a Mike-----------------
        'Disabled a3610AutoColumnWidthGrow
        'Modified a3600UpdateDropDownDefaults to make cells visible prior to sort, then hide again
        'Cleaned up extra info in drop down defaults area

'----------------- Version 3.62 James-----------------
        'Modify a3610AutoColumnWidthGrow to: 'Enable auto-column width grow when 0 or 1 space, and is adding to drop down
        'put "SetEventsScreenProtect False" at top of a2140Change
            'FIX "Undo" BUG, and Confirm James FIXED "Recursive" BUG:
                'Reproduce "Recursive" bug in 3.60zh:  Put BREAK in Worksheet_Change, set RunMode FALSE, copy/paste 1 cell to another
                    '...notice it will recursively loop to Worksheet_Change many many times! ! ! !
                    '...notice it will eventually stop, I think because Undo histroy reaches a limit OR HAS A BUG IN IT TOO!
                'FIX "Undo" BUG:  Investigate why it does stop and fix if is a sign of a bug in Undohistroy code.  (and impliment fix in latest code)
                'Confirm James FIXED "Recursive" BUG in latest AI List is ok:
                    'Had to DISABLE EVENTS within a2126Paste (then restore envets, as a precaution)
        'IS OK AS-IS:   Identify if a MIKE TYPO between "count" and "column" usage in a2140Change line 2 which says "If....And Target.Count <> (AIUpdatedCol ..."
        'Fixed misc other bugs w/ Mike's help


'----------------- Version 3.61 James-----------------
    'COMPLETED ITEMS
        'Confirm RunTime = 0.7 as in AutoStart, DOES control RunScreen (sets max time in seconds RunScreen is shown on people's machines)
        'Modify (c) notice....
            'Make HELP SAY:             =IF(OR(AIUserVersion="CUser",AIUserVersion="RecentCUser"),"Standard Content |fffd| 2012",IF(AIUserVersion="ExcelAutomationHelp","Standard Content |fffd| 2012 Excel Automation Help  |  Submit Automation Requests to Help@ExcelAutomationHelp.com","Standard Content |fffd| 2012 JTF Automation  |  Submit Automation Requests to Help@JTFAutomation.com"))
                'Mike temp changed to:  =IF(OR(AIUserVersion="CUser",AIUserVersion="RecentCUser"),""                       ,IF(AIUserVersion="ExcelAutomationHelp","Standard Content |fffd| 2012 Excel Automation Help  |  Submit Automation Requests to Help@ExcelAutomationHelp.com","Standard Content |fffd| 2012 JTF Automation  |  Submit Automation Requests to Help@JTFAutomation.com"))
            'Make BEFORE PRINT not hied AIFooter, but instead set AICopyright cell to be blank (+vs "='> HELP <'!B29")
            'Make AutoOPEN not only show AIFooter, but also set AICopyright cell to be "='> HELP <'!B29" (vs blank)
            'DO NOT DO this older idea:
                'James to confirm the following is an acceptable change on HELP sheet, Cell B29:
                'Mike to confirm HELP SHEET forced visible (so "(c)" remains seen at all times by CUSER) and if so then:
                'MAKE HELP SAY:         =IF(OR(AIUserVersion="CUser",AIUserVersion="RecentCUser"),"Standard Content |fffd| 2012" ,IF(AIUserVersion="ExcelAutomationHelp","Standard Content |fffd| 2012 Excel Automation Help  |  Submit Automation Requests to Help@ExcelAutomationHelp.com","Standard Content |fffd| 2012 JTF Automation  |  Submit Automation Requests to Help@JTFAutomation.com"))
                'MAKE AI sheet SAY:     =IF(OR(AIUserVersion="CUser",AIUserVersion="RecentCUser"),""                        ,IF(AIUserVersion="ExcelAutomationHelp","Standard Content |fffd| 2012 Excel Automation Help  |  Submit Automation Requests to Help@ExcelAutomationHelp.com","Standard Content |fffd| 2012 JTF Automation  |  Submit Automation Requests to Help@JTFAutomation.com"))
                '...so for CUsers:  AI sheet doesn't say (c), but HELP does
        'Add original event status tracking/restore to:   (due to problems with AICopyright and EventWorkbookBeforePrint)
            'EventWorkbookBeforePrint
            'SetJTFLogoVisibility
            'zApprovalCheck
        'Review and update filter names within menus (to make consistant and educate of other filter options, where appropriate)
        'Built and added a3610AutoColumnWidthGrow to a3600  BUT FORGOT TO: 'Enable auto-column width grow when 0 or 1 space, and is adding to drop down
        'Make "Hidden" NOT cap sensative in AIDoesRowRemainVisible
        'Made DisplayNamedRangeRow use track OrigProtectContents
        'test copy/paste text cells of:  1 to 1, 1 to many, many to many,from web as text, from word as text and as cells
            'to confirm ok in general
            'since mike REMd "DB JTF Check"
        'made zApprovalCheck run on sort if zAppRan <> "Yes" (my VBA global variable tracking method, intentinally not intuative name or true/false)
        'modified a2210ZoomToWindow to include optional MaxZoomPercent, and implimented as 130% in a few strategic auto-running instances, such as auto open.
        
        
'----------------- Version 3.60zh Mike-----------------
    'COMPLETED ITEMS
        'Disabled ShrinkThenWrap (in a way easy and clear, on how to restore)
        'Cleaned up a2140 & a2120 and other miscellaneous a2XXXX subs
    'FLICKER ANALYSIS:  (James put on FUTURE FEATURE list)
        'Could improve flicker by making custom conditional formatting, or maybe by rebuilding AI sheet from new?
        'Flickering is caused by conditional formatting (native Excel functionality) and cannot be improved with screen updating controls
        'suspect is embeded/infected in "sheet" because....
            'Copied AI sheet with Cond Format (with no VBA), then deleted graphics = improvied, but still flickers
            'Copied AI cells with only Cond Format (with no VBA and no graphics) = NO FLICKER
                'then copied in Calendar image, and flicker did NOT copy over = implies in SHEET, not graphics
        '"BEFORE SAVE" flickering can be improved with better logic (perhaps some in regards to the screen updating logic)
        
        
    
'----------------- Version 3.60zd James-----------------
    'fix flicker on data enter?  (worse on calendar)
        'Continue to implimented SetEventsScreenProtectTEMP & SetEventsScreenProtectRESTORE
          'make subs use either (A)Local variables to store ORIG (original state), or (B) Global array to store ORIG
    'Investigated alternatives to Disable ShrinkThenWrap (in a way easy and clear, on how to restore)
    
    
'----------------- Version 3.60aj Mike-----------------
    'Review & Hidden modes:
        'a3100
        'a39XX
        'a2125
        'a2230
        'a1000 functions
        'a5000 menus
    
    'Moved Default Drop downs onto AI List sheet (I believe this will allow us to
        'easily make multiple copies of the AI List Sheet)
    'On AI LIST:  Removed hiding of footer (now always shows) for C Users (Sub EventWorkbookBeforePrint)
    
    
    
'==================================================================================================================================
'==================================================================================================================================
'==================================================================================================================================
'==================================================================================================================================


Sub PrepAIListForRelease() ' To Do List prior to release of a OFFICIAL version....
' = = = = = = = FINAL CHECKS = = = = = = =
    '1) "Debug Test" MANUALLY...
    '|fffd| Save file in form of "AI List - BLANK TEMPLATE v3.55.xlsm"
    '|fffd| Set in a1:               RunMode = FALSE
    '|fffd| Set in a1:               ForceUserDomainAsCUser = "M90-W7"    (if testing CUser on JTF PC)
    '|fffd| SaveAs "AI List... - Debug mode test"
        '|fffd| Do FINAL 2007 TESTING in this debug mode (note a few "graident" related errors may occur, but should be manully ran past those lines)
        '|fffd| Do FINAL 2003 TESTING in this debug mode
        '|fffd| Save 2 copies as CUser, open one as non CUser to set to "Recent" mode... then temp set PC date to 2.1 months or more future, and confirm logo comes back on
        
    
    '2) "Set Global Vars" MANUALLY...
    '|fffd| ReOpen main file (not debug copies)
    '|fffd| Set in a1:               RunMode=TRUE    &    ShowRunScreen=TRUE   & others in that area per comments
    '|fffd| Set in a1:               AIVersionNumAsText
        '|fffd| if was changed run:  zStartup:  Auto_Open
    '|fffd| Set in a1:               ForceUserDomainAsCUser = "Intentionally Not Set to M90-W7"
    '|fffd| Set in zzApproval:       EvalWarnDate & EvalEndDate   ...THEN set Calendar reminder ! ! !
    '|fffd| Confirm AILIST and HELP sheets have PASSWORD ON and HEADINGS OFF (but "<Add Your Sheets Here>" is opposite)
    '|fffd| Confirm any NEW SUBS have:    If RunMode Then On Error Resume Next Else On Error GoTo 0
    '|fffd| Confirm any NEW modules have:    Option Private Module 'subs are NOT available outside this project
    
    
    '3) "User Tips" MANUALLY...
    '|fffd| import the User Tips (from last release version)
    '|fffd| run rebuild-drop-downs
    '|fffd| add "<Enter any value> " into Category (with SPACE at end, so is kept)
    '|fffd| sort by CAT (AI# should also be in order)
    '|fffd| Temporarily activate "Showing All Column Set"
            'confirm no extra text in other fields
            'confirm all tasks have "2001" UPDATED dates (including the closed one)
            'confirm no "CREATED" dates
    '|fffd| Activate default "CATEGORY SET"

    '4) "Prep Look" MANUALLY...
    '|fffd| Confirm (c) year in B29 of HELP sheet
            'Update(c) year in VBA if changed
    '|fffd| Set all 3 sheets to exactly:     100% zoom  (zoom out then back to 100%, to assure no pics have zoom scale bug)
    '|fffd| Click on HOME tab (to maximize visible area for new users)
    '|fffd| Select SUBJECT cell of #4, then CTRL+HOME on other 2 sheets
    
    '5) FIFTH RUN THESES...
    SetJTFLogoVisibility True ' force LOGO ON, and set AILogoOnDate = 0, and set File Property
    '|fffd| Confirm Logo and all file PROPERTIES are as desired, typically AUTHOR & COMMENT:
        '|fffd|   JTFAutomation.com | +1 832-800-4JTF
        '|fffd|   ExcelAutomationHelp.com | +1 315-805-HELP
        '|fffd|   AI List (c) 2013
    Stop 'EITHER...
        ThisWorkbook.Names("AIUserVersion").RefersTo = "ExcelAutomationHelp"          'Resets version to default as JTF Automation
            SetJTFLogoVisibility
    
    Stop 'or....
        ThisWorkbook.Names("AIUserVersion").RefersTo = "JTFAutomation"          'Resets version to default as JTF Automation
            SetJTFLogoVisibility
    'Then always...
    HideAllNamedRangesWithAI
    
    '5) FINALLY MANUALLY...
    '|fffd| Save in the form of:     "AI List - BLANK TEMPLATE v4.0.xlsm"
    '|fffd| Close, Exit Excel, Re-Open file and:    confirm VBA protected, zoom 100%, and SAVE AGAIN (as a precaution, and so file name at top is correct even if macros is off)
    '|fffd| Mark file as:    READ-ONLY
    '|fffd| Close, Exit Excel, Re-Open file and confirm: basic functionality (TABS, new item, Sorting, Columns On, Green Button Reset)
    '|fffd| Go increase date in "v3.60.X" .xls (2003)... usually pushed out a year, even if main is 6 months
        
    '6) To make CUSER capable file, in "a1" set "AllowCUserMode = TRUE"  (note HELP sheet does NOT auto-show, if hidden by a user)
End Sub
Sub ShowAllNamedRangesWithAI()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    For Each ws In Worksheets
        For Each RangeName In ws.Names 'Sheets(AIListSheetName).Names      'ThisWorkbook.Names
            If InStr(1, RangeName.Name, "!AI") > 0 Then RangeName.Visible = True
        Next RangeName
    Next ws
    For Each RangeName In ThisWorkbook.Names
        If InStr(1, RangeName.Name, "AIDataValidation") > 0 Then RangeName.Visible = True
    Next RangeName
    ThisWorkbook.Names("AIUserVersion").Visible = True
End Sub
Sub HideAllNamedRangesWithAI()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    For Each ws In Worksheets
        For Each RangeName In ws.Names 'Sheets(AIListSheetName).Names      'ThisWorkbook.Names
            If InStr(1, RangeName.Name, "!AI") > 0 Then RangeName.Visible = False
        Next RangeName
    Next ws
    For Each RangeName In ThisWorkbook.Names
        If InStr(1, RangeName.Name, "AIDataValidation") > 0 Then RangeName.Visible = False
    Next RangeName
    ThisWorkbook.Names("AIUserVersion").Visible = False
End Sub

Attribute VB_Name = "a1000_StandardFunctionsAndSubs"
'=================================== Copyright PROTECTED ====================================
'|fffd| 2013 JTF AUTOMATION  |  Report Unauthorized Use or Automation Errors to:  JTF.ENGINEERING@gmail.com
'================ Unlawful to copy, modify, distribute, plagiarize, or mimic ================
'=================================== Copyright PROTECTED ====================================
'============================================================================================
'============================ USER AGREEMENT of LIMITED USAGE ===============================
'MUST NOT BE DUPLICATED or used by any person, or on any PC, without JTF AUTOMATION direct consent.
'BY OPENING THIS FILE YOU AGREE TO PROTECT THIS FILE FROM UNAUTHORIZED USE OR DISTRIBUTION.
'BY OPENING THIS FILE YOU AUTHORIZE JTF AUTOMATION TO ELECTRONICALLY TRACK COMPUTERS WHERE IT WAS USED.
'IF YOU DO NOT AGREE TO THESE TERMS, YOU MUST DESTROY ALL COPIES OF THIS FILE AND IT'S CONTENT WITHIN 24hrs OF RECEIPT FROM JTF AUTOMATION, AND INFORM JTF AUTOMATION WITHIN 24hrs OF RECEIPT.
'============================ USER AGREEMENT of LIMITED USAGE ===============================
Option Private Module 'subs are NOT available outside this project
Sub SetEventsScreenProtect(Optional EnableEventsTrueFalse = "No Change", Optional ScreenUpdatingTrueFalse = "No Change", Optional SetProtectionTrueFalse = "No Change", Optional CursorValue = "No Change")
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If EnableEventsTrueFalse = False And Application.EnableEvents <> False Then Application.EnableEvents = False
    If ScreenUpdatingTrueFalse = False And Application.ScreenUpdating <> False Then Application.ScreenUpdating = False
    If SetProtectionTrueFalse = False Then SetProtection False
    
    If SetProtectionTrueFalse = True Then SetProtection True
    If ScreenUpdatingTrueFalse = True And Application.ScreenUpdating <> True Then Application.ScreenUpdating = True
    If EnableEventsTrueFalse = True And Application.EnableEvents <> True Then Application.EnableEvents = True
    
    If CursorValue <> "No Change" And Application.Cursor <> CursorValue Then Application.Cursor = CursorValue
End Sub
Sub SetEventsScreenProtectTEMP(Optional EnableEventsTrueFalseTEMP = "No Change", Optional ScreenUpdatingTrueFalseTEMP = "No Change", Optional SetProtectionTrueFalseTEMP = "No Change", Optional CursorValueTEMP = "No Change")
    'to TEMPORARY set & SAVE, to RESTORE soon after (NOTE: only works 1 level deep, can't be called 2nd time, before RESTORE)
    'to be used in small code TEMPORARY places, where you don't know the state it WILL be in, but do know the temporary state you WANT to set to then shortley after restore
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    'confirm TEMP not already in use
    If SetEventsScreenProtectTEMP_InUse = True Then DBStop 'should not set, if in use
    'SAVE Orig
    SetEventsScreenProtectTEMP_InUse = True
    OrigEnableEventsTrueFalse = Application.EnableEvents
    OrigScreenUpdatingTrueFalse = Application.ScreenUpdating
    OrigSetProtectionTrueFalse = ActiveSheet.ProtectContents
    OrigCursorValue = Application.Cursor
    'Set TEMP
    SetEventsScreenProtect EnableEventsTrueFalseTEMP, ScreenUpdatingTrueFalseTEMP, SetProtectionTrueFalseTEMP, CursorValueTEMP
End Sub
Sub SetEventsScreenProtectRESTORE()
    'to be used shortley AFTER SetEventsScreenProtectTEMP
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    'confirm TEMP in use
    If SetEventsScreenProtectTEMP_InUse <> True Then DBStop
    'Set w/ ORIG
    SetEventsScreenProtect OrigEnableEventsTrueFalse, OrigScreenUpdatingTrueFalse, OrigSetProtectionTrueFalse, OrigCursorValue
    'clear ORIG
    SetEventsScreenProtectTEMP_InUse = False
    OrigEnableEventsTrueFalse = "TEMP Value Not Saved"
    OrigScreenUpdatingTrueFalse = "TEMP Value Not Saved"
    OrigSetProtectionTrueFalse = "TEMP Value Not Saved"
    OrigCursorValue = "TEMP Value Not Saved"
End Sub
Function AIDetailLastRow() As Integer
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    AIDetailLastRow = Range("AIFooter").Row - 1
End Function
Function AIDetailFirstVisibleColumn() As Integer
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    For iCol = AINumCol To AIDetailLastCol
        If Cells(AIHeaderRow, iCol).Width > 0 Then Exit For
    Next iCol
    AIDetailFirstVisibleColumn = iCol
End Function
Function AIDetailLastVisibleColumn() As Integer
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    For iCol = AIDetailLastCol To AIDetailFirstCol Step -1
        If Cells(AIHeaderRow, iCol).Width > 0 Then Exit For
    Next iCol
    AIDetailLastVisibleColumn = iCol
End Function
Function AIDetailLastVisibleEditableColumn() As Integer
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    For iCol = AICommentCol To AIDetailFirstCol Step -1
        If Cells(AIHeaderRow, iCol).Width > 0 Then Exit For
    Next iCol
    AIDetailLastVisibleEditableColumn = iCol
End Function
Function AIDetailMiddleVisibleEditableColumn() As Integer
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    For iCol = AIDescriptionCol To AICommentCol
        If Cells(AIHeaderRow, iCol).Width > 0 Then Exit For
    Next iCol
    If iCol > AICommentCol Then iCol = AIDetailLastVisibleEditableColumn
    AIDetailMiddleVisibleEditableColumn = iCol
End Function
Function AIIsRowOpen(Optional AIRow = "<USE CURRENT ROW>") As Boolean
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If AIRow = "<USE CURRENT ROW>" Then AIRow = ActiveCell.Row
    If Cells(AIRow, AIClosedCol) = Range("AIOpen") Then AIIsRowOpen = True
End Function
Function AIIsRowClosed(Optional AIRow = "<USE CURRENT ROW>") As Boolean
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If AIRow = "<USE CURRENT ROW>" Then AIRow = ActiveCell.Row
    If Cells(AIRow, AIClosedCol) = Range("AIClosed") Then AIIsRowClosed = True
End Function
Function AIIsRowHidden(Optional AIRow = "<USE CURRENT ROW>") As Boolean
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If AIRow = "<USE CURRENT ROW>" Then AIRow = ActiveCell.Row
    AIIsRowHidden = Rows(AIRow).Hidden
End Function
Sub AIHideRow(Optional AIRow = "<USE CURRENT ROW>", Optional Hide As Boolean = True)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If AIRow = "<USE CURRENT ROW>" Then AIRow = ActiveCell.Row
    If Rows(AIRow).Hidden <> Hide Then Rows(AIRow).Hidden = Hide
End Sub
Function AIIsGroupExpanded(Optional AIRow = "<USE CURRENT ROW>") As Boolean
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If AIRow = "<USE CURRENT ROW>" Then AIRow = ActiveCell.Row
    For iRow = AIRow To AIDetailFirstRow Step -1
        If AIIsGroupRow(iRow) Then
            If Left(Cells(iRow, AICollapseCol), Len(Range("AICollapsed"))) = Range("AIExpanded") Then AIIsGroupExpanded = True
            Exit For
        End If
    Next iRow
End Function
Function AIIsNewGroup(Optional AIRow = "<USE CURRENT ROW>") As Boolean
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If AIRow = "<USE CURRENT ROW>" Then AIRow = ActiveCell.Row
    If InStr(1, Cells(AIRow, AICollapseCol), "New (since last sort)") > 0 Then AIIsNewGroup = True
End Function
Function AIIsGroupRow(Optional AIRow = "<USE CURRENT ROW>") As Boolean
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If AIRow = "<USE CURRENT ROW>" Then AIRow = ActiveCell.Row
    If AIRow >= AIDetailFirstRow And AIRow <= AIDetailLastRow And Cells(AIRow, AICollapseCol) <> "" Then AIIsGroupRow = True
End Function
Function AIIsDetailRow(Optional AIRow = "<USE CURRENT ROW>") As Boolean
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If AIRow = "<USE CURRENT ROW>" Then AIRow = ActiveCell.Row
    If AIRow >= AIDetailFirstRow And AIRow <= AIDetailLastRow And Cells(AIRow, AICollapseCol) = "" Then AIIsDetailRow = True
End Function
Function AIIsNewRow(Optional AIRow = "<USE CURRENT ROW>") As Boolean
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If AIRow = "<USE CURRENT ROW>" Then AIRow = ActiveCell.Row
    If AIRow >= AIDetailFirstRow And AIRow <= AIDetailLastRow And AIIsDetailRow(AIRow) And Cells(AIRow, AIUpdatedCol) = "" Then AIIsNewRow = True
End Function
Function AINextGroupRow(Optional RowStart = "<USE CURRENT ROW>", Optional IncludeHiddenGroups = True) As Integer
    'Find the next group header row
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If RowStart = "<USE CURRENT ROW>" Then RowStart = ActiveCell.Row
    For iRow = RowStart + 1 To AIDetailLastRow
        If (IncludeHiddenGroups Or Not AIIsRowHidden(iRow)) And AIIsGroupRow(iRow) Then AINextGroupRow = iRow: Exit Function
    Next iRow
End Function
Function AIPreviousGroupRow(Optional RowStart = "<USE CURRENT ROW>", Optional IncludeHiddenGroups = True) As Integer
    'Find the previous group header row
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If RowStart = "<USE CURRENT ROW>" Then RowStart = ActiveCell.Row
    For iRow = RowStart - 1 To AIDetailFirstRow Step -1
        If (IncludeHiddenGroups Or Not AIIsRowHidden(iRow)) And AIIsGroupRow(iRow) Then AIPreviousGroupRow = iRow: Exit Function
    Next iRow
End Function
Function AIGroupLastRow(Optional RowStart = "<USE CURRENT ROW>") As Integer
    'Find the group last row
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If RowStart = "<USE CURRENT ROW>" Then RowStart = ActiveCell.Row
    For iRow = RowStart + 1 To AIDetailLastRow
        If AIIsGroupRow(iRow) Then AIGroupLastRow = iRow - 1: Exit Function
    Next iRow
    If AIGroupLastRow = 0 Then AIGroupLastRow = AIDetailLastRow
End Function
Function AIFindGroupRow(GroupName As String) As Integer
    'Find the group header row of a group name (string)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    For iRow = AIDetailFirstRow To AIDetailLastRow
        If Mid(Cells(iRow, AICollapseCol), 3) = GroupName Then
            AIFindGroupRow = iRow
            Exit Function
        End If
    Next iRow
End Function
Function AIFindCurrentSortColumn() As Integer
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    For iCol = AIDetailFirstCol To AIDetailLastCol
        If Right(Cells(AIHeaderRow, iCol), Len(Range("AISortAscending"))) = Range("AISortAscending") Or _
        Right(Cells(AIHeaderRow, iCol), Len(Range("AISortDescending"))) = Range("AISortDescending") Then
            AIFindCurrentSortColumn = iCol
            Exit For
        End If
    Next iCol
End Function
Function AIFindAdjacentVisibleRow(StartRow, Previous As Boolean)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    AIFindAdjacentVisibleRow = StartRow
    If Previous Then Increment = -1 Else Increment = 1
    iRow = StartRow + Increment
    Do While iRow >= AIDetailFirstRow And iRow <= AIDetailLastRow
        If Not AIIsRowHidden(iRow) Then AIFindAdjacentVisibleRow = iRow: Exit Do
        iRow = iRow + Increment
    Loop
End Function
Function AIDoesRowRemainVisible(Optional AIRow = "<USE CURRENT ROW>") As Boolean
    'Figure out if Row shall be visible based on Filters
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If RowStart = "<USE CURRENT ROW>" Then RowStart = ActiveCell.Row
    
    'Hidden row check
    If GetRange("AIHiddenVisibility") = False Then
        If UCase(Cells(AIRow, AIPriorityCol)) = "HIDDEN" Or UCase(Cells(AIRow, AIStatusCol)) = "HIDDEN" Then AIDoesRowRemainVisible = False: Exit Function
    End If
    
    'Show Only These Values check
    ShowValuesRow = Range("AIShowValuesRow").Row
    For iCol = AIDetailFirstCol To AIDetailLastCol
        CurrentValue = Cells(AIRow, iCol)
        CompareValue = Cells(ShowValuesRow, iCol)
        If CompareValue <> "" And CompareValue <> CurrentValue Then AIDoesRowRemainVisible = False: Exit Function
    Next iCol
    
    'Show Only These Values check
    HideValuesStartRow = Range("AIHideValuesStartRow").Row
    For iCol = AIDetailFirstCol To AIDetailLastCol
        CurrentValue = Cells(AIRow, iCol)
        iRow = HideValuesStartRow
        CompareValue = Cells(iRow, iCol)
        Do While CompareValue <> ""
            If CompareValue = CurrentValue Then AIDoesRowRemainVisible = False: Exit Function
            iRow = iRow + 1
            CompareValue = Cells(iRow, iCol)
        Loop
    Next iCol
    
    'Row Passes all Filters
    AIDoesRowRemainVisible = True

End Function
Sub SelectPreviousWorksheet()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    StartSheet = ActiveSheet.Index
    For I = StartSheet - 1 To 1 Step -1
        If Sheets(I).Visible = True Then
            Application.ScreenUpdating = False
            Sheets(I).Activate
            Application.ScreenUpdating = True
        End If
        If ActiveSheet.Index <> StartSheet And ActiveSheet.Visible = True Then Exit Sub
    Next I
End Sub
''Sub SelectPreviousWorksheet()
''    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
''    StartSheet = ActiveSheet.Index
''    OrigScreenUpdating = Application.ScreenUpdating
''    FirstPass = True
''FindSheet:
''    For i = StartSheet - 1 To 1 Step -1
''        If Sheets(i).Visible = True Then
''            Application.ScreenUpdating = False
''            Sheets(i).Activate
''            Application.ScreenUpdating = OrigScreenUpdating
''        End If
''        If ActiveSheet.Index <> StartSheet And ActiveSheet.Visible = True Then Exit Sub
''    Next i
''NoSheetFound: ' So Must Be End Of List.... so start searching from other end
''    If FirstPass <> True Then Exit Sub
''    Beep
''    FirstPass = False
''    StartSheet = Worksheets.Count + 1
''    GoTo FindSheet
''End Sub

Sub SelectNextWorksheet()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    StartSheet = ActiveSheet.Index
    On Error Resume Next
    For I = StartSheet + 1 To Worksheets.Count
        If Sheets(I).Visible = True Then
            Application.ScreenUpdating = False
            Sheets(I).Activate
            Application.ScreenUpdating = True
        End If
        If ActiveSheet.Index <> StartSheet Then Exit Sub
    Next I
End Sub
''Sub SelectNextWorksheet()
''    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
''    StartSheet = ActiveSheet.Index
''    OrigScreenUpdating = Application.ScreenUpdating
''    On Error Resume Next
''    FirstPass = True
''FindSheet:
''    For i = StartSheet + 1 To Worksheets.Count
''        If Sheets(i).Visible = True Then
''            Application.ScreenUpdating = False
''            Sheets(i).Activate
''            Application.ScreenUpdating = OrigScreenUpdating
''        End If
''        If ActiveSheet.Index <> StartSheet Then Exit Sub
''    Next i
''NoSheetFound:     ' So Must Be End Of List.... so start searching from other end
''    If FirstPass <> True Then Exit Sub
''    Beep
''    FirstPass = False
''    StartSheet = 0
''    GoTo FindSheet
''End Sub

Function Convert2DArrayIntoString(my2DArray, Optional Delimiter As String) As String
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If Delimiter = "" Then Delimiter = Chr(131)
    If Not IsArray(my2DArray) Then Convert2DArrayIntoString = my2DArray: Exit Function
    For I = 1 To UBound(my2DArray, 1)
        If I > 1 Then TempString = TempString & Delimiter  'Double Delimiter for new row
        For j = 1 To UBound(my2DArray, 2)
            If I > 1 Or j > 1 Then TempString = TempString & Delimiter
            TempString = TempString & my2DArray(I, j)
        Next j
    Next I
    Convert2DArrayIntoString = TempString
End Function
Function ConvertStringInto2DArray(myString, Optional Delimiter As String)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If Delimiter = "" Then Delimiter = Chr(131)

    RowCount = UBound(Split(myString, Delimiter & Delimiter)) + 1
    ColumnCount = UBound(Split(Split(myString, Delimiter & Delimiter)(0), Delimiter)) + 1
    If RowCount < 1 Then RowCount = 1
    If ColumnCount < 1 Then ColumnCount = 1
    Dim my2DArray()
    ReDim my2DArray(1 To RowCount, 1 To ColumnCount)
    
    For I = 1 To RowCount
        If I <> 1 Then myString = Mid(myString, Len(Delimiter) + 1)     'Eliminates Double Delimiter between rows
        For j = 1 To ColumnCount
            If InStr(1, myString, Delimiter) > 0 Then
                my2DArray(I, j) = Left(myString, InStr(1, myString, Delimiter) - 1)
                myString = Mid(myString, Len(my2DArray(I, j) & Delimiter) + 1)
            Else
                my2DArray(I, j) = myString
            End If
        Next j
    Next I
    
    ConvertStringInto2DArray = my2DArray
End Function
Sub DisplayNamedRangeRow(NamedRange, ByVal Show As Boolean, Optional SheetName = AIListSheetName)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    OrigProtectContents = ActiveSheet.ProtectContents
    If OrigProtectContents = True Then SetEventsScreenProtect , , False
    Sheets(SheetName).Range(NamedRange).EntireRow.Hidden = Not Show
    If OrigProtectContents = True Then SetEventsScreenProtect , , True
End Sub



''Sub ShrinkThenWrap(ThisCell, Optional MaxShrinkPercent As Single = 0.2)
''This sub is not in use because it does not maintain its capabilities when resorting
''    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
''    'Set cell to shrink to fit so that autofit works
''    SetEventsScreenProtectTEMP False ', False   'SetProtection False
''    ThisCell.WrapText = False
''    ThisCell.ShrinkToFit = True
''
''    'Determine ideal column width
''    ColumnWidth = ThisCell.ColumnWidth
''    ThisCell.Columns.AutoFit
''    IdealColumnWidth = ThisCell.ColumnWidth
''    ThisCell.ColumnWidth = ColumnWidth
''
''    'Set wrap or shrink to fit
''    If IdealColumnWidth * (1 - MaxShrinkPercent) > ColumnWidth Then ThisCell.WrapText = True
''    SetEventsScreenProtectRESTORE 'SetProtection True
''End Sub
Attribute VB_Name = "a1_JTFAutomationDOTcom"
'=================================== Copyright PROTECTED ====================================
'|fffd| 2013 JTF AUTOMATION  |  Report Unauthorized Use or Automation Errors to:  JTF.ENGINEERING@gmail.com
'================ Unlawful to copy, modify, distribute, plagiarize, or mimic ================
'=================================== Copyright PROTECTED ====================================
'============================================================================================
'============================ USER AGREEMENT of LIMITED USAGE ===============================
'MUST NOT BE DUPLICATED or used by any person, or on any PC, without JTF AUTOMATION direct consent.
'BY OPENING THIS FILE YOU AGREE TO PROTECT THIS FILE FROM UNAUTHORIZED USE OR DISTRIBUTION.
'BY OPENING THIS FILE YOU AUTHORIZE JTF AUTOMATION TO ELECTRONICALLY TRACK COMPUTERS WHERE IT WAS USED.
'IF YOU DO NOT AGREE TO THESE TERMS, YOU MUST DESTROY ALL COPIES OF THIS FILE AND IT'S CONTENT WITHIN 24hrs OF RECEIPT FROM JTF AUTOMATION, AND INFORM JTF AUTOMATION WITHIN 24hrs OF RECEIPT.
'============================ USER AGREEMENT of LIMITED USAGE ===============================
Option Private Module 'subs are NOT available outside this project
'======= ENG MUST SET ======= ENG MUST SET ======= ENG MUST SET ======='======= ENG MUST SET ======='======= ENG MUST SET ======= Template v16a
        '  Engineer MUST set RunMode TRUE (and all of these) prior to final testing on client file.
        Public Const RunMode = True         'True... or:        FALSE = DEBUG mode (minimal run screen, no sheet protection, yes error debug "on error 0")
  Public Const ShowRunScreen = True         'True... or:        FALSE = Hide it completely (usually left as TRUE)
  Public Const NormalSpeedRunMode = RunMode 'RunMode... or:     FALSE = minimal run screen displaying (but still visible)
  Public Const DBStopOn = Not RunMode       'Not runMode... or: TRUE = stop at any place in code where ENGINEER puts "DbStop" ...to aid debug
'======= ENG MUST SET ======= ENG MUST SET ======= ENG MUST SET ======='======= ENG MUST SET ======='======= ENG MUST SET =======
' = = =  ENG:    T O   D O   L I S T    &    E N G's   N O T E S = = = = = = (short term list, to themselves, listed below this line)


'ENG: CUSTOM GLOBAL Variables and PUBLIC CONST below this line...
'===========================================================
'Public Const... ....see a2000_AI_MAIN for most others
Public Const AIVersionNumAsText = "v3.95" 'AutoOpen loads this in file via a2900PushAIVersionNumAsTextToSheet
Public Const AllowCUserMode = False 'False...  Permit specified users to function as CUsers (i.e. without logo and other branding aspects)
Public Const AllowCustomMode = "FreeVersion" '"FreeVersion"...  Permit custom features, to work for Certified users (i.e. special columns, extra stats, etc)
                            '= "FreeVersion" and MUST SetRange "AICustomMode", 0 (or anything... = normal with NO custom automation permited),
                            '= "T128813D" and MUST SetRange "AICustomMode", 1 (or any other specific project number = start off custom, but allow VBA and AICustomMode named range to change to "free version")
                            'and MUST SetRange "AICustomMode", 0 or 1
Public Const AICustomModeRecentDaysAdder = 30 'typicaly 30 gracy period
Public Const ForceUserDomainAsCUser = "Intentionally Not Set to M90-W7" '"Intentionally Not Set to M90-W7" 'make "M90-W7" ' to activate CUser on James PC (used in SetJTFLogoVisibility) or set to "Intentionally Not Set to M90-W7" since very unlikely someone has that as their username
'....see a2000_AI_MAIN for most others

'===========================================================
'ENG: CUSTOM GLOBAL Variables and PUBLIC CONST above this line...
'ABCDEFGHIJ 10 KLMNOPQRST 20 UVWXYZabcd 30 efghijklmn 40 opqrstuvwx 50 yz
'1234567890    1234567890    1234567890    1234567890    1234567890    12
Public SiteAddy As String   '===>>> be sure to update VBA MODULES & PROPERTY, and also EXCEL SHEETS & NAMED RANGES
Public SiteName As String   ' or the .com  ===>>> be sure to update VBA MODULES & PROPERTY, and also EXCEL SHEETS & NAMED RANGES
Public EmailAddy As String  'as in: "ExcelAndAccessHelp.com   |   ExcelAndAccessHelp@gmail.com   |   Please Wait..."
Public SitePhone As String
Public RegistrationAddy As String

Public Const Bullet = "|fffd|" '<ALT>+7
Public Const Enter = vbCrLf ' same as Chr(13)
Public Const Enter2 = vbCrLf & vbCrLf ' same as Chr(13)
Public Const TabIn = "          "
Public Const TabIn2 = TabIn & TabIn
Global RunTimer 'compare to Timer
Global RunTime  'adder to set minimum
Global RunningText 'to display in status bar


'SR ENG ONLY:  Set below EVALUATION as needed...
Public Const UnLockedFile = True     ''set by SrEng FALSE = LOCKED EVAL FILE 'Set to true to remove evaluation check - in all cases this will always confirm Help tab is present and unaltered (Cell B3)
Public Const LockUserCancelKey = True     'set by SrEng TRUE = locks within zApprovalCheck
Public Const EvalStartDate = #1/1/2011# 'NOT USED IN AI... see "zApprovalCheck"      ...'set by SrEng (JTF ENG Template v19)
Public Const EvalPeriodLength = 7 'NOT USED IN AI...' set by SrEng typ 7
Option Base 1 'dims default to start at 1 vs zero (can always be explicitly dim'd differently for each variable)
Public Sub a000Start() 'set global variable defaults
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    DBStop ' To confirm not in use

'''''    If LockUserCancelKey And RunMode Then Application.EnableCancelKey = xlDisabled Else Application.EnableCancelKey = xlInterrupt ' DISABLE or allow INTERRUPT of VBA by user with CTRL+BREAK or ESC (disable means NO BREAKing in)
'''''
'''''    Randomize: RunTimer = Empty: RunTime = 3 ': RunScreen 0
'''''
'''''    FastRunTime = 0.4
'''''    FreqFast = 5
'''''    ThisSpeed = FreqFast * Rnd()
'''''    If ThisSpeed < (FreqFast - 1) Then RunTime = FastRunTime
'''''    RunScreen 0
'''''
'''''    zApprovalCheck
'''''
'''''    'CUSTOM GLOBAL Variable set in format of     CPNamedRange = Range("CPNamedRange")    ...avoid usage of [bracket] format

End Sub
Public Sub SetRange(ThisNamedRangeInAIListSheet, ToReferToThisValue) 'EMPTY is made as ZERO, otherwise Excel DELETES range!
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    On Error Resume Next '... allow skip next lines, if variable is a BOOLEAN
    If ToReferToThisValue = "False" Then IsBoolean = True
    If ToReferToThisValue = "True" Then IsBoolean = True
    If ToReferToThisValue = Empty And Not IsBoolean Then ToReferToThisValue = "=0" 'any other form of "empty" will crash
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    Sheets(AIListSheetName).Names(ThisNamedRangeInAIListSheet).RefersTo = ToReferToThisValue
End Sub
Public Function GetRange(ThisNamedRangeInAIListSheet) 'ZERO = "empty"
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    On Error Resume Next
    fSet = Mid(Sheets(AIListSheetName).Names(ThisNamedRangeInAIListSheet), 2) ' like:   ""Text""  or "1"
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If fSet = Empty Then
        GoTo JumpOut
    ElseIf Left(fSet, 1) = Chr(34) And Right(fSet, 1) = Chr(34) Then
        'has quotes (shown as double quotes in VBA preview)
        fSet = Mid(fSet, 2, Len(fSet) - 2)
        If fSet = "" Then fSet = Empty
    ElseIf UCase(fSet) = "TRUE" Then
        fSet = True
    ElseIf UCase(fSet) = "FALSE" Then
        fSet = False
    Else
        'no quotes (shown as single quotes in VBA preview)
        fSet = Val(fSet)
    End If
JumpOut:
    GetRange = fSet
End Function
Public Sub RunScreenRnd(Optional ProgressFractionMin = 0.01, Optional RunTimeSeconds = 1, Optional NumberOfStepsMin = 5)
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    RunTime = RunTimeSeconds
    X = ProgressFractionMin
    Randomize
    While X < 1
        X = X + ((1 / NumberOfStepsMin) * Rnd()): If X > 1 Then X = 1
        RunScreen X
    Wend
End Sub
Public Sub SetUpdate(TrueForOnAsNormal As Boolean) 'For performance and to hide the workings of the automation... called by RunScreen automatically
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    If TrueForOnAsNormal Then
        Application.ScreenUpdating = True
        Application.Calculation = xlAutomatic
        Application.StatusBar = False
    Else
        Application.ScreenUpdating = False
        Application.Calculation = xlManual
        If Application.StatusBar = False Then Application.StatusBar = SiteAddy & "   |   " & EmailAddy & "   |   Please Wait..."
    End If
End Sub
Public Sub SetStatusBar(FractionDone, Optional AlternateRunningText As String = "")
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    If AlternateRunningText = "" Then AlternateRunningText = RunningText
    If AlternateRunningText <> "" Then AlternateRunningText = "Running:  " & AlternateRunningText Else AlternateRunningText = "Running..."
    FractionDone = Application.WorksheetFunction.Min(FractionDone, 1):
    Application.StatusBar = SiteAddy & "   |   " & EmailAddy & "   |   " & AlternateRunningText & "   |   Progress = " & FormatNumber((100 * FractionDone), 0) & "%   |   " & Space(Int(100 * FractionDone) Mod 3) & "<<<Running>>>"
End Sub
Public Sub EStop(Optional ErrorNumber = 22074, Optional YesReturnBackVsEnd = True, Optional YesLeaveSetProtectionAsIsVsForceOn = True)
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    If LockUserCancelKey Then Application.EnableCancelKey = xlDisabled Else Application.EnableCancelKey = xlInterrupt
    MsgBox "UNEXPECTED ERROR:  An error has occurred.  Please check your data and retry." & Chr(13) & Chr(13) & _
    "If this error persists, please contact us and reference error code:  " & ErrorNumber, 0, SiteAddy
    If Not YesLeaveSetProtectionAsIsVsForceOn Then SetProtection True
    If Not YesReturnBackVsEnd Then
        RunScreen 1
        End
    End If
End Sub
'====================================================================
'====================================================================
'==================== SUBS BELOW UPDATED IN AI LIST =================
'====================================================================
'====================================================================


Public Sub RunScreen(Optional ProgressFractionOr1ToEnd = -0.74, Optional YesWaitTillRunTimer As Boolean = True, Optional YesAntiSmooth As Boolean = True)  ' 1.0 (100%) to turn off, blank for random number ...also calls SetUpdat
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    If LockUserCancelKey And RunMode Then Application.EnableCancelKey = xlDisabled Else Application.EnableCancelKey = xlInterrupt ' DISABLE or allow INTERRUPT of VBA by user with CTRL+BREAK or ESC (diable means NO BREAKing in)
    If Not ShowRunScreen Then Exit Sub
    'Set RunTime since NOT CALLING a000Start in the AI List
    If RunTime = Empty Then RunTime = 0.7
    'If Not RunMode Then Exit Sub
    If NormalSpeedRunMode = False Then YesWaitTillRunTimer = False 'FALSE = No wait for human read
    'must set RunTime to desired TOTAL time minimum, globaly outside some place
    If RunTimer = Empty Or RunTimer <= 0 Then RunTimer = Timer  'START of RunTimer
'    If ProgressFractionOr1ToEnd = -0.74 Then ProgressFractionOr1ToEnd = Rnd()
    If ProgressFractionOr1ToEnd < 0 Then ProgressFractionOr1ToEnd = Rnd()
    If ProgressFractionOr1ToEnd = 1 Then GoTo JumpTo1
    'YesAntiSmooth
    LabelFullProgress = a9_RunScreen.LabelFullProgress.Width + 0.001
    PrevProg = a9_RunScreen.LabelProgress.Width / LabelFullProgress
    If YesAntiSmooth Then ProgressFractionOr1ToEnd = (ProgressFractionOr1ToEnd - PrevProg) * (0.5 + (0.5 * Rnd())) + PrevProg
    'RunTimer service
    If YesWaitTillRunTimer And RunMode Then While Timer < (RunTimer + (ProgressFractionOr1ToEnd * RunTime)): Wend
    'PROGRESS % update
    If ProgressFractionOr1ToEnd > 1 Then ProgressFractionOr1ToEnd = 1
    
    a9_RunScreen.FrameProgress.Caption = FormatNumber((100 * ProgressFractionOr1ToEnd), 0) & "%"
    a9_RunScreen.LabelProgress.Width = Int(ProgressFractionOr1ToEnd * LabelFullProgress)
    'SHOW
    If ProgressFractionOr1ToEnd <= 1 Then
        If Application.StatusBar = False Then SetUpdate False
        a9_RunScreen.Show vbModeless
        a9_RunScreen.Repaint
        SetStatusBar ProgressFractionOr1ToEnd
    Else
JumpTo1:
        '100% then CLOSE
        If Not a9_RunScreen.Visible Then
            RunTimer = Empty
            Exit Sub
        End If
        RunScreen 1.0001, False, False
        If YesWaitTillRunTimer And RunMode Then While Timer < (RunTimer + (ProgressFractionOr1ToEnd * RunTime)): Wend
        Unload a9_RunScreen
        RunTimer = Empty
        SetUpdate True
    End If
End Sub
Public Function FindCol(Optional WithThisValue = "<WITH ANY NON-EMPTY VALUE>", Optional InThisRow = 1, Optional InThisSheet = "<USE ACTIVE SHEET NAME>", Optional StartingFromThisCol = 1)
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    If InThisSheet = "<USE ACTIVE SHEET NAME>" Then InThisSheet = ActiveSheet.Name
    LastCol = Sheets(InThisSheet).Cells.SpecialCells(xlCellTypeLastCell).Column    'Modified from original as this does not kill undo
    FindCol = 0
    For X = StartingFromThisCol To LastCol
        ThisColValue = Sheets(InThisSheet).Cells(InThisRow, X)
        If WithThisValue = "<WITH ANY NON-EMPTY VALUE>" Then
            If ThisColValue <> Empty Then GoTo Found
        Else
            If ThisColValue = WithThisValue Then GoTo Found
        End If
    Next X
    Exit Function ' not found, return zero
Found:
    FindCol = X
End Function
Public Function FindRow(Optional WithThisValue = "<WITH ANY NON-EMPTY VALUE>", Optional InThisCol = 1, Optional InThisSheet = "<USE ACTIVE SHEET NAME>", Optional StartingFromThisRow = 1, Optional WithThisValueInCellToRight = "", Optional FinishingInThisRow = "LastRow")
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    If InThisSheet = "<USE ACTIVE SHEET NAME>" Then InThisSheet = ActiveSheet.Name
    On Error Resume Next
    If FinishingInThisRow = "LastRow" Then FinishingInThisRow = Sheets(InThisSheet).Cells.SpecialCells(xlCellTypeLastCell).Row              'Modified from original as this does not kill undo, but this does not work if sheet is protected
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    If Not IsNumeric(FinishingInThisRow) Then FinishingInThisRow = ActiveSheet.UsedRange.Rows.Count                                         'Use other method if previous one did not work
    FindRow = 0
    If StartingFromThisRow <> FinishingInThisRow Then StepDirection = Sgn(FinishingInThisRow - StartingFromThisRow) Else StepDirection = 1  'Modified from original
    For Y = StartingFromThisRow To FinishingInThisRow Step StepDirection                                                                    'Modified from original
        ThisRowValue = Sheets(InThisSheet).Cells(Y, InThisCol)
        If WithThisValue = "<WITH ANY NON-EMPTY VALUE>" Then
            If ThisRowValue <> Empty Then GoTo Found
        Else
            If ThisRowValue = WithThisValue Then
                If WithThisValueInCellToRight = "" Then GoTo Found
                If Sheets(InThisSheet).Cells(Y, InThisCol + 1) = WithThisValueInCellToRight Then GoTo Found
            End If
        End If
    Next Y
    Exit Function ' not found, return zero
Found:
    FindRow = Y
End Function
Public Sub SetProtection(Optional TrueForProtect As Boolean = True, Optional WorksheetNameIfNotActive = "UseTheActiveWorksheet", Optional YesBlockFormatEditing = True)
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ThisWorkbook.Activate
    On Error Resume Next: ShortSeed = 74 * 2.2 ': ShortDefault = see below...
    If WorksheetNameIfNotActive = "UseTheActiveWorksheet" Then WorksheetNameIfNotActive = ActiveSheet.Name
'    If TrueForProtect And RunMode Then
    If TrueForProtect Then
        'If Worksheets(WorksheetNameIfNotActive).ProtectContents <> False Then <<<< not included, as a precaution, so FAILS SAFE if line crashes
        Worksheets(WorksheetNameIfNotActive).Protect Password:=Chr(ShortSeed - 97.8) & Chr(ShortSeed - 57.8) & Chr(ShortSeed - 54.8), AllowFiltering:=False, AllowSorting:=False, AllowFormattingCells:=Not YesBlockFormatEditing
'        ActiveWindow.DisplayHeadings = False
    Else
        If Worksheets(WorksheetNameIfNotActive).ProtectContents <> False Then Worksheets(WorksheetNameIfNotActive).Unprotect Password:=Chr(ShortSeed - 97.8) & Chr(ShortSeed - 57.8) & Chr(ShortSeed - 54.8)
    End If
End Sub
Public Sub DBStop()
    If DBStopOn And (RunMode = False) Then Stop ' ENG:  use F8 to run out and see where DbStop at...
End Sub
Attribute VB_Name = "a2000_AI_Main"
'=================================== Copyright PROTECTED ====================================
'|fffd| 2013 JTF AUTOMATION  |  Report Unauthorized Use or Automation Errors to:  JTF.ENGINEERING@gmail.com
'================ Unlawful to copy, modify, distribute, plagiarize, or mimic ================
'=================================== Copyright PROTECTED ====================================
'============================================================================================
'============================ USER AGREEMENT of LIMITED USAGE ===============================
'MUST NOT BE DUPLICATED or used by any person, or on any PC, without JTF AUTOMATION direct consent.
'BY OPENING THIS FILE YOU AGREE TO PROTECT THIS FILE FROM UNAUTHORIZED USE OR DISTRIBUTION.
'BY OPENING THIS FILE YOU AUTHORIZE JTF AUTOMATION TO ELECTRONICALLY TRACK COMPUTERS WHERE IT WAS USED.
'IF YOU DO NOT AGREE TO THESE TERMS, YOU MUST DESTROY ALL COPIES OF THIS FILE AND IT'S CONTENT WITHIN 24hrs OF RECEIPT FROM JTF AUTOMATION, AND INFORM JTF AUTOMATION WITHIN 24hrs OF RECEIPT.
'============================ USER AGREEMENT of LIMITED USAGE ===============================
Option Private Module 'subs are NOT available outside this project
Option Base 1 'dims default to start at 1 vs zero (can always be explicitly dim'd differently for each variable)

'Set Public Variables and Constants
Public CurrentCell As Range

Public PreviousCellValue
Public PreviousCellAddress
Public PreviousPreviousCellValue
Public PreviousPreviousCellAddress

Global IsIna4030EmailAIListAsPDF
Global ExpiredButCheckForExtendedLife
Global Wait5SecExtendedLifeAgain
Global MsgUpgradeSoonLongForExtendedLife
Global LastTimeDisplayExtendedLifeWarning
'Global SetEventsScreenProtectTEMP_InUse, OrigEnableEventsTrueFalse, OrigScreenUpdatingTrueFalse, OrigSetProtectionTrueFalse, OrigCursorValue  'used by: SetEventsScreenProtectTEMP & SetEventsScreenProtectRESTORE

Global AICustomMode 'set from AllowCustomMode and then named range, but changed here and in named range to "FreeVersion" if not certified PC
Global AICustomModeLast 'tracks date
Global AICustomModeExtendedLifeUser 'allows bypass zApproval Lockout by date
Global LastColKeyTrack 'used in a2125, and Selection Change by mouse

Public AISortCol As Integer
Public AIPreviousScrollRow As Integer
Public GroupOrder() As String
Public AIReadOnlyMode As Boolean
Public FileCloseMode As Boolean
Public AIUserVersion As String

Public Const AIListSheetName = "> AI LIST <"
Public Const AIListSupportSheetName = "|fffd||fffd|AI List Support"
Public Const AICalendarSheetName = "|fffd||fffd|Calendar"
Public Const HelpSheetName = "> HELP <"
Public Const HelpSheetNamedRangeName = "HELP"

Public Const TabMenuHelpHeight = 165.3142 ' used in a5210UpdatePicture
Public Const TabMenuAutomation1Height = 69.73937
Public Const TabMenuAutomation2Height = 70.27622
Public Const TabMenuAutomation3Height = 69.73937


'Set Default Row and Column Numbers
Public Const AITopBar = 12

Public Const AITabMenu1Start = AITopBar + 2
Public Const AITabMenu1End = AITabMenu1Start + 0    'Additional row count
Public Const AITabMenu2Start = AITabMenu1End + 1
Public Const AITabMenu2End = AITabMenu2Start + 0
Public Const AITabMenu2AStart = AITabMenu2End + 1
Public Const AITabMenu2AEnd = AITabMenu2AStart + 4
Public Const AITabMenu3Start = AITabMenu2AEnd + 1
Public Const AITabMenu3End = AITabMenu3Start + 0
Public Const AITabMenu4Start = AITabMenu3End + 1
Public Const AITabMenu4End = AITabMenu4Start + 0
Public Const AIPictureOverlapStop = AITabMenu4End + 1


Public Const AIHeaderRow = AITabMenu4End + 7
Public Const AIDetailFirstRow = AIHeaderRow + 1

Public Const AIDetailFirstCol = 2
Public Const AICollapseCol = 2
Public Const AIClosedCol = 3
Public Const AINumCol = 4
Public Const AICategoryCol = 5
Public Const AISubcategoryCol = 6
Public Const AIActionCol = 7 'AKA "Subject"  (someday rename in all VBA as "AISubjectCol")
Public Const AIDescriptionCol = 8 'AKA "Action" (someday rename in all VBA as "AIActionCol")
Public Const AIRespCol = 9 'AKA "Person"
Public Const AIPriorityCol = 10
Public Const AIDueCol = 11
Public Const AIStatusCol = 12
Public Const AICommentCol = 13
Public Const AICreatedCol = 14
Public Const AIUpdatedCol = 15
Public Const AIUniqueIDCol = 16
Public Const AILastSyncCol = 17
Public Const AIFullFileNameAtSyncCol = 18

'Formula Columns
Public Const AIFormulaColStart = 19
Public Const AINewOpenClosedCol = 19
Public Const AIDueGroupCol = 20
Public Const AICreatedGroupCol = 21
Public Const AIUpdatedGroupCol = 22
Public Const AIPastDueCol = 23
Public Const AIDetailLastCol = 23

Public Const AIZoomColumn = AIDetailLastCol + 1

'Default Settings
Public Const HighlightRowEnabled = False     'Setting to true kills built in undo - could possibly change back to conditional formatting and use: If Application.CutCopyMode = 0 Then ActiveSheet.Calculate in selection change event

Public Declare Function GetAsyncKeyState Lib "user32" (ByVal vKey As Long) As Integer   'Ability to read mouse buttons
Private Declare Function Beep Lib "kernel32" (ByVal dwFreq As Long, ByVal dwDuration As Long) As Long   'Ability to call BEEP and inticate the tone Frequency and Duration
Sub a2100SetupWorksheetDefaults()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    
    'Capture Keyboard Commands
    Application.OnKey "^{PGUP}", "SelectPreviousWorksheet"
    Application.OnKey "^{PGDN}", "SelectNextWorksheet"
    
    'Reset Calendar Month
    ThisWorkbook.Worksheets("|fffd||fffd|Calendar").Range("CalendarMonthOffset") = 0
    
    If ActiveSheet.Name = AIListSheetName Then
        Application.Cursor = xlNorthwestArrow
        
        'AI List Sheet
'        Application.OnKey "^v", "a2126Paste"
        Application.OnKey "{UP}", "'a2125ManageKeyboardControls " & Chr(34) & "UP" & Chr(34) & "'"
        Application.OnKey "{DOWN}", "'a2125ManageKeyboardControls " & Chr(34) & "DOWN" & Chr(34) & "'"
        Application.OnKey "{LEFT}", "'a2125ManageKeyboardControls " & Chr(34) & "LEFT" & Chr(34) & "'"
        Application.OnKey "{RIGHT}", "'a2125ManageKeyboardControls " & Chr(34) & "RIGHT" & Chr(34) & "'"
'        Application.OnKey "{PGUP}", "'a2125ManageKeyboardControls " & Chr(34) & "CTRL+UP" & Chr(34) & "'"
'        Application.OnKey "{PGDN}", "'a2125ManageKeyboardControls " & Chr(34) & "CTRL+DOWN" & Chr(34) & "'"
        Application.OnKey "^{UP}", "'a2125ManageKeyboardControls " & Chr(34) & "CTRL+UP" & Chr(34) & "'"
        Application.OnKey "^{DOWN}", "'a2125ManageKeyboardControls " & Chr(34) & "CTRL+DOWN" & Chr(34) & "'"
        Application.OnKey "^{LEFT}", "'a2125ManageKeyboardControls " & Chr(34) & "CTRL+LEFT" & Chr(34) & "'"
        Application.OnKey "^{RIGHT}", "'a2125ManageKeyboardControls " & Chr(34) & "CTRL+RIGHT" & Chr(34) & "'"
        Application.OnKey "^{HOME}", "'a2125ManageKeyboardControls " & Chr(34) & "CTRL+HOME" & Chr(34) & "'"
        Application.OnKey "^{END}", "'a2125ManageKeyboardControls " & Chr(34) & "CTRL+END" & Chr(34) & "'"
        Application.OnKey "{ENTER}", "'a2125ManageKeyboardControls " & Chr(34) & "ENTER" & Chr(34) & "'"
        Application.OnKey "~", "'a2125ManageKeyboardControls " & Chr(34) & "ENTER" & Chr(34) & "'"
        Application.OnKey "{TAB}", "'a2125ManageKeyboardControls " & Chr(34) & "TAB" & Chr(34) & "'"
        Application.OnKey "+{TAB}", "'a2125ManageKeyboardControls " & Chr(34) & "SHIFT TAB" & Chr(34) & "'"
        Application.OnKey "+{F10}", "'a2125ManageKeyboardControls " & Chr(34) & "SHIFT+F10" & Chr(34) & "'"
        Application.OnKey "%{F1}", "a5000MainMenu"
        Application.OnKey "%{s}", "a2218ToggleScrollArrows" ' ALT+s
        Application.OnKey "%s", "a2218ToggleScrollArrows" ' ALT+s
        Application.OnKey "^z", "a2151CustomUndo"
        Application.OnKey "^y", "a2152CustomRedo"
        Application.OnKey "^a", "'a7000ManageConditionalFormatting " & Chr(34) & "Toggle All" & Chr(34) & "'"   'Toggle All Formatting Automation
        Application.OnKey "^m", "a2204ResetFontSize" ' CTRL+m
        Application.OnKey "^.", "a2200IncreaseFontSize" ' CTRL+.   (implied as >)
        Application.OnKey "^,", "a2202DecreaseFontSize" ' CTRL+,   (implied as <)
         
        'Right click menu shortcuts
        Application.OnKey "%{F2}", "a2250SetDueDate"
        Application.OnKey "%{F3}", "a2220SpellCheckRow"
        
        'Prevent cut
        Application.OnKey "^x", ""
        If Application.CutCopyMode = False Then Application.CellDragAndDrop = False
        
        'Set to full screen if previously set
        Application.DisplayFullScreen = GetRange("AIFullScreenSetting")
    
    End If
End Sub
Sub a2105SetupWorksheetName()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    OriginalEvents = Application.EnableEvents
    Set OriginalSelectedSheet = ActiveSheet
    SetEvents False:  ThisWorkbook.Activate
    'AI LIST sheet check
    On Error Resume Next 'required
    AISheetRenamed = (ActiveSheet.Names("AISheet").RefersTo <> "" And ActiveSheet.Name <> AIListSheetName) ' if erros on this, means is fals, which "empty" will acheive too
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If AISheetRenamed Then
        SetProtection False
        ActiveSheet.Name = AIListSheetName
        SetProtection True
        DidRename = True
    End If
    'HELP sheet check
    On Error Resume Next 'required
    HelpSheetRenamed = (ActiveSheet.Names("AIHelpSheet").RefersTo <> "" And ActiveSheet.Name <> HelpSheetName) ' if erros on this, means is fals, which "empty" will acheive too
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If HelpSheetRenamed Then
        SetProtection False
        ActiveSheet.Name = HelpSheetName
        SetProtection True
        DidRename = True
    End If
    OriginalSelectedSheet.Activate
    SetEvents OriginalEvents
    If DidRename Then MsgBox "SHEET RENAME:  To assure all automation properly functions this sheet name has been corrected.", vbCritical, SiteAddy
End Sub
Sub a2110ResetWorksheetDefaults()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    Application.Cursor = xlDefault
    If Application.CutCopyMode = False Then Application.CellDragAndDrop = True
    Application.DisplayFullScreen = False
    Application.OnKey "^x"
'    Application.OnKey "^v"
    Application.OnKey "{ESC}"
    Application.OnKey "{UP}"
    Application.OnKey "{DOWN}"
    Application.OnKey "{LEFT}"
    Application.OnKey "{RIGHT}"
'    Application.OnKey "{PGUP}"
'    Application.OnKey "{PGDN}"
    Application.OnKey "^{UP}"
    Application.OnKey "^{DOWN}"
    Application.OnKey "^{LEFT}"
    Application.OnKey "^{RIGHT}"
    Application.OnKey "^{HOME}"
    Application.OnKey "^{END}"
    Application.OnKey "{ENTER}"
    Application.OnKey "~"
    Application.OnKey "{TAB}"
    Application.OnKey "+{TAB}"
    Application.OnKey "+{F10}"
    Application.OnKey "%{F1}"
    Application.OnKey "^z"
    Application.OnKey "^y"
    Application.OnKey "^a"
    
    Application.OnKey "%{F2}"
    Application.OnKey "%{F3}"
        
End Sub
Sub a2120SelectionChange(ByVal Target As Range)     'Changes by most non-keyboard actions (mouse, etc.)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    
    'Prevent user from cutting (moving) cells
    If Application.CutCopyMode = xlCut Then Application.CutCopyMode = False
    
    'Window#1 select, if on another window # (don't let be on Window #2 because some features don't work there)
    ThisWinCap = ActiveWindow.Caption
    CapCol = InStr(ThisWinCap, ":")  ' zero, if only 1 window exists
    Win1Cap = Left(ThisWinCap, CapCol) & "1" ' only accurate if there is more than 1
    If CapCol > 0 Then WinNum = Right(ThisWinCap, Len(ThisWinCap) - CapCol)
    If WinNum <> "1" And CapCol <> 0 Then
        Windows(Win1Cap).Activate 'switch to Window #1
        Exit Sub
    End If
    
    'Prevent selection of multiple cells beyond group rows
    If Selection.Count > 1 Then
        For Each ThisRow In Selection.Rows
            If AIIsGroupRow(ThisRow.Row) Then
                SetEventsScreenProtect False
                Cells(Selection.Row, Selection.Column).Select   'Selects single cell    'AIPreviousCell.Select
                SetEventsScreenProtect True
                Exit For
            End If
        Next ThisRow
    End If
    
    If Application.CutCopyMode = False Then
        If Target.Column = AISubcategoryCol And Not GetRange("AIReadOnlyMode") Then a3605UpdateDropDownSubcategoryDefaults Target   'Reset Subcategory Drop Down based on adjacent Category Drop Down
        If Not GetRange("AICFDisableActiveRow") Then Sheets(AIListSheetName).Calculate    'Only want to refresh if conditional formatting highlights current row
        
        'Store Previous Info for Custom Undo Stack
        PreviousPreviousCellValue = PreviousCellValue
        PreviousPreviousCellAddress = PreviousCellAddress
        PreviousCellValue = Target.Formula
        PreviousCellAddress = Target.Address
        'in the future consider adding         a2122HighlightRow     'Consider adding this if eliminating conditional formatting is required
    End If

    'Hide Automation Disabled message if visible (since macros are now on)
    If Sheets(AIListSheetName).Range("AIMessageAutomationDisabled").EntireRow.Hidden = False Then
        SetEventsScreenProtect False, False, False
        DisplayNamedRangeRow "AIMessageAutomationDisabled", False
        SetEventsScreenProtect True, True, True
    End If
End Sub

''Sub a2122HighlightRow()
''Consider adding this if eliminating conditional formatting is required
''
''    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
''    If HighlightRowEnabled And ActiveCell.Row >= AIDetailFirstRow And ActiveCell.Row <= AIDetailLastRow Then
''        'Unhighlight previous highlighted row
''        Static LastHighlightedRow As Long
''        If LastHighlightedRow <> ActiveCell.Row Or Cells(ActiveCell.Row, AIActionCol).Interior.Color = xlNone Or Cells(ActiveCell.Row, AIActionCol).Interior.Color = 16777215 Then
''            HighlightColor = RGB(255, 255, 205)
''            'color code values of some pale shades
''            ' light Yellow = 36
''            ' light Green = 35
''            ' light Blue = 34
''            ' light Orange = 40
''            ' light Gray = 15
''            ' white = xlNone
''            If LastHighlightedRow = 0 Then
''                'Find last highlighted row
''                For iRow = AIDetailFirstRow To AIDetailLastRow
''                    If Cells(iRow, AICommentCol).Interior.Color = HighlightColor Then    'Found
''                        LastHighlightedRow = iRow
''                        Exit For
''                    End If
''                Next iRow
''            End If
''            SetEventsScreenProtect , , False
''            If LastHighlightedRow > 0 Then Range(Cells(LastHighlightedRow, AICategoryCol), Cells(LastHighlightedRow, AICommentCol)).Interior.Color = xlNone
''            'Highlight current row (if not a group header)
''            If Cells(ActiveCell.Row, AICollapseCol) = "" Then
''                LastHighlightedRow = ActiveCell.Row
''                Range(Cells(LastHighlightedRow, AICategoryCol), Cells(LastHighlightedRow, AICommentCol)).Interior.Color = HighlightColor
''            End If
''            SetEventsScreenProtect , , True
''        End If
''    End If
''End Sub

Sub a2125ManageKeyboardControls(Keystroke)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    'Hyjacked keys precaution
    If ActiveSheet.Name <> AIListSheetName Then
        OriginalSheet = ActiveSheet.Name 'some other sheet
        OriginalEvents = Application.EnableEvents
        Sheets(AIListSheetName).Select
        SetEvents True 'so next line RESTORES hyjacked keys to normal
        Sheets(OriginalSheet).Select
        SetEvents OriginalEvents
        Exit Sub 'since should not have had Hyjacked Keys
    End If
    
    ''Now a 'Global' var LastColKeyTrack, WAS: Static LastCol As Integer
    If LastColKeyTrack = 0 Then LastColKeyTrack = AIClosedCol
    OriginalRow = ActiveCell.Row
    AIScrollArrows = GetRange("AIScrollArrows")
    Scrolled = 0
    VisibleOnScreenRowTop = ActiveWindow.VisibleRange.Row
    VisibleOnScreenRowBottom = VisibleOnScreenRowTop + ActiveWindow.VisibleRange.Rows.Count - 2 '"-2" so counts only FULL rows
    

    
    Select Case Keystroke
        Case "UP"
            NewRow = AIFindAdjacentVisibleRow(ActiveCell.Row, True)
            'SCROLL controls
            While NewRow < VisibleOnScreenRowTop And Scrolled < 999 'get NewRow ON screen
                ActiveWindow.SmallScroll Down:=-1
                Scrolled = Scrolled + 1 'infinite loop protection
                VisibleOnScreenRowTop = ActiveWindow.VisibleRange.Row
            Wend
            If Scrolled = 0 And AIScrollArrows Then ActiveWindow.SmallScroll Down:=-1 'If AIScrollArrows Then ActiveWindow.SmallScroll Down:=NewRow - OriginalRow
            'select next CELL
            If NewRow > 0 Then Cells(NewRow, LastColKeyTrack).Select
        Case "DOWN"
            NewRow = AIFindAdjacentVisibleRow(ActiveCell.Row, False)
            'Scroll controls
            While NewRow > VisibleOnScreenRowBottom And Scrolled < 999 'get NewRow ON screen
                ActiveWindow.SmallScroll Down:=1
                Scrolled = Scrolled + 1 'infinite loop protection
                VisibleOnScreenRowTop = ActiveWindow.VisibleRange.Row
                VisibleOnScreenRowBottom = VisibleOnScreenRowTop + ActiveWindow.VisibleRange.Rows.Count - 2 '"-2" so counts only FULL rows
            Wend
            If Scrolled = 0 And AIScrollArrows And (VisibleOnScreenRowBottom <= AIDetailLastRow + 1) And (NewRow > AIDetailFirstRow + 1) Then ActiveWindow.SmallScroll Down:=1 'If AIScrollArrows Then ActiveWindow.SmallScroll Down:=NewRow - OriginalRow
            If Scrolled = 0 And Not AIScrollArrows And (NewRow = AIDetailLastRow And VisibleOnScreenRowBottom <= AIDetailLastRow + 1) Then ActiveWindow.SmallScroll Down:=1 'If AIScrollArrows Then ActiveWindow.SmallScroll Down:=NewRow - OriginalRow
            'select next cell
            If NewRow > 0 Then Cells(NewRow, LastColKeyTrack).Select
        Case "LEFT", "SHIFT TAB"
            If AIIsGroupRow Then    'Group Header --> collapse group if expanded
                If AIIsGroupExpanded Then
                    SetEventsScreenProtect False, False
                    a3100ToggleGroupVisibility ActiveCell
                    SetEventsScreenProtect True, True
                End If
            Else                    'Group Detail Row --> move to left or to group header if in the closed field
                If ActiveCell.Column > AIClosedCol Then
                    For iCol = ActiveCell.Column - 1 To AIClosedCol Step -1
                        If Cells(ActiveCell.Row, iCol).Width > 0 Then Exit For
                    Next iCol
                    Cells(ActiveCell.Row, iCol).Select
                Else
                    Cells(AIPreviousGroupRow, AICollapseCol).Select
                End If
            End If
        Case "RIGHT", "ENTER", "TAB"
            If Keystroke = "ENTER" And Application.CutCopyMode <> 0 Then    'Paste values
                a2126Paste
            ElseIf Keystroke = "ENTER" And Application.MoveAfterReturn = False Then     'Do not move
                'Do nothing
            Else    'Move as applicable
                If AIIsGroupRow Then    'Group Header --> move to next detail row (expand out if currently collapsed)
                    If Not AIIsGroupExpanded Then
                        SetEventsScreenProtect False, False
                        a3100ToggleGroupVisibility ActiveCell
                        SetEventsScreenProtect True, True
                    End If
                    Cells(AIFindAdjacentVisibleRow(ActiveCell.Row, False), LastColKeyTrack).Select
                Else                    'Group Detail Row --> move to right until reaching last visible column
                    For iCol = ActiveCell.Column + 1 To AICommentCol
                        If Cells(ActiveCell.Row, iCol).Width > 0 Then Exit For
                    Next iCol
                    If iCol <= AICommentCol Then Cells(ActiveCell.Row, iCol).Select
                End If
            End If
        Case "CTRL+UP"      'Move up to the previous Group Header Row
            PreviousGroupHeaderRow = AIPreviousGroupRow(, False)
            If PreviousGroupHeaderRow >= AIDetailFirstRow Then
                If PreviousGroupHeaderRow < ActiveWindow.VisibleRange.Row Then ActiveWindow.ScrollRow = PreviousGroupHeaderRow
                Cells(PreviousGroupHeaderRow, AICollapseCol).Select
            End If
        Case "CTRL+DOWN"    'Move up to the next Group Header Row
            NextGroupHeaderRow = AINextGroupRow(, False)
            If NextGroupHeaderRow <= AIDetailLastRow And NextGroupHeaderRow > 0 Then Cells(NextGroupHeaderRow, AICollapseCol).Select
        Case "CTRL+LEFT"    'If Group Detail Row --> move left to the top left most white column in this group
            If Cells(ActiveCell.Row, AICollapseCol) = "" Then
                MidVisCol = AIDetailMiddleVisibleEditableColumn
                FirstVisCol = AIDetailFirstVisibleColumn
                ThisActiveCol = ActiveCell.Column
                If ThisActiveCol > MidVisCol Then SelectThisCol = MidVisCol Else SelectThisCol = FirstVisCol
                Cells(ActiveCell.Row, SelectThisCol).Select
            End If
        Case "CTRL+RIGHT"   'If Group Detail Row --> move right to the top right most white column in this group
            If Cells(ActiveCell.Row, AICollapseCol) = "" Then
                MidVisCol = AIDetailMiddleVisibleEditableColumn
                LastVisCol = AIDetailLastVisibleEditableColumn
                ThisActiveCol = ActiveCell.Column
                If ThisActiveCol < MidVisCol Then SelectThisCol = MidVisCol Else SelectThisCol = LastVisCol
                Cells(ActiveCell.Row, SelectThisCol).Select
            End If
            If Cells(ActiveCell.Row, AICollapseCol) <> "" And Cells(ActiveCell.Row + 1, AICollapseCol).Height > 0 Then Cells(ActiveCell.Row + 1, AIDetailLastVisibleEditableColumn).Select
        Case "CTRL+HOME"
            Cells(AIDetailFirstRow, AIDetailFirstCol).Select
            ActiveWindow.ScrollColumn = 1
        Case "CTRL+END"
            For iRow = AIDetailLastRow To AIDetailFirstRow Step -1
                If Cells(iRow, AICollapseCol) = "" And Cells(iRow, AICollapseCol).Height > 0 Then Exit For
            Next iRow
            If iRow > AIDetailFirstRow Then Cells(iRow, AIDetailLastVisibleEditableColumn).Select
        Case "SHIFT+F10"
            a5010BeforeRightClick ActiveCell
    End Select
    'update LAST COL KEY TRACK
        ''Now relocated to Worksheet_SelectionChange (so works on mouse too)
        ''    If Cells(ActiveCell.Row, AICollapseCol) = "" Then
        ''        'moved to MAIN CELLS
        ''        LastColKeyTrack = ActiveCell.Column
        ''    Else
        ''        'moved to GROUP, so don't record this row's column (so preserves previous column selection)
        ''    End If
End Sub
Sub a2126Paste()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    OrigEvents = Application.EnableEvents
    Application.EnableEvents = False
    If Application.CutCopyMode = xlCopy Then Selection.PasteSpecial xlPasteFormulas
    Application.EnableEvents = OrigEvents
    Application.CutCopyMode = 0
End Sub
Sub a2130BeforeDoubleClick(Target As Range, Cancel As Boolean)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    Select Case Target.Column
        Case AICollapseCol
            Cancel = True
            SetEventsScreenProtect False, False
            a3100ToggleGroupVisibility Target
            SetEventsScreenProtect True, True
        Case AIClosedCol, AINumCol
            Cancel = True
            SetEventsScreenProtect False
            If AIIsRowOpen(Target.Row) Then
                Cells(Target.Row, AIClosedCol) = Range("AIClosed")
                Cells(Target.Row, AICommentCol) = a2242AddDateToString(Cells(Target.Row, AICommentCol))
            Else
                Cells(Target.Row, AIClosedCol) = Range("AIOpen")
            End If
            SetEventsScreenProtect True
        Case AIDueCol
            Cancel = True
            a9_Calendar.Show
    End Select
End Sub
Sub a2140Change(ByVal Target As Range)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If Target.Column = AICollapseCol And Target.Count <> (AIUpdatedCol - AIDetailFirstCol + 1) Then 'un-reliable atempt to detect if on GroupRow
        Application.CutCopyMode = False
        Exit Sub
    End If
    
    SetEventsScreenProtect False     'WAS:   SetEventsScreenProtect False, False  'INTENTIONALLY REMOVED:  Removed the following line to minimize flickering
    
    a2150CustomUndo False, True, Target.Address, , False
    
    'Force paste values if pasted
    On Error Resume Next
    If Left(Application.CommandBars("Standard").Controls("&Undo").List(1), 5) = "Paste" Then a2126Paste
    'INTENTIONALLY REMOVED:
    '''JTF Check - Removed the following section and just called a2126Paste above which seems to work
    '''        If Target.Count = 1 Then
    '''            If Error <> "" Then GoTo 100
    '''            TempText = Target.Text
    '''            Application.Undo
    '''            Target.Value = TempText     'PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    '''            Application.CutCopyMode = False
    '''        End If
    '''    End If
100 If RunMode Then On Error Resume Next Else On Error GoTo 0
    
    'Determine if group row and toggle collapse/expand
    If AIIsGroupRow(Target.Row) Then
        Application.Undo
        a3100ToggleGroupVisibility Target
        Target.Select
    End If
    
    If Target.Count = 1 Then
        Select Case Target.Column
            Case Is = AIClosedCol
                'Toggle open/close
                Set Destination = ActiveCell
                Application.Undo
                Destination.Select
                If AIIsRowOpen(Target.Row) Then
                    Cells(Target.Row, AIClosedCol) = Range("AIClosed")
                    Cells(Target.Row, AICommentCol) = a2242AddDateToString(Cells(Target.Row, AICommentCol))
                Else
                    Cells(Target.Row, AIClosedCol) = Range("AIOpen")
                End If
            Case AICategoryCol, AIRespCol, AIPriorityCol, AIStatusCol
                'Update drop downs
                a3600UpdateDropDownDefaults Target
        End Select
            
        'Set created date if new
        SetEventsScreenProtect False, , False
        If AIIsNewRow(Target.Row) And Target.Formula <> "" Then
            Cells(Target.Row, AICreatedCol) = Now
            Cells(Target.Row, AIUniqueIDCol) = Date & "-" & Time & "-" & Int(Rnd * 1000000) 'Cannot get milliseconds to work, so using a random number after seconds
            'Insert new row if none exist
            a3115InsertNewRow Target.Row + 1
            'Move cursor down if it ends up on a group row
            If AIIsGroupRow(ActiveCell.Row) Then Cells(Target.Row + 1, Target.Column).Select
        End If
        
        'Set updated date
        Cells(Target.Row, AIUpdatedCol) = Now
        SetEventsScreenProtect True, , True
    End If
    
    'INTENTIONALLY DISABLED:
        '''This functionality is not in use because it does not maintain its capabilities when resorting
        '''    'Set wrapping based on cell contents
        '''    For Each iTarget In Target
        '''        Select Case iTarget.Column
        '''            Case AICategoryCol, AISubcategoryCol, AIRespCol, AIPriorityCol, AIStatusCol
        '''                ShrinkThenWrap iTarget
        '''        End Select
        '''    Next iTarget

    'in the future consider adding         a2122HighlightRow     'Consider adding this if eliminating conditional formatting is required
    SetEventsScreenProtect True, True
End Sub
Sub a2150CustomUndo(Optional Redo = False, Optional WriteValueToUndo As Boolean = False, Optional TargetAddress As String, Optional ClearUndoRedo As Boolean = False, Optional EventsOn As Boolean = True)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    Static CustomUndoStack As String
    Static CustomRedoStack As String
    
    If ClearUndoRedo Then           'Clear out the undo and redo stacks
        CustomUndoStack = ""
        CustomRedoStack = ""
    ElseIf WriteValueToUndo Then    'Write last entry to custom undo stack
        If PreviousCellAddress = TargetAddress Then
            UndoAddress = PreviousCellAddress
            UndoValue = PreviousCellValue
        ElseIf PreviousPreviousCellAddress = TargetAddress Then
'        ElseIf Intersect(Range(PreviousPreviousCellAddress), Range(TargetAddress)) Then
            UndoAddress = PreviousPreviousCellAddress
            UndoValue = PreviousPreviousCellValue
        End If
        If CustomUndoStack <> "" Then CustomUndoStack = CustomUndoStack & Chr(128)
        If InStr(1, UndoAddress, ":") > 0 Then UndoValue = Convert2DArrayIntoString(UndoValue)     'Array of multiple cells
        CustomUndoStack = CustomUndoStack & UndoAddress & Chr(130) & UndoValue
        CustomRedoStack = ""    'Cancel Redo ability
    ElseIf Not Redo And CustomUndoStack <> "" Then   'Undo last entry from custom undo stack
        CustomUndoStackArray = Split(CustomUndoStack, Chr(128))
        UndoAddressAndValue = CustomUndoStackArray(UBound(CustomUndoStackArray))
        UndoAddress = Left(UndoAddressAndValue, InStr(1, UndoAddressAndValue, Chr(130)) - 1)
        UndoValue = Mid(UndoAddressAndValue, InStr(1, UndoAddressAndValue, Chr(130)) + 1)
        
        If UndoAddress <> "" Then
            If EventsOn Then SetEventsScreenProtect False
            'Recreate New Custom Redo Stack with last undo
            If CustomRedoStack <> "" Then CustomRedoStack = CustomRedoStack & Chr(128)
            CustomRedoStack = CustomRedoStack & UndoAddress & Chr(130) & Convert2DArrayIntoString(Range(UndoAddress).Formula)
            
            'Recreate New Custom Undo Stack without last entry
            If InStrRev(CustomUndoStack, Chr(128)) = 0 Then
                CustomUndoStack = ""
            Else
                CustomUndoStack = Left(CustomUndoStack, InStrRev(CustomUndoStack, Chr(128)) - 1)
            End If
        
            'Populate undo value and move to cell
            If InStr(1, UndoAddress, ":") > 0 Then UndoValue = ConvertStringInto2DArray(UndoValue)      'Array of multiple cells
            Range(UndoAddress).Formula = UndoValue
            Range(UndoAddress).Select
            If EventsOn Then SetEventsScreenProtect True
        End If
        
    ElseIf Redo And CustomRedoStack <> "" Then      'Redo last entry from custom redo stack
        CustomRedoStackArray = Split(CustomRedoStack, Chr(128))
        RedoAddressAndValue = CustomRedoStackArray(UBound(CustomRedoStackArray))
        RedoAddress = Left(RedoAddressAndValue, InStr(1, RedoAddressAndValue, Chr(130)) - 1)
        RedoValue = Mid(RedoAddressAndValue, InStr(1, RedoAddressAndValue, Chr(130)) + 1)
        
        If RedoAddress <> "" Then
            If EventsOn Then SetEventsScreenProtect False
            'Recreate New Custom Undo Stack with last redo
            If CustomUndoStack <> "" Then CustomUndoStack = CustomUndoStack & Chr(128)
            CustomUndoStack = CustomUndoStack & RedoAddress & Chr(130) & Convert2DArrayIntoString(Range(RedoAddress).Formula)
            
            'Recreate New Custom Redo Stack without last entry
            If InStrRev(CustomRedoStack, Chr(128)) = 0 Then
                CustomRedoStack = ""
            Else
                CustomRedoStack = Left(CustomRedoStack, InStrRev(CustomRedoStack, Chr(128)) - 1)
            End If
            
            'Populate redo value and move to cell
            If InStr(1, RedoAddress, ":") > 0 Then RedoValue = ConvertStringInto2DArray(RedoValue)      'Array of multiple cells
            Range(RedoAddress).Formula = RedoValue
            Range(RedoAddress).Select
            If EventsOn Then SetEventsScreenProtect True
        End If
    
    End If
End Sub
Sub a2151CustomUndo()
    a2150CustomUndo False
End Sub
Sub a2152CustomRedo()
    a2150CustomUndo True
End Sub
Sub a2200IncreaseFontSize()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    SetEventsScreenProtect False, False, False

    Dim FoundCells As Range
    For Each cell In ActiveSheet.UsedRange
        If (Cells(cell.Row, AICollapseCol) = "" And cell.Column > AIDetailFirstCol And cell.Column <= AIUpdatedCol And cell.Row <= AIDetailLastRow) And (cell.Row = Range("AIFormatRow").Row Or cell.Row >= AIDetailFirstRow) Then
            If FoundCells Is Nothing Then
                Set FoundCells = cell
            Else
                Set FoundCells = Union(FoundCells, cell)
            End If
        End If
    Next cell
    If FoundCells.Count > 0 Then
        FoundCells.Font.Size = FoundCells.Font.Size + 1
    End If

    SetEventsScreenProtect True, True, True
End Sub
Sub a2202DecreaseFontSize()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    SetEventsScreenProtect False, False, False

    Dim FoundCells As Range
    For Each cell In ActiveSheet.UsedRange
        If (Cells(cell.Row, AICollapseCol) = "" And cell.Column > AIDetailFirstCol And cell.Column <= AIUpdatedCol And cell.Row <= AIDetailLastRow) And (cell.Row = Range("AIFormatRow").Row Or cell.Row >= AIDetailFirstRow) Then
            If FoundCells Is Nothing Then
                Set FoundCells = cell
            Else
                Set FoundCells = Union(FoundCells, cell)
            End If
        End If
    Next cell
    If FoundCells.Count > 0 And FoundCells.Font.Size > 1 Then
        FoundCells.Font.Size = FoundCells.Font.Size - 1
    End If

    SetEventsScreenProtect True, True, True
End Sub
Sub a2204ResetFontSize()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    SetEventsScreenProtect False, False, False

    Dim FoundCells As Range
    For Each cell In ActiveSheet.UsedRange
        If (Cells(cell.Row, AICollapseCol) = "" And cell.Column > AIDetailFirstCol And cell.Column <= AIUpdatedCol And cell.Row <= AIDetailLastRow) And (cell.Row = Range("AIFormatRow").Row Or cell.Row >= AIDetailFirstRow) Then
            If FoundCells Is Nothing Then
                Set FoundCells = cell
            Else
                Set FoundCells = Union(FoundCells, cell)
            End If
        End If
    Next cell
    If FoundCells.Count > 0 Then
        FoundCells.Font.Name = Application.StandardFont
        FoundCells.Font.Size = Application.StandardFontSize
    End If

    SetEventsScreenProtect True, True, True
End Sub
Sub a2210ZoomToWindow(Optional MaxZoomPercent = 200)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    OriginalCell = ActiveCell.Address
    ActiveWindow.ScrollColumn = 1
    Range(Cells(1, 1), Cells(1, AIZoomColumn)).Select

    ActiveWindow.Zoom = True
    ActiveWindow.Zoom = ActiveWindow.Zoom + 1
    If ActiveWindow.Zoom > MaxZoomPercent Then ActiveWindow.Zoom = MaxZoomPercent
    Range(OriginalCell).Select
    
    'Reposition and crop images
    
    'Logos, position to align to right side
    TargetRight = Cells(AIHeaderRow, AIDetailLastVisibleColumn).Left + Cells(AIHeaderRow, AIDetailLastVisibleColumn).Width
    TargetLeft7 = TargetRight - ActiveSheet.Shapes("Button7").Width - 5.25
    TargetLeft7a = TargetRight - ActiveSheet.Shapes("Button7a").Width - 5.15
    If Abs(TargetLeft7 - ActiveSheet.Shapes("Button7").Left) > 1 Then ActiveSheet.Shapes("Button7").Left = TargetLeft7
    If Abs(TargetLeft7a - ActiveSheet.Shapes("Button7a").Left) > 1 Then ActiveSheet.Shapes("Button7a").Left = TargetLeft7a
    
    If Cells(AITabMenu2Start, AIDetailFirstCol).EntireRow.Hidden = False Then a5420TabMenuButton2   'Crop Calendar to fit
    If Cells(AITabMenu4Start, AIDetailFirstCol).EntireRow.Hidden = False Then a5440TabMenuButton4   'Crop Help to fit

End Sub
Sub a2215ZoomToFit()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    SetEventsScreenProtect False, False
    
    a2210ZoomToWindow
    Sheets(AIListSheetName).Names("AICurrentZoomLevel").RefersTo = 0
    a5005ResetMenuTop
    
    SetEventsScreenProtect True, True
End Sub
Sub a2218ToggleScrollArrows()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    AIScrollArrows = GetRange("AIScrollArrows")
    'SetTo = True
    SetTo = Not AIScrollArrows
    SetRange "AIScrollArrows", SetTo
    Beep 2200, 110
    'Sheets(AIListSheetName).Names("AIScrollArrows").RefersTo = Not AIScrollArrows
End Sub
Sub a2220SpellCheckRow()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    SetEventsScreenProtect False, , False
    For Each ThisCell In Selection
        Range(Cells(ThisCell.Row, AICategoryCol), Cells(ThisCell.Row, AIUpdatedCol)).CheckSpelling
    Next ThisCell
    SetEventsScreenProtect True, , True
    Beep 2200, 110
End Sub
Sub a2222SpellCheck()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    SetEventsScreenProtect False, , False
    Range(Cells(AIDetailFirstRow, AICategoryCol), Cells(AIDetailLastRow, AIUpdatedCol)).CheckSpelling
    SetEventsScreenProtect True, , True
    
    'Beep 2200, 110
    MsgBox "DONE:  Spell check has completed.", vbInformation, SiteAddy
End Sub
Sub a2230DeleteRow()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    
    'Confirmation to proceed
    If Selection.Count = 1 Then
        If MsgBox("DELETE ROW:  Do you want to permanently delete this row?" & Enter2 & "AI#: " & Cells(ActiveCell.Row, AINumCol), vbOKCancel + vbExclamation, SiteAddy) <> vbOK Then Exit Sub
    Else
        If MsgBox("DELETE ROWS:  Do you want to permanently delete these rows?", vbOKCancel + vbExclamation, SiteAddy) <> vbOK Then Exit Sub
    End If
    
    SetEventsScreenProtect False, False, False
    
    'Delete rows
    Dim RowsToDelete() As Integer       'Assume never deleting more than 1000 rows at any one time
    For iRow = AIDetailLastRow To Selection.Row Step -1
        Set DeleteRow = Intersect(Range(Cells(iRow, Selection.Column).Address), Selection)
        If Not DeleteRow Is Nothing Then
            I = I + 1
            ReDim Preserve RowsToDelete(1 To I)
            RowsToDelete(I) = iRow
        End If
    Next iRow
    For j = 1 To I
        If RowsToDelete(j) > 0 And Not AIIsRowHidden(RowsToDelete(j)) And Not AIIsNewRow(RowsToDelete(j)) Then Cells(RowsToDelete(j), 1).EntireRow.Delete
    Next j
    
    'Select appropriate cell
    Cells(AIFindAdjacentVisibleRow(Selection.Row - 1, False), Selection.Column).Select
    
    'Delete Group Header if deleted Row was the only Row in the group
    If Cells(ActiveCell.Row, AICollapseCol) <> "" And Cells(ActiveCell.Row - 1, AICollapseCol) <> "" Then Cells(ActiveCell.Row - 1, AICollapseCol).EntireRow.Delete
    
    a3115InsertNewRow AIDetailFirstRow, False
    SetEventsScreenProtect True, True, True
    a2150CustomUndo , , , True      'Clear Undo Stack
End Sub
Sub a2240CloseRow()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    SetEventsScreenProtect False, False
    For Each ThisRow In Selection.Rows
        If Not AIIsRowHidden(ThisRow) Then
            Cells(ThisRow.Row, AIClosedCol) = Range("AIClosed")
            Cells(ThisRow.Row, AICommentCol) = a2242AddDateToString(Cells(ThisRow.Row, AICommentCol))
        End If
    Next ThisRow
    SetEventsScreenProtect True, True
End Sub
Function a2242AddDateToString(ThisString) As String
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    ThisDate = " [Closed " & Format(Now(), "ddd m/d/yy") & "]"
    If InStr(ThisString, ThisDate) = 0 Then ThisString = ThisString & ThisDate
    a2242AddDateToString = ThisString
End Function
Sub a2245OpenRow()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    SetEventsScreenProtect False, False
    For Each ThisRow In Selection.Rows
        If Not AIIsRowHidden(ThisRow) Then Cells(ThisRow.Row, AIClosedCol) = Range("AIOpen")
    Next ThisRow
    SetEventsScreenProtect True, True
End Sub
Sub a2250SetDueDate()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If ActiveCell.Row >= AIDetailFirstRow And ActiveCell.Row <= AIDetailLastRow And Cells(ActiveCell.Row, AICollapseCol) = "" Then
        Cells(ActiveCell.Row, AIDueCol).Select
        a9_Calendar.Show
    End If
End Sub
Sub a2260ToggleColumnVisibility(ColumnToggle As Integer)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    SetEventsScreenProtect False, False, False
'    OriginalRightColumn = AIDetailLastVisibleColumn
    
    Select Case ColumnToggle
        Case Is > 0         'Toggle Individual Column
            If Cells(AIHeaderRow, ColumnToggle).EntireColumn.Hidden = False Then
                Cells(AIHeaderRow, ColumnToggle).EntireColumn.Hidden = True
            Else
                Cells(AIHeaderRow, ColumnToggle).EntireColumn.Hidden = False
            End If
        Case Is = -1        'Minimal Set
            Cells(AIHeaderRow, AICategoryCol).EntireColumn.Hidden = True
            Cells(AIHeaderRow, AISubcategoryCol).EntireColumn.Hidden = True
            Cells(AIHeaderRow, AIActionCol).EntireColumn.Hidden = False
            Cells(AIHeaderRow, AIDescriptionCol).EntireColumn.Hidden = False
            Cells(AIHeaderRow, AIRespCol).EntireColumn.Hidden = False
            Cells(AIHeaderRow, AIPriorityCol).EntireColumn.Hidden = True
            Cells(AIHeaderRow, AIDueCol).EntireColumn.Hidden = False
            Cells(AIHeaderRow, AIStatusCol).EntireColumn.Hidden = True
            Cells(AIHeaderRow, AICommentCol).EntireColumn.Hidden = True
            Cells(AIHeaderRow, AICreatedCol).EntireColumn.Hidden = True
            Cells(AIHeaderRow, AIUpdatedCol).EntireColumn.Hidden = False
        Case Is = -2        'Category Set
            Cells(AIHeaderRow, AICategoryCol).EntireColumn.Hidden = False
            Cells(AIHeaderRow, AISubcategoryCol).EntireColumn.Hidden = True
            Cells(AIHeaderRow, AIActionCol).EntireColumn.Hidden = False
            Cells(AIHeaderRow, AIDescriptionCol).EntireColumn.Hidden = False
            Cells(AIHeaderRow, AIRespCol).EntireColumn.Hidden = False
            Cells(AIHeaderRow, AIPriorityCol).EntireColumn.Hidden = False
            Cells(AIHeaderRow, AIDueCol).EntireColumn.Hidden = False
            Cells(AIHeaderRow, AIStatusCol).EntireColumn.Hidden = True
            Cells(AIHeaderRow, AICommentCol).EntireColumn.Hidden = True
            Cells(AIHeaderRow, AICreatedCol).EntireColumn.Hidden = True
            Cells(AIHeaderRow, AIUpdatedCol).EntireColumn.Hidden = False
        Case Is = -3        'Status & Comment Set ...was: Sub & Comment Set
            Cells(AIHeaderRow, AICategoryCol).EntireColumn.Hidden = False
            Cells(AIHeaderRow, AISubcategoryCol).EntireColumn.Hidden = True
            Cells(AIHeaderRow, AIActionCol).EntireColumn.Hidden = True       ' hide "Subject"
            Cells(AIHeaderRow, AIDescriptionCol).EntireColumn.Hidden = False ' show "Action"
            Cells(AIHeaderRow, AIRespCol).EntireColumn.Hidden = False
            Cells(AIHeaderRow, AIPriorityCol).EntireColumn.Hidden = False
            Cells(AIHeaderRow, AIDueCol).EntireColumn.Hidden = False
            Cells(AIHeaderRow, AIStatusCol).EntireColumn.Hidden = False
            Cells(AIHeaderRow, AICommentCol).EntireColumn.Hidden = False
            Cells(AIHeaderRow, AICreatedCol).EntireColumn.Hidden = True
            Cells(AIHeaderRow, AIUpdatedCol).EntireColumn.Hidden = False
        Case Is = -4        'Every Column Set
            Range(Cells(AIHeaderRow, AIDetailFirstCol), Cells(AIHeaderRow, AICreatedCol)).EntireColumn.Hidden = False
    End Select
    
    If ActiveCell.Width = 0 Then Cells(ActiveCell.Row, AIActionCol).Select
'    If AIDetailLastVisibleColumn <> OriginalRightColumn Then a3200Sort AINewOpenClosedCol, AINumCol     'Must resort to reset formatting
    a2210ZoomToWindow 130
    SetEventsScreenProtect True, True, True
End Sub
Sub a2270RebuildDropDowns(AIDropDownCol As Integer, Optional DefaultItems As String)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    SetEventsScreenProtect False, False, False
    
    'Figure out validation range
    ValidationRange = Mid(Cells(Range("AIFormatRow").Row, AIDropDownCol).Validation.Formula1, 2)
    RangeStartCol = Range(ValidationRange).Column
    RangeStartRow = Range(ValidationRange).Row
    RangeFinishRow = RangeStartRow + Range(ValidationRange).Count - 1
    
    'Remove all non-default items from list
    For I = RangeFinishRow To RangeStartRow Step -1
        If Sheets(AIListSheetName).Cells(I, RangeStartCol).Interior.Color <> 65535 Then    'Non-default item (yellow highlight)
            Sheets(AIListSheetName).Cells(I, RangeStartCol).Value = ""
            If AIDropDownCol = AIRespCol Then Sheets(AIListSheetName).Cells(I, RangeStartCol + 1).Value = ""   'Clear out email address
            If RangeFinishRow > RangeStartRow Then RangeFinishRow = RangeFinishRow - 1
        End If
    Next I
    
    'Add items from existing AI List rows to list
    For iRow = AIDetailFirstRow To AIDetailLastRow
        If Cells(iRow, AIDropDownCol) <> "" Then a3600UpdateDropDownDefaults Cells(iRow, AIDropDownCol)
    Next iRow
    
    'Add <Enter any value> if list is blank
    If RangeFinishRow = RangeStartRow And Sheets(AIListSheetName).Cells(RangeStartRow, RangeStartCol).Value = "" Then Sheets(AIListSheetName).Cells(RangeStartRow, RangeStartCol).Value = "<Enter any value>"
    
    'Resort list
    If RangeFinishRow > RangeStartRow Then
        If AIDropDownCol = AIRespCol Then   'Need to include email column (column to right) in sort
            RangeToSort = Range(Sheets(AIListSheetName).Cells(RangeStartRow, RangeStartCol), Sheets(AIListSheetName).Cells(RangeFinishRow, RangeStartCol + 1)).Address
            Sheets(AIListSheetName).Range(RangeToSort).Sort Range(ValidationRange)
        Else
            Range(ValidationRange).Sort Range(ValidationRange)
        End If
    End If
    
    'Figure out new last row and reset validation range
    On Error Resume Next 'required
    RangeFinishRow = Range(ValidationRange).Find("").Row - 1
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    Names(ValidationRange).RefersTo = "='" & AIListSheetName & "'!" & Range(Cells(RangeStartRow, RangeStartCol), Cells(RangeFinishRow, RangeStartCol)).Address
    
    SetEventsScreenProtect True, True, True
End Sub
Sub a2272RebuildDropDownsCategory()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If MsgBox("REBUILD:  This will rebuild the Category drop downs to only the text currently used in this AI List." & Enter2 & "OK to continue?", vbOKCancel + vbQuestion, SiteAddy) = vbCancel Then Exit Sub
    a2270RebuildDropDowns AICategoryCol
End Sub
Sub a2274RebuildDropDownsResp()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If MsgBox("REBUILD:  This will rebuild the Person drop downs to only the text currently used in this AI List.  In addition, all Email addresses will be removed." & Enter2 & "OK to continue?", vbOKCancel + vbQuestion, SiteAddy) = vbCancel Then Exit Sub
    a2270RebuildDropDowns AIRespCol
End Sub
Sub a2276RebuildDropDownsPriority()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If MsgBox("REBUILD:  This will rebuild the Priority drop downs to only the text currently used in this AI List, along with the AI List defaults." & Enter2 & "OK to continue?", vbOKCancel + vbQuestion, SiteAddy) = vbCancel Then Exit Sub
    a2270RebuildDropDowns AIPriorityCol, "1,2,3,Low,Hold,Done,Review,Hidden"
End Sub
Sub a2278RebuildDropDownsStatus()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If MsgBox("REBUILD:  This will rebuild the Status drop downs to only the text currently used in this AI List, along with the AI List defaults." & Enter2 & "OK to continue?", vbOKCancel + vbQuestion, SiteAddy) = vbCancel Then Exit Sub
    ''WAS: a2270RebuildDropDowns AIStatusCol, "  25% Complete,  50% Complete,  75% Complete, 100% Complete, Hold"
    a2270RebuildDropDowns AIStatusCol, "25% Complete,50% Complete,75% Complete,100% Complete,Hold,Review,Hidden"
End Sub
Sub a2280RebuildAllDropDowns()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If MsgBox("REBUILD:  This will rebuild all the drop downs to only the text currently used in this AI List, along with the AI List defaults.  In addition, all Email addresses will be removed." & Enter2 & "OK to continue?", vbOKCancel + vbQuestion, SiteAddy) = vbCancel Then Exit Sub
    a3520RebuildAllDropDowns
End Sub
Sub a2290ChangeColumnWidth(ThisColumn As Integer)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    Response = InputBox("CHANGE COLUMN WIDTH:  Enter the desired width of the current column (up to 200).", SiteAddy, Cells(AIHeaderRow, ThisColumn).ColumnWidth)
    If Response >= 1 And Response <= 200 Then
        SetEventsScreenProtect False, False, False
        Columns(ThisColumn).ColumnWidth = Response
        a2210ZoomToWindow 130
        SetEventsScreenProtect True, True, True
    End If
End Sub
Sub a2300MsgNewToAIList()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    IsAll10BlankRows = a2305IsAll10BlankRows
    If ((ActiveSheet.Name = AIListSheetName) And (Cells(AIHeaderRow + 4, AICategoryCol) = "Basic User Tips")) Or ((ActiveSheet.Name = AIListSheetName) And IsAll10BlankRows) Then
        'BLANK TEMPLATE w/ USER TIPS
        'NEW USER
        If IsAll10BlankRows Then
            MsgNew1 = "    ==============================================" & Enter
            MsgNew2 = "    UNUSED FILE MESSAGE:  Type in any cell to remove startup messages" & Enter
            MsgNew3 = "    ==============================================" & Enter2
        Else
            MsgNew1 = "    ==========================================" & Enter
            MsgNew2 = "    UNUSED FILE MESSAGE:  See AI # 4 to remove startup messages" & Enter
            MsgNew3 = "    ==========================================" & Enter2
        End If
        
        MsgYesNewUser1 = "NEW USER:  The AI List (Action Item List) is a powerful tool often used to organize and manage lists of actions and tasks.  The following bullets outline how to discover some of the built-in automated features:"
        MsgYesNewUser2 = Enter2 & " " & Bullet & " LEFT CLICK on a cell to select it or on a header column name to sort"
        MsgYesNewUser3 = Enter & " " & Bullet & " RIGHT CLICK on any cell or header column name for more options"
        MsgYesNewUser4 = Enter & " " & Bullet & " DOUBLE CLICK on any cell to edit its content"
        MsgYesNewUser5 = Enter & " " & Bullet & " DOUBLE CLICK on any group name, checkbox, or due date " & Enter & "    for additional automated functionality"
        Select Case AIUserVersion
            Case "CUser", "RecentCUser"
                MsgBox MsgNew1 & MsgNew2 & MsgNew3 & MsgYesNewUser1 & MsgYesNewUser2 & MsgYesNewUser3 & MsgYesNewUser4 & MsgYesNewUser5, , SiteAddy
            Case Else
                'REGISTER FOR UPDATES
                If IsAll10BlankRows Then MsgBox MsgNew1 & MsgNew2 & MsgNew3 & MsgYesNewUser1 & MsgYesNewUser2 & MsgYesNewUser3 & MsgYesNewUser4 & MsgYesNewUser5, , SiteAddy
                UserResponse = MsgBox(MsgNew1 & MsgNew2 & MsgNew3 & "UPDATED VERSION: Would you like to be automatically notified if" & Enter & "a NEWER version of the AI List is avaiable?", vbYesNo, SiteAddy)
                If UserResponse = vbYes Then a4100Register
        End Select
        'BLANK TEMPLATE TIPS
        ''OLD:  MsgBox "UNUSED FILE TIPS:  To familiarize yourself with the main automated features, review the 'User Tips' listed in this copy of the AI List (also located at the bottom of the help tab)." & Enter2 & TabIn & Bullet & " AI# 4 explains how to 'Reset AI List to start fresh' (to REMOVE all tips and startup messages)", , SiteAddy
    Else
        'COLUMN SORT TIP
        If ActiveSheet.Name = AIListSheetName And Cells(AIHeaderRow + 2, AIDueGroupCol) <> "[0],New (since last sort)" Then
            Randomize
            RndYes = Rnd() > 0.6 '... 40% of the time
            If RndYes Then MsgBox "COLUMN SORT TIP:  Click on any column header name (AI#, Category, etc.) to sort and group the list.  View the Help tab for additional user tips.", , SiteAddy
        End If
    End If
    ''==========OLD============
        ''MsgNewToAIList = "NEW VERSION:  Are you a new user to this version of the AI List file?" & Enter2 & TabIn2 & TabIn2 & Bullet & "Version: " & AIVersionNumAsText
        ''MsgYesNewUser1 = "NEW USER:  The AI List (Action Item List) is a powerful tool often used to organize and manage lists of actions and tasks.  The following bullets outline how to discover some of the built-in automated features:"
        ''MsgYesNewUser2 = Enter2 & " " & Bullet & " LEFT CLICK on a cell to select it or on a header column name to sort"
        ''MsgYesNewUser3 = Enter & " " & Bullet & " RIGHT CLICK on any cell or header column name for more options"
        ''MsgYesNewUser4 = Enter & " " & Bullet & " DOUBLE CLICK on any cell to edit its content"
        ''MsgYesNewUser5 = Enter & " " & Bullet & " DOUBLE CLICK on any group name, checkbox, or due date " & Enter & "    for additional automated functionality"
        ''If Not (AIUserVersion = "CUser" Or AIUserVersion = "RecentCUser") Then MsgYesNewUser6 = Enter & " " & Bullet & " DOWNLOAD the updated AI List version from " & SiteAddy
        ''MsgYesNewUser7 = Enter2 & "...CLICK the 'Help' tab for more detailed instructions."
        ''MsgYesNewUser = MsgYesNewUser1 & MsgYesNewUser2 & MsgYesNewUser3 & MsgYesNewUser4 & MsgYesNewUser5 & MsgYesNewUser6 & MsgYesNewUser7
        ''
        ''Select Case AIUserVersion
        ''    Case "CUser", "RecentCUser"
        ''        MsgBox MsgYesNewUser1 & MsgYesNewUser2 & MsgYesNewUser3 & MsgYesNewUser4 & MsgYesNewUser5, , SiteAddy
        ''    Case Else
        ''        'MsgNewToAIList
        ''        UserResponse = MsgBox(MsgNewToAIList, vbYesNo, SiteAddy)
        ''        If UserResponse = vbYes Then MsgBox MsgYesNewUser, , SiteAddy
        ''
        ''        'REGISTER FOR UPDATES
        ''        UserResponse = MsgBox("UPDATED VERSION: Would you like to be automatically notified if" & Enter & "a NEWER version of the AI List is avaiable?", vbYesNo, SiteAddy)
        ''        If UserResponse = vbYes Then a4100Register
        ''End Select
    
End Sub
Function a2305IsAll10BlankRows()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    a2305IsAll10BlankRows = True
    'search to see if first 10 rows as all blank
    For Y = (AIHeaderRow + 2) To (AIHeaderRow + 2 + 9 + 2) 'FIRST ROW to [FIRST ROW + 9 more rows to 10 total + 2 as precaution in case use one and sort to new bottom group]  'WAS:  For Y = (AIHeaderRow + 2) To (AIHeaderRow + 2 + 9)
        For X = AICategoryCol To AICommentCol
            ThisValue = Cells(Y, X)
            If ThisValue <> "" Then GoTo JumpOutAndMakeFalse
        Next X
    Next Y
    Exit Function
JumpOutAndMakeFalse: 'found sopme data, so is NOT all blank
    a2305IsAll10BlankRows = False
End Function
Sub a2900PushAIVersionNumAsTextToSheet() 'called by AutoOpen
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    Sheets(AIListSheetName).Names("AIVersionNumAsText").RefersTo = AIVersionNumAsText
End Sub
Attribute VB_Name = "a3000_AI_GroupAndSort"
'=================================== Copyright PROTECTED ====================================
'|fffd| 2013 JTF AUTOMATION  |  Report Unauthorized Use or Automation Errors to:  JTF.ENGINEERING@gmail.com
'================ Unlawful to copy, modify, distribute, plagiarize, or mimic ================
'=================================== Copyright PROTECTED ====================================
'============================================================================================
'============================ USER AGREEMENT of LIMITED USAGE ===============================
'MUST NOT BE DUPLICATED or used by any person, or on any PC, without JTF AUTOMATION direct consent.
'BY OPENING THIS FILE YOU AGREE TO PROTECT THIS FILE FROM UNAUTHORIZED USE OR DISTRIBUTION.
'BY OPENING THIS FILE YOU AUTHORIZE JTF AUTOMATION TO ELECTRONICALLY TRACK COMPUTERS WHERE IT WAS USED.
'IF YOU DO NOT AGREE TO THESE TERMS, YOU MUST DESTROY ALL COPIES OF THIS FILE AND IT'S CONTENT WITHIN 24hrs OF RECEIPT FROM JTF AUTOMATION, AND INFORM JTF AUTOMATION WITHIN 24hrs OF RECEIPT.
'============================ USER AGREEMENT of LIMITED USAGE ===============================
Option Private Module 'subs are NOT available outside this project
Option Base 1 'dims default to start at 1 vs zero (can always be explicitly dim'd differently for each variable)
Sub a3100ToggleGroupVisibility(GroupHeaderCell As Range)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    SetEventsScreenProtect , , False
    
    'Toggle Expand/Collapse
    If AIIsGroupExpanded(GroupHeaderCell.Row) Then
'        GroupHeaderCell = GetRange("AICollapsed")
        GroupHeaderCell = Range("AICollapsed") & Mid(GroupHeaderCell.Item(1), 2)
    Else
'        GroupHeaderCell = GetRange("AIExpanded")
        GroupHeaderCell = Range("AIExpanded") & Mid(GroupHeaderCell.Item(1), 2)
    End If
    
    a3902SetStatusVisibilityOfGroup GroupHeaderCell.Row
    a5300AvoidScreenFlicker
    SetEventsScreenProtect , , True
End Sub
Sub a3110ClearGroups()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    GroupCount = Application.WorksheetFunction.CountA(Range(Cells(AIDetailFirstRow, AICollapseCol), Cells(AIDetailLastRow, AICollapseCol)))
    ReDim GroupOrder(GroupCount, 2)
    For iRow = AIDetailLastRow To AIDetailFirstRow Step -1
        If Cells(iRow, AICollapseCol) <> "" Then
            I = I + 1
            If Left(Cells(iRow, AICollapseCol), 1) = Range("AICollapsed") Then
                GroupOrder(I, 1) = Mid(Cells(iRow, AICollapseCol), 3)
                GroupOrder(I, 2) = Range("AICollapsed")
            Else
                GroupOrder(I, 1) = Mid(Cells(iRow, AICollapseCol), 3)
                GroupOrder(I, 2) = Range("AIExpanded")
            End If
            Cells(iRow, 1).EntireRow.Delete
            If iRow < ActiveCell.Row Then Cells(ActiveCell.Row - 1, ActiveCell.Column).Select
        End If
    Next iRow
End Sub
Sub a3115InsertNewRow(InsertRowLocation, Optional SheetProtectionStatus = False, Optional ForceNewRow As Boolean = False, Optional TurnOffEvents As Boolean = False)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    'If there is no blank Row, then insert a new blank Row
    If ForceNewRow Or Application.WorksheetFunction.CountIf(Range(Cells(AIDetailFirstRow, AIDueGroupCol), Cells(AIDetailLastRow, AIDueGroupCol)), "[0],New (since last sort)") = 0 Then
        If SheetProtectionStatus Then SetProtection False
        Cells(InsertRowLocation, 1).EntireRow.Insert
        
        'Paint formats on Group Detail row
        Range("AIFormatRow").Copy (Cells(InsertRowLocation, AIDetailFirstCol))
        Range(Cells(InsertRowLocation, AIDetailFirstCol), Cells(InsertRowLocation, AINumCol)).Interior.Color = Range("AIFormatGroupDetailNew").Interior.Color
        Range(Cells(InsertRowLocation, AICreatedCol), Cells(InsertRowLocation, AIUpdatedCol)).Interior.Color = Range("AIFormatGroupDetailNew").Interior.Color
        
        If SheetProtectionStatus Then SetProtection True
        Cells(InsertRowLocation, AINumCol) = Application.WorksheetFunction.Max(Range(Cells(AIDetailFirstRow, AINumCol).Address & ":" & Cells(AIDetailLastRow, AINumCol).Address)) + 1
    End If
    a2150CustomUndo , , , True      'Clear Undo Stack
End Sub
Sub a3120ToggleGroupVisibility()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    SetEventsScreenProtect False, False
    a3100ToggleGroupVisibility ActiveCell
    SetEventsScreenProtect True, True
End Sub
Sub a3130ExpandAllGroups()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    SetEventsScreenProtect False, False, , xlWait
    RunScreen 0.2
    For iRow = AIDetailFirstRow To AIDetailLastRow
        If Left(Cells(iRow, AICollapseCol), Len(Range("AICollapsed"))) = Range("AICollapsed") Then a3100ToggleGroupVisibility Cells(iRow, AICollapseCol)
        If iRow = Int((AIDetailFirstRow + AIDetailLastRow) / 2) Then RunScreen 0.6
    Next iRow
    RunScreen 1
    SetEventsScreenProtect True, True, , xlNorthwestArrow
End Sub
Sub a3135CollapseAllGroups()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    SetEventsScreenProtect False, False, , xlWait
    RunScreen 0.2
    For iRow = AIDetailFirstRow To AIDetailLastRow
        If Left(Cells(iRow, AICollapseCol), Len(Range("AIExpanded"))) = Range("AIExpanded") Then a3100ToggleGroupVisibility Cells(iRow, AICollapseCol)
        If iRow = Int((AIDetailFirstRow + AIDetailLastRow) / 2) Then RunScreen 0.6
    Next iRow
    RunScreen 1
    SetEventsScreenProtect True, True, , xlNorthwestArrow
End Sub
Sub a3140SwapGroups(MoveGroupDown As Boolean, UpperGroupRow, LowerGroupRow, LowerGroupFinishRow)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If UpperGroupRow < 1 Or LowerGroupRow <= UpperGroupRow Or LowerGroupFinishRow <= LowerGroupRow Then Exit Sub
    
    If Not ActiveSheet.ProtectContents Then ProtectionPreviouslyDisabled = True
    If Not ProtectionPreviouslyDisabled Then SetEventsScreenProtect False, False, False
    
    UpperGroupRowCount = LowerGroupRow - UpperGroupRow
    LowerGroupRowCount = LowerGroupFinishRow - LowerGroupRow + 1
    
    Rows("" & UpperGroupRow & ":" & UpperGroupRow + UpperGroupRowCount - 1 & "").Cut
    Rows(LowerGroupFinishRow + 1).Insert xlDown
    
    If MoveGroupDown Then Cells(UpperGroupRow + LowerGroupRowCount, AICollapseCol).Select
    If Not MoveGroupDown Then Cells(UpperGroupRow, AICollapseCol).Select
    
    a5300AvoidScreenFlicker
    a2150CustomUndo , , , True      'Clear Undo Stack
    If Not ProtectionPreviouslyDisabled Then SetEventsScreenProtect True, True, True
    ActiveCell.Select
End Sub
Sub a3200Sort(GroupCol As Integer, Optional SortCol1 As Integer, Optional SortCol2 As Integer, Optional SortCol3 As Integer, Optional DeleteAllRows As Boolean, Optional NewRowCount As Integer = 1, Optional IncludeDefaultSort = True)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    Static LastSortTime
    If LastSortTime + (5 / 86400) > Now() Then ReverseSort = True 'If run without this short period of time, then sorting by the previous sort column will reverse the sort order (ascending/descending)
    
    If zAppRan <> "Yes" Then zApprovalCheck
    
    SetEventsScreenProtect False, False, False, xlWait
    RunScreen 0.2
    
    'Capture current position and prepare sort and clear Groups
    If AIIsGroupRow Then    'Group
        OriginalGroup = Cells(ActiveCell.Row, ActiveCell.Column)
    Else                    'Detail Row
        OriginalColumn = ActiveCell.Column
        If AIIsRowOpen Then
            OriginalUniqueID = Cells(ActiveCell.Row, AIUniqueIDCol)
        Else                'Row closed, so use appropriate row
            For iRow = ActiveCell.Row + 1 To AINextGroupRow - 1                 'Search down for open row
                If AIIsRowOpen(iRow) Then OriginalUniqueID = Cells(iRow, AIUniqueIDCol): GoTo 100
            Next iRow
            For iRow = ActiveCell.Row - 1 To AIPreviousGroupRow + 1 Step -1     'Search up for open row
                If AIIsRowOpen(iRow) Then OriginalUniqueID = Cells(iRow, AIUniqueIDCol): GoTo 100
            Next iRow
        End If
    End If
100 a3110ClearGroups
    Range(Cells(AIDetailFirstRow, 1), Cells(AIDetailLastRow, 1)).Rows.AutoFit   'Unhide all rows and autofit row heights to fit text
    
    'Clear Previous Sort Symbol location
    If Cells(AIHeaderRow, GroupCol).Width > 0 Then SortSymbolCol = GroupCol Else SortSymbolCol = SortCol1
    If SortSymbolCol = AINumCol Or SortSymbolCol = AIClosedCol Then SortSymbolCol = 2       'Due to merged cells for the AI# field
    SortSymbolAscending = Range("AISortAscending")
    SortSymbolDescending = Range("AISortDescending")
    
    Dim SortAscending As Boolean
    SortAscending = True    'Set default sort order
    
    PreviousSortColumn = AIFindCurrentSortColumn
    If InStr(1, Cells(AIHeaderRow, PreviousSortColumn), SortSymbolAscending) > 0 Then        'Last sort ascending
        Cells(AIHeaderRow, PreviousSortColumn) = Left(Cells(AIHeaderRow, PreviousSortColumn), Len(Cells(AIHeaderRow, PreviousSortColumn)) - Len(SortSymbolAscending))
        If Application.Version >= 12# Then Cells(AIHeaderRow, PreviousSortColumn).Interior.Gradient.Degree = 90
        Cells(AIHeaderRow, PreviousSortColumn).Font.Bold = False
        If PreviousSortColumn = SortSymbolCol Then    'Sorting by previous sort column
            If ReverseSort Then
                SortAscending = False
            Else
                SortAscending = True
                SameColumnReSort = True
            End If
        End If
    ElseIf InStr(1, Cells(AIHeaderRow, AIFindCurrentSortColumn), SortSymbolDescending) > 0 Then  'Last sort descending
        Cells(AIHeaderRow, PreviousSortColumn) = Left(Cells(AIHeaderRow, PreviousSortColumn), Len(Cells(AIHeaderRow, PreviousSortColumn)) - Len(SortSymbolDescending))
        If Application.Version >= 12# Then Cells(AIHeaderRow, PreviousSortColumn).Interior.Gradient.Degree = 90
        Cells(AIHeaderRow, PreviousSortColumn).Font.Bold = False
        If PreviousSortColumn = SortSymbolCol Then    'Sorting by previous sort column
            If ReverseSort Then
                SortAscending = True
            Else
                SortAscending = False
                SameColumnReSort = True
            End If
        End If
    End If
    
    'Set Sort Symbol location
    If SortAscending = True Then
        Cells(AIHeaderRow, SortSymbolCol) = Cells(AIHeaderRow, SortSymbolCol) & SortSymbolAscending
        If Application.Version >= 12# And Cells(AIHeaderRow, SortSymbolCol).Width > 0 Then Cells(AIHeaderRow, SortSymbolCol).Interior.Gradient.Degree = 270
    Else
        Cells(AIHeaderRow, SortSymbolCol) = Cells(AIHeaderRow, SortSymbolCol) & SortSymbolDescending
        If Application.Version >= 12# Then Cells(AIHeaderRow, SortSymbolCol).Interior.Gradient.Degree = 270
    End If
    Cells(AIHeaderRow, SortSymbolCol).Font.Bold = True

    RunScreen 0.4
    If DeleteAllRows Then
        Range(Cells(AIDetailFirstRow, AIDetailFirstCol), Cells(AIDetailLastRow, AIDetailLastCol)).EntireRow.Delete
        'Add blank new rows
        For I = 1 To NewRowCount
            a3115InsertNewRow AIDetailFirstRow + I - 1, False, True
        Next I
    Else
        SortArray = Range(Cells(AIDetailFirstRow, AIDetailFirstCol).Address, Cells(AIDetailLastRow, AIDetailLastCol))
        
        If IncludeDefaultSort Then
            'Add default sort (sort sequentially from least important to most important)
            a3602Sort2DArray SortArray, AINumCol - AIDetailFirstCol + 1, SortAscending
            a3602Sort2DArray SortArray, AISubcategoryCol - AIDetailFirstCol + 1, SortAscending
            a3602Sort2DArray SortArray, AICategoryCol - AIDetailFirstCol + 1, SortAscending
            ''Removed:  a3602Sort2DArray SortArray, AIRespCol - AIDetailFirstCol + 1, SortAscending
            ''Removed:  a3602Sort2DArray SortArray, AIPriorityCol - AIDetailFirstCol + 1, SortAscending
            ''Removed:  a3602Sort2DArray SortArray, AIDueCol - AIDetailFirstCol + 1, SortAscending
        End If
        
        'Sort by Sort Columns
        If SortCol3 > 0 Then a3602Sort2DArray SortArray, SortCol3 - AIDetailFirstCol + 1, SortAscending
        If SortCol2 > 0 Then a3602Sort2DArray SortArray, SortCol2 - AIDetailFirstCol + 1, SortAscending
        If SortCol1 = AICreatedCol Or SortCol1 = AIUpdatedCol Then  'Reverse sort for Created and Updated columns (most recent to least recent)
            a3602Sort2DArray SortArray, SortCol1 - AIDetailFirstCol + 1, Not SortAscending
        ElseIf SortCol1 > 0 Then
            a3602Sort2DArray SortArray, SortCol1 - AIDetailFirstCol + 1, SortAscending
        End If
        
        'Sort by Group and NewOpenClosed
        a3602Sort2DArray SortArray, GroupCol - AIDetailFirstCol + 1, SortAscending
        a3602Sort2DArray SortArray, AINewOpenClosedCol - AIDetailFirstCol + 1 'sorts out the CLOSED items ? ? ?
        
        Range(Cells(AIDetailFirstRow, AIDetailFirstCol).Address, Cells(AIDetailLastRow, AIDetailLastCol)) = SortArray
        
        'Paint formats, validation, and formulas on Group Detail rows
        Range("AIFormatRow").Copy
        Range(Cells(AIDetailFirstRow, AIDetailFirstCol), Cells(AIDetailLastRow, AIDetailLastCol)).PasteSpecial xlPasteFormats
        Range(Cells(AIDetailFirstRow, AIDetailFirstCol), Cells(AIDetailLastRow, AIDetailLastCol)).PasteSpecial xlPasteValidation
        Range(Cells(Range("AIFormatRow").Row, AIFormulaColStart), Cells(Range("AIFormatRow").Row, AIDetailLastCol)).Copy
        Range(Cells(AIDetailFirstRow, AIFormulaColStart), Cells(AIDetailLastRow, AIDetailLastCol)).PasteSpecial xlPasteFormulas
        If SortSymbolCol = GroupCol Then Range(Cells(AIDetailFirstRow + 1, SortSymbolCol), Cells(AIDetailLastRow, SortSymbolCol)).Font.Color = RGB(141, 180, 227)   'RGB(216, 216, 216)
        Application.CutCopyMode = False
        Application.Calculate
        
        'Lock cells for ReadOnlyMode
        AIReadOnlyMode = GetRange("AIReadOnlyMode")
        If AIReadOnlyMode Then Range(Cells(AIDetailFirstRow, AINumCol), Cells(AIDetailLastRow, AIDetailLastCol)).Locked = True
        
        'Insert new Row if missing and paint new rows
        a3115InsertNewRow AIDetailFirstRow, False
        For iRow = AIDetailFirstRow To AIDetailLastRow
            If Left(Cells(iRow, AINewOpenClosedCol), 3) <> "[0]" Then Exit For
            Range(Cells(iRow, AIDetailFirstCol), Cells(iRow, AINumCol)).Interior.Color = Range("AIFormatGroupDetailNew").Interior.Color
            Range(Cells(iRow, AICreatedCol), Cells(iRow, AIUpdatedCol)).Interior.Color = Range("AIFormatGroupDetailNew").Interior.Color
        Next iRow
    End If
    RunScreen 0.6
    
    'Add Group Headers
    For iRow = AIDetailLastRow To AIDetailFirstRow Step -1
        If Rows(iRow).Hidden = False Then
            If (Cells(iRow, GroupCol).Text <> Cells(iRow - 1, GroupCol).Text And Cells(iRow - 1, AIClosedCol) <> Range("AIClosed")) Or (Cells(iRow, AINewOpenClosedCol).Text <> Cells(iRow - 1, AINewOpenClosedCol).Text) Then
                
                'Insert Group Header
                Cells(iRow, 1).EntireRow.Insert
                If iRow <= ActiveCell.Row Then Cells(ActiveCell.Row + 1, ActiveCell.Column).Select
                
                'Format and Name Group Header
                If Left(Cells(iRow + 1, AINewOpenClosedCol), 3) = "[0]" Then                    'New Group
                    Range("AIFormatGroupHeaderNew").Copy (Cells(iRow, AIDetailFirstCol))
                ElseIf Cells(iRow + 1, AIClosedCol) = Range("AIClosed") Then                    'Closed Group
                    Range("AIFormatGroupHeaderClosed").Copy (Cells(iRow, AIDetailFirstCol))
                ElseIf Left(Cells(iRow + 1, GroupCol), 1) = "[" Then                            'Date Group
                    Range("AIFormatGroupHeader").Copy (Cells(iRow, AIDetailFirstCol))
                    Cells(iRow, AICollapseCol) = Range("AIExpanded") & " " & Mid(Cells(iRow + 1, GroupCol), 5)
                Else                                                                            'Open Group
                    Range("AIFormatGroupHeader").Copy (Cells(iRow, AIDetailFirstCol))
                    If Cells(iRow + 1, GroupCol) = "" Then
                        Cells(iRow, AICollapseCol) = Range("AIExpanded") & " " & "None"
                    Else
                        GroupName = Cells(iRow + 1, GroupCol).Text
                        If Len(GroupName) <= 2 Then
                            HeaderName = Cells(AIHeaderRow, GroupCol)
                            If Left(HeaderName, 1) = "*" Then HeaderName = Mid(HeaderName, 2, 999)
                            If InStr(1, HeaderName, " ") > 0 Then HeaderName = Left(HeaderName, InStr(1, HeaderName, " ") - 1)
                            GroupName = HeaderName & ": " & GroupName
                        End If
                        Cells(iRow, AICollapseCol) = Range("AIExpanded") & " " & GroupName
                    End If
                End If
                Cells(iRow, 1).RowHeight = Cells(iRow, 1).RowHeight * 2
                
                'Collapse group if previously collapsed and mark if group is not in previously sorted order
                For iGroup = LBound(GroupOrder) To UBound(GroupOrder)   'From last to first
                    If Mid(Cells(iRow, AICollapseCol), 3) = GroupOrder(iGroup, 1) Then
                        If GroupOrder(iGroup, 2) = Range("AICollapsed") Then    'Collapse Group
                            a3100ToggleGroupVisibility Cells(iRow, AICollapseCol)
                            SetProtection False
                        End If
                        If iGroup <> LastGroupSort + 1 And SameColumnReSort Then CustomGroupSortRequired = True
                        LastGroupSort = iGroup
                        Exit For
                    End If
                Next iGroup
                
                If Rnd() > 0.7 Then RunScreen 0.6 + 0.35 * ((AIDetailLastRow - AIDetailFirstRow) - (iRow - AIDetailFirstRow)) / (AIDetailLastRow - AIDetailFirstRow)
            End If
        End If
    Next iRow
    
    'Resort Group Headers (if not in default sort order due to moving groups up and down)
    If CustomGroupSortRequired Then
ReSortRequired:
        CurrentGroupLoc = AIFindGroupRow(GroupOrder(1, 1))
        For iGroup = LBound(GroupOrder) + 1 To UBound(GroupOrder) - 1   'From last to first (not including Closed or New)
            PreviousGroupLoc = CurrentGroupLoc
            CurrentGroupLoc = AIFindGroupRow(GroupOrder(iGroup, 1))
            If CurrentGroupLoc <> AIPreviousGroupRow(PreviousGroupLoc) Then
                NextGroupLoc = AINextGroupRow(CurrentGroupLoc)
                NextGroupFinishRow = AINextGroupRow(NextGroupLoc) - 1
                a3140SwapGroups True, CurrentGroupLoc, NextGroupLoc, NextGroupFinishRow
                CurrentGroupLoc = AIFindGroupRow(GroupOrder(iGroup, 1))
                ResortCount = ResortCount + 1
                If ResortCount < 1000 Then GoTo ReSortRequired
            End If
        Next iGroup
    End If
    
    a3900StatusVisibilityApply True
    
    'Set activecell location
    Cells(AIDetailFirstRow, AICollapseCol).Select   'Select top cell in case other options below are not valid selections
    On Error Resume Next
    If OriginalGroup <> "" Then
        Cells(FindRow(OriginalGroup, AICollapseCol, , AIDetailFirstRow), AICollapseCol).Select
'        ActiveWindow.ScrollRow = ActiveCell.Row
    Else
        Cells(FindRow(OriginalUniqueID, AIUniqueIDCol, , AIDetailFirstRow), OriginalColumn).Select
'        ActiveWindow.ScrollRow = AIPreviousGroupRow
    End If
    If RunMode Then On Error Resume Next Else On Error GoTo 0
        
    'Shift screen so selected cell is on screen
    FirstVisibleRow = ActiveWindow.VisibleRange.Row
    LastVisibleRow = FirstVisibleRow + ActiveWindow.VisibleRange.Rows.Count - 2
    If ActiveCell.Row < FirstVisibleRow Or ActiveCell.Row > LastVisibleRow Then     'Cell off window, so must shift vertical scroll
        If AIIsGroupRow Then
            ActiveWindow.ScrollRow = ActiveCell.Row
        Else
            ActiveWindow.ScrollRow = AIPreviousGroupRow
            FirstVisibleRow = ActiveWindow.VisibleRange.Row
            LastVisibleRow = FirstVisibleRow + ActiveWindow.VisibleRange.Rows.Count - 2
            If ActiveCell.Row < FirstVisibleRow Or ActiveCell.Row > LastVisibleRow Then ActiveWindow.ScrollRow = ActiveCell.Row - 1
        End If
    End If
    
    a2150CustomUndo , , , True      'Clear Undo Stack
    LastSortTime = Now()
    a5300AvoidScreenFlicker
    RunScreen 1
    SetEventsScreenProtect True, True, True, xlNorthwestArrow

End Sub
Sub a3510ResetCompleteAIList()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    
    If MsgBox("FULL DATA RESET:  This will permanently delete out all of the data in this current AI List file.  It is recommended to 'Cancel' this 'FULL DATA RESET' and first SaveAs this file to a new file name." & Enter2 & "Ok to continue?", vbOKCancel + vbExclamation, SiteAddy) = vbCancel Then Exit Sub
    IsAll10BlankRows = a2305IsAll10BlankRows
    If ((ActiveSheet.Name = AIListSheetName) And (Cells(AIHeaderRow + 4, AICategoryCol) = "Basic User Tips")) Or ((ActiveSheet.Name = AIListSheetName) And IsAll10BlankRows) Then
            'skip "DELETE ALL" prompt
        Else
            If UCase(InputBox("FULL DATA RESET:  This will permanently delete out all your data from this AI List file." & Enter2 & "Type in 'delete all' to continue...", SiteAddy, "CANCEL")) <> "DELETE ALL" Then Exit Sub
    End If
    'Force Read Only Mode off (Unlocked mode)
    Sheets(AIListSheetName).Names("AIReadOnlyMode").RefersTo = False
    Sheets(AIListSheetName).Names("AIFileNameEndText").RefersTo = " "
    
    a3200Sort AINewOpenClosedCol, AINumCol, , , True, 10    'Delete all Rows
    a3520RebuildAllDropDowns                                'Rebuild drop downs
    a3515RebuildAddSheetsHere                               'delete then create "<Add Your Sheets Here>"
    a5440TabMenuButton4 True                                'Display Help tab (but not Msg to CUser, since a2300 will display similar message
    a2300MsgNewToAIList
End Sub
Sub a3515RebuildAddSheetsHere()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    
    Set OriginalSelectedSheet = ActiveSheet
    ThisWorkbook.Activate 'one with this AI LIST code
    
    'remove old
    For Each iSheet In ActiveWorkbook.Sheets
        If iSheet.Name = "<Add Your Sheets Here>" Then
            OrigAlert = Application.DisplayAlerts
            Application.DisplayAlerts = False
            iSheet.Delete
            Application.DisplayAlerts = OrigAlert
        End If
    Next iSheet
    'add NEW
    Sheets.Add After:=Sheets(Sheets.Count)
    If Not (ActiveSheet.Name Like "Sheet*") Then Exit Sub
    ActiveSheet.Name = "<Add Your Sheets Here>"
    Sheets("<Add Your Sheets Here>").Select
    ActiveWorkbook.Sheets("<Add Your Sheets Here>").Tab.Color = 65280
    'Fill Text
    Range("B2").Select
'    ActiveCell.FormulaR1C1 = "Creating additional sheets or copying in sheets from other files is acceptable..."
    ActiveCell.FormulaR1C1 = "You may create additional sheets or copy in sheets from other files.  You may not copy or move the original AI List included sheets to other files."
    ActiveCell.Characters(Start:=1, Length:=999).Font.FontStyle = "Italic"
    ActiveCell.Characters(Start:=9, Length:=6).Font.FontStyle = "Bold Italic"
    ActiveCell.Characters(Start:=37, Length:=7).Font.FontStyle = "Bold Italic"
'    Range("B3").Select
'    ActiveCell.FormulaR1C1 = "...copying out (or moving or deleting) JTF Automation sheets to other files is not permitted.  (as outlined in 'Terms & Conditions' on HELP sheet)"
'    ActiveCell.Characters(Start:=1, Length:=999).Font.FontStyle = "Italic"
    Range("A1").Select
    
    OriginalSelectedSheet.Activate ' at end
End Sub
Sub a3520RebuildAllDropDowns()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    RunScreen 0.2
    a2270RebuildDropDowns AICategoryCol
    a2270RebuildDropDowns AIRespCol
    RunScreen 0.6
    a2270RebuildDropDowns AIPriorityCol, "1,2,3,Low,Hold,Done,Review,Hidden"
    a2270RebuildDropDowns AIStatusCol, "25% Complete,50% Complete,75% Complete,100% Complete,Hold,Review,Hidden"
    RunScreen 1
End Sub
Sub a3600UpdateDropDownDefaults(ByVal Target As Range)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If Target.Value = "<Enter any value>" Or Target.Value = "" Then     'No new value has been entered
        Target.Value = ""
    Else                                                                'Add new value to drop down range if not already in list
        'SAVE Event state
        OrigEnableEventsTrueFalse = Application.EnableEvents
        OrigScreenUpdatingTrueFalse = Application.ScreenUpdating
        OrigSetProtectionTrueFalse = ActiveSheet.ProtectContents
        SetEventsScreenProtect False, False, False 'this also needed since a3610AutoColumnWidthGrow assumes so
        
        'Figure out validation range
        ValidationRange = Mid(Target.Validation.Formula1, 2)
        RangeStartCol = Range(ValidationRange).Column
        RangeStartRow = Range(ValidationRange).Row
        RangeFinishRow = RangeStartRow + Range(ValidationRange).Count - 1

        'Remove <Enter any value> if only item in list
        If RangeFinishRow = RangeStartRow And Sheets(AIListSheetName).Cells(RangeStartRow, RangeStartCol).Value = "<Enter any value>" Then
            Sheets(AIListSheetName).Cells(RangeFinishRow, RangeStartCol).Value = Target.Value
        End If
        
        'Figure out if new item is in list
        For I = RangeStartRow To RangeFinishRow
            If Target.Value = Sheets(AIListSheetName).Cells(I, RangeStartCol).Value Then AlreadyInList = True: Exit For
        Next I
        
        'Add to list if not already in list
        If Not AlreadyInList Then
            If RangeFinishRow + 1 = Range("AIDataValidationLastRow").Row Then
                Range("AIDataValidationLastRow").EntireRow.Insert
                AIHideRow Range("AIDataValidationLastRow").Row - 1
            End If
            Sheets(AIListSheetName).Cells(RangeFinishRow + 1, RangeStartCol).Value = Target.Value
            Names(ValidationRange).RefersTo = "='" & AIListSheetName & "'!" & Range(Cells(RangeStartRow, RangeStartCol), Cells(RangeFinishRow + 1, RangeStartCol)).Address
            
            'Resort list
            If Range(ValidationRange).Count > 1 Then
                If Target.Column = AIRespCol Then   'Need to include email column (column to right) in sort
                    RangeToSort = Range(Sheets(AIListSheetName).Cells(RangeStartRow, RangeStartCol), Sheets(AIListSheetName).Cells(RangeFinishRow + 1, RangeStartCol + 1)).Address
                    'Show range (must be visible to sort...not sure why this is required)
                    Sheets(AIListSheetName).Range(RangeToSort).EntireRow.Hidden = False
                    Sheets(AIListSheetName).Range(RangeToSort).Sort Range(ValidationRange)
                    Sheets(AIListSheetName).Range(RangeToSort).EntireRow.Hidden = True
                Else
                    'Show range (must be visible to sort...not sure why this is required)
                    Sheets(AIListSheetName).Range(ValidationRange).EntireRow.Hidden = False
                    Sheets(AIListSheetName).Range(ValidationRange).Sort Range(ValidationRange)
                    Sheets(AIListSheetName).Range(ValidationRange).EntireRow.Hidden = True
                End If
            End If
        
''        a3610AutoColumnWidthGrow Target         THIS IS COMMENTED OUT AS IT DOES NOT FUNCTION CORRECTLY
                ''AND ALLOWS OTHER CELLS TO GROW IN HEIGHT DUE WHEN MAKING THE WIDTH AUTO ADJUST TO A SMALL VALUE
                ''(Reference email from James to Mike on 11/13/12)
                ''Likey need to temp copy val to a far right column, then AutoColumnWidth on that col to determin ideal width, delete temp val, then grow main column.  (otherwise temp shrink of column causes some other rows to gro TALL)
        'RESTORE Event State
        OrigEnableEventsTrueFalse = Application.EnableEvents
        OrigScreenUpdatingTrueFalse = Application.ScreenUpdating
        OrigSetProtectionTrueFalse = ActiveSheet.ProtectContents
        SetEventsScreenProtect OrigEnableEventsTrueFalse, OrigScreenUpdatingTrueFalse, OrigSetProtectionTrueFalse
        End If
    End If
End Sub
Sub a3601Sort1DArray(myArray)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    For ArrayRow = 0 To UBound(myArray) - 1
        StartingKeyValue = myArray(ArrayRow)
        NewKeyValue = myArray(ArrayRow)
        swap_pos = ArrayRow
        For j = ArrayRow + 1 To UBound(myArray)
            If myArray(j) < NewKeyValue Then
                swap_pos = j
                NewKeyValue = myArray(j)
            End If
        Next j
        If swap_pos <> ArrayRow Then
            myArray(swap_pos) = StartingKeyValue
            myArray(ArrayRow) = NewKeyValue
        End If
    Next ArrayRow
End Sub
Sub a3602Sort2DArray(myArray, SortCol As Integer, Optional SortAscending As Boolean = True)
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    For I = LBound(myArray, 1) To UBound(myArray, 1) - 1
        For j = LBound(myArray, 1) To UBound(myArray, 1) - 1
'If myArray(j, SortCol) = "" Then Stop
            CurrentSortCell = myArray(j, SortCol)
            NextSortCell = myArray(j + 1, SortCol)
'            If (CurrentSortCell = "") Or (SortAscending And CurrentSortCell > NextSortCell And NextSortCell <> "") Or (Not SortAscending And CurrentSortCell < NextSortCell And NextSortCell <> "") Then
''            If (CurrentSortCell = "" And NextSortCell <> "") Or (SortAscending And CurrentSortCell > NextSortCell And NextSortCell <> "") Or (Not SortAscending And CurrentSortCell < NextSortCell And NextSortCell <> "") Then
            If (SortAscending And NextSortCell <> "" And (CurrentSortCell = "" Or NextSortCell < CurrentSortCell)) _
                Or (Not SortAscending And CurrentSortCell <> "" And (NextSortCell = "" Or CurrentSortCell < NextSortCell)) Then
'            If (myArray(j, SortCol) = "") Or (SortAscending And myArray(j, SortCol) > myArray(j + 1, SortCol)) Or (Not SortAscending And myArray(j, SortCol) < myArray(j + 1, SortCol)) Then
                'Swap this row and next row positions
                For ArrayCol = LBound(myArray, 2) To UBound(myArray, 2)
                    temp = myArray(j, ArrayCol)
                    myArray(j, ArrayCol) = myArray(j + 1, ArrayCol)
                    myArray(j + 1, ArrayCol) = temp
                Next ArrayCol
            End If
        Next j
    Next I
End Sub
Function a3603CleanTextOfUnknownCharacters(DirtyText) 'NOT USED
    ThisChar = ""
    CleanText = ""
    LastX = Len(DirtyText)
    For X = 1 To LastX
        ThisChar = Mid(DirtyText, X, 1)
        ThisCharAsc = Asc(ThisChar)
        'If ThisCharAsc < 32 Or ThisCharAsc > 126 Then <<< FAILS ' [Space] Thru [~]
        'If ThisCharAsc < 65 Or ThisCharAsc > 65 Then  <<< PASS' [Space] Thru [~]
        IsDirty = True
        
        If (ThisCharAsc >= 32 And ThisCharAsc <= 32) Then IsDirty = False ' space
        If (ThisCharAsc >= 48 And ThisCharAsc <= 57) Then IsDirty = False ' numbers
        If (ThisCharAsc >= 65 And ThisCharAsc <= 90) Then IsDirty = False ' A-Z
        If (ThisCharAsc >= 97 And ThisCharAsc <= 122) Then IsDirty = False ' a-z
        
        If IsDirty Then
            'Dirty
            ThisChar = " "
        End If
        If X = 1 And ((ThisCharAsc >= 65 And ThisCharAsc <= 90) Or (ThisCharAsc >= 97 And ThisCharAsc <= 122)) Then ThisChar = "" ' A-Z and a-z
        CleanText = CleanText + ThisChar
        ThisChar = ""
    Next X
    a3603CleanTextOfUnknownCharacters = CleanText
End Function
Function a3604LimitLength254(Text) ' such as limiting drop down length
    If Len(Text) > 254 Then FinalText = Left(Text, 254) Else FinalText = Text
    a3604LimitLength254 = FinalText
End Function
Sub a3605UpdateDropDownSubcategoryDefaults(ByVal Target As Range)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    
    'Find all used Subcategories for the current Category
    RowCategory = Cells(Target.Row, AICategoryCol)
    Dim SubcategoryList As String
    For iRow = AIDetailFirstRow To AIDetailLastRow
        If Cells(iRow, AICategoryCol) = RowCategory Then
            PotentialNewValue = Cells(iRow, AISubcategoryCol)
            ItemExists = InStr(1, "," & SubcategoryList & ",", "," & PotentialNewValue & ",")
            If ItemExists = 0 And PotentialNewValue <> "" Then          'Add to Subcategory list
                If SubcategoryList = "" Then SubcategoryList = Cells(iRow, AISubcategoryCol) Else SubcategoryList = SubcategoryList & "," & Cells(iRow, AISubcategoryCol)
            End If
        End If
    Next iRow
    
    'Sort Subcategory Drop Down List
    NewArray = Split(SubcategoryList, ",")
    a3601Sort1DArray NewArray
    
    For I = LBound(NewArray) To UBound(NewArray)
        NewList = NewList & NewArray(I) & ","
    Next I
    If NewList = "" Then NewList = "<Enter any value>" Else NewList = Left(NewList, Len(NewList) - 1)
    SetProtection False
    With Target.Validation
        .Delete
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=a3604LimitLength254(NewList)
        .ShowInput = False
        .ShowError = False
    End With
    SetProtection True
End Sub
Sub FUTUREa3605UpdateDropDownSubcategoryDefaults(ByVal Target As Range)
'This subroutine significantly slows down the speed of entering the subcategory cells, but does allow for more than 254 characters
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    
    'Figure out validation range
    ValidationRange = Mid(Target.Validation.Formula1, 2)
    RangeStartCol = Range(ValidationRange).Column
    RangeStartRow = Range(ValidationRange).Row
    RangeFinishRow = RangeStartRow + Range(ValidationRange).Count - 1
    
    'Clear out last subcategory drop down list
    For I = RangeStartRow To RangeFinishRow
        Sheets(AIListSupportSheetName).Cells(I, RangeStartCol).Value = ""
    Next I
    RangeFinishRow = RangeStartRow
    Names(ValidationRange).RefersTo = "='" & AIListSupportSheetName & "'!" & Range(Cells(RangeStartRow, RangeStartCol), Cells(RangeFinishRow, RangeStartCol)).Address
    
    'Find all used Subcategories for the current Category
    CurrentCategory = Cells(Target.Row, AICategoryCol)
    For iRow = AIDetailFirstRow To AIDetailLastRow
        If Cells(iRow, AICategoryCol) = CurrentCategory And Cells(iRow, AISubcategoryCol) <> "" Then
            If Range(ValidationRange).Find(Cells(iRow, AISubcategoryCol)) Is Nothing Then
                If Sheets(AIListSupportSheetName).Cells(RangeFinishRow, RangeStartCol).Value <> "" Then RangeFinishRow = RangeFinishRow + 1
                Sheets(AIListSupportSheetName).Cells(RangeFinishRow, RangeStartCol).Value = Cells(iRow, AISubcategoryCol)
                Names(ValidationRange).RefersTo = "='" & AIListSupportSheetName & "'!" & Range(Cells(RangeStartRow, RangeStartCol), Cells(RangeFinishRow, RangeStartCol)).Address
            End If
        End If
    Next iRow
    
    'Resort list
    If RangeFinishRow > RangeStartRow Then Range(ValidationRange).Sort Range(ValidationRange)
    
    'Add <Enter any value> if list is blank
    If RangeFinishRow = RangeStartRow And Sheets(AIListSupportSheetName).Cells(RangeStartRow, RangeStartCol).Value = "" Then Sheets(AIListSupportSheetName).Cells(RangeStartRow, RangeStartCol).Value = "<Enter any value>"

End Sub
Sub a3610AutoColumnWidthGrow(ThisCell As Range) 'assumes and leaves as SetEventsScreenProtect False,False,False
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    If ActiveSheet.Name <> AIListSheetName Then Exit Sub
    
    'SKIP if Long phrase
    ThisVal = ThisCell.Value
    ThisValNoSpace = Replace(ThisVal, " ", "")
    If Len(ThisVal) > Len(ThisValNoSpace) + 1 Then GoTo JumpOut
    'save ORIG
    OrigColumnWidth = ThisCell.ColumnWidth
    OrigWrapText = ThisCell.WrapText
    OrigShrinkToFit = ThisCell.ShrinkToFit
    'temp set
    ThisCell.WrapText = False
    ThisCell.ShrinkToFit = False
    ThisCell.Columns.AutoFit
    IdealColumnWidth = ThisCell.ColumnWidth + 0.1 'to overcome some zoom-effects on width
    'RESTORE ORIG
    ThisCell.WrapText = OrigWrapText
    ThisCell.ShrinkToFit = OrigShrinkToFit
    
    'Set to max width
    If OrigColumnWidth > IdealColumnWidth Then ThisCell.ColumnWidth = OrigColumnWidth Else ThisCell.ColumnWidth = IdealColumnWidth
JumpOut:
End Sub
Sub a3700RenumberAINumbers()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If MsgBox("RENUMBER:  This will permanently renumber all of the AI Numbers in the currently shown order." & Enter2 & "OK to continue?", vbOKCancel + vbInformation, SiteAddy) = vbCancel Then Exit Sub
    SetEventsScreenProtect False, False, , xlWait
    
    For iRow = AIDetailFirstRow To AIDetailLastRow
        If Cells(iRow, AICollapseCol) = "" Then
            If InStr(1, Cells(iRow, AINewOpenClosedCol), "New") And Cells(iRow, AICreatedCol) = "" Then
                NewRow = iRow
            Else
                NextAINumber = NextAINumber + 1
                Cells(iRow, AINumCol) = NextAINumber
            End If
        End If
    Next iRow
    'Number new row last
    If NewRow > 0 Then
        NextAINumber = NextAINumber + 1
        Cells(NewRow, AINumCol) = NextAINumber
    End If
    
    SetEventsScreenProtect True, True, , xlNorthwestArrow
End Sub
Sub a3800SwapRows(TopRowToSwap)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    BottomRowToSwap = AIFindAdjacentVisibleRow(TopRowToSwap, False)
    
    'Swap rows
    TopRow = Range(Cells(TopRowToSwap, AIClosedCol), Cells(TopRowToSwap, AIFormulaColStart - 1)).Formula
    BottomRow = Range(Cells(BottomRowToSwap, AIClosedCol), Cells(BottomRowToSwap, AIFormulaColStart - 1)).Formula
    Range(Cells(TopRowToSwap, AIClosedCol), Cells(TopRowToSwap, AIFormulaColStart - 1)).Formula = BottomRow
    Range(Cells(BottomRowToSwap, AIClosedCol), Cells(BottomRowToSwap, AIFormulaColStart - 1)).Formula = TopRow
    
    'Swap numbers back
    TopRowNum = Cells(TopRowToSwap, AINumCol).Formula
    BottomRowNum = Cells(BottomRowToSwap, AINumCol).Formula
    Cells(TopRowToSwap, AINumCol) = BottomRowNum
    Cells(BottomRowToSwap, AINumCol) = TopRowNum

    a2150CustomUndo , , , True      'Clear Undo Stack
End Sub
Sub a3810MoveRowUp()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    SetEventsScreenProtect False, False, False
    a3800SwapRows AIFindAdjacentVisibleRow(ActiveCell.Row, True)
    Cells(AIFindAdjacentVisibleRow(ActiveCell.Row, True), ActiveCell.Column).Select
    SetEventsScreenProtect True, True, True
End Sub
Sub a3820MoveRowDown()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    SetEventsScreenProtect False, False, False
    a3800SwapRows ActiveCell.Row
    Cells(AIFindAdjacentVisibleRow(ActiveCell.Row, False), ActiveCell.Column).Select
    SetEventsScreenProtect True, True, True
End Sub
Sub a3830AddNewRow()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    NewRowCount = Application.InputBox("NEW ROWS:  Enter the number of new rows to add.", SiteAddy, 1)
    For iRow = 1 To NewRowCount
        SetEventsScreenProtect False, False, False
        a3115InsertNewRow ActiveCell.Row + 1, , True
        Cells(ActiveCell.Row + 1, ActiveCell.Column).Select
        
        'Apply group info if not first (New) group
        If AIPreviousGroupRow > AIDetailFirstRow Then
            For iCol = AICategoryCol To AICommentCol
                If Cells(ActiveCell.Row - 1, iCol).Font.Color = RGB(141, 180, 227) And Cells(ActiveCell.Row - 1, iCol) <> "" Then
                    Cells(ActiveCell.Row, iCol).Font.Color = RGB(141, 180, 227)
                    SetEventsScreenProtect True
                    Cells(ActiveCell.Row, iCol) = Cells(ActiveCell.Row - 1, iCol)
                    Exit For
                End If
            Next iCol
        End If
        SetEventsScreenProtect True, True, True
    Next iRow
    Cells(ActiveCell.Row - iRow + 2, ActiveCell.Column).Select
End Sub
Sub a3900StatusVisibilityApply(Optional AlreadyUnprotected As Boolean = False)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If Not AlreadyUnprotected Then SetEventsScreenProtect False, False, False
    'Cycle through all groups and set visibility
    GroupRow = AINextGroupRow(AIHeaderRow)
    Do Until GroupRow = 0
        a3902SetStatusVisibilityOfGroup GroupRow
        GroupRow = AINextGroupRow(GroupRow)
    Loop
    If Not AlreadyUnprotected Then SetEventsScreenProtect True, True, True
End Sub
Sub a3902SetStatusVisibilityOfGroup(GroupHeaderRow)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If AIIsGroupExpanded(GroupHeaderRow) Then GroupExpanded = True
    
    'Cycle through all rows within and determine visibility and if Group header should be kept in view
    For iRow = GroupHeaderRow + 1 To AIGroupLastRow(GroupHeaderRow)
        If AIIsNewRow(iRow) Then
            'New rows always remain visible
            AIHideRow iRow, Not GroupExpanded
            KeepGroup = True
        Else
            If AIDoesRowRemainVisible(iRow) Then
                AIHideRow iRow, Not GroupExpanded
                KeepGroup = True
            Else
                AIHideRow iRow
            End If
        End If
    Next iRow
    If KeepGroup Then AIHideRow GroupHeaderRow, False Else AIHideRow GroupHeaderRow, True
    If AIIsRowHidden(ActiveCell.Row) Then Cells(AIFindAdjacentVisibleRow(ActiveCell.Row, True), ActiveCell.Column).Select
End Sub
Sub a3910ShowOnlyTheseValues()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    SetEventsScreenProtect False, False, False
    Cells(Range("AIShowValuesRow").Row, ActiveCell.Column).Value = ActiveCell.Value
    a3920FilterSymbol ActiveCell.Column, True
    SetEventsScreenProtect True, True, True
    a3900StatusVisibilityApply
End Sub
Sub a3912HideTheseValues()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    SetEventsScreenProtect False, False, False
    
    CurrentCol = ActiveCell.Column
    CurrentVal = ActiveCell.Value
    
    'Remove item from Show only these values if applicable
    If Cells(Range("AIShowValuesRow").Row, CurrentCol).Value = CurrentVal Then Cells(Range("AIShowValuesRow").Row, ActiveCell.Column).Value = ""
    
    'Find next available row
    iRow = Range("AIHideValuesStartRow").Row
    Do Until Cells(iRow, CurrentCol).Value = ""
        iRow = iRow + 1
    Loop
    
    'Add new value and hide row
    Cells(iRow, CurrentCol).Value = CurrentVal
    If Not Rows(iRow).Hidden Then Rows(iRow).Hidden = True
    
    a3920FilterSymbol ActiveCell.Column, True
    
    SetEventsScreenProtect True, True, True
    a3900StatusVisibilityApply
End Sub
Sub a3914ShowAllValues(Optional myColumn = "<USE CURRENT COLUMN>")
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    SetEventsScreenProtect False, False, False
    If myColumn = "<USE CURRENT COLUMN>" Then myColumn = ActiveCell.Column
    a3918ClearColumnFilter Val(myColumn)
    SetEventsScreenProtect True, True, True
    a3900StatusVisibilityApply
End Sub
Sub a3916ClearAllFilters()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    SetEventsScreenProtect False, False, False
    Dim iCol As Integer
    
    'Cycle through all columns
    For iCol = AIDetailFirstCol To AIDetailLastCol
        a3918ClearColumnFilter iCol
    Next iCol
    
    SetEventsScreenProtect True, True, True
    a3900StatusVisibilityApply
End Sub
Sub a3918ClearColumnFilter(FilterColumn As Integer)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    
    'Remove item from Show only these values if applicable
    Cells(Range("AIShowValuesRow").Row, FilterColumn).Value = ""

    'Remove item from Hide these values section if applicable
    iRow = Range("AIHideValuesStartRow").Row
    Do Until Cells(iRow, FilterColumn).Value = ""
        Cells(iRow, FilterColumn).Value = ""
        iRow = iRow + 1
    Loop
    a3920FilterSymbol FilterColumn, False

End Sub
Sub a3920FilterSymbol(myColumn, TurnDisplayOn As Boolean)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    FilterSymbol = "*"
    If InStr(1, Cells(AIHeaderRow, myColumn), FilterSymbol) > 0 Then CurrentDisplayOn = True
    If CurrentDisplayOn And Not TurnDisplayOn Then
        Cells(AIHeaderRow, myColumn).Value = Mid(Cells(AIHeaderRow, myColumn), 2)
    ElseIf Not CurrentDisplayOn And TurnDisplayOn Then
        Cells(AIHeaderRow, myColumn).Value = FilterSymbol & Cells(AIHeaderRow, myColumn)
    End If
End Sub
Sub a3930AIHiddenVisibility(HiddenVisibility As Boolean)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    SetRange "AIHiddenVisibility", HiddenVisibility
    a3900StatusVisibilityApply
End Sub


Attribute VB_Name = "a4000_AI_OutlookConnections"
'=================================== Copyright PROTECTED ====================================
'|fffd| 2013 JTF AUTOMATION  |  Report Unauthorized Use or Automation Errors to:  JTF.ENGINEERING@gmail.com
'================ Unlawful to copy, modify, distribute, plagiarize, or mimic ================
'=================================== Copyright PROTECTED ====================================
'============================================================================================
'============================ USER AGREEMENT of LIMITED USAGE ===============================
'MUST NOT BE DUPLICATED or used by any person, or on any PC, without JTF AUTOMATION direct consent.
'BY OPENING THIS FILE YOU AGREE TO PROTECT THIS FILE FROM UNAUTHORIZED USE OR DISTRIBUTION.
'BY OPENING THIS FILE YOU AUTHORIZE JTF AUTOMATION TO ELECTRONICALLY TRACK COMPUTERS WHERE IT WAS USED.
'IF YOU DO NOT AGREE TO THESE TERMS, YOU MUST DESTROY ALL COPIES OF THIS FILE AND IT'S CONTENT WITHIN 24hrs OF RECEIPT FROM JTF AUTOMATION, AND INFORM JTF AUTOMATION WITHIN 24hrs OF RECEIPT.
'============================ USER AGREEMENT of LIMITED USAGE ===============================
Option Private Module 'subs are NOT available outside this project
Sub a4000ExportRowToEmail()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    SetEventsScreenProtect False, False, False
    
    Dim olMail As Object
    Set olApp = CreateObject("Outlook.Application")
    Dim EmailAddress As Range
    Dim olNameSpace As Object
    Set olNameSpace = olApp.GetNamespace("MAPI")
    Set olInboxFolder = olNameSpace.GetDefaultFolder(6)     '13 is task folder, 6 is inbox
    
    For Each ThisCell In Selection
        Set olMail = olApp.CreateItem(0)
        Resp = Cells(ThisCell.Row, AIRespCol)
        If Resp <> "" Then
            Set EmailAddressStorageStart = Sheets(AIListSheetName).Range("AIEmailAddressStorageStart")
            EmailAddressRow = FindRow(Resp, EmailAddressStorageStart.Column, AIListSheetName, EmailAddressStorageStart.Row)
            Set EmailAddress = Sheets(AIListSheetName).Cells(FindRow(Resp, EmailAddressStorageStart.Column, AIListSheetName, EmailAddressStorageStart.Row), EmailAddressStorageStart.Column + 1)
            If EmailAddress = "" And Resp <> "" Then
                SetEventsScreenProtect False, False, False
                EmailAddress.Value = InputBox("SAVE EMAIL ADDRESS: Enter an email address for the item's responsible person, to have the AI List automation associate it to the following name." & Enter2 & "FOR: " & Resp, SiteAddy)
                SetEventsScreenProtect True, True, True
            End If
        End If
        
        'Update sync info
        Cells(ThisCell.Row, AIFullFileNameAtSyncCol) = ThisWorkbook.FullName
        Cells(ThisCell.Row, AILastSyncCol) = Now
    
        'Populate the form
        DestinationCol = Sheets(AIListSupportSheetName).Range("RowAssignmentStart").Column
        DestinationRowStart = Sheets(AIListSupportSheetName).Range("RowAssignmentStart").Row
        Sheets(AIListSupportSheetName).Cells(DestinationRowStart - 1, DestinationCol) = Cells(ThisCell.Row, AIUniqueIDCol)
        Sheets(AIListSupportSheetName).Cells(DestinationRowStart + 11, DestinationCol) = Cells(ThisCell.Row, AILastSyncCol)
        
        DestinationRow = DestinationRowStart + 1
        Sheets(AIListSupportSheetName).Cells(DestinationRow, DestinationCol) = Cells(ThisCell.Row, AINumCol)
        For iCol = AICategoryCol To AICommentCol
            DestinationRow = DestinationRow + 1
            If Cells(ThisCell.Row, iCol) = "" And iCol <> AIActionCol And iCol <> AIRespCol And iCol <> AIDueCol And iCol <> AIDescriptionCol And iCol <> AIStatusCol And iCol <> AICommentCol Then
                Sheets(AIListSupportSheetName).Cells(DestinationRow, DestinationCol).EntireRow.Hidden = True
            Else
                Sheets(AIListSupportSheetName).Cells(DestinationRow, DestinationCol).EntireRow.Hidden = False
                Sheets(AIListSupportSheetName).Cells(DestinationRow, DestinationCol) = Cells(ThisCell.Row, iCol)
            End If
        Next iCol
        
        'Create the Email body
        Sub1 = "From AI List:  "
        AWBName = ActiveWorkbook.Name
        If (UCase(AWBName) Like "*AI LIST*") Or (UCase(AWBName) Like "*ACTION ITEM*") Then Sub1 = "From:  "
        TextLine = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp|fffd| " & Sub1
        
        EmailBody = "<br><br>- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -<br>" & _
                    "AUTOMATED MESSAGE:  You have been sent the following action item.  " & _
                    "Please reply to the sender and update the white cells in the below table directly within this email, " & _
                    "so that the sender may use the AI List's automated ""IMPORT & UPDATE A ROW (FROM AN EMAIL)"" feature.<br><br>" & _
                    TextLine & AWBName
        EmailBody = EmailBody & RangetoHTML(Sheets(AIListSupportSheetName).Range("RowAssignment").SpecialCells(xlCellTypeVisible))
        EmailBody = EmailBody & "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -<br>"
        
        With olMail
            If Not EmailAddress Is Nothing Then .To = EmailAddress.Value
            WBName = ThisWorkbook.Name
            
            Sub2 = "(From Action Item List:  "
            If (UCase(WBName) Like "*AI LIST*") Or (UCase(WBName) Like "*ACTION ITEM*") Then Sub2 = "(From:  "
            
            .Subject = "AI# " & Cells(ThisCell.Row, AINumCol) & " " & Sub2 & WBName & ")"
            .Display
            .HTMLBody = EmailBody & .HTMLBody        'Putting this after display maintains the Email signature
        End With
    Next ThisCell
    
    SetEventsScreenProtect True, True, True
End Sub
Sub a4010ImportRowFromEmail()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    
Instructions:
    If MsgBox("IMPORT SELECTED EMAILS:  In Outlook, select (but do not open) the emails you wish to import, then click OK.  Each Email's applicable AI row will be updated to match the email's content.", vbOKCancel, SiteAddy) = vbCancel Then Exit Sub
    On Error Resume Next
    Set oOutLook = GetObject(, "Outlook.Application")   'Check to see if Outlook is open
    If Error <> "" Then GoTo Instructions
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    
    'Must have Email currently selected in Outlook
    Dim olMail As Object
    Set olApp = CreateObject("Outlook.Application")
    Set olMail = olApp.CreateItem(0)
    Dim EmailAddress As Range
    
    For Each olMail In olApp.ActiveExplorer.Selection
        'Retrieve fields from email
        EmailBody = olMail.Body
        EmailDataAINum = RetrieveFieldDataFromEmailTable(EmailBody, "AI#")
        EmailDataComplete = RetrieveFieldDataFromEmailTable(EmailBody, "Complete")
        EmailDataAction = RetrieveFieldDataFromEmailTable(EmailBody, "Subject")
        EmailDataDescription = RetrieveFieldDataFromEmailTable(EmailBody, "Action")
        EmailDataResponsibility = RetrieveFieldDataFromEmailTable(EmailBody, "Person")
        EmailDataPriority = RetrieveFieldDataFromEmailTable(EmailBody, "Priority")
        EmailDataDue = RetrieveFieldDataFromEmailTable(EmailBody, "Due")
        EmailDataStatus = RetrieveFieldDataFromEmailTable(EmailBody, "Status")
        EmailDataComment = RetrieveFieldDataFromEmailTable(EmailBody, "Comment")
        EmailDataLastSync = CDate(RetrieveFieldDataFromEmailTable(EmailBody, "Last Sync"))
        
        'Find row in AI List and sync
        RowFound = False
        For iRow = AIDetailFirstRow To AIDetailLastRow
            If Cells(iRow, AIUniqueIDCol).Value <> "" And InStr(EmailBody, Cells(iRow, AIUniqueIDCol).Value) Then   'Row found
                RowFound = True
                If EmailDataLastSync = Cells(iRow, AILastSyncCol) Then      'AI List row has not been changed, so overwrite the AIList data with the Email data
                    SetEventsScreenProtect False, False, False
                    If EmailDataComplete <> "No" And EmailDataComplete <> "" Then Cells(iRow, AIClosedCol) = Range("AIClosed")    'Mark row closed
                    Cells(iRow, AIActionCol) = EmailDataAction
                    Cells(iRow, AIDescriptionCol) = EmailDataDescription
                    Cells(iRow, AIRespCol) = EmailDataResponsibility
                    Cells(iRow, AIPriorityCol) = EmailDataPriority
                    Cells(iRow, AIDueCol) = EmailDataDue
                    Cells(iRow, AIStatusCol) = EmailDataStatus
                    Cells(iRow, AICommentCol) = EmailDataComment
                    Cells(iRow, AILastSyncCol) = Now
                    SetEventsScreenProtect True, True, True
                Else                                                        'AI List row has been changed, so email does not have the latest info
                    MsgBox "SYNC FAILED:  This row in the AI List has been updated, and the email information is out of date.  Please manually make the necessary updates." & Enter2 & "Email AI#: " & EmailDataAINum, , SiteAddy
                End If
            End If
            If RowFound Then Exit For
        Next iRow
        If Not RowFound Then MsgBox "SYNC FAILED:  The row that corresponds to this email does not exist in this AI List." & Enter2 & "Email AI#: " & EmailDataAINum, , SiteAddy
    Next olMail
End Sub
Function RetrieveFieldDataFromEmailTable(EmailBody, FieldName) As String
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    EmailTableText = Mid(EmailBody, InStr(1, EmailBody, "Unique ID"))               'Start of EmailTableFields
    FieldStart = InStr(1, EmailTableText, FieldName)
    If FieldStart > 0 Then
        Temp1 = Mid(EmailTableText, FieldStart + Len(FieldName))
        
'        For i = 1 To 100
'            tempchar = Mid(Temp1, i, 1)
'            tempcharAsc = Asc(tempchar)
'        Next i
        
        
        temp2 = Left(Temp1, InStr(2, Temp1, Chr(13)) - 1)
        RetrieveFieldDataFromEmailTable = TrimNonCharacters(temp2)
    End If
End Function
Function TrimNonCharacters(InputString) As String
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    
    If Len(InputString) = 0 Then TrimNonCharacters = InputString: Exit Function
    'Trim Left
    Do While Asc(Left(InputString, 1)) <= 32 Or Asc(Left(InputString, 1)) >= 128
        InputString = Mid(InputString, 2)
        If Len(InputString) = 0 Then TrimNonCharacters = InputString: Exit Function
    Loop
    
    If Len(InputString) = 0 Then TrimNonCharacters = InputString: Exit Function
    'Trim Right
    Do While Asc(Right(InputString, 1)) <= 32 Or Asc(Right(InputString, 1)) >= 128
        InputString = Left(InputString, Len(InputString) - 1)
        If Len(InputString) = 0 Then TrimNonCharacters = InputString: Exit Function
    Loop
    
    TrimNonCharacters = InputString
End Function

Sub a4020CreateNewRowFromEmail()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
Instructions:
    If MsgBox("CREATE NEW ROW:  In Outlook, select (but do not open) the email(s) you wish to use to create new rows, then click OK.", vbOKCancel, SiteAddy) = vbCancel Then Exit Sub
    On Error Resume Next
    Set oOutLook = GetObject(, "Outlook.Application")   'Check to see if Outlook is open
    If Error <> "" Then GoTo Instructions
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    
    'Must have Email currently selected in Outlook
    Dim olMail As Object
    Set olApp = CreateObject("Outlook.Application")
    Set olMail = olApp.CreateItem(0)
    Dim EmailAddress As Range
    
    SetEventsScreenProtect , False, False
    For Each olMail In olApp.ActiveExplorer.Selection
        NewTaskRow = FindRow("[0],New (since last sort)", AIDueGroupCol, , AIDetailFirstRow)
        Action = olMail.Subject
        Description = "Per email sent by " & olMail.SenderName & " on " & olMail.SentOn & ":"
        Description = Description & Enter & Left(olMail.Body, 200)
        If Len(olMail.Body) > 200 Then Description = Description & "..."
        If Cells(NewTaskRow, AIDescriptionCol).Width > 0 Then Cells(NewTaskRow, AIDescriptionCol) = Description Else Action = Action & Enter & Description
        Cells(NewTaskRow, AIActionCol) = Action
    Next olMail
    SetEventsScreenProtect , True, True
End Sub
Sub a4030EmailAIListAsPDF()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    IsIna4030EmailAIListAsPDF = True
    RunScreen 0.12
    Dim olMail As Object
    Set olApp = CreateObject("Outlook.Application")
    Set olMail = olApp.CreateItem(0)
    
    RunScreen 0.34
    CurrentFilename = Left(ThisWorkbook.Name, InStrRev(ThisWorkbook.Name, ".") - 1)
    TempFolder = Environ("TEMP")
    FullFileName = TempFolder & "\" & CurrentFilename & ".pdf"
    
    'LOGO control
    SetJTFLogoVisibility
    If Sheets(AIListSheetName).Shapes("Button8").Visible = False Then Sheets(AIListSheetName).Shapes("Button8").Visible = True
        
    'PRINT PDF
    ActiveSheet.ExportAsFixedFormat Type:=xlTypePDF, Filename:=FullFileName, _
        Quality:=xlQualityStandard, IncludeDocProperties:=False, IgnorePrintAreas:=False, OpenAfterPublish:=False
    
    
    SetJTFLogoVisibility
    If Sheets(AIListSheetName).Shapes("Button8").Visible = False Then Sheets(AIListSheetName).Shapes("Button8").Visible = True
    RunScreen 1
    
    TextLine = "<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp|fffd| Please find attached"
    TextLineEnd = " the Action Item List: "
    If (UCase(CurrentFilename) Like "*AI LIST*") Or (UCase(CurrentFilename) Like "*ACTION ITEM*") Then TextLineEnd = ": "
    EmailBody = TextLine & TextLineEnd & CurrentFilename
    
    With olMail
        .To = ""
        .Subject = CurrentFilename
        .Display
        .HTMLBody = EmailBody & .HTMLBody   'Putting this after display maintains the Email signature
        .Attachments.Add (FullFileName)
    End With
    IsIna4030EmailAIListAsPDF = False
End Sub
Sub a4040ChangeEmailAddress()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    Resp = Cells(ActiveCell.Row, AIRespCol)
    If Resp <> "" Then
        Set EmailAddressStorageStart = Sheets(AIListSheetName).Range("AIEmailAddressStorageStart")
        Set EmailAddress = Sheets(AIListSheetName).Cells(FindRow(Resp, EmailAddressStorageStart.Column, AIListSheetName), EmailAddressStorageStart.Column + 1)
        Response = Application.InputBox("EMAIL:  Enter an email address." & Enter2 & "Name: " & Resp, SiteAddy, EmailAddress.Text)
        If Response <> False Then
            SetEventsScreenProtect False, False, False
            EmailAddress.Value = Response
            SetEventsScreenProtect True, True, True
        End If
    End If
End Sub
Sub a4100Register()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    MsgBox "REGISTER FOR UPDATES:  At your request the AI List will now email us so you are automatically notified when a new version of the AI List is available." & Enter2 & "As an added level of security, please confirm this action was initiated by you if prompted by Microsoft Outlook.", , SiteAddy
                
    SetEventsScreenProtect , False
    
    Dim olMail As Object
    Set olApp = CreateObject("Outlook.Application")
    Dim EmailAddress As Range
    Dim olNameSpace As Object
    Set olNameSpace = olApp.GetNamespace("MAPI")
    Set olInboxFolder = olNameSpace.GetDefaultFolder(6)     '13 is task folder, 6 is inbox
    Set olMail = olApp.CreateItem(0)
        
    'Create the Email body
    EmailBody = "<br>- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -<br>" & _
                "Please send me updates to this application as they become available."
    EmailBody = EmailBody & RangetoHTML(Sheets(AIListSupportSheetName).Range("Registration").SpecialCells(xlCellTypeVisible))
    EmailBody = EmailBody & "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -<br>"
    
    'Add to Body
    If AllowCustomMode <> "FreeVersion" Then
        EmailBody = EmailBody & "= = = = = <br>= = = = ="
        EmailBody = EmailBody & "<br>= = = = = = = = = = ACM = " & AllowCustomMode
        EmailBody = EmailBody & "<br>= = = = = = = = = = CMN = " & AICustomMode
        EmailBody = EmailBody & "<br>= = = = = <br>= = = = ="
    End If
    
    With olMail
        .To = RegistrationAddy
'        .Subject = "AI List Registration"
        .Subject = "REGISTRATION: " & Cells(Range("AIFooter").Row, AICollapseCol)
        .HTMLBody = EmailBody & .HTMLBody
        On Error Resume Next
        If RunMode Then .Send
        If Error <> "" Then
            MsgBox "REGISTRATION FAILED:  The automated registration cannot be performed from this computer.  Please manually email " & RegistrationAddy & " and request automatic updates.", , SiteAddy
        Else
            ''MsgBox "REGISTRATION COMPLETE:  You are now registered to receive future updates as they are released. (on your behalf an email has been sent via your Outlook email account to " & RegistrationAddy & ").", , SiteAddy
            MsgBox "REGISTRATION COMPLETE:  You are now registered to receive future updates as they are released.", , SiteAddy
        End If
        If RunMode Then On Error Resume Next Else On Error GoTo 0
    End With
    
    SetEventsScreenProtect , True
End Sub
Function RangetoHTML(rng)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    Dim fso As Object
    Dim ts As Object
    Dim TempFile As String
    Dim TempWB As Workbook

    TempFile = Environ$("temp") & "/" & Format(Now, "dd-mm-yy h-mm-ss") & ".htm"
    
    ' Copy the range and create a workbook to receive the data.
    rng.Copy
    Set TempWB = Workbooks.Add(1)
    TempWB.Sheets(1).Cells(1).PasteSpecial Paste:=8
    TempWB.Sheets(1).Cells(1).PasteSpecial xlPasteValues, , False, False
    TempWB.Sheets(1).Cells(1).PasteSpecial xlPasteFormats, , False, False
    TempWB.Sheets(1).Cells(1).Select
    Application.CutCopyMode = False

    'Publish the sheet to an .htm file
    With TempWB.PublishObjects.Add( _
         SourceType:=xlSourceRange, _
         Filename:=TempFile, _
         Sheet:=TempWB.Sheets(1).Name, _
         Source:=TempWB.Sheets(1).UsedRange.Address, _
         HtmlType:=xlHtmlStatic)
        .Publish (True)
    End With
 
    'Read all data from the .htm file into the RangetoHTML subroutine
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set ts = fso.GetFile(TempFile).OpenAsTextStream(1, -2)
    RangetoHTML = ts.ReadAll
    ts.Close
    RangetoHTML = Replace(RangetoHTML, "align=center x:publishsource=", "align=left x:publishsource=")
    
    TempWB.Close savechanges:=False
    Kill TempFile
 
    Set ts = Nothing
    Set fso = Nothing
    Set TempWB = Nothing
End Function
Attribute VB_Name = "a5000_AI_MenusAndButtons"
'=================================== Copyright PROTECTED ====================================
'|fffd| 2013 JTF AUTOMATION  |  Report Unauthorized Use or Automation Errors to:  JTF.ENGINEERING@gmail.com
'================ Unlawful to copy, modify, distribute, plagiarize, or mimic ================
'=================================== Copyright PROTECTED ====================================
'============================================================================================
'============================ USER AGREEMENT of LIMITED USAGE ===============================
'MUST NOT BE DUPLICATED or used by any person, or on any PC, without JTF AUTOMATION direct consent.
'BY OPENING THIS FILE YOU AGREE TO PROTECT THIS FILE FROM UNAUTHORIZED USE OR DISTRIBUTION.
'BY OPENING THIS FILE YOU AUTHORIZE JTF AUTOMATION TO ELECTRONICALLY TRACK COMPUTERS WHERE IT WAS USED.
'IF YOU DO NOT AGREE TO THESE TERMS, YOU MUST DESTROY ALL COPIES OF THIS FILE AND IT'S CONTENT WITHIN 24hrs OF RECEIPT FROM JTF AUTOMATION, AND INFORM JTF AUTOMATION WITHIN 24hrs OF RECEIPT.
'============================ USER AGREEMENT of LIMITED USAGE ===============================
Option Private Module 'subs are NOT available outside this project
Sub a5000MainMenu()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    
    'Close Menu if just run recently
    Static LastRunTime
    ClickToCloseTimeLimit = 3 / 86400                       '# of seconds divided by # of seconds in one day (24*60*60 = 84600)
    If Now - LastRunTime <= ClickToCloseTimeLimit Then      'Hide popup menu
        Cancel = True
        LastRunTime = 0                                     'This ensures that the next click will always show the popup menu
        Exit Sub
    End If
    
    'Initial settings
    a5005ResetMenuTop
    AIReadOnlyMode = GetRange("AIReadOnlyMode")
    AIHiddenVisibility = GetRange("AIHiddenVisibility")
    CustomMenu = "MainMenu"
    a5130ResetMenu CustomMenu
    If Selection.Count = 1 Then SingleRowSelected = True Else MultipleText = "s"
    
    'View
    a5110AddShortcutMenu CustomMenu, "&View"
    a5120AddShortcutSubMenuItem CustomMenu, "View", "&Full Screen Toggle", "a5240ToggleFullScreen", 1023
    a5120AddShortcutSubMenuItem CustomMenu, "View", "&Zoom To Fit", "a2215ZoomToFit"
    a5120AddShortcutSubMenuItem CustomMenu, "View", "&Scroll Arrow Toggle (Alt+s)", "a2218ToggleScrollArrows"
    a5120AddShortcutSubMenuItem CustomMenu, "View", "Defaul&t Font Size (Ctrl+m)", "a2204ResetFontSize", 255, True
    a5120AddShortcutSubMenuItem CustomMenu, "View", "&Increase Font Size (Ctrl+.)", "a2200IncreaseFontSize", 403
    a5120AddShortcutSubMenuItem CustomMenu, "View", "&Decrease Font Size (Ctrl+,)", "a2202DecreaseFontSize", 404
    a5120AddShortcutSubMenuItem CustomMenu, "View", "&Minimal Set", "'a2260ToggleColumnVisibility " & Chr(34) & -1 & Chr(34) & "'", , True
    a5120AddShortcutSubMenuItem CustomMenu, "View", "&Category Set", "'a2260ToggleColumnVisibility " & Chr(34) & -2 & Chr(34) & "'"
    a5120AddShortcutSubMenuItem CustomMenu, "View", "Stat&us && Comment Set", "'a2260ToggleColumnVisibility " & Chr(34) & -3 & Chr(34) & "'"
    a5120AddShortcutSubMenuItem CustomMenu, "View", "Showing &All Columns Set", "'a2260ToggleColumnVisibility " & Chr(34) & -4 & Chr(34) & "'"
    
    'Hidden Status Display
    a5110AddShortcutMenu CustomMenu, "&Keep Rows Hidden", , Not AIReadOnlyMode
    a5120AddShortcutSubMenuItem CustomMenu, "Keep Rows Hidden", "Right click a cell to hide or show rows of other values", "", , , False
    a5120AddShortcutSubMenuItem CustomMenu, "Keep Rows Hidden", "&Hide Rows Marked 'Hidden' in Status (and keep hidden)", "'a3930AIHiddenVisibility " & Chr(34) & False & Chr(34) & "'", , True, AIHiddenVisibility
    a5120AddShortcutSubMenuItem CustomMenu, "Keep Rows Hidden", "&Show Rows Marked 'Hidden' in Status (from hidden)", "'a3930AIHiddenVisibility " & Chr(34) & True & Chr(34) & "'", , , Not AIHiddenVisibility
    
    
    'Rename, spell check, help, registration
    a5100AddShortcutMenuItem CustomMenu, "&Rename AI List...", "a5250RenameAIListTitle", 2059, , Not AIReadOnlyMode
    a5100AddShortcutMenuItem CustomMenu, "Spell Check All Ro&ws", "a2222SpellCheck", 161, , Not AIReadOnlyMode
    a5100AddShortcutMenuItem CustomMenu, "Register for &Updates", "a4100Register", , True
    a5100AddShortcutMenuItem CustomMenu, "&Help", "a5200GotoHelp", 984
    
    'Outlook Items
    a5110AddShortcutMenu CustomMenu, "&Email Interaction Via Outlook", True
    If Cells(ActiveCell.Row, AICollapseCol) <> "" Or Cells(ActiveCell.Row, AIDueGroupCol) = "[0],New (since last sort)" Then ExistingRowEnable = False Else ExistingRowEnable = True
    If SingleRowSelected Then
        a5120AddShortcutSubMenuItem CustomMenu, "Email Interaction Via Outlook", "&Export Row (to an email)", "a4000ExportRowToEmail", 356, , ExistingRowEnable
    Else
        a5120AddShortcutSubMenuItem CustomMenu, "Email Interaction Via Outlook", "&Export Rows (to emails)", "a4000ExportRowToEmail", 356, , ExistingRowEnable
    End If
    a5120AddShortcutSubMenuItem CustomMenu, "Email Interaction Via Outlook", "&Import && Update Row(s) (from email)...", "a4010ImportRowFromEmail", 356, , Not AIReadOnlyMode
    a5120AddShortcutSubMenuItem CustomMenu, "Email Interaction Via Outlook", "&Create New Row(s) (from email)...", "a4020CreateNewRowFromEmail", 2687, True, Not AIReadOnlyMode
    a5120AddShortcutSubMenuItem CustomMenu, "Email Interaction Via Outlook", "Print List to P&DF and Email", "a4030EmailAIListAsPDF", 354
    
    'Reset
    a5110AddShortcutMenu CustomMenu, "Import or Reset AI List"
    a5120AddShortcutSubMenuItem CustomMenu, "Import or Reset AI List", "&Rebuild Cell Drop Downs...", "a2280RebuildAllDropDowns", 688, , Not AIReadOnlyMode
    a5120AddShortcutSubMenuItem CustomMenu, "Import or Reset AI List", "&Import AI List...", "a6000ImportAnotherAIList", 142, , Not AIReadOnlyMode
    If Not AIReadOnlyMode Then
        a5120AddShortcutSubMenuItem CustomMenu, "Import or Reset AI List", "&Reset AI List...", "a3510ResetCompleteAIList", 847
    Else
        a5120AddShortcutSubMenuItem CustomMenu, "Import or Reset AI List", "&Reset AI List (Removes password protection)...", "a3510ResetCompleteAIList", 847
    End If
    
    'Read only mode
    a5110AddShortcutMenu CustomMenu, "&Lock From Editing"
    a5120AddShortcutSubMenuItem CustomMenu, "Lock From Editing", "&Lock With Password...", "a5500ProtectAIList", 519, , Not AIReadOnlyMode
    a5120AddShortcutSubMenuItem CustomMenu, "Lock From Editing", "&Unlock...", "a5510UnprotectAIList", 519, , AIReadOnlyMode
    
    'Add default file menu commands
    a5100AddShortcutMenuItem CustomMenu, "&Print to PDF and Email", "a4030EmailAIListAsPDF", 354, True
    
    'Find current button location and show menu
    PositionMultiplier = Application.ActiveWindow.Zoom / 75
    MenuLeft = Cells(AIHeaderRow, AICollapseCol).Left
    MenuLeft = ActiveWindow.PointsToScreenPixelsX(MenuLeft * PositionMultiplier)
    AIMenuTop = GetRange("AIMenuTop")
    
    LastRunTime = Now
    CommandBars(CustomMenu).ShowPopup MenuLeft, AIMenuTop
    
End Sub

Sub a5005ResetMenuTop()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    Static WindowTop, RibbonHidden
    
'    If ActiveWindow.PointsToScreenPixelsY(Cells(1, 1).Top) < 0 And Application.DisplayFullScreen = False Then RibbonHidden = True   'Ribbon collapsed using CTRL+F1
    
    'Reset Menu position if necessary
    If Val(GetRange("AICurrentZoomLevel")) <> Application.ActiveWindow.Zoom _
        Or GetRange("AIFullScreenSetting") <> Application.DisplayFullScreen _
        Or WindowTop <> Application.Top _
        Or RibbonHidden = True _
        Then
            If Not (ActiveWindow.PointsToScreenPixelsY(Cells(1, 1).Top) < 0 And Application.DisplayFullScreen = False) Then RibbonHidden = False    'Ribbon uncollapsed using CTRL+F1

            Sheets(AIListSheetName).Names("AIFullScreenSetting").RefersTo = Application.DisplayFullScreen   'In case it came out via ESC or other method
            WindowTop = Application.Top
            
            CurrentZoomLevel = Application.ActiveWindow.Zoom
            Sheets(AIListSheetName).Names("AICurrentZoomLevel").RefersTo = CurrentZoomLevel
            AIPreviousScrollRow = ActiveWindow.ScrollRow
            Application.ScreenUpdating = True   'Required for MenuTop to work
            ActiveWindow.ScrollRow = 1

            PositionMultiplier = CurrentZoomLevel / 75
            AIMenuTop = Cells(AIHeaderRow, 1).Top + 0 * Cells(1, 1).Height + 1.58 * Cells(AITopBar, 1).Height   'To account for Frozen pane
            AIMenuTop = ActiveWindow.PointsToScreenPixelsY(AIMenuTop * PositionMultiplier)
            Sheets(AIListSheetName).Names("AIMenuTop").RefersToR1C1 = AIMenuTop
            Application.ScreenUpdating = False
            
            ActiveWindow.ScrollRow = AIPreviousScrollRow
            Application.ScreenUpdating = True
    End If
End Sub
Sub a5010BeforeRightClick(Target As Range)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If AIIsGroupRow Then a5020GroupHeaderMenu Target Else a5030RowMenu Target
End Sub
Sub a5020GroupHeaderMenu(Target As Range)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    CustomMenu = "GroupHeaderMenu"
    a5130ResetMenu CustomMenu
    
    PreviousGroupRow = AIPreviousGroupRow(, False)
    If PreviousGroupRow > 0 Then MoveGroupUpEnabled = True
    NextGroupRow = AINextGroupRow(, False)
    If NextGroupRow > 0 Then MoveGroupDownEnabled = True
    NextGroupFinishRow = AIGroupLastRow(NextGroupRow)
    If NextGroupRow = 0 Then NextGroupRow = AIDetailLastRow + 1
    
    If Left(Cells(Target.Row, AICollapseCol), 1) = Range("AICollapsed") Then CurrentRowCollapsed = True
    a5100AddShortcutMenuItem CustomMenu, "&Expand Group", "a3120ToggleGroupVisibility", 137, , CurrentRowCollapsed
    a5100AddShortcutMenuItem CustomMenu, "&Collapse Group", "a3120ToggleGroupVisibility", 138, , Not CurrentRowCollapsed
    a5100AddShortcutMenuItem CustomMenu, "E&xpand All Groups", "a3130ExpandAllGroups", 39, , True
    a5100AddShortcutMenuItem CustomMenu, "C&ollapse All Groups", "a3135CollapseAllGroups", 41, , True
    a5100AddShortcutMenuItem CustomMenu, "Move Group &Up", "'a3140SwapGroups " & Chr(34) & False & Chr(34) & "," & Chr(34) & PreviousGroupRow & Chr(34) & "," & Chr(34) & ActiveCell.Row & Chr(34) & "," & Chr(34) & (NextGroupRow - 1) & Chr(34) & "'", 38, , MoveGroupUpEnabled
    a5100AddShortcutMenuItem CustomMenu, "Move Group &Down", "'a3140SwapGroups " & Chr(34) & True & Chr(34) & "," & Chr(34) & ActiveCell.Row & Chr(34) & "," & Chr(34) & NextGroupRow & Chr(34) & "," & Chr(34) & NextGroupFinishRow & Chr(34) & "'", 40, , MoveGroupDownEnabled
    
    'Main Menu
    a5100AddShortcutMenuItem CustomMenu, "&Green Button Menu (Alt+F1)", "a5000MainMenu", , True
    
    CommandBars(CustomMenu).ShowPopup
End Sub
Sub a5030RowMenu(Target As Range)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    AIReadOnlyMode = GetRange("AIReadOnlyMode")
    CustomMenu = "TaskRowMenu"
    a5130ResetMenu CustomMenu
    If Selection.Count = 1 Then SingleRowSelected = True Else MultipleText = "s"
    
    'Row Open, Close, Delete, Up, Down
    If Cells(Target.Row, AIDueGroupCol) = "[0],New (since last sort)" And (Target.Row <= AIHeaderRow + 2) Then ExistingRowEnable = False Else ExistingRowEnable = True
    If AIIsRowOpen(Target.Row) Then RowOpen = True
    a5100AddShortcutMenuItem CustomMenu, "C&lose Row" & MultipleText, "a2240CloseRow", 837, , ExistingRowEnable And RowOpen And Not AIReadOnlyMode
    a5100AddShortcutMenuItem CustomMenu, "&Open Row" & MultipleText, "a2245OpenRow", 837, , ExistingRowEnable And Not RowOpen And Not AIReadOnlyMode
    a5100AddShortcutMenuItem CustomMenu, "Delete Row" & MultipleText & "...", "a2230DeleteRow", 293, , ExistingRowEnable And Not AIReadOnlyMode
    PreviousRow = AIFindAdjacentVisibleRow(Target.Row, True)
    NextRow = AIFindAdjacentVisibleRow(Target.Row, False)
    If PreviousRow <> 0 And Not AIIsNewRow(PreviousRow) And AIIsDetailRow(PreviousRow) And Not AIIsNewRow(Target.Row) And SingleRowSelected Then MoveRowUpEnable = True Else MoveRowUpEnable = False
    If NextRow <> 0 And Not AIIsNewRow(NextRow) And AIIsDetailRow(NextRow) And Not AIIsNewRow(Target.Row) And SingleRowSelected Then MoveRowDownEnable = True Else MoveRowDownEnable = False
    a5100AddShortcutMenuItem CustomMenu, "Move Row &Up", "a3810MoveRowUp", 38, , MoveRowUpEnable And Not AIReadOnlyMode
    a5100AddShortcutMenuItem CustomMenu, "Move Row Do&wn", "a3820MoveRowDown", 40, , MoveRowDownEnable And Not AIReadOnlyMode
    a5100AddShortcutMenuItem CustomMenu, "&New Row(s)...", "a3830AddNewRow", 296, , Not AIReadOnlyMode
    
    'Filter
    a5110AddShortcutMenu CustomMenu, "&Filter Value (hide or show)", , Not AIReadOnlyMode
    a5120AddShortcutSubMenuItem CustomMenu, "Filter Value (hide or show)", "&Hide These", "a3912HideTheseValues"
    a5120AddShortcutSubMenuItem CustomMenu, "Filter Value (hide or show)", "&Show Only These", "a3910ShowOnlyTheseValues"
    a5120AddShortcutSubMenuItem CustomMenu, "Filter Value (hide or show)", "Show All of &Column (Clear Column Filter)", "a3914ShowAllValues", , True
    a5120AddShortcutSubMenuItem CustomMenu, "Filter Value (hide or show)", "Show All of &Sheet (Clear Sheet Filters)", "a3916ClearAllFilters"

    'Set row due date and export row to an email
    a5100AddShortcutMenuItem CustomMenu, "Set Row &Due Date (Alt+F2)", "a2250SetDueDate", 1096, True, SingleRowSelected And Not AIReadOnlyMode
    If SingleRowSelected Then
        a5100AddShortcutMenuItem CustomMenu, "&Export Row (to an email)", "a4000ExportRowToEmail", 356, , ExistingRowEnable
    Else
        a5100AddShortcutMenuItem CustomMenu, "&Export Rows (to emails)", "a4000ExportRowToEmail", 356, , ExistingRowEnable
    End If
    
    'Spell check, copy/paste
    a5100AddShortcutMenuItem CustomMenu, "&Spell Check Row (Alt+F3)" & MultipleText, "a2220SpellCheckRow", 2, True, Not AIReadOnlyMode
    a5100AddShortcutMenuItem CustomMenu, "Spell Check All Rows", "a2222SpellCheck", 161, , Not AIReadOnlyMode
    If Not AIReadOnlyMode Then
        CommandBars(CustomMenu).Controls.Add msoControlButton, CommandBars("Edit").Controls("Copy").ID
        CommandBars(CustomMenu).Controls.Add msoControlButton, CommandBars("Edit").Controls("Paste").ID
    Else
        a5100AddShortcutMenuItem CustomMenu, "Copy", "", 19, , Not AIReadOnlyMode
        a5100AddShortcutMenuItem CustomMenu, "Paste", "", 22, , Not AIReadOnlyMode
    End If

    'Rebuild Cell Drop Down Menus
    Select Case Target.Column
        Case AINumCol
            a5100AddShortcutMenuItem CustomMenu, "&Renumber AI Numbers...", "a3700RenumberAINumbers", 1553, 688, True
        Case AICategoryCol
            a5100AddShortcutMenuItem CustomMenu, "&Rebuild Category Drop Downs...", "a2272RebuildDropDownsCategory", 688, True
        Case AIRespCol
            If Target <> "" Then isEnabled = True Else isEnabled = False
            a5100AddShortcutMenuItem CustomMenu, "Rebuild Person Drop Downs...", "a2274RebuildDropDownsResp", 688, True
            a5100AddShortcutMenuItem CustomMenu, "Change Email &Address...", "a4040ChangeEmailAddress", 362, , isEnabled
        Case AIPriorityCol
            a5100AddShortcutMenuItem CustomMenu, "Rebuild Priority Drop Downs...", "a2276RebuildDropDownsPriority", 688, True
        Case AIStatusCol
            a5100AddShortcutMenuItem CustomMenu, "Rebuild Status Drop Downs...", "a2278RebuildDropDownsStatus", 688, True
    End Select
    
    'Conditional Formatting & Main Menu
    AICFDisableActiveRow = GetRange("AICFDisableActiveRow")
    AICFDisableAlternatingAndPriority = GetRange("AICFDisableAlternatingAndPriority")
    AICFDisableClosed = GetRange("AICFDisableClosed")
    a5110AddShortcutMenu CustomMenu, "Color &Automation", True
    a5120AddShortcutSubMenuItem CustomMenu, "Color Automation", "Toggle &All (Ctrl+a)", "'a7000ManageConditionalFormatting " & Chr(34) & "Toggle All" & Chr(34) & "'"
    a5120AddShortcutSubMenuItem CustomMenu, "Color Automation", "Disable Active &Row", "'a7000ManageConditionalFormatting " & Chr(34) & "Disable Active Row" & Chr(34) & "'", , , Not AICFDisableActiveRow
    a5120AddShortcutSubMenuItem CustomMenu, "Color Automation", "Disable Alternating && &Priority", "'a7000ManageConditionalFormatting " & Chr(34) & "Disable Alternating & Priority" & Chr(34) & "'", , , Not AICFDisableAlternatingAndPriority
    a5120AddShortcutSubMenuItem CustomMenu, "Color Automation", "Disable &Closed", "'a7000ManageConditionalFormatting " & Chr(34) & "Disable Closed" & Chr(34) & "'", , , Not AICFDisableClosed

    a5100AddShortcutMenuItem CustomMenu, "&Green Button Menu (Alt+F1)", "a5000MainMenu" 'a5100AddShortcutMenuItem CustomMenu, "&Green Button Menu (Alt+F1)", "a5000MainMenu", , True
    CommandBars(CustomMenu).ShowPopup
End Sub
Sub a5040HeaderRowMenu(Target As Range)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    CustomMenu = "HeaderRowMenu"
    a5130ResetMenu CustomMenu
    
    Select Case Target.Column
        Case Is <= AINumCol, Is >= AICreatedCol
            SortColumnEnabled = False
        Case Else
            SortColumnEnabled = True
    End Select
    a5100AddShortcutMenuItem CustomMenu, "&Group by (no secondary-sort)", "'a3200Sort " & Chr(34) & Target.Column & Chr(34) & ", , , , , , " & Chr(34) & False & Chr(34) & "'"
    
    'Filter
    a5110AddShortcutMenu CustomMenu, "&Filter Value (hide or show)", , Not AIReadOnlyMode
    a5120AddShortcutSubMenuItem CustomMenu, "Filter Value (hide or show)", "Right click a cell to hide or show rows of that value", "", , , False
    a5120AddShortcutSubMenuItem CustomMenu, "Filter Value (hide or show)", "Show All of &Column (Clear Column Filter)", "'a3914ShowAllValues " & Chr(34) & Target.Column & Chr(34) & "'", , True
    a5120AddShortcutSubMenuItem CustomMenu, "Filter Value (hide or show)", "Show All of &Sheet (Clear Sheet Filters)", "a3916ClearAllFilters"
    
    Select Case Target.Column
        Case Is <= AINumCol
            ChangeColumnWidthEnabled = False
        Case Else
            ChangeColumnWidthEnabled = True
    End Select
    a5100AddShortcutMenuItem CustomMenu, "Change Column &Width...", "'a2290ChangeColumnWidth " & Chr(34) & Target.Column & Chr(34) & "'", 542, True, ChangeColumnWidthEnabled
    
    Select Case Target.Column
        Case AICollapseCol, AIClosedCol, AINumCol, AIUpdatedCol
            HideColumnEnabled = False
        Case Else
            HideColumnEnabled = True
    End Select
    a5100AddShortcutMenuItem CustomMenu, "&Hide Column", "'a2260ToggleColumnVisibility " & Chr(34) & Target.Column & Chr(34) & "'", 342, , HideColumnEnabled
    
    TempBeginGroup = True
    For iCol = AINumCol + 1 To AIUpdatedCol - 1
        If Cells(AIHeaderRow, iCol).Width = 0 Then
            'Clear Previous Sort Symbol location
            SortSymbolAscending = Range("AISortAscending")
            SortSymbolDescending = Range("AISortDescending")
            If InStr(1, Cells(AIHeaderRow, iCol), SortSymbolAscending) Then
                ColumnName = Left(Cells(AIHeaderRow, iCol), Len(Cells(AIHeaderRow, iCol)) - Len(SortSymbolAscending))
            ElseIf InStr(1, Cells(AIHeaderRow, iCol), SortSymbolDescending) Then
                ColumnName = Left(Cells(AIHeaderRow, iCol), Len(Cells(AIHeaderRow, iCol)) - Len(SortSymbolDescending))
            Else
                ColumnName = Cells(AIHeaderRow, iCol)
            End If
            a5100AddShortcutMenuItem CustomMenu, "Show column: " & ColumnName, "'a2260ToggleColumnVisibility " & Chr(34) & iCol & Chr(34) & "'", , TempBeginGroup
            TempBeginGroup = False
        End If
    Next iCol
    
    'Default Column Sets
    a5110AddShortcutMenu CustomMenu, "Default Co&lumn Sets", False
    a5120AddShortcutSubMenuItem CustomMenu, "Default Column Sets", "&Minimal Set", "'a2260ToggleColumnVisibility " & Chr(34) & -1 & Chr(34) & "'"
    a5120AddShortcutSubMenuItem CustomMenu, "Default Column Sets", "&Category Set", "'a2260ToggleColumnVisibility " & Chr(34) & -2 & Chr(34) & "'"
    a5120AddShortcutSubMenuItem CustomMenu, "Default Column Sets", "&Status && Comment Set", "'a2260ToggleColumnVisibility " & Chr(34) & -3 & Chr(34) & "'"
    a5120AddShortcutSubMenuItem CustomMenu, "Default Column Sets", "Showing &All Columns Set", "'a2260ToggleColumnVisibility " & Chr(34) & -4 & Chr(34) & "'"
    
    
    'Renumber AI Numbers
    If Target = Cells(AIHeaderRow, AICollapseCol) Then a5100AddShortcutMenuItem CustomMenu, "Re&number AI Numbers...", "a3700RenumberAINumbers", 1553, True, Not AIReadOnlyMode
    
    'Main Menu
    a5100AddShortcutMenuItem CustomMenu, "&Green Button Menu (Alt+F1)", "a5000MainMenu", , True
    
    CommandBars(CustomMenu).ShowPopup
End Sub

Private Sub a5100AddShortcutMenuItem(CustomMenu, Caption, Macro, Optional FaceID = 0, Optional BeginGroup = False, Optional Enabled = True)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    With Application.CommandBars(CustomMenu).Controls.Add
        .Caption = Caption
        .OnAction = Macro
        .FaceID = FaceID
        .BeginGroup = BeginGroup
        .Enabled = Enabled
    End With
End Sub
Private Sub a5110AddShortcutMenu(CustomMenu, Caption, Optional BeginGroup = False, Optional Enabled = True)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    With Application.CommandBars(CustomMenu).Controls.Add(Type:=msoControlPopup)
        .Caption = Caption
        .BeginGroup = BeginGroup
        .Enabled = Enabled
    End With
End Sub
Private Sub a5120AddShortcutSubMenuItem(CustomMenu, ParentMenu, Caption, Macro, Optional FaceID = 0, Optional BeginGroup = False, Optional Enabled = True)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    With CommandBars(CustomMenu).Controls(ParentMenu).Controls.Add
        .Caption = Caption
        .OnAction = Macro
        .FaceID = FaceID
        .BeginGroup = BeginGroup
        .Enabled = Enabled
    End With
End Sub
Private Sub a5130ResetMenu(CustomMenu)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    'Create menu if it does not exist and clear out current controls
    On Error Resume Next
    Set myShtCtBar = CommandBars.Add(Name:=CustomMenu, Position:=msoBarPopup, Temporary:=True)
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    For Each ctl In Application.CommandBars(CustomMenu).Controls: ctl.Delete: Next
End Sub
Private Sub a5200GotoHelp()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If Not Sheets(HelpSheetName).Visible Then
        Select Case AIUserVersion
            Case "CUser", "RecentCUser"
                a5445HelpForCUser
            Case Else
                Sheets(HelpSheetName).Visible = True
        End Select
    End If
    Sheets(HelpSheetName).Select
    Range(HelpSheetNamedRangeName).Select
End Sub
Sub a5202ExitExcel()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    SetEventsScreenProtect True, True
    Application.Cursor = xlDefault
    Application.Quit
End Sub
Sub a5210UpdatePicture(myPicture As String, Optional TurnImageOn As Boolean = True, Optional ResetScale As Boolean = True, Optional CropRightEdge As Boolean = False)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    
    If Not TurnImageOn Then
        ActiveSheet.Shapes(myPicture).Visible = False
    Else
        ActiveSheet.Shapes(myPicture).Visible = True
        With ActiveSheet.Shapes(myPicture)
            
            If ResetScale Then
                'Turn off Cropped edge to allow for scaling to work properly
                If CropRightEdge Then .PictureFormat.CropRight = 0
                'Reset scale to original size
                DesiredHeight = .Height
                .ScaleHeight 1#, msoTrue, msoScaleFromTopLeft
                .ScaleWidth 1#, msoTrue, msoScaleFromTopLeft
                FullScaledHeight = .Height
                .Height = DesiredHeight
'>> back in use down below>>'NO LONGER REQUIRED DUE TO CODE BELOW TO FORCE PICTURE TO SHRINK VERTICALLY                If Application.Version < 12# And myPicture = "TabMenuHelp" Then .Height = 162.6395 '2003 sometimes requires forcing the height
            End If
            
            'SCALE:  Force picture size to shrink vertically if necessary
            EngTemp = .Height
            IsFileTypeXLSM = (Right(ThisWorkbook.Name, 5) = ".xlsm")
            If IsFileTypeXLSM = False Then
                '2003 might have sorted (each 2003 sort will grow all images, and even bee seen in 2007 when viewing tabs)
                If myPicture = "TabMenuHelp" Then .Height = TabMenuHelpHeight '= 165.3142 '2003 requires correcting the height AFTER sorting
                If myPicture = "TabMenuAutomation1" Then .Height = TabMenuAutomation1Height '= 69.73937 '2003 requires correcting the height AFTER sorting
                If myPicture = "TabMenuAutomation2" Then .Height = TabMenuAutomation2Height '= 70.27622 '2003 requires correcting the height AFTER sorting
                If myPicture = "TabMenuAutomation3" Then .Height = TabMenuAutomation3Height '= 69.73937 '2003 requires correcting the height AFTER sorting
            End If
            
            'MaxPictureBottom safety check
            PictureBottom = .Top + .Height
            MaxPictureBottom = Cells(AIPictureOverlapStop, AICollapseCol).Top + Cells(AIHeaderRow - 1, AICollapseCol).Height
            If PictureBottom > MaxPictureBottom Then
                PixelMeasureAdjustmentFactor = 2 '2 as a precaution, based on TabMenuCalendar... use to be:  then populated below, based on experimental measurements, not logical or mathematical calculations
                'Now uses above method.  Old was:  If Application.Version < 12# And myPicture = "TabMenuHelp" Then PixelMeasureAdjustmentFactor = 72.5  '2003 sometimes requires forcing an overcompensated height
                .Height = (MaxPictureBottom - .Top - PixelMeasureAdjustmentFactor)   'WAS:  .Height = (MaxPictureBottom)
            End If
            
            'CROP   (use to be above SCALE)
            If CropRightEdge Then
                .PictureFormat.CropRight = 0
                TargetRight = Cells(AIHeaderRow, AIDetailLastVisibleColumn).Left + Cells(AIHeaderRow, AIDetailLastVisibleColumn).Width
                TargetCrop = (.Left + .Width) - TargetRight + 5
                AdjustedTargetCrop = TargetCrop * (FullScaledHeight / DesiredHeight)
                .PictureFormat.CropRight = AdjustedTargetCrop
            End If
        End With
    End If

End Sub
Sub a5220CalendarMoveBack()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    Worksheets("|fffd||fffd|Calendar").Range("CalendarMonthOffset") = Worksheets("|fffd||fffd|Calendar").Range("CalendarMonthOffset") - 1
    SetEventsScreenProtect , False, False
    a5226CalendarRefresh
    a5210UpdatePicture "TabMenuCalendar", True, True, True
    CurrentCell.Select
    SetEventsScreenProtect , True, True
End Sub
Sub a5225CalendarMoveForward()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    Worksheets("|fffd||fffd|Calendar").Range("CalendarMonthOffset") = Worksheets("|fffd||fffd|Calendar").Range("CalendarMonthOffset") + 1
    SetEventsScreenProtect , False, False
    a5226CalendarRefresh
    a5210UpdatePicture "TabMenuCalendar", True, True, True
    CurrentCell.Select
    SetEventsScreenProtect , True, True
End Sub
Sub a5226CalendarRefresh()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    Set CurrentCell = ActiveCell
    'Delete original calendar
'    ActiveSheet.Shapes("TabMenuCalendar").Delete
    ActiveSheet.Pictures("TabMenuCalendar").Delete
    
    'Copy, Paste, and Name Calendar
    Sheets(AICalendarSheetName).Range("AICalendarSnapshot").CopyPicture xlScreen, xlPicture
    Sheets(AIListSheetName).Paste Destination:=Sheets(AIListSheetName).Range("AICalendarLocation")
'    Selection.Name = "TabMenuCalendar"
    ActiveSheet.Pictures(ActiveSheet.Pictures.Count).Name = "TabMenuCalendar"
End Sub
Sub a5230HelpRefresh()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
'    ActiveSheet.Pictures("TabMenuHelp").Formula = "'> HELP <'!$B$5:$F$17"
'    ActiveSheet.Pictures("TabMenuHelp").Formula = Empty
End Sub
Sub a5240ToggleFullScreen()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    SetEventsScreenProtect False, False

    Application.DisplayFullScreen = Not Application.DisplayFullScreen
    Sheets(AIListSheetName).Names("AIFullScreenSetting").RefersTo = Application.DisplayFullScreen
    a2210ZoomToWindow
    
    Sheets(AIListSheetName).Names("AICurrentZoomLevel").RefersTo = 0
    a5005ResetMenuTop
    
    SetEventsScreenProtect True, True
End Sub
Sub a5250RenameAIListTitle()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    CurrentTitle = Sheets(AIListSheetName).Names("AITitle")
    CurrentTitle = Mid(CurrentTitle, 3, Len(CurrentTitle) - 3)
    Response = Application.InputBox("TITLE:  Enter a title for the AI List (leave blank to use filename).", SiteAddy, CurrentTitle)
    If Response <> False And Response <> CurrentTitle Then
        If Response = "" Then Response = " "
        Sheets(AIListSheetName).Names("AITitle").RefersTo = Response
    End If
End Sub
Sub a5260SetAutomationTabContent(Optional ToJTF_vsExcelAutomationHelp = True) 'assumes sheet unprotected
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    SetProtection False, AIListSheetName
    If ToJTF_vsExcelAutomationHelp = False Then
        'ExcelAutomaitonHelp  message...
            ''Sheets(AIListSheetName).Range("AIAutomationTabContent").Select
        Sheets(AIListSheetName).Range("AIAutomationTabContent").FormulaR1C1 = _
            "Additional automated features or custom solutions can be built to match your needs." & Chr(10) & "Excel Automation Help specializes in custom software automation within Excel.  Contact us at:" & Chr(10) & "                                                              " & Chr(10) & "www.ExcelAutomationHelp.com  | +1 315-805-HELP  |  Help@ExcelAutomationHelp.com"
        With Sheets(AIListSheetName).Range("AIAutomationTabContent").Characters(Start:=1, Length:=84).Font
            .Name = "Verdana"
            .FontStyle = "Bold"
        End With
        With Sheets(AIListSheetName).Range("AIAutomationTabContent").Characters(Start:=85, Length:=21).Font
            .Name = "Verdana"
            .FontStyle = "Italic"
        End With
        With Sheets(AIListSheetName).Range("AIAutomationTabContent").Characters(Start:=106, Length:=73).Font 'Length:=12
            .Name = "Verdana"
            .FontStyle = "Regular"
        End With
            ''        With Sheets(AIListSheetName).Range("AIAutomationTabContent").Characters(Start:=118, Length:=1).Font
            ''            .Name = "Verdana"
            ''            .FontStyle = "Bold"
            ''        End With
            ''        With Sheets(AIListSheetName).Range("AIAutomationTabContent").Characters(Start:=119, Length:=2).Font
            ''            .Name = "Verdana"
            ''            .FontStyle = "Regular"
            ''        End With
            ''        With Sheets(AIListSheetName).Range("AIAutomationTabContent").Characters(Start:=121, Length:=1).Font
            ''            .Name = "Verdana"
            ''            .FontStyle = "Bold"
            ''        End With
            ''        With Sheets(AIListSheetName).Range("AIAutomationTabContent").Characters(Start:=122, Length:=15).Font
            ''            .Name = "Verdana"
            ''            .FontStyle = "Regular"
            ''        End With
            ''        With Sheets(AIListSheetName).Range("AIAutomationTabContent").Characters(Start:=137, Length:=1).Font
            ''            .Name = "Verdana"
            ''            .FontStyle = "Bold"
            ''        End With
            ''        With Sheets(AIListSheetName).Range("AIAutomationTabContent").Characters(Start:=138, Length:=10).Font
            ''            .Name = "Verdana"
            ''            .FontStyle = "Regular"
            ''        End With
            ''        With Sheets(AIListSheetName).Range("AIAutomationTabContent").Characters(Start:=148, Length:=1).Font
            ''            .Name = "Verdana"
            ''            .FontStyle = "Bold"
            ''        End With
            ''        With Sheets(AIListSheetName).Range("AIAutomationTabContent").Characters(Start:=149, Length:=30).Font
            ''            .Name = "Verdana"
            ''            .FontStyle = "Regular"
            ''        End With
        With Sheets(AIListSheetName).Range("AIAutomationTabContent").Characters(Start:=179, Length:=77).Font
            .Name = "Verdana"
            .FontStyle = "Bold"
        End With
    Else
        'JTFAutomation message...
            ''Sheets(AIListSheetName).Range("AIAutomationTabContent").Select
        If Sheets(AIListSheetName).Range("AIAutomationTabContent").FormulaR1C1 <> _
            "Additional automated features or custom solutions can be built to match your needs." & Chr(10) & "Our Excel Automation Help division specializes in custom software automation within Excel.  Contact us at:" & Chr(10) & "                                                              " & Chr(10) & "www.JTFAutomation.com  | +1 832-800-HELP  |  Help@JTFAutomation.com" Then
                Sheets(AIListSheetName).Range("AIAutomationTabContent").FormulaR1C1 = _
                    "Additional automated features or custom solutions can be built to match your needs." & Chr(10) & "Our Excel Automation Help division specializes in custom software automation within Excel.  Contact us at:" & Chr(10) & "                                                              " & Chr(10) & "www.JTFAutomation.com  | +1 832-800-HELP  |  Help@JTFAutomation.com"
        End If
        With Sheets(AIListSheetName).Range("AIAutomationTabContent").Characters(Start:=1, Length:=84).Font
            .Name = "Verdana"
            .FontStyle = "Bold"
        End With
        With Sheets(AIListSheetName).Range("AIAutomationTabContent").Characters(Start:=85, Length:=4).Font
            .Name = "Verdana"
            .FontStyle = "Regular"
        End With
        With Sheets(AIListSheetName).Range("AIAutomationTabContent").Characters(Start:=89, Length:=21).Font
            .Name = "Verdana"
            .FontStyle = "Italic"
        End With
        With Sheets(AIListSheetName).Range("AIAutomationTabContent").Characters(Start:=110, Length:=81).Font 'Length:=20
            .Name = "Verdana"
            .FontStyle = "Regular"
        End With
            ''        With Sheets(AIListSheetName).Range("AIAutomationTabContent").Characters(Start:=130, Length:=1).Font
            ''            .Name = "Verdana"
            ''            .FontStyle = "Bold"
            ''        End With
            ''        With Sheets(AIListSheetName).Range("AIAutomationTabContent").Characters(Start:=131, Length:=2).Font
            ''            .Name = "Verdana"
            ''            .FontStyle = "Regular"
            ''        End With
            ''        With Sheets(AIListSheetName).Range("AIAutomationTabContent").Characters(Start:=133, Length:=1).Font
            ''            .Name = "Verdana"
            ''            .FontStyle = "Bold"
            ''        End With
            ''        With Sheets(AIListSheetName).Range("AIAutomationTabContent").Characters(Start:=134, Length:=15).Font
            ''            .Name = "Verdana"
            ''            .FontStyle = "Regular"
            ''        End With
            ''        With Sheets(AIListSheetName).Range("AIAutomationTabContent").Characters(Start:=149, Length:=1).Font
            ''            .Name = "Verdana"
            ''            .FontStyle = "Bold"
            ''        End With
            ''        With Sheets(AIListSheetName).Range("AIAutomationTabContent").Characters(Start:=150, Length:=10).Font
            ''            .Name = "Verdana"
            ''            .FontStyle = "Regular"
            ''        End With
            ''        With Sheets(AIListSheetName).Range("AIAutomationTabContent").Characters(Start:=160, Length:=1).Font
            ''            .Name = "Verdana"
            ''            .FontStyle = "Bold"
            ''        End With
            ''        With Sheets(AIListSheetName).Range("AIAutomationTabContent").Characters(Start:=161, Length:=30).Font
            ''            .Name = "Verdana"
            ''            .FontStyle = "Regular"
            ''        End With
        With Sheets(AIListSheetName).Range("AIAutomationTabContent").Characters(Start:=191, Length:=65).Font
            .Name = "Verdana"
            .FontStyle = "Bold"
        End With
    End If
    SetProtection True, AIListSheetName
    
End Sub
Sub a5300AvoidScreenFlicker()     'Used to avoid flickering of screen
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    Set CurrentCell = ActiveCell
'    On Error Resume Next
    ActiveSheet.Pictures("DummyPic").Delete
    Sheets(AIListSheetName).Range("A1").CopyPicture xlScreen, xlPicture
    Sheets(AIListSheetName).Paste Destination:=Sheets(AIListSheetName).Range("A1")
    ActiveSheet.Pictures(ActiveSheet.Pictures.Count).Name = "DummyPic"
    ActiveSheet.Shapes("DummyPic").Width = 0
    CurrentCell.Select
End Sub
Private Sub a5400HideTabMenus()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    'Hide all Tab Menu Tabs
    ActiveSheet.Shapes("AITabMenu1").Visible = False
    ActiveSheet.Shapes("AITabMenu2").Visible = False
    ActiveSheet.Shapes("AITabMenu3").Visible = False
    ActiveSheet.Shapes("AITabMenu4").Visible = False
    
    'Hide all Tab Menu Shapes
    ActiveSheet.Shapes("TabMenuCalendarBackButton").Visible = False
    ActiveSheet.Shapes("TabMenuCalendarForwardButton").Visible = False
    ActiveSheet.Shapes("TabMenuCalendar").Visible = False
    ActiveSheet.Shapes("TabMenuAutomation1").Visible = False
    ActiveSheet.Shapes("TabMenuAutomation2").Visible = False
    ActiveSheet.Shapes("TabMenuAutomation3").Visible = False
    ActiveSheet.Shapes("TabMenuHelp").Visible = False
    
    'Hide all Tab Menu Rows
    Range(Cells(AITabMenu1Start, AIDetailFirstCol), Cells(AITabMenu4End, AIDetailFirstCol)).EntireRow.Hidden = True
End Sub
Sub a5410TabMenuButton1()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    OrignalSavedState = ThisWorkbook.Saved
    SetEventsScreenProtect , False, False
    'Hide All Tab Menus and Content
    a5400HideTabMenus
    
    'Show this Tab Menu
    ActiveSheet.Shapes("AITabMenu1").Visible = True
    Range(Cells(AITabMenu1Start, AIDetailFirstCol), Cells(AITabMenu1End, AIDetailFirstCol)).EntireRow.Hidden = False
    
    'Show this Tab Menu's Shapes/Images
    a5300AvoidScreenFlicker
    
    SetEventsScreenProtect , True, True, xlNorthwestArrow
    ThisWorkbook.Saved = OrignalSavedState
End Sub
Sub a5420TabMenuButton2()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    OrignalSavedState = ThisWorkbook.Saved
    SetEventsScreenProtect , False, False
    
    'Hide All Tab Menus and Content
    a5400HideTabMenus
    
    'Show this Tab Menu
    ActiveSheet.Shapes("AITabMenu2").Visible = True
    Range(Cells(AITabMenu2Start, AIDetailFirstCol), Cells(AITabMenu2End, AIDetailFirstCol)).EntireRow.Hidden = False
    
    'Show this Tab Menu's Shapes/Images
    a5226CalendarRefresh
    a5210UpdatePicture "TabMenuCalendar", True, True, True
    a5210UpdatePicture "TabMenuCalendarBackButton", True, False
    a5210UpdatePicture "TabMenuCalendarForwardButton", True, False
    
    'Resize and position buttons in case they moved
    ActiveSheet.Shapes("TabMenuCalendarBackButton").Width = 12
    ActiveSheet.Shapes("TabMenuCalendarBackButton").Top = ActiveSheet.Shapes("TabMenuCalendar").Top + 3
    ActiveSheet.Shapes("TabMenuCalendarForwardButton").Width = 12
    ActiveSheet.Shapes("TabMenuCalendarForwardButton").Top = ActiveSheet.Shapes("TabMenuCalendar").Top + 3 ' - 0.25

    If Application.Version < 12# Then
        v2003ForwardButtonVerticalOffset = 3
        ActiveSheet.Shapes("TabMenuCalendarForwardButton").Top = ActiveSheet.Shapes("TabMenuCalendar").Top + v2003ForwardButtonVerticalOffset    'Not sure why, but Excel 2003 shifts this shape
    End If
    
    CurrentCell.Select
    SetEventsScreenProtect , True, True, xlNorthwestArrow
    ThisWorkbook.Saved = OrignalSavedState
End Sub
Sub a5410TabMenuButton2A()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    OrignalSavedState = ThisWorkbook.Saved
    SetEventsScreenProtect , False, False
    'Hide All Tab Menus and Content
    a5400HideTabMenus
    
    'Show this Tab Menu
'    ActiveSheet.Shapes("AITabMenu2A").Visible = True
    Range(Cells(AITabMenu2AStart, AIDetailFirstCol), Cells(AITabMenu2AEnd, AIDetailFirstCol)).EntireRow.Hidden = False
    
    'Show this Tab Menu's Shapes/Images
    a5300AvoidScreenFlicker
    
    SetEventsScreenProtect , True, True, xlNorthwestArrow
    ThisWorkbook.Saved = OrignalSavedState
End Sub
Sub a5430TabMenuButton3()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    
    'CUser
    If AIUserVersion = "CUser" Or AIUserVersion = "RecentCUser" Then MsgBox "Reserved for future functionality", , SiteAddy: Exit Sub
        
    OrignalSavedState = ThisWorkbook.Saved
    SetEventsScreenProtect , False, False
    
    'Hide All Tab Menus and Content
    a5400HideTabMenus
    
    'Show this Tab Menu
    ActiveSheet.Shapes("AITabMenu3").Visible = True
    Range(Cells(AITabMenu3Start, AIDetailFirstCol), Cells(AITabMenu3End, AIDetailFirstCol)).EntireRow.Hidden = False
    
    'Show this Tab Menu's Shapes/Images
    a5210UpdatePicture "TabMenuAutomation1", True, True
    a5210UpdatePicture "TabMenuAutomation2", True, True
    a5210UpdatePicture "TabMenuAutomation3", True, True
    a5300AvoidScreenFlicker
    
    SetEventsScreenProtect , True, True, xlNorthwestArrow
    ThisWorkbook.Saved = OrignalSavedState
End Sub
Sub a5440TabMenuButton4(Optional SkipCUserHelpMsg = False)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    
    'CUser
    If (AIUserVersion = "CUser" Or AIUserVersion = "RecentCUser") And Not SkipCUserHelpMsg Then a5445HelpForCUser: Exit Sub
    If (AIUserVersion = "CUser" Or AIUserVersion = "RecentCUser") Then Exit Sub
    
    OrignalSavedState = ThisWorkbook.Saved
    SetEventsScreenProtect , False, False
    
    'Hide All Tab Menus and Content
    a5400HideTabMenus
    
    'Show this Tab Menu
    ActiveSheet.Shapes("AITabMenu4").Visible = True
    Range(Cells(AITabMenu4Start, AIDetailFirstCol), Cells(AITabMenu4End, AIDetailFirstCol)).EntireRow.Hidden = False
    
    'Show this Tab Menu's Shapes/Images
    a5210UpdatePicture "TabMenuHelp", True, True, True
'    a5230HelpRefresh
    a5300AvoidScreenFlicker
    
    SetEventsScreenProtect , True, True, xlNorthwestArrow
    ThisWorkbook.Saved = OrignalSavedState
End Sub
Sub a5445HelpForCUser()
    MsgYesNewUser1 = "HELP:  The AI List (Action Item List) is a powerful tool often used to organize and manage lists of actions and tasks.  The following bullets outline how to discover some of the built-in automated features:"
    MsgYesNewUser2 = Enter2 & " " & Bullet & " LEFT CLICK on a cell to select it or on a header column name to sort"
    MsgYesNewUser3 = Enter & " " & Bullet & " RIGHT CLICK on any cell or header column name for more options"
    MsgYesNewUser4 = Enter & " " & Bullet & " DOUBLE CLICK on any cell to edit its content"
    MsgYesNewUser5 = Enter & " " & Bullet & " DOUBLE CLICK on any group name, checkbox, or due date " & Enter & "    for additional automated functionality"
    MsgYesNewUser = MsgYesNewUser1 & MsgYesNewUser2 & MsgYesNewUser3 & MsgYesNewUser4 & MsgYesNewUser5
    MsgBox MsgYesNewUser1 & MsgYesNewUser2 & MsgYesNewUser3 & MsgYesNewUser4 & MsgYesNewUser5, , SiteAddy
End Sub
Sub a5500ProtectAIList()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    Password = Application.InputBox("LOCK PASSWORD:  Enter a password to lock this file from edits allowing users to only view, sort, group, print, and close tasks." & Enter2 & "Note this will automatically resort by AI# (though you may re-sort after it is locked, before you save the file).", SiteAddy)
    If Password = False Then Exit Sub   'Leave AI List unprotected
    EncryptedPassword = EncryptPassword(Password)
    Sheets(AIListSheetName).Names("AIListPassword").RefersTo = EncryptedPassword
    Sheets(AIListSheetName).Names("AIReadOnlyMode").RefersTo = True
    Sheets(AIListSheetName).Names("AIFileNameEndText").RefersTo = "  >>LOCKED<<  (may close rows)"
    AIReadOnlyMode = GetRange("AIReadOnlyMode")
    a3200Sort AINewOpenClosedCol, AINumCol
End Sub
Sub a5510UnprotectAIList()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    InputPassword = Application.InputBox("UNLOCK PASSWORD:  Enter a password to unlock this file allowing edits.  Note this will automatically resort by AI#.", SiteAddy)
    If InputPassword = False Then Exit Sub   'Leave AI List protected
    InputEncryptedPassword = EncryptPassword(InputPassword)
    TempText = Sheets(AIListSheetName).Names("AIListPassword")
    EncryptedPassword = Val(Mid(TempText, 2, Len(TempText)))
'    If InputEncryptedPassword - EncryptedPassword < 1 Then Stop     'Unprotect AI List
    If InputEncryptedPassword = EncryptedPassword Then    'Unprotect AI List
        Sheets(AIListSheetName).Names("AIReadOnlyMode").RefersTo = False
        Sheets(AIListSheetName).Names("AIFileNameEndText").RefersTo = " "
        a3200Sort AINewOpenClosedCol, AINumCol
    Else
        Select Case AIUserVersion
            Case "CUser", "RecentCUser"
                MsgBox "PROTECTED:  The password you entered is incorrect.  Please retry or contact the supplier of this file for assistance."
            Case Else
                MsgBox "PROTECTED:  The password you entered is incorrect.  Please retry or contact " & SiteName & " for assistance at " & EmailAddy, , SiteAddy
        End Select
    End If
End Sub
Function EncryptPassword(Password)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    EncryptPassword = 0
    For I = 1 To Len(Password)
        EncryptPassword = Int((EncryptPassword + 1) * Asc(Mid(Password, I, 1)) / 10)
    Next I
    If Len(EncryptPassword) > 8 Then EncryptPassword = Val(Left(EncryptPassword, 8))
End Function
Sub a5XXXSetAColWidthToCenterInView()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    RightEdgeTarget = 24
'ENG>>  Call this by what ? Preferably after user zoom?  Also on sheet activation?  Also make a new "Center In Window" option after Full Screen in GREEN menu.
'ENG>>  set protection off, then back on after...   OR use SetEventsScreenProtect  ...but WITH screen updating?
    MinimalWidth = 2.14
    Columns(1).ColumnWidth = MinimalWidth
    ActiveWindow.SmallScroll ToRight:=-999 'to see far left
    VisColCount = ActiveWindow.VisibleRange.Columns.Count
    AmountToAdjust = Round((VisColCount - RightEdgeTarget) / 2, 0) 'rounded down (i.e. bias left)
    If AmountToAdjust >= 1 Then
        WidthToAdjust = 8.43 * AmountToAdjust
'ENG>>  set protection off, then back on after...   OR use SetEventsScreenProtect  ...but WITH screen updating?
        Columns(1).ColumnWidth = MinimalWidth + WidthToAdjust
    Else
        'zoom to fit
'ENG>>  add in the right zXXX sub
    End If
End Sub
Attribute VB_Name = "a6000_AI_Import"
'=================================== Copyright PROTECTED ====================================
'|fffd| 2013 JTF AUTOMATION  |  Report Unauthorized Use or Automation Errors to:  JTF.ENGINEERING@gmail.com
'================ Unlawful to copy, modify, distribute, plagiarize, or mimic ================
'=================================== Copyright PROTECTED ====================================
'============================================================================================
'============================ USER AGREEMENT of LIMITED USAGE ===============================
'MUST NOT BE DUPLICATED or used by any person, or on any PC, without JTF AUTOMATION direct consent.
'BY OPENING THIS FILE YOU AGREE TO PROTECT THIS FILE FROM UNAUTHORIZED USE OR DISTRIBUTION.
'BY OPENING THIS FILE YOU AUTHORIZE JTF AUTOMATION TO ELECTRONICALLY TRACK COMPUTERS WHERE IT WAS USED.
'IF YOU DO NOT AGREE TO THESE TERMS, YOU MUST DESTROY ALL COPIES OF THIS FILE AND IT'S CONTENT WITHIN 24hrs OF RECEIPT FROM JTF AUTOMATION, AND INFORM JTF AUTOMATION WITHIN 24hrs OF RECEIPT.
'============================ USER AGREEMENT of LIMITED USAGE ===============================
Option Private Module 'subs are NOT available outside this project
Sub a6000ImportAnotherAIList()
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    If MsgBox("DATA IMPORT:  This will prompt you to select an older AI List file, for direct data import into this newer AI List file version (see 'AI List Release Version' number at the bottom of the sheet)." & Enter2 & "FULL DATA RESET:  This will permanently delete out all of the data in this current AI List file.  It is recommended to 'Cancel' this 'FULL DATA RESET' and first SaveAs this file to a new file name." & Enter2 & "Ok to continue?", vbOKCancel + vbExclamation, SiteAddy) = vbCancel Then Exit Sub
    IsAll10BlankRows = a2305IsAll10BlankRows
    If ((ActiveSheet.Name = AIListSheetName) And (Cells(AIHeaderRow + 4, AICategoryCol) = "Basic User Tips")) Or ((ActiveSheet.Name = AIListSheetName) And IsAll10BlankRows) Then
            'skip "DELETE ALL" prompt
        Else
            If UCase(InputBox("FULL DATA RESET:  This will permanently delete out all your data from this AI List file." & Enter2 & "Type in 'delete all' to continue...", SiteAddy, "CANCEL")) <> "DELETE ALL" Then Exit Sub
    End If
    
    RunScreen 0.012
    
    'Delete all Rows
    a3200Sort AINewOpenClosedCol, AINumCol, , , True

    'Select and open import file
    ImportFile = Application.GetOpenFilename("Excel files (*.xl*),*.xl*", 1, SiteAddy & "   |   Please select a file to import", "test", False)
    If ImportFile = False Then RunScreen 1: Exit Sub
    
    SetEventsScreenProtect False, False
    
    Dim wb As Workbook
    Set wb = Workbooks.Open(ImportFile, False, True)
    ThisWorkbook.Worksheets(AIListSheetName).Activate
    
    'Find range limits
    AIDetailRangeKey = wb.Worksheets(AIListSheetName).Range("AIDetailRangeKey")
    If Error <> "" Then     'Invalid file
        Select Case AIUserVersion
            Case "CUser", "RecentCUser"
                MsgBox "INVALID FILE:  You have chosen an invalid AI List import file.  Please try again and select a valid file.", , SiteAddy
            Case Else
                MsgBox "INVALID FILE:  You have chosen an invalid AI List import file.  Please try again and select a valid file or contact " & SiteName & " for assistance at " & EmailAddy, , SiteAddy
        End Select
        
        RunScreen 1
        wb.Close False
        Set wb = Nothing
        SetEventsScreenProtect True, True
        Exit Sub
    End If
    
    AIDetailRangeKey = Mid(AIDetailRangeKey, InStr(1, AIDetailRangeKey, ":") + 1)
    ColumnNamesRow = Val(AIDetailRangeKey)
    AIDetailRangeKey = Mid(AIDetailRangeKey, InStr(1, AIDetailRangeKey, ",") + 1)
    DetailRowStart = Val(AIDetailRangeKey)
    AIDetailRangeKey = Mid(AIDetailRangeKey, InStr(1, AIDetailRangeKey, ",") + 1)
    DetailColStart = Val(AIDetailRangeKey)
    DetailRowEnd = wb.Worksheets(AIListSheetName).Range("AIFooter").Row - 1
    'Find DetailColEnd
    DetailColEnd = DetailColStart
    Do
        If wb.Worksheets(AIListSheetName).Cells(Range("AIDetailRangeKey").Row, DetailColEnd).Value = "" Then Exit Do
        DetailColEnd = DetailColEnd + 1
    Loop
    DetailColEnd = DetailColEnd - 1
    
    SetEventsScreenProtect False, False, False

    'Currently import assumes the same order and quantity of fields
    NextRow = AIDetailFirstRow + 1
    For iRow = DetailRowStart To DetailRowEnd
        RunScreen (iRow - 1) / DetailRowEnd
        If wb.Worksheets(AIListSheetName).Cells(iRow, DetailColStart).Value = "" Then   'Task row
            For iCol = DetailColStart To DetailColEnd
                CellValue = wb.Worksheets(AIListSheetName).Cells(iRow, iCol)
                'Populate current AI List with imported Rows
                If Left(Cells(NextRow, iCol).Formula, 1) <> "=" And CellValue <> "" Then Cells(NextRow, iCol).Value = CellValue
            Next iCol
            Application.Calculation = xlCalculationAutomatic
            If Application.WorksheetFunction.CountIf(Range(Cells(AIDetailFirstRow, AIDueGroupCol), Cells(AIDetailLastRow, AIDueGroupCol)), "[0],New (since last sort)") = 0 Then
                NextRow = NextRow + 1
                a3115InsertNewRow NextRow
            End If
            Application.Calculation = xlCalculationManual
        End If
    Next iRow

    'Copy over column visibility and widths
    For iCol = AICategoryCol To AIUpdatedCol
        If Left(Cells(AIHeaderRow, iCol), 3) = Left(Cells(AIDetailFirstRow - 1, iCol), 3) Then  'same column location
            If Cells(1, iCol).EntireColumn.Hidden <> wb.Worksheets(AIListSheetName).Cells(1, iCol).EntireColumn.Hidden Then Cells(1, iCol).EntireColumn.Hidden = wb.Worksheets(AIListSheetName).Cells(1, iCol).EntireColumn.Hidden
            If Columns(iCol).ColumnWidth <> wb.Worksheets(AIListSheetName).Columns(iCol).ColumnWidth Then Columns(iCol).ColumnWidth = wb.Worksheets(AIListSheetName).Columns(iCol).ColumnWidth
        End If
    Next iCol
    
    'Reset zoom (and logo location)
    a2210ZoomToWindow 130

    'Copy over custom sheets
    If MsgBox("COPY OTHER SHEETS:  Your AI List data has been imported.  Any other Excel sheets (non AI List sheets) in the same file will now be copied over to this file too.  ('Cancel' to not copy over other sheets)", vbOKCancel, SiteAddy) = vbCancel Then GoTo JumpToEnd
    For Each iSheet In wb.Sheets
        ''If iSheet.Visible = True And iSheet.Name <> AIListSheetName And iSheet.Name <> "> HELP <" And iSheet.Name <> "<Add Your Sheets Here>" Then
        If iSheet.Visible <> xlSheetVeryHidden And iSheet.Name <> AIListSheetName And iSheet.Name <> "> HELP <" And iSheet.Name <> "<Add Your Sheets Here>" Then
            iSheet.Copy After:=ThisWorkbook.Worksheets(ThisWorkbook.Sheets.Count)
        End If
    Next iSheet

JumpToEnd:
    ThisWorkbook.Worksheets(AIListSheetName).Activate
    wb.Close False
    Set wb = Nothing
    a3515RebuildAddSheetsHere                               'delete then create "<Add Your Sheets Here>"
    a3520RebuildAllDropDowns
    a3200Sort AINewOpenClosedCol, AINumCol
    RunScreen 1
    SetEventsScreenProtect True, True, True
End Sub
Attribute VB_Name = "a7000_AI_ToggleSettings"
'=================================== Copyright PROTECTED ====================================
'|fffd| 2013 JTF AUTOMATION  |  Report Unauthorized Use or Automation Errors to:  JTF.ENGINEERING@gmail.com
'================ Unlawful to copy, modify, distribute, plagiarize, or mimic ================
'=================================== Copyright PROTECTED ====================================
'============================================================================================
'============================ USER AGREEMENT of LIMITED USAGE ===============================
'MUST NOT BE DUPLICATED or used by any person, or on any PC, without JTF AUTOMATION direct consent.
'BY OPENING THIS FILE YOU AGREE TO PROTECT THIS FILE FROM UNAUTHORIZED USE OR DISTRIBUTION.
'BY OPENING THIS FILE YOU AUTHORIZE JTF AUTOMATION TO ELECTRONICALLY TRACK COMPUTERS WHERE IT WAS USED.
'IF YOU DO NOT AGREE TO THESE TERMS, YOU MUST DESTROY ALL COPIES OF THIS FILE AND IT'S CONTENT WITHIN 24hrs OF RECEIPT FROM JTF AUTOMATION, AND INFORM JTF AUTOMATION WITHIN 24hrs OF RECEIPT.
'============================ USER AGREEMENT of LIMITED USAGE ===============================
Option Private Module 'subs are NOT available outside this project
Sub a7000ManageConditionalFormatting(ConditionalFormatSetting As String)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    SetEventsScreenProtect False, False, False
    
    'Read in Named Ranges
    AICFDisableActiveRow = GetRange("AICFDisableActiveRow")
    AICFDisableAlternatingAndPriority = GetRange("AICFDisableAlternatingAndPriority")
    AICFDisableClosed = GetRange("AICFDisableClosed")
    
    Select Case ConditionalFormatSetting
        Case "Toggle All"
            If AICFDisableActiveRow Or AICFDisableAlternatingAndPriority Or AICFDisableClosed Then
                AICFDisableActiveRow = False
                AICFDisableAlternatingAndPriority = False
                AICFDisableClosed = False
            Else
                AICFDisableActiveRow = True
                AICFDisableAlternatingAndPriority = True
                AICFDisableClosed = True
            End If
        Case "Disable Active Row"
            AICFDisableActiveRow = True
        Case "Disable Alternating & Priority"
            AICFDisableAlternatingAndPriority = True
        Case "Disable Closed"
            AICFDisableClosed = True
    End Select
    
    'Write out Named Ranges
    Sheets(AIListSheetName).Names("AICFDisableActiveRow").RefersTo = AICFDisableActiveRow
    Sheets(AIListSheetName).Names("AICFDisableAlternatingAndPriority").RefersTo = AICFDisableAlternatingAndPriority
    Sheets(AIListSheetName).Names("AICFDisableClosed").RefersTo = AICFDisableClosed
    
    'Reset Conditional Formatting
    Set OriginalSelection = ActiveCell
    Range("A1").Select
    Sheets(AIListSheetName).Cells.FormatConditions.Delete
    If Not AICFDisableClosed Then
        AddConditionalFormatting Sheets(AIListSheetName).Range(Cells(1, AICategoryCol), Cells(AIDetailLastRow, AICommentCol)), "=$C1=AIClosed", RGB(216, 216, 216), RGB(127, 127, 127), True, False
        AddConditionalFormatting Sheets(AIListSheetName).Range(Cells(1, AICategoryCol), Cells(AIDetailLastRow, AICommentCol)), "=$C1=AIClosed", RGB(216, 216, 216), RGB(127, 127, 127), True, False
        AddConditionalFormatting Sheets(AIListSheetName).Range(Cells(1, AIDetailFirstCol), Cells(AIDetailLastRow, AINumCol)), "=$C1=AIClosed", RGB(191, 191, 191), RGB(127, 127, 127), True, False
        AddConditionalFormatting Sheets(AIListSheetName).Range(Cells(1, AICreatedCol), Cells(AIDetailLastRow, AIUpdatedCol)), "=$C1=AIClosed", RGB(191, 191, 191), RGB(127, 127, 127), True, False
    End If
    If Not AICFDisableAlternatingAndPriority Then
        AddConditionalFormatting Sheets(AIListSheetName).Range(Cells(1, AIRespCol), Cells(AIDetailLastRow, AIStatusCol)), "=OR($C1=AIClosed,$J1=""Done"",$J1=""Hold"",$L1=""Done"",$L1=""Hold"",$L1=""Complete"",$L1=""100% Complete"")", RGB(216, 216, 216), RGB(127, 127, 127), True, False
        AddConditionalFormatting Sheets(AIListSheetName).Range(Cells(1, AIRespCol), Cells(AIDetailLastRow, AIDueCol)), "=AND($C1<>AIClosed,OR($J1=1,$J1=""Critical"",$J1=""High"",$J1=""Top"",AND($K1>0,$K1<=TODAY())))", RGB(255, 255, 0), , True, False
    End If
    If Not AICFDisableActiveRow Then
        AddConditionalFormatting Sheets(AIListSheetName).Range(Cells(1, AICategoryCol), Cells(AIDetailLastRow, AICommentCol)), "=AND($B1="""",CELL(""row"")=ROW())", RGB(255, 255, 204), , True, False
    End If
    If Not AICFDisableAlternatingAndPriority Then
        AddConditionalFormatting Sheets(AIListSheetName).Range(Cells(1, AICategoryCol), Cells(AIDetailLastRow, AICommentCol)), "=AND($C1=AIOpen,MOD(ROW(),2)=1)", RGB(242, 255, 234), , True, False
    End If
    OriginalSelection.Select
    
    SetEventsScreenProtect True, True, True
End Sub

'' = = = = = =not in use = = = =
''Sub DeleteAllConditionalFormatting()
''    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
''    SetEventsScreenProtect False, False, False
''    Sheets(AIListSheetName).Cells.FormatConditions.Delete
''    SetEventsScreenProtect True, True, True
''End Sub

'' = = = = = =not in use = = = =
''Sub ManageConditionalFormatting()
'''    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
''    SetEventsScreenProtect False, False, False
''    Set OriginalSelection = ActiveCell
''    Range("A1").Select
''
''    'Closed Rows
''    AddConditionalFormatting Sheets(AIListSheetName).Range(Cells(1, AICategoryCol), Cells(AIDetailLastRow, AICommentCol)), "=$C1=AIClosed", RGB(216, 216, 216), RGB(127, 127, 127), True, False
''    AddConditionalFormatting Sheets(AIListSheetName).Range(Cells(1, AICategoryCol), Cells(AIDetailLastRow, AICommentCol)), "=$C1=AIClosed", RGB(216, 216, 216), RGB(127, 127, 127), True, False
''    AddConditionalFormatting Sheets(AIListSheetName).Range(Cells(1, AIDetailFirstCol), Cells(AIDetailLastRow, AINumCol)), "=$C1=AIClosed", RGB(191, 191, 191), RGB(127, 127, 127), True, False
''    AddConditionalFormatting Sheets(AIListSheetName).Range(Cells(1, AICreatedCol), Cells(AIDetailLastRow, AIUpdatedCol)), "=$C1=AIClosed", RGB(191, 191, 191), RGB(127, 127, 127), True, False
''
''    'Status Done or Hold
''    AddConditionalFormatting Sheets(AIListSheetName).Range(Cells(1, AIRespCol), Cells(AIDetailLastRow, AIStatusCol)), "=OR($C1=AIClosed,$J1=""Done"",$J1=""Hold"",$L1=""Done"",$L1=""Hold"",$L1=""Complete"",$L1=""100% Complete"")", RGB(216, 216, 216), RGB(127, 127, 127), True, False
''
''    'Critical
''    AddConditionalFormatting Sheets(AIListSheetName).Range(Cells(1, AIRespCol), Cells(AIDetailLastRow, AIDueCol)), "=AND($C1<>AIClosed,OR($J1=1,$J1=""Critical"",$J1=""High"",$J1=""Top"",AND($K1>0,$K1<=TODAY())))", RGB(255, 255, 0), , True, False
''
''    'Current Row
''    AddConditionalFormatting Sheets(AIListSheetName).Range(Cells(1, AICategoryCol), Cells(AIDetailLastRow, AICommentCol)), "=AND($B1="""",CELL(""row"")=ROW())", RGB(255, 255, 204), , True, False
''
''    'Banded Alternate Rows
''    AddConditionalFormatting Sheets(AIListSheetName).Range(Cells(1, AICategoryCol), Cells(AIDetailLastRow, AICommentCol)), "=AND($C1<>AIClosed,MOD(ROW(),2)=1)", RGB(242, 255, 234), , True, False
''
''    OriginalSelection.Select
''    SetEventsScreenProtect True, True, True
''End Sub

Sub AddConditionalFormatting(CFRange As Range, CFFormula As String, Optional CFInteriorColorFill As Long = -1, Optional CFFontColor As Long = -1, Optional CFStopIfTrue = False, Optional IsProtected As Boolean = False)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    'Unprotect sheet if necessary and select cell A1 (required for conditional formatting to use correct cell reference in formula)
    If IsProtected Then SetEventsScreenProtect False, False, False
    Set OriginalSelection = ActiveCell
    Sheets(AIListSheetName).Range("A1").Select
    
    'Add Conditional Formatting
    CFRange.FormatConditions.Add xlExpression, Formula1:=CFFormula
    With CFRange.FormatConditions(CFRange.FormatConditions.Count)
        If CFInteriorColorFill <> -1 Then .Interior.Color = CFInteriorColorFill
        If CFFontColor <> -1 Then .Font.Color = CFFontColor
        .StopIfTrue = CFStopIfTrue
    End With
    
    'Move selection back to original cell
    OriginalSelection.Select
    If IsProtected Then SetEventsScreenProtect True, True, True
End Sub
Attribute VB_Name = "a9000_ThisWorkbookEvents"
'=================================== Copyright PROTECTED ====================================
'|fffd| 2013 JTF AUTOMATION  |  Report Unauthorized Use or Automation Errors to:  JTF.ENGINEERING@gmail.com
'================ Unlawful to copy, modify, distribute, plagiarize, or mimic ================
'=================================== Copyright PROTECTED ====================================
'============================================================================================
'============================ USER AGREEMENT of LIMITED USAGE ===============================
'MUST NOT BE DUPLICATED or used by any person, or on any PC, without JTF AUTOMATION direct consent.
'BY OPENING THIS FILE YOU AGREE TO PROTECT THIS FILE FROM UNAUTHORIZED USE OR DISTRIBUTION.
'BY OPENING THIS FILE YOU AUTHORIZE JTF AUTOMATION TO ELECTRONICALLY TRACK COMPUTERS WHERE IT WAS USED.
'IF YOU DO NOT AGREE TO THESE TERMS, YOU MUST DESTROY ALL COPIES OF THIS FILE AND IT'S CONTENT WITHIN 24hrs OF RECEIPT FROM JTF AUTOMATION, AND INFORM JTF AUTOMATION WITHIN 24hrs OF RECEIPT.
'============================ USER AGREEMENT of LIMITED USAGE ===============================
Option Private Module 'subs are NOT available outside this project
Public Const ManageEnableEventsActivated = True 'ENG NOTE:  As a precaution, should continue to disable events, then inteligently re-enable within all of these....
Sub EventWorkbookActivate()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    OriginalEvents = Application.EnableEvents
    SetEvents False: ThisWorkbook.Activate
    a2100SetupWorksheetDefaults
    SetEvents OriginalEvents
    End Sub
Sub EventWorkbookDeactivate()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    OriginalEvents = Application.EnableEvents
    SetEvents False ': ThisWorkbook.Activate  <<not needed because of what this code ?does?, AND also because will block user from switching away)
    a2110ResetWorksheetDefaults
    Application.OnKey "^{PGUP}"
    Application.OnKey "^{PGDN}"
    SetEvents OriginalEvents
End Sub
Sub EventWorkbookBeforeClose(Cancel As Boolean)
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    OriginalEvents = Application.EnableEvents
    Set OriginalSelectedSheet = ActiveSheet
    SetEvents False: ThisWorkbook.Activate
    
    SetJTFLogoVisibility    'Turn on JTF Automation Logo if off, as precaution (in case save on exiting occurs)
    If Sheets(AIListSheetName).Shapes("Button8").Visible = False Then Sheets(AIListSheetName).Shapes("Button8").Visible = True
    
    FileCloseMode = True
    
    With ThisWorkbook
        If ExpiredButCheckForExtendedLife = True Then DisplayExtendedLifeWarning
        If Not .Saved Then
            'SAVE prompts
            UserResponse = MsgBox("Do you want to save the changes you made to '" & .Name & "'?", _
                vbYesNoCancel + vbExclamation, SiteAddy)
            Select Case UserResponse
            Case Is = vbYes
                 'SAVE and CLOSE
                If ThisWorkbook.ReadOnly Then   'Force Saveas
                    EventWorkbookBeforeSave True, False
                Else
                    EventWorkbookBeforeSave False, False 'NOTE: will SAVE and CLOSE within this code
                End If
            Case Is = vbNo
                 'NO save (close below)
            Case Is = vbCancel
                 'CANCEL
                FileCloseMode = False
                Cancel = True
            End Select
        Else
            WasSavedAlready = True
        End If
        
        If FileCloseMode = False Then Cancel = True 'incase user CANCEL durring SAVE
        If Cancel <> True Then 'Not (Cancel = True) Then
            'already SAVED... (though probably CLOSED above, within SAVE)
            'or "NO" save selected (then close now without saving)
            .Saved = True
            If Not ThisWorkbook.ReadOnly And UserResponse <> vbNo And WasSavedAlready <> True Then
                Stop ' CRASH on next line ? ? ? ?
                .Close savechanges:=False  'logically this is (maybe) never ran
            End If
            'will CLOSE after leaving this sub
        End If
    End With
    OriginalSelectedSheet.Activate
    SetEvents OriginalEvents
End Sub
Sub EventWorkbookBeforePrint(Cancel As Boolean) 'As a precaution services logo visabilty, and hides AI sheet (c) for CUsers
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    If ActiveSheet.Name <> AIListSheetName Then GoTo JumpOut 'to prevent post-PrintPreview lockup on other sheets.  'to minimize sheet change and acidental Key Hijack durring event
        'DETAILED EXPLANATION OF BUG:  Print Preview on any other sheet, then when returns, to excel keyboard arrows don't work.  CTRL+PgDn to AI List will fix the issue, but sometimes fully locks up preventing that too
        'DETAILED ANALYSIS OF BUG: When the "SetProtection True, AIListSheetName" sets protection on teh AI List sheet (and it's not the one being PrintPreviewed) it causes the bug to occur
    OriginalEvents = Application.EnableEvents
    Set OriginalSelectedSheet = ActiveSheet
    SetEvents False: ThisWorkbook.Activate
    If IsIna4030EmailAIListAsPDF <> True Then
        SetJTFLogoVisibility    'Reset JTF Automation Logo if off, as precaution
        If Sheets(AIListSheetName).Shapes("Button8").Visible = False Then Sheets(AIListSheetName).Shapes("Button8").Visible = True
    End If
    
    'AICopyright
    Select Case AIUserVersion
        Case "CUser", "RecentCUser"
            'Hide copyright notice (and leave hidden for the rest of session... returns on AutoOpen)
            SetProtection False, AIListSheetName
            SetEvents False
            Sheets(AIListSheetName).Range("AICopyright").Formula = ""
            SetProtection True, AIListSheetName
    End Select
    
    OriginalSelectedSheet.Activate
    SetEvents OriginalEvents
JumpOut:
End Sub
Sub EventWorkbookBeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    b1000CustomModeManager
    OriginalEvents = Application.EnableEvents
    OriginalUpdating = Application.ScreenUpdating
    Application.ScreenUpdating = False
    
    SetEvents False
    Set OriginalSelectedSheet = ActiveSheet

    ThisWorkbook.Activate 'one with this AI LIST code
    If ActiveSheet.Name <> AIListSheetName Then Sheets(AIListSheetName).Select

    Application.Cursor = xlDefault
    If Application.Version < 12# Then Excel2003 = True Else Excel2003 = False   'Using Excel 2003 or older
    
    'Turn on JTF Automation Logo if off, as precaution
    SetJTFLogoVisibility
    If Sheets(AIListSheetName).Shapes("Button8").Visible = False Then Sheets(AIListSheetName).Shapes("Button8").Visible = True
    
    'Figure out SaveAs filename if saving as
    If SaveAsUI Then
        If Excel2003 Then
            SaveAsPathAndFileName = Application.GetSaveAsFilename(ThisWorkbook.FullName, "Excel 97-2003 Workbook (*.xls), *.xls")
        Else
            'SaveAsPathAndFileName = Application.GetSaveAsFilename(ThisWorkbook.FullName, "Excel 2007 Macro-Enabled Workbook (*.xlsm), *.xlsm,Excel 97-2003 Workbook (*.xls), *.xls")
            IsFileTypeXLSM = (Right(ThisWorkbook.FullName, 5) = ".xlsm")
            If IsFileTypeXLSM = False Then
                '2003 XLS file already
                SaveAsPathAndFileName = Application.GetSaveAsFilename(ThisWorkbook.FullName, "Excel 97-2003 Workbook (*.xls), *.xls")
            Else
                SaveAsPathAndFileName = Application.GetSaveAsFilename(ThisWorkbook.FullName, "Excel 2007 Macro-Enabled Workbook (*.xlsm), *.xlsm,Excel 97-2003 Workbook (*.xls), *.xls")
            End If
        End If
        If SaveAsPathAndFileName = "False" Then
            Cancel = True
            FileCloseMode = False
            Application.Cursor = xlNorthwestArrow
            SetEvents OriginalEvents
            Exit Sub
        End If
    End If
    
    'Set variables for EXCEL VERSION
    
    If Sheets(AIListSheetName).Names("AI2003Version").RefersTo = "=TRUE" Then AI2003Version = True Else AI2003Version = False
    SavingAs2003Version = False
    If SaveAsUI Then
        If Right(SaveAsPathAndFileName, 4) = ".xls" Then SavingAs2003Version = True '<<WHY not remove "SavingAs2003Version" check... since save as xlsM or any other format in 2003 will also break it (if agree, can we remove from everywhere else?)
    Else
        If Right(ThisWorkbook.Name, 4) = ".xls" Then SavingAs2003Version = True
    End If
    
'= = = = = = = = = =
'BEFORE SAVE show...
    SetEventsScreenProtect False, False, False
    'ALWAYS...'EVERY TIME save...
    DisplayNamedRangeRow "AIMessageAutomationDisabled", True
    
    '= = = ROW Message= = =
    'ROW:AIMessageBrokenByExcel2003
    ShowAIMessageBrokenByExcel2003 = "as-is"
    'If Excel2003 And Not AI2003Version And SavingAs2003Version Then ShowAIMessageBrokenByExcel2003 = True
    If Excel2003 And Not AI2003Version Then ShowAIMessageBrokenByExcel2003 = True '<<WHY not remove "SavingAs2003Version"check like I am... since save as xlsM or any other format in 2003 will also break it   (if agree, can we remove from everywhere else?)
    If ShowAIMessageBrokenByExcel2003 = True Then SaveAsUI = True         'Force save as '<<WHY force?
    If ShowAIMessageBrokenByExcel2003 <> "as-is" Then DisplayNamedRangeRow "AIMessageBrokenByExcel2003", ShowAIMessageBrokenByExcel2003
    If ShowAIMessageBrokenByExcel2003 = True Then
        Msg1 = "BROKEN BY EXCEL 2003:  This version of the AI List file was incorrectly converted by Excel 2003."
        Msg2 = "ALTERNATIVE 1:  This can be avoided by asking the original file user to SaveAs the original file to an Excel 2003 |fffd|.xls|fffd| (not |fffd|.xlsm|fffd|) file, and then using that copy of the file." & Enter2
        Msg3 = "ALTERNATIVE 2:  If alternative 1 is not practical, you may save your changes now and then ask a person with a newer version of Excel to use the 'Import AI List' feature to fully replace their AI List's data with this file's data." & Enter2 & Enter
        Msg4 = "OK to permanently keep this broken by Excel 2003 file?"
        If MsgBox(Msg1 & Msg2 & Msg3 & Msg4, vbCritical + vbOKCancel, SiteAddy) = vbCancel Then
            SetEventsScreenProtect True, True, True
            Cancel = True
            FileCloseMode = False
            Application.Cursor = xlNorthwestArrow
            SetEvents OriginalEvents 'sometimes redundant with above, but kept here for consistency/precaution
            Exit Sub
        End If
    End If
    
    '= = = ROW Message= = =
    'ROW:AIMessageExcel2003Issues <<<<<  modified logic to NOT be fail safe (i.e. to always hide when saving, and only show when macros enabled
    'ShowAIMessageExcel2003Issues = True 'never "as-is"
    ShowAIMessageExcel2003Issues = "as-is"  '<<<<<  modified logic to NOT be fail safe
    If Sheets(AIListSheetName).Range("AIMessageBrokenByExcel2003").EntireRow.Hidden = False Then ShowAIMessageExcel2003Issues = False
    If ShowAIMessageExcel2003Issues <> "as-is" Then DisplayNamedRangeRow "AIMessageExcel2003Issues", ShowAIMessageExcel2003Issues
    ''DisplayNamedRangeRow "AIMessageExcel2003Issues", True
    
    '= = = ROW Message= = =
    'ROW:AIMessageRestrictedPerformance
    ShowAIMessageRestrictedPerformance = False 'never "as-is"
    'TYPO:  If ShowAIMessageExcel2003Issues <> "as-is" Then DisplayNamedRangeRow "AIMessageRestrictedPerformance", ShowAIMessageRestrictedPerformance
    If ShowAIMessageRestrictedPerformance <> "as-is" Then DisplayNamedRangeRow "AIMessageRestrictedPerformance", ShowAIMessageRestrictedPerformance
    
   
    '= = = ROW Message= = = (multiple)
    'SOMETIMES... Run through different MESSAGE ROW scenarios
    
    
    '= = = ROW Message= = =
    'ROW:AIMessageWarningText
    ShowAIMessageWarningText = "as-is" ' vs "ShowRed" vs "ShowBlue" vs "SemiHide"
    NotSavedBy2003Yet = Sheets(AIListSheetName).Range("AIMessageWarningText").EntireRow.Hidden ' = "NOT" AlreadyShownAIMessageWarningText
    AlreadyShownAIMessageWarningText = (Sheets(AIListSheetName).Range("AIMessageWarningText").EntireRow.Hidden = False)
    
    If Excel2003 Then
        ShowAIMessageWarningText = "ShowBlue"
        If NotSavedBy2003Yet And ShowAIMessageBrokenByExcel2003 <> True Then 'will lose graphics, but file NOT broken
            ShowAIMessageWarningText = "ShowRed"
            ''>>>>The following was removed by James, because want to encourage 2003 useres to use the file... and also the one line way down noted as "NoWarnWhen2003Removes2007Graphics"
            ''Msg1 = "CONVERT TO 2003 GRAPHICS:  Saving this file in Excel 2003 will permanently remove some of the AI List's Excel 2007 graphical features. (with no loss of data or functionality)" & Enter2
            ''Msg2 = "ALTERNATIVE 1:  To avoid permanently removing these Excel 2007 graphical features click CANCEL and then use the 'Export Row (to an email)' feature to email each updated row to a person with a newer version of Excel." & Enter2
            ''Msg3 = "ALTERNATIVE 2:  If alternative 1 is not practical, you may save your changes now and then ask a person with a newer version of Excel to use the 'Import AI List' feature to fully replace their AI List's data with this file's data." & Enter2 & Enter
            ''Msg4 = "OK to permanently remove Excel 2007 graphical features from this file?"
            ''If MsgBox(Msg1 & Msg2 & Msg3 & Msg4, vbCritical + vbOKCancel, SiteAddy) = vbCancel Then
                ''SetEventsScreenProtect True, True, True
                ''Cancel = True
                ''FileCloseMode = False
                ''Application.Cursor = xlNorthwestArrow
                ''SetEvents OriginalEvents 'sometimes redundant with above, but kept here for consistency/precaution
                ''Exit Sub
            ''End If
        End If
    Else
        '2007
        If AlreadyShownAIMessageWarningText Then ShowAIMessageWarningText = "ShowBlue"
    End If
    'apply the RedText on screen
    If ShowAIMessageWarningText = "ShowRed" Then
        AIMessageWarningTextColor = RGB(255, 0, 0) ' set red, first time done in 2003
        AIMessageWarningTextRowHeight = 60  ' show it first time done in 2003
    ElseIf ShowAIMessageWarningText = "ShowBlue" Then
        AIMessageWarningTextColor = RGB(31, 73, 125) ' blue
        AIMessageWarningTextRowHeight = 60 ' show
    ElseIf ShowAIMessageWarningText = "SemiHide" Then
        AIMessageWarningTextColor = RGB(31, 73, 125) ' blue
        AIMessageWarningTextRowHeight = 1 'SemiHide
    End If
    If ShowAIMessageWarningText <> "as-is" Then
        DisplayNamedRangeRow "AIMessageWarningText", True
        Sheets(AIListSheetName).Range("AIMessageWarningText").Font.Color = AIMessageWarningTextColor
        Sheets(AIListSheetName).Range("AIMessageWarningText").RowHeight = AIMessageWarningTextRowHeight
    End If
    

    'General SaveAs intercepts...
    If Not Excel2003 And Not AI2003Version And SavingAs2003Version Then         'First time properly converting file to 2003 version
        '    in 2007        is 2007 file        SaveAs 2003
        'CONVERT to 2003 properly
        'Msg1 = "UNSELECT CHECK:  If prompted, disable (unselect) the |fffd|Check Compatibility|fffd| option to maximize Excel 2003 compatibility and simplicity of use. (ok to continue while ignoring the irrelevant Excel 'loss of functionality or fidelity' warnings)."
        Msg1 = "UNSELECT CHECK:  When prompted, disable (unselect) the |fffd|Check Compatibility|fffd| option, then choose 'continue'.  (ignore the irrelevant Excel 'loss of functionality or fidelity' warnings)."
        Msg2 = "RECALC DEFINED FORMULAS:  When prompted, choose |fffd|Yes|fffd| to the recalculate message."
        Msg3 = "...after saving and closing the file, these steps will have correctly convert to an Excel 2003 file."
        MsgBox Msg1 & Enter2 & Msg2 & Enter2 & Enter & Msg3, , SiteAddy
        Sheets(AIListSheetName).Names("AI2003Version").RefersTo = True
    End If
    DetectedBrokeBy2003Conversion = False
    If (Add_In_____MVF_____New_Broke_Detection_Logic__) Then DetectedBrokeBy2003Conversion = True '<<WHY is this here?.... Please see same linein AutoOpen, and address there and here with same method.
    If (DetectedBrokeBy2003Conversion) Or (Not Excel2003 And AI2003Version And Not SavingAs2003Version) Then           'First time upsaving to 2007 version
        '        in 2007    is 2003 file            SaveAs 2007
        'fail to make 2007 file from a 2003
        ''removed by JTF>>  DetectedBrokeBy2003Conversion = True '<<WHY is this here?... it is temporary.  Please remove it when you fix the above "WHY" line  (but leave the below code the same, no matter what)
        Msg1 = "LOSS OF EXCEL 2007 GRAPHICS:  An Excel 2003 user permanently removed some of the AI List's Excel 2007 graphical features. (with no loss of data or functionality)  These graphical features can not be restored."
        If DetectedBrokeBy2003Conversion Then Msg1 = "BROKEN BY EXCEL 2003: An Excel 2003 user possibly broke this copy of the AI List file when they attempted to convert it to an Excel 2003 file. (with loss of functionality, but preserving data)  Or an Excel 2003 user removed some of the AI List's Excel 2007 graphical features in a way which can not be restored. (with no loss of data or functionality)"
        Msg2 = "ALTERNATIVE:  You may not SaveAs '.xlsm' but you may SaveAs '.xls' or open an original '.xlsm' AI List file (Excel 2007 or newer) and use the 'Import AI List' feature to properly achieve the same results."
        Msg3 = "SaveAs an 'xlsm' file has been canceled. (Try SaveAs '.xls' or open an original '.xlsm' file)"
        MsgBox Msg1 & Enter2 & Msg2 & Enter2 & Enter & Msg3, vbCritical, SiteAddy
        SetEventsScreenProtect True, True, True
        Cancel = True
        FileCloseMode = False
        Application.Cursor = xlNorthwestArrow
        SetEvents OriginalEvents 'sometimes redundant with above, but kept here for consistency/precaution
        Exit Sub
    End If
    If Not Excel2003 And AI2003Version And SavingAs2003Version Then             'Excel 2007 keeping as 2003 version
        '    in 2007    is 2003 file        SaveAs 2003
        '...do nothing
    End If
    


'= = = = = = = = = =
'SAVE...
    'Protect and save file

    SetEventsScreenProtect , , True
    Sheets(OriginalSelectedSheet.Name).Select ' ...temporarily when save, if was in this workbook
    If SaveAsUI Then
        If SaveAsPathAndFileName = "" Then  'Forced save as in this subroutine
            If Excel2003 Then
                SaveAsPathAndFileName = Application.GetSaveAsFilename(ThisWorkbook.FullName, "Excel 97-2003 Workbook (*.xls), *.xls")
            Else
                SaveAsPathAndFileName = Application.GetSaveAsFilename(ThisWorkbook.FullName, "Excel 2007 Macro-Enabled Workbook (*.xlsm), *.xlsm,Excel 97-2003 Workbook (*.xls), *.xls")
            End If
            If SaveAsPathAndFileName = "False" Then Application.Cursor = xlNorthwestArrow: SetEvents OriginalEvents: Exit Sub
        End If
        
        If Not SavingAs2003Version Then     'Save as 2007 (xlsm) format
            ActiveWorkbook.SaveAs SaveAsPathAndFileName
        Else                                'Must save as a 2003 xls format
            Stop
            If Not Excel2003 Then ActiveWorkbook.SaveAs SaveAsPathAndFileName, 56    '<<WHY "DB must be confirmed and updated"  stated?
            If Excel2003 Then ActiveWorkbook.SaveAs SaveAsPathAndFileName 'seems to need like this in Excel 2003 testing
        End If
        ''Cancel = True       'Not sure this is required      ....JTF put outside of if/then
    Else
        ThisWorkbook.Save
    End If
    
    FlagFileAsSaved = True
    Cancel = True       'Not sure this is required
    ThisWorkbook.Saved = True 'Not sure this is required
    
    
    
'= = = = = = = = = =
'AFTER save, now show...

    Sheets(AIListSheetName).Select '...again
    If Not FileCloseMode Then
        'Hide appropriate messages if not closing
        Cancel = True
        SetEventsScreenProtect , , False
        DisplayNamedRangeRow "AIMessageAutomationDisabled", False
        ''DisplayNamedRangeRow "AIMessageExcel2003Issues", False <<WHY hide, if only UN hidden when failed?
        
        '= = = ROW Message= = =
        'ROW:AIMessageWarningText
        If Excel2003 Then
            If Not NotSavedBy2003Yet Then
                'NOT "first time" 2003 saved
                Sheets(AIListSheetName).Range("AIMessageWarningText").Font.Color = RGB(31, 73, 125) ' blue ' set red, first time done in 2003
                Sheets(AIListSheetName).Range("AIMessageWarningText").RowHeight = 1 ' SemiHide
            Else
                AIMessageWarningTextRowHeight = 1 'SemiHide  <<< this was originally NOT HERE (added when implimented "NoWarnWhen2003Removes2007Graphics")
            End If
        Else
            '2007 = SemiHide, but 15% of time:  Show (30 tall, red)
            If AlreadyShownAIMessageWarningText Then
                If Rnd() < 0.15 Then
                    Sheets(AIListSheetName).Range("AIMessageWarningText").Font.Color = RGB(255, 0, 0)    ' red   'Set red 15% of time
                    Sheets(AIListSheetName).Range("AIMessageWarningText").RowHeight = 60 'show
                Else '85% of time
                    Sheets(AIListSheetName).Range("AIMessageWarningText").Font.Color = RGB(31, 73, 125) ' blue
                    Sheets(AIListSheetName).Range("AIMessageWarningText").RowHeight = 1 'SemiHide
                End If
            End If
        End If
        
        
        '= = = ROW Message= = =
        'ROW:AIMessageExcel2003Issues <<<<<  modified logic to NOT be fail safe (i.e. to always hide when saving, and only show when macros enabled
        ShowAIMessageExcel2003Issues = "as-is"
        If Excel2003 Then
            'as-is
        Else '2007
            ShowAIMessageExcel2003Issues = False 'logically not required, since <<<<<  modified logic to NOT be fail safe
        End If
        If ShowAIMessageExcel2003Issues <> "as-is" Then DisplayNamedRangeRow "AIMessageExcel2003Issues", ShowAIMessageExcel2003Issues
        
        
        'ROW:AIMessageRestrictedPerformance
        ShowAIMessageRestrictedPerformance = "as-is"
        If Excel2003 Then
            ShowAIMessageRestrictedPerformance = False
        Else '2007
            If AI2003Version And Rnd() < 0.15 Then ShowAIMessageRestrictedPerformance = True '15% of the time
        End If
        If ShowAIMessageRestrictedPerformance <> "as-is" Then DisplayNamedRangeRow "AIMessageRestrictedPerformance", ShowAIMessageRestrictedPerformance

        
        'SetEventsScreenProtect True, True, True
        SetEventsScreenProtect , True, True 'since SetEvents managed at exit
    End If
    
    'Sheets(OriginalSelectedSheetName).Select ' at end
    OriginalSelectedSheet.Activate ' at end

    
    If FlagFileAsSaved = True Then
        Cancel = True               'Not sure this is required
        ThisWorkbook.Saved = True   'Not sure this is required
        If FileCloseMode Then
            EventWorkbookDeactivate     'reset arrow keys, etc.
            ''Workbooks.Add  'JTF think no longer needed         'Closing AI List workbook closes an additional sheet if open, so by creating this sheet, it will only close this new one in addition to the AI List
            ThisWorkbook.Close savechanges:=False
        End If
    End If
    If OriginalSelectedSheet.Name = AIListSheetName Then Application.Cursor = xlNorthwestArrow
    SetEvents OriginalEvents
    Application.ScreenUpdating = OriginalUpdating
End Sub
Sub EventWorkbookWindowDeactivate(ByVal Wn As Window) 'STOP CLOSE:  Help prevent closing of ":1" window by useer (gives chance to SaveAs before it's all lost... read below)
    OriginalEvents = Application.EnableEvents
    SetEvents False ': ThisWorkbook.Activate <<not needed because of what this code does, AND also because will block user from switching away)
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    FromCap = Wn.Caption 'window closing
    ToCap = ActiveWindow.Caption 'same as "FromCap" of they are CLOSING "FromCap", different if they are not closing anything
    CapCol = InStr(FromCap, ":") ' zero, if only 1 window exists (is safe to close it)
    If CapCol > 0 Then WinNum = Right(FromCap, Len(FromCap) - CapCol) ' of Wn
    If WinNum = "1" And FromCap = ToCap And CapCol <> 0 Then
        'switch to close win 2 vs win 1
        Win2Cap = Left(FromCap, CapCol) & "2"
        Windows(Win2Cap).Activate
        Response = MsgBox("CLOSE SECONDARY WINDOW:  This secondary window will be closed, instead of the automated file's main ':1' window.", vbOKCancel, SiteAddy)
        If Response = vbCancel Then ActiveWindow.NewWindow 'create new, so it is close after this sub is done
        'now continue, so CLOSES currently active window
        Stop '= = = WARNING = = =  even if you "end" VBA, there is NO way to stop excel from closing the "active" window
    End If
    '' OLD "User WARNING only" METHOD...  (did not close #2)
    ''    If FromCap = ToCap And CapCol <> 0 And WinNum = "1" Then
    ''        MsgBox TabIn2 & TabIn & "  SaveAs file to PREVENT LOSS ?" & Enter & TabIn2 & "                         (read below first)" & Enter2 & TabIn2 & "= = = = DO NOT hit 'OK', 'X', or 'ESC'= = = =" & Enter2 & _
    ''        "IF SAVED ALREADY:  If you have already saved this file, simply CANCEL past the next set of windows, being sure to NOT save even if prompted, and you will preserve all previously saved settings." & Enter2 & _
    ''        "DELETE CRITICAL FILE SETTINGS:  You are about to close the file window ending in ':1', yet there are other window's open on this file.  This will result in the PERMANENT LOSS of some CRITICAL FILE VIEW settings in this automated file.  To prevent this, after you hit 'OK' here, our automation will attempt to pause Excel's window ':1' close action by forcing a 'Save As' action for you, prior to allowing Excel to compleat the window ':1' close action." & Enter2 & _
    ''        "MUST SAVE NOW WARNING:  Attempting to 'Cancel', 'Break', 'End', 'Reset', or 'Debug' this Excel window ':1' close action or the following 'Save As' window, will still result in the loss of these critical view settings.  Please hit 'OK' now, to initiate the 'Save As' workaround.", vbExclamation, SiteAddy
    ''
    ''        Application.Dialogs(xlDialogSaveAs).Show  'SaveAs... BEFORE close "window :1"
    ''
    ''        MsgBox TabIn2 & "= = = = DO NOT hit 'OK' or 'ESC'= = = =      ...continued" & Enter & TabIn2 & "                      (read below first)" & Enter2 & _
    ''        "CRITICAL FILE SETTINGS LOST:  If you did not have the chance to have just now saved this automated file (prior to displaying this message) this may mean our attempt to pause Excel's window ':1' close was unsuccessful." & Enter2 & _
    ''        "Under this circumstance, we would suggest you do NOT save the file after this message.  But rather close it and re-open your previous saved file." & Enter2 & _
    ''        "...although this default Excel behavior is beyond our control, we do apologize for any confusion caused by our warning message's attempt to help you prevent this loss of critical file view settings.", vbExclamation, SiteAddy
    ''        Stop
    ''PAUSE_and_SAVE______Note_To_Engineer: '>> >>  DO NOT hit reset or allow to run past here, prior to save...  read above message for explanation.
    ''        Stop
    ''    End If
    SetEvents OriginalEvents
End Sub
Sub SetEvents(SetEventsValue)
    ' this sub is here MAINLY so global ManageEnableEventsActivated can be used to globaly disable this feature
    'typically the calling sub tracks OriginalEnableEvents at it's start, and restores at it's end
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    If ManageEnableEventsActivated = True Then Application.EnableEvents = SetEventsValue
End Sub
Attribute VB_Name = "a9_Calendar"
Attribute VB_Base = "0{19A24CE4-1C98-470C-9383-1FD98E031B57}{35E6EFCE-5B8A-43C0-A284-5B5ED541398F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'=================================== Copyright PROTECTED ====================================
'|fffd| 2013 JTF AUTOMATION  |  Report Unauthorized Use or Automation Errors to:  JTF.ENGINEERING@gmail.com
'================ Unlawful to copy, modify, distribute, plagiarize, or mimic ================
'=================================== Copyright PROTECTED ====================================
'============================================================================================
'============================ USER AGREEMENT of LIMITED USAGE ===============================
'MUST NOT BE DUPLICATED or used by any person, or on any PC, without JTF AUTOMATION direct consent.
'BY OPENING THIS FILE YOU AGREE TO PROTECT THIS FILE FROM UNAUTHORIZED USE OR DISTRIBUTION.
'BY OPENING THIS FILE YOU AUTHORIZE JTF AUTOMATION TO ELECTRONICALLY TRACK COMPUTERS WHERE IT WAS USED.
'IF YOU DO NOT AGREE TO THESE TERMS, YOU MUST DESTROY ALL COPIES OF THIS FILE AND IT'S CONTENT WITHIN 24hrs OF RECEIPT FROM JTF AUTOMATION, AND INFORM JTF AUTOMATION WITHIN 24hrs OF RECEIPT.
'============================ USER AGREEMENT of LIMITED USAGE ===============================

Private Sub Build_Calendar(Optional SelectedDate = 0, Optional MaintainCurrentPosition As Boolean = False)
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    'Set Selected Date
    If SelectedDate = 0 Then
        If IsDate(ActiveCell.Value) Then
            SelectedDate = ActiveCell.Value
        Else
            SelectedDate = Date
        End If
    End If
    
    'Set Default Colors
    ColorBackgroundWeekend = RGB(197, 197, 200)
    ColorBackgroundPastDateWeekday = RGB(220, 220, 223)
    ColorBackgroundCurrentDate = RGB(25, 128, 229)
    ColorBackgroundFutureDateWeekday = RGB(255, 255, 255)
    ColorTextNotSelectedDateMonth = RGB(145, 154, 163)
    ColorTextSelectedDateMonth = RGB(56, 73, 90)
    ColorTextCurrentDate = RGB(255, 255, 255)
    CalendarHeaderLabel.ForeColor = RGB(80, 80, 80)     'RGB(31, 73, 125)
    
    'the routine that actually builds the calendar each time
    CalendarHeaderLabel.Caption = Format(SelectedDate, "mmmm yyyy")
    FirstOfMonth = DateSerial(Year(SelectedDate), Month(SelectedDate), 1)
    FirstOfMonthWeekday = Weekday(FirstOfMonth)
    
    For I = 1 To 42
        With Controls("D" & (I))
            ThisButtonDate = DateAdd("d", (I - FirstOfMonthWeekday), FirstOfMonth)
            
            'Set label format
            If Month(ThisButtonDate) = Month(SelectedDate) Then
                .ForeColor = ColorTextSelectedDateMonth
                .FontSize = 9
                .FontBold = True
            Else
                .ForeColor = ColorTextNotSelectedDateMonth
                .FontSize = 9
                .FontBold = False
            End If
            
            'Set label info
            .Caption = Format(ThisButtonDate, "d")
            .ControlTipText = Format(ThisButtonDate, "m/d/yy")
            
            'Color background
            If ThisButtonDate < Date Then .BackColor = ColorBackgroundPastDateWeekday
            If ThisButtonDate > Date Then .BackColor = ColorBackgroundFutureDateWeekday
            'Gray all weekend dates
            If Weekday(ThisButtonDate) = 1 Or Weekday(ThisButtonDate) = 7 And ThisButtonDate <> Date Then .BackColor = ColorBackgroundWeekend
            
            If ThisButtonDate = Date Then
                .BackColor = ColorBackgroundCurrentDate
                .ForeColor = ColorTextCurrentDate
            End If
            
            'Set focus date
            If Not MaintainCurrentPosition And ThisButtonDate = SelectedDate Then .SetFocus
        End With
    Next
'    LastDate = SelectedDate
End Sub
Private Sub PreviousWeek()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    Build_Calendar CDate(ActiveControl.ControlTipText) - 7
End Sub
Private Sub NextWeek()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    Build_Calendar CDate(ActiveControl.ControlTipText) + 7
End Sub
Private Sub CommandButton1_Click()  'Dummy button to allow for escape to cancel and exit form
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    Unload Me
End Sub

Private Sub Left_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    CurrentDate = CDate(ActiveControl.ControlTipText)
    If ActiveControl.TabIndex <> 49 Then CurrentBox = ActiveControl.TabIndex Else CurrentBox = 0
    CurrentDateBoxFromMiddle = 21 - CurrentBox
    MiddleDate = DateAdd("d", CurrentDateBoxFromMiddle, CurrentDate) ' on screen
    NextDate = DateAdd("m", -1, MiddleDate)
    'Build_Calendar DateSerial(Year(CurrentDate), Month(CurrentDate), Day(CurrentDate) - 35), True
    Build_Calendar NextDate, True
End Sub
Private Sub Right_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    CurrentDate = CDate(ActiveControl.ControlTipText)
    If ActiveControl.TabIndex <> 49 Then CurrentBox = ActiveControl.TabIndex Else CurrentBox = 0
    CurrentDateBoxFromMiddle = 21 - CurrentBox
    MiddleDate = DateAdd("d", CurrentDateBoxFromMiddle, CurrentDate) ' on screen
    NextDate = DateAdd("m", 1, MiddleDate)
    'Build_Calendar DateSerial(Year(CurrentDate), Month(CurrentDate), Day(CurrentDate) + 35), True
    Build_Calendar NextDate, True
End Sub
Private Sub UserForm_Initialize()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    Me.StartUpPosition = 0
    MeTopNum = Application.Top + ActiveCell.Top + 25 'all these assume 100% zoom, and scroll to see top left
    MeTopMid = (Application.Top + Application.Height) / 2
    MeTopMax = Application.Top + Application.Height - a9_Calendar.Height
    'Debug.Print "MeTopNum     MeTopMax       Use MeTopNum"
    'Debug.Print " " & MeTopNum, MeTopMax, Not (MeTopNum > MeTopMax)
    If MeTopNum > MeTopMax Then MeTopNum = MeTopMax 'keep within window height
    If MeTopNum > MeTopMid Then MeTopNum = MeTopMid 'keep in middle of window height
    Me.Top = MeTopNum
    
    'Me.Left = Application.Left + Application.Width - Me.Width - 25
    MeLeftNum = Application.Left + ActiveCell.Left + ActiveCell.Width + 50
    MeLeftMax = Application.Left + Application.Width - Me.Width - 25
    If MeLeftNum > MeLeftMax Then MeLeftNum = MeLeftMax
    Me.Left = MeLeftNum
    Me.Caption = SiteAddy
    
    'Assume JTF Logo
    a9_Calendar.Image1JTFLogo.Visible = True
    a9_Calendar.Image2ExcelLogo.Visible = False
    
    'User Version - Logo Change
    Select Case AIUserVersion
        Case "CUser", "RecentCUser"
            'these auto reset to original FORM apearance, when FORM displayed next time
            a9_Calendar.Image1JTFLogo.Visible = False
            a9_Calendar.Image2ExcelLogo.Visible = False
            a9_Calendar.Height = a9_Calendar.Height - a9_Calendar.Image1JTFLogo.Height - 3
        Case "ExcelAutomationHelp"
            a9_Calendar.Image1JTFLogo.Visible = False
            a9_Calendar.Image2ExcelLogo.Visible = True
            a9_Calendar.Height = a9_Calendar.Height - 5
    End Select
    Call Build_Calendar
End Sub


Private Sub D1_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    If KeyCode = 38 Then PreviousWeek
    If KeyCode = 39 Then D2.SetFocus
End Sub
Private Sub D2_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    If KeyCode = 37 Then D1.SetFocus
    If KeyCode = 38 Then PreviousWeek
End Sub
Private Sub D3_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    If KeyCode = 37 Then D2.SetFocus
    If KeyCode = 38 Then PreviousWeek
End Sub
Private Sub D4_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    If KeyCode = 37 Then D3.SetFocus
    If KeyCode = 38 Then PreviousWeek
    If KeyCode = 39 Then D5.SetFocus
End Sub
Private Sub D5_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    If KeyCode = 37 Then D4.SetFocus
    If KeyCode = 38 Then PreviousWeek
End Sub
Private Sub D6_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    If KeyCode = 37 Then D5.SetFocus
    If KeyCode = 38 Then PreviousWeek
End Sub
Private Sub D7_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    If KeyCode = 37 Then D6.SetFocus
    If KeyCode = 38 Then PreviousWeek
End Sub
Private Sub D36_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    If KeyCode = 40 Then NextWeek
End Sub
Private Sub D37_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    If KeyCode = 40 Then NextWeek
End Sub
Private Sub D38_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    If KeyCode = 40 Then NextWeek
End Sub
Private Sub D39_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    If KeyCode = 40 Then NextWeek
End Sub
Private Sub D40_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    If KeyCode = 40 Then NextWeek
End Sub
Private Sub D41_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    If KeyCode = 40 Then NextWeek
End Sub
Private Sub D42_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    If KeyCode = 40 Then NextWeek
End Sub


Private Sub D1_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D1.ControlTipText
    Unload Me
End Sub
Private Sub D2_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D2.ControlTipText
    Unload Me
End Sub
Private Sub D3_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D3.ControlTipText
    Unload Me
End Sub
Private Sub D4_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D4.ControlTipText
    Unload Me
End Sub
Private Sub D5_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D5.ControlTipText
    Unload Me
End Sub
Private Sub D6_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D6.ControlTipText
    Unload Me
End Sub
Private Sub D7_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D7.ControlTipText
    Unload Me
End Sub
Private Sub D8_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D8.ControlTipText
    Unload Me
End Sub
Private Sub D9_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D9.ControlTipText
    Unload Me
End Sub
Private Sub D10_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D10.ControlTipText
    Unload Me
End Sub
Private Sub D11_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D11.ControlTipText
    Unload Me
End Sub
Private Sub D12_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D12.ControlTipText
    Unload Me
End Sub
Private Sub D13_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D13.ControlTipText
    Unload Me
End Sub
Private Sub D14_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D14.ControlTipText
    Unload Me
End Sub
Private Sub D15_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D15.ControlTipText
    Unload Me
End Sub
Private Sub D16_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D16.ControlTipText
    Unload Me
End Sub
Private Sub D17_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D17.ControlTipText
    Unload Me
End Sub
Private Sub D18_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D18.ControlTipText
    Unload Me
End Sub
Private Sub D19_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D19.ControlTipText
    Unload Me
End Sub
Private Sub D20_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D20.ControlTipText
    Unload Me
End Sub
Private Sub D21_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D21.ControlTipText
    Unload Me
End Sub
Private Sub D22_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D22.ControlTipText
    Unload Me
End Sub
Private Sub D23_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D23.ControlTipText
    Unload Me
End Sub
Private Sub D24_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D24.ControlTipText
    Unload Me
End Sub
Private Sub D25_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D25.ControlTipText
    Unload Me
End Sub
Private Sub D26_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D26.ControlTipText
    Unload Me
End Sub
Private Sub D27_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D27.ControlTipText
    Unload Me
End Sub
Private Sub D28_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D28.ControlTipText
    Unload Me
End Sub
Private Sub D29_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D29.ControlTipText
    Unload Me
End Sub
Private Sub D30_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D30.ControlTipText
    Unload Me
End Sub
Private Sub D31_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D31.ControlTipText
    Unload Me
End Sub
Private Sub D32_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D32.ControlTipText
    Unload Me
End Sub
Private Sub D33_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D33.ControlTipText
    Unload Me
End Sub
Private Sub D34_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D34.ControlTipText
    Unload Me
End Sub
Private Sub D35_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D35.ControlTipText
    Unload Me
End Sub
Private Sub D36_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D36.ControlTipText
    Unload Me
End Sub
Private Sub D37_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D37.ControlTipText
    Unload Me
End Sub
Private Sub D38_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D38.ControlTipText
    Unload Me
End Sub
Private Sub D39_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D39.ControlTipText
    Unload Me
End Sub
Private Sub D40_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D40.ControlTipText
    Unload Me
End Sub
Private Sub D41_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D41.ControlTipText
    Unload Me
End Sub
Private Sub D42_Click()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    ActiveCell.Value = D42.ControlTipText
    Unload Me
End Sub
Attribute VB_Name = "a9_RunScreen"
Attribute VB_Base = "0{4444C670-140C-4CF7-8481-33AC5CB8B19B}{0553C097-B8B9-4BD9-AB4A-74AF74CA270A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'=================================== Copyright PROTECTED ====================================
'|fffd| 2013 JTF AUTOMATION  |  Report Unauthorized Use or Automation Errors to:  JTF.ENGINEERING@gmail.com
'================ Unlawful to copy, modify, distribute, plagiarize, or mimic ================
'=================================== Copyright PROTECTED ====================================
'============================================================================================
'============================ USER AGREEMENT of LIMITED USAGE ===============================
'MUST NOT BE DUPLICATED or used by any person, or on any PC, without JTF AUTOMATION direct consent.
'BY OPENING THIS FILE YOU AGREE TO PROTECT THIS FILE FROM UNAUTHORIZED USE OR DISTRIBUTION.
'BY OPENING THIS FILE YOU AUTHORIZE JTF AUTOMATION TO ELECTRONICALLY TRACK COMPUTERS WHERE IT WAS USED.
'IF YOU DO NOT AGREE TO THESE TERMS, YOU MUST DESTROY ALL COPIES OF THIS FILE AND IT'S CONTENT WITHIN 24hrs OF RECEIPT FROM JTF AUTOMATION, AND INFORM JTF AUTOMATION WITHIN 24hrs OF RECEIPT.
'============================ USER AGREEMENT of LIMITED USAGE ===============================

Private Sub UserForm_Initialize()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    Me.StartUpPosition = 0
    Me.Top = Application.Top + Cells(1, 1).Top + 150
    Me.Left = Application.Left + 20
    Me.Caption = SiteAddy
    
    'Assume JTF Logo
    a9_RunScreen.Image1JTFLogo.Visible = True
    a9_RunScreen.Image2ExcelLogo.Visible = False
    
    'User Version - Logo Change
    Select Case AIUserVersion
        Case "CUser", "RecentCUser"
            a9_RunScreen.Image1JTFLogo.Visible = False
            a9_RunScreen.Image2ExcelLogo.Visible = False
            a9_RunScreen.Height = a9_RunScreen.Height - a9_RunScreen.Image1JTFLogo.Height
        Case "ExcelAutomationHelp"
            a9_RunScreen.Image1JTFLogo.Visible = False
            a9_RunScreen.Image2ExcelLogo.Visible = True
            a9_RunScreen.Height = a9_RunScreen.Height - 6
    End Select
    
    
    
End Sub
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    'Prevent user from closing with the Close box in the title bar.
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    If CloseMode <> 1 Then Cancel = 1
End Sub
Attribute VB_Name = "b1000_CustomMode"
'=================================== Copyright PROTECTED ====================================
'|fffd| 2013 JTF AUTOMATION  |  Report Unauthorized Use or Automation Errors to:  JTF.ENGINEERING@gmail.com
'================ Unlawful to copy, modify, distribute, plagiarize, or mimic ================
'=================================== Copyright PROTECTED ====================================
'============================================================================================
'============================ USER AGREEMENT of LIMITED USAGE ===============================
'MUST NOT BE DUPLICATED or used by any person, or on any PC, without JTF AUTOMATION direct consent.
'BY OPENING THIS FILE YOU AGREE TO PROTECT THIS FILE FROM UNAUTHORIZED USE OR DISTRIBUTION.
'BY OPENING THIS FILE YOU AUTHORIZE JTF AUTOMATION TO ELECTRONICALLY TRACK COMPUTERS WHERE IT WAS USED.
'IF YOU DO NOT AGREE TO THESE TERMS, YOU MUST DESTROY ALL COPIES OF THIS FILE AND IT'S CONTENT WITHIN 24hrs OF RECEIPT FROM JTF AUTOMATION, AND INFORM JTF AUTOMATION WITHIN 24hrs OF RECEIPT.
'============================ USER AGREEMENT of LIMITED USAGE ===============================

'=DONE= 8/31/12
' impliment best looking final logo images in sheet and 2 forms
'logo
    ' code "Button7" new dims, and 7a
    ' code check like "a2210ZoomToWindow" that moves logo
' test logo swap on main sheet, & tweak size/location
' code in HELP sheet logo row hide/shows   ...HelpSheetName
' code in prompt for "how many rows to insert" (in any area, via right click)
' make Auto Tab content update with logo
' make "AutomationBroke = True" not be able to CANCEL out on atempt to save as read only!
    ' if expired, but cancel save (when read-only?) then should NOT allow stay in file
' check Outlook notes
' make startup prompts cleaner


'=TO DO=

' AICustomMode   (make sheet name range too)
    'X impliment AllowCustomMode ...evaluated and updated in STARTUP and BEFORESAVE
    'X impliment AICustomMode
    'X make detect CertifiedPC
    'X Based on Variables...
        'When on CERT PC:  make HOME's "(Free Version)" say "(Customized Version)"
        'When on non-CERT PC:  make HOME's "(Free Version)" say "*Customized Version*"   ...i.e. stars eventually explodes
    'make CertPc not expire with time, and not prompt
        'make sure once non-cert 2 mths, does expire
    'make AutoRebuild revert back to normal, for easy stuff.  (column names, special stat text, special columns)
    'build b2000CustomModeDisable


'TEST
' AllowCUserMode
' 2003 fail conversion detection (based on logo size)
'



'MODULE:  Controls most "CUSTOM MODE" aspects by just calling b1000
Option Private Module 'subs are NOT available outside this project
Sub b0000Start() 'LOADS common named ranges to VBA
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    AICustomMode = GetRange("AICustomMode")
    AICustomModeLast = GetRange("AICustomModeLast")

End Sub
Sub b1000CustomModeManager() 'MAIN....  based on AllowCustomMode and AICustomMode (from a2000)
' runs Certifies CUSTOM PC, converts to FREE when should
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    'Global AICustomMode 'set from AllowCustomMode and then named range, but changed here and in named range to "FreeVersion" if not certified PC
    b0000Start
CheckAllCustomModesEverDoneAndLeftInThisVersion:   'usually remove or rem out, if offer and client declines to pay for upgrade MAINTENANCE on this version
    If AICustomMode = 0 Then GoTo JumpOut 'previously rebuilt to FREE VERSION
    If AllowCustomMode = "T128813D" Then 'if sending to client MUST FIRST: SetRange "AICustomMode", 1'Custom Cert PC   ..if not done yet
        '=============== CUSTOM MODE:
        IsCustomModePC = b9000IsCustomModePC
        If IsCustomModePC Then
            'CERTIFIED IsCustomModePC
            SetRange "AICustomModeLast", Date
            SetRange "AICustomMode", 1
            AICustomModeExtendedLifeUser = "Yes"
            GoTo JumpOut
        ElseIf Date < AICustomModeLast + AICustomModeRecentDaysAdder Then
            'RECENT IsCustomModePC
            SetRange "AICustomMode", 2
            AICustomModeExtendedLifeUser = "Yes"
            GoTo JumpOut
        ElseIf Date > AICustomModeLast + AICustomModeRecentDaysAdder Then
            'EXPIRED RECENT IsCustomModePC
            'Convert to FREE
            GoTo ConvertToFreeVersion
        Else
            'ERROR
            EStop 76312
            GoTo ConvertToFreeVersion
        End If
    End If
    
    
FreeVersion_IfGotHere:
    If AllowCustomMode <> "FreeVersion" Then EStop 76458
    If AICustomMode <> 0 Then EStop 76600
    GoTo JumpOut
    
    
ConvertToFreeVersion:
    SetRange "AICustomMode", 0
    MsgBox "AUTOMATIC REBUILD: The AI List periodic auto-check discovered that an auto-rebuild is appropriate.  The AI List automation will now rebuild this file.  All typical user data will be preserved during this process.", , SiteAddy
    b2000CustomModeDisable
    MsgBox "REBUILD DONE: The auto-rebuild process has been successful and all typical user data has been preserved.  Manually save this rebuilt file NOW to avoid future rebuilds.", , SiteAddy
    GoTo JumpOut
    
JumpOut:
End Sub
Public Sub b2000CustomModeDisable() 'undo (easy) custom features
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
CheckAllCustomModesEverDoneAndLeftInThisVersion:   'usually remove or rem out, if offer and client declines to pay for upgrade MAINTENANCE on this version
    If AllowCustomMode = "T128813D" Then 'if sending to client MUST FIRST: SetRange "AICustomMode", "T128813D"
        'NOTE: AICustomMode use in native Excel & VBA disables SOME OTHER features not addressed in this list.
        
        GoTo JumpOut
    End If
    EStop 43812 'should not get to this line, if came to this sub
JumpOut:
End Sub
Function b9000IsCustomModePC() ' assumes b0000Start was done (by b1000CustomModeManager)
    If RunMode Then On Error Resume Next Else On Error GoTo 0 'ENG: add to top of ALL Subs/Functions
    fSet = False
'=================================================== CUSTOM MODE:
Do_Check_S9: 'One HOME PC
    If InStr(UCase(Environ("USERNAME")), UCase("James")) < 1 Then GoTo Fail_Check_S9  'if NOT found
    If InStr(UCase(Environ("USERDOMAIN")), UCase("M90-W7")) < 1 Then GoTo Fail_Check_S9  'if NOT found
    If InStr(UCase(Environ("LOGONSERVER")), UCase("\\M90-W7")) < 1 Then GoTo Fail_Check_S9  'if NOT found
    If InStr(UCase(Environ("COMPUTERNAME")), UCase("M90-W7")) < 1 Then GoTo Fail_Check_S9  'if NOT found
    If InStr(UCase(Environ("PROCESSOR_IDENTIFIER")), UCase("Intel64 Family 6 Model 15 Stepping 6, GenuineIntel")) < 1 Then GoTo Fail_Check_S9  'if NOT found
    If InStr(UCase(Environ("PROCESSOR_REVISION")), UCase("0f06")) < 1 Then GoTo Fail_Check_S9  'if NOT found
    GoTo Pass_Check
Fail_Check_S9: 'continue down...
'=================================================== CUSTOM MODE:
    If AllowCustomMode = "T128813D" Then
Do_Check_S1: 'Many WORK PCs
        If InStr(UCase(Environ("COMPUTERNAME")), UCase("QPD")) < 1 Then GoTo Fail_Check_S1  'if NOT found
        If InStr(UCase(Environ("USERDNSDOMAIN")), UCase("QP.NET")) < 1 Then GoTo Fail_Check_S1  'if NOT found
        If InStr(UCase(Environ("USERDOMAIN")), UCase("QPDS")) < 1 Then GoTo Fail_Check_S1  'if NOT found
        GoTo Pass_Check
Fail_Check_S1:
Do_Check_S2: 'One HOME PC
        If InStr(UCase(Environ("COMPUTERNAME")), UCase("QATAR-PC")) < 1 Then GoTo Fail_Check_S2  'if NOT found
        If InStr(UCase(Environ("HOMEPATH")), UCase("\Users\qatar")) < 1 Then GoTo Fail_Check_S2  'if NOT found
        If InStr(UCase(Environ("LOGONSERVER")), UCase("\\QATAR-PC")) < 1 Then GoTo Fail_Check_S2  'if NOT found
        If InStr(UCase(Environ("PROCESSOR_IDENTIFIER")), UCase("Intel64 Family 6 Model 15 Stepping 13, GenuineIntel")) < 1 Then GoTo Fail_Check_S2  'if NOT found
        If InStr(UCase(Environ("PROCESSOR_REVISION")), UCase("0f0d")) < 1 Then GoTo Fail_Check_S2  'if NOT found
        If InStr(UCase(Environ("USERDOMAIN")), UCase("qatar-PC")) < 1 Then GoTo Fail_Check_S2  'if NOT found
        If InStr(UCase(Environ("UserName")), UCase("qatar")) < 1 Then GoTo Fail_Check_S2  'if NOT found
        GoTo Pass_Check
Fail_Check_S2:
    GoTo Fail_Check:
    End If
    
    
Fail_Check:
    fSet = False
    GoTo JumpOut
    
Pass_Check:
    fSet = True
    GoTo JumpOut
    
JumpOut:
    b9000IsCustomModePC = fSet
    
End Function
'=================================== Copyright PROTECTED ====================================
'|fffd| 2013 JTF AUTOMATION  |  Report Unauthorized Use or Automation Errors to:  JTF.ENGINEERING@gmail.com
'================ Unlawful to copy, modify, distribute, plagiarize, or mimic ================
'=================================== Copyright PROTECTED ====================================
'============================================================================================
'============================ USER AGREEMENT of LIMITED USAGE ===============================
'MUST NOT BE DUPLICATED or used by any person, or on any PC, without JTF AUTOMATION direct consent.
'BY OPENING THIS FILE YOU AGREE TO PROTECT THIS FILE FROM UNAUTHORIZED USE OR DISTRIBUTION.
'BY OPENING THIS FILE YOU AUTHORIZE JTF AUTOMATION TO ELECTRONICALLY TRACK COMPUTERS WHERE IT WAS USED.
'IF YOU DO NOT AGREE TO THESE TERMS, YOU MUST DESTROY ALL COPIES OF THIS FILE AND IT'S CONTENT WITHIN 24hrs OF RECEIPT FROM JTF AUTOMATION, AND INFORM JTF AUTOMATION WITHIN 24hrs OF RECEIPT.
'============================ USER AGREEMENT of LIMITED USAGE ===============================
Attribute VB_Name = "zStartup"
'=================================== Copyright PROTECTED ====================================
'|fffd| 2013 JTF AUTOMATION  |  Report Unauthorized Use or Automation Errors to:  JTF.ENGINEERING@gmail.com
'================ Unlawful to copy, modify, distribute, plagiarize, or mimic ================
'=================================== Copyright PROTECTED ====================================
'============================================================================================
'============================ USER AGREEMENT of LIMITED USAGE ===============================
'MUST NOT BE DUPLICATED or used by any person, or on any PC, without JTF AUTOMATION direct consent.
'BY OPENING THIS FILE YOU AGREE TO PROTECT THIS FILE FROM UNAUTHORIZED USE OR DISTRIBUTION.
'BY OPENING THIS FILE YOU AUTHORIZE JTF AUTOMATION TO ELECTRONICALLY TRACK COMPUTERS WHERE IT WAS USED.
'IF YOU DO NOT AGREE TO THESE TERMS, YOU MUST DESTROY ALL COPIES OF THIS FILE AND IT'S CONTENT WITHIN 24hrs OF RECEIPT FROM JTF AUTOMATION, AND INFORM JTF AUTOMATION WITHIN 24hrs OF RECEIPT.
'============================ USER AGREEMENT of LIMITED USAGE ===============================
Option Private Module 'subs are NOT available outside this project
Sub Auto_Open()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    If LockUserCancelKey And RunMode Then Application.EnableCancelKey = xlDisabled Else Application.EnableCancelKey = xlInterrupt ' to prevent user from stopping VBA with CTRL+BREAK or ESC
    SetEvents False
    Set OriginalSelectedSheet = ActiveSheet
    IsOnAISheet = (ActiveSheet.Name = AIListSheetName)
    ThisWorkbook.Activate 'one with this AI LIST code
    Sheets(AIListSheetName).Select
    Application.Cursor = xlDefault
    
    'initialize
    LastColKeyTrack = ActiveCell.Column 'preset for up/down in a2125ManageKeyboardControls
    ExpiredButCheckForExtendedLife = False ' changed to TRUE in zApproval, as needed
    LastTimeDisplayExtendedLifeWarning = 1.1 ' used in DisplayExtendedLifeWarning.   so is a long time ago....
    Randomize
    SetJTFLogoVisibility  'MUST do before RunScreen
    AICustomModeExtendedLifeUser = "NotYetSet" 'set "Yes" in b1000 when appropriate
    b1000CustomModeManager 'must be before zApproval... because sets AICustomModeExtendedLifeUser
    
    'Approval Check
    If RunMode Then
        Randomize: RunTime = 0.01: X = 0.101 * Rnd(): RunScreen X
        zApprovalCheck
        If LockUserCancelKey And RunMode Then Application.EnableCancelKey = xlDisabled Else Application.EnableCancelKey = xlInterrupt ' to prevent user from stopping VBA
        ''RunScreenRnd X  ' mooved to end of sub, to avoid showing the below steps on screen
    End If


    'Warn Engineer if not in RunMode
    If Not RunMode Then
        MsgBox TabIn2 & TabIn & "= = = = RunMode Stop = = = =" & Enter2 & "RunMode is off. (false) (aka DebugMode is on, disabling some features)" & Enter2 & "Engineer MUST set RunMode TRUE prior to final testing on client file.", vbExclamation, SiteAddy
        Application.EnableCancelKey = xlInterrupt 'NORMAL allow user CTRL BREAK or ESC
    End If
    
    'Set variables
    HideAllNamedRangesWithAI
    If Application.Version < 12# Then Excel2003 = True Else Excel2003 = False     'Using Excel 2003 or older
    If Sheets(AIListSheetName).Names("AI2003Version").RefersTo = "=TRUE" Then AI2003Version = True Else AI2003Version = False
    a2900PushAIVersionNumAsTextToSheet
    
'CHECK different MESSAGE ROW scenarios
    'SetEventsScreenProtect False, False, False  "EnableEvents" is now done at sub start/end, so removed from here and MANY other places in AutoOpen
    SetEventsScreenProtect , False, False
    Sheets(AIListSheetName).Range("AIFooter").EntireRow.Hidden = False 'as precaution, incase hidden by CUser BeforePrint
    'SHOW AICopyright    (may have hidden in EventWorkbookBeforePrint)
    Sheets(AIListSheetName).Range("AICopyright").Formula = "='> HELP <'!B29"
    SetEventsScreenProtect , , True

    
    
    
    '= = = ROW Message= = =
    'ROW:AIMessageBrokenByExcel2003 ...aka "converted to 2003 by 2003, vs by 2007"
    ShowAIMessageBrokenByExcel2003 = "as-is"
    DetectedBrokeBy2003Conversion = False
    ''IsFileTypeXLSM = (ThisWorkbook.FileFormat = xlOpenXMLWorkbookMacroEnabled)
    IsFileTypeXLSM = (Right(ThisWorkbook.FullName, 5) = ".xlsm")
    'Determine if broken file
    If (Not IsFileTypeXLSM) And (AI2003Version = False) Then DetectedBrokeBy2003Conversion = True '<<WHY is this not good enough?... because a wrongly converted 07 file to 03 WILL SAVE as an xlsM.  Can you look at my "AI List v2.05t27 (UNLOCK) - 07 edit in 03.xlsm" file and find a way to detect broken, then ADD another line of logic after this one?
    ''If IsError(Cells(AIHeaderRow, AICollapseCol).Interior.Gradient.Degree) And IsFileTypeXLSM Then DetectedBrokeBy2003Conversion = True          'Missing Gradient and is an xlsm file
    If IsFileTypeXLSM Then If IsError(Cells(AIHeaderRow, AICollapseCol).Interior.Gradient.Degree) = True Then DetectedBrokeBy2003Conversion = True 'Missing Gradient and is an xlsm file   (double nested, because would error in 2003)
    If DetectedBrokeBy2003Conversion Then ShowAIMessageBrokenByExcel2003 = True
    If ShowAIMessageBrokenByExcel2003 <> "as-is" Then DisplayNamedRangeRow "AIMessageBrokenByExcel2003", ShowAIMessageBrokenByExcel2003

    '= = = ROW Message= = =
    'ROW:AIMessageExcel2003Issues <<<<<  modified logic to NOT be fail safe (i.e. to always hide when saving, and only show when macros enabled)
    ShowAIMessageExcel2003Issues = "as-is"
    If Excel2003 Then
        ShowAIMessageExcel2003Issues = True ' <<<<<  modified logic to NOT be fail safe (i.e. to always hide when saving, and only show when macros enabled)
        If AI2003Version Then ShowAIMessageExcel2003Issues = False
        If Sheets(AIListSheetName).Range("AIMessageBrokenByExcel2003").EntireRow.Hidden = False Then ShowAIMessageExcel2003Issues = False
    Else '2007
        ShowAIMessageExcel2003Issues = False  'logically not required, since <<<<<  modified logic to NOT be fail safe
    End If
    If ShowAIMessageExcel2003Issues <> "as-is" Then DisplayNamedRangeRow "AIMessageExcel2003Issues", ShowAIMessageExcel2003Issues
    
    '= = = ROW Message= = =
    'ROW:AIMessageRestrictedPerformance
    ShowAIMessageRestrictedPerformance = "as-is"
    If Excel2003 Then
        ShowAIMessageRestrictedPerformance = False
    Else '2007
        If AI2003Version And Rnd() < 0.15 Then ShowAIMessageRestrictedPerformance = True ' 15% of the time
    End If
    If ShowAIMessageRestrictedPerformance <> "as-is" Then DisplayNamedRangeRow "AIMessageRestrictedPerformance", ShowAIMessageRestrictedPerformance
    
    '= = = ROW Message= = =
    'ROW:AIMessageAutomationDisabled
    DisplayNamedRangeRow "AIMessageAutomationDisabled", False
    'SetEventsScreenProtect True, True, True     "EnableEvents" is now done at sub start/end, so removed from here and MANY other places in AutoOpen
    If IsOnAISheet Then SetEventsScreenProtect , , True 'WAS: SetEventsScreenProtect , True, True
    
    
    '= = = ROW Message= = =
    'ROW:AIMessageWarningText       ....03 graphics, in ok AI2003Version file
    AlreadyShownAIMessageWarningText = (Sheets(AIListSheetName).Range("AIMessageWarningText").EntireRow.Hidden = False)
    If Application.Version < 12# And AlreadyShownAIMessageWarningText Then
        'Excel 2003 SemiHide (3 tall, blue)
        If Rnd() <= 1 Then    'SemiHide (3 tall, blue)
            SetEventsScreenProtect , False, False
            Sheets(AIListSheetName).Range("AIMessageWarningText").Font.Color = RGB(31, 73, 125) ' blue
            Sheets(AIListSheetName).Range("AIMessageWarningText").RowHeight = 1 ' SemiHide it
            If IsOnAISheet Then SetEventsScreenProtect , , True 'WAS: SetEventsScreenProtect , True, True
        End If
    ElseIf Application.Version >= 12# And AlreadyShownAIMessageWarningText Then
        'Excel 2007 SemiHide, but 15% of time:  Show (30 tall, red)
        SetEventsScreenProtect , False, False
        If Rnd() < 0.15 Then
            Sheets(AIListSheetName).Range("AIMessageWarningText").Font.Color = RGB(255, 0, 0)    ' red   'Set red 15% of time
            Sheets(AIListSheetName).Range("AIMessageWarningText").RowHeight = 60 'show
        Else '85% of time
            Sheets(AIListSheetName).Range("AIMessageWarningText").Font.Color = RGB(31, 73, 125) ' blue
            Sheets(AIListSheetName).Range("AIMessageWarningText").RowHeight = 1 'SemiHide
        End If
        If IsOnAISheet Then SetEventsScreenProtect , , True 'WAS: SetEventsScreenProtect , True, True
    End If

    'Set zoom
'    Sheets(AIListSheetName).Names("AIFullScreenSetting").RefersTo = "=FALSE"   'Force full screen mode off
    a2100SetupWorksheetDefaults
    Application.Cursor = xlDefault
    If ActiveSheet.Name = AIListSheetName Then
        SetEventsScreenProtect , False
        a2210ZoomToWindow 130
        SetEventsScreenProtect , True
    Else
        SetEventsScreenProtect , True
    End If
    
    'If InStr(1, Cells(AITabMenu1Start, AICollapseCol), "Last Updated:     ") > 0 Then   'New file
    
    
    If RunMode Then RunScreenRnd X
    RunTime = 0.7
        
    a2300MsgNewToAIList
    
    SetEvents True
    Sheets("|fffd||fffd|Calendar").Visible = xlSheetVeryHidden
    Sheets("|fffd||fffd|AI List Support").Visible = xlSheetVeryHidden
    SetRange "AIScrollArrows", False
    
    If OriginalSelectedSheet.Name <> ActiveSheet.Name Then OriginalSelectedSheet.Activate ' at end
    If OriginalSelectedSheet.Name = AIListSheetName Then Application.Cursor = xlNorthwestArrow
    ThisWorkbook.Saved = True
End Sub
Attribute VB_Name = "zzApprovalHandler"
'=================================== Copyright PROTECTED ====================================
'|fffd| 2013 JTF AUTOMATION  |  Report Unauthorized Use or Automation Errors to:  JTF.ENGINEERING@gmail.com
'================ Unlawful to copy, modify, distribute, plagiarize, or mimic ================
'=================================== Copyright PROTECTED ====================================
'============================================================================================
'============================ USER AGREEMENT of LIMITED USAGE ===============================
'MUST NOT BE DUPLICATED or used by any person, or on any PC, without JTF AUTOMATION direct consent.
'BY OPENING THIS FILE YOU AGREE TO PROTECT THIS FILE FROM UNAUTHORIZED USE OR DISTRIBUTION.
'BY OPENING THIS FILE YOU AUTHORIZE JTF AUTOMATION TO ELECTRONICALLY TRACK COMPUTERS WHERE IT WAS USED.
'IF YOU DO NOT AGREE TO THESE TERMS, YOU MUST DESTROY ALL COPIES OF THIS FILE AND IT'S CONTENT WITHIN 24hrs OF RECEIPT FROM JTF AUTOMATION, AND INFORM JTF AUTOMATION WITHIN 24hrs OF RECEIPT.
'============================ USER AGREEMENT of LIMITED USAGE ===============================
Option Private Module 'subs are NOT available outside this project
Global Const EvalFile = Not UnLockedFile   'FALSE = OPEN FILE 'Set to false to remove evaluation check - in all cases this will always confirm Help tab is present and unaltered (Cell B3)
Global zAppRan
' = = = = = CUSTOM FOR AI LIST = = = = = =
Sub zApprovalCheck()
    '======= MUST SET VARIABLES IN a1_ExcelAndAccessHelpDotCom MODULE =======
    'This subroutine is in place to validate this file is used only during the evaluation period
    'The following variables must be adjusted for each project

    'Set variables
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    If RunMode Then Application.EnableCancelKey = xlDisabled Else Application.EnableCancelKey = xlInterrupt ' to prevent user from stopping VBA
    OriginalEvents = Application.EnableEvents
    Application.EnableEvents = False
    
    Randomize
    BDDate = #2/20/2000#
    EvalWarnDate = #2/21/2014#  'about 6 weeks prior to EvalEndDate
    EvalEndDate = #3/30/2014#
    'EvalPeriodLength...  NOT USED in AI List
    EvalCellSheetName = "> HELP <"
    EvalCellReferenceName = "B20"
    EvalCellTargetLength = 188
'>>JTF orig text has been modified   MsgMustUpgrade = "MUST UPGRADE:  Either a new and improved version of the AI List is available, this file's HELP sheet has been removed, or this file's automation has been tampered with."
'    MsgMustUpgradeHelpSheetRemoved = "MUST UPGRADE:  This file's HELP sheet has been removed."
'>>JTF orig text has been modified    MsgMustUpgrade = "MUST UPGRADE:  A new version of the AI List is available. (unless just broken by an Excel 2003* failed conversion)"
    MsgUpgradeSoon = "UPGRADE SOON:  A new free version of the AI List is available for download.  You may 'Register for Updates' using the Green Menu Button to avoid this message."
    MsgMustUpgrade = "MUST UPGRADE:  Either a new free version of the AI List is available for download, or this copy's automation has been permanently disabled*."
    MsgAutoDisabled = "AUTOMATION DISABLED:  This file's automation has been disabled* and can't be re-enabled by your computer.  Although you can't use this disabled file, you may open an older non-disabled file and import your data from this AI List file into the enabled copy.  If importing your list does not correct this issue, please contact us and report error code:    #8193"
    Select Case AIUserVersion
        Case "CUser", "RecentCUser"
            MsgEnding = "  Although your old version is no longer supported, you may import data from this old AI List into the latest version."
        Case Else
            MsgEnding = "  Although your old version is no longer supported, you may import data from this old AI List into the new free version.  Visit " & SiteAddy & " or contact us to obtain the latest free version."
    End Select
    MsgDate = Enter2 & "Must be upgraded before:   " & Format(EvalEndDate, "mmm d, yyyy")
    MsgDateExtendedLife = Enter2 & "Must upgrade to the latest free version to avoid this message."
    MsgContact = Enter2 & TabIn2 & SiteAddy & Enter & TabIn2 & EmailAddy & Enter & TabIn2 & SitePhone
    Msg2003Broke = Enter2 & "*2003 CONVERSION: If just disabled by a failed Excel 2003 self 'CONVERSION' attempt, ask the original file user to properly convert it for you by doing a SaveAs to an Excel 2003 |fffd|.xls|fffd| (not |fffd|.xlsm|fffd|) file, or download it from " & SiteAddy & " and then use 'import' yourself."
    Wait5SecExtendedLife = Enter2 & "WAIT 5 SEC:  You must wait 5 seconds before clicking 'OK'.  Perform the 'UPGRADE SOON' actions to avoid this delay."
    MsgUpgradeSoonLong = MsgUpgradeSoon & MsgEnding & MsgDate & MsgContact
    MsgMustUpgradeLong = MsgMustUpgrade & MsgEnding & MsgDate & MsgContact & Msg2003Broke
    MsgAutomDisabledLong = MsgAutoDisabled & MsgContact & Msg2003Broke
    'these are setting GLOBAL since uder in BeforeClose Event
    Wait5SecExtendedLifeAgain = "WAIT 5 SEC:  You must review the preceding message for at least 5 seconds.  Perform the 'UPGRADE SOON' actions to avoid this delay."
    MsgUpgradeSoonLongForExtendedLife = MsgUpgradeSoon & MsgEnding & MsgDateExtendedLife & MsgContact & Wait5SecExtendedLife
    
'    MsgMustUpgradeHelpSheetRemovedLong = MsgMustUpgradeHelpSheetRemoved & MsgEnding & MsgDate & MsgContact
    On Error Resume Next
EvaluationConfirmation:
    'Exit if BDDate is set
    If Round(BDDate - Now + 0.5, 0) = 0 Then
        Exit Sub
        If OriginalEvents = True Then Application.EnableEvents = True
    End If
    'Check if file has been marked outside of evaluation period or Help tab has been altered/deleted
    
    'LOGO control
    'This was removed, since runs in AutoOpen, and twice makes extra flash:  SetJTFLogoVisibility ' ==== set LOGO visability ====
    If Sheets(AIListSheetName).Shapes("Button8").Visible = False Then Sheets(AIListSheetName).Shapes("Button8").Visible = True 'Green Button symbol
    
    'Check BROKE by 2003 ...JTF
    LogoHeight = Sheets(AIListSheetName).Shapes("Button7").Height 'JTF logo 34.56
    LogoWidth = Sheets(AIListSheetName).Shapes("Button7").Width ' JTF logo 173.25
    If LogoHeight < 31 Or LogoHeight > 38 Or LogoWidth < 160 Or LogoWidth > 190 Then ' <<<  not sure why, but this DOES also detect a failed self "Conversion" of a 2007 file to 2003, by 2003
        AutomationBroke = True
        GoTo EvaluationExpiredClose
    End If
    If Application.Version < 12# Then Excel2003 = True Else Excel2003 = False   'Using Excel 2003 or older
    If Sheets(AIListSheetName).Names("AI2003Version").RefersTo = "=TRUE" Then AI2003Version = True Else AI2003Version = False
    If Excel2003 And Not AI2003Version Then ' <<<  then would be BROKE by 2003 conversion
        AutomationBroke = True
        GoTo EvaluationExpiredClose
    End If
    'Check BROKE by 2003 ...Excel
    LogoHeight = Sheets(AIListSheetName).Shapes("Button7a").Height 'Excel logo 34.62
    LogoWidth = Sheets(AIListSheetName).Shapes("Button7a").Width ' Excel logo 214.88
    If LogoHeight < 31 Or LogoHeight > 38 Or LogoWidth < 200 Or LogoWidth > 230 Then ' <<<  not sure why, but this DOES also detect a failed self "Conversion" of a 2007 file to 2003, by 2003
        AutomationBroke = True
        GoTo EvaluationExpiredClose
    End If
    
    
    
    'HELP SHEET check
    On Error GoTo EvaluationExpiredClose
    If Len(Worksheets(EvalCellSheetName).Range(EvalCellReferenceName)) <> EvalCellTargetLength Then
EvaluationExpiredClose: 'or help missing
Resume EvaluationExpiredClose2
EvaluationExpiredClose2:
        On Error Resume Next
        '==== NO HELP sheet or MODIFIED ==== ...it is modified to represent it's an expired file
        'zEvaluationExpired.Show
        If AutomationBroke Then MsgBox MsgAutomDisabledLong, vbCritical, SiteAddy Else MsgBox MsgMustUpgradeLong, vbCritical, SiteAddy
        Application.EnableEvents = False
        ThisWorkbook.Saved = True
        ThisWorkbook.Close (False)
        Exit Sub 'with events OFF
    End If
    'ELSE.... if has HELP sheet...
    On Error Resume Next
    
    If Now > EvalWarnDate Then
        'WARNING MSG...
        'Check to see if inside evaluation period
        DaysLeft = Round(EvalEndDate - Now + 0.5, 0)
        zEvaluationPeriodCaption = "You have " & DaysLeft & " day(s) left until this version expires."
        MsgUpgradeSoonLong = MsgUpgradeSoonLong & Enter2 & Enter & zEvaluationPeriodCaption
        RndYes = Rnd() > 0.6 '... 40% of the time
        WarnRnd = (DaysLeft > 20 And RndYes) '... 40% of the time
        WarnNow = (DaysLeft <= 20) '..100% of the time
        If (DaysLeft > 0) And (Now > EvalWarnDate) Then
            'zEvaluationPeriod.Show
            If (WarnRnd Or WarnNow) Then
                MsgBox MsgUpgradeSoonLong, vbCritical, SiteAddy
'                If MsgBox("REGISTRATION:  Do you want to register for updates?", vbYesNo, SiteAddy) = vbYes Then a4100Register
            End If
            GoTo AllowInFile
        End If
        
        'EXPIRED....
        'User outside of evaluation period, so mark file, save, and close     ...if made it to here in code
        If AICustomModeExtendedLifeUser = "Yes" Then
            'LET IN, even though EXPIRED
            'display NO warning
            ExpiredButCheckForExtendedLife = True 'Triggers to re-run "zApprovalCheck" when closing file.
            DisplayCustomModeExtendedLifeWarningSometimes
            GoTo AllowInFile
        ElseIf IsJTFExtendedLifeUser Then
            'LET IN, even though EXPIRED
            'display WARNING
            ExpiredButCheckForExtendedLife = True 'Triggers to re-run "zApprovalCheck" when closing file.
            DisplayExtendedLifeWarning
            GoTo AllowInFile
        Else
            'LOCK OUT
            SetProtection False, EvalCellSheetName
            Worksheets(EvalCellSheetName).Range(EvalCellReferenceName) = Worksheets(EvalCellSheetName).Range(EvalCellReferenceName) & " "
            SetProtection True, EvalCellSheetName
            Application.EnableEvents = False
            If Not ActiveWorkbook.ReadOnly Then ActiveWorkbook.Save
            ThisWorkbook.Saved = True
            GoTo EvaluationConfirmation ' will now FAIL eval based on cell length
        End If
    End If
AllowInFile:
    On Error Resume Next
    zAppRan = "Yes"
    If OriginalEvents = True Then Application.EnableEvents = True
    If LockUserCancelKey And RunMode Then Application.EnableCancelKey = xlDisabled Else Application.EnableCancelKey = xlInterrupt ' to prevent user from stopping VBA
End Sub
Function IsJTFExtendedLifeUser() As Boolean ' InString based on user domain and similar methods of determining PC's operating company
    'intended to be companies likely to SHARE/USE in future, but not likely to PAY for usage
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    IsJTFExtendedLifeUser = False
    
    If IsJTFDetectedUserAccount("Corning") Then GoTo MakeTrueAndJumpOut
        'Check Corning DOMAINS:  NA = NorthAmerica, etc...    ...BUT only check EXACT MATCHES to avoid conincidental matches for other companies (since short words)
        If UCase(Environ("UserDomain")) = "NA" Then GoTo MakeTrueAndJumpOut
        If UCase(Environ("UserDomain")) = "EMEA" Then GoTo MakeTrueAndJumpOut
        If UCase(Environ("UserDomain")) = "AP" Then GoTo MakeTrueAndJumpOut
        'check Conring as likely exists in UserDNSDomain  (done multiple ways since am not sure how is recorded in Conring China)
        If IsJTFDetectedUserAccount("NA.CORNING") Then GoTo MakeTrueAndJumpOut
        If IsJTFDetectedUserAccount("EMEA.CORNING") Then GoTo MakeTrueAndJumpOut
        If IsJTFDetectedUserAccount("AP.CORNING") Then GoTo MakeTrueAndJumpOut
        
    If IsJTFDetectedUserAccount("itt") Then GoTo MakeTrueAndJumpOut
    If IsJTFDetectedUserAccount("FlexLink") Then GoTo MakeTrueAndJumpOut
    If IsJTFDetectedUserAccount("byjc") Then GoTo MakeTrueAndJumpOut
    If IsJTFDetectedUserAccount("fabricom") Then GoTo MakeTrueAndJumpOut 'of    "byjc-fabricom" w/ Corning
    If IsJTFDetectedUserAccount("CrossBros") Then GoTo MakeTrueAndJumpOut
    If IsJTFDetectedUserAccount("Eisenmann") Then GoTo MakeTrueAndJumpOut
    If IsJTFDetectedUserAccount("fanuc") Then GoTo MakeTrueAndJumpOut
    If IsJTFDetectedUserAccount("autodesk") Then GoTo MakeTrueAndJumpOut
    If IsJTFDetectedUserAccount("gorbel") Then GoTo MakeTrueAndJumpOut
    If IsJTFDetectedUserAccount("xerox") Then GoTo MakeTrueAndJumpOut
    If IsJTFDetectedUserAccount("midtown") Then GoTo MakeTrueAndJumpOut
    If IsJTFDetectedUserAccount("han-tek") Then GoTo MakeTrueAndJumpOut
    If IsJTFDetectedUserAccount("xpedx") Then GoTo MakeTrueAndJumpOut
    If IsJTFDetectedUserAccount("mitsubishiimaging") Then GoTo MakeTrueAndJumpOut
    If IsJTFDetectedUserAccount("adraft") Then GoTo MakeTrueAndJumpOut
    If IsJTFDetectedUserAccount("brancato") Then GoTo MakeTrueAndJumpOut
    If IsJTFDetectedUserAccount("calvauto") Then GoTo MakeTrueAndJumpOut
    
KeepFalseAndExit:
    Exit Function
    
MakeTrueAndJumpOut:
    IsJTFExtendedLifeUser = True
    
End Function
Function IsJTFDetectedUserAccount(CompanyStringToSearch As String) As Boolean ' InString based on user domain and similar methods of determining PC's operating company
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    IsJTFDetectedUserAccount = False
    CompanyStringToSearch = UCase(CompanyStringToSearch)
    
    'check places where company name could be... (based on test ran on Corning pc)
    If InStr(UCase(Environ("UserDomain")), CompanyStringToSearch) > 0 Then GoTo MakeTrueAndJumpOut
    If InStr(UCase(Environ("UserDNSDomain")), CompanyStringToSearch) > 0 Then GoTo MakeTrueAndJumpOut
    If InStr(UCase(Environ("OrgName")), CompanyStringToSearch) > 0 Then GoTo MakeTrueAndJumpOut
    If InStr(UCase(Environ("FullName")), CompanyStringToSearch) > 0 Then GoTo MakeTrueAndJumpOut
    
KeepFalseAndExit:
    Exit Function
    
MakeTrueAndJumpOut:
    IsJTFDetectedUserAccount = True

End Function
Sub DisplayExtendedLifeWarning()
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    If Timer < (LastTimeDisplayExtendedLifeWarning + 60) Then Exit Sub 'if displayed recently (60 seconds)
    LastTimeDisplayExtendedLifeWarning = Timer
    ExtendedLifeRunTimer = Timer  'START of RunTimer
    ExtendedLifeWait = 5
    'set as a precaution, durring debug...
    If Wait5SecExtendedLifeAgain = "" Then Wait5SecExtendedLifeAgain = "WAIT 5 SEC:  You must review the preceding message for at least 5 seconds.  Perform the 'UPGRADE SOON' actions to avoid this delay."
    If MsgUpgradeSoonLongForExtendedLife = "" Then
        Select Case AIUserVersion
            Case "CUser", "RecentCUser"
                MsgUpgradeSoonLongForExtendedLife = "UPGRADE SOON:  A new free version of the AI List is available for download.  You may 'Register for Updates' using the Green Menu Button to avoid this message." & "  Although your old version is no longer supported, you may import data from this old AI List into the new free version.  Visit www.ExcelAutomationHelp.com to obtain the latest free version and avoid this message." & Enter2 & "WAIT 5 SEC:  You must wait 5 seconds before clicking 'OK'.  Perform the 'UPGRADE SOON' actions to avoid this delay."
            Case "ExcelAutomationHelp"
            Case Else
                MsgUpgradeSoonLongForExtendedLife = "UPGRADE SOON:  A new free version of the AI List is available for download.  You may 'Register for Updates' using the Green Menu Button to avoid this message." & "  Although your old version is no longer supported, you may import data from this old AI List into the new free version.  Visit " & SiteAddy & " or contact us to obtain the latest free version." & Enter2 & "Must upgrade to the latest free version to avoid this message." & Enter2 & TabIn2 & SiteAddy & Enter & TabIn2 & EmailAddy & Enter & TabIn2 & SitePhone & Enter2 & "WAIT 5 SEC:  You must wait 5 seconds before clicking 'OK'.  Perform the 'UPGRADE SOON' actions to avoid this delay."
        End Select
    End If
    MsgBox MsgUpgradeSoonLongForExtendedLife, vbCritical, SiteAddy
    While Timer < (ExtendedLifeRunTimer + ExtendedLifeWait - 1)
        MsgBox Wait5SecExtendedLifeAgain, vbCritical, SiteAddy
        MsgBox MsgUpgradeSoonLongForExtendedLife, vbCritical, SiteAddy
    Wend
End Sub
Sub DisplayCustomModeExtendedLifeWarningSometimes(Optional FractionOfTimeToDisplay = 0.01)
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    MsgNewFeaturesAvail = "NEW VERSION AVAILABLE:  The AI List periodic auto-check discovered that a new free version of the AI List is available for download.  You may 'Register for Updates' using the Green Menu Button to avoid this message.  Although your old version is no longer supported, you may import typical user data from this old AI List into the new free version.  Visit our site or contact us to obtain the latest free version." & Enter2 & TabIn2 & SiteAddy & Enter & TabIn2 & EmailAddy & Enter & TabIn2 & SitePhone & Enter2 & Bullet & " IF CUSTOM:  Note that the free version may not include some of the custom features your current version has." & Enter & Bullet & " UPGRADE CUSTOM:  Contact us if you wish to have your custom version upgraded to include the latest free version's new features."
    If Rnd() <= FractionOfTimeToDisplay Then MsgBox MsgNewFeaturesAvail, vbCritical, SiteAddy
End Sub

Sub ListEnvironmentVariables()
'ENG debug internal use only
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    Dim EnvString As String
    Indx = 1
    Do
        EnvString = Environ(Indx)
        Debug.Print Indx, EnvString
        Indx = Indx + 1
    Loop Until EnvString = ""
    Debug.Print " - - - - - - - - Likely Candidates - - - - - - - - - "
    Debug.Print "UserDomain: ", Environ("UserDomain")
    Debug.Print "UserDNSDomain: ", Environ("UserDNSDomain")
    Debug.Print "OrgName: ", Environ("OrgName")
    Debug.Print "FullName: ", Environ("FullName")
End Sub
Sub SetJTFLogoVisibility(Optional ForceLogoOn = False) 'Logo and other aspects....   in typical cases, this sub ALWAYS turns logo ON
    'LOGO & related setting
    'SET AIUserVersion
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    OriginalSaveState = ThisWorkbook.Saved
    OriginalEvents = Application.EnableEvents
    SetEventsScreenProtect False
    
    If AllowCUserMode And Not ForceLogoOn And ActiveSheet.Name = AIListSheetName And (Environ("UserDomain") = "CALVAUTO" Or Environ("UserDomain") = ForceUserDomainAsCUser) Then
        'IS CUser (CALVAUTO) right now PC:
        'Reset new logo auto on date (allows users of C-User's saved version to not have a logo for a period of time after saved by a C-User computer, then automatically goes to an Excel Automation Help version)
        Sheets(AIListSheetName).Names("AILogoOnDate").RefersTo = Date + 60
        AIUserVersion = "CUser"
    ElseIf AllowCUserMode And Not ForceLogoOn And Date < Val(GetRange("AILogoOnDate")) Then
        'Not CUser right now, but was RECENTLY CALVAUTO) PC:
        AIUserVersion = "RecentCUser"
    'ElseIf Not ForceLogoOn And 0 < Val(Mid(Sheets(AIListSheetName).Names("AILogoOnDate"), 2)) Then   'OLD: was "ExcelAutomationHelp"
    ElseIf Not ForceLogoOn And ((InStr(ThisWorkbook.Names("AIUserVersion").RefersTo, "CUser") <> 0) Or (InStr(ThisWorkbook.Names("AIUserVersion").RefersTo, "ExcelAutomationHelp") <> 0)) Then   '...was:  ThisWorkbook.Names("AIUserVersion").RefersTo = "CUser" Or ThisWorkbook.Names("AIUserVersion").RefersTo = "RecentCUser"    ...'OLD: was "ExcelAutomationHelp"
        'Excel Logo ON:  ExcelAutomationHelp version
        AIUserVersion = "ExcelAutomationHelp"
    Else
        'JTF Logo ON:  (MOST CASES)
        AIUserVersion = "JTFAutomation"
        Sheets(AIListSheetName).Names("AILogoOnDate").RefersTo = 0
    End If
    
    ThisWorkbook.Names("AIUserVersion").RefersTo = AIUserVersion    'Used in formulas for changing text on sheets

    '==== now set LOGO Visability ====
    SetAIUserVersionSettings
    
    If OriginalEvents = True Then SetEventsScreenProtect True
    ThisWorkbook.Saved = OriginalSaveState
End Sub
Sub SetAIUserVersionSettings() 'LOGO and other aspects... CUser = "Certified" (as in, we allow turning logo off)
    If RunMode Then On Error Resume Next Else On Error GoTo 0
    'set MAIN LOGO and other aspects...
    Select Case AIUserVersion
        Case "CUser", "RecentCUser"
            'Set logo visibility
            Sheets(AIListSheetName).Shapes("Button7").Visible = False
            Sheets(AIListSheetName).Shapes("Button7a").Visible = False
            
            'Set Public variables
            SiteAddy = "AI List"
            SiteName = ""
            EmailAddy = ""
            SitePhone = ""
            RegistrationAddy = "AIList@ExcelAutomationHelp.com"
            FilePropAuthor = "AI List (c) 2013"
            FilePropComments = "AI List (c) 2013"
        Case "ExcelAutomationHelp"
            'Check to see if was last a CUser mode
            If FirstTimeConvertFromCUser <> "Yes" And Val(GetRange("AILogoOnDate")) > 0 Then
                FirstTimeConvertFromCUser = "Yes" 'not True/False because blank = False
                MsgBox "AUTOMATIC REBUILD: The AI List periodic auto-check discovered that an auto-rebuild is appropriate.  The AI List automation will now rebuild this file.  All typical user data will be preserved during this process.", , SiteAddy
            End If
            
            'Set logo visibility
            Sheets(AIListSheetName).Shapes("Button7").Visible = False
            Sheets(AIListSheetName).Shapes("Button7a").Visible = True
            
            
            'Turn on help sheet
            Sheets(HelpSheetName).Visible = xlSheetVisible
            
            'Set Public variables
            SiteAddy = "ExcelAutomationHelp.com"
            SiteName = "Excel Automation Help"
            EmailAddy = "Help@ExcelAutomationHelp.com"
            SitePhone = "315-805-HELP"
            RegistrationAddy = "AIList@ExcelAutomationHelp.com"
            FilePropAuthor = "ExcelAutomationHelp.com (c) 2013 | +1 315-805-HELP"
            FilePropComments = "ExcelAutomationHelp.com (c) 2013 | +1 315-805-HELP"
           
            'Check to see if was last a CUser mode
            If FirstTimeConvertFromCUser = "Yes" Then MsgBox "REBUILD DONE: The auto-rebuild process has been successful and all typical user data has been preserved.  Manually save this rebuilt file NOW to avoid future rebuilds.", , SiteAddy
            FirstTimeConvertFromCUser = "No"
            Sheets(AIListSheetName).Names("AILogoOnDate").RefersTo = 0

        Case Else 'JTFAutomation
            'Set logo visibility
            Sheets(AIListSheetName).Shapes("Button7").Visible = True
            Sheets(AIListSheetName).Shapes("Button7a").Visible = False
            
            'Turn on help sheet
            If Sheets(HelpSheetName).Visible <> xlSheetVisible Then Sheets(HelpSheetName).Visible = xlSheetVisible
            
            'Set Public variables
            SiteAddy = "JTFAutomation.com"
            SiteName = "JTF Automation"
            EmailAddy = "Help@JTFAutomation.com"
            SitePhone = "832-800-4JTF"
            RegistrationAddy = "AIList@JTFAutomation.com"
            FilePropAuthor = "JTFAutomation.com (c) 2013 | +1 832-800-4JTF"
            FilePropComments = "JTFAutomation.com (c) 2013 | +1 832-800-4JTF"
    End Select
    
    'set FILE PROPERTY
    ThisWorkbook.BuiltinDocumentProperties("Author") = FilePropAuthor
    ThisWorkbook.BuiltinDocumentProperties("Comments") = FilePropComments
    
    'set HELP sheet Logo and AUTOMATION Tab Content
    SetProtection False, HelpSheetName
    Select Case AIUserVersion
        Case "CUser", "RecentCUser", "ExcelAutomationHelp"
            DisplayNamedRangeRow "AIContactInfoJTFAutomation", False, HelpSheetName
            DisplayNamedRangeRow "AIContactInfoExcelAutomationHelp", True, HelpSheetName
            a5260SetAutomationTabContent False
            
        Case Else 'JTFAutomation
            DisplayNamedRangeRow "AIContactInfoJTFAutomation", True, HelpSheetName
            DisplayNamedRangeRow "AIContactInfoExcelAutomationHelp", False, HelpSheetName
            a5260SetAutomationTabContent True
    End Select
    SetProtection True, HelpSheetName
    
End Sub


' InQuest injected base64 decoded content
' x)br
' a&j)
' V+"nW
' :&j)
' YMjg
' YMjg
' zu)u
' zu)u
' zu)u
' Z+aN
' *'jQh
' V+"n)b
' j)M{
' V+"n)b
' lx	e
' &j)@u
' /xZ+
' *%Z'm
' *'jQh
' *'v+b
' L\z]
' L\z]
' xL\z]
' xL\z]
' z{Cj
' Qzj/y
' Qzj/y
' z{Uj
' L\zP.

INQUEST-PP=macro
