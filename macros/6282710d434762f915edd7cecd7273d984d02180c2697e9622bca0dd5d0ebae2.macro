Attribute VB_Name = "Connections"
'Cerrar conexi|fffd|n
Public Function CierraConn()
    vlConn.Close
    Set vlConn = Nothing
End Function

'Abrir conexi|fffd|n
Public Function AbreConn() As Boolean
On Error GoTo Fin
    Set vlConn = New ADODB.Connection
    vlConn.Provider = "SQLOLEDB"
    'DGR La cadena se modifica para que use las variables de conexion
    vlConn.ConnectionString = "Data Source=" & vgServidor & ";Initial Catalog=" & vgBaseDeDatos & ";User Id=" & vgUsuario & ";Password=" & vgPassword & ";"
    vlConn.CommandTimeout = 0
    
    vlConn.Open
    AbreConn = True
    Exit Function
Fin:
    AbreConn = False
End Function
Attribute VB_Name = "Exportacion"
' M|fffd|dulo Exportaci|fffd|n//
' DGR 25092014 - M|fffd|dulo para exportaci|fffd|n de Excel a PDF

' Crea un bot|fffd|n en pantalla para exportaci|fffd|n
Sub CreaBtnGuardar()
 ActiveSheet.Buttons.Add(676, 5, 85, 32).Select
 Selection.Name = "btnG"
 Selection.OnAction = "Salva_en_PDF"
 Selection.Characters.Text = "Guardar"
End Sub

' M|fffd|todo para guardar reporte como PDF
'<Observaciones>: Guarda solo la hoja activa
Sub Salva_en_PDF()
On Error GoTo ErrorHandler:
    Application.EnableEvents = False
    
    ActiveSheet.ExportAsFixedFormat _
    Type:=xlTypePDF, _
    Filename:="C:\SIIF\rpt\ReporteDinamico", _
    Quality:=xlQualityStandard, IncludeDocProperties:=True, _
    IgnorePrintAreas:=False, OpenAfterPublish:=True
    
    If Err.Number = 0 Then
        MsgBox DOCUMENTO_GUARDADO, vbInformation, REPORTE_DINAMICO
    End If
    
    Application.EnableEvents = True
Exit Sub
ErrorHandler:
 MsgBox ERROR_DOCUMENTO
Exit Sub
End Sub


' DGR 20150527 ClonaHojas
Sub ClonaHojas()
Dim WorkBk As Workbook
Set WorkBk = Application.ActiveWorkbook


Dim NombreHoja As String
NombreHoja = ActiveSheet.Name

 ' Permite la edicion de celdas en tabla din|fffd|mica
For j = 1 To Sheets(NombreHoja).PivotTables.Count
    If vgNivelSeguridad = 0 Then
        Sheets(NombreHoja).PivotTables(j).EnableDataValueEditing = False
    Else
        Sheets(NombreHoja).PivotTables(j).EnableDataValueEditing = True
    End If
Next j
 ActiveSheet.PivotTables("Tabla din|fffd|mica1").PivotCache.RefreshOnFileOpen = False
 file = Application.GetSaveAsFilename(InitialFileName:=file, FileFilter:="Excel Files(*.xlsx), *.xlsx, Excel 97-2003(*.xls), *.xls", Title:="Guarda Duplicado")
    
    If file = "" Then Exit Sub
    
    Set NewBook = Workbooks.Add
    With NewBook
        .Title = "Copia"
        .Subject = "Copia"
        .SaveAs Filename:=file
    End With
           
 WorkBk.Activate
 Sheets(WorkBk.ActiveSheet.Name).Select
 Sheets(WorkBk.ActiveSheet.Name).Copy Before:=NewBook.Sheets(1)
           
 ' Borra Bot|fffd|n
ActiveSheet.Shapes.Range(Array("Button 1")).Select
Selection.Delete
           
 NewBook.Save
                             
End Sub



Attribute VB_Name = "Funciones"
Option Explicit

Private Const clOneMask = 16515072            '000000 111111 111111 111111
Private Const clTwoMask = 258048            '111111 000000 111111 111111
Private Const clThreeMask = 4032            '111111 111111 000000 111111
Private Const clFourMask = 63               '111111 111111 111111 000000

Private Const clHighMask = 16711680         '11111111 00000000 00000000
Private Const clMidMask = 65280             '00000000 11111111 00000000
Private Const clLowMask = 255               '00000000 00000000 11111111

Private Const cl2Exp18 = 262144             '2 to the 18th power
Private Const cl2Exp12 = 4096               '2 to the 12th
Private Const cl2Exp6 = 64                  '2 to the 6th
Private Const cl2Exp8 = 256                 '2 to the 8th
Private Const cl2Exp16 = 65536              '2 to the 16th

'Codifica Encode64
Public Function Encode64(sString As String) As String

    Dim bTrans(63) As Byte, lPowers8(255) As Long, lPowers16(255) As Long, bOut() As Byte, bIn() As Byte
    Dim lChar As Long, lTrip As Long, iPad As Integer, lLen As Long, lTemp As Long, lPos As Long, lOutSize As Long

    For lTemp = 0 To 63                                 'Fill the translation table.
        Select Case lTemp
            Case 0 To 25
                bTrans(lTemp) = 65 + lTemp              'A - Z
            Case 26 To 51
                bTrans(lTemp) = 71 + lTemp              'a - z
            Case 52 To 61
                bTrans(lTemp) = lTemp - 4               '1 - 0
            Case 62
                bTrans(lTemp) = 43                      'Chr(43) = "+"
            Case 63
                bTrans(lTemp) = 47                      'Chr(47) = "/"
        End Select
    Next lTemp

    For lTemp = 0 To 255                                'Fill the 2^8 and 2^16 lookup tables.
        lPowers8(lTemp) = lTemp * cl2Exp8
        lPowers16(lTemp) = lTemp * cl2Exp16
    Next lTemp

    iPad = Len(sString) Mod 3                           'See if the length is divisible by 3
    If iPad Then                                        'If not, figure out the end pad and resize the input.
        iPad = 3 - iPad
        sString = sString & String(iPad, Chr(0))
    End If

    bIn = StrConv(sString, vbFromUnicode)               'Load the input string.
    lLen = ((UBound(bIn) + 1) \ 3) * 4                  'Length of resulting string.
    lTemp = lLen \ 72                                   'Added space for vbCrLfs.
    lOutSize = ((lTemp * 2) + lLen) - 1                 'Calculate the size of the output buffer.
    ReDim bOut(lOutSize)                                'Make the output buffer.

    lLen = 0                                            'Reusing this one, so reset it.

    For lChar = LBound(bIn) To UBound(bIn) Step 3
        lTrip = lPowers16(bIn(lChar)) + lPowers8(bIn(lChar + 1)) + bIn(lChar + 2)    'Combine the 3 bytes
        lTemp = lTrip And clOneMask                     'Mask for the first 6 bits
        bOut(lPos) = bTrans(lTemp \ cl2Exp18)           'Shift it down to the low 6 bits and get the value
        lTemp = lTrip And clTwoMask                     'Mask for the second set.
        bOut(lPos + 1) = bTrans(lTemp \ cl2Exp12)       'Shift it down and translate.
        lTemp = lTrip And clThreeMask                   'Mask for the third set.
        bOut(lPos + 2) = bTrans(lTemp \ cl2Exp6)        'Shift it down and translate.
        bOut(lPos + 3) = bTrans(lTrip And clFourMask)   'Mask for the low set.
        If lLen = 68 Then                               'Ready for a newline
            bOut(lPos + 4) = 13                         'Chr(13) = vbCr
            bOut(lPos + 5) = 10                         'Chr(10) = vbLf
            lLen = 0                                    'Reset the counter
            lPos = lPos + 6
        Else
            lLen = lLen + 4
            lPos = lPos + 4
        End If
    Next lChar

    If bOut(lOutSize) = 10 Then lOutSize = lOutSize - 2 'Shift the padding chars down if it ends with CrLf.

    If iPad = 1 Then                                    'Add the padding chars if any.
        bOut(lOutSize) = 61                             'Chr(61) = "="
    ElseIf iPad = 2 Then
        bOut(lOutSize) = 61
        bOut(lOutSize - 1) = 61
    End If

    Encode64 = StrConv(bOut, vbUnicode)                 'Convert back to a string and return it.

End Function

'Decodifica Encode64
Public Function Decode64(sString As String) As String
On Error Resume Next
    Dim bOut() As Byte, bIn() As Byte, bTrans(255) As Byte, lPowers6(63) As Long, lPowers12(63) As Long
    Dim lPowers18(63) As Long, lQuad As Long, iPad As Integer, lChar As Long, lPos As Long, sOut As String
    Dim lTemp As Long

    sString = Replace(sString, vbCr, vbNullString)      'Get rid of the vbCrLfs.  These could be in...
    sString = Replace(sString, vbLf, vbNullString)      'either order.

    lTemp = Len(sString) Mod 4                          'Test for valid input.
    If lTemp Then
        Call Err.Raise(vbObjectError, "MyDecode", "Input string is not valid Base64.")
    End If

    If InStrRev(sString, "==") Then                     'InStrRev is faster when you know it's at the end.
        iPad = 2                                        'Note:  These translate to 0, so you can leave them...
    ElseIf InStrRev(sString, "=") Then                  'in the string and just resize the output.
        iPad = 1
    End If

    For lTemp = 0 To 255                                'Fill the translation table.
        Select Case lTemp
            Case 65 To 90
                bTrans(lTemp) = lTemp - 65              'A - Z
            Case 97 To 122
                bTrans(lTemp) = lTemp - 71              'a - z
            Case 48 To 57
                bTrans(lTemp) = lTemp + 4               '1 - 0
            Case 43
                bTrans(lTemp) = 62                      'Chr(43) = "+"
            Case 47
                bTrans(lTemp) = 63                      'Chr(47) = "/"
        End Select
    Next lTemp

    For lTemp = 0 To 63                                 'Fill the 2^6, 2^12, and 2^18 lookup tables.
        lPowers6(lTemp) = lTemp * cl2Exp6
        lPowers12(lTemp) = lTemp * cl2Exp12
        lPowers18(lTemp) = lTemp * cl2Exp18
    Next lTemp

    bIn = StrConv(sString, vbFromUnicode)               'Load the input byte array.
    ReDim bOut((((UBound(bIn) + 1) \ 4) * 3) - 1)       'Prepare the output buffer.

    For lChar = 0 To UBound(bIn) Step 4
        lQuad = lPowers18(bTrans(bIn(lChar))) + lPowers12(bTrans(bIn(lChar + 1))) + _
                lPowers6(bTrans(bIn(lChar + 2))) + bTrans(bIn(lChar + 3))           'Rebuild the bits.
        lTemp = lQuad And clHighMask                    'Mask for the first byte
        bOut(lPos) = lTemp \ cl2Exp16                   'Shift it down
        lTemp = lQuad And clMidMask                     'Mask for the second byte
        bOut(lPos + 1) = lTemp \ cl2Exp8                'Shift it down
        bOut(lPos + 2) = lQuad And clLowMask            'Mask for the third byte
        lPos = lPos + 3
    Next lChar

    sOut = StrConv(bOut, vbUnicode)                     'Convert back to a string.
    If iPad Then sOut = Left$(sOut, Len(sOut) - iPad)   'Chop off any extra bytes.
    Decode64 = sOut

End Function


'DGR 20140530 FIX DECODE Base64
'-------------------------------
'Dado que al convertir una cadena de caracteres usando el sistema de enumeraci|fffd|n "Base64" se pierden caracteres especiales
'Se desarrolla esta funci|fffd|n que recupera y remplaza aquellos caracteres que se perdieron durante la decodificaci|fffd|n
Public Function FixDecode_Base64(DecodeBase64 As String) As String
DecodeBase64 = Replace$(DecodeBase64, "|f1|", "|fffd|")
DecodeBase64 = Replace$(DecodeBase64, "|d1|", "|fffd|")

DecodeBase64 = Replace$(DecodeBase64, "|e1|", "|fffd|")
DecodeBase64 = Replace$(DecodeBase64, "|e9|", "|fffd|")
DecodeBase64 = Replace$(DecodeBase64, "|ed|", "|fffd|")
DecodeBase64 = Replace$(DecodeBase64, "|f3|", "|fffd|")
DecodeBase64 = Replace$(DecodeBase64, "|fa|", "|fffd|")

DecodeBase64 = Replace$(DecodeBase64, "|c1|", "|fffd|")
DecodeBase64 = Replace$(DecodeBase64, "|c9|", "|fffd|")
DecodeBase64 = Replace$(DecodeBase64, "|cd|", "|fffd|")
DecodeBase64 = Replace$(DecodeBase64, "|d3|", "|fffd|")
DecodeBase64 = Replace$(DecodeBase64, "|da|", "|fffd|")

DecodeBase64 = Replace$(DecodeBase64, "|bf|", "|fffd|")

FixDecode_Base64 = DecodeBase64
End Function
'-------------------------------




Attribute VB_Name = "Hoja1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Hoja2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Hoja5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "MessageConstants"
Public Const ERROR_EJECUCION As String = "Error de ejecucion: "
Public Const ERROR_CONEXION As String = "No fue posible establecer la conexion a la BD, validar parametros de conexi|fffd|n..."
Public Const ATENCION As String = "Atenci|fffd|n..."
Public Const NO_SE_ENCONTRO_CONEXION As String = "No han sido encontrados los datos de conexion, el reporte no puede ejecutarse de manera aislada"
Public Const ACCESO_REPORTE_RESTRINGIDO As String = "El acceso a este reporte esta restringido"
Public Const CARGANDO_BASE_DATOS As String = "Cargando Datos de la Base de Datos"
Public Const PERIODOMENSUAL As String = "MENSUAL"
Public Const ERROR_DOCUMENTO As String = "Error al guardar el documento"
Public Const DOCUMENTO_GUARDADO As String = "El documento ha sido guardado en 'C:\SIIF\rpt\'"
Public Const REPORTE_DINAMICO As String = "SIIF Reporte Din|fffd|mico"
Public Const REPORTE_FORMATO_PDF As String = "Para publicar el reporte en formato 'PDF' por favor utilice el bot|fffd|n"
Public Const CREANDO_TABLA As String = "Creando tabla para los reportes..."
Public Const ACTUALIZANDO_REPORTES As String = "Actualizando todos los reportes..."
Attribute VB_Name = "ModificaEncabezado"
'ENCABEZADOS
Public nombreColumnaPresupuestoAnual As String
Public nombreColumnaMesFinal As String
Public nombreColumnaAcumuladoMesInicialMesFinal As String

Public Sub EncabezadoPresupuestoAnual(columna As String)
   nombreColumnaPresupuestoAnual = "PRESUPUESTO" + vbCrLf + "ANUAL"
   Hoja1.Range(columna).Value = nombreColumnaPresupuestoAnual
End Sub

Public Sub EncabezadoMesFinal(columna As String)
   nombreColumnaMesFinal = vgMesFinalDescripcion
   Hoja1.Range(columna).Value = nombreColumnaMesFinal
End Sub

Public Sub EncabezadoAcumuladoMesInicialMesFinal(columna As String)
   nombreColumnaAcumuladoMesInicialMesFinal = "ACUM. RECAUD." + vbCrLf + Mid$(vgMesInicialDescripcion, 1, 3) + " - " + Mid$(vgMesFinalDescripcion, 1, 3)
   Hoja1.Range(columna).Value = nombreColumnaAcumuladoMesInicialMesFinal
End Sub
Attribute VB_Name = "Periodo"
Dim rec As ADODB.Recordset
Dim cmd As ADODB.Command
Dim recordsAffected As Long
Dim columna As String
Dim contador As Integer
Dim periodoLimite As Integer

'JAP 201406271442: Funci|fffd|n para obtener los a|fffd|os de trabajo configurados.
Public Function getAnios() As ADODB.Recordset

Set rec = New ADODB.Recordset

On Error GoTo ErrorHand:
  
    If Not AbreConn Then
        MsgBox ERROR_CONEXION, vbInformation, ATENCION
        Exit Function
    End If
    
  Set cmd = New ADODB.Command
    
    With cmd
        .ActiveConnection = vlConn
        .CommandText = "spCtapub_GetCveDef"
        .CommandType = ADODB.CommandTypeEnum.adCmdStoredProc
        .CommandTimeout = 0
    End With
    
    rec.Open cmd.Execute(recordsAffected)
    Set getAnios = rec
    
    CierraConn
Exit Function

ErrorHand:
    On Error Resume Next
    Unload frmShow
    MsgBox ERROR_EJECUCION & Err.Description, vbCritical, ATENCION
End Function

'JAP 201406271451: M|fffd|todo para cargar el comboBox de los A|fffd|os.
Public Sub cargaComboAnioPeriodo()
    
    Set rec = New ADODB.Recordset
    columna = "Anio"
    contador = 0
    
   Set rec = getAnios
    
On Error GoTo ErrorHand:
    
    frmLogin.cmbAnio.Clear
    
    Do While Not rec.EOF
        frmLogin.cmbAnio.AddItem rec(columna)
        rec.MoveNext
        contador = 0
    Loop
    
    frmLogin.cmbAnio.ListIndex = contador
    Exit Sub
    
ErrorHand:
    On Error Resume Next
    Unload frmShow
    MsgBox ERROR_EJECUCION & Err.Description, vbCritical, ATENCION
End Sub

'JAP 201406271650: Funci|fffd|n para obtener los tipos de periodo configurados.
Public Function getTipoPeriodo() As ADODB.Recordset

Set rec = New ADODB.Recordset
periodoLimite = 5

On Error GoTo ErrorHand:
  
    If Not AbreConn Then
        MsgBox ERROR_CONEXION, vbInformation, ATENCION
        Exit Function
    End If
    
  Set cmd = New ADODB.Command
    
    With cmd
        .ActiveConnection = vlConn
        .CommandText = "spCtapub_TipoPeriodo"
        .CommandType = ADODB.CommandTypeEnum.adCmdStoredProc
        .Parameters.Append cmd.CreateParameter(|fffd|limiteCalendariza|fffd|, adInteger, adParamInput, , periodoLimite)
        .CommandTimeout = 0
    End With
    
    rec.Open cmd.Execute(recordsAffected)
    Set getTipoPeriodo = rec
    
    CierraConn
Exit Function

ErrorHand:
    On Error Resume Next
    Unload frmShow
    MsgBox ERROR_EJECUCION & Err.Description, vbCritical, ATENCION
End Function

'JAP 201406271649: M|fffd|todo para cargar el comboBox de Tipo periodo.
Public Sub cargaTipoPeriodo(ByVal comboBox As comboBox)

    Dim contador As Integer
    Set rec = New ADODB.Recordset
    columna = "descripcion"
    
   Set rec = getTipoPeriodo
    
On Error GoTo ErrorHand:
    
    frmLogin.comboBox.Clear
    
    Do While Not rec.EOF
        frmLogin.comboBox.AddItem rec(columna)
        rec.MoveNext
    Loop
    
    frmLogin.comboBox.ListIndex = 0
    Exit Sub
    
ErrorHand:
    On Error Resume Next
    Unload frmShow
    MsgBox ERROR_EJECUCION & Err.Description, vbCritical, ATENCION
End Sub

'JAP 201406271906: Funci|fffd|n para obtener el detalle del periodo que se recibe como par|fffd|metro.
Public Function getPeriodo(Periodo As String) As ADODB.Recordset

Set rec = New ADODB.Recordset

On Error GoTo ErrorHand:
  
    If Not AbreConn Then
        MsgBox ERROR_CONEXION, vbInformation, ATENCION
        Exit Function
    End If
    
  Set cmd = New ADODB.Command
    
    With cmd
        .ActiveConnection = vlConn
        .CommandText = "spCtapub_GetPeriodoPorDescripcion"
        .CommandType = ADODB.CommandTypeEnum.adCmdStoredProc
        .Parameters.Append cmd.CreateParameter("TipoPeriodo", adVarChar, adParamInput, 25, Periodo)
        .CommandTimeout = 0
    End With
    
    rec.Open cmd.Execute(recordsAffected)
    Set getPeriodo = rec
    
    CierraConn
Exit Function

ErrorHand:
    On Error Resume Next
    Unload frmShow
    MsgBox ERROR_EJECUCION & Err.Description, vbCritical, ATENCION
End Function

'JAP 201406271649: M|fffd|todo para cargar el comboBox de Periodo.
Public Sub cargaPeriodo(tipoPeriodo As String)
    
    Set rec = New ADODB.Recordset
    columna = "descripcion"
    
   Set rec = getPeriodo(tipoPeriodo)
    
On Error GoTo ErrorHand:
    
    frmLogin.cmbPeriodo.Clear
    
    Do While Not rec.EOF
        frmLogin.cmbPeriodo.AddItem rec(columna)
        rec.MoveNext
    Loop
    
    frmLogin.cmbPeriodo.ListIndex = 0
    Exit Sub
    
ErrorHand:
    On Error Resume Next
    Unload frmShow
    MsgBox ERROR_EJECUCION & Err.Description, vbCritical, ATENCION
End Sub

'JAP 201406300945: M|fffd|todo para cargar el comboBox de Tipo periodo.
Public Sub cargaMesComboBox(ByVal comboBox As comboBox)
    
    Set rec = New ADODB.Recordset
    columna = "descripcion"
    
    Set rec = getPeriodo(PERIODOMENSUAL)
    
On Error GoTo ErrorHand:
    
    frmLogin.comboBox.Clear
    
    Do While Not rec.EOF
        frmLogin.comboBox.AddItem rec(columna)
        rec.MoveNext
    Loop
    
    frmLogin.comboBox.ListIndex = 0
    Exit Sub
    
ErrorHand:
    On Error Resume Next
    Unload frmShow
    MsgBox ERROR_EJECUCION & Err.Description, vbCritical, ATENCION
End Sub

'JAP 201406301419: Funci|fffd|n para obtener el mes inicial y el mes final del periodo que se recibe como par|fffd|metro.
Public Function getMesIncialMesFinal(Periodo As String) As ADODB.Recordset

Set rec = New ADODB.Recordset

On Error GoTo ErrorHand:
  
    If Not AbreConn Then
        MsgBox ERROR_CONEXION, vbInformation, ATENCION
        Exit Function
    End If
    
  Set cmd = New ADODB.Command
    
    With cmd
        .ActiveConnection = vlConn
        .CommandText = "spCtapub_GetMesIncialMesFinalPorPeriodo"
        .CommandType = ADODB.CommandTypeEnum.adCmdStoredProc
        .Parameters.Append cmd.CreateParameter("Periodo", adVarChar, adParamInput, 25, Periodo)
        .CommandTimeout = 0
    End With
    
    rec.Open cmd.Execute(recordsAffected)
    Set getMesIncialMesFinal = rec
    
    CierraConn
Exit Function

ErrorHand:
    On Error Resume Next
    Unload frmShow
    MsgBox ERROR_EJECUCION & Err.Description, vbCritical, ATENCION
End Function

'JAP 201406301424: Procedimiento para guardar el valor del mes inicial y el mes final del periodo en variables globales.
Public Sub cargaMesInicialMesFinal(Periodo As String)
        
    Set rec = New ADODB.Recordset
    Set rec = getMesIncialMesFinal(Periodo)
    
    vgMesInicial = rec("MesInicial").Value
    vgMesFinal = rec("MesFinal").Value
        
End Sub

'JAP 201407030922: Macro para ocultar la primera columna del reporte.
Public Sub OcultaColumna()
'
' OcultaColumna Macro
' CAMBIA EL COLOR DE LETRA DE LA PRIMERA COLUMNA A COLOR BLANCO.
'
    Range("A2").Select
    With Selection.Font
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = 0
    End With
    ActiveSheet.PivotTables("Tabla din|fffd|mica1").PivotSelect "Cuenta[All]", _
        xlLabelOnly, True
    With Selection.Font
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = 0
    End With
    ActiveWindow.SmallScroll Down:=-15
    
    Cells.Select
    Cells.EntireColumn.AutoFit
    
End Sub


Attribute VB_Name = "Seguridad"
' M|fffd|dulo Seguridad//
' DGR 25092014 - M|fffd|dulo para obtener y aplicar el nivel de seguridad configurado para el reporte

' Desactiva mensajes (Alertas) de excel
Private Sub DesactivaAlertas()
    Application.DisplayAlerts = False
End Sub

' Oculta el Ribbon (Barra de herramientas de Excel)
Private Sub OcultaRibbon()
On Error GoTo ErrorHand:
    If Application.Version > 12 Then
        Application.ExecuteExcel4Macro ("Show.ToolBar(""Ribbon"",False)")
    Else
        For Each cb In Application.CommandBars
            cb.Enabled = False
            Next cb
    End If
ErrorHand:
On Error Resume Next
End Sub

' Desactiva combinaci|fffd|n de teclas para bloquear su uso
Private Sub DesactivaAtajos()
    'Application.OnKey "%{F11}", "";
    Application.OnKey "^c", ""
    Application.OnKey "^x", ""
    Application.OnKey "^v", ""
    Application.OnKey "+{Insert}", ""
    Application.OnKey "+{Del}", ""
    Application.OnKey "^{Insert}", ""
    Application.OnKey "+{Insert}", ""
End Sub

' DGR 20140925 ObtieneNivelSeguridad - Obtiene nivel de seguridad configurado para el perfil del usuario
' <Parametro> idReporte - Identificador del reporte
' <Parametro> idcvedef - Identificador para el a|fffd|o de trabajo
' <return> Devuelve un entero con el nivel de acceso
Private Function ObtieneNivelSeguridad(ByVal idReporte As Integer, ByVal idcvedef As Integer) As Integer
Dim NivelSeg As Integer

On Error GoTo ErrorHand:
  Set rec = New ADODB.Recordset
  
    ' Abre Conexion
    If Not AbreConn Then
        MsgBox ERROR_CONEXION, vbInformation, ATENCION
        Exit Function
    End If
    
  Set cmd = New ADODB.Command
    
    With cmd
        .ActiveConnection = vlConn
        .CommandText = "ABSReporteObtieneNiveldeSeguridad"
        .CommandType = ADODB.CommandTypeEnum.adCmdStoredProc
        .CommandTimeout = 0
    End With
    
    cmd.Parameters.Refresh
    cmd.Parameters.Item("@idReporte").Value = idReporte
    cmd.Parameters.Item("@idcvedef").Value = idcvedef
    
    rec.Open cmd.Execute(recordsAffected)
    
    NivelSeg = rec(0).Value
    
    ObtieneNivelSeguridad = NivelSeg
    
    ' Cierra Conexion
    CierraConn
    
Exit Function

ErrorHand:
    On Error Resume Next
    NivelSeg = -1
    ObtieneNivelSeguridad = NivelSeg
End Function

' DGR 20140925 AplicaSeguridad - Aplica la seguridad al reporte
' <Parametro> idReporte - Identificador del reporte
' <Parametro> idcvedef - Identificador para el a|fffd|o de trabajo
Public Function AplicaSeguridad(ByVal idReporte As Integer, ByVal idcvedef As Integer) As Integer
    Dim NivelSeguridad As Integer
    
    NivelSeguridad = ObtieneNivelSeguridad(idReporte, idcvedef)
    
    ' Nivel de Acceso 0 (Solo Lectura).
    If NivelSeguridad = 0 Then
        'Metodos de bloqueo a Archivo.
        '------------------------------
        DesactivaAlertas
        DesactivaAtajos
        OcultaRibbon
        '------------------------------
        
        AplicaSeguridad = 0
    Else
        AplicaSeguridad = NivelSeguridad
    End If
End Function

' DGR 20140929 BloqueaHojas - Proteje las hojas con contrase|fffd|a para bloquear cambios.
Public Sub BloqueaHojas()
 Dim NumHojas As Integer
 Dim i As Integer
 ' Obtiene el numero de hojas del libro actual.
 NumHojas = ActiveWorkbook.Worksheets.Count
 
 ' Recorre y bloquea con contrase|fffd|a cada hoja del libro.
 For i = 1 To NumHojas
    ActiveWorkbook.Worksheets(i).Protect "ABSReporteSIIF2014", True, True, True, True, True, True, False, False, False, False, False, False, False, False, True
 Next i
 
 'Se deshabilitan alertas
 DesactivaAlertas
End Sub




Attribute VB_Name = "SiempreVisible"
' M|fffd|dulo SiempreVisible//
' DGR/RTV - M|fffd|dulo para hacer que la ventana (Formularios de excel) se muestren siempre por encima de las demas ventanas

Option Explicit
#If VBA7 And Win64 Then
Public Declare PtrSafe Function FindWindow Lib "user32.dll" Alias "FindWindowA" ( _
                    ByVal lpClassName As String, _
                    ByVal lpWindowName As String) As Long
                    
Public Declare PtrSafe Function SetWindowPos Lib "user32" ( _
                    ByVal hwnd As LongPtr, _
                    ByVal hWndInsertAfter As LongPtr, _
                    ByVal x As LongPtr, _
                    ByVal Y As LongPtr, _
                    ByVal cx As LongPtr, _
                    ByVal cy As LongPtr, _
                    ByVal wFlags As Long) As LongPtr
#Else
Public Declare Function FindWindow Lib "user32.dll" Alias "FindWindowA" ( _
                    ByVal lpClassName As String, _
                    ByVal lpWindowName As String) As Long
                    
Public Declare Function SetWindowPos Lib "user32" ( _
                    ByVal hwnd As Long, _
                    ByVal hWndInsertAfter As Long, _
                    ByVal x As Long, _
                    ByVal Y As Long, _
                    ByVal cx As Long, _
                    ByVal cy As Long, _
                    ByVal wFlags As Long) As Long
#End If
Public Const HWND_TOPMOST = -1
Public Const HWND_NOTOPMOST = -2
Public Const SWP_NOMOVE = &H2
Public Const SWP_NOSIZE = &H1
Public mlHwnd As Long









Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' Evento Open
' En cuanto abre el reporte aplica seguridad y obtiene par|fffd|metros de conexi|fffd|n.
Private Sub Workbook_Open()
     ActiveWorkbook.Protect "ABSReporteSIIF2014", False, False
            
    inicializar.Recargavaloresconexion
    
    limpiaFuenteDeDatos
    'ActiveWorkbook.Protect "ABSReporteSIIF2014", False, False
    
    RefrescarReporte
 
    ' Aplica proteccion a todo el libro
    ActiveWorkbook.Protect "ABSReporteSIIF2014", True, True

End Sub

' Evento BeforeSave
' Bloqueo para no permitir al usuario guardar el libro
Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
' Verifica el nivel de seguridad, Si vgNivelSeguridad = 0 (Acceso S|fffd|lo Lectura).
 If vgNivelSeguridad = 0 Then
    If SaveAsUI = True Then Cancel = True
    Cancel = True
    ' Utiliza evento de M|fffd|dulo Exportaci|fffd|n para crear archivo .PDF
    Exportacion.Salva_en_PDF
 Else
    ' Se bloquea al usuario la opci|fffd|n de guardar para evitar la modificaciones al archivo
'    If SaveAsUI = True Then Cancel = True
'    Cancel = True
 End If
End Sub

' Evento BeforePrint
Private Sub Workbook_BeforePrint(Cancel As Boolean)
' Verifica el nivel de seguridad, Si vgNivelSeguridad = 0 (Acceso S|fffd|lo Lectura).
 If vgNivelSeguridad = 0 Then
    Cancel = True
    MsgBox "Para publicar el reporte en formato 'PDF' por favor utilice el bot|fffd|n" & vbNewLine & "'Guardar'", vbInformation, REPORTE_DINAMICO
    Application.DisplayAlerts = False
    Exit Sub
    Else
    'areadeimpresion
 End If
End Sub

' Evento BeforeClose
' Se desactivan las alertas para no sugerir al usuario guardar los cambios.
Private Sub Workbook_BeforeClose(Cancel As Boolean)
 ActiveWorkbook.Close savechanges:=False
 ' Se forza el cierre de la aplicaci|fffd|n, no solo del libro.
 Application.Quit
 SendKeys ("%{f4}")
End Sub

' Evento NewSheet
' Bloqueo para no permitir al usuario agregar hojas adicionales al libro
Private Sub Workbook_NewSheet(ByVal Sh As Object)
' Verifica el nivel de seguridad, Si vgNivelSeguridad = 0 (Acceso S|fffd|lo Lectura).
 If vgNivelSeguridad = 0 Then
    Application.DisplayAlerts = False
    Sh.Delete
 End If
End Sub

' Bloquea al usuario el men|fffd| del click derecho del mouse.
 Private Sub Workbook_SheetBeforeRightClick(ByVal Sh As Object, ByVal Target As Range, Cancel As Boolean)
 'Verifica el nivel de seguridad, Si vgNivelSeguridad = 0 (Acceso S|fffd|lo Lectura).
If vgNivelSeguridad = 0 Then
 Cancel = True
End If
End Sub

' Evento BeforeXmlExport
' Bloquea al usuario la opcion de exportaci|fffd|n XML.
Private Sub Workbook_BeforeXmlExport(ByVal Map As XmlMap, ByVal Url As String, Cancel As Boolean)
' Verifica el nivel de seguridad, Si vgNivelSeguridad = 0 (Acceso S|fffd|lo Lectura).
 If vgNivelSeguridad = 0 Then
    Cancel = True
 End If
End Sub

 Function areadeimpresion()
    Dim RowEnc As Integer
    RowEnc = NoDeFilasDeFiltros
    Cells(RowEnc + 1, 1).Select
    
    Range(Selection, ActiveCell.SpecialCells(xlLastCell)).Select
    
    ActiveSheet.PageSetup.PrintArea = Range(Selection, ActiveCell.SpecialCells(xlLastCell)).CurrentRegion.Address
    
    With ActiveSheet.PageSetup
       .PrintTitleRows = "$1:$3"
        .PrintTitleColumns = "$A:$A"
    End With
    
End Function

Private Sub limpiaFuenteDeDatos()
Hoja5.Cells.ClearContents
End Sub



Attribute VB_Name = "frmLogin"
Attribute VB_Base = "0{612FBBA1-F36D-44CE-BCCF-99F15238CEFF}{5D510938-D386-4DCB-9AF6-82D169D1CDCA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private verificaValidacion As Boolean

Private Sub cmbAnio_Change()

End Sub

Private Sub cmdAceptar_Click()

ValidaFecha

If verificaValidacion = False Then
    Exit Sub
End If

If inicializar.vgServidor = "" Then
    inicializar.Recargavaloresconexion
End If

vgAnio = frmLogin.cmbAnio.Text

If vgAnio = "2015" Then
    vgidcvedef = 1
ElseIf vgAnio = "2014" Then
    vgidcvedef = 2
ElseIf vgAnio = "2013" Then
    vgidcvedef = 3

End If

fraAtencion.Visible = True
    lblMensaje.Caption = "Abriendo conexion con la BD."
    
    If Not AbreConn Then
        fraAtencion.Visible = False
        MsgBox "No se puedo establecer la conexion...", vbInformation, "Atenci|fffd|n..."
        
    Else
        Dim vlrs As New ADODB.Recordset
        vlrs.Open "select valorstring from AbsParametro where idparametro=1", vlConn, adOpenForwardOnly, adLockReadOnly
        SaveSetting "Excel", "Reg", "ExcelP3", vlrs!valorstring
        SaveSetting "Excel", "Reg", "ExcelP6", "Ampliaciones y Reducciones"
        vgConCorrecta = True
        Encabezado1 = vlrs!valorstring
        fraAtencion.Visible = False
        mesInicial = cmbMesInicial.ListIndex + 1
        mesFinal = cmbMesFinal.ListIndex + 1
        vgMesInicialDescripcion = cmbMesInicial.Text
        vgMesFinalDescripcion = cmbMesFinal.Text
        CalculaDiaFinal
        Unload Me
    End If
    
 End Sub
 
Private Sub cmdSalir_Click()
    Application.DisplayAlerts = False
   Application.Workbooks.Close
End Sub

Private Sub ValidaFecha()

 If (cmbAnio.Text = "" Or cmbMesFinal.Text = "" Or cmbMesInicial.Text = "") Then
  MsgBox "Se encuentran Campos Vacios llene la informacion necesaria"
  verificaValidacion = False
  Exit Sub
 End If

If cmbMesInicial.ListIndex > cmbMesFinal.ListIndex Then
 MsgBox "La fecha inicial no puede ser menor que la final"
   bandera = False
 Exit Sub
 End If
  
  
  Anio = cmbAnio.Text
  vgMesInicial = cmbMesInicial.ListIndex + 1
  vgMesFinal = cmbMesFinal.ListIndex + 1
  verificaValidacion = True
  
End Sub


Private Sub cargaMesInicial(ByVal cb As comboBox)
cb.AddItem "ENERO"
cb.AddItem "FEBRERO"
cb.AddItem "MARZO"
cb.AddItem "ABRIL"
cb.AddItem "MAYO"
cb.AddItem "JUNIO"
cb.AddItem "JULIO"
cb.AddItem "AGOSTO"
cb.AddItem "SEPTIEMBRE"
cb.AddItem "OCTUBRE"
cb.AddItem "NOVIEMBRE"
cb.AddItem "DICIEMBRE"

End Sub

Private Sub UserForm_Initialize()

    PosicionInicialFormulario
    
    cargaMesInicial cmbMesInicial
    cargaMesInicial cmbMesFinal
    Periodo.cargaComboAnioPeriodo
    
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
If CloseMode <> 1 Then
   Cancel = 1
End If
    
End Sub

Private Sub CalculaDiaFinal()
Select Case cmbMesFinal.Text
        Case "ENERO", "MARZO", "MAYO", "JULIO", "AGOSTO", "OCTUBRE", "DICIEMBRE"
        diaFinal = 31
        
        Case "ABRIL", "JUNIO", "SEPTIEMBRE", "NOVIEMBRE"
        diaFinal = 30
        
        Case "FEBRERO"
              
         If vgAnio Mod 400 = 0 Then
          checkBisiesto = True
         ElseIf vgAnio Mod 100 = 0 Then
         checkBisiesto = False
          ElseIf vgAnio Mod 4 = 0 Then
           checkBisiesto = True
              Else
           checkBisiesto = False
          End If

          If checkBisiesto = True Then
            diaFinal = 29
          Else
            diaFinal = 28
          End If
    End Select

End Sub

Private Sub PosicionInicialFormulario()
    mlHwnd = FindWindow(vbNullString, Me.Caption)
    Do While mlHwnd = 0
        mlHwnd = FindWindow(vbNullString, Me.Caption)
        DoEvents
    Loop
    'Configuraci|fffd|n de la ventana la pone siempre al frente
    DoEvents
    SetWindowPos mlHwnd, HWND_TOPMOST, 0, 0, 0, 0, SWP_NOMOVE Or SWP_NOSIZE
End Sub

Attribute VB_Name = "frmShow"
Attribute VB_Base = "0{76A3F25A-AEF4-4591-9AAD-89E0D7A2D5CB}{0AF05484-7FF4-4992-97A5-392C4FEE44F5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub lblMensaje_Click()

End Sub
Attribute VB_Name = "inicializar"
Public vlConn As ADODB.Connection
Public Const HojaFuenteDeDatos As String = "Fuente de Datos"
Public vlTablaResultado As String

Public Encabezado1 As String
Public Encabezado2 As String
Public Encabezado3 As String
Public Encabezado4 As String
Public Encabezado5 As String
Public Encabezado6 As String

'DGR 20140926 - ABSReporte Seguridad//-----------------------------
Public vgServidor As String
Public vgBaseDeDatos As String
Public vgUsuario As String
Public vgPassword As String
Public vgidReporte As String
Public vgidcvedef As String
Public vgNivelSeguridad As Integer
'------------------------------------------------------------------
Public vgConCorrecta As Boolean
Public vgAnio As Integer
Public vgMostrarFechaEnEncabezadoDeReporte As Boolean
Public vgPedirMesesenLogin As Boolean
Public vgPedirAnioEnLogin As Boolean
Public vgMesInicial As Integer
Public vgMesFinal As Integer
Public vgCargando As Boolean
Public VlSQL As String
Public vgPorPeriodo As Boolean
Public vgEncabezado3PorPeriodo As String

'DESCRIPCION MES INICIAL Y MES FINAL
Public vgMesInicialDescripcion As String
Public vgMesFinalDescripcion As String

Public diaFinal As Integer

Public Sub RefrescarReporte()
    
    'DGR Valida parametros de Conexi|fffd|n//-------------------------------
    'Si los valores se encuentran vacios intenta cargarlos
    If vgServidor = "" And vgServidor = " " Then
        Recargavaloresconexion
    End If
    'Si aun as|fffd| no se obtienen valores de conexion, por seguridad se aborta el proceso
    If vgServidor = "" Then
        MsgBox NO_SE_ENCONTRO_CONEXION, vbInformation, ATENCION
        Exit Sub
    End If
    
    'DGR 20140926 - ABSReporte Seguridad//-----------------------------
    '------------------------------------------------------------------
    'Obtiene nivel de seguridad configurado para el perfil del usuario
    vgNivelSeguridad = Seguridad.AplicaSeguridad(vgidReporte, vgidcvedef)
    If vgNivelSeguridad = -1 Then
        MsgBox ACCESO_REPORTE_RESTRINGIDO, vbInformation, ATENCION
        Exit Sub
    End If
    '------------------------------------------------------------------
        

        
    ' <codigo>
    vgMostrarFechaEnEncabezadoDeReporte = True
    vgPedirAnioEnLogin = True
    vgPedirMesesenLogin = True
    Application.ScreenUpdating = False
    Application.Visible = False
        
    'CargaFirmas
    frmLogin.Show vbModal
    
    CargaActualizaTablaReporte
    CargaReporte
    Actualizadatos
    
    If Not AbreConn Then
        MsgBox ERROR_CONEXION, vbInformation, ATENCION
        Exit Sub
    End If
    
    CierraConn
    Unload frmShow
    Application.ScreenUpdating = True
    Application.Visible = True
    
    '    DGR 20140929 - ABSReporte Seguridad//-----------------------------
    '------------------------------------------------------------------
    ' Si vgNivelSeguridad = 0 (Acceso S|fffd|lo Lectura)
    If vgNivelSeguridad = 0 Then
    '    Bloquea con contrase|fffd|a todas las hojas del libro
        'Seguridad.BloqueaHojas
        Exportacion.CreaBtnGuardar
    End If
   ' ------------------------------------------------------------------
    
    Range("A1").Select
End Sub

Public Sub Recargavaloresconexion()

    ' Se decodifican los parametros de conexion
    vgServidor = Funciones.Decode64(GetSetting("Excel", "Reg", "ExcelP4"))
    vgBaseDeDatos = Funciones.Decode64(GetSetting("Excel", "Reg", "ExcelP5"))
    vgUsuario = Funciones.Decode64(GetSetting("Excel", "Reg", "ExcelP2"))
    vgPassword = Funciones.Decode64(GetSetting("Excel", "Reg", "ExcelP1"))
    
    ' Fix de caracteres especiales
    vgServidor = Funciones.FixDecode_Base64(vgServidor)
    vgBaseDeDatos = Funciones.FixDecode_Base64(vgBaseDeDatos)
    vgUsuario = Funciones.FixDecode_Base64(vgUsuario)
    vgPassword = Funciones.FixDecode_Base64(vgPassword)
    
    ' Obtiene identificador de reporte y idcvedef
    vgidReporte = GetSetting("Excel", "Reg", "idReporte")
    vgidcvedef = GetSetting("Excel", "Reg", "idcvedef")
    
    ' Se limpia el registro
    SaveSetting "Excel", "Reg", "ExcelP1", ""
    SaveSetting "Excel", "Reg", "ExcelP2", ""
    SaveSetting "Excel", "Reg", "ExcelP4", ""
    SaveSetting "Excel", "Reg", "ExcelP5", ""
    SaveSetting "Excel", "Reg", "idReporte", ""
    SaveSetting "Excel", "Reg", "idcvedef", ""
    
End Sub

Private Sub CargaActualizaTablaReporte()
    
    On Error GoTo ErrorHand:
    
    If Not AbreConn Then
        MsgBox ERROR_CONEXION, vbInformation, ATENCION
        Exit Sub
    End If
    frmShow.lblMensaje.Caption = CREANDO_TABLA
    frmShow.Show 0
    DoEvents
    vlTablaResultado = "tmpTablaResultado" & CLng(Timer * 100)
    
    
    VlSQL = ""
    VlSQL = " set xact_abort on"
    VlSQL = VlSQL & Chr(13) & " BEGIN TRAN "
    VlSQL = VlSQL & Chr(13) & "  if exists(select * from sys.tables where name='" & vlTablaResultado & "')"
    VlSQL = VlSQL & Chr(13) & "  drop table " & vlTablaResultado
    VlSQL = VlSQL & Chr(13) & "CREATE TABLE " & vlTablaResultado
    VlSQL = VlSQL & Chr(13) & "  ("
    VlSQL = VlSQL & Chr(13) & " [tipoProgramable] Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " [idclave] Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " [clave] Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " CveDes_OG1 Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " id_OG1    Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " Clave_OG1    Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " Descripcion_OG1  Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " CveDes_OG2   Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " id_OG2   Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " Clave_OG2    Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " Descripcion_OG2  Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " CveDes_OG3   Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " id_OG3   Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " Clave_OG3    Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " Descripcion_OG3  Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " CveDes_OG4   Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " id_OG4   Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " Clave_OG4    Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " Descripcion_OG4  Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " id_E1    Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " Clave_E1 Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " Descripcion_E1   Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " CveDes_E1    Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " id_E2    Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " Clave_E2 Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " Descripcion_E2   Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " CveDes_E2    Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " id_E3    Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " Clave_E3 Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " Descripcion_E3   Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " CveDes_E3    Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " id_E4    Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " Clave_E4 Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " Descripcion_E4   Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " CveDes_E4    Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " DesNiv_E4    Varchar(max),"
'    VlSQL = VlSQL & Chr(13) & " id_E5    Varchar(max),"
'    VlSQL = VlSQL & Chr(13) & " Clave_E5 Varchar(max),"
'    VlSQL = VlSQL & Chr(13) & " Descripcion_E5   Varchar(max),"
'    VlSQL = VlSQL & Chr(13) & " CveDes_E5    Varchar(max),"
'    VlSQL = VlSQL & Chr(13) & " DesNiv_E5    Varchar(max),"
'    VlSQL = VlSQL & Chr(13) & " id_E6    Varchar(max),"
'    VlSQL = VlSQL & Chr(13) & " Clave_E6 Varchar(max),"
'    VlSQL = VlSQL & Chr(13) & " Descripcion_E6   Varchar(max),"
'    VlSQL = VlSQL & Chr(13) & " CveDes_E6    Varchar(max),"
'    VlSQL = VlSQL & Chr(13) & " DesNiv_E6    Varchar(max),"
'    VlSQL = VlSQL & Chr(13) & " id_E7    Varchar(max),"
'    VlSQL = VlSQL & Chr(13) & " Clave_E7 Varchar(max),"
'    VlSQL = VlSQL & Chr(13) & " Descripcion_E7 Varchar(max),"
'    VlSQL = VlSQL & Chr(13) & " CveDes_E7 Varchar(max),"
'    VlSQL = VlSQL & Chr(13) & " id_E8 Varchar(max),"
'    VlSQL = VlSQL & Chr(13) & " Clave_E8 Varchar(max),"
'    VlSQL = VlSQL & Chr(13) & " Descripcion_E8   Varchar(max),"
'    VlSQL = VlSQL & Chr(13) & " CveDes_E8    Varchar(max),"
'    VlSQL = VlSQL & Chr(13) & " DesNiv_E8    Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " DesNivelClasifFun_N1 Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " CveClasifFun_N1  Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " DesClasifFun_N1  Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " DesNivelClasifFun_N2 Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " CveClasifFun_N2  Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " DesClasifFun_N2  Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " DesNivelClasifFun    Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " CveClasifFun Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " DesClasifFun Varchar(max),"
'    VlSQL = VlSQL & Chr(13) & " id_E9    Varchar(max),"
'    VlSQL = VlSQL & Chr(13) & " Clave_E9 Varchar(max),"
'    VlSQL = VlSQL & Chr(13) & " Descripcion_E9   Varchar(max),"
'    VlSQL = VlSQL & Chr(13) & " CveDes_E9    Varchar(max),"
'    VlSQL = VlSQL & Chr(13) & " id_E10   Varchar(max),"
'    VlSQL = VlSQL & Chr(13) & " Clave_E10    Varchar(max),"
'    VlSQL = VlSQL & Chr(13) & " Descripcion_E10  Varchar(max),"
'    VlSQL = VlSQL & Chr(13) & " CveDes_E10   Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " CveClasifCta Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " DesClsifCta  Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " CveDestino   Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " DesDestino   Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " CveClasifEco Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " DesClasifEco Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " CveFuenteFin Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " desFuenteFin Varchar(max),"
    VlSQL = VlSQL & Chr(13) & "PresupuestoAnual  MONEY,"
    VlSQL = VlSQL & Chr(13) & "PresupuestoAcum  MONEY,"
    VlSQL = VlSQL & Chr(13) & "PresupuestoMes   MONEY,"
    VlSQL = VlSQL & Chr(13) & " prueba1  Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " prueba2  Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " prueba3  Varchar(max),"
    VlSQL = VlSQL & Chr(13) & " )"
    VlSQL = VlSQL & Chr(13) & "INSERT INTO " & vlTablaResultado
    VlSQL = VlSQL & Chr(13) & "EXEC EgresosPorCFA " & vgAnio & "," & vgMesInicial & "," & vgMesFinal
    VlSQL = VlSQL & Chr(13) & "Commit tran"
        
    
    vlConn.Execute VlSQL
    CierraConn
    
    Unload frmShow
    Exit Sub
ErrorHand:
On Error Resume Next
        Unload frmShow
        MsgBox ERROR_EJECUCION & Err.Description, vbCritical, ATENCION
    
End Sub

Private Sub CargaReporte()
    
    On Error Resume Next
    If Not AbreConn Then
        MsgBox ERROR_CONEXION, vbInformation, ATENCION
        Exit Sub
    End If
    CierraConn
    frmShow.lblMensaje.Caption = CARGANDO_BASE_DATOS
    frmShow.Show 0
    DoEvents
    Dim vlNivel As Integer
    Dim VlSQL As String
      
    VlSQL = "select * , char(28) as ESPACIO from " & vlTablaResultado & "-- where 1=0"
    
    Sheets(HojaFuenteDeDatos).Visible = True
    DoEvents
    CargaQuery HojaFuenteDeDatos, VlSQL, False
    Sheets(HojaFuenteDeDatos).Visible = False
    
    Unload frmShow
       
End Sub

Private Sub FormateHoja()
    Cells.Select
    Cells.EntireColumn.AutoFit
End Sub

Private Sub LlenaFuenteDeDatos()
    
    On Error Resume Next
    If Not AbreConn Then
        MsgBox ERROR_CONEXION, vbInformation, ATENCION
        Exit Sub
    End If
    CierraConn
    frmShow.lblMensaje.Caption = CARGANDO_BASE_DATOS
    frmShow.Show 0
    DoEvents
    Dim vlNivel As Integer
    
    Dim VlSQL As String
      
    VlSQL = "select  * from " & vlTablaResultado
    
    ThisWorkbook.Sheets(HojaFuenteDeDatos).Visible = True
    DoEvents
    CargaQuery HojaFuenteDeDatos, VlSQL, False
    Sheets(HojaFuenteDeDatos).Visible = False
    
    Unload frmShow
       
End Sub

Function mostrar()

Dim i As Integer
    For i = 1 To Sheets.Count
        If Sheets(i).Name <> "Bloqueo" And Sheets(i).Name <> "Datos" And Sheets(i).Name <> "Fuente de Datos" Then
            Sheets(i).Visible = xlSheetVisible
            'MANEJO DE ENCABEZADOS
            'EncabezadoDinamico (i)
            EncabezadoDin|fffd|micoEnCeldas
            'InsertPicture (i)
        End If
    Next
    For i = 1 To Sheets.Count
        If Sheets(i).Name = "Bloqueo" Or Sheets(i).Name = "Datos" Or Sheets(i).Name = "Fuente de Datos" Then
            Sheets(i).Visible = xlSheetVeryHidden
        End If
    Next
    'ModificaTamanioRows
End Function

Private Sub BorrarInfoPrevia()
    On Error Resume Next
    Rows("3:3").Select
    Range(Selection, Selection.End(xlDown)).Select
    Range(Selection, Selection.End(xlDown)).Select
    Range(Selection, Selection.End(xlDown)).Select
    Rows("3:3").Select
    ActiveWindow.ScrollRow = 2
    Rows("3:36279").Select
    ActiveWindow.SmallScroll Down:=15
    Range(Selection, Selection.End(xlDown)).Select
    Rows("3:1048575").Select
    
    Dim ActCol As Integer
    ActCol = 0
        
    Do While Cells(3, ActCol).Value <> ""
            ActCol = ActCol + 1
            ActiveSheet.ListObjects(1).Range.AutoFilter Field:=ActCol
    Loop
    Selection.Delete Shift:=xlUp
End Sub

Private Sub PosicionaHoja(NombreHoja As String)
On Error Resume Next
        ThisWorkbook.Application.Visible = True
        ThisWorkbook.Sheets(NombreHoja).Visible = True
        ThisWorkbook.Sheets(NombreHoja).Select = True
        ThisWorkbook.Sheets(NombreHoja).Range("A4").Select
End Sub

Private Sub PosicionarCursor(NombreHoja)
    PosicionaHoja (NombreHoja)
    Range("A4").Select
End Sub

Private Sub CargaQuery(Hoja As String, VlSQL, Optional formatea As Boolean = True)
    
    PosicionaHoja (Hoja)
    BorrarInfoPrevia
       
       With ActiveSheet.ListObjects.Add(SourceType:=0, Source:=Array( _
        "OLEDB;Provider=SQLOLEDB.1;Persist Security Info=True;User ID=", vgUsuario, ";password=", vgPassword, ";Data Source=", vgServidor, ";Use Procedure for Prepare=1;Auto Translate" _
        , _
        "=True;Packet Size=4096;Use Encryption for Data=False;Tag with column collation when possible=False;Ini" _
        , "tial Catalog=", vgBaseDeDatos), Destination:=Range("$A$3")).QueryTable
        
        .CommandType = xlCmdSql
        .CommandText = VlSQL
        .RowNumbers = False
        .FillAdjacentFormulas = False
        .PreserveFormatting = True
        .RefreshOnFileOpen = False
        .BackgroundQuery = True
        .RefreshStyle = xlInsertDeleteCells
        .SavePassword = False
        .AdjustColumnWidth = False
        .RefreshPeriod = 0
        .PreserveColumnInfo = True
        
        .Refresh BackgroundQuery:=False
    End With
    ActiveSheet.ListObjects(1).Name = "Tabla_datosExternos_1"
    If formatea Then
        FormateHoja
    End If
    PosicionarCursor Hoja
End Sub

Private Sub Actualizadatos()
    On Error Resume Next
    frmShow.lblMensaje.Caption = ACTUALIZANDO_REPORTES
    frmShow.Show 0
    
    EncabezadoPresupuestoAnual ("B3")
    EncabezadoMesFinal ("C3")
    EncabezadoAcumuladoMesInicialMesFinal ("D3")
    
   vgCargando = True
    For i = 1 To Sheets.Count
    
        If Not (Sheets(i).Name = "Datos" Or Sheets(i).Name = "Fuente de Datos") Then
                For j = 1 To Sheets(i).PivotTables.Count
                    ThisWorkbook.Application.DisplayAlerts = False
                    Sheets(i).PivotTables(j).PivotCache.Refresh
                    'IRM 20130704: Formato de fecha / FORMATO FOOTER
                    Sheets(i).PageSetup.CenterFooter = "&""Arial,Normal""&8 &P / &N"
                Next
        End If
    Next i
   
    'mostrar
    DoEvents
    ThisWorkbook.Application.DisplayAlerts = True
    vgCargando = False
    mostrar
End Sub

Function EncabezadoDinamico(pagina As Integer)
On Error GoTo F:
    
    Dim Enca1 As Variant
    Dim Partio As Boolean
    Dim i As Integer

    Encabezado2 = "GOBIERNO DEL ESTADO DE AGUASCALIENTES"
    Encabezado3 = "SECRETAR|fffd|A DE FINANZAS"
    Encabezado4 = "EGRESOS POR CLASIFICACI|fffd|N"
    Encabezado5 = "FUNCIONAL ARMONIZADA"
    Encabezado6 = "DEL 1 DE " & vgMesInicialDescripcion & " AL " & diaFinal & " DE " & vgMesFinalDescripcion & " DEL " & vgAnio
    Encabezado7 = "(miles de pesos)"
        
    Dim Tit As String
    Tit = "&""Arial,Negrita""&9" & Encabezado2 & Chr(10)
    Tit = Tit & "&""Arial,Negrita""&9" & Encabezado3 & Chr(10)
    Tit = Tit & "&""Arial,Negrita""&9" & Encabezado4 & Chr(10) & Encabezado5 & Chr(10) & Encabezado6 & Chr(10) & Encabezado7
    
    If pagina <> 0 Then
       ThisWorkbook.Sheets(pagina).Activate
    
   With ThisWorkbook.Sheets(pagina).PageSetup
   .CenterHeader = Tit
    End With
      End If

    Exit Function
F:
    MsgBox Err.Description
End Function

Function InsertPicture(pagina As Integer)
'ENCABEZADO (PAGINA)
On Error Resume Next
    
    Sheets(pagina).PageSetup.HeaderMargin = Application.InchesToPoints(0.2) '0.2
    Sheets(pagina).PageSetup.TopMargin = Application.InchesToPoints(1.177)    ' 1.177
    
    With Sheets(pagina).PageSetup.LeftHeaderPicture
        .Filename = ""
        .Filename = "C:\SIIF\Logos\LogoIzq.jpg"
        .Height = Application.InchesToPoints((1.5))
        .Width = Application.InchesToPoints((1.5))
        .ColorType = msoPictureAutomatic
    End With
    Sheets(pagina).PageSetup.LeftHeader = "&G"

   With Sheets(pagina).PageSetup.RightHeaderPicture
        .Filename = ""
        .Filename = "C:\SIIF\Logos\LogoDer.jpg"
        .Height = Application.InchesToPoints((1))
        .Width = Application.InchesToPoints((1))
        .ColorType = msoPictureAutomatic

    End With
    Sheets(pagina).PageSetup.RightHeader = "&G"
End Function

Function AjusteTexto()
On Error Resume Next
    ActiveSheet.PivotTables("Tabla din|fffd|mica1").PivotSelect "'Descripcion '[All]", _
        xlLabelOnly + xlFirstRow, True
    With Selection
        .HorizontalAlignment = xlLeft
        .VerticalAlignment = xlBottom
        .WrapText = True
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
End Function

' DGR EncabezadoDin|fffd|micoEnCeldas
Private Sub EncabezadoDin|fffd|micoEnCeldas()

Dim rng As Range
Set rng = Range("A1")
Set rng = rng.MergeArea

rng.RowHeight = 92.25

rng.Select

' IMPORTANTE!!!!!!
' Se deben copiar los encabezados de EncabezadoDinamico
 Encabezado2 = "GOBIERNO DEL ESTADO DE AGUASCALIENTES"
    Encabezado3 = "SECRETAR|fffd|A DE FINANZAS"
    Encabezado4 = "EGRESOS POR CLASIFICACI|fffd|N"
    Encabezado5 = "FUNCIONAL ARMONIZADA"
    Encabezado6 = "DEL 1 DE " & vgMesInicialDescripcion & " AL " & diaFinal & " DE " & vgMesFinalDescripcion & " DEL " & vgAnio
    Encabezado7 = "(miles de pesos)"
'-------------------------------------------------------------

ActiveCell.FormulaR1C1 = Encabezado2 & Chr(10) & Encabezado3 & Chr(10) & Encabezado4 & Chr(10) & Encabezado5 & Chr(10) & Encabezado6 & Chr(10) & Encabezado7

With Selection
.HorizontalAlignment = xlCenter
.VerticalAlignment = xlTop
.WrapText = True
.Orientation = 0
.AddIndent = False
.IndentLevel = 0
.ShrinkToFit = False
.ReadingOrder = xlContext
.MergeCells = True
End With

With Selection.Font
.Name = "Arial"
.Size = 10
.Strikethrough = False
.Superscript = False
.Subscript = False
.OutlineFont = False
.Shadow = False
.Underline = xlUnderlineStyleNone
.ThemeColor = xlThemeColorLight1
.TintAndShade = 0
.ThemeFont = xlThemeFontNone
End With

DirImagen = "C:\SIIF\logos\LogoIzq.jpg"

If Dir(DirImagen) <> "" Then

ActiveSheet.Pictures.Insert(DirImagen).Select
Selection.ShapeRange.IncrementLeft -292.8262204724
Selection.ShapeRange.IncrementTop -165
Selection.ShapeRange.ScaleWidth 0.6689135863, msoFalse, msoScaleFromTopLeft
    

End If

On Error GoTo SinImpresora:
    Application.PrintCommunication = False
    With ActiveSheet.PageSetup
    ' Filas a Repetir junto a Encabezado
    .PrintTitleRows = "$1:$3"
    .PrintTitleColumns = ""
    End With
    Application.PrintCommunication = True
Exit Sub


SinImpresora:
    With ActiveSheet.PageSetup
    ' Filas a Repetir junto a Encabezado
    .PrintTitleRows = "$1:$3"
    .PrintTitleColumns = ""
    End With
End Sub
Attribute VB_Name = "tBrahe"
Option Explicit

Dim mLngI As Long
Private Const mStrCharsPermitidos As String = "#$0123456789@ABCDEFGHIJKLMN|fffd|OPQRSTUVWXYZ_abcdefghijklmn|fffd|opqrstuvwxyz"

Private Function ArrASCIIPermitidos() As Variant

    Dim ArrPaso(0 To 67) As Variant
    
    ArrPaso(0) = 35
    ArrPaso(1) = 36
    ArrPaso(2) = 48
    ArrPaso(3) = 49
    ArrPaso(4) = 50
    ArrPaso(5) = 51
    ArrPaso(6) = 52
    ArrPaso(7) = 53
    ArrPaso(8) = 54
    ArrPaso(9) = 55
    ArrPaso(10) = 56
    ArrPaso(11) = 57
    ArrPaso(12) = 64
    ArrPaso(13) = 65
    ArrPaso(14) = 66
    ArrPaso(15) = 67
    ArrPaso(16) = 68
    ArrPaso(17) = 69
    ArrPaso(18) = 70
    ArrPaso(19) = 71
    ArrPaso(20) = 72
    ArrPaso(21) = 73
    ArrPaso(22) = 74
    ArrPaso(23) = 75
    ArrPaso(24) = 76
    ArrPaso(25) = 77
    ArrPaso(26) = 78
    ArrPaso(27) = 79
    ArrPaso(28) = 80
    ArrPaso(29) = 81
    ArrPaso(30) = 82
    ArrPaso(31) = 83
    ArrPaso(32) = 84
    ArrPaso(33) = 85
    ArrPaso(34) = 86
    ArrPaso(35) = 87
    ArrPaso(36) = 88
    ArrPaso(37) = 89
    ArrPaso(38) = 90
    ArrPaso(39) = 95
    ArrPaso(40) = 97
    ArrPaso(41) = 98
    ArrPaso(42) = 99
    ArrPaso(43) = 100
    ArrPaso(44) = 101
    ArrPaso(45) = 102
    ArrPaso(46) = 103
    ArrPaso(47) = 104
    ArrPaso(48) = 105
    ArrPaso(49) = 106
    ArrPaso(50) = 107
    ArrPaso(51) = 108
    ArrPaso(52) = 109
    ArrPaso(53) = 110
    ArrPaso(54) = 111
    ArrPaso(55) = 112
    ArrPaso(56) = 113
    ArrPaso(57) = 114
    ArrPaso(58) = 115
    ArrPaso(59) = 116
    ArrPaso(60) = 117
    ArrPaso(61) = 118
    ArrPaso(62) = 119
    ArrPaso(63) = 120
    ArrPaso(64) = 121
    ArrPaso(65) = 122
    ArrPaso(66) = 241
    ArrPaso(67) = 209

    ArrASCIIPermitidos = ArrPaso

End Function

Private Function InversionCaracteres(pCadena As String) As String

Dim StrPaso As String
Dim lngLong As Long

lngLong = Len(pCadena)

For mLngI = 1 To lngLong
    StrPaso = StrPaso & Left(Right(pCadena, mLngI), 1)
Next mLngI

InversionCaracteres = StrPaso

End Function

Private Function ValidaUnicode(pCadena As String) As Boolean

Dim LngI As Long
Dim lngLong As Long

ValidaUnicode = True

lngLong = Len(pCadena)
For LngI = 1 To lngLong

    If InStr(1, mStrCharsPermitidos, Mid(pCadena, LngI, 1)) = 0 Then
        MsgBox "El caracter '" & Mid(pCadena, LngI, 1) & "' no esta permitido", vbOKOnly + vbInformation, "Valor no permitido"
        ValidaUnicode = False
        Exit Function
    End If

Next LngI

End Function

Public Function EnCrypt(ByVal pCadena As String) As String
    
    Dim ArrEquivalencias() As Variant
    Dim ArrShuffle() As Variant
    Dim LngI As Long
    Dim lngLongOri As Long
     
    lngLongOri = Len(pCadena)
    
    Do Until Len(EnCrypt) >= 12
    
        If Len(pCadena) > 15 Or Len(Trim(pCadena)) = 0 Then
            MsgBox "La longitud de la cadena es incorrecta", vbOKOnly + vbInformation, "Valor incorrecto"
            EnCrypt = ""
            Exit Function
        End If
        
        If Not ValidaUnicode(pCadena) Then
            EnCrypt = ""
            Exit Function
        End If
    
        Shuffle ArrASCIIPermitidos, ArrEquivalencias, True
                
        Shuffle pCadena, ArrShuffle, False
        
        pCadena = ""
        For LngI = LBound(ArrShuffle) To UBound(ArrShuffle)
                                               
            pCadena = pCadena & BuscaEquivalenciaASCII(ArrEquivalencias, CStr(ArrShuffle(LngI)))
                        
        Next LngI
            
        pCadena = InversionCaracteres(pCadena)
        If (Len(EnCrypt)) < 12 Then
            EnCrypt = EnCrypt & pCadena
            pCadena = Right(pCadena, 1)
        Else
            EnCrypt = pCadena
            If (Len(EnCrypt)) > 12 Then
                pCadena = Right(pCadena, 1)
            End If
        End If
    Loop
    
    If lngLongOri < 15 Then
        If lngLongOri = 13 Then
            EnCrypt = "0" & Right(ConcatenaASCIIEqui(CStr(lngLongOri), ArrEquivalencias), 1) & EnCrypt
        Else
            If lngLongOri = 14 Then
                EnCrypt = "1" & EnCrypt
            Else
                EnCrypt = "00" & Right(ConcatenaASCIIEqui(CStr(lngLongOri), ArrEquivalencias), 1) & EnCrypt
            End If
        End If
        
    End If
    
End Function

Private Function ConcatenaASCIIEqui(pValor As String, pArrEqui As Variant) As String
    
    Dim lngLongi As Long
    Dim LngI As Long
    Dim ArrPaso() As Variant
    
    lngLongi = Len(pValor)
    
    ReDim ArrPaso(0 To (lngLongi - 1))
    
    'Se parta la cadena en cada uno de sus elementos
    For LngI = 0 To lngLongi - 1
        ArrPaso(LngI) = Mid(pValor, LngI + 1, 1)
    Next LngI
    
    'Se arma una nueva cadena agregando el ascii equivalente
    For LngI = LBound(ArrPaso) To UBound(ArrPaso)
        ConcatenaASCIIEqui = ConcatenaASCIIEqui & ArrPaso(LngI) & BuscaEquivalenciaASCII(pArrEqui, CStr(ArrPaso(LngI)))
    Next LngI

End Function





'Private Sub Text1_LostFocus()
'Text2.Text = EnCrypt(Text1.Text)
'End Sub

Private Sub UserControl_Resize()
    UserControl.Height = 735
    UserControl.Width = 735
End Sub

Private Sub Shuffle(pValores As Variant, ByRef pArrSalida As Variant, Optional pEsArray As Boolean)

'Variables locales
Dim lngLongi As Long
Dim LngI As Long
Dim LngL As Long
Dim lngLongMaso As Long
Dim lngRes As Long
Dim StrPaso As String

'Los dos masos
Dim ArrMaso1() As Variant
Dim ArrMaso2() As Variant
Dim ArrMasoPaso() As Variant
Dim ArrMasoFinal() As Variant

If pEsArray Then ArrMasoPaso = pValores

Inicio:

'Se valida si es una cadena o un arreglo
If pEsArray Then

    'Se carga el total de registros del array
    lngLongi = UBound(ArrMasoPaso) + 1
    
    If lngLongi > 1 Then
    
        lngRes = lngLongi Mod 2
    
        If lngRes <> 0 Then
            lngLongMaso = (lngLongi - lngRes) / 2
        Else
            lngLongMaso = lngLongi / 2
        End If
    Else
        pArrSalida = ArrMasoPaso
        Exit Sub
    End If
    
    ReDim ArrMaso1(0 To (lngLongMaso - 1))
    ReDim ArrMaso2(0 To (lngLongMaso - 1 + lngRes))
    
    For LngI = LBound(ArrMasoPaso) To UBound(ArrMasoPaso)
    
        If LngI <= lngLongMaso - 1 Then
            ArrMaso1(LngI) = ArrMasoPaso(LngI)
        Else
            If LngI = UBound(ArrMasoPaso) Then
                ArrMaso2((LngI - lngLongMaso)) = ArrMasoPaso(LngI)
            Else
                ArrMaso2(LngI - (lngLongMaso)) = ArrMasoPaso(LngI)
            End If
        End If
        
    Next LngI
    
    'Inversion de ambos masos
    ReDim ArrMasoFinal(0 To UBound(ArrMaso1))
    
    LngL = 0
    For LngI = UBound(ArrMaso1) To LBound(ArrMaso1) Step -1
        
        ArrMasoFinal(LngL) = ArrMaso1(LngI)
        LngL = LngL + 1
            
    Next LngI
    
    'Reasigna el maso ya invertido
    For LngI = LBound(ArrMasoFinal) To UBound(ArrMasoFinal)
        ArrMaso1(LngI) = ArrMasoFinal(LngI)
    Next LngI
        
    ReDim ArrMasoFinal(0 To UBound(ArrMaso2))
    
    LngL = 0
    For LngI = UBound(ArrMaso2) To LBound(ArrMaso2) Step -1
        
        ArrMasoFinal(LngL) = ArrMaso2(LngI)
        LngL = LngL + 1
            
    Next LngI
    
    'Reasigna el maso ya invertido
    For LngI = LBound(ArrMasoFinal) To UBound(ArrMasoFinal)
        ArrMaso2(LngI) = ArrMasoFinal(LngI)
    Next LngI
    
    ReDim ArrMasoFinal(0 To UBound(ArrMasoPaso))
    
    For LngI = LBound(ArrMaso2) To UBound(ArrMaso2)
        ArrMasoFinal(LngI * 2) = ArrMaso2(LngI)
    Next LngI
    
    For LngI = LBound(ArrMaso1) To UBound(ArrMaso1)
                   
        ArrMasoFinal((LngI * 2) + 1) = ArrMaso1(LngI)
        
    Next LngI
    
    pArrSalida = ArrMasoFinal

Else

    lngLongi = Len(pValores)
    
    ReDim ArrMasoPaso(0 To (lngLongi - 1))
    
    For LngI = 0 To lngLongi - 1
        ArrMasoPaso(LngI) = Mid(pValores, LngI + 1, 1)
    Next LngI
        
    pEsArray = True
    GoTo Inicio

End If

End Sub

Private Function BuscaEquivalenciaASCII(pArrEqui As Variant, pCaracter As String) As String

    Dim LngI As Long
    Dim ArrASCIIPermi As Variant
    ArrASCIIPermi = ArrASCIIPermitidos
    
    For LngI = LBound(ArrASCIIPermi) To UBound(ArrASCIIPermi)
        If Asc(pCaracter) = ArrASCIIPermi(LngI) Then
            BuscaEquivalenciaASCII = Chr(pArrEqui(LngI))
            Exit For
        End If
    Next LngI

End Function


' InQuest injected base64 decoded content
' jZ+z
' zw"h

INQUEST-PP=macro
