Attribute VB_Name = "MakraProAktualizace"

'#############################################################################################
Sub AktualizujTZ()
    On Error Resume Next
    Word.ActiveDocument.Fields.Update
    Word.ActiveDocument.Label_CisloZakazky.Caption = Word.ActiveDocument.FormFields("CisloZakazky").Result
    Word.ActiveDocument.Label_CisloDokumentu.Caption = Word.ActiveDocument.FormFields("CisloDokumentu").Result
    Word.ActiveDocument.Label_DatumVydani.Caption = Word.ActiveDocument.FormFields("DatumZhotoveni").Result
    Word.ActiveDocument.Label_Revize.Caption = Word.ActiveDocument.FormFields("Revize").Result
    
    Word.ActiveDocument.Label_StupenDokumentace.Caption = Strings.Trim(Word.ActiveDocument.FormFields("StupenDokumentace").Result & _
    " " & Word.ActiveDocument.FormFields("StupenDokumentaceT").Result)
    
    Word.ActiveDocument.Label_NazevAkce.Caption = Strings.Replace(Strings.Replace(Strings.Replace(Word.ActiveDocument.FormFields("NazevAkce").Result, Chr(9), " "), Chr(13), " "), vbCrLf, " ")
    Dim Stra1
    Dim Stra2
    Dim Stra
    Stra1 = Word.ActiveDocument.FormFields("JmenoObjektu01").Result & " " '& Word.ActiveDocument.FormFields("JmenoObjektu").Result
    Stra2 = Word.ActiveDocument.FormFields("Profese01").Result & " " '& Word.ActiveDocument.FormFields("Profese").Result
    Stra = Stra1 & Stra2
    Word.ActiveDocument.Label_JmenoObjektu.Caption = Stra
End Sub
'#############################################################################################
Attribute VB_Name = "Menu"
Option Explicit
'Public MenuNAME
Const MenuNAME = "Pomucky pro technicke zpravy"
'#############################################################################################
Sub NastavMenuTZdelete()
    Dim mybar As CommandBar
    On Error Resume Next
    Dim i
    For i = 0 To CommandBars.Count
        'Debug.Print CommandBars.Item(i).Name
        If MenuNAME = CommandBars.Item(i).Name Then CommandBars.Item(i).Delete
    Next i
    'Set mybar = CommandBars.Item(MenuNAME)
    'mybar.Delete
End Sub
'#############################################################################################
Sub NastavMenuTZ()
    NastavMenuTZdelete
    Dim mybar As CommandBar
    Dim Mybutton As CommandBarButton
    'Dim mybar1 As CommandBarPopup
    'Dim myControl As CommandBarComboBox
    'Dim MyButt As CommandBarPopup
    'Dim MYBTN As CommandBarControls
    'Dim MenuNAME
    
    'MenuNAME = "Pomucky pro technicke zpravy"
    On Error Resume Next
    Err.Clear
    Set mybar = CommandBars.Item(MenuNAME)
    mybar.Visible = True
'''    Dim i
'''    For i = 1 To mybar.Controls.Count
'''        mybar.Controls.Item(i).Enabled = True
'''    Next i
'''    If Err.Number <> 0 Then GoTo Pokr
'''    Exit Sub
'''Pokr:
    On Error Resume Next
    Set mybar = CommandBars.Add(MenuNAME, msoBarFloating, False, True)
    mybar.Left = 200
    mybar.Top = 350
    
    
    Set Mybutton = mybar.Controls.Add(msoControlButton, 1)
    Mybutton.Style = msoButtonIconAndCaption 'msoButtonCaption
    Mybutton.FaceId = 4
    Mybutton.Caption = "Tisk par|fffd|"
    Mybutton.OnAction = "TiskPare"
    Mybutton.Width = 30
    Mybutton.TooltipText = "Tiskne jednotliv|fffd| o|fffd||fffd|slovan|fffd| par|fffd|"
    
    Set Mybutton = mybar.Controls.Add(msoControlButton, 1)
    Mybutton.Style = msoButtonIconAndCaption 'msoButtonCaption
    Mybutton.FaceId = 29
    Mybutton.Caption = "Aktualizuj Obsah dokumentu"
    Mybutton.OnAction = "AktualizujObsah"
    Mybutton.TooltipText = "Zaktualizuje obsah dokumentu"
    Mybutton.Width = 30

    Set Mybutton = mybar.Controls.Add(msoControlButton, 1)
    Mybutton.Style = msoButtonIconAndCaption 'msoButtonCaption
    Mybutton.FaceId = 3
    Mybutton.FaceId = 23
    Mybutton.Caption = "N|fffd|pov|fffd|da-Kl|fffd|v.zkratky"
    Mybutton.OnAction = "KlavZkratky"
    Mybutton.Width = 30

''    Set mybutton = mybar.Controls.Add(msoControlButton, 1)
''    mybutton.Style = msoButtonIconAndCaption 'msoButtonCaption
''    mybutton.FaceId = 3
''    mybutton.FaceId = 23
''    mybutton.Caption = "Na|fffd|ti seznam SO"
''    mybutton.OnAction = "NactiSO"
''    mybutton.Width = 30
''
''
''    Set mybutton = mybar.Controls.Add(msoControlButton, 1)
''    mybutton.Style = msoButtonIconAndCaption 'msoButtonCaption
''    mybutton.FaceId = 23
''    mybutton.Caption = "Na|fffd|ti d|fffd|l|fffd||fffd| |fffd|len|fffd|n|fffd|"
''    mybutton.OnAction = "NactiDilci"
''    mybutton.Width = 30

    'mybar.Protection = msoBarNoChangeVisible + msoBarNoCustomize
    'mybar.Protection = msoBarNoProtection
    mybar.Visible = True
    mybar.Width = 40
    mybar.RowIndex = 2
    'mybar.Position = msoBarFloating
    'mybar.Position = msoBarTop
    'mybar.Position = msoBarBottom
    On Error Resume Next
    mybar.Position = msoBarPopup
End Sub
'#############################################################################################
Private Sub AktualizujObsah()
    On Error Resume Next
    Word.ActiveDocument.Unprotect "AAA"
    Word.ActiveDocument.TablesOfContents.Item(1).Update
    Word.ActiveDocument.Protect wdAllowOnlyFormFields, True, "AAA"
End Sub
'#############################################################################################
Private Sub TiskPare()
    frmPare.Show
End Sub
'#############################################################################################
Sub KlavZkratky()
MsgBox "" & _
"CTRL+1 - styl NADPIS 1" & vbLf & _
"CTRL+2 - styl NADPIS 2" & vbLf & _
"CTRL+3 - styl NADPIS 3" & vbLf & _
"CTRL+4 - styl NADPIS 4" & vbLf & _
"" & vbLf & _
"CTRL+w - styl NORM|fffd|LN|fffd| [styl pro text zpr|fffd|vy]" & vbLf & _
"" & vbLf & _
"" & vbLf & _
"" & vbLf & _
"", vbInformation, "Kl|fffd|vesov|fffd| zkratky pro tento dokument"
End Sub
'#############################################################################################
Attribute VB_Name = "Objektova_Skladba"

Sub NactiSO()
    NactiTXT "JmenoObjektu"
End Sub

Sub NactiDilci()
    NactiTXT "Profese"
End Sub

Sub NactiTXT(Str)
    Select Case Str
        Case "JmenoObjektu"
        Case "Profese"
    End Select
    On Error GoTo Err
    Word.ActiveDocument.FormFields(Str).DropDown.ListEntries.Clear
    Dim InputData
    Open "c:\" & Str & ".txt" For Input As #1    ' Open file for input.
    Do While Not EOF(1)    ' Check for end of file.
        Line Input #1, InputData    ' Read line of data.
        Debug.Print InputData    ' Print to the Immediate window.
        Word.ActiveDocument.FormFields(Str).DropDown.ListEntries.Add InputData
    Loop
    Close #1    ' Close file.
    Exit Sub
Err:
    Close #1
    If Err.Number = 53 Then
            MsgBox "Chyba |fffd||fffd|slo: " & Err.Number & vbLf & "Popis: " & Err.Description & vbLf & "CHYBA V SOUBORU: " & "c:\" & Str & ".txt"
        Else
            MsgBox "Chyba |fffd||fffd|slo: " & Err.Number & vbLf & "Popis: " & Err.Description & vbLf & "Nelze na|fffd||fffd|st"
    End If
End Sub


Function PokusSO() As Boolean
    PokusSO = PokusTXT("JmenoObjektu")
End Function

Function PokusDilci() As Boolean
    PokusDilci = PokusTXT("Profese")
End Function

Function PokusTXT(Str) As Boolean
'Word.ActiveDocument.lab
'Profese
'MsgBox Word.ActiveDocument.Fields.Item(1).Type
'Word.ActiveDocument.Label_Profese
'MsgBox Word.ActiveDocument.FormFields(str).DropDown.ListEntries.Count
'UvolniTZ
'|fffd|Dim Fso As New FileSystemObject
Select Case Str
Case "JmenoObjektu"
Case "Profese"
End Select
On Error GoTo Err
Dim InputData
Open "c:\" & Str & ".txt" For Input As #1    ' Open file for input.
Do While Not EOF(1)    ' Check for end of file.
    Line Input #1, InputData    ' Read line of data.
    Debug.Print InputData    ' Print to the Immediate window.
Loop
Close #1    ' Close file.
    'ZamkniTZ
    PokusTXT = True
    Exit Function
Err:
'If Err.Number = 53 Then
PokusTXT = False
Close #1
    'MsgBox "Chyba |fffd||fffd|slo: " & Err.Number & vbLf & "Popis: " & Err.Description & vbLf & "CHYBA V SOUBORU: " & "c:\" & Str & ".txt"
    'Else
    'MsgBox "Chyba |fffd||fffd|slo: " & Err.Number & vbLf & "Popis: " & Err.Description & vbLf & "Nelze na|fffd||fffd|st"
    'End If
End Function

Sub UlozAkci()
    Dim mybar As CommandBar
    Dim Mybutton As CommandBarButton
    Dim MenuNAME
    MenuNAME = "Pomucky pro technicke zpravy"
    On Error Resume Next
    Err.Clear
    Set mybar = CommandBars.Item(MenuNAME)

    Set Mybutton = mybar.Controls.Item("Na|fffd|ti defini|fffd|n|fffd| data AKCE")
    'mybutton.Style = msoButtonIconAndCaption 'msoButtonCaption
For i = 1 To 50
    Mybutton.FaceId = i
    Mybutton.Caption = i
    'mybutton.
    'MsgBox i
Dim PauseTime, Start, Finish, TotalTime
    PauseTime = 0.5    ' Set duration.
    Start = Timer    ' Set start time.
    Do While Timer < Start + PauseTime
        DoEvents    ' Yield to other processes.
    Loop
    Finish = Timer    ' Set end time.
    TotalTime = Finish - Start    ' Calculate total time.


    'mybar.r
Next i
'mybutton.FaceId = 2
    'mybutton.Caption = "Na|fffd|ti defini|fffd|n|fffd| data AKCE"
    'mybutton.OnAction = "NactiAkci"
    'mybutton.Width = 30
    

End Sub
Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True
Public Docu1 As Document
Dim WithEvents myUdalost As Application
Attribute myUdalost.VB_VarHelpID = -1
'#############################################################################################
Private Sub Document_Close()
    Dim mybar As CommandBar
    On Error Resume Next
    CommandBars.Item(MenuNAME).Delete
End Sub
'#############################################################################################
Private Sub Document_New()
    NastavMenuTZ
    Set myUdalost = Word.Application
    Set Docu1 = Word.ActiveDocument
End Sub
'#############################################################################################
Private Sub Document_Open()
    NastavMenuTZ
    Set myUdalost = Word.Application
    Set Docu1 = Word.ActiveDocument
End Sub
'#############################################################################################
'''Private Sub myUdalost_DocumentBeforePrint(ByVal Doc As Document, Cancel As Boolean)
''''|fffd|if Word.ActiveDocument
'''If Doc <> Docu1 Then Exit Sub
'''    'On Error Resume Next
'''    'Dim Str
'''    'Str = CB_Aktualizace.Width
'''    Word.ActiveDocument.Unprotect "AAA"
'''    'CB_Aktualizace.AutoSize = False
'''    'CB_Aktualizace.Width = 0
'''    'CB_Aktualizace.BackStyle = fmBackStyleTransparent
'''    'CB_Aktualizace.ForeColor = &H8000000E
'''    'CB_Aktualizace.BackColor = &H8000000E
'''    'CB_Aktualizace.BackStyle = fmBackStyleTransparent
'''    Word.ActiveDocument.TablesOfContents.Item(1).UpdatePageNumbers
'''    Word.ActiveDocument.Protect wdAllowOnlyFormFields, True, "AAA"
'''End Sub
''''#############################################################################################
'''Private Sub myUdalost_DocumentBeforeSave(ByVal Doc As Document, SaveAsUI As Boolean, Cancel As Boolean)
''''''If Doc <> Docu1 Then Exit Sub
''''''    AktualizujTZ
''''''    On Error Resume Next
''''''    Word.ActiveDocument.Unprotect "AAA"
''''''    Word.ActiveDocument.TablesOfContents.Item(1).Update
''''''    Word.ActiveDocument.Protect wdAllowOnlyFormFields, True, "AAA"
'''End Sub
''''#############################################################################################
'''Private Sub myUdalost_DocumentChange()
'''If Doc <> Docu1 Then Exit Sub
'''On Error Resume Next
''''On Error GoTo 0
'''If CB_Aktualizace.AutoSize = False Then
'''Word.ActiveDocument.Unprotect "AAA"
''''CB_Aktualizace.ForeColor = &H80000012
'''CB_Aktualizace.BackColor = &H8000000F
'''    CB_Aktualizace.AutoSize = True
'''    CB_Aktualizace.BackStyle = fmBackStyleTransparent
'''Word.ActiveDocument.Protect wdAllowOnlyFormFields, True, "AAA"
'''    'CB_Aktualizace.Width = 200
'''    'CB_Aktualizace.Height = 20
'''End If
'''End Sub
''''#############################################################################################
'''Private Sub myUdalost_WindowActivate(ByVal Doc As Document, ByVal Wn As Window)
'''MsgBox "aa"
'''Debug.Print Docu1.Name
'''
'''If Doc <> Docu1 Then
'''NastavMenuTZdelete
'''Exit Sub
'''Else
'''NastavMenuTZ
'''End If
'''End Sub
'#############################################################################################

Attribute VB_Name = "Tiskarny_Deklarace"
Option Explicit

Public Type PRINTER_INFO_1
   Flags As Long
   prescription As Long
   Pane As Long
   Comment As Long
End Type

Public Type PRINTER_INFO_4
   pPrinterName As Long
   pServerName As Long
   Attributes As Long
End Type

'SIZEOFxxx are non-windows constants defined for this method
Public Const SIZEOFPRINTER_INFO_1 = 16
Public Const SIZEOFPRINTER_INFO_4 = 12

Public Const PRINTER_LEVEL1 = &H1
Public Const PRINTER_LEVEL4 = &H4

'EnumPrinters enumerates available printers,
'print servers, domains, or print providers.
Public Declare Function EnumPrinters Lib "winspool.drv" _
   Alias "EnumPrintersA" _
  (ByVal Flags As Long, _
   ByVal Name As String, _
   ByVal Level As Long, _
   pPrinterEnum As Any, _
   ByVal cdBuf As Long, _
   pcbNeeded As Long, _
   pcReturned As Long) As Long

'EnumPrinters Parameters:
'Flags - Specifies the types of print objects that the function should enumerate.
Public Const PRINTER_ENUM_DEFAULT = &H1     'Windows 95: The function returns
                                            'information about the default printer.
Public Const PRINTER_ENUM_LOCAL = &H2       'function ignores the Name parameter,
                                            'and enumerates the locally installed
                                            'printers. Windows 95: The function will
                                            'also enumerate network printers because
                                            'they are handled by the local print provider
Public Const PRINTER_ENUM_CONNECTIONS = &H4 'Windows NT/2000: The function enumerates the
                                            'list of printers to which the user has made
                                            'previous connections
Public Const PRINTER_ENUM_NAME = &H8        'enumerates the printer identified by Name.
                                            'This can be a server, a domain, or a print
                                            'provider. If Name is NULL, the function
                                            'enumerates available print providers
Public Const PRINTER_ENUM_REMOTE = &H10     'Windows NT/2000: The function enumerates network
                                            'printers and print servers in the computer's domain.
                                            'This value is valid only if Level is 1
Public Const PRINTER_ENUM_SHARED = &H20     'enumerates printers that have the shared attribute.
                                            'Cannot be used in isolation; use an OR operation
                                            'to combine with another PRINTER_ENUM type
Public Const PRINTER_ENUM_NETWORK = &H40    'Windows NT/2000: The function enumerates network
                                            'printers in the computer's domain. This value is
                                            'valid only if Level is 1.

'''''''''''''''''''''''
'Name:
'If Level is 1, Flags contains PRINTER_ENUM_NAME, and Name is non-NULL,
'then Name is a pointer to a null-terminated string that specifies the
'name of the object to enumerate. This string can be the name of a server,
'a domain, or a print provider.
'
'If Level is 1, Flags contains PRINTER_ENUM_NAME, and Name is NULL, then
'the function enumerates the available print providers.
'
'If Level is 1, Flags contains PRINTER_ENUM_REMOTE, and Name is NULL, then
'the function enumerates the printers in the user's domain.
'
'If Level is 2 or 5, Name is a pointer to a null-terminated string that
'specifies the name of a server whose printers are to be enumerated. If
'this string is NULL, then the function enumerates the printers installed
'on the local machine.
'
'If Level is 4, Name should be NULL. The function always queries on
'the local machine.

'When Name is NULL, it enumerates printers that are installed on the
'local machine. These printers include those that are physically attached
'to the local machine as well as remote printers to which it has a
'network connection.

'''''''''''''''''''''''
'Level:
'Specifies the type of data structures pointed to by pPRinterEnum.
'Valid values are 1, 2, 4, and 5, which correspond to the
'PRINTER_INFO_1, PRINTER_INFO_2, PRINTER_INFO_4, and PRINTER_INFO_5
'data structures.
'
'Windows 95: The value can be 1, 2, or 5.
'
'Windows NT/Windows 2000: This value can be 1, 2, 4, or 5.

'''''''''''''''''''''''
'pPRinterEnum:
'Pointer to a buffer that receives an array of PRINTER_INFO_1,
'PRINTER_INFO_2, PRINTER_INFO_4, or PRINTER_INFO_5 structures.
'Each structure contains data that describes an available print object.
'
'If Level is 1, the array contains PRINTER_INFO_1 structures.
'If Level is 2, the array contains PRINTER_INFO_2 structures.
'If Level is 4, the array contains PRINTER_INFO_4 structures.
'If Level is 5, the array contains PRINTER_INFO_5 structures.
'
'The buffer must be large enough to receive the array of data
'structures and any strings or other data to which the structure
'members point. If the buffer is too small, the pcBNeeded parameter
'returns the required buffer size.
'
'Windows 95: The buffer cannot receive PRINTER_INFO_4 structures.
'It can receive any of the other types.

'''''''''''''''''''''''
'cbBuf
'Specifies the size, in bytes, of the buffer pointed to by pPRinterEnum.
'''''''''''''''''''''''
'pcBNeeded
'Pointer to a value that receives the number of bytes copied if the
'function succeeds or the number of bytes required if cbBuf is too small.
'''''''''''''''''''''''
'pcReturned
'Pointer to a value that receives the number of PRINTER_INFO_1,
'PRINTER_INFO_2, PRINTER_INFO_4, or PRINTER_INFO_5 structures that
'the function returns in the array to which pPRinterEnum points.


'PRINTER_INFO_4 returned Attribute values
Public Const PRINTER_ATTRIBUTE_DEFAULT = &H4
Public Const PRINTER_ATTRIBUTE_DIRECT = &H2
Public Const PRINTER_ATTRIBUTE_ENABLE_BIDI = &H800
Public Const PRINTER_ATTRIBUTE_LOCAL = &H40
Public Const PRINTER_ATTRIBUTE_NETWORK = &H10
Public Const PRINTER_ATTRIBUTE_QUEUED = &H1
Public Const PRINTER_ATTRIBUTE_SHARED = &H8
Public Const PRINTER_ATTRIBUTE_WORK_OFFLINE = &H400

'PRINTER_INFO_1 returned Flag values
Public Const PRINTER_ENUM_CONTAINER = &H8000
Public Const PRINTER_ENUM_EXPAND = &H4000
Public Const PRINTER_ENUM_ICON1 = &H10000
Public Const PRINTER_ENUM_ICON2 = &H20000
Public Const PRINTER_ENUM_ICON3 = &H40000
Public Const PRINTER_ENUM_ICON4 = &H80000
Public Const PRINTER_ENUM_ICON5 = &H100000
Public Const PRINTER_ENUM_ICON6 = &H200000
Public Const PRINTER_ENUM_ICON7 = &H400000
Public Const PRINTER_ENUM_ICON8 = &H800000

Public Const LB_SETTABSTOPS As Long = &H192

Public Declare Function SendMessage Lib "user32" Alias "SendMessageA" _
  (ByVal hwnd As Long, _
   ByVal wMsg As Long, _
   ByVal wParam As Long, _
   lParam As Any) As Long
   
Public Declare Function lstrcpyA Lib "kernel32" _
  (ByVal RetVal As String, ByVal Ptr As Long) As Long
                        
Public Declare Function lstrlenA Lib "kernel32" _
  (ByVal Ptr As Any) As Long



Attribute VB_Name = "Tiskarny_Hledani"

Public Function GetStrFromPtrA(ByVal lpszA As Long) As String
   GetStrFromPtrA = String$(lstrlenA(ByVal lpszA), 0)
   Call lstrcpyA(ByVal GetStrFromPtrA, ByVal lpszA)
End Function


Private Function EnumPrintersWinNT(ctl As ListBox) As Long
   Dim Success As Boolean
   Dim cbRequired As Long
   Dim cbBuffer As Long
   Dim pntr() As PRINTER_INFO_4
   Dim nEntries As Long
   Dim c As Long
   Dim sAttr As String
   ctl.Clear
  'To determine the required buffer size, call EnumPrinters with
  'cbBuffer set to zero. EnumPrinters fails, and Err.LastDLLError
  'returns ERROR_INSUFFICIENT_BUFFER, filling in the cbRequired
  'parameter with the size, in bytes, of the buffer required to
  'hold the array of structures and their data.
   Call EnumPrinters(PRINTER_ENUM_CONNECTIONS Or PRINTER_ENUM_LOCAL, _
                     vbNullString, PRINTER_LEVEL4, _
                     0, 0, cbRequired, nEntries)
  'The strings pointed to by each PRINTER_INFO_4 struct's members
  'reside in memory after the end of the array of structs. So we're
  'not only allocating memory for the structs themselves, but all the
  'strings pointed to by each struct's member as well.
   ReDim pntr((cbRequired \ SIZEOFPRINTER_INFO_4))
       
  'Set cbBuffer equal to the size of the buffer
   cbBuffer = cbRequired
    
  'Enumerate the printers. If the function succeeds,
  'the return value is nonzero. If the function fails,
  'the return value is zero.
   If EnumPrinters(PRINTER_ENUM_CONNECTIONS Or PRINTER_ENUM_LOCAL, _
                   vbNullString, PRINTER_LEVEL4, _
                   pntr(0), cbBuffer, _
                   cbRequired, nEntries) Then
              
      For c = 0 To nEntries - 1
           
         With pntr(c)
            
            sAttr = ""
               
            If (.Attributes And PRINTER_ATTRIBUTE_DEFAULT) Then sAttr = "default "
            If (.Attributes And PRINTER_ATTRIBUTE_DIRECT) Then sAttr = sAttr & "direct "
            If (.Attributes And PRINTER_ATTRIBUTE_ENABLE_BIDI) Then sAttr = sAttr & "bidirectional "
            If (.Attributes And PRINTER_ATTRIBUTE_LOCAL) Then sAttr = sAttr & "local "
            If (.Attributes And PRINTER_ATTRIBUTE_NETWORK) Then sAttr = sAttr & "net "
            If (.Attributes And PRINTER_ATTRIBUTE_QUEUED) Then sAttr = sAttr & "queued "
            If (.Attributes And PRINTER_ATTRIBUTE_SHARED) Then sAttr = sAttr & "shared "
            If (.Attributes And PRINTER_ATTRIBUTE_WORK_OFFLINE) Then sAttr = sAttr & "offline "
            
            ctl.AddItem GetStrFromPtrA(.pPrinterName) & vbTab & _
                        GetStrFromPtrA(.pServerName) & vbTab & _
                        sAttr

         End With
              
      Next c
        
   Else: ctl.AddItem "Error enumerating printers."
   End If  'EnumPrinters
   
   EnumPrintersWinNT = nEntries
    
End Function

Public Function EnumPrintersWin9x(ctl As ListBox) As Long
    
   Dim cbRequired As Long
   Dim cbBuffer As Long
   Dim pntr() As PRINTER_INFO_1
   Dim nEntries As Long
   Dim c As Long
   Dim sFlags As String
    
   ctl.Clear
   
  'To determine the required buffer size, call EnumPrinters with
  'cbBuffer set to zero. EnumPrinters fails, and Err.LastDLLError
  'returns ERROR_INSUFFICIENT_BUFFER, filling in the cbRequired
  'parameter with the size, in bytes, of the buffer required to
  'hold the array of structures and their data.
   Call EnumPrinters(PRINTER_ENUM_CONNECTIONS Or PRINTER_ENUM_LOCAL, _
                     vbNullString, PRINTER_LEVEL1, _
                     0, 0, cbRequired, nEntries)
                     
  'The strings pointed to by each PRINTER_INFO_4 struct's members
  'reside in memory after the end of the array of structs. So we're
  'not only allocating memory for the structs themselves, but all the
  'strings pointed to by each struct's member as well.
   ReDim pntr((cbRequired \ SIZEOFPRINTER_INFO_1))
       
  'Set cbBuffer equal to the size of the buffer
   cbBuffer = cbRequired
    
  'Enumerate the printers. If the function succeeds,
  'the return value is nonzero. If the function fails,
  'the return value is zero.
   If EnumPrinters(PRINTER_ENUM_CONNECTIONS Or PRINTER_ENUM_LOCAL, _
                   vbNullString, PRINTER_LEVEL1, _
                   pntr(0), cbBuffer, _
                   cbRequired, nEntries) Then
          
      For c = 0 To nEntries - 1
           
         With pntr(c)

            sFlags = ""
               
           'see Comments for info on these flags
            If (.Flags And PRINTER_ENUM_CONTAINER) Then sFlags = "enumerable "
            If (.Flags And PRINTER_ENUM_EXPAND) Then sFlags = sFlags & "expand "
            If (.Flags And PRINTER_ENUM_ICON1) Then sFlags = sFlags & "icon1 "
            If (.Flags And PRINTER_ENUM_ICON2) Then sFlags = sFlags & "icon2 "
            If (.Flags And PRINTER_ENUM_ICON3) Then sFlags = sFlags & "icon3 "
            If (.Flags And PRINTER_ENUM_ICON8) Then sFlags = sFlags & "icon8 "
            
            ctl.AddItem GetStrFromPtrA(.Pane) & vbTab & _
                         sFlags & vbTab & _
                         GetStrFromPtrA(.prescription)
                          
         End With
      Next c
           
   Else: ctl.AddItem "Error enumerating printers."
   End If  'EnumPrinters
    
    EnumPrintersWin9x = nEntries
    
End Function



Attribute VB_Name = "Zamky"

'#############################################################################################
Sub ZamkniTZ()
    On Error Resume Next
    Word.ActiveDocument.Protect wdAllowOnlyFormFields, True, "AAA"
End Sub
'#############################################################################################
Sub UvolniTZ()
    On Error Resume Next
    Word.ActiveDocument.Unprotect "AAA"
End Sub
'#############################################################################################
Attribute VB_Name = "frmPare"
Attribute VB_Base = "0{52C80607-E563-433E-BDF4-18A232289E67}{449D8B25-E1A0-4C49-A04E-AAC29F562238}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub CommandButton1_Click()
    Dim i
    For i = ScrollBar1.Value To ScrollBar2.Value
        Word.ActiveDocument.FormFields("Kopie").Result = CStr(i)
        Label3.Caption = "Prob|fffd|h|fffd| tisk Kopie No. " & Word.ActiveDocument.FormFields("Kopie").Result
        frmPare.Repaint
        ActivePrinter = ComboBox1.Text '"\\HH-PRINT1\FinePrint pdfFactory"
        Application.PrintOut
    Next i
    Word.ActiveDocument.FormFields("Kopie").Result = ""
    'MsgBox "Tisk Ukon|fffd|en.", vbInformation
    Unload Me
End Sub

Private Sub CommandButton2_Click()
    Unload Me
End Sub

Private Sub ScrollBar1_Change()
    Label1.Caption = ScrollBar1.Value
    If ScrollBar2.Value < ScrollBar1.Value Then ScrollBar2.Value = ScrollBar1.Value
    ScrollBar2.Min = ScrollBar1.Value
End Sub

Private Sub ScrollBar2_Change()
    Label2.Caption = ScrollBar2.Value
End Sub

Private Sub UserForm_Initialize()
If ScrollBar2.Value < ScrollBar1.Value Then ScrollBar2.Value = ScrollBar1.Value
ScrollBar2.Min = ScrollBar1.Value
    
    Label2.Caption = ScrollBar2.Value
    Label1.Caption = ScrollBar1.Value
    numPrinters = EnumPrintersWinNT(ComboBox1)
    Dim Tisk
    If Strings.InStr(Word.Application.ActivePrinter, " on ") > 0 Then
            Tisk = Strings.Left(Word.Application.ActivePrinter, Strings.InStr(Word.Application.ActivePrinter, " on ") - 1)
        Else
            Tisk = Word.Application.ActivePrinter
    End If
    ComboBox1.Text = Tisk
    Label3 = "K po|fffd||fffd|ta|fffd|i je p|fffd|ipojeno " & numPrinters & " tiskaren."
End Sub
Private Function EnumPrintersWinNT(ctl As ComboBox) As Long
    
   Dim Success As Boolean
   Dim cbRequired As Long
   Dim cbBuffer As Long
   Dim pntr() As PRINTER_INFO_4
   Dim nEntries As Long
   Dim c As Long
   Dim sAttr As String
   
   ctl.Clear
   
  'To determine the required buffer size, call EnumPrinters with
  'cbBuffer set to zero. EnumPrinters fails, and Err.LastDLLError
  'returns ERROR_INSUFFICIENT_BUFFER, filling in the cbRequired
  'parameter with the size, in bytes, of the buffer required to
  'hold the array of structures and their data.
   Call EnumPrinters(PRINTER_ENUM_CONNECTIONS Or PRINTER_ENUM_LOCAL, _
                     vbNullString, PRINTER_LEVEL4, _
                     0, 0, cbRequired, nEntries)
            
   
  'The strings pointed to by each PRINTER_INFO_4 struct's members
  'reside in memory after the end of the array of structs. So we're
  'not only allocating memory for the structs themselves, but all the
  'strings pointed to by each struct's member as well.
   ReDim pntr((cbRequired \ SIZEOFPRINTER_INFO_4))
       
  'Set cbBuffer equal to the size of the buffer
   cbBuffer = cbRequired
    
  'Enumerate the printers. If the function succeeds,
  'the return value is nonzero. If the function fails,
  'the return value is zero.
   If EnumPrinters(PRINTER_ENUM_CONNECTIONS Or PRINTER_ENUM_LOCAL, _
                   vbNullString, PRINTER_LEVEL4, _
                   pntr(0), cbBuffer, _
                   cbRequired, nEntries) Then
              
      For c = 0 To nEntries - 1
           
         With pntr(c)
            
            sAttr = ""
               
            If (.Attributes And PRINTER_ATTRIBUTE_DEFAULT) Then sAttr = "default "
            If (.Attributes And PRINTER_ATTRIBUTE_DIRECT) Then sAttr = sAttr & "direct "
            If (.Attributes And PRINTER_ATTRIBUTE_ENABLE_BIDI) Then sAttr = sAttr & "bidirectional "
            If (.Attributes And PRINTER_ATTRIBUTE_LOCAL) Then sAttr = sAttr & "local "
            If (.Attributes And PRINTER_ATTRIBUTE_NETWORK) Then sAttr = sAttr & "net "
            If (.Attributes And PRINTER_ATTRIBUTE_QUEUED) Then sAttr = sAttr & "queued "
            If (.Attributes And PRINTER_ATTRIBUTE_SHARED) Then sAttr = sAttr & "shared "
            If (.Attributes And PRINTER_ATTRIBUTE_WORK_OFFLINE) Then sAttr = sAttr & "offline "
            
            ctl.AddItem GetStrFromPtrA(.pPrinterName) '& vbTab & _
                        GetStrFromPtrA(.pServerName) & vbTab & _
                        sAttr

         End With
              
      Next c
        
   Else: ctl.AddItem "Error enumerating printers."
   End If  'EnumPrinters
   
   EnumPrintersWinNT = nEntries
    
End Function


' InQuest injected base64 decoded content
' ~`ZrD

INQUEST-PP=macro
