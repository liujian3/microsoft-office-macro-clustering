Attribute VB_Name = "Module1"
Public bCancel As Boolean

'This is getPicture button for the Quote Sheet tab
Sub GetPicture()
Dim TempFileName, FilePrefix, FileExtension As String
Dim fs, f, s
Dim hmax, wmax, hnew, wnew, hdiff, wdiff As Integer
Const nFMax As Long = 51200
hmax = 242
wmax = 402
    '''''''''''''''''  Browse for  the picture    '''''''''''''''''''
Application.EnableEvents = True

TempFileName = Application.GetOpenFilename("All Files (*.*), *.*")
If (TempFileName <> False) Then
    FilePrefix = Left(TempFileName, Len(TempFileName) - 4)
    FileExtension = Right(TempFileName, 3)
    'If LCase(FileExtension) <> "jpg" Then
        'MsgBox "Picture must be a JPEG file (.jpg extension)."
        'Exit Sub
    'End If
Else
    Exit Sub
End If

'''''''''''  Verify that the .jpg is less than 200KB
Set fs = CreateObject("Scripting.FileSystemObject")
    
Set f = fs.Getfile(TempFileName)    'Get file attributes
If f.Size > nFMax Then
    s = "Picture can not be more than 50KB!"
    MsgBox s, 0, UCase(f.Name) & " uses " & f.Size & " bytes."
    Exit Sub
End If
Dim ReProtect As Boolean 'Switch to reProtect worksheet.
ReProtect = False 'If reProtect is false, AKA is already unprotected, then don't reprotect it.
ReProtect = Sheets("Quote Sheet").ProtectContents 'This assigns reprotect to true/false
Sheets("Quote Sheet").Unprotect ("GTMG")
    
ActiveSheet.Range("BE24").Select    'Position next to picture
ActiveSheet.Pictures.Insert(TempFileName).Select
hnew = Selection.ShapeRange.Height
wnew = Selection.ShapeRange.Width
Selection.Delete
    
ActiveSheet.Range("AH24").Select    'Position next to picture
ActiveSheet.Shapes.AddPicture(TempFileName, False, True, Range("AH24").Left, Range("AH24").Top, wnew, hnew).Select

Selection.ShapeRange.LockAspectRatio = msoTrue

hnew = Selection.ShapeRange.Height
wnew = Selection.ShapeRange.Width
    
If hnew > hmax Or wnew > wmax Then
    hdiff = hnew - hmax
    wdiff = wnew - wmax
    If hdiff > wdiff Then
        Selection.ShapeRange.Height = hmax
    End If
    If wdiff > hdiff Then
        Selection.ShapeRange.Width = wmax
    End If
End If

hnew = Selection.ShapeRange.Height
wnew = Selection.ShapeRange.Width

If hnew > hmax Or wnew > wmax Then
    hdiff = hnew - hmax
    wdiff = wnew - wmax
    
    If hdiff > wdiff Then
        Selection.ShapeRange.Height = hmax
    End If
    
    If wdiff > hdiff Then
        Selection.ShapeRange.Width = wmax
    End If
End If

Selection.ShapeRange.Rotation = 0#
Selection.ShapeRange.PictureFormat.Brightness = 0.5
Selection.ShapeRange.PictureFormat.Contrast = 0.5
Selection.ShapeRange.PictureFormat.ColorType = msoPictureAutomatic
Selection.ShapeRange.PictureFormat.CropLeft = 0#
Selection.ShapeRange.PictureFormat.CropRight = 0#
Selection.ShapeRange.PictureFormat.CropTop = 0#
Selection.ShapeRange.PictureFormat.CropBottom = 0#
Selection.ShapeRange.Left = 377
Selection.ShapeRange.Top = 330
If ReProtect = True Then
    Sheets("Quote Sheet").protect ("GTMG")
End If
End Sub

Public Sub InitCmbPort()
Dim lIndex As Long
'''''''''''  Build up the FOB Port combo box   ''''''''''
frmPort.cmbPort.Clear
For lIndex = 113 To 164
        frmPort.cmbPort.AddItem ActiveSheet.Cells(lIndex, 68).Value  'From col [BP]
Next lIndex
frmPort.cmbPort.Value = " Click Button for Menu "
End Sub

Sub GetPicture1()
Dim TempFileName, FilePrefix, FileExtension As String
Dim fs, f, s
Dim hmax, wmax, hnew, wnew, hdiff, wdiff As Integer
Const nFMax As Long = 51200
hmax = 242
wmax = 402
    '''''''''''''''''  Browse for  the picture    '''''''''''''''''''
Application.EnableEvents = True

TempFileName = Application.GetOpenFilename("All Files (*.*), *.*")
If (TempFileName <> False) Then
    FilePrefix = Left(TempFileName, Len(TempFileName) - 4)
    FileExtension = Right(TempFileName, 3)
    'If LCase(FileExtension) <> "jpg" Then
        'MsgBox "Picture must be a JPEG file (.jpg extension)."
        'Exit Sub
    'End If
Else
    Exit Sub
End If

'''''''''''  Verify that the .jpg is less than 200KB
Set fs = CreateObject("Scripting.FileSystemObject")
    
Set f = fs.Getfile(TempFileName)    'Get file attributes
If f.Size > nFMax Then
    s = "Picture can not be more than 50KB!"
    MsgBox s, 0, UCase(f.Name) & " uses " & f.Size & " bytes."
    Exit Sub
End If
Worksheets("Additional Pictures").Activate
Range("A1").Select


Sheets("Additional Pictures").Unprotect ("GTMG")
ActiveSheet.Range("A1").Select    'Position next to picture
    
ActiveSheet.Pictures.Insert(TempFileName).Select
Selection.ShapeRange.LockAspectRatio = msoTrue

hnew = Selection.ShapeRange.Height
wnew = Selection.ShapeRange.Width
    
If hnew > hmax Or wnew > wmax Then
    hdiff = hnew - hmax
    wdiff = wnew - wmax
    
    If hdiff > wdiff Then
        Selection.ShapeRange.Height = hmax
    End If
    
    If wdiff > hdiff Then
        Selection.ShapeRange.Width = wmax
    End If
End If

hnew = Selection.ShapeRange.Height
wnew = Selection.ShapeRange.Width
    
If hnew > hmax Or wnew > wmax Then
    hdiff = hnew - hmax
    wdiff = wnew - wmax
    
    If hdiff > wdiff Then
        Selection.ShapeRange.Height = hmax
    End If
    
    If wdiff > hdiff Then
        Selection.ShapeRange.Width = wmax
    End If
    
End If

Selection.ShapeRange.Rotation = 0#
Selection.ShapeRange.PictureFormat.Brightness = 0.5
Selection.ShapeRange.PictureFormat.Contrast = 0.5
Selection.ShapeRange.PictureFormat.ColorType = msoPictureAutomatic
Selection.ShapeRange.PictureFormat.CropLeft = 0#
Selection.ShapeRange.PictureFormat.CropRight = 0#
Selection.ShapeRange.PictureFormat.CropTop = 0#
Selection.ShapeRange.PictureFormat.CropBottom = 0#

End Sub

Sub GetPicture2()
Dim TempFileName, FilePrefix, FileExtension As String
Dim fs, f, s
Dim hmax, wmax, hnew, wnew, hdiff, wdiff As Integer

Const nFMax As Long = 51200
hmax = 242
wmax = 402

    '''''''''''''''''  Browse for  the picture    '''''''''''''''''''
Application.EnableEvents = True

    TempFileName = Application.GetOpenFilename("All Files (*.*), *.*")
    If (TempFileName <> False) Then
        FilePrefix = Left(TempFileName, Len(TempFileName) - 4)
        FileExtension = Right(TempFileName, 3)
        'If LCase(FileExtension) <> "jpg" Then
            'MsgBox "Picture must be a JPEG file (.jpg extension)."
            'Exit Sub
        'End If
    Else
        Exit Sub
    End If

    '''''''''''  Verify that the .jpg is less than 200KB
    Set fs = CreateObject("Scripting.FileSystemObject")
    
    Set f = fs.Getfile(TempFileName)    'Get file attributes
    If f.Size > nFMax Then
        s = "Picture can not be more than 50KB!"
        MsgBox s, 0, UCase(f.Name) & " uses " & f.Size & " bytes."
        Exit Sub
    End If
    Worksheets("Additional Pictures").Activate
    Range("A1").Select
    Sheets("Additional Pictures").Unprotect ("GTMG")
    ActiveSheet.Range("K1").Select    'Position next to picture
    
    ActiveSheet.Pictures.Insert(TempFileName).Select
    Selection.ShapeRange.LockAspectRatio = msoTrue

    hnew = Selection.ShapeRange.Height
    wnew = Selection.ShapeRange.Width
    
    If hnew > hmax Or wnew > wmax Then
    
    hdiff = hnew - hmax
    wdiff = wnew - wmax
    
        If hdiff > wdiff Then
        
            Selection.ShapeRange.Height = hmax
        
        End If
    
        If wdiff > hdiff Then
        
            Selection.ShapeRange.Width = wmax
            
        End If
    
    End If

    hnew = Selection.ShapeRange.Height
    wnew = Selection.ShapeRange.Width
    
    If hnew > hmax Or wnew > wmax Then
    
    hdiff = hnew - hmax
    wdiff = wnew - wmax
    
        If hdiff > wdiff Then
        
            Selection.ShapeRange.Height = hmax
        
        End If
    
        If wdiff > hdiff Then
        
            Selection.ShapeRange.Width = wmax
            
        End If
    
    End If

    Selection.ShapeRange.Rotation = 0#
    Selection.ShapeRange.PictureFormat.Brightness = 0.5
    Selection.ShapeRange.PictureFormat.Contrast = 0.5
    Selection.ShapeRange.PictureFormat.ColorType = msoPictureAutomatic
    Selection.ShapeRange.PictureFormat.CropLeft = 0#
    Selection.ShapeRange.PictureFormat.CropRight = 0#
    Selection.ShapeRange.PictureFormat.CropTop = 0#
    Selection.ShapeRange.PictureFormat.CropBottom = 0#

End Sub
Sub GetPicture3()
Dim TempFileName, FilePrefix, FileExtension As String
Dim fs, f, s
Dim hmax, wmax, hnew, wnew, hdiff, wdiff As Integer

Const nFMax As Long = 51200
hmax = 242
wmax = 402

    '''''''''''''''''  Browse for  the picture    '''''''''''''''''''
Application.EnableEvents = True

    TempFileName = Application.GetOpenFilename("All Files (*.*), *.*")
    If (TempFileName <> False) Then
        FilePrefix = Left(TempFileName, Len(TempFileName) - 4)
        FileExtension = Right(TempFileName, 3)
        'If LCase(FileExtension) <> "jpg" Then
            'MsgBox "Picture must be a JPEG file (.jpg extension)."
            'Exit Sub
        'End If
    Else
        Exit Sub
    End If

    '''''''''''  Verify that the .jpg is less than 200KB
    Set fs = CreateObject("Scripting.FileSystemObject")
    
    Set f = fs.Getfile(TempFileName)    'Get file attributes
    If f.Size > nFMax Then
        s = "Picture can not be more than 50KB!"
        MsgBox s, 0, UCase(f.Name) & " uses " & f.Size & " bytes."
        Exit Sub
    End If
    Worksheets("Additional Pictures").Activate
    Range("A1").Select
    Sheets("Additional Pictures").Unprotect ("GTMG")
    ActiveSheet.Range("A21").Select    'Position next to picture
    
    ActiveSheet.Pictures.Insert(TempFileName).Select
    Selection.ShapeRange.LockAspectRatio = msoTrue

    hnew = Selection.ShapeRange.Height
    wnew = Selection.ShapeRange.Width
    
    If hnew > hmax Or wnew > wmax Then
    
    hdiff = hnew - hmax
    wdiff = wnew - wmax
    
        If hdiff > wdiff Then
        
            Selection.ShapeRange.Height = hmax
        
        End If
    
        If wdiff > hdiff Then
        
            Selection.ShapeRange.Width = wmax
            
        End If
    
    End If

    hnew = Selection.ShapeRange.Height
    wnew = Selection.ShapeRange.Width
    
    If hnew > hmax Or wnew > wmax Then
    
    hdiff = hnew - hmax
    wdiff = wnew - wmax
    
        If hdiff > wdiff Then
        
            Selection.ShapeRange.Height = hmax
        
        End If
    
        If wdiff > hdiff Then
        
            Selection.ShapeRange.Width = wmax
            
        End If
    
    End If

    Selection.ShapeRange.Rotation = 0#
    Selection.ShapeRange.PictureFormat.Brightness = 0.5
    Selection.ShapeRange.PictureFormat.Contrast = 0.5
    Selection.ShapeRange.PictureFormat.ColorType = msoPictureAutomatic
    Selection.ShapeRange.PictureFormat.CropLeft = 0#
    Selection.ShapeRange.PictureFormat.CropRight = 0#
    Selection.ShapeRange.PictureFormat.CropTop = 0#
    Selection.ShapeRange.PictureFormat.CropBottom = 0#


End Sub
Sub GetPicture4()
Dim TempFileName, FilePrefix, FileExtension As String
Dim fs, f, s
Dim hmax, wmax, hnew, wnew, hdiff, wdiff As Integer

Const nFMax As Long = 51200
hmax = 242
wmax = 402
    '''''''''''''''''  Browse for  the picture    '''''''''''''''''''
Application.EnableEvents = True

    TempFileName = Application.GetOpenFilename("All Files (*.*), *.*")
    If (TempFileName <> False) Then
        FilePrefix = Left(TempFileName, Len(TempFileName) - 4)
        FileExtension = Right(TempFileName, 3)
        'If LCase(FileExtension) <> "jpg" Then
            'MsgBox "Picture must be a JPEG file (.jpg extension)."
            'Exit Sub
        'End If
    Else
        Exit Sub
    End If

    '''''''''''  Verify that the .jpg is less than 200KB
    Set fs = CreateObject("Scripting.FileSystemObject")
    
    Set f = fs.Getfile(TempFileName)    'Get file attributes
    If f.Size > nFMax Then
        s = "Picture can not be more than 50KB!"
        MsgBox s, 0, UCase(f.Name) & " uses " & f.Size & " bytes."
        Exit Sub
    End If
    Worksheets("Additional Pictures").Activate
    Range("A1").Select
    Sheets("Additional Pictures").Unprotect ("GTMG")
    ActiveSheet.Range("K21").Select    'Position next to picture
    
    ActiveSheet.Pictures.Insert(TempFileName).Select
    Selection.ShapeRange.LockAspectRatio = msoTrue

    hnew = Selection.ShapeRange.Height
    wnew = Selection.ShapeRange.Width
    
    If hnew > hmax Or wnew > wmax Then
    
    hdiff = hnew - hmax
    wdiff = wnew - wmax
    
        If hdiff > wdiff Then
        
            Selection.ShapeRange.Height = hmax
        
        End If
    
        If wdiff > hdiff Then
        
            Selection.ShapeRange.Width = wmax
            
        End If
    
    End If

    hnew = Selection.ShapeRange.Height
    wnew = Selection.ShapeRange.Width
    
    If hnew > hmax Or wnew > wmax Then
    
    hdiff = hnew - hmax
    wdiff = wnew - wmax
    
        If hdiff > wdiff Then
        
            Selection.ShapeRange.Height = hmax
        
        End If
    
        If wdiff > hdiff Then
        
            Selection.ShapeRange.Width = wmax
            
        End If
    
    End If

    Selection.ShapeRange.Rotation = 0#
    Selection.ShapeRange.PictureFormat.Brightness = 0.5
    Selection.ShapeRange.PictureFormat.Contrast = 0.5
    Selection.ShapeRange.PictureFormat.ColorType = msoPictureAutomatic
    Selection.ShapeRange.PictureFormat.CropLeft = 0#
    Selection.ShapeRange.PictureFormat.CropRight = 0#
    Selection.ShapeRange.PictureFormat.CropTop = 0#
    Selection.ShapeRange.PictureFormat.CropBottom = 0#
'ActiveSheet.protect ("GTMG")
End Sub
Sub GetPicture5()
Dim TempFileName, FilePrefix, FileExtension As String
Dim fs, f, s
Dim hmax, wmax, hnew, wnew, hdiff, wdiff As Integer

Const nFMax As Long = 51200
hmax = 242
wmax = 402
    '''''''''''''''''  Browse for  the picture    '''''''''''''''''''
Application.EnableEvents = True

    TempFileName = Application.GetOpenFilename("All Files (*.*), *.*")
    If (TempFileName <> False) Then
        FilePrefix = Left(TempFileName, Len(TempFileName) - 4)
        FileExtension = Right(TempFileName, 3)
        'If LCase(FileExtension) <> "jpg" Then
            'MsgBox "Picture must be a JPEG file (.jpg extension)."
            'Exit Sub
        'End If
    Else
        Exit Sub
    End If

    '''''''''''  Verify that the .jpg is less than 200KB
    Set fs = CreateObject("Scripting.FileSystemObject")
    
    Set f = fs.Getfile(TempFileName)    'Get file attributes
    If f.Size > nFMax Then
        s = "Picture can not be more than 50KB!"
        MsgBox s, 0, UCase(f.Name) & " uses " & f.Size & " bytes."
        Exit Sub
    End If
    Worksheets("Additional Pictures").Activate
    Range("A1").Select
    Sheets("Additional Pictures").Unprotect ("GTMG")
    ActiveSheet.Range("A41").Select    'Position next to picture
    
    ActiveSheet.Pictures.Insert(TempFileName).Select
    Selection.ShapeRange.LockAspectRatio = msoTrue

    hnew = Selection.ShapeRange.Height
    wnew = Selection.ShapeRange.Width
    
    If hnew > hmax Or wnew > wmax Then
    
    hdiff = hnew - hmax
    wdiff = wnew - wmax
    
        If hdiff > wdiff Then
        
            Selection.ShapeRange.Height = hmax
        
        End If
    
        If wdiff > hdiff Then
        
            Selection.ShapeRange.Width = wmax
            
        End If
    
    End If

    hnew = Selection.ShapeRange.Height
    wnew = Selection.ShapeRange.Width
    
    If hnew > hmax Or wnew > wmax Then
    
    hdiff = hnew - hmax
    wdiff = wnew - wmax
    
        If hdiff > wdiff Then
        
            Selection.ShapeRange.Height = hmax
        
        End If
    
        If wdiff > hdiff Then
        
            Selection.ShapeRange.Width = wmax
            
        End If
    
    End If

    Selection.ShapeRange.Rotation = 0#
    Selection.ShapeRange.PictureFormat.Brightness = 0.5
    Selection.ShapeRange.PictureFormat.Contrast = 0.5
    Selection.ShapeRange.PictureFormat.ColorType = msoPictureAutomatic
    Selection.ShapeRange.PictureFormat.CropLeft = 0#
    Selection.ShapeRange.PictureFormat.CropRight = 0#
    Selection.ShapeRange.PictureFormat.CropTop = 0#
    Selection.ShapeRange.PictureFormat.CropBottom = 0#

    'ActiveSheet.protect ("GTMG")
End Sub
Sub GetPicture6()
Dim TempFileName, FilePrefix, FileExtension As String
Dim fs, f, s
Dim hmax, wmax, hnew, wnew, hdiff, wdiff As Integer

Const nFMax As Long = 51200
hmax = 242
wmax = 402
    '''''''''''''''''  Browse for  the picture    '''''''''''''''''''
Application.EnableEvents = True

    TempFileName = Application.GetOpenFilename("All Files (*.*), *.*")
    If (TempFileName <> False) Then
        FilePrefix = Left(TempFileName, Len(TempFileName) - 4)
        FileExtension = Right(TempFileName, 3)
        'If LCase(FileExtension) <> "jpg" Then
            'MsgBox "Picture must be a JPEG file (.jpg extension)."
            'Exit Sub
        'End If
    Else
        Exit Sub
    End If

    '''''''''''  Verify that the .jpg is less than 200KB
    Set fs = CreateObject("Scripting.FileSystemObject")
    
    Set f = fs.Getfile(TempFileName)    'Get file attributes
    If f.Size > nFMax Then
        s = "Picture can not be more than 50KB!"
        MsgBox s, 0, UCase(f.Name) & " uses " & f.Size & " bytes."
        Exit Sub
    End If
    Worksheets("Additional Pictures").Activate
    Range("A1").Select
    Sheets("Additional Pictures").Unprotect ("GTMG")
    ActiveSheet.Range("K41").Select    'Position next to picture
    
    ActiveSheet.Pictures.Insert(TempFileName).Select
    Selection.ShapeRange.LockAspectRatio = msoTrue

    hnew = Selection.ShapeRange.Height
    wnew = Selection.ShapeRange.Width
    
    If hnew > hmax Or wnew > wmax Then
    
    hdiff = hnew - hmax
    wdiff = wnew - wmax
    
        If hdiff > wdiff Then
        
            Selection.ShapeRange.Height = hmax
        
        End If
    
        If wdiff > hdiff Then
        
            Selection.ShapeRange.Width = wmax
            
        End If
    
    End If

    hnew = Selection.ShapeRange.Height
    wnew = Selection.ShapeRange.Width
    
    If hnew > hmax Or wnew > wmax Then
    
    hdiff = hnew - hmax
    wdiff = wnew - wmax
    
        If hdiff > wdiff Then
        
            Selection.ShapeRange.Height = hmax
        
        End If
    
        If wdiff > hdiff Then
        
            Selection.ShapeRange.Width = wmax
            
        End If
    
    End If

    Selection.ShapeRange.Rotation = 0#
    Selection.ShapeRange.PictureFormat.Brightness = 0.5
    Selection.ShapeRange.PictureFormat.Contrast = 0.5
    Selection.ShapeRange.PictureFormat.ColorType = msoPictureAutomatic
    Selection.ShapeRange.PictureFormat.CropLeft = 0#
    Selection.ShapeRange.PictureFormat.CropRight = 0#
    Selection.ShapeRange.PictureFormat.CropTop = 0#
    Selection.ShapeRange.PictureFormat.CropBottom = 0#

    'ActiveSheet.protect ("GTMG")
End Sub



Attribute VB_Name = "Module2"
Public tempdateF As String

Sub protect()
ActiveSheet.protect ("GTMG")
End Sub
Sub Macro2() 'This is called by the ASP page for loading pictures.
'
' Macro2 Macro
' Macro recorded 1/21/2008 by Don Barclay
'
    Application.DisplayAlerts = False
    Sheets("Quote Sheet").Unprotect ("GTMG")
    Sheets("Stewardship").Unprotect ("GTMG")
    ActiveWorkbook.SaveAs Filename:="c:\temp\temp.htm", FileFormat:= _
        xlHtml, ReadOnlyRecommended:=False, CreateBackup:=False
        
    ActiveWorkbook.SaveAs Filename:="c:\temp\temp.xls", FileFormat:= _
        xlNormal, Password:="", WriteResPassword:="", ReadOnlyRecommended:=False _
        , CreateBackup:=False
    
    Sheets("Quote Sheet").protect ("GTMG")
    Sheets("Stewardship").protect ("GTMG")
End Sub

Sub Macro3()


Application.Goto Reference:="R175C62"
    ActiveCell.FormulaR1C1 = "ALL - ALL SEASONS"
    Application.Goto Reference:="R176C62"
    ActiveCell.FormulaR1C1 = "1 - SPRING"
    Application.Goto Reference:="R177C62"
    ActiveCell.FormulaR1C1 = "2  - SUMMER "
    ActiveCell.FormulaR1C1 = "2  - SUMMER "
    Application.Goto Reference:="R176C62"
    ActiveCell.FormulaR1C1 = "1   - SPRING"
    Application.Goto Reference:="R177C62"
    ActiveCell.FormulaR1C1 = "2  - SUMMER "
    Application.Goto Reference:="R178C62"
    ActiveCell.FormulaR1C1 = "3  - bts"
    ActiveCell.FormulaR1C1 = "3  - BTD"
    ActiveCell.FormulaR1C1 = "3  - BTS"
    Application.Goto Reference:="R179C62"
    ActiveCell.FormulaR1C1 = "4  - FALL"
    Application.Goto Reference:="R180C62"
    ActiveCell.FormulaR1C1 = "5  - WINTER"
      Application.Goto Reference:="R181C62"
    ActiveCell.FormulaR1C1 = ""
      Application.Goto Reference:="R182C62"
    ActiveCell.FormulaR1C1 = ""
      Application.Goto Reference:="R183C62"
    ActiveCell.FormulaR1C1 = ""
      Application.Goto Reference:="R184C62"
    ActiveCell.FormulaR1C1 = ""
      Application.Goto Reference:="R185C62"
    ActiveCell.FormulaR1C1 = ""
      Application.Goto Reference:="R186C62"
    ActiveCell.FormulaR1C1 = ""
      Application.Goto Reference:="R187C62"
    ActiveCell.FormulaR1C1 = ""
      Application.Goto Reference:="R188C62"
    ActiveCell.FormulaR1C1 = ""
End Sub

'This one is used.
Sub macro4()
   UserForm1.Show
   
   
If tempdateF <> "" Then
If tempdateF <> "C" Then
ActiveSheet.Range("U76") = Format(tempdateF, "mm/dd/yy")
'ActiveSheet.Range("B111") = "PO Created on Date (mm/dd/yy): " & tempdateF


Dim idf
Dim period
Dim year
Dim rate
'The below line was commented out for ENH2978
'tempdateF = DateAdd("d", -38, Format(tempdateF, "mm/dd/yy"))

For idf = 227 To 250
    
    If DateDiff("d", tempdateF, ActiveSheet.Range("EU" & idf)) <= 0 And DateDiff("d", tempdateF, ActiveSheet.Range("EV" & idf)) >= 0 Then
            period = ActiveSheet.Range("ES" & idf)
            year = ActiveSheet.Range("ET" & idf)
    End If


Next

For idf = 196 To 219
    
    If ActiveSheet.Range("ES" & idf) = period And ActiveSheet.Range("ET" & idf) = year - 2000 Then
            rate = ActiveSheet.Range("EU" & idf)
            rate = 1 - (rate / 100)
            rate = Round(rate, 4)
            ActiveSheet.Range("L63") = rate
    End If
Next























End If

Else
ActiveSheet.Range("U76") = ""
End If
End Sub

Sub macro5()
   UserForm1.Show
If tempdateF <> "C" Then
ActiveSheet.Range("Z76") = tempdateF
'ActiveSheet.Range("B111") = "PO Created on Date (mm/dd/yy): " & tempdateF
End If
End Sub

Sub macro6()
   UserForm1.Show
If tempdateF <> "C" Then
ActiveSheet.Range("AE76") = tempdateF
'ActiveSheet.Range("B111") = "PO Created on Date (mm/dd/yy): " & tempdateF
End If
End Sub

Sub macro7()
   UserForm1.Show
If tempdateF <> "C" Then
ActiveSheet.Range("AJ76") = tempdateF
'ActiveSheet.Range("B111") = "PO Created on Date (mm/dd/yy): " & tempdateF
End If
End Sub

Sub macro8()
Range("BO31") = True
Range("BO32") = False
Range("BO33") = False
Range("BO34") = False
Range("BO35") = False
End Sub

Sub macro9()
Range("BO31") = False
Range("BO32") = True
Range("BO33") = False
Range("BO34") = False
Range("BO35") = False

End Sub
Sub macro10()
Range("BO31") = False
Range("BO32") = False
Range("BO33") = True
Range("BO34") = False
Range("BO35") = False
End Sub
Sub macro11()
Range("BO31") = False
Range("BO32") = False
Range("BO33") = False
Range("BO34") = True
Range("BO35") = False
End Sub
Sub macro12()
Range("BO31") = False
Range("BO32") = False
Range("BO33") = False
Range("BO34") = False
Range("BO35") = True
End Sub
Sub macro13()
Sheets("Quote Sheet").Range("BO28").Value = "Non-Peak"
End Sub
Sub macro14()
  Sheets("Quote Sheet").Range("BO28").Value = "Peak"
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 5, 10, MSForms, CommandButton"
Attribute VB_Control = "OptAll, 426, 16, MSForms, OptionButton"
Attribute VB_Control = "OptOnt, 427, 17, MSForms, OptionButton"
Attribute VB_Control = "OptQue, 428, 18, MSForms, OptionButton"
Attribute VB_Control = "OptionButton6, 446, 19, MSForms, OptionButton"
Attribute VB_Control = "OptionButton7, 447, 20, MSForms, OptionButton"
Attribute VB_Control = "CheckBox1, 484, 21, MSForms, CheckBox"
Attribute VB_Control = "CheckBox2, 486, 22, MSForms, CheckBox"
Attribute VB_Control = "CheckBox3, 487, 23, MSForms, CheckBox"
Attribute VB_Control = "CheckBox4, 488, 24, MSForms, CheckBox"
Attribute VB_Control = "CheckBox5, 489, 25, MSForms, CheckBox"
Attribute VB_Control = "CheckBox6, 490, 26, MSForms, CheckBox"
Attribute VB_Control = "CheckBox7, 491, 27, MSForms, CheckBox"
Attribute VB_Control = "CheckBox8, 492, 28, MSForms, CheckBox"
Attribute VB_Control = "OptQUEBEC, 547, 29, MSForms, OptionButton"
Attribute VB_Control = "OptOntario, 548, 30, MSForms, OptionButton"
Attribute VB_Control = "CheckBox9, 583, 33, MSForms, CheckBox"
Attribute VB_Control = "CheckBox10, 584, 34, MSForms, CheckBox"
Attribute VB_Control = "CheckBox11, 585, 35, MSForms, CheckBox"
Attribute VB_Control = "CommandButton5, 586, 36, MSForms, CommandButton"
Attribute VB_Control = "CheckBox17, 587, 37, MSForms, CheckBox"
Attribute VB_Control = "CheckBox12, 589, 38, MSForms, CheckBox"
Attribute VB_Control = "CheckBox13, 601, 39, MSForms, CheckBox"
Public bOptAll As Boolean
Public bOptOnt As Boolean
Public bOptQue As Boolean

'WARNING: This code is not even used!!!
Private Sub CommandButton2_Click()
   UserForm1.Show
   
   
If tempdateF <> "" Then
If tempdateF <> "C" Then
ActiveSheet.Range("U76") = Format(tempdateF, "mm/dd/yy")

'ActiveSheet.Range("B111") = "PO Created on Date (mm/dd/yy): " & tempdateF


Dim idf
Dim period
Dim year
Dim rate
tempdateF = DateAdd("d", -38, tempdateF)

For idf = 561 To 584
    
   
   
    
    If DateDiff("d", tempdateF, ActiveSheet.Range("BH" & idf)) <= 0 And DateDiff("d", tempdateF, ActiveSheet.Range("BI" & idf)) >= 0 Then
            period = ActiveSheet.Range("BF" & idf)
            year = ActiveSheet.Range("BG" & idf)
    End If


Next

For idf = 530 To 553
    
    
    
    If ActiveSheet.Range("BF" & idf) = period And ActiveSheet.Range("BG" & idf) = year - 2000 Then
            rate = ActiveSheet.Range("BH" & idf)
            rate = 1 - (rate / 100)
            rate = Round(rate, 4)
            ActiveSheet.Range("L63") = rate
    End If
Next























End If

Else
ActiveSheet.Range("U76") = ""
End If
End Sub

Private Sub CommandButton3_Click()
   UserForm1.Show
If tempdateF <> "C" Then
ActiveSheet.Range("Z76") = tempdateF
'ActiveSheet.Range("B111") = "PO Created on Date (mm/dd/yy): " & tempdateF
End If
End Sub

Private Sub CommandButton4_Click()
   UserForm1.Show
If tempdateF <> "C" Then
ActiveSheet.Range("AE76") = tempdateF
'ActiveSheet.Range("B111") = "PO Created on Date (mm/dd/yy): " & tempdateF
End If
End Sub

Private Sub CommandButton6_Click()
   UserForm1.Show
If tempdateF <> "C" Then
ActiveSheet.Range("AJ76") = tempdateF
'ActiveSheet.Range("B111") = "PO Created on Date (mm/dd/yy): " & tempdateF
End If
End Sub

Private Sub CheckBox17_Click()

End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
     

    
        If Not Intersect(Target, Range("L69:Q69")) Is Nothing Then '''sets which cell(s) to work with
         If Sheets("Quote Sheet").Range("B69").Value = "Misc Allowance Type" Then
         MsgBox "You must select a Misc Allowance Type before you can edit this cell!!"
         ActiveSheet.Range("B69").Select
         End If
    End If
  
  
    If Not Intersect(Target, Range("AR69:AW69")) Is Nothing Then '''sets which cell(s) to work with
         If Sheets("Quote Sheet").Range("AH69").Value = "Misc Allowance Type" Then
         MsgBox "You must select a Misc Allowance Type before you can edit this cell!!"
         ActiveSheet.Range("AH69").Select
         End If
    End If
    
    'The below lines were commented out for ENH2978
  
      'If Not Intersect(Target, Range("U76:AJ76")) Is Nothing Then '''sets which cell(s) to work with
         
         'MsgBox "You can not edit this cell. Please click on the flow date button to enter a date."
         'ActiveSheet.Range("L62").Select
         
    'End If
  
End Sub
Private Sub ListBox1_Click()
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
        xlBetween, Formula1:="=$CU$200:$DD$242"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = ""
        .InputMessage = ""
        .ErrorMessage = ""
        .ShowInput = True
        .ShowError = True
    End With
End Sub

Private Sub CheckBox1_Click()

    CheckBox2 = False

End Sub

Private Sub CheckBox10_Click()
    CheckBox11 = False
End Sub

Private Sub CheckBox11_Click()
    CheckBox10 = False
End Sub

Private Sub CheckBox2_Click()

    CheckBox1 = False

End Sub

Private Sub CheckBox3_Click()

    CheckBox4 = False

End Sub

Private Sub CheckBox4_Click()

    CheckBox3 = False

End Sub

Private Sub CheckBox5_Click()

    CheckBox6 = False

End Sub

Private Sub CheckBox6_Click()

    CheckBox5 = False

End Sub

Private Sub CommandButton5_Click()

If Range("L24") = "" Or Range("L24") = "Pull-Down Menu" Then
    MsgBox ("Please select a country of Origin in L24")
Else
    Dim ReProtect As Boolean 'Switch to reProtect worksheet.
    ReProtect = False 'If reProtect is false, AKA is already unprotected, then don't reprotect it.
    ReProtect = Sheets("Quote Sheet").ProtectContents 'This assigns reprotect to true/false
    Dim Name
    Name = ActiveWorkbook.FullName
    Application.DisplayAlerts = False
    
    ActiveSheet.Unprotect ("GTMG")
    Sheets("Stewardship").Unprotect ("GTMG")
    'ActiveWorkbook.SaveAs Filename:="c:\temp\temp.htm", FileFormat:= xlHtml , ReadOnlyRecommended:=False, CreateBackup:=False
    ActiveWorkbook.SaveAs Filename:=Name, FileFormat:=xlNormal, Password:="", WriteResPassword:="", ReadOnlyRecommended:=False _
    , CreateBackup:=False
    
    Range("A499").Select
    ActiveSheet.Hyperlinks.Add Anchor:=Selection, Address:="http://websrv01/excelweb/Default.asp?filename=" & Name _
    , TextToDisplay:="Link"
    Range("A499").Select
    Application.DisplayAlerts = False
    Selection.Hyperlinks(1).Follow NewWindow:=False, AddHistory:=True
    Range("A1").Select
    
    If ReProtect = True Then
        ActiveSheet.protect ("GTMG")
    End If
    Sheets("Stewardship").protect ("GTMG")
End If

End Sub

Sub optAll_Click()
Application.EnableEvents = True

OptOnt.Value = False
OptQue.Value = False
OptOntario.Value = False
OptQUEBEC.Value = False
Sheets("Quote Sheet").Range("J78").Value = 22    'A Stores
Sheets("Quote Sheet").Range("J79").Value = 65    'B Stores
Sheets("Quote Sheet").Range("J80").Value = 78    'C Stores
Sheets("Quote Sheet").Range("J81").Value = 54    'D Stores

End Sub

Private Sub OptionButton1_Click()

Range("BO31") = True
Range("BO32") = False
Range("BO33") = False
Range("BO34") = False
Range("BO35") = False

End Sub

Private Sub OptionButton11_Click()

End Sub

Private Sub OptionButton2_Click()

Range("BO31") = False
Range("BO32") = True
Range("BO33") = False
Range("BO34") = False
Range("BO35") = False

End Sub

Private Sub OptionButton3_Click()
Range("BO31") = False
Range("BO32") = False
Range("BO33") = True
Range("BO34") = False
Range("BO35") = False
End Sub

Private Sub OptionButton4_Click()

Range("BO31") = False
Range("BO32") = False
Range("BO33") = False
Range("BO34") = True
Range("BO35") = False

End Sub

Private Sub OptionButton5_Click()

Range("BO31") = False
Range("BO32") = False
Range("BO33") = False
Range("BO34") = False
Range("BO35") = True

End Sub

Private Sub OptNonPeak_Click()

    Sheets("Quote Sheet").Range("BO28").Value = "Non-Peak"

End Sub

Private Sub optOnt_Click()
Application.EnableEvents = True

OptAll.Value = False
OptQue.Value = False
OptOntario.Value = False
OptQUEBEC.Value = False
Sheets("Quote Sheet").Range("J78").Value = 15    'A Stores
Sheets("Quote Sheet").Range("J79").Value = 45    'B Stores
Sheets("Quote Sheet").Range("J80").Value = 73    'C Stores
Sheets("Quote Sheet").Range("J81").Value = 53    'D Stores
End Sub

Private Sub OptOntario_Click()

Application.EnableEvents = True

OptAll.Value = False
OptOnt.Value = False
OptQue.Value = False
OptQUEBEC.Value = False
Sheets("Quote Sheet").Range("J78").Value = 13    'A Stores
Sheets("Quote Sheet").Range("J79").Value = 27    'B Stores
Sheets("Quote Sheet").Range("J80").Value = 43    'C Stores
Sheets("Quote Sheet").Range("J81").Value = 32    'D Stores
End Sub

Private Sub optQue_Click()
Application.EnableEvents = True

OptAll.Value = False
OptOnt.Value = False
OptQUEBEC.Value = False
OptOntario.Value = False
Sheets("Quote Sheet").Range("J78").Value = 7    'A Stores
Sheets("Quote Sheet").Range("J79").Value = 20    'B Stores
Sheets("Quote Sheet").Range("J80").Value = 5    'C Stores
Sheets("Quote Sheet").Range("J81").Value = 1    'D Stores

End Sub

Private Sub OptPeak_Click()

    Sheets("Quote Sheet").Range("BO28").Value = "Peak"

End Sub



Private Sub CommandButton1_Click()
    Call GetPicture
End Sub

Sub CheckBox193_Click()

CheckBox194 = False

End Sub

Sub CheckBox194_Click()

CheckBox193 = False

End Sub

Private Sub OptionButton7_Click()

OptionButton6 = False

End Sub

Private Sub OptionButton6_Click()

OptionButton7 = False

End Sub

Private Sub OptQUEBEC_Click()

Application.EnableEvents = True

OptAll.Value = False
OptOnt.Value = False
OptQue.Value = False
OptOntario.Value = False
Sheets("Quote Sheet").Range("J78").Value = 1    'A Stores
Sheets("Quote Sheet").Range("J79").Value = 14    'B Stores
Sheets("Quote Sheet").Range("J80").Value = 28   'C Stores
Sheets("Quote Sheet").Range("J81").Value = 20   'D Stores

End Sub
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 1, 0, MSForms, CommandButton"
Attribute VB_Control = "CommandButton2, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "CommandButton3, 3, 2, MSForms, CommandButton"
Attribute VB_Control = "CommandButton4, 4, 3, MSForms, CommandButton"
Attribute VB_Control = "CommandButton5, 5, 4, MSForms, CommandButton"
Attribute VB_Control = "CommandButton6, 6, 5, MSForms, CommandButton"
Private Sub CommandButton1_Click()

    GetPicture1

End Sub

Private Sub CommandButton2_Click()

    GetPicture6

End Sub

Private Sub CommandButton3_Click()

    GetPicture5

End Sub

Private Sub CommandButton4_Click()

    GetPicture4

End Sub

Private Sub CommandButton5_Click()

    GetPicture3

End Sub

Private Sub CommandButton6_Click()

    GetPicture2

End Sub
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cboCatPulldown1, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "cboCatPulldown2, 2, 1, MSForms, ComboBox"
Attribute VB_Control = "cboCatPulldown3, 3, 2, MSForms, ComboBox"
Attribute VB_Control = "cboCatPulldown4, 4, 3, MSForms, ComboBox"
Attribute VB_Control = "cboSubCatPullDown1, 5, 4, MSForms, ComboBox"
Attribute VB_Control = "cboSubCatPullDown2, 6, 5, MSForms, ComboBox"
Attribute VB_Control = "cboSubCatPullDown3, 7, 6, MSForms, ComboBox"
Attribute VB_Control = "cboSubCatPulldown4, 8, 7, MSForms, ComboBox"
Attribute VB_Control = "cboBatteryMat, 9, 8, MSForms, ComboBox"
Attribute VB_Control = "cboBatteryType, 10, 9, MSForms, ComboBox"
Attribute VB_Control = "cboPkgSHanger, 11, 10, MSForms, ComboBox"
Attribute VB_Control = "lblPkgMHanger, 12, 11, MSForms, Label"
Attribute VB_Control = "Label1, 13, 12, MSForms, Label"
Attribute VB_Control = "Label2, 14, 13, MSForms, Label"
Attribute VB_Control = "Label3, 15, 14, MSForms, Label"
Attribute VB_Control = "Label4, 16, 15, MSForms, Label"
Attribute VB_Control = "Label5, 17, 16, MSForms, Label"
Attribute VB_Control = "Label6, 18, 17, MSForms, Label"
Attribute VB_Control = "Label7, 19, 18, MSForms, Label"
Attribute VB_Control = "Label8, 20, 19, MSForms, Label"
Attribute VB_Control = "cboPkgMHanger, 21, 20, MSForms, ComboBox"
Attribute VB_Control = "cboPkgLHanger, 22, 21, MSForms, ComboBox"
Attribute VB_Control = "cboPkgSPHanger, 23, 22, MSForms, ComboBox"
Attribute VB_Control = "cboPkgCHanger, 24, 23, MSForms, ComboBox"
Attribute VB_Control = "cboPkgTagSwiftAttach, 25, 24, MSForms, ComboBox"
Attribute VB_Control = "cboPkgSShoe, 26, 25, MSForms, ComboBox"
Attribute VB_Control = "cboPkgMShoe, 27, 26, MSForms, ComboBox"
Attribute VB_Control = "cboPkgLShoe, 28, 27, MSForms, ComboBox"
Attribute VB_Control = "cboPkgLPHanger, 29, 28, MSForms, ComboBox"
Attribute VB_Control = "Label9, 30, 29, MSForms, Label"
Attribute VB_Control = "btnClearAll, 31, 30, MSForms, CommandButton"

Public isP As Boolean 'isP stands for isprotected

Dim category(8) As String
Dim subcategory(7, 45) As String
Dim categoryCode(8) As String
Dim subCategoryCode(7, 45) As String
Dim subCategoryCodeCounter1 As Integer
Dim subCategoryCodeCounter2 As Integer
Dim subCategoryCodeCounter3 As Integer
Dim subCategoryCodeCounter4 As Integer

Dim BatteryMaterial(6) As String
Dim BatteryMaterialCode(6) As String
Dim BatteryType(11) As String
Dim BatteryTypeCode(11) As String

Dim trackSelections(4) As Integer 'This array is used to keep track of what. There are 4 package types. 0-10
Dim selectedSGList As Boolean 'This boolean is used to keep track if user manually changed Packaging types instead of clicking SG
'True means user clicked the SG lists false means manual change

Const errMsg = "The packaging type is already filled!"
Const constDefault1 = "Pull-Down Menu" 'A couple of constants to make changing the display easier down the road.
Const constDefault2 = "Pull-Down"

'This sub is used to check if a worksheet is protected or not.
'I need this because if the sheet is already protected, then keep it protected. Otherwise keep it unprotected.
Public Function checkProtected()
    If Me.ProtectContents = True Then
        checkProtected = True
    Else
        checkProtected = False
    End If
End Function

'The reason I am making a procedure to instantiate variables is because VBA is giving a compile error when I try to
'instantiate it globally. So, I will declare globally, and instantiate via this sub and have all other functions call
'this sub.
Private Sub activateCategories()
    
    category(0) = "Pull-Down Menu"
    category(1) = "Printed Paper"
    category(2) = "Paper"
    category(3) = "Plastics"
    category(4) = "Aluminum"
    category(5) = "Steel"
    category(6) = "Glass"
    'category(7) = "Household Hazardous Waste"
    'This is being removed on 2014/02 because Eric Cuillier removed it from the AS400 list.
    
    categoryCode(0) = ""
    categoryCode(1) = "01"
    categoryCode(2) = "02"
    categoryCode(3) = "03"
    categoryCode(4) = "04"
    categoryCode(5) = "05"
    categoryCode(6) = "06"
    'categoryCode(7) = "07"

    subcategory(1, 0) = "Pull-Down Menu"
    subcategory(1, 1) = Cells(108, 20)
    subcategory(1, 2) = Cells(109, 20)
    subcategory(1, 3) = Cells(110, 20)
    subcategory(1, 4) = Cells(111, 20)
    subcategory(1, 5) = Cells(112, 20)
    subcategory(1, 6) = Cells(113, 20)
    subcategory(1, 7) = Cells(114, 20)
    subcategory(1, 8) = Cells(115, 20)
    subcategory(1, 9) = Cells(116, 20)
    subcategory(1, 10) = Cells(117, 20)
    
    subCategoryCode(1, 0) = ""
    subCategoryCode(1, 1) = Cells(108, 18)
    subCategoryCode(1, 2) = Cells(109, 18)
    subCategoryCode(1, 3) = Cells(110, 18)
    subCategoryCode(1, 4) = Cells(111, 18)
    subCategoryCode(1, 5) = Cells(112, 18)
    subCategoryCode(1, 6) = Cells(113, 18)
    subCategoryCode(1, 7) = Cells(114, 18)
    subCategoryCode(1, 8) = Cells(115, 18)
    subCategoryCode(1, 9) = Cells(116, 18)
    subCategoryCode(1, 10) = Cells(117, 18)
    
    subcategory(2, 0) = "Pull-Down Menu"
    subcategory(2, 1) = Cells(53, 20)
    subcategory(2, 2) = Cells(54, 20)
    subcategory(2, 3) = Cells(55, 20)
    subcategory(2, 4) = Cells(56, 20)
    subcategory(2, 5) = Cells(57, 20)
    subcategory(2, 6) = Cells(58, 20)
    subcategory(2, 7) = Cells(59, 20)
    subcategory(2, 8) = Cells(60, 20)
    subcategory(2, 9) = Cells(61, 20)
    subcategory(2, 10) = Cells(62, 20)
    subcategory(2, 11) = Cells(63, 20)
    subcategory(2, 12) = Cells(64, 20)
    subcategory(2, 13) = Cells(65, 20)
    
    subCategoryCode(2, 0) = ""
    subCategoryCode(2, 1) = Cells(53, 18)
    subCategoryCode(2, 2) = Cells(54, 18)
    subCategoryCode(2, 3) = Cells(55, 18)
    subCategoryCode(2, 4) = Cells(56, 18)
    subCategoryCode(2, 5) = Cells(57, 18)
    subCategoryCode(2, 6) = Cells(58, 18)
    subCategoryCode(2, 7) = Cells(59, 18)
    subCategoryCode(2, 8) = Cells(60, 18)
    subCategoryCode(2, 9) = Cells(61, 18)
    subCategoryCode(2, 10) = Cells(62, 18)
    subCategoryCode(2, 11) = Cells(63, 18)
    subCategoryCode(2, 12) = Cells(64, 18)
    subCategoryCode(2, 13) = Cells(65, 18)
    
    subcategory(3, 0) = "Pull-Down Menu"
    subcategory(3, 1) = Cells(66, 20)
    subcategory(3, 2) = Cells(67, 20)
    subcategory(3, 3) = Cells(68, 20)
    subcategory(3, 4) = Cells(69, 20)
    subcategory(3, 5) = Cells(70, 20)
    subcategory(3, 6) = Cells(71, 20)
    subcategory(3, 7) = Cells(72, 20)
    subcategory(3, 8) = Cells(73, 20)
    subcategory(3, 9) = Cells(74, 20)
    subcategory(3, 10) = Cells(75, 20)
    subcategory(3, 11) = Cells(76, 20)
    subcategory(3, 12) = Cells(77, 20)
    subcategory(3, 13) = Cells(78, 20)
    subcategory(3, 14) = Cells(79, 20)
    subcategory(3, 15) = Cells(80, 20)
    subcategory(3, 16) = Cells(81, 20)
    subcategory(3, 17) = Cells(82, 20)
    subcategory(3, 18) = Cells(83, 20)
    subcategory(3, 19) = Cells(84, 20)
    subcategory(3, 20) = Cells(85, 20)
    subcategory(3, 21) = Cells(86, 20)
    subcategory(3, 22) = Cells(87, 20)
    subcategory(3, 23) = Cells(88, 20)
    subcategory(3, 24) = Cells(89, 20)
    subcategory(3, 25) = Cells(90, 20)
    subcategory(3, 26) = Cells(91, 20)
    subcategory(3, 27) = Cells(92, 20)
    subcategory(3, 28) = Cells(93, 20)
    subcategory(3, 29) = Cells(94, 20)
    subcategory(3, 30) = Cells(95, 20)
    subcategory(3, 31) = Cells(96, 20)
    subcategory(3, 32) = Cells(97, 20)
    subcategory(3, 33) = Cells(98, 20)
    subcategory(3, 34) = Cells(99, 20)
    subcategory(3, 35) = Cells(100, 20)
    subcategory(3, 36) = Cells(101, 20)
    subcategory(3, 37) = Cells(102, 20)
    subcategory(3, 38) = Cells(103, 20)
    subcategory(3, 39) = Cells(104, 20)
    subcategory(3, 40) = Cells(105, 20)
    subcategory(3, 41) = Cells(106, 20)
    subcategory(3, 42) = Cells(107, 20)
    
    subCategoryCode(3, 0) = ""
    subCategoryCode(3, 1) = Cells(66, 18)
    subCategoryCode(3, 2) = Cells(67, 18)
    subCategoryCode(3, 3) = Cells(68, 18)
    subCategoryCode(3, 4) = Cells(69, 18)
    subCategoryCode(3, 5) = Cells(70, 18)
    subCategoryCode(3, 6) = Cells(71, 18)
    subCategoryCode(3, 7) = Cells(72, 18)
    subCategoryCode(3, 8) = Cells(73, 18)
    subCategoryCode(3, 9) = Cells(74, 18)
    subCategoryCode(3, 10) = Cells(75, 18)
    subCategoryCode(3, 11) = Cells(76, 18)
    subCategoryCode(3, 12) = Cells(77, 18)
    subCategoryCode(3, 13) = Cells(78, 18)
    subCategoryCode(3, 14) = Cells(79, 18)
    subCategoryCode(3, 15) = Cells(80, 18)
    subCategoryCode(3, 16) = Cells(81, 18)
    subCategoryCode(3, 17) = Cells(82, 18)
    subCategoryCode(3, 18) = Cells(83, 18)
    subCategoryCode(3, 19) = Cells(84, 18)
    subCategoryCode(3, 20) = Cells(85, 18)
    subCategoryCode(3, 21) = Cells(86, 18)
    subCategoryCode(3, 22) = Cells(87, 18)
    subCategoryCode(3, 23) = Cells(88, 18)
    subCategoryCode(3, 24) = Cells(89, 18)
    subCategoryCode(3, 25) = Cells(90, 18)
    subCategoryCode(3, 26) = Cells(91, 18)
    subCategoryCode(3, 27) = Cells(92, 18)
    subCategoryCode(3, 28) = Cells(93, 18)
    subCategoryCode(3, 29) = Cells(94, 18)
    subCategoryCode(3, 30) = Cells(95, 18)
    subCategoryCode(3, 31) = Cells(96, 18)
    subCategoryCode(3, 32) = Cells(97, 18)
    subCategoryCode(3, 33) = Cells(98, 18)
    subCategoryCode(3, 34) = Cells(99, 18)
    subCategoryCode(3, 35) = Cells(100, 18)
    subCategoryCode(3, 36) = Cells(101, 18)
    subCategoryCode(3, 37) = Cells(102, 18)
    subCategoryCode(3, 38) = Cells(103, 18)
    subCategoryCode(3, 39) = Cells(104, 18)
    subCategoryCode(3, 40) = Cells(105, 18)
    subCategoryCode(3, 41) = Cells(106, 18)
    subCategoryCode(3, 42) = Cells(107, 18)
    
    subcategory(4, 0) = "Pull-Down Menu"
    subcategory(4, 1) = Cells(39, 20)
    subcategory(4, 2) = Cells(40, 20)
    subcategory(4, 3) = Cells(41, 20)
    subcategory(4, 4) = Cells(42, 20)
    subcategory(4, 5) = Cells(43, 20)
    subcategory(4, 5) = Cells(44, 20)
        
    subCategoryCode(4, 0) = ""
    subCategoryCode(4, 1) = Cells(39, 18)
    subCategoryCode(4, 2) = Cells(40, 18)
    subCategoryCode(4, 3) = Cells(41, 18)
    subCategoryCode(4, 4) = Cells(42, 18)
    subCategoryCode(4, 5) = Cells(43, 18)
    subCategoryCode(4, 6) = Cells(44, 18)
    
    subcategory(5, 0) = "Pull-Down Menu"
    subcategory(5, 1) = Cells(118, 20)
    subcategory(5, 2) = Cells(119, 20)
    subcategory(5, 3) = Cells(120, 20)
    subcategory(5, 4) = Cells(121, 20)
    subcategory(5, 5) = Cells(122, 20)
    subcategory(5, 6) = Cells(123, 20)
       
    subCategoryCode(5, 0) = ""
    subCategoryCode(5, 1) = Cells(118, 18)
    subCategoryCode(5, 2) = Cells(119, 18)
    subCategoryCode(5, 3) = Cells(120, 18)
    subCategoryCode(5, 4) = Cells(121, 18)
    subCategoryCode(5, 5) = Cells(122, 18)
    subCategoryCode(5, 6) = Cells(123, 18)
    
    subcategory(6, 0) = "Pull-Down Menu"
    subcategory(6, 1) = Cells(45, 20)
    subcategory(6, 2) = Cells(46, 20)
    subcategory(6, 3) = Cells(47, 20)
    subcategory(6, 4) = Cells(48, 20)
    subcategory(6, 5) = Cells(49, 20)
    subcategory(6, 6) = Cells(50, 20)
    subcategory(6, 7) = Cells(51, 20)
    subcategory(6, 8) = Cells(52, 20)
    
    subCategoryCode(6, 0) = ""
    subCategoryCode(6, 1) = Cells(45, 18)
    subCategoryCode(6, 2) = Cells(46, 18)
    subCategoryCode(6, 3) = Cells(47, 18)
    subCategoryCode(6, 4) = Cells(48, 18)
    subCategoryCode(6, 5) = Cells(49, 18)
    subCategoryCode(6, 6) = Cells(50, 18)
    subCategoryCode(6, 7) = Cells(51, 18)
    subCategoryCode(6, 8) = Cells(52, 18)

    'Probably should delete this.
    'This is NOT USED 2014/02
    subcategory(7, 0) = "Pull-Down Menu"
    subcategory(7, 1) = "PET Bottles"
    subcategory(7, 2) = "HDPE Bottles And Jugs"
    subcategory(7, 3) = "Other Rigid Plastic"
    subcategory(7, 4) = "Other Steel and Metal Containers and Packaging"
    subcategory(7, 5) = "Clear (Flint) Glass"
    subcategory(7, 6) = "Coloured Glass"
    'This is NOT USED 2014/02
    subCategoryCode(7, 0) = ""
    subCategoryCode(7, 1) = "01"
    subCategoryCode(7, 2) = "02"
    subCategoryCode(7, 3) = "03"
    subCategoryCode(7, 4) = "04"
    subCategoryCode(7, 5) = "05"
    subCategoryCode(7, 6) = "06"

End Sub

Private Sub ActivateBatteryMat()
    BatteryMaterial(0) = "Pull-Down Menu"
    BatteryMaterial(1) = "Zinc Carbon"
    BatteryMaterial(2) = "Alkaline Manganese"
    BatteryMaterial(3) = "Zinc-Air"
    BatteryMaterial(4) = "Silver Oxide"
    BatteryMaterial(5) = "Lithium"
    
    BatteryMaterialCode(0) = ""
    BatteryMaterialCode(1) = "1"
    BatteryMaterialCode(2) = "2"
    BatteryMaterialCode(3) = "3"
    BatteryMaterialCode(4) = "4"
    BatteryMaterialCode(5) = "5"
End Sub

Private Sub btnClearAll_Click()
    Call resetMenu(1)
    Call resetMenu(2)
    Call resetMenu(3)
    Call resetMenu(4)
    Call resetMenu(6) 'Battery
    
    Call resetSGMenus
    
    trackSelections(1) = 0
    trackSelections(2) = 0
    trackSelections(3) = 0
    trackSelections(4) = 0

End Sub

Public Function lockDownCategories()
    Sheets("Stewardship").Range("E7").Locked = True
    Sheets("Stewardship").Range("E8").Locked = True
    Sheets("Stewardship").Range("E9").Locked = True
    Sheets("Stewardship").Range("E10").Locked = True
    Sheets("Stewardship").Range("E12").Locked = True
    
    Sheets("Stewardship").Range("G7").Locked = True
    Sheets("Stewardship").Range("G8").Locked = True
    Sheets("Stewardship").Range("G9").Locked = True
    Sheets("Stewardship").Range("G10").Locked = True
    Sheets("Stewardship").Range("G12").Locked = True
End Function

Private Sub cboBatteryMat_Change()
    isP = checkProtected()
    If isP = True Then
        Me.Unprotect ("GTMG")
    End If
    
    Call ActivateBatteryMat
    Dim i As Integer
    For i = 0 To UBound(BatteryMaterial)
        If Me.cboBatteryMat.Value = BatteryMaterial(i) Then
            Me.Range("E12") = BatteryMaterialCode(i)
            Me.Range("E12").Locked = True
        End If
    Next i
    
    If isP = True Then
        Me.protect ("GTMG")
    End If
End Sub

Private Sub ActivateBatteryType()
    BatteryType(0) = "Pull-Down Menu"
    BatteryType(1) = "Button - Stack"
    BatteryType(2) = "Button - Cell"
    BatteryType(3) = "AA"
    BatteryType(4) = "AAA"
    BatteryType(5) = "6V Oblong"
    BatteryType(6) = "6V Square"
    BatteryType(7) = "9V"
    BatteryType(8) = "D"
    BatteryType(9) = "C"
    BatteryType(10) = "Packs"
    
    BatteryTypeCode(0) = ""
    BatteryTypeCode(1) = "STK"
    BatteryTypeCode(2) = "CEL"
    BatteryTypeCode(3) = "AA"
    BatteryTypeCode(4) = "AAA"
    BatteryTypeCode(5) = "6VO"
    BatteryTypeCode(6) = "6VS"
    BatteryTypeCode(7) = "9V"
    BatteryTypeCode(8) = "D"
    BatteryTypeCode(9) = "C"
    BatteryTypeCode(10) = "PK"
End Sub

Private Sub cboBatteryType_Change()
    isP = checkProtected()
    If isP = True Then
        Me.Unprotect ("GTMG")
    End If
    
    Call ActivateBatteryType
    Dim i As Integer
    For i = 0 To UBound(BatteryType)
        If Me.cboBatteryType.Value = BatteryType(i) Then
            Me.Range("G12") = BatteryTypeCode(i)
            Me.Range("G12").Locked = True
        End If
    Next i
    
    If isP = True Then
        Me.protect ("GTMG")
    End If
End Sub

Private Sub cboCatPulldown1_Change()
    isP = checkProtected()
   
    
    Me.cboSubCatPullDown1.Clear
    Call activateCategories
    Dim i As Integer
    Dim j As Integer
    For i = 0 To UBound(category)
        If Me.cboCatPulldown1.Value = category(i) Then
            'Ubound(array, dimension of the array) *We are finding the length of the 2nd dimension
            For j = 0 To UBound(subcategory, 2)
                If (subcategory(i, j) = "") Then
                'If the value is blank, then don't add anything. AKA do nothing
                Else
                    Me.cboSubCatPullDown1.AddItem (subcategory(i, j))
                    subCategoryCodeCounter1 = i
                End If
            Next j
            If isP = True Then
                Me.Unprotect ("GTMG")
            End If
            Me.Range("E7") = categoryCode(i)
            Me.Range("E7").Locked = True
            If isP = True Then
                Me.protect ("GTMG")
            End If
        End If
    Next i
    
    If Me.cboSubCatPullDown1.ListCount > 0 Then
        Me.cboSubCatPullDown1.Value = "Pull-Down Menu"
    End If
    If isP = True Then
        Me.Unprotect ("GTMG")
    End If
    Me.Range("G7") = ""
    Me.Range("G7").Locked = True
    Me.Range("H7") = ""
    'Me.Range("H7").Locked = True
    If isP = True Then
        Me.protect ("GTMG")
    End If
    '**Temporarily cancel this because users shouldn't be able to change it after preselected Softgoods stuff
    'If trackSelections(1) <> 0 And selectedSGList = False Then
    '  Call deactivateSoftgoods(trackSelections(1))
    '   trackSelections(1) = 0
    'End If
    'selectedSGList = False
    
End Sub

Private Sub cboCatPulldown2_Change()
    isP = checkProtected()
    If isP = True Then
        Me.Unprotect ("GTMG")
    End If
    
    Me.cboSubCatPullDown2.Clear
    Call activateCategories
    
    Dim i As Integer
    Dim j As Integer
    For i = 0 To UBound(category)
        If Me.cboCatPulldown2.Value = category(i) Then
            'Ubound(array, dimension of the array) *We are finding the length of the 2nd dimension
            For j = 0 To UBound(subcategory, 2)
                If (subcategory(i, j) = "") Then
                'If the value is blank, then don't add anything. AKA do nothing
                Else
                    Me.cboSubCatPullDown2.AddItem (subcategory(i, j))
                    subCategoryCodeCounter2 = i
                End If
            Next j
            Me.Range("E8") = categoryCode(i)
            Me.Range("E8").Locked = True
        End If
    Next i
    
    If Me.cboSubCatPullDown2.ListCount > 0 Then
    Me.cboSubCatPullDown2.Value = "Pull-Down Menu"
    End If
    
    Me.Range("G8") = ""
    Me.Range("G8").Locked = True
    Me.Range("H8") = ""
    'Me.Range("H8").Locked = True
    'If trackSelections(2) <> 0 And selectedSGList = False Then
    '    Call deactivateSoftgoods(trackSelections(2))
    '    trackSelections(2) = 0
    'End If
    'selectedSGList = False
    If isP = True Then
        Me.protect ("GTMG")
    End If
End Sub

Private Sub cboCatPulldown3_Change()
    isP = checkProtected()
    If isP = True Then
        Me.Unprotect ("GTMG")
    End If
    
    Me.cboSubCatPullDown3.Clear
    Call activateCategories
    Dim i As Integer
    Dim j As Integer
    For i = 0 To UBound(category)
        If Me.cboCatPulldown3.Value = category(i) Then
            'Ubound(array, dimension of the array) *We are finding the length of the 2nd dimension
            For j = 0 To UBound(subcategory, 2)
                If (subcategory(i, j) = "") Then
                'If the value is blank, then don't add anything. AKA do nothing
                Else
                    Me.cboSubCatPullDown3.AddItem (subcategory(i, j))
                    subCategoryCodeCounter3 = i
                End If
            Next j
            Me.Range("E9") = categoryCode(i)
            Me.Range("E9").Locked = True
        End If
    Next i
    
    If Me.cboSubCatPullDown3.ListCount > 0 Then
    Me.cboSubCatPullDown3.Value = "Pull-Down Menu"
    End If
    
    Me.Range("G9") = ""
    Me.Range("G9").Locked = True
    Me.Range("H9") = ""
    'If trackSelections(3) <> 0 And selectedSGList = False Then
    '    Call deactivateSoftgoods(trackSelections(3))
    '    trackSelections(3) = 0
    'End If
    'selectedSGList = False
    If isP = True Then
        Me.protect ("GTMG")
    End If
End Sub

Private Sub cboCatPulldown4_Change()
    isP = checkProtected()
    If isP = True Then
        Me.Unprotect ("GTMG")
    End If
    
    Me.cboSubCatPulldown4.Clear
    Call activateCategories
    
    Dim i As Integer
    Dim j As Integer
    For i = 0 To UBound(category)
        If Me.cboCatPulldown4.Value = category(i) Then
            'Ubound(array, dimension of the array) *We are finding the length of the 2nd dimension
            For j = 0 To UBound(subcategory, 2)
                If (subcategory(i, j) = "") Then
                'If the value is blank, then don't add anything. AKA do nothing
                Else
                    Me.cboSubCatPulldown4.AddItem (subcategory(i, j))
                    subCategoryCodeCounter4 = i
                End If
            Next j
            Me.Range("E10") = categoryCode(i)
            Me.Range("E10").Locked = True
        End If
    Next i
    
    If Me.cboSubCatPulldown4.ListCount > 0 Then
    Me.cboSubCatPulldown4.Value = "Pull-Down Menu"
    End If
    
    Me.Range("G10") = ""
    Me.Range("G10").Locked = True
    Me.Range("H10") = ""
    'If trackSelections(4) <> 0 And selectedSGList = False Then
    '    Call deactivateSoftgoods(trackSelections(4))
    '    trackSelections(4) = 0
    'End If
    'selectedSGList = False
    If isP = True Then
        Me.protect ("GTMG")
    End If
End Sub

Private Sub cboPkgCHanger_Change() 'Children's Hanger
    Call activateCategories
    'Param: Small Package Hanger, "Plastics", "Other Plastic Packaging < 5 Litres - Non-Beverage", 26 grams, 6th
    Call checkAvailable1(Me.cboPkgCHanger, category(3), subcategory(3, 21), 26, 6)
End Sub

Private Sub cboPkgLHanger_Change() 'Large Hanger - 2 Rows
    Call activateCategories
    'Param: Plastics, Other Rigid Plastic - Non-Beverage, 51 grams
    'Steel, Other Steel and Metal Containers and Packaging - Non Beverage, 0 grams
    '3rd position
    Call checkAvailable2(Me.cboPkgLHanger, category(3), subcategory(3, 21), 51, category(5), subcategory(5, 4), 0, 3)
End Sub

Private Sub cboPkgSPHanger_Change() 'Small Pant Hanger - 2 Rows
    Call activateCategories
    'Param: Plastics, Other Plastic Packaging < 5 Litres - Non-Beverage, 20 grams
    'Steel, Other Steel Containers and Packaging - Non-Beverage, 0 grams
    '4th position
    Call checkAvailable2(Me.cboPkgSPHanger, category(3), subcategory(3, 21), 20, category(5), subcategory(5, 4), 0, 4)
End Sub

Private Sub cboPkgLPHanger_Change() 'Large Pant Hanger - 2 rows
    Call activateCategories
    'Param: Plastics, Other Plastic Packaging < 5 Litres - Non-Beverage, 40 grams
    'Steel, Other Steel Containers and Packaging - Non-Beverage, 0 grams
    '5th position
    Call checkAvailable2(Me.cboPkgLPHanger, category(3), subcategory(3, 21), 40, category(5), subcategory(5, 4), 0, 5)
End Sub

Private Sub cboPkgMHanger_Change() 'Medium Hanger
    Call activateCategories
    'Param: Small Package Hanger, "Plastics", "Other Plastic Packaging < 5 Litres - Non-Beverage", 0 grams, 2nd
    Call checkAvailable1(Me.cboPkgMHanger, category(3), subcategory(3, 21), 0, 2)
End Sub

Private Sub cboPkgSHanger_Change() 'Small Hanger
    Call activateCategories
    'Param: Small Package Hanger, "Plastics", "Other Plastic Packaging < 5 Litres - Non-Beverage", 12 grams, 1st selection
    Call checkAvailable1(Me.cboPkgSHanger, category(3), subcategory(3, 21), 12, 1)
End Sub

Private Sub cboPkgSShoe_Change() 'Small Shoebox
    Call activateCategories
    'Param: Small Shoebox, "Paper", "Boxboard and other paper packaging", 101 grams, 8th
    Call checkAvailable1(Me.cboPkgSShoe, category(2), subcategory(2, 5), 101, 8)
End Sub
Private Sub cboPkgMShoe_Change() 'Medium Shoebox
    Call activateCategories
    'Param: Medium Shoebox, "Paper", "Boxboard and other paper packaging", 256 grams, 9th
    Call checkAvailable1(Me.cboPkgMShoe, category(2), subcategory(2, 5), 256, 9)
End Sub
Private Sub cboPkgLShoe_Change() 'Large Shoebox
    Call activateCategories
    'Param: Large Shoebox, "Paper", "Corrugated Cardboard", 334 grams, 10th
    Call checkAvailable1(Me.cboPkgLShoe, category(2), subcategory(2, 6), 334, 10)
End Sub

Private Sub cboPkgTagSwiftAttach_Change() 'Tag with Switch Attach, 1 row
    Call activateCategories
    'Param: Package w Swift Attach, "Paper", "Boxboard and other paper packaging", 5 grams, 7th
    Call checkAvailable1(Me.cboPkgTagSwiftAttach, category(2), subcategory(2, 5), 5, 7)
End Sub

'This is the reverse of checkAvailable. If packaging type has been changed, then deactivate the pulldown menu's at the top.
'Pass number to identify which Softgoods selection to deactivate.
Private Sub deactivateSoftgoods(pSelection As Integer) 'It should be 1 to 10
    Select Case pSelection
    Case 1
        Me.cboPkgSHanger.Value = "Pull-Down"
    Case 2
        Me.cboPkgMHanger.Value = "Pull-Down"
    Case 3
        Me.cboPkgLHanger.Value = "Pull-Down"
    Case 4
        Me.cboPkgSPHanger.Value = "Pull-Down"
    Case 5
        Me.cboPkgLPHanger.Value = "Pull-Down"
    Case 6
        Me.cboPkgCHanger.Value = "Pull-Down"
    Case 7
        Me.cboPkgTagSwiftAttach.Value = "Pull-Down"
    Case 8
        Me.cboPkgSShoe.Value = "Pull-Down"
    Case 9
        Me.cboPkgMShoe.Value = "Pull-Down"
    Case 10
        Me.cboPkgLShoe.Value = "Pull-Down"
    Case Else
        MsgBox ("deactivateSoftgoods Error")
    End Select
End Sub

'Check if the selected combobox can be clicked or not.
'This one is for 1 row fillers
Private Sub checkAvailable1(cboPkg As ComboBox, pCategory As String, pSubcategory As String, pWeight As Integer, pSelectionCol As Integer)
    
    'Check if Category/Subcategory 1 and Category/Subcategory 2 are empty
    If cboPkg.Value = "Package Type 1" And Me.cboCatPulldown1.Value = "Pull-Down Menu" And Me.cboSubCatPullDown1.Value = "" Then
        'selectedSGList = True
        Me.cboCatPulldown1.Value = pCategory
        Me.cboCatPulldown1.Enabled = False
        Me.cboSubCatPullDown1.Value = pSubcategory
        Me.cboSubCatPullDown1.Enabled = False
        'Me.Range("H7") = pWeight
        trackSelections(1) = pSelectionCol 'Add a tracker so we know when to remove.
        
        'Remove the old row if it was there
        If trackSelections(2) = pSelectionCol Then
            Call resetMenu(2)
            trackSelections(2) = 0
        ElseIf trackSelections(3) = pSelectionCol Then
            Call resetMenu(3)
            trackSelections(3) = 0
        ElseIf trackSelections(4) = pSelectionCol Then
            Call resetMenu(4)
            trackSelections(4) = 0
        End If
    ElseIf cboPkg.Value = "Package Type 2" And Me.cboCatPulldown2.Value = "Pull-Down Menu" And Me.cboSubCatPullDown2.Value = "" Then
        'selectedSGList = True
        Me.cboCatPulldown2.Value = pCategory
        Me.cboCatPulldown2.Enabled = False
        Me.cboSubCatPullDown2.Value = pSubcategory
        Me.cboSubCatPullDown2.Enabled = False
        'Me.Range("H8") = pWeight
        trackSelections(2) = pSelectionCol
        
        If trackSelections(1) = pSelectionCol Then
            Call resetMenu(1)
            trackSelections(1) = 0
        ElseIf trackSelections(3) = pSelectionCol Then
            Call resetMenu(3)
            trackSelections(3) = 0
        ElseIf trackSelections(4) = pSelectionCol Then
            Call resetMenu(4)
            trackSelections(4) = 0
        End If
    ElseIf cboPkg.Value = "Package Type 3" And Me.cboCatPulldown3.Value = "Pull-Down Menu" And Me.cboSubCatPullDown3.Value = "" Then
        'selectedSGList = True
        Me.cboCatPulldown3.Value = pCategory
        Me.cboCatPulldown3.Enabled = False
        Me.cboSubCatPullDown3.Value = pSubcategory
        Me.cboSubCatPullDown3.Enabled = False
        'Me.Range("H9") = pWeight
        trackSelections(3) = pSelectionCol
        
        If trackSelections(2) = pSelectionCol Then
            Call resetMenu(2)
            trackSelections(2) = 0
        ElseIf trackSelections(1) = pSelectionCol Then
            Call resetMenu(1)
            trackSelections(1) = 0
        ElseIf trackSelections(4) = pSelectionCol Then
            Call resetMenu(4)
            trackSelections(4) = 0
        End If
    ElseIf cboPkg.Value = "Package Type 4" And Me.cboCatPulldown4.Value = "Pull-Down Menu" And Me.cboSubCatPulldown4.Value = "" Then
        'selectedSGList = True
        Me.cboCatPulldown4.Value = pCategory
        Me.cboCatPulldown4.Enabled = False
        Me.cboSubCatPulldown4.Value = pSubcategory
        Me.cboSubCatPulldown4.Enabled = False
        'Me.Range("H10") = pWeight
        trackSelections(4) = pSelectionCol
        
        If trackSelections(2) = pSelectionCol Then
            Call resetMenu(2)
            trackSelections(2) = 0
        ElseIf trackSelections(1) = pSelectionCol Then
            Call resetMenu(1)
            trackSelections(1) = 0
        ElseIf trackSelections(3) = pSelectionCol Then
            Call resetMenu(3)
            trackSelections(3) = 0
        End If
    ElseIf cboPkg.Value = "Pull-Down" Then 'If we are picking to reset, then
        If trackSelections(1) = pSelectionCol Then
            resetMenu (1)
            trackSelections(1) = 0
        ElseIf trackSelections(2) = pSelectionCol Then
            resetMenu (2)
            trackSelections(2) = 0
        ElseIf trackSelections(3) = pSelectionCol Then
            resetMenu (3)
            trackSelections(3) = 0
        ElseIf trackSelections(4) = pSelectionCol Then
            resetMenu (4)
            trackSelections(4) = 0
        Else
            'MsgBox ("checkAvailable error")
        End If
        
    Else 'Else if all places are filled, then do nothing and keep it pulldown
        MsgBox (errMsg + ": " + cboPkg.Value)
        cboPkg.Value = "Pull-Down"
    End If
    
End Sub

'This is the one for 2 row fillers (e.g. stuff that need 2 categories and 2 subcategories)
'This function has parameters:
'cboPkg: to check what has been selected
'pCategory: which category for the first one, pSubcategry: which category for first subcategory, pWeight is the weight for first one
'pcategory2 is category for second one, etc etc
Private Sub checkAvailable2(cboPkg As ComboBox, pCategory1 As String, pSubcategory1 As String, pWeight1 As Integer, _
pCategory2 As String, pSubcategory2 As String, pWeight2 As Integer, pSelectionCol As Integer)
    
    'Check if the comboBox selected the first 2 rows and the first 2 rows are indeed empty
    If cboPkg.Value = "Package Type 1&2" And Me.cboCatPulldown1.Value = "Pull-Down Menu" And Me.cboCatPulldown2.Value = "Pull-Down Menu" Then
        Me.cboCatPulldown1.Value = pCategory1
        Me.cboSubCatPullDown1.Value = pSubcategory1
  
        Me.cboCatPulldown2.Value = pCategory2
        Me.cboSubCatPullDown2.Value = pSubcategory2
        Me.cboCatPulldown1.Enabled = False
        Me.cboCatPulldown2.Enabled = False
        Me.cboSubCatPullDown1.Enabled = False
        Me.cboSubCatPullDown2.Enabled = False
        'Me.Range("H7") = pWeight1
        'Me.Range("H8") = pWeight2
        trackSelections(1) = pSelectionCol
        trackSelections(2) = pSelectionCol
        
        If trackSelections(3) = pSelectionCol And trackSelections(4) = pSelectionCol Then
            resetMenu (3)
            resetMenu (4)
            trackSelections(3) = 0
            trackSelections(4) = 0
        End If
    ElseIf cboPkg.Value = "Package Type 2&3" And Me.cboCatPulldown2.Value = "Pull-Down Menu" And Me.cboCatPulldown3.Value = "Pull-Down Menu" Then
        Me.cboCatPulldown2.Value = pCategory1
        Me.cboSubCatPullDown2.Value = pSubcategory1
        Me.cboCatPulldown3.Value = pCategory2
        Me.cboSubCatPullDown3.Value = pSubcategory2
        Me.cboCatPulldown2.Enabled = False
        Me.cboCatPulldown3.Enabled = False
        Me.cboSubCatPullDown2.Enabled = False
        Me.cboSubCatPullDown3.Enabled = False
        'Me.Range("H8") = pWeight1
        'Me.Range("H9") = pWeight2
        trackSelections(2) = pSelectionCol
        trackSelections(3) = pSelectionCol
        
        'No need to remove old rows because 3&4 takes up all possible spaces.
    ElseIf cboPkg.Value = "Package Type 3&4" And Me.cboCatPulldown3.Value = "Pull-Down Menu" And Me.cboCatPulldown4.Value = "Pull-Down Menu" Then
        Me.cboCatPulldown3.Value = pCategory1
        Me.cboSubCatPullDown3.Value = pSubcategory1
        Me.cboCatPulldown4.Value = pCategory2
        Me.cboSubCatPulldown4.Value = pSubcategory2
         Me.cboCatPulldown3.Enabled = False
        Me.cboCatPulldown4.Enabled = False
        Me.cboSubCatPullDown3.Enabled = False
        Me.cboSubCatPulldown4.Enabled = False
        'Me.Range("H9") = pWeight1
        'Me.Range("H10") = pWeight2
        trackSelections(3) = pSelectionCol
        trackSelections(4) = pSelectionCol
        
        If trackSelections(1) = pSelectionCol And trackSelections(2) = pSelectionCol Then
            resetMenu (1)
            resetMenu (2)
            trackSelections(1) = 0
            trackSelections(2) = 0
        End If
    ElseIf cboPkg.Value = "Pull-Down" Then
        If trackSelections(1) = pSelectionCol Then
            resetMenu (1)
            trackSelections(1) = 0
        End If
        If trackSelections(2) = pSelectionCol Then
            resetMenu (2)
            trackSelections(2) = 0
        End If
        If trackSelections(3) = pSelectionCol Then
            resetMenu (3)
            trackSelections(3) = 0
        End If
        If trackSelections(4) = pSelectionCol Then
            resetMenu (4)
            trackSelections(4) = 0
        End If
    Else 'Else if all places are filled, then do nothing and keep it pulldown
        MsgBox (errMsg + ": " + cboPkg.Value)
        cboPkg.Value = "Pull-Down"
    End If
End Sub

Private Sub resetMenu(pRow As Integer)
    Dim cp As Boolean
    
    If pRow = 1 Then
        Me.cboCatPulldown1.Enabled = True
        Me.cboSubCatPullDown1.Enabled = True
        Me.cboCatPulldown1.Value = "Pull-Down Menu"
        Me.cboSubCatPullDown1.Value = ""
        
        cp = checkProtected()
        If cp = True Then
            Me.Unprotect ("GTMG")
        End If
        Me.Range("H7").Value = ""
        Me.Range("E7").Value = ""
        Me.Range("G7").Value = ""
        If cp = True Then
            Me.protect ("GTMG")
        End If
        
    ElseIf pRow = 2 Then
        Me.cboCatPulldown2.Enabled = True
        Me.cboSubCatPullDown2.Enabled = True
        Me.cboCatPulldown2.Value = "Pull-Down Menu"
        Me.cboSubCatPullDown2.Value = ""
        
        cp = checkProtected()
        If cp = True Then
            Me.Unprotect ("GTMG")
        End If
        Me.Range("H8").Value = ""
        Me.Range("E8").Value = ""
        Me.Range("G8").Value = ""
        If cp = True Then
            Me.protect ("GTMG")
        End If
    ElseIf pRow = 3 Then
        Me.cboCatPulldown3.Enabled = True
        Me.cboSubCatPullDown3.Enabled = True
        Me.cboCatPulldown3.Value = "Pull-Down Menu"
        Me.cboSubCatPullDown3.Value = ""
        
        cp = checkProtected()
        If cp = True Then
            Me.Unprotect ("GTMG")
        End If
        Me.Range("H9").Value = ""
        Me.Range("E9").Value = ""
        Me.Range("G9").Value = ""
        If cp = True Then
            Me.protect ("GTMG")
        End If
    ElseIf pRow = 4 Then
        Me.cboCatPulldown4.Enabled = True
        Me.cboSubCatPulldown4.Enabled = True
        Me.cboCatPulldown4.Value = "Pull-Down Menu"
        Me.cboSubCatPulldown4.Value = ""
        
        cp = checkProtected()
        If cp = True Then
            Me.Unprotect ("GTMG")
        End If
        Me.Range("H10").Value = ""
        Me.Range("E10").Value = ""
        Me.Range("G10").Value = ""
        If cp = True Then
            Me.protect ("GTMG")
        End If
    ElseIf pRow = 6 Then
        Me.cboBatteryMat.Value = "Pull-Down Menu"
        cp = checkProtected()
        If cp = True Then
            Me.Unprotect ("GTMG")
        End If
        Me.Range("E12") = ""
        Me.Range("G12") = ""
        Me.Range("H12") = ""
        If cp = True Then
            Me.protect ("GTMG")
        End If
        Me.cboBatteryType.Value = "Pull-Down Menu"
    Else
        MsgBox ("Should not be there!")
    End If
    
    
End Sub

'This is to reset all the Softgoods Menus at the top
Private Sub resetSGMenus()
    Me.cboPkgSHanger.Value = "Pull-Down"
    Me.cboPkgMHanger.Value = "Pull-Down"
    Me.cboPkgLHanger.Value = "Pull-Down"
    Me.cboPkgSPHanger.Value = "Pull-Down"
    Me.cboPkgLPHanger.Value = "Pull-Down"
    Me.cboPkgCHanger.Value = "Pull-Down"
    Me.cboPkgTagSwiftAttach.Value = "Pull-Down"
    Me.cboPkgSShoe.Value = "Pull-Down"
    Me.cboPkgMShoe.Value = "Pull-Down"
    Me.cboPkgLShoe.Value = "Pull-Down"
End Sub

'When the subcategory changes, then change the subcategory code to reflect it.
'The logic in this function is that there is a subCategoryCodeCounter whenever the category changes.
'Use that to search the subcategory and match the subcategory. Then set the code.
Private Sub cboSubCatPullDown1_Change()
    Dim i As Integer
    For i = 1 To UBound(subcategory, 2)
        If subCategoryCodeCounter1 <> Null Or subCategoryCodeCounter1 > 0 Then
            If subcategory(subCategoryCodeCounter1, i) = Me.cboSubCatPullDown1.Value Then
                Dim cp As Boolean
                cp = checkProtected()
                If cp = True Then
                    Me.Unprotect ("GTMG")
                    Me.Range("G7") = subCategoryCode(subCategoryCodeCounter1, i)
                    Me.protect ("GTMG")
                Else
                    Me.Range("G7") = subCategoryCode(subCategoryCodeCounter1, i)
                End If
            End If
        End If
    Next i
End Sub


Private Sub cboSubCatPullDown2_Change()
    Dim i As Integer
    For i = 1 To UBound(subcategory, 2)
        If subCategoryCodeCounter2 <> Null Or subCategoryCodeCounter2 > 0 Then
            If subcategory(subCategoryCodeCounter2, i) = Me.cboSubCatPullDown2.Value Then
                Dim cp As Boolean
                cp = checkProtected()
                If cp = True Then
                    Me.Unprotect ("GTMG")
                    Me.Range("G8") = subCategoryCode(subCategoryCodeCounter2, i)
                    Me.protect ("GTMG")
                Else
                    Me.Range("G8") = subCategoryCode(subCategoryCodeCounter2, i)
                End If
            End If
        End If
    Next i
End Sub

Private Sub cboSubCatPullDown3_Change()
    Dim i As Integer
    For i = 1 To UBound(subcategory, 2)
        If subCategoryCodeCounter3 <> Null Or subCategoryCodeCounter3 > 0 Then
            If subcategory(subCategoryCodeCounter3, i) = Me.cboSubCatPullDown3.Value Then
                Dim cp As Boolean
                cp = checkProtected()
                If cp = True Then
                    Me.Unprotect ("GTMG")
                    Me.Range("G9") = subCategoryCode(subCategoryCodeCounter3, i)
                    Me.protect ("GTMG")
                Else
                    Me.Range("G9") = subCategoryCode(subCategoryCodeCounter3, i)
                End If
            End If
        End If
    Next i
End Sub

Private Sub cboSubCatPulldown4_Change()
    Dim i As Integer
    For i = 1 To UBound(subcategory, 2)
        If subCategoryCodeCounter4 <> Null Or subCategoryCodeCounter4 > 0 Then
            If subcategory(subCategoryCodeCounter4, i) = Me.cboSubCatPulldown4.Value Then
                Dim cp As Boolean
                cp = checkProtected()
                If cp = True Then
                    Me.Unprotect ("GTMG")
                    Me.Range("G10") = subCategoryCode(subCategoryCodeCounter4, i)
                    Me.protect ("GTMG")
                Else
                    Me.Range("G10") = subCategoryCode(subCategoryCodeCounter4, i)
                End If
            End If
        End If
    Next i
End Sub

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()
    ''modStartup.AdminPath = "\\qho\home\speedquote"
    Call InitCmbPort
End Sub

Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{D109B214-B44F-4E0E-8958-B03AC33F56B6}{C90C46B9-D2D4-499D-8D0F-18C823FF271B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CommandButton1_Click()
Dim tday
Dim tmonth
If Len(ComboBox2.Text) < 2 Then
    tday = "0" & ComboBox2.Text
Else
    tday = ComboBox2.Text
End If

If Len(ComboBox1.Text) < 2 Then
    tmonth = "0" & ComboBox1.Text
Else
    tmonth = ComboBox1.Text
End If

tempdateF = tmonth & "/" & tday & "/" & Right(ComboBox3.Text, 2)
UserForm1.Hide

End Sub

Private Sub CommandButton2_Click()
tempdateF = "C"
End
End Sub

Private Sub CommandButton3_Click()
tempdateF = ""
UserForm1.Hide
End Sub

Private Sub UserForm_Click()

End Sub

Private Sub UserForm_Initialize()
Dim i

Dim m
Dim d
Dim y

m = DatePart("m", Date)
d = DatePart("d", Date)
y = DatePart("yyyy", Date) - 2008



For i = 1 To 12
ComboBox1.AddItem i
Next
ComboBox1.Text = ComboBox1.List(m - 1)

For i = 1 To 31
ComboBox2.AddItem i
Next
ComboBox2.Text = ComboBox2.List(d - 1)

For i = 2008 To 2020
ComboBox3.AddItem i
Next
ComboBox3.Text = ComboBox3.List(y)



End Sub
Attribute VB_Name = "frmPort"
Attribute VB_Base = "0{6C6DEE66-4EB2-4FF5-8520-EA88C01F282E}{20B3C20E-5EDD-4B4B-B33F-E450789EB8FE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit


Private Sub UserForm_Initialize()
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''  USERFORM_INITIALIZE   '''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    Call InitCmbPort

End Sub



Private Sub cmdCancel_Click()
    bCancel = True      'The Cancel option was selected
    Unload Me
End Sub



Private Sub cmdOK_Click()
Dim lIndex As Long

    ActiveSheet.Range("L70") = cmbPort.Value        'Set name of port
    Range("AO37").Value _
        = ActiveSheet.Range("BR113").Offset(cmbPort.ListIndex, 0).Value 'Set rate for 40 ft. container

Exit_sub:
    Unload Me
ExitNoUnload:
End Sub




INQUEST-PP=macro
