Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_Open()
Main
End Sub
Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Tabelle10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Tabelle11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Tabelle12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Tabelle13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Tabelle14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Tabelle15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Tabelle16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Tabelle18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Tabelle3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Tabelle4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Tabelle5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Tabelle6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "optBrutto, 6, 0, MSForms, OptionButton"
Attribute VB_Control = "optNetto, 8, 1, MSForms, OptionButton"
Attribute VB_Control = "optBeides, 9, 2, MSForms, OptionButton"
Option Explicit

Private Sub optBeides_Click()
    optEntry "Beides"
End Sub

Private Sub optBrutto_Click()
    optEntry "Brutto"
End Sub

Private Sub optNetto_Click()
    optEntry "Netto"
End Sub
Attribute VB_Name = "Tabelle7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Tabelle8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Tabelle9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "basFunc"
Option Explicit

Public Sub setApplicationRefresh(refreshOn As Boolean)

    If refreshOn Then
        With Application
            .ScreenUpdating = True
            .EnableEvents = True
            .Calculation = xlCalculationAutomatic
        End With
    Else
        With Application
            .ScreenUpdating = False
            .EnableEvents = False
            .Calculation = xlCalculationManual
        End With
    End If

End Sub

Public Sub deleteWorksheetIfPresent(name As String)
Dim ws As Worksheet
Dim wsIsPresent As Boolean

    Set ws = LoadSheetIfPresent(name, False, wsIsPresent)
    Application.DisplayAlerts = False
    If wsIsPresent Then Worksheets(name).Delete
    Application.DisplayAlerts = True

End Sub

Public Function getMaxRowInWorksheet(ws As Worksheet, startRow As Integer, col As Integer) As Long
Dim row As Long

    row = startRow
    Do While ws.Cells(row, col) <> ""
        row = row + 1
    Loop
    getMaxRowInWorksheet = row - 1
    
End Function

Public Function getMaxColInWorksheet(ws As Worksheet, row As Integer) As Long
Dim col As Long

    col = 1
    Do While ws.Cells(row, col) <> ""
        col = col + 1
    Loop
    getMaxColInWorksheet = col - 1
    
End Function

Public Function InitStaende() As Boolean
Dim row As Integer
Dim tmp As String

    cntStaende = 0
    For row = 10 To 1000
        If wsRParam.Cells(row, 1) = "Stichtag" Then
            While wsRParam.Cells(row, 1) = "Stichtag" Or wsRParam.Cells(row, 1) = "Vergleichsstichtag"
                If cntStaende = 10 Then Exit For
                cntStaende = cntStaende + 1
                tmp = wsRParam.Cells(row, 2)
                If tmp = "Aktueller Stand" Then
                    staende(cntStaende) = "Aktuell"
                Else
                    staende(cntStaende) = Right(tmp, 10)
                End If
                Set wsStand(cntStaende) = Worksheets("Parameter" & Format(cntStaende, "00"))
                row = row + 1
            Wend
            Exit For
        End If
    Next row
    InitStaende = True
    
End Function

Public Function LoadSheetIfPresent(wsName As String, Optional critical As Boolean = False, Optional ByRef isPresent As Boolean) As Worksheet
    
    On Error GoTo errHandler
    isPresent = True
    Set LoadSheetIfPresent = Worksheets(wsName)
    
    Exit Function
errHandler:
    isPresent = False
    If critical Then
        MsgBox "Das Tabellenblatt '" & wsName & "' konnte nicht gefunden werden." & vbCrLf & "Die Bearbeitung wird abgebrochen.", vbCritical, "Tabellenblatt fehlt"
    End If
End Function
Attribute VB_Name = "basHeatmap"
Option Explicit

Public Sub createHeatmap(ws As Worksheet)
Dim i As Integer
Dim bubble1 As Series
Dim bubble2 As Series

    ' Wegen der Verdeckung der Bubbles immer R|fffd|ckw|fffd|rts anlegen
    For i = 1 To cntStaende
        Set bubble1 = bubble2
        Set bubble2 = insertStandInHeatmap(ws, i, True)
        If i < cntStaende Then
            connectBubbles ws, bubble1, bubble2
        End If
    Next i

    For i = 1 To cntStaende
        insertStandInHeatmap ws, i, False
        If i < cntStaende Then
            connectBubbles ws, bubble1, bubble2
        End If
    Next i

End Sub

Private Function insertStandInHeatmap(ws As Worksheet, stand As Integer, netto As Boolean) As Series
Dim ch As Chart
Dim bubble As Series
Dim col As Integer
Dim prefix As String
Dim color As Long

    If netto Then
        prefix = "Netto"
        col = 27
        color = RGB(178, 208, 236)
    Else
        prefix = "Brutto"
        col = 29
        color = RGB(64, 139, 208)
    End If
    
    Set ch = ws.ChartObjects(5).Chart
    Set bubble = ch.SeriesCollection.NewSeries
    With bubble
        .name = prefix & " Stand " & stand
        .XValues = ws.Cells(stand + 4, col + 1)
        .Values = ws.Cells(stand + 4, col)
        .MarkerSize = 14
        .Format.Line.Weight = 1.5
        .Format.Line.ForeColor.RGB = color
        .Format.Fill.ForeColor.RGB = color
        .ApplyDataLabels
        .DataLabels.ShowRange = True
        .DataLabels.ShowSeriesName = False
        .DataLabels.ShowValue = False
        .DataLabels.Position = xlLabelPositionCenter
        .DataLabels.Format.TextFrame2.TextRange.InsertChartField msoChartFieldRange, "='RiskTemplate'!$T$" & stand + 4, 0
        .DataLabels.Format.TextFrame2.MarginLeft = 0
        .DataLabels.Format.TextFrame2.MarginRight = 0
        .DataLabels.Format.TextFrame2.MarginBottom = 0
        .DataLabels.Format.TextFrame2.MarginTop = 0
        .DataLabels.Format.Fill.ForeColor.RGB = color
        ch.FullSeriesCollection(prefix & " Stand " & stand).Points(1).DataLabel.Width = 10
    End With
    Set insertStandInHeatmap = bubble

End Function

Private Sub connectBubbles(ws As Worksheet, bubble1 As Series, bubble2 As Series)
Dim factorPlotx As Double
Dim factorPloty As Double
Dim sx As Double
Dim sy As Double
Dim zx As Double
Dim zy As Double
Dim rMap As Chart
Dim dx As Double
Dim dy As Double
Dim offsetx As Double
Dim offsety As Double
Dim plotWidth As Double
Dim plotHeight As Double
Dim plotLeft As Double
Dim plotTop As Double
Dim bubbleRadius As Integer

    Exit Sub 'Deactivated right now
    
    plotWidth = 507
    plotHeight = 388
    plotLeft = 67
    plotTop = 3
    bubbleRadius = 8
   
    Set rMap = ws.ChartObjects(5).Chart
    
    ' Umrechnen auf die PlotArea
    factorPlotx = 4 * 1000 / plotWidth
    factorPloty = 4 * 1000 / plotHeight
    sx = bubble1.XValues(1) / factorPlotx
    sy = bubble1.Values(1) / factorPloty
    zx = bubble2.XValues(1) / factorPlotx
    zy = bubble2.Values(1) / factorPloty
    
    ' auf dem Rand des Bubbles starten und nicht in der Mitte
    dx = zx - sx
    dy = zy - sy
    If dx = 0 Then
        offsetx = 0
        offsety = bubbleRadius
    Else
        offsetx = Sqr(bubbleRadius ^ 2 / (1 + (dy / dx) ^ 2))
        offsety = Abs(dy / dx) * offsetx
    End If
    sx = sx + Sgn(dx) * offsetx
    sy = sy + Sgn(dy) * offsety
    zx = zx - Sgn(dx) * offsetx
    zy = zy - Sgn(dy) * offsety
    
    With rMap.Shapes.AddConnector(msoConnectorStraight, sx + plotLeft, plotHeight - sy + plotTop, zx + plotLeft, plotHeight - zy + plotTop)
        .DrawingObject.ShapeRange.Line.BeginArrowheadStyle = msoArrowheadTriangle
        .DrawingObject.ShapeRange.Line.ForeColor.RGB = RGB(178, 208, 236)
        .name = bubble1.name
    End With
    
End Sub
Attribute VB_Name = "basMain"
Option Explicit

Public Const colRisikoID = 1
Public Const colKurzbezeichnung = 2
Public Const colBeschreibung = 3
Public Const colBruttoEw = 4
Public Const colBruttoEwKLaasse = 5
Public Const colBruttoAw = 6
Public Const colBruttoAwKlasse = 7
Public Const colBruttoFarbe = 8
Public Const colBruttoEWert = 9
Public Const colNettoEw = 10
Public Const colNettoEwKlasse = 11
Public Const colNettoAw = 12
Public Const colNettoAwKlasse = 13
Public Const colNettoFarbe = 14
Public Const colNettoEWert = 15
Public Const colKategoriepfad = 16
Public Const colVerantwortlicher = 17
Public Const colUnternehmenseinheit = 18
Public Const colMID = 19
Public Const colMKurzbezeichnung = 20
Public Const colMStatus = 21
Public Const colMGeplanterTermin = 22

' sourceColumns in chart
Public Const colChartNettoEW = 21
Public Const colChartNettoAW = 22
Public Const colChartNettoEWert = 23
Public Const colChartBruttoEW = 24
Public Const colChartBruttoAW = 25
Public Const colChartBruttoEWert = 26

Public wsRParam As Worksheet
Public wsAParam As Worksheet
Public wsRTemplate As Worksheet
Public wsOverview As Worksheet

Public staende(1 To 100) As String
Public wsStand(100) As Worksheet
Public cntStaende As Integer

Public Sub Main()

    If Not Init() Then Exit Sub
    'setApplicationRefresh False
    ClearData
    writeVergleichsstaende
    createRisksheets
    wsOverview.Range("B5:B249").Font.ThemeColor = xlThemeColorDark1
    wsOverview.Range("B5:B249").Font.TintAndShade = -4.99893185216834E-02
    wsOverview.Select
    
    'setApplicationRefresh True

End Sub

Private Sub writeVergleichsstaende()
Dim i As Integer
    
    For i = 1 To cntStaende
        wsRTemplate.Cells(15 - i, 31) = staende(i)
    Next i
        
End Sub

Private Sub createRisksheets()
Dim maxR As Integer
Dim row As Integer
Dim riskID As String
Dim riskNo As Integer

    riskNo = 0
    wsRTemplate.Visible = xlSheetVisible
    For row = 10 To getMaxRowInWorksheet(wsStand(1), 10, 1)
        If riskID <> wsStand(1).Cells(row, colRisikoID) Then
            riskNo = riskNo + 1
            createWSforRisk row, riskNo
            riskID = wsStand(1).Cells(row, colRisikoID)
        End If
    Next row
    wsRTemplate.Visible = xlSheetHidden

End Sub

Private Sub createWSforRisk(row As Integer, riskNo As Integer)
Dim ws As Worksheet
Dim name As String

    name = wsStand(1).Cells(row, colRisikoID)
    deleteWorksheetIfPresent name
    
    wsRTemplate.Select
    ActiveSheet.Copy After:=Sheets(Sheets.Count)
    Set ws = ActiveSheet
    ws.name = name
    ws.Cells(4, 4) = wsStand(1).Cells(row, colRisikoID)
    ws.Cells(5, 4) = wsStand(1).Cells(row, colKurzbezeichnung)
    ws.Cells(6, 4) = wsStand(1).Cells(row, colBeschreibung)
    
    fillRiskData ws, row
    wsOverview.Hyperlinks.Add Anchor:=wsOverview.Cells(4 + riskNo, 2), Address:="", SubAddress:="'" & ws.name & "'" & "!A1", TextToDisplay:="'" & wsStand(1).Cells(row, colRisikoID)
    wsOverview.Cells(4 + riskNo, 3) = wsStand(1).Cells(row, colKurzbezeichnung)
    wsOverview.Cells(4 + riskNo, 4) = wsStand(1).Cells(row, colVerantwortlicher)
    wsOverview.Cells(4 + riskNo, 5) = wsStand(1).Cells(row, colUnternehmenseinheit)
    wsOverview.Cells(4 + riskNo, 6) = wsStand(1).Cells(row, colKategoriepfad)
    createHeatmap ws
    
End Sub

Private Sub fillRiskData(ws As Worksheet, row As Integer)
Dim i As Integer
Dim actionNo As Integer
Dim riskID As String

    For i = 1 To cntStaende
       ws.Cells(4 + i, colChartNettoEW) = wsStand(cntStaende - i + 1).Cells(row, colNettoEw)
       ws.Cells(4 + i, colChartNettoAW) = wsStand(cntStaende - i + 1).Cells(row, colNettoAw)
       ws.Cells(4 + i, colChartNettoEWert) = wsStand(cntStaende - i + 1).Cells(row, colNettoEWert)
       ws.Cells(4 + i, colChartBruttoEW) = wsStand(cntStaende - i + 1).Cells(row, colBruttoEw)
       ws.Cells(4 + i, colChartBruttoAW) = wsStand(cntStaende - i + 1).Cells(row, colBruttoAw)
       ws.Cells(4 + i, colChartBruttoEWert) = wsStand(cntStaende - i + 1).Cells(row, colBruttoEWert)
    Next i
    
    riskID = wsStand(1).Cells(row, colRisikoID)
    For i = 0 To 100
        If riskID <> wsStand(1).Cells(row + i, colRisikoID) Then Exit For
        If wsStand(1).Cells(row + i, colMID) <> "" Then
            actionNo = actionNo + 1
            If actionNo < 16 Then
                ws.Cells(29 + actionNo, 10) = actionNo
                ws.Cells(29 + actionNo, 11) = wsStand(1).Cells(row + i, colMID)
                ws.Cells(29 + actionNo, 12) = wsStand(1).Cells(row + i, colMKurzbezeichnung)
                ws.Cells(29 + actionNo, 13) = wsStand(1).Cells(row + i, colMStatus)
                ws.Cells(29 + actionNo, 14) = wsStand(1).Cells(row + i, colMGeplanterTermin)
            End If
        End If
    Next i
    
End Sub

Public Function Init() As Boolean

    Init = False
    If Not loadNeededWorksheets Then Exit Function
    If Not InitStaende Then Exit Function
    Init = True
    
End Function

Private Function loadNeededWorksheets() As Boolean
Dim wsIsPresent As Boolean

    loadNeededWorksheets = False
    Set wsRParam = LoadSheetIfPresent("ReportParameters", True, wsIsPresent)
    If Not wsIsPresent Then Exit Function
    
    Set wsAParam = LoadSheetIfPresent("AppParameters", True, wsIsPresent)
    If Not wsIsPresent Then Exit Function
    
    Set wsRTemplate = LoadSheetIfPresent("RiskTemplate", True, wsIsPresent)
    If Not wsIsPresent Then Exit Function
    
    Set wsOverview = LoadSheetIfPresent("|fffd|bersicht", True, wsIsPresent)
    If Not wsIsPresent Then Exit Function
    
    loadNeededWorksheets = True
    
End Function

Public Sub optEntry(value As String)
Dim ws As Worksheet
    
    Set ws = ActiveWorkbook.ActiveSheet
    setVisibleDatalines ws, value
    setVisibleBubbles ws, value
    
End Sub


Public Sub optEntryAlt()
Dim ws As Worksheet
Dim shp As Shape
    
    Set ws = ActiveWorkbook.ActiveSheet
    For Each shp In ws.Shapes
        If InStr(1, shp.name, "opt", vbTextCompare) <> 0 Then
            If shp.OLEFormat.Object.value = 1 Then
                setVisibleDatalines ws, shp.AlternativeText
                setVisibleBubbles ws, shp.AlternativeText
            End If
        End If
    Next
    
End Sub

Private Sub setVisibleDatalines(ws As Worksheet, types As String)
    
    ws.Columns(colChartNettoEW).Hidden = (types = "Brutto")
    ws.Columns(colChartNettoAW).Hidden = (types = "Brutto")
    ws.Columns(colChartNettoEWert).Hidden = (types = "Brutto")
    ws.Columns(colChartBruttoEW).Hidden = (types = "Netto")
    ws.Columns(colChartBruttoAW).Hidden = (types = "Netto")
    ws.Columns(colChartBruttoEWert).Hidden = (types = "Netto")
    
End Sub

Private Sub setVisibleBubbles(ws As Worksheet, types As String)
Dim ch As Chart
Dim i As Integer
Dim nameON As String
Dim nameOFF As String

    On Error Resume Next
    Set ch = ws.ChartObjects(5).Chart
    
    For i = 1 To 10
        Select Case types
        Case "Netto"
            ch.FullSeriesCollection("Netto Stand " & i).IsFiltered = False
            ch.FullSeriesCollection("Brutto Stand " & i).IsFiltered = True
        Case "Brutto"
            ch.FullSeriesCollection("Netto Stand " & i).IsFiltered = True
            ch.FullSeriesCollection("Brutto Stand " & i).IsFiltered = False
        Case "Beides"
            ch.FullSeriesCollection("Netto Stand " & i).IsFiltered = False
            ch.FullSeriesCollection("Brutto Stand " & i).IsFiltered = False
        End Select
    Next i
    
End Sub

Private Sub ClearData()
    wsOverview.Range("B5:G1000").ClearContents
    wsRTemplate.Range("D4:N6").ClearContents
    wsRTemplate.Range("U5:Z14").ClearContents
    wsRTemplate.Range("AE5:AE14").ClearContents
End Sub


INQUEST-PP=macro
