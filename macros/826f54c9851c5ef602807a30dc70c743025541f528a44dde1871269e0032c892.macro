Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "Image1, 9, 0, MSForms, Image"
Option Explicit

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "basAPIMNU"
Option Explicit
Option Base 1
'---------------------------------------------------------------------------------------
' Module    : basMenuAPIMNU
' DateTime  : 05/01/05 14:33
' Author    : Ivan F Moala
' Site      : http://www.xcelfiles.com
' Purpose   : Creates Windows Menu using API's
'---------------------------------------------------------------------------------------

'// Creates a horizontal menu bar @ the top, suitable for attaching to a top-level window.
'// eg [File], [Edit] etc and usually ending in Help
'// That's the Basic Format.. with [Windows] usually 2nd to last.
Public Declare Function CreateMenu _
    Lib "user32" () _
As Long

Public Declare Function CreatePopupMenu _
    Lib "user32" () _
As Long

Public Declare Function FindWindow _
    Lib "user32" _
        Alias "FindWindowA" ( _
            ByVal lpClassName As String, _
            ByVal lpWindowName As String) _
As Long

Public Declare Function GetMenu _
    Lib "user32" ( _
    ByVal hwnd As Long) _
As Long

Public Declare Function AppendMenu _
    Lib "user32" _
        Alias "AppendMenuA" ( _
            ByVal hMenu As Long, _
            ByVal wFlags As Long, _
            ByVal wIDNewItem As Long, _
            ByVal lpNewItem As String) _
As Long

Public Declare Function SetMenu _
    Lib "user32" ( _
        ByVal hwnd As Long, _
        ByVal hMenu As Long) _
As Long

Public Declare Function DestroyMenu _
    Lib "user32" ( _
        ByVal hMenu As Long) _
As Long

Public Declare Function SetWindowLong _
    Lib "user32" _
        Alias "SetWindowLongA" ( _
            ByVal hwnd As Long, _
            ByVal nIndex As Long, _
            ByVal dwNewLong As Long) _
As Long

Public Const MF_SEPARATOR As Long = &H800&
Public Const MF_POPUP = &H10
Public Const MF_STRING = &H0


Public Const IDM_MU As Long = &H7D0 '// Our Menu Item ID
'//
Public g_hPopUpMenu() As Long       '// Holds Popupmenu handles
Public g_hMenu As Long              '// Userform menu handle
Public g_hPopUpSubMenu() As Long    '// Holds Submenu handles
Public g_Rt() As Long               '// Holds return Values for testing debuging
Public g_APIMacro() As String       '// Holds Routine names associated with Menus
Public g_hForm As Long              '// Userform handle
Public g_MNUSheet As Worksheet      '// Menu Sheet

Public Sub CreateAPIMenu()
'// This sub should be executed when the Userform is Initialised.
Dim RowNum As Long, _
    SubMNU As Long, _
    TopMNUitems As Long, _
    SubMNUItem As Long, _
    TopMNU As Long, _
    Rt As Long, _
    MacroNum As Long

'// Set menusheet
Set g_MNUSheet = ThisWorkbook.Sheets("APIMNU")

With g_MNUSheet
    '// Set-up now
    TopMNUitems = .Range("A1") '// Number of Top Level
    SubMNU = .Range("B1")      '// Number of Sub Menus
    
    ReDim g_hPopUpMenu(TopMNUitems)      '//
    ReDim g_Rt(TopMNUitems)              '//
    ReDim g_hPopUpSubMenu(SubMNU)        '//
    ReDim g_APIMacro(.Range("C1").Value) '//
    
    '// Create Main Menu Area @ Top of Userform
    g_hMenu = CreateMenu()
    Rt = SetMenu(g_hForm, g_hMenu)
    
    '// Initialize variables
    RowNum = 0
    MacroNum = 1
    SubMNUItem = LBound(g_hPopUpSubMenu)
    
    For TopMNU = 1 To TopMNUitems
        RowNum = RowNum + 1
        '// AppendMenu(g_hMenu, MF_POPUP, hPopUpMenu1, "&File")
        '// Create our Top Menu
        g_hPopUpMenu(TopMNU) = CreatePopupMenu()
        '// For 1st Menu Index is (2 + RowNum) after which it is (1 + RowNum)
        If TopMNU = 1 Then
            g_Rt(TopMNU) = AppendMenu(g_hMenu, MF_POPUP, g_hPopUpMenu(TopMNU), .Cells(2 + RowNum, 2))
        Else
            g_Rt(TopMNU) = AppendMenu(g_hMenu, MF_POPUP, g_hPopUpMenu(TopMNU), .Cells(1 + RowNum, 2))
        End If
        '// Do until we get to the END of the Menu = New TOP LEVEL MENU Starts!
        Do Until .Cells(2 + RowNum, 4).Text = "END"
            Select Case .Cells(2 + RowNum, 1).Value
                Case 1
                    '// Do nothing for Testing
                Case 0
                    '// Menu Seperator/Divider ... IDM_MU + Cells(2 + RowNum, 5)
                    '// AppendMenu(hPopUpMenu1, MF_SEPARATOR, IDM_MU + num, vbNullString)
                    '// If it is within Submenu to a Submenu then....
                    If .Cells(1 + RowNum, 1) = 4 Then
                        g_Rt(TopMNU) = AppendMenu(g_hPopUpSubMenu(SubMNUItem - 1), _
                            MF_SEPARATOR, &O0, vbNullString)
                    Else
                        g_Rt(TopMNU) = AppendMenu(g_hPopUpMenu(TopMNU), _
                            MF_SEPARATOR, &O1, vbNullString)
                    End If
                Case 2
                    '// STD Sub
                    '// AppendMenu(hPopUpMenu1, MF_STRING, IDM_MU + num, " &New task (Run...)")
                    g_Rt(TopMNU) = AppendMenu(g_hPopUpMenu(TopMNU), MF_STRING, _
                        IDM_MU + .Cells(2 + RowNum, 5), .Cells(2 + RowNum, 2))
                    '// Update our Routine to Run here
                    g_APIMacro(MacroNum) = .Cells(2 + RowNum, 3).Text
                    MacroNum = MacroNum + 1
                Case 3
                    '// A SUBMENU Caption = 3
                    g_hPopUpSubMenu(SubMNUItem) = CreatePopupMenu()
                    '// AppendMenu(g_hMenu, MF_POPUP, hPopUpSubMenu1, vbNullString)
                    g_Rt(TopMNU) = AppendMenu(g_hPopUpMenu(TopMNU), MF_POPUP, _
                        g_hPopUpSubMenu(SubMNUItem), .Cells(2 + RowNum, 2))
                    SubMNUItem = SubMNUItem + 1
                 Case 4
                    '// A SUBMENUITEM = 4
                    '// AppendMenu(hPopUpSubMenu1, MF_STRING, IDM_MU + num, "SubMNU &1")
                    '// OK, lets build our sub Menu
                    g_Rt(TopMNU) = AppendMenu(g_hPopUpSubMenu(SubMNUItem - 1), _
                        MF_STRING, IDM_MU + .Cells(2 + RowNum, 5), .Cells(2 + RowNum, 2))
                    '// Update our Routine to Run here
                    g_APIMacro(MacroNum) = .Cells(2 + RowNum, 3).Text
                    MacroNum = MacroNum + 1
                End Select
            RowNum = RowNum + 1
        Loop
    Next TopMNU
End With

End Sub

Public Sub RunAPIMNUMacro(strMacroName As String)
    On Error Resume Next
    Application.Run (strMacroName)
    If Err Then
        MsgBox "Error number:=" & Err.Number & vbCrLf & _
            "Description:=" & Err.Description & vbCrLf & _
            "Check yur macro names!", vbCritical + vbMsgBoxHelpButton, _
            "Menu Macro Error", Err.HelpFile, Err.HelpContext
    End If
    Err.Clear
End Sub
Attribute VB_Name = "basAPIMNU_Hook"
Option Explicit

Public Declare Function CallWindowProc _
    Lib "user32" _
        Alias "CallWindowProcA" ( _
            ByVal lpPrevWndFunc As Long, _
            ByVal hwnd As Long, _
            ByVal Msg As Long, _
            ByVal wParam As Long, _
            ByVal lParam As Long) _
As Long

Private Const WM_COMMAND = &H111
Private Const WM_MENUSELECT As Long = &H11F
''
Public g_lpMyWndProc As Long
Public Const GWL_WNDPROC = (-4)

Public Function HookWinProc(ByVal hw As Long, ByVal uMsg As Long, _
    ByVal wParam As Long, ByVal lParam As Long) As Long

    '// Windows will handle all messages for you.
    '// It's the WM_COMMAND that is the end result of the user selecting a menu choice.
    '// Catch the WM_COMMAND message and do something......
    '// When the user selects a menu item from your menu,
    '// the command ID selected is sent to your window in the WPARAM field.
    '// This allows you to take the correct action for the command.
    If uMsg = WM_COMMAND Then
        '// This is where we catch the Menu selection
        DoEvents
        
        '// You need to match the case with the Menu ID number
        Call RunAPIMNUMacro(g_APIMacro(wParam - IDM_MU))
    End If
    
    '// NB:Pass all messages to the native window procedure to handle other msgs
    HookWinProc = CallWindowProc(g_lpMyWndProc, hw, uMsg, wParam, lParam)
    
End Function



Attribute VB_Name = "basAPIMNU_Loader"
Option Explicit

Sub Loader()

    #If VBA6 Then
        '// A drawback to this method is
        '// you CANNOT use vbModeless....
        '// I'm working on this.
        frmTask.Show
    #Else
        Sorry
    #End If

End Sub

Sub Sorry()
    Dim Msg As String
    
    Msg = "Sorry .... dosen't run on Versions < 2000!"
    MsgBox Msg, vbExclamation
    'Application.UserControl = False
    'Application.IgnoreRemoteRequests = True
End Sub

Attribute VB_Name = "basAPIMNU_Routines"
Option Explicit
'// Place your routines here or Use your own

Sub Dummy()
    MsgBox "Dummy running "
End Sub

Sub ShellRun()
    MsgBox "ShellRun"
End Sub
Sub Refresh()
    MsgBox "Refresh"
End Sub
Sub cmdXit()
    MsgBox "cmdXit"
End Sub

Sub PasteData()
    MsgBox "PasteData"
End Sub
Sub cmdPasteALL()
    MsgBox "cmdPasteALL"
End Sub

Sub ShellShutdownWindows()
    MsgBox "ShellShutdownWindows"
End Sub
Sub ShellSuspendWindows()
    MsgBox "ShellSuspendWindows"
End Sub

Sub ShellTileHorizontally()
    MsgBox "ShellTileHorizontally"
End Sub
Sub ShellTileVertically()
    MsgBox "ShellTileVertically"
End Sub
Sub ShellMinimizeAll()
    MsgBox "ShellMinimizeAll"
End Sub
Sub ShellUndoMinimizeAll()
    MsgBox "ShellUndoMinimizeAll"
End Sub

Sub ShellMinimizeAllExceptXL()
    MsgBox "ShellMinimizeAllExceptXL"
End Sub
Sub ShellCascadeWin()
    MsgBox "ShellCascadeWin"
End Sub
Sub WinOnTop()
    MsgBox "WinOnTop"
End Sub
Sub cmdPrint()
    MsgBox "cmdPrint"
End Sub
Sub cmdPrintTo()
    MsgBox "cmdPrintTo"
End Sub

Sub RunSysInfomation()
    MsgBox "RunSysInfomation"
End Sub
Sub ShellHelp()
    MsgBox "ShellHelp"
End Sub
Sub CtrlP_WinExe()
    MsgBox "CtrlP_WinExe"
End Sub
Sub AboutfrmTask()
    MsgBox "AboutfrmTask"
End Sub

Attribute VB_Name = "frmTask"
Attribute VB_Base = "0{41A148BB-4CA4-4A5F-B662-26B0C3181D49}{D5282898-0267-4555-9CCB-8D34C409BB89}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

'// UserForm
Private Sub UserForm_Initialize()
    
    '// Get the UserForm Handle
    g_hForm = FindWindow(vbNullString, Me.Caption)
    
    '// Create our menu
    Call CreateAPIMenu
    
    '// Work around for Windows repaint
    With Me
        .Height = 200 ' 250 - 45
        .Height = 253 ' Original + 19
    End With
    
    '// Subclass The Userform
    g_lpMyWndProc = SetWindowLong(g_hForm, GWL_WNDPROC, AddressOf HookWinProc)

End Sub
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    '// Clean up
    DestroyMenu g_hMenu
    SetWindowLong g_hForm, GWL_WNDPROC, g_lpMyWndProc
End Sub
Private Sub UserForm_Terminate()
    '// Safety Clean up
    DestroyMenu g_hMenu
    SetWindowLong g_hForm, GWL_WNDPROC, g_lpMyWndProc
End Sub


INQUEST-PP=macro
