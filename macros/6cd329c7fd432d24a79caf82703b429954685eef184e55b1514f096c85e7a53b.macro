Attribute VB_Name = "ENGINE"
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (AMG) ver 3.0.0
'16.09.2004 (AMG) |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.
'28.01.2005 (AMG) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 120 |fffd||fffd||fffd||fffd||fffd||fffd|
'18.02.2005 (AMG) XML |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'19.02.2005 (AMG) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"


Option Explicit

Option Base 0

Const sheetTag = "SHEET", itemTag = "ITEM", rangeTag = "RANGE", formatTag = "FORMAT", dirAtr = "DIR", _
      valueAtr = "VALUE", refAtr = "REF", tmpSheetAtr = "TMPSHEET", formatAtr = "SFORMAT", _
      alignAtr = "ALIGN", widthAtr = "W", newSheetAtr = "NEWSHEET", markAtr = "id", _
      rangeOffsetTag = "RANGEOFFSET", offsetXatr = "X", offsetYatr = "Y", nameAttr = "NAME", _
      cellTag = "CELL", autoFitAtr = "AUTOFIT", exportTag = "EXPORT", rowHeightAtr = "ROWHEIGHT", _
      setWidthTag = "SW", metaTag = "METADATA", rangeCountAtr = "RANGECOUNT", orientAtr = "ORIENT"
      

Private rangeCount As Integer
Private passedRanges As Integer
      
Private BookPath As String
Private BookName As String

Dim StartX As Integer, StartY As Integer, EndX As Integer, EndY As Integer, tmpSheetsCount As Integer, _
    repBook As Workbook, tmpSheet As Worksheet, curSheet As Worksheet

Sub InitReport()
    With Application
      .WindowState = xlMaximized
      .Interactive = False ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel
      .ScreenUpdating = False
      .DisplayAlerts = False
      '.Visible = True
      .StatusBar = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
      .EnableCancelKey = xlErrorHandler
    End With
End Sub

Function GetBoolean(elem As MSXML.IXMLDOMElement, AttrName As String)
    If elem.getAttribute(AttrName) = "TRUE" Then
      GetBoolean = True
    Else
      GetBoolean = False
    End If
End Function

Function MyReplace(Expr As String, Fnd As String, Rpl As String) As String
Dim Result As String, pos As Integer
  pos = InStr(Expr, Fnd)
  If pos <> 0 Then
    Result = left(Expr, pos - 1) + Rpl + right(Expr, Len(Expr) - pos)
  Else
    Result = Expr
  End If
  MyReplace = Result
End Function

Function StrToBool(ByVal Value As String) As Boolean
    StrToBool = False
    On Error Resume Next
    If Value = "1" Or UCase(Value) = "TRUE" Then
      StrToBool = True
    End If
End Function

Function StrToDbl(ByVal Value As String) As Double
Dim ds As String
    
    ds = Application.International(xlDecimalSeparator)
    If ds <> "." Then
      Value = MyReplace(Value, ".", ds)
    End If
      
    StrToDbl = CDbl(Value)
End Function

Sub EndReport()
    DeleteTmpSheets
    With Application
       .StatusBar = False
       .ScreenUpdating = True
       .Interactive = True
       .DisplayAlerts = True
    End With
    Set repBook = Nothing
    Set tmpSheet = Nothing
    Set curSheet = Nothing
End Sub

Sub ShowError()
Dim msg As String
  EndReport
  If Err.Number = 18 Then
    MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    Exit Sub
  End If
  If Err.Number <> 0 Then
    msg = "Error # " & str(Err.Number) & " was generated by " & Err.Source & Chr(13) & Err.Description
    MsgBox msg, , "Error", Err.HelpFile, Err.HelpContext
  End If
End Sub

Sub Reset()
    
    If Not curSheet Is Nothing Then curSheet.Cells(1, 1).Select
    
    StartY = 1
    EndY = 0
    StartX = 1
    EndX = 0
    'RowCount = 0
    
End Sub

Sub MySplit(str As String, splitter As String, ByRef tmpArray() As String)
Const delta = 3 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0
Dim pos, beg, spCount As Integer, _
    ArrCount As Long
    

   ReDim tmpArray(0)
   If (str = "") Or (splitter = "") Then
      Exit Sub
   End If
   
   spCount = Len(splitter)
   beg = 1
   ArrCount = -1
   
   Do
      pos = InStr(beg, str, splitter)
      If pos <> 0 Then
         ArrCount = ArrCount + 1
         If UBound(tmpArray) < ArrCount Then
            ReDim Preserve tmpArray(UBound(tmpArray) + delta)
         End If
         tmpArray(ArrCount) = Mid(str, beg, pos - beg)
         beg = pos + spCount
      Else
         ReDim Preserve tmpArray(ArrCount + 1)
         tmpArray(ArrCount + 1) = Mid(str, beg)
         Exit Do
      End If
   Loop

End Sub


Function GetRandomName() As String
Dim RndValue1, RndValue2, RndValue3 As Long
  
    Randomize
    RndValue1 = Int((100000 - 10000 + 1) * Rnd + 10000)
    RndValue2 = Int((100000 - 10000 + 1) * Rnd + 10000)
    RndValue3 = Int((100000 - 10000 + 1) * Rnd + 10000)
  
    GetRandomName = CStr(RndValue1) + "-AZK-" + CStr(RndValue2) + "-AMG-" + CStr(RndValue3)

End Function

'Sub setXML(XML As String, mode As Integer)
'  intXML = XML
'  dataMode = mode
'End Sub

'Function getExternalXML() As String
'    Dim Data As Object
        
'    Set Data = CreateObject("AZK2.Data")
    
    'Code = Data.GetCode
'    getExternalXML = Data.GetXML
'    Set Data = Nothing

'End Function

Sub CreateReportExt(TemplatePath As String, TemplateName As String, XML As String)
    CreateReportMain TemplatePath, TemplateName, 0, XML, False, ""
End Sub

Sub CreateReport(TemplatePath As String, TemplateName As String, XML As String, isSave As Boolean, SaveName As String)
    CreateReportMain TemplatePath, TemplateName, 0, XML, isSave, SaveName
End Sub


Private Function OpenBook(TemplatePath As String, TemplateName As String) As Workbook

    Set OpenBook = Application.Workbooks.Open(TemplatePath + TemplateName)

End Function

Private Sub SmartOpenXLA(TemplatePath As String, XLAName As String)
    Dim wb As Workbook
    On Error GoTo Err
    Set wb = Workbooks.Item(XLAName)
    Set wb = Nothing
    Exit Sub
Err:
    Application.Workbooks.Open (TemplatePath + XLAName)
End Sub

Sub CreateReportMain(TemplatePath As String, TemplateName As String, dataMode As Integer, InXML As String, isSave As Boolean, SaveName As String)
    Dim book As Workbook
    
    On Error GoTo ErrorHandler
    
    InitReport
    
    BookPath = TemplatePath
    BookName = TemplateName
    
    If UCase(TemplateName) = "MONTHREPORT.XLT" Then
      'Dim xla As Workbook
      Dim xlt As Workbook
      
      
      SmartOpenXLA TemplatePath, "MonthReport.xla"
      
      'Application.Workbooks.Open (TemplatePath + "MonthReport.xla")
      
      Set xlt = Application.Workbooks.Open(TemplatePath + TemplateName)
      
'      Application.Run xla.Name + "!RunReport", xlt
      Application.Run "MonthReport.xla!RunReport", xlt
      
      'Set xla = Nothing
      Set xlt = Nothing
      
      EndReport
      Exit Sub
    End If
    
    Set book = OpenBook(BookPath, BookName)
    
    If InStr(book.Name, ".") <> 0 Then Exit Sub   '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    FillReport book, InXML
    
    EndReport
    
    If isSave Then
        book.SaveAs FileName:=SaveName
    End If
    
    Set book = Nothing
    
    Exit Sub
ErrorHandler:
    ShowError
End Sub

Private Function GetRangeCountValue(elem As MSXML.IXMLDOMElement)
    Dim list As MSXML.IXMLDOMNodeList
    Dim metaElem As MSXML.IXMLDOMElement
    Dim i As Integer
    Dim Value As Variant
        
    GetRangeCountValue = 0
    
    Set list = elem.getElementsByTagName(metaTag)
    For i = 0 To list.Length - 1
        Set metaElem = list.Item(i)
        Value = metaElem.getAttribute(rangeCountAtr)
        If Not IsNull(Value) Then
          GetRangeCountValue = GetRangeCountValue + CInt(Value)
        End If
    Next i
'    Set list = Nothing
End Function

Sub FillReport(rb As Workbook, XML As String)
    Dim doc As New MSXML.DOMDocument
   
    Set repBook = rb
    tmpSheetsCount = repBook.Worksheets.Count

    'MsgBox (XML)
  
    'XML = "<DOCUMENT><SHEET TMPSHEET='Sheet1' NEWSHEET='|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|'><RANGE REF='1,1,2,2'><ITEM REF='1,1' VALUE='GGGGG'/></RANGE></SHEET></DOCUMENT>"
    If doc.loadXML(XML) Then
       Application.StatusBar = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
       rangeCount = GetRangeCountValue(doc.documentElement)
       passedRanges = 0
       ParseNodes doc.documentElement
    End If
       
  '     Set Book = Application.Workbooks(xltName)
'       tmpAmount = rb.Worksheets.Count
  
'       Set NodeList = Doc.getElementsByTagName(SheetTag)
'       If NodeList.Length > 0 Then
'          For i = 0 To NodeList.Length - 1
'             Application.StatusBar = "|fffd||fffd||fffd||fffd| " + CStr(i + 1) + " |fffd||fffd| " + CStr(NodeList.Length)
'             DoSheet repBook, NodeList.Item(i)
'          Next i
          
'       End If
     
       
          
          
          
          
'     hCount = 1
'     History(hCount) = node.parentNode.childNodes.Length
     
'     While hCount > 0
'       While History(hCount) > 0
         
'         Set Elem = node.parentNode.childNodes.Item(node.parentNode.childNodes.Length - History(hCount))
'         History(hCount) = History(hCount) - 1
         'MsgBox Elem.tagName + "  " + CStr(hCount)
         
'         Select Case Elem.tagName
'         Case "SHEET"
'              tmpSheetName = Elem.getAttribute("TMP_NAME")
'              NewSheetIdx = CreateNewSheet(Application.Workbooks(xltName), tmpSheetName, Elem.getAttribute("NEW_NAME"))
'         Case "RD"
'              flag = RANGE(Book, tmpSheetName, NewSheetIdx, Elem, "D")
'         Case "RR"
'              flag = RANGE(Book, tmpSheetName, NewSheetIdx, Elem, "R")
              
'         End Select
         
         
'         If Elem.hasChildNodes Then
'            Set node = Elem.firstChild
'            hCount = hCount + 1
'            History(hCount) = node.parentNode.childNodes.Length
'         End If
         
'       Wend 'History(hCount)
       
'       Set node = node.parentNode
'       hCount = hCount - 1
'     Wend 'hCount
   
'     flag = DeleteTmpSheets(Book, tmpAmount)
  If Not curSheet Is Nothing Then curSheet.Cells(1, 1).Select
End Sub

Sub SaveToFile(FileName As String, Value As String)
    Dim fs, a
    
    Set fs = CreateObject("Scripting.FileSystemObject")
    Set a = fs.CreateTextFile(FileName, True)
    a.WriteLine (Value)
    a.Close
End Sub

Private Function GetExpString(Value As String) As String
    Dim i As Long
    Dim Res As String
    Dim s As String
          
    For i = 1 To Len(Value)
        s = Mid(Value, i, 1)
        If s = Chr(10) Then
            Res = Res + Chr(13) + s
        Else
          Res = Res + s
        End If
    Next i
    GetExpString = Res
End Function

Private Sub Export(elem As MSXML.IXMLDOMElement)
    Dim FileName As String
    Dim S_Data As String
    Dim i As Integer
    Dim cdataElem As MSXML.IXMLDOMCDATASection
    
    FileName = elem.getAttribute("FILE_NAME")
    
    For i = 0 To elem.childNodes.Length - 1
        If elem.childNodes.Item(i).nodeType = MSXML.NODE_CDATA_SECTION Then
            Set cdataElem = elem.childNodes.Item(i)
            S_Data = cdataElem.Data
            If left(S_Data, 19) = "tatAccStatementExp1" Then
                S_Data = Chr(12) + S_Data
                S_Data = Replace(S_Data, "tatAccStatementExp1", "|12||1b|x0|1b|3|18||1b|g")
                S_Data = ConvANSItoOEM(S_Data)
            End If
        End If
    Next i
    S_Data = Replace(S_Data, Chr(10), (Chr(13) + Chr(10)))
    SaveToFile FileName, S_Data
'    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    SaveToFile FileName, GetExpString(S_Data)
End Sub

Private Function ConvANSItoOEM(strText) As Variant
    Dim Arr() As Byte
    Dim i As Long
    Dim strOut As String
    Dim intLB As Long
    Dim intUB As Long
    If (strText = "") Or (IsNull(strText) = True) Then
        ConvANSItoOEM = ""
        Exit Function
    End If
    Arr() = StrConv(strText, vbFromUnicode)
    intLB = LBound(Arr)
    intUB = UBound(Arr)
    For i = intLB To intUB
        Select Case Arr(i)
            Case Is < 161
            Case 192 To 239
                Arr(i) = Arr(i) - 64
            Case 240 To 255
                Arr(i) = Arr(i) - 16
            Case 168 ' &#168;
                Arr(i) = 240
            Case 184 ' &#184;
                Arr(i) = 241
            Case 178 ' &#178;
                Arr(i) = 73
            Case 179 ' &#179;
                Arr(i) = 105
            Case 170 ' &#170;
                Arr(i) = 242
            Case 185 ' &#185;
                Arr(i) = 252
            Case 186 ' &#186;
                Arr(i) = 243
            Case 175 ' &#175;
                Arr(i) = 244
            Case 191 ' &#191;
                Arr(i) = 245
            Case 161 ' &#161;
                Arr(i) = 246
            Case 162 ' &#162;
                Arr(i) = 247
        End Select
    Next i
    ConvANSItoOEM = StrConv(Arr(), vbUnicode)
End Function


Private Sub showProgress()
    Dim percent As Integer
    passedRanges = passedRanges + 1
    If rangeCount > 0 Then
        percent = (passedRanges) / rangeCount * 100
        If percent > 100 Then percent = 100
        If (right(CStr(percent), 1) = "0" Or right(CStr(percent), 1) = "5") Then
            Application.StatusBar = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " + CStr(percent) + "%)"
        End If
    End If
End Sub

Private Sub ParseNodes(elem As MSXML.IXMLDOMElement)
Dim i As Integer, childElem As MSXML.IXMLDOMElement, enterChild As Boolean

   enterChild = True
      
   For i = 0 To elem.childNodes.Length - 1
'      If Elem.childNodes.Item(i).nodeType = MSXML.NODE_ELEMENT Then
          Set childElem = elem.childNodes.Item(i)
          'MsgBox child.nodeName
          Select Case childElem.tagName
             Case sheetTag
                  enterChild = True
                  NewSheet childElem.getAttribute(tmpSheetAtr), _
                           childElem.getAttribute(newSheetAtr), _
                           GetBoolean(childElem, "CLEAR"), _
                           childElem.getAttribute(orientAtr)
             Case rangeTag
                  enterChild = False
                  range childElem
                  showProgress
             Case rangeOffsetTag
                  enterChild = False
                  RangeOffset childElem
                  showProgress
             Case formatTag
                  enterChild = False
                  Format childElem
             Case cellTag
                  enterChild = False
                  CellValue childElem
             Case exportTag
                  enterChild = False
                  Export childElem
             Case setWidthTag
                  enterChild = False
                  SetWidth childElem
          End Select
      
          If enterChild And childElem.hasChildNodes Then
             ParseNodes childElem
          End If
'      End If
   
   Next i

End Sub

Sub NewSheet(Source As Variant, NewName As Variant, ClearContents As Boolean, Orient As String)
Const shnCount = 31
Dim i, rndValue As Integer, tmp As String, SourceName As String, SheetName As String
    
    Reset
    
    If repBook.Worksheets.Count > 120 Then
       DeleteTmpSheets
       Set repBook = OpenBook(BookPath, BookName)
    End If
    
    NewName = Trim(NewName)
    
    If IsNull(Source) Then SourceName = "" Else SourceName = CStr(Source)
    If IsNull(NewName) Then SheetName = "" Else SheetName = CStr(NewName)
    
    If SourceName <> "" Then
       Set tmpSheet = repBook.Worksheets(SourceName)
    Else
       Set tmpSheet = repBook.Worksheets(1)
    End If
    
    If Orient = "PORTRAIT" Then
      tmpSheet.PageSetup.Orientation = xlPortrait
    End If
    
    If Orient = "LANDSCAPE" Then
      tmpSheet.PageSetup.Orientation = xlLandscape
    End If
    
    tmpSheet.Copy after:=repBook.Worksheets(repBook.Worksheets.Count)
    Set curSheet = repBook.Worksheets(repBook.Worksheets.Count)
    
    If SheetName <> "" Then
       If Len(SheetName) > shnCount Then
          SheetName = left(SheetName, shnCount)
       End If
       
       Randomize
       For i = 1 To repBook.Worksheets.Count - 1
          If UCase(repBook.Worksheets(i).Name) = UCase(SheetName) Then
             rndValue = Int((9999 * Rnd) + 1)
             tmp = " (" + CStr(rndValue) + ")"
             SheetName = left(SheetName, shnCount - Len(tmp)) + tmp
          End If
       Next i
       curSheet.Name = SheetName
    End If
    
    If ClearContents Then
      With curSheet
         .Cells.ClearFormats
         .Cells.ClearContents
      End With
    End If
    
End Sub

Sub CellValue(cellElem As MSXML.IXMLDOMElement)
    Dim CellName As String
    Dim Value As String
        
    CellName = cellElem.getAttribute(nameAttr)
    Value = cellElem.getAttribute(valueAtr)
    curSheet.range(CellName).Value = Value
End Sub

Sub ProcessItem(rangeElem As MSXML.IXMLDOMElement)
Dim itemElem As MSXML.IXMLDOMElement, i As Integer, Ref As String, Value As String, Row As Integer, _
    refArr() As String, Col As Integer


    For i = 0 To rangeElem.childNodes.Length - 1
    
      Set itemElem = rangeElem.childNodes.Item(i)
      Ref = itemElem.getAttribute(refAtr)
      Value = itemElem.getAttribute(valueAtr)
    
      MySplit Ref, ",", refArr
      Row = refArr(0)
      Col = refArr(1)
      tmpSheet.Cells(Row, Col).Value = Value
    
    Next i

End Sub



Sub range(rangeElem As MSXML.IXMLDOMElement)
Dim dir As String, i As Integer, top As Integer, left As Integer, right As Integer, bottom As Integer, _
    x As Integer, y As Integer, v As Variant, refArr() As String, autoFit As Boolean, _
    rowHeight As Variant, isSetRowHeight As Boolean, height As Double
  
    v = rangeElem.getAttribute(refAtr)
    If IsNull(v) Then Exit Sub
  
    MySplit CStr(v), ",", refArr
    top = refArr(0)
    left = refArr(1)
    bottom = refArr(2)
    right = refArr(3)
  
    v = rangeElem.getAttribute(dirAtr)
    If IsNull(v) Or (v = "D") Then dir = "D" Else If v = "R" Then dir = "R"
    
    rowHeight = rangeElem.getAttribute(rowHeightAtr)
    If IsNull(rowHeight) Then rowHeight = ""
    If Len(rowHeight) <= 0 Then
        isSetRowHeight = False
        height = 0#
    Else
        isSetRowHeight = True
        height = StrToDbl(rowHeight)
    End If
    
    autoFit = rangeElem.getAttribute(autoFitAtr)
    If IsNull(autoFit) Then autoFit = ""
    autoFit = StrToBool(CStr(autoFit))
    
    ProcessItem rangeElem
     
    If dir = "D" Then
       x = EndY + 1
       y = 1
       EndY = EndY + bottom - top + 1
       StartY = EndY - (bottom - top)
       EndX = right - left + 1
     
    ElseIf dir = "R" Then
       x = StartY
       y = EndX + 1
       EndY = StartY + bottom - top
       EndX = EndX + right - left + 1
    
       For i = 0 To right - left
         curSheet.Columns(y + i).ColumnWidth = tmpSheet.Columns(left + i).ColumnWidth
       Next i
    End If
  
    On Error Resume Next
    For i = 0 To bottom - top
        If Not isSetRowHeight Then
          curSheet.Rows(x + i).rowHeight = tmpSheet.Rows(top + i).rowHeight
        Else
          curSheet.Rows(x + i).rowHeight = height
        End If
    Next i
    On Error GoTo 0
  
    With tmpSheet
         .range(.Cells(top, left), .Cells(bottom, right)).Copy
'         Destination:=curSheet.Cells(x, y)
         curSheet.Cells(x, y).PasteSpecial Paste:=xlAll
    End With
    If autoFit Then
        curSheet.Cells(x, y).Rows.autoFit
    End If
End Sub

Sub RangeOffset(rangeElem As MSXML.IXMLDOMElement)
Dim i As Integer, top As Integer, left As Integer, right As Integer, bottom As Integer, _
    offsetx As Integer, offsety As Integer, v As Variant, refArr() As String, autoFit As Boolean

    v = rangeElem.getAttribute(refAtr)
    If IsNull(v) Then Exit Sub
  
    MySplit CStr(v), ",", refArr
    top = refArr(0)
    left = refArr(1)
    bottom = refArr(2)
    right = refArr(3)
  
    v = rangeElem.getAttribute(offsetXatr)
    offsetx = CInt(v)
    
    v = rangeElem.getAttribute(offsetYatr)
    offsety = CInt(v)
    
    autoFit = StrToBool(CStr(rangeElem.getAttribute(autoFitAtr)))
    
    ProcessItem rangeElem

    If offsetx <> 0 Then
      For i = 0 To bottom - top
        curSheet.Rows(top + offsetx + i).rowHeight = tmpSheet.Rows(top + i).rowHeight
      Next i
    End If
    
    If offsety <> 0 Then
       For i = 0 To right - left
         curSheet.Columns(left + offsety + i).ColumnWidth = tmpSheet.Columns(left + i).ColumnWidth
       Next i
    End If
    
    With tmpSheet
         .range(.Cells(top, left), .Cells(bottom, right)).Copy
'         Destination:=curSheet.Cells(x, y)
         curSheet.Cells(top + offsetx, left + offsety).PasteSpecial Paste:=xlAll
    End With
    
    If autoFit Then
        curSheet.Cells(top + offsetx, left + offsety).Rows.autoFit
    End If
End Sub

Sub SetWidth(elem As MSXML.IXMLDOMElement)
    Dim Col As Integer, Width As Double
    
    Col = CInt(elem.getAttribute(refAtr))
    Width = StrToDbl(CStr(elem.getAttribute(widthAtr)))
    
    curSheet.Columns(Col).ColumnWidth = Width
End Sub

Sub Format(formatElem As MSXML.IXMLDOMElement)
'Sub Format(Row As Integer, Col As Integer, Kind As Integer, W As Double, Align As String, Value As Variant)
Dim Ref As String, SFormat As String, w As Double, Align As String, _
Value As String, Row As Integer, refArr() As String, Col As Integer, v As Variant

    
    Ref = formatElem.getAttribute(refAtr)
    Value = formatElem.getAttribute(valueAtr)
    SFormat = formatElem.getAttribute(formatAtr)
    w = StrToDbl(CStr(formatElem.getAttribute(widthAtr)))
    Align = formatElem.getAttribute(alignAtr)
    
    MySplit Ref, ",", refArr
    Row = refArr(0)
    Col = refArr(1)
    
    curSheet.Columns(Col).ColumnWidth = w
    
    With tmpSheet.Cells(Row, Col)
      .Value = Value
      .NumberFormat = SFormat
      
      Select Case Align
        Case "R"
          .HorizontalAlignment = xlRight
        Case "C"
          .HorizontalAlignment = xlCenter
        Case "L"
          .HorizontalAlignment = xlLeft
      End Select
    End With
    
    
End Sub

Sub DeleteTmpSheets()
Dim i As Integer

   If Not repBook Is Nothing Then
        For i = 1 To tmpSheetsCount
          If repBook.Worksheets.Count > 1 Then
             repBook.Worksheets(1).Delete
          End If
        Next i
   End If
End Sub

'Private Static Function repBook(Optional rb As Workbook) As Workbook
'Dim wb As Workbook
'    If Not rb Is Nothing Then
'       Set wb = rb
'    End If
'    Set repBook = wb
'End Function




Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True




Option Explicit

Attribute VB_Name = "ThisWorkBook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True




Option Explicit



INQUEST-PP=macro
