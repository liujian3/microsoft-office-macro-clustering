Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Modul1"
Option Explicit
Option Compare Text

' Fixed variables
' 4 columns: slave, type, address, format
Const colMod As Integer = 3
' 4 columns: device, type, instance, units/states
Const colBac As Integer = 7
Const colName As Integer = 2
Const colObjName As Integer = 13
Const colEvent As Integer = 15
Const colNC As Integer = 14

Const bSlave As Boolean = False
Const bP90 As Boolean = False

Sub genConfig()
    Dim i As Integer, nRow As Integer, nEmpty As Integer, strName As String
    Dim strBac As String, strMod As String, typMod As String, typBac As String
    Dim arSplit As Variant, strPrefix As String, strLastBac As String
    Dim bMod As Boolean, bTCP As Boolean, bProfi As Boolean, nFD As Integer
    Dim nMod As Integer, nTCP As Integer, nProfi As Integer
    Dim nMBus As Integer, bMBus As Boolean
    
    Open ActiveWorkbook.Path & IIf(bSlave, "\modslave1.txt", "\modmster1.txt") For Output As #1
    Open ActiveWorkbook.Path & IIf(bP90, "\p90ddc1.txt", "\bac1.txt") For Output As #2
    Open ActiveWorkbook.Path & "\dispatch.txt" For Output As #3
    Open ActiveWorkbook.Path & "\mbtcp1.txt" For Output As #4
    Open ActiveWorkbook.Path & "\dpmh1.txt" For Output As #5
    Open ActiveWorkbook.Path & "\mbus1.txt" For Output As #6
    
    For i = 1 To 6
        Print #i, getHeader
    Next
    
    Print #5, "[M failure]"
    Print #5, "  name = Failure DPMH"
    Print #5, "  query = pe"
    Print #5, ""
    
    Print #2, "[M failure]"
    Print #2, "  name = Failure " & IIf(bP90, "P90", "BACnet")
    Print #2, "  query = pe"
    Print #2, ""
    
    nMod = 0
    nTCP = 0
    nProfi = 0
    nMBus = 0
    
    With Sheets("projektierung")
        nRow = 2
        nEmpty = 0
        strLastBac = ""
        While nEmpty < 50
        
            bMod = False
            bTCP = False
            bProfi = False
            bMBus = False
            
            .Rows(nRow).Interior.ColorIndex = xlColorIndexNone
            
            nEmpty = nEmpty + 1
            
            If .Cells(nRow, colBac) = "" Then GoTo nextLine
            If .Cells(nRow, 1) <> "" Then strPrefix = Trim(.Cells(nRow, 1)) & " "
            
            If .Cells(nRow, colObjName) <> "" Then
                strName = .Cells(nRow, colObjName)
            Else
                strName = strPrefix & .Cells(nRow, colName)
            End If
            
            If .Cells(nRow, colBac + 1) = "NC" Then
                strBac = .Cells(nRow, colBac) & "." & .Cells(nRow, colBac + 1) & " " & .Cells(nRow, colBac + 2)
                Print #2, "[A " & strBac & "]"
                Print #2, "  name = " & strName
                Print #2, "  bac_notification_class = " & .Cells(nRow, colBac + 2)
                Print #2, "  bac_priority = (" & .Cells(nRow, colBac + 4) & ")"
                Print #2, "  bac_ack_required = (" & .Cells(nRow, colBac + 5) & ")"
                Print #2, "  bac_description = " & Trim(strPrefix & .Cells(nRow, colName))
                Print #2, ""
                
                .Rows(nRow).Interior.Color = RGB(192, 255, 192)
                
                nEmpty = 0
                GoTo nextLine
            End If
            
            If .Cells(nRow, colMod) = "" Then GoTo nextLine
            nEmpty = 0
            
            
            Select Case .Cells(nRow, colMod + 1)
            Case "mbus failure", "failure", "input", "holding", "coil", "status":
                If InStr(.Cells(nRow, colMod), " ") > 0 Then
                    bTCP = True
                    nFD = 4
                ElseIf .Cells(nRow, colMod + 1) Like "*mbus*" Then
                    bMBus = True
                    nFD = 6
                Else
                    bMod = True
                    nFD = 1
                End If
            Case "value":
                bMBus = True
                nFD = 6
            Case "inbyte", "outbyte", "inbit", "outbit", "diagbit":
                bProfi = True
                nFD = 5
            Case Else:
                GoTo nextLine
            End Select
            
            Select Case .Cells(nRow, colBac + 1)
            Case "BI", "MI":
'forceDigital:
                typMod = "M"
                typBac = "S"
            Case "BO", "MO", "BV", "MV":
'                If .Cells(nRow, 10) = "" Then GoTo forceDigital
                typMod = "S"
                If bP90 Then
                    typBac = "M"
                Else
                    typBac = "S"
                End If
            Case "AI":
'forceAnalog:
                typMod = "X"
                typBac = "Y"
            Case "AO", "AV":
'                If .Cells(nRow, 10) = "" Then GoTo forceAnalog
                typMod = "Y"
                If bP90 Then
                    typBac = "X"
                Else
                    typBac = "Y"
                End If
            Case Else:
                GoTo nextLine
            End Select
            
            If bProfi Then
                strMod = Trim(.Cells(nRow, colMod + 1) & " " & .Cells(nRow, colMod) & "." & .Cells(nRow, colMod + 2))
            Else
                strMod = Trim(.Cells(nRow, colMod) & " " & .Cells(nRow, colMod + 1) & " " & .Cells(nRow, colMod + 2))
            End If
            If bP90 Then
                strBac = .Cells(nRow, colBac) & " " & .Cells(nRow, colBac + 2)
            Else
                strBac = .Cells(nRow, colBac) & "." & .Cells(nRow, colBac + 1) & " " & .Cells(nRow, colBac + 2)
            End If
            strMod = Replace(strMod, "mbus ", "")
            
            Print #nFD, "[" & typMod & " " & strMod & "]"
            Print #nFD, "  name = " & strName
            Print #nFD, "  query = pe"
            If .Cells(nRow, colMod + 3) <> "" Then Print #nFD, "  format = " & .Cells(nRow, colMod + 3)
            If typMod = "S" Or typMod = "Y" Then Print #nFD, "  writecache = yes"
            Print #nFD, ""
            
            If strLastBac = strBac Then GoTo skipBACnet
            strLastBac = strBac
            Print #2, "[" & typBac & " " & strBac & "]"
            Print #2, "  name = " & strName
            Print #2, "  query = pe"
            If typBac = "S" Or typBac = "Y" Then Print #2, "  writecache = yes"
            If Not bP90 Then Print #2, "  bac_description = " & strPrefix & .Cells(nRow, colName)
            
            If Not bP90 Then
                Select Case .Cells(nRow, colBac + 1)
                Case "AI", "AO", "AV":
                    Print #2, "  bac_cov_increment = 0"
                    Print #2, "  bac_resolution = 0.1"
                    Print #2, "  bac_units = " & getUnits(.Cells(nRow, colBac + 3))
                    If .Cells(nRow, colBac + 1) <> "AI" Then
                            Print #2, "  bac_relinquish_default = 0 -V"
                    End If
                    
                Case "BI", "BV":
                    Print #2, "  bac_polarity = 0"
                    
                    If .Cells(nRow, colNC) <> "" Then
                        Print #2, "  bac_time_delay = 0"
                        Print #2, "  bac_alarm_value = 1"
                        Print #2, "  bac_event_enable = (" & .Cells(nRow, colEvent) & ")"
                        Print #2, "  bac_notify_type = event"
                        Print #2, "  bac_notification_class = " & .Cells(nRow, colNC)
                    End If
                    arSplit = Split(.Cells(nRow, colBac + 3), ";")
                    If UBound(arSplit) > 0 Then
                        Print #2, "  bac_inactive_text = " & arSplit(0)
                        Print #2, "  bac_active_text = " & arSplit(1)
                    Else
                        Print #2, "  bac_inactive_text = Off"
                        Print #2, "  bac_active_text = On"
                    End If
                    If .Cells(nRow, colBac + 1) <> "BI" Then
                            Print #2, "  bac_relinquish_default = 0 -V"
                    End If
                Case "BO":
                    Print #2, "  bac_polarity = 0"
                    arSplit = Split(.Cells(nRow, colBac + 3), ";")
                    arSplit = Split(.Cells(nRow, colBac + 3), ";")
                    If UBound(arSplit) > 0 Then
                        Print #2, "  bac_inactive_text = " & arSplit(0)
                        Print #2, "  bac_active_text = " & arSplit(1)
                    Else
                        Print #2, "  bac_inactive_text = Off"
                        Print #2, "  bac_active_text = On"
                    End If
                    If .Cells(nRow, colBac + 1) <> "BI" Then
                            Print #2, "  bac_relinquish_default = 0 -V"
                    End If
                Case "MI", "MO", "MV":
                    arSplit = Split(.Cells(nRow, colBac + 3), ";")
                    If UBound(arSplit) > 0 Then
                        Print #2, "  bac_number_of_states = " & UBound(arSplit) + 1
                        Print #2, "  bac_state_text = (""" & Join(arSplit, """,""") & """)"
                    Else
                        Print #2, "  bac_number_of_states = " & Val(.Cells(nRow, colBac + 3)) + 1
                        Print #2, "  bac_state_text = ()"
                    End If
                    If .Cells(nRow, colBac + 1) <> "MI" Then
                            Print #2, "  bac_relinquish_default = 0 -V"
                    End If
                End Select
            End If
            
            Print #2, ""
skipBACnet:
            Print #3, "# " & .Cells(nRow, colName)
            If typBac = "S" Or typBac = "Y" Then
                If bMod Then Print #3, "[" & IIf(bSlave, "90.", "80.") & typMod & " mod " & strMod & "]"
                If bTCP Then Print #3, "[860." & typMod & " mbtcp " & strMod & "]"
                If bMBus Then Print #3, "[60." & typMod & " mbus " & strMod & "]"
                If bProfi Then Print #3, "[1060." & typMod & " dpmh " & strMod & "]"
                If Not bP90 Then Print #3, "  target = 940." & typBac & " bac " & strBac
                If bP90 Then Print #3, "  target = 30." & typBac & " p90 " & strBac
                If .Cells(nRow, colBac + 4) <> "" Then Print #3, "  value = " & .Cells(nRow, colBac + 4)
                If Not .Cells(nRow, colBac + 1) Like "*I" Then Print #3, "  prio = 8"
            End If
            If typMod = "S" Or typMod = "Y" Then
                If Not bP90 Then Print #3, "[940." & typBac & " bac " & strBac & "]"
                If bP90 Then Print #3, "[30." & typBac & " p90 " & strBac & "]"
                If bMod Then Print #3, "  target = " & IIf(bSlave, "90.", "80.") & typMod & " mod " & strMod
                If bTCP Then Print #3, "  target = 860." & typMod & " mbtcp " & strMod
                If bProfi Then Print #3, "  target = 1060." & typMod & " dpmh " & strMod
                If .Cells(nRow, colBac + 5) <> "" Then Print #3, "  value = " & .Cells(nRow, colBac + 5)
            End If
            Print #3, ""
            
            If bMod Then nMod = nMod + 1
            If bTCP Then nTCP = nTCP + 1
            If bProfi Then nProfi = nProfi + 1
            If bMBus Then nMBus = nMBus + 1
            
            .Rows(nRow).Interior.Color = RGB(0, 255, 0)
nextLine:
            nRow = nRow + 1
        Wend
    End With
            
    Close #1
    Close #2
    Close #3
    Close #4
    Close #5
    Close #6
    
    If nMod = 0 Then Kill ActiveWorkbook.Path & "\" & IIf(bSlave, "modslave1.txt", "modmster1.txt")
    If nTCP = 0 Then Kill ActiveWorkbook.Path & "\mbtcp1.txt"
    If nMBus = 0 Then Kill ActiveWorkbook.Path & "\mbus1.txt"
    If nProfi = 0 Then Kill ActiveWorkbook.Path & "\dpmh1.txt"
End Sub

' Erzeugen eines Headers f|fffd|r Projektierungen
Function getHeader(Optional ByVal strPrefix As String = "#") As String
    Dim strIP As String, strOrt As String, strValue As String
    Dim iLen As Integer, strPostfix As String
    
    ' Mindestl|fffd|nge
    iLen = 60
    
    ' Maximale L|fffd|nge der Zeile ermitteln
    ' Username, Computername, DKZ-Typ und IP d|fffd|rften nicht l|fffd|nger als Pfad/Dateiname sein
    If Len(ThisWorkbook.Path) > iLen Then iLen = Len(ThisWorkbook.Path)
    If Len(ThisWorkbook.Name) > iLen Then iLen = Len(ThisWorkbook.Name)
    If Len(Date + Time) > iLen Then iLen = Len(Date + Time)
    
    strPrefix = strPrefix & " "
    strPostfix = " " & strPrefix
    
    getHeader = strPrefix & Replicate("=", 9 + iLen) & strPostfix & vbCrLf & _
                strPrefix & "Erzeugt: " & Date + Time & Replicate(" ", iLen - Len(Date + Time)) & strPostfix & vbCrLf & _
                strPrefix & Replicate("-", 9 + iLen) & strPostfix & vbCrLf & _
                strPrefix & "User   : " & UCase(getEnv("username")) & Replicate(" ", iLen - Len(getEnv("username"))) & strPostfix & vbCrLf & _
                strPrefix & "Host   : " & UCase(getEnv("computername")) & Replicate(" ", iLen - Len(getEnv("computername"))) & strPostfix & vbCrLf & _
                strPrefix & "Pfad   : " & ThisWorkbook.Path & Replicate(" ", iLen - Len(ThisWorkbook.Path)) & strPostfix & vbCrLf & _
                strPrefix & "Datei  : " & ThisWorkbook.Name & Replicate(" ", iLen - Len(ThisWorkbook.Name)) & strPostfix & vbCrLf & _
                strPrefix & Replicate("=", 9 + iLen) & strPostfix & vbCrLf
End Function

Function Replicate(ByVal strVar As String, ByVal nCount As Integer) As String
    Replicate = Replace(Space(nCount), " ", strVar)
End Function

Function getEnv(ByVal strPara As String) As String
    Dim strTemp As String
    Dim nLen As String
    Dim i As Integer
    
    strTemp = UCase(strPara) & "="
    nLen = Len(strTemp)
    
    i = 1
    While Not IsNull(Environ(i))
        If UCase(Left(Environ(i), nLen)) = strTemp Then
            getEnv = Mid(Environ(i), nLen + 1)
            Exit Function
        End If
        i = i + 1
        
    Wend
    
    getEnv = ""
End Function


' f|fffd|r BACnet
Function getUnits(ByVal strUnit As String) As Integer
    If InStr(strUnit, " ") > 0 Then
        strUnit = Mid(strUnit, InStr(strUnit, " ") + 1)
    End If
    
    If Val(strUnit) > 0 Then
        getUnits = Val(strUnit)
        Exit Function
    End If
    
    Select Case strUnit
    Case "l/min":
    getUnits = 88
    Case "m|fffd|/h":
        getUnits = 135
    Case "kg/m|fffd|":
        getUnits = 186
    Case "K":
        getUnits = 63
    Case "|fffd|C":
        getUnits = 62
    Case "%":
        getUnits = 98
    Case "bar":
        getUnits = 55
    Case "Hz":
        getUnits = 27
    Case "A":
        getUnits = 3
    Case "V":
        getUnits = 5
    Case "MWh":
        getUnits = 146
    Case "Mvarh":
        getUnits = 13
    Case "kW":
        getUnits = 48
    Case "m3", "m|fffd|":
        getUnits = 80
    Case "kWh":
        getUnits = 19
    Case "t":
        getUnits = 41
    Case "kVA":
        getUnits = 9
    Case "kVAr":
        getUnits = 12
    Case "1/min":
        getUnits = 100
    Case "Pa":
        getUnits = 53
    Case "mV":
        getUnits = 124
    Case "days":
        getUnits = 70
    Case "months":
        getUnits = 68
    Case "years":
        getUnits = 67
    Case "hours", "h":
        getUnits = 71
    Case "minutes", "min":
        getUnits = 72
    Case "seconds", "sec", "s":
        getUnits = 73
    Case "mA":
        getUnits = 2
    Case "rpm":
        getUnits = 104
    Case "power-factor":
        getUnits = 15
    Case "m|fffd|/min":
        getUnits = 165
    Case "m|fffd|/sec":
        getUnits = 85
    Case "Siemens": ' Leitf|fffd|higkeit
        getUnits = 173
    Case "m/s":
        getUnits = 74
    Case "lux":
        getUnits = 37
    Case Else:
        getUnits = 95
    End Select
End Function

Sub getMaskAndOffset(ByVal strBits As String, ByRef nMask As Integer, ByRef nShift As Integer)
    Dim arTemp As Variant
    Dim i As Integer
    
    arTemp = Split(strBits, "-")
    nShift = 2 ^ arTemp(0)
    
    nMask = 0
    For i = arTemp(0) To arTemp(1)
        nMask = nMask Or (2 ^ i)
    Next
End Sub

Public Function toLong(ByVal strVal As Variant) As Long
    Dim lTemp As Long
    If Left(strVal, 2) = "0x" Then
        lTemp = Val("&h" & Mid(strVal, 3))
        If lTemp < 0 Then lTemp = lTemp + 65536
        toLong = lTemp
    Else
        toLong = 0
    End If
End Function
Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
