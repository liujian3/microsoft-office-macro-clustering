Attribute VB_Name = "LogoPlacement"
'*******************************************************************************
' Copyright (c) 2008-2010 Jacobs, All rights reserved.
'*******************************************************************************
'
' This module is used to generate and format the document from EDB data.
' The code in this module should only be used in such circumstances.
'
' Version log:
' 2008-02-05 - BOERB, Created
' 2009-06-03 - BOERB, Limitation set to process visible sheets only
'

'Option explicit on
Option Explicit

'Constants
Private Const left_logo As String = "left_logo"
Private Const right_logo As String = "right_logo"

Private Const left_logo_none As String = "EDB_blank_left_logo.bmp"
Private Const right_logo_none As String = "EDB_blank_right_logo.bmp"

Private Const left_logo_error As String = "EDB_left_logo_is_incorrect.bmp"
Private Const right_logo_error As String = "EDB_right_logo_is_incorrect.bmp"

Private Const img_extension As String = "_img"
Private Const group_extension As String = "_group"

Private mPath As String

'
' Gets the path for the resources to be used
'
Private Property Get Path() As String
    
    'Return the result
    Path = mPath
    
End Property

'
' Sets the path for the resources to be used
'
Public Property Let Path(vNewValue As String)

    'Return the result
    mPath = vNewValue

End Property

'
' Updates the left image with the specified image
'
Public Sub UpdateLeftImage(pImageFile As String)

    'Goto the error handling in case some error occurs
    On Error GoTo error_handling

    'Ungroup any possible left images
    UnGroup left_logo

    'Remove the possible existing left image
    RemoveImageAt left_logo
    
    'Test whether the logo does not exist
    If (pImageFile <> "") And (Dir(pImageFile) = "") Then
        
        'Test whether a working path is not initialized
        If (Path = "") Then
        
            'Use the path from the image specification
            Path = RemoveTrailing(pImageFile, "\") & "\"
            
        End If
        
        'Insert the error image
        InsertImageAt Path & left_logo_error, left_logo
        
    ElseIf (pImageFile <> "") Then
    
        'Insert the supplied image
        InsertImageAt pImageFile, left_logo
        
    End If
    
    'Exit the procedure
    Exit Sub
    
error_handling:
    
End Sub

'
' Updates the right image with the specified image
'
Public Sub UpdateRightImage(pImageFile As String)

    'Goto the error handling in case some error occurs
    On Error GoTo error_handling

    'Ungroup any possible right images
    UnGroup right_logo

    'Remove the possible existing left image
    RemoveImageAt right_logo
    
    'Test whether the logo does not exist
    If (pImageFile <> "") And (Dir(pImageFile) = "") Then
        
        'Test whether a working path is not initialized
        If (Path = "") Then
        
            'Use the path from the image specification
            Path = RemoveTrailing(pImageFile, "\") & "\"
            
        End If
        
        'Insert the error image
        InsertImageAt Path & right_logo_error, right_logo
        
    ElseIf (pImageFile <> "") Then
    
        'Insert the supplied image
        InsertImageAt pImageFile, right_logo
        
    End If

    'Exit the procedure
    Exit Sub
    
error_handling:

'2012-MAR-26
'MsgBox Err.Description

End Sub

'
' Updates the document styles with the styles in the specified file
'
' pFile is the name of the style file
'
Public Sub UpdateLayout(pFile As String)

    'Goto the error handling in case some error occurs
    On Error GoTo error_handling

    'No logic yet.
    
    'Exit the procedure
    Exit Sub
    
error_handling:
    
End Sub

'
' Removes a possibly placed image at the specified placeholder at every sheet
'
' Inserted images will be named after the placeholder + '_img'.
'
' pName is the name of the placeholder
'
Public Sub RemoveImageAt(pName As String)

    Dim vSheet As Worksheet
    Dim vOldShape As Shape
    Dim vActiveSheet As Worksheet
    
    'Get the active sheet
    Set vActiveSheet = ActiveSheet
    
    'Do for each sheet
    For Each vSheet In Sheets
    
        'Test whether this sheet is visible
        If vSheet.Visible = xlSheetVisible Then
        
            'Make active
            vSheet.Select
        
            On Error Resume Next
        
            'Reset the variable
            Set vOldShape = Nothing
        
            'Try to get the client logo shape by name
            Set vOldShape = vSheet.Shapes(pName & img_extension)
        
            On Error GoTo 0
        
            'Test whether the client logo shape is found
            If Not vOldShape Is Nothing Then
                                    
                'Remove the old shape
                vOldShape.Delete
                    
                'Reset the variable
                Set vOldShape = Nothing
            
                'Try to get the client logo shape by name
                Set vOldShape = vSheet.Shapes(pName)
            
                On Error GoTo 0
            
                'Test whether the client logo shape is found
                If Not vOldShape Is Nothing Then
                                        
                    'Set the placement
                    vOldShape.Placement = xlMove
                    
                End If
                
            End If
                
        End If
                
    Next
    
    'Set the original sheet active
    vActiveSheet.Select

End Sub

'
' Inserts the image at the specified placeholder at every sheet
'
' The image inserted will be named after the placeholder + '_img'.
'
' pFile is the fully qualified name (path + filename) of the image to insert.
' pName is the name of the placeholder.
'
Public Sub InsertImageAt(pFile As String, pName As String)
    
    Dim vSheet As Worksheet
    Dim vOldShape As Shape
    Dim vNewShape As Picture
    Dim vActiveSheet As Worksheet

    Dim vLeft As Single
    Dim vTop As Single
    Dim vWidth As Single
    Dim vHeight As Single
    
    'Get the active sheet
    Set vActiveSheet = ActiveSheet
    
    'Do for each sheet
    For Each vSheet In Sheets
    
        'Test whether this sheet is visible
        If vSheet.Visible = xlSheetVisible Then
        
            'Make active
            vSheet.Select
        
            On Error Resume Next
        
            'Reset the variable
            Set vOldShape = Nothing
        
            'Try to get the client logo shape by name
            Set vOldShape = vSheet.Shapes(pName)
        
            On Error GoTo 0
        
            'Test whether the client logo shape is found
            If Not vOldShape Is Nothing Then
        
                'Get the logo shape properties
                vLeft = vOldShape.Left
                vTop = vOldShape.Top
                vWidth = vOldShape.Width
                vHeight = vOldShape.Height
        
                On Error Resume Next
            
                'Reset the variable
                Set vNewShape = Nothing
            
                'Insert the new logo
                Set vNewShape = vSheet.Pictures.Insert(pFile)
        
                On Error GoTo 0
            
                'Test whether the new logo is available
                If Not vNewShape Is Nothing Then
            
                    'Test whether the new logo width is more the logo width
                    If (vNewShape.Width / vWidth) > (vNewShape.Height / vHeight) Then
                
                        'Adjust size and position
                        vNewShape.Height = vNewShape.Height * (vWidth / vNewShape.Width)
                        vNewShape.Width = vWidth
                        vNewShape.Left = vLeft
                        vNewShape.Top = vTop '+ ((vHeight - vNewShape.Height) / 2) 'Do (not) center vertically
                    
                    Else

                        'Adjust size and position
                        vNewShape.Width = vNewShape.Width * (vHeight / vNewShape.Height)
                        vNewShape.Height = vHeight
                        vNewShape.Top = vTop
                        vNewShape.Left = vLeft '+ ((vWidth - vNewShape.Width) / 2) 'Do (not) center horizontally

                    End If
                                            
                    'Set the proper name
                    vNewShape.Name = pName & img_extension
                             
                    'Make a group of these items
                    MakeGroup vOldShape, vNewShape
                
                End If
                
            End If
            
        End If
        
    Next
    
    'Set the original sheet active
    vActiveSheet.Select
    
End Sub


'
' Groups a possibly placed group at the specified placeholder
'
' groups will be named after the placeholder + '_group'.
'
' pShape1 is the physical placeholder
' pShape2 is the logo
'
Private Sub MakeGroup(pShape1 As Shape, pShape2 As Picture)

    'Dim vSheet As Worksheet
    
    'Get the worksheet
    'Set vSheet = pShape1.Parent

    'Select the two items
    ActiveSheet.Shapes.Range(Array(pShape1.Name, pShape2.Name)).Select
    
    'Create a group
    Selection.ShapeRange.Group.Select
    
    'Test whether a group is selected
    If Selection.ShapeRange.Count = 1 Then
    
        'Set the name of the group
        Selection.ShapeRange.Name = pShape1.Name & group_extension
       
        Dim vGroup As Shape
        
        'Get the new group
        Set vGroup = Selection.ShapeRange(1)
    
        'Set the placement
        vGroup.Placement = xlMove
    
        'Select the first cell
        Range("A1").Select
    
    End If

End Sub


'
' Ungroups a possibly placed group at the specified placeholder at every sheet
'
' groups will be named after the placeholder + '_group'.
'
' pName is the name of the placeholder
'
Private Sub UnGroup(pName As String)

    Dim vSheet As Worksheet
    Dim vOldShape As Shape
    
    'Do for each sheet
    For Each vSheet In Sheets
    
        On Error Resume Next
        
        'Reset the variable
        Set vOldShape = Nothing
        
        'Try to get the client logo shape by name
        Set vOldShape = vSheet.Shapes(pName & group_extension)
        
        On Error GoTo 0
        
        'Test whether the client logo shape is found
        If Not vOldShape Is Nothing Then
                                    
            'Ungroup
            vOldShape.UnGroup

        End If
        
    Next

End Sub



'
' Aligns a possibly placed group at the specified placeholder at every sheet
'
' groups will be named after the placeholder + '_group'.
'
' pRightPos is the right position of the placeholder
'
Public Sub RightAlignRightImageTo(pRightPos As Single)

    Dim vSheet As Worksheet
    Dim vOldShape As Shape
    
    'Do for each sheet
    For Each vSheet In Sheets
    
        On Error Resume Next
        
        'Reset the variable
        Set vOldShape = Nothing
        
        'Try to get the client logo shape by name
        Set vOldShape = vSheet.Shapes(right_logo & group_extension)
        
        On Error GoTo 0
        
        'Test whether the client logo shape group is found
        If Not vOldShape Is Nothing Then
            
            'Align right
            vOldShape.Left = pRightPos - vOldShape.Width
            
        Else
                                
            On Error Resume Next
            
            'Reset the variable
            Set vOldShape = Nothing
            
            'Try to get the client logo shape by name
            Set vOldShape = vSheet.Shapes(right_logo)
            
            On Error GoTo 0
            
            'Test whether the client logo place holder is found
            If Not vOldShape Is Nothing Then
                
                'Align right
                vOldShape.Left = pRightPos - vOldShape.Width
                
            End If
                        
        End If
        
    Next

End Sub

'
' Removes portions of a string to the right of a specified pattern (including the pattern).
'
'
' pString is the string to strip.
' pChar is the pattern to use.
'
' RemoveTrailing("abcdefghijk", "g") results in "abcdef"
'
Private Function RemoveTrailing(pString As String, pChar As String) As String

    Dim vStep As Integer
    Dim vLength As Integer
    Dim vCount As Integer
    
    'Get the lengths
    vLength = Len(pString)
    vStep = Len(pChar)
    
    'Test whether the pattern length exceeds the string length
    If vStep > vLength Then
    
        'Set the result
        RemoveTrailing = pString
        
        'Quit the procedure
        Exit Function
    End If
    
    'Set the counter to the length
    vCount = vLength
    
    Dim i As Integer
    
    'Move to the front of the string
    For i = vCount To 1 Step -1
    
        Dim a As String
        a = Mid(pString, 1, i)
        
        Dim b As String
        b = Right(a, vStep)
        
        'Test whether this is the string to look for
        If Right(Mid(pString, 1, i), vStep) = pChar Then
        
            'Set the result
            RemoveTrailing = Mid(pString, 1, i - vStep)
            
            'Quit procedure
            Exit Function
            
        End If
    
    Next i
    
    'Set the result
    RemoveTrailing = pString
    
    'Quit procedure
    Exit Function
    
End Function


Attribute VB_Name = "RangeNames"
Sub RangeRename()
Dim N As Name

    For Each N In ActiveWorkbook.Names
        N.Name = N.Name & "_New" ' or any other transformation
    Next N
End Sub


Sub Global_Local_names()
    Dim oNm As Name
    For Each oNm In Names
        If TypeOf oNm.Parent Is Worksheet Then
            Debug.Print oNm.Name & " is local to " & oNm.Parent.Name
        Else
            Debug.Print oNm.Name & " is global to " & oNm.Parent.Name
        End If
    Next
End Sub


Public Sub ChangeScope()
Dim theName As Name
Dim refersTo As String
Dim namesName As String
Dim theWorksheet As Worksheet
For Each theWorksheet In ThisWorkbook.Worksheets
For Each theName In theWorksheet.Names
namesName = theName.Name
If InStr(namesName, "!") > 0 Then
namesName = Mid(namesName, InStr(namesName, "!") + 1)
End If
refersTo = theName.refersTo
theName.Delete
ThisWorkbook.Names.Add namesName, refersTo
Next
Next
End Sub



   
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True





INQUEST-PP=macro
