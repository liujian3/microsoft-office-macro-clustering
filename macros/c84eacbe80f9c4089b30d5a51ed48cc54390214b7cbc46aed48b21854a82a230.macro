Attribute VB_Name = "Module1"
Option Explicit
Const epsilon As Double = 0.0001
Const maxTry As Long = 10
Function CheckWorksheetExistence(sheetName As String) As Boolean
    
    Dim WorksheetExists As Boolean
    WorksheetExists = False
    Dim Sht As Worksheet
    For Each Sht In ThisWorkbook.Worksheets
        If (Sht.Name = sheetName) Then
            WorksheetExists = True
        End If
    Next Sht
    
    CheckWorksheetExistence = WorksheetExists
End Function
Private Function EuclidianDistance(Lat1 As Double, Long1 As Double, Lat2 As Double, Long2 As Double) As Double
    EuclidianDistance = Sqr((Lat1 - Lat2) ^ 2 + (Long1 - Long2) ^ 2)
End Function
Private Function RectilinearDistance(Lat1 As Double, Long1 As Double, Lat2 As Double, Long2 As Double) As Double
    RectilinearDistance = Abs(Lat1 - Lat2) + Abs(Long1 - Long2)
End Function
Private Function GeosedicDistanceApproximation(Lat1 As Double, Long1 As Double, Lat2 As Double, Long2 As Double) As Double

    'from http://www.cpearson.com/excel/LatLong.aspx
    
    Const C_PI As Double = 3.14159265358979
    Const C_RADIUS_EARTH_KM As Double = 6370.97327862
    
    Dim Delta As Double
    
    ' convert to radians: radians = (degrees/180) * PI
    Lat1 = (Lat1 / 180) * C_PI
    Lat2 = (Lat2 / 180) * C_PI
    Long1 = (Long1 / 180) * C_PI
    Long2 = (Long2 / 180) * C_PI
    
    ' get the central spherical angle
    Delta = ((2 * ArcSin(Sqr((Sin((Lat1 - Lat2) / 2) ^ 2) + Cos(Lat1) * Cos(Lat2) * (Sin((Long1 - Long2) / 2) ^ 2)))))
    
    GeosedicDistanceApproximation = Delta * C_RADIUS_EARTH_KM

End Function
Private Function ArcSin(x As Double) As Double
    ' VBA doesn't have an ArcSin function. Improvise.
    ArcSin = Atn(x / Sqr(-x * x + 1))
End Function

Private Sub GeocodeAddressUsingBingMaps(ByVal address As String, ByRef latitude As Double, ByRef longitude As Double, ByVal BingMapsKey As String)
    
    'On Error Resume Next
    
    Dim period_separator_flag As Boolean
    If InStr(CStr(WorksheetFunction.Pi), ".") > 0 Then
        period_separator_flag = True
    Else
        period_separator_flag = False
    End If
    
    latitude = 91
    longitude = 181
    
    Dim oHttpReq As Object
    Set oHttpReq = CreateObject("MSXML2.XMLHTTP")
    
    'ThisWorkbook.Worksheets("1.Locations").Cells(20, 1).Value = "http://dev.virtualearth.net/REST/v1/Locations?q=" & address & "&o=xml&maxResults=1&key=" & BingMapsKey
    
    Dim tryCount As Long
    tryCount = 0
    
    Dim stopFlag As Boolean
    stopFlag = False
    
    Do While stopFlag = False
            
        oHttpReq.Open "GET", "http://dev.virtualearth.net/REST/v1/Locations?q=" & address & "&o=xml&key=" & BingMapsKey, "false"

        oHttpReq.send
    
        Do While (oHttpReq.readystate <> 4) And (tryCount < maxTry)
            'MsgBox "Bad state..."
            Application.Wait (Now() + CDate("00:00:01"))
            tryCount = tryCount + 1
        Loop
        
        If oHttpReq.readystate = 4 Then
             
            'MsgBox CStr(oHttpReq.responseXML.Text)
            
            'ThisWorkbook.Worksheets("1.Locations").Cells(1, 15).Value = CStr(oHttpReq.responseXML.Text)
            
            If InStr(CStr(oHttpReq.responseXML.Text), "UnauthorizedCredentialsExpiredAccess") > 0 Then
                tryCount = 10
                latitude = 92
                longitude = 182
            ElseIf InStr(CStr(oHttpReq.responseXML.Text), "Display") > 0 Or InStr(CStr(oHttpReq.responseXML.Text), "Route") > 0 Then
                'MsgBox "Result received... " & address
                
                If period_separator_flag = False Then
                    latitude = CDbl(Replace(oHttpReq.responseXML.SelectSingleNode("//Point/Latitude").Text, ".", ","))
                    longitude = CDbl(Replace(oHttpReq.responseXML.SelectSingleNode("//Point/Longitude").Text, ".", ","))
                Else
                    latitude = CDbl(Replace(oHttpReq.responseXML.SelectSingleNode("//Point/Latitude").Text, ",", "."))
                    longitude = CDbl(Replace(oHttpReq.responseXML.SelectSingleNode("//Point/Longitude").Text, ",", "."))
                End If
                
                stopFlag = True
            Else
                ' MsgBox "No result received " & address
                tryCount = tryCount + 1
                Application.Wait (Now() + CDate("00:00:01"))
            End If
            
         End If
         
         If tryCount >= maxTry Then
            stopFlag = True
         End If
    Loop
    
    Set oHttpReq = Nothing
    
End Sub
Sub SetupConsoleWorksheet()

    'add MSXML2 reference
'    Dim x As Object
'    Dim y As String
'    Dim n As Long
'    n = Application.VBE.ActiveVBProject.References.Count
'
'    Do While Application.VBE.ActiveVBProject.References.Count > 0 And n > 0
'        On Error Resume Next
'        Set x = Application.VBE.ActiveVBProject.References.Item(n)
'        y = x.Name
'        If y = "MSXML2" Then
'            Application.VBE.ActiveVBProject.References.Remove x
'        End If
'        n = n - 1
'    Loop
'
'    Application.VBE.ActiveVBProject.References.AddFromGuid "{F5078F18-C551-11D3-89B9-0000F81FE221}", 6, 0

    Dim WorksheetExists As Boolean
    WorksheetExists = CheckWorksheetExistence("VRP Solver Console")
    
    Dim reply As Integer
    If WorksheetExists = False Then
        ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count)).Name = "VRP Solver Console"
    End If
    
    ThisWorkbook.Worksheets("VRP Solver Console").Activate
    
    'Problem parameters
    
    Cells(1, 1).Value = "Sequence"
    Cells(1, 1).Select
    Selection.Font.Bold = True
    
    Cells(1, 2).Value = "Parameter"
    Cells(1, 3).Value = "Value"
    Cells(1, 4).Value = "Remarks"
    
    Range(Cells(1, 1), Cells(1, 4)).Select
    Selection.Interior.ColorIndex = 1
    Selection.Font.ColorIndex = 2
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    'GIS License
    
    Cells(2, 1).Value = "0.Optional - GIS License"
    Cells(2, 1).Select
    Selection.Font.Bold = True
    
    Cells(2, 2).Value = "Bing Maps Key"
    Cells(2, 3).Font.ColorIndex = 2
    Cells(2, 3).Interior.ColorIndex = 10
    Cells(2, 4).Value = "You can get a free key at https://www.bingmapsportal.com/"
        
    Range(Cells(2, 1), Cells(2, 4)).Select
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    Cells(4, 1).Value = "1.Locations"
    Cells(4, 1).Select
    Selection.Font.Bold = True
    
    Cells(4, 2).Value = "Number of customers"
    
    Cells(4, 3).Validation.Delete
    With Cells(4, 3).Validation
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="10", Formula2:="500"
        .ErrorMessage = "Please enter an integer from 10 to 200"
    End With
    
    If Cells(4, 3).Value = "" Then
        Cells(4, 3).Value = 10
    End If
    
    Cells(4, 3).Font.ColorIndex = 2
    Cells(4, 3).Interior.ColorIndex = 10
    Cells(4, 4).Value = "[10,200]"
    
    Cells(5, 2).Value = "Pickup / Delivery?"
    
    Cells(5, 3).Validation.Delete
    With Cells(5, 3).Validation
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Pickup, Delivery"
        .IgnoreBlank = True
        .InCellDropdown = True
    End With
    
    Cells(5, 3).Value = "Pickup"
    Cells(5, 3).Font.ColorIndex = 2
    Cells(5, 3).Interior.ColorIndex = 10
    
    Range(Cells(4, 1), Cells(5, 4)).Select
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    Cells(7, 1).Value = "2.Distances"
    Cells(7, 1).Select
    Selection.Font.Bold = True
    
    Cells(7, 2).Value = "Distance / duration computation"
    Cells(7, 3).Validation.Delete
    With Cells(7, 3).Validation
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Manual entry, Euclidian distances, Rounded Euclidian distances, Geodesic approximation, Rectilinear (Manhattan) distances, Bing Maps"
        .IgnoreBlank = True
        .InCellDropdown = True
    End With
    
    Cells(7, 3).Value = "Bing Maps"
    Cells(7, 3).Font.ColorIndex = 2
    Cells(7, 3).Interior.ColorIndex = 10
    Cells(7, 4).Value = "The distance unit is km for 'Geodesic Approximation' and 'Bing Maps'"
    
    Cells(8, 2).Value = "Bing Maps route type"
    
    Cells(8, 3).Validation.Delete
    With Cells(8, 3).Validation
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Shortest, Fastest, Fastest - Real Time Traffic"
        .IgnoreBlank = True
        .InCellDropdown = True
    End With
    
    Cells(8, 3).Value = "Fastest"
    Cells(8, 3).Font.ColorIndex = 2
    Cells(8, 3).Interior.ColorIndex = 10
    Cells(8, 4).Value = "Recommendation: use Fastest"
    
    Cells(9, 2).Value = "Average vehicle speed"
    Cells(9, 3).Value = "70.0"
    Cells(9, 3).Font.ColorIndex = 2
    Cells(9, 3).Interior.ColorIndex = 10
    Cells(9, 4).Value = "Not used for the 'Bing Maps' option"
    
    Range(Cells(7, 1), Cells(9, 4)).Select
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    Cells(11, 1).Value = "3.Vehicles"
    Cells(11, 1).Select
    Selection.Font.Bold = True
    
    Cells(11, 2).Value = "Number of vehicle types"
        
    Cells(11, 3).Validation.Delete
    With Cells(11, 3).Validation
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="1", Formula2:="50"
        .ErrorMessage = "Please enter an integer from 1 to 50"
    End With
    
    If Cells(11, 3).Value = "" Then
        Cells(11, 3).Value = 1
    End If
    
    Cells(11, 3).Font.ColorIndex = 2
    Cells(11, 3).Interior.ColorIndex = 10
    Cells(11, 4).Value = "Heterogeneous VRP if greater than 1"
    
    Range(Cells(11, 1), Cells(11, 4)).Select
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    Cells(13, 1).Value = "4.Solution"
    Cells(13, 1).Select
    Selection.Font.Bold = True
        
    Cells(13, 2).Value = "All vehicles must be used?"
    
    Cells(13, 3).Validation.Delete
    With Cells(13, 3).Validation
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Yes, No"
        .IgnoreBlank = True
        .InCellDropdown = True
    End With
    
    Cells(13, 3).Value = "No"
    Cells(13, 3).Font.ColorIndex = 2
    Cells(13, 3).Interior.ColorIndex = 10
    Cells(13, 4).Value = "Flexible fleet / fleet mix if 'No'"
        
    Cells(14, 2).Value = "Vehicles must return to the depot?"
    
    With Cells(14, 3).Validation
        .Delete
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Yes, No"
        .IgnoreBlank = True
        .InCellDropdown = True
    End With
    
    Cells(14, 3).Value = "Yes"
    Cells(14, 3).Font.ColorIndex = 2
    Cells(14, 3).Interior.ColorIndex = 10
    
    Cells(14, 4).Value = "Open VRP if no return"
    
    Cells(15, 2).Value = "Time window type"
    
    Cells(15, 3).Validation.Delete
    With Cells(15, 3).Validation
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Hard, Soft"
        .IgnoreBlank = True
        .InCellDropdown = True
    End With
    
    Cells(15, 3).Value = "Hard"
    Cells(15, 3).Font.ColorIndex = 2
    Cells(15, 3).Interior.ColorIndex = 10
    
    Cells(16, 2).Value = "Work start time"
    Cells(16, 3).NumberFormat = "hh:mm"
    Cells(16, 3).Value = "08:00"
    Cells(16, 3).Font.ColorIndex = 2
    Cells(16, 3).Interior.ColorIndex = 10
    Cells(16, 4).Value = "[00:00,23:59]"
    
    Cells(17, 2).Value = "Driving time limit"
    Cells(17, 3).NumberFormat = "[h]:mm"
    Cells(17, 3).Value = "08:00"
    Cells(17, 3).Font.ColorIndex = 2
    Cells(17, 3).Interior.ColorIndex = 10
    
    Cells(18, 2).Value = "Working time limit"
    Cells(18, 3).NumberFormat = "[h]:mm"
    Cells(18, 3).Value = "10:00"
    Cells(18, 3).Font.ColorIndex = 2
    Cells(18, 3).Interior.ColorIndex = 10
    
    Cells(19, 2).Value = "Distance limit"
    Cells(19, 3).Value = 560
    Cells(19, 3).Font.ColorIndex = 2
    Cells(19, 3).Interior.ColorIndex = 10
    
    Cells(19, 3).Validation.Delete
    With Cells(19, 3).Validation
        .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:="0"
        .ErrorMessage = "Please enter a positive value"
    End With
    
    Cells(19, 4).Value = "Positive"
    
    Range(Cells(13, 1), Cells(19, 4)).Select
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    'Visualization parameters
    
    Cells(21, 1).Value = "5.Optional - Visualization"
    Cells(21, 1).Select
    Selection.Font.Bold = True
    
    Cells(21, 2).Value = "Visualization background"
    
    Cells(21, 3).Validation.Delete
    With Cells(21, 3).Validation
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Blank, Bing Maps"
        .IgnoreBlank = True
        .InCellDropdown = True
    End With
    Cells(21, 3).Value = "Bing Maps"
    Cells(21, 3).Font.ColorIndex = 2
    Cells(21, 3).Interior.ColorIndex = 10

    Cells(22, 2).Value = "Location labels"
        
    Cells(22, 3).Validation.Delete
    With Cells(22, 3).Validation
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Blank, Location IDs, Location names"
        .IgnoreBlank = True
        .InCellDropdown = True
    End With
    Cells(22, 3).Value = "Location IDs"
    Cells(22, 3).Font.ColorIndex = 2
    Cells(22, 3).Interior.ColorIndex = 10
    
    Range(Cells(21, 1), Cells(22, 4)).Select
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    'Algorithmic parameters
    
    Cells(24, 1).Value = "6.Solver"
    Cells(24, 1).Select
    Selection.Font.Bold = True
    
    Cells(24, 2).Value = "Warm start?"
    
    Cells(24, 3).Validation.Delete
    With Cells(24, 3).Validation
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Yes, No"
        .IgnoreBlank = True
        .InCellDropdown = True
    End With
    Cells(24, 3).Value = "Yes"
    Cells(24, 3).Font.ColorIndex = 2
    Cells(24, 3).Interior.ColorIndex = 10
    
    Cells(25, 2).Value = "CPU time limit (seconds)"
    
    Cells(25, 3).Validation.Delete
    With Cells(25, 3).Validation
        .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreaterEqual, Formula1:="10"
        .ErrorMessage = "Please enter a value greater than or equal to 10 seconds."
    End With
    
    If Cells(25, 3).Value = "" Then
        Cells(25, 3).Value = 600
    End If
    Cells(25, 3).Font.ColorIndex = 2
    Cells(25, 3).Interior.ColorIndex = 10
    
    Cells(25, 4).Formula = "=CONCATENATE(" & Chr(34) & "Recommendation: At least " & Chr(34) & ", 60 * CEILING(C4 * C4 * C4 / 100000, 1)," & Chr(34) & " seconds." & Chr(34) & ")"
    
    Cells(26, 2).Value = "LNS minimum removal rate"
    Cells(26, 3).Value = 0.1
    Cells(26, 3).Font.ColorIndex = 2
    Cells(26, 3).Interior.ColorIndex = 10

    Cells(26, 3).Validation.Delete
    With Cells(26, 3).Validation
        .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="0.05", Formula2:="0.5"
        .ErrorMessage = "Please enter a value between 5% and 50%"
    End With

    Cells(26, 3).NumberFormat = "0%"
    Cells(26, 4).Value = "[5%, 50%]"
        
    Cells(27, 2).Value = "LNS maximum removal rate"
    Cells(27, 3).Value = 0.4
    Cells(27, 3).Font.ColorIndex = 2
    Cells(27, 3).Interior.ColorIndex = 10

    Cells(27, 3).Validation.Delete
    With Cells(27, 3).Validation
        .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="0.05", Formula2:="0.5"
        .ErrorMessage = "Please enter a value between 5% and 50%"
    End With

    Cells(27, 3).NumberFormat = "0%"
    Cells(27, 4).Value = "[5%, 50%]"
    
    Cells(28, 2).Value = "LNS candidate list size"
    Cells(28, 3).Value = 2
    Cells(28, 3).Font.ColorIndex = 2
    Cells(28, 3).Interior.ColorIndex = 10

    Cells(28, 3).Validation.Delete
    With Cells(28, 3).Validation
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="1", Formula2:="5"
        .ErrorMessage = "Please enter an integer from 1 to 5"
    End With
    
    Cells(28, 4).Value = "[1, 5]"
    
    Cells(29, 2).Value = "Random number seed"
    Cells(29, 3).Value = 123456789
    Cells(29, 3).Font.ColorIndex = 2
    Cells(29, 3).Interior.ColorIndex = 10
    
    Cells(29, 3).Validation.Delete
    With Cells(29, 3).Validation
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="1", Formula2:="2147483647"
        .ErrorMessage = "Please enter an integer between 1 and 2147483647"
    End With
    
    Cells(29, 4).Value = "[1,2147483647]"
            
    Range(Cells(24, 1), Cells(29, 4)).Select
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    Columns("A").AutoFit
    Columns("B").AutoFit
    Columns("D").AutoFit
    
    Columns("C").EntireColumn.ColumnWidth = 23
     
    Rows("1").Select
    Selection.Font.Bold = True
    Cells(1, 1).Select
End Sub
Sub SetupLocationsWorksheet()
   
    Dim WorksheetExists As Boolean
    WorksheetExists = CheckWorksheetExistence("1.Locations")
    
    Dim reply As Integer
    If WorksheetExists = True Then
        reply = MsgBox("This will overwrite existing location data, and erase distance and solution data. Do you want to continue?", vbYesNo, "VRP Solver")
        If reply = vbNo Then
            Exit Sub
        Else
            Application.DisplayAlerts = False
            
            ThisWorkbook.Worksheets("1.Locations").Delete
            ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count)).Name = "1.Locations"
            
            WorksheetExists = CheckWorksheetExistence("2.Distances")
            If WorksheetExists = True Then
                ThisWorkbook.Worksheets("2.Distances").Delete
            End If
            
            WorksheetExists = CheckWorksheetExistence("4.Solution")
            If WorksheetExists = True Then
                ThisWorkbook.Worksheets("4.Solution").Delete
            End If
            
            WorksheetExists = CheckWorksheetExistence("5.Visualization")
            If WorksheetExists = True Then
                ThisWorkbook.Worksheets("5.Visualization").Delete
            End If
            
            Application.DisplayAlerts = True
        End If
    Else
        ThisWorkbook.Worksheets.Add(After:=Worksheets(Worksheets.Count)).Name = "1.Locations"
    End If
    
    ThisWorkbook.Worksheets("1.Locations").Activate
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    Dim num_customers As Long
    num_customers = ThisWorkbook.Worksheets("VRP Solver Console").Cells(4, 3).Value
    Dim formulaText As String
    
    Cells(1, 1).Value = "Location ID"
    Cells(1, 2).Value = "Name"
    Cells(1, 3).Value = "Address"
    Cells(1, 4).Value = "Latitude (y)"
    Cells(1, 5).Value = "Longitude (x)"
    Cells(1, 6).Value = "Time window start"
    Cells(1, 7).Value = "Time window end"
    Cells(1, 8).Value = "Must be visited?"
    Cells(1, 9).Value = "Service time"
    If ThisWorkbook.Worksheets("VRP Solver Console").Cells(5, 3).Value = "Pickup" Then
        Cells(1, 10).Value = "Supply"
    End If
    If ThisWorkbook.Worksheets("VRP Solver Console").Cells(5, 3).Value = "Delivery" Then
        Cells(1, 10).Value = "Demand"
    End If
    Cells(1, 11).Value = "Profit"
    
    Rows("1").Select
    Selection.Font.Bold = True
    
    Columns("D:E").EntireColumn.ColumnWidth = 11
    
    Dim i As Long
    
    For i = 0 To num_customers
    
        Range(Cells(2 + i, 1), Cells(2 + i, 11)).Select
        Selection.Font.ColorIndex = 2
        Selection.Interior.ColorIndex = 10
        
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .ColorIndex = 16
            .TintAndShade = 0
            .Weight = xlThin
        End With
        
        Cells(2 + i, 1).Value = i
        Cells(2 + i, 1).Font.ColorIndex = 2
        Cells(2 + i, 1).Interior.ColorIndex = 1
        
        Cells(2 + i, 1).FormatConditions.Add Type:=xlExpression, Formula1:="=ISBLANK(" & Cells(2 + i, 1).address & ")"
        Cells(2 + i, 1).FormatConditions(1).Interior.ColorIndex = 3
        
        Cells(2 + i, 2).Value = "Customer " & i
        
        Cells(2 + i, 2).FormatConditions.Add Type:=xlExpression, Formula1:="=ISBLANK(" & Cells(2 + i, 2).address & ")"
        Cells(2 + i, 2).FormatConditions(1).Interior.ColorIndex = 3
        
        Cells(2 + i, 4).NumberFormat = "0.0000000"
        'formulaText = "=NOT(OR(ISBLANK(" & Cells(2 + i, 4).address & "),ISNUMBER(" & Cells(2 + i, 4).address & ")))"
        'Cells(2 + i, 4).FormatConditions.Add Type:=xlExpression, Formula1:="=NOT(OR(ISBLANK(" & Cells(2 + i, 4).address & "),ISNUMBER(" & Cells(2 + i, 4).address & ")))"
        'Cells(2 + i, 4).FormatConditions(1).Interior.ColorIndex = 3
        
        Cells(2 + i, 5).NumberFormat = "0.0000000"
        'formulaText = "=NOT(OR(ISBLANK(" & Cells(2 + i, 5).address & "),ISNUMBER(" & Cells(2 + i, 5).address & ")))"
        'Cells(2 + i, 5).FormatConditions.Add Type:=xlExpression, Formula1:="=NOT(OR(ISBLANK(" & Cells(2 + i, 5).address & "),ISNUMBER(" & Cells(2 + i, 5).address & ")))"
        'Cells(2 + i, 5).FormatConditions(1).Interior.ColorIndex = 3
        
        Cells(2 + i, 6).NumberFormat = "hh:mm"
        Cells(2 + i, 6).Value = "00:00"
        formulaText = "=" & Cells(2 + i, 7).address & "-" & Cells(2 + i, 9).address
        Cells(2 + i, 6).FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, Formula1:=formulaText
        Cells(2 + i, 6).FormatConditions(1).Interior.ColorIndex = 3
        
        Cells(2 + i, 7).NumberFormat = "hh:mm"
        Cells(2 + i, 7).Value = "23:59"
        formulaText = "=" & Cells(2 + i, 6).address & "+" & Cells(2 + i, 9).address
        Cells(2 + i, 7).FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, Formula1:=formulaText
        Cells(2 + i, 7).FormatConditions(1).Interior.ColorIndex = 3
        
        If i > 0 Then
            With Cells(2 + i, 8).Validation
                .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Must be visited, May be visited, Don't visit"
                .IgnoreBlank = True
                .InCellDropdown = True
            End With
            Cells(2 + i, 8).Value = "Must be visited"
            
            Cells(2 + i, 8).FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="May be visited"
            Cells(2 + i, 8).FormatConditions(1).Interior.ColorIndex = 4
            
            Cells(2 + i, 8).FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="Don't visit"
            Cells(2 + i, 8).FormatConditions(2).Interior.ColorIndex = 43
        Else
            Cells(2 + i, 8).Value = "Starting location"
        End If
        
        Cells(2 + i, 9).NumberFormat = "[h]:mm"
        Cells(2 + i, 9).Value = "00:00"
        
        formulaText = "=" & Cells(2 + i, 7).address & "-" & Cells(2 + i, 6).address & " + " & epsilon
        Dim period_separator_flag As Boolean
        If InStr(CStr(WorksheetFunction.Pi), ".") <= 0 Then
            formulaText = Replace(formulaText, ".", ",")
        End If

        Cells(2 + i, 9).FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, Formula1:=formulaText
        Cells(2 + i, 9).FormatConditions(1).Interior.ColorIndex = 3
        
        Cells(2 + i, 10).Value = 0
        
        With Cells(2 + i, 10).Validation
            .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:=-epsilon
            .ErrorMessage = "Please enter a nonnegative value"
        End With
                
        Cells(2 + i, 11).Value = 0
    Next i
    
    Cells(2, 2).Value = "Depot"
    
    ' Display all duplicate values in red
    Dim uv As UniqueValues
    Set uv = Range(Cells(2, 2), Cells(2 + num_customers, 2)).FormatConditions.AddUniqueValues
    uv.DupeUnique = xlDuplicate
    uv.Interior.ColorIndex = 3
    uv.StopIfTrue = False
    
    Range(Cells(2, 8), Cells(2, 11)).Font.ColorIndex = 2
    Range(Cells(2, 8), Cells(2, 11)).Interior.ColorIndex = 1
    
    Columns("A").AutoFit
    Columns("B").AutoFit
    Columns("C").AutoFit
    Columns("F").AutoFit
    Columns("G").AutoFit
    Columns("H").AutoFit
    Columns("I").AutoFit
    Columns("J").AutoFit
    Columns("K").AutoFit
    Columns("L").AutoFit
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    
    Cells(1, 1).Select
End Sub
Sub SetupDistancesWorksheet()

    Dim WorksheetExists As Boolean
    WorksheetExists = CheckWorksheetExistence("1.Locations")
    If WorksheetExists = False Then
        MsgBox "Worksheets 1.Locations must exist for the distance worksheet to be created."
        Exit Sub
    End If
    
    Dim num_customers As Long
    num_customers = ThisWorkbook.Worksheets("VRP Solver Console").Cells(4, 3).Value
    
    Dim estimatedTime As Double
    estimatedTime = num_customers * num_customers * 0.002
    
    WorksheetExists = CheckWorksheetExistence("2.Distances")
    Dim reply As Integer
    If WorksheetExists = True Then
        reply = MsgBox("This will overwrite existing distance data, and will take some time (estimated " & estimatedTime & " seconds). Do you want to continue?", vbYesNo, "VRP Solver")
        If reply = vbNo Then
            Exit Sub
        Else
            Application.DisplayAlerts = False
            ThisWorkbook.Worksheets("2.Distances").Delete
            Application.DisplayAlerts = True
            ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count)).Name = "2.Distances"
        End If
    Else
        reply = MsgBox("This will take some time (estimated " & estimatedTime & " seconds). Do you want to continue?", vbYesNo, "VRP Solver")
        If reply = vbNo Then
            Exit Sub
        End If
        ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count)).Name = "2.Distances"
    End If
    
    Dim nameArray() As String
    ReDim nameArray(0 To num_customers)
    
    Dim i As Long
    For i = 0 To num_customers
        nameArray(i) = ThisWorkbook.Worksheets("1.Locations").Cells(2 + i, 2).Value
    Next i
        
    ThisWorkbook.Worksheets("2.Distances").Activate
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    'Headers
    
    Cells(1, 1).Value = "From"
    Cells(1, 2).Value = "To"
    Cells(1, 3).Value = "Distance"
    Cells(1, 4).Value = "Duration"
    Cells(1, 5).Value = "Method:"
    
    Rows("1").Select
    Selection.Font.Bold = True
    
    Dim j As Long
    Dim k As Long
    
    k = 2
    For i = 0 To num_customers
        For j = 0 To num_customers
            'Cells(k, 1).Value = ThisWorkbook.Worksheets("1.Locations").Cells(2 + i, 2).Value
            Cells(k, 1).Value = nameArray(i)
            Cells(k, 1).Interior.ColorIndex = 1
            Cells(k, 1).Font.ColorIndex = 2
            'Cells(k, 2).Value = ThisWorkbook.Worksheets("1.Locations").Cells(2 + j, 2).Value
            Cells(k, 2).Value = nameArray(j)
            Cells(k, 2).Interior.ColorIndex = 1
            Cells(k, 2).Font.ColorIndex = 2
            Cells(k, 3).Value = 0
            Cells(k, 3).NumberFormat = "0.00"
            Cells(k, 4).NumberFormat = "[h]:mm"
            Cells(k, 4).Value = "0:00"
            
            Cells(k, 3).Interior.ColorIndex = 10
            Cells(k, 4).Interior.ColorIndex = 10
            Cells(k, 3).Font.ColorIndex = 2
            Cells(k, 4).Font.ColorIndex = 2
            
            Range(Cells(k, 1), Cells(k, 4)).Select
            
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlContinuous
                .ColorIndex = 16
                .TintAndShade = 0
                .Weight = xlThin
            End With
        
            k = k + 1
        Next j
    Next i
    
    Columns("A").AutoFit
    Columns("B").AutoFit
    Columns("C").AutoFit
    Columns("D").AutoFit
    
    Columns("F").EntireColumn.ColumnWidth = 23
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    
    Cells(1, 1).Select
End Sub
Sub SetupVehiclesWorksheet()

    Dim WorksheetExists As Boolean
    WorksheetExists = CheckWorksheetExistence("3.Vehicles")
    
    Dim reply As Integer
    If WorksheetExists = True Then
        reply = MsgBox("This will overwrite existing vehicle data, and erase solution and visualization data. Do you want to continue?", vbYesNo, "VRP Solver")
        If reply = vbNo Then
            Exit Sub
        Else
            Application.DisplayAlerts = False
            
            ThisWorkbook.Worksheets("3.Vehicles").Delete
            ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count)).Name = "3.Vehicles"
            
            WorksheetExists = CheckWorksheetExistence("4.Solution")
            If WorksheetExists = True Then
                ThisWorkbook.Worksheets("4.Solution").Delete
            End If
            
            WorksheetExists = CheckWorksheetExistence("5.Visualization")
            If WorksheetExists = True Then
                ThisWorkbook.Worksheets("5.Visualization").Delete
            End If
            
            Application.DisplayAlerts = True
            
        End If
    Else
        ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count)).Name = "3.Vehicles"
    End If
    
    ThisWorkbook.Worksheets("3.Vehicles").Activate
    
    Dim numVehicleTypes As Long
    numVehicleTypes = ThisWorkbook.Worksheets("VRP Solver Console").Cells(11, 3).Value
    
    Cells.Clear
    
    Cells(1, 1).Value = "Vehicle type ID"
    Cells(1, 2).Value = "Type name"
    Cells(1, 3).Value = "Capacity"
    Cells(1, 4).Value = "Fixed cost per trip"
    Cells(1, 5).Value = "Cost per unit distance"
    Cells(1, 6).Value = "Number available"
    
    Columns("A").AutoFit
    Columns("B").AutoFit
    Columns("C").AutoFit
    Columns("D").AutoFit
    Columns("E").AutoFit
    Columns("F").AutoFit
    
    Rows("1").Select
    Selection.Font.Bold = True
    
    Dim i As Long
    
    For i = 1 To numVehicleTypes
        Cells(1 + i, 1).Value = i
        Cells(1 + i, 2).Value = Chr(64 + i)
        Cells(1 + i, 3).Value = 1
        Cells(1 + i, 4).Value = 0
        Cells(1 + i, 5).Value = 1
        Cells(1 + i, 6).Value = 1
        
        With Cells(1 + i, 3).Validation
            .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:=-epsilon
            .ErrorMessage = "Please enter a nonnegative value"
        End With
        
        With Cells(1 + i, 4).Validation
            .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:=-epsilon
            .ErrorMessage = "Please enter a nonnegative value"
        End With
        
        With Cells(1 + i, 5).Validation
            .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:=-epsilon
            .ErrorMessage = "Please enter a nonnegative value"
        End With
        
        With Cells(1 + i, 6).Validation
            .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:="-1"
            .ErrorMessage = "Please enter a nonnegative integer value"
        End With
        
        Range(Cells(1 + i, 1), Cells(1 + i, 6)).Select
        Selection.Font.ColorIndex = 2
        Selection.Interior.ColorIndex = 10
        
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .ColorIndex = 16
            .TintAndShade = 0
            .Weight = xlThin
        End With
        
        Cells(1 + i, 1).Font.ColorIndex = 2
        Cells(1 + i, 1).Interior.ColorIndex = 1
    Next i
    
    Cells(1, 1).Select
End Sub
Sub SetupSolutionWorksheet()

    Dim WorksheetExists As Boolean
    Dim reply As Integer
    
    WorksheetExists = CheckWorksheetExistence("1.Locations") And CheckWorksheetExistence("2.Distances") And CheckWorksheetExistence("3.Vehicles")
    If WorksheetExists = False Then
        MsgBox "Worksheets 1.Locations, 2.Distances, and 3.Vehicles must exist for the solution worksheet to be created."
        Exit Sub
    End If
    
    Dim i As Long
    Dim fleet_size As Long
    
    fleet_size = 0
    For i = 1 To ThisWorkbook.Worksheets("VRP Solver Console").Cells(11, 3).Value
        fleet_size = fleet_size + ThisWorkbook.Worksheets("3.Vehicles").Cells(1 + i, 6).Value
    Next i
    
    If fleet_size = 0 Then
        MsgBox "There must be at least one available vehicle for the solution worksheet to be created."
        Exit Sub
    End If
    
    Dim num_customers As Long
    num_customers = ThisWorkbook.Worksheets("VRP Solver Console").Cells(4, 3).Value
    
    Dim estimatedTime As Double
    estimatedTime = fleet_size * num_customers * 0.03
    
    WorksheetExists = CheckWorksheetExistence("4.Solution")
    If WorksheetExists = True Then
        WorksheetExists = CheckWorksheetExistence("5.Visualization")
        If WorksheetExists = True Then
            reply = MsgBox("This will take some time (estimated " & estimatedTime & " seconds), overwrite existing solution data, and erase the visualization data. Do you want to continue?", vbYesNo, "VRP Solver")
            If reply = vbNo Then
                ThisWorkbook.Worksheets("4.Solution").Activate
                Exit Sub
            Else
                Application.DisplayAlerts = False
            
                ThisWorkbook.Worksheets("4.Solution").Delete
                ThisWorkbook.Worksheets.Add(After:=Worksheets(Worksheets.Count)).Name = "4.Solution"
                
                ThisWorkbook.Worksheets("5.Visualization").Delete
                
                Application.DisplayAlerts = True
            End If
        Else
            reply = MsgBox("This will take some time (estimated " & estimatedTime & " seconds), and overwrite existing solution data. Do you want to continue?", vbYesNo, "VRP Solver")
            If reply = vbNo Then
                ThisWorkbook.Worksheets("4.Solution").Activate
                Exit Sub
            Else
                Application.DisplayAlerts = False
            
                ThisWorkbook.Worksheets("4.Solution").Delete
                ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count)).Name = "4.Solution"
                
                Application.DisplayAlerts = True
            End If
        End If
    Else
        reply = MsgBox("This will take some time (estimated " & estimatedTime & " seconds). Do you want to continue?", vbYesNo, "VRP Solver")
        If reply = vbNo Then
            Exit Sub
        End If
        ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count)).Name = "4.Solution"
    End If
    
    ThisWorkbook.Worksheets("4.Solution").Activate
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    ActiveSheet.EnableFormatConditionsCalculation = False
    
    Dim numVehicleTypes As Long
    numVehicleTypes = ThisWorkbook.Worksheets("VRP Solver Console").Cells(11, 3).Value
        
    Dim vehicleCount As Long
    Dim formulaText As String
    Dim objectiveFormula As String
    Dim tempValue As Double
    Dim combinedRange As Range
    
    Dim soft_time_windows As Boolean
    If ThisWorkbook.Worksheets("VRP Solver Console").Cells(15, 3).Value = "Hard" Then
        soft_time_windows = False
    Else
        soft_time_windows = True
    End If
    
    Dim period_separator_flag As Boolean
    If InStr(CStr(WorksheetFunction.Pi), ".") > 0 Then
        period_separator_flag = True
    Else
        period_separator_flag = False
    End If
    
    Dim excel_version As Double
    If period_separator_flag = False Then
        excel_version = CDbl(Replace(Application.Version, ".", ","))
    Else
        excel_version = CDbl(Replace(Application.Version, ",", "."))
    End If
    
    objectiveFormula = "="
    Cells(1, 1).Value = "Total net profit:"
    Cells(1, 1).Font.Bold = True
    Cells(1, 2).Font.ColorIndex = 1
    Cells(1, 2).Interior.ColorIndex = 6
        
    Dim j As Long
    Dim k As Long
    
    Dim offset As Long
    offset = 0
    
    For i = 1 To numVehicleTypes

        vehicleCount = ThisWorkbook.Worksheets("3.Vehicles").Cells(1 + i, 6).Value
        
        For j = 1 To vehicleCount
            
            Cells(4, 1 + offset).Value = "Stop count"
            Cells(4, 2 + offset).Value = "Location name"
            Cells(4, 3 + offset).Value = "Location ID"
            Cells(4, 4 + offset).Value = "Latitude (y)"
            Cells(4, 5 + offset).Value = "Longitude (x)"
            Cells(4, 6 + offset).Value = "Distance"
            If ThisWorkbook.Worksheets("VRP Solver Console").Cells(5, 3).Value = "Pickup" Then
                Cells(4, 7 + offset).Value = "Load"
            End If
            If ThisWorkbook.Worksheets("VRP Solver Console").Cells(5, 3).Value = "Delivery" Then
                Cells(4, 7 + offset).Value = "Delivered"
            End If
            Cells(4, 8 + offset).Value = "Profit"
            Cells(4, 9 + offset).Value = "Driving time"
            Cells(4, 10 + offset).Value = "Arrival"
            Cells(4, 11 + offset).Value = "Departure"
            Cells(4, 12 + offset).Value = "Working time"
            
            Range(Cells(6, 10 + offset), Cells(6 + num_customers, 10 + offset)).Select
            
            Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="="" """
            Selection.FormatConditions(1).SetFirstPriority
            Selection.FormatConditions(1).Interior.Pattern = xlNone
            Selection.FormatConditions(1).Interior.ColorIndex = 6
            Selection.FormatConditions(1).StopIfTrue = True
            
            Range(Cells(6, 11 + offset), Cells(6 + num_customers, 11 + offset)).Select
            
            Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="="" """
            Selection.FormatConditions(1).SetFirstPriority
            Selection.FormatConditions(1).Interior.Pattern = xlNone
            Selection.FormatConditions(1).Interior.ColorIndex = 6
            Selection.FormatConditions(1).StopIfTrue = True
            
            For k = 0 To num_customers + 1
                
                Cells(5 + k, 1 + offset).Value = k
                Cells(5 + k, 1 + offset).Font.ColorIndex = 2
                Cells(5 + k, 1 + offset).Interior.ColorIndex = 1
                
                Cells(5 + k, 2 + offset).Font.ColorIndex = 2
                Cells(5 + k, 2 + offset).Interior.ColorIndex = 10
                
                With Cells(5 + k, 2 + offset).Validation
                  .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="='1.Locations'!" & Cells(2, 2).address & ":" & Cells(2 + num_customers, 2).address
                  .IgnoreBlank = True
                  .InCellDropdown = True
                  .ErrorTitle = "Warning"
                  .ErrorMessage = "Please select a value from the list available in the selected cell."
                  .ShowError = True
                End With
                    
                formulaText = "=IFERROR(MATCH(" & "INDIRECT(" & Chr(34) & Cells(5 + k, 2 + offset).address & Chr(34) & ")"
                formulaText = formulaText & ",'1.Locations'!" & Cells(2, 2).address & ":" & Cells(2 + num_customers, 2).address & ", 0) - 1,"
                formulaText = formulaText & Chr(34) & " " & Chr(34) & ")"
                
                Cells(5 + k, 3 + offset).Formula = formulaText
                              
                formulaText = "=IFERROR(IF(ISNUMBER(" & Cells(5 + k, 3 + offset).address & "),"
                formulaText = formulaText & "INDEX('1.Locations'!" & Cells(2, 4).address & ":" & Cells(2 + num_customers, 4).address
                formulaText = formulaText & "," & Cells(5 + k, 3 + offset).address & " + 1)," & "NA()" & "),"
                formulaText = formulaText & "NA()" & ")"
                
                Cells(5 + k, 4 + offset).Formula = formulaText
                
                formulaText = "=IFERROR(IF(ISNUMBER(" & Cells(5 + k, 3 + offset).address & "),"
                formulaText = formulaText & "INDEX('1.Locations'!" & Cells(2, 5).address & ":" & Cells(2 + num_customers, 5).address
                formulaText = formulaText & "," & Cells(5 + k, 3 + offset).address & " + 1)," & "NA()" & "),"
                formulaText = formulaText & "NA()" & ")"
                
                Cells(5 + k, 5 + offset).Formula = formulaText
                                            
                formulaText = "=IFERROR(IF(AND(ISNUMBER(" & Cells(5 + k, 3 + offset).address & ")," & Cells(5 + k, 3 + offset).address & "<=" & num_customers & "),"
                formulaText = formulaText & "INDEX('2.Distances'!" & Cells(2, 3).address & ":" & Cells(2 + ((num_customers + 1) * (num_customers + 1)), 3).address
                formulaText = formulaText & "," & Cells(4 + k, 3 + offset).address & "*" & num_customers + 1 & "+" & Cells(5 + k, 3 + offset).address & "+ 1) +"
                formulaText = formulaText & Cells(4 + k, 6 + offset).address & "," & Chr(34) & " " & Chr(34) & ")," & Chr(34) & " " & Chr(34) & ")"
                
                Cells(5 + k, 6 + offset).Formula = formulaText
                Cells(5 + k, 6 + offset).NumberFormat = "0.00"
                          
                formulaText = "=IFERROR(IF(ISNUMBER(" & Cells(5 + k, 3 + offset).address & "),"
                formulaText = formulaText & "INDEX('1.Locations'!" & Cells(2, 10).address & ":" & Cells(2 + num_customers, 10).address
                formulaText = formulaText & "," & Cells(5 + k, 3 + offset).address & " + 1) +" & Cells(4 + k, 7 + offset).address & ","
                formulaText = formulaText & Chr(34) & " " & Chr(34) & ")," & Chr(34) & " " & Chr(34) & ")"
                
                Cells(5 + k, 7 + offset).Formula = formulaText
                
                formulaText = "=IFERROR(IF(ISNUMBER(" & Cells(5 + k, 3 + offset).address & "),"
                formulaText = formulaText & "INDEX('1.Locations'!" & Cells(2, 11).address & ":" & Cells(2 + num_customers, 11).address
                formulaText = formulaText & "," & Cells(5 + k, 3 + offset).address & " + 1) +" & Cells(4 + k, 8 + offset).address & ","
                formulaText = formulaText & Chr(34) & " " & Chr(34) & ")," & Chr(34) & " " & Chr(34) & ")"
                
                Cells(5 + k, 8 + offset).Formula = formulaText
                
                Cells(5 + k, 9 + offset).NumberFormat = "[h]:mm"
                
                formulaText = "=IFERROR(IF(AND(ISNUMBER(" & Cells(5 + k, 3 + offset).address & ")," & Cells(5 + k, 3 + offset).address & "<=" & num_customers & "),"
                formulaText = formulaText & "INDEX('2.Distances'!" & Cells(2, 4).address & ":" & Cells(2 + ((num_customers + 1) * (num_customers + 1)), 4).address
                formulaText = formulaText & "," & Cells(4 + k, 3 + offset).address & "*" & num_customers + 1 & "+" & Cells(5 + k, 3 + offset).address & "+ 1) +"
                formulaText = formulaText & Cells(4 + k, 9 + offset).address & "," & Chr(34) & " " & Chr(34) & ")," & Chr(34) & " " & Chr(34) & ")"
                
                Cells(5 + k, 9 + offset).Formula = formulaText
                
                Cells(5 + k, 10 + offset).NumberFormat = "hh:mm"
                
                formulaText = "=IFERROR(IF(AND(ISNUMBER(" & Cells(5 + k, 3 + offset).address & ")," & Cells(5 + k, 3 + offset).address & "<=" & num_customers & "),"
                formulaText = formulaText & "INDEX('2.Distances'!" & Cells(2, 4).address & ":" & Cells(2 + ((num_customers + 1) * (num_customers + 1)), 4).address
                formulaText = formulaText & "," & Cells(4 + k, 3 + offset).address & "*" & num_customers + 1 & "+" & Cells(5 + k, 3 + offset).address & "+ 1) +"
                formulaText = formulaText & Cells(4 + k, 11 + offset).address & "," & Chr(34) & " " & Chr(34) & ")," & Chr(34) & " " & Chr(34) & ")"
                
                Cells(5 + k, 10 + offset).Formula = formulaText
                
                formulaText = "=INDEX('1.Locations'!" & Cells(2, 6).address & ":" & Cells(2 + num_customers, 6).address & "," & Cells(5 + k, 3 + offset).address & " + 1)"
                
                If excel_version > 13.9 Then
                    If period_separator_flag = False Then
                        formulaText = Replace(formulaText, ",", ";")
                    End If
                    Cells(5 + k, 10 + offset).FormatConditions.Add(xlCellValue, xlLess, formulaText).Interior.ColorIndex = 45
                End If
                
                Cells(5 + k, 11 + offset).NumberFormat = "hh:mm"
                
                formulaText = "=IFERROR(IF(ISNUMBER(" & Cells(5 + k, 10 + offset).address & "),"
                formulaText = formulaText & "INDEX('1.Locations'!" & Cells(2, 9).address & ":" & Cells(2 + num_customers, 9).address
                formulaText = formulaText & "," & Cells(5 + k, 3 + offset).address & " + 1) + MAX(" & Cells(5 + k, 10 + offset).address & ","
                formulaText = formulaText & "INDEX('1.Locations'!" & Cells(2, 6).address & ":" & Cells(2 + num_customers, 6).address & ","
                formulaText = formulaText & Cells(5 + k, 3 + offset).address & " + 1))" & "," & Chr(34) & " " & Chr(34) & ")," & Chr(34) & " " & Chr(34) & ")"
                
                Cells(5 + k, 11 + offset).Formula = formulaText
                                
                If excel_version > 13.9 Then
                
                    'formulaText = "=INDEX('1.Locations'!" & Cells(2, 7).address & ":" & Cells(2 + num_customers, 7).address & "," & Cells(5 + k, 3 + offset).address & " + 1)"
                    formulaText = "=(60 * HOUR(" & Cells(5 + k, 11 + offset).address & ") + MINUTE(" & Cells(5 + k, 11 + offset).address & ")) >"
                    formulaText = formulaText & "(60 * HOUR(INDEX('1.Locations'!" & Cells(2, 7).address & ":" & Cells(2 + num_customers, 7).address & "," & Cells(5 + k, 3 + offset).address & " + 1)) +"
                    formulaText = formulaText & "MINUTE(INDEX('1.Locations'!" & Cells(2, 7).address & ":" & Cells(2 + num_customers, 7).address & "," & Cells(5 + k, 3 + offset).address & " + 1)))"
                    
                    If period_separator_flag = False Then
                        formulaText = Replace(formulaText, ",", ";")
                    End If
                    
                    If soft_time_windows = True Then
                        Cells(5 + k, 11 + offset).FormatConditions.Add(xlExpression, xlGreater, formulaText).Interior.ColorIndex = 45
                    Else
                        Cells(5 + k, 11 + offset).FormatConditions.Add(xlExpression, xlGreater, formulaText).Interior.ColorIndex = 3
                    End If
                End If
                
                Cells(5 + k, 12 + offset).NumberFormat = "[h]:mm"
                
                formulaText = "=IFERROR(" & Cells(4 + k, 12 + offset).address & " + INDEX('2.Distances'!" & Cells(2, 4).address & ":" & Cells(2 + ((num_customers + 1) * (num_customers + 1)), 4).address & ","
                formulaText = formulaText & Cells(4 + k, 3 + offset).address & "*" & num_customers + 1 & "+" & Cells(5 + k, 3 + offset).address & "+ 1) + "
                formulaText = formulaText & "INDEX('1.Locations'!" & Cells(2, 9).address & ":" & Cells(2 + num_customers, 9).address & ","
                formulaText = formulaText & Cells(5 + k, 3 + offset).address & " + 1)"
                formulaText = formulaText & "," & Chr(34) & " " & Chr(34) & ")"
                
                Cells(5 + k, 12 + offset).Formula = formulaText

                Range(Cells(5 + k, 3 + offset), Cells(5 + k, 12 + offset)).Font.ColorIndex = 1
                Range(Cells(5 + k, 3 + offset), Cells(5 + k, 12 + offset)).Interior.ColorIndex = 6
                
                Range(Cells(5 + k, 1 + offset), Cells(5 + k, 12 + offset)).Select
                With Selection.Borders(xlEdgeBottom)
                    .LineStyle = xlContinuous
                    .ColorIndex = 16
                    .TintAndShade = 0
                    .Weight = xlThin
                End With
                
            Next k
            
            Range(Cells(6, 6 + offset), Cells(6 + num_customers, 6 + offset)).Select
            
            Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="="" """
            Selection.FormatConditions(1).SetFirstPriority
            Selection.FormatConditions(1).Interior.Pattern = xlNone
            Selection.FormatConditions(1).Interior.ColorIndex = 6
            Selection.FormatConditions(1).StopIfTrue = True
            
            If excel_version > 13.9 Then
                Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, Formula1:="='VRP Solver Console'!$C$19"
                Selection.FormatConditions(2).Interior.ColorIndex = 3
            Else
                Selection.FormatConditions.Add(xlCellValue, xlGreater, ThisWorkbook.Worksheets("VRP Solver Console").Cells(19, 3).Value).Interior.ColorIndex = 3
            End If
            Selection.FormatConditions(2).StopIfTrue = True
            
            Range(Cells(6, 7 + offset), Cells(6 + num_customers, 7 + offset)).Select
            
            Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="="" """
            Selection.FormatConditions(1).SetFirstPriority
            Selection.FormatConditions(1).Interior.Pattern = xlNone
            Selection.FormatConditions(1).Interior.ColorIndex = 6
            Selection.FormatConditions(1).StopIfTrue = True
            
            formulaText = "='3.Vehicles'!" & Cells(1 + i, 3).address
                
            If excel_version > 13.9 Then
                Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, Formula1:=formulaText
                Selection.FormatConditions(2).Interior.ColorIndex = 3
            Else
                Selection.FormatConditions.Add(xlCellValue, xlGreater, ThisWorkbook.Worksheets("3.Vehicles").Cells(1 + i, 3).Value).Interior.ColorIndex = 3
            End If
            
            Range(Cells(6, 9 + offset), Cells(6 + num_customers, 9 + offset)).Select
            
            Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="="" """
            Selection.FormatConditions(1).SetFirstPriority
            Selection.FormatConditions(1).Interior.Pattern = xlNone
            Selection.FormatConditions(1).Interior.ColorIndex = 6
            Selection.FormatConditions(1).StopIfTrue = True
            
            formulaText = "='VRP Solver Console'!$C$17"
                
            If excel_version > 13.9 Then
                Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, Formula1:=formulaText
                Selection.FormatConditions(2).Interior.ColorIndex = 3
            Else
                Selection.FormatConditions.Add(xlCellValue, xlGreater, ThisWorkbook.Worksheets("VRP Solver Console").Cells(17, 3).Value).Interior.ColorIndex = 3
            End If
            
            Range(Cells(6, 12 + offset), Cells(6 + num_customers, 12 + offset)).Select
            
            Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="="" """
            Selection.FormatConditions(1).SetFirstPriority
            Selection.FormatConditions(1).Interior.Pattern = xlNone
            Selection.FormatConditions(1).Interior.ColorIndex = 6
            Selection.FormatConditions(1).StopIfTrue = True
            
            formulaText = "='VRP Solver Console'!$C$18"
            
            If excel_version > 13.9 Then
                Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, Formula1:=formulaText
                Selection.FormatConditions(2).Interior.ColorIndex = 3
            Else
                Selection.FormatConditions.Add(xlCellValue, xlGreater, ThisWorkbook.Worksheets("VRP Solver Console").Cells(18, 3).Value).Interior.ColorIndex = 3
            End If

            Cells(5, 2 + offset).Value = "='1.Locations'!$B$2"
            Cells(5, 2 + offset).Font.ColorIndex = 2
            Cells(5, 2 + offset).Interior.ColorIndex = 1
            'Cells(5, 3 + offset).Value = 0
            Cells(5, 3 + offset).Font.ColorIndex = 2
            Cells(5, 3 + offset).Interior.ColorIndex = 1
            Cells(5, 6 + offset).Value = 0
            Cells(5, 7 + offset).Value = 0
            Cells(5, 8 + offset).Value = 0
            Cells(5, 9 + offset).Value = "00:00"
            Cells(5, 10 + offset).Formula = "='VRP Solver Console'!$C$16"
            Cells(5, 11 + offset).Formula = "='VRP Solver Console'!$C$16"
            Cells(5, 12 + offset).Value = "00:00"
            
            Cells(3, 1 + offset).Value = "Vehicle:"
            Cells(3, 2 + offset).Value = ThisWorkbook.Worksheets("3.Vehicles").Cells(1 + i, 2).Value & " " & j
            
            Cells(3, 6 + offset).Value = "Stops:"
            Cells(3, 7 + offset).Formula = "=COUNTA(" & Cells(6, 2 + offset).address & ":" & Cells(6 + num_customers, 2 + offset).address & ")"
            Cells(3, 7 + offset).Interior.ColorIndex = 6
            
            Cells(3, 8 + offset).Value = "Net profit:"
            
            formulaText = "=INDEX(" & Cells(5, 8 + offset).address & ":" & Cells(6 + num_customers, 8 + offset).address & "," & Cells(3, 7 + offset).address & "+ 1)"
            formulaText = formulaText & "-(INDEX(" & Cells(5, 6 + offset).address & ":" & Cells(6 + num_customers, 6 + offset).address
            formulaText = formulaText & "," & Cells(3, 7 + offset).address & "+ 1) " & "* '3.Vehicles'!" & Cells(1 + i, 5).address & ")"
            
            If ThisWorkbook.Worksheets("VRP Solver Console").Cells(14, 3) = "Yes" Then
                formulaText = formulaText & "- IF(INDIRECT(" & Chr(34) & Cells(3, 7 + offset).address & Chr(34) & ") > 1, "
                formulaText = formulaText & "INDIRECT(" & Chr(34) & "'3.Vehicles'!" & Cells(1 + i, 4).address & Chr(34) & "), 0)"
            Else
                formulaText = formulaText & "- IF(INDIRECT(" & Chr(34) & Cells(3, 7 + offset).address & Chr(34) & ") > 0, "
                formulaText = formulaText & "INDIRECT(" & Chr(34) & "'3.Vehicles'!" & Cells(1 + i, 4).address & Chr(34) & "), 0)"
            End If
            
            Cells(3, 9 + offset).Formula = formulaText
            Cells(3, 9 + offset).Interior.ColorIndex = 6
            Cells(3, 9 + offset).NumberFormat = "0.00"
            
            Cells(3, 9 + offset).FormatConditions.Add Type:=xlExpression, Formula1:="=ISERROR(" & Cells(3, 9 + offset).address & ")"
            Cells(3, 9 + offset).FormatConditions(1).Interior.ColorIndex = 3
                
            objectiveFormula = objectiveFormula & "+" & Cells(3, 9 + offset).address
            
            offset = offset + 13
        Next j
    Next i
           
    Cells(1, 2).Value = objectiveFormula
    
    Cells(1, 2).FormatConditions.Add Type:=xlExpression, Formula1:="=ISERROR(" & Cells(1, 2).address & ")"
    Cells(1, 2).FormatConditions(1).Interior.ColorIndex = 3
    
'    'skip the repeated depot
'    combinedRange.FormatConditions.Add(xlCellValue, xlEqual, "='1.Locations'!$B$2").Interior.ColorIndex = 10
'
'    ' Display all duplicate values in red
'    Dim uv As UniqueValues
'    Set uv = combinedRange.FormatConditions.AddUniqueValues
'    uv.DupeUnique = xlDuplicate
'    uv.Interior.ColorIndex = 3
'    uv.StopIfTrue = False
    
    Rows("1:4").Select
    Selection.Font.Bold = True
    
    Columns.AutoFit
    
    Cells(num_customers + 8, 1).Value = "List of detected infeasibilities"
    Cells(num_customers + 8, 1).Font.Bold = True
    
    offset = 0
    
    For i = 1 To numVehicleTypes

        vehicleCount = ThisWorkbook.Worksheets("3.Vehicles").Cells(1 + i, 6).Value
        
        For j = 1 To vehicleCount
        
            Columns(3 + offset).EntireColumn.Hidden = True
            Columns(4 + offset).EntireColumn.Hidden = True
            Columns(5 + offset).EntireColumn.Hidden = True
            
            offset = offset + 13
        Next j
    Next i
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    ActiveSheet.EnableFormatConditionsCalculation = True
    
    Cells(1, 1).Select
    
    MsgBox ("Solution worksheet setup complete.")
    
End Sub
Sub SetupVisualizationWorksheet()
    
    Dim num_customers As Long
    num_customers = ThisWorkbook.Worksheets("VRP Solver Console").Cells(4, 3).Value
    
    Dim numVehicleTypes As Long
    numVehicleTypes = ThisWorkbook.Worksheets("VRP Solver Console").Cells(11, 3).Value
    
    Dim backgroundOption As String
    backgroundOption = ThisWorkbook.Worksheets("VRP Solver Console").Cells(21, 3).Value
    
    Dim labelOption As String
    labelOption = ThisWorkbook.Worksheets("VRP Solver Console").Cells(22, 3).Value
    
    Dim period_separator_flag As Boolean
    If InStr(CStr(WorksheetFunction.Pi), ".") > 0 Then
        period_separator_flag = True
    Else
        period_separator_flag = False
    End If
    
    Dim excel_version As Double
    If period_separator_flag = False Then
        excel_version = CDbl(Replace(Application.Version, ".", ","))
    Else
        excel_version = CDbl(Replace(Application.Version, ",", "."))
    End If
    
    Dim WorksheetExists As Boolean
    Dim MissingCoordinates As Boolean
    Dim CoordinateError As Boolean
    Dim reply As Integer
    Dim i As Long
    Dim j As Long
    Dim k As Long
    
    WorksheetExists = CheckWorksheetExistence("1.Locations") And CheckWorksheetExistence("2.Distances") And CheckWorksheetExistence("3.Vehicles") And CheckWorksheetExistence("4.Solution")
    If WorksheetExists = False Then
        MsgBox "Worksheets 1.Locations, 2.Distances, 3.Vehicles, and 4.Solution must exist for the visualization worksheet to be created."
        Exit Sub
    End If
    
    MissingCoordinates = False
    For i = 0 To num_customers
        For j = 4 To 5
            If WorksheetFunction.IsNumber(ThisWorkbook.Worksheets("1.Locations").Cells(2 + i, j)) = False Then
                MissingCoordinates = True
            End If
        Next j
    Next i
    
    If MissingCoordinates = True Then
        MsgBox "All coordinates must be input for the Visualization worksheet to be created."
        Exit Sub
    End If
    
    WorksheetExists = CheckWorksheetExistence("5.Visualization")
    If WorksheetExists = True Then
    
        If backgroundOption = "Bing Maps" Then
            reply = MsgBox("This will overwrite existing visualization data. By clicking the Yes button below, you confirm that you accept Bing Maps Terms of Service. Do you want to continue?", vbYesNo, "VRP Solver")
        Else
            reply = MsgBox("This will overwrite existing visualization data. Do you want to continue?", vbYesNo, "VRP Solver")
        End If

        If reply = vbNo Then
            ThisWorkbook.Worksheets("5.Visualization").Activate
            Exit Sub
        Else
            Application.DisplayAlerts = False
            ThisWorkbook.Worksheets("5.Visualization").Delete
            Application.DisplayAlerts = True
            ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count)).Name = "5.Visualization"
        End If
    Else
        If backgroundOption = "Bing Maps" Then
            reply = MsgBox("By clicking the Yes button below, you confirm that you accept Bing Maps Terms of Service. Do you want to continue?", vbYesNo, "VRP Solver")
            If reply = vbNo Then
                Exit Sub
            End If
        End If
        ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count)).Name = "5.Visualization"
    End If
    
    CoordinateError = False
    For i = 0 To num_customers
        If Abs(ThisWorkbook.Worksheets("1.Locations").Cells(2 + i, 4).Value) > 90 Then
            CoordinateError = True
        End If
        If Abs(ThisWorkbook.Worksheets("1.Locations").Cells(2 + i, 5).Value) > 180 Then
            CoordinateError = True
        End If
    Next i
    
    If (backgroundOption = "Bing Maps") And (CoordinateError = True) Then
        MsgBox "There are coordinates with |latitude| > 90 or |longitude| > 180. Proceeding with a blank background."
        backgroundOption = "Blank"
    End If
    
    ThisWorkbook.Worksheets("5.Visualization").Activate
    
    Application.ScreenUpdating = False
    
    ' 0, 475, 0, 392
    ActiveSheet.ChartObjects.Add(Left:=0, Width:=475, Top:=0, Height:=392).Chart.ChartType = xlXYScatter
      
    Do Until ActiveSheet.ChartObjects(1).Chart.SeriesCollection.Count = 0
        ActiveSheet.ChartObjects(1).Chart.SeriesCollection(1).Delete
    Loop
    
    With ActiveSheet.ChartObjects(1).Chart
        .PlotVisibleOnly = False
        .SeriesCollection.NewSeries
        .SeriesCollection(1).Values = Range(ThisWorkbook.Worksheets("1.Locations").Cells(2, 4), ThisWorkbook.Worksheets("1.Locations").Cells(2 + num_customers, 4))
        .SeriesCollection(1).XValues = Range(ThisWorkbook.Worksheets("1.Locations").Cells(2, 5), ThisWorkbook.Worksheets("1.Locations").Cells(2 + num_customers, 5))
        .ChartType = xlXYScatter
        .SeriesCollection(1).MarkerStyle = xlMarkerStyleCircle
        .SeriesCollection(1).MarkerSize = 7
        '.Legend.LegendEntries(1).Delete
        .Axes(xlCategory).MajorGridlines.Delete
        .Axes(xlValue).MajorGridlines.Delete
        .HasAxis(xlValue, xlPrimary) = False
        .HasAxis(xlCategory, xlPrimary) = False
        
        With .SeriesCollection(1).Points(1)
            .MarkerStyle = xlMarkerStyleSquare
            .MarkerSize = 10
            .Format.Fill.Solid
            .MarkerBackgroundColorIndex = 1
            .MarkerForegroundColorIndex = 1
        End With
        
        Dim counter As Long
        
        For counter = 1 To num_customers + 1
        
            With .SeriesCollection(1).Points(counter)
            
                .HasDataLabel = True
                If labelOption = "Blank" Then
                    .DataLabel.Text = ""
                End If
                If labelOption = "Location IDs" Then
                    .DataLabel.Text = ThisWorkbook.Worksheets("1.Locations").Cells(1 + counter, 1).Value
                End If
                If labelOption = "Location names" Then
                    .DataLabel.Text = ThisWorkbook.Worksheets("1.Locations").Cells(1 + counter, 2).Value
                End If
            
                If ThisWorkbook.Worksheets("1.Locations").Cells(1 + counter, 8).Value = "Starting location" Then
                    .MarkerStyle = xlMarkerStyleSquare
                    .MarkerSize = 10
                    .Format.Fill.Solid
                    .MarkerBackgroundColorIndex = 1
                    .MarkerForegroundColorIndex = 1
                End If
            
                If ThisWorkbook.Worksheets("1.Locations").Cells(1 + counter, 8).Value = "Must be visited" Then
                    .Format.Fill.Solid
                    .MarkerBackgroundColorIndex = 10
                    .MarkerForegroundColorIndex = 10
                End If
            
                If ThisWorkbook.Worksheets("1.Locations").Cells(1 + counter, 8).Value = "May be visited" Then
                    .Format.Fill.Solid
                    .MarkerBackgroundColorIndex = 4
                    .MarkerForegroundColorIndex = 4
                End If
                
                If ThisWorkbook.Worksheets("1.Locations").Cells(1 + counter, 8).Value = "Don't visit" Then
                    .Format.Fill.Solid
                    .MarkerBackgroundColorIndex = 43
                    .MarkerForegroundColorIndex = 43
                End If
            End With
        Next counter
                
        Dim vehicleCount As Long
        Dim offset As Long
        offset = 0
            
        k = 1
        For i = 1 To numVehicleTypes
        
            vehicleCount = ThisWorkbook.Worksheets("3.Vehicles").Cells(1 + i, 6).Value
            For j = 1 To vehicleCount
                
                .SeriesCollection.NewSeries
                k = k + 1
                
                .SeriesCollection(k).Name = "='4.Solution'!" & Cells(3, 2 + offset).address
                
                .SeriesCollection(k).Values = Range(ThisWorkbook.Worksheets("4.Solution").Cells(5, 4 + offset), ThisWorkbook.Worksheets("4.Solution").Cells(6 + num_customers, 4 + offset))
                .SeriesCollection(k).XValues = Range(ThisWorkbook.Worksheets("4.Solution").Cells(5, 5 + offset), ThisWorkbook.Worksheets("4.Solution").Cells(6 + num_customers, 5 + offset))
                
                If excel_version > 13.9 Then
                    .SeriesCollection(k).ChartType = xlXYScatterLines
                Else
                    .SeriesCollection(k).ChartType = xlXYScatterLines 'xlXYScatterSmooth
                End If
                
                .SeriesCollection(k).Format.Line.EndArrowheadStyle = msoArrowheadTriangle
                .SeriesCollection(k).Format.Line.EndArrowheadLength = msoArrowheadLong
                .SeriesCollection(k).Format.Line.EndArrowheadWidth = msoArrowheadWidthMedium
                
                .SeriesCollection(k).MarkerStyle = xlMarkerStyleNone
                
                offset = offset + 13
                
            Next j
        Next i
        
        .Legend.LegendEntries(1).Delete
        .Legend.Top = 0
        .Legend.Height = 386
        
    End With
    
    ActiveSheet.ChartObjects("Chart 1").Activate
    ActiveChart.PlotArea.Select
    
    With Selection
       .Top = 0  'apply plot area distance from top of chart
       .Left = 0 'apply plot area distance from left of chart
       .Width = 386 'apply plot area width
       .Height = 386 'apply plot area height
    End With
    
    Dim minX As Double
    Dim maxX As Double
    Dim minY As Double
    Dim maxY As Double
    Dim centerX As Double
    Dim centerY As Double
    Dim tempX As Double
    Dim tempY As Double
    Dim finalSize As Double
    
    minX = ThisWorkbook.Worksheets("1.Locations").Cells(2, 5).Value
    maxX = minX
    centerX = minX
    
    minY = ThisWorkbook.Worksheets("1.Locations").Cells(2, 4).Value
    maxY = minY
    centerY = minY
    
    For i = 1 To num_customers
    
        tempX = ThisWorkbook.Worksheets("1.Locations").Cells(2 + i, 5).Value
        tempY = ThisWorkbook.Worksheets("1.Locations").Cells(2 + i, 4).Value
        
        centerX = centerX + tempX
        centerY = centerY + tempY
        
        If minX > tempX Then
            minX = tempX
        End If
        
        If maxX < tempX Then
            maxX = tempX
        End If
        
        If minY > tempY Then
            minY = tempY
        End If
        
        If maxY < tempY Then
            maxY = tempY
        End If
    Next i
    
    centerX = centerX / (num_customers + 1)
    centerY = centerY / (num_customers + 1)
    
    If backgroundOption = "Blank" Then
    
        finalSize = maxX - centerX
        If finalSize < (centerX - minX) Then
            finalSize = (centerX - minX)
        End If
        If finalSize < (maxY - centerY) Then
            finalSize = (maxY - centerY)
        End If
        If finalSize < (centerY - minY) Then
            finalSize = (centerY - minY)
        End If
        
        finalSize = finalSize * 1.05
        
        maxX = centerX + finalSize
        minX = centerX - finalSize
        maxY = centerY + finalSize
        minY = centerY - finalSize
        
        ActiveSheet.ChartObjects(1).Chart.Axes(xlCategory, xlPrimary).MinimumScale = minX
        ActiveSheet.ChartObjects(1).Chart.Axes(xlCategory, xlPrimary).MaximumScale = maxX
        
        ActiveSheet.ChartObjects(1).Chart.Axes(xlValue, xlPrimary).MinimumScale = minY
        ActiveSheet.ChartObjects(1).Chart.Axes(xlValue, xlPrimary).MaximumScale = maxY
        
    End If
    
    If backgroundOption = "Bing Maps" Then
        
        Dim neX As Double, neY As Double, swX As Double, swY As Double
        Dim imageSize As Long, zoom As Long
        Dim url As String
        Dim BingMapsKey As String
        
        BingMapsKey = ThisWorkbook.Worksheets("VRP Solver Console").Cells(2, 3).Value
        
        imageSize = 640
        zoom = 21
        Do
            zoom = zoom - 1
            Call CornersOfBingMap(centerY, centerX, zoom, imageSize, neY, neX, swY, swX)
        Loop While (neX < maxX) Or (neY < maxY) Or (swX > minX) Or (swY > minY)
        
        ActiveSheet.ChartObjects(1).Chart.Axes(xlCategory, xlPrimary).MinimumScale = swX
        ActiveSheet.ChartObjects(1).Chart.Axes(xlCategory, xlPrimary).MaximumScale = neX
        
        ActiveSheet.ChartObjects(1).Chart.Axes(xlValue, xlPrimary).MinimumScale = swY
        ActiveSheet.ChartObjects(1).Chart.Axes(xlValue, xlPrimary).MaximumScale = neY
        
        url = "http://dev.virtualearth.net/REST/v1/Imagery/Map/Road/"
        url = url & Replace(CStr(centerY), ",", ".") & "," & Replace(CStr(centerX), ",", ".")
        url = url & "/" & zoom & "?"
        url = url & "mapSize=" & imageSize & "," & imageSize & "&"
        url = url & "imagerySet=" & "Road&"
        url = url & "key=" & BingMapsKey
        
        'ThisWorkbook.Worksheets("5.Visualization").Cells(30, 1).Value = url
        
        With Selection.Format.Fill
            .Visible = msoTrue
            .UserPicture url
            .TextureTile = msoFalse
            .Transparency = 0.5
        End With
        
    End If
    
    ActiveSheet.Shapes(1).LockAspectRatio = msoTrue
    
    Application.ScreenUpdating = True
    
End Sub

Sub PopulateDistances()
    
    Dim WorksheetExists As Boolean
    Dim MissingCoordinates As Boolean
    Dim reply As Integer
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim nonpopulated_distance_count As Long
    
    WorksheetExists = CheckWorksheetExistence("VRP Solver Console") And CheckWorksheetExistence("1.Locations") And CheckWorksheetExistence("2.Distances")
    If WorksheetExists = False Then
        MsgBox "Worksheets VRP Solver Console, 1.Locations, and 2.Distances must exist for distances to be computed."
        Exit Sub
    End If
    
    Dim populateOption As String 'Euclidian, Geodesic, Google Maps
    populateOption = ThisWorkbook.Worksheets("VRP Solver Console").Cells(7, 3).Value
    
    If populateOption = "Manual entry" Then
        Exit Sub
    End If
    
    Dim num_customers As Long
    num_customers = ThisWorkbook.Worksheets("VRP Solver Console").Cells(4, 3).Value
    
    Dim estimatedTime As Double
    estimatedTime = num_customers * (num_customers + 1) * 0.1
    
    MissingCoordinates = False
    For i = 0 To num_customers
        For j = 4 To 5
            If WorksheetFunction.IsNumber(ThisWorkbook.Worksheets("1.Locations").Cells(2 + i, j)) = False Then
                MissingCoordinates = True
            End If
        Next j
    Next i
    
    If populateOption = "Bing Maps" Then
        Dim BingMapsKey As String
        BingMapsKey = ThisWorkbook.Worksheets("VRP Solver Console").Cells(2, 3).Value
        
        If Len(BingMapsKey) < 32 Then
            MsgBox "A valid Bing Maps Key is required for the distances to be determined. You can get a free key at https://www.bingmapsportal.com/"
            Exit Sub
        End If
    End If
    
    If MissingCoordinates = True Then
        MsgBox "All coordinates must be input for the distances to be populated."
        Exit Sub
    End If
    
    If populateOption = "Bing Maps" Then
        reply = MsgBox("This will overwrite existing distance data and take some time (estimated " & estimatedTime & " seconds). By clicking the Yes button below, you confirm that you accept Bing Maps Terms of Service. Do you want to continue?", vbYesNo, "VRP Solver")
        If reply = vbNo Then
            Exit Sub
        End If
    Else
        reply = MsgBox("This will overwrite existing distance data. Do you want to continue?", vbYesNo, "VRP Solver")
        If reply = vbNo Then
            Exit Sub
        End If
    End If
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
        
    Dim myHour As Long
    Dim myMinute As Long
    Dim mySeconds As Long
    
    ThisWorkbook.Worksheets("2.Distances").Cells(1, 6) = populateOption
    ThisWorkbook.Worksheets("2.Distances").Cells(1, 7).Value = ""
        
    If populateOption = "Bing Maps" Then
    
        Dim period_separator_flag As Boolean
        If InStr(CStr(WorksheetFunction.Pi), ".") > 0 Then
            period_separator_flag = True
        Else
            period_separator_flag = False
        End If
    
        'C style coding
        
        Dim oHttpReq As Object
        Set oHttpReq = CreateObject("MSXML2.XMLHTTP")
        
        Dim OptimizeOption As String
        OptimizeOption = ThisWorkbook.Worksheets("VRP Solver Console").Cells(8, 3).Value
        
        Dim bing_url As String
        Dim resultAddress As String
        Dim fromIndex As Long
        Dim toIndex As Long
        
        Dim tryCount As Long
        
        nonpopulated_distance_count = 0
        
        Dim num_vertices As Long
        num_vertices = num_customers + 1
        
        Dim num_arcs As Long
        num_arcs = num_vertices * (num_vertices - 1)
        
        Dim sequenceArray() As Long
        
        ReDim sequenceArray(0 To num_arcs)
        
        k = 0
        For i = 0 To num_vertices - 1
            sequenceArray(k) = i
            k = k + 1
            
            For j = i + 2 To num_vertices - 1
                If (i <> 0) Or (j <> num_vertices - 1) Then
                    sequenceArray(k) = j
                    k = k + 1
                    sequenceArray(k) = i
                    k = k + 1
                End If
            Next j
        Next i
        
        sequenceArray(k) = 0
        k = k + 1
        
        For i = num_vertices - 1 To 0 Step -1
            sequenceArray(k) = i
            k = k + 1
        Next i
        
        i = 0
        Do
            
            'construct the bing maps api url now
            
            bing_url = "http://dev.virtualearth.net/REST/V1/Routes/Driving?o=xml&wp.0="
            
            bing_url = bing_url & Replace(ThisWorkbook.Worksheets("1.Locations").Cells(2 + sequenceArray(i), 4).Value, ",", ".") & "," & Replace(ThisWorkbook.Worksheets("1.Locations").Cells(2 + sequenceArray(i), 5).Value, ",", ".")
            
            j = 0
            Do
                j = j + 1
                
                bing_url = bing_url & "&wp." & j & "=" & Replace(ThisWorkbook.Worksheets("1.Locations").Cells(2 + sequenceArray(i + j), 4).Value, ",", ".") & "," & Replace(ThisWorkbook.Worksheets("1.Locations").Cells(2 + sequenceArray(i + j), 5).Value, ",", ".")
            Loop While (i + j < num_arcs) And (j <= 23)
            
            bing_url = bing_url & "&avoid=minimizeTolls"
            
            If OptimizeOption = "Shortest" Then
                bing_url = bing_url & "&optimize=distance"
            ElseIf OptimizeOption = "Fastest" Then
                bing_url = bing_url & "&optimize=time"
            ElseIf OptimizeOption = "Fastest - Real Time Traffic" Then
                bing_url = bing_url & "&optimize=timeWithTraffic"
            Else
                bing_url = bing_url & "&optimize=time"
            End If
            
            bing_url = bing_url & "&key=" & BingMapsKey
            
            'MsgBox bing_url
            'ThisWorkbook.Worksheets("2.Distances").Cells(i + 1, 10).Value = bing_url
            
            oHttpReq.Open "GET", bing_url, "false"
            
            oHttpReq.send
             
            tryCount = 0
            Do While (oHttpReq.readystate <> 4) And (tryCount < maxTry)
                'MsgBox "Bad state..."
                Application.Wait (Now() + CDate("00:00:01"))
                tryCount = tryCount + 1
            Loop
        
            If oHttpReq.readystate = 4 Then
            
                If InStr(CStr(oHttpReq.responseXML.Text), "UnauthorizedCredentialsExpiredAccess") > 0 Then
                    MsgBox "Your Bing Maps key is not valid or has expired. Remaining distances will not be populated."
                    Exit Sub
                End If
                
                If InStr(CStr(oHttpReq.responseXML.Text), "No route was found for the waypoints provided.") > 0 Then
                    MsgBox "No driving route could be found between some of the locations. Please check the addresses and the coordinates."
                    Exit Sub
                End If
                
                j = i
                Do
                    'MsgBox "Distance: " & sequenceArray(j) & "->" & sequenceArray(j + 1) & " " & ixnDistance.Text 'Kilometers
                    
                    fromIndex = sequenceArray(j)
                    toIndex = sequenceArray(j + 1)
                    
                    If period_separator_flag = False Then
                        ThisWorkbook.Worksheets("2.Distances").Cells((fromIndex * num_vertices) + toIndex + 2, 3).Value = CDbl(Replace(oHttpReq.responseXML.SelectNodes("//RouteLeg/TravelDistance").Item(j - i).Text, ".", ","))
                    Else
                        ThisWorkbook.Worksheets("2.Distances").Cells((fromIndex * num_vertices) + toIndex + 2, 3).Value = CDbl(Replace(oHttpReq.responseXML.SelectNodes("//RouteLeg/TravelDistance").Item(j - i).Text, ",", "."))
                    End If
                    
                    mySeconds = CLng(oHttpReq.responseXML.SelectNodes("//RouteLeg/TravelDuration").Item(j - i).Text)
                    myHour = Application.WorksheetFunction.Floor(mySeconds / 3600, 1)
                    mySeconds = mySeconds - (3600 * myHour)
                    myMinute = Application.WorksheetFunction.Round(mySeconds / 60, 1)
                    If myMinute = 60 Then
                        myHour = myHour + 1
                        myMinute = 0
                    End If

                    ThisWorkbook.Worksheets("2.Distances").Cells((fromIndex * num_vertices) + toIndex + 2, 4).Value = myHour & ":" & myMinute

                    j = j + 1
                Loop While (j < num_arcs) And (j < i + 23)
                
                Application.Wait (Now() + CDate("00:00:01"))
            Else
                j = i
                Do
                    nonpopulated_distance_count = nonpopulated_distance_count + 1
                    
                    fromIndex = sequenceArray(j)
                    toIndex = sequenceArray(j + 1)
                    
                    ThisWorkbook.Worksheets("2.Distances").Cells(nonpopulated_distance_count + 1, 7).Value = ThisWorkbook.Worksheets("1.Locations").Cells(2 + fromIndex, 2).Value
                    
                    ThisWorkbook.Worksheets("2.Distances").Cells(nonpopulated_distance_count + 1, 8).Value = ThisWorkbook.Worksheets("1.Locations").Cells(2 + toIndex, 2).Value
                    
                    j = j + 1
                Loop While (j < num_arcs) And (j < i + 23)
            End If
        
            'MsgBox i & " " & j
            i = i + 23
        Loop While i < num_arcs
        
        If nonpopulated_distance_count > 0 Then
            MsgBox "Distance populated. Some distances are missing due to a connection error."
            ThisWorkbook.Worksheets("2.Distances").Cells(1, 7).Value = "Warning: Distances for the pairs below have not been populated."
        Else
            MsgBox "Distances populated."
        End If
        
        Set oHttpReq = Nothing
    Else
    
        Dim drivingDistance As String
        Dim drivingTime As String
        
        Dim Lat1 As Double
        Dim Long1 As Double
        Dim Lat2 As Double
        Dim Long2 As Double
        
        Dim myDistance As Double
        Dim mySpeed As Long
        
        mySpeed = ThisWorkbook.Worksheets("VRP Solver Console").Cells(9, 3).Value
        
        k = 2
        For i = 0 To num_customers
            For j = 0 To num_customers
                If i <> j Then
                    Lat1 = ThisWorkbook.Worksheets("1.Locations").Cells(2 + i, 4).Value
                    Long1 = ThisWorkbook.Worksheets("1.Locations").Cells(2 + i, 5).Value
                    Lat2 = ThisWorkbook.Worksheets("1.Locations").Cells(2 + j, 4).Value
                    Long2 = ThisWorkbook.Worksheets("1.Locations").Cells(2 + j, 5).Value
                    
                    If populateOption = "Euclidian distances" Then
                        myDistance = EuclidianDistance(Lat1, Long1, Lat2, Long2)
                    End If
                    
                    If populateOption = "Rounded Euclidian distances" Then
                        myDistance = EuclidianDistance(Lat1, Long1, Lat2, Long2)
                        myDistance = Application.WorksheetFunction.Floor(myDistance + 0.5, 1)
                    End If
                    
                    If populateOption = "Geodesic approximation" Then
                        myDistance = GeosedicDistanceApproximation(Lat1, Long1, Lat2, Long2)
                    End If
                    
                    If populateOption = "Rectilinear (Manhattan) distances" Then
                        myDistance = RectilinearDistance(Lat1, Long1, Lat2, Long2)
                    End If
                    
                    ThisWorkbook.Worksheets("2.Distances").Cells(k, 3).Value = myDistance
                    myHour = Application.WorksheetFunction.Floor(myDistance / mySpeed, 1)
                    myDistance = myDistance - (myHour * mySpeed)
                    myMinute = myDistance * 60 / mySpeed
                    If myHour + myMinute = 0 Then
                        myMinute = 1
                    End If
                    
                    ThisWorkbook.Worksheets("2.Distances").Cells(k, 4).Value = myHour & ":" & myMinute
                End If
                k = k + 1
            Next j
        Next i
    
        MsgBox "Distances populated."
        
    End If
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    
    ThisWorkbook.Worksheets("2.Distances").Activate
    
    Cells(1, 1).Select
    
End Sub
Sub PopulateLatitudeAndLongitude()

    Dim WorksheetExists As Boolean
    Dim reply As Integer
    
    Dim num_customers As Long
    num_customers = ThisWorkbook.Worksheets("VRP Solver Console").Cells(4, 3).Value
    
    Dim estimatedTime As Double
    estimatedTime = num_customers * 1.6
    
    WorksheetExists = CheckWorksheetExistence("1.Locations")
    
    If WorksheetExists = False Then
        MsgBox "Worksheet 1.Locations must exist for coordinates to be determined."
        Exit Sub
    Else
        
        Dim BingMapsKey As String
        BingMapsKey = ThisWorkbook.Worksheets("VRP Solver Console").Cells(2, 3).Value
        If Len(BingMapsKey) < 32 Then
            MsgBox "A valid Bing Maps Key is required for Lat/Lon to be determined. You can get a free key at https://www.bingmapsportal.com/"
            Exit Sub
        End If
        
        WorksheetExists = CheckWorksheetExistence("2.Distances")
        If WorksheetExists = True Then
            reply = MsgBox("This will take some time (estimated " & estimatedTime & " seconds), overwrite the existing coordinate data, and erase existing distance data. By clicking the Yes button below, you confirm that you accept Bing Maps Terms of Service. Do you want to continue?", vbYesNo, "VRP Solver")
            If reply = vbNo Then
                Exit Sub
            Else
                Application.DisplayAlerts = False
                ThisWorkbook.Worksheets("2.Distances").Delete
                Application.DisplayAlerts = True
            End If
        Else
            reply = MsgBox("This will take some time (estimated " & estimatedTime & " seconds) and overwrite the existing coordinate data. By clicking the Yes button below, you confirm that you accept Bing Maps Terms of Service. Do you want to continue?", vbYesNo, "VRP Solver")
            If reply = vbNo Then
                Exit Sub
            End If
        End If
    End If
    
    Dim address As String
    Dim latitude As Double
    Dim longitude As Double
    
    Dim i As Long
    Dim error_count As Long
    
    error_count = 0
    For i = 0 To num_customers
        address = ThisWorkbook.Worksheets("1.Locations").Cells(2 + i, 3).Value
        If Len(address) >= 3 Then
            address = Replace(address, " ", "%20")
            address = Replace(address, ",", "%20")
            Call GeocodeAddressUsingBingMaps(address, latitude, longitude, BingMapsKey)
            If ((Abs(latitude) < 90) And (Abs(longitude) < 180)) Then
                ThisWorkbook.Worksheets("1.Locations").Cells(2 + i, 4).Value = latitude
                ThisWorkbook.Worksheets("1.Locations").Cells(2 + i, 5).Value = longitude
            ElseIf ((Abs(latitude) = 91) And (Abs(longitude) = 181)) Then
                ThisWorkbook.Worksheets("1.Locations").Cells(2 + i, 4).Value = "Address error"
                ThisWorkbook.Worksheets("1.Locations").Cells(2 + i, 5).Value = "Address error"
            ElseIf ((Abs(latitude) = 92) And (Abs(longitude) = 182)) Then
                MsgBox "Your Bing Maps key is not valid or has expired. Remaining coordinates will not be populated."
                Exit Sub
            End If
        End If
        Application.Wait (Now() + CDate("00:00:01"))
    Next i
    
    If error_count = 0 Then
        MsgBox "Lat/Lon populated."
    Else
        MsgBox "Some Lat/Lon values were not received. Please check columns D and E."
    End If
End Sub

Private Sub CornersOfBingMap(centerLat As Double, centerLon As Double, zoom As Long, imageSize As Long, neLat As Double, neLon As Double, swLat As Double, swLon As Double)
    
    Dim myPi As Double
    myPi = WorksheetFunction.Pi
          
    Dim mapSize As Long
    mapSize = 256 * (2 ^ zoom)
        
    Dim mx As Double, my As Double
    Dim px As Long, py As Long
    
    Dim sinLatitude As Double
    
    'center pixel coordinates
    
    mx = (centerLon + 180) / 360
    
    sinLatitude = Sin(centerLat * myPi / 180)
    my = 0.5 - Log((1 + sinLatitude) / (1 - sinLatitude)) / (4 * myPi)

    px = mx * mapSize + 0.5
    py = my * mapSize + 0.5
    
    'NE
    
    mx = ((px + (imageSize / 2)) / mapSize) - 0.5
    my = 0.5 - ((py - (imageSize / 2)) / mapSize)

    neLat = 90 - 360 * Atn(Exp(-my * 2 * myPi)) / myPi
    neLon = 360 * mx
        
    'SW
    
    mx = ((px - (imageSize / 2)) / mapSize) - 0.5
    my = 0.5 - ((py + (imageSize / 2)) / mapSize)

    swLat = 90 - 360 * Atn(Exp(-my * 2 * myPi)) / myPi
    swLon = 360 * mx
    
End Sub

Private Sub About()
    MsgBox "VRP Spreadsheet Solver 1.04 (Release 2)" & Chr(13) & "Open source, developed by Dr. Gunes Erdogan (G.Erdogan@soton.ac.uk), School of Management, University of Southampton." & Chr(13) & "Please cite the User's Manual when referring to the software." & Chr(13) & Chr(13) & "DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE ORIGINAL DEVELOPER BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
End Sub

Private Sub ResetWorkbook()

    Dim WorksheetExists As Boolean
    Dim reply As Integer
    
    reply = MsgBox("This will delete all existing problem data. Do you want to continue?", vbYesNo, "VRP Solver")
    If reply = vbNo Then
        Exit Sub
    Else
    
        Application.DisplayAlerts = False
        
        WorksheetExists = CheckWorksheetExistence("5.Visualization")
        If WorksheetExists = True Then
            ThisWorkbook.Worksheets("5.Visualization").Delete
        End If

        WorksheetExists = CheckWorksheetExistence("4.Solution")
        If WorksheetExists = True Then
            ThisWorkbook.Worksheets("4.Solution").Delete
        End If
        
        WorksheetExists = CheckWorksheetExistence("3.Vehicles")
        If WorksheetExists = True Then
            ThisWorkbook.Worksheets("3.Vehicles").Delete
        End If
        
        WorksheetExists = CheckWorksheetExistence("2.Distances")
        If WorksheetExists = True Then
            ThisWorkbook.Worksheets("2.Distances").Delete
        End If
        
        WorksheetExists = CheckWorksheetExistence("1.Locations")
        If WorksheetExists = True Then
            ThisWorkbook.Worksheets("1.Locations").Delete
        End If
    
        WorksheetExists = CheckWorksheetExistence("VRP Solver Console")
        If WorksheetExists = False Then
            Call SetupConsoleWorksheet
        End If
        
        Application.DisplayAlerts = True
    End If

    WorksheetExists = CheckWorksheetExistence("VRP Solver Console")
    If WorksheetExists = False Then
        Call SetupConsoleWorksheet
    End If
    
    ThisWorkbook.Worksheets("VRP Solver Console").Activate
End Sub

Sub SortLocations()
    
    Dim WorksheetExists As Boolean
    Dim reply As Integer
    
    Dim num_customers As Long
    num_customers = ThisWorkbook.Worksheets("VRP Solver Console").Cells(4, 3).Value
        
    WorksheetExists = CheckWorksheetExistence("1.Locations")
    If WorksheetExists = False Then
        MsgBox "Worksheet 1.Locations must exist for locations to be sorted."
        Exit Sub
    End If
    
    WorksheetExists = CheckWorksheetExistence("2.Distances") Or CheckWorksheetExistence("4.Solution") Or CheckWorksheetExistence("5.Visualization")
    If WorksheetExists = True Then
        reply = MsgBox("This will delete existing distance, solution, and visualization data. Do you want to continue?", vbYesNo, "VRP Solver")
        If reply = vbNo Then
            Exit Sub
        End If
    End If
    
    WorksheetExists = CheckWorksheetExistence("2.Distances")
    If WorksheetExists = True Then
        Application.DisplayAlerts = False
        ThisWorkbook.Worksheets("2.Distances").Delete
        Application.DisplayAlerts = True
    End If
    
    WorksheetExists = CheckWorksheetExistence("4.Solution")
    If WorksheetExists = True Then
        Application.DisplayAlerts = False
        ThisWorkbook.Worksheets("4.Solution").Delete
        Application.DisplayAlerts = True
    End If
    
    WorksheetExists = CheckWorksheetExistence("5.Visualization")
    If WorksheetExists = True Then
        Application.DisplayAlerts = False
        ThisWorkbook.Worksheets("5.Visualization").Delete
        Application.DisplayAlerts = True
    End If
    ThisWorkbook.Worksheets("1.Locations").Activate
    
    Range(Cells(3, 2), Cells(num_customers + 2, 11)).Select
    
    Selection.Sort Key1:=Columns("B"), Order1:=xlAscending, Header:=xlNo
    
End Sub

Sub SetupMenuItems()
    Call ThisWorkbook.Workbook_Activate
End Sub
Attribute VB_Name = "Module2"
Option Explicit

Const epsilon As Double = 0.0001

'data declarations

Private Type vertex_data
    service_time As Long
    mandatory As Long
    profit As Double
    supply As Double
    time_window_start As Long
    time_window_end As Long
End Type

Private Type vertex_list_data
    num_customers As Long
    vertices() As vertex_data
End Type

Dim vertex_list As vertex_list_data

Private Type vehicle_type_data
    capacity As Double
    fixed_cost_per_trip As Double
    cost_per_unit_distance As Double
    number_available As Long
End Type

Private Type vehicle_type_list_data
    num_vehicle_types As Long
    vehicle_types() As vehicle_type_data
End Type

Dim vehicle_type_list As vehicle_type_list_data

Private Type arc_data
    distance() As Double
    duration() As Double
End Type

Dim arc_list As arc_data

Private Type instance_data
    distance_limit As Double
    driving_time_limit As Long
    flexible_fleet As Boolean
    open_VRP As Boolean
    penalty As Double
    soft_time_windows As Boolean
    work_start_time As Long
    working_time_limit As Long
End Type

Dim instance As instance_data

Private Type solution_data
    feasible As Boolean
    covers_mandatory_vertices As Boolean
    net_profit As Double
    total_distance As Double
    net_profit_per_route() As Double
    total_distance_per_route() As Double
    route_vertex_cnt() As Long
    route_vertices() As Long
    vertices_visited() As Long
End Type

Private Type solver_option_data
    CPU_time_limit As Double
    LNS_minimum_removal_rate As Double
    LNS_maximum_removal_rate As Double
    LNS_candidate_list_size As Long
    random_number_seed As Long
    warm_start As Boolean
End Type

Dim solver_options As solver_option_data

Private Type candidate_data
    mandatory As Long
    net_profit As Double
    total_distance As Double
    vertex_to_be_added As Long
    vehicle_type_index As Long
    vehicle_id As Long
    position As Long
End Type


Private Sub GetInstanceData()

    ThisWorkbook.Worksheets("VRP Solver Console").Activate
    
    With instance
        If Cells(13, 3).Value = "No" Then
            .flexible_fleet = True
        Else
            .flexible_fleet = False
        End If
        
        If Cells(14, 3).Value = "Yes" Then
            .open_VRP = False
        Else
            .open_VRP = True
        End If
        
        If Cells(15, 3).Value = "Hard" Then
            .soft_time_windows = False
        Else
            .soft_time_windows = True
        End If
        
        .work_start_time = (60 * Hour(Cells(16, 3).Value)) + Minute(Cells(16, 3).Value)
        .driving_time_limit = (60 * Hour(Cells(17, 3).Value)) + Minute(Cells(17, 3).Value)
        .working_time_limit = (60 * Hour(Cells(18, 3).Value)) + Minute(Cells(18, 3).Value)
        .distance_limit = Cells(19, 3).Value
    End With
End Sub
Private Sub GetSolverOptions()
    ThisWorkbook.Worksheets("VRP Solver Console").Activate
    
    With solver_options
        
        If Cells(24, 3).Value = "Yes" Then
            .warm_start = True
        Else
            .warm_start = False
        End If
        
        .CPU_time_limit = Cells(25, 3).Value
        
        If Cells(26, 3).Value <> "" Then
            .LNS_minimum_removal_rate = Cells(26, 3).Value
        Else
            .LNS_minimum_removal_rate = 0.1
        End If
        
        If Cells(27, 3).Value <> "" Then
            .LNS_maximum_removal_rate = Cells(27, 3).Value
        Else
            .LNS_maximum_removal_rate = 0.4
        End If
        
        If Cells(28, 3).Value <> "" Then
            .LNS_candidate_list_size = Cells(28, 3).Value
        Else
            .LNS_candidate_list_size = 2
        End If
        
        If Cells(29, 3).Value <> "" Then
            .random_number_seed = Cells(29, 3).Value
        Else
            .random_number_seed = 123456789
        End If

        'error handling
        
        If .LNS_minimum_removal_rate > .LNS_maximum_removal_rate Then
            .LNS_minimum_removal_rate = .LNS_maximum_removal_rate
        End If
    End With
End Sub
Private Sub GetVertexData()
    
    vertex_list.num_customers = ThisWorkbook.Worksheets("VRP Solver Console").Cells(4, 3).Value
    
    ReDim vertex_list.vertices(0 To vertex_list.num_customers)
    
    ThisWorkbook.Worksheets("1.Locations").Activate
    
    Dim i As Long
    
    With vertex_list
        
        For i = 0 To .num_customers
            
            .vertices(i).service_time = (60 * Hour(Cells(2 + i, 9).Value)) + Minute(Cells(2 + i, 9).Value)
            
            .vertices(i).mandatory = 0
            
            If Cells(2 + i, 8).Value = "Must be visited" Then
                .vertices(i).mandatory = 1
            ElseIf Cells(2 + i, 8).Value = "Don't visit" Then
                .vertices(i).mandatory = -1
            End If
            
            .vertices(i).profit = Cells(2 + i, 11).Value
            
            .vertices(i).supply = Cells(2 + i, 10).Value
            
            .vertices(i).time_window_start = (60 * Hour(Cells(2 + i, 6).Value)) + Minute(Cells(2 + i, 6).Value)
            .vertices(i).time_window_end = (60 * Hour(Cells(2 + i, 7).Value)) + Minute(Cells(2 + i, 7).Value)
        
        Next i
    
    End With
    
End Sub
Private Sub GetArcData()
    
    ThisWorkbook.Worksheets("2.Distances").Activate
    
    With arc_list
        ReDim .distance(0 To vertex_list.num_customers, 0 To vertex_list.num_customers)
        ReDim .duration(0 To vertex_list.num_customers, 0 To vertex_list.num_customers)
        
        Dim i As Long
        Dim j As Long
        Dim k As Long
        
        k = 2
        For i = 0 To vertex_list.num_customers
            For j = 0 To vertex_list.num_customers
            
                .distance(i, j) = Cells(k, 3).Value
                .duration(i, j) = (60 * Hour(Cells(k, 4).Value)) + Minute(Cells(k, 4).Value)
                
                k = k + 1
            Next j
        Next i
    End With
    
End Sub
Private Sub GetVehicleTypeData()
    
    With vehicle_type_list
    
        .num_vehicle_types = ThisWorkbook.Worksheets("VRP Solver Console").Cells(11, 3).Value
        
        ReDim .vehicle_types(0 To vehicle_type_list.num_vehicle_types)
        
        ThisWorkbook.Worksheets("3.Vehicles").Activate
        
        Dim i As Long
        
        For i = 1 To .num_vehicle_types
            
            .vehicle_types(i).capacity = Cells(1 + i, 3).Value
            
            .vehicle_types(i).fixed_cost_per_trip = Cells(1 + i, 4).Value
            
            .vehicle_types(i).cost_per_unit_distance = Cells(1 + i, 5).Value
            
            .vehicle_types(i).number_available = Cells(1 + i, 6).Value
        Next i
    
    End With
    
End Sub
Private Sub InitializeSolution(solution As solution_data)
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    
    Dim max_number_of_vehicles As Long
    max_number_of_vehicles = 0
        
    With solution
        .feasible = False
        .covers_mandatory_vertices = False
        .net_profit = 0
        .total_distance = 0
        
        For i = 1 To vehicle_type_list.num_vehicle_types
            If max_number_of_vehicles < vehicle_type_list.vehicle_types(i).number_available Then
                max_number_of_vehicles = vehicle_type_list.vehicle_types(i).number_available
            End If
        Next i
        
        ReDim .net_profit_per_route(1 To vehicle_type_list.num_vehicle_types, 1 To max_number_of_vehicles)
        ReDim .total_distance_per_route(1 To vehicle_type_list.num_vehicle_types, 1 To max_number_of_vehicles)
        ReDim .route_vertex_cnt(1 To vehicle_type_list.num_vehicle_types, 1 To max_number_of_vehicles)
        ReDim .route_vertices(1 To vehicle_type_list.num_vehicle_types, 1 To max_number_of_vehicles, 1 To vertex_list.num_customers)
        ReDim .vertices_visited(0 To vertex_list.num_customers)
        
        For i = 1 To vehicle_type_list.num_vehicle_types
            For j = 1 To vehicle_type_list.vehicle_types(i).number_available
                
                .net_profit_per_route(i, j) = 0
                .total_distance_per_route(i, j) = 0
                .route_vertex_cnt(i, j) = 0
                
                For k = 1 To vertex_list.num_customers
                    .route_vertices(i, j, k) = -1
                Next k
            Next j
        Next i
        
        For k = 1 To vertex_list.num_customers
            .vertices_visited(k) = 0
        Next k
    End With
    
End Sub
Private Sub AddVertex(solution As solution_data, vertex_to_be_added As Long, vehicle_type_index As Long, vehicle_id As Long, position As Long)
    
    With solution
        
        .vertices_visited(vertex_to_be_added) = .vertices_visited(vertex_to_be_added) + 1
    
        Dim i As Long
    
        'shift
    
        For i = .route_vertex_cnt(vehicle_type_index, vehicle_id) To position Step -1
            .route_vertices(vehicle_type_index, vehicle_id, i + 1) = .route_vertices(vehicle_type_index, vehicle_id, i)
        Next i
        
        .route_vertices(vehicle_type_index, vehicle_id, position) = vertex_to_be_added
    
        .route_vertex_cnt(vehicle_type_index, vehicle_id) = .route_vertex_cnt(vehicle_type_index, vehicle_id) + 1
        
        Call EvaluateRoute(solution, vehicle_type_index, vehicle_id)
        
        If vertex_list.vertices(vertex_to_be_added).mandatory = 1 Then
            .net_profit = .net_profit + instance.penalty
        End If
        
    End With

End Sub
Private Sub RemoveVertex(solution As solution_data, vehicle_type_index As Long, vehicle_id As Long, position As Long)
    
    Dim vertex_to_be_removed As Long
    
    With solution
        
        vertex_to_be_removed = .route_vertices(vehicle_type_index, vehicle_id, position)
        
        .vertices_visited(vertex_to_be_removed) = .vertices_visited(vertex_to_be_removed) - 1
    
        Dim i As Long
        
        'shift
        
        For i = position To .route_vertex_cnt(vehicle_type_index, vehicle_id) - 1
            .route_vertices(vehicle_type_index, vehicle_id, i) = .route_vertices(vehicle_type_index, vehicle_id, i + 1)
        Next i
    
        .route_vertex_cnt(vehicle_type_index, vehicle_id) = .route_vertex_cnt(vehicle_type_index, vehicle_id) - 1
        
        Call EvaluateRoute(solution, vehicle_type_index, vehicle_id)
        
        If vertex_list.vertices(vertex_to_be_removed).mandatory = 1 Then
            .net_profit = .net_profit - instance.penalty
        End If
        
    End With
End Sub
Private Sub EvaluateRoute(solution As solution_data, vehicle_type_index As Long, vehicle_id As Long)
    
    Dim amount_collected As Double
    Dim distance_traversed As Double
    Dim time_accumulated As Long
    Dim driving_time_total As Long
    Dim working_time_total As Long
    
    Dim net_profit_this_route As Double
    Dim total_distance_this_route As Double
    Dim this_vertex As Long
    Dim previous_vertex As Long
    
    Dim k As Long
    
    amount_collected = 0
    distance_traversed = 0
    driving_time_total = 0
    working_time_total = 0
    
    time_accumulated = instance.work_start_time
            
    With solution
    
        .net_profit = .net_profit - .net_profit_per_route(vehicle_type_index, vehicle_id)
        net_profit_this_route = 0
        
        .total_distance = .total_distance - .total_distance_per_route(vehicle_type_index, vehicle_id)
        total_distance_this_route = 0
        
        If .route_vertex_cnt(vehicle_type_index, vehicle_id) > 0 Then
        
            net_profit_this_route = -vehicle_type_list.vehicle_types(vehicle_type_index).fixed_cost_per_trip
            
            For k = 1 To .route_vertex_cnt(vehicle_type_index, vehicle_id)
            
                this_vertex = .route_vertices(vehicle_type_index, vehicle_id, k)
                
                amount_collected = amount_collected + vertex_list.vertices(this_vertex).supply
                net_profit_this_route = net_profit_this_route + vertex_list.vertices(this_vertex).profit
    
                If k = 1 Then
                    
                    distance_traversed = distance_traversed + arc_list.distance(0, this_vertex)
                    time_accumulated = time_accumulated + arc_list.duration(0, this_vertex)
                    driving_time_total = driving_time_total + arc_list.duration(0, this_vertex)
                    working_time_total = working_time_total + arc_list.duration(0, this_vertex)
    
                    net_profit_this_route = net_profit_this_route - arc_list.distance(0, this_vertex) * vehicle_type_list.vehicle_types(vehicle_type_index).cost_per_unit_distance
                    total_distance_this_route = total_distance_this_route + arc_list.distance(0, this_vertex)
                Else
                    previous_vertex = .route_vertices(vehicle_type_index, vehicle_id, k - 1)
                    
                    distance_traversed = distance_traversed + arc_list.distance(previous_vertex, this_vertex)
                    time_accumulated = time_accumulated + arc_list.duration(previous_vertex, this_vertex)
                    driving_time_total = driving_time_total + arc_list.duration(previous_vertex, this_vertex)
                    working_time_total = working_time_total + arc_list.duration(previous_vertex, this_vertex)
    
                    net_profit_this_route = net_profit_this_route - arc_list.distance(previous_vertex, this_vertex) * vehicle_type_list.vehicle_types(vehicle_type_index).cost_per_unit_distance
                    total_distance_this_route = total_distance_this_route + arc_list.distance(previous_vertex, this_vertex)
                End If
                
                If time_accumulated < vertex_list.vertices(this_vertex).time_window_start Then
                    time_accumulated = vertex_list.vertices(this_vertex).time_window_start
                End If
                
                time_accumulated = time_accumulated + vertex_list.vertices(this_vertex).service_time
                working_time_total = working_time_total + vertex_list.vertices(this_vertex).service_time
                
                If time_accumulated > vertex_list.vertices(this_vertex).time_window_end Then
                    If instance.soft_time_windows = False Then
                        .feasible = False
                    End If
                    net_profit_this_route = net_profit_this_route - instance.penalty * (((time_accumulated / vertex_list.vertices(this_vertex).time_window_end) ^ 2) - 1)
                End If
    
            Next k
    
            If instance.open_VRP = False Then
                
                k = .route_vertices(vehicle_type_index, vehicle_id, .route_vertex_cnt(vehicle_type_index, vehicle_id))
                
                distance_traversed = distance_traversed + arc_list.distance(k, 0)
                time_accumulated = time_accumulated + arc_list.duration(k, 0)
                driving_time_total = driving_time_total + arc_list.duration(k, 0)
                working_time_total = working_time_total + arc_list.duration(k, 0)
    
                net_profit_this_route = net_profit_this_route - arc_list.distance(k, 0) * vehicle_type_list.vehicle_types(vehicle_type_index).cost_per_unit_distance
                total_distance_this_route = total_distance_this_route + arc_list.distance(k, 0)
                
                If time_accumulated > vertex_list.vertices(0).time_window_end Then
                    If instance.soft_time_windows = False Then
                        .feasible = False
                    End If
                    net_profit_this_route = net_profit_this_route - instance.penalty * (((time_accumulated / vertex_list.vertices(0).time_window_end) ^ 2) - 1)
                End If
    
            End If
            
            If distance_traversed > instance.distance_limit Then
                .feasible = False
                net_profit_this_route = net_profit_this_route - instance.penalty * (((distance_traversed / instance.distance_limit) ^ 2) - 1)
            End If
            
            If amount_collected > vehicle_type_list.vehicle_types(vehicle_type_index).capacity Then
                .feasible = False
                net_profit_this_route = net_profit_this_route - instance.penalty * (((amount_collected / vehicle_type_list.vehicle_types(vehicle_type_index).capacity) ^ 2) - 1)
            End If
                
            If driving_time_total > instance.driving_time_limit Then
                .feasible = False
                net_profit_this_route = net_profit_this_route - instance.penalty * (((driving_time_total / instance.driving_time_limit) ^ 2) - 1)
            End If
    
            If working_time_total > instance.working_time_limit Then
                .feasible = False
                net_profit_this_route = net_profit_this_route - instance.penalty * (((working_time_total / instance.working_time_limit) ^ 2) - 1)
            End If
        
        Else
            If instance.flexible_fleet = False Then
                .feasible = False
                net_profit_this_route = net_profit_this_route - instance.penalty
            End If
        End If
        
        .total_distance_per_route(vehicle_type_index, vehicle_id) = total_distance_this_route
        .total_distance = .total_distance + total_distance_this_route
        
        .net_profit_per_route(vehicle_type_index, vehicle_id) = net_profit_this_route
        .net_profit = .net_profit + net_profit_this_route
         
        'MsgBox vehicle_type_index & " " & vehicle_id & " " & amount_collected
    End With
    
End Sub

Private Sub EvaluateSolution(solution As solution_data)
    
    Dim i As Long
    Dim j As Long
        
    With solution
        .net_profit = 0

        For i = 1 To vehicle_type_list.num_vehicle_types
            For j = 1 To vehicle_type_list.vehicle_types(i).number_available
                .net_profit_per_route(i, j) = 0
            Next j
        Next i
        
        .feasible = True
        .covers_mandatory_vertices = True
    End With
    
    For i = 1 To vehicle_type_list.num_vehicle_types
        For j = 1 To vehicle_type_list.vehicle_types(i).number_available
            Call EvaluateRoute(solution, i, j)
        Next j
    Next i
        
    With solution
    
        'check mandatory vertices and visits
        
        For i = 1 To vertex_list.num_customers
            If (vertex_list.vertices(i).mandatory = 1) And (.vertices_visited(i) = 0) Then
                .feasible = False
                .covers_mandatory_vertices = False
                .net_profit = .net_profit - instance.penalty
            End If
            
            If (vertex_list.vertices(i).mandatory = -1) And (.vertices_visited(i) = 1) Then
                .feasible = False
                .net_profit = .net_profit - instance.penalty
            End If
            
            If .vertices_visited(i) > 1 Then
                .feasible = False
                .net_profit = .net_profit - instance.penalty
            End If
        Next i

    End With
    
End Sub
Private Sub DeterminePenalty()
    
    Dim distance_total As Double
    Dim cost_total As Double
    
    Dim i As Long
    Dim j As Long
    
    distance_total = 0
    For i = 0 To vertex_list.num_customers
        For j = 0 To vertex_list.num_customers
        
            distance_total = distance_total + arc_list.distance(i, j)
        
        Next j
    Next i
    
    cost_total = 0
    For i = 1 To vehicle_type_list.num_vehicle_types
        For j = 1 To vehicle_type_list.vehicle_types(i).number_available
            cost_total = cost_total + vehicle_type_list.vehicle_types(i).cost_per_unit_distance
        Next j
    Next i
    
    If cost_total < 1 Then
        cost_total = 1
    End If
    
    instance.penalty = distance_total * cost_total
    
    For i = 1 To vehicle_type_list.num_vehicle_types
        For j = 1 To vehicle_type_list.vehicle_types(i).number_available
            instance.penalty = instance.penalty + vehicle_type_list.vehicle_types(i).fixed_cost_per_trip
        Next j
    Next i
    
End Sub
Private Sub WriteSolution(solution As solution_data)
   
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    ThisWorkbook.Worksheets("4.Solution").Activate
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    
    If solution.feasible = False Then
        Cells(2, 1) = "Warning: Last solution returned by the solver does not satisfy all constraints."
        Range(Cells(2, 1), Cells(2, 12)).Interior.ColorIndex = 45
    Else
        Cells(2, 1) = vbNullString
        Range(Cells(2, 1), Cells(2, 12)).Interior.Pattern = xlNone
        Range(Cells(2, 1), Cells(2, 12)).Interior.TintAndShade = 0
        Range(Cells(2, 1), Cells(2, 12)).Interior.PatternTintAndShade = 0
    End If
    
    Dim offset As Long
    
    offset = 0
      
    For i = 1 To vehicle_type_list.num_vehicle_types
        
        For j = 1 To vehicle_type_list.vehicle_types(i).number_available
            
            For k = 1 To vertex_list.num_customers + 1
                
                ThisWorkbook.Worksheets("4.Solution").Cells(5 + k, 2 + offset).Value = vbNullString
            
            Next k
            
            If solution.route_vertex_cnt(i, j) > 0 Then
                For k = 1 To solution.route_vertex_cnt(i, j)
                    
                    ThisWorkbook.Worksheets("4.Solution").Cells(5 + k, 2 + offset).Value = ThisWorkbook.Worksheets("1.Locations").Cells(solution.route_vertices(i, j, k) + 2, 2)
                
                Next k
                
                If instance.open_VRP = False Then
                    ThisWorkbook.Worksheets("4.Solution").Cells(6 + solution.route_vertex_cnt(i, j), 2 + offset).Value = ThisWorkbook.Worksheets("1.Locations").Cells(2, 2)
                End If
            End If
            
            offset = offset + 13
        
        Next j
        
    Next i
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    
End Sub

Private Sub ReadSolution(solution As solution_data)
       
    ThisWorkbook.Worksheets("4.Solution").Activate
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    
    Dim vertex_to_be_added As Long
    
    Dim stop_count_claimed As Long
    Dim stop_count_realized As Long
    
    Dim offset As Long
    
    offset = 0
    
    With solution
    
        For i = 1 To vehicle_type_list.num_vehicle_types
            For j = 1 To vehicle_type_list.vehicle_types(i).number_available
                            
                stop_count_claimed = Cells(3, 7 + offset).Value
                stop_count_realized = 0
                                
                For k = 1 To stop_count_claimed
                    
                    If (Cells(5 + k, 2 + offset).Value <> vbNullString) And (Cells(5 + k, 2 + offset).Value <> ThisWorkbook.Worksheets("1.Locations").Cells(2, 2).Value) Then
                        vertex_to_be_added = Cells(5 + k, 3 + offset).Value
                        stop_count_realized = stop_count_realized + 1
                        Call AddVertex(solution, vertex_to_be_added, i, j, stop_count_realized)
                    End If
                
                Next k
                
                offset = offset + 13
            
            Next j
        Next i
        
    End With
    
    Cells(1, 1).Select
    
End Sub
Sub VRP_Solver()
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    Dim WorksheetExists As Boolean
    Dim reply As Integer
    
    WorksheetExists = CheckWorksheetExistence("1.Locations") And CheckWorksheetExistence("2.Distances") And CheckWorksheetExistence("3.Vehicles") And CheckWorksheetExistence("4.Solution")
    If WorksheetExists = False Then
        MsgBox "Worksheets 1.Locations, 2.Distances, 3.Vehicles, and 4.Solution must exist for the VRP Spreadsheet Solver to function."
        Application.ScreenUpdating = True
        Application.Calculation = xlCalculationAutomatic
        Exit Sub
    Else
        reply = MsgBox("This will take " & ThisWorkbook.Worksheets("VRP Solver Console").Cells(25, 3).Value & " seconds. Do you want to continue?", vbYesNo, "VRP Solver")
        If reply = vbNo Then
            Application.ScreenUpdating = True
            Application.Calculation = xlCalculationAutomatic
            Exit Sub
        End If
    End If
    
    Application.EnableCancelKey = xlErrorHandler
    On Error GoTo VRP_Solver_Finish
    
    'Allocate memory and get the data
    
    Call GetInstanceData
    Call GetVertexData
    Call GetArcData
    Call GetVehicleTypeData
    Call GetSolverOptions
    
    Call DeterminePenalty
    
    Dim candidate_list() As candidate_data
    ReDim candidate_list(1 To vertex_list.num_customers)
    Dim swap_candidate As candidate_data
    Dim candidate_count As Long
    Dim final_candidate_count As Long
    
    Dim incumbent As solution_data
    Call InitializeSolution(incumbent)
    Call EvaluateSolution(incumbent)
        
    Dim best_known As solution_data
    Call InitializeSolution(best_known)
    best_known = incumbent
    
    Dim iteration As Long
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim l As Long
    
    Dim vertex As Long
    Dim vertex_to_swap As Long
    
    Dim vertex_to_be_added As Long
    Dim vehicle_type_to_add_to As Long
    Dim vehicle_id_to_add_to As Long
    Dim position_to_add_to As Long
                    
    Dim max_net_profit As Double
    Dim min_total_distance As Double
    Dim max_mandatory As Long
    
    Dim removal_rate As Double
    
    Dim start_time As Date
    Dim end_time As Date
    
    'infeasibility check
    
    Dim infeasibility_count As Long
    Dim infeasibility_string As String
    
    Call FeasibilityCheckData(infeasibility_count, infeasibility_string)
    
    If infeasibility_count > 0 Then
        reply = MsgBox("Infeasibilities detected." & Chr(13) & infeasibility_string & "Do you want to continue?", vbYesNo, "VRP Solver")
        If reply = vbNo Then
            Application.ScreenUpdating = True
            Application.Calculation = xlCalculationAutomatic
            Exit Sub
        End If
    End If
    
    'read best known solution
    
    If solver_options.warm_start = True Then
        Call ReadSolution(incumbent)
        Call EvaluateSolution(incumbent)
        
        If incumbent.feasible = True Then
            best_known = incumbent
        End If
    End If
    
    Call Rnd(-1)
    Call Randomize(solver_options.random_number_seed)
    
    start_time = Timer
    end_time = Timer
        
    'constructive phase
    
    Do
        DoEvents
        
        vertex_to_be_added = -1
        max_net_profit = incumbent.net_profit - instance.penalty
        min_total_distance = incumbent.total_distance
        max_mandatory = 0
        
        For vertex = 1 To vertex_list.num_customers
            
            If (vertex_list.vertices(vertex).mandatory >= 0) And (incumbent.vertices_visited(vertex) = 0) Then
                
                For i = 1 To vehicle_type_list.num_vehicle_types
                    For j = 1 To vehicle_type_list.vehicle_types(i).number_available
                        If j = 1 Then
                                
                            For k = 1 To incumbent.route_vertex_cnt(i, j) + 1
                                
                                Call AddVertex(incumbent, vertex, i, j, k)
                                
                                If (vertex_list.vertices(vertex).mandatory > max_mandatory) Or _
                                   ((vertex_list.vertices(vertex).mandatory >= max_mandatory) And (incumbent.net_profit > max_net_profit + epsilon)) Or _
                                   ((vertex_list.vertices(vertex).mandatory >= max_mandatory) And (incumbent.net_profit > max_net_profit - epsilon) And (incumbent.total_distance < min_total_distance - epsilon)) Then
                                   
                                    max_net_profit = incumbent.net_profit
                                    min_total_distance = incumbent.total_distance
                                    max_mandatory = vertex_list.vertices(vertex).mandatory
                                    vertex_to_be_added = vertex
                                    vehicle_type_to_add_to = i
                                    vehicle_id_to_add_to = j
                                    position_to_add_to = k
                                End If
                                
                                Call RemoveVertex(incumbent, i, j, k)
                                
                            Next k
                            
                        ElseIf incumbent.route_vertex_cnt(i, j - 1) > 0 Then

                            For k = 1 To incumbent.route_vertex_cnt(i, j) + 1

                                Call AddVertex(incumbent, vertex, i, j, k)

                                If (vertex_list.vertices(vertex).mandatory > max_mandatory) Or _
                                   ((vertex_list.vertices(vertex).mandatory >= max_mandatory) And (incumbent.net_profit > max_net_profit + epsilon)) Or _
                                   ((vertex_list.vertices(vertex).mandatory >= max_mandatory) And (incumbent.net_profit > max_net_profit - epsilon) And (incumbent.total_distance < min_total_distance - epsilon)) Then
                                   
                                    max_net_profit = incumbent.net_profit
                                    min_total_distance = incumbent.total_distance
                                    max_mandatory = vertex_list.vertices(vertex).mandatory
                                    vertex_to_be_added = vertex
                                    vehicle_type_to_add_to = i
                                    vehicle_id_to_add_to = j
                                    position_to_add_to = k
                                End If

                                Call RemoveVertex(incumbent, i, j, k)

                            Next k
                            
                        End If
                    Next j
                Next i
            
            End If
        
        Next vertex
                    
        If vertex_to_be_added <> -1 Then
            Call AddVertex(incumbent, vertex_to_be_added, vehicle_type_to_add_to, vehicle_id_to_add_to, position_to_add_to)
            'end_time = Timer
            'MsgBox "Added vertex: " & vertex_to_be_added & " obj: " & incumbent.net_profit
        End If
                
        Call EvaluateSolution(incumbent)
        'Call ImproveSolution(incumbent)
    
        If ((incumbent.feasible = True) And (best_known.feasible = False)) Or _
           ((incumbent.covers_mandatory_vertices = True) And (best_known.covers_mandatory_vertices = False)) Or _
           ((incumbent.feasible = best_known.feasible) And (incumbent.net_profit > best_known.net_profit + epsilon)) Then
            
            best_known = incumbent
        End If
        
    Loop While vertex_to_be_added <> -1
      
    If Abs(best_known.net_profit - incumbent.net_profit) > epsilon Then
        Call ImproveSolution(best_known)
        Call ImproveSolution(incumbent)
    Else
        Call ImproveSolution(best_known)
    End If
    
    If ((incumbent.feasible = True) And (best_known.feasible = False)) Or _
       ((incumbent.covers_mandatory_vertices = True) And (best_known.covers_mandatory_vertices = False)) Or _
       ((incumbent.feasible = best_known.feasible) And (incumbent.net_profit > best_known.net_profit + epsilon)) Then
        
        best_known = incumbent
    End If
    
    'end_time = Timer
    'MsgBox "Constructive phase result: " & best_known.net_profit & " time: " & end_time - start_time
    
    'improvement phase

    iteration = 0

    Do
        DoEvents

        removal_rate = solver_options.LNS_minimum_removal_rate + ((solver_options.LNS_maximum_removal_rate - solver_options.LNS_minimum_removal_rate) * Rnd())

        'randomly remove vertices

        For i = 1 To vehicle_type_list.num_vehicle_types
            For j = 1 To vehicle_type_list.vehicle_types(i).number_available
                For k = 1 To incumbent.route_vertex_cnt(i, j)
                    If (k <= incumbent.route_vertex_cnt(i, j)) And (Rnd() < removal_rate) Then
                        Call RemoveVertex(incumbent, i, j, k)
                    End If
                Next k
            Next j
        Next i

        Call ImproveSolution(incumbent)

        'MsgBox "Starting objective: " & incumbent.net_profit & " " & iteration

        Do
            candidate_count = 0

            For vertex = 1 To vertex_list.num_customers

                If (vertex_list.vertices(vertex).mandatory >= 0) And (incumbent.vertices_visited(vertex) = 0) Then

                    max_mandatory = 0
                    max_net_profit = incumbent.net_profit - instance.penalty
                    vehicle_type_to_add_to = -1

                    For i = 1 To vehicle_type_list.num_vehicle_types
                        For j = 1 To vehicle_type_list.vehicle_types(i).number_available
                            For k = 1 To (incumbent.route_vertex_cnt(i, j) + 1)

                                Call AddVertex(incumbent, vertex, i, j, k)

                                If (vertex_list.vertices(vertex).mandatory > max_mandatory) Or _
                                   ((vertex_list.vertices(vertex).mandatory >= max_mandatory) And (incumbent.net_profit > max_net_profit + epsilon)) Or _
                                   ((vertex_list.vertices(vertex).mandatory >= max_mandatory) And (incumbent.net_profit > max_net_profit - epsilon) And (incumbent.total_distance < min_total_distance - epsilon)) Then

                                    max_net_profit = incumbent.net_profit
                                    min_total_distance = incumbent.total_distance
                                    max_mandatory = vertex_list.vertices(vertex).mandatory
                                    vehicle_type_to_add_to = i
                                    vehicle_id_to_add_to = j
                                    position_to_add_to = k
                                End If

                                Call RemoveVertex(incumbent, i, j, k)
                            Next k
                        Next j
                    Next i

                    If vehicle_type_to_add_to <> -1 Then
                        candidate_count = candidate_count + 1
                        With candidate_list(candidate_count)
                            .net_profit = max_net_profit
                            .total_distance = min_total_distance
                            .mandatory = max_mandatory
                            .vertex_to_be_added = vertex
                            .vehicle_type_index = vehicle_type_to_add_to
                            .vehicle_id = vehicle_id_to_add_to
                            .position = position_to_add_to
                        End With
                    End If
                End If

            Next vertex

            If candidate_count > 0 Then

                final_candidate_count = solver_options.LNS_candidate_list_size

                If final_candidate_count > candidate_count Then
                    final_candidate_count = candidate_count
                End If

                For i = 1 To final_candidate_count
                    k = -1
                    max_mandatory = candidate_list(i).mandatory
                    max_net_profit = candidate_list(i).net_profit
                    min_total_distance = candidate_list(i).total_distance
                    For j = i + 1 To candidate_count
                        If (candidate_list(j).mandatory > max_mandatory) Or _
                            ((candidate_list(j).mandatory >= max_mandatory) And (candidate_list(j).net_profit > max_net_profit + epsilon)) Or _
                            ((candidate_list(j).mandatory >= max_mandatory) And (candidate_list(j).net_profit > max_net_profit - epsilon) And (candidate_list(j).total_distance < min_total_distance - epsilon)) Then

                            max_mandatory = candidate_list(j).mandatory
                            max_net_profit = candidate_list(j).net_profit
                            min_total_distance = candidate_list(j).total_distance

                            k = j
                        End If
                    Next j

                    If k > -1 Then
                        swap_candidate = candidate_list(i)
                        candidate_list(i) = candidate_list(k)
                        candidate_list(k) = swap_candidate
                    End If

                Next i

                k = Int(final_candidate_count * Rnd()) + 1

                With candidate_list(k)
                    vertex_to_be_added = .vertex_to_be_added
                    vehicle_type_to_add_to = .vehicle_type_index
                    vehicle_id_to_add_to = .vehicle_id
                    position_to_add_to = .position
                End With
                
                Call AddVertex(incumbent, vertex_to_be_added, vehicle_type_to_add_to, vehicle_id_to_add_to, position_to_add_to)
            End If

            Call EvaluateSolution(incumbent)

            If ((incumbent.feasible = True) And (best_known.feasible = False)) Or _
               ((incumbent.covers_mandatory_vertices = True) And (best_known.covers_mandatory_vertices = False)) Or _
               ((incumbent.feasible = best_known.feasible) And (incumbent.net_profit > best_known.net_profit + epsilon)) Or _
               ((incumbent.feasible = best_known.feasible) And (incumbent.net_profit > best_known.net_profit - epsilon) And (incumbent.total_distance < best_known.total_distance - epsilon)) Then

                'Call ImproveSolution(incumbent)
                best_known = incumbent
            End If

        Loop While candidate_count > 0

        'MsgBox "Before polishing: " & incumbent.net_profit & " " & incumbent.feasible & " " & iteration

        Call ImproveSolution(incumbent)

        'MsgBox "After polishing: " & incumbent.net_profit & " " & incumbent.feasible & " " & iteration

        If ((incumbent.feasible = True) And (best_known.feasible = False)) Or _
            ((incumbent.covers_mandatory_vertices = True) And (best_known.covers_mandatory_vertices = False)) Or _
            ((incumbent.feasible = best_known.feasible) And (incumbent.net_profit > best_known.net_profit + epsilon)) Or _
            ((incumbent.feasible = best_known.feasible) And (incumbent.net_profit > best_known.net_profit - epsilon) And (incumbent.total_distance < best_known.total_distance - epsilon)) Then

             best_known = incumbent

        ElseIf Rnd() < ((end_time - start_time) / solver_options.CPU_time_limit) ^ 2 Then

             incumbent = best_known
             Call EvaluateSolution(incumbent)

        End If

        iteration = iteration + 1

        end_time = Timer

    Loop While end_time - start_time < solver_options.CPU_time_limit
    
    'MsgBox "Iterations performed: " & iteration
    
VRP_Solver_Finish:
    
    'squeeze the solution
    
    For i = 1 To vehicle_type_list.num_vehicle_types
        For j = 1 To vehicle_type_list.vehicle_types(i).number_available - 1
            If best_known.route_vertex_cnt(i, j) = 0 Then
                'look for a vehicle that is used
                l = -1
                k = j + 1
                Do
                    If best_known.route_vertex_cnt(i, k) > 0 Then
                        l = k
                    End If
                    k = k + 1
                Loop While (l = -1) And (k <= vehicle_type_list.vehicle_types(i).number_available)

                If l <> -1 Then
                    best_known.route_vertex_cnt(i, j) = best_known.route_vertex_cnt(i, l)
                    For k = 1 To best_known.route_vertex_cnt(i, l)
                        best_known.route_vertices(i, j, k) = best_known.route_vertices(i, l, k)
                    Next k
                    best_known.route_vertex_cnt(i, l) = 0
                End If
            End If
        Next j
    Next i
    
    Call EvaluateSolution(best_known)
    
    'write the solution
    
    'MsgBox best_known.net_profit
    
    If best_known.feasible = True Then
        reply = MsgBox("VRP Spreadsheet Solver performed " & iteration & " LNS iterations and found a solution. Do you want to overwrite the current solution with the best found solution?", vbYesNo, "VRP Solver")
        If reply = vbYes Then
            Call WriteSolution(best_known)
        End If
    ElseIf infeasibility_count > 0 Then
        Call WriteSolution(best_known)
    Else
        reply = MsgBox("The best found solution after " & iteration & " LNS iterations does not satisfy all constraints. Do you want to overwrite the current solution with the best found solution?", vbYesNo, "VRP Solver")
        If reply = vbYes Then
            Call WriteSolution(best_known)
        End If
    End If
    
    'Erase the data
    
    Erase vertex_list.vertices
    Erase arc_list.distance
    Erase arc_list.duration
    Erase vehicle_type_list.vehicle_types
    
    Erase incumbent.net_profit_per_route
    Erase incumbent.route_vertex_cnt
    Erase incumbent.route_vertices
    Erase incumbent.vertices_visited
    
    Erase best_known.net_profit_per_route
    Erase best_known.route_vertex_cnt
    Erase best_known.route_vertices
    Erase best_known.vertices_visited
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    
    ThisWorkbook.Worksheets("4.Solution").Activate
    Cells(1, 1).Select
    
End Sub
Sub FeasibilityCheckData(infeasibility_count As Long, infeasibility_string As String)
    
    Call GetInstanceData
    Call GetVertexData
    Call GetArcData
    Call GetVehicleTypeData
    
    Dim i As Long
    
    infeasibility_count = 0
    infeasibility_string = vbNullString
    
    Range(ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 9, 1), ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 8 + (4 * vertex_list.num_customers), 1)).Clear
    
    Dim max_vehicle_capacity As Double
    Dim total_vehicle_capacity As Double
    Dim total_supply As Double
    max_vehicle_capacity = 0
    total_vehicle_capacity = 0
    total_supply = 0
    
    For i = 1 To vehicle_type_list.num_vehicle_types
        If max_vehicle_capacity < vehicle_type_list.vehicle_types(i).capacity Then
            max_vehicle_capacity = vehicle_type_list.vehicle_types(i).capacity
        End If
        total_vehicle_capacity = total_vehicle_capacity + (vehicle_type_list.vehicle_types(i).number_available * vehicle_type_list.vehicle_types(i).capacity)
    Next i
    
    For i = 1 To vertex_list.num_customers
        If vertex_list.vertices(i).mandatory = 1 Then
            total_supply = total_supply + vertex_list.vertices(i).supply
        End If
    Next i
    
    If total_supply > total_vehicle_capacity Then
        infeasibility_count = infeasibility_count + 1
        infeasibility_string = infeasibility_string & "The capacity of the given fleet is not enough to transport all the demand / supply." & Chr(13)
        ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 8 + infeasibility_count, 1).Value = "The capacity of the given fleet is not enough to transport all the demand / supply."
    End If
    
    For i = 1 To vertex_list.num_customers
        If (vertex_list.vertices(i).mandatory = 1) And (vertex_list.vertices(i).supply > max_vehicle_capacity) Then
            infeasibility_count = infeasibility_count + 1
            If infeasibility_count < 5 Then
                infeasibility_string = infeasibility_string & "The demand / supply of location " & i & " is too large to fit into any vehicle." & Chr(13)
            End If
            If infeasibility_count = 5 Then
                infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
            End If
            ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 8 + infeasibility_count, 1).Value = "The demand / supply of location " & i & " is too large to fit into any vehicle."
        End If

        If (vertex_list.vertices(i).mandatory = 1) And (vertex_list.vertices(i).time_window_end - vertex_list.vertices(i).time_window_start < vertex_list.vertices(i).service_time) Then
            infeasibility_count = infeasibility_count + 1
            If infeasibility_count < 5 Then
                infeasibility_string = infeasibility_string & "The service time of location " & i & " is shorter than its time window." & Chr(13)
            End If
            If infeasibility_count = 5 Then
                infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
            End If
            ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 8 + infeasibility_count, 1).Value = "The demand / supply of location " & i & " is too large to fit into any vehicle."
        End If
    Next i
    
    For i = 1 To vertex_list.num_customers
        If instance.open_VRP = False Then
            If (vertex_list.vertices(i).mandatory = 1) And (arc_list.distance(0, i) + arc_list.distance(i, 0) > instance.distance_limit) Then
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Location " & i & " cannot be visited with the given distance limit." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 8 + infeasibility_count, 1).Value = "Location " & i & " cannot be visited with the given distance limit."
            End If
    
            If (vertex_list.vertices(i).mandatory = 1) And (arc_list.duration(0, i) + arc_list.duration(i, 0) > instance.driving_time_limit) Then
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Location " & i & " cannot be visited with the given driving time limit." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 8 + infeasibility_count, 1).Value = "Location " & i & " cannot be visited with the given driving time limit."
            End If
    
            If (vertex_list.vertices(i).mandatory = 1) And (arc_list.duration(0, i) + arc_list.duration(i, 0) + vertex_list.vertices(i).service_time > instance.working_time_limit) Then
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Location " & i & " cannot be visited with the given working time limit." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 8 + infeasibility_count, 1).Value = "Location " & i & " cannot be visited with the given working time limit."
            End If
        Else
            If (vertex_list.vertices(i).mandatory = 1) And (arc_list.distance(0, i) > instance.distance_limit) Then
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Location " & i & " cannot be visited with the given distance limit." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 8 + infeasibility_count, 1).Value = "Location " & i & " cannot be visited with the given distance limit."
            End If
    
            If (vertex_list.vertices(i).mandatory = 1) And (arc_list.duration(0, i) > instance.driving_time_limit) Then
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Location " & i & " cannot be visited with the given driving time limit." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 8 + infeasibility_count, 1).Value = "Location " & i & " cannot be visited with the given driving time limit."
            End If
    
            If (vertex_list.vertices(i).mandatory = 1) And (arc_list.duration(0, i) + vertex_list.vertices(i).service_time > instance.working_time_limit) Then
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Location " & i & " cannot be visited with the given working time limit." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 8 + infeasibility_count, 1).Value = "Location " & i & " cannot be visited with the given working time limit."
            End If
        End If
    Next i
    
End Sub
Sub FeasibilityCheckDataAndSolution()
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    Dim WorksheetExists As Boolean
    Dim reply As Integer
    
    WorksheetExists = CheckWorksheetExistence("1.Locations") And CheckWorksheetExistence("2.Distances") And CheckWorksheetExistence("3.Vehicles") And CheckWorksheetExistence("4.Solution")
    If WorksheetExists = False Then
        MsgBox "Worksheets 1.Locations, 2.Distances, 3.Vehicles, and 4.Solution must exist for the Infeasibility Check."
        Exit Sub
    End If
    
    Call GetInstanceData
    Call GetVertexData
    Call GetArcData
    Call GetVehicleTypeData
    ThisWorkbook.Worksheets("4.Solution").Activate
    
    Range(Cells(2, 1), Cells(2, 12)).Clear
    Range(Cells(vertex_list.num_customers + 9, 1), Cells(vertex_list.num_customers + 8 + (8 * vertex_list.num_customers), 1)).Clear
    
    Dim infeasibility_count As Long
    infeasibility_count = 0
    
    Dim infeasibility_string As String
    infeasibility_string = Chr(13)
    
    Dim i As Long
    Dim j As Long
    Dim k As Long

    Dim stop_count As Long
    Dim offset As Long
    
    offset = 0
    
    For i = 1 To vehicle_type_list.num_vehicle_types
        For j = 1 To vehicle_type_list.vehicle_types(i).number_available
                        
            stop_count = ThisWorkbook.Worksheets("4.Solution").Cells(3, 7 + offset).Value
            
            For k = 1 To stop_count
                
                If Cells(5 + k, 2 + offset).Value = vbNullString Then
                    infeasibility_count = infeasibility_count + 1
                    If infeasibility_count < 5 Then
                        infeasibility_string = infeasibility_string & "Locations must be contiguous in routes. Violation at: " & Cells(5 + k, 2 + offset).address & Chr(13)
                    End If
                    If infeasibility_count = 5 Then
                        infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                    End If
                    Cells(vertex_list.num_customers + 8 + infeasibility_count, 1).Value = "Locations must be contiguous in routes. Violation at: " & Cells(5 + k, 2 + offset).address
                End If
                
                If (k < stop_count) And (Cells(5 + k, 2 + offset).Value = ThisWorkbook.Worksheets("1.Locations").Cells(2, 2).Value) Then
                    infeasibility_count = infeasibility_count + 1
                    If infeasibility_count < 5 Then
                        infeasibility_string = infeasibility_string & "There must be at most one return to the starting location. Violation at: " & Cells(5 + k, 2 + offset).address & Chr(13)
                    End If
                    If infeasibility_count = 5 Then
                        infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                    End If
                    Cells(vertex_list.num_customers + 8 + infeasibility_count, 1).Value = "There must be at most one return to the starting location. Violation at: " & Cells(5 + k, 2 + offset).address
                End If
                
                If (instance.open_VRP = False) And (k = stop_count) And (Cells(5 + k, 2 + offset).Value <> ThisWorkbook.Worksheets("1.Locations").Cells(2, 2).Value) Then
                    infeasibility_count = infeasibility_count + 1
                    If infeasibility_count < 5 Then
                        infeasibility_string = infeasibility_string & "Every vehicle must return to the starting location. Violation at: " & Cells(5 + k, 2 + offset).address & Chr(13)
                    End If
                    If infeasibility_count = 5 Then
                        infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                    End If
                    Cells(vertex_list.num_customers + 8 + infeasibility_count, 1).Value = "Every vehicle must return to the starting location. Violation at: " & Cells(5 + k, 2 + offset).address
                End If
            
            Next k
            
            offset = offset + 13
        
        Next j
    Next i
    
    If infeasibility_count > 0 Then
        infeasibility_string = "The solution has format problems:" & infeasibility_string
    End If
    
    Dim incumbent As solution_data
    
    Call InitializeSolution(incumbent)
    Call ReadSolution(incumbent)
    
    Dim max_vehicle_capacity As Double
    Dim total_vehicle_capacity As Double
    Dim total_supply As Double
    max_vehicle_capacity = 0
    total_vehicle_capacity = 0
    total_supply = 0
    
    For i = 1 To vehicle_type_list.num_vehicle_types
        If max_vehicle_capacity < vehicle_type_list.vehicle_types(i).capacity Then
            max_vehicle_capacity = vehicle_type_list.vehicle_types(i).capacity
        End If
        total_vehicle_capacity = total_vehicle_capacity + (vehicle_type_list.vehicle_types(i).number_available * vehicle_type_list.vehicle_types(i).capacity)
    Next i
    
    For i = 1 To vertex_list.num_customers
        If vertex_list.vertices(i).mandatory = 1 Then
            total_supply = total_supply + vertex_list.vertices(i).supply
        End If
    Next i
    
    If total_supply > total_vehicle_capacity Then
        infeasibility_count = infeasibility_count + 1
        infeasibility_string = infeasibility_string & "The capacity of the given fleet is not enough to transport all the demand / supply." & Chr(13)
        Cells(vertex_list.num_customers + 8 + infeasibility_count, 1).Value = "The capacity of the given fleet is not enough to transport all the demand / supply."
    End If
    
    For i = 1 To vertex_list.num_customers
        If (vertex_list.vertices(i).mandatory = 1) And (vertex_list.vertices(i).supply > max_vehicle_capacity) Then
            infeasibility_count = infeasibility_count + 1
            If infeasibility_count < 5 Then
                infeasibility_string = infeasibility_string & "The demand / supply of location " & i & " is too large to fit into any vehicle." & Chr(13)
            End If
            If infeasibility_count = 5 Then
                infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
            End If
            Cells(vertex_list.num_customers + 8 + infeasibility_count, 1).Value = "The demand / supply of location " & i & " is too large to fit into any vehicle."
        End If

        If (vertex_list.vertices(i).mandatory = 1) And (vertex_list.vertices(i).time_window_end - vertex_list.vertices(i).time_window_start < vertex_list.vertices(i).service_time) Then
            infeasibility_count = infeasibility_count + 1
            If infeasibility_count < 5 Then
                infeasibility_string = infeasibility_string & "The service time of location " & i & " is shorter than its time window." & Chr(13)
            End If
            If infeasibility_count = 5 Then
                infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
            End If
            Cells(vertex_list.num_customers + 8 + infeasibility_count, 1).Value = "The demand / supply of location " & i & " is too large to fit into any vehicle."
        End If
    Next i
    
    For i = 1 To vertex_list.num_customers
        If instance.open_VRP = False Then
            If (vertex_list.vertices(i).mandatory = 1) And (arc_list.distance(0, i) + arc_list.distance(i, 0) > instance.distance_limit) Then
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Location " & i & " cannot be visited with the given distance limit." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 8 + infeasibility_count, 1).Value = "Location " & i & " cannot be visited with the given distance limit."
            End If
    
            If (vertex_list.vertices(i).mandatory = 1) And (arc_list.duration(0, i) + arc_list.duration(i, 0) > instance.driving_time_limit) Then
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Location " & i & " cannot be visited with the given driving time limit." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 8 + infeasibility_count, 1).Value = "Location " & i & " cannot be visited with the given driving time limit."
            End If
    
            If (vertex_list.vertices(i).mandatory = 1) And (arc_list.duration(0, i) + arc_list.duration(i, 0) + vertex_list.vertices(i).service_time > instance.working_time_limit) Then
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Location " & i & " cannot be visited with the given working time limit." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 8 + infeasibility_count, 1).Value = "Location " & i & " cannot be visited with the given working time limit."
            End If
        Else
            If (vertex_list.vertices(i).mandatory = 1) And (arc_list.distance(0, i) > instance.distance_limit) Then
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Location " & i & " cannot be visited with the given distance limit." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 8 + infeasibility_count, 1).Value = "Location " & i & " cannot be visited with the given distance limit."
            End If
    
            If (vertex_list.vertices(i).mandatory = 1) And (arc_list.duration(0, i) > instance.driving_time_limit) Then
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Location " & i & " cannot be visited with the given driving time limit." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 8 + infeasibility_count, 1).Value = "Location " & i & " cannot be visited with the given driving time limit."
            End If
    
            If (vertex_list.vertices(i).mandatory = 1) And (arc_list.duration(0, i) + vertex_list.vertices(i).service_time > instance.working_time_limit) Then
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Location " & i & " cannot be visited with the given working time limit." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("4.Solution").Cells(vertex_list.num_customers + 8 + infeasibility_count, 1).Value = "Location " & i & " cannot be visited with the given working time limit."
            End If
        End If
    Next i
    
    Dim amount_collected As Double
    Dim distance_traversed As Double
    Dim time_accumulated As Long
    Dim driving_time_total As Long
    Dim working_time_total As Long
    
    With incumbent
    
        For i = 1 To vehicle_type_list.num_vehicle_types
            For j = 1 To vehicle_type_list.vehicle_types(i).number_available
            
                amount_collected = 0
                distance_traversed = 0
                driving_time_total = 0
                working_time_total = 0
                time_accumulated = instance.work_start_time
            
                If .route_vertex_cnt(i, j) > 0 Then
            
                    .net_profit_per_route(i, j) = .net_profit_per_route(i, j) - vehicle_type_list.vehicle_types(i).fixed_cost_per_trip
                    
                    For k = 1 To .route_vertex_cnt(i, j)
                    
                        amount_collected = amount_collected + vertex_list.vertices(.route_vertices(i, j, k)).supply
            
                        If k = 1 Then
                            distance_traversed = distance_traversed + arc_list.distance(0, .route_vertices(i, j, k))
                            time_accumulated = time_accumulated + arc_list.duration(0, .route_vertices(i, j, k))
                            driving_time_total = driving_time_total + arc_list.duration(0, .route_vertices(i, j, k))
                            working_time_total = working_time_total + arc_list.duration(0, .route_vertices(i, j, k))
                        Else
                            distance_traversed = distance_traversed + arc_list.distance(.route_vertices(i, j, k - 1), .route_vertices(i, j, k))
                            time_accumulated = time_accumulated + arc_list.duration(.route_vertices(i, j, k - 1), .route_vertices(i, j, k))
                            driving_time_total = driving_time_total + arc_list.duration(.route_vertices(i, j, k - 1), .route_vertices(i, j, k))
                            working_time_total = working_time_total + arc_list.duration(.route_vertices(i, j, k - 1), .route_vertices(i, j, k))
                        End If
                        
                        If time_accumulated < vertex_list.vertices(.route_vertices(i, j, k)).time_window_start Then
                            time_accumulated = vertex_list.vertices(.route_vertices(i, j, k)).time_window_start
                        End If
                        
                        time_accumulated = time_accumulated + vertex_list.vertices(.route_vertices(i, j, k)).service_time
                        working_time_total = working_time_total + vertex_list.vertices(.route_vertices(i, j, k)).service_time
                        
                        If time_accumulated > vertex_list.vertices(.route_vertices(i, j, k)).time_window_end And instance.soft_time_windows = False Then
                            infeasibility_count = infeasibility_count + 1
                            If infeasibility_count < 5 Then
                                infeasibility_string = infeasibility_string & "The visit time of location " & .route_vertices(i, j, k) & " is past its time window." & Chr(13)
                            End If
                            If infeasibility_count = 5 Then
                                infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                            End If
                            Cells(vertex_list.num_customers + 8 + infeasibility_count, 1).Value = "The visit time of location " & .route_vertices(i, j, k) & " is past its time window."
                        End If
            
                    Next k
            
                    If instance.open_VRP = False Then
                        
                        k = .route_vertices(i, j, .route_vertex_cnt(i, j))
                        
                        distance_traversed = distance_traversed + arc_list.distance(k, 0)
                        time_accumulated = time_accumulated + arc_list.duration(k, 0)
                        driving_time_total = driving_time_total + arc_list.duration(k, 0)
                        working_time_total = working_time_total + arc_list.duration(k, 0)
                        
                        If time_accumulated > vertex_list.vertices(0).time_window_end And instance.soft_time_windows = False Then
                            infeasibility_count = infeasibility_count + 1
                            If infeasibility_count < 5 Then
                                infeasibility_string = infeasibility_string & "Vehicle " & ThisWorkbook.Worksheets("3.Vehicles").Cells(1 + i, 2) & " " & j & " returns to the starting location past its time window." & Chr(13)
                            End If
                            If infeasibility_count = 5 Then
                                infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                            End If
                            Cells(vertex_list.num_customers + 8 + infeasibility_count, 1).Value = "Vehicle " & ThisWorkbook.Worksheets("3.Vehicles").Cells(1 + i, 2) & " " & j & " returns to the starting location past its time window."
                        End If
            
                    End If
                    
                    If distance_traversed > instance.distance_limit Then
                        infeasibility_count = infeasibility_count + 1
                        If infeasibility_count < 5 Then
                            infeasibility_string = infeasibility_string & "Vehicle " & ThisWorkbook.Worksheets("3.Vehicles").Cells(1 + i, 2) & " " & j & " exceeds the distance limit." & Chr(13)
                        End If
                        If infeasibility_count = 5 Then
                            infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                        End If
                        Cells(vertex_list.num_customers + 8 + infeasibility_count, 1).Value = "Vehicle " & ThisWorkbook.Worksheets("3.Vehicles").Cells(1 + i, 2) & " " & j & " exceeds the distance limit."
                    End If
                    
                    If amount_collected > vehicle_type_list.vehicle_types(i).capacity Then
                        infeasibility_count = infeasibility_count + 1
                        If infeasibility_count < 5 Then
                            infeasibility_string = infeasibility_string & "Vehicle " & ThisWorkbook.Worksheets("3.Vehicles").Cells(1 + i, 2) & " " & j & " exceeds its capacity." & Chr(13)
                        End If
                        If infeasibility_count = 5 Then
                            infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                        End If
                        Cells(vertex_list.num_customers + 8 + infeasibility_count, 1).Value = "Vehicle " & ThisWorkbook.Worksheets("3.Vehicles").Cells(1 + i, 2) & " " & j & " exceeds its capacity."
                    End If
                        
                    If driving_time_total > instance.driving_time_limit Then
                        infeasibility_count = infeasibility_count + 1
                        If infeasibility_count < 5 Then
                            infeasibility_string = infeasibility_string & "Vehicle " & ThisWorkbook.Worksheets("3.Vehicles").Cells(1 + i, 2) & " " & j & " exceeds the driving time limit." & Chr(13)
                        End If
                        If infeasibility_count = 5 Then
                            infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                        End If
                        Cells(vertex_list.num_customers + 8 + infeasibility_count, 1).Value = "Vehicle " & ThisWorkbook.Worksheets("3.Vehicles").Cells(1 + i, 2) & " " & j & " exceeds the driving time limit."
                    End If
            
                    If working_time_total > instance.working_time_limit Then
                        infeasibility_count = infeasibility_count + 1
                        If infeasibility_count < 5 Then
                            infeasibility_string = infeasibility_string & "Vehicle " & ThisWorkbook.Worksheets("3.Vehicles").Cells(1 + i, 2) & " " & j & " exceeds the working time limit." & Chr(13)
                        End If
                        If infeasibility_count = 5 Then
                            infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                        End If
                        Cells(vertex_list.num_customers + 8 + infeasibility_count, 1).Value = "Vehicle " & ThisWorkbook.Worksheets("3.Vehicles").Cells(1 + i, 2) & " " & j & " exceeds the working time limit."
                    End If
                
                Else
                    If instance.flexible_fleet = False Then
                        infeasibility_count = infeasibility_count + 1
                        If infeasibility_count < 5 Then
                            infeasibility_string = infeasibility_string & "Vehicle " & ThisWorkbook.Worksheets("3.Vehicles").Cells(1 + i, 2) & " " & j & " not used." & Chr(13)
                        End If
                        If infeasibility_count = 5 Then
                            infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                        End If
                        Cells(vertex_list.num_customers + 8 + infeasibility_count, 1).Value = "Vehicle " & ThisWorkbook.Worksheets("3.Vehicles").Cells(1 + i, 2) & " " & j & " not used."
                    End If
                End If
            Next j
        Next i
        
        'check mandatory vertices and visits
        
        For i = 1 To vertex_list.num_customers
            
            If (vertex_list.vertices(i).mandatory = 1) And (.vertices_visited(i) <> 1) Then
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Location " & i & " must have been visited once (current number of visits: " & .vertices_visited(i) & ")." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                End If
                Cells(vertex_list.num_customers + 8 + infeasibility_count, 1).Value = "Location " & i & " must have been visited once (current number of visits: " & .vertices_visited(i) & ")."
            End If
            
            If (vertex_list.vertices(i).mandatory = -1) And (.vertices_visited(i) > 0) Then
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Location " & i & " must not be visited." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                End If
                Cells(vertex_list.num_customers + 8 + infeasibility_count, 1).Value = "Location " & i & " must not be visited."
            End If
            
        Next i
        
    End With
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    
    If infeasibility_count > 0 Then
        Cells(2, 1) = "Warning: Last infeasibility check found problems with the solution."
        Range(Cells(2, 1), Cells(2, 12)).Interior.ColorIndex = 45
        infeasibility_string = infeasibility_string & "The solution is infeasible."
        MsgBox (infeasibility_string)
    Else
        MsgBox ("The solution is feasible.")
    End If
    
End Sub

Private Sub ImproveSolution(solution As solution_data)
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    
    Dim a As Long
    Dim b As Long
    Dim c As Long
    
    Dim vertex As Long
    Dim vertex_buffer() As Long
    ReDim vertex_buffer(1 To vertex_list.num_customers)
    
    Dim cnt1 As Long
    Dim cnt2 As Long
    
    Dim vehicle_type_to_swap1 As Long
    Dim vehicle_type_to_swap2 As Long
    Dim vehicle_id_to_swap1 As Long
    Dim vehicle_id_to_swap2 As Long
    Dim position_to_swap1 As Long
    Dim position_to_swap2 As Long
    Dim vertex_to_swap As Long
    Dim vehicle_id_start_index As Long
    
    Dim vehicle_type_to_relocate1 As Long
    Dim vehicle_type_to_relocate2 As Long
    Dim vehicle_id_to_relocate1 As Long
    Dim vehicle_id_to_relocate2 As Long
    Dim position_to_relocate1 As Long
    Dim position_to_relocate2 As Long
    
    Dim vehicle_type_for_2opt1 As Long
    Dim vehicle_type_for_2opt2 As Long
    Dim vehicle_id_for_2opt1 As Long
    Dim vehicle_id_for_2opt2 As Long
    Dim position_for_2opt1 As Long
    Dim position_for_2opt2 As Long
    Dim vertex_cnt_for_2opt1 As Long
    Dim vertex_cnt_for_2opt2 As Long
    
    Dim reversal_for_2opt1 As Long
    Dim reversal_for_2opt2 As Long
    
    Dim vehicle_type_for_chain_reversal As Long
    Dim vehicle_id_for_chain_reversal As Long
    Dim position_for_chain_reversal1 As Long
    Dim position_for_chain_reversal2 As Long
    Dim midpoint_for_chain_reversal As Long
    
    Dim max_net_profit As Double
    Dim min_total_distance As Double
    
    'polishing
    
    'MsgBox "Before polishing: " & solution.net_profit & " " & solution.feasible
    
    Do
        DoEvents

        With solution
        
             max_net_profit = .net_profit
             min_total_distance = .total_distance
             
             'swap
             
             vehicle_type_to_swap1 = -1
             For i = 1 To vehicle_type_list.num_vehicle_types
                 For j = 1 To vehicle_type_list.vehicle_types(i).number_available
                     For k = 1 To .route_vertex_cnt(i, j)
                         
                         For a = i To vehicle_type_list.num_vehicle_types
                             
                             If a = i Then
                                vehicle_id_start_index = j
                             Else
                                vehicle_id_start_index = 1
                             End If
                                
                             For b = vehicle_id_start_index To vehicle_type_list.vehicle_types(a).number_available
                                 For c = 1 To .route_vertex_cnt(a, b)
    
                                    vertex_to_swap = .route_vertices(i, j, k)
                                    .route_vertices(i, j, k) = .route_vertices(a, b, c)
                                    .route_vertices(a, b, c) = vertex_to_swap
    
                                    Call EvaluateRoute(solution, i, j)
                                    Call EvaluateRoute(solution, a, b)
    
                                    If (.net_profit > max_net_profit + epsilon) Or ((.net_profit > max_net_profit - epsilon) And (.total_distance < min_total_distance - epsilon)) Then
                                        
                                        max_net_profit = .net_profit
                                        min_total_distance = .total_distance
    
                                        vehicle_type_to_swap1 = i
                                        vehicle_id_to_swap1 = j
                                        position_to_swap1 = k
    
                                        vehicle_type_to_swap2 = a
                                        vehicle_id_to_swap2 = b
                                        position_to_swap2 = c
                                    End If
    
                                    vertex_to_swap = .route_vertices(i, j, k)
                                    .route_vertices(i, j, k) = .route_vertices(a, b, c)
                                    .route_vertices(a, b, c) = vertex_to_swap
                                    
                                    Call EvaluateRoute(solution, i, j)
                                    Call EvaluateRoute(solution, a, b)
    
                                 Next c
                             Next b
                         Next a
    
                     Next k
                 Next j
             Next i
    
            'relocate

             vehicle_type_to_relocate1 = -1
             For i = 1 To vehicle_type_list.num_vehicle_types
                 For j = 1 To vehicle_type_list.vehicle_types(i).number_available
                     For k = 1 To .route_vertex_cnt(i, j)

                         vertex = .route_vertices(i, j, k)
                         
                         Call RemoveVertex(solution, i, j, k)

                         For a = 1 To vehicle_type_list.num_vehicle_types
                             For b = 1 To vehicle_type_list.vehicle_types(a).number_available
                                 For c = 1 To .route_vertex_cnt(a, b) + 1
                                    
                                    Call AddVertex(solution, vertex, a, b, c)

                                    If (.net_profit > max_net_profit + epsilon) Or ((.net_profit > max_net_profit - epsilon) And (.total_distance < min_total_distance - epsilon)) Then

                                        max_net_profit = .net_profit
                                        min_total_distance = .total_distance

                                        vehicle_type_to_relocate1 = i
                                        vehicle_id_to_relocate1 = j
                                        position_to_relocate1 = k

                                        vehicle_type_to_relocate2 = a
                                        vehicle_id_to_relocate2 = b
                                        position_to_relocate2 = c

                                        vehicle_type_to_swap1 = -1
                                    End If

                                    Call RemoveVertex(solution, a, b, c)
                                    
                                 Next c
                             Next b
                         Next a
                         
                         Call AddVertex(solution, vertex, i, j, k)

                     Next k
                 Next j
             Next i
             
             '2-opt
    
             vehicle_type_for_2opt1 = -1
             For i = 1 To vehicle_type_list.num_vehicle_types
                 For j = 1 To vehicle_type_list.vehicle_types(i).number_available
                    
                    For a = i To vehicle_type_list.num_vehicle_types
                    
                        If a = i Then
                           vehicle_id_start_index = j + 1
                        Else
                           vehicle_id_start_index = 1
                        End If
                        
                        For b = vehicle_id_start_index To vehicle_type_list.vehicle_types(a).number_available
                            
                            If (.route_vertex_cnt(i, j) > 2) And (.route_vertex_cnt(a, b) > 2) Then
                                
                                For k = 1 To .route_vertex_cnt(i, j) - 1
                                    For c = 1 To .route_vertex_cnt(a, b) - 1
    
                                         vertex_cnt_for_2opt1 = .route_vertex_cnt(i, j) - k
                                         vertex_cnt_for_2opt2 = .route_vertex_cnt(a, b) - c
    
                                         For vertex = k + 1 To .route_vertex_cnt(i, j)
                                            vertex_buffer(vertex) = .route_vertices(i, j, vertex)
                                         Next vertex
    
                                         For vertex = c + 1 To .route_vertex_cnt(a, b)
                                            .route_vertices(i, j, k + vertex - c) = .route_vertices(a, b, vertex)
                                         Next vertex
    
                                         For vertex = k + 1 To .route_vertex_cnt(i, j)
                                            .route_vertices(a, b, c + vertex - k) = vertex_buffer(vertex)
                                         Next vertex
    
                                         .route_vertex_cnt(i, j) = k + vertex_cnt_for_2opt2
                                         .route_vertex_cnt(a, b) = c + vertex_cnt_for_2opt1
    
                                         Call EvaluateRoute(solution, i, j)
                                         Call EvaluateRoute(solution, a, b)
    
                                         If (.net_profit > max_net_profit + epsilon) Or ((.net_profit > max_net_profit - epsilon) And (.total_distance < min_total_distance - epsilon)) Then
                                             
                                             max_net_profit = .net_profit
                                             min_total_distance = .total_distance
    
                                             vehicle_type_for_2opt1 = i
                                             vehicle_id_for_2opt1 = j
                                             position_for_2opt1 = k
    
                                             vehicle_type_for_2opt2 = a
                                             vehicle_id_for_2opt2 = b
                                             position_for_2opt2 = c
    
                                             reversal_for_2opt1 = 0
                                             reversal_for_2opt2 = 0
    
                                             vehicle_type_to_swap1 = -1
                                             vehicle_type_to_relocate1 = -1
                                         End If
    
                                         'revert route i,j
    
                                         midpoint_for_chain_reversal = (.route_vertex_cnt(i, j) - (k + 1)) / 2
    
                                         For vertex = 0 To midpoint_for_chain_reversal
                                            vertex_to_swap = .route_vertices(i, j, k + 1 + vertex)
                                            .route_vertices(i, j, k + 1 + vertex) = .route_vertices(i, j, .route_vertex_cnt(i, j) - vertex)
                                            .route_vertices(i, j, .route_vertex_cnt(i, j) - vertex) = vertex_to_swap
                                         Next vertex
    
                                         Call EvaluateRoute(solution, i, j)
    
                                         If (.net_profit > max_net_profit + epsilon) Or ((.net_profit > max_net_profit - epsilon) And (.total_distance < min_total_distance - epsilon)) Then
                                             
                                             max_net_profit = .net_profit
                                             min_total_distance = .total_distance
    
                                             vehicle_type_for_2opt1 = i
                                             vehicle_id_for_2opt1 = j
                                             position_for_2opt1 = k
    
                                             vehicle_type_for_2opt2 = a
                                             vehicle_id_for_2opt2 = b
                                             position_for_2opt2 = c
    
                                             reversal_for_2opt1 = 1
                                             reversal_for_2opt2 = 0
    
                                             vehicle_type_to_swap1 = -1
                                             vehicle_type_to_relocate1 = -1
                                         End If
    
                                         'revert route a,b
    
                                         midpoint_for_chain_reversal = (.route_vertex_cnt(a, b) - (c + 1)) / 2
    
                                         For vertex = 0 To midpoint_for_chain_reversal
                                            vertex_to_swap = .route_vertices(a, b, c + 1 + vertex)
                                            .route_vertices(a, b, c + 1 + vertex) = .route_vertices(a, b, .route_vertex_cnt(a, b) - vertex)
                                            .route_vertices(a, b, .route_vertex_cnt(a, b) - vertex) = vertex_to_swap
                                         Next vertex
    
                                         Call EvaluateRoute(solution, a, b)
    
                                         If (.net_profit > max_net_profit + epsilon) Or ((.net_profit > max_net_profit - epsilon) And (.total_distance < min_total_distance - epsilon)) Then
                                             
                                             max_net_profit = .net_profit
                                             min_total_distance = .total_distance
    
                                             vehicle_type_for_2opt1 = i
                                             vehicle_id_for_2opt1 = j
                                             position_for_2opt1 = k
    
                                             vehicle_type_for_2opt2 = a
                                             vehicle_id_for_2opt2 = b
                                             position_for_2opt2 = c
    
                                             reversal_for_2opt1 = 1
                                             reversal_for_2opt2 = 1
    
                                             vehicle_type_to_swap1 = -1
                                             vehicle_type_to_relocate1 = -1
                                         End If
    
                                         'revert route i,j again
    
                                         midpoint_for_chain_reversal = (.route_vertex_cnt(i, j) - (k + 1)) / 2
    
                                         For vertex = 0 To midpoint_for_chain_reversal
                                            vertex_to_swap = .route_vertices(i, j, k + 1 + vertex)
                                            .route_vertices(i, j, k + 1 + vertex) = .route_vertices(i, j, .route_vertex_cnt(i, j) - vertex)
                                            .route_vertices(i, j, .route_vertex_cnt(i, j) - vertex) = vertex_to_swap
                                         Next vertex
    
                                         Call EvaluateRoute(solution, i, j)
    
                                         If (.net_profit > max_net_profit + epsilon) Or ((.net_profit > max_net_profit - epsilon) And (.total_distance < min_total_distance - epsilon)) Then
                                         
                                             max_net_profit = .net_profit
                                             min_total_distance = .total_distance
    
                                             vehicle_type_for_2opt1 = i
                                             vehicle_id_for_2opt1 = j
                                             position_for_2opt1 = k
    
                                             vehicle_type_for_2opt2 = a
                                             vehicle_id_for_2opt2 = b
                                             position_for_2opt2 = c
    
                                             reversal_for_2opt1 = 0
                                             reversal_for_2opt2 = 1
    
                                             vehicle_type_to_swap1 = -1
                                             vehicle_type_to_relocate1 = -1
                                         End If
    
                                         'revert route a,b again
    
                                         midpoint_for_chain_reversal = (.route_vertex_cnt(a, b) - (c + 1)) / 2
    
                                         For vertex = 0 To midpoint_for_chain_reversal
                                            vertex_to_swap = .route_vertices(a, b, c + 1 + vertex)
                                            .route_vertices(a, b, c + 1 + vertex) = .route_vertices(a, b, .route_vertex_cnt(a, b) - vertex)
                                            .route_vertices(a, b, .route_vertex_cnt(a, b) - vertex) = vertex_to_swap
                                         Next vertex
    
                                         'Call EvaluateRoute(solution, a, b)
    
                                         vertex_cnt_for_2opt1 = .route_vertex_cnt(i, j) - k
                                         vertex_cnt_for_2opt2 = .route_vertex_cnt(a, b) - c
    
                                         For vertex = k + 1 To .route_vertex_cnt(i, j)
                                            vertex_buffer(vertex) = .route_vertices(i, j, vertex)
                                         Next vertex
    
                                         For vertex = c + 1 To .route_vertex_cnt(a, b)
                                            .route_vertices(i, j, k + vertex - c) = .route_vertices(a, b, vertex)
                                         Next vertex
    
                                         For vertex = k + 1 To .route_vertex_cnt(i, j)
                                            .route_vertices(a, b, c + vertex - k) = vertex_buffer(vertex)
                                         Next vertex
    
                                         .route_vertex_cnt(i, j) = k + vertex_cnt_for_2opt2
                                         .route_vertex_cnt(a, b) = c + vertex_cnt_for_2opt1
    
                                         Call EvaluateRoute(solution, i, j)
                                         Call EvaluateRoute(solution, a, b)
    
                                    Next c
                                Next k
                            End If
                        Next b
                    Next a
                 Next j
             Next i
    
             'chain reversal (2-opt on a single route)
    
             vehicle_type_for_chain_reversal = -1
    
             For i = 1 To vehicle_type_list.num_vehicle_types
                 For j = 1 To vehicle_type_list.vehicle_types(i).number_available
                     For k = 1 To .route_vertex_cnt(i, j) - 3
                         For c = k + 3 To .route_vertex_cnt(i, j)
    
                            midpoint_for_chain_reversal = (c - k) / 2
    
                            For vertex = 0 To midpoint_for_chain_reversal
                               vertex_to_swap = .route_vertices(i, j, k + vertex)
                               .route_vertices(i, j, k + vertex) = .route_vertices(i, j, c - vertex)
                               .route_vertices(i, j, c - vertex) = vertex_to_swap
                            Next vertex
    
                            Call EvaluateRoute(solution, i, j)
    
                            If (.net_profit > max_net_profit + epsilon) Or ((.net_profit > max_net_profit - epsilon) And (.total_distance < min_total_distance - epsilon)) Then
                                
                                max_net_profit = .net_profit
                                min_total_distance = .total_distance
    
                                vehicle_type_for_chain_reversal = i
                                vehicle_id_for_chain_reversal = j
                                position_for_chain_reversal1 = k
                                position_for_chain_reversal2 = c
    
                                vehicle_type_to_swap1 = -1
                                vehicle_type_to_relocate1 = -1
                                vehicle_type_for_2opt1 = -1
                            End If
    
                            For vertex = 0 To midpoint_for_chain_reversal
                               vertex_to_swap = .route_vertices(i, j, k + vertex)
                               .route_vertices(i, j, k + vertex) = .route_vertices(i, j, c - vertex)
                               .route_vertices(i, j, c - vertex) = vertex_to_swap
                            Next vertex
    
                            Call EvaluateRoute(solution, i, j)
    
                        Next c
                     Next k
                 Next j
             Next i
             
             If vehicle_type_to_swap1 <> -1 Then
    
                 vertex_to_swap = .route_vertices(vehicle_type_to_swap1, vehicle_id_to_swap1, position_to_swap1)
                 .route_vertices(vehicle_type_to_swap1, vehicle_id_to_swap1, position_to_swap1) = .route_vertices(vehicle_type_to_swap2, vehicle_id_to_swap2, position_to_swap2)
                 .route_vertices(vehicle_type_to_swap2, vehicle_id_to_swap2, position_to_swap2) = vertex_to_swap
    
                 Call EvaluateRoute(solution, vehicle_type_to_swap1, vehicle_id_to_swap1)
                 Call EvaluateRoute(solution, vehicle_type_to_swap2, vehicle_id_to_swap2)
                 
                 'MsgBox "After swapping: " & solution.net_profit & " " & solution.feasible
             End If
    
             If vehicle_type_to_relocate1 <> -1 Then
                 vertex = .route_vertices(vehicle_type_to_relocate1, vehicle_id_to_relocate1, position_to_relocate1)
    
                 Call RemoveVertex(solution, vehicle_type_to_relocate1, vehicle_id_to_relocate1, position_to_relocate1)
                 Call AddVertex(solution, vertex, vehicle_type_to_relocate2, vehicle_id_to_relocate2, position_to_relocate2)
                 
                 'MsgBox "After relocating: " & solution.net_profit & " " & solution.feasible
             End If
             
             If vehicle_type_for_2opt1 <> -1 Then
    
                vertex_cnt_for_2opt1 = .route_vertex_cnt(vehicle_type_for_2opt1, vehicle_id_for_2opt1) - position_for_2opt1
                vertex_cnt_for_2opt2 = .route_vertex_cnt(vehicle_type_for_2opt2, vehicle_id_for_2opt2) - position_for_2opt2
    
                For vertex = position_for_2opt1 + 1 To .route_vertex_cnt(vehicle_type_for_2opt1, vehicle_id_for_2opt1)
                   vertex_buffer(vertex) = .route_vertices(vehicle_type_for_2opt1, vehicle_id_for_2opt1, vertex)
                Next vertex
    
                For vertex = position_for_2opt2 + 1 To .route_vertex_cnt(vehicle_type_for_2opt2, vehicle_id_for_2opt2)
                   .route_vertices(vehicle_type_for_2opt1, vehicle_id_for_2opt1, position_for_2opt1 + vertex - position_for_2opt2) = .route_vertices(vehicle_type_for_2opt2, vehicle_id_for_2opt2, vertex)
                Next vertex
    
                For vertex = position_for_2opt1 + 1 To .route_vertex_cnt(vehicle_type_for_2opt1, vehicle_id_for_2opt1)
                   .route_vertices(vehicle_type_for_2opt2, vehicle_id_for_2opt2, position_for_2opt2 + vertex - position_for_2opt1) = vertex_buffer(vertex)
                Next vertex
    
                .route_vertex_cnt(vehicle_type_for_2opt1, vehicle_id_for_2opt1) = position_for_2opt1 + vertex_cnt_for_2opt2
                .route_vertex_cnt(vehicle_type_for_2opt2, vehicle_id_for_2opt2) = position_for_2opt2 + vertex_cnt_for_2opt1
    
                If reversal_for_2opt1 = 1 Then
    
                    i = vehicle_type_for_2opt1
                    j = vehicle_id_for_2opt1
                    k = position_for_2opt1
    
                    midpoint_for_chain_reversal = (.route_vertex_cnt(i, j) - (k + 1)) / 2
    
                    For vertex = 0 To midpoint_for_chain_reversal
                       vertex_to_swap = .route_vertices(i, j, k + 1 + vertex)
                       .route_vertices(i, j, k + 1 + vertex) = .route_vertices(i, j, .route_vertex_cnt(i, j) - vertex)
                       .route_vertices(i, j, .route_vertex_cnt(i, j) - vertex) = vertex_to_swap
                    Next vertex
                End If
    
                If reversal_for_2opt2 = 1 Then
    
                    a = vehicle_type_for_2opt2
                    b = vehicle_id_for_2opt2
                    c = position_for_2opt2
    
                    midpoint_for_chain_reversal = (.route_vertex_cnt(a, b) - (c + 1)) / 2
    
                    For vertex = 0 To midpoint_for_chain_reversal
                       vertex_to_swap = .route_vertices(a, b, c + 1 + vertex)
                       .route_vertices(a, b, c + 1 + vertex) = .route_vertices(a, b, .route_vertex_cnt(a, b) - vertex)
                       .route_vertices(a, b, .route_vertex_cnt(a, b) - vertex) = vertex_to_swap
                    Next vertex
                End If
    
                Call EvaluateRoute(solution, vehicle_type_for_2opt1, vehicle_id_for_2opt1)
                Call EvaluateRoute(solution, vehicle_type_for_2opt2, vehicle_id_for_2opt2)
    
                 'MsgBox "2-opt with reversals: " & reversal_for_2opt1 & " " & reversal_for_2opt2
                 'MsgBox "After 2-opt: " & solution.net_profit & " " & solution.feasible
             End If
    
             If vehicle_type_for_chain_reversal <> -1 Then
    
                midpoint_for_chain_reversal = (position_for_chain_reversal2 - position_for_chain_reversal1) / 2
    
                For vertex = 0 To midpoint_for_chain_reversal
                   vertex_to_swap = .route_vertices(vehicle_type_for_chain_reversal, vehicle_id_for_chain_reversal, position_for_chain_reversal1 + vertex)
                   .route_vertices(vehicle_type_for_chain_reversal, vehicle_id_for_chain_reversal, position_for_chain_reversal1 + vertex) = .route_vertices(vehicle_type_for_chain_reversal, vehicle_id_for_chain_reversal, position_for_chain_reversal2 - vertex)
                   .route_vertices(vehicle_type_for_chain_reversal, vehicle_id_for_chain_reversal, position_for_chain_reversal2 - vertex) = vertex_to_swap
                Next vertex
    
                Call EvaluateRoute(solution, vehicle_type_for_chain_reversal, vehicle_id_for_chain_reversal)
    
                'MsgBox "After chain reversal: " & solution.net_profit & " " & solution.feasible
             End If
    
        End With

    Loop While (vehicle_type_to_swap1 <> -1) Or (vehicle_type_to_relocate1 <> -1) Or (vehicle_type_for_2opt1 <> -1) Or (vehicle_type_for_chain_reversal <> -1)

    Call EvaluateSolution(solution)

End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Const VRP_TAG = "VRPSolverXla"
Private Const VRP_TOOLS_MENU_ID As Long = 30007&
Friend Sub Workbook_Activate()
    
    Dim WorksheetExists As Boolean
    WorksheetExists = CheckWorksheetExistence("VRP Solver Console")
    
    If WorksheetExists = False Then
        Call SetupConsoleWorksheet
    End If
    
    ThisWorkbook.Worksheets("VRP Solver Console").Activate
    
    Application.DefaultFilePath = CStr(Application.ActiveWorkbook.Path)
    
    'From http://www.cpearson.com/excel/createaddinsamplecode.aspx
    
    DeleteControls
    
    Dim ToolsMenu As Office.CommandBarControl
    Dim ToolsMenuItem As Office.CommandBarControl
    Dim ToolsMenuControl As Office.CommandBarControl
    
    Set ToolsMenu = Application.CommandBars.FindControl(ID:=VRP_TOOLS_MENU_ID)
    If ToolsMenu Is Nothing Then
        MsgBox "Unable to access Tools menu.", vbOKOnly
        Exit Sub
    End If
    
    Set ToolsMenuItem = ToolsMenu.Controls.Add(Type:=msoControlPopup, temporary:=True)
    If ToolsMenuItem Is Nothing Then
        MsgBox "Unable to add item to the Tools menu.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuItem
        .Caption = "&VRP Spreadsheet Solver"
        .BeginGroup = True
        .Tag = VRP_TAG
    End With
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "0. Optional - Reset the workbook"
        .OnAction = "'" & ActiveWorkbook.Name & "'!ResetWorkbook"
        .Tag = VRP_TAG
    End With
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "1.1 Setup Locations Worksheet"
        .OnAction = "'" & ActiveWorkbook.Name & "'!SetupLocationsWorksheet"
        .Tag = VRP_TAG
    End With
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "1.2 Optional - Populate Lat/Lon using addresses"
        .OnAction = "'" & ActiveWorkbook.Name & "'!PopulateLatitudeAndLongitude"
        .Tag = VRP_TAG
    End With
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "1.3 Optional - Sort locations alphabetically"
        .OnAction = "'" & ActiveWorkbook.Name & "'!SortLocations"
        .Tag = VRP_TAG
    End With
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "2.1 Setup Distances Worksheet"
        .OnAction = "'" & ActiveWorkbook.Name & "'!SetupDistancesWorksheet"
        .Tag = VRP_TAG
    End With
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "2.2 Optional - Populate Distances Worksheet"
        .OnAction = "'" & ActiveWorkbook.Name & "'!PopulateDistances"
        .Tag = VRP_TAG
    End With
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "3. Setup Vehicles Worksheet"
        .OnAction = "'" & ActiveWorkbook.Name & "'!SetupVehiclesWorksheet"
        .Tag = VRP_TAG
    End With
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "4. Setup Solution Worksheet"
        .OnAction = "'" & ActiveWorkbook.Name & "'!SetupSolutionWorksheet"
        .Tag = VRP_TAG
    End With
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "5. Optional - Setup Visualization Worksheet"
        .OnAction = "'" & ActiveWorkbook.Name & "'!SetupVisualizationWorksheet"
        .Tag = VRP_TAG
    End With
       
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "6.1 Engage VRP Spreadsheet Solver"
        .OnAction = "'" & ActiveWorkbook.Name & "'!VRP_Solver"
        .Tag = VRP_TAG
    End With
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "6.2 Optional - Feasibility Check"
        .OnAction = "'" & ActiveWorkbook.Name & "'!FeasibilityCheckDataAndSolution"
        .Tag = VRP_TAG
    End With
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "About"
        .OnAction = "'" & ActiveWorkbook.Name & "'!About"
        .Tag = VRP_TAG
    End With
    
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    DeleteControls
End Sub

Private Sub DeleteControls()

Dim Ctrl As Office.CommandBarControl

On Error Resume Next
Set Ctrl = Application.CommandBars.FindControl(Tag:=VRP_TAG)

Do Until Ctrl Is Nothing
    Ctrl.Delete
    Set Ctrl = Application.CommandBars.FindControl(Tag:=VRP_TAG)
Loop

End Sub
Private Sub Workbook_Deactivate()
    DeleteControls
End Sub

' InQuest injected base64 decoded content
' z{bj[
' ZrH+

INQUEST-PP=macro
