Attribute VB_Name = "AddBulletForm"
Attribute VB_Base = "0{CA3395F0-9B0A-4DDB-A703-1C36DF788141}{3515BD8E-C0A3-4D3A-9CB9-ABE55533D4AE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub AddBulletCancelButton_Click()
  AddBulletForm.hide
End Sub

Private Sub BulIncrTextbox_Change()
 With AddBulletForm.BulIncrTextbox
  If Not IsNumeric(.Value) And Left(.Value, 1) <> "." Then
    MsgBox "ERROR. Non numeric value"
    .Value = 0.7
  End If
 End With
End Sub

Private Sub BulletLevelOption1_Click()
  ChangeBulletLevel (1)
End Sub

Private Sub BulletLevelOption2_Click()
  ChangeBulletLevel (2)
End Sub

Private Sub BulletLevelOption4_Click()
  ChangeBulletLevel (4)
End Sub

Private Sub BulletLevetOption3_Click()
   ChangeBulletLevel (3)
End Sub

Private Sub GoAddBullets_Click()
  GO_AddBullets (1)
End Sub

Private Sub TypeofBulletFrame_Click()

End Sub

Private Sub UserForm_Click()

End Sub

Private Sub WingdingListbox_Click()
  WingdingSelect (1)
End Sub
Attribute VB_Name = "AddNumbersForm"
Attribute VB_Base = "0{FAF01B4F-F5C7-4DF3-B82B-EDFDF05494B1}{624D11D0-E178-4246-B856-0A3CF2751463}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub AvailableStylesButton_Click()
  ShowAvailableStyles (1)
End Sub

Private Sub CancelNumberingButton_Click()
  AddNumbersForm.hide
End Sub

Private Sub GoNumberingButton_Click()
  ExecuteNumbering (1)
End Sub

Private Sub Level1_Click()
  ChangeNumberLevel (1)
End Sub

Private Sub Level2_Click()
  ChangeNumberLevel (2)
End Sub

Private Sub Level3_Click()
  ChangeNumberLevel (3)
End Sub

Private Sub Level4_Click()
  ChangeNumberLevel (4)
End Sub
Private Sub NumIncrTextbox_Change()
 With AddNumbersForm.NumIncrTextbox
  If Not IsNumeric(.Value) And Left(.Value, 1) <> "." Then
    MsgBox "ERROR. Non numeric value"
    .Value = 0.7
  End If
 End With
End Sub

Private Sub RemoveNumberingButton_Click()
  RemoveNumbering (1)
End Sub

Private Sub StyleListbox_Click()
  changecurrentstyle (1)
End Sub

Attribute VB_Name = "AddStylesForm"
Attribute VB_Base = "0{ED49E5F0-BA81-4435-AFC8-40DCE027C582}{55557EB0-3EEF-4CCA-AED9-C0ED3A6F6D31}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


Private Sub NumberingToStyleButton_Click()
  addNumberingToStyle (1)
End Sub

Private Sub RemoveStyleNumberingButton_Click()
  RemoveOutline (1)
End Sub

Private Sub StyleListbox_Click()
  setNumberingStyle (AddStylesForm)
End Sub


Attribute VB_Name = "BulNumForm"
Attribute VB_Base = "0{40F23F56-0971-48D5-88F1-9877816D640A}{E5F2F249-F796-42C9-9550-7406552D54C6}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub AddBulletsButton_Click()
  AddBullets (1)
End Sub

Private Sub AddnumbersButton_Click()
  addNumbers (1)
End Sub

Private Sub CommandButton5_Click()
  deleteOutlineNumbering (1)
End Sub

Private Sub CommandButton7_Click()
  ShowLists (1)
End Sub

Private Sub AutoBulletsCheckbox_Click()
  If inhibitSW Then Exit Sub
  Options.AutoFormatAsYouTypeApplyBulletedLists = Not Options.AutoFormatAsYouTypeApplyBulletedLists
  BulNumForm.AutoBulletsCheckbox.Value = Options.AutoFormatAsYouTypeApplyBulletedLists
End Sub

Private Sub AutoNumCheckbox_Click()
  If inhibitSW Then Exit Sub
  Options.AutoFormatAsYouTypeApplyNumberedLists = Not Options.AutoFormatAsYouTypeApplyNumberedLists
  BulNumForm.AutoNumCheckbox.Value = Options.AutoFormatAsYouTypeApplyNumberedLists
End Sub

Private Sub Cancel2Button_Click()
  ShowlistsForm.hide
  UnloadBulNumForm (1)
End Sub

Private Sub CancelButton_Click()
  ShowlistsForm.hide
  UnloadBulNumForm (1)
End Sub

Private Sub CaptionButton_Click()
   goCaptionNumbering (1)
End Sub

Private Sub Lbutton_Click()
  Call ShowTemplateNumbering(hpoints, vpoints, False)
End Sub

Private Sub ConvertManualButton_Click()
  ConvertManual (1)
End Sub

Private Sub CopOutButton_Click()
  CopOut (1)
End Sub

Private Sub DisplayListsButton_Click()
  ShowListsMenu (1)
End Sub

Private Sub Help2Button_Click()
  HelpWrite (2)
End Sub

Private Sub HelpButton_Click()
  HelpWrite (1)
End Sub

Private Sub HighlightListtButton_Click()
  highlightListParas (wdRed)
End Sub

Private Sub RemoveHighlightButton_Click()
  highlightListParas (wdNoHighlight)
End Sub

Private Sub MoreButton_Click()
  toggleHeight (1)
End Sub

Private Sub OutlineNumberButton_Click()
  addOutlineNumbering (1)
End Sub

Private Sub QuickFixButton_Click()
  quickFix (1)
End Sub

Private Sub RemoveBulletsButton_Click()
  ShowRemoveBulNums (2)
End Sub

Private Sub RemoveManualButton_Click()
  ConvertManual (0)
End Sub

Private Sub RemoveNumbsButton_Click()
  ShowRemoveBulNums (3)
End Sub

Private Sub RemoveOutlineButton_Click()
  ShowRemoveBulNums (4)
  'deleteOutlineNumbering (1)
End Sub

Private Sub ScorchedEarthButton_Click()
  scorchedEarth (1)
End Sub

Private Sub SEQFieldsButton_Click()
  ShowSEQForm (1)
End Sub
Attribute VB_Name = "BulNumModule"
Option Explicit
Public vpoints As Single
Public hpoints As Single
Dim MasterRange As Range
Dim ViewHold As Long
Public msgReturn As Long

Sub Go_BULNUM()
  ActiveDocument.TrackRevisions = False
  Call GiveScreenPoints(hpoints, vpoints)
  With ActiveWindow
    If .View.SplitSpecial = wdPaneNone Then
        ViewHold = .ActivePane.View.Type
        .ActivePane.View.Type = wdNormalView
    Else
        ViewHold = .View.Type
        .View.Type = wdNormalView
    End If
    If .StyleAreaWidth = 0 Then .StyleAreaWidth = 50
  End With
  
  With BulNumForm
    .StartUpPosition = 0
    .Top = 0
    .Left = hpoints - .Width - 6
    inhibitSW = True
    .QuickFixButton.Caption = "Quick Fix. Re-apply numbered styles."
    .CopOutButton.Caption = "Convert numbering to text"
    .ScorchedEarthButton.Caption = "Remove numbering and start again"
    .DisplayListsButton.Caption = "Show Lists and Numbering"
    .ListCountLabel.Caption = ActiveDocument.ListTemplates.Count & " lists templates, " & _
     ActiveDocument.Lists.Count & " lists in document"
    .ConvertManualButton.Caption = "Replace manual with style numbering."
    .AutoBulletsCheckbox.Value = Options.AutoFormatAsYouTypeApplyBulletedLists
    .AutoNumCheckbox.Value = Options.AutoFormatAsYouTypeApplyNumberedLists
    inhibitSW = False
   ' .Height = 222
    .Height = 596
     toggleHeight (1)
    .Show
  End With
  
  With AddStylesForm
     .StartUpPosition = 0
    .Top = 90
    .Left = hpoints - .Width - 6
     .Btype1.Caption = "1,2,3..."
     .Btype3.Caption = "I,II,...IV"
     .Btype2.Caption = "i,ii,...iv"
     .Btype5.Caption = "A,B,C..."
     .Btype4.Caption = "a,b,c,..."
     .Btype6.Caption = "One, Two,..."
     
  End With
  
  If ActiveWindow.StyleAreaWidth = 0 Then ActiveWindow.StyleAreaWidth = 900
  
End Sub

Sub toggleHeight(n)
  With BulNumForm
    If .Height < 550 Then
      .Height = 596
      .MoreButton.Caption = "<< Less"
    Else
      .Height = 222
      .MoreButton.Caption = "More >>"
    End If
  End With
End Sub
Sub UnloadBulNumForm(n As Long)
 Unload BulNumForm
 With ActiveWindow
    If .View.SplitSpecial = wdPaneNone Then
        .ActivePane.View.Type = ViewHold
    Else
        .View.Type = ViewHold
    End If
  End With
End Sub

Sub AddBullets(n As Long)
Dim i As Long
Dim j As Long
Dim s As Long
  With AddBulletForm
    .Btype1.Caption = ChrW(61548) & " dot"
    .Btype2.Caption = ChrW(61550) & " square"
    .Btype3.Caption = ChrW(61549) & " circle"
    .Btype4.Caption = ChrW(61615) & " star"
    .Btype5.Caption = ChrW(61595)
    .Btype6.Caption = "  Picture"
    .WingdingListbox.Clear
    For i = 61590 To 61689
      .WingdingListbox.AddItem ChrW(i)
    Next i
    .StartUpPosition = 0
    .Top = 85
    .Left = hpoints - .Width - 50
    .BulletLevelOption1.Value = True
    .CurrentStyleTextbox.Value = Selection.Paragraphs(1).Style 'Range.Style.NameLocal
    
     j = findTemplate
  
    If j > 0 Then
      With ActiveDocument.ListTemplates(j).ListLevels(1)
        AddBulletForm.LeftIndentValue = Format(PointsToCentimeters(.NumberPosition), "#0.0")
        AddBulletForm.TextIndentValue = Format(PointsToCentimeters(.TextPosition), "#0.0")
        AddBulletForm.BulletOrFontSize.Value = Format(.Font.Size / Selection.Paragraphs(1).Range.Font.Size, "0.#0")
        s = .TrailingCharacter
        Select Case s
          Case wdTrailingSpace
            AddBulletForm.TrailingSpaceOption = True
          Case wdTrailingTab
            AddBulletForm.TrailingTabOption = True
          Case Else
            AddBulletForm.TrailingNoneOption = True
        End Select

      End With
    End If
    
    .Show
  End With
End Sub
Sub GO_AddBullets(n As Long)
Dim s As String
Dim Wformat As String
Dim leftMarg As Single, txtPos As Single, BulletFontSize As Single
Dim rr As Range
Dim aRange As Range
Dim promptSw As Boolean
Dim j As Long
Dim k As Long
Dim m As Long
Dim a As Single
Dim trailingChar As Long
  With AddBulletForm
    If .CurrentStyleTextbox.Value = "Normal" Then
      If Showmsg2("WARNING. You are about to make the Normal style bulleted" & vbCrLf & _
        "Do you want to continue?", vbYesNo) = vbNo Then Exit Sub
    End If
    If CheckParasForOutline Then
    If Showmsg2("WARNING. The selection contains numbered paragraph styles." & _
       "If you continue you will change these styles to bulleted." & vbCrLf & _
       "Do you want to continue?", vbYesNo) = vbNo Then Exit Sub
    End If
    
    If Not IsNumeric(.LeftIndentValue.Value) Then
       showMsg "Error in left indent"
       Exit Sub
    Else
       leftMarg = Val(.LeftIndentValue.Value)
    End If
    If Not IsNumeric(.TextIndentValue.Value) Then
       showMsg "Error in text indent"
       Exit Sub
    Else
       txtPos = Val(.TextIndentValue.Value)
    End If
    If Not IsNumeric(.BulletOrFontSize.Value) Then
       showMsg "Error in font size factor"
       Exit Sub
    Else
       BulletFontSize = .BulletOrFontSize.Value
       If BulletFontSize >= 0 Then
         Set rr = Selection.Range
         rr.End = rr.Start
         BulletFontSize = rr.Font.Size * BulletFontSize ' size of bullet
         '.BulletorFontSize.Value = BulletFontSize
       End If
    End If
    
    If NotAStyle(.CurrentStyleTextbox.Value) Then
      showMsg .CurrentStyleTextbox.Value & " is not a valid style"
      Exit Sub
    End If
    
  End With
  
  getMasterRange
  Wformat = "Wingdings"
  s = "?"
  With AddBulletForm
    If .Btype1.Value Then s = .Btype1.Caption
    If .Btype2.Value Then s = .Btype2.Caption
    If .Btype3.Value Then s = .Btype3.Caption
    If .Btype4.Value Then s = .Btype4.Caption
    If .Btype5.Value Then
      s = .Btype5.Caption
      Wformat = "Wingdings 2"
    End If
    If .Btype6.Value Then
     s = getpicfile
     If s = "" Then Exit Sub
    End If
    If .TrailingNoneOption Then trailingChar = wdTrailingNone
    If .TrailingSpaceOption Then trailingChar = wdTrailingSpace
    If .TrailingTabOption Then trailingChar = wdTrailingTab
  End With
  
'***************************************************************
  
  With ListGalleries(wdBulletGallery).ListTemplates(6).ListLevels(1)
    If AddBulletForm.Btype6.Value Then
      .ApplyPictureBullet FileName:=s
      .NumberStyle = wdListNumberStylePictureBullet
    Else
      .NumberFormat = Left(s, 1)
      .TrailingCharacter = trailingChar 'wdTrailingTab
      .NumberStyle = wdListNumberStyleBullet
    End If
  End With
  Set aRange = Selection.Range
  promptSw = AddBulletForm.PromptAllOption.Value
  k = Selection.Paragraphs.Count
  j = 0
  Do
    j = j + 1
    If promptSw Then
      aRange.Paragraphs(j).Range.Select
      m = Showmsg2("Do you want to bullet this paragraph", vbYesNoCancel)
      If m = vbCancel Then
        aRange.Select
        Exit Sub
      End If
      If m = vbNo Then GoTo nextPara
    End If
    ' ************ if picture ???? ***************
    Call apply_Bullets(wdBulletGallery, s, _
      wdListNumberStyleBullet, 6, Wformat, wdBulletGallery, 1, 0, _
      leftMarg, txtPos, BulletFontSize, False, trailingChar)
nextPara:
  Loop Until j >= k
  aRange.Select
End Sub

Function getpicfile() As String
  getpicfile = ""
End Function

Sub ChangeBulletLevel(n As Long)
Dim a As Single
  With AddBulletForm
  a = Val(.BulIncrTextbox)
    Select Case n
    Case 1
      .LeftIndentValue = 0
      .TextIndentValue = a
  '    .BulletorFontSize.Value = 0.75
    Case 2
      .LeftIndentValue = a
      .TextIndentValue = a * 2
  '    .BulletorFontSize.Value = 0.75
    Case 3
      .LeftIndentValue = a * 2
      .TextIndentValue = a * 3
  '    .BulletorFontSize.Value = 0.75
    Case 4
      .LeftIndentValue = a * 3
      .TextIndentValue = a * 4
  '    .BulletorFontSize.Value = 0.75
    End Select
  End With
End Sub
Sub ShowRemoveBulNums(n As Long) ' n=2 bulleting, 3=numbering, 4=outline
  With RemoveBulletForm
    .StartUpPosition = 0
    .Top = 70
    .Left = hpoints - .Width - 12
    .StyleToRemove.Caption = Selection.Range.Paragraphs(1).Style.NameLocal
    Select Case n
      Case 2
        .Caption = "Remove bullets"
      Case 3
        .Caption = "Remove numbering"
      Case 4
        .Caption = "Remove outline numbering"
    End Select
      .Show
    End With
End Sub
Function getParaNumbType(apara As Paragraph) As Long
Dim L As Long
' 0=no bullet, numbering or outline
' 1=listnum fields in body of para
' 2=listbullet
' 3=simple numeric list
' 4=outline list
' 5=mixed list
' 6=picture bulleted
' BUG. a paragraph that has no list numbering applied returns 1  whereas it really ought to return nothing or 0, or 10, or 9999
' Distinguish unnumbered paragraphs from paragraphs which genuinely have a List Level of 1
  L = apara.Range.ListFormat.ListType
  If L = 1 Then
    If Selection.Paragraphs(1).Range.ListParagraphs.Count <> 1 Then L = 0
  End If
  getParaNumbType = L
End Function
Sub RemoveBullNums(n As Long)
Dim aRange As Range
Dim apara As Paragraph
Dim promptSw As Boolean
Dim j As Long
Dim k As Long
Dim m As Long
Dim bulnumCode As Long
Dim msgText As String
Dim Lcount As Long
Dim sty As String
  Set aRange = Selection.Range
  promptSw = RemoveBulletForm.PromptAllOption.Value
  k = Selection.Paragraphs.Count
  Select Case RemoveBulletForm.Caption
    Case "Remove bullets"
      bulnumCode = 2
      msgText = "bullet"
    Case "Remove numbering"
      bulnumCode = 3
      msgText = "numbering"
    Case "Remove outline"
      bulnumCode = 4
      msgText = "outline numbering"
    Case Else
      bulnumCode = 9999
      msgText = "????"
  End Select
  With RemoveBulletForm
    If .AlsoRemoveFromStyle.Value Then
      sty = .StyleToRemove.Caption
      If aRange.Paragraphs(1).Range.ListFormat.ListType = 0 Then
        showMsg "Paragraph has no numbering or bulleting"
         RemoveBulletForm.hide
        Exit Sub
      End If
      If getParaNumbType(aRange.Paragraphs(1)) = 4 Then
        If MsgBox("Remove numbering/bulleting from style " & sty & vbCrLf & _
          "It will remove the style from the list, if there are" & vbCrLf & _
          "other styles in the list they will be given a new list number." & vbCrLf & _
          "Do you want to continue?", vbYesNo) = vbNo Then Exit Sub
      End If
      
      ActiveDocument.Styles(sty).LinkToListTemplate ListTemplate:=Nothing
    End If
  End With
  Lcount = 0
  j = 1
  Do
    Set apara = aRange.Paragraphs(j)
    If Int((j / 20)) * 20 = j Then
      DoEvents
      aRange.Paragraphs(j).Range.Select
    End If
    If getParaNumbType(apara) = bulnumCode Then
      If promptSw Then
        DoEvents
        aRange.Paragraphs(j).Range.Select
        m = Showmsg2("Do you want to remove " & msgText & " from this paragraph", vbYesNoCancel)
        If m = vbCancel Then
          aRange.Select
          Exit Sub
        End If
        If m = vbNo Then GoTo nextPara
      End If
      Selection.Range.ListFormat.RemoveNumbers 'NumberType:=wdNumberAllNumbers
      Lcount = Lcount + 1
    End If
nextPara:
    j = j + 1
  Loop Until j > k
  aRange.Select
'  MsgBox msgText & " removed from" & Str(Lcount) & " paragraphs"
  RemoveBulletForm.hide
End Sub

Private Sub getMasterRange()
  With AddBulletForm
    If .PromptAllOption.Value Then ' selection
      Set MasterRange = Selection.Range
    End If
    If .PromptDontOption.Value Then  ' from here
      Set MasterRange = Selection.Range
      MasterRange.End = ActiveDocument.Range.End
    End If
    If .PromptItemOption.Value Then  ' whole doc
      Set MasterRange = ActiveDocument.Range
    End If
  End With
End Sub

Sub apply_Bullets(galleryType As Long, nFormat As String, _
          BulletorNumberType As Long, TemplateNumber As Integer, FontName As String, _
          GalleryNo As Long, listlevelNo As Long, NumberingStart As Long, _
          leftMarg As Single, txtPos As Single, BulletFontSize As Single, _
          numbRestart As Boolean, trailingChar As Long)
          
  Selection.Range.ListFormat.RemoveNumbers NumberType:=wdNumberAllNumbers ' first remove old setup
    
  With ListGalleries(galleryType).ListTemplates(TemplateNumber).ListLevels(listlevelNo)
    .NumberFormat = Left(nFormat, 1) 'ChrW(61607)
    .TrailingCharacter = trailingChar 'wdTrailingTab
    .NumberStyle = BulletorNumberType 'wdListNumberStyleBullet
    .NumberPosition = CentimetersToPoints(leftMarg)
    .Alignment = wdListLevelAlignLeft
    .TextPosition = CentimetersToPoints(txtPos)
    .TabPosition = CentimetersToPoints(txtPos)
    .ResetOnHigher = 0 'listlevelNo - 1
    .StartAt = NumberingStart
    With .Font
      .Bold = wdUndefined
      .Italic = wdUndefined
      .StrikeThrough = wdUndefined
      .Subscript = wdUndefined
      .Superscript = wdUndefined
      .Shadow = wdUndefined
      .Outline = wdUndefined
      .Emboss = wdUndefined
      .Engrave = wdUndefined
      .AllCaps = wdUndefined
      .Hidden = wdUndefined
      .Underline = wdUndefined
      .Color = wdUndefined
      .Size = BulletFontSize '8
      .Animation = wdUndefined
      .DoubleStrikeThrough = wdUndefined
      .Name = FontName '"Wingdings" ' "arial"
    End With
    .LinkedStyle = AddBulletForm.CurrentStyleTextbox.Value
  End With
    
    ListGalleries(wdBulletGallery).ListTemplates(TemplateNumber).Name = ""
    Selection.Range.ListFormat.ApplyListTemplate ListTemplate:=ListGalleries( _
        GalleryNo).ListTemplates(TemplateNumber), ContinuePreviousList:=False, ApplyTo:= _
        wdListApplyToWholeList, DefaultListBehavior:=wdWord9ListBehavior
   AddBulletForm.hide
End Sub

Sub RemoveNumbering(n As Long)
Dim aStyle As String
  aStyle = AddNumbersForm.CurrentStyleTextbox.Value
  ActiveDocument.Styles(aStyle).LinkToListTemplate ListTemplate:= _
        Nothing
End Sub
Sub ExecuteNumbering(n As Long)
Dim NumbGallry As Long
Dim numbStyle As Long
Dim NumbStart As Long
Dim PrefixText As String
Dim leftMarg As Single, txtPos As Single
Dim BulletFontSize As Single
Dim rr As Range
Dim aRange As Range
Dim aFontName As String
Dim i As Long
Dim j As Long
Dim k As Long
Dim m As Long
Dim promptSw As Boolean
Dim aStyle As String
Dim trailingChar As Long
  With AddNumbersForm
    If Not IsNumeric(.LeftIndentValue.Value) Then
       showMsg "Error in left indent"
       Exit Sub
    Else
       leftMarg = Val(.LeftIndentValue.Value)
    End If
    If Not IsNumeric(.TextIndentValue.Value) Then
       showMsg "Error in text indent"
       Exit Sub
    Else
       txtPos = Val(.TextIndentValue.Value)
    End If
    If Not IsNumeric(.NumberFontSize.Value) Then
       showMsg "Error in font size"
       Exit Sub
    Else
      Set rr = Selection.Range
      rr.End = rr.Start
      aFontName = rr.Font.Name
      BulletFontSize = rr.Font.Size
       If .NumberFontSize.Value <= 0 Then ' default size
         BulletFontSize = rr.Font.Size * 0.75 ' size of first char of range
       Else
         BulletFontSize = BulletFontSize * .NumberFontSize.Value
       End If
    End If
    NumbStart = .NumberStart
    PrefixText = .PrefixTextbox.Value
  
'    If .PromptAllOption.Value Then
'      .RestartAction.Value = False
'    End If
  End With
 
  NumbGallry = wdNumberGallery
 
  With AddNumbersForm
    If .Btype1.Value Then numbStyle = wdListNumberStyleArabic
    If .Btype2.Value Then numbStyle = wdListNumberStyleUppercaseRoman
    If .Btype3.Value Then numbStyle = wdListNumberStyleLowercaseRoman
    If .Btype4.Value Then numbStyle = wdListNumberStyleUppercaseLetter
    If .Btype5.Value Then numbStyle = wdListNumberStyleLowercaseLetter
    If .Btype6.Value Then numbStyle = wdListNumberStyleOrdinalText
    If .Btype7.Value Then numbStyle = wdListNumberStyleCardinalText
    If .TrailingNoneOption Then trailingChar = wdTrailingNone
    If .TrailingSpaceOption Then trailingChar = wdTrailingSpace
    If .TrailingTabOption Then trailingChar = wdTrailingTab
  End With
  i = InStr(PrefixText, "^t")
  Do While i > 0
    PrefixText = Left(PrefixText, i - 1) & Mid(PrefixText, i + 2)
    i = InStr(PrefixText, "^t")
  Loop
  
  Set aRange = Selection.Range

  Call apply_Numbering(PrefixText, numbStyle, _
       aFontName, NumbGallry, 1, NumbStart, leftMarg, _
       txtPos, BulletFontSize, AddNumbersForm.RestartAction.Value, trailingChar)
 
  aRange.Select
  
End Sub
Sub apply_Numbering(nFormat As String, numbStyle As Long, _
          FontName As String, GalleryNo As Long, listlevelNo As Long, NumberingStart As Long, _
          leftMarg As Single, txtPos As Single, NumberFontSize As Single, _
          numbRestart As Boolean, trailingChar As Long)
Dim aStyle As String
  aStyle = AddNumbersForm.CurrentStyleTextbox.Value
  If aStyle = "Normal" Then
    If Showmsg2("Are you sure that you want to attach numbering to the Normal style", vbYesNo) = vbNo Then Exit Sub
  End If
    
  Selection.Range.ListFormat.RemoveNumbers NumberType:=wdNumberAllNumbers ' first remove old setup
  
  ListGalleries(wdNumberGallery).Reset (1)
      
  With ListGalleries(wdNumberGallery).ListTemplates(1).ListLevels(1)
        .NumberFormat = nFormat  '"%1."
        .TrailingCharacter = trailingChar
        .NumberStyle = numbStyle 'wdListNumberStyleArabic
        .NumberPosition = CentimetersToPoints(leftMarg)
        .Alignment = wdListLevelAlignLeft
        .TextPosition = CentimetersToPoints(txtPos + leftMarg)
        .TabPosition = wdUndefined
        .ResetOnHigher = 0 'numbRestart
        .StartAt = NumberingStart

        With .Font
            .Bold = wdUndefined
            .Italic = wdUndefined
            .StrikeThrough = wdUndefined
            .Subscript = wdUndefined
            .Superscript = wdUndefined
            .Shadow = wdUndefined
            .Outline = wdUndefined
            .Emboss = wdUndefined
            .Engrave = wdUndefined
            .AllCaps = wdUndefined
            .Hidden = wdUndefined
            .Underline = wdUndefined
            .Color = wdUndefined
            .Size = NumberFontSize
            .Animation = wdUndefined
            .DoubleStrikeThrough = wdUndefined
            .Name = ""
        End With
        .LinkedStyle = aStyle
  End With
    
  If aStyle = "Normal" Then
    If MsgBox("WARNING. You are about to give numbering to the Normal style." & vbCrLf & _
       "All paragraphs in the document with Normal style will be numbered." & vbCrLf & _
       "Do you want to continue?", vbYesNo) = vbNo Then Exit Sub
  End If
  'ActiveDocument.Styles(aStyle).LinkToListTemplate ListTemplate:=Nothing ' ???? maybe not needed
 
  If CheckParasForOutline Then
    If MsgBox("WARNING. The selection contains one or more outline numbered paragraph styles" & vbCrLf & _
       "If you continue you will change the numbering of these styles and it may" & _
       "upset your document outline numbering." & vbCrLf & _
       "Do you want to continue?", vbYesNo) = vbNo Then Exit Sub
  End If
 
  ActiveDocument.Styles(aStyle).LinkToListTemplate ListTemplate:= _
        ListGalleries(wdNumberGallery).ListTemplates(1), ListLevelNumber:=1 ' ???????????????
        
  Selection.Style = aStyle ' check if already outline numbered
  On Error Resume Next
      Selection.Range.ListFormat.ApplyListTemplateWithLevel _
        ListTemplate:=ListGalleries(wdNumberGallery).ListTemplates(1), _
        ContinuePreviousList:=Not numbRestart, ApplyTo:=wdListApplyToWholeList, _
        DefaultListBehavior:=wdWord10ListBehavior
  AddNumbersForm.hide
End Sub
Function CheckParasForOutline() As Boolean
Dim apara As Paragraph
  CheckParasForOutline = False
  For Each apara In Selection.Paragraphs
    If getParaNumbType(apara) = 4 Then CheckParasForOutline = True
  Next apara
End Function

Sub ChangeNumberLevel(n As Long)
Dim a As Single
  With AddNumbersForm
  a = Val(.NumIncrTextbox)
    Select Case n
    Case 1
      .LeftIndentValue = 0
      .TextIndentValue = a
    Case 2
      .LeftIndentValue = a
      .TextIndentValue = a * 2
    Case 3
      .LeftIndentValue = a * 2
      .TextIndentValue = a * 3
    Case 4
      .LeftIndentValue = a * 3
      .TextIndentValue = a * 4
    End Select
  End With
End Sub

Sub WingdingSelect(n As Long)
  Dim ws As String
  With AddBulletForm.WingdingListbox
    If .ListIndex < 0 Then Exit Sub
    ws = .List(.ListIndex)
  End With
  
  With AddBulletForm.Btype5
    .Font.Name = "Wingdings 2"
    .Caption = ws
    .Value = True
  End With
End Sub

Sub changecurrentstyle(n As Long)
  With AddNumbersForm
    .CurrentStyleTextbox.Value = .StyleListbox.List(.StyleListbox.ListIndex)
  End With
  addNumbers (0)
End Sub

Sub addNumbers(n As Long)
Dim aStyle As String
  With AddNumbersForm
     .StartUpPosition = 0
    .Top = 40
    .Left = hpoints - .Width - 40
     .Btype1.Caption = "1,2,3..."
     .Btype2.Caption = "I,II,...IV"
     .Btype3.Caption = "i,ii,...iv"
     .Btype4.Caption = "A,B,C..."
     .Btype5.Caption = "a,b,c,..."
     .Btype6.Caption = "1st, 2nd,..."
     .Btype7.Caption = "One. Two,..."
     .Level1.Value = True
     .RestartAction.Value = False

     If n = 0 Then
       aStyle = .CurrentStyleTextbox.Value
     Else
        aStyle = Selection.Range.Paragraphs(1).Style
     End If
    .CurrentStyleTextbox.Value = aStyle
    If aStyle = "none" Then Exit Sub
    If Not ActiveDocument.Styles(aStyle).ListTemplate Is Nothing Then
      If ActiveDocument.Styles(aStyle).ListTemplate.OutlineNumbered Then
        .AttachLabel.Caption = "WARNING. STYLE IS ALREADY NUMBERED"
      Else
        .GoNumberingButton.Caption = "Modify style's numbering"
        .AttachLabel.Caption = ""
      End If
    Else
      .GoNumberingButton.Caption = "Attach numbering to style"
      .AttachLabel.Caption = "Will also apply style to selected paragraphs."
    End If
    
    If n <> 0 Then .StyleListbox.Clear
    .Show
  End With
End Sub
Sub ShowAvailableStyles(n As Long)
  Call get_new_style(AddNumbersForm, AddNumbersForm.CurrentStyleTextbox.Value)
End Sub

Function ReadLevelNo() As Long
  ReadLevelNo = 0
  With AddStylesForm
    If .OutlineNumb1.Value Then ReadLevelNo = 1
    If .Outlinenumb2.Value Then ReadLevelNo = 2
    If .OutlineNumb3.Value Then ReadLevelNo = 3
    If .OutlineNumb4.Value Then ReadLevelNo = 4
  End With
End Function

Private Sub deleteOutlineNumbering() ' ***********not used ????************************
Dim pStyle As String
Dim j As Long
  If Selection.Paragraphs.Count > 1 Then
    showMsg "Select only one paragraph for this operation"
    Exit Sub
  End If
  pStyle = Selection.Paragraphs(1).Style
  If ActiveDocument.Styles(pStyle).ListLevelNumber = 0 Then
    showMsg "Style " & pStyle & " is not a numbered style"
    Exit Sub
  End If
  
  Call get_new_style(AddStylesForm, "")
  
  With AddStylesForm
    .CurrentStyleTextbox.Caption = pStyle
  End With
    
  AddStylesForm.Show
  
End Sub
Sub RemoveOutline(n As Long)
Dim pStyle As String

  pStyle = AddStylesForm.CurrentStyleTextbox.Caption
  ActiveDocument.Styles(pStyle).LinkToListTemplate ListTemplate:=Nothing
' With ActiveDocument.Styles(pStyle)
'    .ParagraphFormat.LeftIndent = 0
'    .ParagraphFormat.FirstLineIndent = 0
'    .ParagraphFormat.OutlineLevel = 1
'  End With
End Sub
Sub addOutlineNumbering(n As Long)

Call setupOutlineListbox(hpoints, vpoints)

End Sub

Sub setNumberingStyle(oform As UserForm)
Dim j As Long
' 1 find an empty template
' 2 select the n styles to be outline numbered - in order
' 3 check that selected styles are not already numbered
' 4 ask for numbering style and and text in the numbering
' 5 use existing font
' 6 create
  With oform
    j = .StyleListbox.ListIndex
    .CurrentStyleTextbox.Value = oform.StyleListbox.List(j)
    ' outlinelevel property not available if not outline numbered
    j = ActiveDocument.Styles(.CurrentStyleTextbox.Value).ParagraphFormat.OutlineLevel
    Select Case j
      Case 1
        .OutlineNumb1.Value = True
      Case 2
        .Outlinenumb2.Value = True
      Case 3
        .OutlineNumb3.Value = True
      Case 4
        .OutlineNumb4.Value = True
    End Select
  End With
End Sub

Function get_new_style(oform As UserForm, sty As String) As String
Dim i As Long, j As Long
Dim aform As FormField
Dim Stitem As Style
  j = 1
  With oform 'AddStylesForm, AddNumbersForm
    .StyleListbox.Clear
    .StyleListbox.AddItem "none"
    .StyleListbox.AddItem "Heading 1"
   ' If sty = "Heading 1" Then j = .StyleListbox.ListCount
   ' .StyleListbox.AddItem "Heading 2"
   ' If sty = "Heading 2" Then j = .StyleListbox.ListCount
   ' .StyleListbox.AddItem "Heading 3"
   ' If sty = "Heading 3" Then j = .StyleListbox.ListCount
   ' .StyleListbox.AddItem "Heading 4"
   ' If sty = "Heading 4" Then j = .StyleListbox.ListCount
   ' .StyleListbox.AddItem "Heading 5"
   ' If sty = "Heading 5" Then j = .StyleListbox.ListCount
   '     .StyleListbox.AddItem "Heading 6"
   ' If sty = "Heading 6" Then j = .StyleListbox.ListCount
    
    For Each Stitem In ActiveDocument.Styles
 '     If Stitem.InUse And Stitem <> "Heading 1" And Stitem <> "Heading 2" _
 '     And Stitem.Type = wdStyleTypeParagraph _
 '       And Stitem <> "Heading 3" And Stitem <> "Heading 4" And Stitem <> "Heading 5" And Stitem <> "Heading 6" Then
      If Stitem.InUse And Stitem.Type = wdStyleTypeParagraph Then
        .StyleListbox.AddItem Stitem
        If Stitem = sty Then j = .StyleListbox.ListCount
      End If
    Next Stitem
    'If j < 2 Then j = 2
    .StyleListbox.ListIndex = j - 1
    get_new_style = .StyleListbox.List(j - 1)
  End With
End Function

Sub ShowListsMenu(n As Long)
    With ShowlistsForm
    .StartUpPosition = 0
    .Top = 80
    .Left = hpoints - .Width - 62
    .FixListsButton.Caption = "What is applied to" & vbCrLf & "selected paragraph"
    .Show
  End With
End Sub
Sub executeShowLists(n As Long)
  If n = 1 Then Call goshowLists(hpoints, vpoints)
  If n = 2 Then Call ShowTemplateNumbering(hpoints, vpoints, False)
  If n = 3 Then Call WhatIsInParagraph(1)
End Sub
Sub CopOut(n As Long)
  With ConvertToTextForm
    If Selection.Start = Selection.End Or n = 1 Then
      .ConvertGoButton.Caption = "Convert all document"
    Else
      .ConvertGoButton.Caption = "Convert selection"
    End If
    .StartUpPosition = 0
    .Top = 70
    .Left = hpoints - .Width - 12
    .Show
  End With
End Sub
Sub GOConvert(n As Long) ' convert numbering to text in reverse order
Dim j As Long
Dim jcount As Long
Dim k As Long
Dim m As Long
Dim nP As Long
Dim aRange As Range
Dim bRange As Range
Dim promptSw As Boolean
Dim apara As Paragraph
  With ConvertToTextForm
    If .PromptAllOption Then
      promptSw = True
    Else
      promptSw = False
    End If

    Set bRange = Selection.Range
    
    If .ConvertGoButton.Caption = "Convert selection" Then
      Set aRange = bRange
    Else
      Set aRange = ActiveDocument.Range
    End If
    
    jcount = 0
    k = aRange.Paragraphs.Count
    j = k
    Do
      Set apara = aRange.Paragraphs(j)
      nP = getParaNumbType(apara)
 '   If nP = 2 Or nP = 0 Or nP = 6 Then GoTo nextPara
      If nP = 0 Then GoTo nextPara
      If nP = 5 Then
        If Showmsg2("This paragraph has mixed numbering. Do you want to convert all", vbYesNo) = vbNo Then GoTo nextPara
      End If
 
      If nP = 5 Or (.NumberingCheckbox.Value And (nP = 1 Or nP = 3)) Or _
         (.OutlineCheckbox.Value And nP = 4) Or (.BulletCheckbox.Value And (nP = 2 Or nP = 5)) Then
        apara.Range.Select
        If promptSw Then
          m = Showmsg2("Do you want to convert this paragraph", vbYesNoCancel)
          If m = vbCancel Then GoTo exitj
          If m = vbNo Then GoTo nextPara
        End If
        apara.Range.ListFormat.ConvertNumbersToText NumberType:=wdNumberAllNumbers
        jcount = jcount + 1
      End If

nextPara:
      j = j - 1
    Loop Until j < 1
  End With
exitj:
  bRange.Select
  Selection.Start = Selection.Paragraphs(1).Range.Start
  showMsg jcount & " numbers/bullets converted to text"
  ConvertToTextForm.hide
End Sub

Sub scorchedEarth(n As Long)
  If MsgBox("Remove numbering from selection but don't remove numbering from styles. " & _
    "Ad-hoc numbering will be lost, Quick fix can restore style numbering. ", vbYesNo, "Remove numbering in document") = vbNo Then Exit Sub
  Selection.Range.ListFormat.RemoveNumbers NumberType:=wdNumberParagraph 'wdNumberAllNumbers
  ' wdnumberallnumbers, wdnumberlistnum =all listnum fields, wdnumberparagraph = added by a template
End Sub

 Sub quickFix(n As Long)
   FixStyledLists (1)
 End Sub

Sub RemoveNumberingFromStyles(n As Integer)
Dim aStyle As Style
Dim apara As Paragraph
  For Each apara In Selection.Paragraphs
    Set aStyle = Selection.Paragraphs(1).Style
    With aStyle
      If Not .ListTemplate Is Nothing Then
        If Showmsg2("Remove Outline numbering from style " & aStyle.NameLocal, vbYesNo) = vbYes Then
          aStyle.LinkToListTemplate ListTemplate:=Nothing
        End If
      End If
    End With
  Next apara
End Sub

Sub showMsg(ms As String)
  With MsgForm
    .YesButton.Visible = False
    .CancelButton.Visible = False
    .MsgOKButton.Caption = "OK"
    .Left = hpoints - 20 - MsgForm.Width
    .Top = 250
    .msgLabel.Caption = ms
    .Show
  End With
End Sub

Function Showmsg2(ms As String, action As Long) As Long
  msgReturn = 0
  With MsgForm
    .YesButton.Visible = True
    If action = vbYesNoCancel Then .CancelButton.Visible = True
    .MsgOKButton.Caption = "No"
    .Left = hpoints - 20 - MsgForm.Width
    .Top = 250
    .msgLabel.Caption = ms
    .Show
  End With
  If msgReturn = 1 Then Showmsg2 = vbYes: Exit Function
  If msgReturn = 2 Then Showmsg2 = vbNo: Exit Function
  Showmsg2 = vbCancel
End Function
Attribute VB_Name = "CaptionForm"
Attribute VB_Base = "0{9BB706BD-6FC3-403D-AA29-9646EA72D05A}{BA0824E6-F476-45D4-BAF5-EE402BE560FA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit

Private Sub CancelButton_Click()
  CaptionForm.hide
End Sub



Private Sub CaptionButton_Click()
  goCaption (1)
End Sub

Private Sub CommandButton2_Click()
  CaptionsHelp (1)
End Sub

Attribute VB_Name = "CaptionModule"
Option Explicit


Sub goCaptionNumbering(n As Long)
Dim Cname As String
  With CaptionForm
    .StartUpPosition = 0
    .Top = 30
    .Left = hpoints - .Width - 32
    .Show
  End With
End Sub

Sub CaptionsHelp(n As Long)
Dim s As String
 With CaptionsHelpForm
  s = "CAPTION TYPES" & vbCrLf
  s = s & "There are three built-in caption types: Figure, Table and Equation. User defined caption types can be added for example Image."
  s = s & vbCrLf & vbCrLf & "CAPTION NUMBERING" & vbCrLf
  s = s & "Captions are given automatic numbering using one of the numbering styles, for example 1,2,3 or a,b,c etc." & vbCrLf & _
          vbCrLf & "Numbering can include a chapter number taken from a heading. Only inbuilt heading styles 'Heading 1', 'Heading 2' etc. can be used and these must be members of an outline numbering list"
  s = s & vbCrLf & vbCrLf & "WHAT ARE CAPTIONS?" & vbCrLf
  s = s & "A caption is text preceeded by SEQ and STYLEREF fields and optionally a title such as Figure or Table. When created it is given a Caption style but this style can be altered later."
  s = s & vbCrLf & vbCrLf & "Tables of captions for each caption type can be created from the captions, for example List of Figures, List of Tables."
  .Chelp1.Caption = s
  s = "POSITION OF CAPTION" & vbCrLf
  s = s & "Where the caption is placed depends on the selection and the caption type." & vbCrLf & _
        vbCrLf & "If an in-line picture is selected then the paragraph is split into two paragraphs and the caption paragraph is inserted either before or after the picture." & _
        vbCrLf & vbCrLf & "If a whole paragraph containing an on-line picture is selected then the caption is either before or after the paragraph."
  s = s & vbCrLf & vbCrLf & "If a floating shape or picture is selected then the caption is placed in a text box positioned immediately above or below the shape."
   s = s & vbCrLf & vbCrLf & "If the selection is in a table then the caption is inserted immeiately before or after the table."
  
  s = s & vbCrLf & vbCrLf & "CHANGE TO NORMAL TEMPLATE" & vbCrLf & _
      "Changing caption parameters may change the Normal template. When Word is closed the option is then given to save the changed Normal template. This may affect other documents with captions."
  
  .cHelp2.Caption = s

  .StartUpPosition = 0
  .Top = 30
  .Left = hpoints - .Width - 32
  .Show
 
 End With
End Sub

Sub goCaption(n As Long)
  Dialogs(wdDialogInsertCaption).Show
End Sub
Attribute VB_Name = "CaptionsHelpForm"
Attribute VB_Base = "0{6AC0B4DD-EDF8-4339-A892-07E3097F08AB}{1DB8DECD-2DEA-49AA-AA3C-F2F61C1DCB0F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub HelpCancelButton_Click()
  CaptionsHelpForm.hide
End Sub
Attribute VB_Name = "ConvertForm"
Attribute VB_Base = "0{5213DC75-A68D-4734-B0AE-75EBD7ECE809}{A11241A8-23DA-4356-9AD9-12307532C258}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Private Sub ChangeParaButton_Click()
  GOConvertManual (1)
End Sub

Private Sub CommandButton4_Click()
  ConvertForm.hide
End Sub

Private Sub ConvertGoButton_Click()
  GOConvertManual (0)
End Sub

Private Sub DekleteManualButton_Click()
  GOConvertManual (3)
End Sub

Private Sub Level0Option_Click()
  fillStyles (0)
End Sub

Private Sub Level1Option_Click()
  fillStyles (1)
End Sub

Private Sub Level2Option_Click()
  fillStyles (2)
End Sub

Private Sub Level3Option_Click()
  fillStyles (3)
End Sub

Private Sub Level4Option_Click()
  fillStyles (4)
End Sub

Private Sub Level5Option_Click()
  fillStyles (5)
End Sub

Private Sub Level6Option_Click()
  fillStyles (6)
End Sub
Private Sub Level7Option_Click()
  fillStyles (7)
End Sub

Private Sub ManualHelpButton_Click()
  manualHelp (1)
End Sub

Private Sub OtherLevelOption_Click()
  fillStyles (8)
End Sub

Private Sub SkipParaButton_Click()
  GOConvertManual (2)
End Sub
Attribute VB_Name = "ConvertModule"
Option Explicit
Dim apara As Paragraph
Dim mm As Long
Dim sNo As Long
Dim oldFill As Long
Sub ConvertManual(n As Long) ' n=0 delete manual only, =1 replace manual with style
  With ConvertForm
    .StartUpPosition = 0
    .Top = 70
    .Left = hpoints - .Width - 32
    .Show
    .DummyOption.Value = True
  End With
  oldFill = 1
  fillStyles (1)
  setButtons (True)
End Sub
Sub setButtons(a As Boolean) ' a=true if initial
  With ConvertForm
    .ConvertGoButton.Enabled = a
    .ChangeParaButton.Enabled = Not a
    .DekleteManualButton.Enabled = Not a
    .SkipParaButton.Enabled = Not a
  End With
End Sub
Sub GOConvertManual(n As Long)
Dim bRange As Range
Dim sName
Dim i As Long
  ' n=0 Find next
  ' n=1 Convert to style
  ' n=2 Skip
  ' n=3 Delete manual only
  Select Case n
    Case 0, 2 ' initial entry or do not change
      If n > 0 Then
        apara.Range.Select ' because selection may be only part para
        Selection.Start = Selection.End
      End If
      sNo = FindNextPara(mm)
      If sNo = 0 Then GoTo GEND
      setButtons (False)
  '    aPara.Range.Select
  
    Case 1 ' change style of para  --------------------
      If ConvertForm.Level0Option.Value = True Then ' single list numbered
        apara.Range.Select
        Selection.Paragraphs(1).Range.Select
        If ConvertForm.ConvertStylesListbox.ListIndex = -1 Then
          showMsg "List style has not been selected"
        Else
          Selection.End = Selection.Start
          Selection.Delete unit:=wdCharacter, Count:=mm - 1
          If n = 1 Then
            sName = ConvertForm.ConvertStylesListbox.List(ConvertForm.ConvertStylesListbox.ListIndex)
            Selection.Style = ActiveDocument.Styles(sName)
          End If
          Selection.MoveStart unit:=wdParagraph
          sNo = FindNextPara(mm)
          If sNo = 0 Then GoTo GEND
        End If
      Else ' outline numbered ---------------------
        apara.Range.Select
        Selection.Paragraphs(1).Range.Select
        If ConvertForm.ConvertStylesListbox.ListCount < sNo - 1 Then
          showMsg "List does not contain a style for this level"
        Else
          i = ConvertForm.ConvertStylesListbox.ListIndex
          If i < 0 Or i > ConvertForm.ConvertStylesListbox.ListCount Then
            showMsg "No style selected"
          Else
            Selection.End = Selection.Start
            Selection.Delete unit:=wdCharacter, Count:=mm - 1
            If n = 1 Then
              sName = Mid(ConvertForm.ConvertStylesListbox.List(i), 3)
              Selection.Style = ActiveDocument.Styles(sName)
            End If
          End If
        End If
        Selection.MoveStart unit:=wdParagraph
        sNo = FindNextPara(mm)
        If sNo = 0 Then GoTo GEND
      End If
      Case 3  ' delete manual only ---------------
        apara.Range.Select
        Selection.Paragraphs(1).Range.Select
        Selection.End = Selection.Start
        Selection.Delete unit:=wdCharacter, Count:=mm - 1
        Selection.MoveStart unit:=wdParagraph
        sNo = FindNextPara(mm)
        If sNo = 0 Then GoTo GEND
    End Select
  Exit Sub
GEND:
'  Set bRange = ActiveDocument.Range
'  bRange.Start = bRange.End
'  bRange.Select
  setButtons (True)
  showMsg "No more manually numbered paragraphs found"
End Sub
Function FindNextPara(m As Long) As Long
Dim isSingle As Boolean
Dim aRange As Range
Dim bRange As Range
Dim k As Long
  isSingle = ConvertForm.Level0Option.Value
  Set aRange = Selection.Range
  aRange.End = ActiveDocument.Range.End
  For Each apara In aRange.Paragraphs
  
' aPara.Range.Select
  
    k = unPickNo(apara.Range.Text, m) ' m is the start of text after numbering
    If m > 20 Then k = 0 ' max 20 chars in number, otherwise might be tab in middle of doc
    If k = 1 And isSingle Then
      FindNextPara = 1
'      aPara.Range.Select
      If isNumberColumn(apara, m) Then GoTo nxtPara
      Set bRange = apara.Range.Duplicate
      bRange.MoveEnd unit:=wdCharacter, Count:=m - Len(apara.Range) - 1
      bRange.Select
      Exit Function
    End If
    If (Not isSingle And k > 0) Then ' Or (isSingle And k = 1) Then
      FindNextPara = k
'      With ConvertForm.ConvertStylesListbox
'        If .ListCount >= k Then
'          .ListIndex = k - 1
'        Else
'          .ListIndex = -1
'        End If
'      End With
'      aPara.Range.Select
      If isNumberColumn(apara, m) Then GoTo nxtPara
      Set bRange = apara.Range.Duplicate
      bRange.MoveEnd unit:=wdCharacter, Count:=m - Len(apara.Range) - 1
      bRange.Select
'aPara.Range.Select
      Exit Function
    End If
nxtPara:
  Next apara
  FindNextPara = 0
End Function
Function isNumberColumn(apara As Paragraph, m As Long) As Boolean
Dim k As Long
Dim j As Long
Dim i As Long
  isNumberColumn = False
  k = apara.Range.Characters.Count - 1
  For j = m To k
    i = Asc(apara.Range.Characters(j))
    If i <> 9 And i <> 32 Then Exit Function
  Next j
  isNumberColumn = True
End Function

Function unPickNo(ByVal strng As String, ByRef m As Long) As Long ' returns numbering levels
Dim i As Long
Dim j As Long
Dim k As Long
Dim st As String
Dim st2 As String
  m = 0
  unPickNo = 0
  If Len(strng) < 2 Then Exit Function
  
  m = Len(strng)
  Do While Left(strng, 1) = Chr(9) Or Left(strng, 1) = " "  ' remove leading tabs & spaces
    strng = Mid(strng, 2)
  Loop
  m = m - Len(strng)
    
  st = Left(strng, 1)
  If st < "0" Or st > "9" Then GoTo NonNum  'Exit Function ' not numeric start of para
  j = Len(strng)
  i = 1
  Do ' parse strng for non numeric except for dot, space, tab or c/r
    i = i + 1
    st = Mid(strng, i, 1)
  Loop While i < j And (st = "." Or Asc(st) = 9 Or st = " " Or st = ")" Or (st >= "0" And st <= "9"))
  m = m + i
  st = Left(strng, i - 1) ' st is numbering string only. The first char is numeric
  
  Do While Mid(st, Len(st), 1) = Chr(9) Or Mid(strng, Len(st), 1) = " " ' remove trailing tabs & spaces
    st = Left(st, Len(st) - 1)
  Loop
  st = st & " "  ' add space to end
  
  k = 0
  Do
    i = 1
    j = Len(st)
    Do
      i = i + 1
      st2 = Mid(st, i, 1)
    Loop While i < j And (st2 >= "0" And st2 <= "9")
    k = k + 1
    st = LTrim(Mid(st, i + 1))
    If Left(st, 1) = Chr(9) Or Left(st, 1) = " " Then st = Mid(st, 2)
  Loop While Len(st) > 1
  unPickNo = k
  Exit Function
  
NonNum: ' non numeric first char
  i = InStr(strng, Chr(9))
  If i = 0 Or ConvertForm.NumericOnly.Value Then Exit Function
  st = Left(strng, i)
  m = m + i + 1
  
  k = 0
  Do
    i = 1
    j = Len(st)
    Do
      i = i + 1
      st2 = Mid(st, i, 1)
    Loop While i < j And st2 <> "." And st2 <> " " And st2 <> ")" '(st2 >= "0" And st2 <= "9")
    
    k = k + 1
    st = LTrim(Mid(st, i + 1))
    If Left(st, 1) = Chr(9) Or Left(st, 1) = " " Then st = Mid(st, 2)
  Loop While Len(st) > 1
  unPickNo = k

End Function

Sub fillStyles(n As Integer) ' fill convertStylesListbox with appropriate styles
Dim aStyle As Style
Dim k As Long
Dim outlineListNo As Long
Dim L As Long
Dim m As Long
Dim aStr As String
Dim tmpl As ListTemplate
  If (oldFill = 0 And n > 0) Or (oldFill > 0 And n = 0) Then setButtons (True)
  oldFill = n
  With ConvertForm.ConvertStylesListbox
    .Clear
    If n = 0 Then
      For Each aStyle In ActiveDocument.Styles
        L = aStyle.ListLevelNumber
        If L > 0 Then
         .AddItem aStyle.NameLocal
      End If
      Next aStyle
    Else ' n <>0 -------
      If n = 8 Then
        outlineListNo = findTemplate
        If outlineListNo < 1 Then
          ConvertForm.StylesLabel.Caption = "No list template found"
          Exit Sub
        End If
        Set tmpl = ActiveDocument.ListTemplates(outlineListNo)
      Else
        outlineListNo = getOutlineListNo
        If outlineListNo < 1 Then
          ConvertForm.StylesLabel.Caption = "Initialisation. No list selected"
          Exit Sub
        End If
        Set tmpl = ListGalleries(wdOutlineNumberGallery).ListTemplates(outlineListNo)
      End If
      If outlineListNo > 0 Then ' -----------------
      
      For k = 1 To 9
        aStr = tmpl.ListLevels(k).LinkedStyle
        If aStr <> "" Then
          .AddItem Trim(str(k)) & " " & aStr
        End If
      Next k
      
      End If ' -------------------------
    End If
   
  End With
  With ConvertForm
    If n = 0 Then
      .StylesLabel.Caption = "Styles with List numbering"
    Else
      .StylesLabel.Caption = "Styles in Outline list" & str(outlineListNo)
      If .ConvertStylesListbox.ListCount = 0 Then
        .StylesLabel.Caption = "No styles in list " & str(outlineListNo)
      Else
        '.StylesLabel.Caption = .StylesLabel.Caption & " styles"
      End If
    End If
  End With
End Sub

Function getOutlineListNo() As Long
  With ConvertForm
  If .Level0Option.Value Then getOutlineListNo = 0
  If .Level1Option.Value Then getOutlineListNo = 1
  If .Level2Option.Value Then getOutlineListNo = 2
  If .Level3Option.Value Then getOutlineListNo = 3
  If .Level4Option.Value Then getOutlineListNo = 4
  If .Level5Option.Value Then getOutlineListNo = 5
  If .Level6Option.Value Then getOutlineListNo = 6
  If .Level7Option.Value Then getOutlineListNo = 7
  End With
End Function





Attribute VB_Name = "ConvertToTextForm"
Attribute VB_Base = "0{39F181A3-6711-4A90-916B-1C4F110A4CAB}{787D16C5-689A-4F6B-A182-4692090413EA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub ConvertCancelButton_Click()
  ConvertToTextForm.hide
End Sub

Private Sub ConvertGoButton_Click()
  GOConvert (1)
End Sub
Attribute VB_Name = "HelpForm"
Attribute VB_Base = "0{CD35C997-82EF-426C-B6D0-0CB24917CCFD}{A423BBA2-1170-4F06-B188-1F25B2C453AB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub HelpCancelButton_Click()
  HelpForm.hide
End Sub

Private Sub URLlabel_Click()
  ActiveDocument.FollowHyperlink HelpForm.URLlabel.Caption
End Sub
Attribute VB_Name = "HelpModule"
Option Explicit
Sub HelpWrite(n As Long)
Dim s As String
  If n = 5 Then ' SEQ help
    s = "NUMBERING USING THE SEQ FIELD" & vbCrLf
    s = s & "The SEQ field produces formatted numbering that can be placed anywhere and is not limited to the start of a paragraph. By using different identifiers there can be multiple numbering schemes." & vbCrLf & _
        vbCrLf & "TO CREATE A NEW SEQ FIELD IDENTIFIER AND INSERT AT CURSOR POSITION" & vbCrLf & _
        "1. Select the numbering format." & vbCrLf & _
        "2. Enter an alphanumeric identifier" & vbCrLf & _
        "3. Select the character to be added after the field - none, space, tab or decimal" & vbCrLf & _
        "4. Click 'Create new SEQ field with new identifier'"
    s = s & vbCrLf & vbCrLf & _
        "TO ADD A SEQ FIELD USING AN EXISTING SEQ IDENTIFIER" & vbCrLf & _
        "1. Select the identifier in the list of existing identifiers" & vbCrLf & _
        "2. Change any settings then Click 'Insert SEQ field at cursor'." & vbCrLf & _
        "3. After all changed are made, the program will update all update fields in the document (except TOCs)" & vbCrLf & _
        "If 'Restart at' is selected then numbering will be restarted at the number in the listbox."
    s = s & vbCrLf & vbCrLf & "TOGGLE VIEW" & vbCrLf & _
        "The Toggle View button toggles the display between identifier and the field contents"
    HelpForm.Helptxt0.Caption = s
    
    s = "TO EDIT AN EXISTING SEQ FIELD" & vbCrLf & _
        "1. Position the cursor at the SEQ field to be edited" & vbCrLf & _
        "2. Click 'Load SEQ data from cursor'. This will load the attributes of the SEQ field" & vbCrLf & _
        "3. Make changes to parameters as desired." & vbCrLf & _
        "4. click 'Save edited SEQ field data' button" & vbCrLf & vbCrLf
        
    s = s & "TO DELETE ALL INSTANCES OF A SEQ FIELD" & vbCrLf & _
        "1. Select the SEQ identifier in the list" & vbCrLf & _
        "2. Click 'Delete SEQ fields'" & vbCrLf & _
        "All the SEQ fields having the selected identifier will be deleted. However any following characters will remain"
    s = s & vbCrLf & vbCrLf & _
        "TO HIGHLIGHT ALL INSTANCES OF A SEQ FIELD" & vbCrLf & _
        "1. Select the SEQ identifier in the list" & vbCrLf & _
        "2. Click 'Highlight SEQ fields'"
    s = s & vbCrLf & vbCrLf & _
        "TO REMOVE SEQ FIELD HIGHLIGHTING" & vbCrLf & _
        "Select the SEQ identifier in the list and click 'Remove Highlighting'"
   
    HelpForm.HelpTxt4.Caption = s
    HelpForm.Show
    Exit Sub
  End If
  
  HelpForm.Height = 552
  
  HelpForm.Caption = "Bullets and Numbering - Help"
  
  If n = 2 Then
    s = "SET UP AND MODIFY NUMBERING SCHEMES BASED ON STYLES. FIX PROBLEMS" & vbCrLf & vbCrLf & _
      "1. Place cursor in a paragraph that has the style to be numbered" & vbCrLf & _
      "2. Click the button for the numbering or bulleting" & vbCrLf & _
      "3. A form will appear for that type of numbering" & vbCrLf & vbCrLf
      
    s = s & "OUTLINE NUMBERING" & vbCrLf
    s = s & "1.    Select a paragraph that has a style that will be in the outline list template." & vbCrLf & _
          "       If editing an existing list select a paragraph whose style in the list template" & vbCrLf & _
          "2.    If paragraph style has no numbering then gallery template will be shown. Chose 1 - 7. " & vbCrLf & _
          "       If paragraph style already has numbering then its list template number will be shown." & vbCrLf & _
          "3.    Select individual levels, edit then Copy changes into above panel." & vbCrLf & _
          "4.    Click Store Modified List & Apply. All of the styles in the list will be given outline numbering." & vbCrLf & _
          "IMPORTANT: If a style is in more than one list template then the latest stored template applies." & vbCrLf & vbCrLf
 
    s = s & "SIMPLE NUMBERING" & vbCrLf
    s = s & "If Restart numbering is checked then numbering restarts forward from the selection." & vbCrLf & _
      "If the style already has bulleting or numbering then it is changed to the new numbering."
   HelpForm.Helptxt0.Caption = s
   
    s = "BULLETING" & vbCrLf
    s = s & "All paragraphs with that style will then be bulleted"
  
    s = s & vbCrLf & vbCrLf & "TO RE-START NUMBERING" & vbCrLf & _
          "a. Select a paragraph where you want to re-start the renumbering." & vbCrLf & _
          "b. Click Simple or Outline numbering button." & vbCrLf & _
          "c. Check Restart numbering" & vbCrLf & _
          "d. Click Store Modified List & Apply" & vbCrLf & vbCrLf
          
    s = s & "CANCEL RESTARTED NUMBERING." & vbCrLf & _
          "Select the paragraph where numbering re-starts, make sure that the Restart Numbering is unchecked and click Apply."
    s = s & vbCrLf & vbCrLf & "SHOW LISTS AND NUMBERING" & vbCrLf
    s = s & "These are tool to help analyse the numbering setup. " & vbCrLf & _
            "Display style numbering. This lists all styles that have outline numbering." & vbCrLf & _
            "Display list templates. Displays all list templates and whether they are currently assigned to a list." & vbCrLf & "    Individual paragraphs that are part of a list can then be selected or highlighted." & vbCrLf & _
            "What is applied to selected paragraph. This gives the numbering templates that are applied to a" & vbCrLf & "     paragraph"
     
    HelpForm.HelpTxt4.Caption = s
      
  Else
  
  With HelpForm.Helptxt0
    s = "STYLES VERSES AD-HOC NUMBERING" & vbCrLf
    s = s & "Ad-hoc bulleting or numbering using the buttons on the ribbon if used indiscriminately can lead to numbering problems. " & _
       "The safest method is to use numbered or bulleted styles." & vbCrLf & vbCrLf & _
       "The objective of this tool is to use bulleting & numbering styles only and remove any ad-hoc."
  
    s = s & vbCrLf & vbCrLf & "QUICK FIX AND SCORCHED EARTH" & vbCrLf
    s = s & "QUICK FIX re-applies styles to paragraphs with numbered styles. " & _
     "START AGAIN removes all numbering and bulleting and and reverts the paragraph style to its underlying style. "
    s = s & "Style numbering can then be re-applied with QUICK FIX. Ad-hoc numbering should be replaced with style numbering. "
 
    s = s & vbCrLf & vbCrLf & "CONVERT MANUAL NUMBERING" & vbCrLf
    s = s & "Selects either text to the left of the first tab in a paragraph or if numeric only is selected then numbers are selected from a paragraph " & _
          "that has a numeric first character. The number of levels is then determined by assuming that levels are " & _
          "delimited by tabs, spaces or right brackets. "
    s = s & "If the single numbering option is chosen then only paragraphs with a single numbering level are selected." & vbCrLf
    s = s & "If an outline list is chosen then manually numbered paragraphs are given the style of the level in the list." & vbCrLf & vbCrLf

    .Caption = s
  End With
  
  With HelpForm.HelpTxt4
    s = "CONVERT NUMBERING OR BULLETS TO TEXT" & vbCrLf & _
          "Specify type of numbering and/or bullets and convert to text. WARNING.If style is numbered or bulleted then re-applying style will re-create and you can end up with two numbers or bullets. " & _
          "For safety remove numbering from styles after conversion to text or use Convert Manual Numbering to delete" & vbCrLf & vbCrLf
      s = s & "UNDO. Most of the bulletting and numbering changes can be reversed with Word's Undo." & vbCrLf & _
          "Other numbering parameters. eg font color, can be changed in Word's menues."
  
    .Caption = s
   
  End With

  End If
  HelpForm.Show
End Sub

Sub manualHelp(n As Long)
Dim s As String
  HelpForm.Caption = "Manual numbering - Help"
  s = "REMOVING MANUAL NUMBERING AND REPLACING WITH STYLE NUMBERING" & vbCrLf & vbCrLf
  s = s & "This tool finds paragraphs with manual numbering and gives the option to remove the manual numbering and change the paragraph's style to a numbered style." & vbCrLf & _
          vbCrLf & "Manual numbering can be deleted even if the paragraph also has auto numbering." & vbCrLf & _
          vbCrLf & "The algorithm to detect numbering may give false positives hence prompts are required rather than global changes."
  
  s = s & vbCrLf & vbCrLf
  s = s & "SELECT NUMBERED LIST" & vbCrLf & _
      "This selects the type of numbering and the list to be applied. The program will search for the same type of manual numbering as the list. A style is then selected from the list." & vbCrLf & _
      "    none:    selects all types" & vbCrLf & _
      "    Outline list n:   selects an outline list of type 1.1.1" & vbCrLf & _
      "    Single numbering:   selects simple numbering for example 5. or a)" & vbCrLf & _
      "    From sample paragraph:   The type of the currently selected paragraph" & vbCrLf & _
      "    Numeric only:   Finds only numeric manual numbering."
  HelpForm.Helptxt0.Caption = s
      
  s = "NUMBERED STYLES" & vbCrLf & _
      "The available numbered styles will be displayed in the list box and the appropriate style must be selected for applying to the paragraph." & _
      "The type of numbered style will match the numbering option chosen." & vbCrLf
  s = s & vbCrLf & "If only the removal of manual numbering is requires then styles are not required, however the type of numbering still needs to be selected."
      
  s = s & vbCrLf & vbCrLf & "STEPS" & vbCrLf
  s = s & "1. Select a numbering type or list. Select a style." & vbCrLf & _
          "2. Position the cursor. Searching will be from the cursor to the end of the document" & vbCrLf & _
          "3. Click 'Find next' to start searching" & vbCrLf & _
          "4. Click 'Replace with style' to remove manual numbering and apply the style" & vbCrLf & _
          "    or, click 'Delete manual only' to remove the manual numbering only" & vbCrLf & _
          "    or, click 'Skip this paragraph' to leave unchanged and advance to the next numbered paragraph."
  HelpForm.HelpTxt4 = s
  HelpForm.Helptxt5.Caption = ""
  HelpForm.Show
End Sub

Attribute VB_Name = "ListDisplayModule"
Option Explicit
Dim StyleName() As String
Dim StylePrefix0() As String
Dim StylePrefix1() As Single
Dim StylePrefix2() As Single
Dim StylePrefix3() As String
Dim NumListIndex() As Long
Dim BulListindex() As Long
Dim styleno As Long
Dim NumString() As String
Dim NumListType() As Long

Sub goshowLists(hpoints As Single, vpoints As Single)
  With ListForm
    .StartUpPosition = 0
    .Top = 0
    .Left = hpoints - .Width - 6
    .Show
    setup_FullStyles
    SetupNumberLists
  '  .Show
  End With
End Sub
Private Sub setup_FullStyles()
Dim Stitem As Style
Dim oL As Long
Dim olX As Boolean
Dim pX As String
  With ListForm.OutlineListbox
    .Clear
    .ColumnCount = 5
    .ColumnHeads = False
    .ColumnWidths = "100;40;30;34;65"
    .AddItem "Level"
    .List(0, 0) = "Style"
    .List(0, 1) = "Type"
    .List(0, 2) = "Indent"
    .List(0, 3) = "Txt ind"
    .List(0, 4) = "Prefix"
   End With
   
    styleno = -1
    ReDim StyleName(0)
    ReDim StylePrefix0(0)
    ReDim StylePrefix1(0)
    ReDim StylePrefix2(0)
    ReDim StylePrefix3(0)
    For Each Stitem In ActiveDocument.Styles
      With Stitem
        If .ListTemplate Is Nothing Then GoTo stX
        If Not .ListTemplate.OutlineNumbered Then GoTo stX
            styleno = styleno + 1
            ReDim Preserve StyleName(styleno)
            ReDim Preserve StylePrefix0(styleno)
            ReDim Preserve StylePrefix1(styleno)
            ReDim Preserve StylePrefix2(styleno)
            ReDim Preserve StylePrefix3(styleno)
            StyleName(styleno) = Stitem.NameLocal
            With Stitem.ListTemplate.ListLevels(Stitem.ListLevelNumber)
              StylePrefix0(styleno) = Gst(.NumberStyle)
              StylePrefix1(styleno) = PointsToCentimeters(.NumberPosition)
              StylePrefix2(styleno) = PointsToCentimeters(.TextPosition)
              StylePrefix3(styleno) = .NumberFormat
            End With
stX:
      End With
    Next Stitem
    On Error GoTo 0
    sortStyles (True)
            
   With ListForm.OutlineListbox
    For oL = 0 To styleno
      .AddItem ""
      .List(oL + 1, 0) = StyleName(oL)
      .List(oL + 1, 1) = StylePrefix0(oL)
      .List(oL + 1, 2) = str(StylePrefix1(oL))
      .List(oL + 1, 3) = str(StylePrefix2(oL))
      .List(oL + 1, 4) = StylePrefix3(oL)
    Next oL
  End With
            
End Sub
Function Gst(oJ As Long) As String
Dim st As String
  st = getOutlineFormat(oJ)
  If st = "Other" Then
    Gst = "bullet"
  Else
    Gst = st
  End If
End Function
Private Sub sortStyles(isFull As Boolean)
Dim j As Long
Dim k As Long
Dim strng As String
Dim m As Long
Dim sg As Single
  For j = 0 To styleno - 1
    For k = j + 1 To styleno
      If StyleName(j) > StyleName(k) Then
        strng = StyleName(j)
        StyleName(j) = StyleName(k)
        StyleName(k) = strng
        If isFull Then
          strng = StylePrefix0(j)
          StylePrefix0(j) = StylePrefix0(k)
          StylePrefix0(k) = strng
          sg = StylePrefix1(j)
          StylePrefix1(j) = StylePrefix1(k)
          StylePrefix1(k) = sg
          sg = StylePrefix2(j)
          StylePrefix2(j) = StylePrefix2(k)
          StylePrefix2(k) = sg
          strng = StylePrefix3(j)
          StylePrefix3(j) = StylePrefix3(k)
          StylePrefix3(k) = strng
        End If
      End If
    Next k
  Next j
End Sub

Sub ShowBulListParas(n As Long)
Dim i As Long
Dim LN As Long
  i = ListForm.BulletListbox.ListIndex
  If i > 0 Then
    i = BulListindex(i - 1)
    ActiveDocument.Lists(i).Range.Select
  End If

End Sub

Private Sub SetupNumberLists()
Dim j As Long
Dim i As Long
Dim aRange As Range
Dim bRange As Range
Dim Stitem As Style
Dim Vtext As String
Dim Ttext As String
Dim oL As Long

  With ListForm.NumberListbox
    .Clear
    .ColumnCount = 5
    .ColumnHeads = False
    .ColumnWidths = "25,71;60;30;30;60"
    .AddItem "Level"
    .List(0, 0) = "No"
    .List(0, 1) = "Type"
    .List(0, 2) = "Prefix & Number"
    .List(0, 3) = "Indent"
    .List(0, 4) = "Txt in"
    .List(0, 5) = "List type"
   End With
       
    styleno = -1
    ReDim NumListIndex(0)
    ReDim StyleName(0)
    ReDim NumString(0)
    ReDim StylePrefix1(0)
    ReDim StylePrefix2(0)
    ReDim NumListType(0)
   
   For j = 1 To ActiveDocument.Lists.Count
    Set aRange = ActiveDocument.Lists(j).Range
    With aRange.ListFormat
      Vtext = .ListString & " "
      Select Case .ListType
        Case wdListBullet
          Ttext = "Bullet"
        Case wdListListNumOnly
          Ttext = "ListNumOnly"
          GoTo bJ
        Case wdListMixedNumbering
          Ttext = "Mixed"
         ' GoTo bJ
        Case wdListNoNumbering
          Ttext = "No Numbering"
        Case wdListOutlineNumbering
          Ttext = "Outline Numbering"
        Case wdListSimpleNumbering
          Ttext = "Simple Numbering"
        Case Else
          Ttext = "??"
      End Select
        styleno = styleno + 1
        ReDim Preserve NumListIndex(styleno)
        ReDim Preserve StyleName(styleno)
        ReDim Preserve NumString(styleno)
        ReDim Preserve StylePrefix1(styleno)
        ReDim Preserve StylePrefix2(styleno)
        ReDim Preserve NumListType(styleno)
        NumListIndex(styleno) = j
        StyleName(styleno) = Ttext
   
        If .ListType = wdListBullet Then
          NumString(styleno) = "???"
          On Error Resume Next
          NumString(styleno) = .ListTemplate.ListLevels(1).NumberFormat
          On Error GoTo 0
          NumListType(styleno) = -1
        Else
          If .ListType = wdListMixedNumbering Then
            NumString(styleno) = 0
            NumListType(styleno) = -1
            StylePrefix1(styleno) = 0
            StylePrefix2(styleno) = 0
          Else
            NumString(styleno) = .ListString
            NumListType(styleno) = -1
            On Error Resume Next
            NumListType(styleno) = PointsToCentimeters(.ListTemplate.ListLevels(1).NumberStyle)
            On Error GoTo 0
          End If
         ' aRange.Select
        End If
        If .ListType <> wdListMixedNumbering Then
          StylePrefix1(styleno) = -999
          StylePrefix2(styleno) = -999
          On Error Resume Next
          StylePrefix1(styleno) = PointsToCentimeters(.ListTemplate.ListLevels(1).NumberPosition)
          StylePrefix2(styleno) = PointsToCentimeters(.ListTemplate.ListLevels(1).TextPosition)
          On Error GoTo 0
        End If
    
    End With
bJ:
  Next j
    
  With ListForm.NumberListbox
    For oL = 0 To styleno
      .AddItem ""
      .List(oL + 1, 0) = oL
      .List(oL + 1, 1) = StyleName(oL)
      .List(oL + 1, 2) = NumString(oL)
      .List(oL + 1, 3) = str(StylePrefix1(oL))
      .List(oL + 1, 4) = str(StylePrefix2(oL))
      .List(oL + 1, 5) = TPst(NumListType(oL))
   Next oL

  End With
End Sub
Function TPst(k As Long) As String
  If k < 0 Then
    TPst = " "
    Exit Function
  End If
  Select Case k
    Case wdListNumberStyleArabic
      TPst = "1,2..n"
    Case wdListNumberStyleLowercaseRoman
      TPst = "i,ii,iii,iv"
    Case wdListNumberStyleUppercaseRoman
      TPst = "I,II,III,IV"
    Case wdListNumberStyleLowercaseLetter
      TPst = "a,b,c.."
    Case wdListNumberStyleUppercaseLetter
      TPst = "A,B,C.."
    Case wdListNumberStyleCardinalText
      TPst = "cardinal?"
    Case Else
      TPst = "other"
  End Select
End Function

Sub ShowNumListParas(n As Long)
Dim i As Long
Dim LN As Long
  i = ListForm.NumberListbox.ListIndex
  If i > 0 Then
    i = NumListIndex(i - 1)
    ActiveDocument.Lists(i).Range.Select
  End If

End Sub

Attribute VB_Name = "ListForm"
Attribute VB_Base = "0{654F4772-922D-4B4F-A786-05CC3C0AA281}{99EA0F0F-2596-4D1A-89EE-CE5C175A8260}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Private Sub CommandButton4_Click()
  removenumlist (1)
End Sub

Private Sub LNCancelButton_Click()
  ListForm.hide
End Sub

Private Sub ShowBulButton_Click()
  ShowBulListParas (1)
End Sub

Private Sub ShowNumButton_Click()
  ShowNumListParas (1)
End Sub
Attribute VB_Name = "MsgForm"
Attribute VB_Base = "0{C5B7429F-E75D-4220-A225-9BA8D1F1018E}{F5F8C6E4-4593-41E4-ABE2-ECD369555BE7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub CancelButton_Click()
  MsgForm.hide
  msgReturn = 3
End Sub

Private Sub MsgOKButton_Click()
  MsgForm.hide
  msgReturn = 2
End Sub

Private Sub YesButton_Click()
  MsgForm.hide
  msgReturn = 1
End Sub
Attribute VB_Name = "OutlineForm"
Attribute VB_Base = "0{0D2EC633-720B-4053-A65D-5FA411BDC264}{AAAB2525-25FA-4FE3-B7B1-1D4BA5F0742C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Option Explicit

Private Sub BrowseButton_Click()
  FillSelected (1)
End Sub

Private Sub BrowseFontButton_Click()
  browseFonts (1)
End Sub

Private Sub CancelButton_Click()
  Unload OutlineForm
  Unload OutlineHelpForm
End Sub

Private Sub EditCancelbutton_Click()
  GoEdit (False)
End Sub

Private Sub EditOKButton_Click()
  GoEdit (True)
End Sub

Private Sub List1Option_Click()
  ChangeListno (1)
End Sub

Private Sub List2Option_Click()
 ChangeListno (2)
End Sub
Private Sub List4Option_Click()
  ChangeListno (4)
End Sub
Private Sub List3Option_Click()
  ChangeListno (3)
End Sub
Private Sub List5Option_Click()
  ChangeListno (5)
End Sub

Private Sub List6Option_Click()
  ChangeListno (6)
End Sub

Private Sub List7Option_Click()
  ChangeListno (7)
End Sub

Private Sub List8Option_Click()
  ChangeListno (8)
End Sub

Private Sub OutlineApplyButton_Click()
  OutlineApply (1)
End Sub

Private Sub OutlineCancelButton_Click()
  Unload OutlineForm
End Sub

Private Sub OutlineEditButton_Click()
  OutlineEdit (1)
End Sub


Private Sub OutlineHelpButton_Click()
  setupOutlineHelp (1)
End Sub

Private Sub RemoveButton_Click()
  RemoveFromList (1)
End Sub

Private Sub ShowTemplatesButton_Click()
  Call ShowTemplateNumbering(hpoints, vpoints, False)
End Sub

Private Sub StyleListbox_Click()
  setStyleOrFont (1)
End Sub


Attribute VB_Name = "OutlineHelp"
Option Explicit
Sub ShowOutlineHelp(n As Long)
Dim s As String
   s = "SETUP AND EDIT OUTLINE NUMBERING" & vbCrLf & vbCrLf & _
       "INITIAL SETUP" & vbCrLf & _
       "1.    Select a vacant gallery list template" & vbCrLf & _
       "2.    In the list box select Level 1 then click 'Edit a Level'" & vbCrLf & _
       "3.    Set the linked style of the first level then set the parameters for the numbering." & vbCrLf & _
       "       These parameters apply to the numbering not the paragraph text." & vbCrLf & _
       "       To change the paragraph text you need to modify the TOC style" & vbCrLf & _
       "4.    Click 'Copy changes into above panel'." & vbCrLf & _
       "5.    Repeat steps 2 and 3 for other levels." & vbCrLf & _
       "6.    Click 'Store Modified List and Apply'. This will apply the numbering to the document"
    s = s & vbCrLf & vbCrLf & _
       "EDITING OF EXISTING OUTLINE NUMBERING" & vbCrLf & _
       "1.    Place cursor in a numbered paragraph" & vbCrLf & _
       "2.    In the Bullets and Numbering menu Click 'Outline numbering'," & vbCrLf & _
       "       the list template of the selected paragraph should be shown." & vbCrLf & _
       "3.    Select the level to be edited and click 'Edit a level'." & vbCrLf & _
       "4.    After editing, click 'Copy changes into above panel'." & vbCrLf & _
       "5.    After all changes have been made click 'Store Modified List & Apply'"
     s = s & vbCrLf & vbCrLf & _
       "REMOVING STYLES FROM NUMBERING LIST" & vbCrLf & _
       "The 'Remove from list' button will remove the list association of selected style. The list will then show a blank for the linked style at that level."
       
    s = s & vbCrLf & vbCrLf & "NOTES" & vbCrLf & _
       "The Prefix and number format sets the numbering, punctuation and text to be displayed. For example 'Chapt %1.'. If blank there will be no number shown." & vbCrLf & vbCrLf & _
       "Check 'Restart numbering' to restart numbering at the selected paragraph."
    
   With OutlineHelpForm.txt1
    .Caption = s
   End With
    
    
End Sub
Attribute VB_Name = "OutlineHelpForm"
Attribute VB_Base = "0{46F234CA-2084-4241-8F0F-E931FE44B441}{9028A581-58C0-4BCC-9C6A-ABD14B24E81C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
  Unload OutlineHelpForm
End Sub
Attribute VB_Name = "OutlineModule"
Option Explicit
Dim outlineListNo As Long
Dim OutlineLevel(9) As Long
Dim OutlineLinkedStyle(9) As String
Dim OutlineFormat(9) As String
Dim OutlineFormatNo(9) As Long
Dim OutlinePrevious(9) As Long
Dim OutlinePrefix(9) As String
Dim OutlineStart(9) As Long
Dim OutlineAlignment(9) As Single
Dim OutlineTextAlign(9) As Single
Dim OutlineFont(9) As String
Dim OutlineBold(9) As Boolean
Dim OutlineItalic(9) As Boolean
Dim OutlineUnderline(9) As Boolean
Dim OutlineSize(9) As Single
Dim OutlineLeader(9) As Long
Dim vpoints As Single
Dim hpoints As Single
Dim fnt() As String
Dim tNo As Long
Dim isStyle As Boolean

Sub setupOutlineListbox(Xhpoints As Single, Xvpoints As Single)
Dim LT As Long
Dim j As Long
  If Selection.Paragraphs(1).Style.NameLocal = "List Paragraph" Then
    LT = -1
  Else
    LT = findTemplate
  End If
  
  With OutlineForm
    .OutlineListbox.Enabled = True
'.Show
  If LT > 0 Then
   With OutlineForm
    OutlineForm.List8Option.Caption = "No" & str(LT)
    OutlineForm.List8Option.Visible = True
    outlineListNo = LT
    .List8Option.Visible = True
    .List8Option.Value = True
    
    .List1Option.Visible = False
    .List2Option.Visible = False
    .List3Option.Visible = False
    .List4Option.Visible = False
    .List5Option.Visible = False
    .List6Option.Visible = False
    .List7Option.Visible = False
   End With
  Else
   With OutlineForm
    outlineListNo = getOutlineListNo
    OutlineForm.List8Option.Visible = False
    .List1Option.Visible = True
    .List1Option.Value = True
    .List2Option.Visible = True
    .List3Option.Visible = True
    .List4Option.Visible = True
    .List5Option.Visible = True
    .List6Option.Visible = True
    .List7Option.Visible = True
    .List8Option.Visible = False
   End With
  End If
       
    If LT > 0 Then
      .InstrLabel.Caption = "Selected paragraph's style uses outline list template" & str(LT) & "." & vbCrLf & _
      "You can change parameters and re-apply." & vbCrLf
      .ListFrame.Caption = "List Template attached to selected paragraph"
    Else
      If LT = -1 Then
        .InstrLabel.Caption = "The selected paragraph has the style 'List Paragraph'." & vbCrLf & _
        "This style is used for ad-hoc bulleting and numbering." & vbCrLf & vbCrLf & _
        "Suggest that numbered or bulleted styles be used instead"
      Else
        .InstrLabel.Caption = "The selected paragraph has no outline list template." & vbCrLf & _
        "Select a Gallery template, edit the individual levels then click 'Store Modified List & Apply' to create a new outline numbering list." & vbCrLf & _
        "To remove style from list use the 'Remove from list' button." & vbCrLf & _
        "If a style appears in more than one list then latest stored list applies."
      End If
      .ListFrame.Caption = "Gallery of List Templates"
    End If
    .Height = 216
    .StartUpPosition = 0
    .Top = 30
     Call GiveScreenPoints(hpoints, vpoints)
    .Left = hpoints - .Width - 12
    .Caption = "Outline Numbering" ' List " & str(getOutlineListNo)
    .ListCountLabel.Caption = ActiveDocument.ListTemplates.Count & " List Templates, " & _
           ActiveDocument.Lists.Count & " Lists in document"
    .RestartCheckbox.Value = False
      
    j = Selection.Paragraphs(1).Style.ListLevelNumber
    If j > 0 And j <= .OutlineListbox.ListCount Then .OutlineListbox.ListIndex = j
    If .OutlineListbox.ListIndex < 1 Then .OutlineListbox.ListIndex = 1
    .Show
    
  End With
End Sub

Sub setupOutlineHelp(n As Long)
Dim s As String
  With OutlineHelpForm
    .StartUpPosition = 0
    .Top = 60
     Call GiveScreenPoints(hpoints, vpoints)
    .Left = hpoints - .Width - 473
    .Show
  End With
  ShowOutlineHelp (1)
End Sub

Function findTemplate() As Long ' gives the list number of the selected paragraph
Dim LT As Long
Dim ll As Long
Dim pStyle As String
  findTemplate = 0
  If Selection.Style Is Nothing Then Exit Function
  pStyle = Selection.Paragraphs(1).Style
  With ActiveDocument
    For LT = 1 To .ListTemplates.Count
      For ll = 1 To .ListTemplates(LT).ListLevels.Count
        If .ListTemplates(LT).ListLevels(ll).LinkedStyle = pStyle Then
          findTemplate = LT
        End If
      Next ll
    Next LT
  End With
End Function

Private Sub FillOutlineListbox()
Dim k As Long
  With OutlineForm
 '  .Instr2Label.Caption = "Prefix + numbber format define the format of the numbering. Example 'Chapter %1.%2):' would give Chapter 1.1):" & vbCrLf & _
 '  vbCrLf & "If Linked Style is not valid then you will be asked to create it" & _
 '  vbCrLf & vbCrLf & "Ad-hoc numbering is prevented from happening in this mnacro." & _
 '  vbCrLf & vbCrLf & "Default setting is Tab after number "
    With .OutlineListbox
     .Clear
     .ColumnCount = 8
     .ColumnHeads = False
     .ColumnWidths = "28;88;40;40;88;30;45;50"
     .AddItem "Level"
  '   .ColumnHeads = True
   '  .AddItem "1"
   '  .AddItem "2"
     .AddItem ""
     .List(0, 0) = "Level"
     .List(0, 1) = "Linked Style"
     .List(0, 2) = "Format"
     .List(0, 3) = "Previous level"
     .List(0, 4) = "Prefix + numb"
     .List(0, 5) = "Start"
     .List(0, 6) = "Alignment"
     .List(0, 7) = "Text align"

     For k = 1 To 9
       .AddItem ""
       .List(k, 0) = str(k)
       .List(k, 1) = OutlineLinkedStyle(k)
       .List(k, 2) = OutlineFormat(k)
       .List(k, 3) = str(OutlinePrevious(k))
       .List(k, 4) = OutlinePrefix(k)
       .List(k, 5) = OutlineStart(k)
       .List(k, 6) = OutlineAlignment(k)
       .List(k, 7) = OutlineTextAlign(k)
      Next k
   
    End With
    .Height = 216
    
  End With
End Sub
Sub ChangeListno(n As Long)
   outlineListNo = n
   If getListData(outlineListNo) Then
     FillOutlineListbox
   End If
   OutlineForm.OutlineListbox.Enabled = True
   OutlineForm.OutlineApplybutton.Enabled = True
End Sub
Function getGalleryNo() As Long
  getGalleryNo = 0
  With OutlineForm
    If .List1Option Then getGalleryNo = 1
    If .List2Option Then getGalleryNo = 2
    If .List3Option Then getGalleryNo = 3
    If .List4Option Then getGalleryNo = 4
    If .List5Option Then getGalleryNo = 5
    If .List6Option Then getGalleryNo = 6
    If .List7Option Then getGalleryNo = 7
  End With
End Function

Function getListData(outlineListNo As Long) As Boolean
Dim k As Long
Dim j As Long

  j = findTemplate
  
  If j > 0 Then
    On Error GoTo GD1  ' traps simple numbering
    For k = 1 To 9
      With ActiveDocument.ListTemplates(j).ListLevels(k)
        OutlineLevel(k) = str(k)
        OutlinePrefix(k) = .NumberFormat
        OutlineLinkedStyle(k) = .LinkedStyle
        OutlinePrevious(k) = .ResetOnHigher
          If .StartAt = 0 Then
          OutlineStart(k) = 1
        Else
          OutlineStart(k) = .StartAt
        End If
        OutlineAlignment(k) = PointsToCentimeters(.NumberPosition)
        OutlineTextAlign(k) = PointsToCentimeters(.TextPosition)
        OutlineFormat(k) = getOutlineFormat(.NumberStyle)
        OutlineFormatNo(k) = .NumberStyle
        OutlineFont(k) = .Font.Name
        OutlineBold(k) = .Font.Bold
        OutlineItalic(k) = .Font.Italic
        OutlineUnderline(k) = .Font.Underline
        OutlineSize(k) = .Font.Size
        OutlineLeader(k) = .TrailingCharacter
      End With
    Next k
GD1:
    On Error GoTo 0
  Else
  On Error GoTo GD2
  For k = 1 To 9
    With ListGalleries(wdOutlineNumberGallery).ListTemplates(outlineListNo).ListLevels(k)
'        m = InStr(.NumberFormat, "%")
        OutlineLevel(k) = str(k)
      '  If .NumberFormat < 1 Then .NumberFormat = 1
        OutlinePrefix(k) = .NumberFormat
        OutlineLinkedStyle(k) = .LinkedStyle
        OutlinePrevious(k) = .ResetOnHigher
        If .StartAt = 0 Then
          OutlineStart(k) = 1
        Else
          OutlineStart(k) = .StartAt
        End If
        OutlineAlignment(k) = PointsToCentimeters(.NumberPosition)
        OutlineTextAlign(k) = PointsToCentimeters(.TextPosition)
        OutlineFormat(k) = getOutlineFormat(.NumberStyle)
        OutlineFormatNo(k) = .NumberStyle   ' ************************************************
    End With
GD2:
    On Error GoTo 0
  Next k
  
  End If
  getListData = True
End Function
Function getOutlineFormat(m As Long) As String ' ***********************************
  Select Case m
    Case wdListNumberStyleArabic, 0
      getOutlineFormat = "1,2,3..."
    Case wdListNumberStyleUppercaseRoman, -1
      getOutlineFormat = "I,II,III.."
    Case wdListNumberStyleLowercaseRoman, -2
      getOutlineFormat = "i,ii,iii.."
    Case wdListNumberStyleUppercaseLetter, -3
      getOutlineFormat = "A,B,C,..."
    Case wdListNumberStyleLowercaseLetter, -4
      getOutlineFormat = "a,b,c..."
    Case wdListNumberStyleOrdinalText, -5
      getOutlineFormat = "1st,2nd,.."
    Case wdListNumberStyleCardinalText, -6
      getOutlineFormat = "One,Two,.."
    Case 255, 254, -255, -254
      getOutlineFormat = "none"
    Case Else
      getOutlineFormat = "Other"
   End Select
End Function

Sub OutlineEdit(n As Long)
Dim j As Long
Dim k As Long
Dim LLevel As ListLevel
  With OutlineForm
    ' ****** copy level parameters from outlineListbox into editing form ***********
    j = .OutlineListbox.ListIndex
    If j < 1 Then
      showMsg "Level has not been selected"
      Exit Sub
    End If
    .OutlineListbox.Enabled = False
    .OutlineApplybutton.Enabled = False
    .OutlineEditFrame.Caption = "Edit   Level" & str(j) & " of List" & str(GetParagraphListNo)  'str(getOutlineListNo)
    .Height = 534
    .EditLinkedStyle = .OutlineListbox.List(j, 1)
    
    k = OutlineFormatNo(j)
    Select Case k
      Case 0
        .NumberOption0 = True
      Case 1
        .NumberOption1 = True
      Case 2
        .NumberOption2 = True
      Case 3
        .NumberOption3 = True
      Case 4
        .NumberOption4 = True
      Case 5
        .NumberOption5 = True
      Case 6
        .NumberOption6 = True
      Case Else
        .NumberOption0 = True
    End Select
     
'    .EditNumberType = OutlineFormatNo(j)  '.OutlineListbox.List(j, 2) ' ????
'    If .EditNumberType < 0 Or .EditNumberType > 6 Then .EditNumberType = 0
    
    .EditPrefix = .OutlineListbox.List(j, 4)
    .EditPreviousLevel = .OutlineListbox.List(j, 3)
    .EditNumberStart = .OutlineListbox.List(j, 5)
    .EditNumberAlign = .OutlineListbox.List(j, 6)
    .EditTextAlign = .OutlineListbox.List(j, 7)
    .BoldCheckbox.Enabled = True
  End With
     
    ' **** copy font and tab data from actual template or gallery template listlevel *********
    k = findTemplate
    If k > 0 Then
      Set LLevel = ActiveDocument.ListTemplates(k).ListLevels(j)
    Else
      On Error GoTo Lerr
      Set LLevel = ListGalleries(wdOutlineNumberGallery).ListTemplates(outlineListNo).ListLevels(j)
      On Error GoTo 0
    End If
    With LLevel
        OutlineForm.EditLinkedfont.Value = .Font.Name
        If .Font.Bold Then ' otherwise checkbox will be no enabled
          OutlineForm.BoldCheckbox.Value = True
        Else
        OutlineForm.BoldCheckbox.Value = False
        End If
        If .Font.Italic Then
          OutlineForm.ItalicCheckbox.Value = True
        Else
          OutlineForm.ItalicCheckbox.Value = False
        End If
        If .Font.Underline Then
          OutlineForm.UnderlineCheckbox.Value = True
        Else
          OutlineForm.UnderlineCheckbox.Value = False
        End If
        OutlineForm.FontSizeCheckbox = Trim(str(.Font.Size))
        Select Case .TrailingCharacter
          Case 0
            OutlineForm.TabOption.Value = True
          Case 1
           OutlineForm.SpaceOption.Value = True
          Case 2
           OutlineForm.NoneOption.Value = True
          Case Else
           showMsg "Unknown trailing charactet " & .TrailingCharacter
           OutlineForm.NoneOption.Value = True
        End Select
      End With
      With Selection.Paragraphs(1).Style
        If Trim(str(LLevel.Font.Size)) = "9999999" Then
        '  OutlineForm.SpaceOption.Value = True
          OutlineForm.EditLinkedfont.Value = .Font.Name
          OutlineForm.BoldCheckbox = .Font.Bold
          OutlineForm.ItalicCheckbox = .Font.Italic
          OutlineForm.UnderlineCheckbox = .Font.Underline
        End If
      End With
      Exit Sub
Lerr:
      showMsg "List has been deleted"
End Sub

Sub GoEdit(isOK As Boolean)
Dim s As String
Dim k As Long
Dim m As Long
  With OutlineForm
    
    If Not isOK Then
      GoTo Occ
    End If
    m = 0
    If .NumberOption0 Then m = 0
    If .NumberOption1 Then m = 1
    If .NumberOption2 Then m = 2
    If .NumberOption3 Then m = 3
    If .NumberOption4 Then m = 4
    If .NumberOption5 Then m = 5
    If .NumberOption6 Then m = 6
    
    k = .OutlineListbox.ListIndex
  '  m = Val(.EditNumberType.Value)
    If m < 0 Or m > 96 Then    ' **********************************************************
      showMsg ("Incorrect Number type. Must be positive number")
      Exit Sub
    End If
    If Val(.EditPreviousLevel.Value) > k Then
      showMsg ("Previous level must be less than current level")
      Exit Sub
    End If
    If Not IsNumeric(.EditNumberStart.Value) Then
      showMsg ("Error. Start must be numeric. Thus if format is A,B,C.. then start of 2 is B")
      Exit Sub
    End If
    If Not IsNumeric(.EditNumberAlign.Value) Then
      showMsg ("Error in number alignment")
      Exit Sub
    End If
    If Not IsNumeric(.EditTextAlign.Value) Then
     showMsg ("Error in text alignment")
      Exit Sub
    End If
    If Not IsNumeric(.EditNumberStart.Value) Then
     showMsg ("Error in start number")
      Exit Sub
    End If
    If .EditNumberStart.Value < 1 Then
      showMsg ("Error. Start number must be positive")
      Exit Sub
    End If
    If Trim(.EditPrefix.Value) = "" Then showMsg ("Warning: No number formatting so no numbering will appear")
    
    s = Trim(.EditLinkedStyle.Value)
    If NotAStyle(s) Then
      If s = "" Then
        If Showmsg2("WARNING. No linked style. OK to continue", vbOKCancel) = vbCancel Then Exit Sub
      Else
        If Showmsg2(s & " is not an existing style." & vbCrLf & "Do you want to create the style and apply to the selected paragraph", vbYesNo) = vbNo Then Exit Sub
        CreateNewSty (s)
        If NotAStyle(s) Then Exit Sub
      End If
    End If
    
    OutlineLinkedStyle(k) = .EditLinkedStyle.Value
    OutlineFormat(k) = getOutlineFormat(-m)
    OutlineFormatNo(k) = m
    OutlinePrevious(k) = Val(.EditPreviousLevel.Value)
    OutlinePrefix(k) = .EditPrefix
    OutlineStart(k) = Val(.EditNumberStart.Value)
    OutlineAlignment(k) = Val(.EditNumberAlign)
    OutlineTextAlign(k) = Val(.EditTextAlign)
    
    OutlineFont(k) = .EditLinkedfont
  '  .BoldCheckbox.Enabled = True
    If IsNull(.BoldCheckbox.Value) Then
      OutlineBold(k) = False
    Else
      OutlineBold(k) = .BoldCheckbox.Value
    End If
    If IsNull(.ItalicCheckbox.Value) Then
      OutlineItalic(k) = False
    Else
      OutlineItalic(k) = .ItalicCheckbox.Value
    End If
    If IsNull(.UnderlineCheckbox.Value) Then
      OutlineUnderline(k) = False
    Else
      OutlineUnderline(k) = .UnderlineCheckbox.Value
    End If
    OutlineSize(k) = Val(.FontSizeCheckbox.Value)
    
    If .TabOption Then OutlineLeader(k) = 0
    If .SpaceOption Then OutlineLeader(k) = 1
    If .NoneOption Then OutlineLeader(k) = 2
    
    FillOutlineListbox
    .OutlineListbox.ListIndex = k
    storeOutline (k)
Occ:
    .OutlineListbox.Enabled = True
    .Height = 216
    .OutlineApplybutton.Enabled = True
  End With
End Sub


Sub CreateNewSty(st As String)
' Arguments=Name, Delete, Merge, NewName, BasedOn, NextStyle, Type, FileName, Source, AddToTemplate, Define, Rename, Apply, New, Link
Dim NewStyle As Style
  Set NewStyle = ActiveDocument.Styles.Add(st, OutlineForm.OutlineListbox.ListIndex)
    ' Name:=st, Level:=OutlineForm.OutlineListbox.ListIndex) ',Type:=wdStyleTypeParagraph,
  Selection.Style = NewStyle
  'SendKeys "%m"
  Dialogs(wdDialogFormatStyle).Show
  'selection.Style=newstyle
End Sub

Sub FillSelected(n As Long)
  isStyle = True
  Call get_new_style(OutlineForm, OutlineForm.EditLinkedStyle.Value)
End Sub


Function NotAStyle(s As String) As Boolean
Dim st As String
  NotAStyle = True
  If s = "" Then Exit Function
  On Error GoTo nas:
  st = ActiveDocument.Styles(s).NameLocal
  NotAStyle = False
nas:
  On Error GoTo 0
End Function

Sub storeOutline(kLevel As Long)
Dim outlineListNo As Long
 On Error GoTo Serr
  outlineListNo = getOutlineListNo
  With ListGalleries(wdOutlineNumberGallery).ListTemplates(outlineListNo).ListLevels(kLevel)
    .NumberFormat = OutlinePrefix(kLevel)
    .LinkedStyle = OutlineLinkedStyle(kLevel)
    .ResetOnHigher = OutlinePrevious(kLevel)
    .StartAt = OutlineStart(kLevel)
    .NumberPosition = CentimetersToPoints(OutlineAlignment(kLevel))
    .TextPosition = CentimetersToPoints(OutlineTextAlign(kLevel))
    .NumberStyle = OutlineFormatNo(kLevel)
  End With
Serr:
  On Error GoTo 0
End Sub
Function getOutlineListNo() As Long
  With OutlineForm
  If .List1Option.Value Then getOutlineListNo = 1
  If .List2Option.Value Then getOutlineListNo = 2
  If .List3Option.Value Then getOutlineListNo = 3
  If .List4Option.Value Then getOutlineListNo = 4
  If .List5Option.Value Then getOutlineListNo = 5
  If .List6Option.Value Then getOutlineListNo = 6
  If .List7Option.Value Then getOutlineListNo = 7
  If .List8Option.Value Then getOutlineListNo = 8
  End With
End Function

Sub OutlineApply(n As Long) ' Store modified list
' if current paragraph style is in the list then all styles in list are updated, otherwise
' either the first style is applied or List Paragraph is applied
Dim k As Long

Dim currentStyle As String
Dim aRange As Range
Dim SW As Boolean
Dim allBlank As Boolean
Dim normalSw As Boolean

  Set aRange = Selection.Paragraphs(1).Range
  If aRange.Fields.Count > 1 Then ' if selection is i a field eg TOC
    aRange.Fields(aRange.Fields.Count).Select
    Selection.Start = Selection.End
    Set aRange = Selection.Range
  End If
  If Selection.Paragraphs.Count > 1 Then
    showMsg ("Only first paragraph of selection will be used")
  End If
  aRange.Select
  currentStyle = Selection.Paragraphs(1).Style.NameLocal
  
  SW = False
  allBlank = True
  normalSw = False
  For k = 1 To 9
    If OutlineLinkedStyle(k) = currentStyle Then SW = True
    If OutlineLinkedStyle(k) <> "" Then allBlank = False
    If OutlineLinkedStyle(k) = "Normal" Then normalSw = True
  Next k
  If normalSw Then
    If Showmsg2("Normal is one of the styles to be outline numbered." & vbCrLf & _
       "This will number every paragraph in the document that uses Normal style." & vbCrLf & _
       "Do you want to continue?", vbYesNo) = vbNo Then Exit Sub
  End If
  
  If allBlank Then
    showMsg ("All linked styles are blank. This tool does not allow ad-hoc numbering.")
    Exit Sub
  End If
  If Not SW Then
    showMsg ("Selected paragraph's style " & currentStyle & " is not in the list of Linked Styles." & vbCrLf & _
           "List will be stored but not be applied. Change selected paragraph's style and re-apply list")
    Exit Sub
  End If

  OutlineForm.hide
  OutlineHelpForm.hide
  
  tNo = getOutlineListNo
    
  If tNo = 8 Then
    tNo = findTemplate
    If tNo > 0 Then
     For k = 1 To 9
      With ActiveDocument.ListTemplates(tNo).ListLevels(k)
      .NumberFormat = OutlinePrefix(k)
 
       .NumberStyle = OutlineFormatNo(k)
       .NumberPosition = CentimetersToPoints(OutlineAlignment(k))
  '   .Alignment = wdListLevelAlignLeft
       .TextPosition = CentimetersToPoints(OutlineTextAlign(k))
  '   .TabPosition = wdUndefined
        If k > 1 Then .LinkedStyle = OutlineLinkedStyle(k)
       .StartAt = OutlineStart(k)
       .ResetOnHigher = OutlinePrevious(k)
       
       .Font.Name = OutlineFont(k)
       .Font.Bold = OutlineBold(k)
       .Font.Italic = OutlineItalic(k)
       .Font.Underline = OutlineUnderline(k)
       If OutlineSize(k) < 1 Then
         .Font.Size = 10
       Else
       .Font.Size = OutlineSize(k)
       End If
     
       .TrailingCharacter = OutlineLeader(k)
       
      End With
     Next k
    
  ' **************************** This applies restart but stuffs up heading 1 *****************************************
 '   For k = 2 To 9
 '      Selection.Range.ListFormat.ApplyListTemplateWithLevel ListTemplate:= _
 '       ActiveDocument.ListTemplates(tNo), _
 '       ContinuePreviousList:=Not OutlineForm.RestartCheckbox.Value, _
 '       ApplyTo:=wdListApplyToWholeList, applylevel:=k '
 '   '    DefaultListBehavior:=wdWord10ListBehavior
 '    Next k
  ' ***********************************************************************
    End If
  Else
   For k = 1 To 9
   With ListGalleries(wdOutlineNumberGallery).ListTemplates(tNo).ListLevels(k)
     .NumberFormat = OutlinePrefix(k)  '"%1"
     .TrailingCharacter = OutlineLeader(k)
     .NumberStyle = OutlineFormatNo(k)   'wdListNumberStyleArabic
     .NumberPosition = CentimetersToPoints(OutlineAlignment(k))  'CentimetersToPoints(0)
    ' .Alignment = wdListLevelAlignLeft
     .TextPosition = CentimetersToPoints(OutlineTextAlign(k)) ' CentimetersToPoints(0.76)
     .TabPosition = wdUndefined
     .ResetOnHigher = OutlinePrevious(k)
     
       .Font.Name = OutlineFont(k)
       .Font.Bold = OutlineBold(k)
       .Font.Italic = OutlineItalic(k)
       .Font.Underline = OutlineUnderline(k)
       If OutlineSize(k) < 1 Then
         .Font.Size = 10
       Else
       .Font.Size = OutlineSize(k)
       End If
       .TrailingCharacter = OutlineLeader(k)
     
     .StartAt = OutlineStart(k)  '1
     With .Font
            .Bold = aRange.Font.Bold
            .Italic = aRange.Font.Italic
            .StrikeThrough = wdUndefined
            .Subscript = wdUndefined
            .Superscript = wdUndefined
            .Shadow = wdUndefined
            .Outline = wdUndefined
            .Emboss = wdUndefined
            .Engrave = wdUndefined
            .AllCaps = wdUndefined
            .Hidden = wdUndefined
            .Underline = wdUndefined
            .Color = wdColorAutomatic
            .Size = wdUndefined
            .Animation = wdUndefined
            .DoubleStrikeThrough = wdUndefined
            .Name = aRange.Font.Name
       End With
      .LinkedStyle = OutlineLinkedStyle(k) ' "Heading 1"
    End With
    Next k
     

    ListGalleries(wdOutlineNumberGallery).ListTemplates(tNo).Name = ""
    Selection.Range.ListFormat.ApplyListTemplateWithLevel ListTemplate:= _
        ListGalleries(wdOutlineNumberGallery).ListTemplates(tNo), _
        ContinuePreviousList:=Not OutlineForm.RestartCheckbox.Value, _
        ApplyTo:=wdListApplyToWholeList, _
        DefaultListBehavior:=wdWord10ListBehavior   ', applylevel:=1
    ' wdListApplyToWholeList, wdListApplyToSelection, wdListApplyToThisPointForward
   End If
    
  FixStyledLists (2)
    
End Sub

Sub browseFonts(n As Integer)
Dim str As Variant
Dim k As Long
Dim f As String
  isStyle = False
  f = OutlineForm.EditLinkedfont.Value
  ReDim fnt(0)
  k = 0
  For Each str In FontNames
      ReDim Preserve fnt(k)
      fnt(k) = str
      k = k + 1
   Next str
   With OutlineForm.StyleListbox
     .ListIndex = -1
     .List = fnt
     For k = 0 To UBound(fnt)
       If fnt(k) = f Then
         .ListIndex = k
       End If
     Next k
   End With
End Sub
  
Sub setStyleOrFont(n As Long)
  With OutlineForm
    If isStyle Then
      .EditLinkedStyle.Value = .StyleListbox.List(.StyleListbox.ListIndex)
    Else
      .EditLinkedfont.Value = .StyleListbox.List(.StyleListbox.ListIndex)
    End If
  End With
End Sub

Sub RemoveFromList(n As Long)
Dim sty As String
Dim k As Long
  k = OutlineForm.OutlineListbox.ListIndex
  If k < 0 Then
    showMsg "No level selected"
    Exit Sub
  End If
  sty = OutlineForm.OutlineListbox.List(k, 1)
        If Showmsg2("Remove numbering/bulleting from style " & sty & _
          ". It will remove the style from the list, if there are" & _
          "other styles in the list they will remain." & vbCrLf & _
          "Do you want to continue?", vbYesNo) = vbNo Then Exit Sub

      On Error Resume Next
      ActiveDocument.Styles(sty).LinkToListTemplate ListTemplate:=Nothing
      OutlineForm.OutlineListbox.List(k, 1) = ""
   '   OutlineForm.hide
   '   addOutlineNumbering (1)
End Sub

Attribute VB_Name = "RemoveBulletForm"
Attribute VB_Base = "0{1E3092BB-08DB-4FEB-A8C5-2DB4968E7272}{0CFD96AA-B873-4F66-8A15-914CC77764C3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub RemoveBulletCancel_Click()
  RemoveBulletForm.hide
End Sub

Private Sub RemoveBulletGO_Click()
  RemoveBullNums (1)
End Sub
Attribute VB_Name = "SEQForm"
Attribute VB_Base = "0{D68B80A5-486E-4165-BAE9-0D31C77D2E89}{E156CF96-8448-439B-A80D-630175F8EFC5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub DeleteSEQButton_Click()
  deleteSEQ (1)
End Sub

Private Sub CreateSEQButton_Click()
  CreateNewSEQ (1)
End Sub

Private Sub HighlightSEQButton_Click()
  HighlightSEQFields (True)
End Sub

Private Sub InsertSEQButton_Click()
  InsertSEQ (1)
End Sub

Private Sub LoadSEQDataButton_Click()
  If Not inhibitSW Then LoadSeqData (1)
End Sub

Private Sub RefreshButton_Click()
  refreshALL (1)
End Sub

Private Sub RemoveSEQHighlightButton_Click()
  HighlightSEQFields (False)
End Sub

Private Sub SEQCancelButton_Click()
  SEQForm.hide
End Sub

Private Sub SEQHelpButton_Click()
  HelpWrite (5)
End Sub

Private Sub SEQListbox_Click()
  If Not inhibitSW Then reloadSEQdata (1)
End Sub

Private Sub SEQToggleButton_Click()
  SEQToggle (1)
End Sub

Private Sub ShowFieldCodesOption_Click()
  aShowFieldcodes (True)
End Sub
Private Sub HideFieldCodesOption_Click()
  aShowFieldcodes (False)
End Sub
Attribute VB_Name = "SEQModule"
Option Explicit

Dim SEQNames() As String
Dim SEQCodes() As String
Dim NumStyle As Variant
Public inhibitSW As Boolean
Public insertNew As Boolean

Sub ShowSEQForm(n As Long)
  NumStyle = Array("", "Arabic", "ROMAN", "roman", "ALPHABETIC", "alphabetic", "Ordinal", _
    "CardText", "0", "0.00", "#0.00", "Custom")
  inhibitSW = False
  insertNew = True
  
   With ActiveWindow
    If .View.SplitSpecial = wdPaneNone Then
      .ActivePane.View.Type = wdPrintView
    Else
      .View.Type = wdPrintView
    End If
  End With
  
  fillSEQlistbox (0)
  With SEQForm
    .StartUpPosition = 0
    .Top = 220
    .Left = hpoints - .Width - 6
    .Show
  End With
End Sub

Sub refreshALL(n As Long)
  fillSEQlistbox (1)
End Sub

Private Sub fillSEQlistbox(n As Long) ' n=0 initial, n=1 refresh
Dim aField As Field
Dim SEQCount As Long
Dim s As String
Dim j As Long
Dim k As Long
Dim aRange As Range
 SEQForm.InsertSEQButton.Caption = "Insert selected SEQ field at cursor"
 insertNew = True
 SEQCount = -1
 ReDim SEQNames(0)
 SEQNames(0) = "none"
 ReDim SEQCodes(0)
 SEQCodes(0) = "none"
 SEQForm.SEQListbox.Clear
 'ActiveWindow.View.ShowFieldCodes = ashow
 For Each aField In ActiveDocument.Fields
   With aField
     If .Type = wdFieldSequence Then
       s = getSEQName(aField)
       If s = "" Then
         s = "none"
         SEQCodes(0) = Trim(.Code)
       End If
       If SEQCount >= 0 Then
         For j = 0 To SEQCount
           If SEQNames(j) = s Then GoTo NextField
         Next j
       End If
       SEQCount = SEQCount + 1
       ReDim Preserve SEQNames(SEQCount)
       SEQNames(SEQCount) = s
       ReDim Preserve SEQCodes(SEQCount)
       s = .Code
       k = InStr(s, "\* MERGEFORMAT")
       If k > 0 Then s = Trim(Left(s, k - 1))
       SEQCodes(SEQCount) = s
       
'       ReDim Preserve SEQfollow(SEQCount)
'       Set aRange = aField.Code
'       aRange.MoveEnd
'       aRange.Collapse direction:=wdCollapseEnd
'       aRange.MoveEnd unit:=wdWord
'       If Left(aRange.Text, 1) = "." Then aRange.MoveEnd unit:=wdWord
'       SEQfollow(SEQCount) = aRange.Text
     End If
   End With
NextField:
  Next aField
  SEQForm.SEQListbox.List = SEQNames
  fillNumbersForm
   
 
  '  Set aRange = Selection.Paragraphs(1).Range
    SEQForm.DecimalCheckbox = False
  '  If Left(aRange.Text, 1) = "." Then
  '    SEQForm.DecimalCheckbox = True
  '    aRange = Mid(aRange, 2)
  '  End If
    SEQForm.CharSpaceOption = False
  '  If Left(aRange.Text, 1) = " " Then SEQForm.CharSpaceOption = True
    SEQForm.CharTabOption = False
  '  If Left(aRange.Text, 1) = Chr(9) Then SEQForm.CharTabOption = True
    SEQForm.CharNoOption = False
 
 
  If ActiveWindow.View.ShowFieldCodes Then
    SEQForm.ShowFieldCodesOption = True
  Else
    SEQForm.HideFieldCodesOption = True
  End If
End Sub

Function getSEQName(aField As Field) As String
Dim s As String
Dim j As Long
Dim k As Long
  With aField
     s = .Code
     j = InStr(s, "SEQ")
     If j = 0 Then
       getSEQName = ""
       Exit Function
     End If
     k = InStr(s, "\")
     s = Trim(Mid(s, j + 3, k - j - 3))
   End With
   getSEQName = s
End Function

Private Sub fillNumbersForm()
  With SEQForm
     .Btype1.Caption = "1,2,3..."
     .Btype2.Caption = "I,II"
     .Btype3.Caption = "i,ii"
     .Btype4.Caption = "A,B,C"
     .Btype5.Caption = "a,b,c"
     .Btype6.Caption = "1st,2nd"
     .Btype7.Caption = "One.Two"
     .Btype8.Caption = "0"
     .Btype9.Caption = "0.00"
     .Btype10.Caption = "#0.00"
     .Btype11.Caption = "Custom"
  End With
End Sub

Sub SEQToggle(n As Long)
Dim k As Long
  inhibitSW = True
  With SEQForm.SEQListbox
    k = .ListIndex
    If Left(Trim(.List(0)), 3) = "SEQ" Then
      .Clear
      .List = SEQNames
    Else
      .Clear
      .List = SEQCodes
    End If
    .ListIndex = k
  End With
  inhibitSW = False
End Sub

Sub InsertSEQ(n As Long) ' n=0 new, n=1 use existing
  CreateAndInsert (n)
End Sub

Private Sub CreateAndInsert(n As Long)
Dim cde As String
Dim ss As String
Dim k As Long
Dim aField As Field
Dim aRange As Range
  With SEQForm.SEQListbox
    If .ListIndex < 0 Then
      showMsg "There is no SEQ field selected"
      Exit Sub
    End If

    If Not insertNew Then
      cde = "SEQ " & SEQNames(.ListIndex) & " " & giveNumbStyle
    Else
      cde = SEQCodes(.ListIndex)
    End If

'    k = InStr(cde, "\* MERGEFORMAT")
'    If k > 0 Then cde = Trim(Left(cde, k - 1))
    If SEQForm.NumbNextOption Then
      If InStr(cde, "\n") = 0 Then cde = cde & " \n"
    End If
    If SEQForm.NumbPreviousOption Then cde = cde & " \c"
    If SEQForm.NumbNextHeadingOption Then
      If InStr(cde, "\s") = 0 Then
        ss = Trim(SEQForm.StartNoTextbox.Value)
        If ss <> "" And Not IsNumeric(ss) Then
          showMsg "Invalid restart number. Must be a number."
          Exit Sub
        End If
        cde = cde & " \s " & ss
      End If
    End If
    If InStr(cde, "\r") Then
      If InStr(cde, "\s") > 0 Then
        showMsg "Restart imcompatible with sequence reset at heading"
        Exit Sub
      Else
        ss = Trim(SEQForm.StartNoTextbox.Value)
        If ss <> "" And Not IsNumeric(ss) Then
          showMsg "Invalid restart number. Must be a number."
          Exit Sub
        End If
        cde = cde & " \r " & ss
  '      SEQForm.StartNoTextbox.Value = ""
      End If
    End If
  End With
  
  If Not insertNew Then
    If Selection.Fields.Count = 0 Then
      showMsg "Selection is not a field"
      refreshALL (1)
      Exit Sub
    End If
    Set aField = Selection.Fields(1)
    aField.Delete
    Set aRange = Selection.Range
    aRange.End = Selection.Paragraphs(1).Range.End
   ' Set aRange = Selection.Paragraphs(1).Range
    If Left(aRange.Text, 1) = "." Then aRange = Mid(aRange, 2)
    If Left(aRange.Text, 1) = " " Or Left(aRange.Text, 1) = Chr(9) Then aRange = Mid(aRange, 2)
  End If
   
  Set aField = ActiveDocument.Fields.Add(Range:=Selection.Range, Text:=cde, PreserveFormatting:=False)
 ' aField.Code.Text = cde ' removes the MERGEFORMAT that Word puts in the field
   
  With SEQForm
    If .DecimalCheckbox.Value Then Selection.TypeText "."
    If .CharSpaceOption Then Selection.TypeText " "
    If .CharTabOption Then Selection.TypeText Chr(9)
  '  Selection.Fields.Update
    ActiveDocument.Fields.Update
  End With
  If Not insertNew Then refreshALL (1)
End Sub


Sub HighlightSEQFields(n As Boolean) ' true=add, false=remove highlight
Dim s As String
Dim ss As String
Dim aField As Field
Dim j As Long
Dim k As Long
Dim aRange As Range
  With SEQForm.SEQListbox
    If .ListIndex < 0 Then
      showMsg "There is no SEQ field selected"
      Exit Sub
    End If
    ss = SEQNames(.ListIndex)
  End With
  Set aRange = Selection.Range
  For Each aField In ActiveDocument.Fields
      With aField
      If .Type = wdFieldSequence Then
        s = .Code
        j = InStr(s, "SEQ")
        k = InStr(s, "\")
        s = Trim(Mid(s, j + 3, k - j - 3))
        If s = "" Then
          s = "none"
        End If
        If s = ss Then
          aField.Select
          If n Then
             Selection.Range.HighlightColorIndex = wdPink
          Else
            Selection.Range.HighlightColorIndex = wdNoHighlight
          End If
        End If
      End If
    End With
  Next aField
  aRange.Select
  Selection.Collapse
End Sub

Sub aShowFieldcodes(ashow As Boolean)
  ActiveWindow.View.ShowFieldCodes = ashow
  Application.ActiveWindow.ScrollIntoView Selection.Range
End Sub

Sub CreateNewSEQ(n As Long)
Dim s As String
Dim Identifier As String
Dim FormatString As String
Dim j As Long
  FormatString = giveNumbStyle
  If FormatString = "" Then
    FormatString = "\* Arabic"
    SEQForm.Btype1.Value = True
  End If
 ' FormatString = FormatString
  
  Identifier = Trim(SEQForm.IdentityTextbox.Value)
  If Identifier = "" Then Identifier = "DEFAULT"
  For j = 0 To UBound(SEQNames)
    If Identifier = SEQNames(j) Then
      showMsg "Identifier already exists"
      Exit Sub
    End If
  Next j
  With SEQForm
    If .DecimalCheckbox Then Selection.InsertAfter "."
    If .CharSpaceOption Then Selection.InsertAfter " "
    If .CharTabOption Then Selection.InsertAfter Chr(9)
    .DecimalCheckbox = False  ' prevents twodecimals
  End With
  Selection.Collapse
  j = UBound(SEQNames) + 1

  ReDim Preserve SEQNames(j)
  SEQNames(j) = Identifier
  ReDim Preserve SEQCodes(j)
  SEQCodes(j) = "SEQ " & Identifier & " " & FormatString
  SEQToggle (0)
  SEQToggle (0)
  SEQForm.SEQListbox.ListIndex = j
 

  InsertSEQ (0)
End Sub

Function giveNumbStyle() As String
  giveNumbStyle = ""
  With SEQForm
    If .Btype1.Value Then giveNumbStyle = "\* " & NumStyle(1)
    If .Btype2.Value Then giveNumbStyle = "\* " & NumStyle(2)
    If .Btype3.Value Then giveNumbStyle = "\* " & NumStyle(3)
    If .Btype4.Value Then giveNumbStyle = "\* " & NumStyle(4)
    If .Btype5.Value Then giveNumbStyle = "\* " & NumStyle(5)
    If .Btype6.Value Then giveNumbStyle = "\* " & NumStyle(6)
    If .Btype7.Value Then giveNumbStyle = "\* " & NumStyle(7)
    If .Btype8.Value Then giveNumbStyle = "\# " & NumStyle(8)
    If .Btype9.Value Then giveNumbStyle = "\# " & NumStyle(9)
    If .Btype10.Value Then giveNumbStyle = "\# " & NumStyle(10)
    If .Btype11.Value Then
       If Trim(.CustomTextbox.Value) <> "" Then giveNumbStyle = "\# " & .CustomTextbox.Value
    End If
  End With
End Function

Sub deleteSEQ(n As Long)
Dim aField As Field
Dim j As Long
Dim k As Long
Dim s As String
Dim ss As String
Dim m As Long
  m = 0
  With SEQForm.SEQListbox
    If .ListIndex < 0 Then
      showMsg "There is no SEQ field selected"
      Exit Sub
    End If
    ss = SEQNames(.ListIndex)
    s = "You are about to delete all " & ss & " SEQ fields" & vbCrLf & "Continue?"
    If MsgBox(s, vbYesNo) = vbNo Then Exit Sub
   End With
   For Each aField In ActiveDocument.Fields
      With aField
        If .Type = wdFieldSequence Then
          s = .Code
          j = InStr(s, "SEQ")
          k = InStr(s, "\")
          s = Trim(Mid(s, j + 3, k - j - 3))
          If s = ss Then
            aField.Delete
            m = m + 1
          End If
        End If
      End With
   Next aField
   fillSEQlistbox (1)
   showMsg m & " occurrences of SEQ field '" & ss & "' deleted"
End Sub

Sub reloadSEQdata(n As Long)
Dim s As String
Dim k As Long
Dim tst As String
Dim aField As Field
Dim aRange As Range
  k = SEQForm.SEQListbox.ListIndex
  tst = SEQNames(k)
  For Each aField In ActiveDocument.Fields
     If aField.Type = wdFieldSequence Then
       If tst = getSEQName(aField) Then
         Set aRange = aField.Code
         aRange.MoveEnd
         aRange.Collapse direction:=wdCollapseEnd
         aRange.MoveEnd unit:=wdWord
         If Left(aRange.Text, 1) = "." Then aRange.MoveEnd unit:=wdWord
 ' aRange.Select
         s = aRange.Text
         Exit For
       End If
     End If
  Next aField
  
  Call FillDataForm(SEQCodes(k), s)
End Sub

Sub LoadSeqData(n As Long)
Dim j As Long
Dim k As Long
Dim aField As Field
Dim SQcode As String
Dim SQname As String
Dim aRange As Range
Dim s As String
Dim sty As String
  j = Selection.Paragraphs(1).Range.Fields.Count
  If j < 1 Then GoTo SQexit
  Set aField = Nothing
  If Selection.Fields.Count = 1 Then
    Set aField = Selection.Fields(1)
     If aField.Type <> wdFieldSequence Then GoTo SQexit
  Else
    j = Selection.Paragraphs(1).Range.Fields.Count
    For k = 1 To j
      Set aField = Selection.Paragraphs(1).Range.Fields(k)
      If aField.Type = wdFieldSequence Then Exit For
    Next k
    If aField Is Nothing Then GoTo SQexit
    If aField.Type <> wdFieldSequence Then GoTo SQexit
  End If
 
  aField.Select
  Set aRange = Selection.Range
  SQcode = ""
  SQname = getSEQName(aField)
  j = SEQForm.SEQListbox.ListCount
  For k = 0 To j - 1
    If SQname = SEQNames(k) Then
      SQcode = aField.Code
      Exit For
    End If
  Next k
  inhibitSW = True
  If j > 0 Then SEQForm.SEQListbox.ListIndex = k
  inhibitSW = False

  With SEQForm
    .CharNoOption = True
    .DecimalCheckbox.Value = False
    .StartNoTextbox.Value = ""
    '.ResetSeqCheckbox.Value = False
    .InsertSEQButton.Caption = "Save edited SEQ field data"
  End With
  
  aRange.Collapse direction:=wdCollapseEnd
 
  aRange.EndOf unit:=wdParagraph, Extend:=wdExtend
  s = aRange.Text
  
  Call FillDataForm(SQcode, s)
  insertNew = False
  Exit Sub
SQexit:
  showMsg "No SEQ fields in selection or in paragraph"
  fillSEQlistbox (1)
  End Sub
  
Private Sub FillDataForm(SQcode As String, s As String) ' fill from field at cursor
Dim k As Long
Dim j As Long
Dim sty As String
Dim ss As String
  If Left(s, 1) = "." Then
    SEQForm.DecimalCheckbox.Value = True
    s = Mid(s, 2)
  End If
  SEQForm.CharNoOption = True
  If Left(s, 1) = " " Then
    SEQForm.CharSpaceOption = True
  Else
    If Left(s, 1) = Chr(9) Then
      SEQForm.CharTabOption = True
    End If
  End If
  sty = ""
  With SEQForm

    k = InStr(SQcode, "\* MERGEFORMAT")
    If k > 0 Then SQcode = Trim(Left(SQcode, k - 1))
       
    j = InStr(SQcode, "\*")
    If j > 0 Then
      For k = 1 To 7
      If InStr(SQcode, NumStyle(k)) > 0 Then  ' "\* " &
        Select Case k
          Case 1: .Btype1.Value = True
          Case 2: .Btype2.Value = True
          Case 3: .Btype3.Value = True
          Case 4: .Btype4.Value = True
          Case 5: .Btype5.Value = True
          Case 6: .Btype6.Value = True
          Case 7: .Btype7.Value = True
        End Select
        End If
      Next k
    Else
      j = InStr(SQcode, "\#")
      If j > 0 Then
        ss = Trim(Mid(SQcode, j + 3))
        j = InStr(ss, "\")
        If j > 1 Then ss = Trim(Left(ss, j - 1))
        If NumStyle(8) = ss Then .Btype8.Value = True Else .Btype8.Value = False
        If NumStyle(9) = ss Then .Btype9.Value = True Else .Btype9.Value = False
        If NumStyle(10) = ss Then .Btype10.Value = True Else .Btype10.Value = False
        .CustomTextbox.Value = ""
        If .Btype8 = False And .Btype9 = False And .Btype10 = False Then
          .Btype11.Value = True
          .CustomTextbox.Value = ss
        End If
      End If
    End If

    .NumbRestartOption = False
    .NumbPreviousOption = False
    .NumbHideCheckbox = False
    If InStr(SQcode, "\c") > 0 Then .NumbPreviousOption = True
    If InStr(SQcode, "\h") > 0 Then .NumbHideCheckbox.Value = True
    k = InStr(SQcode, "\r")
    If k > 0 Then
      s = Trim(Mid(SQcode, k + 2))
      j = InStr(s, " ")
      If j > 0 Then s = Left(s, j - 1)
      .StartNoTextbox.Value = s
      .NumbRestartOption = True
    End If
     k = InStr(SQcode, "\s")
     If k > 0 Then
      s = Trim(Mid(SQcode, k + 2))
      j = InStr(s, " ")
      If j > 0 Then s = Left(s, j - 1)
      .StartNoTextbox.Value = s
      .NumbNextHeadingOption = True
    End If
    If InStr(SQcode, "\n") > 0 Then .NumbNextOption = True
  End With
  Exit Sub

End Sub



Attribute VB_Name = "ShowModule"
Option Explicit
Dim StName() As String
Dim StUsed() As String
Dim StGallery() As String
Dim StTemplate() As Long
Dim StListlevel() As Long
Dim StCount As Long

Sub ShowTemplateNumbering(hpoints As Single, vpoints As Single, keepPosition As Boolean)
Dim LS As List
Dim TP As ListTemplate
Dim ll As ListLevel
Dim s1 As String
Dim s2 As String
Dim k As Long
Dim j As Long
Dim m As Long
  
  With StylesForm
    If Not keepPosition Then
      .StartUpPosition = 0
      .Top = 250
      .Left = hpoints - .Width - 20
    End If
    With .StylesListbox
     .Clear
     .ColumnCount = 4
     .ColumnHeads = False
     .ColumnWidths = "24;80;30;400"
     .AddItem ""
     .List(0, 0) = ""
     .List(0, 1) = "Template type"
     .List(0, 2) = "List"
     .List(0, 3) = "Linked Style(s)"
    End With
  End With
 

  StylesForm.Show
    k = ActiveDocument.ListTemplates.Count
    For j = 1 To k
      With ActiveDocument.ListTemplates(j)
        s1 = ""
        If .OutlineNumbered Then
          s1 = s1 & "Outline  "
          s2 = ""
          For m = 1 To .ListLevels.Count
            s2 = s2 & .ListLevels(m).LinkedStyle & "  "
          Next m
        Else
          If .ListLevels(1).NumberStyle = 23 Then
            s1 = s1 & "Bullet"
          Else
            s1 = s1 & "Single"
          End If
          s2 = .ListLevels(1).LinkedStyle
        End If
      End With
      
      With StylesForm.StylesListbox
        .AddItem ""
        .List(j, 0) = str(j)
        .List(j, 1) = s1
        .List(j, 2) = ""
        .List(j, 3) = s2
       End With
    Next j
    ListsToTemplates
    For j = 1 To k  ' check for dormant list templates
      With StylesForm.StylesListbox
        If .List(j, 2) = "" And Trim(.List(j, 3)) = "" Then .List(j, 1) = "Dormant"
        If .List(j, 2) <> "" And Trim(.List(j, 3)) = "" Then .List(j, 3) = "Ad-hoc"
      End With
    Next j
End Sub

Private Sub ListsToTemplates()
' Step through Lists to match List with a listtemplate
Dim aList As List
Dim apara As Paragraph
Dim aListTemplate As ListTemplate
Dim aRange As Range
Dim aType As Long
Dim j As Long
Dim k As Long
Dim m As Long
Dim kk As Long
Dim mm As Long
Dim LType
  LType = Array("Nothing", "LISTNUM field", "Bullet", "Simple Numeric", "Outline", _
              "Mixed", "Picture bullet")
  k = ActiveDocument.ListTemplates.Count
  On Error Resume Next   ' **** some templates cannot be renamed ******
  For m = 1 To k ' clear names so that there will be no duplicates
    ActiveDocument.ListTemplates(m).Name = ""
  Next m
  For m = 1 To k ' Give each template a name
    ActiveDocument.ListTemplates(m).Name = "List Template" & str(m)
  Next m
  On Error GoTo 0
  kk = ActiveDocument.Lists.Count
  For mm = 1 To kk
    Set aList = ActiveDocument.Lists(mm)
    Set apara = aList.ListParagraphs(1)
    Set aRange = apara.Range
' aRange.Select **** can cause document to de-select
    Set aListTemplate = aRange.ListFormat.ListTemplate ' = nothing if LISTNUM
    If aListTemplate Is Nothing Then
      aType = 1
    Else
      aType = aRange.ListFormat.ListType
    End If
    If aType < 0 Or aType > 6 Then aType = 0
    For m = 1 To k
      If aListTemplate Is Nothing Then Exit For
      If ActiveDocument.ListTemplates(m).Name = aListTemplate.Name Then Exit For
    Next m
    With StylesForm.StylesListbox
      If m > k Then
        If aType = 1 Then
          .List(m - 1, 1) = LType(aType)
          .List(m - 1, 2) = mm
        Else
          .List(m - 1, 1) = "not used"
        End If
      Else
   '   .List(m, 2) = ""
        If .List(m, 2) <> "" Then ' already have a list number against this template
          .AddItem ""
          j = .ListCount - 1
          .List(j, 0) = .List(m, 0) & "+"
          .List(j, 1) = .List(m, 1)
          .List(j, 2) = str(mm)
          .List(j, 3) = .List(m, 3) & " + number reset"
        Else
        .List(m, 2) = str(mm)
        .List(m, 1) = LType(aType)
        End If
      End If
    End With
  Next mm
End Sub


Sub ShowStyleListParas(n As Long, showRange As Boolean, RemoveHighlight As Boolean)
Dim iList As Long
Dim aParagraph As Paragraph
  If n < 1 Then
    showMsg "Style or list not selected"
    Exit Sub
  End If
  iList = Val(StylesForm.StylesListbox.List(n, 2))
  
  If iList < 1 Then
    showMsg "List template is not used"
    Exit Sub
  End If
  If showRange Then
    ActiveDocument.Lists(iList).Range.Select
    Exit Sub
  End If
  
  For Each aParagraph In ActiveDocument.Lists(iList).ListParagraphs
    If RemoveHighlight Then
      aParagraph.Range.HighlightColorIndex = wdNoHighlight
    Else
      aParagraph.Range.HighlightColorIndex = wdPink
    End If
  Next aParagraph

End Sub


Function GetStylesInLists() As Boolean
Dim GalleryNo As Long
Dim LT As Long
Dim ll As Long
Dim galleryType As String
Dim s As String
Dim LinkedStyle As String
  StCount = 0
  ReDim StName(StCount)
  ReDim StUsed(StCount)
  ReDim StGallery(StCount)
  ReDim StTemplate(StCount)
  ReDim StListlevel(StCount)
  With ActiveDocument
    If .ListTemplates.Count < 1 Then
      GetStylesInLists = False
      Exit Function
    End If
  End With

  With ActiveDocument     ' ListGalleries(GalleryNo)
      For LT = 1 To .ListTemplates.Count
        With .ListTemplates(LT)
          For ll = 1 To .ListLevels.Count
            LinkedStyle = .ListLevels(ll).LinkedStyle
            If Len(LinkedStyle) > 0 Then 'there is a linked style
              StCount = StCount + 1
              ReDim Preserve StName(StCount)
              ReDim Preserve StUsed(StCount)
              ReDim Preserve StGallery(StCount)
              ReDim Preserve StTemplate(StCount)
              ReDim Preserve StListlevel(StCount)
              StName(StCount) = LinkedStyle
            '  StUsed(StCount) = "Yes" ' ********* ????????? *********
              StUsed(StCount) = StyleHit(LinkedStyle, LT, ll)
              StUsed(StCount) = isStyleTemplateInUse(LinkedStyle, LT, ll)
              StGallery(StCount) = "Template" '& isStyleTemplateInUse(LinkedStyle, LT, LL)
              StTemplate(StCount) = LT
              StListlevel(StCount) = ll
            End If
          Next ll
        End With
      Next LT
  End With

  sortG
  GetStylesInLists = True
End Function

Function StyleHit(StyName As String, nLT As Long, nLL As Long) As String
' returns "Yes" if style, listtemplate and listlevel match
 Dim LT As Long
 Dim ll As Long
 Dim s As String
   StyleHit = ""
   With ActiveDocument
     If .ListTemplates.Count > 0 Then
       For LT = 1 To .ListTemplates.Count
          With .ListTemplates(LT)
            For ll = 1 To .ListLevels.Count
               s = .ListLevels(ll).LinkedStyle
                 If Len(s) > 0 Then
                   If s = StyName And nLT = LT And nLL = ll Then
                     StyleHit = "YES"
                     Exit Function
                   End If
                 End If
              Next
           End With
        Next
     End If
  End With
End Function

Function isStyleTemplateInUse(sty As String, LT As Long, ll As Long) As String
Dim apara As Paragraph
Dim tt As String
Dim levNo As Long
Dim LN As Long
  isStyleTemplateInUse = ""
  LN = ActiveDocument.ListTemplates(LT).ListLevels.Count
  If ll > LN Then
    MsgBox "LT=" & LT & "  LL=" & ll
    Exit Function  ' Why ????????
  End If
     
  For Each apara In ActiveDocument.Range.Paragraphs
    levNo = apara.Style.ListLevelNumber
    If levNo = ll Then
       tt = apara.Style
      
      If tt = ActiveDocument.ListTemplates(LT).ListLevels(ll).LinkedStyle Then '.ListLevels(LL) Then  'para is using the template LT
          isStyleTemplateInUse = "Yes"
          Exit Function
      End If
    End If
  Next apara
' listlevelnumber=0 if no numbering
End Function

Private Sub sortG()
Dim nameHold As String
Dim usedHold As String
Dim galleryHold As String
Dim templateHold As Long
Dim listlevelHold As Long
Dim j As Long
Dim k As Long

  For j = 1 To StCount - 1
    For k = j + 1 To StCount
      If StName(k) < StName(j) Then
        nameHold = StName(k)
        StName(k) = StName(j)
        StName(j) = nameHold
        usedHold = StUsed(k)
        StUsed(k) = StUsed(j)
        StUsed(j) = usedHold
        galleryHold = StGallery(k)
        StGallery(k) = StGallery(j)
        StGallery(j) = galleryHold
        templateHold = StTemplate(k)
        StTemplate(k) = StTemplate(j)
        StTemplate(j) = templateHold
        listlevelHold = StListlevel(k)
        StListlevel(k) = StListlevel(j)
        StListlevel(j) = listlevelHold
      End If
    Next k
  Next j
End Sub
Private Function GetGalleryName(GalleryNo As Long) As String
  Select Case GalleryNo
    Case wdBulletGallery
      GetGalleryName = "Bullet"
    Case wdNumberGallery
      GetGalleryName = "Number"
    Case wdOutlineNumberGallery
      GetGalleryName = "Outline"
  End Select
End Function

Sub FixStyledLists(n As Long) ' n=1 for all, 2 for outline only
'$Short: Run the style list reporter before running this to
'        ensure all your styles are set up correctly
'        Blows away restarts so needs a pre-check
'        or just use RestartListsAfterHeadings

Dim Para As Paragraph
Dim ListLevel As Long
Dim aStyleNames As New Collection
Dim StyleGalleries As New Collection
Dim ListTemplates As New Collection
Dim ListLevels As New Collection
Dim Style As Variant
Dim pholder_Selection As Range
Dim RestartNumbering As Boolean
Dim restart As Boolean
Dim pCount As Long
pCount = 0
'Numerous problems.
'List style may not have a LT with the stylename in the linked list
'Does a list style have a LT attached
'Is a style with a listtemplate a list style?

Set pholder_Selection = Selection.Range

StyleNameCleanup

Application.ScreenUpdating = False
Options.Pagination = False

GetListStyleNames aStyleNames

'reapply list style definitions

For Each Para In ActiveDocument.Paragraphs
   With Para
     If Para.OutlineLevel = wdOutlineLevelBodyText And n = 2 Then GoTo nextPara
      If InCollection(Para.Style, aStyleNames) Then 'its a list
         restart = IsRestart(.Range.ListFormat)
         ListLevel = .Style.ListLevelNumber
         .Style = ActiveDocument.Styles(Para.Style)
 
         .Range.ListFormat.ListLevelNumber = ListLevel
         pCount = pCount + 1
      Else
          'just in case there is some spurious list template attached ???????????
         ' .Range.ListFormat.RemoveNumbers
      End If
   End With
nextPara:
Next Para
Call showMsg(str(pCount) & " paragraph list styles reset from " & aStyleNames.Count & " styles linked to templates")  ', , "Applying style numbering")
Set aStyleNames = Nothing
Set Para = Nothing
Application.ScreenUpdating = True
Options.Pagination = True
pholder_Selection.Select
End Sub

Private Sub GetListStyleNames(aName As Collection)
Dim LT As Long
Dim ll As Long
Dim StyleName As String
       With ActiveDocument
         If .ListTemplates.Count > 0 Then
            For LT = 1 To .ListTemplates.Count
               With .ListTemplates(LT)
                  For ll = 1 To .ListLevels.Count
                     StyleName = .ListLevels(ll).LinkedStyle
                     If Len(StyleName) > 0 Then
                        aName.Add StyleName
                     End If
                  Next
               End With
            Next LT
         End If
      End With
End Sub

Public Function InCollection(Needle As String, Haystack As Collection) As Boolean
Dim Straw As Variant
If Not (Haystack Is Nothing) Then
   If Haystack.Count > 0 Then
      For Each Straw In Haystack
         If Straw = Needle Then
            InCollection = True
            Exit For
         End If
      Next
   End If
End If
Set Straw = Nothing
End Function

Function InCollection2(key As String, col As Collection) As Boolean
  ' this method assumes that the collection can be accessed by name.
  ' Quicker than stepping through collection
Dim var As Variant
Dim errNumber As Long
  InCollection = False
  Set var = Nothing
  Err.Clear
  On Error Resume Next
    var = col.Item(key)
    errNumber = CLng(Err.Number)
  On Error GoTo 0
  '5 is not in, 0 and 438 represent incollection
  If errNumber = 5 Then ' it is 5 if not in collection
    InCollection = False
  Else
    InCollection = True
  End If
End Function

Public Function IsRestart(aListFormat As ListFormat) As Boolean
'$Short:  Why bother ignoring indented listlevels if you can fix their
'         restarting as well :-)
With aListFormat
   IsRestart = (.ListValue = 1) _
    And (.ListType = wdListSimpleNumbering _
    Or .ListType = wdListOutlineNumbering _
    Or .ListType = wdListMixedNumbering)
End With
End Function

Private Sub StyleNameCleanup()
'$Short  removes the suffixes that stylenames can acquire
Dim aStyle As Style
Dim StartOfSuffix As Long
Dim OldName As String
Dim NewName As String
Dim Finder As Range
Dim aDoc ' ?? added ??
Const Gen As String = "Generic"

' causes crash ********************************************
Exit Sub


On Error Resume Next
Set aDoc = ActiveDocument
aDoc.Styles.Add Gen, wdStyleTypeParagraph ' ????????? aDoc ????????????
On Error GoTo 0
For Each aStyle In aDoc.Styles
   With aStyle
      StartOfSuffix = InStr(1, .NameLocal, ",")
      If StartOfSuffix > 0 Then
         OldName = .NameLocal
         NewName = Left$(.NameLocal, StartOfSuffix - 1)
         'find and replace stylenames
         Set Finder = ActiveDocument.StoryRanges(wdMainTextStory)
         With Finder.Find
            .Style = OldName
            .Replacement.Style = Gen
            .Execute Replace:=wdReplaceAll
         End With
         .NameLocal = NewName
         With Finder.Find
            .Style = Gen
            .Replacement.Style = NewName
            .Execute Replace:=wdReplaceAll
         End With
      End If
   End With
Next
Set aStyle = Nothing
End Sub

Function getParaNo(r As Range) As Long
Dim aR As Range
  'r.Select
  Set aR = ActiveDocument.Range(Start:=0, End:=r.Start)
  getParaNo = aR.Paragraphs.Count
End Function

Sub WhatIsInParagraph(n As Long) ' with based style added
Dim aRange As Range
Dim j As Long
Dim k As Long
Dim L As Long
Dim m As Long
Dim s As String
Dim aStyle As Style
Dim aField As Field
Dim basedOn As String
  Set aRange = Selection.Range.Paragraphs(1).Range
  aRange.Select
  Set aStyle = aRange.Paragraphs(1).Style
  If aRange.Fields.Count > 0 Then
    If aRange.Fields.Count > 1 Then
       If aRange.Fields(1).Type = wdFieldStyleRef And aRange.Fields(2).Type = wdFieldSequence Then
         Set aField = aRange.Fields(2)
         GoTo capt
       End If
    End If
    If aRange.Fields(1).Type = wdFieldSequence Then
      Set aField = aRange.Fields(1)
      GoTo capt
    End If
  End If
  
  L = aRange.Paragraphs(1).Range.ListFormat.ListType
  If L = 1 Then
    If Selection.Paragraphs(1).Range.ListParagraphs.Count <> 1 Then L = 0
  End If
  Select Case L
    Case 0
      s = "with no bullets, no simple or outline numbering" & vbCrLf & "and has no caption numbering."
    Case 1
      s = "has listnum fields in body of paragraph"
    Case 2
      s = "is bulleted"
    Case 3
      s = "with simple numbering"
    Case 4
      s = "is a member of outline numbered list template" & str(findTemplate)
    Case 5
      s = "has mixed templates applied"
    Case 6
      s = "is picture bulleted"
    Case Else
      s = "has unknown numbering"
  End Select
  
  basedOn = aStyle.BaseStyle
 
  With aRange.Paragraphs(1).Range
    If L > 0 Then
    k = ActiveDocument.ListTemplates.Count
    ' get an array of styles used in list templates
    ReDim StName(0)
    ReDim StTemplate(0)
    ReDim StListlevel(0)
    For j = 1 To k
      With ActiveDocument.ListTemplates(j)
        If .OutlineNumbered Then
          For m = 1 To .ListLevels.Count
            ReDim Preserve StName(UBound(StName) + 1)
            StName(UBound(StName)) = .ListLevels(m).LinkedStyle
            ReDim Preserve StTemplate(UBound(StTemplate) + 1)
            StTemplate(UBound(StTemplate)) = j
            ReDim Preserve StListlevel(UBound(StListlevel) + 1)
            StListlevel(UBound(StListlevel)) = m
          Next m
        Else
           ReDim Preserve StName(UBound(StName) + 1)
           StName(UBound(StName)) = .ListLevels(1).LinkedStyle
           ReDim Preserve StTemplate(UBound(StTemplate) + 1)
           StTemplate(UBound(StTemplate)) = j
           ReDim Preserve StListlevel(UBound(StListlevel) + 1)
           StListlevel(UBound(StListlevel)) = 1
        End If
      End With
    Next j
 
      If UBound(StName) > 0 Then
        j = 0
        Do
          j = j + 1
        Loop Until StName(j) = aStyle.NameLocal Or j = UBound(StName)
        If StName(j) = aStyle.NameLocal Then
          s = s & vbCrLf & "This paragraph is associated with list template " & StTemplate(j) & "  has level " & StListlevel(j)
        Else
          s = s & vbCrLf & "This paragraph is not associated with a list template"
        End If
        If basedOn <> "" Then
          j = -1
          Do
            j = j + 1
          Loop Until StName(j) = basedOn Or j = UBound(StName)
          If StName(j) = basedOn Then
            s = s & vbCrLf & "The base style " & basedOn & " is associated with list template " & StTemplate(j)
          End If
        End If
      End If
    End If
    
 '   k = ActiveDocument.Lists.Count
 '   j = 1
 '   m = -1
 '   Do While j <= k
 '     Set aList = ActiveDocument.Lists(j)
 '     For Each apara In aList.ListParagraphs
 '       If apara.Range.InRange(Selection.Range) Then m = j
 '     Next apara
 '     j = j + 1
 '   Loop
 
    m = GetParagraphListNo
    If m > -1 Then s = s & vbCrLf & "and is one of " & str(ActiveDocument.Lists(m).ListParagraphs.Count) & " paragraphs in List " & str(m)
    
    If .ListFormat.ListString <> "" And Asc(.ListFormat.ListString & " ") <> 63 Then ' in case there is a nul liststring
      s = s & vbCrLf & "Numbering string=" & .ListFormat.ListString
    End If
    If aRange.Paragraphs(1).OutlineLevel <> 10 Then _
    s = s & vbCrLf & "Outline level=" & str(aRange.Paragraphs(1).OutlineLevel)
  End With
  
  If basedOn <> "" Then basedOn = "based on " & basedOn & " "
  Call showMsg("Style '" & aStyle.NameLocal & "' " & basedOn & s & " is applied to the paragraph")
  Exit Sub
  
capt:
   s = aField.Code
   j = InStr(s, "SEQ")
   s = Mid(s, j + 4)
   j = InStr(s, " ")
   If j > 1 Then
     s = Left(s, j - 1)
   Else
     showMsg "Cannot find caption type"
     Exit Sub
   End If
 
  With CaptionLabels(s)
    s = "This is a " & .Name & " caption with numbering." & vbCrLf
    If .IncludeChapterNumber Then
      s = s & "Numbering includes number from Heading" & str(.ChapterStyleLevel) & "."
    Else
      s = s & "Numbering does not include heading number."
    End If
  End With
  showMsg s
End Sub

Function GetParagraphListNo() As Long ' returns -1 if not found
Dim aList As List
Dim apara As Paragraph
Dim j As Long
Dim m As Long
    j = 1
    m = -1
    Do While j <= ActiveDocument.Lists.Count
      Set aList = ActiveDocument.Lists(j)
      For Each apara In aList.ListParagraphs
        If apara.Range.InRange(Selection.Range) Then m = j
      Next apara
      j = j + 1
    Loop
    GetParagraphListNo = m
End Function


Sub highlightListParas(highlightColor As Long)
Dim iList As Long
Dim listMax As Long
Dim aList As List
Dim apara As Paragraph
  listMax = ActiveDocument.Lists.Count
  Selection.Range.Paragraphs(1).Range.Select
  For iList = 1 To listMax
    Set aList = ActiveDocument.Lists(iList)
    For Each apara In aList.ListParagraphs
     If Selection.Range.InRange(apara.Range) Then GoTo haveList
    Next apara
  Next iList
  showMsg "Paragraph is not in a numbering list"
  Exit Sub
haveList:
  For Each apara In ActiveDocument.Lists(iList).ListParagraphs
    apara.Range.HighlightColorIndex = highlightColor
  Next apara
End Sub

Sub deleteList(n As Long)
Dim iList As Long
  With StylesForm.StylesListbox
  iList = Val(.List(.ListIndex, 2))
  If iList < 1 Then
    showMsg "List template is not used"
    Exit Sub
  End If
  End With
  ActiveDocument.Lists(iList).ListParagraphs(1).Range.Select
  If Showmsg2("Remove this list and its associated paragraph numbering" & vbCrLf & _
            "WARNING. List and numbering cannot be recovered.", vbYesNo) = vbNo Then Exit Sub
  ActiveDocument.Lists(iList).RemoveNumbers (3)
  Call ShowTemplateNumbering(hpoints, vpoints, True)
End Sub
Attribute VB_Name = "ShowlistsForm"
Attribute VB_Base = "0{3AE1421A-A000-4FA4-921A-04EDEC57CA5F}{893C77C9-D1DA-4D88-AD32-F618252F786C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CancelShowButton_Click()
  ShowlistsForm.hide
End Sub

Private Sub DisplayListsButton_Click()
  executeShowLists (2)
End Sub

Private Sub FixListsButton_Click()
  executeShowLists (3)
End Sub

Private Sub ShowStyleNumberingButton_Click()
  executeShowLists (1)
End Sub
Attribute VB_Name = "StylesForm"
Attribute VB_Base = "0{161B91AC-8CE2-4476-8666-2885F5238D98}{BD7656D7-CFB2-4644-BB47-A0F3ECD31A9F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CloseButton_Click()
  StylesForm.hide
End Sub

Private Sub DeleteListButton_Click()
  deleteList (0)
End Sub

Private Sub HighlightButton_Click()
  Call ShowStyleListParas(StylesForm.StylesListbox.ListIndex, False, False)
End Sub

Private Sub RemoveHighlightButton_Click()
  Call ShowStyleListParas(StylesForm.StylesListbox.ListIndex, False, True)
End Sub

Private Sub ShowStyleRangeButton_Click()
  Call ShowStyleListParas(StylesForm.StylesListbox.ListIndex, True, False)
End Sub

Private Sub RefreshButton_Click()
  Call ShowTemplateNumbering(hpoints, vpoints, True)
End Sub
Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "UtilityPrograms"
Option Explicit
' can also use #If VBA7 to see if working in VBA 7 environment

#If Win64 Then
  Private Declare PtrSafe Function GetDC Lib "User32" (ByVal hWnd As Long) As Long
  Private Declare PtrSafe Function ReleaseDC Lib "User32" ( _
    ByVal hWnd As Long, _
    ByVal hDC As Long) As Long
  Private Declare PtrSafe Function GetDeviceCaps Lib "gdi32" ( _
    ByVal hDC As Long, _
    ByVal nIndex As Long) As Long
  Private Declare PtrSafe Function GetSystemMetrics Lib "User32" ( _
    ByVal nIndex As Long) As Long
 ' MsgBox "64 bit version"
#Else
  Private Declare Function GetDC Lib "User32" (ByVal hWnd As Long) As Long
  Private Declare Function ReleaseDC Lib "User32" ( _
    ByVal hWnd As Long, _
    ByVal hDC As Long) As Long
  Private Declare Function GetDeviceCaps Lib "gdi32" ( _
    ByVal hDC As Long, _
    ByVal nIndex As Long) As Long
  Private Declare Function GetSystemMetrics Lib "User32" ( _
    ByVal nIndex As Long) As Long
'MsgBox "32 bit version"
#End If

Const LOGPIXELSX = 88
Const LOGPIXELSY = 90
Const TWIPSPERINCH = 1440
Private Const SM_CXFULLSCREEN = 16 ' also 0 gives overall screenwidth
Private Const SM_CYFULLSCREEN = 17 ' 1 gives overall, 17 gives useable excluding taskbars

Private Sub ConvertPixelsToPoints(ByRef x As Single, ByRef y As Single)
Dim hDC As Long
Dim RetVal As Long
Dim XPixelsPerInch As Long
Dim YPixelsPerInch As Long
    hDC = GetDC(0)
    XPixelsPerInch = GetDeviceCaps(hDC, LOGPIXELSX)
    YPixelsPerInch = GetDeviceCaps(hDC, LOGPIXELSY)
    RetVal = ReleaseDC(0, hDC)
    x = x * TWIPSPERINCH / 20 / XPixelsPerInch
    y = y * TWIPSPERINCH / 20 / YPixelsPerInch
End Sub
Sub GiveScreenPoints(ByRef scx As Single, ByRef scy As Single)
Dim wt As Single
Dim ht As Single
 wt = GetSystemMetrics(SM_CXFULLSCREEN)
 ht = GetSystemMetrics(SM_CYFULLSCREEN)
 ConvertPixelsToPoints wt, ht
 scx = wt
 scy = ht
End Sub
 


' InQuest injected base64 decoded content
' yJiz
' yJiz
' zPhw$

INQUEST-PP=macro
