Attribute VB_Name = "Module1"
Const mVersion As String = "Rev 190711"
Dim OutRow As Integer
Dim LastItem(1) As Integer
Dim List(1, 400) As String
Dim Count(1, 400) As Single
Dim Length(1, 400) As Single
Dim ItemCode(1, 400) As String
Dim ConnList(2, 300) As String: Dim LastConnItem As Integer
Dim ChartStuff(4, 300) As String: Dim LastChartItem As Integer
Dim HolePlugList(1, 300) As String: Dim LastHolePlugItem As Integer
Dim LWLastItem As Integer: Dim LWItm(90) As String: Dim LWMrk(90) As String: Dim LWPn(90) As String:
Dim LWPos(90) As String: Dim LWLen(90) As String: Dim LWmm2(90) As Single: Dim LWcolor(90) As Long
Dim RWLastItem As Integer: Dim RWItm(90) As String: Dim RWMrk(90) As String: Dim RWPn(90) As String
Dim RWPos(90) As String: Dim RWLen(90) As String: Dim RWmm2(90) As Single: Dim RWcolor(90) As Long
Dim Wwarning As String
Dim HoleString As String
Const MaxRow As Integer = 700
Const ItmCol = "A": Const SeqCol = "B": Const QtyCol = "C": Const MrkCol = "D": Const PNCol = "E": Const LenCol = "F": Const StrpACol = "G"
Const TrmACol = "H": Const AccACol = "L": Const CpnACol = "M": Const LabACol = "N": Const ConACol = "O": Const PosACol = "P": Const StrpBCol = "Q"
Const TrmBCol = "R": Const AccBCol = "V": Const CpnBCol = "W": Const LabBCol = "X": Const ConBCol = "Y": Const PosBCol = "Z"
Const CodeACol = "AB": Const CodeBCol = "AC"
Const Plug1Col = "E": Const Plug2Col = "F"
Const Seal1Col = "G": Const SealG1Col = "H": Const Seal2Col = "I": Const SealG2Col = "J"
Const AccQ1Col = "K": Const Acc1Col = "L": Const AccQ2Col = "M": Const Acc2Col = "N"
Dim ExcludeWeld As Boolean: Dim Dissimilar As Boolean: Dim ColorEnabled As Boolean: Dim ShowBrackets As Boolean
Dim HPchoice As Integer
Dim IgnoreColor As Long
Function WireColor(ByVal Text) As String ' extract wire color from part num 190328
    Text = UCase(Text)
    If Text = "" Then Exit Function
    GetStripe Text
    If InStr(Text, "BLACK") Or InStr(Text, "BLK") Or InStr(Text, "BK") Then
        WireColor = "BLK"
    ElseIf InStr(Text, "RD") Or InStr(Text, "RED") Then
        WireColor = "RED"
    ElseIf InStr(Text, "BROWN") Or InStr(Text, "BRN") Or InStr(Text, "BN") Then
        WireColor = "BRN"
    ElseIf InStr(Text, "OR") Then
        WireColor = "ORG"
    ElseIf InStr(Text, "YEL") Or InStr(Text, "YL") Then
        WireColor = "YEL"
    ElseIf InStr(Text, "LGR") Or InStr(Text, "LTG") Then
        WireColor = "LGR"
    ElseIf InStr(Text, "GREEN") Or InStr(Text, "GRN") Or InStr(Text, "GN") Or InStr(Text, "DGR") Then
        WireColor = "GRN"
    ElseIf InStr(Text, "LBL") Or InStr(Text, "LTBLU") Then
        WireColor = "LBL"
    ElseIf InStr(Text, "BLU") Or InStr(Text, "BU") Or InStr(Text, "DBL") Then
        WireColor = "BLU"
    ElseIf InStr(Text, "VIO") Or InStr(Text, "PUR") Then
        WireColor = "PUR"
    ElseIf InStr(Text, "GRAY") Or InStr(Text, "GREY") Or InStr(Text, "GRY") Or InStr(Text, "GY") Then
        WireColor = "GRY"
    ElseIf InStr(Text, "WHITE") Or InStr(Text, "WHT") Or InStr(Text, "WT") Then
        WireColor = "WHT"
    ElseIf InStr(Text, "PINK") Or InStr(Text, "PNK") Or InStr(Text, "PK") Then
        WireColor = "PNK"
    ElseIf InStr(Text, "TAN") Or InStr(Text, "TN") Then
        WireColor = "TAN"
    End If
End Function
Sub GetStripe(Text)
    PosOfSlash = InStr(Text, "/")
    If PosOfSlash > 1 Then 'striped wire  example RED/WHT
        cc = Mid(Text, PosOfSlash - 1, 1)
        If IsNumeric(cc) Then Exit Sub ' part number with slash in it
        Text = Left(Text, PosOfSlash - 1) ' keep just the first part to extract color from
        If InStr(Text, ",") > 0 Then Text = Mid(Text, 1 + InStr(Text, ","), 99)
        If InStr(Text, ",") > 0 Then Text = Mid(Text, 1 + InStr(Text, ","), 99)
    End If
End Sub
Sub test180411()
    x = StampColor("100", "HFSXL, 18GA, LBL", "KOMATSU")
End Sub
Function StampColor(MarkingText As String, WireText As String, Customer As String) As String ' 190328
    Small = False
    If InStr(WireText, "24") Then Small = True
    If InStr(WireText, "22") Then Small = True
    If InStr(WireText, "20") Then Small = True
    If InStr(WireText, "18") Then Small = True
    If InStr(WireText, "16") Then Small = True
    If InStr(WireText, "14") Then Small = True
    If InStr(WireText, "12") Then Small = True
    If Small = False Then
        StampColor = "?ga?"
    Else
        Customer = UCase(Customer)
        Select Case Customer
        Case "GENERAL", "TEREX", "VERMEER", "JOHN DEERE", "KOMATSU", "GREEN/BLACK STAMP"
            Wcolor = WireColor(WireText)
            If WireText = "" Then Exit Function
            Select Case Wcolor
            Case "BLK"
                StampColor = "WHITE"
            Case "RED"
                Select Case Customer
                    Case "VERMEER", "JOHN DEERE"
                        StampColor = "WHITE"
                    Case Else
                        StampColor = "BLACK"
                End Select
            Case "BRN", "BLU", "PUR"
                StampColor = "WHITE"
            Case "GRN"
                StampColor = IIf(Customer = "GREEN/BLACK STAMP", "BLACK", "WHITE")
            Case "GRY" '090326
                Select Case Customer
                    Case "TEREX"
                        StampColor = "WHITE"
                    Case Else
                        StampColor = "BLACK"
                End Select
            Case "ORG", "YEL", "WHT", "PNK", "TAN", "LBL", "LGR"
                StampColor = "BLACK"
            End Select
            If InStr(WireText, "LT") Or InStr(WireText, "LGT") Then StampColor = "BLACK"  ' light something   this overides all  added LBL,LGR,LGT 180411
        Case Else
            StampColor = "who?"
        End Select
    End If
End Function
Sub Button1_Click()
    ' copy Master Sheet header to other tabs
    Dim lh, ch, rh As String
    Dim Msheet As Worksheet
    Application.StatusBar = "Copying headers... "
    lh = Worksheets("Master Sheet").PageSetup.LeftHeader
    ch = Worksheets("Master Sheet").PageSetup.CenterHeader
    rh = Worksheets("Master Sheet").PageSetup.RightHeader
    Stuff = lh & " " & ch & " " & rh
    Answer = MsgBox(Stuff, vbYesNo + vbQuestion, "Copy headers?")
    If Answer = vbYes Then
        For Each Msheet In Worksheets
            Application.StatusBar = Msheet.Name
            Msheet.PageSetup.LeftHeader = lh
            Msheet.PageSetup.CenterHeader = ch
            Msheet.PageSetup.RightHeader = rh
        Next Msheet
        Application.StatusBar = "Headers copied. "
    Else
        Application.StatusBar = "Headers copied...NOT! "
    End If
End Sub
Sub Button2_Click()
    Application.StatusBar = "Highlighting term cells... "
    Highlighter "Cutters", 8, 7
    Highlighter "Cutters", 13, 12
    Highlighter "Black Stamp", 8, 7
    Highlighter "Black Stamp", 13, 12
    Highlighter "White Stamp", 8, 7
    Highlighter "White Stamp", 13, 12
    Highlighter "Cable", 8, 7
    Highlighter "Cable", 13, 12
    Application.StatusBar = "Cells highlighted! "
End Sub
Sub Highlighter(Msheet As String, TestColumn, HighlightColumn)
    For Row = 3 To MaxRow
        TestCell = Worksheets(Msheet).Cells(Row, TestColumn).Value
        If IsError(TestCell) = False Then  ' cell is not #N/A
            If TestCell <> 0 Then ' cell is not zero
                If Len(TestCell) > 0 Then ' term is present
                    Worksheets(Msheet).Cells(Row, HighlightColumn).Interior.Color = RGB(255, 255, 0)
                End If
            End If
        End If
    Next Row
End Sub
Sub SortMasterSheet()
    Worksheets("Master Sheet").Activate
    RangeRC "last row to sort (just before multicore).", LastRow, LastCol
    If LastRow = "" Then Exit Sub
    SrtRng = "B3:AC" & LastRow ' sort Seq#s but leave Item# alone.  722
    SrtCol1 = "AA3:AA" & LastRow ' stamp
    SrtCol2 = "E3:E" & LastRow ' PN
    Range(SrtRng).Select
    With ActiveWorkbook.Worksheets("Master Sheet").Sort
        .SortFields.Clear
        .SortFields.Add Key:=Range(SrtCol1), SortOn:=xlSortOnValues, Order:=xlDescending, DataOption:=xlSortNormal
        .SortFields.Add Key:=Range(SrtCol2), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
        .SetRange Range(SrtRng)
        .Header = xlGuess
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
End Sub
Sub PromptWeld()
    Answer = MsgBox("Ignore anything with prefix WELD or SPLICE?", vbYesNo + vbQuestion, "Exclude WELD")
    ExcludeWeld = (Answer = vbYes)
End Sub
Sub PromptBrackets()
    Answer = MsgBox("Show bracket numbers e.g.[22]?", vbYesNo + vbQuestion, "[]?")
    ShowBrackets = (Answer = vbYes)
End Sub
Sub Pprint(V1, V2, V3)
    If Not ShowBrackets Then V1 = KillBrackets(V1)
    With Worksheets("Parts")
        .Cells(OutRow, 1).Value = V1
        .Cells(OutRow, 2).Value = V2
        .Cells(OutRow, 3).Value = V3
    End With
    Inc OutRow
End Sub
Sub PartsPanel()
    UserFormParts.Caption = "Parts   " & mVersion
    UserFormParts.Show vbModeless
End Sub
Sub AnalyzeParts() '150515
    OutRow = 2
    ShowBrackets = UserFormParts.CheckBoxBN 'PromptBrackets
    ExcludeWeld = UserFormParts.CheckBoxIgnore 'PromptWeld
    IgnoreColor = RGB(112, 48, 160) ' purple
    ClearArea "Parts", "A1:C999"
    Text = "Parts Tab generated: " & Date & " by " & Application.UserName
    Worksheets("Parts").Cells(1, 1).Value = Text
    AnalyzeColumn 1, 0, PNCol, LenCol
    PrintList "Wire", 1
    AnalyzeColumn 4, 0, TrmACol, TrmBCol
    PrintList "Term", 2
    AnalyzeColumn 2, 0, AccACol, AccBCol
    PrintList "Accessories", 2
    AnalyzeColumn 3, 0, CpnACol, CpnBCol
    PrintList "Connector", 3
    If UserFormParts.CheckBoxAcc = True Then AnalyzeAcc
    UserFormParts.Hide
End Sub
Sub AnalyzeColumn(Ztype As Integer, Lnum, ByVal ZcolumnA, ByVal ZcolumnB) '414
    Dim ZnameA As String
    Dim ZnameB As String
    Dim Qty As Single
    Dim Zlength As Single
    List(Lnum, 0) = "": LastItem(0) = 0
    With Worksheets("Master Sheet")
    If Ztype = 1 Then Lfeet = UserFormParts.CheckBoxFeet
    For Row = 3 To MaxRow
        If .Cells(Row, QtyCol).Value = "" Then ' blank
            Qty = 1
        Else
            Qty = Val(.Cells(Row, QtyCol).Value)
        End If
        Select Case Ztype
        Case 0 ' 1 column, count only
            If .Cells(Row, ZcolumnA).Font.Color <> IgnoreColor Then
                ZnameA = .Cells(Row, ZcolumnA).Value
                AnalyzeItem 0, Lnum, ZnameA, Qty
            End If
        Case 1  ' 1 column, count and length
            If .Cells(Row, ZcolumnA).Font.Color <> IgnoreColor Then
                ZnameA = .Cells(Row, ZcolumnA).Value
                Zlength = Val(.Cells(Row, ZcolumnB).Value) ' length is passed in ZcolumnB
                If Lfeet Then Zlength = Zlength / 12
                Zlength = Zlength * Qty
                AnalyzeItem 1, Lnum, ZnameA, Qty, Zlength
            End If
        Case 2 ' 2 columns, count only
            If .Cells(Row, ZcolumnA).Font.Color <> IgnoreColor Then
                ZnameA = .Cells(Row, ZcolumnA).Value
                AnalyzeItem Ztype, Lnum, ZnameA, Qty
            End If
            If .Cells(Row, ZcolumnB).Font.Color <> IgnoreColor Then
                ZnameB = .Cells(Row, ZcolumnB).Value
                AnalyzeItem Ztype, Lnum, ZnameB, Qty
            End If
        Case 3 ' connectors
            If .Cells(Row, ZcolumnA).Font.Color <> IgnoreColor Then
                ZnameA = .Cells(Row, CpnACol).Value & "~" & .Cells(Row, ConACol)
                AnalyzeItem Ztype, Lnum, ZnameA, Qty
                ZnameB = .Cells(Row, CpnBCol).Value & "~" & .Cells(Row, ConBCol)
                AnalyzeItem Ztype, Lnum, ZnameB, Qty
            End If
        Case 4  ' terms 2 columns - Zcode determines count
            ZcodeA = .Cells(Row, CodeACol).Value
            ZcodeB = .Cells(Row, CodeBCol).Value
            If .Cells(Row, ZcolumnA).Font.Color <> IgnoreColor Then
                ZnameA = .Cells(Row, ZcolumnA).Value
                AnalyzeItem Ztype, Lnum, ZnameA, Qty, 0, ZcodeA
            End If
            If .Cells(Row, ZcolumnB).Font.Color <> IgnoreColor Then
                ZnameB = .Cells(Row, ZcolumnB).Value
                AnalyzeItem Ztype, Lnum, ZnameB, Qty, 0, ZcodeB
            End If
        End Select
    Next Row
    End With
End Sub
Sub AnalyzeParts2016() '515
    OutRow = 2
    Answer = MsgBox("This will overwrite the Parts tab! Continue?", vbYesNo + vbQuestion, "Continue?")
    If Answer = vbYes Then
        PromptWeld
        ClearArea "Parts", "A1:C999"
        IgnoreColor = RGB(112, 48, 160) ' purple
        Text = "Parts Tab generated: " & Date & " by " & Application.UserName
        Worksheets("Parts").Cells(1, 1).Value = Text
        AnalyzeColumn 1, 0, PNCol, LenCol
        PrintList "Wire", 1
        AnalyzeColumn 4, 0, TrmACol, TrmBCol
        PrintList "Term", 2
        AnalyzeConnector "C", ""
        PrintList "Connector from Connectors tab", 0
        AnalyzeConnectorQty "O", Plug1Col, "P", Plug2Col
        PrintList "Hole Plug from Connectors tab", 0
        AnalyzeConnectorQty AccQ1Col, Acc1Col, AccQ2Col, Acc2Col
        PrintList "Accessory from Connectors tab", 0
        AnalyzeColumn 4, 0, AccACol, AccBCol
        PrintList "Accessory from Master tab", 0
    End If
End Sub
Sub AnalyzeConnector(ZcolumnA, ZcolumnB)  '160304
    Dim ZnameA As String
    Dim ZnameB As String
    Qty = 1: Ztype = 0 ' PNs - Qty 1
    List(Lnum, 0) = "": LastItem(0) = 0
    With Worksheets("Connectors")
    For Row = 3 To 200
        If Len(ZcolumnA) > 0 Then
            ZnameA = .Cells(Row, ZcolumnA).Value
            If ZnameA <> "-" Then AnalyzeItem Ztype, 0, ZnameA, Qty
        End If
        If Len(ZcolumnB) > 0 Then
            ZnameB = .Cells(Row, ZcolumnB).Value
            If ZnameB <> "-" Then AnalyzeItem Ztype, 0, ZnameB, Qty
        End If
    Next Row
    End With
End Sub
Sub AnalyzeConnectorQty(QcolumnA, TextColumnA, QcolumnB, TextColumnB) '160304
    Dim ZnameA As String
    Dim ZnameB As String
    Ztype = 0
    List(Lnum, 0) = "": LastItem(0) = 0
    With Worksheets("Connectors")
    For Row = 3 To 200
        Qty = Val(.Cells(Row, QcolumnA).Value)
        ZnameA = .Cells(Row, TextColumnA).Value
        AnalyzeItem Ztype, 0, ZnameA, Qty
        Qty = Val(.Cells(Row, QcolumnB).Value)
        ZnameB = .Cells(Row, TextColumnB).Value
        AnalyzeItem Ztype, 0, ZnameB, Qty
    Next Row
    End With
End Sub
Sub AssignConnLabels()
    Answer = MsgBox("This will overwrite the Label and P/N column on Master! Continue?", vbYesNo + vbQuestion, "Continue?")
    If Answer = vbNo Then Exit Sub
    For Row = 3 To 200
        Ref = Worksheets("Connectors").Cells(Row, "A").Value
        If Ref = "" Then Exit For
        PN = Worksheets("Connectors").Cells(Row, "C").Value
        Label = Worksheets("Connectors").Cells(Row, "B").Value
        AssignCells Ref, Label, ConACol, LabACol, ConBCol, LabBCol
        AssignCells Ref, PN, ConACol, CpnACol, ConBCol, CpnBCol
    Next Row
End Sub
Sub AssignSeals()
    Answer = MsgBox("This will overwrite the Acc column on Master! Continue?", vbYesNo + vbQuestion, "Continue?")
    If Answer = vbNo Then Exit Sub
    Dim Seal1 As String: Dim SealAwg1 As String
    Dim Seal2 As String: Dim SealAwg2 As String
    Worksheets("Master Sheet").Activate
    For Row = 3 To 200
        Ref = Worksheets("Connectors").Cells(Row, "A").Value
        If Ref = "" Then Exit For
        Seal1 = Worksheets("Connectors").Cells(Row, Seal1Col).Value
        SealAwg1 = Worksheets("Connectors").Cells(Row, SealG1Col).Value
        Seal2 = Worksheets("Connectors").Cells(Row, Seal2Col).Value
        SealAwg2 = Worksheets("Connectors").Cells(Row, SealG2Col).Value
        AssignCellsAwg Ref, Seal1, Seal2, ConACol, AccACol, ConBCol, AccBCol, SealAwg1, SealAwg2
    Next Row
End Sub
Sub AssignCells(Text1, Text2, ColA1, ColA2, ColB1, ColB2)
    With Worksheets("Master Sheet")
    For Row = 3 To MaxRow
        If Trim(Text1) = Trim(.Cells(Row, ColA1)) Then .Cells(Row, ColA2) = Text2
        If Trim(Text1) = Trim(.Cells(Row, ColB1)) Then .Cells(Row, ColB2) = Text2
    Next Row
    End With
End Sub
Sub AssignCellsAwg(Ref, Seal1, Seal2, ColA1, ColA2, ColB1, ColB2, Awg1, Awg2)
    If Awg1 = "" And Awg2 = "" Then Exit Sub
    With Worksheets("Master Sheet")
    For Row = 3 To MaxRow
        If Trim(Ref) = Trim(.Cells(Row, ColA1)) Then
            PN = .Cells(Row, PNCol)
            Ga = Awg(PN)
            If Ga = "" Then
                MsgBox ("Can not determine gauge from " & PN)
            Else
                If InStr(Awg1, Ga) > 0 Then .Cells(Row, ColA2) = Seal1
                If InStr(Awg2, Ga) > 0 Then .Cells(Row, ColA2) = Seal2
            End If
        End If
        If Trim(Ref) = Trim(.Cells(Row, ColB1)) Then
            PN = .Cells(Row, PNCol)
            Ga = Awg(PN)
            If Ga = "" Then
                MsgBox ("Can not determine gauge from " & PN)
            Else
                MsgBox ("Gauge = " & Ga)
                If InStr(Awg1, Ga) > 0 Then .Cells(Row, ColB2) = Seal1
                If InStr(Awg2, Ga) > 0 Then .Cells(Row, ColB2) = Seal2
            End If
        End If
    Next Row
    End With
End Sub
Sub PrintList(Title As String, Ztype As Integer) '717
    Dim ZnameA As String '
    Dim ZnameB As String '
    Dim Qty As Single '
    temp = "Analysis of : " & Title
    Pprint temp, "", ""
    FirstRow = OutRow
    FirstCol = "A"
    Select Case Ztype
        Case 1: Pprint "Part", "Count", "Length"
        Case 0, 2, 4: Pprint "Part", "Count", ""
        Case 3: Pprint "Part", "", ""
    End Select
    FirstRow = OutRow
    For ii = 1 To LastItem(0)
        Select Case Ztype ' Ztype 0 = 1 column, count only   1 = 1 column, count and length    2 = 2 columns, count only   3 = connectors   4 = terms
        Case 1
            Plength = Round(Length(0, ii), 1)
            Pprint List(0, ii), Count(0, ii), Plength
        Case 0, 2, 4
            Pprint List(0, ii), Count(0, ii), ""
        Case 3
            Delimiter = InStr(List(0, ii), "~")
            cpn = Left(List(0, ii), Delimiter - 1)
            cnm = Mid(List(0, ii), Delimiter + 1)
            Pprint cpn, cnm, ""
        End Select
    Next ii
    LastRow = OutRow - 1
    Select Case Ztype
        Case 1: LastCol = "C"
        Case 0, 2, 3: LastCol = "B"
    End Select
    BrdrRng = FirstCol & Format(FirstRow - 1, "#") & ":" & LastCol & Format(LastRow, "#")
    Worksheets("Parts").Activate
    Range(BrdrRng).Select
    With Selection.Borders
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    Selection.HorizontalAlignment = xlCenter
    Selection.VerticalAlignment = xlBottom
    If Ztype = 1 Then
        SortSheet FirstRow, LastRow, "A", "C", "A", "Parts" ' extra column for length
    Else
        SortSheet FirstRow, LastRow, "A", "B", "A", "Parts"
    End If
    Inc OutRow
End Sub
Sub AnalyzeItem(Ztype, Lnum, InText, Optional ByVal InQty = 1, Optional Inlength = 0, Optional Zcode = "") '717
' search for item in list. If not found, add to list.
    Dim ii As Integer
    Found = False
    Ztext = Trim(InText)
    If Ztext = "" Then Exit Sub
    If ExcludeWeld And UCase(Left(Ztext, 4)) = "WELD" Then Exit Sub
    If ExcludeWeld And UCase(Left(Ztext, 6)) = "SPLICE" Then Exit Sub
    For ii = 0 To LastItem(Lnum)
        If Ztext = List(Lnum, ii) Then ' item found - inc counter - add length
            Found = True
            Select Case Ztype
            Case 0, 2 ' 1 column, count only   or   2 columns, count only
                Count(Lnum, ii) = Count(Lnum, ii) + InQty
            Case 1 ' 1 column, count and length
                Count(Lnum, ii) = Count(Lnum, ii) + InQty
                Length(Lnum, ii) = Length(Lnum, ii) + Inlength
            Case 4  ' terms 2 columns
                FractionQty Zcode, InQty
                Count(Lnum, ii) = Count(Lnum, ii) + InQty
                Debug.Print Count(Lnum, ii)
            End Select
        End If
        If Found Then Exit For
    Next ii
    If Not Found Then ' add new item to list
        Inc LastItem(Lnum)
        List(Lnum, LastItem(Lnum)) = Ztext
        Select Case Ztype
        Case 0, 2
            Count(Lnum, LastItem(Lnum)) = InQty
        Case 1
            Count(Lnum, LastItem(Lnum)) = InQty
            Length(Lnum, LastItem(Lnum)) = Inlength
        Case 4
            FractionQty Zcode, InQty
            Count(Lnum, LastItem(Lnum)) = InQty
        End Select
    End If
End Sub
Sub FractionQty(Zcode, InQty)
    If InStr(UCase(Zcode), "MULTIPLE") > 0 Then  ' multiple wires share 1 term - use a fractional qty.
        If InStr(Zcode, "/3") > 0 Then ' 3 wires
            InQty = 1 / 3
        ElseIf InStr(Zcode, "/4") > 0 Then ' 4 wires
            InQty = 1 / 4
        ElseIf InStr(Zcode, "/5") > 0 Then ' 5 wires
            InQty = 1 / 5
        ElseIf InStr(Zcode, "/6") > 0 Then ' 6 wires
            InQty = 1 / 6
        ElseIf InStr(Zcode, "/7") > 0 Then ' 7 wires
            InQty = 1 / 7
        ElseIf InStr(Zcode, "/8") > 0 Then ' 8 wires
            InQty = 1 / 8
        Else ' default 2
            InQty = InQty / 2
        End If
    End If
End Sub
Sub SortSheet(FirstRow, LastRow, FirstColumn, LastColumn, SortColumn, SheetName)
    If LastRow - FirstRow < 3 Then Exit Sub ' dont bother with small groups
    SrtRng = FirstColumn & Format(FirstRow, "#") & ":" & LastColumn & Format(LastRow, "#")
    SrtRngCol = SortColumn & Format(FirstRow, "#") & ":" & SortColumn & Format(LastRow, "#")
    Range(SrtRng).Select
    ActiveWorkbook.Worksheets("Parts").Sort.SortFields.Clear
    ActiveWorkbook.Worksheets("Parts").Sort.SortFields.Add Key:=Range(SrtRngCol), _
        SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    With ActiveWorkbook.Worksheets("Parts").Sort
        .SetRange Range(SrtRng)
        .Header = xlGuess
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
End Sub
Sub AnalyzeAcc() ' 716
    List(0, 0) = "": LastItem(0) = 0
    With Worksheets("Charts")
    For Row = 1 To 1000
        For Col = 1 To 30
            If .Cells(Row, Col).Value = "Accessories" Then
                AccRow = Row + 1
                Do
                    AccText = .Cells(AccRow, Col).Value
                    If AccText = "" Then Exit Do
                    AccQty = .Cells(AccRow, Col - 2).Value
                    AnalyzeItem 0, 0, AccText, AccQty
                    Inc AccRow
                Loop
            End If
        Next Col
    Next Row
    End With
    PrintList "Accessories from Charts tab", 0
End Sub
Sub ClearArea(ShName, Rng)
    Worksheets(ShName).Activate
    Range(Rng).Select
    Selection.Clear
    Range("$A$1:$A$1").Select
End Sub
Sub ChartsPanel()
    UserFormCharts.Caption = "Charts   " & mVersion
    UserFormCharts.Show vbModeless
End Sub
Sub CreateCharts()
    Dim ii As Integer
    ShowBrackets = UserFormCharts.CheckBoxBN 'PromptBrackets
    ExcludeWeld = UserFormCharts.CheckBoxIgnore 'PromptWeld
    Worksheets("Charts").Activate
    ClearArea "Charts", "A1:H1999"
    CreateConnList
    If UserFormCharts.CheckBoxSort = True Then BubbleSortList 0
    OutRow = 1 'was 3
    IgnoreColor = RGB(0, 112, 192) 'blue
    For ii = 1 To LastItem(0)
        CollectPositions List(0, ii)
    Next ii
    UserFormCharts.Hide
End Sub
Sub CreateConnList() ' create list of unique connector identifiers
    Dim CnameA As String
    Dim CnameB As String
    SheetName = "Master Sheet"
    List(0, 0) = "": LastItem(0) = 0
    For Row = 3 To MaxRow
        CnameA = Worksheets(SheetName).Cells(Row, ConACol).Value
        AnalyzeItem 0, 0, CnameA
        CnameB = Worksheets(SheetName).Cells(Row, ConBCol).Value
        AnalyzeItem 0, 0, CnameB
    Next Row
End Sub
Sub CollectPositions(Text As String) ' make chart for one connector defined by Text 728
    Dim CnameA As String
    Dim CnameB As String
    Dim CStamp As String
    Dim TestText As String
    If Text = "" Then Exit Sub
    TestText = Text
    Application.StatusBar = Text
    FirstRow = OutRow
    OutRow = OutRow + 2
    Cprint 1, "Item#", "Marking", "Wire", "Pos", "Connector", "ConnPN", "Label"
    With Worksheets("Master Sheet")
    For Row = 3 To MaxRow ' collect wires
        CnameA = Trim(.Cells(Row, ConACol).Value)
        If CnameA = Text Then
            If Not IsEmpty(.Cells(Row, PNCol).Value) Then  ' wire
                CItem = .Cells(Row, ItmCol).Value
                CStamp = .Cells(Row, MrkCol).Value
                cpn = .Cells(Row, PNCol).Value
                If Not ShowBrackets Then cpn = KillBrackets(cpn)
                Cconnpn = .Cells(Row, CpnACol).Value
                Clabel = .Cells(Row, LabACol).Value
                Cpos = .Cells(Row, PosACol).Value
                Cprint 0, CItem, CStamp, cpn, Cpos, Text, Cconnpn, Clabel
            End If
        End If
        CnameB = Trim(.Cells(Row, ConBCol).Value)
        If CnameB = Text Then
            If Not IsEmpty(.Cells(Row, PNCol).Value) Then ' wire
                CItem = .Cells(Row, ItmCol).Value
                CStamp = .Cells(Row, MrkCol).Value
                cpn = .Cells(Row, PNCol).Value
                If Not ShowBrackets Then cpn = KillBrackets(cpn)
                Cconnpn = .Cells(Row, CpnBCol).Value
                Clabel = .Cells(Row, LabBCol).Value
                Cpos = .Cells(Row, PosBCol).Value
                Cprint 0, CItem, CStamp, cpn, Cpos, Text, Cconnpn, Clabel
            End If
        End If
        If Len(Clabel) > 0 Then Head1 = Clabel
        If Len(Cconnpn) > 0 Then Head2 = Text & " - " & Cconnpn
    Next Row
    ChartHeader FirstRow, Head1
    ChartHeader FirstRow + 1, Head2
    LastItem(0) = 0
    LastItem(1) = 0
    For Row = 3 To MaxRow ' collect accessories
        CnameA = .Cells(Row, ConACol).Value
        If CnameA = TestText Then
            If IsEmpty(.Cells(Row, AccACol).Value) = False Then ' accessory
                If .Cells(Row, AccACol).Font.Color <> IgnoreColor Then AnalyzeItem 0, 1, .Cells(Row, AccACol).Value, .Cells(Row, QtyCol)
            End If
        End If
        CnameB = .Cells(Row, ConBCol).Value
        If CnameB = TestText Then
            If IsEmpty(.Cells(Row, AccBCol).Value) = False Then ' accessory
                If .Cells(Row, AccBCol).Font.Color <> IgnoreColor Then AnalyzeItem 0, 1, .Cells(Row, AccBCol).Value, .Cells(Row, QtyCol)
            End If
        End If
    Next Row
    Lnum = 1
    ColorEnabled = UserFormCharts.CheckBoxColor.Value
    If LastItem(Lnum) > 0 Then
        Cprint 1, "QTY.", "", "Accessories", "", "Connector", "", "", 0
        LRow = Format(OutRow - 1, "#")
        Rng = "A" & LRow & ":C" & LRow
        Range(Rng).Select
        BoldOutLine
    End If
    For ii = 1 To LastItem(Lnum) ' print accessories
        Qty = Count(Lnum, ii)
        CItem = Str(Qty)
        Cacc = List(Lnum, ii)
        Cprint 0, CItem, "", Cacc, "", Text, "", "", 0
    Next ii
    End With
    Inc OutRow
End Sub
Sub CreateCharts2016() 'Connectors tab
    Dim ii As Integer
    Answer = MsgBox("This will overwrite the Charts tab! Continue?", vbYesNo + vbQuestion, "Continue?")
    If Answer = vbNo Then Exit Sub
    Answer = MsgBox("Add color shading?", vbYesNo + vbQuestion, "Color?")
    ColorEnabled = (Answer = vbYes)
    Worksheets("Charts").Activate
    ClearArea "Charts", "A1:H999"
    OutRow = 1 'was 3
    IgnoreColor = RGB(0, 112, 192) 'blue
    For Row = 3 To 200
        CollectPositions2016 Row
    Next Row
End Sub
Sub CollectPositions2016(CRow) ' make chart for one connector defined by Text using Connectors tab.
    Dim LastHoleItem As Integer
    Dim CnameA As String
    Dim CnameB As String
    Dim CStamp As String
    Dim TestText As String
    Text = Worksheets("Connectors").Cells(CRow, "A").Value
    If Text = "" Then Exit Sub
    TestText = Text
    Application.StatusBar = Text
    With Worksheets("Master Sheet")
    Ctype = Worksheets("Connectors").Cells(CRow, "D").Value
    Cconnpn = Worksheets("Connectors").Cells(CRow, "C").Value
    Clabel = Worksheets("Connectors").Cells(CRow, "B").Value
    CreateHoleString Ctype
    LastChartItem = 0
    WireCount = 0
    For Row = 3 To MaxRow ' collect wires
        CnameA = Trim(.Cells(Row, ConACol).Value)
        If CnameA = Text Then
            If Not IsEmpty(.Cells(Row, PNCol).Value) Then  ' wire
                CItem = .Cells(Row, ItmCol).Value
                CStamp = .Cells(Row, MrkCol).Value
                cpn = .Cells(Row, PNCol).Value
                Cpos = .Cells(Row, PosACol).Value
                DeletePin Cpos
                Inc WireCount
                Cstore CItem, CStamp, cpn, Cpos
            End If
        End If
        CnameB = Trim(.Cells(Row, ConBCol).Value)
        If CnameB = Text Then
            If Not IsEmpty(.Cells(Row, PNCol).Value) Then ' wire
                CItem = .Cells(Row, ItmCol).Value
                CStamp = .Cells(Row, MrkCol).Value
                cpn = .Cells(Row, PNCol).Value
                Cpos = .Cells(Row, PosBCol).Value
                DeletePin Cpos
                Inc WireCount
                Cstore CItem, CStamp, cpn, Cpos
            End If
        End If
        If Len(Clabel) > 0 Then Head1 = Clabel
        If Len(Cconnpn) > 0 Then Head2 = Text & " - " & Cconnpn
    Next Row
    FirstRow = OutRow
    OutRow = OutRow + 2
    Cprint 1, "Item#", "Marking", "Wire", "Pos", "", "", ""
    ChartHeader FirstRow, Head1
    ChartHeader FirstRow + 1, Head2
    If Len(Ctype) > 0 Then WeAreCountingHoles = True
    Plug1 = Worksheets("Connectors").Cells(CRow, Plug1Col).Value
    If Plug1 = "" Then WeAreCountingHoles = False
    Plug2 = Worksheets("Connectors").Cells(CRow, Plug2Col).Value
    If Plug2 <> "" Then WeHave2ndPlug = True
    If Len(Worksheets("Connectors").Cells(CRow, Seal1Col).Value) > 0 Then WeAreCountingHoles = True
    If WeAreCountingHoles Then
        PlugCount = 0
        Do Until HoleString = ""
            temp = HoleString
            RemoveFirst Cpos
            If WeHave2ndPlug Then
                HolePlugMenu Text, Cpos, Plug1, Plug2
                If HPchoice = 1 Then
                    Plug = Plug1
                    Inc PlugCount1
                Else
                    Plug = Plug2
                    Inc PlugCount2
                End If
            Else
                Inc PlugCount1
                Plug = Plug1
            End If
            Cprint 0, "", "", Plug, Cpos, "Hole", "", ""
        Loop
        Worksheets("Connectors").Cells(CRow, "O").Value = PlugCount1
        Worksheets("Connectors").Cells(CRow, "P").Value = PlugCount2
    End If
    For ii = 1 To LastChartItem
        Crecall ii, CItem, CStamp, cpn, Cpos
        Cprint 0, CItem, CStamp, cpn, Cpos, "", "", ""
    Next ii
    
    AccRow = OutRow
    Inc OutRow
    HasAcc = False
' print accessories
    If WeAreCountingHoles And PlugCount > 0 Then
        Cprint 0, Str(PlugCount), "", Worksheets("Connectors").Cells(CRow, Plug1Col).Value, "", "", "", "", 0
        HasAcc = True
    End If
    If Not IsEmpty(Worksheets("Connectors").Cells(CRow, Seal1Col).Value) Then
        If .Cells(CRow, Seal1Col).Font.Color <> IgnoreColor Then
            Cprint 0, Str(WireCount), "", Worksheets("Connectors").Cells(CRow, Seal1Col).Value, "", "", "", "", 0
            HasAcc = True
        End If
    End If
    If Not IsEmpty(Worksheets("Connectors").Cells(CRow, Acc1Col).Value) Then
        If .Cells(CRow, Acc1Col).Font.Color <> IgnoreColor Then
            Cprint 0, Worksheets("Connectors").Cells(CRow, AccQ1Col).Value, "", Worksheets("Connectors").Cells(CRow, Acc1Col).Value, "", "", "", "", 0
            HasAcc = True
        End If
    End If
    If Not IsEmpty(Worksheets("Connectors").Cells(CRow, Acc2Col).Value) Then
        If .Cells(CRow, Acc2Col).Font.Color <> IgnoreColor Then
            Cprint 0, Worksheets("Connectors").Cells(CRow, AccQ2Col), "", Worksheets("Connectors").Cells(CRow, Acc2Col).Value, "", "", "", "", 0
            HasAcc = True
        End If
    End If
    LastRow = OutRow
    If HasAcc Then ' add header
        OutRow = AccRow
        Cprint 1, "QTY.", "", "Accessories", "", "", "", "", 0
        LRow = Format(OutRow - 1, "#")
        Rng = "A" & LRow & ":C" & LRow
        Range(Rng).Select
        BoldOutLine
        OutRow = LastRow + 1
    End If
    End With
End Sub
Sub HolePlugMenu(Conn, Pos, Plug1, Plug2)
    UserFormHolePlug.TextBoxConn.Text = Conn
    UserFormHolePlug.TextBoxPos.Text = Pos
    UserFormHolePlug.CommandButtonUse1.Caption = Plug1
    UserFormHolePlug.CommandButtonUse2.Caption = Plug2
    UserFormHolePlug.Show
End Sub
Sub HP1()
    HPchoice = 1
    UserFormHolePlug.Hide
End Sub
Sub HP2()
    HPchoice = 2
    UserFormHolePlug.Hide
End Sub
Sub Cprint(Cbold, V1, V2 As String, V3, V4, V5, V6, V7, Optional Brd4 = 1)   '514
    ShName = "Charts"
    SetCell ShName, OutRow, 1, V1, 1, 1, Cbold
    Worksheets("Charts").Cells(OutRow, 2).NumberFormat = "@" ' stamp is text
    SetCell ShName, OutRow, 2, V2, 1, 1, Cbold
    SetCell ShName, OutRow, 3, V3, 1, 1, Cbold
    SetCell ShName, OutRow, 4, V4, Brd4, 1, Cbold
    SetCell ShName, OutRow, 5, V5, 0, 1, Cbold
    SetCell ShName, OutRow, 6, V6, 0, 1, Cbold
    SetCell ShName, OutRow, 7, V7, 0, 1, Cbold
    If ColorEnabled Then
        'If InStr(V3, "LGT") > 0 Then Stop
        Rng = "A" & Trim(Str(OutRow)) & ":D" & Trim(Str(OutRow))
        Range(Rng).Select
        Colorize Rng, V3
    End If
    Inc OutRow
End Sub
Sub ChartHeader(Row, Head)
    SetCell "Charts", Row, 1, Head, 0, 0, 1
    LRow = Format(Row, "#")
    Rng = "A" & LRow & ":D" & LRow
    Range(Rng).Select
    BoldOutLine
    Selection.Merge True
    Selection.HorizontalAlignment = xlCenter
End Sub
Sub BoldOutLine()
    Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
    Selection.Borders(xlEdgeLeft).Weight = xlMedium
    Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
    Selection.Borders(xlEdgeTop).Weight = xlMedium
    Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
    Selection.Borders(xlEdgeBottom).Weight = xlMedium
    Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
    Selection.Borders(xlEdgeRight).Weight = xlMedium
End Sub
Sub Colorize(RngStr, WirePN) ' 190328
    If InStr(WirePN, "/") > 0 Or WirePN = "Accessories" Then Exit Sub ' stripe
    black = 0: white = 16777215
    Text = WireColor(WirePN)
    Select Case Text
        Case "BLK"
            FontColor = black: CellColor = white
        Case "BLU"
            FontColor = white: CellColor = 16711680
        Case "BRN"
            FontColor = white: CellColor = 13158
        Case "GRN"
            FontColor = white: CellColor = 5287936
        Case "GRY"
            FontColor = black: CellColor = 10921638
        Case "LBL"
            FontColor = black: CellColor = 15849925
        Case "LGR"
            FontColor = black: CellColor = 10213316
        Case "ORG"
            FontColor = black: CellColor = 4626167
        Case "PNK"
            FontColor = black: CellColor = 16751103
        Case "PUR"
            FontColor = black: CellColor = 13082801
        Case "RED"
            FontColor = white: CellColor = 255
        Case "TAN"
            FontColor = black: CellColor = 9420794
        Case "WHT"
            FontColor = black: CellColor = white
        Case "YEL"
            FontColor = black: CellColor = 65535
        Case Else
            FontColor = black: CellColor = white
    End Select
    Selection.Interior.Color = CellColor
    Selection.Font.Color = FontColor
    Selection.Font.Bold = (Text = "BLK")
End Sub
Sub Cstore(CItem, CStamp, cpn, Cpos)
    Inc LastChartItem
    ii = LastChartItem
    ChartStuff(0, ii) = CItem
    ChartStuff(1, ii) = CStamp
    ChartStuff(2, ii) = cpn
    ChartStuff(3, ii) = Cpos
End Sub
Sub Crecall(ii, CItem, CStamp, cpn, Cpos)
    CItem = ChartStuff(0, ii)
    CStamp = ChartStuff(1, ii)
    cpn = ChartStuff(2, ii)
    Cpos = ChartStuff(3, ii)
End Sub
Sub AddToList(List() As String, LastItem, Text)
' search for item in list. If not found, add to list.
    Dim ii As Integer
    Dim Found As Boolean
    Found = False
    Text = Trim(Text)
    Found = IsInList(List(), LastItem, Text)
    If Not Found Then ' add new item to list
        Inc LastItem
        List(LastItem) = Text
    End If
End Sub
Function IsInList(List() As String, LastItem, Text, Optional Index = 0)  ' search for item in list.
    Dim ii As Integer
    Dim Found As Boolean
    Found = False
    Text = Trim(Text)
    For ii = 1 To LastItem
        If Equivalence Then
            If IsEquivalentConnection(Text, List(ii)) Then Found = True
        Else
            If Text = List(ii) Then Found = True
        End If
        If Found Then Exit For
    Next ii
    Index = ii
    IsInList = Found
End Function
Sub AddToChartList(Text) '
    AddToList ChartList(), LastChartItem, Text
End Sub
Function IsInChartList(Text)
    IsInChartList = IsInList(ChartList(), LastChartItem, Text)
End Function
Function ReadConnList() ' read connectors into array for quick access
    Dim Row As Integer: Dim ii As Integer
    With Worksheets("Connectors") ' grab values from Segments sheet
    If Trim(.Cells(StartRow, 1).Value) = "" Then
        MsgBox ("Connector List is empty!")
        ReadConnList = False
    End If
    ii = 1
    For Row = 3 To 300
        ConnList(0, ii) = Trim(.Cells(Row, "A").Value)
        If ConnList(0, ii) = "" Then Exit For ' stop at first blank cell
        ConnList(1, ii) = Trim(.Cells(Row, "B").Value)
        ConnList(2, ii) = Trim(.Cells(Row, "C").Value)
        Inc ii
    Next Row
    End With
    ReadConnList = True
End Function
Sub WeldsPanel()
    UserFormWelds.Caption = "Welds   " & mVersion
    UserFormWelds.Show vbModeless
End Sub
Sub CreateWelds() '190711
    Application.StatusBar = ""
    OutRow = 1
    ClearArea "Weld", "A1:N999"
    If UserFormWelds.CheckBoxSplice = True Then ProcessSplices
    If UserFormWelds.CheckBoxWeld = True Then
        ShowBrackets = UserFormWelds.CheckBoxBN
        Prefix = UserFormWelds.TextBoxPrefix.Value
        CreateWeldList Prefix
        If UserFormWelds.CheckBoxSort = True Then BubbleSortList 0
        Text = "Welds Tab generated: " & Date & " by " & Application.UserName
        SetCell "WELD", OutRow, 1, Text, 0, 0, 1, 0, 0
        Inc OutRow
        SetCell "WELD", OutRow, 1, "ULTRASONIC WELDS:", 0, 0, 1, 0, 0
        Inc OutRow
        For ii = 1 To LastItem(0)
            If Count(0, ii) > 20 Then
                Mess = Str(Count(0, ii)) & " wires in weld: " & List(0, ii) & "! Please fix!"
                MsgBox (Mess)
                Exit Sub
            Else
                CollectWelds List(0, ii), Count(0, ii), Prefix
            End If
        Next ii
    End If
    CreateMultipleList
    CreateTwistList
    UserFormWelds.Hide
End Sub
Sub CreateWeldList(Prefix)  ' create list of unique weld identifiers
    Dim WnameA As String
    Dim WnameB As String
    Dim Qty As Single
    Dim MultiCore As Boolean
    AssignCol ColA, ColB
    SheetName = "Master Sheet"
    List(0, 0) = "": LastItem(0) = 0
    With Worksheets("Master Sheet")
    For Row = 3 To MaxRow
        WnameA = .Cells(Row, ColA).Value
        If Left(WnameA, Len(Prefix)) = Prefix Then
            Application.StatusBar = WnameA
            AnalyzeItem 0, 0, WnameA
        End If
        WnameB = .Cells(Row, ColB).Value
        If Left(WnameB, Len(Prefix)) = Prefix Then
            Application.StatusBar = WnameB
            AnalyzeItem 0, 0, WnameB
        End If
    Next Row
    End With
End Sub
Sub CollectWelds(Text, Wcount, Prefix) ' 414
    Dim WnameA As String
    Dim WnameB As String
    If Text = "" Then Exit Sub
    AssignCol ColA, ColB
    Cyel = RGB(255, 255, 0)
    Dim Wstamp As String
    RWLastItem = 1: LWLastItem = 1
    With Worksheets("Master Sheet")
    For Row = 3 To MaxRow
        RWcolor(RWLastItem) = 0
        LWcolor(LWLastItem) = 0
        WnameA = .Cells(Row, ColA).Value
        WnameB = .Cells(Row, ColB).Value
        If WnameA = Text Or WnameB = Text Then
            If WnameA = Text Then
                Wpos = .Cells(Row, PosACol).Value
            Else
                Wpos = .Cells(Row, PosBCol).Value
            End If
            If UCase(Wpos) = "R" Then ' add info to right weld list
                RWItm(RWLastItem) = .Cells(Row, ItmCol).Value
                RWMrk(RWLastItem) = .Cells(Row, MrkCol).Value
                temp = .Cells(Row, PNCol).Value
                If Not ShowBrackets Then temp = KillBrackets(temp)
                RWPn(RWLastItem) = temp
                RWLen(RWLastItem) = .Cells(Row, LenCol).Value
                RWmm2(RWLastItem) = mm2(RWPn(RWLastItem))
                If WnameA = Text Then
                    RWPos(RWLastItem) = .Cells(Row, PosACol).Value
                Else
                    RWPos(RWLastItem) = .Cells(Row, PosBCol).Value
                End If
                If Left(WnameA, Len(Prefix)) = Prefix And Left(WnameB, Len(Prefix)) = Prefix Then RWcolor(RWLastItem) = Cyel
                Inc RWLastItem
            Else ' add info to left weld list
                LWItm(LWLastItem) = .Cells(Row, ItmCol).Value
                LWMrk(LWLastItem) = .Cells(Row, MrkCol).Value
                temp = .Cells(Row, PNCol).Value
                If Not ShowBrackets Then temp = KillBrackets(temp)
                LWPn(LWLastItem) = temp
                LWLen(LWLastItem) = .Cells(Row, LenCol).Value
                LWmm2(LWLastItem) = mm2(LWPn(LWLastItem))
                If WnameA = Text Then
                    LWPos(LWLastItem) = .Cells(Row, PosACol).Value
                Else
                    LWPos(LWLastItem) = .Cells(Row, PosBCol).Value
                End If
                If Left(WnameA, Len(Prefix)) = Prefix And Left(WnameB, Len(Prefix)) = Prefix Then LWcolor(LWLastItem) = Cyel
                Inc LWLastItem
            End If
            WmcA = .Cells(Row, ConACol).Value
            WmcB = .Cells(Row, ConBCol).Value
        End If
    Next Row
    FirstWire = WireColor(LWPn(1)): Wwarning = ""
    For ii = 1 To LWLastItem - 1
        If WireColor(LWPn(ii)) <> FirstWire Then Wwarning = "D"
    Next ii
    For ii = 1 To RWLastItem - 1
        If WireColor(RWPn(ii)) <> FirstWire Then Wwarning = "D"
    Next ii
    End With
    If Wwarning = "D" Then Wwarning = "Warning: Dissimilar wires in weld!"
    If Wcount = 1 Then Wwarning = "Warning: 1 wire in weld!"
    WprintRL Text
End Sub
Sub AssignCol(ColA, ColB)
        If UserFormWelds.OptionButtonTerm = True Then
             ColA = TrmACol: ColB = TrmBCol ' Term column
        Else
             ColA = ConACol: ColB = ConBCol ' Connector column
        End If
End Sub
Sub WprintRL(WeldName) ' print right and left welds 414
    Fred = RGB(255, 0, 0) ' red
    Fblu = RGB(0, 0, 170) ' blue
    Cwow = RGB(255, 130, 130)
    With Worksheets("Weld")
    ShName = "Weld"
    SetCell ShName, OutRow, 1, WeldName, 0, 0, 1
    If Len(Wwarning) Then SetCell ShName, OutRow, 3, Wwarning, 0, 0, 1, 0, Fred
    Inc OutRow
    SetCell ShName, OutRow, 1, "Item#", 1, 1, 1
    SetCell ShName, OutRow, 2, "Marking", 1, 1, 1
    SetCell ShName, OutRow, 3, "Wire", 1, 1, 1
    SetCell ShName, OutRow, 4, "Pos", 1, 1, 1
    SetCell ShName, OutRow, 5, "Length", 1, 1, 1
    SetCell ShName, OutRow, 6, "mm" & Chr(178), 1, 1, 1, 0, Fblu
    SetCell ShName, OutRow, 9, "mm" & Chr(178), 1, 1, 1, 0, Fblu
    SetCell ShName, OutRow, 10, "Length", 1, 1, 1
    SetCell ShName, OutRow, 11, "Pos", 1, 1, 1
    SetCell ShName, OutRow, 12, "Wire", 1, 1, 1
    SetCell ShName, OutRow, 13, "Marking", 1, 1, 1
    SetCell ShName, OutRow, 14, "Item#", 1, 1, 1
    Inc OutRow
    FirstRow = OutRow
    LastRow = OutRow
    LWtotalmm2 = 0
    For ii = 1 To LWLastItem - 1 ' left
        SetCell ShName, OutRow, 1, LWItm(ii), 1, 1, 0, LWcolor(ii)
        .Cells(OutRow, 2).NumberFormat = "@" ' stamp is text
        SetCell ShName, OutRow, 2, LWMrk(ii), 1, 1, 0, LWcolor(ii)
        SetCell ShName, OutRow, 3, LWPn(ii), 1, 1, 0, LWcolor(ii)
        If LWPos(ii) = "" Then
            SetCell ShName, OutRow, 4, LWPos(ii), 1, 1, 0, Cwow
        Else
            SetCell ShName, OutRow, 4, LWPos(ii), 1, 1, 0, LWcolor(ii)
        End If
        If LWLen(ii) = "" Then
            SetCell ShName, OutRow, 5, "", 1, 1, 0, LWcolor(ii)
        Else
            SetCell ShName, OutRow, 5, LWLen(ii), 1, 1, 0, LWcolor(ii)
        End If
        SetCell ShName, OutRow, 6, Round(LWmm2(ii), 1), 1, 1, 0, LWcolor(ii), Fblu
        LWtotalmm2 = LWtotalmm2 + LWmm2(ii)
        If LWPos(ii) = "L" Then SetCell ShName, OutRow, 7, "---|   ", 0, 1, 1
        Inc OutRow
        If OutRow > LastRow Then LastRow = OutRow
    Next ii
    OutRow = FirstRow
    RWtotalmm2 = 0
    For ii = 1 To RWLastItem - 1 ' right
        If RWPos(ii) = "R" Then SetCell ShName, OutRow, 8, "   |---", 0, 1, 1
        SetCell ShName, OutRow, 9, Round(RWmm2(ii), 1), 1, 1, 0, RWcolor(ii), Fblu
        If RWLen(ii) = "" Then
            SetCell ShName, OutRow, 10, "", 1, 1, 0, RWcolor(ii)
        Else
            SetCell ShName, OutRow, 10, RWLen(ii), 1, 1, 0, RWcolor(ii)
        End If
        SetCell ShName, OutRow, 11, RWPos(ii), 1, 1, 0, RWcolor(ii)
        SetCell ShName, OutRow, 12, RWPn(ii), 1, 1, 0, RWcolor(ii)
        .Cells(OutRow, 13).NumberFormat = "@" ' stamp is text
        SetCell ShName, OutRow, 13, RWMrk(ii), 1, 1, 0, RWcolor(ii)
        SetCell ShName, OutRow, 14, RWItm(ii), 1, 1, 0, RWcolor(ii)
        RWtotalmm2 = RWtotalmm2 + RWmm2(ii)
        Inc OutRow
        If OutRow > LastRow Then LastRow = OutRow
    Next ii
    OutRow = LastRow
    SetCell ShName, OutRow, 6, Round(LWtotalmm2, 1), 0, 1, 0, mmHighlight(LWtotalmm2), Fblu
    SetCell ShName, OutRow, 9, Round(RWtotalmm2, 1), 0, 1, 0, mmHighlight(RWtotalmm2), Fblu
    SetCell ShName, OutRow, 14, Round(LWtotalmm2 + RWtotalmm2, 1), 0, 1, 0, mmHighlight(LWtotalmm2 + RWtotalmm2), Fblu
    Inc OutRow
    End With
End Sub

Sub ProcessSplices()
    ShName = "WELD"
    CreateWeldList "SPLICE"
    SetCell ShName, OutRow, 1, "SOLDER SPLICES:", 0, 0, 1
    Inc OutRow
    For ii = 1 To LastItem(0)
        CollectWelds List(0, ii), Count(0, ii), "SPLICE"
    Next ii
End Sub
Function mm2(Text) ' AWG to mm squared
    If InStr(Text, "26") Then ' added 180910
        mm2 = 0.13
    ElseIf InStr(Text, "24") Then
        mm2 = 0.2
    ElseIf InStr(Text, "22") Then
        mm2 = 0.33
    ElseIf InStr(Text, "20") Then
        mm2 = 0.52
    ElseIf InStr(Text, "18") Then
        mm2 = 0.82
    ElseIf InStr(Text, "16") Then
        mm2 = 1.31
    ElseIf InStr(Text, "14") Then
        mm2 = 2.08
    ElseIf InStr(Text, "12") Then
        mm2 = 3.31
    ElseIf InStr(Text, "10") Then
        mm2 = 5.26
    ElseIf InStr(Text, "8") Then
        mm2 = 8.36
    ElseIf InStr(Text, "1/0") Then
        mm2 = 53.5
    ElseIf InStr(Text, "2/0") Then
        mm2 = 67.4
    ElseIf InStr(Text, "3/0") Then
        mm2 = 85
    ElseIf InStr(Text, "4/0") Then
        mm2 = 107
    ElseIf InStr(Text, "6") Then
        mm2 = 13.3
    ElseIf InStr(Text, "4") Then
        mm2 = 21.4
    ElseIf InStr(Text, "2") Then
        mm2 = 33.6
    ElseIf InStr(Text, "1") Then
        mm2 = 42.4
    End If
End Function
Function Awg(Text) ' extract AWG
    Brackets Text, Btext, Bnum
    If Btext <> "" Then
        Awg = Bnum
        Exit Function
    End If
    If InStr(Text, "24") Then
        Awg = "24"
    ElseIf InStr(Text, "22") Then
        Awg = "22"
    ElseIf InStr(Text, "20") Then
        Awg = "20"
    ElseIf InStr(Text, "18") Then
        Awg = "18"
    ElseIf InStr(Text, "16") Then
        Awg = "16"
    ElseIf InStr(Text, "14") Then
        Awg = "14"
    ElseIf InStr(Text, "12") Then
        Awg = "12"
    ElseIf InStr(Text, "10") Then
        Awg = "10"
    ElseIf InStr(Text, "8") Then
        Awg = "8"
    ElseIf InStr(Text, "1/0") Then
        Awg = "1/0"
    ElseIf InStr(Text, "2/0") Then
        Awg = "2/0"
    ElseIf InStr(Text, "3/0") Then
        Awg = "3/0"
    ElseIf InStr(Text, "4/0") Then
        Awg = "4/0"
    ElseIf InStr(Text, "6") Then
        Awg = "6"
    ElseIf InStr(Text, "4") Then
        Awg = "4"
    ElseIf InStr(Text, "2") Then
        Awg = "2"
    ElseIf InStr(Text, "1") Then
        Awg = "1"
    End If
End Function
Sub Brackets(Text, Btext, Bnum) ' extract bracketed text from Text
    Btext = ""
    Bracket1 = InStr(Text, "[")
    If Bracket1 > 0 Then
        Bracket2 = InStr(Text, "]")
        If Bracket2 > Bracket1 Then
            Btext = Mid(Text, Bracket1, Bracket2 - Bracket1 + 1)
            Bnum = Val(Mid(Btext, 2))
        End If
    End If
End Sub
Function KillBrackets(Text)
    Brackets Text, Btext, Bnum
    If Btext <> "" Then
        KillBrackets = Replace(Text, Btext, "")
    Else
        KillBrackets = Text
    End If
End Function
Sub CreateMultipleList() '171020
    If UserFormWelds.CheckBoxMulti.Value = False Then Exit Sub
    LastItem(0) = 0
    For Row = 3 To MaxRow ' analyze code column for multiple wires in one term
        MnameA = Worksheets("Master Sheet").Cells(Row, CodeACol).Value
        MnameB = Worksheets("Master Sheet").Cells(Row, CodeBCol).Value
        If InStr(UCase(MnameA), "MULTIPLE") Then AnalyzeItem 0, 0, MnameA
        If InStr(UCase(MnameB), "MULTIPLE") Then AnalyzeItem 0, 0, MnameB
    Next Row
    If LastItem(0) = 0 Then Exit Sub
    If UserFormWelds.CheckBoxMultiSort.Value Then BubbleSortList 0
    ShName = "Multiple Term"
    Worksheets(ShName).Activate
    Worksheets(ShName).Cells(1, "F").Value = "Generated: " & Now
    OutRow = 4
    With Worksheets("Master Sheet")
    For ii = 1 To LastItem(0)
        Text = List(0, ii)
        If Count(0, ii) < 2 Then
            MsgBox (Text & " is not multiple! Aborting Multiple processing!")
            Exit Sub
        End If
        Worksheets(ShName).Cells(OutRow, 3).Value = "Term wires together: " & Text
        Inc OutRow
        FirstRow = 0: LastRow = 0
        For Row = 3 To MaxRow
            MnameA = Trim(.Cells(Row, CodeACol).Value)
            MnameB = Trim(.Cells(Row, CodeBCol).Value)
            If MnameA = Text Or MnameB = Text Then
                CopyToMultipleTab Text, Row, OutRow, FirstRow, LastRow, ShName, MnameA, MnameB
            End If
        Next Row
        Cols = "GI"
        For Mcol = 1 To 2
            ColChar = Mid(Cols, Mcol, 1)
            Rng = ColChar & Format(FirstRow, "#") & ":" & ColChar & Format(LastRow, "#")
            Range(Rng).Select
            BoldOutLine
            With Selection
            .VerticalAlignment = xlCenter
            .HorizontalAlignment = xlCenter
            .WrapText = False
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = False
            End With
            Application.DisplayAlerts = False
            Selection.Merge 'True
            Application.DisplayAlerts = True
        Next Mcol
        Inc OutRow
    Next ii
    End With
End Sub
Sub CopyToMultipleTab(Text, Row, OutRow, FirstRow, LastRow, ShName, MnameA, MnameB)
    CopyCell "Master Sheet", Row, 1, ShName, OutRow, 1 ' copy row from Master to shName
    For Column = 3 To 16
        CopyCell "Master Sheet", Row, Column, ShName, OutRow, Column - 1
    Next Column
    If MnameA = Text Then
        CopyCell "Master Sheet", Row, StrpACol, ShName, OutRow, 6
        CopyCell "Master Sheet", Row, TrmACol, ShName, OutRow, 7
        CopyCell "Master Sheet", Row, 22, ShName, OutRow, 9
        CopyCell "Master Sheet", Row, 21, ShName, OutRow, 10
        CopyCellWht "Master Sheet", Row, StrpBCol, ShName, OutRow, 11
        CopyCellWht "Master Sheet", Row, TrmBCol, ShName, OutRow, 12
        CopyCellWht "Master Sheet", Row, 22, ShName, OutRow, 14
        CopyCellWht "Master Sheet", Row, 21, ShName, OutRow, 15
    Else ' MnameB
        CopyCell "Master Sheet", Row, StrpBCol, ShName, OutRow, 6
        CopyCell "Master Sheet", Row, TrmBCol, ShName, OutRow, 7
        CopyCell "Master Sheet", Row, 22, ShName, OutRow, 9
        CopyCell "Master Sheet", Row, 21, ShName, OutRow, 10
        CopyCellWht "Master Sheet", Row, StrpACol, ShName, OutRow, 11
        CopyCellWht "Master Sheet", Row, TrmACol, ShName, OutRow, 12
        CopyCellWht "Master Sheet", Row, 22, ShName, OutRow, 14
        CopyCellWht "Master Sheet", Row, 21, ShName, OutRow, 15
    End If
    If FirstRow = 0 Then
        FirstRow = OutRow
    Else
        LastRow = OutRow
    End If
    Inc OutRow
End Sub
Sub CopyCell(SheetA, RowA, ColA, SheetB, RowB, ColB)
    temp = Worksheets(SheetA).Cells(RowA, ColA).Value
    Worksheets(SheetB).Cells(RowB, ColB).Value = temp
End Sub
Sub CopyCellWht(SheetA, RowA, ColA, SheetB, RowB, ColB) ' same but white font
    Fwht = RGB(255, 255, 255)
    Fwht = RGB(100, 100, 100)
    temp = Worksheets(SheetA).Cells(RowA, ColA).Value
    Worksheets(SheetB).Cells(RowB, ColB).Value = temp
    Worksheets(SheetB).Cells(RowB, ColB).Font.Color = Fwht
End Sub
Sub CreateTwistList() '170718
    If UserFormWelds.CheckBoxTwist.Value = False Then Exit Sub
    LastItem(0) = 0
    For Row = 3 To MaxRow ' analyze code column for twisted pairs
        Mname = Worksheets("Master Sheet").Cells(Row, CodeACol).Value
        If InStr(UCase(Mname), "TWIST") Then
            AnalyzeItem 0, 0, Mname
        End If
    Next Row
    If LastItem(0) = 0 Then Exit Sub
    ShName = "Cable"
    Worksheets(ShName).Activate
    RangeRC "row to add twisted pairs.", LOutRow, ColX
    If LOutRow = "" Then Exit Sub
    OutRow = Val(LOutRow)
    With Worksheets("Master Sheet")
    For ii = 1 To LastItem(0)
        Text = List(0, ii)
        Worksheets(ShName).Cells(OutRow, 1).Value = "Twist wires together: " & Text: Inc OutRow
        For Row = 3 To MaxRow
            Mname = .Cells(Row, CodeACol).Value
            If Mname = Text Then
                CopyCell "Master Sheet", Row, 1, ShName, OutRow, 1 ' copy row from Master to shName
                CopyCell "Master Sheet", Row, 3, ShName, OutRow, 2
                CopyCell "Master Sheet", Row, 4, ShName, OutRow, 3
                CopyCell "Master Sheet", Row, 5, ShName, OutRow, 4
                CopyCell "Master Sheet", Row, 6, ShName, OutRow, 5
                CopyCell "Master Sheet", Row, 7, ShName, OutRow, 6
                CopyCell "Master Sheet", Row, 8, ShName, OutRow, 7
                CopyCell "Master Sheet", Row, 9, ShName, OutRow, 8
                CopyCell "Master Sheet", Row, 12, ShName, OutRow, 9
                CopyCell "Master Sheet", Row, 11, ShName, OutRow, 10
                CopyCell "Master Sheet", Row, 17, ShName, OutRow, 11
                CopyCell "Master Sheet", Row, 18, ShName, OutRow, 12
                CopyCell "Master Sheet", Row, 22, ShName, OutRow, 14
                CopyCell "Master Sheet", Row, 21, ShName, OutRow, 15
                Inc OutRow
            End If
        Next Row
        Inc OutRow
    Next ii
    End With
End Sub
Function mmHighlight(mm2)
    Select Case mm2
    Case 25 To 34: mmColor = RGB(255, 255, 0) ' yellow
    Case Is > 34: mmColor = RGB(255, 99, 99) ' red
    Case Else: mmColor = 0
    End Select
    mmHighlight = mmColor
End Function
Sub SetCell(ShName, Row, Col, Cvalue, Cborder, Ccenter, Optional Cbold = 0, Optional Ccolor = 0, Optional Fcolor = 0) ' 403
    Worksheets(ShName).Cells(Row, Col).Value = Cvalue
    If Cborder Then
        Worksheets(ShName).Cells(Row, Col).Borders.LineStyle = xlContinuous
        Worksheets(ShName).Cells(Row, Col).Borders.Weight = xlThin
    End If
    If Ccenter Then Worksheets(ShName).Cells(Row, Col).HorizontalAlignment = xlCenter
    If Cbold Then Worksheets(ShName).Cells(Row, Col).Font.Bold = True
    If Ccolor > 0 Then Worksheets(ShName).Cells(Row, Col).Interior.Color = Ccolor
    If Fcolor > 0 Then Worksheets(ShName).Cells(Row, Col).Font.Color = Fcolor
End Sub
Sub HideStuff() ' master
    Range("I:K,S:U").EntireColumn.Hidden = True
End Sub
Sub HideStuffGL()
    Range("H:H,M:M").EntireColumn.Hidden = True
End Sub
Sub HideStuffHINO()
    Range("H:I,N:O").EntireColumn.Hidden = True
End Sub
Sub HideStuffHIOP()
    Range("H:I,O:P").EntireColumn.Hidden = True
End Sub
Sub UnhideStuff()
    Cells.EntireColumn.Hidden = False
End Sub
Sub AddDate()
    Row = 2
    Done = False
    Do
        If IsEmpty(Worksheets("Change History").Cells(Row, 1).Value) Then
            Worksheets("Change History").Cells(Row, 1).Value = Date
            Author = Application.UserName
            Worksheets("Change History").Cells(Row, 2).Value = Author
            Done = True
        End If
        Inc Row
    Loop Until Done Or Row > 300
End Sub
Sub LengthPanel()
    UserFormLength.Caption = "Length   " & mVersion
    UserFormLength.Show vbModeless
End Sub
Sub LengthAdjustments(Code)
    Dim AllCells As Boolean
    AllCells = UserFormLength.CheckBoxAll
    If Code = 1 Then Offset = Val(UserFormLength.TextBoxOffset.Value)
    With Worksheets("Master Sheet")
    If AllCells Then
        For Row = 3 To MaxRow
            If IsEmpty(.Cells(Row, LenCol).Value) = False Then
                Cval = Val(.Cells(Row, LenCol).Value)
                Select Case Code
                Case 1: Cval = Cval + Offset
                Case 2: Cval = Cval * 25.4
                Case 3: Cval = Cval / 25.4
                End Select
                .Cells(Row, LenCol).Value = Cval
                If Code = 3 Then .Cells(Row, LenCol).Value = Round(Cval, 1) ' 0.1 in  160525
            End If
        Next Row
    Else ' pick
        Do
            Text = "Select range.  Cancel when done."
            Set Rng = Nothing
            On Error Resume Next
            Set Rng = Application.InputBox(Prompt:=Text, Type:=8)
            If Rng Is Nothing Then Exit Do
            If Rng.Address = "" Then Exit Do
            For Each c In Rng
                Select Case Code
                Case 1
                    c.Value = c.Value + Offset
                Case 2
                    c.Value = c.Value * 25.4
                    c.NumberFormat = "#"
                Case 3
                    c.Value = c.Value / 25.4
                    c.NumberFormat = "0.#" ' 0.1 in
               End Select
            Next
        Loop
    End If
    End With
    UserFormLength.Hide
End Sub
Sub LoadCutSheet() ' 526
    Dim ShTemp As Worksheet
    Dim Finfo As String
    Dim FilterIndex As Integer
    Dim Title As String
    Dim OldFileName As Variant
    Finfo = "XL Files (*.xl*), *.xl*, All Files (*.*), *.*"
    FilterIndex = 1
    Answer = MsgBox("This will overwrite contents of Master Sheet!. Continue?", vbYesNo + vbQuestion, "Copy Old")
    If Answer = vbNo Then Exit Sub
    CurrentName = ActiveWorkbook.Name
    Title = "Select an old cut sheet to copy."
    OldFileName = Application.GetOpenFilename(Finfo, FilterIndex, Title)
    If OldFileName = False Then Exit Sub
    Workbooks.Open FileName:=OldFileName, UpdateLinks:=0
    Worksheets("Master Sheet").Activate
    RangeRC "first data row", FirstRow, ColX
    RangeRC "last data row", LastRow, ColX
    Answer = MsgBox("A-E are assumed as Item, Qty, Marking, Part #, Length. Continue?", vbYesNo + vbQuestion, "")
    If Answer = vbNo Then Exit Sub
    RangeRC "Term A column.", RowX, OldTrmACol
    RangeRC "Acc A column. Cancel if no Acc column.", RowX, OldAccACol
    RangeRC "Connector A column.", RowX, OldConACol
    RangeRC "Pos A column.", RowX, OldPosACol
    RangeRC "Term B column.", RowX, OldTrmBCol
    RangeRC "Acc B column. Cancel if no Acc column.", RowX, OldAccBCol
    RangeRC "Connector B column.", RowX, OldConBCol
    RangeRC "Pos B column.", RowX, OldPosBCol
    Position = InStrRev(OldFileName, "\")
    ShortName = Mid(OldFileName, Position + 1, 99)
    CopyColumn ShortName, CurrentName, "A", 2, FirstRow, LastRow
    CopyColumn ShortName, CurrentName, "B", 3, FirstRow, LastRow
    CopyColumn ShortName, CurrentName, "C", 4, FirstRow, LastRow
    CopyColumn ShortName, CurrentName, "D", 5, FirstRow, LastRow
    CopyColumn ShortName, CurrentName, "E", 6, FirstRow, LastRow
    CopyColumn ShortName, CurrentName, OldTrmACol, TrmACol, FirstRow, LastRow
    CopyColumn ShortName, CurrentName, OldAccACol, AccACol, FirstRow, LastRow
    CopyColumn ShortName, CurrentName, OldConACol, ConACol, FirstRow, LastRow
    CopyColumn ShortName, CurrentName, OldPosACol, PosACol, FirstRow, LastRow
    CopyColumn ShortName, CurrentName, OldTrmBCol, TrmBCol, FirstRow, LastRow
    CopyColumn ShortName, CurrentName, OldAccBCol, AccBCol, FirstRow, LastRow
    CopyColumn ShortName, CurrentName, OldConBCol, ConBCol, FirstRow, LastRow
    CopyColumn ShortName, CurrentName, OldPosBCol, PosBCol, FirstRow, LastRow
    MsgBox ("Copy any other items from old cut sheet manually.")
End Sub
Sub CopyColumn(ShortName, CurrentName, OldCol, Col, FirstRow, LastRow) 'oldcol is letter  col is number
    If OldCol = "" Then Exit Sub ' no equivalent column
    Windows(ShortName).Activate
    Worksheets("Master Sheet").Activate
    CpyRng = OldCol & FirstRow & ":" & OldCol & LastRow
    Range(CpyRng).Select
    Selection.Copy
    Windows(CurrentName).Activate
    PstRng = Format(Col, "#") & FirstRow
    Range(Cells(3, Col), Cells(3 + Val(LastRow) - Val(FirstRow), Col)).Select
    ActiveSheet.Paste
    Application.CutCopyMode = False
End Sub
Sub SaveSheetToFile()
    MyFullName = ThisWorkbook.FullName
    NewName = Replace(MyFullName, ".xlsm", " Charts.xlsx")
    ThisWorkbook.Sheets("Charts").Copy
    ' Save the new workbook
    ActiveWorkbook.SaveAs NewName, FileFormat:=51
    ActiveWorkbook.Close
End Sub
Function GetRange(Text, Optional RTitle = "Input") As String
    Dim Rng As Range
    Text = "Select one cell in the " & Text
    On Error Resume Next
    Set Rng = Application.InputBox(Prompt:=Text, Title:=RTitle, Type:=8)
    If Rng Is Nothing Then Exit Function
    GetRange = Rng.Address
End Function
Sub RangeRC(Text, Row, Col, Optional RTitle)
    rr = GetRange(Text, RTitle)
    If rr = "" Then
        Row = "": Col = ""
    Else
        rr = Mid(rr, 2)
        PosDelimiter = InStr(rr, "$")
        Col = Left(rr, PosDelimiter - 1)
        Row = Mid(rr, PosDelimiter + 1)
    End If
End Sub
Sub FormulaMenu()
    UserFormFormulas.Caption = "Formulas   " & mVersion
    UserFormFormulas.Show vbModeless
End Sub
Sub FormulaForm()
    UserFormFormulas.Hide
    UserFormTabs.Show vbModeless
End Sub
Sub GenerateFormulasTabs() ' pick and choose what to generate
' on many tabs, formulas were scrambled by re-sorting the master sheet.
' re-create the references back to the Master Sheet.
' prompt user for last rows to reference.
    GenerateFormulas1Tab "Black Stamp"
    GenerateFormulas1Tab "White Stamp"
    GenerateFormulas1Tab "Cable"
    GenerateFormulas1Tab "Cutters"
    Answer = MsgBox("Do you want to generate formulas for the Builder tab?", vbYesNo + vbQuestion, "Continue?")
    If Answer = vbNo Then Exit Sub
    Worksheets("Master Sheet").Activate
    RangeRC "LAST data row.", LLastCableRow, ColX
    If LLastCableRow = "" Then NoCables = True
    LastCableRow = Val(LLastCableRow)
    FormulaBuilder LastCableRow
End Sub
Sub GenerateFormulas1Tab(ShName) '  F 727
    Prompt = "Do you want to generate formulas for the " & ShName & " tab?"
    Answer = MsgBox(Prompt, vbYesNo + vbQuestion, "Continue?")
    If Answer = vbNo Then Exit Sub
    Worksheets("Master Sheet").Activate
    RangeRC "FIRST data row.", LFirstRow, ColX, ShName
    If LFirstRow = "" Then Exit Sub
    FirstRow = Val(LFirstRow)
    RangeRC "LAST data row.", LLastRow, ColX, ShName
    If LLastRow = "" Then Exit Sub
    LastRow = Val(LLastRow)
    If ShName = "Builder" Then
        FormulaBuilder LastRow
    Else
        Formula1 FirstRow, LastRow, ShName
    End If
End Sub
Sub GenerateFormulas2Tab(ShName) '  F 727
    Worksheets("Master Sheet").Activate
    If ShName <> "Builder" And ShName <> "CrimpCenter" Then
        RangeRC "FIRST data row.", LFirstRow, ColX, ShName
        If LFirstRow = "" Then Exit Sub
        FirstRow = Val(LFirstRow)
    End If
    RangeRC "LAST data row.", LLastRow, ColX, ShName
    If LLastRow = "" Then Exit Sub
    LastRow = Val(LLastRow)
    Select Case ShName
        Case "Builder"
            FormulaBuilder LastRow
        Case "CrimpCenter"
            FormulaCC LastRow
        Case Else
            Formula1 FirstRow, LastRow, ShName
    End Select
End Sub
Sub ToggleHide(Col1, Col2)
    If Columns(Col1).EntireColumn.Hidden Then
        Columns(Col1).EntireColumn.Hidden = False
        If Len(Col2) > 0 Then Columns(Col2).EntireColumn.Hidden = False
    Else
        Columns(Col1).EntireColumn.Hidden = True
        If Len(Col2) > 0 Then Columns(Col2).EntireColumn.Hidden = True
    End If
End Sub
Sub BuilderMenu()
    UserFormBuilder.Show vbModeless
End Sub
Sub ColorizeBuilder() ' 190401
    ShName = "Builder"
    Worksheets(ShName).Activate
    With Worksheets(ShName)
    Const ms = "='Master Sheet'!"
    For Row = 3 To 999
        LRow = Format(Row, "#")
        Text = Cells(Row, "D").Value
        If Len(Text) > 0 Then
            Rng = "A" & Trim(Str(Row)) & ":S" & Trim(Str(Row))
            Range(Rng).Select
            Colorize Rng, Text
        End If
    Next Row
    End With
End Sub
Sub FormulaBuilder(LastCableRow) ' make formulas unique to Builder tab 503
    ShName = "Builder"
    Worksheets(ShName).Activate
    With Worksheets(ShName)
    Range("A3:AA900").Select
    Selection.ClearContents
    ClearRow = LastCableRow + 10
    LClearRow = Format(ClearRow, "#")
    Range("A3:Q3").Select
    Selection.Copy
    Range("A4" & ":S" & LClearRow).Select ' copy formatting down
    Selection.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    Application.CutCopyMode = False
    ActiveSheet.PageSetup.PrintArea = "$A$1:$Q$" & LClearRow
    Const ms = "='Master Sheet'!"
    For Row = 3 To LastCableRow
        LRow = Format(Row, "#")
        Cells(Row, 1).Formula = ms & "A" & LRow
        Cells(Row, 2).Formula = ms & "C" & LRow
        Cells(Row, 3).Formula = ms & "D" & LRow
        Cells(Row, 4).Formula = ms & "E" & LRow
        Cells(Row, 5).Formula = ms & "F" & LRow
        Cells(Row, 6).Formula = ms & "G" & LRow
        Cells(Row, 7).Formula = ms & "H" & LRow
        Cells(Row, 8).Formula = ms & "M" & LRow
        Cells(Row, 9).Formula = ms & "N" & LRow
        Cells(Row, 10).Formula = ms & "O" & LRow
        Cells(Row, 11).Formula = ms & "P" & LRow 'Pos
        Cells(Row, 12).Formula = "=VLOOKUP(J" & LRow & ",Grid!$A$3:$B$999,2)"
        Cells(Row, 13).Formula = ms & "Q" & LRow
        Cells(Row, 14).Formula = ms & "R" & LRow
        Cells(Row, 15).Formula = ms & "W" & LRow
        Cells(Row, 16).Formula = ms & "X" & LRow
        Cells(Row, 17).Formula = ms & "Y" & LRow
        Cells(Row, 18).Formula = ms & "Z" & LRow 'Pos
        Cells(Row, 19).Formula = "=VLOOKUP(Q" & LRow & ",Grid!$A$3:$B$999,2)"
        For Col = 1 To 16
            Select Case Col
                Case 3
                    Cells(Row, Col).NumberFormat = "0;-0;;@" ' no zeros!
                Case Else
                    Cells(Row, Col).NumberFormat = "General" ' no text format!
            End Select
        Next Col
        Cells(Row, 6).NumberFormat = "#.00#" ' strip
        Cells(Row, 12).NumberFormat = "#.00#" ' strip
    Next Row
    End With
End Sub
Sub FormulaCC(LastRow) ' make formulas unique to CC tab 17227
    ShName = "CrimpCenter"
    Worksheets(ShName).Activate
    With Worksheets(ShName)
    Range("A3:M900").Select
    Selection.ClearContents
    Const ms = "='Master Sheet'!"
    For Row = 3 To LastRow
        LRow = Format(Row, "#")
        Cells(Row, 1).Formula = ms & "A" & LRow
        Cells(Row, 2).Formula = ms & "C" & LRow
        Cells(Row, 3).Formula = ms & "D" & LRow
        Cells(Row, 4).Formula = ms & "E" & LRow
        Cells(Row, 5).Formula = ms & "F" & LRow
        Cells(Row, 6).Formula = ms & "G" & LRow
        Cells(Row, 7).Formula = ms & "H" & LRow
        If UserFormTabs.CheckBoxFCX.Value Then Cells(Row, 8).Formula = ms & "O" & LRow
        Cells(Row, 9).Formula = ms & "P" & LRow
        Cells(Row, 10).Formula = ms & "Q" & LRow
        Cells(Row, 11).Formula = ms & "R" & LRow
        If UserFormTabs.CheckBoxFCX.Value Then Cells(Row, 12).Formula = ms & "Y" & LRow
        Cells(Row, 13).Formula = ms & "Z" & LRow
        For Col = 1 To 13
            Select Case Col
                Case 3, 8, 12
                    Cells(Row, Col).NumberFormat = "0;-0;;@" ' no zeros!
                Case Else
                    Cells(Row, Col).NumberFormat = "General" ' no text format!
            End Select
        Next Col
    Next Row
    End With
End Sub
Sub Formula1(MasterStart, MasterStop, DestSheet) ' black white cable 503
    Fwht = RGB(255, 255, 255)
    Fblu = RGB(0, 0, 200)
    Worksheets(DestSheet).Activate
    With Worksheets(DestSheet)
    Range("A3:AA900").Select
    Selection.ClearContents
    Row = 3
    MasterRow = MasterStart
    ClearRow = MasterStop - MasterStart + 10
    LClearRow = Format(ClearRow, "#")
    Range("A3:O3").Select
    Selection.Copy
    Range("A4" & ":O" & LClearRow).Select ' copy formatting down
    Selection.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    Application.CutCopyMode = False
    ActiveSheet.PageSetup.PrintArea = "$A$1:$O$" & LClearRow
    Const ms = "='Master Sheet'!"
    Do
        LRow = Format(MasterRow, "#")
        Cells(Row, 1).Formula = ms & "A" & LRow
        Cells(Row, 2).Formula = ms & "C" & LRow
        Cells(Row, 3).Formula = ms & "D" & LRow
        Cells(Row, 4).Formula = ms & "E" & LRow
        Cells(Row, 5).Formula = ms & "F" & LRow
        Cells(Row, 6).Formula = ms & "G" & LRow
        Cells(Row, 7).Formula = ms & "H" & LRow
        Cells(Row, 8).Formula = ms & "I" & LRow
        Cells(Row, 9).Formula = ms & "L" & LRow
        Cells(Row, 10).Formula = ms & "K" & LRow
        Cells(Row, 11).Formula = ms & "Q" & LRow
        Cells(Row, 12).Formula = ms & "R" & LRow
        Cells(Row, 13).Formula = ms & "S" & LRow
        Cells(Row, 14).Formula = ms & "V" & LRow
        Cells(Row, 15).Formula = "='Master Sheet'!U" & LRow
        Cells(Row, 16).Formula = "='Master Sheet'!AA" & LRow
        For Col = 1 To 16
            If Col = 3 Then
                Cells(Row, Col).NumberFormat = "0;-0;;@" ' no zeros!
            Else
                Cells(Row, Col).NumberFormat = "General" ' no text format!
            End If
        Next Col
        Cells(Row, 6).NumberFormat = "#.00#" ' strip
        Cells(Row, 11).NumberFormat = "#.00#" ' strip
        temp = UCase(Worksheets("Master Sheet").Cells(MasterRow, CodeACol).Value)
        If Left(temp, 8) = "MULTIPLE" Then
            Cells(Row, "G").Value = "see Multiple"
            Cells(Row, "G").Font.Color = Fblu
            Cells(Row, "I").Font.Color = Fwht
            Cells(Row, "J").Font.Color = Fwht
        End If
        temp = UCase(Worksheets("Master Sheet").Cells(MasterRow, CodeBCol).Value)
        If Left(temp, 8) = "MULTIPLE" Then
            Cells(Row, "L").Value = "see Multiple"
            Cells(Row, "L").Font.Color = Fblu
            Cells(Row, "N").Font.Color = Fwht
            Cells(Row, "O").Font.Color = Fwht
        End If
        Inc Row
        Inc MasterRow
    Loop Until MasterRow > MasterStop
    End With
End Sub
Sub GenerateLinks() ' re-create damaged links in top row
    With Worksheets("Master Sheet")
        Cells(3, "G").Formula = "=IF(ISNUMBER(SEARCH(""WELD"",H3,1)),0.5,VLOOKUP(H3,'S:\Engineering\[Strip lengths.xls]Strip Lengths'!$A$2:$B$2000,2,0))"
        Cells(3, "I").Formula = "=IF(ISNUMBER(SEARCH(""WELD"",H3,1)),"""",VLOOKUP(H3,'S:\Engineering\[Strip lengths.xls]Strip Lengths'!$A$2:$C$2000,3,0))"
        Cells(3, "J").Formula = "=IF(ISNUMBER(SEARCH(""WELD"",H3,1)),"""",VLOOKUP(H3,'S:\Engineering\[Strip lengths.xls]Strip Lengths'!$A$2:$E$2000,5,0))"
        Cells(3, "K").Formula = "=IF(ISNUMBER(SEARCH(""WELD"",H3,1)),"""",VLOOKUP(H3,'S:\Engineering\[Strip lengths.xls]Strip Lengths'!$A$2:$F$2000,6,0))"
        Cells(3, "Q").Formula = "=IF(ISNUMBER(SEARCH(""WELD"",R3,1)),0.5,VLOOKUP(R3,'S:\Engineering\[Strip lengths.xls]Strip Lengths'!$A$2:$B$2000,2,0))"
        Cells(3, "S").Formula = "=IF(ISNUMBER(SEARCH(""WELD"",R3,1)),"""",VLOOKUP(R3,'S:\Engineering\[Strip lengths.xls]Strip Lengths'!$A$2:$C$2000,3,0))"
        Cells(3, "T").Formula = "=IF(ISNUMBER(SEARCH(""WELD"",R3,1)),"""",VLOOKUP(R3,'S:\Engineering\[Strip lengths.xls]Strip Lengths'!$A$2:$E$2000,5,0))"
        Cells(3, "U").Formula = "=IF(ISNUMBER(SEARCH(""WELD"",R3,1)),"""",VLOOKUP(R3,'S:\Engineering\[Strip lengths.xls]Strip Lengths'!$A$2:$F$2000,6,0))"
    End With
End Sub
Sub FixStrips() '507
'    Answer = InputBox("Enter the strip length for a solder splice.", "Length", 0.35)
'    If Answer = False Then Exit Sub
'    NewLen = Val(Answer)
    NewLen = Val(UserFormFormulas.TextBoxStrip.Value)
    StrpACol = 7: StrpBCol = 17
    With Worksheets("Master Sheet")
    For Row = 3 To MaxRow
        If Left(.Cells(Row, TrmACol), 6) = "SPLICE" Then .Cells(Row, StrpACol) = NewLen
        If Left(.Cells(Row, TrmBCol), 6) = "SPLICE" Then .Cells(Row, StrpBCol) = NewLen
    Next Row
    End With
End Sub
Sub White0() '520
    Dim Msheet As Worksheet
    Wcount = 0
    For Each Msheet In Worksheets
        Prompt = "Whiten 0's on " & Msheet.Name & "?"
        Answer = MsgBox(Prompt, vbYesNo + vbQuestion, "Whiten 0")
        If Answer = vbYes Then
            With Worksheets(Msheet.Name)
            For Row = 3 To MaxRow
                For Col = 1 To 28
                    If .Cells(Row, Col).HasFormula = False Then
                        If IsEmpty(.Cells(Row, Col)) = False Then
                            If .Cells(Row, Col) = 0 Then
                                .Cells(Row, Col).Font.Color = RGB(254, 254, 254)
                                Inc Wcount
                            End If
                        End If
                    End If
                Next Col
            Next Row
            End With
        End If
    Next Msheet
    MsgBox ("Whitened " & Wcount & " 0's")
End Sub
Sub GroupWires(ShName) '414
    Col = 4 ' wire
    Worksheets(ShName).Activate
    With Worksheets(ShName)
    RangeRC "last row to group.", LRow, ColX
    Row = Val(LRow)
    Do 'from hi row to low row
        If .Cells(Row, Col).Value <> .Cells(Row - 1, Col).Value Then ' adjacent rows are different
            sRow = Format(Row, "#")
            Rows(sRow & ":" & sRow).Select
            Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove ' insert
        End If
    Row = Row - 1
    Loop Until Row <= 3
    End With
End Sub
Sub GroupWiresBlack()
    GroupWires ("Black Stamp")
End Sub
Sub GroupWiresWhite()
    GroupWires ("White Stamp")
End Sub
Sub GroupWiresCutters()
    GroupWires ("Cutters")
End Sub
Sub SortChart()
    Dim Rng As Range
    Text = "Select group to sort."
    Do
        On Error Resume Next
        Set Rng = Nothing
        Set Rng = Application.InputBox(Prompt:=Text, Type:=8)
        If Rng Is Nothing Then Exit Do
        SlctRange = Rng.Address
        SrtRange = "$D" & Mid(Rng.Address, 3)
        ActiveWorkbook.Worksheets("Charts").Sort.SortFields.Clear
        ActiveWorkbook.Worksheets("Charts").Sort.SortFields.Add Key:=Range(SrtRange) _
            , SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
        With ActiveWorkbook.Worksheets("Charts").Sort
            .SetRange Range(SlctRange)
            .Header = xlGuess
            .MatchCase = False
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
    End With
    Loop
End Sub
Sub HideTabs()
    Answer = MsgBox("Hide Cutters tab? Press No to hide Black Stamp, White Stamp and Cable.", vbYesNo + vbQuestion, "Continue?")
    Hcutters = (Answer = vbYes)
    If Hcutters Then
        HideTab "Cutters"
    Else
        HideTab "Black Stamp"
        HideTab "White Stamp"
        HideTab "Cable"
    End If
End Sub
Sub HideTab(ShName)
    Worksheets(ShName).Visible = False
    ClearArea ShName, "$A$20:$Q$600" ' minimize formatting, save memory
End Sub
Sub CreateHoleString(Cvalue)
    If IsNumeric(Cvalue) Then
        CreateHoleStringNumeric Cvalue
    Else
        If InStr(Cvalue, ",") > 0 Then
            CreateHoleStringDefined Cvalue
        Else
            If Left(Cvalue, 1) = "!" Then
                CreateHoleStringAlphaNum Cvalue
            Else
                CreateHoleStringAlpha Cvalue
            End If
        End If
    End If
End Sub
Sub CreateHoleStringDefined(Text) ' from string  A,B,C  to  [A][B][C]
    HoleString = Replace(Text, ",", "][")
    HoleString = "[" & Text & "]"
End Sub
Sub CreateHoleStringNumeric(LastNum) ' simple numeric
    HoleString = ""
    For ii = 1 To LastNum
        HoleString = HoleString & "[" & Trim(Str(ii) & "]")
    Next ii
End Sub
Sub CreateHoleStringAlpha(Atype) ' alphabetic
    If InStr(Atype, ",") Then
        CreateHoleStringDefined Atype
    Else
        Dim Omit As String
        FirstChar = Mid(Atype, 1, 1)
        LastChar = Mid(Atype, 2, 1)
        PosOfDash = InStr(Atype, "-")
        If PosOfDash > 0 Then Omit = Mid(Atype, PosOfDash + 1)
        HoleString = ""
        For cc = Asc(FirstChar) To Asc(LastChar)
            If InStr(Omit, Chr(cc)) = 0 Then HoleString = HoleString & "[" & Chr(cc) & "]"
        Next cc
        If PosOfDash = 5 Then
            FirstChar = Mid(Atype, 3, 1)
            LastChar = Mid(Atype, 4, 1)
            For cc = Asc(FirstChar) To Asc(LastChar)
                If InStr(Omit, Chr(cc)) = 0 Then HoleString = HoleString & "[" & Chr(cc) & "]"
            Next cc
        End If
    End If
End Sub
Sub CreateHoleStringAlphaNum(Atype) ' alphabet and numeric !A1M4
    Dim Omit As String
    Atype = Mid(Atype, 2) ' lose first char
    FirstChar = Mid(Atype, 1, 1)
    FirstNum = Mid(Atype, 2, 1)
    LastChar = Mid(Atype, 3, 1)
    LastNum = Mid(Atype, 4, 1)
    PosOfDash = InStr(Atype, "-")
    If PosOfDash > 0 Then Omit = Mid(Atype, PosOfDash + 1)
    HoleString = ""
    For cc = Asc(FirstChar) To Asc(LastChar)
        If InStr(Omit, Chr(cc)) = 0 Then
            For nn = Asc(FirstNum) To Asc(LastNum)
                HoleString = HoleString & "[" & Chr(cc) & Chr(nn) & "]"
            Next nn
        End If
    Next cc
End Sub
Sub test0429()
    CreateHoleStringAlphaNum "!A1M4-I"
    temp = HoleString
    Debug.Print HoleString
End Sub
Sub DeletePin(ByVal Pin)
    Pin = "[" & Pin & "]"
    HoleString = Replace(HoleString, Pin, "")
End Sub
Function IsHole(ByVal Pin)
    Pin = "[" & Pin & "]"
    IsHole = InStr(HoleString, Pin) > 0
End Function
Sub RemoveFirst(Pin)
    If HoleString = "" Then
        Pin = ""
        Exit Sub
    End If
    EndOfPin = InStr(HoleString, "]")
    Pin = Left(HoleString, EndOfPin)
    Pin = Replace(Pin, "[", "")
    Pin = Replace(Pin, "]", "")
    HoleString = Mid(HoleString, EndOfPin + 1)
End Sub
Sub BubbleSortList(Index)
  Dim strTemp As String
  Dim ii As Long
  Dim jj As Long
  Dim lngMin As Long
  Dim lngMax As Long
  lngMin = 1
  lngMax = LastItem(Index)
  For ii = lngMin To lngMax - 1
    If ii > LastItem(Index) Then Exit For
    For jj = ii + 1 To lngMax
      If List(Index, ii) > List(Index, jj) Then
        strTemp = List(Index, ii)
        List(Index, ii) = List(Index, jj)
        List(Index, jj) = strTemp
      End If
    Next jj
  Next ii
End Sub
Sub Inc(Number)
    Number = Number + 1
End Sub
Sub ShowMain()
    UserFormMain.Show vbModeless
End Sub


Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "UserFormBuilder"
Attribute VB_Base = "0{A29BB411-4674-4D1F-9910-28EDF57EE3F5}{1C029071-5C86-4688-B24E-2BD05BC2BAD4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
    ToggleHide "H", "O"
End Sub

Private Sub CommandButton2_Click()
    ToggleHide "I", "P"
End Sub

Private Sub CommandButton3_Click()
    ToggleHide "L", "S"
End Sub

Private Sub CommandButton4_Click()
    ColorizeBuilder
End Sub

Private Sub CommandButton5_Click()
    ToggleHide "B", ""
End Sub

Private Sub CommandButton6_Click()
    ToggleHide "F", "M"
End Sub
Attribute VB_Name = "UserFormCharts"
Attribute VB_Base = "0{DFD31D71-C84D-463F-B7A3-074ABEDA7D04}{110ACE5E-6BB6-4DB7-937D-92B2D44EBF1C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Private Sub CommandButton1_Click()
    CreateCharts
End Sub
Attribute VB_Name = "UserFormFormulas"
Attribute VB_Base = "0{F212EC8B-4CAD-4336-9A84-01F9A160CF7C}{E6431BEB-5A89-4A98-B4A6-706FCE894C67}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




Private Sub CommandButton2_Click()
    FormulaForm
End Sub

Private Sub CommandButton3_Click()
    GenerateLinks
End Sub

Private Sub CommandButton4_Click()
    FixStrips
End Sub

Private Sub CommandButton5_Click()
    White0
End Sub
Attribute VB_Name = "UserFormHolePlug"
Attribute VB_Base = "0{C10E6C89-86F6-4EE9-83CA-FB95577875D8}{302B411C-E4A1-48AB-AC8F-A85A5D8CA688}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButtonUse1_Click()
    HP1
End Sub

Private Sub CommandButtonUse2_Click()
    HP2
End Sub
Attribute VB_Name = "UserFormLength"
Attribute VB_Base = "0{538C8AF4-6CA3-48DC-A814-DCAF132FD7FB}{1CD2961B-1D1E-4CA2-96BE-81344A815654}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CommandButton1_Click()
    LengthAdjustments 1
End Sub

Private Sub CommandButton2_Click()
    LengthAdjustments 3
End Sub

Private Sub CommandButton3_Click()
    LengthAdjustments 2
End Sub
Attribute VB_Name = "UserFormMain"
Attribute VB_Base = "0{074EC22A-9D95-4D95-B00C-BCDEC5108A17}{4EBBC844-AA30-404A-8525-48E62DB373E1}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CommandButton1_Click()
    LoadCutSheet
End Sub

Private Sub CommandButton10_Click()
    UnhideStuff
End Sub

Private Sub CommandButton11_Click()
    LengthPanel
End Sub

Private Sub CommandButton12_Click()
    HideTabs
End Sub

Private Sub CommandButton2_Click()
    Button1_Click
End Sub

Private Sub CommandButton3_Click()
    SortMasterSheet
End Sub

Private Sub CommandButton4_Click()
    FormulaMenu
End Sub

Private Sub CommandButton5_Click()
    Button2_Click
End Sub

Private Sub CommandButton6_Click()
    WeldsPanel
End Sub

Private Sub CommandButton7_Click()
    ChartsPanel
End Sub

Private Sub CommandButton8_Click()
    PartsPanel
End Sub

Private Sub CommandButton9_Click()
    HideStuff
End Sub
Attribute VB_Name = "UserFormParts"
Attribute VB_Base = "0{D9082549-2A6D-4196-A89D-8DDC1D74890B}{DA3C45A0-CD94-453E-AC5F-C0AAA6D1F3A3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CommandButton1_Click()
    AnalyzeParts
End Sub
Attribute VB_Name = "UserFormTabs"
Attribute VB_Base = "0{B104C1AF-8488-47F7-86E4-F333FB7A06D2}{9EEC16D9-754A-4E29-AA5A-1B807B0DBCE2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CommandButton1_Click()
    GenerateFormulas2Tab "Black Stamp"
    CommandButton1.Enabled = False
End Sub

Private Sub CommandButton2_Click()
    GenerateFormulas2Tab "White Stamp"
    CommandButton2.Enabled = False
End Sub

Private Sub CommandButton3_Click()
    GenerateFormulas2Tab "Cable"
    CommandButton3.Enabled = False
End Sub

Private Sub CommandButton4_Click()
    GenerateFormulas2Tab "Cutters"
    CommandButton4.Enabled = False
End Sub

Private Sub CommandButton5_Click()
    GenerateFormulas2Tab "Builder"
    CommandButton5.Enabled = False
End Sub
Private Sub CommandButton6_Click()
    GenerateFormulas2Tab "CrimpCenter"
    CommandButton6.Enabled = False
End Sub

Attribute VB_Name = "UserFormWelds"
Attribute VB_Base = "0{307656D5-4F6A-4651-9228-E531A1E84CC6}{1965FFD1-24E2-4195-95A3-7D4E964D74C6}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Private Sub CommandButton1_Click()
    CreateWelds
End Sub

Private Sub Label1_Click()

End Sub


INQUEST-PP=macro
