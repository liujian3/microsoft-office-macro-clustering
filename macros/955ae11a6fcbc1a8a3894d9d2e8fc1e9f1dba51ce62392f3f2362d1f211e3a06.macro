Attribute VB_Name = "Actions"

'================================================================================================
' Copie un breakdown d'une classe vers toutes les autres classes
'================================================================================================
Sub copy_BreakdownToOtherClasses(IDKD As Long, filename As String)

    If Len(CStr(IDKD)) = 5 Then ' C'est au niveau de la classe, on copie partout (+ 0 1 2 3 4 6 7 8)
        Call copyafile(filename, Replace(filename, IDKD, Left(CStr(IDKD), 4) & "0"))
        Call copyafile(filename, Replace(filename, IDKD, Left(CStr(IDKD), 4) & "1"))
        Call copyafile(filename, Replace(filename, IDKD, Left(CStr(IDKD), 4) & "2"))
        Call copyafile(filename, Replace(filename, IDKD, Left(CStr(IDKD), 4) & "3"))
        Call copyafile(filename, Replace(filename, IDKD, Left(CStr(IDKD), 4) & "4"))
        Call copyafile(filename, Replace(filename, IDKD, Left(CStr(IDKD), 4) & "6"))
        Call copyafile(filename, Replace(filename, IDKD, Left(CStr(IDKD), 4) & "7"))
        Call copyafile(filename, Replace(filename, IDKD, Left(CStr(IDKD), 4) & "8"))
    End If



'    Select Case IDKD
'        Case 20035: ' LOF Convertible Bond CHF
'                    Call copyafile(filename, Replace(filename, IDKD, "20030"))
'                    Call copyafile(filename, Replace(filename, IDKD, "20031"))
'                    Call copyafile(filename, Replace(filename, IDKD, "20032"))
'                    Call copyafile(filename, Replace(filename, IDKD, "20033"))
'                    Call copyafile(filename, Replace(filename, IDKD, "20034"))
'                    Call copyafile(filename, Replace(filename, IDKD, "20036"))
'                    Call copyafile(filename, Replace(filename, IDKD, "20037"))
'                    Call copyafile(filename, Replace(filename, IDKD, "20038"))
'        Case 13345: ' LOF Convertible Bond USD
'                    Call copyafile(filename, Replace(filename, IDKD, "13340"))
'                    Call copyafile(filename, Replace(filename, IDKD, "13341"))
'                    Call copyafile(filename, Replace(filename, IDKD, "13342"))
'                    Call copyafile(filename, Replace(filename, IDKD, "13343"))
'                    Call copyafile(filename, Replace(filename, IDKD, "13344"))
'                    Call copyafile(filename, Replace(filename, IDKD, "13346"))
'                    Call copyafile(filename, Replace(filename, IDKD, "13347"))
'                    Call copyafile(filename, Replace(filename, IDKD, "13348"))
'        Case 11415: ' LOF - Convertible Bon Asia CHF
'                    Call copyafile(filename, Replace(filename, IDKD, "11410"))
'                    Call copyafile(filename, Replace(filename, IDKD, "11411"))
'                    Call copyafile(filename, Replace(filename, IDKD, "11412"))
'                    Call copyafile(filename, Replace(filename, IDKD, "11413"))
'                    Call copyafile(filename, Replace(filename, IDKD, "11414"))
'                    Call copyafile(filename, Replace(filename, IDKD, "11416"))
'                    Call copyafile(filename, Replace(filename, IDKD, "11417"))
'                    Call copyafile(filename, Replace(filename, IDKD, "11418"))
'        Case 11425: ' LOF - Convertible Bon Asia EUR
'                    Call copyafile(filename, Replace(filename, IDKD, "11420"))
'                    Call copyafile(filename, Replace(filename, IDKD, "11421"))
'                    Call copyafile(filename, Replace(filename, IDKD, "11422"))
'                    Call copyafile(filename, Replace(filename, IDKD, "11423"))
'                    Call copyafile(filename, Replace(filename, IDKD, "11424"))
'                    Call copyafile(filename, Replace(filename, IDKD, "11426"))
'                    Call copyafile(filename, Replace(filename, IDKD, "11427"))
'                    Call copyafile(filename, Replace(filename, IDKD, "11428"))
'    End Select

End Sub


'================================================================================================
' Pour un fonds donn|fffd|, on sauve tous les petits fichiers "Currency"
'================================================================================================
Sub save_CURbreakdown(IDKD As Long)

    Select Case IDKD
        Case 1003: ' LOF - Convertible
            Call save_InFile_Breakdown_Class_100pc(20118, "JPY")
        
        
        Case 1135: ' LOF - Alpha Japan
            Call save_InFile_Breakdown_Class_100pc(11430, "CHF")
            Call save_InFile_Breakdown_Class_100pc(11431, "CHF")
            Call save_InFile_Breakdown_Class_100pc(11432, "CHF")
            Call save_InFile_Breakdown_Class_100pc(11433, "CHF")
            Call save_InFile_Breakdown_Class_100pc(11434, "CHF")
            Call save_InFile_Breakdown_Class_100pc(11435, "CHF")
            Call save_InFile_Breakdown_Class_100pc(11436, "CHF")
            Call save_InFile_Breakdown_Class_100pc(11437, "CHF")
            Call save_InFile_Breakdown_Class_100pc(11438, "CHF")
            
            Call save_InFile_Breakdown_Class_100pc(11440, "EUR")
            Call save_InFile_Breakdown_Class_100pc(11441, "EUR")
            Call save_InFile_Breakdown_Class_100pc(11442, "EUR")
            Call save_InFile_Breakdown_Class_100pc(11443, "EUR")
            Call save_InFile_Breakdown_Class_100pc(11444, "EUR")
            Call save_InFile_Breakdown_Class_100pc(11445, "EUR")
            Call save_InFile_Breakdown_Class_100pc(11446, "EUR")
            Call save_InFile_Breakdown_Class_100pc(11447, "EUR")
            Call save_InFile_Breakdown_Class_100pc(11448, "EUR")
        
            Call save_InFile_Breakdown_Class_100pc(11450, "USD")
            Call save_InFile_Breakdown_Class_100pc(11451, "USD")
            Call save_InFile_Breakdown_Class_100pc(11452, "USD")
            Call save_InFile_Breakdown_Class_100pc(11453, "USD")
            Call save_InFile_Breakdown_Class_100pc(11454, "USD")
            Call save_InFile_Breakdown_Class_100pc(11455, "USD")
            Call save_InFile_Breakdown_Class_100pc(11456, "USD")
            Call save_InFile_Breakdown_Class_100pc(11457, "USD")
            Call save_InFile_Breakdown_Class_100pc(11458, "USD")
        
        Case 1032: ' LOF - World Gold
            Call save_InFile_Breakdown_Class_100pc(11230, "CHF")
            Call save_InFile_Breakdown_Class_100pc(11231, "CHF")
            Call save_InFile_Breakdown_Class_100pc(11232, "CHF")
            Call save_InFile_Breakdown_Class_100pc(11233, "CHF")
            Call save_InFile_Breakdown_Class_100pc(11234, "CHF")
            Call save_InFile_Breakdown_Class_100pc(11235, "CHF")
            Call save_InFile_Breakdown_Class_100pc(11236, "CHF")
            Call save_InFile_Breakdown_Class_100pc(11237, "CHF")
            Call save_InFile_Breakdown_Class_100pc(11238, "CHF")
            
            Call save_InFile_Breakdown_Class_100pc(10320, "EUR")
            Call save_InFile_Breakdown_Class_100pc(10321, "EUR")
            Call save_InFile_Breakdown_Class_100pc(10322, "EUR")
            Call save_InFile_Breakdown_Class_100pc(10323, "EUR")
            Call save_InFile_Breakdown_Class_100pc(10324, "EUR")
            Call save_InFile_Breakdown_Class_100pc(10325, "EUR")
            Call save_InFile_Breakdown_Class_100pc(10326, "EUR")
            Call save_InFile_Breakdown_Class_100pc(10327, "EUR")
            Call save_InFile_Breakdown_Class_100pc(10328, "EUR")
        
        Case 1430: ' LOF - Asia High Conviction
            
            Call save_InFile_Breakdown_Class_100pc(14570, "CHF")
            Call save_InFile_Breakdown_Class_100pc(14571, "CHF")
            Call save_InFile_Breakdown_Class_100pc(14572, "CHF")
            Call save_InFile_Breakdown_Class_100pc(14573, "CHF")
            Call save_InFile_Breakdown_Class_100pc(14574, "CHF")
            Call save_InFile_Breakdown_Class_100pc(14575, "CHF")
            Call save_InFile_Breakdown_Class_100pc(14576, "CHF")
            Call save_InFile_Breakdown_Class_100pc(14577, "CHF")
            Call save_InFile_Breakdown_Class_100pc(14578, "CHF")
            
            Call save_InFile_Breakdown_Class_100pc(14560, "EUR")
            Call save_InFile_Breakdown_Class_100pc(14561, "EUR")
            Call save_InFile_Breakdown_Class_100pc(14562, "EUR")
            Call save_InFile_Breakdown_Class_100pc(14563, "EUR")
            Call save_InFile_Breakdown_Class_100pc(14564, "EUR")
            Call save_InFile_Breakdown_Class_100pc(14565, "EUR")
            Call save_InFile_Breakdown_Class_100pc(14566, "EUR")
            Call save_InFile_Breakdown_Class_100pc(14567, "EUR")
            Call save_InFile_Breakdown_Class_100pc(14568, "EUR")
            
        Case 5811: ' LOF III - High Yield Convertible Bd (CHF)
            
            Call save_InFile_Breakdown_Class_100pc(58106, "CHF")
            Call save_InFile_Breakdown_Class_100pc(58108, "CHF")
            Call save_InFile_Breakdown_Class_100pc(58100, "CHF")
            Call save_InFile_Breakdown_Class_100pc(58104, "CHF")
            Call save_InFile_Breakdown_Class_100pc(58101, "CHF")
            Call save_InFile_Breakdown_Class_100pc(58105, "CHF")
    
        Case 1255: ' LOF - Global Convertible Bond Defensive Delta
            
            Call save_InFile_Breakdown_Class_100pc(12656, "CHF")
            Call save_InFile_Breakdown_Class_100pc(12654, "CHF")
            Call save_InFile_Breakdown_Class_100pc(12655, "CHF")
            ' ...
    
            Call save_InFile_Breakdown_Class_100pc(12666, "CHF") 'SEED
            Call save_InFile_Breakdown_Class_100pc(12660, "CHF") 'SEED
            Call save_InFile_Breakdown_Class_100pc(12665, "CHF") 'SEED
    
            Call save_InFile_Breakdown_Class_100pc(12700, "GBP")
    
            Call save_InFile_Breakdown_Class_100pc(12676, "USD")
            '...
            
            Call save_InFile_Breakdown_Class_100pc(12686, "USD")  'SEED
            Call save_InFile_Breakdown_Class_100pc(12680, "USD")  'SEED
    
    
    End Select
        



End Sub

Attribute VB_Name = "BreakdownNewTemplate"
Private Declare Function GetUserName Lib "advapi32.dll" _
    Alias "GetUserNameA" (ByVal lpBuffer As String, nSize As Long) As Long
'================================================================================================
'================================================================================================
Type breakdown
    label(15) As String
    labelCode(15) As String     ' Utile que pour les stat/ratios
    value(15) As String
    name As String              ' Le nom du breakdown en anglais
    code As String              ' Le code Obsidian du breakdown (utilis|fffd| dans le nom du petit fichier)
    displayTotal As Boolean     ' Afficher le total en bas du breakdown ?
    nbLine As Integer           ' Generalement 10
End Type

Type FondBreakdown
    fundName As String  ' Le nom du fonds
    fundcode As Long  ' IKD du fonds
    breakdownDate As String
    nbBreakdown As Integer
    breakdownX(15) As breakdown
End Type

'================================================================================================
'================================================================================================

Const PositionC_Title As Integer = 2
Const PositionL_Title As Integer = 1
Const PositionC_FundCode As Integer = 1
Const PositionL_FundCode As Integer = 1
Const PositionC_ReportingDate As Integer = 2
Const PositionL_ReportingDate As Integer = 2
Const PositionC_NbBreakdown As Integer = 1
Const PositionL_NbBreakdown As Integer = 2

Const PositionC_EmailTitle As Integer = 2
Const PositionL_EmailTitle As Integer = 34
Const PositionC_EmailTO As Integer = 2
Const PositionL_EmailTO As Integer = 35
Const PositionC_EmailCC As Integer = 2
Const PositionL_EmailCC As Integer = 36

Const RatioFilename = "ReportingStatRatios.csv"
Const EmailFilename = "ReportingEmail.txt"
Const DatasFilename = "ReportingBreakdownwithc.out"

Const DirLOG = "\\merlin\lib_fundreportingdata\MonthlyData\"
Const DirRatio = "\\merlin\lib_fundreportingdata\MonthlyData\"
Const DirBreakdown = "\\merlin\lib_fundreportingdata\MonthlyData\"

Const DirLOGRT = "\\merlin\lib_fundreportingdata\MonthlyData\"
Const DirRatioRT = "\\merlin\lib_DAV\firm\input\ratios\todo\"
Const DirBreakdownRT = "\\merlin\lib_DAV\firm\input\breakdowns\todo\"
Const DirData = "\\merlin\lib_fundreportingdata\MonthlyData\DATA\"

'================================================================================================
' Recharger manuellement via le menu View Macro
'================================================================================================
Sub UPLOAD_DATA()
    Dim IDKD As String
    IDKD = get_IDKDFromFilename()    ' R|fffd|cup|fffd|ration du code du fonds en question (normalement dans le nom du fichier)
    
    If is_SheetPresent(IDKD) Then    ' L'onglet existe d|fffd|j|fffd|, on ne va pas charger les donn|fffd|es du fichier
        Application.DisplayAlerts = False
        ActiveWorkbook.Sheets.add Before:=Worksheets(Worksheets.Count)
        Sheets(IDKD).Delete
        Application.DisplayAlerts = True
    End If

    Call MAIN_BUILDPAGE

End Sub


'================================================================================================
' Le nom du fichier contient le code du fonds
' A partir de la, on prend les breakdown de ce fonds et on affiche les N breakdowns
' Les donn|fffd|es se trouvent dans un seul fichier, g|fffd|n|fffd|r|fffd| par FirmLoc
'================================================================================================
Sub MAIN_BUILDPAGE(Optional rien As Integer)
    Dim IDKD As Long ' Code du fonds r|fffd|cup|fffd|r|fffd| dans le nom du fichier
    Dim nbB As Integer
    Dim line As Integer
    Dim col As Integer
    Dim nbBreakdown As Integer
    Dim fondbreak As FondBreakdown
    
    Application.ScreenUpdating = False ' Stop l'affichage

    IDKD = get_IDKDFromFilename()    ' R|fffd|cup|fffd|ration du code du fonds en question (normalement dans le nom du fichier)
    
    If is_SheetPresent(IDKD) Then    ' L'onglet existe d|fffd|j|fffd|, on ne va pas charger les donn|fffd|es du fichier
        End
    End If
        
    
    'On Error GoTo fin:
    ActiveSheet.name = IDKD

    ' ----------------------------------
    ' Lecture des donn|fffd|es: breakdown + Ratios
    ' ----------------------------------
    Call clean_Breakdown(fondbreak)
    fondbreak = read_BreakdownForNewTemplate(IDKD)
    Call get_Ratios(IDKD, fondbreak)
    
    nbBreakdown = fondbreak.nbBreakdown
    
    
    ' ----------------------------------
    ' Affichage le nom du fonds
    ActiveSheet.Unprotect
    Call design_Display_FundName(fondbreak)
    
    Cells.Select ' On selectionne tout
    Selection.Locked = True ' On bloque tout
    Selection.FormulaHidden = False
    
    ' ----------------------------------
    ' Affichage des breakdowns et des donn|fffd|es
    col = 2
    line = 5
    For i = 0 To nbBreakdown - 1
        Dim nbLine As Integer
        nbLine = fondbreak.breakdownX(i).nbLine
        If nbLine = 0 Then nbLine = 10 ' Les ratios
        Call design_Creation_Breakdown(line, col, nbLine)            ' Creation de la boite (LOOK)
        Call design_Grille_Breakdown(line, col, fondbreak.breakdownX(i).displayTotal, fondbreak.breakdownX(i).code = "RATIOSTAT", nbLine)
        Call put_ValueInBreakdown(fondbreak.breakdownX(i), line, col, nbLine)
        
        ' ----------------------------------
        'On saute de ligne si n|fffd|cessaire
        col = col + 5
        If i = Round(nbBreakdown / 3) Then
            line = line + 15
            col = 2
        End If
        ' ----------------------------------
    Next i


    Range("ZZ100").Select
    Application.ScreenUpdating = True
    
    
    ' ----------------------------------
    ' Affichage de la table des email:
    ' ----------------------------------
    design_EmailTable
    
    ' ----------------------------------
    ' Affichage du bouton SEND
    ' ----------------------------------
    design_AddButtonSave
    
    ' ----------------------------------
    ' PROTECTION DES CELLULES
    ActiveWindow.DisplayHeadings = False
    Application.DisplayFormulaBar = False
    ActiveSheet.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowDeletingColumns:=True, AllowDeletingRows:=True
        
    Cells(1, 1).Select
    GoTo fin2:
fin:
    MsgBox ("Error with the sheet name (the sheet already exist or the fund code doesn't exist)...")
fin2:
    
End Sub


'================================================================================================
' Retourne le nombre de breakdown en fonction de la valeur en cellule x,y de l'onglet
'================================================================================================
Function get_NbBreakdownFromSheet() As Integer
    Dim res As Variant
    res = Cells(PositionL_NbBreakdown, PositionC_NbBreakdown)
    If IsNumeric(res) Then
        If CInt(res) > 0 And CInt(res) < 10 Then
            get_NbBreakdownFromSheet = CInt(res)
        Else
            MsgBox ("Incorrect value in cell (" & PositionL_NbBreakdown & "," & PositionC_NbBreakdown & "): " & res & ". This cell should contains the number of breakdown.")
        End If
    Else
        MsgBox ("Incorrect value in cell (" & PositionL_NbBreakdown & "," & PositionC_NbBreakdown & "): " & res & ". This cell should contains the number of breakdown.")
        End
    End If
    
End Function


'================================================================================================
' Retourne le code du breakdown en fonction de ce qui est inscrit apr|fffd|s le nom affich|fffd| en blanc a droite
'================================================================================================
Function get_BreakdownCodeFromSheet(line As Integer, col As Integer) As String
    Dim res As Variant
    
    res = Cells(line, col + 2)
    If res <> "" Then
        get_BreakdownCodeFromSheet = res
    Else
        MsgBox ("The code of the breakdown is missing.")
        End
    End If
End Function

'================================================================================================
' Retourne le code du breakdown en fonction de ce qui est inscrit apr|fffd|s le nom affiche en blanc a droite
'================================================================================================
Function get_FundNameFromSheet() As String
    Dim res As Variant
    
    res = Cells(PositionL_Title, PositionC_Title)
    If res <> "" Then
        get_FundNameFromSheet = res
    Else
        MsgBox ("Fun name not found in the sheet....")
        End
    End If
End Function

'================================================================================================
' Retourne le nom du breakdown comme affich|fffd| dans Excel en gras
'================================================================================================
Function get_BreakdownNameFromSheet(line As Integer, col As Integer) As String
    Dim res As Variant
    
    res = Cells(line, col)
    If res <> "" Then
        get_BreakdownNameFromSheet = res
    Else
        MsgBox ("The name of the breakdown is missing.")
        End
    End If
End Function



'================================================================================================
' Retourne le IDKD en fonction de ce qui est inscrit dans la feuille (en blanc sur fond blanc)
'================================================================================================
Function get_IDKDFromSheet() As Long
    Dim res As Variant
    
    res = Cells(PositionL_FundCode, PositionC_FundCode)
    If IsNumeric(res) Then
        If CInt(res) > 0 Then
            get_IDKDFromSheet = CLng(res)
        Else
            MsgBox ("Incorrect value in cell (" & PositionC_FundCode & "," & PositionL_FundCode & "): " & res & ". This cell should contains the code of the fund.")
            End
        End If
    Else
            MsgBox ("Incorrect value in cell (" & PositionC_FundCode & "," & PositionL_FundCode & "): " & res & ". This cell should contains the code of the fund.")
            End
        End
    End If
End Function


'================================================================================================
' Lecture des ratios et stat dans le fichier et placer ceux-ci dans un breakdown avec nom STATRATIO
' Les ratios sont dans un autre fichier, un CSV cette fois.
'================================================================================================
Sub get_Ratios(IDKD As Long, break As FondBreakdown)
    Dim filename As String
    Dim fn As Integer
    Dim str As String
    Dim tabRS() As String
    Dim nbRS As Integer
    Dim findRatio As Boolean
    Dim nbRatio As Integer
    
    nbRatio = 0
    
    nbRS = 0
    findRatio = False
    filename = DirData & RatioFilename
    fn = FreeFile()
    
    break.breakdownX(break.nbBreakdown).code = "RATIOSTAT"
    break.breakdownX(break.nbBreakdown).name = "Ratios"
    break.breakdownX(break.nbBreakdown).displayTotal = False

    Open filename For Input As #fn        ' Ouverture du fichier SWX
    
    Do While Not EOF(fn)    ' Loop until end of file.
        Line Input #fn, str
        tabRS = Split(str, ";")
        If tabRS(0) = CStr(IDKD) Then
            If tabRS(4) <> "" Then ' Seulement pour le LOG
                break.breakdownX(break.nbBreakdown).label(nbRatio) = tabRS(4)
                break.breakdownX(break.nbBreakdown).value(nbRatio) = tabRS(6)
                break.breakdownX(break.nbBreakdown).labelCode(nbRatio) = tabRS(8)
                break.breakdownX(break.nbBreakdown).nbLine = 10
                
                nbRatio = nbRatio + 1
                findRatio = True
                nbRS = nbRS + 1
            End If
        End If
    Loop
    Close #fn    ' Fermeture du fichier
    If findRatio Then
        break.nbBreakdown = break.nbBreakdown + 1
    End If
End Sub




'================================================================================================
' Sauvegarde de la ligne conteant les email TO ou CC
' CCorTO = "CC" ou "TO"
'================================================================================================
Sub save_EMail_CCorTO(CCorTO As String)
    Dim filename As String
    Dim filename2 As String
    Dim fn As Integer
    Dim fn2 As Integer
    Dim str As String
    Dim newline As String
    Dim modif As Boolean
    Dim IDKD As Long
    
    modif = False
    filename = DirData & EmailFilename
    filename2 = DirData & "ReportingEmail.tmp"
    IDKD = get_IDKDFromSheet
    fn = FreeFile()
    Open filename For Input As #fn       ' Ouverture du fichier SWX
    fn2 = FreeFile()
    Open filename2 For Output As #fn2       ' Ouverture du fichier SWX
      Do While Not EOF(fn)
        Line Input #fn, str
        If Left(str, InStr(str, ":") - 1) = (IDKD & "_" & CCorTO) Then
            If CCorTO = "CC" Then
                newline = IDKD & "_CC:" & Cells(PositionL_EmailCC, PositionC_EmailCC + 1)
            Else
                newline = IDKD & "_TO:" & Cells(PositionL_EmailTO, PositionC_EmailTO + 1)
            End If
            Print #fn2, newline
            If newline <> str Then modif = True
        Else
            Print #fn2, str
        End If
      Loop
fin:
    Close #fn    ' Fermeture du fichier
    Close #fn2    ' Fermeture du fichier

    Call moveafile(filename2, filename)
    
    If modif Then
        verify_email (CCorTO)
        MsgBox ("The modification email " & CCorTO & " has been sent.")
    End If


End Sub



'================================================================================================
' R|fffd|cup|fffd|re le code dans le nom du fichier, 4 dernier digit du nom du fichier, exemple Breakdown1234.xlsm  => 1234
' Si pas trouv|fffd|, on le demande par un popup
'================================================================================================
Function get_IDKDFromFilename() As String
    Dim filename As String

    'code = Mid(ThisWorkbook.name, Len(ThisWorkbook.name) - 8, 4) ' Retourne que le nom sans le folder
    code = Replace(Replace(ThisWorkbook.name, "Breakdown", ""), ".xlsm", "")
    

    If IsNumeric(code) And (Len(code) = 4 Or Len(code) = 5) Then
        get_IDKDFromFilename = code      ' En position X dans le nom du fichier
    Else
        get_IDKDFromFilename = InputBox("Give the code of the fund (4 digits): ")
        If get_IDKDFromFilename = "" Then
            End
        End If
    End If
End Function


'================================================================================================
' Lecture de tous les breakdowns d'un fonds situ|fffd| dans le Fichier structur|fffd| !
'================================================================================================
Function read_BreakdownForNewTemplate(IDKD As Long) As FondBreakdown
    Dim filename As String
    Dim idFound As Boolean
    Dim fn As Integer
    Dim fondbreak As FondBreakdown
    
    
    filename = DirData & DatasFilename
    idFound = False
    
    If fileExists(filename) Then
    
        fn = FreeFile()
        
        Open filename For Binary Access Read As #fn      ' Ouverture du fichier SWX
        
        Do While Not EOF(fn)
            Call clean_Breakdown(fondbreak)
            Get #fn, , fondbreak
            If fondbreak.fundcode = IDKD Then
                read_BreakdownForNewTemplate = fondbreak
                idFound = True
                GoTo fin:
            End If
            
        Loop
    
fin:
        
        Close #fn    ' Fermeture du fichier
    End If
    
    If Not idFound Then
        MsgBox ("Information not found in " & DirData & DatasFilename & " for the code " & IDKD & ".")
        End
    End If
    
End Function




'================================================================================================
' Affichage des valeurs dans le breakdown ainsi que le nom du breakdown
'================================================================================================
Sub put_ValueInBreakdown(break As breakdown, line As Integer, col As Integer, Optional nbLine As Integer = 10)
    Dim i As Integer

'------------------------------------------------------------
' Le nom du breakdown en blanc sur fonds brun
    Cells(line, col) = UCase(break.name)        ' Nom du breakdown
    Cells(line, col).Select
    'Selection.Font.Bold = True
    
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 2895417
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    With Selection.Font
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = 0
        .name = "Arial Narrow"
        .Size = 12
        .Bold = True
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = 0
        .ThemeFont = xlThemeFontNone
    End With
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlBottom
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = True
        .ReadingOrder = xlContext
        .MergeCells = True
    End With
'------------------------------------------------------------
    
    
    Cells(line, col + 2).Select ' Affichage du code en blanc a droite
    With Selection.Font
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = 0
    End With
    Cells(line, col + 2) = break.code
    
    For i = 0 To nbLine - 1
        If break.label(i) <> "" Then
            Cells(line + i + 1, col) = break.label(i)
            Cells(line + i + 1, col + 1) = break.value(i)
            Cells(line + i + 1, col + 2) = break.labelCode(i)   ' Uniquement pour les ratios
        End If
    Next i
End Sub






'================================================================================================
'================================================================================================
Function get_BreakdownFromSheet(line As Integer, col As Integer) As breakdown
    Dim break As breakdown
    
    break.code = Cells(line, col + 2)
    For j = 0 To 9
        break.label(j) = Cells(line + j + 1, col)
        break.value(j) = Cells(line + j + 1, col + 1)
        break.labelCode(j) = Cells(line + j + 1, col + 2)
    Next j
    get_BreakdownFromSheet = break
End Function

'================================================================================================
' Verification si un breakdown a ete chang|fffd| ou pas
'================================================================================================
Function is_BreakdownIdentique(fondbreak As FondBreakdown, line As Integer, col As Integer, nbLine As Integer) As Boolean
    Dim nbBreakdown As Integer
    Dim break As breakdown
    Dim diff As Boolean
    
    diff = True
    
    break = get_BreakdownFromSheet(line, col)
    
    For i = 0 To fondbreak.nbBreakdown
        If fondbreak.breakdownX(i).code = break.code Then
            For j = 0 To nbLine - 1
                If break.label(j) <> fondbreak.breakdownX(i).label(j) Or ((break.value(j) <> fondbreak.breakdownX(i).value(j))) Then diff = False
            Next j
        End If
    Next i

    is_BreakdownIdentique = diff
End Function

'================================================================================================
' Recherche le nombre de ligne du breakdown
'================================================================================================
Function get_NbLine(fondbreak As FondBreakdown, line As Integer, col As Integer) As Integer
    Dim break As breakdown
    
    break = get_BreakdownFromSheet(line, col)
    
    For i = 0 To fondbreak.nbBreakdown
        If fondbreak.breakdownX(i).code = break.code Then
           get_NbLine = fondbreak.breakdownX(i).nbLine
        End If
    Next i
End Function



'================================================================================================
'================================================================================================
' Sauvegarde de toutes les donn|fffd|es si diff|fffd|rentes
'================================================================================================
'================================================================================================
Private Sub SAVE_ALLDATA()
    Dim line As Integer
    Dim col As Integer
    Dim nbBreakdown As Integer
    Dim fondbreak As FondBreakdown
    Dim IDKD As Long
    Dim nbBlockDiff As Integer
    Dim nbLineBreakdown As Integer
    col = 2
    line = 5
    
    On Error Resume Next
    'ActiveWorkbook.Save
    saveTemplateDataFile
    
    
    ' PROTECTION DES CELLULES
If ActiveWorkbook.MultiUserEditing Then
    MsgBox ("Please save doc and unshare the Excel (in menu Review).")
    End
End If
    ActiveSheet.Unprotect

    
    nbBreakdown = get_NbBreakdownFromSheet
    
    IDKD = get_IDKDFromSheet()    ' R|fffd|cup|fffd|ration du code du fonds en question

    
    ' Lecture des donn|fffd|es
    '-------------------------------------------------------------------------
    Call clean_Breakdown(fondbreak)
    fondbreak = read_BreakdownForNewTemplate(IDKD)
    Call get_Ratios(IDKD, fondbreak)
    
    
    Call add_OneLineInLog("-----------------------------------------------", "") ' Une ligne avec le nom
    Call add_OneLineInLog(ActiveSheet.name, "NAME", get_FundNameFromSheet)
    
    
    ' Sauvegarde de tous les breakdown ainsi que des ratios
    '-------------------------------------------------------------------------
    nbBlockDiff = 0
    For i = 0 To nbBreakdown - 1

        nbLineBreakdown = get_NbLine(fondbreak, line, col)
        If Not is_BreakdownIdentique(fondbreak, line, col, nbLineBreakdown) Then ' On sauve seulement si il y a eu un changement
            Call save_LabelValueBreakdownFromSheet(line, col, nbLineBreakdown)
            nbBlockDiff = nbBlockDiff + 1
        End If

        col = col + 5
        If i = Round(nbBreakdown / 3) Then
            line = line + 15
            col = 2
        End If
    Next i
    
    '-------------------------------------------------------------------------
    Call save_CURbreakdown(IDKD) ' ATTENTION REGLES SPECIALES au niveau des classes
    '-------------------------------------------------------------------------

    
    
    ' LOG des sauvegardes
    '-------------------------------------------------------------------------
    If nbBlockDiff = 0 Then
        MsgBox ("Validation has been sent.")    ' Il faut faire qqchose ici, dans le log ... ?
        
        Call add_OneLineInLog(get_IDKDFromSheet, "VALIDATION", "", "")
    
    ElseIf nbBlockDiff = 1 Then
        MsgBox ("The modified breakdown has been sent.")
    Else
        MsgBox ("The " & nbBlockDiff & " modified breakdowns have been sent.")
    End If

    save_EMail_CCorTO ("TO")
    save_EMail_CCorTO ("CC")
    
    
    design_Display_NewDate
    
    ' PROTECTION DES CELLULES
    ActiveSheet.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowDeletingColumns:=True, AllowDeletingRows:=True
    
End Sub


'================================================================================================
' V|fffd|rifie si un breakdown contient 2 labels identique. Retourne les 2 lignes s|fffd|par|fffd| par un :
' Ne v|fffd|rifie pas les breakdowns
'   - top5positionsshort
'   - toppositions for the LOF - CAT
'================================================================================================
Function verify_Breakdown2LinesIdentiques(break As breakdown) As String
    Dim i, j As Integer
    
    testBreakdown2LinesIdentiques = ""
    If break.code <> "top5positionsshort" And break.code <> "toppositions" Then
        For i = 0 To break.nbLine - 2
            For j = i + 1 To break.nbLine - 1
                If break.label(i) = break.label(j) And break.label(i) <> "" Then verify_Breakdown2LinesIdentiques = i & ":" & j
            Next j
        Next i
    End If
End Function



'================================================================================================
' Sauvegarde des label/valeur d'un seul breakdown en position X,Y
' Mise en rouge si n|fffd|cessaire
'================================================================================================
Sub save_LabelValueBreakdownFromSheet(line As Integer, col As Integer, Optional nbLine As Integer = 10)
    Dim i As Integer
    Dim break As breakdown
    Dim breakdownName As String
    Dim breakdownCode As String
    Dim IDKD As Long
    Dim error As Boolean
    
    error = False
    
    breakdownCode = get_BreakdownCodeFromSheet(line, col)
    breakdownName = get_BreakdownNameFromSheet(line, col)
    break.nbLine = nbLine
    break.code = breakdownCode
    IDKD = get_IDKDFromSheet
    
    For i = 0 To nbLine - 1 ' UBound(break.label)
            break.label(i) = clean_Label(Cells(line + i + 1, col))  ' On trim le label
            break.value(i) = getValueCell(line + i + 1, col + 1)    ' R|fffd|cup|fffd|re le % ou la valeur
            break.labelCode(i) = Cells(line + i + 1, col + 2)       ' Uniquement pour les ratios
            
            
            If break.value(i) = "0" Then                                                    ' Si Value=0 on met la couleur en orange
                    Range(Cells(line + i + 1, col + 1), Cells(line + i + 1, col + 1)).Select
                    Call design_PutCellInOrange(line + i + 1, col + 1)
            ElseIf (break.label(i) = "" And break.value(i) = "") Then                       ' Si label=Value=VIDE alors on colorie en gris ou blanc
                    Range(Cells(line + i + 1, col), Cells(line + i + 1, col + 1)).Select
                    design_LineBackgroundColor (breakdownCode = "RATIOSTAT")
            ElseIf (break.label(i) <> "" And break.value(i) = "") Then                      ' Si label=blabla et value=VIDE alors en rouge
                    Call design_PutCellInRed(line + i + 1, col + 1)
                    error = True
            ElseIf (Not IsNumeric(break.value(i)) And breakdownCode <> "RATIOSTAT") Then    ' Si Value est non num|fffd|rique alors en rouge
                    Call design_PutCellInRed(line + i + 1, col + 1)
                    error = True
            ElseIf (break.label(i) = "" And break.value(i) <> "") Then                      ' Si pas de label, alors en rouge
                    Call design_PutCellInRed(line + i + 1, col)
                    error = True
            ElseIf (break.label(i) = "Average rating" And breakdownCode = "RATIOSTAT") Then
                    If Not verify_AverageRating(break.value(i)) Then                        ' Si Average Rating pas correct, alors en rouge
                        Call design_PutCellInRed(line + i + 1, col + 1)
                        error = True
                    Else
                        Range(Cells(line + i + 1, col), Cells(line + i + 1, col + 1)).Select ' Sinon en gris
                        design_LineBackgroundColor (breakdownCode = "RATIOSTAT")
                    End If
            Else
                    Range(Cells(line + i + 1, col), Cells(line + i + 1, col + 1)).Select    ' Sinon en gris / blanc
                    design_LineBackgroundColor (breakdownCode = "RATIOSTAT")
            End If
                
    Next i
    
    If Not error Then
        If breakdownCode = "RATIOSTAT" Then
            Call save_InFile_Ratios(break, IDKD)
            Call save_BreakdownInLog(break, get_FundNameFromSheet())
        Else
            test2Labels = verify_Breakdown2LinesIdentiques(break)
            If test2Labels <> "" Then
                Call design_PutCellInRed(Left(test2Labels, InStr(test2Labels, ":") - 1) + line + 1, col)
                Call design_PutCellInRed(Right(test2Labels, Len(test2Labels) - InStr(test2Labels, ":")) + line + 1, col)
                MsgBox ("Error: 2 labels have the same text. Correct and send data again.")
            End If
            '------------------------------
            ' ici important
            Call save_InFile_Breakdown(break, IDKD, breakdownCode)
            Call save_BreakdownInLog(break, get_FundNameFromSheet())
            '------------------------------
        End If
    Else
        MsgBox ("Please correct the value in red in the breakdown " & breakdownName & ".")
        If breakdownCode = "RATIOSTAT" Then
            Call save_InFile_Ratios(break, IDKD)
            Call save_BreakdownInLog(break, get_FundNameFromSheet())
        Else
            Call save_InFile_Breakdown(break, IDKD, breakdownCode)
            Call save_BreakdownInLog(break, get_FundNameFromSheet())
          End If
        End
    End If
End Sub



'================================================================================================
' retourne le dernier jour du mois precedent au format YYYYMMDD
'================================================================================================
Function get_ReportingDateLastMonth() As String
  Dim dLast As Date
  
  dLast = CDate(DateAdd("d", -1, CDate(Format(Date, "yyyy/mm/") & "01")))

  get_ReportingDateLastMonth = Format((dLast), "ddmmyyyy")

End Function


Function clean_Label(inputLabel As String) As String
    clean_Label = Trim(inputLabel)
    If UCase(inputLabel) = "OTHER" Then clean_Label = "Others"
    If UCase(inputLabel) = "OTHERS" Then clean_Label = "Others"

    If UCase(inputLabel) = "LIQUID ASSET" Then clean_Label = "Liquid Assets"
    If UCase(inputLabel) = "LIQUID ASSETS" Then clean_Label = "Liquid Assets"
    If UCase(inputLabel) = "LIQ. ASSETS" Then clean_Label = "Liquid Assets"
    If UCase(inputLabel) = "LIQ. ASSET" Then clean_Label = "Liquid Assets"
    If UCase(inputLabel) = "LIQU. ASSETS" Then clean_Label = "Liquid Assets"
    If UCase(inputLabel) = "LIQU. ASSET" Then clean_Label = "Liquid Assets"
    If UCase(inputLabel) = "OTHERS (LIQUID ASSETS INCL.)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHERS (LIQUID ASSET INCL.)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHER (LIQUID ASSETS INCL.)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHER (LIQUID ASSET INCL.)" Then clean_Label = "Others (liquid assets incl.)"

    If UCase(inputLabel) = "OTHER (LIQUID ASSETS)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHERS (LIQUID ASSETS)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHER (LIQUID ASSET)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHERS (LIQUID ASSET)" Then clean_Label = "Others (liquid assets incl.)"
    
    If UCase(inputLabel) = "OTHERS (LIQU. ASSET)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHERS (LIQU. ASSETS)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHERS (LIQU. ASSETS INC.)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHERS (LIQU. ASSETS INCL.)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHERS (LIQU. ASSETS INCLUDED)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHERS (LIQU. ASSET INC.)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHERS (LIQU. ASSET INCL.)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHERS (LIQU. ASSET INCLUDED)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHER (LIQU. ASSET)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHER (LIQU. ASSETS)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHER (LIQU. ASSETS INC.)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHER (LIQU. ASSETS INCL.)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHER (LIQU. ASSETS INCLUDED)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHER (LIQU. ASSET INC.)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHER (LIQU. ASSET INCL.)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHER (LIQU. ASSET INCLUDED)" Then clean_Label = "Others (liquid assets incl.)"

    If UCase(inputLabel) = "OTHERS (LIQ. ASSET)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHERS (LIQ. ASSETS)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHERS (LIQ. ASSETS INC.)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHERS (LIQ. ASSETS INCL.)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHERS (LIQ. ASSETS INCLUDED)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHERS (LIQ. ASSET INC.)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHERS (LIQ. ASSET INCL.)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHERS (LIQ. ASSET INCLUDED)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHER (LIQ. ASSET)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHER (LIQ. ASSETS)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHER (LIQ. ASSETS INC.)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHER (LIQ. ASSETS INCL.)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHER (LIQ. ASSETS INCLUDED)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHER (LIQ. ASSET INC.)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHER (LIQ. ASSET INCL.)" Then clean_Label = "Others (liquid assets incl.)"
    If UCase(inputLabel) = "OTHER (LIQ. ASSET INCLUDED)" Then clean_Label = "Others (liquid assets incl.)"



End Function



'================================================================================================
' Sauvegarde d'un breakdown dans un petit fichier
' Attention pour les breakdowns au niveau des classes, faire la copie vers les autres classes
'================================================================================================
Sub save_InFile_Breakdown(break As breakdown, IDKD As Long, breakdownCode As String)
    Dim filename As String
    Dim fn As Integer
    Dim i As Integer
    
    If breakdownCode = "RATIOSTAT" Then breakdownCode = "ratios"
    filename = get_DirBreakdown & "rm_wc" & breakdownCode & "_" & IDKD & "_" & get_ReportingDateLastMonth & ".txt"
        
    DeleteFile (filename)
    
    fn = FreeFile()
    
    Open filename For Output As #fn     ' Ouverture du fichier
    
    For i = 0 To break.nbLine - 1
        If break.value(i) <> "" Then
            If break.label(i) = "Average rating" Then
                Print #fn, CStr(break.label(i)) & Chr(9) & CStr(break.value(i))
            Else
                If break.label(i) <> "" Then
                    Print #fn, CStr(break.label(i)) & Chr(9) & CStr(break.value(i))
                End If
            End If
        End If
    Next
    
    Close #fn
         
    Call copy_BreakdownToOtherClasses(IDKD, filename)
         
End Sub




'================================================================================================
' Determine si un ratio est de type STAT ou RATIO
'================================================================================================
Function is_Ratios(ratioorstat As String) As Boolean
    is_Ratios = False
    Select Case ratioorstat
        Case "95%  VaR", "99%  VaR", "Attachement point", "Average duration", "BONDFLOOR", "CREDITSPREADDURATION", "DELTA", "DURATIONWORST", "Expected Loss", "Largest Position", "MODADJDUR", "DURATION", "PRIME", "SHARP", "WAL", "WAM": is_Ratios = True
    End Select
    
End Function



'================================================================================================
' Sauvegarde d'un breakdown dans un petit fichier
'================================================================================================
Sub save_InFile_Ratios(break As breakdown, IDKD As Long)
    Dim filename As String
    Dim fn As Integer
    Dim i As Integer
    
    filename = get_DirRatio & "rm_ratios_" & IDKD & "_" & get_ReportingDateLastMonth & ".txt"
        
    DeleteFile (filename)
    
    fn = FreeFile()
    
    Open filename For Output As #fn     ' Ouverture du fichier
    
    For i = 0 To 10
        If break.value(i) <> "" And break.label(i) <> "" Then
            Dim txt As String
            
            If is_Ratios(break.labelCode(i)) Then
                txt = "F" & Chr(9) & "RATIO" & Chr(9) & break.labelCode(i) & Chr(9) & break.value(i)
            Else
                txt = "F" & Chr(9) & "STAT" & Chr(9) & break.labelCode(i) & Chr(9) & break.value(i)
            End If
            Print #fn, txt
        End If
            
    Next
    
    Close #fn
         
End Sub





'================================================================================================
'================================================================================================
Function get_FM_CC(IDKD As String) As String
    Dim filename As String
    Dim fn As Integer
    Dim str As String
    
    filename = DirData & EmailFilename
    get_FM_CC = ""
    
    If fileExists(filename) Then
    
        fn = FreeFile()
        Open filename For Input As #fn       ' Ouverture du fichier SWX
          Do While Not EOF(fn)
            Line Input #fn, str
            If Left(str, InStr(str, ":") - 1) = (IDKD & "_CC") Then
                get_FM_CC = Mid(str, InStr(str, ":") + 1)
                GoTo fin:
            End If
          Loop
fin:
        Close #fn    ' Fermeture du fichier
    Else
        MsgBox ("The file with the email addresses is not present: " & EmailFilename)
    End If


End Function

Function get_FM_TO(IDKD As String) As String
    Dim filename As String
    Dim fn As Integer
    Dim str As String
    get_FM_TO = ""
    
    filename = DirData & EmailFilename
    
    If fileExists(filename) Then
    
        fn = FreeFile()
        Open filename For Input As #fn       ' Ouverture du fichier SWX
          Do While Not EOF(fn)
            Line Input #fn, str
            If Left(str, InStr(str, ":") - 1) = (IDKD & "_TO") Then
                get_FM_TO = Mid(str, InStr(str, ":") + 1)
                GoTo fin:
            End If
          Loop
fin:
        Close #fn    ' Fermeture du fichier
    Else
        MsgBox ("The file with the email addresses is not present: " & EmailFilename)
    End If


End Function




'-------------------------------------------------------------------------
' Repertoire des ratios en fonction de l'utilisateur
'-------------------------------------------------------------------------
Function get_DirRatio() As String
    If isPersonFronmReportingTeam Then
        get_DirRatio = DirRatioRT                       ' LIB_DAV
    Else
        get_DirRatio = DirRatio & getYYYYMM() & "\"     ' LIB_Fundreportingdata
    End If

End Function

'-------------------------------------------------------------------------
' Repertoire des breakdowns en fonction de l'utilisateur
'-------------------------------------------------------------------------
Function get_DirBreakdown() As String
    If isPersonFronmReportingTeam Then
        get_DirBreakdown = DirBreakdownRT
    Else
        get_DirBreakdown = DirBreakdown & getYYYYMM() & "\"
    End If

End Function

'================================================================================================
' Sauvegarde d'un breakdown dans un petit fichier pour une classe Monnaie
'================================================================================================
Sub save_InFile_Breakdown_Class_100pc(IDKD As Long, CUR As String)
    Dim filename As String
    Dim fn As Integer
    filename = get_DirBreakdown & "rm_repmon" & "_" & IDKD & "_" & get_ReportingDateLastMonth & ".txt"
        
    DeleteFile (filename)
    
    fn = FreeFile()
    
    Open filename For Output As #fn     ' Ouverture du fichier
    
    Print #fn, CUR & Chr(9) & "100"
    
    Close #fn
         
End Sub




'================================================================================================
' Initialisation de l'objet principal
'================================================================================================
Sub clean_Breakdown(ByRef fondbreak As FondBreakdown)
    Dim i, j As Integer
    fondbreak.breakdownDate = ""
    fondbreak.fundcode = 0
    fondbreak.fundName = ""
    fondbreak.nbBreakdown = 0
    For i = 0 To 15
        fondbreak.breakdownX(i).code = ""
        fondbreak.breakdownX(i).name = ""
        
        
        For j = 0 To 15
            fondbreak.breakdownX(i).label(j) = ""
            fondbreak.breakdownX(i).labelCode(j) = ""
            fondbreak.breakdownX(i).value(j) = ""
            
        Next j
    Next i
End Sub



    
    
'===============================================================================================
' Sauvegarde du breakdown dans le fichier de log
'===============================================================================================
Sub save_BreakdownInLog(break As breakdown, fundName As String)
    Dim i As Integer
    
    Dim lineLabelVal As String

    For i = 0 To break.nbLine - 1
           lineLabelVal = lineLabelVal & break.label(i) & vbTab & break.value(i) & vbTab
    Next i
    
    Call add_OneLineInLog(get_IDKDFromSheet, "BREAKDOWN", break.code, Trim(lineLabelVal))

End Sub


'===============================================================================================
' AddThisLineOnFile
' Ajout d'une ligne |fffd| la fin d'un fichier de LOG
'===============================================================================================
Sub add_OneLineInLog(EF2 As String, typeD As String, Optional Information2 As String, Optional Information3 As String)
    Dim F As Integer
    Dim filename As String
    
    Information2 = Replace(Information2, vbCrLf, ";" & vbTab)
  
    
    filename = "\\merlin\lib_fundreportingdata\MonthlyData\" & "ReportingLog" & getYYYYMM() & ".txt"

    If Len(filename) = 0 Then Exit Sub      ' workbook not saved yet...
    F = FreeFile()
    On Error Resume Next ' ignores any logging errors
    Open filename For Append As #F
    Write #F, Date, Time, get_CurrentUserName(), EF2, typeD, "rm_" & Replace(Information2, "RATIOSTAT", "ratios"), Information3
    Close #F
    On Error GoTo 0
End Sub


'-------------------------------------------------------------------------
' Test de l'email, doit contenir "@lombardodier.com"
'-------------------------------------------------------------------------
Sub verify_email(TOorCC As String)
    Dim i As Integer
    Dim listEmail() As String
    
    TOorCC = Replace(TOorCC, ",", ";")
    
    listEmail = Split(TOorCC, ";")

    For i = 0 To UBound(listEmail)
        If listEmail(i) <> "" Then
            If InStr(listEmail(i), ".") = 0 Then
                MsgBox ("Error: Address eMail not correct, missing a dot for [" & listEmail(i) & "]")
            End If
        
            If InStr(listEmail(i), "@") = 0 Then
                MsgBox ("Error: Address eMail not correct, missing @ for [" & listEmail(i) & "]")
            End If
        
            If InStr(listEmail(i), "@lombardodier.com") = 0 And InStr(listEmail(i), "@vaneck.com") = 0 Then
                MsgBox ("Error: Address eMail not correct, missing '@lombardodier.com' for [" & listEmail(i) & "]")
            End If
        End If
    Next i
End Sub


Function verify_AverageRating(avr As String) As Boolean

    verify_AverageRating = False
    
    Select Case avr
        Case "Not rated", "Liquid assets", "Others", "Others (liquid assets incl.)", "A", "A+", "A-", "BBB", "BBB+", "BBB-", "BB", "AAA", "AA", "AA+", "AA-", "CCC", "CC", "C", "C+", "C-", "CC+", "CC-", "CCC+", "CCC-": verify_AverageRating = True
    End Select

End Function



' Sauvegarde du fichier automatiquement dans un sous folder
Function saveTemplateDataFile()
    On Error GoTo err1:
    Application.DisplayAlerts = False
    ActiveWorkbook.SaveAs filename:="\\merlin\lib_fundreportingdata\Template\ALLTemplate\SavedFromFM\Breakdown" & get_IDKDFromSheet & ".xlsm", FileFormat:=xlOpenXMLWorkbookMacroEnabled, CreateBackup:=False
    Application.DisplayAlerts = True

    GoTo fin1:
err1:
    MsgBox ("You have not access to the folder !!! Only valid from LO offices...")
    End
fin1:

End Function



Attribute VB_Name = "Design"
Const PositionC_Title As Integer = 2
Const PositionL_Title As Integer = 1
Const PositionC_FundCode As Integer = 1
Const PositionL_FundCode As Integer = 1
Const PositionC_ReportingDate As Integer = 2
Const PositionL_ReportingDate As Integer = 2
Const PositionC_NbBreakdown As Integer = 1
Const PositionL_NbBreakdown As Integer = 2

Const PositionC_EmailTitle As Integer = 2
Const PositionL_EmailTitle As Integer = 34
Const PositionC_EmailTO As Integer = 2
Const PositionL_EmailTO As Integer = 35
Const PositionC_EmailCC As Integer = 2
Const PositionL_EmailCC As Integer = 36


'================================================================================================
' Design d'un breakdown
' nbLine = N (generalement 5, 10 ou 12), max 15
'================================================================================================
Sub design_Creation_Breakdown(line As Integer, col As Integer, Optional nbLine As Integer = 10)
    
    ' Cadre autour de la premi|fffd|re colonne
    '------------------------------------
    Range(Cells(line, col), Cells(line + nbLine, col)).Select ' Selection de la premi|fffd|re colonne
    
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    
    

    '------------------------------------
    ' Format du titre du breakdown
    Range(Cells(line, col), Cells(line, col + 1)).Select    ' Selection de l'entete

    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlBottom
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = True
    End With
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = -0.349986266670736
        .PatternTintAndShade = 0
    End With

    '------------------------------------
    ' Format de la deuxi|fffd|me colonne
    Range(Cells(line + 1, col + 1), Cells(line + nbLine, col + 1)).Select   ' Selection de la deuxi|fffd|me colonne sans le titre
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone


    '------------------------------------
    ' Format du bord du titre du breakdown
    Range(Cells(line, col), Cells(line, col + 1)).Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone


    ActiveWindow.DisplayGridlines = False
    
End Sub


'================================================================================================
' Grille d'un breakdown + total + couleur si ratio
' nbline =10 par defaut, peut etre 5 ou 12
'================================================================================================
Sub design_Grille_Breakdown(line As Integer, col As Integer, displayTotal As Boolean, greyColor As Boolean, Optional nbLine As Integer = 10)
    
    
    '------------------------------------
    ' Largeur de la premiere colonne
    Range(Cells(line + 1, col), Cells(line + nbLine, col)).Select       ' Selection de la premiere colonne
    
    
    Selection.HorizontalAlignment = xlLeft
    Selection.ColumnWidth = 38
    
    '------------------------------------
    ' Largeur colonnes entre les breakdowns
    Cells(1, col + 1).Select
    Selection.ColumnWidth = 7
    Cells(1, col + 2).Select
    Selection.ColumnWidth = 1
    Cells(1, col + 3).Select
    Selection.ColumnWidth = 1
    Cells(1, col + 4).Select
    Selection.ColumnWidth = 1
    
    
    Range(Cells(line + 1, col), Cells(line + nbLine, col + 1)).Select       ' Selection colonne 1 et 2
    Selection.Locked = False                                                ' On d|fffd|bloque que la grille du breakdown label + valeur
    Selection.FormulaHidden = False
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    
    '------------------------------------
    ' Bordure d'un breakdown
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    
    
    '------------------------------------
    ' Rajout du total en bas
    If displayTotal Then
    
        Cells(line + nbLine + 1, col + 1).Select
        ActiveCell.Formula = "=Sum(" & Range(Cells(line + 1, col + 1), Cells(line + nbLine, col + 1)).Address & ")"
        
        Cells(line + nbLine + 1, col).Select
    
        With Selection
            .HorizontalAlignment = xlRight
            .VerticalAlignment = xlBottom
            .WrapText = False
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = False
        End With
        ActiveCell.FormulaR1C1 = "Total"
    End If


    '------------------------------------
    ' Rajout du code du breakdown en blanc
    Range(Cells(line, col + 2), Cells(line + nbLine, col + 2)).Select ' Affichage du code en blanc a droite
    With Selection.Font
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = 0
    End With

    
    '------------------------------------
    ' Si c'est le breakdown des ratios: en gris
    
    If greyColor Then  ' RATIO + STAT
    
        Range(Cells(line + 1, col), Cells(line + nbLine, col)).Select
        With Selection.Interior
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
            .ThemeColor = xlThemeColorDark1
            .TintAndShade = -0.249977111117893
            .PatternTintAndShade = 0
        End With
        Selection.Locked = True ' On d|fffd|bloque que la grille
    
    Else
        
        Range(Cells(line + 1, col), Cells(line + nbLine, col + 1)).Select
        design_LineBackgroundColor  ' Affichage d'une ligne sur 2 en gris|fffd|

    End If
    

End Sub


Sub design_PutCellInRed(line As Integer, col As Integer)
    On Error GoTo fin3:
    Cells(line, col).Select
    Selection.Interior.Color = 255
    GoTo fin5:
fin3:
    MsgBox ("Error in color red....")
fin5:
End Sub

Sub design_PutCellInOrange(line As Integer, col As Integer)
    On Error GoTo fin3:
    'ActiveSheet.Unprotect
    'Worksheets(1).Unprotect
   ' Sheets(1).Unprotect
   ' Range(Cells(7, 2), Cells(7, 2)).Select
    'Range(Cells(7, 2), Cells(7, 2)).Unprotect
    'Cells(line, col).Select
    Selection.Interior.Color = RGB(240, 150, 0)
    GoTo fin5:
fin3:
    MsgBox ("Warning, value = 0 ...")
fin5:
End Sub


'================================================================================================
' Titre du fonds et date + code du fonds
'================================================================================================
Sub design_Display_FundName(fundBreak As FondBreakdown)
    ' Suppression du class type si IDKD est sur 5 positions
    If Len(CStr(fundBreak.fundcode)) = 5 And Left(Right(fundBreak.fundName, 2), 1) = " " Then
        fundBreak.fundName = Left(fundBreak.fundName, Len(fundBreak.fundName) - 2)
    End If
    
    Cells(PositionL_Title, PositionC_Title).Select
    Cells(PositionL_Title, PositionC_Title) = fundBreak.fundName ' Affichage du nom
    
    
    
   ' Selection.Font.Bold = True
    With Selection.Font
        .name = "Calibri"
        .Size = 16
        .Bold = True
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0
        .ThemeFont = xlThemeFontMinor
    End With
    
    
    Cells(PositionL_FundCode, PositionL_FundCode).Select ' Affichage du code en blanc en dessous
    With Selection.Font
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = 0
    End With
    Cells(PositionL_FundCode, PositionL_FundCode) = fundBreak.fundcode
    
    
    Cells(PositionL_NbBreakdown, PositionC_NbBreakdown).Select ' Affichage du nb breakdown en blanc en dessous
    With Selection.Font
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = 0
    End With
    Cells(PositionL_NbBreakdown, PositionC_NbBreakdown) = fundBreak.nbBreakdown

    Call design_Display_NewDate_Val(fundBreak.breakdownDate)

End Sub
Sub design_Display_NewDate(Optional rien As Integer)
    design_Display_NewDate_Val (getDateLastMonthDDMMYYYY)
End Sub
Sub design_Display_NewDate_Val(valDate As String)
    ActiveSheet.Unprotect
    
    Cells(PositionL_ReportingDate, PositionC_ReportingDate).Select ' Affichage de la date
    With Selection.Font
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0
    End With
    Cells(PositionL_ReportingDate, PositionC_ReportingDate) = "Data should be as at " & Format(getDateLastMonthDDMMYYYY, "DD.MM.YYYY")
End Sub


'================================================================================================
' Retourne le s|fffd|parateur en fonction du pays CH ou GB
'================================================================================================
Function getSeparator() As String
    getSeparator = Application.International(xlListSeparator)
End Function


'================================================================================================
' Affichage en gris|fffd| une ligne sur 2, on doit avoir s|fffd|lectionn|fffd| la grille avant
'================================================================================================
Sub design_LineBackgroundColor(Optional inGrey As Boolean = False)
    Dim Plage As String
    Dim pp As Range
    Dim labelTxt(40) As String
    Dim labelVal(40) As Double
    Dim filename As String
    Dim nbLine As Integer
    
    If inGrey Then
        'ActiveSheet.Unprotect
        'With Selection.Interior
        '    .Pattern = xlSolid
        '    .PatternColorIndex = xlAutomatic
        '    .ThemeColor = xlThemeColorDark1
            '.TintAndShade = -0.249977111117893
        '    .PatternTintAndShade = 0
   '     End With
    
    Else
        
        
        
        Plage = Selection.Address
        
        Dim FL1 As Worksheet
        Set FL1 = Worksheets(ActiveWorkbook.ActiveSheet.name)
        
        With FL1
            Set pp = .Range(Plage)
        End With
            
        nbLine = pp.Rows.Count - 1
        nbCol = pp.Columns.Count - 1
            
        line = pp.Row
        col = pp.column
        
        For l = line To nbLine + line
            If l Mod 2 = 0 Then
                Range(Cells(l, col), Cells(l, col + nbCol)).Select
                With Selection.Interior
                    
                    .Pattern = xlSolid
                    .PatternColorIndex = xlAutomatic
                    .ThemeColor = xlThemeColorDark1
                    .TintAndShade = -0.13
                    .PatternTintAndShade = 0
                End With
            Else ' BLANC
                Range(Cells(l, col), Cells(l, col + nbCol)).Select
                With Selection.Interior
                    .Pattern = xlSolid
                    .PatternColorIndex = xlAutomatic
                    .ThemeColor = xlThemeColorDark1
                    .TintAndShade = 0
                    .PatternTintAndShade = 0
                End With
            End If
        Next l
        
    End If
End Sub

Sub design_AddButtonSave(Optional rien As Integer)
    
    ActiveSheet.Buttons.add(450, 4.5, 159, 25.5).Select
    Selection.OnAction = "save_AllData"
    Selection.Characters.text = "SEND DATA / VALIDATE"
    With Selection.Characters(Start:=1, Length:=20).Font
        .name = "Arial Narrow"
        .FontStyle = "Bold"
        .Size = 11
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .ColorIndex = 53
    End With
End Sub




Sub design_EmailTable(Optional rien As Integer)
'------------------------------------------------------------
' Le titre
    Cells(PositionL_EmailTitle, PositionC_EmailTitle) = "VALIDATION MAILING LIST (PLEASE ALTER AS YOU SEE APPROPRIATE)"
    Cells(PositionL_EmailTitle, PositionC_EmailTitle).Select
    Selection.Font.Bold = True
    
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 2895417
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    With Selection.Font
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = 0
    End With
    With Selection.Font
        .name = "Arial Narrow"
        .Size = 12
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = 0
        .ThemeFont = xlThemeFontNone
    End With


    ' Merge pour le titre
    Range(Cells(PositionL_EmailTitle, PositionC_EmailTitle), Cells(PositionL_EmailTitle, PositionC_EmailTitle + 21)).Select
    With Selection
        .MergeCells = True
    End With

'------------------------------------------------------------

    Cells(PositionL_EmailTO, PositionC_EmailTO) = "TO"
    Range(Cells(PositionL_EmailTO, PositionC_EmailTO + 1), Cells(PositionL_EmailTO, PositionC_EmailTO + 21)).Select
    With Selection
        .MergeCells = True
    End With
    Selection.Locked = False ' On d|fffd|bloque que la grille

    Cells(PositionL_EmailCC, PositionC_EmailCC) = "CC"
    Range(Cells(PositionL_EmailCC, PositionC_EmailCC + 1), Cells(PositionL_EmailCC, PositionC_EmailCC + 21)).Select
    With Selection
        .MergeCells = True
    End With
    Selection.Locked = False ' On d|fffd|bloque que la grille

    '------------------------------------------------------------
    ' Grille de la table mail

    Call design_EmailGrille


    
    Cells(PositionL_EmailTO, PositionC_EmailTO + 1) = get_FM_TO(CStr(get_IDKDFromSheet))
    Cells(PositionL_EmailCC, PositionC_EmailCC + 1) = get_FM_CC(CStr(get_IDKDFromSheet))

End Sub




Public Sub design_EmailGrille(Optional rien As Integer)
'
' Macro8 Macro
'

'
    Range(Cells(PositionL_EmailTitle, PositionC_EmailTitle), Cells(PositionL_EmailCC, PositionC_EmailCC + 21)).Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    Range("O13").Select
End Sub



Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub workbook_Open()
    MAIN_BUILDPAGE
End Sub

Attribute VB_Name = "Tools"
Private Declare Function GetUserName Lib "advapi32.dll" _
    Alias "GetUserNameA" (ByVal lpBuffer As String, nSize As Long) As Long


'===============================================================================================
' D|fffd|termine si la case en haut |fffd| gauche et en bas a droite sont prot|fffd|g|fffd|es ou pas
'===============================================================================================
Function isRectangleProtected(x As Integer, y As Integer, nbR As Integer, nbC As Integer) As Boolean
    isRectangleProtected = False
    If Range(Cells(x, y), Cells(x, y)).Locked Then isRectangleProtected = True
    If Range(Cells(x + nbR - 1, y + nbC - 1), Cells(x + nbR - 1, y + nbC - 1)).Locked Then isRectangleProtected = True
End Function

'===============================================================================================
' R|fffd|cup|fffd|re le nombre de ligne du COPY
' Nec|fffd|ssite d'activer la r|fffd|f|fffd|rence "Microsoft Forms 2.0 Object Library."
'===============================================================================================
Function nbRowInClipboard() As Integer
    Dim Resultat As String
    Dim tabl() As String
    On Error Resume Next
    With New DataObject
        .GetFromClipboard
        Resultat = .GetText(1)
    
        tabl = Split(Resultat, vbCrLf)
        nbRowInClipboard = UBound(tabl)
    End With
End Function
 
'===============================================================================================
' R|fffd|cup|fffd|re le nombre de colonne du COPY
' Nec|fffd|ssite d'activer la r|fffd|f|fffd|rence "Microsoft Forms 2.0 Object Library."
'===============================================================================================
Function nbColumnInClipboard() As Integer
    Dim Resultat As String
    Dim tabl() As String
    Dim tabl2() As String
    On Error Resume Next
    With New DataObject
        .GetFromClipboard
        Resultat = .GetText(1)
    
        tabl = Split(Resultat, vbCrLf)
        tabl2 = Split(tabl(0), vbTab)
    
       nbColumnInClipboard = UBound(tabl2) + 1
    End With
End Function
 
Sub copyValueInSheet(Optional rien As Integer)
    Dim Resultat As String
    Dim i As Integer
    Dim j As Integer
    Dim tabl() As String
    With New DataObject
        .GetFromClipboard
        Resultat = .GetText(1)
        
        tabl = Split(Resultat, vbCrLf)
        
        For i = 0 To UBound(tabl)
            Dim tabl2() As String
            tabl2 = Split(tabl(i), vbTab)
            For j = 0 To UBound(tabl2)
                Cells(i + Selection.Row, j + Selection.column).value = tabl2(j)
            Next j
        
        Next i
    

    End With

End Sub


'===============================================================================================
' Remplace le control V courant
'===============================================================================================
Sub controlV()
Attribute controlV.VB_ProcData.VB_Invoke_Func = "v\n14"
  Dim posx As Integer
  Dim posy As Integer
  Dim nbcopyRow As Integer
  Dim nbcopyCol As Integer
  
  If Left(ActiveWorkbook.name, 9) = "Breakdown" Then
      posx = Selection.Row
      posy = Selection.column
      nbcopyRow = nbRowInClipboard
      nbcopyCol = nbColumnInClipboard
      finr = posx + nbcopyRow
      
      If posy = 1 Or posy = 4 Or posy = 5 Or posy = 6 Or posy = 9 Or posy = 10 Or posy = 11 Or posy = 14 Or posy = 15 Or posy = 16 Or posy = 19 Or posy = 20 Or posy = 21 Then
        MsgBox ("Column position of the paste not correct....")
        End
      End If
      
      If nbcopyCol < 1 Or nbcopyCol > 2 Then
        MsgBox ("Copy/paste error: you can copy only 2 columns in maximum.")
        End
      End If
      
      If nbcopyRow > 15 Then
        MsgBox ("Copy/paste error: you can copy only 10 rows in maximum.")
        End
      End If
      
      If posx < 20 And posx + nbcopyRow > 20 Then
        MsgBox ("Copy/paste error: you can copy only 10 rows in maximum.")
        End
      End If
      
      
      If isRectangleProtected(posx, posy, nbcopyRow, nbcopyCol) Then
        MsgBox ("Last line or column of the paste outside the breakdown.")
        End
      End If
      
    
    
    On Error GoTo fin1:
        'ActiveSheet.PasteSpecial Link:=False, DisplayAsIcon:=False, NoHTMLFormatting:=True
        '    ActiveSheet.Paste
        'Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    
        'ActiveSheet.PasteSpecial Format:="HTML", Link:=False, DisplayAsIcon:=False, NoHTMLFormatting:=True
        'ActiveSheet.PasteSpecial xlPasteValues
        Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    
    
    GoTo finfin:
fin1:
        
        On Error GoTo fin2:
        Call copyValueInSheet
        'ActiveSheet.Paste
        GoTo finfin:
fin2:
        On Error GoTo fin3:
        GoTo finfin:
        'ActiveSheet.PasteSpecial Format:="HTML", Link:=False, DisplayAsIcon:=False, NoHTMLFormatting:=True
    
fin3:
    
fin6:
        MsgBox ("Copy/Paste: More than 2 columns or 10 lines (" & nbcopyRow & " lines), or not enough places.")
      
    
    Else 'on n'est pas dans notre feuille
        On Error GoTo finfin:
        Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    End If

finfin:

End Sub



'===============================================================================================
' Retourne YYYYMM en fonction d'aujourd'hui
' Exemple 201712
'===============================================================================================
Function getYYYYMM() As String
    Dim mois, annee As String
    annee = Year(Date)
    mois = Month(Date) - 1
    
    If mois = "0" Then
        mois = "12"
        annee = annee - 1
    End If
    
    If Len(mois) = 1 Then mois = "0" & mois
    getYYYYMM = annee & mois
End Function

'===============================================================================================
' Retourne la valeur d'une cellule. Si on a 10% retourne 10. Si on a 0.20, retourne 0.20
'===============================================================================================
Function getValueCell(line As Integer, col As Integer)
    Dim res As String
    
    res = Trim(Cells(line, col).text)
    If InStr(res, "%") <> 0 Then res = Replace(res, "%", "")
    getValueCell = res
End Function

'===============================================================================================
' Determine si un onglet avec un certain nom existe ou pas
' Retourne TRUE si strNomFeuille est le nom d'une feuille qui n'existe pas dans le classeur actif
'===============================================================================================
Public Function is_SheetPresent(ByVal strNomFeuille As String) As Boolean
 
 is_SheetPresent = Not IsError(Evaluate("='" & strNomFeuille & "'!A1"))

End Function

'================================================================================================
' retourne le dernier jour du mois precedent au format 30.09.2013
'================================================================================================
Function getDateLastMonthDDMMYYYY() As String
  Dim str As String
  str = Format(Now, "DD/MM/YYYY")
  str = "01" & Mid(str, 3)
  d_1 = CDate(str)
  d_1 = d_1 - 1
  getDateLastMonthDDMMYYYY = Format(d_1, "DD/MM/YYYY")
End Function

'===============================================================================================
' ReturnUserName
' Retourne le nom de l'utilisateur en majuscule
'===============================================================================================
Function get_CurrentUserName() As String
' returns the Domain User Name
    Dim rString As String * 255, sLen As Long, tString As String
    tString = ""
    On Error Resume Next
    sLen = GetUserName(rString, 255)
    sLen = InStr(1, rString, Chr(0))
    If sLen > 0 Then
        tString = Left(rString, sLen - 1)
    Else
        tString = rString
    End If
    On Error GoTo 0
    get_CurrentUserName = UCase(Trim(tString))
End Function



'================================================================================================
' Quelq'un du reporting ?
'================================================================================================
Function isPersonFronmReportingTeam() As Boolean
    Dim userName As String
    
    userName = get_CurrentUserName()
    
    isPersonFronmReportingTeam = (userName = "RAUBER" Or userName = "HOWE")


End Function


'================================================================================================
' DeleteFile
' Destruction d'un fichier, si il existe
'================================================================================================
Sub DeleteFile(filename As String)
    Dim FSO

    Set FSO = CreateObject("Scripting.FileSystemObject")
    If FSO.fileExists(filename) Then
        On Error GoTo err
        FSO.DeleteFile filename, True
    End If
    GoTo ENDSUB
err:
    Call MsgBox("Close the file " & filename, vbOKOnly, "Error")
    End
ENDSUB:
End Sub




'================================================================================================
' moveafile
' On d|fffd|place un fichier
'================================================================================================
Sub moveafile(fromfilename As String, tofilename As String)
    Dim xlobj As Object
    
    Dim FSO
   On Error Resume Next
    Set xlobj = CreateObject("Scripting.FileSystemObject")
    If xlobj.fileExists(fromfilename) Then
        DeleteFile (tofilename)
        xlobj.MoveFile fromfilename, tofilename
    End If
    Set xlobj = Nothing
End Sub


    

'================================================================================================
' copyafile
' On copie un fichier
'================================================================================================
Sub copyafile(fromfilename As String, tofilename As String)
    Dim FSO

    If fromfilename <> tofilename Then
        Set FSO = CreateObject("Scripting.FileSystemObject")
        If FSO.fileExists(tofilename) Then
            On Error GoTo err
            FSO.DeleteFile tofilename, True
        End If
err:
    
        If FSO.fileExists(fromfilename) Then
            FSO.CopyFile fromfilename, tofilename
        End If
    End If
    Set FSO = Nothing
End Sub


'================================================================================================
' fileExists
' D|fffd|termine si un fichier existe
'================================================================================================
Function fileExists(fromfilename As String) As Boolean

    Dim xlobj As Object

    Set xlobj = CreateObject("Scripting.FileSystemObject")
    If xlobj.fileExists(fromfilename) Then
        fileExists = True
    Else
        fileExists = False
    End If
    Set xlobj = Nothing

End Function



'================================================================================================
' Recherche du nom du fonds en fonction du IDKD dans le fichier des ratios
' PAS UTILISE
'================================================================================================
Function get_FundNameFromStatRatioFile(IDKD As String) As String
    Dim filename As String
    Dim fn As Integer
    Dim str As String
    Dim tabRS() As String
    Dim nbRS As Integer
    Dim findRatio As Boolean
    Dim nbRatio As Integer
    
    findRatio = False
    filename = DirData & RatioFilename
    get_FundNameFromStatRatioFile = ""
    
    If fileExists(filename) Then
    
        fn = FreeFile()
    
        Open filename For Input As #fn        ' Ouverture du fichier SWX
        
        Do While Not EOF(fn)    ' Loop until end of file.
            Line Input #fn, str
            tabRS = Split(str, ";")
            If tabRS(0) = IDKD Then
                get_FundNameFromStatRatioFile = tabRS(1)
                GoTo fin:
            End If
        Loop
        Close #fn    ' Fermeture du fichier
    End If
fin:
    If get_FundNameFromStatRatioFile = "" Then
        MsgBox ("Error: Fund name not found in the file " & DirData & RatioFilename & " for the code=" & IDKD)
    End If
End Function



' InQuest injected base64 decoded content
' zjej

INQUEST-PP=macro
