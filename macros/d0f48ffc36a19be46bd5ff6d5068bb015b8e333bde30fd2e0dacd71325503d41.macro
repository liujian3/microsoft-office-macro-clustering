Attribute VB_Name = "Module1"
Public strPassword As String

Sub btnSendMail_Click()

    Dim wb As Workbook
    Dim TempFilePath As String
    Dim TempFileName As String
    Dim FileExtStr As String
    Dim iMsg As Object
    Dim iConf As Object
    Dim strbody As String
    Dim Flds As Variant
    Dim MailSentIndex As Integer
    Dim strPwd As String
    strPwd = "Purch123"
    
    
    Set wb = ActiveWorkbook
    
    MailSentIndex = CInt(wb.Sheets("POC").Range("SentIndex"))
    
    If (MailSentIndex > 0) Then
        If MsgBox("This Purchase Order you sent already. Are you sure to send this again?", vbQuestion + vbYesNo, "Confirmation") <> vbYes Then
           Exit Sub
        End If
    Else
        If MsgBox("Are you sure to send this Purchase Order?", vbQuestion + vbYesNo, "Confirmation") <> vbYes Then
           Exit Sub
        End If
    End If
    
    If Not ValidateSheet() Then
        Exit Sub
    End If
    'Set iMsg = CreateObject("CDO.Message")
   ' Set iConf = CreateObject("CDO.Configuration")
    
    If Val(Application.Version) >= 12 Then
        If wb.FileFormat = 51 And wb.HasVBProject = True Then
        MsgBox "There is VBA code in this xlsx file, there will be no VBA code in the file you send." & vbNewLine & _
               "Save the file first as xlsm and then try the macro again.", vbInformation
        Exit Sub
        End If
    End If

    With Application
        .ScreenUpdating = False
        .EnableEvents = False
    End With

   
    
    ''Finally Update the SentIndex Counter.
    MailSentIndex = MailSentIndex + 1
    'First Unprotect the sheet.
    Sheets("POC").Unprotect Password:=strPwd
    Sheets("POC").Range("SentIndex") = MailSentIndex
    
    'Then Protect it back
    Sheets("POC").Protect Password:=strPwd
    
     Application.DisplayAlerts = False
    ActiveWorkbook.Save
    Application.DisplayAlerts = True
    
   ' wb.Sheets("POC").Shapes("btnSendMail").ControlFormat.Enabled = False
    Application.Dialogs(xlDialogSendMail).Show arg1:=Range("LoggedInEmailID").Value, arg2:="PO Confirmation for PO No: " & Range("PONumber").Value
    'wb.Sheets("POC").Shapes("btnSendMail").ControlFormat.Enabled = True
    Exit Sub
End Sub
 


Attribute VB_Name = "Module2"
Public Function ValidateSheet() As Boolean
    Dim TotalRowIndex As Integer
    Dim TotalColIndex As Integer
    Dim StartRowIndex As Integer
    Dim EndRowIndex As Integer
    
    Dim wb As Workbook
    Set wb = ActiveWorkbook
     
    TotalRowIndex = wb.Sheets("POC").Range("ItemListEndRow").Row
    TotalRowIndex = TotalRowIndex - 1
    TotalColIndex = 12
    ValidateSheet = True
  
    If wb.Sheets("POC").Range("VendorReference") = "" Then
        a = MsgBox("Do you want to Send the Purchase Order without Vendor Reference?", vbYesNo, "Send")
        If a = vbNo Then
            ValidateSheet = False
            Exit Function
        Else
               wb.Sheets("POC").Range("VendorReference") = "NA"
        End If
    End If
    
     If wb.Sheets("POC").Range("Status") = "" Then
        Application.Goto Worksheets("POC").Range("Status")
        MsgBox "Please Enter Status.", vbOKOnly, "Required"
        ValidateSheet = False
        Exit Function
    End If
    
    'To Check whether the Total Unit Price is Greater then 0 or not?
    If (IsNumeric(Cells(TotalRowIndex, TotalColIndex))) Then
        If (Cells(TotalRowIndex, TotalColIndex) < 0) Then
            MsgBox "The Total PO Value is Less then or Equal to 0. Kindly enter appropriate Unit Price.", vbInformation, "Invalid Operation"
            ValidateSheet = False
            Exit Function
        End If
    Else
        MsgBox "The Total PO Value is Less then or Equal to 0. Kindly enter appropriate Unit Price.", vbInformation, "Invalid Operation"
        ValidateSheet = False
        Exit Function
    End If
    
    'To Check whether the user entered Unit Price or not?
    Dim POCRange As String
    Dim CellValue As String
    Dim CellRange As Range
    Dim cell As Range
    
    StartRowIndex = wb.Sheets("POC").Range("ItemListStartupRow").Row
    EndRowIndex = wb.Sheets("POC").Range("ItemListEndRow").Row
    POCRange = "A" + CStr(StartRowIndex) + ":A" + CStr(EndRowIndex)
    'MsgBox "Initiating:" & CStr(QuoteRange)
    
    For Each cell In Range(POCRange)
        If (cell.Column = 1) Then
            'MsgBox "In 1:"
            If (IsNumeric(cell.Value)) Then
                If (CInt(cell.Value) > 0) Then
                    'Checking the Unit Value
                    If (IsNumeric(Cells(cell.Row, 11))) Then
                        If (CDec(Cells(cell.Row, 11)) < 0) Then
                            If (CStr(Cells(cell.Row, 11)) = "") Then
                                MsgBox "Invalid Price for : " + CStr(Cells(cell.Row, 4)), vbInformation, "Invalid Operation"
                                ValidateSheet = False
                                Exit For
                            End If
                        End If
                    Else
                        MsgBox "Invalid Price for : " + CStr(Cells(cell.Row, 4)), vbInformation, "Invalid Operation"
                        ValidateSheet = False
                        Exit For
                    End If
                                        
                End If
            End If
        End If
    Next cell
    
    

End Function

 
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
 


Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
If Worksheets("POC").Range("VAL") = "1" Then
    If Worksheets("POC").Range("VendorReference") = "" Then
        a = MsgBox("Do you want to save the PO Confirmation without Vendor Reference?", vbYesNo, "Save")
        If a = vbNo Then
            Cancel = True
        Else
            Worksheets("POC").Range("VendorReference") = "NA"
            If Worksheets("POC").Range("Status") = "" Then
                Application.Goto Worksheets("POC").Range("Status")
                MsgBox "Please Enter Status.", vbOKOnly, "Required"
                Cancel = True
            End If
        End If
    Else
        If Worksheets("POC").Range("Status") = "" Then
                Application.Goto Worksheets("POC").Range("Status")
                MsgBox "Please Enter Status.", vbOKOnly, "Required"
                Cancel = True
         End If
    End If
 Else
     Worksheets("POC").Range("VAL") = "1"
 End If
End Sub

Attribute VB_Name = "frmPassword"
Attribute VB_Base = "0{884E7835-D324-4312-9417-59A45A8A80BB}{430E50F4-3359-41A7-8D04-5514C923ECEF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub pbCancel_Click()
    Unload Me
End Sub

Private Sub pbOk_Click()
    On Error Resume Next
    
    If frmPassword.dfPassword <> frmPassword.dfCpassword Then
        Response = MsgBox("Confirmation Password is not identical", vbInformation, "Ship // Mate SPS")
        Sheet1.Range("H20").Select
        Exit Sub
    Else
        Sheets("Quote").Unprotect Password:="Purch123"
        Sheets("Quote").Range("Lock") = frmPassword.dfPassword
        Sheets("Quote").Protect Password:="Purch123"
        ActiveWorkbook.Save
        Sheets("Quote").Shapes("btnLock").TextEffect.Text = "UnLock Data"
        Unload frmPassword
        lockFields
    End If
End Sub
 
 
Attribute VB_Name = "frmPasswordUnlock"
Attribute VB_Base = "0{3D5A3A9E-F465-4093-89E7-A0060B362D12}{FB6EC8D0-071D-4319-95BC-BF4B30F206FF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton2_Click()
Unload Me
End Sub

Private Sub pbOk_Click()
On Error Resume Next
If Worksheets("Quote").Range("Lock") = txtPass.Text Then
unlockFields
Sheets("Quote").Shapes("btnLock").TextEffect.Text = "Lock Data"
Unload frmPasswordUnlock
Else
Response = MsgBox("Confirmation Password is incorrect", vbInformation, "BSMPAL")
End If
End Sub


INQUEST-PP=macro
