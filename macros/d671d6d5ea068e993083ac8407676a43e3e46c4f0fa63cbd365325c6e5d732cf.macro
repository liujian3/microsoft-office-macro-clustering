Attribute VB_Name = "ConvertXML"

' GenerateXMLDOM
' @brief Generate an MS XML Object (without any format tags) based on the data inside selected region on the excel sheet
'
' @parameters rngData : The selected region on excel sheet, with the first row as field name, and data rows below
'                       For the field name, use the node delimiter "/" to build the hierarchy of data
'                       e.g. /data/field1 is equvalent to <data><field1>....</field1><data>
'
'             rootNodeName : The xml document root node tag name
'
' @return an MS XML Object
'
' @author  Raymond Pang
' @version 0.8

Function GenerateXMLDOM(rngData As Range, rootNodeName As String)

    Const NODE_DELIMITER As String = "/"   ' the default node delimiter
    
    Dim intColCount As Integer
    Dim intRowCount As Integer
    Dim intColCounter As Integer
    Dim intRowCounter As Integer
    
       
    Dim rngCell As Range
  
    ' Create the XML DOM object
    Set ObjXMLDoc = CreateObject("Microsoft.XMLDOM")
    ObjXMLDoc.async = False
                   
    
    ' NODE_PROCESSING_INSTRUCTION(7) --- reference http://www.devguru.com/Technologies/xmldom/quickref/obj_node.html
    Set Heading = ObjXMLDoc.createNode(7, "xml", "")
    ObjXMLDoc.appendChild (Heading)
    
    ' Set the root node
    Set top_node = ObjXMLDoc.createNode(1, rootNodeName, "")
    ObjXMLDoc.appendChild (top_node)

    
        
    Dim Nodes() As String       'Array storing the current splited node names
    Dim NodeStack() As String   'Array storing the last node names
    
    Dim new_nodes()
    ReDim NodeStack(0)
    ReDim new_nodes(0)
        
    
     With rngData  ' The selected region on the Excel Sheet passed in
        
        '   Discover dimensions of the data we  will be dealing with...
        intColCount = .Columns.Count
        intRowCount = .Rows.Count
        
        Dim strColNames() As String     ' The Array of column names
        ReDim strColNames(intColCount)
        
        
        ' First Row is the Field/Tag names
        ' Extract all the field names into array "strColNames"
        If intRowCount >= 1 Then
            '   Loop accross columns... and put names in array
            For intColCounter = 1 To intColCount

                '   Mark the cell under current scrutiny by setting
                '   an object variable...
                Set rngCell = .Cells(1, intColCounter)
                
                '  not support merged cells .. so quit
                If Not rngCell.MergeArea.Address = _
                                            rngCell.Address Then
                      MsgBox ("!! Cell Merged ... Invalid format")
                      Exit Function
                End If
                
                strColNames(intColCounter) = rngCell.Text
                                 
            Next
        End If
        
        '   Loop down the table's rows
        For intRowCounter = 2 To intRowCount
           
            ReDim new_nodes(0)
            ReDim NodeStack(0)
            '   Loop accross columns...
            For intColCounter = 1 To intColCount
                
                '   Mark the cell under current scrutiny by setting
                '   an object variable...
                Set rngCell = .Cells(intRowCounter, intColCounter)
                
                
                '   Is the cell merged?..
                If Not rngCell.MergeArea.Address = _
                                            rngCell.Address Then
                
                      MsgBox ("!! Cell Merged ... Invalid format")
                      Exit Function
                      
                                       
                End If
                          
                ' divide the field name by the delimiter to get appropriate node names
                Nodes = Split(strColNames(intColCounter), NODE_DELIMITER)
                    
                If UBound(Nodes) = 0 Then
                  ReDim Nodes(1)
                  Nodes(1) = strColNames(intColCounter)
                End If
                
                 ' don't count it when no content
                 If Trim(rngCell.Text) <> "" Then
                                    
                    Dim i As Integer
                    MatchAll = True
                    For i = 1 To UBound(Nodes)

                        If i <= UBound(NodeStack) Then
                            
                            If Trim(Nodes(i)) <> Trim(NodeStack(i)) Then
                                'not match
                                MatchAll = False
                                Exit For
                            
                            End If
                        Else
                          MatchAll = False
                          Exit For
                        End If
                       
                                                                          
                      Next
                      
                      ' match all means in same level as previous, so it needs to output for the last node
                      If MatchAll Then
                          i = i - 1
                      End If
                      
                          
                      If UBound(new_nodes) < UBound(Nodes) Then
                             ' enlong the array
                             ReDim Preserve new_nodes(UBound(Nodes))
                              
                              
                      End If
                          
                      For t = i To UBound(Nodes)
                          ' create uncommon nodes with the previous one
                          Set new_nodes(t) = ObjXMLDoc.createNode(1, Nodes(t), "")
                                                       
                      Next
                      
                      
                      For t = i - 1 To UBound(Nodes) - 1
                      
                          If t >= 1 Then
                              ' connect the nodes based on the hierarchy
                              new_nodes(t).appendChild (new_nodes(t + 1))
                          End If
                      
                      Next
                      Set Textcont = ObjXMLDoc.createTextNode(Trim(rngCell.Text))
                      new_nodes(UBound(Nodes)).appendChild (Textcont)
                       
                      If i = 1 Then
                          top_node.appendChild (new_nodes(1))
                      End If
                  
                  
                      NodeStack = Nodes
                         
                         
                                      
                  End If
               
            Next ' finished a column
        Next
    End With
    

    '   Return the XMLDOM
     Set GenerateXMLDOM = ObjXMLDoc
     
End Function



' fGenerateXML
' @brief: Generate a 'clean' XML (ie. no unwanted formatting tags)
'         from an Excel range.
'
' @parameters rngData : The selected region on excel sheet, with the first row as field name, and data rows below
'                       For the field name, apart from normal
'             rootNodeName : The xml document root node tag name
'
' @return String with the content of XML preparing to write out to file
'
' @author  Raymond Pang
' @version 0.8

Function fGenerateXML(rngData As Range, rootNodeName As String, filenameinput As String) As String

'===============================================================
'   XML Tags
    '   Table
    
    Const HEADER                As String = "<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>"
    Dim TAG_BEGIN  As String
    Dim TAG_END  As String
    Const NODE_DELIMITER        As String = "/"
    
        
'===============================================================

    Dim intColCount As Integer
    Dim intRowCount As Integer
    Dim intColCounter As Integer
    Dim intRowCounter As Integer
    
   
    Dim rngCell As Range
 
    
    Dim strXML As String
    
       
    
    '   Initial table tag...
    
    
   TAG_BEGIN = vbCrLf & "<" & rootNodeName & ">"
   TAG_END = vbCrLf & "</" & rootNodeName & ">"
   
    With rngData
        
        '   Discover dimensions of the data we
        '   will be dealing with...
        intColCount = .Columns.Count
        
        intRowCount = .Rows.Count
        
        Dim strColNames() As String
        Dim strFileNames() As String
        Dim strLabelNames() As String
        
        ReDim strColNames(intColCount)
        ReDim strFileNames(intColCount)
        ReDim strLabelNames(intRowCount)
        
        
        ' First Row is the Field/Tag names
        If intRowCount >= 3 Then
        
            '   Loop accross columns...
            For intColCounter = 1 To intColCount
                
                '   Mark the cell under current scrutiny by setting
                '   an object variable...
                Set rngCell = .Cells(2, intColCounter)
                
              
                
                '   Is the cell merged?..
                If Not rngCell.MergeArea.Address = _
                                            rngCell.Address Then
               
                      MsgBox ("!! Cell Merged ... Invalid format")
                      Exit Function
                      
                                       
                End If
            

                
            Next
            
            strColNames(1) = "index"
            strColNames(2) = "value"
            
           For intColCounter = 2 To intColCount
                
                '   Mark the cell under current scrutiny by setting
                '   an object variable...
                Set rngCell = .Cells(1, intColCounter)
                
              
                
                '   Is the cell merged?..
                If Not rngCell.MergeArea.Address = _
                                            rngCell.Address Then
               
                      MsgBox ("!! Cell Merged ... Invalid format")
                      Exit Function
                      
                                       
                End If
            
                 strFileNames(intColCounter - 1) = filenameinput & rngCell.Text & ".xml"
                

        
        
            Dim Nodes() As String
            Dim NodeStack() As String
          
            strXML = HEADER
            strXML = strXML & TAG_BEGIN
          
            '   Loop down the table's rows
            
            For intRowCounter = 3 To intRowCount
                Set rngCell = .Cells(intRowCounter, 1)
                strLabelNames(intRowCounter) = Trim(rngCell.Text)
            Next
            
            For intRowCounter = 3 To intRowCount
               
                
                strXML = strXML & vbCrLf & TABLE_ROW
                strXML = strXML & vbTab & "<string "
                ReDim NodeStack(0)
                '   Loop accross columns...
    
                    
                 '   Mark the cell under current scrutiny by setting
                 '   an object variable...
                 Set rngCell = .Cells(intRowCounter, intColCounter)
                 
                                
                 '   Is the cell merged?..
                 If Not rngCell.MergeArea.Address = _
                                             rngCell.Address Then
                 
                       MsgBox ("!! Cell Merged ... Invalid format")
                       Exit Function
                       
                 End If
                
        
                 ' add close tags to those not used afterwards
                 If UBound(NodeStack) <> 0 Then
                     For t = UBound(NodeStack) To 1 Step -1
                     
                      strXML = strXML & "</" & Trim(NodeStack(t)) & ">" & vbCrLf
                         
                     Next
                 End If
                 ReDim NodeStack(0)
        
                   ' skip if no content
                 If Trim(rngCell.Text) <> "" Then
                    strXML = strXML & Trim(strColNames(1)) & "=""" & strLabelNames(intRowCounter) & """ "
                     strXML = strXML & Trim(strColNames(2)) & "=""" & Trim(rngCell.Text) & """ "
                 End If
                    
                strXML = strXML & "/>"
            Next
            
            strXML = strXML & TAG_END
        
             '   Return the HTML string...
             fGenerateXML = strXML
             
            sWriteFile strXML, strFileNames(intColCounter - 1)
            MsgBox ("Completed. XML Written to " & strFileNames(intColCounter - 1))
        Next
   
    End If
    
    End With
    
    
End Function



' Function for writing plain string out a file

Sub sWriteFile(strXML As String, strFullFileName As String)

'     Dim intFileNum As String
    
'     intFileNum = FreeFile
'     Open strFullFileName For Output As #intFileNum
'     Print #intFileNum, strXML
'     Close #intFileNum

Dim fsT As Object
Set fsT = CreateObject("ADODB.Stream")
fsT.Type = 2 'Specify stream type - we want To save text/string data.
fsT.Charset = "utf-8" 'Specify charset For the source text data.
fsT.Open 'Open the stream And write binary data To the object
fsT.WriteText strXML
fsT.SaveToFile strFullFileName, 2 'Save binary data To disk
    
    
End Sub

' To automatically select the "REAL"/non empty continuous regions (rows and columns)

Sub FindUsedRange()
    Dim LastRow As Long
    Dim FirstRow As Long
    Dim LastCol As Integer
    Dim FirstCol As Integer

    ' Find the FIRST real row
    FirstRow = ActiveSheet.Cells.Find(What:="*", _
      SearchDirection:=xlNext, _
      SearchOrder:=xlByRows).Row
      
    ' Find the FIRST real column
    FirstCol = ActiveSheet.Cells.Find(What:="*", _
      SearchDirection:=xlNext, _
      SearchOrder:=xlByColumns).Column
    
    ' Find the LAST real row
    LastRow = ActiveSheet.Cells.Find(What:="*", _
      SearchDirection:=xlPrevious, _
      SearchOrder:=xlByRows).Row

    ' Find the LAST real column
    LastCol = ActiveSheet.Cells.Find(What:="*", _
      SearchDirection:=xlPrevious, _
      SearchOrder:=xlByColumns).Column
        
'Select the ACTUAL Used Range as identified by the
'variables identified above
    'MsgBox (FirstRow & "," & LastRow & "," & FirstCol & "," & LastCol)
    Dim topCel As Range
    Dim bottomCel As Range
   
    Set topCel = Cells(FirstRow, FirstCol)
    Set bottomCel = Cells(LastRow, LastCol)
    
   ActiveSheet.Range(topCel, bottomCel).Select
End Sub


Attribute VB_Name = "FileBrowser"
Option Explicit

Type thOPENFILENAME
    lStructSize As Long
    hwndOwner As Long
    hInstance As Long
    strFilter As String
    strCustomFilter As String
    nMaxCustFilter As String
    nFilterIndex As Long
    strFile As String
    nMaxFile As Long
    strFileTitle As String
    nMaxFileTitle As Long
    strInitialDir As String
    strTitle As String
    Flags As Long
    nFileOffset As Integer
    nFileExtension As Integer
    strDefExt As String
    lCustData As Long
    lpfnHook As Long
    lpTemplateName As String
End Type

Declare PtrSafe Function th_apiGetOpenFileName Lib "comdlg32.dll" Alias "GetOpenFileNameA" (OFN As thOPENFILENAME) As Boolean
Declare PtrSafe Function th_apiGetSaveFileName Lib "comdlg32.dll" Alias "GetSaveFileNameA" (OFN As thOPENFILENAME) As Boolean
Declare PtrSafe Function CommDlgExtendetError Lib "commdlg32.dll" () As Long

Private Const thOFN_READONLY = &H1
Private Const thOFN_OVERWRITEPROMPT = &H2
Private Const thOFN_HIDEREADONLY = &H4
Private Const thOFN_NOCHANGEDIR = &H8
Private Const thOFN_SHOWHELP = &H10
Private Const thOFN_NOVALIDATE = &H100
Private Const thOFN_ALLOWMULTISELECT = &H200
Private Const thOFN_EXTENSIONDIFFERENT = &H400
Private Const thOFN_PATHMUSTEXIST = &H800
Private Const thOFN_FILEMUSTEXIST = &H1000
Private Const thOFN_CREATEPROMPT = &H2000
Private Const thOFN_SHAREWARE = &H4000
Private Const thOFN_NOREADONLYRETURN = &H8000
Private Const thOFN_NOTESTFILECREATE = &H10000
Private Const thOFN_NONETWORKBUTTON = &H20000
Private Const thOFN_NOLONGGAMES = &H40000
Private Const thOFN_EXPLORER = &H80000
Private Const thOFN_NODEREFERENCELINKS = &H100000
Private Const thOFN_LONGNAMES = &H200000

Function StartIt()
    Dim strFilter As String
    Dim lngFlags As Long
    strFilter = thAddFilterItem(strFilter, "Excel Files (*.xls)", "*.XLS")
    strFilter = thAddFilterItem(strFilter, "Text Files(*.txt)", "*.TXT")
    strFilter = thAddFilterItem(strFilter, "All Files (*.*)", "*.*")
    Startform.filenameinput.Value = thCommonFileOpenSave(InitialDir:="x:\Anlagen_PG80", Filter:=strFilter, FilterIndex:=3, Flags:=lngFlags, DialogTitle:="File Browser")
    Debug.Print Hex(lngFlags)
End Function

Function GetOpenFile(Optional varDirectory As Variant, Optional varTitleForDialog As Variant) As Variant
    Dim strFilter As String
    Dim lngFlags As Long
    Dim varFileName As Variant
    lngFlags = thOFN_FILEMUSTEXIST Or thOFN_HIDEREADONLY Or thOFN_NOCHANGEDIR
    
    If IsMissing(varDirectory) Then
        varDirectory = ""
    End If
    
    If IsMissing(varTitleForDialog) Then
        varTitleForDialog = ""
    End If
    
    strFilter = thAddFilterItem(strFilter, "Excel (*.xls)", "*.XLS")
    varFileName = thCommonFileOpenSave(OpenFile:=True, InitialDir:=varDirectory, Filter:=strFilter, Flags:=lngFlags, DialogTitle:=varTitleForDialog)
    
    If Not IsNull(varFileName) Then
        varFileName = TrimNull(varFileName)
    End If
    
    GetOpenFile = varFileName
    
End Function

Function thCommonFileOpenSave(Optional ByRef Flags As Variant, Optional ByVal InitialDir As Variant, Optional ByVal Filter As Variant, _
                               Optional ByVal FilterIndex As Variant, Optional ByVal DefaultEx As Variant, Optional ByVal fileName As Variant, _
                               Optional ByVal DialogTitle As Variant, Optional ByVal hwnd As Variant, Optional ByVal OpenFile As Variant) As Variant
                               
    Dim OFN As thOPENFILENAME
    Dim strFileName As String
    Dim FileTitle As String
    Dim fResult As Boolean
            
    If IsMissing(InitialDir) Then InitialDir = CurDir
    If IsMissing(Filter) Then Filter = ""
    If IsMissing(FilterIndex) Then FilterIndex = 1
    If IsMissing(Flags) Then Flags = 0&
    If IsMissing(DefaultEx) Then DefaultEx = ""
    If IsMissing(fileName) Then fileName = ""
    If IsMissing(DialogTitle) Then DialogTitle = ""
    If IsMissing(hwnd) Then hwnd = 0
    If IsMissing(OpenFile) Then OpenFile = True
    
    strFileName = Left(fileName & String(256, 0), 256)
    FileTitle = String(256, 0)
    
    With OFN
        .lStructSize = Len(OFN)
        .hwndOwner = hwnd
        .strFilter = Filter
        .nFilterIndex = FilterIndex
        .strFile = strFileName
        .nMaxFile = Len(strFileName)
        .strFileTitle = FileTitle
        .nMaxFileTitle = Len(FileTitle)
        .strTitle = DialogTitle
        .Flags = Flags
        .strDefExt = DefaultEx
        .strInitialDir = InitialDir
        .hInstance = 0
        .lpfnHook = 0
        .strCustomFilter = String(255, 0)
        .nMaxCustFilter = 255
    End With
        
    If OpenFile Then fResult = th_apiGetOpenFileName(OFN) Else fResult = th_apiGetSaveFileName(OFN)
    
        
    If fResult Then
        If Not IsMissing(Flags) Then Flags = OFN.Flags
        thCommonFileOpenSave = TrimNull(OFN.strFile)
        Else
        thCommonFileOpenSave = vbNullString
    End If
        
End Function

Function thAddFilterItem(strFilter As String, strDescription As String, Optional varItem As Variant) As String

    If IsMissing(varItem) Then varItem = "*.*"
    thAddFilterItem = strFilter & strDescription & vbNullChar & varItem & vbNullChar
    
End Function

Private Function TrimNull(ByVal strItem As String) As String
    Dim intPos As Integer
    intPos = InStr(strItem, vbNullChar)
    If intPos > 0 Then
        TrimNull = Left(strItem, intPos - 1)
        Else
        TrimNull = strItem
    End If
        
End Function
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ExportButton, 1, 0, MSForms, CommandButton"



Private Sub ExportButton_Click()
    Startform.Show
    
End Sub

Attribute VB_Name = "Startform"
Attribute VB_Base = "0{53586302-BC77-4BB9-918E-9B0036664743}{413953B3-2421-48CC-AC2F-E14830D6C46D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub cmdmainaction_Click()

End Sub

Private Sub cmdBrowseButton_Click()
    Call StartIt
End Sub

Private Sub CmdProcessXML_Click()
  Dim strXML As String
    If Application.Count(Selection) = 0 Then
        FindUsedRange
    End If
        
    strXML = fGenerateXML(Selection, "root", filenameinput)
   ' sWriteFile strXML, ThisWorkbook.Path & filenameinput
   ' sWriteFile strXML, filenameinput
   ' MsgBox ("Completed. XML Written to " & filenameinput)
    Startform.Hide
End Sub

Private Sub CmdProcessXMLOBJ_Click()


    Dim strXML As String
    If Application.Count(Selection) = 0 Then
        FindUsedRange
    End If
    
    Set ObjXMLDoc = GenerateXMLDOM(Selection, "root")
    
    ObjXMLDoc.Save (filenameinput)
    
    MsgBox ("Completed. XML Written to " & filenameinput)
    Startform.Hide

    

End Sub

Private Sub UserForm_Initialize()
    filenameinput.Text = ThisWorkbook.Path & "\"
     
End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True




INQUEST-PP=macro
