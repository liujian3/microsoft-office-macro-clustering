Attribute VB_Name = "Allgemein"
Public mBL As Integer               'Betrieb:    1=bitte ausw|fffd|hlen, 2=Land, 3=Bund
Public mZustand As Integer          'Zustand:    1=Ausf|fffd|llmodus, 2=fertig ausgef|fffd|llt

Public m_ShowHiddenText As Boolean
Public m_ShowAll As Boolean
Public m_PrintHiddenText As Boolean
Public m_MarkupMode As Integer      '1=alle |fffd|berarbeitungen inline  2=nur teilweise in Sprechblasen  3 = alle in Sprechblasen
Public m_TableGridlines As Boolean
Public m_DocumentMap As Boolean     'Anzeige Navigationsbereich
Public m_HyperlinkOpen As Boolean   'Aufruf Hyperlink (mit/ohne Strg)

Public aktuell As Boolean
Public Druck_alt As Boolean

Sub setStartupValues(Optional bProtect As Boolean = True) 'Makro startet beim |fffd|ffnen der Datenliste (siehe Objekt "ThisDocument")

   'Pr|fffd|fen und "merken" vorhandener Word-Einstellungen ----------------------------------------------------------------------
   'Beim Schlie|fffd|en des Dokuments werden die urspr|fffd|nglichen Einstellungen durch das "AutoClose" Makro wieder gesetzt
    
    m_ShowHiddenText = ActiveDocument.ActiveWindow.View.ShowHiddenText           'Verstecken des "ausgeblendeten Textes" (wegen Word 2003 erforderlich)
    m_ShowAll = ActiveDocument.ActiveWindow.View.ShowAll                         'Ausblenden von "ausgeblendetem Text" + "allen Formatierungszeichen"
    m_PrintHiddenText = Options.PrintHiddenText                                  'Ausgeblendeter Text wird nicht gedruckt (= gesonderte Einstellung in Word)
    m_TableGridlines = ActiveDocument.ActiveWindow.View.TableGridlines           'Ausblenden der Tabellen-Rasterlinien
    m_DocumentMap = ActiveDocument.ActiveWindow.DocumentMap                      'Anzeige Navigationsbereich
    m_HyperlinkOpen = Options.CtrlClickHyperlinkToOpen                           'Aufruf Hyperlink (mit/ohne Strg)
              
    If ActiveDocument.ActiveWindow.View.MarkupMode = wdInLineRevisions Then      'Alle |fffd|berarbeitungen inline anzeigen
       m_MarkupMode = 1
    ElseIf ActiveDocument.ActiveWindow.View.MarkupMode = wdMixedRevisions Then   'nur Kommentare und Formatierungen in Sprechblasen anzeigen
       m_MarkupMode = 2
    ElseIf ActiveDocument.ActiveWindow.View.MarkupMode = wdBalloonRevisions Then '|fffd|berarbeitungen in Sprechblasen anzeigen
       m_MarkupMode = 3
    End If
    
    '-------------------------------------------------------------------------------------------------------------------------------

    Call protectFile(False)                                            'Ausf|fffd|hren der Function "protectFile" und |fffd|bergabe des Wertes "False" (wegen Word 2003 erforderlich)

    ActiveDocument.Bookmarks("Hinweis_Makro").Range.Font.Hidden = True 'Ausblenden des Hinweises "Bitte Makros aktivieren"

    ActiveDocument.ActiveWindow.View.ShowHiddenText = False            'Das zus|fffd|tzliche Verstecken des "ausgeblendeten Textes" ist wegen Word 2003 notwendig
    ActiveDocument.ActiveWindow.View.ShowAll = False                   'Ausblenden von "ausgeblendetem Text" + "allen Formatierungszeichen"
    Options.PrintHiddenText = False                                    'Ausgeblendeter Text wird nicht gedruckt (= gesonderte Einstellung in Word)
    ActiveDocument.ActiveWindow.View.MarkupMode = wdInLineRevisions    'Alle |fffd|berarbeitungen inline anzeigen (z.B. Kommentare)
    ActiveDocument.ActiveWindow.View.TableGridlines = False            'Ausblenden der Tabellen-Rasterlinien
    ActiveDocument.ActiveWindow.DocumentMap = True                     'Anzeige Navigationsbereich
    Options.CtrlClickHyperlinkToOpen = False                           'Aufruf Hyperlink (ohne Strg)
              
    'Einblenden der vor dem Ausdruck ausgeblendeten Textmarken
    ActiveDocument.Bookmarks("Betrieb").Range.Font.Hidden = False      'Zeile: Betrieb
    Call fcLandBund(False)
    
    'Lesen des Wertes vom jeweiligen Feld und Zuordnung zur Variablen (notwendig, um Makros nur bei |fffd|nderung in den Feldinhalten ablaufen zu lassen)
    'mBL siehe Makro "checkBetrieb"
    '--- bisher kein Eintrag ---
    
       
    Call Produktneutral(False)      'notwendig, um beim |fffd|ffnen ausgeblendete Textmarken tats|fffd|chlich nicht anzuzeigen (Problem von Word)
    Call STLB_Bau(False)            'wie vor
    Call Instandhaltung(False)       'wie vor
       
    ActiveDocument.Bookmarks("Beginn_Dummy").Select
                     
    If bProtect = True Then Call protectFile(True)                  'Wird zu "bProtect" der Wert "True" |fffd|bergeben, dann Ausf|fffd|hren der Function "protectFile" und |fffd|bergabe des Wertes "True" (wegen Word 2003 erforderlich)

End Sub

Sub LandBund()

    If ActiveDocument.FormFields("Betrieb_DD").DropDown.Value = mBL Then   'wenn Wert des Feldes = identisch mit Variablen, dann nichts machen
        ActiveDocument.Bookmarks("Beginn_Dummy").Select
        Exit Sub
    Else
        mBL = ActiveDocument.FormFields("Betrieb_DD").DropDown.Value       'wenn Werte nicht identisch, dann neuen Wert der Variablen zuordnen und Function "LandBund" ausf|fffd|hren
        
        If Geduld.Visible = False Then  'Formular "Geduld" nicht sichtbar
           Geduld.Show (0)              'Anzeige des Formulars "Geduld"
            DoEvents                    'notwendig, um Inhalt des Formulars anzuzeigen
        End If
        
        Call fcLandBund                 'Ausf|fffd|hrung der Function "fcLandBund"
        
        Geduld.hide                     'Ausblenden des Formulars "Geduld"
        
    End If
        
End Sub

Function fcLandBund(Optional bProtect As Boolean = True)

    Call protectFile(False)
    
    If mBL = 2 Then 'Land
    
        'Dropdown "TGA-Gewerk"
         ActiveDocument.Bookmarks("TGA").Range.Font.Hidden = False
    
        'Wahl- und Bedarfsposition Bund
         ActiveDocument.Bookmarks("LB_WuB_Bund").Range.Font.Hidden = True
         ActiveDocument.FormFields("LB_WuB_Bund_CB").CheckBox.Value = False
        
        'Bedarfsposition Land
         ActiveDocument.Bookmarks("LB_B_Land").Range.Font.Hidden = False             '|fffd|berschrift "Bedarfspositionen"
         ActiveDocument.Bookmarks("LB_B_Land_keine").Range.Font.Hidden = False       'keine Bedarfspositionen
         ActiveDocument.Bookmarks("LB_B_Land_ja").Range.Font.Hidden = False          'Bedarfspositionen vorhanden
         Call Bedarfsposition(False)
            
        'Wahlposition Land
         ActiveDocument.Bookmarks("LB_W_Land").Range.Font.Hidden = False             '|fffd|berschrift "Wahlpositionen"
         ActiveDocument.Bookmarks("LB_W_Land_keine").Range.Font.Hidden = False       'keine Wahlposition
         ActiveDocument.Bookmarks("LB_W_Land_ja").Range.Font.Hidden = False          'Wahlposition vorhanden
         Call Wahlposition(False)
                      
    Else   'Bund + "bitte ausw|fffd|hlen..."
             
        'Dropdown "TGA-Gewerk"
         ActiveDocument.Bookmarks("TGA").Range.Font.Hidden = True
         ActiveDocument.FormFields("TGA_DD").DropDown.Value = 1
         Call fcTGA_Gewerk(False)
         
        'Wahl- und Bedarfsposition Bund
         ActiveDocument.Bookmarks("LB_WuB_Bund").Range.Font.Hidden = False
        
        'Bedarfsposition Land
         ActiveDocument.Bookmarks("LB_B_Land").Range.Font.Hidden = True              '|fffd|berschrift "Bedarfspositionen"
         ActiveDocument.Bookmarks("LB_B_Land_keine").Range.Font.Hidden = True        'keine Bedarfspositionen
         ActiveDocument.Bookmarks("LB_B_Land_ja").Range.Font.Hidden = True           'Bedarfspositionen vorhanden
         ActiveDocument.LB_B_Land_RB1.Value = False
         ActiveDocument.LB_B_Land_RB2.Value = False
         Call Bedarfsposition(False)
    
        'Wahlposition Land
         ActiveDocument.Bookmarks("LB_W_Land").Range.Font.Hidden = True              '|fffd|berschrift "Wahlpositionen"
         ActiveDocument.Bookmarks("LB_W_Land_keine").Range.Font.Hidden = True        'keine Wahlposition
         ActiveDocument.Bookmarks("LB_W_Land_ja").Range.Font.Hidden = True           'Wahlposition vorhanden
         ActiveDocument.LB_W_Land_RB1.Value = False
         ActiveDocument.LB_W_Land_RB2.Value = False
         Call Wahlposition(False)
              
    End If
    
    ActiveDocument.Bookmarks("Beginn_Dummy").Select
    
    If bProtect = True Then Call protectFile(True)

End Function

Sub TGA_Gewerk()
    Call fcTGA_Gewerk
End Sub

Function fcTGA_Gewerk(Optional bProtect As Boolean = True)

    Call protectFile(False)
    
    If ActiveDocument.FormFields("TGA_DD").DropDown.Value = 3 Then         '= TGA-Gewerk
       ActiveDocument.Bookmarks("LB_TGA_gesamt").Range.Font.Hidden = False
    Else
       ActiveDocument.Bookmarks("LB_TGA_gesamt").Range.Font.Hidden = True
       ActiveDocument.FormFields("LB_TGA_CB").CheckBox.Value = False
    End If

    ActiveDocument.Bookmarks("Beginn_Dummy").Select

    If bProtect = True Then Call protectFile(True)
    
End Function

Function Zustand(Optional bProtect As Boolean = True)

    Call protectFile(False)

    Select Case mZustand
    
    Case 1   '"Ausf|fffd|llmodus"
             'alle evtl. ausgeblendeten Textmarken werden eingeblendet
             
             'Vergabestelle
              If ActiveDocument.FormFields("VSt01").Result = "" And ActiveDocument.FormFields("VSt02").Result = "" Then
                 ActiveDocument.Bookmarks("TM_VSt01").Range.Font.Hidden = False
                 ActiveDocument.Bookmarks("TM_VSt02").Range.Font.Hidden = False
              End If
             
             'Produktneutralit|fffd|t
              ActiveDocument.Bookmarks("LB_PN_1").Range.Font.Hidden = False
              ActiveDocument.Bookmarks("LB_PN_2").Range.Font.Hidden = False
              Call Produktneutral(False)
              
             'Standardleistungsbuch-Bau
              ActiveDocument.Bookmarks("LB_STLB_1").Range.Font.Hidden = False
              ActiveDocument.Bookmarks("LB_STLB_2").Range.Font.Hidden = False
              ActiveDocument.Bookmarks("LB_STLB_3").Range.Font.Hidden = False
      
             'Wahl- und Bedarfspositionen
              If mBL = 2 Then
                 'Bedarfspositionen
                  ActiveDocument.Bookmarks("LB_B_Land_keine").Range.Font.Hidden = False
                  ActiveDocument.Bookmarks("LB_B_Land_ja").Range.Font.Hidden = False
                 'Wahlpositionen
                  ActiveDocument.Bookmarks("LB_W_Land_keine").Range.Font.Hidden = False
                  ActiveDocument.Bookmarks("LB_W_Land_ja").Range.Font.Hidden = False
              End If
             
             'Stundenlohnpositionen
              ActiveDocument.Bookmarks("LB_StdLohn_1").Range.Font.Hidden = False
              ActiveDocument.Bookmarks("LB_StdLohn_2").Range.Font.Hidden = False
             
             'Instandhaltung
              ActiveDocument.Bookmarks("LB_Inst_1").Range.Font.Hidden = False
              ActiveDocument.Bookmarks("LB_Inst_2").Range.Font.Hidden = False
      
             'Pl|fffd|ne zur Leistungsbeschreibung
              ActiveDocument.Bookmarks("LB_Plaene_keine").Range.Font.Hidden = False
              ActiveDocument.Bookmarks("LB_Plaene_ja").Range.Font.Hidden = False
      
      
    Case 2  '"fertig ausgef|fffd|llt"
            'alles was nicht gilt wird ausblenden
              
              
            'Dim x As Long   'Timer verhindert ein Absturz von Word unter Word 2013 (nach der Vollst|fffd|ndigkeitspr|fffd|fung beim Druck, vor dem Ausblenden nicht ben|fffd|tigter Angaben st|fffd|rzte Word ab. Timer verhinderte Absturz.)
            'x = Timer()
          
            'Do While x + 1 > Timer()
            'DoEvents
            'Loop

             'Vergabestelle
              If Not ActiveDocument.FormFields("VSt01").Result = "" And ActiveDocument.FormFields("VSt02").Result = "" Then
                 ActiveDocument.Bookmarks("TM_VSt02").Range.Font.Hidden = True
              ElseIf Not ActiveDocument.FormFields("VSt02").Result = "" And ActiveDocument.FormFields("VSt01").Result = "" Then
                 ActiveDocument.Bookmarks("TM_VSt01").Range.Font.Hidden = True
              End If
              
             'Produktneutralit|fffd|t
              If ActiveDocument.LB_PN_RB1.Value = False Then
                 ActiveDocument.Bookmarks("LB_PN_1").Range.Font.Hidden = True
              End If
              If ActiveDocument.LB_PN_RB2.Value = False Then
                 ActiveDocument.Bookmarks("LB_PN_2").Range.Font.Hidden = True
              End If
            
              If ActiveDocument.LB_PN_RB2.Value = True Then
                'Leitfabrikat
                 If ActiveDocument.FormFields("LB_PN_2_LF_CB").CheckBox.Value = False Then
                    ActiveDocument.Bookmarks("LB_PN_2_LF").Range.Font.Hidden = True
                 End If
                'Festes Fabrikat
                 If ActiveDocument.FormFields("LB_PN_2_FF_CB").CheckBox.Value = False Then
                    ActiveDocument.Bookmarks("LB_PN_2_FF").Range.Font.Hidden = True
                 End If
              End If
               
             'Standardleistungsbuch-Bau
              If ActiveDocument.LB_STLB_RB1.Value = False Then
                 ActiveDocument.Bookmarks("LB_STLB_1").Range.Font.Hidden = True
              End If
              If ActiveDocument.LB_STLB_RB2.Value = False Then
                 ActiveDocument.Bookmarks("LB_STLB_2").Range.Font.Hidden = True
              End If
              If ActiveDocument.LB_STLB_RB3.Value = False Then
                 ActiveDocument.Bookmarks("LB_STLB_3").Range.Font.Hidden = True
              End If
                              
             'Wahl- und Bedarfspositionen
              If mBL = 2 Then
                 'Bedarfspositionen
                  If ActiveDocument.LB_B_Land_RB1.Value = False Then
                     ActiveDocument.Bookmarks("LB_B_Land_keine").Range.Font.Hidden = True
                  End If
                  If ActiveDocument.LB_B_Land_RB2.Value = False Then
                     ActiveDocument.Bookmarks("LB_B_Land_ja").Range.Font.Hidden = True
                  End If
               
                 'Wahlpositionen
                  If ActiveDocument.LB_W_Land_RB1.Value = False Then
                     ActiveDocument.Bookmarks("LB_W_Land_keine").Range.Font.Hidden = True
                  End If
                  If ActiveDocument.LB_W_Land_RB2.Value = False Then
                     ActiveDocument.Bookmarks("LB_W_Land_ja").Range.Font.Hidden = True
                  End If
              End If
               
             'Stundenlohnpositionen
              If ActiveDocument.LB_StdLohn_RB1.Value = False Then
                 ActiveDocument.Bookmarks("LB_StdLohn_1").Range.Font.Hidden = True
              End If
              If ActiveDocument.LB_StdLohn_RB2.Value = False Then
                 ActiveDocument.Bookmarks("LB_StdLohn_2").Range.Font.Hidden = True
              End If
               
             'Instandhaltung
              If ActiveDocument.LB_Inst_RB1.Value = False Then
                 ActiveDocument.Bookmarks("LB_Inst_1").Range.Font.Hidden = True
              End If
              If ActiveDocument.LB_Inst_RB2.Value = False Then
                 ActiveDocument.Bookmarks("LB_Inst_2").Range.Font.Hidden = True
              End If
               
             'Pl|fffd|ne zur Leistungsbeschreibung
              If ActiveDocument.LB_Plaene_RB1.Value = False Then
                 ActiveDocument.Bookmarks("LB_Plaene_keine").Range.Font.Hidden = True
              End If
              If ActiveDocument.LB_Plaene_RB2.Value = False Then
                 ActiveDocument.Bookmarks("LB_Plaene_ja").Range.Font.Hidden = True
              End If
               
    End Select
    
    ActiveDocument.Bookmarks("Beginn_Dummy").Select    'Textmarke (Textfeld) markieren

    If bProtect = True Then Call protectFile(True)    'Wird zu "bProtect" der Wert "True" |fffd|bergeben, dann Ausf|fffd|hren der Function "protectFile" und |fffd|bergabe des Wertes "True" (wegen Word 2003 erforderlich)

End Function

Function Bedarfsposition(Optional bProtect As Boolean = True)

    Call protectFile(False)
       
       If ActiveDocument.LB_B_Land_RB2.Value = True Then
          ActiveDocument.Bookmarks("LB_B_Land_ja_Tab").Range.Font.Hidden = False     'Bedarfspositionen Tabelle
          ActiveDocument.Bookmarks("LB_B_Land_ja_Me").Range.Font.Hidden = False      'Bedarfspositionen Menge
          ActiveDocument.Bookmarks("LB_B_Land_ja_GB").Range.Font.Hidden = False      'Bedarfspositionen keine Gesamtbetr|fffd|ge
       Else
          ActiveDocument.Bookmarks("LB_B_Land_ja_Tab").Range.Font.Hidden = True
          ActiveDocument.Bookmarks("LB_B_Land_ja_Me").Range.Font.Hidden = True
          ActiveDocument.Bookmarks("LB_B_Land_ja_GB").Range.Font.Hidden = True
          ActiveDocument.FormFields("LB_B_Land_ja_Me_CB").CheckBox.Value = False
          ActiveDocument.FormFields("LB_B_Land_ja_GB_CB").CheckBox.Value = False
       End If
       
    If bProtect = True Then Call protectFile(True)

End Function


Function Wahlposition(Optional bProtect As Boolean = True)

    Call protectFile(False)
       
       If ActiveDocument.LB_W_Land_RB2.Value = True Then
          ActiveDocument.Bookmarks("LB_W_Land_ja_Tab").Range.Font.Hidden = False      'Wahlpositionen Tabelle
          ActiveDocument.Bookmarks("LB_W_Land_ja_Me").Range.Font.Hidden = False       'Wahlpositionen Menge
          ActiveDocument.Bookmarks("LB_W_Land_ja_Hw").Range.Font.Hidden = False       'Wahlpositionen Hinweis auf Kriterien
       Else
          ActiveDocument.Bookmarks("LB_W_Land_ja_Tab").Range.Font.Hidden = True       'Wahlpositionen Tabelle
          ActiveDocument.Bookmarks("LB_W_Land_ja_Me").Range.Font.Hidden = True        'Wahlpositionen Menge
          ActiveDocument.Bookmarks("LB_W_Land_ja_Hw").Range.Font.Hidden = True        'Wahlpositionen Hinweis auf Kriterien
          ActiveDocument.FormFields("LB_W_Land_ja_Me_CB").CheckBox.Value = False
          ActiveDocument.FormFields("LB_W_Land_ja_Hw_CB").CheckBox.Value = False
       End If
       
    If bProtect = True Then Call protectFile(True)

End Function

Function Produktneutral(Optional bProtect As Boolean = True)

    Call protectFile(False)
       
       If ActiveDocument.LB_PN_RB2.Value = True Then
          ActiveDocument.Bookmarks("LB_PN_2_LF").Range.Font.Hidden = False        'Leitfabrikatsvorgabe
          ActiveDocument.Bookmarks("LB_PN_2_FF").Range.Font.Hidden = False        'Feste Fabrikatsvorgabe
       
          Call fcLeitfabrikat(False)
          Call fcFestes_Fabrikat(False)
       
          ActiveDocument.Bookmarks("LB_PN_2_verdeckt").Range.Font.Hidden = False  'Verdeckte Fabrikatsvorgabe
             
       Else
          ActiveDocument.Bookmarks("LB_PN_2_LF").Range.Font.Hidden = True         'Leitfabrikatsvorgabe
          ActiveDocument.Bookmarks("LB_PN_2_FF").Range.Font.Hidden = True         'Feste Fabrikatsvorgabe
          ActiveDocument.FormFields("LB_PN_2_LF_CB").CheckBox.Value = False
          ActiveDocument.FormFields("LB_PN_2_FF_CB").CheckBox.Value = False
       
          Call fcLeitfabrikat(False)
          Call fcFestes_Fabrikat(False)
       
          ActiveDocument.Bookmarks("LB_PN_2_verdeckt").Range.Font.Hidden = True   'Verdeckte Fabrikatsvorgabe
          ActiveDocument.FormFields("LB_PN_2_verdeckt_CB").CheckBox.Value = False
       
       End If
       
    If bProtect = True Then Call protectFile(True)

End Function

Sub Leitfabrikat()
    Call fcLeitfabrikat
End Sub

Function fcLeitfabrikat(Optional bProtect As Boolean = True)

    Call protectFile(False)
    
    If ActiveDocument.FormFields("LB_PN_2_LF_CB").CheckBox.Value = True Then
       ActiveDocument.Bookmarks("LB_PN_2_LF_Tabelle").Range.Font.Hidden = False 'Tabelle Leitfabrikate
    
       ActiveDocument.Bookmarks("LB_PA_1").Range.Font.Hidden = True             'Produktabfragen: keine
       ActiveDocument.FormFields("LB_PA_1_CB").CheckBox.Value = False
       ActiveDocument.Bookmarks("LB_PA_2").Range.Font.Hidden = False            'Produktabfragen: nur Pos. mit Leitfabrikatsvorgabe
            
    Else
       ActiveDocument.Bookmarks("LB_PN_2_LF_Tabelle").Range.Font.Hidden = True  'Tabelle Leitfabrikate
    
       ActiveDocument.Bookmarks("LB_PA_1").Range.Font.Hidden = False            'Produktabfragen: keine
       ActiveDocument.Bookmarks("LB_PA_2").Range.Font.Hidden = True             'Produktabfragen: nur Pos. mit Leitfabrikatsvorgabe
       ActiveDocument.FormFields("LB_PA_2_CB").CheckBox.Value = False
    
    End If

    ActiveDocument.Bookmarks("Leitfabrikat_Dummy").Select

    If bProtect = True Then Call protectFile(True)
    
End Function

Sub Festes_Fabrikat()
    Call fcFestes_Fabrikat
End Sub

Function fcFestes_Fabrikat(Optional bProtect As Boolean = True)

    Call protectFile(False)
    
    If ActiveDocument.FormFields("LB_PN_2_FF_CB").CheckBox.Value = True Then
       ActiveDocument.Bookmarks("LB_PN_2_FF_Tabelle").Range.Font.Hidden = False 'Tabelle
    Else
       ActiveDocument.Bookmarks("LB_PN_2_FF_Tabelle").Range.Font.Hidden = True
    End If

    ActiveDocument.Bookmarks("FestesFabrikat_Dummy").Select

    If bProtect = True Then Call protectFile(True)
    
End Function

Function STLB_Bau(Optional bProtect As Boolean = True)

    Call protectFile(False)
       
       If ActiveDocument.LB_STLB_RB1.Value = True Then
          ActiveDocument.FormFields("LB_STLB_1_Fassung").Enabled = True             'Feld ist aktiv
       Else
          ActiveDocument.FormFields("LB_STLB_1_Fassung").Result = ""
          ActiveDocument.FormFields("LB_STLB_1_Fassung").Enabled = False            'Feld ist inaktiv
       End If
       
       
       If ActiveDocument.LB_STLB_RB2.Value = True Then
          ActiveDocument.Bookmarks("LB_STLB_2_Tabelle").Range.Font.Hidden = False   'STLB-Bau Tabelle
          ActiveDocument.FormFields("LB_STLB_2_Fassung").Enabled = True             'Feld ist aktiv
       Else
          ActiveDocument.Bookmarks("LB_STLB_2_Tabelle").Range.Font.Hidden = True
          ActiveDocument.FormFields("LB_STLB_2_Fassung").Result = ""
          ActiveDocument.FormFields("LB_STLB_2_Fassung").Enabled = False            'Feld ist inaktiv
       End If
       
       
       If ActiveDocument.LB_STLB_RB3.Value = True Then
          ActiveDocument.Bookmarks("LB_STLB_3_Begr").Range.Font.Hidden = False      'Begr|fffd|ndung: STLB-Bau nicht anwendbar
          ActiveDocument.FormFields("LB_STLB_3_Begr_Text").Enabled = True           'Feld ist aktiv
       Else
          ActiveDocument.Bookmarks("LB_STLB_3_Begr").Range.Font.Hidden = True
          ActiveDocument.FormFields("LB_STLB_3_Begr_Text").Result = ""
          ActiveDocument.FormFields("LB_STLB_3_Begr_Text").Enabled = False          'Feld ist inaktiv
       End If
       
       
    If bProtect = True Then Call protectFile(True)

End Function

Function Instandhaltung(Optional bProtect As Boolean = True)

    Call protectFile(False)
       
       If ActiveDocument.LB_Inst_RB2.Value = True Then
          ActiveDocument.Bookmarks("LB_Inst_2_Hw").Range.Font.Hidden = False        'Hinweis im LV
       Else
          ActiveDocument.Bookmarks("LB_Inst_2_Hw").Range.Font.Hidden = True
       End If
          
    If bProtect = True Then Call protectFile(True)

End Function

'Notwendig, um beim Verlassen des Feldes "Projekt" zu pr|fffd|fen, ob dort die Zeichenfolge "reset" erfasst ist.
'Wenn ja, werden |fffd|ber die Funktion "Pr|fffd|fen" alle Pflichtfelder zur|fffd|ckgesetzt, d.h. inhaltlich geleert und nicht farbig markiert.

Sub checkProjekt()  'Aufruf erfolgt |fffd|ber Feld "Projekt" (Bauma|fffd|nahme)
        If bReset = False Then Call Pr|fffd|fen("Projekt")
End Sub

Public Sub InsertRow()      'Zeile in Tabelle einf|fffd|gen

    'Call protectFile (False) <= da ungesch|fffd|tzter Tabellenbereich nicht erforderlich
    
    'pr|fffd|fen ob Cursor in einer Tabelle steht
    If Selection.Information(wdWithInTable) = True Then

      'Zeile vor der aktuellen Zeile einf|fffd|gen
      Selection.InsertRowsAbove 1
      
      'Zeile nach der aktuellen Zeile einf|fffd|gen
      'Selection.InsertRowsBelow 1
    Else
        MsgBox "Die Einf|fffd|gemarke befindet sich nicht in einer Tabelle.", vbInformation
        Exit Sub
    End If

End Sub

Public Sub DeleteRow()      'Zeile in Tabelle entfernen

    'Call protectFile (False) <= da ungesch|fffd|tzter Tabellenbereich nicht erforderlich
    
    Dim tbl As Table
    Dim cnt As Integer
    
    If Selection.Information(wdWithInTable) = True Then
        Set tbl = Selection.Tables(1)                   'Tabelle selektieren
        cnt = tbl.Rows.Count - 1                        'Anzahl Zeilen ermitteln und 1 abziehen
        If cnt > 1 Then tbl.Rows(cnt).Delete            'vorletzte Zeile entfernen wenn noch mehr als 2 da sind
    Else
        MsgBox "Die Einf|fffd|gemarke befindet sich nicht in einer Tabelle.", vbInformation
        Exit Sub
    End If

End Sub

Function protectFile(doProtect As Boolean)

    If doProtect = True Then
       If ActiveDocument.ProtectionType = wdNoProtection Then ActiveDocument.Protect Password:="Vergadmin", NoReset:=True, Type:=wdAllowOnlyFormFields 'Formularschutz
    Else
       If ActiveDocument.ProtectionType = wdAllowOnlyFormFields Then ActiveDocument.Unprotect Password:="Vergadmin"    'Formularschutz aufheben
       If ActiveDocument.ProtectionType = wdAllowOnlyReading Then ActiveDocument.Unprotect Password:="Vergadmin"       '"nur Lesen"-Schutz aufheben
    End If

End Function

Attribute VB_Name = "Ausdruck_Ausblenden"

'Funktion dient zum Ausblenden von Textmarken vor dem Ausdruck.
'Der Aufruf dieser Funktion erfolgt |fffd|ber das Klassenmodul "EventClassModule".

'Die ausgeblendeten Textmarken werden nach dem Drucken nicht wieder eingeblendet.

'Das Einblenden der ausgeblendeten Textmarken erfolgt erst beim erneuten |fffd|ffnen des
'Dokuments durch das Startmakro "setStartupValues" sowie der dort enthaltenen Zustands|fffd|nderung (mZustand = 1 + Call Zustand).


Function Ausblenden_vor_Druck(Optional bProtect As Boolean = True)

  Call protectFile(False)
        
  'Ausblenden
   ActiveDocument.Bookmarks("Betrieb").Range.Font.Hidden = True            'Zeile: Betrieb
      
  If bProtect = True Then Call protectFile(True)

End Function
Attribute VB_Name = "Ausdruck_Pr|fffd|fen"

Public Drucken As Boolean

Public bReset As Boolean            'verhindert eine Schleife beim zur|fffd|cksetzen der Textfelder
                                    'Reset der Felder: "reset" eintragen im Feld Baumassnahme und feld verlassen (Tab)

Private bFehlerTemp As Boolean
Private mAnzahl As Integer          'Anzahl der unvollst|fffd|ndigen Felder
Private strFirstField As String     'Name des ersten unvollst|fffd|ndigen Pflichtfelds

Private strFirstFieldType As String
Private lastFFokName As String
Private bDoCount As Boolean

Function Pr|fffd|fen(strFieldName As String)
         
    ActiveWindow.View.Type = wdNormalView
    
    Call protectFile(False)
    
    On Error GoTo endFunction  'falls im Anfangsbereich ein Fehler auftritt, wird komplett beendet
    
    bReset = False
    
    Select Case strFieldName
        Case Is = "Projekt"
            If ActiveDocument.FormFields("Projekt").Result = "reset" Then
                bReset = True
                strFieldName = "all"
                GoTo startReset
            Else
                GoTo endFunction
            End If
    
        Case Is = "all"
            On Error GoTo resumeFunction  'falls vor dem Drucken bei einer Pr|fffd|fung ein Fehler auftritt, wird mit dem bis dahin gepr|fffd|ften Stand beendet
    
        Case Else
            GoTo endFunction
            
    End Select
    
    Pruefen.Show (0)  'Anzeige des Formulars "Pr|fffd|fen"
    DoEvents          'notwendig, um Inhalt des Formulars anzuzeigen
    
    mAnzahl = 0
    strFirstField = ""
    strFirstFieldType = ""
    bDoCount = True
    lastFFokName = ""
    
startReset:

'ab hier Pr|fffd|fungen der Felder ob Pflichtangaben vorhanden
'-----------------------------------------------------------


    'Hinweis zur Programmierung:
    
    'Die beim "reset" auszuf|fffd|hrende Funktionen zum Ein-/Ausblenden der abh|fffd|ngigen Bookmarks erfolgt in separater
    'Funktion "doAfterReset".

    'Bei vorangestellten If-Pr|fffd|fungen muss immer der Zusatz "Or bReset = True " angebracht werden, damit bei der
    'Eingabe von "reset" auch die darunter angebrachten Angaben zur|fffd|ckgestellt und ein/-ausgeblendet werden.


 'Pr|fffd|fung: Betriebsart = "bitte ausw|fffd|hlen..."
    bFehlerTemp = ActiveDocument.Bookmarks("Betrieb_DD").Range.Font.Hidden = False And mBL = 1
    Call Markieren(bFehlerTemp, ActiveDocument.FormFields("Betrieb_DD"))
    
 'Pr|fffd|fung: TGA-Gewerk = "bitte ausw|fffd|hlen..."
    bFehlerTemp = ActiveDocument.Bookmarks("TGA_DD").Range.Font.Hidden = False And ActiveDocument.FormFields("TGA_DD").DropDown.Value = 1
    Call Markieren(bFehlerTemp, ActiveDocument.FormFields("TGA_DD"))
       
 'Pr|fffd|fung: Vergabestelle
    bFehlerTemp = ActiveDocument.FormFields("VSt01").Result = "" And ActiveDocument.FormFields("VSt02").Result = ""
    Call Markieren(bFehlerTemp, ActiveDocument.FormFields("VSt01"))
    
    'Besonderheit f|fffd|r VSt02, da nicht separat gepr|fffd|ft:
    If bReset = True Then Call Markieren(bFehlerTemp, ActiveDocument.FormFields("VSt02"))
    
 'Pr|fffd|fung: Bauma|fffd|nahme
    bFehlerTemp = ActiveDocument.FormFields("Projekt").Result = ""
    Call Markieren(bFehlerTemp, ActiveDocument.FormFields("Projekt"))
    
 'Pr|fffd|fung: Leistung
    bFehlerTemp = ActiveDocument.FormFields("Leistung").Result = ""
    Call Markieren(bFehlerTemp, ActiveDocument.FormFields("Leistung"))
        
 'Pr|fffd|fung: Vorbemerkungen
    bFehlerTemp = ActiveDocument.FormFields("VB_1_CB").CheckBox.Value = False
    Call Markieren(bFehlerTemp, ActiveDocument.FormFields("VB_1_CB"))
 
    bFehlerTemp = ActiveDocument.FormFields("VB_2_CB").CheckBox.Value = False
    Call Markieren(bFehlerTemp, ActiveDocument.FormFields("VB_2_CB"))
            
 'Pr|fffd|fung: Leistungsbeschreibung - allgemein
    bFehlerTemp = ActiveDocument.FormFields("LB_allg_1_CB").CheckBox.Value = False
    Call Markieren(bFehlerTemp, ActiveDocument.FormFields("LB_allg_1_CB"))
 
 'Pr|fffd|fung: Produktneutralit|fffd|t
    bFehlerTemp = ActiveDocument.LB_PN_RB1.Value = False And ActiveDocument.LB_PN_RB2.Value = False
    Call MarkierenOpt(bFehlerTemp, ActiveDocument.LB_PN_RB1)
    Call MarkierenOpt(bFehlerTemp, ActiveDocument.LB_PN_RB2)

    If ActiveDocument.LB_PN_RB2.Value = True Or bReset = True Then
       bFehlerTemp = ActiveDocument.FormFields("LB_PN_2_LF_CB").CheckBox.Value = False And ActiveDocument.FormFields("LB_PN_2_FF_CB").CheckBox.Value = False
       Call Markieren(bFehlerTemp, ActiveDocument.FormFields("LB_PN_2_LF_CB"))
       Call Markieren(bFehlerTemp, ActiveDocument.FormFields("LB_PN_2_FF_CB"))
        
       bFehlerTemp = ActiveDocument.FormFields("LB_PN_2_verdeckt_CB").CheckBox.Value = False
       Call Markieren(bFehlerTemp, ActiveDocument.FormFields("LB_PN_2_verdeckt_CB"))
    End If
 
 'Pr|fffd|fung: Produktabfragen
    bFehlerTemp = ActiveDocument.Bookmarks("LB_PA_1").Range.Font.Hidden = False And ActiveDocument.FormFields("LB_PA_1_CB").CheckBox.Value = False
    Call Markieren(bFehlerTemp, ActiveDocument.FormFields("LB_PA_1_CB"))
  
    bFehlerTemp = ActiveDocument.Bookmarks("LB_PA_2").Range.Font.Hidden = False And ActiveDocument.FormFields("LB_PA_2_CB").CheckBox.Value = False
    Call Markieren(bFehlerTemp, ActiveDocument.FormFields("LB_PA_2_CB"))
     
 'Pr|fffd|fung: STLB-Bau
    bFehlerTemp = ActiveDocument.LB_STLB_RB1.Value = False And ActiveDocument.LB_STLB_RB2.Value = False And ActiveDocument.LB_STLB_RB3.Value = False
    Call MarkierenOpt(bFehlerTemp, ActiveDocument.LB_STLB_RB1)
    Call MarkierenOpt(bFehlerTemp, ActiveDocument.LB_STLB_RB2)
    Call MarkierenOpt(bFehlerTemp, ActiveDocument.LB_STLB_RB3)
    
    If bFehlerTemp = False Or bReset = True Then    'kein Fehler = 1 Radiobutton der Gruppe ist markiert oder reset-Lauf
        bFehlerTemp = ActiveDocument.LB_STLB_RB1.Value = True And ActiveDocument.FormFields("LB_STLB_1_Fassung").Result = ""
        Call Markieren(bFehlerTemp, ActiveDocument.FormFields("LB_STLB_1_Fassung"))
            
        bFehlerTemp = ActiveDocument.LB_STLB_RB2.Value = True And ActiveDocument.FormFields("LB_STLB_2_Fassung").Result = ""
        Call Markieren(bFehlerTemp, ActiveDocument.FormFields("LB_STLB_2_Fassung"))
    
        bFehlerTemp = ActiveDocument.LB_STLB_RB3.Value = True And ActiveDocument.FormFields("LB_STLB_3_Begr_Text").Result = ""
        Call Markieren(bFehlerTemp, ActiveDocument.FormFields("LB_STLB_3_Begr_Text"))
    End If
    
 'Pr|fffd|fung: Nebenleistungen / Besondere Leistungen
    bFehlerTemp = ActiveDocument.FormFields("LB_NL_CB").CheckBox.Value = False
    Call Markieren(bFehlerTemp, ActiveDocument.FormFields("LB_NL_CB"))
  
    bFehlerTemp = ActiveDocument.FormFields("LB_BesL_CB").CheckBox.Value = False
    Call Markieren(bFehlerTemp, ActiveDocument.FormFields("LB_BesL_CB"))

 'Pr|fffd|fung: G|fffd|tezeichen und Zertifizierungen
    bFehlerTemp = ActiveDocument.FormFields("LB_Zertifikat_CB").CheckBox.Value = False
    Call Markieren(bFehlerTemp, ActiveDocument.FormFields("LB_Zertifikat_CB"))

 'Pr|fffd|fung: Wahl- und Bedarfspositionen
   'nur Bund
    bFehlerTemp = ActiveDocument.Bookmarks("LB_WuB_Bund").Range.Font.Hidden = False And ActiveDocument.FormFields("LB_WuB_Bund_CB").CheckBox.Value = False
    Call Markieren(bFehlerTemp, ActiveDocument.FormFields("LB_WuB_Bund_CB"))
     
   'nur Land
    If mBL = 2 Or bReset = True Then
    
      'Bedarfspositionen
       bFehlerTemp = ActiveDocument.LB_B_Land_RB1.Value = False And ActiveDocument.LB_B_Land_RB2.Value = False
       Call MarkierenOpt(bFehlerTemp, ActiveDocument.LB_B_Land_RB1)
       Call MarkierenOpt(bFehlerTemp, ActiveDocument.LB_B_Land_RB2)
              
       If ActiveDocument.LB_B_Land_RB2.Value = True Or bReset = True Then
          bFehlerTemp = ActiveDocument.FormFields("LB_B_Land_ja_Me_CB").CheckBox.Value = False
          Call Markieren(bFehlerTemp, ActiveDocument.FormFields("LB_B_Land_ja_Me_CB"))
           
          bFehlerTemp = ActiveDocument.FormFields("LB_B_Land_ja_GB_CB").CheckBox.Value = False
          Call Markieren(bFehlerTemp, ActiveDocument.FormFields("LB_B_Land_ja_GB_CB"))
       End If
           
      'Wahlpositionen
       bFehlerTemp = ActiveDocument.LB_W_Land_RB1.Value = False And ActiveDocument.LB_W_Land_RB2.Value = False
       Call MarkierenOpt(bFehlerTemp, ActiveDocument.LB_W_Land_RB1)
       Call MarkierenOpt(bFehlerTemp, ActiveDocument.LB_W_Land_RB2)
        
       If ActiveDocument.LB_W_Land_RB2.Value = True Or bReset = True Then
          bFehlerTemp = ActiveDocument.FormFields("LB_W_Land_ja_Me_CB").CheckBox.Value = False
          Call Markieren(bFehlerTemp, ActiveDocument.FormFields("LB_W_Land_ja_Me_CB"))
           
          bFehlerTemp = ActiveDocument.FormFields("LB_W_Land_ja_Hw_CB").CheckBox.Value = False
          Call Markieren(bFehlerTemp, ActiveDocument.FormFields("LB_W_Land_ja_Hw_CB"))
        End If
           
     End If
                    
 'Pr|fffd|fung: Stundenlohnpositionen
    bFehlerTemp = ActiveDocument.LB_StdLohn_RB1.Value = False And ActiveDocument.LB_StdLohn_RB2.Value = False
    Call MarkierenOpt(bFehlerTemp, ActiveDocument.LB_StdLohn_RB1)
    Call MarkierenOpt(bFehlerTemp, ActiveDocument.LB_StdLohn_RB2)
   
 'Pr|fffd|fung: Instandhaltung
    bFehlerTemp = ActiveDocument.LB_Inst_RB1.Value = False And ActiveDocument.LB_Inst_RB2.Value = False
    Call MarkierenOpt(bFehlerTemp, ActiveDocument.LB_Inst_RB1)
    Call MarkierenOpt(bFehlerTemp, ActiveDocument.LB_Inst_RB2)
      
 'Pr|fffd|fung: Pl|fffd|ne zur Leistungsbeschreibung
    bFehlerTemp = ActiveDocument.LB_Plaene_RB1.Value = False And ActiveDocument.LB_Plaene_RB2.Value = False
    Call MarkierenOpt(bFehlerTemp, ActiveDocument.LB_Plaene_RB1)
    Call MarkierenOpt(bFehlerTemp, ActiveDocument.LB_Plaene_RB2)
        
 'Pr|fffd|fung: Technische Geb|fffd|udeausr|fffd|stung
    bFehlerTemp = ActiveDocument.FormFields("TGA_DD").DropDown.Value = 3 And ActiveDocument.FormFields("LB_TGA_CB").CheckBox.Value = False
    Call Markieren(bFehlerTemp, ActiveDocument.FormFields("LB_TGA_CB"))
            
 'Pr|fffd|fung: Sonstiges - keine Kontaktdaten des fbTs in den Unterlagen
    bFehlerTemp = ActiveDocument.FormFields("Sonst_1_CB").CheckBox.Value = False
    Call Markieren(bFehlerTemp, ActiveDocument.FormFields("Sonst_1_CB"))
            
 'Pr|fffd|fung: Unterschriftenzeile
    bFehlerTemp = ActiveDocument.FormFields("Unterschr_Ort").Result = ""
    Call Markieren(bFehlerTemp, ActiveDocument.FormFields("Unterschr_Ort"))
        
    bFehlerTemp = ActiveDocument.FormFields("Unterschr_Dat").Result = ""
    Call Markieren(bFehlerTemp, ActiveDocument.FormFields("Unterschr_Dat"))

'bis hier Pr|fffd|fungen der Felder
'-----------------------------------------------------------

resumeFunction:

    'Funktionen nach reset
    If bReset Then Call doAfterReset  'Funktion "doAfterReset" (siehe unten) muss alle Makros enthalten,
                                      'welche |fffd|ber die zuvor aufgef|fffd|hrten, auf Vollst|fffd|ndigkeit |fffd|berpr|fffd|ften
                                      'Objekte aufgerufen werden !
    
    'Abschlu|fffd| reset
    If bReset = True Then
        ActiveDocument.FormFields("Betrieb_DD").Range.Select
        GoTo endFunction
    End If
    
    Pruefen.hide
    
    Drucken = mAnzahl = 0

    If Drucken = False Then
    
        MsgBox "Es fehlen noch " & mAnzahl & " Pflichtangaben!" & vbNewLine & vbNewLine & _
               "Das Ausdrucken dieses Dokuments ist erst nach dem Erfassen aller geforderten Erkl|fffd|rungen m|fffd|glich." & vbNewLine & _
               "Die noch fehlenden Angaben sind im Dokument in der Farbe ""T|fffd|rkis"" markiert." & vbNewLine & vbNewLine & _
               "Bitte erg|fffd|nzen Sie die fehlenden Angaben.", vbInformation, "Vollst|fffd|ndigkeitspr|fffd|fung"
           
        'Erstes Formularfeld mit fehlenden Angaben selektieren
        Call selectFirstField(strFirstField)
    End If

endFunction:
    
    bReset = False
    Call protectFile(True)
  
ActiveWindow.View.Type = wdPrintView
  
End Function

Private Function doAfterReset()
   'Funktionen, die nach einem "reset" ausgef|fffd|hrt werden sollen

    Call LandBund
    Call TGA_Gewerk
    Call Produktneutral
    Call STLB_Bau
    Call Bedarfsposition
    Call Wahlposition
    Call Instandhaltung
    
   'Einblenden evtl. beim Drucken ausgeblendeter Bookmarks
    mZustand = 1                    'Ausf|fffd|llmodus - alles eingeblendet
    Call Zustand(False)
        
End Function

Private Function selectFirstField(strFieldName As String) As Boolean
    
    'm|fffd|glich sind nur formfields oder OptionButtons
    Dim ff As FormField
    Dim op As OptionButton
    
    Select Case strFirstFieldType
        Case Is = "70", "71"          'Textfeld oder Checkbox
            ThisDocument.FormFields(strFieldName).Range.Select
                        
        Case Else
        
           'Ist das erste Feld mit fehlenden Pflichtangaben ein Dropdownfeld, wird nicht dieses sondern das davor liegende Pfichtfeld
           'markiert (Grund: Die Funktion von DD-Felder ist nicht gegeben, wenn diese automatisiert angesprungen werden).
           'Vor dem allerersten, auf Vollst|fffd|ndigkeit zu pr|fffd|fenden Dropdownfeld im Dokument muss daher ein anderes Pflichtfeld sein, welches
           'ebenfalls vor dem Drucken gepr|fffd|ft wird.
           'Ist dieses (wie hier) nicht der Fall, muss gezielt ein Sprungziel (hier "Beginn_Dummy") f|fffd|r diese DD-Felder vorgegeben werden.
                
            If Not lastFFokName = "" And Not strFieldName = "Betrieb_DD" And Not strFieldName = "TGA_DD" Then
                ThisDocument.FormFields(lastFFokName).Range.Select
            Else
                ThisDocument.FormFields("Beginn_Dummy").Range.Select
            End If
    End Select
    
End Function

'Formularfelder markieren
Private Function Markieren(bFehler As Boolean, ffTemp As FormField)
                                                       
    ThisDocument.FormFields(ffTemp.Name).Range.Select
    
    If bReset = True Then   'nur im "reset" Fall
                
       
        Dim bhidden As Boolean
        bhidden = ThisDocument.Bookmarks(ffTemp.Name).Range.Font.Hidden
            
        If bhidden = True Then ThisDocument.Bookmarks(ffTemp.Name).Range.Font.Hidden = False
      
        
        Selection.Range.HighlightColorIndex = wdNoHighlight 'keine Farbhinterlegung mehr
        
        Select Case ffTemp.Type                             'Textfelder werden geleert
            Case Is = wdFieldFormTextInput
                ffTemp.Result = ""
            Case Is = wdFieldFormCheckBox                   'Checkboxen abgew|fffd|hlt
                ffTemp.CheckBox.Value = False
            Case Is = wdFieldFormDropDown                   'Dropdownfelder 1. Wert aufw|fffd|hlen
                ffTemp.DropDown.Value = 1
        End Select
            
        If Not ThisDocument.Bookmarks(ffTemp.Name).Range.Font.Hidden = bhidden Then ThisDocument.Bookmarks(ffTemp.Name).Range.Font.Hidden = bhidden
            
        Exit Function
    
    End If
    
    
    If Not bFehler Then  'Feld ist komplett
        If ffTemp.Name = strFirstField Then
            strFirstField = ""
            strFirstFieldType = ""
        End If
        
        If bDoCount = True Then
            If ffTemp.Type = wdFieldFormTextInput Or ffTemp.Type = wdFieldFormCheckBox Then
                If ThisDocument.Bookmarks(ffTemp.Name).Range.Font.Hidden = False Then lastFFokName = ffTemp.Name
            End If
        End If
        
        Selection.Range.HighlightColorIndex = wdNoHighlight
    Else
        If strFirstField = "" Then
            strFirstField = ffTemp.Name
            strFirstFieldType = ffTemp.Type
        End If
        
        mAnzahl = mAnzahl + 1
        
        Selection.Range.HighlightColorIndex = wdTurquoise
    End If
    
End Function

'Optionsbuttons markieren
Private Function MarkierenOpt(bFehler As Boolean, opTemp As OptionButton)
    
    If bReset = True Then
        opTemp.BackColor = RGB(255, 255, 255)
        opTemp.Value = False
        Exit Function
    End If
    
    If Not bFehler Then 'Feld ist komplett
    
        If opTemp.Name = strFirstField Then
            strFirstField = ""
            strFirstFieldType = ""
        End If
        
        opTemp.BackColor = RGB(255, 255, 255)
        
    Else
        If strFirstField = "" Then
            strFirstField = opTemp.Name
            strFirstFieldType = "optionbutton"
            bDoCount = False
        End If
        
        mAnzahl = mAnzahl + 1
        
        opTemp.BackColor = RGB(64, 224, 208)    'turquoise
    
    End If
    
End Function



Attribute VB_Name = "DocEvents"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public WithEvents appWordDoc As Word.Application
Attribute appWordDoc.VB_VarHelpID = -1

Private Sub appWordDoc_DocumentBeforeSave(ByVal doc As Document, SaveAsUI As Boolean, Cancel As Boolean)
     
     If checkSourceTemp(doc.Path) = True Then
     
        Cancel = True
        
        Dim strFileName As String
        strFileName = getPath()
        
        If Not strFileName = "" Then
            doc.SaveAs2 (strFileName)
        Else
            MsgBox "Das Speichern der Datei wurde von Ihnen abgebrochen.", vbInformation, "Abbruch"
        End If
        
     End If
 
End Sub

Private Sub appWordDoc_DocumentBeforePrint(ByVal doc As Document, Cancel As Boolean)
    
   'Hinweis und ggf. Abbruch des Druckvorgangs bei nicht aktueller Datei-----------------------
    If aktuell = False Then
       Druck_alt = False      'notwendig, falls nachstehende Userform mit X geschlossen wird
       Druck_veraltet.Show
         DoEvents
    
       If Druck_alt = False Then
          Cancel = True
          Call Aktualit|fffd|tspr|fffd|fung
          Exit Sub
       End If
    
    End If
   '------------------------------------------------------------------------------------------
        
    Call Pr|fffd|fen("all")
    Pruefen.hide
    
    If Drucken = False Then  'False = nicht ausdrucken
       Cancel = True
    Else
       MsgBox "Es werden nur die ausgew|fffd|hlten Erkl|fffd|rungen gedruckt." + vbNewLine + _
              "Die nicht ausgew|fffd|hlten Erkl|fffd|rungen werden vor dem Drucken ausgeblendet." + vbNewLine + vbNewLine + _
              "Nach dem Speichern, Schlie|fffd|en und erneuten |fffd|ffnen der Datei sind die ausgeblendeten Erkl|fffd|rungen wieder sichtbar.", vbInformation, "Hinweis zum Ausdruck"
        
       mZustand = 2          'Reduzierung des Umfangs
       Call Zustand
       
       Call Ausblenden_vor_Druck
           
    End If
    
End Sub

Attribute VB_Name = "Druck_veraltet"
Attribute VB_Base = "0{6491C836-3015-4081-A9CE-42E767D4A5F6}{44AD5C52-AF7C-47EE-A3CB-ABE2FB33FF1B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Private Sub Druck_veraltet_ja_Click()
    Druck_alt = True
    Druck_veraltet.hide
End Sub

Private Sub Druck_veraltet_nein_Click()
    Druck_alt = False
    Druck_veraltet.hide
End Sub

Attribute VB_Name = "Geduld"
Attribute VB_Base = "0{5687C444-2CA7-4007-AF99-DE38FFA1960C}{3B603890-4810-4295-8B5F-0BFE6139B421}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





Attribute VB_Name = "Pruefen"
Attribute VB_Base = "0{8A6B8312-6E24-4527-BBE0-ACE82945065C}{2E510947-425D-40BF-ADC3-41CA3410837F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False






Attribute VB_Name = "Start"
Attribute VB_Base = "0{95F941F2-38F2-4352-80D9-19A0B911D520}{4EB28ECE-3FAB-4F8B-A1C2-82C3B187BEDC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

#If VBA7 Then
 
    Private Declare PtrSafe Function DrawMenuBar Lib "User32" ( _
     ByVal hwnd As Long) As Long
    
    Private Declare PtrSafe Function FindWindow Lib "User32" Alias "FindWindowA" ( _
     ByVal lpClassName As String, _
     ByVal lpWindowName As String) As Long
    
    Private Declare PtrSafe Function GetWindowLong Lib "User32" Alias "GetWindowLongA" ( _
     ByVal hwnd As Long, _
     ByVal nIndex As Long) As Long
    
    Private Declare PtrSafe Function SetWindowLong Lib "User32" Alias "SetWindowLongA" ( _
     ByVal hwnd As Long, _
     ByVal nIndex As Long, _
     ByVal dwNewLong As Long) As Long
     
#Else

    Private Declare Function DrawMenuBar Lib "User32" ( _
     ByVal hwnd As Long) As Long
    
    Private Declare Function FindWindow Lib "User32" Alias "FindWindowA" ( _
     ByVal lpClassName As String, _
     ByVal lpWindowName As String) As Long
    
    Private Declare Function GetWindowLong Lib "User32" Alias "GetWindowLongA" ( _
     ByVal hwnd As Long, _
     ByVal nIndex As Long) As Long
    
    Private Declare Function SetWindowLong Lib "User32" Alias "SetWindowLongA" ( _
     ByVal hwnd As Long, _
     ByVal nIndex As Long, _
     ByVal dwNewLong As Long) As Long
     
#End If
     

Const WS_CAPTION As Long = &HC00000
Const GWL_STYLE As Long = (-16)

Dim hwnd&

Private Function GetHandleUF(uf As MSForms.UserForm) As Long
    GetHandleUF = IIf(Int(Val(Application.Version)) < 9, _
        FindWindow("ThunderXFrame", uf.Caption), FindWindow("ThunderDFrame", uf.Caption))
End Function

Private Sub UserForm_Initialize()

    hwnd = GetHandleUF(Me)

   'Die Titelleiste entfernen
    Call SetWindowLong(hwnd, GWL_STYLE, GetWindowLong(hwnd, GWL_STYLE) And Not WS_CAPTION)

    Call DrawMenuBar(hwnd)

End Sub


Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True
Attribute VB_Control = "LB_Plaene_RB2, 24, 0, MSForms, OptionButton"
Attribute VB_Control = "LB_Plaene_RB1, 23, 1, MSForms, OptionButton"
Attribute VB_Control = "LB_Inst_RB2, 22, 2, MSForms, OptionButton"
Attribute VB_Control = "LB_Inst_RB1, 21, 3, MSForms, OptionButton"
Attribute VB_Control = "LB_StdLohn_RB2, 20, 4, MSForms, OptionButton"
Attribute VB_Control = "LB_StdLohn_RB1, 19, 5, MSForms, OptionButton"
Attribute VB_Control = "LB_W_Land_ja_Tab_Zeile_entfernen, 18, 6, MSForms, CommandButton"
Attribute VB_Control = "LB_W_Land_ja_Tab_Zeile_einf|fffd|gen, 17, 7, MSForms, CommandButton"
Attribute VB_Control = "LB_W_Land_RB2, 16, 8, MSForms, OptionButton"
Attribute VB_Control = "LB_W_Land_RB1, 15, 9, MSForms, OptionButton"
Attribute VB_Control = "LB_B_Land_ja_Tab_Zeile_entfernen, 14, 10, MSForms, CommandButton"
Attribute VB_Control = "LB_B_Land_ja_Tab_Zeile_einf|fffd|gen, 13, 11, MSForms, CommandButton"
Attribute VB_Control = "LB_B_Land_RB2, 12, 12, MSForms, OptionButton"
Attribute VB_Control = "LB_B_Land_RB1, 11, 13, MSForms, OptionButton"
Attribute VB_Control = "LB_STLB_RB3, 10, 14, MSForms, OptionButton"
Attribute VB_Control = "LB_STLB_2_Tab_Zeile_entfernen, 9, 15, MSForms, CommandButton"
Attribute VB_Control = "LB_STLB_2_Tab_Zeile_einf|fffd|gen, 8, 16, MSForms, CommandButton"
Attribute VB_Control = "LB_STLB_RB2, 7, 17, MSForms, OptionButton"
Attribute VB_Control = "LB_STLB_RB1, 6, 18, MSForms, OptionButton"
Attribute VB_Control = "LB_FF_Tab_Zeile_entfernen, 5, 19, MSForms, CommandButton"
Attribute VB_Control = "LB_FF_Tab_Zeile_einf|fffd|gen, 4, 20, MSForms, CommandButton"
Attribute VB_Control = "LB_LF_Tab_Zeile_entfernen, 3, 21, MSForms, CommandButton"
Attribute VB_Control = "LB_LF_Tab_Zeile_einf|fffd|gen, 2, 22, MSForms, CommandButton"
Attribute VB_Control = "LB_PN_RB2, 1, 23, MSForms, OptionButton"
Attribute VB_Control = "LB_PN_RB1, 0, 24, MSForms, OptionButton"
Option Explicit
' Klasseninstanz f|fffd|r Eventhandler
Dim thisAppDoc As New DocEvents

'Startmakro beim Neuerstellen eine Datei aus Vorlagedatei durch Doppelklick
    Private Sub Document_New()
    
       'Aktualit|fffd|tspr|fffd|fung Office
        If Application.Version < "14.0" Then  '14.0 = Word 2010
           MsgBox "Die Funktionalit|fffd|ten dieses Arbeitsmittels erfordern ""Word 2010"" oder aktueller." + vbNewLine + _
                  "Bitte installieren Sie vor der Verwendung dieses Arbeitsmittels eine aktuelle Word Version.", vbInformation, "Aktualit|fffd|tspr|fffd|fung"
           Exit Sub
        End If
    
        ActiveWindow.View.Type = wdNormalView
    
        Call Internet
        
        Dim x As Long   'Timer soll zu kurzes Aufblenden des "Start"-Formulars vermeiden
            x = Timer()
        
        Start.Show (0)  'Anzeige des Formulars "Start"
          DoEvents      'notwendig, um Inhalt des Formulars anzuzeigen
        
        mZustand = 1    'Ausf|fffd|llmodus - alles eingeblendet
        Call Zustand(False)
       
        Call protectFile(False)
          checkBetrieb
          Pr|fffd|fung_Import
          setStartupValues
        Call protectFile(True)
              
        Set thisAppDoc.appWordDoc = ThisDocument.Application
        
        Do While x + 2 > Timer()
           DoEvents
        Loop
        
        Start.hide      'Ausblenden des Formulars "Start"
        
        ActiveWindow.View.Type = wdPrintView
        
    End Sub

'Startmakro beim |fffd|ffnen einer bestehenden Datei
    Private Sub Document_Open()
        
       'Aktualit|fffd|tspr|fffd|fung Office
        If Application.Version < "14.0" Then  '14.0 = Word 2010
           MsgBox "Die Funktionalit|fffd|ten dieses Arbeitsmittels erfordern ""Word 2010"" oder aktueller." + vbNewLine + _
                  "Bitte installieren Sie vor der Verwendung dieses Arbeitsmittels eine aktuelle Word Version.", vbInformation, "Aktualit|fffd|tspr|fffd|fung"
           Exit Sub
        End If
        
        Set thisAppDoc.appWordDoc = ThisDocument.Application
        
        ActiveWindow.View.Type = wdNormalView
        
        Call Internet
       
        ThisDocument.Activate 'Focus auf dieses Dokument legen, sonst funktioniert "ActiveDocument..." nach Download nicht !
            
        Dim x As Long         'Timer soll zu kurzes Aufblenden des "Start"-Formulars vermeiden
            x = Timer()
            
        Start.Show (0)        'Anzeige des Formulars "Start"
          DoEvents            'notwendig, um Inhalt des Formulars anzuzeigen
            
        mZustand = 1          'Ausf|fffd|llmodus - alles eingeblendet
        Call Zustand(False)
            
        Call protectFile(False)
          checkBetrieb
          Pr|fffd|fung_Import
          setStartupValues
        Call protectFile(True)
                      
        Do While x + 2 > Timer()
           DoEvents
        Loop
        
        Start.hide            'Ausblenden des Formulars "Start"
        
        ActiveWindow.View.Type = wdPrintView
        
    End Sub
    
'Makro beim Schlie|fffd|en der Datei
    Sub AutoClose()
                      
        'Wiederherstellen der urspr|fffd|nglichen Word-Einstellungen ----------------------------------------------
        ActiveDocument.ActiveWindow.View.ShowHiddenText = m_ShowHiddenText  'Verstecken des "ausgeblendeten Textes"
        ActiveDocument.ActiveWindow.View.ShowAll = m_ShowAll                'Ausblenden von "ausgeblendetem Text" + "allen Formatierungszeichen"
        Options.PrintHiddenText = m_PrintHiddenText                         'Ausgeblendeter Text wird nicht gedruckt
        ActiveDocument.ActiveWindow.View.TableGridlines = m_TableGridlines  'Ausblenden der Tabellen-Rasterlinien
        ActiveDocument.ActiveWindow.DocumentMap = m_DocumentMap             'Anzeige Navigationsbereich
        Options.CtrlClickHyperlinkToOpen = m_HyperlinkOpen                  'Aufruf Hyperlink (mit/ohne Strg)

        If m_MarkupMode = 1 Then                                            'Alle |fffd|berarbeitungen inline anzeigen
            ActiveDocument.ActiveWindow.View.MarkupMode = wdInLineRevisions
        ElseIf m_MarkupMode = 2 Then                                        'Nur Kommentare und Formatierungen in Sprechblasen anzeigen
            ActiveDocument.ActiveWindow.View.MarkupMode = wdMixedRevisions
        ElseIf m_MarkupMode = 3 Then                                        '|fffd|berarbeitungen in Sprechblasen anzeigen
            ActiveDocument.ActiveWindow.View.MarkupMode = wdBalloonRevisions
        End If
         '---------------------------------------------------------------------------------------------------
         
        Call protectFile(False)
          ActiveDocument.Bookmarks("Hinweis_Makro").Range.Font.Hidden = False 'Einblenden des Hinweises "Bitte Makros aktivieren"
        ActiveDocument.Protect Password:="Vergadmin", NoReset:=False, Type:=wdAllowOnlyReading, UseIRM:=False, EnforceStyleLock:=False  '"nur Lesen"-Schutz anbringen
        
    End Sub

'Radio-Buttons

    'Produktneutralit|fffd|t
        Private Sub LB_PN_RB1_Click()
            Call Produktneutral
        End Sub

        Private Sub LB_PN_RB2_Click()
            Call Produktneutral
        End Sub

    'Standardleistungsbuch - Bau
        Private Sub LB_STLB_RB1_Click()
            Call STLB_Bau
        End Sub

        Private Sub LB_STLB_RB2_Click()
            Call STLB_Bau
        End Sub

        Private Sub LB_STLB_RB3_Click()
            Call STLB_Bau
        End Sub

    'Bedarfspositionen (Land)
        Private Sub LB_B_Land_RB1_Click()
            Call Bedarfsposition
        End Sub

        Private Sub LB_B_Land_RB2_Click()
            Call Bedarfsposition
        End Sub

    'Wahlpositionen (Land)
        Private Sub LB_W_Land_RB1_Click()
            Call Wahlposition
        End Sub

        Private Sub LB_W_Land_RB2_Click()
            Call Wahlposition
        End Sub

    'Stundenlohnpositionen
        Private Sub LB_StdLohn_RB1_Click()
            'bisher keine Funktion
        End Sub

        Private Sub LB_StdLohn_RB2_Click()
            'bisher keine Funktion
        End Sub

    'Instandhaltung
        Private Sub LB_Inst_RB1_Click()
            Call Instandhaltung
        End Sub

        Private Sub LB_Inst_RB2_Click()
            Call Instandhaltung
        End Sub

    'Pl|fffd|ne
        Private Sub LB_Plaene_RB1_Click()
            'bisher keine Funktion
        End Sub

        Private Sub LB_Plaene_RB2_Click()
            'bisher keine Funktion
        End Sub


'Schaltfl|fffd|chen <Zeile einf|fffd|gen> bzw. <Zeile entfernen>

    'Produktneutralit|fffd|t - Leitfabrikatsvorgabe
        Private Sub LB_LF_Tab_Zeile_einf|fffd|gen_Click()
           Call InsertRow
        End Sub
        
        Private Sub LB_LF_Tab_Zeile_entfernen_Click()
           Call DeleteRow
        End Sub
    
    'Produktneutralit|fffd|t - feste Fabrikatsvorgabe
        Private Sub LB_FF_Tab_Zeile_einf|fffd|gen_Click()
           Call InsertRow
        End Sub

        Private Sub LB_FF_Tab_Zeile_entfernen_Click()
           Call DeleteRow
        End Sub

    'Standardleistungsbuch - Bau
        Private Sub LB_STLB_2_Tab_Zeile_einf|fffd|gen_Click()
           Call InsertRow
        End Sub
        
        Private Sub LB_STLB_2_Tab_Zeile_entfernen_Click()
           Call DeleteRow
        End Sub
        
    'Bedarfspositionen (Land)
        Private Sub LB_B_Land_ja_Tab_Zeile_einf|fffd|gen_Click()
           Call InsertRow
        End Sub

        Private Sub LB_B_Land_ja_Tab_Zeile_entfernen_Click()
           Call DeleteRow
        End Sub

    'Wahlpositionen (Land)
        Private Sub LB_W_Land_ja_Tab_Zeile_einf|fffd|gen_Click()
           Call InsertRow
        End Sub

        Private Sub LB_W_Land_ja_Tab_Zeile_entfernen_Click()
           Call DeleteRow
        End Sub

Attribute VB_Name = "Update"
Option Explicit

''API Funktionen
#If VBA7 Then
    
   Private Declare PtrSafe Function URLDownloadToFile Lib "urlmon" Alias _
                            "URLDownloadToFileA" ( _
                                ByVal pCaller As Long, _
                                ByVal szURL As String, _
                                ByVal szFileName As String, _
                                ByVal dwReserved As Long, _
                                ByVal lpfnCB As Long) As Long
    
   Private Declare PtrSafe Function DeleteUrlCacheEntry Lib "wininet.dll" Alias _
       "DeleteUrlCacheEntryA" (ByVal lpszUrlName As String) As Long
    
#Else

   Private Declare Function URLDownloadToFile Lib "urlmon" Alias _
                            "URLDownloadToFileA" ( _
                                ByVal pCaller As Long, _
                                ByVal szURL As String, _
                                ByVal szFileName As String, _
                                ByVal dwReserved As Long, _
                                ByVal lpfnCB As Long) As Long

   Private Declare Function DeleteUrlCacheEntry Lib "wininet.dll" Alias _
       "DeleteUrlCacheEntryA" (ByVal lpszUrlName As String) As Long

#End If
    
Private strDownloadFileNeu As String    ' keinen Wert zuweisen
Private strUpdatelinkTemp As String     ' keinen Wert zuweisen
    
'-------------------------------------------------------------------------------------------------------------------------------------------
'-------------------------------------------------------------------------------------------------------------------------------------------

''Festlegung der Konstanten
'URL der Datei, anhand der gepr|fffd|ft wird, ob eine Internetverbindung besteht (Datei erreichbar = Internetverbindung, sonst keine)
Private Const strCheckFile As String = "http://www.vbv.statistik-bw.de/Internetverbindung/CheckInternet.txt"

'URL des Updateordners
Private Const strUpdatelink As String = "http://www.vbv.statistik-bw.de/Formulare/"      ' "/" am Ende nicht zwingend, wird gepr|fffd|ft und ggf. korrigiert

'Name des Downloadfile auf dem Server
Private Const strDownloadFile As String = "Erklaerung_zum_LV.docm"   '<= Dateibezeichnung der Anwendung

Private Const strVersNr As String = "Erklaerung_zum_LV_Version_005.txt"    '<= Versionsdatei (txt-Format)
                                'Anhand dieser Versionsdatei wird gepr|fffd|ft, ob die Anwendung noch aktuell ist.
                                'Die Bezeichnung entspricht der Dateibezeichnung der Anwendung mit einem fortlaufenden Index,
                                'welcher bei einer neuen Version um einen Z|fffd|hler erh|fffd|ht wird.
                                'Auf dem Updateserver ist dann die veraltete Versionsdatei zu l|fffd|schen und die neue hochzuladen.
                                'Im nachfolgenden Code wird gepr|fffd|ft, ob die in dieser Anwendung bezeichnete Versionsdatei noch
                                'auf dem Updateserver liegt.
                                'Wenn ja = kein Update erforderlich.
                                'Wenn nein = Update erforderlich.


Private Function URLVorhanden(ByVal sURL As String) As Boolean
    
    Dim oHTTP As Object
    Dim lStatus As Long
    
    On Error Resume Next        'im Fehlerfall mit der n|fffd|chsten Anweisung fortfahren
    DeleteUrlCacheEntry (sURL)  'evtl. vorhandene tempor|fffd|re Datei aus dem IE-Cache entfernen

    On Error GoTo ende          'wenn Error-Meldung, dann weiter mit "ende:"
   
    Set oHTTP = CreateObject("Microsoft.XMLHTTP")
    With oHTTP
        .Open "GET", sURL, False
        .Send
        lStatus = .Status
    End With
    
    Set oHTTP = Nothing
    
    URLVorhanden = lStatus = 200  'wenn Status 200 dann URLVorhanden = True
    Exit Function
    
ende:
    URLVorhanden = False

End Function

Sub Internet()  'Pr|fffd|fung, ob Internetverbindung zum Updateserver besteht
      
    aktuell = True
      
    If URLVorhanden(strCheckFile) Then
        Call Aktualit|fffd|tspr|fffd|fung
    Else
        If MsgBox("Die Suche nach Updates ist fehlgeschlagen." & vbNewLine & "Eine Verbindung zum Updateserver konnte nicht hergestellt werden." & vbNewLine & "Das kann folgende Ursachen haben:" & vbNewLine & vbNewLine & "- Es besteht keine Internetverbindung," & vbNewLine & _
                  "- Der Updateserver ist derzeit nicht ansprechbar," & vbNewLine & "- Ihre Firewall verweigert der Anwendung den Internetzugriff." & vbNewLine & vbNewLine & "M|fffd|chten Sie den Vorgang wiederholen?", vbYesNo + vbQuestion, "Pr|fffd|fung der Internetverbindung") = vbYes Then
           Call Internet
        End If
    End If
    
End Sub

Sub Aktualit|fffd|tspr|fffd|fung() 'Pr|fffd|fung, ob aktuellere Datei bereitgestellt wurde

    Dim strFileTemp As String
    
    Dim strMsg As String
    strMsg = "Wegen eines technischen Problems kann die neue Version dieser Datei nicht heruntergeladen werden." + vbNewLine + "Wir bitten diesen Umstand zu entschuldigen." + vbNewLine + vbNewLine + "Bitte setzen Sie sich |fffd|ber die Vergabestelle mit dem Anwendungssupport in Verbindung."

    'Tempor|fffd|r verwendete und ver|fffd|nderbare Variablen setzen und pr|fffd|fen auf "/" am Ende
    strDownloadFileNeu = strDownloadFile
    strUpdatelinkTemp = strUpdatelink
    If Right(strUpdatelinkTemp, 1) <> "/" Then strUpdatelinkTemp = strUpdatelinkTemp & "/"
    
    'Versionsdatei aus dem Cache entfernen
    On Error Resume Next        'im Fehlerfall mit der n|fffd|chsten Anweisung fortfahren
    DeleteUrlCacheEntry (strUpdatelinkTemp & strVersNr)
 
    If URLVorhanden(strUpdatelinkTemp & strVersNr) Then
        'MsgBox "Die Datei ist auf dem aktuellen Stand.", vbInformation, "Aktualit|fffd|tspr|fffd|fung" 'Vor der Auslieferung auskommentieren
        Exit Sub
    Else
        aktuell = False
    
        If MsgBox("Die Datei ist nicht mehr aktuell." + vbNewLine + "M|fffd|chten Sie die neue Version dieser Datei herunterladen?", _
            vbYesNo + vbQuestion, "Aktualit|fffd|tspr|fffd|fung") = vbYes Then
            If URLVorhanden(strUpdatelinkTemp & strDownloadFile) = False Then     'Pr|fffd|fung, ob neue Datei auf Updateserver liegt
                MsgBox strMsg, vbInformation, "Hinweis"
            Else
                'Zielpfad f|fffd|r Download abfragen, Abbruch, wenn keine Angabe durch User
                strFileTemp = getPath()
                If strFileTemp = "" Then
                    MsgBox "Das Herunterladen der aktualisierten Datei wurde von Ihnen abgebrochen." + vbNewLine + vbNewLine + "Zum nochmaligen |fffd|ffnen des Download-Dialogs schlie|fffd|en Sie bitte zun|fffd|chst diese Datei und |fffd|ffnen Sie diese anschlie|fffd|end erneut.", vbInformation, "Hinweis"
                    Exit Sub
                End If
                'Datei herunterladen
                If Not DownloadFile(strUpdatelinkTemp & strDownloadFile, strFileTemp) Then
                    MsgBox strMsg, vbInformation, "Hinweis"
                Else
                    'Neue Datei gleich |fffd|ffnen
                    If MsgBox("Die Datei wurde erfolgreich heruntergeladen und wie folgt gespeichert:" + vbNewLine + vbNewLine + _
                        "" & strFileTemp & "" + vbNewLine + vbNewLine + vbNewLine + "M|fffd|chten Sie die aktuelle Version jetzt |fffd|ffnen?", vbYesNo + vbInformation, "Download erfolgreich") = vbYes Then
                        
                        Dim doc As Word.Document
                        Set doc = Application.ActiveDocument
                        
                        Application.Documents.Open (strFileTemp)
                        doc.Activate
                        doc.Close savechanges:=False  'Schlie|fffd|en der "alten" Datei ohne zu speichern
                    End If
                    
                 End If
            End If
        Else
            MsgBox "Sie k|fffd|nnen die neue Version dieser Datei auch zu einem sp|fffd|teren Zeitpunkt herunterladen." + vbNewLine + vbNewLine + "Die Aktualit|fffd|tspr|fffd|fung erfolgt automatisch nach jedem |fffd|ffnen der Datei.", vbInformation, "Hinweis"
        End If
    End If

End Sub

Private Function DownloadFile(UrlFileName As String, DestinationFileName As String) As Boolean

    On Error Resume Next
    DownloadFile = False
    
    DestinationFileName = Trim(DestinationFileName)
    
    If DestinationFileName = vbNullString Then Exit Function
    
    Dim L As Long
    
    L = DeleteUrlCacheEntry(UrlFileName)
    L = URLDownloadToFile(0&, UrlFileName, DestinationFileName, 0&, 0&)
    
    If L = 0 Then DownloadFile = True
    
End Function

Public Function getPath() As String
    
    Dim strAktPath As String
    
    If checkSourceTemp(Application.ActiveDocument.Path) = False Then
        strAktPath = Application.ActiveDocument.Path
    Else
        strAktPath = "C:"
    End If

    getPath = saveFormAs(strAktPath, Application.ActiveDocument.Name)
    
    If getPath = Application.ActiveDocument.FullName Then   'Pfad der aktuell ge|fffd|ffneten Datei
           Dim fso As New FileSystemObject
           Dim strExt As String
        
           strExt = fso.GetExtensionName(Application.ActiveDocument.FullName)
           
           getPath = fso.GetAbsolutePathName(Application.ActiveDocument.Path) & "\" & fso.GetBaseName(Application.ActiveDocument.Name)
           getPath = getPath & " - Neu." & fso.GetExtensionName(Application.ActiveDocument.FullName)
               
           MsgBox "Ein Dokument kann nicht unter dem gleichen Namen wie ein bereits ge|fffd|ffnetes Dokument gespeichert werden." & vbNewLine & vbNewLine & _
           "Um die Datei dennoch speichern zu k|fffd|nnen, wird der Dateiname automatisch um den Zusatz  "" - Neu ""  erweitert." & vbNewLine & vbNewLine & _
           "Die neue Datei ist anschlie|fffd|end unter dem Dateinamen  """ & fso.GetBaseName(getPath) & """  aufrufbar.", vbInformation, "Datei bereits vorhanden"
            
    End If
  
End Function

Public Function saveFormAs(strPath As String, strFileName As String) As String
    
    Dim fd As FileDialog
    Set fd = Application.FileDialog(msoFileDialogSaveAs)
    
    If Application.Name = "Microsoft Word" Then
        If Application.Version = "11.0" Then
            fd.FilterIndex = 1
        Else
            fd.FilterIndex = 2
        End If
    End If
    
    With fd
        .Title = "Datei speichern unter ..."
        .InitialFileName = strPath
        If Not strFileName = "" Then .InitialFileName = strPath & "\" & strFileName
    End With
            
    If fd.Show = True Then
        saveFormAs = fd.SelectedItems(1)
    Else
        saveFormAs = ""
    End If
       
End Function

Public Function checkSourceTemp(strPath As String) As Boolean

    checkSourceTemp = False
    Dim fso As New FileSystemObject
    
    If fso.FolderExists(strPath) Then
        If Len(strPath) >= 4 Then
            If LCase(Right$(strPath, 3)) = "tmp" Or LCase(Right$(strPath, 4)) = "temp" Then checkSourceTemp = True
        End If
    Else
        checkSourceTemp = True
    End If
    
End Function



Attribute VB_Name = "XML_Import"

Private xmlPath As String
Private Const xmlFile As String = "Formulare und Datenlisten\Vergabestelle.xml"  'Pfad der xml-Datei mit den Daten der Vergabestelle

Private Const anzImporte As Integer = 1     'Anzahl, wie oft die Daten in das Dokument eingelesen werden  (Standard = 1)
                                            'Bezeichnung der Textfelder im Dokument:
                                                    'erste Angabe : VSt01,   VSt02,   VSt03,   VSt04
                                                    'zweite Angabe: VSt01_1, VSt02_1, VSt03_1, VSt04_1
                                                    'dritte Angabe: VSt01_2, VSt02_2, VSt03_2, VSt04_2
                                                    'u.s.w
    
Sub Pr|fffd|fung_Import()

    Call protectFile(False)

    If ActiveDocument.Bookmarks.Exists("VSt01") Then
       If ActiveDocument.Bookmarks("VSt01").Range.Font.Hidden = False And ActiveDocument.FormFields("VSt01").Result = "" Then
       If readXML = False Then Exit Sub
       Anpassung_Import (False)
       End If
    End If
    
    If ActiveDocument.Bookmarks.Exists("VSt02") Then
       If ActiveDocument.Bookmarks("VSt02").Range.Font.Hidden = False And ActiveDocument.FormFields("VSt02").Result = "" Then
       If readXML = False Then Exit Sub
       Anpassung_Import (False)
       End If
    End If
    
    If ActiveDocument.Bookmarks.Exists("VSt03") Then
       If ActiveDocument.Bookmarks("VSt03").Range.Font.Hidden = False And ActiveDocument.FormFields("VSt03").Result = "" Then
       If readXML = False Then Exit Sub
       End If
    End If
    
    If ActiveDocument.Bookmarks.Exists("VSt04") Then
       If ActiveDocument.Bookmarks("VSt04").Range.Font.Hidden = False And ActiveDocument.FormFields("VSt04").Result = "" Then
       If readXML = False Then Exit Sub
       End If
    End If
    
    If ActiveDocument.Bookmarks.Exists("VSt_Kurzbez_Abs1") Then
       If ActiveDocument.Bookmarks("VSt_Kurzbez_Abs1").Range.Font.Hidden = False And ActiveDocument.FormFields("VSt_Kurzbez_Abs1").Result = "" Then
       If readXML = False Then Exit Sub
       End If
    End If
    
    If ActiveDocument.Bookmarks.Exists("VSt_Kurzbez_Abs2") Then
       If ActiveDocument.Bookmarks("VSt_Kurzbez_Abs2").Range.Font.Hidden = False And ActiveDocument.FormFields("VSt_Kurzbez_Abs2").Result = "" Then
       If readXML = False Then Exit Sub
       End If
    End If

    Call protectFile(True)
    
End Sub

Public Function readXML() As Boolean
    
    readXML = True
    
    Dim fso
    Set fso = CreateObject("Scripting.FileSystemObject")
    If Not fso.FileExists(xmlPath) Or anzImporte = 0 Then Exit Function
    
    On Error Resume Next
    
    Set msxml = CreateObject("Microsoft.XMLDOM")
    msxml.Load (xmlPath)
    
    Set Root = msxml.DocumentElement
    Dim strName As String
    Dim strFieldName As String
    
    If Not Root Is Nothing Then
        Set ChildNodes = Root.ChildNodes()
        
        For Each v_child In ChildNodes
            If v_child.BaseName = "Vergabestelle" Then
                Set v_child_props = v_child.ChildNodes()
                For Each V_Child_Prop In v_child_props
                    ActiveDocument.FormFields(V_Child_Prop.BaseName).Result = V_Child_Prop.nodeTypedValue
                    
                    If anzImporte > 1 Then
                        Dim i As Integer
                        For i = 1 To anzImporte - 1
                            strFieldName = V_Child_Prop.BaseName & "_" & i
                            ActiveDocument.FormFields(strFieldName).Result = V_Child_Prop.nodeTypedValue
                        Next
                    End If
                Next
            End If
        Next
    Else
        MsgBox "Die Importdatei mit den Daten der Vergabestelle ist fehlerhaft." + vbNewLine + "Die Daten k|fffd|nnen deshalb nicht eingelesen werden." + vbNewLine + vbNewLine + "Bitte setzen Sie sich |fffd|ber die Vergabestelle mit dem Anwendungssupport in Verbindung.", vbCritical, "Pr|fffd|fung der Importdatei"
        readXML = False
    End If
    
End Function

Sub Anpassung_Import(Optional bProtect As Boolean = True)

    Call protectFile(False)

    If ActiveDocument.Bookmarks.Exists("VSt01") And ActiveDocument.Bookmarks.Exists("VSt02") And _
       ActiveDocument.Bookmarks.Exists("TM_VSt01") And ActiveDocument.Bookmarks.Exists("TM_VSt02") Then
    
       If Not ActiveDocument.FormFields("VSt01").Result = "" And ActiveDocument.FormFields("VSt02").Result = "" Then
          ActiveDocument.Bookmarks("TM_VSt02").Range.Font.Hidden = True
       ElseIf Not ActiveDocument.FormFields("VSt02").Result = "" And ActiveDocument.FormFields("VSt01").Result = "" Then
          ActiveDocument.Bookmarks("TM_VSt01").Range.Font.Hidden = True
       End If
       
    End If
    
    If ActiveDocument.Bookmarks.Exists("VSt01_1") And ActiveDocument.Bookmarks.Exists("VSt02_1") And _
       ActiveDocument.Bookmarks.Exists("TM_VSt01_1") And ActiveDocument.Bookmarks.Exists("TM_VSt02_1") Then
    
       If Not ActiveDocument.FormFields("VSt01_1").Result = "" And ActiveDocument.FormFields("VSt02_1").Result = "" Then
          ActiveDocument.Bookmarks("TM_VSt02_1").Range.Font.Hidden = True
       ElseIf Not ActiveDocument.FormFields("VSt02_1").Result = "" And ActiveDocument.FormFields("VSt01_1").Result = "" Then
          ActiveDocument.Bookmarks("TM_VSt01_1").Range.Font.Hidden = True
       End If
       
    End If
    
    If bProtect = True Then Call protectFile(True)
     
End Sub

Sub checkBetrieb()  'muss immer als erste Funktion im Modul ausgef|fffd|hrt werden !!

    'Lesen des Wertes vom jeweiligen Feld und Zuordnung zur Variablen (notwendig, um Makros nur bei |fffd|nderung in den Feldinhalten ablaufen zu lassen)
    mBL = ActiveDocument.FormFields("Betrieb_DD").DropDown.Value
    
    'Falls xml-Datei in irgendeinem Laufwerk gefunden wird, wird der Pfad entsprechend gesetzt
    xmlPath = checkLaufwerke
    
    'Pr|fffd|fen ob bereits ein Wert ausgew|fffd|hlt ist oder xml-Datei nicht existiert.
    If ActiveDocument.FormFields("Betrieb_DD").DropDown.Value > 1 Or xmlPath = "" Then Exit Sub
        
    'Pr|fffd|fen ob Wert in xml-Datei vorhanden
    If setBetrieb = False Then
        MsgBox "Die Importdatei mit den Daten der Betriebsart (Land/Bund) ist fehlerhaft." + vbNewLine + "Die Betriebsart kann deshalb nicht eingelesen werden." + vbNewLine + vbNewLine + "Bitte setzen Sie sich |fffd|ber die Vergabestelle mit dem Anwendungssupport in Verbindung.", vbCritical, "Pr|fffd|fung der Importdatei"
        Exit Sub
    End If
    
    Call fcLandBund
    
End Sub

Function setBetrieb() As Boolean
        
    setBetrieb = False
    
    Set msxml = CreateObject("Microsoft.XMLDOM")
    msxml.Load (xmlPath)
    
    Set Root = msxml.DocumentElement
   
    If Not Root Is Nothing Then
        Set ChildNodes = Root.ChildNodes()
        
        For Each v_child In ChildNodes
            If v_child.BaseName = "Vergabestelle" Then
                Set v_child_props = v_child.ChildNodes()
                For Each V_Child_Prop In v_child_props
                    If V_Child_Prop.BaseName = "VSt_isLand" Then
                        mBL = IIf(V_Child_Prop.nodeTypedValue = "true", 2, 3)
                        ActiveDocument.FormFields("Betrieb_DD").DropDown.Value = mBL
                        setBetrieb = True
                        Exit For
                    End If
                Next
                Exit For
            End If
        Next
    End If
    
End Function

Private Function checkLaufwerke() As String

    Dim fso As FileSystemObject
    Dim lw As Drive
       
    checkLaufwerke = ""
    
    Set fso = CreateObject("Scripting.FileSystemObject")
    
    'zuerst auf H:\ nachsehen, wird am h|fffd|ufigsten vorkommen
    If fso.FileExists("H:\" & xmlFile) Then
        checkLaufwerke = "H:\" & xmlFile
    Else
        For Each lw In fso.Drives 'alle Laufwerke
            If lw.DriveType = 1 Or lw.DriveType = 2 Or lw.DriveType = 3 Then    'Lauwerke: entfernbar/lokal/Netz
                If fso.FileExists(lw.Path & "\" & xmlFile) Then
                    checkLaufwerke = lw.Path & "\" & xmlFile
                    Exit For
                End If
            End If
        Next
    End If
    
    Set fso = Nothing
    
End Function



INQUEST-PP=macro
