Attribute VB_Name = "APIRegistryUtil"
Option Explicit
Option Private Module

'version
'   2011-09-07.1

Private Const INVALID_HANDLE_VALUE          As Long = -1
Private Const LVM_FIRST                     As Long = &H1000
Private Const LVM_SETEXTENDEDLISTVIEWSTYLE  As Long = LVM_FIRST + 54
Private Const LVM_GETEXTENDEDLISTVIEWSTYLE  As Long = LVM_FIRST + 55
Private Const LVS_EX_FULLROWSELECT          As Long = &H20
Private Const MAXDWORD                      As Long = &HFFFFFFFF
Private Const MF_ENABLED                    As Long = &H0&
Private Const MF_DISABLED                   As Long = &H2&
Private Const MF_BYPOSITION                 As Long = &H400
Private Const C_USERFORM_CLASSNAME          As String = "ThunderDFrame"
Private Const CF_BITMAP                     As Long = 2
Private Const IMAGE_BITMAP                  As Long = 0
Private Const LR_LOADFROMFILE = &H10
Private Const CF_ENHMETAFILE                As Long = 14
Private Const Master_NamePathSeparator      As String = "-"
'

'---------------------
'utilities: enable
'---------------------

'=============================================================================
'Important Note:
'   We now have a global instance of ApiRegistry accesible via
'   ApiRegistryInstance, therefore, helper functions are no longer needed her.
'   Once you add the member function in ApiRegistry, you can
'   access it directly, using ApiRegistryInstance, where ever it is needed.
'   The functions below were converted for backwards compatibility.
'============================================================================

Public Function ApiRegistryInstance() As ApiRegistry
pushTrace "ApiRegistryInstance", "APIRegistryUtil.bas"
   Static apiReg As ApiRegistry
   If apiReg Is Nothing Then
        Set apiReg = New ApiRegistry
   End If
   Set ApiRegistryInstance = apiReg

   popTrace "ApiRegistryInstance", ApiRegistryInstance
End Function

#If WORD Then
Function IsPowerToolsAvailable() As Boolean
   pushTrace "IsPowerToolsAvailable", "APIRegistryUtil.bas"
    Static bleIs        As Boolean
    
   
    On Error GoTo Catch
    If bleIs = False Then
        
        bleIs = ApiRegistryInstance.IsEnabledForWord And ApiRegistryInstance.IsBBAUserLoggedIn
        If val(Application.Version) = 12 Then
            bleIs = bleIs And ApiRegistryInstance.IsEnabledForWord2007
        End If
    End If
    IsPowerToolsAvailable = bleIs

    popTrace "IsPowerToolsAvailable", IsPowerToolsAvailable
    Exit Function
Catch:
    IsPowerToolsAvailable = False

    popTrace "IsPowerToolsAvailable", IsPowerToolsAvailable
End Function

#Else

Function IsPowerToolsAvailable() As Boolean
    pushTrace "IsPowerToolsAvailable", "APIRegistryUtil.bas"
    Static bleIs        As Boolean
   
    On Error GoTo Catch
    
    If bleIs = False Then
        bleIs = ApiRegistryInstance.IsEnabledForPowerTools And ApiRegistryInstance.IsBBAUserLoggedIn
    End If
    IsPowerToolsAvailable = bleIs

    popTrace "IsPowerToolsAvailable", IsPowerToolsAvailable
    Exit Function
Catch:
    IsPowerToolsAvailable = False

    popTrace "IsPowerToolsAvailable", IsPowerToolsAvailable
End Function

#End If

Public Function isDisabledForOfficeToolsWord() As Boolean
    pushTrace "isDisabledForOfficeToolsWord", "APIRegistryUtil.bas"
    Static bleSet       As Boolean
    Static bleIs        As Boolean
    
   
    On Error GoTo Catch
    If Not bleSet Then
        
        bleIs = ApiRegistryInstance.isDisabledForOfficeToolsWord
        bleSet = True
    End If
    isDisabledForOfficeToolsWord = bleIs
    

    popTrace "isDisabledForOfficeToolsWord", isDisabledForOfficeToolsWord
    Exit Function
Catch:
    isDisabledForOfficeToolsWord = False


    popTrace "isDisabledForOfficeToolsWord", isDisabledForOfficeToolsWord
End Function

Public Function isDisabledForOfficeToolsPPT() As Boolean
    pushTrace "isDisabledForOfficeToolsPPT", "APIRegistryUtil.bas"
    Static bleSet       As Boolean
    Static bleIs        As Boolean
    
   
    On Error GoTo Catch
    If Not bleSet Then
        
        bleIs = ApiRegistryInstance.isDisabledForOfficeToolsPPT
        bleSet = True
    End If
    isDisabledForOfficeToolsPPT = bleIs
    

    popTrace "isDisabledForOfficeToolsPPT", isDisabledForOfficeToolsPPT
    Exit Function
Catch:
    isDisabledForOfficeToolsPPT = False


    popTrace "isDisabledForOfficeToolsPPT", isDisabledForOfficeToolsPPT
End Function

Public Function IsSFMManagerAvailable() As Boolean
    pushTrace "IsSFMManagerAvailable", "APIRegistryUtil.bas"
    Static bleIs        As Boolean
    
    
    On Error GoTo Catch
    If bleIs = False Then
        
        bleIs = ApiRegistryInstance.SFMEnabled
    End If
    IsSFMManagerAvailable = bleIs

    popTrace "IsSFMManagerAvailable", IsSFMManagerAvailable
    Exit Function
Catch:
    IsSFMManagerAvailable = False

    popTrace "IsSFMManagerAvailable", IsSFMManagerAvailable
End Function

Public Function IsTcXlEnabled() As Boolean
    pushTrace "IsTcXlEnabled", "APIRegistryUtil.bas"
   
    Static bleIs        As Boolean
    
    
    On Error GoTo Catch
    If bleIs = False Then
        
        bleIs = ApiRegistryInstance.TcXlEnabled
    End If
    IsTcXlEnabled = bleIs
   

    popTrace "IsTcXlEnabled", IsTcXlEnabled
    Exit Function
Catch:
    IsTcXlEnabled = False
  

    popTrace "IsTcXlEnabled", IsTcXlEnabled
End Function

Public Function IsChartManagerV3Enabled() As Boolean
    pushTrace "IsChartManagerV3Enabled", "APIRegistryUtil.bas"
   
    Static bleIs        As Boolean
    
    
    On Error GoTo Catch
    If bleIs = False Then
        
        bleIs = ApiRegistryInstance.ChartManagerV3Enabled
    End If
    IsChartManagerV3Enabled = bleIs
   

    popTrace "IsChartManagerV3Enabled", IsChartManagerV3Enabled
    Exit Function
Catch:
    IsChartManagerV3Enabled = False
  

    popTrace "IsChartManagerV3Enabled", IsChartManagerV3Enabled
End Function
Public Function NewXllFrameworkEnabled() As Boolean
    pushTrace "NewXllFrameworkEnabled", "APIRegistryUtil.bas"
    Static bleIs        As Boolean
    On Error GoTo Catch
    If bleIs = False Then
        bleIs = ApiRegistryInstance.NewXllFrameworkEnabled
    End If
    NewXllFrameworkEnabled = bleIs

    popTrace "NewXllFrameworkEnabled", NewXllFrameworkEnabled
    Exit Function
Catch:
    NewXllFrameworkEnabled = False

    popTrace "NewXllFrameworkEnabled", NewXllFrameworkEnabled
End Function
Public Function IsChartManagerV4Enabled() As Boolean
    pushTrace "IsChartManagerV4Enabled", "APIRegistryUtil.bas"
   
    Static bleIs        As Boolean
    
    
    On Error GoTo Catch
    If bleIs = False Then
        
        bleIs = ApiRegistryInstance.ChartManagerV4Enabled
    End If
    IsChartManagerV4Enabled = bleIs
   

    popTrace "IsChartManagerV4Enabled", IsChartManagerV4Enabled
    Exit Function
Catch:
    IsChartManagerV4Enabled = False
  

    popTrace "IsChartManagerV4Enabled", IsChartManagerV4Enabled
End Function

Public Function IsDocPublisherAvailable() As Boolean
    pushTrace "IsDocPublisherAvailable", "APIRegistryUtil.bas"
    Static bleIs        As Boolean
    
    
    On Error GoTo Catch
    If bleIs = False Then
        
        bleIs = ApiRegistryInstance.DocPublisherEnabled
    End If
    IsDocPublisherAvailable = bleIs

    popTrace "IsDocPublisherAvailable", IsDocPublisherAvailable
    Exit Function
Catch:
    IsDocPublisherAvailable = False

    popTrace "IsDocPublisherAvailable", IsDocPublisherAvailable
End Function

Function IsEnabledForHotKeys64() As Boolean
    pushTrace "IsEnabledForHotKeys64", "APIRegistryUtil.bas"
    Static bleIs        As Boolean
    
   
    On Error GoTo Catch
    If bleIs = False Then
        
        bleIs = ApiRegistryInstance.IsEnabledForHotKeys64
    End If
    IsEnabledForHotKeys64 = bleIs

    popTrace "IsEnabledForHotKeys64", IsEnabledForHotKeys64
    Exit Function
Catch:
    IsEnabledForHotKeys64 = False

    popTrace "IsEnabledForHotKeys64", IsEnabledForHotKeys64
End Function

Function IsDisabledForPowerPointHotKeys() As Boolean
    pushTrace "IsDisabledForPowerPointHotKeys", "APIRegistryUtil.bas"
    Static bleIs        As Boolean
    
   
    On Error GoTo Catch
    If bleIs = False Then
        
        bleIs = ApiRegistryInstance.IsDisabledForPowerPointHotKeys Or (Not ApiRegistryInstance.IsBBAUserLoggedIn)
        #If Win64 Then
            bleIs = bleIs Or Not ApiRegistryInstance.IsEnabledForHotKeys64
        #End If
    End If
    IsDisabledForPowerPointHotKeys = bleIs

    popTrace "IsDisabledForPowerPointHotKeys", IsDisabledForPowerPointHotKeys
    Exit Function
Catch:
    IsDisabledForPowerPointHotKeys = False

    popTrace "IsDisabledForPowerPointHotKeys", IsDisabledForPowerPointHotKeys
End Function

Public Function IsLinkManagerV2Available() As Boolean
    pushTrace "IsLinkManagerV2Available", "APIRegistryUtil.bas"
    Static bleSet           As Boolean
    Static bleIs            As Boolean
    Dim PreferenceSetting   As Boolean
    
    #If Win64 Then
        IsLinkManagerV2Available = True
    #Else
        On Error GoTo Catch
        If Not bleSet Then
            PreferenceSetting = Nz(MySetting("UseVersion2", "LinkManagerPreferences"), True)
            If PreferenceSetting = True Then
                bleIs = ApiRegistryInstance.IsEnabledForLinkManagerV2
            End If
            bleSet = True
        End If
        
        IsLinkManagerV2Available = bleIs
    #End If
    

    popTrace "IsLinkManagerV2Available", IsLinkManagerV2Available
    Exit Function
Catch:
    IsLinkManagerV2Available = False

    popTrace "IsLinkManagerV2Available", IsLinkManagerV2Available
End Function

Public Function IsLinkManagerV2FilenameHashingEnabled() As Boolean
    pushTrace "IsLinkManagerV2FilenameHashingEnabled", "APIRegistryUtil.bas"
    Static bleSet           As Boolean
    Static bleIs            As Boolean
    
        
    On Error GoTo Catch
    If bleSet = False Then
        
        bleIs = ApiRegistryInstance.IsEnabledForLinkManagerV2FilenameHashing
        bleSet = True
    End If
    IsLinkManagerV2FilenameHashingEnabled = bleIs

    popTrace "IsLinkManagerV2FilenameHashingEnabled", IsLinkManagerV2FilenameHashingEnabled
    Exit Function
Catch:
    IsLinkManagerV2FilenameHashingEnabled = False

    popTrace "IsLinkManagerV2FilenameHashingEnabled", IsLinkManagerV2FilenameHashingEnabled
End Function

Public Function IsLinkManagerV2NewCallToExcelEnabled() As Boolean
    pushTrace "IsLinkManagerV2NewCallToExcelEnabled", "APIRegistryUtil.bas"
    Static bleSet           As Boolean
    Static bleIs            As Boolean
    
            
    On Error GoTo Catch
    If bleSet = False Then
        
        bleIs = ApiRegistryInstance.IsEnabledForLinkManagerV2NewCallToExcel
        bleSet = True
    End If
    IsLinkManagerV2NewCallToExcelEnabled = bleIs

    popTrace "IsLinkManagerV2NewCallToExcelEnabled", IsLinkManagerV2NewCallToExcelEnabled
    Exit Function
Catch:
    IsLinkManagerV2NewCallToExcelEnabled = False

    popTrace "IsLinkManagerV2NewCallToExcelEnabled", IsLinkManagerV2NewCallToExcelEnabled
End Function


Public Function IsLinkManagerV2OptimizedUpdatesEnabled() As Boolean
    pushTrace "IsLinkManagerV2OptimizedUpdatesEnabled", "APIRegistryUtil.bas"
    Static bleSet           As Boolean
    Static bleIs            As Boolean
    
        
    On Error GoTo Catch
    If bleSet = False Then
        
        bleIs = ApiRegistryInstance.IsEnabledForLinkManagerV2OptimizedUpdates
        bleSet = True
    End If
    IsLinkManagerV2OptimizedUpdatesEnabled = bleIs

    popTrace "IsLinkManagerV2OptimizedUpdatesEnabled", IsLinkManagerV2OptimizedUpdatesEnabled
    Exit Function
Catch:
    IsLinkManagerV2OptimizedUpdatesEnabled = False

    popTrace "IsLinkManagerV2OptimizedUpdatesEnabled", IsLinkManagerV2OptimizedUpdatesEnabled
End Function


Public Function IsLinkManagerV2TraceLoggingEnabled() As Boolean
    pushTrace "IsLinkManagerV2TraceLoggingEnabled", "APIRegistryUtil.bas"
    Static bleSet           As Boolean
    Static bleIs            As Boolean
    
        
    On Error GoTo Catch
    If bleSet = False Then
        
        bleIs = ApiRegistryInstance.IsEnabledForLinkManagerV2TraceLogging
        bleSet = True
    End If
    IsLinkManagerV2TraceLoggingEnabled = bleIs

    popTrace "IsLinkManagerV2TraceLoggingEnabled", IsLinkManagerV2TraceLoggingEnabled
    Exit Function
Catch:
    IsLinkManagerV2TraceLoggingEnabled = False

    popTrace "IsLinkManagerV2TraceLoggingEnabled", IsLinkManagerV2TraceLoggingEnabled
End Function


Public Function IsEnabledForLinkManagerV2TransactionLog() As Boolean
    pushTrace "IsEnabledForLinkManagerV2TransactionLog", "APIRegistryUtil.bas"
    Static bleSet           As Boolean
    Static bleIs            As Boolean
    
        
    On Error GoTo Catch
    If bleSet = False Then
        
        bleIs = ApiRegistryInstance.IsEnabledForLinkManagerV2TransactionLog
        bleSet = True
    End If
    IsEnabledForLinkManagerV2TransactionLog = bleIs

    popTrace "IsEnabledForLinkManagerV2TransactionLog", IsEnabledForLinkManagerV2TransactionLog
    Exit Function
Catch:
    IsEnabledForLinkManagerV2TransactionLog = False

    popTrace "IsEnabledForLinkManagerV2TransactionLog", IsEnabledForLinkManagerV2TransactionLog
End Function

Public Function IsActivatedForLinkManagerV2Recording() As Boolean
    pushTrace "IsActivatedForLinkManagerV2Recording", "APIRegistryUtil.bas"
    Static bleSet           As Boolean
    Static bleIs            As Boolean
    
        
    On Error GoTo Catch
    If bleSet = False Then
        
        bleIs = ApiRegistryInstance.IsActivatedForLinkManagerV2Recording
        bleSet = True
    End If
    IsActivatedForLinkManagerV2Recording = bleIs

    popTrace "IsActivatedForLinkManagerV2Recording", IsActivatedForLinkManagerV2Recording
    Exit Function
Catch:
    IsActivatedForLinkManagerV2Recording = False

    popTrace "IsActivatedForLinkManagerV2Recording", IsActivatedForLinkManagerV2Recording
End Function


Public Function IsLinkManagerV2ConvertFromDealMavenEnabled() As Boolean
    pushTrace "IsLinkManagerV2ConvertFromDealMavenEnabled", "APIRegistryUtil.bas"
    Static bleSet           As Boolean
    Static bleIs            As Boolean
    
        
    On Error GoTo Catch
    If bleSet = False Then
        
        bleIs = ApiRegistryInstance.isEnabledForLinkManagerV2ConvertFromDealMaven
        bleSet = True
    End If
    IsLinkManagerV2ConvertFromDealMavenEnabled = bleIs

    popTrace "IsLinkManagerV2ConvertFromDealMavenEnabled", IsLinkManagerV2ConvertFromDealMavenEnabled
    Exit Function
Catch:
    IsLinkManagerV2ConvertFromDealMavenEnabled = False

    popTrace "IsLinkManagerV2ConvertFromDealMavenEnabled", IsLinkManagerV2ConvertFromDealMavenEnabled
End Function


Public Function IsDisabledForMarch2014BetaChanges() As Boolean
    pushTrace "IsDisabledForMarch2014BetaChanges", "APIRegistryUtil.bas"
    Static bleSet           As Boolean
    Static bleIs            As Boolean
    
        
    On Error GoTo Catch
    If bleSet = False Then
        
        bleIs = ApiRegistryInstance.IsDisabledForMarch2014BetaChanges
        bleSet = True
    End If
    IsDisabledForMarch2014BetaChanges = bleIs

    popTrace "IsDisabledForMarch2014BetaChanges", IsDisabledForMarch2014BetaChanges
    Exit Function
Catch:
    IsDisabledForMarch2014BetaChanges = False

    popTrace "IsDisabledForMarch2014BetaChanges", IsDisabledForMarch2014BetaChanges
End Function

Public Function IsDisabledForJune2014BetaChanges() As Boolean
    pushTrace "IsDisabledForJune2014BetaChanges", "APIRegistryUtil.bas"
    Static bleSet           As Boolean
    Static bleIs            As Boolean
    
                
    On Error GoTo Catch
    If bleSet = False Then
        
        bleIs = ApiRegistryInstance.IsDisabledForJune2014BetaChanges
        bleSet = True
    End If
    IsDisabledForJune2014BetaChanges = bleIs

    popTrace "IsDisabledForJune2014BetaChanges", IsDisabledForJune2014BetaChanges
    Exit Function
Catch:
    IsDisabledForJune2014BetaChanges = False

    popTrace "IsDisabledForJune2014BetaChanges", IsDisabledForJune2014BetaChanges
End Function


Public Function IsDisabledForJune2014BetaFireUpdate() As Boolean
    pushTrace "IsDisabledForJune2014BetaFireUpdate", "APIRegistryUtil.bas"
    Static bleSet           As Boolean
    Static bleIs            As Boolean
    
                
    On Error GoTo Catch
    If bleSet = False Then
        
        bleIs = ApiRegistryInstance.IsDisabledForJune2014BetaFireUpdate
        bleSet = True
    End If
    IsDisabledForJune2014BetaFireUpdate = bleIs

    popTrace "IsDisabledForJune2014BetaFireUpdate", IsDisabledForJune2014BetaFireUpdate
    Exit Function
Catch:
    IsDisabledForJune2014BetaFireUpdate = False

    popTrace "IsDisabledForJune2014BetaFireUpdate", IsDisabledForJune2014BetaFireUpdate
End Function
Public Function IsDisabledForJune2014BetaTimerInit() As Boolean
    pushTrace "IsDisabledForJune2014BetaTimerInit", "APIRegistryUtil.bas"
    Static bleSet           As Boolean
    Static bleIs            As Boolean
    
                
    On Error GoTo Catch
    If bleSet = False Then
        
        bleIs = ApiRegistryInstance.IsDisabledForJune2014BetaTimerInit
        bleSet = True
    End If
    IsDisabledForJune2014BetaTimerInit = bleIs

    popTrace "IsDisabledForJune2014BetaTimerInit", IsDisabledForJune2014BetaTimerInit
    Exit Function
Catch:
    IsDisabledForJune2014BetaTimerInit = False

    popTrace "IsDisabledForJune2014BetaTimerInit", IsDisabledForJune2014BetaTimerInit
End Function


Public Function IsDisabledForJune2014BetaAliasCorrection() As Boolean
    pushTrace "IsDisabledForJune2014BetaAliasCorrection", "APIRegistryUtil.bas"
    Static bleSet           As Boolean
    Static bleIs            As Boolean
    
                
    On Error GoTo Catch
    If bleSet = False Then
        
        bleIs = ApiRegistryInstance.IsDisabledForJune2014BetaAliasCorrection
        bleSet = True
    End If
    IsDisabledForJune2014BetaAliasCorrection = bleIs

    popTrace "IsDisabledForJune2014BetaAliasCorrection", IsDisabledForJune2014BetaAliasCorrection
    Exit Function
Catch:
    IsDisabledForJune2014BetaAliasCorrection = False

    popTrace "IsDisabledForJune2014BetaAliasCorrection", IsDisabledForJune2014BetaAliasCorrection
End Function

Public Function IsDisabledForJuly2014BetaAliasCorrection() As Boolean
    pushTrace "IsDisabledForJuly2014BetaAliasCorrection", "APIRegistryUtil.bas"
    Static bleSet           As Boolean
    Static bleIs            As Boolean
    
                
    On Error GoTo Catch
    If bleSet = False Then
        
        bleIs = ApiRegistryInstance.IsDisabledForJuly2014BetaAliasCorrection
        bleSet = True
    End If
    IsDisabledForJuly2014BetaAliasCorrection = bleIs

    popTrace "IsDisabledForJuly2014BetaAliasCorrection", IsDisabledForJuly2014BetaAliasCorrection
    Exit Function
Catch:
    IsDisabledForJuly2014BetaAliasCorrection = False

    popTrace "IsDisabledForJuly2014BetaAliasCorrection", IsDisabledForJuly2014BetaAliasCorrection
End Function


Public Function IsDisabledForJuly2014BetaRotCorrection() As Boolean
    pushTrace "IsDisabledForJuly2014BetaRotCorrection", "APIRegistryUtil.bas"
    Static bleSet           As Boolean
    Static bleIs            As Boolean
    
                
    On Error GoTo Catch
    If bleSet = False Then
        
        bleIs = ApiRegistryInstance.IsDisabledForJuly2014BetaRotCorrection
        bleSet = True
    End If
    IsDisabledForJuly2014BetaRotCorrection = bleIs

    popTrace "IsDisabledForJuly2014BetaRotCorrection", IsDisabledForJuly2014BetaRotCorrection
    Exit Function
Catch:
    IsDisabledForJuly2014BetaRotCorrection = False

    popTrace "IsDisabledForJuly2014BetaRotCorrection", IsDisabledForJuly2014BetaRotCorrection
End Function


Public Function IsDisabledForJune2014BetaReportShapeWithFile() As Boolean
    pushTrace "IsDisabledForJune2014BetaReportShapeWithFile", "APIRegistryUtil.bas"
    Static bleSet           As Boolean
    Static bleIs            As Boolean
    
                
    On Error GoTo Catch
    If bleSet = False Then
        
        bleIs = ApiRegistryInstance.IsDisabledForJune2014BetaReportShapeWithFile
        bleSet = True
    End If
    IsDisabledForJune2014BetaReportShapeWithFile = bleIs

    popTrace "IsDisabledForJune2014BetaReportShapeWithFile", IsDisabledForJune2014BetaReportShapeWithFile
    Exit Function
Catch:
    IsDisabledForJune2014BetaReportShapeWithFile = False

    popTrace "IsDisabledForJune2014BetaReportShapeWithFile", IsDisabledForJune2014BetaReportShapeWithFile
End Function


Public Function IsDisabledForApril2014PostBetaChanges() As Boolean
    pushTrace "IsDisabledForApril2014PostBetaChanges", "APIRegistryUtil.bas"
    Static bleSet           As Boolean
    Static bleIs            As Boolean
    
        
    On Error GoTo Catch
    If bleSet = False Then
        
        bleIs = ApiRegistryInstance.IsDisabledForApril2014PostBetaChanges
        bleSet = True
    End If
    IsDisabledForApril2014PostBetaChanges = bleIs

    popTrace "IsDisabledForApril2014PostBetaChanges", IsDisabledForApril2014PostBetaChanges
    Exit Function
Catch:
    IsDisabledForApril2014PostBetaChanges = False

    popTrace "IsDisabledForApril2014PostBetaChanges", IsDisabledForApril2014PostBetaChanges
End Function

Public Function LinkManagerHideUpdateFromCurrentOption() As Boolean
    pushTrace "LinkManagerHideUpdateFromCurrentOption", "APIRegistryUtil.bas"
    Static bleSet           As Boolean
    Static bleIs            As Boolean
    
        
    On Error GoTo Catch
    If bleSet = False Then
        
        bleIs = ApiRegistryInstance.LinkManagerHideUpdateFromCurrentOption
        bleSet = True
    End If
    LinkManagerHideUpdateFromCurrentOption = bleIs

    popTrace "LinkManagerHideUpdateFromCurrentOption", LinkManagerHideUpdateFromCurrentOption
    Exit Function
Catch:
    LinkManagerHideUpdateFromCurrentOption = False

    popTrace "LinkManagerHideUpdateFromCurrentOption", LinkManagerHideUpdateFromCurrentOption
End Function

Public Function isDisabledForV2ShutdownEvents() As Boolean
    pushTrace "isDisabledForV2ShutdownEvents", "APIRegistryUtil.bas"
    Static bleSet           As Boolean
    Static bleIs            As Boolean
    
        
    On Error GoTo Catch
    If bleSet = False Then
        
        bleIs = ApiRegistryInstance.isDisabledForV2ShutdownEvents
        bleSet = True
    End If
    isDisabledForV2ShutdownEvents = bleIs

    popTrace "isDisabledForV2ShutdownEvents", isDisabledForV2ShutdownEvents
    Exit Function
Catch:
    isDisabledForV2ShutdownEvents = False

    popTrace "isDisabledForV2ShutdownEvents", isDisabledForV2ShutdownEvents
End Function


Public Function isDisabledForEmfCache() As Boolean
    pushTrace "isDisabledForEmfCache", "APIRegistryUtil.bas"
    Static bleSet           As Boolean
    Static bleIs            As Boolean
    
        
    On Error GoTo Catch
    If bleSet = False Then
        
        bleIs = ApiRegistryInstance.isDisabledForEmfCache
        bleSet = True
    End If
    isDisabledForEmfCache = bleIs

    popTrace "isDisabledForEmfCache", isDisabledForEmfCache
    Exit Function
Catch:
    isDisabledForEmfCache = False

    popTrace "isDisabledForEmfCache", isDisabledForEmfCache
End Function


Public Function isDisabledForDRQS47429928() As Boolean
    pushTrace "isDisabledForDRQS47429928", "APIRegistryUtil.bas"
    Static bleSet           As Boolean
    Static bleIs            As Boolean
    
        
    On Error GoTo Catch
    If bleSet = False Then
        
        bleIs = ApiRegistryInstance.isDisabledForDRQS47429928
        bleSet = True
    End If
    isDisabledForDRQS47429928 = bleIs

    popTrace "isDisabledForDRQS47429928", isDisabledForDRQS47429928
    Exit Function
Catch:
    isDisabledForDRQS47429928 = False

    popTrace "isDisabledForDRQS47429928", isDisabledForDRQS47429928
End Function


Public Function isDisabledForDRQS53570384() As Boolean
    pushTrace "isDisabledForDRQS53570384", "APIRegistryUtil.bas"
    Static bleSet           As Boolean
    Static bleIs            As Boolean
    
        
    On Error GoTo Catch
    If bleSet = False Then
        
        bleIs = ApiRegistryInstance.isDisabledForDRQS53570384
        bleSet = True
    End If
    isDisabledForDRQS53570384 = bleIs

    popTrace "isDisabledForDRQS53570384", isDisabledForDRQS53570384
    Exit Function
Catch:
    isDisabledForDRQS53570384 = False

    popTrace "isDisabledForDRQS53570384", isDisabledForDRQS53570384
End Function


Public Function IsStackTraceDisabled() As Boolean
    pushTrace "IsStackTraceDisabled", "APIRegistryUtil.bas"
    Static bleIs        As Boolean
    Static bleSet       As Boolean
    
        
    On Error GoTo Catch
    If bleIs = False And bleSet = False Then
        
        bleIs = ApiRegistryInstance.DisableStackTrace
        bleSet = True
    End If
    IsStackTraceDisabled = bleIs

    popTrace "IsStackTraceDisabled", IsStackTraceDisabled
    Exit Function
Catch:
    IsStackTraceDisabled = False

    popTrace "IsStackTraceDisabled", IsStackTraceDisabled
End Function

Function IsRequiredBBAAndInvalidUser(buttonNode As IXMLDOMNode) As Boolean
    pushTrace "IsRequiredBBAAndInvalidUser", "APIRegistryUtil.bas", buttonNode
    Dim isRequireBBA As Boolean
    
    
    isRequireBBA = GetAttributeText(buttonNode, "requireBBAUser") = "true"
    If isRequireBBA Then
        
        IsRequiredBBAAndInvalidUser = Not ApiRegistryInstance.IsBBAUserLoggedIn
    Else
        IsRequiredBBAAndInvalidUser = False
    End If
    

    popTrace "IsRequiredBBAAndInvalidUser", IsRequiredBBAAndInvalidUser
End Function

Function IsGExcelSvChartsDisabled() As Boolean
    pushTrace "IsGExcelSvChartsDisabled", "APIRegistryUtil.bas"
    
    
    On Error GoTo Catch
    
    IsGExcelSvChartsDisabled = ApiRegistryInstance.DisableGExcelSvCharts

    popTrace "IsGExcelSvChartsDisabled", IsGExcelSvChartsDisabled
    Exit Function
Catch:
    IsGExcelSvChartsDisabled = False

    popTrace "IsGExcelSvChartsDisabled", IsGExcelSvChartsDisabled
End Function

Function IsChartsMemorizeAvailable() As Boolean
    pushTrace "IsChartsMemorizeAvailable", "APIRegistryUtil.bas"
    Static bFirstTimeCalled As Boolean
    Static bResult As Boolean
    
    On Error GoTo Catch
    If bFirstTimeCalled = False Then
            bFirstTimeCalled = True
            
            bResult = ApiRegistryInstance.IsEnabledForChartsMemorize
    End If
    IsChartsMemorizeAvailable = bResult

    popTrace "IsChartsMemorizeAvailable", IsChartsMemorizeAvailable
    Exit Function
Catch:
    IsChartsMemorizeAvailable = False

    popTrace "IsChartsMemorizeAvailable", IsChartsMemorizeAvailable
End Function

Function IsBCurvesAvailable() As Boolean
    pushTrace "IsBCurvesAvailable", "APIRegistryUtil.bas"
    Static bFirstTimeCalled As Boolean
    Static bResult As Boolean
    
    
    On Error GoTo Catch
    If bFirstTimeCalled = False Then
            bFirstTimeCalled = True
            
            bResult = ApiRegistryInstance.IsBCurvesAvailable
    End If
    IsBCurvesAvailable = bResult

    popTrace "IsBCurvesAvailable", IsBCurvesAvailable
    Exit Function
Catch:
    IsBCurvesAvailable = False

    popTrace "IsBCurvesAvailable", IsBCurvesAvailable
End Function

Function IsEnabledForFunctionBuilder() As Boolean
    pushTrace "IsEnabledForFunctionBuilder", "APIRegistryUtil.bas"
    Static bFbFirstTimeCalled As Boolean
    Static bFbResult As Boolean
    
    
    On Error GoTo Catch
    If bFbFirstTimeCalled = False Then
            bFbFirstTimeCalled = True
            
            bFbResult = ApiRegistryInstance.IsEnabledForFunctionBuilder
    End If
    IsEnabledForFunctionBuilder = bFbResult

    popTrace "IsEnabledForFunctionBuilder", IsEnabledForFunctionBuilder
    Exit Function
Catch:
    IsEnabledForFunctionBuilder = False

    popTrace "IsEnabledForFunctionBuilder", IsEnabledForFunctionBuilder
End Function

Function IsEnabledForFunctionBuilderNoResize() As Boolean
    pushTrace "IsEnabledForFunctionBuilderNoResize", "APIRegistryUtil.bas"
    Static bFbFirstTimeCalled As Boolean
    Static bFbResult As Boolean
    
    
    On Error GoTo Catch
    If bFbFirstTimeCalled = False Then
            bFbFirstTimeCalled = True
            
            bFbResult = ApiRegistryInstance.IsEnabledForFunctionBuilderNoResize
    End If
    IsEnabledForFunctionBuilderNoResize = bFbResult

    popTrace "IsEnabledForFunctionBuilderNoResize", IsEnabledForFunctionBuilderNoResize
    Exit Function
Catch:
    IsEnabledForFunctionBuilderNoResize = False

    popTrace "IsEnabledForFunctionBuilderNoResize", IsEnabledForFunctionBuilderNoResize
End Function

Function IsEnabledForBloombergAnswers() As Boolean
    pushTrace "IsEnabledForBloombergAnswers", "APIRegistryUtil.bas"
    Static bFbFirstTimeCalled As Boolean
    Static bFbResult As Boolean
    
    On Error GoTo Catch
    If bFbFirstTimeCalled = False Then
        bFbFirstTimeCalled = True
        bFbResult = ApiRegistryInstance.IsEnabledForBloombergAnswers
    End If
        
    IsEnabledForBloombergAnswers = bFbResult

    popTrace "IsEnabledForBloombergAnswers", IsEnabledForBloombergAnswers
    Exit Function
Catch:
    IsEnabledForBloombergAnswers = False

    popTrace "IsEnabledForBloombergAnswers", IsEnabledForBloombergAnswers
End Function

Function IsAlternateCookieRetrievalDisabled() As Boolean
    pushTrace "IsAlternateCookieRetrievalDisabled", "APIRegistryUtil.bas"
    Static bleIs        As Boolean
    
   
    On Error GoTo Catch
    If bleIs = False Then
        
        bleIs = ApiRegistryInstance.IsDisabledForAlternateCookieRetrieval
    End If
    IsAlternateCookieRetrievalDisabled = bleIs

    popTrace "IsAlternateCookieRetrievalDisabled", IsAlternateCookieRetrievalDisabled
    Exit Function
Catch:
    IsAlternateCookieRetrievalDisabled = False

    popTrace "IsAlternateCookieRetrievalDisabled", IsAlternateCookieRetrievalDisabled
End Function

Function UseOldTransparencyService() As Boolean
    pushTrace "UseOldTransparencyService", "APIRegistryUtil.bas"
    
    
    On Error GoTo Catch
    
    UseOldTransparencyService = ApiRegistryInstance.UseOldService

    popTrace "UseOldTransparencyService", UseOldTransparencyService
    Exit Function
Catch:
    UseOldTransparencyService = True

    popTrace "UseOldTransparencyService", UseOldTransparencyService
End Function

Function IsEnabledForSingleDate() As Boolean
    pushTrace "IsEnabledForSingleDate", "APIRegistryUtil.bas"
    Static checkedValue As Boolean
    Static isEnabled    As Boolean
    
   
    On Error GoTo Catch
    If checkedValue = False Then
        
        isEnabled = ApiRegistryInstance.IsEnabledForSingleDate
        checkedValue = True
    End If
    IsEnabledForSingleDate = isEnabled

    popTrace "IsEnabledForSingleDate", IsEnabledForSingleDate
    Exit Function
Catch:
    IsEnabledForSingleDate = False

    popTrace "IsEnabledForSingleDate", IsEnabledForSingleDate
End Function

Function IsEnabledForRangeSetDirty() As Boolean
    pushTrace "IsEnabledForRangeSetDirty", "APIRegistryUtil.bas"
    Static checkedValue As Boolean
    Static isEnabled    As Boolean
    
   
    On Error GoTo Catch
    If checkedValue = False Then
        
        isEnabled = ApiRegistryInstance.IsEnabledForRangeSetDirty
        checkedValue = True
    End If
    IsEnabledForRangeSetDirty = isEnabled

    popTrace "IsEnabledForRangeSetDirty", IsEnabledForRangeSetDirty
    Exit Function
Catch:
    IsEnabledForRangeSetDirty = False

    popTrace "IsEnabledForRangeSetDirty", IsEnabledForRangeSetDirty
End Function

Function IsDisabledForWordHotKeys() As Boolean
    pushTrace "IsDisabledForWordHotKeys", "APIRegistryUtil.bas"
    Static bleIs        As Boolean
    
   
    On Error GoTo Catch
    If bleIs = False Then
        
        bleIs = ApiRegistryInstance.IsDisabledForWordHotKeys Or (Not ApiRegistryInstance.IsBBAUserLoggedIn)
        #If Win64 Then
            bleIs = bleIs Or Not ApiRegistryInstance.IsEnabledForHotKeys64
        #End If
    End If
    IsDisabledForWordHotKeys = bleIs

    popTrace "IsDisabledForWordHotKeys", IsDisabledForWordHotKeys
    Exit Function
Catch:
    IsDisabledForWordHotKeys = False

    popTrace "IsDisabledForWordHotKeys", IsDisabledForWordHotKeys
End Function


Public Function IsInsertSectionAvailable() As Boolean
    pushTrace "IsInsertSectionAvailable", "APIRegistryUtil.bas"
    Static bleIs        As Boolean
    
    
    On Error GoTo Catch
    If bleIs = False Then
        
        bleIs = ApiRegistryInstance.IsInsertSectionAvailable
    End If
    IsInsertSectionAvailable = bleIs

    popTrace "IsInsertSectionAvailable", IsInsertSectionAvailable
    Exit Function
Catch:
    IsInsertSectionAvailable = False

    popTrace "IsInsertSectionAvailable", IsInsertSectionAvailable
End Function


#If WORD Then
'CODECONVSHP
Public Function IsFloatingShapeSupportEnabled() As Boolean
    pushTrace "IsFloatingShapeSupportEnabled", "APIRegistryUtil.bas"
    Static bleIs        As Boolean
    
    
    On Error GoTo Catch
    If bleIs = False Then
        
'CODECONVSHP3
        bleIs = ApiRegistryInstance.IsFloatingShapeSupportEnabled
    End If
    IsFloatingShapeSupportEnabled = bleIs

    popTrace "IsFloatingShapeSupportEnabled", IsFloatingShapeSupportEnabled
    Exit Function
Catch:
    IsFloatingShapeSupportEnabled = False

    popTrace "IsFloatingShapeSupportEnabled", IsFloatingShapeSupportEnabled
End Function
#End If

Public Function IsNewDocumentAvailable() As Boolean
    pushTrace "IsNewDocumentAvailable", "APIRegistryUtil.bas"
    Static bleIs        As Boolean
    
    
    On Error GoTo Catch
    If bleIs = False Then
        
        bleIs = ApiRegistryInstance.IsNewDocumentAvailable
    End If
    IsNewDocumentAvailable = bleIs

    popTrace "IsNewDocumentAvailable", IsNewDocumentAvailable
    Exit Function
Catch:
    IsNewDocumentAvailable = False

    popTrace "IsNewDocumentAvailable", IsNewDocumentAvailable
End Function

Public Function IsEnabledForHotkeysApi() As Boolean
    pushTrace "IsEnabledForHotkeysApi", "APIRegistryUtil.bas"
    Static bleIs        As Boolean
    
    
    On Error GoTo Catch
    If bleIs = False Then
        
        bleIs = ApiRegistryInstance.IsEnabledForHotkeysApi
    End If
    IsEnabledForHotkeysApi = bleIs

    popTrace "IsEnabledForHotkeysApi", IsEnabledForHotkeysApi
    Exit Function
Catch:
    IsEnabledForHotkeysApi = False

    popTrace "IsEnabledForHotkeysApi", IsEnabledForHotkeysApi
End Function

Function IsDisabledSessionOptionsDisplay() As Boolean
    pushTrace "IsDisabledSessionOptionsDisplay", "APIRegistryUtil.bas"
    
    
    On Error GoTo Catch
    
    IsDisabledSessionOptionsDisplay = ApiRegistryInstance.DisableSessionOptionsDisplay

    popTrace "IsDisabledSessionOptionsDisplay", IsDisabledSessionOptionsDisplay
    Exit Function
Catch:
    IsDisabledSessionOptionsDisplay = False

    popTrace "IsDisabledSessionOptionsDisplay", IsDisabledSessionOptionsDisplay
End Function
Public Function IsDisabledForOct2014EditPasteChanges() As Boolean
    pushTrace "IsDisabledForOct2014EditPasteChanges", "APIRegistryUtil.bas"
'EDITPASTE-MULTISELECTCOPYPASTE-TEXTBOXWITHDDLINKS-ENABLED
    Static bleSet           As Boolean
    Static bleIs            As Boolean
    
                
    On Error GoTo Catch
    If bleSet = False Then
        
        bleIs = ApiRegistryInstance.IsDisabledForOct2014EditPasteChanges
        bleSet = True
    End If
    IsDisabledForOct2014EditPasteChanges = bleIs

    popTrace "IsDisabledForOct2014EditPasteChanges", IsDisabledForOct2014EditPasteChanges
    Exit Function
Catch:
    IsDisabledForOct2014EditPasteChanges = False

    popTrace "IsDisabledForOct2014EditPasteChanges", IsDisabledForOct2014EditPasteChanges
End Function
Public Function IsDisabledForDec2014EditPasteChanges() As Boolean
    pushTrace "IsDisabledForDec2014EditPasteChanges", "APIRegistryUtil.bas"
'EDITPASTE-REWRITE-AND-SUPPORT_FLOATINGSHAPE_COPYPASTE_TO_OTHERDOCS
    Static bleSet           As Boolean
    Static bleIs            As Boolean
    
                
    On Error GoTo Catch
    If bleSet = False Then
        
        bleIs = ApiRegistryInstance.IsDisabledForDec2014EditPasteChanges
        bleSet = True
    End If
    IsDisabledForDec2014EditPasteChanges = bleIs

    popTrace "IsDisabledForDec2014EditPasteChanges", IsDisabledForDec2014EditPasteChanges
    Exit Function
Catch:
    IsDisabledForDec2014EditPasteChanges = False

    popTrace "IsDisabledForDec2014EditPasteChanges", IsDisabledForDec2014EditPasteChanges
End Function

Public Function IsDisabledForMeteringPopulateTable() As Boolean
    pushTrace "IsDisabledForMeteringPopulateTable", "APIRegistryUtil.bas"
    Static bleSet As Boolean
    Static bleIs As Boolean


    On Error GoTo Catch
    If bleSet = False Then

        bleIs = ApiRegistryInstance.IsDisabledForMeteringPopulateTable
        bleSet = True
    End If
    IsDisabledForMeteringPopulateTable = bleIs

    popTrace "IsDisabledForMeteringPopulateTable", IsDisabledForMeteringPopulateTable
    Exit Function
Catch:
        IsDisabledForMeteringPopulateTable = False

        popTrace "IsDisabledForMeteringPopulateTable", IsDisabledForMeteringPopulateTable
End Function

Public Function IsEnabledForBulkReplaceWebView() As Boolean
        pushTrace "IsEnabledForBulkReplaceWebView", "APIRegistryUtil.bas"
    Static bleSet As Boolean
    Static bleIs As Boolean


    On Error GoTo Catch
    If bleSet = False Then

        bleIs = ApiRegistryInstance.IsEnabledForBulkReplaceWebView
        bleSet = True
    End If
    IsEnabledForBulkReplaceWebView = bleIs

    popTrace "IsEnabledForBulkReplaceWebView", IsEnabledForBulkReplaceWebView
    Exit Function
Catch:
        IsEnabledForBulkReplaceWebView = False

        popTrace "IsEnabledForBulkReplaceWebView", IsEnabledForBulkReplaceWebView
End Function


Public Function IsEnabledForSpreadsheetBuilder() As Boolean
        pushTrace "IsEnabledForSpreadsheetBuilder", "APIRegistryUtil.bas"
    Static bleSet As Boolean
    Static bleIs As Boolean


    On Error GoTo Catch
    If bleSet = False Then

        bleIs = ApiRegistryInstance.IsEnabledForSpreadsheetBuilder
        bleSet = True
    End If
    IsEnabledForSpreadsheetBuilder = bleIs

    popTrace "IsEnabledForSpreadsheetBuilder", IsEnabledForSpreadsheetBuilder
    Exit Function
Catch:
        IsEnabledForSpreadsheetBuilder = False

        popTrace "IsEnabledForSpreadsheetBuilder", IsEnabledForSpreadsheetBuilder
End Function

Public Function IsDisabledForWorksheetRefreshV3() As Boolean
        pushTrace "IsDisabledForWorksheetRefreshV3", "APIRegistryUtil.bas"
    Static bleSet As Boolean
    Static bleIs As Boolean
    On Error GoTo Catch

    If bleSet = False Then
        bleIs = ApiRegistryInstance.IsDisabledForWorksheetRefreshV3
        bleSet = True
    End If
    IsDisabledForWorksheetRefreshV3 = bleIs

    popTrace "IsDisabledForWorksheetRefreshV3", IsDisabledForWorksheetRefreshV3
    Exit Function
Catch:
        IsDisabledForWorksheetRefreshV3 = False

        popTrace "IsDisabledForWorksheetRefreshV3", IsDisabledForWorksheetRefreshV3
End Function

Public Function DoExcelCalculateForRefreshInManualMode() As Boolean
        pushTrace "DoExcelCalculateForRefreshInManualMode", "APIRegistryUtil.bas"
    Static bleSet As Boolean
    Static bleIs As Boolean
    
    On Error GoTo Catch
    If bleSet = False Then
        bleIs = ApiRegistryInstance.DoExcelCalculateForRefreshInManualMode
        bleSet = True
    End If
    DoExcelCalculateForRefreshInManualMode = bleIs

    popTrace "DoExcelCalculateForRefreshInManualMode", DoExcelCalculateForRefreshInManualMode
    Exit Function
Catch:
    DoExcelCalculateForRefreshInManualMode = False

    popTrace "DoExcelCalculateForRefreshInManualMode", DoExcelCalculateForRefreshInManualMode
End Function

Public Function DoExcelCalculateForRefireInManualMode() As Boolean
    pushTrace "DoExcelCalculateForRefireInManualMode", "APIRegistryUtil.bas"
    Static bleSet As Boolean
    Static bleIs As Boolean
    
    On Error GoTo Catch
    If bleSet = False Then
        bleIs = ApiRegistryInstance.DoExcelCalculateForRefireInManualMode
        bleSet = True
    End If
    DoExcelCalculateForRefireInManualMode = bleIs

    popTrace "DoExcelCalculateForRefireInManualMode", DoExcelCalculateForRefireInManualMode
    Exit Function
Catch:
    DoExcelCalculateForRefireInManualMode = False

    popTrace "DoExcelCalculateForRefireInManualMode", DoExcelCalculateForRefireInManualMode
End Function

Public Function IsBxlaRtdDeprecated() As Boolean
    pushTrace "IsBxlaRtdDeprecated", "APIRegistryUtil.bas"
    ApiRegistryInstance.GetValue "OFCUI", "IS_BXLARTD_DEPRECATED", IsBxlaRtdDeprecated

    popTrace "IsBxlaRtdDeprecated", IsBxlaRtdDeprecated
End Function

Public Function IsDisabledForC2RMetering() As Boolean
    pushTrace "IsDisabledForC2RMetering", "APIRegistryUtil.bas"
    ApiRegistryInstance.GetValue "OFCUI", "IS_DISABLED_C2R_METERING", IsDisabledForC2RMetering

    popTrace "IsDisabledForC2RMetering", IsDisabledForC2RMetering
End Function

Public Function IsDisabledForCppMetering() As Boolean
    pushTrace "IsDisabledForCppMetering", "APIRegistryUtil.bas"
    ApiRegistryInstance.GetValue "OFCUI", "IS_DISABLED_FOR_CPP_METERING", IsDisabledForCppMetering

    popTrace "IsDisabledForCppMetering", IsDisabledForCppMetering
End Function

Public Function IsDisabledForDrqs97848344() As Boolean
    pushTrace "IsDisabledForDrqs97848344", "APIRegistryUtil.bas"
    Static Drqs97848344Set As Boolean
    Static Drqs97848344Is As Boolean
    
    On Error GoTo Catch
    If Drqs97848344Set = False Then
        Drqs97848344Is = ApiRegistryInstance.IsDisabledForDrqs97848344()
        Drqs97848344Set = True
    End If
    IsDisabledForDrqs97848344 = Drqs97848344Is

    popTrace "IsDisabledForDrqs97848344", IsDisabledForDrqs97848344
    Exit Function
Catch:
    IsDisabledForDrqs97848344 = False

    popTrace "IsDisabledForDrqs97848344", IsDisabledForDrqs97848344
End Function


Public Function IsSSEOMSLocalizedSeparatorEnabled() As Boolean
    pushTrace "IsSSEOMSLocalizedSeparatorEnabled", "APIRegistryUtil.bas"
    ApiRegistryInstance.GetValue "SSEOMS", "IS_SSEOMS_LOCALIZED_SEPARATOR_ENABLED", IsSSEOMSLocalizedSeparatorEnabled

    popTrace "IsSSEOMSLocalizedSeparatorEnabled", IsSSEOMSLocalizedSeparatorEnabled
End Function


Public Function IsSSEOMSSSEExecScopeReduced() As Boolean
    pushTrace "IsSSEOMSSSEExecScopeReduced", "APIRegistryUtil.bas"
    ApiRegistryInstance.GetValue "SSEOMS", "IS_SSEOMS_SSEEXEC_SCOPE_REDUCED", IsSSEOMSSSEExecScopeReduced

    popTrace "IsSSEOMSSSEExecScopeReduced", IsSSEOMSSSEExecScopeReduced
End Function

Public Function IsDisabledForCellShiftFix() As Boolean
    pushTrace "IsDisabledForCellShiftFix", "APIRegistryUtil.bas"
    ApiRegistryInstance.GetValue "OFCDATA", "IS_DISABLED_FOR_CELL_SHIFT_FIX", IsDisabledForCellShiftFix

    popTrace "IsDisabledForCellShiftFix", IsDisabledForCellShiftFix
End Function

Public Function IsDisabledForProtectedSheetFix() As Boolean
    pushTrace "IsDisabledForProtectedSheetFix", "APIRegistryUtil.bas"
    ApiRegistryInstance.GetValue "OFCDATA", "IS_DISABLED_FOR_PROTECTED_SHEET_FIX", IsDisabledForProtectedSheetFix

    popTrace "IsDisabledForProtectedSheetFix", IsDisabledForProtectedSheetFix
End Function

Public Function IsWorkbookSizeTypeMeteringDisabled() As Boolean
    pushTrace "IsWorkbookSizeTypeMeteringDisabled", "APIRegistryUtil.bas"
    Static bleSet As Boolean
    Static bleIs As Boolean

    On Error GoTo Catch
    If bleSet = False Then
        bleIs = ApiRegistryInstance.IsWorkbookSizeTypeMeteringDisabled
        bleSet = True
    End If
    IsWorkbookSizeTypeMeteringDisabled = bleIs

    popTrace "IsWorkbookSizeTypeMeteringDisabled", IsWorkbookSizeTypeMeteringDisabled
    Exit Function
Catch:
    IsWorkbookSizeTypeMeteringDisabled = False

    popTrace "IsWorkbookSizeTypeMeteringDisabled", IsWorkbookSizeTypeMeteringDisabled
End Function
Attribute VB_Name = "ApiRegistry"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

#If VBA7 Then
Private Declare PtrSafe Function BOFAPIREG_GetKey Lib "bofaddin.dll" (ByVal section As String, ByVal key As String, ByRef value As Variant) As Long
#Else
Private Declare Function BOFAPIREG_GetKey Lib "bofaddin.dll" (ByVal section As String, ByVal key As String, ByRef value As Variant) As Long
#End If
'''
Private Const Msk As Long = &H10101010
Dim Lookup As Object

Private Sub Class_Initialize()
  pushTrace "Class_Initialize", "ApiRegistry.cls"
  
    Dim bofAddinLibLoaded As Boolean
    loadBofAddin bofAddinLibLoaded

    If bofAddinLibLoaded = True Then
    Else
#If Not LOADER = 1 Then
        Log_BBPTEvent "ApiRegistry", "Unable to load bofaddin.dll"
        BofApiRegFailed
#End If
    End If
    
    popTrace "Class_Initialize"
End Sub

Private Sub Class_Terminate()
    pushTrace "Class_Terminate", "ApiRegistry.cls"
    Set Lookup = Nothing
    popTrace "Class_Terminate"
End Sub

Private Function GetValueString(section As String, key As String) As String
    pushTrace "GetValueString", "ApiRegistry.cls", section, key
    
    GetValueString = ""

On Error GoTo FunctionEnd

    Dim variantVal As Variant
    If BOFAPIREG_GetKey(section, key, variantVal) = 0 Then
        GetValueString = CStr(variantVal)
    End If
   
FunctionEnd:


    popTrace "GetValueString", GetValueString
End Function

Public Sub GetValue(section As String, key As String, ByRef value As Boolean)
    pushTrace "GetValue", "ApiRegistry.cls", section, key, value
    
    Dim strValue As String
    strValue = ""

On Error GoTo FunctionEnd

    strValue = GetValueString(section, key)
    
    If strValue <> "" Then
        value = CBool(strValue)
    End If
   
FunctionEnd:
    popTrace "GetValue"
End Sub

Private Function UseOldApiRegistry() As Boolean
    pushTrace "UseOldApiRegistry", "ApiRegistry.cls"
    Dim strValue As String
    
    UseOldApiRegistry = False
   
On Error GoTo FunctionEnd

    GetValue "OFCUI", "USE_OLD_APIREGISTRY", UseOldApiRegistry
   
FunctionEnd:

    popTrace "UseOldApiRegistry", UseOldApiRegistry
End Function

Public Function IsEnabledForLogger() As Boolean
    pushTrace "IsEnabledForLogger", "ApiRegistry.cls"
   
   IsEnabledForLogger = False
   
On Error GoTo FunctionEnd

   GetValue "OFC", "IS_LOGGER_ENABLED", IsEnabledForLogger
   
FunctionEnd:

   popTrace "IsEnabledForLogger", IsEnabledForLogger
End Function
Public Function IsEnabledForEMSX() As Boolean
   pushTrace "IsEnabledForEMSX", "ApiRegistry.cls"
   
   IsEnabledForEMSX = False
   
On Error GoTo FunctionEnd

   GetValue "EMSX", "IsEnabledForOrderBuilder", IsEnabledForEMSX
   
FunctionEnd:

   popTrace "IsEnabledForEMSX", IsEnabledForEMSX
End Function

Public Function IsEnabledForSSEOMS() As Boolean
   pushTrace "IsEnabledForSSEOMS", "ApiRegistry.cls"
   
   IsEnabledForSSEOMS = False
   
On Error GoTo FunctionEnd

   GetValue "SSEOMS", "IsEnabledForOrderBuilder", IsEnabledForSSEOMS
   
FunctionEnd:

   popTrace "IsEnabledForSSEOMS", IsEnabledForSSEOMS
End Function

Public Function DisableGExcelSvCharts() As Boolean
   pushTrace "DisableGExcelSvCharts", "ApiRegistry.cls"
   
   DisableGExcelSvCharts = False
   
On Error GoTo FunctionEnd

   GetValue "Charts", "DisableGExcelSvCharts", DisableGExcelSvCharts
   
FunctionEnd:


   popTrace "DisableGExcelSvCharts", DisableGExcelSvCharts
End Function


Public Function IsEnabledForChartsMemorize() As Boolean
   pushTrace "IsEnabledForChartsMemorize", "ApiRegistry.cls"
   
   IsEnabledForChartsMemorize = False
   
On Error GoTo FunctionEnd

   GetValue "PowerTools", "ISENABLEDFORCHARTSMEMORIZE", IsEnabledForChartsMemorize
   
FunctionEnd:

   popTrace "IsEnabledForChartsMemorize", IsEnabledForChartsMemorize
End Function

Public Function IsBCurvesAvailable() As Boolean
   pushTrace "IsBCurvesAvailable", "ApiRegistry.cls"
   
   IsBCurvesAvailable = False
   
On Error GoTo FunctionEnd

   GetValue "BBRTD", "ISENABLEDFORCURVES", IsBCurvesAvailable
   
FunctionEnd:

   popTrace "IsBCurvesAvailable", IsBCurvesAvailable
End Function

Public Function IsCurvesV3() As Boolean
   pushTrace "IsCurvesV3", "ApiRegistry.cls"
   
   IsCurvesV3 = False
   
On Error GoTo FunctionEnd

   GetValue "BBRTD", "USECURVESTOOLKITSCHEMAV3", IsCurvesV3
   
FunctionEnd:

   popTrace "IsCurvesV3", IsCurvesV3
End Function

Public Function IsEnabledForPowerTools() As Boolean
   pushTrace "IsEnabledForPowerTools", "ApiRegistry.cls"
   
    IsEnabledForPowerTools = False
   
On Error GoTo FunctionEnd

    GetValue "PowerTools", "IsEnabledForPowerTools", IsEnabledForPowerTools

FunctionEnd:


    popTrace "IsEnabledForPowerTools", IsEnabledForPowerTools
End Function

Public Function isDisabledForOfficeToolsWord() As Boolean
    pushTrace "isDisabledForOfficeToolsWord", "ApiRegistry.cls"

    isDisabledForOfficeToolsWord = False

On Error GoTo FunctionEnd

    GetValue "OFC", "isDisabledForOfficeToolsWord", isDisabledForOfficeToolsWord

FunctionEnd:


    popTrace "isDisabledForOfficeToolsWord", isDisabledForOfficeToolsWord
End Function


Public Function isDisabledForOfficeToolsPPT() As Boolean
    pushTrace "isDisabledForOfficeToolsPPT", "ApiRegistry.cls"

    isDisabledForOfficeToolsPPT = False

On Error GoTo FunctionEnd

    GetValue "OFC", "isDisabledForOfficeToolsPPT", isDisabledForOfficeToolsPPT

FunctionEnd:


    popTrace "isDisabledForOfficeToolsPPT", isDisabledForOfficeToolsPPT
End Function



Public Function IsBBAUserLoggedIn() As Boolean
    pushTrace "IsBBAUserLoggedIn", "ApiRegistry.cls"
                            
    Dim varUUID     As Variant
    Dim varConfig   As Variant
    Dim lngOn       As Long
    Dim strValue    As String
    
    varUUID = GetValueString("USER_INFO", "UUID")
    varConfig = GetValueString("USER_INFO", "CONFIG")
    
    If IsNumeric(varConfig) = True And IsNumeric(varUUID) = True Then
        lngOn = varUUID Or Msk Or 1
        IsBBAUserLoggedIn = (lngOn = CLng(varConfig))
    ElseIf Len(Nz(varConfig, "")) = 0 And Len(Nz(varUUID, "")) = 0 Then
        IsBBAUserLoggedIn = False
    End If
    'START--Added as per DRQS 58665618, to create a switch that disables the BBA check for PowerTools
    If Not IsBBAUserLoggedIn Then
        GetValue "PowerTools", "DisableBBACheck", IsBBAUserLoggedIn
    End If
    'END--Added as per DRQS 58665618
    

    popTrace "IsBBAUserLoggedIn", IsBBAUserLoggedIn
End Function

Public Function NewXllFrameworkEnabled() As Boolean
    pushTrace "NewXllFrameworkEnabled", "ApiRegistry.cls"

  NewXllFrameworkEnabled = False
  
On Error GoTo FunctionEnd

   GetValue "OFCUI", "NEW_XLL_FRAMEWORK_ENABLED_JAN2017", NewXllFrameworkEnabled
   
FunctionEnd:


   popTrace "NewXllFrameworkEnabled", NewXllFrameworkEnabled
End Function
Public Function ChartManagerV3Enabled() As Boolean
   pushTrace "ChartManagerV3Enabled", "ApiRegistry.cls"

  ChartManagerV3Enabled = False
  
On Error GoTo FunctionEnd

   GetValue "OFCUI", "IS_CHARTMANAGERV3_ENABLED", ChartManagerV3Enabled
   
FunctionEnd:


   popTrace "ChartManagerV3Enabled", ChartManagerV3Enabled
End Function

Public Function TcXlEnabled() As Boolean
   pushTrace "TcXlEnabled", "ApiRegistry.cls"

  TcXlEnabled = False
  
On Error GoTo FunctionEnd

   GetValue "CHARTS", "IS_ENABLED_TCXL_APR18", TcXlEnabled
   
FunctionEnd:


   popTrace "TcXlEnabled", TcXlEnabled
End Function
Public Function ChartManagerV4Enabled() As Boolean
   pushTrace "ChartManagerV4Enabled", "ApiRegistry.cls"

  ChartManagerV4Enabled = False
  
On Error GoTo FunctionEnd

   GetValue "OFCUI", "IS_CHARTMANAGERV4_ENABLED", ChartManagerV4Enabled
   
FunctionEnd:


   popTrace "ChartManagerV4Enabled", ChartManagerV4Enabled
End Function

Public Function IsEnabledForLinkManagerV2() As Boolean
   pushTrace "IsEnabledForLinkManagerV2", "ApiRegistry.cls"

   IsEnabledForLinkManagerV2 = False
   
On Error GoTo FunctionEnd

   GetValue "LinkManager", "IsEnabledForV2", IsEnabledForLinkManagerV2
   
FunctionEnd:


   popTrace "IsEnabledForLinkManagerV2", IsEnabledForLinkManagerV2
End Function

Public Function IsEnabledForLinkManagerV2FilenameHashing() As Boolean
   pushTrace "IsEnabledForLinkManagerV2FilenameHashing", "ApiRegistry.cls"

    IsEnabledForLinkManagerV2FilenameHashing = False
   
On Error GoTo FunctionEnd

    GetValue "LinkManager", "EnableFilenameHashing", IsEnabledForLinkManagerV2FilenameHashing
   
FunctionEnd:


    popTrace "IsEnabledForLinkManagerV2FilenameHashing", IsEnabledForLinkManagerV2FilenameHashing
End Function

Public Function IsEnabledForLinkManagerV2NewCallToExcel() As Boolean
    pushTrace "IsEnabledForLinkManagerV2NewCallToExcel", "ApiRegistry.cls"
    
    IsEnabledForLinkManagerV2NewCallToExcel = False
   
On Error GoTo FunctionEnd

    GetValue "LinkManager", "EnableNewCallToExcel", IsEnabledForLinkManagerV2NewCallToExcel
   
FunctionEnd:


    popTrace "IsEnabledForLinkManagerV2NewCallToExcel", IsEnabledForLinkManagerV2NewCallToExcel
End Function

Public Function IsEnabledForLinkManagerV2OptimizedUpdates() As Boolean
    pushTrace "IsEnabledForLinkManagerV2OptimizedUpdates", "ApiRegistry.cls"

    IsEnabledForLinkManagerV2OptimizedUpdates = False
   
On Error GoTo FunctionEnd

    GetValue "LinkManager", "EnableOptimizedUpdates", IsEnabledForLinkManagerV2OptimizedUpdates
   
FunctionEnd:


    popTrace "IsEnabledForLinkManagerV2OptimizedUpdates", IsEnabledForLinkManagerV2OptimizedUpdates
End Function

Public Function IsEnabledForLinkManagerV2TraceLogging() As Boolean
    pushTrace "IsEnabledForLinkManagerV2TraceLogging", "ApiRegistry.cls"

    IsEnabledForLinkManagerV2TraceLogging = False
   
On Error GoTo FunctionEnd

    GetValue "LinkManager", "EnableTraceLogging", IsEnabledForLinkManagerV2TraceLogging
   
FunctionEnd:


    popTrace "IsEnabledForLinkManagerV2TraceLogging", IsEnabledForLinkManagerV2TraceLogging
End Function

Public Function IsEnabledForLinkManagerV2TransactionLog() As Boolean
    pushTrace "IsEnabledForLinkManagerV2TransactionLog", "ApiRegistry.cls"

    IsEnabledForLinkManagerV2TransactionLog = False
   
On Error GoTo FunctionEnd

    GetValue "LinkManager", "IsEnabledForLinkManagerV2TransactionLog", IsEnabledForLinkManagerV2TransactionLog
   
FunctionEnd:


    popTrace "IsEnabledForLinkManagerV2TransactionLog", IsEnabledForLinkManagerV2TransactionLog
End Function


Public Function isEnabledForLinkManagerV2ConvertFromDealMaven() As Boolean
    pushTrace "isEnabledForLinkManagerV2ConvertFromDealMaven", "ApiRegistry.cls"

    isEnabledForLinkManagerV2ConvertFromDealMaven = False
   
On Error GoTo FunctionEnd

    GetValue "LinkManager", "EnableConvertFromDealMaven", isEnabledForLinkManagerV2ConvertFromDealMaven
   
FunctionEnd:


    popTrace "isEnabledForLinkManagerV2ConvertFromDealMaven", isEnabledForLinkManagerV2ConvertFromDealMaven
End Function

Public Function IsActivatedForLinkManagerV2Recording() As Boolean
    pushTrace "IsActivatedForLinkManagerV2Recording", "ApiRegistry.cls"

    IsActivatedForLinkManagerV2Recording = False
   
On Error GoTo FunctionEnd

    GetValue "LinkManager", "IsActivatedForLinkManagerV2Recording", IsActivatedForLinkManagerV2Recording
   
FunctionEnd:


    popTrace "IsActivatedForLinkManagerV2Recording", IsActivatedForLinkManagerV2Recording
End Function


Public Function IsDisabledForMarch2014BetaChanges() As Boolean
    pushTrace "IsDisabledForMarch2014BetaChanges", "ApiRegistry.cls"

   IsDisabledForMarch2014BetaChanges = False
   
On Error GoTo FunctionEnd

   GetValue "LinkManager", "isDisabledForMarch2014BetaChanges", IsDisabledForMarch2014BetaChanges
   
FunctionEnd:


   popTrace "IsDisabledForMarch2014BetaChanges", IsDisabledForMarch2014BetaChanges
End Function


Public Function IsDisabledForApril2014PostBetaChanges() As Boolean
   pushTrace "IsDisabledForApril2014PostBetaChanges", "ApiRegistry.cls"

   IsDisabledForApril2014PostBetaChanges = False
   
On Error GoTo FunctionEnd

   GetValue "LinkManager", "IsDisabledForApril2014PostBetaChanges", IsDisabledForApril2014PostBetaChanges
   
FunctionEnd:


   popTrace "IsDisabledForApril2014PostBetaChanges", IsDisabledForApril2014PostBetaChanges
End Function


Public Function LinkManagerHideUpdateFromCurrentOption() As Boolean
   pushTrace "LinkManagerHideUpdateFromCurrentOption", "ApiRegistry.cls"

   LinkManagerHideUpdateFromCurrentOption = False
   
On Error GoTo FunctionEnd

   GetValue "LinkManager", "HideUpdateFromCurrentOption", LinkManagerHideUpdateFromCurrentOption
   
FunctionEnd:


   popTrace "LinkManagerHideUpdateFromCurrentOption", LinkManagerHideUpdateFromCurrentOption
End Function

Public Function IsDisabledForJune2014BetaChanges() As Boolean
   pushTrace "IsDisabledForJune2014BetaChanges", "ApiRegistry.cls"

   IsDisabledForJune2014BetaChanges = False
   
On Error GoTo FunctionEnd

   GetValue "LinkManager", "IsDisabledForJune2014BetaChanges", IsDisabledForJune2014BetaChanges
   
FunctionEnd:


   popTrace "IsDisabledForJune2014BetaChanges", IsDisabledForJune2014BetaChanges
End Function



Public Function IsDisabledForJune2014BetaFireUpdate() As Boolean
   pushTrace "IsDisabledForJune2014BetaFireUpdate", "ApiRegistry.cls"

   IsDisabledForJune2014BetaFireUpdate = False
   
On Error GoTo FunctionEnd

   GetValue "LinkManager", "IsDisabledForJune2014BetaFireUpdate", IsDisabledForJune2014BetaFireUpdate
   
FunctionEnd:


   popTrace "IsDisabledForJune2014BetaFireUpdate", IsDisabledForJune2014BetaFireUpdate
End Function



Public Function IsDisabledForJune2014BetaTimerInit() As Boolean
   pushTrace "IsDisabledForJune2014BetaTimerInit", "ApiRegistry.cls"

   IsDisabledForJune2014BetaTimerInit = False
   
On Error GoTo FunctionEnd

   GetValue "LinkManager", "IsDisabledForJune2014BetaTimerInit", IsDisabledForJune2014BetaTimerInit
   
FunctionEnd:


   popTrace "IsDisabledForJune2014BetaTimerInit", IsDisabledForJune2014BetaTimerInit
End Function

Public Function IsDisabledForJune2014BetaAliasCorrection() As Boolean
   pushTrace "IsDisabledForJune2014BetaAliasCorrection", "ApiRegistry.cls"

   IsDisabledForJune2014BetaAliasCorrection = False
   
On Error GoTo FunctionEnd

   GetValue "LinkManager", "IsDisabledForJune2014BetaAliasCorrection", IsDisabledForJune2014BetaAliasCorrection
   
FunctionEnd:


   popTrace "IsDisabledForJune2014BetaAliasCorrection", IsDisabledForJune2014BetaAliasCorrection
End Function

Public Function IsDisabledForJuly2014BetaAliasCorrection() As Boolean
   pushTrace "IsDisabledForJuly2014BetaAliasCorrection", "ApiRegistry.cls"

   IsDisabledForJuly2014BetaAliasCorrection = False
   
On Error GoTo FunctionEnd

   GetValue "LinkManager", "IsDisabledForJuly2014BetaAliasCorrection", IsDisabledForJuly2014BetaAliasCorrection
   
FunctionEnd:


   popTrace "IsDisabledForJuly2014BetaAliasCorrection", IsDisabledForJuly2014BetaAliasCorrection
End Function


Public Function IsDisabledForJuly2014BetaRotCorrection() As Boolean
   pushTrace "IsDisabledForJuly2014BetaRotCorrection", "ApiRegistry.cls"

   IsDisabledForJuly2014BetaRotCorrection = False
   
On Error GoTo FunctionEnd

   GetValue "LinkManager", "IsDisabledForJuly2014BetaRotCorrection", IsDisabledForJuly2014BetaRotCorrection
   
FunctionEnd:


   popTrace "IsDisabledForJuly2014BetaRotCorrection", IsDisabledForJuly2014BetaRotCorrection
End Function

Public Function IsDisabledForJune2014BetaReportShapeWithFile() As Boolean
   pushTrace "IsDisabledForJune2014BetaReportShapeWithFile", "ApiRegistry.cls"

   IsDisabledForJune2014BetaReportShapeWithFile = False
   
On Error GoTo FunctionEnd

   GetValue "LinkManager", "IsDisabledForJune2014BetaReportShapeWithFile", IsDisabledForJune2014BetaReportShapeWithFile
   
FunctionEnd:


   popTrace "IsDisabledForJune2014BetaReportShapeWithFile", IsDisabledForJune2014BetaReportShapeWithFile
End Function

Public Function isDisabledForV2ShutdownEvents() As Boolean
   pushTrace "isDisabledForV2ShutdownEvents", "ApiRegistry.cls"

   isDisabledForV2ShutdownEvents = False
   
On Error GoTo FunctionEnd

   GetValue "LinkManager", "isDisabledForV2ShutdownEvents", isDisabledForV2ShutdownEvents
   
FunctionEnd:


   popTrace "isDisabledForV2ShutdownEvents", isDisabledForV2ShutdownEvents
End Function


Public Function isDisabledForEmfCache() As Boolean
   pushTrace "isDisabledForEmfCache", "ApiRegistry.cls"

   isDisabledForEmfCache = False
   
On Error GoTo FunctionEnd

   GetValue "LinkManager", "isDisabledForEmfCache", isDisabledForEmfCache
   
FunctionEnd:


   popTrace "isDisabledForEmfCache", isDisabledForEmfCache
End Function



Public Function isDisabledForDRQS47429928() As Boolean
   pushTrace "isDisabledForDRQS47429928", "ApiRegistry.cls"

   isDisabledForDRQS47429928 = False
   
On Error GoTo FunctionEnd

   GetValue "LinkManager", "IsDisabledForDRQS47429928", isDisabledForDRQS47429928
   
FunctionEnd:


   popTrace "isDisabledForDRQS47429928", isDisabledForDRQS47429928
End Function


Public Function isDisabledForDRQS53570384() As Boolean
   pushTrace "isDisabledForDRQS53570384", "ApiRegistry.cls"

   isDisabledForDRQS53570384 = False
   
On Error GoTo FunctionEnd

   GetValue "LinkManager", "isDisabledForDRQS53570384", isDisabledForDRQS53570384
   
FunctionEnd:


   popTrace "isDisabledForDRQS53570384", isDisabledForDRQS53570384
End Function

Public Function DocPublisherEnabled() As Boolean
   pushTrace "DocPublisherEnabled", "ApiRegistry.cls"

  DocPublisherEnabled = False
  
On Error GoTo FunctionEnd
   
   GetValue "Publishing", "IsEnabledForResearchPublisher", DocPublisherEnabled
   
FunctionEnd:


   popTrace "DocPublisherEnabled", DocPublisherEnabled
End Function

Public Function IsEnabledForFunctionBuilder() As Boolean
   pushTrace "IsEnabledForFunctionBuilder", "ApiRegistry.cls"
   
   IsEnabledForFunctionBuilder = False
   
On Error GoTo FunctionEnd

   Dim isEnabledForFB As Boolean
   isEnabledForFB = False
   
   GetValue "OFCUI", "IS_ENABLED_FOR_FUNCTION_BUILDER3", isEnabledForFB
   
   If isEnabledForFB Then
        IsEnabledForFunctionBuilder = True
   End If
   
FunctionEnd:

   popTrace "IsEnabledForFunctionBuilder", IsEnabledForFunctionBuilder
End Function

Public Function IsEnabledForFunctionBuilderNoResize() As Boolean
   pushTrace "IsEnabledForFunctionBuilderNoResize", "ApiRegistry.cls"
   
   IsEnabledForFunctionBuilderNoResize = False
   
On Error GoTo FunctionEnd

   Dim isEnabledForFB As Boolean
   isEnabledForFB = False
   
   GetValue "OFCUI", "IS_ENABLED_FOR_FUNCTIONBUILDER_NORESIZE", isEnabledForFB
   
   If isEnabledForFB Then
        IsEnabledForFunctionBuilderNoResize = True
   End If
   
FunctionEnd:

   popTrace "IsEnabledForFunctionBuilderNoResize", IsEnabledForFunctionBuilderNoResize
End Function

Public Function IsEnabledForBloombergAnswers() As Boolean
   pushTrace "IsEnabledForBloombergAnswers", "ApiRegistry.cls"
   
   IsEnabledForBloombergAnswers = False
   
On Error GoTo FunctionEnd

   Dim isEnabledForBBA As Boolean
   isEnabledForBBA = False
   
   GetValue "OFCUI", "IS_ENABLED_FOR_BLOOMBERG_ANSWERS", isEnabledForBBA
   
   If isEnabledForBBA Then
        IsEnabledForBloombergAnswers = True
   End If
   
FunctionEnd:

   popTrace "IsEnabledForBloombergAnswers", IsEnabledForBloombergAnswers
End Function

Public Function DisableStackTrace() As Boolean
   pushTrace "DisableStackTrace", "ApiRegistry.cls"
    
    DisableStackTrace = False
   
On Error GoTo FunctionEnd

    GetValue "PowerTools", "STACKTRACE_DISABLE", DisableStackTrace
   
FunctionEnd:


    popTrace "DisableStackTrace", DisableStackTrace
End Function


Public Function IsEnabledForHotKeys64() As Boolean
    pushTrace "IsEnabledForHotKeys64", "ApiRegistry.cls"
   
   IsEnabledForHotKeys64 = False
   
On Error GoTo FunctionEnd

   GetValue "PowerTools", "IsEnabledForHotKeys64", IsEnabledForHotKeys64
   
FunctionEnd:

   popTrace "IsEnabledForHotKeys64", IsEnabledForHotKeys64
End Function


Public Function IsDisabledForPowerPointHotKeys() As Boolean
   pushTrace "IsDisabledForPowerPointHotKeys", "ApiRegistry.cls"
   
   IsDisabledForPowerPointHotKeys = False
   
On Error GoTo FunctionEnd

   GetValue "PowerTools", "IsDisabledForPowerPointHotKeys", IsDisabledForPowerPointHotKeys
   
FunctionEnd:


   popTrace "IsDisabledForPowerPointHotKeys", IsDisabledForPowerPointHotKeys
End Function

Public Function IsDisabledForAlternateCookieRetrieval() As Boolean
   pushTrace "IsDisabledForAlternateCookieRetrieval", "ApiRegistry.cls"

   IsDisabledForAlternateCookieRetrieval = False
   
On Error GoTo FunctionEnd

   GetValue "BBRTD", "IS_DISABLED_ALTERNATE_COOKIE_RETRIEVAL", IsDisabledForAlternateCookieRetrieval
   
FunctionEnd:

   popTrace "IsDisabledForAlternateCookieRetrieval", IsDisabledForAlternateCookieRetrieval
End Function

Public Function UseOldService() As Boolean
   pushTrace "UseOldService", "ApiRegistry.cls"
   
  UseOldService = True
   
On Error GoTo FunctionEnd

   GetValue "DATA_TRANSPARENCY", "USEOLDSERVICE", UseOldService
   
FunctionEnd:


   popTrace "UseOldService", UseOldService
End Function

Public Function SFMEnabled() As Boolean
   pushTrace "SFMEnabled", "ApiRegistry.cls"

  SFMEnabled = False
  
On Error GoTo FunctionEnd

    Dim key As String
    
#If WORD Then
    key = "ISENABLEDFORSFMINWORD"
#ElseIf POWERPOINT Then
    key = "ISENABLEDFORSFMINPPT"
#Else
    key = "ISENABLEDFORSFMMANAGER"
#End If

    GetValue "SFM", key, SFMEnabled

FunctionEnd:


    popTrace "SFMEnabled", SFMEnabled
End Function

Public Function IsEnabledForSingleDate() As Boolean
    pushTrace "IsEnabledForSingleDate", "ApiRegistry.cls"
   
   IsEnabledForSingleDate = False
   
On Error GoTo FunctionEnd

   GetValue "BBRTD", "IsEnabledForSingleDate", IsEnabledForSingleDate
   
FunctionEnd:

   popTrace "IsEnabledForSingleDate", IsEnabledForSingleDate
End Function

Public Function IsEnabledForRangeSetDirty() As Boolean
   pushTrace "IsEnabledForRangeSetDirty", "ApiRegistry.cls"
   
   IsEnabledForRangeSetDirty = False
   
On Error GoTo FunctionEnd

   GetValue "BBRTD", "ENABLERANGESETDIRTY", IsEnabledForRangeSetDirty
   
FunctionEnd:

   popTrace "IsEnabledForRangeSetDirty", IsEnabledForRangeSetDirty
End Function

Public Function IsDisabledForWordHotKeys() As Boolean
   pushTrace "IsDisabledForWordHotKeys", "ApiRegistry.cls"
   
   IsDisabledForWordHotKeys = False
   
On Error GoTo FunctionEnd

   GetValue "PowerTools", "IsDisabledForWordHotKeys", IsDisabledForWordHotKeys
   
FunctionEnd:


   popTrace "IsDisabledForWordHotKeys", IsDisabledForWordHotKeys
End Function

Public Function IsInsertSectionAvailable() As Boolean
   pushTrace "IsInsertSectionAvailable", "ApiRegistry.cls"

  IsInsertSectionAvailable = False
  
On Error GoTo FunctionEnd
   
   GetValue "PowerTools", "IsInsertSectionAvailable", IsInsertSectionAvailable

FunctionEnd:


   popTrace "IsInsertSectionAvailable", IsInsertSectionAvailable
End Function

'CODECONVSHP FLOATING SHAPES
Public Function IsFloatingShapeSupportEnabled() As Boolean
   pushTrace "IsFloatingShapeSupportEnabled", "ApiRegistry.cls"

  IsFloatingShapeSupportEnabled = False
  
On Error GoTo FunctionEnd
   
   GetValue "LinkManager", "IsFloatingShapeSupportEnabled", IsFloatingShapeSupportEnabled
   
FunctionEnd:


   popTrace "IsFloatingShapeSupportEnabled", IsFloatingShapeSupportEnabled
End Function
Public Function IsNewDocumentAvailable() As Boolean
   pushTrace "IsNewDocumentAvailable", "ApiRegistry.cls"

  IsNewDocumentAvailable = False
  
On Error GoTo FunctionEnd
   
   GetValue "PowerTools", "IsNewDocumentAvailable", IsNewDocumentAvailable
   
FunctionEnd:


   popTrace "IsNewDocumentAvailable", IsNewDocumentAvailable
End Function

Public Function IsEnabledForWord() As Boolean
   pushTrace "IsEnabledForWord", "ApiRegistry.cls"
   
   IsEnabledForWord = False
   
On Error GoTo FunctionEnd

   GetValue "PowerTools", "ISENABLEDFORWORD", IsEnabledForWord
   
FunctionEnd:


   popTrace "IsEnabledForWord", IsEnabledForWord
End Function

Public Function IsEnabledForWord2007() As Boolean
   pushTrace "IsEnabledForWord2007", "ApiRegistry.cls"
   
   IsEnabledForWord2007 = False
   
On Error GoTo FunctionEnd

   GetValue "PowerTools", "ENABLEWORD2007", IsEnabledForWord2007
   
FunctionEnd:


   popTrace "IsEnabledForWord2007", IsEnabledForWord2007
End Function
Public Function IsEpsUser() As Boolean
   pushTrace "IsEpsUser", "ApiRegistry.cls"
    
   IsEpsUser = False
   
On Error GoTo FunctionEnd

   GetValue "BBRTD", "ISEPSUSER", IsEpsUser
   
FunctionEnd:


   popTrace "IsEpsUser", IsEpsUser
End Function

Public Function IsEnabledForHotkeysApi() As Boolean
   pushTrace "IsEnabledForHotkeysApi", "ApiRegistry.cls"
   
   IsEnabledForHotkeysApi = False
   
On Error GoTo FunctionEnd

   GetValue "Powertools", "IsEnabledForHotkeysApi", IsEnabledForHotkeysApi
   
FunctionEnd:


   popTrace "IsEnabledForHotkeysApi", IsEnabledForHotkeysApi
End Function

Public Function DisableSessionOptionsDisplay() As Boolean
   pushTrace "DisableSessionOptionsDisplay", "ApiRegistry.cls"
   
   DisableSessionOptionsDisplay = False
   
On Error GoTo FunctionEnd

   GetValue "BBRTD", "ISDISABLEDSESSIONOPTIONSDISPLAY", DisableSessionOptionsDisplay
   
FunctionEnd:


   popTrace "DisableSessionOptionsDisplay", DisableSessionOptionsDisplay
End Function

Public Function IsDisabledForOct2014EditPasteChanges() As Boolean
   pushTrace "IsDisabledForOct2014EditPasteChanges", "ApiRegistry.cls"
'EDITPASTE-MULTISELECTCOPYPASTE-TEXTBOXWITHDDLINKS-ENABLED

   IsDisabledForOct2014EditPasteChanges = False
   
On Error GoTo FunctionEnd

   GetValue "LinkManager", "IsDisabledForOct2014EditPasteChanges", IsDisabledForOct2014EditPasteChanges
   
FunctionEnd:


   popTrace "IsDisabledForOct2014EditPasteChanges", IsDisabledForOct2014EditPasteChanges
End Function
Public Function IsDisabledForDec2014EditPasteChanges() As Boolean
   pushTrace "IsDisabledForDec2014EditPasteChanges", "ApiRegistry.cls"
'EDITPASTE-REWRITE-AND-SUPPORT_FLOATINGSHAPE_COPYPASTE_TO_OTHERDOCS

   IsDisabledForDec2014EditPasteChanges = False
   
On Error GoTo FunctionEnd

   GetValue "LinkManager", "IsDisabledForDec2014EditPasteChanges", IsDisabledForDec2014EditPasteChanges
   
FunctionEnd:


   popTrace "IsDisabledForDec2014EditPasteChanges", IsDisabledForDec2014EditPasteChanges
End Function
Public Function IsEnabledForLegacyDTFieldsFile() As Boolean
   pushTrace "IsEnabledForLegacyDTFieldsFile", "ApiRegistry.cls"
   
   IsEnabledForLegacyDTFieldsFile = False
   
On Error GoTo FunctionEnd

   GetValue "DATA_TRANSPARENCY", "ENABLE_LEGACY_DT_FIELDS_FILE", IsEnabledForLegacyDTFieldsFile
   
FunctionEnd:


   popTrace "IsEnabledForLegacyDTFieldsFile", IsEnabledForLegacyDTFieldsFile
End Function

Public Function IsNewAddinLoadPathDisabled() As Boolean
   pushTrace "IsNewAddinLoadPathDisabled", "ApiRegistry.cls"

    IsNewAddinLoadPathDisabled = False

On Error GoTo FunctionEnd

    GetValue "OFCUI", "IS_NEW_ADDIN_LOAD_PATH_DISABLED", IsNewAddinLoadPathDisabled

FunctionEnd:


    popTrace "IsNewAddinLoadPathDisabled", IsNewAddinLoadPathDisabled
End Function

Public Function IsDisabledForMeteringPopulateTable() As Boolean
    pushTrace "IsDisabledForMeteringPopulateTable", "ApiRegistry.cls"

   IsDisabledForMeteringPopulateTable = False
   
On Error GoTo FunctionEnd

   GetValue "RIBBON", "ISDISABLEDFORMETERINGPOPULATETABLE", IsDisabledForMeteringPopulateTable
   
FunctionEnd:


   popTrace "IsDisabledForMeteringPopulateTable", IsDisabledForMeteringPopulateTable
End Function

Public Function IsEnabledForBulkReplaceWebView() As Boolean
   pushTrace "IsEnabledForBulkReplaceWebView", "ApiRegistry.cls"

   IsEnabledForBulkReplaceWebView = False
   
On Error GoTo FunctionEnd

   GetValue "POWERTOOLS", "ISENABLEDFORBULKREPLACEWEBVIEW", IsEnabledForBulkReplaceWebView
   
FunctionEnd:


   popTrace "IsEnabledForBulkReplaceWebView", IsEnabledForBulkReplaceWebView
End Function

Public Function IsEnabledForSpreadsheetBuilder() As Boolean
   pushTrace "IsEnabledForSpreadsheetBuilder", "ApiRegistry.cls"

    IsEnabledForSpreadsheetBuilder = False

    On Error GoTo FunctionEnd

    GetValue "OFCUI", "ISENABLEDFORSPREADSHEETBUILDER_APRIL17", IsEnabledForSpreadsheetBuilder

FunctionEnd:


    popTrace "IsEnabledForSpreadsheetBuilder", IsEnabledForSpreadsheetBuilder
End Function

Public Function IsDisabledForProfileMetering() As Boolean
    pushTrace "IsDisabledForProfileMetering", "ApiRegistry.cls"

   IsDisabledForProfileMetering = False
   
On Error GoTo FunctionEnd

   GetValue "RIBBON", "ISDISABLEDFORPROFILEMETERING", IsDisabledForProfileMetering
   
FunctionEnd:


   popTrace "IsDisabledForProfileMetering", IsDisabledForProfileMetering
End Function

Public Function IsDisabledForHitCount() As Boolean
   pushTrace "IsDisabledForHitCount", "ApiRegistry.cls"

   IsDisabledForHitCount = False
   
On Error GoTo FunctionEnd

   GetValue "BXLA", "ISDISABLEDFORHITCOUNT", IsDisabledForHitCount
   
FunctionEnd:


   popTrace "IsDisabledForHitCount", IsDisabledForHitCount
End Function

Public Function IsDisabledForBofAddinInstalledMetering() As Boolean
   pushTrace "IsDisabledForBofAddinInstalledMetering", "ApiRegistry.cls"

   IsDisabledForBofAddinInstalledMetering = False
   
On Error GoTo FunctionEnd

   GetValue "RIBBON", "ISDISABLEDFORBOFADDININSTALLEDMETERING", IsDisabledForBofAddinInstalledMetering
   
FunctionEnd:


   popTrace "IsDisabledForBofAddinInstalledMetering", IsDisabledForBofAddinInstalledMetering
End Function


Public Function IsDisabledForHwndReset() As Boolean
   pushTrace "IsDisabledForHwndReset", "ApiRegistry.cls"

    IsDisabledForHwndReset = False

On Error GoTo FunctionEnd

    GetValue "RIBBON", "ISDISABLEDFOREHWNDRESET", IsDisabledForHwndReset

FunctionEnd:


    popTrace "IsDisabledForHwndReset", IsDisabledForHwndReset
End Function


Public Function IsDisabledForWorksheetRefreshV3() As Boolean
    pushTrace "IsDisabledForWorksheetRefreshV3", "ApiRegistry.cls"
   
   IsDisabledForWorksheetRefreshV3 = False
   
On Error GoTo FunctionEnd

   GetValue "BBRTD", "ISDISABLEDFORWORKSHEETREFRESHV3", IsDisabledForWorksheetRefreshV3
   
FunctionEnd:

   popTrace "IsDisabledForWorksheetRefreshV3", IsDisabledForWorksheetRefreshV3
End Function

Public Function IsEnabledForSmartClientAddinHost() As Boolean
   pushTrace "IsEnabledForSmartClientAddinHost", "ApiRegistry.cls"
   
   IsEnabledForSmartClientAddinHost = False
   
On Error GoTo FunctionEnd

   GetValue "OFCUI", "IS_ENABLED_FOR_SMART_CLIENT_ADDIN_HOST", IsEnabledForSmartClientAddinHost
   
FunctionEnd:


   popTrace "IsEnabledForSmartClientAddinHost", IsEnabledForSmartClientAddinHost
End Function

Public Function IsBCDERefireOzDisabled() As Boolean
   pushTrace "IsBCDERefireOzDisabled", "ApiRegistry.cls"
   On Error GoTo FunctionEnd
   GetValue "BBRTD", "IS_DISABLED_FOR_BCDE_REFIRE_OZ", IsBCDERefireOzDisabled
FunctionEnd:

   popTrace "IsBCDERefireOzDisabled", IsBCDERefireOzDisabled
End Function

'TODO: Remove
Public Function IsBTableEnabled() As Boolean
   pushTrace "IsBTableEnabled", "ApiRegistry.cls"
    IsBTableEnabled = False
    On Error GoTo FunctionEnd
    GetValue "OFCDATA", "IS_BTABLE_ENABLED", IsBTableEnabled
FunctionEnd:

    popTrace "IsBTableEnabled", IsBTableEnabled
End Function
Public Function IsConfigMigrationEnabled() As Boolean
    pushTrace "IsConfigMigrationEnabled", "ApiRegistry.cls"

  IsConfigMigrationEnabled = False
  
On Error GoTo FunctionEnd

   GetValue "OFCUI", "IS_CONFIG_MIGRATION_ENABLED", IsConfigMigrationEnabled
   
FunctionEnd:

   popTrace "IsConfigMigrationEnabled", IsConfigMigrationEnabled
End Function

Public Function DoExcelCalculateForRefreshInManualMode() As Boolean
   pushTrace "DoExcelCalculateForRefreshInManualMode", "ApiRegistry.cls"

  DoExcelCalculateForRefreshInManualMode = False
  
On Error GoTo FunctionEnd

   GetValue "OFCUI", "DO_EXCEL_CALCULATE_FOR_REFRESH_IN_MANUAL_MODE", DoExcelCalculateForRefreshInManualMode
   
FunctionEnd:

   popTrace "DoExcelCalculateForRefreshInManualMode", DoExcelCalculateForRefreshInManualMode
End Function

Public Function DoExcelCalculateForRefireInManualMode() As Boolean
   pushTrace "DoExcelCalculateForRefireInManualMode", "ApiRegistry.cls"

  DoExcelCalculateForRefireInManualMode = False
  
On Error GoTo FunctionEnd

   GetValue "OFCUI", "DO_EXCEL_CALCULATE_FOR_REFIRE_IN_MANUAL_MODE", DoExcelCalculateForRefireInManualMode
   
FunctionEnd:

   popTrace "DoExcelCalculateForRefireInManualMode", DoExcelCalculateForRefireInManualMode
End Function


Public Function IsDisabledForNewArchRangeSetDirty() As Boolean
    pushTrace "IsDisabledForNewArchRangeSetDirty", "ApiRegistry.cls"
   
   IsDisabledForNewArchRangeSetDirty = False
   
On Error GoTo FunctionEnd

   GetValue "XLL", "DISABLE_VBA_RANGE_SET_DIRTY_OCT18", IsDisabledForNewArchRangeSetDirty
   
FunctionEnd:

   popTrace "IsDisabledForNewArchRangeSetDirty", IsDisabledForNewArchRangeSetDirty
End Function

Public Function IsDisabledForAppCalculateOnRefreshRange() As Boolean
   pushTrace "IsDisabledForAppCalculateOnRefreshRange", "ApiRegistry.cls"
   
   IsDisabledForAppCalculateOnRefreshRange = False
   
On Error GoTo FunctionEnd

   GetValue "XLL", "DISABLE_VBA_APP_CALCULATE_ON_REFRESH_RANGE", IsDisabledForAppCalculateOnRefreshRange
   
FunctionEnd:

   popTrace "IsDisabledForAppCalculateOnRefreshRange", IsDisabledForAppCalculateOnRefreshRange
End Function

Public Function IsDisabledForSingleCellOptimisationVBA() As Boolean
   pushTrace "IsDisabledForSingleCellOptimisationVBA", "ApiRegistry.cls"
   
   IsDisabledForSingleCellOptimisationVBA = False
   
On Error GoTo FunctionEnd

   GetValue "XLL", "DISABLE_SINGLE_CELL_VBA_OPTIMISATION", IsDisabledForSingleCellOptimisationVBA
   
FunctionEnd:

   popTrace "IsDisabledForSingleCellOptimisationVBA", IsDisabledForSingleCellOptimisationVBA
End Function


Public Function IsDisabledForSkipProtectedAndCellshift() As Boolean
    pushTrace "IsDisabledForSkipProtectedAndCellshift", "ApiRegistry.cls"
   
   IsDisabledForSkipProtectedAndCellshift = False
   
On Error GoTo FunctionEnd

   GetValue "XLL", "DISABLE_SKIP_PROTECTED_AND_CELLSHIFT_FIX", IsDisabledForSkipProtectedAndCellshift
   
FunctionEnd:

   popTrace "IsDisabledForSkipProtectedAndCellshift", IsDisabledForSkipProtectedAndCellshift
End Function

Public Function IsDisabledForDrqs97848344() As Boolean
   pushTrace "IsDisabledForDrqs97848344", "ApiRegistry.cls"
   
   IsDisabledForDrqs97848344 = False
   
On Error GoTo FunctionEnd

   GetValue "XLL", "DRQS97848344_DISABLE", IsDisabledForDrqs97848344
   
FunctionEnd:

   popTrace "IsDisabledForDrqs97848344", IsDisabledForDrqs97848344
End Function

Public Function IsEnabledForDoEventsOnRender() As Boolean
   pushTrace "IsEnabledForDoEventsOnRender", "ApiRegistry.cls"
   
   IsEnabledForDoEventsOnRender = False
   
On Error GoTo FunctionEnd

   GetValue "XLL", "ENABLE_DO_EVENTS_ON_RENDER", IsEnabledForDoEventsOnRender
   
FunctionEnd:

   popTrace "IsEnabledForDoEventsOnRender", IsEnabledForDoEventsOnRender
End Function

Public Function IsDisabledForXlAppVisible() As Boolean
   pushTrace "IsDisabledForXlAppVisible", "ApiRegistry.cls"
   
   IsDisabledForXlAppVisible = False
   
On Error GoTo FunctionEnd

   GetValue "LinkManager", "IS_DISABLED_FOR_XL_APP_VISIBLE", IsDisabledForXlAppVisible
   
FunctionEnd:

   popTrace "IsDisabledForXlAppVisible", IsDisabledForXlAppVisible
End Function

Public Function IsLinkManagerEnabledForLongPathnames() As Boolean
   pushTrace "IsLinkManagerEnabledForLongPathnames", "ApiRegistry.cls"
   
   IsLinkManagerEnabledForLongPathnames = False
   
On Error GoTo FunctionEnd

   GetValue "LinkManager", "IsEnabledForLongPathnames", IsLinkManagerEnabledForLongPathnames
   
FunctionEnd:

   popTrace "IsLinkManagerEnabledForLongPathnames", IsLinkManagerEnabledForLongPathnames
End Function

Public Function IsWorkbookSizeTypeMeteringDisabled() As Boolean
   pushTrace "IsWorkbookSizeTypeMeteringDisabled", "ApiRegistry.cls"
   
   IsWorkbookSizeTypeMeteringDisabled = False
   
On Error GoTo FunctionEnd

   GetValue "BXLA", "IsWorkbookSizeTypeMeteringDisabled", IsWorkbookSizeTypeMeteringDisabled
   
FunctionEnd:

   popTrace "IsWorkbookSizeTypeMeteringDisabled", IsWorkbookSizeTypeMeteringDisabled
End Function
Attribute VB_Name = "BBPTv2_FunctionTracing"
Option Explicit
Option Private Module

''
Private Type FUNCTION_STACK_DATA
    function As String
    fname As String
    args As String
End Type

Public procDepth As Integer
Dim FunctionStack(0 To 500) As FUNCTION_STACK_DATA
Dim numStackElements As Integer
Dim countLines As Integer
Dim breakPointHere As Integer

#If EXCEL Then
Dim ShuttingDown As Boolean
#End If

Private recursionGuard As Boolean

#If VBA7 Then
Private Declare PtrSafe Sub OutputDebugString Lib "kernel32" Alias "OutputDebugStringA" (ByVal lpOutputString As String)
#Else
Private Declare Sub OutputDebugString Lib "kernel32" Alias "OutputDebugStringA" (ByVal lpOutputString As String)
#End If

Sub testVariantArrayToString()
    Dim qCommand(0 To 3) As String
    Dim resultStr As String
    qCommand(0) = "Command"
    qCommand(1) = "Arg1"
    qCommand(2) = "Arg2"
    qCommand(3) = "Arg3"
        
    resultStr = VariantArrayToString(qCommand)
    Debug.Print resultStr
End Sub


Public Function VariantArrayToString(ByRef arr As Variant) As String
    Dim result As String
    Dim str As String
    Dim i As Integer
    On Error Resume Next
    result = ""
    If (TypeName(arr) <> "Empty") Then
        For i = LBound(arr) To UBound(arr)
            If (TypeName(arr(i)) = "String") Then
                str = """" & arr(i) & """"
            ElseIf (TypeName(arr(i)) = "Long") Or (TypeName(arr(i)) = "Integer") Or (TypeName(arr(i)) = "Boolean") Then
                str = CStr(arr(i))
            ElseIf (TypeName(arr(i)) = "Workbook") Then
                str = "<Workbook: Name=""" & arr(i).name & """ Path=""" & arr(i).path & """>"
            ElseIf (TypeName(arr(i)) = "Range") Then
                str = "<Range: Address=""" & arr(i).address & """>"
            Else
                str = "<" & TypeName(arr(i)) & ">"
            End If
            If (Len(str) > 300) Then
                str = Mid(str, 1, 300) & "..."""
            End If
            If result = "" Then
                result = str
            Else
                result = result & "," & str
            End If
        Next i
    End If
    VariantArrayToString = result
End Function

Public Sub pushTrace(name As String, fname As String, ParamArray args() As Variant)
    If recursionGuard Then Exit Sub
    recursionGuard = True
    
On Error GoTo handleError
    FunctionStack(numStackElements).function = name
    FunctionStack(numStackElements).fname = fname
    
    If isEnabledForTracing Then
        Dim argsArray() As Variant
        argsArray = args
        FunctionStack(numStackElements).args = VariantArrayToString(argsArray)
        Log_BBPTEvent "TRACE", Space$(numStackElements * 2) & ">" & name & ":" & "(" & FunctionStack(numStackElements).args & ")" & Space$(10) & fname
    End If
    numStackElements = numStackElements + 1
                        
    recursionGuard = False
    Exit Sub
handleError:
    Debug.Print "pushTrace:" & name & ":" & Err.Description
    If numStackElements < 0 Then numStackElements = 0
    If numStackElements > 499 Then numStackElements = 499
    recursionGuard = False
End Sub


Public Sub popTrace(name As String, ParamArray args() As Variant)
    If recursionGuard Then Exit Sub
    recursionGuard = True

On Error GoTo handleError
    
    numStackElements = numStackElements - 1
    
    If isEnabledForTracing Then
        Dim resultsArray() As Variant
        Dim result As String
        resultsArray = args
        result = VariantArrayToString(resultsArray)
        
        If Len(result) > 0 Then
            result = " =" & result
        End If
        Log_BBPTEvent "TRACE", Space$(numStackElements * 2) & "<" & name & result
    End If
    
    If numStackElements < 0 And Not ShuttingDown Then
        numStackElements = 0
        Debug.Print "Popping function [" & name & "] goes beyond pushed elements."
        PrintStackTrace (True)
    End If
    If FunctionStack(numStackElements).function <> name Then
        '''Its possible that an exception was thrown that didn't allow a proper pop. Self correcting for that case.
        Dim newStackPosition As Integer
        Dim i As Integer
        newStackPosition = -1
        For i = numStackElements To 0 Step -1
            If FunctionStack(i).function = name Then
                newStackPosition = i
                Exit For
            End If
        Next i
        If (newStackPosition < 0 And Not ShuttingDown) Then
            Debug.Print "Having problem popping function [" & name & "]!"
            PrintStackTrace (True)
        Else
            numStackElements = newStackPosition
        End If
    End If
    'While (numStackElements >= 0 And FunctionStack(numStackElements).function = name)
    '    numStackElements = numStackElements - 1
    'Wend
    FunctionStack(numStackElements).function = ""
    FunctionStack(numStackElements).fname = ""
    FunctionStack(numStackElements).args = ""
        
    recursionGuard = False
    Exit Sub
handleError:
    Debug.Print "popTrace:" & name & ":" & Err.Description
    If numStackElements < 0 Then numStackElements = 0
    If numStackElements > 499 Then numStackElements = 499
    recursionGuard = False
End Sub

Function PrintStackTrace(Optional outputToConsole As Boolean = False) As String
    PrintStackTrace = ""
    
    If IsStackTraceDisabled Then
        Exit Function
    End If
    
On Error GoTo handleError
    Dim currentLine As String
    Dim i As Integer
    If numStackElements = 0 And FunctionStack(0).fname = "" Then
        If outputToConsole Then
            Debug.Print "The VBA call stack is empty!"
        End If
        Exit Function
    End If
    
    If outputToConsole Then
        Debug.Print "============VBA Call-Stack==========="
    End If
    PrintStackTrace = PrintStackTrace & vbNewLine & "StackTrace: (" & Application.name & " v" & Application.Version & ")" & vbNewLine
    For i = numStackElements - 1 To 0 Step -1
        currentLine = str(i) & ":" & FunctionStack(i).fname & ":" & FunctionStack(i).function & "(" & FunctionStack(i).args & ")"
        PrintStackTrace = PrintStackTrace & currentLine & vbNewLine
        If outputToConsole Then
            Debug.Print currentLine
        End If
    Next i
    If outputToConsole Then
        Debug.Print "============VBA Call-Stack==========="
    End If
handleError:

End Function

Public Function isEnabledForTracing() As Boolean
    Static bleSet As Boolean
    Static bleValue As Boolean
    On Error Resume Next
    If Not bleSet Then
        bleSet = True
        bleValue = False
        Dim tempStr As String
        If RegistryHelper.GetRegistryStringValue(RegRoot.HKEY_CURRENT_USER, RegistryHelper.OFFICE_TOOLS_SETTINGS_REGKEY, "LogLevelVbaOverrideExpiration", tempStr) Then
            bleValue = isValidOverrideDateTime(tempStr)
        End If
    End If
    isEnabledForTracing = bleValue
End Function

Public Function isValidOverrideDateTime(registryValueTime As String)
    isValidOverrideDateTime = False
    On Error Resume Next
    Dim dateTimeToCheck As Date
    If Len(registryValueTime) >= 18 Then
        Mid(registryValueTime, 3, 1) = "/"
        Mid(registryValueTime, 6, 1) = "/"
        Mid(registryValueTime, 14, 1) = ":"
        Mid(registryValueTime, 17, 1) = ":"
        dateTimeToCheck = CDate(registryValueTime)
        If dateTimeToCheck > Now Then
            isValidOverrideDateTime = True
        End If
    End If
End Function




'--------------------------------------------------------------
''''''''''''Public Function acceptableTrace(functionDeclaration As String) As Boolean
''''''''''''    Dim unwantedInTrace(0 To 9) As String
''''''''''''    unwantedInTrace(0) = "uWindowClass"
''''''''''''    unwantedInTrace(1) = "EnumWindowsProc"
''''''''''''    unwantedInTrace(2) = "EnumChildProc"
''''''''''''    unwantedInTrace(3) = "uWindowTitle"
''''''''''''    unwantedInTrace(4) = "Friend Function Links"
''''''''''''    unwantedInTrace(5) = "ReadyStateCount"
''''''''''''    unwantedInTrace(6) = "BbgLocalizeString"
''''''''''''    unwantedInTrace(7) = "BbgLocalizeString"
''''''''''''    unwantedInTrace(8) = "BbgLocalizeString"
''''''''''''    unwantedInTrace(9) = "BbgLocalizeString"
''''''''''''
''''''''''''    Dim lastUnwanted As Integer
''''''''''''    lastUnwanted = 9
''''''''''''    acceptableTrace = True
''''''''''''    Dim i As Integer
''''''''''''    For i = 0 To lastUnwanted
''''''''''''        Dim first As Integer
''''''''''''        first = InStr(functionDeclaration, unwantedInTrace(i))
''''''''''''        If (InStr(functionDeclaration, unwantedInTrace(i)) <> 0) Then
''''''''''''            acceptableTrace = False
''''''''''''        End If
''''''''''''    Next i
''''''''''''End Function


''''''''''''Public Sub pushTrace2(name As String, fname As String, ParamArray args() As Variant)
''''''''''''    Dim spaces As String
''''''''''''    Dim i As Integer
''''''''''''
''''''''''''    FunctionStack(numStackElements) = name
''''''''''''    numStackElements = numStackElements + 1
''''''''''''
''''''''''''    For i = 1 To procDepth
''''''''''''        spaces = spaces + "  "
''''''''''''    Next
''''''''''''    procDepth = procDepth + 1
''''''''''''    If procDepth < 0 Then procDepth = 0
''''''''''''    If acceptableTrace(name) Then
''''''''''''        Debug.Print CStr(procDepth) + "," + spaces + "{," + name
''''''''''''        OutputDebugString CStr(procDepth) + "," + spaces + "{," + name
'''''''''''''        countLines = countLines + 1
'''''''''''''        If countLines Mod 100 = 0 Then
'''''''''''''           breakPointHere = 1
'''''''''''''        End If
''''''''''''    End If
''''''''''''End Sub
''''''''''''
''''''''''''Public Sub popTrace2(Optional fname As String = "")
''''''''''''    Dim spaces As String
''''''''''''    Dim i As Integer
''''''''''''
''''''''''''    procDepth = procDepth - 1
''''''''''''    If procDepth < 0 Then procDepth = 0
''''''''''''    For i = 1 To procDepth
''''''''''''        spaces = spaces + "  "
''''''''''''    Next
''''''''''''
''''''''''''    numStackElements = numStackElements - 1
''''''''''''    If numStackElements < 2 Then
''''''''''''        breakPointHere = 1
''''''''''''    End If
''''''''''''    If numStackElements < 0 Then
''''''''''''        numStackElements = 0
''''''''''''    Else
''''''''''''        Dim name As String
''''''''''''        name = FunctionStack(numStackElements)
''''''''''''        If acceptableTrace(name) Then
''''''''''''            Debug.Print CStr(procDepth + 1) + "," + spaces + "}," + name
''''''''''''            OutputDebugString CStr(procDepth + 1) + "," + spaces + "}," + name
'''''''''''''            countLines = countLines + 1
'''''''''''''            If countLines Mod 100 = 0 Then
'''''''''''''               breakPointHere = 1
'''''''''''''            End If
''''''''''''        End If
''''''''''''    End If
''''''''''''
''''''''''''End Sub
'--------------------------------------------------------------
Attribute VB_Name = "ComDllLoader"
Option Explicit
Option Private Module

#If VBA7 Then
Private Declare PtrSafe Function APICoCreateInstance Lib "bbloader.dll" _
                (ByVal lpszFilePathName As String, ByRef rclsid As GUID, ByRef riid As GUID, ByRef ppv As Object) As Long
Private Declare PtrSafe Function BlpCoCreateInstance Lib "bbloader.dll" _
                (ByVal lpszFilePathName As String, ByRef rclsid As GUID, ByRef riid As GUID, ByRef ppv As Object) As Long
#Else
Private Declare Function APICoCreateInstance Lib "bbloader.dll" _
                (ByVal lpszFilePathName As String, ByRef rclsid As GUID, ByRef riid As GUID, ByRef ppv As Object) As Long
Private Declare Function BlpCoCreateInstance Lib "bbloader.dll" _
                (ByVal lpszFilePathName As String, ByRef rclsid As GUID, ByRef riid As GUID, ByRef ppv As Object) As Long
#End If

Dim rclsid As GUID
Dim riid As GUID

Private Function GuidFromStGuid(ByVal stGuid As String) As GUID
                pushTrace "GuidFromStGuid", "ComDllLoader.bas", stGuid

    Dim rc As Long

    If Left$(stGuid, 7) = "{guid {" Then
        If Right$(stGuid, 2) = "}}" Then
            stGuid = Mid$(stGuid, 7, 38)
        End If
    End If

    rc = CLSIDFromString(ByVal StrPtr(stGuid), GuidFromStGuid)


    popTrace "GuidFromStGuid"
End Function

Public Sub LoadDll(filename As String, clsID As String, IID As String, ByRef Obj As Object)
    pushTrace "LoadDll", "ComDllLoader.bas", filename, clsID, IID, Obj
    
    Dim dir As String
    Dim targetDir As String
    
    dir = CurDir
    
    If GetOfficeToolsPath(targetDir) Then
        ChDrive targetDir
        ChDir targetDir
    End If
    
    APICoCreateInstance filename, GuidFromStGuid(clsID), GuidFromStGuid(IID), Obj

    SetCurrentDirectory (dir)
    
    popTrace "LoadDll"
End Sub

Public Sub LoadDllExplicitPath(filepath As String, clsID As String, IID As String, ByRef Obj As Object)
    pushTrace "LoadDllExplicitPath", "ComDllLoader.bas", filepath, clsID, IID, Obj
    
    Dim dir As String
    Dim targetDir As String
    
    dir = CurDir
    
    If GetOfficeToolsPath(targetDir) Then
        ChDrive targetDir
        ChDir targetDir
    End If
    
    BlpCoCreateInstance filepath, GuidFromStGuid(clsID), GuidFromStGuid(IID), Obj

    SetCurrentDirectory (dir)
    
    popTrace "LoadDllExplicitPath"
End Sub





Attribute VB_Name = "Loader_Globals"
Option Explicit

'version:
'   2011-09-09.1

'declarations required for api
Public Type ToolParamsVt
    Parameters() As Variant
End Type

'api
#If VBA7 Then
'WinAPI, alphabetical
Public Declare PtrSafe Function AccessibleObjectFromWindow Lib "oleacc" (ByVal Hwnd As LongPtr, ByVal dwId As Long, ByRef riid As GUID, ByRef ppvObject As Object) As Long
Public Declare PtrSafe Function BringWindowToTop Lib "user32" (ByVal Hwnd As LongPtr) As Long
Public Declare PtrSafe Function CLSIDFromString Lib "OLE32.DLL" (pstCLS As LongPtr, clsID As GUID) As Long
Public Declare PtrSafe Function DrawMenuBar Lib "user32" (ByVal Hwnd As LongPtr) As Long
Public Declare PtrSafe Function EnableMenuItem Lib "user32" (ByVal hMenu As LongPtr, ByVal wIDEnableItem As Long, ByVal wEnable As Long) As Long
Public Declare PtrSafe Function EnumChildWindows Lib "user32" (ByVal hWndParent As LongPtr, ByVal lpEnumFunc As LongPtr, ByVal lParam As LongPtr) As Long
Public Declare PtrSafe Function EnumWindows Lib "user32" (ByVal lpEnumFunc As LongPtr, ByVal lParam As LongPtr) As Long
Public Declare PtrSafe Function FindFirstFile Lib "kernel32" Alias "FindFirstFileA" (ByVal lpFileName As String, lpFindFileData As WIN32_FIND_DATA) As LongPtr
Public Declare PtrSafe Function FindNextFile Lib "kernel32" Alias "FindNextFileA" (ByVal hFindFile As LongPtr, lpFindFileData As WIN32_FIND_DATA) As Long
Public Declare PtrSafe Function FileTimeToLocalFileTime Lib "kernel32" (lpFileTime As FILETIME, lpLocalFileTime As FILETIME) As Long
Public Declare PtrSafe Function FileTimeToSystemTime Lib "kernel32" (lpFileTime As FILETIME, lpSystemTime As SYSTEMTIME) As Long
Public Declare PtrSafe Function FindClose Lib "kernel32" (ByVal hFindFile As LongPtr) As Long
Public Declare PtrSafe Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As LongPtr
Public Declare PtrSafe Function FreeLibrary Lib "kernel32" (ByVal hLibModule As LongPtr) As Long
Public Declare PtrSafe Function GetActiveObject Lib "Oleaut32.dll" (lpRclsid As LongPtr, pvReserved As LongPtr, lpUnk As LongPtr) As Long
Public Declare PtrSafe Function GetClassName Lib "user32" Alias "GetClassNameA" (ByVal Hwnd As LongPtr, ByVal lpClassName As String, ByVal nMaxCount As Long) As Long
Public Declare PtrSafe Function GetCurrentProcessId Lib "kernel32" () As Long
Public Declare PtrSafe Function GetForegroundWindow Lib "user32" () As LongPtr
Public Declare PtrSafe Function GetLastError Lib "kernel32" () As Long
Public Declare PtrSafe Function GetLocaleInfo Lib "kernel32" Alias "GetLocaleInfoA" (ByVal Locale As Long, ByVal LCType As Long, ByVal lpLCData As String, ByVal cchData As Long) As Long
Public Declare PtrSafe Function GetLongPathName Lib "kernel32" Alias "GetLongPathNameA" (ByVal lpShortPath As String, ByVal lpLongPath As String, ByVal hBuffer As Long) As Long
Public Declare PtrSafe Function GetSystemMenu Lib "user32" (ByVal Hwnd As LongPtr, ByVal bRevert As Long) As LongPtr
Public Declare PtrSafe Function GetMenuItemCount Lib "user32" (ByVal hMenu As LongPtr) As Long
Public Declare PtrSafe Function GetWindowPlacement Lib "user32" (ByVal Hwnd As LongPtr, lpwndpl As WINDOWPLACEMENT) As Long
Public Declare PtrSafe Function GetWindowTextLength Lib "user32" Alias "GetWindowTextLengthA" (ByVal Hwnd As LongPtr) As Long
Public Declare PtrSafe Function GetWindowText Lib "user32" Alias "GetWindowTextA" (ByVal Hwnd As LongPtr, ByVal lpString As String, ByVal cch As Long) As Long
Public Declare PtrSafe Function IIDFromString Lib "ole32" (ByVal lpsz As LongPtr, ByRef lpiid As GUID) As LongPtr
Public Declare PtrSafe Function IsWindowVisible Lib "user32" (ByVal Hwnd As LongPtr) As Long
Public Declare PtrSafe Function LoadLibrary Lib "kernel32" Alias "LoadLibraryA" (ByVal lpLibFileName As String) As LongPtr
Public Declare PtrSafe Function LoadLibraryEx Lib "kernel32" Alias "LoadLibraryExA" (ByVal lpLibFileName As String, ByVal hFile As LongPtr, ByVal dwFlags As Long) As LongPtr
Public Declare PtrSafe Function PathCombine Lib "shlwapi" Alias "PathCombineA" (ByVal szDest As String, ByVal lpszDir As String, ByVal lpszFile As String) As Long
Public Declare PtrSafe Function PathFileExists Lib "shlwapi" Alias "PathFileExistsA" (ByVal pszPath As String) As Long
Public Declare PtrSafe Function PathIsDirectory Lib "shlwapi" Alias "PathIsDirectoryA" (ByVal pszPath As String) As Long
Public Declare PtrSafe Function SendMessage Lib "user32" Alias "SendMessageA" (ByVal Hwnd As LongPtr, ByVal wMsg As Long, ByVal wParam As LongPtr, lParam As Any) As LongPtr
Public Declare PtrSafe Function SetCurrentDirectory Lib "kernel32" Alias "SetCurrentDirectoryA" (ByVal lpPathName As String) As Long
Public Declare PtrSafe Function SetFocus Lib "user32" (ByVal Hwnd As LongPtr) As LongPtr
Public Declare PtrSafe Function ShowWindow Lib "user32" (ByVal Hwnd As LongPtr, ByVal nCmdShow As Long) As Long
Public Declare PtrSafe Function SystemTimeToVariantTime Lib "oleaut32" (psystime As SYSTEMTIME, pvtime As Double) As Long

'Bloomberg API
Public Declare PtrSafe Function AddRunningObject Lib "bofaddin.dll" (ByVal szMoniker As String, ByVal pVal As Application) As Integer
Public Declare PtrSafe Function APICoCreateInstance Lib "bbloader.dll" (ByVal lpszFilePathName As String, ByRef rclsid As GUID, riid As GUID, ByRef ppv As Object) As Long
Public Declare PtrSafe Function RemoveRunningObjects Lib "bofaddin.dll" () As Integer
'Bloomberg API - ToolsProxy
#If Win64 Then
Public Declare PtrSafe Function Initialize Lib "bofaddin.dll" (ByVal App As Application, ByVal hwndOwner As Long) As Boolean
Public Declare PtrSafe Function ActivateTool Lib "bofaddin.dll" (Params As ToolParamsVt) As Boolean
Public Declare PtrSafe Function DeactivateTool Lib "bofaddin.dll" ()
Public Declare PtrSafe Function RetrieveToolParams Lib "bofaddin.dll" (Params As ToolParamsVt) As Boolean
Public Declare PtrSafe Function AsyncInvokeTool Lib "bofaddin.dll" (Params As ToolParamsVt) As Boolean
Public Declare PtrSafe Function ExcelAsyncInvokeDone Lib "bofaddin.dll" (Params As ToolParamsVt) As Boolean
Public Declare PtrSafe Sub Cleanup Lib "bofaddin.dll" ()
#Else
Public Declare PtrSafe Function Initialize Lib "bofaddin.dll" Alias "_Initialize@8" (ByVal App As Application, ByVal hwndOwner As Long) As Boolean
Public Declare PtrSafe Function ActivateTool Lib "bofaddin.dll" Alias "_ActivateTool@4" (Params As ToolParamsVt) As Boolean
Public Declare PtrSafe Function DeactivateTool Lib "bofaddin.dll" Alias "_DeactivateTool@0" ()
Public Declare PtrSafe Function RetrieveToolParams Lib "bofaddin.dll" Alias "_RetrieveToolParams@4" (Params As ToolParamsVt) As Boolean
Public Declare PtrSafe Function AsyncInvokeTool Lib "bofaddin.dll" Alias "_AsyncInvokeTool@4" (Params As ToolParamsVt) As Boolean
Public Declare PtrSafe Function ExcelAsyncInvokeDone Lib "bofaddin.dll" Alias "_ExcelAsyncInvokeDone@4" (Params As ToolParamsVt) As Boolean
Public Declare PtrSafe Sub Cleanup Lib "bofaddin.dll" Alias "_Cleanup@0" ()
#End If

#Else
'WinAPI, alphabetical
Public Declare Function AccessibleObjectFromWindow Lib "oleacc" (ByVal Hwnd As Long, _
                                                                 ByVal dwId As Long, _
                                                                 ByRef riid As GUID, _
                                                                 ByRef ppvObject As Object) _
                                                                 As Long
Public Declare Function BringWindowToTop Lib "user32" (ByVal Hwnd As Long) As Long
Public Declare Function CLSIDFromString Lib "OLE32.DLL" (pstCLS As Long, ByRef clsID As GUID) As Long
Public Declare Function DrawMenuBar Lib "user32" (ByVal Hwnd As Long) As Long
Public Declare Function EnumChildWindows Lib "user32" (ByVal hWndParent As Long, _
                                                       ByVal lpEnumFunc As Long, _
                                                       ByVal lParam As Long) As Long
Public Declare Function EnumWindows Lib "user32" (ByVal lpEnumFunc As Long, ByVal lParam As Long) As Long
Public Declare Function EnableMenuItem Lib "user32" (ByVal hMenu As Long, _
                                                     ByVal wIDEnableItem As Long, _
                                                     ByVal wEnable As Long) As Long
Public Declare Function FindFirstFile Lib "kernel32" Alias "FindFirstFileA" (ByVal lpFileName As String, _
                                                                             lpFindFileData As WIN32_FIND_DATA) As Long
Public Declare Function FindNextFile Lib "kernel32" Alias "FindNextFileA" (ByVal hFindFile As Long, _
                                                                           lpFindFileData As WIN32_FIND_DATA) As Long
Public Declare Function FileTimeToLocalFileTime Lib "kernel32" (lpFileTime As FILETIME, lpLocalFileTime As FILETIME) As Long
Public Declare Function FileTimeToSystemTime Lib "kernel32" (lpFileTime As FILETIME, lpSystemTime As SYSTEMTIME) As Long
Public Declare Function FindClose Lib "kernel32" (ByVal hFindFile As Long) As Long
Public Declare Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
Public Declare Function FreeLibrary Lib "kernel32" (ByVal hLibModule As Long) As Long
Public Declare Function GetActiveObject Lib "Oleaut32.dll" (lpRclsid As Long, pvReserved As Long, lpUnk As Long) As Long
Public Declare Function GetClassName Lib "user32" Alias "GetClassNameA" (ByVal Hwnd As Long, _
                                                                         ByVal lpClassName As String, _
                                                                         ByVal nMaxCount As Long) As Long
Public Declare Function GetCurrentProcessId Lib "kernel32" () As Long
Public Declare Function GetForegroundWindow Lib "user32" () As Long
Public Declare Function GetLastError Lib "kernel32.dll" () As Long
Public Declare Function GetLocaleInfo Lib "kernel32" Alias "GetLocaleInfoA" (ByVal Locale As Long, ByVal LCType As Long, ByVal lpLCData As String, ByVal cchData As Integer) As Integer
Public Declare Function GetLongPathName Lib "kernel32" Alias "GetLongPathNameA" (ByVal lpShortPath As String, ByVal lpLongPath As String, ByVal hBuffer As Long) As Long
Public Declare Function GetSystemMenu Lib "user32" (ByVal Hwnd As Long, ByVal bRevert As Long) As Long
Public Declare Function GetMenuItemCount Lib "user32" (ByVal hMenu As Long) As Long
Public Declare Function GetWindowPlacement Lib "user32" (ByVal Hwnd As Long, lpwndpl As WINDOWPLACEMENT) As Long
Public Declare Function GetWindowTextLength Lib "user32" Alias "GetWindowTextLengthA" (ByVal Hwnd As Long) As Long
Public Declare Function GetWindowText Lib "user32" Alias "GetWindowTextA" (ByVal Hwnd As Long, _
                                                                           ByVal lpString As String, _
                                                                           ByVal cch As Long) As Long
Public Declare Function IIDFromString Lib "ole32" (ByVal lpsz As Long, ByRef lpiid As GUID) As Long
Public Declare Function IsWindowVisible Lib "user32" (ByVal Hwnd As Long) As Long
Public Declare Function LoadLibrary Lib "kernel32" Alias "LoadLibraryA" (ByVal module As String) As Long
Public Declare Function LoadLibraryEx Lib "kernel32" Alias "LoadLibraryExA" (ByVal lpLibFileName As String, ByVal hFile As Long, ByVal dwFlags As Long) As Long
Public Declare Function PathCombine Lib "shlwapi" Alias "PathCombineA" (ByVal szDest As String, ByVal lpszDir As String, ByVal lpszFile As String) As Long
Public Declare Function PathFileExists Lib "shlwapi" Alias "PathFileExistsA" (ByVal pszPath As String) As Long
Public Declare Function PathIsDirectory Lib "shlwapi" Alias "PathIsDirectoryA" (ByVal pszPath As String) As Long
Public Declare Function SendMessage Lib "user32" Alias "SendMessageA" (ByVal Hwnd As Long, _
                                                                       ByVal msg As Long, _
                                                                       ByVal wParam As Long, _
                                                                       ByVal lParam As Any) As Long
Public Declare Function SetCurrentDirectory Lib "kernel32" Alias "SetCurrentDirectoryA" (ByVal lpPathName As String) As Long
Public Declare Function SetFocus Lib "user32" (ByVal Hwnd As Long) As Long
Public Declare Function ShowWindow Lib "user32" (ByVal lHwnd As Long, ByVal lCmdShow As Long) As Boolean
Public Declare Function SystemTimeToVariantTime Lib "oleaut32" (psystime As SYSTEMTIME, pvtime As Double) As Long

'Bloomberg API
Public Declare Function AddRunningObject Lib "bofaddin.dll" (ByVal szMoniker As String, ByVal pVal As Application) As Integer
Public Declare Function APICoCreateInstance Lib "bbloader.dll" (ByVal lpszFilePathName As String, ByRef rclsid As GUID, riid As GUID, ByRef ppv As Object) As Long
Public Declare Function RemoveRunningObjects Lib "bofaddin.dll" () As Integer
'Bloomberg API - ToolsProxy
Public Declare Function Initialize Lib "bofaddin.dll" Alias "_Initialize@8" (ByVal App As Application, ByVal hwndOwner As Long) As Boolean
Public Declare Function ActivateTool Lib "bofaddin.dll" Alias "_ActivateTool@4" (Params As ToolParamsVt) As Boolean
Public Declare Function DeactivateTool Lib "bofaddin.dll" Alias "_DeactivateTool@0" ()
Public Declare Function RetrieveToolParams Lib "bofaddin.dll" Alias "_RetrieveToolParams@4" (Params As ToolParamsVt) As Boolean
Public Declare Function AsyncInvokeTool Lib "bofaddin.dll" Alias "_AsyncInvokeTool@4" (Params As ToolParamsVt) As Boolean
Public Declare Function ExcelAsyncInvokeDone Lib "bofaddin.dll" Alias "_ExcelAsyncInvokeDone@4" (Params As ToolParamsVt) As Boolean
Public Declare Sub Cleanup Lib "bofaddin.dll" Alias "_Cleanup@0" ()
#End If

'global constants
Public Const MAINMENUBAR                    As String = "Menu Bar"
Public Const SettingFileName                As String = "BBPTConfig.xml"
Public Const Setting_VersionSuffix_12Plus   As String = "2007"
Public Const CopyToPowerPoint_NamePrefix    As String = "bb_"
Public Const LinkedExcelFile_ExtensionFilter As String = ".xl*"
Public Const DefaultNewPasteShapeLeft       As Long = 50
Public Const DefaultNewPasteShapeTop        As Long = 100

Public Const MAX_PATH                       As Long = 260
Public Const OverviewPage                   As String = "Overview_PPT.htm"
Public Const WhatsNewPage                   As String = "What_s_New_PPT.htm"

'types
Public Type ACL
        AclRevision As Byte
        Sbz1 As Byte
        AclSize As Integer
        AceCount As Integer
        Sbz2 As Integer
End Type

Public Type GUID
    Data1 As Long
    Data2 As Integer
    Data3 As Integer
    Data4(7) As Byte
End Type

Public Type FILETIME
    dwLowDateTime As Long
    dwHighDateTime As Long
End Type

Public Type POINTAPI
    x As Long
    y As Long
End Type

Public Type RECT
    Left As Long
    Top As Long
    Right As Long
    Bottom As Long
End Type

Public Type SYSTEMTIME
    wYear As Integer
    wMonth As Integer
    wDayOfWeek As Integer
    wDay As Integer
    wHour As Integer
    wMinute As Integer
    wSecond As Integer
    wMilliseconds As Integer
End Type

Public Type UFILEDATA
    filename        As Variant
    PathIsRelative  As Boolean
    ModifiedDate    As Date
    CreatedDate     As Date
    Size            As Double
    Owner           As String
    NewFileFlag     As Boolean
End Type

Public Type WIN32_FIND_DATA
    dwFileAttributes    As Long
    ftCreationTime      As FILETIME
    ftLastAccessTime    As FILETIME
    ftLastWriteTime     As FILETIME
    nFileSizeHigh       As Long
    nFileSizeLow        As Long
    dwReserved0         As Long
    dwReserved1         As Long
    cFileName           As String * MAX_PATH
    cAlternate          As String * 14
End Type

Public Type WINDOWPLACEMENT
    Length As Long
    flags As Long
    showCmd As Long
    ptMinPosition As POINTAPI
    ptMaxPosition As POINTAPI
    rcNormalPosition As RECT
End Type

'enums
Public Enum lpaLinkPasteAspectRatio
    lpaSizeToDestinationBoth = 0
    lpaSizeToDestinationWidth = 1
    lpaSizeToDestinationHeight = 2
    lpaKeepOriginalSize = 3
    lpaIntelligentSizing = 4
End Enum

Public Enum lumLinkUpdateMode
    lumNoneUnknown = 0
    lumUpdateLinks
    lumManageLinks
    lumBrokenLinks
    lumShowSource
End Enum

Public Enum lusLinksUpdateScope
    lusNoneUnknown = 0
    lusSelectedShape = 1
    lusActiveSlide = 2
    lusPresentation = 3
End Enum

Public Enum lpsLinkUpdatePreparationStep
    lpsNoneUnknown = 0
    lpsStart = 1
    lpsGetShapeAndAttributes = 2
    lpsValidateWbk = 3
    lpsGetWbk = 4
    lpsValidateWbkRange = 5
    lpsCheckForNewerFiles = 6
    lpsCheckForMatchingFiles = 7
    lpsDo = 8
    lpsFinish = 9
End Enum

Public Enum lrsLinkReadyState
    lrsConflicted = -1
    lrsNotAnalyzed = 0
    lrsReady
    lrsNewerFiles
    lrsOtherFiles
    lrsBrokenNewClosed
    lrsBrokenSavedPathNotFound
    lrsBrokenCannotOpenWbk
    lrsBrokenRangeNotFound
    lrsBrokenChartCannotResolveSource
    lrsCannotOpenWbkCorrupt
    lrsCannotOpenWbkFilenameCollision
End Enum

Public Enum swcShowWindowCmd
    swcHide = 0
    swcNormal = 1
    swcMinimized = 2 'but activated
    swcMaximized = 3
    swcNormalNoActivate = 4
    swcShow = 5
    swcMinimize = 6 'activates next
    swcMinimizeNoActivate = 7
    swcShowNoActive = 8
    swcRestore = 9
    swcShowDefault = 10
    swcForceMinimized = 11
End Enum

Public Enum tssTocDividerShowSetting
    tssToC
    tssSectionNumbers
    tssPageNumbers
    tssFooterForDividers
    tssHyperlinks
End Enum

Public Enum urfRootFolders
    urfWindowsDesktop = &H0      ' CSIDL_DESKTOP: Virtual folder
    urfProgramsUser = &H2        ' CSIDL_PROGRAMS: File-system folder
    urfProgramsCommon = &H17     ' CSIDL_COMMON_PROGRAMS: File-system folder
    urfPersonal = &H5            ' CSIDL_PERSONAL: File-system folder
    urfFavorites = &H6           ' CSIDL_FAVORITES: File-system folder
    urfStartupUser = &H7         ' CSIDL_STARTUP: File-system folder
    urfStartupCommon = &H18      ' CSIDL_COMMON_STARTUP: File-system folder
    urfRecent = &H8              ' CSIDL_RECENT: File-system folder
    urfSendTo = &H9              ' CSIDL_SENDTO: File-system folder
    urfStartMenuUser = &HB       ' CSIDL_STARTMENU: File-system folder
    urfStartMenuCommon = &H16    ' CSIDL_COMMON_STARTMENU: File-system folder
    urfDesktopFolderUser = &H10      ' CSIDL_DESKTOPDIRECTORY: File-system folder
    urfDesktopFolderCommon = &H19    ' CSIDL_COMMON_DESKTOPDIRECTORY: File-system folder
    urfMyComputer = &H11         ' CSIDL_DRIVES: Virtual folder
    urfNetwork = &H12            ' CSIDL_NETWORK: Virtual folder
    urfTemplates = &H15          ' CSIDL_TEMPLATES: File-system folder
    urfAppData = &H1A            ' CSIDL_APPDATA: File-system folder
End Enum
'global variables
Public g_processID                          As String
Public gRibbonAddinName                     As String
Public gConnection                          As ADODB.Connection
Public DividerTitle                         As String
Public DividerSubTitle                      As String
Public DividerCancelled                     As Boolean
Public SubDividerChecked                    As Boolean
Public SlideNumberingOff                    As Boolean


' Constants for use with GetLocaleInfo
Private Const LOCALE_USER_DEFAULT           As Long = 1024
Private Const LOCALE_SISO639LANGNAME        As Long = 89
Private Const ISONAME_RESPONSE_LENGTH       As Long = 16


#If VBA7 Then
Private m_rtdModule                         As LongPtr
#Else
Private m_rtdModule                         As Long
#End If
'


Public Function ToLocalizedResourceName(resourceName As String, extension As String) As String
    pushTrace "ToLocalizedResourceName", "Loader_Globals.bas", resourceName, extension
Dim lenResponse As Integer
Dim isoName As String * ISONAME_RESPONSE_LENGTH
Dim uiCulture As String

If Not GetUserStringValue(OFFICE_TOOLS_SETTINGS_REGKEY, "Language", uiCulture) Then
    lenResponse = GetLocaleInfo(LOCALE_USER_DEFAULT, LOCALE_SISO639LANGNAME, isoName, Len(isoName))
    uiCulture = Left$(LCase(isoName), lenResponse - 1)
End If

If Left$(uiCulture, 2) = "en" Then
    uiCulture = ""
Else
    uiCulture = "_" & uiCulture
End If

ToLocalizedResourceName = resourceName & uiCulture & extension
    popTrace "ToLocalizedResourceName", ToLocalizedResourceName
End Function





Attribute VB_Name = "Loader_modBloombergUILoader"
Sub AutoExec()
pushTrace "AutoExec", "Loader_modBloombergUILoader.bas"
    Dim sOfficeToolsPath As String
    Dim sBloombergUIWordPath As String
    Dim i As Long
    Dim ws As WORD.AddIn
           
    loadAPILibrary
    Dim bofAddinLibLoaded As Boolean
    loadBofAddin bofAddinLibLoaded

    If Not isDisabledForOfficeToolsWord Then
        GetOfficeToolsPath sOfficeToolsPath
        'DRQS EN 43507865 - LinkV2/Legacy dual support
        If IsLinkManagerV2Available() Then
            sBloombergUIWordPath = sOfficeToolsPath & "\" & ADDIN_BLOOMBERG_UI_WORD
        Else
            sBloombergUIWordPath = sOfficeToolsPath & "\" & ADDIN_BLOOMBERG_UI_WORD_LEGACY
        End If
        If dir$(sBloombergUIWordPath) <> "" Then
            Set ws = Application.AddIns.Add(sBloombergUIWordPath, False)
            ws.Installed = True
        Else
            MsgBox "Bloomberg Office tools folder not accessible"
        End If
    End If

    For i = Application.AddIns.count To 1 Step -1
        If Application.AddIns(i).name = ADDIN_BLOOMBERG_UI_WORD_STARTUP Then
                Application.AddIns(i).Installed = msoFalse
        End If
    Next i
    ThisDocument.Close
    popTrace "AutoExec"
End Sub

Function IsWord64Bit() As Boolean
    pushTrace "IsWord64Bit", "Loader_modBloombergUILoader.bas"
If val(Application.Version) >= 12 Then
    If Mid$(Application.ProductCode, 20, 2) = "-1" Then
            IsWord64Bit = True
    End If
End If

    popTrace "IsWord64Bit", IsWord64Bit
End Function
Attribute VB_Name = "Loader_modConstants"
Option Explicit
Public Const ADDIN_BLOOMBERG_UI_WORD = "BloombergUI.dot"
Public Const ADDIN_BLOOMBERG_UI_WORD_STARTUP = "BloombergUILoader.dot"
'DRQS EN 43507865 - LinkV2/Legacy dual support
Public Const ADDIN_BLOOMBERG_UI_WORD_LEGACY = "BloombergUILegacy.dot"
Attribute VB_Name = "Loader_modUtility_Word"
Option Explicit

Private mxmlDom                             As DOMDocument
Private mxmlRoot                            As IXMLDOMElement
Private mUIDom                              As New DOMDocument

Private Const Setting_XMLContainerTagName   As String = "Content"
Public ShuttingDown As Boolean



'DRQS EN 43507865 - LinkV2/Legacy dual support
#If VBA7 Then
Public Function GetApplicationHandle() As LongPtr
pushTrace "GetApplicationHandle", "Loader_modUtility_Word.bas"
    Dim Hwnd As LongPtr
#Else
Public Function GetApplicationHandle() As Long
    pushTrace "GetApplicationHandle", "Loader_modUtility_Word.bas"
    Dim Hwnd As Long
#End If

    Dim VersionNo As String
    
    Hwnd = FindWindow("OpusApp", vbNullString)
    'VersionNo = Left(Application.Version, InStr(1, Application.Version, ".") - 1)
    GetApplicationHandle = Hwnd
    popTrace "GetApplicationHandle", GetApplicationHandle
End Function
Public Function uPathExists(pstrPath As String) As Boolean
    pushTrace "uPathExists", "Loader_modUtility_Word.bas", pstrPath
   uPathExists = (PathFileExists(pstrPath) = 1)
   popTrace "uPathExists", uPathExists
End Function

Private Function GetXMLSettingFile() As Boolean
   pushTrace "GetXMLSettingFile", "Loader_modUtility_Word.bas"
On Error GoTo handleError

    Dim strPath As String
    
    If GetOfficeToolsPath(strPath) = True Then
        strPath = strPath & "\" & SettingFileName
        If uPathExists(strPath) = False Then
            Set mxmlDom = New DOMDocument
            mxmlDom.Save strPath
        End If
    
        If Len(strPath) > 0 Then
            Set mxmlDom = New DOMDocument
            With mxmlDom
                .async = False
                .validateOnParse = False
                If .Load(strPath) = True Then
                    Set mxmlRoot = mxmlDom.DocumentElement
                    GetXMLSettingFile = True
                End If
            End With
        End If
    End If
    
ExitHere:
    popTrace "GetXMLSettingFile", GetXMLSettingFile
    Exit Function
handleError:
    Resume ExitHere
    popTrace "GetXMLSettingFile", GetXMLSettingFile
End Function

Private Function GetSettingTypeNode(pstrSettingType As String) As IXMLDOMNode
    pushTrace "GetSettingTypeNode", "Loader_modUtility_Word.bas", pstrSettingType
    Dim xmlNodeType     As IXMLDOMNode
    
    If GetXMLSettingFile() = True Then
        For Each xmlNodeType In mxmlRoot.ChildNodes
            If StrComp(xmlNodeType.BaseName, pstrSettingType, vbTextCompare) = 0 Then
                Set GetSettingTypeNode = xmlNodeType
                Exit For
            End If
        Next xmlNodeType
    End If

ExitHere:
    Set xmlNodeType = Nothing
    popTrace "GetSettingTypeNode", GetSettingTypeNode
    Exit Function
handleError:
    Resume ExitHere
    popTrace "GetSettingTypeNode", GetSettingTypeNode
End Function


Private Function GetSettingNode(pstrSettingName As String, _
                                pstrSettingType As String) As IXMLDOMNode
    pushTrace "GetSettingNode", "Loader_modUtility_Word.bas", pstrSettingName, pstrSettingType
On Error GoTo handleError
    
    Dim xmlNodeType     As IXMLDOMNode
    Dim xmlNodeVal      As IXMLDOMNode
    
    Set xmlNodeType = GetSettingTypeNode(pstrSettingType)
    If Not (xmlNodeType Is Nothing) Then
        For Each xmlNodeVal In xmlNodeType.ChildNodes
            If StrComp(xmlNodeVal.BaseName, pstrSettingName, vbTextCompare) = 0 Then
                Set GetSettingNode = xmlNodeVal
                Exit For
            End If
        Next xmlNodeVal
    End If

ExitHere:
    Set xmlNodeVal = Nothing
    Set xmlNodeType = Nothing
    popTrace "GetSettingNode"
    Exit Function
handleError:
    Resume ExitHere
    popTrace "GetSettingNode"
End Function

Public Function MySetting(pstrSettingName As String, _
                          pstrSettingType As String) As Variant
    pushTrace "MySetting", "Loader_modUtility_Word.bas", pstrSettingName, pstrSettingType
On Error GoTo handleError

    Dim xmlNodeVal      As IXMLDOMNode
    
    MySetting = Null
    Set xmlNodeVal = GetSettingNode(pstrSettingName, pstrSettingType)
    If Not (xmlNodeVal Is Nothing) Then
        If xmlNodeVal.HasChildNodes = True Then
            MySetting = MySetting & xmlNodeVal.ChildNodes(0).XML
        Else
            MySetting = xmlNodeVal.text
        End If
    End If

ExitHere:
    Set xmlNodeVal = Nothing
    popTrace "MySetting"
    Exit Function
handleError:
    Resume ExitHere
    Resume
    popTrace "MySetting"
End Function

Public Sub Write_LogFile_Simple(pstrFileName As String, _
                                pstrLog As String, _
                       Optional pblePathIsRelative As Boolean = False, _
                       Optional pbleForAppend As Boolean = True)
    pushTrace "Write_LogFile_Simple", "Loader_modUtility_Word.bas", pstrFileName, pstrLog, pblePathIsRelative, pbleForAppend

    Dim FileNum     As Integer
    Dim strPath     As String
    
    FileNum = FreeFile
    
    If pblePathIsRelative = True Then
        strPath = ActiveDocument.path & "\" & pstrFileName
    Else
        strPath = pstrFileName
    End If

    If pbleForAppend = False Then
        If uPathExists(strPath) = True Then
            Kill strPath
        End If
    End If
    
    Open strPath For Append As #FileNum
    Print #FileNum, pstrLog
    Close #FileNum

    popTrace "Write_LogFile_Simple"
End Sub
Public Function TempPathFull() As String
    pushTrace "TempPathFull", "Loader_modUtility_Word.bas"
    Dim strBuffer   As String
    Dim retval      As Long
    Const MAX_PATH  As Long = 260
    
    strBuffer = String$(MAX_PATH, 0)
    retval = GetLongPathName(Environ("Temp"), strBuffer, Len(strBuffer))
    TempPathFull = uQualifyPath(Left(strBuffer, retval))
    popTrace "TempPathFull", TempPathFull
End Function


Public Function uStringHandleForNullString(strTmp As String) As String
    pushTrace "uStringHandleForNullString", "Loader_modUtility_Word.bas", strTmp
On Error Resume Next

    Dim i       As Integer
    
    i = InStr(1, strTmp, vbNullChar, vbBinaryCompare)
    
    If i > 0 Then
        uStringHandleForNullString = Left$(strTmp, i - 1)
    Else
        uStringHandleForNullString = strTmp
    End If
    
    popTrace "uStringHandleForNullString", uStringHandleForNullString
End Function


Public Function uQualifyPath(pstrPath As String) As String
    pushTrace "uQualifyPath", "Loader_modUtility_Word.bas", pstrPath

    Dim strOut      As String

    If uPathIsFolder(pstrPath) = True Or uPathExists(pstrPath) = False Then
        If Right$(pstrPath, 1) <> "\" Then
            strOut = pstrPath & "\"
        Else
            strOut = pstrPath
        End If
    Else
        strOut = pstrPath
    End If

    uQualifyPath = strOut
    popTrace "uQualifyPath", uQualifyPath
End Function


Public Function uPathIsFolder(pstrPath As String) As Boolean
    pushTrace "uPathIsFolder", "Loader_modUtility_Word.bas", pstrPath
   Dim lngResult    As Long

   lngResult = PathIsDirectory(pstrPath)
   uPathIsFolder = (lngResult = vbDirectory) Or (lngResult = 1)
   popTrace "uPathIsFolder", uPathIsFolder
End Function

Public Function Nz(varValue As Variant, _
          Optional pvarNullResult As Variant = "") As Variant
   pushTrace "Nz", "Loader_modUtility_Word.bas", varValue, pvarNullResult
    If IsNull(varValue) = True Or IsEmpty(varValue) = True Then
        Nz = pvarNullResult
    Else
        Nz = varValue
    End If
    popTrace "Nz"
End Function

Public Function MyApplicationVersion() As Double
    pushTrace "MyApplicationVersion", "Loader_modUtility_Word.bas"
    Static myVersion    As Double
    
    If myVersion = 0 Then
        If Len(Application.Version) > 0 Then
            If val(Application.Version) > 0 Then
                myVersion = CDbl(val(Application.Version))
            End If
        End If
    End If
    MyApplicationVersion = myVersion
    popTrace "MyApplicationVersion", MyApplicationVersion
End Function

Public Sub Log_BBPTEvent(pstrType As String, _
                         pstrDescription As String, _
                Optional pstrAdditional As String = "")
    pushTrace "Log_BBPTEvent", "Loader_modUtility_Word.bas", pstrType, pstrDescription, pstrAdditional
    popTrace "Log_BBPTEvent"
End Sub

Attribute VB_Name = "ModuleImporter"
Option Explicit
Option Private Module

Const vbext_ct_ClassModule = 2
Const vbext_ct_Document = 100
Const vbext_ct_MSForm = 3
Const vbext_ct_StdModule = 1
Const DiffProgramLocation = "\..\..\build\vba\diff.exe"
Dim bleSkipModuleTracking As Boolean
Dim FSO As Object

Dim tmpExportFolders() As String

Function GetCodebaseDir() As String
    Static codebase As String
    If codebase = "" Then
        codebase = Environ("BOF_OSCAR_ROOT")
    End If
    If codebase = "" Then
        With Application.FileDialog(msoFileDialogFolderPicker)
            .Title = "[BOF_OSCAR_ROOT] NOT DEFINED! Please select your local [bof-addin\src\oscar] folder. Then run exportmodules again."
            .Show
            codebase = .SelectedItems(1)
        End With
        Exit Function
    End If
    GetCodebaseDir = codebase
End Function

Sub testImportModulesFromFolder()
    Dim codebase As String
    codebase = GetCodebaseDir()
    
#If EXCEL Then
    ReDim tmpExportFolders(4)
    tmpExportFolders(0) = codebase & "\OfficeAddins\ExcelAddins\XLAS\VBAModules\Excel\"
    tmpExportFolders(1) = codebase & "\OfficeAddins\Common\VBA\"
    tmpExportFolders(2) = codebase & "\OfficeAddins\Common\VBA\APIRegistry\"
    tmpExportFolders(3) = codebase & "\OfficeAddins\Common\VBA\OFCUI\"
    tmpExportFolders(4) = codebase & "\OfficeAddins\Common\VBA\LM\"
#ElseIf POWERPOINT And LOADER Then
    ReDim tmpExportFolders(3)
    tmpExportFolders(0) = codebase & "\OfficeAddins\PowerPoint\PowerPoint\Loader"
    tmpExportFolders(1) = codebase & "\OfficeAddins\Common\VBA\"
    tmpExportFolders(2) = codebase & "\OfficeAddins\Common\VBA\APIRegistry\"
    tmpExportFolders(3) = codebase & "\OfficeAddins\Common\VBA\OFCUI\"
#ElseIf POWERPOINT And LEGACY Then
    ReDim tmpExportFolders(5)
    tmpExportFolders(0) = codebase & "\OfficeAddins\PowerPoint\PowerPoint\"
    tmpExportFolders(1) = codebase & "\OfficeAddins\PowerPoint\PowerPoint\Legacy"
    tmpExportFolders(2) = codebase & "\OfficeAddins\Common\VBA\"
    tmpExportFolders(3) = codebase & "\OfficeAddins\Common\VBA\APIRegistry\"
    tmpExportFolders(4) = codebase & "\OfficeAddins\Common\VBA\OFCUI\"
    tmpExportFolders(5) = codebase & "\OfficeAddins\Common\VBA\LM\"
#ElseIf POWERPOINT Then
    ReDim tmpExportFolders(4)
    tmpExportFolders(0) = codebase & "\OfficeAddins\PowerPoint\PowerPoint\"
    tmpExportFolders(1) = codebase & "\OfficeAddins\Common\VBA\"
    tmpExportFolders(2) = codebase & "\OfficeAddins\Common\VBA\APIRegistry\"
    tmpExportFolders(3) = codebase & "\OfficeAddins\Common\VBA\OFCUI\"
    tmpExportFolders(4) = codebase & "\OfficeAddins\Common\VBA\LM\"
#ElseIf WORD And LEGACY Then
    ReDim tmpExportFolders(5)
    tmpExportFolders(0) = codebase & "\OfficeAddins\Word\Word\"
    tmpExportFolders(1) = codebase & "\OfficeAddins\Word\WordLegacy\"
    tmpExportFolders(2) = codebase & "\OfficeAddins\Common\VBA\"
    tmpExportFolders(3) = codebase & "\OfficeAddins\Common\VBA\APIRegistry\"
    tmpExportFolders(4) = codebase & "\OfficeAddins\Common\VBA\OFCUI\"
    tmpExportFolders(5) = codebase & "\OfficeAddins\Common\VBA\LM\"
#ElseIf WORD Then
    ReDim tmpExportFolders(4)
    tmpExportFolders(0) = codebase & "\OfficeAddins\Word\Word\"
    tmpExportFolders(1) = codebase & "\OfficeAddins\Common\VBA\"
    tmpExportFolders(2) = codebase & "\OfficeAddins\Common\VBA\APIRegistry\"
    tmpExportFolders(3) = codebase & "\OfficeAddins\Common\VBA\OFCUI\"
    tmpExportFolders(4) = codebase & "\OfficeAddins\Common\VBA\LM\"
#End If
    
    Dim idx As Integer
    For idx = LBound(tmpExportFolders) To UBound(tmpExportFolders)
        importModulesFromFolder tmpExportFolders(idx)
    Next idx
    checkModuleChanges "", True, True
    appendExportFoldersFunction tmpExportFolders
End Sub

Sub appendExportFoldersFunction(tmpExportFolders() As String)
    Dim V
    Dim VBProj As Variant
    Dim VBComp As Variant
    Dim CodeMod As Variant
    Dim lineNum As Long
    Const DQUOTE = """"
    Dim idx As Integer
    
    
    For Each VBComp In Application.VBE.ActiveVBProject.VBComponents
        If VBComp.name = "ModuleImporterHash" Then
            Set CodeMod = VBComp.CodeModule
            Exit For
        End If
    Next VBComp
    
    With CodeMod
        lineNum = .CountOfLines + 1
        .InsertLines lineNum, " "
        lineNum = lineNum + 1
        .InsertLines lineNum, "Public Function getExportFolders() As String()"
        lineNum = lineNum + 1
        .InsertLines lineNum, "    Static exportFolders(0 To " & UBound(tmpExportFolders) & ") As String"
        lineNum = lineNum + 1
        .InsertLines lineNum, "    Static assigned As Boolean"
        lineNum = lineNum + 1
        .InsertLines lineNum, "    If Not assigned Then"
        lineNum = lineNum + 1
        .InsertLines lineNum, "        assigned = True"
        lineNum = lineNum + 1
        
        For idx = LBound(tmpExportFolders) To UBound(tmpExportFolders)
            .InsertLines lineNum, "        exportFolders(" & CStr(idx) & ") = " & DQUOTE & tmpExportFolders(idx) & DQUOTE
            lineNum = lineNum + 1
        Next idx
        
        .InsertLines lineNum, "    End If"
        lineNum = lineNum + 1
        .InsertLines lineNum, "    getExportFolders = exportFolders"
        lineNum = lineNum + 1
        .InsertLines lineNum, "End Function"
    End With
End Sub


Public Function getFSO() As Object
    If FSO Is Nothing Then
        Set FSO = CreateObject("Scripting.FileSystemObject")
    End If
    Set getFSO = FSO
End Function

Public Sub importModuleFromFile(modulePath As String)
    If (dir(modulePath, vbNormal) <> "") Then
        Application.VBE.ActiveVBProject.VBComponents.Import modulePath
    End If
End Sub

Public Sub importModulesFromFolder(SourceFolder As String)
    Dim moduleFile As String
    Dim mask As String
    If (dir(SourceFolder, vbDirectory) <> "") Then
        mask = SourceFolder & "\" & "*.cls"
        moduleFile = dir(mask)
        Do While moduleFile <> ""
            If moduleFile = "ThisWorkbook.cls" Then
                ReadModuleCodeFromFile Application.VBE.ActiveVBProject.VBComponents.Item("ThisWorkbook"), SourceFolder & "\" & moduleFile
            ElseIf Mid(moduleFile, 1, 5) = "Sheet" Then
                ''NOTHING FOR NOW!
            Else
                Application.VBE.ActiveVBProject.VBComponents.Import SourceFolder & "\" & moduleFile
            End If
            moduleFile = dir
        Loop
        
        mask = SourceFolder & "\" & "*.bas"
        moduleFile = dir(mask)
        Do While moduleFile <> ""
            If moduleFile = "ModuleImporter.bas" Then
                ''NOTHING FOR NOW!
            Else
                Application.VBE.ActiveVBProject.VBComponents.Import SourceFolder & "\" & moduleFile
            End If
            moduleFile = dir
        Loop
        
        mask = SourceFolder & "\" & "*.frm"
        moduleFile = dir(mask)
        Do While moduleFile <> ""
            Application.VBE.ActiveVBProject.VBComponents.Import SourceFolder & "\" & moduleFile
            moduleFile = dir
        Loop
    End If
End Sub

Sub ForceExportModules()
    Dim codebase As String
    On Error GoTo handleError
    bleSkipModuleTracking = True
    ExportModules
handleError:
    bleSkipModuleTracking = False
End Sub

Sub WriteModuleCodeToFile(VBComp As Variant, strPath As String)
    Dim oFile As Object
    Dim strLines As String
    
    If VBComp.CodeModule.CountOfLines > 0 Then
        Set oFile = getFSO.CreateTextFile(strPath)
            
        strLines = VBComp.CodeModule.Lines(1, VBComp.CodeModule.CountOfLines)
        oFile.WriteLine strLines
        oFile.Close
    End If
End Sub

Sub ReadModuleCodeFromFile(VBComp As Variant, strPath As String)
    Dim oFile As Object
    Dim strLines As String
    Dim deleteLineCount As Integer
    Dim i As Integer
    
    deleteLineCount = 0
    
    VBComp.CodeModule.AddFromFile strPath
    strLines = VBComp.CodeModule.Lines(1, 1)
    If (InStr(strLines, "VERSION 1.0 CLASS") > 0) Then
        For i = 2 To VBComp.CodeModule.CountOfLines + 1
            strLines = VBComp.CodeModule.Lines(i, 1)
            If (InStr(LCase(strLines), LCase("Option Explicit")) > 0) Then
                deleteLineCount = i - 1
                Exit For
            End If
        Next i
    End If
    If deleteLineCount > 0 Then
        VBComp.CodeModule.DeleteLines 1, deleteLineCount
    End If
End Sub

Function overwriteIfChanged(newFile As String, AppSpecificTargetFile As String) As Boolean
    Dim result As Integer
    Dim tempOut As String
    Dim f
    Dim doCopy As Boolean
    doCopy = False
    Dim actionReport As String
    Dim targetFile As String
    
    Dim wsh As Object
    Set wsh = VBA.CreateObject("WScript.Shell")
    Dim waitOnReturn As Boolean: waitOnReturn = True
    Dim windowStyle As Integer: windowStyle = 0
    Dim errorCode As Integer
    
    Dim codebase As String
    codebase = GetCodebaseDir()
    Dim exportFolders() As String
    
    overwriteIfChanged = False
    
    exportFolders = Application.Run("getExportFolders")
    
    '''''Check in which folder the file is residing currently'''
    Dim idx As Integer
    For idx = LBound(exportFolders) To UBound(exportFolders)
        If getFSO().FileExists(codebase & "\" & exportFolders()(idx) & AppSpecificTargetFile) Then
            targetFile = codebase & "\" & exportFolders()(idx) & "\" & AppSpecificTargetFile
            Exit For
        End If
    Next idx
    
    If targetFile = "" Then
        targetFile = codebase & "\" & exportFolders()(0) & "\" & AppSpecificTargetFile
    End If
    
    errorCode = wsh.Run(Chr(34) & GetCodebaseDir() & DiffProgramLocation & Chr(34) & " -i " & newFile & " " & targetFile, windowStyle, waitOnReturn)
    If errorCode = 0 Then
        doCopy = False
    Else
        doCopy = True
    End If
    
    If doCopy And getFSO().FileExists(newFile) Then
        If getFSO().FileExists(targetFile) Then
            getFSO().DeleteFile (targetFile)
        End If
        getFSO().CopyFile newFile, targetFile
        actionReport = "CHANGED "
    Else
        actionReport = "KEPT    "
    End If
        
    If InStr(targetFile, ".bak") > 0 Then
        targetFile = newFile
    End If
    
    Debug.Print actionReport & " [" & targetFile & "]"
    
    Set wsh = Nothing
    overwriteIfChanged = doCopy
End Function


Sub ExportModules()
    Dim VBComp As Variant
    Dim tempFile As String
    Dim lineCharCount As Integer
    Dim tmpSavePath As String
    If GetCodebaseDir = "" Then
        Debug.Print "To avoid the previous dialog you can set the BOF_OSCAR_ROOT variable in your global environment."
        Debug.Print "No modules were exported yet. Please click (set focus) on the source code, then run ExportModules again!"
        Exit Sub
    End If
#If POWERPOINT Then
#If LOADER Then
#Else
        Dim i As Integer
        For i = 1 To Application.AddIns.count
            If Application.AddIns(i).name = "BloombergUIPPT" Then
                Application.AddIns(i).Loaded = False
            End If
        Next i
#End If
#End If

    tmpSavePath = Environ$("TEMP")
    
    lineCharCount = 0
    If dir(tmpSavePath, vbDirectory) <> "" Then
        tempFile = tmpSavePath & "\" & "TempFile"
        For Each VBComp In Application.VBE.ActiveVBProject.VBComponents
            If checkModuleChanges(VBComp.name, True) Or (VBComp.Type = vbext_ct_MSForm And VBComp.HasOpenDesigner) Then
                If lineCharCount > 0 Then
                    lineCharCount = 0
                    Debug.Print
                End If
                Select Case VBComp.Type
                    Case vbext_ct_StdModule
                        VBComp.Export tempFile
                        overwriteIfChanged tempFile, VBComp.name & ".bas"
                    Case vbext_ct_Document
                        #If EXCEL Then
                        WriteModuleCodeToFile VBComp, tempFile
                        overwriteIfChanged tempFile, VBComp.name & ".cls"
                        #End If
                    Case vbext_ct_ClassModule
                        ' ThisDocument and class modules
                        VBComp.Export tempFile
                        overwriteIfChanged tempFile, VBComp.name & ".cls"
                    Case vbext_ct_MSForm
                        '''' For Forms we have to export to the correct file, otherwise the wrong info about temp
                        '''' file will be stuck in the file causing problems!
                        VBComp.Export tmpSavePath & "\" & VBComp.name & ".frm"
                        overwriteIfChanged tmpSavePath & "\" & VBComp.name & ".frm", VBComp.name & ".frm"
                        overwriteIfChanged tmpSavePath & "\" & VBComp.name & ".frx", VBComp.name & ".frx"
                        Kill tmpSavePath & "\" & VBComp.name & ".frm"
                        Kill tmpSavePath & "\" & VBComp.name & ".frx"
                    Case Else
                        VBComp.Export tempFile
                        overwriteIfChanged tempFile, tmpSavePath & "\" & VBComp.name
                End Select
            Else
                Debug.Print ".";
                lineCharCount = lineCharCount + 1
                If (lineCharCount >= 100) Then
                    Debug.Print
                    lineCharCount = 0
                End If
            End If
        Next
        If dir(tempFile) <> "" Then
            Kill tempFile
        End If
    End If
    If (lineCharCount > 0) Then Debug.Print
    Debug.Print "Export done."
End Sub

Sub deleteAllModules()
    Dim VBComp As Variant
    Dim cnt As Integer
    For Each VBComp In Application.VBE.ActiveVBProject.VBComponents
        If VBComp.name <> "ModuleImporter" And VBComp.name <> "ThisWorkbook" And VBComp.Type <> vbext_ct_Document Then
            Application.VBE.ActiveVBProject.VBComponents.Remove VBComp
        ElseIf VBComp.Type = vbext_ct_Document Then
            cnt = VBComp.CodeModule.CountOfLines
            If cnt > 0 Then
                VBComp.CodeModule.DeleteLines 1, VBComp.CodeModule.CountOfLines
            End If
        End If
    Next
End Sub


Function computeCRC16(txt As String) As String
Dim x As Long
Dim mask, i, j, nC, Crc As Integer
Dim c As String

Crc = &HFFFF

For nC = 1 To Len(txt) Step 2
    j = val("&H" + LCase$(Mid(txt, nC, 2)))
    Crc = Crc Xor j
    For j = 1 To 8
        mask = 0
        If Crc / 2 <> Int(Crc / 2) Then mask = &HA001
        Crc = Int(Crc / 2) And &H7FFF: Crc = Crc Xor mask
    Next j
Next nC

computeCRC16 = Hex$(Crc) ''

End Function


Public Function checkModuleChanges(Optional moduleName As String = "", Optional Reset As Boolean = False, Optional Serialize As Boolean = False, Optional PassedEnvCodeBaseDir As String = "") As Boolean
    Dim VBComp As Variant
    Dim strContent As String
    Dim strHash As String
    Dim strHashNew As String
    Dim allComponents As Variant
    Static moduleChanges As Object
    Dim lineCharCount As Integer
    lineCharCount = 0
    
    checkModuleChanges = False
    
    ''''Never save for ModuleImporterHash:   False means no changes'''
    If moduleName = "ModuleImporterHash" Then
        Exit Function
    End If
    
    ''''Always save when the SkipModuleTracking is set: True means Yes, there were changes! '''
    If bleSkipModuleTracking Then
        checkModuleChanges = True
        Exit Function
    End If
    
    
    If moduleChanges Is Nothing Then
        Set moduleChanges = CreateObject("Scripting.Dictionary")
        On Error Resume Next
        Application.Run "PopulateHashDictionary", moduleChanges
        On Error GoTo 0
    End If
    
    If moduleName = "" Then
        Set allComponents = Application.VBE.ActiveVBProject.VBComponents
    Else
        Set allComponents = New Collection
        allComponents.Add Application.VBE.ActiveVBProject.VBComponents.Item(moduleName)
    End If
    
    For Each VBComp In allComponents
        Dim numLines As Integer
        numLines = VBComp.CodeModule.CountOfLines
        If numLines = 0 Then
            numLines = 1
        End If
        strContent = VBComp.name & vbNewLine & "--" & vbNewLine & VBComp.CodeModule.Lines(1, numLines)
        strHashNew = computeCRC16(strContent) '''Application.Run("hashStr", strContent)
        If (moduleChanges.Exists(VBComp.name)) Then
            strHash = moduleChanges.Item(VBComp.name)
        Else
            strHash = vbNullString
        End If
        If moduleName = "" Then
            If strHashNew <> strHash Then
                Debug.Print "+";
            Else
                Debug.Print ".";
            End If
            lineCharCount = lineCharCount + 1
            If (lineCharCount >= 100) Then
                Debug.Print
                lineCharCount = 0
            End If
        End If
        If strHashNew <> strHash Then
            checkModuleChanges = True
            If (moduleChanges.Exists(VBComp.name)) Then
                If Reset Then
                    moduleChanges.Item(VBComp.name) = strHashNew
                End If
            Else
                moduleChanges.Add VBComp.name, strHashNew
            End If
        End If
    Next VBComp
    
    
    If Serialize Then
        Dim V
        Dim VBProj As Variant
        Dim CodeMod As Variant
        Dim lineNum As Long
        Const DQUOTE = """"
        
        For Each VBComp In Application.VBE.ActiveVBProject.VBComponents
            If VBComp.name = "ModuleImporterHash" Then
                Application.VBE.ActiveVBProject.VBComponents.Remove VBComp
                Exit For
            End If
        Next VBComp
        
        Set VBProj = Application.VBE.ActiveVBProject
        Set VBComp = VBProj.VBComponents.Add(vbext_ct_StdModule)
        VBComp.name = "ModuleImporterHash"
        Set CodeMod = VBComp.CodeModule
        
        '''''''''''''''''''''''' GET THE GIT HASH '''''''''''''''''''''''''
        On Error Resume Next
        Dim GitHash As String
        Dim HASHfile As String
        
        Dim f, contents, var1
        Set f = getFSO().OpenTextFile(PassedEnvCodeBaseDir & "\.git\HEAD", 1)
        contents = f.ReadAll
        f.Close
        f = Null
        
        HASHfile = Replace$(Mid$(contents, 6), "/", "\")
        HASHfile = Left$(HASHfile, Len(HASHfile) - 1)
        HASHfile = PassedEnvCodeBaseDir & "\.git\" & HASHfile & ""
        Set f = getFSO().OpenTextFile(HASHfile)
        GitHash = Left$(f.ReadAll, 10)
        f.Close
        On Error GoTo 0
        '''''''''''''''''''''''' GOT THE GIT HASH ''''''''''''''''''''''''''
        
        With CodeMod
            lineNum = .CountOfLines + 1
            
            .InsertLines lineNum, "Public Const LatestGitHash = " & DQUOTE & GitHash & DQUOTE
            lineNum = lineNum + 1
            .InsertLines lineNum, "Public Const BuildDateTime = " & DQUOTE & Now & DQUOTE
            lineNum = lineNum + 1
            .InsertLines lineNum, ""
            lineNum = lineNum + 1
                                    
            .InsertLines lineNum, "Public Sub PopulateHashDictionary(byref d as Object)"
            For Each V In moduleChanges.Keys
                lineNum = lineNum + 1
                .InsertLines lineNum, "    d.add " & DQUOTE & V & DQUOTE & "," & DQUOTE & moduleChanges.Item(V) & DQUOTE
            Next V
            lineNum = lineNum + 1
            .InsertLines lineNum, "End Sub"
        End With
    End If
    
    
    If moduleName = "" Then
        If lineCharCount > 0 Then Debug.Print
        Debug.Print "Done (Re)hashing."
    End If
End Function




Attribute VB_Name = "ModuleImporterHash"
Public Const LatestGitHash = ""
Public Const BuildDateTime = "11/5/2019 2:56:51 PM"

Public Sub PopulateHashDictionary(ByRef d As Object)
    d.Add "ThisDocument", "FCD6"
    d.Add "ModuleImporter", "1113"
    d.Add "Loader_Globals", "F1BA"
    d.Add "Loader_modBloombergUILoader", "CC78"
    d.Add "Loader_modConstants", "ABF"
    d.Add "Loader_modUtility_Word", "B9AB"
    d.Add "BBPTv2_FunctionTracing", "D314"
    d.Add "ApiRegistry", "D777"
    d.Add "APIRegistryUtil", "8C33"
    d.Add "ComDllLoader", "69E5"
    d.Add "SettingsUtil", "3911"
    d.Add "V3Status", "44E7"
    d.Add "RegistryHelper", "7C3F"
    d.Add "XMLHelperTools", "4E3E"
    d.Add "OFC_Utils", "4198"
End Sub
 
Public Function getExportFolders() As String()
    Static exportFolders(0 To 4) As String
    Static assigned As Boolean
    If Not assigned Then
        assigned = True
        exportFolders(0) = "\OfficeAddins\VBA\Word\Loader\"
        exportFolders(1) = "\OfficeAddins\VBA\Common\"
        exportFolders(2) = "\OfficeAddins\VBA\Common\APIRegistry\"
        exportFolders(3) = "\OfficeAddins\VBA\Word\Main"
        exportFolders(4) = "\OfficeAddins\VBA\Common\OFCUI"
    End If
    getExportFolders = exportFolders
End Function
Attribute VB_Name = "OFC_Utils"
Option Explicit


#If VBA7 Then
Public Declare PtrSafe Function CreateMutex Lib "kernel32" Alias "CreateMutexA" (ByVal dwDesiredAccess As Long, ByVal bInitialOwner As Long, ByVal lpName As String) As LongPtr
Public Declare PtrSafe Function CloseHandle Lib "kernel32" (ByVal hObject As LongPtr) As Long
Public Declare PtrSafe Function OpenMutex Lib "kernel32" Alias "OpenMutexA" (ByVal dwDesiredAccess As Long, ByVal bInheritAccess As Long, ByVal lpName As String) As LongPtr
#Else
Public Declare Function CreateMutex Lib "kernel32" Alias "CreateMutexA" (ByVal Access As Long, ByVal bInitialOwner As Long, ByVal lpName As String) As Long
Public Declare Function CloseHandle Lib "kernel32" (ByVal hObject As Long) As Long
Public Declare Function OpenMutex Lib "kernel32" Alias "OpenMutexA" (ByVal dwDesiredAccess As Long, ByVal bInheritAccess As Long, ByVal lpName As String) As Long
#End If


Public Sub CreateBofMutex(name As String)
pushTrace "CreateBofMutex", "OFC_Utils.bas", name
    #If VBA7 Then
    Dim hAddinMutex As LongPtr
    #Else
    Dim hAddinMutex As Long
    #End If
    On Error GoTo handleError
    
    hAddinMutex = CreateMutex(0, 1, "Local\bof_" & name & "_" & CStr(GetCurrentProcessId()))
    
    'Note: We do want to keep the handle open for the lifetime of the Application
    'Do we want to check whether it was already created or not? I should be always the first one to create this handle here!
    'Log_BBPTEvent "MUTEX", "Create mutex for [" & name & "]"
handleError:

    popTrace "CreateBofMutex"
End Sub

Public Function CheckIfBofMutexExists(name As String) As Boolean
    pushTrace "CheckIfBofMutexExists", "OFC_Utils.bas", name
    #If VBA7 Then
    Dim hAddinMutex As LongPtr
    #Else
    Dim hAddinMutex As Long
    #End If
    CheckIfBofMutexExists = False
    On Error GoTo handleError
    
    hAddinMutex = OpenMutex(1048576, 0, "Local\bof_" & name & "_" & CStr(GetCurrentProcessId()))
    If hAddinMutex = 0 Then
        CheckIfBofMutexExists = False
    Else
        CheckIfBofMutexExists = True
        CloseHandle hAddinMutex
    End If
        
    'Note: We do want to keep the handle open for the lifetime of the Application
    'Do we want to check whether it was already created or not? I should be always the first one to create this handle here!
    'Log_BBPTEvent "MUTEX", "Create mutex for [" & name & "]"
handleError:

    popTrace "CheckIfBofMutexExists", CheckIfBofMutexExists
End Function


Attribute VB_Name = "RegistryHelper"
Option Explicit

'version:
'   2011-06-23.1

#Const USE_WOW6432NODE = True

#If VBA7 Then
Private Declare PtrSafe Function RegCloseKey Lib "advapi32.dll" (ByVal hKey As LongPtr) As Long
Private Declare PtrSafe Function RegConnectRegistry Lib "advapi32.dll" Alias "RegConnectRegistryA" (ByVal lpMachineName As String, ByVal hKey As LongPtr, phkResult As LongPtr) As Long
Private Declare PtrSafe Function RegCreateKey Lib "advapi32.dll" Alias "RegCreateKeyA" (ByVal hKey As LongPtr, ByVal lpSubKey As String, phkResult As LongPtr) As Long
Private Declare PtrSafe Function RegCreateKeyEx Lib "advapi32.dll" Alias "RegCreateKeyExA" (ByVal hKey As LongPtr, ByVal lpSubKey As String, ByVal Reserved As Long, ByVal lpClass As String, ByVal dwOptions As Long, ByVal samDesired As Long, lpSecurityAttributes As SECURITY_ATTRIBUTES, phkResult As LongPtr, lpdwDisposition As Long) As Long
Private Declare PtrSafe Function RegDeleteKey Lib "advapi32.dll" Alias "RegDeleteKeyA" (ByVal hKey As LongPtr, ByVal lpSubKey As String) As Long
Private Declare PtrSafe Function RegDeleteKeyEx Lib "advapi32.dll" Alias "RegDeleteKeyExA" (ByVal hKey As LongPtr, ByVal lpSubKey As String, ByVal samDesired As Long, ByVal Reserved As Long) As Long
Private Declare PtrSafe Function RegDeleteValue Lib "advapi32.dll" Alias "RegDeleteValueA" (ByVal hKey As LongPtr, ByVal lpValueName As String) As Long
Private Declare PtrSafe Function RegEnumKey Lib "advapi32.dll" Alias "RegEnumKeyA" (ByVal hKey As LongPtr, ByVal dwIndex As Long, ByVal lpName As String, ByVal cbName As Long) As Long
Private Declare PtrSafe Function RegEnumKeyEx Lib "advapi32.dll" Alias "RegEnumKeyExA" (ByVal hKey As LongPtr, ByVal dwIndex As Long, ByVal lpName As String, lpcbName As Long, ByVal lpReserved As LongPtr, ByVal lpClass As String, lpcbClass As Long, lpftLastWriteTime As FILETIME) As Long
Private Declare PtrSafe Function RegEnumValue Lib "advapi32.dll" Alias "RegEnumValueA" (ByVal hKey As LongPtr, ByVal dwIndex As Long, ByVal lpValueName As String, lpcbValueName As Long, ByVal lpReserved As LongPtr, lpType As Long, lpData As Byte, lpcbData As Long) As Long
Private Declare PtrSafe Function RegFlushKey Lib "advapi32.dll" (ByVal hKey As LongPtr) As Long
Private Declare PtrSafe Function RegGetKeySecurity Lib "advapi32.dll" (ByVal hKey As LongPtr, ByVal SecurityInformation As Long, pSecurityDescriptor As SECURITY_DESCRIPTOR, lpcbSecurityDescriptor As Long) As Long
Private Declare PtrSafe Function RegLoadKey Lib "advapi32.dll" Alias "RegLoadKeyA" (ByVal hKey As LongPtr, ByVal lpSubKey As String, ByVal lpFile As String) As Long
Private Declare PtrSafe Function RegNotifyChangeKeyValue Lib "advapi32.dll" (ByVal hKey As LongPtr, ByVal bWatchSubtree As Long, ByVal dwNotifyFilter As Long, ByVal hEvent As LongPtr, ByVal fAsynchronus As Long) As Long
Private Declare PtrSafe Function RegOpenKey Lib "advapi32.dll" Alias "RegOpenKeyA" (ByVal hKey As LongPtr, ByVal lpSubKey As String, phkResult As LongPtr) As Long
Private Declare PtrSafe Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (ByVal hKey As LongPtr, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As LongPtr) As Long
Private Declare PtrSafe Function RegQueryInfoKey Lib "advapi32.dll" Alias "RegQueryInfoKeyA" (ByVal hKey As LongPtr, ByVal lpClass As String, lpcbClass As Long, ByVal lpReserved As LongPtr, lpcSubKeys As Long, lpcbMaxSubKeyLen As Long, lpcbMaxClassLen As Long, lpcValues As Long, lpcbMaxValueNameLen As Long, lpcbMaxValueLen As Long, lpcbSecurityDescriptor As Long, lpftLastWriteTime As FILETIME) As Long
Private Declare PtrSafe Function RegQueryValue Lib "advapi32.dll" Alias "RegQueryValueA" (ByVal hKey As LongPtr, ByVal lpSubKey As String, ByVal lpValue As String, lpcbValue As Long) As Long
Private Declare PtrSafe Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hKey As LongPtr, ByVal lpValueName As String, ByVal lpReserved As LongPtr, lpType As Long, lpData As Any, lpcbData As Long) As Long         ' Note that if you declare the lpData parameter as String, you must pass it By Value.
Private Declare PtrSafe Function RegReplaceKey Lib "advapi32.dll" Alias "RegReplaceKeyA" (ByVal hKey As LongPtr, ByVal lpSubKey As String, ByVal lpNewFile As String, ByVal lpOldFile As String) As Long
Private Declare PtrSafe Function RegRestoreKey Lib "advapi32.dll" Alias "RegRestoreKeyA" (ByVal hKey As LongPtr, ByVal lpFile As String, ByVal dwFlags As Long) As Long
Private Declare PtrSafe Function RegSaveKey Lib "advapi32.dll" Alias "RegSaveKeyA" (ByVal hKey As LongPtr, ByVal lpFile As String, lpSecurityAttributes As SECURITY_ATTRIBUTES) As Long
Private Declare PtrSafe Function RegSetKeySecurity Lib "advapi32.dll" (ByVal hKey As LongPtr, ByVal SecurityInformation As Long, pSecurityDescriptor As SECURITY_DESCRIPTOR) As Long
Private Declare PtrSafe Function RegSetValue Lib "advapi32.dll" Alias "RegSetValueA" (ByVal hKey As LongPtr, ByVal lpSubKey As String, ByVal dwType As Long, ByVal lpData As String, ByVal cbData As Long) As Long
Private Declare PtrSafe Function RegSetValueEx Lib "advapi32.dll" Alias "RegSetValueExA" (ByVal hKey As LongPtr, ByVal lpValueName As String, ByVal Reserved As Long, ByVal dwType As Long, lpData As Any, ByVal cbData As Long) As Long         ' Note that if you declare the lpData parameter as String, you must pass it By Value.
Private Declare PtrSafe Function RegUnLoadKey Lib "advapi32.dll" Alias "RegUnLoadKeyA" (ByVal hKey As LongPtr, ByVal lpSubKey As String) As Long
Private Declare PtrSafe Function SHDeleteKey Lib "shlwapi" Alias "SHDeleteKeyA" (ByVal hKey As LongPtr, ByVal lpSubKey As String) As Long
Private Type SECURITY_ATTRIBUTES
    nLength As Long
    lpSecurityDescriptor As LongPtr
    bInheritHandle As Long
End Type
Private Type SECURITY_DESCRIPTOR
        Revision As Byte
        Sbz1 As Byte
        control As Integer
        Owner As LongPtr
        Group As LongPtr
        Sacl As ACL
        Dacl As ACL
End Type
Private hKey As LongPtr
#Else
Private Declare Function RegCloseKey Lib "advapi32.dll" (ByVal hKey As Long) As Long
Private Declare Function RegCreateKey Lib "advapi32.dll" Alias "RegCreateKeyA" (ByVal hKey As Long, _
                                                                                ByVal lpSubKey As String, _
                                                                                phkResult As Long) As Long
Private Declare Function RegCreateKeyEx Lib "advapi32.dll" Alias "RegCreateKeyExA" (ByVal hKey As Long, _
                                                                                    ByVal lpSubKey As String, ByVal ulReserved As Long, _
                                                                                    ByVal lpClass As String, ByVal ulOptions As Long, _
                                                                                    ByVal samDesired As Long, lpSecurityAttributes As SECURITY_ATTRIBUTES, _
                                                                                    phkResult As Long, lDisposition As Long) As Long
Private Declare Function RegDeleteValue Lib "advapi32.dll" Alias "RegDeleteValueA" (ByVal hCurKey As Long, _
                                                                                    ByVal lpValueName As String) As Long
Private Declare Function RegDeleteKey Lib "advapi32.dll" Alias "RegDeleteKeyA" (ByVal hKey As Long, _
                                                                                ByVal lpSubKey As String) As Long
Private Declare Function RegDeleteKeyEx Lib "advapi32.dll" Alias "RegDeleteKeyExA" (ByVal hKey As Long, _
                                                                                    ByVal lpSubKey As String, _
                                                                                    ByVal samDesired As Long, _
                                                                                    ByVal Reserved As Long) As Long
Private Declare Function RegEnumKeyEx Lib "advapi32.dll" Alias "RegEnumKeyExA" (ByVal hCurKey As Long, _
                                                                                ByVal dwIndex As Long, _
                                                                                ByVal lpName As String, _
                                                                                lpcbName As Long, _
                                                                                lpReserved As Long, _
                                                                                ByVal lpClass As String, _
                                                                                lpcbClass As Long, _
                                                                                lpftLastWriteTime As FILETIME) As Long
Private Declare Function RegEnumValue Lib "advapi32.dll" Alias "RegEnumValueA" (ByVal hCurKey As Long, _
                                                                                ByVal dwIndex As Long, _
                                                                                ByVal lpValueName As String, _
                                                                                lpcbValueName As Long, _
                                                                                ByVal lpReserved As Long, _
                                                                                lpType As Long, _
                                                                                lpData As Any, _
                                                                                lpcbData As Long) As Long
Private Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (ByVal hKey As Long, _
                                                                                ByVal lpSubKey As String, _
                                                                                ByVal ulOptions As Long, _
                                                                                ByVal samDesired As Long, _
                                                                                phkResult As Long) As Long
Private Declare Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hKey As Long, _
                                                                                      ByVal lpValueName As String, _
                                                                                      ByVal lpReserved As Long, _
                                                                                      lpType As Long, _
                                                                                      lpData As Any, _
                                                                                      lpcbData As Long) As Long
Private Declare Function RegQueryInfoKey Lib "advapi32.dll" Alias "RegQueryInfoKeyA" (ByVal hCurKey As Long, _
                                                                                      ByVal lpClass As String, _
                                                                                      lpcbClass As Long, _
                                                                                      ByVal lpReserved As Long, _
                                                                                      lpcSubKeys As Long, _
                                                                                      lpcbMaxSubKeyLen As Long, _
                                                                                      lpcbMaxClassLen As Long, _
                                                                                      lpcValues As Long, _
                                                                                      lpcbMaxValueNameLen As Long, _
                                                                                      lpcbMaxValueLen As Long, _
                                                                                      lpcbSecurityDescriptor As Long, _
                                                                                      lpftLastWriteTime As FILETIME) As Long
Private Declare Function RegSetValueEx Lib "advapi32.dll" Alias "RegSetValueExA" (ByVal hKey As Long, _
                                                                                  ByVal lpValueName As String, _
                                                                                  ByVal Reserved As Long, _
                                                                                  ByVal dwType As Long, _
                                                                                  lpData As Any, _
                                                                                  ByVal cbData As Long) As Long
Private Declare Function SHDeleteKey Lib "shlwapi" Alias "SHDeleteKeyA" (ByVal hKey As Long, _
                                                                         ByVal lpSubKey As String) As Long
Private Declare Function GetKeyState Lib "user32" (ByVal nVirtKey As Long) As Integer

Private Type SECURITY_ATTRIBUTES
    nLength As Long
    lpSecurityDescriptor As Long
    bInheritHandle As Long
End Type
Private Type SECURITY_DESCRIPTOR
        Revision As Byte
        Sbz1 As Byte
        control As Integer
        Owner As Long
        Group As Long
        Sacl As ACL
        Dacl As ACL
End Type
Private hKey As Long
#End If


Public Enum RegRoot
  HKEY_CLASSES_ROOT = &H80000000
  HKEY_CURRENT_USER = &H80000001   'default
  HKEY_LOCAL_MACHINE = &H80000002
End Enum

Public Const REG_SZ = 1
Public Const REG_EXPAND_SZ = 2
Public Const REG_DWORD = 4
Public Const REG_DWORD_LITTLE_ENDIAN = REG_DWORD
Public Const REG_MULTI_SZ = 7
Public Const STANDARD_RIGHTS_READ = &H20000
Public Const STANDARD_RIGHTS_WRITE = &H20000
Public Const STANDARD_RIGHTS_ALL = &H1F0000
Public Const KEY_CREATE_LINK = &H20
Public Const KEY_ENUMERATE_SUB_KEYS = &H8
Public Const KEY_NOTIFY = &H10
Public Const KEY_SET_VALUE = &H2
Public Const KEY_CREATE_SUB_KEY = &H4
Public Const KEY_WOW64_32KEY As Long = &H200
Public Const KEY_WOW64_64KEY As Long = &H100
Public Const SYNCHRONIZE = &H100000
Public Const KEY_QUERY_VALUE = &H1

' Access right to query and enumerate values.
Public Const KEY_READ = ((STANDARD_RIGHTS_READ Or _
  KEY_QUERY_VALUE Or KEY_ENUMERATE_SUB_KEYS Or _
  KEY_NOTIFY) And (Not SYNCHRONIZE))
  
'Access right to create values and keys.
Public Const KEY_WRITE = ((STANDARD_RIGHTS_WRITE Or _
  KEY_SET_VALUE Or KEY_CREATE_SUB_KEY) And _
   (Not SYNCHRONIZE))
   
'Access right to create/delete values and keys.
Public Const KEY_ALL_ACCESS = ((STANDARD_RIGHTS_ALL Or _
  KEY_QUERY_VALUE Or KEY_SET_VALUE Or _
  KEY_CREATE_SUB_KEY Or KEY_ENUMERATE_SUB_KEYS Or _
  KEY_NOTIFY Or KEY_CREATE_LINK) And (Not SYNCHRONIZE))
  
'/////////////////////////////////////////////////////////////////////////////////////////
'//  These values are taken from
'//  TRUNK_X64\Office Tools\Trunk\RTD Servers\Interprocess\Client\Bloomberg.Util\Registry.h
'//  If you make a change here, please update Registry.h as well and vice-versa.
'/////////////////////////////////////////////////////////////////////////////////////////

'///////////////////////////////////////////////////////////
'//                  Excel API Keys
'///////////////////////////////////////////////////////////
#If Win64 And USE_OFFICE_TOOLS_WOW6432NODE Then
Public Const BLOOMBERG_LP_KEY As String = "SOFTWARE\Wow6432Node\Bloomberg L.P.\"
#Else
Public Const BLOOMBERG_LP_KEY As String = "SOFTWARE\Bloomberg L.P.\"
#End If

Public Const OFFICE_TOOLS_REGKEY As String = "Office Tools"
Public Const OFFICE_TOOLS_SETTINGS_REGKEY As String = "Office Tools\Settings"
Public Const OFFICE_TOOLS_UNITTESTS_REGKEY As String = "Office Tools\UnitTests"
Public Const OFFICE_TOOLS_PT_REGKEY As String = "Office Tools\Settings\Powertools\"
Public Const DDE_SERVER_REGKEY As String = "DDE Server"
Public Const DDE_SERVER_SETTINGS_REGKEY As String = "DDE Server\Settings"
Public Const DDE_SERVER_COMMS_REGKEY As String = "DDE Server\Comms"
Public Const FIELD_TABLE_REGKEY As String = "Field Table"
Public Const SPREADSHEET_ADDIN_REGKEY As String = "Spreadsheet Add-In"

'///////////////////////////////////////////////////////////
'//                  BBCOMM Keys
'///////////////////////////////////////////////////////////
Public Const USER_INFO_REGKEY As String = "User Info"
Public Const BBCOMM_REGKEY As String = "BBComm"
Public Const BBCOMM_GENVERSION_REGKEY As String = "BBComm\GenVersion"
Public Const BBCOMM_PAREMETERS_REGKEY As String = "BBComm\Parameters"
Public Const COMPONENTS_REGKEY As String = "Components"
Public Const CONNECTION_WIZARD_REGKEY As String = "Connection Wizard"

#If Win64 And USE_BBCOMM_WOW6432NODE Then
Public Const WINTRV_REGKEY As String = "Software\Wow6432Node\Microsoft\Windows\CurrentVersion\App Paths\wintrv.exe"
#Else
Public Const WINTRV_REGKEY As String = "Software\Microsoft\Windows\CurrentVersion\App Paths\wintrv.exe"
#End If

'///////////////////////////////////////////////////////////
'//                  Excel API Add-in Keys
'///////////////////////////////////////////////////////////
Public Const HKEY_CLSID_STAG As String = "CLSID\{99DD0DA0-9C97-11D5-9B5C-0008C7736CB2}"
Public Const HKEY_STAG_ACTION As String = "Software\Microsoft\Office\Common\Smart Tag\Actions\{99DD0DA0-9C97-11D5-9B5C-0008C7736CB2}"
Public Const HKEY_STAG_RECOGNIZER As String = "Software\Microsoft\Office\Common\Smart Tag\Recognizers\{99DD0DA0-9C97-11D5-9B5C-0008C7736CB2}"

'///////////////////////////////////////////////////////////
'//                  MS Office Keys
'///////////////////////////////////////////////////////////
Public Const KEY_EXCEL_DEFAULT_VERSION As String = "Excel.Application\CurVer"
Public Const KEY_DOTNET_35 As String = "SOFTWARE\Microsoft\NET Framework Setup\NDP\v3.5"
Public Const KEY_DOTNET_FULL_40 As String = "SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full\1033"
Public Const HKEY_RUN_ONCE As String = "SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce"
Public Const HKEY_EXCEL_DISABLED As String = "Software\Microsoft\Office\<Ver>\Excel\Resiliency\DisabledItems"
Public Const HKEY_EXCEL_OPTIONS_TEMPLATE As String = "<Ver>"
Public Const HKEY_EXCEL_OPTIONS As String = "Software\Microsoft\Office\<Ver>\Excel\Options"
Public Const HKEY_EXCEL_SECURITY As String = "Software\Microsoft\Office\<Ver>\Excel\Security"
Public Const HKEY_PROCESSOR_INFO As String = "Hardware\DESCRIPTION\System\CentralProcessor\0"
Public Const HKEY_PRODUCT_OPTIONS As String = "SYSTEM\CurrentControlSet\Control\ProductOptions"
Public Const OFFICE_COMPAT_PACK As String = "Software\Microsoft\Windows\CurrentVersion\Uninstall\{90120000-0020-0409-0000-0000000FF1CE}"
Public Const OFFICE_COMPAT_PACK_DISPLAY_NAME As String = "Compatibility Pack for the 2007 Office system"

' This function determines if we are running on some sort of terminal server
#If VBA7 Then
Private Declare PtrSafe Function UseTermServer Lib "bofaddin.dll" () As Integer
#Else
Private Declare Function UseTermServer Lib "bofaddin.dll" () As Integer
#End If


Public Function KEY_READ_ATTR(ByVal BaseKey As RegRoot) As Long
  pushTrace "KEY_READ_ATTR", "RegistryHelper.bas", BaseKey
#If Win64 And USE_WOW6432NODE Then
    If BaseKey = RegRoot.HKEY_LOCAL_MACHINE Then
        KEY_READ_ATTR = KEY_READ Or KEY_WOW64_32KEY
    Else
        KEY_READ_ATTR = KEY_READ
    End If
#Else
    KEY_READ_ATTR = KEY_READ
#End If

    popTrace "KEY_READ_ATTR", KEY_READ_ATTR
End Function

Public Function KEY_WRITE_ATTR(ByVal BaseKey As RegRoot) As Long
    pushTrace "KEY_WRITE_ATTR", "RegistryHelper.bas", BaseKey
#If Win64 And USE_WOW6432NODE Then
    If BaseKey = RegRoot.HKEY_LOCAL_MACHINE Then
        KEY_WRITE_ATTR = KEY_WRITE Or KEY_WOW64_32KEY
    Else
        KEY_WRITE_ATTR = KEY_WRITE
    End If
#Else
    KEY_WRITE_ATTR = KEY_WRITE
#End If

    popTrace "KEY_WRITE_ATTR", KEY_WRITE_ATTR
End Function

Public Function KEY_ALL_ATTR(ByVal BaseKey As RegRoot) As Long
    pushTrace "KEY_ALL_ATTR", "RegistryHelper.bas", BaseKey
#If Win64 And USE_WOW6432NODE Then
    If BaseKey = RegRoot.HKEY_LOCAL_MACHINE Then
        KEY_ALL_ATTR = KEY_ALL_ACCESS Or KEY_WOW64_32KEY
    Else
        KEY_ALL_ATTR = KEY_ALL_ACCESS
    End If
#Else
    KEY_ALL_ATTR = KEY_ALL_ACCESS
#End If

    popTrace "KEY_ALL_ATTR", KEY_ALL_ATTR
End Function


' Determines if we should read from HKCU or HKLM registry tree
Public Function GetRegRootKey() As Long
    pushTrace "GetRegRootKey", "RegistryHelper.bas"
    On Error GoTo error_handler
    GetRegRootKey = RegRoot.HKEY_LOCAL_MACHINE
    
    If UseTermServer() <> 0 Then
        GetRegRootKey = RegRoot.HKEY_CURRENT_USER
    End If
    
    'Dim useHKCU As Variant
    'With New RegOp
    '    .root = RegRoot.HKEY_LOCAL_MACHINE
    '    .Key = BLOOMBERG_LP_KEY & USER_INFO_REGKEY
    '    useHKCU = .value("USE HKCU")
    'End With
    
    'If (useHKCU <> 0) Then
    '    GetRegRootKey = RegRoot.HKEY_CURRENT_USER
    'End If
    
error_handler:

    popTrace "GetRegRootKey", GetRegRootKey
End Function

'///////////////////////////////////////////////////////////
'//            Key manipulation functions (string)
'///////////////////////////////////////////////////////////

' Prepends with Bloomberg key.
Public Function GetStringValue(EndKey As String, StringValue As String, ByRef retValue As String) As Boolean
    pushTrace "GetStringValue", "RegistryHelper.bas", EndKey, StringValue, retValue
    GetStringValue = GetRegistryStringValue(RegRoot.HKEY_LOCAL_MACHINE, EndKey, StringValue, retValue)

    popTrace "GetStringValue", GetStringValue
End Function

' Prepends with Bloomberg key.
Public Function GetUserStringValue(EndKey As String, StringValue As String, ByRef retValue As String) As Boolean
    pushTrace "GetUserStringValue", "RegistryHelper.bas", EndKey, StringValue, retValue
    GetUserStringValue = GetRegistryStringValue(RegRoot.HKEY_CURRENT_USER, EndKey, StringValue, retValue)

    popTrace "GetUserStringValue", GetUserStringValue
End Function

' Prepends with Bloomberg key.
Public Function GetRegistryStringValue(registryKey As Long, EndKey As String, StringValue As String, ByRef retValue As String) As Boolean
    pushTrace "GetRegistryStringValue", "RegistryHelper.bas", registryKey, EndKey, StringValue, retValue
    GetRegistryStringValue = GetStringValueFromRegistry(registryKey, BLOOMBERG_LP_KEY & EndKey, StringValue, retValue)

    popTrace "GetRegistryStringValue", GetRegistryStringValue
End Function

' Does NOT prepend with Bloomberg key.
Public Function GetStringValueWithExplicitKey(stringKey As String, StringValue As String, ByRef retValue As String) As Boolean
    pushTrace "GetStringValueWithExplicitKey", "RegistryHelper.bas", stringKey, StringValue, retValue
    GetStringValueWithExplicitKey = GetStringValueFromRegistry(RegRoot.HKEY_LOCAL_MACHINE, stringKey, StringValue, retValue)

    popTrace "GetStringValueWithExplicitKey", GetStringValueWithExplicitKey
End Function

' Does NOT prepend with Bloomberg key.
Public Function GetStringValueFromRegistry(registryKey As Long, key As String, _
StringValue As String, ByRef retValue As String) As Boolean
    pushTrace "GetStringValueFromRegistry", "RegistryHelper.bas", registryKey, key, StringValue, retValue
    Dim lStatus As Long
    Dim lKeyType As Long
    Dim lSize As Long
    Dim strBuffer As String * 512
    
    On Error GoTo error_handler
    
    GetStringValueFromRegistry = False
    retValue = ""
    
    lStatus = RegOpenKeyEx(registryKey, key, 0, KEY_READ_ATTR(registryKey), hKey)
    If lStatus = 0 Then
        lSize = 512
        lStatus = RegQueryValueEx(hKey, StringValue, 0, lKeyType, ByVal strBuffer, lSize)
        If lStatus = 0 Then
            strBuffer = Left$(strBuffer, lSize - 1) & Space$(512 - lSize + 1)
            retValue = Trim$(strBuffer)
            If Len(retValue) > 0 Then
                GetStringValueFromRegistry = True
            End If
        End If
        RegCloseKey hKey
    End If
    
error_handler:

    popTrace "GetStringValueFromRegistry"
End Function

' Prepends with Bloomberg key.
Public Function SetUserStringValue(EndKey As String, ValueName As String, value As String) As Boolean
    pushTrace "SetUserStringValue", "RegistryHelper.bas", EndKey, ValueName, value
    SetUserStringValue = SetRegistryStringValue(RegRoot.HKEY_CURRENT_USER, EndKey, ValueName, value)

    popTrace "SetUserStringValue", SetUserStringValue
End Function

' Prepends with Bloomberg key.
Public Function SetRegistryStringValue(registryKey As Long, EndKey As String, _
ValueName As String, value As String) As Boolean
    pushTrace "SetRegistryStringValue", "RegistryHelper.bas", registryKey, EndKey, ValueName, value
    Dim lDisp As Long
    Dim rcode As Long
    Dim SA As SECURITY_ATTRIBUTES
    
    On Error GoTo error_handler
    
    SetRegistryStringValue = False
    
    rcode = RegCreateKeyEx(registryKey, BLOOMBERG_LP_KEY & EndKey, _
        0, 0, 0, KEY_WRITE_ATTR(registryKey), SA, hKey, lDisp)
    If rcode <> 0 Then

        popTrace "SetRegistryStringValue"
        Exit Function
    End If
    
    rcode = RegSetValueEx(hKey, ValueName, 0, REG_SZ, value, Len(value))
    If rcode = 0 Then
        SetRegistryStringValue = True
    End If
    
    RegCloseKey hKey
    
error_handler:

    popTrace "SetRegistryStringValue"
End Function

Public Function GetOfficeToolsPath(ByRef retValue As String) As Boolean
    pushTrace "GetOfficeToolsPath", "RegistryHelper.bas", retValue
    Dim lStatus As Long
    Dim lKeyType As Long
    Dim lSize As Long
    Dim strBuffer As String * 512
    
    On Error GoTo error_handler
    
    GetOfficeToolsPath = False
    retValue = ""
    
    lStatus = RegOpenKeyEx(RegRoot.HKEY_LOCAL_MACHINE, BLOOMBERG_LP_KEY & OFFICE_TOOLS_SETTINGS_REGKEY, _
                           0, KEY_READ_ATTR(RegRoot.HKEY_LOCAL_MACHINE), hKey)
    If lStatus = 0 Then
        lSize = 512
        lStatus = RegQueryValueEx(hKey, "Path Name", 0, lKeyType, ByVal strBuffer, lSize)
        If lStatus = 0 Then
            strBuffer = Left$(strBuffer, lSize - 1) & Space$(512 - lSize + 1)
            retValue = Trim$(strBuffer)
            If Len(retValue) > 0 Then
                GetOfficeToolsPath = True
            End If
        End If
        RegCloseKey hKey
    End If
    
error_handler:

    popTrace "GetOfficeToolsPath", GetOfficeToolsPath
End Function

'///////////////////////////////////////////////////////////
'//            Key manipulation functions (DWORD)
'///////////////////////////////////////////////////////////

' Prepends with Bloomberg key.
Public Function GetLongValue(EndKey As String, longValue As String, ByRef retValue As Long) As Boolean
    pushTrace "GetLongValue", "RegistryHelper.bas", EndKey, longValue, retValue
    GetLongValue = GetRegistryLongValue(RegRoot.HKEY_LOCAL_MACHINE, EndKey, longValue, retValue)

    popTrace "GetLongValue", GetLongValue
End Function

' Prepends with Bloomberg key.
Public Function GetUserLongValue(EndKey As String, longValue As String, ByRef retValue As Long) As Boolean
    pushTrace "GetUserLongValue", "RegistryHelper.bas", EndKey, longValue, retValue
    GetUserLongValue = GetRegistryLongValue(RegRoot.HKEY_CURRENT_USER, EndKey, longValue, retValue)

    popTrace "GetUserLongValue", GetUserLongValue
End Function

' Prepends with Bloomberg key.
Public Function GetRegistryLongValue(registryKey As Long, EndKey As String, longValue As String, ByRef retValue As Long) As Boolean
    pushTrace "GetRegistryLongValue", "RegistryHelper.bas", registryKey, EndKey, longValue, retValue
    GetRegistryLongValue = GetLongValueFromRegistry(registryKey, BLOOMBERG_LP_KEY & EndKey, longValue, retValue)

    popTrace "GetRegistryLongValue", GetRegistryLongValue
End Function

' Does NOT prepend with Bloomberg key.
Public Function GetLongValueWithExplicitKey(longKey As String, longValue As String, ByRef retValue As Long) As Boolean
    pushTrace "GetLongValueWithExplicitKey", "RegistryHelper.bas", longKey, longValue, retValue
    GetLongValueWithExplicitKey = GetLongValueFromRegistry(RegRoot.HKEY_LOCAL_MACHINE, longKey, longValue, retValue)

    popTrace "GetLongValueWithExplicitKey", GetLongValueWithExplicitKey
End Function

' Does NOT prepend with Bloomberg key.
Public Function GetLongValueFromRegistry(registryKey As Long, key As String, _
longValue As String, ByRef retValue As Long) As Boolean
    pushTrace "GetLongValueFromRegistry", "RegistryHelper.bas", registryKey, key, longValue, retValue
    Dim lStatus As Long
    Dim lKeyType As Long
    Dim lSize As Long
    Dim lngBuffer As Long
    
    On Error GoTo error_handler
    
    GetLongValueFromRegistry = False
    retValue = -1

    lStatus = RegOpenKeyEx(registryKey, key, 0, KEY_READ_ATTR(registryKey), hKey)
    If lStatus = 0 Then
        lSize = 4
        lStatus = RegQueryValueEx(hKey, longValue, 0, lKeyType, lngBuffer, lSize)
        If lStatus = 0 Then
            retValue = lngBuffer
            GetLongValueFromRegistry = True
        End If
        RegCloseKey hKey
    End If
    
error_handler:

    popTrace "GetLongValueFromRegistry"
End Function

' Prepends with Bloomberg key.
Public Function SetRegistryLongValue(registryKey As Long, EndKey As String, _
    ValueName As String, value As Long, Optional Volatile As Boolean = False) As Boolean
    pushTrace "SetRegistryLongValue", "RegistryHelper.bas", registryKey, EndKey, ValueName, value, Volatile
    Dim lDisp As Long
    Dim rcode As Long
    Dim SA As SECURITY_ATTRIBUTES
    Dim dwOptions As Long
    On Error GoTo error_handler
    
    If Volatile Then
        dwOptions = 1 ''REG_OPTION_VOLATILE''
    End If
    
    SetRegistryLongValue = False
    
    rcode = RegCreateKeyEx(registryKey, BLOOMBERG_LP_KEY & EndKey, _
                           0, 0, dwOptions, KEY_WRITE_ATTR(registryKey), SA, hKey, lDisp)
    If rcode <> 0 Then

        popTrace "SetRegistryLongValue"
        Exit Function
    End If
    
    rcode = RegSetValueEx(hKey, ValueName, 0, REG_DWORD, value, Len(value))
    If rcode = 0 Then
        SetRegistryLongValue = True
    End If
    
    RegCloseKey hKey
    
error_handler:

    popTrace "SetRegistryLongValue"
End Function

' Prepends with Bloomberg key.
Public Function DeleteRegistryKey(registryKey As Long, EndKey As String) As Boolean
    pushTrace "DeleteRegistryKey", "RegistryHelper.bas", registryKey, EndKey
    Dim rcode As Long
    On Error GoTo error_handler
    DeleteRegistryKey = False
    
#If Win64 Then
    'Not supported under win XP 32-bit
    rcode = RegDeleteKeyEx(registryKey, BLOOMBERG_LP_KEY & EndKey, KEY_WRITE_ATTR(registryKey), 0)
#Else
    rcode = RegDeleteKey(registryKey, BLOOMBERG_LP_KEY & EndKey)
#End If

    If rcode = 0 Then
        DeleteRegistryKey = True
    End If
    
error_handler:

    popTrace "DeleteRegistryKey", DeleteRegistryKey
End Function


Function CheckBlpCompXRegistration() As Boolean
    pushTrace "CheckBlpCompXRegistration", "RegistryHelper.bas"
    
    Dim nStat As Long

    nStat = RegOpenKeyEx(RegRoot.HKEY_CLASSES_ROOT, _
                         "CLSID\{EC77FBAD-D045-4859-9AA1-65931B55D023}\InprocServer32", _
                         0, KEY_READ_ATTR(RegRoot.HKEY_CLASSES_ROOT), hKey)
    If nStat = 0 Then
        RegCloseKey hKey
        CheckBlpCompXRegistration = True
    Else
        CheckBlpCompXRegistration = False
    End If
    

    popTrace "CheckBlpCompXRegistration", CheckBlpCompXRegistration
End Function

Attribute VB_Name = "SettingsUtil"
Option Explicit
Option Private Module

Public SimpleViewVal As Integer               ''0=undefined, 1=true, -1=false
Public HideFormAfterCompletionVal As Integer  ''0=undefined, 1=true, -1=false
Public EnforceFileMaskMatchingVal As Integer  ''0=undefined, 1=true, -1=false
Public DisableEmfCacheVal As Integer          ''0=undefined, 1=true, -1=false
Public AlwaysUpdateFromCurrentVal As Integer           ''0=undefined, 1=true, -1=false

Public Function SimpleView() As Boolean
pushTrace "SimpleView", "SettingsUtil.bas"
    Dim setting As Boolean
    If SimpleViewVal = 0 Then
        If Nz(MySetting("SimpleViewNoThumbnails", "LinkManagerPreferences"), False) = True Then
            SimpleViewVal = 1
            SimpleView = True
        Else
            SimpleViewVal = -1
            SimpleView = False
        End If
    ElseIf SimpleViewVal = 1 Then
        SimpleView = True
    Else
        SimpleView = False
    End If

    popTrace "SimpleView", SimpleView
End Function

Public Function EnforceFileMaskMatching() As Boolean
    pushTrace "EnforceFileMaskMatching", "SettingsUtil.bas"
    Dim setting As Boolean
    If EnforceFileMaskMatchingVal = 0 Then
        If Nz(MySetting("EnforceFileMaskMatching", "LinkManagerPreferences"), False) = True Then
            EnforceFileMaskMatchingVal = 1
            EnforceFileMaskMatching = True
        Else
            EnforceFileMaskMatchingVal = -1
            EnforceFileMaskMatching = False
        End If
    ElseIf EnforceFileMaskMatchingVal = 1 Then
        EnforceFileMaskMatching = True
    Else
        EnforceFileMaskMatching = False
    End If

    popTrace "EnforceFileMaskMatching", EnforceFileMaskMatching
End Function

Public Function HideFormAfterCompletion() As Boolean
    pushTrace "HideFormAfterCompletion", "SettingsUtil.bas"
    Dim setting As Boolean
    If HideFormAfterCompletionVal = 0 Then
        If Nz(MySetting("HideFormAfterCompletion", "LinkManagerPreferences"), False) = True Then
            HideFormAfterCompletionVal = 1
            HideFormAfterCompletion = True
        Else
            HideFormAfterCompletionVal = -1
            HideFormAfterCompletion = False
        End If
    ElseIf HideFormAfterCompletionVal = 1 Then
        HideFormAfterCompletion = True
    Else
        HideFormAfterCompletion = False
    End If

    popTrace "HideFormAfterCompletion", HideFormAfterCompletion
End Function

Public Function DisableEmfCache() As Boolean
    pushTrace "DisableEmfCache", "SettingsUtil.bas"
    Dim setting As Boolean
    
    If isDisabledForV2ShutdownEvents Or isDisabledForEmfCache Then
        DisableEmfCache = True

        popTrace "DisableEmfCache", DisableEmfCache
        Exit Function
    End If
        
    If DisableEmfCacheVal = 0 Then
        If Nz(MySetting("DisableEmfCache", "LinkManagerPreferences"), False) = True Then
            DisableEmfCacheVal = 1
            DisableEmfCache = True
        Else
            DisableEmfCacheVal = -1
            DisableEmfCache = False
        End If
    ElseIf DisableEmfCacheVal = 1 Then
        DisableEmfCache = True
    Else
        DisableEmfCache = False
    End If

    popTrace "DisableEmfCache", DisableEmfCache
End Function


Public Function AlwaysUpdateFromCurrent() As Boolean
    pushTrace "AlwaysUpdateFromCurrent", "SettingsUtil.bas"
    Dim setting As Boolean
    If LinkManagerHideUpdateFromCurrentOption Then
        AlwaysUpdateFromCurrent = False

        popTrace "AlwaysUpdateFromCurrent", AlwaysUpdateFromCurrent
        Exit Function
    End If
    
    If AlwaysUpdateFromCurrentVal = 0 Then
        If Nz(MySetting("AlwaysUpdateFromCurrent", "LinkManagerPreferences"), False) = True Then
            AlwaysUpdateFromCurrentVal = 1
            AlwaysUpdateFromCurrent = True
        Else
            AlwaysUpdateFromCurrentVal = -1
            AlwaysUpdateFromCurrent = False
        End If
    ElseIf AlwaysUpdateFromCurrentVal = 1 Then
        AlwaysUpdateFromCurrent = True
    Else
        AlwaysUpdateFromCurrent = False
    End If

    popTrace "AlwaysUpdateFromCurrent", AlwaysUpdateFromCurrent
End Function

Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "V3Status"

Public Const AX_SETTINGS_REGKEY As String = "ActiveX\Settings"

#If VBA7 Then
Private hBofApiReg As LongPtr
Public hBofAddin As LongPtr
Public hKeybdHook As LongPtr
'Public hInterop As LongPtr
Public hApiLib As LongPtr
Private hBBloader As LongPtr
Private hExceptionHandler As LongPtr
#Else
Private hBofApiReg As Long
Public hBofAddin As Long
Public hKeybdHook As Long
'Public hInterop As Long
Public hApiLib As Long
Private hBBloader As Long
Private hExceptionHandler As Long
#End If

Public Sub InitV3Status()
pushTrace "InitV3Status", "V3Status.bas"
    loadExceptionHandler
    loadAPILibrary
    Dim bofAddinLibLoaded As Boolean
    loadBofAddin bofAddinLibLoaded
    If bofAddinLibLoaded = False Then
        Err.Raise vbObjectError + 513, "Initializing bof libraries", "Unable to load bofaddin.dll!"
    End If
    loadKeyboardHook
    
    popTrace "InitV3Status"
End Sub

Public Sub V3Status_OnClose()
    pushTrace "V3Status_OnClose", "V3Status.bas"

    'If hInterop <> 0 Then
        'FreeLibrary (hInterop)
    'End If
    
    If hKeybdHook <> 0 Then
        FreeLibrary (hKeybdHook)
    End If
    
    If hBofAddin <> 0 Then
        FreeLibrary (hBofAddin)
    End If
        
    If hBofApiReg <> 0 Then
        FreeLibrary (hBofApiReg)
    End If
            
    If hBBloader <> 0 Then
        FreeLibrary (hBBloader)
    End If

    If hApiLib <> 0 Then
        FreeLibrary (hApiLib)
    End If

    popTrace "V3Status_OnClose"
End Sub

Public Sub loadExceptionHandler()
    pushTrace "loadExceptionHandler", "V3Status.bas"
    Call LoadFromOfficeToolsFolder("bofexception.dll", hExceptionHandler)
    popTrace "loadExceptionHandler"
End Sub

Public Sub loadBbloader()
    pushTrace "loadBbloader", "V3Status.bas"

    Call LoadFromOfficeToolsFolder("bbloader.dll", hBBloader, True)
    
    popTrace "loadBbloader"
End Sub

Public Sub loadAPILibrary()
    pushTrace "loadAPILibrary", "V3Status.bas"
    #If Win64 Then
    Call LoadFromAPIFolder("blpapi3_64.dll", hApiLib)
    #Else
    Call LoadFromAPIFolder("blpapi3_32.dll", hApiLib)
    #End If
    popTrace "loadAPILibrary"
End Sub

Public Sub loadBofAddin(ByRef libLoaded As Boolean)
    pushTrace "loadBofAddin", "V3Status.bas", libLoaded

    Call LoadFromOfficeToolsFolder("bofaddin.dll", hBofAddin)
    libLoaded = IsLibLoaded(hBofAddin)

    popTrace "loadBofAddin"
End Sub

Public Sub loadKeyboardHook()
    pushTrace "loadKeyboardHook", "V3Status.bas"
    Call LoadFromOfficeToolsFolder("bofaddin.dll", hKeybdHook)
    popTrace "loadKeyboardHook"
End Sub

'Public Sub loadInterop()
'End Sub

#If VBA7 Then
Private Function IsLibLoaded(ByRef dllHandle As LongPtr) As Boolean
    pushTrace "IsLibLoaded", "V3Status.bas", dllHandle
#Else
Private Function IsLibLoaded(ByRef dllHandle As Long) As Boolean
    pushTrace "IsLibLoaded", "V3Status.bas", dllHandle
#End If
    
    If dllHandle <> 0 Then
        IsLibLoaded = True
    Else
        IsLibLoaded = False
    End If
    

    popTrace "IsLibLoaded", IsLibLoaded
End Function
    
    
#If VBA7 Then
Private Sub LoadFromActiveXFolder(ByVal dllName As String, ByRef dllHandle As LongPtr)
    pushTrace "LoadFromActiveXFolder", "V3Status.bas", dllName, dllHandle
#Else
Private Sub LoadFromActiveXFolder(ByVal dllName As String, ByRef dllHandle As Long)
    pushTrace "LoadFromActiveXFolder", "V3Status.bas", dllName, dllHandle
#End If
    Dim path As String
    
    If Not GetStringValue(DDE_SERVER_SETTINGS_REGKEY, "Path Name", path) Then
        popTrace "LoadFromActiveXFolder"
        Exit Sub
    End If
    path = path & "\..\activex"
    Call LoadDll(path, dllName, dllHandle)
    popTrace "LoadFromActiveXFolder"
End Sub

#If VBA7 Then
Private Sub LoadFromAPIFolder(ByVal dllName As String, ByRef dllHandle As LongPtr)
    pushTrace "LoadFromAPIFolder", "V3Status.bas", dllName, dllHandle
#Else
Private Sub LoadFromAPIFolder(ByVal dllName As String, ByRef dllHandle As Long)
    pushTrace "LoadFromAPIFolder", "V3Status.bas", dllName, dllHandle
#End If
    Dim path As String
    
    If Not GetStringValue(AX_SETTINGS_REGKEY, "Path Name", path) Then
        popTrace "LoadFromAPIFolder"
        Exit Sub
    End If
    path = path & "\..\..\DAPI"
    Call LoadDll(path, dllName, dllHandle)
    popTrace "LoadFromAPIFolder"
End Sub

#If VBA7 Then
Public Sub LoadFromOfficeToolsFolder(ByVal dllName As String, ByRef dllHandle As LongPtr, Optional forcePath As Boolean = False)
    pushTrace "LoadFromOfficeToolsFolder", "V3Status.bas", dllName, dllHandle, forcePath
#Else
Public Sub LoadFromOfficeToolsFolder(ByVal dllName As String, ByRef dllHandle As Long, Optional forcePath As Boolean = False)
    pushTrace "LoadFromOfficeToolsFolder", "V3Status.bas", dllName, dllHandle, forcePath
#End If
    Dim path As String
    
    If Not GetStringValue(OFFICE_TOOLS_SETTINGS_REGKEY, "Path Name", path) Then
        popTrace "LoadFromOfficeToolsFolder"
        Exit Sub
    End If
    Call LoadDll(path, dllName, dllHandle, forcePath)
    popTrace "LoadFromOfficeToolsFolder"
End Sub

#If VBA7 Then
Private Sub LoadDll(ByVal dllpath As String, ByVal dllName As String, _
    ByRef dllHandle As LongPtr, Optional forcePath As Boolean = False)
    pushTrace "LoadDll", "V3Status.bas", dllpath, dllName, dllHandle, forcePath
#Else
Private Sub LoadDll(ByVal dllpath As String, ByVal dllName As String, _
    ByRef dllHandle As Long, Optional forcePath As Boolean = False)
    pushTrace "LoadDll", "V3Status.bas", dllpath, dllName, dllHandle, forcePath
#End If
    Dim currentDir As String
    currentDir = CurDir()
    
    Dim rcode As Long
    
    If SetCurrentDirectory(dllpath) = 0 Then
        popTrace "LoadDll"
        Exit Sub
    End If
    If forcePath Then
        dllHandle = LoadLibrary(dllpath & "\" & dllName)
    Else
        dllHandle = LoadLibrary(dllName)
    End If
    
    If (dllHandle = 0) Then
        ' Provide a backup way of loading DLL - SetCurrentDirectory approach may fail
        ' on Win8 when Excel is launched by another process (ie: wintrv)
        Dim fullPath As String
        fullPath = dllpath
        If (InStrRev(fullPath, "\") <> Len(fullPath)) Then
            fullPath = fullPath & "\"
        End If
        fullPath = fullPath & dllName
        dllHandle = LoadLibraryEx(fullPath, 0, 8)
        If (dllHandle = 0) Then
            Dim errorCode As String
            errorCode = GetLastError()
            Debug.Print "Load DLL failed with err:" & errorCode
        End If
    End If
    SetCurrentDirectory (currentDir)
    popTrace "LoadDll"
End Sub

Attribute VB_Name = "XMLHelperTools"
Option Explicit

'version:
'   2011-09-09.1

Function GetNodeText(node0 As IXMLDOMNode, xpath As String, defaultText As String) As String
pushTrace "GetNodeText", "XMLHelperTools.bas", node0, xpath, defaultText
    Dim node As IXMLDOMNode
    Set node = node0.SelectSingleNode(xpath)
    If node Is Nothing Then
        GetNodeText = defaultText
    Else
        If node.NodeType = NODE_ATTRIBUTE Then
            GetNodeText = node.NodeValue
        Else
            GetNodeText = node.text
        End If
    End If

    popTrace "GetNodeText", GetNodeText
End Function

Function GetAttributeLong(baseNode As IXMLDOMNode, attrName As String) As Long
    pushTrace "GetAttributeLong", "XMLHelperTools.bas", baseNode, attrName
On Error Resume Next

    Dim xmlAttr   As IXMLDOMAttribute
    Dim lngVal    As Long
    
    lngVal = 0
    Set xmlAttr = baseNode.SelectSingleNode("@" & attrName)
    If Not xmlAttr Is Nothing Then
        lngVal = CLng(xmlAttr.text)
    End If
    
    GetAttributeLong = lngVal
    
    Set xmlAttr = Nothing

    popTrace "GetAttributeLong", GetAttributeLong
End Function

Function GetAttributeDate(baseNode As IXMLDOMNode, attrName As String) As Date
    pushTrace "GetAttributeDate", "XMLHelperTools.bas", baseNode, attrName
On Error Resume Next

    Dim xmlAttr   As IXMLDOMAttribute
    Dim dteVal    As Date
    
    dteVal = #12:00:00 AM#
    
    Set xmlAttr = baseNode.SelectSingleNode("@" & attrName)
    If Not xmlAttr Is Nothing Then
        dteVal = CDate(xmlAttr.text)
    End If
    
    GetAttributeDate = dteVal
    Set xmlAttr = Nothing

    popTrace "GetAttributeDate", GetAttributeDate
End Function

Function GetAttributeText(baseNode As IXMLDOMNode, attrName As String) As String
    pushTrace "GetAttributeText", "XMLHelperTools.bas", baseNode, attrName
            Dim attrText As String
            attrText = ""
            Dim attr As IXMLDOMAttribute
            Set attr = baseNode.SelectSingleNode("@" & attrName)
            If Not attr Is Nothing Then
                attrText = attr.text
            End If
            GetAttributeText = attrText

            popTrace "GetAttributeText", GetAttributeText
End Function

Function GetAttributeBool(baseNode As IXMLDOMNode, attrName As String, default As Boolean) As Boolean
            pushTrace "GetAttributeBool", "XMLHelperTools.bas", baseNode, attrName, default
            Dim attrBool As Boolean
            attrBool = default
            Dim attr As IXMLDOMAttribute
            Set attr = baseNode.SelectSingleNode("@" & attrName)
            If Not attr Is Nothing Then
                attrBool = CBool(attr.value)
            End If
            GetAttributeBool = attrBool

            popTrace "GetAttributeBool", GetAttributeBool
End Function

' InQuest injected base64 decoded content
' ^tZ+>
' Qkjg
' /j)ZnW
' ^tZ+.)
' ^tZ+.)
' ^tZ+.)
' yJ]j
' h	bj
' h	bj
' ^Z+a
' ^tZ+
' ^tZ+
' ^tZ+
' ^tZ+
' ^tZ+J)
' j+tz-)
' ^tZ+
' -x(Z
' -x(Z
' ^tZ+
' ^tZ+J
' BjW.
' jS(u
' ^tZ+:
' ^tZ+-
' ~)^1
' LDH4
' 1NDA
' 44DHD
' 1NEc
' ^tZ+Jf
' )bz{@u
' D^~*
' 2(+j
' ^tZ+
' /z{l:t^
' )^N)
' K+-zd
' jwexZ+6
' -"jh
' z{Uj

INQUEST-PP=macro
