Attribute VB_Name = "Module1"
'Global Declarations
Public superProApp As Designer.Application
Public superProDoc As Designer.Document

'Module 1 Declarations
Dim var1 As Variant
'Throughput and Economic Indices Functions

'Set And Get Batch Throughput
Function SetAndGetBatchThroughput(throughput As Double) As Double

    var1 = throughput
    
    superProDoc.SetFlowsheetVarVal VarID.batchThroughput_VID, var1
    
    'Solve Mass & Energy Balances
    superProDoc.DoMEBalances var1
    'Economic Calculations
    superProDoc.DoEconomicCalculations
    
    superProDoc.GetFlowsheetVarVal VarID.batchThroughput_VID, var1
    SetAndGetBatchThroughput = CDbl(var1)

End Function
'Get Annual Throughput
Function GetThroughput(InDouble) As Double

    superProDoc.GetFlowsheetVarVal VarID.annualThroughput_VID, var1
    GetThroughput = CDbl(var1)

End Function
'Get Main Product Cost
Function GetMPC(InDouble) As Double
    Dim dblVal As Double 'declare a double datatype
    'Get the new main revenue cost ($ /kg)
    Dim bResult As Boolean
    bResult = superProDoc.GetFlowsheetVarVal(VarID.mainRevenueCost_VID, var1)
    dblVal = CDbl(var1) 'double or float
    GetMPC = dblVal

End Function
'Get Return on Investment
Function GetROI(InDouble) As Double
    Dim dblVal As Double 'declare a double datatype
    'Get the new ROI
    superProDoc.GetFlowsheetVarVal VarID.ROI_VID, var1
    dblVal = CDbl(var1) 'double or float
    
    GetROI = dblVal

End Function
'Get Internal Rate of Return Before Tax
Function GetIRRBT(InDouble) As Double
    'Get the new IRR Before Taxes
    superProDoc.GetFlowsheetVarVal VarID.IRR_BeforeTaxes_VID, var1
    GetIRRBT = CDbl(var1) 'double or float

End Function
'Get Internal Rate of Return After Tax
Function GetIRRAT(InDouble) As Double
    'Get the new IRR After Taxes
    superProDoc.GetFlowsheetVarVal VarID.IRR_AfterTaxes_VID, var1
    GetIRRAT = CDbl(var1) 'double or float

End Function
'Get Net Profit
Function GetNetProfit(InDouble) As Double
    'Get the new Net Profit
    superProDoc.GetFlowsheetVarVal VarID.netProfit_VID, var1
    GetNetProfit = CDbl(var1) 'double or float

End Function
'Get Revenue
Function GetRevenue(InDouble) As Double
    'Get the new Revenue
    superProDoc.GetFlowsheetVarVal VarID.revenue_VID, var1
    GetRevenue = CDbl(var1) 'double or float

End Function
'Get annual Number of Batches
Function AnnualNumberOfBatches(InDouble) As Long
    superProDoc.GetFlowsheetVarVal VarID.numberOfBatchesPerYear_VID, var1
    AnnualNumberOfBatches = CLng(var1)
End Function
'Get Facility Dependent Annual Cost
Function AnnualFacilityDependentCost(InDouble) As Long
    superProDoc.GetFlowsheetVarVal VarID.equipmentCost_VID, var1
    AnnualFacilityDependentCost = CDbl(var1) 'double or float
End Function

Attribute VB_Name = "Module2"
'Module 3 Declarations
Dim var1 As Variant
Dim var2 As Variant
'Flowsheet Related Functions
Function GetTotalComponentInput(componentName) As Double
    var2 = CStr(componentName)
    
    superProDoc.GetFlowsheetVarVal2 VarID.totalComponentInput_VID, var1, var2
    GetTotalComponentInput = CDbl(var1)
End Function
Function GetTotalComponentOutput(componentName) As Double
    var2 = CStr(componentName)
    
    superProDoc.GetFlowsheetVarVal2 VarID.totalComponentOutput_VID, var1, var2
    GetTotalComponentOutput = CDbl(var1)
End Function
Function GetLaborRate(laborName) As Double
    var2 = CStr(laborName)
    
    superProDoc.GetFlowsheetVarVal2 VarID.laborCostRate_VID, var1, var2
    GetLaborRate = CDbl(var1)
End Function

Sub SetFlowsheetVar()
    var2 = CBool(True)
    
    superProDoc.SetFlowsheetVarVal VarID.isNumberOfBatchesSBU_VID, var2
End Sub
Attribute VB_Name = "Module3"
'Module 4 Declarations
Dim var1 As Variant
Dim var2 As Variant
Dim var3 As Variant
Dim var4 As Variant
Dim str1 As String
Dim str2 As String

'Operation related Functions
Function GetReactionConversion(procName, opName, rxnName) As Double
    var2 = CStr(rxnName)
    str1 = CStr(procName)
    str2 = CStr(opName)
    
    superProDoc.GetOperVarVal2 str1, str2, VarID.conversion_VID, var1, var2
    GetReactionConversion = CDbl(var1)
End Function

Function GetMassStoichCoeff(procName, opName, rxnName, compName) As Double
    str1 = CStr(procName)
    str2 = CStr(opName)
    var2 = CStr(rxnName)
    var3 = CStr(compName)
    
    superProDoc.GetOperVarVal3 str1, str2, VarID.massStoichCoeff_VID, var1, var2, var3
    GetMassStoichCoeff = CDbl(var1)
End Function
Function GetMolarStoichCoeff(procName, opName, rxnName, compName) As Double
    str1 = CStr(procName)
    str2 = CStr(opName)
    var2 = CStr(rxnName)
    var3 = CStr(compName)
    
    superProDoc.GetOperVarVal3 str1, str2, VarID.moleStoichCoeff_VID, var1, var2, var3
    GetMolarStoichCoeff = CDbl(var1)
End Function
Function SetAndGetMassStoichCoeff(procName, opName, rxnName, compName, coeff) As Double
    str1 = CStr(procName)
    str2 = CStr(opName)
    var2 = CStr(rxnName)
    var3 = CStr(compName)
    
    var1 = CDbl(coeff)
    
    superProDoc.SetOperVarVal3 str1, str2, VarID.massStoichCoeff_VID, var1, var2, var3
    superProDoc.GetOperVarVal3 str1, str2, VarID.massStoichCoeff_VID, var4, var2, var3
    SetAndGetMassStoichCoeff = CDbl(var4)
End Function

Function GetOperationTimeMode(procName, opName) As Long
    str1 = CStr(procName)
    str2 = CStr(opName)
    
    superProDoc.GetOperVarVal str1, str2, VarID.processTimeCalcMode_VID, var1
    GetOperationTimeMode = CLng(var1)
End Function

Function GetOperationPowerMode(procName, opName) As Long
    str1 = CStr(procName)
    str2 = CStr(opName)
    
    superProDoc.GetOperVarVal str1, str2, VarID.powerCalcMode_VID, var1
    GetOperationPowerMode = CLng(var1)
End Function
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "Run, 23, 0, MSForms, CommandButton"

Sub Run_Click()
  Dim ws As Worksheet
  Dim throughput As Double, increase As Double
  
  If superProApp Is Nothing Then
     MsgBox "First open a SuperPro Designer case file."
     Exit Sub
  End If
  
  Set ws = Worksheets("Throughput Analysis")
  
  throughput = ws.range("D10")
  increase = ws.range("D11")
  
  Application.Cursor = xlWait
  Application.DisplayStatusBar = True
  Application.StatusBar = "Please wait while script is running ..."
 
  ws.range("A19") = "Performing Calculations for"
  ws.range("A18:A22").Interior.Color = RGB(255, 128, 0)
  ws.range("A21") = "Batch Throughput " & throughput & " kg/batch"
  SetAndGetBatchThroughput throughput
  ws.range("B16") = throughput
  
  Dim dCell As range
  For Each dCell In range("B17:B40")
    
    throughput = throughput + increase
    ws.range("A21") = "Batch Throughput " & throughput & " kg/batch"
    SetAndGetBatchThroughput throughput
    dCell = throughput
   
    ws.range("A21") = Empty
  Next dCell
 
  ws.range("A19") = Empty
  ws.range("A18:A22").Interior.ColorIndex = xlNone
  Application.Cursor = xlDefault
  Application.StatusBar = False
End Sub

Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Sub OpenSPDFile()
    
    Set superProApp = New Designer.Application
    Dim spfFileOne As String
    spfFileOne = range("B2")
    superProApp.ShowApp
    Set superProDoc = superProApp.OpenDoc(spfFileOne)
    
End Sub

Sub CloseSPDFile()
    
    superProDoc.CloseDoc False
    superProApp.CloseApp
    Set superProDoc = Nothing
    Set superProApp = Nothing

End Sub

Sub GetErrorMsg()
    Dim var1 As Variant
    var1 = variable
    superProDoc.GetCOMErrorMsg var1
    Dim errorMsg As String
    errorMsg = var1
    range("B46") = errorMsg
End Sub


Sub IsCOMSimDataComplete()
    Dim SimDataOK As Boolean
    SimDataOK = superProDoc.IsCOMSimDataComplete
    range("B40") = SimDataOK
End Sub



' InQuest injected base64 decoded content
' jQZr)b

INQUEST-PP=macro
