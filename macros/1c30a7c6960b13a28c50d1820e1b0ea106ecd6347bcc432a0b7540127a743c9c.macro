Attribute VB_Name = "CRijndael"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' Added for MWS integration
' Abhijit Tambe, July 2010

'*******************************************************************************
' MODULE:       CRijndael
' FILENAME:     CRijndael.cls
' AUTHOR:       Phil Fresle
' CREATED:      16-Feb-2001
' COPYRIGHT:    Copyright 2001 Phil Fresle
' EMAIL:        phil@frez.co.uk
' WEB:          http://www.frez.co.uk
'
' DESCRIPTION:
' Implementation of the AES Rijndael Block Cipher. Inspired by Mike Scott's
' implementation in C. Permission for free direct or derivative use is granted
' subject to compliance with any conditions that the originators of the
' algorithm place on its exploitation.
'
' MODIFICATION HISTORY:
' 16-Feb-2001   Phil Fresle     Initial Version
' 03-Apr-2001   Phil Fresle     Added EncryptData and DecryptData functions to
'                               make it easier to use by VB developers for
'                               encrypting and decrypting strings. These procs
'                               take large byte arrays, the resultant encoded
'                               data includes the message length inserted on
'                               the front four bytes prior to encryption.
' 19-Apr-2001   Phil Fresle     Thanks to Paolo Migliaccio for finding a bug
'                               with 256 bit key. Problem was in the gkey
'                               function. Now properly matches NIST values.
'*******************************************************************************
Option Explicit

Private m_lOnBits(30)   As Long
Private m_l2Power(30)   As Long
Private m_bytOnBits(7)  As Byte
Private m_byt2Power(7)  As Byte

Private m_InCo(3) As Byte

Private m_fbsub(255)    As Byte
Private m_rbsub(255)    As Byte
Private m_ptab(255)     As Byte
Private m_ltab(255)     As Byte
Private m_ftable(255)   As Long
Private m_rtable(255)   As Long
Private m_rco(29)       As Long

Private m_Nk        As Long
Private m_Nb        As Long
Private m_Nr        As Long
Private m_fi(23)    As Byte
Private m_ri(23)    As Byte
Private m_fkey(119) As Long
Private m_rkey(119) As Long

'==========================================================================================
'For 64-bit compatibility.

'MSDN: Compatibility Between the 32-bit and 64-bit Versions of Office 2010:
    'http://msdn.microsoft.com/en-us/library/ee691831.aspx
'Technet: Microsoft Office Code Compatibility Inspector:
    'http://technet.microsoft.com/en-us/library/ee833946.aspx
'Samples:
    'http://www.jkp-ads.com/articles/apideclarations.asp
'Windows API functions that were modified/added for 64-bit Windows:
    'http://msdn.microsoft.com/en-us/library/aa383663(VS.85).aspx

'PtrSafe:
    'For Excel 2010 and later (#Vba7 = True), change "Declare" to "Declare PtrSafe".
'LongPtr:
    'For Excel 2010 and later (#Vba7 = True), change the data type of handles and pointers
    'from Long to LongPtr. Leave pointers to strings as String.
'LongLong:
    'For 64-bit Excel (#Win64 = True), change Long (except for handles and pointers!) to LongLong

#If Mac Then
    'Running on MacIntosh. Do nothing.
#ElseIf VBA7 Then
    'Excel 2010 or later:
     #If Win64 Then
        '64-bit Excel, 2010 or later:
        'Use PtrSafe, LongPtr, and LongLong:
        
            Private Declare PtrSafe Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" _
                (ByVal Destination As Any, ByVal Source As Any, ByVal Length As LongLong)

     #Else
        '32-bit Excel 2010 or later:
        'Use PtrSafe and LongPtr, but NOT LongLong:

            Private Declare PtrSafe Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" _
                (ByVal Destination As Any, ByVal Source As Any, ByVal Length As Long)
        
     #End If
#Else
    'Excel 2007 or earlier:

        Private Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" _
            (ByVal Destination As Any, ByVal Source As Any, ByVal Length As Long)

#End If

'==========================================================================================

'*******************************************************************************
' Class_Initialize (SUB)
'*******************************************************************************
Private Sub Class_Initialize()
    m_InCo(0) = &HB
    m_InCo(1) = &HD
    m_InCo(2) = &H9
    m_InCo(3) = &HE
    
    ' Could have done this with a loop calculating each value, but simply
    ' assigning the values is quicker - BITS SET FROM RIGHT
    m_bytOnBits(0) = 1          ' 00000001
    m_bytOnBits(1) = 3          ' 00000011
    m_bytOnBits(2) = 7          ' 00000111
    m_bytOnBits(3) = 15         ' 00001111
    m_bytOnBits(4) = 31         ' 00011111
    m_bytOnBits(5) = 63         ' 00111111
    m_bytOnBits(6) = 127        ' 01111111
    m_bytOnBits(7) = 255        ' 11111111
    
    ' Could have done this with a loop calculating each value, but simply
    ' assigning the values is quicker - POWERS OF 2
    m_byt2Power(0) = 1          ' 00000001
    m_byt2Power(1) = 2          ' 00000010
    m_byt2Power(2) = 4          ' 00000100
    m_byt2Power(3) = 8          ' 00001000
    m_byt2Power(4) = 16         ' 00010000
    m_byt2Power(5) = 32         ' 00100000
    m_byt2Power(6) = 64         ' 01000000
    m_byt2Power(7) = 128        ' 10000000
    
    ' Could have done this with a loop calculating each value, but simply
    ' assigning the values is quicker - BITS SET FROM RIGHT
    m_lOnBits(0) = 1            ' 00000000000000000000000000000001
    m_lOnBits(1) = 3            ' 00000000000000000000000000000011
    m_lOnBits(2) = 7            ' 00000000000000000000000000000111
    m_lOnBits(3) = 15           ' 00000000000000000000000000001111
    m_lOnBits(4) = 31           ' 00000000000000000000000000011111
    m_lOnBits(5) = 63           ' 00000000000000000000000000111111
    m_lOnBits(6) = 127          ' 00000000000000000000000001111111
    m_lOnBits(7) = 255          ' 00000000000000000000000011111111
    m_lOnBits(8) = 511          ' 00000000000000000000000111111111
    m_lOnBits(9) = 1023         ' 00000000000000000000001111111111
    m_lOnBits(10) = 2047        ' 00000000000000000000011111111111
    m_lOnBits(11) = 4095        ' 00000000000000000000111111111111
    m_lOnBits(12) = 8191        ' 00000000000000000001111111111111
    m_lOnBits(13) = 16383       ' 00000000000000000011111111111111
    m_lOnBits(14) = 32767       ' 00000000000000000111111111111111
    m_lOnBits(15) = 65535       ' 00000000000000001111111111111111
    m_lOnBits(16) = 131071      ' 00000000000000011111111111111111
    m_lOnBits(17) = 262143      ' 00000000000000111111111111111111
    m_lOnBits(18) = 524287      ' 00000000000001111111111111111111
    m_lOnBits(19) = 1048575     ' 00000000000011111111111111111111
    m_lOnBits(20) = 2097151     ' 00000000000111111111111111111111
    m_lOnBits(21) = 4194303     ' 00000000001111111111111111111111
    m_lOnBits(22) = 8388607     ' 00000000011111111111111111111111
    m_lOnBits(23) = 16777215    ' 00000000111111111111111111111111
    m_lOnBits(24) = 33554431    ' 00000001111111111111111111111111
    m_lOnBits(25) = 67108863    ' 00000011111111111111111111111111
    m_lOnBits(26) = 134217727   ' 00000111111111111111111111111111
    m_lOnBits(27) = 268435455   ' 00001111111111111111111111111111
    m_lOnBits(28) = 536870911   ' 00011111111111111111111111111111
    m_lOnBits(29) = 1073741823  ' 00111111111111111111111111111111
    m_lOnBits(30) = 2147483647  ' 01111111111111111111111111111111
    
    ' Could have done this with a loop calculating each value, but simply
    ' assigning the values is quicker - POWERS OF 2
    m_l2Power(0) = 1            ' 00000000000000000000000000000001
    m_l2Power(1) = 2            ' 00000000000000000000000000000010
    m_l2Power(2) = 4            ' 00000000000000000000000000000100
    m_l2Power(3) = 8            ' 00000000000000000000000000001000
    m_l2Power(4) = 16           ' 00000000000000000000000000010000
    m_l2Power(5) = 32           ' 00000000000000000000000000100000
    m_l2Power(6) = 64           ' 00000000000000000000000001000000
    m_l2Power(7) = 128          ' 00000000000000000000000010000000
    m_l2Power(8) = 256          ' 00000000000000000000000100000000
    m_l2Power(9) = 512          ' 00000000000000000000001000000000
    m_l2Power(10) = 1024        ' 00000000000000000000010000000000
    m_l2Power(11) = 2048        ' 00000000000000000000100000000000
    m_l2Power(12) = 4096        ' 00000000000000000001000000000000
    m_l2Power(13) = 8192        ' 00000000000000000010000000000000
    m_l2Power(14) = 16384       ' 00000000000000000100000000000000
    m_l2Power(15) = 32768       ' 00000000000000001000000000000000
    m_l2Power(16) = 65536       ' 00000000000000010000000000000000
    m_l2Power(17) = 131072      ' 00000000000000100000000000000000
    m_l2Power(18) = 262144      ' 00000000000001000000000000000000
    m_l2Power(19) = 524288      ' 00000000000010000000000000000000
    m_l2Power(20) = 1048576     ' 00000000000100000000000000000000
    m_l2Power(21) = 2097152     ' 00000000001000000000000000000000
    m_l2Power(22) = 4194304     ' 00000000010000000000000000000000
    m_l2Power(23) = 8388608     ' 00000000100000000000000000000000
    m_l2Power(24) = 16777216    ' 00000001000000000000000000000000
    m_l2Power(25) = 33554432    ' 00000010000000000000000000000000
    m_l2Power(26) = 67108864    ' 00000100000000000000000000000000
    m_l2Power(27) = 134217728   ' 00001000000000000000000000000000
    m_l2Power(28) = 268435456   ' 00010000000000000000000000000000
    m_l2Power(29) = 536870912   ' 00100000000000000000000000000000
    m_l2Power(30) = 1073741824  ' 01000000000000000000000000000000
End Sub

'*******************************************************************************
' LShift (FUNCTION)
'*******************************************************************************
Private Function LShift(ByVal lValue As Long, _
                        ByVal iShiftBits As Integer) As Long
    If iShiftBits = 0 Then
        LShift = lValue
        Exit Function
    ElseIf iShiftBits = 31 Then
        If lValue And 1 Then
            LShift = &H80000000
        Else
            LShift = 0
        End If
        Exit Function
    ElseIf iShiftBits < 0 Or iShiftBits > 31 Then
        Err.Raise 6
    End If
    
    If (lValue And m_l2Power(31 - iShiftBits)) Then
        LShift = ((lValue And m_lOnBits(31 - (iShiftBits + 1))) * _
            m_l2Power(iShiftBits)) Or &H80000000
    Else
        LShift = ((lValue And m_lOnBits(31 - iShiftBits)) * _
            m_l2Power(iShiftBits))
    End If
End Function

'*******************************************************************************
' RShift (FUNCTION)
'*******************************************************************************
Private Function RShift(ByVal lValue As Long, _
                        ByVal iShiftBits As Integer) As Long
    If iShiftBits = 0 Then
        RShift = lValue
        Exit Function
    ElseIf iShiftBits = 31 Then
        If lValue And &H80000000 Then
            RShift = 1
        Else
            RShift = 0
        End If
        Exit Function
    ElseIf iShiftBits < 0 Or iShiftBits > 31 Then
        Err.Raise 6
    End If
    
    RShift = (lValue And &H7FFFFFFE) \ m_l2Power(iShiftBits)
    
    If (lValue And &H80000000) Then
        RShift = (RShift Or (&H40000000 \ m_l2Power(iShiftBits - 1)))
    End If
End Function

'*******************************************************************************
' LShiftByte (FUNCTION)
'*******************************************************************************
Private Function LShiftByte(ByVal bytValue As Byte, _
                            ByVal bytShiftBits As Byte) As Byte
    If bytShiftBits = 0 Then
        LShiftByte = bytValue
        Exit Function
    ElseIf bytShiftBits = 7 Then
        If bytValue And 1 Then
            LShiftByte = &H80
        Else
            LShiftByte = 0
        End If
        Exit Function
    ElseIf bytShiftBits < 0 Or bytShiftBits > 7 Then
        Err.Raise 6
    End If
    
    LShiftByte = ((bytValue And m_bytOnBits(7 - bytShiftBits)) * _
        m_byt2Power(bytShiftBits))
End Function

'*******************************************************************************
' RShiftByte (FUNCTION)
'*******************************************************************************
Private Function RShiftByte(ByVal bytValue As Byte, _
                            ByVal bytShiftBits As Byte) As Byte
    If bytShiftBits = 0 Then
        RShiftByte = bytValue
        Exit Function
    ElseIf bytShiftBits = 7 Then
        If bytValue And &H80 Then
            RShiftByte = 1
        Else
            RShiftByte = 0
        End If
        Exit Function
    ElseIf bytShiftBits < 0 Or bytShiftBits > 7 Then
        Err.Raise 6
    End If
    
    RShiftByte = bytValue \ m_byt2Power(bytShiftBits)
End Function

'*******************************************************************************
' RotateLeft (FUNCTION)
'*******************************************************************************
Private Function RotateLeft(ByVal lValue As Long, _
                            ByVal iShiftBits As Integer) As Long
    RotateLeft = LShift(lValue, iShiftBits) Or RShift(lValue, (32 - iShiftBits))
End Function

''*******************************************************************************
'' RotateLeftByte (FUNCTION)
'*******************************************************************************
Private Function RotateLeftByte(ByVal bytValue As Byte, _
                                ByVal bytShiftBits As Byte) As Byte
    RotateLeftByte = LShiftByte(bytValue, bytShiftBits) Or _
        RShiftByte(bytValue, (8 - bytShiftBits))
End Function

'*******************************************************************************
' Pack (FUNCTION)
'*******************************************************************************
Private Function Pack(b() As Byte) As Long
    Dim lCount As Long
    Dim lTemp  As Long
    
    For lCount = 0 To 3
        lTemp = b(lCount)
        Pack = Pack Or LShift(lTemp, (lCount * 8))
    Next
End Function

'*******************************************************************************
' PackFrom (FUNCTION)
'*******************************************************************************
Private Function PackFrom(b() As Byte, _
                          ByVal K As Long) As Long
    Dim lCount As Long
    Dim lTemp  As Long
    
    For lCount = 0 To 3
        lTemp = b(lCount + K)
        PackFrom = PackFrom Or LShift(lTemp, (lCount * 8))
    Next
End Function

'*******************************************************************************
' Unpack (SUB)
'*******************************************************************************
Private Sub Unpack(ByVal a As Long, _
                   b() As Byte)
    b(0) = a And m_lOnBits(7)
    b(1) = RShift(a, 8) And m_lOnBits(7)
    b(2) = RShift(a, 16) And m_lOnBits(7)
    b(3) = RShift(a, 24) And m_lOnBits(7)
End Sub

'*******************************************************************************
' UnpackFrom (SUB)
'*******************************************************************************
Private Sub UnpackFrom(ByVal a As Long, _
                       b() As Byte, _
                       ByVal K As Long)
    b(0 + K) = a And m_lOnBits(7)
    b(1 + K) = RShift(a, 8) And m_lOnBits(7)
    b(2 + K) = RShift(a, 16) And m_lOnBits(7)
    b(3 + K) = RShift(a, 24) And m_lOnBits(7)
End Sub

'*******************************************************************************
' xtime (FUNCTION)
'*******************************************************************************
Private Function xtime(ByVal a As Byte) As Byte
    Dim b As Byte
    
    If (a And &H80) Then
        b = &H1B
    Else
        b = 0
    End If
    
    a = LShiftByte(a, 1)
    a = a Xor b
    
    xtime = a
End Function

'*******************************************************************************
' bmul (FUNCTION)
'*******************************************************************************
Private Function bmul(ByVal x As Byte, _
                      y As Byte) As Byte
    If x <> 0 And y <> 0 Then
        bmul = m_ptab((CLng(m_ltab(x)) + CLng(m_ltab(y))) Mod 255)
    Else
        bmul = 0
    End If
End Function

'*******************************************************************************
' SubByte (FUNCTION)
'*******************************************************************************
Private Function SubByte(ByVal a As Long) As Long
    Dim b(3) As Byte
    
    Unpack a, b
    b(0) = m_fbsub(b(0))
    b(1) = m_fbsub(b(1))
    b(2) = m_fbsub(b(2))
    b(3) = m_fbsub(b(3))
    
    SubByte = Pack(b)
End Function

'*******************************************************************************
' product (FUNCTION)
'*******************************************************************************
Private Function product(ByVal x As Long, _
                         ByVal y As Long) As Long
    Dim xb(3) As Byte
    Dim yb(3) As Byte
    
    Unpack x, xb
    Unpack y, yb
    product = bmul(xb(0), yb(0)) Xor bmul(xb(1), yb(1)) Xor bmul(xb(2), yb(2)) _
        Xor bmul(xb(3), yb(3))
End Function

'*******************************************************************************
' InvMixCol (FUNCTION)
'*******************************************************************************
Private Function InvMixCol(ByVal x As Long) As Long
    Dim y       As Long
    Dim M       As Long
    Dim b(3)    As Byte
    
    M = Pack(m_InCo)
    b(3) = product(M, x)
    M = RotateLeft(M, 24)
    b(2) = product(M, x)
    M = RotateLeft(M, 24)
    b(1) = product(M, x)
    M = RotateLeft(M, 24)
    b(0) = product(M, x)
    y = Pack(b)
    
    InvMixCol = y
End Function

'*******************************************************************************
' ByteSub (FUNCTION)
'*******************************************************************************
Private Function ByteSub(ByVal x As Byte) As Byte
    Dim y As Byte
    
    y = m_ptab(255 - m_ltab(x))
    x = y
    x = RotateLeftByte(x, 1)
    y = y Xor x
    x = RotateLeftByte(x, 1)
    y = y Xor x
    x = RotateLeftByte(x, 1)
    y = y Xor x
    x = RotateLeftByte(x, 1)
    y = y Xor x
    y = y Xor &H63
    
    ByteSub = y
End Function

'*******************************************************************************
' gentables (SUB)
'*******************************************************************************
Public Sub gentables()
    Dim i       As Long
    Dim y       As Byte
    Dim b(3)    As Byte
    Dim ib      As Byte
    
    m_ltab(0) = 0
    m_ptab(0) = 1
    m_ltab(1) = 0
    m_ptab(1) = 3
    m_ltab(3) = 1
    
    For i = 2 To 255
        m_ptab(i) = m_ptab(i - 1) Xor xtime(m_ptab(i - 1))
        m_ltab(m_ptab(i)) = i
    Next
    
    m_fbsub(0) = &H63
    m_rbsub(&H63) = 0
    
    For i = 1 To 255
        ib = i
        y = ByteSub(ib)
        m_fbsub(i) = y
        m_rbsub(y) = i
    Next
    
        y = 1
    For i = 0 To 29
        m_rco(i) = y
        y = xtime(y)
    Next
    
    For i = 0 To 255
        y = m_fbsub(i)
        b(3) = y Xor xtime(y)
        b(2) = y
        b(1) = y
        b(0) = xtime(y)
        m_ftable(i) = Pack(b)
        
        y = m_rbsub(i)
        b(3) = bmul(m_InCo(0), y)
        b(2) = bmul(m_InCo(1), y)
        b(1) = bmul(m_InCo(2), y)
        b(0) = bmul(m_InCo(3), y)
        m_rtable(i) = Pack(b)
    Next
End Sub

'*******************************************************************************
' gkey (SUB)
'*******************************************************************************
Public Sub gkey(ByVal nb As Long, _
                ByVal nk As Long, _
                Key() As Byte)
                
    Dim i               As Long
    Dim j               As Long
    Dim K               As Long
    Dim M               As Long
    Dim n               As Long
    Dim C1              As Long
    Dim C2              As Long
    Dim C3              As Long
    Dim CipherKey(7)    As Long
    
    m_Nb = nb
    m_Nk = nk
    
    If m_Nb >= m_Nk Then
        m_Nr = 6 + m_Nb
    Else
        m_Nr = 6 + m_Nk
    End If
    
    C1 = 1
    If m_Nb < 8 Then
        C2 = 2
        C3 = 3
    Else
        C2 = 3
        C3 = 4
    End If
    
    For j = 0 To nb - 1
        M = j * 3
        
        m_fi(M) = (j + C1) Mod nb
        m_fi(M + 1) = (j + C2) Mod nb
        m_fi(M + 2) = (j + C3) Mod nb
        m_ri(M) = (nb + j - C1) Mod nb
        m_ri(M + 1) = (nb + j - C2) Mod nb
        m_ri(M + 2) = (nb + j - C3) Mod nb
    Next
    
    n = m_Nb * (m_Nr + 1)
    
    For i = 0 To m_Nk - 1
        j = i * 4
        CipherKey(i) = PackFrom(Key, j)
    Next
    
    For i = 0 To m_Nk - 1
        m_fkey(i) = CipherKey(i)
    Next
    
    j = m_Nk
    K = 0
    Do While j < n
        m_fkey(j) = m_fkey(j - m_Nk) Xor _
            SubByte(RotateLeft(m_fkey(j - 1), 24)) Xor m_rco(K)
        If m_Nk <= 6 Then
            i = 1
            Do While i < m_Nk And (i + j) < n
                m_fkey(i + j) = m_fkey(i + j - m_Nk) Xor _
                    m_fkey(i + j - 1)
                i = i + 1
            Loop
        Else
            ' Problem fixed here
            i = 1
            Do While i < 4 And (i + j) < n
                m_fkey(i + j) = m_fkey(i + j - m_Nk) Xor _
                    m_fkey(i + j - 1)
                i = i + 1
            Loop
            If j + 4 < n Then
                m_fkey(j + 4) = m_fkey(j + 4 - m_Nk) Xor _
                    SubByte(m_fkey(j + 3))
            End If
            i = 5
            Do While i < m_Nk And (i + j) < n
                m_fkey(i + j) = m_fkey(i + j - m_Nk) Xor _
                    m_fkey(i + j - 1)
                i = i + 1
            Loop
        End If
        
        j = j + m_Nk
        K = K + 1
    Loop
    
    For j = 0 To m_Nb - 1
        m_rkey(j + n - nb) = m_fkey(j)
    Next
    
    i = m_Nb
    Do While i < n - m_Nb
        K = n - m_Nb - i
        For j = 0 To m_Nb - 1
            m_rkey(K + j) = InvMixCol(m_fkey(i + j))
        Next
        i = i + m_Nb
    Loop
    
    j = n - m_Nb
    Do While j < n
        m_rkey(j - n + m_Nb) = m_fkey(j)
        j = j + 1
    Loop
End Sub

'*******************************************************************************
' encrypt (SUB)
'*******************************************************************************
Public Sub Encrypt(buff() As Byte)
    Dim i       As Long
    Dim j       As Long
    Dim K       As Long
    Dim M       As Long
    Dim a(7)    As Long
    Dim b(7)    As Long
    Dim x()     As Long
    Dim y()     As Long
    Dim t()     As Long
    
    For i = 0 To m_Nb - 1
        j = i * 4
        
        a(i) = PackFrom(buff, j)
        a(i) = a(i) Xor m_fkey(i)
    Next
    
    K = m_Nb
    x = a
    y = b
    
    For i = 1 To m_Nr - 1
        For j = 0 To m_Nb - 1
            M = j * 3
            y(j) = m_fkey(K) Xor m_ftable(x(j) And m_lOnBits(7)) Xor _
                RotateLeft(m_ftable(RShift(x(m_fi(M)), 8) And m_lOnBits(7)), 8) Xor _
                RotateLeft(m_ftable(RShift(x(m_fi(M + 1)), 16) And m_lOnBits(7)), 16) Xor _
                RotateLeft(m_ftable(RShift(x(m_fi(M + 2)), 24) And m_lOnBits(7)), 24)
            K = K + 1
        Next
        t = x
        x = y
        y = t
    Next
    
    For j = 0 To m_Nb - 1
        M = j * 3
        y(j) = m_fkey(K) Xor m_fbsub(x(j) And m_lOnBits(7)) Xor _
            RotateLeft(m_fbsub(RShift(x(m_fi(M)), 8) And m_lOnBits(7)), 8) Xor _
            RotateLeft(m_fbsub(RShift(x(m_fi(M + 1)), 16) And m_lOnBits(7)), 16) Xor _
            RotateLeft(m_fbsub(RShift(x(m_fi(M + 2)), 24) And m_lOnBits(7)), 24)
        K = K + 1
    Next
    
    For i = 0 To m_Nb - 1
        j = i * 4
        UnpackFrom y(i), buff, j
        x(i) = 0
        y(i) = 0
    Next
End Sub

'*******************************************************************************
' decrypt (SUB)
'*******************************************************************************
Public Sub Decrypt(buff() As Byte)
    Dim i As Long
    Dim j As Long
    Dim K As Long
    Dim M As Long
    Dim a(7) As Long
    Dim b(7) As Long
    Dim x() As Long
    Dim y() As Long
    Dim t() As Long
    
    For i = 0 To m_Nb - 1
        j = i * 4
        a(i) = PackFrom(buff, j)
        a(i) = a(i) Xor m_rkey(i)
    Next
    
    K = m_Nb
    x = a
    y = b
    
    For i = 1 To m_Nr - 1
        For j = 0 To m_Nb - 1
            M = j * 3
            y(j) = m_rkey(K) Xor m_rtable(x(j) And m_lOnBits(7)) Xor _
                RotateLeft(m_rtable(RShift(x(m_ri(M)), 8) And m_lOnBits(7)), 8) Xor _
                RotateLeft(m_rtable(RShift(x(m_ri(M + 1)), 16) And m_lOnBits(7)), 16) Xor _
                RotateLeft(m_rtable(RShift(x(m_ri(M + 2)), 24) And m_lOnBits(7)), 24)
            K = K + 1
        Next
        t = x
        x = y
        y = t
    Next
    
    For j = 0 To m_Nb - 1
        M = j * 3
        
        y(j) = m_rkey(K) Xor m_rbsub(x(j) And m_lOnBits(7)) Xor _
            RotateLeft(m_rbsub(RShift(x(m_ri(M)), 8) And m_lOnBits(7)), 8) Xor _
            RotateLeft(m_rbsub(RShift(x(m_ri(M + 1)), 16) And m_lOnBits(7)), 16) Xor _
            RotateLeft(m_rbsub(RShift(x(m_ri(M + 2)), 24) And m_lOnBits(7)), 24)
        K = K + 1
    Next
    
    For i = 0 To m_Nb - 1
        j = i * 4
        
        UnpackFrom y(i), buff, j
        x(i) = 0
        y(i) = 0
    Next
End Sub

''*******************************************************************************
'' CopyBytesASP (SUB)
''
'' Slower non-API function you can use to copy array data
''*******************************************************************************
'Private Sub CopyBytesASP(bytDest() As Byte, _
'                         lDestStart As Long, _
'                         bytSource() As Byte, _
'                         lSourceStart As Long, _
'                         lLength As Long)
'    Dim lCount As Long
'
'    lCount = 0
'    Do
'        bytDest(lDestStart + lCount) = bytSource(lSourceStart + lCount)
'        lCount = lCount + 1
'    Loop Until lCount = lLength
'End Sub

'*******************************************************************************
' IsInitialized (FUNCTION)
'*******************************************************************************
Private Function IsInitialized(ByRef vArray As Variant) As Boolean
    On Error Resume Next
    
    IsInitialized = IsNumeric(UBound(vArray))
End Function

'*******************************************************************************
' EncryptData (FUNCTION)
'
' Takes the message, whatever the size, and password in one call and does
' everything for you to return an encoded/encrypted message
'*******************************************************************************
Public Function EncryptData(bytMessage() As Byte, _
                            bytPassword() As Byte) As Byte()
    Dim bytKey(31)      As Byte
    Dim bytIn()         As Byte
    Dim bytOut()        As Byte
    Dim bytTemp(31)     As Byte
    Dim lCount          As Long
    Dim lLength         As Long
    Dim lEncodedLength  As Long
    Dim bytLen(3)       As Byte
    Dim lPosition       As Long
    
    If Not IsInitialized(bytMessage) Then
        Exit Function
    End If
    If Not IsInitialized(bytPassword) Then
        Exit Function
    End If
    
    ' Use first 32 bytes of the password for the key
    For lCount = 0 To UBound(bytPassword)
        bytKey(lCount) = bytPassword(lCount)
        If lCount = 31 Then
            Exit For
        End If
    Next
    
    ' Prepare the key; assume 256 bit block and key size
    gentables
    gkey 8, 8, bytKey
    
    ' We are going to put the message size on the front of the message
    ' in the first 4 bytes. If the length is more than a max int we are
    ' in trouble
    lLength = UBound(bytMessage) + 1
    lEncodedLength = lLength + 4
    
    ' The encoded length includes the 4 bytes stuffed on the front
    ' and is padded out to be modulus 32
    If lEncodedLength Mod 32 <> 0 Then
        lEncodedLength = lEncodedLength + 32 - (lEncodedLength Mod 32)
    End If
    ReDim bytIn(lEncodedLength - 1)
    ReDim bytOut(lEncodedLength - 1)
    
    ' Put the length on the front
    '* Unpack lLength, bytIn
    CopyMemory VarPtr(bytIn(0)), VarPtr(lLength), 4
    ' Put the rest of the message after it
    '* CopyBytesASP bytIn, 4, bytMessage, 0, lLength
    CopyMemory VarPtr(bytIn(4)), VarPtr(bytMessage(0)), lLength

    ' Encrypt a block at a time
    For lCount = 0 To lEncodedLength - 1 Step 32
        '* CopyBytesASP bytTemp, 0, bytIn, lCount, 32
        CopyMemory VarPtr(bytTemp(0)), VarPtr(bytIn(lCount)), 32
        Encrypt bytTemp
        '* CopyBytesASP bytOut, lCount, bytTemp, 0, 32
        CopyMemory VarPtr(bytOut(lCount)), VarPtr(bytTemp(0)), 32
    Next
    
    EncryptData = bytOut
End Function

'*******************************************************************************
' DecryptData (FUNCTION)
'
' Opposite of Encryptdata
'*******************************************************************************
Public Function DecryptData(bytIn() As Byte, _
                            bytPassword() As Byte) As Byte()
    Dim bytMessage()    As Byte
    Dim bytKey(31)      As Byte
    Dim bytOut()        As Byte
    Dim bytTemp(31)     As Byte
    Dim lCount          As Long
    Dim lLength         As Long
    Dim lEncodedLength  As Long
    Dim bytLen(3)       As Byte
    Dim lPosition       As Long
    
    If Not IsInitialized(bytIn) Then
        Exit Function
    End If
    If Not IsInitialized(bytPassword) Then
        Exit Function
    End If
    
    lEncodedLength = UBound(bytIn) + 1
    
    If lEncodedLength Mod 32 <> 0 Then
        Exit Function
    End If
    
    ' Use first 32 bytes of the password for the key
    For lCount = 0 To UBound(bytPassword)
        bytKey(lCount) = bytPassword(lCount)
        If lCount = 31 Then
            Exit For
        End If
    Next
    
    ' Prepare the key; assume 256 bit block and key size
    gentables
    gkey 8, 8, bytKey

    ' The output array needs to be the same size as the input array
    ReDim bytOut(lEncodedLength - 1)
    
    ' Decrypt a block at a time
    For lCount = 0 To lEncodedLength - 1 Step 32
        '* CopyBytesASP bytTemp, 0, bytIn, lCount, 32
        CopyMemory VarPtr(bytTemp(0)), VarPtr(bytIn(lCount)), 32
        Decrypt bytTemp
        '* CopyBytesASP bytOut, lCount, bytTemp, 0, 32
        CopyMemory VarPtr(bytOut(lCount)), VarPtr(bytTemp(0)), 32
    Next

    ' Get the original length of the string from the first 4 bytes
    '* lLength = Pack(bytOut)
    CopyMemory VarPtr(lLength), VarPtr(bytOut(0)), 4
    
    ' Make sure the length is consistent with our data
    If lLength > lEncodedLength - 4 Then
        Exit Function
    End If
    
    ' Prepare the output message byte array
    ReDim bytMessage(lLength - 1)
    '* CopyBytesASP bytMessage, 0, bytOut, 4, lLength
    CopyMemory VarPtr(bytMessage(0)), VarPtr(bytOut(4)), lLength
    
    DecryptData = bytMessage
End Function
Attribute VB_Name = "CSHA256"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'THIS IS FOR AWS (NOW PRODUCT ADVERTIZING?) SIGNED REQUESTS.
'http://developer.amazonwebservices.com/connect/thread.jspa?threadID=33204&start=15&tstart=0
'http://www.freevbcode.com/ShowCode.asp?ID=2565






'VERSION 1.0 CLASS
'BEGIN
'  MultiUse = -1  'True
'  Persistable = 0  'NotPersistable
'  DataBindingBehavior = 0  'vbNone
'  DataSourceBehavior = 0   'vbNone
'  MTSTransactionMode = 0   'NotAnMTSObject
'End
'Attribute VB_Name = "CSHA256"
'Attribute VB_GlobalNameSpace = False
'Attribute VB_Creatable = True
'Attribute VB_PredeclaredId = False
'Attribute VB_Exposed = False
'*******************************************************************************
' MODULE:       CSHA256
' FILENAME:     CSHA256.cls
' AUTHOR:       Phil Fresle
' CREATED:      10-Apr-2001
' COPYRIGHT:    Copyright 2001 Phil Fresle. All Rights Reserved.
'
' DESCRIPTION:
' This class is used to generate a SHA-256 'digest' or 'signature' of a string.
' The SHA-256 algorithm is one of the industry standard methods for generating
' digital signatures. It is generically known as a digest, digital signature,
' one-way encryption, hash or checksum algorithm. A common use for SHA-256 is
' for password encryption as it is one-way in nature, that does not mean that
' your passwords are not free from a dictionary attack. If you are using the
' routine for passwords, you can make it a little more secure by concatenating
' some known random characters to the password before you generate the signature
' and on subsequent tests, so even if a hacker knows you are using SHA-256 for
' your passwords, the random characters will make it harder to dictionary attack.
'
' *** CAUTION ***
' See the comment attached to the SHA256 method below regarding use on systems
' with different character sets.
'
' This is 'free' software with the following restrictions:
'
' You may not redistribute this code as a 'sample' or 'demo'. However, you are free
' to use the source code in your own code, but you may not claim that you created
' the sample code. It is expressly forbidden to sell or profit from this source code
' other than by the knowledge gained or the enhanced value added by your own code.
'
' Use of this software is also done so at your own risk. The code is supplied as
' is without warranty or guarantee of any kind.
'
' Should you wish to commission some derivative work based on this code provided
' here, or any consultancy work, please do not hesitate to contact us.
'
' Web Site:  http://www.frez.co.uk
' E-mail:    sales@frez.co.uk
'
' MODIFICATION HISTORY:
' 10-Apr-2001   Phil Fresle     Initial Version
'*******************************************************************************
Option Explicit

Private m_lOnBits(30)   As Long
Private m_l2Power(30)   As Long
Private K(63)           As Long

Private Const BITS_TO_A_BYTE  As Long = 8
Private Const BYTES_TO_A_WORD As Long = 4
Private Const BITS_TO_A_WORD  As Long = BYTES_TO_A_WORD * BITS_TO_A_BYTE

'*******************************************************************************
' Class_Initialize (SUB)
'*******************************************************************************
Private Sub Class_Initialize()
    ' Could have done this with a loop calculating each value, but simply
    ' assigning the values is quicker - BITS SET FROM RIGHT
    m_lOnBits(0) = 1            ' 00000000000000000000000000000001
    m_lOnBits(1) = 3            ' 00000000000000000000000000000011
    m_lOnBits(2) = 7            ' 00000000000000000000000000000111
    m_lOnBits(3) = 15           ' 00000000000000000000000000001111
    m_lOnBits(4) = 31           ' 00000000000000000000000000011111
    m_lOnBits(5) = 63           ' 00000000000000000000000000111111
    m_lOnBits(6) = 127          ' 00000000000000000000000001111111
    m_lOnBits(7) = 255          ' 00000000000000000000000011111111
    m_lOnBits(8) = 511          ' 00000000000000000000000111111111
    m_lOnBits(9) = 1023         ' 00000000000000000000001111111111
    m_lOnBits(10) = 2047        ' 00000000000000000000011111111111
    m_lOnBits(11) = 4095        ' 00000000000000000000111111111111
    m_lOnBits(12) = 8191        ' 00000000000000000001111111111111
    m_lOnBits(13) = 16383       ' 00000000000000000011111111111111
    m_lOnBits(14) = 32767       ' 00000000000000000111111111111111
    m_lOnBits(15) = 65535       ' 00000000000000001111111111111111
    m_lOnBits(16) = 131071      ' 00000000000000011111111111111111
    m_lOnBits(17) = 262143      ' 00000000000000111111111111111111
    m_lOnBits(18) = 524287      ' 00000000000001111111111111111111
    m_lOnBits(19) = 1048575     ' 00000000000011111111111111111111
    m_lOnBits(20) = 2097151     ' 00000000000111111111111111111111
    m_lOnBits(21) = 4194303     ' 00000000001111111111111111111111
    m_lOnBits(22) = 8388607     ' 00000000011111111111111111111111
    m_lOnBits(23) = 16777215    ' 00000000111111111111111111111111
    m_lOnBits(24) = 33554431    ' 00000001111111111111111111111111
    m_lOnBits(25) = 67108863    ' 00000011111111111111111111111111
    m_lOnBits(26) = 134217727   ' 00000111111111111111111111111111
    m_lOnBits(27) = 268435455   ' 00001111111111111111111111111111
    m_lOnBits(28) = 536870911   ' 00011111111111111111111111111111
    m_lOnBits(29) = 1073741823  ' 00111111111111111111111111111111
    m_lOnBits(30) = 2147483647  ' 01111111111111111111111111111111
    
    ' Could have done this with a loop calculating each value, but simply
    ' assigning the values is quicker - POWERS OF 2
    m_l2Power(0) = 1            ' 00000000000000000000000000000001
    m_l2Power(1) = 2            ' 00000000000000000000000000000010
    m_l2Power(2) = 4            ' 00000000000000000000000000000100
    m_l2Power(3) = 8            ' 00000000000000000000000000001000
    m_l2Power(4) = 16           ' 00000000000000000000000000010000
    m_l2Power(5) = 32           ' 00000000000000000000000000100000
    m_l2Power(6) = 64           ' 00000000000000000000000001000000
    m_l2Power(7) = 128          ' 00000000000000000000000010000000
    m_l2Power(8) = 256          ' 00000000000000000000000100000000
    m_l2Power(9) = 512          ' 00000000000000000000001000000000
    m_l2Power(10) = 1024        ' 00000000000000000000010000000000
    m_l2Power(11) = 2048        ' 00000000000000000000100000000000
    m_l2Power(12) = 4096        ' 00000000000000000001000000000000
    m_l2Power(13) = 8192        ' 00000000000000000010000000000000
    m_l2Power(14) = 16384       ' 00000000000000000100000000000000
    m_l2Power(15) = 32768       ' 00000000000000001000000000000000
    m_l2Power(16) = 65536       ' 00000000000000010000000000000000
    m_l2Power(17) = 131072      ' 00000000000000100000000000000000
    m_l2Power(18) = 262144      ' 00000000000001000000000000000000
    m_l2Power(19) = 524288      ' 00000000000010000000000000000000
    m_l2Power(20) = 1048576     ' 00000000000100000000000000000000
    m_l2Power(21) = 2097152     ' 00000000001000000000000000000000
    m_l2Power(22) = 4194304     ' 00000000010000000000000000000000
    m_l2Power(23) = 8388608     ' 00000000100000000000000000000000
    m_l2Power(24) = 16777216    ' 00000001000000000000000000000000
    m_l2Power(25) = 33554432    ' 00000010000000000000000000000000
    m_l2Power(26) = 67108864    ' 00000100000000000000000000000000
    m_l2Power(27) = 134217728   ' 00001000000000000000000000000000
    m_l2Power(28) = 268435456   ' 00010000000000000000000000000000
    m_l2Power(29) = 536870912   ' 00100000000000000000000000000000
    m_l2Power(30) = 1073741824  ' 01000000000000000000000000000000
    
    ' Just put together the K array once
    K(0) = &H428A2F98
    K(1) = &H71374491
    K(2) = &HB5C0FBCF
    K(3) = &HE9B5DBA5
    K(4) = &H3956C25B
    K(5) = &H59F111F1
    K(6) = &H923F82A4
    K(7) = &HAB1C5ED5
    K(8) = &HD807AA98
    K(9) = &H12835B01
    K(10) = &H243185BE
    K(11) = &H550C7DC3
    K(12) = &H72BE5D74
    K(13) = &H80DEB1FE
    K(14) = &H9BDC06A7
    K(15) = &HC19BF174
    K(16) = &HE49B69C1
    K(17) = &HEFBE4786
    K(18) = &HFC19DC6
    K(19) = &H240CA1CC
    K(20) = &H2DE92C6F
    K(21) = &H4A7484AA
    K(22) = &H5CB0A9DC
    K(23) = &H76F988DA
    K(24) = &H983E5152
    K(25) = &HA831C66D
    K(26) = &HB00327C8
    K(27) = &HBF597FC7
    K(28) = &HC6E00BF3
    K(29) = &HD5A79147
    K(30) = &H6CA6351
    K(31) = &H14292967
    K(32) = &H27B70A85
    K(33) = &H2E1B2138
    K(34) = &H4D2C6DFC
    K(35) = &H53380D13
    K(36) = &H650A7354
    K(37) = &H766A0ABB
    K(38) = &H81C2C92E
    K(39) = &H92722C85
    K(40) = &HA2BFE8A1
    K(41) = &HA81A664B
    K(42) = &HC24B8B70
    K(43) = &HC76C51A3
    K(44) = &HD192E819
    K(45) = &HD6990624
    K(46) = &HF40E3585
    K(47) = &H106AA070
    K(48) = &H19A4C116
    K(49) = &H1E376C08
    K(50) = &H2748774C
    K(51) = &H34B0BCB5
    K(52) = &H391C0CB3
    K(53) = &H4ED8AA4A
    K(54) = &H5B9CCA4F
    K(55) = &H682E6FF3
    K(56) = &H748F82EE
    K(57) = &H78A5636F
    K(58) = &H84C87814
    K(59) = &H8CC70208
    K(60) = &H90BEFFFA
    K(61) = &HA4506CEB
    K(62) = &HBEF9A3F7
    K(63) = &HC67178F2
End Sub

'*******************************************************************************
' LShift (FUNCTION)
'
' PARAMETERS:
' (In) - lValue     - Long    - The value to be shifted
' (In) - iShiftBits - Integer - The number of bits to shift the value by
'
' RETURN VALUE:
' Long - The shifted long integer
'
' DESCRIPTION:
' A left shift takes all the set binary bits and moves them left, in-filling
' with zeros in the vacated bits on the right. This function is equivalent to
' the << operator in Java and C++
'*******************************************************************************
Private Function LShift(ByVal lValue As Long, _
                        ByVal iShiftBits As Integer) As Long
    ' NOTE: If you can guarantee that the Shift parameter will be in the
    ' range 1 to 30 you can safely strip of this first nested if structure for
    ' speed.
    '
    ' A shift of zero is no shift at all.
    If iShiftBits = 0 Then
        LShift = lValue
        Exit Function
        
    ' A shift of 31 will result in the right most bit becoming the left most
    ' bit and all other bits being cleared
    ElseIf iShiftBits = 31 Then
        If lValue And 1 Then
            LShift = &H80000000
        Else
            LShift = 0
        End If
        Exit Function
        
    ' A shift of less than zero or more than 31 is undefined
    ElseIf iShiftBits < 0 Or iShiftBits > 31 Then
        Err.Raise 6
    End If
    
    ' If the left most bit that remains will end up in the negative bit
    ' position (&H80000000) we would end up with an overflow if we took the
    ' standard route. We need to strip the left most bit and add it back
    ' afterwards.
    If (lValue And m_l2Power(31 - iShiftBits)) Then
    
        ' (Value And OnBits(31 - (Shift + 1))) chops off the left most bits that
        ' we are shifting into, but also the left most bit we still want as this
        ' is going to end up in the negative bit marker position (&H80000000).
        ' After the multiplication/shift we Or the result with &H80000000 to
        ' turn the negative bit on.
        LShift = ((lValue And m_lOnBits(31 - (iShiftBits + 1))) * _
            m_l2Power(iShiftBits)) Or &H80000000
    
    Else
    
        ' (Value And OnBits(31-Shift)) chops off the left most bits that we are
        ' shifting into so we do not get an overflow error when we do the
        ' multiplication/shift
        LShift = ((lValue And m_lOnBits(31 - iShiftBits)) * _
            m_l2Power(iShiftBits))
        
    End If
End Function

'*******************************************************************************
' RShift (FUNCTION)
'
' PARAMETERS:
' (In) - lValue     - Long    - The value to be shifted
' (In) - iShiftBits - Integer - The number of bits to shift the value by
'
' RETURN VALUE:
' Long - The shifted long integer
'
' DESCRIPTION:
' The right shift of an unsigned long integer involves shifting all the set bits
' to the right and in-filling on the left with zeros. This function is
' equivalent to the >>> operator in Java or the >> operator in C++ when used on
' an unsigned long.
'*******************************************************************************
Private Function RShift(ByVal lValue As Long, _
                        ByVal iShiftBits As Integer) As Long
    
    ' NOTE: If you can guarantee that the Shift parameter will be in the
    ' range 1 to 30 you can safely strip of this first nested if structure for
    ' speed.
    '
    ' A shift of zero is no shift at all
    If iShiftBits = 0 Then
        RShift = lValue
        Exit Function
        
    ' A shift of 31 will clear all bits and move the left most bit to the right
    ' most bit position
    ElseIf iShiftBits = 31 Then
        If lValue And &H80000000 Then
            RShift = 1
        Else
            RShift = 0
        End If
        Exit Function
        
    ' A shift of less than zero or more than 31 is undefined
    ElseIf iShiftBits < 0 Or iShiftBits > 31 Then
        Err.Raise 6
    End If
    
    ' We do not care about the top most bit or the final bit, the top most bit
    ' will be taken into account in the next stage, the final bit (whether it
    ' is an odd number or not) is being shifted into, so we do not give a jot
    ' about it
    RShift = (lValue And &H7FFFFFFE) \ m_l2Power(iShiftBits)
    
    ' If the top most bit (&H80000000) was set we need to do things differently
    ' as in a normal VB signed long integer the top most bit is used to indicate
    ' the sign of the number, when it is set it is a negative number, so just
    ' deviding by a factor of 2 as above would not work.
    ' NOTE: (lValue And  &H80000000) is equivalent to (lValue < 0), you could
    ' get a very marginal speed improvement by changing the test to (lValue < 0)
    If (lValue And &H80000000) Then
        ' We take the value computed so far, and then add the left most negative
        ' bit after it has been shifted to the right the appropriate number of
        ' places
        RShift = (RShift Or (&H40000000 \ m_l2Power(iShiftBits - 1)))
    End If
End Function

'*******************************************************************************
' AddUnsigned (FUNCTION)
'
' PARAMETERS:
' (In) - lX - Long - First value
' (In) - lY - Long - Second value
'
' RETURN VALUE:
' Long - Result
'
' DESCRIPTION:
' Adds two potentially large unsigned numbers without overflowing
'*******************************************************************************
Private Function AddUnsigned(ByVal lX As Long, _
                             ByVal lY As Long) As Long
    Dim lX4     As Long
    Dim lY4     As Long
    Dim lX8     As Long
    Dim lY8     As Long
    Dim lResult As Long
 
    lX8 = lX And &H80000000
    lY8 = lY And &H80000000
    lX4 = lX And &H40000000
    lY4 = lY And &H40000000
 
    lResult = (lX And &H3FFFFFFF) + (lY And &H3FFFFFFF)
 
    If lX4 And lY4 Then
        lResult = lResult Xor &H80000000 Xor lX8 Xor lY8
    ElseIf lX4 Or lY4 Then
        If lResult And &H40000000 Then
            lResult = lResult Xor &HC0000000 Xor lX8 Xor lY8
        Else
            lResult = lResult Xor &H40000000 Xor lX8 Xor lY8
        End If
    Else
        lResult = lResult Xor lX8 Xor lY8
    End If
 
    AddUnsigned = lResult
End Function

'*******************************************************************************
' Ch (FUNCTION)
'
' DESCRIPTION:
' SHA-256 function
'*******************************************************************************
Private Function Ch(ByVal x As Long, _
                    ByVal y As Long, _
                    ByVal z As Long) As Long
    Ch = ((x And y) Xor ((Not x) And z))
End Function

'*******************************************************************************
' Maj (FUNCTION)
'
' DESCRIPTION:
' SHA-256 function
'*******************************************************************************
Private Function Maj(ByVal x As Long, _
                     ByVal y As Long, _
                     ByVal z As Long) As Long
    Maj = ((x And y) Xor (x And z) Xor (y And z))
End Function

'*******************************************************************************
' S (FUNCTION)
'
' DESCRIPTION:
' SHA-256 function (rotate right)
'*******************************************************************************
Private Function S(ByVal x As Long, _
                   ByVal n As Long) As Long
    S = (RShift(x, (n And m_lOnBits(4))) Or LShift(x, (32 - (n And m_lOnBits(4)))))
End Function

'*******************************************************************************
' R (FUNCTION)
'
' DESCRIPTION:
' SHA-256 function (just a right shift)
'*******************************************************************************
Private Function R(ByVal x As Long, _
                   ByVal n As Long) As Long
    R = RShift(x, CInt(n And m_lOnBits(4)))
End Function

'*******************************************************************************
' Sigma0 (FUNCTION)
'
' DESCRIPTION:
' SHA-256 function
'*******************************************************************************
Private Function Sigma0(ByVal x As Long) As Long
    Sigma0 = (S(x, 2) Xor S(x, 13) Xor S(x, 22))
End Function

'*******************************************************************************
' Sigma1 (FUNCTION)
'
' DESCRIPTION:
' SHA-256 function
'*******************************************************************************
Private Function Sigma1(ByVal x As Long) As Long
    Sigma1 = (S(x, 6) Xor S(x, 11) Xor S(x, 25))
End Function

'*******************************************************************************
' Gamma0 (FUNCTION)
'
' DESCRIPTION:
' SHA-256 function
'*******************************************************************************
Private Function Gamma0(ByVal x As Long) As Long
    Gamma0 = (S(x, 7) Xor S(x, 18) Xor R(x, 3))
End Function

'*******************************************************************************
' Gamma1 (FUNCTION)
'
' DESCRIPTION:
' SHA-256 function
'*******************************************************************************
Private Function Gamma1(ByVal x As Long) As Long
    Gamma1 = (S(x, 17) Xor S(x, 19) Xor R(x, 10))
End Function

'*******************************************************************************
' ConvertToWordArray (FUNCTION)
'
' PARAMETERS:
' (In/Out) - sMessage - String - String message
'
' RETURN VALUE:
' Long() - Converted message as long array
'
' DESCRIPTION:
' Takes the string message and puts it in a long array with padding according to
' the SHA-256 rules (similar to MD5 routine).
'*******************************************************************************
Private Function ConvertToWordArray(sMessage As String) As Long()
    Dim lMessageLength  As Long
    Dim lNumberOfWords  As Long
    Dim lWordArray()    As Long
    Dim lBytePosition   As Long
    Dim lByteCount      As Long
    Dim lWordCount      As Long
    Dim lByte           As Long
    
    Const MODULUS_BITS      As Long = 512
    Const CONGRUENT_BITS    As Long = 448
    
'    lMessageLength = Len(sMessage)
    lMessageLength = Len(sMessage) \ 2 'per Itagaki Fumihiko.
    
    ' Get padded number of words. Message needs to be congruent to 448 bits,
    ' modulo 512 bits. If it is exactly congruent to 448 bits, modulo 512 bits
    ' it must still have another 512 bits added. 512 bits = 64 bytes
    ' (or 16 * 4 byte words), 448 bits = 56 bytes. This means lNumberOfWords must
    ' be a multiple of 16 (i.e. 16 * 4 (bytes) * 8 (bits))
    lNumberOfWords = (((lMessageLength + _
        ((MODULUS_BITS - CONGRUENT_BITS) \ BITS_TO_A_BYTE)) \ _
        (MODULUS_BITS \ BITS_TO_A_BYTE)) + 1) * _
        (MODULUS_BITS \ BITS_TO_A_WORD)
    ReDim lWordArray(lNumberOfWords - 1)
    
    ' Combine each block of 4 bytes (ascii code of character) into one long
    ' value and store in the message. The high-order (most significant) bit of
    ' each byte is listed first. However, unlike MD5 we put the high-order
    ' (most significant) byte first in each word.
    lBytePosition = 0
    lByteCount = 0
    Do Until lByteCount >= lMessageLength
        ' Each word is 4 bytes
        lWordCount = lByteCount \ BYTES_TO_A_WORD
        
        lBytePosition = (3 - (lByteCount Mod BYTES_TO_A_WORD)) * BITS_TO_A_BYTE
        
        ' NOTE: This is where we are using just the first byte of each unicode
        ' character, you may want to make the change here, or to the SHA256 method
        ' so it accepts a byte array.
        
'        lByte = AscB(Mid(sMessage, lByteCount + 1, 1)) 'http://developer.amazonwebservices.com/connect/thread.jspa?threadID=33204&start=15&tstart=0
'        lByte = Asc(Mid(sMessage, lByteCount + 1, 1)) 'http://developer.amazonwebservices.com/connect/thread.jspa?threadID=33204&start=15&tstart=0
        lByte = Val("&H" & Mid(sMessage, 1 + lByteCount * 2, 2)) 'per Itagaki Fumihiko.
        
        lWordArray(lWordCount) = lWordArray(lWordCount) Or LShift(lByte, lBytePosition)
        lByteCount = lByteCount + 1
    Loop

    ' Terminate according to SHA-256 rules with a 1 bit, zeros and the length in
    ' bits stored in the last two words
    lWordCount = lByteCount \ BYTES_TO_A_WORD
    lBytePosition = (3 - (lByteCount Mod BYTES_TO_A_WORD)) * BITS_TO_A_BYTE

    ' Add a terminating 1 bit, all the rest of the bits to the end of the
    ' word array will default to zero
    lWordArray(lWordCount) = lWordArray(lWordCount) Or _
        LShift(&H80, lBytePosition)

    ' We put the length of the message in bits into the last two words, to get
    ' the length in bits we need to multiply by 8 (or left shift 3). This left
    ' shifted value is put in the last word. Any bits shifted off the left edge
    ' need to be put in the penultimate word, we can work out which bits by shifting
    ' right the length by 29 bits.
    lWordArray(lNumberOfWords - 1) = LShift(lMessageLength, 3)
    lWordArray(lNumberOfWords - 2) = RShift(lMessageLength, 29)
    
    ConvertToWordArray = lWordArray
End Function

'*******************************************************************************
' SHA256 (FUNCTION)
'
' PARAMETERS:
' (In/Out) - sMessage - String - Message to digest
'
' RETURN VALUE:
' String - The digest
'
' DESCRIPTION:
' Takes a string and uses the SHA-256 digest to produce a signature for it.
'
' NOTE: Due to the way in which the string is processed the routine assumes a
' single byte character set. VB passes unicode (2-byte) character strings, the
' ConvertToWordArray function uses on the first byte for each character. This
' has been done this way for ease of use, to make the routine truely portable
' you could accept a byte array instead, it would then be up to the calling
' routine to make sure that the byte array is generated from their string in
' a manner consistent with the string type.
'*******************************************************************************
Public Function SHA256(sMessage As String) As String
    Dim HASH(7) As Long
    Dim M()     As Long
    Dim W(63)   As Long
    Dim a       As Long
    Dim b       As Long
    Dim c       As Long
    Dim d       As Long
    Dim e       As Long
    Dim f       As Long
    Dim g       As Long
    Dim h       As Long
    Dim i       As Long
    Dim j       As Long
    Dim T1      As Long
    Dim T2      As Long
    
    ' Initial hash values
    HASH(0) = &H6A09E667
    HASH(1) = &HBB67AE85
    HASH(2) = &H3C6EF372
    HASH(3) = &HA54FF53A
    HASH(4) = &H510E527F
    HASH(5) = &H9B05688C
    HASH(6) = &H1F83D9AB
    HASH(7) = &H5BE0CD19
    
    ' Preprocessing. Append padding bits and length and convert to words
    M = ConvertToWordArray(sMessage)
    
    ' Main loop
    For i = 0 To UBound(M) Step 16
        a = HASH(0)
        b = HASH(1)
        c = HASH(2)
        d = HASH(3)
        e = HASH(4)
        f = HASH(5)
        g = HASH(6)
        h = HASH(7)
        
        For j = 0 To 63
            If j < 16 Then
                W(j) = M(j + i)
            Else
                W(j) = AddUnsigned(AddUnsigned(AddUnsigned(Gamma1(W(j - 2)), _
                    W(j - 7)), Gamma0(W(j - 15))), W(j - 16))
            End If
                
            T1 = AddUnsigned(AddUnsigned(AddUnsigned(AddUnsigned(h, Sigma1(e)), _
                Ch(e, f, g)), K(j)), W(j))
            T2 = AddUnsigned(Sigma0(a), Maj(a, b, c))
            
            h = g
            g = f
            f = e
            e = AddUnsigned(d, T1)
            d = c
            c = b
            b = a
            a = AddUnsigned(T1, T2)
        Next
        
        HASH(0) = AddUnsigned(a, HASH(0))
        HASH(1) = AddUnsigned(b, HASH(1))
        HASH(2) = AddUnsigned(c, HASH(2))
        HASH(3) = AddUnsigned(d, HASH(3))
        HASH(4) = AddUnsigned(e, HASH(4))
        HASH(5) = AddUnsigned(f, HASH(5))
        HASH(6) = AddUnsigned(g, HASH(6))
        HASH(7) = AddUnsigned(h, HASH(7))
    Next
    
    ' Output the 256 bit digest
    SHA256 = LCase(Right("00000000" & Hex(HASH(0)), 8) & _
        Right("00000000" & Hex(HASH(1)), 8) & _
        Right("00000000" & Hex(HASH(2)), 8) & _
        Right("00000000" & Hex(HASH(3)), 8) & _
        Right("00000000" & Hex(HASH(4)), 8) & _
        Right("00000000" & Hex(HASH(5)), 8) & _
        Right("00000000" & Hex(HASH(6)), 8) & _
        Right("00000000" & Hex(HASH(7)), 8))
End Function




Attribute VB_Name = "ImageDisplay"
Attribute VB_Base = "0{97E88791-8A3E-4A38-9EAE-98056F25A265}{80B1E4B9-2BEA-4DBB-97EA-C1B042D8A3CF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Public TargetRow As Integer
Public TargetCol As Integer


Private Sub UserForm_Initialize()
    ' added 10/16/10 by atambe
    TranslateFormControls Me
End Sub
Attribute VB_Name = "MD5"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' Modified for MWS Integration
' Abhijit Tambe, August 2010

Option Explicit

'/******************************************************************************
' *  Copyright (C) 2000 by Robert Hubley.                                      *
' *  All rights reserved.                                                      *
' *                                                                            *
' *  This software is provided ``AS IS'' and any express or implied            *
' *  warranties, including, but not limited to, the implied warranties of      *
' *  merchantability and fitness for a particular purpose, are disclaimed.     *
' *  In no event shall the authors be liable for any direct, indirect,         *
' *  incidental, special, exemplary, or consequential damages (including, but  *
' *  not limited to, procurement of substitute goods or services; loss of use, *
' *  data, or profits; or business interruption) however caused and on any     *
' *  theory of liability, whether in contract, strict liability, or tort       *
' *  (including negligence or otherwise) arising in any way out of the use of  *
' *  this software, even if advised of the possibility of such damage.         *
' *                                                                            *
' ******************************************************************************
'
'  CLASS: MD5
'
'  DESCRIPTION:
'     This is a class which encapsulates a set of MD5 Message Digest functions.
'     MD5 algorithm produces a 128 bit digital fingerprint (signature) from an
'     dataset of arbitrary length.  For details see RFC 1321 (summarized below).
'     This implementation is derived from the RSA Data Security, Inc. MD5 Message-Digest
'     algorithm reference implementation (originally written in C)
'
'  AUTHOR:
'     Robert M. Hubley 12/1999
'
'
'  NOTES:
'      Network Working Group                                    R. Rivest
'      Request for Comments: 1321     MIT Laboratory for Computer Science
'                                             and RSA Data Security, Inc.
'                                                              April 1992
'
'
'                           The MD5 Message-Digest Algorithm
'
'      Summary
'
'         This document describes the MD5 message-digest algorithm. The
'         algorithm takes as input a message of arbitrary length and produces
'         as output a 128-bit "fingerprint" or "message digest" of the input.
'         It is conjectured that it is computationally infeasible to produce
'         two messages having the same message digest, or to produce any
'         message having a given prespecified target message digest. The MD5
'         algorithm is intended for digital signature applications, where a
'         large file must be "compressed" in a secure manner before being
'         encrypted with a private (secret) key under a public-key cryptosystem
'         such as RSA.
'
'         The MD5 algorithm is designed to be quite fast on 32-bit machines. In
'         addition, the MD5 algorithm does not require any large substitution
'         tables; the algorithm can be coded quite compactly.
'
'         The MD5 algorithm is an extension of the MD4 message-digest algorithm
'         1,2]. MD5 is slightly slower than MD4, but is more "conservative" in
'         design. MD5 was designed because it was felt that MD4 was perhaps
'         being adopted for use more quickly than justified by the existing
'         critical review; because MD4 was designed to be exceptionally fast,
'         it is "at the edge" in terms of risking successful cryptanalytic
'         attack. MD5 backs off a bit, giving up a little in speed for a much
'         greater likelihood of ultimate security. It incorporates some
'         suggestions made by various reviewers, and contains additional
'         optimizations. The MD5 algorithm is being placed in the public domain
'         for review and possible adoption as a standard.
'
'         RFC Author:
'         Ronald L.Rivest
'         Massachusetts Institute of Technology
'         Laboratory for Computer Science
'         NE43 -324545    Technology Square
'         Cambridge, MA  02139-1986
'         Phone: (617) 253-5880
'         EMail:    Rivest@ theory.lcs.mit.edu
'
'
'
'  CHANGE HISTORY:
'
'     0.1.0  RMH    1999/12/29      Original version
'
'


'=
'= Class Constants
'=
Private Const OFFSET_4 = 4294967296#
Private Const MAXINT_4 = 2147483647

Private Const S11 = 7
Private Const S12 = 12
Private Const S13 = 17
Private Const S14 = 22
Private Const S21 = 5
Private Const S22 = 9
Private Const S23 = 14
Private Const S24 = 20
Private Const S31 = 4
Private Const S32 = 11
Private Const S33 = 16
Private Const S34 = 23
Private Const S41 = 6
Private Const S42 = 10
Private Const S43 = 15
Private Const S44 = 21


'=
'= Class Variables
'=
Private State(4) As Long
Private ByteCounter As Long
Private ByteBuffer(63) As Byte

'==========================================================================================
'For 64-bit compatibility.

'MSDN: Compatibility Between the 32-bit and 64-bit Versions of Office 2010:
    'http://msdn.microsoft.com/en-us/library/ee691831.aspx
'Technet: Microsoft Office Code Compatibility Inspector:
    'http://technet.microsoft.com/en-us/library/ee833946.aspx
'Samples:
    'http://www.jkp-ads.com/articles/apideclarations.asp
'Windows API functions that were modified/added for 64-bit Windows:
    'http://msdn.microsoft.com/en-us/library/aa383663(VS.85).aspx

'PtrSafe:
    'For Excel 2010 and later (#Vba7 = True), change "Declare" to "Declare PtrSafe".
'LongPtr:
    'For Excel 2010 and later (#Vba7 = True), change the data type of handles and pointers
    'from Long to LongPtr. Leave pointers to strings as String.
'LongLong:
    'For 64-bit Excel (#Win64 = True), change Long (except for handles and pointers!) to LongLong

#If Mac Then
    'Running on MacIntosh. Do nothing.
#ElseIf VBA7 Then
    'Excel 2010 or later:
     #If Win64 Then
        '64-bit Excel, 2010 or later:
        'Use PtrSafe, LongPtr, and LongLong:
        
            Private Declare PtrSafe Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" _
                (Destination As Any, Source As Any, ByVal Length As LongLong)

     #Else
        '32-bit Excel 2010 or later:
        'Use PtrSafe and LongPtr, but NOT LongLong:

            Private Declare PtrSafe Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" _
                (Destination As Any, Source As Any, ByVal Length As Long)
        
     #End If
#Else
    'Excel 2007 or earlier:

        Private Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" _
            (Destination As Any, Source As Any, ByVal Length As Long)

#End If

'==========================================================================================



'=
'= Class Properties
'=
Property Get RegisterA() As String
    RegisterA = State(1)
End Property

Property Get RegisterB() As String
    RegisterB = State(2)
End Property

Property Get RegisterC() As String
    RegisterC = State(3)
End Property

Property Get RegisterD() As String
    RegisterD = State(4)
End Property


'=
'= Class Functions
'=

'
' Function to quickly digest a file into a hex string
'
Public Function DigestFileToHexStr(FileName As String) As String
    Open FileName For Binary Access Read As #1
    MD5Init
    Do While Not EOF(1)
        Get #1, , ByteBuffer
        If Loc(1) < LOF(1) Then
            ByteCounter = ByteCounter + 64
            MD5Transform ByteBuffer
        End If
    Loop
    ByteCounter = ByteCounter + (LOF(1) Mod 64)
    Close #1
    MD5Final
    DigestFileToHexStr = GetValues
End Function

'
' Function to digest a text string and output the result as a string
' of hexadecimal characters.
'
Public Function DigestStrToHexStr(SourceString As String) As String
    MD5Init
    MD5Update Len(SourceString), StringToArray(SourceString)
    MD5Final
    DigestStrToHexStr = GetValues
End Function

'
' A utility function which converts a string into an array of
' bytes.
'
Private Function StringToArray(InString As String) As Byte()
    Dim i As Integer
    Dim bytBuffer() As Byte
    ReDim bytBuffer(Len(InString))
    For i = 0 To Len(InString) - 1
        bytBuffer(i) = Asc(Mid(InString, i + 1, 1))
    Next i
    StringToArray = bytBuffer
End Function

'
' Concatenate the four state vaules into one string
'
Public Function GetValues() As String
    Dim byteArray(0 To 15) As Byte
    
    Dim a As Long
    Dim b As Long
    Dim c As Long
    Dim d As Long
    
    a = State(1)
    b = State(2)
    c = State(3)
    d = State(4)

    CopyMemory byteArray(0), ByVal VarPtr(a), Len(a)
    CopyMemory byteArray(4), ByVal VarPtr(b), Len(b)
    CopyMemory byteArray(8), ByVal VarPtr(c), Len(c)
    CopyMemory byteArray(12), ByVal VarPtr(d), Len(d)
    
    GetValues = StrConv(byteArray, vbUnicode, 1033)
    'GetValues = LongToString(State(1)) & LongToString(State(2)) & LongToString(State(3)) & LongToString(State(4))
End Function

'
' Convert a Long to a Hex string
'
Private Function LongToString(Num As Long) As String
        Dim a As Byte
        Dim b As Byte
        Dim c As Byte
        Dim d As Byte
        
        a = Num And &HFF&
        If a < 16 Then
            LongToString = "0" & Hex(a)
        Else
            LongToString = Hex(a)
        End If
               
        b = (Num And &HFF00&) \ 256
        If b < 16 Then
            LongToString = LongToString & "0" & Hex(b)
        Else
            LongToString = LongToString & Hex(b)
        End If
        
        c = (Num And &HFF0000) \ 65536
        If c < 16 Then
            LongToString = LongToString & "0" & Hex(c)
        Else
            LongToString = LongToString & Hex(c)
        End If
       
        If Num < 0 Then
            d = ((Num And &H7F000000) \ 16777216) Or &H80&
        Else
            d = (Num And &HFF000000) \ 16777216
        End If
        
        If d < 16 Then
            LongToString = LongToString & "0" & Hex(d)
        Else
            LongToString = LongToString & Hex(d)
        End If
    
End Function

'
' Initialize the class
'   This must be called before a digest calculation is started
'
Public Sub MD5Init()
    ByteCounter = 0
    State(1) = UnsignedToLong(1732584193#)
    State(2) = UnsignedToLong(4023233417#)
    State(3) = UnsignedToLong(2562383102#)
    State(4) = UnsignedToLong(271733878#)
End Sub

'
' MD5 Final
'
Public Sub MD5Final()
    Dim dblBits As Double
    
    Dim padding(72) As Byte
    Dim lngBytesBuffered As Long
    
    padding(0) = &H80
    
    dblBits = ByteCounter * 8
    
    ' Pad out
    lngBytesBuffered = ByteCounter Mod 64
    If lngBytesBuffered <= 56 Then
        MD5Update 56 - lngBytesBuffered, padding
    Else
        MD5Update 120 - lngBytesBuffered, padding
    End If
    
    
    padding(0) = UnsignedToLong(dblBits) And &HFF&
    padding(1) = UnsignedToLong(dblBits) \ 256 And &HFF&
    padding(2) = UnsignedToLong(dblBits) \ 65536 And &HFF&
    padding(3) = UnsignedToLong(dblBits) \ 16777216 And &HFF&
    padding(4) = 0
    padding(5) = 0
    padding(6) = 0
    padding(7) = 0
    
    MD5Update 8, padding
End Sub

'
' Break up input stream into 64 byte chunks
'
Public Sub MD5Update(InputLen As Long, InputBuffer() As Byte)
    Dim II As Integer
    Dim i As Integer
    Dim j As Integer
    Dim K As Integer
    Dim lngBufferedBytes As Long
    Dim lngBufferRemaining As Long
    Dim lngRem As Long
    
    lngBufferedBytes = ByteCounter Mod 64
    lngBufferRemaining = 64 - lngBufferedBytes
    ByteCounter = ByteCounter + InputLen
    ' Use up old buffer results first
    If InputLen >= lngBufferRemaining Then
        For II = 0 To lngBufferRemaining - 1
            ByteBuffer(lngBufferedBytes + II) = InputBuffer(II)
        Next II
        MD5Transform ByteBuffer
        
        lngRem = (InputLen) Mod 64
        ' The transfer is a multiple of 64 lets do some transformations
        For i = lngBufferRemaining To InputLen - II - lngRem Step 64
            For j = 0 To 63
                ByteBuffer(j) = InputBuffer(i + j)
            Next j
            MD5Transform ByteBuffer
        Next i
        lngBufferedBytes = 0
    Else
      i = 0
    End If
    
    ' Buffer any remaining input
    For K = 0 To InputLen - i - 1
        ByteBuffer(lngBufferedBytes + K) = InputBuffer(i + K)
    Next K
    
End Sub

'
' MD5 Transform
'
Private Sub MD5Transform(Buffer() As Byte)
    Dim x(16) As Long
    Dim a As Long
    Dim b As Long
    Dim c As Long
    Dim d As Long
    
    a = State(1)
    b = State(2)
    c = State(3)
    d = State(4)
    
    Decode 64, x, Buffer

    ' Round 1
    FF a, b, c, d, x(0), S11, -680876936
    FF d, a, b, c, x(1), S12, -389564586
    FF c, d, a, b, x(2), S13, 606105819
    FF b, c, d, a, x(3), S14, -1044525330
    FF a, b, c, d, x(4), S11, -176418897
    FF d, a, b, c, x(5), S12, 1200080426
    FF c, d, a, b, x(6), S13, -1473231341
    FF b, c, d, a, x(7), S14, -45705983
    FF a, b, c, d, x(8), S11, 1770035416
    FF d, a, b, c, x(9), S12, -1958414417
    FF c, d, a, b, x(10), S13, -42063
    FF b, c, d, a, x(11), S14, -1990404162
    FF a, b, c, d, x(12), S11, 1804603682
    FF d, a, b, c, x(13), S12, -40341101
    FF c, d, a, b, x(14), S13, -1502002290
    FF b, c, d, a, x(15), S14, 1236535329
    
    ' Round 2
    GG a, b, c, d, x(1), S21, -165796510
    GG d, a, b, c, x(6), S22, -1069501632
    GG c, d, a, b, x(11), S23, 643717713
    GG b, c, d, a, x(0), S24, -373897302
    GG a, b, c, d, x(5), S21, -701558691
    GG d, a, b, c, x(10), S22, 38016083
    GG c, d, a, b, x(15), S23, -660478335
    GG b, c, d, a, x(4), S24, -405537848
    GG a, b, c, d, x(9), S21, 568446438
    GG d, a, b, c, x(14), S22, -1019803690
    GG c, d, a, b, x(3), S23, -187363961
    GG b, c, d, a, x(8), S24, 1163531501
    GG a, b, c, d, x(13), S21, -1444681467
    GG d, a, b, c, x(2), S22, -51403784
    GG c, d, a, b, x(7), S23, 1735328473
    GG b, c, d, a, x(12), S24, -1926607734
    
    ' Round 3
    HH a, b, c, d, x(5), S31, -378558
    HH d, a, b, c, x(8), S32, -2022574463
    HH c, d, a, b, x(11), S33, 1839030562
    HH b, c, d, a, x(14), S34, -35309556
    HH a, b, c, d, x(1), S31, -1530992060
    HH d, a, b, c, x(4), S32, 1272893353
    HH c, d, a, b, x(7), S33, -155497632
    HH b, c, d, a, x(10), S34, -1094730640
    HH a, b, c, d, x(13), S31, 681279174
    HH d, a, b, c, x(0), S32, -358537222
    HH c, d, a, b, x(3), S33, -722521979
    HH b, c, d, a, x(6), S34, 76029189
    HH a, b, c, d, x(9), S31, -640364487
    HH d, a, b, c, x(12), S32, -421815835
    HH c, d, a, b, x(15), S33, 530742520
    HH b, c, d, a, x(2), S34, -995338651
    
    ' Round 4
    II a, b, c, d, x(0), S41, -198630844
    II d, a, b, c, x(7), S42, 1126891415
    II c, d, a, b, x(14), S43, -1416354905
    II b, c, d, a, x(5), S44, -57434055
    II a, b, c, d, x(12), S41, 1700485571
    II d, a, b, c, x(3), S42, -1894986606
    II c, d, a, b, x(10), S43, -1051523
    II b, c, d, a, x(1), S44, -2054922799
    II a, b, c, d, x(8), S41, 1873313359
    II d, a, b, c, x(15), S42, -30611744
    II c, d, a, b, x(6), S43, -1560198380
    II b, c, d, a, x(13), S44, 1309151649
    II a, b, c, d, x(4), S41, -145523070
    II d, a, b, c, x(11), S42, -1120210379
    II c, d, a, b, x(2), S43, 718787259
    II b, c, d, a, x(9), S44, -343485551
    
    
    State(1) = LongOverflowAdd(State(1), a)
    State(2) = LongOverflowAdd(State(2), b)
    State(3) = LongOverflowAdd(State(3), c)
    State(4) = LongOverflowAdd(State(4), d)

'  /* Zeroize sensitive information.
'*/
'  MD5_memset ((POINTER)x, 0, sizeof (x));
    
End Sub

Private Sub Decode(Length As Integer, OutputBuffer() As Long, InputBuffer() As Byte)
    Dim intDblIndex As Integer
    Dim intByteIndex As Integer
    Dim dblSum As Double
    
    intDblIndex = 0
    For intByteIndex = 0 To Length - 1 Step 4
        dblSum = InputBuffer(intByteIndex) + _
                                    InputBuffer(intByteIndex + 1) * 256# + _
                                    InputBuffer(intByteIndex + 2) * 65536# + _
                                    InputBuffer(intByteIndex + 3) * 16777216#
        OutputBuffer(intDblIndex) = UnsignedToLong(dblSum)
        intDblIndex = intDblIndex + 1
    Next intByteIndex
End Sub

'
' FF, GG, HH, and II transformations for rounds 1, 2, 3, and 4.
' Rotation is separate from addition to prevent recomputation.
'
Private Function FF(a As Long, _
                    b As Long, _
                    c As Long, _
                    d As Long, _
                    x As Long, _
                    S As Long, _
                    ac As Long) As Long
    a = LongOverflowAdd4(a, (b And c) Or (Not (b) And d), x, ac)
    a = LongLeftRotate(a, S)
    a = LongOverflowAdd(a, b)
End Function

Private Function GG(a As Long, _
                    b As Long, _
                    c As Long, _
                    d As Long, _
                    x As Long, _
                    S As Long, _
                    ac As Long) As Long
    a = LongOverflowAdd4(a, (b And d) Or (c And Not (d)), x, ac)
    a = LongLeftRotate(a, S)
    a = LongOverflowAdd(a, b)
End Function

Private Function HH(a As Long, _
                    b As Long, _
                    c As Long, _
                    d As Long, _
                    x As Long, _
                    S As Long, _
                    ac As Long) As Long
    a = LongOverflowAdd4(a, b Xor c Xor d, x, ac)
    a = LongLeftRotate(a, S)
    a = LongOverflowAdd(a, b)
End Function

Private Function II(a As Long, _
                    b As Long, _
                    c As Long, _
                    d As Long, _
                    x As Long, _
                    S As Long, _
                    ac As Long) As Long
    a = LongOverflowAdd4(a, c Xor (b Or Not (d)), x, ac)
    a = LongLeftRotate(a, S)
    a = LongOverflowAdd(a, b)
End Function

'
' Rotate a long to the right
'
Function LongLeftRotate(value As Long, bits As Long) As Long
    Dim lngSign As Long
    Dim lngI As Long
    bits = bits Mod 32
    If bits = 0 Then LongLeftRotate = value: Exit Function
    For lngI = 1 To bits
        lngSign = value And &HC0000000
        value = (value And &H3FFFFFFF) * 2
        value = value Or ((lngSign < 0) And 1) Or (CBool(lngSign And _
                &H40000000) And &H80000000)
    Next
    LongLeftRotate = value
End Function

'
' Function to add two unsigned numbers together as in C.
' Overflows are ignored!
'
Private Function LongOverflowAdd(Val1 As Long, Val2 As Long) As Long
    Dim lngHighWord As Long
    Dim lngLowWord As Long
    Dim lngOverflow As Long

    lngLowWord = (Val1 And &HFFFF&) + (Val2 And &HFFFF&)
    lngOverflow = lngLowWord \ 65536
    lngHighWord = (((Val1 And &HFFFF0000) \ 65536) + ((Val2 And &HFFFF0000) \ 65536) + lngOverflow) And &HFFFF&
    LongOverflowAdd = UnsignedToLong((lngHighWord * 65536#) + (lngLowWord And &HFFFF&))
End Function

'
' Function to add two unsigned numbers together as in C.
' Overflows are ignored!
'
Private Function LongOverflowAdd4(Val1 As Long, Val2 As Long, val3 As Long, val4 As Long) As Long
    Dim lngHighWord As Long
    Dim lngLowWord As Long
    Dim lngOverflow As Long

    lngLowWord = (Val1 And &HFFFF&) + (Val2 And &HFFFF&) + (val3 And &HFFFF&) + (val4 And &HFFFF&)
    lngOverflow = lngLowWord \ 65536
    lngHighWord = (((Val1 And &HFFFF0000) \ 65536) + _
                   ((Val2 And &HFFFF0000) \ 65536) + _
                   ((val3 And &HFFFF0000) \ 65536) + _
                   ((val4 And &HFFFF0000) \ 65536) + _
                   lngOverflow) And &HFFFF&
    LongOverflowAdd4 = UnsignedToLong((lngHighWord * 65536#) + (lngLowWord And &HFFFF&))
End Function

'
' Convert an unsigned double into a long
'
Private Function UnsignedToLong(value As Double) As Long
        If value < 0 Or value >= OFFSET_4 Then Error 6 ' Overflow
        If value <= MAXINT_4 Then
          UnsignedToLong = value
        Else
          UnsignedToLong = value - OFFSET_4
        End If
      End Function

'
' Convert a long to an unsigned Double
'
Private Function LongToUnsigned(value As Long) As Double
        If value < 0 Then
          LongToUnsigned = value + OFFSET_4
        Else
          LongToUnsigned = value
        End If
End Function

Attribute VB_Name = "PA2util"


'*******************************************************************************
' MODULE:       PA2util
' FILENAME:     PA2util.bas
' AUTHOR:       Itagaki Fumihiko
' CREATED:      18-Jun-2009
' COPYRIGHT:    Copyright 2009 Itagaki Fumihiko. All Rights Reserved.
'
' DESCRIPTION:
' Amazon "Pruduct Advertizing API (PA2)" |fffd||251||389||fffd||fffd||fffd||fffd||93d0||fffd||fffd||fffd|F|fffd||603||fffd||fffd|N|fffd|G|fffd|X|fffd|g|fffd||fffd||fffd||c42c||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||7c2||255|K|fffd|v|fffd||203||fffd||fffd|[|fffd|e|fffd|B|fffd||fffd||fffd|e|fffd|B|fffd||590||fffd||fffd||fffd||fffd|T|fffd|u|fffd||fffd||fffd|[|fffd|`|fffd||fffd||fffd|Q
'
' REQUIRES:
' CSHA256|fffd|N|fffd||fffd||fffd|X|fffd||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd| Itagaki Fumihiko |fffd||fffd||fffd||fffd||fffd||fffd| (17-Jun-2009) |fffd||fffd||fffd|K|fffd|v
'
' Web Site:  http://itagaki.asablo.jp/
' E-mail:    qu5f-itgk@asahi-net.or.jp
'
' MODIFICATION HISTORY:
' 18-Jun-2009   Itagaki Fumihiko    |fffd||c42c|
'*******************************************************************************

Option Explicit

Public Const strBase64chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
 



'*******************************************************************************
' hex2base64 (FUNCTION)
'
' hex|fffd||fffd||fffd||fffd||fffd||fffd||155|\|fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd|base64|fffd|G|fffd||fffd||fffd|R|fffd|[|fffd|h|fffd||fffd||fffd||115||502||fffd|
'*******************************************************************************
Public Function hex2base64(ByVal sHex As String) As String
    Dim sCode As String
    Dim iNumNibbles As Long
    Dim iNibbleCount As Long
    Dim iCodeFrac As Integer
    Dim iBuf As Integer

    iNumNibbles = Len(sHex)
    sCode = ""
    For iNibbleCount = 1 To iNumNibbles
        Dim iNibble As Byte
        iNibble = Val("&H" & Mid(sHex, iNibbleCount, 1))
        Select Case iNibbleCount Mod 3
            Case 1
                iBuf = iNibble * 4
            Case 2
                sCode = sCode & Mid(strBase64chars, 1 + iBuf + iNibble \ 4, 1)
                iBuf = (iNibble Mod 4) * 16
            Case 0
                sCode = sCode & Mid(strBase64chars, 1 + iBuf + iNibble, 1)
        End Select
    Next iNibbleCount

    If iNibbleCount Mod 3 <> 1 Then sCode = sCode & Mid(strBase64chars, 1 + iBuf, 1)
    
    iCodeFrac = Len(sCode) Mod 4
    If iCodeFrac > 0 Then sCode = sCode & Left("===", 4 - iCodeFrac)
    
    hex2base64 = sCode
End Function



'*******************************************************************************
' HMAC_SHA256_BASE64 (FUNCTION)
'*******************************************************************************
Public Function HMAC_SHA256_BASE64(ByVal sData As String, ByVal sKey As String) As String

    Dim iKey(63) As Integer
    Dim iKeyLen As Integer
    Dim sK_ipad_hex As String
    Dim sK_opad_hex As String
    Dim sStep1_hex As String
    Dim sStep2_hex As String
    Dim i As Integer
    
    Dim oSHA256 As CSHA256
    Set oSHA256 = New CSHA256
    
    iKeyLen = Len(sKey)
    If iKeyLen > 64 Then
        Dim sKeyAlt_hex As String
        sKeyAlt_hex = oSHA256.SHA256(StringHex(sKey))
        iKeyLen = Len(sKeyAlt_hex) \ 2
        For i = 0 To iKeyLen - 1
            iKey(i) = Val("&H" & Mid(sKeyAlt_hex, 1 + i, 2))
        Next i
    Else
        For i = 0 To iKeyLen - 1
            iKey(i) = Asc(Mid(sKey, 1 + i, 1))
        Next i
    End If
    
    sK_ipad_hex = ""
    sK_opad_hex = ""
    i = 0
    While i < iKeyLen
        sK_ipad_hex = sK_ipad_hex & Right("00" & Hex(iKey(i) Xor &H36), 2)
        sK_opad_hex = sK_opad_hex & Right("00" & Hex(iKey(i) Xor &H5C), 2)
        i = i + 1
    Wend
    While i < 64
        sK_ipad_hex = sK_ipad_hex & "36"
        sK_opad_hex = sK_opad_hex & "5C"
        i = i + 1
    Wend
    
    sStep1_hex = oSHA256.SHA256(sK_ipad_hex & StringHex(sData))
    sStep2_hex = oSHA256.SHA256(sK_opad_hex & sStep1_hex)
    
    HMAC_SHA256_BASE64 = hex2base64(sStep2_hex)
    
    Set oSHA256 = Nothing
End Function









Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Dim ExcelAppEventClass As clsExcelAppEvents 'Required for Excel application-level events.


Private Sub Workbook_Activate()

    bThisWorkbookIsListingLoader = IsListingLoader(ThisWorkbook)

    SetUpNewToolBar 'to make sure the OnAction properties for toolbar controls are pointed to this workbook.
                        '(they point to whatever workbook the code to create the toolbar ran from)
    If ThisWorkbookShowsTheCreateInternationalTemplatesToolbar And Not ToolbarToCreateInternationalTemplatesExists Then
        AddToolbarToCreateInternationalTemplates
    End If
    
    Call DropdownsOnWorkbookActivate

    If GetTemplateWorksheet() Is ActiveSheet Then
        Call ActivateExcel2007AddInsTabTimer
    End If
    
    Call ResetProdIdAndPriceColsNumberFormattingToText
    
End Sub


Private Sub Workbook_Deactivate()
   
    DeleteAmazonListingToolbar 'To avoid problem where clicking a toolbar button in a localized
                  'template opens up the main (non-localized) template and runs the code from there,
                  'need to remove and recreate the Amazon toolbar on workbook deactivate/activate.
    
    If ThisWorkbookShowsTheCreateInternationalTemplatesToolbar And ToolbarToCreateInternationalTemplatesExists Then
        DeleteToolbarToCreateInternationalTemplates
    End If
    
    DropdownsOnWorkbookDeactivate
    
End Sub


Public Sub Workbook_BeforeClose(Cancel As Boolean)
    
    Call DropdownsOnWorkbookClose

    Dim bRet As Boolean
    On Error Resume Next
    DeleteToolbarToCreateInternationalTemplates
    bRet = OtherOpenWorkbookNeedsAmazonFeedManagerToolbar
    If Not bRet Then Call amazonGlobals.DeleteAmazonListingToolbar
    Call DockDropdown

End Sub


Public Sub Workbook_Open()
    bThisWorkbookIsListingLoader = IsListingLoader(ThisWorkbook)

    'move this list to the dropdowns web data table for next release...
    Call CreateSearchIndices
       

    Call InitExcelApplicationEvents 'Required for Excel application-level events.
    
    Call DropdownsOnWorkbookOpen

        If Not ToolbarAmazonFeedManagerExists Or Not ToolbarToCreateInternationalTemplatesExists Then
    
            DeleteToolbarToCreateInternationalTemplates
            
            Call amazonGlobals.SetUpNewToolBar
            
            AddToolbarToCreateInternationalTemplates
    
        End If
        
    ' added 08/11/10 by atambe
    If GetLocalLanguageName = INT_TABLE_CHINESE_HEADER Then
        amazonGlobals.bChinaTemplate = True
    Else
        amazonGlobals.bChinaTemplate = False
    End If
    
    amazonGlobals.inLookupProcedure = False
    amazonGlobals.firstTimeToggleForBroadbandWarning = True
    amazonGlobals.activeModeLookup = False
    
    amazonGlobals.g_DefProdCondition = "New"
'    amazonGlobals.g_DefProdTaxCode = "A_GEN_NOTAX"
    amazonGlobals.g_DefProdTaxCode = GetDefaultProductTaxCode
    amazonGlobals.g_DefUpdateDelete = "Update"
    amazonGlobals.g_DefProductType = "Electronics"
    amazonGlobals.g_AutoFillSKU = False
    
    'get template worksheet:
    Set shTemplate = GetTemplateWorksheet
    
'    AmazonMerchantLookup.WebBrowser1.Navigate "http://programs.chicagoparkdistrict.com/programBrowser/images/spinner.gif"
    modTemplateSheet.lastcolorIndex = 5
    
    Application.MoveAfterReturnDirection = xlDown
    Dim shInst As Worksheet
    Set shInst = GetInstructionsWorksheet
    If Not shInst Is Nothing Then
        shInst.Activate
    End If
    
    Call CheckForAutoUpdate
    
    Application.EnableEvents = True
    
End Sub


'required for Excel application-level events:
Sub InitExcelApplicationEvents()
    Set ExcelAppEventClass = New clsExcelAppEvents
    Set ExcelAppEventClass.ExcelApp = Application
End Sub


Private Sub Workbook_SheetActivate(ByVal sh As Object)
    Set shTemplate = GetTemplateWorksheet()
End Sub
Attribute VB_Name = "aaaCopySheets"


Sub ImportModifiedDdefSheets()

Dim strDefaultPath As String

'=============================================================
strDefaultPath = "C:\_GJL\Release 1.9\Work\__Ddefs\"
'=============================================================

Dim strModifiedDdefsWorkbookFullPath As String
Dim wbModifiedDdefs As Workbook
Dim shModDdef As Worksheet
Dim shOldDdef As Worksheet
Dim shCopiedDdef As Worksheet
Dim strDdefSheetname As String
Dim iVisible As Long
Dim bFound As Boolean
Dim iRet As Long

Application.DisplayAlerts = False
Application.EnableEvents = False
ChDir strDefaultPath
strModifiedDdefsWorkbookFullPath = Application.GetOpenFilename(, , GetTranslatedString("browse_to_workbook_1") & ThisWorkbook.Name & GetTranslatedString("browse_to_workbook_2"))
Set wbModifiedDdefs = Workbooks.Open(strModifiedDdefsWorkbookFullPath)

iRet = AmazonMsgBox(GetTranslatedString("import_from_1") & wbModifiedDdefs.Name & GetTranslatedString("import_from_2") & ThisWorkbook.Name & GetTranslatedString("import_from_3"), vbYesNo, GetTranslatedString("check_import"))
If iRet = vbNo Then Exit Sub

For Each shModDdef In wbModifiedDdefs.Worksheets
    bFound = False 'init for each modified sheet.
    strDdefSheetname = shModDdef.Name
    For Each shOldDdef In ThisWorkbook.Worksheets
        If shOldDdef.Name = strDdefSheetname Then
            iVisible = shOldDdef.Visible
            shOldDdef.Visible = xlSheetVisible
            shModDdef.Copy Before:=shOldDdef
            Set shCopiedDdef = ThisWorkbook.Worksheets(shOldDdef.index - 1)
            shOldDdef.Delete
            shCopiedDdef.Name = strDdefSheetname
            shCopiedDdef.Visible = iVisible
            Debug.Print "Replaced " & strDdefSheetname
            bFound = True
            Exit For
        End If
    Next shOldDdef
    If Not bFound Then
        Debug.Print
        Debug.Print "Not Found:"
        Debug.Print strDdefSheetname
        Debug.Print
    End If
Next shModDdef

wbModifiedDdefs.Close SaveChanges:=False

Application.DisplayAlerts = True
Application.EnableEvents = True

Debug.Print "Done."

End Sub



Sub SendDdefSheetsToNewWorkbook()

Dim wbNew As Workbook
Dim shSheet As Worksheet
Dim iCounter As Long
Dim strSheetFind As String
Dim bFound As Boolean

Application.EnableEvents = False
Application.DisplayAlerts = False

Set wbNew = Workbooks.Add

For Each shSheet In ThisWorkbook.Worksheets
    If UCase(Left(shSheet.Name, 4)) = "DDEF" Then
            shSheet.Copy Before:=wbNew.Sheets(1)
    End If
Next shSheet

'delete default sheets:
iCounter = 1
Do
    strSheetFind = "Sheet" & iCounter
    bFound = False
    For Each shSheet In wbNew.Worksheets
        shSheet.Visible = True
        If shSheet.Name = strSheetFind Then
            shSheet.Delete
            iCounter = iCounter + 1
            bFound = True
            Exit For
        End If
    Next shSheet
    If Not bFound Then Exit Do
Loop

Application.EnableEvents = True
Application.DisplayAlerts = True

Debug.Print "Done", ThisWorkbook.Name, Time

End Sub



Attribute VB_Name = "aaaModRegexTest"


Option Explicit






Sub Test_Regex()

Dim strText As String
Dim strPattern As String
Dim bRet As Boolean


strText = ""

strPattern = "^(|.{10})$"



'strPattern = RegexPatternEnforceExactMatch(strPattern)
bRet = RegexTest(strPattern, strText)

Debug.Print bRet

End Sub
Attribute VB_Name = "aaaSwapValidationErrorText"
Option Explicit
Option Base 1



Private Sub ExportValidationCellCommentListToBeTranslated()

'Press F5 here to run.

'exports list of validation cell comments in column B, with
'english versions where applicable in column a,
'that apply to a given category and given locale.

'calls into main validation function.

Dim wbValidation As Workbook
Dim shValidation As Worksheet
Dim bFound As Long

'===================================================================================
'data validation table worksheet:
bFound = False
For Each wbValidation In Application.Workbooks
    If wbValidation.Name = "IntDataValidation.xls" Then
        bFound = True
        Exit For
    End If
Next wbValidation
If Not bFound Then
    Dim strOpenPath As String
    strOpenPath = Application.GetOpenFilename(, , GetTranslatedString("browse_to_data_validation"))
    Set wbValidation = Workbooks.Open(strOpenPath)
End If
Set shValidation = wbValidation.Worksheets("DataValidation")
'===================================================================================

Dim vRows As Variant
Dim rgValidateColumnCol As Range
Dim rgValidateItemLanguageCol As Range
Dim iUboundArrayRows As Long
Dim iArrayIndex As Long
Dim iArrayRow As Long
Dim bRet As Boolean
Dim strLanguage As String
Dim strValidateItem As String
Dim strErrorTextEnglish As String
Dim strErrorTextLocal As String
Dim rgFind As Range
Dim iFirstItemRow As Long
Dim iLastItemRow As Long

Dim ArrayEnglish() As Long
Dim iArrayEnglishIndex As Long
Dim iArrayEnglishRow As Long
Dim iUboundEnglish As Long
Dim iLboundEnglish As Long


Const TEMPLATE_DEPENDENCY_TEST_COL As Long = 1
Const REQUIRED_COLUMN_COL As Long = 2
Const REQUIRED_COLUMN_TEST_COL As Long = 3
Const VALIDATE_COLUMN_COL As Long = 4
Const VALIDATE_COLUMN_TEST_COL As Long = 5
Const VALIDATE_COLUMN_LANGUAGE_COL As Long = 6
Const VALIDATE_COLUMN_ERROR_TEXT_COL As Long = 7
Const ARRAY_ROWS_DIMENSION As Long = 2
Const ARRAY_LOCAL_COL As Long = 1
Const ARRAY_ENGLISH_COL As Long = 2

Const TEMPLATE_COL As Long = 1
Const REQ_COL As Long = 2
Const REQTEST_COL As Long = 3
Const VALTEST_COL As Long = 5
Const LANGUAGE_COL As Long = 6
Const ERRORTEXT_COL As Long = 7
Const ENGLISH_USA As String = "English USA"

Set rgValidateColumnCol = shValidation.Columns(VALIDATE_COLUMN_COL)


bRet = ValidateTemplate(, vRows)  'ByRef.
iUboundArrayRows = UBound(vRows, ARRAY_ROWS_DIMENSION)
If iUboundArrayRows = 0 Then
    AmazonMsgBox GetTranslatedString("cannot_proceed_1") & _
            vbNewLine & vbNewLine & _
            GetTranslatedString("cannot_proceed_2"), _
            vbOKOnly, GetTranslatedString("cannot_create_list")
    Exit Sub
End If

strLanguage = GetLocalLanguageName() 'Done run this proc from the master.
                                     'Even changing strLanguage won't work.
                                     'Need to run from localized version.

For iArrayIndex = 1 To iUboundArrayRows
    'loop through each row in the validation table that was processed for this template:
    iArrayRow = vRows(ARRAY_LOCAL_COL, iArrayIndex)
    strErrorTextLocal = shValidation.Cells(iArrayRow, VALIDATE_COLUMN_ERROR_TEXT_COL)
    'find top and bottom rows of that validation column item:
    strValidateItem = shValidation.Cells(iArrayRow, VALIDATE_COLUMN_COL)
    Set rgFind = rgValidateColumnCol.Find(What:=strValidateItem, LookAt:=xlWhole)
    iFirstItemRow = rgFind.Row
    Set rgFind = rgValidateColumnCol.Find( _
                  What:=strValidateItem, LookAt:=xlWhole, SearchDirection:=xlPrevious)
    iLastItemRow = rgFind.Row
    
    'need to find the English USA row that matches source row in columns A, B, C, & E:
    'Make a simple array of row numbers that are possibilities. Delete each row number
    'from the array as it is ruled out. Only one should remain.

    iLboundEnglish = 1
    iUboundEnglish = (iLastItemRow - iFirstItemRow) + 1
    ReDim ArrayEnglish(iLboundEnglish To iUboundEnglish)
    'initialize the array with row numbers:
    iArrayEnglishRow = iFirstItemRow
    For iArrayEnglishIndex = iLboundEnglish To iUboundEnglish
        ArrayEnglish(iArrayEnglishIndex) = iArrayEnglishRow
        iArrayEnglishRow = iArrayEnglishRow + 1
    Next iArrayEnglishIndex
    'find the correct english row:
    bFound = False 'init.
    For iArrayEnglishIndex = iLboundEnglish To iUboundEnglish
        iArrayEnglishRow = ArrayEnglish(iArrayEnglishIndex)
        If shValidation.Cells(iArrayEnglishRow, LANGUAGE_COL).value <> ENGLISH_USA Then GoTo GoToSkipToNextInLoop
        If shValidation.Cells(iArrayEnglishRow, TEMPLATE_COL).value <> shValidation.Cells(iArrayRow, TEMPLATE_COL).value Then GoTo GoToSkipToNextInLoop
        If shValidation.Cells(iArrayEnglishRow, REQ_COL).value <> shValidation.Cells(iArrayRow, REQ_COL).value Then GoTo GoToSkipToNextInLoop
        If shValidation.Cells(iArrayEnglishRow, REQTEST_COL).value <> shValidation.Cells(iArrayRow, REQTEST_COL).value Then GoTo GoToSkipToNextInLoop
        If shValidation.Cells(iArrayEnglishRow, VALTEST_COL).value <> shValidation.Cells(iArrayRow, VALTEST_COL).value Then GoTo GoToSkipToNextInLoop
        bFound = True 'all tests passed, so this is the row.
        Exit For
GoToSkipToNextInLoop:
    Next iArrayEnglishIndex
    
    'add the english row number's text to the array:
    If bFound Then
        vRows(ARRAY_ENGLISH_COL, iArrayIndex) = shValidation.Cells(iArrayEnglishRow, ERRORTEXT_COL).value
    Else
        vRows(ARRAY_ENGLISH_COL, iArrayIndex) = GetTranslatedString("english_version_not_found_1") & _
                                                 iFirstItemRow & GetTranslatedString("english_version_not_found_2") & iLastItemRow & GetTranslatedString("english_version_not_found_3")
    End If
    
    'substitute in the local text for the local row number:
    vRows(ARRAY_LOCAL_COL, iArrayIndex) = shValidation.Cells(iArrayRow, ERRORTEXT_COL).value

Next iArrayIndex

'make new workbook with list to be translated:
Dim wbNew As Workbook
Dim shNew As Worksheet
Dim shTmp As Worksheet
Dim rgNew As Range
Dim rgTmp As Range
Set wbNew = Workbooks.Add
Set shNew = wbNew.Worksheets(1)
Set rgNew = shNew.Range("A1", shNew.Cells(iUboundArrayRows, 2))
Set shTmp = wbNew.Worksheets(2)
Set rgTmp = shTmp.Range("A1", shTmp.Cells(2, iUboundArrayRows))
shNew.Columns("A:B").WrapText = True
rgTmp = vRows
rgTmp.Copy
rgNew.PasteSpecial Transpose:=True, Paste:=xlPasteValues
Application.CutCopyMode = False
rgTmp.ClearContents
shNew.Range("A1").value = strLanguage
shNew.Range("B1").value = ENGLISH_USA
shNew.Range("C1").value = "Check"
shNew.Range("A1:C1").Font.Bold = True
shNew.Range("C2").Formula = "=IF(A2=B2,""Same as English USA"",""OK"")"
shNew.Range("C2").AutoFill Destination:=shNew.Range("C2", shNew.Cells(iUboundArrayRows, 3))
shNew.Columns("C").EntireColumn.AutoFit
    shNew.Columns("A:B").ColumnWidth = 75
    shNew.Columns("A:C").Select
    ActiveWindow.Zoom = True
shNew.Range("A1").Select
wbNew.Activate
End Sub









Private Sub SwapInValidationCellCommentText()

'swap in validation cell comment translations.

Dim shMain As Worksheet
Dim shNew As Worksheet


'Settings:
'===================================================================================
'local language name:
Stop
Const LOCAL_LANGUAGE_NAME As String = "German"  'MUST UPDATE EACH RUN FOR NOW..................

'data validation table worksheet:
Stop
Set shMain = Workbooks("IntDataValidation.xls").Worksheets("DataValidation")  'MUST BE OPENED BEFORE RUN FOR NOW..................

'worksheet with new strings to swap in:
Stop
'MUST UPDATE EACH RUN FOR NOW..................
Set shNew = Workbooks("Kopie von Copy of DE Listingloader Data Validation Error Text 2008-06-12_translation_jsl.xls").Worksheets("Sheet1")

'Note:
'For the category templates, the debug.prints should be changed to write
'to a new worksheet in a new workbook. Otherwise too long for Immediate pane.

'===================================================================================


Dim rgMain As Range
Dim rgMainTextCol As Range
Dim rgMainValidationItemCol As Range
Dim rgMainValidationItemLanguageCol As Range
Dim rgEngNew As Range
Dim rgLocalNew As Range
Dim strEngNew As String
Dim strLocalNew As String
Dim strMain As String
Dim strMainValidationItem As String
Dim strMainEnglishMatchAddress As String

Dim iMainTextCol As Long
Dim iMainLangCol As Long
Dim iNewEngCol As Long
Dim iNewLocalCol As Long

Dim iMainStartRow As Long
Dim iMainLastRow As Long
Dim iMainRow As Long
Dim iMainValidateColumnCol As Long
Dim iNewStartRow As Long
Dim iNewLastRow As Long
Dim iNewRow As Long
Dim iMainFirstItemRow As Long
Dim iMainLastItemRow As Long
Dim iMainFirstLangRow As Long
Dim iFoundLangRow As Long

Dim rgFind As Range
Dim iFoundRow As Long
Dim rgFindAfterCell As Range
Dim bDone As Boolean
Dim bComparisonSucceeded As Boolean

Dim iTemplateDependencyTestCol As Long
Dim iRequiredColumnCol As Long
Dim iRequiredColumnTestCol As Long
Dim iValidateColumnTestCol As Long
Dim strEnglishTemplateDependencyTest As String
Dim strEnglishRequiredColumn As String
Dim strEnglishRequiredColumnTest As String
Dim strEnglishValidateColumntest As String
Dim strLangTemplateDependencyTest As String
Dim strLangRequiredColumn As String
Dim strLangRequiredColumnTest As String
Dim strLangValidateColumntest As String


iMainTextCol = 7
iMainLangCol = 6
iMainValidateColumnCol = 4
iNewEngCol = 2
iNewLocalCol = 1

iMainStartRow = 2
Stop
iMainLastRow = 5879 'MUST UPDATE EACH RUN FOR NOW..................
iNewStartRow = 2
Stop
iNewLastRow = 53 'MUST UPDATE EACH RUN FOR NOW..................

iTemplateDependencyTestCol = 1
iRequiredColumnCol = 2
iRequiredColumnTestCol = 3
iValidateColumnTestCol = 5



Set rgMainTextCol = shMain.Range(shMain.Cells(iMainStartRow, iMainTextCol), shMain.Cells(iMainLastRow, iMainTextCol))
Set rgMainValidationItemCol = shMain.Range(shMain.Cells(iMainStartRow, iMainValidateColumnCol), shMain.Cells(iMainLastRow, iMainValidateColumnCol))

'steps
    'loop through all english strings in new sheet:
    For iNewRow = iNewStartRow To iNewLastRow
        Stop 'STEP THROUGH EACH ONE, MONITORING IMMEDIATE PANE...
        Set rgEngNew = shNew.Cells(iNewRow, iNewEngCol)
        strEngNew = rgEngNew.value
        Debug.Print "NEW ITEM TO SEARCH FOR AND REPLACE: " & rgEngNew.Address
        Debug.Print strEngNew
        Debug.Print
        Set rgLocalNew = shNew.Cells(iNewRow, iNewLocalCol)
        strLocalNew = rgLocalNew.value
        'for each eng string in new sheet, find match in main sheet (only look for one match):
        Set rgFind = rgMainTextCol.Find(What:=strEngNew, LookAt:=xlWhole)
            'debug.print if not found:
            If rgFind Is Nothing Then
                Debug.Print "ENGLISH STRING NOT FOUND: Row " & iNewRow & ":"
                Debug.Print strEngNew
                Debug.Print
                Stop 'copy the debug.print data to notepad etc. here.
                GoTo EndOfNewRow
            End If
        'when match found, find validation item and other comparison strings:
        iFoundRow = rgFind.Row
        strMainEnglishMatchAddress = rgFind.Address
        strMainValidationItem = shMain.Cells(iFoundRow, iMainValidateColumnCol)
        strEnglishTemplateDependencyTest = shMain.Cells(iFoundRow, iTemplateDependencyTestCol)
        strEnglishRequiredColumn = shMain.Cells(iFoundRow, iRequiredColumnCol)
        strEnglishRequiredColumnTest = shMain.Cells(iFoundRow, iRequiredColumnTestCol)
        strEnglishValidateColumntest = shMain.Cells(iFoundRow, iValidateColumnTestCol)
        'find top and bottom rows of that validation column item:
        Set rgFind = rgMainValidationItemCol.Find(What:=strMainValidationItem, LookAt:=xlWhole)
        iMainFirstItemRow = rgFind.Row
        Set rgFind = rgMainValidationItemCol.Find( _
                      What:=strMainValidationItem, LookAt:=xlWhole, SearchDirection:=xlPrevious)
        iMainLastItemRow = rgFind.Row
        'make range in language column using those top and bottom rows.
        Set rgMainValidationItemLanguageCol = shMain.Range(shMain.Cells(iMainFirstItemRow, iMainLangCol), shMain.Cells(iMainLastItemRow, iMainLangCol))
        'find target language in that range.
        bDone = False 'init.
        iMainFirstLangRow = -1 'init.
        Set rgFindAfterCell = rgMainValidationItemLanguageCol.Cells(rgMainValidationItemLanguageCol.Cells.Count) 'start search after the last cell in the range.
        Do
            Set rgFind = rgMainValidationItemLanguageCol.Find( _
                          What:=LOCAL_LANGUAGE_NAME, After:=rgFindAfterCell, LookAt:=xlWhole)
            iFoundLangRow = rgFind.Row
            If iFoundLangRow < iMainFirstLangRow Then
                If iMainFirstLangRow = -1 Then
                    Debug.Print "TARGET LANGUAGE NOT FOUND: " & LOCAL_LANGUAGE_NAME & " in " & rgMainValidationItemLanguageCol.Address
                    Debug.Print
                End If
                Exit Do
            Else
                iMainFirstLangRow = iFoundLangRow
                Set rgFindAfterCell = rgFind
            End If
            Set rgMain = shMain.Cells(iFoundLangRow, iMainTextCol)
            strMain = rgMain.value
            'get comparison strings:
            strLangTemplateDependencyTest = shMain.Cells(iFoundLangRow, iTemplateDependencyTestCol)
            strLangRequiredColumn = shMain.Cells(iFoundLangRow, iRequiredColumnCol)
            strLangRequiredColumnTest = shMain.Cells(iFoundLangRow, iRequiredColumnTestCol)
            strLangValidateColumntest = shMain.Cells(iFoundLangRow, iValidateColumnTestCol)
            'compare, and skip if any comparisons fail:
            bComparisonSucceeded = True 'init.
            If strLangTemplateDependencyTest <> strEnglishTemplateDependencyTest Then
                bComparisonSucceeded = False
                Debug.Print strMainEnglishMatchAddress & " failed TDT comparison to " & rgMain.Address
                Debug.Print
                GoTo EndOfComparison
            End If
            If strLangRequiredColumn <> strEnglishRequiredColumn Then
                bComparisonSucceeded = False
                Debug.Print strMainEnglishMatchAddress & " failed RC comparison to " & rgMain.Address
                Debug.Print
                GoTo EndOfComparison
            End If
            If strLangRequiredColumnTest <> strEnglishRequiredColumnTest Then
                bComparisonSucceeded = False
                Debug.Print strMainEnglishMatchAddress & " failed RCT comparison to " & rgMain.Address
                Debug.Print
                GoTo EndOfComparison
            End If
            If strLangValidateColumntest <> strEnglishValidateColumntest Then
                bComparisonSucceeded = False
                Debug.Print strMainEnglishMatchAddress & " failed VC comparison to " & rgMain.Address
                Debug.Print
                GoTo EndOfComparison
            End If
EndOfComparison:
            'if comparison succeeded, replace string.
            If bComparisonSucceeded Then
                rgMain.value = strLocalNew
                    Debug.Print "New " & rgLocalNew.Address & " -> Main " & rgMain.Address
                    Debug.Print strMain
                    Debug.Print strLocalNew
                    Debug.Print
                    Exit Do
            End If
        Loop
EndOfNewRow:
    Next iNewRow
    

Debug.Print "Done."

End Sub





Attribute VB_Name = "aaaToolbarIconFixInProgress"










Sub Usage_Example_For_GetUsersCopiedRange()

    'currently works for copying, but not yet for cutting...........................
        'Application.CutCopyMode = xlCut
        'Application.CutCopyMode = xlCopy
        'if xlCut, it will have to be pasted back.

    'before running this, select any range in
    'in any workbook and copy.

    Dim rgSourceRange As Range
  
    Set rgSourceRange = GetUsersCopiedRange()
    
    If Not rgSourceRange Is Nothing Then
    
        'do CopyPicture/Pasteface here, or
        'whatever takes Excel out of CutCopyMode:
        Application.CutCopyMode = False
        
        rgSourceRange.Copy
        
    End If
    
End Sub




Function GetUsersCopiedRange() As Range

'If Excel is in CutCopyMode and what was copied was a cell or range,
'returns the range object that was copied.

'returns Nothing if:
    'Application.CutCopyMode = False, or
    'Something other than a Range was copied.
    
    On Error GoTo generr

    If Application.CutCopyMode Then
        Dim bEnableEventsStatus As Boolean
        Dim bScreenUpdatingStatus As Boolean
        Dim bDisplayAlertsStatus As Boolean
        Dim wbPasteWorkbook As Workbook
        Dim shPasteSheet As Worksheet
        Dim rgPasteRange As Range

        bEnableEventsStatus = Application.EnableEvents
        bScreenUpdatingStatus = Application.ScreenUpdating
        bDisplayAlertsStatus = Application.DisplayAlerts
        Application.EnableEvents = False
        Application.ScreenUpdating = False
        Application.DisplayAlerts = False
        
        Stop 'problem with new workbook???
        Set wbPasteWorkbook = Workbooks.Add
        Set shPasteSheet = wbPasteWorkbook.ActiveSheet
        Set shPasteSheet = ActiveWorkbook.ActiveSheet '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        
        shPasteSheet.Paste Link:=True
        Set rgPasteRange = Selection
        
        If TypeName(Selection) = "Range" Then
            Dim strFormula As String
            Dim iPasteRowCount As Long
            Dim iPasteColCount As Long
            Dim wbSourceWorkbook As Workbook
            Dim shSourceWorksheet As Worksheet
            Dim rgSourceTopLeftCell As Range
            Dim rgSourceRange As Range
            Dim nmDefinedName As Name
            
            Const TEMP_NAME_FOR_PASTEFACE As String = "my_name"
            
            iSelRowCount = rgPasteRange.Rows.Count
            iSelColCount = rgPasteRange.Columns.Count
            
            strFormula = rgPasteRange.Cells(1).Formula
            strFormula = Application.ConvertFormula(strFormula, xlA1, xlA1, xlAbsolute)
            
            'delete TEMP_NAME_FOR_PASTEFACE it exists:
            On Error GoTo ErrDeleteName
            shPasteSheet.Names(TEMP_NAME_FOR_PASTEFACE).Delete
            On Error GoTo generr
            
            Set nmDefinedName = shPasteSheet.Names.Add(Name:=TEMP_NAME_FOR_PASTEFACE, RefersTo:=strFormula)
            Set rgSourceTopLeftCell = nmDefinedName.RefersToRange.Cells(1)
            Set rgSourceRange = rgSourceTopLeftCell.Resize(iSelRowCount, iSelColCount)
            
'            shPasteSheet.Delete 'DON'T DELETE SHEETS. PASS IN A SCRATCH SHEET.
'            nmDefinedName.Delete
            
             Set GetUsersCopiedRange = rgSourceRange
            
        Else
            Set GetUsersCopiedRange = Nothing
        End If
    
    Else
        Set GetUsersCopiedRange = Nothing
    End If

    bEnableEventsStatus = Application.EnableEvents
    bScreenUpdatingStatus = Application.ScreenUpdating
    bDisplayAlertsStatus = Application.DisplayAlerts
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False

Exit Function

ErrDeleteName:
Resume Next

generr:

    If False Then
        Resume
    End If

    bEnableEventsStatus = Application.EnableEvents
    bScreenUpdatingStatus = Application.ScreenUpdating
    bDisplayAlertsStatus = Application.DisplayAlerts
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
End Function

Attribute VB_Name = "amazonGlobals"
' Modified for MWS integration
' Abhijit Tambe, July 2010

Public inLookupProcedure As Boolean
Public activeModeLookup As Boolean
Public firstTimeToggleForBroadbandWarning As Boolean
Public errorThrown As errorType
'Public HttpReq As MSXML2.XMLHTTP30
Public g_DefProdTaxCode As String
Public g_DefProdCondition As String
Public g_DefProductType As String
Public g_AutoFillSKU As Boolean
Public g_DefUpdateDelete As String
Public g_ImageSize As String
Public NoImageURL As String
Public NoImageSize As Integer
Public shTemplate As Worksheet
Public cbbToggleProductLookup As Office.CommandBarButton
Public bAmazonIconPasted As Boolean
Public bThisWorkbookIsListingLoader As Boolean
Public bCancelBulkLookup As Boolean
Public bChinaTemplate As Boolean  ' added 08/11/10 by atambe

Public searchIndices() As Variant

Public Const URL_HEADER_MWS As String = "MWS URL"   ' added 08/03/10 by atambe
Public Const URL_HEADER_MWS_PRODUCT_INFO As String = "MWS URL - ProductInformation"   ' added 10/16/10 by atambe
Public Const URL_HEADER_STATUS_CHECK As String = "Status Check URL"
Public Const URL_HEADER_CREDENTIALS As String = "Credentials URL"   ' added 08/05/10 by atambe
Public Const URL_HEADER_CREDENTIALS_SUMMARY As String = "Credentials Summary URL"   ' added 08/05/10 by atambe
Public Const URL_HEADER_CREDENTIALS_PROCESSOR As String = "Credentials Processor URL"   ' added 08/05/10 by atambe
Public Const URL_HEADER_SECTION_END_TEXT As String = "ENDSECTION"

Type OFFER_FEED_RECORD
    SKU                      As String
    Price                    As String
    Quantity                 As String
    ProductID                As String
    ProductIDType            As String
    ConditionType            As String 'changed from Condition to ConditionType 1/18/08
    ConditionNote            As String
    ASINHint                 As String 'changed from AmazonID to ASINHint 1/18/08
    title                    As String 'added Title back everywhere 2/7/08
    ProductTaxCode           As String
    OperationType            As String 'new 1/18/08
    SalesPrice               As String
    SaleStartDate            As String
    SaleEndDate              As String
    LeadtimeToShip           As String 'new 1/18/08
    LaunchDate               As String 'new 1/18/08
    IsGiftWrapAvailable      As String
    IsGiftMessageAvailable   As String
    DetailPageURL            As String
    'the following elements are not part of Enum SheetColumns in shTemplate:
    Description              As String
    ImageURL                 As String
    ImageWidth               As Integer 'still needed??? 1/18/08
    ImageHeight              As Integer 'still needed??? 1/18/08
    SearchIndex              As String
'    Manufacturer             As String 'removed 1/18/08
    UpdateDelete             As String
'    ShipOption               As String 'removed 1/18/08
'    ShippingAmount           As String 'removed 1/18/08
'    ShippingAmountType       As String 'removed 1/18/08
'    IsShippingRestricted     As String 'removed 1/18/08
End Type

Public Enum errorType
    noError = 0
    noInfoInAmazon = 1
    badIdentifier = 2
    multipleMatches = 3
    nullIdentifier = 4
End Enum

Public Enum imagePositionInXmlDOMNodeList
    smallImage = 2
    mediumImage
    largeImage
End Enum

' modified 07/29/10 by atambe
Public Sub SetUpNewToolBar()
    On Error GoTo generr

       'remove any existing...
       Call DeleteAmazonListingToolbar
       Dim cb As Object 'CommandBar
    
       Set cb = Application.CommandBars.Add(GetAmazonToolbarName, 1, , True) '1=msoBarTop '"Amazon Upload Manager"
'       cb.Visible = True 'commented out; toolbar must be hidden while icon is replaced
       
       
       'Add Amazon logo to toolbar:
       Dim cbc As Object 'CommandBarControl
       Set cbc = cb.Controls.Add(msoControlButton)
       cbc.BeginGroup = True
       cbc.Caption = GetAmazonToolbarLogoCaption '"Amazon Logo"
       cbc.FaceId = 176
       cbc.Style = msoButtonIcon
       cbc.TooltipText = GetAmazonToolbarLogoTooltip '" " to prevent the caption from showing up as the tooltip text.
       
       'Put custom Amazon logo on the Amazon logo toolbar control:
       'Toolbar must be hidden while icon is replaced:
       If Application.CutCopyMode Then
            'don't mess up user's cut/copy mode.
            bAmazonIconPasted = False
       Else
            cb.Visible = False
            shIcons.Shapes("icon_amazon_logo").CopyPicture
            cb.Controls(GetAmazonToolbarLogoCaption).PasteFace '"Amazon Logo"
            'Copy any cell to overwrite the custom icon in the clipboard,
            'so that the user does not inadvertently paste another copy of the icon somewhere:
            shIcons.Range("A1").Copy
            'Remove the cut/copy marquee around the cell copied in the previous line:
            Application.CutCopyMode = False
            bAmazonIconPasted = True
       End If
       
       cb.Visible = True
       

       ' Make it visible & add a button...
       Set cbc = cb.Controls.Add(1) '1=msoControlButton
       cbc.BeginGroup = True
       cbc.Caption = GetBulkLookupToolbarButtonCaption '"Bulk Lookup"
       cbc.FaceId = 176
       cbc.OnAction = "modtemplatesheet.TemplateSheetBatchLookupInformation"
       cbc.Style = msoButtonIconAndCaption
       cbc.TooltipText = GetBulkLookupToolbarButtonTooltip
       
       
       Set cbc = cb.Controls.Add(1) '1=msoControlButton
       cbc.BeginGroup = True
       cbc.Caption = GetTurnOnProductLookupToolbarButtonCaption '"Turn on Product Lookup"
       cbc.FaceId = 2174
       cbc.OnAction = "modtemplatesheet.TemplateSheetToggleActiveProductLookup"
       cbc.Style = msoButtonIconAndCaption
       Set cbbToggleProductLookup = cbc 'because its caption will be changed when toggled.
       cbc.TooltipText = GetTurnOnProductLookupToolbarButtonTooltip
       If Application.CutCopyMode = 0 Then
            Call SyncProductLookupToolbarButton
       End If

              
'       Set cbc = cb.Controls.Add(1) '1=msoControlButton
'       cbc.BeginGroup = True
'       cbc.Caption = "Add an Offer for this item"
'       cbc.FaceId = 2892
'       cbc.OnAction = "modmatchsheet.MatchCopyRow"
'       cbc.Style = msoButtonIconAndCaption
'       cbc.Visible = False
'       cbc.Enabled = False
       
       Set cbc = cb.Controls.Add(1) '1=msoControlButton
       cbc.BeginGroup = True
       cbc.Caption = GetPreferencesToolbarButtonCaption '"Preferences"
       cbc.FaceId = 548
       cbc.OnAction = "ShowPreferencesDlg"
       cbc.Style = msoButtonIconAndCaption
       cbc.TooltipText = GetPreferencesToolbarButtonTooltip

       ' added 08/11/10 by atambe
       If Not bChinaTemplate Then
           Set cbc = cb.Controls.Add(msoControlButton)
           cbc.BeginGroup = True
           cbc.Caption = GetValidateToolbarButtonCaption '"Validate"
           cbc.FaceId = 1745 '1745 'magnifying glass over paper    '25 'magnifying glass
           cbc.OnAction = "ValidateTemplate"
           cbc.Style = msoButtonIconAndCaption
           cbc.TooltipText = GetValidateToolbarButtonTooltip
       End If
       
       Set cbc = cb.Controls.Add(1) '1=msoControlButton
       cbc.BeginGroup = True
       cbc.Caption = GetUploadFileToolbarButtonCaption '"Upload File"
       cbc.FaceId = 270
       cbc.OnAction = "UploadFile"
       cbc.Style = msoButtonIconAndCaption
       cbc.TooltipText = GetUploadFileToolbarButtonTooltip
       
       ' added 07/29/10 by atambe
       Set cbc = cb.Controls.Add(1)
       cbc.BeginGroup = True
       cbc.Caption = GetCredentialsToolbarButtonCaption ' "Credentials"
       cbc.FaceId = 264
       cbc.OnAction = "ObtainCredentials"
       cbc.Style = msoButtonIconAndCaption
       cbc.TooltipText = GetCredentialsToolbarButtonTooltip
       
       Set cbc = cb.Controls.Add(1) '1=msoControlButton
       cbc.BeginGroup = True
       cbc.Caption = GetImportFileToolbarButtonCaption '"Import File"
       cbc.FaceId = 1790 '(funnel on diskette)
       cbc.OnAction = "ImportFile"
       cbc.Style = msoButtonIconAndCaption
       cbc.TooltipText = GetImportFileToolbarButtonTooltip
       

'       Set cbc = cb.Controls.Add(msoControlButton)
'       cbc.BeginGroup = True
'       cbc.Caption = GetUpdateTemplateToolbarButtonCaption '"Update Template"
'       cbc.FaceId = 499 'funnel with pencil)
'       cbc.OnAction = "GetLatestInternationalizedData"
'       cbc.Style = msoButtonIconAndCaption
'       cbc.TooltipText = GetUpdateTemplateToolbarButtonTooltip
       

'       Set cbc = cb.Controls.Add(1) '1=msoControlButton
'       cbc.BeginGroup = True
'       cbc.Caption = "Search"
'       cbc.FaceId = 1790 '(funnel on diskette)
'       cbc.OnAction = "SearchSingleAmznSearch"
'       cbc.Style = msoButtonIconAndCaption
'       cbc.Visible = False
'       cbc.Enabled = False

       
       If bThisWorkbookIsListingLoader Then
            'for Listingloader:
'            Application.CommandBars(GetAmazonToolbarName).Controls(GetUpdateTemplateToolbarButtonCaption).Visible = False
       Else
            'changes from OfferOnlyFeed to release 1.9:
            Application.CommandBars(GetAmazonToolbarName).Controls(GetBulkLookupToolbarButtonCaption).Visible = False
            Application.CommandBars(GetAmazonToolbarName).Controls(GetTurnOnProductLookupToolbarButtonCaption).Visible = False
            Application.CommandBars(GetAmazonToolbarName).Controls(GetPreferencesToolbarButtonCaption).Visible = False
       End If

Exit Sub
generr:

'replacing "On Error Resume Next", while allowing for debugging with a breakpoint on the next line:
Stop
If True Then
    Resume Next
End If

End Sub


Public Sub DeleteAmazonListingToolbar()

Dim cb As CommandBar

On Error Resume Next

For Each cb In Application.CommandBars
    If cb.Name = "Amazon Listing Loader" Then
        cb.Delete
    ElseIf cb.Name = GetAmazonToolbarName Then
        cb.Delete
    End If
Next cb

End Sub


' modified 07/26/10 by atambe
Public Sub toggleToolBar()
    Dim Btn As Office.CommandBarButton
    
    On Error GoTo generr
    
    If amazonGlobals.activeModeLookup = True Then
        amazonGlobals.activeModeLookup = False
        Application.MoveAfterReturnDirection = xlDown
        Application.CommandBars(GetAmazonToolbarName).Controls(GetBulkLookupToolbarButtonCaption).Enabled = True
'        Application.CommandBars(GetAmazonToolbarName).Controls.Item(3).Caption = GetTurnOnProductLookupToolbarButtonCaption
'        Set Btn = Application.CommandBars(GetAmazonToolbarName).Controls.Item(3)
'        Btn.State = msoButtonUp
'        cbbToggleProductLookup.Enabled = True
        cbbToggleProductLookup.Caption = GetTurnOnProductLookupToolbarButtonCaption
        cbbToggleProductLookup.State = msoButtonUp
        Application.CommandBars(GetAmazonToolbarName).Controls(GetTurnOffProductLookupToolbarButtonCaption).Caption = GetTurnOnProductLookupToolbarButtonCaption
        Application.CommandBars(GetAmazonToolbarName).Controls(GetTurnOnProductLookupToolbarButtonCaption).State = msoButtonUp

    Else
        ' added 07/26/10 by atambe
        If Not CheckSecurityPassword Then Exit Sub
        
        amazonGlobals.activeModeLookup = True
        Application.MoveAfterReturnDirection = xlToRight
        Application.CommandBars(GetAmazonToolbarName).Controls(GetBulkLookupToolbarButtonCaption).Enabled = False
'        Application.CommandBars(GetAmazonToolbarName).Controls.Item(3).Caption = GetTurnOffProductLookupToolbarButtonCaption
'        Set Btn = Application.CommandBars(GetAmazonToolbarName).Controls.Item(3)
'        Btn.State = msoButtonDown
'        cbbToggleProductLookup.Enabled = False
        cbbToggleProductLookup.Caption = GetTurnOffProductLookupToolbarButtonCaption
        cbbToggleProductLookup.State = msoButtonDown
        Application.CommandBars(GetAmazonToolbarName).Controls(GetTurnOnProductLookupToolbarButtonCaption).Caption = GetTurnOffProductLookupToolbarButtonCaption
        Application.CommandBars(GetAmazonToolbarName).Controls(GetTurnOffProductLookupToolbarButtonCaption).State = msoButtonDown
    End If

    Exit Sub

generr:
    If False Then
        Resume
    End If
    
    If cbbToggleProductLookup Is Nothing Then
        Resume Next
    End If
End Sub


Public Sub SyncProductLookupToolbarButton()
    If amazonGlobals.activeModeLookup Then
        amazonGlobals.activeModeLookup = False
    Else
        amazonGlobals.activeModeLookup = True
    End If
    
    toggleToolBar
End Sub


Public Function calculateIdType(Code As String) As String
    Dim checkDigit As Integer
    Select Case Len(Code)
    Case 10:
        checkDigit = doISBNCheckDigit(Code)
        If (checkDigit = Val(Right$(Code, 1))) Then
            calculateIdType = "ISBN"
            Exit Function
        Else
            Dim items() As OFFER_FEED_RECORD
            Dim nItems As Integer
            
            ' added 10/19/10 by atambe
            Dim marketplaceID As String
            Dim merchantID As String
            Dim accessKeyID As String
            Dim secretAccessKey As String
            
            ' added 10/19/10 by atambe
            DecryptCredentials marketplaceID, merchantID, accessKeyID, secretAccessKey, GetSecurityPassword

            ' modified 10/19/10 by atambe
            'items = LookupItemInCategory(Code, "ASIN", "", nItems)
            items = LookupItem(Code, "ASIN", marketplaceID, merchantID, accessKeyID, secretAccessKey, nItems)
            
            If nItems > 0 Then
                calculateIdType = "ASIN"
                Exit Function
            End If
        End If
    Case 12:
        checkDigit = doUPCCheckDigit(Code)
        If (checkDigit = Val(Right$(Code, 1))) Then
            calculateIdType = "UPC"
            Exit Function
        End If
    Case 13:
        'modifications 6/3/2008 by jigard:
        checkDigit = doEANCheckDigit(Code)
        If (checkDigit = Val(Right$(Code, 1))) Then
           If Left$(Code, 3) = "978" Or Left$(Code, 3) = "979" Then 'ISBN
                calculateIdType = "UPC" 'GJL 5/22/2008 -- per Jigar, all 13-digit prod-ids should be looked up as UPC.
                Exit Function
            Else
                calculateIdType = "EAN"
                Exit Function
            End If
        End If
    End Select
    calculateIdType = "Unrecognized"
End Function


Public Function doUPCCheckDigit(Code As String) As Integer
    Dim Sum As Integer
    Dim i As Variant
    Sum = 0
    For i = 1 To (Len(Code) - 1)
    If Not IsNumeric(Mid(Code, i, 1)) Then
        'error:
        doUPCCheckDigit = -1
        Exit Function
    End If
    Dim digit As Integer
    digit = Val(Mid$(Code, i, 1))
    If (i Mod 2 = 1) Then
    Sum = Sum + (digit * 3)
    Else
    Sum = Sum + digit
    End If
    Next i
    Sum = Sum Mod 10
    doUPCCheckDigit = (10 - Sum) Mod 10
End Function


Public Function doEANCheckDigit(Code As String) As Integer
    Dim Sum As Integer
    Dim i As Variant
    Sum = 0
    For i = 1 To (Len(Code) - 1)
    If Not IsNumeric(Mid(Code, i, 1)) Then
        'error:
        doEANCheckDigit = -1
        Exit Function
    End If
    Dim digit As Integer
    digit = Val(Mid$(Code, i, 1))
    If (i Mod 2 = 0) Then
    Sum = Sum + (digit * 3)
    Else
    Sum = Sum + digit
    End If
    Next i
    Sum = Sum Mod 10
    doEANCheckDigit = (10 - Sum) Mod 10
End Function


Public Function doISBNCheckDigit(Code As String) As Integer
    Dim Sum As Integer
    Dim i As Variant
    Sum = 0
    For i = 1 To (Len(Code) - 1)
    If Not IsNumeric(Mid(Code, i, 1)) Then
Error:
        doISBNCheckDigit = -1
        Exit Function
    End If
    Dim digit As Integer
    digit = Val(Mid$(Code, i, 1))
    Sum = Sum + (digit * (11 - i))
    Next i
    Sum = Sum Mod 11
    doISBNCheckDigit = (11 - Sum) Mod 11
End Function


Public Function GenerateSKU() As String
        Const Base36Chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        Dim Num As Long, num1 As Long, num2 As Long
        'excel time function goes from 1/1/1900
        num2 = (Now - 25569) * 86400 'number of seconds that has elapsed since 1/1/1970
        num1 = Timer * 100
        Dim newNumber1 As String, newNumber2 As String
        newNumber1 = ""
        newNumber2 = ""
        
        Dim nBase As Long, R As Long
        nBase = 36

        ' in r we have the offset of the char that was converted to the new base
        While num2 >= nBase
                R = num2 Mod nBase
                newNumber2 = Mid(Base36Chars, R + 1, 1) + newNumber2
                num2 = num2 / nBase
        Wend
        While num1 >= nBase
                R = num1 Mod nBase
                newNumber1 = Mid(Base36Chars, R + 1, 1) + newNumber1
                num1 = num1 / nBase
        Wend
        
        While Len(newNumber1) + Len(newNumber2) < 10
                newNumber1 = newNumber1 + "O"
        Wend
        newNumber = newNumber1 + newNumber2
        If Len(newNumber) > 10 Then
            newNumber = Mid(newNumber, Len(newNumber) - 10 + 1)
        End If
        
        newNumber = Mid(newNumber, 1, 2) + "-" + Mid(newNumber, 3, 4) + "-" + Mid(newNumber, 7)
        
        GenerateSKU = newNumber
End Function


' modified 08/04/10 by atambe
'Public Function LookupItemInCategory(ItemId As String, ItemIdType As String, Category As String, ByRef Count As Integer) As OFFER_FEED_RECORD()
Public Function LookupItem(ItemId As String, ItemIdType As String, marketplaceID As String, merchantID As String, accessKeyID As String, secretAccessKey As String, ByRef Count As Integer) As OFFER_FEED_RECORD()
    On Error Resume Next

    If g_ImageSize = "" Then g_ImageSize = "MediumImage"
    NoImageURL = "http://ec1.images-amazon.com/images/G/01/nav2/dp/no-image-avail-img-map._V46862177_AA192_.gif"
    NoImageSize = 512   ' modified 10/19/10 by atambe
    
    Dim ItemMatches() As OFFER_FEED_RECORD
    
    ' added 08/04/10 by atambe
    '  modified 24/4/2014 by sunithab MCE-596 from ListSellableProducts to GetMatchingProductForId
    Dim sContactURL As String
    sContactURL = GetLocalURL(URL_HEADER_MWS_PRODUCT_INFO)
    'sContactURL = sContactURL & "&Action=ListSellableProducts&ProductSpecifier=" & ItemIdType & "{" & "ATVPDKIKX0DER" & "," & ItemId & "}"
    sContactURL = sContactURL & "&Action=GetMatchingProductForId&IdType=" & ItemIdType & "&IdList.Id.1=" & ItemId
    
    ' removed 10/11/10 by atambe
    ' If StrComp(ItemIdType, "ASIN", vbTextCompare) <> 0 Then
    '     sContactURL = sContactURL & "&SearchIndex=" & Category
    ' End If
    ' sContactURL = sContactURL & "&ItemId=" & ItemId & "&IdType=" & ItemIdType & "&ResponseGroup=Small,Images"
    
    ' added 08/04/10 by atambe
    Dim signedURL As String
    signedURL = GetSignedProductInfoURL(sContactURL, marketplaceID, merchantID, accessKeyID, secretAccessKey)

    ' added 08/04/10 by atambe
    CreateMWSRequestObject signedURL    ' create and initialize the httpreq object
    Call httpreq.send
    CreateMWSResponseObject     ' create and initialize the xmldoc object

    If xmldoc.ChildNodes(1).BaseName = "ErrorResponse" Then
        Dim errorString As String
        errorString = xmldoc.getElementsByTagName("Code").Item(0).Text
        
        ResetSecurityPassword
        Count = -1
        
        ' these parameters imply login failure
        If errorString = "InvalidAccessKeyId" Or errorString = "AccessDenied" Or errorString = "MissingClientTokenId" Or errorString = "SignatureDoesNotMatch" Or errorString = "InvalidRequest" Then
            AmazonMsgBox GetTranslatedString("mws_rejected"), vbOKOnly, GetTranslatedString("mws_credentials_invalid")
        Else
            AmazonMsgBox GetTranslatedString("internal_error_occurred"), vbOKOnly, GetTranslatedString("internal_error")
        End If
        
        Exit Function
    End If
     ' modified 24/4/2014 by sunithab MCE-596
    Count = xmldoc.getElementsByTagName("Product").Length
    
    If Count >= 1 Then
        ReDim ItemMatches(0 To Count - 1)
        Dim Description As Object 'MSXML2.IXMLDOMNodeList  'converting to late binding.
        Dim itemlist As Object 'MSXML2.IXMLDOMNodeList 'converting to late binding.
        
        ' modified 10/11/10 by atambe
        Set itemlist = xmldoc.getElementsByTagName("Product")
        
        Dim DescriptionText As String
        
        For i = 0 To Count - 1
            ItemMatches(i).ProductID = ItemId
            
            ItemMatches(i).ASINHint = itemlist.Item(i).SelectNodes("//Product/Identifiers/MarketplaceASIN/ASIN").Item(i).Text
            
            ItemMatches(i).title = itemlist.Item(i).SelectNodes("//Product/AttributeSets/ns2:ItemAttributes/ns2:Title").Item(i).Text
            ItemMatches(i).ImageURL = itemlist.Item(i).SelectNodes("//Product/AttributeSets/ns2:ItemAttributes/ns2:SmallImage/ns2:URL").Item(i).Text
            
            ItemMatches(i).ImageHeight = NoImageSize
            ItemMatches(i).ImageWidth = NoImageSize
        Next i
    End If
    
   'This block is removed by sunithab 24/4/2014; Issue: MCE-596
   ' ' modified 10/11/10 by atambe
   ' Count = xmldoc.getElementsByTagName("product:product").Length
   ' 'Count = xmldoc.getElementsByTagName("Item").Length
   '
   ' If Count >= 1 Then
   '     ReDim ItemMatches(0 To Count - 1)
   '     Dim Description As Object 'MSXML2.IXMLDOMNodeList  'converting to late binding.
   '     Dim itemlist As Object 'MSXML2.IXMLDOMNodeList 'converting to late binding.
   '
   '     ' modified 10/11/10 by atambe
   '     Set itemlist = xmldoc.getElementsByTagName("product:product")
   '     'Set itemlist = xmldoc.getElementsByTagName("Item")
   '
   '     Dim DescriptionText As String
   '
   '     For i = 0 To Count - 1
'  '          ItemMatches(i).SearchIndex = xmldoc.getElementsByTagName("SearchIndex").Item(0).Text '1/18/08
   '
   '         ' modified 10/19/10 by atambe
   '         ItemMatches(i).ProductID = ItemId
   '         'ItemMatches(I).ProductID = xmldoc.getElementsByTagName("ItemId").Item(0).Text
   '
'  '          ItemMatches(i).ProductIDType = xmldoc.getElementsByTagName("IdType").Item(0).Text '1/18/08
   '
   '         ' modified 10/19/10 by atambe
   '         ItemMatches(i).ASINHint = itemlist.Item(i).SelectNodes("//product:product/identifiers/asin").Item(i).Text
   '         'ItemMatches(I).ASINHint = itemlist.Item(I).SelectNodes("//Item/ASIN").Item(I).Text
   '
'  '          ItemMatches(i).Manufacturer = itemlist.Item(i).selectNodes("//Item/ItemAttributes/Manufacturer").Item(i).Text '1/18/08
   '
   '         ' modified 10/19/10 by atambe
   '         ItemMatches(i).title = itemlist.Item(i).SelectNodes("//product:product/attributes/mp:item_name").Item(i).Text
   '         'ItemMatches(I).title = itemlist.Item(I).SelectNodes("//Item/ItemAttributes/Title").Item(I).Text '1/18/08
   '
   '         ' added 10/19/10 by atambe
   '         Dim linklist As Object
   '         Dim Length As Long
   '
   '         Length = itemlist.Item(i).SelectNodes("assets/link").Length
   '         Set linklist = itemlist.Item(i).SelectNodes("assets/link")
   '
   '         For j = 0 To Length - 1
   '             If linklist.Item(j).getAttribute("type") = "text/html" Then
   '                 ItemMatches(i).DetailPageURL = linklist.Item(j).getAttribute("href")
   '             ElseIf linklist.Item(j).getAttribute("type") = "image/jpeg" Then
   '                 ItemMatches(i).ImageURL = linklist.Item(j).getAttribute("href")
   '             End If
   '         Next
   '
   '         ItemMatches(i).ImageHeight = NoImageSize
   '         ItemMatches(i).ImageWidth = NoImageSize
                       
' below block removed 10/19/10 by atambe
'            ItemMatches(I).DetailPageURL = itemlist.Item(I).SelectNodes("//Item/DetailPageURL").Item(I).Text
'
'            Dim index As Integer
'            Select Case amazonGlobals.g_ImageSize
'                    Case "SmallImage"
'                        index = imagePositionInXmlDOMNodeList.smallImage
'                    Case "MediumImage"
'                        index = imagePositionInXmlDOMNodeList.mediumImage
'                    Case "LargeImage"
'                        index = imagePositionInXmlDOMNodeList.largeImage
'            End Select
'            If (itemlist.Item(I).ChildNodes.length >= index + 1) Then
'                If (itemlist.Item(I).ChildNodes.Item(index).BaseName = amazonGlobals.g_ImageSize) Then
'                    ItemMatches(I).ImageURL = itemlist.Item(I).ChildNodes.Item(index).ChildNodes.Item(0).Text
'                    ItemMatches(I).ImageWidth = itemlist.Item(I).ChildNodes.Item(index).ChildNodes.Item(2).Text
'                    ItemMatches(I).ImageHeight = itemlist.Item(I).ChildNodes.Item(index).ChildNodes.Item(1).Text
'                Else
'                    ItemMatches(I).ImageURL = NoImageURL
'                    ItemMatches(I).ImageHeight = NoImageSize
'                    ItemMatches(I).ImageWidth = NoImageSize
'                End If
'            Else
'                ItemMatches(I).ImageURL = NoImageURL
'                ItemMatches(I).ImageHeight = NoImageSize
'                ItemMatches(I).ImageWidth = NoImageSize
'            End If
'            If ItemMatches(I).ImageURL = "" Then
'                ItemMatches(I).ImageURL = NoImageURL
'                ItemMatches(I).ImageHeight = NoImageSize
'                ItemMatches(I).ImageWidth = NoImageSize
'            End If
'            Set Description = itemlist.Item(I).SelectNodes("//Item/ItemAttributes/Description")
'            If Description.length <> 0 Then
'                ItemMatches(I).Description = Description.Item(0).Text
'            Else
'                ItemMatches(I).Description = " "
'            End If
'            Set Description = itemlist.Item(I).SelectNodes("//Item/ItemAttributes/Description")
'            If Description.length <> 0 Then
'                ItemMatches(I).Description = Description.Item(0).Text
'            Else
'                ItemMatches(I).Description = " "
'            End If
    '    Next i
    'End If
    
    ' modified 10/11/10 by atambe
    'LookupItemInCategory = ItemMatches
    LookupItem = ItemMatches
    
End Function

Public Function LookupItemInAllCategories(ItemId As String, ItemIdType As String, ByRef Count As Integer) As OFFER_FEED_RECORD()

    Dim ItemMatches() As OFFER_FEED_RECORD
    Dim SearchIndex As String
    
    Count = 0
    
    'init searchIndices if not already done:
    If Not bSearchIndicesInitialized Then
        Call CreateSearchIndices
    End If
    
    For i = LBound(searchIndices) To UBound(searchIndices)
        Dim items() As OFFER_FEED_RECORD
        Dim nItems As Integer
        
        SearchIndex = searchIndices(i)
        items = LookupItemInCategory(ItemId, ItemIdType, SearchIndex, nItems)
        
        If nItems > 0 Then
            ReDim Preserve ItemMatches(Count + nItems)
            For j = 0 To nItems - 1
                ItemMatches(Count + j) = items(j)
            Next j
            Count = Count + nItems
        End If
    Next i
    
    If Count > 1 Then
    'more then one match
        Dim ix As Integer
        Dim firstAsin As String
        firstAsin = ItemMatches(0).ASINHint
        Dim allasinssame As Boolean
        allasinssame = True
        For ix = 0 To Count - 1
            If firstAsin <> ItemMatches(ix).ASINHint Then
                allasinssame = False
            End If
        Next ix
        
        If allasinssame = True Then
            Count = 1
        End If
        
    End If
    
    LookupItemInAllCategories = ItemMatches
        
End Function


Function MyASC(OneChar)
  If OneChar = "" Then MyASC = 0 Else MyASC = Asc(OneChar)
End Function


Public Sub ShowPreferencesDlg()
    Application.EnableEvents = True
    frmPreferences.Show
End Sub


' modified 07/21/10 by atambe
Public Sub UploadFile()
    ' added 07/21/10 by atambe
    If Not CheckSecurityPassword Then Exit Sub
    
    'If this is a Japanese template, the Windows codepage must be 932 (NOT 1252) for this to work:
    Dim strTemplateLanguage As String
    Dim iWindowsCodepage As Long
    strTemplateLanguage = GetLocalLanguageName
    If strTemplateLanguage = INT_TABLE_JAPANESE_HEADER Then
        iWindowsCodepage = GetWindowsCodepage
        If iWindowsCodepage <> INT_JAPANESE_CODEPAGE Then
            'can't upload!
            AmazonMsgBox GetTranslatedString("unable_to_upload_1") & _
                   vbNewLine & vbNewLine & _
                   GetTranslatedString("unable_to_upload_2") & _
                   vbNewLine & vbNewLine & _
                   GetTranslatedString("unable_to_upload_3") & _
                   vbNewLine & _
                   GetTranslatedString("unable_to_upload_4") & iWindowsCodepage & GetTranslatedString("unable_to_upload_5"), _
                   vbOKOnly, GetTranslatedString("unable_to_upload_short")
            Exit Sub
        End If
    End If

    'test xml:
    Dim oTest As Object
    Set oTest = Get_XMLHTTP_Object
    If bCannotFindXML Then
        Call MsgXMLErr
        Exit Sub
    End If
    Set oTest = Get_XML_DOMDocument_Object
    If bCannotFindXML Then
        Call MsgXMLErr
        Exit Sub
    End If
    Set oTest = Nothing

    Call ResetProdIdAndPriceColsNumberFormattingToText
    
    ' added 08/11/10 by atambe
    If bChinaTemplate Then
        frmUploadFile.Show
    Else
        ' modified 07/29/10 by atambe
        If ValidateTemplate(True) Then frmUploadFile.Show
    End If
End Sub


' added 07/29/10 by atambe
Public Sub ObtainCredentials()
    frmCredentials.Show vbModal
End Sub


' modified 07/20/10 by atambe
Public Sub DoUploadFile(file As String)   ' added 07/20/10 by atambe
    On Error GoTo ErrorHandler
    
    '        If Not HttpReq Is Nothing Then Set HttpReq = Nothing 'converting to late binding.
    '        Dim httpreq As Object 'moved to Public on modSupport.
    Dim sContactURL As String
    sContactURL = GetLocalURL(URL_HEADER_MWS)
    
    ' added 07/29/10 by atambe
    sContactURL = sContactURL & "&Action=SubmitFeed&FeedType=_POST_FLAT_FILE_LISTINGS_DATA_&PurgeAndReplace=false"
    
    '        Dim sText As String 'replaced by vText
    Dim vText As Variant 'must be Variant for late-binding.
    '        sText = amazonGlobals.GetText(file)
    vText = amazonGlobals.GetText(file)
    Dim bytearrayUploadText() As Byte
    Dim vArray As Variant 'declare as variant, not array.
    
    bytearrayUploadText = vText 'convert string to byte array (for JP). (works for other locales too.)
    vArray = bytearrayUploadText 'for JP, send as Shift-JIS byte array wrapped in Variant (works for other locales too).
    
    frmUploadFile.UpdateStatus GetTranslatedString("decrypting_mws_credentials")    ' added 07/26/10 by atambe
    
    ' added 07/26/10 by atambe
    Dim marketplaceID As String
    Dim merchantID As String
    Dim accessKeyID As String
    Dim secretAccessKey As String
    
    ' added 07/26/10 by atambe
    DecryptCredentials marketplaceID, merchantID, accessKeyID, secretAccessKey, GetSecurityPassword
    
    ' added 07/26/10 by atambe
    frmUploadFile.MarketplaceLabel.Caption = marketplaceID
    frmUploadFile.MerchantLabel.Caption = merchantID
    frmUploadFile.AccessKeyLabel.Caption = accessKeyID
    
    ' added 07/26/10 by atambe
    Dim signedURL As String
    signedURL = GetSignedURL(sContactURL, marketplaceID, merchantID, accessKeyID, secretAccessKey)
 
    ' added 07/29/10 by atambe
    CreateMWSRequestObject signedURL    ' create and initialize the httpreq object

    ' added 07/26/10 by atambe
    httpreq.setRequestHeader "Content-MD5", GetContentMD5File(file)
    If GetLocalLanguageName = INT_TABLE_JAPANESE_HEADER Then
        httpreq.setRequestHeader "Content-Type", "text/tab-separated-values; charset=Shift_JIS"
    ElseIf GetLocalLanguageName = INT_TABLE_CHINESE_HEADER Then
        httpreq.setRequestHeader "Content-Type", "text/tab-separated-values; charset=UTF-8"
    Else
        httpreq.setRequestHeader "Content-Type", "text/tab-separated-values; charset=iso-8859-1"
    End If
    
    '        Call httpreq.setRequestHeader("Content-Type", "text/xml;charset=shift-jis")
        '4/29/08:
        'maybe need to set charset on the above line; found these examples with random charsets:
            'httpreq.setRequestHeader   ("Content-type:",   "text/xml;   charset=gb2312")
            'oXMLHTTP.setRequestHeader "Content-Type", "text/xml;charset=ISO-8859-1"
            'pIXMLHTTPRequest->setRequestHeader("ContentType", "text/html;charset=UTF-8");
            'oXMLHTTP.setRequestHeader('Content-Type', 'application/xml;charset=UTF-8');
        'also see:
        'http://www.experts-exchange.com/Web_Development/Web_Languages-Standards/XML/Q_20875679.html?qid=20875679
        'http://msdn.microsoft.com/library/default.asp?url=/library/en-us/xmlsdk30/htm/xmmthsendixmlhttprequest.asp
        'http://en.wikipedia.org/wiki/ISO/IEC_2022
        'http://a4esl.org/c/charset.html
        'also found this comment:
        '"the expected encoding is always ISO/IEC 8859-1, being the default HTTP charset ever since."
    
    frmUploadFile.UpdateStatus (GetTranslatedString("sending_feed"))

    Call httpreq.send(vArray)

    frmUploadFile.UpdateStatus (GetTranslatedString("response_received"))
        
    ' added 07/29/10 by atambe
    CreateMWSResponseObject     ' create and initialize the xmldoc object

    Dim UploadId As String, UploadType As String, UploadStatus As String, SubmittedDate As String
    Dim ErrorCode As String, ErrorMessage As String
    Dim status1 As String
    
    If xmldoc.ChildNodes(1).BaseName = "ErrorResponse" Then
        ResetSecurityPassword
        ErrorCode = xmldoc.getElementsByTagName("Code").Item(0).Text
        ErrorMessage = xmldoc.getElementsByTagName("Message").Item(0).Text
        frmUploadFile.ShowUploadFailedResults ErrorCode, ErrorMessage     ' removed leading space character: atambe 07/27/10
        
    ' added 07/26/10 by atambe
    ElseIf xmldoc.ChildNodes(1).BaseName = "SubmitFeedResponse" Then
        UploadId = xmldoc.getElementsByTagName("FeedSubmissionId").Item(0).Text
        UploadType = xmldoc.getElementsByTagName("FeedType").Item(0).Text
        SubmittedDate = xmldoc.getElementsByTagName("SubmittedDate").Item(0).Text
        status1 = xmldoc.getElementsByTagName("FeedProcessingStatus").Item(0).Text
        UploadStatus = Trim(Replace(status1, "_", " "))
        frmUploadFile.ShowUploadResults UploadId, UploadType, UploadStatus, SubmittedDate
        
    Else
        frmUploadFile.ShowUploadFailedResults GetTranslatedString("unknown_response"), Trim(httpreq.responseText)
    End If
    
    Exit Sub
    
ErrorHandler:
    If False Then
        Resume
    End If
    Beep
    ResetSecurityPassword
    frmUploadFile.ShowUploadFailedResults Err.Number, Err.Description    ' removed leading space characters: atambe 07/27/10
End Sub


Function GetText(sFile As String) As String
    Dim nSourceFile As Integer, sText As String

    On Error GoTo generr

    'FOR TESTING ONLY:
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    'for testing JP at Greg's desk only:
        'if testing from Master, must also change to JP upload url.
'    Stop
    If False Then
        'switch to text file saved out from JP Excel:
        Dim sJPFile As String
        sJPFile = "C:\_GJL\Release 1.9\Work\JP Apparel File saved out as xlText (plain text)\rad2E966.tmp.txt"
        sFile = sJPFile
    End If

    ''Get the number of the next free text file
    nSourceFile = FreeFile
    
    ''Write the entire file to sText
    '   Open sFile For Input As #nSourceFile
    '   sText = Input$(LOF(1), 1)
    Open sFile For Binary As #nSourceFile 'GJL 4/24/08 for JP.
    sText = InputB$(LOF(1), 1) 'GJL 4/24/08 for JP.
    Close #nSourceFile

   GetText = sText

    Exit Function

generr:
    If False Then
        Debug.Print Err.Description
        Resume
    End If
End Function


Function GetLocalURL(url_category As String) As String
    'Greg Lovern 11-20-07, 4-25-08
    Dim rgFind As Range
    Dim iLocalRow As Long
    Dim iUrlCol As Long
    Dim strLocalLanguage As String
    Dim strSecondaryLanguage As String
    
    On Error GoTo generr
    
    'get local and secondary languages:
    strLocalLanguage = GetLocalLanguageName()
    strSecondaryLanguage = GetLocalLanguageName(True)
    
    'get the URL column for the local URL:
    Set rgFind = shIntURLs.Cells.Find(What:=url_category, LookAt:=xlWhole)
    If rgFind Is Nothing Then
        shIntURLs.Visible = xlSheetVisible
        shIntURLs.Activate
        DoEvents
        AmazonMsgBox GetTranslatedString("unable_to_find_column_header")
        Exit Function
    End If
    iUrlCol = rgFind.Column
    
    'get the section range in which to look for the language and url:
    Dim iSectionTopRow As Long
    Dim iSectionBottomRow As Long
    Dim rgLookIn As Range
    iSectionTopRow = rgFind.Row
    Set rgLookIn = shIntURLs.Range( _
                        shIntURLs.Cells(iSectionTopRow, 1), _
                        shIntURLs.Cells(shIntURLs.Rows.Count, shIntURLs.Columns.Count))
    Set rgFind = rgLookIn.Find(What:=URL_HEADER_SECTION_END_TEXT, LookAt:=xlWhole)
    If rgFind Is Nothing Then
        'assume this is the last section and there is no ENDSECTION marker after it.
        iSectionBottomRow = shIntURLs.Rows.Count
    Else
        iSectionBottomRow = rgFind.Row
    End If
    Set rgLookIn = shIntURLs.Range( _
                        shIntURLs.Cells(iSectionTopRow, 1), _
                        shIntURLs.Cells(iSectionBottomRow, shIntURLs.Columns.Count))
    
    'get the row of the language of the local upload URL:
    Set rgFind = rgLookIn.Find(What:=strLocalLanguage, LookAt:=xlWhole)
    If rgFind Is Nothing Then
        Set rgFind = rgLookIn.Find(What:=strSecondaryLanguage, LookAt:=xlWhole)
    End If
    If rgFind Is Nothing Then
        shIntURLs.Visible = xlSheetVisible
        shIntURLs.Activate
        DoEvents
        AmazonMsgBox GetTranslatedString("unable_to_find_url_1") & target_language & GetTranslatedString("unable_to_find_url_2")
        Exit Function
    End If
    iLocalRow = rgFind.Row
    
    'get the upload URL:
    GetLocalURL = shIntURLs.Cells(iLocalRow, iUrlCol).value
    
    Exit Function
    
generr:
    If False Then
        Resume
    End If
End Function
Attribute VB_Name = "clsExcelAppEvents"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'Greg Lovern 'CHECKIN!
'PrecisionCalc.com

Option Explicit

'Excel Application-Level Events:

Public WithEvents ExcelApp As Application 'Required for Excel application-level events. Must be in a Class Module.
Attribute ExcelApp.VB_VarHelpID = -1



Private Sub ExcelApp_WindowActivate(ByVal Wb As Workbook, ByVal Wn As Window)
    'does NOT fire when activating the Excel window.
End Sub
Attribute VB_Name = "frmAmazonMsgBox"
Attribute VB_Base = "0{F5FC3D93-F6B7-4F6E-9105-8ADC1B13D7EB}{5DB7B6F8-41EE-4E6D-AA69-4141E9C8392C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' Modified for CN Launch
' Abhijit Tambe, August 2010

Option Explicit



Private Sub UserForm_Initialize()
    iAmazonMsgBoxRet = -1 'indicates user cancelled the form.
                          'Must unload form or init iAmazonMsgBoxRet to -1 after every use.
    
    ' added 08/15/10 by atambe
    If bChinaTemplate Then
        imgAmazonServices.Visible = False
        imgAmazonJoyo.Visible = True
    End If
End Sub


Private Sub imgOkay_Click()
    iAmazonMsgBoxRet = 1
    Me.Hide
End Sub

Private Sub imgCancel_Click()
    iAmazonMsgBoxRet = 2
    Me.Hide
End Sub

Private Sub imgYes_Click()
    iAmazonMsgBoxRet = 6
    Me.Hide
End Sub

Private Sub ImgNo_Click()
    iAmazonMsgBoxRet = 7
    Me.Hide
End Sub

Private Sub UserForm_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    If KeyAscii = 13 Or KeyAscii = 32 Then
        'User pressed Enter or Tab on the form:
        iAmazonMsgBoxRet = iAmazonMsgBoxDefaultRet
        Me.Hide
    End If
End Sub
Attribute VB_Name = "frmAutoIntUpdateInterval"
Attribute VB_Base = "0{7B5CFC98-2E17-4291-B2FF-434F3E40C592}{19D77160-BFD1-40E1-81F6-90E7DEF994C7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'Greg Lovern 'CHECKIN!
'PrecisionCalc.com

' Modified for CN Launch
' Abhijit Tambe, August 2010

Dim vInterval As Variant

Private Sub cmdCancel_Click()
    bUpdateNow = False
    Me.Hide
End Sub

Private Sub cmdUpdate_Click()

If Me.optYes Then
    ThisWorkbook.Names(AUTO_UPDATE_DEFINED_NAME).RefersToRange.value = True
Else
    ThisWorkbook.Names(AUTO_UPDATE_DEFINED_NAME).RefersToRange.value = False
End If

ThisWorkbook.Names(UPDATE_INTERVAL_DAYS_DEFINED_NAME).RefersToRange.value = Me.txtDaysCount

bUpdateNow = True
Me.Hide

End Sub

Private Sub OptNo_Click()
    Me.txtDaysCount.Enabled = False
    Me.lblDaysCount.Enabled = False
    Me.lblEachTime.Enabled = False
End Sub

Private Sub optYes_Click()
    Me.txtDaysCount.Enabled = True
    Me.lblDaysCount.Enabled = True
    Me.lblEachTime.Enabled = True
End Sub

Private Sub txtDaysCount_Enter()
    vInterval = Me.txtDaysCount
End Sub

Private Sub txtDaysCount_Exit(ByVal Cancel As MSForms.ReturnBoolean)

On Error GoTo Err1

Me.txtDaysCount = CInt(Me.txtDaysCount)

Exit Sub

Err1:

AmazonMsgBox GetTranslatedString("interval_must_be_number"), vbOKOnly, GetTranslatedString("invalid_interval")
Me.txtDaysCount = vInterval

End Sub

Private Sub UserForm_Initialize()
' added 10/16/10 by atambe
TranslateFormControls Me

' added 08/15/10 by atambe
If bChinaTemplate Then
    imgAmazonServices.Visible = False
    imgAmazonJoyo.Visible = True
End If

Dim vAutoUpdate As Variant
Dim vUpdateInterval As Variant

On Error GoTo Err1

vAutoUpdate = ThisWorkbook.Names(AUTO_UPDATE_DEFINED_NAME).RefersToRange.value
vUpdateInterval = ThisWorkbook.Names(UPDATE_INTERVAL_DAYS_DEFINED_NAME).RefersToRange.value

If vAutoUpdate Then
    Me.optYes = True
Else
    Me.OptNo = True
End If

Me.txtDaysCount = CInt(vUpdateInterval)


Exit Sub

Err1:

Me.txtDaysCount = 0

End Sub
Attribute VB_Name = "frmBrowseImportFile"
Attribute VB_Base = "0{64EE5553-E3F5-43B9-9D97-78B943C6378A}{6EE023BC-F44D-47A4-B08C-234243F64775}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' Modified for CN Launch
' Abhijit Tambe, August 2010

Option Explicit

Public bCancel As Boolean
Dim strImportPath As String
Dim strPathLast4Chars As String
Public bDelimCharIsTab As Boolean
Public bDelimCharIsComma As Boolean
Dim iFormHeight As Long

Private Sub imgBrowse_Click()
    Me.Hide
    DoEvents
    strImportPath = Application.GetOpenFilename(, , GetTranslatedString("browse_file"))
    If strImportPath = "False" Then
        'user clicked Cancel.
    Else
        frmBrowseImportFile.txtBrowseImportFile = strImportPath
        

        'check whether to open as text file:
        strPathLast4Chars = UCase(Right(strImportPath, 4))
            bDelimCharIsTab = False 'init.
            bDelimCharIsComma = False 'init.
        If strPathLast4Chars = ".TXT" Then
            bDelimCharIsTab = True
            bDelimCharIsComma = False
        ElseIf strPathLast4Chars = ".CSV" Then
            bDelimCharIsComma = True
            bDelimCharIsTab = False
        End If
        
        If bDelimCharIsTab Or bDelimCharIsComma Then
            'open as text, so allow user to choose codepage:
            Me.height = 309
        Else
            'not a textfile:
            Me.height = 212
        End If
        
    End If
    
    Me.Show
End Sub


Private Sub imgCancel_Click()
Me.Hide
bCancel = True
End Sub

Private Sub imgChangeCodepage_Click()
Dim iTextFileCodepage As Long
Me.Hide
DoEvents
iTextFileCodepage = GetTextFileCodepage(frmBrowseImportFile.lblCodepage)
If iTextFileCodepage > -1 Then '-1 indicates error returned from GetTextFileCodepage.
    frmBrowseImportFile.lblCodepage = iTextFileCodepage
End If
Me.Show
End Sub

Private Sub imgOkay_Click()
Me.Hide
End Sub

Private Sub lstPickCodepage_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
Me.cmdOkay = True
End Sub

Private Sub UserForm_Activate()
bCancel = False
'Me.Height = iFormHeight
End Sub

Private Sub UserForm_Initialize()
' added 10/16/10 by atambe
TranslateFormControls Me

Me.height = 212
' added 08/15/10 by atambe
If bChinaTemplate Then
    imgAmazonServices.Visible = False
    imgAmazonJoyo.Visible = True
End If
End Sub
Attribute VB_Name = "frmBrowser"
Attribute VB_Base = "0{F3018BDF-D7EB-4E12-813E-0C66E434093D}{41660E86-2E22-4823-B3E2-6C4A11CB4AB6}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' Added for MWS Integration
' Abhijit Tambe, August 2010


Private Sub UserForm_Activate()
    WebBrowser.Navigate GetLocalURL(URL_HEADER_CREDENTIALS)
End Sub


Private Sub UserForm_Initialize()
    ' added 10/16/10 by atambe
    TranslateFormControls Me
End Sub


Private Sub WebBrowser_BeforeNavigate2(ByVal pDisp As Object, url As Variant, Flags As Variant, TargetFrameName As Variant, PostData As Variant, Headers As Variant, Cancel As Boolean)
    If url <> GetLocalURL(URL_HEADER_CREDENTIALS_SUMMARY) Then
        Me.StatusValueLabel.Caption = GetTranslatedString("loading")
    End If
End Sub


Private Sub WebBrowser_DocumentComplete(ByVal pDisp As Object, url As Variant)
    If url = GetLocalURL(URL_HEADER_CREDENTIALS_SUMMARY) Then
        On Error GoTo ErrorHandler
        
        Dim Length As Integer
        Dim i As Integer
        Dim htmlElement

        Length = WebBrowser.Document.getElementsByTagName("div").Length
        
        For i = 1 To Length
            Set htmlElement = WebBrowser.Document.getElementsByTagName("div").Item(i)
            If htmlElement.getAttribute("id") = "mwsCredentials" Then
                ExtractMWSCredentials htmlElement.innerhtml
                Exit Sub
            End If
        Next
        
        AmazonMsgBox GetTranslatedString("registration_complete_long"), vbOKOnly, GetTranslatedString("registration_complete")
    End If
    
    Exit Sub
    
ErrorHandler:
    AmazonMsgBox GetTranslatedString("registration_complete_long"), vbOKOnly, GetTranslatedString("registration_complete")
End Sub


Private Sub WebBrowser_NavigateComplete2(ByVal pDisp As Object, url As Variant)
    If url = GetLocalURL(URL_HEADER_CREDENTIALS_PROCESSOR) Then
        Me.StatusValueLabel.Caption = GetTranslatedString("mws_please_wait")
    Else
        Me.StatusValueLabel.Caption = ""
    End If
End Sub


Private Sub ExtractMWSCredentials(Text As String)
    Set xmldoc = Nothing
    DoEvents
    Set xmldoc = Get_XML_DOMDocument_Object()
    xmldoc.LoadXML (Trim(Text))

    frmCredentials.MerchantIDBox = xmldoc.getElementsByTagName("MERCHANTID").Item(0).Text
    frmCredentials.MarketplaceIDBox = xmldoc.getElementsByTagName("MARKETPLACEID").Item(0).Text
    frmCredentials.AccessKeyIDBox = xmldoc.getElementsByTagName("MWSACCESSKEY").Item(0).Text
    frmCredentials.SecretAccessKeyBox = xmldoc.getElementsByTagName("SECRETKEY").Item(0).Text
    
    AmazonMsgBox GetTranslatedString("mws_credentials_imported"), vbOKOnly, GetTranslatedString("registration_complete")
End Sub
Attribute VB_Name = "frmBulkLookupPleaseWait"
Attribute VB_Base = "0{ECA11908-C0F6-4E16-9FAE-5F54B8990358}{6E8DBB2A-D83F-4BE8-88FA-752694762F5C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' Modified for CN Launch
' Abhijit Tambe, August 2010

Option Explicit



Private Sub cmdCancel_Click()
    bCancelBulkLookup = True
End Sub

Private Sub UserForm_Activate()
    bCancelBulkLookup = False
End Sub

Private Sub UserForm_Initialize()
    ' added 10/16/10 by atambe
    TranslateFormControls Me
    
    bCancelBulkLookup = False
    
    ' added 08/15/10 by atambe
    If bChinaTemplate Then
        imgAmazonServices.Visible = False
        imgAmazonJoyo.Visible = True
    End If
End Sub

Attribute VB_Name = "frmCannotFindXML"
Attribute VB_Base = "0{2A6738D1-AD08-48D3-95B1-23AC141C5487}{E92E0016-2FC6-49B7-8563-C142128D74FE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' Modified for CN Launch
' Abhijit Tambe, August 2010

Private Sub cmdOK_Click()
Unload Me
End Sub

Private Sub lblDownloadMSXML_Click()
'    Set oIE = CreateObject("InternetExplorer.Application")
'    oIE.Navigate "http://www.microsoft.com/downloads/details.aspx?FamilyID=993c0bcf-3bcf-4009-be21-27e85e1857b1"
'    oIE.Visible = True
    
    Call BrowseTo("http://www.microsoft.com/downloads/details.aspx?FamilyID=993c0bcf-3bcf-4009-be21-27e85e1857b1")
End Sub

Private Sub OKButton_Click()

End Sub

Private Sub UserForm_Initialize()
    ' added 10/16/10 by atambe
    TranslateFormControls Me
    
    ' added 08/15/10 by atambe
    If bChinaTemplate Then
        imgAmazonServices.Visible = False
        imgAmazonJoyo.Visible = True
    End If
End Sub
Attribute VB_Name = "frmCredentials"
Attribute VB_Base = "0{1940BD9C-B3EF-49CF-BBFB-6D87E3DA0DEE}{2B3C2826-6F74-468B-B521-A74DD02CF681}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' Added for MWS integration
' Abhijit Tambe, July 2010


Private Sub CancelButton_Click()
    Unload Me
End Sub


Private Sub CancelButton2_Click()
    Unload Me
End Sub


Private Sub RemoveCredentials_Click()
    On Error GoTo ErrorHandler
    
    Dim choice As Integer
    choice = AmazonMsgBox(GetTranslatedString("remove_credentials_confirm"), vbYesNo, GetTranslatedString("remove_credentials_short"))
    If choice = vbYes Then
        DeleteSetting "Amazon", "MWS"
        AmazonMsgBox GetTranslatedString("credentials_successfully_removed_long"), vbOKOnly, GetTranslatedString("credentials_successfully_removed")
    End If
    Exit Sub
    
ErrorHandler:
    AmazonMsgBox GetTranslatedString("no_mws_credentials"), vbOKOnly, GetTranslatedString("remove_credentials_short")
End Sub


Private Sub ObtainCredentials_Click()
    frmBrowser.Show vbModal
End Sub


Private Sub OKButton_Click()
    If MerchantIDBox.Text = "" Or MarketplaceIDBox.Text = "" Or AccessKeyIDBox.Text = "" Or SecretAccessKeyBox.Text = "" Then
        AmazonMsgBox GetTranslatedString("please_complete"), vbOKOnly, GetTranslatedString("missing_information")
    Else
        DisableFields
        StatusValueLabel.Visible = True
        If Not ValidateCredentials(MarketplaceIDBox.Text, MerchantIDBox.Text, AccessKeyIDBox.Text, SecretAccessKeyBox.Text) Then
            EnableFields
            StatusValueLabel.Visible = False
        Else
            CredentialsFrame.Visible = False
            Label1.Visible = False
            SecurityPasswordFrame.Visible = True
            Label11.Visible = True
            Me.height = 216
        End If
    End If
End Sub


Private Sub OkButton2_Click()
    If SecurityPasswordBox.Text = "" Or ConfirmSecurityPasswordBox.Text = "" Then
        AmazonMsgBox GetTranslatedString("please_complete"), vbOKOnly, GetTranslatedString("missing_information")
    Else
        If SecurityPasswordBox.Text <> ConfirmSecurityPasswordBox.Text Then
            AmazonMsgBox GetTranslatedString("values_must_match"), vbOKOnly, GetTranslatedString("incorrect_information")
        Else
            EncryptCredentials MarketplaceIDBox.Text, MerchantIDBox.Text, AccessKeyIDBox.Text, SecretAccessKeyBox.Text, SecurityPasswordBox.Text
            AmazonMsgBox GetTranslatedString("credentials_securely_stored"), vbOKOnly, GetTranslatedString("credentials_stored_successfully")
            ResetSecurityPassword
            Unload Me
        End If
    End If
End Sub


Private Sub EnableFields()
    MerchantIDBox.Enabled = True
    MarketplaceIDBox.Enabled = True
    AccessKeyIDBox.Enabled = True
    SecretAccessKeyBox.Enabled = True
End Sub


Private Sub DisableFields()
    MerchantIDBox.Enabled = False
    MarketplaceIDBox.Enabled = False
    AccessKeyIDBox.Enabled = False
    SecretAccessKeyBox.Enabled = False
End Sub


Private Sub UserForm_Initialize()
    ' added 10/16/10 by atambe
    TranslateFormControls Me
    
    ' added 08/15/10 by atambe
    If bChinaTemplate Then
        imgAmazonServices.Visible = False
        imgAmazonJoyo.Visible = True
    End If
End Sub
Attribute VB_Name = "frmImageDisplay"
Attribute VB_Base = "0{D6D132BA-D7CF-4C82-9F04-31E78AF30600}{8016E9C9-7AE6-45AF-8F23-7ADCB9C319C0}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' Abhijit Tambe, October 2010

Private Sub UserForm_Initialize()
On Error GoTo generr
    TranslateFormControls Me
    Me.Picture = LoadPicture(ThisWorkbook.Path & "\ll_tmp_product_image.jpg")
generr:
    Exit Sub
End Sub

Private Sub UserForm_Terminate()
On Error GoTo generr
    Kill ThisWorkbook.Path & "\ll_tmp_product_image.jpg"
generr:
    Exit Sub
End Sub
Attribute VB_Name = "frmMatchHeaders"
Attribute VB_Base = "0{6A8E0E1D-0519-4066-A355-FA5CDC47F55A}{00C58BFB-BB09-4FAE-AE46-E35242D7A619}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'Greg Lovern 'CHECKIN!
'PrecisionCalc.com

' Modified for CN Launch
' Abhijit Tambe, August 2010

Option Explicit

Private Sub Label1_Click()

End Sub

Private Sub cmdCancel_Click()
Me.Hide
CancelImport
End Sub


Private Sub cmdMatchPair_Click()

Dim iImportCol As Long
Dim iTemplateCol As Long
Dim bRet As Boolean
Dim iOneBasedIfAlpha As Long


'vArrayNonMatchedImportHeaders and vArrayNonMatchedTemplateHeaders are:
    '1-based when in alpha sort
    '0-based when in worksheet sort

If frmMatchHeaders.optSortAlpha Then
    'vArrayNonMatchedImportHeaders and vArrayNonMatchedTemplateHeaders are 1-based:
    iOneBasedIfAlpha = 1
Else
    'frmMatchHeaders.optSortByWorksheetOrder = True
    'vArrayNonMatchedImportHeaders and vArrayNonMatchedTemplateHeaders are 0-based:
    iOneBasedIfAlpha = 0
End If

iImportCol = vArrayNonMatchedImportHeaders(2, frmMatchHeaders.lstImport.ListIndex + iOneBasedIfAlpha)
iTemplateCol = vArrayNonMatchedTemplateHeaders(2, frmMatchHeaders.lstTemplate.ListIndex + iOneBasedIfAlpha)

iArrayMatchedHeaders(iTemplateCol) = iImportCol
bRet = PopulateMatchHeadersFormListboxes

Me.cmdMatchPair.Enabled = False

End Sub

Private Sub cmdOK_Click()
bMatchHeadersDlgClickedOK = True
Me.Hide
End Sub


Private Sub cmdUnMatchPair_Click()

Dim iMatchedPairsSelectedRow As Long
Dim iArrayImportIndex As Long
Dim bRet As Boolean

Const MATCHED_PAIRS_TEMPLATE_ARRAYINDEX_COLUMN As Long = 3

iMatchedPairsSelectedRow = frmMatchHeaders.lstMatchedPairs.ListIndex
iArrayImportIndex = frmMatchHeaders.lstMatchedPairs.List(iMatchedPairsSelectedRow, MATCHED_PAIRS_TEMPLATE_ARRAYINDEX_COLUMN)
iArrayMatchedHeaders(iArrayImportIndex) = -1
bRet = PopulateMatchHeadersFormListboxes

Me.cmdUnMatchPair.Enabled = False

End Sub

Private Sub lstImport_Click()
If Not IsNull(Me.lstTemplate.value) Then Me.cmdMatchPair.Enabled = True
End Sub

Private Sub lstTemplate_Click()
If Not IsNull(Me.lstImport.value) Then Me.cmdMatchPair.Enabled = True
End Sub

Private Sub lstMatchedPairs_Click()
Me.cmdUnMatchPair.Enabled = True
End Sub

Private Sub optSortAlpha_Click()
PopulateMatchHeadersFormListboxes
End Sub

Private Sub optSortByWorksheetOrder_Click()
PopulateMatchHeadersFormListboxes
End Sub

Private Sub UserForm_Initialize()
Me.cmdUnMatchPair.Enabled = False
Me.cmdMatchPair.Enabled = False

' added 10/16/10 by atambe
TranslateFormControls Me

Me.optSortByWorksheetOrder = True

' added 08/15/10 by atambe
If bChinaTemplate Then
    imgAmazonServices.Visible = False
    imgAmazonJoyo.Visible = True
End If
End Sub
Attribute VB_Name = "frmPickCodepage"
Attribute VB_Base = "0{E6D15E83-490F-4F0E-A7C1-66442D2E6E41}{C968BCB5-B695-42D4-9191-659E975CD2B9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' Modified for CN Launch
' Abhijit Tambe, August 2010

Option Explicit

Public bCancel As Boolean

Private Sub imgCancel_Click()
Me.Hide
bCancel = True
End Sub

Private Sub imgOkay_Click()
Me.Hide
End Sub

Private Sub lstPickCodepage_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
Me.imgOkay = True
End Sub

Private Sub UserForm_Activate()
bCancel = False
End Sub

Private Sub UserForm_Initialize()
    ' added 10/16/10 by atambe
    TranslateFormControls Me

    ' added 08/15/10 by atambe
    If bChinaTemplate Then
        imgAmazonServices.Visible = False
        imgAmazonJoyo.Visible = True
    End If
End Sub
Attribute VB_Name = "frmPickWorksheet"
Attribute VB_Base = "0{329BD8AF-9618-43D2-899C-6A6B9879D959}{95ECB548-2B0C-4D97-A674-C3DE04E59A73}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' Modified for CN Launch
' Abhijit Tambe, August 2010

Option Explicit

Private Sub imgCancel_Click()
Me.Hide
CancelImport
End Sub

Private Sub imgOkay_Click()
Me.Hide
End Sub

Private Sub UserForm_Initialize()
    ' added 10/16/10 by atambe
    TranslateFormControls Me
    
    ' added 08/15/10 by atambe
    If bChinaTemplate Then
        imgAmazonServices.Visible = False
        imgAmazonJoyo.Visible = True
    End If
End Sub
Attribute VB_Name = "frmPreferences"
Attribute VB_Base = "0{2AC1F934-737D-4A5A-9957-29D5A4B1D70D}{F938D690-D24C-487B-992B-2C74B6B9B46A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' Modified for CN Launch
' Abhijit Tambe, August 2010

Private Sub CancelButton_Click()
    Unload Me
End Sub


Private Sub OKButton_Click()
    amazonGlobals.g_DefProdCondition = Me.DefProdCondition.Text
    amazonGlobals.g_DefProdTaxCode = Me.DefProdTaxCode.Text
    amazonGlobals.g_DefUpdateDelete = Me.DefUpdateDelete.Text
    'amazonGlobals.g_DefProductType = Me.DefProductType.Text    ' removed 10/16/10 by atambe
    amazonGlobals.g_AutoFillSKU = Me.AutoFillSKU
    
    amazonGlobals.g_ImageSize = "MediumImage" ' added 10/16/10 by atambe
    
' removed 10/16/10 by atambe
'    Select Case Me.ImageSize.Text
'        Case "Small"
'            amazonGlobals.g_ImageSize = "SmallImage"
'        Case "Medium"
'            amazonGlobals.g_ImageSize = "MediumImage"
'        Case "Large"
'            amazonGlobals.g_ImageSize = "LargeImage"
'    End Select
    
    Unload Me
End Sub



Private Sub UpdateDown_Click()

End Sub

Private Sub UserForm_Activate()

    Me.AutoFillSKU = True
    If amazonGlobals.g_ImageSize = "" Then amazonGlobals.g_ImageSize = "MediumImage"
    With Me
        .AutoFillSKU = True
        
        With .DefProdTaxCode
'            .AddItem "A_GEN_NOTAX"
'            .AddItem "A_GEN_TAX"
            .List = GetPreferenceListAsRangeArray(ThisWorkbook, "ProductTaxCode")
            If .List(0) = "_NO_LIST_" Then
                .List(0) = ""
                .Enabled = False
                Me.Label1.Enabled = False
            End If
        End With
        
        With .DefProdCondition
'            .AddItem "New"
'            .AddItem "UsedLikeNew"
'            .AddItem "UsedGood"
'            .AddItem "CollectibleLikeNew"
'            .AddItem "CollectibleVeryGood"
'            .AddItem "CollectibleGood"
'            .AddItem "CollectibleAcceptable"
'            .AddItem "RefurbishedClub"
            .List = GetPreferenceListAsRangeArray(ThisWorkbook, "ConditionType")
            If .List(0) = "_NO_LIST_" Then
                .List(0) = ""
                .Enabled = False
                Me.Label2.Enabled = False
            End If
        End With
        
        With .DefUpdateDelete
'            .AddItem "Update"
'            .AddItem "Delete"
            '.AddItem "PartialUpdate"
            .List = GetPreferenceListAsRangeArray(ThisWorkbook, "OperationType")
            If .List(0) = "_NO_LIST_" Then
                .List(0) = ""
                .Enabled = False
                Me.Label3.Enabled = False
            End If
        End With
        
' removed 10/16/10 by atambe
'        With .DefProductType
''            For i = LBound(amazonGlobals.searchIndices) To UBound(amazonGlobals.searchIndices)
''
''                .AddItem searchIndices(i)
''            Next i
'            .List = GetPreferenceListAsRangeArray(ThisWorkbook, "LookupIndex")
'            If .List(0) = "_NO_LIST_" Then
'                .List(0) = ""
'                .Enabled = False
'                Me.Label4.Enabled = False
'            End If
'        End With
'
'        With .ImageSize
'            .AddItem "Small"
'            .AddItem "Medium"
'            .AddItem "Large"
'        End With
        
    End With
    
    Me.DefProdCondition.Text = amazonGlobals.g_DefProdCondition
    Me.DefProdTaxCode.Text = amazonGlobals.g_DefProdTaxCode
    Me.DefUpdateDelete.Text = amazonGlobals.g_DefUpdateDelete
'    Me.DefProductType.Text = amazonGlobals.g_DefProductType    ' removed 10/16/10 by atambe
    Me.AutoFillSKU = amazonGlobals.g_AutoFillSKU
    
' removed 10/16/10 by atambe
'    Select Case amazonGlobals.g_ImageSize
'        Case "SmallImage"
'            Me.ImageSize = "Small"
'        Case "MediumImage"
'            Me.ImageSize = "Medium"
'        Case "LargeImage"
'            Me.ImageSize = "Large"
'    End Select
End Sub


Private Sub UserForm_Initialize()
    ' added 10/16/10 by atambe
    TranslateFormControls Me

    ' added 08/15/10 by atambe
    If bChinaTemplate Then
        imgAmazonServices.Visible = False
        imgAmazonJoyo.Visible = True
    End If
End Sub
Attribute VB_Name = "frmProgressIntTemplates"
Attribute VB_Base = "0{A122DFA2-4B3D-4DAF-BCFA-A1F6FF69D0BD}{404E18D3-05EC-48FB-B587-925D8D76C721}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' Modified for CN Launch
' Abhijit Tambe, August 2010

Option Explicit

Private Sub cmdCancel_Click()
bCancelCreatingInternationalTemplates = True
End Sub


Private Sub UserForm_Initialize()
    ' added 10/16/10 by atambe
    TranslateFormControls Me
    
    ' added 08/15/10 by atambe
    If bChinaTemplate Then
        imgAmazonServices.Visible = False
        imgAmazonJoyo.Visible = True
    End If
End Sub
Attribute VB_Name = "frmSecurityPassword"
Attribute VB_Base = "0{04F14A99-6578-455F-892E-C6C22CD1044C}{874A135D-B7C4-41A5-8C2B-FEC792CD4480}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' Added for MWS integration
' Abhijit Tambe, July 2010


Private Sub CancelButton_Click()
    Unload Me
End Sub


Private Sub ResetSecurityPassword_Click()
    Dim choice As Integer
    choice = AmazonMsgBox(GetTranslatedString("reenter_mws_credentials"), vbOKCancel, GetTranslatedString("reset_sec_pass"))
    If choice = vbOK Then frmCredentials.Show
End Sub


Private Sub OKButton_Click()
    If Me.SecurityPasswordBox.Text = "" Then
        AmazonMsgBox GetTranslatedString("please_enter_sec_pass"), vbOKOnly, GetTranslatedString("sec_pass_required")
    Else
        If ValidateSecurityPassword(Me.SecurityPasswordBox.Text) Then
            SetSecurityPassword (Me.SecurityPasswordBox.Text)
            Unload Me
        End If
    End If
End Sub

Private Sub UserForm_Initialize()
    ' added 10/16/10 by atambe
    TranslateFormControls Me
    
    ' added 08/15/10 by atambe
    If bChinaTemplate Then
        imgAmazonServices.Visible = False
        imgAmazonJoyo.Visible = True
    End If
End Sub
Attribute VB_Name = "frmUpdatePleaseWait"
Attribute VB_Base = "0{DCCBA440-D36A-43FD-917C-972F920FC98B}{1F5BDA49-D207-4FBE-AB59-33F0A1AF5D68}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' Modified for CN Launch
' Abhijit Tambe, August 2010

Private Sub UserForm_Initialize()
    ' added 10/16/10 by atambe
    TranslateFormControls Me
    
    ' added 08/15/10 by atambe
    If bChinaTemplate Then
        imgAmazonServices.Visible = False
        imgAmazonJoyo.Visible = True
    End If
End Sub
Attribute VB_Name = "frmUploadFile"
Attribute VB_Base = "0{88D68D38-1B97-419A-906F-0DC0D2905A6C}{513F3E10-8E3E-4550-A443-6AC175D8DCE4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' Modified for MWS integration
' Abhijit Tambe, July 2010


Private Sub CancelButton_Click()
    Unload Me
End Sub


' added 07/20/10 by atambe
Private Sub UserForm_Activate()
    Dim strTempFile As String
    
    Dim fso As Object
    Set fso = CreateObject("Scripting.FileSystemObject")
    strTempFile = fso.GetSpecialFolder(2) & "\" & fso.GetTempName & ".txt" '2 = TemporaryFolder.

    UpdateStatus GetTranslatedString("saving_file")
        
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.DisplayAlerts = False

    Set shTemplate = GetTemplateWorksheet
    shTemplate.Select
    
    '6/18/2008 - find and copy only actual used range, not whole worksheet:
        '(UsedRange etc. and other conventional ways of determinging last occupied cells
        'are now broken due to .Formula = .Formula.)
    '==================================================================================
    Dim iHeaderRow As Long
    Dim iLastDataCol As Long
    Dim iLastDataRow As Long
    Dim rgFirstCol As Range
    Dim rgLastCol As Range
    Dim rgUpload As Range
    
    Const FIRST_UPLOAD_COL As Long = 1 'always upload starting with column A.
    Const FIRST_UPLOAD_ROW As Long = 1 'upload must include row 1, with the "templatetype=xxx" etc.
    
    iHeaderRow = GetHeaderRow(shTemplate)
    '        iLastDataRow = iHeaderRow 'init.
    '        Set rgLastCol = shTemplate.Rows(iHeaderRow).Find(What:="*", _
                                                    After:=shTemplate.Cells(iHeaderRow, 1), _
                                                    LookIn:=xlFormulas, _
                                                    SearchDirection:=xlPrevious)
    Set rgFirstCol = shTemplate.Cells(iHeaderRow, 1)
    Set rgLastCol = GetRightmostOccupiedCellInRowAsRange(shTemplate, iHeaderRow)
    iLastDataCol = rgLastCol.Column
    '        Do Until IsRangeEmpty(shTemplate.Range( _
    '                                    shTemplate.Cells(iLastDataRow, FIRST_UPLOAD_COL), _
    '                                    shTemplate.Cells(iLastDataRow, iLastDataCol)).EntireRow)
    '            iLastDataRow = iLastDataRow + 1
    '        Loop
    '        iLastDataRow = iLastDataRow - 1 'back up one row to last occupied row.
    iLastDataRow = GetRowNumberOfLastOccupiedRow(shTemplate.Range(rgFirstCol, rgLastCol))
    
    Set rgUpload = shTemplate.Range( _
                        shTemplate.Cells(FIRST_UPLOAD_ROW, FIRST_UPLOAD_COL), _
                        shTemplate.Cells(iLastDataRow, iLastDataCol))
    rgUpload.Select 'Cells.Select
    
    Selection.Copy
    Workbooks.Add
    Selection.PasteSpecial Paste:=xlValues
    Selection.PasteSpecial Paste:=xlFormats
    'Sheets("Sheet1").Name = strTempFile
    Range("A1").Select
    
    ' added 08/06/10 by atambe
    If GetLocalLanguageName = INT_TABLE_CHINESE_HEADER Then
        Call ActiveWorkbook.SaveAs(FileName:=strTempFile, FileFormat:=xlUnicodeText) 'Save as Unicode for CN: noted 08/06/10 by atambe
    Else
        Call ActiveWorkbook.SaveAs(FileName:=strTempFile, FileFormat:=xlText) 'In JP, saving as xlText saves as Shift-JIS.
    End If
    
    ActiveWorkbook.Close SaveChanges:=False
    Application.DisplayAlerts = True
    Application.EnableEvents = True
    Application.ScreenUpdating = True
            
    UpdateStatus GetTranslatedString("uploading_file")
    
    amazonGlobals.DoUploadFile strTempFile    ' added 07/20/10 by atambe
    
    Exit Sub
    
ErrorHandler:
    Beep
    ShowUploadFailedResults Err.Number, Err.Description   ' removed leading space characters: atambe 07/27/10
End Sub


Private Sub OKButton_Click()
    Unload Me
End Sub


Private Sub TryAgainButton_Click()
    Unload Me
    amazonGlobals.UploadFile
End Sub


' modified 07/26/10 by atambe
Public Sub ShowUploadFailedResults(Reason As String, Details As String)
    ' modified on 07/29/10 by atambe
    If Reason = "InvalidAccessKeyId" Or Reason = "AccessDenied" Or Reason = "MissingClientTokenId" Or Reason = "SignatureDoesNotMatch" Or Reason = "InvalidRequest" Then
        lblReason.Caption = GetTranslatedString("login_failure")
        lblDetails.Caption = GetTranslatedString("mws_rejected")
    Else
        lblReason.Caption = Reason
        lblDetails.Caption = Details
    End If
    
    ' added 07/26/10 by atambe
    CredentialsFrame.Visible = False
    UploadProgressLabel.Visible = False
    UploadFailedFrame.Visible = True
    UploadFailedLabel.Visible = True
    Me.height = 235.5
End Sub


' modified 07/26/10 by atambe
Public Sub ShowUploadResults(RefID As String, UpType As String, UpStatus As String, SubDate As String)
    ' added 07/26/10 by atambe
    CredentialsFrame.Visible = False
    UploadProgressLabel.Visible = False
    UploadSuccessFrame.Visible = True
    UploadSuccessLabel.Visible = True
    
    ReferenceID.Caption = RefID
    'UploadType.Caption = UpType
    UploadStatus.Caption = UpStatus
    SubmittedDate.Caption = SubDate
End Sub


Public Function UpdateStatus(Text As String)
    StatusValueLabel.Caption = Text
End Function


Private Sub CheckCurrentStatus_Click()
    Call BrowseTo(GetLocalURL(URL_HEADER_STATUS_CHECK))
End Sub

Private Sub UserForm_Initialize()
    ' added 10/16/10 by atambe
    TranslateFormControls Me

    ' added 08/15/10 by atambe
    If bChinaTemplate Then
        imgAmazonServices.Visible = False
        imgAmazonJoyo.Visible = True
    End If
End Sub
Attribute VB_Name = "frmValidatePleaseWait"
Attribute VB_Base = "0{C4B7F9A6-E435-411F-8BEB-B39D32CB5BD7}{E3CF356F-37D6-4A33-89B8-869F23F2D3A3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' Modified for CN Launch
' Abhijit Tambe, August 2010

Option Explicit

Private Sub cmdCancel_Click()
    bCancelValidation = True
End Sub

Private Sub UserForm_Activate()
    bCancelValidation = False
End Sub

Private Sub UserForm_Initialize()
    ' added 10/16/10 by atambe
    TranslateFormControls Me
    
    bCancelValidation = False
    
    ' added 08/15/10 by atambe
    If bChinaTemplate Then
        imgAmazonServices.Visible = False
        imgAmazonJoyo.Visible = True
    End If
End Sub

Attribute VB_Name = "modDropdowns"
'Greg Lovern
'PrecisionCalc.com

Option Explicit


Dim bScreenUpdating As Boolean
Dim dblLastMouseUpTime As Double
Public bDisplayDropdownOneRowUp As Boolean
Public shSizer As Worksheet

'for OnTime:
Dim cboTemplate As MSForms.ComboBox
Dim rgTarget As Range
Dim rgEnterComboBoxDataHere As Range
Dim rgList As Range

Public Const PRODUCT_TAX_CODE_DROPDOWN_LIST As String = "dropdown_list_product_tax_code"
Public Const CONDITION_DROPDOWN_LIST As String = "dropdown_list_condition"
Public Const UPDATE_DELETE_DROPDOWN_LIST As String = "dropdown_list_update_delete"

Public Const DROPDOWN_LIST_DEFINED_NAME_PREFIX As String = "dropdown_list_"
Public Const PREFERENCE_DEFINED_NAME_PREFIX As String = "preference_"

Public Const DROPDOWN_SIZER_WORKSHEET_NAME As String = "DropdownSizer"
Public Const DROPDOWN_LISTS_WORKSHEET_NAME As String = "Dropdown Lists"
Public Const PREFERENCES_WORKSHEET_NAME As String = "Preferences"

Public Const COMBOBOX_OFFER_CREATION_NAME As String = "cboOfferCreation"



Public Function DropdownsOnWorkbookActivate()
    Application.OnKey "{ESCAPE}", "OnKeyEscapeKey"
End Function



Public Function DropdownsOnWorkbookDeactivate()
    Application.OnKey "{ESCAPE}" 'returns escape key to default behavior.
End Function



Public Function DropdownsOnWorkbookClose()

    On Error Resume Next
    
'    GetTemplateWorksheet.cboOfferCreation.Visible = False
    Workbooks(GetTemplateWorksheet.Name).cboOfferCreation.Visible = False
    
    Application.OnKey "{ESCAPE}" 'returns escape key to default behavior.
    
End Function


Sub test_GetCombobox()
'    Debug.Print GetCombobox(GetTemplateWorksheet(), COMBOBOX_OFFER_CREATION_NAME).Name
End Sub



Function GetCombobox(target_sheet As Worksheet, combobox_name As String) As MSForms.ComboBox

Dim oShape As OLEObject
Dim bFound As Boolean

For Each oShape In target_sheet.OLEObjects
    If oShape.Name = combobox_name Then
        Set GetCombobox = oShape.Object
        Exit Function
    End If
Next oShape

Set GetCombobox = target_sheet.OLEObjects.Add(ClassType:="Forms.ComboBox.1").Object

GetCombobox.Name = combobox_name
GetCombobox.SpecialEffect = fmSpecialEffectEtched

End Function



Public Function DropdownsOnWorkbookOpen()

    Dim shSheet As Worksheet
    Dim bFound As Boolean
    Dim cboTemplate As MSForms.ComboBox

    Application.OnKey "{ESCAPE}", "OnKeyEscapeKey"
    
    Set cboTemplate = GetCombobox(GetTemplateWorksheet(), COMBOBOX_OFFER_CREATION_NAME)
    DoEvents
    
    cboTemplate.Visible = False
    
    'find/set dropdown sizer sheet:
    Set shSizer = GetDropdownSizerWorksheet(DROPDOWN_SIZER_WORKSHEET_NAME)

End Function




Public Function GetDropdownSizerWorksheet(sheet_name) As Worksheet

Dim bFound As Boolean
Dim shSheet As Worksheet
Dim shSizer As Worksheet

bFound = False 'init.
For Each shSheet In ThisWorkbook.Worksheets
    If shSheet.Name = sheet_name Then
        bFound = True
        Set shSizer = shSheet
        shSizer.Visible = False
        Exit For
    End If
Next shSheet
If Not bFound Then
    Set shSizer = ThisWorkbook.Worksheets.Add
    shSizer.Visible = False
    shSizer.Name = sheet_name
End If

Set GetDropdownSizerWorksheet = shSizer

End Function




Public Function OnKeyEscapeKey()

On Error GoTo generr

Application.EnableCancelKey = xlErrorHandler

'get out of cutcopymode:
If Application.CutCopyMode Then
    Application.CutCopyMode = False
    Exit Function
End If

bScreenUpdating = Application.ScreenUpdating

If ActiveSheet Is GetTemplateWorksheet() Then
    If Selection.Cells.Count = 1 Then
        Application.ScreenUpdating = False
        'change selection and back to trigger worksheet's SelectionChange event. (doesn't work if called directly.)
        ActiveCell.Offset(1, 0).Select
        ActiveCell.Offset(-1, 0).Select
        Application.ScreenUpdating = bScreenUpdating
    End If
End If


'send escape key in case it's needed for other purposes:
'(this does NOT cause an infinite loop with the OnKey on the escape key.)
'BUT this breaks toggling dropdowns' visiblity. So check whether any dropdowns'
'visible status changed, and do this only if none changed:
DoEvents
'SendKeys "{ESC}", True
DoEvents

Exit Function

generr:

If Err.Number = 18 Then
    'macro interrupted by escape key; user probably held ESC down and wants to proceed:
    Resume
End If

Application.ScreenUpdating = bScreenUpdating

End Function



Public Function DisplayComboBoxTimerPassArgs(combo_box As MSForms.ComboBox, dropdown_cell As Range, list_range As Range) As Boolean

    Application.OnTime Now + 0.000000001, "'DisplayComboBoxTimedPassArgs """ & dropdown_cell.Parent.Name & """, """ & list_range.Parent.Name & """, """ & combo_box.Name & """, """ & dropdown_cell.Address & """, """ & list_range.Address & """'"
    '0.000000001 = ~1/10,000 sec.
End Function

Public Function DisplayComboBoxTimerPublicArgs()

    Application.OnTime Now + 0.000000001, "DisplayComboBoxTimedPublicArgs"
    '0.000000001 = ~1/10,000 sec.
End Function

Public Function DisplayComboBoxTimedPublicArgs() As Boolean

'to get the dropdown to drop down after a keyboard event that selects another cell with a dropdown, right after
'a dropdown had been active, must return control to the user for a tiny fraction of a second (not enough
'time for the user to do anything). Otherwise, the dropdown only drops down if the previous selection did not
'have a dropdown.
'
'For example, if the user has Excel set to move down after Enter, and the user presses Enter repeatedly
'on a column with a dropdown, then only the first cell (that was clicked on, for example) drops down it's
'dropdown; all others do not drop down the dropdown.

    DisplayComboBox cboTemplate, rgTarget, rgList
End Function

Public Function DisplayComboBoxTimedPassArgs(template_worksheet_name As String, lists_worksheet_name As String, _
                                             combo_box_name As String, _
                                             dropdown_cell_address As String, list_range_address As String) As Boolean

'to get the dropdown to drop down after a keyboard event that selects another cell with a dropdown, right after
'a dropdown had been active, must return control to the user for a tiny fraction of a second (not enough
'time for the user to do anything). Otherwise, the dropdown only drops down if the previous selection did not
'have a dropdown.
'
'For example, if the user has Excel set to move down after Enter, and the user presses Enter repeatedly
'on a column with a dropdown, then only the first cell (that was clicked on, for example) drops down it's
'dropdown; all others do not drop down the dropdown.

    Dim shTemplate As Worksheet
    Dim shLists As Worksheet
    
    Set shTemplate = GetTemplateWorksheet
    Set shLists = ThisWorkbook.Worksheets(lists_worksheet_name)
    
    DisplayComboBox shTemplate.OLEObjects(combo_box_name).Object, _
                    shTemplate.Range(dropdown_cell_address), _
                    shLists.Range(list_range_address)
End Function




Public Function DisplayComboBox(combo_box As MSForms.ComboBox, dropdown_cell As Range, list_range As Range) As Boolean

'returns True on success.

'Dim shSizer As Worksheet 'this is now a public variable set in DropdownsOnWorkbookOpen.
Dim rgSizer As Range
Dim dblListItemRequiredWidth As Double
Dim bDisplayAlerts As Boolean

On Error GoTo generr

DisplayComboBox = False 'init.
bDisplayAlerts = Application.DisplayAlerts

'initialize combobox with the correct list:
combo_box.value = ""
combo_box.Clear

If list_range.Cells.Count = 1 Then
    combo_box.AddItem list_range.value
Else
    combo_box.List = list_range.value 'breaks if only one item to add.
End If

'check shSizer and re-initialize if necessary:
If shSizer Is Nothing Then
    Set shSizer = GetDropdownSizerWorksheet(DROPDOWN_SIZER_WORKSHEET_NAME)
End If

combo_box.Visible = False
DoEvents

'match cell's font name and font size:
combo_box.Font.Name = dropdown_cell.Font.Name
combo_box.Font.Size = dropdown_cell.Font.Size

'set combobox's width to widest localized list item, or to cell width, whichever is wider:
Set rgSizer = shSizer.Range(shSizer.Cells(1, 1), shSizer.Cells(UBound(combo_box.List) + 1, 1))
rgSizer.Font.Name = dropdown_cell.Font.Name
rgSizer.Font.Size = dropdown_cell.Font.Size
rgSizer = combo_box.List
rgSizer.EntireColumn.AutoFit
dblListItemRequiredWidth = rgSizer.width + 30
If dblListItemRequiredWidth > dropdown_cell.width Then
    combo_box.width = dblListItemRequiredWidth
Else
    combo_box.width = dropdown_cell.width
End If

Application.DisplayAlerts = False
rgSizer.ClearContents
Application.DisplayAlerts = bDisplayAlerts



combo_box.Top = dropdown_cell.Top + 1 ' - 2.25 '+ 1 to see top cell border.
combo_box.Left = dropdown_cell.Left + 1 '- 7.5 '+ 1 to see left cell border.
combo_box.height = dropdown_cell.height * 1.5 '* 1.5 '* 1.5  '- 1 to see bottom cell border.
'combo_box.width = dropdown_cell.width '+ 23 '+ 1 to keep it inside cell. 'Width is now be sized dynamically based on dropdown contents.
combo_box.Visible = True
DoEvents
combo_box.Activate

combo_box.DropDown '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

combo_box.SelText = dropdown_cell.value
combo_box.SelStart = 0
combo_box.SelLength = Len(dropdown_cell.value)

'combo_box.DropDown '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

DoEvents
Set rgEnterComboBoxDataHere = dropdown_cell

DisplayComboBox = True

Exit Function

generr:

Application.DisplayAlerts = bDisplayAlerts

If False Then
    Resume
End If


End Function



Public Function DropdownGotClicked(combo_control As MSForms.ComboBox)
    
    If CDbl(Now) - dblLastMouseUpTime < 0.0000001 Then '~1/100sec
        rgEnterComboBoxDataHere.Formula = combo_control.value
        combo_control.Visible = False
        rgEnterComboBoxDataHere.Activate 'because otherwise the cell does not appear selected.
    End If
End Function


Public Function DropdownGotMouseUpped(Optional combo_control As MSForms.ComboBox, _
                               Optional Button As Integer, Optional Shift As Integer, _
                               Optional x As Single, Optional y As Single)

    dblLastMouseUpTime = Now
End Function



Public Function DropdownGotTabbed(combo_control As MSForms.ComboBox, shift_keys As Integer)

    On Error Resume Next

    If Val(Application.Version) <= 10 Then
        AmazonMsgBox GetTranslatedString("excel_inst_tab_1") & _
               vbCrLf & vbCrLf & _
               GetTranslatedString("excel_inst_tab_2") & _
               vbCrLf & vbCrLf & _
               GetTranslatedString("excel_inst_tab_3") & GetExcelFriendlyVersion(Val(Application.Version)) & GetTranslatedString("excel_inst_tab_4"), _
               vbOKOnly, GetTranslatedString("tab_key_unavailable")
        Exit Function
    End If

    rgEnterComboBoxDataHere.Formula = combo_control.value
    combo_control.Visible = False

    If shift_keys = 0 Then
        rgEnterComboBoxDataHere.Offset(0, 1).Select
    ElseIf shift_keys = 1 Then
        rgEnterComboBoxDataHere.Offset(0, -1).Select
    End If
    
End Function



Public Function DropdownGotEnterKeyed(combo_control As MSForms.ComboBox, shift_keys As Integer)
    
    On Error Resume Next
    Dim iRowOffset As Long
    Dim iColOffset As Long
'    Dim bColumnHasDropdown As Boolean

    If Val(Application.Version) <= 10 Then
        AmazonMsgBox GetTranslatedString("excel_inst_enter_1") & _
               vbCrLf & vbCrLf & _
               GetTranslatedString("excel_inst_enter_2") & _
               vbCrLf & vbCrLf & _
               GetTranslatedString("excel_inst_enter_3") & GetExcelFriendlyVersion(Val(Application.Version)) & GetTranslatedString("excel_inst_enter_4"), _
               vbOKOnly, GetTranslatedString("enter_key_unavailable")
        Exit Function
    End If
    
    DoEvents

    iRowOffset = 0 'init.
    iColOffset = 0 'init.

    rgEnterComboBoxDataHere.Formula = combo_control.value
    
    combo_control.Visible = False

    If Application.MoveAfterReturn Then
        If Application.MoveAfterReturnDirection = xlDown Then
            iRowOffset = 1
        ElseIf Application.MoveAfterReturnDirection = xlToRight Then
            iColOffset = 1
        ElseIf Application.MoveAfterReturnDirection = xlUp Then
            iRowOffset = -1
        Else
            'Application.MoveAfterReturnDirection = xlToLeft:
            iColOffset = -1
        End If

        If shift_keys = 1 Then
            'turn 1 into -1, and turn -1 into 1, and leave 0 as 0:
            iRowOffset = iRowOffset * -1
            iColOffset = iColOffset * -1
        End If
    End If
    
    rgEnterComboBoxDataHere.Offset(iRowOffset, iColOffset).Select

    If combo_control.Visible Then
        combo_control.Activate
    End If

End Function



Public Function DropdownGotEscapeKeyed(combo_control As MSForms.ComboBox)
    
    On Error Resume Next

    If Val(Application.Version) <= 10 Then
        AmazonMsgBox GetTranslatedString("excel_inst_esc_1") & _
               vbCrLf & vbCrLf & _
               GetTranslatedString("excel_inst_esc_2") & _
               vbCrLf & vbCrLf & _
               GetTranslatedString("excel_inst_esc_3") & GetExcelFriendlyVersion(Val(Application.Version)) & GetTranslatedString("excel_inst_esc_4"), _
               vbOKOnly, GetTranslatedString("esc_key_unavailable")
        Exit Function
    End If

    combo_control.Visible = False
    rgEnterComboBoxDataHere.Activate 'because otherwise the cell does not appear selected.
End Function



Public Function DropdownGotRightArrowed(combo_control As MSForms.ComboBox)
    
    On Error Resume Next
    rgEnterComboBoxDataHere.Formula = combo_control.value
    combo_control.Visible = False
    rgEnterComboBoxDataHere.Offset(0, 1).Select
'    Selection.Activate
End Function



Public Function DropdownGotLeftArrowed(combo_control As MSForms.ComboBox)
    
    On Error Resume Next
    rgEnterComboBoxDataHere.Formula = combo_control.value
    combo_control.Visible = False
    rgEnterComboBoxDataHere.Offset(0, -1).Select
'    Selection.Activate
End Function


Public Function DropdownGotHomeKeyed(combo_control As MSForms.ComboBox, shift_keys As Integer)

    'shift_keys:
        '0 = none.
        '1 = Shift.
        '2 = Ctrl.
        '3 = Ctrl + Shift.
        '4 = Alt.
        '5 = Alt + Shift.
        '6 = Ctrl + Alt.
        '7 = Alt + Ctrl + Shift.
    
    On Error Resume Next
    rgEnterComboBoxDataHere.Formula = combo_control.value
    combo_control.Visible = False
    Select Case shift_keys
        Case 1
            'Shift:
            ActiveSheet.Range(ActiveSheet.Cells(rgEnterComboBoxDataHere.Row, 1), rgEnterComboBoxDataHere).Select
        Case 2
            'Ctrl:
            ActiveSheet.Range("A1").Select
        Case 3
            'Ctrl + Shift:
            ActiveSheet.Range(ActiveSheet.Range("A1"), rgEnterComboBoxDataHere).Select
        Case Else
            ActiveSheet.Cells(rgEnterComboBoxDataHere.Row, 1).Select
    End Select
'    Selection.Activate
End Function


Public Function DropdownGotEndKeyed(combo_control As MSForms.ComboBox, shift_keys As Integer)
    
    On Error Resume Next
    rgEnterComboBoxDataHere.Formula = combo_control.value
    combo_control.Visible = False
    ActiveSheet.Cells(rgEnterComboBoxDataHere.Row, ActiveSheet.Columns.Count).Select
'    Selection.Activate
End Function



Public Function DropdownGotKeyDowned(combo_control As MSForms.ComboBox, key_code As Integer, shift_keys As Integer)

    On Error Resume Next
    DoEvents
    Select Case key_code
        Case 27 'escape
            DropdownGotEscapeKeyed combo_control
        Case 39 'right arrow
            DropdownGotRightArrowed combo_control
        Case 40 'down arrow
            combo_control.DropDown
        Case 37 'left arrow
            DropdownGotLeftArrowed combo_control
        Case 9 'tab
            DropdownGotTabbed combo_control, shift_keys
        Case 13 'enter key
            DropdownGotEnterKeyed combo_control, shift_keys
        Case 36 'home key
            DropdownGotHomeKeyed combo_control, shift_keys
        Case 35 'end key
            DropdownGotEndKeyed combo_control, shift_keys
    End Select

End Function




Public Function SelectionChangeDropDown(ByVal Target As Range)

Dim bRet As Boolean
Dim iTemplateHeaderRow As Long


On Error GoTo generr

If Not IsOkayToShowDropdown(Target) Then
    Exit Function
End If

Set cboTemplate = GetCombobox(GetTemplateWorksheet(), COMBOBOX_OFFER_CREATION_NAME)
DoEvents

'make the dropdown invisible.
    'this takes Excel out of cutcopy mode. do not do if the dropdown is already invisible:
If cboTemplate.Visible Then cboTemplate.Visible = False

iTemplateHeaderRow = GetTemplateHeaderRow(Target.Parent)
Set rgList = GetDropdownListFromColumn(Target.Column, iTemplateHeaderRow, Target.Row)

If rgList Is Nothing Then
    'this column does not have a dropdown, so do not display combo box.
Else
    'display combobox:
'    bRet = DisplayComboBoxTimer(cboTemplate, Target, rgList)
    'make those variables public for use in OnTime: cboTemplate, Target, rgList
    Set rgTarget = Target 'rgTarget is public, used by OnTime
    bRet = DisplayComboBoxTimerPublicArgs()
End If


Exit Function

generr:

'Stop
If False Then
    Resume
End If

End Function



Public Function IsOkayToShowDropdown(selected_range As Range) As Boolean

IsOkayToShowDropdown = True 'init.
Dim iTemplateHeaderRow As Long

'don't show dropdown if in cutcopymode; instead assume user wants to paste:
If Not Application.CutCopyMode = False Then
    IsOkayToShowDropdown = False
End If

'don't show dropdowns on header row or above:
iTemplateHeaderRow = GetTemplateHeaderRow(selected_range.Parent)
If selected_range.Row <= iTemplateHeaderRow Then
    IsOkayToShowDropdown = False
End If

'show dropdown only if a single cell is selected:
If selected_range.Cells.Count > 1 Then
    IsOkayToShowDropdown = False
End If

'don't show dropdowns on protected cells such as in example rows:
If selected_range.Locked Then
    IsOkayToShowDropdown = False
End If

End Function



Public Function GetDropdownListFromColumn(dropdown_column As Long, header_row As Long, current_row As Long) As Range

'returns Nothing if column does not have a dropdown.

Dim strTemplateHeader As String
Dim strIntTableMfaInternalNameHeader As String
Dim shIntData As Worksheet
Dim iIntTableLocalLanguageCol As Long
Dim iMfaInternalNameCol As Long
Dim strListDefinedName As String
Dim shTemplate As Worksheet

On Error GoTo generr

Set shTemplate = GetTemplateWorksheet()

strTemplateHeader = shTemplate.Cells(header_row, dropdown_column).value
Set shIntData = ThisWorkbook.Worksheets(INT_TABLE_WORKSHEET_NAME)

iMfaInternalNameCol = GetIntTableMfaInternalNameColumn(shIntData)
iIntTableLocalLanguageCol = GetIntTableLocalLanguageColumn(shIntData)

strIntTableMfaInternalNameHeader = GetMfaInternalNameColumnHeaderFromLocalLanguageColumnHeader( _
                                   strTemplateHeader, shIntData, _
                                   iIntTableLocalLanguageCol, iMfaInternalNameCol)

strListDefinedName = DROPDOWN_LIST_DEFINED_NAME_PREFIX & Replace(strIntTableMfaInternalNameHeader, "-", "_")

Set GetDropdownListFromColumn = GetDropdownListRangeFromDefinedName(strListDefinedName, current_row)

'if that range has no list items, return Nothing:
'If Application.WorksheetFunction.CountA(GetDropdownListFromColumn) = 0 Then
If IsRangeEmpty(GetDropdownListFromColumn) Then
    Set GetDropdownListFromColumn = Nothing
End If


Exit Function

generr:

If False Then
    Resume
End If

End Function




Public Function GetIntTableMfaInternalNameColumn(int_table_sheet As Worksheet) As Long
    Dim rgFind As Range
    
    Set rgFind = int_table_sheet.Rows(INT_TABLE_HEADER_ROW).Find(INT_TABLE_MFA_INTERNAL_NAME_HEADER)
    GetIntTableMfaInternalNameColumn = rgFind.Column
End Function


Public Function GetIntTableLocalLanguageColumn(int_table_sheet As Worksheet) As Long
    Dim strIntTableLocalLanguageHeader As String
    Dim rgFind As Range
    
    strIntTableLocalLanguageHeader = GetLocalLanguageName
    Set rgFind = int_table_sheet.Rows(INT_TABLE_HEADER_ROW).Find(strIntTableLocalLanguageHeader)
    GetIntTableLocalLanguageColumn = rgFind.Column
End Function


Public Function GetMfaInternalNameColumnHeaderFromLocalLanguageColumnHeader( _
                    template_header_string As String, _
                    Optional int_table_sheet As Worksheet, _
                    Optional int_table_local_language_col As Long, _
                    Optional int_table_mfa_internal_name_col As Long) As String
    
    'returns empty string ("") if not found.
    
    Dim rgFind As Range
    Dim iRow As Long
    
    On Error GoTo generr

    If int_table_sheet Is Nothing Then
        Set int_table_sheet = ThisWorkbook.Worksheets(INT_TABLE_WORKSHEET_NAME)
    End If

    If int_table_local_language_col = 0 Then
        int_table_local_language_col = GetIntTableLocalLanguageColumn(int_table_sheet)
    End If

    If int_table_mfa_internal_name_col = 0 Then
        int_table_mfa_internal_name_col = GetIntTableMfaInternalNameColumn(int_table_sheet)
    End If
    

    Set rgFind = int_table_sheet.Columns(int_table_local_language_col).Find(What:=template_header_string, LookAt:=xlWhole)
    
    If rgFind Is Nothing Then
        'check mfa internal names too:
        Set rgFind = int_table_sheet.Columns(int_table_mfa_internal_name_col).Find(template_header_string)
    End If
    
    If rgFind Is Nothing Then
        'not found.
        GetMfaInternalNameColumnHeaderFromLocalLanguageColumnHeader = ""
        Exit Function
    End If
    
    iRow = rgFind.Row
    
    GetMfaInternalNameColumnHeaderFromLocalLanguageColumnHeader = _
        int_table_sheet.Cells(iRow, int_table_mfa_internal_name_col).value
    
    Exit Function
    
generr:
    
    If False Then
        Resume
    End If

End Function


Public Function GetDropdownListRangeFromDefinedName(defined_name As String, current_row As Long) As Range

'returns Nothing if defined name does not exist.

Dim nmName As Name
Dim bFound As Boolean
Dim shDropdowns As Worksheet
Dim strColumnDependencyMfaInternalHeader As String
Dim iCol As Long
Dim bTestPass As Boolean
Dim bDependencyColumnFound As Boolean
Dim strDefinedNameSuffix As String
Dim strDefinedNameSuffixSeparator As String
Dim strDefinedNameNew As String
Dim rgCandidateList As Range

On Error GoTo generr

Set GetDropdownListRangeFromDefinedName = Nothing 'init.
bFound = False 'init.

For Each nmName In ThisWorkbook.Names
    If nmName.Name = defined_name Then
        bFound = True
        Exit For
    End If
Next nmName

If Not bFound Then
    Exit Function
End If

Set rgCandidateList = GetRangeFromDefinedName(defined_name)
        
If rgCandidateList Is Nothing Then
    'list not found; return Nothing:
    Exit Function
End If

Set shDropdowns = rgCandidateList.Parent
iCol = rgCandidateList.Column

bTestPass = False 'init.
strDefinedNameSuffix = "" 'init.

Do

    strColumnDependencyMfaInternalHeader = shDropdowns.Cells( _
                                           LOCAL_DROPDOWN_LISTS_SHEET_COLUMN_DEPENDENCY_COLUMN_HEADER_ROW, _
                                           iCol).value
    
    If strColumnDependencyMfaInternalHeader = "" Then
        bTestPass = True
    Else
        'test:
        Dim shTemplate As Worksheet
        Dim shIntTable As Worksheet
        Dim strColumnDependencyLocalHeader As String
        Dim iColumnDependencyLocalHeaderCol As Long
        Dim iIntTableMfaInternalNameCol As Long
        Dim iIntTableLocalNameCol As Long
        Dim iTemplateHeaderRow As Long
        Dim strColumnDependencyTest As String
        Dim strColumnDependencyItem As String

        strColumnDependencyTest = shDropdowns.Cells(LOCAL_DROPDOWN_LISTS_SHEET_COLUMN_DEPENDENCY_TEST_ROW, iCol).value
        Set shTemplate = GetTemplateWorksheet()
        Set shIntTable = GetInternationalTableWorksheet()
        iIntTableMfaInternalNameCol = GetIntTableMfaInternalNameColumn(shIntTable)
        iIntTableLocalNameCol = GetIntTableLocalLanguageColumn(shIntTable)
        iTemplateHeaderRow = GetHeaderRow(shTemplate)
        strColumnDependencyLocalHeader = _
            GetLocalColumnHeaderFromMfaInternalName( _
                strColumnDependencyMfaInternalHeader, shIntTable, shTemplate, _
                iIntTableMfaInternalNameCol, iIntTableLocalNameCol, iTemplateHeaderRow)
        
        If strColumnDependencyLocalHeader = "" Then
            bDependencyColumnFound = False
        Else
            bDependencyColumnFound = True
        End If
        
        If bDependencyColumnFound Then
            iColumnDependencyLocalHeaderCol = shTemplate.Rows(iTemplateHeaderRow).Find( _
                                              What:=strColumnDependencyLocalHeader, LookAt:=xlWhole).Column
            strColumnDependencyItem = shTemplate.Cells(current_row, iColumnDependencyLocalHeaderCol).value
    
            bTestPass = RegexTest(strColumnDependencyTest, strColumnDependencyItem)
        Else
            bTestPass = False
        End If
    End If
    
    If bTestPass Then
        Set GetDropdownListRangeFromDefinedName = rgCandidateList
        Exit Function
    Else
        strDefinedNameSuffix = IncrementDefinedNameSuffix(strDefinedNameSuffix)
        strDefinedNameSuffixSeparator = GetDefinedNameSuffixSeparatorFromSuffix(strDefinedNameSuffix)
        strDefinedNameNew = defined_name & strDefinedNameSuffixSeparator & strDefinedNameSuffix
        Set rgCandidateList = GetRangeFromDefinedName(strDefinedNameNew)
        
        If rgCandidateList Is Nothing Then
            'list not found; return Nothing:
            Exit Function
        End If
        
        iCol = rgCandidateList.Column

    End If

Loop Until bTestPass


Exit Function

generr:

If False Then
    Resume
End If

End Function



Public Function DockDropdown()

On Error Resume Next

Set cboTemplate = GetCombobox(GetTemplateWorksheet(), COMBOBOX_OFFER_CREATION_NAME)

cboTemplate.width = 1
cboTemplate.height = 1
cboTemplate.Top = 1
cboTemplate.Left = 1


End Function


'Public Sub OnTimeTest()
'
'bDisplayDropdownOneRowUp = False
'Selection.Offset(-1, 0).Select
'
'End Sub
Attribute VB_Name = "modImportFile"
'Greg Lovern
'PrecisionCalc.com

Option Explicit


Public wbImport As Workbook
Public bMatchHeadersDlgClickedAdd As Boolean
Public bMatchHeadersDlgClickedRemove As Boolean
Public bMatchHeadersDlgClickedOK As Boolean
Public vArrayImportHeaders() As Variant
Public vArrayTemplateHeaders() As Variant
Public iArrayMatchedHeaders() As Long 'index = Template column #, items = Import column #.
Public vArrayNonMatchedImportHeaders() As Variant
Public vArrayNonMatchedTemplateHeaders() As Variant
Public vArrayListboxMatchedHeaders() As Variant
Public bCancelImport As Boolean
Public bImportWorkbookIsFromTextFile As Boolean


Public Sub ImportFile()

    Dim shImport As Worksheet
    Dim strImportWorkbookName As String
    Dim strImportWorksheetName As String
    Dim shTemplate As Worksheet
    Dim iTemplateHeaderRow As Long
    Dim iImportHeaderRow As Long
    Dim rgImportHeaders As Range
    Dim rgTemplateHeaders As Range

    Dim iArrayIndex As Long
    Dim iArrayImportIndex As Long
    Dim iArrayTemplateIndex As Long
    Dim iImportUbound As Long
    Dim iImportLbound As Long
    Dim iTemplateUbound As Long
    Dim iTemplateLbound As Long
    Dim vImportHeader As Variant
    Dim vTemplateHeader As Variant
    Dim strHeader As String
    Dim iImportCol As Long
    Dim iTemplateCol As Long
    Dim bRet As Long
    Dim iRet As Long
    Dim bFound As Boolean
    Dim strNotImportedList As String
    Dim iMatchedCol As Long
    Dim iImportFirstRow As Long
    Dim iTemplateFirstRow As Long
    Dim iImportLastRow As Long
    Dim iTemplateLastRow As Long
    Dim rgColImport As Range
    Dim rgDest As Range
    Dim vRange As Variant 'range set to a variant.
    Dim strSaveAsPath As String
    Dim strErrText As String
    Dim rgCheckForData As Range
    Dim rgCheckCell As Range

    On Error GoTo generr
    
    Application.EnableEvents = True
    
    strErrText = GetTranslatedString("getting_import_workbook")
    bCancelImport = False

    Set shTemplate = GetTemplateWorksheet()
    
    'get the workbook to import:
    Set wbImport = GetImportWorkbook
    If wbImport Is Nothing Then Exit Sub
    
    'need to determine what worksheet to use in the import workbook:
    strErrText = GetTranslatedString("getting_import_worksheet")
    Set shImport = GetImportWorksheet(wbImport)
    If shImport Is Nothing Then Exit Sub
    
    'get arrays of column headers:
    iTemplateHeaderRow = GetTemplateHeaderRow(shTemplate)
    iImportHeaderRow = GetTemplateHeaderRow(shImport)
    If iImportHeaderRow < 0 Then
        AmazonMsgBox GetTranslatedString("no_data_found"), vbOKOnly, GetTranslatedString("import_error")
        wbImport.Close SaveChanges:=False
        Exit Sub
    End If

    ' added 10/18/10 by atambe
    If iTemplateHeaderRow > 2 Then
        vArrayTemplateHeaders = GetHeaderArray(shTemplate, iTemplateHeaderRow - 1)
    Else
        vArrayTemplateHeaders = GetHeaderArray(shTemplate, iTemplateHeaderRow)
    End If
    
    ' added 10/18/10 by atambe
    If iImportHeaderRow > 2 Then
        vArrayImportHeaders = GetHeaderArray(shImport, iImportHeaderRow - 1)
    Else
        vArrayImportHeaders = GetHeaderArray(shImport, iImportHeaderRow)
    End If
    
    iTemplateLbound = LBound(vArrayTemplateHeaders)
    iTemplateUbound = UBound(vArrayTemplateHeaders)
    iImportLbound = LBound(vArrayImportHeaders)
    iImportUbound = UBound(vArrayImportHeaders)
    ReDim iArrayMatchedHeaders(iTemplateLbound To iTemplateUbound)
    
    'Create match array:
    strErrText = GetTranslatedString("creating_match_array")
    For iArrayTemplateIndex = iTemplateLbound To iTemplateUbound
        vTemplateHeader = Replace(UCase(vArrayTemplateHeaders(iArrayTemplateIndex)), " ", "")
        bFound = False 'init.
        
        For iArrayImportIndex = iImportLbound To iImportUbound
            vImportHeader = Replace(UCase(vArrayImportHeaders(iArrayImportIndex)), " ", "")
            
            If vImportHeader = vTemplateHeader Then
                iArrayMatchedHeaders(iArrayTemplateIndex) = iArrayImportIndex 'because index of iArrayMatchedHeaders = Template column #.
                bFound = True
                Exit For
            End If
        Next iArrayImportIndex
        
        If Not bFound Then
            'did not find a match for this template header among import headers.
            iArrayMatchedHeaders(iArrayTemplateIndex) = -1
        End If
    Next iArrayTemplateIndex
    
    
    'populate frmMatchHeaders' Template and Import listboxes:
    strErrText = GetTranslatedString("populating_match_headers")
    bRet = PopulateMatchHeadersFormListboxes
    

    'let user choose additional matches:
    Dim bClickAddValidated As Boolean
    strErrText = GetTranslatedString("letting_user_choose")
    'check for lack of non-matched template columns to match up; don't display if there are no template columns left to match:
    bFound = False
    For iMatchedCol = iTemplateLbound To iTemplateUbound
        If iArrayMatchedHeaders(iMatchedCol) = -1 Then
            bFound = True
            Exit For
        End If
    Next iMatchedCol
    If bFound Then
        'there is at least one non-matched template column, so display dialog:
        Do
            'check for both listboxes having selections if user clicked match columns:
            bClickAddValidated = False
            Do Until bClickAddValidated
                bMatchHeadersDlgClickedAdd = False 'init.
                bMatchHeadersDlgClickedRemove = False 'init.
                bMatchHeadersDlgClickedOK = False 'init.
                frmMatchHeaders.Show
                If bCancelImport Then Exit Sub
                If bMatchHeadersDlgClickedAdd Then
                    If frmMatchHeaders.lstImport.ListIndex < 0 Or frmMatchHeaders.lstTemplate.ListIndex < 0 Then
                        AmazonMsgBox GetTranslatedString("select_column_header"), vbOKOnly, GetTranslatedString("column_headers_not_selected")
                    Else
                        bClickAddValidated = True
                    End If
                Else
                    bClickAddValidated = True 'didn't click match, so okay to proceed.
                End If
            Loop
            
        Loop Until bMatchHeadersDlgClickedOK
    End If
    
    
    'check for no columns to import:
    strErrText = GetTranslatedString("checking_no_columns")
    bFound = False 'init
    For iArrayTemplateIndex = iTemplateLbound To iTemplateUbound
        iMatchedCol = iArrayMatchedHeaders(iArrayTemplateIndex)
        If iMatchedCol <> -1 Then
            bFound = True
            Exit For
        End If
    Next iArrayTemplateIndex
    If Not bFound Then
        AmazonMsgBox GetTranslatedString("no_columns_to_import_long"), vbOKOnly, GetTranslatedString("no_columns_to_import")
        wbImport.Close SaveChanges:=False
        Exit Sub
    End If
    
    
    'import:
    strErrText = GetTranslatedString("importing_columns")
    iImportFirstRow = iImportHeaderRow + 1
    
    
    
    
    'find next unoccupied row after last usedrange row:
'    iTemplateFirstRow = shTemplate.UsedRange.Rows.Count + 1
''    Do While WorksheetFunction.CountA(shTemplate.Cells(iTemplateFirstRow - 1, 1).EntireRow) = 0
'    Do While IsRangeEmpty(shTemplate.Cells(iTemplateFirstRow - 1, 1).EntireRow)
'        iTemplateFirstRow = iTemplateFirstRow - 1
'    Loop
    iTemplateFirstRow = GetRowNumberOfLastOccupiedRow(shTemplate.Rows(1).EntireRow) + 1
    
    'look for skipped blank rows to report:
    If iTemplateFirstRow > iTemplateHeaderRow + 1 Then
        Dim bSkippedOccupiedRow
        bSkippedOccupiedRow = True
    End If
    
    
    
    
    
    
    For iArrayTemplateIndex = iTemplateLbound To iTemplateUbound
        iMatchedCol = iArrayMatchedHeaders(iArrayTemplateIndex)
        If iMatchedCol = -1 Then
            'this template column does not have a matching column in the import file,
            'so do not import anything into this template column.
        Else
            'enter the data from iMatchedCol in the import file:
'            iImportLastRow = shImport.Cells(shImport.Rows.Count, iMatchedCol).End(xlUp).Row
            If bImportWorkbookIsFromTextFile Then
                iImportLastRow = shImport.Cells(shImport.Rows.Count, iMatchedCol).End(xlUp).Row
            Else
                'import is from excel workbook. May have been saved out from template affected by .Formula = .Formula excel bug, so don't use End method etc.
'                iImportLastRow = shImport.Rows.Count 'init.
'                Do While IsRangeEmpty(Application.ActiveSheet.Cells(iImportLastRow, 1).EntireRow)
'                    iImportLastRow = iImportLastRow - 1
'                Loop
                iImportLastRow = GetRowNumberOfLastOccupiedRow(ActiveSheet.Rows(1).EntireRow)
            End If

            If iImportLastRow > iImportHeaderRow Then
                iTemplateLastRow = iImportLastRow + (iTemplateFirstRow - iImportFirstRow)
                Set rgColImport = shImport.Range(shImport.Cells(iImportFirstRow, iMatchedCol), shImport.Cells(iImportLastRow, iMatchedCol))
                Set rgDest = shTemplate.Range(shTemplate.Cells(iTemplateFirstRow, iArrayTemplateIndex), shTemplate.Cells(iTemplateLastRow, iArrayTemplateIndex))
                vRange = rgColImport
                rgDest = vRange
                rgDest.Formula = rgDest.Formula 'to prevent conversion of 13-digit prod-ids to to exponential notation when source had numeric number formatting.
            Else
                'this column contains only the header; ignore this column.
            End If
        End If
    Next iArrayTemplateIndex


    'close import file:
    
    strErrText = GetTranslatedString("closing_import_file")
    strImportWorksheetName = shImport.Name
    strImportWorkbookName = wbImport.Name
    wbImport.Close SaveChanges:=False
    
    If bSkippedOccupiedRow Then
        AmazonMsgBox GetTranslatedString("done_importing_1") & strImportWorksheetName & GetTranslatedString("done_importing_2") & strImportWorkbookName & GetTranslatedString("done_importing_3") & vbNewLine & vbNewLine & GetTranslatedString("done_importing_4") & iTemplateFirstRow & GetTranslatedString("done_importing_5") & CStr(iTemplateFirstRow - 1) & GetTranslatedString("done_importing_6"), vbOKOnly, GetTranslatedString("import_complete")
    Else
        'data was imported in next row below headers:
        AmazonMsgBox GetTranslatedString("done_importing_1") & strImportWorksheetName & GetTranslatedString("done_importing_2") & strImportWorkbookName & GetTranslatedString("done_importing_3") & vbNewLine & vbNewLine & GetTranslatedString("done_importing_4") & iTemplateFirstRow & GetTranslatedString("done_importing_6"), vbOKOnly, GetTranslatedString("import_complete")
    End If



    Exit Sub
generr:
    'strErrText
    
    If False Then
        Resume
    End If
    
    AmazonMsgBox GetTranslatedString("template_error_1") & "#" & Err.Number & GetTranslatedString("template_error_2") & strErrText & GetTranslatedString("template_error_3") & _
            vbNewLine & vbNewLine & _
            Err.Description, vbOKOnly, GetTranslatedString("template_error_short")

End Sub


' modified 10/18/10 by atambe
Public Function GetTemplateHeaderRow(template_sheet As Worksheet) As Long

    On Error GoTo generr

    'returns 2 if cell A1 contains "templatetype", otherwise returns 1.

    If InStr(UCase(template_sheet.Range("A1").value), "TEMPLATETYPE") > 0 Then
        '2010-08-04, for compatibility with localized header rows,
        'with English header rows in the next row down, usually row 3.
        'Must find the ENGLISH header row, NOT the localized header row:
        Dim strTemplateTypeVersionString As String
        Dim iTemplateTypeVersionFirstDigit As Long
        strTemplateTypeVersionString = Trim(template_sheet.Range("B1").value) 'note, removes any spaces.
        If InStr(UCase(strTemplateTypeVersionString), "VERSION=") > 0 Then
            'There is a templatetype version string in the expected place:
            iTemplateTypeVersionFirstDigit = CLng(Mid(strTemplateTypeVersionString, 9, 1))
            If iTemplateTypeVersionFirstDigit > 1 Then
                'this is templatetype version 2 or higher, which has a row for localized header
                'even if it is not used because this is an English template:
                GetTemplateHeaderRow = 3
            Else
                'this is templatetype version 1, which does NOT have a row for localized headers:
                GetTemplateHeaderRow = 2
            End If
        Else
            'templatetype version string is missing or in an unexpected place. Try row 2:
            GetTemplateHeaderRow = 2
        End If
    Else
'        GetTemplateHeaderRow = 1
        'check for unoccupied first row, for importing, where template_sheet is the import sheet:
        If template_sheet.Rows(1).Find(What:="*") Is Nothing Then
            Call ResetFindParametersToDefaults
            'first row is blank. Indicate error by returning -1:
            
            Dim iCheckRow As Long
            Dim iLastRow As Long
            iLastRow = template_sheet.Rows.Count
            For iCheckRow = 2 To iLastRow
                If template_sheet.Rows(iCheckRow).Find(What:="*") Is Nothing Then
                    'iCheckRow is unoccupied; move on to check next iRow.
                Else
                    'here's the top occupied row:
                    GetTemplateHeaderRow = iCheckRow
                    Exit Function
                End If
                Call ResetFindParametersToDefaults
            Next iCheckRow
            
            'all rows searched, no occupied rows found:
            GetTemplateHeaderRow = -1
        Else
            'first row was occupied:
            GetTemplateHeaderRow = 1
        End If
        Call ResetFindParametersToDefaults
    End If
    
    Exit Function
    
generr:
    'error looking for header row. Try row 2:
    GetTemplateHeaderRow = 2
    Exit Function

End Function





Function GetImportWorkbook() As Workbook

On Error GoTo generr

    Dim vArrayFieldInfo As Variant 'must be a variant containing an array.
    Dim vArrayColInfo As Variant 'must be a variant containing an array.
    Dim iColCount As Long
    Dim iCol As Long
    Dim strImportPath As String
    Dim bDelimCharIsTab As Boolean
    Dim bDelimCharIsComma As Boolean
    Dim strPathLast4Chars As String
    Dim iRet As Long
    Dim iTextFileCodepage As Long
    Dim iWindowsCodepage As Long
    
    
    iWindowsCodepage = GetWindowsCodepage 'this will be the default codepage.
    Unload frmBrowseImportFile 'init.
    frmBrowseImportFile.lblCodepage = iWindowsCodepage
    frmBrowseImportFile.Show
    
    
    If frmBrowseImportFile.bCancel Then
        'user clicked Cancel:
        CancelImport
        Set GetImportWorkbook = Nothing
        Exit Function
    End If

    'get data from frmBrowseImportFile and unload:
    strImportPath = frmBrowseImportFile.txtBrowseImportFile
    bDelimCharIsTab = frmBrowseImportFile.bDelimCharIsTab
    bDelimCharIsComma = frmBrowseImportFile.bDelimCharIsComma
    iTextFileCodepage = frmBrowseImportFile.lblCodepage
    Unload frmBrowseImportFile
    
    
    If bDelimCharIsTab Or bDelimCharIsComma Then
        'open as text.
        bImportWorkbookIsFromTextFile = True
        If Val(Application.Version) >= 12 Then
            'Excel 2007 or later:
            iColCount = 16384
        Else
            'Excel 2003 or earlier:
            '(16384 works in Excel 2003 & 2002, breaks in 2000 at around 6000. Not sure if the limit is the number of elements or the size of the array.
            iColCount = 256
        End If
      
        ReDim vArrayFieldInfo(0 To iColCount - 1)
        For iCol = 1 To iColCount
            vArrayColInfo = Array(iCol, xlTextFormat)
            vArrayFieldInfo(iCol - 1) = vArrayColInfo
        Next iCol
    End If
    
    If bDelimCharIsTab Then
        Workbooks.OpenText FileName:=strImportPath, DataType:=xlDelimited, TextQualifier:=xlDoubleQuote, _
            Tab:=True, Semicolon:=False, Comma:=False, Space:=False, Other:=False, _
            FieldInfo:=vArrayFieldInfo, Origin:=iTextFileCodepage
        Set GetImportWorkbook = Workbooks(Workbooks.Count)
    ElseIf bDelimCharIsComma Then

        'to do this right, will need to use fso to change filename extension to anything other
        'than ".csv". OR, use fso to copy the file to a new name with extension not ".csv".
        'if filename extension is ".csv", then long numbers get imported as scientific notation.
        iRet = AmazonMsgBox(GetTranslatedString("import_csv_errors_1") & _
               vbNewLine & vbNewLine & _
               GetTranslatedString("import_csv_errors_2") & _
               vbNewLine & vbNewLine & _
                GetTranslatedString("import_csv_errors_3"), _
               vbOKCancel, GetTranslatedString("import_csv"))
        If iRet = vbCancel Then
            CancelImport
            Set GetImportWorkbook = Nothing
            Exit Function
        End If
        Workbooks.OpenText FileName:=strImportPath, DataType:=xlDelimited, TextQualifier:=xlDoubleQuote, _
            Tab:=False, Semicolon:=False, Comma:=True, Space:=False, Other:=False, _
            FieldInfo:=vArrayFieldInfo, Origin:=iTextFileCodepage
        Set GetImportWorkbook = Workbooks(Workbooks.Count)

    Else
        'extension is not ".txt" and not ".csv", so open as standard workbook:
        bImportWorkbookIsFromTextFile = False
        Set GetImportWorkbook = Workbooks.Open(strImportPath)
    End If

Exit Function
generr:
    If False Then
        Resume
    End If

End Function


Function GetTextFileCodepage(default_codepage As Long) As Long
'returns -1 on error.

On Error GoTo generr

'ask user which codepage to use:

Dim strArrayLanguages() As String
Dim vArrayCodepages() As Variant
Dim strDisplayChoices() As String
Dim shIntTable As Worksheet
Dim rgIntTableHeaderRow As Range
Dim rgFind As Range
Dim iDataCategoryCol As Long
Dim iLanguageCol As Long
Dim iCodePageRow As Long
Dim vArrayItemCodepage As Variant 'in case of bad entry in data table.
Dim vDefaultCodepage As Long
Dim strDefaultDisplayChoice As String
Dim iLbound As Long, iUbound As Long
Dim iArrayIndex As Long
Dim strArrayItemLanguageName As String
Dim strArrayItemDisplayChoice As String
Dim strLocalLanguageName As String
Dim iUserPickedCodepageIndex As Long
Dim bNoListItemChosen As Boolean
Dim bUserClickedCancel As Boolean
Dim strEnterCodepage As String

Set shIntTable = GetInternationalTableWorksheet
strArrayLanguages = GetLanguageList(shIntTable)
iLbound = LBound(strArrayLanguages)
iUbound = UBound(strArrayLanguages)
ReDim vArrayCodepages(iLbound To iUbound) As Variant
ReDim strDisplayChoices(iLbound To iUbound) As String

strLocalLanguageName = GetLocalLanguageName
iDataCategoryCol = GetIntTableDataCategoryColumn(shIntTable)
iCodePageRow = GetTableCategorySingleRow(shIntTable, DATA_CATEGORY_CODEPAGE, iDataCategoryCol)
Set rgIntTableHeaderRow = shIntTable.Rows(INT_TABLE_HEADER_ROW)

For iArrayIndex = iLbound To iUbound
    'GetIntTableDataCategoryColumn
    'GetIntTableAnyLanguageColumn
    strArrayItemLanguageName = strArrayLanguages(iArrayIndex)
    'get array item language col.
    Set rgFind = rgIntTableHeaderRow.Find(strArrayItemLanguageName)
    iLanguageCol = rgFind.Column
    'get codepage
    vArrayItemCodepage = shIntTable.Cells(iCodePageRow, iLanguageCol).value
    vArrayCodepages(iArrayIndex) = vArrayItemCodepage
    strArrayItemDisplayChoice = strArrayItemLanguageName & " (Codepage " & vArrayItemCodepage & ")"
    strDisplayChoices(iArrayIndex) = strArrayItemDisplayChoice
    If strArrayItemLanguageName = strLocalLanguageName Then
        vDefaultCodepage = vArrayItemCodepage
        strDefaultDisplayChoice = strArrayItemDisplayChoice
    End If
Next iArrayIndex

frmPickCodepage.lstPickCodepage.List = strDisplayChoices
bNoListItemChosen = False
frmPickCodepage.Show

'ListIndex is zero-based; must add one to use with the one-based arrays:
iUserPickedCodepageIndex = frmPickCodepage.lstPickCodepage.ListIndex + 1
If iUserPickedCodepageIndex = 0 Then
    'frmPickCodepage.lstPickCodepage.ListIndex was -1, indicating no item chosen:
    bNoListItemChosen = True
End If
strEnterCodepage = frmPickCodepage.txtEnterCodepage
bUserClickedCancel = frmPickCodepage.bCancel
Unload frmPickCodepage

'check for user clicked Cancel:
If bUserClickedCancel Then
    GetTextFileCodepage = default_codepage
'check for codepage entered in textbox:
ElseIf strEnterCodepage <> "" Then
    GetTextFileCodepage = strEnterCodepage
Else
    'cancel not clicked and textbox is blank, so check the chosen list item:
    If bNoListItemChosen Then
        'user did not choose a list item and did not enter a codepage in the textbox, so use default:
        GetTextFileCodepage = default_codepage
    Else
        'return the list item chosen by the user:
        GetTextFileCodepage = vArrayCodepages(iUserPickedCodepageIndex)
    End If
End If



Exit Function
generr:
    If False Then
        Resume
    End If
    
    GetTextFileCodepage = -1
End Function


Function GetImportWorksheet(import_work_book As Workbook) As Worksheet

    Dim iFound As Long
    Dim shSheet As Worksheet
    
    'first, check whether there is only one worksheet, in which case use that worksheet:
    If import_work_book.Worksheets.Count = 1 Then
        Set GetImportWorksheet = import_work_book.Worksheets(1)
        Exit Function
    End If

    'if more than one worksheet, check whether any worksheet name is a subset of workbook name:
    iFound = 0 'init.
    For Each shSheet In import_work_book.Worksheets
        If InStr(Replace(import_work_book.Name, " ", ""), Replace(shSheet.Name, " ", "")) > 0 Then
            iFound = iFound + 1
            Set GetImportWorksheet = shSheet
        End If
    Next shSheet
    
    If iFound = 1 Then
        'only one worksheet name is a subset of workbook name, so use that worksheet.
        Exit Function
    End If
    
    'either did not find a match, or found more than one, so have user pick from list:
    frmPickWorksheet.lstPickImport.Clear
    For Each shSheet In import_work_book.Worksheets
        frmPickWorksheet.lstPickImport.AddItem shSheet.Name
    Next shSheet
    frmPickWorksheet.Show
    If bCancelImport Then
        Set GetImportWorksheet = Nothing
    Else
        Set GetImportWorksheet = import_work_book.Worksheets(frmPickWorksheet.lstPickImport.value)
    End If
    

End Function



Public Function GetHeaderRange(work_sheet As Worksheet, header_row As Long) As Range

    Dim rgFind As Range
    Dim iFirstHeaderCol As Long
    Dim iLastHeaderCol As Long

    iFirstHeaderCol = 1 'not sure if this will always be 1.

'    Set rgFind = work_sheet.Cells(header_row, work_sheet.Columns.Count).End(xlToLeft)
    Set rgFind = GetRightmostOccupiedCellInRowAsRange(work_sheet, header_row)
    
    iLastHeaderCol = rgFind.Column
    Set GetHeaderRange = work_sheet.Range(work_sheet.Cells(header_row, iFirstHeaderCol), work_sheet.Cells(header_row, iLastHeaderCol))

End Function



Function GetHeaderArray(work_sheet As Worksheet, header_row As Long) As Variant()

    Dim iUbound As Long
    Dim vArrayTmp() As Variant
    Dim iArrayIndex As Long
    Dim rgHeaders As Range
    
    Set rgHeaders = GetHeaderRange(work_sheet, header_row)

    iUbound = rgHeaders.Cells.Count
    ReDim vArrayTmp(1 To iUbound)
    For iArrayIndex = 1 To iUbound
        vArrayTmp(iArrayIndex) = rgHeaders(iArrayIndex)
    Next iArrayIndex
    
    GetHeaderArray = vArrayTmp

End Function


Function AddNonMatchedHeaderToArray(array_headers() As Variant, array_index As Long, _
         non_matched_ubound As Long, array_non_matched_headers() As Variant) As Long

'modifies array_non_matched_headers and non_matched_ubound.

    Dim strHeader As String

    strHeader = array_headers(array_index)
    non_matched_ubound = non_matched_ubound + 1
    ReDim Preserve array_non_matched_headers(1 To 2, 0 To non_matched_ubound)
    array_non_matched_headers(1, non_matched_ubound) = strHeader
    array_non_matched_headers(2, non_matched_ubound) = array_index

    AddNonMatchedHeaderToArray = non_matched_ubound

End Function


Function AddMatchedPairsToListboxArray(array_import_headers() As Variant, array_template_headers() As Variant, _
         array_matched_headers() As Long, array_matched_headers_index As Long, _
         matched_headers_ubound As Long, array_matched_headers_listbox() As Variant) As Long

    Dim iImportIndex As Long
    Dim iTemplateIndex As Long
    Dim strImportItem As String
    Dim strTemplateItem As String
    Dim iListRow As Long
    
    Const LISTBOX_IMPORT_HEADER_COLUMN As Long = 0
    Const LISTBOX_TEMPLATE_HEADER_COLUMN As Long = 1
    Const LISTBOX_IMPORT_ARRAYINDEX_COLUMN As Long = 2
    Const LISTBOX_TEMPLATE_ARRAYINDEX_COLUMN As Long = 3
        
    iImportIndex = array_matched_headers(array_matched_headers_index)
    iTemplateIndex = array_matched_headers_index
    strImportItem = array_import_headers(iImportIndex)
    strTemplateItem = array_template_headers(iTemplateIndex)

    matched_headers_ubound = matched_headers_ubound + 1
    ReDim Preserve vArrayListboxMatchedHeaders(0 To 3, 0 To matched_headers_ubound)
    vArrayListboxMatchedHeaders(LISTBOX_IMPORT_HEADER_COLUMN, matched_headers_ubound) = strImportItem
    vArrayListboxMatchedHeaders(LISTBOX_TEMPLATE_HEADER_COLUMN, matched_headers_ubound) = strTemplateItem
    
    vArrayListboxMatchedHeaders(LISTBOX_IMPORT_ARRAYINDEX_COLUMN, matched_headers_ubound) = iImportIndex
    vArrayListboxMatchedHeaders(LISTBOX_TEMPLATE_ARRAYINDEX_COLUMN, matched_headers_ubound) = iTemplateIndex
    
    AddMatchedPairsToListboxArray = matched_headers_ubound

End Function



Function PopulateMatchHeadersFormListboxes() As Boolean

'returns True on success.

    On Error GoTo generr

    Dim iImportNonMatchedUbound As Long
    Dim iTemplateNonMatchedUbound As Long
    Dim iMatchedHeadersUbound As Long
    Dim iArrayTemplateIndex As Long
    Dim iArrayImportIndex As Long
    Dim iRowIndex As Long
    Dim iColumnIndex As Long
    Dim bFound As Boolean
    Dim bRet As Boolean
    Dim lstMatches As MSForms.ListBox
    Dim bSortByAlpha As Boolean
    
    Dim iImportUbound As Long
    Dim iImportLbound As Long
    Dim iTemplateUbound As Long
    Dim iTemplateLbound As Long

    Const LISTBOX_IMPORT_HEADER_COLUMN As Long = 0
    Const LISTBOX_TEMPLATE_HEADER_COLUMN As Long = 1
    Const LISTBOX_IMPORT_ARRAYINDEX_COLUMN As Long = 2
    Const LISTBOX_TEMPLATE_ARRAYINDEX_COLUMN As Long = 3
    
    iTemplateLbound = LBound(vArrayTemplateHeaders)
    iTemplateUbound = UBound(vArrayTemplateHeaders)
    iImportLbound = LBound(vArrayImportHeaders)
    iImportUbound = UBound(vArrayImportHeaders)

    ReDim vArrayNonMatchedImportHeaders(1 To 2, 0 To 0) 'init.
    ReDim vArrayNonMatchedTemplateHeaders(1 To 2, 0 To 0) 'init.
    ReDim vArrayListboxMatchedHeaders(0 To 3, 0 To 0) 'init.
    iImportNonMatchedUbound = -1 'init.
    iTemplateNonMatchedUbound = -1 'init.
    iMatchedHeadersUbound = -1 'init.
    
    'init listboxes:
    frmMatchHeaders.lstTemplate.Clear
    frmMatchHeaders.lstImport.Clear
    frmMatchHeaders.lstMatchedPairs.Clear
    

    'populate frmMatchHeaders Template and Matched Pairs listboxes:
    For iArrayTemplateIndex = iTemplateLbound To iTemplateUbound
        If iArrayMatchedHeaders(iArrayTemplateIndex) = -1 Then
        
            'add item to vArrayNonMatchedTemplateHeaders:
            iTemplateNonMatchedUbound = AddNonMatchedHeaderToArray(vArrayTemplateHeaders, iArrayTemplateIndex, _
                                        iTemplateNonMatchedUbound, vArrayNonMatchedTemplateHeaders)
        Else
        
            'add row of item to vArrayListboxMatchedHeaders:
            iMatchedHeadersUbound = AddMatchedPairsToListboxArray(vArrayImportHeaders, vArrayTemplateHeaders, _
                                  iArrayMatchedHeaders, iArrayTemplateIndex, _
                                  iMatchedHeadersUbound, vArrayListboxMatchedHeaders)
            
        End If
    Next iArrayTemplateIndex
    
    'populate frmMatchHeaders Import listbox:
    For iArrayImportIndex = iImportLbound To iImportUbound
        bFound = False 'init.
        
        For iArrayTemplateIndex = iTemplateLbound To iTemplateUbound
            If iArrayMatchedHeaders(iArrayTemplateIndex) = iArrayImportIndex Then
                bFound = True
                Exit For
            End If
        Next iArrayTemplateIndex
        
        If Not bFound Then
            'add item to vArrayNonMatchedImportHeaders:
            iImportNonMatchedUbound = AddNonMatchedHeaderToArray(vArrayImportHeaders, iArrayImportIndex, _
                                        iImportNonMatchedUbound, vArrayNonMatchedImportHeaders)
        End If
            
    Next iArrayImportIndex
    
    
    'check for alpha:
    If frmMatchHeaders.optSortAlpha Then
        bSortByAlpha = True
    Else
        bSortByAlpha = False
    End If
    
    
    'fill template listbox with vArrayNonMatchedTemplateHeaders:
    bRet = FillSingleColumnListboxFromArray(vArrayNonMatchedTemplateHeaders, frmMatchHeaders.lstTemplate, bSortByAlpha)
   
    
    'fill import listbox with vArrayNonMatchedImportHeaders:
    bRet = FillSingleColumnListboxFromArray(vArrayNonMatchedImportHeaders, frmMatchHeaders.lstImport, bSortByAlpha)
   
    
    'fill matched pairs listbox with vArrayListboxMatchedHeaders:
    bRet = FillMultiColumnListboxFromArray(vArrayListboxMatchedHeaders, frmMatchHeaders.lstMatchedPairs, bSortByAlpha)
    

    PopulateMatchHeadersFormListboxes = True
    
    Exit Function
    
generr:
    
   
    If False Then
        Resume
    End If

End Function



Function FillSingleColumnListboxFromArray(list_array() As Variant, list_box As MSForms.ListBox, _
                                          sort_alpha As Boolean) As Boolean

'returns True on success.
    
    Dim iUbound As Long
    Dim iLbound As Long
    Dim iLastCol As Long
    Dim iArrayIndex As Long
    
    On Error GoTo generr
    
    iUbound = UBound(list_array, 2)
    iLbound = LBound(list_array, 2)
    iLastCol = iUbound + 1 'because the array is 0-based.
    
    If sort_alpha Then
        'use shIcons:
        Dim rgSort As Range
        Dim vSortOld As Variant 'must be declared as a Variant.
        Dim vSortNew As Variant 'must be declared as a Variant.
        Set rgSort = shIcons.Range(shIcons.Cells(1, 1), shIcons.Cells(2, iLastCol))
        vSortOld = rgSort
        rgSort = list_array
        rgSort.Sort Key1:=shIcons.Cells(1, 1), Order1:=xlAscending, header:=xlNo, _
                    Orientation:=xlLeftToRight, SortMethod:=xlPinYin
        vSortNew = rgSort
        list_array = rgSort
        rgSort = vSortOld 'return worksheet to it's original state.
        
        'the array is now 1-based, so reset lbound and ubound:
        iUbound = UBound(list_array, 2)
        iLbound = LBound(list_array, 2)
    End If
    
    For iArrayIndex = iLbound To iUbound
        list_box.AddItem list_array(1, iArrayIndex)
    Next iArrayIndex
    
    FillSingleColumnListboxFromArray = True

    Exit Function
    
generr:
    
   
    If False Then
        Resume
    End If

End Function



Function FillMultiColumnListboxFromArray(list_array() As Variant, list_box As MSForms.ListBox, _
                                          sort_alpha As Boolean) As Boolean

'returns True on success.
    
    Dim iUbound As Long
    Dim iLastCol As Long
    Dim iArrayIndex As Long
    Dim iRowIndex As Long
    Dim iColumnIndex As Long
    Dim iArrayRow As Long
    Dim iArrayCol As Long
    Dim iAddOneIfSorted As Long
    
    iUbound = UBound(list_array, 2)
    iLastCol = iUbound + 1 'because the array is 0-based.

    If sort_alpha Then
        'use shIcons:
        Dim rgSort As Range
        Dim vSortOld As Variant 'must be declared as a Variant.
        Dim vSortNew As Variant 'must be declared as a Variant.
        Set rgSort = shIcons.Range(shIcons.Cells(1, 1), shIcons.Cells(4, iLastCol))
        vSortOld = rgSort
        rgSort = list_array
        rgSort.Sort Key1:=shIcons.Cells(1, 1), Order1:=xlAscending, header:=xlNo, _
                    Orientation:=xlLeftToRight, SortMethod:=xlPinYin
        vSortNew = rgSort
        list_array = rgSort
        rgSort = vSortOld 'return worksheet to it's original state.
        iAddOneIfSorted = 1 'because sorting changes it from 0,0 based to 1,1 based, while the listbox is still 0,0  based.
    Else
        iAddOneIfSorted = 0
    End If

    For iRowIndex = 0 To iUbound
        list_box.AddItem
        For iColumnIndex = 0 To 3
            list_box.List(iRowIndex, iColumnIndex) = list_array(iColumnIndex + iAddOneIfSorted, iRowIndex + iAddOneIfSorted)
        Next iColumnIndex
    Next iRowIndex
    
    FillMultiColumnListboxFromArray = True

End Function



Sub CancelImport()
    
    On Error Resume Next
    DoEvents 'to allow frmPickWorksheet to hide.
    AmazonMsgBox GetTranslatedString("file_import_cancelled"), vbOKOnly, GetTranslatedString("import_cancelled")
    wbImport.Close SaveChanges:=False
    
    bCancelImport = True

End Sub

Attribute VB_Name = "modInternational"
'Greg Lovern
'PrecisionCalc.com

' Modified for MWS integration
' Abhijit Tambe, July 2010

Option Explicit


Dim strMsg As String
Dim dblProgress As Double
Dim strProgressPercent As String
Public bCancelCreatingInternationalTemplates As Boolean
Public bUpdateNow As Boolean
Public strLocalLanguageName As String
Public iDataValidationBlankLineStartPositions() As Long
Public bNotFoundInIntWorksheetsTable As Boolean

Public Const INTERNAL_TEMPLATE_NAME_DEFINED_NAME As String = "Internal_Template_Name"

Public Const INT_TABLE_WORKSHEET_NAME As String = "International Data"
Public Const INT_TABLE_HEADER_ROW As Long = 1
Public Const INT_TABLE_DATA_CATEGORY_HEADER As String = "Data Category"
Public Const INT_TABLE_REFERENCE_HEADER As String = "Reference"

Public Const INT_TABLE_NUMBER_FORMAT_HEADER As String = "Number Format"
Public Const INT_TABLE_MASTER_NAME_HEADER As String = "Master Name"
Public Const INT_TABLE_MFA_INTERNAL_NAME_HEADER As String = "MFA Internal Name"
Public Const INT_TABLE_TEMPLATE_DEPENDENCY_TEST_HEADER As String = "Template Dependency Test"
Public Const INT_TABLE_ENGLISH_USA_HEADER As String = "English USA"
Public Const INT_TABLE_JAPANESE_HEADER As String = "Japanese"
Public Const INT_TABLE_CHINESE_HEADER As String = "Chinese"     ' added 08/06/10 by atambe
Public Const INT_JAPANESE_CODEPAGE As Long = 932

Public Const DATA_CATEGORY_CODEPAGE As String = "Codepage"
Public Const DATA_CATEGORY_COLUMN_HEADERS As String = "Column Headers"
Public Const DATA_CATEGORY_URL As String = "url"
Public Const DATA_CATEGORY_TOOLBAR_BUTTON_CAPTIONS As String = "Toolbar Button Captions"
Public Const DATA_CATEGORY_TOOLBAR_BUTTON_TOOLTIPS As String = "Toolbar Button Tooltips"
Public Const DATA_CATEGORY_DATA_VALIDATION As String = "Data Validation"
Public Const DATA_CATEGORY_DROPDOWN_LIST_ITEMS As String = "Dropdown List Items"

Public Const FULL_INT_TABLE_URL_DEFINED_NAME As String = "Full_Table_URL"
Public Const LOCAL_INT_TABLE_URL_DEFINED_NAME As String = "Local_Table_URL"
Public Const LAST_UPDATE_DEFINED_NAME As String = "Last_Update"

Public Const FULL_DROPDOWN_LISTS_TABLE_URL_DEFINED_NAME As String = "Full_Dropdown_Lists_Table_URL"
Public Const DROPDOWN_LISTS_TABLE_WORKSHEET_NAME As String = "Int'l Dropdown Lists Table"

Public Const PREFERENCES_TABLE_URL_DEFINED_NAME As String = "Preferences_URL"
Public Const PREFERENCES_TABLE_WORKSHEET_NAME As String = "Preferences Table"

Public Const TEMPLATE_LANGUAGE_DEFINED_NAME As String = "template_language"
Public Const TEMPLATE_SECONDARY_LANGUAGE_DEFINED_NAME As String = "template_language_2"

Public Const SHOW_CREATE_TEMPLATES_TOOLBAR_DEFINED_NAME As String = "Show_Create_Templates_Toolbar"
Public Const AMAZON_CREATE_TEMPLATES_COMMANDBAR_NAME As String = "Amazon - Create International Feed Templates"
'Public Const AMAZON_UPLOAD_MANAGER_COMMANDBAR_NAME As String = "Amazon Upload Manager" 'replaced by TOOLBAR_NAME_DEFINED_NAME.
Public Const IS_SIMPLIFIED_OFFER_FEED_WORKBOOK_DEFINED_NAME As String = "IsSimplifiedOfferFeedWorkbook"
Public Const AUTO_UPDATE_DEFINED_NAME As String = "Auto_Update"
Public Const UPDATE_INTERVAL_DAYS_DEFINED_NAME As String = "Update_Interval_Days"

Public Const LOCAL_DROPDOWN_LISTS_SHEET_COLUMN_DEPENDENCY_COLUMN_HEADER_ROW As Long = 1
Public Const LOCAL_DROPDOWN_LISTS_SHEET_COLUMN_DEPENDENCY_TEST_ROW As Long = 2
Public Const LOCAL_DROPDOWN_LISTS_SHEET_HEADER_ROW As Long = 3
Public Const LOCAL_DROPDOWN_LISTS_SHEET_FIRST_DATA_ROW As Long = 4


Public Const TOOLBAR_NAME_DEFINED_NAME As String = "Toolbar_Name"
Public Const TOOLBAR_LOGO_CAPTION_DEFINED_NAME As String = "Toolbar_Logo_Caption"
Public Const TOOLBAR_BUTTON_CAPTION_BULK_LOOKUP_DEFINED_NAME As String = "Toolbar_Button_Caption_Bulk_Lookup"
Public Const TOOLBAR_BUTTON_CAPTION_TURN_ON_PRODUCT_LOOKUP_DEFINED_NAME As String = "Toolbar_Button_Caption_Turn_On_Product_Lookup"
Public Const TOOLBAR_BUTTON_CAPTION_TURN_OFF_PRODUCT_LOOKUP_DEFINED_NAME As String = "Toolbar_Button_Caption_Turn_Off_Product_Lookup"
Public Const TOOLBAR_BUTTON_CAPTION_PREFERENCES_DEFINED_NAME As String = "Toolbar_Button_Caption_Preferences"
Public Const TOOLBAR_BUTTON_CAPTION_VALIDATE_DEFINED_NAME As String = "Toolbar_Button_Caption_Validate"
Public Const TOOLBAR_BUTTON_CAPTION_UPLOAD_DEFINED_NAME As String = "Toolbar_Button_Caption_Upload"
Public Const TOOLBAR_BUTTON_CAPTION_CREDENTIALS_DEFINED_NAME As String = "Toolbar_Button_Caption_Credentials"   ' added by atambe 07/29/10
Public Const TOOLBAR_BUTTON_CAPTION_IMPORT_DEFINED_NAME As String = "Toolbar_Button_Caption_Import"
Public Const TOOLBAR_BUTTON_CAPTION_UPDATE_DEFINED_NAME As String = "Toolbar_Button_Caption_Update"

Public Const TOOLBAR_LOGO_TOOLTIP_DEFINED_NAME As String = "Toolbar_Logo_Tooltip"
Public Const TOOLBAR_BUTTON_TOOLTIP_BULK_LOOKUP_DEFINED_NAME As String = "Toolbar_Button_Tooltip_Bulk_Lookup"
Public Const TOOLBAR_BUTTON_TOOLTIP_TURN_ON_PRODUCT_LOOKUP_DEFINED_NAME As String = "Toolbar_Button_Tooltip_Turn_On_Product_Lookup"
Public Const TOOLBAR_BUTTON_TOOLTIP_TURN_OFF_PRODUCT_LOOKUP_DEFINED_NAME As String = "Toolbar_Button_Tooltip_Turn_Off_Product_Lookup"
Public Const TOOLBAR_BUTTON_TOOLTIP_PREFERENCES_DEFINED_NAME As String = "Toolbar_Button_Tooltip_Preferences"
Public Const TOOLBAR_BUTTON_TOOLTIP_VALIDATE_DEFINED_NAME As String = "Toolbar_Button_Tooltip_Validate"
Public Const TOOLBAR_BUTTON_TOOLTIP_UPLOAD_DEFINED_NAME As String = "Toolbar_Button_Tooltip_Upload"
Public Const TOOLBAR_BUTTON_TOOLTIP_CREDENTIALS_DEFINED_NAME As String = "Toolbar_Button_Tooltip_Credentials"   ' added by atambe 07/29/10
Public Const TOOLBAR_BUTTON_TOOLTIP_IMPORT_DEFINED_NAME As String = "Toolbar_Button_Tooltip_Import"
Public Const TOOLBAR_BUTTON_TOOLTIP_UPDATE_DEFINED_NAME As String = "Toolbar_Button_Tooltip_Update"


Public Const LOCAL_TEMPLATES_FOLDER_DEFINED_NAME As String = "Local_Templates_Folder_Name"


Sub MakeInternationalTemplates()

Dim bRet As Boolean
Dim bEnableEventsStatus As Boolean

bEnableEventsStatus = Application.EnableEvents
Application.EnableEvents = False
bRet = MakeTemplates(INT_TABLE_MASTER_NAME_HEADER)

If Not bRet Then Exit Sub

If Not bCancelCreatingInternationalTemplates Then
    AmazonMsgBox strMsg, vbOKOnly, GetTranslatedString("lang_templates_saved")
End If

Application.EnableEvents = bEnableEventsStatus

End Sub




Public Sub GetLatestInternationalizedData()

Dim shIntTable As Worksheet
Dim shValidationTable As Worksheet
Dim shDropdownTable As Worksheet
Dim shPreferencesTable As Worksheet
Dim bRet As Boolean
Dim strTemplateLanguage As String
Dim shUserActiveSheet As Worksheet
Dim bScreenUpdatingSetting As Boolean
Dim bDisplayAlertsStatus As Boolean

On Error GoTo generr

Application.EnableEvents = True

bUpdateNow = False 'init.
frmAutoIntUpdateInterval.Show
Unload frmAutoIntUpdateInterval
DoEvents

If Not bUpdateNow Then
    DoEvents
    AmazonMsgBox GetTranslatedString("template_update_cancelled"), vbOKOnly, GetTranslatedString("template_update")
    Exit Sub
End If

bScreenUpdatingSetting = Application.ScreenUpdating
Application.ScreenUpdating = False
bDisplayAlertsStatus = Application.DisplayAlerts
Application.DisplayAlerts = False

Set shUserActiveSheet = ActiveSheet

frmUpdatePleaseWait.Show vbModeless
DoEvents


'download web tables:
'(see also modInternational.MakeTemplates)
'======================================================================================================
frmUpdatePleaseWait.lblUpdateCurrentAction = GetTranslatedString("importing_intl_table")
'frmUpdatePleaseWait.prgUpdate.value = 5
frmUpdatePleaseWait.lblProgressBar.width = 0.05 * frmUpdatePleaseWait.frameProgressBar.width
frmUpdatePleaseWait.Repaint
DoEvents
Set shIntTable = DownloadInternationalTableFromWeb(LOCAL_INT_TABLE_URL_DEFINED_NAME, _
                      INT_TABLE_WORKSHEET_NAME, "international data")

frmUpdatePleaseWait.lblUpdateCurrentAction = GetTranslatedString("importing_dropdown_lists")
'frmUpdatePleaseWait.prgUpdate.value = 10
frmUpdatePleaseWait.lblProgressBar.width = 0.1 * frmUpdatePleaseWait.frameProgressBar.width
frmUpdatePleaseWait.Repaint
DoEvents
Set shDropdownTable = DownloadInternationalTableFromWeb(FULL_DROPDOWN_LISTS_TABLE_URL_DEFINED_NAME, _
                      DROPDOWN_LISTS_TABLE_WORKSHEET_NAME, "dropdown lists")

frmUpdatePleaseWait.lblUpdateCurrentAction = GetTranslatedString("importing_preferences")
'frmUpdatePleaseWait.prgUpdate.value = 10
frmUpdatePleaseWait.lblProgressBar.width = 0.1 * frmUpdatePleaseWait.frameProgressBar.width
frmUpdatePleaseWait.Repaint
DoEvents
Set shPreferencesTable = DownloadInternationalTableFromWeb(PREFERENCES_TABLE_URL_DEFINED_NAME, _
                      PREFERENCES_TABLE_WORKSHEET_NAME, "preferences")

frmUpdatePleaseWait.lblUpdateCurrentAction = GetTranslatedString("importing_validation_table")
'frmUpdatePleaseWait.prgUpdate.value = 15
frmUpdatePleaseWait.lblProgressBar.width = 0.15 * frmUpdatePleaseWait.frameProgressBar.width
frmUpdatePleaseWait.Repaint
DoEvents
Set shValidationTable = DownloadDataValidationTableFromWeb(FULL_DATA_VALIDATION_TABLE_URL_DEFINED_NAME)
'======================================================================================================



strTemplateLanguage = GetLocalLanguageName
frmUpdatePleaseWait.lblUpdateCurrentAction = GetTranslatedString("integrating_dropdown_lists")
'frmUpdatePleaseWait.prgUpdate.value = 20
frmUpdatePleaseWait.lblProgressBar.width = 0.2 * frmUpdatePleaseWait.frameProgressBar.width
frmUpdatePleaseWait.Repaint
DoEvents
bRet = ApplyDropDownLists(ThisWorkbook, strTemplateLanguage)
bRet = ApplyDropDownLists(ThisWorkbook, strTemplateLanguage, True) 'Preferences
frmUpdatePleaseWait.lblUpdateCurrentAction = GetTranslatedString("finishing_up")
frmUpdatePleaseWait.Repaint
DoEvents

'delete data sheets that are no longer needed:
'shIntTable.Delete 'this is used for determining dropdown lists.
shDropdownTable.Delete
shPreferencesTable.Delete
'ThisWorkbook.Save 'no, it gets saved below.

'can't reset local column headers. Getting new or changed column headers will require downloading new localized template made by new general template.


'reset toolbar button captions and tooltips:
Call ApplyLocalToolbarButtonCaptions(strTemplateLanguage, shIntTable)
Call ApplyLocalToolbarButtonTooltips(strTemplateLanguage, shIntTable)
DeleteAmazonListingToolbar
SetUpNewToolBar


'reactivate sheet that user originally had active, if it still exists and is visible:
On Error GoTo AttemptActivateOriginalSheet
shUserActiveSheet.Activate
On Error GoTo generr

If bRet Then
    ThisWorkbook.Save
    Unload frmUpdatePleaseWait
    DoEvents
End If

Application.ScreenUpdating = bScreenUpdatingSetting
Application.DisplayAlerts = bDisplayAlertsStatus

If bRet Then
    AmazonMsgBox GetTranslatedString("template_updated"), vbOKOnly, GetTranslatedString("template_update")
Else
    AmazonMsgBox GetTranslatedString("template_update_not_successful"), vbOKOnly, GetTranslatedString("template_update")
End If

Exit Sub

generr:

Application.ScreenUpdating = bScreenUpdatingSetting
Application.DisplayAlerts = bDisplayAlertsStatus

If False Then
    Resume
End If

Exit Sub

AttemptActivateOriginalSheet:

Resume Next

End Sub




Sub CheckForAutoUpdate()

Dim vAutoUpdate As Variant
Dim vUpdateInterval As Variant
Dim vLastUpdate As Variant

vAutoUpdate = ThisWorkbook.Names(AUTO_UPDATE_DEFINED_NAME).RefersToRange.value

If vAutoUpdate Then
    vUpdateInterval = ThisWorkbook.Names(UPDATE_INTERVAL_DAYS_DEFINED_NAME).RefersToRange.value
    vLastUpdate = ThisWorkbook.Names(LAST_UPDATE_DEFINED_NAME).RefersToRange.value
    
    If vLastUpdate + vUpdateInterval < Now Then
        GetLatestInternationalizedData
    End If
    
End If







End Sub



Public Sub AddToolbarToCreateInternationalTemplates()

Dim cbCreateTemplates As CommandBar
Dim cbcCreateTemplates As CommandBarControl
Dim bRet As Boolean

If ThisWorkbookShowsTheCreateInternationalTemplatesToolbar Then

    bRet = DeleteToolbar(AMAZON_CREATE_TEMPLATES_COMMANDBAR_NAME)
    
    Set cbCreateTemplates = Application.CommandBars.Add(AMAZON_CREATE_TEMPLATES_COMMANDBAR_NAME, msoBarTop, , True)
    
    cbCreateTemplates.Visible = True
    
    Set cbcCreateTemplates = cbCreateTemplates.Controls.Add(msoControlButton)
    cbcCreateTemplates.BeginGroup = True
    cbcCreateTemplates.Caption = AMAZON_CREATE_TEMPLATES_COMMANDBAR_NAME
    cbcCreateTemplates.FaceId = 303
    cbcCreateTemplates.OnAction = "MakeInternationalTemplates"
    cbcCreateTemplates.Style = msoButtonIconAndCaption

End If

End Sub



Public Sub DeleteToolbarToCreateInternationalTemplates()

If ThisWorkbookShowsTheCreateInternationalTemplatesToolbar Then
    DeleteToolbar AMAZON_CREATE_TEMPLATES_COMMANDBAR_NAME
End If

End Sub



Public Function ToolbarToCreateInternationalTemplatesExists() As Boolean

Dim cbCommandBar As CommandBar
Dim bFound As Boolean

bFound = False
For Each cbCommandBar In Application.CommandBars
    If cbCommandBar.Name = AMAZON_CREATE_TEMPLATES_COMMANDBAR_NAME Then
        bFound = True
        Exit For
    End If
Next cbCommandBar

If bFound Then
    ToolbarToCreateInternationalTemplatesExists = True
Else
    ToolbarToCreateInternationalTemplatesExists = False
End If

End Function



Public Function ToolbarAmazonFeedManagerExists() As Boolean

Dim cbCommandBar As CommandBar
Dim bFound As Boolean

bFound = False
For Each cbCommandBar In Application.CommandBars
    If cbCommandBar.Name = GetAmazonToolbarName Then
        bFound = True
        Exit For
    End If
Next cbCommandBar

If bFound Then
    ToolbarAmazonFeedManagerExists = True
Else
    ToolbarAmazonFeedManagerExists = False
End If

End Function


Public Function ThisWorkbookShowsTheCreateInternationalTemplatesToolbar() As Boolean

If ThisWorkbook.Names(SHOW_CREATE_TEMPLATES_TOOLBAR_DEFINED_NAME).RefersToRange.value Then
    ThisWorkbookShowsTheCreateInternationalTemplatesToolbar = True
Else
    ThisWorkbookShowsTheCreateInternationalTemplatesToolbar = False
End If

End Function


Public Function OtherOpenWorkbookNeedsAmazonFeedManagerToolbar() As Boolean

'checks whether another workbook is open that needs that toolbar. If not,
'it deletes the toolbar; otherwise, it does nothing.

'returns true if toolbar was deleted, false if not.

Dim wbWorkbook As Workbook
Dim nmName As Name
Dim bFound As Boolean

bFound = False 'init.
For Each wbWorkbook In Workbooks
    If Not wbWorkbook Is ThisWorkbook Then
        For Each nmName In wbWorkbook.Names
            If nmName.Name = IS_SIMPLIFIED_OFFER_FEED_WORKBOOK_DEFINED_NAME Then
                bFound = True
                Exit For
            End If
        Next nmName
    End If
    If bFound Then Exit For
Next wbWorkbook

If bFound Then
    OtherOpenWorkbookNeedsAmazonFeedManagerToolbar = True
Else
    OtherOpenWorkbookNeedsAmazonFeedManagerToolbar = False
End If

End Function



Public Function DeleteToolbar(toolbar_name As String)

Dim bRet As Boolean

Do
    bRet = DeleteCommandBar(toolbar_name)
Loop Until Not bRet

DeleteToolbar = True

End Function



Function DeleteCommandBar(command_bar_name As String) As Boolean

'returns true if command_bar_name existed and was deleted;
'returns false if command_bar_name was not found.
'call this function in loop until it returns false.

On Error GoTo NoBar

DeleteCommandBar = False 'init.

Application.CommandBars(command_bar_name).Delete

DeleteCommandBar = True

NoBar:

End Function



Function DownloadInternationalTableFromWeb(url_defined_name_string As String, _
                                           worksheet_name As String, _
                                           MsgBox_text As String) As Worksheet

Dim strURL As String
Dim qtQueryTable As QueryTable
Dim shInternationalTable As Worksheet
Dim bRet As Boolean
Dim shWorksheet As Worksheet
Dim bOldInternationalDataWorksheetExists As Boolean
Dim iRet As Long
Dim bDisplayAlertsStatus As Boolean
Dim shActiveSheet As Worksheet

On Error GoTo generr

bOldInternationalDataWorksheetExists = False 'init.
For Each shWorksheet In ThisWorkbook.Worksheets
    If shWorksheet.Name = worksheet_name Then
        bOldInternationalDataWorksheetExists = True
        Exit For
    End If
Next shWorksheet


strURL = ThisWorkbook.Names(url_defined_name_string).RefersToRange.value


Set shActiveSheet = ActiveSheet
'Set shInternationalTable = ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count))

'bRet = DownloadTableFromWebByURL(shInternationalTable.Range("A1"), strURL)

Set shInternationalTable = InsertWorksheetFromUrl(strURL)

If shInternationalTable Is Nothing Then
    bRet = False
Else
    bRet = True
End If



If bRet Then
    'download was successful:
    If bOldInternationalDataWorksheetExists Then
        bDisplayAlertsStatus = Application.DisplayAlerts
        Application.DisplayAlerts = False
        If Not ThisWorkbook.Worksheets(worksheet_name) Is shInternationalTable Then
            ThisWorkbook.Worksheets(worksheet_name).Delete
        End If
        Application.DisplayAlerts = bDisplayAlertsStatus
    End If
    shInternationalTable.Name = worksheet_name
    shInternationalTable.Visible = False
'    shActiveSheet.Activate
Else
    'download was not successful:
    bDisplayAlertsStatus = Application.DisplayAlerts
    Application.DisplayAlerts = False
'    shInternationalTable.Delete
    shActiveSheet.Activate
    Application.DisplayAlerts = bDisplayAlertsStatus
    If bOldInternationalDataWorksheetExists Then
        frmProgressIntTemplates.Hide
        DoEvents
        iRet = AmazonMsgBox(GetTranslatedString("download_not_successful_1") & MsgBox_text & GetTranslatedString("download_not_successful_2") & strURL & GetTranslatedString("download_not_successful_3") & _
                      vbNewLine & vbNewLine & _
                      GetTranslatedString("download_not_successful_4") & MsgBox_text & GetTranslatedString("download_not_successful_4"), _
               vbYesNo, GetTranslatedString("download_unsuccessful"))
        If iRet = vbYes Then
            'proceed with old data:
'            frmProgressIntTemplates.Show vbModeless
            Set DownloadInternationalTableFromWeb = ThisWorkbook.Worksheets(worksheet_name)
            Exit Function
        Else
            'cancel:
            bCancelCreatingInternationalTemplates = True
            Exit Function
        End If
    Else
        'no data (either old or new) available:
        frmProgressIntTemplates.Hide
        DoEvents
        iRet = AmazonMsgBox(GetTranslatedString("download_not_successful_long_1") & MsgBox_text & GetTranslatedString("download_not_successful_long_2") & strURL & GetTranslatedString("download_not_successful_long_3") & _
                      GetTranslatedString("download_not_successful_long_4") & MsgBox_text & GetTranslatedString("download_not_successful_long_5") & _
                      worksheet_name & GetTranslatedString("download_not_successful_long_6") & _
                      vbNewLine & vbNewLine & _
                      GetTranslatedString("download_not_successful_long_7"), _
                      vbOKOnly, GetTranslatedString("data_not_found"))
'        frmProgressIntTemplates.Show vbModeless
        bCancelCreatingInternationalTemplates = True
        Exit Function
    End If
End If

ThisWorkbook.Names(LAST_UPDATE_DEFINED_NAME).RefersToRange.value = Now

Set DownloadInternationalTableFromWeb = shInternationalTable

Exit Function

generr:

If False Then
    Resume
End If

End Function



Public Function DownloadTableFromWebByURL(dest_range As Range, url_string As String) As Boolean

Dim strConnection As String

strConnection = "URL;" & url_string

DownloadTableFromWebByURL = DownloadTableFromWebByConnStrTryTenTimes(dest_range, strConnection)

'If Not DownloadTableFromWebByURL Then
'    shIntSettings.Activate
'    Application.ScreenUpdating = True
'    DoEvents
'    MsgBox "Unable to download HTML file " & _
'           url_string & "." & _
'           vbNewLine & vbNewLine & _
'           "Please fix on International Settings sheet and retry.", vbCritical + vbOKOnly, "Unable To Download File"
'End If

End Function



Function DownloadTableFromWebByConnStrTryTenTimes(dest_range As Range, connection_string As String) As Boolean

Dim iTryCount As Long
Dim bTry As Boolean

On Error GoTo generr

'try 10 times:
iTryCount = 1 'init.
DownloadTableFromWebByConnStrTryTenTimes = False 'init.

Do

    On Error GoTo ErrTry
    bTry = DownloadTableFromWebByConnStr(dest_range, connection_string)
    On Error GoTo generr
    
    If bTry Then
        DownloadTableFromWebByConnStrTryTenTimes = bTry
        Exit Function
    Else
        iTryCount = iTryCount + 1
        DoEvents
        DoEvents
        DoEvents
    End If
    
Loop Until iTryCount >= 10

Exit Function

generr:
DownloadTableFromWebByConnStrTryTenTimes = False

Exit Function

ErrTry:
bTry = False
Resume Next

End Function



Function DownloadTableFromWebByConnStr(dest_range As Range, connection_string As String) As Boolean

'returns True on success.

Dim strConnection As String
Dim qtQueryTable As QueryTable
Dim bDisplayAlertsStatus As Boolean


bDisplayAlertsStatus = Application.DisplayAlerts
Application.DisplayAlerts = False


Set qtQueryTable = dest_range.Parent.QueryTables.Add(connection_string, Destination:=dest_range)

With qtQueryTable
    .Name = "Full International Table"
    .FieldNames = True
    .RowNumbers = False
    .FillAdjacentFormulas = False
    .PreserveFormatting = False 'True 'False
    .RefreshOnFileOpen = False
    .BackgroundQuery = False
    .RefreshStyle = xlInsertDeleteCells
    .SavePassword = False
    .SaveData = True
    .AdjustColumnWidth = True
    .RefreshPeriod = 0
    .WebSelectionType = xlAllTables 'xlSpecifiedTables
    .WebFormatting = xlWebFormattingNone
'        .WebTables = "1"
    .WebPreFormattedTextToColumns = True
    .WebConsecutiveDelimitersAsOne = True
    .WebSingleBlockTextImport = False
    .WebDisableDateRecognition = False
    .WebDisableRedirections = False
    .Refresh BackgroundQuery:=False
End With

qtQueryTable.Delete

Call FixBooleansAfterImport(dest_range)

Application.DisplayAlerts = bDisplayAlertsStatus

DownloadTableFromWebByConnStr = True

End Function



Function FixBooleansAfterImport(target_range As Range)

Dim rgCell As Range
Dim rgTargetRange As Range

'Debug.Print Format(Now, "hh:mm:ss")

Set rgTargetRange = target_range.Parent.UsedRange

For Each rgCell In rgTargetRange
    If rgCell.value = True Then
        If Not rgCell.value = "-1" Then
            rgCell.NumberFormat = "@"
            rgCell.value = "True"
        End If
    ElseIf rgCell.value = "" Then
        'do nothing. Need this to prevent blank cells from being treated as Falses.
    ElseIf rgCell.value = False Then
        If Not rgCell.value = "0" Then
            rgCell.NumberFormat = "@"
            rgCell.value = "False"
        End If
    End If
Next rgCell

'Debug.Print Format(Now, "hh:mm:ss")

End Function



Function MakeTemplates(source_language As String) As Boolean

Dim wbNewTemplate As Workbook
Dim strArrayLanguages() As String
Dim iArrayIndex As Long
Dim iLbound As Long
Dim iUbound As Long
Dim strTargetLanguage As String
Dim shIntTable As Worksheet
Dim shDropdownTable As Worksheet
Dim shPreferencesTable As Worksheet
Dim shValidationTable As Worksheet
Dim bDisplayAlertsStatus As Boolean
Dim bEnableEventsStatus As Boolean
Dim shActiveSheet As Worksheet
Dim bFound As Boolean
Dim rgCheckForData As Range
Dim rgCheckCell As Range
Dim iRet As Long
Dim bRet As Boolean
Dim shTemplate As Worksheet
Dim shNewWbSheet As Worksheet
Dim iTemplateHeaderRow As Long
Dim iLastExampleRow As Long
Dim rgLastCell As Range
Dim rgFirstDataCell As Range
Dim strLocalTemplatesFolder As String
Dim rgFind As Range

On Error GoTo generr

'init:
bEnableEventsStatus = Application.EnableEvents
bCancelCreatingInternationalTemplates = False
bDisplayAlertsStatus = Application.DisplayAlerts
Application.DisplayAlerts = False



'check for data, prompt user and delete it:
Set shTemplate = GetTemplateWorksheet()
shTemplate.Unprotect 'for SpecialCells.
iTemplateHeaderRow = GetTemplateHeaderRow(shTemplate)
iLastExampleRow = GetLastExampleRow(shTemplate, iTemplateHeaderRow)
bEnableEventsStatus = Application.EnableEvents
Application.EnableEvents = False
Set rgLastCell = shTemplate.Cells.SpecialCells(xlCellTypeLastCell)
Application.EnableEvents = bEnableEventsStatus
If rgLastCell.Row > iLastExampleRow Then
    bEnableEventsStatus = Application.EnableEvents
    Application.EnableEvents = False
    Set rgFirstDataCell = shTemplate.Cells(iLastExampleRow + 1, 1)
    Set rgCheckForData = shTemplate.Range(rgFirstDataCell, rgLastCell)
    Application.EnableEvents = bEnableEventsStatus
    bFound = False 'init.
    For Each rgCheckCell In rgCheckForData.Cells
        If rgCheckCell.Formula <> "" Then
            bFound = True
            Exit For
        End If
    Next rgCheckCell
    If bFound Then
        iRet = AmazonMsgBox(GetTranslatedString("data_found_range_1") & rgCheckForData.Address(False, False) & _
                      GetTranslatedString("data_found_range_2") & _
                      vbNewLine & vbNewLine & _
                      GetTranslatedString("data_found_range_3"), vbOKCancel, GetTranslatedString("data_found"))
        If iRet = vbCancel Then Exit Function  'user clicked Cancel.
        shTemplate.Range(rgFirstDataCell, rgLastCell).ClearContents
    End If
End If


'progress indicator:
frmProgressIntTemplates.lblProgressText.Caption = GetTranslatedString("downloading_intl_data")
'frmProgressIntTemplates.lblProgressPercent = "0%"
'frmProgressIntTemplates.prgIntTemplates.value = 1
frmProgressIntTemplates.lblProgressBar.width = 0.01 * frmProgressIntTemplates.frameProgressBar.width
frmProgressIntTemplates.Show vbModeless
DoEvents


'download tables from web:
'(see also GetLatestInternationalizedData)
'======================================================================================================
Set shActiveSheet = ActiveSheet
 'this activates a different sheet, because a new sheet is created and then hidden. Must re-activate original active sheet.
Set shIntTable = DownloadInternationalTableFromWeb(LOCAL_INT_TABLE_URL_DEFINED_NAME, _
                      INT_TABLE_WORKSHEET_NAME, "international data")

'frmProgressIntTemplates.prgIntTemplates.value = 3
frmProgressIntTemplates.lblProgressBar.width = 0.03 * frmProgressIntTemplates.frameProgressBar.width
frmProgressIntTemplates.Repaint
DoEvents

Set shDropdownTable = DownloadInternationalTableFromWeb(FULL_DROPDOWN_LISTS_TABLE_URL_DEFINED_NAME, _
                      DROPDOWN_LISTS_TABLE_WORKSHEET_NAME, "dropdown lists")

'frmProgressIntTemplates.prgIntTemplates.value = 6
frmProgressIntTemplates.lblProgressBar.width = 0.06 * frmProgressIntTemplates.frameProgressBar.width
frmProgressIntTemplates.Repaint
DoEvents

Set shPreferencesTable = DownloadInternationalTableFromWeb(PREFERENCES_TABLE_URL_DEFINED_NAME, _
                      PREFERENCES_TABLE_WORKSHEET_NAME, "preferences")

'frmProgressIntTemplates.prgIntTemplates.value = 9
frmProgressIntTemplates.lblProgressBar.width = 0.09 * frmProgressIntTemplates.frameProgressBar.width
frmProgressIntTemplates.Repaint
DoEvents

Set shValidationTable = DownloadDataValidationTableFromWeb(FULL_DATA_VALIDATION_TABLE_URL_DEFINED_NAME)

'frmProgressIntTemplates.prgIntTemplates.value = 12
frmProgressIntTemplates.lblProgressBar.width = 0.12 * frmProgressIntTemplates.frameProgressBar.width
frmProgressIntTemplates.Repaint
DoEvents

Application.EnableEvents = False
shActiveSheet.Activate
Application.EnableEvents = bEnableEventsStatus
DoEvents
'======================================================================================================


If bCancelCreatingInternationalTemplates Then
    Unload frmProgressIntTemplates
    DoEvents
    AmazonMsgBox GetTranslatedString("template_creation_cancelled"), vbOKOnly, GetTranslatedString("cancelled")
    Exit Function
End If


'apply new dropdown lists to main template:
Application.EnableEvents = False
bRet = ApplyDropDownLists(ThisWorkbook, INT_TABLE_ENGLISH_USA_HEADER)
Application.EnableEvents = bEnableEventsStatus


'apply new preferences to main template:
Application.EnableEvents = False
bRet = ApplyDropDownLists(ThisWorkbook, INT_TABLE_ENGLISH_USA_HEADER, True)
Application.EnableEvents = bEnableEventsStatus


'get language list as array:
strArrayLanguages = GetLanguageList(shIntTable)
If strArrayLanguages(1) = "0" Then Exit Function

'get the local templates folder name:
strLocalTemplatesFolder = ThisWorkbook.Names(LOCAL_TEMPLATES_FOLDER_DEFINED_NAME).RefersToRange.value

iLbound = LBound(strArrayLanguages)
iUbound = UBound(strArrayLanguages)
strMsg = GetTranslatedString("templates_saved_1") & vbNewLine & _
         ThisWorkbook.Path & "\" & strLocalTemplatesFolder & "\:" & vbNewLine & vbNewLine
For iArrayIndex = iLbound To iUbound
    strTargetLanguage = strArrayLanguages(iArrayIndex)
    
    
    frmProgressIntTemplates.lblProgressText.Caption = GetTranslatedString("creating_template_1") & strTargetLanguage & GetTranslatedString("creating_template_2")
    dblProgress = (100 / ((iUbound * 3) + 1)) * ((iArrayIndex * 3) - 2)
    strProgressPercent = CStr(Round(dblProgress, 1)) & "%"
'    frmProgressIntTemplates.prgIntTemplates.value = dblProgress
    frmProgressIntTemplates.lblProgressBar.width = (dblProgress / 100) * frmProgressIntTemplates.frameProgressBar.width
'    frmProgressIntTemplates.lblProgressPercent.Caption = strProgressPercent
    frmProgressIntTemplates.Show vbModeless
    
    DoEvents
    dblProgress = (100 / ((iUbound * 3) + 1)) * ((iArrayIndex * 3) - 1)
    strProgressPercent = CStr(Round((100 / ((iUbound * 3) + 1)) * ((iArrayIndex * 3) - 1), 1)) & "%"
'    frmProgressIntTemplates.prgIntTemplates.value = dblProgress
    frmProgressIntTemplates.lblProgressBar.width = (dblProgress / 100) * frmProgressIntTemplates.frameProgressBar.width
    
    
    
    'check for target language in International Worksheets Table:
    Set rgFind = shIntSheetsTable.Cells.Find(strTargetLanguage)
    If rgFind Is Nothing Then
        'that language does not exist in this product category, so don't make the template:
        GoTo Next_Template
    Else
    
    
        '*****make a template*****:
        
        Application.EnableEvents = False
        Set wbNewTemplate = MakeTemplate(shIntTable, INT_TABLE_MASTER_NAME_HEADER, strTargetLanguage, _
                                         strProgressPercent, INT_TABLE_MFA_INTERNAL_NAME_HEADER)
        Application.EnableEvents = bEnableEventsStatus
        
        
    End If
    
    
    
    If wbNewTemplate Is Nothing Then
        
        If bNotFoundInIntWorksheetsTable Then
            GoTo Next_Template
        End If
        
        frmProgressIntTemplates.Hide
        iRet = AmazonMsgBox(GetTranslatedString("unable_to_create_1") & strTargetLanguage & GetTranslatedString("unable_to_create_2"), vbYesNo, GetTranslatedString("problem_creating_template"))
        If iRet = vbNo Then
            Unload frmProgressIntTemplates
            MakeTemplates = False
            Exit Function
        Else
            'iRet = vbYes, so resume:
            frmProgressIntTemplates.Show vbModeless
            GoTo Next_Template
        End If
    End If
    
    
    'protect template sheet(s):
    For Each shNewWbSheet In wbNewTemplate.Worksheets
        If InStr(shNewWbSheet.CodeName, "shTemplate") > 0 Then
            Call ProtectSheet(shNewWbSheet)
        End If
    Next shNewWbSheet

    
    
    wbNewTemplate.Activate
    DoEvents
    If bCancelCreatingInternationalTemplates Then
        bEnableEventsStatus = Application.EnableEvents
        Application.EnableEvents = False
        wbNewTemplate.Close SaveChanges:=False
        Application.EnableEvents = bEnableEventsStatus
        frmProgressIntTemplates.Hide
        AmazonMsgBox GetTranslatedString("template_creation_cancelled"), vbOKOnly, GetTranslatedString("cancelled")
        Exit Function
    End If
    
    strMsg = strMsg & strTargetLanguage & ":   """ & wbNewTemplate.Name & """" & vbNewLine

    frmProgressIntTemplates.lblProgressText.Caption = GetTranslatedString("saving_template_1") & strTargetLanguage & GetTranslatedString("saving_template_2") & ThisWorkbook.Path & "\" & strLocalTemplatesFolder & "\ " & GetTranslatedString("saving_template_3")
    dblProgress = (100 / ((iUbound * 3) + 1)) * ((iArrayIndex * 3) - 0)
    strProgressPercent = CStr(Round((100 / ((iUbound * 3) + 1)) * ((iArrayIndex * 3) - 0), 1)) & "%"
'    frmProgressIntTemplates.prgIntTemplates.value = dblProgress
    frmProgressIntTemplates.lblProgressBar.width = (dblProgress / 100) * frmProgressIntTemplates.frameProgressBar.width
'    frmProgressIntTemplates.lblProgressPercent.Caption = strProgressPercent
    DoEvents
    
    bEnableEventsStatus = Application.EnableEvents
    Application.EnableEvents = False
    wbNewTemplate.Close SaveChanges:=True
    Application.EnableEvents = bEnableEventsStatus
Next_Template:
Next iArrayIndex


'delete data sheets that are no longer needed:
'shIntTable.Delete 'this is used for determining dropdown lists.
shDropdownTable.Delete
ThisWorkbook.Save


frmProgressIntTemplates.Hide


Call ProtectSheet(shTemplate)


Application.DisplayAlerts = bDisplayAlertsStatus
Application.EnableEvents = bEnableEventsStatus

MakeTemplates = True


Exit Function

generr:

Application.EnableEvents = bEnableEventsStatus

If False Then
    Resume
End If

End Function



Function GetLanguageList(table_worksheet As Worksheet) As String()

'on failure, returns GetLanguageList("0")

Dim rgFind As Range
Dim rgHeaderRange As Range
Dim rgCell As Range
Dim iLastCol As Long
Dim strArrayList() As String
Dim iUbound As Long

Const INT_TABLE_HEADER_ROW As Long = 1

'init return value for failure:
ReDim strArrayList(1 To 1) As String
strArrayList(1) = "0"

Set rgFind = table_worksheet.Cells(INT_TABLE_HEADER_ROW, table_worksheet.Columns.Count).End(xlToLeft)
iLastCol = rgFind.Column

Set rgHeaderRange = table_worksheet.Range(table_worksheet.Cells(INT_TABLE_HEADER_ROW, 1), table_worksheet.Cells(INT_TABLE_HEADER_ROW, iLastCol))

ReDim strArrayList(1 To 1) As String
iUbound = UBound(strArrayList)

For Each rgCell In rgHeaderRange.Cells

    Select Case rgCell.value
        Case INT_TABLE_DATA_CATEGORY_HEADER
            'skip
        Case INT_TABLE_REFERENCE_HEADER
            'skip
        Case INT_TABLE_NUMBER_FORMAT_HEADER
            'skip
        Case INT_TABLE_MASTER_NAME_HEADER
            'skip
        Case INT_TABLE_MFA_INTERNAL_NAME_HEADER
            'skip
        Case INT_TABLE_TEMPLATE_DEPENDENCY_TEST_HEADER
            'skip
        Case Else
            'add to array:
            strArrayList(iUbound) = rgCell.value
            iUbound = iUbound + 1
            ReDim Preserve strArrayList(1 To iUbound) As String
    
    End Select
    
Next rgCell

ReDim Preserve strArrayList(1 To iUbound - 1) As String

GetLanguageList = strArrayList

End Function



Function MakeTemplate(work_sheet_table As Worksheet, source_language As String, target_language As String, _
                      progress_percent As String, Optional alt_source_language As String) As Workbook

'returns Workbook on success, Nothing on failure.

Dim bRet As Boolean
Dim wbNewTemplate As Workbook
Dim shTemplateWorksheet As Worksheet

Set shTemplateWorksheet = GetTemplateWorksheet()

Set wbNewTemplate = MakeNewTemplateWorkbook(target_language)
If wbNewTemplate Is Nothing Then
    Set MakeTemplate = Nothing
    Exit Function
End If

On Error GoTo generr


frmProgressIntTemplates.lblProgressText.Caption = GetTranslatedString("swapping_column_headers_1") & target_language & GetTranslatedString("swapping_column_headers_2") & target_language & GetTranslatedString("swapping_column_headers_3")
'frmProgressIntTemplates.lblProgressPercent.Caption = progress_percent
DoEvents
'bRet = SwapColumnHeaders(wbNewTemplate.Worksheets(shTemplateWorksheet.Name), wbNewTemplate.Worksheets(work_sheet_table.Name), _
                         source_language, target_language, alt_source_language)
bRet = SwapColumnHeaders(wbNewTemplate, wbNewTemplate.Worksheets(work_sheet_table.Name), _
                         source_language, target_language, alt_source_language)
If Not bRet Then
    wbNewTemplate.Close SaveChanges:=False
    Unload frmProgressIntTemplates
    Exit Function
End If
                         
frmProgressIntTemplates.lblProgressText.Caption = GetTranslatedString("applying_dropdown_lists_1") & target_language & GetTranslatedString("applying_dropdown_lists_2")
'frmProgressIntTemplates.lblProgressPercent.Caption = progress_percent
DoEvents
bRet = ApplyDropDownLists(wbNewTemplate, target_language)
bRet = ApplyDropDownLists(wbNewTemplate, target_language, True) 'Preferences

If Not bRet Then
    wbNewTemplate.Close SaveChanges:=False
    Unload frmProgressIntTemplates
    Exit Function
End If


frmProgressIntTemplates.lblProgressText.Caption = GetTranslatedString("processing_localized_1") & target_language & GetTranslatedString("processing_localized_2")
'frmProgressIntTemplates.lblProgressPercent.Caption = progress_percent
DoEvents
bRet = ProcessLocalizedWorksheets(wbNewTemplate, target_language)

If Not bRet Then
    Dim strFullPath As String
    strFullPath = wbNewTemplate.Path & "\" & wbNewTemplate.Name
    wbNewTemplate.Close SaveChanges:=False
    Unload frmProgressIntTemplates
    DoEvents
    Dim fso As Object
    Set fso = CreateObject("Scripting.FileSystemObject")
    If fso.FileExists(strFullPath) Then
        fso.DeleteFile strFullPath
        DoEvents
    End If
    Exit Function
End If


'set localized toolbar button captions:
Call ApplyLocalToolbarButtonCaptions(target_language, wbNewTemplate.Worksheets(work_sheet_table.Name))

'set localized toolbar button tooltips:
Call ApplyLocalToolbarButtonTooltips(target_language, wbNewTemplate.Worksheets(work_sheet_table.Name))

'hide international settings worksheet:
wbNewTemplate.Names(TEMPLATE_LANGUAGE_DEFINED_NAME).RefersToRange.Parent.Visible = xlHidden

'hide international urls worksheet:
wbNewTemplate.Worksheets(shIntURLs.Name).Visible = xlHidden


'delete master instructions worksheet:
wbNewTemplate.Worksheets(shMasterInst.Name).Delete

'delete data sheets that are no longer needed:
'wbNewTemplate.Worksheets(INT_TABLE_WORKSHEET_NAME).Delete 'this is used for determining dropdown lists.
wbNewTemplate.Worksheets(DROPDOWN_LISTS_TABLE_WORKSHEET_NAME).Delete
wbNewTemplate.Worksheets(PREFERENCES_TABLE_WORKSHEET_NAME).Delete


wbNewTemplate.Names(SHOW_CREATE_TEMPLATES_TOOLBAR_DEFINED_NAME).RefersToRange.value = False

Set MakeTemplate = wbNewTemplate

Exit Function

generr:

'Stop

wbNewTemplate.Close SaveChanges:=False

If False Then
    Resume
End If

End Function





Function ProcessLocalizedWorksheets(target_workbook As Workbook, target_language As String) As Boolean

'delete other locales' worksheets, and rename this locale's worksheets:

Dim iHeaderRow As Long
Dim iFirstTemplateRow As Long
Dim iLastTemplateRow As Long
Dim iTemplateRow As Long
Dim iTemplateNameCol As Long
Dim iRawSheetNameCol As Long
Dim iTargetLanguageCol As Long
Dim iDefaultLanguageCol As Long
Dim iLastTableCol As Long
Dim iTableCol As Long
Dim strRawTemplateName As String
Dim rgFind As Range
Dim bEnableEventsStatus As Boolean
Dim bDisplayAlertsStatus As Boolean
Dim strRawPrefix As String
Dim strRawFullName As String
Dim strTargetName As String
Dim strDefaultLanguage As String
Dim shTarget As Worksheet
Dim shDelete As Worksheet
Dim shFind As Worksheet
Dim strDeleteLanguage As String
Dim bFound As Boolean
Dim shActivateTemplate As Worksheet
Dim shTemplate As Worksheet
Dim strFullPath As String

Const TEMPLATE_NAME_COLUMN_NAME As String = "Template Name"
Const RAW_WORKSHEET_STORAGE_NAME_COLUMN_NAME As String = "Raw Worksheet Storage Name"
Const DEFAULT_LANGUAGE_DEFINED_NAME As String = "Localized_Worksheets_Default_Language"

On Error GoTo generr

bEnableEventsStatus = Application.EnableEvents
Application.EnableEvents = False

Set shTemplate = GetTemplateWorksheet(True)

strRawTemplateName = shTemplate.Name

'get raw template name, columns and rows:
Set rgFind = shIntSheetsTable.Cells.Find(What:=TEMPLATE_NAME_COLUMN_NAME, LookAt:=xlWhole)
iHeaderRow = rgFind.Row
iTemplateNameCol = rgFind.Column

Set rgFind = shIntSheetsTable.Rows(iHeaderRow).Find(What:=RAW_WORKSHEET_STORAGE_NAME_COLUMN_NAME, LookAt:=xlWhole)
iRawSheetNameCol = rgFind.Column

Set rgFind = shIntSheetsTable.Rows(iHeaderRow).Find(What:=target_language, LookAt:=xlWhole)
If rgFind Is Nothing Then
    'language not found:
    bNotFoundInIntWorksheetsTable = True
    strFullPath = target_workbook.Path & "\" & target_workbook.Name
'    target_workbook.Close SaveChanges:=False 'now doing this in calling function.
    DoEvents
    Dim fso As Object
    Set fso = CreateObject("Scripting.FileSystemObject")
    If fso.FileExists(strFullPath) Then
        fso.DeleteFile strFullPath
        DoEvents
    End If
    Exit Function
Else
    bNotFoundInIntWorksheetsTable = False
End If
iTargetLanguageCol = rgFind.Column

strDefaultLanguage = ThisWorkbook.Names(DEFAULT_LANGUAGE_DEFINED_NAME).RefersToRange.value
Set rgFind = shIntSheetsTable.Rows(iHeaderRow).Find(What:=strDefaultLanguage, LookAt:=xlWhole)
iDefaultLanguageCol = rgFind.Column

Set rgFind = shIntSheetsTable.Columns(iTemplateNameCol).Find(What:=strRawTemplateName, LookAt:=xlWhole)
If rgFind Is Nothing Then
    AmazonMsgBox GetTranslatedString("master_workbook_error_1") & _
            strRawTemplateName & GetTranslatedString("master_workbook_error_2") & _
            shIntSheetsTable.Name & GetTranslatedString("master_workbook_error_3") & _
            CStr(iTemplateNameCol) & GetTranslatedString("master_workbook_error_4") & _
            vbNewLine & vbNewLine & _
            GetTranslatedString("master_workbook_error_5") & _
            shIntSheetsTable.Name & GetTranslatedString("master_workbook_error_6"), _
            vbOKOnly, _
            GetTranslatedString("cant_find_template_name")
End If
iFirstTemplateRow = rgFind.Row

Set rgFind = shIntSheetsTable.Columns(iTemplateNameCol).Find(What:=strRawTemplateName, LookAt:=xlWhole, SearchDirection:=xlPrevious)
iLastTemplateRow = rgFind.Row

Set rgFind = shIntSheetsTable.Cells(iHeaderRow, shIntSheetsTable.Columns.Count).End(xlToLeft)
iLastTableCol = rgFind.Column


bDisplayAlertsStatus = Application.DisplayAlerts
Application.DisplayAlerts = False


For iTemplateRow = iFirstTemplateRow To iLastTemplateRow
    strRawPrefix = shIntSheetsTable.Cells(iTemplateRow, iRawSheetNameCol).value
    strRawFullName = strRawPrefix & "_" & target_language
    strTargetName = shIntSheetsTable.Cells(iTemplateRow, iTargetLanguageCol).value

    'check for blank target name:
    If strTargetName = "" Then
        'skip this template row:
        GoTo SkipToNextTemplateRow
    End If
    
    If strRawPrefix = strRawTemplateName Then
        'this is the (first) template sheet, so just change its name:
        Set shTarget = target_workbook.Worksheets(strRawPrefix)
        shTarget.Name = strTargetName
        shTarget.Visible = True 'should already be visible anyway, but just in case.
        'mark it as the sheet to be activated when done:
        Set shActivateTemplate = shTarget
    ElseIf RegexTest("^" & strRawTemplateName & "\d+$", strRawPrefix) Then
        'this is another template sheet after the first one:
        '(it's the raw template name with one or more trailing digits.)
        Set shTarget = target_workbook.Worksheets(strRawPrefix)
        shTarget.Name = strTargetName
        shTarget.Visible = True 'should already be visible anyway, but just in case.
        
        
    Else
        'this is NOT the template sheet:
        'check for existence of that worksheet, use default if it doesn't exist:
        If Not DoesWorksheetExistByName(strRawFullName) Then
            'use default:
            strRawFullName = strRawPrefix & "_" & strDefaultLanguage
            'make sure that worksheet exists before continuing:
            If Not DoesWorksheetExistByName(strRawFullName) Then
                shIntSheetsTable.Activate
                shIntSheetsTable.Cells(iTemplateRow, iRawSheetNameCol).Address.Select
                DoEvents
                AmazonMsgBox GetTranslatedString("cant_find_hidden_1") & _
                       strRawFullName & GetTranslatedString("cant_find_hidden_2") & _
                       shIntSheetsTable.Cells(iTemplateRow, iRawSheetNameCol).Address(False, False) & _
                       GetTranslatedString("cant_find_hidden_3") & _
                       shIntSheetsTable.Name & GetTranslatedString("cant_find_hidden_4"), _
                       vbOKOnly, GetTranslatedString("cant_find_worksheet")
                ProcessLocalizedWorksheets = False
                Exit Function
            End If
        End If

        Set shTarget = target_workbook.Worksheets(strRawFullName)
        
        If Len(strTargetName) > 31 Then
            AmazonMsgBox GetTranslatedString("cannot_rename_1") & strTargetName & _
                   GetTranslatedString("cannot_rename_2"), _
                   vbOKOnly, GetTranslatedString("worksheet_name_too_long")
            Exit Function
        End If
        shTarget.Name = strTargetName
        shTarget.Visible = True
        
        'delete other locales' localized sheets:
        For iTableCol = 1 To iLastTableCol
            
            Select Case iTableCol
                Case iTemplateNameCol
                    'do nothing here.
                Case iRawSheetNameCol
                    'do nothing here.
                Case iTargetLanguageCol
                    'do nothing here.
                Case Else
                    'delete sheets:
                    strDeleteLanguage = shIntSheetsTable.Cells(iHeaderRow, iTableCol).value
                    strRawFullName = strRawPrefix & "_" & strDeleteLanguage
                    
                    bFound = False 'init.
                    For Each shDelete In target_workbook.Worksheets
                        If shDelete.Name = strRawFullName Then
                            bFound = True
                            Exit For
                        End If
                    Next shDelete
                    
                    If bFound Then
                        Set shDelete = target_workbook.Worksheets(strRawFullName)
                        shDelete.Delete
                    End If
    
            End Select
        
        Next iTableCol
    
    End If
    
SkipToNextTemplateRow:
    
Next iTemplateRow

'delete the international worksheets table worksheet:
target_workbook.Worksheets(shIntSheetsTable.Name).Delete

'scroll so that the leftmost worksheet is visible:
ActiveWindow.ScrollWorkbookTabs Position:=xlFirst

'activate the template worksheet:
shActivateTemplate.Activate

'select cell in top row:
iHeaderRow = GetTemplateHeaderRow(shActivateTemplate) 'reusing iHeaderRow.
shActivateTemplate.Cells(iHeaderRow + 1, ActiveCell.Column).Select 'to select column, would need a setting for what column to select.


Application.DisplayAlerts = bDisplayAlertsStatus
Application.EnableEvents = bEnableEventsStatus

ProcessLocalizedWorksheets = True

Exit Function

generr:

Application.DisplayAlerts = bDisplayAlertsStatus
Application.EnableEvents = bEnableEventsStatus

'Stop
If False Then
    Resume
End If

End Function




Public Function DoesWorksheetExistByName(sheet_name As String) As Boolean

Dim shFind As Worksheet

For Each shFind In ThisWorkbook.Worksheets
    If shFind.Name = sheet_name Then
        DoesWorksheetExistByName = True
        Exit Function
    End If
Next shFind

DoesWorksheetExistByName = False

End Function



Public Function ApplyDropDownLists(target_workbook As Workbook, target_language As String, _
                   Optional is_preferences As Boolean) As Boolean

'replaces the Dropdown Lists worksheet with a fresh one. That's the sheet from which the
'dropdowns' lists are taken.

'applying preferences is done here too (is_preferences = True).

'returns true on success.

Dim shDropdownLists As Worksheet
Dim shIntDropdownListsTable As Worksheet
Dim shIntTable As Worksheet
Dim shTemplate As Worksheet
Dim iDropdownColumnCol As Long
Dim iColumnDependencyCol As Long
Dim iColumnDependencyTestCol As Long
Dim iTemplateDependencyTestCol As Long
Dim iTargetLanguageCol As Long
Dim iLastCol As Long
Dim iColCount As Long
Dim iHeaderRow As Long
Dim iDataFirstRow As Long
Dim iDataLastRow As Long
Dim iDropdownListFirstRow As Long
Dim iDropdownListLastRow As Long
Dim rgFind As Range
Dim rgNextCellDown As Range
Dim rgFindInRange As Range
Dim rgFindInDropdownColumnCol As Range
Dim rgDropdownList As Range
Dim rgDestDropDownList As Range
Dim rgReferenceItem As Range
Dim iTmpRow As Long
Dim rgListboxMfaInternalColumnName As Range
Dim strListboxMfaInternalColumnName As String
Dim strListboxMfaInternalColumnNameRegexPattern As String
Dim strListboxMfaInternalColumnNamePrevious As String
Dim strDropdownListDefinedNameSuffix As String
Dim strDropdownListDefinedNameSuffixSeparator As String
Dim strInternalTemplateName As String

Dim rgColumnDependencyMfaInternalColumnName As Range
Dim strDependencyMfaInternalColumnName As String
Dim strDependencyLocalColumnName As String

Dim rgTemplateDependencyTest As Range
Dim strTemplateDependencyTest As String

Dim rgColumnDependencyTest As Range
Dim strColumnDependencyTest As String

Dim rgDataCategoryItem As Range
Dim iListCounter As Long
Dim strIntTableMfaInternalNameHeader As String
Dim strListDefinedName As String
Dim nameDefinedNameTmp As Name
Dim strDefinedNameTmp As String
Dim shTmp As Worksheet
Dim bDisplayAlerts As Boolean
Dim bScreenUpdating As Boolean
Dim bFound As Boolean
Dim bApplyToThisTemplate As Boolean
'Dim bDoneLooking As Boolean
'Dim iDefaultRow As Long
Dim nmName As Name
Dim rgName As Range

Dim iIntTableMfaInternalNameCol As Long
Dim iIntTableLocalNameCol As Long
Dim iTemplateHeaderRow As Long
Dim iTemplateDependencyCol As Long
Dim strTemplateDependencyItem As String

Dim bColumnDependencyColumnIsPresent As Boolean
Dim bColumnDependencyColumnTestIsPresent As Boolean
'Dim bTemplateDependencyColumnTestIsPresent As Boolean
'Dim bDependencyIsOnTemplateName As Boolean
Dim rgDropdownColumnThisItem As Range
Dim rgDropdownColumnNextItem As Range

Dim dblProgressBarValue As Double

Dim voRegex As Variant 'IRegExp2

Dim ArrayTemplateSheets() As Worksheet
    Dim iUboundTemplateSheets As Long
    Dim iArrayIndexTemplateSheets As Long
    Dim shArrayItemTemplateSheet As Worksheet
    
Dim ArrayTemplateHeaders() As Range
    Dim iUboundTemplateHeaders As Long
    Dim iArrayIndexTemplateHeaders As Long
    Dim rgArrayItemTemplateHeaders As Range

Dim shWorksheet As Worksheet
Dim iArrayInde

Const INT_DROPDOWN_LISTS_TABLE_HEADER_ROW As Long = 1
Const INT_PREFERENCES_LISTS_TABLE_HEADER_ROW As Long = 1

Const INT_DROPDOWN_LISTS_TABLE_DROPDOWN_COLUMN_HEADER As String = "Dropdown Column"
Const INT_PREFERENCES_TABLE_DROPDOWN_COLUMN_HEADER As String = "Preference"
Const INT_DROPDOWN_LISTS_TABLE_TEMPLATE_DEPENDENCY_TEST_HEADER As String = "Template Dependency Test"
Const INT_PREFERENCES_TABLE_TEMPLATE_DEPENDENCY_TEST_HEADER As String = "Template Dependency Test"
Const INT_DROPDOWN_LISTS_TABLE_COLUMN_DEPENDENCY_HEADER As String = "Column Dependency"
Const INT_DROPDOWN_LISTS_TABLE_COLUMN_DEPENDENCY_TEST_HEADER As String = "Column Dependency Test"
Const DEFAULT_LANGUAGE As String = "English USA"
'Const TEMPLATE_DEPENDENCY As String = "Template"

On Error GoTo generr

bScreenUpdating = Application.ScreenUpdating
Application.ScreenUpdating = False

ApplyDropDownLists = False 'init.

strInternalTemplateName = GetInternalTemplateName(target_workbook)

Set shIntTable = GetInternationalTableWorksheet()
'Set shTemplate = GetTemplateWorksheet() '1/29/08: now getting array of template sheets instead.

'get array of template sheets:
If Not is_preferences Then
    ReDim ArrayTemplateSheets(0 To 0) As Worksheet
    iUboundTemplateSheets = UBound(ArrayTemplateSheets)
    For Each shWorksheet In ThisWorkbook.Worksheets
        If InStr(shWorksheet.CodeName, "shTemplate") > 0 Then
            iUboundTemplateSheets = iUboundTemplateSheets + 1
            ReDim Preserve ArrayTemplateSheets(0 To iUboundTemplateSheets) As Worksheet
            Set ArrayTemplateSheets(iUboundTemplateSheets) = shWorksheet
        End If
    Next shWorksheet
End If




Set voRegex = CreateObject("VBScript.RegExp")

'create new dropdown lists sheet:
Set shDropdownLists = target_workbook.Worksheets.Add
shDropdownLists.Rows(LOCAL_DROPDOWN_LISTS_SHEET_HEADER_ROW).Font.Bold = True
shDropdownLists.Rows(LOCAL_DROPDOWN_LISTS_SHEET_HEADER_ROW).HorizontalAlignment = xlCenter
If Not is_preferences Then
    shDropdownLists.Rows(LOCAL_DROPDOWN_LISTS_SHEET_COLUMN_DEPENDENCY_COLUMN_HEADER_ROW).HorizontalAlignment = xlCenter
    shDropdownLists.Rows(LOCAL_DROPDOWN_LISTS_SHEET_COLUMN_DEPENDENCY_TEST_ROW).HorizontalAlignment = xlCenter
End If

'get international table columns:
If is_preferences Then
    iHeaderRow = INT_PREFERENCES_LISTS_TABLE_HEADER_ROW
    Set shIntDropdownListsTable = target_workbook.Worksheets(PREFERENCES_TABLE_WORKSHEET_NAME)
    iDropdownColumnCol = FindColumn(shIntDropdownListsTable.Rows(iHeaderRow), INT_PREFERENCES_TABLE_DROPDOWN_COLUMN_HEADER)
    iTemplateDependencyTestCol = FindColumn(shIntDropdownListsTable.Rows(iHeaderRow), INT_PREFERENCES_TABLE_TEMPLATE_DEPENDENCY_TEST_HEADER)
    iTargetLanguageCol = FindColumn(shIntDropdownListsTable.Rows(iHeaderRow), target_language, DEFAULT_LANGUAGE)
Else
    'dropdowns:
    iHeaderRow = INT_DROPDOWN_LISTS_TABLE_HEADER_ROW
    Set shIntDropdownListsTable = target_workbook.Worksheets(DROPDOWN_LISTS_TABLE_WORKSHEET_NAME)
    iDropdownColumnCol = FindColumn(shIntDropdownListsTable.Rows(iHeaderRow), INT_DROPDOWN_LISTS_TABLE_DROPDOWN_COLUMN_HEADER)
    iColumnDependencyCol = FindColumn(shIntDropdownListsTable.Rows(iHeaderRow), INT_DROPDOWN_LISTS_TABLE_COLUMN_DEPENDENCY_HEADER)
    iColumnDependencyTestCol = FindColumn(shIntDropdownListsTable.Rows(iHeaderRow), INT_DROPDOWN_LISTS_TABLE_COLUMN_DEPENDENCY_TEST_HEADER)
    iTemplateDependencyTestCol = FindColumn(shIntDropdownListsTable.Rows(iHeaderRow), INT_DROPDOWN_LISTS_TABLE_TEMPLATE_DEPENDENCY_TEST_HEADER)
    iTargetLanguageCol = FindColumn(shIntDropdownListsTable.Rows(iHeaderRow), target_language, DEFAULT_LANGUAGE)
End If

'find first and last data rows:
If is_preferences Then
    iDataFirstRow = INT_PREFERENCES_LISTS_TABLE_HEADER_ROW + 1
Else
    'dropdowns:
    iDataFirstRow = INT_DROPDOWN_LISTS_TABLE_HEADER_ROW + 1
End If
iDataLastRow = shIntDropdownListsTable.Range("A1").SpecialCells(xlLastCell).Row

'get dropdown columns column range:
Set rgFindInDropdownColumnCol = shIntDropdownListsTable.Range(shIntDropdownListsTable.Cells(iDataFirstRow, iDropdownColumnCol), shIntDropdownListsTable.Cells(iDataLastRow, iDropdownColumnCol))


'get column count and last column:
'Stop
'iColCount = Application.WorksheetFunction.CountA(rgFindInDropdownColumnCol)



'find list range:
iListCounter = 0 'init.
iDropdownListFirstRow = iDataFirstRow 'init.
strListboxMfaInternalColumnNamePrevious = "" 'init.

'prepare for checking whether a given column name exists in this template:
Dim rgTemplateHeaders As Range
Dim rgTemplateHeadersLeftCell As Range
Dim rgTemplateHeadersRightCell As Range
Dim rgHeaderCell As Range
Dim strHeaderCell As String
Dim strHeaderCellMfaInternalName As String
Dim strArrayMatchingColumnHeaders() As String
Dim iArrayIndexMatchingColumnHeaders As Long
Dim iLboundMatchingColumnHeaders As Long
Dim iUboundMatchingColumnHeaders As Long
Dim strArrayItemMatchingHeader As String
Dim iArrayItemMatchingColumn As Long





'get array of template header ranges on the template sheets:
If Not is_preferences Then
    iUboundTemplateHeaders = iUboundTemplateSheets
    ReDim ArrayTemplateHeaders(1 To iUboundTemplateHeaders) As Range
    For iArrayIndexTemplateSheets = 1 To iUboundTemplateSheets
        Set shArrayItemTemplateSheet = ArrayTemplateSheets(iArrayIndexTemplateSheets)
        iTemplateHeaderRow = GetTemplateHeaderRow(shArrayItemTemplateSheet)
'        Set rgFind = shArrayItemTemplateSheet.Cells(iTemplateHeaderRow, shArrayItemTemplateSheet.Columns.Count)
        Set rgFind = GetRightmostOccupiedCellInRowAsRange(shArrayItemTemplateSheet, iTemplateHeaderRow)
        Set rgTemplateHeadersLeftCell = shArrayItemTemplateSheet.Cells(iTemplateHeaderRow, 1)
        Set rgTemplateHeadersRightCell = shArrayItemTemplateSheet.Cells(iTemplateHeaderRow, rgFind.Column)
        Set rgTemplateHeaders = shArrayItemTemplateSheet.Range( _
                                    rgTemplateHeadersLeftCell, rgTemplateHeadersRightCell)
       Set ArrayTemplateHeaders(iArrayIndexTemplateSheets) = rgTemplateHeaders
    Next iArrayIndexTemplateSheets
End If






iIntTableLocalNameCol = GetIntTableLocalLanguageColumn(shIntTable)
If Not is_preferences Then
    iIntTableMfaInternalNameCol = GetIntTableMfaInternalNameColumn(shIntTable)
End If


'delete old dropdown list defined names:
Dim strPrefix
If is_preferences Then
    strPrefix = PREFERENCE_DEFINED_NAME_PREFIX
Else
    'dropdowns:
    strPrefix = DROPDOWN_LIST_DEFINED_NAME_PREFIX
End If
For Each nameDefinedNameTmp In target_workbook.Names
    strDefinedNameTmp = nameDefinedNameTmp.Name
    If InStr(strDefinedNameTmp, strPrefix) > 0 Then
        nameDefinedNameTmp.Delete
    End If
Next nameDefinedNameTmp


Do 'loops through all the dropdown lists to apply.

    'progress bar:
'    frmUpdatePleaseWait.prgUpdate.Value = 20
    dblProgressBarValue = 20 + (80 * (iDropdownListFirstRow / (iDataLastRow - iDataFirstRow)))
    If dblProgressBarValue > 100 Then dblProgressBarValue = 100
'    frmUpdatePleaseWait.prgUpdate.value = dblProgressBarValue
    frmUpdatePleaseWait.lblProgressBar.width = (dblProgressBarValue / 100) * frmUpdatePleaseWait.frameProgressBar.width
    frmUpdatePleaseWait.Repaint
    DoEvents


    'get the mfa internal name of the column for which this will be the dropdown list:
    Set rgListboxMfaInternalColumnName = shIntDropdownListsTable.Cells(iDropdownListFirstRow, iDropdownColumnCol)
    strListboxMfaInternalColumnName = rgListboxMfaInternalColumnName.value
    strListboxMfaInternalColumnNameRegexPattern = RegexPatternEnforceExactMatch(strListboxMfaInternalColumnName)
    
    
    If is_preferences Then
        bApplyToThisTemplate = True
    Else
        'dropdowns:
        'check whether this column name exists in this template,
        'and make an array of matching column headers and column numbers:
        '=========================================================================================================
    '    Set rgFind = rgTemplateHeaders.Find(What:=strListboxMfaInternalColumnName, LookAt:=xlWhole)
        
        bFound = False 'init.
        iLboundMatchingColumnHeaders = 1 'init.
        iUboundMatchingColumnHeaders = 1 'init.
        ReDim strArrayMatchingColumnHeaders(iLboundMatchingColumnHeaders To iUboundMatchingColumnHeaders) As String 'init.
        iUboundMatchingColumnHeaders = UBound(strArrayMatchingColumnHeaders)
        iLboundMatchingColumnHeaders = LBound(strArrayMatchingColumnHeaders)
        For iArrayIndexTemplateHeaders = 1 To iUboundTemplateHeaders
            Set rgArrayItemTemplateHeaders = ArrayTemplateHeaders(iArrayIndexTemplateHeaders)
            For Each rgHeaderCell In rgArrayItemTemplateHeaders 'this would be faster as an array.
                strHeaderCell = rgHeaderCell.value
                
                'get the mfa internal name:
                strHeaderCellMfaInternalName = _
                    GetMfaInternalNameColumnHeaderFromLocalLanguageColumnHeader( _
                        strHeaderCell, shIntTable, iIntTableLocalNameCol, iIntTableMfaInternalNameCol)
                
        '        If strHeaderCell = strListboxMfaInternalColumnName Then  'change this to regextest
                If RegexTest(strListboxMfaInternalColumnNameRegexPattern, strHeaderCellMfaInternalName) Then
                    bFound = True
                   
                    strArrayMatchingColumnHeaders(iUboundMatchingColumnHeaders) = strHeaderCellMfaInternalName
                    iUboundMatchingColumnHeaders = iUboundMatchingColumnHeaders + 1
                    ReDim Preserve strArrayMatchingColumnHeaders(iLboundMatchingColumnHeaders To iUboundMatchingColumnHeaders) As String
        '            Exit For 'NO! There can be multiple hits anywhere in the list.
        
    '                If bFound Then Exit For 'NO!!! There can be more than one matching header in the template.
                                             'For example, "battery-type\d*" in ToysBaby.
        
                End If
            Next rgHeaderCell
            
            If bFound Then Exit For
            
        Next iArrayIndexTemplateHeaders
        
        'remove extra element at end:
        If bFound Then
            iUboundMatchingColumnHeaders = iUboundMatchingColumnHeaders - 1
            ReDim Preserve strArrayMatchingColumnHeaders(iLboundMatchingColumnHeaders To iUboundMatchingColumnHeaders) As String
        End If
        
        If bFound Then
            'that column IS in this template:
            bApplyToThisTemplate = True
        Else
            'that column is NOT in this template:
            bApplyToThisTemplate = False
        End If
        '=========================================================================================================
    End If
    
    

    'check for Template dependencies, and apply only the list(s) for the correct template:
    '=========================================================================================================
'    Stop
    If bApplyToThisTemplate Then
        Set rgTemplateDependencyTest = shIntDropdownListsTable.Cells(iDropdownListFirstRow, iTemplateDependencyTestCol)
        strTemplateDependencyTest = rgTemplateDependencyTest.value
        
        If strTemplateDependencyTest = "" Then
            'there is no template dependency for this row:
            bApplyToThisTemplate = True
        Else
            'test for correct template:
            bApplyToThisTemplate = RegexTest(strTemplateDependencyTest, strInternalTemplateName)
        End If
    End If

    'end of check for Template dependency.
    '=========================================================================================================






    'get the list bounds:
    Set rgDataCategoryItem = shIntDropdownListsTable.Cells(iDropdownListFirstRow, iDropdownColumnCol)
    Set rgNextCellDown = rgDataCategoryItem.Offset(RowOffset:=1, ColumnOffset:=0)
    If rgNextCellDown.value = "" Then
        Set rgFind = rgDataCategoryItem.End(xlDown) 'need to fix for last list; currently sets list to include all rows to bottom of sheet. They are deleted later but would be better not to include them in the first place.
    Else
        Set rgFind = rgNextCellDown
    End If
    iTmpRow = rgFind.Row - 1
    iDropdownListLastRow = iTmpRow
'    If iTmpRow > iDropdownListFirstRow Then
'        iDropdownListLastRow = iTmpRow
'    Else
'        'done.
'        Exit Do
'    End If



    If bApplyToThisTemplate Then
    

        'get the list:
        Set rgDropdownList = shIntDropdownListsTable.Range( _
                             shIntDropdownListsTable.Cells(iDropdownListFirstRow, iTargetLanguageCol), _
                             shIntDropdownListsTable.Cells(iDropdownListLastRow, iTargetLanguageCol))
        
        
        'shrink to fit:
        '(exclude any blank cells at the end of the list) (blank cells are due to another locale having more list items for this list)
        Dim iDropdownListLastOccupiedRow As Long
        Dim vCheckCellValue As Variant
        For iDropdownListLastOccupiedRow = iDropdownListLastRow To iDropdownListFirstRow Step -1
            vCheckCellValue = shIntDropdownListsTable.Cells(iDropdownListLastOccupiedRow, iTargetLanguageCol).value
            If vCheckCellValue <> "" Then
                Exit For
            End If
        Next iDropdownListLastOccupiedRow
        If iDropdownListLastOccupiedRow < iDropdownListFirstRow Then
            'there are no list items:
            bApplyToThisTemplate = False
        End If
        Set rgDropdownList = shIntDropdownListsTable.Range( _
                             shIntDropdownListsTable.Cells(iDropdownListFirstRow, iTargetLanguageCol), _
                             shIntDropdownListsTable.Cells(iDropdownListLastOccupiedRow, iTargetLanguageCol))
                             
    End If
    
    
    If bApplyToThisTemplate Then
        
        If Not is_preferences Then
            'get the column dependency column header, if any:
            Set rgColumnDependencyMfaInternalColumnName = shIntDropdownListsTable.Cells(iDropdownListFirstRow, iColumnDependencyCol)
            strDependencyMfaInternalColumnName = rgColumnDependencyMfaInternalColumnName.value
        
            'get the column dependency test, if any:
            Set rgColumnDependencyTest = shIntDropdownListsTable.Cells(iDropdownListFirstRow, iColumnDependencyTestCol)
            strColumnDependencyTest = rgColumnDependencyTest.value
        End If
        
        
        
        If is_preferences Then
            'appying this preference:

                'move to the next destination column:
                iListCounter = iListCounter + 1

                'copy the list to the dropdown lists sheet:
                shDropdownLists.Cells(LOCAL_DROPDOWN_LISTS_SHEET_HEADER_ROW, iListCounter).value = strListboxMfaInternalColumnName
                Set rgDestDropDownList = shDropdownLists.Range( _
                                            shDropdownLists.Cells( _
                                                LOCAL_DROPDOWN_LISTS_SHEET_FIRST_DATA_ROW, _
                                                iListCounter), _
                                            shDropdownLists.Cells( _
                                                rgDropdownList.Rows.Count + LOCAL_DROPDOWN_LISTS_SHEET_HEADER_ROW, _
                                                iListCounter))
                rgDropdownList.NumberFormat = "@"
                rgDropdownList.Copy Destination:=rgDestDropDownList
                shDropdownLists.Columns(iListCounter).AutoFit

                'get the defined name to apply for the list:
                strListDefinedName = PREFERENCE_DEFINED_NAME_PREFIX & _
                                     Replace(strListboxMfaInternalColumnName, "-", "_")
                                     
                'apply the defined name for the list:
                target_workbook.Names.Add strListDefinedName, rgDestDropDownList
                

        Else
            'loop through *matching* destination columns, applying the dropdown list to each one:
            For iArrayIndexMatchingColumnHeaders = iLboundMatchingColumnHeaders To iUboundMatchingColumnHeaders
                strArrayItemMatchingHeader = strArrayMatchingColumnHeaders(iArrayIndexMatchingColumnHeaders)
            
                
                'move to the next destination column:
                iListCounter = iListCounter + 1
                
                
                'copy the column dependency column header, if any, to the dropdown lists sheet:
                shDropdownLists.Cells(LOCAL_DROPDOWN_LISTS_SHEET_COLUMN_DEPENDENCY_COLUMN_HEADER_ROW, iListCounter).value = _
                                      strDependencyMfaInternalColumnName
                
                
                'copy the column dependency test, if any, to the dropdown lists sheet:
                shDropdownLists.Cells(LOCAL_DROPDOWN_LISTS_SHEET_COLUMN_DEPENDENCY_TEST_ROW, iListCounter).value = _
                                      strColumnDependencyTest
                
                
                'copy the list to the dropdown lists sheet:
                shDropdownLists.Cells(LOCAL_DROPDOWN_LISTS_SHEET_HEADER_ROW, iListCounter).value = strArrayItemMatchingHeader
                Set rgDestDropDownList = shDropdownLists.Range( _
                                            shDropdownLists.Cells( _
                                                LOCAL_DROPDOWN_LISTS_SHEET_FIRST_DATA_ROW, _
                                                iListCounter), _
                                            shDropdownLists.Cells( _
                                                rgDropdownList.Rows.Count + LOCAL_DROPDOWN_LISTS_SHEET_HEADER_ROW, _
                                                iListCounter))
                rgDropdownList.NumberFormat = "@"
                rgDropdownList.Copy Destination:=rgDestDropDownList
                shDropdownLists.Columns(iListCounter).AutoFit
                
                
                
                'get defined name suffix, if any:
            '    Stop
                If strListboxMfaInternalColumnNamePrevious = strArrayItemMatchingHeader Then
                    strDropdownListDefinedNameSuffix = IncrementDefinedNameSuffix(strDropdownListDefinedNameSuffix)
                Else
                    strDropdownListDefinedNameSuffix = ""
                End If
                
                
                'get defined name suffix separator, if any:
                strDropdownListDefinedNameSuffixSeparator = GetDefinedNameSuffixSeparatorFromSuffix(strDropdownListDefinedNameSuffix)
                
                
                'get the defined name to apply for the list:
                Do
                    strListDefinedName = DROPDOWN_LIST_DEFINED_NAME_PREFIX & _
                                         Replace(strArrayItemMatchingHeader, "-", "_") & _
                                         strDropdownListDefinedNameSuffixSeparator & _
                                         strDropdownListDefinedNameSuffix
                    
                    'check whether that defined name already exists, and increment if necessary:
                    'strDefinedNameTmp
                    bFound = False 'init.
                    For Each nameDefinedNameTmp In target_workbook.Names
                        strDefinedNameTmp = nameDefinedNameTmp.Name
                        If strDefinedNameTmp = strListDefinedName Then
                            bFound = True
                            Exit For
                        End If
                    Next nameDefinedNameTmp
                    If bFound Then
                        'this one catches cases where there are multiple groups of numbered
                        'defined names, with the same base name. For example, test1, test2, test3, then
                        'test1, test2, test3 again, etc.
                        strDropdownListDefinedNameSuffix = IncrementDefinedNameSuffix(strDropdownListDefinedNameSuffix)
                        strDropdownListDefinedNameSuffixSeparator = GetDefinedNameSuffixSeparatorFromSuffix(strDropdownListDefinedNameSuffix)
                    End If
                Loop Until Not bFound
                
                'apply the defined name for the list:
                target_workbook.Names.Add strListDefinedName, rgDestDropDownList
                
                strListboxMfaInternalColumnNamePrevious = strArrayItemMatchingHeader
            
            
            Next iArrayIndexMatchingColumnHeaders
        End If
    
    
    End If
    
    iDropdownListFirstRow = iDropdownListLastRow + 1
    
    
Loop Until iDropdownListFirstRow > iDataLastRow


'delete any defined names still associated with the old dropdown lists sheet:
    'do this ONLY when updating template, NOT when making new localized templates from master template;
    'otherwise, it deletes names in the master:
Dim strTargetSheetName As String
If is_preferences Then
    strTargetSheetName = PREFERENCES_WORKSHEET_NAME
Else
    'dropdowns:
    strTargetSheetName = DROPDOWN_LISTS_WORKSHEET_NAME
End If
On Error GoTo BrokenDefinedName
If target_workbook Is ThisWorkbook Then
    For Each nmName In ThisWorkbook.Names
        Set rgName = nmName.RefersToRange
        If nmName.RefersToRange.Parent.Name = strTargetSheetName Then
            nmName.Delete
        End If
    Next nmName
End If
On Error GoTo generr


'delete the old dropdown lists sheet:
For Each shTmp In target_workbook.Worksheets
    If shTmp.Name = strTargetSheetName Then
        bDisplayAlerts = Application.DisplayAlerts
        Application.DisplayAlerts = False
        shTmp.Delete
        Application.DisplayAlerts = bDisplayAlerts
        Exit For
    End If
Next shTmp

'rename and hide the new dropdown lists sheet:
shDropdownLists.Name = strTargetSheetName
shDropdownLists.Visible = False

Application.ScreenUpdating = bScreenUpdating

ApplyDropDownLists = True


Exit Function

generr:

Application.ScreenUpdating = bScreenUpdating

If False Then
    Resume
End If

Exit Function

BrokenDefinedName:
'skip the broken name:
Resume Next

End Function




Public Function RegexTest(pattern_text As String, text_to_test As String) As Boolean

Dim voRegex As Variant 'IRegExp2

On Error GoTo generr

Set voRegex = CreateObject("VBScript.RegExp")

voRegex.Pattern = pattern_text
If voRegex.test(text_to_test) Then
    RegexTest = True
Else
    RegexTest = False
End If

Exit Function

generr:

If False Then
    Resume
End If

End Function



Public Function RegexPatternEnforceExactMatch(pattern_text As String)
    RegexPatternEnforceExactMatch = "^" & pattern_text & "$"
End Function




Function MakeNewTemplateWorkbook(target_language As String) As Workbook

Dim strPath As String
Dim strNewWorkbookName As String
Dim strExtension As String
Dim strNameWithoutExt As String
Dim strNameAfterSubst As String
Dim rgLanguageCell As Range
Dim iLanguageCol As Long
Dim rgTableHeaderRow As Range
Dim iTableHeaderRow As Long
Dim iUrlCategoryRow As Long
Dim strTargetLanguageName As String
Dim shIntlTable As Worksheet
Dim bEnableEventsStatus As Boolean
Dim bDisplayAlerts As Boolean
Dim rgFind As Range
Dim iLastCol As Long
Dim iTargetLanguageCol As Long
Dim iDataCategoryCol As Long
Dim shNewTemplateInternationalData As Worksheet
Dim rgCell As Range
Dim rgHeaderRange As Range
Dim rgDeleteColumns As Range
Dim strURL As String
Dim strOldFilenameSubst As String
Dim strLocalizedFilename As String
'Dim shIntFilenames As Worksheet
Dim iNewSubstCol As Long
Dim iNewSubstRow As Long
Dim strChar As String
Dim iPos As Long
Dim iLen As Long
Dim strLocalTemplatesFolder As String
Dim wbBook As Workbook

'Const FILENAME_SUBSTITUTED_PART_DEFINED_NAME As String = "Localized_Workbooks_Filename_Substituted"
Const LOCALIZED_FILENAME_HEADER As String = "Localized Filename"


On Error GoTo generr

bEnableEventsStatus = Application.EnableEvents

'get filename extension:
If LCase(Right(ThisWorkbook.Name, 4)) = ".xls" Then
    strExtension = LCase(Right(ThisWorkbook.Name, 4))
Else
    strExtension = LCase(Right(ThisWorkbook.Name, 5))
End If



'get the international filenames worksheet:
'Set shIntFilenames = ThisWorkbook.Names(LOCALIZED_FILENAME_HEADER).RefersToRange.Parent

'get the old filename part that will be substituted out:
'strOldFilenameSubst = ThisWorkbook.Names(FILENAME_SUBSTITUTED_PART_DEFINED_NAME).RefersToRange.Value

'get the row of the language of the new filename part that will be substituted in:
Set rgFind = shIntFilenames.Cells.Find(What:=target_language, LookAt:=xlWhole)
If rgFind Is Nothing Then
    shIntFilenames.Visible = xlSheetVisible
    shIntFilenames.Activate
    DoEvents
    AmazonMsgBox GetTranslatedString("unable_to_find_filename_1") & target_language & GetTranslatedString("unable_to_find_filename_2")
    Exit Function
End If
iNewSubstRow = rgFind.Row

'get the filename substitution column for the new filename part that will be substituted in:
Set rgFind = shIntFilenames.Cells.Find(What:=LOCALIZED_FILENAME_HEADER, LookAt:=xlWhole)
If rgFind Is Nothing Then
    shIntFilenames.Visible = xlSheetVisible
    shIntFilenames.Activate
    DoEvents
    AmazonMsgBox GetTranslatedString("unable_to_find_filename_substitution")
    Exit Function
End If
iNewSubstCol = rgFind.Column

'get the localized filename:
strLocalizedFilename = shIntFilenames.Cells(iNewSubstRow, iNewSubstCol).value

'check for invalid characters:
iLen = Len(strLocalizedFilename)
For iPos = 1 To iLen
    strChar = Mid(strLocalizedFilename, iPos, 1)
    Select Case strChar
        Case "\", "/", ":", "*", "?", """", "<", ">", "|"
            shIntFilenames.Visible = xlSheetVisible
            shIntFilenames.Activate
            DoEvents
            AmazonMsgBox GetTranslatedString("invalid_filename_1") & target_language & GetTranslatedString("invalid_filename_2") & _
                   vbNewLine & vbNewLine & _
                   GetTranslatedString("invalid_filename_3")
    Exit Function
    End Select
Next iPos

'get the old filename without extension:
'strNameWithoutExt = Left(ThisWorkbook.Name, Len(ThisWorkbook.Name) - Len(strExtension))

''do the substitution:
'strNameAfterSubst = Replace(strNameWithoutExt, strOldFilenameSubst, strLocalizedFilename)

'get the new full workbook name:
strNewWorkbookName = strLocalizedFilename & strExtension

'get the local templates folder name:
strLocalTemplatesFolder = ThisWorkbook.Names(LOCAL_TEMPLATES_FOLDER_DEFINED_NAME).RefersToRange.value

'get full folder path:
Dim strFullFolderPath As String
strFullFolderPath = ThisWorkbook.Path & "\" & strLocalTemplatesFolder


'check for the local templates folder name, and create it if necessary:
Dim fso As Object
Dim oFolder As Object
Set fso = CreateObject("Scripting.FileSystemObject")
If Not fso.FolderExists(strFullFolderPath) Then
    fso.CreateFolder strFullFolderPath
    DoEvents
End If


'get the full path:
strPath = strFullFolderPath & "\" & strNewWorkbookName

'close if open:
For Each wbBook In Application.Workbooks
    If wbBook.Path & "\" & wbBook.Name = strPath Then
        wbBook.Close SaveChanges:=False
        Exit For
    End If
Next wbBook

'delete if already exists:
If fso.FileExists(strPath) Then
    fso.DeleteFile strPath
    DoEvents
End If

ThisWorkbook.SaveCopyAs strPath
bEnableEventsStatus = Application.EnableEvents
Application.EnableEvents = False
Set MakeNewTemplateWorkbook = Workbooks.Open(strPath)
Application.EnableEvents = bEnableEventsStatus
Set shNewTemplateInternationalData = MakeNewTemplateWorkbook.Worksheets(INT_TABLE_WORKSHEET_NAME)


'remove columns from international table not needed for this language:
Set rgFind = shNewTemplateInternationalData.Cells(INT_TABLE_HEADER_ROW, shNewTemplateInternationalData.Columns.Count).End(xlToLeft)
iLastCol = rgFind.Column
Set rgHeaderRange = shNewTemplateInternationalData.Range(shNewTemplateInternationalData.Cells(INT_TABLE_HEADER_ROW, 1), shNewTemplateInternationalData.Cells(INT_TABLE_HEADER_ROW, iLastCol))
For Each rgCell In rgHeaderRange.Cells
    Select Case rgCell.value
        Case INT_TABLE_DATA_CATEGORY_HEADER
            'skip
        Case INT_TABLE_REFERENCE_HEADER
            'skip
        Case INT_TABLE_NUMBER_FORMAT_HEADER
            'skip
        Case INT_TABLE_MASTER_NAME_HEADER
            'skip
        Case INT_TABLE_MFA_INTERNAL_NAME_HEADER
            'skip
        Case INT_TABLE_TEMPLATE_DEPENDENCY_TEST_HEADER
            'skip
        Case target_language
            'skip
        Case Else
            'add to rgDeleteColumns:
            If rgDeleteColumns Is Nothing Then
                Set rgDeleteColumns = rgCell.EntireColumn
            Else
                Set rgDeleteColumns = Union(rgDeleteColumns, rgCell.EntireColumn)
            End If
    End Select
Next rgCell
rgDeleteColumns.Delete Shift:=xlToLeft



'set URL for local table setting:
Set rgFind = shNewTemplateInternationalData.Rows(INT_TABLE_HEADER_ROW).Find(target_language)
iTargetLanguageCol = rgFind.Column
Set rgFind = shNewTemplateInternationalData.Rows(INT_TABLE_HEADER_ROW).Find(INT_TABLE_DATA_CATEGORY_HEADER)
iDataCategoryCol = rgFind.Column
Set rgFind = shNewTemplateInternationalData.Columns(iDataCategoryCol).Find(DATA_CATEGORY_URL)
iUrlCategoryRow = rgFind.Row
strURL = shNewTemplateInternationalData.Cells(iUrlCategoryRow, iTargetLanguageCol).value
If strURL = "" Then
    AmazonMsgBox GetTranslatedString("missing_url_update_1") & target_language & GetTranslatedString("missing_url_update_2"), vbOKOnly, GetTranslatedString("missing_url")
    Set MakeNewTemplateWorkbook = Nothing
    Exit Function
End If
MakeNewTemplateWorkbook.Names(LOCAL_INT_TABLE_URL_DEFINED_NAME).RefersToRange.value = strURL

'set language in International Settings:
MakeNewTemplateWorkbook.Names(TEMPLATE_LANGUAGE_DEFINED_NAME).RefersToRange.value = target_language


'delete international filenames workbook:
bDisplayAlerts = Application.DisplayAlerts
Application.DisplayAlerts = False
MakeNewTemplateWorkbook.Worksheets(shIntFilenames.Name).Delete
Application.DisplayAlerts = bDisplayAlerts


'MakeNewTemplateWorkbook.Save

Application.EnableEvents = bEnableEventsStatus


Exit Function

generr:

If InStr(Err.Description, "Cannot access") > 0 Then
    Workbooks(strNewWorkbookName).Close SaveChanges:=False
    ThisWorkbook.SaveCopyAs strPath
    Resume Next
Else
    AmazonMsgBox GetTranslatedString("error_occurred_1") & target_language & GetTranslatedString("error_occurred_2"), _
    vbOKOnly, GetTranslatedString("amazon_template_localization")
End If

If False Then
    Resume
End If

Application.EnableEvents = bEnableEventsStatus

End Function

    

Function SwapColumnHeaders(work_book_feed As Workbook, work_sheet_table As Worksheet, _
                           source_language As String, target_language As String, _
                           Optional alt_source_language As String) As Boolean
                           

'returns True on success

Dim wbWorkbook As Workbook
Dim iFeedHeaderRow As Long
Dim rgFeedHeaders As Range
Dim vArrayFeedHeaders As Variant 'must be declared as Variant.
Dim vArrayFeedNumberFormats() As String
Dim rgTableAll As Range
Dim iTableAllLastRow As Long
Dim iTableDataCategoryCol As Long
Dim iTableNumberFormatCol As Long
Dim iTableHeaderSourceColMasterName As Long
Dim iTableHeaderSourceColMfaInternalName As Long
Dim iTableTemplateDependencyTestCol As Long
Dim iTableHeaderTargetCol As Long
Dim iTableCategoryFirstRow As Long
Dim iTableCategoryLastRow As Long
Dim rgTableSourceMasterName As Range
Dim rgTableSourceMfaInternalName As Range
Dim rgTableTarget As Range
Dim rgTableNumberFormat As Range
Dim rgTableTemplateDependencyTest As Range
Dim vArrayTableSourceMasterName As Variant 'must be declared as Variant.
Dim vArrayTableSourceMfaInternalName As Variant 'must be declared as Variant.
Dim vArrayTableTarget As Variant 'must be declared as Variant.
Dim vArrayTableNumberFormat As Variant 'must be declared as Variant.
Dim vArrayTableTemplateDependencyTest As Variant 'must be declared as Variant.
Dim rgTemp As Range
Dim rgFindInRange As Range
Dim iArrayIndexFeedHeaders As Long
Dim iArrayIndexFeedNumberFormat As Long
Dim iArrayIndexTableSource As Long
Dim iArrayIndexTableSourceMfaInternalName As Long
Dim iUboundFeedHeaders As Long
Dim iLboundFeedHeaders As Long
Dim iUboundTableSource As Long
Dim iLboundTableSource As Long
Dim iUboundFeedNumberFormats As Long
Dim vItemFeedHeaders As Variant
Dim vItemTableSource As Variant
Dim vItemTableSourceMasterName As Variant
Dim vItemTableSourceMfaInternalName As Variant
Dim vItemTableTarget As Variant
Dim vItemTableNumberFormat As Variant
Dim vItemTableTemplateDependencyTest As Variant
Dim vItemFeedNumberFormat As Variant
Dim bFound As Boolean
Dim iFeedColumnWidth As Double
Dim iTableColumnWidth As Double
Dim rgCell As Range
Dim rgDeleteColumnsThisLocale As Range
Dim rgColumnToDelete As Range
Dim bEnableEventsStatus As Boolean
Dim bApplyToThisTemplate As Boolean
Dim shWorksheet As Worksheet
Dim strInternalTemplateName As String

Dim ArrayTemplateSheets() As Worksheet
    Dim iUboundTemplateSheets As Long
    Dim iArrayIndexTemplateSheets As Long
    Dim shArrayItemTemplateSheet As Worksheet
    
Dim ArrayTemplateHeaders() As Range
    Dim iUboundTemplateHeaders As Long
    Dim iArrayIndexTemplateHeaders As Long
    Dim rgArrayItemTemplateHeaders As Range

Const DIMENSION_HEADERS_FEED As Long = 2
Const DIMENSION_HEADERS_TABLE As Long = 1
Const ELEMENT_HEADERS As Long = 1
Const ELEMENT_NUMBERFORMATS As Long = 1
Const ELEMENT_TESTS As Long = 1
'Const DIMENSION_ROWS_FEED As Long = 2


On Error GoTo generr

Set wbWorkbook = ThisWorkbook 'shArrayItemTemplateSheet.Parent

strInternalTemplateName = GetInternalTemplateName(ThisWorkbook)


'get array of template sheets:
ReDim ArrayTemplateSheets(0 To 0) As Worksheet
iUboundTemplateSheets = UBound(ArrayTemplateSheets)
For Each shWorksheet In work_book_feed.Worksheets
    If InStr(shWorksheet.CodeName, "shTemplate") > 0 Then
        iUboundTemplateSheets = iUboundTemplateSheets + 1
        ReDim Preserve ArrayTemplateSheets(0 To iUboundTemplateSheets) As Worksheet
        Set ArrayTemplateSheets(iUboundTemplateSheets) = shWorksheet
    End If
Next shWorksheet



For iArrayIndexTemplateSheets = 1 To iUboundTemplateSheets

    Set shArrayItemTemplateSheet = ArrayTemplateSheets(iArrayIndexTemplateSheets)
    Set rgDeleteColumnsThisLocale = Nothing
    shArrayItemTemplateSheet.Unprotect 'for NumberFormat.


    'find range of headers:
    iFeedHeaderRow = GetHeaderRow(shArrayItemTemplateSheet)
    Set rgFeedHeaders = GetHeaderRange(shArrayItemTemplateSheet, iFeedHeaderRow)
    If rgFeedHeaders.Cells.Count = 1 Then
        'add a cell to the range:
        Set rgFeedHeaders = rgFeedHeaders.Resize(, 2)
    End If
    vArrayFeedHeaders = rgFeedHeaders
    iUboundFeedNumberFormats = rgFeedHeaders.Cells.Count
    ReDim vArrayFeedNumberFormats(1 To iUboundFeedNumberFormats) As String
    DoEvents
    
    'get whole table range:
    Set rgTableAll = work_sheet_table.Range("A1").CurrentRegion
    
    'get category, number format, source, and target table columns:
    iTableDataCategoryCol = FindColumn(work_sheet_table.Rows(INT_TABLE_HEADER_ROW), INT_TABLE_DATA_CATEGORY_HEADER)
    iTableNumberFormatCol = FindColumn(work_sheet_table.Rows(INT_TABLE_HEADER_ROW), INT_TABLE_NUMBER_FORMAT_HEADER)
    iTableTemplateDependencyTestCol = FindColumn(work_sheet_table.Rows(INT_TABLE_HEADER_ROW), INT_TABLE_TEMPLATE_DEPENDENCY_TEST_HEADER)
    iTableHeaderSourceColMasterName = FindColumn(work_sheet_table.Rows(INT_TABLE_HEADER_ROW), source_language)
    iTableHeaderSourceColMfaInternalName = FindColumn(work_sheet_table.Rows(INT_TABLE_HEADER_ROW), alt_source_language)
    iTableHeaderTargetCol = FindColumn(work_sheet_table.Rows(INT_TABLE_HEADER_ROW), target_language)
    
    'find first and last rows of column headers category in table:
    Set rgFindInRange = work_sheet_table.Range(work_sheet_table.Cells(INT_TABLE_HEADER_ROW, iTableDataCategoryCol), work_sheet_table.Cells(work_sheet_table.Rows.Count, iTableDataCategoryCol))
    iTableCategoryFirstRow = FindCategoryFirstRow(rgFindInRange, DATA_CATEGORY_COLUMN_HEADERS)
    iTableCategoryLastRow = FindCategoryLastRow(rgFindInRange, DATA_CATEGORY_COLUMN_HEADERS)
    
    'get source and target ranges:
    Set rgTableSourceMasterName = work_sheet_table.Range(work_sheet_table.Cells(iTableCategoryFirstRow, iTableHeaderSourceColMasterName), work_sheet_table.Cells(iTableCategoryLastRow, iTableHeaderSourceColMasterName))
    Set rgTableSourceMfaInternalName = work_sheet_table.Range(work_sheet_table.Cells(iTableCategoryFirstRow, iTableHeaderSourceColMfaInternalName), work_sheet_table.Cells(iTableCategoryLastRow, iTableHeaderSourceColMfaInternalName))
    Set rgTableTemplateDependencyTest = work_sheet_table.Range(work_sheet_table.Cells(iTableCategoryFirstRow, iTableTemplateDependencyTestCol), work_sheet_table.Cells(iTableCategoryLastRow, iTableTemplateDependencyTestCol))
    Set rgTableTarget = work_sheet_table.Range(work_sheet_table.Cells(iTableCategoryFirstRow, iTableHeaderTargetCol), work_sheet_table.Cells(iTableCategoryLastRow, iTableHeaderTargetCol))
    Set rgTableNumberFormat = work_sheet_table.Range(work_sheet_table.Cells(iTableCategoryFirstRow, iTableNumberFormatCol), work_sheet_table.Cells(iTableCategoryLastRow, iTableNumberFormatCol))
    vArrayTableSourceMasterName = rgTableSourceMasterName
    vArrayTableSourceMfaInternalName = rgTableSourceMfaInternalName
    vArrayTableTemplateDependencyTest = rgTableTemplateDependencyTest
    vArrayTableTarget = rgTableTarget
    vArrayTableNumberFormat = rgTableNumberFormat
    
    'swap:
    iLboundFeedHeaders = LBound(vArrayFeedHeaders, DIMENSION_HEADERS_FEED)
    iUboundFeedHeaders = UBound(vArrayFeedHeaders, DIMENSION_HEADERS_FEED)
    iLboundTableSource = LBound(vArrayTableSourceMasterName, DIMENSION_HEADERS_TABLE)
    iUboundTableSource = UBound(vArrayTableSourceMasterName, DIMENSION_HEADERS_TABLE)
    For iArrayIndexFeedHeaders = iLboundFeedHeaders To iUboundFeedHeaders
        'for each of this workbook's template headers:
        DoEvents
        vItemFeedHeaders = vArrayFeedHeaders(ELEMENT_HEADERS, iArrayIndexFeedHeaders)
        bFound = False 'init.
        
        For iArrayIndexTableSource = iLboundTableSource To iUboundTableSource
            'For each of the headers in the html table:
    
            DoEvents
    
    
    
            'check for Template dependency, and
            'process only those column headers in the table whose row in the HTML table
            'doesn't fail the template dependency test:
            '=========================================================================================================
            vItemTableTemplateDependencyTest = vArrayTableTemplateDependencyTest(iArrayIndexTableSource, ELEMENT_TESTS)
            
            If vItemTableTemplateDependencyTest = "" Then
                'there is no template dependency for this table row:
                bApplyToThisTemplate = True
            Else
                'test for correct template:
                bApplyToThisTemplate = RegexTest(CStr(vItemTableTemplateDependencyTest), strInternalTemplateName)
            End If
        
            'end of check for Template dependency.
            '=========================================================================================================
    
            
            If bApplyToThisTemplate Then
    
        
                vItemTableSourceMasterName = vArrayTableSourceMasterName(iArrayIndexTableSource, ELEMENT_HEADERS)
                vItemTableSourceMfaInternalName = vArrayTableSourceMfaInternalName(iArrayIndexTableSource, ELEMENT_HEADERS)
                
    '            Debug.Print vItemTableSourceMfaInternalName, vItemTableSourceMasterName
                
                If vItemTableSourceMasterName = vItemFeedHeaders Then
                    bFound = True
                    vItemTableSource = vItemTableSourceMasterName
                '12/12/07: commented this out because it was causing headers with wrong case formatting
                'to be used in localized templates. If this is needed, then it will have to come after looking
                'through all master names first:
    '            ElseIf vItemTableSourceMfaInternalName = vItemFeedHeaders Then
    '                bFound = True
    '                vItemTableSource = vItemTableSourceMfaInternalName
                End If
                
                If bFound Then
                    vItemTableTarget = vArrayTableTarget(iArrayIndexTableSource, ELEMENT_HEADERS)
                    
                    If vItemTableTarget = "" Then
                        'remove that column from this locale:
                        Set rgColumnToDelete = rgFeedHeaders(iArrayIndexFeedHeaders).EntireColumn
                        If rgDeleteColumnsThisLocale Is Nothing Then
                            Set rgDeleteColumnsThisLocale = rgColumnToDelete
                        Else
                            Set rgDeleteColumnsThisLocale = Union( _
                                                            rgDeleteColumnsThisLocale, _
                                                            rgColumnToDelete)
                        End If
        
                    Else
                        'swap:
                        vArrayFeedHeaders(ELEMENT_HEADERS, iArrayIndexFeedHeaders) = vItemTableTarget
                        vItemTableNumberFormat = GetTableNumberFormatItem(vArrayTableNumberFormat, iArrayIndexTableSource, ELEMENT_NUMBERFORMATS)
                        vArrayFeedNumberFormats(iArrayIndexFeedHeaders) = vItemTableNumberFormat
                    End If
                    
                    
        
                    
                    Exit For
                End If
            
            End If 'If bApplyToThisTemplate Then
            
        Next iArrayIndexTableSource
        
        If Not bFound Then
            'skip blanks:
            If vItemFeedHeaders = "" Then
                'skip
            Else
                'couldn't find the column header. can't proceed.
    '            MsgBox "Can't find column header """ & vItemFeedHeaders & """" & _
    '                   " (from " & GetRefAsString(rgFeedHeaders(iArrayIndexFeedHeaders)) & ")" & _
    '                   " in " & GetRefAsString(rgTableSourceMasterName) & _
    '                   " (" & alt_source_language & " column headers)" & _
    '                   " or in " & GetRefAsString(rgTableSourceMfaInternalName) & _
    '                   " (" & source_language & " column headers)" & _
    '                   " in a row that passes all dependency tests." & _
    '                   vbNewLine & vbNewLine & _
    '                   "Please fix and restart.", _
    '                   vbCritical + vbOKOnly, "Can't Find Header"
                AmazonMsgBox GetTranslatedString("cant_find_column_header_1") & vItemFeedHeaders & _
                       GetTranslatedString("cant_find_column_header_2") & GetRefAsString(rgFeedHeaders(iArrayIndexFeedHeaders)) & _
                       GetTranslatedString("cant_find_column_header_3") & GetRefAsString(rgTableSourceMfaInternalName) & _
                       GetTranslatedString("cant_find_column_header_4") & source_language & _
                       GetTranslatedString("cant_find_column_header_5") & _
                       vbNewLine & vbNewLine & _
                       GetTranslatedString("cant_find_column_header_6"), _
                       vbOKOnly, GetTranslatedString("cant_find_header")
                shArrayItemTemplateSheet.Parent.Close SaveChanges:=False
                SwapColumnHeaders = False
                Unload frmProgressIntTemplates
                Exit Function
            End If
        End If
        
    Next iArrayIndexFeedHeaders
    
    
    'apply number formats:
    For iArrayIndexFeedNumberFormat = 1 To iUboundFeedNumberFormats
        vItemFeedNumberFormat = vArrayFeedNumberFormats(iArrayIndexFeedNumberFormat)
        rgFeedHeaders(iArrayIndexFeedNumberFormat).EntireColumn.NumberFormat = vItemFeedNumberFormat
    Next iArrayIndexFeedNumberFormat
    
    
    'set range of column headers to the array that has been modified:
    rgFeedHeaders = vArrayFeedHeaders
    
    
    'remove columns that don't belong in this locale:
    If Not rgDeleteColumnsThisLocale Is Nothing Then
        bEnableEventsStatus = Application.EnableEvents
        Application.EnableEvents = False
        rgDeleteColumnsThisLocale.Delete
        Application.EnableEvents = bEnableEventsStatus
    End If
    
    
    'autofit, but keep columns at least as wide as original:
        'delete contents of row 1 to avoid having them affect autofit, then replace after autofit.
    Dim rgRowOne As Range
    Dim vRowOne As Variant 'must be declared as a Variant.
    Set rgRowOne = shArrayItemTemplateSheet.Rows(1)
    vRowOne = rgRowOne
    bEnableEventsStatus = Application.EnableEvents
    Application.EnableEvents = False
    rgRowOne.ClearContents
    Application.EnableEvents = bEnableEventsStatus
    For Each rgCell In rgFeedHeaders
        iFeedColumnWidth = rgCell.ColumnWidth
        rgCell.EntireColumn.AutoFit
        If iFeedColumnWidth > rgCell.ColumnWidth Then
            rgCell.ColumnWidth = iFeedColumnWidth
        End If
    Next rgCell
    rgRowOne = vRowOne


    Call ProtectSheet(shArrayItemTemplateSheet)
    

Next iArrayIndexTemplateSheets



SwapColumnHeaders = True

Exit Function

generr:

'Stop
If False Then
    Resume
End If

End Function



Function GetLocalToolbarButtonCaption(caption_master_name As String, _
                                      target_language As String, _
                                      work_sheet_table As Worksheet) As String
                                      
    GetLocalToolbarButtonCaption = GetLocalToolbarButtonSetting( _
                                      DATA_CATEGORY_TOOLBAR_BUTTON_CAPTIONS, _
                                      caption_master_name, _
                                      target_language, _
                                      work_sheet_table)
End Function


Function GetLocalToolbarButtonTooltip(tooltip_master_name As String, _
                                      target_language As String, _
                                      work_sheet_table As Worksheet) As String
                                      
    GetLocalToolbarButtonTooltip = GetLocalToolbarButtonSetting( _
                                      DATA_CATEGORY_TOOLBAR_BUTTON_TOOLTIPS, _
                                      tooltip_master_name, _
                                      target_language, _
                                      work_sheet_table)
End Function



Function GetLocalToolbarButtonSetting(data_category As String, _
                                      item_master_name As String, _
                                      target_language As String, _
                                      work_sheet_table As Worksheet) As String

'data_category is DATA_CATEGORY_TOOLBAR_BUTTON_CAPTIONS or DATA_CATEGORY_TOOLBAR_BUTTON_TOOLTIPS.

Dim wbWorkbook As Workbook
Dim rgTableAll As Range
Dim rgFindInRange As Range
Dim rgTableMasterName As Range
Dim rgFindMasterNameItem As Range
Dim rgTargetCaptionItem As Range

Dim iTableDataCategoryCol As Long
Dim iTableHeaderMasterNameCol As Long
Dim iTableHeaderTargetCol As Long
Dim iTableCategoryFirstRow As Long
Dim iTableCategoryLastRow As Long
Dim iFindMasterNameItemRow As Long

On Error GoTo generr

Set wbWorkbook = ThisWorkbook

'get whole table range:
Set rgTableAll = work_sheet_table.Range("A1").CurrentRegion

'get category, source, and target table columns:
iTableDataCategoryCol = FindColumn(work_sheet_table.Rows(INT_TABLE_HEADER_ROW), INT_TABLE_DATA_CATEGORY_HEADER)
iTableHeaderMasterNameCol = FindColumn(work_sheet_table.Rows(INT_TABLE_HEADER_ROW), INT_TABLE_MASTER_NAME_HEADER)
iTableHeaderTargetCol = FindColumn(work_sheet_table.Rows(INT_TABLE_HEADER_ROW), target_language)

'find first and last rows of column headers category in table:
Set rgFindInRange = work_sheet_table.Range(work_sheet_table.Cells(INT_TABLE_HEADER_ROW, iTableDataCategoryCol), work_sheet_table.Cells(work_sheet_table.Rows.Count, iTableDataCategoryCol))
iTableCategoryFirstRow = FindCategoryFirstRow(rgFindInRange, data_category)
iTableCategoryLastRow = FindCategoryLastRow(rgFindInRange, data_category)

'get master name item row:
Set rgTableMasterName = work_sheet_table.Range(work_sheet_table.Cells(iTableCategoryFirstRow, iTableHeaderMasterNameCol), work_sheet_table.Cells(iTableCategoryLastRow, iTableHeaderMasterNameCol))
Set rgFindMasterNameItem = rgTableMasterName.Find(What:=item_master_name, LookAt:=xlWhole)
If rgFindMasterNameItem Is Nothing Then
    'not found.
    GetLocalToolbarButtonSetting = ""
    Exit Function
End If
iFindMasterNameItemRow = rgFindMasterNameItem.Row

'get target caption:
Set rgTargetCaptionItem = work_sheet_table.Range(work_sheet_table.Cells(iFindMasterNameItemRow, iTableHeaderTargetCol), work_sheet_table.Cells(iFindMasterNameItemRow, iTableHeaderTargetCol))
GetLocalToolbarButtonSetting = rgTargetCaptionItem.value

Exit Function

generr:

'Stop
If False Then
    Resume
End If

End Function



Public Function ApplyLocalToolbarButtonCaptions(target_language As String, _
                                      work_sheet_table As Worksheet) As Boolean

Dim wbLocalWorkbook As Workbook
Dim rgSetting As Range
Dim ArrayCaptions()
Dim ArrayMasterNames()
Dim iArrayIndex As Long
Dim strCaptionDefinedNameItem As String
Dim strMasterNameItem As String

Set wbLocalWorkbook = work_sheet_table.Parent

' added 08/11/10 by atambe
If Not bChinaTemplate Then
    ' modified by atambe 07/29/10: added credentials entry
    ArrayCaptions = Array(TOOLBAR_NAME_DEFINED_NAME, _
                          TOOLBAR_LOGO_CAPTION_DEFINED_NAME, _
                          TOOLBAR_BUTTON_CAPTION_BULK_LOOKUP_DEFINED_NAME, _
                          TOOLBAR_BUTTON_CAPTION_TURN_ON_PRODUCT_LOOKUP_DEFINED_NAME, _
                          TOOLBAR_BUTTON_CAPTION_TURN_OFF_PRODUCT_LOOKUP_DEFINED_NAME, _
                          TOOLBAR_BUTTON_CAPTION_PREFERENCES_DEFINED_NAME, _
                          TOOLBAR_BUTTON_CAPTION_VALIDATE_DEFINED_NAME, _
                          TOOLBAR_BUTTON_CAPTION_UPLOAD_DEFINED_NAME, _
                          TOOLBAR_BUTTON_CAPTION_CREDENTIALS_DEFINED_NAME, _
                          TOOLBAR_BUTTON_CAPTION_IMPORT_DEFINED_NAME, _
                          TOOLBAR_BUTTON_CAPTION_UPDATE_DEFINED_NAME)
    
    
    'need to come up with a better way than this array:
    ' modified by atambe 07/29/10: added credentials entry
    ArrayMasterNames = Array("Amazon Upload Manager", _
                             "Amazon Logo", _
                             "Bulk Lookup", _
                             "Turn on Product Lookup", _
                             "Turn off Product Lookup", _
                             "Preferences", _
                             "Validate", _
                             "Upload", _
                             "Credentials", _
                             "Import", _
                             "Update")
Else
    ' modified by atambe 07/29/10: added credentials entry
    ArrayCaptions = Array(TOOLBAR_NAME_DEFINED_NAME, _
                          TOOLBAR_LOGO_CAPTION_DEFINED_NAME, _
                          TOOLBAR_BUTTON_CAPTION_BULK_LOOKUP_DEFINED_NAME, _
                          TOOLBAR_BUTTON_CAPTION_TURN_ON_PRODUCT_LOOKUP_DEFINED_NAME, _
                          TOOLBAR_BUTTON_CAPTION_TURN_OFF_PRODUCT_LOOKUP_DEFINED_NAME, _
                          TOOLBAR_BUTTON_CAPTION_PREFERENCES_DEFINED_NAME, _
                          TOOLBAR_BUTTON_CAPTION_UPLOAD_DEFINED_NAME, _
                          TOOLBAR_BUTTON_CAPTION_CREDENTIALS_DEFINED_NAME, _
                          TOOLBAR_BUTTON_CAPTION_IMPORT_DEFINED_NAME, _
                          TOOLBAR_BUTTON_CAPTION_UPDATE_DEFINED_NAME)
    
    
    'need to come up with a better way than this array:
    ' modified by atambe 07/29/10: added credentials entry
    ArrayMasterNames = Array("Amazon Upload Manager", _
                             "Amazon Logo", _
                             "Bulk Lookup", _
                             "Turn on Product Lookup", _
                             "Turn off Product Lookup", _
                             "Preferences", _
                             "Upload", _
                             "Credentials", _
                             "Import", _
                             "Update")
End If

For iArrayIndex = LBound(ArrayCaptions) To UBound(ArrayCaptions)
    strCaptionDefinedNameItem = ArrayCaptions(iArrayIndex)
    Set rgSetting = wbLocalWorkbook.Names(strCaptionDefinedNameItem).RefersToRange
    If rgSetting Is Nothing Then
        'can't find it, so skip.
    Else
        strMasterNameItem = ArrayMasterNames(iArrayIndex)
        rgSetting.value = GetLocalToolbarButtonCaption(strMasterNameItem, target_language, work_sheet_table)
    End If
Next iArrayIndex

ApplyLocalToolbarButtonCaptions = True

End Function




Public Function ApplyLocalToolbarButtonTooltips(target_language As String, _
                                      work_sheet_table As Worksheet) As Boolean

Dim wbLocalWorkbook As Workbook
Dim rgSetting As Range
Dim ArrayTooltips()
Dim ArrayMasterNames()
Dim iArrayIndex As Long
Dim strCaptionDefinedNameItem As String
Dim strMasterNameItem As String

Set wbLocalWorkbook = work_sheet_table.Parent

' added 08/11/10 by atambe
If Not bChinaTemplate Then
    ' modified by atambe 07/29/10: added credentials entry
    ArrayTooltips = Array(TOOLBAR_LOGO_TOOLTIP_DEFINED_NAME, _
                          TOOLBAR_BUTTON_TOOLTIP_BULK_LOOKUP_DEFINED_NAME, _
                          TOOLBAR_BUTTON_TOOLTIP_TURN_ON_PRODUCT_LOOKUP_DEFINED_NAME, _
                          TOOLBAR_BUTTON_TOOLTIP_TURN_OFF_PRODUCT_LOOKUP_DEFINED_NAME, _
                          TOOLBAR_BUTTON_TOOLTIP_PREFERENCES_DEFINED_NAME, _
                          TOOLBAR_BUTTON_TOOLTIP_VALIDATE_DEFINED_NAME, _
                          TOOLBAR_BUTTON_TOOLTIP_UPLOAD_DEFINED_NAME, _
                          TOOLBAR_BUTTON_TOOLTIP_CREDENTIALS_DEFINED_NAME, _
                          TOOLBAR_BUTTON_TOOLTIP_IMPORT_DEFINED_NAME, _
                          TOOLBAR_BUTTON_TOOLTIP_UPDATE_DEFINED_NAME)
    
    
    'need to come up with a better way than this array:
    ' modified by atambe 07/29/10: added credentials entry
    ArrayMasterNames = Array("Amazon Logo", _
                             "Bulk Lookup", _
                             "Turn on Product Lookup", _
                             "Turn off Product Lookup", _
                             "Preferences", _
                             "Validate", _
                             "Upload", _
                             "Credentials", _
                             "Import", _
                             "Update")
Else
    ' modified by atambe 07/29/10: added credentials entry
    ArrayTooltips = Array(TOOLBAR_LOGO_TOOLTIP_DEFINED_NAME, _
                          TOOLBAR_BUTTON_TOOLTIP_BULK_LOOKUP_DEFINED_NAME, _
                          TOOLBAR_BUTTON_TOOLTIP_TURN_ON_PRODUCT_LOOKUP_DEFINED_NAME, _
                          TOOLBAR_BUTTON_TOOLTIP_TURN_OFF_PRODUCT_LOOKUP_DEFINED_NAME, _
                          TOOLBAR_BUTTON_TOOLTIP_PREFERENCES_DEFINED_NAME, _
                          TOOLBAR_BUTTON_TOOLTIP_UPLOAD_DEFINED_NAME, _
                          TOOLBAR_BUTTON_TOOLTIP_CREDENTIALS_DEFINED_NAME, _
                          TOOLBAR_BUTTON_TOOLTIP_IMPORT_DEFINED_NAME, _
                          TOOLBAR_BUTTON_TOOLTIP_UPDATE_DEFINED_NAME)
    
    
    'need to come up with a better way than this array:
    ' modified by atambe 07/29/10: added credentials entry
    ArrayMasterNames = Array("Amazon Logo", _
                             "Bulk Lookup", _
                             "Turn on Product Lookup", _
                             "Turn off Product Lookup", _
                             "Preferences", _
                             "Upload", _
                             "Credentials", _
                             "Import", _
                             "Update")
End If

For iArrayIndex = LBound(ArrayTooltips) To UBound(ArrayTooltips)
    strCaptionDefinedNameItem = ArrayTooltips(iArrayIndex)
    Set rgSetting = wbLocalWorkbook.Names(strCaptionDefinedNameItem).RefersToRange
    If rgSetting Is Nothing Then
        'can't find it, so skip.
    Else
        strMasterNameItem = ArrayMasterNames(iArrayIndex)
        rgSetting.value = GetLocalToolbarButtonTooltip(strMasterNameItem, target_language, work_sheet_table)
    End If
Next iArrayIndex

ApplyLocalToolbarButtonTooltips = True

End Function

Function GetTableNumberFormatItem(array_table_number_format As Variant, array_index, array_element) As Variant

GetTableNumberFormatItem = array_table_number_format(array_index, array_element)
If Left(GetTableNumberFormatItem, 1) = "'" Then
    GetTableNumberFormatItem = Right(GetTableNumberFormatItem, Len(GetTableNumberFormatItem) - 1)
ElseIf Right(GetTableNumberFormatItem, 1) = """" And Left(GetTableNumberFormatItem, 1) = """" Then
    GetTableNumberFormatItem = Mid(GetTableNumberFormatItem, 2, Len(GetTableNumberFormatItem) - 2)
End If

End Function










Function FindColumn(find_in_range As Range, find_what As String, Optional find_alternate As String) As Long

Dim rgTemp As Range

On Error GoTo generr

Set rgTemp = find_in_range.Find(find_what)

If rgTemp Is Nothing Then
    Set rgTemp = find_in_range.Find(find_alternate)
End If


FindColumn = rgTemp.Column


Exit Function

generr:

FindColumn = -1

End Function



Function FindCategoryFirstRow(find_in_range As Range, category_name_column_headers As String) As Long

Dim rgTemp As Range

Set rgTemp = find_in_range.Find(What:=category_name_column_headers, LookAt:=xlWhole, SearchDirection:=xlNext)
FindCategoryFirstRow = rgTemp.Row

End Function


Function FindCategoryLastRow(find_in_range As Range, category_name_column_headers As String) As Long

Dim rgTemp As Range

Set rgTemp = find_in_range.Find(What:=category_name_column_headers, LookAt:=xlWhole, SearchDirection:=xlPrevious)
FindCategoryLastRow = rgTemp.Row

End Function




Function GetRefAsString(ref_range As Range) As String

GetRefAsString = "'" & ref_range.Parent.Name & "'!" & ref_range.Address(False, False)

End Function



'Public Function GetIntItem(item_category As String, item_reference As String, language_name As String)
'
'Dim shIntData As Worksheet
'Dim rgFind As Range
'Dim rgFindInRange As Range
'Dim iDataCategoryCol As Long
'Dim iReferenceCol As Long
'Dim iLanguageCol As Long
'
'Set shIntData = ThisWorkbook.Worksheets(INT_TABLE_WORKSHEET_NAME)
'
''get column numbers:
'Set rgFind = shIntData.Rows(INT_TABLE_HEADER_ROW).Find(INT_TABLE_DATA_CATEGORY_HEADER)
'iDataCategoryCol = rgFind.Column
'Set rgFind = shIntData.Rows(INT_TABLE_HEADER_ROW).Find(INT_TABLE_REFERENCE_HEADER)
'iReferenceCol = rgFind.Column
'Set rgFind = shIntData.Rows(INT_TABLE_HEADER_ROW).Find(language_name)
'iLanguageCol = rgFind.Column
'
''find first and last rows of column headers category in table:
'Set rgFindInRange = work_sheet_table.Range(work_sheet_table.Cells(INT_TABLE_HEADER_ROW, iTableDataCategoryCol), work_sheet_table.Cells(work_sheet_table.Rows.Count, iTableDataCategoryCol))
'iTableCategoryFirstRow = FindCategoryFirstRow(rgFindInRange, DATA_CATEGORY_COLUMN_HEADERS)
'iTableCategoryLastRow = FindCategoryLastRow(rgFindInRange, DATA_CATEGORY_COLUMN_HEADERS)
'
'
'End Function



'Public Function SetTemplateFirstRowProtection( _
'                    target_workbook As Workbook, _
'                    Optional turn_on As Boolean, Optional turn_off As Boolean, _
'                    Optional toggle_status As Boolean) As Boolean
'
''usage:
''must set one, and only one, of the optional args to true. Use named args for clarity.
''if called without any of the optional args, no action will be taken.
''if more than one of the optional args is set to true, the first one wins, and the others are ignored.
'
'Dim bTurnOn As Boolean
'Dim bTurnOff As Boolean
'Dim bToggle As Boolean
'Dim shTemplate As Worksheet
'
'If turn_on Then
'    bTurnOn = True
'ElseIf turn_off Then
'    bTurnOff = True
'ElseIf toggle_status Then
'    bToggle = True
'Else
'    'no action specified:
'    Exit Function
'End If
'
'For Each shTemplate In target_workbook.Worksheets
'    If InStr(shTemplate.CodeName, "shTemplate") > 0 Then
'        If bTurnOn Then
'            '
'        ElseIf bTurnOff Then
'            '
'        Else
'            '
'        End If
'
'    End If
'Next shTemplate
'
'End Function
'
'
'
'Sub testme()
'
'Dim bRet As Boolean
'
'bRet = SetTemplateFirstRowProtection(toggle_status:=True)
'
'End Sub
Attribute VB_Name = "modMWS"
' Added for MWS integration
' Abhijit Tambe, July 2010

Option Explicit

Public securityPassword As String

'==========================================================================================
'For 64-bit compatibility.

'MSDN: Compatibility Between the 32-bit and 64-bit Versions of Office 2010:
    'http://msdn.microsoft.com/en-us/library/ee691831.aspx
'Technet: Microsoft Office Code Compatibility Inspector:
    'http://technet.microsoft.com/en-us/library/ee833946.aspx
'Samples:
    'http://www.jkp-ads.com/articles/apideclarations.asp
'Windows API functions that were modified/added for 64-bit Windows:
    'http://msdn.microsoft.com/en-us/library/aa383663(VS.85).aspx

'PtrSafe:
    'For Excel 2010 and later (#Vba7 = True), change "Declare" to "Declare PtrSafe".
'LongPtr:
    'For Excel 2010 and later (#Vba7 = True), change the data type of handles and pointers
    'from Long to LongPtr. Leave pointers to strings as String.
'LongLong:
    'For 64-bit Excel (#Win64 = True), change Long (except for handles and pointers!) to LongLong

#If Mac Then
    'Running on MacIntosh. Do nothing.
#ElseIf VBA7 Then
    'Excel 2010 or later:
     #If Win64 Then
        '64-bit Excel, 2010 or later:
        'Use PtrSafe, LongPtr, and LongLong:
        
            Private Declare PtrSafe Sub GetSystemTime Lib "kernel32.dll" (lpSystemTime As SYSTEMTIME)
             
            Private Type SYSTEMTIME
                wYear As Integer
                wMonth As Integer
                wDayOfWeek As Integer
                wDay As Integer
                wHour As Integer
                wMinute As Integer
                wSecond As Integer
                wMilliseconds As Integer
            End Type

     #Else
        '32-bit Excel 2010 or later:
        'Use PtrSafe and LongPtr, but NOT LongLong:

            Private Declare PtrSafe Sub GetSystemTime Lib "kernel32.dll" (lpSystemTime As SYSTEMTIME)
             
            Private Type SYSTEMTIME
                wYear As Integer
                wMonth As Integer
                wDayOfWeek As Integer
                wDay As Integer
                wHour As Integer
                wMinute As Integer
                wSecond As Integer
                wMilliseconds As Integer
            End Type
        
     #End If
#Else
    'Excel 2007 or earlier:

        Private Declare Sub GetSystemTime Lib "kernel32.dll" (lpSystemTime As SYSTEMTIME)
         
        Private Type SYSTEMTIME
            wYear As Integer
            wMonth As Integer
            wDayOfWeek As Integer
            wDay As Integer
            wHour As Integer
            wMinute As Integer
            wSecond As Integer
            wMilliseconds As Integer
        End Type

#End If

'==========================================================================================



Public Sub ResetSecurityPassword()
   securityPassword = ""
End Sub


Public Sub SetSecurityPassword(pass As String)
   securityPassword = pass
End Sub


Public Function GetSecurityPassword() As String
   GetSecurityPassword = securityPassword
End Function


' check if security password has already been entered, and prompt if not; also check to see if mws credentials are stored in the registry
Public Function CheckSecurityPassword() As Boolean
    If Not CheckCredentials Then
        Dim choice As Integer
        choice = AmazonMsgBox(GetTranslatedString("mws_credentials_required"), vbYesNo, GetTranslatedString("mws_credentials_missing"))
        If choice = vbYes Then frmCredentials.Show vbModal
    End If
    
    If CheckCredentials Then
        If securityPassword = "" Then
            frmSecurityPassword.Show
            If securityPassword = "" Then
                CheckSecurityPassword = False
                Exit Function
            End If
        End If
    Else
        CheckSecurityPassword = False
        Exit Function
    End If
    
    CheckSecurityPassword = True
End Function


' check to see if mws credentials are stored in the registry
Public Function CheckCredentials() As Boolean
    Dim credentialsArray(0 To 4) As String
    Dim i As Integer
    
    credentialsArray(0) = GetSetting("Amazon", "MWS", "Marketplace", "")
    credentialsArray(1) = GetSetting("Amazon", "MWS", "Merchant", "")
    credentialsArray(2) = GetSetting("Amazon", "MWS", "AccessKey", "")
    credentialsArray(3) = GetSetting("Amazon", "MWS", "SAK", "")
    credentialsArray(4) = GetSetting("Amazon", "MWS", "SecurityPassword", "")
    
    ' this implies that at least one credential is not in the registry
    For i = LBound(credentialsArray) To UBound(credentialsArray)
        If credentialsArray(i) = "" Then
            CheckCredentials = False
            Exit Function
        End If
    Next
        
    CheckCredentials = True
End Function


' validate the specified security password
Public Function ValidateSecurityPassword(password As String) As Boolean
    If Not CheckCredentials Then
        AmazonMsgBox GetTranslatedString("mws_credentials_invalid_missing"), vbOKOnly, GetTranslatedString("mws_credentials_invalid")
        ValidateSecurityPassword = False
        Exit Function
    End If
    
    If GetContentMD5String(password) <> GetSetting("Amazon", "MWS", "SecurityPassword", "") Then
        AmazonMsgBox GetTranslatedString("sec_pass_invalid_long"), vbOKOnly, GetTranslatedString("sec_pass_invalid")
        ValidateSecurityPassword = False
        Exit Function
    End If
    
    ValidateSecurityPassword = True
End Function


' validate the specified credentials using the mws service
Public Function ValidateCredentials(marketplaceID As String, merchantID As String, accessKeyID As String, secretAccessKey As String) As Boolean
    On Error GoTo ErrorHandler
    
    Dim sContactURL As String
    sContactURL = GetLocalURL(URL_HEADER_MWS)
    sContactURL = sContactURL & "&Action=GetFeedSubmissionCount"    ' this action will be used to check if the account exists by requesting a feed count
    
    Dim signedURL As String
    signedURL = GetSignedURL(sContactURL, marketplaceID, merchantID, accessKeyID, secretAccessKey)

    CreateMWSRequestObject signedURL    ' create and initialize the httpreq object
    
    Call httpreq.send
    
    CreateMWSResponseObject     ' create and initialize the xmldoc object

    If xmldoc.ChildNodes(1).BaseName = "ErrorResponse" Then
        Dim errorString As String
        errorString = xmldoc.getElementsByTagName("Code").Item(0).Text
        
        ' these parameters imply login failure
        If errorString = "InvalidAccessKeyId" Or errorString = "AccessDenied" Or errorString = "MissingClientTokenId" Or errorString = "SignatureDoesNotMatch" Or errorString = "InvalidRequest" Then
            AmazonMsgBox GetTranslatedString("mws_credentials_invalid_long"), vbOKOnly, GetTranslatedString("invalid_credentials")
            ValidateCredentials = False
            Exit Function
        End If
    End If
    
    ValidateCredentials = True
    Exit Function

ErrorHandler:
    AmazonMsgBox GetTranslatedString("internal_error_validation"), vbOKOnly, GetTranslatedString("internal_error")
    ValidateCredentials = False
End Function


' initialize the global httpreq object for mws requests
Public Sub CreateMWSRequestObject(strURL As String)
    Set httpreq = Nothing
    DoEvents
    Set httpreq = Get_XMLHTTP_Object()
    'changed by sunithab; TT: 0018547747 Win-8 Compatibility
    'Call httpreq.Open(bstrmethod:="POST", bstrurl:=strURL, varAsync:=False)
    Call httpreq.Open("POST", strURL, False)
    ' added 08/11/10 by atambe
    Dim strContactURL As String
    strContactURL = "ListingLoader;" & GetLocalLanguageName & "/" & ThisWorkbook.Names("Macros_Version").RefersToRange.value
    httpreq.setRequestHeader "User-Agent", strContactURL & " (Language=Excel/" & Application.Version & ")"
End Sub


' initialize the global xmldoc object using the mws response
Public Sub CreateMWSResponseObject()
    Set xmldoc = Nothing
    DoEvents
    Set xmldoc = Get_XML_DOMDocument_Object()
    xmldoc.LoadXML (Trim(httpreq.responseText))
End Sub


' encrypt and store the specified credentials in the registry
Public Sub EncryptCredentials(marketplaceID As String, merchantID As String, accessKeyID As String, secretAccessKey As String, password As String)
    SaveSetting "Amazon", "MWS", "Marketplace", EncryptString(marketplaceID, password)
    SaveSetting "Amazon", "MWS", "Merchant", EncryptString(merchantID, password)
    SaveSetting "Amazon", "MWS", "AccessKey", EncryptString(accessKeyID, password)
    SaveSetting "Amazon", "MWS", "SAK", EncryptString(secretAccessKey, password)
    SaveSetting "Amazon", "MWS", "SecurityPassword", GetContentMD5String(password)
End Sub


' decrypt the credentials stored in the registry
Public Sub DecryptCredentials(marketplaceID As String, merchantID As String, accessKeyID As String, secretAccessKey As String, password As String)
    marketplaceID = DecryptString(GetSetting("Amazon", "MWS", "Marketplace"), password)
    merchantID = DecryptString(GetSetting("Amazon", "MWS", "Merchant"), password)
    accessKeyID = DecryptString(GetSetting("Amazon", "MWS", "AccessKey"), password)
    secretAccessKey = DecryptString(GetSetting("Amazon", "MWS", "SAK"), password)
End Sub


' calculate the Content-MD5 value of the specified file
Public Function GetContentMD5File(file As String) As String
    Dim oMD5 As MD5
    Set oMD5 = New MD5
    GetContentMD5File = Base64Encode(oMD5.DigestFileToHexStr(file))
End Function


' calculate the Content-MD5 value of the specified string
Public Function GetContentMD5String(Text As String) As String
    Dim oMD5 As MD5
    Set oMD5 = New MD5
    GetContentMD5String = Base64Encode(oMD5.DigestStrToHexStr(Text))
End Function


' get the signed url as per mws specification
Public Function GetSignedURL(strURL As String, strMarketplaceID As String, strMerchantID As String, strAccessKeyID As String, strSecretAccessKey As String) 'GJL
    'strURL must *NOT* include these parameters, which will be added to the URL returned by this function:
        'Timestamp
        'SignatureVersion
        'SignatureMethod
        'Signature
        'AWSAccessKeyId
        'Marketplace
        'Merchant
    strURL = strURL & "&Timestamp=" & GetIsoTimestamp & "&AWSAccessKeyId=" & strAccessKeyID & "&Merchant=" & strMerchantID & "&Marketplace=" & strMarketplaceID
    GetSignedURL = signEncode(strURL, strSecretAccessKey)
End Function


' get the signed url as per mws specification
Public Function GetSignedProductInfoURL(strURL As String, strMarketplaceID As String, strMerchantID As String, strAccessKeyID As String, strSecretAccessKey As String) 'GJL
    'strURL must *NOT* include these parameters, which will be added to the URL returned by this function:
        'Timestamp
        'SignatureVersion
        'SignatureMethod
        'Signature
        'AWSAccessKeyId
        'Marketplace
        'SellerId
        
    ' modified 24/4/2014 by sunithab MCE-596 from Marketplace to MarketplaceId
    strURL = strURL & "&Timestamp=" & GetIsoTimestamp & "&AWSAccessKeyId=" & strAccessKeyID & "&SellerId=" & strMerchantID & "&MarketplaceId=" & strMarketplaceID
    GetSignedProductInfoURL = signEncode(strURL, strSecretAccessKey)
End Function


Private Function GetIsoTimestamp() As String
'Return an ISO 8601 compliant timestamp.
    Dim st As SYSTEMTIME
 
    'Get the local date and time.
    GetSystemTime st
    'Format the result.
    GetIsoTimestamp = _
        Format$(st.wYear, "0000") & "-" & _
        Format$(st.wMonth, "00") & "-" & _
        Format$(st.wDay, "00") & "T" & _
        Format$(st.wHour, "00") & ":" & _
        Format$(st.wMinute, "00") & ":" & _
        Format$(st.wSecond, "00") & "Z"


If False Then
    'temp test for debugging:
    GetIsoTimestamp = "2011-01-20T22:17:53Z"
End If


End Function


' modified 10/18/10 by atambe
' encode the url as per mws specification and add the Signature parameter
Function signEncode(ByVal url As String, sKey As String) As String
    Dim http As String
    Dim i As Integer, j As Integer
    Dim tmp As String
    Dim LF As String
    Dim header As String
    Dim Signature As String
    Dim originalURL As String
    Dim PVP As Variant 'will become array, but do not declare as array.
    
    originalURL = url
    'Encode commas and colon characters
    url = URLClean(url)
    
    'Split and sort your parameter/value pairs by byte value (not alphabetically, lowercase parameters will be
    'listed after uppercase ones).
    http = Left$(url, InStr(url, "?"))
    url = Mid$(url, Len(http) + 1)
    PVP = Split(url, "&")
    For i = LBound(PVP) To UBound(PVP) - 1
        For j = i + 1 To UBound(PVP)
            If PVP(i) > PVP(j) Then
                tmp = PVP(i)
                PVP(i) = PVP(j)
                PVP(j) = tmp
            End If
        Next
    Next

    'Rejoin the sorted parameter/value list with ampersands. The result is the canonical string that we'll sign
    url = ""
    For i = LBound(PVP) To UBound(PVP)
        If i <> UBound(PVP) Then
            url = url & PVP(i) & "&"
        Else
            url = url & PVP(i)
        End If
    Next

    'Prepend the following three lines (with line breaks) before the canonical string:
    'POST
    'mws.amazonservices.com
    '/
    LF = Chr(10)
    Dim strDomain As String
    strDomain = GetDomainFromURL(http) 'to handle mws.amazonservices.ca, mws.amazonservices.co.uk, etc.

    header = "POST" & LF & strDomain & LF & GetRequestURIFromURL(http) & LF     ' modified 10/18/10 by atambe
      
    'Calculate an RFC 2104-compliant HMAC with the SHA256 hash algorithm using the string above
    Signature = HMAC_SHA256_BASE64(header & url, sKey)
    Signature = Replace(Signature, "=", "%3D")
    Signature = Replace(Signature, "+", "%2B")
    
    signEncode = http & url & "&Signature=" & Signature
End Function





' modified 10/12/10 by atambe
Function URLClean(Text As String) As String
    'translate only the commas, colons, and spaces
    Dim i As Integer
    Dim acode As Integer
    Dim char As String

    URLClean = Text

    For i = Len(URLClean) To 1 Step -1
        acode = Asc(Mid$(URLClean, i, 1))
        Select Case acode
            ' modified 10/12/10 by atambe - added { and }
            Case 125, 123, 58, 44, 32
                'replace punctuation chars with "%hex"
                URLClean = Left$(URLClean, i - 1) & "%" & Hex$(acode) & Mid$(URLClean, i + 1)
        End Select
        If Mid$(URLClean, i, 1) = "?" Then
            Exit For
        End If
    Next

End Function


' url domain name parser
Function GetDomainFromURL(strURL As String) As String
'looks for "//", and then looks for "/" after the "//", and returns everything between.
'returns empty string on failure.

    Dim strTmp As String
    Dim iPosDoubleSlash As Long
    Dim iPosThirdSlash As Long
    
    iPosDoubleSlash = InStr(strURL, "//")
    If iPosDoubleSlash = 0 Then Exit Function 'strURL does not contain "//".
    strTmp = Right(strURL, Len(strURL) - (iPosDoubleSlash + 1))
    If Len(strURL) = iPosDoubleSlash Then Exit Function 'strURL looks like "http://".
    iPosThirdSlash = InStr(strTmp, "/")
    If iPosThirdSlash = 0 Then
        GetDomainFromURL = strTmp 'strURL looks like "http://MyDomain.com".
    Else
        GetDomainFromURL = Left(strTmp, iPosThirdSlash - 1)
    End If

End Function


' added 10/18/10 by atambe
Function GetRequestURIFromURL(strURL As String) As String
    Dim strTmp As String
    Dim requestURI As String
    Dim index As Long
    
    requestURI = "/"
    GetRequestURIFromURL = requestURI
    
    index = InStr(strURL, "//")
    If index = 0 Then Exit Function
    strTmp = Right(strURL, Len(strURL) - (index + 1))

    index = InStr(strTmp, "/")
    If index = 0 Then Exit Function
    strTmp = Right(strURL, Len(strTmp) - (index))

    index = InStr(strTmp, "?")
    If index = 0 Then Exit Function
    GetRequestURIFromURL = requestURI & Left(strTmp, index - 1)
End Function



Public Function StringHex(ByVal Text As String) As String

    Dim lCount As Long
    Dim sResult As String
    Dim lLength As Long
   
    lLength = Len(Text)
'    For lCount = 1 To lLength Step 2
    For lCount = 1 To lLength
        sResult = sResult & Right("00" & Hex(Asc(Mid(Text, lCount, 1))), 2)
    Next
   
    StringHex = sResult

End Function


Public Function Base64Encode(S$) As String
    'by Nobody, 20011204
    Static Enc() As Byte
    Dim b() As Byte, Out() As Byte, i&, j&, L&
    If (Not Val(Not Enc)) = 0 Then 'Null-Ptr = not initialized
    Enc = StrConv("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", vbFromUnicode, 1033)
End If
L = Len(S): b = StrConv(S, vbFromUnicode, 1033)
ReDim Preserve b(0 To (UBound(b) \ 3) * 3 + 2)
ReDim Preserve Out(0 To (UBound(b) \ 3) * 4 + 3)
For i = 0 To UBound(b) - 1 Step 3
    Out(j) = Enc(b(i) \ 4): j = j + 1
    Out(j) = Enc((b(i + 1) \ 16) Or (b(i) And 3) * 16): j = j + 1
    Out(j) = Enc((b(i + 2) \ 64) Or (b(i + 1) And 15) * 4): j = j + 1
    Out(j) = Enc(b(i + 2) And 63): j = j + 1
Next i
For i = 1 To i - L: Out(UBound(Out) - i + 1) = 61: Next i
    Base64Encode = StrConv(Out, vbUnicode, 1033)
End Function




Attribute VB_Name = "modMatchSheet"
Option Explicit

Private Enum SheetRows
    HeaderRow = 1
    ColumnHeaderRow = 2
    DataStartRow
End Enum
'Private Enum SheetColumns
'    ClickOneCol = 1
'    ThumbnailCol
'    ProductTypeCol
'    TitleCol
'    ManufacturerCol
'    ProductInformationCol
'    AmazonidCol
'    DescriptionCol
'    IsGiftWrapAvailableCol
'    IsGiftMessageAvailableCol
'    SalesPriceCol
'    SaleStartDateCol
'    SaleEndDateCol
'    ShipOptionCol
'    ShippingAmountCol
'    ShippingAmountTypeCol
'    IsShippingRestrictedCol
'    ImageURLCol
'    ImageWidthCol
'    ImageHeightCol
'    ProductIDCol
'    ProductIDTypeCol
'    SKUCol
'    PriceCol
'    QuantityCol
'    ProductTaxCodeCol
'    ConditionCol
'    ConditionNoteCol
'    UpdateDeleteCol
'End Enum

Private Enum SheetColumns
    SKUCol = 1
    PriceCol
    QuantityCol
    ProductIDCol
    ProductIDTypeCol
    ConditionTypeCol
    ConditionNoteCol
    ASINHintCol
    TitleCol
    ProductTaxCodeCol
    OperationTypeCol
    SalesPriceCol
    SaleStartDateCol
    SaleEndDateCol
    LeadtimeToShipCol
    LaunchDateCol
    IsGiftWrapAvailableCol
    IsGiftMessageAvailableCol
    RowRefCol
    imageurlcol
    ImageWidthCol
    ImageHeightCol
End Enum



Public Sub MatchWorksheetGotDeactivated()
    On Error Resume Next
'    Application.CommandBars(GetAmazonToolbarName).Controls("Add an Offer for this item").Enabled = False
'    Application.CommandBars(GetAmazonToolbarName).Controls("Add an Offer for this item").Visible = False
    ' modified 10/19/10 by atambe
    'Unload ImageDisplay
    Unload frmImageDisplay
End Sub


Public Function MatchCopyRow(Optional by_button As Boolean)

On Error GoTo generr

    Dim SourceRow As Long, DestRow As Long
    Dim Code As String
    Dim firstrow As Long, lastRow As Long
    Dim feedRec As amazonGlobals.OFFER_FEED_RECORD
    Dim IdenticalColumn As Variant
    Dim objRange As Range
    Dim shMatch As Worksheet
    
    Set shMatch = GetMultipleMatchesWorksheet
    
    SourceRow = Application.ActiveCell.Row
    Application.ActiveSheet.Cells(SourceRow, ProductIDCol).Activate
    
    If by_button Then
        feedRec = button_feedRec
        If Mid(feedRec.SKU, 1, 8) = "###TEMP_" Then
            feedRec.SKU = ""
        End If
    Else
'        feedRec.SearchIndex = Application.ActiveSheet.Cells(SourceRow, ProductTypeCol).Value
        feedRec.ProductID = Application.ActiveSheet.Cells(SourceRow, ProductIDCol).value
        feedRec.ProductIDType = Application.ActiveSheet.Cells(SourceRow, ProductIDTypeCol).value
        feedRec.ASINHint = Application.ActiveSheet.Cells(SourceRow, ASINHintCol).value
    '    feedRec.Manufacturer = Application.ActiveSheet.Cells(SourceRow, ManufacturerCol).Value
        feedRec.title = Application.ActiveSheet.Cells(SourceRow, TitleCol).value
'        feedRec.Description = Application.ActiveSheet.Cells(SourceRow, DescriptionCol).Value
        feedRec.SKU = Application.ActiveSheet.Cells(SourceRow, SKUCol).value
        If Mid(feedRec.SKU, 1, 8) = "###TEMP_" Then
            feedRec.SKU = ""
        End If
        
        feedRec.Price = Application.ActiveSheet.Cells(SourceRow, PriceCol).value
        feedRec.Quantity = Application.ActiveSheet.Cells(SourceRow, QuantityCol).value
        feedRec.ProductTaxCode = Application.ActiveSheet.Cells(SourceRow, ProductTaxCodeCol).value
        feedRec.ConditionType = Application.ActiveSheet.Cells(SourceRow, ConditionTypeCol).value
        feedRec.ConditionNote = Application.ActiveSheet.Cells(SourceRow, ConditionNoteCol).value
'        feedRec.UpdateDelete = Application.ActiveSheet.Cells(SourceRow, UpdateDeleteCol).Value
'        feedRec.Description = Application.ActiveSheet.Cells(SourceRow, DescriptionCol).Value
        feedRec.IsGiftWrapAvailable = Application.ActiveSheet.Cells(SourceRow, IsGiftWrapAvailableCol).value
        feedRec.IsGiftMessageAvailable = Application.ActiveSheet.Cells(SourceRow, IsGiftMessageAvailableCol).value
        feedRec.SalesPrice = Application.ActiveSheet.Cells(SourceRow, SalesPriceCol).value
        feedRec.SaleStartDate = Application.ActiveSheet.Cells(SourceRow, SaleStartDateCol).value
        feedRec.SaleEndDate = Application.ActiveSheet.Cells(SourceRow, SaleEndDateCol).value
    '    feedRec.ShipOption = Application.ActiveSheet.Cells(SourceRow, ShipOptionCol).Value
    '    feedRec.ShippingAmountType = Application.ActiveSheet.Cells(SourceRow, ShippingAmountTypeCol).Value
    '    feedRec.IsShippingRestricted = Application.ActiveSheet.Cells(SourceRow, IsShippingRestrictedCol).Value
    End If
    

    
    
    If feedRec.ProductID = "" And feedRec.SKU = "" And feedRec.ASINHint = "" Then
        Exit Function
    End If
    
    
    Dim oldeeval As Boolean, oldsuval As Boolean
    oldeeval = Application.EnableEvents
    oldsuval = Application.ScreenUpdating
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
        GetTemplateWorksheet.Activate
'        DestRow = GetTemplateWorksheet.MatchAppendRow(feedRec)
        DestRow = TemplateSheetAppendRow(feedRec)
        
        
        If Not by_button Then
        
            shMatch.Activate
            
            IdenticalColumn = SKUCol
            Application.ActiveSheet.Cells(SourceRow, IdenticalColumn).Activate
            Code = Application.ActiveCell.value
            If Code = "" Then
                IdenticalColumn = ProductIDCol
                Application.ActiveSheet.Cells(SourceRow, IdenticalColumn).Activate
                Code = Application.ActiveCell.value
            End If
            
            While Application.ActiveCell.value = Code
                firstrow = Application.ActiveCell.Row
                Set objRange = Application.ActiveCell.Offset(RowOffset:=-1)
                objRange.Activate
            Wend
            Set objRange = Application.ActiveCell.Offset(RowOffset:=1)
            objRange.Activate
            While Application.ActiveCell.value = Code
                lastRow = Application.ActiveCell.Row
                Set objRange = Application.ActiveCell.Offset(RowOffset:=1)
                objRange.Activate
            Wend
            
            If Not by_button Then
                Call MatchDeleteRowRange(firstrow, lastRow)
            End If
        End If
            
        Application.ScreenUpdating = oldsuval
        Application.EnableEvents = oldeeval
            
        GetTemplateWorksheet.Activate
        'GetTemplateWorksheet.Cells(DestRow, ProductIDCol).Activate
    
    
'    GetTemplateWorksheet.Cells(GetTemplateWorksheet.UsedRange.Rows.Count + 1, GetTemplateWorksheet.ProductIDColumnNumber).Activate
    
    Exit Function
    
generr:
    If False Then
        Resume
    End If
    
End Function


Public Sub MatchDeleteRow(ByVal RowNumber As Integer)
    GetMultipleMatchesWorksheet.Activate
    Application.ActiveSheet.Cells(RowNumber, ProductIDCol).Activate
    Application.ActiveCell.EntireRow.Delete
End Sub


Public Sub MatchDeleteRowRange(ByVal StartRowNumber As Long, ByVal EndRowNumber As Long)
    Dim i As Long
    GetMultipleMatchesWorksheet.Activate
    Application.ActiveSheet.Cells(StartRowNumber, ProductIDCol).Activate
    For i = 0 To EndRowNumber - StartRowNumber
        Application.ActiveCell.EntireRow.Delete
    Next i
End Sub


Public Sub MatchPopulateRow(ByVal RowNumber As Long, ByRef feedRec As amazonGlobals.OFFER_FEED_RECORD, _
                       start_new_group As Boolean, count_in_group As Long, _
                       this_is_the_first_group As Boolean, last_item_in_group As Boolean, _
                       id_type As String)
    Dim oldeeval As Boolean
    Dim bRet As Boolean
    Dim iStartRow As Long
    
    On Error GoTo generr
    
    oldeeval = Application.EnableEvents
    Application.EnableEvents = False
    
    'set the height of the row to the image height:
'    ActiveSheet.Rows(RowNumber).RowHeight = feedRec.ImageHeight
    
   
    'add the image for this row:
'    ActiveSheet.Cells(RowNumber, ThumbnailCol).Select
'    ImageDisplay.AmazonImageDisplay.Navigate2 feedRec.ImageURL
'    bRet = ImageDisplay.AmazonImageDisplay.Document.execCommand("SelectAll", False, Null)
'    bRet = ImageDisplay.AmazonImageDisplay.Document.execCommand("Copy", False, Null)
'    ActiveSheet.Paste
'    ActiveSheet.Rows(RowNumber).RowHeight = ActiveSheet.Pictures(ActiveSheet.Pictures.Count).height
    
    iStartRow = RowNumber
    
    If start_new_group Then
        
    '    Application.ActiveSheet.Cells(RowNumber, ProductTypeCol).Value = feedRec.SearchIndex
        Application.ActiveSheet.Cells(RowNumber, ProductIDCol).value = feedRec.ProductID
        Application.ActiveSheet.Cells(RowNumber, ProductIDTypeCol).value = feedRec.ProductIDType
'        Application.ActiveSheet.Cells(RowNumber, ASINHintCol).Value = feedRec.ASINHint 'don't write this here, because it's different for each item in group.
    '    Application.ActiveSheet.Cells(RowNumber, ManufacturerCol).Value = feedRec.Manufacturer
        Application.ActiveSheet.Cells(RowNumber, TitleCol).value = feedRec.title
    '    Application.ActiveSheet.Cells(RowNumber, DescriptionCol).Value = feedRec.Description
        Application.ActiveSheet.Cells(RowNumber, SKUCol).value = feedRec.SKU
        Application.ActiveSheet.Cells(RowNumber, PriceCol).value = feedRec.Price
        Application.ActiveSheet.Cells(RowNumber, QuantityCol).value = feedRec.Quantity
        Application.ActiveSheet.Cells(RowNumber, ProductTaxCodeCol).value = feedRec.ProductTaxCode
        Application.ActiveSheet.Cells(RowNumber, OperationTypeCol).value = feedRec.OperationType '1/18/08
        Application.ActiveSheet.Cells(RowNumber, LeadtimeToShipCol).value = feedRec.LeadtimeToShip '1/18/08
        Application.ActiveSheet.Cells(RowNumber, LaunchDateCol).value = feedRec.LaunchDate '1/18/08
        Application.ActiveSheet.Cells(RowNumber, ConditionTypeCol).value = feedRec.ConditionType
        Application.ActiveSheet.Cells(RowNumber, ConditionNoteCol).value = feedRec.ConditionNote
    '    Application.ActiveSheet.Cells(RowNumber, UpdateDeleteCol).Value = feedRec.UpdateDelete
    '    Application.ActiveSheet.Cells(RowNumber, DescriptionCol).Value = feedRec.Description
        Application.ActiveSheet.Cells(RowNumber, IsGiftWrapAvailableCol).value = feedRec.IsGiftWrapAvailable
        Application.ActiveSheet.Cells(RowNumber, IsGiftMessageAvailableCol).value = feedRec.IsGiftMessageAvailable
        Application.ActiveSheet.Cells(RowNumber, SalesPriceCol).value = feedRec.SalesPrice
        Application.ActiveSheet.Cells(RowNumber, SaleStartDateCol).value = feedRec.SaleStartDate
        Application.ActiveSheet.Cells(RowNumber, SaleEndDateCol).value = feedRec.SaleEndDate
    '    Application.ActiveSheet.Cells(RowNumber, ShipOptionCol).Value = feedRec.ShipOption
    '    Application.ActiveSheet.Cells(RowNumber, ShippingAmountTypeCol).Value = feedRec.ShippingAmountType
    '    Application.ActiveSheet.Cells(RowNumber, IsShippingRestrictedCol).Value = feedRec.IsShippingRestricted
    
    
        MatchFormatDataRow ActiveSheet.Range( _
                         ActiveSheet.Cells(RowNumber, SKUCol), _
                         ActiveSheet.Cells(RowNumber, IsGiftMessageAvailableCol))
        
        
        'enter "Matches: 2" etc. below data row:
        RowNumber = RowNumber + 1
        With ActiveSheet.Cells(RowNumber, SKUCol)
            .Formula = "Matches: " & count_in_group
            .Font.Bold = False
            .Characters(Start:=1, Length:=8).Font.FontStyle = "Bold"
        End With
        
        Application.ActiveSheet.Cells(RowNumber, RowRefCol).value = 1
        
        RowNumber = RowNumber + 1
    Else
    
        'adding another item in same group:
        Application.ActiveSheet.Cells(RowNumber, RowRefCol).value = 1
        RowNumber = RowNumber + 1

    End If


    'add the button for this row:
    Dim strButtonArgs As String 'Button's AlternativeText property (max length 4,095 characters)
    strButtonArgs = ""
    strButtonArgs = strButtonArgs & GetButtonArg(feedRec.SKU) & ","
    strButtonArgs = strButtonArgs & GetButtonArg(feedRec.Price) & ","
    strButtonArgs = strButtonArgs & GetButtonArg(feedRec.Quantity) & ","
    strButtonArgs = strButtonArgs & GetButtonArg(feedRec.ProductID) & ","
    strButtonArgs = strButtonArgs & GetButtonArg(feedRec.ProductIDType) & ","
    strButtonArgs = strButtonArgs & GetButtonArg(feedRec.ConditionType) & ","
    strButtonArgs = strButtonArgs & GetButtonArg(feedRec.ConditionNote) & ","
    strButtonArgs = strButtonArgs & GetButtonArg(feedRec.ASINHint) & ","
    strButtonArgs = strButtonArgs & GetButtonArg(feedRec.title) & ","
    strButtonArgs = strButtonArgs & GetButtonArg(feedRec.ProductTaxCode) & ","
    strButtonArgs = strButtonArgs & GetButtonArg(feedRec.OperationType) & ","
    strButtonArgs = strButtonArgs & GetButtonArg(feedRec.SalesPrice) & ","
    strButtonArgs = strButtonArgs & GetButtonArg(feedRec.SaleStartDate) & ","
    strButtonArgs = strButtonArgs & GetButtonArg(feedRec.SaleEndDate) & ","
    strButtonArgs = strButtonArgs & GetButtonArg(feedRec.LeadtimeToShip) & ","
    strButtonArgs = strButtonArgs & GetButtonArg(feedRec.LaunchDate) & ","
    strButtonArgs = strButtonArgs & GetButtonArg(feedRec.IsGiftWrapAvailable) & ","
    strButtonArgs = strButtonArgs & GetButtonArg(feedRec.IsGiftMessageAvailable)
    Create_This_Is_The_One_Button ActiveSheet, RowNumber, SKUCol, RowNumber, strButtonArgs



    'Title hyperlink:
    Dim dblColWidthOriginal As Double
    Dim dblColWidthAutofit As Double
    Dim dblColWidthsSum As Double
    Dim iMergeCellsCount As Long
    
    ActiveSheet.Hyperlinks.Add Anchor:=Cells(RowNumber, QuantityCol), _
                               Address:=feedRec.DetailPageURL, _
                               TextToDisplay:=feedRec.title '"Product Details"
    dblColWidthOriginal = ActiveSheet.Columns(QuantityCol).ColumnWidth
    ActiveSheet.Columns(QuantityCol).EntireColumn.AutoFit
    dblColWidthAutofit = ActiveSheet.Columns(QuantityCol).ColumnWidth
    ActiveSheet.Columns(QuantityCol).ColumnWidth = dblColWidthOriginal
    dblColWidthsSum = dblColWidthOriginal 'init.
    iMergeCellsCount = 1 'init.
    Do Until dblColWidthsSum >= dblColWidthAutofit
        dblColWidthsSum = dblColWidthsSum + ActiveSheet.Columns(QuantityCol + iMergeCellsCount).ColumnWidth
        iMergeCellsCount = iMergeCellsCount + 1
    Loop
    ActiveSheet.Range( _
        ActiveSheet.Cells(RowNumber, QuantityCol), _
        ActiveSheet.Cells(RowNumber, QuantityCol + (iMergeCellsCount - 1))) _
        .MergeCells = True
    
    '"View Image" hyperlink:
'    ActiveSheet.Hyperlinks.Add Anchor:=Cells(RowNumber, PriceCol), _
                               Address:=feedRec.ImageURL, _
                               TextToDisplay:="View Image"
    With ActiveSheet.Cells(RowNumber, PriceCol)
        .value = GetTranslatedString("view_image")
        .HorizontalAlignment = xlCenter
        With .Font
            .Underline = xlUnderlineStyleSingle
            .ColorIndex = 5 'same blue as hyperlink.
        End With
    End With
    
    
    Application.ActiveSheet.Cells(RowNumber, RowRefCol).value = 2
    
    
    '2/7/08: enter image data in next row above item row:
    ActiveSheet.Cells(RowNumber - 1, imageurlcol).value = feedRec.ImageURL
    ActiveSheet.Cells(RowNumber - 1, ImageWidthCol).value = feedRec.ImageWidth
    ActiveSheet.Cells(RowNumber - 1, ImageHeightCol).value = feedRec.ImageHeight
    
    
    
    'enter isbn or other id type in next row below item row:
    Dim strIDType As String
    If id_type = "ISBN" Then
        strIDType = id_type
    Else
        strIDType = "ASIN"
    End If
    RowNumber = RowNumber + 1
    ActiveSheet.Cells(RowNumber, QuantityCol).value = strIDType & ": " & feedRec.ASINHint
    
    
    Application.ActiveSheet.Cells(RowNumber, RowRefCol).value = 3
    
    
    'dotted border between items in group, two rows below each item in group:
    Dim rgDottedBorder As Range
    Dim bwBorderweight As XlBorderWeight
    If last_item_in_group Then
        bwBorderweight = xlThin
    Else
        bwBorderweight = xlHairline
    End If
    Set rgDottedBorder = ActiveSheet.Range( _
                             ActiveSheet.Cells(RowNumber, SKUCol), _
                             ActiveSheet.Cells(RowNumber, IsGiftMessageAvailableCol))
    With rgDottedBorder.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
'        .TintAndShade = 0 'not in Excel 2003.
        .Weight = bwBorderweight 'xlHairline
    End With
    
    
    'right-hand border:
    Dim rgRightBorder As Range
        Set rgRightBorder = ActiveSheet.Range( _
                                 ActiveSheet.Cells(iStartRow, IsGiftMessageAvailableCol), _
                                 ActiveSheet.Cells(RowNumber, IsGiftMessageAvailableCol))
    With rgRightBorder.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
'        .TintAndShade = 0 'not in Excel 2003.
        .Weight = xlThin
    End With
    
    
    'mark last row in group for deletion:
    If last_item_in_group Then
        ActiveSheet.Cells(RowNumber, 1) = "   "
    End If

    Application.ActiveSheet.Cells(RowNumber, ProductIDCol).Activate
    
    Application.EnableEvents = oldeeval
    
'    Call AlternateShading
    
    Exit Sub
    
generr:
    If False Then
        Resume
    End If
    
End Sub


Public Function MatchAppendRow(ByRef feedRec As amazonGlobals.OFFER_FEED_RECORD, _
                          start_new_group As Boolean, count_in_group As Long, this_is_the_first_group As Boolean, last_item_in_group As Boolean, id_type As String) As Integer
    Dim shMatch As Worksheet
    Set shMatch = GetMultipleMatchesWorksheet

    MatchPopulateRow shMatch.UsedRange.Rows.Count + 1, feedRec, start_new_group, count_in_group, this_is_the_first_group, last_item_in_group, id_type
    MatchAppendRow = shMatch.UsedRange.Rows.Count
End Function



Public Sub MatchWorksheetGotSelectionChanged(Target As Range)


    On Error GoTo generr
    Dim oldeeval As Boolean, oldsuval As Boolean
'    Dim ctrlImageDisplay As Object
    Dim webctrlAmazonImageDisplay As WebBrowser
    oldeeval = Application.EnableEvents
    Application.EnableEvents = False
    
        Dim iRow As Integer
        Dim url As String
        Dim width As Integer
        Dim height As Integer
        iRow = Target.Row

        '2/7/08 - get the next iRow up with image data:
        Select Case ActiveSheet.Cells(iRow, RowRefCol).value
            Case 1
                'iRow is already correct.
            Case 2
                iRow = iRow - 1
            Case 3
                iRow = iRow - 2
            Case Else
                'do not display image for this row:
                ' modified 10/19/10 by atambe
                'ImageDisplay.Hide
                frmImageDisplay.Hide
                Application.EnableEvents = oldeeval
                Exit Sub
        End Select


        If iRow >= DataStartRow And _
            Application.ActiveSheet.Cells(iRow, imageurlcol).value <> "" And _
            Application.ActiveSheet.Cells(iRow, ImageWidthCol).value > 0 And _
            Application.ActiveSheet.Cells(iRow, ImageWidthCol).value > 0 Then
           
            ' added 10/19/10 by atambe
            DisplayProductImage Application.ActiveSheet.Cells(iRow, imageurlcol).value

' removed 10/19/10 by atambe
'            Load ImageDisplay
'            ImageDisplay.Show vbModeless
'            AppActivate Application.Caption
'            url = Application.ActiveSheet.Cells(iRow, imageurlcol).value
'            width = Application.ActiveSheet.Cells(iRow, ImageWidthCol).value
'            height = Application.ActiveSheet.Cells(iRow, ImageHeightCol).value
'            ImageDisplay.height = height + 1
'            ImageDisplay.width = width - 25
'            ImageDisplay.TargetRow = iRow
'            ImageDisplay.TargetCol = Target.Column
            
'            'avoid Sesha's mystery compile error on ImageDisplay.AmazonImageDisplay
'            'no, this makes the display look bad.
'            Set webctrlAmazonImageDisplay = Nothing 'init.
'            For Each ctrlImageDisplay In ImageDisplay.Controls
'                If TypeName(ctrlImageDisplay) = "WebBrowser" Then
'                    Set webctrlAmazonImageDisplay = ctrlImageDisplay
'                    Exit For
'                End If
'            Next ctrlImageDisplay
'            If webctrlAmazonImageDisplay Is Nothing Then Exit Sub
            
' removed 10/19/10 by atambe
'            With ImageDisplay.AmazonImageDisplay
''            With webctrlAmazonImageDisplay
''                .Shadow = False 'Jigar had On Error Resume Next; this line was error every time.
'                .Visible = True
'                .TheaterMode = True
'                If width > 0 Then .width = width
'                If height > 0 Then .height = height
'                .Navigate2 (url)
'            End With
        Else
            ' modified 10/19/10 by atambe
            'ImageDisplay.Hide
            frmImageDisplay.Hide
        End If
        Application.ActiveSheet.Cells(Target.Row, Target.Column).Activate
        'Do
        'DoEvents
    
    Application.EnableEvents = oldeeval
    
    Exit Sub
    
generr:
'    Application.EnableEvents = oldeeval 'not with Resume Next.
    
    If False Then
        Resume
    End If
    
    Resume Next
End Sub


Public Sub MatchFormatDataRow(format_range As Range)

'this is the row of data at the beginning of each group.

On Error GoTo generr

'
    format_range.Borders(xlDiagonalDown).LineStyle = xlNone
    format_range.Borders(xlDiagonalUp).LineStyle = xlNone
    With format_range.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
'        .TintAndShade = 0 'not in Excel 2003.
        .Weight = xlThin
    End With
    With format_range.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
'        .TintAndShade = 0 'not in Excel 2003.
        .Weight = xlThin
    End With
    With format_range.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
'        .TintAndShade = 0 'not in Excel 2003.
        .Weight = xlThin
    End With
    With format_range.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
'        .TintAndShade = 0 'not in Excel 2003.
        .Weight = xlThin
    End With
    With format_range.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
'        .TintAndShade = 0 'not in Excel 2003.
        .Weight = xlThin
    End With
    format_range.Borders(xlInsideHorizontal).LineStyle = xlNone
    With format_range.Interior
        .ColorIndex = 15 'grey. This works in Excel 2003.
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
'        .ThemeColor = xlThemeColorDark1 'not in Excel 2003.
'        .TintAndShade = -0.14996795556505 'not in Excel 2003.
'        .PatternTintAndShade = 0 'not in Excel 2003.
    End With
    
    Exit Sub
generr:
    If False Then
        Resume
    End If
End Sub


Attribute VB_Name = "modSearchSheet"
Option Explicit

Private Enum SheetRows
    HeaderRow = 1
    ColumnHeaderRow = 2
    DataStartRow
End Enum
'Private Enum SheetColumns
'    ProductIDCol = 1
'    ProductIDTypeCol
'    ProductTypeCol
'    ManufacturerCol
'    TitleCol
'    KeywordsCol
'    DescriptionCol
'    IsGiftWrapAvailableCol
'    IsGiftMessageAvailableCol
'    SalesPriceCol
'    SaleStartDateCol
'    SaleEndDateCol
'    ShipOptionCol
'    ShippingAmountCol
'    ShippingAmountTypeCol
'    IsShippingRestrictedCol
'    SKUCol
'    PriceCol
'    QuantityCol
'    ProductTaxCodeCol
'    ConditionCol
'    ConditionNoteCol
'    UpdateDeleteCol
'    AmazonidCol
'
'End Enum

Private Enum SheetColumns
    SKUCol = 1
    PriceCol
    QuantityCol
    ProductIDCol
    ProductIDTypeCol
    ConditionTypeCol
    ConditionNoteCol
    ASINHintCol
    TitleCol
    ProductTaxCodeCol
    OperationTypeCol
    SalesPriceCol
    SaleStartDateCol
    SaleEndDateCol
    LeadtimeToShipCol
    LaunchDateCol
    IsGiftWrapAvailableCol
    IsGiftMessageAvailableCol
End Enum



Public Sub SearchDeleteRow(ByVal RowNumber As Integer)

    GetProductsNotFoundWorksheet.Activate
    Application.ActiveSheet.Cells(RowNumber, ProductIDCol).Activate
    Application.ActiveCell.EntireRow.Delete
                    
End Sub

Public Sub SearchPopulateRow(ByVal RowNumber As Long, ByRef feedRec As amazonGlobals.OFFER_FEED_RECORD) 'changed RowNumber from Integer to Long.

    On Error GoTo generr
    
    Dim oldval As Boolean
    
    If RowNumber > ActiveSheet.Rows.Count Then
        Err.Raise 9999
        Exit Sub
    End If
    
    oldval = Application.EnableEvents
    Application.EnableEvents = False
    Application.ActiveSheet.Cells(RowNumber, ProductIDTypeCol).value = feedRec.SearchIndex
    Application.ActiveSheet.Cells(RowNumber, ProductIDCol).value = feedRec.ProductID
    Application.ActiveSheet.Cells(RowNumber, ProductIDTypeCol).value = feedRec.ProductIDType
    Application.ActiveSheet.Cells(RowNumber, ASINHintCol).value = feedRec.ASINHint
    Application.ActiveSheet.Cells(RowNumber, TitleCol).value = feedRec.title
    'Application.ActiveSheet.Cells(RowNumber, ManufacturerCol).Value = feedRec.Manufacturer
'    Application.ActiveSheet.Cells(RowNumber, DescriptionCol).Value = feedRec.Description
    Application.ActiveSheet.Cells(RowNumber, SKUCol).value = feedRec.SKU
    Application.ActiveSheet.Cells(RowNumber, PriceCol).value = feedRec.Price
    Application.ActiveSheet.Cells(RowNumber, QuantityCol).value = feedRec.Quantity
    Application.ActiveSheet.Cells(RowNumber, ProductTaxCodeCol).value = feedRec.ProductTaxCode
    Application.ActiveSheet.Cells(RowNumber, ConditionTypeCol).value = feedRec.ConditionType
    Application.ActiveSheet.Cells(RowNumber, ConditionNoteCol).value = feedRec.ConditionNote
    Application.ActiveSheet.Cells(RowNumber, OperationTypeCol).value = feedRec.OperationType
'    Application.ActiveSheet.Cells(RowNumber, DescriptionCol).Value = feedRec.Description
    Application.ActiveSheet.Cells(RowNumber, IsGiftWrapAvailableCol).value = feedRec.IsGiftWrapAvailable
    Application.ActiveSheet.Cells(RowNumber, IsGiftMessageAvailableCol).value = feedRec.IsGiftMessageAvailable
    Application.ActiveSheet.Cells(RowNumber, SalesPriceCol).value = feedRec.SalesPrice
    Application.ActiveSheet.Cells(RowNumber, SaleStartDateCol).value = feedRec.SaleStartDate
    Application.ActiveSheet.Cells(RowNumber, SaleEndDateCol).value = feedRec.SaleEndDate
    'Application.ActiveSheet.Cells(RowNumber, ShipOptionCol).Value = feedRec.ShipOption
    'Application.ActiveSheet.Cells(RowNumber, ShippingAmountTypeCol).Value = feedRec.ShippingAmountType
    'Application.ActiveSheet.Cells(RowNumber, IsShippingRestrictedCol).Value = feedRec.IsShippingRestricted
    Application.ActiveSheet.Cells(RowNumber, ProductIDCol).Activate
    Application.EnableEvents = oldval
    
    Exit Sub
generr:
    If Err.Number = 9999 Then Err.Raise 9999
    If False Then
        Resume
    End If
End Sub

Public Function SearchAppendRow(ByRef feedRec As amazonGlobals.OFFER_FEED_RECORD) As Long 'Integer

    Dim shSearch As Worksheet
    Dim iTargetRow As Long
    Set shSearch = GetProductsNotFoundWorksheet
    
'    iTargetRow = shSearch.UsedRange.Rows.Count + 1
''    Do While WorksheetFunction.CountA(shSearch.Cells(iTargetRow - 1, 1).EntireRow) = 0
'    Do While IsRangeEmpty(shSearch.Cells(iTargetRow - 1, 1).EntireRow)
'        iTargetRow = iTargetRow - 1
'    Loop
    iTargetRow = GetRowNumberOfLastOccupiedRow(shTemplate.Rows(1).EntireRow)

    SearchPopulateRow shSearch.UsedRange.Rows.Count + 1, feedRec
    SearchAppendRow = shSearch.UsedRange.Rows.Count
End Function



Public Sub SearchSingleAmznSearch()

    Application.Cursor = xlWait
    
    Dim CurRow As Integer
    Dim CurColumn As Integer
    Dim shMatch As Worksheet

    Dim shSearch As Worksheet
    Set shSearch = GetProductsNotFoundWorksheet

    
    Set shMatch = GetMultipleMatchesWorksheet
    
    CurRow = Application.ActiveCell.Row
    
    Dim KeywordSearchStr As String, ManufacturerSearchStr As String, TitleSearchStr As String
    
    KeywordSearchStr = shSearch.Cells(CurRow, KeywordsCol).value
    ManufacturerSearchStr = shSearch.Cells(CurRow, ManufacturerCol).value
    TitleSearchStr = shSearch.Cells(CurRow, TitleCol).value
    
        
    Dim Count As Integer
    Dim itemlist() As amazonGlobals.OFFER_FEED_RECORD
    
    If KeywordSearchStr <> "" Or ManufacturerSearchStr <> "" Or TitleSearchStr <> "" Then
    
        Dim pt As String
        pt = getSearchIndex(Application.ActiveSheet.Cells(CurRow, ProductTypeCol).value)
        If pt <> "" Then
            itemlist = amazonGlobals.AmznSearchInCategory(pt, KeywordSearchStr, ManufacturerSearchStr, TitleSearchStr, Count)
        Else
            itemlist = amazonGlobals.AmznSearchInAllCategories(KeywordSearchStr, ManufacturerSearchStr, TitleSearchStr, Count)
        End If
    
    Else
        Application.Cursor = xlDefault
        AmazonMsgBox GetTranslatedString("no_search_terms")
        Exit Sub
    End If
    
            
    If Count >= 1 Then
    
        If Application.ActiveSheet.Cells(CurRow, SKUCol).value <> "" Then
            itemlist(0).SKU = Application.ActiveSheet.Cells(CurRow, SKUCol).value
        Else
            If amazonGlobals.g_AutoFillSKU = True Then
                itemlist(0).SKU = "S_" & "_" & Format(Now, "mmdd") & "_" & itemlist(0).ProductID + "_" & Format(Now, "HHMMSS")
            Else
                itemlist(0).SKU = "###TEMP_S_" & "_" & Format(Now, "mmdd") & "_" & itemlist(0).ProductID + "_" & Format(Now, "HHMMSS")
            End If
        End If
        
        If Application.ActiveSheet.Cells(CurRow, PriceCol).value <> "" Then
            itemlist(0).Price = Application.ActiveSheet.Cells(CurRow, PriceCol).value
        End If
    
        If Application.ActiveSheet.Cells(CurRow, QuantityCol).value <> "" Then
            itemlist(0).Quantity = Application.ActiveSheet.Cells(CurRow, QuantityCol).value
        Else
            itemlist(0).Quantity = 1
        End If
        
        If Application.ActiveSheet.Cells(CurRow, ProductTaxCodeCol).value <> "" Then
            itemlist(0).ProductTaxCode = Application.ActiveSheet.Cells(CurRow, ProductTaxCodeCol).value
        Else
            itemlist(0).ProductTaxCode = amazonGlobals.g_DefProdTaxCode
        End If
    
        If Application.ActiveSheet.Cells(CurRow, ConditionCol).value <> "" Then
            itemlist(0).ConditionType = Application.ActiveSheet.Cells(CurRow, ConditionCol).value
        Else
            itemlist(0).ConditionType = amazonGlobals.g_DefProdCondition
        End If
        
        If Application.ActiveSheet.Cells(CurRow, ConditionNoteCol).value <> "" Then
            itemlist(0).ConditionNote = Application.ActiveSheet.Cells(CurRow, ConditionNoteCol).value
        End If
        
        If Application.ActiveSheet.Cells(CurRow, UpdateDeleteCol).value <> "" Then
            itemlist(0).UpdateDelete = Application.ActiveSheet.Cells(CurRow, UpdateDeleteCol).value
        Else
            itemlist(0).UpdateDelete = amazonGlobals.g_DefUpdateDelete
        End If
        
        If Application.ActiveSheet.Cells(CurRow, DescriptionCol).value <> "" Then
            If itemlist(0).Description = "" Then
                itemlist(0).Description = Application.ActiveSheet.Cells(CurRow, DescriptionCol).value
            End If
        End If
        
'        If Application.ActiveSheet.Cells(CurRow, ManufacturerCol).Value <> "" Then
'            If itemlist(0).Manufacturer = "" Then
'                itemlist(0).Manufacturer = Application.ActiveSheet.Cells(CurRow, ManufacturerCol).Value
'            End If
'        End If
        
        If Application.ActiveSheet.Cells(CurRow, TitleCol).value <> "" Then
            If itemlist(0).title = "" Then
                itemlist(0).title = Application.ActiveSheet.Cells(CurRow, TitleCol).value
            End If
        End If
        
        If Application.ActiveSheet.Cells(CurRow, AmazonidCol).value <> "" Then
            If itemlist(0).ASINHint = "" Then
                itemlist(0).ASINHint = Application.ActiveSheet.Cells(CurRow, ASINHintCol).value
            End If
        End If
            
        If Application.ActiveSheet.Cells(CurRow, IsGiftWrapAvailableCol).value <> "" Then
            itemlist(0).IsGiftWrapAvailable = Application.ActiveSheet.Cells(CurRow, IsGiftWrapAvailableCol).value
        End If
        
        If Application.ActiveSheet.Cells(CurRow, IsGiftMessageAvailableCol).value <> "" Then
            itemlist(0).IsGiftMessageAvailable = Application.ActiveSheet.Cells(CurRow, IsGiftMessageAvailableCol).value
        End If
        
        If Application.ActiveSheet.Cells(CurRow, SalesPriceCol).value <> "" Then
            itemlist(0).SalesPrice = Application.ActiveSheet.Cells(CurRow, SalesPriceCol).value
        End If
        
        If Application.ActiveSheet.Cells(CurRow, SaleStartDateCol).value <> "" Then
            itemlist(0).SaleStartDate = Application.ActiveSheet.Cells(CurRow, SaleStartDateCol).value
        End If
        
        If Application.ActiveSheet.Cells(CurRow, SaleEndDateCol).value <> "" Then
            itemlist(0).SaleEndDate = Application.ActiveSheet.Cells(CurRow, SaleEndDateCol).value
        End If
        
'        If Application.ActiveSheet.Cells(CurRow, ShipOptionCol).Value <> "" Then
'            itemlist(0).ShipOption = Application.ActiveSheet.Cells(CurRow, ShipOptionCol).Value
'        End If
'
'        If Application.ActiveSheet.Cells(CurRow, ShippingAmountTypeCol).Value <> "" Then
'            itemlist(0).ShippingAmountType = Application.ActiveSheet.Cells(CurRow, ShippingAmountTypeCol).Value
'        End If
'
'        If Application.ActiveSheet.Cells(CurRow, IsShippingRestrictedCol).Value <> "" Then
'            itemlist(0).IsShippingRestricted = Application.ActiveSheet.Cells(CurRow, IsShippingRestrictedCol).Value
'        End If
    
    '******************************************
                                        
        
        For i = 1 To Count - 1
            'itemlist(i).ProductID = itemlist(0).ProductID
            'itemlist(i).ProductIDType = itemlist(0).ProductIDType
            itemlist(i).SKU = itemlist(0).SKU
            itemlist(i).Price = itemlist(0).Price
            itemlist(i).Quantity = itemlist(0).Quantity
            itemlist(i).ProductTaxCode = itemlist(0).ProductTaxCode
            itemlist(i).ConditionType = itemlist(0).ConditionType
            itemlist(i).ConditionNote = itemlist(0).ConditionNote
            itemlist(i).UpdateDelete = itemlist(0).UpdateDelete
            itemlist(i).Description = itemlist(0).Description
            itemlist(i).IsGiftWrapAvailable = itemlist(0).IsGiftWrapAvailable
            itemlist(i).IsGiftMessageAvailable = itemlist(0).IsGiftMessageAvailable
            itemlist(i).SalesPrice = itemlist(0).SalesPrice
            itemlist(i).SaleStartDate = itemlist(0).SaleStartDate
            itemlist(i).SaleEndDate = itemlist(0).SaleEndDate
'            itemlist(i).ShipOption = itemlist(0).ShipOption
'            itemlist(i).ShippingAmountType = itemlist(0).ShippingAmountType
'            itemlist(i).IsShippingRestricted = itemlist(0).IsShippingRestricted
        Next i
    
        'Application.ActiveCell.EntireRow.Delete
        shMatch.Activate
        Dim firstrow As Integer
        firstrow = shMatch.UsedRange.Rows.Count + 1
        Dim rownum As Integer
        For i = 0 To Count - 1
            rownum = modMatchSheet.MatchAppendRow(itemlist(i), False, 1, True, True, "") 'was rownum = modMatchSheet.MatchAppendRow(itemlist(i)).
        Next i
        
        Dim xlRange         As Range
        Set xlRange = shMatch.Range(shMatch.Cells(rownum, 1), shMatch.Cells(rownum, 25))
        With xlRange.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Weight = xlMedium
            .ColorIndex = lastcolorIndex
        End With
                
        If lastcolorIndex = 5 Then
            lastcolorIndex = 3
        Else
            lastcolorIndex = 5
        End If
        
        'shSearch.Activate
        'Application.ActiveSheet.Cells(Target, ProductIDCol).Activate
        'shSearch.DeleteRow (Target)
        'errors = True
        shMatch.Cells(firstrow, 1).Activate
        Application.Cursor = xlDefault
    Else
        Application.Cursor = xlDefault
        AmazonMsgBox GetTranslatedString("item_not_found_catalog")
    End If
    
    Application.Cursor = xlDefault
    
End Sub



Attribute VB_Name = "modSupport"
' Modified for MWS integration
' Abhijit Tambe, July 2010

Option Explicit

'==========================================================================================
'For 64-bit compatibility.

'MSDN: Compatibility Between the 32-bit and 64-bit Versions of Office 2010:
    'http://msdn.microsoft.com/en-us/library/ee691831.aspx
'Technet: Microsoft Office Code Compatibility Inspector:
    'http://technet.microsoft.com/en-us/library/ee833946.aspx
'Samples:
    'http://www.jkp-ads.com/articles/apideclarations.asp
'Windows API functions that were modified/added for 64-bit Windows:
    'http://msdn.microsoft.com/en-us/library/aa383663(VS.85).aspx

'PtrSafe:
    'For Excel 2010 and later (#Vba7 = True), change "Declare" to "Declare PtrSafe".
'LongPtr:
    'For Excel 2010 and later (#Vba7 = True), change the data type of handles and pointers
    'from Long to LongPtr. Leave pointers to strings as String.
'LongLong:
    'For 64-bit Excel (#Win64 = True), change Long (except for handles and pointers!) to LongLong

#If Mac Then
    'Running on MacIntosh. Do nothing.
#ElseIf VBA7 Then
    'Excel 2010 or later:
     #If Win64 Then
        '64-bit Excel, 2010 or later:
        'Use PtrSafe, LongPtr, and LongLong:
        
            Public Declare PtrSafe Function GetACP Lib "kernel32" () As LongLong 'ACP = ANSI Code Page
            Public Declare PtrSafe Function GetSystemDefaultLCID Lib "kernel32" () As LongLong
            
            
            
            Public Declare PtrSafe Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" ( _
                                    ByVal hwnd As LongPtr, ByVal lpOperation As String, _
                                    ByVal lpFile As String, ByVal lpParameters As String, _
                                    ByVal lpDirectory As String, ByVal nShowCmd As LongLong) As LongLong
                                    
            Private Declare PtrSafe Function URLDownloadToFile Lib "urlmon" _
                                     Alias "URLDownloadToFileA" _
                                    (ByVal pCaller As LongPtr, _
                                     ByVal szURL As String, _
                                     ByVal szFileName As String, _
                                     ByVal dwReserved As LongLong, _
                                     ByVal lpfnCB As LongPtr) As LongLong

     #Else
        '32-bit Excel 2010 or later:
        'Use PtrSafe and LongPtr, but NOT LongLong:

            Public Declare PtrSafe Function GetACP Lib "kernel32" () As Long 'ACP = ANSI Code Page
            Public Declare PtrSafe Function GetSystemDefaultLCID Lib "kernel32" () As Long
            
            
            
            Public Declare PtrSafe Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" ( _
                                    ByVal hwnd As LongPtr, ByVal lpOperation As String, _
                                    ByVal lpFile As String, ByVal lpParameters As String, _
                                    ByVal lpDirectory As String, ByVal nShowCmd As Long) As Long
            
            Private Declare PtrSafe Function URLDownloadToFile Lib "urlmon" _
                                    Alias "URLDownloadToFileA" _
                                    (ByVal pCaller As LongPtr, _
                                    ByVal szURL As String, _
                                    ByVal szFileName As String, _
                                    ByVal dwReserved As Long, _
                                    ByVal lpfnCB As LongPtr) As Long
        
     #End If
#Else
    'Excel 2007 or earlier:

        Public Declare Function GetACP Lib "kernel32" () As Long  'ACP = ANSI Code Page
        Public Declare Function GetSystemDefaultLCID Lib "kernel32" () As Long
        
        
        
        Public Declare Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" ( _
                                ByVal hwnd As Long, ByVal lpOperation As String, _
                                ByVal lpFile As String, ByVal lpParameters As String, _
                                ByVal lpDirectory As String, ByVal nShowCmd As Long) As Long
        ' added 10/19/10 by atambe
        Private Declare Function URLDownloadToFile Lib "urlmon" Alias _
          "URLDownloadToFileA" (ByVal pCaller As Long, ByVal szURL As String, ByVal _
            szFileName As String, ByVal dwReserved As Long, ByVal lpfnCB As Long) As Long

#End If

'==========================================================================================
Public Const HWND_0 As Long = 0


Public bCannotFindXML As Boolean
Public bSearchIndicesInitialized As Boolean
Public httpreq As Object 'MSXML2.XMLHTTP
Public xmldoc As Object 'MSXML2.DOMDocument

' added 08/03/10 by atambe
Public iAmazonMsgBoxRet As Long
Public iAmazonMsgBoxDefaultRet As Long 'used when user dismisses frmMsgBox with Enter or Tab.

Dim rgRet As Range



'''''not in use. GetSystemMetrics32 declaration not upgraded for 64-bit compatibility.
'''''' added 07/28/10 by atambe
'''''Declare Function GetSystemMetrics32 Lib "User32" Alias "GetSystemMetrics" (ByVal nIndex As Long) As Long
'''''
'''''' added 07/28/10 by atambe
'''''Sub GetScreenResolution(width As Long, height As Long)
'''''    width = GetSystemMetrics32(0) ' width in pixels
'''''    height = GetSystemMetrics32(1) ' height in pixels
'''''End Sub


' added 08/03/10 by atambe
Public Function AmazonMsgBox(prompt As String, Optional buttons As Long, Optional title As String) As Long
'INPUT BUTTONS:
    'vbOKOnly = 0 (default)
    'vbOKCancel = 1
    'vbYesNo = 4
            'Note, VBA's AmazonMsgBox also offers:
                'vbAbortRetryIgnore
                'vbYesNoCancel
                'vbRetryCancel

'OUTPUT BUTTONS:
    'vbOK = 1
    'vbCancel = 2
    'vbYes = 6
    'vbNo = 7

'Note: can't run this from Immediate pane due to Enter key accepted as default. Instead,
'run this from modSupport.test (top procedure in this module).

On Error GoTo generr
    
Const MIN_FORM_WIDTH As Long = 250
Const MIN_FORM_HEIGHT As Long = 140
Const FORM_HEIGHT_OFFSET_FROM_LABEL_PROMPT_HEIGHT As Long = 125
Const INIT_LABEL_PROMPT_WIDTH As Long = 550
Const IMAGE_AMAZON_SERVICES_TOP As Long = 0
Const LABEL_PROMPT_TOP As Long = 45
Const LABEL_PROMPT_LEFT As Long = 10

Dim dblTwoButtonsTotalWidth As Double
Dim dblPromptLabelRatio As Double


frmAmazonMsgBox.Caption = title

frmAmazonMsgBox.lblPrompt.Top = LABEL_PROMPT_TOP
frmAmazonMsgBox.lblPrompt.Left = LABEL_PROMPT_LEFT
frmAmazonMsgBox.lblPrompt.WordWrap = False
frmAmazonMsgBox.lblPrompt.width = INIT_LABEL_PROMPT_WIDTH
frmAmazonMsgBox.lblPrompt.Caption = prompt
frmAmazonMsgBox.lblPrompt.AutoSize = False
frmAmazonMsgBox.lblPrompt.AutoSize = True

If frmAmazonMsgBox.lblPrompt.width > INIT_LABEL_PROMPT_WIDTH Then
    frmAmazonMsgBox.lblPrompt.WordWrap = True
    frmAmazonMsgBox.lblPrompt.width = INIT_LABEL_PROMPT_WIDTH
    frmAmazonMsgBox.lblPrompt.AutoSize = False
    frmAmazonMsgBox.lblPrompt.AutoSize = True
End If

If frmAmazonMsgBox.lblPrompt.width + 20 > MIN_FORM_WIDTH Then
    frmAmazonMsgBox.width = frmAmazonMsgBox.lblPrompt.width + 20
Else
    frmAmazonMsgBox.width = MIN_FORM_WIDTH
End If

If frmAmazonMsgBox.lblPrompt.height + FORM_HEIGHT_OFFSET_FROM_LABEL_PROMPT_HEIGHT > MIN_FORM_HEIGHT Then
    frmAmazonMsgBox.height = frmAmazonMsgBox.lblPrompt.height + FORM_HEIGHT_OFFSET_FROM_LABEL_PROMPT_HEIGHT
Else
    frmAmazonMsgBox.height = MIN_FORM_HEIGHT
End If

' added 08/15/10 by atambe
If bChinaTemplate Then
    frmAmazonMsgBox.imgAmazonJoyo.Top = IMAGE_AMAZON_SERVICES_TOP
    frmAmazonMsgBox.imgAmazonJoyo.Left = ((frmAmazonMsgBox.width / 2) - (frmAmazonMsgBox.imgAmazonJoyo.width / 2)) - 3
Else
    frmAmazonMsgBox.imgAmazonServices.Top = IMAGE_AMAZON_SERVICES_TOP
    frmAmazonMsgBox.imgAmazonServices.Left = ((frmAmazonMsgBox.width / 2) - (frmAmazonMsgBox.imgAmazonServices.width / 2)) - 3
End If


Select Case buttons
    Case 0 'vbOKOnly
        frmAmazonMsgBox.imgOkay.Visible = True
        frmAmazonMsgBox.imgCancel.Visible = False
        frmAmazonMsgBox.imgYes.Visible = False
        frmAmazonMsgBox.ImgNo.Visible = False
        
        frmAmazonMsgBox.imgOkay.Top = frmAmazonMsgBox.height - 55
        
        frmAmazonMsgBox.imgOkay.Left = ((frmAmazonMsgBox.width / 2) - (frmAmazonMsgBox.imgOkay.width / 2)) - 3
        
        iAmazonMsgBoxDefaultRet = vbOK
    Case 1 'vbOKCancel
        frmAmazonMsgBox.imgOkay.Visible = True
        frmAmazonMsgBox.imgCancel.Visible = True
        frmAmazonMsgBox.imgYes.Visible = False
        frmAmazonMsgBox.ImgNo.Visible = False
        
        frmAmazonMsgBox.imgOkay.Top = frmAmazonMsgBox.height - 55
        frmAmazonMsgBox.imgCancel.Top = frmAmazonMsgBox.height - 55
        
        dblTwoButtonsTotalWidth = (frmAmazonMsgBox.imgOkay.width + frmAmazonMsgBox.imgCancel.width) + 6
        frmAmazonMsgBox.imgOkay.Left = ((frmAmazonMsgBox.width / 2) - (dblTwoButtonsTotalWidth / 2)) - 3
        frmAmazonMsgBox.imgCancel.Left = frmAmazonMsgBox.imgOkay.Left + frmAmazonMsgBox.imgOkay.width + 6
        
        iAmazonMsgBoxDefaultRet = vbOK
    Case 4 'vbYesNo
        frmAmazonMsgBox.imgOkay.Visible = False
        frmAmazonMsgBox.imgCancel.Visible = False
        frmAmazonMsgBox.imgYes.Visible = True
        frmAmazonMsgBox.ImgNo.Visible = True

        frmAmazonMsgBox.imgYes.Top = frmAmazonMsgBox.height - 55
        frmAmazonMsgBox.ImgNo.Top = frmAmazonMsgBox.height - 55

        dblTwoButtonsTotalWidth = (frmAmazonMsgBox.imgYes.width + frmAmazonMsgBox.ImgNo.width) + 6
        frmAmazonMsgBox.imgYes.Left = ((frmAmazonMsgBox.width / 2) - (dblTwoButtonsTotalWidth / 2)) - 3
        frmAmazonMsgBox.ImgNo.Left = frmAmazonMsgBox.imgYes.Left + frmAmazonMsgBox.imgYes.width + 6
        
        iAmazonMsgBoxDefaultRet = vbYes
End Select

iAmazonMsgBoxRet = -1 'init. Must init before every use.
frmAmazonMsgBox.Show vbModal
Unload frmAmazonMsgBox
AmazonMsgBox = iAmazonMsgBoxRet


Exit Function

generr:
If False Then
    Resume
End If
    
End Function


'Public iLeakCount As Long


Public Function GetHeaderRow(work_sheet As Worksheet) As Long
'updated for localized header row 2010-11-1, Greg Lovern.

    On Error GoTo generr

    'returns 2 if cell A1 contains "templatetype", otherwise returns 1.

    If InStr(UCase(work_sheet.Range("A1").value), "TEMPLATETYPE") > 0 Then
        '2010-08-04, for compatibility with localized header rows,
        'with English header rows in the next row down, usually row 3.
        'Must find the ENGLISH header row, NOT the localized header row:
        Dim strTemplateTypeVersionString As String
        Dim iTemplateTypeVersionFirstDigit As Long
        strTemplateTypeVersionString = Trim(work_sheet.Range("B1").value) 'note, removes any spaces.
        If InStr(UCase(strTemplateTypeVersionString), "VERSION=") > 0 Then
            'There is a templatetype version string in the expected place:
            iTemplateTypeVersionFirstDigit = CLng(Mid(strTemplateTypeVersionString, 9, 1))
            If iTemplateTypeVersionFirstDigit > 1 Then
                'this is templatetype version 2 or higher, which has a row for localized header
                'even if it is not used because this is an English template:
                GetHeaderRow = 3
            Else
                'this is templatetype version 1, which does NOT have a row for localized headers:
                GetHeaderRow = 2
            End If
        Else
            'templatetype version string is missing or in an unexpected place. Try row 2:
            GetHeaderRow = 2
        End If
    Else
'        GetTemplateHeaderRow = 1
        'check for unoccupied first row, for importing, where template_sheet is the import sheet:
        If work_sheet.Rows(1).Find(What:="*") Is Nothing Then
            Call ResetFindParametersToDefaults
            'first row is blank. Indicate error by returning -1:
            
            Dim iCheckRow As Long
            Dim iLastRow As Long
            iLastRow = work_sheet.Rows.Count
            For iCheckRow = 2 To iLastRow
                If work_sheet.Rows(iCheckRow).Find(What:="*") Is Nothing Then
                    'iCheckRow is unoccupied; move on to check next iRow.
                Else
                    'here's the top occupied row:
                    GetHeaderRow = iCheckRow
                    Exit Function
                End If
                Call ResetFindParametersToDefaults
            Next iCheckRow
            
            'all rows searched, no occupied rows found:
            GetHeaderRow = -1
        Else
            'first row was occupied:
            GetHeaderRow = 1
        End If
        Call ResetFindParametersToDefaults
    End If
    
    Exit Function
    
generr:
    'error looking for header row. Try row 2:
    GetHeaderRow = 2
    Exit Function

End Function


Public Function GetLastExampleRow(template_sheet As Worksheet, header_row As Long) As Long

Dim iRow As Long

iRow = header_row + 1

Do Until Not template_sheet.Cells(iRow, 1).Locked
    iRow = iRow + 1
Loop

GetLastExampleRow = iRow - 1

End Function


Public Function GetLocalLanguageName(Optional get_secondary_language_name As Boolean) As String

    Dim strLanguageDefinedName As String
    Dim strLocalLanguageName As String

    If get_secondary_language_name Then
        strLanguageDefinedName = TEMPLATE_SECONDARY_LANGUAGE_DEFINED_NAME
    Else
        strLanguageDefinedName = TEMPLATE_LANGUAGE_DEFINED_NAME
        strLocalLanguageName = ThisWorkbook.Names(strLanguageDefinedName).RefersToRange.value
        
        'check for "Master Name", and if so change to secondary language name:
        If strLocalLanguageName = INT_TABLE_MASTER_NAME_HEADER Then
            strLanguageDefinedName = TEMPLATE_SECONDARY_LANGUAGE_DEFINED_NAME
        End If
        
    End If
    
    GetLocalLanguageName = ThisWorkbook.Names(strLanguageDefinedName).RefersToRange.value
    
End Function


Public Function GetWindowsCodepage() As Long
    'This is the ANSI codepage, NOT the OEM/DOS/Keyboard/etc. codepage.
    'This is the "currently active" ANSI codepage.
    GetWindowsCodepage = CLng(GetACP)
End Function

Public Function GetWindowsLCID() As Long
    'This is the "current default system" LCID.
    GetWindowsLCID = CLng(GetSystemDefaultLCID)
End Function


Public Function GetLocalLanguageColumnHeaderFromMfaInternalNameColumnHeader( _
                    mfa_internal_name As String, _
                    Optional int_table_sheet As Worksheet, _
                    Optional int_table_local_language_col As Long, _
                    Optional int_table_mfa_internal_name_col As Long) As String
    
    Dim rgFind As Range
    Dim iRow As Long

    If int_table_sheet Is Nothing Then
        Set int_table_sheet = ThisWorkbook.Worksheets(INT_TABLE_WORKSHEET_NAME)
    End If

    If int_table_local_language_col = 0 Then
        int_table_local_language_col = GetIntTableLocalLanguageColumn(int_table_sheet)
    End If

    If int_table_mfa_internal_name_col = 0 Then
        int_table_mfa_internal_name_col = GetIntTableMfaInternalNameColumn(int_table_sheet)
    End If
    

    Set rgFind = int_table_sheet.Columns(int_table_mfa_internal_name_col).Find(mfa_internal_name)
    
    iRow = rgFind.Row
    
    GetLocalLanguageColumnHeaderFromMfaInternalNameColumnHeader = _
        int_table_sheet.Cells(iRow, int_table_local_language_col).value

End Function




Public Function GetLocalColumnHeaderFromMfaInternalName( _
                column_header_mfa_internal_name As String, _
                int_table_sheet As Worksheet, _
                template_sheet As Worksheet, _
                int_table_mfa_internal_col As Long, _
                int_table_local_name_col As Long, _
                template_header_row As Long) As String


'CHECKS FOR MULTIPLE ENTRIES OF THIS MFA INTERNAL NAME IN THE INTERNATIONAL
'TABLE, GETS EACH CORRESPONDING LOCAL NAME, AND SEARCHES FOR EACH OF THOSE LOCAL
'NAMES (AS WELL AS THE MFA INTERNAL NAME) IN THE TEMPLATE COLUMN HEADERS.

'returns empty string ("") if none found.

Dim strArrayLocalNames() As String
Dim iArrayLocalNamesIndex As Long
Dim strArrayLocalNamesItem As String
Dim iUboundArrayLocalNames As Long
Dim rgFind As Range
Dim bFound As Boolean
Dim iFindRow As Long
Dim strFoundItem As String

On Error GoTo generr


'Look for all entries of mfa internal name in international table,
'get the local name for each of them, and make an array of the local names:
iUboundArrayLocalNames = 2
ReDim strArrayLocalNames(1 To iUboundArrayLocalNames) As String 'init.

'include the mfa internal name:
strArrayLocalNames(iUboundArrayLocalNames - 1) = column_header_mfa_internal_name


Set rgFind = int_table_sheet.Columns(int_table_mfa_internal_col).Find( _
             What:=column_header_mfa_internal_name, LookAt:=xlWhole)
If rgFind Is Nothing Then
    'none found.
    bFound = False
Else
    'found one:
    bFound = True
    iFindRow = rgFind.Row
    strFoundItem = int_table_sheet.Cells(iFindRow, int_table_local_name_col).value
                'don't add it if it's an empty string:
    If strFoundItem = "" Then
        'don't add it to the array.
    Else
        'add it to the array:
        strArrayLocalNames(iUboundArrayLocalNames) = strFoundItem
        iUboundArrayLocalNames = iUboundArrayLocalNames + 1
        ReDim Preserve strArrayLocalNames(1 To iUboundArrayLocalNames)
    End If

    
    'look for more:
    Do
        Set rgFind = int_table_sheet.Columns(int_table_mfa_internal_col).Find( _
                     What:=column_header_mfa_internal_name, After:=rgFind, LookAt:=xlWhole)
        If rgFind Is Nothing Then
            'none found.
            Exit Do
        Else
            'found another one, but check whether this one was already found:
            If rgFind.Row > iFindRow Then
                'found another one.
                iFindRow = rgFind.Row
                strFoundItem = int_table_sheet.Cells(iFindRow, int_table_local_name_col).value
                'don't add it if it's an empty string:
                If strFoundItem = "" Then
                    'don't add it to the array.
                Else
                    'add it to the array:
                    strArrayLocalNames(iUboundArrayLocalNames) = strFoundItem
                    iUboundArrayLocalNames = iUboundArrayLocalNames + 1
                    ReDim Preserve strArrayLocalNames(1 To iUboundArrayLocalNames)
                End If
            Else
                'it's a repeat.
                Exit Do
            End If
        End If
    Loop
End If

'if one or more local names found:
If bFound Then
    
    'init and reuse bFound:
    bFound = False
    
    'remove unused top item in array:
    iUboundArrayLocalNames = iUboundArrayLocalNames - 1
    ReDim Preserve strArrayLocalNames(1 To iUboundArrayLocalNames)
    
    
    'search for those names in the template header row:
    For iArrayLocalNamesIndex = 1 To iUboundArrayLocalNames
    
    
        strArrayLocalNamesItem = strArrayLocalNames(iArrayLocalNamesIndex)
        Set rgFind = template_sheet.Rows(template_header_row).Find( _
                     What:=strArrayLocalNamesItem, LookAt:=xlWhole)
        If Not rgFind Is Nothing Then
            
            bFound = True
            'use this local name for validating this column:
            GetLocalColumnHeaderFromMfaInternalName = strArrayLocalNamesItem
            Exit For
            
        End If
        
    Next iArrayLocalNamesIndex
End If


'return empty string ("") if can't find required column:
If rgFind Is Nothing Then
    GetLocalColumnHeaderFromMfaInternalName = ""
End If


Exit Function

generr:

Stop
If False Then
    Resume
End If



End Function




Public Function GetTemplateWorksheet(Optional get_first_template As Boolean) As Worksheet
    If get_first_template Then
        Set GetTemplateWorksheet = shTemplate1
    ElseIf TypeName(ActiveSheet) = "DialogSheet" Then
        'user inserted an xl5 dialog sheet, which does not have a Codename property:
        Set GetTemplateWorksheet = shTemplate1
    ElseIf InStr(ActiveSheet.CodeName, "shTemplate") > 0 Then
        Set GetTemplateWorksheet = ActiveSheet
    Else
        Set GetTemplateWorksheet = shTemplate1
    End If
End Function


Public Function ActivateInstructionsWorksheet() As Boolean
    'returns True on success.
    Dim shInst As Worksheet
    Set shInst = GetInstructionsWorksheet
    If Not shInst Is Nothing Then
        shInst.Activate
        ActivateInstructionsWorksheet = True
    End If
End Function


Public Function GetInstructionsWorksheet() As Worksheet
'returns Nothing if not found.
    Dim bFound As Boolean
    
    bFound = False
    For Each GetInstructionsWorksheet In ThisWorkbook.Worksheets
        If InStr(UCase(GetInstructionsWorksheet.CodeName), "INSTRUCTIONS") > 0 Then
            If InStr(UCase(GetInstructionsWorksheet.Name), "MASTER") > 0 Then
                'skip the master instructions.
            Else
                bFound = True
                Exit For
            End If
        End If
    Next GetInstructionsWorksheet

    If Not bFound Then
        For Each GetInstructionsWorksheet In ThisWorkbook.Worksheets
            If InStr(UCase(GetInstructionsWorksheet.Name), "INST_ENGLISH USA") > 0 Then
                'this should only exist in the master.
                bFound = True
                Exit For
            End If
        Next GetInstructionsWorksheet
    End If
        
    If Not bFound Then
        Set GetInstructionsWorksheet = Nothing
    End If
End Function


Public Function GetMultipleMatchesWorksheet() As Worksheet
'returns Nothing if not found.
    Dim bFound As Boolean
    
    bFound = False

    For Each GetMultipleMatchesWorksheet In ThisWorkbook.Worksheets
        If InStr(UCase(GetMultipleMatchesWorksheet.Name), "MM_ENGLISH USA") > 0 Then
            'this should only exist in the master.
            bFound = True
            Exit For
        End If
    Next GetMultipleMatchesWorksheet

    If Not bFound Then
        For Each GetMultipleMatchesWorksheet In ThisWorkbook.Worksheets
            If InStr(UCase(GetMultipleMatchesWorksheet.CodeName), "SHMATCH") > 0 Then
                bFound = True
                Exit For
            End If
        Next GetMultipleMatchesWorksheet
    End If
    
    If Not bFound Then
        Set GetMultipleMatchesWorksheet = Nothing
    End If
End Function


Public Function GetProductsNotFoundWorksheet() As Worksheet
'returns Nothing if not found.
    Dim bFound As Boolean
    
    bFound = False

    For Each GetProductsNotFoundWorksheet In ThisWorkbook.Worksheets
        If InStr(UCase(GetProductsNotFoundWorksheet.Name), "NOTFOUND_ENGLISH USA") > 0 Then
            'this should only exist in the master.
            bFound = True
            Exit For
        End If
    Next GetProductsNotFoundWorksheet
    
    If Not bFound Then
        For Each GetProductsNotFoundWorksheet In ThisWorkbook.Worksheets
            If InStr(UCase(GetProductsNotFoundWorksheet.CodeName), "SHSEARCH") > 0 Then
                bFound = True
                Exit For
            End If
        Next GetProductsNotFoundWorksheet
    End If
    
    If Not bFound Then
        Set GetProductsNotFoundWorksheet = Nothing
    End If
End Function


Public Function GetInternationalTableWorksheet() As Worksheet
    Set GetInternationalTableWorksheet = ThisWorkbook.Worksheets(INT_TABLE_WORKSHEET_NAME)
End Function



Public Function GetInternalTemplateName(work_book As Workbook) As String
    GetInternalTemplateName = work_book.Names(INTERNAL_TEMPLATE_NAME_DEFINED_NAME).RefersToRange.value
End Function


Public Function IncrementDefinedNameSuffix(suffix As String) As String
    If suffix = "" Then
        IncrementDefinedNameSuffix = "2"
    Else
        IncrementDefinedNameSuffix = CStr(CLng(suffix) + 1)
    End If
End Function



Public Function GetDefinedNameSuffixSeparatorFromSuffix(suffix As String)
    If suffix = "" Then
        GetDefinedNameSuffixSeparatorFromSuffix = ""
    Else
        GetDefinedNameSuffixSeparatorFromSuffix = "."
    End If
End Function



Public Function GetRangeFromDefinedName(defined_name As String) As Range

'returns Nothing if not found.

On Error Resume Next

Set GetRangeFromDefinedName = ThisWorkbook.Names(defined_name).RefersToRange

End Function


Public Function Get_XMLHTTP_Object() As Object

Dim oXMLHTTP As Object
Dim strClassString As String
Dim iLbound As Long
Dim iUbound As Long
Dim ArrayVersion()
Dim iArrayIndex As Long
Dim bSuccess As Boolean

On Error GoTo XMLErr

'init:
ArrayVersion = Array(6, 3, 5)
    '6 is best, but may not be present on OS older than Vista. For
        'OS older than Vista, 6 is available by web download.
    '3 is next best, should be on every OS from Windows 2000 SP4,
        'and is still currently maintained. 3 is better than 5 or 4!!!
    '5 is next best, special Office 2003+ version, but we don't use anything
        'special in it, should be on every computer with Office (or Excel) 2003
        'or later installed.
    '4 was web only, old, NOT maintained, not recommended.
    '2.x is very old, not maintained, not recommened.
    'Wherever 4 or 2.x are present, 3 should be present too, and is better.
    'Instantiating WITHOUT version, i.e. "MSXML2.XMLHTTP" instead of
        '"MSXML2.XMLHTTP.6.0", ALWAYS returns version 3 (three), NOT the lastest version installed!!!
    'For more on MSXML versions:
        'http://blogs.msdn.com/xmlteam/archive/2006/10/23/using-the-right-version-of-msxml-in-internet-explorer.aspx
    'Items are not found using version 6, not sure why. Now using only version 3; see below.
iLbound = LBound(ArrayVersion)
iUbound = UBound(ArrayVersion)
bSuccess = False
bCannotFindXML = True

For iArrayIndex = iLbound To iUbound
'    strClassString = "MSXML2.XMLHTTP." & ArrayVersion(iArrayIndex) & ".0"
    strClassString = "MSXML2.XMLHTTP.3.0" 'currently works only with 3.0, but note you can instantiate 3.0 from later DLL versions.
    Set oXMLHTTP = CreateObject(strClassString)
    If Not oXMLHTTP Is Nothing Then
        bSuccess = True
'        Debug.Print strClassString
        Exit For
    End If
Next iArrayIndex

If bSuccess Then
    Set Get_XMLHTTP_Object = oXMLHTTP
    Set oXMLHTTP = Nothing
    bCannotFindXML = False
End If

Exit Function
XMLErr:
    Resume Next

End Function



Public Function Get_XML_DOMDocument_Object() As Object

Dim oXML_DOMDocument As Object
Dim strClassString As String
Dim iLbound As Long
Dim iUbound As Long
Dim ArrayVersion()
Dim iArrayIndex As Long
Dim bSuccess As Boolean

On Error GoTo XMLErr

'init:
ArrayVersion = Array(6, 3, 5)
    'See notes about MSXML versions in Get_XMLHTTP_Object above.
iLbound = LBound(ArrayVersion)
iUbound = UBound(ArrayVersion)
bSuccess = False
bCannotFindXML = True

For iArrayIndex = iLbound To iUbound
'    strClassString = "MSXML2.DOMDocument." & ArrayVersion(iArrayIndex) & ".0"
    strClassString = "MSXML2.DOMDocument.3.0" 'currently works only with 3.0, but note you can instantiate 3.0 from later DLL versions.
    Set oXML_DOMDocument = CreateObject(strClassString)
    If Not oXML_DOMDocument Is Nothing Then
        bSuccess = True
'        Debug.Print strClassString
        Exit For
    End If
Next iArrayIndex

If bSuccess Then
    Set Get_XML_DOMDocument_Object = oXML_DOMDocument
    Set oXML_DOMDocument = Nothing
    bCannotFindXML = False
End If

Exit Function
XMLErr:
    Resume Next

End Function



Sub MsgXMLErr()
'    MsgBox "You cannot use the advanced functionality in the Listing Loader because a required XML library is not available on this computer. Please install MSXML library from Microsoft.com and try again." & _
'    vbNewLine & vbNewLine & _
'    "Or you can enter the data manually and upload your listings in tab-delimited format using Seller Central.", _
'           vbCritical + vbOKOnly, "Listing Loader - Important Message"
    frmCannotFindXML.Show
End Sub



Public Function ActivateExcel2007AddInsTabTimer()

        Application.OnTime Now + 0.000000001, "ActivateExcel2007AddInsTab"
        '0.000000001 = ~1/10,000 sec.
    
End Function



Public Sub ActivateExcel2007AddInsTab()

'this is inactive in CutCopyMode, because the Escape keys would take Excel out of CutCopyMode.

    If Application.CutCopyMode = 0 Then
        DoEvents
        If Val(Application.Version) >= 12 Then
            'Excel 2007 or later:
            SendKeys "%x{ESC 3}"
            DoEvents
            SendKeys "{ESC 3}"
            DoEvents
            SendKeys "{ESC 3}"
        End If
    End If
End Sub



Public Sub BrowseTo(strURL As String)
    'uses default web browser.
    On Error Resume Next
    ShellExecute HWND_0, vbNullString, strURL, vbNullString, vbNullString, vbNormalFocus
End Sub


Public Function GetExcelFriendlyVersion(excel_version As String) As String

    Dim dblVersion As Double
    
    On Error Resume Next
    
    GetExcelFriendlyVersion = excel_version 'init.
    
    dblVersion = CDbl(excel_version)
    
    Select Case dblVersion
        Case 7
            GetExcelFriendlyVersion = "95"
        Case 8
            GetExcelFriendlyVersion = "97"
        Case 9
            GetExcelFriendlyVersion = "2000"
        Case 10
            GetExcelFriendlyVersion = "2002"
        Case 11
            GetExcelFriendlyVersion = "2003"
        Case 12
            GetExcelFriendlyVersion = "2007"
        Case Else
            GetExcelFriendlyVersion = excel_version
    End Select
    
End Function



Public Function IsListingLoader(work_book As Workbook) As Boolean

    If InStr(UCase(GetInternalTemplateName(work_book)), "LISTINGLOADER") > 0 Then
        IsListingLoader = True
    Else
        IsListingLoader = False
    End If

End Function



Public Sub ExcelHighlightCell(toggle As Boolean, highlight_cell As Range)

    If toggle Then
        highlight_cell.BorderAround Weight:=xlMedium, ColorIndex:=3
    Else
        highlight_cell.Borders(xlLeft).LineStyle = xlNone
        highlight_cell.Borders(xlRight).LineStyle = xlNone
        highlight_cell.Borders(xlTop).LineStyle = xlNone
        highlight_cell.Borders(xlBottom).LineStyle = xlNone
        highlight_cell.BorderAround LineStyle:=xlNone
    End If
End Sub



Public Function CreateSearchIndices() As Boolean
'returns true on success.
'    amazonGlobals.searchIndices = Array( _
        "Apparel", "Automotive", "Baby", "Electronics", "GourmetFood", "HealthPersonalCare", "HomeGarden", _
        "Industrial", "Kitchen", "Miscellaneous", "MusicalInstruments", "OfficeProducts", "OutdoorLiving", _
        "PCHardware", "PetSupplies", "Software", "SoftwareVideoGames", "SportingGoods", "Tools", "Toys", _
        "VideoGames", "WirelessAccessories", "Watches")
    amazonGlobals.searchIndices = GetPreferenceListAsArray(ThisWorkbook, "LookupIndex")
    bSearchIndicesInitialized = True
    CreateSearchIndices = True
End Function


Public Function GetAmazonToolbarName() As String
GetAmazonToolbarName = ThisWorkbook.Names(TOOLBAR_NAME_DEFINED_NAME).RefersToRange.value
End Function

Public Function GetAmazonToolbarLogoCaption() As String
GetAmazonToolbarLogoCaption = ThisWorkbook.Names(TOOLBAR_LOGO_CAPTION_DEFINED_NAME).RefersToRange.value
End Function

Public Function GetBulkLookupToolbarButtonCaption() As String
GetBulkLookupToolbarButtonCaption = ThisWorkbook.Names(TOOLBAR_BUTTON_CAPTION_BULK_LOOKUP_DEFINED_NAME).RefersToRange.value
End Function

Public Function GetTurnOnProductLookupToolbarButtonCaption() As String
GetTurnOnProductLookupToolbarButtonCaption = ThisWorkbook.Names(TOOLBAR_BUTTON_CAPTION_TURN_ON_PRODUCT_LOOKUP_DEFINED_NAME).RefersToRange.value
End Function

Public Function GetTurnOffProductLookupToolbarButtonCaption() As String
GetTurnOffProductLookupToolbarButtonCaption = ThisWorkbook.Names(TOOLBAR_BUTTON_CAPTION_TURN_OFF_PRODUCT_LOOKUP_DEFINED_NAME).RefersToRange.value
End Function

Public Function GetPreferencesToolbarButtonCaption() As String
GetPreferencesToolbarButtonCaption = ThisWorkbook.Names(TOOLBAR_BUTTON_CAPTION_PREFERENCES_DEFINED_NAME).RefersToRange.value
End Function

Public Function GetValidateToolbarButtonCaption() As String
GetValidateToolbarButtonCaption = ThisWorkbook.Names(TOOLBAR_BUTTON_CAPTION_VALIDATE_DEFINED_NAME).RefersToRange.value
End Function

Public Function GetUploadFileToolbarButtonCaption() As String
GetUploadFileToolbarButtonCaption = ThisWorkbook.Names(TOOLBAR_BUTTON_CAPTION_UPLOAD_DEFINED_NAME).RefersToRange.value
End Function

' added 07/29/10 by atambe
Public Function GetCredentialsToolbarButtonCaption() As String
GetCredentialsToolbarButtonCaption = ThisWorkbook.Names(TOOLBAR_BUTTON_CAPTION_CREDENTIALS_DEFINED_NAME).RefersToRange.value
End Function

Public Function GetImportFileToolbarButtonCaption() As String
GetImportFileToolbarButtonCaption = ThisWorkbook.Names(TOOLBAR_BUTTON_CAPTION_IMPORT_DEFINED_NAME).RefersToRange.value
End Function

Public Function GetUpdateTemplateToolbarButtonCaption() As String
GetUpdateTemplateToolbarButtonCaption = ThisWorkbook.Names(TOOLBAR_BUTTON_CAPTION_UPDATE_DEFINED_NAME).RefersToRange.value
End Function



Public Function GetAmazonToolbarLogoTooltip() As String
GetAmazonToolbarLogoTooltip = ThisWorkbook.Names(TOOLBAR_LOGO_TOOLTIP_DEFINED_NAME).RefersToRange.value
End Function

Public Function GetBulkLookupToolbarButtonTooltip() As String
GetBulkLookupToolbarButtonTooltip = ThisWorkbook.Names(TOOLBAR_BUTTON_TOOLTIP_BULK_LOOKUP_DEFINED_NAME).RefersToRange.value
End Function

Public Function GetTurnOnProductLookupToolbarButtonTooltip() As String
GetTurnOnProductLookupToolbarButtonTooltip = ThisWorkbook.Names(TOOLBAR_BUTTON_TOOLTIP_TURN_ON_PRODUCT_LOOKUP_DEFINED_NAME).RefersToRange.value
End Function

Public Function GetTurnOffProductLookupToolbarButtonTooltip() As String
GetTurnOffProductLookupToolbarButtonTooltip = ThisWorkbook.Names(TOOLBAR_BUTTON_TOOLTIP_TURN_OFF_PRODUCT_LOOKUP_DEFINED_NAME).RefersToRange.value
End Function

Public Function GetPreferencesToolbarButtonTooltip() As String
GetPreferencesToolbarButtonTooltip = ThisWorkbook.Names(TOOLBAR_BUTTON_TOOLTIP_PREFERENCES_DEFINED_NAME).RefersToRange.value
End Function

Public Function GetValidateToolbarButtonTooltip() As String
GetValidateToolbarButtonTooltip = ThisWorkbook.Names(TOOLBAR_BUTTON_TOOLTIP_VALIDATE_DEFINED_NAME).RefersToRange.value
End Function

Public Function GetUploadFileToolbarButtonTooltip() As String
GetUploadFileToolbarButtonTooltip = ThisWorkbook.Names(TOOLBAR_BUTTON_TOOLTIP_UPLOAD_DEFINED_NAME).RefersToRange.value
End Function

' added 07/29/10 by atambe
Public Function GetCredentialsToolbarButtonTooltip() As String
GetCredentialsToolbarButtonTooltip = ThisWorkbook.Names(TOOLBAR_BUTTON_TOOLTIP_CREDENTIALS_DEFINED_NAME).RefersToRange.value
End Function

Public Function GetImportFileToolbarButtonTooltip() As String
GetImportFileToolbarButtonTooltip = ThisWorkbook.Names(TOOLBAR_BUTTON_TOOLTIP_IMPORT_DEFINED_NAME).RefersToRange.value
End Function

Public Function GetUpdateTemplateToolbarButtonTooltip() As String
GetUpdateTemplateToolbarButtonTooltip = ThisWorkbook.Names(TOOLBAR_BUTTON_TOOLTIP_UPDATE_DEFINED_NAME).RefersToRange.value
End Function



Public Function GetPreferenceListAsArray(work_book As Workbook, preference_name As String) As Variant 'do not declare as array.

Dim rgList As Range
Dim vList As Variant 'do not declare as array! Will become variant array of variants.
Dim uBoundVlist As Long
Dim iVlistIndex As Long
Dim ArrayList() As Variant
Dim strFullPrefName As String

Const RANGE_ARRAY_LBOUND As Long = 1
Const RANGE_ARRAY_LIST_DIMENSION As Long = 1

strFullPrefName = PREFERENCE_DEFINED_NAME_PREFIX & preference_name

Set rgList = work_book.Names(strFullPrefName).RefersToRange
vList = rgList 'variant array of variants.

uBoundVlist = UBound(vList, RANGE_ARRAY_LIST_DIMENSION)
ReDim ArrayList(RANGE_ARRAY_LBOUND To uBoundVlist)
For iVlistIndex = RANGE_ARRAY_LBOUND To uBoundVlist
    ArrayList(iVlistIndex) = vList(iVlistIndex, RANGE_ARRAY_LIST_DIMENSION)
Next iVlistIndex

GetPreferenceListAsArray = ArrayList

End Function



Public Function GetPreferenceListAsRangeArray(work_book As Workbook, preference_name As String) As Variant 'do not declare as array!

Dim rgList As Range
Dim vList As Variant 'do not declare as array! Will become variant array of variants.
Dim vListA(1 To 1, 1 To 1) As Variant
Dim strFullPrefName As String
Dim DefinedNameNotFound As Boolean

On Error GoTo generr

strFullPrefName = PREFERENCE_DEFINED_NAME_PREFIX & preference_name
DefinedNameNotFound = False 'init.

On Error GoTo DefinedNameDoesNotExistErr
Set rgList = work_book.Names(strFullPrefName).RefersToRange
On Error GoTo generr

If DefinedNameNotFound Then
    'return error indicator "_NO_LIST_" in single-element array, and exit function:
    vListA(1, 1) = "_NO_LIST_"
    GetPreferenceListAsRangeArray = vListA
    Exit Function
End If

vList = rgList 'variant array of variants.

'if only one array element, must turn it into an array with same dimensions as a range array:
If Not IsArray(vList) Then
    vListA(1, 1) = vList
    GetPreferenceListAsRangeArray = vListA
Else
    'it's an array and has more than one element:
    GetPreferenceListAsRangeArray = vList
End If

Exit Function
generr:

    Exit Function

DefinedNameDoesNotExistErr:
    DefinedNameNotFound = True
    Resume Next

End Function



Public Function GetDefaultProductTaxCode() As String

'returns the first item in the local ProductTaxCode list.

Dim vArray As Variant

vArray = GetPreferenceListAsRangeArray(ThisWorkbook, "ProductTaxCode")

GetDefaultProductTaxCode = vArray(1, 1)

If GetDefaultProductTaxCode = "_NO_LIST_" Then
    GetDefaultProductTaxCode = ""
End If

End Function




Public Function GetIntTableDataCategoryColumn(int_table_sheet As Worksheet) As Long
    Dim rgFind As Range

    Set rgFind = int_table_sheet.Rows(INT_TABLE_HEADER_ROW).Find(INT_TABLE_DATA_CATEGORY_HEADER)
    GetIntTableDataCategoryColumn = rgFind.Column
End Function


Public Function GetIntTableAnyLanguageColumn(int_table_sheet As Worksheet, target_language As String) As Long
    Dim rgFind As Range
    
    Set rgFind = int_table_sheet.Rows(INT_TABLE_HEADER_ROW).Find(target_language)
    GetIntTableAnyLanguageColumn = rgFind.Column
End Function


Public Function GetTableCategorySingleRow(target_sheet As Worksheet, _
                                          category_name As String, category_col As Long) As Long
    'assumes there is only *ONE ROW* for this category. Returns first row found, ignores any other rows.
    'do not use for categories with more than one row.
    Dim rgFind As Range
    
    Set rgFind = target_sheet.Columns(category_col).Find(category_name)
    GetTableCategorySingleRow = rgFind.Row
End Function


' added 10/18/10 by atambe
Public Sub ResetFindParametersToDefaults()
    Dim rg As Range
    Set rg = ActiveSheet.Range("A1:A2").Find( _
                  What:="", After:=ActiveSheet.Range("A1"), LookIn:=xlFormulas, LookAt:=xlPart, _
                  SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False, SearchFormat:=False)
    Set rg = Nothing
End Sub


Public Function ProtectSheet(work_sheet As Worksheet) As Boolean
'returns True on success.

work_sheet.Protect UserInterfaceOnly:=True, DrawingObjects:=False, Contents:=True, _
    Scenarios:=False, AllowFormattingCells:=True, AllowFormattingColumns:=True, _
    AllowFormattingRows:=True, AllowInsertingColumns:=True, AllowInsertingRows:=True, _
    AllowInsertingHyperlinks:=True, AllowDeletingColumns:=True, _
    AllowDeletingRows:=True, AllowSorting:=True, AllowFiltering:=True, _
    AllowUsingPivotTables:=True


End Function


Public Function IsRangeEmpty(target_range As Range) As Boolean

On Error GoTo generr

Set rgRet = target_range.Find(What:="*", LookIn:=xlFormulas)

If rgRet Is Nothing Then
    IsRangeEmpty = True
Else
    IsRangeEmpty = False
End If

Exit Function
generr:
IsRangeEmpty = False
End Function


Public Function GetRowNumberOfLastOccupiedRow(column_range As Range) As Long
'for sheets affected by excel's .Formula = .Formula bug.
'more efficient for this to search each column than each row.

Dim shSheet As Worksheet
Dim rgFind As Range
Dim iFirstCol As Long
Dim iLastCol As Long
Dim iCol As Long
Dim iLastRow As Long

Set shSheet = column_range.Parent
iFirstCol = column_range.Cells(1).Column
iLastCol = column_range.Cells(column_range.Cells.Count).Column

iLastRow = 1 'init.
For iCol = iFirstCol To iLastCol
    Set rgFind = shSheet.Columns(iCol).EntireColumn
    Set rgFind = rgFind.Find(What:="*", After:=rgFind.Cells(rgFind.Cells.Count), LookIn:=xlFormulas, SearchDirection:=xlPrevious)
    
    If Not rgFind Is Nothing Then
        If rgFind.Row > iLastRow Then iLastRow = rgFind.Row
    End If
Next iCol

GetRowNumberOfLastOccupiedRow = iLastRow

End Function


Public Function GetRightmostOccupiedCellInRowAsRange(work_sheet As Worksheet, row_num As Long) As Range

Dim rgFind As Range

Set rgFind = work_sheet.Rows(row_num).EntireRow
If rgFind.Cells(rgFind.Cells.Count).value = "" Then
    Set rgFind = rgFind.Find(What:="*", After:=rgFind.Cells(1), LookIn:=xlFormulas, SearchDirection:=xlPrevious)
Else
    Set rgFind = rgFind.Cells(rgFind.Cells.Count)
End If

Set GetRightmostOccupiedCellInRowAsRange = rgFind

End Function

' added 07/29/10 by atambe
Public Function EncryptString(Text As String, password As String) As String
' encrypt a string using the provided password
    Dim oRijndael        As CRijndael
    Dim byteIn()         As Byte
    Dim bytePassword()   As Byte
    Dim byteOut()        As Byte
    
    Set oRijndael = New CRijndael
    
    byteIn = StrConv(Text, vbFromUnicode, 1033)
    bytePassword = StrConv(password, vbFromUnicode, 1033)
    
    byteOut = oRijndael.EncryptData(byteIn, bytePassword)
    
    EncryptString = StrConv(byteOut, vbUnicode, 1033)
End Function

' added 07/29/10 by atambe
Public Function DecryptString(Text As String, password As String) As String
' decrypt a string using the provided password, returns empty string on failure
    On Error GoTo ErrorHandler
    
    Dim oRijndael        As CRijndael
    Dim byteIn()         As Byte
    Dim bytePassword()   As Byte
    Dim byteOut()        As Byte
    
    Set oRijndael = New CRijndael
    
    byteOut = StrConv(Text, vbFromUnicode, 1033)
    bytePassword = StrConv(password, vbFromUnicode, 1033)
    
    byteIn = oRijndael.DecryptData(byteOut, bytePassword)
    
    DecryptString = StrConv(byteIn, vbUnicode, 1033)
    
    Exit Function
    
ErrorHandler:
    DecryptString = ""
End Function

' added 10/07/10 by atambe
Public Function GetTranslatedString(Key As String) As String
' get the correct translated version of the string depending on the template language
    On Error GoTo ErrorHandler
    
    Key = "translation_key_" & Key
    
    GetTranslatedString = ThisWorkbook.Names(Key).RefersToRange.value
    
    Exit Function
    
ErrorHandler:
    GetTranslatedString = ""
End Function

' added 10/12/10 by atambe
Public Function TranslateFormControls(form As Object) As String
' translate all controls that have text on the form
    Dim formControl As Control
    
    form.Caption = GetTranslatedString(form.Tag)
    
    For Each formControl In form.Controls
        If formControl.Tag <> "" Then
            formControl.Caption = GetTranslatedString(formControl.Tag)
        End If
    Next
End Function

' added 10/19/10 by atambe
Public Sub DisplayProductImage(url As String)
    Dim strSavePath As String
    strSavePath = ThisWorkbook.Path & "\ll_tmp_product_image.jpg"
    #If Win64 Then '2010-11-05 Greg Lovern, for 64-bit Excel compatibility.
        URLDownloadToFile 0, url, strSavePath, 0^, 0 'for 64-bit Excel, pass BINDF_GETNEWESTVERSION as LongLong.
    #Else
        URLDownloadToFile 0, url, strSavePath, 0, 0
    #End If
    frmImageDisplay.Show vbModeless
End Sub
Attribute VB_Name = "modTemplateSheet"
' Modified for MWS integration
' Abhijit Tambe, July 2010

Option Explicit


Public lastcolorIndex As Integer

Dim objRange As Excel.Range
Dim errors As Boolean
Dim inBatchMode As Boolean
Public ProductIDColumnNumber As Long 'Integer

Dim dblLastMouseUpTime As Double

Private Enum SheetRows
    HeaderRow = 1
    ColumnHeaderRow
    DataStartRow
End Enum

'Private Enum SheetColumns
'    SKUCol = 1
'    pricecol
'    QuantityCol
'    ProductIDCol
'    ProductIDTypeCol
'    ProductTaxCodeCol
'    ConditionTypeCol
'    ConditionNoteCol
'    UpdateDeleteCol
'    ProductTypeCol
'    AmazonidCol
'    ManufacturerCol
'    TitleCol
'    DescriptionCol
'    IsGiftWrapAvailableCol
'    IsGiftMessageAvailableCol
'    SalesPriceCol
'    SaleStartDateCol
'    SaleEndDateCol
'    ShipOptionCol
'    ShippingAmountCol
'    ShippingAmountTypeCol
'    IsShippingRestrictedCol
'End Enum

Private Enum SheetColumns
    SKUCol = 1
    PriceCol
    QuantityCol
    ProductIDCol
    ProductIDTypeCol
    ConditionTypeCol
    ConditionNoteCol
    ASINHintCol
    TitleCol
    ProductTaxCodeCol
    OperationTypeCol
    SalesPriceCol
    SaleStartDateCol
    SaleEndDateCol
    LeadtimeToShipCol
    LaunchDateCol
    IsGiftWrapAvailableCol
    IsGiftMessageAvailableCol
End Enum



Public Sub TemplateSheetToggleActiveProductLookup()
        'Application.MoveAfterReturnDirection = xlToRight
        'If amazonGlobals.firstTimeToggleForBroadbandWarning = True Then
        '    If MsgBox("This option activates product information lookup from Amazon.com. This feature does not work well without a broadband connection to the internet.", Buttons:=vbYesNo, Title:="Turn on LookupAssist from Amazon?") = vbYes Then
        '        amazonGlobals.firstTimeToggleForBroadbandWarning = False
        '        amazonGlobals.toggleToolBar
        '    End If
        'Else
        '    amazonGlobals.toggleToolBar
        'End If
        
'        Debug.Print "ran toggleActiveProductLookup."

        'test xml:
        Dim oTest As Object
        Set oTest = Get_XMLHTTP_Object
        If bCannotFindXML Then
            Call MsgXMLErr
            Exit Sub
        End If
        Set oTest = Get_XML_DOMDocument_Object
        If bCannotFindXML Then
            Call MsgXMLErr
            Exit Sub
        End If
        Set oTest = Nothing
        
        amazonGlobals.toggleToolBar
        GetTemplateWorksheet.Select 'GetTemplateWorksheet.Select
End Sub


'3/31/08: this doesn't get called:
'Public Sub TemplateSheetToggleAutofillSKU()
'       Dim Btn As Office.CommandBarButton
'       Set Btn = Application.CommandBars(GetAmazonToolbarName).Controls("Autofill SKU")
'
'        If amazonGlobals.g_AutoFillSKU = True Then
'            bAutofillSKU = False
'            Btn.State = msoButtonUp
'        Else
'            bAutofillSKU = True
'            Btn.State = msoButtonDown
'        End If
'End Sub


Public Sub TemplateSheetDefaultConditionComboBox_Change()
    'MsgBox Application.CommandBars(GetAmazonToolbarName).Controls("Default Condition").Text
End Sub

' modified 07/20/10 by atambe
Public Sub TemplateSheetBatchLookupInformation()

    On Error GoTo generr
    
    ' added 07/20/10 by atambe
    If Not CheckSecurityPassword Then Exit Sub

    inBatchMode = True
    Dim iteratErrors As Boolean
    iteratErrors = False
    errors = False
    amazonGlobals.inLookupProcedure = True
    
    Dim oldval As Boolean
    oldval = Application.EnableEvents
    Application.EnableEvents = False
    Dim bDisplayAlertsStatus As Boolean


    'get first data row:
    Dim iTemplateHeaderRow As Long
    Dim iLastExampleRow As Long
    Dim iFirstDataRow As Long
    Dim shTemplate As Worksheet
    Set shTemplate = GetTemplateWorksheet
    iTemplateHeaderRow = GetHeaderRow(shTemplate)
    iLastExampleRow = GetLastExampleRow(shTemplate, iTemplateHeaderRow)
    iFirstDataRow = iLastExampleRow + 1

    
    Application.ActiveSheet.Cells(iFirstDataRow, ProductIDCol).Activate
    
'    Dim HttpReq As New MSXML2.XMLHTTP30 'converting to late binding.
'    Dim httpreq As Object 'moved to Public on modSupport.
    Set httpreq = Nothing
    DoEvents
    Set httpreq = Get_XMLHTTP_Object()
    If bCannotFindXML Then
        Call MsgXMLErr
        Exit Sub
    End If
    
    Dim errorList As New Collection
    amazonGlobals.errorThrown = noError
    
    Dim bNoInfoInAmazon As Boolean
    Dim bBadIdentifier As Boolean
    Dim bMultipleMatches As Boolean
    Dim bNullIdentifier As Boolean
    Dim dblProgressBarVal As Double
    
    Dim bFirstGroup As Boolean
    Dim iRowsProcessedSinceLastSave As Long
    
    bNoInfoInAmazon = False
    bBadIdentifier = False
    bMultipleMatches = False
    bNullIdentifier = False
    
    Const iProductIDCol As Long = 4
    
    
    'set buttons appearance:
    If Not cbbToggleProductLookup Is Nothing Then
        cbbToggleProductLookup.Enabled = False
    End If
    Application.CommandBars(GetAmazonToolbarName).Controls(GetBulkLookupToolbarButtonCaption).State = msoButtonDown
    
    
    'Do
        'If Application.ActiveCell.Value = "" Then
            'Exit Do
    
    bFirstGroup = True 'init
    
    
    
    'get count of rows to be looked up:
    Dim iRowCount As Long
    Dim iPrgRow As Long
    Dim iCurrrentRow As Long
    iPrgRow = iFirstDataRow
    Dim rgLastCell As Range
    Dim iLastRow As Long
'    Set rgLastCell = ActiveCell.SpecialCells(xlLastCell)
'    iLastRow = rgLastCell.Row
''    Do While WorksheetFunction.CountA(Application.ActiveSheet.Cells(iLastRow, 1).EntireRow) = 0
'    Do While IsRangeEmpty(Application.ActiveSheet.Cells(iLastRow, 1).EntireRow)
'        iLastRow = iLastRow - 1
'    Loop
    iLastRow = GetRowNumberOfLastOccupiedRow(ActiveSheet.Rows(1).EntireRow)

    iRowCount = iLastRow - (iFirstDataRow - 1)
    
'    frmBulkLookupPleaseWait.prgBulkLookup = 0
    frmBulkLookupPleaseWait.lblProgressBar.width = 0
    frmBulkLookupPleaseWait.Show vbModeless
    
    ' added 10/16/10 by atambe
    Dim marketplaceID As String
    Dim merchantID As String
    Dim accessKeyID As String
    Dim secretAccessKey As String
    
    ' added 10/16/10 by atambe
    DecryptCredentials marketplaceID, merchantID, accessKeyID, secretAccessKey, GetSecurityPassword
    
    iPrgRow = 1 'init.
    iRowsProcessedSinceLastSave = 0 'init.
    bDisplayAlertsStatus = Application.DisplayAlerts
    Application.DisplayAlerts = False
'    While WorksheetFunction.CountA(Application.ActiveCell.EntireRow) <> 0
'    Do Until ActiveCell.Row > iLastRow
    For iCurrrentRow = iFirstDataRow To iLastRow
'    Debug.Print Application.ActiveCell.Address
    
        dblProgressBarVal = (iPrgRow / iRowCount) * 100
        If dblProgressBarVal > 100 Then dblProgressBarVal = 100
'        frmBulkLookupPleaseWait.prgBulkLookup = dblProgressBarVal
        frmBulkLookupPleaseWait.lblProgressBar.width = (dblProgressBarVal / 100) * frmBulkLookupPleaseWait.frameProgressBar.width
        frmBulkLookupPleaseWait.lblDetail = _
            GetTranslatedString("looking_up_1") & ActiveSheet.Cells(ActiveCell.Row, iProductIDCol).value & _
            " (#" & iPrgRow & GetTranslatedString("looking_up_2") & iRowCount & GetTranslatedString("looking_up_3") & ")..."
        frmBulkLookupPleaseWait.Repaint
        DoEvents
    
'        If (Application.ActiveSheet.Cells(Application.ActiveCell.Row, ProductIDCol).Value = "" Or Application.ActiveSheet.Cells(Application.ActiveCell.Row, AmazonidCol).Value = "" Or Application.ActiveSheet.Cells(Application.ActiveCell.Row, ManufacturerCol).Value = "" Or Application.ActiveSheet.Cells(Application.ActiveCell.Row, TitleCol).Value = "") Then
        If Application.ActiveSheet.Cells(Application.ActiveCell.Row, ASINHintCol).value = "" Then 'per sesha 1/18/08, do Bulk Lookup if asin hint is missing.
            amazonGlobals.errorThrown = noError
            
            ' modified 10/11/10 by atambe
            If TemplateSheetSingleLookupInformation(Application.ActiveCell.Row, marketplaceID, merchantID, accessKeyID, secretAccessKey, bFirstGroup) = -1 Then
                bCancelBulkLookup = True
                GoTo GoToCancelBulkLookup
                Exit Sub
            End If
                
            DoEvents
            
            If errors Then
                Select Case (amazonGlobals.errorThrown)
                    Case noInfoInAmazon:
                        bNoInfoInAmazon = True
                    Case badIdentifier:
                        bBadIdentifier = True
                        'Application.ActiveSheet.Cells(Application.ActiveCell.Row + 1, ProductIDCol).Activate
                    Case multipleMatches:
                        bMultipleMatches = True
                    Case nullIdentifier:
                        bNullIdentifier = True
                End Select
                iteratErrors = True
            End If
        Else
'            Debug.Print ActiveSheet.Name, ActiveSheet.Parent.Name
            Application.ActiveSheet.Cells(Application.ActiveCell.Row + 1, ProductIDCol).Activate
        End If
        
        'If Application.ActiveCell.Row > GetTemplateWorksheet.UsedRange.Rows.Count Then
        '    Exit Do
        'End If
        
        bFirstGroup = False
        
        DoEvents
        If bCancelBulkLookup Then
            GoTo GoToCancelBulkLookup
        End If
        iPrgRow = iPrgRow + 1
        
        iRowsProcessedSinceLastSave = iRowsProcessedSinceLastSave + 1
        If iRowsProcessedSinceLastSave = 1000 Then
            ThisWorkbook.Save
            DoEvents
            iRowsProcessedSinceLastSave = 0
        End If
        
'    Wend
'    Loop
    Next iCurrrentRow
    
    
GoToCancelBulkLookup:

    Unload frmBulkLookupPleaseWait
    
    Application.EnableEvents = oldval
    Application.DisplayAlerts = bDisplayAlertsStatus
    amazonGlobals.inLookupProcedure = False
    
    'Application.ActiveCell.Value = "Last ran: " & Now
    If iteratErrors Then
        Dim errorText As String
        errorText = GetTranslatedString("lookup_errors") & vbCrLf & vbCrLf
        If bNoInfoInAmazon Then
            errorText = errorText & "  " & Chr(151) & " " & GetTranslatedString("products_do_not_exist_1") & "'" & GetProductsNotFoundWorksheet.Name & "'" & GetTranslatedString("products_do_not_exist_2") & vbCrLf
        End If
        
        If bBadIdentifier Then
            errorText = errorText & "  " & Chr(151) & " " & GetTranslatedString("invalid_identifier_1") & "'" & GetProductsNotFoundWorksheet.Name & "'" & GetTranslatedString("invalid_identifier_2") & vbCrLf
        End If
        
        If bMultipleMatches Then
            errorText = errorText & "  " & Chr(151) & " " & GetTranslatedString("some_multiple_product_matches_1") & "'" & GetMultipleMatchesWorksheet.Name & "'" & GetTranslatedString("some_multiple_product_matches_2") & vbCrLf
        End If
                
        If bNullIdentifier Then
            errorText = errorText & "  " & Chr(151) & " " & GetTranslatedString("no_identifier_1") & "'" & GetProductsNotFoundWorksheet.Name & "'" & GetTranslatedString("no_identifier_2") & vbCrLf
        End If
                
        AmazonMsgBox errorText, vbOKOnly, GetTranslatedString("errors_found")
        
        'GetMultipleMatchesWorksheet.Activate
        'GetMultipleMatchesWorksheet.Cells(GetMultipleMatchesWorksheet.UsedRange.Rows.Count, ProductIDCol).Activate
        
        'Set objRange = Application.ActiveCell.Offset(RowOffset:=1)
        'objRange.Activate
    End If
    inBatchMode = False
'If iteratErrors Then MsgBox "Some items have errors. Please Correct"


    'set buttons appearance:
    If Not cbbToggleProductLookup Is Nothing Then
        cbbToggleProductLookup.Enabled = True
    End If
    Application.CommandBars(GetAmazonToolbarName).Controls(GetBulkLookupToolbarButtonCaption).State = msoButtonUp
    
    Exit Sub
generr:
    If Err.Number = 9999 Then
        AmazonMsgBox GetTranslatedString("too_many_products_1") & _
               GetProductsNotFoundWorksheet.Name & GetTranslatedString("too_many_products_2") & _
               vbNewLine & vbNewLine & _
               GetTranslatedString("please_remove_items_1") & _
               GetProductsNotFoundWorksheet.Name & GetTranslatedString("please_remove_items_2"), _
               vbOKOnly, GetTranslatedString("too_many_not_found")
        GoTo GoToCancelBulkLookup
    End If
    If False Then
        Resume
    End If
End Sub



Public Function TemplateSheetSingleLookupInformation(Target As Integer, marketplaceID As String, merchantID As String, accessKeyID As String, secretAccessKey As String, Optional this_is_the_first_group As Boolean) As Integer

    Dim i As Long
    
    On Error GoTo generr

    Dim shMatch As Worksheet
    Set shMatch = GetMultipleMatchesWorksheet
    Dim bProtected As Boolean
    
    TemplateSheetSingleLookupInformation = 0
    
    errors = False
    amazonGlobals.inLookupProcedure = True
    GetTemplateWorksheet.Activate
    Application.ActiveSheet.Cells(Target, ProductIDCol).Activate
    
    bProtected = ActiveSheet.ProtectContents
    ActiveSheet.Unprotect
    
'    If WorksheetFunction.CountA(Application.ActiveCell.EntireRow) = 0 Then
    If IsRangeEmpty(Application.ActiveCell.EntireRow) Then
        ActiveSheet.Rows(ActiveCell.Row).EntireRow.Delete 'GJL 6/6/08
        Exit Function
    End If
    
    Dim Count As Integer
    Dim itemlist() As amazonGlobals.OFFER_FEED_RECORD
    Dim SearchIndex As String
    Dim ItemId As String
    Dim firstrow As Integer
    Dim rownum As Integer
    Dim xlRange         As Range
    
    ItemId = Application.ActiveSheet.Cells(Target, ProductIDCol).value
    ItemId = Replace(ItemId, "-", "")
    Application.ActiveSheet.Cells(Target, ProductIDCol).value = ItemId
    
    If ItemId <> "" Then
            
'            SearchIndex = Application.ActiveSheet.Cells(Target, ProductTypeCol).Value '1/18/08
            
            Dim idType As String
            idType = Application.ActiveSheet.Cells(Target, ProductIDTypeCol).value '1/18/08
            ExcelHighlightCell False, ActiveCell
            If idType = "" Then
                idType = calculateIdType(Application.ActiveCell.value)
                If idType = "Unrecognized" Then
                
                    ReDim itemlist(1)
                    Call TemplateSheetPopulateDefaultsAndOthers(Target, itemlist, 1)
'                    itemlist(0).SearchIndex = Application.ActiveSheet.Cells(Target, ProductTypeCol).Value '1/18/08
                    itemlist(0).ProductID = ItemId
'                    itemlist(0).ProductIDType = idType '1/18/08
                    
                    GetProductsNotFoundWorksheet.Activate
                    Dim destrownum As Long 'Integer
                    destrownum = SearchAppendRow(itemlist(0))
                    GetProductsNotFoundWorksheet.Cells(destrownum, ProductIDCol).Activate
                    ExcelHighlightCell True, ActiveCell
    
                    GetTemplateWorksheet.Activate
                    Application.ActiveSheet.Cells(Target, ProductIDCol).Activate
                    TemplateSheetDeleteRow (Target)
                    errors = True
                    amazonGlobals.errorThrown = badIdentifier
                    Application.ActiveSheet.Cells(Target, ProductIDCol).Activate
                    'Set objRange = Application.ActiveCell.Offset(RowOffset:=1)
                    'objRange.Activate
                    amazonGlobals.inLookupProcedure = False
                    Exit Function
                Else
                    Application.ActiveSheet.Cells(Target, ProductIDTypeCol).value = idType '1/18/08
                End If
            End If
            
            ' added 10/11/10 by atambe
            itemlist = amazonGlobals.LookupItem(ItemId, idType, marketplaceID, merchantID, accessKeyID, secretAccessKey, Count)
                        
            ' removed 10/11/10 by atambe
            '            If SearchIndex = "" Then
            '                SearchIndex = amazonGlobals.g_DefProductType
            '                itemlist = amazonGlobals.LookupItemInCategory(ItemId, idType, SearchIndex, Count)
            '
            '                If Count = 0 Then
            '                    itemlist = amazonGlobals.LookupItemInAllCategories(ItemId, idType, Count)
            '                End If
            '
            '            Else
            '                itemlist = amazonGlobals.LookupItemInCategory(ItemId, idType, SearchIndex, Count)
            '
            '                If Count = 0 Then
            '                    Dim result As VbMsgBoxResult
            '
            '                    If inBatchMode = True Then
            '                        itemlist = amazonGlobals.LookupItemInAllCategories(ItemId, idType, Count)
            '                    ElseIf AmazonMsgBox("Item not found in the category specified. Do you want to search for Item in all Categories?", vbYesNo, "Item Not Found") = vbYes Then
            '                        itemlist = amazonGlobals.LookupItemInAllCategories(ItemId, idType, Count)
            '                    End If
            '                End If
            '            End If

            'If Count = 0 And _
            '       Application.ActiveSheet.Cells(Target, ManufacturerCol).Value <> "" And _
            '       Application.ActiveSheet.Cells(Target, TitleCol).Value <> "" Then
            '    'last resort do a look up
            '    'do a blind lookup
            '    Dim pt As String
            '    pt = getSearchIndex(Application.ActiveSheet.Cells(Target, ProductTypeCol).Value)
            '    If pt <> "" Then
            '        itemlist = amazonGlobals.AmznSearchInCategory(pt, _
            '                                            "", _
            '                                            Application.ActiveSheet.Cells(Target, ManufacturerCol).Value, _
            '                                            Application.ActiveSheet.Cells(Target, TitleCol).Value, _
            '                                            Count)
            '
            '    Else
            '
            '        itemlist = amazonGlobals.AmznSearchInAllCategories("", _
            '                                            Application.ActiveSheet.Cells(Target, ManufacturerCol).Value, _
            '                                            Application.ActiveSheet.Cells(Target, TitleCol).Value, _
            '                                            Count)
            '
            '    End If
            'End If
                    
       
            If Count = 1 Then
                errors = False
                'there was unique match in amazon catalog
                Call TemplateSheetPopulateDefaultsAndOthers(Target, itemlist, 1)
                Call TemplateSheetPopulateRow(Target, itemlist(0))
                Application.ActiveSheet.Cells(Target + 1, ProductIDCol).Activate
                
            ElseIf Count > 1 Then
                'multiple matches found in Amazon catalog
                'copy matches to sheet 3
                'delete from GetTemplateWorksheet
                Call TemplateSheetPopulateDefaultsAndOthers(Target, itemlist, Count)
                
                shMatch.Activate
                
                firstrow = shMatch.UsedRange.Rows.Count + 1
                Dim bStartNewGroup As Boolean
                Dim bLastItemInGroup As Boolean
                For i = 0 To Count - 1
                    If i = 0 Then
                        bStartNewGroup = True
                    Else
                        bStartNewGroup = False
                    End If
                    If i = Count - 1 Then
                        bLastItemInGroup = True
                    Else
                        bLastItemInGroup = False
                    End If
                    rownum = modMatchSheet.MatchAppendRow(itemlist(i), bStartNewGroup, CLng(Count), this_is_the_first_group, bLastItemInGroup, idType)
                Next i
                

'                Set xlRange = shMatch.Range(shMatch.Cells(rownum, 1), shMatch.Cells(rownum, 25))
'                With xlRange.Borders(xlEdgeBottom)
'                    .LineStyle = xlContinuous
'                    .Weight = xlMedium
'                    .ColorIndex = lastcolorIndex
'                End With
                
                'shMatch.Range(shMatch.Cells(firstRow, 1), shMatch.Cells(rownum, 25)).BorderAround Weight:=xlMedium, ColorIndex:=lastcolorIndex
                
                If lastcolorIndex = 5 Then
                    lastcolorIndex = 3
                Else
                    lastcolorIndex = 5
                End If
            
                GetTemplateWorksheet.Activate
                Application.ActiveSheet.Cells(Target, ProductIDCol).Activate
                TemplateSheetDeleteRow (Target)
                errors = True
                amazonGlobals.errorThrown = multipleMatches
                TemplateSheetSingleLookupInformation = firstrow
                
            ' added 10/11/10 by atambe
            ElseIf Count = -1 Then
                TemplateSheetSingleLookupInformation = -1
            
            Else
                'Item not found in Amazon Catalog
                'copy to GetProductsNotFoundWorksheet and delete from sheet 1
                ReDim itemlist(1)
'                itemlist(0).SearchIndex = Application.ActiveSheet.Cells(Target, ProductTypeCol).Value '1/18/08
                itemlist(0).ProductID = ItemId
'                itemlist(0).ProductIDType = idType '1/18/08
                Call TemplateSheetPopulateDefaultsAndOthers(Target, itemlist, 1)
                
                GetProductsNotFoundWorksheet.Activate
                destrownum = SearchAppendRow(itemlist(0))
        
                GetTemplateWorksheet.Activate
                Application.ActiveSheet.Cells(Target, ProductIDCol).Activate
                TemplateSheetDeleteRow (Target)
                errors = True
                amazonGlobals.errorThrown = noInfoInAmazon
            End If
    Else


 '1/18/08: (because ManufacturerCol and TitleCol are gone)
 '2/7/08: Title is now back, but Manufacturer is still gone, so keep this section commented out.
'            If Application.ActiveSheet.Cells(Target, ManufacturerCol).Value <> "" And _
'                   Application.ActiveSheet.Cells(Target, TitleCol).Value <> "" Then
'                'last resort do a look up
'                'do a blind lookup
'                Dim pt As String
'                pt = getSearchIndex(Application.ActiveSheet.Cells(Target, ProductTypeCol).Value)
'                If pt <> "" Then
'                    itemlist = amazonGlobals.AmznSearchInCategory(pt, _
'                                                        "", _
'                                                        Application.ActiveSheet.Cells(Target, ManufacturerCol).Value, _
'                                                        Application.ActiveSheet.Cells(Target, TitleCol).Value, _
'                                                        Count)
'
'                Else
'
'                    itemlist = amazonGlobals.AmznSearchInAllCategories("", _
'                                                        Application.ActiveSheet.Cells(Target, ManufacturerCol).Value, _
'                                                        Application.ActiveSheet.Cells(Target, TitleCol).Value, _
'                                                        Count)
'
'                End If
'
'                If Count >= 1 Then
'                    'one or more matches found via search in Amazon catalog
'                    'copy matches to sheet 3
'                    'delete from GetTemplateWorksheet
'                    Call TemplateSheetPopulateDefaultsAndOthers(Target, itemlist, Count)
'
'                    shMatch.Activate
'                    firstrow = shMatch.UsedRange.Rows.Count + 1
'                    For i = 0 To Count - 1
'                        rownum = modMatchSheet.MatchAppendRow(itemlist(i))
'                    Next i
'
'                    Set xlRange = shMatch.Range(shMatch.Cells(rownum, 1), shMatch.Cells(rownum, 25))
'                    With xlRange.Borders(xlEdgeBottom)
'                        .LineStyle = xlContinuous
'                        .Weight = xlMedium
'                        .ColorIndex = lastcolorIndex
'                    End With
'
'                    'shMatch.Range(shMatch.Cells(firstRow, 1), shMatch.Cells(rownum, 25)).BorderAround Weight:=xlMedium, ColorIndex:=lastcolorIndex
'
'                    If lastcolorIndex = 5 Then
'                        lastcolorIndex = 3
'                    Else
'                        lastcolorIndex = 5
'                    End If
'
'                    GetTemplateWorksheet.Activate
'                    Application.ActiveSheet.Cells(Target, ProductIDCol).Activate
'                    TemplateSheetDeleteRow (Target)
'                    errors = True
'                    amazonGlobals.errorThrown = multipleMatches
'                    TemplateSheetSingleLookupInformation = firstrow
'                Else
'                    'Item not found in Amazon Catalog
'                    'copy to GetProductsNotFoundWorksheet and delete from sheet 1
'                    ReDim itemlist(1)
'                    itemlist(0).SearchIndex = Application.ActiveSheet.Cells(Target, ProductTypeCol).Value
'                    itemlist(0).ProductID = ItemId
'                    itemlist(0).ProductIDType = idType
'                    Call TemplateSheetPopulateDefaultsAndOthers(Target, itemlist, 1)
'
'
'                    GetProductsNotFoundWorksheet.Activate
'                    destrownum = SearchAppendRow(itemlist(0))
'
'                    GetTemplateWorksheet.Activate
'                    Application.ActiveSheet.Cells(Target, ProductIDCol).Activate
'                    TemplateSheetDeleteRow (Target)
'                    errors = True
'                    amazonGlobals.errorThrown = noInfoInAmazon
'                End If
'
'            Else
'
                ReDim itemlist(1)
                itemlist(0).SearchIndex = Application.ActiveSheet.Cells(Target, ProductIDTypeCol).value
                itemlist(0).ProductID = ItemId
                itemlist(0).ProductIDType = idType
                Call TemplateSheetPopulateDefaultsAndOthers(Target, itemlist, 1)

                GetProductsNotFoundWorksheet.Activate
                destrownum = SearchAppendRow(itemlist(0))

                GetTemplateWorksheet.Activate
                Application.ActiveSheet.Cells(Target, ProductIDCol).Activate
                TemplateSheetDeleteRow (Target)
                errors = True
                amazonGlobals.errorThrown = nullIdentifier
'            End If
    End If
            
    amazonGlobals.inLookupProcedure = False
    
    Call AlternateShading
    
    Call ProtectSheet(ActiveSheet)
    
    Set shMatch = Nothing

    
    Exit Function
generr:
    If Err.Number = 9999 Then Err.Raise 9999
    If False Then
        Resume
    End If
    
    Call ProtectSheet(ActiveSheet)
    
End Function



Public Sub TemplateSheetGotWorksheetActivated()

    On Error Resume Next
    
    ProductIDColumnNumber = ProductIDCol

    If bThisWorkbookIsListingLoader Then
        Application.CommandBars(GetAmazonToolbarName).Controls(GetBulkLookupToolbarButtonCaption).Visible = True
        If Not cbbToggleProductLookup Is Nothing Then
        cbbToggleProductLookup.Visible = True
            If cbbToggleProductLookup.State <> msoButtonDown Then
                Application.CommandBars(GetAmazonToolbarName).Controls(GetBulkLookupToolbarButtonCaption).Enabled = True
            End If
        End If
        Application.CommandBars(GetAmazonToolbarName).Controls(GetValidateToolbarButtonCaption).Visible = True
        Application.CommandBars(GetAmazonToolbarName).Controls(GetUploadFileToolbarButtonCaption).Visible = True
        Application.CommandBars(GetAmazonToolbarName).Controls(GetImportFileToolbarButtonCaption).Visible = True
        '  Application.CommandBars(GetAmazonToolbarName).Controls.Item(2).Enabled = True
        'Application.CommandBars(GetAmazonToolbarName).Controls(GetUploadFileToolbarButtonCaption).Enabled = True
        'Application.CommandBars(GetAmazonToolbarName).Controls(GetPreferencesToolbarButtonCaption).Enabled = True
        'Application.CommandBars(GetAmazonToolbarName).Controls(GetImportFileToolbarButtonCaption).Enabled = True
        'Application.CommandBars(GetAmazonToolbarName).Controls("Default Condition").Enabled = True
    Else
        Application.CommandBars(GetAmazonToolbarName).Controls(GetBulkLookupToolbarButtonCaption).Enabled = True
'        Application.CommandBars(GetAmazonToolbarName).Controls.Item(2).Enabled = True
        'Application.CommandBars(GetAmazonToolbarName).Controls(GetUploadFileToolbarButtonCaption).Enabled = True
        'Application.CommandBars(GetAmazonToolbarName).Controls(GetPreferencesToolbarButtonCaption).Enabled = True
        'Application.CommandBars(GetAmazonToolbarName).Controls(GetImportFileToolbarButtonCaption).Enabled = True
        'Application.CommandBars(GetAmazonToolbarName).Controls("Autofill SKU").Enabled = True
        'Application.CommandBars(GetAmazonToolbarName).Controls("Default Condition").Enabled = True
    End If
    
'    Call ResetProdIdAndPriceColsNumberFormattingToText 'this takes a long time and probably isn't necessary now that ResetTargetRangeNumberFormattingToText is being called from TemplateSheetGotWorksheetChanged.
    Call ProtectSheet(ActiveSheet)
    
    Call ActivateExcel2007AddInsTab
    
End Sub



Public Sub TemplateSheetGotWorksheetDeactivated()

    On Error Resume Next
    
'  Application.CommandBars(GetAmazonToolbarName).Controls.Item(2).Enabled = False
    Application.CommandBars(GetAmazonToolbarName).Controls(GetBulkLookupToolbarButtonCaption).Visible = False
    If Not cbbToggleProductLookup Is Nothing Then
      cbbToggleProductLookup.Visible = False
    End If
    Application.CommandBars(GetAmazonToolbarName).Controls(GetValidateToolbarButtonCaption).Visible = False
    Application.CommandBars(GetAmazonToolbarName).Controls(GetUploadFileToolbarButtonCaption).Visible = False
    Application.CommandBars(GetAmazonToolbarName).Controls(GetImportFileToolbarButtonCaption).Visible = False
    
    If Application.CutCopyMode = 0 Then
        Dim cboTemplate As MSForms.ComboBox
        Set cboTemplate = GetCombobox(GetTemplateWorksheet(), COMBOBOX_OFFER_CREATION_NAME)
        cboTemplate.Visible = False 'don't do in cutcopymode; it takes Excel out of cutcopymode.
    End If

End Sub


Public Sub TemplateSheetGotWorksheetChanged(ByVal Target As Range)
        'MsgBox Me.UsedRange.Rows.Count
    
    Call ResetTargetRangeNumberFormattingToText(Target)
    
    'upon cell edit, remove highlight border and comment for selected cells:
    Call OnCellEditRemoveValidationIndicators(Target)

End Sub

' modified 10/16/10 by atambe
Public Sub TemplateSheetGotWorksheetSelectionChanged(ByVal Target As Range)
On Error GoTo generr
If amazonGlobals.activeModeLookup = True And Target.Column = ProductIDCol + 1 And Target.Row >= DataStartRow Then
    Dim oldval As Boolean
    oldval = Application.EnableEvents

    Application.EnableEvents = False
    
    Dim firstrow As Integer
    
'    If shTemplate Is Nothing Then Set shTemplate = GetTemplateWorksheet()
    
    amazonGlobals.errorThrown = noError
    
    ' added 10/16/10 by atambe
    Dim marketplaceID As String
    Dim merchantID As String
    Dim accessKeyID As String
    Dim secretAccessKey As String
    
    ' added 10/16/10 by atambe
    DecryptCredentials marketplaceID, merchantID, accessKeyID, secretAccessKey, GetSecurityPassword
    
'    firstrow = GetTemplateWorksheet.singleLookupInformation(Target.Row)
    firstrow = TemplateSheetSingleLookupInformation(Target.Row, marketplaceID, merchantID, accessKeyID, secretAccessKey)
    Application.EnableEvents = oldval
    If errors Then
        Select Case (amazonGlobals.errorThrown)
            Case noInfoInAmazon:
                AmazonMsgBox GetTranslatedString("product_not_found") & vbCrLf & GetTranslatedString("not_in_catalog_1") & "'" & GetProductsNotFoundWorksheet.Name & "'" & GetTranslatedString("not_in_catalog_2"), vbOKOnly, GetTranslatedString("error")
            Case badIdentifier:
                AmazonMsgBox GetTranslatedString("bad_identifier") & vbCrLf & GetTranslatedString("product_id_type_1") & "'" & GetProductsNotFoundWorksheet.Name & "'" & GetTranslatedString("product_id_type_2") & GetTranslatedString("product_id_type_3"), vbOKOnly, GetTranslatedString("error")
            Case multipleMatches:
                AmazonMsgBox GetTranslatedString("multiple_matches") & vbCrLf & GetTranslatedString("multiple_product_matches_1") & "'" & GetMultipleMatchesWorksheet.Name & "'" & GetTranslatedString("multiple_product_matches_2"), vbOKOnly, GetTranslatedString("error")
'                GetMultipleMatchesWorksheet.Activate
                'GetMultipleMatchesWorksheet.Cells(GetMultipleMatchesWorksheet.UsedRange.Rows.Count, ProductIDCol).Activate
'                GetMultipleMatchesWorksheet.Cells(firstrow, 1).Activate
            Case nullIdentifier:
                AmazonMsgBox GetTranslatedString("identifier_empty") & vbCrLf & GetTranslatedString("product_id_type_1") & "'" & GetProductsNotFoundWorksheet.Name & "'" & GetTranslatedString("product_id_type_3"), vbOKOnly, GetTranslatedString("error")

        End Select
    End If
Else


    Call SelectionChangeDropDown(Target)

End If

    Exit Sub
generr:
    If False Then
        Resume
    End If
End Sub







Public Function TemplateSheetCopyRowForInformationMissingInAmazonErrorCase(ProductID As String, ProductIDType As String)
    GetProductsNotFoundWorksheet.Activate
    Dim feedRec As amazonGlobals.OFFER_FEED_RECORD
    feedRec.ProductID = ProductID
    feedRec.ProductIDType = ProductIDType
    Dim rownum As Integer
    rownum = SearchAppendRow(feedRec)
End Function


Public Sub TemplateSheetDeleteRow(ByVal RowNumber As Integer)

    GetTemplateWorksheet.Activate
    Application.ActiveSheet.Cells(RowNumber, ProductIDCol).Activate
    Application.ActiveCell.EntireRow.Delete
    DoEvents
'    Debug.Print "deleting row " & RowNumber & " from " & ActiveSheet.Name
                
End Sub


Public Sub TemplateSheetDefaultConditionChange()
   'MsgBox Me.Value
End Sub


Public Sub TemplateSheetPopulateDefaultsAndOthers(ByVal RowNumber As Integer, ByRef feedRec() As amazonGlobals.OFFER_FEED_RECORD, Optional cnt As Integer = 1)

    If Application.ActiveSheet.Cells(RowNumber, SKUCol).value <> "" Then
        feedRec(0).SKU = Application.ActiveSheet.Cells(RowNumber, SKUCol).value
    Else
        If amazonGlobals.g_AutoFillSKU = True Then
            'feedRec(0).SKU = "S_" & "_" & Format(Now, "mmdd") & "_" & feedRec(0).ProductID + "_" & Format(Now, "HHMMSS")
            feedRec(0).SKU = amazonGlobals.GenerateSKU()
        Else
            If cnt > 1 Then
                'feedRec(0).SKU = "###TEMP_S_" & "_" & Format(Now, "mmdd") & "_" & feedRec(0).ProductID + "_" & Format(Now, "HHMMSS")
                feedRec(0).SKU = "###TEMP_S_" & amazonGlobals.GenerateSKU()
            End If
        End If
    End If
    
    If Application.ActiveSheet.Cells(RowNumber, PriceCol).value <> "" Then
        feedRec(0).Price = Application.ActiveSheet.Cells(RowNumber, PriceCol).value
    End If

    If Application.ActiveSheet.Cells(RowNumber, QuantityCol).value <> "" Then
        feedRec(0).Quantity = Application.ActiveSheet.Cells(RowNumber, QuantityCol).value
    Else
        feedRec(0).Quantity = 1
    End If


    If Application.ActiveSheet.Cells(RowNumber, ProductIDCol).value <> "" Then
        feedRec(0).ProductID = Application.ActiveSheet.Cells(RowNumber, ProductIDCol).value
    End If

    If Application.ActiveSheet.Cells(RowNumber, ProductIDTypeCol).value <> "" Then
        feedRec(0).ProductIDType = Application.ActiveSheet.Cells(RowNumber, ProductIDTypeCol).value
    End If
    
    If Application.ActiveSheet.Cells(RowNumber, ConditionTypeCol).value <> "" Then
        feedRec(0).ConditionType = Application.ActiveSheet.Cells(RowNumber, ConditionTypeCol).value
    Else
        feedRec(0).ConditionType = amazonGlobals.g_DefProdCondition
    End If
    
    If Application.ActiveSheet.Cells(RowNumber, ConditionNoteCol).value <> "" Then
        feedRec(0).ConditionNote = Application.ActiveSheet.Cells(RowNumber, ConditionNoteCol).value
    End If
    
    If Application.ActiveSheet.Cells(RowNumber, ASINHintCol).value <> "" Then
        If feedRec(0).ASINHint = "" Then
            feedRec(0).ASINHint = Application.ActiveSheet.Cells(RowNumber, ASINHintCol).value
        End If
    End If

    If Application.ActiveSheet.Cells(RowNumber, ProductTaxCodeCol).value <> "" Then
        feedRec(0).ProductTaxCode = Application.ActiveSheet.Cells(RowNumber, ProductTaxCodeCol).value
    Else
        feedRec(0).ProductTaxCode = amazonGlobals.g_DefProdTaxCode
    End If

    If Application.ActiveSheet.Cells(RowNumber, OperationTypeCol).value <> "" Then
        feedRec(0).OperationType = Application.ActiveSheet.Cells(RowNumber, OperationTypeCol).value
    Else
        feedRec(0).OperationType = amazonGlobals.g_DefUpdateDelete
    End If
    
    If Application.ActiveSheet.Cells(RowNumber, SalesPriceCol).value <> "" Then
        feedRec(0).SalesPrice = Application.ActiveSheet.Cells(RowNumber, SalesPriceCol).value
    End If
    
    If Application.ActiveSheet.Cells(RowNumber, SaleStartDateCol).value <> "" Then
        feedRec(0).SaleStartDate = Application.ActiveSheet.Cells(RowNumber, SaleStartDateCol).value
    End If
    
    If Application.ActiveSheet.Cells(RowNumber, SaleEndDateCol).value <> "" Then
        feedRec(0).SaleEndDate = Application.ActiveSheet.Cells(RowNumber, SaleEndDateCol).value
    End If

    If Application.ActiveSheet.Cells(RowNumber, LeadtimeToShipCol).value <> "" Then
        feedRec(0).LeadtimeToShip = Application.ActiveSheet.Cells(RowNumber, LeadtimeToShipCol).value
    End If

    If Application.ActiveSheet.Cells(RowNumber, LaunchDateCol).value <> "" Then
        feedRec(0).LaunchDate = Application.ActiveSheet.Cells(RowNumber, LaunchDateCol).value
    End If

    If Application.ActiveSheet.Cells(RowNumber, IsGiftWrapAvailableCol).value <> "" Then
        feedRec(0).IsGiftWrapAvailable = Application.ActiveSheet.Cells(RowNumber, IsGiftWrapAvailableCol).value
    End If
    
    If Application.ActiveSheet.Cells(RowNumber, IsGiftMessageAvailableCol).value <> "" Then
        feedRec(0).IsGiftMessageAvailable = Application.ActiveSheet.Cells(RowNumber, IsGiftMessageAvailableCol).value
    End If

    If Application.ActiveSheet.Cells(RowNumber, TitleCol).value <> "" Then
        If feedRec(0).title = "" Then
            feedRec(0).title = Application.ActiveSheet.Cells(RowNumber, TitleCol).value
        End If
    End If

'    If Application.ActiveSheet.Cells(RowNumber, DescriptionCol).Value <> "" Then
'        If feedRec(0).Description = "" Then
'            feedRec(0).Description = Application.ActiveSheet.Cells(RowNumber, DescriptionCol).Value
'        End If
'    End If
'
'
'    If Application.ActiveSheet.Cells(RowNumber, UpdateDeleteCol).Value <> "" Then
'        feedRec(0).UpdateDelete = Application.ActiveSheet.Cells(RowNumber, UpdateDeleteCol).Value
'    Else
'        feedRec(0).UpdateDelete = amazonGlobals.g_DefUpdateDelete
'    End If
'
'    If Application.ActiveSheet.Cells(RowNumber, ManufacturerCol).Value <> "" Then
'        If feedRec(0).Manufacturer = "" Then
'            feedRec(0).Manufacturer = Application.ActiveSheet.Cells(RowNumber, ManufacturerCol).Value
'        End If
'    End If
'
'    If Application.ActiveSheet.Cells(RowNumber, ShipOptionCol).Value <> "" Then
'        feedRec(0).ShipOption = Application.ActiveSheet.Cells(RowNumber, ShipOptionCol).Value
'    End If
'
'    If Application.ActiveSheet.Cells(RowNumber, ShippingAmountTypeCol).Value <> "" Then
'        feedRec(0).ShippingAmountType = Application.ActiveSheet.Cells(RowNumber, ShippingAmountTypeCol).Value
'    End If
'
'    If Application.ActiveSheet.Cells(RowNumber, IsShippingRestrictedCol).Value <> "" Then
'        feedRec(0).IsShippingRestricted = Application.ActiveSheet.Cells(RowNumber, IsShippingRestrictedCol).Value
'    End If
    
    Dim i As Integer
    For i = 1 To cnt - 1
        feedRec(i).SKU = feedRec(0).SKU
        feedRec(i).Price = feedRec(0).Price
        feedRec(i).Quantity = feedRec(0).Quantity
        feedRec(i).ProductID = feedRec(0).ProductID
        feedRec(i).ProductIDType = feedRec(0).ProductIDType
        feedRec(i).ConditionType = feedRec(0).ConditionType
        feedRec(i).ConditionNote = feedRec(0).ConditionNote
        'feedRec(i).ASINHint = feedRec(0).ASINHint
        feedRec(i).ProductTaxCode = feedRec(0).ProductTaxCode
        feedRec(i).OperationType = feedRec(0).OperationType
        feedRec(i).SalesPrice = feedRec(0).SalesPrice
        feedRec(i).SaleStartDate = feedRec(0).SaleStartDate
        feedRec(i).SaleEndDate = feedRec(0).SaleEndDate
        feedRec(i).LeadtimeToShip = feedRec(0).LeadtimeToShip
        feedRec(i).LaunchDate = feedRec(0).LaunchDate
        feedRec(i).IsGiftWrapAvailable = feedRec(0).IsGiftWrapAvailable
        feedRec(i).IsGiftMessageAvailable = feedRec(0).IsGiftMessageAvailable
        'feedRec(i).DetailPageURL = feedRec(0).DetailPageURL
'        feedRec(i).Title = feedRec(0).Title '5/19/2008 commented out - GJL.
        'feedRec(i).Description = feedRec(0).Description
        'feedRec(i).ImageURL = feedRec(0).ImageURL
    Next i
End Sub


Public Sub TemplateSheetPopulateRow(ByVal RowNumber As Long, ByRef feedRec As amazonGlobals.OFFER_FEED_RECORD) 'changed RowNumber from Integer to Long.
    Dim oldval As Boolean
    oldval = Application.EnableEvents
    Application.EnableEvents = False

    Application.ActiveSheet.Cells(RowNumber, SKUCol).value = feedRec.SKU
    Application.ActiveSheet.Cells(RowNumber, PriceCol).value = feedRec.Price
    Application.ActiveSheet.Cells(RowNumber, QuantityCol).value = feedRec.Quantity
    Application.ActiveSheet.Cells(RowNumber, ProductIDCol).value = feedRec.ProductID
    Application.ActiveSheet.Cells(RowNumber, ProductIDTypeCol).value = feedRec.ProductIDType
    Application.ActiveSheet.Cells(RowNumber, ConditionTypeCol).value = feedRec.ConditionType
    Application.ActiveSheet.Cells(RowNumber, ConditionNoteCol).value = feedRec.ConditionNote
    Application.ActiveSheet.Cells(RowNumber, ASINHintCol).value = feedRec.ASINHint
    Application.ActiveSheet.Cells(RowNumber, TitleCol).value = feedRec.title
    Application.ActiveSheet.Cells(RowNumber, ProductTaxCodeCol).value = feedRec.ProductTaxCode
    Application.ActiveSheet.Cells(RowNumber, OperationTypeCol).value = feedRec.OperationType
    Application.ActiveSheet.Cells(RowNumber, SalesPriceCol).value = feedRec.SalesPrice
    Application.ActiveSheet.Cells(RowNumber, SaleStartDateCol).value = feedRec.SaleStartDate
    Application.ActiveSheet.Cells(RowNumber, SaleEndDateCol).value = feedRec.SaleEndDate
    Application.ActiveSheet.Cells(RowNumber, LeadtimeToShipCol).value = feedRec.LeadtimeToShip '1/18/08
    Application.ActiveSheet.Cells(RowNumber, LaunchDateCol).value = feedRec.LaunchDate '1/18/08
    Application.ActiveSheet.Cells(RowNumber, IsGiftWrapAvailableCol).value = feedRec.IsGiftWrapAvailable
    Application.ActiveSheet.Cells(RowNumber, IsGiftMessageAvailableCol).value = feedRec.IsGiftMessageAvailable
    
'    Application.ActiveSheet.Cells(RowNumber, ProductTypeCol).Value = feedRec.SearchIndex
'    Application.ActiveSheet.Cells(RowNumber, ManufacturerCol).Value = feedRec.Manufacturer
'    Application.ActiveSheet.Cells(RowNumber, DescriptionCol).Value = feedRec.Description
'    Application.ActiveSheet.Cells(RowNumber, DescriptionCol).Value = feedRec.Description
'    Application.ActiveSheet.Cells(RowNumber, ShipOptionCol).Value = feedRec.ShipOption
'    Application.ActiveSheet.Cells(RowNumber, ShippingAmountTypeCol).Value = feedRec.ShippingAmountType
'    Application.ActiveSheet.Cells(RowNumber, IsShippingRestrictedCol).Value = feedRec.IsShippingRestricted
        
    Application.ActiveSheet.Cells(RowNumber + 1, ProductIDCol).Activate
    Application.EnableEvents = oldval
End Sub


Public Function TemplateSheetAppendRow(ByRef feedRec As amazonGlobals.OFFER_FEED_RECORD) As Long 'Integer

    Dim shTemplate As Worksheet
    Dim iTargetRow As Long
    
    Set shTemplate = GetTemplateWorksheet
'    iTargetRow = shTemplate.UsedRange.Rows.Count + 1
''    Do While WorksheetFunction.CountA(shTemplate.Cells(iTargetRow - 1, 1).EntireRow) = 0
'    Do While IsRangeEmpty(shTemplate.Cells(iTargetRow - 1, 1).EntireRow)
'        iTargetRow = iTargetRow - 1
'    Loop
    iTargetRow = GetRowNumberOfLastOccupiedRow(shTemplate.Rows(1).EntireRow) + 1

    TemplateSheetPopulateRow iTargetRow, feedRec
    TemplateSheetAppendRow = iTargetRow + 1
End Function






Public Function ResetProdIdAndPriceColsNumberFormattingToText()
    'call this on template sheet's sheet activate, and before upload.
    'NO, that took too long, so this is not currently in use.
    
    Dim shIntTable As Worksheet
    Dim shTemplate As Worksheet
    Dim rgTargetRange As Range
    Dim iIntTableMfaInternalNameCol As Long
    Dim iIntTableLocalNameCol As Long
    Dim iTemplateHeaderRow As Long
    Dim iProdIdCol As Long
    Dim iPriceCol As Long
    Dim strProdIdMfaInternalName As String
    Dim strPriceMfaInternalName As String
    Dim strProdIdLocalTemplateName As String
    Dim strPriceLocalTemplateName As String
    Dim bEnableEventsSetting As Boolean
    
    Const PROD_ID_FIELDNAME As String = "product-id"
    Const PRICE_FIELDNAME As String = "price"
    
'    On Error Resume Next

    If Not Application.CutCopyMode = 0 Then
        'don't do this if in cutcopymode, because this takes Excel
        'out of cutcopymode.
        Exit Function
    End If
    
    bEnableEventsSetting = Application.EnableEvents
    Application.EnableEvents = False
    
    Set shIntTable = ThisWorkbook.Worksheets(INT_TABLE_WORKSHEET_NAME)
    Set shTemplate = GetTemplateWorksheet()
    iIntTableMfaInternalNameCol = GetIntTableMfaInternalNameColumn(shIntTable)
    iIntTableLocalNameCol = GetIntTableLocalLanguageColumn(shIntTable)
    iTemplateHeaderRow = GetHeaderRow(shTemplate)


    strProdIdMfaInternalName = GetMfaInternalNameColumnHeaderFromLocalLanguageColumnHeader(PROD_ID_FIELDNAME)
    strPriceMfaInternalName = GetMfaInternalNameColumnHeaderFromLocalLanguageColumnHeader(PRICE_FIELDNAME)

    strProdIdLocalTemplateName = GetLocalColumnHeaderFromMfaInternalName( _
                                                    strProdIdMfaInternalName, _
                                                    shIntTable, shTemplate, _
                                                    iIntTableMfaInternalNameCol, iIntTableLocalNameCol, _
                                                    iTemplateHeaderRow)
    strPriceLocalTemplateName = GetLocalColumnHeaderFromMfaInternalName( _
                                                    strPriceMfaInternalName, _
                                                    shIntTable, shTemplate, _
                                                    iIntTableMfaInternalNameCol, iIntTableLocalNameCol, _
                                                    iTemplateHeaderRow)
    'prod-id:
    If strProdIdLocalTemplateName = "" Then
        'there is no product id column, so skip.
        GoTo GoToPrice
    Else
        iProdIdCol = FindColumn(shTemplate.Rows(iTemplateHeaderRow), _
                                strProdIdLocalTemplateName)
        If iProdIdCol = -1 Then
            'not found:
            Application.EnableEvents = bEnableEventsSetting
            Exit Function
        End If
    End If
    
    Set rgTargetRange = shTemplate.Range( _
                            shTemplate.Cells(iTemplateHeaderRow + 1, iProdIdCol), _
                            shTemplate.Cells(shTemplate.Rows.Count, iProdIdCol))
'    shTemplate.Unprotect
    rgTargetRange.NumberFormat = "@" 'Text.
'    rgTargetRange.Formula = rgTargetRange.Formula
'    Call ProtectSheet(shTemplate)
    
    
    
    'price:
GoToPrice:
    If strPriceLocalTemplateName = "" Then
        'there is no price column, so exit.
        Exit Function
    Else
        iPriceCol = FindColumn(shTemplate.Rows(iTemplateHeaderRow), _
                                strPriceLocalTemplateName)
        If iPriceCol = -1 Then
            'not found:
            Application.EnableEvents = bEnableEventsSetting
            Exit Function
        End If
    End If
    
    Set rgTargetRange = shTemplate.Range( _
                            shTemplate.Cells(iTemplateHeaderRow + 1, iPriceCol), _
                            shTemplate.Cells(shTemplate.Rows.Count, iPriceCol))
'    shTemplate.Unprotect
    rgTargetRange.NumberFormat = "@" 'Text.
'    rgTargetRange.Formula = rgTargetRange.Formula
'    Call ProtectSheet(shTemplate)
    
    
    Call ProtectSheet(shTemplate)
    Application.EnableEvents = bEnableEventsSetting

End Function




Public Function ResetTargetRangeNumberFormattingToText(target_range As Range)

    Dim shTarget As Worksheet
    Dim bEnableEventsSetting As Boolean
    Dim bSheetProtected As Boolean
    
    On Error Resume Next
    
    Set shTarget = target_range.Parent
    
    bEnableEventsSetting = Application.EnableEvents
    Application.EnableEvents = False
    
    If shTarget.ProtectContents Then
        bSheetProtected = True
        shTarget.Unprotect
    Else
        bSheetProtected = False
    End If
    
    target_range.NumberFormat = "@" 'Text.
    target_range.Formula = target_range.Formula
    
    If bSheetProtected Then Call ProtectSheet(shTarget)
    Application.EnableEvents = bEnableEventsSetting

End Function
Attribute VB_Name = "modThisIsTheOneButton"
Option Explicit


Private Enum SheetColumns
    SKUCol = 1
    PriceCol
    QuantityCol
    ProductIDCol
    ProductIDTypeCol
    ConditionTypeCol
    ConditionNoteCol
    ASINHintCol
    TitleCol
    ProductTaxCodeCol
    OperationTypeCol
    SalesPriceCol
    SaleStartDateCol
    SaleEndDateCol
    LeadtimeToShipCol
    LaunchDateCol
    IsGiftWrapAvailableCol
    IsGiftMessageAvailableCol
    RowRefCol
    imageurlcol
    ImageWidthCol
    ImageHeightCol
End Enum

Public Const FILL_LIGHTBLUE As Single = 0.799981688894314
Public Const FILL_NOFILL As Single = 0
Public Const FILL_LIGHTBLUE_EXCEL2003 As Long = 24
Public Const FILL_NOFILL_EXCEL2003 As Long = xlNone

Public button_feedRec As amazonGlobals.OFFER_FEED_RECORD

Public Const MATCHES_TEXT As String = "Matches:"

Sub create_button_example_usage()

Create_This_Is_The_One_Button ActiveSheet, 121, 5, 9

End Sub



Sub Clicked_A_This_Is_The_One_Button()

Dim strButtonAlternativeText As String
Dim oSelection As Object
'Dim iTargetRow As Long
Dim iPos As Long
Dim iLen As Long
Dim strChr As String
Dim strNextChr As String
Dim strArg As String
Dim bEscape As Boolean
Dim arrayArgs() As String
Dim iUboundArrayArgs As Long
Dim iArrayElement As Long
Dim bRet As Boolean
Dim shTemplate As Worksheet


Set oSelection = Selection

ActiveSheet.Shapes(Application.Caller).Select
strButtonAlternativeText = Selection.ShapeRange.AlternativeText
Reselect_Selection oSelection

'Set shTemplate = GetTemplateWorksheet
'iTargetRow = shTemplate.UsedRange.Rows.Count + 1
'Do While WorksheetFunction.CountA(shTemplate.Cells(iTargetRow - 1, 1).EntireRow) = 0
'    iTargetRow = iTargetRow - 1
'Loop


strArg = "" 'init.
bEscape = False 'init.
ReDim arrayArgs(0 To 0)
iUboundArrayArgs = 0

iLen = Len(strButtonAlternativeText)
For iPos = 1 To iLen
    If Not bEscape Then
        strChr = Mid(strButtonAlternativeText, iPos, 1)
        If strChr = "," Then
            strNextChr = Mid(strButtonAlternativeText, iPos + 1, 1)
            If strNextChr = "," Then
                'escape the comma:
                strArg = strArg & strChr
                bEscape = True
            Else
                'add the arg to the array:
                iUboundArrayArgs = iUboundArrayArgs + 1
                ReDim Preserve arrayArgs(0 To iUboundArrayArgs)
                arrayArgs(iUboundArrayArgs) = strArg
                strArg = "" 're-init.
            End If
        Else
            strArg = strArg & strChr
        End If
    Else
        'escape this comma by doing nothing here.
        bEscape = False
    End If
Next iPos
'write last arg:
iUboundArrayArgs = iUboundArrayArgs + 1
ReDim Preserve arrayArgs(0 To iUboundArrayArgs)
arrayArgs(iUboundArrayArgs) = strArg

On Error GoTo ErrPartialFeedrec

button_feedRec.SKU = GetArg(arrayArgs(1))
button_feedRec.Price = GetArg(arrayArgs(2))
button_feedRec.Quantity = GetArg(arrayArgs(3))
button_feedRec.ProductID = GetArg(arrayArgs(4))
button_feedRec.ProductIDType = GetArg(arrayArgs(5))
button_feedRec.ConditionType = GetArg(arrayArgs(6))
button_feedRec.ConditionNote = GetArg(arrayArgs(7))
button_feedRec.ASINHint = GetArg(arrayArgs(8))
button_feedRec.title = GetArg(arrayArgs(9))
button_feedRec.ProductTaxCode = GetArg(arrayArgs(10))
button_feedRec.OperationType = GetArg(arrayArgs(11))
button_feedRec.SalesPrice = GetArg(arrayArgs(12))
button_feedRec.SaleStartDate = GetArg(arrayArgs(13))
button_feedRec.SaleEndDate = GetArg(arrayArgs(14))
button_feedRec.LeadtimeToShip = GetArg(arrayArgs(15))
button_feedRec.LaunchDate = GetArg(arrayArgs(16))
button_feedRec.IsGiftWrapAvailable = GetArg(arrayArgs(17))
button_feedRec.IsGiftMessageAvailable = GetArg(arrayArgs(18))

ResumeAfterPartialFeedrec:

modMatchSheet.MatchCopyRow True 'GetMultipleMatchesWorksheet.copyRow True

bRet = Delete_Group(Application.Caller)


Exit Sub

ErrPartialFeedrec:

If False Then
    Resume
End If

Resume ResumeAfterPartialFeedrec

End Sub



Function Delete_Group(caller_button_name As String) As Boolean

'delete group from matching sheet:
Dim iDeleteRowsStart As Long
Dim iDeleteRowsEnd As Long
Dim iDeleteRowsStartTop As Long
Dim iDeleteRowsEndTop As Long
Dim iDeleteRowsCount As Long
Dim iCallerButtonTop As Long
Dim iNextMatchesRow As Long
Dim rgMatchesColumn As Range
Dim rgFindMatchesCell As Range
Dim rgFindMatchesFirstCellFound As Range
Dim rgFindLastOccupiedCell As Range
Dim iFindMatchesCellTop As Long
Dim btnButton As Button
Dim iButtonTop As Long
Dim bDone As Boolean
Dim rgActiveCell As Range
Dim rgVisibleRange As Range

On Error GoTo generr

Dim shMatch As Worksheet
Set shMatch = GetMultipleMatchesWorksheet


shMatch.Activate
'Set rgActiveCell = ActiveCell
'Set rgVisibleRange = ActiveWindow.VisibleRange

iCallerButtonTop = ActiveSheet.buttons(caller_button_name).Top

Set rgMatchesColumn = ActiveSheet.Columns(1).Cells

Set rgFindMatchesCell = rgMatchesColumn.Find(What:=MATCHES_TEXT, After:=rgMatchesColumn.Cells(1), _
                                             LookIn:=xlFormulas, LookAt:=xlPart, _
                                             SearchDirection:=xlNext, MatchCase:=False)
Set rgFindMatchesFirstCellFound = rgFindMatchesCell
iDeleteRowsStart = rgFindMatchesFirstCellFound.Row - 1 'init only.


bDone = False 'init.
Do

    Set rgFindMatchesCell = rgMatchesColumn.Find(What:=MATCHES_TEXT, After:=rgFindMatchesCell, _
                                                 LookIn:=xlFormulas, LookAt:=xlPart, _
                                                 SearchDirection:=xlNext, MatchCase:=False)
    
    If rgFindMatchesCell.Row = rgFindMatchesFirstCellFound.Row Then
        Set rgFindLastOccupiedCell = rgMatchesColumn.Cells(rgMatchesColumn.Count).End(xlUp)
        iDeleteRowsEnd = rgFindLastOccupiedCell.Row
'        bDone = True
        Exit Do
    End If
    
    iFindMatchesCellTop = rgFindMatchesCell.Top
    
    If iFindMatchesCellTop < iCallerButtonTop Then
        'this Matches cell is ABOVE the caller button:
        iDeleteRowsStart = rgFindMatchesCell.Row - 1 'this is repeatedly reset until correct.
    Else
        'this Matches cell is BELOW the caller button:
        iDeleteRowsEnd = rgFindMatchesCell.Row - 2
        bDone = True
    End If

Loop Until bDone

iDeleteRowsStartTop = ActiveSheet.Rows(iDeleteRowsStart).Top
iDeleteRowsEndTop = ActiveSheet.Rows(iDeleteRowsEnd).Top

For Each btnButton In ActiveSheet.buttons
    iButtonTop = btnButton.Top
    If iButtonTop > iDeleteRowsStartTop Then
        If iButtonTop < iDeleteRowsEndTop Then
            'delete this button:
            btnButton.Delete
        End If
    End If
Next btnButton

iDeleteRowsCount = (iDeleteRowsEnd - iDeleteRowsStart) + 1
ActiveSheet.Rows(iDeleteRowsStart).Resize(iDeleteRowsCount).Delete

'redo shading:
Call AlternateShading

'rgVisibleRange.Activate
'rgActiveCell.Select 'breaks if that cell has been deleted.
Range("A1").Activate

'activate the template sheet if the last gropu has been deleted:
If shMatch.buttons.Count = 0 Then
    GetTemplateWorksheet.Activate
End If

Delete_Group = True

Exit Function

generr:

If False Then
    Resume
End If


End Function



Function GetArg(arg As String)
    If arg = "[EMPTY]" Then
        GetArg = ""
    Else
        GetArg = arg
    End If
End Function



Sub Reselect_Selection(select_object As Object)
    On Error Resume Next
    select_object.Select
End Sub


Public Sub Create_This_Is_The_One_Button(work_sheet As Worksheet, _
                                  placement_row_num As Long, placement_col_num As Long, _
                                  target_row_num As Long, Optional button_arg As String)
Dim btnThisIsTheOne As Button
Dim strThisWorkbookName As String
Dim rgPlacementCell As Range
Dim iTop As Long
Dim iLeft As Long
'Dim strButtonNameArg As String
Dim bRet As Boolean
Dim oSelection As Object

Set oSelection = Selection

strThisWorkbookName = Escape_Apostrophes(ThisWorkbook.Name)
Set rgPlacementCell = work_sheet.Cells(placement_row_num, placement_col_num)
iTop = rgPlacementCell.Top
iLeft = rgPlacementCell.Left


Set btnThisIsTheOne = work_sheet.buttons.Add(iLeft + 3, iTop, 101.25, 18.75)
btnThisIsTheOne.Caption = GetTranslatedString("this_is_the_one")
btnThisIsTheOne.Top = iTop 'if zoom was not 100%, this will move the button to the correct location.
bRet = Enter_Alternative_Text_In_Button(work_sheet, btnThisIsTheOne.Name, button_arg)
'strButtonNameArg = """" & btnThisIsTheOne.Name & """" 'must wrap with doublequote characters.
'btnThisIsTheOne.OnAction = "'" & strThisWorkbookName & "'!'Clicked_A_This_Is_The_One_Button'"   '(" & strButtonNameArg & ")'"
btnThisIsTheOne.OnAction = "'" & strThisWorkbookName & "'!Clicked_A_This_Is_The_One_Button"   '(" & strButtonNameArg & ")'"

Reselect_Selection oSelection
    
End Sub


Function Escape_Apostrophes(work_book_name As String)
    Escape_Apostrophes = Replace(work_book_name, "'", "''")
End Function

Public Function Escape_Commas(str As String)
    Escape_Commas = Replace(str, ",", ",,")
End Function


Public Function Enter_Alternative_Text_In_Button(work_sheet As Worksheet, button_name As String, alt_text As String) As Boolean
    work_sheet.Shapes(button_name).Select
    Selection.ShapeRange.AlternativeText = alt_text
    
    Enter_Alternative_Text_In_Button = True
End Function


Public Function GetButtonArg(str As String)

'escapes commas ("," becomes ",,").
'returns "[EMPTY]" if empty.
'returns "[EMPTY]" on error.

On Error GoTo generr

Dim strButtonArg As String
strButtonArg = Escape_Commas(str)
If strButtonArg = "" Then
    strButtonArg = "[EMPTY]"
End If
GetButtonArg = strButtonArg

Exit Function

generr:
GetButtonArg = "[EMPTY]"
End Function

Sub alt_text_test_run()
Dim str As String
Dim newstr As String

str = String(4095, "x")

MsgBox Len(str)
Enter_Alternative_Text_In_Button ActiveSheet, "Button 74", str

ActiveSheet.Shapes("Button 74").Select
newstr = Selection.ShapeRange.AlternativeText

MsgBox Len(newstr)
    
End Sub




Public Sub AlternateShading()

Dim rgFind As Range
Dim rgFirstMatchesCell As Range
Dim iFirstMatchesRow As Long
Dim iLastOccupiedRow As Long
Dim iThisMatchesRow As Long
Dim iThisShadeRangeTopRow As Long
Dim iThisShadeRangeLastRow As Long
Dim iNextMatchesRow As Long
Dim bLastGroup As Boolean
Dim iLastShadeCol As Long
Dim rgShadeRange As Range
Dim rgMatchesColumn As Range
Dim bShadeThisGroup As Boolean
Dim bDone As Boolean
Dim rgLastRowOfLastGroup As Range
Dim bScreenUpdatingStatus As Boolean

On Error GoTo generr

Dim shMatch As Worksheet
Set shMatch = GetMultipleMatchesWorksheet


bScreenUpdatingStatus = Application.ScreenUpdating
Application.ScreenUpdating = False

Set rgMatchesColumn = shMatch.Columns(1).Cells

Set rgFirstMatchesCell = rgMatchesColumn.Find(What:=MATCHES_TEXT, _
                                              LookIn:=xlFormulas, LookAt:=xlPart, _
                                              SearchDirection:=xlNext, MatchCase:=False)
If rgFirstMatchesCell Is Nothing Then
    'there are no groups to shade:
    Exit Sub
Else
    iFirstMatchesRow = rgFirstMatchesCell.Row
    iLastShadeCol = SheetColumns.IsGiftMessageAvailableCol
End If

Set rgFind = rgFirstMatchesCell 'init.
iThisMatchesRow = iFirstMatchesRow 'init.
bShadeThisGroup = True 'init.
bDone = False
Do
    Set rgFind = rgMatchesColumn.Find(What:=MATCHES_TEXT, After:=rgFind, _
                                      LookIn:=xlFormulas, LookAt:=xlPart, _
                                      SearchDirection:=xlNext, MatchCase:=False)
    If rgFind.Row = rgFirstMatchesCell.Row Then
        'this is the last group:
        Set rgFind = rgMatchesColumn.Cells(rgMatchesColumn.Count).End(xlUp)
        iLastOccupiedRow = rgFind.Row
        iThisShadeRangeLastRow = iLastOccupiedRow
        bDone = True
    Else
        iNextMatchesRow = rgFind.Row
        iThisShadeRangeLastRow = iNextMatchesRow - 2
    End If
    
    Set rgShadeRange = shMatch.Range( _
                            shMatch.Cells(iThisMatchesRow, 1), _
                            shMatch.Cells(iThisShadeRangeLastRow, iLastShadeCol))
    
    If bShadeThisGroup Then
        Call ApplyShading(rgShadeRange)
    Else
        Call RemoveShading(rgShadeRange)
    End If
    
    
    'init for next loop iteration:
    iThisMatchesRow = iNextMatchesRow
    bShadeThisGroup = Not bShadeThisGroup
    
Loop Until bDone

'add thin border to bottom of last group:
Set rgLastRowOfLastGroup = rgShadeRange.Rows(rgShadeRange.Rows.Count)
With rgLastRowOfLastGroup.Borders(xlEdgeBottom)
    .LineStyle = xlContinuous
    .ColorIndex = xlAutomatic
'    .TintAndShade = 0 'not in Excel 2003.
    .Weight = xlThin
End With


Call HideCols

Application.ScreenUpdating = bScreenUpdatingStatus


Exit Sub

generr:

If False Then
    Resume
End If

Application.ScreenUpdating = bScreenUpdatingStatus

End Sub



Sub ApplyShading(range_to_shade As Range)

    With range_to_shade.Interior
        If CDbl(Val(Application.Version)) >= 12 Then
            'Excel 2007 or later:
            If Not .TintAndShade = FILL_LIGHTBLUE Then
                .Pattern = xlSolid
                .ThemeColor = 5 'xlThemeColorAccent1 'not in Excel 2003.
                .TintAndShade = FILL_LIGHTBLUE
            End If
        Else
            'Excel 2003 or earlier:
            If Not .ColorIndex = FILL_NOFILL_EXCEL2003 Then
                .ColorIndex = FILL_NOFILL_EXCEL2003 'no shading
                .Pattern = xlSolid
                .PatternColorIndex = xlAutomatic
            End If
        End If
    End With

End Sub


Sub RemoveShading(range_to_shade As Range)

    With range_to_shade.Interior
        If CDbl(Val(Application.Version)) >= 12 Then
            'Excel 2007 or later:
            If Not .TintAndShade = FILL_NOFILL Then
                .Pattern = xlNone
                .TintAndShade = FILL_NOFILL
            End If
        Else
            'Excel 2003 or earlier:
            If Not .ColorIndex = FILL_LIGHTBLUE_EXCEL2003 Then
                .ColorIndex = FILL_LIGHTBLUE_EXCEL2003
                .Pattern = xlSolid
                .PatternColorIndex = xlAutomatic
            End If
        End If
    End With

End Sub



Public Sub HideCols()

Dim iFirstHiddenCol As Long
Dim iLastHiddenCol As Long
Dim iHideCol As Long

iFirstHiddenCol = RowRefCol
iLastHiddenCol = ImageHeightCol

For iHideCol = iFirstHiddenCol To iLastHiddenCol
    GetMultipleMatchesWorksheet.Columns(iHideCol).Hidden = True
Next iHideCol

End Sub


Attribute VB_Name = "modURLDownloadToFile"
'Greg Lovern
'PrecisionCalc.com

'based on:
'http://vbnet.mvps.org/index.html?code/internet/urldownloadtofile.htm

Option Explicit

'==========================================================================================
'For 64-bit compatibility.

'MSDN: Compatibility Between the 32-bit and 64-bit Versions of Office 2010:
    'http://msdn.microsoft.com/en-us/library/ee691831.aspx
'Technet: Microsoft Office Code Compatibility Inspector:
    'http://technet.microsoft.com/en-us/library/ee833946.aspx
'Samples:
    'http://www.jkp-ads.com/articles/apideclarations.asp
'Windows API functions that were modified/added for 64-bit Windows:
    'http://msdn.microsoft.com/en-us/library/aa383663(VS.85).aspx

'PtrSafe:
    'For Excel 2010 and later (#Vba7 = True), change "Declare" to "Declare PtrSafe".
'LongPtr:
    'For Excel 2010 and later (#Vba7 = True), change the data type of handles and pointers
    'from Long to LongPtr. Leave pointers to strings as String.
'LongLong:
    'For 64-bit Excel (#Win64 = True), change Long (except for handles and pointers!) to LongLong

#If Mac Then
    'Running on MacIntosh. Do nothing.
#ElseIf VBA7 Then
    'Excel 2010 or later:
     #If Win64 Then
        '64-bit Excel, 2010 or later:
        'Use PtrSafe, LongPtr, and LongLong:
        
            Private Declare PtrSafe Function URLDownloadToFile Lib "urlmon" _
               Alias "URLDownloadToFileA" _
              (ByVal pCaller As LongPtr, _
               ByVal szURL As String, _
               ByVal szFileName As String, _
               ByVal dwReserved As LongLong, _
               ByVal lpfnCB As LongPtr) As LongLong
               
            Private Declare PtrSafe Function DeleteUrlCacheEntry Lib "Wininet.dll" _
               Alias "DeleteUrlCacheEntryA" _
              (ByVal lpszUrlName As String) As LongLong
            
            Private Const BINDF_GETNEWESTVERSION As LongLong = &H10

     #Else
        '32-bit Excel 2010 or later:
        'Use PtrSafe and LongPtr, but NOT LongLong:

            Private Declare PtrSafe Function URLDownloadToFile Lib "urlmon" _
               Alias "URLDownloadToFileA" _
              (ByVal pCaller As LongPtr, _
               ByVal szURL As String, _
               ByVal szFileName As String, _
               ByVal dwReserved As Long, _
               ByVal lpfnCB As LongPtr) As Long
               
            Private Declare PtrSafe Function DeleteUrlCacheEntry Lib "Wininet.dll" _
               Alias "DeleteUrlCacheEntryA" _
              (ByVal lpszUrlName As String) As Long
            
            Private Const BINDF_GETNEWESTVERSION As Long = &H10
        
     #End If
#Else
    'Excel 2007 or earlier:

        Private Declare Function URLDownloadToFile Lib "urlmon" _
           Alias "URLDownloadToFileA" _
          (ByVal pCaller As Long, _
           ByVal szURL As String, _
           ByVal szFileName As String, _
           ByVal dwReserved As Long, _
           ByVal lpfnCB As Long) As Long
           
        Private Declare Function DeleteUrlCacheEntry Lib "Wininet.dll" _
           Alias "DeleteUrlCacheEntryA" _
          (ByVal lpszUrlName As String) As Long
        
        Private Const BINDF_GETNEWESTVERSION As Long = &H10

#End If

'==========================================================================================
'Private Const ERROR_SUCCESS As Long = 0 'not in use.



Private Function test()
    Dim strURL As String
    Dim strLocalFullPath As String
    strURL = "http://precisioncalc.com/amazon/HTML_Table_All_Languages.htm"
    strLocalFullPath = "C:\_GJL\Release 1.9\Work\TestURLDownloadToFile.htm"
    
    Call OpenWorkbookFromURL(strURL, strLocalFullPath)
End Function



Public Function OpenWorkbookFromURL(strURL As String, strLocalFullPath As String) As Workbook

'returns Workbook object on success; Nothing on failure.
   
   Call DeleteDownloadedFileFromCache(strURL)
   
   If DownloadFile(strURL, strLocalFullPath) Then
        Set OpenWorkbookFromURL = Workbooks.Open(strLocalFullPath)
   End If
   
End Function


Public Function OpenUnicodeTabDelimFileAsWorkbookFromURL(strURL As String, strLocalFullPath As String) As Workbook

'returns Workbook object on success; Nothing on failure.

Dim vArray() As Variant
Dim iCounter As Long
Dim iStartWorkbooksCount As Long
Dim iEndWorkbooksCount As Long

    iStartWorkbooksCount = Application.Workbooks.Count
   
   Call DeleteDownloadedFileFromCache(strURL)
   
   If DownloadFile(strURL, strLocalFullPath) Then
        
        ReDim vArray(1 To 1024) As Variant
        For iCounter = 1 To 1024
            vArray(iCounter) = Array(iCounter, 2)
        Next iCounter

        Workbooks.OpenText FileName:= _
            strLocalFullPath, Origin:= _
            xlWindows, StartRow:=1, DataType:=xlDelimited, TextQualifier:= _
            xlDoubleQuote, ConsecutiveDelimiter:=False, Tab:=True, Semicolon:=False, _
            Comma:=False, Space:=False, Other:=False, FieldInfo:=vArray ', TrailingMinusNumbers:=True
        
        DoEvents
        
        'OpenText does not return anything, so must detect whether it was successful:
        iEndWorkbooksCount = Application.Workbooks.Count
        If iEndWorkbooksCount > iStartWorkbooksCount Then
            Set OpenUnicodeTabDelimFileAsWorkbookFromURL = Application.Workbooks(Application.Workbooks.Count)
        Else
            Set OpenUnicodeTabDelimFileAsWorkbookFromURL = Nothing
        End If
   End If
   
End Function



Function DownloadFile(strURL As String, _
                              strLocalFullPath As String) As Boolean

'DownloadFile returns True on success.
'(The URLDownloadToFile API returns 0 on success.)

'BINDF_GETNEWESTVERSION forces it to download a fresh copy instead of trying to get it from the cache.
'(To allow trying to get it from the cache, use 0& instead of BINDF_GETNEWESTVERSION.)

Dim iRet As Long

iRet = CLng(URLDownloadToFile(0&, strURL, strLocalFullPath, BINDF_GETNEWESTVERSION, 0&))

If iRet = 0 Then
    DownloadFile = True
Else
    DownloadFile = False
End If
   
End Function


Function DeleteDownloadedFileFromCache(strURL As String) As Boolean
    'returns 1 on success, 0 on failure.
    
    DeleteDownloadedFileFromCache = DeleteUrlCacheEntry(strURL)
End Function


Attribute VB_Name = "modValidation"
'Greg Lovern
'PrecisionCalc.com

' Modified for MWS integration
' Abhijit Tambe, July 2010

Option Explicit

Public bCancelValidation As Boolean

Public Const FULL_DATA_VALIDATION_TABLE_URL_DEFINED_NAME As String = "Full_Data_Validation_Table_URL"
Public Const DATA_VALIDATION_TABLE_WORKSHEET_NAME As String = "Data Validation"
Public Const DATA_VALIDATION_TABLE_HEADER_ROW As Long = 1


'data validation table column headers:
Public Const DATA_VALIDATION_TABLE_VALIDATE_COLUMN_HEADER As String = "Validate Column"
Public Const DATA_VALIDATION_TABLE_VALIDATE_COLUMN_TEST_HEADER As String = "Validate Column Test"
Public Const DATA_VALIDATION_TABLE_REQUIRED_COLUMN_HEADER As String = "Required Column"
Public Const DATA_VALIDATION_TABLE_REQUIRED_COLUMN_TEST_HEADER As String = "Required Column Test"
Public Const DATA_VALIDATION_TABLE_TEMPLATE_DEPENDENCY_TEST_HEADER As String = "Template Dependency Test"
Public Const DATA_VALIDATION_TABLE_LANGUAGE_COLUMN_HEADER As String = "Language"
Public Const DATA_VALIDATION_TABLE_ERROR_TEXT_HEADER As String = "Error Text"
Public Const DATA_VALIDATION_TABLE_HEIGHT_COLUMN_HEADER As String = "Height"
Public Const DATA_VALIDATION_TABLE_WIDTH_COLUMN_HEADER As String = "Width"
Public Const DATA_VALIDATION_TABLE_FONTNAME_COLUMN_HEADER As String = "Fontname"

' modified 07/20/10 by atambe
Public Function ValidateTemplate(Optional called_by_upload As Boolean, _
                                 Optional ByRef export_array As Variant) As Boolean

'if called by upload, returns True if you should proceed to upload; False if
'validation failed and user chose to NOT upload now.

Dim PriceValid As Boolean
Dim ConditionNoteValid As Boolean
Dim ProductIDType As Boolean
Dim bRet As Boolean
Dim shTemplate As Worksheet
Dim shValidationData As Worksheet
Dim shIntTable As Worksheet
Dim strTemplateLanguage As String
Dim iTemplateHeaderRow As Long
Dim iLastExampleRow As Long
Dim iTemplateFirstDataRow As Long
Dim iTemplateLastDataRow As Long
Dim iTemplateValidateRow As Long
Dim iTemplateFirstDataCol As Long
Dim iTemplateLastDataCol As Long
Dim iTemplateValidateCol As Long
Dim iTemplateRequiredCol As Long
Dim voRegex As Variant 'IRegExp2
Dim strErrorTextItem As String
Dim strErrorTextRowBuilder As String
Dim strErrorTextMessageBuilder As String
Dim iErrorTextRow As Long
Dim bTemplateCellPassesAllTests As Boolean
Dim strInternalTemplateName As String

Dim iIntTableMfaInternalNameCol As Long
Dim iIntTableLocalNameCol As Long

Dim iValidationTableValidateColumnCol As Long
Dim iValidationTableValidateColumnTestCol As Long
Dim iValidationTableRequiredColumnCol As Long
Dim iValidationTableRequiredColumnTestCol As Long
Dim iValidationTableTemplateDependencyTestCol As Long
Dim iValidationTableLanguageColumnCol As Long
Dim iValidationTableErrorTextColumnCol As Long
Dim iValidationTableHeightColumnCol As Long
Dim iValidationTableWidthColumnCol As Long
Dim iValidationTableFontnameColumnCol As Long

Dim rgTemplateValidateItemCell As Range
Dim strTemplateValidateItem As String
Dim strTemplateRequiredItem As String

Dim strValidationTableRequiredColumnItem As String
Dim strValidationTableRequiredColumnItemLocalName As String
Dim strValidationTableRequiredColumnTestItem As String
Dim strValidationTableValidateColumnTestItem As String

Dim bValidationTableRequiredColumnIsPresent As Boolean
Dim bValidationTableRequiredColumnTestIsPresent As Boolean
Dim bValidationTableRequiredColumnPassesTest As Boolean

Dim bValidationTableValidateColumnTestIsPresent As Boolean
Dim bValidationTableValidateColumnPassesTest As Boolean

Dim iValidationTableFirstItemRow As Long
Dim iValidationTableLastItemRow As Long
Dim rgValidationTableFirstItemCell As Range
Dim rgValidationTableLastItemCell As Range
Dim rgValidationTableItemLanguageRange As Range
Dim iValidationTableItemRow As Long
Dim iValidationTablePiorRowProcessed As Long

Dim sngCommentHeight As Single 'because Excel's Comment's Shape's Height property takes a Single.
Dim sngCommentTotalHeight As Single 'because Excel's Comment's Shape's Height property takes a Single.
Dim sngCommentWidth As Single 'because Excel's Comment's Shape's Width property takes a Single.
Dim sngCommentMaxWidth As Single 'because Excel's Comment's Shape's Width property takes a Single.
Dim strCommentFontname As String

Dim rgFind As Range
'Dim iFindRow As Long
Dim rgLanguageCell As Range
Dim strTemplateHeader As String
Dim strTemplateHeaderMfaInternalName As String
Dim strMsgBoxErrorColumnList As String
Dim strMsgBoxErrorColumnLetter As String
Dim strMsgBoxErrorColumnSingularOrPluralPart As String
Dim iMsgBoxErrorColumnCount As Long
Dim bThisTemplateColumnAlreadyEnteredInErrorMsgBox As Boolean
Dim bEnableEventsStatus As Boolean
Dim rgDropdownList As Range
'Dim strArrayLocalNames() As String
'Dim iArrayLocalNamesIndex As Long
'Dim strArrayLocalNamesItem As String
'Dim iUboundArrayLocalNames As Long
Dim bFound As Boolean
Dim strTemp As String
Dim rgOldArea As Range
Dim bRequiredColumnHeaderNotFoundInTemplate As Boolean
Dim bValidateColumnTestIsRegex As Boolean
Dim bValidateColumnTestIsByList As Boolean
'Dim bValidateColumnTestIsOBLO As Boolean 'Optional But List Only
Dim bIsProductIDCol As Boolean
Dim iMsgBoxRet As Integer
Dim bUploadNow As Boolean
Dim bExportArray As Boolean
Dim iUboundExportArray As Long

'Const OBLO As String = "O_B_L_O" 'Optional But List Only
Const PRODUCT_ID_MFA_INTERNAL_NAME As String = "product-id"
Const PRODUCT_ID_TYPE_MFA_INTERNAL_NAME As String = "product-id-type"


On Error GoTo generr

bEnableEventsStatus = Application.EnableEvents
Application.EnableEvents = False

frmValidatePleaseWait.Show vbModeless
'frmValidatePleaseWait.prgUpdate.value = 0
frmValidatePleaseWait.lblProgressBar.width = 0
frmValidatePleaseWait.Repaint
DoEvents

strInternalTemplateName = GetInternalTemplateName(ThisWorkbook)

Set shIntTable = ThisWorkbook.Worksheets(INT_TABLE_WORKSHEET_NAME)
iIntTableMfaInternalNameCol = GetIntTableMfaInternalNameColumn(shIntTable)
iIntTableLocalNameCol = GetIntTableLocalLanguageColumn(shIntTable)

strMsgBoxErrorColumnList = "" 'init.
iMsgBoxErrorColumnCount = 0
Set voRegex = CreateObject("VBScript.RegExp")

'loop through column headers in template, find each one in validation data sheet:
Set shTemplate = GetTemplateWorksheet()
strTemplateLanguage = GetLocalLanguageName()
Set shValidationData = ThisWorkbook.Worksheets(DATA_VALIDATION_TABLE_WORKSHEET_NAME)
iTemplateHeaderRow = GetHeaderRow(shTemplate)
iLastExampleRow = GetLastExampleRow(shTemplate, iTemplateHeaderRow)

iTemplateFirstDataRow = iLastExampleRow + 1
iTemplateFirstDataCol = 1

'Set rgFind = shTemplate.Cells(iTemplateHeaderRow, shTemplate.Columns.Count).End(xlToLeft)
Set rgFind = GetRightmostOccupiedCellInRowAsRange(shTemplate, iTemplateHeaderRow)

iTemplateLastDataCol = rgFind.Column

'get data validation table's column numbers:
iValidationTableValidateColumnCol = shValidationData.Rows(DATA_VALIDATION_TABLE_HEADER_ROW).Find(What:=DATA_VALIDATION_TABLE_VALIDATE_COLUMN_HEADER, LookAt:=xlWhole).Column
iValidationTableValidateColumnTestCol = shValidationData.Rows(DATA_VALIDATION_TABLE_HEADER_ROW).Find(What:=DATA_VALIDATION_TABLE_VALIDATE_COLUMN_TEST_HEADER, LookAt:=xlWhole).Column
iValidationTableRequiredColumnCol = shValidationData.Rows(DATA_VALIDATION_TABLE_HEADER_ROW).Find(What:=DATA_VALIDATION_TABLE_REQUIRED_COLUMN_HEADER, LookAt:=xlWhole).Column
iValidationTableRequiredColumnTestCol = shValidationData.Rows(DATA_VALIDATION_TABLE_HEADER_ROW).Find(What:=DATA_VALIDATION_TABLE_REQUIRED_COLUMN_TEST_HEADER, LookAt:=xlWhole).Column
iValidationTableTemplateDependencyTestCol = shValidationData.Rows(DATA_VALIDATION_TABLE_HEADER_ROW).Find(What:=DATA_VALIDATION_TABLE_TEMPLATE_DEPENDENCY_TEST_HEADER, LookAt:=xlWhole).Column
iValidationTableLanguageColumnCol = shValidationData.Rows(DATA_VALIDATION_TABLE_HEADER_ROW).Find(What:=DATA_VALIDATION_TABLE_LANGUAGE_COLUMN_HEADER, LookAt:=xlWhole).Column
iValidationTableErrorTextColumnCol = shValidationData.Rows(DATA_VALIDATION_TABLE_HEADER_ROW).Find(What:=DATA_VALIDATION_TABLE_ERROR_TEXT_HEADER, LookAt:=xlWhole).Column
iValidationTableHeightColumnCol = shValidationData.Rows(DATA_VALIDATION_TABLE_HEADER_ROW).Find(What:=DATA_VALIDATION_TABLE_HEIGHT_COLUMN_HEADER, LookAt:=xlWhole).Column
iValidationTableWidthColumnCol = shValidationData.Rows(DATA_VALIDATION_TABLE_HEADER_ROW).Find(What:=DATA_VALIDATION_TABLE_WIDTH_COLUMN_HEADER, LookAt:=xlWhole).Column
iValidationTableFontnameColumnCol = shValidationData.Rows(DATA_VALIDATION_TABLE_HEADER_ROW).Find(What:=DATA_VALIDATION_TABLE_FONTNAME_COLUMN_HEADER, LookAt:=xlWhole).Column


'find last row where entire row is blank:
    'if first row is blank, set iTemplateLastDataRow to one less than iTemplateFirstDataRow,
    'so that loop through template data rows is skipped.
Set rgFind = shTemplate.Rows(iTemplateFirstDataRow).EntireRow 'init.
'Do Until WorksheetFunction.CountA(rgfind) = 0
Do Until IsRangeEmpty(rgFind)
    Set rgFind = rgFind.Offset(1, 0)
Loop
iTemplateLastDataRow = rgFind.Row - 1


'unprotect template sheet:
shTemplate.Unprotect


'start by removing any old leftover error highlighting and cell comments from the area below the last data row:
Set rgOldArea = shTemplate.Range( _
                    shTemplate.Cells(iTemplateLastDataRow + 1, iTemplateFirstDataCol), _
                    shTemplate.Cells(shTemplate.Rows.Count, iTemplateLastDataCol))
rgOldArea.ClearComments
rgOldArea.Borders.LineStyle = xlNone

If IsMissing(export_array) Then
    bExportArray = False
Else
    bExportArray = True
    iUboundExportArray = 0
    ReDim export_array(1 To 2, 0 To iUboundExportArray)
End If


'for each column in the template:
For iTemplateValidateCol = iTemplateFirstDataCol To iTemplateLastDataCol

'    frmValidatePleaseWait.prgUpdate.value = 100 * (iTemplateValidateCol / iTemplateLastDataCol)
    frmValidatePleaseWait.lblProgressBar.width = frmValidatePleaseWait.frameProgressBar.width * _
                                                (iTemplateValidateCol / iTemplateLastDataCol)
    frmValidatePleaseWait.Repaint
    DoEvents
    
    bThisTemplateColumnAlreadyEnteredInErrorMsgBox = False 'init.

    'get the mfa internal name for each header, because that's what is in the data validation table.
    strTemplateHeader = shTemplate.Cells(iTemplateHeaderRow, iTemplateValidateCol)
    strTemplateHeaderMfaInternalName = GetMfaInternalNameColumnHeaderFromLocalLanguageColumnHeader(strTemplateHeader)
    
    
    'check for product-id, which must be special-cased:
    If strTemplateHeaderMfaInternalName = PRODUCT_ID_MFA_INTERNAL_NAME Then
        bIsProductIDCol = True
    Else
        bIsProductIDCol = False
    End If
    
    
    'for each row (single cell) in this column in the template:
    For iTemplateValidateRow = iTemplateFirstDataRow To iTemplateLastDataRow
        
        If strTemplateHeader = "" Then Exit For
        If strTemplateHeaderMfaInternalName = "" Then Exit For
    
        bTemplateCellPassesAllTests = True 'init. Used to determine whether cell gets data validation cell comment and cell highlighting.
        sngCommentMaxWidth = -1 'init.
        sngCommentTotalHeight = -1 'init.
        strErrorTextMessageBuilder = "" 'init.
        bRequiredColumnHeaderNotFoundInTemplate = False 'init.
        
        
        'get the item to validate:
        Set rgTemplateValidateItemCell = shTemplate.Cells(iTemplateValidateRow, iTemplateValidateCol)
        strTemplateValidateItem = rgTemplateValidateItemCell.value
        
        
        'check for, and correct, leading or trailing spaces:
        strTemp = Trim(strTemplateValidateItem)
        If strTemplateValidateItem <> strTemp Then
            'there are leading and/or trailing spaces, so remove them:
            shTemplate.Cells(iTemplateValidateRow, iTemplateValidateCol) = strTemp
            strTemplateValidateItem = strTemp
        End If
        
        
        'find first and last rows of item's column header in validation table's "Validate Column" column:
'        Dim strTry As String
'        strTry = strTemplateHeaderMfaInternalName 'init.
'        Do
            Set rgFind = shValidationData.Columns(iValidationTableValidateColumnCol).Find( _
                         What:=strTemplateHeaderMfaInternalName, LookAt:=xlWhole)
'            If rgFind Is Nothing Then
'                'if last characters are numbers, try removing them one by one to get a match:
'                If IsNumeric(Right(strTry, 1)) Then
'                    strTry = Left(strTry, Len(strTry) - 1)
'                    If strTry = "" Then
'                        Exit Do
'                    End If
'                Else
'                    Exit Do
'                End If
'            Else
'                Exit Do
'            End If
'        Loop
        
        If rgFind Is Nothing Then
            'not there, so don't validate this template column.
            Exit For 'For iTemplateValidateRow = iTemplateFirstDataRow To iTemplateLastDataRow
        Else
            iValidationTableFirstItemRow = rgFind.Row
            Set rgFind = shValidationData.Columns(iValidationTableValidateColumnCol).Find( _
                          What:=strTemplateHeaderMfaInternalName, LookAt:=xlWhole, SearchDirection:=xlPrevious)
            iValidationTableLastItemRow = rgFind.Row
        End If
        
        
        'get range of validation data table's *language* column bounded by first and last rows of validation item:
            Set rgValidationTableItemLanguageRange = shValidationData.Range( _
                                                        shValidationData.Cells( _
                                                           iValidationTableFirstItemRow, _
                                                           iValidationTableLanguageColumnCol), _
                                                        shValidationData.Cells( _
                                                           iValidationTableLastItemRow, _
                                                           iValidationTableLanguageColumnCol))
                                                           
        
        'do each row in the data validation table, for this column header, with the template's language:
        iValidationTablePiorRowProcessed = -1 'init
        Set rgLanguageCell = rgValidationTableItemLanguageRange(rgValidationTableItemLanguageRange.Cells.Count) 'init (so that first search (in next section) will start with first item.
        If rgLanguageCell Is Nothing Then Exit For
        Do
            
            'find the next row in that range with the correct language:
            Set rgLanguageCell = rgValidationTableItemLanguageRange.Find( _
                                 What:=strTemplateLanguage, After:=rgLanguageCell, LookAt:=xlWhole)
            If rgLanguageCell Is Nothing Then Exit For
            iValidationTableItemRow = rgLanguageCell.Row
            If iValidationTableItemRow > iValidationTablePiorRowProcessed Then
                iValidationTablePiorRowProcessed = iValidationTableItemRow
                If bExportArray Then
                    iUboundExportArray = iUboundExportArray + 1
                    ReDim Preserve export_array(1 To 2, 0 To iUboundExportArray)
                    export_array(1, iUboundExportArray) = iValidationTableItemRow
                End If
                'proceed to process this row.
            Else
                'done processing rows. do not process this row.
                Exit Do
            End If
            
            
            
            
            
            
            
            
            'check for Template dependencies:
            '=========================================================================================================
        '    Stop
            Dim rgTemplateDependencyTest As Range
            Dim strTemplateDependencyTest As String
            Dim bValidateForThisTemplate As Boolean
            
            Set rgTemplateDependencyTest = shValidationData.Cells( _
                                                iValidationTableItemRow, iValidationTableTemplateDependencyTestCol)
            strTemplateDependencyTest = rgTemplateDependencyTest.value
            
            If strTemplateDependencyTest = "" Then
                'there is no template dependency for this row:
                bValidateForThisTemplate = True
            Else
                'test for correct template:
                bValidateForThisTemplate = RegexTest(strTemplateDependencyTest, strInternalTemplateName)
            End If
        
            'end of check for Template dependency.
            '=========================================================================================================







            If bValidateForThisTemplate Then

            
            
            
                
                'find the required column item, if any:
                strValidationTableRequiredColumnItem = shValidationData.Cells(iValidationTableItemRow, iValidationTableRequiredColumnCol).value
    
    
                'set flags showing whether required column and required column test are present:
                If strValidationTableRequiredColumnItem = "" Then
                    bValidationTableRequiredColumnIsPresent = False
                Else
                    bValidationTableRequiredColumnIsPresent = True
                    strValidationTableRequiredColumnTestItem = shValidationData.Cells(iValidationTableItemRow, iValidationTableRequiredColumnTestCol).value
                    If strValidationTableRequiredColumnTestItem = "" Then
                        bValidationTableRequiredColumnTestIsPresent = False
                    Else
                        bValidationTableRequiredColumnTestIsPresent = True
                    End If
                End If
                
                
                
                
                'if required column is present, find that required column in template,
                'get required item from that template column, and test it:
                If bValidationTableRequiredColumnIsPresent Then
    
    
                    '========================================================================================
                    'MUST CHECK FOR MULTIPLE ENTRIES OF THIS MFA INTERNAL NAME IN THE INTERNATIONAL
                    'TABLE, GET EACH CORRESPONDING LOCAL NAME, AND SEARCH FOR EACH OF THOSE LOCAL
                    'NAMES (AS WELL AS THE MFA INTERNAL NAME) IN THE TEMPLATE COLUMN HEADERS.
                    '========================================================================================
        
                    strValidationTableRequiredColumnItemLocalName = GetLocalColumnHeaderFromMfaInternalName( _
                                                                    strValidationTableRequiredColumnItem, _
                                                                    shIntTable, shTemplate, _
                                                                    iIntTableMfaInternalNameCol, iIntTableLocalNameCol, _
                                                                    iTemplateHeaderRow)
                        '(strValidationTableRequiredColumnItemLocalName = "" if none found)
    
    
    
    
                    'exit if can't find required column:
                    If strValidationTableRequiredColumnItemLocalName = "" Then
'                        MsgBox "Cannot find required column """ & _
'                               strValidationTableRequiredColumnItemLocalName & _
'                               """." & _
'                               vbNewLine & vbNewLine & _
'                               "Unable to validate.", _
'                               vbCritical + vbOKOnly, "Amazon Validation"
'
'                               Application.EnableEvents = bEnableEventsStatus
'                               Exit Function
                        'required column not found, so data validation error text will appear in cell comment.
                        bRequiredColumnHeaderNotFoundInTemplate = True
                    Else
                        bRequiredColumnHeaderNotFoundInTemplate = False
                    End If
                    
                    'if column found, get column number:
    '                iTemplateRequiredCol = rgFind.Column
                    If Not bRequiredColumnHeaderNotFoundInTemplate Then
                        iTemplateRequiredCol = FindColumn(shTemplate.Rows(iTemplateHeaderRow), _
                                                          strValidationTableRequiredColumnItemLocalName)
                        
                        'get required item from that template column:
                        strTemplateRequiredItem = shTemplate.Cells(iTemplateValidateRow, iTemplateRequiredCol).value
                    End If
                    
                    
                    '========================================================================================
    
    
            'check for, and correct, leading or trailing spaces:
            strTemp = Trim(strTemplateRequiredItem)
            If strTemplateRequiredItem <> strTemp Then
                'there are leading and/or trailing spaces, so remove them:
                shTemplate.Cells(iTemplateValidateRow, iTemplateRequiredCol) = strTemp
                strTemplateRequiredItem = strTemp
            End If
    
    
                    'test required column, if found:
                    If Not bRequiredColumnHeaderNotFoundInTemplate Then
                        If bValidationTableRequiredColumnTestIsPresent Then
                            'test required column against regex:
                            voRegex.Pattern = strValidationTableRequiredColumnTestItem
                            If voRegex.test(strTemplateRequiredItem) Then
                                'the required column passes the test, so
                                'the validate column must be tested:
                                bValidationTableRequiredColumnPassesTest = True
                            Else
                                'the required column fails the test, so the validation column automatically passes:
                                '(so this template cell will NOT get a data validation cell comment from
                                'this row in the validation table)
                                '(proceed to next row in template...)
                                bValidationTableRequiredColumnPassesTest = False
                                bValidationTableValidateColumnPassesTest = True
                                
                            End If
                        Else
                            'test required column against list of combobox list items:
                            bValidationTableRequiredColumnPassesTest = ValidateItemByListFromColumn( _
                                                                       strTemplateRequiredItem, _
                                                                       iTemplateRequiredCol, iTemplateValidateRow)
                                                                       
                            If Not bValidationTableRequiredColumnPassesTest Then
                                'required column fails the test, so validation column automatically passes:
                                '(so this template cell will NOT get a data validation cell comment from
                                'this row in the validation table)
                                '(proceed to next row in template...)
                                bValidationTableValidateColumnPassesTest = True
                            End If
        
                        End If 'If bValidationTableRequiredColumnTestIsPresent Then
                    End If 'If Not bRequiredColumnHeaderNotFoundInTemplate Then
                End If
                
                
                'if required column is not present, OR if required column passes test,
                'then test the validate column:
                If Not bValidationTableRequiredColumnIsPresent Or bValidationTableRequiredColumnPassesTest Then
        
                    'check whether validate column test (regex) is present:
                    bValidateColumnTestIsRegex = False 'init.
                    bValidateColumnTestIsByList = False 'init.
'                    bValidateColumnTestIsOBLO = False 'init.
                    strValidationTableValidateColumnTestItem = shValidationData.Cells(iValidationTableItemRow, iValidationTableValidateColumnTestCol)
                    If strValidationTableValidateColumnTestItem = "" Then
                        bValidateColumnTestIsByList = True
                    Else
                        'test validate column against regex:
                        bValidateColumnTestIsRegex = True
                        voRegex.Pattern = strValidationTableValidateColumnTestItem
                        If voRegex.test(strTemplateValidateItem) Then
                            'validate column passes the test,
                            'so this template cell will NOT get a data validation cell comment from
                            'this row in the validation table:
                            bValidationTableValidateColumnPassesTest = True
                        Else
                            'validate column fails the test,
                            'so this template cell WILL get a data validation cell comment from
                            'this row in the validation table:
                            bValidationTableValidateColumnPassesTest = False
                            
                        End If 'If voRegex.test(strTemplateValidateItem) Then
                    End If
                    
                    
                    
                        If bValidateColumnTestIsByList Then
                            'strValidationTableValidateColumnTestItem = "":
                            'regex test is not present for validate column,
                            'or is OBLO with a validate column entry present:
                            'test validate column against list of combobox list items:
                            bValidationTableValidateColumnPassesTest = ValidateItemByListFromColumn( _
                                                                       strTemplateValidateItem, _
                                                                       iTemplateValidateCol, iTemplateValidateRow)
                        End If
                        
     
                
                End If
                
    
    
    
                    'build column list for error message that will apear at the very end of validation:
                    If Not bValidationTableValidateColumnPassesTest Then 'Or bRequiredColumnHeaderNotFoundInTemplate Then '3/7/2008.
                        If Not bThisTemplateColumnAlreadyEnteredInErrorMsgBox Then
                            bThisTemplateColumnAlreadyEnteredInErrorMsgBox = True
                            iMsgBoxErrorColumnCount = iMsgBoxErrorColumnCount + 1
                            strMsgBoxErrorColumnLetter = shTemplate.Cells(1, iTemplateValidateCol).Address(False, False)
                            strMsgBoxErrorColumnLetter = Left(strMsgBoxErrorColumnLetter, Len(strMsgBoxErrorColumnLetter) - 1)
                            strMsgBoxErrorColumnList = strMsgBoxErrorColumnList & _
                                                       strTemplateHeader & _
                                                       " " & GetTranslatedString("column_1") & strMsgBoxErrorColumnLetter & GetTranslatedString("column_2") & _
                                                       vbNewLine
                        End If
                    End If
                
                
                'build data validation cell comment:
                If Not bValidationTableValidateColumnPassesTest Then
    
                    bTemplateCellPassesAllTests = False
                    
                    'build data validation cell comment text for this data validation table row:
                    '(when Excel imports from Web Query,
                    'table cells with multiple lines of text are imported as multiple rows)
                    
                    strErrorTextRowBuilder = shValidationData.Cells(iValidationTableItemRow, iValidationTableErrorTextColumnCol).value
                    
                    'init error cell comment's final (max) width:
                    sngCommentMaxWidth = shValidationData.Cells(iValidationTableItemRow, iValidationTableWidthColumnCol).value
                    
                    
                    If iValidationTableLastItemRow > iValidationTableItemRow Then
                        'check for more error text in additional rows:
                        iErrorTextRow = iValidationTableItemRow + 1
                        
                        Do While shValidationData.Cells(iErrorTextRow, iValidationTableValidateColumnCol).value = ""
                            
                            strErrorTextItem = shValidationData.Cells(iErrorTextRow, iValidationTableErrorTextColumnCol).value
                            strErrorTextRowBuilder = strErrorTextRowBuilder & vbLf & strErrorTextItem
                            iErrorTextRow = iErrorTextRow + 1
                        Loop
                    
                        'get error cell comment's height:
                        sngCommentHeight = shValidationData.Cells(iValidationTableItemRow, iValidationTableHeightColumnCol).value
                        sngCommentTotalHeight = sngCommentTotalHeight + sngCommentHeight + 10

                        'get error cell comment's width:
                        sngCommentWidth = shValidationData.Cells(iValidationTableItemRow, iValidationTableWidthColumnCol).value
                        If sngCommentWidth > sngCommentMaxWidth Then
                            sngCommentMaxWidth = sngCommentWidth
                        End If
                    
                        'get error cell comment's fontname:
                        strCommentFontname = shValidationData.Cells(iValidationTableItemRow, iValidationTableFontnameColumnCol).value
                        
                    End If
    
    
    
                    'build error message for single cell comment:
                    '(build strErrorTextRowBuilder piecies into single strErrorTextMessageBuilder)
                    If strErrorTextMessageBuilder = "" Then
                        'if this row is right below the header row,
                        'avoid the strikethrough effect by
                        'adding to the comment height and starting with blank row in the comment.
                        If iTemplateValidateRow = iTemplateHeaderRow + 1 Then
                            sngCommentTotalHeight = sngCommentTotalHeight + 10
                            strErrorTextMessageBuilder = vbLf & strErrorTextRowBuilder
                        Else
                            'this is NOT the row right below the header row:
                            strErrorTextMessageBuilder = strErrorTextRowBuilder
                        End If
                    Else
                        strErrorTextMessageBuilder = strErrorTextMessageBuilder & vbLf & vbLf & strErrorTextRowBuilder
                    End If
    
    
                End If
            
            End If 'If bValidateForThisTemplate Then
            

        Loop 'each row in the data validation table, for this column header, with the template's language:
        
        
        
        
        
        'add data validation cell comment to cell:
        If bTemplateCellPassesAllTests Then
            'it passed the test, so remove any highlighting and cell comment:
            ExcelHighlightCell False, rgTemplateValidateItemCell
            rgTemplateValidateItemCell.ClearComments
        Else
            'it failed the test, so apply highlighting and cell comment:
            ExcelHighlightCell True, rgTemplateValidateItemCell
            AddComment rgTemplateValidateItemCell, strErrorTextMessageBuilder, sngCommentTotalHeight, sngCommentMaxWidth, strCommentFontname
        End If
        
        
        
GoToSkipToNextRow:

    Next iTemplateValidateRow
    
Next iTemplateValidateCol


'reprotect template sheet:
Call ProtectSheet(shTemplate)

Unload frmValidatePleaseWait

If iMsgBoxErrorColumnCount = 0 Then
    If Not called_by_upload Then    ' added 07/20/10 by atambe: stop unnecessary confirmation dialog during file upload
        AmazonMsgBox GetTranslatedString("validation_complete"), vbOKOnly, GetTranslatedString("amazon_validation")
    End If
    bUploadNow = True
Else
    If iMsgBoxErrorColumnCount = 1 Then
        strMsgBoxErrorColumnSingularOrPluralPart = "column has"
    Else
        'iMsgBoxErrorColumnCount > 1
        strMsgBoxErrorColumnSingularOrPluralPart = "columns have"
    End If
    
    If called_by_upload Then
        'user clicked Upload toolbar button, which called
        SendKeys "{RIGHT}"
        iMsgBoxRet = AmazonMsgBox(GetTranslatedString("values_not_valid_1") & _
               vbNewLine & vbNewLine & _
               strMsgBoxErrorColumnList & _
               vbNewLine & vbNewLine & _
               GetTranslatedString("values_not_valid_2") & _
               vbNewLine & vbNewLine & _
               GetTranslatedString("values_not_valid_3"), _
               vbYesNo, GetTranslatedString("amazon_validation"))
        If iMsgBoxRet = vbYes Then
            bUploadNow = True
        Else
            bUploadNow = False
        End If
    Else
        'user clicked Validate toolbar button, not Upload:
        AmazonMsgBox GetTranslatedString("values_not_valid_1") & _
               vbNewLine & vbNewLine & _
               strMsgBoxErrorColumnList & _
               vbNewLine & vbNewLine & _
               GetTranslatedString("values_not_valid_4"), _
               vbOKOnly, GetTranslatedString("amazon_validation")
    End If
End If


ValidateTemplate = bUploadNow


Application.EnableEvents = bEnableEventsStatus


Exit Function

generr:

Application.EnableEvents = bEnableEventsStatus


If False Then
    Resume
End If

Unload frmValidatePleaseWait

End Function






Function ValidateItemByListFromColumn(validate_item As String, validate_column As Long, current_row As Long) As Boolean

Dim iTemplateHeaderRow As Long
Dim rgDropdownList As Range
Dim rgFind As Range

iTemplateHeaderRow = GetHeaderRow(GetTemplateWorksheet)

Set rgDropdownList = GetDropdownListFromColumn(validate_column, iTemplateHeaderRow, current_row)
If rgDropdownList Is Nothing Then
    'there is no dropdown list to validate against, so allow it to pass validation:
    ValidateItemByListFromColumn = True
    Exit Function
End If

Set rgFind = rgDropdownList.Find(What:=validate_item, LookAt:=xlWhole)

If rgFind Is Nothing Then
    'item NOT found in list:
    ValidateItemByListFromColumn = False
Else
    'item FOUND in list:
    ValidateItemByListFromColumn = True
End If

End Function






Function DownloadDataValidationTableFromWeb(url_defined_name_string As String) As Worksheet

Dim strURL As String
Dim qtQueryTable As QueryTable
Dim strDataValidationTableFullPath As String
Dim wbDataValidationTable As Workbook
Dim shDataValidationTable As Worksheet
Dim strDataValidationTableWorksheetName As String
Dim wbWorkbook As Workbook
Dim shWorksheet As Worksheet
Dim bRet As Boolean
Dim bOldDataValidationTableWorksheetExists As Boolean
Dim iRet As Long
Dim bDisplayAlertsStatus As Boolean
Dim shActiveSheet As Worksheet


On Error GoTo generr

bOldDataValidationTableWorksheetExists = False 'init.
For Each shWorksheet In ThisWorkbook.Worksheets
    If shWorksheet.Name = DATA_VALIDATION_TABLE_WORKSHEET_NAME Then
        bOldDataValidationTableWorksheetExists = True
        Exit For
    End If
Next shWorksheet


strURL = ThisWorkbook.Names(url_defined_name_string).RefersToRange.value


Set shActiveSheet = ActiveSheet
'Set shDataValidationTable = ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count))

'bRet = DownloadTableFromWebByURL(shDataValidationTable.Range("A1"), strURL)

Set shDataValidationTable = InsertWorksheetFromUrl(strURL)

If shDataValidationTable Is Nothing Then
    bRet = False
Else
    bRet = True
End If



If bRet Then
    'download was successful:
    If bOldDataValidationTableWorksheetExists Then
        bDisplayAlertsStatus = Application.DisplayAlerts
        Application.DisplayAlerts = False
        If Not ThisWorkbook.Worksheets(DATA_VALIDATION_TABLE_WORKSHEET_NAME) Is shDataValidationTable Then
            ThisWorkbook.Worksheets(DATA_VALIDATION_TABLE_WORKSHEET_NAME).Delete
        End If
        Application.DisplayAlerts = bDisplayAlertsStatus
    End If
    shDataValidationTable.Name = DATA_VALIDATION_TABLE_WORKSHEET_NAME
    shDataValidationTable.Visible = False
'    shActiveSheet.Activate
Else
    'download was not successful:
    bDisplayAlertsStatus = Application.DisplayAlerts
    Application.DisplayAlerts = False
'    shDataValidationTable.Delete
    shActiveSheet.Activate
    Application.DisplayAlerts = bDisplayAlertsStatus
    If bOldDataValidationTableWorksheetExists Then
        frmProgressIntTemplates.Hide
        DoEvents
        iRet = AmazonMsgBox(GetTranslatedString("download_validation_not_successful_1") & strURL & GetTranslatedString("download_validation_not_successful_2") & _
                      vbNewLine & vbNewLine & _
                      GetTranslatedString("download_validation_not_successful_3"), _
               vbYesNo, GetTranslatedString("download_unsuccessful"))
        If iRet = vbYes Then
            'proceed with old data:
            Set DownloadDataValidationTableFromWeb = ThisWorkbook.Worksheets(DATA_VALIDATION_TABLE_WORKSHEET_NAME)
            Exit Function
        End If
    Else
        'no data (either old or new) available:
        DoEvents
        iRet = AmazonMsgBox(GetTranslatedString("download_validation_not_successful_1") & strURL & GetTranslatedString("download_validation_not_successful_2") & _
                      GetTranslatedString("download_validation_not_successful_4") & DATA_VALIDATION_TABLE_WORKSHEET_NAME & GetTranslatedString("download_validation_not_successful_5") & _
                      vbNewLine & vbNewLine & _
                      GetTranslatedString("download_validation_not_successful_6"), _
                      vbOKOnly, GetTranslatedString("data_not_found"))
        bOldDataValidationTableWorksheetExists = True
        Exit Function
    End If
End If

Set DownloadDataValidationTableFromWeb = shDataValidationTable

Exit Function

generr:

If False Then
    Resume
End If


End Function




Public Function OnCellEditRemoveValidationIndicators(target_range As Range) As Boolean

'upon cell edit, removes highlight border and comment for selected cells.

Dim rgCell As Range
Dim cmtComment As Comment
Dim bProtected As Boolean

OnCellEditRemoveValidationIndicators = False 'init.

If target_range.Parent Is ActiveSheet Then
    bProtected = ActiveSheet.ProtectContents
    ActiveSheet.Unprotect
    Application.ScreenUpdating = False
    '6/9/2008 - GJL - this takes too long on a large range. Removing loop:
'    For Each rgCell In target_range
'        Set cmtComment = rgCell.Comment
'        If Not cmtComment Is Nothing Then
'            ExcelHighlightCell False, rgCell
'        End If
'    Next rgCell
    ExcelHighlightCell False, target_range '6/9/2008 - GJL - this replaces the above loop.
    target_range.ClearComments
    Application.ScreenUpdating = True
    If bProtected Then
        Call ProtectSheet(ActiveSheet)
    End If
End If

OnCellEditRemoveValidationIndicators = True

End Function





Public Sub AddComment(comment_cell As Range, comment_text As String, _
                      comment_height As Single, comment_width As Single, _
                      comment_fontname As String)
    
    comment_cell.ClearComments
    comment_cell.AddComment comment_text
    With comment_cell.Comment.Shape
        .TextFrame.Characters.Font.Size = 10
        If comment_fontname <> "" Then
            .TextFrame.Characters.Font.Name = comment_fontname
        End If
        .height = comment_height
        .width = comment_width
        
        .Fill.ForeColor.RGB = RGB(221, 238, 255) 'very light blue.
        
    End With

End Sub




Function CloseWorkbookIfOpen(work_book As String) As Boolean

'true on success (workbook closed, or workbook not found).
'false on failure (workbook found but not closed, or other error).

Dim wbWorkbook As Workbook

For Each wbWorkbook In Application.Workbooks
    If wbWorkbook.Name = work_book Then
        wbWorkbook.Close SaveChanges:=False
        Exit For
    End If
Next wbWorkbook
DoEvents

CloseWorkbookIfOpen = True

End Function



Function DeleteFileIfExists(full_path As String) As Boolean

'true on success (workbook closed, or workbook not found).
'false on failure (workbook found but not closed, or other error).

Dim fso As Object
Dim oFolder As Object
Set fso = CreateObject("Scripting.FileSystemObject")
If fso.FileExists(full_path) Then
    Kill full_path
    DoEvents
End If

DeleteFileIfExists = True

End Function



Function DeleteWorksheetIfExists(sheet_name As String) As Boolean
    Dim shWorksheet As Worksheet
    Dim bDisplayAlertsStatus As Boolean
    For Each shWorksheet In ThisWorkbook.Worksheets
        If shWorksheet.Name = sheet_name Then
            bDisplayAlertsStatus = Application.DisplayAlerts
            Application.DisplayAlerts = False
            shWorksheet.Delete
            Application.DisplayAlerts = bDisplayAlertsStatus
            Exit For
        End If
    Next shWorksheet
End Function



Function CloseWorkbookAndReopenAsExcel972003(work_book As Workbook) As Workbook
'returns Workbook object on success; Nothing on failure.

    Dim strFullPath As String
    Dim bDisplayAlertsStatus As Boolean
    Dim iFileFormat As Long
    
    bDisplayAlertsStatus = Application.DisplayAlerts
    Application.DisplayAlerts = False
    
    If Val(Application.Version) >= 12 Then
        'Excel 2007 or later:
        iFileFormat = GetxlExcel8FileFormat()
    Else
        'Excel 2003 or earlier:
        iFileFormat = xlNormal
    End If
    
    strFullPath = work_book.Path & "\" & work_book.Name

    work_book.SaveAs FileName:=strFullPath, FileFormat:=iFileFormat
    Application.DisplayAlerts = bDisplayAlertsStatus
    work_book.Close SaveChanges:=False
    Set CloseWorkbookAndReopenAsExcel972003 = Workbooks.Open(strFullPath)
End Function


Function GetxlExcel8FileFormat() As Long
'DO NOT CALL OR TRY TO COMPILE IN EXCEL 2000.
GetxlExcel8FileFormat = xlExcel8
End Function


Public Function SwapInSheetAndDeleteSourceWorkbook(source_book As Workbook, source_book_full_path As String) As Worksheet

Dim strSourceWorksheet As String

    strSourceWorksheet = source_book.Worksheets(1).Name
    
    'if a sheet by that name already exists, delete it:
    Call DeleteWorksheetIfExists(strSourceWorksheet)
    
    
    'must save as excel97-2003 file format (from Excel 2007 file format),
    'then close and reopen it, to avoid error when trying to
    'copy into workbook of excel97-2003 file format:
    Set source_book = CloseWorkbookAndReopenAsExcel972003(source_book)
    source_book.Worksheets(1).Copy After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count)
    
    

    Set SwapInSheetAndDeleteSourceWorkbook = ThisWorkbook.Worksheets(strSourceWorksheet)
    source_book.Close SaveChanges:=False
    DoEvents
    Kill source_book_full_path
    DoEvents

End Function



Public Function InsertWorksheetFromUrl(url_source As String) As Worksheet

'returns worksheet on success; Nothing on failure.

Dim bRet As Boolean
Dim strSourceWorkbookFullPath As String
Dim wbSourceWorkbook As Workbook

Const SOURCE_WORKBOOK_FILENAME As String = "SourceWorkbook.xls"


bRet = CloseWorkbookIfOpen(SOURCE_WORKBOOK_FILENAME)

strSourceWorkbookFullPath = ThisWorkbook.Path & "\" & SOURCE_WORKBOOK_FILENAME

Call DeleteFileIfExists(strSourceWorkbookFullPath)

Set wbSourceWorkbook = OpenUnicodeTabDelimFileAsWorkbookFromURL(url_source, strSourceWorkbookFullPath)
If wbSourceWorkbook Is Nothing Then
    bRet = False
Else
    'success:
    bRet = True
    
    Set InsertWorksheetFromUrl = SwapInSheetAndDeleteSourceWorkbook( _
                                    wbSourceWorkbook, strSourceWorkbookFullPath)

End If

End Function


Attribute VB_Name = "shIcons"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shInstructions"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shIntSettings"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shIntTranslations"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shIntURLs"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shMatch"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Deactivate()
    Call modMatchSheet.MatchWorksheetGotDeactivated
End Sub


Public Sub Worksheet_SelectionChange(ByVal Target As Range)
    Call modMatchSheet.MatchWorksheetGotSelectionChanged(Target)
End Sub

Attribute VB_Name = "shSearch"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shTemplate1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cboOfferCreation, 1024, 1, MSForms, ComboBox"
Private Sub cboOfferCreation_Click()
    'Odd behavior. Use MouseUp to determine when to run Click.
    DropdownGotClicked cboOfferCreation
End Sub


Private Sub cboOfferCreation_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    'Fires before dropdown's value is set to the clicked list item. Use to determine when to run Click Event.
    DropdownGotMouseUpped cboOfferCreation
End Sub


Private Sub cboOfferCreation_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    DropdownGotKeyDowned cboOfferCreation, CInt(KeyCode), Shift
End Sub


Private Sub Worksheet_Activate()
    Call TemplateSheetGotWorksheetActivated
End Sub


Private Sub Worksheet_Deactivate()
    Call TemplateSheetGotWorksheetDeactivated
End Sub


Private Sub Worksheet_Change(ByVal Target As Range)
    Call TemplateSheetGotWorksheetChanged(Target)
End Sub


Public Sub Worksheet_SelectionChange(ByVal Target As Range)
    Call TemplateSheetGotWorksheetSelectionChanged(Target)
End Sub


' InQuest injected base64 decoded content
' Szjej
' Szjej
' &k:'.+-
' *'jT
' &k:'
' [jwVj
' z{S{
' zw2M
' *'jX
' z{b~'
' ^"{^
' e"th
' Kjx.j
' "w+zg
' zjej
' )eJ)
' .+-n
' m'+y
' ]"{^
' zjej
' Szjej
' zw2M
' zjej
' zjej
' wSzjej
' k"'u
' Szjej
' zjej
' Szjej
' k"'u
' k"-zc
' *'jP
' k!^y
' zw2M
' k"'u
' k"'u
' k"'u
' zw2M
' /j)ZnW
' izwQ
' )^J)
' :-jU
' jx.j
' r'v'
' ^Z'm
' zjej
' zjej
' ^>*+F
' zjej
' zjej
' xZ+N
' H|Lb
' Z,yj+
' )zp,

INQUEST-PP=macro
