Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "modGetDistinct"
Option Explicit
Option Compare Text

Public Function GetDistinct(RR As Range) As Variant()
'============================================================================
' GetDistinct
' By Chip Pearson, chip@cpearson.com, www.cpearson.com, 1-August-2010
'
' This creates an array containing all the distinct items
' from the range RR. The result array is row oriented (one row spanning
' several columns) so use TRANSPOSE if you want the values column
' oriented (one column spanning several rows). The array returned
' by this function is suitable for use within other array formuals.
' Array enter (CTRL SHIFT DELETE) the formula into as many rows
' or columns as there will be distinct elements. You can use
' Redim Arr(1 to RR.Cells.Count) to ensure you have enough room,
' and the array will be Redim Preserved to the actual use size
' before it is returned.
'
' You should take into consideration the size of the array. Using a
' range RR = A1:A5000 containing 100 distinct items, the code took
' approximately 3 seconds. Multiple uses of GetDistinct with very
' large ranges may have unacceptable calculation times.
' This procedures has two advantages of the Excel Advanced Filter. First,
' Filter requires that the list of distinct values be created on the
' same worksheet as the original data. GetDistinct has no such limitation.
' Second, Filter is not automatically updated. You must manually
' cause Filter to refresh the list of distinct items. GetDistinct
' will update its results in real time.
'============================================================================
    Dim Arr() As Variant
    Dim R As Range
    Dim N As Long
    Dim Ndx As Long
    Dim ArraySize As Long
    
    ' If the range RR is completely empty, get out.
    If Application.WorksheetFunction.CountA(RR) = 0 Then
        ReDim Arr(1 To Application.Caller.Cells.Count)
        For N = 1 To Application.Caller.Cells.Count
            Arr(N) = vbNullString
        Next N
        GetDistinct = Arr
        Exit Function
    End If
    
    ' Get the number of distinct values in range RR. Resize the array
    ' to that many elements. This evaluates the following formula where
    ' $B$2:$B$11 are replaced by RR.Address
    '    =SUM(1/IF($B$2:$B$11="",1,(COUNTIF($B$2:$B$11,$B$2:$B$11))))-COUNTBLANK($B$2:$B$11)
    ArraySize = Application.Evaluate("=SUM(1/IF(" & RR.Address & "="""",1,(COUNTIF(" & _
        RR.Address & "," & RR.Address & "))))-COUNTBLANK(" & RR.Address & ")")
    
    ReDim Arr(1 To ArraySize)
    
    ' loop only in the region of RR that intersects with the UsedRange
    ' of the sheet. This can cut processing time dramatically.
    For Each R In Application.Intersect(RR.Worksheet.UsedRange, RR).Cells
        ' ignore empty cells
        If R.Text <> vbNullString Then
            On Error Resume Next
            Err.Clear
            N = 0
            ' see if R.Value already exists in the Arr. If so,
            ' ignore it. If not present, add it.
            N = Application.WorksheetFunction.Match(R.Value, Arr, 0)
            If Err.Number <> 0 Then
                Ndx = Ndx + 1
                Arr(Ndx) = R.Value
            End If
        End If
    Next R
    '<<<<< OPTIONAL
    ' The following code is optional. It resizes the array to the
    ' number of cells from with it was called, so that if there
    ' are fewer elements than Application.Caller.Cells.Count
    ' (a condition that is always true unless all cells of
    ' RR have the same value. This prevents the arrray of cells
    ' on the worksheet being padded out with values = 0. If
    ' you don't want this resizing, get rid of the entire
    ' If/Then/Else/EndIf block of code and replace it with
    '       ReDim Preserve Arr(1 To Ndx)
    '
    If Application.Caller.Cells.Count > Ndx Then
        ReDim Preserve Arr(1 To Application.Caller.Cells.Count)
        For N = Ndx + 1 To Application.Caller.Cells.Count
            Arr(N) = vbNullString
        Next N
    Else
        ReDim Preserve Arr(1 To Ndx)
    End If
    GetDistinct = Arr
End Function



INQUEST-PP=macro
