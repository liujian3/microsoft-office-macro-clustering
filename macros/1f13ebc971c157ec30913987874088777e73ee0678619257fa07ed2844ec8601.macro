Attribute VB_Name = "EstaPasta_de_trabalho"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True





Attribute VB_Name = "Module1"
Public Function CopiarArq(Orig As String, Dest As String)
Attribute CopiarArq.VB_ProcData.VB_Invoke_Func = " \n14"
    On Error GoTo ErrorHandler
    FileCopy Orig, Dest
    CopiarArq = True
    GoTo Fim
ErrorHandler:
    CopiarArq = False
Fim:
End Function

Public Function FSIZE_VB(Orig As String)
Attribute FSIZE_VB.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim vCount As Integer
    vCount = 0
    On Error GoTo ErrorHandler
    FSIZE_VB = FileLen(Orig)
    GoTo Fim
ErrorHandler:
    FSIZE_VB = 0
    If vCount > 1 Then GoTo Fim
    vCount = vCount + 1
    Application.Wait Now + TimeValue("00:00:02")
    Resume
Fim:
End Function

Public Function RenArq(Orig As String, Dest As String)
Attribute RenArq.VB_ProcData.VB_Invoke_Func = " \n14"
    On Error GoTo ErrorHandler
    Name Orig As Dest
    RenArq = True
    GoTo Fim
ErrorHandler:
    RenArq = False
Fim:
End Function

Public Sub LocalDif()
    Dim vCellAtiv As Range
    Dim vRangeCmt As Range
    Static v|fffd|ltCell As Range
    Dim vRangeNext As Range
    Set vCellAtiv = ActiveCell
    On Error Resume Next
    Set vRangeCmt = ThisWorkbook.Sheets(1).Range("Dados").SpecialCells(xlCellTypeComments)
    If vRangeCmt Is Nothing Then
        MsgBox "N|fffd|o h|fffd| c|fffd|lulas marcadas com diferen|fffd|as. Ou nenhuma foi encontrada ao importar os |fffd|ndices ou voc|fffd| n|fffd|o assinalou a op|fffd||fffd|o para comparar e marcar diferen|fffd|as ao importar. Tente importar novamente, marcando a op|fffd||fffd|o na caixa de di|fffd|logo de importa|fffd||fffd|o."
    Else
        Set vRangeNext = Application.Intersect(vRangeCmt, vCellAtiv)
        If vRangeNext Is Nothing Then Set vRangeNext = Application.Intersect(vRangeCmt, v|fffd|ltCell)
        If vRangeNext Is Nothing Then Set vRangeNext = vRangeCmt.Range("A1")
        vRangeCmt.Select
        vRangeNext.Activate
        Set v|fffd|ltCell = ActiveCell

        '      Application.SendKeys "~{RIGHT}{LEFT}"
        If vRangeCmt.Cells.Count > 1 Then
            vExit = False
            For Each c In vRangeCmt
                c.Activate
                If vExit Then Exit For
                If Not Application.Intersect(c, vRangeNext) Is Nothing Then vExit = True
                vRangeCmt.Range("A1").Activate
            Next
        End If
        ActiveCell.Select
        Application.ScreenUpdating = True
        Application.Goto ActiveCell
    End If
End Sub

Attribute VB_Name = "Module2"
Const MAX_STRING As Long = 128
Public Const REG_BINARY = 3&
Public Const REG_DWORD = 4&
Declare Function RegOpenKeyA Lib "ADVAPI32.DLL" (ByVal hkey As Long, ByVal sKey As String, ByRef plKeyReturn As Long) As Long
Attribute RegOpenKeyA.VB_ProcData.VB_Invoke_Func = " \n14"
Declare Function RegQueryValueExA Lib "ADVAPI32.DLL" (ByVal hkey As Long, ByVal sValueName As String, ByVal dwReserved As Long, ByRef lValueType As Long, ByVal sValue As String, ByRef lResultLen As Long) As Long
Attribute RegQueryValueExA.VB_ProcData.VB_Invoke_Func = " \n14"
Declare Function RegCloseKey Lib "ADVAPI32.DLL" (ByVal hkey As Long) As Long
Attribute RegCloseKey.VB_ProcData.VB_Invoke_Func = " \n14"
Public Const HKEY_CURRENT_USER = &H80000001
Public Const HKEY_CLASSES_ROOT = &H80000000

'|fffd| Show the value of an Excel 7 entry
Sub TestShowExcelText()
Attribute TestShowExcelText.VB_ProcData.VB_Invoke_Func = " \n14"
    MsgBox GetRegistryValue(HKEY_CURRENT_USER, "Software\Microsoft\Shared Tools\Outlook\Journaling\Microsoft Excel", "Enabled")
    i = GetRegistryValue(HKEY_CLASSES_ROOT, "MSCAL.Calendar", "")
    MsgBox Left(i, 23) = "Controle calend|fffd|rio 8.0" Or Left(i, 20) = "Calendar Control 9.0"
End Sub

'Pass:
'|fffd||fffd| (1) the KEY (e.g., HKEY_CLASSES_ROOT),
'|fffd||fffd| (2) the SUBKEY (e.g., "Excel.Sheet.5"),
'|fffd||fffd| (3) the value's name (e.g., "" [for default] or "whatever")
Function GetRegistryValue(KEY As Long, SubKey As String, ValueName As String) As String
Attribute GetRegistryValue.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim Buffer As String * MAX_STRING, ReturnCode As Long
    Dim KeyHdlAddr As Long, ValueType As Long, ValueLen As Long
    Dim TempBuffer As String, Counter As Integer
    ValueLen = MAX_STRING
    ReturnCode = RegOpenKeyA(KEY, SubKey, KeyHdlAddr)
    If ReturnCode = 0 Then
        ReturnCode = RegQueryValueExA(KeyHdlAddr, ValueName, _
                0&, ValueType, Buffer, ValueLen)
        RegCloseKey KeyHdlAddr
        'If successful ValueType contains data type
        'of value and ValueLen its length
        If ReturnCode = 0 Then
            Select Case ValueType
            Case REG_BINARY
                For Counter = 1 To ValueLen
                    TempBuffer = TempBuffer & _
                            Stretch(Hex(Asc(Mid(Buffer, Counter, 1)))) & " "
                Next
                GetRegistryValue = TempBuffer
            Case REG_DWORD
                TempBuffer = "0x"
                For Counter = 4 To 1 Step -1
                    TempBuffer = TempBuffer & _
                            Stretch(Hex(Asc(Mid(Buffer, Counter, 1))))
                Next
                GetRegistryValue = TempBuffer
            Case Else
                GetRegistryValue = Buffer
            End Select
            Exit Function
        End If
    End If
    GetRegistryValue = "Error"
End Function

Function Stretch(ByteStr As String) As String
Attribute Stretch.VB_ProcData.VB_Invoke_Func = " \n14"
    If Len(ByteStr) = 1 Then ByteStr = "0" & ByteStr
    Stretch = ByteStr
End Function





INQUEST-PP=macro
