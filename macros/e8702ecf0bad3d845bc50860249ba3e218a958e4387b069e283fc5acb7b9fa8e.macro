Attribute VB_Name = "EDAbout"
Option Explicit

' Release Build Number - version added in EntDrill.Exe
Const AddInVer = "201"           ' should be incremented for each build

' Global Reference to the VBA Drill-Down object which wraps Enterprise.DrillDown
' COM Object
' HM 08/05/03: Was formerly a private variable on the worksheet, but needed to be
' public to allow the Help|About method to be called from this module
Public oDrillDown As TDrillDown


'*******************************************************************************
' Add-In History
'
' v7.0.201    MH    10/09/12    Released for v7.0
'
' v5.70.009   MH    30/09/05    Added EntSelectEmployee function
'
' v5.70.008   MH    27/09/05    Added JC EntSelect functions
'
' v5.70.007   MH    02/08/05    Rebranded for v5.70/IRIS
'
' v5.61.006   HM    02/02/04    Released for v5.61
'
' v5.60.006   HM    14/05/04    Released for v5.60
'
' v5.52.006   HM    18/11/03    Released for v5.52
'
' v5.51.006   HM    05/08/03    Unexpectedly released for v5.51.001
'
' b552.005    HM    04/08/03    Bug - Converted formula to uppercase within
'                               lApp_SheetBeforeDoubleClick as "=Ent" check was
'                               case sensitive
'
' v5.51.004   HM    27/06/03    Released for v5.51
'
' b551.003    HM    24/06/03    Added Password Protection to prevent Add-In code
'                               being visible - not previously necessary in Excel 95
'
' b551.002    HM    08/05/03    Added menu handling for the About menu option in
'                               the shared Exchequer menu
'
' b551.001    HM    07/05/03    Started version history - no version number
'                               before this date or a way to show it!
'

'------------------------------------------------------------------------------------------------

Public Sub AboutDialog()
    ' Check to see if the Drill-Down object has been created yet
    If (oDrillDown Is Nothing) Then
        ' Create a new Drill-Down Object
        Set oDrillDown = New TDrillDown
    End If
    
    ' Call the method to display the Help|About dialog in the COM Object
    oDrillDown.HelpAbout (AddInVer)
End Sub


Attribute VB_Name = "EDMenus"
Option Explicit

' Local reference to 'Exchequer' menu on worksheets
Dim ExchMenu As Menu
' Local reference to 'About' sub-menu on worksheets
Dim ExchAboutMenu As Menu
' Flag to indicate whether this Add-In created the 'Exchequer' menu
Dim ExchMenuCreated As Boolean
' Menu items added by this Add-In
Dim AboutMenuOpt As MenuItem


Private Function FindExchMenu() As Menu
    Dim oMenu As Menu
    Dim GotExchMenu As Boolean
    
    ' Look for pre-existing 'Exchequer' menu
    GotExchMenu = False
    For Each oMenu In MenuBars(xlWorksheet).Menus
        If oMenu.Caption = "E&xchequer" Then
            Set FindExchMenu = oMenu
            GotExchMenu = True
        End If
    Next
    
    '-----------------------------------------------------
    
    If (Not GotExchMenu) Then
        ' Exchequer Menu doesn't already exist - add a new one
        Set FindExchMenu = MenuBars(xlWorksheet).Menus.Add(Caption:="E&xchequer", Before:="Window")
        ExchMenuCreated = True
    End If ' Not GotExchMenu
End Function



Private Function FindExchAboutMenu(ExMenuCreated As Boolean) As Menu
    Dim oMenu As Object
    Dim GotExchSubMenu As Boolean

    GotExchSubMenu = False
    If (Not ExMenuCreated) Then
        ' Look for 'About' sub-menu in the pre-existing 'Exchequer' menu
        For Each oMenu In ExchMenu.MenuItems
            If oMenu.Caption = "About" Then
                Set FindExchAboutMenu = oMenu
                GotExchSubMenu = True
            End If ' oMenu.Caption = "About"
        Next
    End If ' Not ExMenuCreated
    
    '-----------------------------------------------------
    
    If (Not GotExchSubMenu) Then
        ' Exchequer About sub-menu doesn't already exist - add it
        Set FindExchAboutMenu = ExchMenu.MenuItems.AddMenu(Caption:="About")
    End If ' Not GotExchSubMenu
End Function



Sub Auto_Open()
    ' This flag indicates whether this Add-In created the Exchequer menu and is
    ' responsible for deleting it when unloaded
    ExchMenuCreated = False
    
    ' Look for a pre-existing 'Exchequer' menu to re-use or create it if it
    ' doesn't exist
    Set ExchMenu = FindExchMenu
    
    ' Look for a pre-existing 'About' sub-menu within the 'Exchequer' menu to
    ' re-use or create it if it doesn't exist
    Set ExchAboutMenu = FindExchAboutMenu(ExchMenuCreated)
       
    ' Add 'About Drilldown' menu option
    Set AboutMenuOpt = ExchAboutMenu.MenuItems.Add(Caption:="Drill Down", OnAction:=ThisWorkbook.Name & "!EDAbout.AboutDialog")
End Sub

'-------------------------------------------------------------------------------------------

Sub Auto_Close()
On Error GoTo Auto_Close_Fini
    
    ' Delete menu options when add-in removed - checking for existance of optional
    ' entries.
    AboutMenuOpt.Delete
    
    ' Check to see if the About sub-menu can be removed
    If (ExchAboutMenu.MenuItems.Count = 0) Then ExchAboutMenu.Delete
    
    ' Check to see if the Exchequer Menu can be removed
    If (ExchMenu.MenuItems.Count = 0) Then ExchMenu.Delete
    
Auto_Close_Fini:

End Sub

'-------------------------------------------------------------------------------------------



Attribute VB_Name = "SelectFuncs"
Option Explicit

Private Function MiscSelectFunc(CompCode$, AnyCode$) As Variant
On Error GoTo MiscSelectFunc_Error
    MiscSelectFunc = AnyCode$
    Exit Function
    
MiscSelectFunc_Error:
    MiscSelectFunc = "Error"
    Exit Function
End Function

Public Function EntSelectCostCentre(CompCode$, CCCode$) As Variant
    EntSelectCostCentre = MiscSelectFunc(CompCode$, CCCode$)
End Function

Public Function EntSelectCustomer(CompCode$, AcCode$) As Variant
    EntSelectCustomer = MiscSelectFunc(CompCode$, AcCode$)
End Function

Public Function EntSelectDepartment(CompCode$, DeptCode$) As Variant
    EntSelectDepartment = MiscSelectFunc(CompCode$, DeptCode$)
End Function

Public Function EntSelectGLCode(CompCode$, GLCode$) As Variant
    EntSelectGLCode = MiscSelectFunc(CompCode$, GLCode$)
End Function

Public Function EntSelectLocation(CompCode$, LocCode$) As Variant
    EntSelectLocation = MiscSelectFunc(CompCode$, LocCode$)
End Function

Public Function EntSelectStock(CompCode$, StockCode$) As Variant
    EntSelectStock = MiscSelectFunc(CompCode$, StockCode$)
End Function

Public Function EntSelectSupplier(CompCode$, AcCode$) As Variant
    EntSelectSupplier = MiscSelectFunc(CompCode$, AcCode$)
End Function

Public Function EntSelectJob(CompCode$, JobCode$) As Variant
    EntSelectJob = MiscSelectFunc(CompCode$, JobCode$)
End Function

Public Function EntSelectAnalysis(CompCode$, AnalCode$) As Variant
    EntSelectAnalysis = MiscSelectFunc(CompCode$, AnalCode$)
End Function

Public Function EntSelectJobTypes(CompCode$, TypeCode$) As Variant
    EntSelectJobTypes = MiscSelectFunc(CompCode$, TypeCode$)
End Function

Public Function EntSelectEmployee(CompCode$, EmplCode$) As Variant
    EntSelectEmployee = MiscSelectFunc(CompCode$, EmplCode$)
End Function


Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "TDrillDown"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

' NOTE: This class is a wrapper for Excel around the Enterprise.DrillDown COM Object
' and is required because VBA Modules can't handle events, only VBA Classes can!

' Constants for TDrillDownResult enumeration which is returned by the IDrillDown.DrillDown method
Private Const ddNoAction = 0
Private Const ddUpdateCellFormula = 1
Private Const ddDrillDownExecuted = 2


' Private variables for internal usage
' ====================================
' Reference to the IDrillDown object (EntDrill.Dll) which processes the Cell Formula
Private WithEvents oEntDrill As Enterprise.DrillDown
Attribute oEntDrill.VB_VarHelpID = -1


' This method is called by Enterprise.DrillDown when the formula in the cell that was
' double-clicked upon needs to be changed.  This is typically used by the EntSelectxxx
' methods to update the cell with the selected customer code, stock code, etc...
Private Sub oEntDrill_OnChangeCellFormula(ByVal NewFormula As String)
On Error GoTo oEntDrill_OnChangeCellFormula_Error
    
    ActiveCell.Cells(1, 1).Formula = NewFormula
    Exit Sub

oEntDrill_OnChangeCellFormula_Error:
    Exit Sub
End Sub


' This method is called by Enterprise.DrillDown when processing a formula to resolve
' a cell reference to specific value.
Private Sub oEntDrill_OnResolveCellReference(ByVal CellRef As String, CellValue As String, CellFormula As String, OK As Boolean)
On Error GoTo oEntDrill_OnResolveCellReference_Error
    
    CellValue = ActiveSheet.Evaluate(CellRef)
    CellFormula = ""
    'With ActiveSheet.Range(CellRef)
    '    CellValue = .Value
    '    If .HasFormula Then
    '        CellFormula = .Formula
    '    End If ' .HasFormula
    'End With ' ActiveSheet.Range(CellRef)
    OK = True
    Exit Sub
     
oEntDrill_OnResolveCellReference_Error:
    OK = False
    Exit Sub
End Sub


' This method is called whenever an instance of the class is created
Private Sub Class_Initialize()
    Set oEntDrill = CreateObject("Enterprise.DrillDown")
End Sub


' This method is called whenever an instance of the class is destroyed
Private Sub Class_Terminate()
    Set oEntDrill = Nothing
End Sub


' This method is called from the BeforeDoubleClick event in the WorkBook to
' perform the DrillDown, the cell formula is passed in using the CellFormula$
' parameter
Public Function DrillDown(CellFormula$) As Boolean
    Dim DrillRes As Long ' NOTE: Should be TDrillDownResult but XL97 can't handle the enumerated type
    
    DrillRes = oEntDrill.DrillDown(CellFormula$)
    Select Case DrillRes
    Case ddNoAction
        ' No Action Required - Return False and let default Excel Actions continue
        DrillDown = False
        
    Case ddDrillDownExecuted
        ' Drill-Down has been executed - Return True
        DrillDown = True
    
    Case ddUpdateCellFormula
        ' Formula within Cell needs updating
        DrillDown = True
        
    Case Else
        ' Unknown Status - Return False and let default Excel Actions continue
        DrillDown = False
    End Select ' DrillRes
End Function


' This method is called when the About|Drill-Down menu option is selected by
' the user and calls the COM Object to display the About dialog
Public Sub HelpAbout(AddInVer$)
    oEntDrill.DisplayAbout (AddInVer$)
End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

' Link to Excel Application object for responding to events
Public WithEvents lApp As Application
Attribute lApp.VB_VarHelpID = -1
   

Private Sub lApp_SheetBeforeDoubleClick(ByVal Sh As Object, ByVal Target As Range, Cancel As Boolean)
On Error GoTo lApp_SheetBeforeDoubleClick_Error
    
    Dim sFormula As String
    
    ' Check for a Formula within the clicked Cell
    If Target.Cells(1, 1).HasFormula Then
        ' Extract Formula from cell
        ' HM 04/08/03: Added UCase for case insensitive checks
        sFormula = UCase(Target.Cells(1, 1).Formula)
    
        ' Check Formula is set
        If (Trim(sFormula) <> "") Then
            ' Check for Exchequer function
            If (InStr(sFormula, "=ENT") = 1) Then
                ' Check to see if the Drill-Down object has been created yet
                If (oDrillDown Is Nothing) Then
                    ' Create a new Drill-Down Object
                    Set oDrillDown = New TDrillDown
                End If
                
                ' Process Formula
                ' HM 04/08/03: Changed to use uppercase version for case insensitive checks
                'If oDrillDown.DrillDown(Target.Cells(1, 1).Formula) Then
                If oDrillDown.DrillDown(sFormula) Then
                    Cancel = True
                End If ' oDrillDown.DrillDown(Target.Cells(1, 1).Formula)
            End If
        End If
    End If
    
    ' Exit procedure skipping error handling below
    Exit Sub
    
lApp_SheetBeforeDoubleClick_Error:
    ' Ignore errors - just exit gracefully
    Exit Sub
End Sub



Private Sub Workbook_BeforeClose(Cancel As Boolean)
    ' Destroy any running instance of the Drill-Down object
    Set oDrillDown = Nothing
    
    ' Remove the link to the Application object
    Set lApp = Nothing
End Sub


Private Sub Workbook_Open()
    ' Link into the Application object to pick up Double-Click events
    Set lApp = Application
    
    ' Initialise the local variable for the Drill-Down object
    Set oDrillDown = Nothing
End Sub

' InQuest injected base64 decoded content
' x)br

INQUEST-PP=macro
