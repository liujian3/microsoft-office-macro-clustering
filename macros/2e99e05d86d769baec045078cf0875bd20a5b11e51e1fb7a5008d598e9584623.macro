Attribute VB_Name = "mdlMain"
Private Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)

Private Const Epsilon  As Double = 0.000001
Private Const ShowMult As Boolean = True

Private Matrix()      As Double
Private N             As Long
Private NewMatrix()   As Double
Private TMatrix()     As Double

Public Sub Main()

Dim I As Long
Dim J As Long
Dim K As Long
Dim L As Long

Dim Amax  As Double
Dim p     As Double
Dim CosFi As Double
Dim SinFi As Double
Dim IMax  As Long
Dim JMax  As Long
Dim Iter  As Long

Dim pIMax  As Long
Dim pJMax  As Long

Dim Tii   As Double
Dim Tij   As Double
Dim Tji   As Double
Dim Tjj   As Double

Dim Pi    As Double

Dim Row As Long

      Clear

      Pi = Atn(1)

      N = CLng(InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." + Chr(10) + "(|fffd||fffd||fffd||fffd||fffd||fffd| 20)", "GenerateMatrix", 10))
      
      If N = 0 Then Exit Sub
      
      K = ((1 + N) / 2) * N '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
       
      ReDim Matrix(1 To K) As Double
      ReDim NewMatrix(1 To K) As Double
      ReDim TMatrix(1 To N, 1 To N) As Double
      
      For I = 1 To N
          TMatrix(I, I) = 1
      Next I
      
      Randomize (Time)
      
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      For I = 1 To K
          Matrix(I) = Rnd(1) * 20
          NewMatrix(I) = Matrix(I)
      Next I
      
      Row = 2
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      
      '!|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!
      
      '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      Iter = 0
      Amax = Matrix(GetIndex(1, 2)) ^ 2
      For I = 1 To N
          For J = I + 1 To N
              If Matrix(GetIndex(I, J)) ^ 2 >= Amax Then
                 Amax = Matrix(GetIndex(I, J)) ^ 2
                 IMax = I
                 JMax = J
              End If
           Next J
      Next I
      
      Show Row
      Row = Row + N + 1
            
      Do While (Amax >= Epsilon)
   
         If Abs(Matrix(GetIndex(IMax, IMax)) - Matrix(GetIndex(JMax, JMax))) > Epsilon Then
            p = 2 * Matrix(GetIndex(IMax, JMax)) / (Matrix(GetIndex(IMax, IMax)) - Matrix(GetIndex(JMax, JMax)))
            CosFi = (0.5 * (1 + (1 + p ^ 2) ^ (-0.5))) ^ 0.5
            SinFi = (Abs(p) / p) * (0.5 * (1 - (1 + p ^ 2) ^ (-0.5))) ^ 0.5
         Else
            CosFi = Cos(Pi / 2)
            SinFi = Sin(Pi / 2)
         End If
                
         For I = 1 To K
             NewMatrix(I) = Matrix(I)
         Next I
         
         '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
         For L = 1 To N
             If (L <> IMax) And (L <> JMax) Then
                NewMatrix(GetIndex(IMax, L)) = _
                Matrix(GetIndex(IMax, L)) * CosFi + Matrix(GetIndex(JMax, L)) * SinFi
                
                NewMatrix(GetIndex(JMax, L)) = _
                -Matrix(GetIndex(IMax, L)) * SinFi + Matrix(GetIndex(JMax, L)) * CosFi
             End If
         Next L
         
         NewMatrix(GetIndex(IMax, IMax)) = _
(Matrix(GetIndex(IMax, IMax)) * CosFi + Matrix(GetIndex(JMax, IMax)) * SinFi) * CosFi + _
(Matrix(GetIndex(IMax, JMax)) * CosFi + Matrix(GetIndex(JMax, JMax)) * SinFi) * SinFi
                              
         NewMatrix(GetIndex(JMax, IMax)) = _
(-Matrix(GetIndex(IMax, IMax)) * SinFi + Matrix(GetIndex(JMax, IMax)) * CosFi) * CosFi + _
(-Matrix(GetIndex(IMax, JMax)) * SinFi + Matrix(GetIndex(JMax, JMax)) * CosFi) * SinFi
       
         NewMatrix(GetIndex(JMax, JMax)) = _
-(-Matrix(GetIndex(IMax, IMax)) * SinFi + Matrix(GetIndex(JMax, IMax)) * CosFi) * SinFi + _
(-Matrix(GetIndex(IMax, JMax)) * SinFi + Matrix(GetIndex(JMax, JMax)) * CosFi) * CosFi
         
         Tii = TMatrix(IMax, IMax) * CosFi + TMatrix(IMax, JMax) * SinFi
         Tij = -TMatrix(IMax, IMax) * SinFi + TMatrix(IMax, JMax) * CosFi
         Tji = TMatrix(JMax, IMax) * CosFi + TMatrix(JMax, JMax) * SinFi
         Tjj = -TMatrix(JMax, IMax) * SinFi + TMatrix(JMax, JMax) * CosFi
         
         TMatrix(IMax, IMax) = Tii
         TMatrix(IMax, JMax) = Tij
         TMatrix(JMax, IMax) = Tji
         TMatrix(JMax, JMax) = Tjj
         
         For I = 1 To K
             Matrix(I) = NewMatrix(I)
         Next I
       
         pIMax = IMax
         pJMax = JMax
       
         Iter = Iter + 1
         Amax = Matrix(GetIndex(1, 2)) ^ 2
         For I = 1 To N
             For J = I + 1 To N
                 If Matrix(GetIndex(I, J)) ^ 2 >= Amax Then
                    Amax = Matrix(GetIndex(I, J)) ^ 2
                    IMax = I
                    JMax = J
                 End If
             Next J
         Next I
         
         ActiveSheet.Range("A" + CStr(Row)).FormulaR1C1 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " + CStr(Iter)
         ActiveSheet.Range("C" + CStr(Row)).FormulaR1C1 = "Sp = "
         ActiveSheet.Range("D" + CStr(Row)).Value = Sp
         
         Show Row
         Row = Row + N + 1
         
         If ShowMult Then
            Row = Row - N - 1
            
            ActiveSheet.Cells(pIMax + Row, pJMax + 1).Interior.ColorIndex = 3
            ActiveSheet.Cells(IMax + Row, JMax + 1).Interior.ColorIndex = 6
            
            Sleep 300
            
            ActiveSheet.Cells(pIMax + Row, pJMax + 1).Interior.ColorIndex = xlNone
            ActiveSheet.Cells(IMax + Row, JMax + 1).Interior.ColorIndex = xlNone
            
         End If
       
    Loop
      
    If ShowMult Then Row = Row + N + 1
      
    ActiveSheet.Range("A" + CStr(Row)).FormulaR1C1 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    For I = 1 To N
        For J = 1 To N
            ActiveSheet.Cells(I + Row, J + 1).Value = TMatrix(I, J)
        Next J
    Next I
      
      
End Sub

Public Function Sp() As Double
Dim I   As Long
Dim Tmp As Double
    
    Tmp = 0
    For I = 1 To N
        Tmp = Tmp + Matrix(GetIndex(I, I))
    Next I
    
    Sp = Tmp

End Function


Private Sub Show(Row As Long)
Dim R      As Long
Dim C      As Long
    
    For R = 1 To N
        For C = 1 To N
            ActiveSheet.Cells(R + Row, C + 1).Value = Matrix(GetIndex(R, C))
        Next C
    Next R
    
End Sub

Public Function GetIndex(I As Long, J As Long) As Long

       If I >= J Then
          GetIndex = (I - 1) * I / 2 + J
       Else
          GetIndex = (J - 1) * J / 2 + I
       End If

End Function

Public Sub Clear()
    ActiveSheet.Cells.Select
    Application.CutCopyMode = False
    Selection.ClearContents
    Selection.Interior.ColorIndex = xlNone
    Selection.NumberFormat = "0.0000"
    Selection.ColumnWidth = 9
End Sub
Attribute VB_Name = "mdlMenu"
Public Sub AddMenu()

Dim comBar      As CommandBar
Dim comBarBut   As CommandBarButton
Dim mnuXXX      As CommandBarControl

Dim N   As Long
Dim ii  As Long

       Set comBar = CommandBars("WorkSheet Menu Bar")

       N = comBar.Controls.Count

       For ii = 1 To N
           If comBar.Controls(ii).Caption = "Matrix" Then Exit Sub
       Next ii

       Set mnuXXX = comBar.Controls.Add(Type:=msoControlPopup, Temporary:=True, Before:=N)

       With mnuXXX

            .Caption = "Matrix"

            With .Controls.Add(Type:=msoControlButton)
                 .Caption = "Generate"
                 .OnAction = "Main"
            End With
            
            With .Controls.Add(Type:=msoControlButton)
                 .Caption = "Clear"
                 .OnAction = "Clear"
            End With
       End With

End Sub

Public Sub DelMenu()

Dim comBar      As CommandBar
Dim comBarBut   As CommandBarButton

Dim N   As Long
Dim ii  As Long

       Set comBar = CommandBars("WorkSheet Menu Bar")

       N = comBar.Controls.Count

       For ii = 1 To N
       
           If comBar.Controls(ii).Caption = "Matrix" Then
              comBar.Controls(ii).Delete
              Exit For
           End If
       
       Next ii

End Sub
Attribute VB_Name = "|fffd||fffd||fffd||fffd|1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Activate()
    AddMenu
End Sub

Private Sub Workbook_Deactivate()
    DelMenu
End Sub


INQUEST-PP=macro
