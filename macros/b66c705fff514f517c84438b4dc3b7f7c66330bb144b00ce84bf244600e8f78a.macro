Attribute VB_Name = "Mdulo1"
'Get the handle for Excel's window
Declare Function FindWindow32 Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long

'Show the help file
Declare Function WinHelp32 Lib "user32" Alias "WinHelpA" (ByVal hWnd As Long, ByVal lpHelpFile As String, ByVal wCommand As Long, dwData As Any) As Long

'Use the following line to display the Help file with the Contents page showing
'ShowHelp "c:\myhelp.hlp"

'Use the following line to display the Help file with a specific topic showing
'ShowHelp "c:\myhelp.hlp", 1010

'Use the following line to display the Help file's index dialog (only in XL7)
'ShowHelp "c:\myhelp.hlp", -1

'@**************************************************************************
'*                                                                         *
'* PROCEDURE NAME:  SHOW HELP FILE                                         *
'* AUTHOR & DATE:   STEPHEN BULLEN, 101547,1302  11 May 1996               *
'*                                                                         *
'* DESCRIPTION:     This procedure uses the WinHelp API functions to show  *
'*                  a custom help file.  If a context ID is given, the     *
'*                  appropriate page is shown.  If no context ID is given, *
'*                  the Contents page is shown.  In Excel 7, if the context*
'*                  ID is -1, the index dialog is displayed.               *
'*                                                                         *
'*                  The reason for this procedure is that in Excel 7, the  *
'*                  usual Application.Help changes the Contents and Index  *
'*                  buttons to refer to Excel's help file.                 *
'*                                                                         *
'@**************************************************************************

Sub ShowHelp(sHelpFile, Optional iContextID)

   Dim iCmd As Long
   Dim iData As Long

   'Define help constants
   Const HELP_CONTEXT = &H1
   Const HELP_CONTENTS = &H3
   Const HELP_KEY = &H101

   'Check if running Excel 5 or 7
   If InStr(1, Application.OperatingSystem, "32") = 0 Then

      'If XL5, check if the context ID is passed
      If IsMissing(iContextID) Then

         'If no context ID, just show the help file contents
         Application.Help sHelpFile
      ElseIf iContextID <> -1 Then

         'If the index page is not chosen show the help topic
         Application.Help sHelpFile, iContextID
      Else
         'Can't show the index page this way, so show the contents page
         Application.Help sHelpFile
      End If
   Else
      'Set the WinHelp API command and data values
      If IsMissing(iContextID) Then
         iCmd = HELP_CONTENTS
         iData = 0
      ElseIf iContextID = -1 Then
         iCmd = HELP_KEY
         iData = 0
      Else
         iCmd = HELP_CONTEXT
         iData = iContextID
      End If

      'Get the handle of the Excel window
      V_hwnd = FindWindow32("XLMAIN", Application.Caption)

      'Show the help file
      WinHelp32 V_hwnd, sHelpFile, iCmd, ByVal iData
   End If

End Sub


Public Function CopiarArq(Orig As String, Dest As String)
   On Error GoTo ErrorHandler
   FileCopy Orig, Dest
   CopiarArq = True
   GoTo Fim
ErrorHandler:
   CopiarArq = False
Fim:
End Function


Public Function CriarDir(NomeDir As String)
   On Error GoTo ErrorHandler
   MkDir NomeDir
   CriarDir = True
   GoTo Fim
ErrorHandler:
   CriarDir = False
Fim:
End Function


Public Function ExecShellVba(PathName As String)
'A vantagem est|fffd| em executar oculto
   Shell PathName, 0
End Function


Public Function CreatShortCutWScript(vName As String, vTarget As String, vArg As String, vIco As String)
   Dim wsh As Object
   Dim oShortcut As Object

   On Error GoTo ErrorHandler
   vName = Application.WorksheetFunction.Substitute(vName, """", "")
   vTarget = Application.WorksheetFunction.Substitute(vTarget, """", "")

   DirP = ThisWorkbook.Path
   If InStr(1, Left(vName, 3), "\") = 0 Then vName = DirP & "\" & vName & ".lnk"
   Set fs = CreateObject("Scripting.FileSystemObject")
   If fs.fileexists(vName) Then fs.DeleteFile vName, True

   vTarget = Application.WorksheetFunction.Substitute(vTarget, """", "")
   Set wsh = CreateObject("WScript.Shell")
   Set oShortcut = wsh.CreateShortcut(vName)
   With oShortcut
      If vTarget <> "" Then .TargetPath = vTarget
      If vArg <> "" Then .Arguments = vArg
      '.WorkingDirectory = "c:\xx"
      '.WindowStyle = 4
      If vIco <> "" Then .IconLocation = vIco
      .Save
   End With
   Set wsh = Nothing
   CreatShortCutWScript = True
   Exit Function
ErrorHandler:
   CreatShortCutWScript = False
End Function


Sub ConvXLS()
   vFile = ActiveWorkbook.Name
   Application.DisplayAlerts = False
   If ActiveWorkbook.FileFormat <> xlNormal Then
      AjustTodosComent
      If ActiveWorkbook.ReadOnly Then ActiveWorkbook.ChangeFileAccess xlReadWrite
      ActiveWorkbook.SaveAs vFile, IIf(Val(Application.Version) >= 12, 56, xlWorkbookNormal) 'xlExcel8 56
   End If
End Sub


Sub AjustTodosComent()
   Dim c As Variant
   Dim NumCom As Integer
   Dim i As Integer
   Application.ScreenUpdating = False
   NumCom = ActiveWorkbook.ActiveSheet.Comments.Count
   If NumCom = 0 Then Exit Sub
   i = 0
   For Each c In ActiveWorkbook.ActiveSheet.Comments
      i = i + 1
      Application.StatusBar = "Ajustanto coment|fffd|rios: " & i & "/" & NumCom & " " & ActiveWorkbook.Name
      With c.Shape.TextFrame
         .Characters.Font.Name = "Arial"
         .Characters.Font.FontStyle = "Normal"
         .Characters.Font.Size = 9
         .AutoSize = True
      End With
   Next
End Sub


Function AlertaCpap(vBot As Integer, vTitle As String, vMsg1 As String, Optional vMsg2 As String, Optional vMsg3 As String)
   If vTitle = "" Then vTitle = "CPAP|fffd|"
   AlertaCpap = MsgBox(vMsg1 & vMsg2 & vMsg3, Choose(vBot, vbOKOnly + vbInformation, vbOKCancel + vbQuestion, vbYesNoCancel + vbQuestion, vbAbortRetryIgnore + vbQuestion, vbCritical), vTitle)
   Select Case vBot
   Case 1 'OK inform
      AlertaCpap = True
   Case 2 'Ok ou Cancel quest
      AlertaCpap = AlertaCpap = vbOK
   Case 3 'sim n|fffd|o cancel
      AlertaCpap = -1 * (AlertaCpap = vbYes) - 2 * (AlertaCpap = vbNo) - 3 * (AlertaCpap = vbCancel)
   Case 4 'abortar retentar Ignorar
      AlertaCpap = -1 * (AlertaCpap = vbAbort) - 2 * (AlertaCpap = vbRetry) - 3 * (AlertaCpap = vbIgnore)
   Case 5 'Ok cr|fffd|tico
      AlertaCpap = True
   End Select
End Function


Function EnviarEmail(EmlEmail As String, EmlSubj As String)
   On Error Resume Next
   Application.Dialogs(xlDialogSendMail).Show EmlEmail, EmlSubj
   EnviarEmail = Err.Number = 0
End Function

Sub ExecCpap()
Dim CpapFile As String
   Set ExcelObj = New Excel.Application
   DirP = ThisWorkbook.Path
   If Dir(DirP & "\cpap.mac") <> "" Then CpapFile = "cpap.mac" Else CpapFile = "cpap.xla"
   ExcelObj.Workbooks.Open DirP & "\" & CpapFile, 0, True, , "|fffd|~9|fffd|APF.XLA|fffd|G9z"
   ExcelObj.Visible = True
   ExcelObj.OnTime Now, "'" & DirP & "\[" & CpapFile & "]Sheet2'!Iniciar"
End Sub

Attribute VB_Name = "Mod2"
Option Explicit
Public Declare Function FindWindowA Lib "user32" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
Public Declare Function SendMessage Lib "user32" Alias "SendMessageA" (ByVal hWnd As Long, ByVal wMsg As Long, ByVal wParam As Long, ByVal lParam As Long) As Long
Public Const WM_USER = 1024
Public Const WM_CLOSE = &H10
Private Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
Private Declare Function GetTempPath Lib "kernel32" Alias "GetTempPathA" (ByVal nBufferLength As Long, ByVal lpBuffer As String) As Long
Public IsPortg As Boolean

Dim ExcelObj As Object
Sub TestCreateNewExcelObj()
    On Error Resume Next
    If Not ExcelObj Is Nothing Then ExcelObj.Quit: Set ExcelObj = Nothing
'    On Error GoTo ErrorHandlerFim
    Set ExcelObj = Application.Run("CPAP_DVR.MAC!CreateNewExcelObj", True)
    ExcelObj.Visible = True
End Sub

Public Function CreateNewExcelObj(bSameVer As Boolean) As Object     'Criar a classe e passa como objeto para outros Wb via chamada Run() usando late binding.
   Dim NewExcelObj As Object
   If OpenDftVerAppObj(NewExcelObj, 0) = False Then Exit Function    'Para criar NewExcelObj padr|fffd|o ou especial usei a fun|fffd||fffd|es do XLtoEXE comentando o n|fffd|o necess|fffd|rio.

    If bSameVer And NewExcelObj.Version <> Application.Version Then    'Tentar usar a mesma vers|fffd|o do Excel para evitar o qua aconteceu na Alves Lima onde, usando 2010, mas 2003 padr|fffd|o no registro que n|fffd|o abre xlsx.
        NewExcelObj.Quit: Set NewExcelObj = Nothing
        Dim sAppVersion As String, dHostAppVer As Double
        dHostAppVer = Val(Application.Version)
        sAppVersion = Choose(11 + 1 + 2 + 1 - dHostAppVer + 1, "15 (2013)", "14 (2010)", "NA", "12 (2007)", "11 (2003)", "10 (2002 XP)", "09 (2000)", "08 (97)")
        If OpenEspVerAppObj(sAppVersion, NewExcelObj, False) = False Then If OpenDftVerAppObj(NewExcelObj, 0) = False Then Exit Function
    End If

    Set CreateNewExcelObj = NewExcelObj
End Function

Private Function OpenDftVerAppObj(ExcelObjDftVer As Object, Optional lVerfOnly As Long) As Boolean
    Dim i As Long
    On Error Resume Next
    'Loop necess|fffd|rio para ter certeza de que o app |fffd| um novo, pois parece que, quando h|fffd|
    'mais de um Excel instalado, isto n|fffd|o acontece na primeira tentativa. O Loop interno
    '|fffd| para se assegurar de que objeto foi criado antes de chamar suas propriedades.
    Do
        Do
            i = i + 1
            If i > lVerfOnly And lVerfOnly <> 0 Then Exit Function    'N|fffd|o insistir al|fffd|m das tentativa passadas, pois |fffd| mais uma verifica|fffd||fffd|o se pode ser criado
            If i > 10 Then
                If MsgBox(IIf(IsPortg, "N|fffd|o foi poss|fffd|vel criar um novo objeto Excel.Application! Tentar novamente?", "Wasn't possible to create a new Excel.Application object! Try again?"), 2, "CPAP - " & IIf(IsPortg, "Falha!", "Fail!")) = 2 Then
                    Exit Function
                Else
                    i = 0
                End If
            End If
            Err.Clear








            'Set ExcelObjDftVer = CreateObject("Excel.Application")
            Set ExcelObjDftVer = New Excel.Application
        Loop Until Err.Number = 0 And Not ExcelObjDftVer Is Nothing
        MyWait 0.2
    Loop Until ExcelObjDftVer.Workbooks.Count = 0
    OpenDftVerAppObj = True




End Function

Public Function OpenEspVerAppObj(sAppVersion1 As String, Optional ExcelObjEspVer As Object, Optional bVerfOnly As Boolean, Optional bTryDft As Boolean = True) As Boolean
    Dim lShellRet As Long: Dim sINIfile As String, bUseAppExe As Boolean, sPathSep As String       'sINIfile s|fffd| existe no ExcelFree aqui s|fffd| para manter a similaridade do c|fffd|digo.
    Dim sAppExeFile As String
    Dim hWnd As Long

    On Error Resume Next
    If Not bUseAppExe Then
        'If install and where
        sAppExeFile = GetRegValue(HKEY_LOCAL_MACHINE, "SOFTWARE\Microsoft\Office\" & Val(Left(sAppVersion1, 2)) & ".0\" & "Excel" & "\InstallRoot", "Path", False)
        If sAppExeFile = "Error" Then sAppExeFile = GetRegValue(HKEY_LOCAL_MACHINE, "Software\Microsoft\Office\" & Val(Left(sAppVersion1, 2)) & ".0\" & "Excel" & "\InstallRoot", "Path", False)
        If sAppExeFile = "Error" Or Len(sAppExeFile) < 5 Then Exit Function

        If InStr(1, "/", sAppExeFile) > 0 Then sPathSep = "/"
        If Right(sAppExeFile, 1) <> sPathSep Then sAppExeFile = sAppExeFile & sPathSep
        sAppExeFile = sAppExeFile & "Excel.exe"
    Else
        '        If Mid(sUseAppExe, 2, 1) = ":" Or Mid(sUseAppExe, 1, 2) = sPathSep & sPathSep Then    'Path completo mapeado ou n|fffd|o
        '            sAppExeFile = sUseAppExe
        '        Else                                               'Path incompleto, completar primeiro a partir da pasta do XL no pacote em temp, depois da pasta deste exe e depois de cada raiz de drive existente
        '            Dim sAppPath1 As String
        '            sAppPath1 = SbFldExtract & sPathSep            'Junto ao XL do pacote em temp
        '            sAppExeFile = IIf(Left(sUseAppExe, 1) = sPathSep, Left(sAppPath1, Len(sAppPath1) - 1), sAppPath1) & IIf(sUseAppExe = "", "Excel.exe", sUseAppExe)    'Se vazio, tenta o exe padr|fffd|o
        '            If Dir(sAppExeFile) = "" Then                  'Junto ao exe
        '                sAppPath1 = IIf(bStoreInZipBase, Left(sFileZipBase, Len(sFileZipBase) - Len(Dir(sFileZipBase))), sAppPath)
        '                sAppExeFile = IIf(Left(sUseAppExe, 1) = sPathSep, Left(sAppPath1, Len(sAppPath1) - 1), sAppPath1) & IIf(sUseAppExe = "", "Excel.exe", sUseAppExe)    'Se vazio, tenta o exe padr|fffd|o
        '            End If
        '            If Dir(sAppExeFile) = "" Then
        '                Dim DrivesList
        '                Dim d
        '                Dim sAppExeFile1 As String
        '                DrivesList = GetDrives
        '                If Len(DrivesList) > 2 Then
        '                    DrivesList = Split(DrivesList, Chr(0))
        '                    For Each d In DrivesList
        '                        sAppExeFile1 = IIf(Left(sUseAppExe, 1) = sPathSep, Left(d, 2), d) & IIf(sUseAppExe = "", "Excel.exe", sUseAppExe)    'Se vazio, tenta o exe padr|fffd|o
        '                        sMsg1 = Dir(sAppExeFile1)
        '                        If sMsg1 <> "" Then sAppExeFile = sAppExeFile1: Exit For
        '                    Next
        '                End If
        '            End If
        '        End If
    End If
    If Dir(sAppExeFile) = "" Then Exit Function
    If bVerfOnly Then OpenEspVerAppObj = True: Exit Function

    'Antes vamos verificar rapidamente em 3 tentativas se o exe a executar n|fffd|o se trata do default instalado. Se sim, us|fffd|-lo, pois tem-se mais controle e n|fffd|o gera alert de macro para cancelar no Access
    '    If bTryDft And LCase(Dir(sAppExeFile)) = LCase("Excel.exe") Then    'Se tiver nome diferente do padr|fffd|o, talvez seja virtual ent|fffd|o |fffd| melhor nem perder tempo tentando
    '        If OpenDftVerAppObj(ExcelObjEspVer, 3) Then
    '            If LCase(ExcelObjEspVer.Path & sPathSep & "Excel.exe") = LCase(sAppExeFile) Then OpenEspVerAppObj = True: Exit Function
    '            ExcelObjEspVer.Quit
    '            Set ExcelObjEspVer = Nothing
    '        End If
    '        Err.Clear
    '    End If

    'Temp file to Trace OLE, if already there is an open instance. Use INI, if there is, if not,
    'create one in temp folder
    Dim sTMPfile As String: Dim i As Long
    hWnd = FindWindowA("XLMain", vbNullString)
    If hWnd <> 0 Then
        Dim hFile As Long
        If sINIfile <> "" And Dir(sINIfile) <> "" Then
            sTMPfile = sINIfile
        Else
            sTMPfile = TempFolder()
            If sTMPfile = "" Then Exit Function
            sTMPfile = sTMPfile & sPathSep & "~EFRE126.tmp"


            hFile = FreeFile
            Open sTMPfile For Output As #hFile
            Write #hFile, "   "                            '|fffd||fffd||fffd||fffd||fffd||fffd|"
            Close #hFile
            DoEvents
        End If
    End If


    If sTMPfile <> "" Then
        'Open by shell and get object using a temp file to trace OLE object in the Running Object Table (ROT)
        'because, if there is more than one app instance there, GetObject() in VB and GetActiveObject() API
        'in C++ always return the early version, not active (Cf. KB238975). About GetObject see still http://office.microsoft.com/en-us/access/HA012288481033.aspx
        lShellRet = Shell(Chr(34) & sAppExeFile & Chr(34) & " /e /automation /r " & Chr(34) & sTMPfile & Chr(34), vbHide)    '/e-embedded without new, /r open file read-only
        If lShellRet = 0 Then GoTo KillsTMPfile

        MyWait 0.2



        Dim ExcelObjEspVerWb As Object
        Do
            Err.Clear: i = i + 1: If i > 1 Then MyWait 1
            Set ExcelObjEspVerWb = GetObject(sTMPfile)
            Set ExcelObjEspVer = ExcelObjEspVerWb.Parent
        Loop Until Err.Number = 0 And Not ExcelObjEspVer Is Nothing And i < 10
        If Err.Number <> 0 Then GoTo KillsTMPfile Else MyWait 0.2
        ExcelObjEspVerWb.Close False
        Set ExcelObjEspVerWb = Nothing
        OpenEspVerAppObj = True
KillsTMPfile:
        DoEvents
        If (sINIfile = "" Or Dir(sINIfile) = "") Then If Dir(sTMPfile) <> "" Then Kill sTMPfile
    Else
        'Open by shell and get OLE object in the Running Object Table (ROT) but normally Office
        'app only is registered there when user takes control and make something. Here a message
        'API is used to simulate this (Cf. http://office.microsoft.com/en-us/access/HA012288481033.aspx)
        lShellRet = Shell(Chr(34) & sAppExeFile & Chr(34) & " /e /automation", vbHide)
        If lShellRet = 0 Then Exit Function

        MyWait 0.2


        Do
            i = i + 1: If i > 1 Then MyWait 1
            hWnd = FindWindowA("XLMain", vbNullString)
        Loop Until hWnd <> 0 And i < 10
        SendMessage hWnd, WM_USER + 18, 0, 0               'To enter app in the Running Object Table
        MyWait 0.2




        Set ExcelObjEspVer = GetObject(, "Excel.Application")
        If Err.Number <> 0 Then Exit Function


        OpenEspVerAppObj = True
    End If
End Function

Function MyWait(PauseSeg As Double, Optional bDovents As Boolean = True) As Boolean
    Dim Start
    Start = Timer
    Do While Timer < Start + PauseSeg
        If bDovents Then DoEvents    '|fffd|s vezes o DoEvents pode prejudicar um processo com disparo OnTime ou a|fffd||fffd|es do usu|fffd|rio como fechar Wb.
        If bDovents And PauseSeg > 2 Then Sleep 1    'Com isso o CPU Usage cai de 100% para seus 0 ou 2% normal
    Loop
    MyWait = True
End Function

Function TempFolder() As String
'Get Temp Folder
    Dim fctRet As Long
    TempFolder = String$(255, 0)
    fctRet = GetTempPath(255, TempFolder)
    If fctRet <> 0 Then
        TempFolder = Left(TempFolder, fctRet)
        If Right(TempFolder, 1) = "\" Then TempFolder = Left(TempFolder, Len(TempFolder) - 1)
    Else
        TempFolder = ""
    End If
End Function

Attribute VB_Name = "Mod4RegEdit"
Option Explicit                                            'Fiz logo igual ao Tool de ToEXE para ficar totalmente atualizdo

Public Const REG_SZ As Long = &H1
Private Const REG_DWORD As Long = &H4
Private Const REG_BINARY As Long = &H3

Public Const HKEY_CLASSES_ROOT As Long = &H80000000
Public Const HKEY_CURRENT_USER As Long = &H80000001
Public Const HKEY_LOCAL_MACHINE As Long = &H80000002
Public Const HKEY_USERS As Long = &H80000003

Private Const KEY_ALL_ACCESS As Long = &H3F
Private Const KEY_QUERY_VALUE As Long = &H1
Private Const REG_OPTION_NON_VOLATILE As Long = 0

Private Const ERROR_MORE_DATA As Long = 234

Private Type SECURITY_ATTRIBUTES
    nLength As Long
    lpSecurityDescriptor As Long
    bInheritHandle As Long
End Type

Private Declare Function RegCloseKey Lib "advapi32.dll" _
        (ByVal hKey As Long) As Long

Private Declare Function RegCreateKeyEx Lib "advapi32.dll" _
        Alias "RegCreateKeyExA" (ByVal hKey As Long, _
        ByVal lpSubKey As String, _
        ByVal Reserved As Long, _
        ByVal lpClass As String, _
        ByVal dwOptions As Long, _
        ByVal samDesired As Long, _
        lpSecurityAttributes As SECURITY_ATTRIBUTES, _
        phkResult As Long, _
        lpdwDisposition As Long) As Long

Public Declare Function RegDeleteKey Lib "advapi32.dll" _
        Alias "RegDeleteKeyA" _
        (ByVal hKey As Long, _
        ByVal lpSubKey As String) As Long

Private Declare Function RegQueryValueExStr Lib "advapi32.dll" _
        Alias "RegQueryValueExA" _
        (ByVal hKey As Long, ByVal lpValueName As String, _
        ByVal lpReserved As Long, ByRef lpType As Long, _
        ByVal lpData As String, ByRef lpcbData As Long) As Long    'Note that if you declare the lpData parameter as String, you must pass it By Value.

Private Declare Function RegQueryValueExLng Lib "advapi32.dll" _
        Alias "RegQueryValueExA" _
        (ByVal hKey As Long, ByVal lpValueName As String, _
        ByVal lpReserved As Long, ByRef lpType As Long, _
        lpData As Long, ByRef lpcbData As Long) As Long    'Note that if you declare the lpData parameter as String, you must pass it By Value.

Private Declare Function RegQueryValueExByt Lib "advapi32.dll" _
        Alias "RegQueryValueExA" _
        (ByVal hKey As Long, ByVal lpValueName As String, _
        ByVal lpReserved As Long, ByRef lpType As Long, _
        lpData As Byte, ByRef lpcbData As Long) As Long    'Note that if you declare the lpData parameter as String, you must pass it By Value.

Private Declare Function RegOpenKeyEx Lib "advapi32" _
        Alias "RegOpenKeyExA" _
        (ByVal hKey As Long, _
        ByVal lpSubKey As String, _
        ByVal ulOptions As Long, _
        ByVal samDesired As Long, _
        phkResult As Long) As Long

Private Declare Function RegSetValueExStr Lib "advapi32.dll" _
        Alias "RegSetValueExA" _
        (ByVal hKey As Long, ByVal lpValueName As String, _
        ByVal Reserved As Long, ByVal dwType As Long, _
        ByVal lpData As String, ByVal cbData As Long) As Long    ' Note that if you declare the lpData parameter as String, you must pass it By Value.

Private Declare Function RegSetValueExLng Lib "advapi32.dll" _
        Alias "RegSetValueExA" _
        (ByVal hKey As Long, ByVal lpValueName As String, _
        ByVal Reserved As Long, ByVal dwType As Long, _
        lpData As Long, ByVal cbData As Long) As Long      ' Note that if you declare the lpData parameter as String, you must pass it By Value.

Private Declare Function RegSetValueExByt Lib "advapi32.dll" _
        Alias "RegSetValueExA" _
        (ByVal hKey As Long, ByVal lpValueName As String, _
        ByVal Reserved As Long, ByVal dwType As Long, _
        lpData As Byte, ByVal cbData As Long) As Long      ' Note that if you declare the lpData parameter as String, you must pass it By Value.

Sub FileExtAssociation(sExt As String, sAppName As String, sAppFullNameFile As String)
    Dim OpenKeyHdl As Long
    Dim lRet As Long
    Dim SecurAttr As SECURITY_ATTRIBUTES

    'Create root extension subkey (.xxx)
    If GetRegValue(HKEY_CLASSES_ROOT, sExt, "", False) = "Error" Then
        RegCreateKeyEx HKEY_CLASSES_ROOT, sExt, _
                0&, vbNullString, REG_OPTION_NON_VOLATILE, _
                KEY_ALL_ACCESS, SecurAttr, OpenKeyHdl, lRet
        RegCloseKey OpenKeyHdl
    End If

    'Create root Application subkey about file extension (AppNameFile subkey)
    If GetRegValue(HKEY_CLASSES_ROOT, sAppName & "File\shell\open\command", "", False) = "Error" Then
        RegCreateKeyEx HKEY_CLASSES_ROOT, sAppName & "File\shell\open\command", _
                0&, vbNullString, REG_OPTION_NON_VOLATILE, _
                KEY_ALL_ACCESS, SecurAttr, OpenKeyHdl, lRet
        RegCloseKey OpenKeyHdl
    End If

    'Set open command value at AppNameFile subkey
    SetKeyValue HKEY_CLASSES_ROOT, sAppName & "File\shell\open\command", "", REG_SZ, """" & sAppFullNameFile & """" & " %1"

    'Define a description for the extension file as default value at AppNameFile subkey.
    SetKeyValue HKEY_CLASSES_ROOT, sAppName & "File", "", REG_SZ, sAppName & " File"

    'Set default value at extension subkey to look for commands at AppNameFile subkey
    SetKeyValue HKEY_CLASSES_ROOT, sExt, "", REG_SZ, sAppName & "File"

End Sub

Function SetValueEx(ByVal hKey As Long, _
        sValueName As String, _
        lType As Long, _
        vlpData As Variant) As Long

    Dim blpData() As Byte
    Dim llpData As Long
    Dim slpData As String

    Select Case lType
    Case REG_BINARY
        blpData = vlpData
        SetValueEx = RegSetValueExStr(hKey, _
                sValueName, _
                0&, _
                lType, _
                blpData(0), _
                UBound(blpData) - LBound(blpData) - 1)

    Case REG_SZ
        slpData = vlpData & Chr$(0)
        SetValueEx = RegSetValueExStr(hKey, _
                sValueName, _
                0&, _
                lType, _
                slpData, _
                VBA.Strings.Len(slpData))

    Case REG_DWORD
        llpData = vlpData
        SetValueEx = RegSetValueExLng(hKey, _
                sValueName, _
                0&, _
                lType, _
                llpData, _
                4)
    End Select
End Function

Sub SetKeyValue(lKey As Long, sSubKey As String, _
        sValueName As String, lType As Long, vValue As Variant)
    Dim OpenKeyHdl As Long

    'open the key
    RegOpenKeyEx lKey, sSubKey, 0, KEY_ALL_ACCESS, OpenKeyHdl

    'Set the value
    SetValueEx OpenKeyHdl, sValueName, lType, vValue

    'Close the key
    RegCloseKey OpenKeyHdl

End Sub

'Get Registry Value, Arguments:
'1 - Reg Key (Ex.: HKEY_LOCAL_MACHINE),
'2 - Reg SubKey (Ex.: "Software\Microsoft\Windows\CurrentVersion"),
'3 - Name of Value (Ex.:"ProgramFilesDir" or "" for default)
'4 - Convert to text like written in reg files (*.reg)
Function GetRegValue(lKey As Long, sSubKey As String, sValueName As String, ConvRegText)
    Dim sRet As String * 255                               'Fixed-length strings
    Dim lRet As Long
    Dim OpenKeyHdl As Long
    Dim lType As Long
    Dim lLen As Long
    Dim sDataRet As String
    Dim lDataRet As Long
    Dim abDataRet() As Byte
    Dim i As Integer
    Dim BrkLine As Long

    lRet = RegOpenKeyEx(lKey, sSubKey, 0, KEY_QUERY_VALUE, OpenKeyHdl)
'    If lRet <> 0 And IsWin64bit Then lRet = RegOpenKeyEx(lKey, sSubKey, 0, KEY_QUERY_VALUE + KEY_WOW64_64KEY, OpenKeyHdl)    'Se falhar na procura pelo de 32-bit, tenta ver se tem o de 64-bit. More info about 32 rodando em 64 em http://msdn.microsoft.com/en-us/library/aa384129(v=VS.85).aspx

    lRet = RegQueryValueExLng(OpenKeyHdl, sValueName, 0&, lType, 0&, lLen)
    If lRet And lRet <> ERROR_MORE_DATA Then
        RegCloseKey OpenKeyHdl
        GetRegValue = "Error"
        Exit Function
    End If

    Select Case lType
    Case REG_DWORD
        lRet = RegQueryValueExLng(OpenKeyHdl, sValueName, _
                0&, lType, lDataRet, lLen)
        GetRegValue = CLng(lDataRet)

        If ConvRegText Then GetRegValue = """" & IIf(sValueName = "", "@", sValueName) & """=dword:" & VBA.Strings.Left("00000000", 8 - VBA.Strings.Len(Hex(GetRegValue))) & Hex(GetRegValue)

    Case REG_SZ
        sDataRet = String$(lLen - 1, 0)
        lRet = RegQueryValueExStr(OpenKeyHdl, sValueName, _
                0&, lType, sDataRet, lLen)
        GetRegValue = sDataRet

        If ConvRegText Then GetRegValue = """" & IIf(sValueName = "", "@", sValueName) & """=" & GetRegValue

    Case Else                                          'REG_BINARY and others
        ReDim abDataRet(lLen)
        lRet = RegQueryValueExByt(OpenKeyHdl, sValueName, _
                0&, lType, abDataRet(0), lLen)
        GetRegValue = abDataRet

        If ConvRegText Then
            If lType = REG_BINARY Then
                GetRegValue = """" & IIf(sValueName = "", "@", sValueName) & """=hex:"
                sDataRet = String$(lLen, 0)
                lRet = RegQueryValueExStr(OpenKeyHdl, sValueName, 0&, lType, sDataRet, lLen)
                BrkLine = VBA.Strings.Len(GetRegValue)
                For i = 1 To lLen
                    If BrkLine >= 77 Then
                        BrkLine = 2
                        GetRegValue = GetRegValue & "\" & Chr(10) & "  "
                    End If
                    GetRegValue = GetRegValue _
                            & IIf(VBA.Strings.Len(Hex(Asc(VBA.Strings.Mid(sDataRet, i, 1)))) = 1, "0", "") _
                            & Hex(Asc(VBA.Strings.Mid(sDataRet, i, 1))) & ","
                    BrkLine = BrkLine + 3
                Next
            Else
                If ConvRegText Then GetRegValue = """" & IIf(sValueName = "", "@", sValueName) & """=" & GetRegValue
            End If
        End If
    End Select
    RegCloseKey OpenKeyHdl
End Function







Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True





INQUEST-PP=macro
