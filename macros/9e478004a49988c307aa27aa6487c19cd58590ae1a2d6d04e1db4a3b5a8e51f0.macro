Attribute VB_Name = "EstaPastaDeTrabalho"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ModPastePicture"
'***************************************************************************
'*
'* MODULE NAME:     Paste Picture
'* AUTHOR & DATE:   STEPHEN BULLEN, Business Modelling Solutions Ltd.
'*                  15 November 1998
'*
'* CONTACT:         Stephen@BMSLtd.co.uk
'* WEB SITE:        http://www.BMSLtd.co.uk
'*
'* DESCRIPTION:     Creates a standard Picture object from whatever is on the clipboard.
'*                  This object can then be assigned to (for example) and Image control
'*                  on a userform.  The PastePicture function takes an optional argument of
'*                  the picture type - xlBitmap or xlPicture.
'*
'*                  The code requires a reference to the "OLE Automation" type library
'*
'*                  The code in this module has been derived from a number of sources
'*                  discovered on MSDN.
'*
'*                  To use it, just copy this module into your project, then you can use:
'*                      Set Image1.Picture = PastePicture(xlPicture)
'*                  to paste a picture of whatever is on the clipboard into a standard image control.
'*
'* PROCEDURES:
'*   PastePicture   The entry point for the routine
'*   CreatePicture  Private function to convert a bitmap or metafile handle to an OLE reference
'*   fnOLEError     Get the error text for an OLE error code
'***************************************************************************
Option Explicit
Option Compare Text

''' User-Defined Types for API Calls

'Declare a UDT to store a GUID for the IPicture OLE Interface
Private Type GUID
    Data1 As Long
    Data2 As Integer
    Data3 As Integer
    Data4(0 To 7) As Byte
End Type

'Declare a UDT to store the bitmap information
Private Type uPicDesc
    Size As Long
    Type As Long
    hPic As Long
    hPal As Long
End Type

'''Windows API Function Declarations

'Does the clipboard contain a bitmap/metafile?
Private Declare PtrSafe Function IsClipboardFormatAvailable Lib "User32" (ByVal wFormat As Integer) As Long

'Open the clipboard to read
Private Declare PtrSafe Function OpenClipboard Lib "User32" (ByVal hWnd As Long) As Long

'Get a pointer to the bitmap/metafile
Private Declare PtrSafe Function GetClipboardData Lib "User32" (ByVal wFormat As Integer) As Long

'Close the clipboard
Private Declare PtrSafe Function CloseClipboard Lib "User32" () As Long

'Convert the handle into an OLE IPicture interface.
Private Declare PtrSafe Function OleCreatePictureIndirect Lib "olepro32.dll" (PicDesc As uPicDesc, RefIID As GUID, ByVal fPictureOwnsHandle As Long, iPic As IPicture) As Long

'Create our own copy of the metafile, so it doesn't get wiped out by subsequent clipboard updates.
Declare PtrSafe Function CopyEnhMetaFile Lib "gdi32" Alias "CopyEnhMetaFileA" (ByVal hemfSrc As Long, ByVal lpszFile As String) As Long

'Create our own copy of the bitmap, so it doesn't get wiped out by subsequent clipboard updates.
Declare PtrSafe Function CopyImage Lib "User32" (ByVal handle As Long, ByVal un1 As Long, ByVal n1 As Long, ByVal n2 As Long, ByVal un2 As Long) As Long

'The API format types we're interested in
Const CF_BITMAP = 2
Const CF_PALETTE = 9
Const CF_ENHMETAFILE = 14
Const IMAGE_BITMAP = 0
Const LR_COPYRETURNORG = &H4

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''' Subroutine: PastePicture
'''
''' Purpose:    Get a Picture object showing whatever's on the clipboard.
'''
''' Arguments:  lXlPicType - The type of picture to create.  Can be one of:
'''                          xlPicture to create a metafile (default)
'''                          xlBitmap to create a bitmap
'''
''' Date        Developer           Action
''' --------------------------------------------------------------------------
''' 30 Oct 98   Stephen Bullen      Created
''' 15 Nov 98   Stephen Bullen      Updated to create our own copies of the clipboard images
'''

Function PastePicture(Optional lXlPicType As Long) As IPicture

'Some pointers
Dim h As Long, hPicAvail As Long, hPtr As Long, hPal As Long, lPicType As Long, hCopy As Long

'Convert the type of picture requested from the xl constant to the API constant
lPicType = IIf(lXlPicType, CF_BITMAP, CF_ENHMETAFILE)

'Check if the clipboard contains the required format
hPicAvail = IsClipboardFormatAvailable(lPicType)

If hPicAvail <> 0 Then
    'Get access to the clipboard
    h = OpenClipboard(0&)

    If h > 0 Then
        'Get a handle to the image data
        hPtr = GetClipboardData(lPicType)

        'Create our own copy of the image on the clipboard, in the appropriate format.
        If lPicType = CF_BITMAP Then
            hCopy = CopyImage(hPtr, IMAGE_BITMAP, 0, 0, LR_COPYRETURNORG)
        Else
            hCopy = CopyEnhMetaFile(hPtr, vbNullString)
        End If

        'Release the clipboard to other programs
        h = CloseClipboard

        'If we got a handle to the image, convert it into a Picture object and return it
        If hPtr <> 0 Then Set PastePicture = CreatePicture(hCopy, 0, lPicType)
    End If
End If

End Function


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''' Subroutine: CreatePicture
'''
''' Purpose:    Converts a image (and palette) handle into a Picture object.
'''
'''             Requires a reference to the "OLE Automation" type library
'''
''' Arguments:  None
'''
''' Date        Developer           Action
''' --------------------------------------------------------------------------
''' 30 Oct 98  Stephen Bullen      Created
'''

Private Function CreatePicture(ByVal hPic As Long, ByVal hPal As Long, ByVal lPicType) As IPicture

' IPicture requires a reference to "OLE Automation"
Dim R As Long, uPicInfo As uPicDesc, IID_IDispatch As GUID, iPic As IPicture

'OLE Picture types
Const PICTYPE_BITMAP = 1
Const PICTYPE_ENHMETAFILE = 4

' Create the Interface GUID (for the IPicture interface)
With IID_IDispatch
    .Data1 = &H7BF80980
    .Data2 = &HBF32
    .Data3 = &H101A
    .Data4(0) = &H8B
    .Data4(1) = &HBB
    .Data4(2) = &H0
    .Data4(3) = &HAA
    .Data4(4) = &H0
    .Data4(5) = &H30
    .Data4(6) = &HC
    .Data4(7) = &HAB
End With

' Fill uPicInfo with necessary parts.
With uPicInfo
    .Size = Len(uPicInfo)                                                   ' Length of structure.
    .Type = IIf(lPicType = CF_BITMAP, PICTYPE_BITMAP, PICTYPE_ENHMETAFILE)  ' Type of Picture
    .hPic = hPic                                                            ' Handle to image.
    .hPal = IIf(lPicType = CF_BITMAP, hPal, 0)                              ' Handle to palette (if bitmap).
End With

' Create the Picture object.
R = OleCreatePictureIndirect(uPicInfo, IID_IDispatch, True, iPic)

' If an error occured, show the description
If R <> 0 Then Debug.Print "Create Picture: " & fnOLEError(R)

' Return the new Picture object.
Set CreatePicture = iPic

End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''' Subroutine: fnOLEError
'''
''' Purpose:    Gets the message text for standard OLE errors
'''
''' Arguments:  None
'''
''' Date        Developer           Action
''' --------------------------------------------------------------------------
''' 30 Oct 98   Stephen Bullen      Created
'''

Private Function fnOLEError(lErrNum As Long) As String

'OLECreatePictureIndirect return values
Const E_ABORT = &H80004004
Const E_ACCESSDENIED = &H80070005
Const E_FAIL = &H80004005
Const E_HANDLE = &H80070006
Const E_INVALIDARG = &H80070057
Const E_NOINTERFACE = &H80004002
Const E_NOTIMPL = &H80004001
Const E_OUTOFMEMORY = &H8007000E
Const E_POINTER = &H80004003
Const E_UNEXPECTED = &H8000FFFF
Const S_OK = &H0

Select Case lErrNum
Case E_ABORT
    fnOLEError = " Aborted"
Case E_ACCESSDENIED
    fnOLEError = " Access Denied"
Case E_FAIL
    fnOLEError = " General Failure"
Case E_HANDLE
    fnOLEError = " Bad/Missing Handle"
Case E_INVALIDARG
    fnOLEError = " Invalid Argument"
Case E_NOINTERFACE
    fnOLEError = " No Interface"
Case E_NOTIMPL
    fnOLEError = " Not Implemented"
Case E_OUTOFMEMORY
    fnOLEError = " Out of Memory"
Case E_POINTER
    fnOLEError = " Invalid Pointer"
Case E_UNEXPECTED
    fnOLEError = " Unknown Error"
Case S_OK
    fnOLEError = " Success!"
End Select

End Function

Attribute VB_Name = "Module1"
Option Explicit

Public Declare PtrSafe Function FindWindow Lib "User32" Alias "FindWindowA" _
(ByVal lpClassName As String, ByVal lpWindowName As String) As Long

Public Declare PtrSafe Function DestroyIcon& Lib "User32" (ByVal hIcon&)


Attribute VB_Name = "M|fffd|dulo1"
Sub Modelo3D1_Clique()
    UserForm1.Show
End Sub
Attribute VB_Name = "Planilha1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{4C3AF45A-BE85-429A-B07B-A040B2F16E44}{6EA1C295-0ECC-4A6A-BDA9-4A043D143C25}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit
'***************************************************
'
'source http://www.vbfrance.com/code.aspx?ID=30202
'TheHacker & Sylvain298
'
'
'***************************************************
'adapt|fffd| par michelxld le 26.03.2005
'pour le forum http://www.excel-downloads.com
'
Dim mCapHwnd As Long
Dim retvale As Long
Dim CapParms As TCAPTUREPARMS
Dim Bitmap As Variant 'on declare une variable qui sera le chemin d'acces pour les photos
Dim Valeur As Long
Dim strFormClassName As String

Private Type TCAPTUREPARMS
 dwRequestMicroSecPerFrame As Long
 fLimitEnabled  As Boolean
 fCaptureAudio  As Boolean
 fMCIControl  As Boolean
 fYield  As Boolean
 vKeyAbort As Byte
 fAbortLeftMouse  As Boolean
 fAbortRightMouse As Boolean
End Type


Private Type tagInitCommonControlsEx 'pour l'effet windows XP
   lngSize As Long
   lngICC As Long
End Type

Private Declare PtrSafe Function InitCommonControlsEx Lib "comctl32.dll" (iccex As tagInitCommonControlsEx) As Boolean
Private Const ICC_USEREX_CLASSES = &H200

'la constante de depart est 1024
'video capture calls
Private Const WM_CAP_DRIVER_CONNECT As Long = 1034          'pour savoir si la webcam est connect|fffd|
Private Const WM_CAP_GRAB_FRAME As Long = 1084              'pour povoir previsualiser la webcam
Private Const WM_CAP_EDIT_COPY As Long = 1054               'pour copier l'image de la webcam, mais ici ca ne marche pas car on affiche un prwiev de la webcam grace a u copier coller (si vous trouvez autre chose pour le preview ca marche super)
Private Const WM_CAP_DRIVER_DISCONNECT = 1035               'pour savoir si la webcam est pas connect|fffd|e
Private Const WM_CAP_SEQUENCE = 1086                        'pour la capture AVI
Private Const WM_CAP_GET_SEQUENCE_SETUP = 1089              'sais pas
Private Const WM_CAP_SET_SEQUENCE_SETUP = 1088              'sais pas
Private Const WM_CAP_FILE_SET_CAPTURE_FILE = 1044           'pour changer le chemin de destination du fichier AVI
Private Const WM_CAP_DLG_VIDEOSOURCE = 1066                 'pour afficher les parametre
Private Const WM_CAP_FILE_SAVEAS = 1047                     'pour enregistrer dans un fichier specifier
Private Const WM_CAP_STOP = 1092                            'pour arreter la capture


Private Declare PtrSafe Function DestroyWindow Lib "User32" (ByVal hWnd As Long) As Long
Private Declare PtrSafe Function capCreateCaptureWindow Lib "avicap32.dll" Alias "capCreateCaptureWindowA" (ByVal lpszWindowName As String, ByVal dwStyle As Long, ByVal X As Long, ByVal Y As Long, ByVal nWidth As Long, ByVal nHeight As Long, ByVal hwndParent As Long, ByVal nID As Long) As Long
Private Declare PtrSafe Function SendMessage Lib "User32" Alias "SendMessageA" (ByVal hWnd As Long, ByVal wMsg As Long, ByVal wParam As Long, lParam As Any) As Long
Private Declare PtrSafe Function Sauvegarde Lib "User32" Alias "SendMessageA" (ByVal hWnd As Long, ByVal wMsg As Long, ByVal wParam As Integer, ByVal lParam As String) As Long

Private Sub UserForm_Activate()
Dim i As Double
On Error Resume Next ' j'ai ajout|fffd| cette ligne
'recuperer le Handle de l'Usf : Daniel Klann, mpep
If Val(Application.Version) < 9 Then 'Excel 2000
strFormClassName = "ThunderXFrame"
Else
strFormClassName = "ThunderDFrame" 'Excel 2000/2002
End If

Valeur = FindWindow(strFormClassName, "UserForm1") 'le Handle de la fenetre

'on definie la variable necessaire au bon fonctionnement de la capture video
mCapHwnd = capCreateCaptureWindow("My Own Capture Window", 0, 0, 0, 320, 240, Valeur, 0)
'dissemos o professor que a c|fffd|mera est|fffd| conectada
SendMessage mCapHwnd, WM_CAP_DRIVER_CONNECT, 0, 0

If SendMessage(mCapHwnd, WM_CAP_DRIVER_CONNECT, 0, 0) = 0 Then
MsgBox ("La camera n'est pas connect|fffd|e")
retvale = SendMessage(mCapHwnd, WM_CAP_DRIVER_DISCONNECT, 0, 0)
DestroyWindow (mCapHwnd)
Unload Me

Else ' j'ai ajout|fffd| cette ligne
i = 1 ' j'ai ajout|fffd| cette ligne
Do ' j'ai ajout|fffd| cette ligne
If i Mod 1000 = 0 Then ' Quando o ciclo est|fffd|
'repetir 1000 vezes.
DoEvents ' Tranfere o controle
' sistema operativo
SendMessage mCapHwnd, WM_CAP_GRAB_FRAME, 0, 0 'ele atualiza a imagem "na webcam"
SendMessage mCapHwnd, WM_CAP_EDIT_COPY, 0, 0
Set Image1.Picture = PastePicture(WM_CAP_EDIT_COPY)
End If

i = i + 1 'Eu adicionei esta linha ==> Na verdade, eu me usou para que eu possa sair do loop quando voc|fffd| clicar na cruz, eu arrancar a -1 como visto aqui ele vai fazer um i = 0 caso contr|fffd|rio o programa fecha, mas n|fffd|o cortar por causa da DoEvents
Loop Until i = 0
End If
UserForm_Terminate
End Sub

Private Sub cmdConfigCamera_Click()
'boite de dialogue parametres de la WebCam
SendMessage mCapHwnd, WM_CAP_DLG_VIDEOSOURCE, 0, 0
End Sub

Private Sub cmdCapturarImage_Click()
Dim iPic As StdPicture
Set iPic = Me.Image1.Picture

If iPic Is Nothing Then Exit Sub

SavePicture iPic, ThisWorkbook.Path _
& "\ImageWebCam " & Format(Date, "DD-MM-YYYY") & " " & Format(Time, "HH-MM-SS") & ".jpg"
MsgBox "Imagem Capturada!"
DestroyIcon iPic.handle
Set iPic = Nothing
Unload Me

End Sub

Private Sub UserForm_Terminate()
Dim oDataObject As DataObject

'Passo importante antes de sair de outra forma ele pode bloquear!
retvale = SendMessage(mCapHwnd, WM_CAP_DRIVER_DISCONNECT, 0, 0)
DestroyWindow (mCapHwnd)

Set oDataObject = New DataObject 'vider le presse papier
oDataObject.SetText ""
oDataObject.PutInClipboard

Set oDataObject = Nothing
End Sub


INQUEST-PP=macro
