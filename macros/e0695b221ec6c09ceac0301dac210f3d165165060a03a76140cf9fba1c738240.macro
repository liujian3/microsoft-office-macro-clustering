Attribute VB_Name = "Cluster"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private pName As String
Private pStyle As String
Private Children As New VBA.Collection
Private GVNodes As New VBA.Collection
Private GVEdges As New VBA.Collection
Public Ranks As New VBA.Collection
Public Property Let Name(p_Name As String)
    pName = p_Name
End Property
Public Property Get Name() As String
    Name = pName
End Property
Public Property Let Style(p_Style As String)
    pStyle = p_Style
End Property
Public Property Get Style() As String
    Style = pStyle
End Property
Function addChild(ByVal p_Child As Cluster)
    ChildExists = False
    If Children.Count > 0 Then
        For Each Child In Children
            secondName = p_Child.Name
            firstName = Child.Name
            If firstName = secondName Then
                ChildExists = True
                Exit For
            End If
        Next
    End If
    If Not ChildExists Then
        Children.Add Item:=p_Child
    End If
End Function
Function findChild(ByVal p_Child As Cluster) As Collection
    Dim l_findChild As New VBA.Collection
    Set findChild = New Collection
    For i = 1 To Children.Count
        paraname = p_Child.Name
        childName = Children(i).Name
        If childName = paraname Then
            findChild.Add (CStr(i))
            Exit For
        Else
            'l_findChild = Children(i).findChild p_Child:=p_Child
            Set l_findChild = Children(i).findChild(p_Child:=p_Child)
            If l_findChild.Count > 0 Then
                Set findChild = l_findChild
                findChild.Add Item:=CStr(i), Before:=1
            End If
        End If
    Next
End Function
Function findChildByName(ByVal p_ChildName As String) As Collection
    Dim l_findChild As New VBA.Collection
    Set findChildByName = New Collection
    For i = 1 To Children.Count
        childName = Children(i).Name
        If childName = p_ChildName Then
            findChildByName.Add (CStr(i))
            Exit For
        Else
            Set l_findChild = Children(i).findChildByName(p_ChildName:=p_ChildName)
            If l_findChild.Count > 0 Then
                Set findChildByName = l_findChild
                findChildByName.Add Item:=CStr(i), Before:=1
            End If
        End If
    Next
End Function
Function createParentChildRelation(ByVal p_Parent As Cluster, ByVal p_Child As Cluster) As String
    Dim parentLocation As New Collection
    Dim localParent As New Cluster
    Dim childLocation As New Collection
    Dim localChild As New Cluster
    'a child cannot become it's own parent
    If Not (p_Parent.Name = p_Child.Name) Then
        Set parentLocation = findChild(p_Parent)
        Set childLocation = findChild(p_Child)
        Set localParent = Children.Item(Int(parentLocation.Item(1)))
        Set localChild = Children.Item(Int(childLocation.Item(1)))
       'a child cannot become a child again
        If Not childLocation.Count > 1 Then
            'now create a parent child relation at next found level
            localParent.addChild p_Child:=localChild
            Children.Remove (Int(childLocation.Item(1)))
            'If the parent is further away than onle level, you send the request up
            If parentLocation.Count > 1 Then
                Result = localParent.createParentChildRelation(p_Parent:=p_Parent, p_Child:=p_Child)
            End If
        Else
            createParentChildRelation = createParentChildRelation + "a child cannot become a child again" + p_Child.Name + vbCrLf
        End If
    Else
            createParentChildRelation = createParentChildRelation + "a child cannot become it's own parent" + p_Parent.Name + vbCrLf
    End If
End Function
Function addNodeToCluster(ByVal p_ClusterName As String, ByVal p_Node As GVNode)
    Dim localCluster As New Cluster
    Dim clusterLocation As New Collection
    Dim localClusterID As Integer
    If p_ClusterName = Name Then
        GVNodes.Add Item:=p_Node
        Me.addRank p_Rank:=p_Node.Rank
        
    Else
        Set clusterLocation = findChildByName(p_ClusterName)
        If clusterLocation.Count > 0 Then
            localClusterID = Int(clusterLocation.Item(1))
            Set localCluster = Children.Item(localClusterID)
            localCluster.addNodeToCluster p_ClusterName:=p_ClusterName, p_Node:=p_Node
        Else
            'already covered
        End If
    End If
End Function
Function addEdgeToCluster(ByVal p_Edge As GVEdge)
    GVEdges.Add Item:=p_Edge
End Function
Function getChildren() As Collection
    Set getChildren = New Collection
    Set getChildren = Children
End Function
Function getNodes() As Collection
    Set getNodes = New Collection
    Set getNodes = GVNodes
End Function
Function getEdges() As Collection
    Set getEdges = New Collection
    Set getEdges = GVEdges
End Function
Function getNodeCount() As Integer
    getNodeCount = 0
    If Children.Count > 0 Then
        For Each Child In Children
            getNodeCount = getNodeCount + Child.getNodeCount
        Next
    End If
    getNodeCount = getNodeCount + GVNodes.Count
End Function
Function addRank(ByVal p_Rank As String)
    RankExists = False
    If Ranks.Count > 0 Then
        For Each Rank In Ranks
            secondName = p_Rank
            firstName = Rank
            If firstName = secondName Then
                RankExists = True
                Exit For
            End If
        Next
    End If
    If Not RankExists And p_Rank <> "" Then
        Ranks.Add Item:=p_Rank
    End If
End Function
Attribute VB_Name = "DataCastelliGraphviz"
Dim ExcetlToGraphvizVersion As String
Dim GVDescription As String
Dim clusterStucture As New Cluster
Dim sheetNamesForCodeNames As New Collection
Dim graphSettings As New Collection
Dim graphAttributes As New Collection
Dim NodeStyleTypeCollection As New Collection
Dim EdgeStyleTypeCollection As New Collection
Dim ClusterStyleTypeCollection As New Collection
Dim RowVisible As New Collection

Public Sub CreateGraphvizOverviewFromExcel()
Attribute CreateGraphvizOverviewFromExcel.VB_ProcData.VB_Invoke_Func = "m\n14"
'***********************************************************
'* Excel to Graphviz
'* Author: mcastelli (piqault@gmail.com)
'* |fffd| 2012 - 2017
ExcetlToGraphvizVersion = "Version 5.1.4 (2017-05-31)"
'***********************************************************
'* with this version
'* - code improvements
'* - code cleanup
'* - legenda to only show elements that are visible
'* - Added GraphType in GVVariables for use as dropdown list in GVAttributes
'* - Change order of unique identifier to list cluster first, then type, then node
'* - itemwidth in legenda standardized
'* - Import function (cntrl-i)
'***********************************************************
GVDescription = ""
Set clusterStucture = Nothing
Set sheetNamesForCodeNames = Nothing
Set graphSettings = Nothing
Set graphAttributes = Nothing
Set NodeStyleTypeCollection = Nothing
Set EdgeStyleTypeCollection = Nothing
Set ClusterStyleTypeCollection = Nothing
Set RowVisible = Nothing

Set graphSettings = Settings.prepareSettings
 
prepareClusters

prepareNodeStyles

prepareEdgeStyles

prepareClusterStyles

addNodesToClusterStructure

addEdgesToClusterStructure

generateGVDescription

produceOutput

End Sub
Private Sub prepareClusters()
    clusterStucture.Name = "content"
    Dim clusterToAdd As Cluster
    Dim definedClusters As Range
    Set definedClusters = Range("Clusters")
    For Each clusterDefinition In definedClusters.Rows
        Set clusterToAdd = New Cluster
        clusterToAdd.Name = clusterDefinition.Cells(1).Value2
        clusterToAdd.Style = clusterDefinition.Cells(2).Value2
        clusterStucture.addChild p_Child:=clusterToAdd
    Next
    Dim parentCluster As Cluster
    Dim childCluster As Cluster
    For Each Row In Range("Cluster_Structure").Rows
        aParent = Row.Cells(1).Value2 'Cells(Row.Row, 1)
        aChild = Row.Cells(2).Value2 'Cells(Row.Row, 2)
        If Not Row.Row = 1 Then
            If Not (IsEmpty(aParent)) Or Not (Len(aParent) = 0) Then
                Set parentCluster = New Cluster
                parentCluster.Name = aParent
                If Not (IsEmpty(aChild)) Or Not (Len(aChild) = 0) Then
                    Set childCluster = New Cluster
                    childCluster.Name = aChild
                    Result = clusterStucture.createParentChildRelation(p_Parent:=parentCluster, p_Child:=childCluster)
                Else
                    Exit For
                End If
            Else
                 Exit For
            End If
        End If
    Next
End Sub
Private Sub prepareNodeStyles()
    getTypesCollection GVItem_type:="Node_type", ItemStylesCollection:=NodeStyleTypeCollection
End Sub
Private Sub prepareEdgeStyles()
    getTypesCollection GVItem_type:="Edge_type", ItemStylesCollection:=EdgeStyleTypeCollection
End Sub
Private Sub prepareClusterStyles()
    getTypesCollection GVItem_type:="Cluster_type", ItemStylesCollection:=ClusterStyleTypeCollection, p_Separator:=";"
End Sub
Private Sub getTypesCollection(ByVal GVItem_type As String, ByRef ItemStylesCollection As Collection, Optional ByRef p_Separator As String)
    'Defines lookups for styles for nodes, edges and clusters
    'based on sheets with name enum_<item>_type
    Set ItemStylesCollection = New Collection
    Dim currentStyleTypeItem As New NameValuePair
    Dim sheetCodeName, _
        l_Separator, _
        yesNoSeparator, _
        currentStyleName, _
        currentStyleTypeItemValueList, _
        curentStyleItemType, _
        curentStyleItemValue As String
    Dim currentRowNumber, _
        currentColumnNumber As Integer
    Dim styleRange As Range
    
    sheetCodeName = "Enum_" + GVItem_type
    If p_Separator = "" Then
        l_Separator = "," 'default
    Else
        l_Separator = p_Separator
    End If
    
    Set styleRange = Range(sheetCodeName)
    For Each Row In styleRange.Rows
        Set currentStyleTypeItem = New NameValuePair
        currentRowNumber = Row.Row
        currentStyleName = (Row.Cells(1).Value2)
        If Not IsEmpty(Row.Cells(1).Value2) And Not Row.Hidden Then
            currentStyleTypeItemValueList = ""
            For Each Column In styleRange.CurrentRegion.ListObject.ListColumns
                currentColumnNumber = Column.Index
                If Not currentColumnNumber = 1 Then
                    If (Not IsEmpty(Column.Name)) And (Not IsEmpty(Row.Cells(currentColumnNumber).Value2)) Then
                       curentStyleItemType = Column.Name
                       curentStyleItemValue = Row.Cells(currentColumnNumber).Value2
                    If currentStyleTypeItemValueList = "" Then
                        yesNoSeparator = ""
                    Else
                        yesNoSeparator = l_Separator
                    End If
                    currentStyleTypeItemValueList = currentStyleTypeItemValueList + yesNoSeparator + curentStyleItemType + "=""" + curentStyleItemValue + """"
                    End If
                End If
            Next Column
            currentStyleTypeItem.Name = currentStyleName
            currentStyleTypeItem.Value = currentStyleTypeItemValueList
            ItemStylesCollection.Add Item:=currentStyleTypeItem, Key:=currentStyleName
        End If
    Next Row
End Sub
Private Sub addNodesToClusterStructure()
    Dim currentNode As GVNode
    Dim currentNodeCluster As String
    
    For Each Row In Range("Nodes").Rows
        If Not Row.Row = 1 Then
            If Not IsEmpty(Row.Cells(3).Value2) Then
                Set currentNode = New GVNode
                currentNode.Name = Row.Cells(3).Value2
                currentNode.ID = Row.Cells(6).Value2
                currentNode.Visible = Not Row.Hidden
                currentNode.Style = Row.Cells(4).Value2
                If Not Row.Hidden Then
                    If Not IsEmpty(Row.Cells(5).Value2) Then
                        currentNodeCluster = Row.Cells(5).Value2
                    Else
                        currentNodeCluster = clusterStucture.Name
                    End If
                    currentNode.URL = Row.Cells(7).Value2
                    currentNode.Rank = Row.Cells(8).Value2
                    clusterStucture.addNodeToCluster p_ClusterName:=currentNodeCluster, p_Node:=currentNode
                                        RowVisible.Add Item:=(True), Key:=currentNode.ID
                Else
                    RowVisible.Add Item:=(False), Key:=currentNode.ID
                End If
            Else
                Exit For
            End If
        End If
    Next Row
End Sub
Private Sub addEdgesToClusterStructure()
    Dim currentEdge As GVEdge
    Dim currentConsumer, currentProvider As String
    Dim consumerVisible, providerVisible As Boolean
    For Each Row In Range("Edges").Rows
        If Not Row.Row = 1 Then
            If Not IsEmpty(Row.Cells(1).Value2) Then
                Set currentEdge = New GVEdge
                currentEdge.Consumer = Row.Cells(1).Value2
                currentEdge.Provider = Row.Cells(2).Value2
                On Error GoTo Error_handler:
                    If RowVisible.Item(currentEdge.Consumer) And RowVisible.Item(currentEdge.Provider) Then
                        currentEdge.Style = Row.Cells(3).Value2
                        currentEdge.Label = Row.Cells(4).Value2
                        currentEdge.Visible = Not Row.Hidden
                        clusterStucture.addEdgeToCluster p_Edge:=currentEdge
                    End If
            Else
                Exit For
            End If
        End If
    Next
Exit Sub
Error_handler:
    MsgBox ("You've probably renamed a node but not propagated this on the edge tab. repair the edge on row " + Str(Row.Row) + " and try again.")
    Worksheets("Edges").Activate
    ActiveSheet.Range(Row.Cells(1), Row.Cells(2)).Select
    End
End Sub
Private Sub generateGVDescription()
    Set graphAttributes = New Collection
    'Start the Graph
    GVDescription = "//graphviz file generated with ExcelToGraphviz (https://sourceforge.net/projects/excel-to-graphviz/) " + ExcetlToGraphvizVersion + vbCrLf
    GVDescription = GVDescription + "digraph " + """" + graphSettings.Item("graphName") + """" + " {" + vbCrLf
    'Add GraphAttributes
    For Each Row In Range("GVGraph_Attributes").Rows
        If Not Row.Row = 1 Then
            If Not IsEmpty(Row.Cells(1).Value2) Then
                If Not IsEmpty(Row.Cells(2).Value2) Then
                    GVDescription = GVDescription + (Row.Cells(1).Value2) + " = """ + (Row.Cells(2).Text) + """;" + vbCrLf
                    If (Row.Cells(1).Value2) = "rankdir" Then
                        graphAttributes.Add Item:=(Row.Cells(2).Value2), Key:="orientation"
                    End If
                End If
            Else
                Exit For
            End If
        End If
    Next
    
    GVDescription = GVDescription + vbCrLf
    
    'Add the Legenda
    If graphSettings.Item("legenda") Then
        addLegenda
    End If
    
    'Add the Content Cluster
    extractOutputFromGVCluster p_Cluster:=clusterStucture
        
    'Close The Graph
    GVDescription = GVDescription + "}" + vbCrLf
End Sub
Private Sub addLegenda()
    Dim graphLegenda, _
        graphLegendaStyle, _
        nodeStypeVisibe, _
        firstDummyNode As String
    Dim theFirstOfTheFirstItem As Boolean
    Dim legendaItemWidth As Integer
    
    'maybe future settings item
    legendaItemWidth = 1
    
        
    If graphSettings.Item("debugMode") Then
        graphLegendaStyle = """dotted"""
    Else
        graphLegendaStyle = """invis"""
    End If
        
    graphLegenda = graphLegenda + "subgraph ""cluster_legenda"" {" + vbCrLf
    graphLegenda = graphLegenda + "style = ""solid"";" + vbCrLf
       
    'GVLegendaID = getGUID  'get some UUID to garantee name uniqueness
    GVLegendaID = "Legenda for " + graphSettings.Item("systemName") + "-" + graphSettings.Item("projectName") + "-" + graphSettings.Item("itemName") + "-" + graphSettings.Item("creatorName") + "-" + Format(Now(), graphSettings.Item("dateTimeFormat"))
    If graphAttributes.Item("orientation") = "TB" Then
        graphLegenda = graphLegenda + """" + GVLegendaID + """" + " [shape=record, fontname=courier, fontsize=8,layer=""1"", label=""{{ system\n" + splitLabels(graphSettings.Item("systemName"), True, graphSettings.Item("preferredSplitPosition")) + "|project\n" + graphSettings.Item("projectName") + "} | {" + graphSettings.Item("itemName") + "}| {drawn by\n" + graphSettings.Item("creatorName") + "| date\n" + Format(Now(), graphSettings.Item("dateTimeFormat")) + "}}""];" + vbCrLf
    Else
        graphLegenda = graphLegenda + """" + GVLegendaID + """" + " [shape=record, fontname=courier, fontsize=8,layer=""1"", label=""{{{system\n" + splitLabels(graphSettings.Item("systemName"), True, graphSettings.Item("preferredSplitPosition")) + "|project\n" + graphSettings.Item("projectName") + "}|" + graphSettings.Item("itemName") + "|{drawn by\n" + graphSettings.Item("creatorName") + "| date\n" + Format(Now(), graphSettings.Item("dateTimeFormat")) + "}}}""];" + vbCrLf
    End If
        
    graphLegenda = graphLegenda + "subgraph ""cluster_types"" {" + vbCrLf
    graphLegenda = graphLegenda + "style = " + graphLegendaStyle + ";" + vbCrLf
    
    'Initialize variables
    previousFirstItemName = GVLegendaID
    itemsPerRow = Int(graphSettings.Item("itemsPerRow"))
    If itemsPerRow < 2 Then itemsPerRow = 2
    itemNumber = 0
    previousItemName = ""
    RankGroup = "{ rank=same " 'all first items must be on same rank
    
    'add clusters
    If graphSettings.Item("clustering") Then
        For Each itemStyle In ClusterStyleTypeCollection
            If Not getAttributeFromString("style", itemStyle.Value) = "invisible" Then
                'thisItemStyleName = getGUID
                thisItemStyleName = itemStyle.Name + "_" + graphSettings.Item("systemName") + "_" + "ClusterStyleType"
                If itemStyle.Value = "" Then
                    graphLegenda = graphLegenda + """" + thisItemStyleName + """" + " [label=""" + splitLabels(itemStyle.Name, False, 11) + """,fixedsize=""TRUE"",width=""" + Str(legendaItemWidth) + """];" + vbCrLf
                Else
                    graphLegenda = graphLegenda + """" + thisItemStyleName + """" + " [label=""" + splitLabels(itemStyle.Name, False, 11) + """," + itemStyle.Value + ",fixedsize=""TRUE"",width=""" + Str(legendaItemWidth) + """];" + vbCrLf
                End If
                If (itemNumber Mod itemsPerRow) = 0 Then 'we have a new row(LR) or column(TB)
                        graphLegenda = graphLegenda + """" + previousFirstItemName + """" + " -> " + """" + thisItemStyleName + """" + " [style=" + graphLegendaStyle + "];" + vbCrLf + vbCrLf
                    previousFirstItemName = thisItemStyleName
                    RankGroup = RankGroup + """" + thisItemStyleName + """ "
                Else
                    graphLegenda = graphLegenda + """" + previousItemName + """" + " -> " + """" + thisItemStyleName + """" + " [style=" + graphLegendaStyle + "];" + vbCrLf
                End If
                previousItemName = thisItemStyleName
                itemNumber = itemNumber + 1
            End If
        Next
    End If
    
    'add nodes
    For Each itemStyle In NodeStyleTypeCollection
        If Not getAttributeFromString("shape", itemStyle.Value) = "point" Or getAttributeFromString("style", itemStyle.Value) = "invisible" Then
            'thisItemStyleName = getGUID
            thisItemStyleName = itemStyle.Name + "_" + graphSettings.Item("systemName") + "_" + "NodeStyleType"
            If itemStyle.Value = "" Then
                graphLegenda = graphLegenda + """" + thisItemStyleName + """" + " [label=""" + splitLabels(itemStyle.Name, False, 11) + """,fixedsize=""TRUE"",width=""" + Str(legendaItemWidth) + """];" + vbCrLf
            Else
                graphLegenda = graphLegenda + """" + thisItemStyleName + """" + " [label=""" + splitLabels(itemStyle.Name, False, 11) + """," + itemStyle.Value + ",fixedsize=""TRUE"",width=""" + Str(legendaItemWidth) + """];" + vbCrLf
            End If
            If (itemNumber Mod itemsPerRow) = 0 Then 'we have a new row(LR) or column(TB)
                graphLegenda = graphLegenda + """" + previousFirstItemName + """" + " -> " + """" + thisItemStyleName + """" + " [style=" + graphLegendaStyle + "];" + vbCrLf + vbCrLf
                previousFirstItemName = thisItemStyleName
                RankGroup = RankGroup + """" + thisItemStyleName + """ "
            Else
                graphLegenda = graphLegenda + """" + previousItemName + """" + " -> " + """" + thisItemStyleName + """" + " [style=" + graphLegendaStyle + "];" + vbCrLf
            End If
            previousItemName = thisItemStyleName
            itemNumber = itemNumber + 1
        End If
    Next
    
    'Add edges
    firstEdgeNode = True
    newRowNeeded = False
    firstNodeforEdge = ""
    secondNodeForEdge = ""
    For Each itemStyle In EdgeStyleTypeCollection
        If Not getAttributeFromString("style", itemStyle.Value) = "invisible" Then 'we need to draw a line
            If Not (firstEdgeNode And ((itemNumber) Mod itemsPerRow) = 0) Then 'make sure new row dicision is correct
                itemNumber = itemNumber + 1
            End If
            If ((itemNumber) Mod itemsPerRow) = 0 Then 'we need a new row(LR) or column(TB)
                newRowNeeded = True
            Else
                newRowNeeded = False
            End If
            If firstEdgeNode Or newRowNeeded Then 'dummy needed
                firstNodeforEdge = itemStyle.Name + "_" + graphSettings.Item("systemName") + "_" + "First NodeStyleType"
                graphLegenda = graphLegenda + """" + firstNodeforEdge + """" + " [style=" + graphLegendaStyle + ",label=" + """" + firstNodeforEdge + """" + ", shape=""box"",fixedsize=""TRUE"",width=""" + Str(legendaItemWidth) + """];" + vbCrLf
                If newRowNeeded Then 'connect to previousFirstItem
                    graphLegenda = graphLegenda + """" + previousFirstItemName + """" + " -> " + """" + firstNodeforEdge + """" + " [style=" + graphLegendaStyle + "];" + vbCrLf + vbCrLf
                    previousFirstItemName = firstNodeforEdge
                    previousItemName = firstNodeforEdge
                    RankGroup = RankGroup + """" + firstNodeforEdge + """ "
                    itemNumber = itemNumber + 1
                Else 'connectToPreviousItem
                    graphLegenda = graphLegenda + """" + previousItemName + """" + " -> " + """" + firstNodeforEdge + """" + " [style=" + graphLegendaStyle + "];" + vbCrLf + vbCrLf
                    previousItemName = firstNodeforEdge
                End If
                firstEdgeNode = False
            End If
            secondNodeForEdge = itemStyle.Name + "_" + graphSettings.Item("systemName") + "_" + "EdgeStyleType"
            graphLegenda = graphLegenda + """" + secondNodeForEdge + """" + " [style=" + graphLegendaStyle + ",label="""",shape=""box"",fixedsize=""TRUE"",width=""" + Str(legendaItemWidth) + """];" + vbCrLf
            If itemStyle.Value = "" Then
                graphLegenda = graphLegenda + """" + previousItemName + """" + " -> " + """" + secondNodeForEdge + """" + " [label=" + """" + splitLabels(itemStyle.Name, False, 11) + """" + "];" + vbCrLf
            Else
                graphLegenda = graphLegenda + """" + previousItemName + """" + " -> " + """" + secondNodeForEdge + """" + " [" + itemStyle.Value + ",label=" + """" + splitLabels(itemStyle.Name, False, 11) + """" + "];" + vbCrLf
            End If
            previousItemName = secondNodeForEdge
        End If
    Next
    
    RankGroup = RankGroup + "}"
    graphLegenda = graphLegenda + RankGroup + vbCrLf + vbCrLf
    graphLegenda = graphLegenda + "}" + vbCrLf
    graphLegenda = graphLegenda + "}" + vbCrLf
    
    GVDescription = GVDescription + graphLegenda
End Sub
Function getGUID() As String
    getGUID = Mid$(CreateObject("Scriptlet.TypeLib").GUID, 2, 36)
End Function
Private Sub extractOutputFromGVCluster(ByVal p_Cluster As Cluster)
    Dim defaultstyleTypeItem As New NameValuePair
    Dim styleTypeItem As New NameValuePair
    Dim clusterChildren As New Collection
    Dim clusterChild As New Cluster
    Dim clusterNodes As New Collection
    Dim NodeRanking As New Collection
    
    defaultstyleTypeItem.Name = "Default"
    defaultstyleTypeItem.Value = ""
    
    
    If p_Cluster.getNodeCount > 0 Then
        GVDescription = GVDescription + "subgraph ""cluster_" + p_Cluster.Name + """ {" + vbCrLf
        GVDescription = GVDescription + "tooltip= """ + p_Cluster.Name + """;" + vbCrLf
        If Not IsEmpty(p_Cluster.Style) And Not (p_Cluster.Style = "") Then
            Set styleTypeItem = defaultstyleTypeItem
            On Error Resume Next
            Set styleTypeItem = ClusterStyleTypeCollection.Item(p_Cluster.Style)
            GVDescription = GVDescription + styleTypeItem.Value + vbCrLf
            If Not graphSettings.Item("clusterLabelAsNode") Then
                GVDescription = GVDescription + "label= """ + p_Cluster.Name + """;" + vbCrLf
            Else
                GVDescription = GVDescription + "label= """";" + vbCrLf
                GVDescription = GVDescription + """" + p_Cluster.Name + """" + "    [" + styleTypeItem.Value + "label= """ + splitLabels(p_Cluster.Name, False, graphSettings.Item("preferredSplitPosition")) + """,style="""", shape=""plaintext""];" + vbCrLf + vbCrLf
            End If
        Else
            GVDescription = GVDescription + "style = invis;" + vbCrLf
        End If
        GVDescription = GVDescription + vbCrLf
         
        Set clusterChildren = p_Cluster.getChildren
        For Each clusterChild In clusterChildren
            extractOutputFromGVCluster p_Cluster:=clusterChild
        Next
        
        Set clusterNodes = p_Cluster.getNodes
        For Each clusterNode In clusterNodes
            Set styleTypeItem = defaultstyleTypeItem
            On Error Resume Next
            Set styleTypeItem = NodeStyleTypeCollection.Item(clusterNode.Style)
            GVDescription = GVDescription + """" + clusterNode.ID + """" + "    [" + "label=""" + splitLabels(clusterNode.Name, False, graphSettings.Item("preferredSplitPosition")) + """," + "tooltip=""" + clusterNode.Name + """," + styleTypeItem.Value + "];" + vbCrLf
            TEST = clusterNode.Rank
        Next
        
        Set clusterEdges = p_Cluster.getEdges
        For Each clusterEdge In clusterEdges
            Set styleTypeItem = defaultstyleTypeItem
            On Error Resume Next
            Set styleTypeItem = EdgeStyleTypeCollection.Item(clusterEdge.Style)
            If clusterEdge.Label = "" Then
                GVDescription = GVDescription + """" + clusterEdge.Consumer + """" + " -> " + """" + clusterEdge.Provider + """" + "    [" + styleTypeItem.Value + "];" + vbCrLf
            Else
                If styleTypeItem.Value = "" Then
                    GVDescription = GVDescription + """" + clusterEdge.Consumer + """" + " -> " + """" + clusterEdge.Provider + """" + "    [xlabel=""" + splitLabels(clusterEdge.Label, False, graphSettings.Item("preferredSplitPosition")) + """];" + vbCrLf
                Else
                    GVDescription = GVDescription + """" + clusterEdge.Consumer + """" + " -> " + """" + clusterEdge.Provider + """" + "    [" + styleTypeItem.Value + ", xlabel=""" + splitLabels(clusterEdge.Label, False, graphSettings.Item("preferredSplitPosition")) + """];" + vbCrLf
                End If
            End If
        Next
        
        'Ranks
        GVDescription = GVDescription + vbCrLf
        For Each Rank In p_Cluster.Ranks
            RankGroup = "{ rank=" + Rank + " "
            For Each clusterNode In clusterNodes
                If clusterNode.Rank = Rank Then
                    RankGroup = RankGroup + """" + clusterNode.ID + """ "
                
                End If
            Next
            RankGroup = RankGroup + "}"
            GVDescription = GVDescription + RankGroup + vbCrLf + vbCrLf
        Next
        
        
        GVDescription = GVDescription + "}" + vbCrLf
    End If
End Sub
Private Function splitLabels(labelToSplit As String, htmlLabel As Boolean, Optional ByVal p_preferredSplitPosition As Integer) As String
    'this function splits the labels for so that a label like "getCustomerNameFromCrmSystemAtExternalProvider" becomes
    'getCustomerName
    'FromCrmSystem
    'AtExternalProvider
    'this way the size of node is not so streched
    'be sure to use camelCase for appropriate splitting
    splitLabels = ""

    Dim currentCharacter, lineSplitter As String
    Dim labelLength, position, startPoint, preferredSplitPosition As Integer
    Dim splitme As Boolean
    
    preferredSplitPosition = 10
    If p_preferredSplitPosition > 0 Then
        preferredSplitPosition = p_preferredSplitPosition
    End If
    
    shiftPoint = preferredSplitPosition - 4
    startPoint = shiftPoint
    startSplitPoint = 1
    labelLength = Len(labelToSplit)
    splitme = False
        
    If htmlLabel Then
        lineSplitter = "<BR/>"
    Else
        lineSplitter = "\n"
    End If
    
    If labelLength > preferredSplitPosition Then
        splitme = True
        While splitme
            For position = startPoint To labelLength
                currentCharacter = Mid(labelToSplit, position, 1)
                If currentCharacter = versionSeparator Or UCase(currentCharacter) = currentCharacter Then
                    splitLabels = splitLabels + Mid(labelToSplit, startSplitPoint, position - startSplitPoint) + lineSplitter
                        startSplitPoint = position
                        startPoint = position + shiftPoint
                    If labelLength - position > preferredSplitPosition Then
                        Exit For
                    Else
                        splitLabels = splitLabels + Right(labelToSplit, labelLength - (startSplitPoint - 1))
                        splitme = False
                        Exit For
                    End If
                End If
            Next
            If splitme And (position - 1 = labelLength) Then
                splitLabels = splitLabels + Right(labelToSplit, labelLength - (startSplitPoint - 1))
                splitme = False
            End If
        Wend
    Else
        splitLabels = labelToSplit
    End If
End Function
Private Sub produceOutput()

    Dim exelFileName, _
        outputFileNameBase, _
        currentDirectory, _
        outputPath, _
        GVDescrFileName As String
    Dim ExcelFileNameExtensionPosition As Integer
    
    'Determine ouputPath and GVDescriptionFileName
    exelFileName = Application.ThisWorkbook.Name
    ExcelFileNameExtensionPosition = InStrRev(exelFileName, ".") - 1
    If graphSettings.Item("debugMode") Then
        outputFileNameBase = (Left(exelFileName, ExcelFileNameExtensionPosition)) + Format(Now(), "-YYYY-mm-DD")
    Else
        outputFileNameBase = (Left(exelFileName, ExcelFileNameExtensionPosition)) + Format(Now(), "-YYYY-mm-DD-HH.MM")
    End If
    
    currentDirectory = Application.ActiveWorkbook.Path
    outputPath = graphSettings.Item("outputPath")
    If Left(outputPath, 2) = ".\" Then
        outputPath = currentDirectory + Right(outputPath, Len(outputPath) - 1)
    End If
    If Dir(outputPath, vbDirectory) = vbNullString Then
        outputPath = currentDirectory
    End If
    If Not Right(outputPath, 1) = "\" Then
        outputPath = outputPath + "\"
    End If
    GVDescrFileName = outputPath & outputFileNameBase + ".gv"
    
    'Save the created GV description into the GVDescriptionFileName
    Dim objStream As Object
    Const adSaveCreateOverWrite = 2
    Set objStream = CreateObject("ADODB.Stream")
    objStream.Open
    objStream.position = 0
    objStream.Charset = "UTF-8"
    objStream.WriteText GVDescription
    objStream.position = 3
    'removing utf-8 bom
    Dim BinaryStream As Object
    Set BinaryStream = CreateObject("adodb.stream")
    BinaryStream.Type = 1
    BinaryStream.mode = 3
    BinaryStream.Open
    objStream.CopyTo BinaryStream
    BinaryStream.SaveToFile GVDescrFileName, adSaveCreateOverWrite
    
    'Generate the GV graph and save into selected formatting
    Dim GVProgram, _
        GVOutputFileDirective, _
        GVInputFileName, _
        GVOutputTypeDirective, _
        GVOutputFileName As String
    Dim ShellReturnValue As Long
        
    GVProgram = graphSettings.Item("dotpath")
    GVOutputFileDirective = " -o "
    GVInputFileName = """" + GVDescrFileName + """"
    Dim ScreenOutputFileName As String
    ScreenOutputFileName = outputPath & outputFileNameBase + ".png"
    
    If graphSettings.Item("pdfOutput") Then
        GVOutputTypeDirective = " -Tpdf "
        GVOutputFileName = """" + outputPath & outputFileNameBase + ".pdf" + """"
        thecallis = GVProgram & GVOutputTypeDirective & GVInputFileName & GVOutputFileDirective & GVOutputFileName
        ShellReturnValue = Shell(thecallis, vbHide)
        'Debug.Print ("ShellReturnValue pdfOutput = " + Str(ShellReturnValue))
    End If
    
    'If graphSettings.Item("pngOutput") Then
        GVOutputTypeDirective = " -Tpng "
        GVOutputFileName = """" + outputPath & outputFileNameBase + ".png" + """"
        thecallis = GVProgram & GVOutputTypeDirective & GVInputFileName & GVOutputFileDirective & GVOutputFileName
        ShellReturnValue = Shell(thecallis, 0)
        'Debug.Print ("ShellReturnValue pngOutput = " + Str(ShellReturnValue))
    'End If

    If graphSettings.Item("svgOutput") Then
        GVOutputTypeDirective = " -Tsvg "
        GVOutputFileName = """" + outputPath & outputFileNameBase + ".svg" + """"
        thecallis = GVProgram & GVOutputTypeDirective & GVInputFileName & GVOutputFileDirective & GVOutputFileName
        ShellReturnValue = Shell(thecallis, 0)
        'Debug.Print ("ShellReturnValue svgOutput = " + Str(ShellReturnValue))
    End If
            
    If graphSettings.Item("ouputOnScreen") Then
        waiting = "0:00:" & (2 + Trim(Str(Round((Len(GVDescription) / 15000), 0))))
        'Application.Wait (Now + TimeValue("0:00:3"))
        Application.Wait (Now + TimeValue(waiting))
        Application.ActiveSheet.Range("A1").Select
        On Error Resume Next
        ActiveSheet.Pictures.Insert(ScreenOutputFileName).Select
    End If
    
End Sub
Function getAttributeFromString(ByVal p_AttribName As String, ByVal p_String As String) As String
    getAttributeFromString = ""
    firstPos = InStr(p_String, p_AttribName)
    If firstPos = 0 Then Exit Function
    secondPos = InStr(firstPos, p_String, """")
    thirdPos = InStr(secondPos + 1, p_String, """")
    getAttributeFromString = Mid(p_String, secondPos + 1, thirdPos - secondPos - 1)
End Function



Attribute VB_Name = "Enum_GVCluster_type"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    headercell = Cells(1, Target.Column).Value
    If InStr(1, StrConv(headercell, vbLowerCase), "color", vbTextCompare) Then
        Call ThisWorkbook.setCellColorBasedOnHexCode(Target)
    End If
    If Target.Column = "1" Then
        Call ThisWorkbook.UpdateNameRanges(Target)
    End If
End Sub
Attribute VB_Name = "Enum_GVEdge_type"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    headercell = Cells(1, Target.Column).Value
    If InStr(1, StrConv(headercell, vbLowerCase), "color", vbTextCompare) Then
        Call ThisWorkbook.setCellColorBasedOnHexCode(Target)
    End If
    If Target.Column = "1" Then
        Call ThisWorkbook.UpdateNameRanges(Target)
    End If
End Sub

Attribute VB_Name = "Enum_GVNode_type"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    headercell = Cells(1, Target.Column).Value
    If InStr(1, StrConv(headercell, vbLowerCase), "color", vbTextCompare) Then
        Call ThisWorkbook.setCellColorBasedOnHexCode(Target)
    End If
    If Target.Column = "1" Then
        Call ThisWorkbook.UpdateNameRanges(Target)
    End If
End Sub
Attribute VB_Name = "GVCluster_Structure"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "GVClusters"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    If Not Target.Row = "1" Then
        If (Target.Column = "1") Then
            Call UpdateClusterNameRanges(Target)
        End If
    End If
End Sub
Sub UpdateClusterNameRanges(ByVal Target As Range)
    If Target.Column = "1" And Not Target.Row = "1" Then
        thisSheetCodeName = Target.Application.ActiveWorkbook.ActiveSheet.CodeName
        If thisSheetCodeName = "GVClusters" Then
            thisSheetName = StrConv(Target.Worksheet.Name, vbLowerCase)
            thisNameRangeName = StrConv(thisSheetCodeName, vbLowerCase)
            For Each Row In Application.ThisWorkbook.ActiveSheet.Rows
                If Not Row.Row = 1 Then
                    If IsEmpty(Cells(Row.Row, 1)) Then
                        beginValueForNamedRange = 2
                        endValueForNamedRange = Row.Row - 1
                        thisNameRange = "=" + thisSheetName + "!$A$" + CStr(beginValueForNamedRange) + ":$A$" + CStr(endValueForNamedRange)
                        ActiveWorkbook.Names.Add Name:=thisNameRangeName, RefersTo:=thisNameRange
                        Exit For
                    End If
                End If
            Next
        End If
    End If
End Sub

Attribute VB_Name = "GVEdge"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private pConsumer As String
Private pProvider As String
Private pStyle As String
Private pLabel As String
Private pVisible As Boolean
Private pURL As String
Public Property Let Consumer(p_Consumer As String)
    pConsumer = p_Consumer
End Property
Public Property Get Consumer() As String
    Consumer = pConsumer
End Property
Public Property Let Provider(p_Provider As String)
    pProvider = p_Provider
End Property
Public Property Get Provider() As String
    Provider = pProvider
End Property
Public Property Let Style(p_Style As String)
    pStyle = p_Style
End Property
Public Property Get Style() As String
    Style = pStyle
End Property
Public Property Let Label(p_Label As String)
    pLabel = p_Label
End Property
Public Property Get Label() As String
    Label = pLabel
End Property
Public Property Let Visible(p_Visible As Boolean)
    pVisible = p_Visible
End Property
Public Property Get Visible() As Boolean
    Visible = pVisible
End Property

Attribute VB_Name = "GVEdges"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "GVGraphAttributes"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "GVNode"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private pName As String
Private pID As String
Private pStyle As String
Private pVisible As Boolean
Private pURL As String
Private pRank As String
Public Property Let Name(p_Name As String)
    pName = p_Name
End Property
Public Property Get Name() As String
    Name = pName
End Property
Public Property Let ID(p_ID As String)
    pID = p_ID
End Property
Public Property Get ID() As String
    ID = pID
End Property
Public Property Let Style(p_Style As String)
    pStyle = p_Style
End Property
Public Property Get Style() As String
    Style = pStyle
End Property
Public Property Let Visible(p_Visible As Boolean)
    pVisible = p_Visible
End Property
Public Property Get Visible() As Boolean
    Visible = pVisible
End Property
Public Property Let URL(p_URL As String)
    pURL = p_URL
End Property
Public Property Get URL() As String
    URL = pURL
End Property
Public Property Let Rank(p_Rank As String)
    pRank = p_Rank
End Property
Public Property Get Rank() As String
    Rank = pRank
End Property




Attribute VB_Name = "GVNodes"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    Dim myrange As Range
    If Not Target.Row = "1" Then
        If (Target.Column = "1" Or Target.Column = "2" Or Target.Column = "4" Or Target.Column = "5") Then
            ThisWorkbook.UpdateNodeNameRanges
        End If
    End If
End Sub
Attribute VB_Name = "GVVariables"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "NameValuePair"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private pName As String
Private pValue As String
Public Property Let Name(p_Name As String)
    pName = p_Name
End Property
Public Property Get Name() As String
    Name = pName
End Property
Public Property Let Value(p_Value As String)
    pValue = p_Value
End Property
Public Property Get Value() As String
    Value = pValue
End Property
Attribute VB_Name = "Settings"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    If Not Target.Row = "1" Then
        If Target.Column = "2" Then
            ThisWorkbook.UpdateNodeNameRanges
        End If
    End If
End Sub
Function prepareSettings() As Collection
    Set graphSettings = New Collection
    For Each Row In Range("Settings").Rows
        aName = Row.Cells(1).Value2 'Cells(Row.Row, 1)
        aValue = Row.Cells(2).Value2 'Cells(Row.Row, 2)
        If Not Row.Row = 1 Then
            If Not IsEmpty(aName) Or Not (aName = "") Then
                Select Case aName
                Case "debugMode"
                    If Not IsEmpty(aValue) Or Not (aValue = "") Then
                        graphSettings.Add Item:=CBool(aValue), Key:=aName
                    Else
                         graphSettings.Add Item:=False, Key:=aName
                    End If
                Case "versionSeparator"
                    If Not IsEmpty(aValue) Or Not (aValue = "") Then
                        graphSettings.Add Item:=aValue, Key:=aName
                    Else
                        graphSettings.Add Item:=".", Key:=aName
                    End If
                Case "graphName"
                    If Not IsEmpty(aValue) Or Not (aValue = "") Then
                        graphSettings.Add Item:=aValue, Key:=aName
                    Else
                        graphSettings.Add Item:="Overview", Key:=aName
                    End If
                Case "legenda"
                    If Not IsEmpty(aValue) Or Not (aValue = "") Then
                        graphSettings.Add Item:=CBool(aValue), Key:=aName
                    Else
                        graphSettings.Add Item:=True, Key:=aName
                    End If
                Case "dateTimeFormat"
                    If Not IsEmpty(aValue) Or Not (aValue = "") Then
                        graphSettings.Add Item:=aValue, Key:=aName
                    Else
                        graphSettings.Add Item:="YYYY-mm-DD", Key:=aName
                    End If
                Case "systemName"
                    If Not IsEmpty(aValue) Or Not (aValue = "") Then
                        graphSettings.Add Item:=aValue, Key:=aName
                    Else
                        graphSettings.Add Item:="mySystem", Key:=aName
                    End If
                Case "projectName"
                    If Not IsEmpty(aValue) Or Not (aValue = "") Then
                        graphSettings.Add Item:=aValue, Key:=aName
                    Else
                        graphSettings.Add Item:="myProject", Key:=aName
                    End If
                Case "creatorName"
                    If Not IsEmpty(aValue) Or Not (aValue = "") Then
                        graphSettings.Add Item:=aValue, Key:=aName
                    Else
                        graphSettings.Add Item:=Application.UserName, Key:=aName
                    End If
                Case "itemName"
                    If Not IsEmpty(aValue) Or Not (aValue = "") Then
                        graphSettings.Add Item:=aValue, Key:=aName
                    Else
                        graphSettings.Add Item:="myItem", Key:=aName
                    End If
                Case "itemsPerRow"
                    If (Not IsEmpty(aValue) Or Not (aValue = "")) And IsNumeric(aValue) And aValue > 0 Then
                        graphSettings.Add Item:=Int(aValue), Key:=aName
                    Else
                        graphSettings.Add Item:=5, Key:=aName
                    End If
                Case "dotpath"
                    If Not IsEmpty(aValue) Or Not (aValue = "") Then
                        graphSettings.Add Item:=aValue, Key:=aName
                    Else
                        graphSettings.Add Item:="dot.exe", Key:=aName
                    End If
                Case "pdfOutput"
                    If Not IsEmpty(aValue) Or Not (aValue = "") Then
                        graphSettings.Add Item:=CBool(aValue), Key:=aName
                    Else
                        graphSettings.Add Item:=True, Key:=aName
                    End If
                Case "pngOutput"
                    If Not IsEmpty(aValue) Or Not (aValue = "") Then
                        graphSettings.Add Item:=CBool(aValue), Key:=aName
                    Else
                        graphSettings.Add Item:=True, Key:=aName
                    End If
                Case "svgOutput"
                    If Not IsEmpty(aValue) Or Not (aValue = "") Then
                        graphSettings.Add Item:=CBool(aValue), Key:=aName
                    Else
                        graphSettings.Add Item:=True, Key:=aName
                    End If
                Case "outputPath"
                    If Not IsEmpty(aValue) Or Not (aValue = "") Then
                        graphSettings.Add Item:=aValue, Key:=aName
                    Else
                        graphSettings.Add Item:=".\", Key:=aName
                    End If
                Case "ranking"
                    If Not IsEmpty(aValue) Or Not (aValue = "") Then
                        graphSettings.Add Item:=CBool(aValue), Key:=aName
                    Else
                        graphSettings.Add Item:=True, Key:=aName
                    End If
                Case "clustering"
                    If Not IsEmpty(aValue) Or Not (aValue = "") Then
                        graphSettings.Add Item:=CBool(aValue), Key:=aName
                    Else
                        graphSettings.Add Item:=False, Key:=aName
                    End If
                Case Else
                    'we have a setting with no type and no default (we don't take default from sheet)
                    If Not IsEmpty(aValue) Or Not (aValue = "") Then
                        If VarType(aValue) = vbBoolean Then
                            graphSettings.Add Item:=CBool(aValue), Key:=aName
                        ElseIf IsNumeric(aValue) Then
                            graphSettings.Add Item:=Int(aValue), Key:=aName
                        Else
                            graphSettings.Add Item:=aValue, Key:=aName
                        End If
                    End If
                End Select
            Else
                Exit For
            End If
        End If
    Next
    Set prepareSettings = graphSettings
End Function
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Dim updatingNodeNameRanges As Boolean
Function UpdateNodeNameRanges()
    If updatingNodeNameRanges = True Then
        End
    Else
        updatingNodeNameRanges = True
    End If

    Dim graphSettings As New Collection
    Dim nodeTypeAsIdentifier, clusterAsIdentifier As Boolean
    Dim edgeRange, nodeRange As Range
    Dim currentIdColumn, newIdColumn As String
    

    Set graphSettings = Settings.prepareSettings
    nodeTypeAsIdentifier = graphSettings.Item("nodeTypeAsIdentifier")
    clusterAsIdentifier = graphSettings.Item("clusterAsIdentifier")
    Set nodeRange = Range("Nodes")
    Set edgeRange = Range("Edges")
    
    For Each Row In nodeRange.Rows
            'add the version to the node name if applicable
            If Not (IsEmpty(Row.Columns(1))) Or Not (Len(Row.Columns(1)) = 0) Then
                If Not (IsEmpty(Row.Columns(2))) Or Not (Len(Row.Columns(2)) = 0) Then
                    Row.Columns(3) = Row.Columns(1) & ThisWorkbook.Names("versionSeparator").RefersToRange & Row.Columns(2)
                Else
                    Row.Columns(3) = Row.Columns(1)
                End If
            Else
                 Row.Columns(3) = Row.Columns(1)
            End If
            'add node style and cluster name to unique node identifier if applicable
            If Not (IsEmpty(Row.Columns(3))) And Not (Len(Row.Columns(3)) = 0) Then
                currentIdColumn = Row.Columns(6)
                If (Not (IsEmpty(Row.Columns(4))) And Not (Len(Row.Columns(4)) = 0)) And nodeTypeAsIdentifier Then
                    If (Not (IsEmpty(Row.Columns(5))) And Not (Len(Row.Columns(5)) = 0)) And clusterAsIdentifier Then
                        Row.Columns(6) = Row.Columns(5) & "-" & Row.Columns(4) & "-" & Row.Columns(3)
                    Else
                        Row.Columns(6) = Row.Columns(4) & "-" & Row.Columns(3)
                    End If
                Else
                    Row.Columns(6) = Row.Columns(3)
                End If
                newIdColumn = Row.Columns(6)
                'repair edges if needed
                If Not currentIdColumn = newIdColumn Then
                    Set edgeRange = Union(Range("Edges").Columns(1), Range("Edges").Columns(2))
                    edgeRange.Replace What:=currentIdColumn, Replacement:=newIdColumn, LookAt:=xlWhole, _
                            SearchOrder:=xlByRows, MatchCase:=True
                End If
            End If
    Next
    updatingNodeNameRanges = False
End Function
Sub UpdateNameRanges(ByVal Target As Range)
    If Target.Column = "1" And Not Target.Row = "1" Then
        thisSheetName = StrConv(Target.Worksheet.Name, vbLowerCase)
        thisNameRangeName = StrConv(Target.Application.ActiveWorkbook.ActiveSheet.CodeName, vbLowerCase)
        If InStr(1, thisNameRangeName, "enum_") = 1 Then
            thisNameNameLength = Len(thisNameRangeName) - Len("enum_")
            thisNameName = Right(thisNameRangeName, thisNameNameLength)
            For Each Row In Application.ThisWorkbook.ActiveSheet.Rows
                If Not Row.Row = 1 Then
                    If IsEmpty(Cells(Row.Row, 1)) Then
                        beginValueForNamedRange = 2
                        endValueForNamedRange = Row.Row - 1
                        thisNameRange = "=" + thisSheetName + "!$A$" + CStr(beginValueForNamedRange) + ":$A$" + CStr(endValueForNamedRange)
                        ActiveWorkbook.Names.Add Name:=thisNameName, RefersTo:=thisNameRange
                        Exit For
                    End If
                End If
            Next
        End If
    End If
End Sub
Sub setCellColorBasedOnHexCode(Target As Range)
    For Each Row In Application.ThisWorkbook.ActiveSheet.Rows
        If Cells(Row.Row, 1) = Empty Then
            Exit For
        End If
        colorDefiningCell = Cells(Row.Row, Target.Column).Value
        If Row.Row = 1 Then
            fontOrFill = Left(colorDefiningCell, InStr(1, StrConv(colorDefiningCell, vbLowerCase), "color", vbTextCompare) - 1)
        End If
        If Left(colorDefiningCell, 1) = "#" Then
            fillcolor_r = CLng("&H" & (Mid(colorDefiningCell, 2, 2)))
            fillcolor_g = CLng("&H" & (Mid(colorDefiningCell, 4, 2)))
            fillcolor_b = CLng("&H" & (Mid(colorDefiningCell, 6, 2)))
            yiq = ((fillcolor_r * 299) + (fillcolor_g * 587) + (fillcolor_b * 114)) / 1000
            If yiq >= 128 Then
                'fontcolor = "#000000"
                font_rgb = CLng("&H" & "00")
            Else
                'fontolor = "#FFFFFF"
                font_rgb = CLng("&H" & "FF")
            End If
            If fontOrFill = "font" Then
                Cells(Row.Row, Target.Column).Font.Color() = RGB(fillcolor_r, fillcolor_g, fillcolor_b)
                Cells(Row.Row, Target.Column).Interior.Color() = RGB(font_rgb, font_rgb, font_rgb)
            Else
                Cells(Row.Row, Target.Column).Interior.Color() = RGB(fillcolor_r, fillcolor_g, fillcolor_b)
                Cells(Row.Row, Target.Column).Font.Color() = RGB(font_rgb, font_rgb, font_rgb)
            End If
        End If
    Next
End Sub
Function findSheetNameForCodeName(p_CodeName As String) As String
    findSheetNameForCodeName = ""
    For Each Sheet In Application.ThisWorkbook.Worksheets
        sheetCodeName = Sheet.CodeName
        sheetName = Sheet.Name
        If sheetCodeName = p_CodeName Then
            findSheetNameForCodeName = sheetName
            Exit For
        End If
    Next
End Function
Function findCodeNameForSheetName(p_SheetName As String) As String
    findCodeNameForSheetName = ""
    For Each Sheet In Application.ThisWorkbook.Worksheets
        sheetCodeName = Sheet.CodeName
        sheetName = Sheet.Name
        If sheetName = p_SheetName Then
            findSheetNameForCodeName = sheetCodeName
            Exit For
        End If
    Next
End Function


Attribute VB_Name = "X2GImportSheets"
Sub XtGImport()
Attribute XtGImport.VB_ProcData.VB_Invoke_Func = "i\n14"
'
' XtGImport Macro
'
' Keyboard Shortcut: Ctrl+i
'
Dim mySheet As String
Dim myFormula As String

For Each Query In ActiveWorkbook.Queries
    ActiveWorkbook.Queries.Item(Query.Name).Delete
Next

For Each Connection In ActiveWorkbook.Connections
    If Not Connection.Name = "ThisWorkbookDataModel" Then
    Connection.Delete
    'ActiveWorkbook.Connections.Item(Connection.Name).Delete
    End If
Next


Application.FileDialog(msoFileDialogOpen).AllowMultiSelect = False
If Application.FileDialog(msoFileDialogOpen).Show = 0 Then Exit Sub
    
myFile = Application.FileDialog(msoFileDialogOpen).SelectedItems(1)

mySheet = "GVGraph_Attributes"
GVGraphAttributes.Select
Application.ActiveSheet.Range("A1").Select
myFormula = "let" & Chr(13) & "" & Chr(10) & "    Source = Excel.Workbook(File.Contents(""" + myFile + """), null, true)," & Chr(13) & "" & Chr(10) _
          & "    " & mySheet & "_Table = Source{[Item=""" & mySheet & """,Kind=""Table""]}[Data]" & Chr(13) & "" & Chr(10) _
          & "in" & Chr(13) & "" & Chr(10) _
          & "    " & mySheet & "_Table"

emptySheetAndTable rangeName:=mySheet
InsertTableToSheet sheetName:=mySheet, theFormula:=myFormula, theTableStyle:="TableStyleMedium9"

mySheet = "Enum_Cluster_Type"
Enum_GVCluster_type.Select
Application.ActiveSheet.Range("A1").Select
myFormula = "let" & Chr(13) & "" & Chr(10) & "    Source = Excel.Workbook(File.Contents(""" + myFile + """), null, true)," & Chr(13) & "" & Chr(10) _
          & "    " & mySheet & "_Table = Source{[Item=""" & mySheet & """,Kind=""Table""]}[Data]" & Chr(13) & "" & Chr(10) _
          & "in" & Chr(13) & "" & Chr(10) _
          & "    " & mySheet & "_Table"
emptySheetAndTable rangeName:=mySheet
InsertTableToSheet sheetName:=mySheet, theFormula:=myFormula, theTableStyle:="TableStyleMedium14"

mySheet = "Enum_Edge_type"
Enum_GVEdge_type.Select
Application.ActiveSheet.Range("A1").Select
myFormula = "let" & Chr(13) & "" & Chr(10) & "    Source = Excel.Workbook(File.Contents(""" + myFile + """), null, true)," & Chr(13) & "" & Chr(10) _
          & "    " & mySheet & "_Table = Source{[Item=""" & mySheet & """,Kind=""Table""]}[Data]" & Chr(13) & "" & Chr(10) _
          & "in" & Chr(13) & "" & Chr(10) _
          & "    " & mySheet & "_Table"
emptySheetAndTable rangeName:=mySheet
InsertTableToSheet sheetName:=mySheet, theFormula:=myFormula, theTableStyle:="TableStyleMedium14"
    
mySheet = "Enum_Node_type"
Enum_GVNode_type.Select
Application.ActiveSheet.Range("A1").Select
myFormula = "let" & Chr(13) & "" & Chr(10) & "    Source = Excel.Workbook(File.Contents(""" + myFile + """), null, true)," & Chr(13) & "" & Chr(10) _
          & "    " & mySheet & "_Table = Source{[Item=""" & mySheet & """,Kind=""Table""]}[Data]" & Chr(13) & "" & Chr(10) _
          & "in" & Chr(13) & "" & Chr(10) _
          & "    " & mySheet & "_Table"
    
emptySheetAndTable rangeName:=mySheet
InsertTableToSheet sheetName:=mySheet, theFormula:=myFormula, theTableStyle:="TableStyleMedium14"

mySheet = "Clusters"
GVClusters.Select
Application.ActiveSheet.Range("A1").Select
myFormula = "let" & Chr(13) & "" & Chr(10) & "    Source = Excel.Workbook(File.Contents(""" + myFile + """), null, true)," & Chr(13) & "" & Chr(10) _
          & "    " & mySheet & "_Table = Source{[Item=""" & mySheet & """,Kind=""Table""]}[Data]" & Chr(13) & "" & Chr(10) _
          & "in" & Chr(13) & "" & Chr(10) _
          & "    " & mySheet & "_Table"
emptySheetAndTable rangeName:=mySheet
InsertTableToSheet sheetName:=mySheet, theFormula:=myFormula, theTableStyle:="TableStyleMedium11"

mySheet = "Cluster_Structure"
GVCluster_Structure.Select
Application.ActiveSheet.Range("A1").Select
myFormula = "let" & Chr(13) & "" & Chr(10) & "    Source = Excel.Workbook(File.Contents(""" + myFile + """), null, true)," & Chr(13) & "" & Chr(10) _
          & "    " & mySheet & "_Table = Source{[Item=""" & mySheet & """,Kind=""Table""]}[Data]" & Chr(13) & "" & Chr(10) _
          & "in" & Chr(13) & "" & Chr(10) _
          & "    " & mySheet & "_Table"
emptySheetAndTable rangeName:=mySheet
InsertTableToSheet sheetName:=mySheet, theFormula:=myFormula, theTableStyle:="TableStyleMedium11"

mySheet = "Edges"
GVEdges.Select
Application.ActiveSheet.Range("A1").Select
myFormula = "let" & Chr(13) & "" & Chr(10) & "    Source = Excel.Workbook(File.Contents(""" + myFile + """), null, true)," & Chr(13) & "" & Chr(10) _
          & "    " & mySheet & "_Table = Source{[Item=""" & mySheet & """,Kind=""Table""]}[Data]" & Chr(13) & "" & Chr(10) _
          & "in" & Chr(13) & "" & Chr(10) _
          & "    " & mySheet & "_Table"
emptySheetAndTable rangeName:=mySheet
InsertTableToSheet sheetName:=mySheet, theFormula:=myFormula, theTableStyle:="TableStyleMedium11"
    
mySheet = "Nodes"
GVNodes.Select
Application.ActiveSheet.Range("A1").Select
myFormula = "let" & Chr(13) & "" & Chr(10) & "    Source = Excel.Workbook(File.Contents(""" + myFile + """), null, true)," & Chr(13) & "" & Chr(10) _
          & "    " & mySheet & "_Table = Source{[Item=""" & mySheet & """,Kind=""Table""]}[Data]" & Chr(13) & "" & Chr(10) _
          & "in" & Chr(13) & "" & Chr(10) _
          & "    " & mySheet & "_Table"
    
emptySheetAndTable rangeName:=mySheet
InsertTableToSheet sheetName:=mySheet, theFormula:=myFormula, theTableStyle:="TableStyleMedium11"
        
End Sub
Function InsertTableToSheet(sheetName As String, theFormula As String, theTableStyle As String)

    ActiveWorkbook.Queries.Add Name:=sheetName, Formula:=theFormula
    With ActiveSheet.ListObjects.Add(SourceType:=0, Source:= _
        "OLEDB;Provider=Microsoft.Mashup.OleDb.1;Data Source=$Workbook$;Location=" + sheetName _
        , Destination:=Range("$A$1")).QueryTable
        .CommandType = xlCmdSql
        .CommandText = Array("SELECT * FROM [" + sheetName + "]")
        .RowNumbers = False
        .FillAdjacentFormulas = False
        .PreserveFormatting = True
        .RefreshOnFileOpen = False
        .BackgroundQuery = True
        .RefreshStyle = xlInsertDeleteCells
        .SavePassword = False
        .SaveData = True
        .AdjustColumnWidth = True
        .RefreshPeriod = 0
        .PreserveColumnInfo = True
        .ListObject.DisplayName = sheetName
        .Refresh BackgroundQuery:=False
    End With
    Selection.ListObject.QueryTable.Refresh BackgroundQuery:=False
    Selection.ListObject.QueryTable.MaintainConnection = False
    Selection.ListObject.QueryTable.Delete
    ActiveSheet.ListObjects(sheetName).TableStyle = theTableStyle
    ActiveWorkbook.Queries.Item(sheetName).Delete
End Function
Function emptySheetAndTable(rangeName As String)
    Dim l_rangeName As String
    l_rangeName = rangeName & "[#All]"
    Range(l_rangeName).Select
    Selection.ClearContents
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    Selection.Borders(xlEdgeRight).LineStyle = xlNone
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlNone
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
End Function



' InQuest injected base64 decoded content
' )^O*^
' xLmz{"
' BzYB

INQUEST-PP=macro
