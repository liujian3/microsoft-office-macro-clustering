Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()
  'parameters
   wsExtended.Shapes("wsErrWarning").Visible = True
   
   Application.ScreenUpdating = False
   ProtectWorkbook
End Sub
Attribute VB_Name = "M01_Validate"
Option Explicit
Public isExtended As Boolean
Public isDemo As Boolean
Public isProtected As Boolean
Public HasError As Boolean
 
Public Function ValidateInput(ByVal vlngRow As Long, ByVal vlngCol As Long, ByVal vblnRequired As Boolean) As String
  Dim ws As Worksheet
  Dim strErr As String
  Dim strVal As String
  Dim strValTemp As String
  Dim strFieldType As String
  Dim strFieldSize As String
  Dim strFieldName As String
  Dim intFieldSize As Integer
  Dim OffSet As Integer
  Dim blnOK As Boolean
 
  'parameters
  Application.ScreenUpdating = False
  
  'Get values from main template
  If isExtended Then
    If isDemo Then
      strVal = wsExtendedDemo.Cells(vlngRow, vlngCol)
    Else
      strVal = wsExtended.Cells(vlngRow, vlngCol)
    End If
  Else
    If isDemo Then
      strVal = wsMinimalDemo.Cells(vlngRow, vlngCol)
    Else
      strVal = wsMinimal.Cells(vlngRow, vlngCol)
    End If
  End If
  
  'Get input type, size and name of field from settings sheet
  If isExtended Then
    OffSet = 53
    strFieldName = Trim(wsSet.Cells(vlngCol + OffSet, 1))
    strFieldType = Trim(wsSet.Cells(vlngCol + OffSet, 2))
    strFieldSize = Trim(wsSet.Cells(vlngCol + OffSet, 3))
  Else
    OffSet = 4
    strFieldName = Trim(wsSet.Cells(vlngCol + OffSet, 1))
    strFieldType = Trim(wsSet.Cells(vlngCol + OffSet, 2))
    strFieldSize = Trim(wsSet.Cells(vlngCol + OffSet, 3))
  End If
  
  'Check if fieldsize is numeric or text
  If IsNumeric(strFieldSize) Then
    intFieldSize = Int(strFieldSize)
  'Else
    'fix for textformatted number but not needed now its grabbed from settings page.
    'intFieldSize = Int(Trim(Left(strFieldSize, InStr(strFieldSize, "(") - 1)))
  End If
  
  If isExtended Then
    If isDemo Then
      If wsExtendedDemo.Cells(vlngRow, vlngCol).HasFormula = True Then
        strErr = wsSet.Cells(29, 9).Value
      End If
    Else
      If wsExtended.Cells(vlngRow, vlngCol).HasFormula = True Then
        strErr = wsSet.Cells(29, 9).Value
      End If
    End If
 
  Else
    If isDemo Then
      If wsMinimalDemo.Cells(vlngRow, vlngCol).HasFormula = True Then
        strErr = wsSet.Cells(29, 9).Value
      End If
    Else
      If wsMinimal.Cells(vlngRow, vlngCol).HasFormula = True Then
        strErr = wsSet.Cells(29, 9).Value
      End If
    End If
  End If
  
  'Other validations
  If strFieldName = "License Company No." And (strVal <> "") Then
    If InStr(UCase(strVal), "-CON-") = 0 Then
      strErr = wsSet.Cells(31, 9).Value
    End If
  End If

  'Validate if required field, from settings sheet
  If vblnRequired And Trim(strVal) = "" And LCase(wsSet.Cells(vlngCol + OffSet, 4)) = "x" Then
    strErr = wsSet.Cells(10, 9).Value
  Else
    Select Case UCase(strFieldType)
      'Integer, All integers must be > 0, needs to be considered if new integers added
      'Check if integer exceed field size
      Case "INTEGER"
        If strVal <> "" Then
          If Not IsNumeric(strVal) Then
            blnOK = False
            strErr = wsSet.Cells(14, 9).Value
          ElseIf strVal - Int(strVal) <> 0 Then
            blnOK = False
            strErr = wsSet.Cells(14, 9).Value
          ElseIf strVal < 0 Or strVal > 10 ^ intFieldSize Then
            blnOK = False
            strErr = wsSet.Cells(15, 9).Value & 10 ^ intFieldSize - 1 & "!"
          ElseIf strVal = 0 Then
            blnOK = False
            strErr = wsSet.Cells(15, 9).Value & 10 ^ intFieldSize - 1 & "!"
          Else
            blnOK = True
            strVal = Int(strVal)
          End If
        End If
                      
      'Check if text exceeds number of characters
      Case "TEXT"
        If strVal <> "" Then
          If Len(strVal) > intFieldSize Then
            strErr = wsSet.Cells(11, 9).Value & strFieldSize & "!"
           End If
        End If
        
      Case "BOOLEAN"
        If strVal <> "" Then
          If UCase(strVal) <> "YES" And UCase(strVal) <> "NO" Then
            strErr = wsSet.Cells(16, 9).Value
            blnOK = False
          End If
        End If
        
      Case "DATE"
        If strVal <> "" Then
          If Not IsDate(strVal) Then
            blnOK = False
            strErr = strVal + " " + wsSet.Cells(17, 9).Value
          End If
        End If
      
      'Check if number exceed field size
      Case "NUMBER"
        If strVal <> "" Then
          If Not IsNumeric(strVal) Then
            strErr = wsSet.Cells(12, 9).Value
          ElseIf strVal < 0 Or strVal >= 10 ^ intFieldSize Then
            strErr = wsSet.Cells(13, 9).Value & 10 ^ intFieldSize & "!"
          End If
        Else
          blnOK = True
        End If
    End Select
  End If
  
'special checks - these run on-the-fly depending on column numbers, but the check is also run when using the 'check' option
  If blnOK Then
    Application.EnableEvents = False
    
    'Remove characters that will break format + strip spaces (all columns)
    'see function RemoveFormat() further down for more info
    strValTemp = strVal

    'attempt CLEAN(string) function (strips non-printable characters)
    'strVal = Clean(strVal)
    strVal = RemoveFormat(strVal)
    
    'preserve formatting
    If Not (strVal = strValTemp) Then
      If isExtended Then
        If isDemo Then
          wsExtendedDemo.Cells(vlngRow, vlngCol) = strVal
        Else
          wsExtended.Cells(vlngRow, vlngCol) = strVal
        End If
      Else
        If isDemo Then
          wsMinimalDemo.Cells(vlngRow, vlngCol) = strVal
        Else
          wsMinimal.Cells(vlngRow, vlngCol) = strVal
        End If
      End If
    End If
    
    Application.EnableEvents = True
  End If

  If (strErr <> "") And Not HasError Then
    HasError = True
    wsErr.Shapes("wsErrOK").Visible = False
    wsErr.Shapes("wsErrWarning").Visible = True
    If isExtended Then
      If isDemo Then
        wsExtendedDemo.Shapes("wsErrWarning").Visible = True
      Else
        wsExtended.Shapes("wsErrWarning").Visible = True
      End If
    Else
      If isDemo Then
        wsMinimalDemo.Shapes("wsErrWarning").Visible = True
      Else
        wsMinimal.Shapes("wsErrWarning").Visible = True
      End If
    End If
  End If
  
  'return
  ValidateInput = strErr
   
End Function

Public Function ValidateAll() As Boolean
    Dim avntVal As Variant
    Dim strErr As String
    Dim lngRows As Long
    Dim lngCols As Long
    Dim R As Long
    Dim c As Long
    Dim i As Long
    Dim blnErr As Boolean
    Dim blnErrRow As Boolean
    
    'Init ErrorStatus
    HasError = False
    wsExtended.Shapes("wsErrWarning").Visible = False
    wsMinimal.Shapes("wsErrWarning").Visible = False
    wsExtendedDemo.Shapes("wsErrWarning").Visible = False
    wsMinimalDemo.Shapes("wsErrWarning").Visible = False
    wsErr.Shapes("wsErrOK").Visible = False
    wsErr.Shapes("wsErrWarning").Visible = False
 
    'try to catch runtime errors (caused by #N/A values etc.)
    On Error GoTo Errorhandler
    
    'force error, uncomment to test errorhandler (CTRL + BREAK to kill loop when running)
    'Err.Raise 5
    
    'parameters
    If isExtended Then
      If isDemo Then
        lngRows = wsExtendedDemo.Cells(8, 1).CurrentRegion.Rows.Count
        lngCols = wsExtendedDemo.Cells(6, 1).CurrentRegion.Columns.Count - 1
      Else
        lngRows = wsExtended.Cells(8, 1).CurrentRegion.Rows.Count
        lngCols = wsExtended.Cells(6, 1).CurrentRegion.Columns.Count - 1
      End If
    Else
      If isDemo Then
        lngRows = wsMinimalDemo.Cells(8, 1).CurrentRegion.Rows.Count
        lngCols = wsMinimalDemo.Cells(6, 1).CurrentRegion.Columns.Count - 1
      Else
        lngRows = wsMinimal.Cells(8, 1).CurrentRegion.Rows.Count
        lngCols = wsMinimal.Cells(6, 1).CurrentRegion.Columns.Count - 1
      End If
    End If
    
    'init log
    InitErrLog
    
    'check
    If lngRows > 0 Then
      ReDim avntVal(lngRows - 1, 1) As Variant
      
      'check all rows
      For R = 8 To lngRows + 7
        'parameters
        blnErrRow = False
        
        'check input
        For c = 1 To lngCols + 1
          strErr = ValidateInput(R, c, True)
          If strErr <> "" Then
            'if more than 1000 errors, break
            If GetErrLogRows >= 1000 Then
              'notify user
              MsgBox wsSet.Cells(21, 9).Value, vbCritical, wsSet.Cells(44, 9).Value
              
              'finish, show result
              wsErr.Activate
              ValidateAll = False
              Exit Function
            End If
              
            'log errors
            If Not blnErrRow Then
              blnErr = True
              blnErrRow = True
              
              If isExtended Then
                If isDemo Then
                  'NewErrLogHeading R, 3, wsExtendedDemo.Cells(R, 2), wsExtendedDemo.Cells(R, 3), True
                  NewErrLogHeading R, c, "Row " & R, "", True
                Else
                  'NewErrLogHeading R, 3, wsExtended.Cells(R, 2), wsExtended.Cells(R, 3), True
                  NewErrLogHeading R, c, "Row " & R, "", True
                End If
              Else
                If isDemo Then
                  'NewErrLogHeading R, 3, wsMinimalDemo.Cells(R, 2), wsMinimalDemo.Cells(R, 3)
                  NewErrLogHeading R, c, "Row " & R, "", True
                Else
                  'NewErrLogHeading R, 3, wsMinimal.Cells(R, 2), wsMinimal.Cells(R, 3)
                  NewErrLogHeading R, c, "Row " & R, "", True
                End If
              End If
            End If
                                                        
            If isExtended Then
              NewErrLogHeading R, c, "Column " & c, "", False
              If isDemo Then
                NewErrLogItem R, c, wsExtendedDemo.Cells(5, c), strErr
              Else
                NewErrLogItem R, c, wsExtended.Cells(5, c), strErr
              End If
            Else
              NewErrLogHeading R, c, "Column " & c, "", False
              If isDemo Then
                NewErrLogItem R, c, wsMinimalDemo.Cells(5, c), strErr
              Else
                NewErrLogItem R, c, wsMinimal.Cells(5, c), strErr
              End If
            End If
          End If
        Next c
      Next R
      
      'show finished errorlog
      If blnErr Then
        Activate_wsError
        'wsErr.Activate
        'errors were found, prompt
        ValidateAll = False
      Else
        ValidateAll = True
        If isDemo Then
          wsErr.Shapes("wsErrOK").Visible = False
        Else
          wsErr.Shapes("wsErrOK").Visible = True
        End If
      End If
    Else
      ValidateAll = True
    End If

Exit Function

Errorhandler:

'Show Message
MsgBox wsSet.Cells(45, 9).Value & vbCrLf & vbCrLf & "Debug Information: " & "Error#" & Str(Err.Number) & _
" - " & Err.Description, vbCritical, wsSet.Cells(44, 9).Value, Err.HelpFile, Err.HelpContext

Resume Next

End Function

Public Sub CheckInput()
  Dim blnOK As Boolean
  
  'validate
  blnOK = ValidateAll
  
  'show result
  If blnOK Then
    MsgBox wsSet.Cells(23, 9).Value, vbInformation, wsSet.Cells(44, 9).Value
  Else
    MsgBox wsSet.Cells(24, 9).Value, vbExclamation, wsSet.Cells(44, 9).Value
  End If
End Sub

Public Function RemoveFormat(ByVal vstrText As String) As String
  Dim intInStr As Integer
  
  'remove vbCrLf
  intInStr = InStr(vstrText, vbCrLf)
  Do While intInStr > 0
    vstrText = (Left(vstrText, intInStr - 1)) & " " & (Right(vstrText, Len(vstrText) - intInStr))
    intInStr = InStr(vstrText, vbCrLf)
  Loop
  
  'remove vbCr
  intInStr = InStr(vstrText, vbCr)
  Do While intInStr > 0
    vstrText = (Left(vstrText, intInStr - 1)) & " " & (Right(vstrText, Len(vstrText) - intInStr))
    intInStr = InStr(vstrText, vbCr)
  Loop
  
  'remove vbLf
  intInStr = InStr(vstrText, vbLf)
  Do While intInStr > 0
    vstrText = (Left(vstrText, intInStr - 1)) & " " & (Right(vstrText, Len(vstrText) - intInStr))
    intInStr = InStr(vstrText, vbLf)
  Loop
  
  'remove tabs
  intInStr = InStr(vstrText, vbTab)
  Do While intInStr > 0
    vstrText = (Left(vstrText, intInStr - 1)) & " " & (Right(vstrText, Len(vstrText) - intInStr))
    intInStr = InStr(vstrText, vbTab)
  Loop
  
  'remove "
  intInStr = InStr(vstrText, Chr(34))
  Do While intInStr > 0
    vstrText = (Left(vstrText, intInStr - 1)) & "" & (Right(vstrText, Len(vstrText) - intInStr))
    intInStr = InStr(vstrText, Chr(34))
  Loop
  
  'trim and strip spaces
  vstrText = Trim(vstrText)
  
  'return
  RemoveFormat = vstrText
End Function

Public Sub FindInput(ByVal Target As Range)
  Dim stringToFind As String
  Dim strRange As String
  Dim Found As Range
                  
  If isExtended Then
    If isDemo Then
      stringToFind = wsExtendedDemo.Cells(Target.Row, Target.Column)
    Else
      stringToFind = wsExtended.Cells(Target.Row, Target.Column)
    End If
  Else
    If isDemo Then
      stringToFind = wsMinimalDemo.Cells(Target.Row, Target.Column)
    Else
      stringToFind = wsMinimal.Cells(Target.Row, Target.Column)
    End If
  End If
  
  If Trim(stringToFind) = "" Then
    Application.EnableEvents = False
    
    ClearRangeContent
          
    Application.EnableEvents = True
    Exit Sub
  End If
      
  Set Found = wsValues.Cells.Find(What:=stringToFind, After:=ActiveCell, LookIn:=xlFormulas, _
      LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext _
      , MatchCase:=True)
  Application.EnableEvents = False
  If Not Found Is Nothing Then
    With Found
      If Not Len(.OffSet(rowOffset:=0, columnOffset:=1)) = 0 Then
        If isExtended Then
          If isDemo Then
            wsExtendedDemo.Cells(Target.Row, Target.Column + 1).Value = .OffSet(rowOffset:=0, columnOffset:=1).Value
          Else
            wsExtended.Cells(Target.Row, Target.Column + 1).Value = .OffSet(rowOffset:=0, columnOffset:=1).Value
          End If
        Else
          If isDemo Then
            wsMinimalDemo.Cells(Target.Row, Target.Column + 1).Value = .OffSet(rowOffset:=0, columnOffset:=1).Value
          Else
            wsMinimal.Cells(Target.Row, Target.Column + 1).Value = .OffSet(rowOffset:=0, columnOffset:=1).Value
          End If
        End If
      Else
        If isExtended Then
          If isDemo Then
            wsExtendedDemo.Cells(Target.Row, Target.Column + 1).Value = "Missing Value"
          Else
            wsExtended.Cells(Target.Row, Target.Column + 1).Value = "Missing Value"
          End If
        Else
          If isDemo Then
            wsMinimalDemo.Cells(Target.Row, Target.Column + 1).Value = "Missing Value"
          Else
            wsMinimal.Cells(Target.Row, Target.Column + 1).Value = "Missing Value"
          End If
        End If
      End If
    End With
  Else
    If isExtended Then
      If isDemo Then
        wsExtendedDemo.Cells(Target.Row, Target.Column + 1).Value = "N/A"
      Else
        wsExtended.Cells(Target.Row, Target.Column + 1).Value = "N/A"
      End If
    Else
      If isDemo Then
        wsMinimalDemo.Cells(Target.Row, Target.Column + 1).Value = "N/A"
      Else
        wsMinimal.Cells(Target.Row, Target.Column + 1).Value = "N/A"
      End If
    End If
  End If
  Application.EnableEvents = True
End Sub

Public Sub ClearRangeContent()
  Dim strRange As String
  
  strRange = Selection.Address(0, 1)
                           
  If isExtended Then
    If isDemo Then
      wsExtendedDemo.Range(strRange).OffSet(0, 1).ClearContents
    Else
      wsExtended.Range(strRange).OffSet(0, 1).ClearContents
    End If
  Else
    If isDemo Then
      wsMinimalDemo.Range(strRange).OffSet(0, 1).ClearContents
    Else
      wsMinimal.Range(strRange).OffSet(0, 1).ClearContents
    End If
  End If
End Sub
Attribute VB_Name = "M02_ErrLog"
Option Explicit

Private mlngRows As Long

Public Sub InitErrLog()
  'parameters
  mlngRows = 0
  
  'clear
  ClearWsErr
  
  'log date
  wsErr.Cells(7, 4) = wsSet.Cells(47, 9).Value & Now()
End Sub

Public Sub NewErrLogHeading(ByVal vlngRow As Long, ByVal vlngCol As Long, ByVal vstrSPN As String, ByVal vstrName As String, isTitle As Boolean)
  If isTitle Then
    mlngRows = mlngRows + 1
  End If
  mlngRows = mlngRows + 1
  wsErr.Cells(mlngRows + 8, 2) = vlngRow
  wsErr.Cells(mlngRows + 8, 3) = vlngCol
  wsErr.Cells(mlngRows + 8, 4) = vstrSPN & " " & vstrName
End Sub

Public Sub NewErrLogItem(ByVal vlngRow As Long, ByVal vlngCol As Long, ByVal vstrField As String, ByVal vstrMsg As String)
  wsErr.Cells(mlngRows + 8, 2) = vlngRow
  wsErr.Cells(mlngRows + 8, 3) = vlngCol
  wsErr.Cells(mlngRows + 8, 5) = vstrField
  wsErr.Cells(mlngRows + 8, 6) = vstrMsg
End Sub

Public Function GetErrLogRows() As Long
  GetErrLogRows = mlngRows
End Function

Attribute VB_Name = "M03_Clear"
Option Explicit

Public Sub ClearAll()
    Dim ws As Worksheet
    
    'clear
    ClearWsErr
    
    'move selection
    For Each ws In ThisWorkbook.Sheets
        ws.Activate
        ws.Cells(2, 1).Select
    Next ws
    
    'activate
    wsHome.Activate
End Sub

Public Sub ClearWsErr()
    ' error log parses only ~1000 errors currently
    wsErr.Range("B10:F1000").ClearContents
End Sub

Attribute VB_Name = "M04_Protect"
Option Explicit

Public Sub ProtectWorkbook()
    Dim ws As Worksheet
    Dim strPwd As String
    Dim strSheetNm As String
    Dim strCodeNm As String
    
    'password
    strPwd = "admin1.0"
    
    'Init Variable
    isProtected = True
    isDemo = False

    'parameters
    strSheetNm = ActiveSheet.Name
    strCodeNm = ActiveSheet.CodeName
    Application.ScreenUpdating = False
    
    For Each ws In ActiveWorkbook.Sheets
      Select Case ws.Name
        Case "Minimal", "Extended"
          ws.Protect Password:=strPwd, UserInterfaceOnly:=True, Contents:=False, AllowFormattingColumns:=True, AllowInsertingRows:=True, AllowSorting:=True, AllowFiltering:=True
        Case "Values", "Settings", "Error Message", "Minimal Example", "Extended Example"
          ws.Visible = xlSheetVeryHidden
          ws.Protect Password:=strPwd, UserInterfaceOnly:=True
        Case "Home"
          ws.Protect Password:=strPwd, UserInterfaceOnly:=True
          ActiveWindow.DisplayHeadings = False
        Case Else
          ActiveWindow.DisplayHeadings = False
          ws.Protect Password:=strPwd, UserInterfaceOnly:=True
      End Select
      ActiveWindow.DisplayWorkbookTabs = False
    Next ws
    
    'hide graphics
    wsExtended.Shapes("wsErrWarning").Visible = False
    wsMinimal.Shapes("wsErrWarning").Visible = False
    wsExtendedDemo.Shapes("wsErrWarning").Visible = False
    wsMinimalDemo.Shapes("wsErrWarning").Visible = False
        
    'restore
    ActiveWorkbook.Sheets("Home").Activate
End Sub

Public Sub UnprotectWorkbook()
    Dim ws As Worksheet
    Dim strPwd As String
    Dim strSheetNm As String
    
    'password
    strPwd = "admin1.0"
    
    'parameters
    strSheetNm = ActiveSheet.Name
    Application.ScreenUpdating = False
    
    'unprotect sheets
    For Each ws In ActiveWorkbook.Sheets
      If ws.Name = "Settings" Or ws.Name = "Home" Then
        ws.Visible = xlSheetVisible
      End If
      
      'unprotect
      ws.Unprotect Password:=strPwd
      
      'sheet settings
      With ActiveWindow
        .DisplayHeadings = True
        .DisplayWorkbookTabs = True
      End With
    Next ws
    
    isProtected = False
    
    'restore
    ActiveWorkbook.Sheets("Home").Activate
End Sub

Public Sub UnprotectWorkbookAdmin()
    Dim ws As Worksheet
    Dim strPwd As String
    Dim strSheetNm As String
    
    'password
    strPwd = "admin1.0"
    
    'parameters
    strSheetNm = ActiveSheet.Name
    Application.ScreenUpdating = False
    
    wsExtended.Shapes("wsErrWarning").Visible = True
    wsMinimal.Shapes("wsErrWarning").Visible = True
    wsExtendedDemo.Shapes("wsErrWarning").Visible = True
    wsMinimalDemo.Shapes("wsErrWarning").Visible = True
    
    'unprotect sheets
    For Each ws In ActiveWorkbook.Sheets
      ws.Visible = xlSheetVisible
      ws.Unprotect Password:=strPwd
            
      'settings
      With ActiveWindow
        .DisplayHeadings = True
        .DisplayWorkbookTabs = True
      End With
    Next ws
    
    isProtected = False
    
    'restore
    ActiveWorkbook.Sheets("Home").Activate
End Sub

Public Sub UnprotectWorkbookLogin()
  Dim strPwdXLS As String
  Dim strPwdAdmin As String
  Dim strMsg As String
  
  isProtected = False
  
  If ActiveWorkbook.Sheets("Settings").Visible = True Then
    isProtected = True
    ProtectWorkbook
    Exit Sub
  End If
    
  'public passwords
  strPwdXLS = "admin1.0"
  strPwdAdmin = "admin.swo"
  
  'password prompt
  strMsg = InputBox("Please enter password:", "Admin Login")
  If strMsg <> strPwdXLS And strMsg <> strPwdAdmin Then
    MsgBox "Access denied.", vbCritical, "Login failed!"
    Exit Sub
  End If
  
  'unlock
  Select Case strMsg
    Case strPwdXLS: UnprotectWorkbook
    Case strPwdAdmin: UnprotectWorkbookAdmin
  End Select
End Sub

Attribute VB_Name = "M05_Activate"

Sub Activate_wsMinimal()
  wsMinimal.Visible = xlSheetVisible
  wsMinimal.Activate
  isExtended = False
End Sub

Sub Activate_wsExtended()
  wsExtended.Visible = xlSheetVisible
  wsExtended.Activate
  isExtended = True
End Sub

Sub Activate_wsHome()
  isDemo = False
  wsHome.Visible = xlSheetVisible
  wsHome.Activate
End Sub

Sub Activate_wsHelp()
  wsHelp.Activate
End Sub

Sub Back()
  If isExtended Then
    If isDemo Then
      Activate_wsExtendedDemo
    Else
      Activate_wsExtended
    End If
  Else
    If isDemo Then
      Activate_wsMinimalDemo
    Else
      Activate_wsMinimal
    End If
  End If
End Sub
Public Sub ClearDA()
    DA.Range("C:E").ClearContents
End Sub
Sub Activate_wsError()
  wsErr.Visible = xlSheetVisible
  wsErr.Activate
End Sub

Sub Activate_wsMinimalDemo()
Attribute Activate_wsMinimalDemo.VB_Description = "Open the Minimal Example Template"
Attribute Activate_wsMinimalDemo.VB_ProcData.VB_Invoke_Func = " \n14"
  isDemo = True
  wsMinimalDemo.Visible = xlSheetVisible
  wsMinimalDemo.Activate
End Sub

Sub Activate_wsExtendedDemo()
Attribute Activate_wsExtendedDemo.VB_Description = "Open the Extended Example Template"
Attribute Activate_wsExtendedDemo.VB_ProcData.VB_Invoke_Func = " \n14"
  isDemo = True
  wsExtendedDemo.Visible = xlSheetVisible
  wsExtendedDemo.Activate
End Sub

Attribute VB_Name = "M06_GeneralMgt"
Sub wsAutoFit()
Attribute wsAutoFit.VB_ProcData.VB_Invoke_Func = " \n14"
' Autofit Columns
  Columns("B:AB").Select
  Columns("B:AB").EntireColumn.AutoFit
End Sub

Sub ClearTemplate()
  Dim ClearContent As Integer
  
  If isDemo Then
    MsgBox (wsSet.Cells(30, 9).Value)
    Exit Sub
  End If
  
  saveAnswer = MsgBox(wsSet.Cells(43, 9).Value, vbQuestion + vbYesNo)
    
  If saveAnswer = vbNo Then
    Exit Sub
  End If

  If isExtended Then
    wsExtended.Range("ExtendedData").ClearContents
  Else
    wsMinimal.Range("MinimalData").ClearContents
  End If
End Sub

Attribute VB_Name = "wsErr"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
  Dim lngRows As Long
  Dim lngRow As Long
  Dim lngCol As Long
  Dim lngDestRow As Long
  Dim lngDestCol As Long
  
  
  'parameters
  lngRow = Target.Row
  lngCol = Target.Column
  lngRows = wsErr.Cells(9, 2).CurrentRegion.Rows.Count
  
  If lngRow < 10 Then
    Cancel = True
    Exit Sub
  End If
  
  'check if valid data
  lngDestRow = wsErr.Cells(lngRow, 2)
  lngDestCol = wsErr.Cells(lngRow, 3)
  
  If lngDestRow = 0 Or lngDestCol = 0 Then
    Cancel = True
    Exit Sub
  End If
  
  'show affected row onClick
  If lngRows > 0 And lngRow >= 10 And lngRow <= 9 + lngRows Then
    If isExtended Then
      If isDemo Then
        wsExtendedDemo.Activate
        wsExtendedDemo.Cells(wsErr.Cells(lngRow, 2), wsErr.Cells(lngRow, 3)).Select
      Else
        wsExtended.Activate
        wsExtended.Cells(wsErr.Cells(lngRow, 2), wsErr.Cells(lngRow, 3)).Select
      End If
    Else
      If isDemo Then
        wsMinimalDemo.Activate
        wsMinimalDemo.Cells(wsErr.Cells(lngRow, 2), wsErr.Cells(lngRow, 3)).Select
      Else
        wsMinimal.Activate
        wsMinimal.Cells(wsErr.Cells(lngRow, 2), wsErr.Cells(lngRow, 3)).Select
      End If
    End If
  End If
End Sub
Attribute VB_Name = "wsExtended"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private mavntTarget As Variant

Private Sub Worksheet_Activate()
  isExtended = True
  isDemo = False
  ActiveWindow.DisplayHeadings = True
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
  Dim strErr As String
  Dim lngRow As Long
  Dim lngRows As Long
  Dim lngRowStart As Long
  Dim lngCol As Long
  Dim lngCols As Long
  Dim lngColStart As Long
  Dim lngColEnd As Long
  Dim blnProtected As Boolean
  Dim blnRestore As Boolean
  Dim strFieldType As String
  Dim strFieldName As String
      If Not isProtected Then
    Exit Sub
  End If
              
  blnProtected = True
  
  'validate lock
  If blnProtected Then
    'parameters - must be changed if total # of columns is changed
    lngRow = Target.Row
    lngRows = Target.Rows.Count
    lngRowStart = 8
    lngCol = Target.Column
    lngCols = Target.Columns.Count
    lngColStart = 1
    lngColEnd = 72
    wsErr.Shapes("wsErrOK").Visible = False
    Application.ScreenUpdating = False
    
    strFieldName = Trim(wsSet.Cells(lngCol + 53, 1))
    strFieldType = Trim(wsSet.Cells(lngCol + 53, 2))
    
    If Target.Rows.Count = 1 And Target.Columns.Count = 1 Then
      If (lngRow >= lngRowStart And lngCol >= lngColStart And lngCol <= lngColEnd) And (UCase(strFieldType) <> "PROTECTED") Then
          strErr = ValidateInput(lngRow, lngCol, False)
          
        'if error occoured
        If strErr <> "" Then
          'flag
          blnRestore = True
           
          'report
          MsgBox strErr, vbExclamation, wsSet.Cells(44, 9).Value
        End If
      Else
        'flag
        blnRestore = True
        
        'report
        strErr = wsSet.Cells(27, 9).Value
        MsgBox strErr, vbExclamation, wsSet.Cells(44, 9).Value
      End If
    Else
      'edit outside range
      If lngRow < lngRowStart Then
        'flag
        blnRestore = True
        
        'report
        strErr = wsSet.Cells(28, 9).Value
        MsgBox strErr, vbExclamation, wsSet.Cells(44, 9).Value
      End If
    End If
    
    'restore should remember value (if any)
    If blnRestore Then
      Application.EnableEvents = False
      Target.Value = mavntTarget
      Target.Select
      Application.EnableEvents = True
    End If
  End If
  
  If UCase(strFieldName) = UCase("Manufacturer") Or UCase(strFieldName) = UCase("Language") Or _
     UCase(strFieldName) = UCase("Currency") _
  Then
    Call FindInput(Target)
  End If
  
  'give back control of screen
  Application.ScreenUpdating = True
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
  Dim strSave As String
  Dim lngRow As Long
  Dim lngRows As Long
  Dim lngCol As Long
  Dim lngCols As Long
  Dim blnProtected As Boolean
  Dim blnSaved As Boolean
  
  'parameters
  blnProtected = True
  
  'save status (lock)
  If blnProtected Then
    'parameters
    blnSaved = ThisWorkbook.Saved
    lngRow = Target.Row
    lngRows = Target.Rows.Count
    lngCol = Target.Column
    lngCols = Target.Columns.Count
    
    'save value
    If lngRows < 5000 Then
      mavntTarget = Target.Value
    End If

    ThisWorkbook.Saved = blnSaved
  End If
End Sub



Attribute VB_Name = "wsExtendedDemo"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private mavntTarget As Variant

Private Sub Worksheet_Activate()
  isDemo = True
  isExtended = True
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
  Dim strErr As String
  Dim lngRow As Long
  Dim lngRows As Long
  Dim lngRowStart As Long
  Dim lngCol As Long
  Dim lngCols As Long
  Dim lngColStart As Long
  Dim lngColEnd As Long
  Dim blnProtected As Boolean
  Dim blnRestore As Boolean
  Dim strFieldType As String
  Dim strFieldName As String
    
  If Not isProtected Then
    Exit Sub
  End If
              
  blnProtected = True
  
  'validate lock
  If blnProtected Then
    'parameters - must be changed if total # of columns is changed
    lngRow = Target.Row
    lngRows = Target.Rows.Count
    lngRowStart = 8
    lngCol = Target.Column
    lngCols = Target.Columns.Count
    lngColStart = 2
    lngColEnd = 84
    wsErr.Shapes("wsErrOK").Visible = False
    Application.ScreenUpdating = False
    
    strFieldName = Trim(wsSet.Cells(lngCol + 53, 1))
    strFieldType = Trim(wsSet.Cells(lngCol + 53, 2))
            
    If Target.Rows.Count = 1 And Target.Columns.Count = 1 Then
      If (lngRow >= lngRowStart And lngCol >= lngColStart And lngCol <= lngColEnd) And (UCase(strFieldType) <> "PROTECTED") Then
          strErr = ValidateInput(lngRow, lngCol, False)
          
        'if error occoured
        If strErr <> "" Then
          'flag
          blnRestore = True
           
          'report
          MsgBox strErr, vbExclamation, wsSet.Cells(44, 9).Value
        End If
      Else
        'flag
        blnRestore = True
        
        'report
        strErr = wsSet.Cells(27, 9).Value
        MsgBox strErr, vbExclamation, wsSet.Cells(44, 9).Value
      End If
    Else
      'edit outside range
      If lngRow < lngRowStart Then
        'flag
        blnRestore = True
        
        'report
        strErr = wsSet.Cells(28, 9).Value
        MsgBox strErr, vbExclamation, wsSet.Cells(44, 9).Value
      End If
    End If
    
    'restore should remember value (if any)
    If blnRestore Then
      Application.EnableEvents = False
      Target.Value = mavntTarget
      Target.Select
      Application.EnableEvents = True
    End If
  End If
  
  If UCase(strFieldName) = UCase("Manufacturer") Or UCase(strFieldName) = UCase("Language") Or _
     UCase(strFieldName) = UCase("Currency") _
  Then
    Call FindInput(Target)
  End If
  
  'give back control of screen
  Application.ScreenUpdating = True
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
  Dim strSave As String
  Dim lngRow As Long
  Dim lngRows As Long
  Dim lngCol As Long
  Dim lngCols As Long
  Dim blnProtected As Boolean
  Dim blnSaved As Boolean
  
  'parameters
  blnProtected = True
  
  'save status (lock)
  If blnProtected Then
    'parameters
    blnSaved = ThisWorkbook.Saved
    lngRow = Target.Row
    lngRows = Target.Rows.Count
    lngCol = Target.Column
    lngCols = Target.Columns.Count
    
    'save value
    If lngRows < 5000 Then
      mavntTarget = Target.Value
    End If
    
    ThisWorkbook.Saved = blnSaved
  End If
End Sub





Attribute VB_Name = "wsHelp"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wsHome"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Activate()
  'Init Startpage
  If isProtected Then
    wsMinimal.Visible = xlSheetHidden
    wsExtended.Visible = xlSheetHidden
  End If
End Sub


Attribute VB_Name = "wsMinimal"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private mavntTarget As Variant

Private Sub Worksheet_Activate()
  isExtended = False
  isDemo = False
  ActiveWindow.DisplayHeadings = True
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
  Dim strErr As String
  Dim lngRow As Long
  Dim lngRows As Long
  Dim lngRowStart As Long
  Dim lngCol As Long
  Dim lngCols As Long
  Dim lngColStart As Long
  Dim lngColEnd As Long
  Dim blnProtected As Boolean
  Dim blnRestore As Boolean
  Dim strFieldType As String
  Dim strFieldName As String
    
  If Not isProtected Then
    Exit Sub
  End If
              
  blnProtected = True
  
  'validate lock
  If blnProtected Then
    'parameters - must be changed if total # of columns is changed
    lngRow = Target.Row
    lngRows = Target.Rows.Count
    lngRowStart = 8
    lngCol = Target.Column
    lngCols = Target.Columns.Count
    lngColStart = 1
    lngColEnd = 28
    wsErr.Shapes("wsErrOK").Visible = False
    Application.ScreenUpdating = False
    
    strFieldName = Trim(wsSet.Cells(lngCol + 4, 1))
    strFieldType = Trim(wsSet.Cells(lngCol + 4, 2))
            
    If Target.Rows.Count = 1 And Target.Columns.Count = 1 Then
      If (lngRow >= lngRowStart And lngCol >= lngColStart And lngCol <= lngColEnd) And (UCase(strFieldType) <> "PROTECTED") Then
          strErr = ValidateInput(lngRow, lngCol, False)
          
        'if error occoured
        If strErr <> "" Then
          'flag
          blnRestore = True
           
          'report
          MsgBox strErr, vbExclamation, wsSet.Cells(44, 9).Value
        End If
      Else
        'flag
        blnRestore = True
        
        'report
        strErr = wsSet.Cells(27, 9).Value
        MsgBox strErr, vbExclamation, wsSet.Cells(44, 9).Value
      End If
    Else
      'edit outside range
      If lngRow < lngRowStart Then
        'flag
        blnRestore = True
        
        'report
        strErr = wsSet.Cells(28, 9).Value
        MsgBox strErr, vbExclamation, wsSet.Cells(44, 9).Value
      End If
    End If
    
    'restore should remember value (if any)
    If blnRestore Then
      Application.EnableEvents = False
      Target.Value = mavntTarget
      Target.Select
      Application.EnableEvents = True
    End If
  End If
  
  If UCase(strFieldName) = UCase("Manufacturer") Or UCase(strFieldName) = UCase("Language") Or _
     UCase(strFieldName) = UCase("Currency") _
  Then
    Call FindInput(Target)
  End If
  
  'give back control of screen
  Application.ScreenUpdating = True
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

  Dim strSave As String
  Dim lngRow As Long
  Dim lngRows As Long
  Dim lngCol As Long
  Dim lngCols As Long
  Dim blnProtected As Boolean
  Dim blnSaved As Boolean
  
  'parameters
  blnProtected = True
  
  'save status (lock)
  If blnProtected Then
    'parameters
    blnSaved = ThisWorkbook.Saved
    lngRow = Target.Row
    lngRows = Target.Rows.Count
    lngCol = Target.Column
    lngCols = Target.Columns.Count
    
    'save value
    If lngRows < 5000 Then
      mavntTarget = Target.Value
    End If
        
    ThisWorkbook.Saved = blnSaved
  End If
End Sub

Attribute VB_Name = "wsMinimalDemo"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private mavntTarget As Variant

Private Sub Worksheet_Activate()
  isDemo = True
  isExtended = False
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
  Dim strErr As String
  Dim lngRow As Long
  Dim lngRows As Long
  Dim lngRowStart As Long
  Dim lngCol As Long
  Dim lngCols As Long
  Dim lngColStart As Long
  Dim lngColEnd As Long
  Dim blnProtected As Boolean
  Dim blnRestore As Boolean
  Dim strFieldType As String
  Dim strFieldName As String
    
  If Not isProtected Then
    Exit Sub
  End If
              
  blnProtected = True
  
  'validate lock
  If blnProtected Then
    'parameters - must be changed if total # of columns is changed
    lngRow = Target.Row
    lngRows = Target.Rows.Count
    lngRowStart = 8
    lngCol = Target.Column
    lngCols = Target.Columns.Count
    lngColStart = 1
    lngColEnd = 28
    wsErr.Shapes("wsErrOK").Visible = False
    Application.ScreenUpdating = False
    
    strFieldName = Trim(wsSet.Cells(lngCol + 4, 1))
    strFieldType = Trim(wsSet.Cells(lngCol + 4, 2))
            
    If Target.Rows.Count = 1 And Target.Columns.Count = 1 Then
      If (lngRow >= lngRowStart And lngCol >= lngColStart And lngCol <= lngColEnd) And (UCase(strFieldType) <> "PROTECTED") Then
          strErr = ValidateInput(lngRow, lngCol, False)
          
        'if error occoured
        If strErr <> "" Then
          'flag
          blnRestore = True
           
          'report
          MsgBox strErr, vbExclamation, wsSet.Cells(44, 9).Value
        End If
      Else
        'flag
        blnRestore = True
        
        'report
        strErr = wsSet.Cells(27, 9).Value
        MsgBox strErr, vbExclamation, wsSet.Cells(44, 9).Value
      End If
    Else
      'edit outside range
      If lngRow < lngRowStart Then
        'flag
        blnRestore = True
        
        'report
        strErr = wsSet.Cells(28, 9).Value
        MsgBox strErr, vbExclamation, wsSet.Cells(44, 9).Value
      End If
    End If
    
    'restore should remember value (if any)
    If blnRestore Then
      Application.EnableEvents = False
      Target.Value = mavntTarget
      Target.Select
      Application.EnableEvents = True
    End If
  End If
  
  If UCase(strFieldName) = UCase("Manufacturer") Or UCase(strFieldName) = UCase("Language") Or _
     UCase(strFieldName) = UCase("Currency") _
  Then
    Call FindInput(Target)
  End If
  
  'give back control of screen
  Application.ScreenUpdating = True
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

  Dim strSave As String
  Dim lngRow As Long
  Dim lngRows As Long
  Dim lngCol As Long
  Dim lngCols As Long
  Dim blnProtected As Boolean
  Dim blnSaved As Boolean
  
  'parameters
  blnProtected = True
  
  'save status (lock)
  If blnProtected Then
    'parameters
    blnSaved = ThisWorkbook.Saved
    lngRow = Target.Row
    lngRows = Target.Rows.Count
    lngCol = Target.Column
    lngCols = Target.Columns.Count
    
    'save value
    If lngRows < 5000 Then
      mavntTarget = Target.Value
    End If
        
    ThisWorkbook.Saved = blnSaved
  End If
End Sub

Attribute VB_Name = "wsSet"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wsValues"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
