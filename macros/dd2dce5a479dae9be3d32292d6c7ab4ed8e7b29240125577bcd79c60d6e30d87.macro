Attribute VB_Name = "Module1"
Option Explicit

Public Sub SacuvajIzvestaj()

Dim fs As New Scripting.FileSystemObject
Dim strImeFajla As String
Dim strPut As String
Dim strDelovodni As String

strPut = ActiveDocument.Path
strPut = Replace(strPut, "baza", "Izvestaji")
strDelovodni = Documents("Info.doc").Tables(1).Cell(3, 3).Range.Text
strDelovodni = stringChopRight(strDelovodni, 2)
strImeFajla = Format(strDelovodni, "00000.#") & ".doc"
strPut = strPut & "\" & strImeFajla
'
If Not fs.FileExists(strPut) Then
ZapamtiDelovodni
Documents("Izvestaj.doc").SaveAs FileName:=strPut
'Application.Quit
Documents(strImeFajla).Close
Else
MsgBox "Izve|fffd|taj sa delovodnim brojem: " & strDelovodni & " ve|fffd| postoji!", vbOKOnly, "Gre|fffd|ka"
End If
End Sub

Public Sub ZapamtiDelovodni()

Dim strTemp As String
Dim lngTemp As Long
Dim strSettings As String

lngTemp = Val(Documents("Info.doc").Tables(1).Cell(3, 3).Range.Text)
strTemp = Format(lngTemp)
strSettings = ActiveDocument.Path & "\settings.ini"

IniUpisiString strSettings, "osnovno", "delovodni", strTemp
End Sub



Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True
Attribute VB_Name = "basIniFiles"
Option Explicit

Private Declare Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
Private Declare Function WritePrivateProfileString Lib "kernel32" Alias "WritePrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpString As Any, ByVal lpFileName As String) As Long



Public Function IniProcitajString(strFajl As String, strSekcija As String, strKljuc As String) As String

Dim strProcitaniString As String
Dim strDifoltniString As String
Dim lngMaksimalnaDuzina As Long
Dim lngProcitanaDuzina As Long

lngMaksimalnaDuzina = 500
strProcitaniString = Space(lngMaksimalnaDuzina)
strDifoltniString = "nemastringa"

lngProcitanaDuzina = GetPrivateProfileString(strSekcija, strKljuc, strDifoltniString, strProcitaniString, lngMaksimalnaDuzina, strFajl)
If InStr(strProcitaniString, strDifoltniString) Then
IniProcitajString = ""
Else
IniProcitajString = Left(strProcitaniString, lngProcitanaDuzina)
End If
End Function

Public Function IniUpisiString(strFajl As String, strSekcija As String, strKljuc As String, strString As String) As Boolean

IniUpisiString = WritePrivateProfileString(strSekcija, strKljuc, strString, strFajl)
End Function

Attribute VB_Name = "basStrings"
Option Explicit
Option Compare Text

Public Const gblnTest As Boolean = False
Public Const glngTest As Long = 15000

Public Function stringChopLeft(strString As String, lngChop As Long) As String
If strString = "" Then
stringChopLeft = ""
Else
If lngChop < Len(strString) Then
stringChopLeft = Right(strString, Len(strString) - lngChop)
Else
stringChopLeft = ""
End If
End If
End Function

Public Function stringChopRight(strString As String, lngChop As Long) As String
If strString = "" Then
stringChopRight = ""
Else
stringChopRight = Left(strString, Len(strString) - lngChop)
End If
End Function

Public Function StringSegment(strString As String, strDelimiter As String, intIndex As Integer) As String

Dim arSegments() As String
Dim intSectionCount As Integer

arSegments = Split(strString, strDelimiter)
intSectionCount = UBound(arSegments) + 1
If (intIndex = 0 Or Abs(intIndex) > intSectionCount) Then StringSegment = "": Exit Function

If intIndex < 0 Then
StringSegment = arSegments(intSectionCount + intIndex) ' sabiramo indeks jer je negativan
Else
StringSegment = arSegments(intIndex - 1)
End If
End Function

Public Function StringSegmentCount(strString As String, strDelimiter As String) As Integer

Dim arSegments() As String
Dim intSectionCount As Integer

arSegments = Split(strString, strDelimiter)
intSectionCount = UBound(arSegments) + 1

StringSegmentCount = intSectionCount

End Function

Public Function StringSort(values() As String, _
                 ByVal min As Long, _
                 ByVal max As Long)
Dim i As Long
Dim j As Long
Dim smallest_value As String
Dim smallest_j As Long

For i = min To max - 1
   ' Find the smallest remaining value in entries
   ' i through num.
   smallest_value = values(i)
   smallest_j = i

   For j = i + 1 To max
     ' See if values(j) is smaller.
     If values(j) < smallest_value Then
       ' Save the new smallest value.
       smallest_value = values(j)
       smallest_j = j
     End If
   Next j

   If smallest_j <> i Then
     ' Swap items i and smallest_j.
     values(smallest_j) = values(i)
     values(i) = smallest_value
   End If

Next i

End Function




Public Function StringoviJednaki(s1 As String, s2 As String) As Boolean

If LCase(s1) = LCase(s2) Then
StringoviJednaki = True
Else
StringoviJednaki = False
End If
End Function

Public Sub SortirajStringove(arstrLista() As String, L As Long, r As Long)
Dim i As Long ' counter
Dim j As Long ' counter
Dim BarVal1         ' temporary bar value
Dim BarVal2         ' temporary bar value

i = L
j = r
BarVal1 = arstrLista((L + r) / 2)

Do While (i <= j)
'DoEvents
Do While (arstrLista(i) < BarVal1 And i < r)
i = i + 1
Loop

Do While (BarVal1 < arstrLista(j) And j > L)
j = j - 1
Loop

If (i <= j) Then
BarVal2 = arstrLista(i)
arstrLista(i) = arstrLista(j)
arstrLista(j) = BarVal2
i = i + 1
j = j - 1
End If
Loop

If (L < j) Then SortirajStringove arstrLista, L, j
If (i < r) Then SortirajStringove arstrLista, i, r
End Sub



INQUEST-PP=macro
