Attribute VB_Name = "CommMdlA"
'=======================================================
' SSS_STAT Ver3.6 : |fffd||fffd||fffd||283||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd|
'
' 2007.2.7 LSQ (mdf from other seihins)
'=======================================================
Option Explicit

Public Const GBKNAME_VBACM As String = "VBACOM.xla"
Public Const GBKNAME_VBA07 As String = "VBACOM.xla"

'2007.02.07 Copied from commMdl in SRKMAIN.xls
'07.2.7 mdf
Function getExcelVerNo() As Integer
    getExcelVerNo = CInt(Application.Run(GBKNAME_VBACM & "!getExcelVerNo"))
End Function
'
'
'|fffd|}|fffd||308||292|u|fffd||183|T|fffd|C|fffd|Y
'
Sub Comm_setChartPosSize(ByVal chartObj As ChartObject, ByVal outGrp As Range, _
    Optional ByVal rowNum As Integer = 0, Optional ByVal colNum As Integer = 0)
    Call Application.Run(GBKNAME_VBACM & "!setChartPosSize", _
                         chartObj, outGrp, rowNum, colNum)
End Sub
'
'cut data linkage
'
'07.1.31 LSQ
Sub Comm_CutDataLink(ByVal bkObj As Workbook, ByVal bkName As String)
    Dim verNo As Integer
    verNo = getExcelVerNo()
    
    If verNo >= 12 Then
        Application.Run GBKNAME_VBA07 & "!Vba07_cutLink", bkObj, bkName
    End If
End Sub
'
Sub Comm_SetDataLabel(ByVal ser As Series, ByVal namerge As Range, _
                 Optional ByVal fontsize As Integer = 10, _
                 Optional ByVal charcnt As Integer = 32)
    Call Application.Run(GBKNAME_VBACM & "!SetDataLabel", _
                         ser, namerge, fontsize, charcnt)
End Sub

Function Comm_SetDict(ByVal strpara As String) As Object
    Set Comm_SetDict = Application.Run(GBKNAME_VBACM & "!SetDict", strpara)
End Function

Function Comm_GetTmplGrp(ByVal outRge As Range, ByVal strBkName As String, _
                    ByVal strShtName As String, ByVal strGrpName As String) As Chart
    Set Comm_GetTmplGrp = Application.Run(GBKNAME_VBACM & "!GetTmplGrp", outRge, _
                     strBkName, strShtName, strGrpName)
End Function

Function Comm_toXlRCstr(inputFormula As String) As String
    Comm_toXlRCstr = Application.Run(GBKNAME_VBACM & "!toXlRCstr", inputFormula)
End Function

Function Comm_toXlA1str(inputFormula As String) As String
    Comm_toXlA1str = Application.Run(GBKNAME_VBACM & "!toXlA1str", inputFormula)
End Function

Sub Comm_adjustMinMax(ByRef minV As Double, ByRef maxV As Double)
    Call Application.Run(GBKNAME_VBACM & "!adjustMinMax", minV, maxV)
End Sub

Sub Comm_MatchWorkbookFont()
    Call Application.Run(GBKNAME_VBACM & "!MatchWorkbookFont")
End Sub

Sub Comm_SetTicks(ByVal cht As Chart, ByVal strTicks As String)
    Call Application.Run(GBKNAME_VBACM & "!SetTicks", cht, strTicks)
End Sub

Sub Comm_DrawCEGGrp(ByVal strWrkSht As String, ByVal strGrpOut As String, _
                ByVal strGrpData As String, ByVal strpara As String)
    Call Application.Run(GBKNAME_VBACM & "!DrawCEGGrp", strWrkSht, strGrpOut, strGrpData, "GrpType=1&" & strpara)
End Sub

Sub Comm_DrawObiGrp(ByVal strWrkSht As String, ByVal strGrpOut As String, _
                ByVal strGrpData As String, ByVal strpara As String)
    Call Application.Run(GBKNAME_VBACM & "!DrawObiGrp", strWrkSht, strGrpOut, strGrpData, strpara)
End Sub

'2007.02.13 copyied from commMdl in SRKMAIN.xls
'07.2.7 LSQ add
Function WorkBookOpen_SetOpenNum(ByVal xlaFName As String) As Workbook
    Dim bkObj As Workbook
    
    Set bkObj = WorkBookOpen(xlaFName)
    If Not (bkObj Is Nothing) Then
        Application.Run (xlaFName & "!CallNum_AddOne")
    End If
    
    Set WorkBookOpen_SetOpenNum = bkObj
End Function

'2007.02.13 copyied from commMdl in SRKMAIN.xls
'07.2.7 LSQ add
Sub WorkBookClose_OnOpenNum(ByVal xlaFName As String)
    Dim cnt As Integer
    cnt = Application.Run(xlaFName & "!CallNum_DecOne")
    If cnt <= 0 Then
        Call WorkBookClose(xlaFName)
    End If
End Sub
'=== EOF ===
Attribute VB_Name = "MdlDebug"
'=======================================================
' Module for Debug
'
' 2011.8.19 LSQ
'=======================================================

Option Private Module
Option Explicit

Dim SbkTemplate As Workbook

Sub SbkInit()
    Set SbkTemplate = Workbooks.Add
    
    ThisWorkbook.Worksheets.Copy After:=SbkTemplate.Worksheets(1)
    
    Windows(SbkTemplate.Name).Visible = False
End Sub

Function SbkThis() As Workbook
    If SbkTemplate Is Nothing Then
        Set SbkThis = ThisWorkbook
    Else
        Set SbkThis = SbkTemplate
    End If
End Function

'=== EOF ===
Attribute VB_Name = "MdlForecast"
'=======================================================
' SR1 for iSTAT_YSK Ver1.0
'
' 2011.11 WZH
'=======================================================

Option Private Module
Option Explicit

Type Srk1Para
    RgeInfo As String * 256
    OutSheet As String * 256
    RgeObj As String * 256
    RgeVar As String * 256
    RgeVarKind As String * 256
    RgeClass As String * 256
    RgeSmpName As String * 256
    RgeCateName As String * 256
    RgeYskData As String * 256          'only used for proceeding data
    RgeYskName As String * 256          'only used for proceeding data
    bExcept As Long
    bExcept_n0 As Long
    bYsk As Long                        'only used for proceeding data
    bExtraInfo As Long
    nVarSelMethod As Long
    bSmpName As Long
    bNum2Class As Long
    bCateName As Long
    bPointGrp As Long
End Type

Type Srk1Para_Extra
    bTimeLag As Long
    RgeTimeLag As String * 256          'only used for procedding data
    nTimeStyle As Long
    nYear As Long
    nMonth As Long
    nTrend As Long
    bHasVarData As Boolean
End Type

Private Const X_MAX As Integer = 30
Private Const CATE_MAX As Integer = 200

Private VbaGrp() As VBAGRAPH
Private m_varselect As String
Private m_bvarselected As Boolean
Private sr1tbl As Srk1Para
Private sr1Extra As Srk1Para_Extra

#If Win64 Then
Private Declare PtrSafe Function sr1_dlg Lib "MIST_A_64.dll" (ByVal nId As Long, sr1tbl As Srk1Para) As Integer
#Else
Private Declare Function sr1_dlg Lib "MIST_A.dll" (ByVal nId As Long, sr1tbl As Srk1Para) As Integer
#End If

Private Function CountUniqueValues(InputRange As Range) As Long
    Dim cl As Range, UniqueValues As New Collection
    Dim rowNum As Long, colNum As Long
    Dim i As Long, j As Long
    Dim vdata As Variant
    On Error Resume Next
    rowNum = InputRange.Rows.Count
    colNum = InputRange.Columns.Count
    vdata = InputRange.Value
    For i = 1 To rowNum
        For j = 1 To colNum
            UniqueValues.Add vdata(i, j), CStr(vdata(i, j))
        Next j
    Next i
    On Error GoTo 0
    CountUniqueValues = UniqueValues.Count
End Function

'RgeX : |fffd|K|fffd||fffd||fffd|l|fffd|w|fffd||fffd||348||fffd| (formatted)
'RgeCateNum : Item category number (0=numeric item)
'outBgn : category name output begin cell
'
'11.8.21 LSQ
Private Sub nu_makeCateName_forNumItem(ByVal ItemNum As Integer, ByVal RgeX As Range, ByVal RgeCateNum As Range, ByVal outBgn As Range)
    Dim i As Integer, j As Integer, cateN As Integer
    Dim x1 As Double, x2 As Double, dxHalf As Double
    
    If RgeX Is Nothing Or ItemNum < 1 Then Exit Sub    'no number item categorized
    
    For i = 1 To ItemNum
        cateN = RgeCateNum(1, i)
        If cateN = 0 Then
            cateN = RgeX(1, i)
            If cateN < 1 Then GoTo nextItem 'in fact = ERROR
            
            x1 = RgeX(2, i)
            x2 = RgeX(3, i)
            dxHalf = (x2 - x1) / 2
            
            outBgn(1, i) = "|fffd|`" & (x1 + dxHalf)
            For j = 2 To cateN - 1
                outBgn(j, i) = (x1 + dxHalf) & "|fffd|`" & (x2 + dxHalf)
                'next
                x1 = x1 + 2 * dxHalf
                x2 = x2 + 2 * dxHalf
            Next j
            outBgn(cateN, i) = (x2 - dxHalf) & "|fffd|`"
        End If
nextItem:
    Next i
        
End Sub

'2011.12.04 rewritten
Private Sub makeCateName_forNumItem(ByVal ItemNum As Integer, ByVal RgeX As Range, ByVal RgeCateNum As Range, ByVal outBgn As Range)
    Dim i As Integer, j As Integer, cateN As Integer
    Dim x1 As Double, x2 As Double, dxHalf As Double
    
    If RgeX Is Nothing Or ItemNum < 1 Then Exit Sub    'no number item categorized
    
    For i = 3 To ItemNum                            'skip T and S
        cateN = RgeCateNum(1, i)
        If cateN = 0 Then
            cateN = RgeX(1, i)
            If cateN < 1 Then GoTo nextItem 'in fact = ERROR
            
            x1 = RgeX(2, i)
            x2 = RgeX(3, i)
            
            outBgn(1, i) = "|fffd|`" & x1
            For j = 2 To cateN
                outBgn(j, i) = x1 & "|fffd|`" & x2
                'next
                x1 = RgeX(j + 1, i)
                x2 = RgeX(j + 2, i)
            Next j
        End If
nextItem:
    Next i
        
End Sub
'end rewritten

Private Function next_Year_Month(ByVal nTimeStyle As Long, ByRef year As Long, ByRef month As Long) As Boolean
    next_Year_Month = False
    If nTimeStyle = 1 Then
        month = month + 1
    ElseIf nTimeStyle = 2 Then
        month = month + 3
    ElseIf nTimeStyle = 3 Then
        month = month + 12
    ElseIf nTimeStyle = 4 Then
        month = month + 1
    End If
    If month > 12 And nTimeStyle < 4 Or nTimeStyle = 3 Then
        month = month - 12
        year = year + 1
        next_Year_Month = True
    End If
End Function

Private Function previous_Year_Month(ByVal nTimeStyle As Long, ByRef year As Long, ByRef month As Long) As Boolean
    previous_Year_Month = False
    If nTimeStyle = 1 Then
        month = month - 1
    ElseIf nTimeStyle = 2 Then
        month = month - 3
    ElseIf nTimeStyle = 3 Then
        month = month - 12
    ElseIf nTimeStyle = 4 Then
        month = month - 1
    End If
    If month < 1 And nTimeStyle < 4 Or nTimeStyle = 3 Then
        month = month + 12
        year = year - 1
        previous_Year_Month = True
    End If
End Function

Private Function dummyVarData(ByRef strmsg As String) As Boolean
    Dim i As Long, j As Long, k As Long
    Dim RgeObj As Range, RgeVar As Range, rge As Range
    Dim RgeClass As Range, RgeVarKind As Range
    Dim RgeSmpName As Range, RgeCateName As Range
    Dim RgeYskData As Range, RgeYskName As Range
    Dim RgeTimeLag As Range
    Dim tmpSht As Worksheet
    Dim CateNum As Long, smpNum As Long, ItemNum As Long, colNum As Long
    Dim forcNum As Long
    Dim sr1VarSel As Variant
    Dim tmpstr As String
    Dim bHasDataVar As Boolean
    dummyVarData = False
    On Error Resume Next
    
    Set RgeObj = Range(sr1tbl.RgeObj)
    Set RgeVar = Range(sr1tbl.RgeVar)
    If RgeVar Is Nothing Then
        smpNum = RgeObj.Rows.Count
        ItemNum = 0
    Else
        smpNum = RgeVar.Rows.Count
        ItemNum = RgeVar.Columns.Count
    End If
    colNum = ItemNum
    bHasDataVar = IIf(ItemNum = 0, False, True)
    sr1Extra.bHasVarData = bHasDataVar
    Set tmpSht = SbkThis.Sheets("Temp")
    tmpSht.Cells.ClearContents
    
    If ItemNum > 0 Then
        If m_varselect <> "0" Then
            sr1VarSel = Split(m_varselect, ",")
        Else
            ReDim sr1VarSel(0 To ItemNum) As Long
            sr1VarSel(0) = ItemNum
            For i = 1 To ItemNum
                sr1VarSel(i) = i - 1
            Next i
        End If
        ItemNum = sr1VarSel(0)
    End If
    
    Set rge = tmpSht.Range("B1")
    If sr1Extra.nTimeStyle = 1 Then
        forcNum = 24
    ElseIf sr1Extra.nTimeStyle = 2 Then
        forcNum = 8
    Else
        forcNum = 40
    End If
    rge = "T"
    rge(1, 2) = "S"
    For i = 2 To smpNum + forcNum
        rge(i, 1) = Rnd()
        rge(i, 2) = Rnd()
    Next i
    For i = 1 To ItemNum
        RgeVar.Columns(sr1VarSel(i) + 1).Copy 'rge(1, 2 + i)
        rge(1, 2 + i).PasteSpecial xlPasteValues
    Next i
    ItemNum = ItemNum + 2
    sr1tbl.RgeVar = tmpSht.Name & "!" & rge.Resize(smpNum, ItemNum).Address & vbNullChar
    
    If sr1tbl.bYsk = 1 Then
        If bHasDataVar Then
            Set RgeYskData = Range(sr1tbl.RgeYskData)
            If Not RgeYskData Is Nothing Then
                If RgeYskData.Columns.Count <> colNum Then
                    strmsg = "|fffd||53683|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                    Exit Function
                End If
                
                For i = 1 To RgeYskData.Rows.Count
                    rge(smpNum + i, 1) = Rnd()
                    rge(smpNum + i, 2) = Rnd()
                Next i
                'RgeYskData.Copy 'rge(smpNum + 1, 3)
                'rge(smpNum + 1, 3).PasteSpecial xlPasteValues
                For i = 1 To sr1VarSel(0)
                    RgeYskData.Columns(sr1VarSel(i) + 1).Copy
                    rge(smpNum + 1, 2 + i).PasteSpecial xlPasteValues
                Next i
                sr1tbl.RgeYskData = tmpSht.Name & "!" & rge(smpNum + 1, 1).Resize(RgeYskData.Rows.Count, ItemNum).Address & vbNullChar
            End If
        Else
            sr1tbl.bYsk = False
        End If
    End If
    
    Set rge = rge(1, ItemNum + 1)
    Set RgeVarKind = Range(sr1tbl.RgeVarKind)
    If RgeVarKind Is Nothing Then
        rge(1, 1) = 0
        rge(1, 2) = 0
        For i = 1 To ItemNum - 2
            rge(1, i + 2) = 0
        Next i
        sr1tbl.RgeVarKind = tmpSht.Name & "!" & rge.Resize(1, ItemNum).Address & vbNullChar
    Else
        If RgeVarKind.Columns.Count <> colNum Then
            strmsg = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            Exit Function
        End If
        rge(1, 1) = 0
        rge(1, 2) = 0
        'RgeVarKind.Copy 'rge(1, 3)
        'rge(1, 3).PasteSpecial xlPasteValues
        For i = 1 To sr1VarSel(0)
            RgeVarKind.Columns(sr1VarSel(i) + 1).Copy
            rge(1, 2 + i).PasteSpecial xlPasteValues
        Next i
        sr1tbl.RgeVarKind = tmpSht.Name & "!" & rge.Resize(RgeVarKind.Rows.Count, ItemNum).Address & vbNullChar
    End If
    Set rge = rge(1, ItemNum + 1)
    If sr1tbl.bCateName Then
        If bHasDataVar Then
            Set RgeCateName = Range(sr1tbl.RgeCateName)
            If Not RgeCateName Is Nothing Then
                If RgeCateName.Columns.Count <> colNum Then
                    strmsg = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                    Exit Function
                End If
                'RgeCateName.Copy 'rge(1, 3)
                'rge(1, 3).PasteSpecial xlPasteValues
                For i = 1 To sr1VarSel(0)
                    RgeCateName.Columns(sr1VarSel(i) + 1).Copy
                    rge(1, 2 + i).PasteSpecial xlPasteValues
                Next i
                sr1tbl.RgeCateName = tmpSht.Name & "!" & rge.Resize(RgeCateName.Rows.Count, ItemNum).Address & vbNullChar
            End If
        Else
            sr1tbl.bCateName = False
        End If
    End If
    Set rge = rge(1, ItemNum + 1)
    If sr1tbl.bNum2Class Then
        If bHasDataVar Then
            rge(1, 1) = 1
            rge(1, 2) = 1
            rge(2, 1) = ""
            rge(2, 2) = ""
            Set RgeClass = Range(sr1tbl.RgeClass)
            If Not RgeClass Is Nothing Then
                If RgeClass.Columns.Count <> colNum Then
                    strmsg = "|fffd||fffd||fffd||28d||fffd||fffd||682||315||fffd||fffd||789||fffd||fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                    Exit Function
                End If
                'RgeClass.Copy 'rge(1, 3)
                'rge(1, 3).PasteSpecial xlPasteValues
                For i = 1 To sr1VarSel(0)
                    RgeClass.Columns(sr1VarSel(i) + 1).Copy
                    rge(1, 2 + i).PasteSpecial xlPasteValues
                Next i
                sr1tbl.RgeClass = tmpSht.Name & "!" & rge.Resize(RgeClass.Rows.Count, ItemNum).Address & vbNullChar
            End If
        Else
            sr1tbl.bNum2Class = False
        End If
    End If
    Set rge = rge(1, ItemNum + 1)
    If sr1Extra.bTimeLag Then
        If bHasDataVar Then
            Set RgeTimeLag = Range(sr1Extra.RgeTimeLag)
            If Not RgeTimeLag Is Nothing Then
                If RgeTimeLag.Columns.Count <> colNum Then
                    strmsg = "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                    Exit Function
                End If
                'RgeTimeLag.Copy 'rge(1, 3)
                'rge(1, 3).PasteSpecial xlPasteValues
                For i = 1 To sr1VarSel(0)
                    RgeTimeLag.Columns(sr1VarSel(i) + 1).Copy
                    rge(1, 2 + i).PasteSpecial xlPasteValues
                Next i
                rge(1, 1) = ""
                rge(1, 2) = ""
                sr1Extra.RgeTimeLag = tmpSht.Name & "!" & rge.Resize(RgeTimeLag.Rows.Count, ItemNum).Address & vbNullChar
            End If
        Else
            sr1Extra.bTimeLag = False
        End If
    End If
    'If m_varselect <> "0" Then
    '    sr1VarSel = Split(m_varselect, ",")
    '    m_varselect = CStr(CLng(sr1VarSel(0)) + 2)
    '    m_varselect = m_varselect & ",0,1"
    '    For i = 1 To sr1VarSel(0)
    '        m_varselect = m_varselect & "," & (sr1VarSel(i) + 2)
    '    Next i
    'End If
    m_varselect = "0"
    dummyVarData = True
    On Error GoTo 0
End Function

Private Function handleSr1Data() As Worksheet
    Dim i As Long, j As Long, k As Long
    Dim RgeObj As Range, RgeVar As Range, rge As Range
    Dim RgeClass As Range, RgeVarKind As Range
    Dim RgeSmpName As Range, RgeCateName As Range
    Dim RgeYskData As Range, RgeYskName As Range
    Dim RgeTimeLag As Range
    Dim tmpSht As Worksheet, tmpSht2 As Worksheet
    Dim sr1obj As Variant, sr1var As Variant, sr1cate As Variant, varkind As Variant
    Dim sr1VarSel As Variant
    Dim varTimeLag As Variant
    Dim cateNameRow As Long, varKindRow As Long, classRow As Long
    Dim CateNum As Long, smpNum As Long, ItemNum As Long, objSmpNum As Long
    Dim forcNum As Long
    Dim tmpv As Long, totalCateNum As Long
    Dim msgStr As String
    Dim bgnCelCateNm As Range
    Dim nYear As Long, nMonth As Long
    Dim strTime As String
    Dim bSameTimeLag As Boolean, timelagoff As Long, nBkYear As Long, nBkMonth As Long
    
    On Error Resume Next
    Set tmpSht = SbkThis.Sheets("Temp")
    If Not dummyVarData(msgStr) Then
        MsgBox msgStr
        Set handleSr1Data = Nothing
        Exit Function
    End If
    Set RgeObj = Range(sr1tbl.RgeObj)
    Set RgeVar = tmpSht.Range(sr1tbl.RgeVar)
    Set RgeVarKind = tmpSht.Range(sr1tbl.RgeVarKind)
    If sr1tbl.bNum2Class = 1 Then
        Set RgeClass = tmpSht.Range(sr1tbl.RgeClass)
    End If
    If sr1tbl.bCateName = 1 Then
        Set RgeCateName = tmpSht.Range(sr1tbl.RgeCateName)
    End If
    If sr1tbl.bYsk = 1 Then
        Set RgeYskData = tmpSht.Range(sr1tbl.RgeYskData)
    End If
    If sr1Extra.bTimeLag = 1 Then
        Set RgeTimeLag = tmpSht.Range(sr1Extra.RgeTimeLag)
    End If
    cateNameRow = RgeObj.Rows.Count
    If cateNameRow < RgeVar.Rows.Count Then
        cateNameRow = RgeVar.Rows.Count
    End If
    If cateNameRow < RgeSmpName.Rows.Count Then
        cateNameRow = RgeSmpName.Rows.Count
    End If
    cateNameRow = cateNameRow + 1000 + 6
    sr1obj = RgeObj.Value
    sr1var = RgeVar.Value
    varkind = RgeVarKind.Value
    CateNum = Application.WorksheetFunction.max(varkind)
    If CateNum = 0 Then CateNum = 1
    classRow = cateNameRow + CateNum + 2
    
    ItemNum = RgeVar.Columns.Count
    smpNum = RgeObj.Rows.Count
    If smpNum <> RgeVar.Rows.Count Then
        MsgBox "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        Set handleSr1Data = Nothing
        Exit Function
    End If
    If ItemNum > X_MAX Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        Set handleSr1Data = Nothing
        Exit Function
    End If
    If sr1Extra.bTimeLag = 1 Then
        If RgeTimeLag Is Nothing Then
            MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            Set handleSr1Data = Nothing
            Exit Function
        End If
        If RgeTimeLag.Columns.Count <> ItemNum Then
            MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            Set handleSr1Data = Nothing
            Exit Function
        End If
        varTimeLag = RgeTimeLag.Value
        For i = 1 To ItemNum
            If varkind(1, i) = 0 Then
                j = val(varTimeLag(1, i))
                If Abs(j) >= smpNum Then
                    MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                    Set handleSr1Data = Nothing
                    Exit Function
                Else
                    varTimeLag(1, i) = j
                End If
            Else
            #If 0 Then
                If Not IsEmpty(RgeTimeLag(1, i)) Then
                    MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                    Set handleSr1Data = Nothing
                    Exit Function
                Else
                    varTimeLag(1, i) = 0
                End If
            #Else
                j = val(varTimeLag(1, i))
                If Abs(j) >= smpNum Then
                    MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                    Set handleSr1Data = Nothing
                    Exit Function
                Else
                    varTimeLag(1, i) = j
                End If
            #End If
            End If
        Next i
    End If
    
    If sr1Extra.nTimeStyle <> 4 Then
        If sr1Extra.nYear < 1900 Or sr1Extra.nYear > 2100 Then
            MsgBox "Invalid year!"
            Set handleSr1Data = Nothing
            Exit Function
        End If
        If sr1Extra.nTimeStyle <> 3 Then
            If sr1Extra.nMonth < 1 Or sr1Extra.nMonth > 12 Then
                MsgBox "Invalid month!"
                Set handleSr1Data = Nothing
                Exit Function
            End If
        End If
    End If
    
    Set rge = RgeVar(2, 1).Resize(smpNum - 1, ItemNum)
    For i = 1 To ItemNum
        If varkind(1, i) > 0 Then
            If Application.WorksheetFunction.max(rge.Columns(i)) <> varkind(1, i) Then
                MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                Set handleSr1Data = Nothing
                Exit Function
            End If
            If sr1tbl.bExcept_n0 = 0 Then
                If CountUniqueValues(rge.Columns(i)) <> varkind(1, i) Then
                    MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||fffd|0|fffd||fffd||fffd||303|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
                    Set handleSr1Data = Nothing
                    Exit Function
                End If
            End If
        End If
    Next i
    
    msgStr = ""
    If RgeObj Is Nothing Then
        msgStr = "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf RgeVar Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf RgeVarKind Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sr1tbl.bNum2Class = 1 And RgeClass Is Nothing) Then
        msgStr = "|fffd||293|I|fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||303|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sr1tbl.bCateName = 1 And RgeCateName Is Nothing) Then
        msgStr = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sr1tbl.bSmpName = 2 And RgeSmpName Is Nothing) Then
        msgStr = "|fffd||5368e||496||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    'ElseIf CateNum < 2 Then
    '    msgStr = "|fffd||fffd||fffd||343|f|fffd|[|fffd|^|fffd||355|s|fffd||fffd|"
    ElseIf RgeVar.Columns.Count <> RgeVarKind.Columns.Count Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf Not RgeCateName Is Nothing Then
        If (CateNum <> RgeCateName.Rows.Count Or RgeVar.Columns.Count <> RgeCateName.Columns.Count) Then
            msgStr = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        End If
    ElseIf sr1tbl.bYsk = 1 And RgeYskData Is Nothing Then
        msgStr = "|fffd||53683|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    End If

    '
    If msgStr <> "" Then
        MsgBox msgStr
        Set handleSr1Data = Nothing
        Exit Function
    End If
    
    If m_varselect <> "0" Then
        sr1VarSel = Split(m_varselect, ",")
    Else
        ReDim sr1VarSel(0 To RgeVar.Columns.Count) As Long
        sr1VarSel(0) = RgeVar.Columns.Count
        For i = 1 To RgeVar.Columns.Count
            sr1VarSel(i) = i - 1
        Next i
    End If
    
    ItemNum = sr1VarSel(0)
    
    totalCateNum = 0
    If sr1tbl.bNum2Class = 1 Then
        If RgeClass.Rows.Count > 31 Then
            MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: 1|fffd||fffd||fffd||fffd||fffd||3d0||fffd|MAX30"
            Set handleSr1Data = Nothing
            Exit Function
        Else
            For i = 1 To ItemNum
                tmpv = RgeClass(1, sr1VarSel(i) + 1)
                totalCateNum = totalCateNum + tmpv
                If tmpv > 30 Then
                    MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: 1|fffd||fffd||fffd||fffd||fffd||3d0||fffd|MAX30"
                    Set handleSr1Data = Nothing
                    Exit Function
                End If
                If varkind(1, sr1VarSel(i) + 1) = 0 And tmpv < 1 Then
                    MsgBox "|fffd||fffd||fffd||28d||fffd||fffd||682||315||fffd||fffd||789||fffd||fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                    Set handleSr1Data = Nothing
                    Exit Function
                End If
                If tmpv > CateNum Then CateNum = tmpv
            Next i
        End If
    End If
    
    For i = 1 To ItemNum
        tmpv = varkind(1, sr1VarSel(i) + 1)
        If tmpv < 0 Then
            MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            Set handleSr1Data = Nothing
            Exit Function
        End If
        totalCateNum = totalCateNum + tmpv
    Next i
    
    If totalCateNum > CATE_MAX Then
        MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: |fffd||fffd||fffd|vMAX" & CATE_MAX
        Set handleSr1Data = Nothing
        Exit Function
    End If
    
    If sr1tbl.bExcept = 0 Then
        Set rge = RgeVar.Offset(1, 0).Resize(smpNum, ItemNum)
        For i = 1 To ItemNum
            k = sr1VarSel(i) + 1
            sr1var = rge.Columns(k).Value
            If WorksheetFunction.Count(sr1var) <> smpNum - 1 Then
                Set handleSr1Data = Nothing
                Exit Function
            End If
        Next i
    End If
    
    If sr1tbl.bYsk = 1 Then
        cateNameRow = cateNameRow + RgeYskData.Rows.Count
        smpNum = smpNum + RgeYskData.Rows.Count
    End If
    
    Set tmpSht = SbkThis.Sheets("Sr1Data") 'RgeVar.Worksheet.Parent.Sheets.Add
    tmpSht.Cells.ClearContents
    Set rge = tmpSht.Range("$B$1")
    nYear = sr1Extra.nYear
    nMonth = sr1Extra.nMonth
    
    forcNum = 0
    If sr1Extra.nTimeStyle = 1 Then
        forcNum = 24
    ElseIf sr1Extra.nTimeStyle = 2 Then
        forcNum = 8
    Else
        forcNum = 40
    End If
    bSameTimeLag = True
    timelagoff = varTimeLag(1, 1)
    For i = 1 To ItemNum
        'If varTimeLag(1, i) <> varTimeLag(1, i + 1) Then
        '    bSameTimeLag = False
        '    Exit For
        'End If
        If varTimeLag(1, i) > timelagoff Then timelagoff = varTimeLag(1, i)
    Next i
    If sr1Extra.bTimeLag = 1 And bSameTimeLag Then
        nBkMonth = nMonth
        nBkYear = nYear
        If timelagoff > 0 Then
            For i = 1 To timelagoff
                Call next_Year_Month(sr1Extra.nTimeStyle, nYear, nMonth)
            Next i
            sr1Extra.nYear = nYear
            sr1Extra.nMonth = nMonth
            nYear = nBkYear
            nMonth = nBkMonth
        'Else
        '    For i = 1 To Abs(timelagoff)
        '        Call previous_Year_Month(sr1Extra.nTimeStyle, nYear, nMonth)
        '    Next i
        End If
    End If
    For i = 1 To smpNum + forcNum 'cateNameRow - 6 - 1
        If sr1Extra.nTimeStyle = 4 Then
            rge(i + 1, 1) = i
        ElseIf sr1Extra.nTimeStyle = 3 Then
            rge(i + 1, 1) = nYear + i - 1
        Else
            If i = 1 Then
                rge(i + 1, 1) = nYear & " " & nMonth
            Else
                If next_Year_Month(sr1Extra.nTimeStyle, nYear, nMonth) Then
                    rge(i + 1, 1) = nYear & " " & nMonth
                Else
                    rge(i + 1, 1) = nMonth
                End If
            End If
        End If
    Next i
    
    For i = 1 To RgeVar.Rows.Count
        For j = 1 To ItemNum
            k = sr1VarSel(j) + 1
            If i > 1 And sr1Extra.bTimeLag = 1 Then
                If varTimeLag(1, k) >= 0 Then
                    If i - 1 <= varTimeLag(1, k) Then
                        rge(i, j + 2) = ""
                    Else
                        rge(i, j + 2) = RgeVar(i - varTimeLag(1, k), k)
                    End If
                Else
                    If i - 1 > smpNum + varTimeLag(1, k) Then
                        rge(i, j + 2) = ""
                    Else
                        rge(i, j + 2) = RgeVar(i - varTimeLag(1, k), k)
                    End If
                End If
            Else
                rge(i, j + 2) = RgeVar(i, k)
            End If
        Next j
    Next i
    tmpSht.Range(rge(1, 2), rge(RgeObj.Rows.Count, 2)) = sr1obj
    
    If sr1tbl.bYsk = 1 Then
        For i = 1 To RgeYskData.Rows.Count
            For j = 1 To ItemNum
                rge(RgeObj.Rows.Count + i, j + 2) = RgeYskData(i, sr1VarSel(j) + 1)
            Next j
        Next i
    End If
    
    sr1tbl.RgeObj = tmpSht.Range(rge(1, 2), rge(RgeObj.Rows.Count, 2)).Address & vbNullChar
    sr1tbl.RgeVar = tmpSht.Range(rge(1, 3), rge(smpNum, ItemNum + 2)).Address & vbNullChar
        
    If Not RgeCateName Is Nothing Then
        CateNum = RgeCateName.Rows.Count
        sr1cate = RgeCateName.Value
        For i = 1 To ItemNum
            For j = 1 To CateNum
                If Trim(sr1cate(j, sr1VarSel(i) + 1)) = "" Then
                    If i < 3 Then
                        rge(cateNameRow + j - 1, i) = "*"
                    Else
                        rge(cateNameRow + j - 1, i) = "C-" & j
                    End If
                Else
                    rge(cateNameRow + j - 1, i) = sr1cate(j, sr1VarSel(i) + 1)
                End If
            Next j
        Next i
    Else
        For i = 1 To ItemNum
            For j = 1 To CateNum
                If i < 3 Then
                    rge(cateNameRow + j - 1, i) = "*"
                Else
                    rge(cateNameRow + j - 1, i) = "C-" & j
                End If
            Next j
        Next i
    End If
    sr1tbl.bCateName = 1
    sr1tbl.RgeCateName = tmpSht.Range(rge(cateNameRow, 1), rge(CateNum + cateNameRow - 1, ItemNum)).Address & vbNullChar
    sr1tbl.RgeSmpName = tmpSht.Range(rge(2, 1), rge(RgeSmpName.Rows.Count + 1, 1)).Address & vbNullChar
    
    Set rge = tmpSht.Range(sr1tbl.RgeVar)
    smpNum = rge.Rows.Count
    objSmpNum = RgeObj.Rows.Count
    Set tmpSht2 = getTempSheet(2)
    If sr1Extra.bHasVarData Then
        tmpSht2.Range("A1") = smpNum
        For i = rge.Rows.Count To 2 Step -1
            sr1var = rge.Rows(i).Value
            tmpSht2.Cells(i, 1) = 1
            tmpSht2.Cells(i, 2) = tmpSht.Cells(i, 2)
            If Application.WorksheetFunction.Count(sr1var) <> rge.Columns.Count Then
                If sr1tbl.bExcept = 1 Then
                    tmpSht2.Cells(i, 1) = 0
                    If i = 2 And (sr1Extra.nTimeStyle = 1 Or sr1Extra.nTimeStyle = 2) Then
                        tmpSht.Cells(i + 1, 2) = sr1Extra.nYear & " " & tmpSht.Cells(i + 1, 2)
                    End If
                    tmpSht.Rows(i).Delete
                    smpNum = smpNum - 1
                    cateNameRow = cateNameRow - 1
                    objSmpNum = objSmpNum - 1
                Else
                    Set handleSr1Data = Nothing
                    Exit Function
                End If
            End If
        Next i
    Else
        tmpSht2.Range("A1") = smpNum + forcNum
        For i = 1 To smpNum + forcNum
            tmpSht2.Cells(i, 1) = 1
            tmpSht2.Cells(i, 2) = tmpSht.Cells(i, 2)
        Next i
    End If
    Set rge = tmpSht.Range("$B$1")
    
    'sr1tbl.RgeObj = tmpSht.Range(rge(1, 2), rge(RgeObj.Rows.Count, 2)).Address & vbNullChar
    sr1tbl.RgeObj = tmpSht.Range(rge(1, 2), rge(objSmpNum, 2)).Address & vbNullChar
    sr1tbl.RgeVar = tmpSht.Range(rge(1, 3), rge(smpNum, ItemNum + 2)).Address & vbNullChar
    sr1tbl.RgeCateName = tmpSht.Range(rge(cateNameRow, 1), rge(CateNum + cateNameRow - 1, ItemNum)).Address & vbNullChar
    sr1tbl.RgeSmpName = tmpSht.Range(rge(2, 1), rge(smpNum + forcNum, 1)).Address & vbNullChar
    
    tmpSht.Range(rge(2, 1), rge(smpNum + forcNum, 1)).Copy SbkThis.Sheets("Sr1Data").Range("A2")
    For i = 1 To smpNum + forcNum
        rge(i + 1, 1) = i
    Next i
    
    'Category Name Copy (Category Name for numeric item may be adjusted, if it is categorized)
    Set bgnCelCateNm = SbkThis.Sheets("Sr1Info").Range("B50")
    tmpSht.Range(rge(cateNameRow, 1), rge(CateNum + cateNameRow - 1, ItemNum)).Copy bgnCelCateNm
    
    Call makeCateName_forNumItem(ItemNum, RgeClass, RgeVarKind, bgnCelCateNm)  '11.8.21 LSQ
    
    'Item Type
    For i = 1 To ItemNum
        rge(i + 1, ItemNum + 4) = varkind(1, sr1VarSel(i) + 1)
    Next i
    
    sr1tbl.RgeVarKind = rge(2, ItemNum + 4).Resize(ItemNum, 1).Address & vbNullChar
    
    'numeric item categorized (|fffd|K|fffd||fffd||fffd|l)
    If Not RgeClass Is Nothing Then
        For i = 1 To ItemNum
            RgeClass.Columns(sr1VarSel(i) + 1).Copy rge(classRow, i)
        Next i
        sr1tbl.RgeClass = rge(classRow, 1).Resize(RgeClass.Rows.Count, ItemNum).Address & vbNullChar
    End If
    
    Set handleSr1Data = tmpSht
    On Error GoTo 0
End Function

Private Function checkSr1Data() As Boolean
    Dim RgeObj As Range, RgeVar As Range
    
    On Error Resume Next
    Set RgeObj = Range(sr1tbl.RgeObj)
    Set RgeVar = Range(sr1tbl.RgeVar)
    If RgeObj.Rows.Count > RgeVar.Rows.Count Then
        MsgBox "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        checkSr1Data = False
        Exit Function
    End If
    checkSr1Data = True
End Function

Private Sub SaveBasicInfo(ByVal revisedCateNum As Variant, ByVal NewCates As Variant, Optional ByVal flg As Long = 1)
    Dim i As Long, j As Long
    Dim rge As Range, RgeObj As Range, RgeVar As Range, rgeKind As Range
    Dim tmpstr As String
    Set rge = SbkThis.Worksheets("Sr1Info").Range("A1")
    Set RgeObj = Range(toXlA1str(sr1tbl.RgeObj))
    Set RgeVar = Range(toXlA1str(sr1tbl.RgeVar))
    Set rgeKind = Range(toXlA1str(sr1tbl.RgeVarKind))
    rge.Offset(0, 1) = RgeObj(1, 1)
    rge.Offset(0, 2) = 1
    For i = 1 To RgeVar.Columns.Count
        rge.Offset(7, i) = RgeVar(1, i)
        If flg = 1 Then
            rge.Offset(8, i + 40) = rgeKind(i, 1)
            rge.Offset(9, i + 40) = NewCates(i)
        Else
            rge.Offset(8, i + 40) = rge.Offset(8, i + 41)
            rge.Offset(9, i + 40) = rge.Offset(9, i + 41)
        End If
    Next i
    Set rge = SbkThis.Worksheets("Sr1Data").Range("A1")
    For i = 1 To RgeVar.Columns.Count
        If flg = 1 Then
            rge.Offset(i, RgeVar.Columns.Count + 4) = revisedCateNum(i)
        End If
    Next i
End Sub

'"|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Private Function GetGsDlgInp(ByVal bHasRgeX As Boolean, ByVal rgeOut As Range) As Boolean
    Dim tmp1, tmp2, rgeTmp As Range, i As Integer
    Dim smpNum
    
    GetGsDlgInp = False

    '|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||348||fffd|
    
    Set g_aDialog.rgeInp = Range(Comm_toXlA1str(sr1tbl.RgeObj))
    If Not bHasRgeX Then
        Set g_aDialog.RgeX = Nothing
    Else
        Set g_aDialog.RgeX = Range(Comm_toXlA1str(sr1tbl.RgeVar))
    End If
    Set g_aDialog.rgeOutBgn = rgeOut
    
    g_aDialog.bColData = True
    g_aDialog.bTitle = True
    
    '|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||311|I|fffd||fffd|
    g_aDialog.bXSel = False
    
    g_aDialog.dlgGs.nMinSmpLmt = 5
    g_aDialog.nTimeStyle = sr1Extra.nTimeStyle
    g_aDialog.nYearBgn = sr1Extra.nYear
    g_aDialog.nMonth = sr1Extra.nMonth
    
    If g_aDialog.nTimeStyle = 1 Then            '|fffd||fffd||fffd||fffd|
        g_aDialog.dlgGs.nMaxSmpLmt = 500 '2005.7 PYJ  old:48
        g_aDialog.dlgGs.nLmtSmp1 = 24
        g_aDialog.dlgGs.nLmtSmp2 = 36
    ElseIf g_aDialog.nTimeStyle = 2 Then        '|fffd|l|fffd||fffd||fffd||fffd|
        g_aDialog.dlgGs.nMaxSmpLmt = 500 '2005.7 PYJ  old:16
        g_aDialog.dlgGs.nLmtSmp1 = 12
        g_aDialog.dlgGs.nLmtSmp2 = 12
    ElseIf g_aDialog.nTimeStyle = 3 Then        '|fffd|N|fffd||fffd|
        g_aDialog.dlgGs.nMaxSmpLmt = 500 '2005.7 PYJ  old:20
        g_aDialog.dlgGs.nLmtSmp1 = 501   '2005.7 PYJ  old:21
        g_aDialog.dlgGs.nLmtSmp2 = 501   '2005.7 PYJ  old:21
    Else
        g_aDialog.dlgGs.nMaxSmpLmt = 500
        g_aDialog.dlgGs.nLmtSmp1 = 501
        g_aDialog.dlgGs.nLmtSmp2 = 501
        g_aDialog.nYearBgn = sr1Extra.nMonth
        g_aDialog.nTimeStyle = 3
    End If
    
    '|fffd||fffd||fffd|d|fffd||693||fffd|-------------------------------
    '2013.11.25 LSQ mdf :
    '   |fffd||fffd||fffd||fffd| & [24, 36)|fffd|f|fffd|[|fffd|^ -> 12 term |fffd||fffd||fffd|d|fffd||693||fffd|; see ISTAT_2011_2012_2013.xls ! MYSK ! No.2, No.4
    '   Else 3 term |fffd||fffd||fffd|d|fffd||693||fffd|
    smpNum = g_aDialog.rgeInp.Count - 1
    If g_aDialog.nTimeStyle = 1 And (smpNum >= 24 And smpNum < 36) Then
        g_aDialog.dlgEma.nSmpNum = 12
    Else
        g_aDialog.dlgEma.nSmpNum = 3
    End If
    
    
    'EPA-------------------------------------
    g_aDialog.dlgEpa.nMod = 1
    
    '|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|--------------------------------
    g_aDialog.dlgGs.nKkMethod = sr1Extra.nTrend
    'g_aDialog.dlgKk.nSi = 1
    g_aDialog.dlgKk.nSuitei = 1      '|fffd||fffd||510||fffd||fffd||fffd|
    g_aDialog.dlgKk.nUpLimitFlg = 1  '|fffd||fffd||fffd||fffd|l
    g_aDialog.dlgKk.dUpLimit = 1
    '|fffd||590||fffd||fffd||fffd||fffd|w|fffd||fffd|
    For i = 1 To g_nKkFunNum
        g_aDialog.dlgKk.nmFuncSel(i) = 0
    Next i
    g_aDialog.dlgKk.nmFuncSel(1) = 1 '|fffd||fffd||fffd||fffd|
    g_aDialog.dlgKk.nmFuncSel(3) = 1 '|fffd||fffd||fffd|[|fffd|g
    g_aDialog.dlgKk.nmFuncSel(4) = 1 '|fffd||390||fffd|
    g_aDialog.dlgKk.nmFuncSel(6) = 1 '|fffd|w|fffd||fffd|
    g_aDialog.dlgKk.nmFuncSel(8) = 1 '|fffd||fffd||fffd|W|fffd|X|fffd|e|fffd|B|fffd|b|fffd|N
    g_aDialog.dlgKk.nmFuncSel(9) = 1 '|fffd|S|fffd||fffd||fffd|x|fffd||fffd||fffd|c
    
    '|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|----------------------
    g_aDialog.dlgJkk.nMethod = 1      '|fffd||3d0||fffd||fffd|I|fffd||fffd|@
    g_aDialog.dlgJkk.nSuitei = 1      '|fffd||fffd||510||fffd||fffd||fffd|
    g_aDialog.dlgJkk.bTimeLag = False '|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd|l
    g_aDialog.dlgJkk.bTesuk = False
    '|fffd|e|fffd|l
    g_aDialog.dlgJkk.F_in = 2#
    g_aDialog.dlgJkk.F_out = 2#
    g_aDialog.bGraph = True
    
    GetGsDlgInp = True
End Function

Sub IS_Gousei_VBA()
    Dim i As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim tmpSht As Worksheet, outSht As Worksheet, outShtMid As Worksheet
    Dim RgeVar As Range, rge As Range
    Dim valvar As Variant
    Dim strvar As String
    Dim bExcept_n0 As Boolean
    Dim edtObj As EditBox
    Dim bOutMid As Boolean, strBkName As String, bkName As String
    Dim actSht As Worksheet
    Dim bHasRgeX As Boolean
    Dim nId As Long
    Dim flg As Long
    
    'for Debug use (11.8.19 LSQ add)
#If 0 Then
    Call SbkInit
#End If

    On Error Resume Next
    
    Set actSht = ActiveSheet

    ReDim VbaGrp(0)
    
    m_varselect = getDefaultVarSelect(6)
    If bRangeChanged_Frm(6, frmForecast.RgeVar.Text) Then m_varselect = "0"
redisp:
    m_bvarselected = False
    Set outSht = Nothing
    frmForecast.bvarselected = m_bvarselected
    frmForecast.varselect = m_varselect
    frmForecast.Show
    If Not frmForecast.bOK Then Exit Sub
    
    m_bvarselected = frmForecast.bvarselected
    m_varselect = frmForecast.varselect
    
    Call setDefaultAddress(6, getCurrentAddress_Frm(frmForecast.RgeVar.Text))
    Call setDefaultVarSelect(6, m_varselect)
    
    sr1tbl.RgeObj = Trim(frmForecast.RgeObj.Text) & vbNullChar
    Set rge = Range(sr1tbl.RgeObj)
    If Not rge Is Nothing Then
        Set outSht = rge.Worksheet.Parent.Sheets.Add
    End If
    
    sr1tbl.RgeVar = Trim(frmForecast.RgeVar.Text) & vbNullChar
    Set rge = Range(sr1tbl.RgeVar)
    If rge Is Nothing Then
        bHasRgeX = False
    Else
        bHasRgeX = True
    End If
    Set rge = Nothing
    
    sr1tbl.RgeVarKind = Trim(frmForecast.RgeVarKind.Text) & vbNullChar
    sr1tbl.bExcept = IIf(frmForecast.optExcept.Value = True, 1, 0)
    sr1tbl.nVarSelMethod = IIf(frmForecast.optVarNone.Value = True, 1, 2)
    sr1tbl.bSmpName = 0
    sr1tbl.bYsk = IIf(frmForecast.chkYsk.Value = True, 1, 0)
    If sr1tbl.bYsk = 1 Then
        sr1tbl.RgeYskData = Trim(frmForecast.RgeYskData) & vbNullChar
    End If
    sr1tbl.bExtraInfo = IIf(frmForecast.optExtraInfoYes.Value = True, 1, 0)
    sr1tbl.bNum2Class = IIf(frmForecast.chkNum2Cate.Value = True, 1, 0)
    If sr1tbl.bNum2Class = 1 Then
        sr1tbl.RgeClass = Trim(frmForecast.RgeNumCate.Text) & vbNullChar
    Else
        sr1tbl.RgeClass = ""
    End If
    'If sr1tbl.bSmpName = 1 Then
    '    sr1tbl.RgeSmpName = Trim(frmBasicInfo.RgeSmpName.Text) & vbNullChar
    'End If
    sr1tbl.bCateName = IIf(frmForecast.chkCateName.Value = True, 1, 0)
    If sr1tbl.bCateName = 1 Then
        sr1tbl.RgeCateName = Trim(frmForecast.RgeCateName.Text) & vbNullChar
    End If
    sr1tbl.bPointGrp = 1 'IIf(frmBasicInfo.chkOutGrp.Value = True, 1, 0)
    sr1tbl.bExcept_n0 = IIf(frmForecast.optExcept_n0.Value = True, 1, 0)
    sr1Extra.bTimeLag = IIf(frmForecast.chkTimeLag.Value = True, 1, 0)
    If sr1Extra.bTimeLag = 1 Then
        sr1Extra.RgeTimeLag = Trim(frmForecast.RgeTimeLag.Text) & vbNullChar
    End If
    sr1Extra.nTimeStyle = IIf(frmForecast.optMonth.Value = True, 1, _
                        IIf(frmForecast.optQuarter.Value = True, 2, _
                        IIf(frmForecast.optYear.Value = True, 3, 4)))
    sr1Extra.nYear = val(frmForecast.txtYear.Text)
    sr1Extra.nMonth = val(frmForecast.txtMonth.Text)
    sr1Extra.nTrend = IIf(frmForecast.optTrend1.Value = True, 1, _
                    IIf(frmForecast.optTrend2.Value = True, 2, _
                    IIf(frmForecast.optTrend3.Value = True, 3, _
                    IIf(frmForecast.optTrend4.Value = True, 4, _
                    IIf(frmForecast.optTrend5.Value = True, 5, _
                    IIf(frmForecast.optTrend6.Value = True, 6, 7))))))
                    
    Set tmpSht = handleSr1Data
    
    If tmpSht Is Nothing Then
        GoTo redisp
    End If
    
    #If 0 Then
    'output sheet
    strBkName = "[" & ActiveWorkbook.Name & "]"
    '
    
    Set outSht = ActiveWorkbook.Worksheets.Add
    sr1tbl.OutSheet = strBkName & outSht.Name & "!R50C1"
    #End If
    
    'data sheet
    tmpSht.Activate
    
    Dim revisedCateNum() As Long, NewCates() As String
    Set RgeVar = Range(toXlA1str(sr1tbl.RgeVar))
    ReDim revisedCateNum(1 To RgeVar.Columns.Count + 1)
    ReDim NewCates(1 To RgeVar.Columns.Count + 1)
    Call Remove0Cate(sr1tbl.RgeVarKind, sr1tbl.RgeVar, sr1tbl.RgeCateName, sr1tbl.bExcept_n0 = 0, revisedCateNum, NewCates)
    
    If Not checkSr1Data Then
        GoTo redisp
    End If
    
    SaveBasicInfo revisedCateNum, NewCates
    
    bkName = "[" & SbkThis.Name & "]"
    sr1tbl.RgeInfo = bkName & "Sr1Info!R1C1" & vbNullChar
    sr1tbl.OutSheet = bkName & "Sr1Result!R1C1" & vbNullChar
    sr1tbl.RgeObj = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeObj) & vbNullChar
    sr1tbl.RgeVar = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeVar) & vbNullChar
    sr1tbl.RgeSmpName = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeSmpName) & vbNullChar
    sr1tbl.RgeCateName = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeCateName) & vbNullChar
    sr1tbl.RgeVarKind = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeVarKind) & vbNullChar
    sr1tbl.RgeClass = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeClass) & vbNullChar
    sr1tbl.OutSheet = Trim(sr1tbl.OutSheet) & vbNullChar
    
    SbkThis.Sheets("Sr1Result").Cells.Clear    'save calc results from DLL
    
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    
    GetGsDlgInp False, outSht.Range("B2")
    Call Do_Gousei_VBA
    
    Set RgeVar = Range(Comm_toXlA1str(sr1tbl.RgeVar))
    If g_aDialog.rgeInp.Rows.Count - 1 < g_aDialog.dlgGs.nLmtSmp1 Then
        g_aDialog.RgeX.Copy RgeVar.Range("B1")
        Set rge = RgeVar.Range("B1").Resize(RgeVar.Rows.Count, RgeVar.Columns.Count - 1)
        sr1tbl.RgeVar = bkName & "Sr1Data!" & Comm_toXlRCstr(rge.Address) & vbNullChar
        Set rge = Range(Comm_toXlA1str(sr1tbl.RgeVarKind))
        Set rge = rge.Range("A2").Resize(rge.Rows.Count - 1, rge.Columns.Count)
        sr1tbl.RgeVarKind = bkName & "Sr1Data!" & Comm_toXlRCstr(rge.Address) & vbNullChar
        Set rge = Range(Comm_toXlA1str(sr1tbl.RgeCateName))
        Set rge = rge.Range("B1").Resize(rge.Rows.Count, rge.Columns.Count - 1)
        sr1tbl.RgeCateName = bkName & "Sr1Data!" & Comm_toXlRCstr(rge.Address) & vbNullChar
        Set rge = ThisWorkbook.Worksheets("Sr1Info").Range("C50").Resize(rge.Rows.Count, rge.Columns.Count)
        rge.Copy ThisWorkbook.Worksheets("Sr1Info").Range("B50")
        If sr1tbl.bNum2Class Then
            Set rge = Range(Comm_toXlA1str(sr1tbl.RgeClass))
            Set rge = rge.Range("B1").Resize(rge.Rows.Count, rge.Columns.Count - 1)
            sr1tbl.RgeClass = bkName & "Sr1Data!" & Comm_toXlRCstr(rge.Address) & vbNullChar
        End If
        flg = 1
    Else
        g_aDialog.RgeX.Copy RgeVar.Range("A1")
        RgeVar.Range("B1") = " S"
        flg = 2
    End If
    
    If RgeVar.Columns.Count = 2 Then
        If g_aDialog.rgeInp.Rows.Count - 1 < g_aDialog.dlgGs.nLmtSmp1 Then
            '2016.02.16 mdf:
            'Set RgeVar = RgeVar.Range("A1").Resize(g_aDialog.RgeX.Rows.Count, 1)
            Set RgeVar = RgeVar.Range("B1").Resize(g_aDialog.RgeX.Rows.Count, 1)
            'end mdf
        Else
            Set RgeVar = RgeVar.Range("A1").Resize(g_aDialog.RgeX.Rows.Count, 2)
        End If
        sr1tbl.RgeVar = bkName & "Sr1Data!" & Comm_toXlRCstr(RgeVar.Address) & vbNullChar
    End If
    
        'Set rge = Range(toXlA1str(sr1tbl.RgeClass))
        'rge(2, 1) = WorksheetFunction.max(RgeVar.Columns(1)) + 1
        'rge(2, 2) = WorksheetFunction.max(RgeVar.Columns(2)) + 1
        
    If flg = 1 Then
        SaveBasicInfo revisedCateNum, NewCates, 2
    End If
    
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    
    nId = IIf(isTrialVer, 0, 1)
    
    rtn = sr1_dlg(nId, sr1tbl)  'do calc
    actSht.Activate
    
    If rtn = -100 Then
        MsgBox "|fffd|\|fffd|t|fffd|g|fffd|E|fffd|F|fffd|A|fffd||fffd||fffd|s|fffd||fffd||fffd|R|fffd|s|fffd|[|fffd||202||302||141|A|fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical Or vbOKOnly
        Exit Sub
    End If
    
    If rtn = 0 Then 'do output
        Sr1_Output 3, outSht, sr1tbl.bPointGrp, True, True, g_aDialog.rgeOutBgn
        outSht.Activate
        
        With ActiveWindow
            .ScrollRow = 1
        End With
        Cells(1, 1).Select
    End If
    On Error GoTo 0
End Sub

Public Sub Sr1DrawDotPlot(ByVal strRgeClass As String, ByVal strRgeData As String, _
                                    ByVal strRgeOut As String, ByVal crossAt As Double)
    Application.Run GxlaBkGraph1 & "!DrawDotPlot_A", toXlA1str(strRgeClass), toXlA1str(strRgeData), _
                                            toXlA1str(strRgeOut), crossAt
End Sub
                          
'=== EOF ===



Attribute VB_Name = "PDF_EXE"
Option Explicit
'
' |fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||58c|W|fffd||fffd|Windows API|fffd||fffd||933e||fffd||fffd||fffd||fffd|
'
'|fffd||fffd||fffd||30d||14c||fffd||fffd||fffd||fffd|DebugTxt|fffd||fffd||fffd||82||fffd|

Private Const HKEY_CLASSES_ROOT = &H80000000
Private Const HKEY_CURRENT_USER = &H80000001
Private Const HKEY_LOCAL_MACHINE = &H80000002
Private Const HKEY_USERS = &H80000003
Private Const ERROR_SUCCESS = 0&
Private Const ERROR_NO_MORE_ITEMS = 259&

Private Const REG_SZ = 1
Private Const REG_BINARY = 3
Private Const REG_DWORD = 4


'Private Const HKEY_LOCAL_MACHINE = &H80000002
'Private Const HKEY_CLASSES_ROOT = &H80000000
'Private Const REG_SZ = 1

Private Const STANDARD_RIGHTS_ALL = &H1F0000
Private Const KEY_QUERY_VALUE = &H1
Private Const KEY_ENUMERATE_SUB_KEYS = &H8
Private Const KEY_NOTIFY = &H10
Private Const SYNCHRONIZE = &H100000

Private Const READ_CONTROL = &H20000
Private Const STANDARD_RIGHTS_READ = (READ_CONTROL)

Private Const KEY_READ = ((STANDARD_RIGHTS_READ Or KEY_QUERY_VALUE Or KEY_ENUMERATE_SUB_KEYS Or KEY_NOTIFY) And (Not SYNCHRONIZE))
Private Const KEY_EXECUTE = (KEY_READ)

'---------
Private Const KEY_SET_VALUE = &H2
Private Const KEY_CREATE_SUB_KEY = &H4
'Public Const KEY_ENUMERATE_SUB_KEYS = &H8
'Public Const KEY_NOTIFY = &H10
Private Const KEY_CREATE_LINK = &H20
'Public Const SYNCHRONIZE = &H100000
Private Const KEY_ALL_ACCESS = ((STANDARD_RIGHTS_ALL Or KEY_QUERY_VALUE Or KEY_SET_VALUE Or KEY_CREATE_SUB_KEY Or KEY_ENUMERATE_SUB_KEYS Or KEY_NOTIFY Or KEY_CREATE_LINK) And (Not SYNCHRONIZE))

Private Const REG_OPTION_VOLATILE = 1            ' Key is not preserved when system is rebooted
Private Const REG_OPTION_NON_VOLATILE = 0        ' Key is preserved when system is rebooted

Type SECURITY_ATTRIBUTES
        nLength As Long
        lpSecurityDescriptor As Long
        bInheritHandle As Boolean
End Type
'-------

#If Win64 Then
Private Declare PtrSafe Function RegCloseKey Lib "advapi32.dll" (ByVal hKey As Long) As Long
Private Declare PtrSafe Function RegCreateKey Lib "advapi32.dll" Alias "RegCreateKeyA" (ByVal hKey As Long, ByVal lpSubKey As String, phkResult As Long) As Long
Private Declare PtrSafe Function RegOpenKey Lib "advapi32.dll" Alias "RegOpenKeyA" (ByVal hKey As Long, ByVal lpSubKey As String, phkResult As Long) As Long
Private Declare PtrSafe Function RegQueryValue Lib "advapi32.dll" Alias "RegQueryValueA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal lpValue As String, lpcbValue As Long) As Long
Private Declare PtrSafe Function RegSetValue Lib "advapi32.dll" Alias "RegSetValueA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal dwType As Long, ByVal lpData As String, ByVal cbData As Long) As Long
Private Declare PtrSafe Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, lpType As Long, lpData As Any, lpcbData As Long) As Long          ' Note that if you declare the lpData parameter as String, you must pass it By Value.
Private Declare PtrSafe Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As Long) As Long
Private Declare PtrSafe Function RegDeleteKey Lib "advapi32.dll" Alias "RegDeleteKeyA" (ByVal hKey As Long, ByVal lpSubKey As String) As Long
Private Declare PtrSafe Function RegDeleteValue Lib "advapi32.dll" Alias "RegDeleteValueA" (ByVal hKey As Long, ByVal lpValueName As String) As Long

'Private Declare Function RegCreateKeyEx Lib "advapi32.dll" Alias "RegCreateKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal Reserved As Long, ByVal lpClass As String, ByVal dwOptions As Long, ByVal samDesired As Long, lpSecurityAttributes As SECURITY_ATTRIBUTES, phkResult As Long, lpdwDisposition As Long) As Long
Private Declare PtrSafe Function RegCreateKeyEx Lib "advapi32.dll" Alias "RegCreateKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal Reserved As Long, ByVal lpClass As String, ByVal dwOptions As Long, ByVal samDesired As Long, lpSecurityAttributes As Long, phkResult As Long, lpdwDisposition As Long) As Long

'2006.5.25 added wzh for missed definition of OSRegSetValueEx
Private Declare PtrSafe Function OSRegSetValueEx Lib "advapi32.dll" Alias _
       "RegSetValueExA" (ByVal hKey As Long, ByVal lpValueName As String, _
       ByVal Reserved As Long, ByVal dwType As Long, lpData As Any, ByVal _
       cbData As Long) As Long
'

'--------------
Private Declare PtrSafe Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
Private Declare PtrSafe Function WritePrivateProfileString Lib "kernel32" Alias "WritePrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpString As Any, ByVal lpFileName As String) As Long
Private Declare PtrSafe Function CopyFile Lib "kernel32" Alias "CopyFileA" (ByVal lpExistingFileName As String, ByVal lpNewFileName As String, ByVal bFailIfExists As Long) As Long
#Else
Private Declare Function RegCloseKey Lib "advapi32.dll" (ByVal hKey As Long) As Long
Private Declare Function RegCreateKey Lib "advapi32.dll" Alias "RegCreateKeyA" (ByVal hKey As Long, ByVal lpSubKey As String, phkResult As Long) As Long
Private Declare Function RegOpenKey Lib "advapi32.dll" Alias "RegOpenKeyA" (ByVal hKey As Long, ByVal lpSubKey As String, phkResult As Long) As Long
Private Declare Function RegQueryValue Lib "advapi32.dll" Alias "RegQueryValueA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal lpValue As String, lpcbValue As Long) As Long
Private Declare Function RegSetValue Lib "advapi32.dll" Alias "RegSetValueA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal dwType As Long, ByVal lpData As String, ByVal cbData As Long) As Long
Private Declare Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, lpType As Long, lpData As Any, lpcbData As Long) As Long         ' Note that if you declare the lpData parameter as String, you must pass it By Value.
Private Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As Long) As Long
Private Declare Function RegDeleteKey Lib "advapi32.dll" Alias "RegDeleteKeyA" (ByVal hKey As Long, ByVal lpSubKey As String) As Long
Private Declare Function RegDeleteValue Lib "advapi32.dll" Alias "RegDeleteValueA" (ByVal hKey As Long, ByVal lpValueName As String) As Long

'Private Declare Function RegCreateKeyEx Lib "advapi32.dll" Alias "RegCreateKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal Reserved As Long, ByVal lpClass As String, ByVal dwOptions As Long, ByVal samDesired As Long, lpSecurityAttributes As SECURITY_ATTRIBUTES, phkResult As Long, lpdwDisposition As Long) As Long
Private Declare Function RegCreateKeyEx Lib "advapi32.dll" Alias "RegCreateKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal Reserved As Long, ByVal lpClass As String, ByVal dwOptions As Long, ByVal samDesired As Long, lpSecurityAttributes As Long, phkResult As Long, lpdwDisposition As Long) As Long

'2006.5.25 added wzh for missed definition of OSRegSetValueEx
Private Declare Function OSRegSetValueEx Lib "advapi32.dll" Alias _
       "RegSetValueExA" (ByVal hKey As Long, ByVal lpValueName As String, _
       ByVal Reserved As Long, ByVal dwType As Long, lpData As Any, ByVal _
       cbData As Long) As Long
'

'--------------
Private Declare Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
Private Declare Function WritePrivateProfileString Lib "kernel32" Alias "WritePrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpString As Any, ByVal lpFileName As String) As Long
Private Declare Function CopyFile Lib "kernel32" Alias "CopyFileA" (ByVal lpExistingFileName As String, ByVal lpNewFileName As String, ByVal bFailIfExists As Long) As Long

#End If

Sub tetetet()
Attribute tetetet.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim iRet As Integer
    Dim sTemp As String
    

    iRet = iExt_App_Search(".pdf", 1, sTemp)
    MsgBox sTemp

    iRet = iExt_App_Search(".pdf", 2, sTemp)
    MsgBox sTemp
End Sub


Function iExt_App_Search(sExt_str As String, iMode As Integer, ByRef sPrg_path As String) As Integer
Attribute iExt_App_Search.VB_ProcData.VB_Invoke_Func = " \n14"
'----------------------------------------
'|fffd|g|fffd||fffd||fffd|q|fffd||fffd||fffd||fffd|N|fffd||fffd||fffd||fffd||fffd||fffd|A|fffd|v|fffd||fffd||fffd||303|p|fffd|X|fffd||12c82||5c2||fffd|
'sPrg_path|fffd||243|p|fffd|X|fffd||292|u|fffd||fffd||fffd|i|fffd|[|fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd|
'|fffd|@sExt_str       |fffd||fffd||fffd||5c2||fffd||fffd||fffd||fffd|g|fffd||fffd||fffd|q(|fffd|s|fffd||fffd||fffd|I|fffd|h|fffd|t|fffd||fffd|)|fffd|@|fffd|y|fffd||fffd|z|fffd|@".PDF"
'  iMode          |fffd|f|fffd|[|fffd|^|fffd||64fe||fffd||fffd||fffd|[|fffd|h
'       1:|fffd|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd||303|t|fffd||fffd||fffd|p|fffd|X|fffd||302||741|@|fffd|y|fffd||fffd|z|fffd|@|fffd|u"c:\acrobat\reader.exe"|fffd|v
'       2:|fffd|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd||308||fffd||fffd||fffd||fffd||fffd||fffd|S|fffd||fffd|  |fffd|y|fffd||fffd|z|fffd|@|fffd|u"c:\acrobat\reader.exe""%1"|fffd|v
'|fffd|@sPrg_path      |fffd|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd|t|fffd||fffd||fffd|p|fffd|X|fffd||30a|i|fffd|[|fffd|G|fffd||fffd||fffd|A|fffd|@|fffd|y|fffd||fffd|z|fffd|@"c:\acrobat\reader.exe"
'|fffd||7c2||fffd|l
'  |fffd||fffd||fffd||fffd|I|fffd||fffd||fffd|F 1
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-1|fffd|i|fffd|w|fffd||80b3||fffd||a0bd||fffd|L|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd|j
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-2|fffd|i|fffd|w|fffd||80b3||fffd||a0bd||fffd|A|fffd|v|fffd||fffd||fffd|P|fffd|[|fffd|V|fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd|j
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-3|fffd|i|fffd||fffd||fffd|[|fffd|h|fffd||fffd|1,2|fffd||20a|O|fffd||fffd||fffd|w|fffd||80b3||fffd||a0bd||fffd|j
'--------------------------

    Dim iRet1 As Integer
    Dim sReg_Path As String
    Dim sApp_Path As String
    Dim sKey1  As String
    Dim sTemp1 As String
    Dim sTemp2 As String
    Dim sTemp3 As String
    Dim iLengs As Integer
    Dim iCnt1 As Integer
    Dim iEndCnt As Integer

    sKey1 = "\shell\open\command"
    
    '|fffd||fffd||fffd|}|fffd||302||60a4||fffd||203|A|fffd|v|fffd||fffd||fffd||302||182||fffd|
    sTemp1 = sExt_str & sKey1
    iRet1 = iGet_reg_string(1, sTemp1, "", sApp_Path) '|fffd|g|fffd||fffd||fffd|q|fffd||fffd||fffd||70cc||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd|L|fffd|[|fffd||fffd||fffd||64fe|
    If (iRet1 <> 1) Then
        '|fffd|s|fffd|V|fffd||1c2||fffd||fffd|A|fffd|v|fffd||fffd||fffd||302||182||fffd|
        iRet1 = iGet_reg_string(1, sExt_str, "", sReg_Path) '|fffd|g|fffd||fffd||fffd|q|fffd||fffd||fffd||70cc||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd|L|fffd|[|fffd||fffd||fffd||64fe|
        If (iRet1 <> 1) Then
            iExt_App_Search = -1
            Exit Function
        End If
    
        sTemp1 = sReg_Path & sKey1
        iRet1 = iGet_reg_string(1, sTemp1, "", sApp_Path) '|fffd|g|fffd||fffd||fffd|q|fffd||fffd||fffd||70cc||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd|L|fffd|[|fffd||fffd||fffd||64fe|
        If (iRet1 <> 1) Then
            iExt_App_Search = -2
            Exit Function
        End If
    End If
    
    
    Select Case iMode
        Case 1 '|fffd|t|fffd||fffd||fffd|p|fffd|X|fffd||302||742||fffd||502||fffd|
            iLengs = Len(sApp_Path)
            sTemp1 = Mid(sApp_Path, 1, 1)
            iEndCnt = 0
            If (sTemp1 = Chr$(34)) Then
                '|fffd||14f||fffd||fffd||315||fffd||fffd||fffd||fffd||42a81|u"|fffd|v|fffd||302||182||fffd||fffd||34f|I|fffd||fffd||fffd||301|u"|fffd|v|fffd||292|u|fffd||702||14e||64fe|
                For iCnt1 = 2 To iLengs
                    sTemp2 = Mid(sApp_Path, iCnt1, 1)
                    If (sTemp2 = Chr$(34)) Then
                        iEndCnt = iCnt1
                        Exit For
                    End If
                Next iCnt1
                sTemp3 = Mid(sApp_Path, 1, iEndCnt)
            Else
                '|fffd||14f||fffd||fffd||315||fffd||fffd||fffd||fffd||42a81|u"|fffd|v|fffd||20a|O|fffd||302||182||fffd||fffd||341|u%|fffd|v|fffd||30e||fffd|O|fffd||292|u|fffd||702||14e||64fe|
                For iCnt1 = 1 To iLengs
                    sTemp2 = Mid(sApp_Path, iCnt1, 1)
                    If (sTemp2 = "%") Then
                        iEndCnt = iCnt1
                        Exit For
                    End If
                Next iCnt1
                sTemp3 = Mid(sApp_Path, 1, iEndCnt - 1)
            End If
            sPrg_path = sTemp3
            iExt_App_Search = 1
    
        Case 2 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||311|S|fffd||102||fffd||502||fffd|
            sPrg_path = sApp_Path
            iExt_App_Search = 1
        Case Else
            sPrg_path = ""
            iExt_App_Search = -3
    End Select
    
End Function







'--------------
Function iSet_reg_string(iRegMode As Integer, sRegPath As String, sRegItem As String, sItemStr As String)
Attribute iSet_reg_string.VB_ProcData.VB_Invoke_Func = " \n14"
'--------------------------
'|fffd||fffd||fffd||442||302||fffd||fffd||fffd||6bc||7bd||fffd||60f||fffd||fffd||fffd||752||80b7||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd|F
'|fffd|@iRegMode:1|fffd|`4|fffd||310||fffd||fffd||fffd|
'   1:HKEY_CLASSES_ROOT
'   2:HKEY_CURRENT_USER
'   3:HKEY_LOCAL_MACHINE
'   4:HKEY_USERS
'|fffd|@sRegPath:|6bc||7bd||fffd||fffd| |fffd||7fd||fffd||fffd||fffd||fffd||fffd||fffd|
'  sRegItem:|6bc||7bd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||217||fffd||fffd||fffd|)
'  sItemStr:|6bc||7bd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||7c2||fffd|l|fffd|F
'  |fffd||fffd||fffd||fffd|I|fffd||fffd||fffd|F1
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-1(|6bc||7bd||fffd||fffd||4f0||fffd||782||310||752||80aa||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|F1|fffd|`4|fffd||20a|O)
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-2(|6bc||7bd||fffd||637||fffd||fffd||313|o|fffd|^|fffd||fffd||fffd|s)
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-3(|fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||313|o|fffd|^|fffd||fffd||fffd|s)
'--------------------------
    Dim CurForm As Object
    Dim AppName As String
    Dim Entry As String
   
    Dim Index As Integer
    Dim Value As String
    Dim KeyValue As String
    Dim KeyHandle As Long
    Dim KeyValueLength As Long
    Dim Ret As Long
    Dim sKeyTemp As String
    Dim bRet As Boolean '
    Dim Ret2 As Long
        
     
    ' |fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||c2bc2||fffd||302||24f|\|fffd||fffd||fffd||203|X|fffd|y|fffd|[|fffd|X|fffd||fffd||fffd||182||fffd||fffd||115||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd||181|A|fffd||fffd||295||6cc||fffd||153d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    '
    Value = Space(512)
    '
    ' |fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd|A|fffd||211|O|fffd||303|T|fffd|C|fffd|Y|fffd||188||292|u|fffd||30f||fffd||fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|
    '
   
    KeyValue = Space(512)
    KeyValueLength = Len(KeyValue)
    
    '|fffd||fffd||fffd|[|fffd|h|fffd||242||fffd||fffd||fffd||115||3c2||fffd||fffd|
    
    '|fffd||fffd||fffd||456||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If (sRegItem = "") Then
        Select Case iRegMode
            Case 1
                Ret = RegCreateKey(HKEY_CLASSES_ROOT, sRegPath, KeyHandle)
            Case 2
                Ret = RegCreateKey(HKEY_CURRENT_USER, sRegPath, KeyHandle)
            Case 3
                Ret = RegCreateKey(HKEY_LOCAL_MACHINE, sRegPath, KeyHandle)
            Case 4
                Ret = RegCreateKey(HKEY_USERS, sRegPath, KeyHandle)
            Case Else
                iSet_reg_string = -1
                Exit Function
        End Select
    
    '|fffd||fffd||fffd||456||fffd||fffd||fffd||fffd||fffd||fffd||939e|
    Else
        Select Case iRegMode
            Case 1
                Ret = RegCreateKeyEx(HKEY_CLASSES_ROOT, sRegPath, 0&, "", REG_OPTION_VOLATILE, KEY_ALL_ACCESS, 0&, KeyHandle, Ret2)
            Case 2
                Ret = RegCreateKeyEx(HKEY_CURRENT_USER, sRegPath, 0&, "", REG_OPTION_VOLATILE, KEY_ALL_ACCESS, 0&, KeyHandle, Ret2)
            Case 3
                Ret = RegCreateKeyEx(HKEY_LOCAL_MACHINE, sRegPath, 0&, "", REG_OPTION_VOLATILE, KEY_ALL_ACCESS, 0&, KeyHandle, Ret2)
            Case 4
                Ret = RegCreateKeyEx(HKEY_USERS, sRegPath, 0&, "", REG_OPTION_VOLATILE, KEY_ALL_ACCESS, 0&, KeyHandle, Ret2)
            Case Else
                iSet_reg_string = -1
                Exit Function
        End Select
    End If
    
    If Ret <> 0 Then
        iSet_reg_string = -2
        Exit Function
    End If
    
    '|fffd||fffd||fffd||456||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If (sRegItem = "") Then
        'Ret = RegSetValue(KeyHandle, "", REG_SZ, sItemStr, Len(sItemStr) + 1)
        
        If (sItemStr = "") Then
            Select Case iRegMode
                Case 1
                    Ret = RegDeleteKey(HKEY_CLASSES_ROOT, sRegPath)
                Case 2
                    Ret = RegDeleteKey(HKEY_CURRENT_USER, sRegPath)
                Case 3
                    Ret = RegDeleteKey(HKEY_LOCAL_MACHINE, sRegPath)
                Case 4
                    Ret = RegDeleteKey(HKEY_USERS, sRegPath)
                Case Else
                    iSet_reg_string = -1
                    Exit Function
            End Select
        Else
            Ret = RegSetValue(KeyHandle, "", REG_SZ, sItemStr, Len(sItemStr) + 1)
        End If
        
        'Ret = RegSetValue(KeyHandle, "", REG_SZ, sItemStr, Len(sItemStr) + 1)
        If (Ret <> 0) Then
            iSet_reg_string = -3
        Else
            iSet_reg_string = 1
        End If
     
    '|fffd||fffd||fffd||456||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Else
        
        'Ret = OSRegSetValueEx(KeyHandle, sRegItem, 0&, REG_SZ, ByVal sItemStr, Len(sItemStr) + 1)
        If (sItemStr = "") Then
            Ret = RegDeleteValue(KeyHandle, sRegItem)
        Else
            'Ret = OSRegSetValueEx(KeyHandle, sRegItem, 0&, REG_SZ, ByVal sItemStr, Len(sItemStr) + 1)
            Ret = OSRegSetValueEx(KeyHandle, sRegItem, 0&, REG_SZ, ByVal sItemStr, LenB(sItemStr) + 1)
        End If
        
        If (Ret <> 0) Then
            iSet_reg_string = -3
        Else
            iSet_reg_string = 1
        End If
    End If
    RegCloseKey (KeyHandle)
End Function

Private Function iGet_reg_string(iRegMode As Integer, sRegPath As String, sRegItem As String, ByRef sRegItemStr As String) As Integer
'--------------------------
'|fffd||fffd||fffd||442||302||fffd||fffd||fffd||6bc||7bd||fffd||60f||fffd||fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd|F
'|fffd|@iRegMode:1|fffd|`4|fffd||310||fffd||fffd||fffd|
'   1:HKEY_CLASSES_ROOT
'   2:HKEY_CURRENT_USER
'   3:HKEY_LOCAL_MACHINE
'   4:HKEY_USERS
'|fffd|@sRegPath:|6bc||7bd||fffd||fffd| |fffd||7fd||fffd||fffd||fffd||fffd||fffd||fffd|
'  sRegItem:|6bc||7bd||fffd||fffd| |fffd||fffd||fffd||455||fffd||fffd||fffd||fffd||fffd|(|fffd||217||fffd||fffd||fffd|)
'|fffd||7c2||fffd|l|fffd|F
'  |fffd||fffd||fffd||fffd|I|fffd||fffd||fffd|F 1
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-1|fffd|i|6bc||7bd||fffd||603||fffd||fffd|[|fffd|h|fffd||fffd||fffd||642||202||fffd|j
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-2|fffd|i|fffd|w|fffd||80b3||fffd||a0bd||fffd|L|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd|j
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-3|fffd|i|fffd|w|fffd||80b3||fffd||a0bd||fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|j
'--------------------------
    Dim CurForm As Object
    Dim AppName As String
    Dim Entry As String
   
    Dim Index As Integer
    Dim Value As String
    'Dim KeyName As String
    Dim KeyValue As String
    Dim KeyHandle As Long
    Dim KeyValueLength As Long
    Dim Ret As Long
    Dim sKeyTemp As String
    Dim bRet As Boolean '
    ' |fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||c2bc2||fffd||302||24f|\|fffd||fffd||fffd||203|X|fffd|y|fffd|[|fffd|X|fffd||fffd||fffd||182||fffd||fffd||115||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd||181|A|fffd||fffd||295||6cc||fffd||153d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    '
    Value = Space(512)
    '
    ' |fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd|A|fffd||211|O|fffd||303|T|fffd|C|fffd|Y|fffd||188||292|u|fffd||30f||fffd||fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|
    '
   
    KeyValue = Space(512)
    KeyValueLength = Len(KeyValue)
    
    '|fffd||fffd||fffd|[|fffd|h|fffd||242||fffd||fffd||fffd||115||3c2||fffd||fffd|
    Select Case iRegMode
        Case 1
            Ret = RegOpenKeyEx(HKEY_CLASSES_ROOT, sRegPath, 0&, KEY_EXECUTE, KeyHandle)
        Case 2
            Ret = RegOpenKeyEx(HKEY_CURRENT_USER, sRegPath, 0&, KEY_EXECUTE, KeyHandle)
        Case 3
            Ret = RegOpenKeyEx(HKEY_LOCAL_MACHINE, sRegPath, 0&, KEY_EXECUTE, KeyHandle)
        Case 4
            Ret = RegOpenKeyEx(HKEY_USERS, sRegPath, 0&, KEY_EXECUTE, KeyHandle)
        Case Else
            sRegItemStr = ""
            iGet_reg_string = -1
            Exit Function
    End Select
    
    If Ret <> 0 Then
        sRegItemStr = ""
        iGet_reg_string = -2
        Exit Function
    End If

    
    sKeyTemp = sRegItem '|fffd|n|fffd||fffd||fffd||a0bd||fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||fffd||fffd||fffd||752||80b7||fffd||fffd|
    bRet = RegQueryStringValue(KeyHandle, sKeyTemp, Value)
    
    If bRet = False Then
        Ret = RegCloseKey(KeyHandle)
        sRegItemStr = ""
        iGet_reg_string = -3
        Exit Function
    End If

    Ret = RegCloseKey(KeyHandle)
    'Value = Trim(Left(KeyValue, KeyValueLength))
    iGet_reg_string = 1
    sRegItemStr = Value
End Function


Private Function iSet_Ini_String(sIniFileName As String, sSectionName As String, sKeyName As String, sKeyStr As String) As Integer
'--------------------------
'INI|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||243|f|fffd|[|fffd|^|fffd||fffd||752||80b7||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd|F
'|fffd|@sIniFileName:|fffd||fffd||fffd||fffd||fffd||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||7fd||fffd|t|fffd||fffd||fffd|j
'|fffd|@sSectionName:|fffd|Z|fffd|N|fffd|V|fffd||fffd||fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd|
'  sKeyName:    |fffd|L|fffd|[|fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd|
'  sKeyStr:     |fffd|L|fffd|[|fffd||fffd||fffd|e|fffd||315||fffd||fffd||fffd||fffd||fffd|
'|fffd||7c2||fffd|l|fffd|F
'  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||750||fffd||fffd||fffd||fffd||30f||a347||fffd|F1
'  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||74e||fffd||fffd|s|fffd||30f||a347||fffd|F-1
'--------------------------
    Dim lRet As Long
        
    lRet = WritePrivateProfileString(ByVal sSectionName, ByVal sKeyName, ByVal sKeyStr, ByVal sIniFileName)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||743|f|fffd|[|fffd|^|fffd||30a|m|fffd|F
    If (lRet = 0) Then
        iSet_Ini_String = -1
        Exit Function
    End If
    iSet_Ini_String = 1
End Function



Private Function iGet_Ini_String(sIniFileName As String, sSectionName As String, sKeyName As String, ByRef sKeyStr As String) As Integer
'--------------------------
'INI|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||243|f|fffd|[|fffd|^|fffd||fffd||752||80b7||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd|F
'|fffd|@sIniFileName:|fffd||fffd||fffd||fffd||fffd||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||7fd||fffd|t|fffd||fffd||fffd|j
'|fffd|@sSectionName:|fffd|Z|fffd|N|fffd|V|fffd||fffd||fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd|
'  sKeyName:    |fffd|L|fffd|[|fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd|
'|fffd|@sKeyStr:     |fffd|L|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||30a|i|fffd|[|fffd||a3ca|
'|fffd||7c2||fffd|l|fffd|F
'|fffd|@sKeyStr:     |fffd||1cd||fffd||fffd||42f95||fffd||fffd||fffd||fffd||fffd|
'  |fffd||1cd||fffd||fffd||750||fffd||fffd||fffd||fffd||30f||a347||fffd|F1
'  |fffd||1cd||fffd||fffd||74e||fffd||fffd|s|fffd||30f||a347||fffd|F-1(|fffd|Y|fffd||fffd||fffd||fffd||fffd||fffd|L|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'  |fffd||1cd||fffd||fffd||74e||fffd||fffd|s|fffd||30f||a347||fffd|F-2(|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||58c|W|fffd||303|G|fffd||fffd||fffd|[|fffd|j
'--------------------------
Dim iRet As Long
Dim sGetBuffer As String
Dim sTemp1 As String
    On Error GoTo ERR_OUT
    
    sGetBuffer$ = String(512, 0)   '|fffd|f|fffd|[|fffd|^|fffd||30f||fffd||fffd||fffd||fffd||fffd|
    iRet = GetPrivateProfileString(ByVal sSectionName, ByVal sKeyName, ByVal "0000000000", sGetBuffer, CInt(512), ByVal sIniFileName)
    sTemp1 = Left$(sGetBuffer, InStr(sGetBuffer, Chr(0)) - 1)
    If (sTemp1 = "0000000000") Then
        sKeyStr = ""
        iGet_Ini_String = -1
    Else
        sKeyStr = sTemp1
        iGet_Ini_String = 1
    End If
    Exit Function
    
ERR_OUT:
    iGet_Ini_String = -1
    sKeyStr = ""

End Function

Private Function RegQueryStringValue(ByVal hKey As Long, ByVal strValueName As String, strData As String) As Boolean
'--------------------------------------------------------------
' FUNCTION: RegQueryStringValue
'
' |fffd|o|fffd|^|fffd||fffd||fffd||fffd||fffd||141|A|fffd||fffd||fffd||fffd||316||fffd||fffd|O (strValueName = name)
' |fffd||702||fffd||fffd||356||fffd||fffd|O|fffd||302||202||fffd| (strValueName = "") |fffd|l|fffd||315||fffd||fffd||fffd||fffd||fffd|
' |fffd||7b0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B|fffd||fffd||fffd||85bc||fffd||312|l|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||90aa||fffd|A|fffd||fffd||fffd||fffd|
' |fffd||7b0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||142||342||202||fffd||fffd||a347||fffd||341|A|fffd||fffd||fffd||30a||590||fffd||fffd||30f||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd|s|fffd||fffd||fffd||702||fffd||fffd|B
'
' |fffd||7c2||fffd|l: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||242||fffd| True|fffd|A|fffd||fffd||fffd||fffd||20a|O|fffd||30f||a347||fffd||fffd| False |fffd||fffd||fffd||502||fffd||fffd||fffd||702||fffd||fffd|B
'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||242||341|A|fffd||fffd||fffd||fffd||fffd||fffd|^|fffd||fffd||fffd||7b0||fffd||fffd|l|fffd||fffd| strData |fffd||fffd||fffd||752||80b3||fffd||fffd||702||fffd||fffd|B
'--------------------------------------------------------------
    Dim lResult As Long
    Dim lValueType As Long
    Dim strBuf As String
    Dim lDataBufSize As Long
    
    RegQueryStringValue = False
    On Error GoTo 0
    ' |fffd||fffd||fffd||fffd|/|fffd||7b0||fffd||fffd||30e||fffd||782||fffd||fffd||64fe||fffd||fffd||fffd||702||fffd||fffd|B
    lResult = RegQueryValueEx(hKey, strValueName, 0&, lValueType, ByVal 0&, lDataBufSize)
    If lResult = ERROR_SUCCESS Then
        If lValueType = REG_SZ Then
            strBuf = String(lDataBufSize, " ")
            lResult = RegQueryValueEx(hKey, strValueName, 0&, 0&, ByVal strBuf, lDataBufSize)
            If lResult = ERROR_SUCCESS Then
                RegQueryStringValue = True
                strData = StripTerminator(strBuf)
            End If
        End If
    End If
End Function

Private Function StripTerminator(ByVal strString As String) As String
'-----------------------------------------------------------
' FUNCTION: StripTerminator
'
' |fffd||fffd||fffd||fffd||fffd||fffd||316||fffd||fffd||fffd||fffd||fffd||fffd||7576||fffd||fffd||fffd||fffd||fffd||fffd| 0 |fffd||315||fffd||fffd||fffd||fffd||fffd||fffd||d3dc||fffd||fffd||fffd||101|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||502||fffd||fffd||702||fffd||fffd|B
' |fffd||fffd||fffd| Windows API |fffd||102||44f|o|fffd||fffd||fffd||155||502||fffd||fffd||a0bd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||38f||6c2||24e|g|fffd|p|fffd||fffd||fffd||702||fffd||fffd|B
'
' |fffd||fffd||fffd||348||fffd||fffd||fffd|: [strString] - |fffd|I|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||d3dc||fffd||fffd||fffd||9576||fffd||fffd||fffd||fffd|
'
' |fffd||7c2||fffd|l: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||7576||fffd||fffd||fffd||fffd||fffd||fffd| 0 |fffd||315||fffd||fffd||fffd||fffd||fffd||fffd||d3dc||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'-----------------------------------------------------------
    Dim intZeroPos As Integer

    intZeroPos = InStrT(strString, Chr$(0))
    If intZeroPos > 0 Then
        StripTerminator = Left$(strString, intZeroPos - 1)
    Else
        StripTerminator = strString
    End If
End Function

Private Function InStrT(arg1, arg2, Optional arg3, Optional arg4)
    If IsMissing(arg4) Then
        If IsMissing(arg3) Then
            InStrT = InStr(1, UCase(arg1), UCase(arg2), 0)
        Else
            InStrT = InStr(arg1, UCase(arg2), UCase(arg3), 0)
        End If
    Else
        If arg4 = 0 Then
            InStrT = InStr(arg1, arg2, arg3, 0)
        Else
            InStrT = InStr(arg1, UCase(arg2), UCase(arg3), 0)
        End If
    End If
End Function

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "comm95"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: commMdl for Excel95
'
' |fffd||c42c| : 2003.9 LSQ
'
'=================================================
Option Explicit

'Draw one border line of the given range
'nBordersIndex: -4160--xlTop; -4107--xlBottom; -4131--xlLeft; -4152--xlRight; 12--xlInsideHorizontal; 11--xlInsideVertical
'nLineStyle: xlContinuous/xlNone/xlDot/xlDash
'nBorderWeight: xlThick/xlMedium/xlThin/xlHairline
Function BorderLine95(ByVal rge As Range, nBordersIndex As Integer, nLineStyle As Integer, nBorderWeight As Integer)
Attribute BorderLine95.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim rgeTmp As Range, rgeTmp1 As Range
    Dim r As Integer, c As Integer
    
    r = rge.Rows.Count()
    c = rge.Columns.Count()
    
    If nBordersIndex = xlTop Then
        Set rgeTmp = rge.Rows(1)
        rgeTmp.Borders(xlTop).LineStyle = xlNone
        If rgeTmp.Row() > 1 Then
            Set rgeTmp1 = rgeTmp.Offset(-1, 0)
            rgeTmp1.Borders(xlBottom).LineStyle = xlNone
        End If
    ElseIf nBordersIndex = xlBottom Then
        Set rgeTmp = rge.Rows(r)
        rgeTmp.Borders(xlBottom).LineStyle = xlNone
        Set rgeTmp1 = rgeTmp.Offset(1, 0)
        rgeTmp1.Borders(xlTop).LineStyle = xlNone
    ElseIf nBordersIndex = xlLeft Then
        Set rgeTmp = rge.Columns(1)
        rgeTmp.Borders(xlLeft).LineStyle = xlNone
        If rgeTmp.Column() > 1 Then
            Set rgeTmp1 = rgeTmp.Offset(0, -1)
            rgeTmp1.Borders(xlRight).LineStyle = xlNone
        End If
    ElseIf nBordersIndex = xlRight Then
        Set rgeTmp = rge.Columns(c)
        rgeTmp.Borders(xlRight).LineStyle = xlNone
        Set rgeTmp1 = rgeTmp.Offset(0, 1)
        rgeTmp1.Borders(xlLeft).LineStyle = xlNone
    ElseIf nBordersIndex = 12 Then      'xlInsideHorizontal
        If r > 1 Then r = r - 1
        Set rgeTmp = rge.Rows("1:" & r)
        rgeTmp.Borders(xlBottom).LineStyle = xlNone
        nBordersIndex = xlBottom
        Set rgeTmp1 = rgeTmp.Offset(1, 0)
        rgeTmp1.Borders(xlTop).LineStyle = xlNone
    ElseIf nBordersIndex = 11 Then      'xlInsideVertical
        If c > 1 Then c = c - 1
        Set rgeTmp = rge.Columns("A:" & nTo26Str(c))
        nBordersIndex = xlRight
        rgeTmp.Borders(xlRight).LineStyle = xlNone
        Set rgeTmp1 = rgeTmp.Offset(0, 1)
        rgeTmp1.Borders(xlLeft).LineStyle = xlNone
    Else        'unknown
        Set rgeTmp = rge
    End If
        
    With rgeTmp.Borders(nBordersIndex)
        If nLineStyle <> xlContinuous Then .LineStyle = nLineStyle
        If nLineStyle <> xlNone Then .Weight = nBorderWeight
        .ColorIndex = xlAutomatic
    End With
End Function

'nInsideHor, nInsideVer: 0--None; 1--Only first row/column; >=2--All rows/columns
'nWrapRowNo: >0--the No. of the row in which the text will be wraped; 0--none
'Function BorderFrame(rgeObj As Range, nOutsideWgt As XlBorderWeight, nInsideWgt As XlBorderWeight      'for 2000
Function BorderFrame95(ByVal RgeObj As Range, nOutsideWgt As Integer, nInsideWgt As Integer, _
        ByVal nInsideHor As Integer, ByVal nInsideVer As Integer, Optional ByVal nWrapRowNo)
Attribute BorderFrame95.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim nRowNum As Long, nColNum As Integer
    Dim rge1 As Range
    
    If UCase(TypeName(nWrapRowNo)) = "ERROR" Then nWrapRowNo = 0
    nRowNum = RgeObj.Rows.Count
    nColNum = RgeObj.Columns.Count
    
    If nColNum > 1 And nInsideVer > 0 Then
        If nInsideVer = 1 Then
            Set rge1 = RgeObj.Columns(1)
            Call BorderLine95(rge1, xlRight, xlContinuous, nInsideWgt)
        Else
            Call BorderLine95(RgeObj, 11, xlContinuous, nInsideWgt)
        End If
    End If
    
    If nRowNum > 1 And nInsideHor > 0 Then
        If nInsideHor = 1 Then
            Set rge1 = RgeObj.Rows(1)
            Call BorderLine95(rge1, xlBottom, xlContinuous, nInsideWgt)
        Else
            Call BorderLine95(RgeObj, 12, xlContinuous, nInsideWgt)
        End If
    End If
    
    Call BorderLine95(RgeObj, xlTop, xlContinuous, nOutsideWgt)
    Call BorderLine95(RgeObj, xlBottom, xlContinuous, nOutsideWgt)
    Call BorderLine95(RgeObj, xlLeft, xlContinuous, nOutsideWgt)
    Call BorderLine95(RgeObj, xlRight, xlContinuous, nOutsideWgt)
    
    If nWrapRowNo > 0 Then
        Set rge1 = RgeObj.Rows(nWrapRowNo)
        rge1.VerticalAlignment = xlTop
        rge1.WrapText = True
    End If
End Function

'=== EOF ===
Attribute VB_Name = "comm97_"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: commMdl for Excel97 or later
'
' |fffd||c42c| : 2003.9 LSQ
'
'=================================================
Option Explicit

'Draw one border line of the given range
'nBordersIndex: xlEdgeTop/xlEdgeBottom/xlEdgeLeft/xlEdgeRight/xlInsideHorizontal/xlInsideVertical
'nLineStyle: xlContinuous/xlNone/xlDot/xlDash
'nBorderWeight: xlThick/xlMedium/xlThin/xlHairline
'
Function BorderLine97(ByVal rge As Range, nBordersIndex As Integer, nLineStyle As Integer, nBorderWeight As Integer)
Attribute BorderLine97.VB_ProcData.VB_Invoke_Func = " \n14"
    With rge.Borders(nBordersIndex)
        .LineStyle = nLineStyle
        If nLineStyle <> xlNone Then .Weight = nBorderWeight
        .ColorIndex = xlAutomatic
    End With
End Function

'nInsideHor, nInsideVer: 0--None; 1--Only first row/column; >=2--All rows/columns
'nWrapRowNo: >0--the No. of the row in which the text will be wraped; 0--none
'Function BorderFrame(rgeObj As Range, nOutsideWgt As XlBorderWeight, nInsideWgt As XlBorderWeight      'for 2000
'
Function BorderFrame97(ByVal RgeObj As Range, nOutsideWgt As Integer, nInsideWgt As Integer, _
        ByVal nInsideHor As Integer, ByVal nInsideVer As Integer, Optional ByVal nWrapRowNo)
Attribute BorderFrame97.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim nRowNum As Long, nColNum As Integer
    Dim rge1 As Range
    
    If UCase(TypeName(nWrapRowNo)) = "ERROR" Then nWrapRowNo = 0
    
    nRowNum = RgeObj.Rows.Count
    nColNum = RgeObj.Columns.Count
    
    RgeObj.BorderAround xlContinuous, nOutsideWgt
    
    If nColNum > 1 And nInsideVer > 0 Then
        If nInsideVer = 1 Then
            Set rge1 = RgeObj.Columns(1)
            Call BorderLine(rge1, xlRight, xlContinuous, nInsideWgt)       'xlEdgeRight
        Else
            Call BorderLine97(RgeObj, 11, xlContinuous, nInsideWgt)     'xlInsideVertical
        End If
    End If
    
    If nRowNum > 1 And nInsideHor > 0 Then
        If nInsideHor = 1 Then
            Set rge1 = RgeObj.Rows(1)
            Call BorderLine97(rge1, xlBottom, xlContinuous, nInsideWgt)        'xlEdgeBottom
        Else
            Call BorderLine97(RgeObj, 12, xlContinuous, nInsideWgt)     'xlInsideHorizontal
        End If
    End If
    If nWrapRowNo > 0 Then
        Set rge1 = RgeObj.Rows(nWrapRowNo)
        rge1.VerticalAlignment = xlTop
        rge1.WrapText = True
    End If
End Function

'=== EOF ===
Attribute VB_Name = "commAllVer"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: commMdl for Excel all version
'
' |fffd||c42c| : Oct 2003, PYJ
'
'=================================================
Option Explicit

Function IsVer95() As Boolean
Attribute IsVer95.VB_ProcData.VB_Invoke_Func = " \n14"
    If val(Application.Version) < 8 Then    'Excel 95
        IsVer95 = True
    Else
        IsVer95 = False
    End If
End Function

'nBordersIndex: -4160--xlTop; -4107--xlBottom; -4131--xlLeft; -4152--xlRight; 12--xlInsideHorizontal; 11--xlInsideVertical
Function BorderLine(ByVal rge As Range, nBordersIndex As Integer, nLineStyle As Integer, nBorderWeight As Integer)
Attribute BorderLine.VB_ProcData.VB_Invoke_Func = " \n14"
    If IsVer95() Then    'Excel 95
        Call BorderLine95(rge, nBordersIndex, nLineStyle, nBorderWeight)
    Else    '97-
        If nBordersIndex = xlTop Then
            nBordersIndex = 8           'xlEdgeTop
        ElseIf nBordersIndex = xlBottom Then
            nBordersIndex = 9           'xlEdgeBottom
        ElseIf nBordersIndex = xlLeft Then
            nBordersIndex = 7           'xlEdgeLeft
        ElseIf nBordersIndex = xlRight Then
            nBordersIndex = 10          'xlEdgeRight
        End If
        '11--xlInsideVertical; 12--xlInsideHorizontal are the same
        Call BorderLine97(rge, nBordersIndex, nLineStyle, nBorderWeight)
    End If
End Function

Function BorderFrame(ByVal RgeObj As Range, nOutsideWgt As Integer, nInsideWgt As Integer, _
        ByVal nInsideHor As Integer, ByVal nInsideVer As Integer, Optional ByVal nWrapRowNo)
Attribute BorderFrame.VB_ProcData.VB_Invoke_Func = " \n14"
    If IsVer95() Then    'Excel 95
        Call BorderFrame95(RgeObj, nOutsideWgt, nInsideWgt, nInsideHor, nInsideVer, nWrapRowNo)
    Else    '97-
        Call BorderFrame97(RgeObj, nOutsideWgt, nInsideWgt, nInsideHor, nInsideVer, nWrapRowNo)
    End If
End Function

'modify |fffd|X|fffd||fffd||fffd||fffd||fffd||fffd| chart
Sub MdfChartKeikou(ByVal nXSmpNum As Integer)
Attribute MdfChartKeikou.VB_ProcData.VB_Invoke_Func = " \n14"
    If IsVer95() Then    'Excel 95
        ActiveChart.Axes(xlCategory).Select
        With Selection
            .MinorTickMark = xlInside
            .TickLabelSpacing = Int(nXSmpNum / 6 + 0.999)
            .TickMarkSpacing = .TickLabelSpacing
        End With
    Else    '97-
        Call CharNoAutoFont
        ActiveChart.Axes(xlCategory).TickMarkSpacing = ActiveChart.Axes(xlCategory).TickLabelSpacing
    End If
End Sub

'common chart Font |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| & Ticks
Sub SetCommChart(ByVal strGrpName As String, ByVal num As Integer)
Attribute SetCommChart.VB_ProcData.VB_Invoke_Func = " \n14"
    ActiveSheet.ChartObjects(strGrpName).Activate
    If Not IsVer95() Then    'Excel 97 -
        Call CharNoAutoFont
    End If
    ActiveChart.PlotArea.Interior.ColorIndex = xlNone
    ActiveChart.Axes(xlCategory).Select
    With Selection
        .CrossesAt = 1
        If IsVer95() Then .TickLabelSpacing = Int(num / 6 + 0.999)
        '.TickMarkSpacing = .TickLabelSpacing
        .AxisBetweenCategories = False
        .ReversePlotOrder = False
    End With
End Sub

'
'H12.12.7 LSQ (copied from TK2!commMdl)
'
Sub SortByCol(ByVal zenRge, bDsnt As Boolean)
Attribute SortByCol.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim bgnCel As Range
    Dim orderVal As Integer
    
    Set bgnCel = zenRge.Offset(0, 0).Range("A2")
    If bDsnt Then orderVal = xlDescending Else orderVal = xlAscending
    
    If IsVer95() Then    'Excel 95
        zenRge.Sort Key1:=bgnCel, Order1:=orderVal, Header:=xlGuess, _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
    Else    '97-
        zenRge.Sort Key1:=bgnCel, Order1:=orderVal, Header:=xlGuess, _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, SortMethod:=1 'xlPinYin
    End If
End Sub
'
'H13.2.1 LSQ (from TK3!commMdl)
'
Sub SortByCol_data(ByVal dataRge, ByVal orderCol As Integer, ByVal bDsnt As Boolean)
Attribute SortByCol_data.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim bgnCel As Range
    Dim orderVal As Integer
    
    If orderCol <= 0 Then Exit Sub
    
    Set bgnCel = dataRge(1, orderCol)
    If bDsnt Then orderVal = xlDescending Else orderVal = xlAscending
    
    If IsVer95() Then    'Excel 95
        dataRge.Sort Key1:=bgnCel, Order1:=orderVal, Header:=xlNo, _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
    Else    '97-
        dataRge.Sort Key1:=bgnCel, Order1:=orderVal, Header:=xlNo, _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, SortMethod:=1 'xlPinYin
    End If
End Sub
'
'|fffd|Q|fffd||fffd||242||fffd||fffd|\|fffd|[|fffd|g
'
'H13.2.8 LSQ
Sub SortBy2Col_data(ByVal dataRge, ByVal colA As Integer, ByVal bDsntA As Boolean, _
    ByVal colB As Integer, ByVal bDsntB As Boolean)
Attribute SortBy2Col_data.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim celA As Range, celB As Range
    Dim orderValA As Integer, orderValB As Integer
    
    If colA <= 0 Or colB <= 0 Then Exit Sub
    
    Set celA = dataRge(1, colA)
    Set celB = dataRge(1, colB)
    
    If bDsntA Then orderValA = xlDescending Else orderValA = xlAscending
    If bDsntB Then orderValB = xlDescending Else orderValB = xlAscending
    
    If IsVer95() < 8 Then    'Excel 95
        dataRge.Sort Key1:=celA, Order1:=orderValA, Key2:=celB, order2:=orderValB, _
            Header:=xlNo, _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
    Else    '97-
        dataRge.Sort Key1:=celA, Order1:=orderValA, Key2:=celB, order2:=orderValB, _
            Header:=xlNo, _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, SortMethod:=1 'xlPinYin
    End If
End Sub
'
'moved from "fsubxx.XLS" 07.1.13 LSQ
'
Function CharNoAutoFont()
    ActiveChart.ChartArea.AutoScaleFont = False
End Function

'===EOF===
Attribute VB_Name = "commCheck"
'=======================================================
' |fffd|uSSS|fffd|\|fffd||fffd||fffd|vVer2.5 : Check Update User
'
' 2007.1 LSQ
'=======================================================
Option Explicit
Option Private Module

Public GVerMsg As String

Const csTKVer6_INI_Sect As String = "iSTAT"           '|fffd||fffd||fffd||fffd|INI-Section|fffd||fffd|
Const csTKVer6_INI_Key  As String = "VerMsg"          '|fffd||fffd||fffd||fffd|INI-Key|fffd||fffd|
Const MSG_NO_INIFILE As String = "|fffd||fffd||fffd||fffd||fffd||752||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd| " & vbCrLf & _
                                GName_Prog & "|fffd||fffd||fffd||103|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
         
#If Win64 Then
Private Declare PtrSafe Function GetIniKey Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
#Else
Private Declare Function GetIniKey Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
#End If

'
'return TRUE OK else Illegal user
'
Function UpdateUserCheck() As Boolean
    Dim sInI_Path As String
    Dim iRet As Integer
    
    sInI_Path = getPathName()
    iRet = SubUserCheck(sInI_Path)
    
    If iRet > 0 Then    'OK
        UpdateUserCheck = True
    Else                'FAILED
        MsgBox MSG_NO_INIFILE
        UpdateUserCheck = False
    End If
    
End Function
'
'return the length of the KEY VALUE
'
Private Function SubUserCheck(ByVal IniPath As String) As Long
    Dim tmpstr As String
    tmpstr = Space$(1024)
    SubUserCheck = GetIniKey(csTKVer6_INI_Sect, _
                      csTKVer6_INI_Key, _
                      "", tmpstr, 1024, _
                      IniPath & "\" & "MIST01.ini")
    '
    GVerMsg = tmpstr
End Function

'=== EOF ===


Attribute VB_Name = "commChk"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: |fffd||fffd||fffd||28a||590||fffd|
'
'03.8 LSQ
'=================================================
Option Explicit

'
'|fffd|u|fffd|b|fffd|N|fffd||311||fffd||fffd||742||fffd||fffd||1c2||fffd||fffd||fffd||fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N|fffd||fffd||fffd||fffd|
'
Function isBookExist(ByVal bkName As String) As Boolean
Attribute isBookExist.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim bk As Workbook
    
    isBookExist = False
    
    If Workbooks.Count = 0 Then Exit Function
    
    For Each bk In Workbooks
        If UCase(Trim(bkName)) = UCase(Trim(bk.Name)) Then
            isBookExist = True
            Exit Function
        End If
    Next
    
End Function
'
Function isCellEmpty(ByVal theCell As Range) As Boolean
Attribute isCellEmpty.VB_ProcData.VB_Invoke_Func = " \n14"
    isCellEmpty = (theCell = Empty)
End Function
'
Function isCellNotEmpty(ByVal theCell As Range) As Boolean
Attribute isCellNotEmpty.VB_ProcData.VB_Invoke_Func = " \n14"
    isCellNotEmpty = (theCell <> Empty)
End Function

'=== EOF ===

Attribute VB_Name = "commConst"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: The Global Constants Definition
'
'2007.1 LSQ
'=================================================
Option Explicit

'--- menu name ---
Public Const menuName_Ysk As String = "|fffd|}|fffd||fffd||fffd|`|fffd|\|fffd||fffd|"
Public Const GName_Prog As String = "|fffd|}|fffd||fffd||fffd|`|fffd|\|fffd||fffd| Ver1.0"
Public Const RibbonMenu As String = "MIST_Ribbon.xlam"

'--- book name ---
Public Const GxlaBkGraph1 As String = "MIST_GrpA.xla"
Public Const GxlaBkGraph2 As String = "MIST_GrpB.xla"
Public Const GxlaBkDllR As String = "MIST_DLLR.xla"

'--- workSheet name ---
Public Const G_StName_Info As String = "Info"
'
'--- method name ---
Public Const YSK_SKN As Integer = 1     '|fffd||fffd||fffd||595||fffd||fffd||fffd|
Public Const YSK_SKNZU_A As Integer = 2 '|fffd|U|fffd|z|fffd|}(|fffd||fffd||fffd||315|t|fffd||fffd||fffd|_|fffd|O|fffd||fffd||fffd|t)
Public Const YSK_SKNZU_B As Integer = 3 '|fffd|U|fffd|z|fffd|}(|fffd|_|fffd|O|fffd||fffd||fffd|t)
Public Const YSK_EMA As Integer = 4     '|fffd||fffd||fffd|d|fffd||693||fffd||fffd||fffd||fffd||3d6|@
Public Const YSK_EPA As Integer = 5     'EPA|fffd|@
Public Const YSK_KK As Integer = 6      '|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|
Public Const YSK_JKK As Integer = 7     '|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|
Public Const YSK_GS As Integer = 8      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Const YSK_MM As Integer = 9      '|fffd||fffd||fffd||295||fffd||fffd||3d6|@

'--- graph name ---
Public Const GRAPH_NAME_YSKM As String = "YSK_M"
Public Const GRAPH_NAME_EPA1 As String = "EPA_TCSI_TC"
Public Const GRAPH_NAME_EPA2 As String = "EPA_S"
Public Const GRAPH_NAME_EPA3 As String = "EPA_I"
Public Const GRAPH_NAME_KEIKOU As String = "KEIKOU"
Public Const GRAPH_NAME_YOUIN As String = "YOUIN"
Public Const GRAPH_NAME_YSKY As String = "YSK_Y"
Public Const GRAPH_NAME_YSKY_A As String = "YSK_Y_A"
Public Const GRAPH_NAME_SUM As String = "SUM_G"


Public Const YSK_USB_VERSION As Boolean = True                     'for USB version, set this constant to TRUE
'=== EOF ===
Attribute VB_Name = "commDir"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: |fffd||fffd||fffd||28a||590||fffd|
'
'03.8 LSQ
'=================================================
Option Explicit
'
Sub changeToYSKDir()
Attribute changeToYSKDir.VB_ProcData.VB_Invoke_Func = " \n14"
    Call changeToPath(getPathName())
End Sub
'
Sub changeToCurDir()
Attribute changeToCurDir.VB_ProcData.VB_Invoke_Func = " \n14"
    Call changeToPath(CurDir())
End Sub
'
Sub changeToDefaultDir()
Attribute changeToDefaultDir.VB_ProcData.VB_Invoke_Func = " \n14"
    changeToPath (Application.DefaultFilePath)
End Sub
'
Sub changeToPath(ByVal pathName As String)
Attribute changeToPath.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim driveName As String
        
    If Trim(pathName) = "" Then Exit Sub 'NullString
        
    driveName = Left(pathName, 1)
    If driveName <> "\" Then
        ChDrive driveName
    End If
    ChDir pathName
End Sub
'
'=== EOF ===
Attribute VB_Name = "commDlg"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: DialogBox
'
'03.8 LSQ, PYJ
'=================================================
Option Explicit

Dim f_aDlgSht As DialogSheet
Const YI_MAX_X_NV As Integer = 200      '|fffd|d|fffd||fffd|A|fffd||fffd||fffd||350||fffd||fffd||fffd||fffd||3d0||fffd||fffd||90||fffd||fffd||fffd||fffd|

'dlgID : see YSK_*
'
Private Function getDlgObj(ByVal dlgID As Integer) As DialogSheet
    Dim dlgNameStr As String
    
    Select Case dlgID
        Case YSK_SKN:       dlgNameStr = "|fffd||fffd||fffd||595||fffd||fffd||fffd|Dlg"
        Case YSK_SKNZU_A:   dlgNameStr = "|fffd|U|fffd|z|fffd|}ADlg"
        Case YSK_SKNZU_B:   dlgNameStr = "|fffd|U|fffd|z|fffd|}BDlg"
        Case YSK_EMA:       dlgNameStr = "|fffd||fffd||fffd|d|fffd||693||fffd|Dlg"
        Case YSK_EPA:       dlgNameStr = "EPADlg"
        Case YSK_KK:        dlgNameStr = "|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|Dlg"
        Case YSK_JKK:       dlgNameStr = "|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|Dlg"
        Case YSK_GS:        dlgNameStr = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|Dlg"
        Case YSK_MM:        dlgNameStr = "MonthlyModelDlg"
        Case Else:          dlgNameStr = ""
    End Select
    
    If dlgNameStr = "" Then
        Set getDlgObj = Nothing
    Else
        Set getDlgObj = ThisWorkbook.DialogSheets(dlgNameStr)
    End If
End Function

Function GetDlgInp(nDlgId As Integer) As Boolean
Attribute GetDlgInp.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim bRtn As Boolean
    
    Set f_aDlgSht = getDlgObj(nDlgId)
    If f_aDlgSht Is Nothing Then
        GetDlgInp = False
        Exit Function
    End If
    
    Application.ScreenUpdating = True
    If nDlgId = YSK_JKK Or nDlgId = YSK_GS Then    'H15.9.25 LSQ
        f_aDlgSht.GroupBoxes("grpXSel").Visible = False
    End If
    Do
    
        bRtn = f_aDlgSht.Show
        If Not bRtn Then Exit Do    'Cancel
        
        bRtn = GetCommDlgInp(nDlgId)
        If bRtn Then bRtn = GetOtherInp(nDlgId)
        
    Loop Until bRtn
    Application.ScreenUpdating = False
    
    'check if there is non data
    If bRtn And g_aDialog.bStopNonData Then
        bRtn = CheckIfAllData(g_aDialog.rgeInp, g_aDialog.bTitle, g_aDialog.bColData)
        If bRtn And (nDlgId = YSK_JKK Or nDlgId = YSK_GS Or nDlgId = YSK_SKN) And Not (g_aDialog.RgeX Is Nothing) Then
            bRtn = CheckIfAllData(g_aDialog.RgeX, g_aDialog.bTitle, g_aDialog.bColData)
        End If
        If Not bRtn Then MsgBox "|fffd||fffd||fffd|l|fffd||20a|O|fffd||303|f|fffd|[|fffd|^, |fffd||fffd||fffd|~"
    End If
    
    'copy data to a temp sheet
    If bRtn Then
        If (nDlgId = YSK_JKK Or nDlgId = YSK_GS Or nDlgId = YSK_SKN) And Not (g_aDialog.RgeX Is Nothing) Then
            bRtn = moveData_YX(g_aDialog.rgeInp, g_aDialog.RgeX, g_aDialog.bColData, g_aDialog.bTitle, g_aDialog.bXSel, g_aDialog.dlgJkk.bTimeLag)
            'H15.9.27 LSQ
            'bRtn = moveData_YX(g_aDialog.rgeInp, g_aDialog.rgeX, g_aDialog.bColData, g_aDialog.bTitle, g_aDialog.bXSel)
        Else
            Set g_aDialog.rgeInp = moveData(g_aDialog.rgeInp, "Y", g_aDialog.bColData, g_aDialog.bTitle, False, getTempSheet().Range("A1"))
        End If
    End If
    If bRtn Then
        g_aDialog.bColData = True
        g_aDialog.bTitle = True
        g_aDialog.bXSel = False
        g_aDialog.dlgJkk.bTimeLag = False       'Sep 2003, PYJ
    End If
    
    GetDlgInp = bRtn
End Function

'check if all cells in the range are numeric data except the first title row
Private Function CheckIfAllData(ByVal rgeData As Range, ByVal bTitle As Boolean, ByVal bColData As Boolean) As Boolean
    Dim r As Integer, c As Integer, n As Integer
    Dim sht As Worksheet
    Dim rgeDataTmp As Range
    
    Set sht = ActiveSheet
    rgeData.Worksheet.Activate
    r = rgeData.Rows.Count
    c = rgeData.Columns.Count
    '
    If bColData Then
        Set rgeDataTmp = rgeData.Range(Cells(2, 1), Cells(r, c))
        r = r - 1
    Else
        Set rgeDataTmp = rgeData.Range(Cells(1, 2), Cells(r, c))
        c = c - 1
    End If
    n = Application.Count(rgeDataTmp)
    
    CheckIfAllData = forcIIf(n = r * c, True, False)
    
    sht.Activate
End Function

Private Function GetCommDlgInp(nDlgId As Integer) As Boolean
    Dim strTmp As String, rgeTmp As Range, i As Integer
    Dim tmp1, tmp2
    
    On Error Resume Next
    
    'error is cleared automatically after statement "On Error Resume Next"
    
    GetCommDlgInp = False
    
    '|fffd||693|I|fffd||3d0||fffd||fffd||348||fffd| or |fffd||fffd||fffd||354||348||fffd|1
    strTmp = f_aDlgSht.EditBoxes("editY").Text
    If GetInputRange(strTmp, rgeTmp) = False Then
        MsgBox "|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||354||348||342||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B"
        'MsgBox "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|B"
        Exit Function
    End If
    Set g_aDialog.rgeInp = rgeTmp
    
    '|fffd|f|fffd|[|fffd|^|fffd|n|fffd||fffd||30c||fffd||fffd||fffd|
    g_aDialog.bColData = True '(f_aDlgSht.OptionButtons("optDiret1") = xlOn)
    
    '1|fffd|s|fffd||fffd||682||30d||fffd||fffd||68e||fffd||fffd|
    g_aDialog.bTitle = True '(f_aDlgSht.OptionButtons("optData1") = xlOn)
    
    '|fffd||fffd||fffd|l|fffd||20a|O|fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd|
    g_aDialog.bStopNonData = False
    g_aDialog.bStopNonData = (f_aDlgSht.OptionButtons("optStop") = xlOn)
    
    
    If nDlgId = YSK_SKN Then GetCommDlgInp = True: Exit Function        '|fffd||fffd||fffd||595||fffd||fffd||fffd|

    '|fffd|O|fffd||fffd||fffd|t|fffd|\|fffd||fffd|
    g_aDialog.bGraph = False
    If f_aDlgSht.OptionButtons("optGrp2") = xlOn Then g_aDialog.bGraph = True
    
    '|fffd||fffd||fffd||fffd||fffd|`|fffd||fffd|
    g_aDialog.nTimeStyle = 0
    For i = 1 To 4
        If f_aDlgSht.OptionButtons("optTime" & i) = xlOn Then
            g_aDialog.nTimeStyle = i
            Exit For
        End If
    Next
    
    '|fffd|J|fffd|n|fffd|N|fffd||fffd|
    tmp1 = f_aDlgSht.EditBoxes("editYear").Text
    tmp2 = f_aDlgSht.EditBoxes("editMonth").Text
    g_aDialog.nYearBgn = val(tmp1)
    g_aDialog.nMonth = val(tmp2)
    If g_aDialog.nTimeStyle = 1 Or g_aDialog.nTimeStyle = 2 Or g_aDialog.nTimeStyle = 3 Then
        If Not IsNumeric(tmp1) Or g_aDialog.nYearBgn < 1900 Or g_aDialog.nYearBgn > 2100 Then
            MsgBox "|fffd|J|fffd|n|fffd||fffd||fffd||fffd||fffd||314|N|fffd||fffd||fffd||fffd||342||fffd||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|B|fffd|i1900|fffd|N|fffd|`2100|fffd|N|fffd|j"
            Exit Function
        End If
        If g_aDialog.nTimeStyle = 1 Or g_aDialog.nTimeStyle = 2 Then            '|fffd||fffd||fffd||fffd|
            If Not IsNumeric(tmp2) Or g_aDialog.nMonth < 1 Or g_aDialog.nMonth > 12 Then
                MsgBox "|fffd|J|fffd|n|fffd||fffd||fffd||fffd||fffd||30c||fffd||fffd||fffd||fffd||fffd||342||fffd||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|B|fffd|i|fffd|P|fffd|`|fffd|P|fffd|Q|fffd|j"
                Exit Function
            End If
        'ElseIf g_aDialog.nTimeStyle = 2 Then        '|fffd|l|fffd||fffd||fffd||fffd|
        '    If Not IsNumeric(tmp2) Or g_aDialog.nMonth < 1 Or g_aDialog.nMonth > 12 Then
        '        MsgBox "|fffd|J|fffd|n|fffd||fffd||fffd||fffd||fffd||30a||fffd||fffd||fffd||fffd||fffd||342||fffd||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|B|fffd|i|fffd|P|fffd|`|fffd|S|fffd|j"
        '        Exit Function
        '    End If
        End If
    End If
    
    GetCommDlgInp = True
    On Error GoTo 0
End Function

Private Function GetOtherInp(nDlgId As Integer) As Boolean
    Dim nTmp1 As Integer, nTmp2 As Integer, tmp1, tmp2
    Dim i As Integer, bRtn As Boolean
    Dim dTmp As Double
    
    GetOtherInp = False
    On Error Resume Next
    
    'error is cleared automatically after statement "On Error Resume Next"
    
    Select Case nDlgId
        Case YSK_SKN:                                            '|fffd||fffd||fffd||595||fffd||fffd||fffd|Dlg"
            g_aDialog.dlgSkn.nJudge = forcIIf(f_aDlgSht.OptionButtons("optKentei1") = xlOn, 1, 2)
            tmp1 = f_aDlgSht.EditBoxes("editCompVal").Text
            tmp2 = f_aDlgSht.EditBoxes("editTimeLag").Text
            dTmp = val(tmp1): nTmp2 = val(tmp2)
            If (g_aDialog.dlgSkn.nJudge = 2 And (Not IsNumeric(tmp1) Or dTmp <= -1 Or dTmp >= 1)) Then
                MsgBox "|fffd||fffd|r|fffd|l|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
                Exit Function
            End If
            If Not IsNumeric(tmp2) Or nTmp2 < -30 Or nTmp2 > 30 Then
                If Trim(tmp2) = "" Then
                    nTmp2 = 0
                Else
                    MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd|l|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
                    Exit Function
                End If
            End If
            g_aDialog.dlgSkn.dCompVal = dTmp: g_aDialog.dlgSkn.nTimeLag = nTmp2
            bRtn = GetSknDlgInp()
            If Not bRtn Then Exit Function
        'Case YSK_SKNZU_A:   '"|fffd|U|fffd|z|fffd|}ADlg"
        'Case YSK_SKNZU_B:   '"|fffd|U|fffd|z|fffd|}BDlg"
        Case YSK_EMA:                                            '"|fffd||fffd||fffd|d|fffd||693||fffd|Dlg"
            tmp1 = f_aDlgSht.EditBoxes("editCir").Text: nTmp1 = val(tmp1)
            If Not IsNumeric(tmp1) Or nTmp1 < 3 Or nTmp1 > 31 Then
                MsgBox "|fffd|T|fffd|C|fffd|N|fffd||fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||fffd|j|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
                Exit Function
            End If
            g_aDialog.dlgEma.nSmpNum = nTmp1
        Case YSK_EPA:                                            '"EPADlg"
            For i = 1 To 3
                If f_aDlgSht.OptionButtons("optMod" & i) = xlOn Then
                    g_aDialog.dlgEpa.nMod = i
                    Exit For
                End If
            Next i
        Case YSK_KK:                                             '"|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|Dlg"
            bRtn = GetKkDlgInp()
            If Not bRtn Then Exit Function
        Case YSK_JKK:                                            '"|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|Dlg"
            bRtn = GetJkkDlgInp()
            If Not bRtn Then Exit Function
        Case YSK_MM:

        Case Else 'YSK_GS:  '"|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|Dlg"
            bRtn = GetGsDlgInp()
            If Not bRtn Then Exit Function
    End Select

    Set g_aDialog.rgeOutBgn = GetOutputRgeBgn(f_aDlgSht, g_aDialog.rgeInp)
    If Not (g_aDialog.rgeOutBgn Is Nothing) Then GetOtherInp = True
    'GetOtherInp = GetOutputRgeBgn()    'H15.9.26 LSQ cmt
    On Error GoTo 0
End Function

'|fffd||fffd||fffd||28f|o|fffd||354||348||fffd|
'return Nothing on error
Function GetOutputRgeBgn(ByVal aDlgSht As DialogSheet, ByVal rgeDataIn As Range) As Range
Attribute GetOutputRgeBgn.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim strTmp As String, rgeTmp As Range
    Dim shtTmp As Worksheet
    
    Set GetOutputRgeBgn = Nothing
    If aDlgSht.OptionButtons("optOut2") = xlOn Then
        strTmp = aDlgSht.EditBoxes("editOutput").Text
        If GetInputRange(strTmp, rgeTmp) = False Then
            MsgBox "|fffd|f|fffd|[|fffd|^|fffd|o|fffd||354||348||342||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B"
            Exit Function
        End If
        Set GetOutputRgeBgn = rgeTmp
    Else
        Set shtTmp = rgeDataIn.Worksheet.Parent.Worksheets.Add
        Set rgeTmp = shtTmp.Range("B2")
        Set GetOutputRgeBgn = rgeTmp
        rgeDataIn.Worksheet.Activate
    End If
End Function

'"|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|Dlg"
Private Function GetKkDlgInp() As Boolean
    Dim tmp1, nTmp1 As Integer, i As Integer
    
    GetKkDlgInp = False
    '|fffd|\|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd|
    tmp1 = f_aDlgSht.EditBoxes("edityskData").Text
    nTmp1 = val(tmp1)
    If Not IsNumeric(tmp1) Or nTmp1 < 1 Then
        MsgBox "|fffd|\|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
        Exit Function
    End If
    g_aDialog.dlgKk.nProdict = nTmp1
    
    '|fffd||fffd||fffd||fffd|l
    For i = 1 To 3
        If f_aDlgSht.OptionButtons("optUpper" & i) = xlOn Then
            g_aDialog.dlgKk.nUpLimitFlg = i
            Exit For
        End If
    Next i
    If g_aDialog.dlgKk.nUpLimitFlg = 3 Then
        tmp1 = f_aDlgSht.EditBoxes("editUpper").Text
        If Not IsNumeric(tmp1) Then         'Oct 7 2003, PYJ
            MsgBox "|fffd||fffd||fffd||fffd|l|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
            Exit Function
        End If
        g_aDialog.dlgKk.dUpLimit = val(tmp1)
    End If
    
    'g_aDialog.dlgKk.nSi = 0
    
    '|fffd||fffd||510||fffd||fffd||fffd|
    For i = 1 To 3
        If f_aDlgSht.OptionButtons("optSui" & i) = xlOn Then
            g_aDialog.dlgKk.nSuitei = i
            Exit For
        End If
    Next i
    
    '|fffd||590||fffd||fffd||fffd||fffd|w|fffd||fffd|
    For i = 1 To g_nKkFunNum
        If i = 14 Then
            g_aDialog.dlgKk.nmFuncSel(i) = 0
        Else
            If f_aDlgSht.CheckBoxes("chk" & i) = xlOn Then
                g_aDialog.dlgKk.nmFuncSel(i) = 1
            Else
                g_aDialog.dlgKk.nmFuncSel(i) = 0
            End If
        End If
    Next i
    
    GetKkDlgInp = True
End Function

'"|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|Dlg"
Private Function GetJkkDlgInp() As Boolean
    Dim tmp1, tmp2, rgeTmp As Range, i As Integer
    
    GetJkkDlgInp = False

    '|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||348||fffd|
    tmp1 = f_aDlgSht.EditBoxes("editX").Text
    If GetInputRange(tmp1, rgeTmp) = False Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||348||342||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B"
        Exit Function
    End If
    Set g_aDialog.RgeX = rgeTmp
    
    '|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||311|I|fffd||fffd|
    g_aDialog.bXSel = (f_aDlgSht.OptionButtons("optXslt2") = xlOn)
    
    '|fffd||fffd||510||fffd||fffd||fffd|
    For i = 1 To 3
        If f_aDlgSht.OptionButtons("optSui" & i) = xlOn Then
            g_aDialog.dlgJkk.nSuitei = i
            Exit For
        End If
    Next i
    
    '|fffd||3d0||fffd||fffd|I|fffd||fffd|@
    For i = 1 To 5
        If f_aDlgSht.OptionButtons("optMet" & i) = xlOn Then
            g_aDialog.dlgJkk.nMethod = i
            Exit For
        End If
    Next
    If g_aDialog.dlgJkk.nMethod = 5 Then g_aDialog.bGraph = False   '|fffd||fffd||fffd||fffd||fffd||fffd|@|fffd|O|fffd||fffd||fffd|t|fffd|\|fffd||fffd||fffd||fffd||fffd||202||fffd|
    
    '|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd|l
    g_aDialog.dlgJkk.bTimeLag = (f_aDlgSht.OptionButtons("optLag1") = xlOff)
    
    '|fffd||8414||fffd||fffd||fffd|O|fffd||30f|d|fffd||fffd|A
    g_aDialog.dlgJkk.bTesuk = (f_aDlgSht.OptionButtons("optTesukYes") = xlOn)
    
    '|fffd|e|fffd|l
    tmp1 = f_aDlgSht.EditBoxes("editFin").Text
    tmp2 = f_aDlgSht.EditBoxes("editFout").Text
    If Not IsNumeric(tmp1) Or Not IsNumeric(tmp2) Then
        MsgBox "|fffd|e|fffd|l|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
        Exit Function
    End If
    g_aDialog.dlgJkk.F_in = val(tmp1)
    g_aDialog.dlgJkk.F_out = val(tmp2)
    
    GetJkkDlgInp = True
End Function

'"|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|Dlg"
Private Function GetGsDlgInp() As Boolean
    Dim tmp1, tmp2, rgeTmp As Range, i As Integer
    
    GetGsDlgInp = False

    '|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||348||fffd|
    tmp1 = f_aDlgSht.EditBoxes("editX").Text
    If GetInputRange(tmp1, rgeTmp) = False Then
        Set g_aDialog.RgeX = Nothing
    Else
        Set g_aDialog.RgeX = rgeTmp
    End If
    
    '|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||311|I|fffd||fffd|
    g_aDialog.bXSel = (f_aDlgSht.OptionButtons("optXslt2") = xlOn)
    
    g_aDialog.dlgGs.nMinSmpLmt = 5
    If g_aDialog.nTimeStyle = 1 Then            '|fffd||fffd||fffd||fffd|
        g_aDialog.dlgGs.nMaxSmpLmt = 500 '2005.7 PYJ  old:48
        g_aDialog.dlgGs.nLmtSmp1 = 24
        g_aDialog.dlgGs.nLmtSmp2 = 36
    ElseIf g_aDialog.nTimeStyle = 2 Then        '|fffd|l|fffd||fffd||fffd||fffd|
        g_aDialog.dlgGs.nMaxSmpLmt = 500 '2005.7 PYJ  old:16
        g_aDialog.dlgGs.nLmtSmp1 = 12
        g_aDialog.dlgGs.nLmtSmp2 = 12
    ElseIf g_aDialog.nTimeStyle = 3 Then        '|fffd|N|fffd||fffd|
        g_aDialog.dlgGs.nMaxSmpLmt = 500 '2005.7 PYJ  old:20
        g_aDialog.dlgGs.nLmtSmp1 = 501   '2005.7 PYJ  old:21
        g_aDialog.dlgGs.nLmtSmp2 = 501   '2005.7 PYJ  old:21
    End If
    
    '|fffd||fffd||fffd|d|fffd||693||fffd|-------------------------------
    g_aDialog.dlgEma.nSmpNum = 3
    
    'EPA-------------------------------------
    g_aDialog.dlgEpa.nMod = 1
    
    '|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|--------------------------------
    For i = 1 To 7
        If f_aDlgSht.OptionButtons("optKK" & i) = xlOn Then
            g_aDialog.dlgGs.nKkMethod = i
            Exit For
        End If
    Next
    'g_aDialog.dlgKk.nSi = 1
    g_aDialog.dlgKk.nSuitei = 1      '|fffd||fffd||510||fffd||fffd||fffd|
    g_aDialog.dlgKk.nUpLimitFlg = 1  '|fffd||fffd||fffd||fffd|l
    g_aDialog.dlgKk.dUpLimit = 1
    '|fffd||590||fffd||fffd||fffd||fffd|w|fffd||fffd|
    For i = 1 To g_nKkFunNum
        g_aDialog.dlgKk.nmFuncSel(i) = 0
    Next i
    g_aDialog.dlgKk.nmFuncSel(1) = 1 '|fffd||fffd||fffd||fffd|
    g_aDialog.dlgKk.nmFuncSel(3) = 1 '|fffd||fffd||fffd|[|fffd|g
    g_aDialog.dlgKk.nmFuncSel(4) = 1 '|fffd||390||fffd|
    g_aDialog.dlgKk.nmFuncSel(6) = 1 '|fffd|w|fffd||fffd|
    g_aDialog.dlgKk.nmFuncSel(8) = 1 '|fffd||fffd||fffd|W|fffd|X|fffd|e|fffd|B|fffd|b|fffd|N
    g_aDialog.dlgKk.nmFuncSel(9) = 1 '|fffd|S|fffd||fffd||fffd|x|fffd||fffd||fffd|c
    
    '|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|----------------------
    g_aDialog.dlgJkk.nMethod = 1      '|fffd||3d0||fffd||fffd|I|fffd||fffd|@
    g_aDialog.dlgJkk.nSuitei = 1      '|fffd||fffd||510||fffd||fffd||fffd|
    g_aDialog.dlgJkk.bTimeLag = False '|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd|l
    g_aDialog.dlgJkk.bTesuk = False
    '|fffd|e|fffd|l
    g_aDialog.dlgJkk.F_in = 2#
    g_aDialog.dlgJkk.F_out = 2#
    
    GetGsDlgInp = True
End Function

'get the range from a dialog box input range string
'strRge: "[toukeidt.xls]temp!$A$1:$B$2" or "temp!$A$1:$B$2"
Function GetInputRange(ByVal strRge As String, ByRef rgeRtn As Range) As Boolean
Attribute GetInputRange.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim str1 As String, pos As Integer
    Dim wbk As Workbook, sht As Worksheet
    
    'get the workbook
    pos = InStr(strRge, "]")
    If pos > 2 Then
        str1 = Mid(strRge, 2, pos - 2)
        Set wbk = Workbooks(str1)
    Else
        Set wbk = ActiveWorkbook
    End If
    
    'get the worksheet
    strRge = Mid(strRge, pos + 1)
    pos = InStr(strRge, "!")
    If pos > 1 Then
        str1 = Mid(strRge, 1, pos - 1)
        Set sht = wbk.Worksheets(str1)
    Else
        Set sht = wbk.ActiveSheet
    End If
    
    'get the range
    str1 = Trim(Mid(strRge, pos + 1))
    If str1 = Empty Or str1 = "" Then
        GetInputRange = False
        Exit Function
    End If
    
    Set rgeRtn = sht.Range(FormulaA1_R1C1(str1, True))     'Sep 2003, PYJ
    
    GetInputRange = True
End Function

'copied from SSMCTHR1
'Aug 2003, PYJ
Sub setSmpNo(ByVal num As Long, ByVal toBgn As Range)
Attribute setSmpNo.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim ct
    Dim toBgnTmp As Range
    
    Set toBgnTmp = toBgn.Range("A1")
    For ct = 1 To num
        toBgnTmp = ct
        'next
        Set toBgnTmp = toBgnTmp.Offset(1, 0)
    Next ct

End Sub

'copied and mdf from SSMCTHR1
'Aug 2003, PYJ
Private Function moveData_YX(yRge As Range, xRge As Range, bColData As Boolean, bTitle As Boolean, bXSel As Boolean, bTimeLag As Boolean) As Boolean
    Dim dtStObj As Worksheet, tmpCel As Range, tmpRge As Range
    Dim yDBgn As Range, xDBgn As Range
    Dim xSmpNum As Integer, xItemNum As Integer, ySmpNum As Integer, smpNum As Integer, noDataNum As Integer
    moveData_YX = False
    '|fffd|f|fffd|[|fffd|^|fffd||fffd| TempSheet|fffd||590||fffd||fffd||fffd|
If False Then 'DEBUG
    Set dtStObj = Workbooks.Add.Worksheets(1)
Else
    Set dtStObj = getTempSheet()
End If
    Set tmpCel = dtStObj.Range("B1")
    Set yRge = moveData_Y(yRge, "Y", bColData, bTitle, False, tmpCel)
    Set xRge = moveData_X(xRge, "X", bColData, bTitle, bXSel, tmpCel.Offset(0, 1))
    If xRge.Rows.Count < 3 Then MsgBox "Lack of samples": Exit Function
    If bTimeLag Then Set xRge = MoveDataTimeLag(xRge)       'Sep 2003, PYJ
    
    ySmpNum = yRge.Rows.Count - 1
    xSmpNum = xRge.Rows.Count - 1
    xItemNum = xRge.Columns.Count
    Set yDBgn = yRge(2, 1)
    Set xDBgn = xRge(2, 1)
    
    If ySmpNum > xSmpNum Then ySmpNum = xSmpNum
    smpNum = xSmpNum
    
    If smpNum < 3 Then MsgBox "Lack of samples": Exit Function
    If xItemNum < 1 Or xItemNum > YI_MAX_X_NV Then MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30c||90||fffd||fffd||fffd||fffd||348||348||20a|O|fffd||142||fffd|": Exit Function
    
    xRge.Worksheet.Activate
    
    'delete no data & numbering and sort by Y --- bgn ---
    noDataNum = clearNoData(yDBgn, 1, xDBgn, xItemNum, smpNum)
    
    Set tmpCel = dtStObj.Range("A2")
    Call setSmpNo(smpNum, tmpCel)
    '
    tmpCel.Worksheet.Activate
    Set tmpRge = tmpCel.Range(Cells(1, 1), Cells(smpNum, 1 + xItemNum + 1))
    Call SortByCol_data(tmpRge, 2, False)   'sort by Y

    ySmpNum = Application.Count(yDBgn.Range("A1:A" & smpNum))
    xSmpNum = Application.Count(xDBgn.Range("A1:A" & smpNum))
    If ySmpNum > xSmpNum Then ySmpNum = xSmpNum
    
    Set tmpRge = tmpCel.Range(Cells(1, 1), Cells(ySmpNum, 1 + xItemNum + 1))
    Call SortByCol_data(tmpRge, 1, False)   'sort by SmpNo
    
    If ySmpNum < smpNum Then
        Set tmpRge = tmpCel.Range(Cells(ySmpNum + 1, 1), Cells(smpNum, 1 + xItemNum + 1))
        Call SortByCol_data(tmpRge, 3, False)   'sort by 1st col of X data, so that blanks will get to bottom
    End If
    If ySmpNum < xSmpNum Then
        Set tmpRge = tmpCel.Range(Cells(ySmpNum + 1, 1), Cells(xSmpNum, 1 + xItemNum + 1))
        Call SortByCol_data(tmpRge, 1, False)   'sort by SmpNo
    End If
    
    Set yRge = yRge.Range("A1:A" & ySmpNum + 1)
    Set xRge = xRge.Range(Cells(1, 1), Cells(xSmpNum + 1, xItemNum))
    moveData_YX = True
End Function

'Sep 2003, PYJ
Private Function MoveDataTimeLag(ByVal RgeX As Range) As Range
    Dim RgeTimeLag As Range, rge1 As Range
    Dim nItem As Integer, nSmp As Integer
    Dim i As Integer, nMinTimeLag As Integer, nTimeLag As Integer
    
    nItem = RgeX.Columns.Count
    nSmp = RgeX.Rows.Count
    nMinTimeLag = nSmp
    Set RgeTimeLag = RgeX.Range("A2")
    Set rge1 = RgeX.Range("A3:A" & nSmp)
    For i = 1 To nItem
        nTimeLag = val(RgeTimeLag(1, 1))
        If nTimeLag < nMinTimeLag Then nMinTimeLag = nTimeLag
        rge1.Copy rge1.Offset(nTimeLag - 1, 0)
        If nTimeLag > 0 Then
            RgeTimeLag.Range("A1:A" & nTimeLag) = ""
        End If
        Set RgeTimeLag = RgeTimeLag.Offset(0, 1)
        Set rge1 = rge1.Offset(0, 1)
    Next i
    Set MoveDataTimeLag = RgeX.Range("A1:" & nTo26Str(nItem) & nSmp - 1 + nMinTimeLag)
End Function

Private Function GetSknDlgInp() As Boolean
    Dim tmp1, tmp2, rgeTmp As Range, i As Integer
    
    GetSknDlgInp = False

    '|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||348||fffd|
    tmp1 = f_aDlgSht.EditBoxes("editX").Text
    If GetInputRange(tmp1, rgeTmp) = False Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||348||342||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B"
        Exit Function
    End If
    Set g_aDialog.RgeX = rgeTmp
    
    GetSknDlgInp = True
End Function

'=== EOF ===
Attribute VB_Name = "commMdl"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: |fffd||fffd||fffd||28a||590||fffd|
'
'02.7.10 LSQ mdf
'=================================================
Option Explicit

Sub changeToSSDir()
    Dim pathName As String, driveName As String
        
    pathName = getPathName()
    driveName = Left(pathName, 1)
    If driveName <> "\" Then
        ChDrive driveName
    End If
    ChDir pathName
End Sub
'
'|fffd|N|fffd||fffd|path|fffd||fffd||fffd||302||fffd||fffd||64fe||fffd||fffd||fffd||fffd|: |fffd||14c||fffd||242||fffd|"\"|fffd|}|fffd|[|fffd|N|fffd||fffd||fffd||202||fffd||fffd|B
'
Function getPathName() As String
Attribute getPathName.VB_ProcData.VB_Invoke_Func = " \n14"
    getPathName = ThisWorkbook.Path
End Function

Function getRangeInfo(ByVal rgestr As String, bkName As String, stName As String, ceName As String) As Boolean
    Dim wkstr As String, posBk As Long, posSt As Long, pos As Long
    Dim RgeObj As Range
    
    On Error Resume Next
    
    Set RgeObj = Range(rgestr)
    ceName = RgeObj.Address
    stName = RgeObj.Worksheet.Name
    bkName = RgeObj.Worksheet.Parent.Name
        
    getRangeInfo = IIf(Err.Number <> 0, False, True)
    
    On Error GoTo 0
    
'--- the following are not used ---
'07.1.29 LSQ
#If False Then
    '|fffd||7af||fffd||fffd||fffd||fffd||30e||64fe|
    wkstr = rgestr
    
    bkName = ActiveWorkbook.Name    'default
    pos = InStr(wkstr, "]")
    
#If True Then  '07.1.29; 05.12.17
    If pos > 2 Then 'point to other book
        bkName = Mid(wkstr, 2, pos - 2)
    End If
#Else
    If pos > 2 Then 'point to other book
        MsgBox "|fffd||283|u|fffd|b|fffd|N|fffd||314||348||342||34e|w|fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
        getRangeInfo = False
        Exit Function
    End If
#End If

    '|fffd|-|116||fffd||fffd||30e||64fe|
    wkstr = Mid(wkstr, pos + 1)
    
    stName = ActiveSheet.Name   'default
    pos = InStr(wkstr, "!")
    If pos > 1 Then stName = Mid(wkstr, 1, pos - 1)
    
    '|fffd||654||348||342||30e||64fe|
    ceName = Trim(Mid(wkstr, pos + 1))
    
    If ceName = Empty Or ceName = "" Then
        MsgBox MSG_ERR_DATARAGE
        getRangeInfo = False
        Exit Function
    End If
    
    If Application.ReferenceStyle = xlR1C1 Then     '|fffd|Q|fffd||18c|`|fffd||fffd||fffd||314||fffd||fffd||fffd| and R1C1|fffd||fffd|A1
        ceName = Application.ConvertFormula(Formula:=ceName, _
            fromReferenceStyle:=xlR1C1, _
            toReferenceStyle:=xlA1)
    End If
    
    getRangeInfo = True
#End If

End Function
'
'
Sub setZoom()
Attribute setZoom.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim flg
    flg = getResolutionFlag()
    If flg < 3 Then ActiveWindow.Zoom = 75 Else ActiveWindow.Zoom = 100
End Sub
'
'1=screen display true
'2=screen display false
'0=not specified
'
'H14.7.9 LSQ
Sub Msgbox_ScrnOption(ByVal msgStr As String, Optional ByVal flgScrn)
Attribute Msgbox_ScrnOption.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim savScrn As Boolean
    
    If UCase(TypeName(flgScrn)) = "ERROR" Then flgScrn = 1
    savScrn = Application.ScreenUpdating
    
    If flgScrn = 1 Then Application.ScreenUpdating = True
    If flgScrn = 2 Then Application.ScreenUpdating = False
    
    MsgBox msgStr
    
    Application.ScreenUpdating = savScrn
    
End Sub

Function nTo26Str(ByVal n As Integer) As String
Attribute nTo26Str.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim a1 As Integer, a2 As Integer
    
    nTo26Str = ""
    If Not (n >= 1 And n <= 256) Then Exit Function 'ERROR
    n = n - 1   '0 to 255
    
    a1 = Int(n / 26)    'Mar 2003, PYJ  Old:WorksheetFunction.Floor(n / 26, 1)
    a2 = n Mod 26
    
    If a1 > 0 Then
        nTo26Str = nTo26Str & Chr(Asc("A") + a1 - 1)
    End If
    nTo26Str = nTo26Str & Chr(Asc("A") + a2)
    
End Function
'
'
'transfer formula string from A1 format to R1C1 format or vise verse
'return the formula string
'
'bOutA1: True--Get A1 format; False--Get R1C1 format
'Sep 2003, PYJ
Function FormulaA1_R1C1(ByVal strFormulaIn As String, Optional ByVal bOutA1) As String
Attribute FormulaA1_R1C1.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim nStyleFrom As Integer, nStyleTo As Integer
    Dim bErr As Boolean
    
    If UCase(TypeName(bOutA1)) = "ERROR" Then bOutA1 = False
    
    If bOutA1 Then
        nStyleFrom = xlR1C1
        nStyleTo = xlA1
    Else
        nStyleFrom = xlA1
        nStyleTo = xlR1C1
    End If
    '
    On Error Resume Next
    
    FormulaA1_R1C1 = Application.ConvertFormula( _
                Formula:=strFormulaIn, _
                fromReferenceStyle:=nStyleFrom, _
                toReferenceStyle:=nStyleTo)
    
    If Err <> 0 Then    'Oct 2003, PYJ  old:bErr
        'for all version; Err.Number <> 0 & Err.Clear can not be used in Excel 95
        'Err can be cleared afterstatement "On Error GoTo 0"
        FormulaA1_R1C1 = strFormulaIn
    End If
    
    On Error GoTo 0
    
End Function
'
Sub adjustMinMax(ByRef minV As Double, ByRef maxV As Double)
Attribute adjustMinMax.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim keta As Integer
    Dim tmpd As Double, min As Double, max As Double
    
    tmpd = (maxV - minV) / 20
    keta = decNumKeta(maxV - minV)
    max = maxV + tmpd
    min = minV - tmpd
    maxV = Application.Round(max, keta)
    minV = Application.Round(min, keta)
End Sub

Private Function decNumKeta(ByVal diff As Double) As Integer
    diff = Abs(diff)
    
    If (diff >= 10) Then decNumKeta = 0: Exit Function
    If (diff >= 1) Then decNumKeta = 1: Exit Function
    If (diff >= 0.1) Then decNumKeta = 2: Exit Function
    If (diff >= 0.01) Then decNumKeta = 3: Exit Function
    If (diff >= 0.001) Then decNumKeta = 4: Exit Function
    decNumKeta = 5
    
End Function
'
Function forcIIf(ByVal bCond As Boolean, ByVal valForTrue, ByVal valForFalse)
Attribute forcIIf.VB_ProcData.VB_Invoke_Func = " \n14"
    If bCond Then
        forcIIf = valForTrue
    Else
        forcIIf = valForFalse
    End If
   
End Function
'
'nWidth: chart width, if nWidth=0 used the width of rgeChart
'nRowNum: row number the chart will occupied, if nRowNum=0 the row number of rgeChart will be used
'nXDist: the distance between chart and rgeChart left edge
'return row number used
'
'H15.10.1 LSQ mdf
Function COMM_draw|fffd||710||fffd||fffd|O|fffd||fffd||fffd|t(ByVal rgeChart As Range, ByVal rgeCate As Range, ByVal rgeData As Range, _
        ByVal strTitle As String, ByVal strXTitle As String, Optional ByVal strGrpName, _
        Optional ByVal nWidth, Optional ByVal nRowNum, _
        Optional ByVal nXDist, Optional ByVal strpara, Optional ByRef cht As Chart) As Integer
Attribute COMM_draw|fffd||710||fffd||fffd|O|fffd||fffd||fffd|t.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim dXPos As Double, dYPos As Double, dHeight As Double
    Dim dMinVal As Double, dMaxVal As Double
    Dim num As Integer
    Dim tmpRge As Range
    Dim bHasLegend As Boolean
    Dim dict As Object
    Dim nColNum As Long
    
    If UCase(TypeName(strGrpName)) = "ERROR" Then strGrpName = ""
    If UCase(TypeName(nWidth)) = "ERROR" Then nWidth = 400
    If UCase(TypeName(nRowNum)) = "ERROR" Then nRowNum = 15
    If UCase(TypeName(nXDist)) = "ERROR" Then nXDist = 10
    If UCase(TypeName(strpara)) = "ERROR" Then strpara = "HasLegend=1&ColNum=0"
    Set dict = Comm_SetDict(strpara)
    bHasLegend = IIf(dict("HasLegend") = 1, True, False)
    nColNum = dict("ColNum")
    Set dict = Nothing
    rgeChart.Worksheet.Activate
    dXPos = rgeChart.Left + nXDist
    dYPos = rgeChart.Top
    If nWidth = 0 Then nWidth = rgeChart.Width
    If nRowNum = 0 Then nRowNum = rgeChart.Rows.Count
    dHeight = rgeChart.Range("A1:A" & nRowNum).height
    
    '|fffd|O|fffd||fffd||fffd|t|fffd||1c9||fffd|
    ActiveSheet.ChartObjects.Add(dXPos, dYPos, nWidth, dHeight).Select
       
    ActiveChart.ChartWizard Source:=Union(rgeCate, rgeData), Gallery _
        :=xlLine, Format:=2, PlotBy:=xlColumns, CategoryLabels:=1, _
        SeriesLabels:=1, HasLegend:=IIf(bHasLegend, 1, 0), title:=strTitle, _
        CategoryTitle:=strXTitle, ValueTitle:="", ExtraTitle:=""
    For num = 1 To rgeData.Areas.Count
        Set tmpRge = rgeData.Areas(num)
        ActiveChart.SeriesCollection(num).Name = "='" & rgeData.Worksheet.Name & "'!" & Comm_toXlRCstr(tmpRge(1, 1).Address)
        Set tmpRge = tmpRge(2, 1).Resize(tmpRge.Rows.Count - 1, 1)
        ActiveChart.SeriesCollection(num).Values = "='" & rgeData.Worksheet.Name & "'!" & Comm_toXlRCstr(tmpRge.Address)
        ActiveChart.SeriesCollection(num).XValues = "='" & rgeCate.Worksheet.Name & "'!" & Comm_toXlRCstr(rgeCate.Range("A2").Resize(rgeCate.Rows.Count - 1, 1).Address)
    Next num
    
    If nColNum <> 0 Then Call Comm_setChartPosSize(ActiveChart.Parent, rgeChart, nRowNum, nColNum)
    
    '|fffd|O|fffd||fffd||fffd|t|fffd||fffd||fffd||fffd|t|fffd||fffd|
    num = ActiveSheet.ChartObjects.Count
    If Trim(strGrpName) <> "" Then
        ActiveSheet.ChartObjects(num).Name = strGrpName
    Else
        strGrpName = ActiveSheet.ChartObjects(num).Name
    End If
    
    '|fffd|I|fffd|[|fffd|v|fffd|V|fffd||fffd||fffd||fffd||fffd||752||fffd|
    num = rgeCate.Rows.Count - 1
    Call SetCommChart(strGrpName, num)     'Oct 2003, PYJ  old:
    
    '|fffd|w|fffd||fffd||fffd||fffd||fffd|x|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Selection.TickLabels.Orientation = xlHorizontal
    ActiveChart.Axes(xlCategory).Select
    With Selection
        .MajorTickMark = xlInside
        .MinorTickMark = xlInside
        .TickLabelPosition = xlNextToAxis
    End With
    
    '|fffd||fffd||fffd||fffd|max & min|fffd||752||fffd|
    dMaxVal = Application.max(rgeData)
    dMinVal = Application.min(rgeData)
    Call adjustMinMax(dMinVal, dMaxVal)
    ActiveChart.Axes(xlValue).Select
    With ActiveChart.Axes(xlValue)
        .MinimumScale = dMinVal
        .MaximumScale = dMaxVal
        '.MinimumScaleIsAuto = True
        '.MaximumScaleIsAuto = True
        .MinorUnitIsAuto = True
        .MajorUnitIsAuto = True
        .Crosses = xlAutomatic
        .ReversePlotOrder = False
        .ScaleType = False
    End With
    
    '|fffd||690||fffd||fffd||fffd||fffd||fffd||310||752||fffd|
    With ActiveChart.Axes(xlCategory)
        .HasMajorGridlines = False
        .HasMinorGridlines = False
    End With
    With ActiveChart.Axes(xlValue)
        .HasMajorGridlines = True
        .HasMinorGridlines = False
    End With
    ActiveChart.Axes(xlValue).MajorGridlines.Select
    With Selection.Border
        .ColorIndex = 1
        .Weight = xlHairline
        .LineStyle = xlDot
    End With
    
    '|fffd||fffd||516||682||310||fffd||fffd||fffd||fffd||fffd||fffd||fffd||381|A|fffd||502||242||fffd||fffd||fffd|
    num = ActiveChart.SeriesCollection.Count
    If num >= 2 Then
        ActiveChart.SeriesCollection(2).Select
        With Selection.Border
            .ColorIndex = 3
            .Weight = xlThin
            .LineStyle = xlContinuous
        End With
    End If
    ActiveChart.Axes(xlCategory).TickMarkSpacing = ActiveChart.Axes(xlCategory).TickLabelSpacing
    
    Set cht = ActiveChart
    
    '|fffd|J|fffd|[|fffd|\|fffd||fffd||fffd||308||292|u
    rgeChart.Worksheet.Activate
    rgeChart.Range("A1").Select
    COMM_draw|fffd||710||fffd||fffd|O|fffd||fffd||fffd|t = nRowNum
End Function

'--- mdf from SRKMain.xla --- Begin --- 07.1.13

Function WorkBookOpen(ByVal fName As String, Optional ByVal bReadOnly As Boolean = True) As Workbook
    Dim bkObj As Workbook
    On Error Resume Next
    'Check
    If isBookExist(fName) Then
        Set WorkBookOpen = Workbooks(fName)
        Exit Function
    End If
    
    Set bkObj = Nothing
    
    Application.ScreenUpdating = False
    
    Call changeToSSDir
    
    Workbooks.Open Filename:=fName, updatelinks:=1, ReadOnly:=bReadOnly
    
    Application.ScreenUpdating = True
    
    Set bkObj = Workbooks(fName)
    If bkObj Is Nothing Then
        MsgBox MSG_CANTOPEN_FILE(fName)
        Exit Function
    End If
    
    Set WorkBookOpen = bkObj
    On Error GoTo 0
End Function

Sub WorkBookClose(ByVal fName As String)
    Application.DisplayAlerts = False
    
    Workbooks(fName).Close savechanges:=False
    
    Application.DisplayAlerts = True
End Sub

Function MSG_CANTOPEN_FILE(ByVal fName As String) As String
    MSG_CANTOPEN_FILE = fName & "|fffd|I|fffd|[|fffd|v|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
End Function

Function toXlA1str(inputFormula As String) As String
    On Error Resume Next
    
    toXlA1str = Application.ConvertFormula( _
                Formula:=inputFormula, _
                fromReferenceStyle:=xlR1C1, _
                toReferenceStyle:=xlA1)
    
    If Err.Number <> 0 Then
        toXlA1str = inputFormula
        Err.Clear
    End If
    
    On Error GoTo 0
End Function

'=== EOF ===

Attribute VB_Name = "commMove"
'=================================================
'|fffd|u|fffd||fffd||fffd||3d7||281|vVBA|fffd||302||754||fffd| : |fffd||fffd||fffd||283||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd|
'
' 2002.1 by LSQ
'copied from SSSMCTHR1
'=================================================
Option Explicit

Const STNAME_WORK As String = "Temp"
'
Function getTempSheet(Optional ByVal no) As Worksheet
Attribute getTempSheet.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim stObj As Worksheet
    
    If UCase(TypeName(no)) = "ERROR" Then no = 0
    
    If no <= 0 Then
        Set stObj = ThisWorkbook.Worksheets(STNAME_WORK)
    Else
        Set stObj = ThisWorkbook.Worksheets(STNAME_WORK & no)
    End If
    
    stObj.Cells.Clear   'stObj.Cells.Delete Shift:=xlUp
    
    Set getTempSheet = stObj
End Function
'
Function isDataType(ByVal thisCell As Range) As Boolean
Attribute isDataType.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim tname As String
    
    tname = UCase(TypeName(thisCell.Value))
    If tname = "DOUBLE" Or tname = "INTEGER" Then
        isDataType = True
    Else
        isDataType = False
    End If
End Function
'
'H14.11.15 LSQ add
Function isSelFlag(ByVal theVal As Variant) As Boolean
Attribute isSelFlag.VB_ProcData.VB_Invoke_Func = " \n14"
    If val(theVal) <> 0 Then
        isSelFlag = True
    Else
        isSelFlag = False
    End If
    
End Function

'
'bTitleExt : if TRUE  -- |fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(if bTitle=TRUE) else |fffd||202||fffd||fffd|B
'            if FALSE -- |fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd|K|fffd||fffd||fffd||202||fffd||fffd|B
'
'H14.1.7 LSQ
Private Function getDataRange_Comm(ByVal RgeObj As Range, _
    ByVal bCol As Boolean, ByVal bTitle As Boolean, ByVal bXSel As Boolean, _
    Optional ByVal bTitleExt) As Range
    
    Dim ct
    Dim bgnCel As Range, xSelRge As Range, tmpRge As Range
    Dim rwNum As Long, clNum As Integer
    Dim svStObj As Worksheet
    
    If UCase(TypeName(bTitleExt)) = "ERROR" Then bTitleExt = False
    
    rwNum = RgeObj.Rows.Count
    clNum = RgeObj.Columns.Count
    Set bgnCel = RgeObj.Offset(0, 0).Range("A1")
    Set svStObj = ActiveSheet
    
    If bCol Then
        If bTitle Then
            rwNum = rwNum - 1
            Set bgnCel = bgnCel.Offset(1, 0)
        End If
        '
        If bTitleExt Then
            clNum = clNum - 1
            Set bgnCel = bgnCel.Offset(0, 1)
        End If
        '
        If bXSel Then
            rwNum = rwNum - 1
            Set bgnCel = bgnCel.Offset(1, 0)
        End If
    Else
        If bTitle Then
            clNum = clNum - 1
            Set bgnCel = bgnCel.Offset(0, 1)
        End If
        '
        If bTitleExt Then
            rwNum = rwNum - 1
            Set bgnCel = bgnCel.Offset(1, 0)
        End If
        '
        If bXSel Then
            clNum = clNum - 1
            Set bgnCel = bgnCel.Offset(0, 1)
        End If
    End If
    
    RgeObj.Worksheet.Activate
    
    Set getDataRange_Comm = Nothing 'Init
    If rwNum > 0 And clNum > 0 Then
        If bXSel = False Then
            Set getDataRange_Comm = bgnCel.Offset(0, 0).Range(Cells(1, 1), Cells(rwNum, clNum))
        Else
            If bCol Then
                Set xSelRge = bgnCel.Offset(-1, 0).Range(Cells(1, 1), Cells(1, clNum))
                Set tmpRge = bgnCel.Offset(0, 0).Range(Cells(1, 1), Cells(rwNum, 1))
            Else
                Set xSelRge = bgnCel.Offset(0, -1).Range(Cells(1, 1), Cells(rwNum, 1))
                Set tmpRge = bgnCel.Offset(0, 0).Range(Cells(1, 1), Cells(1, clNum))
            End If
            '
            For ct = 1 To forcIIf(bCol, clNum, rwNum)
                If isSelFlag(xSelRge(ct)) Then
                    If getDataRange_Comm Is Nothing Then
                        Set getDataRange_Comm = tmpRge
                    Else
                        Set getDataRange_Comm = Union(getDataRange_Comm, tmpRge)
                    End If
                End If
                
                'next
                If bCol Then Set tmpRge = tmpRge.Offset(0, 1) Else Set tmpRge = tmpRge.Offset(1, 0)
            Next ct
        End If
    End If
    
    svStObj.Activate

End Function
'
'H12.11.14 LSQ
Function getDataRange(RgeObj As Range, bOptCol As Boolean, bTitle As Boolean, bXSel As Boolean) As Range
Attribute getDataRange.VB_ProcData.VB_Invoke_Func = " \n14"
    Set getDataRange = getDataRange_Comm(RgeObj, bOptCol, bTitle, bXSel)
End Function
'
'H12.11.14 LSQ
Function getDataRange_SmpTitle(RgeObj As Range, bOptCol As Boolean, bTitle As Boolean, bSmpTitle As Boolean, bXSel As Boolean) As Range
Attribute getDataRange_SmpTitle.VB_ProcData.VB_Invoke_Func = " \n14"
    Set getDataRange_SmpTitle = getDataRange_Comm(RgeObj, bOptCol, bTitle, bXSel, bSmpTitle)
End Function
'
'H12.11.14 LSQ
'
Sub getSmpNum_ItemNum_FromRge(RgeObj As Range, bCol As Boolean, bTitle As Boolean, bTitleExt As Boolean, _
    ByRef smpNum As Variant, ByRef ItemNum As Variant)
Attribute getSmpNum_ItemNum_FromRge.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim rwNum As Long, clNum As Integer

    rwNum = RgeObj.Rows.Count
    clNum = RgeObj.Columns.Count
    
    If bCol Then   '|fffd||fffd||fffd||fffd||fffd|
        ItemNum = clNum
        smpNum = rwNum
    Else
        ItemNum = rwNum
        smpNum = clNum
    End If

    If bTitle Then
        smpNum = smpNum - 1
        '
        If bTitleExt Then
            ItemNum = ItemNum - 1
        End If
    End If
    
End Sub

'
'H12.11.2 LSQ
'
Function getTitleName(RgeObj As Range, bOptCol As Boolean, bTitle As Boolean, ct As Integer) As String
Attribute getTitleName.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim bgnCel As Range
    
    If ct <= 0 Then ct = 1
    
    Set bgnCel = RgeObj.Offset(0, 0).Range("A1")
    If bTitle Then
        If bOptCol Then
            getTitleName = bgnCel.Offset(0, ct - 1).Text
        Else
            getTitleName = bgnCel.Offset(ct - 1, 0).Text
        End If
    Else
        getTitleName = "Item" & ct
    End If
End Function
'
'H14.1.11 LSQ
'
Function getTitleRange(RgeObj As Range, bOptCol As Boolean) As Range
Attribute getTitleRange.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim rwNum As Long, clNum As Integer
    Dim svStObj As Worksheet
    
    rwNum = RgeObj.Rows.Count
    clNum = RgeObj.Columns.Count
    
    Set svStObj = ActiveSheet
    
    RgeObj.Worksheet.Activate
    If bOptCol Then
        Set getTitleRange = RgeObj.Offset(0, 0).Range(Cells(1, 1), Cells(1, clNum))
    Else
        Set getTitleRange = RgeObj.Offset(0, 0).Range(Cells(1, 1), Cells(rwNum, 1))
    End If
    
    svStObj.Activate
End Function
'
'H14.1.17 LSQ
Function getXSelRange(ByVal RgeObj As Range, ByVal bOptCol As Boolean, ByVal bTitle As Boolean) As Range
Attribute getXSelRange.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim tmpRge As Range
    If bOptCol Then
        If bTitle Then Set tmpRge = RgeObj.Offset(1, 0) Else Set tmpRge = RgeObj
    Else
        If bTitle Then Set tmpRge = RgeObj.Offset(0, 1) Else Set tmpRge = RgeObj
    End If
    
    Set getXSelRange = getTitleRange(tmpRge, bOptCol)
End Function
'
'For X variable
'|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||fffd|A|fffd|^|fffd|C|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd|A|fffd||fffd||fffd||691|I|fffd||fffd||fffd||3c2||742||303|f|fffd|[|fffd|^|fffd||590||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B
'
'return : the new range
'
'NOTE : Paste:=xlValues (old : xlValue, formula data copy REF# error)
'
'H14.1.17 by LSQ
'
Function moveData_X(RgeObj As Range, basItemName As String, bCol As Boolean, bTitle As Boolean, _
    bXSel As Boolean, outBgn As Range) As Range
Attribute moveData_X.VB_ProcData.VB_Invoke_Func = " \n14"
    
    Dim ct As Integer
    Dim smpNum As Long, ItemNum As Integer, itemNo As Integer
    Dim toBgn As Range, c As Range
    Dim itemNmRge As Range, xSelRge As Range, tmpRge As Range
    Dim svStObj As Worksheet
    Set svStObj = ActiveSheet
    
    'set
    Set itemNmRge = getTitleRange(RgeObj, bCol)
    Set xSelRge = getXSelRange(RgeObj, bCol, bTitle)
    
    'Item Name
    If bTitle Then
        Set toBgn = outBgn
        For ct = 1 To itemNmRge.Count
            If (bXSel = False) Or (bXSel And isSelFlag(xSelRge(ct))) Then
                toBgn = itemNmRge(ct)
                'next
                Set toBgn = toBgn.Offset(0, 1)
            End If
        Next ct
    Else
        Set toBgn = outBgn
        itemNo = 1
        For ct = 1 To itemNmRge.Count
            If (bXSel = False) Or (bXSel And isSelFlag(xSelRge(ct))) Then
                toBgn = basItemName & itemNo
                'next
                Set toBgn = toBgn.Offset(0, 1)
            End If
            itemNo = itemNo + 1
        Next ct
        '
        'special
        If itemNmRge.Count = 1 Then
            outBgn = basItemName 'Numbering |fffd||fffd||fffd||202||fffd|
        End If
    End If
    
    'Data set
    Set toBgn = outBgn.Offset(1, 0)
    
    Set tmpRge = getDataRange_SmpTitle(RgeObj, bCol, bTitle, False, bXSel)
    If tmpRge Is Nothing Then
        Set moveData_X = Nothing
        Exit Function
    End If
    '
    tmpRge.Copy
    toBgn.Worksheet.Activate
    toBgn.Select
    If bCol Then
        Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    Else
        Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=True
    End If
    'H14.11.27 LSQ moved
    Set tmpRge = Selection  'H14.11.12 LSQ add
    smpNum = tmpRge.Rows.Count
    ItemNum = tmpRge.Columns.Count
    
    Application.CutCopyMode = False
    
    'return
    Set moveData_X = outBgn.Range(Cells(1, 1), Cells(smpNum + 1, ItemNum))
    
    svStObj.Activate

End Function
'
'For Y variable
'|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||fffd|A|fffd|^|fffd|C|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd|A|fffd||fffd||fffd||691|I|fffd||fffd||fffd||3c2||742||303|f|fffd|[|fffd|^|fffd||590||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B
'
'bHasSelRow :     X Select Row Ari/Nasi
'bSelRowValid :   if bHasSelRow = Ari, the Select Row Valid or Invalid; if bHasSelRow = Nasi, not used.
'
'return : the new range
'
'NOTE : Paste:=xlValues (old : xlValue, formula data copy REF# error)
'
'H14.2.25 by LSQ
'
Function moveData_Y(RgeObj As Range, basItemName As String, bCol As Boolean, bTitle As Boolean, _
    bHasSelRow As Boolean, outBgn As Range, Optional bSelRowValid) As Range
Attribute moveData_Y.VB_ProcData.VB_Invoke_Func = " \n14"
    
    Dim ct As Integer, rwNum, clNum, tmpi As Integer
    Dim smpNum As Long, ItemNum As Integer, itemNo As Integer
    Dim toBgn As Range, c As Range
    Dim itemNmRge As Range, xSelRge As Range, tmpRge As Range
    Dim svStObj As Worksheet
    Set svStObj = ActiveSheet
    
    If UCase(TypeName(bSelRowValid)) = "ERROR" Then bSelRowValid = False
    
    'set
    Set itemNmRge = getTitleRange(RgeObj, bCol)
    Set xSelRge = getXSelRange(RgeObj, bCol, bTitle)
    
    'Item Name
    If bTitle Then
        Set toBgn = outBgn
        For ct = 1 To itemNmRge.Count
            If (bHasSelRow = False) Or (bSelRowValid = False) Or (bSelRowValid And isSelFlag(xSelRge(ct))) Then
                toBgn = itemNmRge(ct)
                'next
                Set toBgn = toBgn.Offset(0, 1)
            End If
        Next ct
    Else
        Set toBgn = outBgn
        itemNo = 1
        For ct = 1 To itemNmRge.Count
            If (bHasSelRow = False) Or (bSelRowValid = False) Or (bSelRowValid And isSelFlag(xSelRge(ct))) Then
                toBgn = basItemName & itemNo
                'next
                Set toBgn = toBgn.Offset(0, 1)
            End If
            itemNo = itemNo + 1
        Next ct
        '
        'special
        If itemNmRge.Count = 1 Then
            outBgn = basItemName 'Numbering |fffd||fffd||fffd||202||fffd|
        End If
    End If
    
    'Data set
    Set toBgn = outBgn.Offset(1, 0)
    
    If (bHasSelRow And bSelRowValid = False) Then
        RgeObj.Worksheet.Activate
        
        rwNum = RgeObj.Rows.Count
        clNum = RgeObj.Columns.Count
        tmpi = forcIIf(bTitle, 2, 1)
        If bCol Then
            rwNum = rwNum - tmpi
            If rwNum > 0 Then
                Set tmpRge = RgeObj.Offset(tmpi, 0).Range(Cells(1, 1), Cells(rwNum, clNum))
            End If
        Else
            clNum = clNum - tmpi
            If clNum > 0 Then
                Set tmpRge = RgeObj.Offset(0, tmpi).Range(Cells(1, 1), Cells(rwNum, clNum))
            End If
        End If
    Else
        Set tmpRge = getDataRange_SmpTitle(RgeObj, bCol, bTitle, False, bHasSelRow)
    End If
    
    If tmpRge Is Nothing Then
        Set moveData_Y = Nothing
        Exit Function
    End If
    '
    tmpRge.Worksheet.Activate
    tmpRge.Copy
    toBgn.Worksheet.Activate
    toBgn.Select
    If bCol Then
        Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    Else
        Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=True
    End If
    'H14.11.27 LSQ moved
    Set tmpRge = Selection  'H14.11.12 LSQ add
    smpNum = tmpRge.Rows.Count
    ItemNum = tmpRge.Columns.Count
    
    Application.CutCopyMode = False
    
    'return
    Set moveData_Y = outBgn.Range(Cells(1, 1), Cells(smpNum + 1, ItemNum))
    
    svStObj.Activate

End Function
'
'return no data number
'02.2.25 LSQ
'
Function clearNoData(ByVal yDataBgn As Range, ByVal yNum As Integer, ByVal xDataBgn As Range, ByVal xNum As Integer, _
    ByVal smpNum As Variant)
Attribute clearNoData.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim i, ct
    Dim yRge As Range, xRge As Range
    
    yDataBgn.Worksheet.Activate
    Set yRge = yDataBgn.Range(Cells(1, 1), Cells(1, yNum))
    
    xDataBgn.Worksheet.Activate
    Set xRge = xDataBgn.Range(Cells(1, 1), Cells(1, xNum))
    
    ct = 0
    For i = 0 To (smpNum - 1)
        If Application.Count(xRge.Offset(i, 0)) <> xNum Then
            yRge.Offset(i, 0) = ""
            xRge.Offset(i, 0) = ""
            ct = ct + 1
        End If
    Next i
    
    clearNoData = ct
    
End Function
'
'|fffd||fffd||fffd||fffd||fffd|/|fffd|s|fffd||fffd||fffd||fffd||fffd||303|f|fffd|[|fffd|^; |fffd|^|fffd|C|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd|A|fffd||202||fffd||fffd||303|f|fffd|[|fffd|^|fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||83|^|fffd|C|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd||303|f|fffd|[|fffd|^|fffd||590||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B
'
'return : the new range
'copied from SSSMCTH2, Aug 2003, PYJ
Function moveData(RgeObj As Range, basItemName As String, bCol As Boolean, bTitle As Boolean, _
    bXSel As Boolean, outBgn As Range) As Range
Attribute moveData.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim ct As Integer, smpNum As Long, ItemNum As Integer
    Dim toBgn As Range, tmpRge As Range, c As Range
    Dim svStObj As Worksheet
    Set svStObj = ActiveSheet
    
    Set toBgn = outBgn
    
    'Title set
    Set tmpRge = getTitleRange(RgeObj, bCol)
    
    If bTitle Then
        For Each c In tmpRge
            toBgn = c
            Set toBgn = toBgn.Offset(0, 1)
        Next c
    Else
        If tmpRge.Count = 1 Then
            toBgn = basItemName 'Numbering |fffd||fffd||fffd||202||fffd|
        Else
            For ct = 1 To tmpRge.Count
                toBgn = basItemName & ct
                Set toBgn = toBgn.Offset(0, 1)
            Next ct
        End If
    End If
    
    'Data set
    Set toBgn = outBgn.Offset(1, 0)
    
    Set tmpRge = getDataRange(RgeObj, bCol, bTitle, bXSel)
    tmpRge.Copy
    toBgn.Worksheet.Activate
    toBgn.Select
    If bCol Then
        Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    Else
        Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=True
    End If
    'H14.11.27 LSQ moved
    Set tmpRge = Selection  'H14.11.12 LSQ add
    smpNum = tmpRge.Rows.Count
    ItemNum = tmpRge.Columns.Count
    
    Application.CutCopyMode = False
    
    Set moveData = outBgn.Range(Cells(1, 1), Cells(smpNum + 1, ItemNum))
    
    svStObj.Activate

End Function
'
'H13.3.29 LSQ : for Mac2001
'
Function Power(a As Variant, n As Integer) As Double
Attribute Power.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim i As Integer
    
    Power = 1#
    For i = 1 To n
        Power = Power * a
    Next i
    
End Function
'
Function SpaceAri(ByVal x As Range) As Boolean
Attribute SpaceAri.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim i As Integer, j As Integer
    Dim smpNum As Integer, ItemNum As Integer
    
    smpNum = x.Rows.Count
    ItemNum = x.Columns.Count
    SpaceAri = False
    For i = 1 To smpNum
        For j = 1 To ItemNum
            If IsEmpty(x.Offset(0, 0).Cells(i, j)) Then
                SpaceAri = True
                Exit Function
            End If
        Next j
    Next i
End Function

Function TotalNumericData(ByVal x As Range) As Long
Attribute TotalNumericData.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim n As Long
    n = Application.Count(x)
    TotalNumericData = n
End Function
'
'H14.11.12 LSQ add
Function HasNoData(ByVal x As Range) As Boolean
Attribute HasNoData.VB_ProcData.VB_Invoke_Func = " \n14"
    HasNoData = False
    If x Is Nothing Then Exit Function
    
    If Application.Count(x) <> x.Rows.Count * x.Columns.Count Then
        HasNoData = True
    End If
    
End Function

Function CheckEmptyData(x As Range) As Long
Attribute CheckEmptyData.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim nData As Long, tmpCel As Range, ci As Long, ct As Long
    Dim smpNum As Long, ItemNum As Integer
    
    ItemNum = x.Columns.Count
    smpNum = x.Rows.Count
    
    For ci = 1 To ItemNum
        nData = 0
        For ct = 2 To smpNum
            Set tmpCel = x(ct, ci)
            If Not IsEmpty(tmpCel) Then
                nData = nData + 1
             End If
        Next ct
        If nData < 3 Then
            CheckEmptyData = nData
            Exit Function
        End If
    Next ci
    '
    CheckEmptyData = nData
End Function

'=== EOF ===

Attribute VB_Name = "commStruc"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: |fffd||fffd||fffd||28d|\|fffd||fffd||fffd||fffd|
'
'Aug 2003, PYJ
'=================================================
Option Explicit

'|fffd|X|fffd||fffd||fffd||fffd||fffd||34a||590||fffd||fffd||fffd||fffd|w|fffd||fffd||310||fffd|
Public Const g_nKkFunNum As Integer = 15

'|fffd||fffd||fffd||595||fffd||fffd||fffd|
Type DEFDlgSkn
    nJudge As Integer       '|fffd||fffd||fffd||fffd|: 1--|fffd||fffd||fffd||fffd||fffd||582||30c||fffd||fffd||fffd|; 2--|fffd||a44a||fffd||58c|W|fffd||fffd||fffd||30c||fffd||fffd||fffd|
    dCompVal As Double      '|fffd||fffd|r|fffd|l(0|fffd|`1)
    nTimeLag As Integer     '|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd|l
End Type

'|fffd||fffd||fffd|d|fffd||693||fffd|
Type DEFDlgEma
    nSmpNum As Integer
End Type

'EPA
Type DEFDlgEpa
    nMod As Integer         '|fffd||fffd||fffd|f|fffd||fffd|: 1--|fffd||fffd||fffd||fffd|; 2--|fffd||fffd|@; 3--|fffd||fffd||fffd|@
End Type

'|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|
Type DEFDlgKk
    nProdict As Integer                 '|fffd|\|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd|
    nUpLimitFlg As Integer              '|fffd||fffd||fffd||fffd|l: 1--|fffd||fffd||fffd||fffd||fffd|P; 2--|fffd||fffd||fffd||fffd||fffd|Q; 3--|fffd||fffd||fffd||fffd|
    dUpLimit As Double
    'nSi As Integer
    nSuitei As Integer                  '|fffd||fffd||510||fffd||fffd||fffd||190|M|fffd||fffd||fffd|x: 1--|fffd||202||fffd|; 2--95|fffd||fffd|; 3--99|fffd||fffd|
    nmFuncSel(1 To g_nKkFunNum) As Integer          '|fffd||590||fffd||fffd||fffd||fffd||311|I|fffd||fffd||fffd|i|fffd|U|fffd||fffd||fffd||702||151|I|fffd||fffd||fffd||81|j: 1--Selected; 0--not
End Type

'|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|
Type DEFDlgJkk
    nSuitei As Integer      '|fffd||fffd||510||fffd||fffd||fffd||190|M|fffd||fffd||fffd|x: 1--|fffd||202||fffd|; 2--95|fffd||fffd|; 3--99|fffd||fffd|
    nMethod As Integer      '|fffd||3d0||fffd||fffd|I|fffd||fffd|@
    bTimeLag As Boolean     '|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd|l: False--|fffd|w|fffd||fffd||202||fffd|; True--|fffd|P|fffd|s|fffd|i|fffd||fffd|j|fffd||fffd|
    bTesuk As Boolean       '|fffd||8414||fffd||fffd||fffd|O|fffd||30f|d|fffd||fffd|A
    F_in As Double
    F_out As Double
End Type

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Type DEFDlgGs
    nKkMethod As Integer    '|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|
    nMinSmpLmt As Integer   ' = 5
    nMaxSmpLmt As Integer   '|fffd||fffd||fffd||fffd|--48; |fffd|l|fffd||fffd||fffd||fffd|--16; |fffd|N|fffd||fffd|--10
    nLmtSmp1 As Integer     '|fffd||fffd||fffd||fffd|--24; |fffd|l|fffd||fffd||fffd||fffd|--12; |fffd|N|fffd||fffd|--10
    nLmtSmp2 As Integer     '|fffd||fffd||fffd||fffd|--36; |fffd|l|fffd||fffd||fffd||fffd|--12; |fffd|N|fffd||fffd|--10
End Type

Type DEFDialog
    '|fffd||fffd||fffd||282||30e|w|fffd||fffd||fffd||fffd|e
    rgeInp As Range         '|fffd|f|fffd|[|fffd|^|fffd||348||fffd|
    rgeOutBgn As Range
    
    RgeX As Range           '|fffd||fffd||fffd||fffd||fffd||3d0||fffd|, for |fffd|v|fffd||fffd||fffd||fffd||fffd||fffd| and |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| only
    bXSel As Boolean        '|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||311|I|fffd||fffd|: True--|fffd||fffd||fffd||fffd|; False--|fffd||202||fffd|, for |fffd|v|fffd||fffd||fffd||fffd||fffd||fffd| and |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| only
    
    bColData As Boolean     '|fffd|f|fffd|[|fffd|^|fffd|n|fffd||fffd||30c||fffd||fffd||fffd|: True--|fffd||fffd||fffd||fffd||fffd|; False--|fffd|s|fffd||fffd||fffd||fffd|
    bTitle As Boolean       '1|fffd|s|fffd|i|fffd||fffd|j|fffd||682||303|f|fffd|[|fffd|^|fffd||fffd||fffd|: True--|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd|x|fffd||fffd|; False--|fffd|f|fffd|[|fffd|^

    bStopNonData As Boolean '|fffd||fffd||fffd|l|fffd||20a|O|fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd|: True--|fffd||fffd||fffd|~; False--|fffd||fffd||fffd|O|fffd||fffd||fffd||111||fffd||fffd|s; for |fffd|X|fffd||fffd||fffd||fffd||fffd||fffd| only now
    
    'not for |fffd||fffd||fffd||595||fffd||fffd||fffd|/|fffd|U|fffd|z|fffd|}
    bGraph As Boolean
    nTimeStyle As Integer   '|fffd||fffd||fffd||fffd||fffd|\|fffd||fffd|: 1--|fffd||fffd||fffd||fffd|; 2--|fffd|l|fffd||fffd||fffd||fffd|; 3--|fffd|N|fffd||fffd|; 4--No.
    nYearBgn As Integer
    nMonth As Integer
    
    dlgSkn As DEFDlgSkn     '|fffd||fffd||fffd||595||fffd||fffd||fffd|Dlg
    dlgEma As DEFDlgEma     '|fffd||fffd||fffd|d|fffd||693||fffd|Dlg
    dlgEpa As DEFDlgEpa     'EPADlg
    dlgKk As DEFDlgKk       '|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|Dlg
    dlgJkk As DEFDlgJkk     '|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|Dlg
    dlgGs As DEFDlgGs       '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|Dlg
End Type
'
'H15.9.25 LSQ : used to call DLL
'
Type TYTenGraph1
    startShtName As String

    tateDataRge As String
    yokoDataRge As String
    outRge As String
    namerge As String
    
    flgName As Integer      '1=Yes 2=No
    mjNum As Integer        '
    ftSize As Integer       '
    
    flgSkn As Integer       '1=Yes 2=No
    
    flgDir As Integer       '1=Col 2=Row
    flgNotData As Integer   '1=Skip 2=Stop
    flgTitle As Integer     '1=Title 2=Data
End Type
'
'
'H15.9.25 LSQ : used to call DLL
'
Type TYTenGraph2
    startShtName As String
    
    dataRge As String
    tateDataRge As String
    yokoDataRge As String
    outRge As String
    
    flgDataType As Integer  '1=Matrix 2=Group
    flgSkn As Integer       '1=Yes 2=No
    flgMark As Integer      '1=Yes 2=No
    flgPval As Integer      '1=Yes 2=No
    flgKK As Integer        '1=Yes 2=No
    
    wakuRow As Integer
    wakuCol As Integer
    flgKan As Integer       '1=Yes 2=No
    
    flgDir As Integer       '1=Col 2=Row
    flgNotData As Integer   '1=Skip 2=Stop
    flgTitle As Integer     '1=Title 2=Data

End Type


Public g_aDialog As DEFDialog

'=== EOF ===
Attribute VB_Name = "dateChk"
'
Option Private Module
Option Explicit

#If Win64 Then
Declare PtrSafe Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
#Else
Declare Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
#End If

Const MSG_CHK_001 As String = "ISTAT.INI|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd|j|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B" & vbCrLf & GName_Prog & "|fffd||fffd||fffd||103|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"

'******************************************
'* |fffd||1bc||fffd||5f2||fffd||781|@|327||fffd||fffd|(ISTAT.INI)|fffd||fffd||fffd||fffd|
'* EXCEL|fffd|\|fffd||fffd||fffd||313||fffd||fffd|t|fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N|fffd||fffd||fffd|A|fffd||fffd||fffd|t|fffd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd|
'* EXCEL|fffd||fffd||fffd|N|fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd|
'******************************************
Function user_date_chk() As Boolean
    Dim sIniStr$
    Dim sDate1$
    Dim sDate2$
    Dim ddd As Double
    Dim iRet As Integer
    Dim vDate1, vDate2 As Variant
    Dim sTemp1, sTemp2 As String
    
    sTemp1 = Chr(13)
    sIniStr = getTaikouIniStr()     'ISTAT.INI|fffd||fffd||fffd||fffd||fffd||fffd|t|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||1c2||74f|o|fffd||fffd|
    
    user_date_chk = False 'init
    
    iRet = StringDecode(sIniStr, sDate1) '|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||256||7c2||fffd|
    If (iRet <> True) Then
        MsgBox MSG_CHK_001
        Exit Function
    End If
    
    'iRet = StringEncode(sDate1, sTemp2)
    
    'sDate1 = "1996/10/27"
    If (sDate1 <> "0000/00/00") Then
        If (IsDate(sDate1) = False) Then
            MsgBox MSG_CHK_001
            Exit Function
        End If
    
        vDate1 = CDate(sDate1)
        vDate2 = Date
        If (vDate1 < vDate2) Then
            MsgBox "" & GName_Prog & "|fffd||30e||fffd||fffd|p|fffd||fffd||fffd||fffd|[" & sDate1 & "]|fffd||fffd||fffd||7c2||fffd||fffd||702||fffd||fffd||fffd||fffd|B" & sTemp1 & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||403|A|fffd|C|fffd|X|fffd|^|fffd|b|fffd|g|fffd|u|fffd|\|fffd|t|fffd|g|fffd|E|fffd|G|fffd|A|fffd|T|fffd|||fffd|[|fffd|g|fffd|S|fffd||fffd||fffd|v|fffd||702||142||fffd||fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B" & sTemp1 & _
            "|fffd|d|fffd|b|fffd|@03-3315-7637"
            Exit Function
        End If
    End If
    
    user_date_chk = True 'init
End Function


'******************************************
'* |fffd||1bc||fffd||5f2||fffd||781|@|327||fffd||fffd|(ISTAT.INI)|fffd||fffd||fffd||fffd|
'* |fffd|A|fffd|v|fffd||fffd||fffd|P|fffd|[|fffd|V|fffd||fffd||fffd||fffd||fffd||302||fffd||fffd||fffd|f|fffd|B|fffd||fffd||fffd|N|fffd|g|fffd||fffd||fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|B
'******************************************
Function getTaikouIniStr() As String
    Dim sGetBuffer$
    Dim lRet As Long
    Dim iRet As Long
    Dim sTemp1$
    Dim sIniFileName As String
    sGetBuffer$ = String$(300, 0)   '|fffd|f|fffd|[|fffd|^|fffd||30f||fffd||fffd||fffd||fffd||fffd|

    sGetBuffer$ = getPathName() & "\"   'old = gsPrgPath
    sIniFileName$ = sGetBuffer$ & "ISTAT.INI"
    iRet = 0
    
    sGetBuffer$ = String$(256, 0)   '|fffd|f|fffd|[|fffd|^|fffd||30f||fffd||fffd||fffd||fffd||fffd|
    iRet = GetPrivateProfileString(ByVal "Excel", ByVal "MyDate", ByVal "0000000000", sGetBuffer$, CInt(256), ByVal sIniFileName$)
    sTemp1 = Left$(sGetBuffer$, InStr(sGetBuffer$, Chr(0)) - 1)
    If (sTemp1 = "0000000000") Then
        '11.12.2 LSQ cmt
        'MsgBox MSG_CHK_001
        'End
    End If
    
    getTaikouIniStr = sTemp1
End Function

Function StringDecode(ByVal sInpStr As String, sOutStr As String) As Integer
'sInpStr :|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||9576||fffd||fffd||fffd||fffd|
'sOutStr :|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||9576||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1c2||fffd||fffd||fffd|sOutStr|fffd||255||502||fffd|
    Dim iLengs, iCnt1, iMojiCode0, iMojiCode1, iMojiCode2 As Integer
    Dim vKanjiCode  'As Integer
    Dim iKanjiFlg As Integer
    Dim sMoji, sTempStr As String
    Dim iKanji As Integer
    Dim dTemp1 As Double
    On Error GoTo ErrorHandler:
    sOutStr = ""
    iLengs = Len(sInpStr)
    '|fffd||fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd||fffd|16|fffd|i|fffd||315||fffd||fffd||fffd||fffd||fffd||255||3ca||fffd||fffd||fffd||fffd||fffd|sTempStr|fffd||24a|i|fffd|[
    iKanjiFlg = 0   '|fffd||fffd||fffd||fffd||fffd|t|fffd||fffd||fffd|O|fffd||30f||fffd||fffd||fffd||fffd||fffd|
    For iCnt1 = 1 To iLengs Step 2
        sMoji = Mid$(sInpStr, iCnt1, 1)         '|fffd|P|fffd||fffd||fffd||fffd||fffd||c2||8e||fffd||fffd|o|fffd||fffd|
        
        '|fffd||fffd||fffd||fffd||fffd||fffd||312|l|fffd||303|`|fffd|F|fffd|b|fffd|N
        If ((Asc(sMoji) < &H3F) Or (Asc(sMoji) > &H4F)) Then
            StringDecode = False
            Exit Function
        End If
        iMojiCode1 = Asc(sMoji) - &H40
        sMoji = Mid$(sInpStr, iCnt1 + 1, 1)
        
        '|fffd||fffd||fffd||fffd||fffd||fffd||312|l|fffd||303|`|fffd|F|fffd|b|fffd|N
        If ((Asc(sMoji) < &H3F) Or (Asc(sMoji) > &H4F)) Then
            StringDecode = False
            Exit Function
        End If
        iMojiCode2 = Asc(sMoji) - &H40
        iMojiCode0 = iMojiCode1 * 16 + iMojiCode2
        
        '|fffd||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd||fffd|P|fffd|o|fffd|C|fffd|g|fffd||314||fffd||fffd||fffd|
        If (iMojiCode0 >= &H81 And iMojiCode0 <= &H9F) Or (iMojiCode0 >= &HE0 And iMojiCode0 <= &HFC) Then
            If iKanjiFlg = 0 Then   '|fffd||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd|P|fffd|o|fffd|C|fffd|g|fffd||fffd|
                iKanjiFlg = 1
                vKanjiCode = iMojiCode0 * 256
            Else                    '|fffd||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd|Q|fffd|o|fffd|C|fffd|g|fffd||fffd|
                vKanjiCode = vKanjiCode + iMojiCode0
                'sTempStr = "&H" + Hex$(vKanjiCode)
                dTemp1 = CDbl(vKanjiCode)
                If (dTemp1 > 32767) Then
                    iKanji = CInt(dTemp1 - 65536)
                Else
                    iKanji = CInt(dTemp1)
                End If
                'sOutStr = sOutStr + Chr$(Val(sTempStr))
                sOutStr = sOutStr + Chr$(iKanji)
                iKanjiFlg = 0
            End If
        Else
            If iKanjiFlg = 0 Then   'ASC|fffd|R|fffd|[|fffd|h
                sOutStr = sOutStr + Chr$(iMojiCode0)
            Else                    '|fffd||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd|Q|fffd|o|fffd|C|fffd|g|fffd||fffd|
                vKanjiCode = vKanjiCode + iMojiCode0
                'sTempStr = "&H" + Hex$(vKanjiCode)
                dTemp1 = CDbl(vKanjiCode)
                If (dTemp1 > 32767) Then
                    iKanji = CInt(dTemp1 - 65536)
                Else
                    iKanji = CInt(dTemp1)
                End If
                'sOutStr = sOutStr + Chr$(Val(sTempStr))
                sOutStr = sOutStr + Chr$(iKanji)
                iKanjiFlg = 0
            End If
        End If
    Next iCnt1
    StringDecode = True
    Exit Function
ErrorHandler:
    StringDecode = False
    Exit Function
End Function

Function StringEncode(ByVal sInpStr As String, sOutStr As String) As Integer
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| sOutStr|fffd||255||502||fffd|
'sInpStr :|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||102||202||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'sOutStr :|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim iLengs, iCnt1, iMojiCode As Integer
    Dim sMoji, sTempStr As String
    
    sOutStr = ""
    sTempStr = ""
    iLengs = Len(sInpStr)
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd||fffd|16|fffd|i|fffd||315||fffd||fffd||fffd||fffd||fffd||255||3ca||fffd||fffd||fffd||fffd||fffd|sTempStr|fffd||24a|i|fffd|[
    For iCnt1 = 1 To iLengs Step 1
        sMoji = Mid$(sInpStr, iCnt1, 1)
        iMojiCode = Asc(sMoji)
        sTempStr = sTempStr + Hex$(iMojiCode)
    Next iCnt1
  
    '|fffd||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd||fffd||fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B
    iLengs = Len(sTempStr)
    For iCnt1 = 1 To iLengs Step 1
        sMoji = Mid$(sTempStr, iCnt1, 1)    '|fffd|l|fffd||fffd||fffd||fffd||fffd||c2||8e||fffd||fffd|o|fffd||fffd|
        Select Case sMoji
            Case "A"
                iMojiCode = 10 + &H40
            Case "B"
                iMojiCode = 11 + &H40
            Case "C"
                iMojiCode = 12 + &H40
            Case "D"
                iMojiCode = 13 + &H40
            Case "E"
                iMojiCode = 14 + &H40
            Case "F"
                iMojiCode = 15 + &H40
            Case Else   '0-9|fffd||310||fffd||fffd||fffd||fffd||30e||fffd|
                iMojiCode = val(sMoji) + &H40       '|fffd|o|fffd||102||fffd||fffd||fffd||fffd||fffd||fffd|l|fffd||fffd|40|fffd||fffd||fffd||fffd|
        End Select
        sOutStr = sOutStr + Chr$(iMojiCode) '|fffd|X|fffd||243|L|fffd||fffd||fffd||fffd||fffd|N|fffd|^|fffd||255||3ca||fffd|
    Next iCnt1

End Function

Function isTrialVer() As Boolean
    Dim sIniStr$
    Dim sDate1$
    Dim sDate2$
    Dim ddd As Double
    Dim iRet As Integer
    Dim vDate1, vDate2 As Variant
    Dim sTemp1, sTemp2 As String
    
    If YSK_USB_VERSION = False Then
'**********************************
    isTrialVer = True
    Exit Function
'**********************************
    End If
    
    'init
    isTrialVer = False
    sTemp1 = Chr(13)
    
    sIniStr = getTaikouIniStr()     'ISTAT.INI|fffd||fffd||fffd||fffd||fffd||fffd|t|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||1c2||74f|o|fffd||fffd|
    
    If sIniStr = "" Then
        Exit Function
    End If
    
    iRet = StringDecode(sIniStr, sDate1) '|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||256||7c2||fffd|
    If (iRet <> True) Then
        Exit Function
    End If
    
    'iRet = StringEncode(sDate1, sTemp2)
    
    'sDate1 = "1996/10/27"
    If (sDate1 <> "0000/00/00") Then
        isTrialVer = True
        Exit Function
    End If
    
    'return error free
    isTrialVer = False

End Function
'=== EOF ===

Attribute VB_Name = "dispMdl"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: Error Display
'
'1997.7.17 by SJY
'2002.7.10 LSQ mdf
'=================================================
Option Explicit

Sub Error_Display(no)
Attribute Error_Display.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim b_code As Integer
    Dim msgStr As String
    
    If no = 0 Then Exit Sub
    
    b_code = no - (CInt(no / 100)) * 100
    Select Case b_code
        Case 1
            msgStr = "[ERROR:" & no & "]" & "|fffd|G|fffd||fffd||fffd|[|fffd||142||fffd||fffd|I"
        Case 2
            msgStr = "[ERROR:" & no & "]" & "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 3
            msgStr = "[ERROR:" & no & "]" & "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 4
            msgStr = "[ERROR:" & no & "]" & "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 5
            msgStr = "[ERROR:" & no & "]" & "|fffd|o|fffd||354||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 6
            msgStr = "[ERROR:" & no & "]" & "|fffd|w|fffd||fffd|f|fffd|[|fffd|^|fffd||348||342||255|s|fffd||fffd||fffd|t|fffd|H|fffd|[|fffd|}|fffd|b|fffd|g|fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 7
            msgStr = "[ERROR:" & no & "]" & "|fffd|w|fffd||fffd||142||fffd||fffd||9340||fffd||690||fffd||fffd||341|A|fffd|R|fffd|O|fffd||fffd||fffd||688||213||fffd||fffd||142||fffd||fffd|I"
        Case 8
            msgStr = "[ERROR:" & no & "]" & "|fffd|w|fffd||80b7||fffd||9340||fffd||690||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|I"
        Case 9
            msgStr = "[ERROR:" & no & "]" & "|fffd|w|fffd||fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||fffd||fffd||fffd|j|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 10
            msgStr = "[ERROR:" & no & "]" & "|fffd|w|fffd||fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||fffd||fffd||fffd|j|fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|I"
        Case 11
            msgStr = "[ERROR:" & no & "]" & "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 12
            msgStr = "[ERROR:" & no & "]" & "|fffd||fffd|r|fffd|l|fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 13
            msgStr = "[ERROR:" & no & "]" & "|fffd||590||fffd||fffd||fffd||fffd||310||fffd||fffd||341|A|fffd|U|fffd||209||fffd||fffd||142||fffd||fffd|I"
        Case 14
            msgStr = "[ERROR:" & no & "]" & "|fffd||590||fffd||fffd||fffd||fffd||34e|w|fffd||80b3||fffd||fffd||102||fffd||fffd||702||fffd||fffd||fffd|I"
        Case 15
            msgStr = "[ERROR:" & no & "]" & "|fffd||fffd||fffd||fffd|l|fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 16
            msgStr = "[ERROR:" & no & "]" & "|fffd|T|fffd|C|fffd|N|fffd||fffd||fffd||fffd||fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 17
            msgStr = "[ERROR:" & no & "]" & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 18
            msgStr = "[ERROR:" & no & "]" & "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||310||fffd||fffd||341|A|fffd|Q|fffd|O|fffd||209||fffd||fffd||142||fffd||fffd|I"
        Case 19
            msgStr = "[ERROR:" & no & "]" & "|fffd|v|fffd|Z|fffd|p|fffd|s|fffd||42a8d||fffd||fffd||702||fffd||fffd||fffd|I"
        Case 20
            msgStr = "[ERROR:" & no & "]" & "|fffd||3d0||fffd||fffd||fffd||fffd||742||151||fffd||fffd||582||30d||fffd||fffd||fffd||fffd||fffd||fffd||682||fffd||fffd||fffd||fffd||fffd|A|fffd||fffd||fffd||30e||fffd|@|fffd||142||349||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|I"
        Case 21
            msgStr = "[ERROR:" & no & "]" & "F-in |fffd||fffd| F-out|fffd||fffd||83ec||fffd||fffd||fffd||fffd||fffd|I"
        Case 22
            msgStr = "[ERROR:" & no & "]" & "F-in |fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 23
            msgStr = "[ERROR:" & no & "]" & "F-out |fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 24
            msgStr = "[ERROR:" & no & "]" & "F-in |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|I"
        Case 25
            msgStr = "[ERROR:" & no & "]" & "F-out |fffd||fffd||50ab||fffd||fffd||fffd||fffd||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|I"
        Case 26
            msgStr = "[ERROR:" & no & "]" & "|fffd||fffd||835e||fffd||795||3d0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|I"
        Case 27
            msgStr = "[ERROR:" & no & "]" & "|fffd|[|fffd||fffd||fffd||702||fffd||fffd||355||fffd||fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B|fffd||fffd||fffd|@|fffd||fffd||fffd|f|fffd||fffd||fffd||fffd||fffd|g|fffd|p|fffd||fffd||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|I"
        Case 28
            msgStr = "[ERROR:" & no & "]" & "|fffd|v|fffd|Z|fffd||fffd||fffd||243|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|I"
        Case 29
            msgStr = "[ERROR:" & no & "]" & "|fffd|w|fffd||80b5||fffd||fffd||fffd||fffd||fffd||308||a554||fffd||24c|v|fffd|Z|fffd||fffd||fffd||243|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|I"
        Case 30
            msgStr = "[ERROR:" & no & "]" & "|fffd|\|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||30e|w|fffd||fffd||fffd||fffd|i|fffd|O|fffd|`|fffd|Q|fffd|O|fffd|O|fffd|j|fffd||213||fffd||fffd||250||752||80b5||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|I"
        Case 31
            msgStr = "[ERROR:" & no & "]" & "|fffd|J|fffd|n|fffd|N|fffd||fffd||fffd||313||fffd||fffd||342||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
    End Select
    '
    Msgbox_ScrnOption msgStr
    '
End Sub
'
Function MSG_CANTOPEN_FILE(ByVal fName As String) As String
Attribute MSG_CANTOPEN_FILE.VB_ProcData.VB_Invoke_Func = " \n14"
    MSG_CANTOPEN_FILE = fName & "|fffd|I|fffd|[|fffd|v|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
End Function
'
'---------------------------------------
'Message|fffd||315|\|fffd||fffd||fffd|G
'---------------------------------------
Sub DispMsg(ByVal msg As String, Optional ByVal bEcho)
Attribute DispMsg.VB_ProcData.VB_Invoke_Func = " \n14"
    If UCase(TypeName(bEcho)) = "ERROR" Then bEcho = True
    
    Application.ScreenUpdating = bEcho
    MsgBox msg, , GName_Prog
    
End Sub
'
'|fffd|V|fffd|[|fffd|g|fffd||318|g|fffd||fffd||fffd||315|`|fffd||fffd|
'
Sub setSheetWakusen(ByVal bOnOff As Boolean)
Attribute setSheetWakusen.VB_ProcData.VB_Invoke_Func = " \n14"
    ActiveWindow.DisplayGridlines = bOnOff
End Sub

'=== EOF ===

Attribute VB_Name = "epaMdl"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: EPA|fffd|@ (DLL|fffd|g|fffd|p)
'
' |fffd||c42c| : Aug 2003, PYJ, LSQ
'=================================================
Option Explicit
'
#If Win64 Then
Declare PtrSafe Function ysk_EPA_VBA Lib "MIST_E_Dbg_64.dll" ( _
    ByVal nId As Long, _
    InBkName As String, InStName As String, _
    InRowBgn As Integer, InColBgn As Integer, _
    InRowEnd As Integer, InColEnd As Integer, _
    OutBkName As String, OutStName As String, _
    OutRow As Integer, OutCol As Integer, _
    bgnYear As Integer, bgnMonth As Integer, _
    circleFlg As Integer, modelFlg As Integer, graphFlg As Integer, _
    directionFlg As Integer, dataFlg As Integer) As Integer
#Else
Declare Function ysk_EPA_VBA Lib "MIST_E_Dbg.dll" ( _
    ByVal nId As Long, _
    InBkName As String, InStName As String, _
    InRowBgn As Integer, InColBgn As Integer, _
    InRowEnd As Integer, InColEnd As Integer, _
    OutBkName As String, OutStName As String, _
    OutRow As Integer, OutCol As Integer, _
    bgnYear As Integer, bgnMonth As Integer, _
    circleFlg As Integer, modelFlg As Integer, graphFlg As Integer, _
    directionFlg As Integer, dataFlg As Integer) As Integer
#End If

Sub IS_EPA_VBA()
Attribute IS_EPA_VBA.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim bRtn As Boolean, bGraph As Boolean
    Dim nForcNum As Integer, nYSmpNum As Integer
    
    bRtn = GetDlgInp(YSK_EPA)
    If Not bRtn Then Exit Sub
    
    '|fffd|b|fffd||fffd||6f8||fffd||fffd||442||fffd||fffd||102||44f|o|fffd||fffd|
    Call changeToYSKDir
    
    nYSmpNum = g_aDialog.rgeInp.Rows.Count - 1
    nForcNum = forcIIf(g_aDialog.nTimeStyle = 1, 12, 4)
    bGraph = True ' g_aDialog.bGraph
    g_aDialog.bGraph = False
    
    bRtn = doEPA_VBA()
    
    If bRtn And bGraph Then
        Call EpaGraph(g_aDialog.rgeOutBgn, g_aDialog.rgeOutBgn.Offset(0, 7), nYSmpNum, 0)
    End If
    
    g_aDialog.rgeOutBgn.Worksheet.Activate
    ActiveWindow.DisplayGridlines = False
    g_aDialog.rgeOutBgn.Select
End Sub

Function doEPA_VBA() As Boolean
Attribute doEPA_VBA.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim rtn As Integer
    Dim r1 As Integer, c1 As Integer, r2 As Integer, c2 As Integer, ro As Integer, co As Integer
    Dim vInBkName As String, vInStName As String, vOutBkName As String, vOutStName As String
    Dim nId As Long
    
    r1 = g_aDialog.rgeInp.Row - 1: r2 = r1 + g_aDialog.rgeInp.Rows.Count - 1
    c1 = g_aDialog.rgeInp.Column - 1: c2 = c1 + g_aDialog.rgeInp.Columns.Count - 1
    ro = g_aDialog.rgeOutBgn.Row - 1: co = g_aDialog.rgeOutBgn.Column - 1
    
    vInBkName = g_aDialog.rgeInp.Worksheet.Parent.Name
    vInStName = g_aDialog.rgeInp.Worksheet.Name
    vOutBkName = g_aDialog.rgeOutBgn.Worksheet.Parent.Name
    vOutStName = g_aDialog.rgeOutBgn.Worksheet.Name
    
    nId = IIf(isTrialVer, 0, 1)
    
    rtn = ysk_EPA_VBA(nId, vInBkName, vInStName, r1, c1, r2, c2, _
        vOutBkName, vOutStName, ro, co, _
        g_aDialog.nYearBgn, g_aDialog.nMonth, g_aDialog.nTimeStyle, g_aDialog.dlgEpa.nMod, _
        forcIIf(g_aDialog.bGraph, 2, 1), forcIIf(g_aDialog.bColData, 1, 2), forcIIf(g_aDialog.bTitle, 1, 2))
    
    If rtn = -100 Then
        MsgBox "|fffd|\|fffd|t|fffd|g|fffd|E|fffd|F|fffd|A|fffd||fffd||fffd|s|fffd||fffd||fffd|R|fffd|s|fffd|[|fffd||202||302||141|A|fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical Or vbOKOnly
        doEPA_VBA = False
        Exit Function
    End If
    
'    rtn = ysk_EPA_VBA(vInBkName, vInStName, vInRowBgn, vInColBgn, _
'                      vInRowEnd, vInColEnd, vOutBkName, vOutStName, _
'                      vOutRow, vOutCol, vbgnYear, vbgnMonth, _
'                      vcircleFlg, vmodelFlg, 1, vdiretFlg, vdataFlg)
    
    Call Error_Display(rtn)
    
    doEPA_VBA = (rtn = 0)
End Function
                      
'|fffd|O|fffd||fffd||fffd|t
'Sep 2003, PYJ
'return row number used
Function EpaGraph(ByVal rgeDataBgn As Range, ByVal rgeOutBgn As Range, _
        ByVal nYSmpNum As Integer, ByVal nForcNum As Integer) As Integer
Attribute EpaGraph.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim rgeChart As Range, rgeCate As Range, rgeData As Range
    Dim rgeTmp As Range
    Dim nRtn As Integer
    Dim i As Long
    
    rgeOutBgn.Worksheet.Activate

'|fffd|d|fffd|o|fffd|`
'---TCSI + TC---
    Set rgeChart = rgeOutBgn.Range("A1:I15")
    Set rgeTmp = rgeDataBgn.Range("I1:I" & nYSmpNum + nForcNum + 1)
    For i = 1 To rgeTmp.Rows.Count
        rgeTmp(i, 1) = rgeDataBgn.Range("A1:A" & nYSmpNum + nForcNum + 1)(i, 1) & " " & rgeDataBgn.Range("B1:B" & nYSmpNum + nForcNum + 1)(i, 1)
    Next i
    
    nRtn = COMM_draw|fffd||710||fffd||fffd|O|fffd||fffd||fffd|t(rgeChart, _
        rgeDataBgn.Range("I1:I" & nYSmpNum + 1), _
        Union(rgeDataBgn.Range("C1:C" & nYSmpNum + 1), rgeDataBgn.Range("E1:E" & nYSmpNum + 1)), _
        "|fffd|d|fffd|o|fffd|`|fffd|@", "")
'---S---
    Set rgeChart = rgeChart.Offset(nRtn + 1, 0)
    nRtn = COMM_draw|fffd||710||fffd||fffd|O|fffd||fffd||fffd|t(rgeChart, _
        rgeDataBgn.Range("I1:I" & nYSmpNum + nForcNum + 1), _
        rgeDataBgn.Range("F1:F" & nYSmpNum + nForcNum + 1), _
        "|fffd|d|fffd|o|fffd|`|fffd|@", "")
'---I---
    Set rgeChart = rgeChart.Offset(nRtn + 1, 0)
    Call COMM_draw|fffd||710||fffd||fffd|O|fffd||fffd||fffd|t( _
        rgeChart, _
        rgeDataBgn.Range("I1:I" & nYSmpNum + 1), _
        rgeDataBgn.Range("G1:G" & nYSmpNum + 1), _
        "|fffd|d|fffd|o|fffd|`|fffd|@", "")
    EpaGraph = 47
End Function
'--- end of file ---
Attribute VB_Name = "frmAboutMe"
Attribute VB_Base = "0{B7448B2C-0CF2-4816-9CB6-AA7B33B64888}{82DBD678-8BBB-4228-8140-3ABB1367DFE1}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




'=== BOF ===

Private Sub cmdOK_Click()
    frmAboutMe.Hide
End Sub

Private Sub Label14_Click()
    Dim Link As String
    Link = Label14.Caption
    On Error GoTo NoCanDo
    ActiveWorkbook.FollowHyperlink Address:=Link, NewWindow:=True
    Unload Me
    Exit Sub
NoCanDo:
    MsgBox "Cannot open " & Link
End Sub

'=== EOF===
Private Sub Label9_Click()

End Sub
Attribute VB_Name = "frmBasicInfo"
Attribute VB_Base = "0{51366A3B-AFB8-48B1-B995-F88EB30017D3}{82EB91BE-C6A4-4C45-A704-91D6BD07E7BF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Option Explicit
Private m_varselect As String
Private m_bvarselected As Boolean
Private m_bOK As Boolean

Public Property Get bOK() As Boolean
    bOK = m_bOK
End Property

Public Property Let bOK(ByVal vNewValue As Boolean)
    m_bOK = vNewValue
End Property

Private Sub cateSelect_Click()
    m_bvarselected = True
    If m_bvarselected Then
        m_varselect = GetVarSel_Frm(Me, "RgeVar", "|fffd||d3dc||fffd||fffd||fffd||fffd||3d0||fffd|", "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||3d0||fffd|", , m_varselect)
    End If
    RgeObj.SetFocus
    DoEvents
End Sub

Private Sub chkCateName_Click()
    RgeCateName.Enabled = chkCateName.Value
    If RgeCateName.Enabled Then
        RgeCateName.SetFocus
    End If
End Sub

Private Sub chkNum2Cate_Click()
    RgeNumCate.Enabled = chkNum2Cate.Value
    If RgeNumCate.Enabled Then
        RgeNumCate.SetFocus
    End If
End Sub

#If 0 Then  '11.12.2 LSQ cmt
Private Sub chkTimeLag_Click()
    RgeTimeLag.Enabled = chkTimeLag.Value
    If RgeTimeLag.Enabled Then
        RgeTimeLag.SetFocus
    End If
End Sub
#End If

Private Sub cmdCancel_Click()
    m_bOK = False
    Me.Hide
End Sub

Private Sub cmdOK_Click()
    m_bOK = True
    Me.Hide
End Sub

Private Sub RefEdit1_BeforeDragOver(Cancel As Boolean, ByVal Data As MSForms.DataObject, ByVal x As stdole.OLE_XPOS_CONTAINER, ByVal y As stdole.OLE_YPOS_CONTAINER, ByVal DragState As MSForms.fmDragState, Effect As MSForms.fmDropEffect, ByVal Shift As Integer)

End Sub

Private Sub RgeVar_Change()
    If bRangeChanged_Frm(2, frmBasicInfo.RgeVar.Text) Then m_varselect = "0"
    m_bvarselected = False
End Sub

Public Property Get varselect() As String
    varselect = m_varselect
End Property

Public Property Let varselect(ByVal vNewValue As String)
    m_varselect = vNewValue
End Property

Public Property Get bvarselected() As Boolean
    bvarselected = m_bvarselected
End Property

Public Property Let bvarselected(ByVal vNewValue As Boolean)
    m_bvarselected = vNewValue
End Property

Private Sub UserForm_Activate()
    m_bOK = False
    RgeObj.SetFocus
End Sub



Attribute VB_Name = "frmExtSr1"
Attribute VB_Base = "0{D12C1516-4C25-4395-AB57-766504B0D00A}{5C92EF6E-0D99-472C-BBA1-9BA2D45F1D8E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False






Option Explicit
Private m_varselect As String
Private m_bvarselected As Boolean
Private m_bOK As Boolean

Public Property Get bOK() As Boolean
    bOK = m_bOK
End Property

Public Property Let bOK(ByVal vNewValue As Boolean)
    m_bOK = vNewValue
End Property

Private Sub cateSelect_Click()
    m_bvarselected = True
    If m_bvarselected Then
        m_varselect = GetVarSel_Frm(Me, "RgeVar", "|fffd||d3dc||fffd||fffd||fffd||fffd||3d0||fffd|", "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||3d0||fffd|", , m_varselect)
    End If
    RgeObj.SetFocus
    DoEvents
End Sub

Private Sub chkCateName_Click()
    RgeCateName.Enabled = chkCateName.Value
    If RgeCateName.Enabled Then
        RgeCateName.SetFocus
    End If
End Sub

Private Sub chkNum2Cate_Click()
    RgeNumCate.Enabled = chkNum2Cate.Value
    If RgeNumCate.Enabled Then
        RgeNumCate.SetFocus
    End If
End Sub

Private Sub chkTimeLag_Click()
    RgeTimeLag.Enabled = chkTimeLag.Value
    If RgeTimeLag.Enabled Then
        RgeTimeLag.SetFocus
    End If
End Sub

Private Sub chkYsk_Click()
    RgeYskData.Enabled = chkYsk.Value
    If RgeYskData.Enabled Then
        RgeYskData.SetFocus
    End If
End Sub

Private Sub cmdCancel_Click()
    m_bOK = False
    Me.Hide
End Sub

Private Sub cmdOK_Click()
    m_bOK = True
    Me.Hide
End Sub

Private Sub optExtraInfoNo_Click()

End Sub

Private Sub RgeVar_Change()
    If bRangeChanged_Frm(5, frmExtSr1.RgeVar.Text) Then m_varselect = "0"
    m_bvarselected = False
End Sub

Public Property Get varselect() As String
    varselect = m_varselect
End Property

Public Property Let varselect(ByVal vNewValue As String)
    m_varselect = vNewValue
End Property

Public Property Get bvarselected() As Boolean
    bvarselected = m_bvarselected
End Property

Public Property Let bvarselected(ByVal vNewValue As Boolean)
    m_bvarselected = vNewValue
End Property

Private Sub TextBox1_Change()

End Sub

Private Sub UserForm_Activate()
    m_bOK = False
    RgeObj.SetFocus
End Sub



Attribute VB_Name = "frmForecast"
Attribute VB_Base = "0{E75BE416-D62E-4E88-9547-273971C00AF0}{ACFB19C1-2CAA-4644-8A12-E227EA1EEF69}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False






Option Explicit
Private m_varselect As String
Private m_bvarselected As Boolean
Private m_bOK As Boolean

Public Property Get bOK() As Boolean
    bOK = m_bOK
End Property

Public Property Let bOK(ByVal vNewValue As Boolean)
    m_bOK = vNewValue
End Property

Private Sub cateSelect_Click()
    m_bvarselected = True
    If m_bvarselected Then
        m_varselect = GetVarSel_Frm(Me, "RgeVar", "|fffd||d3dc||fffd||fffd||fffd||fffd||3d0||fffd|", "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||3d0||fffd|", , m_varselect)
    End If
    RgeObj.SetFocus
    DoEvents
End Sub

Private Sub chkCateName_Click()
    RgeCateName.Enabled = chkCateName.Value
    If RgeCateName.Enabled Then
        RgeCateName.SetFocus
    End If
End Sub

Private Sub chkNum2Cate_Click()
    RgeNumCate.Enabled = chkNum2Cate.Value
    If RgeNumCate.Enabled Then
        RgeNumCate.SetFocus
    End If
End Sub

Private Sub chkTimeLag_Click()
    RgeTimeLag.Enabled = chkTimeLag.Value
    If RgeTimeLag.Enabled Then
        RgeTimeLag.SetFocus
    End If
End Sub

Private Sub chkYsk_Click()
    RgeYskData.Enabled = chkYsk.Value
    If RgeYskData.Enabled Then
        RgeYskData.SetFocus
    End If
End Sub

Private Sub cmdCancel_Click()
    m_bOK = False
    Me.Hide
End Sub

Private Sub cmdOK_Click()
    m_bOK = True
    Me.Hide
End Sub

Private Sub RgeVar_Change()
    If bRangeChanged_Frm(6, frmForecast.RgeVar.Text) Then m_varselect = "0"
    m_bvarselected = False
End Sub

Public Property Get varselect() As String
    varselect = m_varselect
End Property

Public Property Let varselect(ByVal vNewValue As String)
    m_varselect = vNewValue
End Property

Public Property Get bvarselected() As Boolean
    bvarselected = m_bvarselected
End Property

Public Property Let bvarselected(ByVal vNewValue As Boolean)
    m_bvarselected = vNewValue
End Property

Private Sub TextBox1_Change()

End Sub

Private Sub UserForm_Activate()
    m_bOK = False
    RgeObj.SetFocus
End Sub



Attribute VB_Name = "frmVarSel"
Attribute VB_Base = "0{6B994F07-66F2-44E9-A1BD-A243EB0E1FE5}{DB87CC74-3C54-4FA2-843F-2C4CD3BE98AA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





'=======================================================
' Variable Selection
'
' 2008.06 WZH
'=======================================================
Option Explicit

Private m_Variables As String
Private m_Dict
Private m_DictUnsel
Private m_bIsOK As Boolean
Private m_VarList() As Long

Private Function GetListInx(ByVal strText As String, lb As MSForms.ListBox) As Long
    Dim i As Long, loc As Long
    Dim tmpInx As Long, nInx As Long
    If lb.ListCount = 0 Then
        GetListInx = 0
        Exit Function
    End If
    nInx = CInt(m_Dict(strText))
    loc = lb.ListCount
    For i = 0 To lb.ListCount - 1
        tmpInx = CInt(m_Dict(lb.List(i)))
        If nInx < tmpInx Then
            loc = i
            Exit For
        End If
    Next i
    GetListInx = loc
End Function

Public Property Get bIsOk() As Boolean
    bIsOk = m_bIsOK
End Property

Public Property Get VarSelected() As String
    Dim i As Long, j As Long
    j = 0
    For i = 0 To lbSelected.ListCount - 1
        'm_VarList(m_Dict(lbSelected.List(i))) = i
        m_VarList(j) = m_Dict(lbSelected.List(i))
        j = j + 1
    Next i
    For i = 0 To lbUnselected.ListCount - 1
        'm_VarList(m_Dict(lbUnselected.List(i))) = lbSelected.ListCount + i
        m_VarList(j) = m_Dict(lbUnselected.List(i))
        j = j + 1
    Next i
    VarSelected = lbSelected.ListCount
    For i = LBound(m_VarList) To UBound(m_VarList)
        VarSelected = VarSelected & "," & m_VarList(i)
    Next i
End Property

Public Property Let Variables(ByVal vNewValue As String)
    Dim i As Long
    Dim varList As Variant
    m_bIsOK = False
    m_Variables = vNewValue
    varList = Split(m_Variables, ",")
    lbSelected.Clear
    lbUnselected.Clear
    Set m_Dict = Nothing
    Set m_Dict = New Collection
    ReDim m_VarList(LBound(varList) To UBound(varList))
    For i = LBound(varList) To UBound(varList)
        'lbSelected.AddItem varList(i)
        'm_Dict.Add varList(i), i
        m_Dict.Add i, varList(i)
        m_VarList(i) = i
    Next i
End Property

Public Sub InitVarSelected(ByVal strVarSelected As String)
    Dim var As Variant
    Dim n As Long, sn As Long, un As Long, i As Long
    Dim vs As Variant
    var = Split(m_Variables, ",")
    lbSelected.Clear
    lbUnselected.Clear
    If strVarSelected = "0" Then
        For i = LBound(var) To UBound(var)
            lbSelected.AddItem var(i)
        Next i
    Else
        vs = Split(strVarSelected, ",")
        n = UBound(vs)
        sn = val(vs(0))
        un = n - sn
        For i = 1 To sn
            lbSelected.AddItem var(vs(i))
        Next i
        For i = 1 To un
            lbUnselected.AddItem var(vs(i + sn))
        Next i
    End If
End Sub

Private Sub btnAdd_Click()
    Dim i As Long
    If lbUnselected.ListCount = 0 Then Exit Sub
    For i = lbUnselected.ListCount - 1 To 0 Step -1
        If lbUnselected.Selected(i) Then
            lbSelected.AddItem lbUnselected.List(i), GetListInx(lbUnselected.List(i), lbSelected)
            lbUnselected.RemoveItem i
        End If
    Next i
End Sub

Private Sub btnCancel_Click()
    m_bIsOK = False
    Me.Hide
End Sub

Private Sub btnOK_Click()
    m_bIsOK = True
    Me.Hide
End Sub

Private Sub UserForm_Initialize()
    Set m_Dict = New Collection 'CreateObject("Scripting.Dictionary")
    Set m_DictUnsel = New Collection 'CreateObject("Scripting.Dictionary")
    m_bIsOK = False
    
    '11.7.5 LSQ (static text NG in MAC)
    btnAdd.Caption = "|fffd||fffd|"
    btnRemove.Caption = "|fffd||fffd|"
End Sub

Private Sub UserForm_Terminate()
    Set m_Dict = Nothing
    Set m_DictUnsel = Nothing
    m_bIsOK = False
End Sub

Private Sub btnRemove_Click()
    Dim i As Long
    Dim strText As String
    If lbSelected.ListCount = 0 Then Exit Sub
    For i = lbSelected.ListCount - 1 To 0 Step -1
        If lbSelected.Selected(i) Then
            strText = lbSelected.List(i)
            lbUnselected.AddItem strText, GetListInx(strText, lbUnselected)
            lbSelected.RemoveItem i
        End If
    Next i
End Sub
Attribute VB_Name = "helpMdl"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|vVer2.5 : |fffd|w|fffd||fffd||fffd|v
'
' |fffd||c42c| : 2007.1 LSQ
'
'=================================================
Option Explicit
Option Private Module

Private Declare PtrSafe Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" ( _
                    ByVal hwnd As LongPtr, _
                    ByVal lpOperation As String, _
                    ByVal lpFile As String, _
                    ByVal lpParameters As String, _
                    ByVal lpDirectory As String, _
                    ByVal nShowCmd As Long) As Long

Private Const SW_HIDE As Long = 0
Private Const SW_SHOWNORMAL As Long = 1
Private Const SW_SHOWMAXIMIZED As Long = 3
Private Const SW_SHOWMINIMIZED As Long = 2

Sub fHelp_ISTATYSK()
    Dim textMsg As String
    
    textMsg = GVerMsg
    
    If UCase(Left(textMsg, 5)) = "DUMMY" Then   'default = blank
        textMsg = ""
    End If

    frmAboutMe.lblVerMsg.Caption = textMsg
    frmAboutMe.Show

End Sub

'***********************
Function sTAHEN_Path() As String
    sTAHEN_Path = getPathName() & "\"
End Function

Function iFile_Check(sFileName As String) As Integer
'*************************
'|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||311||fffd||fffd||742||12c82||5c2||fffd|
'|fffd||fffd||fffd||742||fffd||fffd||fffd||182||fffd|=1
'|fffd||fffd||fffd||742||fffd||fffd||202||fffd||fffd||182||fffd|=0
'*************************
    Dim iRet
    Dim vTemp As Variant
    iRet = 0
    On Error Resume Next
    vTemp = FileDateTime(sFileName)
    If (vTemp = "") Then '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||202||fffd||fffd||fffd||fffd||fffd||fffd||182||fffd|
        iRet = 0
    Else
        If (vTemp <> "") Then
            iRet = 1
        End If
    End If
    iFile_Check = iRet
End Function

'
Sub helpComm()
    Application.Help getPathName + "\" + "sss_forc.hlp", "1"
End Sub
'
Sub setHelpToDlgBtn()
    Exit Sub
    
    '--- not used "Help Button" ---
    ThisWorkbook.DialogSheets("|fffd||fffd||fffd||595||fffd||fffd||fffd|Dlg").Buttons("btnHelp").OnAction = "helpComm"
    ThisWorkbook.DialogSheets("|fffd|U|fffd|z|fffd|}1Dlg").Buttons("btnHelp").OnAction = "helpComm"
    ThisWorkbook.DialogSheets("|fffd|U|fffd|z|fffd|}2Dlg").Buttons("btnHelp").OnAction = "helpComm"
    ThisWorkbook.DialogSheets("|fffd||fffd||fffd|d|fffd||693||fffd|Dlg").Buttons("btnHelp").OnAction = "helpComm"
    ThisWorkbook.DialogSheets("EPADlg").Buttons("btnHelp").OnAction = "helpComm"
    ThisWorkbook.DialogSheets("|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|Dlg").Buttons("btnHelp").OnAction = "helpComm"
    ThisWorkbook.DialogSheets("|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|Dlg").Buttons("btnHelp").OnAction = "helpComm"
    ThisWorkbook.DialogSheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|Dlg").Buttons("btnHelp").OnAction = "helpComm"
    
End Sub

Sub fOnlineManual_iSTAT_ISTATYSK()
    Call Comm_LoadPdf("MIST_HLP.PDF", "|fffd|I|fffd||fffd||fffd||fffd||fffd|C|fffd||fffd||fffd|w|fffd||fffd||fffd|v|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|")
End Sub

Sub fExplain_iSTAT_ISTATYSK()
    Call Comm_LoadPdf("MIST_DOC.PDF", "|fffd||fffd||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|")
End Sub

Private Sub Comm_LoadPdf(ByVal fName As String, ByVal errMsg As String)
    Dim sPDF_Path As String
    Dim sTemp As String
    Dim vRet As Variant
    Dim iLen As Integer
    Dim sTemp2 As String
    Dim sTemp1 As String
    Dim iRet As Integer
    
    sTemp = ""
    sTemp2 = sTAHEN_Path()
    iRet = iExt_App_Search(".pdf", 1, sTemp)
    If (sTemp = "") Then
        MsgBox "PDF|fffd|{|fffd||fffd||fffd|p|fffd|\|fffd|t|fffd|g|fffd||fffd||fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd||fffd|"
        Exit Sub
    Else
        sPDF_Path = sTemp
        sTemp1 = sTemp2 & fName
    '---------------------------------------------------------------------
        iRet = iFile_Check(sTemp1)
        If (iRet = 1) Then
           ' -----2007/09/03 |fffd|\|fffd|t|fffd|g|fffd||302||fffd||fffd||fffd|p|fffd|X|fffd||fffd||fffd||243|X|fffd|y|fffd|[|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||fffd|--------
           'sTemp = sPDF_Path & " " & sTemp2 & fName
            sTemp = sPDF_Path & " " & Chr(34) & sTemp2 & fName & Chr(34)
           '-----------------------------------------------------------------------------
            'vRet = Shell(sTemp, 4)
            ShellExecute Application.hwnd, "open", sTemp2 & fName, vbNullString, sTemp2, SW_SHOWNORMAL
        Else
            MsgBox errMsg, vbExclamation + vbOKOnly, GName_Prog
        End If
    End If
End Sub

'=== EOF ===

Attribute VB_Name = "mdlCallMe"
'=======================================================
' Variable Selection
'
' 2008.06 WZH
'=======================================================
Option Explicit

Function getDefaultAddress(ByVal flgType As Long) As String
    Dim tmpRge As Range
    Set tmpRge = SbkThis.Worksheets("TempVarSelect").Range("B2")
    If flgType > 0 Then
        getDefaultAddress = tmpRge(flgType, 2)
    Else
        getDefaultAddress = ""
    End If
End Function

Function getDefaultVarSelect(ByVal flgType As Long) As String
    Dim tmpRge As Range
    Set tmpRge = SbkThis.Worksheets("TempVarSelect").Range("B2")
    If flgType > 0 Then
        getDefaultVarSelect = tmpRge(flgType, 3)
    Else
        getDefaultVarSelect = ""
    End If
    If getDefaultVarSelect = vbNullString Then getDefaultVarSelect = "0"
End Function

Sub setDefaultAddress(ByVal flgType As Long, ByVal strVarAddr As String)
    Dim tmpRge As Range
    Set tmpRge = SbkThis.Worksheets("TempVarSelect").Range("B2")
    If flgType > 0 Then
        tmpRge(flgType, 2) = strVarAddr
    End If
End Sub

Sub setDefaultVarSelect(ByVal flgType As Long, ByVal strVarSelect As String)
    Dim tmpRge As Range
    Set tmpRge = SbkThis.Worksheets("TempVarSelect").Range("B2")
    If flgType > 0 Then
        tmpRge(flgType, 3) = strVarSelect
    End If
End Sub

Function getCurrentAddress(ByVal dlg As DialogSheet, ByVal strVarRge As String) As String
    Dim RgeVar As Range
    On Error Resume Next
    Set RgeVar = Range(dlg.EditBoxes(strVarRge).Text)
    If Err.Number <> 0 Then
        On Error GoTo 0
        getCurrentAddress = ""
    Else
        getCurrentAddress = "[" & RgeVar.Worksheet.Parent.Name & "]" & RgeVar.Worksheet.Name & "!" & RgeVar.AddressLocal
    End If
    On Error GoTo 0
End Function

Function bRangeChanged(ByVal flgType As Long, ByVal dlg As DialogSheet, ByVal strVarRge As String) As Boolean
    Dim oldAddress As String
    oldAddress = getDefaultAddress(flgType)
    bRangeChanged = Not (oldAddress = getCurrentAddress(dlg, strVarRge))
End Function

Function getCurrentAddress_Frm(ByVal strRangeAddress As String) As String
    Dim RgeVar As Range
    On Error Resume Next
    Set RgeVar = Range(strRangeAddress)
    If Err.Number <> 0 Then
        On Error GoTo 0
        getCurrentAddress_Frm = ""
    Else
        getCurrentAddress_Frm = "[" & RgeVar.Worksheet.Parent.Name & "]" & RgeVar.Worksheet.Name & "!" & RgeVar.AddressLocal
    End If
    On Error GoTo 0
End Function

Function bRangeChanged_Frm(ByVal flgType As Long, ByVal strRangeAddress As String) As Boolean
    Dim oldAddress As String
    oldAddress = getDefaultAddress(flgType)
    bRangeChanged_Frm = Not (oldAddress = getCurrentAddress_Frm(strRangeAddress))
End Function

'Set a dictionary for parameters string whick is divided by '&', e.g. 'GrpType=2&FontSize=10'
Function SetDict(ByVal strpara As String) As Object
    Dim arys() As String, subarys() As String
    Dim s As String
    Dim i As Integer, j As Integer
    Dim dict As Collection
    Set SetDict = Nothing
    On Error Resume Next
    arys = Split(strpara, "&")
    Set dict = New Collection
    For i = 0 To UBound(arys)
        subarys = Split(arys(i), "=")
        dict.Add subarys(1), subarys(0)
    Next i
    Set SetDict = dict
ExitIt:
    Set dict = Nothing
    On Error GoTo 0
End Function

Function varselect(ByVal strVarList As String, Optional ByVal strSelected As String = "0") As String
    Dim rtnStr As String
    Application.ScreenUpdating = True
    If Trim(strVarList) = vbNullString Then
        varselect = "ERROR"
        Exit Function
    End If
    frmVarSel.Variables = strVarList
    frmVarSel.InitVarSelected strSelected
    frmVarSel.Show
    If frmVarSel.bIsOk Then
        rtnStr = frmVarSel.VarSelected
    Else
        rtnStr = strSelected '"0"
    End If
    DoEvents
    Unload frmVarSel
    varselect = rtnStr
End Function

Function GetVarSel(ByVal dlg As DialogSheet, ByVal strVarRge As String, _
                                 Optional ByVal strlabel1 As String = "|fffd||d3dc||fffd||fffd||fffd||fffd|A|fffd|C|fffd|e|fffd||fffd|", _
                                 Optional ByVal strLabel2 As String = "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd|A|fffd|C|fffd|e|fffd||fffd|", _
                                 Optional ByVal strSelected As String = "0") As String
    Dim i As Integer
    Dim rtn As Integer
    Dim RgeVar As Range
    Dim valvar As Variant
    Dim strVarSelect As String
    Dim saveLabel1 As String, saveLabel2 As String
    strVarSelect = vbNullString
    On Error GoTo err_handler
    If Trim(strSelected) = vbNullString Then
        strSelected = "0"
    End If
    saveLabel1 = frmVarSel.Label1.Caption
    saveLabel2 = frmVarSel.Label2.Caption
    frmVarSel.Label1.Caption = strlabel1
    frmVarSel.Label2.Caption = strLabel2
    Set RgeVar = Range(dlg.EditBoxes(strVarRge).Text)
    valvar = RgeVar.Value
    For i = 1 To RgeVar.Columns.Count
        strVarSelect = strVarSelect & "," & valvar(1, i)
    Next i
    strVarSelect = varselect(Mid(strVarSelect, 2), strSelected)
exit_function:
    frmVarSel.Label1.Caption = saveLabel1
    frmVarSel.Label2.Caption = saveLabel2
    GetVarSel = strVarSelect
    On Error GoTo 0
    Exit Function
err_handler:
    strVarSelect = "0"
    Resume exit_function
End Function

Function GetVarSel_Frm(ByVal dlg As UserForm, ByVal strVarRge As String, _
                                 Optional ByVal strlabel1 As String = "|fffd||d3dc||fffd||fffd||fffd||fffd|A|fffd|C|fffd|e|fffd||fffd|", _
                                 Optional ByVal strLabel2 As String = "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd|A|fffd|C|fffd|e|fffd||fffd|", _
                                 Optional ByVal bFirstColTitle As Boolean = False, _
                                 Optional ByVal strSelected As String = "0") As String
    Dim i As Long
    Dim rtn As Integer
    Dim ItemNum As Long, smpNum As Long
    Dim RgeVar As Range
    Dim valvar As Variant
    Dim strVarSelect As String
    Dim saveLabel1 As String, saveLabel2 As String
    strVarSelect = vbNullString
    On Error GoTo err_handler
    If Trim(strSelected) = vbNullString Then
        strSelected = "0"
    End If
    saveLabel1 = frmVarSel.Label1.Caption
    saveLabel2 = frmVarSel.Label2.Caption
    frmVarSel.Label1.Caption = strlabel1
    frmVarSel.Label2.Caption = strLabel2
    Set RgeVar = Range(dlg.Controls(strVarRge).Text)
    ItemNum = RgeVar.Columns.Count
    smpNum = RgeVar.Rows.Count
    If bFirstColTitle Then
        ItemNum = ItemNum - 1
        Set RgeVar = RgeVar.Range("B1").Resize(smpNum, ItemNum)
    End If
    valvar = RgeVar.Value
    For i = 1 To RgeVar.Columns.Count
        strVarSelect = strVarSelect & "," & valvar(1, i)
    Next i
    strVarSelect = varselect(Mid(strVarSelect, 2), strSelected)
exit_function:
    frmVarSel.Label1.Caption = saveLabel1
    frmVarSel.Label2.Caption = saveLabel2
    GetVarSel_Frm = strVarSelect
    On Error GoTo 0
    Exit Function
err_handler:
    strVarSelect = "0"
    Resume exit_function
End Function

Function nu_toXlRCstr(inputFormula As String) As String
    On Error Resume Next
    
    nu_toXlRCstr = Application.ConvertFormula( _
                Formula:=inputFormula, _
                fromReferenceStyle:=xlA1, _
                toReferenceStyle:=xlR1C1)
    
    If Err.Number <> 0 Then
        nu_toXlRCstr = inputFormula
        Err.Clear
    End If
    
    On Error GoTo 0
End Function

Function nu_toXlA1str(inputFormula As String) As String
    On Error Resume Next
    
    nu_toXlA1str = Application.ConvertFormula( _
                Formula:=inputFormula, _
                fromReferenceStyle:=xlR1C1, _
                toReferenceStyle:=xlA1)
    
    If Err.Number <> 0 Then
        nu_toXlA1str = inputFormula
        Err.Clear
    End If
    
    On Error GoTo 0
End Function

Function VarRows(ByVal strData As String, ByVal strCriteria As String) As Integer
    Dim rngData As Range, rngCriteria As Range
    Dim rtnRows As Integer
    Set rngData = Range(toXlA1str(strData))
    Set rngCriteria = Range(toXlA1str(strCriteria))
    rngData.AdvancedFilter Action:=xlFilterInPlace, criteriarange:=rngCriteria, unique:=True
    rtnRows = rngData.Columns(2).SpecialCells(xlCellTypeVisible).Count - 1
    rngData.Worksheet.ShowAllData
    VarRows = rtnRows
End Function

Function ArrangeXRange(ByVal xRange As Range, ByVal varselect As String) As Range
    Dim ItemNum As Long, smpNum As Long, i As Long
    Dim tmpRge As Range
    Dim stObj As Worksheet
    Dim v As Variant
    Set tmpRge = xRange.Range("A1")
    Set stObj = xRange.Worksheet
    If varselect <> "0" Then
        v = Split(varselect, ",")
        ItemNum = v(0)
        smpNum = xRange.Rows.Count
        For i = 1 To ItemNum
            tmpRge.Range(stObj.Cells(1, i), stObj.Cells(smpNum, i)) = xRange.Columns(val(v(i)) + 1).Value
        Next i
        Set ArrangeXRange = tmpRge.Resize(smpNum, ItemNum)
    Else
        Set ArrangeXRange = xRange
    End If
End Function
'===== EOF =====
Attribute VB_Name = "mdlCommon"
'=======================================================
Option Private Module
Option Explicit

Private Function CollectionSort(ByRef oCollection As Collection, Optional bSortAscending As Boolean = True) As Long
    Dim lSort1 As Long, lSort2 As Long
    Dim vTempItem1 As Variant, vTempItem2 As Variant, bSwap As Boolean
    
    On Error GoTo ErrFailed
    For lSort1 = 1 To oCollection.Count - 1
        For lSort2 = lSort1 + 1 To oCollection.Count
            If bSortAscending Then
                If oCollection(lSort1) > oCollection(lSort2) Then
                    bSwap = True
                Else
                    bSwap = False
                End If
            Else
                If oCollection(lSort1) < oCollection(lSort2) Then
                    bSwap = True
                Else
                    bSwap = False
                End If
            End If
            If bSwap Then
                'Store the items
                If VarType(oCollection(lSort1)) = vbObject Then
                    Set vTempItem1 = oCollection(lSort1)
                Else
                    vTempItem1 = oCollection(lSort1)
                End If
                
                If VarType(oCollection(lSort2)) = vbObject Then
                    Set vTempItem2 = oCollection(lSort2)
                Else
                    vTempItem2 = oCollection(lSort2)
                End If
                
                'Swap the items over
                oCollection.Add vTempItem1, , lSort2
                oCollection.Add vTempItem2, , lSort1
                'Delete the original items
                oCollection.Remove lSort1 + 1
                oCollection.Remove lSort2 + 1
            End If
        Next
    Next
    Exit Function

ErrFailed:
    CollectionSort = Err.Number
    On Error GoTo 0
End Function

Function Remove0Cate(ByVal RgeVarKind As String, rgeDataIn As String, rgeCateIn As String, ByVal bStop_n0 As Boolean, Optional ByRef rtnVal As Variant, Optional ByRef NewCates As Variant) As Integer
    Dim i As Long, j As Long, k As Long
    Dim ItmNum As Long, smpNum As Long, CateNum As Long
    Dim strCate As String
    Dim rgeData As Range, rgeCate As Range, rgeKind As Range
    Dim varData As Variant, Cate As Variant
    Dim cateCol As Collection
    Dim tmpstr As String
    On Error Resume Next
    Set rgeData = Range(toXlA1str(rgeDataIn))
    Set rgeCate = Range(toXlA1str(rgeCateIn))
    Set rgeKind = Range(toXlA1str(RgeVarKind))
    
    varData = rgeData.Value
    Cate = rgeCate.Value
    ItmNum = rgeData.Columns.Count
    smpNum = rgeData.Rows.Count - 1
    CateNum = rgeCate.Rows.Count
    For i = 1 To ItmNum
        If rgeKind(i, 1) > 0 Then
            Set cateCol = New Collection
            For j = 1 To smpNum
                strCate = CStr(varData(j + 1, i))
                If cateCol.Item(strCate) = 0 Then
                    cateCol.Add varData(j + 1, i), strCate
                End If
            Next j
            CollectionSort cateCol, True
            For j = 1 To smpNum
                strCate = CStr(varData(j + 1, i))
                For k = 1 To cateCol.Count
                    If varData(j + 1, i) = cateCol(k) Then
                        varData(j + 1, i) = k
                        Exit For
                    End If
                Next k
            Next j
            If CateNum >= cateCol.Count Then
                For k = 1 To cateCol.Count
                    Cate(k, i) = Cate(cateCol(k), i)
                Next k
            End If
            If Not IsMissing(rtnVal) Then
                rtnVal(i) = cateCol.Count
            End If
            If Not IsMissing(NewCates) Then
                tmpstr = ""
                For k = 1 To cateCol.Count
                    tmpstr = tmpstr & "," & cateCol(k)
                Next k
                NewCates(i) = Mid(tmpstr, 2)
            End If
            Set cateCol = Nothing
        End If
    Next i
    rgeData.Value = varData
    rgeCate.Value = Cate
    Set cateCol = Nothing
    Remove0Cate = 0
    On Error GoTo 0
End Function

Sub SetRangeBorder(ByVal rge As Range, _
                    ByVal leftWgt As XlBorderWeight, _
                    ByVal topWgt As XlBorderWeight, _
                    ByVal rightWgt As XlBorderWeight, _
                    ByVal bottomWgt As XlBorderWeight, _
                    Optional ByVal insideV As XlBorderWeight = xlNone, _
                    Optional ByVal insideH As XlBorderWeight = xlNone)
                                    
    rge.Borders(xlDiagonalDown).LineStyle = xlNone
    rge.Borders(xlDiagonalUp).LineStyle = xlNone
    With rge.Borders(xlEdgeLeft)
        If leftWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = leftWgt
            .ColorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlEdgeTop)
        If topWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = topWgt
            .ColorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlEdgeBottom)
        If bottomWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = bottomWgt
            .ColorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlEdgeRight)
        If rightWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = rightWgt
            .ColorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlInsideVertical)
        If insideV <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = insideV
            .ColorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlInsideHorizontal)
        If insideH <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = insideH
            .ColorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
End Sub
'=== EOF ===
Attribute VB_Name = "mdlVbaGrp"
'=======================================================
' Common interface for getting graphic data from C
'
' 2007.02 WZH
'=======================================================
Option Explicit

Private Const BUF_SIZE As Integer = 256
Public Const maxGrpNum As Integer = 255

Type VBAGRAPH
    no As Long
    type As Long                    'Graphic type based on each method; 0 is for no graphic
    sheetName As String             'worksheet name of data and output; must set
    grpData As String               'graphic data source              ; must set
    grpOut As String                'graphic output range             ; must set
    grpPara As String               'parameters for drawing a graphic, the division is '&'
End Type

'change a string returned by C to a basic string(BSTR)
Private Function CtoBSTR(ByVal strAnsi As String) As String
    Dim tmpstr As String
    On Error Resume Next
    tmpstr = StrConv(Trim(strAnsi), vbUnicode)
    If tmpstr <> vbNullString Then
        tmpstr = (Mid(tmpstr, 1, InStr(1, tmpstr, Chr(0)) - 1))
    End If
    CtoBSTR = IIf(Err.Number <> 0, vbNullString, tmpstr)
    On Error GoTo 0
End Function

'initialize graphic array
Function InitGrpAry(grp() As VBAGRAPH) As Boolean
    Dim dimen As Long
    Dim i As Long
    On Error Resume Next
    dimen = UBound(grp)
    For i = 1 To dimen
        grp(i).no = 0
        grp(i).type = 0
        grp(i).sheetName = Space(BUF_SIZE)
        grp(i).grpData = Space(BUF_SIZE)
        grp(i).grpOut = Space(BUF_SIZE)
        grp(i).grpPara = Space(BUF_SIZE)
    Next i
    InitGrpAry = IIf(Err.Number = 0, True, False)
    On Error GoTo 0
End Function

'convert all C strings to Basic strings
Function ConvToBSTR(grp As VBAGRAPH) As Boolean
    On Error Resume Next
    grp.sheetName = CtoBSTR(grp.sheetName)
    grp.grpData = CtoBSTR(grp.grpData)
    grp.grpOut = CtoBSTR(grp.grpOut)
    grp.grpPara = CtoBSTR(grp.grpPara)
    ConvToBSTR = grp.sheetName <> vbNullString _
             And grp.grpData <> vbNullString _
             And grp.grpOut <> vbNullString
    On Error GoTo 0
End Function

'=== EOF ===
Attribute VB_Name = "menuBarMdl"
'===================================================
' SSS|fffd|\|fffd||fffd|Ver2.5 : |fffd||fffd||fffd|j|fffd||fffd||fffd|[ System (CommandBar)
'
' 2007.1.13 LSQ
'===================================================
Option Explicit
Option Private Module

Public Const BARNAME_ISTATYSK As String = GName_Prog
Public Const BARNAME_ISTATYSK_ICON As String = "MYSK1_ICONBAR"
'NOTE : ICONBAR not yet used; 07.1.13 LSQ (Just same as in TKVer6)

Sub make_MenuBar()
    Dim menuBar As CommandBar           'menu bar
    Dim popMenu As CommandBarControl    'menu
    Dim submn As CommandBarControl      'sub menu
    Dim submnA As CommandBarControl     'sub menu
    Dim iconMenuName As String

    'delete old one if any
    Call delete_MenuBar(BARNAME_ISTATYSK)

    Set menuBar = CommandBars.Add(Name:=BARNAME_ISTATYSK)  ', Temporary:=True', MenuBar:=True)
    menuBar.Position = msoBarTop
    
    '---|fffd||fffd||fffd||595||fffd||fffd||fffd|---
    Set popMenu = makePopMenu(menuBar, "|fffd||fffd|{|fffd||fffd||fffd|", "|fffd||fffd|{|fffd||fffd||341|E|fffd||fffd||fffd||590|}")
    popMenu.BeginGroup = True
    Call addItemToPopMenu(popMenu, "IS_SokanZu1_VBA", "|fffd||fffd||fffd||590|}")
    '
    'Call addItemToPopMenu(popMenu, "SokanZu2_VBA", "|fffd|U|fffd|z|fffd|}(|fffd|_|fffd|O|fffd||fffd||fffd|t)")
    '---|fffd||693||fffd||fffd||fffd||fffd||3d5||fffd||fffd||fffd|---
    Set popMenu = makePopMenu(menuBar, "TCSI|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|d|fffd||693||fffd||fffd||fffd||fffd||3d6|@|fffd|EEPA|fffd|@")
    popMenu.BeginGroup = True
    Call addItemToPopMenu(popMenu, "IS_EPA_VBA", "EPA|fffd|@")
    
    '---|fffd|u|fffd|I|fffd||fffd||fffd|v|fffd||202||fffd| ---
    Set popMenu = makePopMenu(menuBar, "|fffd|I|fffd||fffd|", "|fffd|I|fffd||fffd|")
    popMenu.BeginGroup = True

    Call addItemToPopMenu(popMenu, "fExit_ISTATYSK", GName_Prog & "|fffd||fffd||fffd|I|fffd||fffd||fffd||fffd||fffd||fffd|", True)

    'display menubar
    menuBar.Visible = True
End Sub
'
Private Function makePopMenu(mnBar As CommandBar, ByVal capName As String, _
    Optional ByVal toolTipStr As String = "") As CommandBarControl
    Set makePopMenu = mnBar.Controls.Add(type:=msoControlPopup)
    makePopMenu.Caption = capName
    makePopMenu.TooltipText = toolTipStr
End Function
'
Private Sub addItemToPopMenu(ByVal popMenu As CommandBarControl, _
    ByVal macroName As String, ByVal capName As String, _
    Optional ByVal bSeper As Boolean = False, _
    Optional ByVal iconMenuName As String = "", _
    Optional ByVal iconBtnName As String = "")
    Dim barBtn As CommandBarButton
    '
    Dim iconBar As CommandBar
    Dim iconMenu As CommandBarPopup
    Dim iconBtn As CommandBarButton
    
    'Buttons
    Set barBtn = popMenu.Controls.Add(type:=msoControlButton)
    barBtn.OnAction = macroName
    barBtn.Caption = capName
    'If faceIdNum <> 0 Then barBtn.FaceId = faceIdNum 'not used
    If bSeper Then barBtn.BeginGroup = True
    
    'Icon Attached
    If iconMenuName <> "" And iconBtnName <> "" Then
        Set iconBar = CommandBars(BARNAME_ISTATYSK_ICON)
        Set iconMenu = iconBar.Controls(iconMenuName) 'example, IconForGraph
        Set iconBtn = iconMenu.Controls(iconBtnName)
        iconBtn.CopyFace
        barBtn.PasteFace
    End If
    
End Sub
'
'|fffd||fffd||fffd|j|fffd||fffd||fffd|[Bar|fffd||30d||d3dc||fffd|B
'
Sub delete_MenuBar(ByVal barName As String)
    If isMenuBarExist(barName) = True Then
        CommandBars(barName).Delete
    End If
End Sub
'
Private Function isMenuBarExist(ByVal barName As String) As Boolean
    Dim b As CommandBar
    
    isMenuBarExist = False
    
    For Each b In CommandBars
        If UCase(b.Name) = UCase(barName) Then
            isMenuBarExist = True
            Exit Function
        End If
    Next b

End Function
'
'display or hide menuBar
'
Sub NU_disp_MenuBar(ByVal bDisp As Boolean)
    If isMenuBarExist(BARNAME_ISTATYSK) = True Then
        CommandBars(BARNAME_ISTATYSK).Visible = bDisp
    End If
End Sub

'=== EOF ===


Attribute VB_Name = "menuBarRB"
'
'Ribbon Interface
'
Option Explicit

Sub IS_BASICINFO_VBA_RB(control As Object)
    Call IS_BASICINFO_VBA
End Sub

Sub IS_SokanZu1_VBA_RB(control As Object)
    Call IS_SokanZu1_VBA
End Sub

Sub IS_SknTimeLag_VBA_RB(control As Object)
    Call IS_SknTimeLag_VBA
End Sub

Sub IS_KJidou_VBA_RB(control As Object)
    Call IS_KJidou_VBA
End Sub

Sub IS_MonthlyModel_VBA_RB(control As Object)
    Call IS_MonthlyModel_VBA
End Sub

Sub IS_EPA_VBA_RB(control As Object)
    Call IS_EPA_VBA
End Sub

Sub IS_Keikou_VBA_RB(control As Object)
    Call IS_Keikou_VBA
End Sub

Sub IS_YSKSR1_VBA_RB(control As Object)
    Call IS_YSKSR1_VBA
End Sub

Sub IS_Gousei_VBA_RB(control As Object)
    Call IS_Gousei_VBA
End Sub

Sub fOnlineManual_iSTAT_ISTATYSK_RB(control As Object)
    Call fOnlineManual_iSTAT_ISTATYSK
End Sub

Sub fExplain_iSTAT_ISTATYSK_RB(control As Object)
    Call fExplain_iSTAT_ISTATYSK
End Sub

Sub fHelp_ISTATYSK_RB(control As Object)
    Call fHelp_ISTATYSK
End Sub

Sub fExit_ISTATYSK_RB(control As Object)
    Call fExit_ISTATYSK
End Sub


'==== EOF ====





Attribute VB_Name = "startEndMdl"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: Start and End
'
' Ver1.0|fffd||c42c| : 1996.2.23 -- 1996.5.7  by LSQ
' Ver2.0|fffd||c42c| : 2003.8.25 -- 2003.9 by LSQ
' Ver2.5|fffd||c42c| : 2007.1.13 by LSQ
'=================================================
Option Explicit
'
Sub Auto_Open()
Attribute Auto_Open.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim nbk As Integer
    Dim iconBar As CommandBar
    Dim rtn As Long
    
    'Excel|fffd||30a||8b||fffd||fffd||6d1||fffd| & |fffd|\|fffd||fffd||fffd|I|fffd|v|fffd|V|fffd||fffd||fffd||fffd||fffd||310||752||fffd|
    Call Environment_SAVE
    
'11.12.2 LSQ cmt : not used
'    'Help Macro Setting to Dialogbox Button; H15.11.3 LSQ
'    Call setHelpToDlgBtn
    
    '|fffd||fffd||fffd|t|fffd||fffd|check
    If user_date_chk() = False Then 'Check ISTAT.INI
        Call fExit_ISTATYSK
    End If
    
    If UpdateUserCheck() = False Then 'Check MYSK01.ini
        Call fExit_ISTATYSK
    End If
    
    '|fffd|V|fffd|[|fffd|g|fffd||315|\|fffd||fffd||fffd||602||fffd||582||fffd|OFF
    Application.ScreenUpdating = False
    
    Call changeToYSKDir
    nbk = Workbooks.Count
    If (nbk = 0) Then
        Workbooks.Add
    End If
    
    Call WorkBookOpen_SetOpenNum(GBKNAME_VBACM) 'firstly open COMMON file
    
    Call WorkBookOpen(GxlaBkGraph1)
    Call WorkBookOpen(GxlaBkGraph2)
    
    If Not YSK_USB_VERSION Then
        Call WorkBookOpen(GxlaBkDllR, False)
        CheckTrial
        rtn = GetRgeInfo
        If rtn = -1 Then
            'MsgBox "This trial application is expired, and it will exit.", vbOKOnly
            MsgBox "|fffd||fffd||fffd|p|fffd||fffd||fffd||502||fffd||fffd|I|fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B|fffd|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd||fffd||fffd|I|fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B", vbOKOnly, "|fffd||fffd||fffd||fffd||fffd||143|\|fffd|t|fffd|g|fffd||242||82||fffd||fffd||fffd|"
            Call fExit_ISTATYSK
        ElseIf rtn = -2 Then
            Call fExit_ISTATYSK
        End If
    End If
    
   ' If getExcelVerNo() >= 12 Then
   '     Call WorkBookOpen_SetOpenNum(GBKNAME_VBA07)
   ' End If
    
    'Menu Bar |fffd||fffd||fffd||fffd|
    Set iconBar = CommandBars(BARNAME_ISTATYSK_ICON)
    '
        iconBar.Visible = False
        Call make_MenuBar
        iconBar.Delete
End Sub
'
Sub Auto_Close()
    Call fExit_ISTATYSK
End Sub
'
'
Sub fExit_ISTATYSK()
Attribute fExit_ISTATYSK.VB_ProcData.VB_Invoke_Func = " \n14"
    On Error Resume Next
    
    Application.CutCopyMode = xlCopy
    
    '|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||d3dc|
    Call delete_MenuBar(BARNAME_ISTATYSK)
    Call delete_MenuBar(BARNAME_ISTATYSK_ICON)
    
    '|fffd|u|fffd|b|fffd|N|fffd||303|N|fffd||fffd||fffd|[|fffd|Y
    Call WorkBookClose(GxlaBkGraph1)
    Call WorkBookClose(GxlaBkGraph2)
    
    If Not YSK_USB_VERSION Then
        Call WorkBookClose(GxlaBkDllR)
    End If
    
    If getExcelVerNo() >= 12 Then
    '    Call WorkBookClose_OnOpenNum(GBKNAME_VBA07)
        Call WorkBookClose(RibbonMenu)
    End If

    Call WorkBookClose_OnOpenNum(GBKNAME_VBACM) 'at last close COMMON file
    
    Application.ScreenUpdating = True '|fffd||fffd||295|\|fffd||fffd|ON
    Application.DisplayAlerts = True '|fffd||6d1||fffd||fffd||4e989||fffd|
    
    'Excel|fffd||30a||8b||fffd||fffd||fffd|
    Call Environment_RECV
    
    On Error GoTo 0

    '|fffd|{|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||303|N|fffd||fffd||fffd|[|fffd|Y
    ThisWorkbook.Close savechanges:=False

End Sub
'
Private Sub Environment_SAVE()
    Environment_Sub (True)
End Sub
'
Private Sub Environment_RECV()
    Environment_Sub (False)
End Sub
'
'save & recovery
'
Private Sub Environment_Sub(ByVal bSave As Boolean)
    Dim i As Integer, barNum As Integer, tmpstr As String, tmpCel As Range
    Dim savBgn As Range
    Set savBgn = ThisWorkbook.Worksheets(G_StName_Info).Range("I3")
    '
    Application.ScreenUpdating = False
    
    If bSave Then   'save and setting
'        savBgn(1, 1) = Application.DisplayFormulaBar
'        savBgn(2, 1) = Application.DisplayStatusBar
        savBgn(3, 1) = Application.ReferenceStyle
        savBgn(4, 1) = Application.DefaultFilePath
        
        savBgn(5, 1) = Application.StandardFont
        savBgn(6, 1) = Application.StandardFontSize
        
'        Application.DisplayFormulaBar = False
'        Application.DisplayStatusBar = False
        'Application.ReferenceStyle = xlR1C1
        
        '2015.05.19 cmt:
        'Application.StandardFont = "|fffd|l|fffd|r |fffd||fffd||fffd||fffd|"
        'Application.StandardFontSize = "12"
        'end cmt
        
'        barNum = Toolbars.Count
'        savBgn(10, 1) = barNum
'
'        For i = 1 To barNum
'            savBgn(i + 10, 1) = Toolbars(i).Visible: Toolbars(i).Visible = False
'        Next
    Else    'recovery
'        Set tmpCel = savBgn(1, 1)
'        If isCellNotEmpty(tmpCel) Then
'            Application.DisplayFormulaBar = tmpCel
'        End If
'
'        Set tmpCel = savBgn(2, 1)
'        If isCellNotEmpty(tmpCel) Then
'            Application.DisplayStatusBar = tmpCel
'        End If
        
        Set tmpCel = savBgn(3, 1)
        If isCellNotEmpty(tmpCel) Then
            Application.ReferenceStyle = tmpCel
        End If
        
        tmpstr = CStr(savBgn(4, 1))
        If Trim(tmpstr) <> "" Then
            Application.DefaultFilePath = savBgn(4, 1)
        End If
        
        '2015.05.19 cmt:
        'Set tmpCel = savBgn(5, 1)
        'If isCellNotEmpty(tmpCel) Then
        '    Application.StandardFont = tmpCel
        'End If
        '
        'Set tmpCel = savBgn(6, 1)
        'If isCellNotEmpty(tmpCel) Then
        '    Application.StandardFontSize = tmpCel
        'End If
        'end cmt
        
'        barNum = Val(savBgn(10, 1))
'
'        For i = 1 To barNum
'            Toolbars(i).Visible = savBgn(i + 10, 1)
'        Next
    End If
    
End Sub

 Sub CheckTrial()
    Dim nRtn As Long
    nRtn = Application.Run(GxlaBkDllR & "!CheckRegInfo", "112", "M", 30, -1)
    ThisWorkbook.Worksheets(G_StName_Info).Range("A1") = nRtn
End Sub

Function GetRgeInfo() As Long
    GetRgeInfo = CLng(ThisWorkbook.Worksheets(G_StName_Info).Range("A1"))
End Function

'===== end of file =====
Attribute VB_Name = "win32API"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: Windows API|fffd||590||fffd||fffd||30c||102||44f|o|fffd||fffd|
'
' |fffd||c42c| : 1996.2.23 LSQ
'=================================================
Option Private Module
Option Explicit

'
'|fffd||11713|x|fffd||30e||64fe|
'
#If Win64 Then
Declare PtrSafe Function GetSystemMetrics Lib "USER32" (ByVal flag As Integer) As Integer
#Else
Declare Function GetSystemMetrics Lib "USER32" (ByVal flag As Integer) As Integer
#End If

Const SM_CXSCREEN As Integer = 0
Const SM_CYSCREEN As Integer = 1

Function getResolutionFlag()
    Dim xdot, ydot
    
    xdot = GetSystemMetrics(SM_CXSCREEN)
    ydot = GetSystemMetrics(SM_CYSCREEN)
    If xdot < 800 Then getResolutionFlag = 1: Exit Function '640|fffd|~480
    If xdot < 1024 Then getResolutionFlag = 2: Exit Function '800|fffd|~600
    If xdot < 1280 Then getResolutionFlag = 3: Exit Function '1024|fffd|~768
    
    getResolutionFlag = 4: Exit Function '1280|fffd|~1024
End Function

'--- end of file ---
Attribute VB_Name = "|fffd|U|fffd|z|fffd|}1Mdl"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: |fffd|U|fffd|z|fffd|}1
'
'Sep 2003, PYJ
'=================================================
Option Explicit

#If Win64 Then
Declare PtrSafe Function TenGrp1_ExtCall Lib "MIST_D_Dbg_64.dll" (ByVal nId As Long, aTenGraph As TYTenGraph1, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer '2007.1.13 PYJ  old:
#Else
Declare Function TenGrp1_ExtCall Lib "MIST_D_Dbg.dll" (ByVal nId As Long, aTenGraph As TYTenGraph1, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer '2007.1.13 PYJ  old:
#End If

Sub IS_SokanZu1_VBA()
Attribute IS_SokanZu1_VBA.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim bRtn As Boolean
    Dim rtn
    Dim aDlgSht As DialogSheet
    Dim aTenGraph As TYTenGraph1
    Dim grp(1 To 1) As VBAGRAPH '2007.1.13 PYJ
    Dim nExcelVer As Integer
    Dim nId As Long
    
    Set aDlgSht = ThisWorkbook.DialogSheets("|fffd|U|fffd|z|fffd|}1Dlg")
    
    Do
        bRtn = aDlgSht.Show
        If Not bRtn Then Exit Do    'Cancel
        
        bRtn = GetSknzu1DlgInp(aDlgSht, aTenGraph)
    Loop Until bRtn
    
    If bRtn Then
        aTenGraph.startShtName = ActiveSheet.Name
'H15.11.3 LSQ cmt
'        aTenGraph.tateDataRge = FormulaA1_R1C1(aTenGraph.tateDataRge)
'        aTenGraph.yokoDataRge = FormulaA1_R1C1(aTenGraph.yokoDataRge)
'        aTenGraph.nameRge = FormulaA1_R1C1(aTenGraph.nameRge)
'        aTenGraph.outRge = FormulaA1_R1C1(aTenGraph.outRge)
        
        Call changeToYSKDir
        '2005.1.13 PYJ
        Call InitGrpAry(grp)
        nExcelVer = 12 'getExcelVerNo()
        nId = IIf(isTrialVer, 0, 1)
        rtn = TenGrp1_ExtCall(nId, aTenGraph, nExcelVer, grp)
        If rtn = 0 And nExcelVer >= 12 And grp(1).type <> 0 Then
            Call ConvToBSTR(grp(1))
            Application.Run GxlaBkGraph1 & "!TenGrp1", grp(1).sheetName, grp(1).grpOut, grp(1).grpData, grp(1).grpPara, _
                (aTenGraph.flgSkn = 1), (aTenGraph.flgName = 1), aTenGraph.mjNum, aTenGraph.ftSize
        End If
        If rtn = -100 Then
            MsgBox "|fffd|\|fffd|t|fffd|g|fffd|E|fffd|F|fffd|A|fffd||fffd||fffd|s|fffd||fffd||fffd|R|fffd|s|fffd|[|fffd||202||302||141|A|fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical Or vbOKOnly
            Exit Sub
        End If
        'old:
        'rtn = TenGrp1_ExtCall(aTenGraph)
        Call Error_Display(rtn)
    End If
End Sub

'H15.11.3 LSQ mdf : ReferenceStyle:=xlR1C1 added
Private Function GetSknzu1DlgInp(ByVal aDlgSht As DialogSheet, aTenGraph As TYTenGraph1) As Boolean
    Dim strTmp As String
    Dim rgeTmp As Range, rgeTmp1 As Range
    Dim bRtn As Boolean
    
    GetSknzu1DlgInp = False
    
    '|fffd|^|fffd|e|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||348||34e|w|fffd||fffd|
    strTmp = aDlgSht.EditBoxes("editY").Text
    If GetInputRange(strTmp, rgeTmp) = False Then
        MsgBox "|fffd|^|fffd|e|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||348||342||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B"
        Exit Function
    End If
    aTenGraph.tateDataRge = "[" & rgeTmp.Worksheet.Parent.Name & "]" & rgeTmp.Worksheet.Name & "!" & rgeTmp.Address(ReferenceStyle:=xlR1C1)
    
    '|fffd||fffd||fffd|R|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||348||34e|w|fffd||fffd|
    strTmp = aDlgSht.EditBoxes("editX").Text
    If GetInputRange(strTmp, rgeTmp) = False Then
        MsgBox "|fffd||fffd||fffd|R|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||348||342||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B"
        Exit Function
    End If
    aTenGraph.yokoDataRge = "[" & rgeTmp.Worksheet.Parent.Name & "]" & rgeTmp.Worksheet.Name & "!" & rgeTmp.Address(ReferenceStyle:=xlR1C1)
    
    '|fffd||91||316||fffd||fffd||315|\|fffd||fffd|
    If aDlgSht.CheckBoxes("chk1") = xlOn Then
        aTenGraph.flgName = 1      'Yes
        bRtn = GetNameInfo(aDlgSht, aTenGraph)
        If Not bRtn Then Exit Function
    Else
        aTenGraph.flgName = 2   'No
    End If
    '|fffd|t|fffd|H|fffd||fffd||fffd|g
    aTenGraph.ftSize = val(aDlgSht.EditBoxes("editFontSize").Text)
    
    '|fffd|P|fffd||fffd||fffd||58c|W|fffd||fffd|
    If aDlgSht.OptionButtons("optSkn1") = xlOn Then aTenGraph.flgSkn = 2 Else aTenGraph.flgSkn = 1
    
    '|fffd|f|fffd|[|fffd|^|fffd|n|fffd||fffd||30c||fffd||fffd||fffd|
    'If aDlgSht.OptionButtons("optDiret1") = xlOn Then aTenGraph.flgDir = 1 Else aTenGraph.flgDir = 2
    aTenGraph.flgDir = 1
    
    '1|fffd|s|fffd||fffd||682||30d||fffd||fffd||68e||fffd||fffd|
    'If aDlgSht.OptionButtons("optData1") = xlOn Then aTenGraph.flgTitle = 1 Else aTenGraph.flgTitle = 2
    aTenGraph.flgTitle = 1
    
    '|fffd||fffd||fffd|l|fffd||20a|O|fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd|
    If aDlgSht.OptionButtons("optSkip") = xlOn Then aTenGraph.flgNotData = 1 Else aTenGraph.flgNotData = 2
    
    '|fffd||fffd||fffd||28f|o|fffd||354||348||fffd|
    Set rgeTmp1 = GetOutputRgeBgn(aDlgSht, rgeTmp)
    If Not (rgeTmp1 Is Nothing) Then
        aTenGraph.outRge = "[" & rgeTmp1.Worksheet.Parent.Name & "]" & rgeTmp1.Worksheet.Name & "!" & rgeTmp1.Address(ReferenceStyle:=xlR1C1)
        GetSknzu1DlgInp = True
    End If
End Function

'|fffd||91||316||fffd||fffd||315|\|fffd||fffd|
Private Function GetNameInfo(ByVal aDlgSht As DialogSheet, aTenGraph As TYTenGraph1) As Boolean
    Dim strTmp As String
    Dim rgeTmp As Range
    Dim tmp1
    Dim nTmp1 As Integer
    
    GetNameInfo = False
    
    '|fffd||fffd||fffd||314||348||fffd|
    strTmp = aDlgSht.EditBoxes("editName").Text
    If GetInputRange(strTmp, rgeTmp) = False Then
        MsgBox "|fffd||91||316||fffd||fffd||316||fffd||fffd||314||348||342||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B"
        Exit Function
    End If
    aTenGraph.namerge = "[" & rgeTmp.Worksheet.Parent.Name & "]" & rgeTmp.Worksheet.Name & "!" & rgeTmp.Address(ReferenceStyle:=xlR1C1)
    
    '|fffd||fffd||fffd||fffd||fffd||fffd|
    tmp1 = aDlgSht.EditBoxes("editMjNum").Text: nTmp1 = val(tmp1)
    If Not IsNumeric(tmp1) Or nTmp1 < 1 Or nTmp1 > 50 Then
        MsgBox "|fffd||91||316||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
        Exit Function
    End If
    aTenGraph.mjNum = nTmp1

    GetNameInfo = True
End Function

'=== EOF ===

Attribute VB_Name = "|fffd|U|fffd|z|fffd|}2Mdl"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: |fffd|U|fffd|z|fffd|}2
'
'Sep 2003, PYJ
'=================================================
Option Explicit

#If Win64 Then
Declare PtrSafe Function TenGrp2_ExtCall Lib "MIST_D_64.dll" (ByVal nId As Long, aTenGraph2 As TYTenGraph2, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer '2007.1.13 PYJ  old:
#Else
Declare Function TenGrp2_ExtCall Lib "MIST_D.dll" (ByVal nId As Long, aTenGraph2 As TYTenGraph2, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer '2007.1.13 PYJ  old:
#End If

Sub SokanZu2_VBA()
Attribute SokanZu2_VBA.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim bRtn As Boolean
    Dim rtn
    Dim aDlgSht As DialogSheet
    Dim aTenGraph As TYTenGraph2
    Dim grp(1 To 1) As VBAGRAPH '2007.1.13 PYJ
    Dim nExcelVer As Integer
    Dim nId As Long
    
    Set aDlgSht = ThisWorkbook.DialogSheets("|fffd|U|fffd|z|fffd|}2Dlg")
    aDlgSht.GroupBoxes("grpMtd").Visible = False
    
    Do
        bRtn = aDlgSht.Show
        If Not bRtn Then Exit Do    'Cancel
        
        bRtn = GetSknzu2DlgInp(aDlgSht, aTenGraph)
    Loop Until bRtn
    
    If bRtn Then
        aTenGraph.startShtName = ActiveSheet.Name
'H15.11.3 LSQ cmt : add ReferenceStyle:=xlR1C1
'
'        aTenGraph.dataRge = FormulaA1_R1C1(aTenGraph.dataRge)
'        aTenGraph.tateDataRge = FormulaA1_R1C1(aTenGraph.tateDataRge)
'        aTenGraph.yokoDataRge = FormulaA1_R1C1(aTenGraph.yokoDataRge)
'        aTenGraph.outRge = FormulaA1_R1C1(aTenGraph.outRge)
        
        Call changeToYSKDir
        '2005.1.13 PYJ
        Call InitGrpAry(grp)
        nExcelVer = getExcelVerNo()
        nId = IIf(isTrialVer, 0, 1)
        
        rtn = TenGrp2_ExtCall(nId, aTenGraph, nExcelVer, grp)
        If rtn = -100 Then
            MsgBox "|fffd|\|fffd|t|fffd|g|fffd|E|fffd|F|fffd|A|fffd||fffd||fffd|s|fffd||fffd||fffd|R|fffd|s|fffd|[|fffd||202||302||141|A|fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical Or vbOKOnly
            Exit Sub
        End If
        If rtn = 0 And nExcelVer >= 12 And grp(1).type > 0 Then
            Call ConvToBSTR(grp(1))
            Application.Run GxlaBkGraph1 & "!TenGrp2", grp(1).sheetName, grp(1).grpOut, grp(1).grpData, grp(1).type, _
                aTenGraph.flgKan, aTenGraph.wakuRow, aTenGraph.wakuCol
        End If
        'old:
        'rtn = TenGrp2_ExtCall(aTenGraph)
        Call Error_Display(rtn)
    End If
End Sub

Private Function GetSknzu2DlgInp(ByVal aDlgSht As DialogSheet, aTenGraph As TYTenGraph2) As Boolean
    Dim strTmp As String
    Dim rgeTmp As Range, rgeTmp1 As Range
    Dim bRtn As Boolean
    
    GetSknzu2DlgInp = False
    
    '|fffd|f|fffd|[|fffd|^|fffd||348||34e|w|fffd||fffd|
    Set rgeTmp = GetDataInRange(aDlgSht, aTenGraph)
    If rgeTmp Is Nothing Then Exit Function
    
    '|fffd||fffd||fffd||582||30f|o|fffd||fffd|
    If aDlgSht.CheckBoxes("chk1") = xlOn Then aTenGraph.flgSkn = 1 Else aTenGraph.flgSkn = 2    '|fffd|P|fffd||fffd||fffd||58c|W|fffd||fffd|
    If aDlgSht.CheckBoxes("chk2") = xlOn Then aTenGraph.flgMark = 1 Else aTenGraph.flgMark = 2  '|fffd||fffd||fffd||fffd|}|fffd|[|fffd|N
    If aDlgSht.CheckBoxes("chk3") = xlOn Then aTenGraph.flgPval = 1 Else aTenGraph.flgPval = 2  '|fffd|o|fffd|l
    If aDlgSht.CheckBoxes("chk4") = xlOn Then aTenGraph.flgKK = 1 Else aTenGraph.flgKK = 2      '|fffd||fffd||fffd||fffd||fffd||fffd|A
    
    '|fffd|\|fffd||fffd||fffd|`|fffd||fffd|
    bRtn = GetRespForm(aDlgSht, aTenGraph)
    If Not bRtn Then Exit Function
    
    '|fffd|f|fffd|[|fffd|^|fffd|n|fffd||fffd||30c||fffd||fffd||fffd|
    'If aDlgSht.OptionButtons("optDiret1") = xlOn Then aTenGraph.flgDir = 1 Else aTenGraph.flgDir = 2
    aTenGraph.flgDir = 1
    
    '1|fffd|s|fffd||fffd||682||30d||fffd||fffd||68e||fffd||fffd|
    'If aDlgSht.OptionButtons("optData1") = xlOn Then aTenGraph.flgTitle = 1 Else aTenGraph.flgTitle = 2
    aTenGraph.flgTitle = 1
    
    '|fffd||fffd||fffd|l|fffd||20a|O|fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd|
    If aDlgSht.OptionButtons("optSkip") = xlOn Then aTenGraph.flgNotData = 1 Else aTenGraph.flgNotData = 2
    
    '|fffd||fffd||fffd||28f|o|fffd||354||348||fffd|
    Set rgeTmp1 = GetOutputRgeBgn(aDlgSht, rgeTmp)
    If Not (rgeTmp1 Is Nothing) Then
        aTenGraph.outRge = "[" & rgeTmp1.Worksheet.Parent.Name & "]" & rgeTmp1.Worksheet.Name & "!" & rgeTmp1.Address(ReferenceStyle:=xlR1C1)
        GetSknzu2DlgInp = True
    End If
End Function

'|fffd|f|fffd|[|fffd|^|fffd||348||34e|w|fffd||fffd|
Private Function GetDataInRange(ByVal aDlgSht As DialogSheet, aTenGraph As TYTenGraph2) As Range
    Dim strTmp As String
    Dim rgeTmp As Range, rgeTmp1 As Range

    Set GetDataInRange = Nothing
    If aDlgSht.OptionButtons("optMtd1") = xlOn Then     'Matrix
        aTenGraph.flgDataType = 1
        strTmp = aDlgSht.EditBoxes("editRge").Text
        If GetInputRange(strTmp, rgeTmp) = False Then
            MsgBox "|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||354||348||342||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B"
            Exit Function
        End If
        aTenGraph.dataRge = "[" & rgeTmp.Worksheet.Parent.Name & "]" & rgeTmp.Worksheet.Name & "!" & rgeTmp.Address(ReferenceStyle:=xlR1C1)
        Set GetDataInRange = rgeTmp
    Else                                                'Group
        '|fffd|Q|fffd||283|^|fffd|e|fffd||348||34e|w|fffd||fffd|
        strTmp = aDlgSht.EditBoxes("editY").Text
        If GetInputRange(strTmp, rgeTmp) = False Then
            MsgBox "|fffd|Q|fffd||283|^|fffd|e|fffd||348||342||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B"
            Exit Function
        End If
        aTenGraph.tateDataRge = "[" & rgeTmp.Worksheet.Parent.Name & "]" & rgeTmp.Worksheet.Name & "!" & rgeTmp.Address(ReferenceStyle:=xlR1C1)
    
        '|fffd|Q|fffd||283||fffd||fffd|R|fffd||348||34e|w|fffd||fffd|
        strTmp = aDlgSht.EditBoxes("editX").Text
        If GetInputRange(strTmp, rgeTmp) = False Then
            MsgBox "|fffd|Q|fffd||283||fffd||fffd|R|fffd||348||342||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B"
            Exit Function
        End If
        aTenGraph.yokoDataRge = "[" & rgeTmp.Worksheet.Parent.Name & "]" & rgeTmp.Worksheet.Name & "!" & rgeTmp.Address(ReferenceStyle:=xlR1C1)
        Set GetDataInRange = rgeTmp
    End If
End Function

'|fffd|\|fffd||fffd||fffd|`|fffd||fffd|
Private Function GetRespForm(ByVal aDlgSht As DialogSheet, aTenGraph As TYTenGraph2) As Boolean
    Dim strTmp As String
    Dim rgeTmp As Range
    Dim tmp1
    Dim nTmp1 As Integer
    
    GetRespForm = False
    
    '|fffd|g|fffd|c
    tmp1 = aDlgSht.EditBoxes("editRow").Text: nTmp1 = val(tmp1)
    If Not IsNumeric(tmp1) Or nTmp1 < 1 Then
        'MsgBox "|fffd|\|fffd||fffd||fffd|`|fffd||fffd||fffd|g|fffd|c|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
        'Exit Function
        nTmp1 = 8
    End If
    aTenGraph.wakuRow = nTmp1

    '|fffd|g|fffd||fffd|
    tmp1 = aDlgSht.EditBoxes("editCol").Text: nTmp1 = val(tmp1)
    If Not IsNumeric(tmp1) Or nTmp1 < 1 Or nTmp1 > 255 Then
        'MsgBox "|fffd|\|fffd||fffd||fffd|`|fffd||fffd||fffd|g|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
        'Exit Function
        nTmp1 = 4
    End If
    aTenGraph.wakuCol = nTmp1

    '|fffd|g|fffd||fffd|
    If aDlgSht.OptionButtons("optKan1") = xlOn Then aTenGraph.flgKan = 2 Else aTenGraph.flgKan = 1
    
    GetRespForm = True
End Function

'=== EOF ===



INQUEST-PP=macro
