Attribute VB_Name = "DVS_01_30112007_001"
'Option Explicit
'Initzialisierung Konstanten
Const str_Meldung_01 As String = "Kein g|fffd|ltiger Wert eingegeben, "
Const str_Meldung_02 As String = "Vorgang wird jetzt abgebrochen !"
Const str_TabTitel As String = "Welche Tabellen Art soll eingelesen werden ?" & vbCrLf & _
"F|fffd|r die AlteExcel Tabelle Bitte -> 0 <- eingeben (Zeile 4 Spalte 2)" & vbCrLf & _
"F|fffd|r den Report aus Profile Bitte -> 1 <- eingeben (Zeile 1 Spalte 1)" & vbCrLf & _
"Vielen Dank !"
Const |fffd|berschrift_Plan = "lfdNr" + vbTab + "Ver|fffd|nderung Dokument" + vbTab + "Ver|fffd|nderung Plan/Meta" + vbTab + "Validierung BH/ALV" + vbTab + "Nachbesserung erforderlich" + vbTab + "Dok-Nummer" + vbTab + "Dok-Art" + vbTab + "Dok-Version" + vbTab + "|fffd|nderungsnummer" + vbTab + _
  "Barcode" + vbTab + "Extension" + vbTab + "Planz" + vbTab + "Nummer (Strecke)" + vbTab + "Plan-Adr. Alt" + vbTab + "Fachplan 1" + vbTab + "Fachplan 2" + vbTab + "Benennung" + vbTab + "Bezeichnung" + vbTab + "Blatt" + vbTab + "von Blatt" + vbTab + "Entstehungsdatum" + _
  vbTab + "|fffd|nderungsdatum" + vbTab + "|fffd|rtlichkeit gepr|fffd|ft Datum" + vbTab + "Ausgabe Nr" + vbTab + "Bez" + vbTab + "Firmen-Plan-Nr." + vbTab + "Mastervorgang" + vbTab + "Vert.Schl." + vbTab + "Tats. Format" + vbTab + "CAD-Software" + vbTab + "Gewerk" + vbTab + _
 "Werk" + vbTab + "Standort" + vbTab + "Form Orig." + vbTab + "Ma|fffd|stab" + vbTab + "Unterlg.Code" + vbTab + "Zustand" + vbTab + "Aufbew.Ort" + vbTab + "Erstellerfirma"
Const |fffd|berschrift_STR = "lfdNr" + vbTab + "Ver|fffd|nderung Dokument" + vbTab + "Ver|fffd|nderung Plan/Meta" + vbTab + "Validierung BH/ALV" + vbTab + "Nachbesserung erforderlich" + vbTab + "Dok-Nummer" + vbTab + "Dok-Art" + vbTab + "Dok-Version" + vbTab + "|fffd|nderungsnummer" + vbTab + _
  "Barcode" + vbTab + "verkn. DOK-ID" + vbTab + "verkn. Dok-Art" + vbTab + "verkn. Dok-Version" + vbTab + "verkn. Barcode" + vbTab + "TP-ID"
Const str_Version As String = "DVS-DB Netz AG Version 1.0.1 Stand 30.11.2007 ->Entwicklungsversion<-"
Const str_Dummy As String = ""
Sub NeuePl|fffd|ne_DVS_01()
'Initzialisierung Variablen
Dim date_Startzeit, date_Endzeit, date_Bearbeitungszeit As Date
Dim int_ZeZ|fffd|hler, int_SpZ|fffd|hler, int_PosZ|fffd|hler, int_M1_A, int_M1_B, int_M1_C, int_M1_D _
, int_M2_A, int_M2_B, int_M2_C, int_M2_D, int_SpaltenPositon, int_dPlan, int_zeStrecke, int_dStrecke As Integer
Dim str_AuswahlTabelle, str_Nametxt_PLA, str_Nametxt_STR, str_Path_Dateiname, str_|fffd|nderungsnummer, _
str_Datum, str_Uhrzeit, str_Path, str_Merker_1, str_Merker_2, str_AktivesSheet, str_Auswahl, _
str_PlanZeileDatei, str_StreckeZeileDatei As String
Dim lngCount, lngSpalten_Position, lngZeilen, lngSpalten, lng_z, lng_M1_H, lng_LfdNr, lng_i, lng_M1_H1, _
lng_NeuerIndex, lng_M2_H2, lng_NeuerIndex2, lng_zePlan, lng_Bearbeitungszeit As Long
Dim obj_filedialog, obj_fso, obj_File_A, obj_File_B As Object
Dim ArrayMeta(), ArrayMetaStrecke()
Dim com_comment As Comment
On Error GoTo ErrorHandler_Abrechen 'Fehlernummer ausgeben und Bearbeitung abbrechen


'Auswahl der Excel Tabelle
str_AuswahlTabelle = InputBox(str_TabTitel, str_Version)
'Eingabe pr|fffd|fen nur 0 oder 1 zulassen
If str_AuswahlTabelle = "0" Or str_AuswahlTabelle = "1" Then
    Select Case str_AuswahlTabelle
    Case "0"
    int_ZeZ|fffd|hler = 4             'Startwerte f|fffd|r Schleifen alte Excel Zeile 4 Spalte 2
    int_SpZ|fffd|hler = 2
    int_PosZ|fffd|hler = 3
    Case "1"
    int_ZeZ|fffd|hler = 1             'Startwerte f|fffd|r Schleifen ExportProfile Zeile 1 Spalte 1
    int_SpZ|fffd|hler = 1
    int_PosZ|fffd|hler = 1
       
    End Select
Else
    
    MsgBox str_Meldung_01 & str_Meldung_02, vbOKOnly, str_Version
    Exit Sub
End If
date_Startzeit = Time
' Datum holen
  str_Datum = Format(Date, "DDMMYYYY")
  ' Uhrzeit holen
  str_Uhrzeit = Format(Time, "hhmmss")
'Prototyp Dateiname
  str_Nametxt_PLA = "_PLA_" + str_Datum + "_" + str_Uhrzeit + ".txt"
  str_Nametxt_STR = "_STR_" + str_Datum + "_" + str_Uhrzeit + ".txt"
'Auswahldialog Excel Datei

Set obj_filedialog = Application.FileDialog(msoFileDialogFilePicker)
    With Application.FileDialog(msoFileDialogOpen)
        .AllowMultiSelect = False
        .InitialFileName = "*.xls"
        .Filters.Add "Files", "*.xls", 1
        .Show
        str_Path_Dateiname = obj_filedialog.SelectedItems(1)
        str_Path = GetPathName(str_Path_Dateiname) & "\"
    End With
Set obj_filedialog = Nothing

'Excel Sheet |fffd|ffnen und aktivieren
Workbooks.Open str_Path_Dateiname
str_AktivesSheet = Application.ActiveWorkbook.Name
Workbooks(str_AktivesSheet).Worksheets(1).Activate
ActiveSheet.Unprotect Password:=""
Cells.EntireColumn.Hidden = False


'|fffd|nderungsnummer abfragen und pr|fffd|fen auf Falscheingabe
str_|fffd|nderungsnummer = InputBox("|fffd|nderungnummer in Form -> XXXX_XXXXXXX <- eingeben", "str_|fffd|nderungsnummer ")
If Len(str_|fffd|nderungsnummer) <> 12 Then
MsgBox str_Meldung_01 & "'L|fffd|nge <> 12 Zeichen' " & str_Meldung_02, vbOKOnly, str_Version
Workbooks(str_AktivesSheet).Close
Exit Sub
End If
If Mid(str_|fffd|nderungsnummer, 5, 1) <> "_" Then
MsgBox str_Meldung_01 & "'kein Unterstrich' " & str_Meldung_02, vbOKOnly, str_Version
Workbooks(str_AktivesSheet).Close
Exit Sub
End If
If UCase(str_|fffd|nderungsnummer) <> str_|fffd|nderungsnummer Then
MsgBox str_Meldung_01 & " 'Kleinbuchstaben' " & str_Meldung_02, vbOKOnly, str_Version
Workbooks(str_AktivesSheet).Close
Exit Sub
End If
'Daten Array anlegen

'Anzahl der lngZeilen und Spalten ermitteln die eingelesen werden sollen
lngZeilen = Range("B65536").End(xlUp).Row
lngSpalten = ActiveSheet.Cells(1, Columns.Count).End(xlToLeft).Column
'Kommentare und Positon aus 1 Zeile auslesen und in Array speichern
ReDim ArrayMeta(lngZeilen, 41)
ReDim ArrayMetaStrecke(lngZeilen, 17)
For lng_z = int_ZeZ|fffd|hler To lngZeilen
ArrayMeta(lng_z - int_PosZ|fffd|hler, 0) = lng_z - int_PosZ|fffd|hler                     'Laufende Nummer Index 00 Spalte $A
ArrayMetaStrecke(lng_z - int_PosZ|fffd|hler, 0) = lng_z - int_PosZ|fffd|hler
ArrayMeta(lng_z - int_PosZ|fffd|hler, 1) = "N"                                       'Ver|fffd|nderung Dokument Index 01 Spalte $B
ArrayMetaStrecke(lng_z - int_PosZ|fffd|hler, 1) = ""
ArrayMeta(lng_z - int_PosZ|fffd|hler, 2) = ""                                        'Ver|fffd|nderung Pl|fffd|ne/Meta Index 02 Spalte $C
ArrayMetaStrecke(lng_z - int_PosZ|fffd|hler, 2) = ""
ArrayMeta(lng_z - int_PosZ|fffd|hler, 3) = ""                                        'Ver|fffd|nderung durch BHV/ALV Index 03 Spalte $D
ArrayMetaStrecke(lng_z - int_PosZ|fffd|hler, 3) = ""
ArrayMeta(lng_z - int_PosZ|fffd|hler, 4) = ""                                        'Nachbesserung erforderlich Index 04 Spalte $E
ArrayMetaStrecke(lng_z - int_PosZ|fffd|hler, 4) = ""
ArrayMeta(lng_z - int_PosZ|fffd|hler, 5) = ""                                        'Dok-Nummer Index 05 Spalte $F
ArrayMetaStrecke(lng_z - int_PosZ|fffd|hler, 5) = ""
ArrayMeta(lng_z - int_PosZ|fffd|hler, 6) = "PLA"                                     'Dok-Art Index 06 Spalte $G
ArrayMetaStrecke(lng_z - int_PosZ|fffd|hler, 6) = "PLA"
ArrayMeta(lng_z - int_PosZ|fffd|hler, 7) = ""                                        'Dok-Version Index 07 Spalte $H
ArrayMetaStrecke(lng_z - int_PosZ|fffd|hler, 7) = ""
ArrayMeta(lng_z - int_PosZ|fffd|hler, 8) = str_|fffd|nderungsnummer                       '|fffd|nderungsnummer Index 08 Spalte $I
ArrayMetaStrecke(lng_z - int_PosZ|fffd|hler, 8) = str_|fffd|nderungsnummer
ArrayMeta(lng_z - int_PosZ|fffd|hler, 26) = ""                                       'Mastervorgang Index 26 Spalte $AA
ArrayMeta(lng_z - int_PosZ|fffd|hler, 32) = ""                                       'Standort (momentan nicht genutzt) Index 32 Spalte $AG
For lng_i = int_SpZ|fffd|hler To lngSpalten
On Error GoTo weiter

Set com_comment = Cells(1, lng_i).Comment
int_SpaltenPositon = CInt(Mid(Cells(1, lng_i).Address(ReferenceStyle:=xlR1C1), InStr(Cells(1, lng_i).Address(ReferenceStyle:=xlR1C1), "C") + 1, Len(Cells(1, lng_i).Address(ReferenceStyle:=xlR1C1)) - InStr(Cells(1, lng_i).Address(ReferenceStyle:=xlR1C1), "C")))
str_Auswahl = Sonderzeichen_entfernen(com_comment.Text)
weiter:
Select Case str_Auswahl
Case "Plan@dv_vstl35@S"
ArrayMeta(lng_z - int_PosZ|fffd|hler, 9) = Cells(lng_z, int_SpaltenPositon).Value 'Barcode Index09 Spalte $J
ArrayMetaStrecke(lng_z - int_PosZ|fffd|hler, 9) = Cells(lng_z, int_SpaltenPositon).Value 'Barcode Index09 Spalte $J
ArrayMeta(lng_z - int_PosZ|fffd|hler, 10) = Extention(str_Path, ArrayMeta(lng_z - int_PosZ|fffd|hler, 9))                   'Extention Index 10 Spalte $K
Case "Plan@dv_vstl1@S"
ArrayMeta(lng_z - int_PosZ|fffd|hler, 11) = Cells(lng_z, int_SpaltenPositon).Value 'Planzeichen Index11 Spalte $L
Case "Plan@dv_vstl17@S"
ArrayMeta(lng_z - int_PosZ|fffd|hler, 12) = Cells(lng_z, int_SpaltenPositon).Value 'Nummer/F|fffd|hrende Strecke Index12 Spalte $M
Case "Plan@dv_vstl5@S"
ArrayMeta(lng_z - int_PosZ|fffd|hler, 13) = Cells(lng_z, int_SpaltenPositon).Value '*Planadr.alt Index13 Spalte $N
Case "Plan@dv_vstl3@S"
ArrayMeta(lng_z - int_PosZ|fffd|hler, 14) = Cells(lng_z, int_SpaltenPositon).Value 'Fach-Plan1 Index14 Spalte $O
Case "Plan@dv_vstl4@S"
ArrayMeta(lng_z - int_PosZ|fffd|hler, 15) = Cells(lng_z, int_SpaltenPositon).Value 'Fach-Plan2 Index15 Spalte $P
Case "Plan@dv_vsth1@S"
ArrayMeta(lng_z - int_PosZ|fffd|hler, 16) = Cells(lng_z, int_SpaltenPositon).Value 'Benennung Index16 Spalte $Q
Case "Plan@dv_vsth2@S"
ArrayMeta(lng_z - int_PosZ|fffd|hler, 17) = Cells(lng_z, int_SpaltenPositon).Value 'Bemerkung Index17 Spalte $R
Case "Plan@dv_vstl7@S"
ArrayMeta(lng_z - int_PosZ|fffd|hler, 18) = Cells(lng_z, int_SpaltenPositon).Value 'Blatt Index18 Spalte $S
Case "Plan@dv_vstl8@S"
ArrayMeta(lng_z - int_PosZ|fffd|hler, 19) = Cells(lng_z, int_SpaltenPositon).Value 'von Bl|fffd|ttern Index19 Spalte $T
Case "Plan@dv_vflo1@D"
ArrayMeta(lng_z - int_PosZ|fffd|hler, 20) = F_Datum(Cells(lng_z, int_SpaltenPositon).Value) 'Entstehungsdatum Index20 Spalte $U
Case "Plan@dv_vflo2@D"
ArrayMeta(lng_z - int_PosZ|fffd|hler, 21) = F_Datum(Cells(lng_z, int_SpaltenPositon).Value) '|fffd|nderungsdatum Index21 Spalte $V
Case "Plan@dv_vflo4@D"
ArrayMeta(lng_z - int_PosZ|fffd|hler, 22) = F_Datum(Cells(lng_z, int_SpaltenPositon).Value) '|fffd|rtlichkeit gepr|fffd|ft Datum Index22 Spalte $W
Case "Plan@dv_vstl14@S"
ArrayMeta(lng_z - int_PosZ|fffd|hler, 23) = Cells(lng_z, int_SpaltenPositon).Value 'Ausgabe (VersNr) Index23 Spalte $X
Case "Plan@dv_vstl2@S"
ArrayMeta(lng_z - int_PosZ|fffd|hler, 24) = Cells(lng_z, int_SpaltenPositon).Value 'Nummernbezirk Index24 Spalte $Y
Case "Plan@dv_vstl6@S"
ArrayMeta(lng_z - int_PosZ|fffd|hler, 25) = Cells(lng_z, int_SpaltenPositon).Value 'Firmen-Plan-Nr Index25 Spalte $Z
Case "Plan@dv_vstl16@S"
ArrayMeta(lng_z - int_PosZ|fffd|hler, 27) = Cells(lng_z, int_SpaltenPositon).Value 'Verteilerschl|fffd|ssel Index27 Spalte $AB
Case "Plan@dv_vstl21@S"
ArrayMeta(lng_z - int_PosZ|fffd|hler, 28) = Cells(lng_z, int_SpaltenPositon).Value 'Tats|fffd|chliches Format Index28 Spalte $AC
Case "Plan@dv_vstl9@S"
ArrayMeta(lng_z - int_PosZ|fffd|hler, 29) = Cells(lng_z, int_SpaltenPositon).Value 'CAD-Software Index29 Spalte $AD
Case "Plan@dv_vstl26@S"
ArrayMeta(lng_z - int_PosZ|fffd|hler, 30) = Cells(lng_z, int_SpaltenPositon).Value 'Planverantwortung Index30 Spalte $AE
Case "Plan@dv_vstl24@S"
ArrayMeta(lng_z - int_PosZ|fffd|hler, 31) = Werk(Cells(lng_z, int_SpaltenPositon).Value) 'Betriebsstandort Index31 Spalte $AF
Case "Plan@dv_vstl19@S"
ArrayMeta(lng_z - int_PosZ|fffd|hler, 33) = Cells(lng_z, int_SpaltenPositon).Value 'Form des Originals Index33 Spalte $AH
Case "Plan@dv_vstl12@S"
ArrayMeta(lng_z - int_PosZ|fffd|hler, 34) = Cells(lng_z, int_SpaltenPositon).Value 'Ma|fffd|stab Index34 Spalte $AI
Case "Plan@dv_vstl13@S"
ArrayMeta(lng_z - int_PosZ|fffd|hler, 35) = Cells(lng_z, int_SpaltenPositon).Value 'Unterlagencode Index35 Spalte $AJ
Case "Plan@dv_vstl15@S"
ArrayMeta(lng_z - int_PosZ|fffd|hler, 36) = Cells(lng_z, int_SpaltenPositon).Value 'Zustand Index36 Spalte $AK
Case "Plan@dv_vstl18@S"
ArrayMeta(lng_z - int_PosZ|fffd|hler, 37) = Cells(lng_z, int_SpaltenPositon).Value 'Aufbewahrungsort Index37 Spalte $AL
Case "Plan@dv_vstl27@S"
ArrayMeta(lng_z - int_PosZ|fffd|hler, 38) = Cells(lng_z, int_SpaltenPositon).Value 'Erstellerfirma Index38 Spalte $AM
Case "Plan"
ArrayMeta(lng_z - int_PosZ|fffd|hler, 39) = Cells(lng_z, int_SpaltenPositon).Value 'Plan Identnummer Index39
Case "Strecke"
ArrayMeta(lng_z - int_PosZ|fffd|hler, 40) = Cells(lng_z, int_SpaltenPositon).Value 'Strecke Identnummer Index40
Case "SAP-Objekt"
ArrayMeta(lng_z - int_PosZ|fffd|hler, 41) = Cells(lng_z, int_SpaltenPositon).Value 'SAP-Objekt Identnummer Index41
'Stecken_Daten
Case "Strecke@dv_vstl35@S"
ArrayMetaStrecke(lng_z - int_PosZ|fffd|hler, 10) = Cells(lng_z, int_SpaltenPositon).Value '*Strecke Index10 Spalte $K Strecke
Case "Strecke@dv_vflo1@F"
ArrayMetaStrecke(lng_z - int_PosZ|fffd|hler, 11) = Cells(lng_z, int_SpaltenPositon).Value 'KM-Anfang/Abschnittsanfang Index11 Spalte $L Strecke
Case "Strecke@dv_vflo2@F"
ArrayMetaStrecke(lng_z - int_PosZ|fffd|hler, 12) = Cells(lng_z, int_SpaltenPositon).Value 'MA Index12 Spalte $M Strecke
Case "Strecke@dv_vflo3@F"
ArrayMetaStrecke(lng_z - int_PosZ|fffd|hler, 13) = Cells(lng_z, int_SpaltenPositon).Value 'KM-Ende/Abschnittsende Index13 Spalte $N Strecke
Case "Strecke@dv_vflo4@F"
ArrayMetaStrecke(lng_z - int_PosZ|fffd|hler, 14) = Cells(lng_z, int_SpaltenPositon).Value 'ME Index14 Spalte $O Strecke
Case "Strecke@dv_vstl31@S"
ArrayMetaStrecke(lng_z - int_PosZ|fffd|hler, 15) = Cells(lng_z, int_SpaltenPositon).Value '*Bst.-KurzBez.  RIL100 Index15 Spalte $P Strecke
Case "Strecke@dv_vstl29@S"
ArrayMetaStrecke(lng_z - int_PosZ|fffd|hler, 16) = Cells(lng_z, int_SpaltenPositon).Value '*Ril Kurzname Index16 Spalte $Q Strecke
Case "Strecke@dv_vstl9@S"
ArrayMetaStrecke(lng_z - int_PosZ|fffd|hler, 17) = Cells(lng_z, int_SpaltenPositon).Value '*Name Index17 Spalte $R Strecke

End Select
Next
Next
Set com_comment = Nothing
'Matrix1 sortieren
int_M1_A = 1
int_M1_B = lngZeilen - int_PosZ|fffd|hler
int_M1_C = 41
int_M1_D = 9
QuickSort ArrayMeta, int_M1_A, int_M1_B, int_M1_C, int_M1_D
'Neuer Index erzeugen f|fffd|r Spalte A
lng_M1_H1 = 0
For lng_NeuerIndex = LBound(ArrayMeta) To UBound(ArrayMeta) - int_PosZ|fffd|hler
ArrayMeta(lng_NeuerIndex, 0) = lng_M1_H1         'Laufende Nummer Index 00 Spalte $A
lng_M1_H1 = lng_M1_H1 + 1
Next
'Matrix2 sortieren
int_M2_A = 1
int_M2_B = lngZeilen - int_PosZ|fffd|hler
int_M2_C = 17
int_M2_D = 9
QuickSort ArrayMetaStrecke, int_M2_A, int_M2_B, int_M2_C, int_M2_D
'Neuer Index erzeugen f|fffd|r Spalte A
lng_M2_H2 = 0
For lng_NeuerIndex2 = LBound(ArrayMetaStrecke) To UBound(ArrayMetaStrecke) - int_PosZ|fffd|hler
ArrayMetaStrecke(lng_NeuerIndex2, 0) = lng_M2_H2         'Laufende Nummer Index 00 Spalte $A
lng_M2_H2 = lng_M2_H2 + 1
Next
'Schreiben des Datensatzes in Text File
Set obj_fso = CreateObject("Scripting.FileSystemObject")
Set obj_File_A = obj_fso.CreateTextFile(str_Path & "\" & str_|fffd|nderungsnummer & str_Nametxt_PLA, True)
Set obj_File_B = obj_fso.CreateTextFile(str_Path & "\" & str_|fffd|nderungsnummer & str_Nametxt_STR, True)
obj_File_A.WriteLine |fffd|berschrift_Plan
'Plandaten

lng_LfdNr = 1
For lng_zePlan = 1 To lngZeilen - int_PosZ|fffd|hler
str_PlanZeileDatei = lng_LfdNr
str_Merker_1 = ArrayMeta(lng_zePlan, 9)
str_Merker_2 = ArrayMeta(lng_zePlan + 1, 9)
If str_Merker_1 = str_Merker_2 Then
    For int_dPlan = 1 To 38 Step 1
    str_PlanZeileDatei = str_PlanZeileDatei & vbTab & ArrayMeta(lng_zePlan, int_dPlan)
    Next
obj_File_A.WriteLine str_PlanZeileDatei
lng_zePlan = lng_zePlan + 1
lng_LfdNr = lng_LfdNr + 1
Else
    For int_dPlan = 1 To 38 Step 1
    str_PlanZeileDatei = str_PlanZeileDatei & vbTab & ArrayMeta(lng_zePlan, int_dPlan)
    Next
lng_LfdNr = lng_LfdNr + 1
obj_File_A.WriteLine str_PlanZeileDatei
End If
Next
obj_File_A.WriteLine "Ende"
'Streckendaten
lng_LfdNr = 1
obj_File_B.WriteLine |fffd|berschrift_STR
For int_zeStrecke = 1 To lngZeilen - int_PosZ|fffd|hler
If ArrayMeta(int_zeStrecke, 41) > 0 Then
MsgBox ("nicht schreiben")
Else
str_StreckeZeileDatei = lng_LfdNr
    For int_dStrecke = 1 To 17
    str_StreckeZeileDatei = str_StreckeZeileDatei & vbTab & ArrayMetaStrecke(int_zeStrecke, int_dStrecke)
    Next
obj_File_B.WriteLine str_StreckeZeileDatei
lng_LfdNr = lng_LfdNr + 1
End If
Next
obj_File_B.WriteLine "Ende"
Set obj_fso = Nothing
    obj_File_A.Close
    obj_File_B.Close
date_Endzeit = Time
date_Bearbeitungszeit = date_Endzeit - date_Startzeit
MsgBox "Die Textdateien PLA und STR wurden geschrieben " & vbCrLf & "Das ganze wurde in der Zeit: " & date_Bearbeitungszeit & " erledigt", vbOKOnly, str_Version
Workbooks(str_AktivesSheet).Close SaveChanges:=False
Exit Sub

ErrorHandler_Abrechen: MsgBox ("Fehler Nummer = " & Err.Number)
'Set obj_fso01 = CreateObject("Scripting.FileSystemObject")
'Set obj_File_AA = obj_fso.CreateTextFile(str_Path & "\" & "FehlerNummer.txt", True)
'obj_File_AA.WriteLine "Fehler =" & Err.Number
'Set obj_fso01 = Nothing
'    obj_File_AA.Close
End Sub
Function Sonderzeichen_entfernen(Text)
Dim i As Integer
    i = InStr(Text, vbLf)
        If i > 0 Then
    Sonderzeichen_entfernen = Left(Text, i - 1)
    Else: Sonderzeichen_entfernen = Text
End If
End Function
Function F_Datum(Datum) 'Datum in Form JJJJMMTT umsetzen
F_Datum = Right(Datum, 4) & Mid(Datum, 4, 2) & Left(Datum, 2)
End Function
Function Werk(BS) 'BS in SAP umsetzen
Select Case BS
Case "Regelzeichnung*"
Werk = "16GD"
'16UM
Case "Augsburg"
Werk = "16MO"
Case "Berlin"
Werk = "163Q"
Case "Bremen"
Werk = "16HE"
Case "Dresden"
Werk = "1600"
Case "Duisburg"
Werk = "16ER"
Case "D|fffd|sseldorf"
Werk = "16KM"
Case "Erfurt"
Werk = "160M"
Case "Frankfurt(Main)"
Werk = "16FF"
Case "Freiburg"
Werk = "16IO"
Case "Hagen"
Werk = "16ES"
Case "Halle"
Werk = "16E8"
Case "Hamburg"
Werk = "16AJ"
Case "Hamm"
Werk = "16ET"
Case "Karlsruhe"
Werk = "16IK"
Case "Kassel"
Werk = "16FB"
Case "Kiel"
Werk = "16AN"
Case "Koblenz"
Werk = "16KN"
Case "K|fffd|ln"
Werk = "16KJ"
Case "Leipzig"
Werk = "16D5"
Case "Magdeburg"
Werk = "16IW"
Case "Mainz"
Werk = "16FM"
Case "M|fffd|nchen"
Werk = "16MU"
Case "Pasewalk"
Werk = "1670"
Case "N|fffd|rnberg"
Werk = "16NF"
Case "Osnabr|fffd|ck"
Werk = "16HO"
Case "Regensburg"
Werk = "16NG"
Case "Saarbr|fffd|cken"
Werk = "16SM"
Case "Schwerin"
Werk = "1629"
Case "Stuttgart"
Werk = "16TB"
Case "Ulm"
Werk = "16TD"
Case "W|fffd|rzburg"
Werk = "16NW"
Case "Zwickau"
Werk = "162U"
Case "Cottbus"
Werk = "165F"
Case "Hannover"
Werk = "16HH"
'16XR
Case "Regionalnetz Bergisch-M|fffd|rkisches-Land"
Werk = "16EP"
'16GC
'16NK
'16DR
'16VL
'16G5
'16AL
'16LB
Case "Regionalnetz Lipperland-Senne"
Werk = "16E9"
'16T6
Case "Regionalnetz M|fffd|nsterland"
Werk = "16D4"
'16AM
'16GM
'16D2
'16CD
'164L
'1677
'16SK
'16HS
'16HT
'16KK
'165M
'16DU
'16LR
'160N
'16NE
'16RL
'164P
'16D1
'16DK
'16OP
'16D0
'16M4
'16XW
Case "Signalwerkstatt Wuppertal"
Werk = "16KI"
Case "Weichenwerk Witten"
Werk = "16ED"
End Select

End Function
Sub QuickSort(ByRef sArray As Variant, ByVal MinElemente As Long, ByVal MaxElemente As Long, ByVal MaxSpalten As Long, ByVal PosSpalten As Long)
' INPUT:sArray         Array das sortiert werden soll
'       MinElement     erstes Element des Arrays (oder Teil-Arrays)
'       MaxElement     letztes Element des Arrays (oder Teil-Arrays)
'       MaxSpalten     Anzahl der Spalten in der Matrix
'       PosSpalten     Nach welcher Spalte soll sortiert werden !
'       Aufruf QuickSort aArray,MinElement,MaxElement,MaxSpalten,PosSpalten

Dim vDummy As Variant
Dim lng_i, lng_j, lng_s, lng_spos, lng_Mitte, lng_ii, lng_EAnfang, lng_EEnde, lng_ZAnfang, lng_ZEnde As Long
Dim int_jj As Integer
Dim Arrr() As Variant
                
    If MinElemente > MaxElemente Then
       
    Exit Sub
    End If
    lng_Mitte = (MinElemente + MaxElemente) \ 2
    lng_i = MinElemente
    lng_j = MaxElemente
    lng_s = MaxSpalten
    lng_spos = PosSpalten  'Spalten Position nach der sortiert werden soll
    
    
'Abschnitt Datenmanipulation
       
Do
               
        Do While sArray(lng_i, PosSpalten) < sArray(lng_Mitte, PosSpalten) ' Von links bis zur Mitte pr|fffd|fen
            lng_i = lng_i + 1
        Loop
        Do While sArray(lng_j, PosSpalten) > sArray(lng_Mitte, PosSpalten) ' Von rechts bis zur Mitte pr|fffd|fen
            lng_j = lng_j - 1
        Loop
If lng_i <= lng_j Then
                     
            vDummy = sArray(lng_j, PosSpalten)
            sArray(lng_j, PosSpalten) = sArray(lng_i, PosSpalten)
            sArray(lng_i, PosSpalten) = vDummy
            astop = astop + 1
' Nachziehen der anderen Elemente aus der Array Zeile
                
                
  
' !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!war schwierig aber gel|fffd|st
  If PosSpalten = 0 Then
  lng_EAnfang = 1
  lng_EEnde = 2
  lng_ZAnfang = MaxSpalten
  lng_ZEnde = MaxSpalten
  End If
  If PosSpalten > 0 And PosSpalten < MaxSpalten Then
  lng_EAnfang = PosSpalten + 1
  lng_EEnde = MaxSpalten
  lng_ZAnfang = 0
  lng_ZEnde = PosSpalten - 1
  End If
  If PosSpalten = MaxSpalten Then
  lng_EAnfang = 0
  lng_EEnde = PosSpalten - 2
  lng_ZAnfang = PosSpalten - 1
  lng_ZEnde = PosSpalten - 1
  End If
   
                Arrr = Array(lng_EAnfang, lng_EEnde, lng_ZAnfang, lng_ZEnde)

                For int_jj = LBound(Arrr()) To UBound(Arrr()) Step 2
                For lng_ii = Arrr(int_jj) To Arrr(int_jj + 1)
               
                    vDummy = sArray(lng_j, lng_ii)
                    sArray(lng_j, lng_ii) = sArray(lng_i, lng_ii)
                    sArray(lng_i, lng_ii) = vDummy
                
                Next lng_ii
                Next int_jj
                     
                lng_i = lng_i + 1
                lng_j = lng_j - 1
            
End If
 
Loop Until lng_i > lng_j
    
    QuickSort sArray, MinElemente, lng_j, MaxSpalten, PosSpalten
    
    QuickSort sArray, lng_i, MaxElemente, MaxSpalten, PosSpalten
End Sub
Function GetPathName(ByVal FileName As String) As String
Dim int_i As Integer    ' Z|fffd|hler
Dim str_s As String     ' Returnwert
    GetPathName = ""
    If Trim(FileName) = "" Then Exit Function
    str_s = FileName
    int_i = Len(str_s)
    While int_i > 1 And Mid(str_s, int_i, 1) <> "\"
    int_i = int_i - 1
    Wend
    If int_i = 1 Then
    str_s = ""
    Else
    str_s = Left(str_s, int_i - 1)
    End If
    GetPathName = str_s
 End Function
Function Extention(ByVal |fffd|Path As String, ByVal |fffd|Barcode As String)
'Verzeichnis auslesen Barcode vergleichen und Planendung zur|fffd|ckgeben
'|fffd|bergabeparameter -> Verzeichnis;Barcode;
'R|fffd|ckgabewert      -> Dateiextention
Dim obj_fso, obj_f, obj_fc, obj_f1 As Object
Dim str_NameDatei, str_NameEndung, str_Endung, str_Barcode As String
Set obj_fso = CreateObject("Scripting.FileSystemObject")
Set obj_f = obj_fso.GetFolder(|fffd|Path)
Set obj_fc = obj_f.Files
    
For Each obj_f1 In obj_fc
      
 str_NameDatei = UCase(obj_f1.Name)
 str_NameEndung = UCase(Right(obj_f1.Name, 3))
 If str_NameEndung = "TIF" Or str_NameEndung = "PDF" Or str_NameEndung = "XLS" Then
    Select Case str_NameEndung
    Case "TIF", "PDF", "XLS"
    str_Endung = Right(str_NameDatei, 3)
    str_Barcode = Left(str_NameDatei, 10)
    'Case "PDF"
    'str_Endung = Right(str_NameDatei, 3)
    'str_Barcode = Left(str_NameDatei, 10)
    'Case "XLS"
    'str_Endung = Right(str_NameDatei, 3)
    'str_Barcode = Left(str_NameDatei, 10)
    End Select
    If |fffd|Barcode = str_Barcode Then
    Extention = str_Endung
    Set obj_fso = Nothing
    Set obj_f = Nothing
    Set obj_fc = Nothing
    Exit Function
 End If
  str_Barcode = ""
  str_Endung = ""
 Else
 End If
Next
   
Set obj_fso = Nothing
Set obj_f = Nothing
Set obj_fc = Nothing
End Function
Sub History()
'Version 30112007.000 301107 Fertigstellung Programmcode Excel Tabellen auslesen.
'Version 30112007.001 041207 Bug: Excel Tabelle Report aus Profile Blattschutz aufheben und Spalten einblenden
'                                 Erstellerfirma in TXT Tabelle ausgegeben
'                                 "N" in STR Tabelle nicht notwendig
'
'
'

End Sub




Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Modul1"
Sub Ausblenden()
Attribute Ausblenden.VB_Description = "Makro am 22.10.2008 von Hans aufgezeichnet"
Attribute Ausblenden.VB_ProcData.VB_Invoke_Func = "a\n14"
'
' Ausblenden Makro
' Makro am 22.10.2008 von Hans aufgezeichnet
'
' Tastenkombination: Strg+a
'
    Sheets(Array("Merkblatt", "Metadaten Plan", "Metadaten CAD-Container", _
        "Streckendaten der Pl|fffd|ne", "Objektverkn|fffd|pfungen", "|fffd|nderungsst|fffd|mme", "Pr|fffd|fwerte")).Select
    Sheets("Merkblatt").Activate
    ActiveWindow.SelectedSheets.Visible = False
    Sheets("Bestellschein").Select
End Sub
Sub Einblenden()
Attribute Einblenden.VB_Description = "Makro am 22.10.2008 von Hans aufgezeichnet"
Attribute Einblenden.VB_ProcData.VB_Invoke_Func = "e\n14"
'
' Einblenden Makro
' Makro am 22.10.2008 von Hans aufgezeichnet
'
' Tastenkombination: Strg+e
'
    Sheets("Merkblatt").Visible = True
    Sheets("Metadaten Plan").Visible = True
    Sheets("Metadaten CAD-Container").Visible = True
    Sheets("Streckendaten der Pl|fffd|ne").Visible = True
    Sheets("Objektverkn|fffd|pfungen").Visible = True
    Sheets("|fffd|nderungsst|fffd|mme").Visible = True
    Sheets("R|fffd|ckf|fffd|hrung").Visible = True
    Sheets("Pr|fffd|fwerte").Visible = True
    Sheets("Bestellschein").Select
End Sub
Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "Import, 152, 0, MSForms, CommandButton"
Attribute VB_Control = "Export, 153, 1, MSForms, CommandButton"
Attribute VB_Control = "CommandButton1, 180, 2, MSForms, CommandButton"
  Const ForReading = 1
  Const ForWriting = 2
  Const ForAppending = 3
  Const SHEET_PLAN = "Metadaten Plan"
  Const SHEET_CAD = "Metadaten CAD-Container"
  Const SHEET_OBJ = "Objektverkn|fffd|pfungen"
  Const SHEET_STR = "Streckendaten der Pl|fffd|ne"
  Const SHEET_AEN = "|fffd|nderungsst|fffd|mme"
                 

Private Sub CommandButton1_Click()
NeuePl|fffd|ne_DVS_01
End Sub

Private Sub Export_Click()

  Dim Text1 As String
  Dim Text2 As String
  Dim Text3 As String
  Dim Text4 As String
  Dim Text5 As String
  Dim Text6 As String
  Dim Text7 As String
  Dim Text8 As String
  Dim Text9 As String
  Dim Text10 As String
  Dim Text11 As String
  Dim Text12 As String
  Dim Text13 As String
  Dim Text14 As String
  Dim Text15 As String
  Dim Text16 As String
  Dim Text17 As String
  Dim Text18 As String
  Dim Text19 As String
  Dim Text20 As String
  Dim Text21 As String
  Dim Text22 As String
  Dim Text23 As String
  Dim Text24 As String
  Dim Text25 As String
  Dim Text26 As String
  Dim Text27 As String
  Dim Text28 As String
  Dim Text29 As String
  Dim Text30 As String
  Dim Text31 As String
  Dim Text32 As String
  Dim Text33 As String
  Dim Text34 As String
  Dim Text35 As String
  Dim Text36 As String
  Dim Text37 As String
  Dim Text38 As String
  Dim Text39 As String
  
  ' Dateinamen auslesen
  Dateiname = Application.ActiveWorkbook.Name
  Dateiname = Left(Dateiname, Len(Dateiname) - 4)
  ' Datum holen
  Datum = Format(Date, "DDMMYYYY")
  
  ' Uhrzeit holen
  Uhrzeit = Format(Time, "hhmmss")
  ' erstes Worksheet sichern
  Worksheets(SHEET_PLAN).Activate
  
  Nametxt = Dateiname + "_PLA_" + Datum + "_" + Uhrzeit + ".txt"
    
  ' PLA schreiben ------------------------------------------------------------------------------
  '---------------------------------------------------------------------------------------------
  Set fs = CreateObject("Scripting.FileSystemObject")
  Set PLA = fs.OpenTextFile(Nametxt, ForWriting, True, TristateFalse)
  
  '|fffd|berschrift aufbereiten'
  Ueberschrift = "lfdNr" + vbTab + "Ver|fffd|nderung Dokument" + vbTab + "Ver|fffd|nderung Plan/Meta" + vbTab + "Validierung BH/ALV" + vbTab + "Nachbesserung erforderlich" + vbTab + "Dok-Nummer" + vbTab + "Dok-Art" + vbTab + "Dok-Version" + vbTab + "|fffd|nderungsnummer" + vbTab + _
  "Barcode" + vbTab + "Extension" + vbTab + "Planz" + vbTab + "Nummer (Strecke)" + vbTab + "Plan-Adr. Alt" + vbTab + "Fachplan 1" + vbTab + "Fachplan 2" + vbTab + "Benennung" + vbTab + "Bezeichnung" + vbTab + "Blatt" + vbTab + "von Blatt" + vbTab + "Entstehungsdatum" + _
  vbTab + "|fffd|nderungsdatum" + vbTab + "|fffd|rtlichkeit gepr|fffd|ft Datum" + vbTab + "Ausgabe Nr" + vbTab + "Bez" + vbTab + "Firmen-Plan-Nr." + vbTab + "Mastervorgang" + vbTab + "Vert.Schl." + vbTab + "Tats. Format" + vbTab + "CAD-Software" + vbTab + "Gewerk" + vbTab + _
  "Werk" + vbTab + "Standort" + vbTab + "Form Orig." + vbTab + "Ma|fffd|stab" + vbTab + "Unterlg.Code" + vbTab + "Zustand" + vbTab + "Aufbew.Ort" + vbTab + "Erstellerfirma"
  PLA.WriteLine (Ueberschrift)
  ' Einlesen aller Zeilen der Aktiven Mappe
  For Each rw In Worksheets(SHEET_PLAN).Rows
  
    If rw.Row > 5 Then
      
      If Worksheets(SHEET_PLAN).Cells(rw.Row, 1).Value = "" Then
        Exit For
      End If
      
      ' zeile schreiben'
      Text1 = Worksheets(SHEET_PLAN).Cells(rw.Row, 1).Value
      Text2 = Worksheets(SHEET_PLAN).Cells(rw.Row, 2).Value
      Text3 = Worksheets(SHEET_PLAN).Cells(rw.Row, 3).Value
      Text4 = Worksheets(SHEET_PLAN).Cells(rw.Row, 4).Value
      Text5 = Worksheets(SHEET_PLAN).Cells(rw.Row, 5).Value
      Text6 = Worksheets(SHEET_PLAN).Cells(rw.Row, 6).Value
      Text7 = Worksheets(SHEET_PLAN).Cells(rw.Row, 7).Value
      Text8 = Worksheets(SHEET_PLAN).Cells(rw.Row, 8).Value
      Text9 = Worksheets(SHEET_PLAN).Cells(rw.Row, 9).Value
      Text10 = Worksheets(SHEET_PLAN).Cells(rw.Row, 10).Value
      Text11 = Worksheets(SHEET_PLAN).Cells(rw.Row, 11).Value
      Text12 = Worksheets(SHEET_PLAN).Cells(rw.Row, 12).Value
      Text13 = Worksheets(SHEET_PLAN).Cells(rw.Row, 13).Value
      Text14 = Worksheets(SHEET_PLAN).Cells(rw.Row, 14).Value
      Text15 = Worksheets(SHEET_PLAN).Cells(rw.Row, 15).Value
      Text16 = Worksheets(SHEET_PLAN).Cells(rw.Row, 16).Value
      Text17 = Worksheets(SHEET_PLAN).Cells(rw.Row, 17).Value
      Text18 = Worksheets(SHEET_PLAN).Cells(rw.Row, 18).Value
      Text19 = Worksheets(SHEET_PLAN).Cells(rw.Row, 19).Value
      Text20 = Worksheets(SHEET_PLAN).Cells(rw.Row, 20).Value
      Text21 = Worksheets(SHEET_PLAN).Cells(rw.Row, 21).Value
      Text22 = Worksheets(SHEET_PLAN).Cells(rw.Row, 22).Value
      Text23 = Worksheets(SHEET_PLAN).Cells(rw.Row, 23).Value
      Text24 = Worksheets(SHEET_PLAN).Cells(rw.Row, 24).Value
      Text25 = Worksheets(SHEET_PLAN).Cells(rw.Row, 25).Value
      Text26 = Worksheets(SHEET_PLAN).Cells(rw.Row, 26).Value
      Text27 = Worksheets(SHEET_PLAN).Cells(rw.Row, 27).Value
      Text28 = Worksheets(SHEET_PLAN).Cells(rw.Row, 28).Value
      Text29 = Worksheets(SHEET_PLAN).Cells(rw.Row, 29).Value
      Text30 = Worksheets(SHEET_PLAN).Cells(rw.Row, 30).Value
      Text31 = Worksheets(SHEET_PLAN).Cells(rw.Row, 31).Value
      Text32 = Worksheets(SHEET_PLAN).Cells(rw.Row, 32).Value
      Text33 = Worksheets(SHEET_PLAN).Cells(rw.Row, 33).Value
      Text34 = Worksheets(SHEET_PLAN).Cells(rw.Row, 34).Value
      Text35 = Worksheets(SHEET_PLAN).Cells(rw.Row, 35).Value
      Text36 = Worksheets(SHEET_PLAN).Cells(rw.Row, 36).Value
      Text37 = Worksheets(SHEET_PLAN).Cells(rw.Row, 37).Value
      Text38 = Worksheets(SHEET_PLAN).Cells(rw.Row, 38).Value
      Text39 = Worksheets(SHEET_PLAN).Cells(rw.Row, 39).Value
      
      zeile = Text1 + vbTab + Text2 + vbTab + Text3 + vbTab + Text4 + vbTab + Text5 + vbTab + Text6 + vbTab + _
            Text7 + vbTab + Text8 + vbTab + Text9 + vbTab + Text10 + vbTab + Text11 + vbTab + Text12 + vbTab + _
            Text13 + vbTab + Text14 + vbTab + Text15 + vbTab + Text16 + vbTab + Text17 + vbTab + Text18 + vbTab + _
            Text19 + vbTab + Text20 + vbTab + Text21 + vbTab + Text22 + vbTab + Text23 + vbTab + Text24 + vbTab + _
            Text25 + vbTab + Text26 + vbTab + Text27 + vbTab + Text28 + vbTab + Text29 + vbTab + Text30 + vbTab + _
            Text31 + vbTab + Text32 + vbTab + Text33 + vbTab + Text34 + vbTab + Text35 + vbTab + Text36 + vbTab + _
            Text37 + vbTab + Text38 + vbTab + Text39
      PLA.WriteLine (zeile)
       
    End If
    
  Next rw
    
  ' Letzte Zeile schreiben
  zeile = "Ende"
  PLA.WriteLine (zeile)
  
  ' DAtei schliessen
  PLA.Close

  ' CAD schreiben ------------------------------------------------------------------------------
  '---------------------------------------------------------------------------------------------
  Worksheets(SHEET_CAD).Activate
  
  Nametxt = Dateiname + "_CAD_" + Datum + "_" + Uhrzeit + ".txt"
    
  
  Set fs = CreateObject("Scripting.FileSystemObject")
  Set CAD = fs.OpenTextFile(Nametxt, ForWriting, True, TristateFalse)
  
  '|fffd|berschrift aufbereiten'
  Ueberschrift = "lfdNr" + vbTab + "Ver|fffd|nderung Dokument" + vbTab + "Ver|fffd|nderung Plan/Meta" + vbTab + "Validierung BH/ALV" + vbTab + "Nachbesserung erforderlich" + vbTab + "Dok-Nummer" + vbTab + "Dok-Art" + vbTab + "Dok-Version" + vbTab + "|fffd|nderungsnummer" + vbTab + _
  "Barcode" + vbTab + "Extension" + vbTab + "Erstelldatum" + vbTab + "Erstellerfirma" + vbTab + "Software" + vbTab + "Gewerk" + vbTab + "Werk" + vbTab + "Standort"
  CAD.WriteLine (Ueberschrift)
  ' Einlesen aller Zeilen der Aktiven Mappe
  For Each rw In Worksheets(SHEET_CAD).Rows
  
    If rw.Row > 5 Then
      
      If Worksheets(SHEET_CAD).Cells(rw.Row, 1).Value = "" Then
        Exit For
      End If
      
      ' zeile schreiben'
      Text1 = Worksheets(SHEET_CAD).Cells(rw.Row, 1).Value
      Text2 = Worksheets(SHEET_CAD).Cells(rw.Row, 2).Value
      Text3 = Worksheets(SHEET_CAD).Cells(rw.Row, 3).Value
      Text4 = Worksheets(SHEET_CAD).Cells(rw.Row, 4).Value
      Text5 = Worksheets(SHEET_CAD).Cells(rw.Row, 5).Value
      Text6 = Worksheets(SHEET_CAD).Cells(rw.Row, 6).Value
      Text7 = Worksheets(SHEET_CAD).Cells(rw.Row, 7).Value
      Text8 = Worksheets(SHEET_CAD).Cells(rw.Row, 8).Value
      Text9 = Worksheets(SHEET_CAD).Cells(rw.Row, 9).Value
      Text10 = Worksheets(SHEET_CAD).Cells(rw.Row, 10).Value
      Text11 = Worksheets(SHEET_CAD).Cells(rw.Row, 11).Value
      Text12 = Worksheets(SHEET_CAD).Cells(rw.Row, 12).Value
      Text13 = Worksheets(SHEET_CAD).Cells(rw.Row, 13).Value
      Text14 = Worksheets(SHEET_CAD).Cells(rw.Row, 14).Value
      Text15 = Worksheets(SHEET_CAD).Cells(rw.Row, 15).Value
      Text16 = Worksheets(SHEET_CAD).Cells(rw.Row, 16).Value
      
      zeile = Text1 + vbTab + Text2 + vbTab + Text3 + vbTab + Text4 + vbTab + Text5 + vbTab + Text6 + vbTab + _
            Text7 + vbTab + Text8 + vbTab + Text9 + vbTab + Text10 + vbTab + Text11 + vbTab + Text12 + vbTab + _
            Text13 + vbTab + Text14 + vbTab + Text15 + vbTab + Text16
      CAD.WriteLine (zeile)
            
    End If
    
  Next rw
    
  ' Letzte Zeile schreiben
  zeile = "Ende"
  CAD.WriteLine (zeile)
  
  ' DAtei schliessen
  CAD.Close

  ' OBJ schreiben ------------------------------------------------------------------------------
  '---------------------------------------------------------------------------------------------
  Worksheets(SHEET_OBJ).Activate
  
  Nametxt = Dateiname + "_OBJ_" + Datum + "_" + Uhrzeit + ".txt"
    
  
  Set fs = CreateObject("Scripting.FileSystemObject")
  Set OBJ = fs.OpenTextFile(Nametxt, ForWriting, True, TristateFalse)
 
  '|fffd|berschrift aufbereiten'
  Ueberschrift = "lfdNr" + vbTab + "Ver|fffd|nderung Dokument" + vbTab + "Ver|fffd|nderung Plan/Meta" + vbTab + "Validierung BH/ALV" + vbTab + "Nachbesserung erforderlich" + vbTab + "Dok-Nummer" + vbTab + "Dok-Art" + vbTab + "Dok-Version" + vbTab + "|fffd|nderungsnummer" + vbTab + _
  "Barcode" + vbTab + "verkn. DOK-ID" + vbTab + "verkn. Dok-Art" + vbTab + "verkn. Dok-Version" + vbTab + "verkn. Barcode" + vbTab + "TP-ID"
  OBJ.WriteLine (Ueberschrift)
  ' Einlesen aller Zeilen der Aktiven Mappe
  For Each rw In Worksheets(SHEET_OBJ).Rows
  
    If rw.Row > 5 Then
      
      If Worksheets(SHEET_OBJ).Cells(rw.Row, 1).Value = "" Then
        Exit For
      End If
      
      ' zeile schreiben'
      Text1 = Worksheets(SHEET_OBJ).Cells(rw.Row, 1).Value
      Text2 = Worksheets(SHEET_OBJ).Cells(rw.Row, 2).Value
      Text3 = Worksheets(SHEET_OBJ).Cells(rw.Row, 3).Value
      Text4 = Worksheets(SHEET_OBJ).Cells(rw.Row, 4).Value
      Text5 = Worksheets(SHEET_OBJ).Cells(rw.Row, 5).Value
      Text6 = Worksheets(SHEET_OBJ).Cells(rw.Row, 6).Value
      Text7 = Worksheets(SHEET_OBJ).Cells(rw.Row, 7).Value
      Text8 = Worksheets(SHEET_OBJ).Cells(rw.Row, 8).Value
      Text9 = Worksheets(SHEET_OBJ).Cells(rw.Row, 9).Value
      Text10 = Worksheets(SHEET_OBJ).Cells(rw.Row, 10).Value
      Text11 = Worksheets(SHEET_OBJ).Cells(rw.Row, 11).Value
      Text12 = Worksheets(SHEET_OBJ).Cells(rw.Row, 12).Value
      Text13 = Worksheets(SHEET_OBJ).Cells(rw.Row, 13).Value
      Text14 = Worksheets(SHEET_OBJ).Cells(rw.Row, 14).Value
      Text15 = Worksheets(SHEET_OBJ).Cells(rw.Row, 15).Value
      
      zeile = Text1 + vbTab + Text2 + vbTab + Text3 + vbTab + Text4 + vbTab + Text5 + vbTab + Text6 + vbTab + _
            Text7 + vbTab + Text8 + vbTab + Text9 + vbTab + Text10 + vbTab + Text11 + vbTab + Text12 + vbTab + _
            Text13 + vbTab + Text14 + vbTab + Text15
      OBJ.WriteLine (zeile)
            
    End If
    
  Next rw
    
  ' Letzte Zeile schreiben
  zeile = "Ende"
  OBJ.WriteLine (zeile)
  
  ' DAtei schliessen
  OBJ.Close

  ' STR schreiben ------------------------------------------------------------------------------
  '---------------------------------------------------------------------------------------------
  Worksheets(SHEET_STR).Activate
  
  Nametxt = Dateiname + "_STR_" + Datum + "_" + Uhrzeit + ".txt"
  
  Set fs = CreateObject("Scripting.FileSystemObject")
  Set STR1 = fs.OpenTextFile(Nametxt, ForWriting, True, TristateFalse)
 
  '|fffd|berschrift aufbereiten'
  Ueberschrift = "lfdNr" + vbTab + "Ver|fffd|nderung Dokument" + vbTab + "Ver|fffd|nderung Plan/Meta" + vbTab + "Validierung BH/ALV" + vbTab + "Nachbesserung erforderlich" + vbTab + "Dok-Nummer" + vbTab + "Dok-Art" + vbTab + "Dok-Version" + vbTab + "|fffd|nderungsnummer" + vbTab + _
  "Barcode" + vbTab + "verkn. DOK-ID" + vbTab + "verkn. Dok-Art" + vbTab + "verkn. Dok-Version" + vbTab + "verkn. Barcode" + vbTab + "TP-ID"
  STR1.WriteLine (Ueberschrift)
  ' Einlesen aller Zeilen der Aktiven Mappe
  For Each rw In Worksheets(SHEET_STR).Rows
  
    If rw.Row > 5 Then
      
      If Worksheets(SHEET_STR).Cells(rw.Row, 1).Value = "" Then
        Exit For
      End If
      
      ' zeile schreiben'
      Text1 = Worksheets(SHEET_STR).Cells(rw.Row, 1).Value
      Text2 = Worksheets(SHEET_STR).Cells(rw.Row, 2).Value
      Text3 = Worksheets(SHEET_STR).Cells(rw.Row, 3).Value
      Text4 = Worksheets(SHEET_STR).Cells(rw.Row, 4).Value
      Text5 = Worksheets(SHEET_STR).Cells(rw.Row, 5).Value
      Text6 = Worksheets(SHEET_STR).Cells(rw.Row, 6).Value
      Text7 = Worksheets(SHEET_STR).Cells(rw.Row, 7).Value
      Text8 = Worksheets(SHEET_STR).Cells(rw.Row, 8).Value
      Text9 = Worksheets(SHEET_STR).Cells(rw.Row, 9).Value
      Text10 = Worksheets(SHEET_STR).Cells(rw.Row, 10).Value
      Text11 = Worksheets(SHEET_STR).Cells(rw.Row, 11).Value
      Text12 = Worksheets(SHEET_STR).Cells(rw.Row, 12).Value
      Text13 = Worksheets(SHEET_STR).Cells(rw.Row, 13).Value
      Text14 = Worksheets(SHEET_STR).Cells(rw.Row, 14).Value
      Text15 = Worksheets(SHEET_STR).Cells(rw.Row, 15).Value
      Text16 = Worksheets(SHEET_STR).Cells(rw.Row, 16).Value
      Text17 = Worksheets(SHEET_STR).Cells(rw.Row, 17).Value
      Text18 = Worksheets(SHEET_STR).Cells(rw.Row, 18).Value
      
      zeile = Text1 + vbTab + Text2 + vbTab + Text3 + vbTab + Text4 + vbTab + Text5 + vbTab + Text6 + vbTab + _
            Text7 + vbTab + Text8 + vbTab + Text9 + vbTab + Text10 + vbTab + Text11 + vbTab + Text12 + vbTab + _
            Text13 + vbTab + Text14 + vbTab + Text15 + vbTab + Text16 + vbTab + Text17 + vbTab + Text18
      STR1.WriteLine (zeile)
            
    End If
    
  Next rw
    
  ' Letzte Zeile schreiben
  zeile = "Ende"
  STR1.WriteLine (zeile)
  
  ' DAtei schliessen
  STR1.Close

End Sub

Private Sub Import_Click()
  
  Dim lngCount As Long
  Dim WoBinIch As String
  Dim RechterTeil As String
  Dim ImportTeil As String
  Dim strZeile As String
  Dim fs, PLA, CAD, OBJ, STR, AEN
  Dim Zaehler
  Dim a As Variant
  Dim n As Long
  
  ' Open the file dialog
  With Application.FileDialog(msoFileDialogFilePicker)
    .AllowMultiSelect = True
    .InitialFileName = "*.txt"
    .Filters.Add "Textfiles", "*.txt", 1
    .Show
    
    For lngCount = 1 To .SelectedItems.Count
      WoBinIch = .SelectedItems(lngCount)
      RechterTeil = Right(WoBinIch, 36)
      Dateiname = Left(RechterTeil, 12)
      ImportTeil = Mid(RechterTeil, 14, 3)
     ' MsgBox ImportTeil
     ' MsgBox RechterTeil
      Select Case ImportTeil
        
        ' einlesen pl|fffd|ne
        Case "PLA"
          Worksheets(SHEET_PLAN).Activate
          'Datei einlesen
          Zaehler = 4
          Set fs = CreateObject("Scripting.FileSystemObject")
          Set PLA = fs.OpenTextFile(WoBinIch, ForReading, TristateFalse)
          ' Schleife um einzelne Zeilen zu lesen
          Do While PLA.AtEndOfStream <> True
             strZeile = PLA.ReadLine
             Zaehler = Zaehler + 1
             
             ' letzte Zeile |fffd|berlesen
             If strZeile = "Ende" Then
               Worksheets(SHEET_PLAN).Cells(1, 6).Value = Zaehler - 6
               Zaehler = 5
             End If
             
             ' |fffd|berschrift |fffd|berlesen ersten Satz mit 2 einlesen
             If Zaehler > 5 Then
               ' Zeile lesen und splitten
               a = Split(strZeile, vbTab)
               For n = 0 To UBound(a)
                 Select Case n
                 Case 0
                   ' ohne Rahmen
                   Worksheets(SHEET_PLAN).Cells(Zaehler, n + 1).Borders.LineStyle = xlLineStyleNone
                   ' Farbe Grau
                   Worksheets(SHEET_PLAN).Cells(Zaehler, n + 1).Interior.Color = RGB(178, 178, 178)
                 Case 1 To 4
                   ' mit Rahmen
                   Worksheets(SHEET_PLAN).Cells(Zaehler, n + 1).Borders.LineStyle = xlContinuous
                   ' Farbe Hellgelb
                   Worksheets(SHEET_PLAN).Cells(Zaehler, n + 1).Interior.Color = RGB(255, 255, 153)
                 Case 5 To 18, 31, 33, 34, 35, 37
                   ' mit Rahmen
                   Worksheets(SHEET_PLAN).Cells(Zaehler, n + 1).Borders.LineStyle = xlContinuous
                   'Text formatierung
                   Worksheets(SHEET_PLAN).Cells(Zaehler, n + 1).NumberFormat = "@"
                   If (n = 5) Or (n = 30) Then
                     Worksheets(SHEET_PLAN).Cells(Zaehler, n + 1).HorizontalAlignment = xlRight
                     ' ActiveCell.Columns("A:A").EntireColumn.EntireColumn.AutoFit
                   Else
                     Worksheets(SHEET_PLAN).Cells(Zaehler, n + 1).HorizontalAlignment = xlLeft
                   End If
                 Case 20, 21
                   ' Datumsformat (auch als Text darstellen)
                   Worksheets(SHEET_PLAN).Cells(Zaehler, n + 1).NumberFormat = "@"
                   
                 End Select
                 
                 'schreibe a(n) in tabelle
                 Worksheets(SHEET_PLAN).Cells(Zaehler, n + 1) = a(n)
                 If (Zaehler - 6) Mod 10 = 0 Then
                    Worksheets(SHEET_PLAN).Cells(1, 6).Value = (Zaehler - 6)
                 End If
               Next

             End If
        Loop
                    ' Datei wieder schliessen
          PLA.Close
          
        Case "CAD"
          
          Worksheets(SHEET_CAD).Activate
          'Datei einlesen
          Zaehler = 4
          Set fs = CreateObject("Scripting.FileSystemObject")
          Set CAD = fs.OpenTextFile(WoBinIch, ForReading, TristateFalse)
          ' Schleife um einzelne Zeilen zu lesen
          Do While CAD.AtEndOfStream <> True
             strZeile = CAD.ReadLine
             Zaehler = Zaehler + 1
             
             ' letzte Zeile |fffd|berlesen
             If strZeile = "Ende" Then
               Worksheets(SHEET_CAD).Cells(1, 6).Value = Zaehler - 6
               Zaehler = 5
             End If
             
             If Zaehler > 5 Then
             ' |fffd|berschrift |fffd|berlesen ersten Satz mit 2 einlesen
               s = strZeile
               a = Split(strZeile, vbTab)
               For n = 0 To UBound(a)
                 'schreibe a(n) in tabelle
                 Worksheets(SHEET_CAD).Cells(Zaehler, n + 1) = a(n)
                    If (Zaehler - 6) Mod 10 = 0 Then
                        Worksheets(SHEET_CAD).Cells(1, 6).Value = (Zaehler - 6)
                    End If
               Next

             End If
          Loop
          
          ' Datei wieder schliessen
          CAD.Close
        
        Case "OBJ"
          Worksheets(SHEET_OBJ).Activate
          'Datei einlesen
          Zaehler = 4
          Set fs = CreateObject("Scripting.FileSystemObject")
          Set OBJ = fs.OpenTextFile(WoBinIch, ForReading, TristateFalse)
          ' Schleife um einzelne Zeilen zu lesen
          Do While OBJ.AtEndOfStream <> True
             strZeile = OBJ.ReadLine
             Zaehler = Zaehler + 1
             
             ' letzte Zeile |fffd|berlesen
             If strZeile = "Ende" Then
               Worksheets(SHEET_OBJ).Cells(1, 6).Value = Zaehler - 6
               Zaehler = 5
             End If
             
             If Zaehler > 5 Then
             ' |fffd|berschrift |fffd|berlesen ersten Satz mit 2 einlesen
               s = strZeile
               a = Split(strZeile, vbTab)
               For n = 0 To UBound(a)
                 'schreibe a(n) in tabelle
                 Worksheets(SHEET_OBJ).Cells(Zaehler, n + 1) = a(n)
                    If (Zaehler - 6) Mod 10 = 0 Then
                        Worksheets(SHEET_OBJ).Cells(1, 6).Value = (Zaehler - 6)
                    End If
               Next

             End If
          Loop
          
          ' Datei wieder schliessen
          OBJ.Close
        
        Case "STR"
        
          Worksheets(SHEET_STR).Activate
          'Datei einlesen
          Zaehler = 4
          Set fs = CreateObject("Scripting.FileSystemObject")
          Set STR = fs.OpenTextFile(WoBinIch, ForReading, TristateFalse)
          ' Schleife um einzelne Zeilen zu lesen
          Do While STR.AtEndOfStream <> True
             strZeile = STR.ReadLine
             Zaehler = Zaehler + 1
             
             ' letzte Zeile |fffd|berlesen
             If strZeile = "Ende" Then
               Worksheets(SHEET_STR).Cells(1, 6).Value = Zaehler - 6
               Zaehler = 5
             End If
             
             If Zaehler > 5 Then
             ' |fffd|berschrift |fffd|berlesen ersten Satz mit 2 einlesen
               s = strZeile
               a = Split(strZeile, vbTab)
               For n = 0 To UBound(a)
                 'schreibe a(n) in tabelle
                 Worksheets(SHEET_STR).Cells(Zaehler, n + 1) = a(n)
                    If (Zaehler - 6) Mod 10 = 0 Then
                        Worksheets(SHEET_STR).Cells(1, 6).Value = (Zaehler - 6)
                    End If
               Next

             End If
          Loop
          
          ' Datei wieder schliessen
          STR.Close
        
        Case "AEN"
          
          Worksheets(SHEET_AEN).Activate
          'Datei einlesen
          Zaehler = 1
          Set fs = CreateObject("Scripting.FileSystemObject")
          Set AEN = fs.OpenTextFile(WoBinIch, ForReading, TristateFalse)
          ' Schleife um einzelne Zeilen zu lesen
          Do While AEN.AtEndOfStream <> True
             strZeile = AEN.ReadLine
             Zaehler = Zaehler + 1
             
             ' letzte Zeile |fffd|berlesen
             If strZeile = "Ende" Then
               Zaehler = 2
             End If
             
             If Zaehler > 2 Then
             ' |fffd|berschrift |fffd|berlesen ersten Satz mit 2 einlesen
               s = strZeile
               a = Split(strZeile, vbTab)
               For n = 0 To UBound(a)
                 'schreibe a(n) in tabelle
                 Worksheets(SHEET_AEN).Cells(Zaehler, n + 1) = a(n)
               Next

             End If
             
             
          Loop
          ' Datei wieder schliessen
          AEN.Close
        
        Case Else
          Meldung = "Datei(en) konnte(n) nicht eingelesen werden"
          Title = "Fehlermeldung"
          Antwort = MsgBox(Meldung, vbOKOnly, Title)
      
      
      End Select
    
    Next lngCount
    ' Sheet 1 wieder aufbl|fffd|ttern nach dem ende des Imports
    Worksheets(SHEET_PLAN).Activate
    
    ' Excelsheet speichern unter Namen
    Dateiname = Dateiname + ".xls"
    fName = Application.GetSaveAsFilename(Dateiname, "Excel Dateien(*.xls), .xls")
    Application.ActiveWorkbook.SaveAs FileName:=fName
    
  End With


End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

 ' MsgBox ("HUHU")
  
End Sub
Attribute VB_Name = "Tabelle10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CommandButton1_Click()
' Makro1 Makro
' Makro am 14.12.2003 von Braun aufgezeichnet
'
' Tastenkombination: Strg+a
'
    Range("H11:I11").Select
    Selection.EntireColumn.Hidden = True
    Range("K11").Select
    Selection.EntireColumn.Hidden = True
    Range("S11").Select
    Selection.EntireColumn.Hidden = True
    Range("A30").Select
End Sub

Private Sub CommandButton2_Click()
' Makro2 Makro
' Makro am 02.03.2005 von Braun aufgezeichnet
'
' Tastenkombination: Strg+b
'
    Cells.Select
    Selection.EntireColumn.Hidden = False
    Range("A30").Select

End Sub
Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CommandButton1_Click()
' Makro1 Makro
' Makro am 14.12.2003 von Braun aufgezeichnet
'
' Tastenkombination: Strg+a
'
    Range("H11:I11").Select
    Selection.EntireColumn.Hidden = True
    Range("K11").Select
    Selection.EntireColumn.Hidden = True
    Range("S11").Select
    Selection.EntireColumn.Hidden = True
    Range("A30").Select
End Sub

Private Sub CommandButton2_Click()
' Makro2 Makro
' Makro am 02.03.2005 von Braun aufgezeichnet
'
' Tastenkombination: Strg+b
'
    Cells.Select
    Selection.EntireColumn.Hidden = False
    Range("A30").Select

End Sub

Private Sub CheckBox1_Click()

End Sub
Attribute VB_Name = "Tabelle7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CommandButton1_Click()
' Makro1 Makro
' Makro am 14.12.2003 von Braun aufgezeichnet
'
' Tastenkombination: Strg+a
'
    Range("H11:I11").Select
    Selection.EntireColumn.Hidden = True
    Range("K11").Select
    Selection.EntireColumn.Hidden = True
    Range("S11").Select
    Selection.EntireColumn.Hidden = True
    Range("A30").Select
End Sub

Private Sub CommandButton2_Click()
' Makro2 Makro
' Makro am 02.03.2005 von Braun aufgezeichnet
'
' Tastenkombination: Strg+b
'
    Cells.Select
    Selection.EntireColumn.Hidden = False
    Range("A30").Select

End Sub
Attribute VB_Name = "Tabelle8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
