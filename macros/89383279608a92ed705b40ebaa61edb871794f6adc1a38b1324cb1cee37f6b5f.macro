Attribute VB_Name = "Module1"
Option Explicit

Dim iRowStart As Long
Dim iRowEnd As Long
Dim iColStart As Long
Dim iColEnd As Long
Dim iSortorder As Integer
Dim iColHeaderStart As Long
Dim AlphaArrDown() As String
Dim AlphaArrAcross() As String



Private Sub CheckQuickFilters()
    Dim val As Integer
    val = ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count).Cells(1, 1)
    iColHeaderStart = val + 1
    'If (Cells(11, 1) = "") Then
    '    iColHeaderStart = 12
    'Else
    '    iColHeaderStart = 13
    'End If
End Sub

Private Function IndexOfAlphabetDown(x As String) As Integer
    Dim i As Integer
    For i = 0 To UBound(AlphaArrDown)
        If AlphaArrDown(i) = x Then
            IndexOfAlphabetDown = i
            Exit Function
        End If
    Next
End Function

Private Function IndexOfAlphabetAcross(x As String) As Integer
    Dim i As Integer
    For i = 0 To UBound(AlphaArrAcross)
        If AlphaArrAcross(i) = x Then
            IndexOfAlphabetAcross = i
            Exit Function
        End If
    Next
End Function

Public Sub Easyview_Print()
    Dim i As Integer
    'Find the last used cell on a worksheet
    Dim LastRow As Long
    Dim LastColumn As Integer
    'Search for any entry, by searching backwards by Rows.
    LastRow = Cells.Find(What:="*", After:=[A1], SearchOrder:=xlByRows, SearchDirection:=xlPrevious).Row
    LastColumn = Cells.Find(What:="*", After:=[A1], SearchOrder:=xlByColumns, SearchDirection:=xlPrevious).Column
    
    'Calculate pages wide
    Dim cols As Integer
    cols = ActiveSheet.Range("A1", Cells(LastRow, LastColumn).Address).Columns.Count
    Dim pages As Integer
    pages = cols \ 4 '4 columns per page
    If ((pages Mod cols) > 0) Then pages = pages + 1
    
    With ActiveSheet.PageSetup
        'Set print area
        .PrintArea = ActiveSheet.Range("A1", Cells(LastRow, LastColumn).Address).Address
        'Set to landscape
        .Orientation = xlLandscape
        .FitToPagesWide = pages
        .FitToPagesTall = 100000
        'Set rows & cols to repeat
        .PrintTitleColumns = Sheet1.Columns("A").Address
        .PrintTitleRows = Sheet1.Rows("8:9").Address
    End With
         
    ActiveSheet.PrintOut
    'ActiveSheet.PrintPreview
    'ActiveWindow.SelectedSheets.PrintPreview
End Sub

Private Sub PerformSort(iOption As Integer, iOrder1 As Long, iOrder2 As Long, iOrder3 As Long, iOffset As Long)
    Dim myRange  As Range
    Set myRange = Rows(iRowStart & ":" & iRowEnd)
    
    'iOption = 1 sort perform sort down
    '         = 2 revert spread sheet to original unsorted state
    
    If Selection.Column < iColStart - 1 And iColStart = 3 Then
        myRange.Sort _
            key1:=Range(RC2Range(iRowStart, iOffset)), order1:=iOrder3, _
            Key2:=Range(RC2Range(iRowStart, iOffset + 2)), Order2:=iOrder3, _
            Header:=xlGuess, OrderCustom:=1, _
            MatchCase:=False, Orientation:=xlTopToBottom
    Else
    
        Select Case iOption
            Case 1
                Select Case iColStart
                    Case 3
                        myRange.Sort _
                        key1:=Range(RC2Range(iRowStart, iOffset + 1)), order1:=iOrder3, _
                        Key2:=Range(RC2Range(iRowStart, iOffset + 2)), Order2:=iOrder3, _
                        Header:=xlGuess, OrderCustom:=1, _
                        MatchCase:=False, Orientation:=xlTopToBottom
                    Case 4
                        myRange.Sort _
                        key1:=Range(RC2Range(iRowStart, iOffset + 1)), order1:=iOrder2, _
                        Key2:=Range(RC2Range(iRowStart, iOffset + 2)), Order2:=iOrder3, _
                        Header:=xlGuess, OrderCustom:=1, _
                        MatchCase:=False, Orientation:=xlTopToBottom
                    Case 5
                        myRange.Sort _
                        key1:=Range(RC2Range(iRowStart, iOffset + 1)), order1:=iOrder1, _
                        Key2:=Range(RC2Range(iRowStart, iOffset + 2)), Order2:=iOrder2, _
                        key3:=Range(RC2Range(iRowStart, iOffset + 3)), Order3:=iOrder3, _
                        Header:=xlGuess, OrderCustom:=1, _
                        MatchCase:=False, Orientation:=xlTopToBottom
                End Select
            Case 2
                Select Case iColStart
                    Case 3
                        'myRange.Sort _
                        'Key1:=Range(RC2Range(iRowStart, iOffset + 1)), Order1:=iOrder3, _
                        'Key2:=Range(RC2Range(iRowStart, iOffset + 2)), Order2:=iOrder3, _
                        'Header:=xlGuess, OrderCustom:=1, _
                        'MatchCase:=False, Orientation:=xlTopToBottom
                        myRange.Sort _
                        key1:=Range(RC2Range(iRowStart, iOffset)), order1:=iOrder3, _
                        Key2:=Range(RC2Range(iRowStart, iOffset + 2)), Order2:=iOrder3, _
                        Header:=xlGuess, OrderCustom:=1, _
                        MatchCase:=False, Orientation:=xlTopToBottom
                    Case 4
                        myRange.Sort _
                        key1:=Range(RC2Range(iRowStart, iOffset)), order1:=iOrder2, _
                        Key2:=Range(RC2Range(iRowStart, iOffset + 1)), Order2:=iOrder3, _
                        key3:=Range(RC2Range(iRowStart, iOffset + 2)), Order3:=iOrder3, _
                        Header:=xlGuess, OrderCustom:=1, _
                        MatchCase:=False, Orientation:=xlTopToBottom
                    Case 5
                        myRange.Sort _
                        key1:=Range(RC2Range(iRowStart, iOffset)), order1:=iOrder1, _
                        Key2:=Range(RC2Range(iRowStart, iOffset + 4)), Order2:=iOrder2, _
                        key3:=Range(RC2Range(iRowStart, iOffset + 3)), Order3:=iOrder3, _
                        Header:=xlGuess, OrderCustom:=1, _
                        MatchCase:=False, Orientation:=xlTopToBottom
                End Select
        End Select
    End If
End Sub

Public Sub sortAcross()
    Dim iSelectedRow As Long
    Dim iOffset As Long
    Dim iOrder1 As Long
    Dim iOrder2 As Long
    Dim iOrder3 As Long
    Dim iSort1 As Long
    Dim iSort2 As Long
    Dim iSort3 As Long
    
    Dim myRange  As Range
    Dim rng2  As Long
    
    On Error GoTo ErrHandler
    
    If iRowEnd > 65536 Or iColEnd > 256 Then
        MsgBox "Sorting exceeds the maximum allowed rows/columns in excel."
        Exit Sub
    End If
    
    Call CheckQuickFilters
    
    Call FindStartNEnd
    Call FillAcrossAlphaArr
    Call SortViaWorksheet(1)
    If iRowStart = 0 Then Exit Sub
    
    If iRowStart <> iColHeaderStart + 2 And iRowStart <> iColHeaderStart + 3 And iRowStart <> iColHeaderStart + 4 Then
         MsgBox "Sorting is not supported when there are more than 3 levels on the top."
         Exit Sub
    End If
    
    iOffset = iRowEnd + 10
    
    'unhide the counter columns as there is a bug with sorting if they are hidden
    Rows(iOffset + iColHeaderStart - 2 & ":" & iOffset + iColHeaderStart + 3).EntireRow.Hidden = False
    
    Call AddHorzCounters(iOffset)
    
    iSelectedRow = Selection.Row
    If iSelectedRow < iRowStart - 1 Then
        iOrder1 = xlAscending
        iOrder2 = xlAscending
        iOrder3 = xlAscending
        iSelectedRow = iRowStart - 1 + iOffset
        iSort1 = iOffset + iColHeaderStart
        iSort2 = iOffset + iColHeaderStart + 1
        iSort3 = iOffset + iColHeaderStart + 2
    Else
        iOrder1 = xlDescending
        iOrder2 = xlDescending
        iOrder3 = xlDescending
        iSelectedRow = Selection.Row
        Call AddHorzFigures(iOffset, Selection.Row)
        iSort1 = iOffset + (iColHeaderStart - 1) '8 = base offset for headers
        iSort2 = iOffset + (iColHeaderStart - 1) - 1
        iSort3 = iSelectedRow
    End If

    rng2 = iRowEnd + iOffset + 5
    If rng2 > 65536 Then
        Rows(iOffset + iColHeaderStart - 2 & ":" & iOffset + iColHeaderStart + 3).EntireRow.Hidden = True
        MsgBox "Sorting exceeds the maximum allowed rows/columns in excel."
        Exit Sub
    End If
    
    Set myRange = Range(RC2Range(iColHeaderStart, iColStart), RC2Range(iRowEnd + iOffset + 5, iColEnd))
    'Range(RC2Range(8, iColStart), RC2Range(iRowEnd + iOffset + 5, iColEnd)).Select
    
    Select Case iRowStart
    Case iColHeaderStart + 2
        Rows(iOffset + iColHeaderStart - 2 & ":" & iOffset + iColHeaderStart + 3).EntireRow.Hidden = True
        'Exit Sub
        myRange.Sort _
            key1:=Range(RC2Range(0 + iSort1, iColStart)), order1:=iOrder1, _
            Key2:=Range(RC2Range(0 + iSort2, iColStart)), Order2:=iOrder3, _
            Header:=xlGuess, OrderCustom:=1, _
            MatchCase:=False, Orientation:=xlLeftToRight
        'myRange.Sort _
            'Key1:=Range(RC2Range(iRowStart, 0 + iSelectedRow)), Order1:=iOrder3, _
            'Header:=xlGuess, OrderCustom:=1, _
            'MatchCase:=False, Orientation:=xlLeftToRight
    Case iColHeaderStart + 3
        'myRange.Sort _
            'Key1:=Range(RC2Range(0 + iSort1, iColStart)), Order1:=iOrder1, _
            'Key2:=Range(RC2Range(0 + iSort2, iColStart)), Order2:=iOrder3, _
            'Header:=xlGuess, OrderCustom:=1, _
            'MatchCase:=False, Orientation:=xlLeftToRight
            myRange.Sort _
            key1:=Range(RC2Range(0 + iSort1, iColStart)), order1:=iOrder1, _
            Key2:=Range(RC2Range(0 + iSort2, iColStart)), Order2:=iOrder2, _
            key3:=Range(RC2Range(0 + iSort3, iColStart)), Order3:=iOrder3, _
            Header:=xlGuess, OrderCustom:=1, _
            MatchCase:=False, Orientation:=xlLeftToRight
    Case iColHeaderStart + 4
        myRange.Sort _
            key1:=Range(RC2Range(0 + iSort1, iColStart)), order1:=iOrder1, _
            Key2:=Range(RC2Range(0 + iSort2, iColStart)), Order2:=iOrder2, _
            key3:=Range(RC2Range(0 + iSort3, iColStart)), Order3:=iOrder3, _
            Header:=xlGuess, OrderCustom:=1, _
            MatchCase:=False, Orientation:=xlLeftToRight
    'Case Else
        'sorting is only supported with 3 or less side options
     '   MsgBox "Sorting is not supported when there are more that 3 levels on the side."
    End Select
    
    'hide columns so they don't appear on the print
    Rows(iOffset + iColHeaderStart - 2 & ":" & iOffset + iColHeaderStart + 3).EntireRow.Hidden = True
    Exit Sub
    
ErrHandler:
    Rows(iOffset + iColHeaderStart - 2 & ":" & iOffset + iColHeaderStart + 3).EntireRow.Hidden = True
    MsgBox "Sorting exceeds the maximum allowed rows/columns in excel."
    Exit Sub

End Sub

Public Sub sortDown()
    Dim iSelectedCol As Long
    Dim iOffset As Long
    Dim iOrder1 As Long
    Dim iOrder2 As Long
    Dim iOrder3 As Long
    Dim iSort1 As Long
    Dim iSort2 As Long
    Dim iReturn As Integer
    'Dim iStr As String
    
    'Dim myRange  As Range
    
    Dim sTempCell1 As String
    Dim sTempCell2 As String
    Const cSortDown = 1
    Const cRevert = 2
    
    On Error GoTo ErrHandler
     
  
    
    Call CheckQuickFilters
         
    Call FindStartNEnd
    iOffset = iColEnd + 10
    
    If iRowEnd > 65536 Or iColEnd > 256 Or (iOffset + 4) > 256 Then
        MsgBox "Sorting exceeds the maximum allowed rows/columns in excel."
        Exit Sub
    End If
    
    If iColStart = 0 Then Exit Sub
      
    If iColStart > 5 Then
      MsgBox "Sorting is not supported when there are more than 3 levels on the side."
      Exit Sub
    End If
    iSelectedCol = Selection.Column
    'check to see what type of report it is and if more than 1 option down the side make
    'user aware of the graphing limitation
    'If iColStart > 3 And iSelectedCol > 1 Then
    '    If MsgBox("Please note you cannot graph after sorting when there is more than one level down the side" _
    '     & vbCrLf & "Click ok to continue to sort" & vbCrLf & "Click cancel to return without sorting", _
    '     vbOKCancel, "Sort Down") = vbCancel Then
    '      Exit Sub
    '     End If
    ' End If
        
    'unhide the counter columns as there is a bug with sorting if they are hidden
    sTempCell1 = RC2Range(1, iOffset - 2)
    sTempCell2 = RC2Range(1, iOffset + 4)
    
    Columns(Left(sTempCell1, Len(sTempCell1) - 1) & ":" & Left(sTempCell2, Len(sTempCell2) - 1)).EntireColumn.Hidden = False
    'iStr = "A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z"
    Call FillDownAlphaArr
    Call SortViaWorksheet(0)
    'AlphaArr = Split(iStr, ",")
    
    'Call AddCounters(iOffset)
          
    'The first time the sort down button is clicked set the sort order to ascending
    'if the user has selected the first column then which triggeres a ascending sort
    'it will still happen
    
    If iSortorder = 0 Then iSortorder = 2
    If iSelectedCol < iColStart - 1 Then
        iOrder1 = xlDescending
        iOrder2 = xlDescending
        iOrder3 = xlDescending
            'Call GroupItems(iOffset, iSelectedCol)
        iSelectedCol = iColStart - 2 + iOffset
        'iSort1 = 1 + iOffset
        'iSort2 = 2 + iOffset
        iSort1 = iOffset
        iSort2 = iOffset + 1
        Call PerformSort(cRevert, iOrder1, iOrder2, iOrder3, iOffset)
    Else
        Select Case iSortorder
            Case 1 'ascending this is just belt and braces
                iOrder1 = xlAscending
                iOrder2 = xlAscending
                iOrder3 = xlAscending
                Call PerformSort(cRevert, iOrder1, iOrder2, iOrder3, iOffset)
            Case 2 'descending
                If Cells(iRowStart, iOffset) <> "" Then 'if a previous sortdown occured
                    iOrder1 = xlDescending
                    iOrder2 = xlDescending
                    iOrder3 = xlDescending
                    Call PerformSort(cRevert, iOrder1, iOrder2, iOrder3, iOffset)
                 End If
                iOrder1 = xlDescending
                iOrder2 = xlDescending
                iOrder3 = xlDescending
                Call GroupItems(iOffset, iSelectedCol)
                'Call AddFigures(iOffset, Selection.Column)
                'iSort1 = iOffset + 1
                'iSort2 = iOffset - 1
                iSort1 = iOffset + 1
                iSort2 = iOffset + 2
                iSelectedCol = iOffset - 2       'Selection.Column
                Call PerformSort(cSortDown, iOrder1, iOrder2, iOrder3, iOffset)
        End Select
    End If
    
    'hide columns so they don't appear on the print
    Columns(Left(sTempCell1, Len(sTempCell1) - 1) & ":" & Left(sTempCell2, Len(sTempCell2) - 1)).EntireColumn.Hidden = True
    Exit Sub
    
ErrHandler:
    Columns(Left(sTempCell1, Len(sTempCell1) - 1) & ":" & Left(sTempCell2, Len(sTempCell2) - 1)).EntireColumn.Hidden = True
    MsgBox "Sorting exceeds the maximum allowed rows/columns in excel."
    Exit Sub
        
End Sub

Sub GroupItems(iOffset As Long, iColumn As Long)
    
    Dim iRowCount As Long
    Dim iStart As Long
    Dim iGroupCount As Double
    Dim iSubGroupCount As Integer
    Dim iStartOfGroup As Long
    Dim iStartOfSubGroup As Long
    Dim firstChar As String
    
    iGroupCount = 1
    iSubGroupCount = 1
    iStart = iRowStart
    iStartOfGroup = iRowEnd
    iStartOfSubGroup = iRowEnd
    
    'firstChar = Mid(Cells(iRowEnd, 1), 1, 1)
    iGroupCount = IndexOfAlphabetDown(Cells(iRowEnd, 1))
    
    For iRowCount = iRowEnd To iRowStart Step -1
        'go through each description column until a total or grand total is identified
        'if it is a grand total add an additional 3
        'if it is a total add an additional 2
        'this is done to differentiate when either the total is the same value as
        'a group value of the grand total
        If Cells(iRowCount, iColStart - 2) = "Total" Then
            If Cells(iRowCount, 1) = "Grand Total" Then
                'if it is the grand total it is treated like a new group
                'hence the group count is incremented before the group cell is updated
                'iGroupCount = iGroupCount + 1
                'firstChar = Mid(Cells(iRowCount - 1, 1), 1, 1)
                iGroupCount = IndexOfAlphabetDown(Cells(iRowCount - 1, 1))
                Cells(iRowCount, iOffset) = iGroupCount
                Cells(iRowCount, iOffset + 1) = Cells(iRowCount, iColumn) + (iGroupCount / 10000)
                Range(RC2Range(iRowCount, iOffset + 1), RC2Range(iRowCount, iOffset + 1)).NumberFormat = "##0.00000"
                Select Case iColStart
                    Case 5
                        Cells(iRowCount, iOffset + 3) = Cells(iRowCount, iColumn) + 3
                    Case 3
                        Cells(iRowCount, iOffset + 2) = Cells(iRowCount, iColumn) + 2
                        Cells(iRowStart, iOffset) = iGroupCount
                        Cells(iRowStart, iOffset + 1) = Cells(iRowCount, iColumn) + (iGroupCount / 10000)
                        Range(RC2Range(iRowStart, iOffset), RC2Range(iRowCount, iOffset)).FillUp
                        Range(RC2Range(iRowStart, iOffset), RC2Range(iRowCount, iOffset)).NumberFormat = "##0.00000"
                        Range(RC2Range(iRowStart, iOffset + 1), RC2Range(iRowCount, iOffset + 1)).FillUp
                        Range(RC2Range(iRowStart, iOffset + 1), RC2Range(iRowCount, iOffset + 1)).NumberFormat = "##0.00000"
                    Case Else
                        Cells(iRowCount, iOffset + 2) = Cells(iRowCount, iColumn) + 2
                End Select
            Else
                'if this is a three level report then we need to check for more than 1 occurance of
                'a total within a group before we change the group
                Select Case iColStart
                    Case 5
                       If Cells(iRowCount, iColStart - 2) = "Total" And Cells(iRowCount + 1, iColStart - 2) <> "Total" Then
                        'this is the total for the second level within the group ie the total for the subgroup column B
                        Cells(iRowCount, iOffset + 3) = Cells(iRowCount, iColumn) + 1
                        
                        Cells(iStartOfSubGroup, iOffset + 2) = (Cells(iRowCount, iColumn) + (iSubGroupCount / 1000))
                        Range(RC2Range(iStartOfSubGroup, iOffset + 2), RC2Range(iRowCount, iOffset + 2)).FillUp
                        Range(RC2Range(iStartOfSubGroup, iOffset + 2), RC2Range(iRowCount, iOffset + 2)).NumberFormat = "##0.000"
                        'put the subgroup number in the offset + 4 column this is used to revert the spreadsheet back to the orignal state
                        Cells(iStartOfSubGroup, iOffset + 4) = iSubGroupCount
                        Range(RC2Range(iStartOfSubGroup, iOffset + 4), RC2Range(iRowCount, iOffset + 4)).FillUp
                        
                        Cells(iRowCount, iOffset + 3) = Cells(iRowCount, iColumn) + 1
                        iSubGroupCount = iSubGroupCount + 1
                        iStartOfSubGroup = iRowCount - 1
                       ElseIf Cells(iRowCount, iColStart - 2) = "Total" And Cells(iRowCount + 1, iColStart - 2) = "Total" Then
                        'this is the total for the first level within the group ie column A
                        'make this a new subgroup it will always contain 1 item
                        'then fill the offset + 1 column with the value of the first level total+the groupnumber/10000 and copy this value for the range of the group
                        'fill the offset column with group number and copy this value for the range of the group
                        'set the cell at the start of the row to the total value
                        Cells(iStartOfSubGroup, iOffset + 2) = (Cells(iRowCount, iColumn) + (iSubGroupCount / 1000))
                        Range(RC2Range(iStartOfSubGroup, iOffset + 2), RC2Range(iRowCount, iOffset + 2)).NumberFormat = "##0.000"
                        Cells(iRowCount, iOffset + 3) = Cells(iRowCount, iColumn) + 2
                        Cells(iStartOfSubGroup, iOffset + 4) = iSubGroupCount
                                                
                        Cells(iStartOfGroup, iOffset + 1) = (Cells(iRowCount, iColumn) + (iGroupCount / 10000))
                        Range(RC2Range(iStartOfGroup, iOffset + 1), RC2Range(iRowCount, iOffset + 1)).FillUp
                        Range(RC2Range(iStartOfGroup, iOffset + 1), RC2Range(iRowCount, iOffset + 1)).NumberFormat = "##0.0000"
                        Cells(iStartOfGroup, iOffset) = (iGroupCount)
                        Range(RC2Range(iStartOfGroup, iOffset), RC2Range(iRowCount, iOffset)).FillUp
                                                
                        iStartOfSubGroup = iRowCount - 1
                        iSubGroupCount = 1
                        'and signals the end of the group so increment the group counter
                        iStartOfGroup = iRowCount - 1
                        'iGroupCount = iGroupCount + 1
                        'firstChar = Mid(Cells(iRowCount - 1, 1), 1, 1)
                        iGroupCount = IndexOfAlphabetDown(Cells(iRowCount - 1, 1))
                       End If
                    Case Else 'this is a 1 or 2 level report
                        
                        Cells(iStartOfGroup, iOffset) = iGroupCount
                        Range(RC2Range(iStartOfGroup, iOffset), RC2Range(iRowCount, iOffset)).FillUp
                                                
                        Cells(iStartOfGroup, iOffset + 1) = (Cells(iRowCount, iColumn) + (iGroupCount / 10000))
                        Cells(iRowCount, iOffset + 2) = Cells(iRowCount, iColumn) + 1
                        Range(RC2Range(iStartOfGroup, iOffset + 1), RC2Range(iRowCount, iOffset)).FillUp
                        Range(RC2Range(iStartOfGroup, iOffset + 1), RC2Range(iRowCount, iOffset)).NumberFormat = "##0.00000"
                        iStartOfGroup = iRowCount - 1
                        'iGroupCount = iGroupCount + 1
                        'firstChar = Mid(Cells(iRowCount - 1, 1), 1, 1)
                        iGroupCount = IndexOfAlphabetDown(Cells(iRowCount - 1, 1))
                    End Select
            End If
        Else
            Select Case iColStart
                Case 5
                    Cells(iRowCount, iOffset + 3) = Cells(iRowCount, iColumn)
                Case Else
                    Cells(iRowCount, iOffset + 2) = Cells(iRowCount, iColumn)
            End Select
            If iColStart = 3 Then
                Cells(iRowCount, iOffset) = (iGroupCount / 10000)
                'iGroupCount = iGroupCount + 1
                'firstChar = Mid(Cells(iRowCount - 1, 1), 1, 1)
                iGroupCount = IndexOfAlphabetDown(Cells(iRowCount - 1, 1))
            End If
        End If
        
    Next

End Sub
Public Sub BuildGraph()
    Dim iCount As Long
    Dim iCount2 As Long
    Dim iRows() As Long
    Dim iCols() As Long
    Dim sTemp As String
    Dim myRange As Range
    Dim iOffset As Long
    Dim iRange As Long
    Dim iReturn As Integer
    
    
    Call FindStartNEnd
    If InStr(1, Cells(10, iColStart - 1), "Grand Total") <> 0 And iColStart > 2 Then
        iReturn = MsgBox("Please note you cannot graph after sorting when there is more than one level down the side. click OK to return the spreadsheet to ascending grouped order," & vbCrLf & "or click Cancel to perform another opperation.", vbOKCancel, "Graphing")
        If iReturn = vbOK Then
            Set myRange = Nothing
            Set myRange = ActiveSheet.Range("A10")
            myRange.Select
            sortDown
        End If
        Exit Sub
    End If
    
    Application.Cursor = xlWait
    iOffset = 0
        
    
    If iColStart = 0 Then
      Application.Cursor = xlDefault
      Exit Sub
    End If
    
    
    
    
    
    Set myRange = Intersect(Selection, Range(RC2Range(8, 1), RC2Range(iRowEnd, iColEnd)))
    If Not (myRange Is Nothing) Then
        'myRange.Select
        
        ReDim iRows(1 To Selection.Areas.Count)
        ReDim iCols(1 To Selection.Areas.Count)
        
        For iCount = 1 To Selection.Areas.Count
            ' is more then one cell selected in the area
            If Selection.Areas(iCount).Count > 1 Then
                ReDim Preserve iRows(1 To UBound(iRows) + Selection.Areas(iCount).Count - 1)
                ReDim Preserve iCols(1 To UBound(iCols) + Selection.Areas(iCount).Count - 1)
                
                For iCount2 = 0 To Selection.Areas(iCount).Count - 1
                    iRows(iCount2 + iOffset + iCount) = Selection.Areas(iCount)(iCount2 + 1).Row
                    iCols(iCount2 + iOffset + iCount) = Selection.Areas(iCount)(iCount2 + 1).Column
                Next
                iOffset = iOffset + Selection.Areas(iCount).Count - 1
            Else
                iRows(iCount + iOffset) = Selection.Areas(iCount).Row
                iCols(iCount + iOffset) = Selection.Areas(iCount).Column
            End If
        Next
    
        ' start with default start cell
        Set myRange = Range(RC2Range(iRowStart - 1, 1))
        'myRange.Select
    
        For iCount = 1 To UBound(iRows)
            ' union the header cells together
            If iRows(iCount) >= iRowStart Then
                For iCount2 = 1 To iColStart - 1
                    sTemp = RC2Range(iRows(iCount), iCount2)
                    If (Intersect(Range(sTemp), myRange) Is Nothing) Then
                        If InStr(1, Cells(iRows(iCount), iCount2), "Total") > 0 Then
                          If iRows(iCount) > iRowStart Then
                            Cells(iRows(iCount), iCount2) = _
                            Mid(Cells(iRows(iCount), iCount2), _
                            1, Len(Cells(iRows(iCount), iCount2)) - 5)
                          End If
                        End If
                        Set myRange = Union(myRange, Range(sTemp))
                        Debug.Print sTemp
                    End If
                    'myRange.Select
                Next
            End If
            
            ' union the data cells per row together
            
            If iRows(iCount) >= iRowStart Then
                For iCount2 = 1 To UBound(iCols)
                    sTemp = RC2Range(iRows(iCount), iCols(iCount2))
                    If (Intersect(Range(sTemp), myRange) Is Nothing) Then
                        Set myRange = Union(myRange, Range(sTemp))
                        Debug.Print sTemp
                    End If
                    'myRange.Select
                Next
            End If
            If iRows(iCount) > iRowEnd Then Exit For
        Next
            
        ' select the range (debug)
        myRange.Select
        
        ' now add the headers and
        For iCount = 8 To iRowStart - 1
            ' union the header rows for the header cols
                For iCount2 = 1 To iColStart - 1
                    sTemp = RC2Range(iCount, iCount2)
                    If (Intersect(Range(sTemp), myRange) Is Nothing) Then
                        Set myRange = Union(myRange, Range(sTemp))
                        Debug.Print sTemp
                    End If
                    myRange.Select
                Next
           
            'union the header rows for the data
                For iCount2 = 1 To UBound(iCols)
                    sTemp = RC2Range(iCount, iCols(iCount2))
                    If (Intersect(Range(sTemp), myRange) Is Nothing) Then
                       Set myRange = Union(myRange, Range(sTemp))
                       Debug.Print sTemp
                    End If
                    'myRange.Select
                Next
           If iCount > iRowEnd Then Exit For
        Next
        
        ' select the total range (debug)
        'myRange.Select
                
                
        Charts.Add
        ActiveChart.SetSourceData Source:=myRange
        ActiveChart.Location Where:=xlLocationAsNewSheet
        ActiveChart.HasTitle = True
        ActiveChart.ChartTitle.Caption = "Enter Chart Title Here"
        
    Else
        MsgBox "There is nothing selected that can be graphed, select some data and/or headers."
    End If

    Application.Cursor = xlDefault

End Sub

Private Function RC2Range(irow As Long, iCol As Long) As String
    Dim iTemp As Long
    Dim sTemp As String
    
    If iCol > 26 Then
        iTemp = iCol \ 26
        sTemp = Chr(Asc("A") + iTemp - 1)
    End If
    
    iTemp = iCol Mod 26
    If iTemp = 0 Then iTemp = 26
    sTemp = sTemp & Chr(Asc("A") + iTemp - 1)
    
    RC2Range = sTemp & CStr(irow)
    
End Function

Private Sub FindStartNEnd()
    Dim iCount  As Long
    Dim sheetsCount As Integer
    sheetsCount = ThisWorkbook.Sheets.Count
    
    iColStart = ThisWorkbook.Sheets(sheetsCount).Cells(3, 1) + 2
    If iColStart = 0 Then Exit Sub
    iRowStart = iColHeaderStart + ThisWorkbook.Sheets(sheetsCount).Cells(2, 1) + 1
    'For iCount = 1 To 2 ^ 8
    '    On Error Resume Next
    '    val = Cells(iColHeaderStart + 1, iCount)
    '    If Err.Number = 0 And val > 0 Then
    '        iColStart = iCount + 1
    '    End If
    '
    '    'If Cells(iColHeaderStart, iCount) <> "" Or Cells(iColHeaderStart, iCount) = "Grand Total" Then
    '    'If Cells(iColHeaderStart + 1, iCount) = "Grand Total" Then
    '    '   iColStart = iCount + 1
    '    '  Exit For
    '    'End If
    'Next
    
         
    
    'For iCount = iColHeaderStart To 2 ^ 16
    '    If Cells(iCount, iColStart - 2) = "Grand Total" Then
    '        iRowStart = iCount + 1
    '        Exit For
    '    End If
    'Next
    
    For iCount = iRowStart To 2 ^ 16
        If Cells(iCount, iColStart - 2) = "" Then
            iRowEnd = iCount - 1
            Exit For
        End If
    Next
    
    For iCount = iColStart To 2 ^ 8
        If Cells(iColHeaderStart + 1, iCount) = "" Then
            iColEnd = iCount - 1
            Exit For
        End If
    Next

End Sub

Private Sub AddHorzCounters(iOffset As Long)
    Dim iRowCount As Long
    Dim iColCount As Long
    Dim iCounter As Long
    
    Dim sOldName As String

    If Len(Cells(iOffset + iColHeaderStart, iColStart)) = 0 Then
        For iRowCount = iColHeaderStart To iRowStart - 2
            For iColCount = iColStart To iColEnd
                If (Cells(iRowCount, iColCount) <> sOldName And Cells(iRowCount, iColCount) <> "Total") And Cells(iRowCount, iColCount) <> "" Then
                    If iRowCount = iColHeaderStart Then
                        iCounter = IndexOfAlphabetAcross(Cells(iRowCount, iColCount))
                    Else
                        iCounter = iCounter + 1
                    End If
                    sOldName = Cells(iRowCount, iColCount)
                End If
                
                If Cells(iRowCount, iColCount) = "" And _
                    "Total" = Cells(iRowCount - 1, iColCount) Then
                    If iRowCount = iColHeaderStart Then
                        iCounter = IndexOfAlphabetAcross(Cells(iRowCount, iColCount))
                    Else
                        iCounter = iCounter + 1
                    End If
                    sOldName = Cells(iRowCount, iColCount)
                End If
                
                If Cells(iOffset + iRowCount - 1, iColCount) <> Cells(iOffset + iRowCount - 1, iColCount - 1) And iRowCount > 1 Then
                    iCounter = 1
                End If
                
                Cells(iOffset + iRowCount, iColCount) = iCounter
            Next
            sOldName = ""
            iCounter = 0
        Next
    End If
End Sub

Private Sub AddCounters(iOffset As Long)
    Dim iRowCount As Long
    Dim iColCount As Long
    Dim iCounter As Long
    
    Dim sOldName As String
    
    
    If Len(Cells(iRowStart, 1 + iOffset)) = 0 Then
        For iColCount = 1 To iColStart - 1
            'for each row check if the cell differs from the previous one ie sOldName  then increment the counter
            For iRowCount = iRowStart To iRowEnd
                If Cells(iRowCount, iColCount) <> sOldName And Cells(iRowCount, iColCount) <> "" Then
                    iCounter = iCounter + 1
                    sOldName = Cells(iRowCount, iColCount)
                End If
                
                'this creates a counter for the grand total
                If Cells(iRowCount, iColCount) = "" And _
                    Cells(iRowCount, iColCount + 1) <> "" And _
                    Cells(iRowCount, iColCount + 1) <> sOldName & " Total" Then
                    
                    iCounter = iCounter + 1
                End If
                
                'if this cell differs from the previous one then set the counter to 1 ???
                If Cells(iRowCount, iOffset + iColCount - 1) <> Cells(iRowCount - 1, iOffset + iColCount - 1) And iColCount > 1 Then
                    iCounter = 1
                End If
                
                Cells(iRowCount, iOffset + iColCount) = iCounter
            Next iRowCount
            sOldName = ""
            iCounter = 0
        Next iColCount
    End If
End Sub

Private Sub AddFigures(iOffset As Long, iColumn As Integer)
    Dim iOldVal As Long
    Dim iRowCount As Long
    Dim iCounter As Long
    Dim iStart As Long
    Dim iMax As Double
    Dim iOuter As Long

    iOldVal = Cells(iRowStart, iOffset + 1)
    iStart = iRowStart

    For iOuter = 1 To iColStart - 1
        For iRowCount = iRowStart To iRowEnd
            
            
            'if the current cell value has not changed from the previous one
            If Cells(iRowCount, iOffset + iOuter) = iOldVal And _
               Cells(iRowCount - 1, iOffset + iOuter - 1) = Cells(iRowCount, iOffset + iOuter - 1) Then
                If Cells(iRowCount, iColumn) > iMax Then
                    iMax = Cells(iRowCount, iColumn)
                End If
            Else
                If iOuter = iColStart - 1 Then
                    'If we are on the column with the grand totals in (ie colstart)then when a cell with
                    'the word grand total is found then add the value of the cell + the value(s)
                    'generated by the Addcounters sub for that row + 2
                    'if it is a sub total do the same but add 1 to the end instead of 2
                    'for all other values just add the actual value
                    
                    'Cells(iStart, iOffset - iOuter + 1) = iMax + Cells(iStart, iOffset + 3)
                    If InStr(1, Cells(iRowCount - 1, iColStart - 1), "Total") > 0 Then
                        If InStr(1, Cells(iRowCount - 1, iColStart - 1), "Grand Total") > 0 Then
                            Cells(iStart, iOffset - iOuter + 1) = (iMax + Cells(iStart, iOffset + 1) + Cells(iStart, iOffset + 2) + 2)
                        Else
                            Cells(iStart, iOffset - iOuter + 1) = (iMax + Cells(iStart, iOffset + 1) + Cells(iStart, iOffset + 2) + 1)
                        End If
                    Else
                        Cells(iStart, iOffset - iOuter + 1) = iMax + Cells(iStart, iOffset + 1) + Cells(iStart, iOffset + 2)
                    End If
                Else
                    'If iMax = 0 Then
                        'if the value to be entered in the column is 0 then use the positional value ie the value in the next column along
                        'this only has to be done on secondary sort column
                     '   Cells(iStart, iOffset - iOuter + 1) = Cells(iStart, iOffset - iOuter + 2)
                    'Else
                        Cells(iStart, iOffset - iOuter + 1) = iMax
                    'End If
                End If
                
                'Debug.Print "imax = " & iMax & " cell " & Cells(iStart, iOffset + 3) & "*"
                If iStart <> iRowCount - 1 Then
                    Range(RC2Range(iStart, iOffset - iOuter + 1), RC2Range(iRowCount - 1, iOffset - iOuter + 1)).FillDown
                End If
                iMax = Cells(iRowCount, iColumn)
                iStart = iRowCount
                iOldVal = Cells(iRowCount, iOffset + iOuter)
            End If
        Next iRowCount
        
        If iOuter = iColStart - 1 Then
          'Cells(iStart, iOffset - iOuter + 1) = iMax + Cells(iStart, iOffset + 3)
          Cells(iStart, iOffset - iOuter + 1) = iMax + Cells(iStart, iOffset + 1) + Cells(iStart, iOffset + 2)
        Else
          Cells(iStart, iOffset - iOuter + 1) = iMax
        End If
        
        If iStart <> iRowCount - 1 Then
            Range(RC2Range(iStart, iOffset - iOuter + 1), RC2Range(iRowCount - 1, iOffset - iOuter + 1)).FillDown
        End If
        iMax = 0
        iStart = iRowStart
        iOldVal = Cells(iRowStart, iOffset + iOuter)

    Next iOuter
End Sub

Private Sub AddHorzFigures(iOffset As Long, irow As Long)
    Dim iOldVal As Long
    Dim iColCount As Long
    Dim iCounter As Long
    Dim iStart As Long
    Dim iMax As Double
    Dim iOuter As Long
    Dim iVals As Long
    Dim iOuterEnd As Long
        
    iOldVal = Cells(iOffset + iColHeaderStart, iColStart)
    iStart = iColStart
    iVals = 1
    If iRowStart - 3 < iColHeaderStart Then
        iOuterEnd = iRowStart - 2
    Else
        iOuterEnd = iRowStart - 3
    End If
    

    For iOuter = iColHeaderStart To iOuterEnd
        For iColCount = iColStart To iColEnd
            If Cells(iOffset + iOuter, iColCount) = iOldVal Then
                If Cells(irow, iColCount) > iMax Then
                    iMax = Cells(irow, iColCount)
                End If
            Else
                
                If iOuter = iRowStart - 3 Then
                    If Cells(iOuter, iColCount - 1) = "Total" Then
                        If Cells(iOuter, iColCount - 1) = "Grand Total" Then
                            Cells(iOffset - iVals + iColHeaderStart, iStart) = iMax + Cells(iOffset + 1, iStart) + Cells(iOffset + 2, iStart) + 2
                        Else
                            Cells(iOffset - iVals + iColHeaderStart, iStart) = iMax + Cells(iOffset + 1, iStart) + Cells(iOffset + 2, iStart) + 1
                        End If
                    Else
                        Cells(iOffset - iVals + iColHeaderStart, iStart) = iMax
                    End If
                Else
                    Cells(iOffset - iVals + iColHeaderStart, iStart) = iMax
                End If
                
                
                If iStart <> iColCount - 1 Then
                    Range(RC2Range(iOffset - iVals + iColHeaderStart, iStart), RC2Range(iOffset - iVals + iColHeaderStart, iColCount - 1)).FillRight
                End If
                
                
                
                iMax = Cells(irow, iColCount)
                iStart = iColCount
                iOldVal = Cells(iOffset + iOuter, iColCount)
            End If
        Next
        
        If iOuter = iRowStart - 2 Then
          Cells(iOffset - iVals + iColHeaderStart, iStart) = iMax + Cells(iOffset + iColHeaderStart, iStart)
        Else
          Cells(iOffset - iVals + iColHeaderStart, iStart) = iMax
        End If
                
        If iStart <> iColCount - 1 Then
            Range(RC2Range(iOffset - iVals + iColHeaderStart, iStart), RC2Range(iOffset - iVals + iColHeaderStart, iColCount - 1)).FillRight
        End If
        iMax = 0
        iStart = iColStart
        iOldVal = Cells(iOffset + iOuter, iColStart)
        iVals = iVals + 1
    Next
    
End Sub

Private Sub SortViaWorksheet(dir As Integer)
    'Dim Arr(1 To 5) As String ' this is the array to be sorted
    Dim WS As Worksheet ' temporary worksheet
    Dim R As Range
    Dim N As Long
       
    Application.ScreenUpdating = False
    
    ' create a new sheet
    Set WS = ThisWorkbook.Worksheets.Add
    
    ' put the array values on the worksheet
    
    If dir = 0 Then
        Set R = WS.Range("A1").Resize(UBound(AlphaArrDown) - LBound(AlphaArrDown) + 1, 1)
        R = Application.Transpose(AlphaArrDown)
        ' sort the range
        R.Sort key1:=R, order1:=xlDescending, MatchCase:=False
    Else
        Set R = WS.Range("A1").Resize(UBound(AlphaArrAcross) - LBound(AlphaArrAcross) + 1, 1)
        R = Application.Transpose(AlphaArrAcross)
        ' sort the range
        R.Sort key1:=R, order1:=xlAscending, MatchCase:=False
    End If
    
    ' load the worksheet values back into the array
    For N = 1 To R.Rows.Count
        If dir = 0 Then
            AlphaArrDown(N - 1) = R(N, 1)
        Else
            AlphaArrAcross(N - 1) = R(N, 1)
        End If
    Next N
    
    ' delete the temporary sheet
    Application.DisplayAlerts = False
    WS.Delete
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    
End Sub

Private Sub FillDownAlphaArr()
    Dim i As Integer
    Dim j As Integer
    Dim arrSize As Integer
    Dim tempStart As Integer
    j = 0
    
    If iRowEnd < iRowStart Then
        arrSize = 1
        tempStart = iRowEnd
    Else
        arrSize = iRowEnd - iRowStart
        tempStart = iRowStart
    End If
    ReDim AlphaArrDown(arrSize)
    For i = tempStart To iRowEnd
        AlphaArrDown(j) = Cells(i, 1)
        j = j + 1
    Next
End Sub

Private Sub FillAcrossAlphaArr()
    Dim i As Integer
    Dim j As Integer
    Dim arrSize As Integer
    Dim tempStart As Integer
    j = 0
    
    If iColEnd < iColStart Then
        arrSize = 1
        tempStart = iColEnd
    Else
        arrSize = iColEnd - iColStart
        tempStart = iColStart
    End If
    ReDim AlphaArrAcross(arrSize)
    For i = tempStart To iColEnd
        AlphaArrAcross(j) = Cells(iColHeaderStart, i) + RC2Range(1, iColStart)
        j = j + 1
    Next
End Sub



'Sub selects()
''
'' selects Macro
'' Macro recorded 23/03/2005 by Darren_Gbadamosi
''

'   Dim x As Long
'   Dim istartCol As Integer
'   Dim iendCol As Integer
'   Dim iStartRow As Integer
'   Dim iendRow As Integer
'   Dim myRange As Range
'   Dim oRangeLegend As Range
'   Dim oRangeCategory As Range
'   Dim strRange As String
'   Dim colColumn As New Collection
'   Dim colitem As Variant
'   Dim bRowExist As Boolean
'   Dim bColumnExist As Boolean
'   Dim colRow As New Collection
   
'   istartCol = 3
'   iendCol = 9
'   iStartRow = 10
'   iendRow = 328
   
      
    'MsgBox "The selection object type is " & TypeName(Selection)
    'Selection.Areas.Count
 '   For x = 1 To Selection.Areas.Count
 '      If (Selection.Areas(x).Row >= iStartRow) And (Selection.Areas(x).Row <= iendRow) And _
 '      (Selection.Areas(x).Column >= istartCol) And (Selection.Areas(x).Column <= iendCol) Then
            'strRange = RC2Range(Selection.Areas(x).Row, 1) & ":" & RC2Range(Selection.Areas(x).Row, istartCol - 1)
 '           strRange = RC2Range(Selection.Areas(x).Row, Selection.Areas(x).Column)
 '           If myRange Is Nothing Then
               'if this is the first range being added check for uninitialised range object
 '               Set myRange = ActiveSheet.Range(strRange)
 '               colColumn.Add Selection.Areas(x).Column, CStr(Selection.Areas(x).Column)
 '               colRow.Add Selection.Areas(x).Row, CStr(Selection.Areas(x).Row)
 '           Else
 '               If x > 1 Then
 '                   bRowExist = False
 '                   For Each colitem In colRow
 '                      If colitem = Selection.Areas(x).Row Then
 '                           bRowExist = True
 '                           Exit For
 '                      End If
 '                   Next
 '
 '                   Select Case bRowExist
 '                      Case True
 '                            'a range for this row has already been added so just add this cell
 '                           strRange = RC2Range(Selection.Areas(x).Row, Selection.Areas(x).Column)
 '                           Set myRange = Union(myRange, ActiveSheet.Range(strRange))
 '                       Case Else
                            'a range for this row has not already been entered so add it
 '                           Set myRange = Union(myRange, ActiveSheet.Range(strRange))
                            'strRange = RC2Range(Selection.Areas(x).Row, Selection.Areas(x).Column)
                            'Set myRange = Union(myRange, ActiveSheet.Range(strRange))
 '                           colRow.Add Selection.Areas(x).Row, CStr(Selection.Areas(x).Row)
 '                   End Select
                         
 '                   bColumnExist = False
 '                   For Each colitem In colColumn
 '                       If colitem = Selection.Areas(x).Column Then
 '                           bColumnExist = True
 '                           Exit For
 '                       End If
 '                   Next
                    
 '                   Select Case bColumnExist
 '                       Case False
 '                           colColumn.Add Selection.Areas(x).Column, CStr(Selection.Areas(x).Column)
 '                   End Select
 '               End If
 '           End If
            'strRange = RC2Range(Selection.Areas(x).Row, Selection.Areas(x).Column)
            'Set myRange = Union(myRange, ActiveSheet.Range(strRange))
 '           strRange = ""
 '      End If
 '   Next
    
 '   If colColumn Is Nothing Or colRow Is Nothing Then Exit Sub
    
 '   If colColumn.Count > colRow.Count Then 'put the col labels on the legend
 '     For Each colitem In colColumn
 '           strRange = RC2Range(8, CLng(colitem))
 '           If oRangeLegend Is Nothing Then
 '               Set oRangeLegend = ActiveSheet.Range(strRange)
 '           Else
 '               Set oRangeLegend = Union(oRangeCategory, ActiveSheet.Range(strRange))
 '           End If
 '       Next
'
'        For Each colitem In colRow
'            strRange = RC2Range(CLng(colitem), 2)
'            If oRangeCategory Is Nothing Then
'                Set oRangeCategory = ActiveSheet.Range(strRange)
'            Else
'                Set oRangeCategory = Union(oRangeCategory, ActiveSheet.Range(strRange))
'            End If
'        Next
'    Else 'there are more rows or the same number of rows as columns so the row labels go on the legend
'        For Each colitem In colColumn
'            strRange = RC2Range(8, CLng(colitem))
'            If oRangeCategory Is Nothing Then
'                Set oRangeCategory = ActiveSheet.Range(strRange)
'            Else
'                Set oRangeCategory = Union(oRangeCategory, ActiveSheet.Range(strRange))
'            End If
'        Next
'
'        For Each colitem In colRow
'            strRange = RC2Range(CLng(colitem), 2)
'            If oRangeLegend Is Nothing Then
'                Set oRangeLegend = ActiveSheet.Range(strRange)
'            Else
'                Set oRangeLegend = Union(oRangeLegend, ActiveSheet.Range(strRange))
'            End If
'        Next
'    End If
    
    
    
'    If Not myRange Is Nothing Then
'        'now add the
'        myRange.Select
'        Charts.Add
'        ActiveChart.SetSourceData Source:=myRange
'        ActiveChart.Location Where:=xlLocationAsNewSheet
'        ActiveChart.HasTitle = True
'        ActiveChart.Axes(xlCategory, xlPrimary).HasTitle = True
'        ActiveChart.Axes(xlCategory).CategoryNames = oRangeCategory
'        'ActiveChart.Axes(xlCategory, xlSecondary).HasTitle = False
'        'ActiveChart.Axes(xlCategory, xlPrimary).AxisTitle.Characters.Text = Cells(8, 3) & " " & Cells(9, 3)
'        'ActiveChart.ChartTitle.Caption = "Enter Chart Title Here"
'    End If
'End Sub



Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Workbook_Open()

End Sub


INQUEST-PP=macro
