Attribute VB_Name = "Bando"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'Dichiarazione propriet|fffd|
Private descrizioneBandoCorrente As String
Private siglaBandoCorrente As String
Private listaVDC() 'visualizzata nel foglio DETTAGLIO
Private listaTendine() 'visualizzata nel foglio DETTAGLIO
Private listaCelle() ' lista Celle Editabili Foglio Dettaglio
Private listaBandiDisponibili() 'tutti i bandi presenti in piattaforma
Private lastRangeUsed As String
Private QS_listaSigleVdc_ric() 'lista sigle da stampare nel foglio Quadro Singolo sezione ricerca
Private QS_listaSigleVdc_svil() 'lista sigle da stampare nel foglio Quadro Singolo sezione sviluppo

' Metodi
Function getDescrizioneBandoCorrente()
    getDescrizioneBandoCorrente = descrizioneBandoCorrente
End Function

Function setDescrizioneBandoCorrente(nuovaDescrizioneBandoCorrente As String)
    descrizioneBandoCorrente = nuovaDescrizioneBandoCorrente
End Function

Function getSiglaBandoCorrente()
    getSiglaBandoCorrente = siglaBandoCorrente
End Function

Function setSiglaBandoCorrente(nuovaSiglaBandoCorrente As String)
    siglaBandoCorrente = nuovaSiglaBandoCorrente
End Function

Function getListaVDC()
    getListaVDC = listaVDC
End Function

Function setListaVDC(nuovaListaVDC)
    listaVDC = nuovaListaVDC
End Function

Function getListaTendine()
    getListaTendine = listaTendine
End Function

Function setListaTendine(nuovaListaTendine)
    listaTendine = nuovaListaTendine
End Function

Function getListaCelle()
    getListaCelle = listaCelle
End Function

Function setListaCelle(nuovaListaCelle)
    listaCelle = nuovaListaCelle
End Function

Function getListaBandiDisponibili()
    ' Initizializzazione
    listaBandiDisponibili = Array("Bando#Sigla Bando", "Horizon 2020#H2020", _
                                    "Agenda Digitale#AD", _
                                    "Industria Sostenibile#IS", _
                                    "Agenda Digitale FRI#AD_FRI", _
                                    "Industria Sostenibile FRI#IS_FRI", _
                                    "Accordo Quadro#ACC", _
                                    "Horizon 2020 PON#H2020_PON", _
                                    "Agenda Digitale PON#AD_PON", _
                                    "Industria Sostenibile PON#IS_PON", _
                                    "ETB numero 10#ETB_10", _
                                    "ETB numero 11#ETB_11")
    getListaBandiDisponibili = listaBandiDisponibili
End Function


Function setListaBandiDisponibiliName(rangeListaBandiDisponibili As String)
    setLastRangeUsed (rangeListaBandiDisponibili)
    ActiveWorkbook.Names.Add name:="TND_LISTA_BANDI", RefersToR1C1:="=" & getLastRangeUsed
End Function

Function getLastRangeUsed()
    If (lastRangeUsed = "") Then
       lastRangeUsed = Range(getAddressByName("CONF_LISTA_BANDI_LAST_RANGE")).Value
    End If
    getLastRangeUsed = lastRangeUsed
End Function

Function setLastRangeUsed(lastRangeUsed)

    Call protectSheet(foglioCONFIG, False)
    Range(getAddressByName("CONF_LISTA_BANDI_LAST_RANGE")).Value = lastRangeUsed
    Call protectSheet(foglioCONFIG, True)
    
End Function

Function seBandoPON()
    If (Right(getSiglaBandoCorrente, 4) = "_PON") Then
        seBandoPON = True
    Else
        seBandoPON = False
    End If
End Function

Function seBandoFRI()
    If (Right(getSiglaBandoCorrente, 4) = "_FRI") Then
        seBandoFRI = True
    Else
        seBandoFRI = False
    End If
End Function

Function getQSListaSigleVDC_ric()
    getQSListaSigleVDC_ric = QS_listaSigleVdc_ric
End Function

Function setQSListaSigleVDC_ric(nuovaQSListaSigleVDC_ric)
    QS_listaSigleVdc_ric = nuovaQSListaSigleVDC_ric
End Function

Function getQSListaSigleVDC_svil()
    getQSListaSigleVDC_svil = QS_listaSigleVdc_svil
End Function

Function setQSListaSigleVDC_svil(nuovaQSListaSigleVDC_svil)
    QS_listaSigleVdc_svil = nuovaQSListaSigleVDC_svil
End Function

Function getSize_QSListaSigleVDC_ric()
    'perche ubound conta gli elementi restituendo il max ma includendo nel conteggio lo zero
    'per cui 5 elementi hanno ubound = 4 e non 5
    getSize_QSListaSigleVDC_ric = UBound(QS_listaSigleVdc_ric) + 1
End Function

Function getSize_QSListaSigleVDC_svil()
    'perche ubound conta gli elementi restituendo il max ma includendo nel conteggio lo zero
    'per cui 5 elementi hanno ubound = 4 e non 5
    getSize_QSListaSigleVDC_svil = UBound(QS_listaSigleVdc_svil) + 1
End Function
Attribute VB_Name = "DestroyForm"
Attribute VB_Base = "0{CFFCEADD-C3DC-4B40-BD52-206DCF20D3B1}{FAE1C6A2-6A36-D446-8FAF-91B0ADAE2613}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub ToggleResetSchemaRendButton_Click()
   destroyAll
End Sub
Attribute VB_Name = "Foglio1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Init"
Sub Inizialization()

    application.ScreenUpdating = False

    'carico le impostazioni di base
    Call loadConfiguration
    
    'visualizzare tutti i fogli
    Call init_viewAllWorksheets
    
    'sproteggo i fogli applicativi
    Call setPasswordToAllSheets(BasicPassword, False)
    
    'scrivo i fogli di configurazione (config, tendine)
    Call init_fogli_configurazione(application)
    
    'se ci sono modifiche inizializzabando andra' a crivere nei fogli di configurazione
    Call init_rend_fromscratch
    
    'formatto i fogli applicativi
    Call init_formattazione_fogli_applicativi(application)
    
    
    'configuro i fogli con le validit|fffd| e controlli vari
    'parametro false perche' non mi aspetto che i fogli siano protetti
    'in quanto (in questo metodo di init) li ho gi|fffd| sprotetti in precedenza
    Call ConfigureProtectionForAllWorksheets(False)
   
    
    Sheets(foglioDETTAGLIO).Select
    ActiveWorkbook.Save
    
    Dim ret As Integer
    ret = Last_Real_Empty_Row_TABELLONE(3)
    Range(Cells(ret, 3).Address).Select
    'Call selection_editabile
    
    
    
    ' blocco nuovamente i fogli
    Call setPasswordToAllSheets(BasicPassword, True)
    
    
    'nascono i fogli non applicativi
    Call hideConfigWorksheets
    
    
    application.ScreenUpdating = True
    MsgBox "Schema inserimento pronto: Buon Lavoro."
        
End Sub

Public Sub init_rend_fromscratch()
    inizialize_REND True
End Sub

Public Sub init_rend() 'pubblica
    inizialize_REND False
End Sub

Public Sub loadConfiguration()
    Call setSheetsNames
    Call namesDefinition    'attenzione non tutti i names sono definiti qui, ma solo quelli con locazione statica
    Call settingConstants
    Call setSystemPassword 'legge le password dal foglio config
End Sub
Public Sub inizialize_REND(fromscratch As Boolean)
    
    application.OnKey "%{F11}", ""
    
    If (fromscratch) Then
        Call inizializzaBando(fromscratch)
        Call init_writeFoglioTendine(False)
        Call settingForJavaCompare

    Else
        Call loadConfiguration
        'TODO SISTEMARE IN SEGUITO
        ActiveWorkbook.Names.Add name:="TND_LISTA_BANDI", RefersToR1C1:="=" & bandoCorrente.getLastRangeUsed
        Call inizializzaBando(fromscratch)
        Call settingForJavaCompare
        
    End If
 End Sub
 
Sub setSheetsNames()
    
    foglioDETTAGLIO = "DETTAGLIO"
    foglioTENDINE = "Tendine"
    foglioCONFIG = "config"
    
    foglioRA_11_PID = "R_A.1.1 (pers dip)"
    foglioSA_21_PID = "S_A.2.1 (pers dip)"
    foglioDETTAGLIO_COSTO_ORARIO = "dettaglio costo orario"
    foglioRA_11_PND = "R_A.1.1 (pers non dip)"
    foglioSA_21_PND = "S_A.2.1 (pers non dip)"
    foglioRA_13_ATT = "R_A.1.3 (Attrez)"
    foglioSA_23_ATT = "S_A.2.3 (Attrez)"
    foglioDETTAGLIO_ATTREZZATURE = "dettaglio attrezzature"
    foglioRA_14_CON = "R_A.1.4 (consul)"
    foglioSA_24_CON = "S_A.2.4 (consul)"
    foglioRA_15_MAT = "R_A.1.5 Materiali"
    foglioRA_15_MAG = "R_A.1.5 Materiali Mag"
    foglioSA_25_MAT = "S_A.2.5 Materiali"
    foglioSA_25_MAG = "S_A.2.5 Materiali Mag"
    foglioRA_16_BIMM = "R_A.1.6 Beni Immateriali"
    foglioSA_26_BIMM = "S_A.2.6 Beni Immateriali"
    
    foglioQS = "Quadro Singolo"
    foglioQS_CNR = "Quadro singolo cnr"
    foglioQS_BANCA = "Quadro singolo banca"
    
    foglioISTRUZIONI = "Tabella lista Voci"
    foglioSPECIFICHE = "Tabella Specifiche"
    foglioSeparatore = ">>>>"

End Sub

Public Sub namesDefinition()
    Call EliminaTuttiNomi
    
    ' SHEET DETTAGLIO
    ActiveWorkbook.Names.Add name:="DETT_INFO_BANDO", RefersToR1C1:="=" & foglioDETTAGLIO & "!R3C5"
    ActiveWorkbook.Names.Add name:="DETT_INFO_CF", RefersToR1C1:="=" & foglioDETTAGLIO & "!R4C3"
    ActiveWorkbook.Names.Add name:="DETT_INFO_DENOM", RefersToR1C1:="=" & foglioDETTAGLIO & "!R3C3"
    ActiveWorkbook.Names.Add name:="DETT_INFO_COSTI_DAL", RefersToR1C1:="=" & foglioDETTAGLIO & "!R5C3"
    ActiveWorkbook.Names.Add name:="DETT_INFO_COSTI_AL", RefersToR1C1:="=" & foglioDETTAGLIO & "!R5C5"
    ActiveWorkbook.Names.Add name:="DETT_INFO_NUM_PROGETTO", RefersToR1C1:="=" & foglioDETTAGLIO & "!R6C3"
    ActiveWorkbook.Names.Add name:="DETT_INFO_SAL", RefersToR1C1:="=" & foglioDETTAGLIO & "!R7C3"
    ActiveWorkbook.Names.Add name:="DETT_INFO_NUM_SAL", RefersToR1C1:="=" & foglioDETTAGLIO & "!R7C5"
    ActiveWorkbook.Names.Add name:="DETT_INFO_DECRETO_NUMERO", RefersToR1C1:="=" & foglioDETTAGLIO & "!R8C3"
    ActiveWorkbook.Names.Add name:="DETT_INFO_DECRETO_DATA", RefersToR1C1:="=" & foglioDETTAGLIO & "!R8C5"
    ActiveWorkbook.Names.Add name:="DETT_INFO_DT_PROGETTO_DAL", RefersToR1C1:="=" & foglioDETTAGLIO & "!R9C3"
    ActiveWorkbook.Names.Add name:="DETT_INFO_DT_PROGETTO_AL", RefersToR1C1:="=" & foglioDETTAGLIO & "!R9C5"
    ActiveWorkbook.Names.Add name:="DETT_INFO_PERC_SPESE_GENERALI", RefersToR1C1:="=" & foglioDETTAGLIO & "!R10C3"
    ActiveWorkbook.Names.Add name:="LISTA_SEDI", RefersToR1C1:="=" & foglioDETTAGLIO & "!R5C9:R8C9"
    ActiveWorkbook.Names.Add name:="SEDE_1", RefersToR1C1:="=" & foglioDETTAGLIO & "!R5C9"
    ActiveWorkbook.Names.Add name:="SEDE_2", RefersToR1C1:="=" & foglioDETTAGLIO & "!R6C9"
    ActiveWorkbook.Names.Add name:="SEDE_3", RefersToR1C1:="=" & foglioDETTAGLIO & "!R7C9"
    ActiveWorkbook.Names.Add name:="SEDE_4", RefersToR1C1:="=" & foglioDETTAGLIO & "!R8C9"
    ActiveWorkbook.Names.Add name:="TOTALE", RefersToR1C1:="=" & foglioDETTAGLIO & "!R13C43"
    ActiveWorkbook.Names.Add name:="TOTALONE", RefersToR1C1:="=" & foglioDETTAGLIO & "!R11C42"
    ActiveWorkbook.Names.Add name:="TOTALONE_IMPORTO", RefersToR1C1:="=" & foglioDETTAGLIO & "!R11C43"
    'stralci cnr e banca
    ActiveWorkbook.Names.Add name:="TOT_CEB_STRALCI_CNR", RefersToR1C1:="=" & foglioDETTAGLIO & "!R12C45"
    ActiveWorkbook.Names.Add name:="TOT_CEB_COSTO_AMMESSO_CNR", RefersToR1C1:="=" & foglioDETTAGLIO & "!R12C46"
    ActiveWorkbook.Names.Add name:="TOT_CEB_STRALCI_BANCA", RefersToR1C1:="=" & foglioDETTAGLIO & "!R12C47"
    ActiveWorkbook.Names.Add name:="TOT_CEB_COSTO_AMMESSO_BANCA", RefersToR1C1:="=" & foglioDETTAGLIO & "!R12C48"
    ActiveWorkbook.Names.Add name:="TOT_CEB_STRALCI", RefersToR1C1:="=" & foglioDETTAGLIO & "!R12C49"
    
    ' per riepilogo --------------------------------------------------------------------------------------------------------------------
    ActiveWorkbook.Names.Add name:="DEF_SEDE1", RefersToR1C1:="=" & foglioCONFIG & "!R6C2"
    ActiveWorkbook.Names.Add name:="DEF_SEDE2", RefersToR1C1:="=" & foglioCONFIG & "!R7C2"
    ActiveWorkbook.Names.Add name:="DEF_SEDE3", RefersToR1C1:="=" & foglioCONFIG & "!R8C2"
    ActiveWorkbook.Names.Add name:="DEF_SEDE4", RefersToR1C1:="=" & foglioCONFIG & "!R9C2"
    
    ActiveWorkbook.Names.Add name:="RA11_PID_SEDE1", RefersToR1C1:="=" & foglioCONFIG & "!R6C3"
    ActiveWorkbook.Names.Add name:="RA11_PID_SEDE2", RefersToR1C1:="=" & foglioCONFIG & "!R7C3"
    ActiveWorkbook.Names.Add name:="RA11_PID_SEDE3", RefersToR1C1:="=" & foglioCONFIG & "!R8C3"
    ActiveWorkbook.Names.Add name:="RA11_PID_SEDE4", RefersToR1C1:="=" & foglioCONFIG & "!R9C3"
    ActiveWorkbook.Names.Add name:="RA11_PID_TOTALE", RefersToR1C1:="=" & foglioCONFIG & "!R10C3"
    
    ActiveWorkbook.Names.Add name:="SA21_PID_SEDE1", RefersToR1C1:="=" & foglioCONFIG & "!R6C4"
    ActiveWorkbook.Names.Add name:="SA21_PID_SEDE2", RefersToR1C1:="=" & foglioCONFIG & "!R7C4"
    ActiveWorkbook.Names.Add name:="SA21_PID_SEDE3", RefersToR1C1:="=" & foglioCONFIG & "!R8C4"
    ActiveWorkbook.Names.Add name:="SA21_PID_SEDE4", RefersToR1C1:="=" & foglioCONFIG & "!R9C4"
    ActiveWorkbook.Names.Add name:="SA21_PID_TOTALE", RefersToR1C1:="=" & foglioCONFIG & "!R10C4"
    
    ActiveWorkbook.Names.Add name:="RA11_PND_SEDE1", RefersToR1C1:="=" & foglioCONFIG & "!R6C5"
    ActiveWorkbook.Names.Add name:="RA11_PND_SEDE2", RefersToR1C1:="=" & foglioCONFIG & "!R7C5"
    ActiveWorkbook.Names.Add name:="RA11_PND_SEDE3", RefersToR1C1:="=" & foglioCONFIG & "!R8C5"
    ActiveWorkbook.Names.Add name:="RA11_PND_SEDE4", RefersToR1C1:="=" & foglioCONFIG & "!R9C5"
    ActiveWorkbook.Names.Add name:="RA11_PND_TOTALE", RefersToR1C1:="=" & foglioCONFIG & "!R10C5"
    
    ActiveWorkbook.Names.Add name:="SA21_PND_SEDE1", RefersToR1C1:="=" & foglioCONFIG & "!R6C6"
    ActiveWorkbook.Names.Add name:="SA21_PND_SEDE2", RefersToR1C1:="=" & foglioCONFIG & "!R7C6"
    ActiveWorkbook.Names.Add name:="SA21_PND_SEDE3", RefersToR1C1:="=" & foglioCONFIG & "!R8C6"
    ActiveWorkbook.Names.Add name:="SA21_PND_SEDE4", RefersToR1C1:="=" & foglioCONFIG & "!R9C6"
    ActiveWorkbook.Names.Add name:="SA21_PND_TOTALE", RefersToR1C1:="=" & foglioCONFIG & "!R10C6"
    
    ActiveWorkbook.Names.Add name:="RA12_SG_SEDE1", RefersToR1C1:="=" & foglioCONFIG & "!R6C7"
    ActiveWorkbook.Names.Add name:="RA12_SG_SEDE2", RefersToR1C1:="=" & foglioCONFIG & "!R7C7"
    ActiveWorkbook.Names.Add name:="RA12_SG_SEDE3", RefersToR1C1:="=" & foglioCONFIG & "!R8C7"
    ActiveWorkbook.Names.Add name:="RA12_SG_SEDE4", RefersToR1C1:="=" & foglioCONFIG & "!R9C7"
    ActiveWorkbook.Names.Add name:="RA12_SG_TOTALE", RefersToR1C1:="=" & foglioCONFIG & "!R10C7"
    
    ActiveWorkbook.Names.Add name:="SA22_SG_SEDE1", RefersToR1C1:="=" & foglioCONFIG & "!R6C8"
    ActiveWorkbook.Names.Add name:="SA22_SG_SEDE2", RefersToR1C1:="=" & foglioCONFIG & "!R7C8"
    ActiveWorkbook.Names.Add name:="SA22_SG_SEDE3", RefersToR1C1:="=" & foglioCONFIG & "!R8C8"
    ActiveWorkbook.Names.Add name:="SA22_SG_SEDE4", RefersToR1C1:="=" & foglioCONFIG & "!R9C8"
    ActiveWorkbook.Names.Add name:="SA22_SG_TOTALE", RefersToR1C1:="=" & foglioCONFIG & "!R10C8"
    
    ActiveWorkbook.Names.Add name:="RA13_ATT_SEDE1", RefersToR1C1:="=" & foglioCONFIG & "!R6C9"
    ActiveWorkbook.Names.Add name:="RA13_ATT_SEDE2", RefersToR1C1:="=" & foglioCONFIG & "!R7C9"
    ActiveWorkbook.Names.Add name:="RA13_ATT_SEDE3", RefersToR1C1:="=" & foglioCONFIG & "!R8C9"
    ActiveWorkbook.Names.Add name:="RA13_ATT_SEDE4", RefersToR1C1:="=" & foglioCONFIG & "!R9C9"
    ActiveWorkbook.Names.Add name:="RA13_ATT_TOTALE", RefersToR1C1:="=" & foglioCONFIG & "!R10C9"
    
    ActiveWorkbook.Names.Add name:="SA23_ATT_SEDE1", RefersToR1C1:="=" & foglioCONFIG & "!R6C10"
    ActiveWorkbook.Names.Add name:="SA23_ATT_SEDE2", RefersToR1C1:="=" & foglioCONFIG & "!R7C10"
    ActiveWorkbook.Names.Add name:="SA23_ATT_SEDE3", RefersToR1C1:="=" & foglioCONFIG & "!R8C10"
    ActiveWorkbook.Names.Add name:="SA23_ATT_SEDE4", RefersToR1C1:="=" & foglioCONFIG & "!R9C10"
    ActiveWorkbook.Names.Add name:="SA23_ATT_TOTALE", RefersToR1C1:="=" & foglioCONFIG & "!R10C10"
       
    ActiveWorkbook.Names.Add name:="RA14_CON_SEDE1", RefersToR1C1:="=" & foglioCONFIG & "!R6C11"
    ActiveWorkbook.Names.Add name:="RA14_CON_SEDE2", RefersToR1C1:="=" & foglioCONFIG & "!R7C11"
    ActiveWorkbook.Names.Add name:="RA14_CON_SEDE3", RefersToR1C1:="=" & foglioCONFIG & "!R8C11"
    ActiveWorkbook.Names.Add name:="RA14_CON_SEDE4", RefersToR1C1:="=" & foglioCONFIG & "!R9C11"
    ActiveWorkbook.Names.Add name:="RA14_CON_TOTALE", RefersToR1C1:="=" & foglioCONFIG & "!R10C11"
    
    ActiveWorkbook.Names.Add name:="SA24_CON_SEDE1", RefersToR1C1:="=" & foglioCONFIG & "!R6C12"
    ActiveWorkbook.Names.Add name:="SA24_CON_SEDE2", RefersToR1C1:="=" & foglioCONFIG & "!R7C12"
    ActiveWorkbook.Names.Add name:="SA24_CON_SEDE3", RefersToR1C1:="=" & foglioCONFIG & "!R8C12"
    ActiveWorkbook.Names.Add name:="SA24_CON_SEDE4", RefersToR1C1:="=" & foglioCONFIG & "!R9C12"
    ActiveWorkbook.Names.Add name:="SA24_CON_TOTALE", RefersToR1C1:="=" & foglioCONFIG & "!R10C12"
    
    ActiveWorkbook.Names.Add name:="RA15_MAT_SEDE1", RefersToR1C1:="=" & foglioCONFIG & "!R6C13"
    ActiveWorkbook.Names.Add name:="RA15_MAT_SEDE2", RefersToR1C1:="=" & foglioCONFIG & "!R7C13"
    ActiveWorkbook.Names.Add name:="RA15_MAT_SEDE3", RefersToR1C1:="=" & foglioCONFIG & "!R8C13"
    ActiveWorkbook.Names.Add name:="RA15_MAT_SEDE4", RefersToR1C1:="=" & foglioCONFIG & "!R9C13"
    ActiveWorkbook.Names.Add name:="RA15_MAT_TOTALE", RefersToR1C1:="=" & foglioCONFIG & "!R10C13"
    
    ActiveWorkbook.Names.Add name:="SA25_MAT_SEDE1", RefersToR1C1:="=" & foglioCONFIG & "!R6C14"
    ActiveWorkbook.Names.Add name:="SA25_MAT_SEDE2", RefersToR1C1:="=" & foglioCONFIG & "!R7C14"
    ActiveWorkbook.Names.Add name:="SA25_MAT_SEDE3", RefersToR1C1:="=" & foglioCONFIG & "!R8C14"
    ActiveWorkbook.Names.Add name:="SA25_MAT_SEDE4", RefersToR1C1:="=" & foglioCONFIG & "!R9C14"
    ActiveWorkbook.Names.Add name:="SA25_MAT_TOTALE", RefersToR1C1:="=" & foglioCONFIG & "!R10C14"
    
    ActiveWorkbook.Names.Add name:="RA15_MAG_SEDE1", RefersToR1C1:="=" & foglioCONFIG & "!R6C15"
    ActiveWorkbook.Names.Add name:="RA15_MAG_SEDE2", RefersToR1C1:="=" & foglioCONFIG & "!R7C15"
    ActiveWorkbook.Names.Add name:="RA15_MAG_SEDE3", RefersToR1C1:="=" & foglioCONFIG & "!R8C15"
    ActiveWorkbook.Names.Add name:="RA15_MAG_SEDE4", RefersToR1C1:="=" & foglioCONFIG & "!R9C15"
    ActiveWorkbook.Names.Add name:="RA15_MAG_TOTALE", RefersToR1C1:="=" & foglioCONFIG & "!R10C15"
    
    ActiveWorkbook.Names.Add name:="SA25_MAG_SEDE1", RefersToR1C1:="=" & foglioCONFIG & "!R6C16"
    ActiveWorkbook.Names.Add name:="SA25_MAG_SEDE2", RefersToR1C1:="=" & foglioCONFIG & "!R7C16"
    ActiveWorkbook.Names.Add name:="SA25_MAG_SEDE3", RefersToR1C1:="=" & foglioCONFIG & "!R8C16"
    ActiveWorkbook.Names.Add name:="SA25_MAG_SEDE4", RefersToR1C1:="=" & foglioCONFIG & "!R9C16"
    ActiveWorkbook.Names.Add name:="SA25_MAG_TOTALE", RefersToR1C1:="=" & foglioCONFIG & "!R10C16"
    
    ActiveWorkbook.Names.Add name:="RA16_BIMM_SEDE1", RefersToR1C1:="=" & foglioCONFIG & "!R6C17"
    ActiveWorkbook.Names.Add name:="RA16_BIMM_SEDE2", RefersToR1C1:="=" & foglioCONFIG & "!R7C17"
    ActiveWorkbook.Names.Add name:="RA16_BIMM_SEDE3", RefersToR1C1:="=" & foglioCONFIG & "!R8C17"
    ActiveWorkbook.Names.Add name:="RA16_BIMM_SEDE4", RefersToR1C1:="=" & foglioCONFIG & "!R9C17"
    ActiveWorkbook.Names.Add name:="RA16_BIMM_TOTALE", RefersToR1C1:="=" & foglioCONFIG & "!R10C17"
    
    ActiveWorkbook.Names.Add name:="SA26_BIMM_SEDE1", RefersToR1C1:="=" & foglioCONFIG & "!R6C18"
    ActiveWorkbook.Names.Add name:="SA26_BIMM_SEDE2", RefersToR1C1:="=" & foglioCONFIG & "!R7C18"
    ActiveWorkbook.Names.Add name:="SA26_BIMM_SEDE3", RefersToR1C1:="=" & foglioCONFIG & "!R8C18"
    ActiveWorkbook.Names.Add name:="SA26_BIMM_SEDE4", RefersToR1C1:="=" & foglioCONFIG & "!R9C18"
    ActiveWorkbook.Names.Add name:="SA26_BIMM_TOTALE", RefersToR1C1:="=" & foglioCONFIG & "!R10C18"
    
    'cnr e banca stralci
    ActiveWorkbook.Names.Add name:="RA11_PID_CNR_COSTOAMM", RefersToR1C1:="=" & foglioCONFIG & "!R13C3"
    ActiveWorkbook.Names.Add name:="RA11_PID_CNR_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R14C3"
    ActiveWorkbook.Names.Add name:="RA11_PID_BANCA_COSTOAMM", RefersToR1C1:="=" & foglioCONFIG & "!R16C3"
    ActiveWorkbook.Names.Add name:="RA11_PID_BANCA_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R17C3"
    ActiveWorkbook.Names.Add name:="RA11_PID_TOT_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R19C3"
    
    ActiveWorkbook.Names.Add name:="SA21_PID_CNR_COSTOAMM", RefersToR1C1:="=" & foglioCONFIG & "!R13C4"
    ActiveWorkbook.Names.Add name:="SA21_PID_CNR_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R14C4"
    ActiveWorkbook.Names.Add name:="SA21_PID_BANCA_COSTOAMM", RefersToR1C1:="=" & foglioCONFIG & "!R16C4"
    ActiveWorkbook.Names.Add name:="SA21_PID_BANCA_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R17C4"
    ActiveWorkbook.Names.Add name:="SA21_PID_TOT_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R19C4"
    
    ActiveWorkbook.Names.Add name:="RA11_PND_CNR_COSTOAMM", RefersToR1C1:="=" & foglioCONFIG & "!R13C5"
    ActiveWorkbook.Names.Add name:="RA11_PND_CNR_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R14C5"
    ActiveWorkbook.Names.Add name:="RA11_PND_BANCA_COSTOAMM", RefersToR1C1:="=" & foglioCONFIG & "!R16C5"
    ActiveWorkbook.Names.Add name:="RA11_PND_BANCA_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R17C5"
    ActiveWorkbook.Names.Add name:="RA11_PND_TOT_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R19C5"
    
    ActiveWorkbook.Names.Add name:="SA21_PND_CNR_COSTOAMM", RefersToR1C1:="=" & foglioCONFIG & "!R13C6"
    ActiveWorkbook.Names.Add name:="SA21_PND_CNR_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R14C6"
    ActiveWorkbook.Names.Add name:="SA21_PND_BANCA_COSTOAMM", RefersToR1C1:="=" & foglioCONFIG & "!R16C6"
    ActiveWorkbook.Names.Add name:="SA21_PND_BANCA_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R17C6"
    ActiveWorkbook.Names.Add name:="SA21_PND_TOT_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R19C6"
    
    ActiveWorkbook.Names.Add name:="RA12_SG_CNR_COSTOAMM", RefersToR1C1:="=" & foglioCONFIG & "!R13C7"
    ActiveWorkbook.Names.Add name:="RA12_SG_CNR_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R14C7"
    ActiveWorkbook.Names.Add name:="RA12_SG_BANCA_COSTOAMM", RefersToR1C1:="=" & foglioCONFIG & "!R16C7"
    ActiveWorkbook.Names.Add name:="RA12_SG_BANCA_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R17C7"
    ActiveWorkbook.Names.Add name:="RA12_SG_TOT_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R19C7"
    
    ActiveWorkbook.Names.Add name:="SA22_SG_CNR_COSTOAMM", RefersToR1C1:="=" & foglioCONFIG & "!R13C8"
    ActiveWorkbook.Names.Add name:="SA22_SG_CNR_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R14C8"
    ActiveWorkbook.Names.Add name:="SA22_SG_BANCA_COSTOAMM", RefersToR1C1:="=" & foglioCONFIG & "!R16C8"
    ActiveWorkbook.Names.Add name:="SA22_SG_BANCA_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R17C8"
    ActiveWorkbook.Names.Add name:="SA22_SG_TOT_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R19C8"
    
    ActiveWorkbook.Names.Add name:="RA13_ATT_CNR_COSTOAMM", RefersToR1C1:="=" & foglioCONFIG & "!R13C9"
    ActiveWorkbook.Names.Add name:="RA13_ATT_CNR_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R14C9"
    ActiveWorkbook.Names.Add name:="RA13_ATT_BANCA_COSTOAMM", RefersToR1C1:="=" & foglioCONFIG & "!R16C9"
    ActiveWorkbook.Names.Add name:="RA13_ATT_BANCA_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R17C9"
    ActiveWorkbook.Names.Add name:="RA13_ATT_TOT_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R19C9"
    
    ActiveWorkbook.Names.Add name:="SA23_ATT_CNR_COSTOAMM", RefersToR1C1:="=" & foglioCONFIG & "!R13C10"
    ActiveWorkbook.Names.Add name:="SA23_ATT_CNR_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R14C10"
    ActiveWorkbook.Names.Add name:="SA23_ATT_BANCA_COSTOAMM", RefersToR1C1:="=" & foglioCONFIG & "!R16C10"
    ActiveWorkbook.Names.Add name:="SA23_ATT_BANCA_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R17C10"
    ActiveWorkbook.Names.Add name:="SA23_ATT_TOT_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R19C10"
       
    ActiveWorkbook.Names.Add name:="RA14_CON_CNR_COSTOAMM", RefersToR1C1:="=" & foglioCONFIG & "!R13C11"
    ActiveWorkbook.Names.Add name:="RA14_CON_CNR_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R14C11"
    ActiveWorkbook.Names.Add name:="RA14_CON_BANCA_COSTOAMM", RefersToR1C1:="=" & foglioCONFIG & "!R16C11"
    ActiveWorkbook.Names.Add name:="RA14_CON_BANCA_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R17C11"
    ActiveWorkbook.Names.Add name:="RA14_CON_TOT_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R19C11"
    
    ActiveWorkbook.Names.Add name:="SA24_CON_CNR_COSTOAMM", RefersToR1C1:="=" & foglioCONFIG & "!R13C12"
    ActiveWorkbook.Names.Add name:="SA24_CON_CNR_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R14C12"
    ActiveWorkbook.Names.Add name:="SA24_CON_BANCA_COSTOAMM", RefersToR1C1:="=" & foglioCONFIG & "!R16C12"
    ActiveWorkbook.Names.Add name:="SA24_CON_BANCA_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R17C12"
    ActiveWorkbook.Names.Add name:="SA24_CON_TOT_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R19C12"
    
    ActiveWorkbook.Names.Add name:="RA15_MAT_CNR_COSTOAMM", RefersToR1C1:="=" & foglioCONFIG & "!R13C13"
    ActiveWorkbook.Names.Add name:="RA15_MAT_CNR_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R14C13"
    ActiveWorkbook.Names.Add name:="RA15_MAT_BANCA_COSTOAMM", RefersToR1C1:="=" & foglioCONFIG & "!R16C13"
    ActiveWorkbook.Names.Add name:="RA15_MAT_BANCA_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R17C13"
    ActiveWorkbook.Names.Add name:="RA15_MAT_TOT_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R19C13"
    
    ActiveWorkbook.Names.Add name:="SA25_MAT_CNR_COSTOAMM", RefersToR1C1:="=" & foglioCONFIG & "!R13C14"
    ActiveWorkbook.Names.Add name:="SA25_MAT_CNR_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R14C14"
    ActiveWorkbook.Names.Add name:="SA25_MAT_BANCA_COSTOAMM", RefersToR1C1:="=" & foglioCONFIG & "!R16C14"
    ActiveWorkbook.Names.Add name:="SA25_MAT_BANCA_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R17C14"
    ActiveWorkbook.Names.Add name:="SA25_MAT_TOT_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R19C14"
    
    ActiveWorkbook.Names.Add name:="RA15_MAG_CNR_COSTOAMM", RefersToR1C1:="=" & foglioCONFIG & "!R13C15"
    ActiveWorkbook.Names.Add name:="RA15_MAG_CNR_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R14C15"
    ActiveWorkbook.Names.Add name:="RA15_MAG_BANCA_COSTOAMM", RefersToR1C1:="=" & foglioCONFIG & "!R16C15"
    ActiveWorkbook.Names.Add name:="RA15_MAG_BANCA_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R17C15"
    ActiveWorkbook.Names.Add name:="RA15_MAG_TOT_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R19C15"
    
    ActiveWorkbook.Names.Add name:="SA25_MAG_CNR_COSTOAMM", RefersToR1C1:="=" & foglioCONFIG & "!R13C16"
    ActiveWorkbook.Names.Add name:="SA25_MAG_CNR_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R14C16"
    ActiveWorkbook.Names.Add name:="SA25_MAG_BANCA_COSTOAMM", RefersToR1C1:="=" & foglioCONFIG & "!R16C16"
    ActiveWorkbook.Names.Add name:="SA25_MAG_BANCA_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R17C16"
    ActiveWorkbook.Names.Add name:="SA25_MAG_TOT_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R19C16"
    
    ActiveWorkbook.Names.Add name:="RA16_BIMM_CNR_COSTOAMM", RefersToR1C1:="=" & foglioCONFIG & "!R13C17"
    ActiveWorkbook.Names.Add name:="RA16_BIMM_CNR_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R14C17"
    ActiveWorkbook.Names.Add name:="RA16_BIMM_BANCA_COSTOAMM", RefersToR1C1:="=" & foglioCONFIG & "!R16C17"
    ActiveWorkbook.Names.Add name:="RA16_BIMM_BANCA_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R17C17"
    ActiveWorkbook.Names.Add name:="RA16_BIMM_TOT_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R19C17"
    
    ActiveWorkbook.Names.Add name:="SA26_BIMM_CNR_COSTOAMM", RefersToR1C1:="=" & foglioCONFIG & "!R13C18"
    ActiveWorkbook.Names.Add name:="SA26_BIMM_CNR_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R14C18"
    ActiveWorkbook.Names.Add name:="SA26_BIMM_BANCA_COSTOAMM", RefersToR1C1:="=" & foglioCONFIG & "!R16C18"
    ActiveWorkbook.Names.Add name:="SA26_BIMM_BANCA_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R17C18"
    ActiveWorkbook.Names.Add name:="SA26_BIMM_TOT_STRALCI", RefersToR1C1:="=" & foglioCONFIG & "!R19C18"
    
    'REGOLA DELLA PERCENTUALE SPESE GENERALI
    'LABELS
    ActiveWorkbook.Names.Add name:="REGPERC_LABEL", RefersToR1C1:="=" & foglioCONFIG & "!R21C1"
    
    ActiveWorkbook.Names.Add name:="REGPERC_TOT_LABEL", RefersToR1C1:="=" & foglioCONFIG & "!R21C2"
    ActiveWorkbook.Names.Add name:="REGPERC_TOT_SG_LABEL", RefersToR1C1:="=" & foglioCONFIG & "!R21C4"
    ActiveWorkbook.Names.Add name:="REGPERC_PERC_LABEL", RefersToR1C1:="=" & foglioCONFIG & "!R21C6"
    ActiveWorkbook.Names.Add name:="REGPERC_PERC_SG_LABEL", RefersToR1C1:="=" & foglioCONFIG & "!R21C8"
    'FIELDS
    ActiveWorkbook.Names.Add name:="REGPERC_TOT", RefersToR1C1:="=" & foglioCONFIG & "!R21C3"
    ActiveWorkbook.Names.Add name:="REGPERC_TOT_SG", RefersToR1C1:="=" & foglioCONFIG & "!R21C5"
    ActiveWorkbook.Names.Add name:="REGPERC_PERC", RefersToR1C1:="=" & foglioCONFIG & "!R21C7"
    ActiveWorkbook.Names.Add name:="REGPERC_PERC_SG", RefersToR1C1:="=" & foglioCONFIG & "!R21C9"
    
    
    'conigurazione
    'TODO anche questi nomi devono diventare dinamici
    ActiveWorkbook.Names.Add name:="CONF_SIMB_VALUTA_LABEL", RefersToR1C1:="=" & foglioCONFIG & "!R25C1"
    ActiveWorkbook.Names.Add name:="CONF_SIMB_VALUTA", RefersToR1C1:="=" & foglioCONFIG & "!R25C2"
    ActiveWorkbook.Names.Add name:="CONF_VERSION_LABEL", RefersToR1C1:="=" & foglioCONFIG & "!R26C1"
    ActiveWorkbook.Names.Add name:="CONF_VERSION", RefersToR1C1:="=" & foglioCONFIG & "!R26C2"
    ActiveWorkbook.Names.Add name:="CONF_DT_RELEASED_VERSION_LABEL", RefersToR1C1:="=" & foglioCONFIG & "!R27C1"
    ActiveWorkbook.Names.Add name:="CONF_DT_RELEASED_VERSION", RefersToR1C1:="=" & foglioCONFIG & "!R27C2"
    ActiveWorkbook.Names.Add name:="CONF_PWD_ADMIN_LABEL", RefersToR1C1:="=" & foglioCONFIG & "!R28C1"
    ActiveWorkbook.Names.Add name:="CONF_PWD_ADMIN", RefersToR1C1:="=" & foglioCONFIG & "!R28C2"
    ActiveWorkbook.Names.Add name:="CONF_OLD_PWD_ADMIN_LABEL", RefersToR1C1:="=" & foglioCONFIG & "!R29C1"
    ActiveWorkbook.Names.Add name:="CONF_OLD_PWD_ADMIN", RefersToR1C1:="=" & foglioCONFIG & "!R29C2"
    ActiveWorkbook.Names.Add name:="CONF_LISTA_BANDI_LAST_RANGE_LABEL", RefersToR1C1:="=" & foglioCONFIG & "!R30C1"
    ActiveWorkbook.Names.Add name:="CONF_LISTA_BANDI_LAST_RANGE", RefersToR1C1:="=" & foglioCONFIG & "!R30C2"
    'Tendine
    'vedere il metodo writeFoglioTendine
    
    
    ' Quadro Singolo
    ActiveWorkbook.Names.Add name:="QS_SEDE1", RefersToR1C1:="=" & foglioQS & "!R3C7"
    ActiveWorkbook.Names.Add name:="QS_SEDE2", RefersToR1C1:="=" & foglioQS & "!R4C7"
    ActiveWorkbook.Names.Add name:="QS_SEDE3", RefersToR1C1:="=" & foglioQS & "!R5C7"
    ActiveWorkbook.Names.Add name:="QS_SEDE4", RefersToR1C1:="=" & foglioQS & "!R6C7"
    
    ActiveWorkbook.Names.Add name:="QS_SPESE_RENDICONTATE_SEDE1_LABEL", RefersToR1C1:="=" & foglioQS & "!R8C3"
    ActiveWorkbook.Names.Add name:="QS_SPESE_RENDICONTATE_SEDE2_LABEL", RefersToR1C1:="=" & foglioQS & "!R8C4"
    ActiveWorkbook.Names.Add name:="QS_SPESE_RENDICONTATE_SEDE3_LABEL", RefersToR1C1:="=" & foglioQS & "!R8C5"
    ActiveWorkbook.Names.Add name:="QS_SPESE_RENDICONTATE_SEDE4_LABEL", RefersToR1C1:="=" & foglioQS & "!R8C6"
    
    
    ' Quadro Singolo cnr
    ActiveWorkbook.Names.Add name:="QS_CNR_SEDE1", RefersToR1C1:="=" & foglioQS_CNR & "!R3C7"
    ActiveWorkbook.Names.Add name:="QS_CNR_SEDE2", RefersToR1C1:="=" & foglioQS_CNR & "!R4C7"
    ActiveWorkbook.Names.Add name:="QS_CNR_SEDE3", RefersToR1C1:="=" & foglioQS_CNR & "!R5C7"
    ActiveWorkbook.Names.Add name:="QS_CNR_SEDE4", RefersToR1C1:="=" & foglioQS_CNR & "!R6C7"
    
    ActiveWorkbook.Names.Add name:="QS_CNR_SPESE_RENDICONTATE_SEDE1_LABEL", RefersToR1C1:="=" & foglioQS_CNR & "!R8C3"
    ActiveWorkbook.Names.Add name:="QS_CNR_SPESE_RENDICONTATE_SEDE2_LABEL", RefersToR1C1:="=" & foglioQS_CNR & "!R8C4"
    ActiveWorkbook.Names.Add name:="QS_CNR_SPESE_RENDICONTATE_SEDE3_LABEL", RefersToR1C1:="=" & foglioQS_CNR & "!R8C5"
    ActiveWorkbook.Names.Add name:="QS_CNR_SPESE_RENDICONTATE_SEDE4_LABEL", RefersToR1C1:="=" & foglioQS_CNR & "!R8C6"
    
    ' Quadro Singolo banca
    ActiveWorkbook.Names.Add name:="QS_BANCA_SEDE1", RefersToR1C1:="=" & foglioQS_BANCA & "!R3C7"
    ActiveWorkbook.Names.Add name:="QS_BANCA_SEDE2", RefersToR1C1:="=" & foglioQS_BANCA & "!R4C7"
    ActiveWorkbook.Names.Add name:="QS_BANCA_SEDE3", RefersToR1C1:="=" & foglioQS_BANCA & "!R5C7"
    ActiveWorkbook.Names.Add name:="QS_BANCA_SEDE4", RefersToR1C1:="=" & foglioQS_BANCA & "!R6C7"
    
    ActiveWorkbook.Names.Add name:="QS_BANCA_SPESE_RENDICONTATE_SEDE1_LABEL", RefersToR1C1:="=" & foglioQS_BANCA & "!R8C3"
    ActiveWorkbook.Names.Add name:="QS_BANCA_SPESE_RENDICONTATE_SEDE2_LABEL", RefersToR1C1:="=" & foglioQS_BANCA & "!R8C4"
    ActiveWorkbook.Names.Add name:="QS_BANCA_SPESE_RENDICONTATE_SEDE3_LABEL", RefersToR1C1:="=" & foglioQS_BANCA & "!R8C5"
    ActiveWorkbook.Names.Add name:="QS_BANCA_SPESE_RENDICONTATE_SEDE4_LABEL", RefersToR1C1:="=" & foglioQS_BANCA & "!R8C6"
   
    Call settingForJavaCompare
    
End Sub

Sub settingConstants()
        
    coloreCellaBando = 34
    coloreCelleEditabili = 44
    coloreCelleObbligatorie = 3
    rigaTabellone = 13
    rigaRagruppamentoTabellone = 12
    numeroRigheDaAnalizzare = 2000
    
    startSheet = foglioDETTAGLIO & "!"
    
    ' ---------------------------------------
    Dim version As String
    Dim valuta As String
    
    version = "ENG"  '    "ITA"   /    "ENG"
    valuta = Range(getAddressByName("CONF_SIMB_VALUTA"))
    'MsgBox valuta
    
    Select Case version
        Case "ITA"
            FORMATO_VALUTA = "#.##0,00 \" & valuta & ";[Red]-#.##0,00 \" & valuta
            FORMATO_DECIMALE = "#.##0,00;[Red]-#.##0,00"
            FORMATO_INTERO = "0_ ;[Red]-0"
            FORMATO_PERCENTUALE = "0,00 ""%"""
            FORMATO_TESTO = "@"
            FORMATO_DATA = "gg/mm/aaaa"
            GENERAL_FORMAT = "Standard"
            DATA_LIMIT_DOWN = "1/1/1900"
            DATA_LIMIT_UP = "12/31/3000"
        Case "ENG"
            FORMATO_VALUTA = "#,##0.00 \" & valuta & ";[Red]-#,##0.00 \" & valuta
            FORMATO_DECIMALE = "#,##0.00;[Red]-#,##0.00"
            FORMATO_INTERO = "0_ ;[Red]-0"
            FORMATO_PERCENTUALE = "0.00 ""%"""
            FORMATO_TESTO = "@"
            FORMATO_DATA = "dd/mm/yyyy"
            GENERAL_FORMAT = "General"
            DATA_LIMIT_DOWN = "1900/1/1"
            DATA_LIMIT_UP = "3000/1/1"
        Case Else
        
    End Select
    
     ' ----------------------
    'Quadro Singolo
    QS_numRigaStart_ricerca = 8
    'QS_listaSigleVdc_ric = Array("RA11_PID_#RA11_PND_", "RA12_SG_", "RA13_ATT_", "RA14_CON_", "RA15_MAT_#RA15_MAG_", "RA16_BIMM_")
    'QS_listaSigleVdc_svil = Array("SA21_PID_#SA21_PND_", "SA22_SG_", "SA23_ATT_", "SA24_CON_", "SA25_MAT_#SA25_MAG_", "SA26_BIMM_")
    'QS_listaSigleVdcSize = UBound(QS_listaSigleVdc_ric)
    ' ----------------------
    
    
    'MsgBox "formato valuta " & FORMATO_VALUTA
    
End Sub

Public Sub init_writeFoglioTendine(basic As Boolean)

    ' only for test
    'setSheetsNames
    
    ' common var
    Dim lista, itemLista
    Dim titleRow As Integer, tempCountRow As Integer, tempCountCol As Integer, tempColCountSplitted As Integer, startCol As Integer
    Dim intervallo As String
    Dim sheetWasPreviouslyHidden As Boolean
    Dim sheetWasPreviouslyProtected As Boolean
    
    ' ************************************************************************
    ' init var
    ' ************************************************************************
    sheetWasPreviouslyHidden = False
    sheetWasPreviouslyProtected = False
    
    
    
    ' ************************************************************************
    ' cell started
    ' ************************************************************************
    titleRow = 2
    startCol = 2
    ' ************************************************************************
    
    
    ' seleziono il foglio delle tendine e lo svuoto
    If (Not Sheets(foglioTENDINE).Visible) Then
        Sheets(foglioTENDINE).Visible = True
        sheetWasPreviouslyHidden = True
    End If
'    If (isSheetContentProtect(foglioTENDINE)) Then
'        Call protectSheet(foglioTENDINE, False)
'        sheetWasPreviouslyProtected = True
'    End If
    Sheets(foglioTENDINE).Select
    Cells.Select
    Selection.Delete Shift:=xlUp
    Selection.EntireColumn.AutoFit
    
    ' ************************************************************************
    ' inizio dichiarazione Tendine
    ' ************************************************************************
    Dim listaTendine(), listaTipologieAttrezzature(), listaSedi(), listaVDC(), listaSal(), listaBandi()
      
      
    If (basic) Then 'valori di default

        listaTendine = Array(bandoCorrente.getListaBandiDisponibili)
     
    Else

        listaTendine = bandoCorrente.getListaTendine()
    
    End If
    
    
    ' ************************************************************************
    
    
    
    
    tempCountCol = 0
    
    ' ciclo su tutte le liste definite in precedenza
    For Each lista In listaTendine
        
        'non parto da zero cosi da poter sommare 1 come prima istruzione del ciclo for
        'ed uscire alla fine col numero corretto e non incrementato di uno
        tempCountRow = -1
        
        'per ogni lista stampo i valori
        For Each itemLista In lista
            
            'controllo se i vallori sono splittati
            'se si li stampero' uno accanto all'altro
            'altrimenti stampero' solo il primo
            Dim splitvar
            splitvar = Split(itemLista, "#")
            
            'incremento le righe della singola lista
            tempCountRow = tempCountRow + 1
                    
            Dim itemSplitted
            tempColCountSplitted = -1
            For Each itemSplitted In splitvar
             
                tempColCountSplitted = tempColCountSplitted + 1
                 
                Range(Cells((titleRow + tempCountRow), (startCol + tempCountCol + tempColCountSplitted)), Cells((titleRow + tempCountRow), (startCol + tempCountCol + tempColCountSplitted))).Value = itemSplitted
                 
            Next 'splitvar
        
        Next 'lista
        
        'formatto le liste
        Range(Cells(titleRow, (startCol + tempCountCol)), Cells((titleRow), (startCol + tempCountCol + tempColCountSplitted))).Select
        With Selection
             .name = "Calibri"
             .Font.FontStyle = "Bold"
             .Font.Size = 8
             .Interior.ColorIndex = 6
             .HorizontalAlignment = xlCenter
             .VerticalAlignment = xlCenter
             .MergeCells = False
        End With
        
        Call disegna_griglia_byCells(titleRow, (startCol + tempCountCol), (titleRow + tempCountRow), (startCol + tempCountCol + tempColCountSplitted))
    
        'TODO: non mi piace tanto, trovare il modo di renderlo dinamico
        If (lista(0) = "Bando#Sigla Bando") Then
            'ActiveWorkbook.Names.Add name:="TND_LISTA_BANDI", RefersToR1C1:="=" & foglioTENDINE & "!R" & (titleRow + 1) & "C" & (startCol + tempCountCol) & ":R" & (titleRow + tempCountRow) & "C" & (startCol + tempCountCol + tempColCountSplitted)
            Dim rangeListaBandiDisponibili
            'rangeListaBandiDisponibili = "=" & foglioTENDINE & "!R" & (titleRow + 1) & "C" & (startCol + tempCountCol) & ":R" & (titleRow + tempCountRow) & "C" & (startCol + tempCountCol + tempColCountSplitted)
            rangeListaBandiDisponibili = foglioTENDINE & "!R" & (titleRow + 1) & "C" & (startCol + tempCountCol) & ":R" & (titleRow + tempCountRow) & "C" & (startCol + tempCountCol + tempColCountSplitted)
            
            Range(getAddressByName("CONF_LISTA_BANDI_LAST_RANGE")).Value = rangeListaBandiDisponibili
            ActiveWorkbook.Names.Add name:="TND_LISTA_BANDI", RefersToR1C1:="=" & rangeListaBandiDisponibili
        End If
        
        If (lista(0) = "Sigle Voci di Costo") Then
            Dim rangeName
            rangeName = foglioTENDINE & "!R" & (titleRow + 1) & "C" & (startCol + tempCountCol) & ":R" & (titleRow + tempCountRow) & "C" & (startCol + tempCountCol + tempColCountSplitted)
            ActiveWorkbook.Names.Add name:="TND_LISTA_SIGLE_VDC", RefersToR1C1:="=" & rangeName
        
        End If
    
        'incremento lo spostamento laterale (startCol) considerando anche le liste splittate
        'questo incremento deve essere post ciclo perch|fffd| contempla anche tempColCountSplitted
        tempCountCol = tempCountCol + 1 + tempColCountSplitted
        
    
    Next 'listaTendine

    ' seleziono il foglio delle tendine ed applico l'autofit alle colonne
    Sheets(foglioTENDINE).Select
    Cells.Select
    Selection.EntireColumn.AutoFit
    Range(Cells(titleRow, startCol), Cells(titleRow, startCol)).Select
    
    If (sheetWasPreviouslyProtected) Then
        Call protectSheet(foglioTENDINE, True)
    End If
    If (sheetWasPreviouslyHidden) Then
        Sheets(foglioTENDINE).Visible = False
    End If
    

End Sub

Public Sub init_fogli_configurazione(application As application)
 
    Call init_writeFoglioConfig
    Call init_writeFoglioTendine(True)
    
End Sub

Public Sub init_formattazione_fogli_applicativi(application As application)

    Call formatta_foglio_DETTAGLIO(application)
    'TODO Aggiungere la formattazione dei singoli fogli
    
End Sub

Sub init_writeFoglioConfig()

    'Sheets(foglioCONFIG).Visible = True
    Sheets(foglioCONFIG).Activate
    Sheets(foglioCONFIG).Select
  
    ' tabella Configuation
    Range("A24").Select
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlBottom
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .ShrinkToFit = False
        .MergeCells = True
    End With
    ActiveCell.FormulaR1C1 = "Configuration"
    
    Range("A25").Select
    ActiveCell.FormulaR1C1 = "Simbolo Valuta"
    Range("B25").Select
    With Selection
    '    .FormulaR1C1 = "|fffd|"
        .NumberFormat = "@"
    End With
    
    Range("A26").Select
    Selection.FormulaR1C1 = "Versione Prodotto"
    Range("B26").Select
    'ActiveCell.FormulaR1C1 = "8.33.14"
    
    Range("A27").Select
    ActiveCell.FormulaR1C1 = "Released:"
    Range("B27").Select
    With Selection
        .HorizontalAlignment = xlLeft
    End With
    'ActiveCell.FormulaR1C1 = "FCS2468"
    
    Range("A28").Select
    ActiveCell.FormulaR1C1 = "Password d'accesso"
    Range("B28").Select
    'ActiveCell.FormulaR1C1 = "FCS2468"
    
    Range("A29").Select
    ActiveCell.FormulaR1C1 = "Vecchia PWD d'accesso"
    Range("B29").Select
    'ActiveCell.FormulaR1C1 = "FCS2468"
    
    Range("A30").Select
    ActiveCell.FormulaR1C1 = "Lista Bandi: Ultimo indirizzo usato"
    Range("B30").Select
    With Selection
        .Value = "=" & foglioTENDINE & "!R1C1"
        .NumberFormat = "@"
    End With
    
    Call disegna_griglia("A24:B30")
    
    'Sheets(foglioCONFIG).Select
    'ActiveWindow.SelectedSheets.Visible = False

End Sub

Sub init_modificaBando(nuovoBando As String)
      
    Range("DETT_INFO_BANDO").Value = nuovoBando
   
End Sub

Sub init_viewAllWorksheets()
'puo' essere usata solo in fse di init, in altri casi la visualizzazione di determinati fogli dipende dal bando

    For Each wks In ActiveWorkbook.Worksheets
        
        If (Not Sheets(wks.name).Visible) Then
            Sheets(wks.name).Visible = True
        End If
        
    Next

End Sub
Attribute VB_Name = "Moving"
Option Explicit

Private countRA11 As Integer


Private numRigaStart_sviluppo

Function WARNING() As Integer

    Dim risposta As Integer
    risposta = MsgBox("Procedendo verranno ribaltati i dati inseriti sul foglio DETTAGLIO nei relativi fogli in base alla voce di costo, aggregandoli dove richiesto. Procedere ?", vbOKCancel, "ATTENZIONE")
    WARNING = risposta
    'MsgBox risposta
    
End Function

Public Sub Ribaltamento()

Dim righeDaAnalizzare As Integer
Dim countForTerminate As Integer
Dim riga As Integer
Dim c As Range
Dim noRowsInTabellone As Boolean
noRowsInTabellone = True

application.ScreenUpdating = False

Call init_rend

Call upperCaseSedi


countForTerminate = 0

' TODO Aggungere controllo su obbligatorieta bando
'If (Not controllaBando) Then
'        application.EnableEvents = True
'        Exit Sub
'End If

If (Not controllaSedi) Then
        application.EnableEvents = True
        Exit Sub
End If
                
If (Not controllaINFO_RIEPILOGO_PROGETTO) Then
        application.EnableEvents = True
        Exit Sub
End If
        
application.ScreenUpdating = True
If (WARNING = 1) Then

        application.ScreenUpdating = False
        Call setPasswordToAllSheets(BasicPassword, False)
        If (testPreventivo) Then
    
        Call svuotaRA_11_PID
        Call svuotaSA_21_PID
        Call svuotaDETTAGLIO_COSTO_ORARIO
        Call svuotaRA_11_PND
        Call svuotaSA_21_PND
        Call svuotaRA_13_ATT
        Call svuotaSA_23_ATT
        Call svuotaDETTAGLIO_ATTREZZATURE
        Call svuotaRA_14_CON
        Call svuotaSA_24_CON
        Call svuotaRA_15_MAT
        Call svuotaRA_15_MAG
        Call svuotaSA_25_MAT
        Call svuotaSA_25_MAG
        If (bandoCorrente.seBandoPON) Then
            Call svuotaRA_16_BIMM
            Call svuotaSA_26_BIMM
        End If
        Call svuotaRiepilogo(False)
        Call svuotaQS(False, False)
        Call svuotaQS(True, False)
        Call svuotaQS(False, True)
        
        For Each c In Range(startSheet & "C" & (rigaTabellone + 1) & ":C" & numeroRigheDaAnalizzare)
            
            If (Trim(c.Value) <> "") Then
                countForTerminate = 0
                noRowsInTabellone = False
                
                riga = c.row
                
                'sposto le voci di costo nei relativi sheet di dettaglio
                Select Case c.Value
                    Case "R_A.1.1 Personale interno dip"
                        Call RA_11_PID(riga)
                        Call DETTAGLIO_COSTO_ORARIO(riga)
                        
                    Case "S_A.2.1 Personale interno dip"
                        Call SA_21_PID(riga)
                        Call DETTAGLIO_COSTO_ORARIO(riga)
                    
                    Case "R_A.1.1 Personale interno non dip"
                        Call RA_11_PND(riga)
                    
                    Case "S_A.2.1 Personale interno non dip"
                        Call SA_21_PND(riga)
                    
                    Case "R_A.1.2 Spese Generali"
                        Call aggiungiImportoSede(Range(startSheet & "B" & riga).Value, "RA12_SG", Range(startSheet & "AQ" & riga).Value)
                        Call aggiungiImportoStralci("RA12_SG", riga)
                    Case "S_A.2.2 Spese Generali"
                        Call aggiungiImportoSede(Range(startSheet & "B" & riga).Value, "SA22_SG", Range(startSheet & "AQ" & riga).Value)
                         Call aggiungiImportoStralci("SA22_SG", riga)
                    Case "R_A.1.3 Strumenti e attrezzature"
                        Call RA_13_ATT(riga)
                        Call DETTAGLIO_ATTREZZATURE(riga)
                    
                    Case "S_A.2.3 Strumenti e attrezzature"
                        Call SA_23_ATT(riga)
                        Call DETTAGLIO_ATTREZZATURE(riga)
                
                    Case "R_A.1.4 Servizi di consulenza"
                        Call RA_14_CON(riga)
                    
                    Case "S_A.2.4 Servizi di consulenza"
                        Call SA_24_CON(riga)
                
                    Case "R_A.1.5 Materiali e forniture"
                        Call RA_15_MAT(riga)
                
                    Case "R_A.1.5 Materiali e forniture Magazzino"
                        Call RA_15_MAG(riga)
                        
                    Case "S_A.2.5 Materiali e forniture"
                        Call SA_25_MAT(riga)
                        
                    Case "S_A.2.5 Materiali e forniture Magazzino"
                        Call SA_25_MAG(riga)
                        
                    Case "R_A.1.6 Beni Immateriali"
                        Call RA_16_BIMM(riga)
                    
                    Case "S_A.2.6 Beni Immateriali"
                        Call SA_26_BIMM(riga)
                        
                End Select
            
            Else
                If (countForTerminate > 10) Then
                    Exit For
                Else
                    countForTerminate = countForTerminate + 1
                End If
                
            End If
                     
        Next
        
        If (Not noRowsInTabellone) Then
            Sheets(foglioQS).Select
            Call QuadroSingolo(False, False)
    
            Sheets(foglioQS_CNR).Select
            Call QuadroSingolo(True, False)
            
            Sheets(foglioQS_BANCA).Select
            Call QuadroSingolo(False, True)
        End If
        
        ' ritorno
        Sheets(foglioDETTAGLIO).Select
        Range("A1").Select
        MsgBox "Ribaltamento terminato senza errori."
    Else
        Range("A" & (rigaTabellone + 1)).Select
        MsgBox "Ribaltamento interrotto."
   End If 'testPreventivo
    
    Call setPasswordToAllSheets(BasicPassword, True)
    
Else 'WARNING
    MsgBox "Ribaltamento annullato come richiesto."

End If 'WARNING

' ritorno
Sheets(foglioDETTAGLIO).Select
Range("A13").Select
Range("A1").Select
application.ScreenUpdating = True
End Sub

Sub intestazioneSheetsVDC(clear As Boolean)

If (clear) Then
    Range("A2").FormulaR1C1 = ""
    Range("C2").FormulaR1C1 = ""
    Range("C3").ClearContents
    Range("E3").ClearContents
Else
    Range("A2").NumberFormat = "General"
    Range("A2").Value = "=" & getAddressByName("DETT_INFO_DENOM")
    Range("C2").Value = "=" & getAddressByName("DETT_INFO_NUM_PROGETTO")
    Range("C3").Value = "=" & getAddressByName("DETT_INFO_COSTI_DAL")
    Range("C3").NumberFormat = FORMATO_DATA
    Range("E3").Value = "=" & getAddressByName("DETT_INFO_COSTI_AL")
    Range("E3").NumberFormat = FORMATO_DATA
End If


End Sub
Sub RA_11_PID(rigaDaRibaltare As Integer)

    Sheets(foglioRA_11_PID).Select
    
    'popolo l'intestazione
    Call intestazioneSheetsVDC(False)
    
    Dim startRow As Integer
    startRow = 7
    
    'popolo le righe relative
    startRow = Last_Real_Empty_Row(1, foglioRA_11_PID)
    
    Range("A" & startRow).Value = "=" & startSheet & "E" & rigaDaRibaltare
    Range("B" & startRow).Value = "=" & startSheet & "B" & rigaDaRibaltare
    Range("C" & startRow).Value = "=" & startSheet & "F" & rigaDaRibaltare
    Range("D" & startRow & ":E" & startRow).MergeCells = True
    Range("D" & startRow).Value = "=" & startSheet & "G" & rigaDaRibaltare
    Range("F" & startRow).Value = "=" & startSheet & "H" & rigaDaRibaltare
    Range("G" & startRow).Value = "=" & startSheet & "Q" & rigaDaRibaltare
    Range("G" & startRow).NumberFormat = FORMATO_DECIMALE
    Range("H" & startRow).Value = "=" & startSheet & "AQ" & rigaDaRibaltare
    Range("H" & startRow).NumberFormat = FORMATO_DECIMALE
    'cnr e banca
    'Range("I" & startRow).Value = "=" & startSheet & "AS" & rigaDaRibaltare
    'Range("J" & startRow).Value = "=" & startSheet & "AT" & rigaDaRibaltare
    'Range("K" & startRow).Value = "=" & startSheet & "AU" & rigaDaRibaltare
    'Range("L" & startRow).Value = "=" & startSheet & "AV" & rigaDaRibaltare
    'Range("M" & startRow).Value = "=" & startSheet & "AW" & rigaDaRibaltare
    
    Call disegna_griglia("A" & startRow & ":H" & startRow)
    
    Range("H2").Value = "=sum(H7:H" & startRow & ")"
    Range("H2").NumberFormat = FORMATO_DECIMALE
    
    Range("G4").Value = "=sum(F7:F" & startRow & ")"
    Range("G4").NumberFormat = FORMATO_DECIMALE
    
    Call aggiungiImportoSede(Range("B" & startRow).Value, "RA11_PID", Range("H" & startRow).Value)
    Call aggiungiImportoStralci("RA11_PID", rigaDaRibaltare)
    
    Columns("A:C").EntireColumn.AutoFit
    Columns("F:H").EntireColumn.AutoFit
    
End Sub
Sub svuotaRA_11_PID()
    Dim startRow As Integer
    startRow = 7
    
    Sheets(foglioRA_11_PID).Select
    'cancello i dati precedentemente acquisiti
    Range(startRow & ":" & numeroRigheDaAnalizzare).Delete
    Call intestazioneSheetsVDC(True)
    Range("H2").ClearContents
    Range("G4").ClearContents
    
End Sub
Sub SA_21_PID(rigaDaRibaltare As Integer)

    Sheets(foglioSA_21_PID).Select
    
    'popolo l'intestazione
    Call intestazioneSheetsVDC(False)
    
    Dim startRow As Integer
    startRow = 7
    
    'popolo le righe relative
    startRow = Last_Real_Empty_Row(1, foglioSA_21_PID)
    
    Range("A" & startRow).Value = "=" & startSheet & "E" & rigaDaRibaltare
    Range("B" & startRow).Value = "=" & startSheet & "B" & rigaDaRibaltare
    Range("C" & startRow).Value = "=" & startSheet & "F" & rigaDaRibaltare
    Range("D" & startRow & ":E" & startRow).MergeCells = True
    Range("D" & startRow).Value = "=" & startSheet & "G" & rigaDaRibaltare
    Range("F" & startRow).Value = "=" & startSheet & "H" & rigaDaRibaltare
    Range("G" & startRow).Value = "=" & startSheet & "Q" & rigaDaRibaltare
    Range("G" & startRow).NumberFormat = FORMATO_DECIMALE
    Range("H" & startRow).Value = "=" & startSheet & "AQ" & rigaDaRibaltare
    Range("H" & startRow).NumberFormat = FORMATO_DECIMALE
    
    'cnr e banca
    'Range("I" & startRow).Value = "=" & startSheet & "AS" & rigaDaRibaltare
    'Range("J" & startRow).Value = "=" & startSheet & "AT" & rigaDaRibaltare
    'Range("K" & startRow).Value = "=" & startSheet & "AU" & rigaDaRibaltare
    'Range("L" & startRow).Value = "=" & startSheet & "AV" & rigaDaRibaltare
    'Range("M" & startRow).Value = "=" & startSheet & "AW" & rigaDaRibaltare
    
    Call disegna_griglia("A" & startRow & ":H" & startRow)
    
    Range("H2").Value = "=sum(H7:H" & startRow & ")"
    Range("H2").NumberFormat = FORMATO_DECIMALE
    
    Range("G4").Value = "=sum(F7:F" & startRow & ")"
    Range("G4").NumberFormat = FORMATO_DECIMALE
    
    Call aggiungiImportoSede(Range("B" & startRow).Value, "SA21_PID", Range("H" & startRow).Value)
    Call aggiungiImportoStralci("SA21_PID", rigaDaRibaltare)
    
    Columns("A:C").EntireColumn.AutoFit
    Columns("F:H").EntireColumn.AutoFit
    
End Sub
Sub svuotaSA_21_PID()
    Dim startRow As Integer
    startRow = 7
    
    Sheets(foglioSA_21_PID).Select
    'cancello i dati precedentemente acquisiti
    Range(startRow & ":" & numeroRigheDaAnalizzare).Delete
    Call intestazioneSheetsVDC(True)
    Range("H2").ClearContents
    Range("G4").ClearContents

End Sub
Sub DETTAGLIO_COSTO_ORARIO(rigaDaRibaltare As Integer)
    
    Sheets(foglioDETTAGLIO_COSTO_ORARIO).Select
    
    Dim startRow As Integer
    startRow = 5
    
    'popolo le righe relative
    startRow = Last_Real_Empty_Row(1, foglioDETTAGLIO_COSTO_ORARIO)
    
    Range("A" & startRow).Value = "=" & startSheet & "E" & rigaDaRibaltare
    Range("B" & startRow).Value = "=" & startSheet & "G" & rigaDaRibaltare
    
    Range("C" & startRow).Value = "=" & startSheet & "J" & rigaDaRibaltare
    Range("D" & startRow).Value = "=" & startSheet & "K" & rigaDaRibaltare
    Range("E" & startRow).Value = "=" & startSheet & "L" & rigaDaRibaltare
    Range("F" & startRow).Value = "=" & startSheet & "M" & rigaDaRibaltare
    Range("G" & startRow).Value = "=" & startSheet & "N" & rigaDaRibaltare
    Range("H" & startRow).Value = "=" & startSheet & "O" & rigaDaRibaltare
    Range("I" & startRow).Value = "=" & startSheet & "P" & rigaDaRibaltare
    Range("J" & startRow).Value = "=" & startSheet & "Q" & rigaDaRibaltare
    Range("K" & startRow).Value = "=" & startSheet & "R" & rigaDaRibaltare
    
    Range("L" & startRow).Value = "=" & startSheet & "B" & rigaDaRibaltare
    Range("M" & startRow).Value = "=" & startSheet & "C" & rigaDaRibaltare
    Range("C" & startRow & ":H" & startRow & ",J" & startRow).NumberFormat = FORMATO_DECIMALE
    Columns("A:M").EntireColumn.AutoFit
    
    
    Call disegna_griglia("A" & startRow & ":M" & startRow)

End Sub
Sub svuotaDETTAGLIO_COSTO_ORARIO()
    Dim startRow As Integer
    startRow = 5
    
    Sheets(foglioDETTAGLIO_COSTO_ORARIO).Select
    'cancello i dati precedentemente acquisiti
    Range(startRow & ":" & numeroRigheDaAnalizzare).Delete

End Sub

Sub RA_11_PND(rigaDaRibaltare As Integer)
    Sheets(foglioRA_11_PND).Select

    'popolo l'intestazione
    Call intestazioneSheetsVDC(False)
    Dim startRow As Integer
    startRow = 7

    'popolo le righe relative
    startRow = Last_Real_Empty_Row(1, foglioRA_11_PND)

    Range("A" & startRow).Value = "=" & startSheet & "E" & rigaDaRibaltare
    Range("B" & startRow).Value = "=" & startSheet & "B" & rigaDaRibaltare
    Range("C" & startRow).Value = "=" & startSheet & "F" & rigaDaRibaltare
    Range("D" & startRow).Value = "=" & startSheet & "G" & rigaDaRibaltare
    Range("E" & startRow).Value = "=" & startSheet & "S" & rigaDaRibaltare
    Range("E" & startRow).NumberFormat = FORMATO_DATA
    Range("F" & startRow).Value = "=" & startSheet & "H" & rigaDaRibaltare
    Range("G" & startRow).Value = "=" & startSheet & "I" & rigaDaRibaltare
    Range("G" & startRow).NumberFormat = FORMATO_DECIMALE
    Range("H" & startRow).Value = "=" & startSheet & "AQ" & rigaDaRibaltare
    Range("H" & startRow).NumberFormat = FORMATO_DECIMALE

    'cnr e banca
'    Range("I" & startRow).Value = "=" & startSheet & "AS" & rigaDaRibaltare
'    Range("J" & startRow).Value = "=" & startSheet & "AT" & rigaDaRibaltare
'    Range("K" & startRow).Value = "=" & startSheet & "AU" & rigaDaRibaltare
'    Range("L" & startRow).Value = "=" & startSheet & "AV" & rigaDaRibaltare
'    Range("M" & startRow).Value = "=" & startSheet & "AW" & rigaDaRibaltare

    Call disegna_griglia("A" & startRow & ":H" & startRow)

    Range("H2").Value = "=sum(H7:H" & startRow & ")"
    Range("H2").NumberFormat = FORMATO_DECIMALE
    
    Range("G4").Value = "=sum(F7:F" & startRow & ")"
    Range("G4").NumberFormat = FORMATO_DECIMALE

    Call aggiungiImportoSede(Range("B" & startRow).Value, "RA11_PND", Range("H" & startRow).Value)
    Call aggiungiImportoStralci("RA11_PND", rigaDaRibaltare)
    
    Columns("A:H").EntireColumn.AutoFit
    
End Sub
Sub svuotaRA_11_PND()
    Dim startRow As Integer
    startRow = 7
    
    Sheets(foglioRA_11_PND).Select
    'cancello i dati precedentemente acquisiti
    Range(startRow & ":" & numeroRigheDaAnalizzare).Delete
    Call intestazioneSheetsVDC(True)
    Range("H2").ClearContents
    Range("G4").ClearContents
    
End Sub

Sub SA_21_PND(rigaDaRibaltare As Integer)
    Sheets(foglioSA_21_PND).Select

    'popolo l'intestazione
    Call intestazioneSheetsVDC(False)
    
    Dim startRow As Integer
    startRow = 7

    'popolo le righe relative
    startRow = Last_Real_Empty_Row(1, foglioSA_21_PND)

    Range("A" & startRow).Value = "=" & startSheet & "E" & rigaDaRibaltare
    Range("B" & startRow).Value = "=" & startSheet & "B" & rigaDaRibaltare
    Range("C" & startRow).Value = "=" & startSheet & "F" & rigaDaRibaltare
    Range("D" & startRow).Value = "=" & startSheet & "G" & rigaDaRibaltare
    Range("E" & startRow).Value = "=" & startSheet & "S" & rigaDaRibaltare
    Range("E" & startRow).NumberFormat = FORMATO_DATA
    Range("F" & startRow).Value = "=" & startSheet & "H" & rigaDaRibaltare
    Range("G" & startRow).Value = "=" & startSheet & "I" & rigaDaRibaltare
    Range("G" & startRow).NumberFormat = FORMATO_DECIMALE
    Range("H" & startRow).Value = "=" & startSheet & "AQ" & rigaDaRibaltare
    Range("H" & startRow).NumberFormat = FORMATO_DECIMALE
    'cnr e banca
    'Range("I" & startRow).Value = "=" & startSheet & "AS" & rigaDaRibaltare
    'Range("J" & startRow).Value = "=" & startSheet & "AT" & rigaDaRibaltare
    'Range("K" & startRow).Value = "=" & startSheet & "AU" & rigaDaRibaltare
    'Range("L" & startRow).Value = "=" & startSheet & "AV" & rigaDaRibaltare
    'Range("M" & startRow).Value = "=" & startSheet & "AW" & rigaDaRibaltare

    Call disegna_griglia("A" & startRow & ":H" & startRow)

    Range("H2").Value = "=sum(H7:H" & startRow & ")"
    Range("H2").NumberFormat = FORMATO_DECIMALE
    
    Range("G4").Value = "=sum(F7:F" & startRow & ")"
    Range("G4").NumberFormat = FORMATO_DECIMALE
    
    Call aggiungiImportoSede(Range("B" & startRow).Value, "SA21_PND", Range("H" & startRow).Value)
    Call aggiungiImportoStralci("SA21_PND", rigaDaRibaltare)
    
    Columns("A:H").EntireColumn.AutoFit
    
End Sub
Sub svuotaSA_21_PND()
    Dim startRow As Integer
    startRow = 7
    
    Sheets(foglioSA_21_PND).Select
    'cancello i dati precedentemente acquisiti
    Range(startRow & ":" & numeroRigheDaAnalizzare).Delete
    Call intestazioneSheetsVDC(True)
    Range("H2").ClearContents
    Range("G4").ClearContents
    
End Sub

Sub RA_13_ATT(rigaDaRibaltare As Integer)
    Sheets(foglioRA_13_ATT).Select

    'popolo l'intestazione
    Call intestazioneSheetsVDC(False)
    
    Dim startRow As Integer
    startRow = 7

    'popolo le righe relative
    startRow = Last_Real_Empty_Row(1, foglioRA_13_ATT)

    Range("A" & startRow).Value = "=" & startSheet & "D" & rigaDaRibaltare
    Range("B" & startRow).Value = "=" & startSheet & "B" & rigaDaRibaltare
    Range("C" & startRow).Value = "=" & startSheet & "T" & rigaDaRibaltare
    Range("D" & startRow).Value = "=" & startSheet & "U" & rigaDaRibaltare
    Range("E" & startRow).Value = "=" & startSheet & "V" & rigaDaRibaltare
    Range("F" & startRow).Value = "=" & startSheet & "W" & rigaDaRibaltare
    Range("F" & startRow).NumberFormat = FORMATO_DATA
    Range("G" & startRow).Value = "=" & startSheet & "S" & rigaDaRibaltare
    Range("G" & startRow).NumberFormat = FORMATO_DATA
    Range("H" & startRow).Value = "=" & startSheet & "AP" & rigaDaRibaltare
    Range("H" & startRow).NumberFormat = FORMATO_DECIMALE
    Select Case Range(startSheet & "X" & rigaDaRibaltare).Value
        Case "beni ammortizzabili"
            Range("I" & startRow).Value = "=" & startSheet & "AD" & rigaDaRibaltare
        Case "beni non ammortizzabili"
            Range("I" & startRow).Value = "=" & startSheet & "AJ" & rigaDaRibaltare
        Case "beni in leasing"
            Range("I" & startRow).Value = "=" & startSheet & "AG" & rigaDaRibaltare
        Case Else
            Range("I" & startRow).Value = ""
    End Select
    Range("J" & startRow).Value = "=" & startSheet & "AQ" & rigaDaRibaltare
    Range("J" & startRow).NumberFormat = FORMATO_DECIMALE
    'cnr e banca
    'Range("K" & startRow).Value = "=" & startSheet & "AS" & rigaDaRibaltare
    'Range("L" & startRow).Value = "=" & startSheet & "AT" & rigaDaRibaltare
    'Range("M" & startRow).Value = "=" & startSheet & "AU" & rigaDaRibaltare
    'Range("N" & startRow).Value = "=" & startSheet & "AV" & rigaDaRibaltare
    'Range("O" & startRow).Value = "=" & startSheet & "AW" & rigaDaRibaltare

    Call disegna_griglia("A" & startRow & ":J" & startRow)

    Range("I2").Value = "=sum(J7:J" & startRow & ")"
    Range("I2").NumberFormat = FORMATO_DECIMALE
    
    Call aggiungiImportoSede(Range("B" & startRow).Value, "RA13_ATT", Range("J" & startRow).Value)
    Call aggiungiImportoStralci("RA13_ATT", rigaDaRibaltare)
    
    Columns("A:J").EntireColumn.AutoFit
    
End Sub
Sub svuotaRA_13_ATT()
    Dim startRow As Integer
    startRow = 7
    
    Sheets(foglioRA_13_ATT).Select
    'cancello i dati precedentemente acquisiti
    Range(startRow & ":" & numeroRigheDaAnalizzare).Delete
    Call intestazioneSheetsVDC(True)
    Range("I2").ClearContents
    
End Sub

Sub SA_23_ATT(rigaDaRibaltare As Integer)
    Sheets(foglioSA_23_ATT).Select

    'popolo l'intestazione
    Call intestazioneSheetsVDC(False)
    
    Dim startRow As Integer
    startRow = 7

    'popolo le righe relative
    startRow = Last_Real_Empty_Row(1, foglioSA_23_ATT)

    Range("A" & startRow).Value = "=" & startSheet & "D" & rigaDaRibaltare
    Range("B" & startRow).Value = "=" & startSheet & "B" & rigaDaRibaltare
    Range("C" & startRow).Value = "=" & startSheet & "T" & rigaDaRibaltare
    Range("D" & startRow).Value = "=" & startSheet & "U" & rigaDaRibaltare
    Range("E" & startRow).Value = "=" & startSheet & "V" & rigaDaRibaltare
    Range("F" & startRow).Value = "=" & startSheet & "W" & rigaDaRibaltare
    Range("F" & startRow).NumberFormat = FORMATO_DATA
    Range("G" & startRow).Value = "=" & startSheet & "S" & rigaDaRibaltare
    Range("G" & startRow).NumberFormat = FORMATO_DATA
    Range("H" & startRow).Value = "=" & startSheet & "AP" & rigaDaRibaltare
    Range("H" & startRow).NumberFormat = FORMATO_DECIMALE
    Select Case Range(startSheet & "X" & rigaDaRibaltare).Value
        Case "beni ammortizzabili"
            Range("I" & startRow).Value = "=" & startSheet & "AD" & rigaDaRibaltare
        Case "beni non ammortizzabili"
            Range("I" & startRow).Value = "=" & startSheet & "AJ" & rigaDaRibaltare
        Case "beni in leasing"
            Range("I" & startRow).Value = "=" & startSheet & "AG" & rigaDaRibaltare
        Case Else
            Range("I" & startRow).Value = ""
    End Select
    Range("J" & startRow).Value = "=" & startSheet & "AQ" & rigaDaRibaltare
    Range("J" & startRow).NumberFormat = FORMATO_DECIMALE
    
    'cnr e banca
    'Range("K" & startRow).Value = "=" & startSheet & "AS" & rigaDaRibaltare
    'Range("L" & startRow).Value = "=" & startSheet & "AT" & rigaDaRibaltare
    'Range("M" & startRow).Value = "=" & startSheet & "AU" & rigaDaRibaltare
    'Range("N" & startRow).Value = "=" & startSheet & "AV" & rigaDaRibaltare
    'Range("O" & startRow).Value = "=" & startSheet & "AW" & rigaDaRibaltare

    Call disegna_griglia("A" & startRow & ":J" & startRow)

    Range("I2").Value = "=sum(J7:J" & startRow & ")"
    Range("I2").NumberFormat = FORMATO_DECIMALE
    
    Call aggiungiImportoSede(Range("B" & startRow).Value, "SA23_ATT", Range("J" & startRow).Value)
    Call aggiungiImportoStralci("SA23_ATT", rigaDaRibaltare)
    
    Columns("A:J").EntireColumn.AutoFit
    
End Sub
Sub svuotaSA_23_ATT()
    Dim startRow As Integer
    startRow = 7
    
    Sheets(foglioSA_23_ATT).Select
    'cancello i dati precedentemente acquisiti
    Range(startRow & ":" & numeroRigheDaAnalizzare).Delete
    Call intestazioneSheetsVDC(True)
    Range("I2").ClearContents
End Sub

Sub DETTAGLIO_ATTREZZATURE(rigaDaRibaltare As Integer)
    Sheets(foglioDETTAGLIO_ATTREZZATURE).Select
    
    Dim startRow As Integer
    startRow = 6
    
    'popolo le righe relative
    startRow = Last_Real_Empty_Row(1, foglioDETTAGLIO_ATTREZZATURE)
    
    Range("A" & startRow).Value = "=" & startSheet & "D" & rigaDaRibaltare
    Range("B" & startRow).Value = "=" & startSheet & "X" & rigaDaRibaltare
    Range("C" & startRow).Value = "=" & startSheet & "B" & rigaDaRibaltare
    Range("D" & startRow).Value = "=" & startSheet & "C" & rigaDaRibaltare
    Range("E" & startRow).Value = "=" & startSheet & "T" & rigaDaRibaltare
    Range("F" & startRow).Value = "=" & startSheet & "V" & rigaDaRibaltare
    Range("G" & startRow).Value = "=" & startSheet & "W" & rigaDaRibaltare
    Range("G" & startRow).NumberFormat = FORMATO_DATA
    Range("H" & startRow).Value = "=" & startSheet & "S" & rigaDaRibaltare
    Range("H" & startRow).NumberFormat = FORMATO_DATA
    Select Case Range(startSheet & "X" & rigaDaRibaltare).Value
            Case "beni ammortizzabili"
                Range("I" & startRow).Value = "=" & startSheet & "Y" & rigaDaRibaltare
                Range("I" & startRow).NumberFormat = FORMATO_DATA
                Range("J" & startRow).Value = "=" & startSheet & "Z" & rigaDaRibaltare
                Range("J" & startRow).NumberFormat = FORMATO_DECIMALE
                Range("K" & startRow).Value = "=" & startSheet & "AA" & rigaDaRibaltare
                Range("K" & startRow).NumberFormat = FORMATO_PERCENTUALE
                Range("L" & startRow).Value = "=" & startSheet & "AB" & rigaDaRibaltare
                Range("M" & startRow).Value = "=" & startSheet & "AC" & rigaDaRibaltare
                Range("N" & startRow).Value = "=" & startSheet & "AD" & rigaDaRibaltare
                Range("N" & startRow).NumberFormat = FORMATO_PERCENTUALE
                Range("O" & startRow).Value = "=" & startSheet & "AE" & rigaDaRibaltare
                Range("O" & startRow).NumberFormat = FORMATO_DECIMALE
                
            Case "beni non ammortizzabili"
                Range("S" & startRow).Value = "=" & startSheet & "AI" & rigaDaRibaltare
                Range("S" & startRow).NumberFormat = FORMATO_DECIMALE
                Range("T" & startRow).Value = "=" & startSheet & "AJ" & rigaDaRibaltare
                Range("T" & startRow).NumberFormat = FORMATO_PERCENTUALE
                Range("U" & startRow).Value = "=" & startSheet & "AK" & rigaDaRibaltare
                Range("U" & startRow).NumberFormat = FORMATO_DECIMALE
                
            Case "beni in leasing"
                Range("P" & startRow).Value = "=" & startSheet & "AF" & rigaDaRibaltare
                Range("P" & startRow).NumberFormat = FORMATO_DECIMALE
                Range("Q" & startRow).Value = "=" & startSheet & "AG" & rigaDaRibaltare
                Range("Q" & startRow).NumberFormat = FORMATO_PERCENTUALE
                Range("R" & startRow).Value = "=" & startSheet & "AH" & rigaDaRibaltare
                Range("R" & startRow).NumberFormat = FORMATO_DECIMALE
            Case Else
                
        End Select
        
    Call disegna_griglia("A" & startRow & ":U" & startRow)
    
    Columns("A:U").EntireColumn.AutoFit
    
End Sub

Sub svuotaDETTAGLIO_ATTREZZATURE()
    Dim startRow As Integer
    startRow = 6
    
    Sheets(foglioDETTAGLIO_ATTREZZATURE).Select
    'cancello i dati precedentemente acquisiti
    Range(startRow & ":" & numeroRigheDaAnalizzare).Delete
End Sub

Sub RA_14_CON(rigaDaRibaltare As Integer)
    Sheets(foglioRA_14_CON).Select

    'popolo l'intestazione
    Call intestazioneSheetsVDC(False)
    
    Dim startRow As Integer
    startRow = 7

    'popolo le righe relative
    startRow = Last_Real_Empty_Row(1, foglioRA_14_CON)

    Range("A" & startRow).Value = "=" & startSheet & "D" & rigaDaRibaltare
    Range("B" & startRow).Value = "=" & startSheet & "B" & rigaDaRibaltare
    Range("C" & startRow).Value = "=" & startSheet & "T" & rigaDaRibaltare
    Range("D" & startRow).Value = "=" & startSheet & "V" & rigaDaRibaltare
    Range("E" & startRow).Value = "=" & startSheet & "W" & rigaDaRibaltare
    Range("E" & startRow).NumberFormat = FORMATO_DATA
    Range("F" & startRow).Value = "=" & startSheet & "S" & rigaDaRibaltare
    Range("F" & startRow).NumberFormat = FORMATO_DATA
    Range("G" & startRow).Value = "=" & startSheet & "AQ" & rigaDaRibaltare
    Range("G" & startRow).NumberFormat = FORMATO_DECIMALE
    
    'cnr e banca
    'Range("H" & startRow).Value = "=" & startSheet & "AS" & rigaDaRibaltare
    'Range("I" & startRow).Value = "=" & startSheet & "AT" & rigaDaRibaltare
    'Range("J" & startRow).Value = "=" & startSheet & "AU" & rigaDaRibaltare
    'Range("K" & startRow).Value = "=" & startSheet & "AV" & rigaDaRibaltare
    'Range("L" & startRow).Value = "=" & startSheet & "AW" & rigaDaRibaltare

    Call disegna_griglia("A" & startRow & ":G" & startRow)

    Range("H2").Value = "=sum(G7:G" & startRow & ")"
    Range("H2").NumberFormat = FORMATO_DECIMALE
    
    Call aggiungiImportoSede(Range("B" & startRow).Value, "RA14_CON", Range("G" & startRow).Value)
    Call aggiungiImportoStralci("RA14_CON", rigaDaRibaltare)
    
    Columns("A:H").EntireColumn.AutoFit
    
End Sub

Sub svuotaRA_14_CON()
    Dim startRow As Integer
    startRow = 7
    
    Sheets(foglioRA_14_CON).Select
    'cancello i dati precedentemente acquisiti
    Range(startRow & ":" & numeroRigheDaAnalizzare).Delete
    Call intestazioneSheetsVDC(True)
    Range("H2").ClearContents
End Sub

Sub SA_24_CON(rigaDaRibaltare As Integer)
    Sheets(foglioSA_24_CON).Select

    'popolo l'intestazione
    Call intestazioneSheetsVDC(False)

    Dim startRow As Integer
    startRow = 7

    'popolo le righe relative
    startRow = Last_Real_Empty_Row(1, foglioSA_24_CON)

    Range("A" & startRow).Value = "=" & startSheet & "D" & rigaDaRibaltare
    Range("B" & startRow).Value = "=" & startSheet & "B" & rigaDaRibaltare
    Range("C" & startRow).Value = "=" & startSheet & "T" & rigaDaRibaltare
    Range("D" & startRow).Value = "=" & startSheet & "V" & rigaDaRibaltare
    Range("E" & startRow).Value = "=" & startSheet & "W" & rigaDaRibaltare
    Range("E" & startRow).NumberFormat = FORMATO_DATA
    Range("F" & startRow).Value = "=" & startSheet & "S" & rigaDaRibaltare
    Range("F" & startRow).NumberFormat = FORMATO_DATA
    Range("G" & startRow).Value = "=" & startSheet & "AQ" & rigaDaRibaltare
    Range("G" & startRow).NumberFormat = FORMATO_DECIMALE
    
    'cnr e banca
    'Range("H" & startRow).Value = "=" & startSheet & "AS" & rigaDaRibaltare
    'Range("I" & startRow).Value = "=" & startSheet & "AT" & rigaDaRibaltare
    'Range("J" & startRow).Value = "=" & startSheet & "AU" & rigaDaRibaltare
    'Range("K" & startRow).Value = "=" & startSheet & "AV" & rigaDaRibaltare
    'Range("L" & startRow).Value = "=" & startSheet & "AW" & rigaDaRibaltare

    Call disegna_griglia("A" & startRow & ":G" & startRow)

    Range("H2").Value = "=sum(G7:G" & startRow & ")"
    Range("H2").NumberFormat = FORMATO_DECIMALE
    
    Call aggiungiImportoSede(Range("B" & startRow).Value, "SA24_CON", Range("G" & startRow).Value)
    Call aggiungiImportoStralci("SA24_CON", rigaDaRibaltare)
    
    Columns("A:H").EntireColumn.AutoFit
    
End Sub

Sub svuotaSA_24_CON()
    Dim startRow As Integer
    startRow = 7
    
    Sheets(foglioSA_24_CON).Select
    'cancello i dati precedentemente acquisiti
    Range(startRow & ":" & numeroRigheDaAnalizzare).Delete
    Call intestazioneSheetsVDC(True)
    Range("H2").ClearContents
End Sub

Sub RA_15_MAT(rigaDaRibaltare As Integer)
    Sheets(foglioRA_15_MAT).Select

    'popolo l'intestazione
    Call intestazioneSheetsVDC(False)
    Dim startRow As Integer
    startRow = 7

    'popolo le righe relative
    startRow = Last_Real_Empty_Row(1, foglioRA_15_MAT)

    Range("A" & startRow).Value = "=" & startSheet & "D" & rigaDaRibaltare
    Range("B" & startRow).Value = "=" & startSheet & "B" & rigaDaRibaltare
    Range("C" & startRow).Value = "=" & startSheet & "T" & rigaDaRibaltare
    Range("D" & startRow).Value = "=" & startSheet & "V" & rigaDaRibaltare
    Range("E" & startRow).Value = "=" & startSheet & "W" & rigaDaRibaltare
    Range("E" & startRow).NumberFormat = FORMATO_DATA
    Range("F" & startRow).Value = "=" & startSheet & "S" & rigaDaRibaltare
    Range("F" & startRow).NumberFormat = FORMATO_DATA
    Range("G" & startRow).Value = "=" & startSheet & "AQ" & rigaDaRibaltare
    Range("G" & startRow).NumberFormat = FORMATO_DECIMALE
    
    'cnr e banca
    'Range("H" & startRow).Value = "=" & startSheet & "AS" & rigaDaRibaltare
    'Range("I" & startRow).Value = "=" & startSheet & "AT" & rigaDaRibaltare
    'Range("J" & startRow).Value = "=" & startSheet & "AU" & rigaDaRibaltare
    'Range("K" & startRow).Value = "=" & startSheet & "AV" & rigaDaRibaltare
    'Range("L" & startRow).Value = "=" & startSheet & "AW" & rigaDaRibaltare

    Call disegna_griglia("A" & startRow & ":G" & startRow)

    Range("H2").Value = "=sum(G7:G" & startRow & ")"
    Range("H2").NumberFormat = FORMATO_DECIMALE
    
    Call aggiungiImportoSede(Range("B" & startRow).Value, "RA15_MAT", Range("G" & startRow).Value)
    Call aggiungiImportoStralci("RA15_MAT", rigaDaRibaltare)
    
    Columns("A:H").EntireColumn.AutoFit
    
End Sub

Sub svuotaRA_15_MAT()
    Dim startRow As Integer
    startRow = 7
    
    Sheets(foglioRA_15_MAT).Select
    'cancello i dati precedentemente acquisiti
    Range(startRow & ":" & numeroRigheDaAnalizzare).Delete
    Call intestazioneSheetsVDC(True)
    Range("H2").ClearContents
End Sub

Sub RA_15_MAG(rigaDaRibaltare As Integer)
    Sheets(foglioRA_15_MAG).Select

    'popolo l'intestazione
    Call intestazioneSheetsVDC(False)
    
    Dim startRow As Integer
    startRow = 7

    'popolo le righe relative
    startRow = Last_Real_Empty_Row(1, foglioRA_15_MAG)

    Range("A" & startRow).Value = "=" & startSheet & "D" & rigaDaRibaltare
    Range("B" & startRow).Value = "=" & startSheet & "B" & rigaDaRibaltare
    Range("C" & startRow).Value = "=" & startSheet & "AM" & rigaDaRibaltare
    Range("C" & startRow).NumberFormat = FORMATO_DATA
    Range("D" & startRow).Value = "=" & startSheet & "AN" & rigaDaRibaltare
    Range("E" & startRow).Value = "=" & startSheet & "AO" & rigaDaRibaltare
    Range("F" & startRow).Value = "=" & startSheet & "U" & rigaDaRibaltare
    Range("G" & startRow).Value = "=" & startSheet & "AQ" & rigaDaRibaltare
    Range("G" & startRow).NumberFormat = FORMATO_DECIMALE
    
    'cnr e banca
    'Range("H" & startRow).Value = "=" & startSheet & "AS" & rigaDaRibaltare
    'Range("I" & startRow).Value = "=" & startSheet & "AT" & rigaDaRibaltare
    'Range("J" & startRow).Value = "=" & startSheet & "AU" & rigaDaRibaltare
    'Range("K" & startRow).Value = "=" & startSheet & "AV" & rigaDaRibaltare
    'Range("L" & startRow).Value = "=" & startSheet & "AW" & rigaDaRibaltare

    Call disegna_griglia("A" & startRow & ":G" & startRow)

    Range("H2").Value = "=sum(G7:G" & startRow & ")"
    Range("H2").NumberFormat = FORMATO_DECIMALE
    
    Call aggiungiImportoSede(Range("B" & startRow).Value, "RA15_MAG", Range("G" & startRow).Value)
    Call aggiungiImportoStralci("RA15_MAG", rigaDaRibaltare)
    
    Columns("A:H").EntireColumn.AutoFit
    
End Sub
Sub svuotaRA_15_MAG()
    Dim startRow As Integer
    startRow = 7
    
    Sheets(foglioRA_15_MAG).Select
    'cancello i dati precedentemente acquisiti
    Range(startRow & ":" & numeroRigheDaAnalizzare).Delete
    Call intestazioneSheetsVDC(True)
    Range("H2").ClearContents
End Sub

Sub SA_25_MAT(rigaDaRibaltare As Integer)
    Sheets(foglioSA_25_MAT).Select

    'popolo l'intestazione
    Call intestazioneSheetsVDC(False)

    Dim startRow As Integer
    startRow = 7

    'popolo le righe relative
    startRow = Last_Real_Empty_Row(1, foglioSA_25_MAT)

    Range("A" & startRow).Value = "=" & startSheet & "D" & rigaDaRibaltare
    Range("B" & startRow).Value = "=" & startSheet & "B" & rigaDaRibaltare
    Range("C" & startRow).Value = "=" & startSheet & "T" & rigaDaRibaltare
    Range("D" & startRow).Value = "=" & startSheet & "V" & rigaDaRibaltare
    Range("E" & startRow).Value = "=" & startSheet & "W" & rigaDaRibaltare
    Range("E" & startRow).NumberFormat = FORMATO_DATA
    Range("F" & startRow).Value = "=" & startSheet & "S" & rigaDaRibaltare
    Range("F" & startRow).NumberFormat = FORMATO_DATA
    Range("G" & startRow).Value = "=" & startSheet & "AQ" & rigaDaRibaltare
    Range("G" & startRow).NumberFormat = FORMATO_DECIMALE
    
    'cnr e banca
    'Range("H" & startRow).Value = "=" & startSheet & "AS" & rigaDaRibaltare
    'Range("I" & startRow).Value = "=" & startSheet & "AT" & rigaDaRibaltare
    ''Range("J" & startRow).Value = "=" & startSheet & "AU" & rigaDaRibaltare
    'Range("K" & startRow).Value = "=" & startSheet & "AV" & rigaDaRibaltare
    'Range("L" & startRow).Value = "=" & startSheet & "AW" & rigaDaRibaltare

    Call disegna_griglia("A" & startRow & ":G" & startRow)

    Range("H2").Value = "=sum(G7:G" & startRow & ")"
    Range("H2").NumberFormat = FORMATO_DECIMALE
    
    Call aggiungiImportoSede(Range("B" & startRow).Value, "SA25_MAT", Range("G" & startRow).Value)
    Call aggiungiImportoStralci("SA25_MAT", rigaDaRibaltare)
    
    Columns("A:H").EntireColumn.AutoFit
    
End Sub

Sub svuotaSA_25_MAT()
    Dim startRow As Integer
    startRow = 7
    
    Sheets(foglioSA_25_MAT).Select
    'cancello i dati precedentemente acquisiti
    Range(startRow & ":" & numeroRigheDaAnalizzare).Delete
    Call intestazioneSheetsVDC(True)
    Range("H2").ClearContents
End Sub

Sub SA_25_MAG(rigaDaRibaltare As Integer)
    Sheets(foglioSA_25_MAG).Select

    'popolo l'intestazione
    Call intestazioneSheetsVDC(False)

    Dim startRow As Integer
    startRow = 7

    'popolo le righe relative
    startRow = Last_Real_Empty_Row(1, foglioSA_25_MAG)

    Range("A" & startRow).Value = "=" & startSheet & "D" & rigaDaRibaltare
    Range("B" & startRow).Value = "=" & startSheet & "B" & rigaDaRibaltare
    Range("C" & startRow).Value = "=" & startSheet & "AM" & rigaDaRibaltare
    Range("C" & startRow).NumberFormat = FORMATO_DATA
    Range("D" & startRow).Value = "=" & startSheet & "AN" & rigaDaRibaltare
    Range("E" & startRow).Value = "=" & startSheet & "AO" & rigaDaRibaltare
    Range("F" & startRow).Value = "=" & startSheet & "U" & rigaDaRibaltare
    Range("G" & startRow).Value = "=" & startSheet & "AQ" & rigaDaRibaltare
    Range("G" & startRow).NumberFormat = FORMATO_DECIMALE
    
    'cnr e banca
    'Range("H" & startRow).Value = "=" & startSheet & "AS" & rigaDaRibaltare
    'Range("I" & startRow).Value = "=" & startSheet & "AT" & rigaDaRibaltare
    'Range("J" & startRow).Value = "=" & startSheet & "AU" & rigaDaRibaltare
    'Range("K" & startRow).Value = "=" & startSheet & "AV" & rigaDaRibaltare
    'Range("L" & startRow).Value = "=" & startSheet & "AW" & rigaDaRibaltare

    Call disegna_griglia("A" & startRow & ":G" & startRow)

    Range("H2").Value = "=sum(G7:G" & startRow & ")"
    Range("H2").NumberFormat = FORMATO_DECIMALE
    
    Call aggiungiImportoSede(Range("B" & startRow).Value, "SA25_MAG", Range("G" & startRow).Value)
    Call aggiungiImportoStralci("SA25_MAG", rigaDaRibaltare)
    
    Columns("A:H").EntireColumn.AutoFit
    
End Sub
Sub svuotaSA_25_MAG()
    Dim startRow As Integer
    startRow = 7
    
    Sheets(foglioSA_25_MAG).Select
    'cancello i dati precedentemente acquisiti
    Range(startRow & ":" & numeroRigheDaAnalizzare).Delete
    Call intestazioneSheetsVDC(True)
    Range("H2").ClearContents
End Sub

Sub RA_16_BIMM(rigaDaRibaltare As Integer)
    Sheets(foglioRA_16_BIMM).Select

    'popolo l'intestazione
    Call intestazioneSheetsVDC(False)
    
    Dim startRow As Integer
    startRow = 7

    'popolo le righe relative
    startRow = Last_Real_Empty_Row(1, foglioRA_16_BIMM)

    Range("A" & startRow).Value = "=" & startSheet & "D" & rigaDaRibaltare
    Range("B" & startRow).Value = "=" & startSheet & "B" & rigaDaRibaltare
    Range("C" & startRow).Value = "=" & startSheet & "T" & rigaDaRibaltare
    Range("D" & startRow).Value = "=" & startSheet & "V" & rigaDaRibaltare
    Range("E" & startRow).Value = "=" & startSheet & "W" & rigaDaRibaltare
    Range("E" & startRow).NumberFormat = FORMATO_DATA
    Range("F" & startRow).Value = "=" & startSheet & "S" & rigaDaRibaltare
    Range("F" & startRow).NumberFormat = FORMATO_DATA
    Range("G" & startRow).Value = "=" & startSheet & "AQ" & rigaDaRibaltare
    Range("G" & startRow).NumberFormat = FORMATO_DECIMALE
    
    'cnr e banca
    'Range("H" & startRow).Value = "=" & startSheet & "AS" & rigaDaRibaltare
    'Range("I" & startRow).Value = "=" & startSheet & "AT" & rigaDaRibaltare
    'Range("J" & startRow).Value = "=" & startSheet & "AU" & rigaDaRibaltare
    'Range("K" & startRow).Value = "=" & startSheet & "AV" & rigaDaRibaltare
    'Range("L" & startRow).Value = "=" & startSheet & "AW" & rigaDaRibaltare

    Call disegna_griglia("A" & startRow & ":G" & startRow)

    Range("H2").Value = "=sum(G7:G" & startRow & ")"
    Range("H2").NumberFormat = FORMATO_DECIMALE
    
    Call aggiungiImportoSede(Range("B" & startRow).Value, "RA16_BIMM", Range("G" & startRow).Value)
    Call aggiungiImportoStralci("RA16_BIMM", rigaDaRibaltare)
    
    Columns("A:H").EntireColumn.AutoFit
    
End Sub

Sub svuotaRA_16_BIMM()
    Dim startRow As Integer
    startRow = 7
    
    Sheets(foglioRA_16_BIMM).Select
    'cancello i dati precedentemente acquisiti
    Range(startRow & ":" & numeroRigheDaAnalizzare).Delete
    Call intestazioneSheetsVDC(True)
    Range("H2").ClearContents
End Sub

Sub SA_26_BIMM(rigaDaRibaltare As Integer)
    Sheets(foglioSA_26_BIMM).Select

    'popolo l'intestazione
    Call intestazioneSheetsVDC(False)

    Dim startRow As Integer
    startRow = 7

    'popolo le righe relative
    startRow = Last_Real_Empty_Row(1, foglioSA_26_BIMM)

    Range("A" & startRow).Value = "=" & startSheet & "D" & rigaDaRibaltare
    Range("B" & startRow).Value = "=" & startSheet & "B" & rigaDaRibaltare
    Range("C" & startRow).Value = "=" & startSheet & "T" & rigaDaRibaltare
    Range("D" & startRow).Value = "=" & startSheet & "V" & rigaDaRibaltare
    Range("E" & startRow).Value = "=" & startSheet & "W" & rigaDaRibaltare
    Range("E" & startRow).NumberFormat = FORMATO_DATA
    Range("F" & startRow).Value = "=" & startSheet & "S" & rigaDaRibaltare
    Range("F" & startRow).NumberFormat = FORMATO_DATA
    Range("G" & startRow).Value = "=" & startSheet & "AQ" & rigaDaRibaltare
    Range("G" & startRow).NumberFormat = FORMATO_DECIMALE
    
    'cnr e banca
    'Range("H" & startRow).Value = "=" & startSheet & "AS" & rigaDaRibaltare
    'Range("I" & startRow).Value = "=" & startSheet & "AT" & rigaDaRibaltare
    'Range("J" & startRow).Value = "=" & startSheet & "AU" & rigaDaRibaltare
    'Range("K" & startRow).Value = "=" & startSheet & "AV" & rigaDaRibaltare
    'Range("L" & startRow).Value = "=" & startSheet & "AW" & rigaDaRibaltare

    Call disegna_griglia("A" & startRow & ":G" & startRow)

    Range("H2").Value = "=sum(G7:G" & startRow & ")"
    Range("H2").NumberFormat = FORMATO_DECIMALE
    
    Call aggiungiImportoSede(Range("B" & startRow).Value, "SA26_BIMM", Range("G" & startRow).Value)
    Call aggiungiImportoStralci("SA26_BIMM", rigaDaRibaltare)
    
    Columns("A:H").EntireColumn.AutoFit
    
End Sub

Sub svuotaSA_26_BIMM()
    Dim startRow As Integer
    startRow = 7
    
    Sheets(foglioSA_26_BIMM).Select
    'cancello i dati precedentemente acquisiti
    Range(startRow & ":" & numeroRigheDaAnalizzare).Delete
    Call intestazioneSheetsVDC(True)
    Range("H2").ClearContents
End Sub
Sub dd()
Call init_rend
Call svuotaFoglioDETTAGLIO(True)
End Sub
Sub svuotaFoglioDETTAGLIO(alsoInfoBando As Boolean)
    
    Sheets(foglioDETTAGLIO).Select
    
    ' *************************************************************
    ' INTESTAZIONE (Info riepilogative di progetto)
    ' *************************************************************
    Call foglioDettaglio_svuotaCelleEditabili
    If (alsoInfoBando) Then
        Call modificaBando("")
    End If
    
    ' reset voci di costo
    Call cancellaVDC
    
    
    
End Sub
Sub resetSchemaREND(alsoFoglioDettaglio As Boolean)
        Call svuotaRA_11_PID
        Call svuotaSA_21_PID
        
        Call svuotaDETTAGLIO_COSTO_ORARIO
        
        Call svuotaRA_11_PND
        Call svuotaSA_21_PND
        
        Call svuotaRA_13_ATT
        Call svuotaSA_23_ATT
        
        Call svuotaDETTAGLIO_ATTREZZATURE
        
        Call svuotaRA_14_CON
        Call svuotaSA_24_CON
        
        Call svuotaRA_15_MAT
        Call svuotaRA_15_MAG
        
        Call svuotaSA_25_MAT
        Call svuotaSA_25_MAG
        
        Call svuotaRA_16_BIMM
        Call svuotaSA_26_BIMM
        
        Call svuotaRiepilogo(True)
        
        Call svuotaQS(False, False)
        Call svuotaQS(True, False)
        Call svuotaQS(False, True)
            
        If (alsoFoglioDettaglio) Then
            Call svuotaFoglioDETTAGLIO(False)
        End If

End Sub

Sub formatta_QuadroSingolo(isCnr As Boolean, isBanca As Boolean)

    Dim lastCol As String
    
    If (isCnr) Then
        lastCol = "H"
    ElseIf (isBanca) Then
        lastCol = "H"
    Else
        lastCol = "J"
    End If

    ' ---------------------------------------------------
    ' formattazione
    
    'intestazione
    Range("A3,A5,B3:B6,D3,D6,F3:F6").Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = -0.0499893185216834
        .PatternTintAndShade = 0
    End With
    
    'Generic
    Range("B9:" & lastCol & "15, B17:" & lastCol & "24").Select
    With Selection
        .Interior.ColorIndex = xlNone
        .NumberFormat = FORMATO_DECIMALE
        .HorizontalAlignment = xlRight
        .VerticalAlignment = xlCenter
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .ShrinkToFit = False
        .MergeCells = False
    End With
    
    'Attivita Ricerca e Sviluppo
    Range("B8:" & lastCol & "8,B16:" & lastCol & "16").Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = -0.0499893185216834
        .PatternTintAndShade = 0
    End With
    Range("B15:" & lastCol & "15, B23:" & lastCol & "24").Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = -0.249977111117893
        .PatternTintAndShade = 0
    End With
End Sub

Sub QuadroSingolo(isCnr As Boolean, isBanca As Boolean)
    
    Dim importoSede1, importoSede2, importoSede3, importoSede4, importoTotale As Double
    Dim costoAmmissibileCnr, costoAmmissibileBanca, stralciTot, stralciCnr, stralciBanca  As Double
    Dim listaVDC(), splitvar, bvar, item, item2
    Dim numRigaTemp_sviluppo, numRigaTemp_ricerca As Integer
    Dim testoSedi As String
    Dim defSede1 As String
    Dim defSede2 As String
    Dim defSede3 As String
    Dim defSede4 As String
    Dim defSede1_label As String
    Dim defSede2_label As String
    Dim defSede3_label As String
    Dim defSede4_label As String
    
    testoSedi = "Spese rendicontate sede "
    numRigaTemp_ricerca = QS_numRigaStart_ricerca
    
    If (isCnr) Then
        Sheets(foglioQS_CNR).Select
        Call svuotaQS(True, False)
        
        defSede1 = "QS_CNR_SEDE1"
        defSede2 = "QS_CNR_SEDE2"
        defSede3 = "QS_CNR_SEDE3"
        defSede4 = "QS_CNR_SEDE4"
        defSede1_label = "QS_CNR_SPESE_RENDICONTATE_SEDE1_LABEL"
        defSede2_label = "QS_CNR_SPESE_RENDICONTATE_SEDE2_LABEL"
        defSede3_label = "QS_CNR_SPESE_RENDICONTATE_SEDE3_LABEL"
        defSede4_label = "QS_CNR_SPESE_RENDICONTATE_SEDE4_LABEL"
        
    ElseIf (isBanca) Then
        Sheets(foglioQS_BANCA).Select
        Call svuotaQS(False, True)
        
        defSede1 = "QS_BANCA_SEDE1"
        defSede2 = "QS_BANCA_SEDE2"
        defSede3 = "QS_BANCA_SEDE3"
        defSede4 = "QS_BANCA_SEDE4"
        defSede1_label = "QS_BANCA_SPESE_RENDICONTATE_SEDE1_LABEL"
        defSede2_label = "QS_BANCA_SPESE_RENDICONTATE_SEDE2_LABEL"
        defSede3_label = "QS_BANCA_SPESE_RENDICONTATE_SEDE3_LABEL"
        defSede4_label = "QS_BANCA_SPESE_RENDICONTATE_SEDE4_LABEL"
        
    Else
        Sheets(foglioQS).Select
        Call svuotaQS(False, False)
        
        defSede1 = "QS_SEDE1"
        defSede2 = "QS_SEDE2"
        defSede3 = "QS_SEDE3"
        defSede4 = "QS_SEDE4"
        defSede1_label = "QS_SPESE_RENDICONTATE_SEDE1_LABEL"
        defSede2_label = "QS_SPESE_RENDICONTATE_SEDE2_LABEL"
        defSede3_label = "QS_SPESE_RENDICONTATE_SEDE3_LABEL"
        defSede4_label = "QS_SPESE_RENDICONTATE_SEDE4_LABEL"
        
    End If
    
    Call formatta_QuadroSingolo(isCnr, isBanca)
    
    ' ---------------------------------------------------------------------------------
    'popolo l'intestazione
    ' ---------------------------------------------------------------------------------
    Range("A4").NumberFormat = "General"
    Range("A4").Value = "=" & getAddressByName("DETT_INFO_BANDO")
    Range("A6").NumberFormat = "General"
    Range("A6").Value = "=" & getAddressByName("DETT_INFO_DENOM")
    Range("C4").Value = "=" & getAddressByName("DETT_INFO_NUM_PROGETTO")
    Range("C3").NumberFormat = FORMATO_DATA
    Range("C3").Value = "=" & getAddressByName("DETT_INFO_COSTI_DAL")
    Range("E3").NumberFormat = FORMATO_DATA
    Range("E3").Value = "=" & getAddressByName("DETT_INFO_COSTI_AL")
    Range("E6").Value = "=" & getAddressByName("DETT_INFO_PERC_SPESE_GENERALI")
    Range("C5").Value = "=" & getAddressByName("DETT_INFO_SAL")
    'Range("C6").Value = "=" & getAddressByName("DETT_INFO_DECRETO_NUMERO")
    Range("C6").NumberFormat = FORMATO_DATA
    Range("C6").Value = "=" & getAddressByName("DETT_INFO_DECRETO_DATA")
    
    
    If (Range(getAddressByName("SEDE_1")).Value <> "") Then
        Range(getAddressByName(defSede1)).Value = "=" & getAddressByName("SEDE_1")
        Range(getAddressByName(defSede1_label)).Value = testoSedi & Range(getAddressByName("SEDE_1")).Value
    Else
        Range(getAddressByName("QS_SEDE1")).Value = ""
        Range(getAddressByName(defSede1_label)).Value = testoSedi & "1"
    End If
    
    If (Range(getAddressByName("SEDE_2")).Value <> "") Then
        Range(getAddressByName(defSede2)).Value = "=" & getAddressByName("SEDE_2")
        Range(getAddressByName(defSede2_label)).Value = testoSedi & Range(getAddressByName("SEDE_2")).Value
    Else
        Range(getAddressByName(defSede2)).Value = ""
        Range(getAddressByName(defSede2_label)).Value = testoSedi & "2"
    End If
    
    If (Range(getAddressByName("SEDE_3")).Value <> "") Then
        Range(getAddressByName(defSede3)).Value = "=" & getAddressByName("SEDE_3")
        Range(getAddressByName(defSede3_label)).Value = testoSedi & Range(getAddressByName("SEDE_3")).Value
    Else
        Range(getAddressByName(defSede3)).Value = ""
        Range(getAddressByName(defSede3_label)).Value = testoSedi & "3"
    End If
    
    If (Range(getAddressByName("SEDE_4")).Value <> "") Then
        Range(getAddressByName(defSede4)).Value = "=" & getAddressByName("SEDE_4")
        Range(getAddressByName(defSede4_label)).Value = testoSedi & Range(getAddressByName("SEDE_4")).Value
    Else
        Range(getAddressByName(defSede4)).Value = ""
        Range(getAddressByName(defSede4_label)).Value = testoSedi & "4"
    End If
    
    'Range("G3").Value = "=" & getAddressByName("SEDE_1")
    'Range("G4").Value = "=" & getAddressByName("SEDE_2")
    'Range("G5").Value = "=" & getAddressByName("SEDE_3")
    'Range("G6").Value = "=" & getAddressByName("SEDE_4")
    ' ---------------------------------------------------------------------------------
   
   
    ' ---------------------------------------------------
    ' ATTIVITA' DI RICERCA
    ' ---------------------------------------------------
    
    'Spese decretata TOT
    Range("B9").Value = Range(foglioDETTAGLIO & "!" & "L4").Value
    Range("B10").Value = Range(foglioDETTAGLIO & "!" & "L5").Value
    Range("B11").Value = Range(foglioDETTAGLIO & "!" & "L6").Value
    Range("B12").Value = Range(foglioDETTAGLIO & "!" & "L7").Value
    Range("B13").Value = Range(foglioDETTAGLIO & "!" & "L8").Value
    If (bandoCorrente.seBandoPON) Then
        Range("B14").Value = Range(foglioDETTAGLIO & "!" & "L9").Value
    End If
    
    For Each item In bandoCorrente.getQSListaSigleVDC_ric
    
        numRigaTemp_ricerca = numRigaTemp_ricerca + 1
        
        importoSede1 = 0
        importoSede2 = 0
        importoSede3 = 0
        importoSede4 = 0
        importoTotale = 0
        costoAmmissibileCnr = 0
        costoAmmissibileBanca = 0
        stralciTot = 0
        stralciCnr = 0
        stralciBanca = 0
        
        splitvar = Split(item, "#")
        
        For Each item2 In splitvar
            'calcolo
            importoSede1 = importoSede1 + Range(getAddressByName(item2 & "SEDE1")).Value
            importoSede2 = importoSede2 + Range(getAddressByName(item2 & "SEDE2")).Value
            importoSede3 = importoSede3 + Range(getAddressByName(item2 & "SEDE3")).Value
            importoSede4 = importoSede4 + Range(getAddressByName(item2 & "SEDE4")).Value
            importoTotale = importoTotale + Range(getAddressByName(item2 & "TOTALE")).Value
            costoAmmissibileCnr = costoAmmissibileCnr + Range(getAddressByName(item2 & "CNR_COSTOAMM")).Value
            costoAmmissibileBanca = costoAmmissibileBanca + Range(getAddressByName(item2 & "BANCA_COSTOAMM")).Value
            stralciTot = stralciTot + Range(getAddressByName(item2 & "TOT_STRALCI")).Value
            stralciCnr = stralciCnr + Range(getAddressByName(item2 & "CNR_STRALCI")).Value
            stralciBanca = stralciBanca + Range(getAddressByName(item2 & "BANCA_STRALCI")).Value
        
            'scrivo
            Range("B" & numRigaTemp_ricerca).Value = Range(foglioDETTAGLIO & "!" & "L" & (numRigaTemp_ricerca - 5)).Value 'Spese decretata TOT
            Range("C" & numRigaTemp_ricerca).Value = (importoSede1)
            Range("D" & numRigaTemp_ricerca).Value = (importoSede2)
            Range("E" & numRigaTemp_ricerca).Value = (importoSede3)
            Range("F" & numRigaTemp_ricerca).Value = (importoSede4)
            If (Not isCnr And Not isBanca) Then
                Range("G" & numRigaTemp_ricerca).Value = (importoTotale)
                Range("H" & numRigaTemp_ricerca).Value = (costoAmmissibileCnr)
                Range("I" & numRigaTemp_ricerca).Value = (costoAmmissibileBanca)
                Range("J" & numRigaTemp_ricerca).Value = (stralciTot)
            Else
                'cnr e banca
                
                If (isCnr) Then
                    ' ricerca
                    Range("G" & numRigaTemp_ricerca).Value = (costoAmmissibileCnr)
                    Range("H" & numRigaTemp_ricerca).Value = (stralciCnr)
                End If
                
                If (isBanca) Then
                    ' ricerca
                    Range("G" & numRigaTemp_ricerca).Value = (costoAmmissibileBanca)
                    Range("H" & numRigaTemp_ricerca).Value = (stralciBanca)
                End If
            End If
            
        Next
        
    Next
    
    ' ---------------------------------------------------
    ' sub totali ricerca
    numRigaTemp_ricerca = numRigaTemp_ricerca + 1
    
    'superfix temporanea spero non definitiva
    'la lista siglevdc per bandi non PON |fffd| piu' corta di un elemento.
    'in attesa di impostare il foglio quadro singolo in maniera totalmente dinamica
    'introduco una fix che semplicemente aggiunge uno al numero di righe in modo da
    'saltare la riga vuota lasciata dal posto per la sigla vdc IMM
    If (Not bandoCorrente.seBandoPON) Then
        numRigaTemp_ricerca = numRigaTemp_ricerca + 1
    End If
    
    Range("B" & numRigaTemp_ricerca).Select
    ActiveCell.FormulaR1C1 = "=SUM(R" & (QS_numRigaStart_ricerca + 1) & "C2:R" & (numRigaTemp_ricerca - 1) & "C2)"
    Range("C" & numRigaTemp_ricerca).Select
    ActiveCell.FormulaR1C1 = "=SUM(R" & (QS_numRigaStart_ricerca + 1) & "C3:R" & (numRigaTemp_ricerca - 1) & "C3)"
    Range("D" & numRigaTemp_ricerca).Select
    ActiveCell.FormulaR1C1 = "=SUM(R" & (QS_numRigaStart_ricerca + 1) & "C4:R" & (numRigaTemp_ricerca - 1) & "C4)"
    Range("E" & numRigaTemp_ricerca).Select
    ActiveCell.FormulaR1C1 = "=SUM(R" & (QS_numRigaStart_ricerca + 1) & "C5:R" & (numRigaTemp_ricerca - 1) & "C5)"
    Range("F" & numRigaTemp_ricerca).Select
    ActiveCell.FormulaR1C1 = "=SUM(R" & (QS_numRigaStart_ricerca + 1) & "C6:R" & (numRigaTemp_ricerca - 1) & "C6)"
    If (Not isCnr And Not isBanca) Then
        Range("G" & numRigaTemp_ricerca).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (QS_numRigaStart_ricerca + 1) & "C7:R" & (numRigaTemp_ricerca - 1) & "C7)"
        'cnr e banca
        Range("H" & numRigaTemp_ricerca).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (QS_numRigaStart_ricerca + 1) & "C8:R" & (numRigaTemp_ricerca - 1) & "C8)"
        Range("I" & numRigaTemp_ricerca).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (QS_numRigaStart_ricerca + 1) & "C9:R" & (numRigaTemp_ricerca - 1) & "C9)"
        Range("J" & numRigaTemp_ricerca).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (QS_numRigaStart_ricerca + 1) & "C10:R" & (numRigaTemp_ricerca - 1) & "C10)"
    Else 'cnr e banca
        Range("G" & numRigaTemp_ricerca).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (QS_numRigaStart_ricerca + 1) & "C7:R" & (numRigaTemp_ricerca - 1) & "C7)"
        Range("H" & numRigaTemp_ricerca).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (QS_numRigaStart_ricerca + 1) & "C8:R" & (numRigaTemp_ricerca - 1) & "C8)"
    End If
        
    
    ' ---------------------------------------------------
    ' ATTIVITA' DI SVILUPPO
    ' ---------------------------------------------------
    numRigaStart_sviluppo = numRigaTemp_ricerca + 1
    numRigaTemp_sviluppo = numRigaStart_sviluppo
      
    'Spese decretata TOT
    Range("B17").Value = Range(foglioDETTAGLIO & "!" & "O4").Value
    Range("B18").Value = Range(foglioDETTAGLIO & "!" & "O5").Value
    Range("B19").Value = Range(foglioDETTAGLIO & "!" & "O6").Value
    Range("B20").Value = Range(foglioDETTAGLIO & "!" & "O7").Value
    Range("B21").Value = Range(foglioDETTAGLIO & "!" & "O8").Value
     If (bandoCorrente.seBandoPON) Then
        Range("B22").Value = Range(foglioDETTAGLIO & "!" & "O9").Value
    End If
    
            
    For Each item In bandoCorrente.getQSListaSigleVDC_svil
    
        numRigaTemp_sviluppo = numRigaTemp_sviluppo + 1
        
        importoSede1 = 0
        importoSede2 = 0
        importoSede3 = 0
        importoSede4 = 0
        importoTotale = 0
        costoAmmissibileCnr = 0
        costoAmmissibileBanca = 0
        stralciTot = 0
        stralciCnr = 0
        stralciBanca = 0
        
        splitvar = Split(item, "#")
        
        For Each item2 In splitvar
            'calcolo
            importoSede1 = importoSede1 + Range(getAddressByName(item2 & "SEDE1")).Value
            importoSede2 = importoSede2 + Range(getAddressByName(item2 & "SEDE2")).Value
            importoSede3 = importoSede3 + Range(getAddressByName(item2 & "SEDE3")).Value
            importoSede4 = importoSede4 + Range(getAddressByName(item2 & "SEDE4")).Value
            importoTotale = importoTotale + Range(getAddressByName(item2 & "TOTALE")).Value
            costoAmmissibileCnr = costoAmmissibileCnr + Range(getAddressByName(item2 & "CNR_COSTOAMM")).Value
            costoAmmissibileBanca = costoAmmissibileBanca + Range(getAddressByName(item2 & "BANCA_COSTOAMM")).Value
            stralciTot = stralciTot + Range(getAddressByName(item2 & "TOT_STRALCI")).Value
            stralciCnr = stralciCnr + Range(getAddressByName(item2 & "CNR_STRALCI")).Value
            stralciBanca = stralciBanca + Range(getAddressByName(item2 & "BANCA_STRALCI")).Value
        
            'scrivo
            Range("C" & numRigaTemp_sviluppo).Value = (importoSede1)
            Range("D" & numRigaTemp_sviluppo).Value = (importoSede2)
            Range("E" & numRigaTemp_sviluppo).Value = (importoSede3)
            Range("F" & numRigaTemp_sviluppo).Value = (importoSede4)
            If (Not isCnr And Not isBanca) Then
                Range("G" & numRigaTemp_sviluppo).Value = (importoTotale)
                Range("H" & numRigaTemp_sviluppo).Value = (costoAmmissibileCnr)
                Range("I" & numRigaTemp_sviluppo).Value = (costoAmmissibileBanca)
                Range("J" & numRigaTemp_sviluppo).Value = (stralciTot)
            Else 'cnr e banca
                If (isCnr) Then
                    ' sviluppo
                    Range("G" & numRigaTemp_sviluppo).Value = (costoAmmissibileCnr)
                    Range("H" & numRigaTemp_sviluppo).Value = (stralciCnr)
                End If
                
                If (isBanca) Then
                    ' sviluppo
                    Range("G" & numRigaTemp_sviluppo).Value = (costoAmmissibileBanca)
                    Range("H" & numRigaTemp_sviluppo).Value = (stralciBanca)
                End If
            End If
            
        Next
    Next
    
    ' ---------------------------------------------------
    ' sub totali sviluppo
    numRigaTemp_sviluppo = numRigaTemp_sviluppo + 1
    
    'superfix temporanea spero non definitiva
    'la lista siglevdc per bandi non PON |fffd| piu' corta di un elemento.
    'in attesa di impostare il foglio quadro singolo in maniera totalmente dinamica
    'introduco una fix che semplicemente aggiunge uno al numero di righe in modo da
    'saltare la riga vuota lasciata dal posto per la sigla vdc IMM
    If (Not bandoCorrente.seBandoPON) Then
        numRigaTemp_sviluppo = numRigaTemp_sviluppo + 1
    End If
    
    Range("B" & numRigaTemp_sviluppo).Select
    ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaStart_sviluppo + 1) & "C2:R" & (numRigaTemp_sviluppo - 1) & "C2)"
    Range("C" & numRigaTemp_sviluppo).Select
    ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaStart_sviluppo + 1) & "C3:R" & (numRigaTemp_sviluppo - 1) & "C3)"
    Range("D" & numRigaTemp_sviluppo).Select
    ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaStart_sviluppo + 1) & "C4:R" & (numRigaTemp_sviluppo - 1) & "C4)"
    Range("E" & numRigaTemp_sviluppo).Select
    ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaStart_sviluppo + 1) & "C5:R" & (numRigaTemp_sviluppo - 1) & "C5)"
    Range("F" & numRigaTemp_sviluppo).Select
    ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaStart_sviluppo + 1) & "C6:R" & (numRigaTemp_sviluppo - 1) & "C6)"
    If (Not isCnr And Not isBanca) Then
        Range("G" & numRigaTemp_sviluppo).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaStart_sviluppo + 1) & "C7:R" & (numRigaTemp_sviluppo - 1) & "C7)"
        'cnr e banca
        Range("H" & numRigaTemp_sviluppo).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaStart_sviluppo + 1) & "C8:R" & (numRigaTemp_sviluppo - 1) & "C8)"
        Range("I" & numRigaTemp_sviluppo).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaStart_sviluppo + 1) & "C9:R" & (numRigaTemp_sviluppo - 1) & "C9)"
        Range("J" & numRigaTemp_sviluppo).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaStart_sviluppo + 1) & "C10:R" & (numRigaTemp_sviluppo - 1) & "C10)"
    Else 'cnr e banca
        Range("G" & numRigaTemp_sviluppo).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaStart_sviluppo + 1) & "C7:R" & (numRigaTemp_sviluppo - 1) & "C7)"
        Range("H" & numRigaTemp_sviluppo).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaStart_sviluppo + 1) & "C8:R" & (numRigaTemp_sviluppo - 1) & "C8)"
    End If
    
    
    ' ---------------------------------------------------
    ' totali
    numRigaTemp_sviluppo = numRigaTemp_sviluppo + 1
    Range("B" & numRigaTemp_sviluppo).Select
    ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaTemp_ricerca) & "C2,R" & (numRigaTemp_sviluppo - 1) & "C2)"
    Range("C" & numRigaTemp_sviluppo).Select
    ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaTemp_ricerca) & "C3,R" & (numRigaTemp_sviluppo - 1) & "C3)"
    Range("D" & numRigaTemp_sviluppo).Select
    ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaTemp_ricerca) & "C4,R" & (numRigaTemp_sviluppo - 1) & "C4)"
    Range("E" & numRigaTemp_sviluppo).Select
    ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaTemp_ricerca) & "C5,R" & (numRigaTemp_sviluppo - 1) & "C5)"
    Range("F" & numRigaTemp_sviluppo).Select
    ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaTemp_ricerca) & "C6,R" & (numRigaTemp_sviluppo - 1) & "C6)"
    

    If (Not isCnr And Not isBanca) Then
        Range("G" & numRigaTemp_sviluppo).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaTemp_ricerca) & "C7,R" & (numRigaTemp_sviluppo - 1) & "C7)"
        'cnr e banca
        Range("H" & numRigaTemp_sviluppo).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaTemp_ricerca) & "C8,R" & (numRigaTemp_sviluppo - 1) & "C8)"
        Range("I" & numRigaTemp_sviluppo).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaTemp_ricerca) & "C9,R" & (numRigaTemp_sviluppo - 1) & "C9)"
        Range("J" & numRigaTemp_sviluppo).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaTemp_ricerca) & "C10,R" & (numRigaTemp_sviluppo - 1) & "C10)"
    Else
        'cnr e banca
        Range("G" & numRigaTemp_sviluppo).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaTemp_ricerca) & "C7,R" & (numRigaTemp_sviluppo - 1) & "C7)"
        Range("H" & numRigaTemp_sviluppo).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaTemp_ricerca) & "C8,R" & (numRigaTemp_sviluppo - 1) & "C8)"
    End If

  
    ' ---------------------------------------------------
    ' formattazione
    Dim startR, startS
    Dim listaVDCSize
    listaVDCSize = bandoCorrente.getSize_QSListaSigleVDC_ric
    startR = QS_numRigaStart_ricerca + 1
    startS = ((startR + (listaVDCSize + 1)) + 2)
    If (Not isCnr And Not isBanca) Then
        'Range("B9:J14, B17:J24").Select
        Range("B" & startR & ":J" & (startR + (listaVDCSize + 1)) & ",B" & startS & ":J" & (startS + (listaVDCSize + 2))).Select
    Else
        'Range("B9:H14, B17:H24").Select
        Range("B" & startR & ":H" & (startR + (listaVDCSize + 1)) & ",B" & startS & ":H" & (startS + (listaVDCSize + 2))).Select
    End If
    With Selection
        .NumberFormat = FORMATO_DECIMALE
        .HorizontalAlignment = xlRight
        .VerticalAlignment = xlCenter
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .ShrinkToFit = False
        .MergeCells = False
    End With

End Sub

Sub svuotaQS(isCnr As Boolean, isBanca As Boolean) 'Quadro Singolo
    
    Dim lastCol As String
    
    
    Dim testoSedi As String
    testoSedi = "Spese rendicontate sede "
        
    If (isCnr) Then
        Sheets(foglioQS_CNR).Select
        lastCol = "H"
        
        'Ripristino definizione generica delle sedi
        Range(getAddressByName("QS_CNR_SPESE_RENDICONTATE_SEDE1_LABEL")).Value = testoSedi & "1"
        Range(getAddressByName("QS_CNR_SPESE_RENDICONTATE_SEDE2_LABEL")).Value = testoSedi & "2"
        Range(getAddressByName("QS_CNR_SPESE_RENDICONTATE_SEDE3_LABEL")).Value = testoSedi & "3"
        Range(getAddressByName("QS_CNR_SPESE_RENDICONTATE_SEDE4_LABEL")).Value = testoSedi & "4"
    
    ElseIf (isBanca) Then
        Sheets(foglioQS_BANCA).Select
        lastCol = "H"
        
        'Ripristino definizione generica delle sedi
        Range(getAddressByName("QS_BANCA_SPESE_RENDICONTATE_SEDE1_LABEL")).Value = testoSedi & "1"
        Range(getAddressByName("QS_BANCA_SPESE_RENDICONTATE_SEDE2_LABEL")).Value = testoSedi & "2"
        Range(getAddressByName("QS_BANCA_SPESE_RENDICONTATE_SEDE3_LABEL")).Value = testoSedi & "3"
        Range(getAddressByName("QS_BANCA_SPESE_RENDICONTATE_SEDE4_LABEL")).Value = testoSedi & "4"
    Else
        Sheets(foglioQS).Select
        lastCol = "J"
        
        'Ripristino definizione generica delle sedi
        Range(getAddressByName("QS_SPESE_RENDICONTATE_SEDE1_LABEL")).Value = testoSedi & "1"
        Range(getAddressByName("QS_SPESE_RENDICONTATE_SEDE2_LABEL")).Value = testoSedi & "2"
        Range(getAddressByName("QS_SPESE_RENDICONTATE_SEDE3_LABEL")).Value = testoSedi & "3"
        Range(getAddressByName("QS_SPESE_RENDICONTATE_SEDE4_LABEL")).Value = testoSedi & "4"
    End If
    
    ' Intestazione
    Range("A4,A6,C3:C6,E3,E6,G3:G6").ClearContents
    
    'cancello i dati precedentemente acquisiti
    Dim startR, startS
    Dim listaVDCSize
    Dim variableLenght 'utilizzata per aumentare lo spostamento verso il basso (righe)
    
    If (bandoCorrente.seBandoPON) Then
        variableLenght = 3
    Else
        variableLenght = 4
    End If
    
    
    listaVDCSize = bandoCorrente.getSize_QSListaSigleVDC_ric
    startR = QS_numRigaStart_ricerca + 1
    startS = ((startR + (listaVDCSize - 1)) + variableLenght)
    Range("B" & startR & ":" & lastCol & (startR + (listaVDCSize - 1)) & ",B" & startS & ":" & lastCol & (startS + (listaVDCSize - 1))).ClearContents
    
    ' cnr e banca
    'Range("H9:J14", "H16:J22").ClearContents
    
    If (bandoCorrente.seBandoPON) Then
        Range("A38:F38").ClearContents
        Range("38:38").Delete
    End If
    
End Sub

'Sub svuotaQS() 'Quadro Singolo
'    Sheets(foglioQS).Select
'
'    ' Intestazione
'    Range("A4,A6").Value = ""
'    Range("C3:C6,E3,E6,G3:G6").ClearContents
'
'    'cancello i dati precedentemente acquisiti
'    Dim startR, startS
'    startR = QS_numRigaStart_ricerca + 1
'    startS = ((startR + (QS_listaVdcSize + 1)) + 2)
'    Range("C" & startR & ":J" & (startR + QS_listaVdcSize) & ",C" & startS & ":J" & (startS + QS_listaVdcSize)).ClearContents
'
'    ' cnr e banca
'    'Range("H9:J14", "H16:J22").ClearContents
'
'End Sub
'Sub svuotaQS_CNR()
'    Sheets(foglioQS_CNR).Select
'
'    ' Intestazione
'    Range("A4,A6").Value = ""
'    Range("C3:C6,E3,E6,G3:G6").ClearContents
'
'    'cancello i dati precedentemente acquisiti
'    'Range("C9:F14", "C16:F22").ClearContents
'    Dim startR, startS
'    startR = QS_numRigaStart_ricerca + 1
'    startS = ((startR + (QS_listaVdcSize + 1)) + 2)
'    Range("C" & startR & ":H" & (startR + QS_listaVdcSize) & ",C" & startS & ":H" & (startS + QS_listaVdcSize)).ClearContents
'
'    ' cnr
'    'Range("G9:H14", "G16:H22").ClearContents
'
'End Sub
'Sub svuotaQS_BANCA()
'    Sheets(foglioQS_BANCA).Select
'
'    ' Intestazione
'    Range("A4,A6").Value = ""
'    Range("C3:C6,E3,E6,G3:G6").ClearContents
'
'    'cancello i dati precedentemente acquisiti
'    'Range("C9:F14", "C16:F22").ClearContents
'    Dim startR, startS
'    startR = QS_numRigaStart_ricerca + 1
'    startS = ((startR + (QS_listaVdcSize + 1)) + 2)
'    Range("C" & startR & ":H" & (startR + QS_listaVdcSize) & ",C" & startS & ":H" & (startS + QS_listaVdcSize)).ClearContents
'
'
'    ' banca
'    'Range("G9:H14", "G16:H22").ClearContents
'
'End Sub

Function checkCampiObbligatori(cTP As Range) As Boolean

    'MsgBox cTP.Row & " " & cTP.Value
    Dim response As Boolean
    response = True
    
    Dim riga As String
    riga = cTP.row
    
        Select Case cTP.Value
                        
            Case "R_A.1.1 Personale interno dip", "S_A.2.1 Personale interno dip"
                    Range(startSheet & "B" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "E" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "F" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "G" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "H" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "J" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "K" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "L" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "M" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "N" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "P" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "R" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
              
            Case "R_A.1.1 Personale interno non dip", "S_A.2.1 Personale interno non dip"
                        
                    Range(startSheet & "B" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "E" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "F" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "G" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "H" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "I" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "S" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    
        Case "R_A.1.2 Spese Generali", "S_A.2.2 Spese Generali"
                        
                    Range(startSheet & "B" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "AQ" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                                    
      Case "R_A.1.3 Strumenti e attrezzature", "S_A.2.3 Strumenti e attrezzature"
                    Range(startSheet & "B" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "S" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "T" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    'Range(startSheet & "U" & riga).Select
                    'If (Trim(Selection.Value) = "") Then
                    '    Call selection_formatta_celle_obbligatorie
                    '    response = False
                    'Else
                    '    Call selection_elimina_formattazione_celle_obbligatorie
                    'End If
                    Range(startSheet & "V" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "W" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "X" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                        Select Case Range(startSheet & "X" & riga).Value
                            Case "beni ammortizzabili"
                                    Range(startSheet & "Y" & riga).Select
                                    If (Trim(Selection.Value) = "") Then
                                        Call selection_formatta_celle_obbligatorie
                                        response = False
                                    Else
                                        Call selection_elimina_formattazione_celle_obbligatorie
                                    End If
                                    Range(startSheet & "Z" & riga).Select
                                    If (Trim(Selection.Value) = "") Then
                                        Call selection_formatta_celle_obbligatorie
                                        response = False
                                    Else
                                        Call selection_elimina_formattazione_celle_obbligatorie
                                    End If
                                    Range(startSheet & "AA" & riga).Select
                                    If (Trim(Selection.Value) = "") Then
                                        Call selection_formatta_celle_obbligatorie
                                        response = False
                                    Else
                                        Call selection_elimina_formattazione_celle_obbligatorie
                                    End If
                                    Range(startSheet & "AC" & riga).Select
                                    If (Trim(Selection.Value) = "") Then
                                        Call selection_formatta_celle_obbligatorie
                                        response = False
                                    Else
                                        Call selection_elimina_formattazione_celle_obbligatorie
                                    End If
                                    Range(startSheet & "AD" & riga).Select
                                    If (Trim(Selection.Value) = "") Then
                                        Call selection_formatta_celle_obbligatorie
                                        response = False
                                    Else
                                        Call selection_elimina_formattazione_celle_obbligatorie
                                    End If
                            Case "beni non ammortizzabili"
                                    Range(startSheet & "AI" & riga).Select
                                    If (Trim(Selection.Value) = "") Then
                                        Call selection_formatta_celle_obbligatorie
                                        response = False
                                    Else
                                        Call selection_elimina_formattazione_celle_obbligatorie
                                    End If
                                    Range(startSheet & "AJ" & riga).Select
                                    If (Trim(Selection.Value) = "") Then
                                        Call selection_formatta_celle_obbligatorie
                                        response = False
                                    Else
                                        Call selection_elimina_formattazione_celle_obbligatorie
                                    End If
                            Case "beni in leasing"
                                    Range(startSheet & "AF" & riga).Select
                                    If (Trim(Selection.Value) = "") Then
                                        Call selection_formatta_celle_obbligatorie
                                        response = False
                                    Else
                                        Call selection_elimina_formattazione_celle_obbligatorie
                                    End If
                                    Range(startSheet & "AG" & riga).Select
                                    If (Trim(Selection.Value) = "") Then
                                        Call selection_formatta_celle_obbligatorie
                                        response = False
                                    Else
                                        Call selection_elimina_formattazione_celle_obbligatorie
                                    End If
                        End Select
                    End If
                    Range(startSheet & "AP" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
               
      Case "R_A.1.4 Servizi di consulenza", "S_A.2.4 Servizi di consulenza"
                    Range(startSheet & "B" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "S" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "T" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "V" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "W" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "AQ" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    
      Case "R_A.1.5 Materiali e forniture", "S_A.2.5 Materiali e forniture"
                    Range(startSheet & "B" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "S" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "T" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    'Range(startSheet & "U" & riga).Select
                    'If (Trim(Selection.Value) = "") Then
                    '    Call selection_formatta_celle_obbligatorie
                    '    response = False
                    'Else
                    '    Call selection_elimina_formattazione_celle_obbligatorie
                    'End If
                    Range(startSheet & "V" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "W" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "AQ" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    
                    
                    
      Case "R_A.1.5 Materiali e forniture Magazzino", "S_A.2.5 Materiali e forniture Magazzino"
                    Range(startSheet & "B" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    'Range(startSheet & "U" & riga).Select
                    'If (Trim(Selection.Value) = "") Then
                    '    Call selection_formatta_celle_obbligatorie
                    '    response = False
                    'Else
                    '    Call selection_elimina_formattazione_celle_obbligatorie
                    'End If
                    Range(startSheet & "AM" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "AN" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "AO" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "AQ" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
            
        Case "R_A.1.6 Beni Immateriali", "S_A.2.6 Beni Immateriali"
                    Range(startSheet & "B" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "S" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "T" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "V" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "W" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
                    Range(startSheet & "AQ" & riga).Select
                    If (Trim(Selection.Value) = "") Then
                        Call selection_formatta_celle_obbligatorie
                        response = False
                    Else
                        Call selection_elimina_formattazione_celle_obbligatorie
                    End If
        Case Else
                    
        End Select
           
    ' ritorno
    Range(startSheet & "C" & riga).Select
    checkCampiObbligatori = response
    
End Function
Function testPreventivo()

    Dim progressivoTP As Integer
    Dim cTP As Range
    Dim countForTerminateTP As Integer
    Dim errorMessagePreventivoTP As String
    Dim stopRibaltamentoTP As Boolean
    Dim rigaDaRibaltareTP As Integer
    Dim erroreTrovato As Boolean
    Dim warningTrovato As Boolean
    Dim warn As String
    Dim err As String
    Dim warningSingleMessage As String
    
    Dim totSpeseGenerali As Double
    Dim totPIDPND As Double
    Dim totCostiDirettiAmmissibili As Double
    


    progressivoTP = 0
    errorMessagePreventivoTP = "mancano dati obbligatori alle voci di costo segnalate in rosso, correggere prima di procedere le seguenti voci: "
    stopRibaltamentoTP = False
    
    application.ScreenUpdating = False
        'controllo preventivo
        Dim rs As String
        rs = "C" & (rigaTabellone + 1) & ":C" & numeroRigheDaAnalizzare
        
        
        totPIDPND = 0
        totCostiDirettiAmmissibili = 0
        totSpeseGenerali = 0
        Call clearCampiPerRegolaPercentualeSG
        Sheets(foglioDETTAGLIO).Select
        
        'Controllo se COSTI SOSTENUTI DAL sia antecedente a COSTI SOSTENUTI AL
        If (DateDiff("y", Range(getAddressByName("DETT_INFO_COSTI_AL")).Value, Range(getAddressByName("DETT_INFO_COSTI_DAL")).Value) > 0) Then
             MsgBox "La data di termine dei costi sostenuti(Cella E5)  antecedente alla data di inizio costi sostenuti (Cella C5)", vbOKOnly + vbInformation, "ATTENZIONE"""
             
        End If
        
        'Controllo se COSTI SOSTENUTI DAL e AL sono congruenti con DATA INIZIO PROGETTO
        If (DateDiff("y", Range(getAddressByName("DETT_INFO_COSTI_DAL")).Value, Range(getAddressByName("DETT_INFO_DT_PROGETTO_DAL")).Value) > 0) Then
             MsgBox "La data di inizio costi sostenuti (campo COSTI SOSTENUTI DAL Cella C5)  antecedente alla data di inizio progetto (campo DATA INIZIO PROGETTO Cella C9)", vbOKOnly + vbInformation, "ATTENZIONE"""
        End If
        If (DateDiff("y", Range(getAddressByName("DETT_INFO_DT_PROGETTO_AL")).Value, Range(getAddressByName("DETT_INFO_COSTI_DAL")).Value) > 0) Then
             MsgBox "La data di inizio costi sostenuti (campo COSTI SOSTENUTI DAL Cella C5)  successiva alla data di fine progetto (campo AL (INCLUSE PROROGHE) Cella E9)", vbOKOnly + vbInformation, "ATTENZIONE"""
        End If
        
        If (DateDiff("y", Range(getAddressByName("DETT_INFO_COSTI_AL")).Value, Range(getAddressByName("DETT_INFO_DT_PROGETTO_DAL")).Value) > 0) Then
             MsgBox "La data di fine costi sostenuti (campo AL Cella E5)  antecedente alla data di inizio progetto (campo DATA INIZIO PROGETTO Cella C9)", vbOKOnly + vbInformation, "ATTENZIONE"""
        End If
        If (DateDiff("y", Range(getAddressByName("DETT_INFO_DT_PROGETTO_AL")).Value, Range(getAddressByName("DETT_INFO_COSTI_AL")).Value) > 0) Then
             MsgBox "La data di fine costi sostenuti (campo AL Cella E5)  successiva alla data di fine progetto (campo AL (INCLUSE PROROGHE) Cella E9)", vbOKOnly + vbInformation, "ATTENZIONE"""
        End If
        
        
        For Each cTP In Range(rs)
           
            cTP.Select
            
            If (Trim(cTP.Value) <> "") Then
                countForTerminateTP = 0
                rigaDaRibaltareTP = Selection.row
                progressivoTP = progressivoTP + 1
                erroreTrovato = False
                warningTrovato = False
                warn = ""
                err = ""
                warningSingleMessage = ""
                
                ' CAMPI OBBLIGATORI
                If (Not checkCampiObbligatori(cTP)) Then
                    cTP.Select
                    cTP.Activate
                    cTP.Offset(0, -2).Interior.Color = vbRed
                    cTP.Offset(0, -2).Value = ""
                    errorMessagePreventivoTP = errorMessagePreventivoTP & getPosizione(cTP, erroreTrovato) & " - campi obbligatori mancanti "
                    err = err & "- campi obbligatori mancanti"
                    stopRibaltamentoTP = True
                    erroreTrovato = True
                Else
                    If ((Not erroreTrovato) And (Not warningTrovato)) Then
                        cTP.Offset(0, -2).Interior.ColorIndex = xlNone
                        cTP.Offset(0, -2).Value = progressivoTP
                    End If
                End If

                ' RegolaPercentualeSGSuPersonale
                ' REGOLA % SPESE GENERALI del TOT SPESE GENERALI <= TOT PERSONALE INTERNO (PID+PND)
                ' somma degli importi necessari poi alla verifica della regola
                If (cTP.Value = "R_A.1.1 Personale interno dip" Or cTP.Value = "R_A.1.1 Personale interno non dip" Or _
                    cTP.Value = "S_A.2.1 Personale interno dip" Or cTP.Value = "S_A.2.1 Personale interno non dip") Then
                    totPIDPND = totPIDPND + Range(startSheet & "AQ" & rigaDaRibaltareTP).Value
                End If
                
                If (cTP.Value = "R_A.1.2 Spese Generali" Or cTP.Value = "S_A.2.2 Spese Generali") Then
                    totSpeseGenerali = totSpeseGenerali + Range(startSheet & "AQ" & rigaDaRibaltareTP).Value
                End If
                
                If (cTP.Value = "R_A.1.4 Servizi di consulenza" Or cTP.Value = "S_A.2.4 Servizi di consulenza") Then
                    
                    ' REGOLA: DATA_FATTURA COMPRESA NEL PERIODO DI RENDICONTAZIONE
                    warningSingleMessage = ""
                    If (Not isDataFatturaCompresaNelPeriodoRendicontazione(rigaDaRibaltareTP)) Then
                        warningSingleMessage = "- la data fattura deve essere compresa nel periodo di rendicontazione "
                        warn = warn & warningSingleMessage
                        'MsgBox "Voce di Costo riga " & rigaDaRibaltareTP & ": " & warningSingleMessage
                        warningTrovato = True
                        If (Not erroreTrovato) Then
                                cTP.Offset(0, -2).Interior.Color = vbBlue
                                cTP.Offset(0, -2).Value = progressivoTP
                        End If
                    End If
                     
                    ' REGOLA DATA PAGAMENTO COMPRESA NEL PERIODO DI RENDICONTAZIONE
                    ' eccetto sal finale allora ammessa fino a 90gg da fine periodo e cmq non superiore ad oggi
                    If (Not isDataPagamentoCompresaNelPeriodoRendicontazione(rigaDaRibaltareTP)) Then
                        warningSingleMessage = "- la data pagamento deve essere compresa nel periodo di rendicontazione "
                        warn = warn & warningSingleMessage
                        'MsgBox "Voce di Costo riga " & rigaDaRibaltareTP & ": " & warningSingleMessage
                        warningTrovato = True
                        If (Not erroreTrovato) Then
                                cTP.Offset(0, -2).Interior.Color = vbBlue
                                cTP.Offset(0, -2).Value = progressivoTP
                        End If
                    End If
                    
                Else
                    ' RegolaPercentualeSGSuCostiDirettiAmmissibili
                    ' REGOLA % SPESE GENERALI del TOT SPESE GENERALI <= TOT COSTI AMMISSIBILI (totCostiDirettiAmmissibili)
                    ' ovvero a tutti costi ad esclusioni di quelli dei servizi di consulenza
                    ' "R_A.1.4 Servizi di consulenza" e "S_A.2.4 Servizi di consulenza"
                    ' somma degli importi necessari poi alla verifica della regola
               
                    totCostiDirettiAmmissibili = totCostiDirettiAmmissibili + Range(startSheet & "AQ" & rigaDaRibaltareTP).Value
                
                End If
                
               
                If (Trim(cTP.Value) = "R_A.1.5 Materiali e forniture Magazzino" Or Trim(cTP.Value) = "S_A.2.5 Materiali e forniture Magazzino") Then
                        
                    'WARNING SU CAMPO QUANTITA' NON SETTATO
                    warningSingleMessage = ""
                    If (Trim(Range(startSheet & "U" & rigaDaRibaltareTP).Value) = "") Then
                        warningSingleMessage = "- Il campo quantit|fffd| non e' stato valorizzato"
                        warn = warn & warningSingleMessage
                        warningTrovato = True
                        If (Not erroreTrovato) Then
                                cTP.Offset(0, -2).Interior.Color = vbBlue
                                cTP.Offset(0, -2).Value = progressivoTP
                        End If
                    End If

                End If
                
                
                
                If (Trim(cTP.Value) = "R_A.1.5 Materiali e forniture" Or Trim(cTP.Value) = "S_A.2.5 Materiali e forniture") Then
                        
                    'WARNING SU CAMPO QUANTITA' NON SETTATO
                    warningSingleMessage = ""
                    If (Trim(Range(startSheet & "U" & rigaDaRibaltareTP).Value) = "") Then
                        warningSingleMessage = "- Il campo quantit|fffd| non e' stato valorizzato"
                        warn = warn & warningSingleMessage
                        warningTrovato = True
                        If (Not erroreTrovato) Then
                                cTP.Offset(0, -2).Interior.Color = vbBlue
                                cTP.Offset(0, -2).Value = progressivoTP
                        End If
                    End If
                        
                    ' REGOLA: DATA_FATTURA COMPRESA NEL PERIODO DI RENDICONTAZIONE
                    warningSingleMessage = ""
                    If (Not isDataFatturaCompresaNelPeriodoRendicontazione(rigaDaRibaltareTP)) Then
                        warningSingleMessage = "- la data fattura deve essere compresa nel periodo di rendicontazione "
                        warn = warn & warningSingleMessage
                        'MsgBox "Voce di Costo riga " & rigaDaRibaltareTP & ": " & warningSingleMessage
                        warningTrovato = True
                        If (Not erroreTrovato) Then
                                cTP.Offset(0, -2).Interior.Color = vbBlue
                                cTP.Offset(0, -2).Value = progressivoTP
                        End If
                    End If
                    
                    ' REGOLA DATA PAGAMENTO COMPRESA NEL PERIODO DI RENDICONTAZIONE
                    ' eccetto sal finale allora ammessa fino a 90gg da fine periodo e cmq non superiore ad oggi
                    If (Not isDataPagamentoCompresaNelPeriodoRendicontazione(rigaDaRibaltareTP)) Then
                        warningSingleMessage = "- la data pagamento deve essere compresa nel periodo di rendicontazione "
                        warn = warn & warningSingleMessage
                        'MsgBox "Voce di Costo riga " & rigaDaRibaltareTP & ": " & warningSingleMessage
                        warningTrovato = True
                        If (Not erroreTrovato) Then
                                cTP.Offset(0, -2).Interior.Color = vbBlue
                                cTP.Offset(0, -2).Value = progressivoTP
                        End If
                    End If
                
                End If
                
                If (cTP.Value = "R_A.1.6 Beni Immateriali" Or cTP.Value = "S_A.2.6 Beni Immateriali") Then
                    
                    ' REGOLA: DATA_FATTURA COMPRESA NEL PERIODO DI RENDICONTAZIONE
                    warningSingleMessage = ""
                    If (Not isDataFatturaCompresaNelPeriodoRendicontazione(rigaDaRibaltareTP)) Then
                        warningSingleMessage = "- la data fattura deve essere compresa nel periodo di rendicontazione "
                        warn = warn & warningSingleMessage
                        'MsgBox "Voce di Costo riga " & rigaDaRibaltareTP & ": " & warningSingleMessage
                        warningTrovato = True
                        If (Not erroreTrovato) Then
                                cTP.Offset(0, -2).Interior.Color = vbBlue
                                cTP.Offset(0, -2).Value = progressivoTP
                        End If
                    End If
                     
                    ' REGOLA DATA PAGAMENTO COMPRESA NEL PERIODO DI RENDICONTAZIONE
                    ' eccetto sal finale allora ammessa fino a 90gg da fine periodo e cmq non superiore ad oggi
                    If (Not isDataPagamentoCompresaNelPeriodoRendicontazione(rigaDaRibaltareTP)) Then
                        warningSingleMessage = "- la data pagamento deve essere compresa nel periodo di rendicontazione "
                        warn = warn & warningSingleMessage
                        'MsgBox "Voce di Costo riga " & rigaDaRibaltareTP & ": " & warningSingleMessage
                        warningTrovato = True
                        If (Not erroreTrovato) Then
                                cTP.Offset(0, -2).Interior.Color = vbBlue
                                cTP.Offset(0, -2).Value = progressivoTP
                        End If
                    End If
                    
                End If
                
                ' REGOLE SU STRUMENTI E ATTREZZATURE
                If (cTP.Value = "R_A.1.3 Strumenti e attrezzature" Or cTP.Value = "S_A.2.3 Strumenti e attrezzature") Then
                
                       'WARNING SU CAMPO QUANTITA' NON SETTATO
                        warningSingleMessage = ""
                        If (Trim(Range(startSheet & "U" & rigaDaRibaltareTP).Value) = "") Then
                            warningSingleMessage = "- Il campo quantit|fffd| non e' stato valorizzato"
                            warn = warn & warningSingleMessage
                            warningTrovato = True
                            If (Not erroreTrovato) Then
                                    cTP.Offset(0, -2).Interior.Color = vbBlue
                                    cTP.Offset(0, -2).Value = progressivoTP
                            End If
                        End If

                            
                        ' TIPOLOGIA ATTREZZATURA OBBLIGATORIA
                        If (Trim(Range(startSheet & "X" & rigaDaRibaltareTP).Value) = "") Then
                            cTP.Offset(0, -2).Interior.Color = vbRed
                            cTP.Offset(0, -2).Value = ""
                            errorMessagePreventivoTP = errorMessagePreventivoTP & getPosizione(cTP, erroreTrovato) & " - manca campo TIPOLOGIA ATTREZZATURA "
                            err = err & "- manca campo TIPOLOGIA ATTREZZATURA"
                            stopRibaltamentoTP = True
                            erroreTrovato = True
                        Else
                            If ((Not erroreTrovato) And (Not warningTrovato)) Then
                                cTP.Offset(0, -2).Interior.ColorIndex = xlNone
                                cTP.Offset(0, -2).Value = progressivoTP
                            End If
                        End If
                        
                        ' REGOLA: DATA_FATTURA COMPRESA NEL PERIODO DI RENDICONTAZIONE
                        warningSingleMessage = ""
                        If (Not isDataFatturaCompresaNelPeriodoRendicontazione(rigaDaRibaltareTP)) Then
                            warningSingleMessage = "- la data fattura deve essere compresa nel periodo di rendicontazione "
                            warn = warn & warningSingleMessage
                            'MsgBox "Voce di Costo riga " & rigaDaRibaltareTP & ": " & warningSingleMessage
                            warningTrovato = True
                            If (Not erroreTrovato) Then
                                    cTP.Offset(0, -2).Interior.Color = vbBlue
                                    cTP.Offset(0, -2).Value = progressivoTP
                            End If
                        End If
                        
                        ' REGOLA DATA PAGAMENTO COMPRESA NEL PERIODO DI RENDICONTAZIONE
                        ' eccetto sal finale allora ammessa fino a 90gg da fine periodo e cmq non superiore ad oggi
                        If (Not isDataPagamentoCompresaNelPeriodoRendicontazione(rigaDaRibaltareTP)) Then
                            warningSingleMessage = "- la data pagamento deve essere compresa nel periodo di rendicontazione "
                            warn = warn & warningSingleMessage
                            'MsgBox "Voce di Costo riga " & rigaDaRibaltareTP & ": " & warningSingleMessage
                            warningTrovato = True
                            If (Not erroreTrovato) Then
                                cTP.Offset(0, -2).Interior.Color = vbBlue
                                cTP.Offset(0, -2).Value = progressivoTP
                            End If
                        End If
                        
                        ' REGOLE SU STRUMENTI E ATTREZZATURE CON TIPOLOGIA ATTREZZATURA = BENI AMMORTIZZABILI
                        If Range(startSheet & "X" & rigaDaRibaltareTP).Value = "beni ammortizzabili" Then
                            ' La data di inizio utilizzo deve essere successiva alla data fattura
                            warningSingleMessage = ""
                            If (Trim(Range(startSheet & "Y" & rigaDaRibaltareTP).Value) <> "" And Trim(Range(startSheet & "W" & rigaDaRibaltareTP).Value) <> "") Then
                                If DateDiff("m", Range(startSheet & "W" & rigaDaRibaltareTP).Value, Range(startSheet & "Y" & rigaDaRibaltareTP).Value) < 0 Then
                                    warningSingleMessage = "- la data di inizio utilizzo inserita e' precedente alla data fattura indicata"
                                    warn = warn & warningSingleMessage
                                    'MsgBox "Voce di Costo riga " & rigaDaRibaltareTP & ": " & warningSingleMessage
                                    warningTrovato = True
                                    If (Not erroreTrovato) Then
                                        cTP.Offset(0, -2).Interior.Color = vbBlue
                                        cTP.Offset(0, -2).Value = progressivoTP
                                    End If
                                End If
                            End If
                            
                            ' La data di inizio utilizzo sommata ai mesi di utilizzo deve essere inferiore alla data di fine progetto
                            'warningSingleMessage = ""
                            'If Trim(Range(startSheet & "Y" & rigaDaRibaltareTP).Value) <> "" _
                            'And Trim(Range(startSheet & "AB" & rigaDaRibaltareTP).Value) <> "" _
                            'And Trim(Range(getAddressByName("DETT_INFO_DT_PROGETTO_AL")).Value) <> "" Then
                            '   Dim dt As Date
                            '    dt = DateAdd("m", Range(startSheet & "AB" & rigaDaRibaltareTP).Value, Range(startSheet & "Y" & rigaDaRibaltareTP))
                            '    If DateDiff("m", Range(getAddressByName("DETT_INFO_DT_PROGETTO_AL")).Value, dt) > 0 Then
                            '        warningSingleMessage = "- la data di inizio utilizzo sommata ai mesi di utilizzo e' superiore alla data di fine progetto"
                            '        warn = warn & warningSingleMessage
                                    'MsgBox "Voce di Costo riga " & rigaDaRibaltareTP & ": " & warningSingleMessage
                            '        warningTrovato = True
                            '       If (Not erroreTrovato) Then
                            '            cTP.Offset(0, -2).Interior.Color = vbBlue
                            '            cTP.Offset(0, -2).Value = progressivoTP
                            '        End If
                            '    End If
                            'End If
                        End If ' se beni ammortizzabili
                End If 'se strumenti attrezzature
                
                ' REGOLA CAMPO SEDE OBBLIGATORIO
                'Range(startSheet & "B" & rigaDaRibaltareTP).Select
                'If (Trim(Selection.Value) <> "") Then
                '     If ((Not erroreTrovato) And (Not warningTrovato)) Then
                '        cTP.Offset(0, -2).Interior.ColorIndex = xlNone
                '        cTP.Offset(0, -2).Value = progressivoTP
                '    End If
                    
                'Else
                '    cTP.Offset(0, -2).Interior.Color = vbRed
                '    cTP.Offset(0, -2).Value = ""
                '    errorMessagePreventivoTP = errorMessagePreventivoTP & getPosizione(cTP, erroreTrovato) & " - manca campo SEDE "
                '    err = err & "- manca campo SEDE"
                '    stopRibaltamentoTP = True
                '    erroreTrovato = True
                'End If
            
            
                ' End REGOLE per singola riga
                Dim avviso As String
                avviso = ""
                If Len(err) > 0 Then
                    avviso = err
                End If
                If Len(warn) > 0 Then
                    avviso = avviso & " Warning: " & warn
                    MsgBox "Voce di Costo riga " & rigaDaRibaltareTP & ": " & warn
                End If
                
                If Len(avviso) > 0 Then
                
                    If (Len(avviso) > 250) Then
                        avviso = Left(avviso, 248) + "[...]"
                    End If
                    cTP.Offset(0, -2).Select
                    With Selection.Validation
                        .Delete
                        .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator:=xlBetween
                        .IgnoreBlank = True
                        .InCellDropdown = True
                        .InputTitle = ""
                        .ErrorTitle = ""
                        .InputMessage = avviso
                        .ErrorMessage = ""
                        .ShowInput = True
                        .ShowError = True
                    End With
                
                Else
                    cTP.Offset(0, -2).Validation.Delete
                End If
            
            
            Else
                
                If (countForTerminateTP > 10) Then
                    Exit For
                Else
                    countForTerminateTP = countForTerminateTP + 1
                End If
            End If
                
                
        Next
        
        ' REGOLE SU SOMME O VALORI RAGGRUPPATI
        
        Dim wrnmessage As String
        Dim perc As Double
        Dim controlloSpese As Boolean
        
        controlloSpese = True
        perc = Range(getAddressByName("DETT_INFO_PERC_SPESE_GENERALI")).Value
        wrnmessage = "Il totale delle Spese Generali imputato (" & totSpeseGenerali & ") supera il valore massimo ammissibile dato dalla percentuale indicata nel foglio DETTAGLIO (" & perc & " %) "
        
        
        
        Select Case getSiglaBando(Range(getAddressByName("DETT_INFO_BANDO")).Value)
    
            'Case "H2020", "AD", "IS", "AD_FRI", "IS_FRI", "ACC"
            
            Case "H2020_PON", "AD_PON", "IS_PON"
                Dim limiteCostiDirettiAmmissibili  As Double
                limiteCostiDirettiAmmissibili = (((totCostiDirettiAmmissibili - totSpeseGenerali) * perc) / 100)
                wrnmessage = wrnmessage & " dei costi diretti ammissibili (pari a " & (totCostiDirettiAmmissibili - totSpeseGenerali) & "). Il totale massimo imputabile per le spese generali |fffd| pari a " & limiteCostiDirettiAmmissibili & " "
                Call setCampiPerRegolaPercentualeSGSuCostiDirettiAmmissibili((totCostiDirettiAmmissibili - totSpeseGenerali), totSpeseGenerali, perc, limiteCostiDirettiAmmissibili)
                
                If (totSpeseGenerali > limiteCostiDirettiAmmissibili) Then
                    controlloSpese = False
                End If
            Case Else
                Dim limiteSG  As Double
                limiteSG = ((totPIDPND * perc) / 100)
                wrnmessage = wrnmessage & " delle spese del personale (pari a " & (totPIDPND) & "). Il totale massimo imputabile per le spese generali |fffd| pari a " & limiteSG & " "
                'MsgBox "totSG: " & totSpeseGenerali & " perc: " & perc & " percSG: " & percSG & " - totPersonale: " & totPIDPND
                Call setCampiPerRegolaPercentualeSGSuPersonale(totPIDPND, totSpeseGenerali, perc, limiteSG)
                
                If (totSpeseGenerali > limiteSG) Then
                    controlloSpese = False
                End If
        End Select
        
        
        If (Not controlloSpese) Then
        
            If (stopRibaltamentoTP) Then
               
                errorMessagePreventivoTP = errorMessagePreventivoTP & " ATTENZIONE: " & wrnmessage
            
            Else
                Sheets(foglioDETTAGLIO).Select 'solo per visualizzare lo sfondo
                MsgBox wrnmessage, vbExclamation, "ATTENZIONE"
            
            End If
        
        End If
        
        
        If (stopRibaltamentoTP) Then
            Sheets(foglioDETTAGLIO).Select 'solo per visualizzare lo sfondo
            Range("A" & (rigaTabellone + 1)).Select
            MsgBox errorMessagePreventivoTP
            testPreventivo = False
        Else
            testPreventivo = True
        End If
        application.ScreenUpdating = True
        
End Function

Function isDataFatturaCompresaNelPeriodoRendicontazione(riga As Integer) As Boolean
startSheet = foglioDETTAGLIO & "!"
If (Trim(Range(startSheet & "W" & riga).Value) <> "" _
    And Trim(Range(getAddressByName("DETT_INFO_COSTI_DAL")).Value) <> "" _
    And Trim(Range(getAddressByName("DETT_INFO_COSTI_AL")).Value) <> "") Then
        Dim dt As Date
        dt = DateAdd("m", Range(startSheet & "AB" & riga).Value, Range(startSheet & "Y" & riga))
        If (DateDiff("y", Range(getAddressByName("DETT_INFO_COSTI_DAL")).Value, Range(startSheet & "W" & riga).Value) < 0 _
        Or DateDiff("y", Range(getAddressByName("DETT_INFO_COSTI_AL")).Value, Range(startSheet & "W" & riga).Value) > 0) Then
           isDataFatturaCompresaNelPeriodoRendicontazione = False
        Else
            isDataFatturaCompresaNelPeriodoRendicontazione = True
        End If
Else
    isDataFatturaCompresaNelPeriodoRendicontazione = False
End If

End Function
Function isDataPagamentoCompresaNelPeriodoRendicontazione(riga As Integer) As Boolean
startSheet = foglioDETTAGLIO & "!"
 
If (Trim(Range(startSheet & "S" & riga).Value) <> "" _
    And Trim(Range(getAddressByName("DETT_INFO_COSTI_DAL")).Value) <> "" _
    And Trim(Range(getAddressByName("DETT_INFO_COSTI_AL")).Value) <> "") Then
        Dim dt_limite_up As Date
        dt_limite_up = Range(getAddressByName("DETT_INFO_COSTI_AL")).Value
        If (Trim(Range(getAddressByName("DETT_INFO_SAL")).Value) = "SI") Then
            dt_limite_up = DateAdd("y", 90, Range(getAddressByName("DETT_INFO_COSTI_AL")).Value)
            'If (DateDiff("m", Date, Range(getAddressByName("DETT_INFO_COSTI_AL")).Value) < 0) Then
            If (DateDiff("m", Range(getAddressByName("DETT_INFO_COSTI_AL")).Value, Date) > 0) Then
                If (DateDiff("m", Date, dt_limite_up) > 0) Then
                    dt_limite_up = Date
                End If
            End If
        End If
        
        If (DateDiff("y", Range(getAddressByName("DETT_INFO_COSTI_DAL")).Value, Range(startSheet & "S" & riga).Value) < 0 _
        Or DateDiff("y", dt_limite_up, Range(startSheet & "S" & riga).Value) > 0) Then
           isDataPagamentoCompresaNelPeriodoRendicontazione = False
        Else
            isDataPagamentoCompresaNelPeriodoRendicontazione = True
        End If
Else
    isDataPagamentoCompresaNelPeriodoRendicontazione = False
End If

End Function
Function getPosizione(cTP, erroreTrovato)
    Dim posizione As String
    posizione = "riga " & cTP.row & ":|1c|"
    If (Not erroreTrovato) Then
        getPosizione = posizione
    Else
        getPosizione = ""
    End If
End Function
Sub upperCaseSedi()
    Dim sedeOri As String
    sedeOri = Range(getAddressByName("SEDE_1")).Value
    Range(getAddressByName("SEDE_1")).Value = UCase(sedeOri)
    sedeOri = ""
    sedeOri = Range(getAddressByName("SEDE_2")).Value
    Range(getAddressByName("SEDE_2")).Value = UCase(sedeOri)
    sedeOri = ""
    sedeOri = Range(getAddressByName("SEDE_3")).Value
    Range(getAddressByName("SEDE_3")).Value = UCase(sedeOri)
    sedeOri = ""
    sedeOri = Range(getAddressByName("SEDE_4")).Value
    Range(getAddressByName("SEDE_4")).Value = UCase(sedeOri)
    sedeOri = ""
End Sub
Sub test()
Dim cTP As Range
Call setSheetsNames
Call settingConstants
application.ScreenUpdating = False
Dim wks As Worksheet
Dim test As Boolean
test = False
    
       
    'For Each wks In ActiveWorkbook.Worksheets
    'test = False
    
    'Select Case wks.name
   
    '    Case foglioDETTAGLIO, foglioDETTAGLIO_COSTO_ORARIO
    '        test = True
        
   'End Select
   
   '     If (Not test) Then GoTo continue
   '     Sheets(wks.name).Select
    
'continue:
'    Next
    
    Dim testo As String
    testo = testo + " ceccis, "
    
    testo = testo + " patateeee "
    MsgBox testo
    
    application.ScreenUpdating = True
'Worksheets("Sheet1").Range("A1:D10").Cells
End Sub



Attribute VB_Name = "MultiBando"

Public bandoCorrente As New Bando


Function inizializzaBando(fromscratch As Boolean)

    Call verifyBando(fromscratch)
    
    ' set bando properties here
    
    Set bandoCorrente = getCustomProperties
    Set inizializzaBando = bandoCorrente
End Function

Function getCustomProperties()
    
' **********************************************************
' common properties
Dim listaTendine(), listaTipologieAttrezzature(), listaSedi(), listaSal(), listaBandi(), siglaBandoCorrente
Dim descrizioneBandoCorrente As String
' **********************************************************
    
' **********************************************************
'custom properties
Dim listaVDC(), listaSigleVDC, listaCelle()
Dim QS_listaSigleVdc_ric(), QS_listaSigleVdc_svil 'QS = Quadro Singolo
' **********************************************************


' **********************************************************
'common properties
' **********************************************************
    
listaTipologieAttrezzature = Array("Tipologia (attr)", " ", "beni ammortizzabili", "beni non ammortizzabili", "beni in leasing")
listaSedi = Array("Sedi", " ", "Sede 1", "Sede 2", "Sede 3", "Sede 4")
listaSal = Array("Sal", "SI", "NO")

descrizioneBandoCorrente = Range(getAddressByName("DETT_INFO_BANDO")).Value
siglaBandoCorrente = getSiglaBando(descrizioneBandoCorrente)
' **********************************************************



' **********************************************************
'custom properties
' **********************************************************
Select Case siglaBandoCorrente

    Case "H2020", "AD", "IS", "AD_FRI", "IS_FRI", "ACC", "ETB_10", "ETB_11"
        listaVDC = Array("Voci di Costo", " ", "R_A.1.1 Personale interno dip", _
                                        "R_A.1.1 Personale interno non dip", _
                                        "R_A.1.2 Spese Generali", _
                                        "R_A.1.3 Strumenti e attrezzature", _
                                        "R_A.1.4 Servizi di consulenza", _
                                        "R_A.1.5 Materiali e forniture", _
                                        "R_A.1.5 Materiali e forniture Magazzino", _
                                        "S_A.2.1 Personale interno dip", _
                                        "S_A.2.1 Personale interno non dip", _
                                        "S_A.2.2 Spese Generali", _
                                        "S_A.2.3 Strumenti e attrezzature", _
                                        "S_A.2.4 Servizi di consulenza", _
                                        "S_A.2.5 Materiali e forniture", _
                                        "S_A.2.5 Materiali e forniture Magazzino")
                                        
        listaCelle = Array("C3", "C4", "C5", "C6", "C7", "C8", "C9", "C10", _
                                 "E3", "E5", "E7", "E8", "E9", _
                                 "I5", "I6", "I7", "I8", _
                                 "L4", "L5", "L6", "L7", "L8", _
                                 "O4", "O5", "O6", "O7", "O8")
        
        
        listaSigleVDC = Array("Sigle Voci di Costo", _
                                "PER", _
                                "GEN", _
                                "STRU", _
                                "CON", _
                                "MAT", _
                                "TOT")
                                
        QS_listaSigleVdc_ric = Array("RA11_PID_#RA11_PND_", "RA12_SG_", "RA13_ATT_", "RA14_CON_", "RA15_MAT_#RA15_MAG_")
        QS_listaSigleVdc_svil = Array("SA21_PID_#SA21_PND_", "SA22_SG_", "SA23_ATT_", "SA24_CON_", "SA25_MAT_#SA25_MAG_")
                                
    
    Case "H2020_PON", "AD_PON", "IS_PON"
        listaVDC = Array("Voci di Costo", " ", "R_A.1.1 Personale interno dip", _
                                        "R_A.1.1 Personale interno non dip", _
                                        "R_A.1.2 Spese Generali", _
                                        "R_A.1.3 Strumenti e attrezzature", _
                                        "R_A.1.4 Servizi di consulenza", _
                                        "R_A.1.5 Materiali e forniture", _
                                        "R_A.1.5 Materiali e forniture Magazzino", _
                                        "R_A.1.6 Beni Immateriali", _
                                        "S_A.2.1 Personale interno dip", _
                                        "S_A.2.1 Personale interno non dip", _
                                        "S_A.2.2 Spese Generali", _
                                        "S_A.2.3 Strumenti e attrezzature", _
                                        "S_A.2.4 Servizi di consulenza", _
                                        "S_A.2.5 Materiali e forniture", _
                                        "S_A.2.5 Materiali e forniture Magazzino", _
                                        "S_A.2.6 Beni Immateriali")
                                        
        listaCelle = Array("C3", "C4", "C5", "C6", "C7", "C8", "C9", "C10", _
                                 "E3", "E5", "E7", "E8", "E9", _
                                 "I5", "I6", "I7", "I8", _
                                 "L4", "L5", "L6", "L7", "L8", "L9", _
                                 "O4", "O5", "O6", "O7", "O8", "O9")
        
        listaSigleVDC = Array("Sigle Voci di Costo", _
                                "PER", _
                                "GEN", _
                                "STRU", _
                                "CON", _
                                "MAT", _
                                "IMM", _
                                "TOT")

        QS_listaSigleVdc_ric = Array("RA11_PID_#RA11_PND_", "RA12_SG_", "RA13_ATT_", "RA14_CON_", "RA15_MAT_#RA15_MAG_", "RA16_BIMM_")
        QS_listaSigleVdc_svil = Array("SA21_PID_#SA21_PND_", "SA22_SG_", "SA23_ATT_", "SA24_CON_", "SA25_MAT_#SA25_MAG_", "SA26_BIMM_")
             
    
    Case Else
    
End Select
    
    


listaTendine = Array(listaTipologieAttrezzature, listaSedi, listaVDC, listaSal, bandoCorrente.getListaBandiDisponibili, listaSigleVDC)
 
bandoCorrente.setListaVDC (listaVDC)
bandoCorrente.setListaTendine (listaTendine)
bandoCorrente.setListaCelle (listaCelle)

bandoCorrente.setQSListaSigleVDC_ric (QS_listaSigleVdc_ric)
bandoCorrente.setQSListaSigleVDC_svil (QS_listaSigleVdc_svil)

bandoCorrente.setDescrizioneBandoCorrente (descrizioneBandoCorrente)
bandoCorrente.setSiglaBandoCorrente (siglaBandoCorrente)


Set getCustomProperties = bandoCorrente
                
End Function

Sub select_bandi()
    
    Select Case getSiglaBando(Range(getAddressByName("DETT_INFO_BANDO")).Value)

        Case "H2020", "AD", "IS", "AD_FRI", "IS_FRI", "ACC"
        
        Case "H2020_PON", "AD_PON", "IS_PON"
        
        Case Else
        
    End Select
                
End Sub


Function verifyBando(fromscratch As Boolean)

    If (Range(getAddressByName("DETT_INFO_BANDO")).Value = "") Then
        If (fromscratch) Then
            Call sceltaBando
            verifyBando = True
        Else
            destroyAll
            verifyBando = False
        End If
    End If
    
End Function

Public Sub sceltaBando()
    
    sceltaBandoForm.Show
    
End Sub

'Sub cambioBando(oldBando As String, newBando As String)
'    Dim risp As String
'    risp = MsgBox("La selezione del bando non e' revocabile e cancellera' tutte le voci di costo gia' inserite, procedere?", vbQuestion + vbOKCancel, "ATTENZIONE")
'    If (Trim(risp) = 1) Then
'        If (newBando = "reset") Then
'            Range("DETT_INFO_BANDO").Value = ""
'            OldVal = ""
'            NewVal = ""
'            'Call DeleteAllCtp
'        Else
'            Range("DETT_INFO_BANDO").Value = newBando
'            OldVal = newBando
'        End If
'
'    Else
'        If (Trim(risp) > 1) Then 'risp = 2 (annulla)
'            Range("DETT_INFO_BANDO").Value = oldBando
'            OldVal = oldBando
'        End If
'    End If
'End Sub

Sub test()
    inizializzaBando False
End Sub
Attribute VB_Name = "Operation"
Option Explicit

Public coloreCellaBando As Integer
Public coloreCelleEditabili As Integer
Public coloreCelleObbligatorie As Integer
Public rigaTabellone As Integer
Public rigaRagruppamentoTabellone As Integer
Public numeroRigheDaAnalizzare
Public startSheet As String
    
Public Excel As Excel.application
Public foglioDETTAGLIO As String
Public foglioTENDINE As String
Public foglioCONFIG As String
Public foglioRA_11_PID As String
Public foglioSA_21_PID As String
Public foglioDETTAGLIO_COSTO_ORARIO As String
Public foglioRA_11_PND As String
Public foglioSA_21_PND As String
Public foglioRA_13_ATT As String
Public foglioSA_23_ATT As String
Public foglioDETTAGLIO_ATTREZZATURE As String
Public foglioRA_14_CON As String
Public foglioSA_24_CON As String
Public foglioRA_15_MAT As String
Public foglioRA_15_MAG As String
Public foglioSA_25_MAT As String
Public foglioSA_25_MAG As String
Public foglioRA_16_BIMM As String
Public foglioSA_26_BIMM As String

Public foglioQS As String 'quadro singolo
Public foglioQS_CNR As String
Public foglioQS_BANCA As String
Public foglioQS_4Range As String 'quadro singolo
Public foglioQS_CNR_4Range As String
Public foglioQS_BANCA_4Range As String

Public foglioISTRUZIONI As String
Public foglioSPECIFICHE As String
Public foglioSeparatore As String


Public OldVal As String
Public NewVal As String
Public selectionChange As Boolean

Public AdminPwd As String

Public FORMATO_VALUTA
Public FORMATO_DECIMALE
Public FORMATO_INTERO
Public FORMATO_PERCENTUALE
Public FORMATO_TESTO
Public FORMATO_DATA
Public GENERAL_FORMAT
Public DATA_LIMIT_DOWN
Public DATA_LIMIT_UP

Sub formatta_foglio_DETTAGLIO(application As application)

    Sheets(foglioDETTAGLIO).Select
        
    Call formatta_foglioDETTAGLIO_intestazione
    Call formatta_foglioDETTAGLIO_tabellone_intestazione
    ' *************************************************************

End Sub

Sub modificaBando(nuovoBando As String)
    Call protectSheet(foglioDETTAGLIO, False)
    Call protectCell(foglioDETTAGLIO, Names("DETT_INFO_BANDO").RefersToRange.row, Names("DETT_INFO_BANDO").RefersToRange.Column, False, False)
      
    Range("DETT_INFO_BANDO").Value = nuovoBando
    
    Call protectCell(foglioDETTAGLIO, Names("DETT_INFO_BANDO").RefersToRange.row, Names("DETT_INFO_BANDO").RefersToRange.Column, True, False)
    Call protectSheet(foglioDETTAGLIO, True)
End Sub

Sub formatta_foglioDETTAGLIO_intestazione()
    ' *************************************************************
    ' INTESTAZIONE (Info riepilogative di progetto)
    ' *************************************************************
    Range("A1:P10").Select
    
    'GENERIC
    ' set colore di fondo automatico
    With Selection.Interior
        .Pattern = xlSolid
        .ColorIndex = xlAutomatic
    End With
    'set font
    With Selection.Font
        .name = "Arial"
        .FontStyle = "Regular"
        .Size = 10
        .StrikeThrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
    End With

    ' set del colore di fondo del titolo
    Range("A1:P1").Select
    With Selection.Interior
        .Pattern = xlSolid
        .ColorIndex = 15
    End With
    With Selection.Font
        .name = "Arial"
        .FontStyle = "Bold"
        .Size = 15
        .StrikeThrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
    End With
    
    'CAMPI EDITABILI
    ' colorazione
    Call foglioDettaglio_coloraCelleEditabili
    
    'griglie
    Call disegna_griglia_orizzontale("A3:C10")
    Call disegna_griglia_orizzontale("D3:E3")
    Call disegna_griglia_orizzontale("D5:E5")
    Call disegna_griglia_orizzontale("D7:E9")
    Call disegna_griglia_orizzontale("H5:I8")
    
    ' pulisci celle
    Range("A11:P11").Select
    Selection.ClearContents
    Range("A11:K11").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = 1
    End With
    Selection.Borders(xlEdgeRight).LineStyle = xlNone
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
      
    Range("A" & rigaRagruppamentoTabellone & ":I" & rigaRagruppamentoTabellone).Select
    Selection.ClearContents
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Selection.Borders(xlEdgeRight).LineStyle = xlNone
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    
    'BORDATURA ESTERNA
    Range("A1:P10").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = 1
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = 1
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = 1
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = 1
    End With
    'Selection.Borders(xlInsideVertical).LineStyle = xlNone
    'Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
  
    Rows("1").RowHeight = 22
    Rows("3:10").RowHeight = 15
    Rows("11").RowHeight = 44
    
    Range(getAddressByName("DETT_INFO_DENOM")).Select
    Selection.NumberFormat = FORMATO_TESTO
    
    Range(getAddressByName("DETT_INFO_CF")).Select
    Selection.NumberFormat = FORMATO_TESTO
    
    Range(getAddressByName("DETT_INFO_BANDO")).Select
    Selection.NumberFormat = FORMATO_TESTO
    
    Range(getAddressByName("DETT_INFO_SAL")).Select
    Selection.NumberFormat = FORMATO_INTERO
    
    Range(getAddressByName("DETT_INFO_PERC_SPESE_GENERALI")).Select
    Selection.NumberFormat = FORMATO_PERCENTUALE
    
    Range(getAddressByName("DETT_INFO_COSTI_DAL") & ", " & _
                getAddressByName("DETT_INFO_COSTI_AL") & ", " & _
                getAddressByName("DETT_INFO_DECRETO_DATA") & ", " & _
                getAddressByName("DETT_INFO_DT_PROGETTO_DAL") & ", " & _
                getAddressByName("DETT_INFO_DT_PROGETTO_AL")).Select
    
    Selection.NumberFormat = FORMATO_DATA
End Sub

Sub formatta_foglioDETTAGLIO_tabellone_intestazione()
Dim intestazione As String
Dim sottogruppo_dett_costo_oraio As String
Dim sottogruppo_attrezzature As String
Dim stralci As String
Dim totale As String

intestazione = "A" & rigaTabellone & ":I" & rigaTabellone & ",S" & rigaTabellone & ":W" & rigaTabellone _
                            & ",AL" & rigaTabellone & ":AP" & rigaTabellone & ",AR" & rigaTabellone
sottogruppo_dett_costo_oraio = "J" & rigaTabellone & ":R" & rigaTabellone
sottogruppo_attrezzature = "X" & rigaTabellone & ":AK" & rigaTabellone
stralci = "AS" & rigaTabellone & ":AY" & rigaTabellone
totale = "AQ" & rigaTabellone & "," & getAddressByName("TOTALONE") & "," & getAddressByName("TOTALONE_IMPORTO")

'Range(intestazione).Select
Call cancella_griglia(intestazione)
'Range(sottogruppo_dett_costo_oraio).Select
Call disegna_griglia(sottogruppo_dett_costo_oraio)
'Range(sottogruppo_attrezzature).Select
Call disegna_griglia(sottogruppo_attrezzature)
'Range(stralci).Select
Call disegna_griglia(stralci)
'Range(totale).Select
Call disegna_griglia(totale)

Range(getAddressByName("TOTALONE_IMPORTO")).Select
Selection.NumberFormat = FORMATO_VALUTA
Range(getAddressByName("TOT_CEB_STRALCI_CNR")).Select
Selection.NumberFormat = FORMATO_VALUTA
Range(getAddressByName("TOT_CEB_COSTO_AMMESSO_CNR")).Select
Selection.NumberFormat = FORMATO_VALUTA
Range(getAddressByName("TOT_CEB_STRALCI_BANCA")).Select
Selection.NumberFormat = FORMATO_VALUTA
Range(getAddressByName("TOT_CEB_COSTO_AMMESSO_BANCA")).Select
Selection.NumberFormat = FORMATO_VALUTA
Range(getAddressByName("TOT_CEB_STRALCI")).Select
Selection.NumberFormat = FORMATO_VALUTA


' nascondo colonna che non serve piu
Columns("AL:AL").Select
Selection.EntireColumn.Hidden = True

Rows(rigaTabellone).EntireRow.AutoFit
' nascondo la sezione relativa a cnr e banca
'Call nascondiCNR_BANCA



'Rows((rigaTabellone + 1) & ":" & (rigaTabellone + 1)).Select
'ActiveWindow.FreezePanes = True

End Sub
Sub formatta_foglioDETTAGLIO_tabellone_intestazione_toReview()

    ' *************************************************************
    ' TABELLONE
    ' *************************************************************
    Range("A" & rigaTabellone & ":AP" & rigaTabellone & ",AR" & rigaTabellone).Select
    cancella_griglia ("A" & rigaTabellone & ":AP" & rigaTabellone & ",AR" & rigaTabellone)
    With Selection
        .name = "Calibri"
        .Font.FontStyle = "Bold"
        .Font.Size = 8
        .Interior.ColorIndex = 15
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .WrapText = True
    End With
    Call disegna_griglia("D" & rigaTabellone)
    
    Range("J" & rigaRagruppamentoTabellone & ":R" & rigaRagruppamentoTabellone).Select
    With Selection
        .name = "Calibri"
        .Font.FontStyle = "Bold"
        .Font.Size = 8
        .Interior.ColorIndex = 16
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .MergeCells = True
    End With
    Call disegna_griglia("J" & rigaRagruppamentoTabellone & ":R" & rigaRagruppamentoTabellone)
    Call disegna_griglia("J" & rigaRagruppamentoTabellone & ":R" & rigaRagruppamentoTabellone)
    
    Range("Y" & rigaRagruppamentoTabellone & ":AE" & rigaRagruppamentoTabellone).Select
    With Selection
        .name = "Calibri"
        .Font.FontStyle = "Bold"
        .Font.Size = 8
        .Interior.ColorIndex = 16
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .MergeCells = True
    End With
    Call disegna_griglia("Y" & rigaRagruppamentoTabellone & ":AE" & rigaRagruppamentoTabellone)
    Call disegna_griglia("Y" & rigaTabellone & ":AE" & rigaTabellone)
    
    Range("AF" & rigaRagruppamentoTabellone & ":AH" & rigaRagruppamentoTabellone).Select
    With Selection
        .name = "Calibri"
        .Font.FontStyle = "Bold"
        .Font.Size = 8
        .Interior.ColorIndex = 16
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .MergeCells = True
    End With
    Call disegna_griglia("AF" & rigaRagruppamentoTabellone & ":AH" & rigaRagruppamentoTabellone)
    Call disegna_griglia("AF" & rigaTabellone & ":AH" & rigaTabellone)
    
    Range("AI" & rigaRagruppamentoTabellone & ":AK" & rigaRagruppamentoTabellone).Select
    With Selection
        .name = "Calibri"
        .Font.FontStyle = "Bold"
        .Font.Size = 8
        .Interior.ColorIndex = 16
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .MergeCells = True
    End With
    Call disegna_griglia("AI" & rigaRagruppamentoTabellone & ":AK" & rigaRagruppamentoTabellone)
    Call disegna_griglia("AI" & rigaTabellone & ":AK" & rigaTabellone)
    
    
    ' set speciali
    Range("AQ" & rigaTabellone).Select
    With Selection
        .name = "Calibri"
        .Font.FontStyle = "Bold"
        .Font.Size = 8
        .Interior.ColorIndex = 16
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .Font.Color = vbRed
        .Interior.Color = vbYellow
    End With
    
    Range("AP11:AQ11").Select
    With Selection
        .name = "Calibri"
        .Font.FontStyle = "Bold"
        .Font.Size = 8
        .Interior.ColorIndex = 16
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .Interior.Color = vbGreen
    End With
    
    Range("AS" & rigaTabellone & ":AW" & rigaTabellone).Select
    With Selection
        .name = "Calibri"
        .Font.FontStyle = "Bold"
        .Font.Size = 8
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
    End With
    With Selection.Interior
        .Pattern = xlSolid
        .ColorIndex = xlAutomatic
    End With
    Call disegna_griglia("AS" & rigaTabellone & ":AW" & rigaTabellone)
    
    ' *************************************************************
    ' DEFINISCI ETICHETTE
    ' *************************************************************
    
    Range("A" & rigaTabellone).FormulaR1C1 = "Progr. dettaglio"
    Range("B" & rigaTabellone).FormulaR1C1 = "Area"
    Range("C" & rigaTabellone).FormulaR1C1 = "Voce di costo"
    Range("D" & rigaTabellone).FormulaR1C1 = "Descrizione della spesa"
    Range("E" & rigaTabellone).FormulaR1C1 = "Nome e Cognome / Personale "
    Range("F" & rigaTabellone).FormulaR1C1 = "Rapporto di Lavoro"
    Range("G" & rigaTabellone).FormulaR1C1 = "Mansione"
    Range("H" & rigaTabellone).FormulaR1C1 = "Ore"
    Range("I" & rigaTabellone).FormulaR1C1 = "Costo Orario non dipendente (AD/R)"
    Range("J" & rigaTabellone).FormulaR1C1 = "Retribuzione diretta ( A )|1c|"
    Range("K" & rigaTabellone).FormulaR1C1 = "Restribuzione differita - TFR ( B )"
    Range("L" & rigaTabellone).FormulaR1C1 = "Restribuzione differita - mensilit_ aggiuntive 13^, 14^ |fffd| ( C )"
    Range("M" & rigaTabellone).FormulaR1C1 = "Oneri previdenziali e assistenziali a carico del beneficiario non compresi in busta paga (ovvero non a carico del dipendente) ( D )"
    Range("N" & rigaTabellone).FormulaR1C1 = "Ulteriori costi previsti da contratto ( E )"
    Range("O" & rigaTabellone).FormulaR1C1 = "Costo effettivo annuo lordo( F=A+B+C+D+E )"
    Range("P" & rigaTabellone).FormulaR1C1 = "Monte ore annuo di lavoro da CCNL ( G )"
    Range("Q" & rigaTabellone).FormulaR1C1 = "Costo orario( F/G )"
    Range("R" & rigaTabellone).FormulaR1C1 = "Anno"
    Range("S" & rigaTabellone).FormulaR1C1 = "Data PAGAMENTO"
    Range("T" & rigaTabellone).FormulaR1C1 = "Denominazione Fornitore"
    Range("U" & rigaTabellone).FormulaR1C1 = "Quantit_"
    Range("V" & rigaTabellone).FormulaR1C1 = "N. FATTURA"
    Range("W" & rigaTabellone).FormulaR1C1 = "DATA FATTURA"
    Range("X" & rigaTabellone).FormulaR1C1 = "TIPOLOGIA ATTREZZATURA"
    Range("Y" & rigaTabellone).FormulaR1C1 = "Data inizio utilizzo"
    Range("Z" & rigaTabellone).FormulaR1C1 = "Costo del bene ( A )"
    Range("AA" & rigaTabellone).FormulaR1C1 = "% annuale di ammortamento"
    Range("AB" & rigaTabellone).FormulaR1C1 = "mesi di utilizzo nel progetto ( B )"
    Range("AC" & rigaTabellone).FormulaR1C1 = "mesi totali di ammortamento (C)"
    Range("AD" & rigaTabellone).FormulaR1C1 = "% di utilizzo BENI AMMORTIZZABILI ( D )"""
    Range("AE" & rigaTabellone).FormulaR1C1 = "Costo imputato : A*(B/C)*D"
    Range("AF" & rigaTabellone).FormulaR1C1 = "Importo Canone (leasing) (F)"
    Range("AG" & rigaTabellone).FormulaR1C1 = "% di utilizzo LEASING (G)"""
    Range("AH" & rigaTabellone).FormulaR1C1 = "Costo imputato Canone leasing (F*G)"
    Range("AI" & rigaTabellone).FormulaR1C1 = "Costo del bene (H)"
    Range("AJ" & rigaTabellone).FormulaR1C1 = "% di utilizzo BENI NON AMMORTIZZABLII (I)"
    Range("AK" & rigaTabellone).FormulaR1C1 = "Costo imputato  (H*I)"
    Range("AL" & rigaTabellone).FormulaR1C1 = "Importo FATTURA"
    Range("AM" & rigaTabellone).FormulaR1C1 = "Data Prellievo"
    Range("AN" & rigaTabellone).FormulaR1C1 = "Rif. Inventario"
    Range("AO" & rigaTabellone).FormulaR1C1 = "Valore inventario"
    Range("AP" & rigaTabellone).FormulaR1C1 = "Costo Fattura"
    Range("AQ" & rigaTabellone).FormulaR1C1 = "TOT non editabile (PERSONALE dipendente O 3 ATTREZZATURE)"
    Range("AR" & rigaTabellone).FormulaR1C1 = "Note"
    Range("AS" & rigaTabellone).FormulaR1C1 = "stralci CNR"
    Range("AT" & rigaTabellone).FormulaR1C1 = "Costo ammesso CNR (AQ-AS)"
    Range("AU" & rigaTabellone).FormulaR1C1 = "stralci Banca post CNR"
    Range("AV" & rigaTabellone).FormulaR1C1 = "Costo ammesso(AT-AU) "
    Range("AW" & rigaTabellone).FormulaR1C1 = "tot stralci  (AS+AU)"
    Range("AP11").FormulaR1C1 = "TOTALE"
    ' *************************************************************
End Sub
 
Public Function controllaSedi() As Boolean
    controllaSedi = True

    If Trim(Range(getAddressByName("SEDE_1")).Value) = "" _
        And Trim(Range(getAddressByName("SEDE_2")).Value) = "" _
        And Trim(Range(getAddressByName("SEDE_3")).Value) = "" _
        And Trim(Range(getAddressByName("SEDE_4")).Value) = "" Then
        MsgBox "Inserire almeno una sede prima di procedere con l'inserimento della voce di costo", vbCritical + vbOKOnly, "ERROR"
        controllaSedi = False
    End If
            
End Function

Public Function controllaINFO_RIEPILOGO_PROGETTO()
    Dim tempcheck
    tempcheck = False
    controllaINFO_RIEPILOGO_PROGETTO = True
    
    If (Trim(Range(getAddressByName("DETT_INFO_CF")).Value) = "" _
        Or Trim(Range(getAddressByName("DETT_INFO_DENOM")).Value) = "" _
        Or Trim(Range(getAddressByName("DETT_INFO_COSTI_DAL")).Value) = "" _
        Or Trim(Range(getAddressByName("DETT_INFO_COSTI_AL")).Value) = "" _
        Or Trim(Range(getAddressByName("DETT_INFO_NUM_PROGETTO")).Value) = "" _
        Or Trim(Range(getAddressByName("DETT_INFO_SAL")).Value) = "" _
        Or Trim(Range(getAddressByName("DETT_INFO_BANDO")).Value) = "" _
        Or Trim(Range(getAddressByName("DETT_INFO_DECRETO_NUMERO")).Value) = "" _
        Or Trim(Range(getAddressByName("DETT_INFO_DECRETO_DATA")).Value) = "" _
        Or Trim(Range(getAddressByName("DETT_INFO_DT_PROGETTO_DAL")).Value) = "" _
        Or Trim(Range(getAddressByName("DETT_INFO_DT_PROGETTO_AL")).Value) = "" _
        Or Trim(Range("L4").Value) = "" _
        Or Trim(Range("L5").Value) = "" _
        Or Trim(Range("L6").Value) = "" _
        Or Trim(Range("L7").Value) = "" _
        Or Trim(Range("L8").Value) = "" _
        Or Trim(Range("O4").Value) = "" _
        Or Trim(Range("O5").Value) = "" _
        Or Trim(Range("O6").Value) = "" _
        Or Trim(Range("O7").Value) = "" _
        Or Trim(Range("O8").Value) = "" _
        Or Trim(Range(getAddressByName("DETT_INFO_PERC_SPESE_GENERALI")).Value) = "" _
        ) Then
            
            tempcheck = True
            'MsgBox "Inserire tutti i campi delle ""INFO RIEPILOGATIVE DI PROGETTO"" prima di procedere con l'inserimento della voce di costo", vbCritical + vbOKOnly, "ERROR"
            'controllaINFO_RIEPILOGO_PROGETTO = False
    End If
    
    
    'TODO MULTIBANDO
'    If (Bando.getSiglaBandoCorrente = "H2020_PON" Or _
'        Bando.getSiglaBandoCorrente = "AD_PON" Or _
'        Bando.getSiglaBandoCorrente = "IS_PON" _
'    ) Then
'
'        If (Trim(Range("L9").Value) = "" _
'            Or Trim(Range("O9").Value) = "" _
'        ) Then
'            tempcheck = True
'        End If
'
'    Else
'
'
'    End If
'
    If (bandoCorrente.seBandoPON) Then

        If (Trim(Range("L9").Value) = "" _
            Or Trim(Range("O9").Value) = "" _
        ) Then
            tempcheck = True
        End If

    End If

               
    If (tempcheck) Then
        MsgBox "Inserire tutti i campi delle ""INFO RIEPILOGATIVE DI PROGETTO"" prima di procedere con l'inserimento della voce di costo", vbCritical + vbOKOnly, "ERROR"
        controllaINFO_RIEPILOGO_PROGETTO = False
    End If

End Function

Sub nascondiCNR_BANCA()
    Call nascondiCNR
    Call nascondiBANCA
    Columns("AW").Select
    Selection.EntireColumn.Hidden = True
    Range("AZ" & rigaTabellone).Select
End Sub


Sub nascondiCNR()
    Columns("AS:AT").Select
    Selection.EntireColumn.Hidden = True
    Columns("AX").Select
    Selection.EntireColumn.Hidden = True
    Range("AZ" & rigaTabellone).Select
End Sub

Sub nascondiBANCA()
    Columns("AU:AV").Select
    Selection.EntireColumn.Hidden = True
    Columns("AY").Select
    Selection.EntireColumn.Hidden = True
    Range("AZ" & rigaTabellone).Select
End Sub

Sub visualizzaCNR_BANCA()
    Call visualizzaCNR
    Call visualizzaBANCA
    Columns("AW").Select
    Selection.EntireColumn.Hidden = False
    Range("AZ" & rigaTabellone).Select
End Sub

Sub visualizzaCNR()
    Columns("AS:AT").Select
    Selection.EntireColumn.Hidden = False
    Columns("AX").Select
    Selection.EntireColumn.Hidden = False
    Range("AZ" & rigaTabellone).Select
End Sub

Sub visualizzaBANCA()
    Columns("AU:AV").Select
    Selection.EntireColumn.Hidden = False
    Columns("AY").Select
    Selection.EntireColumn.Hidden = False
    Range("AZ" & rigaTabellone).Select
End Sub

Public Sub aggiungiImportoSede(sede As String, vdc As String, importo As Double)

    Dim temp As Double
    Dim totale As Double

    Select Case UCase(Trim(sede))
        Case UCase(Trim(Range(getAddressByName("SEDE_1")).Value))
            temp = Range(getAddressByName(vdc & "_SEDE1")).Value
            totale = temp + importo
            Range(getAddressByName(vdc & "_SEDE1")).Value = totale
            Range(getAddressByName("DEF_SEDE1")).Value = Trim(sede)
            
        Case UCase(Trim(Range(getAddressByName("SEDE_2")).Value))
            temp = Range(getAddressByName(vdc & "_SEDE2")).Value
            totale = temp + importo
            Range(getAddressByName(vdc & "_SEDE2")).Value = totale
            Range(getAddressByName("DEF_SEDE2")).Value = Trim(sede)
            
        Case UCase(Trim(Range(getAddressByName("SEDE_3")).Value))
            temp = Range(getAddressByName(vdc & "_SEDE3")).Value
            totale = temp + importo
            Range(getAddressByName(vdc & "_SEDE3")).Value = totale
            Range(getAddressByName("DEF_SEDE3")).Value = Trim(sede)
        
        Case UCase(Trim(Range(getAddressByName("SEDE_4")).Value))
            temp = Range(getAddressByName(vdc & "_SEDE4")).Value
            totale = temp + importo
            Range(getAddressByName(vdc & "_SEDE4")).Value = totale
            Range(getAddressByName("DEF_SEDE4")).Value = Trim(sede)
            
    End Select

End Sub

Public Sub aggiungiImportoStralci(vdc As String, rigaDaRibaltare As Integer)

    Dim temp As Double
    Dim totale As Double
    Dim importoStralci As Double

    'cnr
    importoStralci = Range(foglioDETTAGLIO & "!" & "AS" & rigaDaRibaltare).Value
    temp = Range(getAddressByName(vdc & "_CNR_STRALCI")).Value
    totale = temp + importoStralci
    Range(getAddressByName(vdc & "_CNR_STRALCI")).Value = totale
    importoStralci = 0
    temp = 0
    totale = 0
    
    ' banca
    importoStralci = Range(foglioDETTAGLIO & "!" & "AU" & rigaDaRibaltare).Value
    temp = Range(getAddressByName(vdc & "_BANCA_STRALCI")).Value
    totale = temp + importoStralci
    Range(getAddressByName(vdc & "_BANCA_STRALCI")).Value = totale
    importoStralci = 0
    temp = 0
    totale = 0
    
            
        
End Sub

Public Sub svuotaRiepilogo(alsoConfigRulesValues As Boolean)
    Sheets("config").Visible = True
    Sheets("config").Select
    Range("B6:R9,C14:R14,C17:R17").ClearContents
    If (alsoConfigRulesValues) Then
        Range("C21,E21,G21,I21").ClearContents
    End If
    Sheets("config").Visible = False
End Sub

Public Sub setCampiPerRegolaPercentualeSGSuPersonale(totPIDPND As Double, totSpeseGenerali As Double, perc As Double, percSG As Double)
    application.ScreenUpdating = False
    Sheets("config").Visible = True
    Sheets("config").Select
    
        Range(getAddressByName("REGPERC_LABEL")).Value = "REGOLA PERC SG SU PERS INT"
        Range(getAddressByName("REGPERC_TOT_LABEL")).Value = "TOT Personale"
        Range(getAddressByName("REGPERC_TOT_LABEL")).ClearComments
        Range(getAddressByName("REGPERC_TOT_LABEL")).AddComment Text:="RA11_PID+SA21_PID+RA11_PND+SA21_PND"
        Range(getAddressByName("REGPERC_TOT_SG_LABEL")).Value = "TOT SG"
        Range(getAddressByName("REGPERC_PERC_LABEL")).Value = "PERCENTUALE"
        Range(getAddressByName("REGPERC_PERC_SG_LABEL")).Value = "PERCENTUALE SG"
    
        Range(getAddressByName("REGPERC_TOT")).Value = totPIDPND
        Range(getAddressByName("REGPERC_TOT_SG")).Value = totSpeseGenerali
        Range(getAddressByName("REGPERC_PERC")).Value = perc
        Range(getAddressByName("REGPERC_PERC_SG")).Value = percSG
    
    Sheets("config").Visible = False
    application.ScreenUpdating = True
End Sub

Public Sub clearCampiPerRegolaPercentualeSG()
    application.ScreenUpdating = False
    Sheets("config").Visible = True
    Sheets("config").Select
    
        Range(getAddressByName("REGPERC_TOT_LABEL")).ClearComments
        Range(getAddressByName("REGPERC_TOT")).Value = ""
        Range(getAddressByName("REGPERC_TOT_SG")).Value = ""
        Range(getAddressByName("REGPERC_PERC")).Value = ""
        Range(getAddressByName("REGPERC_PERC_SG")).Value = ""
    
    Sheets("config").Visible = False
    application.ScreenUpdating = True
End Sub

Public Sub setCampiPerRegolaPercentualeSGSuCostiDirettiAmmissibili(totCostiDirettiAmmissibili As Double, totSpeseGenerali As Double, perc As Double, percCostiDirettiAmmissibili As Double)
    application.ScreenUpdating = False
    Sheets("config").Visible = True
    Sheets("config").Select
    
        Range(getAddressByName("REGPERC_LABEL")).Value = "REGOLA PERC SG SU COSTI AMM"
        Range(getAddressByName("REGPERC_TOT_LABEL")).Value = "TOTALE"
        Range(getAddressByName("REGPERC_TOT_LABEL")).ClearComments
        Range(getAddressByName("REGPERC_TOT_LABEL")).AddComment Text:="TUTTE LE VOCI DI COSTO AD ESCLUSIONE DI RA14 E SA24"
        Range(getAddressByName("REGPERC_TOT_SG_LABEL")).Value = "TOT SG"
        Range(getAddressByName("REGPERC_PERC_LABEL")).Value = "PERCENTUALE"
        Range(getAddressByName("REGPERC_PERC_SG_LABEL")).Value = "PERCENTUALE SG"
        
        Range(getAddressByName("REGPERC_TOT")).Value = totCostiDirettiAmmissibili
        Range(getAddressByName("REGPERC_TOT_SG")).Value = totSpeseGenerali
        Range(getAddressByName("REGPERC_PERC")).Value = perc
        Range(getAddressByName("REGPERC_PERC_SG")).Value = percCostiDirettiAmmissibili
    
    Sheets("config").Visible = False
    application.ScreenUpdating = True
End Sub



Attribute VB_Name = "SECURITY"
Option Explicit

Global BasicPassword As String
Dim OldPassword As String
Public LastRealEditatedRow As Integer



' protegge o meno il workbook corrente
Public Sub ProtectWorkbook(statusProtezione As Boolean)
    If statusProtezione = True Then
        ThisWorkbook.protect Password:=BasicPassword
    Else
        ThisWorkbook.Unprotect BasicPassword
    End If
    
End Sub

Public Sub ConfigureProtectionForAllWorksheets(configuraInProtezione As Boolean)
    ' se configuraInProtezione = true allora il metodo si aspetta di operare con dei fogli protetti
    ' li sprotegge e li riprotegge.
    
    Dim wks As Worksheet
        
    For Each wks In ActiveWorkbook.Worksheets
        
        If (configuraInProtezione) Then
            wks.Unprotect BasicPassword
        End If
        
        wks.Activate
        wks.Cells.Select
        wks.Cells.FormulaHidden = True
        
        
        Select Case wks.name
            Case "DETTAGLIO"
                    
                Range("A1:ZZ" & rigaTabellone).Locked = True
               
                Range("C" & (rigaTabellone + 1)).Activate
                Range("C" & (rigaTabellone + 1)).Select
                
                Dim continua As Boolean
                Dim LastR As Integer
                Dim LastC As Integer
                Dim Counter As Integer
                
                
                continua = True
                LastR = ActiveCell.row
                LastC = ActiveCell.Column
                LastRealEditatedRow = LastR

                For Counter = LastR To 3000 Step 1
    
                    ActiveSheet.Cells(Counter, 3).Select
                    If Trim(Selection.Value) = "" Then
                        Range(Counter & ":" & Counter).Locked = True
                        'MsgBox "row: " & ActiveCell.Row & " " & Trim(Selection.Value)
                    Else
                        LastRealEditatedRow = ActiveCell.row
                        Exit For
                    End If
                Next
                
               
                Range("C:C").Locked = False
                With Range("C:C").Validation
                    .Delete
                    .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
                     xlBetween, Formula1:="=Tendine!$D$3:$D$19" 'TODO MULTIBANDO
                    .IgnoreBlank = True
                    .InCellDropdown = True
                    .InputTitle = ""
                    .ErrorTitle = ""
                    .InputMessage = "Selezionare una voce di costo"
                    .ErrorMessage = ""
                    .ShowInput = True
                    .ShowError = True
                End With

                Range("C1:C" & rigaTabellone).Locked = True
                Range("C1:C" & rigaTabellone).Validation.Delete
                
                Names("DETT_INFO_DENOM").RefersToRange.Locked = False
                Names("DETT_INFO_CF").RefersToRange.Locked = False
                
                Names("DETT_INFO_COSTI_DAL").RefersToRange.Locked = False
                Range(getAddressByName("DETT_INFO_COSTI_DAL")).Select
                Call addValidazione_DATA
                Names("DETT_INFO_COSTI_AL").RefersToRange.Locked = False
                Range(getAddressByName("DETT_INFO_COSTI_AL")).Select
                Call addValidazione_DATA
                Names("DETT_INFO_NUM_PROGETTO").RefersToRange.Locked = False
                Range(getAddressByName("DETT_INFO_NUM_PROGETTO")).Select
                Call addValidazione_SOLO_Numeri_INTERI
                Names("DETT_INFO_SAL").RefersToRange.Locked = False
                With Range(getAddressByName("DETT_INFO_SAL")).Validation
                    .Delete
                    .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
                    xlBetween, Formula1:="=Tendine!$E$3:$E$4"
                    .IgnoreBlank = True
                    .InCellDropdown = True
                    .InputTitle = ""
                    .ErrorTitle = ""
                    .InputMessage = ""
                    .ErrorMessage = "Sono ammessi solo i valori SI o NO"
                    .ShowInput = True
                    .ShowError = True
                End With
                Names("DETT_INFO_NUM_SAL").RefersToRange.Locked = False
                Range(getAddressByName("DETT_INFO_NUM_SAL")).Select
                Call addValidazione_SOLO_Numeri_INTERI
                
                
                Range(getAddressByName("DETT_INFO_BANDO")).ClearComments
                Range(getAddressByName("DETT_INFO_BANDO")).AddComment Text:="Il Bando, una volta scelto, non e' piu' modificabile."
'                Names("DETT_INFO_BANDO").RefersToRange.Locked = False
'                With Range(getAddressByName("DETT_INFO_BANDO")).Validation
'                    .Delete
'                    .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
'                    xlBetween, Formula1:="=Tendine!$F$3:$F$10"
'                    .IgnoreBlank = True
'                    .InCellDropdown = True
'                    .InputTitle = ""
'                    .ErrorTitle = ""
'                    .InputMessage = "Selezionare il bando"
'                    .ErrorMessage = "Sono ammessi solo i valori in lista"
'                    .ShowInput = True
'                    .ShowError = True
'                End With
                
                Names("DETT_INFO_DECRETO_NUMERO").RefersToRange.Locked = False
                Names("DETT_INFO_DECRETO_DATA").RefersToRange.Locked = False
                Range(getAddressByName("DETT_INFO_DECRETO_DATA")).Select
                Call addValidazione_DATA
                Names("DETT_INFO_DT_PROGETTO_DAL").RefersToRange.Locked = False
                Range(getAddressByName("DETT_INFO_DT_PROGETTO_DAL")).Select
                Call addValidazione_DATA
                Names("DETT_INFO_DT_PROGETTO_AL").RefersToRange.Locked = False
                Range(getAddressByName("DETT_INFO_DT_PROGETTO_AL")).Select
                Call addValidazione_DATA
                
                
                Select Case getSiglaBando(Range(getAddressByName("DETT_INFO_BANDO")).Value)

                    Case "H2020", "AD", "IS", "AD_FRI", "IS_FRI", "ACC", "ETB_10", "ETB_11"
                        Names("DETT_INFO_PERC_SPESE_GENERALI").RefersToRange.Locked = False
                        With Range(getAddressByName("DETT_INFO_PERC_SPESE_GENERALI")).Validation
                            .Delete
                            .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="0", Formula2:="50"
                            .IgnoreBlank = True
                            .InCellDropdown = True
                            .InputTitle = "SPESE GENERALI"
                            .ErrorTitle = "ERROR"
                            .InputMessage = "Inserire un valore percentuale per le spese generali (<=50%)"
                            .ErrorMessage = "Inserire un valore percentuale per le spese generali compreso tra 0 e 50"
                            .ShowInput = True
                            .ShowError = True
                        End With
                    
                    Case "H2020_PON", "AD_PON", "IS_PON"
                        Names("DETT_INFO_PERC_SPESE_GENERALI").RefersToRange.Locked = False
                        With Range(getAddressByName("DETT_INFO_PERC_SPESE_GENERALI")).Validation
                            .Delete
                            .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="0", Formula2:="25"
                            .IgnoreBlank = True
                            .InCellDropdown = True
                            .InputTitle = "SPESE GENERALI"
                            .ErrorTitle = "ERROR"
                            .InputMessage = "Inserire un valore percentuale per le spese generali (<=25%)"
                            .ErrorMessage = "Inserire un valore percentuale per le spese generali compreso tra 0 e 25"
                            .ShowInput = True
                            .ShowError = True
                        End With
                    
                    Case Else
                    
                End Select
                
                
                Names("LISTA_SEDI").RefersToRange.Locked = False
                
                Range(getAddressByName("TOTALONE_IMPORTO")).FormulaR1C1 = "=SUM(R[3]C:R[989]C)"
                Range(getAddressByName("TOT_CEB_STRALCI_CNR")).FormulaR1C1 = "=SUM(R[2]C:R[989]C)"
                Range(getAddressByName("TOT_CEB_COSTO_AMMESSO_CNR")).FormulaR1C1 = "=SUM(R[2]C:R[989]C)"
                Range(getAddressByName("TOT_CEB_STRALCI_BANCA")).FormulaR1C1 = "=SUM(R[2]C:R[989]C)"
                Range(getAddressByName("TOT_CEB_COSTO_AMMESSO_BANCA")).FormulaR1C1 = "=SUM(R[2]C:R[989]C)"
                Range(getAddressByName("TOT_CEB_STRALCI")).FormulaR1C1 = "=SUM(R[2]C:R[989]C)"
                
                
                'TODO MULTIBANDO
'                If (bandoCorrente.getSiglaBandoCorrente = "H2020_PON" Or _
'                    bandoCorrente.getSiglaBandoCorrente = "AD_PON" Or _
'                    bandoCorrente.getSiglaBandoCorrente = "IS_PON" _
'                ) Then
'                    Range("L4:L9,O4:O9").Select
'                Else
'                    Range("L4:L8,O4:O8").Select
'                End If
        
                If (bandoCorrente.seBandoPON) Then
                    Range("L4:L9,O4:O9").Select
                Else
                    Range("L4:L8,O4:O8").Select
                End If
                
                With Selection
                    .NumberFormat = FORMATO_DECIMALE
                    .Locked = False
                End With
                
                Dim ret As Integer
                ret = Last_Real_Empty_Row_TABELLONE(3)
                Range(Cells(ret, 3).Address).Select
                Call selection_editabile
                            
                            
            Case "Quadro Singolo"
                Call commonActionOnQuadroCosti(wks)
                
            Case "Quadro singolo cnr"
                Call commonActionOnQuadroCosti(wks)
                
            Case "Quadro singolo banca"
                Call commonActionOnQuadroCosti(wks)
                
            Case "config", "Tendine"
                wks.Cells.Locked = True
                'Range("B25:B28").Locked = False
                
                'wks.Visible = xlSheetHidden
            
            Case "R_A.1.6 Beni Immateriali", "S_A.2.6 Beni Immateriali"
                wks.Cells.Locked = True
                                
                'TODO MULTIBANDO
'                If (bandoCorrente.getSiglaBandoCorrente = "H2020_PON" Or _
'                    bandoCorrente.getSiglaBandoCorrente = "AD_PON" Or _
'                    bandoCorrente.getSiglaBandoCorrente = "IS_PON" _
'                ) Then
'                    wks.Visible = xlSheetVisible
'                Else
'                    wks.Visible = xlSheetHidden
'                End If
                If (bandoCorrente.seBandoPON) Then
                    wks.Visible = xlSheetVisible
                Else
                    wks.Visible = xlSheetHidden
                End If
                
                
                
            Case Else
                wks.Cells.Locked = True
        End Select
        
        If (configuraInProtezione) Then
            wks.protect Password:=BasicPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=False
        End If
        
    Next

End Sub

' Questa sub contiene le azioni comuni a tutti e tre i fogli Quadro Costi/CNR/BANCA
Sub commonActionOnQuadroCosti(wks As Variant)
    wks.Cells.Locked = True
                
    If (bandoCorrente.seBandoPON) Then
        Range("A14").Value = "A.1.6 Beni Immateriali"
        Range("A22").Value = "B.2.6 Beni Immateriali"
    Else
        Range("A14").Value = ""
        Range("A22").Value = ""
    End If
                
    Range("B9:B15,B17:B24").Select
    With Selection
        .Locked = True
    End With
    
    
End Sub


Sub accessoAdmin()
Dim pwd As String
Call setSystemPassword
pwd = InputBox("inserire la password di amministrazione", "ATTENZIONE")

If (Trim(pwd) = Trim(BasicPassword)) Then
    'configForm.Modal = False
    configForm.Show
Else
    If (Trim(pwd) <> "") Then
        MsgBox "Password errata", vbCritical, "ACCESSO NEGATO"
    End If
End If

    'config
    'show riassunto su form
End Sub

Sub disattivaToolbars()
    With application

           .DisplayFullScreen = True

           .CommandBars("Full Screen").Visible = False

           .CommandBars("Worksheet Menu Bar").Enabled = False

    End With

End Sub

Sub attivaToolbars()
    With application

           .DisplayFullScreen = False

           .CommandBars("Worksheet Menu Bar").Enabled = True

    End With
End Sub
Sub temp()
    'Call protectCurrentSheet("FCS2468", True)
End Sub

Sub setSystemPassword()
   Call readPasswordFromConfig
End Sub

Sub readPasswordFromConfig()
    OldPassword = Range(getAddressByName("CONF_OLD_PWD_ADMIN"))
    BasicPassword = Range(getAddressByName("CONF_PWD_ADMIN"))
End Sub

Sub getAdminPassword()
    'getPasswordAdmin = BasicPassword
End Sub

Sub getAdminOldPassword()
    'getPasswordAdmin = OldPassword
End Sub


Sub changePassword()
    Call setSystemPassword
    Call setPasswordToAllSheets(OldPassword, False)
    'Call setPasswordToAllSheets(BasicPassword, True)
End Sub

Sub setPasswordToAllSheets(pwd As String, protect As Boolean)
'Setta o Elimina (in base al parametro passato) la password ai fogli presenti nella lista dei fogli protetti
    
    Dim wks As Worksheet
    For Each wks In ActiveWorkbook.Worksheets
    
    If (Not iswksInProtectList(wks)) Then GoTo continue
    
        If protect Then
            wks.protect Password:=pwd, DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=False
        Else
            wks.Unprotect pwd
        End If
    
continue:
    Next
End Sub
Public Function iswksInProtectList(wks As Worksheet)
    Dim test As Boolean
    test = False
    Select Case wks.name
   
        Case foglioDETTAGLIO, foglioDETTAGLIO_COSTO_ORARIO, foglioTENDINE, foglioCONFIG, foglioRA_11_PID, foglioSA_21_PID, foglioRA_11_PND, foglioSA_21_PND, foglioRA_13_ATT, foglioSA_23_ATT, foglioDETTAGLIO_ATTREZZATURE, foglioRA_14_CON, foglioSA_24_CON, foglioRA_15_MAT, foglioRA_15_MAG, foglioSA_25_MAT, foglioSA_25_MAG, foglioRA_16_BIMM, foglioSA_26_BIMM, foglioQS, foglioQS_CNR, foglioQS_BANCA, foglioISTRUZIONI, foglioSPECIFICHE, foglioSeparatore
            test = True
        
   End Select
   
   iswksInProtectList = test
    
End Function
Sub changeCurrentProtectionStatusToAllSheets()
    Dim wks As Worksheet
    For Each wks In ActiveWorkbook.Worksheets
            
    If (Not iswksInProtectList(wks)) Then GoTo continue
    wks.Activate
    
    If Not wks.ProtectContents Then
         ActiveSheet.protect Password:=BasicPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=False
    Else
        ActiveSheet.Unprotect BasicPassword
    End If

continue:
    Next

End Sub

Sub protectCell(sheetName As String, row As Long, col As Long, lockedflag As Boolean, alsoWorksheet As Boolean)
    '--------------------------------------------------------
    ' blocca/sbocca la cella (row,col) di foglio
    ' se lockedflag |fffd| true la blocca,altrimenti la sbocca
    ' alsoWorksheet, blocca alla fine anche il foglio di lavoro,
    ' nell eventualit|fffd| che sia precedentemente bloccato lo sblocca prima di operare sulla cella
    '--------------------------------------------------------
    If (alsoWorksheet) Then
        Worksheets(sheetName).Unprotect BasicPassword
    End If
    With Worksheets(sheetName).Cells(row, col)
        .Locked = lockedflag
        .FormulaHidden = lockedflag
    End With
    If (alsoWorksheet) Then
        Worksheets(sheetName).protect Password:=BasicPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=False
    End If
End Sub

Sub protectSheet(sheetName As String, protect As Boolean)
    
    If protect Then
        Worksheets(sheetName).protect Password:=BasicPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=False
    Else
        Worksheets(sheetName).Unprotect BasicPassword
    End If

End Sub

Sub protectCurrentSheet(protect As Boolean)
    'Dim wks As Sheets
    'wks = ActiveSheet
  
    If protect Then
        ActiveSheet.protect Password:=BasicPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=False
    Else
        ActiveSheet.Unprotect BasicPassword
    End If

End Sub

Sub protectCurrentSheet_pwd(pwd As String, protect As Boolean)
    'Dim wks As Sheets
    'wks = ActiveSheet
  
    If protect Then
        ActiveSheet.protect Password:=pwd, DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=False
    Else
        ActiveSheet.Unprotect pwd
    End If

End Sub

Sub changeAllSheetsPassword()
    Dim wks As Worksheet
    For Each wks In ActiveWorkbook.Worksheets
        If (Not iswksInProtectList(wks)) Then GoTo continue
    
        wks.Unprotect OldPassword
        wks.protect Password:=BasicPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=False
continue:
    Next
End Sub

Public Sub addValidazione_TOTALE()
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="0"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = ""
        .InputMessage = "Non editabile per PERSONALE o ATTREZZATURE"
        .ErrorMessage = "Sono ammessi solo numeri decimali."
        .ShowInput = True
        .ShowError = True
    End With
End Sub


Public Sub addValidazione_SOLO_Numeri_INTERI()
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="0"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = ""
        .InputMessage = ""
        .ErrorMessage = "Sono ammessi solo numeri interi."
        .ShowInput = True
        .ShowError = True
    End With
End Sub

Public Sub addValidazione_SOLO_Numeri_DECIMALI()
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="0"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = ""
        .InputMessage = ""
        .ErrorMessage = "Sono ammessi solo numeri decimali."
        .ShowInput = True
        .ShowError = True
    End With
End Sub

Public Sub addValidazione_ANNO()
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlBetween, Formula1:="1900", Formula2:="3000"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = ""
        .InputMessage = ""
        .ErrorMessage = "Immettere un anno utilizzando 4 cifre [es.: 2015]"
        .ShowInput = True
        .ShowError = True
    End With
End Sub

Public Sub addValidazione_DATA()
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateDate, AlertStyle:=xlValidAlertStop, Operator:= _
        xlBetween, Formula1:=DATA_LIMIT_DOWN, Formula2:=DATA_LIMIT_UP
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = ""
        .InputMessage = ""
        .ErrorMessage = "Immettere una data in un formato valido"
        .ShowInput = True
        .ShowError = True
    End With
End Sub
Public Sub addValidazione_PERCENTUALE()
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="0", Formula2:="100"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = ""
        .InputMessage = ""
        .ErrorMessage = "Inserire un valore percentuale compreso tra 0 e 100"
        .ShowInput = True
        .ShowError = True
    End With
                    
End Sub
Public Sub addValidazione_MESI()
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlBetween, Formula1:="0", Formula2:="12"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = ""
        .InputMessage = ""
        .ErrorMessage = "Sono ammessi solo numeri tra 0 e 12."
        .ShowInput = True
        .ShowError = True
    End With
End Sub
Public Sub addValidazione_MESI_CUSTOM()
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="2"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = ""
        .InputMessage = ""
        .ErrorMessage = "Sono ammessi solo numeri maggiori di 1"
        .ShowInput = True
        .ShowError = True
    End With
End Sub


Public Sub addListaVociDiCosto(rigaCorrente As Integer, blocca As Boolean)
    If (Not blocca) Then
        Dim ind As String
        ind = "=" & getAddressByName("LISTA_SEDI")
        With Range("C" & rigaCorrente).Validation
            .Delete
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
            xlBetween, Formula1:="=Tendine!$D$3:$D$19"
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = ""
            .InputMessage = "Selezionare una voce di costo"
            .ErrorMessage = ""
            .ShowInput = True
            .ShowError = True
        End With
    Else
        Range("C" & rigaCorrente).Validation.Delete
    End If
End Sub


Public Sub addListaSedi(rigaCorrente As Integer, cancella As Boolean)

 If (Not cancella) Then
        Dim ind As String
        ind = "=" & getAddressByName("LISTA_SEDI")
        With Range("B" & rigaCorrente).Validation
            .Delete
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
            xlBetween, Formula1:=ind
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = ""
            .InputMessage = ""
            .ErrorMessage = "Selezionare una sede tra quelle presenti in lista"
            .ShowInput = True
            .ShowError = True
        End With
Else
    Range("B" & rigaCorrente).Validation.Delete
End If
       
End Sub


Public Sub addListaTIPOLOGIA_ATTREZZATURA()
    With Selection.Validation
       .Delete
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
            xlBetween, Formula1:="=Tendine!$B$3:$B$6"
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = ""
            .InputMessage = ""
            .ErrorMessage = ""
            .ShowInput = True
            .ShowError = True
    End With
End Sub


Public Sub setCNR_BANCA(rigaCorrente As Integer)
Attribute setCNR_BANCA.VB_ProcData.VB_Invoke_Func = " \n14"
    Range("AS" & rigaCorrente & ":AW" & rigaCorrente).Select
    Selection.NumberFormat = FORMATO_VALUTA
    
    Range("AT" & rigaCorrente).Select
    ActiveCell.FormulaR1C1 = "=RC43-RC45"
    
    Range("AV" & rigaCorrente).Select
    ActiveCell.FormulaR1C1 = "=RC46-RC47"
    
    Range("AW" & rigaCorrente).Select
    ActiveCell.FormulaR1C1 = "=RC45+RC47"
    
    Range("AS" & rigaCorrente & ",AU" & rigaCorrente & ",AX" & rigaCorrente & ",AY" & rigaCorrente).Locked = False
    
End Sub

Sub lastSub()
Call changeCurrentProtectionStatusToAllSheets
End Sub

Sub formatta()
Attribute formatta.VB_ProcData.VB_Invoke_Func = " \n14"
'
' formatta Macro
'

'
    Sheets("DETTAGLIO").Select
    Range("C5").Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateDate, AlertStyle:=xlValidAlertStop, Operator:= _
        xlGreater, Formula1:="1/1/1900"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Errore di Validazione"
        .InputMessage = ""
        .ErrorMessage = "Inserire una data in un formato valido"
        .ShowInput = True
        .ShowError = True
    End With
    Range("C5").Select
    ActiveCell.FormulaR1C1 = "1/3/1900"
    Range("C5").Select
    ActiveCell.FormulaR1C1 = "1/3/1900"
    Range("C7").Select
End Sub


Sub destroyAll()

    Sheets(foglioDETTAGLIO).Select
    
    application.ScreenUpdating = False
    Call setPasswordToAllSheets(BasicPassword, False)
    Call specialResetSCHEMA_REND
    ActiveWorkbook.Save
    Call setPasswordToAllSheets(BasicPassword, True)
    MsgBox "Operazione terminata."
    DestroyForm.Hide
    
    application.ScreenUpdating = True
    
    Dim a
    a = MsgBox("Essendo stato cancellato il Bando di riferimento lo schema REND verra' chiuso. Al successivo riavvio selezionare nuovamente il bando.", vbInformation + vbOKOnly)
    
    ThisWorkbook.Saved = True
    application.Quit
End Sub
Sub Macro1()
Attribute Macro1.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro1 Macro
'

'
    Sheets("ISTRUZIONI IT").Select
    Sheets("config").Visible = True
    Sheets("config").Select
    ActiveWindow.SelectedSheets.Visible = False
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)






End Sub


Attribute VB_Name = "Sheet19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    
    application.EnableEvents = False
    selectionChange = True
        
    If Target.Column = 3 And Target.row > rigaTabellone Then
        'If Target.Cells.Count > 1 Or IsEmpty(Target) Then Exit Sub
        If Target.Cells.Count > 1 Then Exit Sub
        OldVal = Target.Value
        'MsgBox "changeSelection: " & OldVal
    End If
    
'    If Target.Column = 5 And Target.Row = 3 Then
'        'If Target.Cells.Count > 1 Or IsEmpty(Target) Then Exit Sub
'        If Target.Cells.Count > 1 Then Exit Sub
'        OldVal = Target.Value
'        'MsgBox "changeSelection: " & OldVal
'    End If
    
    If Target.Column = 24 And Target.row > rigaTabellone Then
        'If Target.Cells.Count > 1 Or IsEmpty(Target) Then Exit Sub
        If Target.Cells.Count > 1 Then Exit Sub
        OldVal = Target.Value
        'MsgBox "changeSelection: " & OldVal
    End If
    
    If Target.Column = 43 _
    And (Target.row > rigaTabellone Or Target.row = Range(getAddressByName("TOTALONE_IMPORTO")).row) Then
            'MsgBox "autofit"
            
                    
            If ActiveSheet.ProtectContents Then
                Target.Worksheet.Unprotect "FCS2468"
                Columns("AQ:AQ").EntireColumn.AutoFit
                Target.Worksheet.protect Password:="FCS2468", DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=False
            Else
                Columns("AQ:AQ").EntireColumn.AutoFit
            End If
            
            Target.Select
            application.EnableEvents = True
            Exit Sub


    End If

    
    application.EnableEvents = True
End Sub


Private Sub Worksheet_Change(ByVal Target As Range)

    Dim rigaCorrente As Integer
    rigaCorrente = Target.row
    
    application.EnableEvents = False
    
    Call settingConstants
    If Target.Column = 2 And Target.row > rigaTabellone Then
        'If Target.Cells.Count > 1 Or IsEmpty(Target) Then Exit Sub
        If Target.Cells.Count > 1 Then
            application.EnableEvents = True
            Exit Sub
        End If
        NewVal = Target.Value
        'MsgBox "change: " & NewVal
    End If
    
    If Target.Column = 3 And Target.row > rigaTabellone Then
        'If Target.Cells.Count > 1 Or IsEmpty(Target) Then Exit Sub
        If Target.Cells.Count > 1 Then
            application.EnableEvents = True
            Exit Sub
        End If
        NewVal = Target.Value
        'MsgBox "change: " & NewVal
    End If
    
'   If Target.Column = 5 And Target.Row = 3 Then
'        'If Target.Cells.Count > 1 Or IsEmpty(Target) Then Exit Sub
'        If Target.Cells.Count > 1 Then
'            application.EnableEvents = True
'            Exit Sub
'        End If
'
'        ' If Not selectionChange Then
'        '   OldVal = NewVal
'        ' End If
'        If NewVal <> "reset" Then
'            NewVal = Target.Value
'        End If
'        'MsgBox "change: " & NewVal
'    End If
    
    If Target.Column = 24 And Target.row > rigaTabellone Then
        'If Target.Cells.Count > 1 Or IsEmpty(Target) Then Exit Sub
        If Target.Cells.Count > 1 Then
            application.EnableEvents = True
            Exit Sub
        End If
        NewVal = Target.Value
        'MsgBox "changeSelection: " & NewVal
    End If
   
    Select Case Target.Column    'or target.row, column...
        Case "2"
            Target.Value = UCase(NewVal)
            
        Case "3"
            'MsgBox Target.Row
            'MsgBox OldVal
                       
            If Target.row > rigaTabellone Then
                If (Not controllaSedi) Then
                    Target.Value = OldVal
                    application.EnableEvents = True
                    Exit Sub
                End If
                
                If (Not controllaINFO_RIEPILOGO_PROGETTO) Then
                    Target.Value = OldVal
                    application.EnableEvents = True
                    Exit Sub
                End If
                
            
                Call setSystemPassword
                
                Target.Worksheet.Unprotect BasicPassword
                
                Call addListaSedi(rigaCorrente, False)
                Select Case Target.Value
                        
                    Case "R_A.1.1 Personale interno dip", "S_A.2.1 Personale interno dip"
                          If (OldVal <> "S_A.2.1 Personale interno dip" And OldVal <> "R_A.1.1 Personale interno dip") Then
                                If Attenzione(rigaCorrente) = 1 Then
                                    Call PROTECT_ROW_RA11_PID(rigaCorrente, False)
                                    Call setCNR_BANCA(rigaCorrente)
                                    OldVal = NewVal
                                    'ritorno
                                    Range("B" & rigaCorrente).Select
                                Else
                                    Target.Value = OldVal
                                End If
                            End If
                        
                    Case "R_A.1.1 Personale interno non dip", "S_A.2.1 Personale interno non dip"
                        If (OldVal <> "S_A.2.1 Personale interno non dip" And OldVal <> "R_A.1.1 Personale interno non dip") Then
                                If Attenzione(rigaCorrente) = 1 Then
                                    Call PROTECT_ROW_RA11_PIND(rigaCorrente, False)
                                    Call setCNR_BANCA(rigaCorrente)
                                    OldVal = NewVal
                                    'ritorno
                                    Range("B" & rigaCorrente).Select
                                Else
                                    Target.Value = OldVal
                                End If
                            End If
                        
                    Case "R_A.1.2 Spese Generali", "S_A.2.2 Spese Generali"
                        If (OldVal <> "S_A.2.2 Spese Generali" And OldVal <> "R_A.1.2 Spese Generali") Then
                                If Attenzione(rigaCorrente) = 1 Then
                                    Call PROTECT_ROW_RA12_SG(rigaCorrente, False)
                                    Call setCNR_BANCA(rigaCorrente)
                                    OldVal = NewVal
                                    'ritorno
                                    Range("B" & rigaCorrente).Select
                                Else
                                    Target.Value = OldVal
                                End If
                            End If
                        
                    Case "R_A.1.3 Strumenti e attrezzature", "S_A.2.3 Strumenti e attrezzature"
                           If (OldVal <> "S_A.2.3 Strumenti e attrezzature" And OldVal <> "R_A.1.3 Strumenti e attrezzature") Then
                                If Attenzione(rigaCorrente) = 1 Then
                                    Call PROTECT_ROW_RA13_SA(rigaCorrente, False)
                                    Call setCNR_BANCA(rigaCorrente)
                                    OldVal = NewVal
                                    'ritorno
                                    Range("B" & rigaCorrente).Select
                                Else
                                    Target.Value = OldVal
                                End If
                            End If
                        
                    Case "R_A.1.4 Servizi di consulenza", "S_A.2.4 Servizi di consulenza"
                        If (OldVal <> "S_A.2.4 Servizi di consulenza" And OldVal <> "R_A.1.4 Servizi di consulenza") Then
                            If Attenzione(rigaCorrente) = 1 Then
                                Call PROTECT_ROW_RA14_SC(rigaCorrente, False)
                                Call setCNR_BANCA(rigaCorrente)
                                OldVal = NewVal
                                'ritorno
                                Range("B" & rigaCorrente).Select
                            Else
                                Target.Value = OldVal
                            End If
                        End If
                        
                    Case "R_A.1.5 Materiali e forniture", "S_A.2.5 Materiali e forniture"
                        If (OldVal <> "S_A.2.5 Materiali e forniture" And OldVal <> "R_A.1.5 Materiali e forniture") Then
                            If Attenzione(rigaCorrente) = 1 Then
                                Call PROTECT_ROW_RA15_MF(rigaCorrente, False)
                                Call setCNR_BANCA(rigaCorrente)
                                OldVal = NewVal
                                'ritorno
                                Range("B" & rigaCorrente).Select
                            Else
                                 Target.Value = OldVal
                            End If
                        End If
                        
                    Case "R_A.1.5 Materiali e forniture Magazzino", "S_A.2.5 Materiali e forniture Magazzino"
                        If (OldVal <> "S_A.2.5 Materiali e forniture Magazzino" And OldVal <> "R_A.1.5 Materiali e forniture Magazzino") Then
                            If Attenzione(rigaCorrente) = 1 Then
                                Call PROTECT_ROW_RA15_MFM(rigaCorrente, False)
                                Call setCNR_BANCA(rigaCorrente)
                                OldVal = NewVal
                                'ritorno
                                Range("B" & rigaCorrente).Select
                            Else
                                Target.Value = OldVal
                            End If
                        End If
                  
                    Case "R_A.1.6 Beni Immateriali", "S_A.2.6 Beni Immateriali"
                        If (OldVal <> "S_A.2.6 Beni Immateriali" And OldVal <> "R_A.1.6 Beni Immateriali") Then
                            If Attenzione(rigaCorrente) = 1 Then
                                Call PROTECT_ROW_RA16_BI(rigaCorrente, False)
                                Call setCNR_BANCA(rigaCorrente)
                                OldVal = NewVal
                                'ritorno
                                Range("B" & rigaCorrente).Select
                            Else
                                Target.Value = OldVal
                            End If
                        End If
                        
                    
                    Case Else
                        If Attenzione(rigaCorrente) = 1 Then
                            RESET_ROW (rigaCorrente)
                            Call addListaSedi(rigaCorrente, True)
                            OldVal = NewVal
                            Range(Target.Address).Select
                        Else
                            Target.Value = OldVal
                        End If
                End Select
                

                'MsgBox "rigaCorrente: " & rigaCorrente & "(rigaTabellone + 1)): " & (rigaTabellone + 1)
                'MsgBox Last_Real_Empty_Row_TABELLONE(3)
                If (rigaCorrente = (rigaTabellone + 1)) Then
                    Call selection_editabile
                End If
                Target.Worksheet.protect Password:=BasicPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=False
            End If
            
'        Case "5" ' Gestione Bando
'            If Target.Row = "3" Then
'
'                If (NewVal = "reset") Then
'                    Call cambioBando(OldVal, NewVal)
'                Else
'                    If (OldVal = "") Then
'                        If (NewVal <> "") Then
'                            Call cambioBando(OldVal, NewVal)
'                        Else
'                            Range("DETT_INFO_BANDO").Value = ""
'                        End If
'                    Else
'                        Range("DETT_INFO_BANDO").Value = OldVal
'                        MsgBox "Una volta impostato, non e' piu' possibile cambiare il bando.", vbInformation
'
'                    End If
'                End If
'
'            End If
        Case "24"
           If Target.row > rigaTabellone Then

                If (Trim(Range("B" & rigaCorrente).Value) = "") Then
                    MsgBox "Selezionare la SEDE prima di procedere con la TIPOLOGIA ATTREZZATURA"
                    Target.Value = OldVal
                    Range("B" & rigaCorrente).Select
                    application.EnableEvents = True
                    Exit Sub
                End If
                Call setSystemPassword
                Target.Worksheet.Unprotect BasicPassword
                
                Select Case Target.Value
                        
                    Case "beni ammortizzabili"
                        If (OldVal <> "beni ammortizzabili") Then
                            Call PROTECT_SUB_ROW_RA13_SA_BA(rigaCorrente, False)
                        End If
                    Case "beni non ammortizzabili"
                        If (OldVal <> "beni non ammortizzabili") Then
                            Call PROTECT_SUB_ROW_RA13_SA_BNA(rigaCorrente, False)
                        End If
                    Case "beni in leasing"
                        If (OldVal <> "beni in leasing") Then
                            Call PROTECT_SUB_ROW_RA13_SA_LEA(rigaCorrente, False)
                        End If
                    Case Else
                         Call RESET_SUB_ROW_RA13_SA(rigaCorrente)
                          'ritorno
                          Range("X" & rigaCorrente).Select
                
                End Select
                Target.Worksheet.protect Password:=BasicPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=False
           End If
        
    End Select
    
    selectionChange = False
    application.EnableEvents = True
End Sub

Sub PROTECT_ROW_RA11_PID(rigaCorrente As Integer, blocca As Boolean)

        Dim intervallo As String
        Dim vdc As String 'voce di costo
        vdc = "C" & rigaCorrente & ","
        
        Call RESET_ROW(rigaCorrente)
        ' ---------------------------------------------------------------------------------------
        intervallo = vdc & "B" & rigaCorrente & ",D" & rigaCorrente & ":H" & rigaCorrente & ",J" & rigaCorrente & ":R" & rigaCorrente & ",AQ" & rigaCorrente & ",AR" & rigaCorrente
        'MsgBox intervallo
        Range(intervallo).Locked = blocca
        
        If (Not blocca) Then
            Range(intervallo).Interior.ColorIndex = coloreCelleEditabili
            ' ---------------------------------------------------------------------------------------
            ' formattazione delle celle che contengono importi
            ' ---------------------------------------------------------------------------------------
            Range("J" & rigaCorrente & ":O" & rigaCorrente & ",Q" & rigaCorrente & ",AQ" & rigaCorrente).Select
            Selection.NumberFormat = FORMATO_VALUTA
            
            ' ---------------------------------------------------------------------------------------
            ' formattazione delle celle che contengono date
            ' ---------------------------------------------------------------------------------------
            
            
            ' ---------------------------------------------------------------------------------------
            ' aggiungo le formule
            ' ---------------------------------------------------------------------------------------
            Range("O" & rigaCorrente).Select
            ActiveCell.FormulaR1C1 = "=R" & rigaCorrente & "C10+R" & rigaCorrente & "C11+R" & rigaCorrente & "C12+R" & rigaCorrente & "C13+R" & rigaCorrente & "C14"
            Call selection_formattazione_formula
            
            Range("Q" & rigaCorrente).Select
            'ActiveCell.FormulaR1C1 = "=R" & rigaCorrente & "C15/R" & rigaCorrente & "C16"
            ActiveCell.FormulaR1C1 = "=IF(R" & rigaCorrente & "C16=0,0,round(R" & rigaCorrente & "C15/R" & rigaCorrente & "C16,2))"
            Call selection_formattazione_formula
            
            Range("AQ" & rigaCorrente).Select
            ActiveCell.FormulaR1C1 = "=RC17*RC8"
            Call selection_formattazione_formula
            
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: CELLA 'TOTALE'
            ' ---------------------------------------------------------------------------------------
            'Range("AQ" & rigaCorrente).Select
            'Call addValidazione_TOTALE
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: solo numeri interi
            ' ---------------------------------------------------------------------------------------
            Range("H" & rigaCorrente & ",P" & rigaCorrente).Select
            Call addValidazione_SOLO_Numeri_INTERI
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: solo numeri decimali
            ' ---------------------------------------------------------------------------------------
            Range("J" & rigaCorrente & ":N" & rigaCorrente).Select
            Call addValidazione_SOLO_Numeri_DECIMALI
            ' ---------------------------------------------------------------------------------------
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: ANNO
            ' ---------------------------------------------------------------------------------------
            Range("R" & rigaCorrente).Select
            Call addValidazione_ANNO
            ' ---------------------------------------------------------------------------------------
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: DATE
            ' ---------------------------------------------------------------------------------------
            
            
            
        Else
            Call RESET_ROW(rigaCorrente)
    
        End If
       

End Sub

Sub PROTECT_ROW_RA11_PIND(rigaCorrente As Integer, blocca As Boolean)

        Dim intervallo As String
        Dim vdc As String 'voce di costo
        vdc = "C" & rigaCorrente & ","
        
        Call RESET_ROW(rigaCorrente)
        ' ---------------------------------------------------------------------------------------
        intervallo = vdc & "B" & rigaCorrente & ",D" & rigaCorrente & ":I" & rigaCorrente & ",S" & rigaCorrente & ",AQ" & rigaCorrente & ",AR" & rigaCorrente
        'MsgBox intervallo
        Range(intervallo).Locked = blocca
        
        If (Not blocca) Then
            Range(intervallo).Interior.ColorIndex = coloreCelleEditabili
            
            ' ---------------------------------------------------------------------------------------
            ' formattazione delle celle che contengono importi
            ' ---------------------------------------------------------------------------------------
            Range("I" & rigaCorrente & ",AQ" & rigaCorrente).Select
            Selection.NumberFormat = FORMATO_VALUTA
            
            ' ---------------------------------------------------------------------------------------
            ' formattazione delle celle che contengono date
            ' ---------------------------------------------------------------------------------------
            Range("S" & rigaCorrente).Select
            Selection.NumberFormat = FORMATO_DATA
            
            ' ---------------------------------------------------------------------------------------
            ' aggiungo le formule
            ' ---------------------------------------------------------------------------------------
            Range("AQ" & rigaCorrente).Select
            ActiveCell.FormulaR1C1 = "=RC9*RC8"
            Call selection_formattazione_formula
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: CELLA 'TOTALE'
            ' ---------------------------------------------------------------------------------------
            'Range("AQ" & rigaCorrente).Select
            'Call addValidazione_TOTALE
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: solo numeri interi
            ' ---------------------------------------------------------------------------------------
            Range("H" & rigaCorrente).Select
            Call addValidazione_SOLO_Numeri_INTERI
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: solo numeri decimali
            ' ---------------------------------------------------------------------------------------
            Range("I" & rigaCorrente).Select
            Call addValidazione_SOLO_Numeri_DECIMALI
            ' ---------------------------------------------------------------------------------------
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: ANNO
            ' ---------------------------------------------------------------------------------------
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: DATE
            ' ---------------------------------------------------------------------------------------
            Range("S" & rigaCorrente).Select
            Call addValidazione_DATA
            
        
           
        Else
            Call RESET_ROW(rigaCorrente)
    
        End If
        
End Sub

Sub PROTECT_ROW_RA12_SG(rigaCorrente As Integer, blocca As Boolean)
        
        Dim intervallo As String
        Dim vdc As String 'voce di costo
        vdc = "C" & rigaCorrente & ","
        
        Call RESET_ROW(rigaCorrente)
        ' ---------------------------------------------------------------------------------------
        intervallo = vdc & "B" & rigaCorrente & ",AQ" & rigaCorrente & ",AR" & rigaCorrente
        'MsgBox intervallo
        Range(intervallo).Locked = blocca
        
        If (Not blocca) Then
            Range(intervallo).Interior.ColorIndex = coloreCelleEditabili
            ' ---------------------------------------------------------------------------------------
            ' formattazione delle celle che contengono importi
            ' ---------------------------------------------------------------------------------------
            Range("AQ" & rigaCorrente).Select
            Selection.NumberFormat = FORMATO_VALUTA
            
            ' ---------------------------------------------------------------------------------------
            ' formattazione delle celle che contengono date
            ' ---------------------------------------------------------------------------------------
            
            
            ' ---------------------------------------------------------------------------------------
            ' aggiungo le formule
            ' ---------------------------------------------------------------------------------------
            
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: CELLA 'TOTALE'
            ' ---------------------------------------------------------------------------------------
            Range("AQ" & rigaCorrente).Select
            Call addValidazione_TOTALE
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: solo numeri interi
            ' ---------------------------------------------------------------------------------------
            
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: solo numeri decimali
            ' ---------------------------------------------------------------------------------------
            
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: ANNO
            ' ---------------------------------------------------------------------------------------
            
            
            ' ---------------------------------------------------------------------------------------
            'VALIDAZIONE: DATE
            ' ---------------------------------------------------------------------------------------
            
            
        Else
            Call RESET_ROW(rigaCorrente)
    
        End If
    
        
        
End Sub
Sub PROTECT_ROW_RA13_SA(rigaCorrente As Integer, blocca As Boolean)

        Dim intervallo As String
        Dim vdc As String 'voce di costo
        vdc = "C" & rigaCorrente & ","
        
        Call RESET_ROW(rigaCorrente)
        ' ---------------------------------------------------------------------------------------
        intervallo = vdc & "B" & rigaCorrente & ",D" & rigaCorrente & ",S" & rigaCorrente & ":W" & rigaCorrente & ",X" & rigaCorrente & ",AL" & rigaCorrente & ",AP" & rigaCorrente & ",AQ" & rigaCorrente & ",AR" & rigaCorrente
        'MsgBox intervallo
        Range(intervallo).Locked = blocca
        
        If (Not blocca) Then
            Range(intervallo).Interior.ColorIndex = coloreCelleEditabili
            Range("X" & rigaCorrente).Select
            Call addListaTIPOLOGIA_ATTREZZATURA
            
            ' ---------------------------------------------------------------------------------------
            ' formattazione delle celle che contengono importi
            ' ---------------------------------------------------------------------------------------
            Range("AL" & rigaCorrente & ",AP" & rigaCorrente & ",AQ" & rigaCorrente).Select
            Selection.NumberFormat = FORMATO_VALUTA
            Range("AQ" & rigaCorrente).Select
            Call selection_formattazione_formula
            Selection.Value = 0   'valore di default
            
            ' ---------------------------------------------------------------------------------------
            ' formattazione delle celle che contengono date
            ' ---------------------------------------------------------------------------------------
            Range("S" & rigaCorrente & ",W" & rigaCorrente).Select
            Selection.NumberFormat = FORMATO_DATA
            
            ' ---------------------------------------------------------------------------------------
            ' aggiungo le formule
            ' ---------------------------------------------------------------------------------------
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: CELLA 'TOTALE'
            ' ---------------------------------------------------------------------------------------
            Range("AQ" & rigaCorrente).Select
            Call addValidazione_TOTALE
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: solo numeri interi
            ' ---------------------------------------------------------------------------------------
            Range("U" & rigaCorrente).Select
            Call addValidazione_SOLO_Numeri_INTERI
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: solo numeri decimali
            ' ---------------------------------------------------------------------------------------
            Range("AL" & rigaCorrente & ",AP" & rigaCorrente).Select
            Call addValidazione_SOLO_Numeri_DECIMALI
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: ANNO
            ' ---------------------------------------------------------------------------------------
            
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: DATE
            ' ---------------------------------------------------------------------------------------
            Range("S" & rigaCorrente & ",W" & rigaCorrente).Select
            Call addValidazione_DATA
            
            
            
            
        Else
            Call RESET_ROW(rigaCorrente)
          
        End If
    
End Sub

Sub PROTECT_SUB_ROW_RA13_SA_BA(rigaCorrente As Integer, blocca As Boolean)
    
        Dim intervallo As String
        intervallo = "Y" & rigaCorrente & ":AA" & rigaCorrente & ",AC" & rigaCorrente & ":AE" & rigaCorrente
        
        Call RESET_SUB_ROW_RA13_SA(rigaCorrente)
        ' ---------------------------------------------------------------------------------------
        
        'MsgBox intervallo
        Range(intervallo).Locked = blocca
        
        If (Not blocca) Then
            Range(intervallo).Interior.ColorIndex = coloreCelleEditabili
            
            ' ---------------------------------------------------------------------------------------
            ' formattazione delle celle che contengono formule
            ' ---------------------------------------------------------------------------------------
            Range("AB" & rigaCorrente).Select
            Call selection_formattazione_formula
            Selection.Value = 0   'valore di default
            
            Range("AE" & rigaCorrente).Select
            Call selection_formattazione_formula
            Selection.Value = 0   'valore di default
            
            ' ---------------------------------------------------------------------------------------
            ' formattazione delle celle che contengono importi
            ' ---------------------------------------------------------------------------------------
            Range("Z" & rigaCorrente & ",AE" & rigaCorrente).Select
            Selection.NumberFormat = FORMATO_VALUTA
            
            
            ' ---------------------------------------------------------------------------------------
            ' formattazione delle celle che contengono date
            ' ---------------------------------------------------------------------------------------
            Range("Y" & rigaCorrente).Select
            Selection.NumberFormat = FORMATO_DATA
            
            ' ---------------------------------------------------------------------------------------
            ' formattazione delle celle che contengono dati percentuale
            ' ---------------------------------------------------------------------------------------
            Range("AA" & rigaCorrente & ",AD" & rigaCorrente).Select
            Selection.NumberFormat = FORMATO_PERCENTUALE
    
            ' ---------------------------------------------------------------------------------------
            ' aggiungo le formule
            ' ---------------------------------------------------------------------------------------
            Range("AB" & rigaCorrente).Select
            'ActiveCell.FormulaR1C1 = "=IF(TRIM(RC25)="""",0, IF(DAY(R9C5) >=DAY(RC[-3]),0,-1)+(YEAR(R9C5)-YEAR(RC[-3]))*12+MONTH(R9C5)-MONTH(RC[-3])       )"
            'ActiveCell.FormulaR1C1 = "=IF(TRIM(RC25)="""",0, IF(DAY(R9C5) >=DAY(RC[-3]),1,0)+(YEAR(R9C5)-YEAR(RC[-3]))*12+MONTH(R9C5)-MONTH(RC[-3])       )"
            ActiveCell.FormulaR1C1 = "=IF(TRIM(RC25)="""",0,Round(Days360(RC[-3],R9C5)/30,0))"
            
            Range("AE" & rigaCorrente).Select
            'ActiveCell.FormulaR1C1 = "=IF(TRIM(RC29)="""",0,RC26*(RC28/RC29)*RC30/100)"
            ActiveCell.FormulaR1C1 = "=IF(TRIM(RC29)="""",0,IF(RC28>RC29,(RC26*RC30)/100,(RC26*(RC28/RC29)*RC30/100) ) )"
            
            
            Range("AQ" & rigaCorrente).Select
            ActiveCell.FormulaR1C1 = "=RC31"
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: CELLA 'TOTALE'
            ' ---------------------------------------------------------------------------------------
            Range("AE" & rigaCorrente).Select
            Call addValidazione_SOLO_Numeri_DECIMALI
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: solo numeri interi
            ' ---------------------------------------------------------------------------------------
           
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: solo numeri decimali
            ' ---------------------------------------------------------------------------------------
            Range("Z" & rigaCorrente).Select
            Call addValidazione_SOLO_Numeri_DECIMALI
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: ANNO
            ' ---------------------------------------------------------------------------------------
            
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: DATE
            ' ---------------------------------------------------------------------------------------
            Range("Y" & rigaCorrente).Select
            Call addValidazione_DATA
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: MESI
            ' ---------------------------------------------------------------------------------------
            'Range("AB" & rigaCorrente).Select
            'Call addValidazione_MESI
            
             ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: PERCENTUALE
            ' ---------------------------------------------------------------------------------------
            Range("AA" & rigaCorrente & ",AD" & rigaCorrente).Select
            Call addValidazione_PERCENTUALE
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: CUSTOM
            ' ---------------------------------------------------------------------------------------
            Range("AC" & rigaCorrente).Select
            Call addValidazione_SOLO_Numeri_INTERI
            
            
            'ritorno
            Range("Y" & rigaCorrente).Select
            
            
            
            
        
        Else
            Call RESET_SUB_ROW_RA13_SA(rigaCorrente)
            'ritorno
            Range("X" & rigaCorrente).Select
        End If
        
        

End Sub
Sub PROTECT_SUB_ROW_RA13_SA_BNA(rigaCorrente As Integer, blocca As Boolean)
    
        Dim intervallo As String
        intervallo = "AI" & rigaCorrente & ":AK" & rigaCorrente
        
        Call RESET_SUB_ROW_RA13_SA(rigaCorrente)
        ' ---------------------------------------------------------------------------------------
        
        'MsgBox intervallo
        Range(intervallo).Locked = blocca
        
        If (Not blocca) Then
            Range(intervallo).Interior.ColorIndex = coloreCelleEditabili
            
            
            ' ---------------------------------------------------------------------------------------
            ' formattazione delle celle che contengono importi
            ' ---------------------------------------------------------------------------------------
            Range("AI" & rigaCorrente & ",AK" & rigaCorrente).Select
            Selection.NumberFormat = FORMATO_VALUTA
            
            Range("AK" & rigaCorrente).Select
            Call selection_formattazione_formula
            Selection.Value = 0   'valore di default
            
            ' ---------------------------------------------------------------------------------------
            ' formattazione delle celle che contengono date
            ' ---------------------------------------------------------------------------------------
            
            ' ---------------------------------------------------------------------------------------
            ' formattazione delle celle che contengono dati percentuale
            ' ---------------------------------------------------------------------------------------
            Range("AJ" & rigaCorrente).Select
            Selection.NumberFormat = FORMATO_PERCENTUALE
    
            ' ---------------------------------------------------------------------------------------
            ' aggiungo le formule
            ' ---------------------------------------------------------------------------------------
            Range("AK" & rigaCorrente).Select
            ActiveCell.FormulaR1C1 = "=(RC35*RC36)/100"
            Range("AQ" & rigaCorrente).Select
            ActiveCell.FormulaR1C1 = "=RC37"
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: CELLA 'TOTALE'
            ' ---------------------------------------------------------------------------------------
            Range("AK" & rigaCorrente).Select
            Call addValidazione_SOLO_Numeri_DECIMALI
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: solo numeri interi
            ' ---------------------------------------------------------------------------------------
           
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: solo numeri decimali
            ' ---------------------------------------------------------------------------------------
            Range("AI" & rigaCorrente).Select
            Call addValidazione_SOLO_Numeri_DECIMALI
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: ANNO
            ' ---------------------------------------------------------------------------------------
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: DATE
            ' ---------------------------------------------------------------------------------------
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: MESI
            ' ---------------------------------------------------------------------------------------
            
             ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: PERCENTUALE
            ' ---------------------------------------------------------------------------------------
            Range("AJ" & rigaCorrente).Select
            Call addValidazione_PERCENTUALE
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: CUSTOM
            ' ---------------------------------------------------------------------------------------
            
            'ritorno
            Range("AI" & rigaCorrente).Select
            
        
        Else
            Call RESET_SUB_ROW_RA13_SA(rigaCorrente)
            'ritorno
            Range("X" & rigaCorrente).Select
        End If
        
        

End Sub



Sub PROTECT_SUB_ROW_RA13_SA_LEA(rigaCorrente As Integer, blocca As Boolean)
    
        Dim intervallo As String
        intervallo = "AF" & rigaCorrente & ":AH" & rigaCorrente
        
        Call RESET_SUB_ROW_RA13_SA(rigaCorrente)
        ' ---------------------------------------------------------------------------------------
        
        'MsgBox intervallo
        Range(intervallo).Locked = blocca
        
        If (Not blocca) Then
            Range(intervallo).Interior.ColorIndex = coloreCelleEditabili
            
            
            ' ---------------------------------------------------------------------------------------
            ' formattazione delle celle che contengono importi
            ' ---------------------------------------------------------------------------------------
            Range("AF" & rigaCorrente & ",AH" & rigaCorrente).Select
            Selection.NumberFormat = FORMATO_VALUTA
            
            Range("AH" & rigaCorrente).Select
            Call selection_formattazione_formula
            Selection.Value = 0   'valore di default
            
            ' ---------------------------------------------------------------------------------------
            ' formattazione delle celle che contengono date
            ' ---------------------------------------------------------------------------------------
            
            ' ---------------------------------------------------------------------------------------
            ' formattazione delle celle che contengono dati percentuale
            ' ---------------------------------------------------------------------------------------
            Range("AG" & rigaCorrente).Select
            Selection.NumberFormat = FORMATO_PERCENTUALE
    
            ' ---------------------------------------------------------------------------------------
            ' aggiungo le formule
            ' ---------------------------------------------------------------------------------------
            Range("AH" & rigaCorrente).Select
            ActiveCell.FormulaR1C1 = "=(RC32*RC33)/100"
            Range("AQ" & rigaCorrente).Select
            ActiveCell.FormulaR1C1 = "=RC34"
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: CELLA 'TOTALE'
            ' ---------------------------------------------------------------------------------------
            Range("AH" & rigaCorrente).Select
            Call addValidazione_SOLO_Numeri_DECIMALI
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: solo numeri interi
            ' ---------------------------------------------------------------------------------------
           
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: solo numeri decimali
            ' ---------------------------------------------------------------------------------------
            Range("AF" & rigaCorrente).Select
            Call addValidazione_SOLO_Numeri_DECIMALI
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: ANNO
            ' ---------------------------------------------------------------------------------------
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: DATE
            ' ---------------------------------------------------------------------------------------
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: MESI
            ' ---------------------------------------------------------------------------------------
            
             ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: PERCENTUALE
            ' ---------------------------------------------------------------------------------------
            Range("AG" & rigaCorrente).Select
            Call addValidazione_PERCENTUALE
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: CUSTOM
            ' ---------------------------------------------------------------------------------------
            
            'ritorno
            Range("AF" & rigaCorrente).Select
            
        
        Else
            Call RESET_SUB_ROW_RA13_SA(rigaCorrente)
            'ritorno
            Range("X" & rigaCorrente).Select
        End If
        
        

End Sub

Sub RESET_SUB_ROW_RA13_SA(rigaCorrente As Integer)
   
    Dim intervallo As String
    ' ---------------------------------------------------------------------------------------
    intervallo = "Y" & rigaCorrente & ":AK" & rigaCorrente
    Call reset(intervallo)
    
    Range("AQ" & rigaCorrente).Select
    Selection.Value = 0   'valore di default
    
End Sub

Sub PROTECT_ROW_RA14_SC(rigaCorrente As Integer, blocca As Boolean)

        Dim intervallo As String
        Dim vdc As String 'voce di costo
        vdc = "C" & rigaCorrente & ","
        
        Call RESET_ROW(rigaCorrente)
        ' ---------------------------------------------------------------------------------------
        intervallo = vdc & "B" & rigaCorrente & ",D" & rigaCorrente & ",S" & rigaCorrente & ":T" & rigaCorrente & ",V" & rigaCorrente & ":W" & rigaCorrente & ",AL" & rigaCorrente & ",AQ" & rigaCorrente & ",AR" & rigaCorrente
        'MsgBox intervallo
        Range(intervallo).Locked = blocca
        
        If (Not blocca) Then
            Range(intervallo).Interior.ColorIndex = coloreCelleEditabili
            
            ' ---------------------------------------------------------------------------------------
            ' formattazione delle celle che contengono importi
            ' ---------------------------------------------------------------------------------------
            Range("AL" & rigaCorrente & ",AQ" & rigaCorrente).Select
            Selection.NumberFormat = FORMATO_VALUTA
            
            ' ---------------------------------------------------------------------------------------
            ' formattazione delle celle che contengono date
            ' ---------------------------------------------------------------------------------------
            Range("S" & rigaCorrente & ",W" & rigaCorrente).Select
            Selection.NumberFormat = FORMATO_DATA
            
            ' ---------------------------------------------------------------------------------------
            ' aggiungo le formule
            ' ---------------------------------------------------------------------------------------
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: CELLA 'TOTALE'
            ' ---------------------------------------------------------------------------------------
            Range("AQ" & rigaCorrente).Select
            Call addValidazione_TOTALE
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: solo numeri interi
            ' ---------------------------------------------------------------------------------------
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: solo numeri decimali
            ' ---------------------------------------------------------------------------------------
            Range("AL" & rigaCorrente).Select
            Call addValidazione_SOLO_Numeri_DECIMALI
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: ANNO
            ' ---------------------------------------------------------------------------------------
            
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: DATE
            ' ---------------------------------------------------------------------------------------
            Range("S" & rigaCorrente & ",W" & rigaCorrente).Select
            Call addValidazione_DATA
            
            
            
        Else
            Call RESET_ROW(rigaCorrente)
          
        End If
        

End Sub

Sub PROTECT_ROW_RA15_MF(rigaCorrente As Integer, blocca As Boolean)
        
        Dim intervallo As String
        Dim vdc As String 'voce di costo
        vdc = "C" & rigaCorrente & ","
        
        Call RESET_ROW(rigaCorrente)
        ' ---------------------------------------------------------------------------------------
        intervallo = vdc & "B" & rigaCorrente & ",D" & rigaCorrente & ",S" & rigaCorrente & ":W" & rigaCorrente & ",AL" & rigaCorrente & ",AQ" & rigaCorrente & ",AR" & rigaCorrente
        'MsgBox intervallo
        Range(intervallo).Locked = blocca
        
        If (Not blocca) Then
            Range(intervallo).Interior.ColorIndex = coloreCelleEditabili
            
            ' ---------------------------------------------------------------------------------------
            ' formattazione delle celle che contengono importi
            ' ---------------------------------------------------------------------------------------
            Range("AL" & rigaCorrente & ",AQ" & rigaCorrente).Select
            Selection.NumberFormat = FORMATO_VALUTA
            
            
            ' ---------------------------------------------------------------------------------------
            ' formattazione delle celle che contengono date
            ' ---------------------------------------------------------------------------------------
            Range("S" & rigaCorrente & ",W" & rigaCorrente).Select
            Selection.NumberFormat = FORMATO_DATA
            
            ' ---------------------------------------------------------------------------------------
            ' aggiungo le formule
            ' ---------------------------------------------------------------------------------------
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: CELLA 'TOTALE'
            ' ---------------------------------------------------------------------------------------
            Range("AQ" & rigaCorrente).Select
            Call addValidazione_TOTALE
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: solo numeri interi
            ' ---------------------------------------------------------------------------------------
            Range("U" & rigaCorrente).Select
            Call addValidazione_SOLO_Numeri_INTERI
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: solo numeri decimali
            ' ---------------------------------------------------------------------------------------
            Range("AL" & rigaCorrente).Select
            Call addValidazione_SOLO_Numeri_DECIMALI
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: ANNO
            ' ---------------------------------------------------------------------------------------
            
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: DATE
            ' ---------------------------------------------------------------------------------------
            Range("S" & rigaCorrente & ",W" & rigaCorrente).Select
            Call addValidazione_DATA
            
            
            
        Else
            Call RESET_ROW(rigaCorrente)
          
    End If


End Sub

Sub PROTECT_ROW_RA15_MFM(rigaCorrente As Integer, blocca As Boolean)
        
        Dim intervallo As String
        Dim vdc As String 'voce di costo
        vdc = "C" & rigaCorrente & ","
        
        Call RESET_ROW(rigaCorrente)
        ' ---------------------------------------------------------------------------------------
        intervallo = vdc & "B" & rigaCorrente & ",D" & rigaCorrente & ",U" & rigaCorrente & ",AM" & rigaCorrente & ":AO" & rigaCorrente & ",AQ" & rigaCorrente & ",AR" & rigaCorrente
        'MsgBox intervallo
        Range(intervallo).Locked = blocca
        
        If (Not blocca) Then
            Range(intervallo).Interior.ColorIndex = coloreCelleEditabili
            
            ' ---------------------------------------------------------------------------------------
            ' formattazione delle celle che contengono importi
            ' ---------------------------------------------------------------------------------------
            Range("AO" & rigaCorrente & ",AQ" & rigaCorrente).Select
            Selection.NumberFormat = FORMATO_VALUTA
            
            
            ' ---------------------------------------------------------------------------------------
            ' formattazione delle celle che contengono date
            ' ---------------------------------------------------------------------------------------
            Range("AM" & rigaCorrente).Select
            Selection.NumberFormat = FORMATO_DATA
            
            ' ---------------------------------------------------------------------------------------
            ' aggiungo le formule
            ' ---------------------------------------------------------------------------------------
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: CELLA 'TOTALE'
            ' ---------------------------------------------------------------------------------------
            Range("AQ" & rigaCorrente).Select
            Call addValidazione_TOTALE
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: solo numeri interi
            ' ---------------------------------------------------------------------------------------
            Range("U" & rigaCorrente).Select
            Call addValidazione_SOLO_Numeri_INTERI
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: solo numeri decimali
            ' ---------------------------------------------------------------------------------------
            Range("AO" & rigaCorrente).Select
            Call addValidazione_SOLO_Numeri_DECIMALI
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: ANNO
            ' ---------------------------------------------------------------------------------------
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: DATE
            ' ---------------------------------------------------------------------------------------
            Range("AM" & rigaCorrente).Select
            Call addValidazione_DATA
            
            
            
        Else
            Call RESET_ROW(rigaCorrente)
          
    End If
        
            
            
End Sub

Sub PROTECT_ROW_RA16_BI(rigaCorrente As Integer, blocca As Boolean)

        Dim intervallo As String
        Dim vdc As String 'voce di costo
        vdc = "C" & rigaCorrente & ","
        
        Call RESET_ROW(rigaCorrente)
        ' ---------------------------------------------------------------------------------------
        intervallo = vdc & "B" & rigaCorrente & ",D" & rigaCorrente & ",S" & rigaCorrente & ":T" & rigaCorrente & ",V" & rigaCorrente & ":W" & rigaCorrente & ",AL" & rigaCorrente & ",AQ" & rigaCorrente & ",AR" & rigaCorrente
        'MsgBox intervallo
        Range(intervallo).Locked = blocca
        
        If (Not blocca) Then
            Range(intervallo).Interior.ColorIndex = coloreCelleEditabili
            
            ' ---------------------------------------------------------------------------------------
            ' formattazione delle celle che contengono importi
            ' ---------------------------------------------------------------------------------------
            Range("AL" & rigaCorrente & ",AQ" & rigaCorrente).Select
            Selection.NumberFormat = FORMATO_VALUTA
            
            ' ---------------------------------------------------------------------------------------
            ' formattazione delle celle che contengono date
            ' ---------------------------------------------------------------------------------------
            Range("S" & rigaCorrente & ",W" & rigaCorrente).Select
            Selection.NumberFormat = FORMATO_DATA
            
            ' ---------------------------------------------------------------------------------------
            ' aggiungo le formule
            ' ---------------------------------------------------------------------------------------
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: CELLA 'TOTALE'
            ' ---------------------------------------------------------------------------------------
            Range("AQ" & rigaCorrente).Select
            Call addValidazione_TOTALE
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: solo numeri interi
            ' ---------------------------------------------------------------------------------------
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: solo numeri decimali
            ' ---------------------------------------------------------------------------------------
            Range("AL" & rigaCorrente).Select
            Call addValidazione_SOLO_Numeri_DECIMALI
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: ANNO
            ' ---------------------------------------------------------------------------------------
            
            
            ' ---------------------------------------------------------------------------------------
            ' VALIDAZIONE: DATE
            ' ---------------------------------------------------------------------------------------
            Range("S" & rigaCorrente & ",W" & rigaCorrente).Select
            Call addValidazione_DATA
            
            
            
        Else
            Call RESET_ROW(rigaCorrente)
          
        End If
        

End Sub

Sub RESET_ROW(rigaCorrente As Integer)
   
    Dim intervallo As String
    ' ---------------------------------------------------------------------------------------
    intervallo = rigaCorrente & ":" & rigaCorrente
    Call reset(intervallo)
    
    Range("B" & rigaCorrente).Select
    Call addListaSedi(rigaCorrente, False)
    
    Range("C" & rigaCorrente).Select
    Call addListaVociDiCosto(rigaCorrente, False)
    Range("C" & rigaCorrente).Locked = False
    Range("C" & rigaCorrente).Value = NewVal


End Sub

Function Attenzione(rigaCorrente As Integer) As Integer

    Dim risposta As Integer
    risposta = MsgBox("Procedendo verranno azzerati i dati preesistenti sulla riga " & rigaCorrente & ", procedere comunque?", vbOKCancel, "ATTENZIONE")
    Attenzione = risposta

End Function

Sub fromTabelloneToSingleSheet()
  
Dim rigaTabellone As Integer
rigaTabellone = 12
  
Dim riga As Integer 'riga i - esima
Dim colonna As Integer 'colonna j - esima
riga = rigaTabellone + 1
colonna = 3

Call setSystemPassword
Call setSheetsNames
                
'Worksheets(foglioDETTAGLIO).Unprotect BasicPassword
Cells(riga, colonna).Select

Dim continua As Boolean
continua = True

Do Until (continua)
    
    MsgBox Selection.Value
    ' ---------------------------------------------
    
    Select Case Selection.Value
                        
                    Case "R_A.1.1 Personale interno dip"
                        'Call MOVE_DATA_RA11_PID(rigaCorrente, False)
                        
                    Case "R_A.1.1 Personale interno non dip"
                        'Call MOVE_DATA_RA11_PIND(rigaCorrente, False)
                        
                    Case "R_A.1.2 Spese Generali"
                        'Call MOVE_DATA_RA12_SG(rigaCorrente, False)
                        
                    Case "R_A.1.3 Strumenti e attrezzature"
                        'Call MOVE_DATA_RA13_SA(rigaCorrente, False)
                        
                    Case "R_A.1.4 Servizi di consulenza"
                        'Call MOVE_DATA_RA14_SC(rigaCorrente, False)
                        
                    Case "R_A.1.5 Materiali e forniture"
                        'Call MOVE_DATA_RA15_MF(rigaCorrente, False)
                        
                    Case "R_A.1.5 Materiali e forniture Magazzino"
                        'Call MOVE_DATA_RA15_MFM(rigaCorrente, False)
                        
                    Case "R_A.1.6 Beni Immateriali"
                        'Call MOVE_DATA_RA16_BI(rigaCorrente, False)
                        
                    Case "S_A.2.1 Personale interno dip"
                           
                    Case "S_A.2.1 Personale interno non dip"
                           
                    Case "S_A.2.2 Spese Generali"
                            
                    Case "S_A.2.3 Strumenti e attrezzature"
                            
                    Case "S_A.2.4 Servizi di consulenza"
                            
                    Case "S_A.2.5 Materiali e forniture"
                            
                    Case "S_A.2.5 Materiali e forniture Magazzino"
                    
                    Case "S_A.2.6 Beni Immateriali"
                                                 
                    Case Else
                        
    End Select
    '---------------------------------------------




    riga = riga + 1
    Cells(riga, colonna).Select
    If Trim(Selection.Value) = "" Then
        continua = False
    End If


Loop

  
End Sub







Sub Last_Real_Populated_Row(columnNumber As Integer, sheetName As String)
    Worksheets(sheetName).Activate
    ActiveCell.SpecialCells(xlLastCell).Select
    LastR = ActiveCell.row
    LastC = ActiveCell.Column
    LastRealR = 1
    
    For Counter = LastR To 1 Step -1
        
        ActiveSheet.Cells(Counter, columnNumber).Select
        If Trim(Selection.Value) = "" Then
            continua = False
        Else
            LastRealR = ActiveCell.row
            Exit For
        End If
    Next
    'MsgBox "last real editated row: " & LastRealR
    
End Sub



Sub test()
Dim rigaCorrente As Integer
rigaCorrente = 13
  intervallo = vdc & "B" & rigaCorrente & ",D" & rigaCorrente & ":H" & rigaCorrente & ",J" & rigaCorrente & ":R" & rigaCorrente & ",AQ" & rigaCorrente & ",AR" & rigaCorrente
        ' add cnr e banca
        intervallo = intervallo & ",AS" & rigaCorrente & ":AY" & rigaCorrente
        MsgBox intervallo
End Sub

Sub lastSub()
Call changeCurrentProtectionStatusToAllSheets
End Sub

Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet24"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet25"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "TestModule"

 Public qs_start
   
Sub testArray()
  
    Dim tt1  As Double
    Dim tt2 As Double
    Dim numRigaTemp As Integer
    numRigaTemp = 9
    
    Dim bidim(6, 4)
    bidim(0, 0) = 1
    
    Dim QS_listaSigleVdc_ric
    QS_listaSigleVdc_ric = Array("RA11_PID_#RA11_PND_", "RA12_SG_", "RA13_ATT_", "RA14_CON_", "RA15_MAT_#RA15_MAG_")
    MsgBox LBound(bidim, 1)
    'MsgBox LBound(bidim, 2)
    MsgBox UBound(QS_listaSigleVdc_ric)
    MsgBox UBound(bidim)

     For Each item In QS_listaSigleVdc_ric
     
        MsgBox item
     Next
End Sub



Sub Test_Inizialization()
    Dim isCnr As Boolean, isBanca As Boolean
    isCnr = True
    isBanca = False
    
    Dim importoSede1, importoSede2, importoSede3, importoSede4, importoTotale As Double
    Dim costoAmmissibileCnr, costoAmmissibileBanca, stralciTot As Double
    Dim listaVDC(), splitvar, bvar
    Dim numRigaTemp_sviluppo, numRigaTemp_ricerca, numRigaStart_sviluppo, numRigaStart_ricerca As Integer
    
    numRigaStart_ricerca = 8
    numRigaTemp_ricerca = numRigaStart_ricerca
    listaVDC = Array("RA11_PID_#RA11_PND_", "RA12_SG_", "RA13_ATT_", "RA14_CON_", "RA15_MAT_#RA15_MAG_", "RA16_BIMM_")
    
    For Each item In listaVDC
    
        numRigaTemp_ricerca = numRigaTemp_ricerca + 1
        
        importoSede1 = 0
        importoSede2 = 0
        importoSede3 = 0
        importoSede4 = 0
        importoTotale = 0
        costoAmmissibileCnr = 0
        costoAmmissibileBanca = 0
        stralciTot = 0
        stralciCnr = 0
        stralciBanca = 0
        
        splitvar = Split(item, "#")
        
        For Each item2 In splitvar
            'MsgBox Item2
            importoSede1 = importoSede1 + Range(getAddressByName(item2 & "SEDE1")).Value
            importoSede2 = importoSede2 + Range(getAddressByName(item2 & "SEDE2")).Value
            importoSede3 = importoSede3 + Range(getAddressByName(item2 & "SEDE3")).Value
            importoSede4 = importoSede4 + Range(getAddressByName(item2 & "SEDE4")).Value
            importoTotale = importoTotale + Range(getAddressByName(item2 & "TOTALE")).Value
            costoAmmissibileCnr = costoAmmissibileCnr + Range(getAddressByName(item2 & "CNR_COSTOAMM")).Value
            costoAmmissibileBanca = costoAmmissibileBanca + Range(getAddressByName(item2 & "BANCA_COSTOAMM")).Value
            stralciTot = stralciTot + Range(getAddressByName(item2 & "TOT_STRALCI")).Value
            stralciCnr = stralciCnr + Range(getAddressByName(item2 & "CNR_STRALCI")).Value
            stralciBanca = stralciBanca + Range(getAddressByName(item2 & "CNR_STRALCI")).Value
        Next
        
        Range("C" & numRigaTemp_ricerca).Value = (importoSede1)
        Range("D" & numRigaTemp_ricerca).Value = (importoSede2)
        Range("E" & numRigaTemp_ricerca).Value = (importoSede3)
        Range("F" & numRigaTemp_ricerca).Value = (importoSede4)
        If (Not isCnr And Not isBanca) Then
            Range("G" & numRigaTemp_ricerca).Value = (importoTotale)
            Range("H" & numRigaTemp_ricerca).Value = (costoAmmissibileCnr)
            Range("I" & numRigaTemp_ricerca).Value = (costoAmmissibileBanca)
            Range("J" & numRigaTemp_ricerca).Value = (stralciTot)
         Else
            'cnr e banca
            
            If (isCnr) Then
                ' ricerca
                Range("G" & numRigaTemp_ricerca).Value = (costoAmmissibileCnr)
                Range("H" & numRigaTemp_ricerca).Value = (stralciCnr)
            End If
            
            If (isBanca) Then
                ' ricerca
                Range("G" & numRigaTemp_ricerca).Value = (costoAmmissibileBanca)
                Range("H" & numRigaTemp_ricerca).Value = (stralciBanca)
            End If
        End If
        
        
    Next
    
    ' ---------------------------------------------------
    ' sub totali ricerca
    numRigaTemp_ricerca = numRigaTemp_ricerca + 1
    Range("B" & numRigaTemp_ricerca).Select
    ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaStart_ricerca + 1) & "C2:R" & (numRigaTemp_ricerca - 1) & "C2)"
    Range("C" & numRigaTemp_ricerca).Select
    ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaStart_ricerca + 1) & "C3:R" & (numRigaTemp_ricerca - 1) & "C3)"
    Range("D" & numRigaTemp_ricerca).Select
    ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaStart_ricerca + 1) & "C4:R" & (numRigaTemp_ricerca - 1) & "C4)"
    Range("E" & numRigaTemp_ricerca).Select
    ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaStart_ricerca + 1) & "C5:R" & (numRigaTemp_ricerca - 1) & "C5)"
    Range("F" & numRigaTemp_ricerca).Select
    ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaStart_ricerca + 1) & "C6:R" & (numRigaTemp_ricerca - 1) & "C6)"
    If (Not isCnr And Not isBanca) Then
        Range("G" & numRigaTemp_ricerca).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaStart_ricerca + 1) & "C7:R" & (numRigaTemp_ricerca - 1) & "C7)"
        'cnr e banca
        Range("H" & numRigaTemp_ricerca).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaStart_ricerca + 1) & "C8:R" & (numRigaTemp_ricerca - 1) & "C8)"
        Range("I" & numRigaTemp_ricerca).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaStart_ricerca + 1) & "C9:R" & (numRigaTemp_ricerca - 1) & "C9)"
        Range("J" & numRigaTemp_ricerca).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaStart_ricerca + 1) & "C10:R" & (numRigaTemp_ricerca - 1) & "C10)"
    Else 'cnr e banca
        Range("G" & numRigaTemp_ricerca).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaStart_ricerca + 1) & "C7:R" & (numRigaTemp_ricerca - 1) & "C7)"
        Range("H" & numRigaTemp_ricerca).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaStart_ricerca + 1) & "C8:R" & (numRigaTemp_ricerca - 1) & "C8)"
    End If
        
    
    ' ---------------------------------------------------
    ' SVILUPPO
    ' ---------------------------------------------------
    numRigaStart_sviluppo = numRigaTemp_ricerca + 1
    numRigaTemp_sviluppo = numRigaStart_sviluppo
    
    listaVDC = Array("SA21_PID_#SA21_PND_", "SA22_SG_", "SA23_ATT_", "SA24_CON_", "SA25_MAT_#SA25_MAG_", "SA26_BIMM_")
    
    For Each item In listaVDC
    
        numRigaTemp_sviluppo = numRigaTemp_sviluppo + 1
        
        importoSede1 = 0
        importoSede2 = 0
        importoSede3 = 0
        importoSede4 = 0
        importoTotale = 0
        costoAmmissibileCnr = 0
        costoAmmissibileBanca = 0
        stralciTot = 0
        
        splitvar = Split(item, "#")
        
        For Each item2 In splitvar
            'MsgBox Item2
            importoSede1 = importoSede1 + Range(getAddressByName(item2 & "SEDE1")).Value
            importoSede2 = importoSede2 + Range(getAddressByName(item2 & "SEDE2")).Value
            importoSede3 = importoSede3 + Range(getAddressByName(item2 & "SEDE3")).Value
            importoSede4 = importoSede4 + Range(getAddressByName(item2 & "SEDE4")).Value
            importoTotale = importoTotale + Range(getAddressByName(item2 & "TOTALE")).Value
            costoAmmissibileCnr = costoAmmissibileCnr + Range(getAddressByName(item2 & "CNR_COSTOAMM")).Value
            costoAmmissibileBanca = costoAmmissibileBanca + Range(getAddressByName(item2 & "BANCA_COSTOAMM")).Value
            stralciTot = stralciTot + Range(getAddressByName(item2 & "TOT_STRALCI")).Value
        Next
        
        Range("C" & numRigaTemp_sviluppo).Value = (importoSede1)
        Range("D" & numRigaTemp_sviluppo).Value = (importoSede2)
        Range("E" & numRigaTemp_sviluppo).Value = (importoSede3)
        Range("F" & numRigaTemp_sviluppo).Value = (importoSede4)
        If (Not isCnr And Not isBanca) Then
            Range("G" & numRigaTemp_sviluppo).Value = (importoTotale)
            Range("H" & numRigaTemp_sviluppo).Value = (costoAmmissibileCnr)
            Range("I" & numRigaTemp_sviluppo).Value = (costoAmmissibileBanca)
            Range("J" & numRigaTemp_sviluppo).Value = (stralciTot)
        Else 'cnr e banca
            If (isCnr) Then
                ' sviluppo
                Range("G" & numRigaTemp_sviluppo).Value = (costoAmmissibileCnr)
                Range("H" & numRigaTemp_sviluppo).Value = (stralciCnr)
            End If
            
            If (isBanca) Then
                ' sviluppo
                Range("G" & numRigaTemp_sviluppo).Value = (costoAmmissibileBanca)
                Range("H" & numRigaTemp_sviluppo).Value = (stralciBanca)
            End If
        End If
        
    Next
    
    ' ---------------------------------------------------
    ' sub totali sviluppo
    numRigaTemp_sviluppo = numRigaTemp_sviluppo + 1
    Range("B" & numRigaTemp_sviluppo).Select
    ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaStart_sviluppo + 1) & "C2:R" & (numRigaTemp_sviluppo - 1) & "C2)"
    Range("C" & numRigaTemp_sviluppo).Select
    ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaStart_sviluppo + 1) & "C3:R" & (numRigaTemp_sviluppo - 1) & "C3)"
    Range("D" & numRigaTemp_sviluppo).Select
    ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaStart_sviluppo + 1) & "C4:R" & (numRigaTemp_sviluppo - 1) & "C4)"
    Range("E" & numRigaTemp_sviluppo).Select
    ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaStart_sviluppo + 1) & "C5:R" & (numRigaTemp_sviluppo - 1) & "C5)"
    Range("F" & numRigaTemp_sviluppo).Select
    ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaStart_sviluppo + 1) & "C6:R" & (numRigaTemp_sviluppo - 1) & "C6)"
    If (Not isCnr And Not isBanca) Then
        Range("G" & numRigaTemp_sviluppo).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaStart_sviluppo + 1) & "C7:R" & (numRigaTemp_sviluppo - 1) & "C7)"
        'cnr e banca
        Range("H" & numRigaTemp_sviluppo).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaStart_sviluppo + 1) & "C8:R" & (numRigaTemp_sviluppo - 1) & "C8)"
        Range("I" & numRigaTemp_sviluppo).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaStart_sviluppo + 1) & "C9:R" & (numRigaTemp_sviluppo - 1) & "C9)"
        Range("J" & numRigaTemp_sviluppo).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaStart_sviluppo + 1) & "C10:R" & (numRigaTemp_sviluppo - 1) & "C10)"
    Else 'cnr e banca
        Range("G" & numRigaTemp_sviluppo).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaStart_sviluppo + 1) & "C7:R" & (numRigaTemp_sviluppo - 1) & "C7)"
        Range("H" & numRigaTemp_sviluppo).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaStart_sviluppo + 1) & "C8:R" & (numRigaTemp_sviluppo - 1) & "C8)"
    End If
    
    
    ' ---------------------------------------------------
    ' totali
    numRigaTemp_sviluppo = numRigaTemp_sviluppo + 1
    Range("B" & numRigaTemp_sviluppo).Select
    ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaTemp_ricerca) & "C2,R" & (numRigaTemp_sviluppo - 1) & "C2)"
    Range("C" & numRigaTemp_sviluppo).Select
    ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaTemp_ricerca) & "C3,R" & (numRigaTemp_sviluppo - 1) & "C3)"
    Range("D" & numRigaTemp_sviluppo).Select
    ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaTemp_ricerca) & "C4,R" & (numRigaTemp_sviluppo - 1) & "C4)"
    Range("E" & numRigaTemp_sviluppo).Select
    ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaTemp_ricerca) & "C5,R" & (numRigaTemp_sviluppo - 1) & "C5)"
    Range("F" & numRigaTemp_sviluppo).Select
    ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaTemp_ricerca) & "C6,R" & (numRigaTemp_sviluppo - 1) & "C6)"
    

    If (Not isCnr And Not isBanca) Then
        Range("G" & numRigaTemp_sviluppo).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaTemp_ricerca) & "C7,R" & (numRigaTemp_sviluppo - 1) & "C7)"
        'cnr e banca
        Range("H" & numRigaTemp_sviluppo).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaTemp_ricerca) & "C8,R" & (numRigaTemp_sviluppo - 1) & "C8)"
        Range("I" & numRigaTemp_sviluppo).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaTemp_ricerca) & "C9,R" & (numRigaTemp_sviluppo - 1) & "C9)"
        Range("J" & numRigaTemp_sviluppo).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaTemp_ricerca) & "C10,R" & (numRigaTemp_sviluppo - 1) & "C10)"
    Else
        'cnr e banca
        Range("G" & numRigaTemp_sviluppo).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaTemp_ricerca) & "C7,R" & (numRigaTemp_sviluppo - 1) & "C7)"
        Range("H" & numRigaTemp_sviluppo).Select
        ActiveCell.FormulaR1C1 = "=SUM(R" & (numRigaTemp_ricerca) & "C8,R" & (numRigaTemp_sviluppo - 1) & "C8)"
    End If

End Sub

Sub testValidationMaxValue()
Call setSheetsNames
Dim avviso As String
avviso = " Warning: - la data fattura deve essere tetetetetetetetetetetete compresa nel periodo di rendicontazione - la data pagamento deve essere compresa nel  periodo di rendicontazione - la data di inizio utilizzo inserita e' precedente alla data fattura indicata-la data di inizio utili"
Sheets("sheet1").Select
Range("A34").Select
MsgBox Len(avviso)

If (Len(avviso) > 250) Then
    avviso = Left(avviso, 248) + "[...]"
End If
With Selection.Validation
                        .Delete
                        .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator:=xlBetween
                        .IgnoreBlank = True
                        .InCellDropdown = True
                        .InputTitle = ""
                        .ErrorTitle = ""
                        .InputMessage = avviso
                        .ErrorMessage = ""
                        .ShowInput = True
                        .ShowError = True
                    End With
End Sub

Sub testCommenti()
  Sheets("Foglio1").Activate
  Range("$A$1").Select
  'If (Range("$A$1").Comment) Then
  '  Range("$A$1").Comment.Delete
  'End If
  Range("$A$1").ClearComments
  Range("$A$1").AddComment Text:="RA11_PID+SA21_PID+RA11_PND+SA21_PND"
  Range("$A$1").Comment.Delete
End Sub


Sub testPassword()
 init_rend
 Call protectSheet(foglioDETTAGLIO, True)
 
End Sub
Sub MacroApriVBEditor()
'
' MacroApriVBEditor Macro
'

'
    Range("C11").Select
    ActiveWindow.SmallScroll Down:=0
    Range("E11").Select
    ActiveWindow.SmallScroll Down:=-13
End Sub
Sub Macro6()
'
' Macro6 Macro
'

'
    ActiveWindow.SmallScroll Down:=-67
    Sheets("DETTAGLIO").Select
    ActiveWindow.SmallScroll Down:=0
    Range("D11").Select
    Sheets("Tabella Specifiche").Select
    Sheets("Tendine").Visible = True
    Range("G2").Select
    ActiveWindow.ScrollColumn = 2
    ActiveWindow.ScrollColumn = 3
    Sheets("Tendine").Select
    Sheets("config").Visible = True
    Range("E26").Select
    ActiveWindow.SmallScroll Down:=-9
    ActiveWindow.ScrollColumn = 2
    ActiveWindow.ScrollColumn = 3
    ActiveWindow.ScrollColumn = 4
    ActiveWindow.ScrollColumn = 5
    ActiveWindow.ScrollColumn = 6
    ActiveWindow.ScrollColumn = 7
    ActiveWindow.ScrollColumn = 6
    ActiveWindow.ScrollColumn = 5
    ActiveWindow.ScrollColumn = 2
    ActiveWindow.ScrollColumn = 1
    ActiveWorkbook.Save
    ActiveWorkbook.Save
    Range("C23").Select
    ActiveWindow.SmallScroll Down:=0
    Range("A34").Select
    Sheets("config").Select
    Range("C2").Select
    Sheets("Tendine").Select
    Range("H6").Select
    ActiveCell.FormulaR1C1 = ""
    Range("L8").Select
    Sheets("config").Select
    ActiveWindow.SmallScroll Down:=-12
    Sheets("Tendine").Select
    ActiveWindow.SmallScroll Down:=-3
End Sub
Sub ddddddd()
'
'
 ActiveWorkbook.Names.Add name:="TND_LISTA_BANDI", RefersToR1C1:=""
 ActiveWorkbook.Names.Add name:="TND_LISTA_BANDI", RefersToR1C1:="=Tendine" & "!R5C9:R8C9"
 ActiveWorkbook.Names.Add name:="TND_LISTA_BANDI", RefersToR1C1:="=Tendine!F3:F11"
 
End Sub
Sub dddddd()
'
' dddddd Macro
'

'
                Sheets("Foglio1").Select
                Call protectSheet("Foglio1", False)
                'Range("C:C").Locked = False
                With Range("C:C").Validation
                    .Delete
                    .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
                     xlBetween, Formula1:="=Tendine!$D$3:$D$19;Tendine!$F$3:$F$11"
                    .IgnoreBlank = True
                    .InCellDropdown = True
                    .InputTitle = ""
                    .ErrorTitle = ""
                    .InputMessage = "Selezionare una voce di costo"
                    .ErrorMessage = ""
                    .ShowInput = True
                    .ShowError = True
                End With
                Call protectSheet("Foglio1", True)
    
End Sub
Sub tampo()
'
' tampo Macro
'

'
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = -0.0499893185216834
        .PatternTintAndShade = 0
    End With
    Range("F12").Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = -0.249977111117893
        .PatternTintAndShade = 0
    End With
End Sub


Sub tampo2()
inizializzaBando False
 If (bandoCorrente.seBandoPON) Then
    MsgBox "PON"
Else
    MsgBox "NO PON"
End If
 End Sub
 
 Sub t123()
    Range("AE17").Select
    If (Range("AB17").Value > Range("AC17").Value) Then
        ActiveCell.FormulaR1C1 = "=RC26"
    Else
        ActiveCell.FormulaR1C1 = "=IF(TRIM(RC29)="""",0,RC26*(RC28/RC29)*RC30/100)"
    End If
 End Sub

Public Sub TestNomiExcel()
        Dim G, X As Integer
        X = ActiveWorkbook.Names.Count
        MsgBox X
        For G = X To 1 Step -1
            Debug.Print (ActiveWorkbook.Names(G).name) 'print to immediate window
        Next
        
End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_Open()

    Call Inizialization
    
End Sub



Sub storico()
Dim str As String

'TODO:
'- dopo l'init i fogli non visualizzati devono essere bloccati




'str = "
'versione 8.31- first release,
' - Inserimento Dati in Tabellone
' - Ribaltamento Dati nei fogli di dettaglio

'8.32 - add Ribaltamento dati aggregati nei quadri singoli

'8.33 - Fix su Ribaltamento,
' - Quadri Singoli: Aggregazioni Dati Materiali e Magazzino"
' - Ribaltamento:
'     - Ribaltamento su quadro singolo, quadro cnr e quadro banca degli stralci raggruppati per VDC
'          - Ragruppamento degli importi di materiali e di magazzino
'     - Inserimento del warning non bloccante nel caso in cui la percentuale di spese generali sia superiore alle spese del personale (pid+pnd)
'     - Aggiunta e relativo popolamento della sede e VDC nel foglio dettaglio costo orario

'8.33.1
' - altezza riga 13
' - simbolo dell'euro : KO

'8.33.2
' - fix su compare delle sedi
' - formato decimale e percentuale nei foglio di dettaglio
' - fix ribaltamento stralci cnr bamca per SG

'8.33.3
' - introduzione nuovo pannello di controllo admin
' - risolta anomalia simbolo valuta (tramite pannello di amministrazione)

'8.33.4
' - fix su ribaltamento sotto excel 2013

'8.33.5
' - aggiunto arrotondamento su costo orario del personale dipendente RA11_PID e SA21_PID (foglio DETTAGLIO)
' - foglio RA11_PID e SA21_PID unite le colonne D ed E dalla riga 6 in poi
' - calcolo percentuale sg su pers:
    ' - inseriti gli ultimi conteggi effettuati in fase di ribaltamento sul foglio config
    ' - svuotate le variabili dei totali ad inizio conteggio
    ' - modificato il messaggio di warning con le cifre in chiaro
' - foglio dettaglio attrezzature _ settato il formato data per il campo 'data inizio utilizzo'
' - foglio DETTAGLIO,VDC Strumenti e attrezzature (sia RA13 che SA23) solo per BENI AMMORTIZZABILI:
    ' - reso il campo 'mesi di utilizzo nel progetto' non editabile e derivato da (data fine progetto - data inizio utilizzo) espresso in mesi compiuti
' - quadro singolo, qs cnr e qs banca: corrette le formule
' - abilitata la possibilita' di inserire fogli non bloccati per calcoli secondari
' - verificata presenza e funzionalit|fffd| dei controlli su date fattura e pagamento in relazione al periodo rendicontato.
    ' i controlli scattano se
        ' - la data di inizio utilizzo inserita e' precedente alla data fattura indicata
        ' - la data di inizio utilizzo sommata ai mesi di utilizzo e' superiore alla data di fine progetto"
' - resi i campi editabili oggetto di ribaltamento obbligatori

'  Valutare la possibilit|fffd| di spostare i totali su singole schede a dx nello spazio vuoto del box presente foglio : da capire dove posizionare

'8.33.6
' - Corretto ribaltamento errato del numero progetto quando inserito come alfanumerico e non numerico
' - Aggiunto controllo correttezza dei dati inseriti nelle info riepilogative di progetto e nelle sedi prima di procedere al ribaltamento
' - Aggiunta regola per RA13, SA23, RA14, SA24, RA15, SA25: Data fattura compresa nel periodo di rendicontazione
' - Aggiunta regola per RA13, SA23, RA14, SA24, RA15, SA25: Data pagamento compresa nel periodo di rendicontazione. se SAL = SI allora data termine = data rendicontazione+90gg e cmq non oltre oggi.

'8.33.13
' - Corretto il campo 'Per l'esecuzione del progetto n.: ' sul foglio DETTAGLIO, adesso sono ammessi solo numeri.

'8.33.14
' - Aggiunto nell'intestazione select obbligatoria relativa ai bandi
' - Aggiunta nuova voce nel foglio DETTAGLIO : "beni immateriali" e sue obbligatoriet|fffd|
' - Aggiunto warning su superamento spese generali della perc dei costi diretti ammissibili"
'   "I costi diretti agevolabili sono quelli relativi a Personale,|fffd|attrezzature|fffd|, beni immateriali|fffd|.beni materiali|fffd|..NON rientrano invece|fffd|le spese per consulenze e prestazioni di terzi|fffd||fffd|
' - Aggiunte pagine di dettaglio R_A.1.6 Beni Immateriali e S_A.2.6 Beni Immateriali
' - Corrette le pagine di riepilogo quadro singolo,cnr e banca con l'inserimento dei beni immateriali

'8.33.15
' - Aggiunto bando nei fogli: Quadro Singolo, CNR, BANCA
' - Nuova formattazione per i fogli: Quadro Singolo, CNR, BANCA
' - aggiunte etichette per sedi presenti nei fogli QS
' - nuova gestione colonne sedi fogli QS, CNR, BANCA
' - aggiunta funzionalita ADMIN oer reset totale del foglio SCHEMA REND

'8.33.15b
' - Nella funzionalit|fffd| di reset |fffd| stato corretto il bug per cui dopo aver riportato lo schema REND ale condizioni di fabbrica non salvava il foglio prima di chiuderlo.

'8.33.15c
' - Corretto il calcolo dei beni immateriali e del relativo limite inerente le spese generali
' - Migliorato il messaggio di warning che avverte che si |fffd| passato il limite dele spese generali imputabili
' - Corretto bug per cui la finestra di warning del ribaltamento compariva dopo alcuni secondi e non immediatamente dopo la pressione del tasto 'Ribaltamento Dati'
' - Aggiunto commento alla cella del bando nel foglio DETTAGLIO che avverte che non e' modificabile

'8.35.00a
' - Introdotto l'oggetto BANDO, tale oggetto porta in se le caratteristiche principali rendendole disponibili in tutta l'applicazione
' - Estensione del Multibando: ora in base al bando scelto alcune parti del foglio REND vengono personalizzate
' - Personalizzata la lista VDC:
'   - sincronizzati i folgi relativi alle voci visualizzate
'   - sincronizzato lo schema spese decretate tot
'   - sincronizzati i quadri costi (generale, cnr e banca)
' - controllare la selezione del menu tendina nella function ConfigureProtectionForAllWorksheets (security module)

'8.35.00b
' - riorganizzato la gestione dei moduli
'   - introdotte le funzioni specifiche per l'init in un modulo dedicato
' - nuova logica allo start up: ora vengono visualizzati tutti i fogli, sprotetti, lavorati, riprotetti e nascosti
' - risolto bug per cui durante il ribaltamento si interrompeva perch|fffd| trovava un foglio protetto e non poteva scrivere info

'8.35.00c
' - Fix: sui fogli 1.6 e 2.6 (beni immateriali) sostituita la voce errata CONSULENZE (cella F3) con la voce corretta (Beni Immateriali)
' - Fix: FoglioDETTAGLIO: Modificato lo scroll per bloccare l'intestazione del tabellone e far scorere le righe sottostanti
' - EVO: Strumenti e attrezzature, e solo per (tipologia attrezzatura = beni ammortizzati) - variata la regola per il calcolo del costo imputato (colonna AE)
'   - se 'mesi di utilizzo del progetto' (colonna AB) |fffd| > 'mesi totali ammortamento' (colonna AC) allora costi imputato (colonna AE) = costo del bene (colonna (Z)
'   - altrimenti resta la formula indicata in AE13

'8.35.00d
'release 14/07/2017
' - Fix: STRALCI (QUADRO SINGOLO / CNR / BANCA) corretto il reporto degli stralci che era errato per cnr e banca
' - Modificato lo scroll da riga 13 a riga13/colonna E
' - nascoste le formule in riga 38 per QS, QS_CNR e QS_BANCA nel caso di bando PON
' - Creati nuovi nomi per la funzione java del mise che confronta i valori inseriti sul foglio con quelli del db

'8.35.01d
'release 17/07/2017
' - Fix: Alcuni name relativi alla funzione eterna java non erano settati correttamente.
' - Spostato il tasto ADMIN dalla colonna E alla colonna D in modo che resti sempre visibile anche a seguito dello shift del foglio

'8.35.01e
'release 18/07/2017
' - Cancellazione bordatura riga 38 nel foglio Quadro Singolo nel caso di Bando PON
' - Modifica calcolo costo imputato in strumenti attrezature - beni materiali nel caso in cui i mesi di utilizzo siano maggiori dei mesi di ammortamento
' Non teneva conto della percentuale di utilizzo dei beni ammortizzabili
' - FIX: Quadro Singolo, riportava erroneamente anche i valori dei BENI IMMATERIALI nel caso in cui questi non fossero presenti

'8.35.01f
'release 19/07/2017
' - superfix temporanea spero non definitiva
    'la lista siglevdc per bandi non PON |fffd| piu' corta di un elemento.
    'in attesa di impostare il foglio quadro singolo in maniera totalmente dinamica
    'introduco una fix che semplicemente aggiunge uno al numero di righe in modo da
    'saltare la riga vuota lasciata dal posto per la sigla vdc IMM
' - Modificata la funzione moving.svuotaQS per svuotare correttamente il foglio QS prima del successivo riempimento
'   - errato calcolo delle coordinate per la decisione degli intervalli da svuotare

'8.35.01g
'release 11/08/2017
' - Sostituito il name errato QS_CNR_TOTRI_SS_STRALCI con quello corretto QS_CNR_TOTSS_SS_STRALCI
' - Sostituito il name errato QS_BANCA_TOTRI_SS_STRALCI con quello corretto QS_BANCA_TOTSS_SS_STRALCI

'8.35.01h
'release 08/09/2017
'running since 12/09/2017
' - Modificato modulo MOVING -> QUADRO SINGOLO -> Spese decretata TOT
'   DA
'       Range("B17").Value = "=" + Range(foglioDETTAGLIO & "!" & "O4").Value
'   A
'       Range("B17").Value = Range(foglioDETTAGLIO & "!" & "O4").Value
' L'uguale era un refuso neessario perch|fffd| prima inserivo la formula adesso il valore diretto
' Lasciandolo pero' andava in errore se il numero nella cella del range.value aveva dei decimali diversi da ,00

'8.35.02
'release 11/09/2017
' - Aggiunta la gestione dei bandi ETB (10 e 11)
' - funzione initWriteFoglioTendine sostituito il richiamo fisso (cella B30) con la variabile (CONF_OLD_PWD_ADMIN)
' - SceltaBandoForm aggiunta la data della versione del foglio REND
' - ConfigForm aggiunta la data della versione del foglio REND


'8.35.02a
'release 12/09/2017
'running since 13/09/2017
' - Fix: Aggiunta la gestione dei bandi ETB (10 e 11) nella gestione della percentuale SG
'   MODULE -> Security -> ConfigureProtectionForAllWorksheets
'   da
'   Case "H2020", "AD", "IS", "FRI", "ACC"
'       Names("DETT_INFO_PERC_SPESE_GENERALI").RefersToRange.Locked = False [...]
'   a
'   Case "H2020", "AD", "IS", "FRI", "ACC", "ETB_10", "ETB_11"
'       Names("DETT_INFO_PERC_SPESE_GENERALI").RefersToRange.Locked = False [...]
' - Fix: Allineata al centro la "data di inizio progetto dal" cella C9 del foglio dettaglio (DETT_INFO_DT_PROGETTO_DAL)


'8.35.02b
'release 27/09/2017
'running since
'
' - Fixed: Dopo un ribaltamento, non ripristinava i nomi generici delle sedi nei quadri costi neanche con un ripristino globale
' - MODULO SECURITY -> commonActionOnQuadroCosti
'   Creata la nuova sub commonActionOnQuadroCosti
' - MODULO SECURITY -> ConfigureProtectionForAllWorksheets
'   Esternalizzato nella sub commonActionOnQuadroCosti le azioni comuni a tutti i fogli QS

' - MODULO Init -> namesDefinition
'   Rinominati i names
'   da                                   a
'   QS_SPEAMM_SEDE1_LABEL               ->  QS_SPESE_RENDICONTATE_SEDE1_LABEL
'   QS_SPEAMM_SEDE2_LABEL               ->  QS_SPESE_RENDICONTATE_SEDE2_LABEL
'   QS_SPEAMM_SEDE3_LABEL               ->  QS_SPESE_RENDICONTATE_SEDE3_LABEL
'   QS_SPEAMM_SEDE4_LABEL               ->  QS_SPESE_RENDICONTATE_SEDE4_LABEL
'
'   QS_CNR_SPEAMM_SEDE1_LABEL           ->  QS_CNR_SPESE_RENDICONTATE_SEDE1_LABEL
'   QS_CNR_SPEAMM_SEDE2_LABEL           ->  QS_CNR_SPESE_RENDICONTATE_SEDE2_LABEL
'   QS_CNR_SPEAMM_SEDE3_LABEL           ->  QS_CNR_SPESE_RENDICONTATE_SEDE3_LABEL
'   QS_CNR_SPEAMM_SEDE4_LABEL           ->  QS_CNR_SPESE_RENDICONTATE_SEDE4_LABEL
'
'   QS_BANCA_SPEAMM_SEDE1_LABEL         ->  QS_BANCA_SPESE_RENDICONTATE_SEDE1_LABEL
'   QS_BANCA_SPEAMM_SEDE2_LABEL         ->  QS_BANCA_SPESE_RENDICONTATE_SEDE2_LABEL
'   QS_BANCA_SPEAMM_SEDE3_LABEL         ->  QS_BANCA_SPESE_RENDICONTATE_SEDE3_LABEL
'   QS_BANCA_SPEAMM_SEDE4_LABEL         ->  QS_BANCA_SPESE_RENDICONTATE_SEDE4_LABEL
'
' - Eliminati i names seguenti perch|fffd| errati e non piu' necessari
'   ActiveWorkbook.Names.Add name:="QS_SPESE_RENDICONTATE_TOT_LABEL", RefersToR1C1:="=" & foglioQS & "!R8C7"
'   ActiveWorkbook.Names.Add name:="QS_CNR_SPESE_RENDICONTATE_BANCA_TOT_LABEL", RefersToR1C1:="=" & foglioQS_CNR & "!R8C7"
'   ActiveWorkbook.Names.Add name:="QS_BANCA_SPESE_RENDICONTATE_BANCA_TOT_LABEL", RefersToR1C1:="=" & foglioQS_BANCA & "!R8C7"

' - MODULO Moving -> svuotaQS
'   Aggiunta la logica che ripristina le etichette delle sedi
'
' - MODULO Moving -> QuadroSingolo
'   Adeguata la sub con i nuovi names

'8.35.02c
'release 15/02/2018
'running since
'
' - Fixed: Dopo un ribaltamento, non ripristinava i nomi generici delle sedi nei quadri costi neanche con un ripristino globale
' - MODULO SECURITY -> commonActionOnQuadroCosti
'   Creata la nuova sub commonActionOnQuadroCosti
' - MODULO SECURITY -> ConfigureProtectionForAllWorksheets
'   Esternalizzato nella sub commonActionOnQuadroCosti le azioni comuni a tutti i fogli QS

' - MODULO Utility -> settingForJavaCompare
'   Aggiunti names colonna Spesa ammessa per CNR e Banca
'ActiveWorkbook.Names.Add name:="QS_CNR_PER_RI_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R9C7"
'ActiveWorkbook.Names.Add name:="QS_CNR_GEN_RI_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R10C7"
'ActiveWorkbook.Names.Add name:="QS_CNR_STRU_RI_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R11C7"
'ActiveWorkbook.Names.Add name:="QS_CNR_CON_RI_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R12C7"
'ActiveWorkbook.Names.Add name:="QS_CNR_MAT_RI_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R13C7"
'ActiveWorkbook.Names.Add name:="QS_CNR_IMM_RI_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R14C7"
'ActiveWorkbook.Names.Add name:="QS_CNR_TOTRI_RI_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R15C7"
'ActiveWorkbook.Names.Add name:="QS_CNR_PER_SS_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R17C7"
'ActiveWorkbook.Names.Add name:="QS_CNR_GEN_SS_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R18C7"
'ActiveWorkbook.Names.Add name:="QS_CNR_STRU_SS_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R19C7"
'ActiveWorkbook.Names.Add name:="QS_CNR_CON_SS_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R20C7"
'ActiveWorkbook.Names.Add name:="QS_CNR_MAT_SS_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R21C7"
'ActiveWorkbook.Names.Add name:="QS_CNR_IMM_SS_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R22C7"
'ActiveWorkbook.Names.Add name:="QS_CNR_TOTSS_SS_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R23C7"
'ActiveWorkbook.Names.Add name:="QS_BANCA_PER_RI_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R9C7"
'ActiveWorkbook.Names.Add name:="QS_BANCA_GEN_RI_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R10C7"
'ActiveWorkbook.Names.Add name:="QS_BANCA_STRU_RI_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R11C7"
'ActiveWorkbook.Names.Add name:="QS_BANCA_CON_RI_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R12C7"
'ActiveWorkbook.Names.Add name:="QS_BANCA_MAT_RI_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R13C7"
'ActiveWorkbook.Names.Add name:="QS_BANCA_IMM_RI_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R14C7"
'ActiveWorkbook.Names.Add name:="QS_BANCA_TOTRI_RI_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R15C7"
'ActiveWorkbook.Names.Add name:="QS_BANCA_PER_SS_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R17C7"
'ActiveWorkbook.Names.Add name:="QS_BANCA_GEN_SS_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R18C7"
'ActiveWorkbook.Names.Add name:="QS_BANCA_STRU_SS_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R19C7"
'ActiveWorkbook.Names.Add name:="QS_BANCA_CON_SS_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R20C7"
'ActiveWorkbook.Names.Add name:="QS_BANCA_MAT_SS_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R21C7"
'ActiveWorkbook.Names.Add name:="QS_BANCA_IMM_SS_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R22C7"
'ActiveWorkbook.Names.Add name:="QS_BANCA_TOTSS_SS_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R23C7"


End Sub


Attribute VB_Name = "ToolBox"

' **********************************************************************
' Worksheets utility
' **********************************************************************

' Count how many sheets are visible and hidden
Sub TB_wksCount()
    Dim v
    For Each whk In ActiveWorkbook.Sheets
        If whk.Visible Then v = v + 1
    Next whk
    MsgBox "Visible : " & v & vbCrLf & "Hidden : " & (ActiveWorkbook.Sheets.Count - v)
End Sub

Sub SheetsCounting()
Dim v, h, vh, t As Integer
'count the total number of sheets:
t = ActiveWorkbook.Sheets.Count
'count the number of sheets in status "xlVeryHidden"
vh = 0
For Each s In ActiveWorkbook.Sheets
If (s.Visible = xlVeryHidden) Then vh = vh + 1
Next s
'count the number of sheets in status "xlHidden"
h = 0
For Each s In ActiveWorkbook.Sheets
If (s.Visible = xlHidden) Then h = h + 1
Next s
'count the number of sheets in status "xlVisible"
v = t - h - vh
MsgBox "xlVisible = " & v & vbCrLf & "xlHidden = " & h & vbCrLf & "xlVeryHidden = " & vh & vbCrLf & "xlTotal = " & t
End Sub


Function SheetsCount(intCommand As Integer)
'possible values for the command string: xlSheetHidden, xlSheetVeryHidden, xlSheetVisible or 9
Dim v As Integer
'count the total number of sheets:
If intCommand = 9 Then
SheetsCount = ActiveWorkbook.Sheets.Count
Else
v = 0
For Each s In ActiveWorkbook.Sheets
If (s.Visible = intCommand) Then v = v + 1
Next s
SheetsCount = v
End If
End Function

Sub Test_SheetsCount()
    MsgBox "visible pages = " & SheetsCount(xlSheetVisible)
    MsgBox "hidden pages = " & SheetsCount(xlSheetHidden)
    MsgBox "very hidden pages = " & SheetsCount(xlSheetVeryHidden)
    MsgBox "total pages = " & SheetsCount(9)
End Sub

Function isSheetContentProtect(sheetName As String)
    If Worksheets(sheetName).ProtectContents = True Then
        isSheetContentProtect = True
    Else
        isSheetContentProtect = False
    End If
End Function
Sub Test_isSheetContentProtect()
    MsgBox isSheetContentProtect("DETTAGLIO")
    MsgBox isSheetContentProtect("Foglio1")
End Sub

Function isSheetContentProtectedWithPassword(sheetName As String) As Boolean
    If Worksheets(sheetName).ProtectContents Then
        On Error GoTo errorLabel
        ws.Unprotect ""
        ws.protect
    End If
    
errorLabel:
    If err.Number = 1004 Then isSheetContentProtectedWithPassword = True
End Function
Sub Test_isSheetContentProtectedWithPassword()
   MsgBox isSheetContentProtectedWithPassword("DETTAGLIO")
End Sub
Attribute VB_Name = "Utility"
Public QS_numRigaStart_ricerca

Public Function Last_Real_Empty_Row(columnNumber As Integer, sheetName As String)
    Dim LastR As Integer
    Dim LastC As Integer
    Dim LastRealR As Integer
    
    Sheets(sheetName).Select
    ActiveCell.SpecialCells(xlLastCell).Select
    LastR = ActiveCell.row
    LastC = ActiveCell.Column
    LastRealR = LastR
    
    For Counter = LastR To 1 Step -1
        
        ActiveSheet.Cells(Counter, columnNumber).Select
        If Trim(Selection.Value) = "" Then
           ' vai avanti
            'MsgBox "row: " & ActiveCell.Row & " " & Trim(Selection.Value)
        Else
            'MsgBox ActiveCell.Row
            ActiveCell.Offset(1, 0).Select
            LastRealR = ActiveCell.row
            'MsgBox ActiveCell.Row
            Exit For
        End If
    Next
    'MsgBox "last real empty row: " & LastRealR
    Last_Real_Empty_Row = LastRealR
    
End Function

Public Function Last_Real_Empty_Row_TABELLONE(columnNumber As Integer)
    Sheets(foglioDETTAGLIO).Select
    Range("C" & rigaTabellone).Select
    Range("C" & rigaTabellone).Activate
    LastR = ActiveCell.row
    LastC = ActiveCell.Column
    LastRealR = rigaTabellone
    
    For Counter = LastR To 60000 Step 1
        
        ActiveSheet.Cells(Counter, columnNumber).Select
        If Trim(Selection.Value) = "" Then
            LastRealR = ActiveCell.row
            Exit For
        End If
    Next
    Last_Real_Empty_Row_TABELLONE = LastRealR
    
End Function

Public Sub cancella_griglia(intervallo As String)
    
    Range(intervallo).Select

    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    Selection.Borders(xlEdgeRight).LineStyle = xlNone
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
End Sub

Public Sub disegna_griglia(intervallo As String)
    
    Range(intervallo).Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = 1
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = 1
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = 1
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = 1
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = 1
    End With
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = 1
    End With
    
End Sub

Public Sub disegna_griglia_byCells(rigaDa As Integer, colDa As Integer, rigaA As Integer, colA As Integer)
    
    Range(Cells(rigaDa, colDa), Cells(rigaA, colA)).Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = 1
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = 1
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = 1
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = 1
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = 1
    End With
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = 1
    End With
    
End Sub

Public Sub disegna_griglia_orizzontale(intervallo As String)
    
    Range(intervallo).Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = 1
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = 1
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = 1
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = 1
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = 1
    End With
    
End Sub

Public Function getAddressByName(name As String)

    Dim nms As Names
    Set nms = ActiveWorkbook.Names
    Dim appo As String
    Dim index, haveSpace, before, after
    'getAddressByName = nms(name).RefersToRange.Address
    appo = nms(name).RefersToLocal
    haveSpace = InStr(appo, " ")
    Dim response As String
    If (haveSpace > 0) Then
        index = InStr(appo, "!")
        after = Mid(appo, index, Len(appo))
        before = Mid(appo, 2, Len(appo) - (Len(after) + 1))
        response = "'" & before & "'" & after
    Else
        response = Mid(appo, 2, Len(appo))
    End If
    
    getAddressByName = response
End Function

Sub test1()
Dim p
p = getSiglaBando("Horizon 2020")
p = getDescrizioneBando("ACC")

End Sub
Public Function getSiglaBando(DescrizioneBando As String)

    Dim listaBandi
    listaBandi = Range(getAddressByName("TND_LISTA_BANDI")).Value
    
    For Counter = 1 To UBound(listaBandi) Step 1
        
        If listaBandi(Counter, 1) = DescrizioneBando Then
            getSiglaBando = listaBandi(Counter, 2)
            Exit For
        End If
    Next
    
End Function

Public Function getDescrizioneBando(SiglaBando As String)

    Dim listaBandi
    listaBandi = Range(getAddressByName("TND_LISTA_BANDI")).Value
    
    For Counter = 1 To UBound(listaBandi) Step 1
        
        If Trim(listaBandi(Counter, 2)) = Trim(SiglaBando) Then
            getDescrizioneBando = listaBandi(Counter, 1)
            Exit For
        End If
    Next
    
End Function
Public Sub reset(intervallo As String)
    
    Range(intervallo).Select
    Range(intervallo).Validation.Delete
    
    Call cancella_griglia(intervallo)
    
    With Selection
        .ClearContents
        .NumberFormat = GENERAL_FORMAT
        .Interior.ColorIndex = xlNone
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .WrapText = True
        .Orientation = 0
        .AddIndent = False
        .ShrinkToFit = False
        .MergeCells = False
    End With
    
    With Selection.Font
        .name = "Calibri (Theme Body)"
        .FontStyle = "Regular"
        .Size = 8
        .StrikeThrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
    End With
    
    Selection.Locked = True
    Selection.FormulaHidden = True
    
End Sub

Public Sub selection_editabile()
    Selection.Interior.ColorIndex = coloreCelleEditabili
    'With Selection.Borders(xlEdgeLeft)
    '    .LineStyle = xlContinuous
    '    .Weight = xlThin
    '    .ColorIndex = 1
    'End With
    'With Selection.Borders(xlEdgeTop)
    '    .LineStyle = xlContinuous
    '    .Weight = xlThin
    '    .ColorIndex = 1
    'End With
    'With Selection.Borders(xlEdgeBottom)
    '    .LineStyle = xlContinuous
    '    .Weight = xlThin
    '    .ColorIndex = 1
    'End With
    'With Selection.Borders(xlEdgeRight)
    '    .LineStyle = xlContinuous
    '    .Weight = xlThin
    '    .ColorIndex = 1
    'End With
    'Selection.Borders(xlInsideVertical).LineStyle = xlNone
    'Selection.Borders(xlInsideHorizontal).LineStyle = xlNone

End Sub

Public Sub selection_non_editabile()
    Selection.Interior.ColorIndex = xlNone
    'Selection.Borders(xlLeft).LineStyle = xlNone
    'Selection.Borders(xlRight).LineStyle = xlNone
    'Selection.Borders(xlTop).LineStyle = xlNone
    'Selection.Borders(xlBottom).LineStyle = xlNone
    'Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    'Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    'Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    'Selection.Borders(xlDiagonalUp).LineStyle = xlNone

End Sub
Public Sub selection_formatta_celle_obbligatorie()
 
    'Selection.Interior.ColorIndex = xlNone
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
        Selection.Borders(xlDiagonalUp).LineStyle = xlNone
        With Selection.Borders(xlEdgeLeft)
            .LineStyle = xlContinuous
            .Weight = xlMedium
            .ColorIndex = coloreCelleObbligatorie
        End With
        With Selection.Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .Weight = xlMedium
            .ColorIndex = coloreCelleObbligatorie
        End With
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Weight = xlMedium
            .ColorIndex = coloreCelleObbligatorie
        End With
        With Selection.Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Weight = xlMedium
            .ColorIndex = coloreCelleObbligatorie
        End With
        Selection.Borders(xlInsideVertical).LineStyle = xlNone
        Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    
End Sub

Public Sub selection_formattazione_formula()
Selection.Interior.ColorIndex = xlNone
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = coloreCelleEditabili
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = coloreCelleEditabili
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = coloreCelleEditabili
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = coloreCelleEditabili
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    Selection.Locked = True
    Selection.FormulaHidden = True
    
End Sub

Public Sub selection_elimina_formattazione_formula()
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    Selection.Borders(xlEdgeRight).LineStyle = xlNone
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNonee
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
End Sub
Public Sub selection_elimina_formattazione_celle_obbligatorie()
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    Selection.Borders(xlEdgeRight).LineStyle = xlNone
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNonee
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
End Sub

Public Sub EliminaTuttiNomi()
        Dim G, X As Integer
        X = ActiveWorkbook.Names.Count
        For G = X To 1 Step -1
            ActiveWorkbook.Names(G).Delete
        Next
End Sub

Sub cancellaVDC()

    Sheets(foglioDETTAGLIO).Select
    
    Call protectSheet(foglioDETTAGLIO, False)
    
    Range(startSheet & "C" & (rigaTabellone + 1)).Select
    ActiveCell.SpecialCells(xlLastCell).Select
    LastR = ActiveCell.row
    LastC = ActiveCell.Column
    'Cells(LastR, LastC).Select
    Call eliminaRighe(foglioDETTAGLIO, (rigaTabellone + 1), ActiveCell.row)
    
    Range(startSheet & "C" & (rigaTabellone + 1)).Select
    Call protectSheet(foglioDETTAGLIO, True)
    
End Sub
Sub resetActiveSelection()
    Selection.Validation.Delete
    Selection.ClearContents
    Selection.Value = ""
    With Selection.Interior
        .Pattern = xlNone
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    Selection.Borders(xlEdgeRight).LineStyle = xlNone
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
End Sub

Sub eliminaRighe(foglio As String, da As String, a As String)
    ' NB: Il foglio non deve essere protetto
    Sheets(foglio).Select
    Rows(da & ":" & a).Select
    Selection.Delete Shift:=xlUp
End Sub
Function foglioDettaglio_getCelleEditabili()
    Dim listaCelle()
'     listaCelle = Array("C3", "C4", "C5", "C6", "C7", "C8", "C9", "C10", "E3", "E5", "E7", "E8", "E9", "I5", "I6", "I7", "I8", _
'    "L4", "L5", "L6", "L7", "L8", "L9", "O4", "O5", "O6", "O7", "O8", "O9")
    listaCelle = bandoCorrente.getListaCelle
    
    foglioDettaglio_getCelleEditabili = listaCelle
End Function

Sub foglioDettaglio_coloraCelleEditabili()
    
    Dim listaCelle(), splitvar, bvar
    
    listaCelle = foglioDettaglio_getCelleEditabili
    
    For Each Cell In listaCelle
        If Cell = "E3" Then
            Range(Cell).Interior.ColorIndex = coloreCellaBando
        Else
            Range(Cell).Interior.ColorIndex = coloreCelleEditabili
        End If
        
    Next
    
    'TODO MULTIBANDO
'    If (bandoCorrente.getSiglaBandoCorrente = "H2020_PON" Or _
'        bandoCorrente.getSiglaBandoCorrente = "AD_PON" Or _
'        bandoCorrente.getSiglaBandoCorrente = "IS_PON" _
'    ) Then
'        Range("K9").Value = "A.1.6 Beni Immateriali"
'        Range("N9").Value = "A.2.6 Beni Immateriali"
'    Else
'        Range("K9").Value = ""
'        Range("N9").Value = ""
'    End If
    
    If (bandoCorrente.seBandoPON) Then
        Range("K9").Value = "A.1.6 Beni Immateriali"
        Range("N9").Value = "A.2.6 Beni Immateriali"
    Else
        Range("K9").Value = ""
        Range("N9").Value = ""
    End If
    
    
        
End Sub

Sub foglioDettaglio_svuotaCelleEditabili()
    
    Dim listaCelle(), splitvar, bvar
    
    listaCelle = foglioDettaglio_getCelleEditabili
    
    For Each Cell In listaCelle
        
        Range(Cell).ClearContents
    Next
        
End Sub

Sub specialResetSCHEMA_REND() 'da testare
    init_rend
    
    Call protectSheet(foglioDETTAGLIO, False)
   
    
    ' reset singoli fogli
    Call svuotaQS(False, False)
    Call svuotaQS(True, False)
    Call svuotaQS(False, True)
    
    Call svuotaRA_11_PID
    Call svuotaRA_11_PND
    Call svuotaRA_13_ATT
    Call svuotaRA_14_CON
    Call svuotaRA_15_MAG
    Call svuotaRA_15_MAT
    'Call svuotaRA_16_BIMM
    
    Call svuotaSA_21_PID
    Call svuotaSA_21_PND
    Call svuotaSA_23_ATT
    Call svuotaSA_24_CON
    Call svuotaSA_25_MAG
    Call svuotaSA_25_MAT
    'Call svuotaSA_26_BIMM
    
    'TODO MULTIBANDO
'    If (bandoCorrente.getSiglaBandoCorrente = "H2020_PON" Or _
'        bandoCorrente.getSiglaBandoCorrente = "AD_PON" Or _
'        bandoCorrente.getSiglaBandoCorrente = "IS_PON" _
'    ) Then
'
'        Call svuotaRA_16_BIMM
'        Call svuotaSA_26_BIMM
'
'    Else
'
'
'    End If
    If (bandoCorrente.seBandoPON) Then

        Call svuotaRA_16_BIMM
        Call svuotaSA_26_BIMM

    End If
    
    Call svuotaDETTAGLIO_ATTREZZATURE
    Call svuotaDETTAGLIO_COSTO_ORARIO
    
    Call svuotaFoglioDETTAGLIO(True)
    Call svuotaRiepilogo(True)
    
    
    
    Call protectSheet(foglioDETTAGLIO, True)
End Sub

'Conta le Celle Con Uguale Colore di Fondo
Function CountCcolor(range_data As Range, criteria As Range) As Long
    
    Dim datax As Range
    Dim xcolor As Long
    xcolor = criteria.Interior.ColorIndex
    
    For Each datax In range_data
        If datax.Interior.ColorIndex = xcolor Then
            CountCcolor = CountCcolor + 1
        End If
    Next datax
    
End Function

Sub test()
Attribute test.VB_ProcData.VB_Invoke_Func = " \n14"

Call setPasswordToAllSheets(BasicPassword, False)

Call settingConstants
Call setSheetsNames

'Call setPasswordToAllSheets("FCS2468", True)
    'Rows("14:14").Select
    'ActiveWindow.FreezePanes = True
    'Range("A28").Select
End Sub

Sub aggiungiImportoSedeTest(sede As String, vdc As String, importo As Double)

Dim temp As Double
Dim totale As Double

Select Case UCase(Trim(sede))
    Case UCase(Trim(Range(getAddressByName("SEDE_1")).Value))
        temp = Range(getAddressByName(vdc & "_SEDE1")).Value
        totale = temp + importo
        Range(getAddressByName(vdc & "_SEDE1")).Value = totale
        Range(getAddressByName("DEF_SEDE1")).Value = Trim(sede)
        
    Case UCase(Trim(Range(getAddressByName("SEDE_2")).Value))
        temp = Range(getAddressByName(vdc & "_SEDE2")).Value
        totale = temp + importo
        Range(getAddressByName(vdc & "_SEDE2")).Value = totale
        Range(getAddressByName("DEF_SEDE2")).Value = Trim(sede)
        
    Case UCase(Trim(Range(getAddressByName("SEDE_3")).Value))
        temp = Range(getAddressByName(vdc & "_SEDE3")).Value
        totale = temp + importo
        Range(getAddressByName(vdc & "_SEDE3")).Value = totale
        Range(getAddressByName("DEF_SEDE3")).Value = Trim(sede)
    
    Case UCase(Trim(Range(getAddressByName("SEDE_4")).Value))
        temp = Range(getAddressByName(vdc & "_SEDE4")).Value
        totale = temp + importo
        Range(getAddressByName(vdc & "_SEDE4")).Value = totale
        Range(getAddressByName("DEF_SEDE4")).Value = Trim(sede)
        
End Select

End Sub


Function Test_ActiveWorkbook_Protection()
        Dim X As Boolean
        X = False

        If ActiveWorkbook.ProtectWindows Then X = True
        If ActiveWorkbook.ProtectStructure Then X = True

        If X = False Then
           'MsgBox "The workbook is not protected."
        Else
           'MsgBox "The workbook is protected."
        End If

        Test_ActiveWorkbook_Protection = X
End Function
Function Test_ActiveSheet_Protection()
        Dim X As Boolean
        X = False

        If ActiveSheet.ProtectContents Then X = True
        If ActiveSheet.ProtectDrawingObjects Then X = True
        If ActiveSheet.ProtectScenarios Then X = True

        If X = False Then
           'MsgBox "The worksheet is not protected."
        Else
           'MsgBox "The worksheet is protected."
        End If
       
        Test_ActiveSheet_Protection = X

End Function

'Calcolare il numero di mesi tra due date.

'EDate = data precedente
'LDate = data piu recente
'Nota: se si digita LDate o EDate direttamente in questa formula anzich_ in riferimenti di cella, deve essere racchiuso da virgolette (ad esempio, "9/7/00").

'1) Arrotondare per eccesso

'Si basa sui mesi indicati nelle date: Dato un mese con data di inizio 31/10/00 e data di fine di 2/11/00, viene restituito un mese anche se sono trascorsi solo due giorni.
'=(YEAR(LDate)-YEAR(EDate))*12+MONTH(LDate)-MONTH(EDate)
'Esempio:
'Digitare 31/10/99 nella cella A1.
'Digitare la seguente formula nella cella A2:
'=(YEAR(NOW())-YEAR(A1))*12+MONTH(NOW())-MONTH(A1)
'l numero restituito  uguale al numero di mesi a decorrere dal 31/10/99 alla data odierna, arrotondato per eccesso al numero intero successivo..

'2) Arrotondare per difetto

'Utilizza i numeri giorni nei calcoli e arrotonda per difetto al numero di mesi interi pi vicino..
'Ad esempio, se data di inizio 30/10/00 e data di fine 30/11/00, viene restituito un mese; Tuttavia, una data di fine del 29/11/00 restituisce zero.

'=IF(Day(LDate) > =DAY(EDate),0,-1)+(YEAR(LDate)-YEAR(EDate))*12+Month(LDate)-Month(EDate)
'Esempio:
'Digitare 31/10/99 nella cella A1.
'Digitare la seguente formula nella cella B1:
'=IF(Day(Now()) > =DAY(A1),0,-1)+(YEAR(NOW())-YEAR(A1)) *12+MONTH(NOW())-MONTH(A1)
'Nota: assicurarsi che la cella B1 sia formattata come General.
'Il numero restituito  uguale al numero di mesi da 31/10/99 alla data odierna, arrotondato per difetto al numero di mesi interi pi vicino.o.

'Entrambi i metodi sono stati testati su: Microsoft Office Excel 2003, Microsoft Office Excel 2007, Microsoft Excel 2010
Sub Macro3()
Attribute Macro3.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro3 Macro
'

'
    Range("Z9").Select
    ActiveCell.FormulaR1C1 = _
        "=IF(DAY(RC[-21]) >=DAY(R[7]C[-1]),0,-1)+(YEAR(RC[-21])-YEAR(R[7]C[-1]))*12+MONTH(RC[-21])-MONTH(R[7]C[-1])"
    Range("Z10").Select
    Selection.ClearContents
    Range("Z9").Select
End Sub
Sub Macro4()
Attribute Macro4.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro4 Macro
'

'
    Range("Z9").Select
    ActiveCell.FormulaR1C1 = _
        "=IF(DAY(R9C5) >=DAY(R[7]C[-1]),0,-1)+(YEAR(R9C5)-YEAR(R[7]C[-1]))*12+MONTH(R9C5)-MONTH(R[7]C[-1])"
    Range("Z10").Select
End Sub
Sub Macro5()
Attribute Macro5.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro5 Macro
'

'
    Range("Y16").Select
    Selection.Copy
    ActiveWindow.SmallScroll ToRight:=-2
    Range("W9").Select
    ActiveSheet.Paste
    Range("Z9").Select
    application.CutCopyMode = False
    
    ActiveCell.FormulaR1C1 = _
        "=IF(DAY(R9C5) >=DAY(RC[-3]),0,-1)+(YEAR(R9C5)-YEAR(RC[-3]))*12+MONTH(R9C5)-MONTH(RC[-3])"
    Range("Z10").Select
End Sub

Sub hideConfigWorksheets()
' nasconde i fogli di configurazione ovvero non quelli applicativi
' ATTENZIONE la visualizzazione di alcuni fogli applicativi |fffd| legata al tipo di bando scelto
    
    Dim wks As Worksheet
    
    For Each wks In ActiveWorkbook.Worksheets
        
        If (isWksInHiddenList(wks)) Then
            Sheets(wks.name).Visible = False
        End If
        
    Next

End Sub

'Questa |fffd| la lista dei fogli che in fase operativa devono essere nascosti
'per comodit|fffd| gestisco solo i fogli da nascondere dato che l'utente puo' aggiungere fogli a piacere per calcoli personali
Public Function isWksInHiddenList(wks As Worksheet)
    Dim test As Boolean
    test = False
    
    Select Case wks.name
   
        Case foglioCONFIG, foglioTENDINE
            test = True
        
   End Select
   
   isWksInHiddenList = test
    
End Function


Public Sub settingForJavaCompare()

'setto i nomi necessari alla funzione java esterna


Dim BS_foglioQS, BS_foglioQS_CNR, BS_foglioQS_BANCA

'Blank saved
BS_foglioQS = "'" & foglioQS & "'"
BS_foglioQS_CNR = "'" & foglioQS_CNR & "'"
BS_foglioQS_BANCA = "'" & foglioQS_BANCA & "'"

' **********************************
' QUADRO SINGOLO
' **********************************


' Attivita' di Ricerca
' **********************************

' A.1.1 Personale interno
ActiveWorkbook.Names.Add name:="QS_PER_RI_SEDE1", RefersToR1C1:="=" & BS_foglioQS & "!R9C3"
ActiveWorkbook.Names.Add name:="QS_PER_RI_SEDE2", RefersToR1C1:="=" & BS_foglioQS & "!R9C4"
ActiveWorkbook.Names.Add name:="QS_PER_RI_SEDE3", RefersToR1C1:="=" & BS_foglioQS & "!R9C5"
ActiveWorkbook.Names.Add name:="QS_PER_RI_SEDE4", RefersToR1C1:="=" & BS_foglioQS & "!R9C6"
       
       
'A.1.2 Spese Generali
ActiveWorkbook.Names.Add name:="QS_GEN_RI_SEDE1", RefersToR1C1:="=" & BS_foglioQS & "!R10C3"
ActiveWorkbook.Names.Add name:="QS_GEN_RI_SEDE2", RefersToR1C1:="=" & BS_foglioQS & "!R10C4"
ActiveWorkbook.Names.Add name:="QS_GEN_RI_SEDE3", RefersToR1C1:="=" & BS_foglioQS & "!R10C5"
ActiveWorkbook.Names.Add name:="QS_GEN_RI_SEDE4", RefersToR1C1:="=" & BS_foglioQS & "!R10C6"

'A.1.3 Strumenti e attrezzature
ActiveWorkbook.Names.Add name:="QS_STRU_RI_SEDE1", RefersToR1C1:="=" & BS_foglioQS & "!R11C3"
ActiveWorkbook.Names.Add name:="QS_STRU_RI_SEDE2", RefersToR1C1:="=" & BS_foglioQS & "!R11C4"
ActiveWorkbook.Names.Add name:="QS_STRU_RI_SEDE3", RefersToR1C1:="=" & BS_foglioQS & "!R11C5"
ActiveWorkbook.Names.Add name:="QS_STRU_RI_SEDE4", RefersToR1C1:="=" & BS_foglioQS & "!R11C6"

'A.1.4 Servizi di consulenza
ActiveWorkbook.Names.Add name:="QS_CON_RI_SEDE1", RefersToR1C1:="=" & BS_foglioQS & "!R12C3"
ActiveWorkbook.Names.Add name:="QS_CON_RI_SEDE2", RefersToR1C1:="=" & BS_foglioQS & "!R12C4"
ActiveWorkbook.Names.Add name:="QS_CON_RI_SEDE3", RefersToR1C1:="=" & BS_foglioQS & "!R12C5"
ActiveWorkbook.Names.Add name:="QS_CON_RI_SEDE4", RefersToR1C1:="=" & BS_foglioQS & "!R12C6"

'A.1.5 Materiali e forniture
ActiveWorkbook.Names.Add name:="QS_MAT_RI_SEDE1", RefersToR1C1:="=" & BS_foglioQS & "!R13C3"
ActiveWorkbook.Names.Add name:="QS_MAT_RI_SEDE2", RefersToR1C1:="=" & BS_foglioQS & "!R13C4"
ActiveWorkbook.Names.Add name:="QS_MAT_RI_SEDE3", RefersToR1C1:="=" & BS_foglioQS & "!R13C5"
ActiveWorkbook.Names.Add name:="QS_MAT_RI_SEDE4", RefersToR1C1:="=" & BS_foglioQS & "!R13C6"

'A.1.6 Beni Immateriali
If (bandoCorrente.seBandoPON) Then
    ActiveWorkbook.Names.Add name:="QS_IMM_RI_SEDE1", RefersToR1C1:="=" & BS_foglioQS & "!R14C3"
    ActiveWorkbook.Names.Add name:="QS_IMM_RI_SEDE2", RefersToR1C1:="=" & BS_foglioQS & "!R14C4"
    ActiveWorkbook.Names.Add name:="QS_IMM_RI_SEDE3", RefersToR1C1:="=" & BS_foglioQS & "!R14C5"
    ActiveWorkbook.Names.Add name:="QS_IMM_RI_SEDE4", RefersToR1C1:="=" & BS_foglioQS & "!R14C6"
End If

'Tot generale A.1
ActiveWorkbook.Names.Add name:="QS_TOTRI_RI_SEDE1", RefersToR1C1:="=" & BS_foglioQS & "!R15C3"
ActiveWorkbook.Names.Add name:="QS_TOTRI_RI_SEDE2", RefersToR1C1:="=" & BS_foglioQS & "!R15C4"
ActiveWorkbook.Names.Add name:="QS_TOTRI_RI_SEDE3", RefersToR1C1:="=" & BS_foglioQS & "!R15C5"
ActiveWorkbook.Names.Add name:="QS_TOTRI_RI_SEDE4", RefersToR1C1:="=" & BS_foglioQS & "!R15C6"




' Attivita' di Sviluppo
' **********************************

' A.2.1 Personale interno
ActiveWorkbook.Names.Add name:="QS_PER_SS_SEDE1", RefersToR1C1:="=" & BS_foglioQS & "!R17C3"
ActiveWorkbook.Names.Add name:="QS_PER_SS_SEDE2", RefersToR1C1:="=" & BS_foglioQS & "!R17C4"
ActiveWorkbook.Names.Add name:="QS_PER_SS_SEDE3", RefersToR1C1:="=" & BS_foglioQS & "!R17C5"
ActiveWorkbook.Names.Add name:="QS_PER_SS_SEDE4", RefersToR1C1:="=" & BS_foglioQS & "!R17C6"
       
'A.2.2 Spese Generali
ActiveWorkbook.Names.Add name:="QS_GEN_SS_SEDE1", RefersToR1C1:="=" & BS_foglioQS & "!R18C3"
ActiveWorkbook.Names.Add name:="QS_GEN_SS_SEDE2", RefersToR1C1:="=" & BS_foglioQS & "!R18C4"
ActiveWorkbook.Names.Add name:="QS_GEN_SS_SEDE3", RefersToR1C1:="=" & BS_foglioQS & "!R18C5"
ActiveWorkbook.Names.Add name:="QS_GEN_SS_SEDE4", RefersToR1C1:="=" & BS_foglioQS & "!R18C6"

'A.2.3 Strumenti e attrezzature
ActiveWorkbook.Names.Add name:="QS_STRU_SS_SEDE1", RefersToR1C1:="=" & BS_foglioQS & "!R19C3"
ActiveWorkbook.Names.Add name:="QS_STRU_SS_SEDE2", RefersToR1C1:="=" & BS_foglioQS & "!R19C4"
ActiveWorkbook.Names.Add name:="QS_STRU_SS_SEDE3", RefersToR1C1:="=" & BS_foglioQS & "!R19C5"
ActiveWorkbook.Names.Add name:="QS_STRU_SS_SEDE4", RefersToR1C1:="=" & BS_foglioQS & "!R19C6"

'A.2.4 Servizi di consulenza
ActiveWorkbook.Names.Add name:="QS_CON_SS_SEDE1", RefersToR1C1:="=" & BS_foglioQS & "!R20C3"
ActiveWorkbook.Names.Add name:="QS_CON_SS_SEDE2", RefersToR1C1:="=" & BS_foglioQS & "!R20C4"
ActiveWorkbook.Names.Add name:="QS_CON_SS_SEDE3", RefersToR1C1:="=" & BS_foglioQS & "!R20C5"
ActiveWorkbook.Names.Add name:="QS_CON_SS_SEDE4", RefersToR1C1:="=" & BS_foglioQS & "!R20C6"

'A.2.5 MateSSali e forniture
ActiveWorkbook.Names.Add name:="QS_MAT_SS_SEDE1", RefersToR1C1:="=" & BS_foglioQS & "!R21C3"
ActiveWorkbook.Names.Add name:="QS_MAT_SS_SEDE2", RefersToR1C1:="=" & BS_foglioQS & "!R21C4"
ActiveWorkbook.Names.Add name:="QS_MAT_SS_SEDE3", RefersToR1C1:="=" & BS_foglioQS & "!R21C5"
ActiveWorkbook.Names.Add name:="QS_MAT_SS_SEDE4", RefersToR1C1:="=" & BS_foglioQS & "!R21C6"

'A.2.6 Beni Immateriali
If (bandoCorrente.seBandoPON) Then
    ActiveWorkbook.Names.Add name:="QS_IMM_SS_SEDE1", RefersToR1C1:="=" & BS_foglioQS & "!R22C3"
    ActiveWorkbook.Names.Add name:="QS_IMM_SS_SEDE2", RefersToR1C1:="=" & BS_foglioQS & "!R22C4"
    ActiveWorkbook.Names.Add name:="QS_IMM_SS_SEDE3", RefersToR1C1:="=" & BS_foglioQS & "!R22C5"
    ActiveWorkbook.Names.Add name:="QS_IMM_SS_SEDE4", RefersToR1C1:="=" & BS_foglioQS & "!R22C6"
End If

'Tot generale A.2
ActiveWorkbook.Names.Add name:="QS_TOTSS_SS_SEDE1", RefersToR1C1:="=" & BS_foglioQS & "!R23C3"
ActiveWorkbook.Names.Add name:="QS_TOTSS_SS_SEDE2", RefersToR1C1:="=" & BS_foglioQS & "!R23C4"
ActiveWorkbook.Names.Add name:="QS_TOTSS_SS_SEDE3", RefersToR1C1:="=" & BS_foglioQS & "!R23C5"
ActiveWorkbook.Names.Add name:="QS_TOTSS_SS_SEDE4", RefersToR1C1:="=" & BS_foglioQS & "!R23C6"

' **********************************
' QUADRO SINGOLO CNR
' **********************************

' Attivita' di Ricerca
' **********************************
ActiveWorkbook.Names.Add name:="QS_CNR_PER_RI_STRALCI", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R9C8"
ActiveWorkbook.Names.Add name:="QS_CNR_GEN_RI_STRALCI", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R10C8"
ActiveWorkbook.Names.Add name:="QS_CNR_STRU_RI_STRALCI", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R11C8"
ActiveWorkbook.Names.Add name:="QS_CNR_CON_RI_STRALCI", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R12C8"
ActiveWorkbook.Names.Add name:="QS_CNR_MAT_RI_STRALCI", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R13C8"

ActiveWorkbook.Names.Add name:="QS_CNR_PER_RI_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R9C7"
ActiveWorkbook.Names.Add name:="QS_CNR_GEN_RI_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R10C7"
ActiveWorkbook.Names.Add name:="QS_CNR_STRU_RI_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R11C7"
ActiveWorkbook.Names.Add name:="QS_CNR_CON_RI_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R12C7"
ActiveWorkbook.Names.Add name:="QS_CNR_MAT_RI_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R13C7"

If (bandoCorrente.seBandoPON) Then
    ActiveWorkbook.Names.Add name:="QS_CNR_IMM_RI_STRALCI", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R14C8"
    ActiveWorkbook.Names.Add name:="QS_CNR_IMM_RI_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R14C7"
End If

ActiveWorkbook.Names.Add name:="QS_CNR_TOTRI_RI_STRALCI", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R15C8"

ActiveWorkbook.Names.Add name:="QS_CNR_TOTRI_RI_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R15C7"


' Attivita' di Sviluppo
' **********************************
ActiveWorkbook.Names.Add name:="QS_CNR_PER_SS_STRALCI", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R17C8"
ActiveWorkbook.Names.Add name:="QS_CNR_GEN_SS_STRALCI", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R18C8"
ActiveWorkbook.Names.Add name:="QS_CNR_STRU_SS_STRALCI", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R19C8"
ActiveWorkbook.Names.Add name:="QS_CNR_CON_SS_STRALCI", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R20C8"
ActiveWorkbook.Names.Add name:="QS_CNR_MAT_SS_STRALCI", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R21C8"

ActiveWorkbook.Names.Add name:="QS_CNR_PER_SS_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R17C7"
ActiveWorkbook.Names.Add name:="QS_CNR_GEN_SS_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R18C7"
ActiveWorkbook.Names.Add name:="QS_CNR_STRU_SS_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R19C7"
ActiveWorkbook.Names.Add name:="QS_CNR_CON_SS_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R20C7"
ActiveWorkbook.Names.Add name:="QS_CNR_MAT_SS_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R21C7"

If (bandoCorrente.seBandoPON) Then
    ActiveWorkbook.Names.Add name:="QS_CNR_IMM_SS_STRALCI", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R22C8"
    ActiveWorkbook.Names.Add name:="QS_CNR_IMM_SS_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R22C7"
End If

ActiveWorkbook.Names.Add name:="QS_CNR_TOTSS_SS_STRALCI", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R23C8"

ActiveWorkbook.Names.Add name:="QS_CNR_TOTSS_SS_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_CNR & "!R23C7"

' **********************************
' QUADRO SINGOLO BANCA
' **********************************

' Attivita' di Ricerca
' **********************************
ActiveWorkbook.Names.Add name:="QS_BANCA_PER_RI_STRALCI", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R9C8"
ActiveWorkbook.Names.Add name:="QS_BANCA_GEN_RI_STRALCI", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R10C8"
ActiveWorkbook.Names.Add name:="QS_BANCA_STRU_RI_STRALCI", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R11C8"
ActiveWorkbook.Names.Add name:="QS_BANCA_CON_RI_STRALCI", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R12C8"
ActiveWorkbook.Names.Add name:="QS_BANCA_MAT_RI_STRALCI", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R13C8"

ActiveWorkbook.Names.Add name:="QS_BANCA_PER_RI_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R9C7"
ActiveWorkbook.Names.Add name:="QS_BANCA_GEN_RI_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R10C7"
ActiveWorkbook.Names.Add name:="QS_BANCA_STRU_RI_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R11C7"
ActiveWorkbook.Names.Add name:="QS_BANCA_CON_RI_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R12C7"
ActiveWorkbook.Names.Add name:="QS_BANCA_MAT_RI_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R13C7"

If (bandoCorrente.seBandoPON) Then
    ActiveWorkbook.Names.Add name:="QS_BANCA_IMM_RI_STRALCI", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R14C8"
    ActiveWorkbook.Names.Add name:="QS_BANCA_IMM_RI_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R14C7"
End If

ActiveWorkbook.Names.Add name:="QS_BANCA_TOTRI_RI_STRALCI", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R15C8"
ActiveWorkbook.Names.Add name:="QS_BANCA_TOTRI_RI_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R15C7"


' Attivita' di Sviluppo
' **********************************
ActiveWorkbook.Names.Add name:="QS_BANCA_PER_SS_STRALCI", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R17C8"
ActiveWorkbook.Names.Add name:="QS_BANCA_GEN_SS_STRALCI", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R18C8"
ActiveWorkbook.Names.Add name:="QS_BANCA_STRU_SS_STRALCI", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R19C8"
ActiveWorkbook.Names.Add name:="QS_BANCA_CON_SS_STRALCI", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R20C8"
ActiveWorkbook.Names.Add name:="QS_BANCA_MAT_SS_STRALCI", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R21C8"

ActiveWorkbook.Names.Add name:="QS_BANCA_PER_SS_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R17C7"
ActiveWorkbook.Names.Add name:="QS_BANCA_GEN_SS_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R18C7"
ActiveWorkbook.Names.Add name:="QS_BANCA_STRU_SS_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R19C7"
ActiveWorkbook.Names.Add name:="QS_BANCA_CON_SS_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R20C7"
ActiveWorkbook.Names.Add name:="QS_BANCA_MAT_SS_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R21C7"


If (bandoCorrente.seBandoPON) Then
    ActiveWorkbook.Names.Add name:="QS_BANCA_IMM_SS_STRALCI", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R22C8"
    ActiveWorkbook.Names.Add name:="QS_BANCA_IMM_SS_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R22C7"
End If

ActiveWorkbook.Names.Add name:="QS_BANCA_TOTSS_SS_STRALCI", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R23C8"
ActiveWorkbook.Names.Add name:="QS_BANCA_TOTSS_SS_COSTIAMM", RefersToR1C1:="=" & BS_foglioQS_BANCA & "!R23C7"

End Sub
Attribute VB_Name = "configForm"
Attribute VB_Base = "0{EEDB8E35-D091-8B43-96FC-4EE71E63EA38}{1CB6426E-E5CA-7140-A32E-2FBC4F137660}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Dim currentPassword As String
Dim COLORE_VERDE

Dim COLORE_ROSSO


Private Sub currencyButton_Click()
    application.ScreenUpdating = False
    Sheets(foglioCONFIG).Visible = True
    Sheets(foglioCONFIG).Select
    ActiveSheet.Unprotect BasicPassword
    Range(getAddressByName("CONF_SIMB_VALUTA")).Value = currencyField.Text
    'Range(getAddressByName("CONF_SIMB_VALUTA")).Locked = True
    ActiveSheet.protect Password:=BasicPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowFormattingCells:=False
    Sheets(foglioCONFIG).Visible = False
    Sheets(foglioDETTAGLIO).Select
    application.ScreenUpdating = True
    currencyButton.Visible = False
End Sub

Private Sub currencyField_Change()
    currencyButton.Visible = True
End Sub

Private Sub destroyButton_Click()
    Dim rispa, rispb
    rispa = MsgBox("La funzionalita' prevede il reset allo stato iniziale dello schema REND, procedere?", vbOKCancel + vbCritical, "ATTENZIONE")
    If (Trim(rispa) = 1) Then
        rispb = InputBox("Per procedere inserire la password di amministrazione e premere ok", "RESET SCHEMA REND")
        If (Trim(rispb) = BasicPassword) Then
            DestroyForm.Show
        End If
    End If


End Sub

Private Sub passwordButton_Click()
    MsgBox "funzione da implementare"
End Sub

Private Sub ToggleButton1_Click()

End Sub

Private Sub unProtectAllButton_Click()
    If (unProtectAllButton.Caption = "Sblocca Schema REND") Then
        Call setPasswordToAllSheets(currentPassword, False)
        unProtectAllButton.Caption = "Blocca Schema REND"
        status.BackColor = COLORE_VERDE
    Else
        Call setPasswordToAllSheets(currentPassword, True)
        unProtectAllButton.Caption = "Sblocca Schema REND"
        status.BackColor = COLORE_ROSSO
    End If
End Sub

Private Sub UserForm_Initialize()

    Call init_rend
    COLORE_VERDE = &H3DD13
    COLORE_ROSSO = &H702DD

    Dim newPassword As String
    Dim valuta As String
    Dim tempString As String
    
    tempString = Range(getAddressByName("CONF_VERSION")).Value & " del " & Range(getAddressByName("CONF_DT_RELEASED_VERSION")).Value
    versionField.Caption = tempString
    currencyField.Text = Range(getAddressByName("CONF_SIMB_VALUTA")).Value
    currencyButton.Visible = False
    currentPassword = Range(getAddressByName("CONF_PWD_ADMIN")).Value
    If (Trim(currentPassword) <> "") Then
        currentPasswordAdminField.Text = "*****"
        currentPasswordAdminField.Enabled = False
        
        passwordButton.Visible = True
        passwordButton.Enabled = True
        passwordButton.Caption = "aggiorna password"

    Else
        currentPasswordAdminField.Text = ""
        currentPasswordAdminField.Enabled = False
    End If

    If (ActiveSheet.ProtectContents = True) Then
        unProtectAllButton.Caption = "Sblocca Schema REND"
        status.BackColor = COLORE_ROSSO
    Else
        unProtectAllButton.Caption = "Blocca Schema REND"
        status.BackColor = COLORE_VERDE
    End If
    
    If (Sheets(foglioCONFIG).Visible = False) Then
        viewConfigButton.Caption = "Visualizza foglio CONFIG"
        configStatus.BackColor = COLORE_ROSSO
    Else
        viewConfigButton.Caption = "Nascondi foglio CONFIG"
        configStatus.BackColor = COLORE_VERDE
    End If
    
    If (Sheets(foglioTENDINE).Visible = False) Then
        viewTendineButton.Caption = "Visualizza foglio Tendine"
        tendineStatus.BackColor = COLORE_ROSSO
    Else
        viewTendineButton.Caption = "Nascondi foglio Tendine"
        tendineStatus.BackColor = COLORE_VERDE
    End If
    
    'If (Range(getAddressByName("DETT_INFO_BANDO")).Value = "") Then
    '    viewBandoButton.Caption = "Descrizione Bando attualmente non settata"
    '    bandoStatus.BackColor = COLORE_ROSSO
    'Else
        viewBandoButton.Caption = "Resetta Descrizione Bando"
     '   bandoStatus.BackColor = COLORE_VERDE
    'End If
End Sub



Private Sub viewConfigButton_Click()
    If (viewConfigButton.Caption = "Visualizza foglio CONFIG") Then
        Sheets(foglioCONFIG).Visible = True
        viewConfigButton.Caption = "Nascondi foglio CONFIG"
        configStatus.BackColor = COLORE_VERDE
    Else
        Sheets(foglioCONFIG).Visible = False
        viewConfigButton.Caption = "Visualizza foglio CONFIG"
        configStatus.BackColor = COLORE_ROSSO
    End If
End Sub

Private Sub viewTendineButton_Click()
    If (viewTendineButton.Caption = "Visualizza foglio Tendine") Then
        Sheets(foglioTENDINE).Visible = True
        viewTendineButton.Caption = "Nascondi foglio Tendine"
        tendineStatus.BackColor = COLORE_VERDE
    Else
        Sheets(foglioTENDINE).Visible = False
        viewTendineButton.Caption = "Visualizza foglio Tendine"
        tendineStatus.BackColor = COLORE_ROSSO
    End If
End Sub

Private Sub viewBandoButton_Click()
    'If (viewBandoButton.Caption = "Resetta Descrizione Bando") Then
        
        modificaBando ""
        'NewVal = "reset"
        'Selection.Value = ""
        'viewBandoButton.Caption = "Descrizione Bando attualmente non settata"
        'bandoStatus.BackColor = COLORE_ROSSO
    'End If
End Sub

Attribute VB_Name = "sceltaBandoForm"
Attribute VB_Base = "0{CB67FEE6-75E4-6344-8E8D-DF78B9F222C9}{D711AE14-6A3E-4C4A-B657-013A979C2697}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub confermaButton_Click()
    Dim risp
    risp = MsgBox("La selezione del bando non e' revocabile procedere?", vbQuestion + vbOKCancel, "ATTENZIONE")
    If (Trim(risp) = 1) Then
        
        'invoco init_modificaBando e non modificaBando perch|fffd|, almeno per ora, la scelta del bando
        '|fffd| fatta all'inizio e non e' modificabile
        init_modificaBando listaBandi.Value
        sceltaBandoForm.Hide
    
    End If
End Sub

Private Sub listaBandi_Change()
    If (listaBandi.Value <> "") Then
        confermaButton.Enabled = True
    End If
End Sub

Private Sub UserForm_Activate()
    Dim tempString As String
    listaBandi.Value = ""
    tempString = Range(getAddressByName("CONF_VERSION")).Value & " del " & Range(getAddressByName("CONF_DT_RELEASED_VERSION")).Value
    versionField.Caption = tempString
    confermaButton.Enabled = False
End Sub

Private Sub UserForm_Terminate()
    ActiveWorkbook.Save
    application.Quit
  
End Sub



' InQuest injected base64 decoded content
' n)b5
' +-i8
' x""jh
' zwbr
' "n)b
' Bjjb=
' Z'y:
' x%y(^z
' x""jh

INQUEST-PP=macro
